package sl0u;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import pw.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
//*** PROGRAM=SL0U ****
// This application allows a user to enter receipt information
// for a receiving plan for those cartons not expected as part
// of the plan.
// 
// The program will create rows of data in the receipt log
// tables.
// 
// The program will also submit a batch job to create generic
// work order labels used to route the carton to the correct
// receiving lane.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// PK#159   11/01/90  BANTHO  New application.
// Fix      01/08/90  BGOFF   Add application title to map.
//                            Add module identification to map.
//                            Add map name to map.
//                            Add pop-up windows/code for :
//                                xwhcd,xgpcd,xqacd,xdmcd,xpgcd
//                                xumcd,xowcd,xslcd
//                            Add module identification code.
//                            Verify error messages and edits.
//                            Add Pf15 and code to transfer to
//                                SL0T-Planned wo label print.
//                            Add code to transfer to Planned
//                                wo label print after PF6-
//                                   print.
//                            Add pk_crtn_seq_nbr julien date
//                                and increment code.
//                            Corrected insert and update logic
//                              for : DSTLOC.VRMLIT01,
//                                    DSTLOC.VPLNSY01,
//                                    DSTLOC.VPLNLC01,
//                                    DSTLOC.VPLNSZ01,
//                                    DSTLOC.VPLCPO01,
//                                    DPICK.VPKCTL01
//                               this includes rollbacks on
//                               errors and commit at end of
//                               processing.
//                             Fix PF14 to transfer to SW0M -
//                                 Work in process.
// Fix      01/10/90  BGOFF   Add color and style abrev.  .
//                               to map.
//                            Add printer destination to map.
//                            Fix PA2 to initialize fields.
//                            Verify container/po on
//                               DSTLOC.VPLCPO01 to use ux/lane
//                               move ux/lane to map.
//                            Set hold handstack sw to 'y' when
//                               DSTLOC.VPLNSY01 is inserted.
//                            Set all switches to 'n' except
//                               ux flag ('y') when DSTLOC.VPL-
//                               NLC01 is inserted.
//                            Fix attributes and set cursors in
//                              where they should really go.
//                            Add edit so only 1 quality 01 and
//                              quality 02 can only print one
//                              style/color/size per product.
//                            Add po/id routine xssls10 to appl
//                               and move to map.
// Fix      01/22/91  CENGEL  Allow user to update Lane field
//                             after message # 236 appears.
//                            Allow multiple size/qty entries
//                             when QUAL = '02'.
//                            Make sure size entries always
//                             verified.
//                            Make sure Lane goes into VRLITM01
//                             table as 6-digit numeric, zero-
//                             filled, right-hand justified.
//                            The following members modified:
//                             SL0U (appl), SL0UW00 (recd),
//                             SL0U200, SL0U300, SL0U320,
//                             SL0U400, SL0U520, SL0U529,
//                             SL0U530, SL0U600, SL0U633(proc).
// Fix      01/24/91  CENGEL  Correct UNIT count logic.  A
//                             DB2 table was adversely affected
//                             by SL0U: DSTLOC.VPLNSY01.
//                             The variable used to accumulate
//                             the units per case column for
//                             the VRLITM01 table was also
//                             being used to update the units
//                             per product column in VPLNSY01.
//                             A loop was added to separately
//                             compute the units per product
//                             value for each page retrieved
//                             from the temp storage queue.
// FIX      01/31/91  SPOPA   Remove SWXREC from records list.
//          02/12/91  ryonke  code change for table changes.
// fix      02/19/91  ryonke  program was loading wo-grp-nbr
//                            into wo-nbr. value changed to
//                            load zero into wo-nbr.
// fix      02/23/91  rchini  After all the updates have
//                            occured, the program needs to
//                            check the sl-crt-plan-wo-fl in
//                            the dstloc.vplcpo01.  The flag
//                            value should be 'N'.  If the
//                            does not equal 'N', the table
//                            will be updated.
// fix      03/01/91  ryonke  allow entry of lane number when
//                            cantainer/po row not found.
// fix      05/10/91  kheina  Verify container in vrlhdr01
//                            using whse, container, and plan.
//                            Modified module SL0U520.
// SL#0     10/09/91  SPOPA   Change "Allow Implicits" to NO.
// fix      11/12/91  ryonke  Correct problem of b-grade qtys
//                            not get correct values for the
//                            dstloc.vplnsz01 table.
// sl#0     12/19/91  ryonke  change julian date logic to get
//                            the julian day by using the
//                            pkdrec.pkdlbldt(1) value insted
//                            of getting the julian day from
//                            the system for current day.
// sl#0     01/23/92  cengel  deleted proc sl4141 execution
//                            from SL0UT and replaced it with
//                            proc SL4321 execution.
// MAINT    01/28/92  GRAY    SET ALL RECORDS AND MAPS EMPTY
//                            DURING INITIALIZATION.
// SL#0     03/08/93  OVAZQU  - CREATE NEW JCL FOR PF6 WHEN
//                              WHSE = '07'.
//                            - ALLOW ENTRY ON PO-ID FIELD WHEN
//                              WHSE = '07'. THEN CHECK IT AND
//                              GET PO-NBR USING SWV SUB-RTNE.
//                            - INCREASE SIZE OF CARTON FIELD
//                              ON SCREEN. THEN CHECK INPUT:
//                              IF ONLY 4 DIGITS, NO CHANGE.
//                              IF 9 DIGITS, MOVE TO CRTN-SEQ-
//                              NBR. THE LAST 4 DIGITS ARE
//                              MOVED TO CARTON-NBR. BUT FIRST,
//                              IF THE FIRST 3 DIGITS ENTERED
//                              ARE > 399, THEY SHOULD MATCH
//                              THE FACTORY# OBTAINED FROM THE
//                              FACTORY TBL USING THE FACTORY
//                              CODE FROM PC3REC.
// fix      06/23/93  mpluth  - fixed SL0U635 and SL0U643 so
//                              they set the SWFCPWOF to a 'y'.
// fix      10/07/93  WTATE     RENAMED XSACD XEG-ENGR-DIFF-CD
// tblchg   03/01/94  RYONKE    program change for table change
// sl#461   04/07/94  RYONKE    Increase crtn from 4 to 6 digit
//                              ( Not moved into prod )
// sl#461   06/19/95  RMORGA    Put the above changes to the
//                              test and then impliment them
// ASW001   12/29/95  hkempe    Recompiled due to VPLCPO01
//                              table change.
// maint    01/14/97  dmays     change plan number on screen to
//                              5 chars.
// *********************
Program SL0U type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  PC2REC PC2REC; // record
  PC3REC PC3REC; // record
  PCFREC PCFREC; // record
  PCYREC PCYREC; // record
  PKDREC PKDREC; // record
  SL0UW00 SL0UW00; // record
  SL0UW01 SL0UW01; // record
  SL0UW03 SL0UW03; // record
  SL1REC SL1REC; // record
  SL2REC SL2REC; // record
  SL3REC SL3REC; // record
  SLVREC SLVREC; // record
  SLWREC SLWREC; // record
  SQLCA SQLCA; // record
  SW1REC SW1REC; // record
  SWCREC SWCREC; // record
  SWEREC SWEREC; // record
  SWFREC SWFREC; // record
  SWGREC SWGREC; // record
  SWHREC SWHREC; // record
  SWNREC SWNREC; // record
  SWQREC SWQREC; // record
  SWTREC SWTREC; // record
  SWVREC SWVREC; // record
  SY2REC SY2REC; // record
  SYCREC SYCREC; // record
  SYPREC SYPREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  XPCREC XPCREC; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use SL0UT; // table
  use SL0UT1 {deleteAfterUse = yes}; // table
  use XDMTBL; // table
  use XEGTBL; // table
  use XGPTBL; // table
  use XOWTBL; // table
  use XPCTBL; // table
  use XPGTBL; // table
  use XQATBL; // table
  use XROTBL; // table
  use XSLTBL; // table
  use XUMTBL; // table
  use XWHTBL; // table
  use SL0UM.SL0UM001,  // forms
      SL0UM.TA0PM001, 
      SL0UM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPSL001: XPSL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set SL0UM001 initial;
    set TA0PM001 initial;
    set XX0XM001 initial;
    set SL0UW00 empty;
    set SL0UW01 empty;
    set SL0UW03 empty;
    set PCFREC empty;
    set PCYREC empty;
    set PC2REC empty;
    set PC3REC empty;
    set PKDREC empty;
    set TA2REC empty;
    set SLVREC empty;
    set SL1REC empty;
    set SL2REC empty;
    set SL3REC empty;
    set SQLCA empty;
    set SW1REC empty;
    set SWCREC empty;
    set SWEREC empty;
    set SWFREC empty;
    set SWGREC empty;
    set SWHREC empty;
    set SWNREC empty;
    set SWQREC empty;
    set SWTREC empty;
    set SWVREC empty;
    set SYCREC empty;
    set SYPREC empty;
    set SY2REC empty;
    set TAEREC empty;
    set TA1REC empty;
    set TA5REC empty;
    set TA6REC empty;
    set XPCREC empty;
    set FY1REC empty;
    set XX0XW01 empty;
    set XX0XW02 empty;
    set ERRSQLCA empty;

    SL0UW00.SL0UWSWF = "Y"; /* Format the map switch*/
    SL0UW00.SL0UWSWR = "N"; /* Request for data switch*/
    SL0UW00.SL0UWLCS = "N"; /* Lane Change switch*/
    SL0UW00.SL0UWFST = "Y"; /* first time thruogh switch*/
    SL0UW00.SL0UWFRZ = "Y"; /* freeze field switch*/
    SL0UW00.XXXTSLEN = +644; /* set tsq item length*/

     /* ------------------------------------------------------------*/
     /* initialize screen values*/
     /* ------------------------------------------------------------*/

    SL0UW01.SWEPLLNB = 0; /* plan number*/
    SL0UW01.SL8WOGRP = 0; /* work order gorup*/
    SL0UW01.TS3CNTNR = " "; /* work order gorup*/
    SL0UW01.PC3PONBR = 0; /* po number*/
    SL0UW01.SL0UWPOI = " "; /* po id*/
    SL0UW01.PC4ORTYP = " "; /* order type*/
    SL0UW01.TSOCRTNW = 0; /* crtn seq nbr/carton number*/
    SL0UW00.TSOCRTNB = 0; /* carton number*/
    SL0UW01.SWCLNENB = 0; /* lane number*/
    SL0UW01.SY1STNBR = " "; /* style number*/
    SL0UW01.SY2CLRID = " "; /* color code*/
    SL0UW01.XDMCD = "00"; /* dimension code*/
    SL0UW01.XQACD = "01"; /* quality code*/
    SL0UW01.PC2INSEG = "000"; /* quality code*/
    SL0UW01.XEGCD = "000"; /* engr diff code*/
    SL0UW01.XPGCD = "00"; /* package type code*/
    SL0UW01.XUMCD = "01"; /* unit of measure code*/
    SL0UW01.XOWCD = "00"; /* owner group code*/
    SL0UW01.XSLCD = "000"; /* sl class code*/

     /* ------------------------------------------------------------*/
     /* If data was passed in the COMMAREA, use as the initial key.*/
     /* ------------------------------------------------------------*/

    if (COMMAREA.XWHCD > " ") /* WHSE was passed*/

      SL0UW01.XWHCD = COMMAREA.XWHCD; /* WHSE passed*/

      COMMAREA.CAITEM = " "; /* Clear application data*/

    end

    if (COMMAREA.XWHCD == "51") /* WHSE was apparel*/
      SL0UW01.XGPCD = "03"; /* apparel gpc*/
    else
      SL0UW01.XGPCD = "02"; /* footwear gpc*/
    end

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SL0U001; /* Converse the main process*/

    SL0U001: SL0U001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SL0U001; /* Converse the main process*/


  end // end main
end // end SL0U

// Inquire/maintain a table row
Function SL0U001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Display the map initially*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

   /* perform sl0u100 ; not needed*/

  SL0U200(); /* Format and display the map*/

  SL0U300(); /* Check attention identifier*/

  SL0U400(); /* Reset fields to normal intensity*/

  SL0U500(); /* Verify the entered data*/

  SL0U600(); /* Process valid input request*/


end // end SL0U001

// Format and converse the map
Function SL0U200()
  if (converseVar.validationMsgNum != 0)
    SLWREC.SLWMSGNO = converseVar.validationMsgNum;
  end

  if (SL0UW00.SL0UWLCS == "N") /* if Lane not updatable this cycle*/
    set SL0UM001.SWCLNENB initialAttributes; /* disable data entry for Lane*/
  else
    if (converseVar.validationMsgNum == 236) /* if everything validated & ready for print*/
      set SL0UM001.SWCLNENB normal;
                                   /* allow data entry on Lane field*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no errors, format data to display.*/
   /* ------------------------------------------------------------*/

  if (SL0UW00.SL0UWSWF == "Y" /* Map must be formatted*/
   || converseVar.validationMsgNum == 0)
    SL0U210(); /* Format the data on the map*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SL0UM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  SL0UM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SL0UM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SL0UM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    SL0UM001.XXXMODID = SLWREC.XXXLOCID; /* Module identification*/

    set SL0UM001 alarm; /* Indicate sound alarm*/

  end

  converse SL0UM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = " "; /* Module identification*/
  SLWREC.SLWMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = SL0UM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SL0UM001.CAITEM; /* Application data*/


end // end SL0U200

// Format the display data
Function SL0U210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set SL0UM001 empty; /* M001 input/output area*/

  SL0UW00.SL0UWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Format the map key fields from the display storage area.*/
   /* ------------------------------------------------------------*/

  if (SL0UW01.XWHCD == " ") /* whse code not present*/
    set SL0UM001.XWHCD cursor; /* Position cursor*/
  end

  if (SL0UW01.XWHCD == "51") /* whse code = '51'*/
    set SL0UM001.PC3PONBR initialAttributes; /* po number*/
    set SL0UM001.SL0UWPOI skip; /* po id*/
    set SL0UM001.PC4ORTYP skip; /* order type code*/
  else /* other whse code*/
    set SL0UM001.PC3PONBR skip; /* po number*/
    set SL0UM001.SL0UWPOI initialAttributes; /* po id*/
    set SL0UM001.PC4ORTYP initialAttributes; /* order type code*/
  end

  SL0UM001.XWHCD = SL0UW01.XWHCD; /* Warehouse code*/
  SL0UM001.SWEPLLNB = SL0UW01.SWEPLLNB; /* Plan number*/
  SL0UM001.SL8WOGRP = SL0UW01.SL8WOGRP; /* Work Order Group*/
  SL0UM001.TS3CNTNR = SL0UW01.TS3CNTNR; /* Container number*/
  SL0UM001.PC3PONBR = SL0UW01.PC3PONBR; /* po number*/
  SL0UM001.SL0UWPOI = SL0UW01.SL0UWPOI; /* po id*/
  SL0UM001.PC4ORTYP = SL0UW01.PC4ORTYP; /* Order type code*/
  SL0UM001.TSOCRTNB = SL0UW01.TSOCRTNW; /* Carton code*/
  SL0UM001.SWCLNENB = SL0UW01.SWCLNENB; /* Lane code*/
  SL0UM001.XROPDEST = SL0UW01.XROPDEST; /* print dest*/
  SL0UM001.XGPCD = SL0UW01.XGPCD; /* GPC code*/
  SL0UM001.SY1STNBR = SL0UW01.SY1STNBR; /* Style number*/
  SL0UM001.SY1SSTNM = SL0UW01.SY1SSTNM; /* Style name*/
  SL0UM001.SY2CLRID = SL0UW01.SY2CLRID; /* Color identification*/
  SL0UM001.SY2CLRAB = SL0UW01.SY2CLRAB; /* Color abrev.*/
  SL0UM001.XDMCD = SL0UW01.XDMCD; /* Dimension code*/
  SL0UM001.XQACD = SL0UW01.XQACD; /* Quality code*/
  SL0UM001.PC2INSEG = SL0UW01.PC2INSEG; /* Customer cross reference code*/
  SL0UM001.XEGCD = SL0UW01.XEGCD; /* Engineering difference code*/
  SL0UM001.XPGCD = SL0UW01.XPGCD; /* Package code*/
  SL0UM001.XUMCD = SL0UW01.XUMCD; /* Unit of measure code*/
  SL0UM001.XOWCD = SL0UW01.XOWCD; /* Owner Group code*/
  SL0UM001.XSLCD = SL0UW01.XSLCD; /* Stock locate class code*/

   /* ------------------------------------------------------------*/
   /* If there is no data to display, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (SL0UW00.CACHGFL != "Y") /* There is no data to display*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Format the map data fields from the display storage area.*/
   /* ------------------------------------------------------------*/

  set SL0UM001.XWHCD cursor; /* Position cursor*/

  SL0UW00.SL0UWIDX = 1; /* set subscript to 1*/

  while (SL0UW00.SL0UWIDX <= 40) /* repeat for all 40 sizes*/
    SL0UM001.SY4IDDSC[SL0UWIDX] = SL0UW01.SY4IDDSC[SL0UWIDX];
    SL0UM001.SL0UMQTY[SL0UWIDX] = SL0UW01.SL0UWQT[SL0UWIDX];
    SL0UW00.SL0UWIDX = SL0UW00.SL0UWIDX + 1; /* set index up by 1*/
  end

end // end SL0U210

// Check attention identifier
Function SL0U300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    SL0UW00.SL0UWSWF = "Y"; /* Format the map switch*/
    SL0UW00.SL0UWLCS = "N"; /* Lane change disabled*/

    SL0U310(); /* delete temp storage*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/
    SL0U320(); /* initialize fields*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (SL0UM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      SL0U310(); /* delete temp storage*/

      XSSL001(); /* Exit to another application*/

      set SL0UM001.CATOAP cursor, bold; /* Highlight*/

    else

      SLWREC.XXXLOCID = "300"; /* Module identification*/
      converseLib.validationFailed(4); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1  /* PF1 was pressed*/
   || converseVar.eventKey is pf3  /* or PF3 was pressed*/
   || converseVar.eventKey is pf4  /* or PF4 was pressed*/
   || converseVar.eventKey is pf5  /* or PF5 was pressed*/
   || converseVar.eventKey is pf14 /* or PF14 was pressed*/
  )                               
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SL0UM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "SW0R"; /* TO application*/
    end

    if (converseVar.eventKey is pf4) /* PF3 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "SL0M"; /* Application find code*/
    end

    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      COMMAREA.CATOAP = "SW0M"; /* Application find code*/
    end


    SL0US03(); /* update SLWREC*/

    SL0U310(); /* delete temp storage*/

    XSSL001(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf6)  /* and PF6 was not pressed*/

    SLWREC.XXXLOCID = "300"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end

  if (converseVar.eventKey is pf6 /* print key*/
   && SL0UW00.SL0UWENT != "Y")    /* enter switch*/

    SLWREC.XXXLOCID = "300"; /* module id*/
    converseLib.validationFailed(294); /* press enter to process*/
    exit stack; /* exit to display map*/

  end



end // end SL0U300

// Purge any temporary storage
Function SL0U310()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set SL0UW01 empty; /* M001 display storage*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  SL0UW00.TA5TSQIX = 0; /* Highest page number*/
  SL0UW00.XXXTSPAG = 0; /* Highest page number*/

  SL0UW00.SL0UWUNT = 0; /* units per product*/
  SL0UW00.SL0UWTUC = 0; /* units per case*/
  SL0UW00.SL0UWFST = "Y"; /* first time truough switch*/
  SL0UW00.SL0UWFRZ = "N"; /* freeze field flag*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (SL0UW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "310"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0U310

// initialize fields
Function SL0U320()
  SL0UW01.XWHCD = COMMAREA.XWHCD; /* warehouse*/
  SL0UW01.SWEPLLNB = 0; /* plan number*/
  SL0UW01.SL8WOGRP = 0; /* work order group nbr*/
  SL0UW01.TS3CNTNR = " "; /* container*/
  SL0UW01.PC3PONBR = 0; /* po number*/
  SL0UW01.SL0UWPOI = " "; /* po/id type*/
  SL0UW01.PC4ORTYP = " "; /* order type code*/
  SL0UW01.TSOCRTNW = 0; /* crtn seq nbr/carton number*/
  SL0UW00.TSOCRTNB = 0; /* carton number*/
  SL0UW01.SWCLNENB = 0; /* lane code*/
  SL0UW01.SY1STNBR = " "; /* style number*/
  SL0UW01.SY1SSTNM = " "; /* style name*/
  SL0UW01.SY2CLRID = " "; /* color*/
  SL0UW01.SY2CLRAB = " "; /* color abrev.*/
  SL0UW01.XDMCD = "00"; /* dimension*/
  SL0UW01.XQACD = "01"; /* quality*/
  SL0UW01.PC2INSEG = "000"; /* cust xref code*/
  SL0UW01.XEGCD = "000"; /* engineering diff code*/
  SL0UW01.XPGCD = "00"; /* package code*/
  SL0UW01.XUMCD = "01"; /* unit of measure*/
  SL0UW01.XOWCD = "00"; /* owner group code*/
  SL0UW01.XSLCD = "000"; /* stock locate class. code*/

  set SL0UM001.XWHCD initialAttributes; /* warehouse code*/
  set SL0UM001.SWEPLLNB cursor, initialAttributes; /* plan number*/
  set SL0UM001.SL8WOGRP initialAttributes; /* work order group code*/
  set SL0UM001.TS3CNTNR initialAttributes; /* container code*/

  if (SL0UW01.XWHCD == "51") /* whse code = '51'*/
    set SL0UM001.PC3PONBR initialAttributes; /* po number*/
    set SL0UM001.SL0UWPOI skip; /* po id*/
    set SL0UM001.PC4ORTYP skip; /* order type code*/
  else /* other whse code*/
    set SL0UM001.PC3PONBR skip; /* po number*/
    set SL0UM001.SL0UWPOI initialAttributes; /* po id*/
    set SL0UM001.PC4ORTYP initialAttributes; /* order type code*/
  end

  set SL0UM001.TSOCRTNB initialAttributes; /* carton code*/
  if (SL0UW00.SL0UWLCS == "N") /* if Lane change disabled then*/
    set SL0UM001.SWCLNENB initialAttributes; /* set attribute to autoskip*/
  end

  set SL0UM001.XROPDEST initialAttributes;
  set SL0UM001.XGPCD initialAttributes; /* gpc code*/
  set SL0UM001.SY1STNBR initialAttributes; /* style code*/
  set SL0UM001.XQACD initialAttributes; /* quality code*/
  set SL0UM001.SY2CLRID initialAttributes; /* color code*/
  set SL0UM001.XDMCD initialAttributes; /* dimension code*/
  set SL0UM001.PC2INSEG initialAttributes; /* cust xref code*/
  set SL0UM001.XEGCD initialAttributes; /* engineering diff code*/
  set SL0UM001.XPGCD initialAttributes; /* package type code*/
  set SL0UM001.XUMCD initialAttributes; /* unit of measure code*/
  set SL0UM001.XOWCD initialAttributes; /* owner group code*/
  set SL0UM001.XSLCD initialAttributes; /* stock locate class code*/


end // end SL0U320

// Reset highlighted fields
Function SL0U400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SL0UM001.XWHCD initialAttributes; /* Warehouse code*/
  set SL0UM001.SWEPLLNB initialAttributes; /* Plan number*/
  set SL0UM001.SL8WOGRP initialAttributes; /* Work order group*/
  set SL0UM001.TS3CNTNR initialAttributes; /* Container*/

  if (SL0UM001.XWHCD == "51") /* whse code = '51'*/
    set SL0UM001.PC3PONBR initialAttributes; /* po number*/
    set SL0UM001.SL0UWPOI skip; /* po id*/
    set SL0UM001.PC4ORTYP skip; /* order type code*/
  else /* other whse code*/
    set SL0UM001.PC3PONBR skip; /* po number*/
    set SL0UM001.SL0UWPOI initialAttributes; /* po id*/
    set SL0UM001.PC4ORTYP initialAttributes; /* order type code*/
  end

  set SL0UM001.TSOCRTNB initialAttributes; /* Carton code*/

  if (SL0UW00.SL0UWLCS == "N") /* if Lane Change sw is 'NO'*/
    set SL0UM001.SWCLNENB initialAttributes; /* Lane code*/
  end

  set SL0UM001.XROPDEST initialAttributes; /* printer destination*/
  set SL0UM001.XGPCD initialAttributes; /* GPC code*/
  set SL0UM001.SY1STNBR initialAttributes; /* Style number*/
  set SL0UM001.SY2CLRID initialAttributes; /* Color identification*/
  set SL0UM001.XDMCD initialAttributes; /* Dimension code*/
  set SL0UM001.SY1SSTNM initialAttributes; /* style name*/
  set SL0UM001.SY2CLRAB initialAttributes; /* color abrev*/
  set SL0UM001.XQACD initialAttributes; /* Quality code*/
  set SL0UM001.PC2INSEG initialAttributes; /* Cust Cross reference code*/
  set SL0UM001.XEGCD initialAttributes; /* Engineering diff code*/
  set SL0UM001.XPGCD initialAttributes; /* Package code*/
  set SL0UM001.XUMCD initialAttributes; /* Unit of measure code*/
  set SL0UM001.XOWCD initialAttributes; /* Owner group code*/
  set SL0UM001.XSLCD initialAttributes; /* SAtock locate class code*/
  set SL0UM001.CATOAP initialAttributes; /* Commarea TO application*/
  set SL0UM001.CAITEM initialAttributes; /* Commarea application data*/


  SL0UW00.SL0UWIDX = 1; /* set subscript to 1*/

  while (SL0UW00.SL0UWIDX <= 40) /* repeat for all 40 sizes*/
    set SL0UM001.SY4IDDSC[SL0UWIDX] initialAttributes;
    set SL0UM001.SL0UMQTY[SL0UWIDX] initialAttributes;
    SL0UW00.SL0UWIDX = SL0UW00.SL0UWIDX + 1; /* set index up by 1*/
  end

   /* ------------------------------------------------------------*/
   /* If no lists were requested. return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (SL0UM001.XWHCD == "?" /* Warehouse list requested*/
   || SL0UM001.XGPCD == "?" /* gpc list requested*/
   || SL0UM001.XDMCD == "?" /* dimension list requested*/
   || SL0UM001.XQACD == "?" /* quality list requested*/
   || SL0UM001.XPGCD == "?" /* pkg list requested*/
   || SL0UM001.XUMCD == "?" /* unit of mesure list requested*/
   || SL0UM001.XOWCD == "?" /* owner list requested*/
   || SL0UM001.XSLCD == "?") /* sl list requested*/

    if (converseVar.eventKey not enter) /* Enter was not pressed*/

      SLWREC.XXXLOCID = "140"; /* Module identification*/
      converseLib.validationFailed(4); /* PF key may not be used*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* ; Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the lists*/
   /* ------------------------------------------------------------*/

  SL0U410(); /* pop up lists routine*/

   /* ------------------------------------------------------------*/
   /* clear screen from pop-ups, and display map*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* clear screen before display*/

  exit stack; /* exit to display map*/



end // end SL0U400

// Pop-up window lists
Function SL0U410()
   /* ------------------------------------------------------------*/
   /* stock locate pop-up window*/
   /* ------------------------------------------------------------*/

  if (SL0UM001.XSLCD == "?") /* Warehouse list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "STOCK LOCATE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXSL01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SL0UM001.XSLCD = SL0UW01.XSLCD; /* Restore prior code*/
    else
      SL0UM001.XSLCD = XSLTBL.XSLCD[XX0XWPIX]; /* Selected code*/
      SL0UW01.XSLCD = XSLTBL.XSLCD[XX0XWPIX]; /* Selected code*/

    end

    set SL0UM001.XSLCD cursor; /* Establish cursor position*/
    SLWREC.XXXLOCID = "410"; /* module indentification*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* owner group pop-up window*/
   /* ------------------------------------------------------------*/

  if (SL0UM001.XOWCD == "?") /* Warehouse list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "OWNER GROUP "; /* Heading*/
    XX0XW02.XWHCD = SL0UM001.XWHCD;
    SL0UW01.XWHCD = SL0UM001.XWHCD;

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXOW01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SL0UM001.XOWCD = SL0UW01.XOWCD; /* Restore prior code*/
    else
      SL0UM001.XOWCD = XOWTBL.XOWCD[XX0XWPIX]; /* Selected code*/
      SL0UW01.XOWCD = XOWTBL.XOWCD[XX0XWPIX]; /* Selected code*/

    end

    set SL0UM001.XOWCD cursor; /* Establish cursor position*/
    SLWREC.XXXLOCID = "410"; /* module indentification*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* unit of measure pop-up window*/
   /* ------------------------------------------------------------*/

  if (SL0UM001.XUMCD == "?") /* Warehouse list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "UNIT OF MEASURE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXUM01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SL0UM001.XUMCD = SL0UW01.XUMCD; /* Restore prior code*/
    else
      SL0UM001.XUMCD = XUMTBL.XUMCD[XX0XWPIX]; /* Selected code*/
      SL0UW01.XUMCD = XUMTBL.XUMCD[XX0XWPIX]; /* Selected code*/

    end

    set SL0UM001.XUMCD cursor; /* Establish cursor position*/
    SLWREC.XXXLOCID = "410"; /* module indentification*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* packaging type  pop-up window*/
   /* ------------------------------------------------------------*/

  if (SL0UM001.XPGCD == "?") /* Warehouse list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "PACKAGING TYPE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXPG01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SL0UM001.XPGCD = SL0UW01.XPGCD; /* Restore prior code*/
    else
      SL0UM001.XPGCD = XPGTBL.XPGCD[XX0XWPIX]; /* Selected code*/
      SL0UW01.XPGCD = XPGTBL.XPGCD[XX0XWPIX]; /* Selected code*/

    end

    set SL0UM001.XPGCD cursor; /* Establish cursor position*/
    SLWREC.XXXLOCID = "410"; /* module indentification*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* quality code pop-up window*/
   /* ------------------------------------------------------------*/

  if (SL0UM001.XQACD == "?") /* Warehouse list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "QUALITY CODE "; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXQA01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SL0UM001.XQACD = SL0UW01.XQACD; /* Restore prior code*/
    else
      SL0UM001.XQACD = XQATBL.XQACD[XX0XWPIX]; /* Selected code*/
      SL0UW01.XQACD = XQATBL.XQACD[XX0XWPIX]; /* Selected code*/

    end

    set SL0UM001.XQACD cursor; /* Establish cursor position*/
    SLWREC.XXXLOCID = "410"; /* module indentification*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* dimension pop-up window*/
   /* ------------------------------------------------------------*/

  if (SL0UM001.XDMCD == "?") /* Warehouse list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "DIMENSION CODE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXDM01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SL0UM001.XDMCD = SL0UW01.XDMCD; /* Restore prior code*/
    else
      SL0UM001.XDMCD = XDMTBL.XDMCD[XX0XWPIX]; /* Selected code*/
      SL0UW01.XDMCD = XDMTBL.XDMCD[XX0XWPIX]; /* Selected code*/

    end

    set SL0UM001.XDMCD cursor; /* Establish cursor position*/
    SLWREC.XXXLOCID = "410"; /* module indentification*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* gpc pop-up window*/
   /* ------------------------------------------------------------*/

  if (SL0UM001.XGPCD == "?") /* Warehouse list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "GPC CODE   "; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXGP01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SL0UM001.XGPCD = SL0UW01.XGPCD; /* Restore prior code*/
    else
      SL0UM001.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* Selected code*/
      SL0UW01.XGPCD = XGPTBL.XGPCD[XX0XWPIX]; /* Selected code*/

    end

    set SL0UM001.XGPCD cursor; /* Establish cursor position*/
    SLWREC.XXXLOCID = "410"; /* module indentification*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* warehouse pop-up window*/
   /* ------------------------------------------------------------*/

  if (SL0UM001.XWHCD == "?") /* Warehouse list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  WAREHOUSE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXWH01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SL0UM001.XWHCD = SL0UW01.XWHCD; /* Restore prior code*/
    else
      SL0UM001.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* Selected code*/
      SL0UW01.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* Selected code*/

    end

    set SL0UM001.XWHCD cursor; /* Establish cursor position*/
    SLWREC.XXXLOCID = "410"; /* module indentification*/
    return;

  end



end // end SL0U410

// Verify data that was entered
Function SL0U500()
   /* -----------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* -----------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    SLWREC.XXXLOCID = "500"; /* Module identification*/
    set SL0UM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(18); /* Enter only with FAST PATH*/

  end

   /* -----------------------------------------------------------*/
   /* if <ENTER> pressed, QUAL = '01' & tsq record count > 0*/
     /* then the user is attempting to enter multiple products*/
     /* when QUAL = '01' - which is strictly forbidden, or at*/
     /* least seriously discouraged.*/

   /* if SWCLNENB has changed, then a different error message*/
    /* will result from a subsequent proc.*/
   /* -----------------------------------------------------------*/

  if (converseVar.eventKey is enter)
    if (SL0UM001.SWCLNENB == SL0UW01.SWCLNENB)
      if (SL0UW01.XQACD == "01")
        if (SL0UW00.TA5TSQIX > 0)
          SLWREC.XXXLOCID = "500";
          set SL0UM001.XQACD bold;
          converseLib.validationFailed(354);
          return;
        end
      end
    end
  end

   /* -----------------------------------------------------------*/
   /* if PF6 then return to flow*/
   /* -----------------------------------------------------------*/

  if (converseVar.eventKey is pf6) /* print key*/
    SL0U510(); /* verify lane #*/
    return; /* return to flow*/
  end

   /* -----------------------------------------------------------*/
   /* call po rtn XSSLS10*/
   /* -----------------------------------------------------------*/

  set SWVREC empty; /* clear record*/
  SWVREC.XGPCD = SL0UM001.XGPCD; /* gpc*/

  if (SL0UM001.XWHCD == "51") /* whse code = '51'*/
    SWVREC.SWVWFNC = "ID"; /* function*/
    SWVREC.PC3PONBR = SL0UM001.PC3PONBR; /* po nbr*/
  else /* other whse code*/
    SWVREC.SWVWFNC = "NO"; /* function*/
    SWVREC.SWVWPOID = SL0UM001.SL0UWPOI; /* po id*/
    SWVREC.PC4ORTYP = SL0UM001.PC4ORTYP; /* po type*/
  end

  XSSLS10();

  if (SWVREC.SWVWRTN == 0) /* routine successfull*/

    if (SL0UM001.XWHCD == "51") /* whse code = '51'*/
      SL0UM001.SL0UWPOI = SWVREC.SWVWPOID; /* po id*/
      SL0UW01.SL0UWPOI = SWVREC.SWVWPOID;
      SL0UM001.PC4ORTYP = SWVREC.PC4ORTYP; /* po type*/
      SL0UW01.PC4ORTYP = SWVREC.PC4ORTYP;
    else /* other whse code*/
      SL0UM001.PC3PONBR = SWVREC.PC3PONBR; /* po number to map*/
      SL0UW01.PC3PONBR = SWVREC.PC3PONBR;
    end

  else /* routine failed*/

    if (SL0UM001.XWHCD == "51") /* whse code = '51'*/
      set SL0UM001.PC3PONBR cursor, bold;
    else /* other whse code*/
      set SL0UM001.SL0UWPOI cursor, bold;
      set SL0UM001.PC4ORTYP bold;
    end

    SLWREC.XXXLOCID = "500"; /* module id*/
    converseLib.validationFailed(295); /* po rtn failed*/

  end

   /* ------------------------------------------------------------*/
   /* If any error was found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* data verification routines*/
   /* ------------------------------------------------------------*/

  SL0U520(); /* Check for required key fields*/

   /* ------------------------------------------------------------*/
   /* If any error was found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end

  SL0U530(); /* validate modifiable fields*/

   /* ------------------------------------------------------------*/
   /* If any error was found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* move map values to working storage if no errors*/
   /* ------------------------------------------------------------*/

  SL0UW01.XWHCD = SL0UM001.XWHCD; /* Warehouse code*/
  SL0UW01.SWEPLLNB = SL0UM001.SWEPLLNB; /* Plan number*/
  SL0UW01.SL8WOGRP = SL0UM001.SL8WOGRP; /* Work Order Group*/
  SL0UW01.TS3CNTNR = SL0UM001.TS3CNTNR; /* Container number*/
  SL0UW01.PC3PONBR = SL0UM001.PC3PONBR; /* po number*/
  SL0UW01.SL0UWPOI = SL0UM001.SL0UWPOI; /* po id*/
  SL0UW00.PC4ORTYP = SL0UM001.PC4ORTYP; /* po type*/
  SL0UW01.PC4ORTYP = SL0UM001.PC4ORTYP; /* po type*/
  SL0UW01.PC3POIDT = PC3REC.PC3POIDT; /* month range*/
  SL0UW01.PCFSECD = PC3REC.PCFSECD; /* season code*/
  SL0UW01.FY1FCTYC = PC3REC.FY1FCTYC; /* factory code*/
  SL0UW01.SY1SSTNM = SL0UM001.SY1SSTNM; /* style name*/
  SL0UW01.SY2CLRAB = SL0UM001.SY2CLRAB; /* color abrev*/
  SL0UW01.TSOCRTNW = SL0UM001.TSOCRTNB; /* crtn-seq-nbr/crtn-nbr*/
  SL0UW01.SWCLNENB = SL0UM001.SWCLNENB; /* Lane code*/
  SL0UW01.XROPDEST = SL0UM001.XROPDEST; /* print dest*/
  SL0UW01.XGPCD = SL0UM001.XGPCD; /* GPC code*/
  SL0UW01.SY1STNBR = SL0UM001.SY1STNBR; /* Style number*/
  SL0UW01.SY2CLRID = SL0UM001.SY2CLRID; /* Color identification*/
  SL0UW01.XDMCD = SL0UM001.XDMCD; /* Dimension code*/
  SL0UW01.XQACD = SL0UM001.XQACD; /* Quality code*/
  SL0UW01.PC2INSEG = SL0UM001.PC2INSEG; /* Customer cross reference code*/
  SL0UW01.XEGCD = SL0UM001.XEGCD; /* Engineering difference code*/
  SL0UW01.XPGCD = SL0UM001.XPGCD; /* Package code*/
  SL0UW01.XUMCD = SL0UM001.XUMCD; /* Unit of measure code*/
  SL0UW01.XOWCD = SL0UM001.XOWCD; /* Owner Group code*/
  SL0UW01.XSLCD = SL0UM001.XSLCD; /* Stock locate class code*/


end // end SL0U500

// Verify lane number
Function SL0U510()
   /* ------------------------------------------------------------*/
     /* Verify Lane number                        dstloc.vlane001*/
   /* ------------------------------------------------------------*/

  if (SL0UM001.SWCLNENB <= 0) /* no data entered*/
    set SL0UM001.SWCLNENB cursor, bold; /* set attributes*/
    converseLib.validationFailed(11); /* required field*/
    SLWREC.XXXLOCID = "510"; /* module id*/
    exit stack;
  else

    set SWCREC empty; /* clear swqrec*/

    SWCREC.XWHCD = SL0UM001.XWHCD;
    SWCREC.SWCLNENB = SL0UM001.SWCLNENB;
    SWCREC.PKURUNMD = " ";

  end

  try
    call "IO5330" ("S ", SQLCA, SWCREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
      if (SWCREC.XLNCD == "UX") /* unexpected lane type*/
        return;
      else
        set SL0UM001.SWCLNENB cursor, bold; /* set attributes*/
        converseLib.validationFailed(261);
        exit stack;
      end
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      set SL0UM001.SWCLNENB cursor, bold; /* set attributes*/
      SLWREC.XXXLOCID = "510"; /* module id*/
      converseLib.validationFailed(261);
      exit stack;
    end
  end

  if (sysVar.errorCode == "00000000" /* if good return*/
   && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/
    converseLib.validationFailed(31);
    TA1REC.TA1FUNC = "POST";
  else
    converseLib.validationFailed(1);
    TA1REC.TA1FUNC = "RETN";
  end

  converseLib.clearScreen();
   /* clear map*/
  SLWREC.XXXLOCID = "510"; /* module id*/
  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = "510"; /* program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* data base name*/
  TA1REC.TA1TBLVU = "VPLCPO01"; /* table view name*/
  TA1REC.TA1TBLKE = SL0UM001.SWCLNENB; /* table key*/
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack; /* exit to display map*/


end // end SL0U510

// Check for required key fields
Function SL0U520()
   /* ------------------------------------------------------------*/
   /* Verify the Stock Locate Classification code*/
   /* ------------------------------------------------------------*/

  if (SL0UM001.XSLCD in XSLTBL.XSLCD /* Code in table*/
   && XSLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    SL0UW01.XSLCD = SL0UM001.XSLCD; /* save in ws*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    SLWREC.XXXLOCID = "520"; /* Module identification*/
    set SL0UM001.XSLCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(9); /* Field missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* Verify the Owner Group code*/
   /* ------------------------------------------------------------*/

  if (SL0UM001.XOWCD in XOWTBL.XOWCD /* Code in table*/
   && XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    SL0UW01.XOWCD = SL0UM001.XOWCD; /* save in ws*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    SLWREC.XXXLOCID = "520"; /* Module identification*/
    set SL0UM001.XOWCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(9); /* Field missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* Verify the Unit of Measure code*/
   /* ------------------------------------------------------------*/

  if (SL0UM001.XUMCD in XUMTBL.XUMCD /* Code in table*/
   && XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    SL0UW01.XUMCD = SL0UM001.XUMCD; /* save in ws*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    SLWREC.XXXLOCID = "520"; /* Module identification*/
    set SL0UM001.XUMCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(9); /* Field missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* Verify the Package Type code*/
   /* ------------------------------------------------------------*/

  if (SL0UM001.XPGCD in XPGTBL.XPGCD /* Code in table*/
   && XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    SL0UW01.XPGCD = SL0UM001.XPGCD; /* save in ws*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    SLWREC.XXXLOCID = "520"; /* Module identification*/
    set SL0UM001.XPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(9); /* Field missing or invalid*/

  end
   /* ------------------------------------------------------------*/
   /* Verify the Engineering Difference code*/
   /* ------------------------------------------------------------*/

  if (SL0UM001.XEGCD in XEGTBL.XEGCD /* Code in table*/
   && XEGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    SL0UW01.XEGCD = SL0UM001.XEGCD; /* save in ws*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    SLWREC.XXXLOCID = "520"; /* Module identification*/
    set SL0UM001.XEGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(9); /* Field missing or invalid*/

  end

  SL0U521(); /* verify cust xref code*/

   /* ------------------------------------------------------------*/
   /* Verify the Quality code*/
   /* ------------------------------------------------------------*/

  if (SL0UM001.XQACD in XQATBL.XQACD /* Code in table*/
   && XQATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    SL0UW01.XQACD = SL0UM001.XQACD; /* save in wsw*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    SLWREC.XXXLOCID = "520"; /* Module identification*/
    set SL0UM001.XQACD cursor, bold; /* Highlight*/
    converseLib.validationFailed(9); /* Field missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* Verify the Dimension code*/
   /* ------------------------------------------------------------*/

  if (SL0UM001.XDMCD in XDMTBL.XDMCD /* Code in table*/
   && XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    SL0UW01.XDMCD = SL0UM001.XDMCD; /* save in ws*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    SLWREC.XXXLOCID = "520"; /* Module identification*/
    set SL0UM001.XDMCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(9); /* Field missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* Verify that a Color Id was entered.*/
   /* ------------------------------------------------------------*/

  if (SL0UM001.SY2CLRID <= " ") /* color not entered*/

    SLWREC.XXXLOCID = "520"; /* module identification*/
    set SL0UM001.SY2CLRID cursor, bold; /* Highlight*/
    converseLib.validationFailed(9); /* Field missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* Verify that a Style Number was entered.*/
   /* ------------------------------------------------------------*/

  if (SL0UM001.SY1STNBR <= " ") /* Style not entered*/

    SLWREC.XXXLOCID = "520"; /* Module identification*/
    set SL0UM001.SY1STNBR cursor, bold; /* Highlight*/
    converseLib.validationFailed(9); /* Field missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* Verify the style and color if entered.*/
   /* ------------------------------------------------------------*/

  if (SL0UM001.SY2CLRID > " ") /* color entered*/
    if (SL0UM001.SY1STNBR > " ") /* Style entered*/
      SL0U526(); /* verify style and color*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify the General Product Class code.*/
   /* ------------------------------------------------------------*/

  if (SL0UM001.XGPCD in XGPTBL.XGPCD /* Code in table*/
   && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    SL0UW01.XGPCD = SL0UM001.XGPCD; /* save in ws*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    SLWREC.XXXLOCID = "520"; /* Module identification*/
    set SL0UM001.XGPCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(9); /* Field missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* verify printer destination.*/
   /* ------------------------------------------------------------*/

  if (SL0UM001.XROPDEST > " ") /* printer dest entered*/
    if (SL0UM001.XROPDEST in XROTBL.XROPDEST /* printer destination*/
     && XROTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* active status*/
       /* next sentence*/
    else
      SLWREC.XXXLOCID = "520"; /* module id*/
      set SL0UM001.XROPDEST cursor, bold; /* set cursor*/
      converseLib.validationFailed(11); /* required field*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If the assigned Lane was changed by the user, make sure*/
   /* they pressed PF6 (Lane change only acceptable with PF6*/
   /* print request), and then verify the new choice against*/
   /* DSTLOC.VLANE001.  Otherwise, allow SL0U522 to assign the*/
   /* Lane value.*/
   /* ------------------------------------------------------------*/

  if (SL0UW00.SL0UWLCS == "Y")
    if (SL0UM001.SWCLNENB != SL0UW01.SWCLNENB) /* if Lane changed*/
      if (converseVar.eventKey is pf6) /* and PF6 pressed*/
        SL0U529(); /* verify lane change*/
      else
        SLWREC.XXXLOCID = "520"; /* identify module*/
        set SL0UM001.SWCLNENB cursor, bold; /* position & highlight csr*/
        converseLib.validationFailed(3); /* PF6 req'd for Lane change*/
        return;
      end
    end
  else
    SL0U522(); /* assign a Lane number*/
  end

  SL0U523(); /* verify po number & po id*/

  SL0U532(); /* verify crtn-se-nbr/crtn-nbr*/

  SL0U524(); /* verify container*/

  SL0U525(); /* verify plan number*/

   /* ------------------------------------------------------------*/
   /* Verify the Warehouse code.*/
   /* ------------------------------------------------------------*/

  if (SL0UM001.XWHCD in XWHTBL.XWHCD /* Code in table*/
   && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    SL0UW01.XWHCD = SL0UM001.XWHCD; /* save in ws 01*/
    SL0UW03.XWHCD = SL0UM001.XWHCD; /* save in ws 03*/
    COMMAREA.XWHCD = SL0UM001.XWHCD; /* update commarea*/
    SL0UW03.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex]; /* save whse name*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    SLWREC.XXXLOCID = "520"; /* Module identification*/
    set SL0UM001.XWHCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(9); /* Field missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* check temp storage que for duplicates only after a tsq*/
   /* record has been added.*/
   /* ------------------------------------------------------------*/

  if (SL0UW00.SL0UWFST == "Y") /* the first time*/
    SL0U310(); /* purge temp storage first timed*/
  else
    SL0U527(); /* check tsq for duplicate record*/
  end


end // end SL0U520

// Verify cust xref code
Function SL0U521()
   /* ------------------------------------------------------------*/
     /* Verify Customer Cross Reference code      dprodc.vprdcu01*/
   /* ------------------------------------------------------------*/

  if (SL0UM001.PC2INSEG <= " ") /* no data entered*/
    set SL0UM001.PC2INSEG cursor, bold; /* set attributes*/
    converseLib.validationFailed(9); /* required field*/
    SLWREC.XXXLOCID = "521"; /* module id*/
  else
    PC2REC.XGPCD = SL0UM001.XGPCD;
    PC2REC.PC2INSEG = SL0UM001.PC2INSEG;
    try
      call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
    end
    if (sysVar.errorCode == "00000000" /* call successful*/
     && SQLCA.VAGen_SQLCODE == 0)      /* row found*/
      if (PC2REC.XXXSTAT == "A") /* if active, ok*/
         /* next sentence*/
      else
        set SL0UM001.PC2INSEG cursor, bold; /* set attributes*/
        converseLib.validationFailed(10); /* required field*/
        SLWREC.XXXLOCID = "521"; /* module id*/
      end
    else
      if (sysVar.errorCode == "00000000" /* if good return*/
       && SQLCA.VAGen_SQLCODE == 100)    /* row not found*/
        set SL0UM001.PC2INSEG cursor, bold; /* set attributes*/
        converseLib.validationFailed(9);
      else
        if (sysVar.errorCode == "00000000" /* if good return*/
         && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/
          converseLib.validationFailed(31);
          TA1REC.TA1FUNC = "POST";
        else
          converseLib.validationFailed(1);
          TA1REC.TA1FUNC = "RETN";
        end
        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
        TA1REC.TA1PGMNO = "521"; /* program number*/
        TA1REC.TA1DBASE = "DPRODC  "; /* data base name*/
        TA1REC.TA1TBLVU = "VPRDCU01"; /* table view name*/
        TA1REC.TA1TBLKE = SL0UM001.PC2INSEG; /* table key*/
        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
      end

      return; /* return*/
    end
  end



end // end SL0U521

// Select from DSTLOC.VPLCPO01
Function SL0U522()
   /* ------------------------------------------------------------*/
     /* Select Lane number                        DSTLOC.VPLCPO01*/
   /* ------------------------------------------------------------*/

  set SWFREC empty; /* clear record*/
  SWFREC.XWHCD = SL0UM001.XWHCD; /* warhouse*/
  SWFREC.SWEPLLNB = SL0UM001.SWEPLLNB; /* plan #*/
  SWFREC.TSHCNTNR = SL0UM001.TS3CNTNR; /* container*/
  SWFREC.XGPCD = SL0UM001.XGPCD; /* gpc*/
  SWFREC.PC3PONBR = SL0UM001.PC3PONBR; /* po #*/

  try
    call "IO5340" ("S ", SQLCA, SWFREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
      if (SWFREC.SWFULNFR != 0) /* lane #*/
        SL0UM001.SWCLNENB = SWFREC.SWFULNFR; /* lane*/
      end
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      SL0UM001.SWCLNENB = 0; /* lane*/
      return;
    end
  end

  if (sysVar.errorCode == "00000000" /* if good return*/
   && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/
    converseLib.validationFailed(31);
    TA1REC.TA1FUNC = "POST";
  else
    converseLib.validationFailed(1);
    TA1REC.TA1FUNC = "RETN";
  end

  converseLib.clearScreen();
   /* clear map*/
  SLWREC.XXXLOCID = "522"; /* module id*/
  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = "522"; /* program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* data base name*/
  TA1REC.TA1TBLVU = "VLANE001"; /* table view name*/
  TA1REC.TA1TBLKE = SL0UM001.SWCLNENB; /* table key*/
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack; /* exit to display map*/


end // end SL0U522

// Verify po number & po/id type
Function SL0U523()
   /* ------------------------------------------------------------*/
   /* verify po number                            DPRODC.VPOHDR01*/
   /* ------------------------------------------------------------*/

  set PCYREC empty; /* clear parameter record*/
  PCYREC.PCYFUNC = "S "; /* set function code*/

  if (SL0UM001.PC3PONBR > 0) /* data entered*/
    PC3REC.XGPCD = SL0UM001.XGPCD;
    PC3REC.PC3PONBR = SL0UM001.PC3PONBR;
    try
      call "IO3270" (PCYREC, SQLCA, PC3REC) {isNoRefresh = yes, isExternal = yes};
    end

    if (sysVar.errorCode == "00000000" /* call successful*/
     && SQLCA.VAGen_SQLCODE == 0)      /* row found*/
       /* next sentence*/
    else

      if (sysVar.errorCode == "00000000" /* if good return*/
       && SQLCA.VAGen_SQLCODE == 100)    /* row not found*/

        if (SL0UM001.XWHCD == "51") /* whse code = '51'*/
          set SL0UM001.PC3PONBR cursor, bold; /* set attributes*/
        else /* other whse code*/
          set SL0UM001.SL0UWPOI cursor, bold;
          set SL0UM001.PC4ORTYP bold;
        end

        converseLib.validationFailed(342); /* not found on dprodc.vpohdr01 table*/
        SLWREC.XXXLOCID = "523"; /* module id*/
      else

        if (sysVar.errorCode == "00000000" /* if good return*/
         && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/
          converseLib.validationFailed(31);
          TA1REC.TA1FUNC = "POST";
        else
          converseLib.validationFailed(1);
          TA1REC.TA1FUNC = "RETN";
        end

        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
        TA1REC.TA1PGMNO = "523"; /* program number*/
        TA1REC.TA1DBASE = "DPRODC  "; /* data base name*/
        TA1REC.TA1TBLVU = "VPOHDR01"; /* table view name*/
        TA1REC.TA1TBLKE = SL0UM001.PC3PONBR; /* table key*/
        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
      end

      return; /* return*/

    end

  end


end // end SL0U523

// Verify Container code
Function SL0U524()

   /* ------------------------------------------------------------*/
     /* Verify Container code                     dstloc.vrlhdr01*/
     /* Note:*/
      /* Verify that container is on table by selecting a*/
      /* a unique table row using whse and container.*/
      /* Verify that container is valid for the plan by*/
      /* selecting a unique table row using whse, plan, and*/
      /* container.*/
   /* ------------------------------------------------------------*/

  if (SL0UM001.TS3CNTNR <= " ") /* no data entered*/

    set SL0UM001.TS3CNTNR cursor, bold; /* set attributes*/
    converseLib.validationFailed(239); /* container is a required field*/
    SLWREC.XXXLOCID = "524"; /* module id*/
    return;

  else

     /* Test that container number is valid*/

    SL1REC.XWHCD = SL0UM001.XWHCD; /* whse*/
    SL1REC.TS3CNTNR = SL0UM001.TS3CNTNR; /* container*/

    try
      call "IO1570" ("S ", SQLCA, SL1REC) {isNoRefresh = yes, isExternal = yes};
    end

    if (sysVar.errorCode == "00000000") /* call successful*/
      if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
         /* next sentence*/
      end

      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        set SL0UM001.TS3CNTNR cursor, bold; /* set attributes*/
        converseLib.validationFailed(085);
        SLWREC.XXXLOCID = "524"; /* module id*/

        return;
      end

       /* Test that container is valid for the plan*/

      SL1REC.XWHCD = SL0UM001.XWHCD; /* whse*/
      SL1REC.TS3CNTNR = SL0UM001.TS3CNTNR; /* container*/
      SL1REC.SWEPLLNB = SL0UM001.SWEPLLNB; /* plan*/

      try
        call "IO1570" ("SA", SQLCA, SL1REC) {isNoRefresh = yes, isExternal = yes};
      end

      if (sysVar.errorCode == "00000000") /* call successful*/
        if (SQLCA.VAGen_SQLCODE == 0) /* row found*/

          SL0UW03.SWEPLLNB = SL1REC.SWEPLLNB; /* save plan nbr*/
          SL0UW03.XARCD = SL1REC.XARCD; /* save 'from' area cd*/
          SL0UW03.SL4ZONE = SL1REC.SL4ZONE; /* save 'from' zone cd*/
          SL0UW03.SL1CRTBY = SL1REC.SL1CRTBY; /* save crt user*/
          SL0UW03.SL1UPDBY = SL1REC.SL1UPDBY; /* save upd user*/

        end

        if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
          set SL0UM001.SWEPLLNB cursor, bold;
          set SL0UM001.TS3CNTNR bold; /* set attributes*/
          converseLib.validationFailed(407);
          SLWREC.XXXLOCID = "524"; /* module id*/
        end

        return;
      end
    end
  end

  if (sysVar.errorCode == "00000000" /* if good return*/
   && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/

    converseLib.validationFailed(31);
    TA1REC.TA1FUNC = "POST";

  else
    converseLib.validationFailed(1);
    TA1REC.TA1FUNC = "RETN";
  end

  converseLib.clearScreen();
   /* clear screen*/
  SLWREC.XXXLOCID = "524"; /* module id*/
  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = "524"; /* program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* data base name*/
  TA1REC.TA1TBLVU = "VRLHDR01"; /* table view name*/
  TA1REC.TA1TBLKE = SL0UM001.TS3CNTNR; /* table key*/
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;



end // end SL0U524

// Verify Plan number
Function SL0U525()

   /* ------------------------------------------------------------*/
     /* Verify Plan number                        dstloc.vplnhd01*/
   /* ------------------------------------------------------------*/

  set SWEREC empty; /* clear slvrec*/

  if (SL0UM001.SWEPLLNB <= 0) /* no data entered*/
    set SL0UM001.SWEPLLNB cursor, bold; /* set attributes*/
    converseLib.validationFailed(249); /* required field*/
    SLWREC.XXXLOCID = "525"; /* module id*/
    return;
  else
    SWEREC.XWHCD = SL0UM001.XWHCD;
    SWEREC.SWEPLLNB = SL0UM001.SWEPLLNB;

    try
      call "IO5350" ("S ", SQLCA, SWEREC) {isNoRefresh = yes, isExternal = yes};
    end

    if (sysVar.errorCode == "00000000") /* call successful*/
      if (SQLCA.VAGen_SQLCODE == 0) /* row found*/

        if (SWEREC.XRPCD == "SC" /* plan status must be 'SC' or 'IP'*/
         || SWEREC.XRPCD == "IP")

          SL0UW03.SL8WOGRP = SWEREC.SL8WOGRP; /* save sl-wo-grp-nbr*/

        else
          set SL0UM001.SWEPLLNB cursor, bold; /* position & hilite csr*/
          SLWREC.XXXLOCID = "525"; /* identify module*/
          converseLib.validationFailed(218);
                                   /* plan stat invalid for requested fnctn*/
          return;
        end

        SL0UM001.SL8WOGRP = SWEREC.SL8WOGRP;
        return;
      end

      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        set SL0UM001.SWEPLLNB cursor, bold; /* set attributes*/
        SLWREC.XXXLOCID = "525"; /* module id*/
        converseLib.validationFailed(249);
        return;
      end
    end
  end
  if (sysVar.errorCode == "00000000" /* if good return*/
   && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/
    converseLib.validationFailed(31);
    TA1REC.TA1FUNC = "POST";
  else
    converseLib.validationFailed(1);
    TA1REC.TA1FUNC = "POST";
  end

  converseLib.clearScreen();
   /* clear screen*/
  SLWREC.XXXLOCID = "525"; /* module id*/
  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = "525"; /* program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* data base name*/
  TA1REC.TA1TBLVU = "VPLNHD01"; /* table view name*/
  TA1REC.TA1TBLKE = SL0UM001.SWEPLLNB; /* table key*/
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack; /* exit to display map*/



end // end SL0U525

// verify style and color
Function SL0U526()
   /* ------------------------------------------------------------*/
   /* Verify the style and color                  DSTL0C.VCOLOR02*/
   /* ------------------------------------------------------------*/

  set SYCREC empty;

  SYCREC.XGPCD = SL0UM001.XGPCD;
  SYCREC.SY1STNBR = SL0UM001.SY1STNBR;
  SYCREC.SY2CLRID = SL0UM001.SY2CLRID;
  SYCREC.XDMCD = SL0UM001.XDMCD;

  try
    call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* row found*/

    SL0UM001.SY1SSTNM = SYCREC.SY1SSTNM; /* style name*/
    SL0UM001.SY2CLRAB = SYCREC.SY2CLRAB; /* color abrev*/

    return; /* return to calling process*/

  else

    if (sysVar.errorCode == "00000000" /* if good return*/
     && SQLCA.VAGen_SQLCODE == 100)    /* row not found*/

      set SL0UM001.SY1STNBR cursor, bold; /* set attributes*/
      set SL0UM001.SY2CLRID bold; /* set attributes*/
      converseLib.validationFailed(056);
      SLWREC.XXXLOCID = "526"; /* module id*/
      return; /* return to calling process*/

    end
  end

  if (sysVar.errorCode == "00000000" /* if good return*/
   && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/
    converseLib.validationFailed(31);
    TA1REC.TA1FUNC = "POST";
  else
    converseLib.validationFailed(1);
    TA1REC.TA1FUNC = "RETN";
  end

  converseLib.clearScreen();
   /* clear screen*/
  SLWREC.XXXLOCID = "526"; /* module id*/
  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = "526"; /* program number*/
  TA1REC.TA1DBASE = "DPROD   "; /* data base name*/
  TA1REC.TA1TBLVU = "VCOLOR02"; /* table view name*/
  TA1REC.TA1TBLKE = SYCREC.SYCKEY; /* table key*/
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;



end // end SL0U526

// check tsq for duplicates
Function SL0U527()
   /* ------------------------------------------------------------*/
   /* Cycle thru tsq and check the product fields for duplicate*/
   /* records. If found, send error message.*/
   /* ------------------------------------------------------------*/

  SL0UW00.SL0UWTIX = 1; /* set item number to read*/

  while (SL0UW00.SL0UWTIX <= SL0UW00.TA5TSQIX)

    SL0UW00.XXXTSPAG = SL0UW00.SL0UWTIX; /* temp storqage page*/

    SL0U528(); /* read temp storage*/

    if (SL0UM001.SY1STNBR == SL0UW01.SY1STNBR /* same style*/
     && SL0UM001.SY2CLRID == SL0UW01.SY2CLRID /* same color*/
     && SL0UM001.XDMCD == SL0UW01.XDMCD       /* same dimension*/
     && SL0UM001.PC2INSEG == SL0UW01.PC2INSEG /* same cust xref*/
     && SL0UM001.XEGCD == SL0UW01.XEGCD       /* same eng diff code*/
     && SL0UM001.XPGCD == SL0UW01.XPGCD       /* same package*/
     && SL0UM001.XUMCD == SL0UW01.XUMCD       /* same unit of measure*/
     && SL0UM001.XOWCD == SL0UW01.XOWCD       /* same owner group code*/
     && SL0UM001.XSLCD == SL0UW01.XSLCD)      /* same stock locate class*/
      converseLib.validationFailed(230);
      SLWREC.XXXLOCID = "527"; /* module id*/

      exit stack; /* display error msg*/

    end

    SL0UW00.SL0UWTIX = SL0UW00.SL0UWTIX + 1; /* set item number up by 1*/

  end

end // end SL0U527

// read tsq record
Function SL0U528()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  SL0UW01.XXXTSLEN = SL0UW00.XXXTSLEN;
  TA5REC.TA5TSQIX = SL0UW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (SL0UW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "528"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SL0U528

// Verify Lane Against VLANE001
Function SL0U529()
   /* ------------------------------------------------------------*/
     /* Verify Lane against DSTLOC.VLANE001*/
   /* ------------------------------------------------------------*/

  set SWCREC empty; /* clear I/O record for IO5330*/
  SWCREC.XWHCD = SL0UM001.XWHCD; /* Warehouse*/
  SWCREC.SWCLNENB = SL0UM001.SWCLNENB; /* Lane*/
  SWCREC.PKURUNMD = " "; /* picking run mode*/

   /* ------------------------------------------------------------*/
   /* Perform Select Unique function on DSTLOC.VLANE001 table,*/
   /* using Warehouse & Lane as keys, in order to retreive the*/
   /* Lane Type Code.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5330" ("S ", SQLCA, SWCREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
      if (SWCREC.XLNCD == "UX") /* Lane type is Unexpected*/
        SL0UW01.SWCLNENB = SL0UM001.SWCLNENB; /* save value*/
      else
        SLWREC.XXXLOCID = "529"; /* identify module*/
        set SL0UM001.SWCLNENB cursor, bold; /* position & highlight csr*/
        converseLib.validationFailed(261); /* invalid Lane Category*/
        return;
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        set SL0UM001.SWCLNENB cursor, bold; /* set attributes*/
        SLWREC.XXXLOCID = "529"; /* module id*/
        converseLib.validationFailed(115); /* record(s) not found*/
        return;
      end
    end
  end

  if (sysVar.errorCode == "00000000" /* if good return*/
   && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/
    converseLib.validationFailed(31); /* resources unavailable - try again*/
    TA1REC.TA1FUNC = "POST";
  else
    converseLib.validationFailed(1); /* error - please notify programming*/
    TA1REC.TA1FUNC = "RETN";
  end

  converseLib.clearScreen();
   /* clear map*/
  SLWREC.XXXLOCID = "529"; /* module id*/
  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
  TA1REC.TA1PGMNO = "529"; /* program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* data base name*/
  TA1REC.TA1TBLVU = "VLANE001"; /* table view name*/
  TA1REC.TA1TBLKE = SL0UM001.SWCLNENB; /* table key*/
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack; /* exit to display map*/


end // end SL0U529

// Verify size/qty fields
Function SL0U530()
   /* ------------------------------------------------------------*/
   /* If a size was entered, verify that a qty was entered also.*/
   /* only complete sets are moved to SL0Uw01*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* first check if size and quantity entered and valid.*/
   /* ------------------------------------------------------------*/

  SL0UW00.SL0UWIDX = 1; /* initialize subscript*/

  while (SL0UW00.SL0UWIDX <= 40) /* for each entry*/
    if (SL0UM001.SY4IDDSC[SL0UWIDX] > " ") /* if size entered*/
      if (SL0UM001.SL0UMQTY[SL0UWIDX] > 0) /* if qty entered*/
        SL0UW01.SY4IDDSC[SL0UWIDX] = SL0UM001.SY4IDDSC[SL0UWIDX];
        SL0UW01.SL0UWQT[SL0UWIDX] = SL0UM001.SL0UMQTY[SL0UWIDX];
      else
        set SL0UM001.SL0UMQTY[SL0UWIDX] cursor, bold; /* no qty entered*/
        converseLib.validationFailed(283); /* missing qty field*/
        SLWREC.XXXLOCID = "530"; /* module id*/
      end
    else /* no size entered*/
      if (SL0UM001.SL0UMQTY[SL0UWIDX] > 0) /* qty entered*/
        converseLib.validationFailed(284); /* missing size field*/
        set SL0UM001.SY4IDDSC[SL0UWIDX] cursor, bold; /* Highlight*/
        SLWREC.XXXLOCID = "530"; /* module id*/
      end
    end
    if (SL0UM001.SY4IDDSC[SL0UWIDX] == " " /* if no size entered*/
     && SL0UW00.SL0UWIDX == 1)            
      converseLib.validationFailed(181); /* must be in first field*/
      SLWREC.XXXLOCID = "530"; /* module id*/
      set SL0UM001.SY4IDDSC[SL0UWIDX] cursor, bold; /* Highlight*/
      set SL0UM001.SL0UMQTY[SL0UWIDX] bold; /* Highlight*/
      return;
    end
    SL0UW00.SL0UWIDX = SL0UW00.SL0UWIDX + 1; /* set index up by 1*/
  end

   /* ------------------------------------------------------------*/
   /* then check for more than 1 size entered if quality 01.*/
   /* ------------------------------------------------------------*/

  if (SL0UM001.XQACD == "01") /* quality is 01*/
     /* OR SL0UM001.XQACD EQ '02'     ; OR 02*/

    SL0UW00.SL0UWIDX = 1; /* initialize subscript*/

    while (SL0UW00.SL0UWIDX <= 40) /* for each entry*/
      if (SL0UM001.SY4IDDSC[SL0UWIDX] > " " /* if size entered*/
       && SL0UW00.SL0UWIDX > 1)            

        converseLib.validationFailed(354); /* only 1 style/color/size*/
        SLWREC.XXXLOCID = "530"; /* module id*/
        set SL0UM001.SY4IDDSC[SL0UWIDX] cursor, bold; /* Highlight*/
        set SL0UM001.SL0UMQTY[SL0UWIDX] bold; /* Highlight*/
        return;

      end
      SL0UW00.SL0UWIDX = SL0UW00.SL0UWIDX + 1; /* set index up by 1*/
    end
  end

   /* ------------------------------------------------------------*/
   /* if error encountered do not verify sizes*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0)
    return;
  end

   /* ------------------------------------------------------------*/
   /* convert all sizes to internal format. check size return*/
   /* codes for invalid sizes.*/
   /* ------------------------------------------------------------*/

  SL0U531(); /* convert sizes*/


end // end SL0U530

// convert sizes
Function SL0U531()
   /* ************************************************************/
   /* *** make one time table accesses for auxillary and/or   ****/
   /* *** main data                                           ****/
   /* *** note: first time executions before beginning a loop ****/
   /* ***       might also be performed                       ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** obtain all valid size data for use during detail    ****/
   /* *** (size) row creatation                               ****/
   /* ************************************************************/

  set SYPREC empty;

  SYPREC.SYPFC = "EI"; /* external to internal translate*/
  SYPREC.SYPCMPSW = "C"; /* indicate compressed format*/

  SYPREC.XGPCD = SL0UM001.XGPCD;
  SYPREC.SY1STNBR = SL0UM001.SY1STNBR;
  SYPREC.SY2CLRID = SL0UM001.SY2CLRID;
  SYPREC.XDMCD = SL0UM001.XDMCD;
  SYPREC.XQACD = "**";

   /* ------------------------------------------------------------*/
     /* translate those sizes which passed the initial edits*/
   /* ------------------------------------------------------------*/

  SL0UW00.SL0UWIDX = +1; /* initialize index*/

  while (SL0UWIDX <= 40)
    if (SL0UW01.SY4IDDSC[SL0UWIDX] > " ")
      SYPREC.SY4IDDSC[SL0UWIDX] = SL0UW01.SY4IDDSC[SL0UWIDX];
    end
    SL0UW00.SL0UWIDX = SL0UW00.SL0UWIDX + 1;
  end


  TA1REC.TA1LOCAT[2] = "SL0U531 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSYPI1(); /* <=== get size xlations*/

  if (SYPREC.SYPRC == 0
   || SYPREC.SYPRC == 2
   || SYPREC.SYPRC == 10)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "531";
      converseLib.validationFailed(0031); /* <--- try again msg*/
      return;
    else
      SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
      SLWREC.XXXLOCID = "531";
      converseLib.validationFailed(0001); /* <--- severe error msg*/
      return;
    end
  end

   /* ------------------------------------------------------------*/
    /* This routine will move each xlated size to working storage*/
    /* If any bad size return codes, set the screen attributes.*/
    /* The fields are checked from bottom to top.(ie.- from the*/
    /* 40th occurrance to the 1st).*/
   /* ------------------------------------------------------------*/

  SL0UW00.SL0UWIDX = +40; /* initialize index*/

  while (SL0UW00.SL0UWIDX != 0)
    if (SL0UW01.SY4IDDSC[SL0UWIDX] > " ")
      if (SYPREC.SYPSZRC[SL0UWIDX] == 0) /* good size return code*/
        SL0UW01.SY5SZID[SL0UWIDX] = SYPREC.SY5SZID[SL0UWIDX];
      else
        set SL0UM001.SY4IDDSC[SL0UWIDX] cursor, bold;
        SLWREC.XXXLOCID = "531";
        converseLib.validationFailed(0238); /* <--- size not valid*/
      end
    end
    SL0UW00.SL0UWIDX = SL0UW00.SL0UWIDX - 1;
  end

end // end SL0U531

// Verify carton number
Function SL0U532()
   /* -----------------------------------------------------------*/
   /* verify carton number                        DFCTY.VFCTY001*/
   /* -----------------------------------------------------------*/

  SL0UW01.TSOCRTNW = 0; /* restore crtn-seq#/crtn#*/
  SL0UW00.TSOCRTNB = 0; /* restore carton number*/

  if (SL0UM001.TSOCRTNB <= 0) /* carton not entered*/
    SLWREC.XXXLOCID = "532"; /* module identification*/
    set SL0UM001.TSOCRTNB cursor, bold; /* highlight*/
    converseLib.validationFailed(9);
    return; /* return*/
  end

  SL0UW01.TSOCRTNW = SL0UM001.TSOCRTNB; /* save in crtn-seq#/crtn#*/
  SL0UW00.WKCRTNGR = SL0UM001.TSOCRTNB; /* move to work area*/
  SL0UW00.TSOCRTNB = SL0UW00.WKCRTNL6; /* save carton number*/

  if (SL0UM001.TSOCRTNB > 999999) /* more than 6 digits entered*/

    if (SL0UW00.WKCRTNF3 < 400) /* 1st 3 digits are less than 400*/

      SLWREC.XXXLOCID = "532"; /* module identification*/
      set SL0UM001.TSOCRTNB cursor, bold; /* highlight*/
      converseLib.validationFailed(371); /* invalid carton nbr*/

    else /* good carton, now check factory cd*/

      set FY1REC empty; /* clear factory record*/
      FY1REC.XGPCD = SL0UM001.XGPCD; /* gpc code*/
      FY1REC.FY1FCTYC = PC3REC.FY1FCTYC; /* factory code*/

      try
        call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes};
      end

      if (sysVar.errorCode == "00000000") /* call successful*/

        if (SQLCA.VAGen_SQLCODE == 0 /* row found*/
         || SQLCA.VAGen_SQLCODE == 100) /* row not found*/

          if (SQLCA.VAGen_SQLCODE == 100 /* row not found*/
           || FY1REC.FY-FCTY-NBR != SL0UW00.WKCRTNF3)

            SLWREC.XXXLOCID = "532"; /* module identification*/
            set SL0UM001.TSOCRTNB cursor, bold; /* highlight*/
            converseLib.validationFailed(371); /* invalid carton nbr*/

          end

          return;

        end

      end

      if (sysVar.errorCode == "00000000" /* if good return*/
       && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/

        converseLib.validationFailed(31);
        TA1REC.TA1FUNC = "POST";
      else
        converseLib.validationFailed(1);
        TA1REC.TA1FUNC = "RETN";

      end

      TA1REC.TA1TYPE = "DB2 ";
      SLWREC.XXXLOCID = "532"; /* module identification*/
      TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
      TA1REC.TA1LOC = "SELECT A ROW";
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* program application*/
      TA1REC.TA1PGMNO = "532"; /* program number*/
      TA1REC.TA1DBASE = "DFCTY   "; /* data base name*/
      TA1REC.TA1TBLVU = "VFCTY001"; /* table view name*/
      TA1REC.TA1TBLKE = FY1REC.FY1KEY; /* table key*/

      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

      exit stack; /* Exit to display map*/

    end

  end


end // end SL0U532

// Process valid input request
Function SL0U600()
   /* ------------------------------------------------------------*/
   /* indicate that map must be formated for display*/
   /* ------------------------------------------------------------*/

  SL0UW00.SL0UWSWF = "Y"; /* format the map*/

   /* ------------------------------------------------------------*/
   /* Set Lane Change switch to no (not allowed to update Lane)*/
   /* ------------------------------------------------------------*/

  SL0UW00.SL0UWLCS = "N";

   /* ------------------------------------------------------------*/
                  /* main processing logic*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* if no errors*/
    if (converseVar.eventKey is enter) /* enter pressed ?*/

      /* --------------------------------------------------------*/
       /* add all qty fields up for the units per case*/
      /* --------------------------------------------------------*/
      SL0UW00.SL0UWIDX = 1; /* set index to 1*/
      while (SL0UW00.SL0UWIDX <= 40) /* for all 40 entries*/
        SL0UW00.SL0UWTUC = SL0UW00.SL0UWTUC + SL0UW01.SL0UWQT[SL0UWIDX];
        SL0UW00.SL0UWIDX = SL0UW00.SL0UWIDX + 1;
      end

      SL0U605(); /* add a record to tsq*/
      SL0UW00.SL0UWENT = "Y"; /* enter flag*/
      SL0UW00.SL0UWLCS = "Y"; /* allow Lane to be updated*/
      SL0UW00.SL0UWFST = "N"; /* first time through switch*/
      converseLib.validationFailed(236); /* screen values processed*/
      SLWREC.XXXLOCID = "600"; /* module id*/

    end

    if (converseVar.eventKey is pf6) /* F6 pressed or*/
      SL0U609(); /* freeze map fields*/
      SL0U610(); /* cycle thru tsq data*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* commit inserts and updates*/
      converseLib.validationFailed(20); /* transaction completed*/

      /* ------------------------------------------------------------*/
       /* transfer to SL0T after print*/
      /* SL0T HAS BEEN DEINSTALLED THIS IS A TEMP FIX*/
      /* ------------------------------------------------------------*/

      COMMAREA.CATOAP = "SL0U"; /* Application find code*/

      SL0US03(); /* update slwrec*/
      SL0U310(); /* delete tsq*/

      XSSL001(); /* Exit to another application*/

    end
    SL0U615(); /* set default screen values*/
  end

end // end SL0U600

// add record to tsq
Function SL0U605()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  SL0UW01.XXXTSLEN = SL0UW00.XXXTSLEN; /* set tsq length*/
  SL0UW00.TA5TSQIX = SL0UW00.TA5TSQIX + 1; /* set tsq item number*/
  TA5REC.TA5TSQIX = SL0UW00.TA5TSQIX;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (SL0UW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    SL0UW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest item number*/
    TA5REC.TA5TSQIX = 0; /* Current item number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  converseLib.validationFailed(1); /* Indicate system error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "S02"; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SL0U605

// set defaults and attributes
Function SL0U609()
   /* ------------------------------------------------------------*/
   /* set fields to be frozen on an update error*/
   /* ------------------------------------------------------------*/

  SL0UW00.SL0UWFRZ = "Y"; /* freeze fields flag*/

   /* ------------------------------------------------------------*/
       /* set attributes to autoskip*/
   /* ------------------------------------------------------------*/

  set SL0UM001.XWHCD skip; /* warehouse code*/
  set SL0UM001.SWEPLLNB skip; /* plan number*/
  set SL0UM001.SL8WOGRP skip; /* work order group code*/
  set SL0UM001.TS3CNTNR skip; /* container code*/
  set SL0UM001.PC3PONBR skip; /* po number*/
  set SL0UM001.SL0UWPOI skip; /* po id*/
  set SL0UM001.PC4ORTYP skip; /* order type code*/
  set SL0UM001.TSOCRTNB skip; /* carton code*/
  set SL0UM001.SWCLNENB normal; /* lane code*/
  set SL0UM001.XGPCD skip; /* gpc code*/
  set SL0UM001.SY1STNBR skip; /* style code*/
  set SL0UM001.XQACD skip; /* quality code*/
  set SL0UM001.SY2CLRID skip; /* color code*/
  set SL0UM001.XDMCD skip; /* dimension code*/
  set SL0UM001.PC2INSEG skip; /* cust xref code*/
  set SL0UM001.XEGCD skip; /* engineering diff code*/
  set SL0UM001.XPGCD skip; /* package type code*/
  set SL0UM001.XUMCD skip; /* unit of measure code*/
  set SL0UM001.XOWCD skip; /* owner group code*/
  set SL0UM001.XSLCD skip; /* stock locate class code*/

end // end SL0U609

// update tables from tsq PROCESS
Function SL0U610()
   /* -----------------------------------------------------------*/
   /* get carton sequence number*/
   /* -----------------------------------------------------------*/

  XX0XS01(); /* get dates*/

  SL0U631(); /* get carton seq nbr*/

  SW1REC.SW1CURDT = PKDREC.PKDLBLDT[1]; /* pick label date*/

   /* convert label date to jul*/
  XSSLS-DATE2JULIAN();
  if (SL0UM001.TSOCRTNB > 999999) /* crtn-seq-nbr entered on carton*/

    PKDREC.PKDNCSQN = SL0UM001.TSOCRTNB; /* crtn-seq-nbr*/
    SL0UW01.PKDNCSQN = SL0UM001.TSOCRTNB;
    SL0UW00.SL0UWCSQ = SL0UM001.TSOCRTNB;

  else /* no crtn-seq-nbr entered on carton*/

     /* ---------------------------------------------------------*/
     /* these moves will reformat pkdncsqn to have julian date*/
     /* in the first part of number the final number will be*/
     /* SL0UW00.SL0UWCSQ to use for updates and inserts.*/
     /* ---------------------------------------------------------*/

    SL0UW00.SL0UWJDT = SW1REC.SW1JULNN; /* julian date yyddd*/
    SL0UW00.SL0UWCN3 = SL0UW00.SL0UWDDD; /* julian date*/
    SL0UW00.SL0UWCN6 = PKDREC.PKDNCSQN; /* carton seq nbr*/
    SL0UW01.PKDNCSQN = SL0UW00.SL0UWCSQ;

    if (PKDREC.PKDNCSQN == 999999) /* carton seq nbr*/
      PKDREC.PKDNCSQN = 1; /* carton seq nbr*/
    else
      PKDREC.PKDNCSQN = PKDREC.PKDNCSQN + 1; /* increment number*/
    end

    SL0U630(); /* update carton seq nbr*/

  end

  SL0UW00.SL0UWTIX = 1; /* set item number to read*/

   /* ---------------------------------------------------------*/
   /* Cycle thru temp storage and update the receipt log item tbl*/
   /* the container/po tbl, the plan product tbl and the*/
   /* plan/lane/carton tbl.*/
   /* ---------------------------------------------------------*/

  while (SL0UW00.SL0UWTIX <= SL0UW00.TA5TSQIX) /* until eof temp storage*/

    SL0UW00.XXXTSPAG = SL0UW00.SL0UWTIX;

    SL0U632(); /* read next temp storage rec*/

    SL0U633(); /* process dstloc.vrlitm01*/

    SL0U635(); /* process dstloc.vplcpo01*/

    SL0U636(); /* process dstloc.vplnsy01*/

    SL0U640(); /* process dstloc.vplnlc01/vplnsz01*/

    SL0UW00.SL0UWTIX = SL0UW00.SL0UWTIX + 1; /* set item number up by 1*/

  end

     /* ---------------------------------------------------------*/
       /* Validate sl-crt-plan-wo-fl in dstloc.vplcpo01.*/
     /* ---------------------------------------------------------*/

  SL0U643(); /* validate the work order flag*/

     /* ---------------------------------------------------------*/
       /* move parm fields to parm record*/
     /* ---------------------------------------------------------*/

  SWTREC.XWHCD = SL0UW01.XWHCD; /* warehouse code*/
  SWTREC.TSHCNTNR = SL0UW01.TS3CNTNR; /* container nbr*/
  SWTREC.SWTWOTYP = "C"; /* work order type*/
  SWTREC.SWTCSEQN = SL0UW00.SL0UWCSQ; /* carton sequence nbr*/
  SWTREC.SL2PALET = " "; /* pallet number*/
  SWTREC.SL5LOCTN = " "; /* location*/
  SWTREC.SWTPLLNB = SL0UW01.SWEPLLNB; /* plan number*/
  SWTREC.SWTWOGRP = SL0UW01.SL8WOGRP; /* work order group*/
  SWTREC.SWTWONBR = 0; /* work order number*/
  SWTREC.XXXUSER = "XXXXXXXX"; /* user id*/
  SWTREC.SWTPLUPF = "U"; /* planned/unplanned flag*/

     /* ---------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
     /* ---------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  TA6REC.TA6INDEX = 1; /* TA6 (output) index*/
  SLWREC.SLWIDX01 = 1; /* SL0UT/SL0UT1 (input) index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* End of Process test*/

    /* ------------------------------------------------------------*/
    /* Format the variable parameters entered by the user.*/
    /* ------------------------------------------------------------*/

    if (SL0UM001.XWHCD == "51") /* If whse = '51'?*/

     /* ------------------------------------------------------------*/
      /* Format the variable parameters entered by the user.*/
     /* ------------------------------------------------------------*/

      if (SL0UT.TARTYPE[SLWIDX01] == "P") /* Parameter Record*/
        SL0UT.TARJCL[SLWIDX01] = SWTREC.SWTGROUP;
      end

      if (SL0UT.TARTYPE[SLWIDX01] == "Q") /* RLOGIN Records*/
        SLWREC.SLWIDX02 = 1; /* RLOGIN array idx*/

        while (SLWREC.SLWIDX02 <= 41) /* until end of RLOGIN tbl*/
          if (SL0UW03.SL0UWRLR[SLWIDX02] != "          ") /* if data found*/
            TA6REC.TARJCL[TA6INDEX] = SL0UW03.SL0UWRLR[SLWIDX02];
            TA6REC.TARTYPE[TA6INDEX] = "Q";
            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1;
                                   /* incr TA6 (output) idx*/
          end /* End If*/
          SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1; /* incr RLOGIN array idx*/
        end /* End While*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX - 1; /* reset TA6 (output) idx*/
        SL0UT.TARJCL[SLWIDX01] = TA6REC.TARJCL[TA6INDEX];
        SL0UT.TARTYPE[SLWIDX01] = "Q";
      end /* End If*/

     /* ------------------------------------------------------------*/
      /* Format the Job Control Language statement from the table.*/
     /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = SL0UT.TARJCL[SLWIDX01]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = SL0UT.TARTYPE[SLWIDX01]; /* Type*/

     /* ------------------------------------------------------------*/
      /* If not end of table, increment the table index.*/
     /* ------------------------------------------------------------*/

      if (SL0UT.TARJCL[SLWIDX01] == "/*EOF") /* End of SL0UT (input) tbl*/
        TA6REC.TA6INDEX = 0; /* Indicate end of process*/
      else
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Incr TA6 (output) idx*/
        SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1; /* Incr SL0UT (input) idx*/
      end

    else /* other whse code*/

     /* ------------------------------------------------------------*/
      /* Format the variable parameters entered by the user.*/
     /* ------------------------------------------------------------*/

      if (SL0UT1.TARTYPE[SLWIDX01] == "P") /* Parameter Record*/
        SL0UT1.TARJCL[SLWIDX01] = SWTREC.SWTGROUP;
      end

      if (SL0UT1.TARTYPE[SLWIDX01] == "Q") /* RLOGIN Records*/
        SLWREC.SLWIDX02 = 1; /* RLOGIN array idx*/

        while (SLWREC.SLWIDX02 <= 41) /* until end of RLOGIN tbl*/
          if (SL0UW03.SL0UWRLR[SLWIDX02] != "          ") /* if data found*/
            TA6REC.TARJCL[TA6INDEX] = SL0UW03.SL0UWRLR[SLWIDX02];
            TA6REC.TARTYPE[TA6INDEX] = "Q";
            TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* incr TA6 (output) idx*/
          end /* End If*/
          SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1; /* incr RLOGIN array idx*/
        end /* End While*/

        TA6REC.TA6INDEX = TA6REC.TA6INDEX - 1; /* reset TA6 (output) idx*/
        SL0UT1.TARJCL[SLWIDX01] = TA6REC.TARJCL[TA6INDEX];
        SL0UT1.TARTYPE[SLWIDX01] = "Q";
      end /* End If*/

     /* ------------------------------------------------------------*/
      /* Format the Job Control Language statement from the table.*/
     /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = SL0UT1.TARJCL[SLWIDX01]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = SL0UT1.TARTYPE[SLWIDX01]; /* Type*/

     /* ------------------------------------------------------------*/
      /* If not end of table, increment the table index.*/
     /* ------------------------------------------------------------*/

      if (SL0UT1.TARJCL[SLWIDX01] == "/*EOF") /* End of SL0UT1 (input) tbl*/
        TA6REC.TA6INDEX = 0; /* Indicate end of process*/
      else
        TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Incr TA6 (output) idx*/
        SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1; /* Incr SL0UT1 (input) idx*/
      end

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  if (SL0UW01.XROPDEST > " ") /* print dest entered*/
    TA6REC.XURDEST = SL0UW01.XROPDEST;
    TA6REC.TA6SUBSW = "S"; /* tailor and submit jcl*/
  else
    TA6REC.TA6SUBSW = "Y"; /* display info then submit jcl*/
  end

  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = "610"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end SL0U610

// set defaults and attributes
Function SL0U615()
   /* ------------------------------------------------------------*/
   /* Set default values for screen fields if F6 or FIRST TIME.*/
        /* These are the initial settings*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf6) /* F6 pressed ?*/
    SL0UW00.SL0UWSWF = "Y"; /* format the map switch*/
    SL0UW01.SWEPLLNB = 0; /* plan number*/
    SL0UW01.SL8WOGRP = 0; /* work order group nbr*/
    SL0UW01.TS3CNTNR = " "; /* container*/
    SL0UW01.PC3PONBR = 0; /* po number*/
    SL0UW01.SL0UWPOI = " "; /* po/id type*/
    SL0UW01.PC4ORTYP = " "; /* order type code*/
    SL0UW01.TSOCRTNW = 0; /* crtn-seq-nbr/crtn-nbr*/
    SL0UW00.TSOCRTNB = 0; /* crtn-nbr*/
    SL0UW01.SWCLNENB = 0; /* lane code*/
    SL0UW01.SY1STNBR = " "; /* style number*/
    SL0UW01.SY1SSTNM = " "; /* style name*/
    SL0UW01.SY2CLRID = " "; /* color*/
    SL0UW01.SY2CLRAB = " "; /* color abrev.*/
    SL0UW01.XDMCD = "00"; /* dimension*/
    SL0UW01.XQACD = "01"; /* quality*/
    SL0UW01.PC2INSEG = "000"; /* cust xref code*/
    SL0UW01.XEGCD = "000"; /* engineering diff code*/
    SL0UW01.XPGCD = "00"; /* package code*/
    SL0UW01.XUMCD = "01"; /* unit of measure*/
    SL0UW01.XOWCD = "00"; /* owner group code*/
    SL0UW01.XSLCD = "000"; /* stock locate class. code*/

    /* ------------------------------------------------------------*/
         /* set attributes*/
    /* ------------------------------------------------------------*/

    set SL0UM001.XWHCD initialAttributes; /* warehouse code*/
    set SL0UM001.SWEPLLNB cursor, initialAttributes; /* plan number*/
    set SL0UM001.SL8WOGRP initialAttributes; /* work order group code*/
    set SL0UM001.TS3CNTNR initialAttributes; /* container code*/

    if (SL0UM001.XWHCD == "51") /* whse code = '51'*/
      set SL0UM001.PC3PONBR initialAttributes; /* po number*/
      set SL0UM001.SL0UWPOI skip; /* po id*/
      set SL0UM001.PC4ORTYP skip; /* order type code*/
    else /* other whse code*/
      set SL0UM001.PC3PONBR skip; /* po number*/
      set SL0UM001.SL0UWPOI initialAttributes; /* po id*/
      set SL0UM001.PC4ORTYP initialAttributes; /* order type code*/
    end

    set SL0UM001.TSOCRTNB initialAttributes; /* carton code*/
    set SL0UM001.SWCLNENB initialAttributes; /* lane code*/
    set SL0UM001.XROPDEST initialAttributes;
    set SL0UM001.XGPCD initialAttributes; /* gpc code*/
    set SL0UM001.SY1STNBR initialAttributes; /* style code*/
    set SL0UM001.XQACD initialAttributes; /* quality code*/
    set SL0UM001.SY2CLRID initialAttributes; /* color code*/
    set SL0UM001.XDMCD initialAttributes; /* dimension code*/
    set SL0UM001.PC2INSEG initialAttributes; /* cust xref code*/
    set SL0UM001.XEGCD initialAttributes; /* engineering diff code*/
    set SL0UM001.XPGCD initialAttributes; /* package type code*/
    set SL0UM001.XUMCD initialAttributes; /* unit of measure code*/
    set SL0UM001.XOWCD initialAttributes; /* owner group code*/
    set SL0UM001.XSLCD initialAttributes; /* stock locate class code*/
  end

   /* ------------------------------------------------------------*/
   /* set attributes for screen fields if ENTER*/
                  /* do not reset all fields*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* enter pressed ?*/
     /* MOVE COMMAREA.XWHCD TO SL0UM001.XWHCD; warehouse code*/

    /* ------------------------------------------------------------*/
     /* Set default values for screen fields if F6 or FIRST TIME.*/
          /* These are the initial settings*/
    /* ------------------------------------------------------------*/

    SL0UW00.SL0UWSWF = "Y"; /* format the map switch*/
    SL0UW01.XDMCD = "00"; /* dimension*/
    SL0UW01.PC2INSEG = "000"; /* cust xref code*/
    SL0UW01.XEGCD = "000"; /* engineering diff code*/
    SL0UW01.XPGCD = "00"; /* package code*/
    SL0UW01.XUMCD = "01"; /* unit of measure*/
    SL0UW01.XOWCD = "00"; /* owner group code*/
    SL0UW01.XSLCD = "000"; /* stock locate class. code*/


    /* ------------------------------------------------------------*/
         /* set attributes*/
    /* ------------------------------------------------------------*/

    set SL0UM001.XWHCD skip; /* warehouse code*/
    set SL0UM001.SWEPLLNB skip; /* plan number*/
    set SL0UM001.SL8WOGRP skip; /* work order group code*/
    set SL0UM001.TS3CNTNR skip; /* container code*/
    set SL0UM001.PC3PONBR skip; /* po number*/
    set SL0UM001.SL0UWPOI skip; /* po id*/
    set SL0UM001.PC4ORTYP skip; /* order type code*/
    set SL0UM001.TSOCRTNB skip; /* carton code*/
    set SL0UM001.SWCLNENB initialAttributes; /* lane code*/
    set SL0UM001.XROPDEST initialAttributes;
    set SL0UM001.XGPCD skip; /* gpc code*/
    set SL0UM001.SY1STNBR cursor, initialAttributes; /* style code*/
    set SL0UM001.SY1SSTNM initialAttributes; /* style description*/
    set SL0UM001.XQACD skip; /* quality code*/
    set SL0UM001.SY2CLRID initialAttributes; /* color code*/
    set SL0UM001.SY2CLRAB initialAttributes; /* color description*/
    set SL0UM001.XDMCD initialAttributes; /* dimension code*/
    set SL0UM001.PC2INSEG initialAttributes; /* cust xref code*/
    set SL0UM001.XEGCD initialAttributes; /* engineering diff code*/
    set SL0UM001.XPGCD initialAttributes; /* package type code*/
    set SL0UM001.XUMCD initialAttributes; /* unit of measure code*/
    set SL0UM001.XOWCD initialAttributes; /* owner group code*/
    set SL0UM001.XSLCD initialAttributes; /* stock locate class code*/
  end


end // end SL0U615

// update carton sequence #
Function SL0U630()
   /* ------------------------------------------------------------*/
   /* Format the data from the map in the table row.*/
   /* ------------------------------------------------------------*/

  PKDREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  PKDREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

   /* ------------------------------------------------------------*/
   /* Update the changed row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1890" ("U ", SQLCA, PKDREC) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      SL0UW00.SL0UWSWR = "Y"; /* Request for data switch*/

      SLWREC.XXXLOCID = "630"; /* Module identification*/
      converseLib.validationFailed(45); /* carton already exists*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "630"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKCTL01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SL0U630

// get carton sequence number
Function SL0U631()
   /* ------------------------------------------------------------*/
   /* read carton sequence number*/
   /* ------------------------------------------------------------*/

  set PKDREC empty; /* clear record*/

  PKDREC.XWHCD = SL0UW01.XWHCD; /* set warehouse key*/

  try
    call "IO1890" ("S ", SQLCA, PKDREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* if successful, update carton seq nbr, then return*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      set SL0UM001.XWHCD cursor, bold; /* invalid warehouse*/
      SLWREC.XXXLOCID = "631"; /* module id*/
      SL0UW00.SL0UWSWF = "N"; /* format the map switch*/
      converseLib.validationFailed(9);
      exit stack;

    end
  end
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  SLWREC.XXXLOCID = "631"; /* Module identification*/

  if (sysVar.errorCode == "00000000") /* successful call*/
    if (SQLCA.VAGen_SQLCODE == -911) /* and resource not available*/
      TA1REC.TA1FUNC = "POST"; /* Termination function*/
      converseLib.validationFailed(31); /* Data in use by another*/
    end
  else
    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  end

  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKDREC.PKDKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SL0U631

// read temp storage
Function SL0U632()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  SL0UW01.XXXTSLEN = SL0UW00.XXXTSLEN;
  TA5REC.TA5TSQIX = SL0UW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (SL0UW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, tally qty fields in SL0UW01 & return*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    /* ------------------------------------------------------*/
     /* accumulate qty values for this tsq page*/
    /* ------------------------------------------------------*/
    SL0UW00.SL0UWUNT = 0; /* reset Unit count*/
    SL0UW00.SL0UWIDX = 1; /* initialize index*/

    while (SL0UW00.SL0UWIDX <= 40) /* for all 40 entries*/
      SL0UW00.SL0UWUNT = SL0UW00.SL0UWUNT + SL0UW01.SL0UWQT[SL0UWIDX];
      SL0UW00.SL0UWIDX = SL0UW00.SL0UWIDX + 1; /* increment index*/
    end

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "632"; /* Module identification*/
  converseLib.validationFailed(1); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0U632

// insert vrlitm01 PROCESS
Function SL0U633()
   /* ------------------------------------------------------------*/
     /* move keys and data fields from sl0uw01 to sl2rec*/
   /* ------------------------------------------------------------*/

  set SL2REC empty; /* clear record*/
  SL2REC.XWHCD = SL0UW01.XWHCD; /* set up sl2rec key fields*/
  SL0UW00.SL0UWLNE = SL0UM001.SWCLNENB; /* move 4-digit lane to 6-digit*/
  SL2REC.SL5LOCTN = SL0UW00.SL0UWLNE; /* move 6-digit lane to 6-char*/
  SL2REC.TS3CNTNR = SL0UW01.TS3CNTNR; /* container*/
  SL2REC.SWEPLLNB = SL0UW01.SWEPLLNB; /* plan #*/
  SL2REC.SL2PALET = " "; /* pallet*/
  SL0UW00.SL0UW-TSOCRTNB = SL0UW00.TSOCRTNB;
  SL2REC.SL2CASE = SL0UW00.SL0UWLCT; /* carton number move*/
  SL2REC.PKDNCSQN = SL0UW00.SL0UWCSQ; /* carton seq #*/
  SL2REC.PC3PONBR = SL0UW01.PC3PONBR; /* po number*/
  SL2REC.PC3POIDT = SL0UW01.PC3POIDT; /* po id*/
  SL2REC.PCFSECD = SL0UW01.PCFSECD; /* season code*/
  SL2REC.FY1FCTYC = SL0UW01.FY1FCTYC; /* factory code*/
  SL2REC.PC4ORTYP = SL0UW01.PC4ORTYP; /* po type*/
  SL2REC.XGPCD = SL0UW01.XGPCD; /* gpc*/
  SL2REC.SY1STNBR = SL0UW01.SY1STNBR; /* syle*/
  SL2REC.SY2CLRID = SL0UW01.SY2CLRID; /* color*/
  SL2REC.XDMCD = SL0UW01.XDMCD; /* dimension*/
  SL2REC.XQACD = SL0UW01.XQACD; /* quality*/
  SL2REC.XOWCD = SL0UW01.XOWCD; /* owner group*/
  SL2REC.PC2INSEG = SL0UW01.PC2INSEG; /* inseg*/
  SL2REC.XEGCD = SL0UW01.XEGCD; /* eng. difference*/
  SL2REC.XPGCD = SL0UW01.XPGCD; /* package cd*/
  SL2REC.XUMCD = SL0UW01.XUMCD; /* unit of measure*/
  SL2REC.XSLCD = SL0UW01.XSLCD; /* sl code*/
  SL2REC.SY1UNPCS = SL0UW00.SL0UWTUC; /* units per case*/
  SL2REC.SWHLNCAT = "UX"; /* lane category*/
  SL2REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  SL2REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/

  SL0UW00.SL0UWIDX = 1; /* initialize index*/
  SLWREC.SLWIDX01 = 2; /* initialize index*/
   /* copy header data to tbl, to be passed to SL432D*/
  SL0UW03.SL0UWRLR[1] = SL0UW03.SL0UW-RLOG-HEADER;

  while (SL0UW00.SL0UWIDX <= 40) /* do for all 40 size/qty pairs*/

    if (SL0UW01.SY5SZID[SL0UWIDX] > 0) /* only do for sizes entered*/

      SL2REC.SY5SZID = SL0UW01.SY5SZID[SL0UWIDX];
      SL2REC.SL2RCVD = SL0UW01.SL0UWQT[SL0UWIDX];

      SL0U634(); /* write DSTLOC.VRLITM01*/

       /* copy item data to tbl, to be passed to SL432D*/
      SL0UW03.PC3PONBR = SL2REC.PC3PONBR; /* save pc-po-nbr*/
      SL0UW03.PC3POIDT = SL2REC.PC3POIDT; /* save pc-po-id-mo-rng*/
      SL0UW03.PCFSECD = SL2REC.PCFSECD; /* save pc-po-id-sesn-cd*/
      SL0UW03.FY1FCTYC = SL2REC.FY1FCTYC; /* save fy-fcty-cd*/
      SL0UW03.PC4ORTYP = SL2REC.PC4ORTYP; /* save pc-po-ot-cd*/
      SL0UW03.XGPCD = SL2REC.XGPCD; /* save gpc*/
      SL0UW03.SY1STNBR = SL2REC.SY1STNBR; /* save sy-sty-nbr*/
      SL0UW03.SY2CLRID = SL2REC.SY2CLRID; /* save sy-colr-cd-id*/
      SL0UW03.SL2CASE = SL2REC.SL2CASE; /* save sl-rlog-case*/
      SL0UW03.XDMCD = SL2REC.XDMCD; /* save xdm-dim-cd*/
      SL0UW03.XQACD = SL2REC.XQACD; /* save xqa-qual-cd*/
      SL0UW03.XOWCD = SL2REC.XOWCD; /* save xow-own-grp-cd*/
      SL0UW03.PC2INSEG = SL2REC.PC2INSEG; /* save pc-cu-in-seg-cd*/
      SL0UW03.XEGCD = SL2REC.XEGCD; /* save xeg-engr-diff-cd*/
      SL0UW03.XPGCD = SL2REC.XPGCD; /* save xpg-pkg-typ-cd*/
      SL0UW03.XUMCD = SL2REC.XUMCD; /* save xum-uom-cd*/
      SL0UW03.XSLCD = SL2REC.XSLCD; /* save xsl-class-cd*/
      SL0UW03.SL5LOCTN = SL2REC.SL5LOCTN; /* save sl-wo-fr-loc-cd*/
      SL0UW03.SL8TOAR = SL2REC.SL8TOAR; /* save sl-wo-to-area-cd*/
      SL0UW03.SL8TOZN = SL2REC.SL8TOZN; /* save sl-wo-to-zone-cd*/
      SL0UW03.SL8TOLC = SL2REC.SL8TOLC; /* save sl-wo-to-loc-cd*/
      SL0UW03.PKDNCSQN = SL2REC.PKDNCSQN; /* save pk-crtn-seq-nbr*/
      SL0UW03.SY5SZID = SL2REC.SY5SZID; /* save sy-sz-id*/
      SL0UW03.SL2RCVD = SL2REC.SL2RCVD; /* save sl-wo-item-qty*/
      SL0UW03.ZZZCHGDT = SL2REC.ZZZCHGDT; /* save zz-sdt*/
      SL0UW03.ZZZCHGTM = SL2REC.ZZZCHGTM; /* save zz-chng-hhmm*/
      SL0UW03.SL0UWRLR[SLWIDX01] = SL0UW03.SL0UW-RLOG-ITEM;

    else

      SL0UW03.SL0UWRLR[SLWIDX01] = "          "; /* clear tbl row*/

    end

    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1; /* set index up by 1*/
    SL0UW00.SL0UWIDX = SL0UW00.SL0UWIDX + 1; /* set index up by 1*/

  end


end // end SL0U633

// Insert DSTLOC.VRLITM01
Function SL0U634()
   /* ------------------------------------------------------------*/
    /* add a row to dstloc.vrlitm01*/
   /* ------------------------------------------------------------*/

  try
    call "IO1580" ("A ", SQLCA, SL2REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* normal return code*/
    return; /* return*/
  end

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == -911)  

    converseLib.validationFailed(31); /* data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/

  else

    converseLib.validationFailed(1); /* unexpected error*/
    TA1REC.TA1FUNC = "RETN"; /* termination function*/

  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* roll back updates*/
  converseLib.clearScreen();
   /* clear screen*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  SLWREC.XXXLOCID = "633"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD A ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRLITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL2REC.SL2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SL0U634

// select/insert DSTLOC.VPLCPO01
Function SL0U635()
   /* ------------------------------------------------------------*/
   /* set up keys to read dstloc.vplcpo01*/
   /* ------------------------------------------------------------*/

  set SWFREC empty; /* clear csp record*/

  SWFREC.XWHCD = SL0UW01.XWHCD; /* set up swfrec key fields*/
  SWFREC.TSHCNTNR = SL0UW01.TS3CNTNR;
  SWFREC.SWEPLLNB = SL0UW01.SWEPLLNB;
  SWFREC.XGPCD = SL0UW01.XGPCD;
  SWFREC.PC3PONBR = SL0UW01.PC3PONBR;

  try
    call "IO5340" ("S ", SQLCA, SWFREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* if successful, return*/
   /* if not successful, add the row, then return*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

      /* ------------------------------------------------------------*/
       /* set up data fields prior to adding record*/
      /* ------------------------------------------------------------*/

      set SWFREC empty; /* clear record*/
      SWFREC.XWHCD = SL0UW01.XWHCD;
      SWFREC.SWEPLLNB = SL0UW01.SWEPLLNB;
      SWFREC.TSHCNTNR = SL0UW01.TS3CNTNR;
      SWFREC.XGPCD = SL0UW01.XGPCD;
      SWFREC.PC3PONBR = SL0UW01.PC3PONBR;
      SWFREC.PC3POIDT = SL0UW01.PC3POIDT;
      SWFREC.PCFSECD = SL0UW01.PCFSECD;
      SWFREC.FY1FCTYC = SL0UW01.FY1FCTYC;
      SWFREC.PC4ORTYP = SL0UW01.PC4ORTYP;
      SWFREC.SWFULNFR = SL0UM001.SWCLNENB;
      SWFREC.SWFULNTH = SL0UM001.SWCLNENB;
      SWFREC.SWFHLDHS = "Y";
      SWFREC.SL4ZONE = SL1REC.SL4ZONE;
      SWFREC.SWFCRCFL = "N";
      SWFREC.SWFCPWOF = "Y";
      SWFREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
      SWFREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

      try
        call "IO5340" ("A ", SQLCA, SWFREC) {isNoRefresh = yes, isExternal = yes};
      end

      if (sysVar.errorCode == "00000000") /* successful call*/
        if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/

          return;

        end
      end
    end
  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/
    converseLib.validationFailed(31);
    TA1REC.TA1FUNC = "POST";
  else
    converseLib.validationFailed(1);
    TA1REC.TA1FUNC = "RETN";
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* roll back changes*/

  converseLib.clearScreen();
   /* clear screen*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  SLWREC.XXXLOCID = "635"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLCPO01"; /* Table view name*/
  TA1REC.TA1TBLKE = SWFREC.SWFGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0U635

// select from DSTLOC.VPLNSY01
Function SL0U636()
   /* ------------------------------------------------------------*/
   /* set up keys to read dstloc.vplnsy01*/
   /* ------------------------------------------------------------*/

  SWGREC.XWHCD = SL0UW01.XWHCD; /* Warehouse code*/
  SWGREC.SWEPLLNB = SL0UW01.SWEPLLNB; /* Plan number*/
  SWGREC.TSHCNTNR = SL0UW01.TS3CNTNR; /* Container number*/
  SWGREC.PC3PONBR = SL0UW01.PC3PONBR; /* po number*/
  SWGREC.XGPCD = SL0UW01.XGPCD; /* GPC code*/
  SWGREC.SY1STNBR = SL0UW01.SY1STNBR; /* Style number*/
  SWGREC.SY2CLRID = SL0UW01.SY2CLRID; /* Color identification*/
  SWGREC.XDMCD = SL0UW01.XDMCD; /* Dimension code*/
  SWGREC.XQACD = SL0UW01.XQACD; /* Quality code*/
  SWGREC.PC2INSEG = SL0UW01.PC2INSEG;
                                   /* Customer cross reference code*/
  SWGREC.XEGCD = SL0UW01.XEGCD; /* Engineering difference code*/
  SWGREC.XPGCD = SL0UW01.XPGCD; /* Package code*/
  SWGREC.XUMCD = SL0UW01.XUMCD; /* Unit of measure code*/
  SWGREC.XOWCD = SL0UW01.XOWCD; /* Owner Group code*/
  SWGREC.XSLCD = SL0UW01.XSLCD; /* Stock locate class code*/

  try
    call "IO5370" ("SA", SQLCA, SWGREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* if successful, update tot cases and units, then return*/
   /* if not successful, add the row, then return*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* successful call*/

    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
      SL0UW00.SWGPSEQN = SWGREC.SWGPSEQN; /* prod seq nbr*/
      SL0U638(); /* update plan product*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100)
      SL0U637(); /* get new prod seq nbr*/
      SL0U639(); /* add new plan product*/
      return;
    end

  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)  
    TA1REC.TA1FUNC = "POST";
    converseLib.validationFailed(31);
  else
    TA1REC.TA1FUNC = "RETN";
    converseLib.validationFailed(1);
  end

  converseLib.clearScreen();
   /* clear screen*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  SLWREC.XXXLOCID = "636"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSY01"; /* Table view name*/
  TA1REC.TA1TBLKE = SWGREC.SWGGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SL0U636

// read/update DSTLOC.VSLCTL01
Function SL0U637()
   /* ------------------------------------------------------------*/
     /* update dstloc.vslctl01 - Stock Locate Control Info*/
   /* ------------------------------------------------------------*/

  set SL3REC empty; /* clear record*/

  SL3REC.XWHCD = SL0UW01.XWHCD; /* set up sl3rec key field*/

  try
    call "IO1500" ("G7", SQLCA, SL3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/

      SL0UW00.SWGPSEQN = SL3REC.SL3NXPSN; /* save product seq nbr*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/

        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* rollback changes*/
        SL0UW00.SL0UWSWF = "N"; /* format the map*/
        SLWREC.XXXLOCID = "637"; /* module id*/
        converseLib.validationFailed(1); /* unexpected error*/
        exit stack; /* exit to display map*/
      end
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode; /* csp return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* sql communication*/

  SLWREC.XXXLOCID = "637"; /* Module identification*/

   /* ------------------------------------------------------------*/
   /* if data not avaialable*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == -911)  

    converseLib.validationFailed(31); /* data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/

  else

    converseLib.validationFailed(1); /* unexpected error*/
    TA1REC.TA1FUNC = "RETN"; /* termination function*/

  end

  converseLib.clearScreen();
   /* clear screen*/
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* rollback changes*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSLCTL01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL3REC.SL3KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SL0U637

// update DSTLOC.VPLNSY01
Function SL0U638()
   /* ------------------------------------------------------------*/
   /* update existing plan product row*/
   /* ------------------------------------------------------------*/

  SWGREC.SWGPRDUN = SWGREC.SWGPRDUN + SL0UW00.SL0UWUNT;
  SWGREC.SWGPRDCS = SWGREC.SWGPRDCS + 1;
  SWGREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* change date*/
  SWGREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* change time*/

  try
    call "IO5370" ("U ", SQLCA, SWGREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* if successful, update tot cases and units, then return*/
   /* if not successful, add the row, then return*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        converseLib.validationFailed(1); /* unexpected error*/
        SLWREC.XXXLOCID = "638"; /* module id*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* rollback changes*/
        exit stack; /* exit to display map*/
      end
    end
  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)  
    TA1REC.TA1FUNC = "POST";
    converseLib.validationFailed(31);
  else
    TA1REC.TA1FUNC = "RETN";
    converseLib.validationFailed(1);
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* rollback changes*/
  converseLib.clearScreen();
   /* clear screen*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  SLWREC.XXXLOCID = "638"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSY01"; /* Table view name*/
  TA1REC.TA1TBLKE = SWGREC.SWGGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SL0U638

// insert DSTLOC.VPLNSY01
Function SL0U639()
   /* ------------------------------------------------------------*/
   /* add new product to plan*/
   /* ------------------------------------------------------------*/

  set SWGREC empty;
  SWGREC.SWGPSEQN = SL0UW00.SWGPSEQN;
  SWGREC.SWGPRDUN = SL0UW00.SL0UWUNT;
  SWGREC.SWGPRDCS = 1;
  SWGREC.SWFHLDHS = "Y";
  SWGREC.XWHCD = SL0UW01.XWHCD; /* warehouse*/
  SWGREC.SWEPLLNB = SL0UW01.SWEPLLNB; /* plan #*/
  SWGREC.TSHCNTNR = SL0UW01.TS3CNTNR; /* container*/
  SWGREC.XGPCD = SL0UW01.XGPCD; /* gpc*/
  SWGREC.PC3PONBR = SL0UW01.PC3PONBR; /* po nbr*/
  SWGREC.SY1STNBR = SL0UW01.SY1STNBR; /* style*/
  SWGREC.SY2CLRID = SL0UW01.SY2CLRID; /* color*/
  SWGREC.XDMCD = SL0UW01.XDMCD; /* dimension*/
  SWGREC.XQACD = SL0UW01.XQACD; /* quality*/
  SWGREC.XOWCD = SL0UW01.XOWCD; /* owner group*/
  SWGREC.PC2INSEG = SL0UW01.PC2INSEG;
  SWGREC.XEGCD = SL0UW01.XEGCD; /* engineer diff*/
  SWGREC.XPGCD = SL0UW01.XPGCD; /* package type*/
  SWGREC.XUMCD = SL0UW01.XUMCD; /* unit of measure*/
  SWGREC.XSLCD = SL0UW01.XSLCD; /* stock locate cd*/
  SWGREC.SL-PRDCTN-SAS-FL = "N";
  SWGREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  SWGREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

  try
    call "IO5370" ("A ", SQLCA, SWGREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
      return;
    end
  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)  
    TA1REC.TA1FUNC = "POST";
    converseLib.validationFailed(31);
  else
    TA1REC.TA1FUNC = "RETN";
    converseLib.validationFailed(1);
  end

  converseLib.clearScreen();
   /* clear screen*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* rollback changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  SLWREC.XXXLOCID = "639"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSY01"; /* Table view name*/
  TA1REC.TA1TBLKE = SWGREC.SWGGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0U639

// VPLNLC01/VPLNSZ01 process
Function SL0U640()
   /* ------------------------------------------------------------*/
     /* This process creates DSTLOC.VPLNLC01 and DSTLOC.VPLNSZ01*/
   /* ------------------------------------------------------------*/

  SL0U641(); /* insert plan/lane/carton table*/

  SL0UW00.SL0UWIDX = 1; /* initialize index*/

  while (SL0UW00.SL0UWIDX <= 40) /* do for all 40 size/qty pairs*/
    if (SL0UW01.SY5SZID[SL0UWIDX] > 0) /* only do for sizes entered*/

      SL0U642(); /* insert plan/carton/size record*/

    end

    SL0UW00.SL0UWIDX = SL0UW00.SL0UWIDX + 1; /* set index up by 1*/

  end



end // end SL0U640

// insert in DSTLOC.VPLNLC01
Function SL0U641()
   /* ------------------------------------------------------------*/
    /* add a row to dstloc.vplnlc01 - PLAN/LANE/CARTON table*/
   /* ------------------------------------------------------------*/

  set SWHREC empty; /* clear record*/

  SWHREC.XWHCD = SL0UW01.XWHCD; /* set up swhrec fields*/
  SWHREC.XGPCD = SL0UW01.XGPCD; /* gpc*/
  SWHREC.PC3PONBR = SL0UW01.PC3PONBR; /* po nbr*/
  SWHREC.TSHCNTNR = SL0UW01.TS3CNTNR; /* container*/
  SWHREC.SWEPLLNB = SL0UW01.SWEPLLNB; /* plan #*/
  SWHREC.SWGPSEQN = SL0UW00.SWGPSEQN; /* prod seq #*/
  SWHREC.SWCLNENB = SL0UM001.SWCLNENB; /* lane #*/
  SWHREC.PKDNCSQN = SL0UW00.SL0UWCSQ; /* carton seq #*/
  SWHREC.TSOCRTNB = SL0UW00.TSOCRTNB; /* carton #*/
  SWHREC.SL8WONBR = 0; /* wo group #*/
  SWHREC.SWHLNCAT = "UX";
  SWHREC.SWHUXCFL = "Y"; /* unexpected carton flag*/
  SWHREC.SWHINEFL = "N"; /* inspection entry flag*/
  SWHREC.SWHQWPFL = "N"; /* quality flag*/
  SWHREC.XXXUSRID = COMMAREA.CAUSERID; /* user*/
  SWHREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* date*/
  SWHREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* time*/

  try
    call "IO5360" ("A ", SQLCA, SWHREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* normal return code*/
    return; /* return*/
  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)  
    TA1REC.TA1FUNC = "POST";
    converseLib.validationFailed(31);
  else
    TA1REC.TA1FUNC = "RETN";
    converseLib.validationFailed(1);
  end

  converseLib.clearScreen();
   /* clear screen*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* rollback changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  SLWREC.XXXLOCID = "641"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD A ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNLC01"; /* Table view name*/
  TA1REC.TA1TBLKE = SWHREC.SWHGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0U641

// insert in DSTLOC.VPLNSZ01
Function SL0U642()
   /* ------------------------------------------------------------*/
    /* add a row to dstloc.vplnsz01 - plan/carton/size table*/
   /* ------------------------------------------------------------*/

  set SWNREC empty; /* clear record*/
  SWNREC.XWHCD = SL0UW01.XWHCD; /* warehouse*/
  SWNREC.SWEPLLNB = SL0UW01.SWEPLLNB; /* plan #*/
  SWNREC.SWCLNENB = SL0UM001.SWCLNENB; /* lane nbr*/
  SWNREC.SWGPSEQN = SL0UW00.SWGPSEQN; /* prod seq nbr*/
  SWNREC.PKDNCSQN = SL0UW00.SL0UWCSQ; /* carton seq nbr*/
  SWNREC.TSOCRTNB = SL0UW00.TSOCRTNB; /* carton*/
  SWNREC.SY5SZID = SL0UW01.SY5SZID[SL0UWIDX]; /* size id*/
  SWNREC.SWNSZUN = SL0UW01.SL0UWQT[SL0UWIDX]; /* size units*/
  SWNREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* date*/
  SWNREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* time*/

  try
    call "IO5380" ("A ", SQLCA, SWNREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* normal return code*/

    return; /* return*/

  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)  
    TA1REC.TA1FUNC = "POST";
    converseLib.validationFailed(31);
  else
    TA1REC.TA1FUNC = "RETN";
    converseLib.validationFailed(1);
  end

  converseLib.clearScreen();
   /* clear screen*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* rollback changes*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  SLWREC.XXXLOCID = "642"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD A ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNSZ01"; /* Table view name*/
  TA1REC.TA1TBLKE = SWNREC.SWNGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0U642

// validate plan cpo flag
Function SL0U643()
   /* ------------------------------------------------------------*/
   /* This paragraph is executed to determine if the*/
   /* sl-crt-plan-wo-fl needs to be updated.  If the flag = 'N',*/
   /* return to the previous process.  Otherwise, the flag will*/
   /* be updated to 'N'.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Set up keys to read dstloc.vplcpo01*/
   /* ------------------------------------------------------------*/

  set SWFREC empty; /* clear csp record*/

  SWFREC.XWHCD = SL0UW01.XWHCD; /* set up swfrec key fields*/
  SWFREC.TSHCNTNR = SL0UW01.TS3CNTNR;
  SWFREC.SWEPLLNB = SL0UW01.SWEPLLNB;
  SWFREC.XGPCD = SL0UW01.XGPCD;
  SWFREC.PC3PONBR = SL0UW01.PC3PONBR;

  try
    call "IO5340" ("S ", SQLCA, SWFREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* if successful, return*/
   /* if not successful, abend.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* successful call*/
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
      if (SWFREC.SWFCPWOF == "Y") /* if the flag = 'Y'*/
        return; /* return to previous process*/
      else

        SWFREC.SWFCPWOF = "Y"; /* set the flag to 'Y'*/
        SWFREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
        SWFREC.ZZZCHGTM = XX0XW01.XX0XWTIM;

        try
          call "IO5340" ("U ", SQLCA, SWFREC) {isNoRefresh = yes, isExternal = yes};
        end

        if (sysVar.errorCode == "00000000") /* successful call*/
          if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
            return;
          end
        end
        return;
      end

      if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
        converseLib.validationFailed(1);
        TA1REC.TA1FUNC = "RETN";
      end
    end
  end

  if (sysVar.errorCode == "00000000" /* successful call*/
   && SQLCA.VAGen_SQLCODE == -911)   /* resource not available*/
    converseLib.validationFailed(31);
    TA1REC.TA1FUNC = "POST";
  else
    converseLib.validationFailed(1);
    TA1REC.TA1FUNC = "RETN";
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* roll back changes*/
  converseLib.clearScreen();
   /* clear screen*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  SLWREC.XXXLOCID = "643"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLCPO01"; /* Table view name*/
  TA1REC.TA1TBLKE = SWFREC.SWFGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end SL0U643

// update SLWREC
Function SL0US03()
   /* ----------------------------------------------------*/
   /* Update the slwrec before leaving application.*/
   /* ----------------------------------------------------*/

  SLWREC.XWHCD = SL0UW01.XWHCD; /* xwh_whse_cd*/
  SLWREC.XWHOWNGF = SL0UW01.XOWCD; /* xwh_own_grp_fl*/
  SLWREC.SLWWKDTE = 0; /* work date (ccyymmdd)*/
  SLWREC.SLWINDTE = 0; /* input date (mmddyy)*/
  SLWREC.SWEPLLNB = SL0UW01.SWEPLLNB; /* sl_rcv_plan_nbr*/
  SLWREC.TSHCNTNR = SL0UW01.TS3CNTNR; /* ts_cntnr_nbr*/
  SLWREC.XGPCD = SL0UW01.XGPCD; /* xgp_gpc_cd*/
  SLWREC.PC3PONBR = SL0UW01.PC3PONBR; /* pc_po_nbr*/
  SLWREC.PC3POIDT = SL0UW01.PC3POIDT; /* pc_po_id_mo_rng*/
  SLWREC.PC4ORTYP = SL0UW01.PC4ORTYP; /* pc_po_ot_cd*/
  SLWREC.PCFSECD = SL0UW01.PCFSECD; /* pc_po_id_sesn_cd*/
  SLWREC.FY1FCTYC = SL0UW01.FY1FCTYC; /* fy_fcty_cd*/
  SLWREC.SY1STNBR = SL0UW01.SY1STNBR; /* style number*/
  SLWREC.SY2CLRID = SL0UW01.SY2CLRID; /* identifying color*/
  SLWREC.XDMCD = SL0UW01.XDMCD; /* xdm_dim_cd*/
  SLWREC.XQACD = SL0UW01.XQACD; /* xqa_qual_cd*/
  SLWREC.XOWCD = SL0UW01.XOWCD; /* xow_own_grp_cd*/
  SLWREC.PC2INSEG = SL0UW01.PC2INSEG; /* pc_cu_in_seg_cd*/
  SLWREC.XEG-ENGR-DIFF-CD = " "; /* shade code*/
  SLWREC.XUMCD = SL0UW01.XUMCD; /* xum_uom_cd*/
  SLWREC.XSLCD = SL0UW01.XSLCD; /* xsl_class_cd*/
  SLWREC.TSOCRTNB = SL0UW00.TSOCRTNB; /* ts_crtn_nbr*/


end // end SL0US03

//*** RECORD=SL0UW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ----------------------------
// ***********************
Record SL0UW00 type basicRecord
  10 SL0UWSWF SL0UWSWF ; 
  10 SL0UWSWR SL0UWSWR ; 
  10 SL0UWLCS SL0UWLCS ; 
  10 SWCLNENB SWCLNENB ; 
  10 SL0UWLNE SL0UWLNE ; 
  10 XGPCD XGPCD ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 XDMCD XDMCD ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 SL0UWFST SL0UWFST ; 
  10 SL0UWFRZ SL0UWFRZ ; 
  10 SL0UW-TSOCRTNB SL0UW-TSOCRTNB ; 
    15 * num(1) ; 
    15 SL0UWLCT SL0UWLCT ; 
      20 * num(4) ; 
      20 SL0UWSCT SL0UWSCT ; 
  10 CACHGFL CACHGFL ; 
  10 SL0UWCSQ SL0UWCSQ ; 
    15 SL0UWCN3 SL0UWCN3 ; 
    15 SL0UWCN6 SL0UWCN6 ; 
  10 SL0UWJDT SL0UWJDT ; 
    15 * num(2) ; 
    15 SL0UWDDD SL0UWDDD ; 
  10 SWGPSEQN SWGPSEQN ; 
  10 SL0UWCHG SL0UWCHG ; 
  10 SL0UWENT SL0UWENT ; 
  10 SL0UWIDX SL0UWIDX ; 
  10 SL0UWTIX SL0UWTIX ; 
  10 SL3NXPSN SL3NXPSN ; 
  10 SL0UWUNT SL0UWUNT ; 
  10 SL0UWTUC SL0UWTUC ; 
  10 SL0UWEOF SL0UWEOF ; 
  10 TSOCRTNB TSOCRTNB ; 
  10 WKCRTNGR num(9) ; // crtn-seq-nbr/crtn-nbr
    15 WKCRTNF3 num(3) ; //   first 3 digits
    15 WKCRTNL6 num(6) ; //   last 4 digits
end // end SL0UW00

//*** RECORD=SL0UW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record SL0UW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(644) ; 
    10 XWHCD XWHCD ; 
    10 SWEPLLNB SWEPLLNB ; 
    10 SL8WOGRP SL8WOGRP ; 
    10 TS3CNTNR TS3CNTNR ; 
    10 PC3PONBR PC3PONBR ; 
    10 PC3POIDT PC3POIDT ; 
    10 PCFSECD PCFSECD ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 SL0UWPOI SL0UWPOI ; 
    10 TSOCRTNW int ; // TS_CRTN_NBR
    10 SWCLNENB SWCLNENB ; 
    10 XROPDEST XROPDEST ; 
    10 XGPCD XGPCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 SY1SSTNM SY1SSTNM ; 
    10 SY2CLRAB SY2CLRAB ; 
    10 XQACD XQACD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XEGCD XEGCD ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 XOWCD XOWCD ; 
    10 XSLCD XSLCD ; 
    10 * char(1) ; 
    10 SL0UWSZQ SL0UWSZQ [40] ; 
      15 SY5SZID SY5SZID ; 
      15 SY4IDDSC SY4IDDSC ; 
      15 SL0UWQT SL0UWQT ; 
    10 * char(1) ; 
    10 PKDNCSQN PKDNCSQN ; 
end // end SL0UW01

//*** RECORD=SL0UW03 ****
// -------------------------
// parameter card layout
// wsl4151
// -------------------------
// ***********************
Record SL0UW03 type basicRecord
  5 SL0UW-RLOG-HEADER SL0UW-RLOG-HEADER ; 
    10 XWHCD XWHCD ; 
    10 XWHABRV XWHABRV ; 
    10 SL8WOGRP SL8WOGRP ; 
    10 SL8WONBR SL8WONBR ; 
    10 SWEPLLNB SWEPLLNB ; 
    10 XARCD XARCD ; 
    10 SL4ZONE SL4ZONE ; 
    10 SL1CRTBY SL1CRTBY ; 
    10 SL1UPDBY SL1UPDBY ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 * char(28) ; 
  5 SL0UW-RLOG-ITEM SL0UW-RLOG-ITEM ; 
    10 PC3PONBR PC3PONBR ; 
    10 PC3POIDT PC3POIDT ; 
    10 PCFSECD PCFSECD ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 XGPCD XGPCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 SL2CASE SL2CASE ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 XOWCD XOWCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XEGCD XEGCD ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 XSLCD XSLCD ; 
    10 SL5LOCTN SL5LOCTN ; 
    10 SL8TOAR SL8TOAR ; 
    10 SL8TOZN SL8TOZN ; 
    10 SL8TOLC SL8TOLC ; 
    10 PKDNCSQN PKDNCSQN ; 
    10 SY5SZID SY5SZID ; 
    10 SL2RCVD SL2RCVD ; 
  5 SL0UW-RLOG-TBL-AREA SL0UW-RLOG-TBL-AREA ; 
    10 SL0UWRLR SL0UWRLR [41] ; 
end // end SL0UW03

//*** RECORD=SWTREC ****
// ********************* PLAN HEADER TABLE ********************
// 
// DB2 TABLE:            none
// IBM COPYLIB MEMBER:   wsl4151
// DATE CREATED:         december 28, 1990
// 
// MAINTENANCE LOG:
// 
// DATE     INIT   COMMENTS
// -------- ------ --------------------------------------------
// 12-28-90 ryonke Created CSP record.
// ************************************************************
// **********************
Record SWTREC type basicRecord
  5 SWTGROUP SWTGROUP ; 
    10 XWHCD XWHCD ; 
    10 TSHCNTNR TSHCNTNR ; 
    10 SWTWOTYP SWTWOTYP ; 
    10 SWTCSEQN SWTCSEQN ; 
    10 SL2PALET SL2PALET ; 
    10 SL5LOCTN SL5LOCTN ; 
    10 SWTPLLNB SWTPLLNB ; 
    10 SWTWOGRP SWTWOGRP ; 
    10 SWTWONBR SWTWONBR ; 
    10 XXXUSER XXXUSER ; 
    10 SWTPLUPF SWTPLUPF ; 
    10 * char(5) ; 
end // end SWTREC

// parameter card
DataItem SL0UW-RLOG-HEADER char(80)  {
  align = right, fillCharacter = " ", inputRequired = no
}
end

DataItem SL0UW-RLOG-ITEM char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL0UW-RLOG-TBL-AREA char(3280)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tsocrtnb 9 diget char
DataItem SL0UW-TSOCRTNB num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// key fld changed flag
DataItem SL0UWCHG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// julian date
DataItem SL0UWCN3 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// carton seq number
DataItem SL0UWCN6 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// crtn_seq_num
DataItem SL0UWCSQ num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// julian day
DataItem SL0UWDDD num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// enter flag
DataItem SL0UWENT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tsq eof flag
DataItem SL0UWEOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// freeze field flag
DataItem SL0UWFRZ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time thru flag
DataItem SL0UWFST char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work index
DataItem SL0UWIDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// julian date
DataItem SL0UWJDT num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Lane Change switch
DataItem SL0UWLCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// long carton number
DataItem SL0UWLCT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp Lane work area
DataItem SL0UWLNE num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po id
DataItem SL0UWPOI char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// quantity
DataItem SL0UWQT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SL0U W/S RLOG ROW
DataItem SL0UWRLR char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// short carton number
DataItem SL0UWSCT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Format the map switch
DataItem SL0UWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem SL0UWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size/qty table area
DataItem SL0UWSZQ char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp storage work index
DataItem SL0UWTIX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total units per case
DataItem SL0UWTUC num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total of qty by product
DataItem SL0UWUNT num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sl4151-pk-crtn-seq-nbr
DataItem SWTCSEQN num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SWTGROUP char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SL_RCV_PLAN_NBR
DataItem SWTPLLNB num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sl4151-plan-unplaned-flag
DataItem SWTPLUPF char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work order group number
DataItem SWTWOGRP num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work order number
DataItem SWTWONBR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sl4151-work-order-type-fl
DataItem SWTWOTYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

