package sl0h;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import ww.common.*;
//*** PROGRAM=SL0H ****
// ************************************************************
// 
//           STOCK LOCATE MENU SKELETON
//           ==========================
// 
// ************************************************************
// 
// OVERVIEW: This application is intended to transfer control
//           to other applications and/or functions within its
//           application depending on the selction number
//           entered on the map or passed via fast path's
//           item area (first character only).
// 
//           notes:
//             1) selection number (since single digit) is
//                setup as a character type field in order to
//                make the use of CAITEM easier as well as
//                easier for the user and program to deal
//                with the map field.
//             2) if selections include both external appl.s
//                and internal functions,  the internal func.s
//                should be listed first so that they will
//                correspond to the level number used in the
//                multiple function naming convention(s).
//             3) transfer to external applications will use
//                xsexit and require these selection values
//                be tested in the after section in either
//                the process or the related statement group
//                  CAITEM: 110 After or SY1
//                  SelNo.: 120 After or SB1
// 
// 
// MAINTENANCE HISTORY:
// ===================
// RVN
// NBR   DATE     BY WHOM    OVERVIEW OF CHANGES:
// --- --------  ----------  ----------------------------------
// 00  01/28/87  Ward Jones  created
// 01  12/18/87  DPB         1. deleted the update of the
//                              effective date on safety stock
//                              maintenance. (sl0hsu4)
//                           2. set cursor to style field after
//                              a successfull update. (sl0h440)
//                           3. display product data when new
//                              product is entered.
//                              (sl0h440 flow).
// 02  03/07/88  G. Gilray   1. change defined attribute of
//                              "shade code" to autoskip on
//                              maps sl0hm110, sl0hm210,
//                              sl0hm310, sl0hm410.
//                           2. use default uom code from
//                              product file if none is entered
// 03  08/31/88  W. Jones    add reset scrn on fast path error.
// 04  11/10/88  J. Wood     added xssegtr sgrp
// 05  12/12/88  K. Anderson change product assignment to not
//                           allow assignment for beltpick and
//                           letdown locations.
// 06  01/17/89  K. Anderson 1. Change safety stock maintenance
//                             to allow min. and max. values to
//                             be set back to zero.
//                           2. Added code and map fields to
//                             safety stock maintenance to
//                             globally change the min/max for
//                             all sizes for the specified
//                             product/location by page.
// 07  01/27/89  K. Anderson  changed condition for displaying
//                            more sizes message.
// 08  04/04/90  kande1      replace xsdtbl with pc2rec and
//                           io3340
// 09  06/03/91  sjohns      add edit to only allow prod assgn
//                           for picking zone types '10','19'
// 10  11/13/91  mpluth      add edit to not allow prod assgn
//                           to locations that have yltcd's of
//                           '15', '16', & '17'.
// --  01/17/92  jwood       initialization of w/s
// --  08/24/92  jfiat       change access from dprod to dpick
//                           - sycrec --> pknrec
//                           - sy1120 --> sy1190 (syprec)
// --  08/25/95  CBRINE      Added call to SY2000. Added XCTCD
//                           to SLWREC.
// --  06/01/97  SKAN        Added sl0hlog call.
// --  07/25/97  ovazqu      More of the same.
// I/O Modules:
// ===========
// 
// NAME      DESCRIPTION
// --------  --------------------------------------------------
// io3340    pc2rec pc-cu-in-seg pc2inseg (code, abrv, desc)
//           from dprodc.vprdcu01
// 
// ************************************************************
// ************************************************************
// *********************
Program SL0H type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PC2REC PC2REC; // record
  PKNREC PKNREC; // record
  SL0HW01 SL0HW01; // record
  SL0HW02 SL0HW02; // record
  SL0HW03 SL0HW03; // record
  SL0HW04 SL0HW04; // record
  SL0HWB4 SL0HWB4; // record
  SL0HWD0 SL0HWD0; // record
  SL10REC SL10REC; // record
  SL4REC SL4REC; // record
  SL5REC SL5REC; // record
  SL7REC SL7REC; // record
  SLQREC SLQREC; // record
  SLVREC SLVREC; // record
  SLWREC SLWREC; // record
  SQLCA SQLCA; // record
  SYPREC SYPREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  WSY2000 WSY2000; // record
  X2CREC X2CREC; // record
  X3CREC X3CREC; // record
  XSSLW01 XSSLW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XARTBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use XPGTBL {deleteAfterUse = yes}; // table
  use XSATBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use YZTTBL {deleteAfterUse = yes}; // table
  use SL0HM.SL0HM010,  // forms
      SL0HM.SL0HM110, 
      SL0HM.SL0HM210, 
      SL0HM.SL0HM310, 
      SL0HM.SL0HM410
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    SL0H010: SL0H010();


     /* ************************************************************/
     /* *** if the map selection no. setup:                     ****/
     /* *** use it to go directly to selection (skip converse)  ****/
     /* ************************************************************/

    if (SL0HM010.XMSLMSNO > " ")
      if (SL0HM010.XMSLMSNO == "1")
        goto SL0H110; /* <=== new function*/
      end
      if (SL0HM010.XMSLMSNO == "2")
        goto SL0H210; /* <=== new function*/
      end
      if (SL0HM010.XMSLMSNO == "3")
        goto SL0H310; /* <=== new function*/
      end
      if (SL0HM010.XMSLMSNO == "4")
        goto SL0H410; /* <=== new function*/
      end
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "010Z";
      SLWREC.SLWMSGNO = 0017; /* <--- invalid selection msg*/
      set SL0HM010.XMSLMSNO cursor, bold;
      goto SL0H020; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "020 "; /* error id location id*/
    goto SL0H020; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    SL0H020: SL0H020();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0H010; /* <=== re-start this function*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      if (SL0HM010.XMSLMSNO == "1")
        goto SL0H110; /* <=== new function*/
      end
      if (SL0HM010.XMSLMSNO == "2")
        goto SL0H210; /* <=== new function*/
      end
      if (SL0HM010.XMSLMSNO == "3")
        goto SL0H310; /* <=== new function*/
      end
      if (SL0HM010.XMSLMSNO == "4")
        goto SL0H410; /* <=== new function*/
      end
       /* ************************************************************/
       /* *** note: invalid selection is detected at this point   ****/
       /* ************************************************************/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "020Y";
      SLWREC.SLWMSGNO = 0017; /* <--- invalid selection msg*/
      set SL0HM010.XMSLMSNO cursor, bold;
      goto SL0H020; /* <=== converse map*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0H110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0H210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0H310; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0H410; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0H020; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0H020; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    SL0H110: SL0H110();


     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "120 "; /* error id location id*/
    goto SL0H120; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    SL0H120: SL0H120();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0H110; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0HM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0H020; /* <=== re-display menu*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is pf13)
      goto SL0H110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0H210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0H310; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0H410; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0H120; /* <=== re-display this screen*/
    end

    if (converseVar.eventKey is enter)
      SLWREC.XXXLOCID = "140 ";
      goto SL0H140; /* <=== converse map*/
    end


     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0H120; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    SL0H140: SL0H140();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0H110; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0HM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0H020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0H110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0H210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0H310; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0H410; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      if (SLWREC.SLWSKYSW == "N")
        goto SL0H120; /* <=== re-display key screen*/
      end
      goto SL0H140; /* <=== re-display data screen*/
    end

     /* ************************************************************/
     /* *** if no error and new key: re-display the data scrn   ****/
     /* ************************************************************/

    if (SLWREC.SLWSKYSW == "N")
      SLWREC.XXXLOCID = "140 ";
      goto SL0H140; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      SLWREC.XXXLOCID = "120 ";
      goto SL0H120; /* <=== setup for new input*/
    end

    if (converseVar.eventKey is pf12)
      SLWREC.XXXLOCID = "140 ";
      goto SL0H140; /* <=== converse data map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "140Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0H140; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    SL0H210: SL0H210();


     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "220 "; /* error id location id*/
    goto SL0H220; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    SL0H220: SL0H220();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0H210; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0HM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0H020; /* <=== re-display menu*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is pf13)
      goto SL0H110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0H210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0H310; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0H410; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0H220; /* <=== re-display this screen*/
    end

    if (converseVar.eventKey is enter)
      SLWREC.XXXLOCID = "220 ";
      goto SL0H220; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0H220; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    SL0H310: SL0H310();


     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "320 "; /* error id location id*/
    goto SL0H320; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    SL0H320: SL0H320();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0H310; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0HM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0H020; /* <=== re-display menu*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is pf13)
      goto SL0H110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0H210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0H310; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0H410; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0H320; /* <=== re-display this screen*/
    end

    if (converseVar.eventKey is enter)
      SLWREC.XXXLOCID = "340 ";
      goto SL0H340; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0H320; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    SL0H340: SL0H340();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0H310; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0HM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0H020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0H110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0H210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0H310; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0H410; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      if (SLWREC.SLWSKYSW == "N")
        goto SL0H320; /* <=== re-display key screen*/
      end
      goto SL0H340; /* <=== re-display data screen*/
    end

     /* ************************************************************/
     /* *** if no error and new key: re-display the data scrn   ****/
     /* ************************************************************/

    if (SLWREC.SLWSKYSW == "N")
      SLWREC.XXXLOCID = "340 ";
      goto SL0H340; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      SLWREC.XXXLOCID = "320 ";
      goto SL0H320; /* <=== setup for new input*/
    end

    if (converseVar.eventKey is pf12)
      SLWREC.XXXLOCID = "340 ";
      goto SL0H340; /* <=== converse data map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "340Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0H340; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    SL0H410: SL0H410();


     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "420 "; /* error id location id*/
    goto SL0H420; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    SL0H420: SL0H420();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0H410; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0HM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0H020; /* <=== re-display menu*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is pf13)
      goto SL0H110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0H210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0H310; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0H410; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0H420; /* <=== re-display this screen*/
    end

    if (converseVar.eventKey is enter)
      SLWREC.XXXLOCID = "440 ";
      goto SL0H440; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0H420; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    SL0H440: SL0H440();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0H410; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0HM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0H020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0H110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0H210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0H310; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0H410; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      if (SLWREC.SLWSKYSW == "N")
        goto SL0H420; /* <=== re-display key screen*/
      end
      goto SL0H440; /* <=== re-display data screen*/
    end

     /* ************************************************************/
     /* *** if no error and new key: re-display the data scrn   ****/
     /* ************************************************************/

     /* IF SLWREC.SLWSKYSW EQ 'N';*/
      /* MOVE '420 ' TO SLWREC.XXXLOCID;*/
      /* SL0H420                      ; <=== re-display this screen*/
     /* END ;*/

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      SLWREC.XXXLOCID = "440 ";
      goto SL0H440; /* <=== setup for new input*/
    end

    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      goto SL0H440; /* <=== converse data map*/
    end

    if (converseVar.eventKey is pf12)
      SLWREC.XXXLOCID = "440 ";
      goto SL0H440; /* <=== converse data map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "440Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0H440; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


  end // end main
end // end SL0H

// one time initializations
Function SL0H010()


   /* ************************************************************/
   /* *** standard security checking                          ****/
   /* *** note: comment out if exec'g from your msl           ****/
   /* ************************************************************/

  XSENTRY();

   /* ************************************************************/
   /* *** standard segmented trans id setting                 ****/
   /* ************************************************************/

  XSSEGTR();

   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0HM010 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0HM110 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0HM210 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0HM310 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0HM410 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set PC2REC empty; /**/
  set SLVREC empty; /**/
  set SLWREC empty; /* common working storage fields*/
  set SL0HWD0 empty; /**/
  set SL0HWB4 empty; /**/
  set SL0HW01 empty; /**/
  set SL0HW02 empty; /**/
  set SL0HW03 empty; /**/
  set SL0HW04 empty; /**/
  set SL4REC empty; /**/
  set SL5REC empty; /**/
  set SL7REC empty; /**/
  set PKNREC empty; /**/
  set SYPREC empty; /**/
  set TA1REC empty; /* TA0020 record*/
  set TA2REC empty; /**/
  set TA5REC empty; /**/
  set X2CREC empty; /* x2crec date record*/
  set X3CREC empty; /* x3crec time record*/
  set SQLCA empty; /* SQL returned data record*/
  set ERRSQLCA empty; /* TA0020 version of SQLCA*/

   /* ************************************************************/
   /* *** maintenance information:                            ****/
   /* *** =======================                             ****/
   /* *** rvsn   date    update by:    description:           ****/
   /* *** ---- --------  ------------  ---------------------- ****/
   /* ***  00  03/06/87  W. Jones      created                ****/
   /* ***  01  12/18/87  DPB                                  ****/
   /* ***  02   3/07/88  G. Gilray     change attributes of   ****/
   /* ***                              "Shade" code to askip. ****/
   /* ***                              change screen default  ****/
   /* ***                              of UOM to spaces rather****/
   /* ***                              than '01' if no UOM cd ****/
   /* ***                              entered,get from prod  ****/
   /* ***  03   8/31/88  W. Jones      add reset scrn on fast ****/
   /* ***                              path exit error        ****/
   /* ***  04  11/10/88  J. Wood       added xssegtr sgrp     ****/
   /* ***  05  12/12/88  K. Anderson   chg edit to not allow  ****/
   /* ***                              Product Assignment for ****/
   /* ***                              BELTPICK and LETDOWN   ****/
   /* ***                              LOCATIONS.             ****/
   /* ***  06  01/17/89  K. Anderson   Change SAFETY STOCK    ****/
   /* ***                              MAINTENANCE to allow   ****/
   /* ***                              MIN. and MAX. values   ****/
   /* ***                              to be set back to ZERO ****/
   /* ***                              and to globally change ****/
   /* ***                              MIN./MAX. for a speci- ****/
   /* ***                              fied product/location. ****/
   /* ***  07  01/27/89  K. Anderson   changed condition for  ****/
   /* ***                              display of more sizes  ****/
   /* ***                              message                ****/
   /* ************************************************************/

  SLWREC.XXXRVNBR = "07";

  SLWREC.XXXMAPNM = "SL0HM010";
  SLWREC.XXXTITLE = "PRODUCT LOCATION ASSIGNMENT MENU";

  XSX2CDT();
  XSX3CTM();
  SLWREC.XXXAPPID = "SL0H"; /* error id appl. name*/
  SLWREC.SLWTALOC = "SL0H010 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0HM010"; /* TA0020 current map name*/

  SLWREC.SLWSUMQU = "SLSH"; /* summary tsq id*/
  SLWREC.SLWDETQU = "SLDH"; /* detail tsq id*/
  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* saved msg no.*/
  SLWREC.SLWLINPP = 14; /* lines per page*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0HM010.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0HM010.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0HM010.XXXTITLE = SLWREC.XXXTITLE;
  SL0HM010.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  SL0HWD0.SL0HWLTH = 256;

   /* ************************************************************/
   /* *** check commarea fast path item to see if it should   ****/
   /* *** be used to setup working storage &/or map fields    ****/
   /* ************************************************************/

  if (COMMAREA.CAITEM > " ")
    SL0HSY0(); /* <=== use commarea item*/
    COMMAREA.CAITEM = " ";
  end

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end SL0H010

// converse & control key entry
Function SL0H020()


   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0HM010.XXXERRID = SLWREC.XXXERRID;


  converse SL0HM010 ;

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020A";
    SLWREC.SLWMSGNO = 0;
    SL0HM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020B";
    SLWREC.SLWMSGNO = 0;
    SL0HM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020C";
    SLWREC.SLWMSGNO = 0;
    SL0HM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020D";
    SLWREC.SLWMSGNO = 0;
    SL0HM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0HM010.CATOAP > " ")
    COMMAREA.CATOAP = SL0HM010.CATOAP;
    COMMAREA.CAITEM = SL0HM010.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020E";
    SLWREC.SLWMSGNO = 0;
    SL0HM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0HM010.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0HM010.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "020 ";
  set SL0HM010.CATOAP initialAttributes;
  set SL0HM010.CAITEM initialAttributes;
  set SL0HM010.XMSLMSNO cursor, initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0HM010.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0HM010.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0HSH0(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "020I";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0H020

// one time initializations
Function SL0H110()


   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0HM110 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0HW01 empty; /* appl. working storage area*/

  SLWREC.XXXMAPNM = "SL0HM110";
  SLWREC.XXXTITLE = "PROD. LOCATION ASSIGNMENT MAINT.";

  SLWREC.SLWTALOC = "SL0H110 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0HM110"; /* TA0020 current map name*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* saved msg no.*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed during resets and for multiple levels     ****/
   /* ************************************************************/

  SL0HM110.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0HM110.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0HM110.XXXTITLE = SLWREC.XXXTITLE;
  SL0HM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  SL0HM110.XWHCD = COMMAREA.XWHCD;

  SL0HM110.SY2CLRID = "00 ";
  SL0HM110.XDMCD = "00";
  SL0HM110.XQACD = "01";
  SL0HM110.XSDCD = "000";
  SL0HM110.XSACD = "000";
  SL0HM110.XPGCD = "00";
  SL0HM110.XOWCD = "00";

   /* *** code commented by Grant Gilray 3/8/88 ****/
   /* MOVE '01' TO SL0HM110.XUMCD;*/
   /* *********** end of commented code ************/

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  SLWREC.SLWFTMSW = "Y";

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end SL0H110

// converse & control key entry
Function SL0H120()


   /* ************************************************************/
   /* *** protect (askip) data fields (if any)                ****/
   /* *** note: cursor is set if error or is map's default    ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= 40)
    set SL0HM110.SY4IDDSC[SLWIDX01] skip, invisible;
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0HM110.XXXERRID = SLWREC.XXXERRID;


  converse SL0HM110 ;

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120A";
    SLWREC.SLWMSGNO = 0;
    SL0HM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120C";
    SLWREC.SLWMSGNO = 0;
    SL0HM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120D";
    SLWREC.SLWMSGNO = 0;
    SL0HM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immediately              ****/
   /* ************************************************************/

  if (SL0HM110.CATOAP > " ")
    COMMAREA.CATOAP = SL0HM110.CATOAP;
    COMMAREA.CAITEM = SL0HM110.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120E";
    SLWREC.SLWMSGNO = 0;
    SL0HM110.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0HM110.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0HM110.VAGen_EZEMSG = " ";
  set SL0HM110.CATOAP initialAttributes;
  set SL0HM110.CAITEM initialAttributes;
  set SL0HM110.XGPCD cursor;

   /* ************************************************************/
   /* *** reset key input fld attr.s as orig.ly defined       ****/
   /* ************************************************************/

  set SL0HM110.XWHCD initialAttributes;
  set SL0HM110.XMSLMFNC initialAttributes;
  set SL0HM110.SY1STNBR initialAttributes;
  set SL0HM110.SY2CLRID initialAttributes;
  set SL0HM110.XGPCD initialAttributes;
  set SL0HM110.XDMCD initialAttributes;
  set SL0HM110.XQACD initialAttributes;
  set SL0HM110.XSDCD initialAttributes;
  set SL0HM110.XSACD initialAttributes;
  set SL0HM110.XPGCD initialAttributes;
  set SL0HM110.XUMCD initialAttributes;
  set SL0HM110.XOWCD initialAttributes;
  set SL0HM110.XARCD initialAttributes;
  set SL0HM110.SL4ZONE initialAttributes;
  set SL0HM110.SL5LOCTN initialAttributes;
  set SL0HM110.XXXSTAT initialAttributes;

   /* ************************************************************/
   /* *** reset data input fld attr.s as orig.ly defined      ****/
   /* *** note: inq & del stay askip but not dark             ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= 40)
    if (SL0HM110.XMSLMFNC == "D")
      set SL0HM110.SY4IDDSC[SLWIDX01] skip;
    else
      set SL0HM110.SY4IDDSC[SLWIDX01] initialAttributes;
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end


   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0HM110.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0HM110.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0HSH1(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "120I";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0H120

// converse & control data entry
Function SL0H140()


   /* ************************************************************/
   /* *** setup non-default (data) cursor position, if any    ****/
   /* *** note: error cursor position has precedence          ****/
   /* ************************************************************/

  SL0HS1B();


   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0HM110.XXXERRID = SLWREC.XXXERRID;


  converse SL0HM110 ;

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "140A";
    SLWREC.SLWMSGNO = 0;
    SL0HM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "140C";
    SLWREC.SLWMSGNO = 0;
    SL0HM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "140D";
    SLWREC.SLWMSGNO = 0;
    SL0HM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0HM110.CATOAP > " ")
    COMMAREA.CATOAP = SL0HM110.CATOAP;
    COMMAREA.CAITEM = SL0HM110.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "140E";
    SLWREC.SLWMSGNO = 0;
    SL0HM110.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0HM110.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0HM110.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "140 ";
  set SL0HM110.CATOAP initialAttributes;
  set SL0HM110.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset key input fld attr.s as orig.ly defined       ****/
   /* ************************************************************/

  set SL0HM110.XWHCD initialAttributes;
  set SL0HM110.XMSLMFNC initialAttributes;
  set SL0HM110.SY1STNBR initialAttributes;
  set SL0HM110.SY2CLRID initialAttributes;
  set SL0HM110.XGPCD initialAttributes;
  set SL0HM110.XDMCD initialAttributes;
  set SL0HM110.XQACD initialAttributes;
  set SL0HM110.XSDCD initialAttributes;
  set SL0HM110.XSACD initialAttributes;
  set SL0HM110.XPGCD initialAttributes;
  set SL0HM110.XUMCD initialAttributes;
  set SL0HM110.XOWCD initialAttributes;
  set SL0HM110.XARCD initialAttributes;
  set SL0HM110.SL4ZONE initialAttributes;
  set SL0HM110.SL5LOCTN initialAttributes;
  set SL0HM110.XXXSTAT initialAttributes;

   /* ************************************************************/
   /* *** reset data input fld attr.s as orig.ly defined      ****/
   /* *** note: inq & del stay askip but not dark             ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= 40)
    set SL0HM110.XMSLMFNC[SLWIDX01] initialAttributes;
    set SL0HM110.SY4IDDSC[SLWIDX01] initialAttributes;
    set SL0HM110.SL7EFFDT[SLWIDX01] initialAttributes;
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0HM110.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "140F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0HM110.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do key & data entry edits & process inputs****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0HSB1(); /* <=== same key edits*/
    if (SLWREC.SLWSKYSW == "N")
      SL0HSF1(); /* <=== save key values*/
      SL0HST1(); /* <=== reset screen (empty)*/
      SL0HSH1(); /* <=== enter processing*/
      exit stack;
    end
    SL0HSR1(); /* <=== data entry edits*/
    if (SLWREC.SLWERRSW == "Y")
      exit stack;
    end
    SL0HSU1(); /* <=== update database*/
    if (SLWREC.SLWERRSW == "Y")
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* <=== reset any updates*/
      exit stack;
    end
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* <=== commit any updates*/
    SL0HSQ1(); /* <=== reset screen (clear)*/
    SLWREC.SLWMSGNO = 0020; /* <--- trans. complete msg*/
    exit stack;
  end

   /* ************************************************************/
   /* *** reset first time switch (confirm delete sw)         ****/
   /* ************************************************************/

  SLWREC.SLWFTMSW = "Y";

   /* ************************************************************/
   /* *** if PF12: do key & data entry edits only             ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf12)
    SL0HSB1(); /* <=== same key edits*/
    if (SLWREC.SLWSKYSW == "N")
      SL0HSF1(); /* <=== save key values*/
      SL0HST1(); /* <=== reset screen (empty)*/
      SL0HSH1(); /* <=== enter processing*/
      exit stack;
    end
    SL0HSR1(); /* <=== data entry edits*/
    if (SLWREC.SLWERRSW == "Y")
      exit stack;
    end
    SLWREC.SLWMSGNO = 0026; /* <--- edits ok msg*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no code executed              ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "140I";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0H140

// one time initializations
Function SL0H210()


   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0HM210 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0HW02 empty; /* appl. working storage area*/

  SLWREC.XXXMAPNM = "SL0HM210";
  SLWREC.XXXTITLE = "PROD. LOCATION ASSIGNMENT BY STYLE";

  SLWREC.SLWTALOC = "SL0H210 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0HM210"; /* TA0020 current map name*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* saved msg no.*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0HM210.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0HM210.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0HM210.XXXTITLE = SLWREC.XXXTITLE;
  SL0HM210.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  SL0HM210.XWHCD = COMMAREA.XWHCD;
  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= 16)
    SL0HM210.SY2CLRID[SLWIDX01] = "00 ";
    SL0HM210.XDMCD[SLWIDX01] = "00";
    SL0HM210.XQACD[SLWIDX01] = "01";
    SL0HM210.XSDCD[SLWIDX01] = "000";
    SL0HM210.XSACD[SLWIDX01] = "000";
    SL0HM210.XPGCD[SLWIDX01] = "00";
    /* ***** code changeed by Grant Gilray 3/14/88 ******/
    /* MOVE '01' TO SL0HM210.XUMCD(SLWIDX01);*/
    SL0HM210.XUMCD[SLWIDX01] = "  ";
    /* **************************************************/
    SL0HM210.XOWCD[SLWIDX01] = "00";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  SLWREC.SLWFTMSW = "Y";

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end SL0H210

// converse & control update
Function SL0H220()


   /* ************************************************************/
   /* *** protect (askip) data fields (if any)                ****/
   /* *** note: cursor is set if error or is map's default    ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0HM210.XXXERRID = SLWREC.XXXERRID;


  converse SL0HM210 ;

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220A";
    SLWREC.SLWMSGNO = 0;
    SL0HM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220C";
    SLWREC.SLWMSGNO = 0;
    SL0HM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220D";
    SLWREC.SLWMSGNO = 0;
    SL0HM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0HM210.CATOAP > " ")
    COMMAREA.CATOAP = SL0HM210.CATOAP;
    COMMAREA.CAITEM = SL0HM210.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220E";
    SLWREC.SLWMSGNO = 0;
    SL0HM210.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0HM210.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0HM210.VAGen_EZEMSG = " ";
  set SL0HM210.CATOAP initialAttributes;
  set SL0HM210.CAITEM initialAttributes;
  set SL0HM210.XMSLMFNC cursor;

   /* ************************************************************/
   /* *** reset key input fld attr.s as orig.ly defined       ****/
   /* ************************************************************/

  set SL0HM210.XWHCD initialAttributes;
  set SL0HM210.SL7EFFDT initialAttributes;
  set SL0HM210.XGPCD initialAttributes;
  set SL0HM210.XMSLMFNC initialAttributes;


  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= 16)
    set SL0HM210.SL0HMTOA[SLWIDX01] initialAttributes;
    set SL0HM210.SL0HMTOZ[SLWIDX01] initialAttributes;
    set SL0HM210.SL0HMTOL[SLWIDX01] initialAttributes;
    set SL0HM210.XARCD[SLWIDX01] initialAttributes;
    set SL0HM210.SL4ZONE[SLWIDX01] initialAttributes;
    set SL0HM210.SL5LOCTN[SLWIDX01] initialAttributes;
    set SL0HM210.SY1STNBR[SLWIDX01] initialAttributes;
    set SL0HM210.SY2CLRID[SLWIDX01] initialAttributes;
    set SL0HM210.XDMCD[SLWIDX01] initialAttributes;
    set SL0HM210.XQACD[SLWIDX01] initialAttributes;
    set SL0HM210.XSDCD[SLWIDX01] initialAttributes;
    set SL0HM210.XSACD[SLWIDX01] initialAttributes;
    set SL0HM210.XPGCD[SLWIDX01] initialAttributes;
    set SL0HM210.XUMCD[SLWIDX01] initialAttributes;
    set SL0HM210.XOWCD[SLWIDX01] initialAttributes;
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end


   /* ************************************************************/
   /* *** reset data input fld attr.s as orig.ly defined      ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0HM210.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0HM210.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0HSH2(); /* <=== enter processing*/
    if (SLWREC.SLWERRSW == "Y")
      exit stack;
    end
    XSX3CTM();
    SL0HW02.SL0HWXSW = "N";
    SLWREC.SLWIDX01 = 1;
    while (SLWREC.SLWIDX01 <= 16)
      if (SL0HM210.XARCD[SLWIDX01] > " "
       || SL0HM210.SL4ZONE[SLWIDX01] > " "
       || SL0HM210.SL5LOCTN[SLWIDX01] > " "
       || SL0HM210.SL0HMTOA[SLWIDX01] > " "
       || SL0HM210.SL0HMTOZ[SLWIDX01] > " "
       || SL0HM210.SL0HMTOL[SLWIDX01] > " "
       || SL0HM210.SY1STNBR[SLWIDX01] > " ")
        SL0HSR2(); /* <=== enter detail processing*/
        if (SLWREC.SLWERRSW == "Y")
          exit stack;
        end
        SL0HW02.SL0HWXSW = "Y";
        SL0HSU2(); /* <=== update database(line by line)*/
        if (SLWREC.SLWERRSW == "Y")
          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback(); /* <=== reset any updates*/
          exit stack;
        end
        VGVar.handleSysLibraryErrors = 0;
        sysLib.commit(); /* <=== commit any updates*/
        SL0HS2Z(); /* <=== clear line*/
      end
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
    end
    if (SL0HW02.SL0HWXSW == "Y")
      SL0HSQ2(); /* <=== reset screen (clear)*/
      SLWREC.XXXLOCID = "220G";
      SLWREC.SLWMSGNO = 0020; /* <--- trans. complete msg*/
      exit stack;
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "220J";
      SLWREC.SLWMSGNO = 0009; /* <--- invlaid pfkey msg*/
      if (SL0HM210.XMSLMFNC == "A")
        set SL0HM210.SL0HMTOA[1] cursor, bold;
        set SL0HM210.SL0HMTOZ[1] bold;
        set SL0HM210.SL0HMTOL[1] bold;
        set SL0HM210.SY1STNBR[1] bold;
        exit stack;
      end
      if (SL0HM210.XMSLMFNC == "D")
        set SL0HM210.XARCD[1] cursor, bold;
        set SL0HM210.SL4ZONE[1] bold;
        set SL0HM210.SL5LOCTN[1] bold;
        set SL0HM210.SY1STNBR[1] bold;
        exit stack;
      end
      if (SL0HM210.XMSLMFNC == "R")
        set SL0HM210.XARCD[1] cursor, bold;
        set SL0HM210.SL4ZONE[1] bold;
        set SL0HM210.SL5LOCTN[1] bold;
        set SL0HM210.SL0HMTOA[1] bold;
        set SL0HM210.SL0HMTOZ[1] bold;
        set SL0HM210.SL0HMTOL[1] bold;
        set SL0HM210.SY1STNBR[1] bold;
        exit stack;
      end
    end
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level                                   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "220I";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0H220

// one time initializations
Function SL0H310()


   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0HM310 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0HW03 empty; /* appl. working storage area*/

  SLWREC.XXXMAPNM = "SL0HM310";
  SLWREC.XXXTITLE = "PROD. LOCATION ASSIGNMENT BY SIZE";

  SLWREC.SLWTALOC = "SL0H310 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0HM310"; /* TA0020 current map name*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* saved msg no.*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0HM310.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0HM310.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0HM310.XXXTITLE = SLWREC.XXXTITLE;
  SL0HM310.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  SL0HM310.XWHCD = COMMAREA.XWHCD;

  SL0HM310.SY2CLRID = "00 ";
  SL0HM310.XDMCD = "00";
  SL0HM310.XQACD = "01";
  SL0HM310.XSDCD = "000";
  SL0HM310.XSACD = "000";
  SL0HM310.XPGCD = "00";
   /* ***** the following code commented by G. Gilray 3/09/88 *****/
   /* MOVE '01' TO SL0HM310.XUMCD;*/
   /* ****************** end of commented code ********************/
  SL0HM310.XOWCD = "00";

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end SL0H310

// converse & control key entry
Function SL0H320()


   /* ************************************************************/
   /* *** protect (askip) data fields (if any)                ****/
   /* *** note: cursor is set if error or is map's default    ****/
   /* ************************************************************/


  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= 39)
    set SL0HM310.SY4IDDSC[SLWIDX01] skip, invisible;
    set SL0HM310.SL0HMTOA[SLWIDX01] skip, invisible;
    set SL0HM310.SL0HMTOZ[SLWIDX01] skip, invisible;
    set SL0HM310.SL0HMTOL[SLWIDX01] skip, invisible;
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0HM310.XXXERRID = SLWREC.XXXERRID;


  converse SL0HM310 ;

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320A";
    SLWREC.SLWMSGNO = 0;
    SL0HM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320C";
    SLWREC.SLWMSGNO = 0;
    SL0HM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320D";
    SLWREC.SLWMSGNO = 0;
    SL0HM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0HM310.CATOAP > " ")
    COMMAREA.CATOAP = SL0HM310.CATOAP;
    COMMAREA.CAITEM = SL0HM310.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320E";
    SLWREC.SLWMSGNO = 0;
    SL0HM310.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0HM310.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0HM310.VAGen_EZEMSG = " ";
  set SL0HM310.CATOAP initialAttributes;
  set SL0HM310.CAITEM initialAttributes;
  set SL0HM310.XMSLMFNC cursor;

   /* ************************************************************/
   /* *** reset key input fld attr.s as orig.ly defined       ****/
   /* ************************************************************/

  set SL0HM310.XWHCD initialAttributes;
  set SL0HM310.SY1STNBR initialAttributes;
  set SL0HM310.SY2CLRID initialAttributes;
  set SL0HM310.XGPCD initialAttributes;
  set SL0HM310.XDMCD initialAttributes;
  set SL0HM310.XQACD initialAttributes;
  set SL0HM310.XSDCD initialAttributes;
  set SL0HM310.XSACD initialAttributes;
  set SL0HM310.XPGCD initialAttributes;
  set SL0HM310.XUMCD initialAttributes;
  set SL0HM310.XOWCD initialAttributes;
  set SL0HM310.XARCD initialAttributes;
  set SL0HM310.SL4ZONE initialAttributes;
  set SL0HM310.SL5LOCTN initialAttributes;
  set SL0HM310.SL7EFFDT initialAttributes;
  set SL0HM310.XMSLMFNC initialAttributes;

   /* ************************************************************/
   /* *** reset data input fld attr.s as orig.ly defined      ****/
   /* *** note: inq & del stay askip but not dark             ****/
   /* ************************************************************/


  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= 39)
    set SL0HM310.SY4IDDSC[SLWIDX01] initialAttributes;
    set SL0HM310.SL0HMTOA[SLWIDX01] initialAttributes;
    set SL0HM310.SL0HMTOZ[SLWIDX01] initialAttributes;
    set SL0HM310.SL0HMTOL[SLWIDX01] initialAttributes;
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0HM310.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0HM310.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0HSH3(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "320I";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0H320

// converse & control data entry
Function SL0H340()


   /* ************************************************************/
   /* *** setup non-default (data) cursor position, if any    ****/
   /* *** note: error cursor position has precedence          ****/
   /* ************************************************************/

  SL0HS3A();

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0HM310.XXXERRID = SLWREC.XXXERRID;


  converse SL0HM310 ;

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "340A";
    SLWREC.SLWMSGNO = 0;
    SL0HM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "340C";
    SLWREC.SLWMSGNO = 0;
    SL0HM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "340D";
    SLWREC.SLWMSGNO = 0;
    SL0HM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0HM310.CATOAP > " ")
    COMMAREA.CATOAP = SL0HM310.CATOAP;
    COMMAREA.CAITEM = SL0HM310.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "340E";
    SLWREC.SLWMSGNO = 0;
    SL0HM310.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0HM310.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0HM310.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "340 ";
  set SL0HM310.CATOAP initialAttributes;
  set SL0HM310.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset key input fld attr.s as orig.ly defined       ****/
   /* ************************************************************/

  set SL0HM310.XWHCD initialAttributes;
  set SL0HM310.XMSLMFNC initialAttributes;
  set SL0HM310.SL7EFFDT initialAttributes;
  set SL0HM310.XGPCD initialAttributes;
  set SL0HM310.SY1STNBR initialAttributes;
  set SL0HM310.SY2CLRID initialAttributes;
  set SL0HM310.XDMCD initialAttributes;
  set SL0HM310.XQACD initialAttributes;
  set SL0HM310.XSDCD initialAttributes;
  set SL0HM310.XSACD initialAttributes;
  set SL0HM310.XPGCD initialAttributes;
  set SL0HM310.XUMCD initialAttributes;
  set SL0HM310.XOWCD initialAttributes;
  set SL0HM310.XARCD initialAttributes;
  set SL0HM310.SL4ZONE initialAttributes;
  set SL0HM310.SL5LOCTN initialAttributes;

   /* ************************************************************/
   /* *** reset data input fld attr.s as orig.ly defined      ****/
   /* *** note: inq & del stay askip but not dark             ****/
   /* ************************************************************/


  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= 39)
    set SL0HM310.SY4IDDSC[SLWIDX01] initialAttributes;
    set SL0HM310.SL0HMTOA[SLWIDX01] initialAttributes;
    set SL0HM310.SL0HMTOZ[SLWIDX01] initialAttributes;
    set SL0HM310.SL0HMTOL[SLWIDX01] initialAttributes;
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0HM310.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "340F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0HM310.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do key & data entry edits & process inputs****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0HSB3(); /* <=== same key edits*/
    if (SLWREC.SLWSKYSW == "N")
      SL0HSF3(); /* <=== save key values*/
      SL0HST3(); /* <=== reset screen (empty)*/
      SL0HSH3(); /* <=== enter processing*/
      exit stack;
    end
    SL0HSR3(); /* <=== data entry edits*/
    if (SLWREC.SLWERRSW == "Y")
      exit stack;
    end
    SL0HSU3(); /* <=== update database*/
    if (SLWREC.SLWERRSW == "Y")
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* <=== reset any updates*/
      exit stack;
    end
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* <=== commit any updates*/
    SL0HSQ3(); /* <=== reset screen (clear)*/
    SLWREC.SLWMSGNO = 0020; /* <--- trans. complete msg*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF12: do key & data entry edits only             ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf12)
    SL0HSB3(); /* <=== same key edits*/
    if (SLWREC.SLWSKYSW == "N")
      SL0HSF3(); /* <=== save key values*/
      SL0HST3(); /* <=== reset screen (empty)*/
      SL0HSH3(); /* <=== enter processing*/
      exit stack;
    end
    SL0HSR3(); /* <=== data entry edits*/
    if (SLWREC.SLWERRSW == "Y")
      exit stack;
    end
    SLWREC.SLWMSGNO = 0026; /* <--- edits ok msg*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no code executed              ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "340I";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0H340

// one time initializations
Function SL0H410()


   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0HM410 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0HW04 empty; /* appl. working storage area*/

  SLWREC.XXXMAPNM = "SL0HM410";
  SLWREC.XXXTITLE = "SAFETY STOCK MAINTENANCE";

  SLWREC.SLWTALOC = "SL0H410 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0HM410"; /* TA0020 current map name*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWVERSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* saved msg no.*/
  SLWREC.SLWLINPP = 14; /* lines per page init*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0HM410.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0HM410.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0HM410.XXXTITLE = SLWREC.XXXTITLE;
  SL0HM410.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  SL0HM410.XWHCD = COMMAREA.XWHCD;

  SL0HM410.SY2CLRID = "00 ";
  SL0HM410.XDMCD = "00";
  SL0HM410.XQACD = "01";
  SL0HM410.XSDCD = "000";
  SL0HM410.XSACD = "000";
  SL0HM410.XPGCD = "00";
  SL0HM410.XOWCD = "00";

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  SL0HW04.SL0HWPMI = "N"; /* <== product min modified flag*/
  SL0HW04.SL0HWPMA = "N"; /* <== product max modified flag*/

  SL0HW04.SL0HWSIN = "N"; /* <== save product min modified flag*/
  SL0HW04.SL0HWSAX = "N"; /* <== save product max modified flag*/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP) /* <-- save modified flag*/
    SL0HW04.SL0HWSMI[SLWIDX01] = "N";
    SL0HW04.SL0HWSMA[SLWIDX01] = "N";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

  XSSLSPQ(); /* <------  purge tsq's*/
  SL0HWD0.SL0HWLTH = 256;

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end SL0H410

// converse & control key entry
Function SL0H420()


   /* ************************************************************/
   /* *** protect (askip) data fields (if any)                ****/
   /* *** note: cursor is set if error or is map's default    ****/
   /* ************************************************************/

  set SL0HM410.SL0HMPIN skip, invisible;
  set SL0HM410.SL0HMPAX skip, invisible;

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    set SL0HM410.SY4IDDSC[SLWIDX01] skip, invisible;
    set SL0HM410.SL7MINSS[SLWIDX01] skip, invisible;
    set SL0HM410.SL0HMMIN[SLWIDX01] skip, invisible;
    set SL0HM410.SL7MAXSS[SLWIDX01] skip, invisible;
    set SL0HM410.SL0HMMAX[SLWIDX01] skip, invisible;
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0HM410.XXXERRID = SLWREC.XXXERRID;


  converse SL0HM410 ;

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    XSSLSPQ(); /* <=== clear tsq's*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    XSSLSPQ(); /* <=== clear tsq's*/
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420A";
    SLWREC.SLWMSGNO = 0;
    SL0HM410.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    XSSLSPQ(); /* <=== clear tsq's*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSSLSPQ(); /* <=== clear tsq's*/
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420C";
    SLWREC.SLWMSGNO = 0;
    SL0HM410.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    XSSLSPQ(); /* <=== clear tsq's*/
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420D";
    SLWREC.SLWMSGNO = 0;
    SL0HM410.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0HM410.CATOAP > " ")
    COMMAREA.CATOAP = SL0HM410.CATOAP;
    COMMAREA.CAITEM = SL0HM410.CAITEM;
    XSSLSPQ(); /* <=== clear tsq's*/
    XSEXIT();
    SL0HSQ4(); /* <=== reset scrn*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420E";
    SLWREC.SLWMSGNO = 0;
    SL0HM410.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0HM410.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SL0HW04.SL0HWSIN = "N";
  SL0HW04.SL0HWSAX = "N";
  SLWREC.SLWERRSW = "N";
  SLWREC.SLWVERSW = "N";
  SL0HM410.VAGen_EZEMSG = " ";
  set SL0HM410.CATOAP initialAttributes;
  set SL0HM410.CAITEM initialAttributes;
  set SL0HM410.XGPCD cursor;

   /* ************************************************************/
   /* *** reset key input fld attr.s as orig.ly defined       ****/
   /* ************************************************************/

  set SL0HM410.XWHCD initialAttributes;
  set SL0HM410.SY1STNBR initialAttributes;
  set SL0HM410.SY2CLRID initialAttributes;
  set SL0HM410.XGPCD initialAttributes;
  set SL0HM410.XDMCD initialAttributes;
  set SL0HM410.XQACD initialAttributes;
  set SL0HM410.XSDCD initialAttributes;
  set SL0HM410.XSACD initialAttributes;
  set SL0HM410.XPGCD initialAttributes;
  set SL0HM410.XUMCD initialAttributes;
  set SL0HM410.XOWCD initialAttributes;
  set SL0HM410.XARCD initialAttributes;
  set SL0HM410.SL4ZONE initialAttributes;
  set SL0HM410.SL5LOCTN initialAttributes;

   /* ************************************************************/
   /* *** reset data input fld attr.s as orig.ly defined      ****/
   /* ************************************************************/

  set SL0HM410.SL0HMPIN initialAttributes;
  set SL0HM410.SL0HMPAX initialAttributes;

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    set SL0HM410.SY4IDDSC[SLWIDX01] initialAttributes;
    set SL0HM410.SL7MINSS[SLWIDX01] initialAttributes;
    set SL0HM410.SL0HMMIN[SLWIDX01] initialAttributes;
    set SL0HM410.SL7MAXSS[SLWIDX01] initialAttributes;
    set SL0HM410.SL0HMMAX[SLWIDX01] initialAttributes;
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0HM410.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0HM410.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0HSH4(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    XSSLSPQ(); /* <=== clear tsq's*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "420I";
  SLWREC.SLWMSGNO = 0004; /* <--- invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0H420

// converse & control data entry
Function SL0H440()


   /* ***********************************************************/
   /* *** erase EOF map fields would show zero unless map    ****/
   /* ***  map cleared then rebuilt from saved values        ****/
   /* ***********************************************************/

  if (SLWREC.SLWERRSW == "Y")
    SL0HS4D();
  end

   /* ************************************************************/
   /* *** setup non-default (data) cursor position            ****/
   /* ************************************************************/

  if (SLWREC.SLWERRSW == "N")
    if (SL0HW04.SL0HWXSW == "Y")
      set SL0HM410.SY1STNBR cursor;
    else
      set SL0HM410.SL0HMPIN cursor;
    end
  end

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/
  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0HM410.XXXERRID = SLWREC.XXXERRID;


  converse SL0HM410 ;

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "440A";
    SLWREC.SLWMSGNO = 0;
    SL0HM410.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    XSSLSPQ();
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSSLSPQ();
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "440C";
    SLWREC.SLWMSGNO = 0;
    SL0HM410.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    XSSLSPQ();
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "440D";
    SLWREC.SLWMSGNO = 0;
    SL0HM410.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0HM410.CATOAP > " ")
    COMMAREA.CATOAP = SL0HM410.CATOAP;
    COMMAREA.CAITEM = SL0HM410.CAITEM;
    XSSLSPQ();
    XSEXIT();
    SL0HSQ4(); /* reset screen clear*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "440E";
    SLWREC.SLWMSGNO = 0;
    SL0HM410.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0HM410.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SLWREC.SLWVERSW = "N";
  SL0HM410.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "440 ";
  set SL0HM410.CATOAP initialAttributes;
  set SL0HM410.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

   /* none required*/

   /* ************************************************************/
   /* *** reset data input fld attr.s as orig.ly defined      ****/
   /* *** note: inq & del stay askip but not dark             ****/
   /* ************************************************************/

  if (SL0HM410.SL0HMPIN is blanks) /* <== erase EOF*/
    SL0HW04.SL0HWPMI = "N"; /* <== set product min not modified*/
  else
    if (SL0HM410.SL0HMPIN >= 0
     && SL0HM410.SL0HMPIN is modified)
      SL0HW04.SL0HWPMI = "Y"; /* <== set product min modified*/
    end
  end
  if (SL0HM410.SL0HMPAX is blanks) /* <== erase EOF*/
    SL0HW04.SL0HWPMA = "N"; /* <== set product max not modified*/
  else
    if (SL0HM410.SL0HMPAX >= 0
     && SL0HM410.SL0HMPAX is modified)
      SL0HW04.SL0HWPMA = "Y";
                                   /* <== set product max modified*/
    end
  end

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    if (SL0HWD0.SL0HWRTY[SLWIDX01] == "B")
      set SL0HM410.SY4IDDSC[SLWIDX01] skip, invisible;
      set SL0HM410.SL7MINSS[SLWIDX01] skip, invisible;
      set SL0HM410.SL0HMMIN[SLWIDX01] skip, invisible;
      set SL0HM410.SL7MAXSS[SLWIDX01] skip, invisible;
      set SL0HM410.SL0HMMAX[SLWIDX01] skip, invisible;
    else
      set SL0HM410.SY4IDDSC[SLWIDX01] skip;
      set SL0HM410.SL7MINSS[SLWIDX01] skip;
      set SL0HM410.SL0HMMIN[SLWIDX01] initialAttributes;
      set SL0HM410.SL7MAXSS[SLWIDX01] skip;
      set SL0HM410.SL0HMMAX[SLWIDX01] initialAttributes;
    end
    if (SL0HM410.SL0HMMIN[SLWIDX01] is blanks) /* <== erase eof*/
      SL0HW04.SL0HWSMI[SLWIDX01] = "N";
    else
      if (SL0HM410.SL0HMMIN[SLWIDX01] >= 0 /* <== set min modified flag*/
       && SL0HM410.SL0HMMIN[SLWIDX01] is modified)
        SL0HW04.SL0HWSMI[SLWIDX01] = "Y";
      end
    end
    if (SL0HM410.SL0HMMAX[SLWIDX01] is blanks) /* <==  erase eof*/
      SL0HW04.SL0HWSMA[SLWIDX01] = "N";
    else
      if (SL0HM410.SL0HMMAX[SLWIDX01] >= 0
       /* <==   set max modified flag*/
       && SL0HM410.SL0HMMAX[SLWIDX01] is modified)
        SL0HW04.SL0HWSMA[SLWIDX01] = "Y";
      end
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0HM410.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "440F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0HM410.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do key & data entry edits & process inputs****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0HSB4(); /* <=== same key edits*/
    if (SLWREC.SLWSKYSW == "N")
      SL0HSF4(); /* <=== save key values*/
      SL0HSQ4(); /* <=== reset screen (clear)*/
      SL0HSH4(); /* <=== enter processing*/
      exit stack;
    end
    XSX3CTM();
    SL0HS4C(); /* <=== product mass change processing*/
    if (SLWREC.SLWERRSW == "Y")
      exit stack;
    end
    SL0HW04.SL0HWXSW = "N";
    SLWREC.SLWIDX01 = 1;
    while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
      SLWREC.SLWSEXSW = "N";
      SL0HSR4(); /* <=== data entry edits*/
      if (SLWREC.SLWERRSW == "Y")
        exit stack;
      end
      if (SLWREC.SLWSEXSW == "N")
        SL0HSU4(); /* <=== update database*/
        if (SLWREC.SLWERRSW == "Y")
          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback(); /* <=== reset any updates*/
          SL0HS4T(); /* <=== reread current tsq*/
          exit stack;
        end
        SL0HW04.SL0HWXSW = "Y";
      end
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
    end
    SL0HS4U(); /* <=== update current tsq*/
    if (SLWREC.SLWERRSW == "Y")
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* <=== reset any updates*/
      SL0HS4T(); /* <=== reread current tsq*/
      exit stack;
    end
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* <=== commit any updates*/
    if (SL0HW04.SL0HWXSW == "Y")
      /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "440I";
      SLWREC.SLWMSGNO = 0070; /* <--- update not rqd msg*/
      set SL0HM410.SL0HMMIN[1] cursor, bold;
      exit stack;
    end
    SL0HW04.XWHCD = SL7REC.XWHCD;
    SL0HW04.XARCD = SL7REC.XARCD;
    SL0HW04.SL4ZONE = SL7REC.SL4ZONE;
    SL0HW04.SL5LOCTN = SL7REC.SL5LOCTN;
    SL0HW04.XGPCD = SL7REC.XGPCD;
    SL0HW04.SY1STNBR = SL7REC.SY1STNBR;
    SL0HW04.SY2CLRID = SL7REC.SY2CLRID;
    SL0HW04.XDMCD = SL7REC.XDMCD;
    SL0HW04.XQACD = SL7REC.XQACD;
    SL0HW04.XOWCD = SL7REC.XOWCD;
    SL0HW04.XSDCD = SL7REC.XSDCD;
    SL0HW04.XSACD = SL7REC.XSACD;
    SL0HW04.XPGCD = SL7REC.XPGCD;
    SL0HW04.XUMCD = SL7REC.XUMCD;
    SL0HSQ4(); /* <=== reset screen clear*/
    SL0HSO4(); /* <=== display sreen*/
    if (SLWREC.SLWSMAXR > 1)
      SLWREC.SLWMSGNO = 0170; /* <--- trans. complete and more data*/
    else
      SLWREC.SLWMSGNO = 0020; /* <--- trans. complete msg*/
    end
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF12: do key & data entry edits only             ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf12)
    SL0HSB4(); /* <=== same key edits*/
    if (SLWREC.SLWSKYSW == "N")
      SL0HSF4(); /* <=== save key values*/
      SL0HSQ4(); /* <=== reset screen (clear)*/
      SL0HSH4(); /* <=== enter processing*/
      exit stack;
    end
    SL0HW04.SL0HWXSW = "N";
    SLWREC.SLWIDX01 = 1;
    while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
      SLWREC.SLWSEXSW = "N";
      SL0HSR4(); /* <=== data entry edits*/
      if (SLWREC.SLWERRSW == "Y")
        exit stack;
      end
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
    end
    if (SL0HW04.SL0HWXSW == "Y")
      SLWREC.SLWMSGNO = 0026; /* <--- edits ok msg*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "440K";
      SLWREC.SLWMSGNO = 0009; /* <--- missing input msg*/
    end
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF7: scroll backwards, key changes NOT allowed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf7)
    SL0HSJ4(); /* <=== PF7 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF8: scroll forwards, key changes NOT allowed    ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf8)
    SL0HSK4(); /* <=== PF8 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no code executed              ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    XSSLSPQ();
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "440I";
  SLWREC.SLWMSGNO = 0004; /* <--- invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0H440

// inquiry : sz xlate : 0
Function SL0H450()


   /* ************************************************************/
   /* *** obtain the desired size description/size id (no.)   ****/
   /* *** using the std module:  SY1190                       ****/
   /* *** code the following before this is executed:         ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* ***   note: or setup during init. & use a comment       ****/
   /* ***   SYPREC.SYPFC:   PC = all valid sizes              ****/
   /* ***                   IE = int. sz id to desc.          ****/
   /* ***                   EI = desc. to int. sz id          ****/
   /* ***   SYPREC.SYPCMPSW: Y = compressed (first blank or   ****/
   /* ***                        zero is end of data)         ****/
   /* ***                    N = not compressed (positional)  ****/
   /* *** code the action for the following return codes:     ****/
   /* *** note: check the SYPREC.SYPRC (NOT sqlcode)          ****/
   /* ***      0 = successful                                 ****/
   /* ***      9 = deadlock                                   ****/
   /* ***     10 = not found                                  ****/
   /* ***  other = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** call sy1190                                         ****/
   /* *** note: func & compress sw setup prior to this sgrp   ****/
   /* ************************************************************/

  call "SY1190" (SQLCA, SYPREC) {isNoRefresh = yes, isExternal = yes};

  if (SYPREC.SYPRC == 0)
    return;
  end

  if (SYPREC.SYPRC == 9)
    return;
  end

  if (SYPREC.SYPRC == 10)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "SL0H450 ";
  TA1REC.TA1LOCAT[1] = "SY1190  ";
  TA1REC.TA1LOCAT[3] = SYPREC.SYPRCX;
  TA1REC.TA1LOCAT[4] = "SZ XLATE";
  TA1REC.TA1DBASE = "MULTIPLE";
  TA1REC.TA1TBLVU = "DB VIEWS";
  TA1REC.TA1TBLKE = SYPREC.SYPKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0H450

// inquiry:(style)color view 2:0
Function SL0H460()


   /* ************************************************************/
   /* *** select unique row/view: combined style & color view ****/
   /* *** using the std module:  IO1810                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -811 = duplicates found                           ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***     <0 = db/severe error (&-911)                    ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* ************************************************************/

  call "IO1810" ("S ", SQLCA, PKNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)

    /* CANADA 08/25/95*/

    if (SLWREC.XCTCD == "CANA")

      /* format ta1rec in case of bad return code from call to SY2000*/

      TA1REC.TA1PGMNM = "SL0H"; /* CANA program name*/
      TA1REC.TA1LOC = "SL0H460"; /* CANA sgrp name*/

      XSSL-CALL-SY2000(); /* CANA call SY2000 to get*/
                              /* product region record*/
      if (WSY2000.WSY2000-RETURN-CODE == 0  /* CANA row found*/
       || WSY2000.WSY2000-RETURN-CODE == 02 /* CANA row not found*/
       || WSY2000.WSY2000-RETURN-CODE == 98) /* CANA database busy*/
      /* these errors are handled differently per map so return to*/
      /* calling sgrp and handle errors*/
        return;
      else
        SLWREC.SLWVERSW = "Y";
        converseLib.validationFailed(0001); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1LOC = "CALL SY2000";
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program appl*/
        TA1REC.TA1PGMNM = "SL0H460"; /* Program number*/
        TA1REC.TA1MAP = SLWREC.XXXMAPNM; /* Map name*/
        TA1REC.TA1DBASE = "DPROD  "; /* Data base name*/
        TA1REC.TA1TBLVU = "VSYREG02"; /* Table view name*/
        TA1REC.TA1TBLKE = PKNREC.PKNKEY; /* Table key*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback();

                              /* Error diagnosis routine*/
        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

      end
    end
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -811)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "SL0H460 ";
  TA1REC.TA1LOCAT[1] = "IO1810  ";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DPICK   ";
  TA1REC.TA1TBLVU = "VPKSTY01";
  TA1REC.TA1TBLKE = PKNREC.PKNKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0H460

// key obtain table data
Function SL0HS1A()


   /* ************************************************************/
   /* *** use size translator to valid translations           ****/
   /* ************************************************************/

  SYPREC.SYPFC = "PC";
  SYPREC.SYPCMPSW = "N";
  SYPREC.XQACD = "**";

  SL0H450(); /* <---- call sy1190 for size desc xlate*/

  if (SYPREC.SYPRC == 0)
     /* ** next sentence ***/
  else
    if (SYPREC.SYPRC == +10)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1AA";
      SLWREC.SLWMSGNO = 0057; /* <--- not on db msg*/
      return;
    end
    if (SYPREC.SYPRC == +9)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1AB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S1AC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0HS1A

// set cursor to 1st mfnc
Function SL0HS1B()


   /* ************************************************************/
   /* *** setup non-default (data) cursor position, if any    ****/
   /* *** note: error cursor position has precedence          ****/
   /* ************************************************************/


  if (SLWREC.SLWERRSW == "N")
    SLWREC.SLWIDX01 = 1;
    while (SLWREC.SLWIDX01 <= 40)
      if (SL0HM110.SY4IDDSC[SLWIDX01] > " ")
        set SL0HM110.XMSLMFNC[SLWIDX01] cursor;
        return;
      end
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HS1B

// data field edits
Function SL0HS2O()

   /* ************************************************************/
   /* *** edit each data field, even if error detected        ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if area code in tbl & active: continue              ****/
   /* ************************************************************/

  SLWREC.XWHCD = SL0HM210.XWHCD;
  SLWREC.SLWTBLCD = SL0HM210.SL0HMTOA[SLWIDX01];
  if (SLWREC.SLWTBLKY in XARTBL.XARKEY)
    if (XARTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XARTBL.XARPRCFL[sysVar.arrayIndex] == "Y")
         /* ** next sentence ***/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S2OA";
        SLWREC.SLWMSGNO = 0089; /* <--- inactive msg*/
        set SL0HM210.SL0HMTOA[SLWIDX01] cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2OB";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0HM210.SL0HMTOA[SLWIDX01] cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S2OC";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0HM210.SL0HMTOA[SLWIDX01] cursor, bold;
  end


  if (SLWREC.SLWERRSW == "Y")
    return;
  else
    set SL5REC empty;
    SL5REC.XWHCD = SL0HM210.XWHCD;
    SL5REC.XARCD = SL0HM210.SL0HMTOA[SLWIDX01];
    SL5REC.SL4ZONE = SL0HM210.SL0HMTOZ[SLWIDX01];
    SL5REC.SL5LOCTN = SL0HM210.SL0HMTOL[SLWIDX01];

    TA1REC.TA1LOCAT[2] = "SL0HS2O ";
    TA1REC.TA1MAP = SLWREC.SLWTAMAP;

    XSSL5I0(); /* <=== std prod loctn inquiry*/

    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2OG";
      SLWREC.SLWMSGNO = 0038; /* <--- not on db msg*/
      set SL0HM210.SL0HMTOA[SLWIDX01] cursor, bold;
      set SL0HM210.SL0HMTOZ[SLWIDX01] bold;
      set SL0HM210.SL0HMTOL[SLWIDX01] bold;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWSKYSW = "N";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2OH";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2OI";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE != 0) /* <=== for all other neg sql codes*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2OJ";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
    if (SL5REC.YLTCD == "15"
     || SL5REC.YLTCD == "16"
     || SL5REC.YLTCD == "17"
     || SL5REC.YLTCD == "23"
     || SL5REC.YLTCD == "24")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2OK";
      SLWREC.SLWMSGNO = 168; /* <-- Product assign not valid for loc*/
      set SL0HM210.SL0HMTOA[SLWIDX01] cursor, bold;
      set SL0HM210.SL0HMTOZ[SLWIDX01] bold;
      set SL0HM210.SL0HMTOL[SLWIDX01] bold;
      return;
    end
  end

  if (SLWREC.SLWERRSW == "Y")
    return;
  else
    set SL4REC empty;
    SL4REC.XWHCD = SL0HM210.XWHCD;
    SL4REC.XARCD = SL0HM210.SL0HMTOA[SLWIDX01];
    SL4REC.SL4ZONE = SL0HM210.SL0HMTOZ[SLWIDX01];

    TA1REC.TA1LOCAT[2] = "SL0HS2O ";
    TA1REC.TA1MAP = SLWREC.SLWTAMAP;

    XSSL4I0(); /* <=== area/zone inquiry*/

    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2OG";
      SLWREC.SLWMSGNO = 0038; /* <--- not on db msg*/
      set SL0HM210.SL0HMTOA[SLWIDX01] cursor, bold;
      set SL0HM210.SL0HMTOZ[SLWIDX01] bold;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWSKYSW = "N";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2OH";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2OI";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE != 0) /* <=== for all other neg sql codes*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2OJ";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
    if (SL4REC.YZTCD == "10"
     || SL4REC.YZTCD == "19")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2OK";
      SLWREC.SLWMSGNO = 408; /* <-- invalid zone type*/
      set SL0HM210.SL0HMTOZ[SLWIDX01] cursor, bold;
      return;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0HS2O

// reset line (clear)
Function SL0HS2Z()

   /* ************************************************************/
   /* *** set line to empty                                   ****/
   /* ************************************************************/

  SL0HM210.XARCD[SLWIDX01] = "  ";
  SL0HM210.SL4ZONE[SLWIDX01] = "  ";
  SL0HM210.SL5LOCTN[SLWIDX01] = "      ";
  SL0HM210.SL0HMTOA[SLWIDX01] = "  ";
  SL0HM210.SL0HMTOZ[SLWIDX01] = "  ";
  SL0HM210.SL0HMTOL[SLWIDX01] = "      ";
  SL0HM210.SY1STNBR[SLWIDX01] = "      ";
   /* ***** code added by Grant Gilray 3/14/88 ******/
  SL0HM210.XUMCD[SLWIDX01] = "  ";
   /* ***********************************************/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HS2Z

// set cursor to 1st mfnc
Function SL0HS3A()


   /* ************************************************************/
   /* *** setup non-default (data) cursor position, if any    ****/
   /* *** note: error cursor position has precedence          ****/
   /* ************************************************************/


  if (SLWREC.SLWERRSW == "N")
    SLWREC.SLWIDX01 = 1;
    while (SLWREC.SLWIDX01 <= 39)
      if (SL0HM310.SY4IDDSC[SLWIDX01] > " ")
        set SL0HM310.SL0HMTOA[SLWIDX01] cursor;
        return;
      end
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HS3A

// ta0050 call and error check
Function SL0HS4A()
  set TA5REC empty;
  TA5REC.TA5APPID = SLWREC.SLWSUMQU;
  TA5REC.TA5TSQIX = SLWREC.SLWSUMIX;
  TA5REC.TA5FNCCD = "U";

  call "TA0050" (SL0HWD0, TA5REC) {isNoRefresh = yes};

  if (TA5REC.TA5RTNCD == 0)
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S4AA";
    SLWREC.SLWMSGNO = 0061; /* <--- ????????? msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0HS4A

// ta0050 call and error check
Function SL0HS4B()
   /* ************************************************************/
   /* *** call tsq routine                                    ****/
   /* ************************************************************/
  TA5REC.TA5APPID = SLWREC.SLWSUMQU; /* <----- summary tsq id*/
  TA5REC.TA5TSQIX = SLWREC.SLWSUMIX;

  call "TA0050" (SL0HWD0, TA5REC) {isNoRefresh = yes};

  if (TA5REC.TA5RTNCD == 0)
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S4BA";
    SLWREC.SLWMSGNO = 0061; /* <--- ????????? msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0HS4B

// product mass change processing
Function SL0HS4C()
   /* ***********************************************************/
   /* *** if values for both min and max product mass chg    ****/
   /* *** entered -- check product min LE product max else   ****/
   /* *** if product min entered move to size min fields     ****/
   /* *** if product max entered move to size max fields     ****/
   /* *** then product like single changes                   ****/
   /* *** mass chg will change only one screen of data at a  ****/
   /* *** time user must scroll to new page to process more  ****/
   /* ***********************************************************/

  if (SL0HW04.SL0HWPMI == "Y" /* <=== product min entered*/
   && SL0HW04.SL0HWPMA == "Y") /* <=== product max entered*/

    if (SL0HM410.SL0HMPIN <= SL0HM410.SL0HMPAX)
      /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S4CA";
      SLWREC.SLWMSGNO = 0090; /* <== invalid value msg*/
      return;
    end
  end

  if (SL0HW04.SL0HWPMI == "Y") /* <== product min entered*/
    SL0HW04.SL0HMPIN = SL0HM410.SL0HMPIN; /* save product min qty*/
    SL0HW04.SL0HWSIN = "Y"; /* save product min switch*/
    SL0HW04.SL0HWPMI = "N"; /* product min switch*/

    SLWREC.SLWIDX01 = 1;

    while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
      if (SL0HWD0.SL0HWRTY == "S")
        SL0HM410.SL0HMMIN[SLWIDX01] = SL0HM410.SL0HMPIN;
        SL0HW04.SL0HWSMI[SLWIDX01] = "Y";
        SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
      end
    end
  end

  if (SL0HW04.SL0HWPMA == "Y") /* <== product max entered*/
    SL0HW04.SL0HMPAX = SL0HM410.SL0HMPAX; /* save product max qty*/
    SL0HW04.SL0HWSAX = "Y"; /* save product max switch*/
    SL0HW04.SL0HWPMA = "N"; /* product max switch*/

    SLWREC.SLWIDX01 = 1;

    while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
      if (SL0HWD0.SL0HWRTY == "S")
        SL0HM410.SL0HMMAX[SLWIDX01] = SL0HM410.SL0HMPAX;
        SL0HW04.SL0HWSMA[SLWIDX01] = "Y";
        SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
      end
    end
  end
   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HS4C

// error screen
Function SL0HS4D()


   /* ***********************************************************/
   /* *** erase EOF map fields would show zero unless map    ****/
   /* ***  map cleared then rebuilt from saved values        ****/
   /* ***********************************************************/

  if (SL0HW04.SL0HWPMI == "Y") /* <== product min entered*/
    SL0HW04.SL0HMPIN = SL0HM410.SL0HMPIN;
                                   /* <== save product min qty*/
  end

  if (SL0HW04.SL0HWPMA == "Y") /* <== product max entered*/
    SL0HW04.SL0HMPAX = SL0HM410.SL0HMPAX;
                                   /* <== save product max qty*/
  end

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)

    if (SL0HW04.SL0HWSMI[SLWIDX01] == "Y"
     && SL0HWD0.SL0HWRTY == "S")
      SL0HW04.SL0HMMIN[SLWIDX01] = SL0HM410.SL0HMMIN[SLWIDX01];
    end
    if (SL0HW04.SL0HWSMA[SLWIDX01] == "Y"
     && SL0HWD0.SL0HWRTY == "S")
      SL0HW04.SL0HMMAX[SLWIDX01] = SL0HM410.SL0HMMAX[SLWIDX01];
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

  converseLib.clearScreen();
  set SL0HM410 initial; /* <=== reset screen clear*/
  SL0HSG4(); /* <== setup map fields*/

   /* ******** INITIALIZE STD MAP FIELDS  ****************/
  SL0HM410.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0HM410.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0HM410.XXXTITLE = SLWREC.XXXTITLE;
  SL0HM410.XXXCURDT = X2CREC.X2CCURSD;
   /* *****************************************************/

  SL0HSO4(); /* <=== display screen*/

  if (SL0HW04.SL0HWPMI == "Y") /* <== product min entered*/
    SL0HM410.SL0HMPIN = SL0HW04.SL0HMPIN;
                                   /* <== saved product min qty*/
  end

  if (SL0HW04.SL0HWPMA == "Y") /* <== product max entered*/
    SL0HM410.SL0HMPAX = SL0HW04.SL0HMPAX;
                                   /* <== saved product max qty*/
  end

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)

    if (SL0HW04.SL0HWSMI[SLWIDX01] == "Y"
     && SL0HWD0.SL0HWRTY == "S")
      SL0HM410.SL0HMMIN[SLWIDX01] = SL0HW04.SL0HMMIN[SLWIDX01];
    end
    if (SL0HW04.SL0HWSMA[SLWIDX01] == "Y"
     && SL0HWD0.SL0HWRTY == "S")
      SL0HM410.SL0HMMAX[SLWIDX01] = SL0HW04.SL0HMMAX[SLWIDX01];
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

  if (SLWREC.XXXLOCID == "S4CA")
    set SL0HM410.SL0HMPIN cursor, bold;
    set SL0HM410.SL0HMPAX bold;
  end

  if (SL0HW04.SL0HWIDX >= 0
   && SL0HW04.SL0HWIDX <= SLWREC.SLWLINPP)
    if (SLWREC.XXXLOCID == "SP4A")
      set SL0HM410.SL0HMMIN[SL0HWIDX] cursor, bold;
      set SL0HM410.SL0HMMAX[SL0HWIDX] bold;
    end
    if (SLWREC.XXXLOCID == "SP4B")
      set SL0HM410.SL0HMMIN[SL0HWIDX] cursor, bold;
    end
    if (SLWREC.XXXLOCID == "SP4C")
      set SL0HM410.SL0HMMAX[SL0HWIDX] cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HS4D

// reread current tsq
Function SL0HS4T()
   /* ************************************************************/
   /* *** reread tsq with changes (one line at a time)        ****/
   /* ************************************************************/
  TA5REC.TA5FNCCD = "R"; /* <----- 'a' for add*/
  SL0HS4A(); /* <----- call ta0050*/
  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HS4T

// update current tsq
Function SL0HS4U()
   /* ************************************************************/
   /* *** update tsq with changes (one line at a time)        ****/
   /* ************************************************************/
  TA5REC.TA5FNCCD = "U"; /* <----- 'a' for add*/
  SL0HS4A(); /* <----- call ta0050*/
  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HS4U

// missing input edits
Function SL0HSA0()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: setup defaults for optional fields, if any    ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0HM010.XMSLMSNO > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA0A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM010.XMSLMSNO cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSA0

// key missing input edits
Function SL0HSA1()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0HM110.XXXSTAT > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM110.XXXSTAT cursor, bold;
  end

  if (SL0HM110.SL5LOCTN > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1B";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM110.SL5LOCTN cursor, bold;
  end

  if (SL0HM110.SL4ZONE > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1C";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM110.SL4ZONE cursor, bold;
  end

  if (SL0HM110.XARCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1D";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM110.XARCD cursor, bold;
  end

  if (SL0HM110.XOWCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1E";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM110.XOWCD cursor, bold;
  end

  if (SL0HM110.XPGCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1F";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM110.XPGCD cursor, bold;
  end

  if (SL0HM110.XSACD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1G";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM110.XSACD cursor, bold;
  end

  if (SL0HM110.XSDCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1H";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM110.XSDCD cursor, bold;
  end

  if (SL0HM110.XQACD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1I";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM110.XQACD cursor, bold;
  end

  if (SL0HM110.XDMCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1J";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM110.XDMCD cursor, bold;
  end

  if (SL0HM110.SY2CLRID > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1K";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM110.SY2CLRID cursor, bold;
  end

  if (SL0HM110.SY1STNBR > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1L";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM110.SY1STNBR cursor, bold;
  end

  if (SL0HM110.XGPCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1M";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM110.XGPCD cursor, bold;
  end

  if (SL0HM110.XWHCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1N";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM110.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSA1

// key missing input edits
Function SL0HSA2()

   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: setup defaults for optional fields, if any    ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/


  if (SL0HM210.XGPCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2B";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM210.XGPCD cursor, bold;
  end
  if (SL0HM210.SL7EFFDT > 0)
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2C";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM210.SL7EFFDT cursor, bold;
  end
  if (SL0HM210.XMSLMFNC > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2D";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM210.XMSLMFNC cursor, bold;
  end
  if (SL0HM210.XWHCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2E";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM210.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSA2

// key missing input edits
Function SL0HSA3()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0HM310.XMSLMFNC > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3O";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM310.XMSLMFNC cursor, bold;
    return;
  end

   /* ************************************************************/
   /* *** delete this edit when repro function has the        ****/
   /* *** inactive add/update fixed                           ****/
   /* ************************************************************/

  if (SL0HM310.XMSLMFNC == "R")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2X";
    SLWREC.SLWMSGNO = 0131; /* <--- not valid now msg*/
    set SL0HM310.XMSLMFNC cursor, bold;
    return;
  end

   /* F SL0HM310.XMSLMFNC EQ 'R';*/
   /* IF SL0HM310.SL5LOCTN GT ' ';*/
     /* ; ** next sentence ***/
   /* ELSE ;*/
     /* MOVE 'Y' TO SLWREC.SLWERRSW;*/
     /* MOVE 'SA3A' TO SLWREC.XXXLOCID;*/
   /* VE 0009 TO SLWREC.SLWMSGNO;  <--- missing required field msg*/
     /* SET SL0HM310.SL5LOCTN CURSOR,BRIGHT;*/
   /* END ;*/
   /* ;*/
   /* IF SL0HM310.SL4ZONE GT ' ';*/
     /* ; ** next sentence ***/
   /* ELSE ;*/
     /* MOVE 'Y' TO SLWREC.SLWERRSW;*/
     /* MOVE 'SA3B' TO SLWREC.XXXLOCID;*/
   /* VE 0009 TO SLWREC.SLWMSGNO;  <--- missing required field msg*/
     /* SET SL0HM310.SL4ZONE CURSOR,BRIGHT;*/
   /* END ;*/
   /* ;*/
   /* IF SL0HM310.XARCD GT ' ';*/
     /* ; ** next sentence ***/
   /* ELSE ;*/
     /* MOVE 'Y' TO SLWREC.SLWERRSW;*/
     /* MOVE 'SA3C' TO SLWREC.XXXLOCID;*/
   /* VE 0009 TO SLWREC.SLWMSGNO;  <--- missing required field msg*/
     /* SET SL0HM310.XARCD CURSOR,BRIGHT;*/
   /* END ;*/
   /* ND ;*/

  if (SL0HM310.XOWCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3D";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM310.XOWCD cursor, bold;
  end

  if (SL0HM310.XPGCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3F";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM310.XPGCD cursor, bold;
  end

  if (SL0HM310.XSACD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3G";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM310.XSACD cursor, bold;
  end

  if (SL0HM310.XSDCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3H";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM310.XSDCD cursor, bold;
  end

  if (SL0HM310.XQACD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3I";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM310.XQACD cursor, bold;
  end

  if (SL0HM310.XDMCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3J";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM310.XDMCD cursor, bold;
  end

  if (SL0HM310.SY2CLRID > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3K";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM310.SY2CLRID cursor, bold;
  end

  if (SL0HM310.SY1STNBR > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3L";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM310.SY1STNBR cursor, bold;
  end

  if (SL0HM310.XGPCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3M";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM310.XGPCD cursor, bold;
  end

  if (SL0HM310.SL7EFFDT > 0)
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3N";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM310.SL7EFFDT cursor, bold;
  end

  if (SL0HM310.XWHCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3P";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM310.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSA3

// key missing input edits
Function SL0HSA4()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0HM410.SL5LOCTN > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA4A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM410.SL5LOCTN cursor, bold;
  end

  if (SL0HM410.SL4ZONE > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA4B";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM410.SL4ZONE cursor, bold;
  end

  if (SL0HM410.XARCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA4C";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM410.XARCD cursor, bold;
  end

  if (SL0HM410.XOWCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA4D";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM410.XOWCD cursor, bold;
  end

  if (SL0HM410.XPGCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA4F";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM410.XPGCD cursor, bold;
  end

  if (SL0HM410.XSACD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA4G";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM410.XSACD cursor, bold;
  end

  if (SL0HM410.XSDCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA4H";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM410.XSDCD cursor, bold;
  end

  if (SL0HM410.XQACD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA4I";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM410.XQACD cursor, bold;
  end

  if (SL0HM410.XDMCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA4J";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM410.XDMCD cursor, bold;
  end

  if (SL0HM410.SY2CLRID > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA4K";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM410.SY2CLRID cursor, bold;
  end

  if (SL0HM410.SY1STNBR > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA4L";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM410.SY1STNBR cursor, bold;
  end

  if (SL0HM410.XGPCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA4M";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM410.XGPCD cursor, bold;
  end

  if (SL0HM410.XWHCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA4O";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0HM410.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSA4

// same key edits
Function SL0HSB1()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw.           ****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/


  if (SL0HM110.XWHCD != SL0HW01.XWHCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0HM110.XGPCD != SL0HW01.XGPCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0HM110.SY1STNBR != SL0HW01.SY1STNBR)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0HM110.SY2CLRID != SL0HW01.SY2CLRID)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0HM110.XDMCD != SL0HW01.XDMCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0HM110.XQACD != SL0HW01.XQACD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0HM110.XSDCD != SL0HW01.XSDCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0HM110.XSACD != SL0HW01.XSACD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0HM110.XPGCD != SL0HW01.XPGCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0HM110.XUMCD != SL0HW01.XUMCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0HM110.XOWCD != SL0HW01.XOWCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0HM110.XARCD != SL0HW01.XARCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0HM110.SL4ZONE != SL0HW01.SL4ZONE)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0HM110.SL5LOCTN != SL0HW01.SL5LOCTN)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0HM110.XXXSTAT != SL0HW01.XXXSTAT)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSB1

// same key edits
Function SL0HSB3()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw.           ****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (SL0HM310.XWHCD != SL0HW03.XWHCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0HM310.XMSLMFNC != SL0HW03.XMSLMFNC)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0HM310.XGPCD != SL0HW03.XGPCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0HM310.SY1STNBR != SL0HW03.SY1STNBR)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0HM310.SY2CLRID != SL0HW03.SY2CLRID)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0HM310.XDMCD != SL0HW03.XDMCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0HM310.XQACD != SL0HW03.XQACD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0HM310.XSDCD != SL0HW03.XSDCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0HM310.XSACD != SL0HW03.XSACD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0HM310.XPGCD != SL0HW03.XPGCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0HM310.XUMCD != SL0HW03.XUMCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0HM310.XOWCD != SL0HW03.XOWCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0HM310.XARCD != SL0HW03.XARCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0HM310.SL4ZONE != SL0HW03.SL4ZONE)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0HM310.SL5LOCTN != SL0HW03.SL5LOCTN)
    SLWREC.SLWSKYSW = "N";
    return;
  end


  SLWREC.SLWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSB3

// same key edits
Function SL0HSB4()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw.           ****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (SL0HM410.XWHCD != SL0HW04.XWHCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0HM410.XGPCD != SL0HW04.XGPCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0HM410.SY1STNBR != SL0HW04.SY1STNBR)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0HM410.SY2CLRID != SL0HW04.SY2CLRID)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0HM410.XDMCD != SL0HW04.XDMCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0HM410.XQACD != SL0HW04.XQACD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0HM410.XSDCD != SL0HW04.XSDCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0HM410.XSACD != SL0HW04.XSACD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0HM410.XPGCD != SL0HW04.XPGCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0HM410.XUMCD != SL0HW04.XUMCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0HM410.XOWCD != SL0HW04.XOWCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0HM410.XARCD != SL0HW04.XARCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0HM410.SL4ZONE != SL0HW04.SL4ZONE)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0HM410.SL5LOCTN != SL0HW04.SL5LOCTN)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSB4

// key field edits
Function SL0HSC1()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** if area code in tbl & active: continue              ****/
   /* ************************************************************/
  SLWREC.XWHCD = SL0HM110.XWHCD;
  SLWREC.SLWTBLCD = SL0HM110.XARCD;
  if (SLWREC.SLWTBLKY in XARTBL.XARKEY)
    if (XARTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XARTBL.XARPRCFL[sysVar.arrayIndex] == "Y")
         /* ** next sentence ***/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC1A";
        SLWREC.SLWMSGNO = 0089; /* <--- inactive msg*/
        set SL0HM110.XARCD cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1B";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0HM110.XARCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1C";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0HM110.XARCD cursor, bold;
  end


   /* ************************************************************/
   /* *** if unit of measure(um) code in tbl & active: continue **/
   /* ************************************************************/

   /* ***** the follwing 'IF' added by grant gilray 3/9/88 ******/
  if (SL0HM110.XUMCD != "  ")
    /* *********************************************************/
    if (SL0HM110.XUMCD in XUMTBL.XUMCD)
      if (XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* ** next sentence ***/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC1E";
        SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
        set SL0HM110.XUMCD cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1F";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0HM110.XUMCD cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** if pkg typ (pg) code in tbl & active: continue      ****/
   /* ************************************************************/

  if (SL0HM110.XPGCD in XPGTBL.XPGCD)
    if (XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1G";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0HM110.XPGCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1H";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0HM110.XPGCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if shade code in tbl & active: continue             ****/
   /* ************************************************************/

  if (SL0HM110.XSACD in XSATBL.XSACD)
    if (XSATBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1I";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0HM110.XSACD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1J";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0HM110.XSACD cursor, bold;
  end

   /* ************************************************************/
   /* *** if spec code in tbl & active: continue              ****/
   /* ************************************************************/

  set PC2REC empty; /* clear row storage area*/

  PC2REC.XGPCD = SL0HM110.XGPCD;
  PC2REC.PC2INSEG = SL0HM110.XSDCD;
  call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes};
  if (SQLCA.VAGen_SQLCODE == +0)
    if (PC2REC.XXXSTAT == "A")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1K";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0HM110.XSDCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1L";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0HM110.XSDCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if quality code in tbl & active: continue           ****/
   /* ************************************************************/

  if (SL0HM110.XQACD in XQATBL.XQACD)
    if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1M";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0HM110.XQACD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1N";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0HM110.XQACD cursor, bold;
  end

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (SL0HM110.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0HM110.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      SLWREC.XCTCD = XWHTBL.XCTCD[sysVar.arrayIndex]; /* CANA save country code*/
    else
      SL0HM110.XWHABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1O";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0HM110.XWHCD cursor, bold;
      return;
    end
  else
    SL0HM110.XWHABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1P";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0HM110.XWHCD cursor, bold;
    return;
  end

  if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] == "Y")
     /* ************************************************************/
     /* *** if owner group cd in tbl & active: put abrv. on map ****/
     /* ************************************************************/
    SLWREC.XWHCD = SL0HM110.XWHCD;
    SLWREC.SLWTBLCD = SL0HM110.XOWCD;
    if (SLWREC.SLWTBLKY in XOWTBL.XOWKEY)
      if (XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC1Q";
        SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
        set SL0HM110.XOWCD cursor, bold;
        return; /* <=== ** execption ***/
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1R";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0HM110.XOWCD cursor, bold;
      return;
    end
  else
    if (SL0HM110.XOWCD != "00")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1S";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0HM110.XOWCD cursor, bold;
      return;
    end
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSC1

// key field edits
Function SL0HSC2()

   /* ************************************************************/
   /* *** edit each data field, even if error detected        ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** if gpc in tbl & active: put gpc abrv. on map        ****/
   /* ************************************************************/

  if (SL0HM210.XGPCD in XGPTBL.XGPCD)
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0HM210.XGPABRV = XGPTBL.XGPABRV[sysVar.arrayIndex];
    else
      SL0HM210.XGPABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2A";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0HM210.XGPCD cursor, bold;
    end
  else
    SL0HM210.XGPABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2B";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0HM210.XGPCD cursor, bold;
  end

  set TA2REC empty;

  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";
  TA2REC.TA2GRGAN = SL0HM210.SL7EFFDT;

  call "TA0040" (TA2REC) {isNoRefresh = yes};

  if (TA2REC.TA2RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2C";
    SLWREC.SLWMSGNO = 0021;
    set SL0HM210.SL7EFFDT cursor, bold;
  end

  if (SL0HM210.XMSLMFNC == "R")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2X";
    SLWREC.SLWMSGNO = 0131; /* <--- not valid now msg*/
    set SL0HM210.XMSLMFNC cursor, bold;
    return;
  end

  if (SL0HM210.XMSLMFNC == "A"
   || SL0HM210.XMSLMFNC == "D")
     /* OR SL0HM210.XMSLMFNC EQ 'R';*/
     /* next sentence*/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2D";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0HM210.XMSLMFNC cursor, bold;
  end

  if (SL0HM210.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0HM210.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      SLWREC.XWHOWNGF = XWHTBL.XWHOWNGF[sysVar.arrayIndex];
      SLWREC.XCTCD = XWHTBL.XCTCD[sysVar.arrayIndex]; /* CANA save country code*/
    else
      SL0HM210.XWHABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2E";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0HM210.XWHCD cursor, bold;
    end
  else
    SL0HM210.XWHABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2F";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0HM210.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSC2

// key field edits
Function SL0HSC3()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** check area/zone/location for validity               ****/
   /* ************************************************************/

  if (SL0HM310.XARCD > " ")
    set SL5REC empty;
    SL5REC.XWHCD = SL0HM310.XWHCD;
    SL5REC.XARCD = SL0HM310.XARCD;
    SL5REC.SL4ZONE = SL0HM310.SL4ZONE;
    SL5REC.SL5LOCTN = SL0HM310.SL5LOCTN;

    XSSL5I0(); /* <=== std prod loctn inquiry*/

    if (SQLCA.VAGen_SQLCODE == 0)
       /* ** next sentnece ***/
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC3A";
        SLWREC.SLWMSGNO = 0038; /* <--- not on db msg*/
        set SL0HM310.XARCD cursor, bold;
        set SL0HM310.SL4ZONE bold;
        set SL0HM310.SL5LOCTN bold;
        return;
      end
      if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
        SLWREC.SLWSKYSW = "N";
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC3B";
        SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
        return;
      end
      if (SQLCA.VAGen_SQLCODE == -811)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC3C";
        SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
        return;
      end
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC3D";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
  end

   /* ************************************************************/
   /* *** if unit of measure(um) code in tbl & active: continue **/
   /* ************************************************************/

   /* ***** the followinf if added by Grant Gilray 3/9/88 ******/
  if (SL0HM310.XUMCD != "  ")
    /* ********************************************************/
    if (SL0HM310.XUMCD in XUMTBL.XUMCD)
      if (XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* ** next sentence ***/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC3E";
        SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
        set SL0HM310.XUMCD cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC3E";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0HM310.XUMCD cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** if pkg typ (pg) code in tbl & active: continue      ****/
   /* ************************************************************/

  if (SL0HM310.XPGCD in XPGTBL.XPGCD)
    if (XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC3G";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0HM310.XPGCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC3H";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0HM310.XPGCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if shade code in tbl & active: continue             ****/
   /* ************************************************************/

  if (SL0HM310.XSACD in XSATBL.XSACD)
    if (XSATBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC3I";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0HM310.XSACD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC3J";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0HM310.XSACD cursor, bold;
  end

   /* ************************************************************/
   /* *** if spec code in tbl & active: continue              ****/
   /* ************************************************************/

  set PC2REC empty; /* clear row storage area*/

  PC2REC.XGPCD = SL0HM310.XGPCD;
  PC2REC.PC2INSEG = SL0HM310.XSDCD;
  call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes};
  if (SQLCA.VAGen_SQLCODE == +0)
    if (PC2REC.XXXSTAT == "A")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC3K";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0HM310.XSDCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC3L";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0HM310.XSDCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if quality code in tbl & active: continue           ****/
   /* ************************************************************/

  if (SL0HM310.XQACD in XQATBL.XQACD)
    if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC3M";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0HM310.XQACD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC3N";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0HM310.XQACD cursor, bold;
  end


  set TA2REC empty;

  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";
  TA2REC.TA2GRGAN = SL0HM310.SL7EFFDT;

  call "TA0040" (TA2REC) {isNoRefresh = yes};

  if (TA2REC.TA2RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC3O";
    SLWREC.SLWMSGNO = 0021;
    set SL0HM310.SL7EFFDT cursor, bold;
    return;
  end

  if (SL0HM310.XMSLMFNC == "A")
     /* OR SL0HM310.XMSLMFNC EQ 'R';*/
     /* next sentence*/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC3P";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0HM310.XMSLMFNC cursor, bold;
  end

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (SL0HM310.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0HM310.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      SLWREC.XCTCD = XWHTBL.XCTCD[sysVar.arrayIndex]; /* CANA save country code*/
    else
      SL0HM310.XWHABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC3Q";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0HM310.XWHCD cursor, bold;
      return;
    end
  else
    SL0HM310.XWHABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC3R";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0HM310.XWHCD cursor, bold;
    return;
  end

  if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] == "Y")
     /* ************************************************************/
     /* *** if owner group cd in tbl & active: put abrv. on map ****/
     /* ************************************************************/
    SLWREC.XWHCD = SL0HM310.XWHCD;
    SLWREC.SLWTBLCD = SL0HM310.XOWCD;
    if (SLWREC.SLWTBLKY in XOWTBL.XOWKEY)
      if (XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC3S";
        SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
        set SL0HM310.XOWCD cursor, bold;
        return; /* <=== ** execption ***/
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC3T";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0HM310.XOWCD cursor, bold;
      return;
    end
  else
    if (SL0HM310.XOWCD != "00")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC3U";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0HM310.XOWCD cursor, bold;
      return;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSC3

// key field edits
Function SL0HSC4()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** if area code in tbl & active: continue              ****/
   /* ************************************************************/

  SLWREC.XWHCD = SL0HM410.XWHCD;
  SLWREC.SLWTBLCD = SL0HM410.XARCD;
  if (SLWREC.SLWTBLKY in XARTBL.XARKEY)
    if (XARTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC4A";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0HM410.XARCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC4B";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0HM410.XARCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if pkg typ (pg) code in tbl & active: continue      ****/
   /* ************************************************************/

  if (SL0HM410.XPGCD in XPGTBL.XPGCD)
    if (XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC4E";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0HM410.XPGCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC4F";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0HM410.XPGCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if shade code in tbl & active: continue             ****/
   /* ************************************************************/

  if (SL0HM410.XSACD in XSATBL.XSACD)
    if (XSATBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC4G";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0HM410.XSACD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC4H";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0HM410.XSACD cursor, bold;
  end

   /* ************************************************************/
   /* *** if spec code in tbl & active: continue              ****/
   /* ************************************************************/

  set PC2REC empty; /* clear row storage area*/

  PC2REC.XGPCD = SL0HM410.XGPCD;
  PC2REC.PC2INSEG = SL0HM410.XSDCD;
  call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes};
  if (SQLCA.VAGen_SQLCODE == +0)
    if (PC2REC.XXXSTAT == "A")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC4I";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0HM410.XSDCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC4J";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0HM410.XSDCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if quality code in tbl & active: continue           ****/
   /* ************************************************************/

  if (SL0HM410.XQACD in XQATBL.XQACD)
    if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC4K";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0HM410.XQACD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC4L";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0HM410.XQACD cursor, bold;
  end

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (SL0HM410.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0HM410.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      SLWREC.XCTCD = XWHTBL.XCTCD[sysVar.arrayIndex]; /* CANA save country code*/
    else
      SL0HM410.XWHABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC4M";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0HM410.XWHCD cursor, bold;
      return;
    end
  else
    SL0HM410.XWHABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC4N";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0HM410.XWHCD cursor, bold;
    return;
  end

  if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] == "Y")
     /* ************************************************************/
     /* *** if owner group cd in tbl & active: put abrv. on map ****/
     /* ************************************************************/
    SLWREC.XWHCD = SL0HM410.XWHCD;
    SLWREC.SLWTBLCD = SL0HM410.XOWCD;
    if (SLWREC.SLWTBLKY in XOWTBL.XOWKEY)
      if (XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC4O";
        SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
        set SL0HM410.XOWCD cursor, bold;
        return; /* <=== ** execption ***/
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC4P";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0HM410.XOWCD cursor, bold;
      return;
    end
  else
    if (SL0HM410.XOWCD != "00")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC4Q";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0HM410.XOWCD cursor, bold;
      return;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSC4

// key relational edits
Function SL0HSD1()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/


  set PKNREC empty;
  TA1REC.TA1LOCAT[2] = "SL0HSD1 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;
  PKNREC.XGPCD = SL0HM110.XGPCD;
  PKNREC.SY1STNBR = SL0HM110.SY1STNBR;
  PKNREC.SY2CLRID = SL0HM110.SY2CLRID;
  PKNREC.XDMCD = SL0HM110.XDMCD;

  SL0H460(); /* <----- read PKNREC for validate*/

  if (SQLCA.VAGen_SQLCODE == 0) /* <=== good return*/
    if (SLWREC.XCTCD == "CANA") /* if Canada, then SY2000 was called*/
      if (WSY2000.WSY2000-RETURN-CODE == 02) /* CANA row not found*/
        SLWREC.SLWSKYSW = "N";
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SD1A";
        SLWREC.SLWMSGNO = 0456; /* <--- not on db msg*/
        set SL0HM110.SY1STNBR cursor, bold;
        set SL0HM110.SY2CLRID bold;
        return;
      else
        if (WSY2000.WSY2000-RETURN-CODE == 98) /* CANA database busy*/
          SLWREC.SLWSKYSW = "N";
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SD1B";
          SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
          return;
        end
      end
    end
  end

  if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD1C";
    SLWREC.SLWMSGNO = 0012; /* <--- not on db msg*/
    set SL0HM110.SY1STNBR cursor, bold;
    set SL0HM110.SY2CLRID bold;
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD1D";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0) /* <=== for all other neg sql codes*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD1E";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    SL0HST1(); /* <--- clear screen (empty)*/
    return;
  end


   /* ************************************************************/
   /* *** check zone type for picking - type '10' and '19'    ****/
   /* ************************************************************/


  set SL4REC empty;
  SL4REC.XWHCD = SL0HM110.XWHCD;
  SL4REC.XARCD = SL0HM110.XARCD;
  SL4REC.SL4ZONE = SL0HM110.SL4ZONE;

  XSSL4I0();
                                   /* <----- read sl4rec for validate*/

  if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD1F";
    SLWREC.SLWMSGNO = 0012; /* <--- not on db msg*/
    set SL0HM110.XARCD cursor, bold;
    set SL0HM110.SL4ZONE bold;
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD1G";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0) /* <=== for all other neg sql codes*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD1H";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    SL0HST1(); /* <--- clear screen (empty)*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    if (SL4REC.YZTCD == "10"
     || SL4REC.YZTCD == "19")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD1I";
      SLWREC.SLWMSGNO = 0408; /* <--- invalid zone type*/
      set SL0HM110.SL4ZONE cursor, bold;
      return;
    end
  end


  SL0HM110.SY1SSTNM = PKNREC.SY1SSTNM;
  SL0HM110.SY2CLRAB = PKNREC.SY2CLRAB;
  if (SL0HM110.XUMCD == " ")
    SL0HM110.XUMCD = "01";
  end

   /* ************************************************************/
   /* *** edit each data field, even if error detected        ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if area code in tbl & active: continue              ****/
   /* ************************************************************/
  SLWREC.XWHCD = SL0HM110.XWHCD;
  SLWREC.SLWTBLCD = SL0HM110.XARCD;
  if (SLWREC.SLWTBLKY in XARTBL.XARKEY)
    if (XARTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XARTBL.XARPRCFL[sysVar.arrayIndex] == "Y")
         /* ** next sentence ***/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SD1J";
        SLWREC.SLWMSGNO = 0089; /* <--- inactive msg*/
        set SL0HM110.XARCD cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD1K";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0HM110.XARCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD1L";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0HM110.XARCD cursor, bold;
  end




   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSD1

// key missing input edits
Function SL0HSD2()


   /* ************************************************************/
   /* *** relational edits checked here                       ****/
   /* ************************************************************/

   /* none required*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSD2

// key relational edits
Function SL0HSD3()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

  if (SL0HM310.XMSLMFNC == "A")
    if (SL0HM310.XARCD > " "
     || SL0HM310.SL4ZONE > " "
     || SL0HM310.SL5LOCTN > " ")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD3A";
      SLWREC.SLWMSGNO = 0065;
      set SL0HM310.SL5LOCTN bold;
      set SL0HM310.SL4ZONE bold;
      set SL0HM310.XARCD cursor, bold;
      return;
    else
      return;
    end
  end

  if (SL0HM310.XMSLMFNC == "R")
    if (SL0HM310.XARCD > " "
     && SL0HM310.SL4ZONE > " "
     && SL0HM310.SL5LOCTN > " ")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD3B";
      SLWREC.SLWMSGNO = 0009;
      set SL0HM310.SL5LOCTN bold;
      set SL0HM310.SL4ZONE bold;
      set SL0HM310.XARCD cursor, bold;
      return;
    end
  end

   /* ************************************************************/
   /* *** check zone type for picking - type '10' and '19'    ****/
   /* ************************************************************/


  set SL4REC empty;
  SL4REC.XWHCD = SL0HM310.XWHCD;
  SL4REC.XARCD = SL0HM310.XARCD;
  SL4REC.SL4ZONE = SL0HM310.SL4ZONE;

  XSSL4I0();
                                   /* <----- read sl4rec for validate*/

  if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD3A";
    SLWREC.SLWMSGNO = 0012; /* <--- not on db msg*/
    set SL0HM310.XARCD cursor, bold;
    set SL0HM310.SL4ZONE bold;
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD3B";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0) /* <=== for all other neg sql codes*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD3C";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    if (SL4REC.YZTCD == "10"
     || SL4REC.YZTCD == "19")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD3D";
      SLWREC.SLWMSGNO = 0408; /* <--- invalid zone type*/
      set SL0HM310.SL4ZONE cursor, bold;
      return;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSD3

// key relational edits
Function SL0HSD4()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** check zone type for picking - type '10' and '19'    ****/
   /* ************************************************************/


  set SL4REC empty;
  SL4REC.XWHCD = SL0HM410.XWHCD;
  SL4REC.XARCD = SL0HM410.XARCD;
  SL4REC.SL4ZONE = SL0HM410.SL4ZONE;

  XSSL4I0();
                                   /* <----- read sl4rec for validate*/

  if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD4A";
    SLWREC.SLWMSGNO = 0012; /* <--- not on db msg*/
    set SL0HM410.XARCD cursor, bold;
    set SL0HM410.SL4ZONE bold;
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD4B";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0) /* <=== for all other neg sql codes*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD4C";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    if (SL4REC.YZTCD == "10"
     || SL4REC.YZTCD == "19")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD4D";
      SLWREC.SLWMSGNO = 0408; /* <--- invalid zone type*/
      set SL0HM410.SL4ZONE cursor, bold;
      return;
    end
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSD4

// key obtain table data
Function SL0HSE1()


   /* ************************************************************/
   /* *** make one time table accesses for auxillary and/or   ****/
   /* *** main data                                           ****/
   /* *** read location table (sl5tbl) to insure location     ****/
   /* ***   exists on file                                    ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0HSE1 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  set SL5REC empty;
  SL5REC.XWHCD = SL0HM110.XWHCD;
  SL5REC.XARCD = SL0HM110.XARCD;
  SL5REC.SL4ZONE = SL0HM110.SL4ZONE;
  SL5REC.SL5LOCTN = SL0HM110.SL5LOCTN;

  XSSL5I0(); /* <=== std prod loctn inquiry*/

  if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE1A";
    SLWREC.SLWMSGNO = 0038; /* <--- not on db msg*/
    set SL0HM110.XARCD cursor, bold;
    set SL0HM110.SL4ZONE bold;
    set SL0HM110.SL5LOCTN bold;
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE1B";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -811) /* <=== for any initial db access*/
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "SE1C";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0) /* <=== for all other neg sql codes*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE1E";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    SL0HST1();
    return;
  end
  if (SL5REC.YLTCD == "15"
   || SL5REC.YLTCD == "16"
   || SL5REC.YLTCD == "17"
   || SL5REC.YLTCD == "23"
   || SL5REC.YLTCD == "24")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE1F";
    SLWREC.SLWMSGNO = 168; /* <-- Product assign not valid for loc*/
    set SL0HM110.XARCD cursor, bold;
    set SL0HM110.SL4ZONE bold;
    set SL0HM110.SL5LOCTN bold;
    return;
  end


  TA1REC.TA1LOCAT[2] = "SL0HSE1 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;
  set SYPREC empty; /* <----- clear syprec*/
  SYPREC.XGPCD = SL0HM110.XGPCD;
  SYPREC.SY1STNBR = SL0HM110.SY1STNBR;
  SYPREC.SY2CLRID = SL0HM110.SY2CLRID; /* ** setup for size table ***/
  SYPREC.XDMCD = SL0HM110.XDMCD;
  SYPREC.XQACD = SL0HM110.XQACD;

  SL0HS1A(); /* <---- call sy1120 for size desc xlate*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= 40)
    SL0HM110.SY4IDDSC[SLWIDX01] = SYPREC.SY4IDDSC[SLWIDX01];
    if (SYPREC.SY4IDDSC[SLWIDX01] > " ")
      /* next sentence*/
    else
      set SL0HM110.SY4IDDSC[SLWIDX01] skip;
      set SL0HM110.XMSLMFNC[SLWIDX01] skip;
      set SL0HM110.SL7EFFDT[SLWIDX01] skip;
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** make one time table accesses for auxillary and/or   ****/
   /* *** main data                                           ****/
   /* *** read set product location assignment table (sl7rec) ****/
   /* ***   to retrieve effective dates and sy5szid's for map ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0HSE1 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  set SL7REC empty;
  SL7REC.XWHCD = SL0HM110.XWHCD;
  SL7REC.XARCD = SL0HM110.XARCD;
  SL7REC.SL4ZONE = SL0HM110.SL4ZONE;
  SL7REC.XXXSTAT = SL0HM110.XXXSTAT;
  SL7REC.SL5LOCTN = SL0HM110.SL5LOCTN;
  SL7REC.XGPCD = SL0HM110.XGPCD;
  SL7REC.SY1STNBR = SL0HM110.SY1STNBR;
  SL7REC.SY2CLRID = SL0HM110.SY2CLRID;
  SL7REC.XDMCD = SL0HM110.XDMCD;
  SL7REC.XQACD = SL0HM110.XQACD;
  SL7REC.XOWCD = SL0HM110.XOWCD;
  SL7REC.XSDCD = SL0HM110.XSDCD;
  SL7REC.XSACD = SL0HM110.XSACD;
  SL7REC.XPGCD = SL0HM110.XPGCD;
  SL7REC.XUMCD = SL0HM110.XUMCD;

  XSSL7S4(); /* <=== std prod assgn set inquiry*/

  if (SQLCA.VAGen_SQLCODE == +100
   || SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWSKYSW = "N";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SE1G";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE != 0)
      SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
      SLWREC.XXXLOCID = "SE1H";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      SL0HST1();
      return;
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0) /* ** sl7tbl set found ***/

    while (SQLCA.VAGen_SQLCODE == 0)
      SL0HW01.SL0HWNDX = SL7REC.SY5SZID;
      SL0HW01.ZZZCHGCT[SL0HWNDX] = SL7REC.ZZZCHGCT;

      set TA2REC empty;

      TA2REC.TA2DTOPT = "GREGGREG";
      TA2REC.TA2GRTYP = "G";
      TA2REC.TA2GRGGN = SL7REC.SL7EFFDT;

      call "TA0040" (TA2REC) {isNoRefresh = yes};

      if (TA2REC.TA2RTNCD == 0)
        SL0HM110.SL7EFFDT[SL0HWNDX] = TA2REC.TA2GRGA;
      end

      XSSL7F4(); /* ;       <----- fetch next sl7rec*/
      if (SQLCA.VAGen_SQLCODE == 0
       || SQLCA.VAGen_SQLCODE == +100)
         /* ** next sentence ***/
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          SLWREC.SLWERRSW = "Y";
          SLWREC.SLWSKYSW = "N";
          SLWREC.XXXLOCID = "SE1I";
          SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
          return;
        end
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SE1J";
        SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
        return;
      end
    end
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSE1

// key obtain table data
Function SL0HSE3()


   /* ************************************************************/
   /* *** make one time table accesses for auxillary and/or   ****/
   /* *** main data                                           ****/
   /* *** note: first time executions before beginning a loop ****/
   /* ***       might also be performed                       ****/
   /* ************************************************************/


  set PKNREC empty;
  TA1REC.TA1LOCAT[2] = "SL0HSE3 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;
  PKNREC.XGPCD = SL0HM310.XGPCD;
  PKNREC.SY1STNBR = SL0HM310.SY1STNBR;
  PKNREC.SY2CLRID = SL0HM310.SY2CLRID;
  PKNREC.XDMCD = SL0HM310.XDMCD;
  SL0H460();
                                   /* <----- read PKNREC for validate*/

  if (SQLCA.VAGen_SQLCODE == 0) /* <=== good return*/
    if (SLWREC.XCTCD == "CANA") /* if Canada, then SY2000 was called*/
      if (WSY2000.WSY2000-RETURN-CODE == 02) /* CANA row not found*/
        SLWREC.SLWSKYSW = "N";
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SE3A";
        SLWREC.SLWMSGNO = 0012; /* <--- not on db msg*/
        set SL0HM310.SY1STNBR cursor, bold;
        set SL0HM310.SY2CLRID bold;
        return;
      else
        if (WSY2000.WSY2000-RETURN-CODE == 98) /* CANA database busy*/
          SLWREC.SLWSKYSW = "N";
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SE3B";
          SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
          return;
        end
      end
    end
  end

  if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE3C";
    SLWREC.SLWMSGNO = 0012; /* <--- not on db msg*/
    set SL0HM310.SY1STNBR cursor, bold;
    set SL0HM310.SY2CLRID bold;
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE3D";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0) /* <=== for all other neg sql codes*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE3E";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    SL0HST3(); /* <--- clear screen (empty)*/
    return;
  end


  SL0HM310.SY1SSTNM = PKNREC.SY1SSTNM;
  SL0HM310.SY2CLRAB = PKNREC.SY2CLRAB;
  if (SL0HM310.XUMCD == " ")
    SL0HM310.XUMCD = "01";
  end

  set SL7REC empty;
  if (SL0HM310.XMSLMFNC == "R")
    TA1REC.TA1LOCAT[2] = "SL0HSE3 ";
    TA1REC.TA1MAP = SLWREC.SLWTAMAP;
    SL7REC.XWHCD = SL0HM310.XWHCD;
    SL7REC.XARCD = SL0HM310.XARCD;
    SL7REC.SL4ZONE = SL0HM310.SL4ZONE;
    SL7REC.SL5LOCTN = SL0HM310.SL5LOCTN;
    SL7REC.XGPCD = SL0HM310.XGPCD;
    SL7REC.SY1STNBR = SL0HM310.SY1STNBR;
    SL7REC.SY2CLRID = SL0HM310.SY2CLRID;
    SL7REC.XDMCD = SL0HM310.XDMCD;
    SL7REC.XQACD = SL0HM310.XQACD;
    SL7REC.XOWCD = SL0HM310.XOWCD;
    SL7REC.XSDCD = SL0HM310.XSDCD;
    SL7REC.XSACD = SL0HM310.XSACD;
    SL7REC.XPGCD = SL0HM310.XPGCD;
    SL7REC.XUMCD = SL0HM310.XUMCD;
    SL7REC.XXXSTAT = "A";

    XSSL7S4(); /* <=== select set for inquiry*/

    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SE3F";
      SLWREC.SLWMSGNO = 0086; /* <--- not on db msg*/
      set SL0HM310.SY1STNBR cursor, bold;
      set SL0HM310.SY2CLRID bold;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWSKYSW = "N";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SE3G";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE != 0)
      SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
      SLWREC.XXXLOCID = "SE3H";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      SL0HST3();
      return;
    end



     /* ************************************************************/
     /* *** set up key to read size table. no compress          ****/
     /* ************************************************************/

    set SYPREC empty; /* <----- clear syprec*/
    SYPREC.XGPCD = SL0HM310.XGPCD;
    SYPREC.SY1STNBR = SL0HM310.SY1STNBR;
    SYPREC.SY2CLRID = SL0HM310.SY2CLRID; /* ** get size table ***/
    SYPREC.XDMCD = SL0HM310.XDMCD;
    SYPREC.XQACD = SL0HM310.XQACD;


    SL0HS1A(); /* <---- call sy1190 for size desc xlate*/

    if (SLWREC.SLWERRSW == "Y")
      return;
    end

    while (SQLCA.VAGen_SQLCODE == 0)
      SL0HW01.SL0HWNDX = SL7REC.SY5SZID;
      SL0HM310.SY4IDDSC[SL0HWNDX] = SYPREC.SY4IDDSC[SL0HWNDX];
      XSSL7F4(); /* ;       <----- fetch next sl7rec*/
      if (SLWREC.SLWERRSW == "Y")
        return;
      end
    end
  end

  if (SL0HM310.XMSLMFNC == "A")
    set SYPREC empty; /* <----- clear syprec*/
    SYPREC.XGPCD = SL0HM310.XGPCD;
    SYPREC.SY1STNBR = SL0HM310.SY1STNBR;
    SYPREC.SY2CLRID = SL0HM310.SY2CLRID; /* ** get size table ***/
    SYPREC.XDMCD = SL0HM310.XDMCD;
    SYPREC.XQACD = SL0HM310.XQACD;

    SL0HS1A(); /* <---- call sy1190 for size desc xlate*/

    if (SLWREC.SLWERRSW == "Y")
      return;
    end

    SLWREC.SLWIDX01 = 1; /* <----- map index*/
    while (SLWREC.SLWIDX01 <= 39)
      SL0HM310.SY4IDDSC[SLWIDX01] = SYPREC.SY4IDDSC[SLWIDX01];
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
    end
  end

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= 39)
    if (SL0HM310.SY4IDDSC[SLWIDX01] > " ")
      /* next sentence*/
    else
      set SL0HM310.SY4IDDSC[SLWIDX01] skip;
      set SL0HM310.SL0HMTOA[SLWIDX01] skip;
      set SL0HM310.SL0HMTOZ[SLWIDX01] skip;
      set SL0HM310.SL0HMTOL[SLWIDX01] skip;
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSE3

// key obtain table data
Function SL0HSE4()


   /* ************************************************************/
   /* *** make one time table accesses for auxillary and/or   ****/
   /* *** main data                                           ****/
   /* *** read set product location assignment table (sl7rec) ****/
   /* ***   to retrieve effective dates and sy5szid's for map ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** validate map key against PKNrec                     ****/
   /* *** if no unit of measure on map                        ****/
   /* ***    move unit of measure from PKNrec to map          ****/
   /* ************************************************************/

  set PKNREC empty;
  PKNREC.XGPCD = SL0HM410.XGPCD;
  PKNREC.SY1STNBR = SL0HM410.SY1STNBR;
  PKNREC.SY2CLRID = SL0HM410.SY2CLRID;
  PKNREC.XDMCD = SL0HM410.XDMCD;
  TA1REC.TA1LOCAT[2] = "SL0HSE4 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  SL0H460();
                                   /* <----- read PKNREC for validate*/

  if (SQLCA.VAGen_SQLCODE == 0) /* <=== good return*/
    if (SLWREC.XCTCD == "CANA") /* if Canada, then SY2000 was called*/
      if (WSY2000.WSY2000-RETURN-CODE == 02) /* CANA row not found*/
        SLWREC.SLWSKYSW = "N";
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SE4A";
        SLWREC.SLWMSGNO = 0012; /* <--- not on db msg*/
        set SL0HM410.SY1STNBR cursor, bold;
        set SL0HM410.SY2CLRID bold;
        return;
      else
        if (WSY2000.WSY2000-RETURN-CODE == 98) /* CANA database busy*/
          SLWREC.SLWSKYSW = "N";
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SE4B";
          SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
          return;
        end
      end
    end
  end


  if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE4C";
    SLWREC.SLWMSGNO = 0012; /* <--- not on db msg*/
    set SL0HM410.SY1STNBR cursor, bold;
    set SL0HM410.SY2CLRID bold;
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE4D";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0) /* <=== for all other neg sql codes*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE4E";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    SL0HSQ4(); /* <--- clear screen (clear)*/
    return;
  end


  SL0HM410.SY1SSTNM = PKNREC.SY1SSTNM;
  SL0HM410.SY2CLRAB = PKNREC.SY2CLRAB;
  if (SL0HM410.XUMCD == " ")
    SL0HM410.XUMCD = "01";
  end

   /* ************************************************************/
   /* *** move map key to sl7rec to prepare for select set    ****/
   /* ************************************************************/

  set SL7REC empty;
  SL7REC.XWHCD = SL0HM410.XWHCD;
  SL7REC.XARCD = SL0HM410.XARCD;
  SL7REC.SL4ZONE = SL0HM410.SL4ZONE;
  SL7REC.SL5LOCTN = SL0HM410.SL5LOCTN;
  SL7REC.XGPCD = SL0HM410.XGPCD;
  SL7REC.SY1STNBR = SL0HM410.SY1STNBR;
  SL7REC.SY2CLRID = SL0HM410.SY2CLRID;
  SL7REC.XDMCD = SL0HM410.XDMCD;
  SL7REC.XQACD = SL0HM410.XQACD;
  SL7REC.XOWCD = SL0HM410.XOWCD;
  SL7REC.XSDCD = SL0HM410.XSDCD;
  SL7REC.XSACD = SL0HM410.XSACD;
  SL7REC.XPGCD = SL0HM410.XPGCD;
  SL7REC.XUMCD = SL0HM410.XUMCD;
  SL7REC.XXXSTAT = "A";
  TA1REC.TA1LOCAT[2] = "SL0HSE4 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL7S4(); /* <=== std prod assgn set inquiry*/

  if (SQLCA.VAGen_SQLCODE == +100)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE4F";
    SLWREC.SLWMSGNO = 0086; /* <--- not on db msg*/
    set SL0HM410.SY1STNBR cursor, bold;
    set SL0HM410.SY2CLRID bold;
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE4G";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0)
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "SE4H";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    SL0HSQ4(); /* <=== reset screen (clear)*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE == 0) /* ** sl7tbl set found ***/
    set SYPREC empty; /* <----- clear syprec*/
    SYPREC.XGPCD = SL0HM410.XGPCD;
    SYPREC.SY1STNBR = SL0HM410.SY1STNBR; /* **   set up to    ***/
    SYPREC.SY2CLRID = SL0HM410.SY2CLRID; /* ** get size table ***/
    SYPREC.XDMCD = SL0HM410.XDMCD;
    SYPREC.XQACD = SL0HM410.XQACD;
    SL0HS1A(); /* <--- call sy1190 (no compress)*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end

    XSSLSPQ(); /* <-- purge tsqs*/

    /* **********************************************************/
    /* *     load all sl7rec sizes to sum tsq                  **/
    /* **********************************************************/
    SLWREC.SLWIDX01 = 1; /* <----- size table index*/
    SLWREC.SLWSEXSW = "N";
    while (SQLCA.VAGen_SQLCODE == 0)
      SLWREC.SLWIDX02 = SL7REC.SY5SZID;
      SL0HWB4.SY5SZID = SL7REC.SY5SZID;
      SL0HWB4.SY4IDDSC = SYPREC.SY4IDDSC[SLWIDX02];
      SL0HWB4.SL7MINSS = SL7REC.SL7MINSS;
      SL0HWB4.SL7MAXSS = SL7REC.SL7MAXSS;
      SL0HWB4.ZZZCHGCT = SL7REC.ZZZCHGCT;
      SL0HWD0.SL0HWRTY[SLWIDX01] = "S";
      SL0HWD0.SL0HWDTA[SLWIDX01] = SL0HWB4.SL0HWRC4;
      if (SLWREC.SLWIDX01 == 14)
        TA5REC.TA5FNCCD = "A"; /* <----- 'a' for add*/
        SL0HS4B(); /* <----- call ta0050*/
        if (SLWREC.SLWERRSW == "Y")
          return;
        end
        SLWREC.SLWIDX01 = 0;
      end
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
      XSSL7F4(); /* <----- fetch next sl7rec*/
      if (SLWREC.SLWERRSW == "Y")
        return;
      end
    end
  end

   /* ************************************************************/
   /* *** check to see if last tsq record was written         ****/
   /* *** fill in extra lines with blanks ( 'b' in sl0hwlth)  ****/
   /* ************************************************************/

  while (SLWREC.SLWIDX01 <= 14
   && SLWREC.SLWIDX01 > 1)
    SL0HWD0.SL0HWRTY[SLWIDX01] = "B";
    if (SLWREC.SLWIDX01 == 14)
      set TA5REC empty;
      TA5REC.TA5FNCCD = "A"; /* <----- 'a' for add*/
      SL0HS4B(); /* <--- call ta0050*/
      if (SLWREC.SLWERRSW == "Y")
        return;
      end
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end
  SLWREC.SLWSMAXR = TA5REC.TA5TSQIX;

   /* ************************************************************/
   /* *** display screen                                      ****/
   /* ************************************************************/

  set TA5REC empty;
  SLWREC.SLWSUMIX = 1;
  TA5REC.TA5FNCCD = "R"; /* <----- 'a' for add*/
  SL0HS4B(); /* <--- call ta0050*/
  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0HW04.XWHCD = SL7REC.XWHCD;
  SL0HW04.XARCD = SL7REC.XARCD;
  SL0HW04.SL4ZONE = SL7REC.SL4ZONE;
  SL0HW04.SL5LOCTN = SL7REC.SL5LOCTN;
  SL0HW04.XGPCD = SL7REC.XGPCD;
  SL0HW04.SY1STNBR = SL7REC.SY1STNBR;
  SL0HW04.SY2CLRID = SL7REC.SY2CLRID;
  SL0HW04.XDMCD = SL7REC.XDMCD;
  SL0HW04.XQACD = SL7REC.XQACD;
  SL0HW04.XOWCD = SL7REC.XOWCD;
  SL0HW04.XSDCD = SL7REC.XSDCD;
  SL0HW04.XSACD = SL7REC.XSACD;
  SL0HW04.XPGCD = SL7REC.XPGCD;
  SL0HW04.XUMCD = SL7REC.XUMCD;
  SL0HSQ4(); /* <=== reset screen (clear)*/
  SL0HSO4(); /* <--- move rec from tsq to map*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSE4

// save current key value(s)
Function SL0HSF1()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  COMMAREA.XWHCD = SL0HM110.XWHCD;
  SL0HW01.XWHCD = SL0HM110.XWHCD;
  SL0HW01.SY1STNBR = SL0HM110.SY1STNBR;
  SL0HW01.SY2CLRID = SL0HM110.SY2CLRID;
  SL0HW01.XGPCD = SL0HM110.XGPCD;
  SL0HW01.XDMCD = SL0HM110.XDMCD;
  SL0HW01.XQACD = SL0HM110.XQACD;
  SL0HW01.XSDCD = SL0HM110.XSDCD;
  SL0HW01.XSACD = SL0HM110.XSACD;
  SL0HW01.XPGCD = SL0HM110.XPGCD;
  SL0HW01.XUMCD = SL0HM110.XUMCD;
  SL0HW01.XOWCD = SL0HM110.XOWCD;
  SL0HW01.XARCD = SL0HM110.XARCD;
  SL0HW01.SL4ZONE = SL0HM110.SL4ZONE;
  SL0HW01.SL5LOCTN = SL0HM110.SL5LOCTN;
  SL0HW01.XXXSTAT = SL0HM110.XXXSTAT;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSF1

// save current key value(s)
Function SL0HSF2()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  COMMAREA.XWHCD = SL0HM210.XWHCD;
  SL0HW02.XWHCD = SL0HM210.XWHCD;

  SL0HW02.XMSLMFNC = SL0HM210.XMSLMFNC;
  SL0HW02.SL7EFFDT = SL0HM210.SL7EFFDT;
  SL0HW02.XGPCD = SL0HM210.XGPCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSF2

// save current key value(s)
Function SL0HSF3()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  COMMAREA.XWHCD = SL0HM310.XWHCD;

  SL0HW03.XWHCD = SL0HM310.XWHCD;
  SL0HW03.XMSLMFNC = SL0HM310.XMSLMFNC;
  SL0HW03.SL7EFFDT = SL0HM310.SL7EFFDT;
  SL0HW03.SY1STNBR = SL0HM310.SY1STNBR;
  SL0HW03.SY2CLRID = SL0HM310.SY2CLRID;
  SL0HW03.XGPCD = SL0HM310.XGPCD;
  SL0HW03.XDMCD = SL0HM310.XDMCD;
  SL0HW03.XQACD = SL0HM310.XQACD;
  SL0HW03.XSDCD = SL0HM310.XSDCD;
  SL0HW03.XSACD = SL0HM310.XSACD;
  SL0HW03.XPGCD = SL0HM310.XPGCD;
  SL0HW03.XUMCD = SL0HM310.XUMCD;
  SL0HW03.XOWCD = SL0HM310.XOWCD;
  SL0HW03.XARCD = SL0HM310.XARCD;
  SL0HW03.SL4ZONE = SL0HM310.SL4ZONE;
  SL0HW03.SL5LOCTN = SL0HM310.SL5LOCTN;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSF3

// save current key value(s)
Function SL0HSF4()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  COMMAREA.XWHCD = SL0HM410.XWHCD;

  SL0HW04.XWHCD = SL0HM410.XWHCD;
  SL0HW04.XWHABRV = SL0HM410.XWHABRV;
  SL0HW04.SY1STNBR = SL0HM410.SY1STNBR;
  SL0HW04.SY2CLRID = SL0HM410.SY2CLRID;
  SL0HW04.XGPCD = SL0HM410.XGPCD;
  SL0HW04.XDMCD = SL0HM410.XDMCD;
  SL0HW04.SY1SSTNM = SL0HM410.SY1SSTNM;
  SL0HW04.SY2CLRAB = SL0HM410.SY2CLRAB;
  SL0HW04.XQACD = SL0HM410.XQACD;
  SL0HW04.XSDCD = SL0HM410.XSDCD;
  SL0HW04.XSACD = SL0HM410.XSACD;
  SL0HW04.XPGCD = SL0HM410.XPGCD;
  SL0HW04.XUMCD = SL0HM410.XUMCD;
  SL0HW04.XOWCD = SL0HM410.XOWCD;
  SL0HW04.XARCD = SL0HM410.XARCD;
  SL0HW04.SL4ZONE = SL0HM410.SL4ZONE;
  SL0HW04.SL5LOCTN = SL0HM410.SL5LOCTN;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSF4

// setup map key fields
Function SL0HSG1()


   /* ************************************************************/
   /* *** use current ws values in the corresponding map flds ****/
   /* ************************************************************/

  SL0HM110.XWHCD = SL0HW01.XWHCD;
  SL0HM110.SY1STNBR = SL0HW01.SY1STNBR;
  SL0HM110.SY2CLRID = SL0HW01.SY2CLRID;
  SL0HM110.XGPCD = SL0HW01.XGPCD;
  SL0HM110.XDMCD = SL0HW01.XDMCD;
  SL0HM110.XQACD = SL0HW01.XQACD;
  SL0HM110.XSDCD = SL0HW01.XSDCD;
  SL0HM110.XSACD = SL0HW01.XSACD;
  SL0HM110.XPGCD = SL0HW01.XPGCD;
  SL0HM110.XUMCD = SL0HW01.XUMCD;
  SL0HM110.XOWCD = SL0HW01.XOWCD;
  SL0HM110.XARCD = SL0HW01.XARCD;
  SL0HM110.SL4ZONE = SL0HW01.SL4ZONE;
  SL0HM110.SL5LOCTN = SL0HW01.SL5LOCTN;
  SL0HM110.XXXSTAT = SL0HW01.XXXSTAT;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSG1

// setup map key fields
Function SL0HSG2()


   /* ************************************************************/
   /* *** use current ws values in the corresponding map flds ****/
   /* ************************************************************/

  SL0HM210.XWHCD = SL0HW02.XWHCD;
  SL0HM210.XMSLMFNC = SL0HW02.XMSLMFNC;
  SL0HM210.SL7EFFDT = SL0HW02.SL7EFFDT;
  SL0HM210.XGPCD = SL0HW02.XGPCD;

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= 16)
    SL0HM210.SY2CLRID[SLWIDX01] = "00 ";
    SL0HM210.XDMCD[SLWIDX01] = "00";
    SL0HM210.XQACD[SLWIDX01] = "01";
    SL0HM210.XSDCD[SLWIDX01] = "000";
    SL0HM210.XSACD[SLWIDX01] = "000";
    SL0HM210.XPGCD[SLWIDX01] = "00";
    SL0HM210.XUMCD[SLWIDX01] = "01";
    SL0HM210.XOWCD[SLWIDX01] = "00";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSG2

// setup map key fields
Function SL0HSG3()


   /* ************************************************************/
   /* *** use current ws values in the corresponding map flds ****/
   /* ************************************************************/

  SL0HM310.XWHCD = SL0HW03.XWHCD;
  SL0HM310.XMSLMFNC = SL0HW03.XMSLMFNC;
  SL0HM310.SL7EFFDT = SL0HW03.SL7EFFDT;
  SL0HM310.SY1STNBR = SL0HW03.SY1STNBR;
  SL0HM310.SY2CLRID = SL0HW03.SY2CLRID;
  SL0HM310.XGPCD = SL0HW03.XGPCD;
  SL0HM310.XDMCD = SL0HW03.XDMCD;
  SL0HM310.XQACD = SL0HW03.XQACD;
  SL0HM310.XSDCD = SL0HW03.XSDCD;
  SL0HM310.XSACD = SL0HW03.XSACD;
  SL0HM310.XPGCD = SL0HW03.XPGCD;
  SL0HM310.XUMCD = SL0HW03.XUMCD;
  SL0HM310.XOWCD = SL0HW03.XOWCD;
  SL0HM310.XARCD = SL0HW03.XARCD;
  SL0HM310.SL4ZONE = SL0HW03.SL4ZONE;
  SL0HM310.SL5LOCTN = SL0HW03.SL5LOCTN;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSG3

// setup map key fields
Function SL0HSG4()


   /* ************************************************************/
   /* *** use current ws values in the corresponding map flds ****/
   /* ************************************************************/

  SL0HM410.XWHCD = SL0HW04.XWHCD;
  SL0HM410.SY1STNBR = SL0HW04.SY1STNBR;
  SL0HM410.SY2CLRID = SL0HW04.SY2CLRID;
  SL0HM410.XGPCD = SL0HW04.XGPCD;
  SL0HM410.XDMCD = SL0HW04.XDMCD;
  SL0HM410.XQACD = SL0HW04.XQACD;
  SL0HM410.XSDCD = SL0HW04.XSDCD;
  SL0HM410.XSACD = SL0HW04.XSACD;
  SL0HM410.XPGCD = SL0HW04.XPGCD;
  SL0HM410.XUMCD = SL0HW04.XUMCD;
  SL0HM410.XOWCD = SL0HW04.XOWCD;
  SL0HM410.XARCD = SL0HW04.XARCD;
  SL0HM410.SL4ZONE = SL0HW04.SL4ZONE;
  SL0HM410.SL5LOCTN = SL0HW04.SL5LOCTN;

  if (SLWREC.SLWERRSW == "N")
    SL0HM410.XWHABRV = SL0HW04.XWHABRV;
    SL0HM410.SY1SSTNM = SL0HW04.SY1SSTNM;
    SL0HM410.SY2CLRAB = SL0HW04.SY2CLRAB;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSG4

// ENTER processing
Function SL0HSH0()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0HSA0(); /* <=== missing input edits*/

   /* ************************************************************/
   /* *** no missing fields:                                  ****/
   /* *** invalid selection detected in flow when             ****/
   /* *** transfer of control is attempted                    ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSH0

// ENTER processing
Function SL0HSH1()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0HSA1(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no missing fields: edit individual fields           ****/
   /* ************************************************************/

  SL0HSC1(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0HSD1(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses & setup map ****/
   /* ************************************************************/

  SL0HSE1(); /* <=== obtain table data*/

  if (SLWREC.SLWERRSW == "Y")
    SL0HSF1(); /* <=== save current key value(s)*/
    SL0HST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s)                        ****/
   /* ************************************************************/

  SL0HSF1(); /* <=== save current key value(s)*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSH1

// ENTER processing
Function SL0HSH2()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0HSA2(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no missing fields: edit individual fields           ****/
   /* ************************************************************/

  SL0HSC2(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0HSD2(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    SL0HSF2(); /* <=== save current key value(s)*/
    SL0HST2(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s)                        ****/
   /* ************************************************************/

  SL0HSF2(); /* <=== save current key value(s)*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0HSH2

// ENTER processing
Function SL0HSH3()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0HSA3(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no missing fields: edit individual fields           ****/
   /* ************************************************************/

  SL0HSC3(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0HSD3(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses & setup map ****/
   /* ************************************************************/

  SL0HSE3(); /* <=== obtain table data*/

  if (SLWREC.SLWERRSW == "Y")
    SL0HSF3(); /* <=== save current key value(s)*/
    SL0HST3(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s)                        ****/
   /* ************************************************************/

  SL0HSF3(); /* <=== save current key value(s)*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSH3

// ENTER processing
Function SL0HSH4()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0HSA4(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no missing fields: edit individual fields           ****/
   /* ************************************************************/

  SL0HSC4(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0HSD4(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses & setup map ****/
   /* ************************************************************/

  SL0HSE4(); /* <=== obtain table data*/

  if (SLWREC.SLWERRSW == "Y")
    SL0HSF4(); /* <=== save current key value(s)*/
    SL0HSQ4(); /* <=== reset screen (clear)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s)                        ****/
   /* ************************************************************/

  SL0HSF4(); /* <=== save current key value(s)*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSH4

// PF7 processing
Function SL0HSJ4()


   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: IN0XWSKS=N; if fields changed (keys different)****/
   /* ************************************************************/

  SL0HSA4(); /* <=== missing input edits*/
  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0HSB4(); /* <=== same key edits*/
  if (SLWREC.SLWSKYSW == "N")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SJ4A";
    SLWREC.SLWMSGNO = 0006; /* <--- changes not allowed msg*/
    return;
  end

  SLWREC.SLWSEXSW = "N";
  SLWREC.SLWIDX03 = 1;
  while (SLWREC.SLWIDX03 <= SLWREC.SLWLINPP)
    if (SL0HW04.SL0HWSMI[SLWIDX03] == "Y"
     || SL0HW04.SL0HWSMA[SLWIDX03] == "Y")
      SLWREC.SLWSEXSW = "Y";
    end
    SLWREC.SLWIDX03 = SLWREC.SLWIDX03 + 1;
  end

  if (SLWREC.SLWSEXSW == "Y")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SJ4B";
    SLWREC.SLWMSGNO = 0104; /* <--- cannot scroll msg*/
    return;
  end


   /* ************************************************************/
   /* *** decrement the last relative record number           ****/
   /* *** and setup the new page depending on last PFkey      ****/
   /* *** note: last pfkey used can not be blank at this point****/
   /* ************************************************************/

  if (SLWREC.SLWSUMIX == 1)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SJ4C";
    SLWREC.SLWMSGNO = 0007; /* <--- top of data*/
  else
    SLWREC.SLWSUMIX = SLWREC.SLWSUMIX - 1;
    TA5REC.TA5TSQIX = SLWREC.SLWSUMIX;
    TA5REC.TA5APPID = SLWREC.SLWSUMQU;
    TA5REC.TA5FNCCD = "R";
    call "TA0050" (SL0HWD0, TA5REC) {isNoRefresh = yes};
    if (TA5REC.TA5RTNCD != 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SJ4D";
      SLWREC.SLWMSGNO = 0001;
      return;
    end
    SL0HSO4(); /* <=== setup left sum scrn*/
  end

  if (SLWREC.SLWERRSW == "N")
    SLWREC.XXXLOCID = "SJ4E";
    SLWREC.SLWMSGNO = 0014; /* <== scroll backward successful*/

    if (SL0HW04.SL0HWSIN == "Y")
      SL0HM410.SL0HMPIN = SL0HW04.SL0HMPIN; /* <== save product min*/
      SL0HW04.SL0HWPMI = "Y"; /* <== product min switch*/
      SL0HW04.SL0HWSIN = "N"; /* <== save prod min switch*/
    end

    if (SL0HW04.SL0HWSAX == "Y")
      SL0HM410.SL0HMPAX = SL0HW04.SL0HMPAX; /* <== save product max*/
      SL0HW04.SL0HWPMA = "Y"; /* <== product max switch*/
      SL0HW04.SL0HWSAX = "N"; /* <== save prod max switch*/
    end
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0HSJ4

// PF8 processing
Function SL0HSK4()


   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: IN0XWSKS=N; if fields changed (keys different)****/
   /* ************************************************************/

  SL0HSA4(); /* <=== missing input edits*/
  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0HSB4(); /* <=== same key edits*/
  if (SLWREC.SLWSKYSW == "N")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SK4A";
    SLWREC.SLWMSGNO = 0006; /* <--- changes not allowed msg*/
    return;
  end

  SLWREC.SLWSEXSW = "N";
  SLWREC.SLWIDX03 = 1;
  while (SLWREC.SLWIDX03 <= SLWREC.SLWLINPP)
    if (SL0HW04.SL0HWSMI[SLWIDX03] == "Y" /* <-- min modified*/
     || SL0HW04.SL0HWSMA[SLWIDX03] == "Y") /* <-- max modified*/
      SLWREC.SLWSEXSW = "Y";
    end
    SLWREC.SLWIDX03 = SLWREC.SLWIDX03 + 1;
  end

  if (SLWREC.SLWSEXSW == "Y")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SK4B";
    SLWREC.SLWMSGNO = 0104; /* <--- cannot scroll msg*/
    return;
  end


   /* ************************************************************/
   /* *** decrement the last relative record number           ****/
   /* *** and setup the new page depending on last PFkey      ****/
   /* *** note: last pfkey used can not be blank at this point****/
   /* ************************************************************/

  if (SLWREC.SLWSUMIX == SLWREC.SLWSMAXR)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SK4C";
    SLWREC.SLWMSGNO = 0008; /* <--- bottom of data*/
  else
    SLWREC.SLWSUMIX = SLWREC.SLWSUMIX + 1;
    TA5REC.TA5TSQIX = SLWREC.SLWSUMIX;
    TA5REC.TA5APPID = SLWREC.SLWSUMQU;
    TA5REC.TA5FNCCD = "R";
    call "TA0050" (SL0HWD0, TA5REC) {isNoRefresh = yes};
    if (TA5REC.TA5RTNCD != 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SK4D";
      SLWREC.SLWMSGNO = 0001;
      return;
    end
    SL0HSO4(); /* <=== setup left sum scrn*/
  end

  if (SLWREC.SLWERRSW == "N")
    SLWREC.XXXLOCID = "SK4E";
    SLWREC.SLWMSGNO = 0013; /* <== scroll forward successful*/

    if (SL0HW04.SL0HWSIN == "Y") /* <== save product min switch*/
      SL0HM410.SL0HMPIN = SL0HW04.SL0HMPIN; /* <==saved product min qty*/
      SL0HW04.SL0HWPMI = "Y"; /* <==== product min switch*/
      SL0HW04.SL0HWSIN = "N"; /* <== save product min switch*/
    end

    if (SL0HW04.SL0HWSAX == "Y") /* <== save product max switch*/
      SL0HM410.SL0HMPAX = SL0HW04.SL0HMPAX; /* <==saved product max qty*/
      SL0HW04.SL0HWPMA = "Y"; /* <==== product max switch*/
      SL0HW04.SL0HWSAX = "N"; /* <== save product max switch*/
    end
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0HSK4

// add : prod loc asgmnt : 0
Function SL0HSLOG()


   /* ************************************************************/
   /* *** add unique row to:  sl log table                    ****/
   /* *** using the std module:  SL0010                       ****/
   /* *** note: use sl10 rec to pass log data                 ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -803 = adding duplicate row                       ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

  SLQREC.ZZZCHGDT = X2CREC.X2CCURDT;
  SLQREC.ZZZCHGTM = X3CREC.X3CCURST;
  SLQREC.XXXUSRID = COMMAREA.CAUSERID;

  set SL10REC empty;

  if (SLQREC.XWHCD == "04"
   || SLQREC.XWHCD == "07"
   || SLQREC.XWHCD == "51")
     /* next sentence*/
  else
    return;
  end

  SL10REC.LTIOFNCTN = "A ";
  SL10REC.SL10W-DSLLOG01 = SLQREC.SLQDATA;
  call "SL0010" (SL10REC) {isNoRefresh = yes, isExternal = yes};

  if (SL10REC.SL10W-RTN-SQLCODE == 0)
    if (SL10REC.SL10W-RTN-CODE == 0)
      return;
    else
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1PGMNM = "SL0010 ";
      TA1REC.TA1LOC = SL10REC.SL10W-RTN-MSG;
      TA1REC.TA1DBASE = "DSTLOC  ";
      TA1REC.TA1TBLVU = "VSSLOG01";
      TA1REC.TA1TBLKE = SLQREC.SLQKEY;
      move SQLCA to ERRSQLCA withV60Compat;
      SLWREC.SLWMSGNO = 0001;
      SLWREC.SLWERRSW = "Y";
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    end

  else
    SLWREC.SLWERRSW = "Y";
    if (SL10REC.SL10W-RTN-SQLCODE == -911)
      SLWREC.SLWSKYSW = "N";
      SLWREC.XXXLOCID = "SLOG";
      SLWREC.SLWMSGNO = 0031; /* <---try again msg*/
      return;
    end

    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1LOCAT[1] = "SL0010 ";
    TA1REC.TA1LOCAT[3] = "ADD     ";
    TA1REC.TA1LOCAT[4] = "ROW     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VSSLOG01";
    TA1REC.TA1TBLKE = SLQREC.SLQKEY;
    SLWREC.SLWMSGNO = 0001;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSLOG

// data missing input edits
Function SL0HSN1()


   /* ************************************************************/
   /* *** do missing field edits in any order but exit on error **/
   /* ************************************************************/

  SLWREC.SLWSEXSW = "N";
  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= 40)
    if (SL0HM110.SY4IDDSC[SLWIDX01] > " ")
      if (SL0HM110.XMSLMFNC[SLWIDX01] == "A"
       || SL0HM110.XMSLMFNC[SLWIDX01] == "C"
       || SL0HM110.XMSLMFNC[SLWIDX01] == "D")
        SLWREC.SLWSEXSW = "Y";
      end
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

  if (SLWREC.SLWSEXSW == "Y")
     /* next sentence*/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SN1A";
    SLWREC.SLWMSGNO = 0070;
    set SL0HM110.XGPCD cursor, bold;
    set SL0HM110.SY1STNBR bold;
    return;
  end

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= 40)
    if (SL0HM110.SY4IDDSC[SLWIDX01] > " ")
      if (SL0HM110.XMSLMFNC[SLWIDX01] == "A"
       || SL0HM110.XMSLMFNC[SLWIDX01] == "C"
       || SL0HM110.XMSLMFNC[SLWIDX01] == "D"
       || SL0HM110.XMSLMFNC[SLWIDX01] == " ")
         /* next sentence*/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SN1B";
        SLWREC.SLWMSGNO = 0011;
        set SL0HM110.XMSLMFNC[SLWIDX01] cursor, bold;
        return;
      end
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSN1

// data missing input edits
Function SL0HSN2()

   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: setup defaults for optional fields, if any    ****/
   /* ************************************************************/

  if (SL0HM210.XMSLMFNC == "A")
    if (SL0HM210.SY1STNBR[SLWIDX01] > " "
     || SL0HM210.SL0HMTOA[SLWIDX01] > " "
     || SL0HM210.SL0HMTOZ[SLWIDX01] > " "
     || SL0HM210.SL0HMTOL[SLWIDX01] > " ")
       /* next sentence*/
    else
      return;
    end
    if (SL0HM210.SL0HMTOL[SLWIDX01] > " ")
      /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SN2A";
      SLWREC.SLWMSGNO = 0009; /* <--- required field msg*/
      set SL0HM210.SL0HMTOL[SLWIDX01] cursor, bold;
    end
    if (SL0HM210.SL0HMTOZ[SLWIDX01] > " ")
      /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SN2B";
      SLWREC.SLWMSGNO = 0009; /* <--- required field msg*/
      set SL0HM210.SL0HMTOZ[SLWIDX01] cursor, bold;
    end
    if (SL0HM210.SL0HMTOA[SLWIDX01] > " ")
      /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SN2C";
      SLWREC.SLWMSGNO = 0009; /* <--- required field msg*/
      set SL0HM210.SL0HMTOA[SLWIDX01] cursor, bold;
    end
    return;
  end

  if (SL0HM210.XMSLMFNC == "D")
    if (SL0HM210.SY1STNBR[SLWIDX01] > " "
     || SL0HM210.XARCD[SLWIDX01] > " "
     || SL0HM210.SL4ZONE[SLWIDX01] > " "
     || SL0HM210.SL5LOCTN[SLWIDX01] > " ")
       /* next sentence*/
    else
      return;
    end
    if (SL0HM210.SL5LOCTN[SLWIDX01] > " ")
      /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SN2D";
      SLWREC.SLWMSGNO = 0009; /* <--- required field msg*/
      set SL0HM210.SL5LOCTN[SLWIDX01] cursor, bold;
    end
    if (SL0HM210.SL4ZONE[SLWIDX01] > " ")
      /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SN2E";
      SLWREC.SLWMSGNO = 0009; /* <--- required field msg*/
      set SL0HM210.SL4ZONE[SLWIDX01] cursor, bold;
    end
    if (SL0HM210.XARCD[SLWIDX01] > " ")
      /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SN2F";
      SLWREC.SLWMSGNO = 0009; /* <--- required field msg*/
      set SL0HM210.XARCD[SLWIDX01] cursor, bold;
    end
    return;
  end

  if (SL0HM210.XMSLMFNC == "R")
    if (SL0HM210.SY1STNBR[SLWIDX01] > " "
     || SL0HM210.XARCD[SLWIDX01] > " "
     || SL0HM210.SL4ZONE[SLWIDX01] > " "
     || SL0HM210.SL5LOCTN[SLWIDX01] > " "
     || SL0HM210.SL0HMTOA[SLWIDX01] > " "
     || SL0HM210.SL0HMTOZ[SLWIDX01] > " "
     || SL0HM210.SL0HMTOL[SLWIDX01] > " ")
       /* next sentence*/
    else
      return;
    end
    if (SL0HM210.SL0HMTOL[SLWIDX01] > " ")
      /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SN2G";
      SLWREC.SLWMSGNO = 0009; /* <--- required field msg*/
      set SL0HM210.SL0HMTOL[SLWIDX01] cursor, bold;
    end
    if (SL0HM210.SL0HMTOZ[SLWIDX01] > " ")
      /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SN2H";
      SLWREC.SLWMSGNO = 0009; /* <--- required field msg*/
      set SL0HM210.SL0HMTOZ[SLWIDX01] cursor, bold;
    end
    if (SL0HM210.SL0HMTOA[SLWIDX01] > " ")
      /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SN2I";
      SLWREC.SLWMSGNO = 0009; /* <--- required field msg*/
      set SL0HM210.SL0HMTOA[SLWIDX01] cursor, bold;
    end
    if (SL0HM210.SL5LOCTN[SLWIDX01] > " ")
      /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SN2J";
      SLWREC.SLWMSGNO = 0009; /* <--- required field msg*/
      set SL0HM210.SL5LOCTN[SLWIDX01] cursor, bold;
    end
    if (SL0HM210.SL4ZONE[SLWIDX01] > " ")
      /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SN2K";
      SLWREC.SLWMSGNO = 0009; /* <--- required field msg*/
      set SL0HM210.SL4ZONE[SLWIDX01] cursor, bold;
    end
    if (SL0HM210.XARCD[SLWIDX01] > " ")
      /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SN2L";
      SLWREC.SLWMSGNO = 0009; /* <--- required field msg*/
      set SL0HM210.XARCD[SLWIDX01] cursor, bold;
    end
    return;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0HSN2

// data missing input edits
Function SL0HSN3()


   /* ************************************************************/
   /* *** setup error for each missing data field             ****/
   /* *** note: setup defaults for optional fields, if any    ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/


  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= 39)
    if (SL0HM310.SL0HMTOA[SLWIDX01] > " "
     || SL0HM310.SL0HMTOZ[SLWIDX01] > " "
     || SL0HM310.SL0HMTOL[SLWIDX01] > " ")
      return;
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "SN3B";
  SLWREC.SLWMSGNO = 0009; /* <--- required field msg*/
  set SL0HM310.SL0HMTOA[1] cursor, bold;
  set SL0HM310.SL0HMTOZ[1] bold;
  set SL0HM310.SL0HMTOL[1] bold;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSN3

// data missing input edits
Function SL0HSN4()


   /* ************************************************************/
   /* *** setup error for each missing data field             ****/
   /* *** note: setup defaults for optional fields, if any    ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/


  if (SL0HWD0.SL0HWRTY[SLWIDX01] == "B")
    SLWREC.SLWSEXSW = "Y";
    return;
  end

  SLWREC.SLWSEXSW = "Y";
  if (SL0HM410.SL0HMMIN[SLWIDX01] is blanks /* <-- erase EOF  ******/
   && SL0HM410.SL0HMMIN[SLWIDX01] is modified)
    SLWREC.SLWSEXSW = "N";
  end
  if (SL0HM410.SL0HMMAX[SLWIDX01] is blanks /* <-- erase EOF  ******/
   && SL0HM410.SL0HMMAX[SLWIDX01] is modified)
    SLWREC.SLWSEXSW = "N";
  end
  if (SL0HW04.SL0HWSMI[SLWIDX01] == "Y") /* <-- min modified*/
    SLWREC.SLWSEXSW = "N";
  end
  if (SL0HW04.SL0HWSMA[SLWIDX01] == "Y") /* <-- max modified*/
    SLWREC.SLWSEXSW = "N";
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0HSN4

// data field edits
Function SL0HSO1()


   /* ************************************************************/
   /* *** use ta0040 rtn to check sl7effdt for validity       ****/
   /* ************************************************************/

  set TA2REC empty;

  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";
  TA2REC.TA2GRGAN = SL0HM110.SL7EFFDT[SLWIDX01];

  call "TA0040" (TA2REC) {isNoRefresh = yes};

  if (TA2REC.TA2RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SO1A";
    SLWREC.SLWMSGNO = 0021;
    set SL0HM110.SL7EFFDT[SLWIDX01] cursor, bold;
  else
    SL0HW01.SL7EFFDT[SLWIDX01] = TA2REC.TA2GRGGN;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSO1

// data field edits
Function SL0HSO2()

   /* ************************************************************/
   /* *** edit each data field, even if error detected        ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ***** "IF" added by Grant Gilray 3/14/88 ******/
  if (SL0HM210.XUMCD[SLWIDX01] != " ")
    /* *********************************************/
    if (SL0HM210.XUMCD[SLWIDX01] in XUMTBL.XUMCD)
      if (XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SO2A";
        SLWREC.SLWMSGNO = 0010; /* <=== inactive msg*/
        set SL0HM210.XUMCD[SLWIDX01] cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SO2B";
      SLWREC.SLWMSGNO = 0011; /* <=== invalid value msg*/
      set SL0HM210.XUMCD[SLWIDX01] cursor, bold;
    end
    /* ***** code added by Grant Gilray 3/14/88 ******/
  else
    set PKNREC empty;
    TA1REC.TA1LOCAT[2] = "SL0HSO2 ";
    TA1REC.TA1MAP = SLWREC.SLWTAMAP;
    PKNREC.XGPCD = SL0HM210.XGPCD;
    PKNREC.SY1STNBR = SL0HM210.SY1STNBR[SLWIDX01];
    PKNREC.SY2CLRID = SL0HM210.SY2CLRID[SLWIDX01];
    PKNREC.XDMCD = SL0HM210.XDMCD[SLWIDX01];

    SL0H460(); /* <----- read PKNREC for validate*/


    if (SQLCA.VAGen_SQLCODE == 0) /* <=== for all other neg sql codes*/
      if (SLWREC.XCTCD == "CANA") /* if CANADA, then SY2000 was called*/
        if (WSY2000.WSY2000-RETURN-CODE == 0) /* CANA row found*/
          SL0HM210.XUMCD[SLWIDX01] = "01";
        end
      else
        SL0HM210.XUMCD[SLWIDX01] = "01";
      end
    end

  end

  if (SL0HM210.XPGCD[SLWIDX01] in XPGTBL.XPGCD)
    if (XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SO2C";
      SLWREC.SLWMSGNO = 0010; /* <=== inactive msg*/
      set SL0HM210.XPGCD[SLWIDX01] cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SO2D";
    SLWREC.SLWMSGNO = 0011; /* <=== invalid value msg*/
    set SL0HM210.XPGCD[SLWIDX01] cursor, bold;
  end

  if (SL0HM210.XSACD[SLWIDX01] in XSATBL.XSACD)
    if (XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SO2E";
      SLWREC.SLWMSGNO = 0010; /* <=== inactive msg*/
      set SL0HM210.XSACD[SLWIDX01] cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SO2F";
    SLWREC.SLWMSGNO = 0011; /* <=== invalid value msg*/
    set SL0HM210.XSACD[SLWIDX01] cursor, bold;
  end

  set PC2REC empty; /* clear row storage area*/

  PC2REC.XGPCD = SL0HM210.XGPCD;
  PC2REC.PC2INSEG = SL0HM210.XSDCD[SLWIDX01];
  call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes};
  if (SQLCA.VAGen_SQLCODE == +0)
    if (PC2REC.XXXSTAT == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SO2G";
      SLWREC.SLWMSGNO = 0010; /* <=== inactive msg*/
      set SL0HM210.XSDCD[SLWIDX01] cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SO2H";
    SLWREC.SLWMSGNO = 0011; /* <=== invalid value msg*/
    set SL0HM210.XSDCD[SLWIDX01] cursor, bold;
  end

  if (SL0HM210.XQACD[SLWIDX01] in XQATBL.XQACD)
    if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SO2I";
      SLWREC.SLWMSGNO = 0010; /* <=== inactive msg*/
      set SL0HM210.XQACD[SLWIDX01] cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SO2J";
    SLWREC.SLWMSGNO = 0011; /* <=== invalid value msg*/
    set SL0HM210.XQACD[SLWIDX01] cursor, bold;
  end


  if (SL0HM210.SL0HMTOA[SLWIDX01] == " ")
     /* next sentence*/
  else
    SL0HS2O(); /* <--- check to a/z/l for validity*/
  end

  if (SLWREC.XWHOWNGF == "Y")
     /* ************************************************************/
     /* *** if owner group cd in tbl & active: put abrv. on map ****/
     /* ************************************************************/
    SLWREC.XWHCD = SL0HM210.XWHCD;
    SLWREC.SLWTBLCD = SL0HM210.XOWCD[SLWIDX01];
    if (SLWREC.SLWTBLKY in XOWTBL.XOWKEY)
      if (XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SO2S";
        SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
        set SL0HM210.XOWCD[SLWIDX01] cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SO2T";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0HM210.XOWCD[SLWIDX01] cursor, bold;
    end
  else
    if (SL0HM210.XOWCD[SLWIDX01] != "00")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SO2U";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0HM210.XOWCD[SLWIDX01] cursor, bold;
    end
  end



   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0HSO2

// data field edits
Function SL0HSO3()


   /* ************************************************************/
   /* *** edit each data field, even if error detected        ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 39;
  while (SLWREC.SLWIDX01 >= 1)
    if (SL0HM310.SL0HMTOA[SLWIDX01] > " ")

      set SL5REC empty;
      SL5REC.XWHCD = SL0HM310.XWHCD;
      SL5REC.XARCD = SL0HM310.SL0HMTOA[SLWIDX01];
      SL5REC.SL4ZONE = SL0HM310.SL0HMTOZ[SLWIDX01];
      SL5REC.SL5LOCTN = SL0HM310.SL0HMTOL[SLWIDX01];

      XSSL5I0(); /* <=== std prod loctn inquiry*/

      if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SO3A";
        SLWREC.SLWMSGNO = 0038; /* <--- not on db msg*/
        set SL0HM310.SL0HMTOA[SLWIDX01] cursor, bold;
        set SL0HM310.SL0HMTOZ[SLWIDX01] bold;
        set SL0HM310.SL0HMTOL[SLWIDX01] bold;
        return;
      end
      if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
        SLWREC.SLWSKYSW = "N";
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SO3B";
        SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
        return;
      end
      if (SQLCA.VAGen_SQLCODE == -811) /* <=== for any initial db access*/
        SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
        SLWREC.XXXLOCID = "SO3C";
        SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
        return;
      end
      if (SQLCA.VAGen_SQLCODE != 0) /* <=== for all other neg sql codes*/
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SO3D";
        SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
        SL0HST3();
        return;
      end
      if (SL5REC.YLTCD == "15"
       || SL5REC.YLTCD == "16"
       || SL5REC.YLTCD == "17"
       || SL5REC.YLTCD == "23"
       || SL5REC.YLTCD == "24")
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SO3E";
        SLWREC.SLWMSGNO = 168;
                                   /* <-- Product assign not valid for loc*/
        set SL0HM310.SL0HMTOA[SLWIDX01] cursor, bold;
        set SL0HM310.SL0HMTOZ[SLWIDX01] bold;
        set SL0HM310.SL0HMTOL[SLWIDX01] bold;
        return;
      end

      set SL4REC empty;
      SL4REC.XWHCD = SL0HM310.XWHCD;
      SL4REC.XARCD = SL0HM310.SL0HMTOA[SLWIDX01];
      SL4REC.SL4ZONE = SL0HM310.SL0HMTOZ[SLWIDX01];

      XSSL4I0(); /* <=== area/zone inquiry*/

      if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SO3A";
        SLWREC.SLWMSGNO = 0038; /* <--- not on db msg*/
        set SL0HM310.SL0HMTOA[SLWIDX01] cursor, bold;
        set SL0HM310.SL0HMTOZ[SLWIDX01] bold;
        return;
      end
      if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
        SLWREC.SLWSKYSW = "N";
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SO3B";
        SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
        return;
      end
      if (SQLCA.VAGen_SQLCODE == -811) /* <=== for any initial db access*/
        SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
        SLWREC.XXXLOCID = "SO3C";
        SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
        return;
      end
      if (SQLCA.VAGen_SQLCODE != 0) /* <=== for all other neg sql codes*/
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SO3D";
        SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
        SL0HST3();
        return;
      end
      if (SL4REC.YZTCD == "10"
       || SL4REC.YZTCD == "19")
         /* next sentence*/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SO3E";
        SLWREC.SLWMSGNO = 408; /* <-- invalid zone type*/
        set SL0HM310.SL0HMTOZ[SLWIDX01] cursor, bold;
        return;
      end
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSO3

// display sizes and quantities
Function SL0HSO4()

   /* ************************************************************/
   /* *** get first record from wd0 and display the data      ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    if (SL0HWD0.SL0HWRTY[SLWIDX01] == "S")
      SL0HWB4.SL0HWRC4 = SL0HWD0.SL0HWDTA[SLWIDX01];
      SL0HM410.SY4IDDSC[SLWIDX01] = SL0HWB4.SY4IDDSC;
      SL0HM410.SL7MINSS[SLWIDX01] = SL0HWB4.SL7MINSS;
      SL0HM410.SL7MAXSS[SLWIDX01] = SL0HWB4.SL7MAXSS;
      set SL0HM410.SY4IDDSC[SLWIDX01] skip;
      set SL0HM410.SL7MINSS[SLWIDX01] skip;
      set SL0HM410.SL0HMMIN[SLWIDX01] initialAttributes;
      set SL0HM410.SL7MAXSS[SLWIDX01] skip;
      set SL0HM410.SL0HMMAX[SLWIDX01] initialAttributes;
    else
      if (SL0HWD0.SL0HWRTY[SLWIDX01] == "B")
        set SL0HM410.SY4IDDSC[SLWIDX01] skip, invisible;
        set SL0HM410.SL7MINSS[SLWIDX01] skip, invisible;
        set SL0HM410.SL0HMMIN[SLWIDX01] skip, invisible;
        set SL0HM410.SL7MAXSS[SLWIDX01] skip, invisible;
        set SL0HM410.SL0HMMAX[SLWIDX01] skip, invisible;
      else
        SLWREC.SLWVERSW = "Y";
        SLWREC.XXXLOCID = "SO4A";
        SLWREC.SLWMSGNO = 0001;
        return;
      end
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if error: display the cleared screen                ****/
   /* ************************************************************/

  if (SLWREC.SLWVERSW == "Y")
    SL0HSQ4(); /* <=== reset screen (clear)*/
  end

   /* ************************************************************/
   /* ***  if no error check for more data                    ****/
   /* ************************************************************/

  if (SLWREC.SLWERRSW == "Y")
    /* next sentence*/
  else
    if (SLWREC.SLWSUMIX < SLWREC.SLWSMAXR)
      SLWREC.XXXLOCID = "SO4B";
      SLWREC.SLWMSGNO = 0169; /* <== more data msg*/
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSO4

// data relational edits
Function SL0HSP1()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;
  if (SL0HM110.XXXSTAT == "I")
    while (SLWREC.SLWIDX01 <= 40)
      if (SL0HM110.SY4IDDSC[SLWIDX01] > " ")
        if (SL0HM110.XMSLMFNC[SLWIDX01] == " ")
          /* next sentence*/
        else
          if (SL0HM110.XMSLMFNC[SLWIDX01] == "C")
            if (SL0HM110.SL7EFFDT[SLWIDX01] > 0)
              SL0HSO1(); /* <--   validate date using ta0040*/
              if (SLWREC.SLWERRSW == "Y")
                return;
              end
            else
              SLWREC.SLWERRSW = "Y";
              SLWREC.XXXLOCID = "SP1A";
              SLWREC.SLWMSGNO = 0009;
              set SL0HM110.SL7EFFDT[SLWIDX01] cursor, bold;
              return;
            end
          else
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SP1B";
            SLWREC.SLWMSGNO = 0011; /* <-- invalid value msg*/
            set SL0HM110.XMSLMFNC[SLWIDX01] cursor, bold;
            return;
          end
        end
      end
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
    end
  end

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= 40)
    if (SL0HM110.SY4IDDSC[SLWIDX01] > " ")
      if (SL0HM110.XMSLMFNC[SLWIDX01] == "A"
       || SL0HM110.XMSLMFNC[SLWIDX01] == "C"
       || SL0HM110.XMSLMFNC[SLWIDX01] == "D")
        if (SL0HM110.SL7EFFDT[SLWIDX01] > 0)
          SL0HSO1(); /* <--   validate date using ta0040*/
          if (SLWREC.SLWERRSW == "Y")
            return;
          end
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SP1C";
          SLWREC.SLWMSGNO = 0009;
          set SL0HM110.SL7EFFDT[SLWIDX01] cursor, bold;
          return;
        end
      end
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSP1

// data relational edits
Function SL0HSP2()


   /* ************************************************************/
   /* *** relational edits checked here                       ****/
   /* ************************************************************/

  if (SL0HM210.XMSLMFNC == "A")
    if (SL0HM210.SL0HMTOL[SLWIDX01] > " ")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SP2A";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0HM210.SL0HMTOL[SLWIDX01] cursor, bold;
    end

    if (SL0HM210.SL0HMTOZ[SLWIDX01] > " ")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SP2B";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0HM210.SL0HMTOZ[SLWIDX01] cursor, bold;
    end

    if (SL0HM210.SL0HMTOA[SLWIDX01] > " ")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SP2C";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0HM210.SL0HMTOA[SLWIDX01] cursor, bold;
    end
  end
  if (SL0HM210.XMSLMFNC == "D")
    if (SL0HM210.SL5LOCTN[SLWIDX01] > " ")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SP2E";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0HM210.SL5LOCTN[SLWIDX01] cursor, bold;
    end

    if (SL0HM210.SL4ZONE[SLWIDX01] > " ")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SP2F";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0HM210.SL4ZONE[SLWIDX01] cursor, bold;
    end

    if (SL0HM210.XARCD[SLWIDX01] > " ")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SP2G";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0HM210.XARCD[SLWIDX01] cursor, bold;
    end
  end
  if (SL0HM210.XMSLMFNC == "R")
    if (SL0HM210.SL0HMTOL[SLWIDX01] > " ")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SP2H";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0HM210.SL0HMTOL[SLWIDX01] cursor, bold;
    end

    if (SL0HM210.SL0HMTOZ[SLWIDX01] > " ")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SP2I";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0HM210.SL0HMTOZ[SLWIDX01] cursor, bold;
    end

    if (SL0HM210.SL0HMTOA[SLWIDX01] > " ")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SP2J";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0HM210.SL0HMTOA[SLWIDX01] cursor, bold;
    end
    if (SL0HM210.SL5LOCTN[SLWIDX01] > " ")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SP2L";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0HM210.SL5LOCTN[SLWIDX01] cursor, bold;
    end

    if (SL0HM210.SL4ZONE[SLWIDX01] > " ")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SP2M";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0HM210.SL4ZONE[SLWIDX01] cursor, bold;
    end

    if (SL0HM210.XARCD[SLWIDX01] > " ")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SP2N";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0HM210.XARCD[SLWIDX01] cursor, bold;
    end
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSP2

// data relational edits
Function SL0HSP3()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** if area code in tbl & active: continue              ****/
   /* ************************************************************/
  SLWREC.SLWIDX01 = 39;
  while (SLWREC.SLWIDX01 > 1)
    if (SL0HM310.SL0HMTOA[SLWIDX01] > " ")
      SLWREC.XWHCD = SL0HM310.XWHCD;
      SLWREC.SLWTBLCD = SL0HM310.SL0HMTOA[SLWIDX01];
      if (SLWREC.SLWTBLKY in XARTBL.XARKEY)
        if (XARTBL.XXXSTAT[sysVar.arrayIndex] == "A")
          if (XARTBL.XARPRCFL[sysVar.arrayIndex] == "Y")
             /* ** next sentence ***/
          else
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SP3A";
            SLWREC.SLWMSGNO = 0089; /* <--- inactive msg*/
            set SL0HM310.SL0HMTOA[SLWIDX01] cursor, bold;
          end
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SP3B";
          SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
          set SL0HM310.SL0HMTOA[SLWIDX01] cursor, bold;
        end
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SP3C";
        SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
        set SL0HM310.SL0HMTOA[SLWIDX01] cursor, bold;
      end
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSP3

// data relational edits
Function SL0HSP4()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

  if (SL0HW04.SL0HWSMI[SLWIDX01] == "Y") /* <=  valid size min entered*/
    if (SL0HW04.SL0HWSMA[SLWIDX01] == "Y") /* <=  valid size max entered*/
      if (SL0HM410.SL0HMMIN[SLWIDX01] <= SL0HM410.SL0HMMAX[SLWIDX01])
         /* next sentence*/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SP4A";
        SLWREC.SLWMSGNO = 0090; /* <--- invalid value msg*/
        SL0HW04.SL0HWIDX = SLWREC.SLWIDX01;
      end
    else
      if (SL0HM410.SL0HMMIN[SLWIDX01] <= SL0HM410.SL7MAXSS[SLWIDX01])
         /* next sentence*/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SP4B";
        SLWREC.SLWMSGNO = 0090; /* <--- invalid value msg*/
        SL0HW04.SL0HWIDX = SLWREC.SLWIDX01;
      end
    end
  else
    if (SL0HW04.SL0HWSMA[SLWIDX01] == "Y")
      if (SL0HM410.SL7MINSS[SLWIDX01] <= SL0HM410.SL0HMMAX[SLWIDX01])
         /* next sentence*/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SP4C";
        SLWREC.SLWMSGNO = 0090; /* <--- invalid value msg*/
        SL0HW04.SL0HWIDX = SLWREC.SLWIDX01;
      end
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSP4

// reset screen (clear)
Function SL0HSQ1()


   /* ************************************************************/
   /* *** "clear" map =  fld values, attributes & cursor      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0HM110 initial; /* resets entire screen*/

   /* ************************************************************/
   /* *** use current ws values in the corresponding map flds ****/
   /* *** plus any default values desired on the cleared map  ****/
   /* ************************************************************/

  SL0HM110.XWHCD = SL0HW01.XWHCD;
  SL0HM110.SY1STNBR = SL0HW01.SY1STNBR;
  SL0HM110.SY2CLRID = SL0HW01.SY2CLRID;
  SL0HM110.XGPCD = SL0HW01.XGPCD;
  SL0HM110.XDMCD = SL0HW01.XDMCD;
  SL0HM110.XQACD = SL0HW01.XQACD;
  SL0HM110.XSDCD = SL0HW01.XSDCD;
  SL0HM110.XSACD = SL0HW01.XSACD;
  SL0HM110.XPGCD = SL0HW01.XPGCD;
  SL0HM110.XUMCD = SL0HW01.XUMCD;
  SL0HM110.XOWCD = SL0HW01.XOWCD;

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0HM110.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0HM110.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0HM110.XXXTITLE = SLWREC.XXXTITLE;
  SL0HM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  SLWREC.SLWFTMSW = "Y";

  set SL0HW01 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSQ1

// reset screen (clear)
Function SL0HSQ2()


   /* ************************************************************/
   /* *** "clear" map =  fld values, attributes & cursor      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0HM210 initial; /* resets entire screen*/

   /* ************************************************************/
   /* *** use current ws values in the corresponding map flds ****/
   /* *** plus any default values desired on the cleared map  ****/
   /* ************************************************************/

  SL0HM210.XWHCD = SL0HW02.XWHCD;
  SL0HM210.XMSLMFNC = SL0HW02.XMSLMFNC;
  SL0HM210.SL7EFFDT = SL0HW02.SL7EFFDT;
  SL0HM210.XGPCD = SL0HW02.XGPCD;

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= 16)
    SL0HM210.SY2CLRID[SLWIDX01] = "00 ";
    SL0HM210.XDMCD[SLWIDX01] = "00";
    SL0HM210.XQACD[SLWIDX01] = "01";
    SL0HM210.XSDCD[SLWIDX01] = "000";
    SL0HM210.XSACD[SLWIDX01] = "000";
    SL0HM210.XPGCD[SLWIDX01] = "00";
    /* ***** code changed by Grant Gilray 3/14/88 ******/
     /* MOVE '01' TO SL0HM210.XUMCD(SLWIDX01);*/
    SL0HM210.XUMCD[SLWIDX01] = "  ";
    /* *************************************************/
    SL0HM210.XOWCD[SLWIDX01] = "00";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0HM210.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0HM210.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0HM210.XXXTITLE = SLWREC.XXXTITLE;
  SL0HM210.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  SLWREC.SLWFTMSW = "Y";

  set SL0HW02 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSQ2

// reset screen (clear)
Function SL0HSQ3()


   /* ************************************************************/
   /* *** "clear" map =  fld values, attributes & cursor      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0HM310 initial; /* resets entire screen*/

   /* ************************************************************/
   /* *** use current ws values in the corresponding map flds ****/
   /* *** plus any default values desired on the cleared map  ****/
   /* ************************************************************/

  SL0HM310.XWHCD = SL0HW03.XWHCD;
  SL0HM310.SY1STNBR = SL0HW03.SY1STNBR;
  SL0HM310.SY2CLRID = SL0HW03.SY2CLRID;
  SL0HM310.XGPCD = SL0HW03.XGPCD;
  SL0HM310.XDMCD = SL0HW03.XDMCD;
  SL0HM310.XQACD = SL0HW03.XQACD;
  SL0HM310.XSDCD = SL0HW03.XSDCD;
  SL0HM310.XSACD = SL0HW03.XSACD;
  SL0HM310.XPGCD = SL0HW03.XPGCD;
  SL0HM310.XUMCD = SL0HW03.XUMCD;
  SL0HM310.XOWCD = SL0HW03.XOWCD;

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0HM310.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0HM310.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0HM310.XXXTITLE = SLWREC.XXXTITLE;
  SL0HM310.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set SL0HW03 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSQ3

// reset screen (clear)
Function SL0HSQ4()


   /* ************************************************************/
   /* *** "clear" map =  fld values, attributes & cursor      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0HM410 initial; /* resets entire screen*/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    if (SL0HWD0.SL0HWRTY[SLWIDX01] == "B")
      set SL0HM410.SY4IDDSC[SLWIDX01] skip, invisible;
      set SL0HM410.SL7MINSS[SLWIDX01] skip, invisible;
      set SL0HM410.SL0HMMIN[SLWIDX01] skip, invisible;
      set SL0HM410.SL7MAXSS[SLWIDX01] skip, invisible;
      set SL0HM410.SL0HMMAX[SLWIDX01] skip, invisible;
    else
      set SL0HM410.SY4IDDSC[SLWIDX01] skip;
      set SL0HM410.SL7MINSS[SLWIDX01] skip;
      set SL0HM410.SL0HMMIN[SLWIDX01] initialAttributes;
      set SL0HM410.SL7MAXSS[SLWIDX01] skip;
      set SL0HM410.SL0HMMAX[SLWIDX01] initialAttributes;
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end
   /* ************************************************************/
   /* *** use current ws values in the corresponding map flds ****/
   /* *** plus any default values desired on the cleared map  ****/
   /* ************************************************************/

  SL0HSG4(); /* <-- setup map key fields*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0HM410.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0HM410.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0HM410.XXXTITLE = SLWREC.XXXTITLE;
  SL0HM410.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  if (SL0HW04.SL0HWXSW != "Y")
    set SL0HW04 empty; /* appl. working storage area*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSQ4

// data entry edits
Function SL0HSR1()


   /* ************************************************************/
   /* *** check for missing data fields                       ****/
   /* ************************************************************/

  SL0HSN1(); /* <=== data missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational data field edits        ****/
   /* ************************************************************/

  SL0HSP1(); /* <=== data relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSR1

// data entry edits
Function SL0HSR2()


   /* ************************************************************/
   /* *** check for missing data fields                       ****/
   /* ************************************************************/

  SL0HSN2(); /* <=== data missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no missing fields: edit individual data fields      ****/
   /* ************************************************************/

  SL0HSO2(); /* <=== data field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational data field edits        ****/
   /* ************************************************************/

  SL0HSP2(); /* <=== data relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSR2

// data entry edits
Function SL0HSR3()


   /* ************************************************************/
   /* *** check for missing data fields                       ****/
   /* ************************************************************/

  SL0HSN3(); /* <=== data missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no missing fields: edit individual data fields      ****/
   /* ************************************************************/

  SL0HSO3(); /* <=== data field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational data field edits        ****/
   /* ************************************************************/

  SL0HSP3(); /* <=== data relational edits*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSR3

// data entry edits
Function SL0HSR4()


   /* ************************************************************/
   /* *** check for missing data fields                       ****/
   /* ************************************************************/

  SL0HSN4(); /* <=== data missing input edits*/

  if (SLWREC.SLWERRSW == "Y"
   || SLWREC.SLWSEXSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational data field edits        ****/
   /* ************************************************************/

  SL0HSP4(); /* <=== data relational edits*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSR4

// reset screen (empty)
Function SL0HST1()


   /* ************************************************************/
   /* *** "empty" map =  fld values only                      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0HM110 empty; /* resets entire screen*/

  SL0HSG1(); /* <=== setup map key fields*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0HM110.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0HM110.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0HM110.XXXTITLE = SLWREC.XXXTITLE;
  SL0HM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  SLWREC.SLWFTMSW = "Y";

  set SL0HW01 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HST1

// reset screen (empty)
Function SL0HST2()


   /* ************************************************************/
   /* *** "empty" map =  fld values only                      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0HM210 empty; /* resets entire screen*/

  SL0HSG2(); /* <=== setup map key fields*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0HM210.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0HM210.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0HM210.XXXTITLE = SLWREC.XXXTITLE;
  SL0HM210.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  SLWREC.SLWFTMSW = "Y";

  set SL0HW02 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HST2

// reset screen (empty)
Function SL0HST3()


   /* ************************************************************/
   /* *** "empty" map =  fld values only                      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0HM310 empty; /* resets entire screen*/

  SL0HSG3(); /* <=== setup map key fields*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0HM310.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0HM310.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0HM310.XXXTITLE = SLWREC.XXXTITLE;
  SL0HM310.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set SL0HW03 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HST3

// update database
Function SL0HSU1()
  set SL7REC empty;
  SL7REC.XWHCD = SL0HM110.XWHCD;
  SL7REC.XARCD = SL0HM110.XARCD;
  SL7REC.SL4ZONE = SL0HM110.SL4ZONE;
  SL7REC.SL5LOCTN = SL0HM110.SL5LOCTN;
  SL7REC.XGPCD = SL0HM110.XGPCD;
  SL7REC.SY1STNBR = SL0HM110.SY1STNBR;
  SL7REC.SY2CLRID = SL0HM110.SY2CLRID;
  SL7REC.XDMCD = SL0HM110.XDMCD;
  SL7REC.XQACD = SL0HM110.XQACD;
  SL7REC.XOWCD = SL0HM110.XOWCD;
  SL7REC.XSDCD = SL0HM110.XSDCD;
  SL7REC.XSACD = SL0HM110.XSACD;
  SL7REC.XPGCD = SL0HM110.XPGCD;
  SL7REC.XUMCD = SL0HM110.XUMCD;

  set SLQREC empty;
  SLQREC.XWHCD = SL0HM110.XWHCD;
  SLQREC.XXXTBLNM = "VSYASG01";
  SLQREC.XXXPGMNB = "SL0H";
  SLQREC.XARCD = SL0HM110.XARCD;
  SLQREC.SL4ZONE = SL0HM110.SL4ZONE;
  SLQREC.SL5LOCTN = SL0HM110.SL5LOCTN;
  SLQREC.XGPCD = SL0HM110.XGPCD;
  SLQREC.SY1STNBR = SL0HM110.SY1STNBR;
  SLQREC.SY2CLRID = SL0HM110.SY2CLRID;
  SLQREC.XDMCD = SL0HM110.XDMCD;
  SLQREC.XQACD = SL0HM110.XQACD;
  SLQREC.XOWCD = SL0HM110.XOWCD;
  SLQREC.PC2INSEG = SL0HM110.XSDCD;
  SLQREC.XEGCD = SL0HM110.XSACD;
  SLQREC.XPGCD = SL0HM110.XPGCD;
  SLQREC.XUMCD = SL0HM110.XUMCD;

  SLWREC.SLWSEXSW = "N";
  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= 40)
    if (SL0HM110.SY4IDDSC[SLWIDX01] > " ")
      SL7REC.SY5SZID = SYPREC.SY5SZID[SLWIDX01];
      SLQREC.SY5SZID = SYPREC.SY5SZID[SLWIDX01];
      if (SL0HM110.XMSLMFNC[SLWIDX01] == "A")

         /* ************************************************************/
         /* *** move rest of screen to record for insert of sl7rec  ****/
         /* ************************************************************/

        SL7REC.SL7EFFDT = SL0HW01.SL7EFFDT[SLWIDX01];
        SL7REC.SL7MAXSS = 0;
        SL7REC.SL7MINSS = 0;
        SL7REC.XXXSTAT = "A";

        TA1REC.TA1LOCAT[2] = "SL0HSU1 ";
        TA1REC.TA1MAP = SLWREC.SLWTAMAP;

        XSSL7A0(); /* <=== std prod loctn add*/

        if (SQLCA.VAGen_SQLCODE == 0)
          SLQREC.LTIOFNCTN = "A";
          SL0HSLOG();
          if (SL10REC.SL10W-RTN-SQLCODE != 0
           || SL10REC.SL10W-RTN-CODE != 0)
            SLWREC.XXXLOCID = "SL00";
            return;
          end
        else
          if (SQLCA.VAGen_SQLCODE == -911)
            SLWREC.SLWSKYSW = "N";
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SU1A";
            SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
            return;
          end
          if (SQLCA.VAGen_SQLCODE == -803) /* <=== for ADD*/
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SU1B";
            SLWREC.SLWMSGNO = 0045; /* <--- duplicate add msg*/
            set SL0HM110.XMSLMFNC[SLWIDX01] cursor, bold;
            set SL0HM110.SL7EFFDT[SLWIDX01] bold;
            return;
          end
          SLWREC.SLWERRSW = "Y";
                                   /* <=== for all other neg. sql codes*/
          SLWREC.XXXLOCID = "SU1C";
          SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
          SL0HST1(); /* <=== clear scrn (empty)*/
          return;
        end
      end
      if (SL0HM110.XMSLMFNC[SLWIDX01] == "D")

         /* ************************************************************/
         /* *** retrieve sl7rec to get min and max ss               ****/
         /* *** set status code to 'i' for inactive                 ****/
         /* ************************************************************/

        SL7REC.XXXSTAT = "A";
        TA1REC.TA1LOCAT[2] = "SL0HSU1 ";
        TA1REC.TA1MAP = SLWREC.SLWTAMAP;

        XSSL7I0(); /* <=== std area/zone inquiry*/

        if (SQLCA.VAGen_SQLCODE == 0)
           /* next sentence*/
        else
          if (SQLCA.VAGen_SQLCODE == +100) /* <=== rec not found*/
            SLWREC.SLWERRSW = "Y"; /* < all other neg. sql codes*/
            SLWREC.XXXLOCID = "SU1D";
            SLWREC.SLWMSGNO = 0012; /* <--- severe error msg*/
            set SL0HM110.XWHCD cursor, bold;
            set SL0HM110.XARCD bold;
            set SL0HM110.SL4ZONE bold;
            return;
          end
          if (SQLCA.VAGen_SQLCODE == -911)
            SLWREC.SLWSKYSW = "N";
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SU1E";
            SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
            return;
          end
          SLWREC.SLWERRSW = "Y"; /* <--- all other neg sql codes*/
          SLWREC.XXXLOCID = "SU1F";
          SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
          return;
        end
        SL7REC.XXXSTAT = "I";
        SL7REC.SL7EFFDT = SL0HW01.SL7EFFDT[SLWIDX01];
        TA1REC.TA1LOCAT[2] = "SL0HSU1 ";
        TA1REC.TA1MAP = SLWREC.SLWTAMAP;

        XSSL7A0(); /* <=== std prod loctn assgn insert*/

        if (SQLCA.VAGen_SQLCODE == 0)
          SLQREC.LTIOFNCTN = "D";
          SL0HSLOG();
          if (SL10W-RTN-SQLCODE != 0
           || SL10W-RTN-CODE != 0)
            SLWREC.XXXLOCID = "SL00";
            return;
          end
        else
          if (SQLCA.VAGen_SQLCODE == -911)
            SLWREC.SLWSKYSW = "N";
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SU1G";
            SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
            return;
          end
          if (SQLCA.VAGen_SQLCODE == -803) /* <=== for ADD*/
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SU1H";
            SLWREC.SLWMSGNO = 0045; /* <--- duplicate add msg*/
            set SL0HM110.XMSLMFNC[SLWIDX01] cursor, bold;
            set SL0HM110.SL7EFFDT[SLWIDX01] bold;
            return;
          end
          SLWREC.SLWERRSW = "Y";
                                   /* <=== for all other neg. sql codes*/
          SLWREC.XXXLOCID = "SU1I";
          SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
          SL0HST1(); /* <=== clear scrn (empty)*/
          return;
        end
      end

      if (SL0HM110.XMSLMFNC[SLWIDX01] == "C")

        TA1REC.TA1LOCAT[2] = "SL0HSU1 ";
        TA1REC.TA1MAP = SLWREC.SLWTAMAP;
        SL7REC.XXXSTAT = SL0HM110.XXXSTAT;

        XSSL7U1(); /* <=== std area/zone inquiry*/

        if (SQLCA.VAGen_SQLCODE == 0)
           /* ** next sentence ***/
        else
          if (SQLCA.VAGen_SQLCODE == +100) /* <=== rec not found*/
            SLWREC.SLWERRSW = "Y"; /* < all other neg. sql codes*/
            SLWREC.XXXLOCID = "SU1J";
            SLWREC.SLWMSGNO = 0012; /* <--- severe error msg*/
            set SL0HM110.XWHCD cursor, bold;
            set SL0HM110.XARCD bold;
            set SL0HM110.SL4ZONE bold;
            return;
          end
          if (SQLCA.VAGen_SQLCODE == -911)
            SLWREC.SLWSKYSW = "N";
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SU1K";
            SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
            return;
          end
          SLWREC.SLWERRSW = "Y"; /* <--- all other neg sql codes*/
          SLWREC.XXXLOCID = "SU1L";
          SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
          return;
        end
         /* ************************************************************/
         /* *** move effective date to record for change            ****/
         /* ************************************************************/

        set TA2REC empty;

        TA2REC.TA2DTOPT = "GREGGREG";
        TA2REC.TA2GRTYP = "A";
        SL7REC.SL7EFFDT = SL0HW01.SL7EFFDT[SLWIDX01];
        SL7REC.ZZZCHGCT = SL0HW01.ZZZCHGCT[SLWIDX01];

        TA1REC.TA1LOCAT[2] = "SL0HSU1 ";
        TA1REC.TA1MAP = SLWREC.SLWTAMAP;

        XSSL7R0(); /* <=== std prod loctn inquiry*/

        if (SQLCA.VAGen_SQLCODE == 0)
          SLQREC.LTIOFNCTN = "C";
          SL0HSLOG();
          if (SL10W-RTN-SQLCODE != 0
           || SL10W-RTN-CODE != 0)
            SLWREC.XXXLOCID = "SL00";
            return;
          end
        else
          SLWREC.SLWSKYSW = "N";
          SLWREC.SLWERRSW = "Y";
          set SL0HM110.SY1STNBR cursor, bold;
          set SL0HM110.SY2CLRID bold;
          if (SQLCA.VAGen_SQLCODE == +100) /* <=== for REPLACE*/
            if (SL7REC.SL7DATA > " ")
              SLWREC.XXXLOCID = "SU1M";
              SLWREC.SLWMSGNO = 0032; /* <--- row chg since last read*/
            else
              SLWREC.XXXLOCID = "SU1N";
              SLWREC.SLWMSGNO = 0033;
                                   /* <--- row del since last read*/
            end
            return;
          end
          if (SQLCA.VAGen_SQLCODE == -911)
            SLWREC.SLWSKYSW = "N";
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SU1O";
            SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
            return;
          end
          SLWREC.SLWERRSW = "Y";
                                   /* <=== for all other neg. sql codes*/
          SLWREC.XXXLOCID = "SU1P";
          SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
          return;
        end
      end
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSU1

// update database
Function SL0HSU2()

   /* ************************************************************/
   /* *** use the saved keys, obtained database data and the  ****/
   /* *** input changes (including new data) to update the    ****/
   /* *** specified database record (or add if new record)    ****/
   /* ************************************************************/

  set SL7REC empty;
  SL7REC.XWHCD = SL0HM210.XWHCD;
  SL7REC.XGPCD = SL0HM210.XGPCD;
  SL7REC.SY1STNBR = SL0HM210.SY1STNBR[SLWIDX01];
  SL7REC.SY2CLRID = SL0HM210.SY2CLRID[SLWIDX01];
  SL7REC.XDMCD = SL0HM210.XDMCD[SLWIDX01];
  SL7REC.XQACD = SL0HM210.XQACD[SLWIDX01];
  SL7REC.XSDCD = SL0HM210.XSDCD[SLWIDX01];
  SL7REC.XSACD = SL0HM210.XSACD[SLWIDX01];
  SL7REC.XPGCD = SL0HM210.XPGCD[SLWIDX01];
  SL7REC.XUMCD = SL0HM210.XUMCD[SLWIDX01];
  SL7REC.XOWCD = SL0HM210.XOWCD[SLWIDX01];

  set SLQREC empty;
  SLQREC.XWHCD = SL0HM210.XWHCD;
  SLQREC.XXXTBLNM = "VSYASG01";
  SLQREC.XXXPGMNB = "SL0H";
  SLQREC.XGPCD = SL0HM210.XGPCD;
  SLQREC.SY1STNBR = SL0HM210.SY1STNBR[SLWIDX01];
  SLQREC.SY2CLRID = SL0HM210.SY2CLRID[SLWIDX01];
  SLQREC.XDMCD = SL0HM210.XDMCD[SLWIDX01];
  SLQREC.XQACD = SL0HM210.XQACD[SLWIDX01];
  SLQREC.PC2INSEG = SL0HM210.XSDCD[SLWIDX01];
  SLQREC.XPGCD = SL0HM210.XPGCD[SLWIDX01];
  SLQREC.XUMCD = SL0HM210.XUMCD[SLWIDX01];
  SLQREC.XOWCD = SL0HM210.XOWCD[SLWIDX01];


  if (SL0HM210.XMSLMFNC == "A")
    if (SL0HM210.SL0HMTOA[SLWIDX01] > " ")
      set SYPREC empty;
      SYPREC.XGPCD = SL0HM210.XGPCD;
      SYPREC.SY1STNBR = SL0HM210.SY1STNBR[SLWIDX01];
      SYPREC.SY2CLRID = SL0HM210.SY2CLRID[SLWIDX01];
      SYPREC.XDMCD = SL0HM210.XDMCD[SLWIDX01];
      SYPREC.XQACD = SL0HM210.XQACD[SLWIDX01];
      TA1REC.TA1LOCAT[2] = "SL0HSU2 ";
      TA1REC.TA1MAP = SLWREC.SLWTAMAP;
      SL0HS1A(); /* <----- call sy1120*/
      if (SLWREC.SLWERRSW == "Y")
        set SL0HM210.XGPCD bold;
        set SL0HM210.SY1STNBR[SLWIDX01] cursor, bold;
        set SL0HM210.SY2CLRID[SLWIDX01] bold;
        set SL0HM210.XDMCD[SLWIDX01] bold;
        set SL0HM210.XQACD[SLWIDX01] bold;
        return;
      end

      SLWREC.SLWIDX02 = 1;
      while (SLWREC.SLWIDX02 <= 40)
        if (SYPREC.SY4IDDSC[SLWIDX02] > " ")
          SL7REC.XARCD = SL0HM210.SL0HMTOA[SLWIDX01];
          SL7REC.SL4ZONE = SL0HM210.SL0HMTOZ[SLWIDX01];
          SL7REC.SL5LOCTN = SL0HM210.SL0HMTOL[SLWIDX01];
          SL7REC.SY5SZID = SYPREC.SY5SZID[SLWIDX02];
          SL7REC.SL7EFFDT = TA2REC.TA2GRGGN;
          SL7REC.SL7MAXSS = 0;
          SL7REC.SL7MINSS = 0;
          SL7REC.XXXSTAT = "A";
          TA1REC.TA1LOCAT[2] = "SL0HSU2 ";
          TA1REC.TA1MAP = SLWREC.SLWTAMAP;

          XSSL7A0(); /* <=== std prod loctn add*/
          if (SQLCA.VAGen_SQLCODE == 0)
            SLQREC.XARCD = SL0HM210.SL0HMTOA[SLWIDX01];
            SLQREC.SL4ZONE = SL0HM210.SL0HMTOZ[SLWIDX01];
            SLQREC.SL5LOCTN = SL0HM210.SL0HMTOL[SLWIDX01];
            SLQREC.SY5SZID = SL7REC.SY5SZID;
            SLQREC.LTIOFNCTN = "A";
            SL0HSLOG();
            if (SL10REC.SL10W-RTN-SQLCODE != 0
             || SL10REC.SL10W-RTN-CODE != 0)
              SLWREC.XXXLOCID = "SL00";
              return;
            end
          else
            SLWREC.SLWERRSW = "Y";
            if (SQLCA.VAGen_SQLCODE == -911)
              SLWREC.SLWSKYSW = "N";
              SLWREC.XXXLOCID = "SU2A";
              SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
            else
              if (SQLCA.VAGen_SQLCODE == -803) /* <=== for ADD*/
                SLWREC.XXXLOCID = "SU2B";
                SLWREC.SLWMSGNO = 0045; /* <--- duplicate add msg*/
                set SL0HM210.SY1STNBR[SLWIDX01] cursor, bold;
              else
                SLWREC.XXXLOCID = "SU2C";
                SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
              end
            end
            return;
          end
        end
        SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
      end
    end
  end


  if (SL0HM210.XMSLMFNC == "D")
    if (SL0HM210.XARCD[SLWIDX01] > " ")
      SL7REC.XARCD = SL0HM210.XARCD[SLWIDX01];
      SL7REC.SL4ZONE = SL0HM210.SL4ZONE[SLWIDX01];
      SL7REC.SL5LOCTN = SL0HM210.SL5LOCTN[SLWIDX01];
      SL7REC.XXXSTAT = "A";
      SLQREC.XARCD = SL0HM210.XARCD[SLWIDX01];
      SLQREC.SL4ZONE = SL0HM210.SL4ZONE[SLWIDX01];
      SLQREC.SL5LOCTN = SL0HM210.SL5LOCTN[SLWIDX01];
      TA1REC.TA1LOCAT[2] = "SL0HSU2 ";
      TA1REC.TA1MAP = SLWREC.SLWTAMAP;

      XSSL7S4(); /* <=== select set for inquiry*/
      if (SQLCA.VAGen_SQLCODE == 0)
         /* ** next sentence ***/
      else
        SLWREC.SLWERRSW = "Y";
        if (SQLCA.VAGen_SQLCODE == +100)
          SLWREC.SLWSKYSW = "N";
          SLWREC.XXXLOCID = "SU2D";
          SLWREC.SLWMSGNO = 0047; /* <--- no product assgnmt msg*/
          set SL0HM210.XARCD[SLWIDX01] cursor, bold;
          set SL0HM210.SL4ZONE[SLWIDX01] bold;
          set SL0HM210.SL5LOCTN[SLWIDX01] bold;
        else
          if (SQLCA.VAGen_SQLCODE == -911)
            SLWREC.SLWSKYSW = "N";
            SLWREC.XXXLOCID = "SU2E";
            SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
          else
            SLWREC.XXXLOCID = "SU2F";
            SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
          end
        end
        return;
      end

      while (SQLCA.VAGen_SQLCODE != +100)
        SL7REC.SL7EFFDT = TA2REC.TA2GRGGN;
        SL7REC.XXXSTAT = "I";
        TA1REC.TA1LOCAT[2] = "SL0HSU2 ";
        TA1REC.TA1MAP = SLWREC.SLWTAMAP;

        XSSL7A0(); /* <=== std prod loctn assgn insert*/
        if (SQLCA.VAGen_SQLCODE == 0)
          SLQREC.SY5SZID = SL7REC.SY5SZID;
          SLQREC.LTIOFNCTN = "D";
          SL0HSLOG();
          if (SL10W-RTN-SQLCODE != 0
           || SL10W-RTN-CODE != 0)
            SLWREC.XXXLOCID = "SL00";
            return;
          end
        else
          SLWREC.SLWERRSW = "Y";
          if (SQLCA.VAGen_SQLCODE == -911)
            SLWREC.SLWSKYSW = "N";
            SLWREC.XXXLOCID = "SU2G";
            SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
          else
            if (SQLCA.VAGen_SQLCODE == -803) /* <=== for ADD*/
              SLWREC.XXXLOCID = "SU2H";
              SLWREC.SLWMSGNO = 0045; /* <--- duplicate add msg*/
            else
              SLWREC.XXXLOCID = "SU2I";
              SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
            end
          end
          return;
        end

        XSSL7F4(); /* ;       <----- fetch next sl7rec*/
        if (SLWREC.SLWERRSW == "Y")
          return;
        end
      end
    end
  end


  if (SL0HM210.XMSLMFNC == "R")
    if (SL0HM210.XARCD[SLWIDX01] > " ")
      SL7REC.XARCD = SL0HM210.XARCD[SLWIDX01];
      SL7REC.SL4ZONE = SL0HM210.SL4ZONE[SLWIDX01];
      SL7REC.SL5LOCTN = SL0HM210.SL5LOCTN[SLWIDX01];
      SL7REC.XXXSTAT = "A";
      TA1REC.TA1LOCAT[2] = "SL0HSU2 ";
      TA1REC.TA1MAP = SLWREC.SLWTAMAP;

      XSSL7S4(); /* <=== select set for inquiry*/
      if (SQLCA.VAGen_SQLCODE == 0)
         /* ** next sentence ***/
      else
        SLWREC.SLWERRSW = "Y";
        if (SQLCA.VAGen_SQLCODE == +100)
          SLWREC.SLWSKYSW = "N";
          SLWREC.XXXLOCID = "SU2J";
          SLWREC.SLWMSGNO = 0047; /* <--- no product assgnmt msg*/
          set SL0HM210.XARCD[SLWIDX01] cursor, bold;
          set SL0HM210.SL4ZONE[SLWIDX01] bold;
          set SL0HM210.SL5LOCTN[SLWIDX01] bold;
        else
          if (SQLCA.VAGen_SQLCODE == -911)
            SLWREC.SLWSKYSW = "N";
            SLWREC.XXXLOCID = "SU2K";
            SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
          else
            SLWREC.XXXLOCID = "SU2L";
            SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
          end
        end
        return;
      end

      while (SQLCA.VAGen_SQLCODE != +100)
        SL7REC.XARCD = SL0HM210.SL0HMTOA[SLWIDX01];
        SL7REC.SL4ZONE = SL0HM210.SL0HMTOZ[SLWIDX01];
        SL7REC.SL5LOCTN = SL0HM210.SL0HMTOL[SLWIDX01];
        SL7REC.SL7EFFDT = TA2REC.TA2GRGGN;
        SL7REC.XXXSTAT = "A";
        TA1REC.TA1LOCAT[2] = "SL0HSU2 ";
        TA1REC.TA1MAP = SLWREC.SLWTAMAP;

        XSSL7A0(); /* <=== std prod loctn assgn insert*/
        if (SQLCA.VAGen_SQLCODE == 0)
          SLQREC.XARCD = SL0HM210.SL0HMTOA[SLWIDX01];
          SLQREC.SL4ZONE = SL0HM210.SL0HMTOZ[SLWIDX01];
          SLQREC.SL5LOCTN = SL0HM210.SL0HMTOL[SLWIDX01];
          SLQREC.SY5SZID = SL7REC.SY5SZID;
          SLQREC.LTIOFNCTN = "R";
          SL0HSLOG();
          if (SL10W-RTN-SQLCODE != 0
           || SL10W-RTN-CODE != 0)
            SLWREC.XXXLOCID = "SL00";
            return;
          end
        else
          SLWREC.SLWERRSW = "Y";
          if (SQLCA.VAGen_SQLCODE == -911)
            SLWREC.SLWSKYSW = "N";
            SLWREC.XXXLOCID = "SU2M";
            SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
          else
            if (SQLCA.VAGen_SQLCODE == -803) /* <=== for ADD*/
              SLWREC.XXXLOCID = "SU2N";
              SLWREC.SLWMSGNO = 0045; /* <--- duplicate add msg*/
            else
              SLWREC.XXXLOCID = "SU2O";
              SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
            end
          end
          return;
        end

        XSSL7F4(); /* ;       <----- fetch next sl7rec*/
        if (SLWREC.SLWERRSW == "Y")
          return;
        end
      end
    end
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0HSU2

// update database
Function SL0HSU3()

   /* ************************************************************/
   /* *** use the saved keys, obtained database data and the  ****/
   /* *** input changes (including new data) to update the    ****/
   /* *** specified database record (or add if new record)    ****/
   /* *** Added sl0hlog call to add record for log.           ****/
   /* ************************************************************/

  set SL7REC empty;
  SL7REC.XWHCD = SL0HM310.XWHCD;
  SL7REC.XGPCD = SL0HM310.XGPCD;
  SL7REC.SY1STNBR = SL0HM310.SY1STNBR;
  SL7REC.SY2CLRID = SL0HM310.SY2CLRID;
  SL7REC.XDMCD = SL0HM310.XDMCD;
  SL7REC.XQACD = SL0HM310.XQACD;
  SL7REC.XSDCD = SL0HM310.XSDCD;
  SL7REC.XSACD = SL0HM310.XSACD;
  SL7REC.XPGCD = SL0HM310.XPGCD;
  SL7REC.XUMCD = SL0HM310.XUMCD;
  SL7REC.XOWCD = SL0HM310.XOWCD;

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";
  TA2REC.TA2GRGAN = SL0HM310.SL7EFFDT;

  call "TA0040" (TA2REC) {isNoRefresh = yes};
  if (TA2REC.TA2RTNCD == 0)
    SL7REC.SL7EFFDT = TA2REC.TA2GRGGN;
  end

  set SLQREC empty;
  SLQREC.XWHCD = SL0HM310.XWHCD;
  SLQREC.XGPCD = SL0HM310.XGPCD;
  SLQREC.XXXTBLNM = "VSYASG01";
  SLQREC.XXXPGMNB = "SL0H";
  SLQREC.SY1STNBR = SL0HM310.SY1STNBR;
  SLQREC.SY2CLRID = SL0HM310.SY2CLRID;
  SLQREC.XDMCD = SL0HM310.XDMCD;
  SLQREC.XQACD = SL0HM310.XQACD;
  SLQREC.XPGCD = SL0HM310.XPGCD;
  SLQREC.PC2INSEG = SL0HM310.XSDCD;
  SLQREC.XUMCD = SL0HM310.XUMCD;
  SLQREC.XOWCD = SL0HM310.XOWCD;

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= 39)

    if (SL0HM310.XMSLMFNC == "A")
      if (SL0HM310.SY4IDDSC[SLWIDX01] > " "
       && SL0HM310.SL0HMTOA[SLWIDX01] > " ")
        SL7REC.SY5SZID = SYPREC.SY5SZID[SLWIDX01];
        SL7REC.XARCD = SL0HM310.SL0HMTOA[SLWIDX01];
        SL7REC.SL4ZONE = SL0HM310.SL0HMTOZ[SLWIDX01];
        SL7REC.SL5LOCTN = SL0HM310.SL0HMTOL[SLWIDX01];
        SL7REC.XXXSTAT = "A";
        SL7REC.SL7MAXSS = 0;
        SL7REC.SL7MINSS = 0;
        TA1REC.TA1LOCAT[2] = "SL0HSU3 ";
        TA1REC.TA1MAP = SLWREC.SLWTAMAP;

        XSSL7A0(); /* <=== std prod loctn add*/
        if (SQLCA.VAGen_SQLCODE == 0)
          SLQREC.SY5SZID = SYPREC.SY5SZID[SLWIDX01];
          SLQREC.XARCD = SL0HM310.SL0HMTOA[SLWIDX01];
          SLQREC.SL4ZONE = SL0HM310.SL0HMTOZ[SLWIDX01];
          SLQREC.SL5LOCTN = SL0HM310.SL0HMTOL[SLWIDX01];
          SLQREC.LTIOFNCTN = "A";
          SL0HSLOG();
          if (SL10REC.SL10W-RTN-SQLCODE != 0
           || SL10REC.SL10W-RTN-CODE != 0)
            SLWREC.XXXLOCID = "SL00";
            return;
          end
        else
          SLWREC.SLWERRSW = "Y";
          if (SQLCA.VAGen_SQLCODE == -911)
            SLWREC.SLWSKYSW = "N";
            SLWREC.XXXLOCID = "SU3A";
            SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
          else
            if (SQLCA.VAGen_SQLCODE == -803) /* <=== for ADD*/
              SLWREC.XXXLOCID = "SU3B";
              SLWREC.SLWMSGNO = 0045; /* <--- duplicate add msg*/
              set SL0HM310.SL0HMTOA[SLWIDX01] cursor, bold;
              set SL0HM310.SL0HMTOZ[SLWIDX01] bold;
              set SL0HM310.SL0HMTOL[SLWIDX01] bold;
            else
              SLWREC.XXXLOCID = "SU3C";
              SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
              SL0HST3(); /* <=== clear scrn (empty)*/
            end
          end
          return;
        end
      end
    end

    if (SL0HM310.XMSLMFNC == "R")
      if (SL0HM310.SY4IDDSC[SLWIDX01] > " "
       && SL0HM310.SL0HMTOA[SLWIDX01] > " ")
        SL7REC.SY5SZID = SYPREC.SY5SZID[SLWIDX01];
        SL7REC.XARCD = SL0HM310.SL0HMTOA[SLWIDX01];
        SL7REC.SL4ZONE = SL0HM310.SL0HMTOZ[SLWIDX01];
        SL7REC.SL5LOCTN = SL0HM310.SL0HMTOL[SLWIDX01];
        SL7REC.XXXSTAT = "A";
        SL7REC.SL7MAXSS = SL0HW03.SL7MAXSS[SLWIDX01];
        SL7REC.SL7MINSS = SL0HW03.SL7MINSS[SLWIDX01];
        TA1REC.TA1LOCAT[2] = "SL0HSU3 ";
        TA1REC.TA1MAP = SLWREC.SLWTAMAP;

        XSSL7A0(); /* <=== std prod loctn add*/
        if (SQLCA.VAGen_SQLCODE == 0)
          SLQREC.SY5SZID = SYPREC.SY5SZID[SLWIDX01];
          SLQREC.XARCD = SL0HM310.SL0HMTOA[SLWIDX01];
          SLQREC.SL4ZONE = SL0HM310.SL0HMTOZ[SLWIDX01];
          SLQREC.SL5LOCTN = SL0HM310.SL0HMTOL[SLWIDX01];
          SLQREC.LTIOFNCTN = "R";
          SL0HSLOG();
          if (SL10REC.SL10W-RTN-SQLCODE != 0
           || SL10REC.SL10W-RTN-CODE != 0)
            SLWREC.XXXLOCID = "SL00";
            return;
          end
        else
          SLWREC.SLWERRSW = "Y";
          if (SQLCA.VAGen_SQLCODE == -911)
            SLWREC.SLWSKYSW = "N";
            SLWREC.XXXLOCID = "SU3D";
            SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
          else
            if (SQLCA.VAGen_SQLCODE == -803) /* <=== for ADD*/
              SLWREC.XXXLOCID = "SU3E";
              SLWREC.SLWMSGNO = 0045; /* <--- duplicate add msg*/
              set SL0HM310.XMSLMFNC cursor, bold;
            else
              SLWREC.XXXLOCID = "SU3F";
              SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
              SL0HST3(); /* <=== clear scrn (empty)*/
            end
          end
          return;
        end
      end
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0HSU3

// update database
Function SL0HSU4()

   /* ************************************************************/
   /* *** use the saved keys, obtained database data and the  ****/
   /* *** input changes (including new data) to update the    ****/
   /* *** specified database record (or add if new record)    ****/
   /* ************************************************************/

  set SL7REC empty;
  SL7REC.XWHCD = SL0HM410.XWHCD;
  SL7REC.XARCD = SL0HM410.XARCD;
  SL7REC.SL4ZONE = SL0HM410.SL4ZONE;
  SL7REC.SL5LOCTN = SL0HM410.SL5LOCTN;
  SL7REC.XGPCD = SL0HM410.XGPCD;
  SL7REC.SY1STNBR = SL0HM410.SY1STNBR;
  SL7REC.SY2CLRID = SL0HM410.SY2CLRID;
  SL7REC.XDMCD = SL0HM410.XDMCD;
  SL7REC.XQACD = SL0HM410.XQACD;
  SL7REC.XOWCD = SL0HM410.XOWCD;
  SL7REC.XSDCD = SL0HM410.XSDCD;
  SL7REC.XSACD = SL0HM410.XSACD;
  SL7REC.XPGCD = SL0HM410.XPGCD;
  SL7REC.XUMCD = SL0HM410.XUMCD;
  SL7REC.XXXSTAT = "A";
  SL0HWB4.SL0HWRC4 = SL0HWD0.SL0HWDTA[SLWIDX01];
  SL7REC.SY5SZID = SL0HWB4.SY5SZID;

  set SLQREC empty;
  SLQREC.XWHCD = SL0HM410.XWHCD;
  SLQREC.XXXTBLNM = "VSYASG01";
  SLQREC.XXXPGMNB = "SL0H";
  SLQREC.XARCD = SL0HM410.XARCD;
  SLQREC.SL4ZONE = SL0HM410.SL4ZONE;
  SLQREC.SL5LOCTN = SL0HM410.SL5LOCTN;
  SLQREC.XGPCD = SL0HM410.XGPCD;
  SLQREC.SY1STNBR = SL0HM410.SY1STNBR;
  SLQREC.SY2CLRID = SL0HM410.SY2CLRID;
  SLQREC.XDMCD = SL0HM410.XDMCD;
  SLQREC.XQACD = SL0HM410.XQACD;
  SLQREC.XOWCD = SL0HM410.XOWCD;
  SLQREC.PC2INSEG = SL0HM410.XSDCD;
  SLQREC.XPGCD = SL0HM410.XPGCD;
  SLQREC.XUMCD = SL0HM410.XUMCD;
  SLQREC.SY5SZID = SL0HWB4.SY5SZID;

  TA1REC.TA1LOCAT[2] = "SL0HSU4 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL7U1(); /* <=== std prod assgn inquiry*/
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    SLWREC.SLWERRSW = "Y";
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.SLWSKYSW = "N";
      SLWREC.XXXLOCID = "SU4A";
      SLWREC.SLWMSGNO = 0086; /* <--- not on db msg*/
      set SL0HM410.SY1STNBR cursor, bold;
      set SL0HM410.SY2CLRID bold;
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
        SLWREC.SLWSKYSW = "N";
        SLWREC.XXXLOCID = "SU4B";
        SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      else
        if (SQLCA.VAGen_SQLCODE != 0)
          SLWREC.XXXLOCID = "SU4C";
          SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
          SL0HSQ4(); /* <=== reset screen (clear)*/
        end
      end
    end
    return;
  end


   /* ************************************************************/
   /* *** move min and max fields from the screen to the      ****/
   /* *** record for change.                                  ****/
   /* ************************************************************/

  if (SL0HW04.SL0HWSMI[SLWIDX01] == "Y") /* <-- modified min*/
    SL7REC.SL7MINSS = SL0HM410.SL0HMMIN[SLWIDX01];
    SL0HW04.SL0HWSMI[SLWIDX01] = "N";
  end
  if (SL0HW04.SL0HWSMA[SLWIDX01] == "Y") /* <-- modified max*/
    SL7REC.SL7MAXSS = SL0HM410.SL0HMMAX[SLWIDX01];
    SL0HW04.SL0HWSMA[SLWIDX01] = "N";
  end

  TA1REC.TA1LOCAT[2] = "SL0HSU4 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL7R0(); /* <=== std prod loctn assgn update*/
  if (SQLCA.VAGen_SQLCODE == 0)
    SLQREC.LTIOFNCTN = "C";
    SL0HSLOG();
    if (SL10REC.SL10W-RTN-SQLCODE != 0
     || SL10REC.SL10W-RTN-CODE != 0)
      SLWREC.XXXLOCID = "SL00";
      return;
    end
  else
    SLWREC.SLWERRSW = "Y";
    set SL0HM410.SY4IDDSC cursor, bold;
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for REPLACE*/
      SLWREC.SLWSKYSW = "N";
      if (SL7REC.SL7DATA > " ")
        SLWREC.XXXLOCID = "SU4D";
        SLWREC.SLWMSGNO = 0032; /* <--- row chg since last read*/
      else
        SLWREC.XXXLOCID = "SU4E";
        SLWREC.SLWMSGNO = 0033; /* <--- row del since last read*/
      end
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        SLWREC.SLWSKYSW = "N";
        SLWREC.XXXLOCID = "SU4F";
        SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      else
        SLWREC.XXXLOCID = "SU4G";
        SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      end
    end
    return;
  end

  SL0HWB4.SL7MINSS = SL7REC.SL7MINSS;
  SL0HWB4.SL7MAXSS = SL7REC.SL7MAXSS;
  SL0HWB4.ZZZCHGCT = SL7REC.ZZZCHGCT;
  SL0HWD0.SL0HWDTA[SLWIDX01] = SL0HWB4.SL0HWRC4;


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0HSU4

// CAITEM  processing
Function SL0HSY0()


   /* ************************************************************/
   /* *** if entered, use CAITEM data by first moving it to   ****/
   /* *** a ws field to make use of it with "redefines"       ****/
   /* *** note: CAITEM = character data as passed             ****/
   /* ************************************************************/

  SLWREC.CAITEM = COMMAREA.CAITEM;

  if (SLWREC.SLWCASNO > " ")
    SL0HM010.XMSLMSNO = SLWREC.SLWCASNO;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0HSY0

// add : prod loc asgmnt : 0
Function XSSL7A0()


   /* ************************************************************/
   /* *** add unique row to:  product location assignment     ****/
   /* *** using the std module:  IO1550                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -803 = adding duplicate row                       ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* *** note: 0 return code means record already exists     ****/
   /* ***       = setup -803 return code                      ****/
   /* ************************************************************/

  XSSL7I0(); /* <=== select unique row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    SQLCA.VAGen_SQLCODE = -803;
    return;
  end

  if (SQLCA.VAGen_SQLCODE < 0)
    return;
  end

   /* ************************************************************/
   /* *** insert row (previous +100 = doesn't exist)          ****/
   /* *** note: IO process initializes zzzchgct to 0          ****/
   /* ************************************************************/

  SL7REC.ZZZCHGDT = X2CREC.X2CCURDT;
  SL7REC.ZZZCHGTM = X3CREC.X3CCURST;

  SLVREC.SLVFNC = "A ";

  call "IO1550" (SLVREC, SQLCA, SL7REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSSL7A0 ";
  TA1REC.TA1LOCAT[1] = "IO1550  ";
  TA1REC.TA1LOCAT[3] = "ADD     ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYASG01";
  TA1REC.TA1TBLKE = SL7REC.SL7KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSL7A0

// close : prod loc asgmnt : 1
Function XSSL7C1()


   /* ************************************************************/
   /* *** close select set of:  product location assignment   ****/
   /* *** using the std module:  IO1550                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "C1";

  call "IO1550" (SLVREC, SQLCA, SL7REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSL7C1 ";
  TA1REC.TA1LOCAT[1] = "IO1550  ";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYASG01";
  TA1REC.TA1TBLKE = SL7REC.SL7KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSL7C1

// close : prod loc asgmnt : 4
Function XSSL7C4()


   /* ************************************************************/
   /* *** close select set of:  product location assignment   ****/
   /* *** using the std module:  IO1550                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "C1";

  call "IO1550" (SLVREC, SQLCA, SL7REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSL7C4 ";
  TA1REC.TA1LOCAT[1] = "IO1550  ";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYASG01";
  TA1REC.TA1TBLKE = SL7REC.SL7KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSL7C4

// fetch : prod loc asgmnt : 1
Function XSSL7F1()


   /* ************************************************************/
   /* *** fetch next row from:  product location assignment   ****/
   /* *** using the std module:  IO1550                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ***       but w/these io mods the sgrp will close       ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "N1";

  call "IO1550" (SLVREC, SQLCA, SL7REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    XSSL7C1(); /* <=== std close cursor*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSL7F1 ";
  TA1REC.TA1LOCAT[1] = "IO1550  ";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYASG01";
  TA1REC.TA1TBLKE = SL7REC.SL7KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSL7F1

// fetch : prod loc asgmnt : 4
Function XSSL7F4()


   /* ************************************************************/
   /* *** fetch next row from:  product location assignment   ****/
   /* *** using the std module:  IO1550                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ***       but w/these io mods the sgrp will close       ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "N1";

  call "IO1550" (SLVREC, SQLCA, SL7REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    XSSL7C4(); /* <=== std close cursor*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSL7F4 ";
  TA1REC.TA1LOCAT[1] = "IO1550  ";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYASG01";
  TA1REC.TA1TBLKE = SL7REC.SL7KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSL7F4

// inquiry : prod loc asgmnt : 0
Function XSSL7I0()


   /* ************************************************************/
   /* *** select unique row from:  product location assignment****/
   /* *** using the std module:  IO1550                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -811 = duplicates found                           ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "S ";

  call "IO1550" (SLVREC, SQLCA, SL7REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -811)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSSL7I0 ";
  TA1REC.TA1LOCAT[1] = "IO1550  ";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYASG01";
  TA1REC.TA1TBLKE = SL7REC.SL7KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSL7I0

// replace : prod loc asgmnt : 0
Function XSSL7R0()


   /* ************************************************************/
   /* *** replace unique row in:  product location assignment ****/
   /* *** using the std module:  IO1550                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = concurrent update - re:                    ****/
   /* ***          deleted since last read (rec blanked out)  ****/
   /* ***          updated since last read (new data in rec)  ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** replace row                                         ****/
   /* *** note: IO process increments record zzzchgct by +1   ****/
   /* ***       but ID's row to update by the old zzzchgct    ****/
   /* ************************************************************/

  SL7REC.ZZZCHGDT = X2CREC.X2CCURDT;
  SL7REC.ZZZCHGTM = X3CREC.X3CCURST;

  SLVREC.SLVFNC = "U ";

  call "IO1550" (SLVREC, SQLCA, SL7REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
     /* ************************************************************/
     /* *** select the original row without a change count      ****/
     /* *** note: select unique does NOT use zzzchgct           ****/
     /* *** note: this puts current version of data in record   ****/
     /* ***       or blank out record layout = deleted          ****/
     /* ************************************************************/
    XSSL7I0(); /* <=== select unique row*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == +100)
      SL7REC.SL7DATA = " ";
      return;
    end
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSSL7R0 ";
  TA1REC.TA1LOCAT[1] = "IO1550  ";
  TA1REC.TA1LOCAT[3] = "REPLACE ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYASG01";
  TA1REC.TA1TBLKE = SL7REC.SL7KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSL7R0

// setinq : prod loc asgmnt : 4
Function XSSL7S4()


   /* ************************************************************/
   /* *** select set of rows from:  product assignment        ****/
   /* *** using the std module:  IO1550                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* *** special note: #4 now uses scan #1 in io module      ****/
   /* ***           re: combination of io module scans        ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique field values for:            ****/
   /* ***   xwhcd                                             ****/
   /* ***   xgpcd                                             ****/
   /* ***   sy1stnbr                                          ****/
   /* ***   sy2clrid                                          ****/
   /* ***   xdmcd                                             ****/
   /* ***   xqacd                                             ****/
   /* ***   xsdcd                                             ****/
   /* ***   xsacd                                             ****/
   /* ***   xpgcd                                             ****/
   /* ***   xumcd                                             ****/
   /* *** the following may be used with a wild card (*):     ****/
   /* ***   none                                              ****/
   /* *** the following must have a range passed:             ****/
   /* ***   sl7effdt                                          ****/
   /* *** the order by for this select set is:                ****/
   /* ***   xwhcd                                             ****/
   /* ***   xarcd                                             ****/
   /* ***   sl4zone                                           ****/
   /* ***   sl5loctn                                          ****/
   /* ***   sl7effdt (descending)                             ****/
   /* ***   xxxstat                                           ****/
   /* ***   sy5szid                                           ****/
   /* ************************************************************/

  SL7REC.SY5SZID = -1;

  SLVREC.SLVFNC = "S1";

  call "IO1550" (SLVREC, SQLCA, SL7REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "XSSL7S4 ";
    TA1REC.TA1LOCAT[1] = "IO1550  ";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VSYASG01";
    TA1REC.TA1TBLKE = SL7REC.SL7KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ************************************************************/

  XSSL7F1(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSL7S4

// update : prod loc asgmnt : 1
Function XSSL7U1()


   /* ************************************************************/
   /* *** get unique row for update of:  prod. loc. assignment****/
   /* *** using the std module:  IO1550                       ****/
   /* *** note: IO process DOES move data to record           ****/
   /* ***       therefore, at this time (w/IO modules)        ****/
   /* ***       this will execute the std select unique sgrp  ****/
   /* ***       and                                           ****/
   /* ***       this sgrp should be used/executed so that     ****/
   /* ***       future conversion to native CSP DB2 will      ****/
   /* ***       only have to change/add code in this sgrp     ****/
   /* ***       and regenerate all applications               ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found (does not use zzzchgct)          ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

  XSSL7I0(); /* <=== std select unique*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSL7U1

//*** RECORD=SL0HW01 ****
// ************************************************************
// 
//           STOCK LOCATE MAINTENANCE SKELETON
//           =================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used for specific
//           application/function purposes.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-86  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0HW01 type basicRecord
  10 SL0HWLK1 SL0HWLK1 ; 
    15 XWHCD XWHCD ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 XSDCD XSDCD ; 
    15 XSACD XSACD ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
    15 XOWCD XOWCD ; 
    15 XARCD XARCD ; 
    15 SL4ZONE SL4ZONE ; 
    15 SL5LOCTN SL5LOCTN ; 
    15 XXXSTAT XXXSTAT ; 
  10 SL0HWNDX SL0HWNDX ; 
  10 SL0HWDT1 SL0HWDT1 [40] ; 
    15 SL7EFFDT SL7EFFDT ; 
    15 ZZZCHGCT ZZZCHGCT ; 
end // end SL0HW01

//*** RECORD=SL0HW02 ****
// ************************************************************
// 
//           STOCK LOCATE MAINTENANCE SKELETON
//           =================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used for specific
//           application/function purposes.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-86  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0HW02 type basicRecord
  10 SL0HWLK2 SL0HWLK2 ; 
    15 XWHCD XWHCD ; 
    15 XMSLMFNC XMSLMFNC ; 
    15 SL7EFFDT SL7EFFDT ; 
    15 XGPCD XGPCD ; 
  10 SL0HWXSW SL0HWXSW ; 
end // end SL0HW02

//*** RECORD=SL0HW03 ****
// ************************************************************
// 
//           STOCK LOCATE MAINTENANCE SKELETON
//           =================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used for specific
//           application/function purposes.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-86  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0HW03 type basicRecord
  10 SL0HWLK3 SL0HWLK3 ; 
    15 XWHCD XWHCD ; 
    15 XMSLMFNC XMSLMFNC ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 XSDCD XSDCD ; 
    15 XSACD XSACD ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
    15 XOWCD XOWCD ; 
    15 XARCD XARCD ; 
    15 SL4ZONE SL4ZONE ; 
    15 SL5LOCTN SL5LOCTN ; 
    15 SL7EFFDT SL7EFFDT ; 
  10 SL0HWARR SL0HWARR [40] ; 
    15 SL7MAXSS SL7MAXSS ; 
    15 SL7MINSS SL7MINSS ; 
end // end SL0HW03

//*** RECORD=SL0HW04 ****
// ************************************************************
// 
//           STOCK LOCATE MAINTENANCE SKELETON
//           =================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used for specific
//           application/function purposes.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-86  Ward Jones   created
// 
// 12-19-88  K. Anderson  added save modified flags to process
//                        entered zero after PF7 and PF8
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0HW04 type basicRecord
  10 SL0HWLK4 SL0HWLK4 ; 
    15 XWHCD XWHCD ; 
    15 XWHABRV XWHABRV ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY1SSTNM SY1SSTNM ; 
    15 SY2CLRID SY2CLRID ; 
    15 SY2CLRAB SY2CLRAB ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 XSDCD XSDCD ; 
    15 XSACD XSACD ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
    15 XOWCD XOWCD ; 
    15 XARCD XARCD ; 
    15 SL4ZONE SL4ZONE ; 
    15 SL5LOCTN SL5LOCTN ; 
  10 SL0HWSL4 SL0HWSL4 [40] ; 
    15 SL0HWSRT SL0HWSRT ; 
    15 SY4IDDSC SY4IDDSC ; 
    15 SL7MINSS SL7MINSS ; 
    15 SL7MAXSS SL7MAXSS ; 
  10 SL0HWLTH SL0HWLTH ; 
  10 * char(18) [15] ; 
    15 SL0HWRTY SL0HWRTY ; 
    15 SL0HWDTA SL0HWDTA ; 
  10 SL0HWXSW SL0HWXSW ; 
  10 SL0HWMIF SL0HWMIF [14] ; 
    15 SL0HWSMI SL0HWSMI ; 
    15 SL0HWSMA SL0HWSMA ; 
    15 SL0HMMIN SL0HMMIN ; 
    15 SL0HMMAX SL0HMMAX ; 
  10 SL0HWPMI SL0HWPMI ; 
  10 SL0HWPMA SL0HWPMA ; 
  10 SL0HWSIN SL0HWSIN ; 
  10 SL0HWSAX SL0HWSAX ; 
  10 SL0HMPIN SL0HMPIN ; 
  10 SL0HMPAX SL0HMPAX ; 
  10 SL0HWIDX SL0HWIDX ; 
end // end SL0HW04

Record SL0HWB4 type basicRecord
  10 SL0HWRC4 SL0HWRC4 ; 
    15 SY4IDDSC SY4IDDSC ; 
    15 SY5SZID SY5SZID ; 
    15 ZZZCHGCT ZZZCHGCT ; 
    15 SL7MINSS SL7MINSS ; 
    15 SL7MAXSS SL7MAXSS ; 
end // end SL0HWB4

Record SL0HWD0 type basicRecord
  10 SL0HWLTH SL0HWLTH ; 
  10 * char(18) [14] ; 
    15 SL0HWRTY SL0HWRTY ; 
    15 SL0HWDTA SL0HWDTA ; 
end // end SL0HWD0

// save max qty modified
DataItem SL0HMMAX int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save min qty modified
DataItem SL0HMMIN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save product max qty
DataItem SL0HMPAX int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// save product min qty
DataItem SL0HMPIN int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL0HWARR char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date chgct table
DataItem SL0HWDT1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// actual detail data
DataItem SL0HWDTA char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save cursor index
DataItem SL0HWIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// complete last key
DataItem SL0HWLK1 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// complete last key
DataItem SL0HWLK2 char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// complete last key
DataItem SL0HWLK3 char(44)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// complete last key
DataItem SL0HWLK4 char(76)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data length
DataItem SL0HWLTH num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// min max inform
DataItem SL0HWMIF char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product max modified
DataItem SL0HWPMA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product min modified
DataItem SL0HWPMI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work record for level 4
DataItem SL0HWRC4 char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record type
DataItem SL0HWRTY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save product max switch
DataItem SL0HWSAX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save product min switch
DataItem SL0HWSIN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// summary line data
DataItem SL0HWSL4 char(14)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// max modified
DataItem SL0HWSMA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// min modified
DataItem SL0HWSMI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sum record type
DataItem SL0HWSRT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// no entry sw
DataItem SL0HWXSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

