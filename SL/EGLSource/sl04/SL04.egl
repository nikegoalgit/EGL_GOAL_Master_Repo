package sl04;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
import ww.common.*;
//*** PROGRAM=SL04 ****
// This application allows a user to inquire and maintain rows
// in a DB2 table.
// 
// There are two different screens that may be displayed.
// 
// The first screen displayed to the user allows specification
// of the search criteria to be used to list the rows in the
// table.  The list is displayed and the user may page backward
// and forward to view the information.
// 
// When a line is selected on the screen, the second screen is
// displayed, showing all information for that table row.
// 
// If the user has sufficient security to change the data, the
// modifiable fields remain unprotected.  Otherwise, they are
// protected from modification by the user.
// 
// If any data is modified, it is verified and, if complete and
// correct, the table row is updated with the changed data.
// The screen is redisplayed to the user, indicating that the
// update is completed.
// 
// If more that one line was selected on the first screen, the
// next selection is displayed when the user presses the ENTER
// key without making any change to the displayed data.
// 
// When the user exits the second screen (either via PF3 key or
// after all selections have been viewed) the first screen is
// redisplayed, indicating the selections that were viewed.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      07/15/93  hchapm  New application.
// CANADA   08/25/95  CBRINE  Added call to SY2000. Added XCTCD
//                            to SLWREC.
// US GO    04/30/01  KRAMAL  Changed Map to add Sap PO number
// LIVE                       Added logic for same.
// *********************
Program SL04 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PC2REC PC2REC; // record
  PKNREC PKNREC; // record
  SL04W00 SL04W00; // record
  SL04W01 SL04W01; // record
  SL5REC SL5REC; // record
  SLWREC SLWREC; // record
  SQLCA SQLCA; // record
  SWVREC SWVREC; // record
  SYCREC SYCREC; // record
  SYPREC SYPREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VSYLOC02 VSYLOC02; // record
  WSY2000 WSY2000; // record
  XSSLW01 XSSLW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL; // table
  use XDMTBL; // table
  use XQATBL; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XOWTBL; // table
  use XEGTBL; // table
  use XUMTBL; // table
  use XSLTBL; // table
  use SL04M.SL04M001,  // forms
      SL04M.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPSL001: XPSL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set SL04M001 initial; /* M001 input/output*/
    set SL04W00 empty; /* Working storage*/
    set SL04W01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/

    SL04W00.SL04W-FORMAT-MAP-SW = "Y"; /* Format the map switch*/
    SL04W00.SL04W-RQT-DATA-SW = "N"; /* Request for data switch*/

     /* ------------------------------------------------------------*/
     /* If all key info is passed in SLWREC, use as initial key*/
     /* else, set cursor at missing field*/
     /* ------------------------------------------------------------*/

    if (SLWREC.SY1STNBR > " " /* style nbr is passed*/
    )                        
      SL04W00.SL04W-RQT-DATA-SW = "Y"; /* request for data switch*/

    end

    if (SLWREC.SY-SZ-ID-DESC > " ")
      SL04M001.SL04M-SIZE = SLWREC.SY-SZ-ID-DESC;
    else
      SL04M001.SL04M-SIZE = "-1";
      SL04W00.SL04W-HEADER-SIZE = -1;
    end

    if (SLWREC.SY1STNBR > " ") /* if style nbr is passed in slwrec*/
      SL04M001.SL04M-SY-STY-NBR = SLWREC.SY1STNBR; /* move to work area*/
    end


    if (SLWREC.XWHCD > " ") /* if whse code is passed in slwrec*/
      SL04M001.SL04M-XWH-WHSE-CD = SLWREC.XWHCD; /* move it to work area*/
    else
      if (COMMAREA.XWHCD > " ") /* if whse code is passed in commarea*/
        SL04M001.SL04M-XWH-WHSE-CD = COMMAREA.XWHCD; /* move towrk area*/
      end
    end


    if (SLWREC.XGPCD > " ") /* if gpc code is passed in slwrec*/
      SL04M001.SL04M-XGP-GPC-CD = SLWREC.XGPCD; /* move to work area*/
    else
      if (COMMAREA.XGPCD > " ") /* if gpc code is passed in commarea*/
        SL04M001.SL04M-XGP-GPC-CD = COMMAREA.XGPCD; /* move to work area*/
      else
        if (SL04M001.SL04M-XWH-WHSE-CD == "51") /* if warehouse 51*/
          SL04M001.SL04M-XGP-GPC-CD = "03"; /* move apparel code to gpc*/
        else
          SL04M001.SL04M-XGP-GPC-CD = "02"; /* move footwr code to gpc*/
        end
      end
    end


    if (SLWREC.SY2CLRID > " ") /* if color code is passed*/
      SL04M001.SL04M-SY-COLR-CD-ID = SLWREC.SY2CLRID; /* move to ws*/
    else
      SL04M001.SL04M-SY-COLR-CD-ID = "00 "; /* move to ws*/
    end


    if (SLWREC.XDMCD > " ") /* if dimension code is passed*/
      SL04M001.SL04M-XDM-DIM-CD = SLWREC.XDMCD; /* move to work area*/
    else
      SL04M001.SL04M-XDM-DIM-CD = "00"; /* default to dimension code 00*/
    end


    if (SLWREC.XQACD > " ") /* if quality code is passed*/
      SL04M001.SL04M-XQA-QUAL-CD = SLWREC.XQACD; /* move to work area*/
    else
      SL04M001.SL04M-XQA-QUAL-CD = "01"; /* default to quality code 01*/
    end


    if (SLWREC.XOWCD > " ") /* if own group is passed*/
      SL04M001.SL04M-XOW-OWN-GRP-CD = SLWREC.XOWCD; /* move to ws*/
    else
      SL04M001.SL04M-XOW-OWN-GRP-CD = "00"; /* move to ws*/
    end


    if (SLWREC.PC2INSEG > " ") /* inventory segment is passed*/
      SL04M001.SL04M-PC-CU-IN-SEG-CD = SLWREC.PC2INSEG; /* move to ws*/
    else
      SL04M001.SL04M-PC-CU-IN-SEG-CD = "000"; /* move to ws*/
    end


    if (SLWREC.XEG-ENGR-DIFF-CD > " ") /* engr diff code is passed*/
      SL04M001.SL04M-XEG-ENGR-DIFF-CD = SLWREC.XEG-ENGR-DIFF-CD;
    else
      SL04M001.SL04M-XEG-ENGR-DIFF-CD = "000";
    end


    if (SLWREC.XUMCD > " ") /* unit of measure passed*/
      SL04M001.SL04M-XUM-UOM-CD = SLWREC.XUMCD; /* move to ws*/
    else
      SL04M001.SL04M-XUM-UOM-CD = "01"; /* move to ws*/
    end


    if (SLWREC.XSLCD > " ") /* class code is passed*/
      SL04M001.SL04M-XSL-CLASS-CD = SLWREC.XSLCD; /* move to ws*/
    else
      SL04M001.SL04M-XSL-CLASS-CD = "000"; /* move to ws*/
    end

    if (SLWREC.PC-SAP-PO-NBR > " ") /* Sap Po Number is passed*/
      SL04M001.SL04M-PC-SAP-PO-NBR = SLWREC.PC-SAP-PO-NBR; /* move to ws*/
    else
      SL04M001.SL04M-PC-SAP-PO-NBR = "*"; /* move to ws*/
    end

    if (SLWREC.PC3POIDT > 0   /* po month range*/
     && SLWREC.PC4ORTYP > " " /* po type passed*/
     && SLWREC.PCFSECD > " "  /* season codeis passed*/
     && SLWREC.FY1FCTYC > " ") /* factory code is passed*/

      SL04W00.SL04W-PC-PO-ID-MO-RNG = SLWREC.PC3POIDT; /* date range*/
      SL04W00.SL04W-PC-PO-OT-CD = SLWREC.PC4ORTYP; /* move type to ws*/
      SL04W00.SL04W-PC-PO-ID-SESN-CD = SLWREC.PCFSECD; /* season cd*/
      SL04W00.SL04W-FY-FCTY-CD = SLWREC.FY1FCTYC; /* factory cd*/
      SL04M001.SL04M-PC-PO-NBR = -1;

      SL04W00.SL04W-FORMAT-DISPLAY-PO-SW = "Y";
    /* flag to format po info into po id and po type for map display*/

    else
      if (SLWREC.PC3PONBR > 0)
        SL04M001.SL04M-PC-PO-NBR = SLWREC.PC3PONBR;
        SL04M001.SL04M-PO-TYPE = "*"; /* wildcard for map display*/
        SL04M001.SL04M-PO-ID = "*";
        SL04W00.SL04W-PC-PO-ID-MO-RNG = -1; /* date range*/
        SL04W00.SL04W-PC-PO-ID-SESN-CD = "*"; /* season cd*/
        SL04W00.SL04W-FY-FCTY-CD = "*"; /* factory cd*/
      else

        SL04M001.SL04M-PO-TYPE = "*"; /* wildcard for map display*/
        SL04M001.SL04M-PO-ID = "*";
        SL04M001.SL04M-PC-PO-NBR = -1;
        SL04W00.SL04W-PC-PO-ID-MO-RNG = -1; /* date range*/
        SL04W00.SL04W-PC-PO-ID-SESN-CD = "*"; /* season cd*/
        SL04W00.SL04W-FY-FCTY-CD = "*"; /* factory cd*/

      end
    end

    if (COMMAREA.CAFROMAP == "SL03")
      if (SLWREC.SY-UNITS-PER-CASE == 9999)
        SL04M001.SL04M-UNPCS = -1;
      else
        SL04M001.SL04M-UNPCS = SLWREC.SY-UNITS-PER-CASE;
      end
    else
      SL04M001.SL04M-UNPCS = -1;
    end

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SL04001; /* Converse the main process*/


    SL04001: SL04001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SL04001; /* Converse the main process*/


  end // end main
end // end SL04

// Obtain the data to display
Function SL04-100()
   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/

  if (SL04W00.SL04W-RQT-DATA-SW == "Y") /* Data was not requested*/

    SL04-120(); /* Purge any temporary storage*/

  end

  SL04W01.SL04W-XWH-WHSE-CD = SL04M001.SL04M-XWH-WHSE-CD; /* whse cd*/
  SL04W01.SL04W-XGP-GPC-CD = SL04M001.SL04M-XGP-GPC-CD; /* GPC code*/
  SL04W01.SL04W-SY-STY-NBR = SL04M001.SL04M-SY-STY-NBR; /* Style nbr*/
  SL04W01.SL04W-XQA-QUAL-CD = SL04M001.SL04M-XQA-QUAL-CD; /* qual cd*/
  SL04W01.SL04W-SY-COLR-CD-ID = SL04M001.SL04M-SY-COLR-CD-ID;
  SL04W01.SL04W-XDM-DIM-CD = SL04M001.SL04M-XDM-DIM-CD; /* dimens. cd*/
  SL04W01.SL04W-XOW-OWN-GRP-CD = SL04M001.SL04M-XOW-OWN-GRP-CD;
  SL04W01.SL04W-PC-CU-IN-SEG-CD = SL04M001.SL04M-PC-CU-IN-SEG-CD;
  SL04W01.SL04W-XEG-ENGR-DIFF-CD = SL04M001.SL04M-XEG-ENGR-DIFF-CD;
  SL04W01.SL04W-XUM-UOM-CD = SL04M001.SL04M-XUM-UOM-CD;
  SL04W01.SL04W-XSL-CLASS-CD = SL04M001.SL04M-XSL-CLASS-CD;
  SL04W01.SL04W-PO-ID = SL04M001.SL04M-PO-ID;
  SL04W00.SL04W-MAP-PO-ID = SL04M001.SL04M-PO-ID;
  SL04W01.SL04W-PO-TYPE = SL04M001.SL04M-PO-TYPE;
  SL04W00.SL04W-MAP-PO-TYPE = SL04M001.SL04M-PO-TYPE;
  SL04W01.SL04W-PC-PO-NBR = SL04M001.SL04M-PC-PO-NBR;
  SL04W00.SL04W-MAP-PO-NBR = SL04M001.SL04M-PC-PO-NBR;
  SL04W01.SL04W-PC-SAP-PO-NBR = SL04M001.SL04M-PC-SAP-PO-NBR;
  SL04W00.SL04W-MAP-PC-SAP-PO-NBR = SL04M001.SL04M-PC-SAP-PO-NBR;
  SL04W01.SL04W-UNPCS = SL04M001.SL04M-UNPCS;
  SL04W00.SL04W-HEADER-UNPCS = SL04M001.SL04M-UNPCS;
  SL04W01.SL04W-SIZE = SL04M001.SL04M-SIZE;
  SL04W00.SL04W-HEADER-SIZE = SL04M001.SL04M-SIZE;

   /* ------------------------------------------------------------*/
   /* get warehouse name*/
   /* ------------------------------------------------------------*/

  if (SL04W01.SL04W-XWH-WHSE-CD in XWHTBL.XWHCD)
    SL04W01.SL04W-XWH-WHSE-NM = XWHTBL.XWHABRV[sysVar.arrayIndex];
    SLWREC.XCTCD = XWHTBL.XCTCD[sysVar.arrayIndex]; /* CANA save country code*/
  end

   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (SL04W00.SL04W-RQT-DATA-SW != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  SL04W00.XXXTSLEN = 935; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO == 0) /* No message to display*/
    SL04W00.XXXTSPAG = 1; /* Page number to display*/
  end

   /* ------------------------------------------------------------*/
   /* get current date to use in determining life cycle code.*/
   /* ------------------------------------------------------------*/

  SL04-110(); /* get current date*/

   /* ------------------------------------------------------------*/
   /* if po info passed in slwrec, format for map display.*/
   /* else - format from user input to po nbr components.*/
   /* ------------------------------------------------------------*/

  if (SL04W00.SL04W-FORMAT-DISPLAY-PO-SW == "Y") /* if po info is*/
                                  /* passedand needs to be formatted*/
    set SWVREC empty; /* initialize swvrec*/

    TA1REC.TA1PGMNM = "SL04-100"; /* calling process for diagnosis*/

    SWVREC.SWVWFNC = "T2"; /* indicate function to perform*/

    SWVREC.XGPCD = SL04W01.SL04W-XGP-GPC-CD; /* gpc cd*/
    SWVREC.PC3POIDT = SL04W00.SL04W-PC-PO-ID-MO-RNG; /* date range*/
    SWVREC.PCFSECD = SL04W00.SL04W-PC-PO-ID-SESN-CD; /* /season code*/
    SWVREC.FY1FCTYC = SL04W00.SL04W-FY-FCTY-CD; /* factory code*/


    XSSLS10(); /* subroutine to format po info*/

    SL04W01.SL04W-PO-ID = SWVREC.SWVWPOID; /* formatted po id*/
    SL04W01.SL04W-PO-TYPE = SWVREC.PC4ORTYP; /* formatted po type*/

    SL04W00.SL04W-FORMAT-DISPLAY-PO-SW = "N";

  else

    if (SL04W01.SL04W-PO-ID != "*"
     && SL04W01.SL04W-PO-TYPE != "*") /* if map contains wildcards in*/

      set SWVREC empty; /* initialize swvrec*/

      TA1REC.TA1PGMNM = "SL04-100"; /* calling process for diagnosis*/

      SWVREC.SWVWFNC = "T1"; /* indicate function to perform*/
      SWVREC.XGPCD = SL04W01.SL04W-XGP-GPC-CD; /* gpc cd*/
      SWVREC.SWVWPOID = SL04W01.SL04W-PO-ID; /* po id*/

      XSSLS10(); /* subroutine to format po info*/

      SL04W00.SL04W-PC-PO-ID-MO-RNG = SWVREC.PC3POIDT; /* date*/
      /* MOVE SWVREC.PCFSECD TO sl04W00.sl04W-PC-PO-ID-SESN-CD;/* season*/
      SL04W00.SL04W-FY-FCTY-CD = SWVREC.FY1FCTYC; /* factory*/
      /* MOVE SWVREC.PC4ORTYP TO sl04W00.sl04W-PC-PO-OT-CD;/*ordertype*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Select the information to display in the map heading.*/
   /* ------------------------------------------------------------*/

  SL04-130(); /* Select the heading information*/

  SL04W01.SL04W-SY-STY-NM = PKNREC.SY1SSTNM; /* Style name*/
  SL04W01.SL04W-STY-COLR-NM = PKNREC.SY2CLRAB; /* color name*/

   /* ------------------------------------------------------------*/
   /* Determine life cycle code from current and effective dates*/
   /* ------------------------------------------------------------*/

  if (PKNREC.SY2CEDT1 <= SL04W00.SL04W-CURRENT-DATE)
    SL04W01.SL04W-LIFE-CYCLE = PKNREC.XLCCD1;
    SL04W00.SL04W-MAP-LIFE-CYCLE = PKNREC.XLCCD1;
  else

    if (PKNREC.SY2CEDT2 <= SL04W00.SL04W-CURRENT-DATE)
      SL04W01.SL04W-LIFE-CYCLE = PKNREC.XLCCD2;
      SL04W00.SL04W-MAP-LIFE-CYCLE = PKNREC.XLCCD2;
    else

      if (PKNREC.SY2CEDT3 <= SL04W00.SL04W-CURRENT-DATE)
        SL04W01.SL04W-LIFE-CYCLE = PKNREC.XLCCD3;
        SL04W00.SL04W-MAP-LIFE-CYCLE = PKNREC.XLCCD3;
      else

        if (PKNREC.SY2CEDT4 <= SL04W00.SL04W-CURRENT-DATE)
          SL04W01.SL04W-LIFE-CYCLE = PKNREC.XLCCD4;
          SL04W00.SL04W-MAP-LIFE-CYCLE = PKNREC.XLCCD4;
        end

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  SL04-140(); /* Select set and open cursor*/

  SL04W00.SL04W-ACCUM-LOC-OH-QTY = 0; /* initialize accumulators*/
  SL04W00.SL04W-ACCUM-LOC-RSRV-QTY = 0;
  SL04W00.SL04W-ACCUM-LOC-SAS-QTY = 0;
  SL04W00.SL04W-NET-CALC = 0;

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  SL04W00.SL04W-END-CURSOR-SW = "N"; /* End of cursor switch*/
  SL04W00.SL04W-FIRST-FETCH = "Y"; /* first fetch switch*/
  SL04W00.SL04W-MAP-FIELD-INX = 1; /* Display line index*/
  while (SL04W00.SL04W-END-CURSOR-SW == "N") /* Until end of cursor*/

    SL04-150(); /* Fetch next row in the cursor*/

    /* ------------------------------------------------------------*/
     /* If not end of cursor, save the data in display storage.*/
    /* ------------------------------------------------------------*/

    if (SL04W00.SL04W-END-CURSOR-SW == "N") /* Not end of cursor*/
      SL04-160(); /* Save data in display storage*/
    else

    /* process last accumulated location*/
      if (SL04W01.SL04W-XAR-AREA-CD[SL04W-MAP-FIELD-INX] > " "
      )
        SL04W00.SL04W-NET-CALC = SL04W00.SL04W-ACCUM-LOC-OH-QTY -         SL04W00.SL04W-ACCUM-LOC-RSRV-QTY -         SL04W00.SL04W-ACCUM-LOC-SAS-QTY;

        SL04W01.SL04W-NET-QTY[SL04W-MAP-FIELD-INX] = SL04W00.SL04W-NET-CALC;
        SL04W01.SL04W-SL-SY-LOC-RSRV-QTY[SL04W-MAP-FIELD-INX] = SL04W00.SL04W-ACCUM-LOC-RSRV-QTY;
        SL04W01.SL04W-SL-SY-LOC-OH-QTY[SL04W-MAP-FIELD-INX] = SL04W00.SL04W-ACCUM-LOC-OH-QTY;
        SL04W01.SL04W-SL-SY-LOC-SAS-QTY[SL04W-MAP-FIELD-INX] = SL04W00.SL04W-ACCUM-LOC-SAS-QTY;

        if (VSYLOC02.SY1UNPCS != 
        SL04W01.SL04W-SY-UNITS-PER-CASE[SL04W-MAP-FIELD-INX])
          SL04W01.SL04W-SY-UNITS-PER-CASE[SL04W-MAP-FIELD-INX] = -1;
        end
        SL04W00.SL04W-MAP-FIELD-INX = SL04W00.SL04W-MAP-FIELD-INX + 1;
      end

    end

    /* ------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/

    if (SL04W00.SL04W-MAP-FIELD-INX > 13) /* Page is full*/

      SL04-170(); /* Add page to temporary storage*/

      SL04W00.SL04W-MAP-FIELD-INX = 1; /* Display line index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (SL04W00.SL04W-MAP-FIELD-INX > 1) /* Page was formatted*/
    SL04-170(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  SL04-180(); /* Close the selected set cursor*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (SL04W00.TA5TSQIX == 0) /* No pages formatted*/

    SLWREC.XXXLOCID = "100"; /* Module identification*/
    SLWREC.SLWMSGNO = 44; /* No data was found to display*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  SL04W00.SL04W-RQT-DATA-SW = "N"; /* Request for data switch*/


end // end SL04-100

Function SL04-110()
  /* -----------------------------------------------------------------------*/
   /* obtain current date (ccyymmdd) using TA0040*/
  /* -----------------------------------------------------------------------*/

  set TA2REC empty; /* clear TA2REC*/

  TA2REC.TA2DTOPT = "GETDATE "; /* use getdate option in date routine*/
  TA2REC.TA2GRTYP = "G";

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date routine*/

  if (TA5REC.TA5RTNCD == 0) /* and normal return code*/

    SL04W00.SL04W-CURRENT-DATE = TA2REC.TA2GRGGN; /* current date*/
    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "110"; /* Module identification*/
  converseLib.validationFailed(01); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "GET CURRENT DATE           ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL04-110

// Purge any temporary storage
Function SL04-120()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set SL04W01 empty; /* M001 display storage*/

  SL04W00.SL04W-UPD-PAGE-SW = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  SL04W00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (SL04W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "110"; /* Module identification*/
  converseLib.validationFailed(01); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL04-120

// Select the heading information
Function SL04-130()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set PKNREC empty; /* Clear row storage area*/

  PKNREC.XGPCD = SL04W01.SL04W-XGP-GPC-CD; /* GPC code*/
  PKNREC.SY1STNBR = SL04W01.SL04W-SY-STY-NBR; /* Style number*/
  PKNREC.SY2CLRID = SL04W01.SL04W-SY-COLR-CD-ID; /* color id*/
  PKNREC.XDMCD = SL04W01.SL04W-XDM-DIM-CD; /* dimension code*/

  try
    call "IO1810" ("S ", SQLCA, PKNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      /* CANADA 08/25/95*/

      if (SLWREC.XCTCD == "CANA")

        /* format ta1rec in case of bad return code from call to SY2000*/

        TA1REC.TA1PGMNM = "SL04"; /* CANA program name*/
        TA1REC.TA1LOC = "SL04130"; /* CANA sgrp name*/

        XSSL-CALL-SY2000(); /* CANA call SY2000 to get*/
                              /* product region record*/
        if (WSY2000.WSY2000-RETURN-CODE == 0) /* CANA row found*/
          return;
        else
          if (WSY2000.WSY2000-RETURN-CODE == 02) /* CANA row not found*/

            converseLib.validationFailed(456); /* invalid style/color*/

            SLWREC.XXXLOCID = "130"; /* module identification*/

            exit stack; /* Return to flow*/

          end
          if (WSY2000.WSY2000-RETURN-CODE == 98) /* CANA database busy*/

            converseLib.validationFailed(31); /* Data in use by another*/
            TA1REC.TA1FUNC = "POST"; /* Termination function*/

          else

            converseLib.validationFailed(01); /* Unexpected error occurred*/
            TA1REC.TA1FUNC = "RETN"; /* Termination function*/

            converseLib.clearScreen();
             /* Clear screen before display*/

          end
          converseLib.validationFailed(0001); /* Indicate system error*/
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1LOC = "CALL SY2000";
          TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program appl*/
          TA1REC.TA1PGMNM = "SL04130"; /* Program number*/
          TA1REC.TA1MAP = SLWREC.XXXMAPNM; /* Map name*/
          TA1REC.TA1DBASE = "DPROD  "; /* Data base name*/
          TA1REC.TA1TBLVU = "VSYREG02"; /* Table view name*/
          TA1REC.TA1TBLKE = PKNREC.PKNKEY; /* Table key*/

                              /* Error diagnosis routine*/
          call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

          exit stack; /* Exit to display map*/

        end
      end
      return; /* Return to previous process*/
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      converseLib.validationFailed(56); /* invalid style/color*/

      SLWREC.XXXLOCID = "130"; /* module identification*/

      exit stack; /* Return to flow*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "130"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN STYLE NAME FOR HEADING";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSTYLE01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKNREC.PKNKEY; /* Table key*/
  TA1REC.TA1MAPNO = "M001"; /* map number*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL04-130

// Select set and open cursor
Function SL04-140()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set VSYLOC02 empty; /* Clear row storage area*/

  VSYLOC02.XWHCD = SL04W01.SL04W-XWH-WHSE-CD; /* warehouse code*/
  VSYLOC02.XGPCD = SL04W01.SL04W-XGP-GPC-CD; /* GPC*/
  VSYLOC02.SY1STNBR = SL04W01.SL04W-SY-STY-NBR; /* Style*/
  VSYLOC02.SY2CLRID = SL04W01.SL04W-SY-COLR-CD-ID; /* color id*/
  VSYLOC02.XDMCD = SL04W01.SL04W-XDM-DIM-CD; /* dimension code*/
  VSYLOC02.XQACD = SL04W01.SL04W-XQA-QUAL-CD; /* quality code*/
  VSYLOC02.XOWCD = SL04W01.SL04W-XOW-OWN-GRP-CD; /* own group*/
  VSYLOC02.PC2INSEG = SL04W01.SL04W-PC-CU-IN-SEG-CD; /* iseg code*/
  VSYLOC02.XEGCD = SL04W01.SL04W-XEG-ENGR-DIFF-CD; /* engr code*/
  VSYLOC02.XUMCD = SL04W01.SL04W-XUM-UOM-CD; /* unit of measure code*/
  VSYLOC02.XSLCD = SL04W01.SL04W-XSL-CLASS-CD; /* class code*/
  VSYLOC02.PC3PONBR = SL04W01.SL04W-PC-PO-NBR; /* /po nbr*/
  VSYLOC02.PC-SAP-PO-NBR = SL04W01.SL04W-PC-SAP-PO-NBR; /* /sap po nbr*/
  VSYLOC02.PC3POIDT = SL04W00.SL04W-PC-PO-ID-MO-RNG; /* date range*/
  VSYLOC02.PCFSECD = "*"; /* season*/
  VSYLOC02.FY1FCTYC = SL04W00.SL04W-FY-FCTY-CD; /* factory*/
  VSYLOC02.PC4ORTYP = SL04W01.SL04W-PO-TYPE; /* order type*/
  VSYLOC02.SY1UNPCS = SL04W01.SL04W-UNPCS; /* units per case*/

  if (SL04W01.SL04W-SIZE == "   -1" || 
  SL04W01.SL04W-SIZE == "-1")
    VSYLOC02.SY5SZID = -1;
  else
    SYPREC.SY4IDDSC = SL04W01.SL04W-SIZE; /* wildcard size id*/

    SL04-141(); /* convert size description to size id*/

    VSYLOC02.SY5SZID = SYPREC.SY5SZID;

  end

  try
    call "VSYLOC02" ("SD", SQLCA, VSYLOC02) {isNoRefresh = yes, isExternal = yes};
  end /* Select table*/

    /* ------------------------------------------------------------*/
    /* If successful, initialize the line index and cursor switch.*/
    /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

    /* ------------------------------------------------------------*/
    /* If data not available, return an error message to the user.*/
    /* Otherwise, indicate that an unexpected error has occurred.*/
    /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "140"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(011); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYLOC02"; /* Table view name*/
  TA1REC.TA1TBLKE = VSYLOC02.VSYLOC02-KEY; /* Table key*/
  TA1REC.TA1MAPNO = "M001"; /* map number*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SL04-140

Function SL04-141()
   /* ------------------------------------------------------------*/
   /* change size entered to internal size id*/
   /* ------------------------------------------------------------*/

  set SYPREC empty;

  SYPREC.SYPFC = "EI"; /* get all valid sizes*/
  SYPREC.SYPCMPSW = "C"; /* indicate compressed format*/

  SYPREC.XGPCD = SL04M001.SL04M-XGP-GPC-CD;
  SYPREC.SY1STNBR = SL04M001.SL04M-SY-STY-NBR;
  SYPREC.SY2CLRID = SL04M001.SL04M-SY-COLR-CD-ID;
  SYPREC.XDMCD = SL04M001.SL04M-XDM-DIM-CD;
  SYPREC.XQACD = SL04M001.SL04M-XQA-QUAL-CD;
  SYPREC.SY4IDDSC = SL04M001.SL04M-SIZE;

  TA1REC.TA1LOCAT[2] = "141 ";
  TA1REC.TA1MAP = "SL04M001";

  call "SY1190" (SQLCA, SYPREC) {isNoRefresh = yes, isExternal = yes};

  if (SYPREC.SYPRC != 0)
    if (SYPREC.SYPRC == 9)

      SLWREC.XXXLOCID = "500"; /* Module identification*/
      set SL04M001.SL04M-XWH-WHSE-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(238); /* invalid key*/
      return;

    else
      if (SYPREC.SYPRC == 10)

        SLWREC.XXXLOCID = "500"; /* Module identification*/
        set SL04M001.SL04M-XWH-WHSE-CD cursor, bold; /* Highlight*/
        converseLib.validationFailed(238); /* invalid key*/
        return;

      else

        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "XSSYPI0 ";
        TA1REC.TA1LOCAT[1] = "SY1190  ";
        TA1REC.TA1LOCAT[3] = SYPREC.SYPRCX;
        TA1REC.TA1LOCAT[4] = "SZ XLATE";
        TA1REC.TA1DBASE = "MULTIPLE";
        TA1REC.TA1TBLVU = "DB VIEWS";
        TA1REC.TA1TBLKE = SYPREC.SYPKEY;
        move SQLCA to ERRSQLCA withV60Compat;
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback();
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

      end
    end
  end

end // end SL04-141

// Fetch next row in the cursor
Function SL04-150()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VSYLOC02" ("ND", SQLCA, VSYLOC02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

   /* Indicate end of cursor*/
      SL04W00.SL04W-END-CURSOR-SW = "Y";
      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "150"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYLOC02"; /* Table view name*/
  TA1REC.TA1TBLKE = VSYLOC02.VSYLOC02-KEY; /* Table key*/
  TA1REC.TA1MAPNO = "M001"; /* map number*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL04-150

// Save data in display storage
Function SL04-160()
   /* ------------------------------------------------------------*/
   /* If first line on subsequent page, save heading information.*/
   /* ------------------------------------------------------------*/

  if (SL04W00.TA5TSQIX > 0 /* Not the first page*/
   && SL04W00.SL04W-MAP-FIELD-INX == 1) /* and first line on page*/

    SL04W01.SL04W-XGP-GPC-CD = PKNREC.XGPCD; /* GPC code*/
    SL04W01.SL04W-SY-STY-NBR = PKNREC.SY1STNBR; /* Style number*/
    SL04W01.SL04W-SY-COLR-CD-ID = PKNREC.SY2CLRID; /* color id*/
    SL04W01.SL04W-XDM-DIM-CD = PKNREC.XDMCD; /* dimension code*/
    SL04W01.SL04W-SY-STY-NM = PKNREC.SY1SSTNM; /* style name*/
    SL04W01.SL04W-STY-COLR-NM = PKNREC.SY2CLRAB; /* color name*/
    SL04W01.SL04W-XWH-WHSE-CD = VSYLOC02.XWHCD; /* warehouse code*/
    SL04W01.SL04W-XWH-WHSE-NM = SL04M001.SL04M-XWH-WHSE-NM;
    SL04W01.SL04W-XQA-QUAL-CD = VSYLOC02.XQACD; /* quality code*/
    SL04W01.SL04W-XOW-OWN-GRP-CD = VSYLOC02.XOWCD; /* own group*/
    SL04W01.SL04W-PC-CU-IN-SEG-CD = VSYLOC02.PC2INSEG; /* invent seg*/
    SL04W01.SL04W-XEG-ENGR-DIFF-CD = VSYLOC02.XEGCD; /* engineer diff*/
    SL04W01.SL04W-XUM-UOM-CD = VSYLOC02.XUMCD; /* unit of measure*/
    SL04W01.SL04W-XSL-CLASS-CD = VSYLOC02.XSLCD; /* class code*/
    SL04W01.SL04W-PC-SAP-PO-NBR = SL04W00.SL04W-MAP-PC-SAP-PO-NBR;
    SL04W01.SL04W-PC-PO-NBR = SL04W00.SL04W-MAP-PO-NBR;
    SL04W01.SL04W-PO-ID = SL04W00.SL04W-MAP-PO-ID;
    SL04W01.SL04W-PO-TYPE = SL04W00.SL04W-MAP-PO-TYPE;
    SL04W01.SL04W-LIFE-CYCLE = SL04W00.SL04W-MAP-LIFE-CYCLE;
    SL04W01.SL04W-UNPCS = SL04W00.SL04W-HEADER-UNPCS;
    SL04W01.SL04W-SIZE = SL04W00.SL04W-HEADER-SIZE;

  end

  if (SL04W00.SL04W-FIRST-FETCH == "Y")

    SL04W00.SL04W-NET-CALC = 0;
    SL04W00.SL04W-ACCUM-LOC-SAS-QTY = 0;
    SL04W00.SL04W-ACCUM-LOC-OH-QTY = 0;
    SL04W00.SL04W-ACCUM-LOC-RSRV-QTY = 0;

    SL04W01.SL04W-XAR-AREA-CD[SL04W-MAP-FIELD-INX] = VSYLOC02.XARCD;
    SL04W01.SL04W-SL-ZONE-CD[SL04W-MAP-FIELD-INX] = VSYLOC02.SL4ZONE;
    SL04W01.SL04W-SL-LOC-CD[SL04W-MAP-FIELD-INX] = VSYLOC02.SL5LOCTN;
    SL04W00.SL04W-HOLD-LOCATION = VSYLOC02.SL5LOCTN;

    SL04-161(); /* get location status*/

    SL04W01.SL04W-YLS-LOC-STAT-CD[SL04W-MAP-FIELD-INX] = SL5REC.YLSCD;

    SL04W01.SL04W-SL-RLOG-PLT-NBR[SL04W-MAP-FIELD-INX] = VSYLOC02.SL2PALET;
    SL04W01.SL04W-SL-RLOG-CASE[SL04W-MAP-FIELD-INX] = VSYLOC02.SL2CASE;
    SL04W01.SL04W-SL-RCV-LOT-ID[SL04W-MAP-FIELD-INX] = VSYLOC02.SL-RCV-LOT-ID;
    SL04W00.SL04W-HOLD-UNPCS = VSYLOC02.SY1UNPCS;
  end

  if (SL04W00.SL04W-HOLD-LOCATION != VSYLOC02.SL5LOCTN) /* accum on location*/

    SL04W00.SL04W-NET-CALC = SL04W00.SL04W-ACCUM-LOC-OH-QTY -     SL04W00.SL04W-ACCUM-LOC-RSRV-QTY - SL04W00.SL04W-ACCUM-LOC-SAS-QTY;

    SL04W01.SL04W-NET-QTY[SL04W-MAP-FIELD-INX] = SL04W00.SL04W-NET-CALC;
    SL04W01.SL04W-SL-SY-LOC-RSRV-QTY[SL04W-MAP-FIELD-INX] = SL04W00.SL04W-ACCUM-LOC-RSRV-QTY;
    SL04W01.SL04W-SL-SY-LOC-OH-QTY[SL04W-MAP-FIELD-INX] = SL04W00.SL04W-ACCUM-LOC-OH-QTY;
    SL04W01.SL04W-SL-SY-LOC-SAS-QTY[SL04W-MAP-FIELD-INX] = SL04W00.SL04W-ACCUM-LOC-SAS-QTY;

    if (SL04W00.SL04W-HOLD-UNPCS != 
    SL04W01.SL04W-SY-UNITS-PER-CASE[SL04W-MAP-FIELD-INX])
      SL04W01.SL04W-SY-UNITS-PER-CASE[SL04W-MAP-FIELD-INX] = -1;
    end

    SL04W00.SL04W-MAP-FIELD-INX = SL04W00.SL04W-MAP-FIELD-INX + 1;

    if (SL04W00.SL04W-MAP-FIELD-INX > 13)
      SL04-170();
      SL04W00.SL04W-MAP-FIELD-INX = 1;
    end

    SL04W00.SL04W-HOLD-LOCATION = VSYLOC02.SL5LOCTN;
    SL04W00.SL04W-HOLD-UNPCS = VSYLOC02.SY1UNPCS;

    SL04W00.SL04W-NET-CALC = 0;
    SL04W00.SL04W-ACCUM-LOC-SAS-QTY = 0;
    SL04W00.SL04W-ACCUM-LOC-OH-QTY = 0;
    SL04W00.SL04W-ACCUM-LOC-RSRV-QTY = 0;


    SL04W01.SL04W-XAR-AREA-CD[SL04W-MAP-FIELD-INX] = VSYLOC02.XARCD;
    SL04W01.SL04W-SL-ZONE-CD[SL04W-MAP-FIELD-INX] = VSYLOC02.SL4ZONE;
    SL04W01.SL04W-SL-LOC-CD[SL04W-MAP-FIELD-INX] = VSYLOC02.SL5LOCTN;

    SL04-161();

    SL04W01.SL04W-YLS-LOC-STAT-CD[SL04W-MAP-FIELD-INX] = SL5REC.YLSCD;

    SL04W01.SL04W-SL-RLOG-PLT-NBR[SL04W-MAP-FIELD-INX] = VSYLOC02.SL2PALET;
    SL04W01.SL04W-SL-RLOG-CASE[SL04W-MAP-FIELD-INX] = VSYLOC02.SL2CASE;
    SL04W01.SL04W-SL-RCV-LOT-ID[SL04W-MAP-FIELD-INX] = VSYLOC02.SL-RCV-LOT-ID;

  end

  SL04W01.SL04W-SY-UNITS-PER-CASE[SL04W-MAP-FIELD-INX] = VSYLOC02.SY1UNPCS;
  SL04W00.SL04W-FIRST-FETCH = "N";
  SL04W00.SL04W-ACCUM-LOC-SAS-QTY = SL04W00.SL04W-ACCUM-LOC-SAS-QTY +   VSYLOC02.SL6STASD;
  SL04W00.SL04W-ACCUM-LOC-OH-QTY = SL04W00.SL04W-ACCUM-LOC-OH-QTY +   VSYLOC02.SL6ONHND;
  SL04W00.SL04W-ACCUM-LOC-RSRV-QTY = SL04W00.SL04W-ACCUM-LOC-RSRV-QTY +   VSYLOC02.SL6PKRSV;


end // end SL04-160

// Select set and open cursor
Function SL04-161()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  set SL5REC empty; /* Clear row storage area*/

  SL5REC.XWHCD = SL04W01.SL04W-XWH-WHSE-CD; /* warehouse code*/
  SL5REC.XARCD = SL04W01.SL04W-XAR-AREA-CD[SL04W-MAP-FIELD-INX]; /* area code*/
  SL5REC.SL4ZONE = SL04W01.SL04W-SL-ZONE-CD[SL04W-MAP-FIELD-INX]; /* zone code*/
  SL5REC.SL5LOCTN = SL04W01.SL04W-SL-LOC-CD[SL04W-MAP-FIELD-INX]; /* location*/

  try
    call "IO1490" ("S ", SQLCA, SL5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select unique*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the line index and cursor switch.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  else
    if (SQLCA.VAGen_SQLCODE == 100)
      SL5REC.YLSCD = " ";
      return;
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "161"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(011); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYLOC01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL5REC.SL5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL04-161

// Add page to temporary storage
Function SL04-170()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  SL04W01.XXXTSLEN = SL04W00.XXXTSLEN; /* Temporary storage   lengt;*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (SL04W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set SL04W01 empty; /* M001 display storage*/

    SL04W00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "170"; /* Module identification*/
  converseLib.validationFailed(01); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL04-170

// Close selected set cursor
Function SL04-180()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "VSYLOC02" ("CD", SQLCA, VSYLOC02) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "180"; /* Module identification*/
  converseLib.validationFailed(01); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYLOC02"; /* Table view name*/
  TA1REC.TA1MAPNO = "M001"; /* map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL04-180

// Format and converse the map
Function SL04-200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (SL04W00.SL04W-RQT-DATA-SW == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (SL04W00.SL04W-FORMAT-MAP-SW == "Y") /* Map must be formatted*/
      SL04-210(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SL04M001.SL04M-XXX-CURR-DT = VGVar.currentShortGregorianDate; /* Current date*/

  SL04M001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SL04M001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SL04M001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    SL04M001.SL04M-XXX-MODID = SLWREC.XXXLOCID; /* Module ID*/

    set SL04M001 alarm; /* Indicate sound alarm*/

  end

  converse SL04M001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = " "; /* Module identification*/
  SLWREC.SLWMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = SL04M001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SL04M001.CAITEM; /* Application data*/


end // end SL04-200

// Format the display data
Function SL04-210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set SL04M001 initial; /* map input/output area*/

  SL04W00.SL04W-FORMAT-MAP-SW = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (SL04W00.TA5TSQIX > 0) /* Pages were formatted*/

    if (SL04W00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (SL04W00.SL04W-UPD-PAGE-SW == "Y") /* Current page was changed*/

        SL04S01(); /* Update temporary storage page*/

        SL04W00.SL04W-UPD-PAGE-SW = "N"; /* Storage update switch*/

      end

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (SL04W00.XXXTSPAG > SL04W00.TA5TSQIX) /* Desired greater highest*/
        SL04W00.XXXTSPAG = SL04W00.TA5TSQIX; /* Default to highest*/
      end

      SL04S02(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set SL04M001.XXXLITPG skip; /* "PAGE" literal*/
    SL04M001.XXXTSPAG = SL04W00.XXXTSPAG; /* Current page*/
    set SL04M001.XXXLITOF skip; /* "OF" literal*/
    SL04M001.TA5TSQIX = SL04W00.TA5TSQIX; /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  SL04M001.SL04M-XWH-WHSE-CD = SL04W01.SL04W-XWH-WHSE-CD; /* warehouse code*/

  SL04M001.SL04M-XWH-WHSE-NM = SL04W01.SL04W-XWH-WHSE-NM; /* warehouse code*/

  SL04M001.SL04M-XGP-GPC-CD = SL04W01.SL04W-XGP-GPC-CD; /* GPC code*/

  SL04M001.SL04M-SY-STY-NBR = SL04W01.SL04W-SY-STY-NBR; /* Style number*/

  SL04M001.SL04M-SY-COLR-CD-ID = SL04W01.SL04W-SY-COLR-CD-ID; /* color code*/

  SL04M001.SL04M-XDM-DIM-CD = SL04W01.SL04W-XDM-DIM-CD; /* dimension code*/

  SL04M001.SL04M-XQA-QUAL-CD = SL04W01.SL04W-XQA-QUAL-CD; /* quality code*/

  SL04M001.SL04M-SY-STY-NM = SL04W01.SL04W-SY-STY-NM; /* Style name*/

  SL04M001.SL04M-STY-COLR-NM = SL04W01.SL04W-STY-COLR-NM; /* color name*/

  SL04M001.SL04M-PC-CU-IN-SEG-CD = SL04W01.SL04W-PC-CU-IN-SEG-CD;

  SL04M001.SL04M-XEG-ENGR-DIFF-CD = SL04W01.SL04W-XEG-ENGR-DIFF-CD;

  SL04M001.SL04M-XSL-CLASS-CD = SL04W01.SL04W-XSL-CLASS-CD;

  SL04M001.SL04M-XUM-UOM-CD = SL04W01.SL04W-XUM-UOM-CD;

  SL04M001.SL04M-XOW-OWN-GRP-CD = SL04W01.SL04W-XOW-OWN-GRP-CD;

  SL04M001.SL04M-LIFE-CYCLE = SL04W01.SL04W-LIFE-CYCLE;

  SL04M001.SL04M-PO-ID = SL04W01.SL04W-PO-ID;

  SL04M001.SL04M-PC-PO-NBR = SL04W01.SL04W-PC-PO-NBR;

  SL04M001.SL04M-PC-SAP-PO-NBR = SL04W01.SL04W-PC-SAP-PO-NBR;

  SL04M001.SL04M-PO-TYPE = SL04W01.SL04W-PO-TYPE;

  SL04M001.SL04M-SIZE = SL04W01.SL04W-SIZE;

  SL04M001.SL04M-UNPCS = SL04W01.SL04W-UNPCS;

   /* set cursor at blank fields*/

  if (SL04M001.SL04M-SY-STY-NBR == " ")
    set SL04M001.SL04M-SY-STY-NBR cursor;
  else
    if (SL04M001.SL04M-SIZE == " ")
      set SL04M001.SL04M-SIZE cursor;
    end
  end

  SL04W00.SL04W-MAP-FIELD-INX = 1; /* Initialize line index*/

  while (SL04W00.SL04W-MAP-FIELD-INX <= 13 /* Until screen is full*/
   && SL04W01.SL04W-XAR-AREA-CD[SL04W-MAP-FIELD-INX] > " ")

    if (SL04W00.SL04W-MAP-FIELD-INX == 1) /* First select field*/

      set SL04M001.SL04M-SELECT[SL04W-MAP-FIELD-INX] cursor, normal;
    else
      set SL04M001.SL04M-SELECT[SL04W-MAP-FIELD-INX] normal; /* Unprotect*/

    end

   /* --------------------------------------------------------------------*/
   /* move display fields from working storage*/
   /* --------------------------------------------------------------------*/

    /* selection column*/
    SL04M001.SL04M-SELECT[SL04W-MAP-FIELD-INX] = SL04W01.SL04W-SELECT[SL04W-MAP-FIELD-INX];

    SL04M001.SL04M-XAR-AREA-CD[SL04W-MAP-FIELD-INX] = SL04W01.SL04W-XAR-AREA-CD[SL04W-MAP-FIELD-INX];

    SL04M001.SL04M-SL-ZONE-CD[SL04W-MAP-FIELD-INX] = SL04W01.SL04W-SL-ZONE-CD[SL04W-MAP-FIELD-INX];

    SL04M001.SL04M-SL-LOC-CD[SL04W-MAP-FIELD-INX] = SL04W01.SL04W-SL-LOC-CD[SL04W-MAP-FIELD-INX];

    SL04M001.SL04M-YLS-LOC-STAT-CD[SL04W-MAP-FIELD-INX] = SL04W01.SL04W-YLS-LOC-STAT-CD[SL04W-MAP-FIELD-INX];

    SL04M001.SL04M-SL-RLOG-PLT-NBR[SL04W-MAP-FIELD-INX] = SL04W01.SL04W-SL-RLOG-PLT-NBR[SL04W-MAP-FIELD-INX];

    SL04M001.SL04M-SL-RLOG-CASE[SL04W-MAP-FIELD-INX] = SL04W01.SL04W-SL-RLOG-CASE[SL04W-MAP-FIELD-INX];

    SL04M001.SL04M-SL-RCV-LOT-ID[SL04W-MAP-FIELD-INX] = SL04W01.SL04W-SL-RCV-LOT-ID[SL04W-MAP-FIELD-INX];

    SL04M001.SL04M-SY-UNITS-PER-CASE[SL04W-MAP-FIELD-INX] = SL04W01.SL04W-SY-UNITS-PER-CASE[SL04W-MAP-FIELD-INX];

    SL04M001.SL04M-NET-QTY[SL04W-MAP-FIELD-INX] = SL04W01.SL04W-NET-QTY[SL04W-MAP-FIELD-INX];

    SL04M001.SL04M-SL-SY-LOC-OH-QTY[SL04W-MAP-FIELD-INX] = SL04W01.SL04W-SL-SY-LOC-OH-QTY[SL04W-MAP-FIELD-INX];

    SL04M001.SL04M-SL-SY-LOC-RSRV-QTY[SL04W-MAP-FIELD-INX] = SL04W01.SL04W-SL-SY-LOC-RSRV-QTY[SL04W-MAP-FIELD-INX];

    SL04M001.SL04M-SL-SY-LOC-SAS-QTY[SL04W-MAP-FIELD-INX] = SL04W01.SL04W-SL-SY-LOC-SAS-QTY[SL04W-MAP-FIELD-INX];

    SL04W00.SL04W-MAP-FIELD-INX = SL04W00.SL04W-MAP-FIELD-INX + 1;

  end


end // end SL04-210

// Check attention identifier
Function SL04-300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (SL04W00.SL04W-RQT-DATA-SW == "Y") /* Request for data*/
      set SL04W01 empty; /* M001 display storage*/
    end

    SL04W00.SL04W-FORMAT-MAP-SW = "Y"; /* Format the map switch*/
    SL04W00.SL04W-RQT-DATA-SW = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (SL04M001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      SL04-110(); /* Purge temporary storage*/

      XSSL001(); /* Exit to another application*/

      set SL04M001.CATOAP cursor, bold; /* Highlight*/

    else

      SLWREC.XXXLOCID = "300"; /* Module identification*/
      converseLib.validationFailed(258); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SL04M001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "SL0A"; /* TO application*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "SL0M"; /* TO application*/
    end

    SL04-110(); /* Purge temporary storage*/

    XSSL001(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is pf12  /* and PF12 was  pressed*/
   || converseVar.eventKey is pf13  /* and PF13 was  pressed*/
   || converseVar.eventKey is pf14  /* and PF14 was  pressed*/
   || converseVar.eventKey is pf16  /* and PF16 was  pressed*/
   || converseVar.eventKey is pf17  /* and PF17 was  pressed*/
   || converseVar.eventKey is pf18  /* and PF18 was  pressed*/
   || converseVar.eventKey is enter /* ENTER was not pressed*/
   || converseVar.eventKey is pf7   /* and PF7 was  pressed*/
   || converseVar.eventKey is pf8)  /* and PF8 was  pressed*/

    /* next sentence*/

  else

    SLWREC.XXXLOCID = "300"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end SL04-300

// Reset highlighted fields
Function SL04-400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SL04M001.SL04M-XWH-WHSE-CD initialAttributes; /* warehouse code*/
  set SL04M001.SL04M-XGP-GPC-CD initialAttributes; /* GPC code*/
  set SL04M001.SL04M-SY-STY-NBR initialAttributes; /* Style code*/
  set SL04M001.SL04M-SY-COLR-CD-ID initialAttributes; /* color code*/
  set SL04M001.SL04M-XDM-DIM-CD initialAttributes; /* dimension code*/
  set SL04M001.SL04M-XQA-QUAL-CD initialAttributes; /* quality code*/
  set SL04M001.SL04M-LIFE-CYCLE initialAttributes; /* life cycle*/
  set SL04M001.SL04M-XOW-OWN-GRP-CD initialAttributes; /* own group*/
  set SL04M001.SL04M-PC-CU-IN-SEG-CD initialAttributes; /* inventory segment*/
  set SL04M001.SL04M-XEG-ENGR-DIFF-CD initialAttributes; /* engineering diff*/
  set SL04M001.SL04M-XUM-UOM-CD initialAttributes; /* unit of measure*/
  set SL04M001.SL04M-XSL-CLASS-CD initialAttributes; /* class code*/
  set SL04M001.SL04M-PO-ID initialAttributes; /* po id*/
  set SL04M001.SL04M-PO-TYPE initialAttributes; /* po type*/
  set SL04M001.SL04M-PC-PO-NBR initialAttributes; /* po nbr*/
  set SL04M001.SL04M-PC-SAP-PO-NBR initialAttributes; /* sap po nbr*/
  set SL04M001.SL04M-UNPCS initialAttributes; /* units per case*/
  set SL04M001.SL04M-SIZE initialAttributes; /* size*/

  SL04W00.SL04W-MAP-FIELD-INX = 1; /* Initialize line index*/

  while (SL04W00.SL04W-MAP-FIELD-INX <= 13 /* Until end of lines*/
   && SL04M001.SL04M-NET-QTY[SL04W-MAP-FIELD-INX] > 0)
                                  /* or end of display*/

    set SL04M001.SL04M-SELECT[SL04W-MAP-FIELD-INX] normal;
                                  /* reset select flag*/

    SL04W00.SL04W-MAP-FIELD-INX = SL04W00.SL04W-MAP-FIELD-INX + 1;
                                  /* Increment line index*/

  end

  set SL04M001.CATOAP initialAttributes; /* TO application*/
  set SL04M001.CAITEM initialAttributes; /* Application data*/

   /* ----------------------------------------------------------------------*/
    /* pop-up window option -- if not selected, return to previous process*/
   /* ----------------------------------------------------------------------*/

  if (SL04M001.SL04M-XWH-WHSE-CD == "?"
   || SL04M001.SL04M-XGP-GPC-CD == "?"
   || SL04M001.SL04M-XDM-DIM-CD == "?"
   || SL04M001.SL04M-XQA-QUAL-CD == "?"
   || SL04M001.SL04M-XEG-ENGR-DIFF-CD == "?"
   || SL04M001.SL04M-XUM-UOM-CD == "?"
   || SL04M001.SL04M-XOW-OWN-GRP-CD == "?"
   || SL04M001.SL04M-XSL-CLASS-CD == "?")

    if (converseVar.eventKey not enter) /* enter was not pressed*/

      SLWREC.XXXLOCID = "400"; /* module identification*/
      converseLib.validationFailed(4); /* pkkey invalid*/

      exit stack; /* exit to display map*/

    end

  else

    return; /* return to previous processing*/

  end

  SL04-410();

   /* ----------------------------------------------------------------------*/
   /* clear screen for pop-ups, then display map*/
   /* ----------------------------------------------------------------------*/

  converseLib.clearScreen();
   /* clear screen before display*/

  exit stack; /* exit to display map*/
end // end SL04-400

// Pop-up window lists
Function SL04-410()
   /* ------------------------------------------------------------*/
   /* warehouse pop-up window*/
   /* ------------------------------------------------------------*/

  if (SL04M001.SL04M-XWH-WHSE-CD == "?") /* Warehouse list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "  WAREHOUSE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXWH01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SL04M001.SL04M-XWH-WHSE-CD = SL04W01.SL04W-XWH-WHSE-CD;
    else
      SL04M001.SL04M-XWH-WHSE-CD = XWHTBL.XWHCD[XX0XWPIX];
      SL04W01.SL04W-XWH-WHSE-CD = XWHTBL.XWHCD[XX0XWPIX];

    end

    set SL04M001.SL04M-XWH-WHSE-CD cursor;
    SLWREC.XXXLOCID = "410"; /* module indentification*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* gpc pop-up window*/
   /* ------------------------------------------------------------*/

  if (SL04M001.SL04M-XGP-GPC-CD == "?") /* Warehouse list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "GPC CODE   "; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXGP01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SL04M001.SL04M-XGP-GPC-CD = SL04W01.SL04W-XGP-GPC-CD;
    else
      SL04M001.SL04M-XGP-GPC-CD = XGPTBL.XGPCD[XX0XWPIX];
      SL04W01.SL04W-XGP-GPC-CD = XGPTBL.XGPCD[XX0XWPIX];

    end

    set SL04M001.SL04M-XGP-GPC-CD cursor; /* Establish cursor position*/
    SLWREC.XXXLOCID = "410"; /* module indentification*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* dimension pop-up window*/
   /* ------------------------------------------------------------*/

  if (SL04M001.SL04M-XDM-DIM-CD == "?") /* Warehouse list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "DIMENSION CODE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXDM01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SL04M001.SL04M-XDM-DIM-CD = SL04W01.SL04W-XDM-DIM-CD;
    else
      SL04M001.SL04M-XDM-DIM-CD = XDMTBL.XDMCD[XX0XWPIX];
      SL04W01.SL04W-XDM-DIM-CD = XDMTBL.XDMCD[XX0XWPIX];

    end

    set SL04M001.SL04M-XDM-DIM-CD cursor;
    SLWREC.XXXLOCID = "410"; /* module indentification*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* quality code pop-up window*/
   /* ------------------------------------------------------------*/

  if (SL04M001.SL04M-XQA-QUAL-CD == "?") /* Warehouse list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "QUALITY CODE "; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXQA01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SL04M001.SL04M-XQA-QUAL-CD = SL04W01.SL04W-XQA-QUAL-CD;
    else
      SL04M001.SL04M-XQA-QUAL-CD = XQATBL.XQACD[XX0XWPIX];
      SL04W01.SL04W-XQA-QUAL-CD = XQATBL.XQACD[XX0XWPIX];

    end

    set SL04M001.SL04M-XQA-QUAL-CD cursor;
    SLWREC.XXXLOCID = "410"; /* module indentification*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* engineering difference code pop-up window*/
   /* ------------------------------------------------------------*/

  if (SL04M001.SL04M-XEG-ENGR-DIFF-CD == "?") /* Warehouse list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "ENGR DIFFERENCE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXEG01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SL04M001.SL04M-XEG-ENGR-DIFF-CD = SL04W01.SL04W-XEG-ENGR-DIFF-CD;
    else
      SL04M001.SL04M-XEG-ENGR-DIFF-CD = XEGTBL.XEGCD[XX0XWPIX];
      SL04W01.SL04W-XEG-ENGR-DIFF-CD = XEGTBL.XEGCD[XX0XWPIX];

    end

    set SL04M001.SL04M-XEG-ENGR-DIFF-CD cursor;
    SLWREC.XXXLOCID = "410"; /* module indentification*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* unit of measure pop-up window*/
   /* ------------------------------------------------------------*/

  if (SL04M001.SL04M-XUM-UOM-CD == "?") /* Warehouse list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "UNIT OF MEASURE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXUM01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SL04M001.SL04M-XUM-UOM-CD = SL04W01.SL04W-XUM-UOM-CD;
    else
      SL04M001.SL04M-XUM-UOM-CD = XUMTBL.XUMCD[XX0XWPIX];
      SL04W01.SL04W-XUM-UOM-CD = XUMTBL.XUMCD[XX0XWPIX];

    end

    set SL04M001.SL04M-XUM-UOM-CD cursor;
    SLWREC.XXXLOCID = "410"; /* module indentification*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* own group code pop-up window*/
   /* ------------------------------------------------------------*/

  if (SL04M001.SL04M-XOW-OWN-GRP-CD == "?") /* Warehouse list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "OWN GROUP CODE"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXOW01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SL04M001.SL04M-XOW-OWN-GRP-CD = SL04W01.SL04W-XOW-OWN-GRP-CD;
    else
      SL04M001.SL04M-XOW-OWN-GRP-CD = XOWTBL.XOWCD[XX0XWPIX];
      SL04W01.SL04W-XOW-OWN-GRP-CD = XOWTBL.XOWCD[XX0XWPIX];

    end

    set SL04M001.SL04M-XOW-OWN-GRP-CD cursor;
    SLWREC.XXXLOCID = "410"; /* module indentification*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* class code pop-up window*/
   /* ------------------------------------------------------------*/

  if (SL04M001.SL04M-XSL-CLASS-CD == "?") /* Warehouse list requested*/

    XPXX001(); /* Window initialization*/
    XX0XW02.XX0XWHDR = "CLASS CODE "; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXSL01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

      SL04M001.SL04M-XSL-CLASS-CD = SL04W01.SL04W-XSL-CLASS-CD;
    else
      SL04M001.SL04M-XSL-CLASS-CD = XSLTBL.XSLCD[XX0XWPIX];
      SL04W01.SL04W-XSL-CLASS-CD = XSLTBL.XSLCD[XX0XWPIX];

    end

    set SL04M001.SL04M-XSL-CLASS-CD cursor;
    SLWREC.XXXLOCID = "410"; /* module indentification*/
    return;

  end



end // end SL04-410

// Verify data that was entered
Function SL04-500()
   /* -----------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (SL04M001.CAITEM > " ") /* Application data was entered*/

    SLWREC.XXXLOCID = "500"; /* Module identification*/
    set SL04M001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(259); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    SL04-510(); /* Verify scroll request*/

  else

    if (SL04W00.TA5TSQIX > 0) /* page was formatted*/

      SL04W00.SL04W-MAP-FIELD-INX = 13; /* initialize map index*/
      SL04W00.SL04W-ROW-SELECTED = "N";

      while (SL04W00.SL04W-MAP-FIELD-INX > 0) /* until end of lines*/

        SL04-520(); /* verify data in line*/

        SL04W00.SL04W-MAP-FIELD-INX = SL04W00.SL04W-MAP-FIELD-INX - 1;
              /* decrement index*/
      end
    end
  end
   /* ------------------------------------------------------------*/
   /* bypass edits if want to transfer without selecting line*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf12 /* transfer pf keys are pressed*/
   || converseVar.eventKey is pf13 
   || converseVar.eventKey is pf14 
   || converseVar.eventKey is pf15 
   || converseVar.eventKey is pf16 
   || converseVar.eventKey is pf17 
   || converseVar.eventKey is pf18)

    return; /* return to logic flow to skip edits*/

  end

   /* ------------------------------------------------------------*/
   /* Verify header fields--- own group code*/
   /* -------------------------------------------------------------*/

  if (SL04M001.SL04M-XOW-OWN-GRP-CD in XOWTBL.XOWCD
   && XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A")

    /* next sentence*/

  else
    SLWREC.XXXLOCID = "500"; /* Module identification*/
    set SL04M001.SL04M-XOW-OWN-GRP-CD cursor, bold; /* Highlight*/
    converseLib.validationFailed(361); /* invalid quality code*/

  end

   /* ------------------------------------------------------------*/
   /* Verify header fields--- unit of measure*/
   /* ------------------------------------------------------------*/

  if (SL04M001.SL04M-XUM-UOM-CD in XUMTBL.XUMCD
   && XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A")

    /* next sentence*/

  else
    SLWREC.XXXLOCID = "500"; /* Module identification*/
    set SL04M001.SL04M-XUM-UOM-CD cursor, bold; /* Highlight*/
    converseLib.validationFailed(362); /* invalid quality code*/

  end

   /* ------------------------------------------------------------*/
   /* Verify header fields--- class code*/
   /* ------------------------------------------------------------*/

  if (SL04M001.SL04M-XSL-CLASS-CD in XSLTBL.XSLCD
   && XSLTBL.XXXSTAT[sysVar.arrayIndex] == "A")

   /* next sentence*/

  else

    SLWREC.XXXLOCID = "500"; /* Module identification*/
    set SL04M001.SL04M-XSL-CLASS-CD cursor, bold; /* Highlight*/
    converseLib.validationFailed(360); /* invalid warehouse*/

  end

   /* ------------------------------------------------------------*/
   /* Verify header fields--- engineering difference code*/
   /* ------------------------------------------------------------*/

  if (SL04M001.SL04M-XEG-ENGR-DIFF-CD in XEGTBL.XEGCD)

   /* next sentence*/

  else

    SLWREC.XXXLOCID = "500"; /* Module identification*/
    set SL04M001.SL04M-XEG-ENGR-DIFF-CD cursor, bold; /* Highlight*/
    converseLib.validationFailed(364); /* invalid warehouse*/

  end

   /* ------------------------------------------------------------*/
   /* Verify header fields--- inventory segment*/
   /* ------------------------------------------------------------*/

  set PC2REC empty; /* clear row storage area*/

  PC2REC.XGPCD = SL04M001.SL04M-XGP-GPC-CD;
  PC2REC.PC2INSEG = SL04M001.SL04M-PC-CU-IN-SEG-CD;
  call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == +0)
     /* next sentence*/
  else

    SLWREC.XXXLOCID = "500";
    SLWREC.SLWMSGNO = 365; /* <--- invalid value msg*/
    set SL04M001.SL04M-PC-CU-IN-SEG-CD cursor, bold;

  end

   /* ------------------------------------------------------------*/
   /* Verify header fields--- quality code*/
   /* ------------------------------------------------------------*/
  if (SL04M001.SL04M-XQA-QUAL-CD in XQATBL.XQACD)

    /* next sentence*/

  else

    SLWREC.XXXLOCID = "500"; /* Module identification*/
    set SL04M001.SL04M-XQA-QUAL-CD cursor, bold; /* Highlight*/
    converseLib.validationFailed(366); /* invalid quality code*/

  end
   /* ------------------------------------------------------------*/
   /* Verify header fields--- dimension code*/
   /* ------------------------------------------------------------*/
  if (SL04M001.SL04M-XDM-DIM-CD in XDMTBL.XDMCD)

    /* next sentence*/

  else

    SLWREC.XXXLOCID = "500"; /* Module identification*/
    set SL04M001.SL04M-XDM-DIM-CD cursor, bold; /* Highlight*/
    converseLib.validationFailed(367); /* invalid dimension code*/

  end

   /* ------------------------------------------------------------*/
   /* Verify header fields--- gpc code*/
   /* ------------------------------------------------------------*/
  if (SL04M001.SL04M-XGP-GPC-CD in XWHTBL.XGPCD1
   || SL04M001.SL04M-XGP-GPC-CD in XWHTBL.XGPCD2
   || SL04M001.SL04M-XGP-GPC-CD in XWHTBL.XGPCD3
   || SL04M001.SL04M-XGP-GPC-CD in XWHTBL.XGPCD4
   || SL04M001.SL04M-XGP-GPC-CD in XWHTBL.XGPCD5
   || SL04M001.SL04M-XGP-GPC-CD in XWHTBL.XGPCD6
   || SL04M001.SL04M-XGP-GPC-CD in XWHTBL.XGPCD7
   || SL04M001.SL04M-XGP-GPC-CD in XWHTBL.XGPCD8)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")

    /* next sentence*/

    else

      SLWREC.XXXLOCID = "500"; /* Module identification*/
      set SL04M001.SL04M-XGP-GPC-CD cursor, bold; /* Highlight*/
      converseLib.validationFailed(157); /* invalid gpc*/

    end
  else

    SLWREC.XXXLOCID = "500"; /* Module identification*/
    set SL04M001.SL04M-XGP-GPC-CD cursor, bold; /* Highlight*/
    converseLib.validationFailed(157); /* invalid gpc*/

  end

   /* ------------------------------------------------------------*/
   /* Verify header fields--- warehouse code*/
   /* -------------------------------------------------------------*/
  if (SL04M001.SL04M-XWH-WHSE-CD in XWHTBL.XWHCD
   && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")

  /* next sentence*/

  else

    SLWREC.XXXLOCID = "500"; /* Module identification*/
    set SL04M001.SL04M-XWH-WHSE-CD cursor, bold; /* Highlight*/
    converseLib.validationFailed(373); /* invalid warehouse*/

  end

   /* ------------------------------------------------------------*/
   /* Verify header fields--- po nbr or (po id/po type)--not both*/
   /* move map fields to storage so don't have to re-calc*/
   /* -------------------------------------------------------------*/

  SL04W00.SL04W-MAP-PC-SAP-PO-NBR = SL04M001.SL04M-PC-SAP-PO-NBR;
  SL04W00.SL04W-MAP-PO-NBR = SL04M001.SL04M-PC-PO-NBR;
  SL04W00.SL04W-MAP-PO-ID = SL04M001.SL04M-PO-ID;
  SL04W00.SL04W-MAP-PO-TYPE = SL04M001.SL04M-PO-TYPE;

   /* IF SL04M001.SL04M-PC-PO-NBR EQ -1;*/

    /* IF SL04M001.SL04M-PO-TYPE EQ '*';*/
      /* AND SL04M001.SL04M-PO-ID EQ '*';*/

      /* MOVE -1 TO SL04W00.SL04W-PC-PO-ID-MO-RNG;*/
      /* MOVE '*' TO SL04W00.SL04W-PC-PO-ID-SESN-CD;*/
      /* MOVE '*' TO SL04W00.SL04W-FY-FCTY-CD;*/
      /* MOVE '*' TO SL04W00.SL04W-PC-PO-OT-CD;*/

    /* END;*/

   /* ELSE;*/

  if (SL04M001.SL04M-PO-TYPE == "*"
   && SL04M001.SL04M-PO-ID == "*")

    SL04W00.SL04W-PC-PO-ID-MO-RNG = -1;
    SL04W00.SL04W-PC-PO-ID-SESN-CD = "*";
    SL04W00.SL04W-FY-FCTY-CD = "*";
    SL04W00.SL04W-PC-PO-OT-CD = "*";

    /* ELSE;*/

     /* MOVE '500' TO SLWREC.XXXLOCID;/* Module identification*/
     /* SET SL04M001.SL04M-PO-TYPE CURSOR,BRIGHT;/* Highlight*/
      /* ET SL04M001.SL04M-PO-ID CURSOR,BRIGHT;/* Highlight*/
     /* SET SL04M001.SL04M-PC-PO-NBR CURSOR,BRIGHT;/* Highlight*/
     /* MOVE 192 TO EZEMNO;          /* only po nbr 'or' po type/po id*/

    /* END;*/
  end

   /* ------------------------------------------------------------*/
   /* validate style and color*/
   /* ------------------------------------------------------------*/

  set PKNREC empty; /* Clear row storage area*/

  PKNREC.XGPCD = SL04M001.SL04M-XGP-GPC-CD; /* GPC code*/
  PKNREC.SY1STNBR = SL04M001.SL04M-SY-STY-NBR; /* Style number*/
  PKNREC.SY2CLRID = SL04M001.SL04M-SY-COLR-CD-ID; /* color id*/
  PKNREC.XDMCD = SL04M001.SL04M-XDM-DIM-CD; /* dimension code*/

  try
    call "IO1810" ("S ", SQLCA, PKNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      /* CANADA 08/25/95*/

      if (SLWREC.XCTCD == "CANA")

        /* format ta1rec in case of bad return code from call to SY2000*/

        TA1REC.TA1PGMNM = "SL04"; /* CANA program name*/
        TA1REC.TA1LOC = "SL04500"; /* CANA sgrp name*/

        XSSL-CALL-SY2000(); /* CANA call SY2000 to get*/
                              /* product region record*/
        if (WSY2000.WSY2000-RETURN-CODE == 0) /* CANA row found*/
                                 /* continue*/
        else
          if (WSY2000.WSY2000-RETURN-CODE == 02) /* CANA row not found*/

            converseLib.validationFailed(456); /* invalid style/color*/

            SLWREC.XXXLOCID = "130"; /* module identification*/

            exit stack; /* Return to flow*/

          end
          if (WSY2000.WSY2000-RETURN-CODE == 98) /* CANA database busy*/

            converseLib.validationFailed(31); /* Data in use by another*/
            TA1REC.TA1FUNC = "POST"; /* Termination function*/
            SLWREC.XXXLOCID = "130"; /* Module identification*/

          else

            converseLib.validationFailed(01); /* Unexpected error occurred*/
            TA1REC.TA1FUNC = "RETN"; /* Termination function*/

            converseLib.clearScreen();
             /* Clear screen before display*/

          end
          converseLib.validationFailed(0001); /* Indicate system error*/
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1LOC = "CALL SY2000";
          TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program appl*/
          TA1REC.TA1PGMNM = "SL04500"; /* Program number*/
          TA1REC.TA1MAP = SLWREC.XXXMAPNM; /* Map name*/
          TA1REC.TA1DBASE = "DPROD  "; /* Data base name*/
          TA1REC.TA1TBLVU = "VSYREG02"; /* Table view name*/
          TA1REC.TA1TBLKE = PKNREC.PKNKEY; /* Table key*/

                              /* Error diagnosis routine*/
          call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

          exit stack; /* Exit to display map*/

        end
      end
                                  /* continue*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

        converseLib.validationFailed(56); /* invalid style/color*/

        SLWREC.XXXLOCID = "130"; /* module identification*/

        exit stack; /* Return to flow*/

      else

        if (SQLCA.VAGen_SQLCODE == -911) /* and resource not available*/

          converseLib.validationFailed(31); /* Data in use by another*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
          SLWREC.XXXLOCID = "130"; /* Module identification*/

        else

          converseLib.validationFailed(01); /* Unexpected error occurred*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/

          converseLib.clearScreen();
           /* Clear screen before display*/

          TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
          TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1LOC = "OBTAIN STYLE NAME FOR HEADING";
          TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
          TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
          TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
          TA1REC.TA1TBLVU = "VSTYLE01"; /* Table view name*/
          TA1REC.TA1TBLKE = PKNREC.PKNKEY; /* Table key*/
          TA1REC.TA1MAPNO = "M001"; /* map number*/

          call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};
                                   /* Error diagnosis routine*/

          exit stack; /* Exit to display map*/

        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* validate size entered*/
   /* ------------------------------------------------------------*/

  if (SL04M001.SL04M-SIZE == " "
  )
    SLWREC.XXXLOCID = "500"; /* Module identification*/
    set SL04M001.SL04M-SIZE cursor, bold; /* Highlight*/
    converseLib.validationFailed(238); /* invalid key*/
    exit stack;

  end

  SL04W00.SL04W-HEADER-SIZE = SL04M001.SL04M-SIZE;

  if (SL04W00.SL04W-HEADER-SIZE == "   -1" || 
  SL04W00.SL04W-HEADER-SIZE == "-1")
    /* next sentence*/
  else
    set SYPREC empty;

    SYPREC.SYPFC = "PC"; /* get all valid sizes*/
    SYPREC.SYPCMPSW = "C"; /* indicate compressed format*/

    SYPREC.XGPCD = SL04M001.SL04M-XGP-GPC-CD;
    SYPREC.SY1STNBR = SL04M001.SL04M-SY-STY-NBR;
    SYPREC.SY2CLRID = SL04M001.SL04M-SY-COLR-CD-ID;
    SYPREC.XDMCD = SL04M001.SL04M-XDM-DIM-CD;
    SYPREC.XQACD = SL04M001.SL04M-XQA-QUAL-CD;

    TA1REC.TA1LOCAT[2] = "SL04500 ";
    TA1REC.TA1MAP = "SL04M001";

    call "SY1190" (SQLCA, SYPREC) {isNoRefresh = yes, isExternal = yes};

    if (SYPREC.SYPRC != 0)
      if (SYPREC.SYPRC == 9
       || SYPREC.SYPRC == 10
       || SYPREC.SYPRC == 11)

        SLWREC.XXXLOCID = "500"; /* Module identification*/
        set SL04M001.SL04M-SIZE cursor, bold; /* Highlight*/
        converseLib.validationFailed(238); /* invalid key*/

      else

        TA1REC.TA1TYPE = "DB2 ";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SL04500 ";
        TA1REC.TA1LOCAT[1] = "SY1190  ";
        TA1REC.TA1LOCAT[3] = SYPREC.SYPRCX;
        TA1REC.TA1LOCAT[4] = "SZ XLATE";
        TA1REC.TA1DBASE = "MULTIPLE";
        TA1REC.TA1TBLVU = "DB VIEWS";
        TA1REC.TA1TBLKE = SYPREC.SYPKEY;
        move SQLCA to ERRSQLCA withV60Compat;
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback();
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

      end
    end

    SL04W00.SL04W-SIZE-INX = 1;
    SL04W00.SL04W-SIZE-FOUND-SW = "N";

    while (SL04W00.SL04W-SIZE-FOUND-SW == "N"
     && SL04W00.SL04W-SIZE-INX <= 40)

      SL04-590();

    end

    if (SL04W00.SL04W-SIZE-FOUND-SW == "N")

      SLWREC.XXXLOCID = "500"; /* Module identification*/
      set SL04M001.SL04M-SIZE cursor, bold; /* Highlight*/
      converseLib.validationFailed(238); /* invalid key*/

    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end SL04-500

// Verify scroll request
Function SL04-510()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && SL04W00.XXXTSPAG < 2)       /* and no previous pages*/

    SLWREC.XXXLOCID = "510"; /* Module identification*/
    converseLib.validationFailed(7); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && SL04W00.XXXTSPAG >= SL04W00.TA5TSQIX) /* and no more pages*/

    SLWREC.XXXLOCID = "510"; /* Module identification*/
    converseLib.validationFailed(8); /* No more pages to display*/

  end

end // end SL04-510

// Verify data in the line
Function SL04-520()
   /* ------------------------------------------------------------*/
   /* selection may be made only with a single 's'.  Multiple*/
   /* 's' and characters other than 's' and ' ' are not allowed.*/
   /* ------------------------------------------------------------*/

  if (SL04M001.SL04M-SELECT[SL04W-MAP-FIELD-INX] != " ")
    if (SL04M001.SL04M-SELECT[SL04W-MAP-FIELD-INX] == "S")
      if (SL04W00.SL04W-ROW-SELECTED == "Y")

        SLWREC.XXXLOCID = "520"; /* Module identification*/
        set SL04M001.SL04M-SELECT[SL04W-MAP-FIELD-INX] cursor, bold;
                                  /* highlight*/
        converseLib.validationFailed(51); /* Only one row may be selected*/

      else

        SL04W00.SL04W-ROW-SELECTED = "Y";
        SLWREC.XAR-AREA-CD = SL04W01.SL04W-XAR-AREA-CD[SL04W-MAP-FIELD-INX]; /* area code*/

        SLWREC.SL-ZONE-CD = SL04W01.SL04W-SL-ZONE-CD[SL04W-MAP-FIELD-INX]; /* zone code*/

        SLWREC.SL-LOC-CD = SL04W01.SL04W-SL-LOC-CD[SL04W-MAP-FIELD-INX]; /* own group code*/

      end
    end
  end

end // end SL04-520

Function SL04-590()
  /* -----------------------------------------------------------------------*/
   /* loop through array returned from sy1190 to determine if size*/
   /* entered in header is among valid sizes*/
  /* -----------------------------------------------------------------------*/

  if (SYPREC.SY4IDDSC[SL04W-SIZE-INX] == SL04W00.SL04W-HEADER-SIZE)

    SL04W00.SL04W-SIZE-FOUND-SW = "Y";

  else

    SL04W00.SL04W-SIZE-INX = SL04W00.SL04W-SIZE-INX + 1;

  end

end // end SL04-590

// Process valid input request
Function SL04-600()
   /* ------------------------------------------------------------*/
   /* load slwrec with info to be passed*/
   /* ------------------------------------------------------------*/

  SL04-610(); /* move map working storage to slwrec*/

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    SL04W00.XXXTSPAG = SL04W00.XXXTSPAG - 1; /* Decrement page number*/
    SL04W00.SL04W-FORMAT-MAP-SW = "Y"; /* format map*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    SL04W00.XXXTSPAG = SL04W00.XXXTSPAG + 1; /* Increment page number*/
    SL04W00.SL04W-FORMAT-MAP-SW = "Y"; /* format map*/

    return; /* Return to previous process*/

  end

  if (converseVar.eventKey is pf12) /* PF12 was pressed*/
    COMMAREA.CATOAP = "SL01"; /* TO application*/
  end

  if (converseVar.eventKey is pf13) /* PF13 was pressed*/
    COMMAREA.CATOAP = "SL02"; /* TO application*/
  end

  if (converseVar.eventKey is pf14) /* PF14 was pressed*/
    COMMAREA.CATOAP = "SL03"; /* TO application*/
  end

  if (converseVar.eventKey is pf16) /* PF16 was pressed*/
    COMMAREA.CATOAP = "SL05"; /* TO application*/
  end

  if (converseVar.eventKey is pf17) /* PF17 was pressed*/
    COMMAREA.CATOAP = "SL0Q"; /* TO application*/
    SLWREC.SLWCASNO = "7"; /* option number*/
  end

  if (converseVar.eventKey is pf18) /* PF18 was pressed*/
    COMMAREA.CATOAP = "SL0Q"; /* TO application*/
    SLWREC.SLWCASNO = "8"; /* option number*/
  end

  if (COMMAREA.CATOAP > " ")

    SL04-110(); /* Purge temporary storage*/

    XSSL001(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

  /* --------------------------------------------------------------*/
     /* indicate the map needs to be formatted*/
  /* --------------------------------------------------------------*/

  SL04W00.SL04W-FORMAT-MAP-SW = "Y"; /* format map*/

  /* --------------------------------------------------------------*/
     /* verify header information has not changed*/
  /* --------------------------------------------------------------*/

  if (SL04W01.SL04W-XWH-WHSE-CD != SL04M001.SL04M-XWH-WHSE-CD
   || SL04W01.SL04W-XGP-GPC-CD != SL04M001.SL04M-XGP-GPC-CD
   || SL04W01.SL04W-SY-STY-NBR != SL04M001.SL04M-SY-STY-NBR
   || SL04W01.SL04W-SY-COLR-CD-ID != SL04M001.SL04M-SY-COLR-CD-ID
   || SL04W01.SL04W-XDM-DIM-CD != SL04M001.SL04M-XDM-DIM-CD
   || SL04W01.SL04W-XQA-QUAL-CD != SL04M001.SL04M-XQA-QUAL-CD
   || SL04W01.SL04W-LIFE-CYCLE != SL04M001.SL04M-LIFE-CYCLE
   || SL04W01.SL04W-PC-SAP-PO-NBR != SL04M001.SL04M-PC-SAP-PO-NBR
   || SL04W01.SL04W-PC-PO-NBR != SL04M001.SL04M-PC-PO-NBR
   || SL04W01.SL04W-PO-ID != SL04M001.SL04M-PO-ID
   || SL04W01.SL04W-PO-TYPE != SL04M001.SL04M-PO-TYPE
   || SL04W01.SL04W-UNPCS != 
  SL04M001.SL04M-UNPCS
   || SL04W01.SL04W-SIZE != SL04M001.SL04M-SIZE)

    SL04W00.SL04W-RQT-DATA-SW = "Y"; /* Request for data switch*/

  end

  if (converseVar.eventKey is enter) /* enter was pressed*/
    if (SL04W00.SL04W-RQT-DATA-SW == "Y")
      exit stack;
    else
      COMMAREA.CATOAP = "SL05"; /* TO application*/
      SL04-110(); /* Purge temporary storage*/
      XSSL001(); /* Exit to another application*/
      SL04W00.SL04W-FORMAT-MAP-SW = "N"; /* keep 's' on screen*/
      exit stack;
    end
  end

end // end SL04-600

// Verify data in the line
Function SL04-610()
   /* ------------------------------------------------------------*/
   /* load map header working storage into slwrec to be passed*/
   /* ------------------------------------------------------------*/

  SLWREC.XWHCD = SL04W01.SL04W-XWH-WHSE-CD; /* whse code*/

  SLWREC.XGPCD = SL04W01.SL04W-XGP-GPC-CD; /* gpc code*/

  SLWREC.SY1STNBR = SL04W01.SL04W-SY-STY-NBR; /* style nbr*/

  SLWREC.SY2CLRID = SL04W01.SL04W-SY-COLR-CD-ID; /* color cd*/

  SLWREC.XDMCD = SL04W01.SL04W-XDM-DIM-CD; /* dimension code*/

  SLWREC.XQACD = SL04W01.SL04W-XQA-QUAL-CD; /* quality code*/

  SLWREC.PC2INSEG = SL04W01.SL04W-PC-CU-IN-SEG-CD; /* inventory segment code*/

  SLWREC.XEG-ENGR-DIFF-CD = SL04W01.SL04W-XEG-ENGR-DIFF-CD; /* engineering difference code*/

  SLWREC.XSLCD = SL04W01.SL04W-XSL-CLASS-CD; /* class code*/

  SLWREC.XUMCD = SL04W01.SL04W-XUM-UOM-CD; /* unit of measure code*/

  SLWREC.XOWCD = SL04W01.SL04W-XOW-OWN-GRP-CD; /* own group code*/

  if (SL04W01.SL04W-PO-ID != "*"
   && SL04W01.SL04W-PO-TYPE != "*")
    SLWREC.PC3POIDT = SL04W00.SL04W-PC-PO-ID-MO-RNG;
    SLWREC.PC4ORTYP = SL04W00.SL04W-PC-PO-OT-CD;
    SLWREC.PCFSECD = SL04W00.SL04W-PC-PO-ID-SESN-CD;
    SLWREC.FY1FCTYC = SL04W00.SL04W-FY-FCTY-CD;
  end
  if (SL04W01.SL04W-PC-PO-NBR != -1)
    SLWREC.PC3PONBR = SL04W01.SL04W-PC-PO-NBR;
  end

  if (SL04W01.SL04W-PC-SAP-PO-NBR != "*")
    SLWREC.PC-SAP-PO-NBR = SL04W01.SL04W-PC-SAP-PO-NBR;
  end

  if (SL04W01.SL04W-SIZE == "-1")
    SLWREC.SY-SZ-ID-DESC = " ";
  else
    SLWREC.SY-SZ-ID-DESC = SL04W01.SL04W-SIZE;
  end

end // end SL04-610

// Main process to display a map
Function SL04001()
  /* -----------------------------------------------------------------------*/
      /* main logic - get data from tables using I/O modules*/
  /* -----------------------------------------------------------------------*/

  SL04-100();

  /* -----------------------------------------------------------------------*/
      /* converse SL04M001 - move data to screen*/
  /* -----------------------------------------------------------------------*/

  SL04-200();

  /* -----------------------------------------------------------------------*/
      /* validate keystrokes*/
  /* -----------------------------------------------------------------------*/

  SL04-300();

  /* -----------------------------------------------------------------------*/
      /* reset fields on map, pop-up window processing*/
  /* -----------------------------------------------------------------------*/

  SL04-400();

  /* -----------------------------------------------------------------------*/
       /* validate entered data*/
  /* -----------------------------------------------------------------------*/

  SL04-500();

  /* -----------------------------------------------------------------------*/
       /* process valid request*/
  /* -----------------------------------------------------------------------*/

  SL04-600();
end // end SL04001

// Update temporary storage page
Function SL04S01()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (SL04W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S01"; /* Module identification*/
  converseLib.validationFailed(01); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL04S01

// Read temporary storage page
Function SL04S02()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  SL04W01.XXXTSLEN = SL04W00.XXXTSLEN; /* Temporary storage   lengt;*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = SL04W00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (SL04W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S02"; /* Module identification*/
  converseLib.validationFailed(01); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL04S02

//*** RECORD=SL04W00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record SL04W00 type basicRecord
  10 SL04W-MAP-FIELD-INX SL04W-MAP-FIELD-INX ; 
  10 SL04W-SIZE-INX SL04W-SIZE-INX ; 
  10 SL04W-END-CURSOR-SW SL04W-END-CURSOR-SW ; 
  10 SL04W-PF-APPL-TRANSF-SW SL04W-PF-APPL-TRANSF-SW ; 
  10 SL04W-SIZE-FOUND-SW SL04W-SIZE-FOUND-SW ; 
  10 SL04W-DISPLAY-MAP-SW SL04W-DISPLAY-MAP-SW ; 
  10 SL04W-FORMAT-MAP-SW SL04W-FORMAT-MAP-SW ; 
  10 SL04W-RQT-DATA-SW SL04W-RQT-DATA-SW ; 
  10 SL04W-UPD-PAGE-SW SL04W-UPD-PAGE-SW ; 
  10 SL04W-FORMAT-DISPLAY-PO-SW SL04W-FORMAT-DISPLAY-PO-SW ; 
  10 SL04W-ROW-SELECTED SL04W-ROW-SELECTED ; 
  10 SL04W-FIRST-FETCH SL04W-FIRST-FETCH ; 
  10 SL04W-CURRENT-DATE SL04W-CURRENT-DATE ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 SL04W-HOLD-LOCATION SL04W-HOLD-LOCATION ; 
  10 SL04W-HOLD-UNPCS SL04W-HOLD-UNPCS ; 
  10 SL04W-HEADER-UNPCS SL04W-HEADER-UNPCS ; 
  10 SL04W-NET-CALC SL04W-NET-CALC ; 
  10 SL04W-ACCUM-LOC-OH-QTY SL04W-ACCUM-LOC-OH-QTY ; 
  10 SL04W-ACCUM-LOC-RSRV-QTY SL04W-ACCUM-LOC-RSRV-QTY ; 
  10 SL04W-ACCUM-LOC-SAS-QTY SL04W-ACCUM-LOC-SAS-QTY ; 
  10 SL04W-PO-NUM SL04W-PO-NUM ; 
  10 SL04W-PC-SAP-PO-NUM SL04W-PC-SAP-PO-NUM ; 
  10 SL04W-PC-PO-ID-MO-RNG SL04W-PC-PO-ID-MO-RNG ; 
  10 SL04W-PC-PO-OT-CD SL04W-PC-PO-OT-CD ; 
  10 SL04W-PC-PO-ID-SESN-CD SL04W-PC-PO-ID-SESN-CD ; 
  10 SL04W-FY-FCTY-CD SL04W-FY-FCTY-CD ; 
  10 SL04W-MAP-PO-NBR SL04W-MAP-PO-NBR ; 
  10 SL04W-MAP-PC-SAP-PO-NBR SL04W-MAP-PC-SAP-PO-NBR ; 
  10 SL04W-MAP-PO-ID SL04W-MAP-PO-ID ; 
  10 SL04W-MAP-PO-TYPE SL04W-MAP-PO-TYPE ; 
  10 SL04W-MAP-LIFE-CYCLE SL04W-MAP-LIFE-CYCLE ; 
  10 SL04W-HEADER-SIZE SL04W-HEADER-SIZE ; 
end // end SL04W00

//*** RECORD=SL04W01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record SL04W01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(940) ; 
    10 SL04W-XWH-WHSE-CD SL04W-XWH-WHSE-CD ; 
    10 SL04W-XWH-WHSE-NM SL04W-XWH-WHSE-NM ; 
    10 SL04W-XGP-GPC-CD SL04W-XGP-GPC-CD ; 
    10 SL04W-SY-STY-NBR SL04W-SY-STY-NBR ; 
    10 SL04W-SY-COLR-CD-ID SL04W-SY-COLR-CD-ID ; 
    10 SL04W-XDM-DIM-CD SL04W-XDM-DIM-CD ; 
    10 SL04W-XQA-QUAL-CD SL04W-XQA-QUAL-CD ; 
    10 SL04W-SY-STY-NM SL04W-SY-STY-NM ; 
    10 SL04W-STY-COLR-NM SL04W-STY-COLR-NM ; 
    10 SL04W-PC-CU-IN-SEG-CD SL04W-PC-CU-IN-SEG-CD ; 
    10 SL04W-XEG-ENGR-DIFF-CD SL04W-XEG-ENGR-DIFF-CD ; 
    10 SL04W-XSL-CLASS-CD SL04W-XSL-CLASS-CD ; 
    10 SL04W-XUM-UOM-CD SL04W-XUM-UOM-CD ; 
    10 SL04W-XOW-OWN-GRP-CD SL04W-XOW-OWN-GRP-CD ; 
    10 SL04W-LIFE-CYCLE SL04W-LIFE-CYCLE ; 
    10 SL04W-PO-ID SL04W-PO-ID ; 
    10 SL04W-PO-TYPE SL04W-PO-TYPE ; 
    10 SL04W-PC-PO-NBR SL04W-PC-PO-NBR ; 
    10 SL04W-PC-SAP-PO-NBR SL04W-PC-SAP-PO-NBR ; 
    10 SL04W-SIZE SL04W-SIZE ; 
    10 SL04W-UNPCS SL04W-UNPCS ; 
    10 SL04W-SELECT SL04W-SELECT [13] ; 
    10 SL04W-XAR-AREA-CD SL04W-XAR-AREA-CD [13] ; 
    10 SL04W-SL-ZONE-CD SL04W-SL-ZONE-CD [13] ; 
    10 SL04W-SL-LOC-CD SL04W-SL-LOC-CD [13] ; 
    10 SL04W-YLS-LOC-STAT-CD SL04W-YLS-LOC-STAT-CD [13] ; 
    10 SL04W-SL-RLOG-PLT-NBR SL04W-SL-RLOG-PLT-NBR [13] ; 
    10 SL04W-SL-RLOG-CASE SL04W-SL-RLOG-CASE [13] ; 
    10 SL04W-SL-RCV-LOT-ID SL04W-SL-RCV-LOT-ID [13] ; 
    10 SL04W-SY-UNITS-PER-CASE SL04W-SY-UNITS-PER-CASE [13] ; 
    10 SL04W-NET-QTY SL04W-NET-QTY [13] ; 
    10 SL04W-SL-SY-LOC-OH-QTY SL04W-SL-SY-LOC-OH-QTY [13] ; 
    10 SL04W-SL-SY-LOC-RSRV-QTY SL04W-SL-SY-LOC-RSRV-QTY [13] ; 
    10 SL04W-SL-SY-LOC-SAS-QTY SL04W-SL-SY-LOC-SAS-QTY [13] ; 
end // end SL04W01

DataItem SL04W-ACCUM-LOC-OH-QTY num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SL04W-ACCUM-LOC-RSRV-QTY num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SL04W-ACCUM-LOC-SAS-QTY num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SL04W-CURRENT-DATE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map to be displayed switch
DataItem SL04W-DISPLAY-MAP-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem SL04W-END-CURSOR-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL04W-FIRST-FETCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem SL04W-FORMAT-DISPLAY-PO-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem SL04W-FORMAT-MAP-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL04W-FY-FCTY-CD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL04W-HEADER-SIZE char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TSQ rel rec no./index
DataItem SL04W-HEADER-UNPCS num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TSQ rel rec no./index
DataItem SL04W-HOLD-LOCATION char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TSQ rel rec no./index
DataItem SL04W-HOLD-UNPCS num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL04W-LIFE-CYCLE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem SL04W-MAP-FIELD-INX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL04W-MAP-LIFE-CYCLE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL04W-MAP-PC-SAP-PO-NBR char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL04W-MAP-PO-ID char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL04W-MAP-PO-NBR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SL04W-MAP-PO-TYPE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL04W-NET-CALC num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SL04W-NET-QTY num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD
DataItem SL04W-PC-CU-IN-SEG-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL04W-PC-PO-ID-MO-RNG int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SL04W-PC-PO-ID-SESN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD
DataItem SL04W-PC-PO-NBR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XGP_GPC_CD
DataItem SL04W-PC-PO-OT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SAP PO NUMBER
DataItem SL04W-PC-SAP-PO-NBR char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SAP PO  NUMBER
DataItem SL04W-PC-SAP-PO-NUM char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem SL04W-PF-APPL-TRANSF-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD
DataItem SL04W-PO-ID char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL04W-PO-NUM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XGP_GPC_CD
DataItem SL04W-PO-TYPE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL04W-ROW-SELECTED char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem SL04W-RQT-DATA-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Line selection indicator
DataItem SL04W-SELECT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD
DataItem SL04W-SIZE char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem SL04W-SIZE-FOUND-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem SL04W-SIZE-INX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL04W-SL-LOC-CD char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL04W-SL-RCV-LOT-ID num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL04W-SL-RLOG-CASE char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL04W-SL-RLOG-PLT-NBR char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL04W-SL-SY-LOC-OH-QTY num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL04W-SL-SY-LOC-RSRV-QTY num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL04W-SL-SY-LOC-SAS-QTY num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL04W-SL-ZONE-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_STY_NM
DataItem SL04W-STY-COLR-NM char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// color code
DataItem SL04W-SY-COLR-CD-ID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style number
DataItem SL04W-SY-STY-NBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_STY_NM
DataItem SL04W-SY-STY-NM char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL04W-SY-UNITS-PER-CASE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL04W-UNPCS num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem SL04W-UPD-PAGE-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL04W-XAR-AREA-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dim code
DataItem SL04W-XDM-DIM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD
DataItem SL04W-XEG-ENGR-DIFF-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// gen prod class code
DataItem SL04W-XGP-GPC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD
DataItem SL04W-XOW-OWN-GRP-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// qual code
DataItem SL04W-XQA-QUAL-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD
DataItem SL04W-XSL-CLASS-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD
DataItem SL04W-XUM-UOM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warehouse code
DataItem SL04W-XWH-WHSE-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warehouse code
DataItem SL04W-XWH-WHSE-NM char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL04W-YLS-LOC-STAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

