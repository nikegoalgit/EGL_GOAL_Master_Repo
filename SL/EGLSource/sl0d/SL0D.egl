package sl0d;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pk.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=SL0D ****
// ************************************************************
// 
//           receivnig inquiry/print menu
//           ============================
// 
// ************************************************************
// 
// OVERVIEW: This application is intended to transfer control
//           to other applications and/or functions within its
//           application depending on the selction number
//           entered on the map or passed via fast path's
//           item area (first character only).
// 
//           notes:
//             1) selection number (since single digit) is
//                setup as a character type field in order to
//                make the use of CAITEM easier as well as
//                easier for the user and program to deal
//                with the map field.
//             2) if selections include both external appl.s
//                and internal functions,  the internal func.s
//                should be listed first so that they will
//                correspond to the level number used in the
//                multiple function naming convention(s).
//             3) transfer to external applications will use
//                xsexit and require these selection values
//                be tested in the after section in either
//                the process or the related statement group
//                  CAITEM: 110 After or SY1
//                  SelNo.: 120 After or SB1
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
// control    date     name   description of change
// -------  --------  ------  ---------------------------------
// 00  01/28/87  chuck beer  created
// 01  08/31/88  W. Jones    add reset scrn on fast path exit
// 02  10/26/88  l. deluhery fix abort at sl0ds3t when an ibm
//                           size id 40 was encountered but was
//                           not accounted for in sl0dwpb which
//                           only held 39 occurences.
// 03  11/14/88  W. Jones    fix printer limit abend
// 04  11/15/88  J. Wood     added xssegtr logic
// 05  05/17/89  R. Yonker   deleted unused tables
// 06  07/11/89  kande1      added comment line sl1comnt
// 06  11/16/89  ryonke      added fields for phase 4 db2 chngs
// 07  03/28/90  esmith      added option 7: comparison submit
//                           rewrite option 3: compare inquiry
//                             to access vrlcmp + new po format
//                             + hard error check (sas) & alert
//                             opt to access po or pk list qtys
//                             access to pohdr, cntnr
//                           add new po format/ pf key to maps
//                             + corresponding logic
//                           change all refs to pd-po to pc-po
//                           create appl (sl0dw00)
// 08  05/25/90  kande1      fixes for phase 4 install
// 09  05/26/90  kande1      fix to option 1 to process records
//                           without po nbr
// 10  06/07/90  kande1      comment out check for rec or po
//                           qtys when po selected in option 3
//                           to allow all rows to show - this
//                           will display all rows for a style
//                           color and dim for comparsion.
// 10  06/12/90  kande1      option 3 set size description to
//                           ***** if row not found.
//                           remove unused references to ts1rec
//                           and ts2rec
// 11  10/09/90  sjohns      db2 table changes:
//                             - delete pd1ponbr
//                             - rename xsdcd to pc2inseg
//                             - rename xsacd to xegcd
//                             - increase xrocd from 2 to 4
// 12  10/21/90  jmoore      Added xegcd to screen 1 and 3
//                           and swepllnb to screen 1, 2, 3.
//                           Changed slodsme to close cursor
//                           using slodsmf not slodsmc.
//                           Increased the tsq size from 979
//                           to 1020.
//                           Do not allow warehouse 32 to be
//                           processed on option 7.
// 13  12/26/90  jcampb      added security to option 7 and
//                           removed security from 1 & 3
// 14  01/02/91  rgutma      Changed option 7 to allow warehse
//                           32 and not allow warehouse 51
// 15  01/03/91  jlucas      pf3 will transfer to sw0r receipt
//                           entry maintenance
// 16  02/25/91  jlucas      printer enhancement m210, m410 &
//                           m610 will now call ta0p.
// 17  05/16/91  ryonke      allow option 7 for warehouse 51
// SL#0     10/09/91  SPOPA   Change "Allow Implicits" to NO.
// SL#0     01/10/92  ryonke  initialize all records used by
//                            application in the one time
//                            initialization section.
// SL#0     01/15/92  jwood   initialize all maps used
// SL#0     08/25/92  jFIAT   Change IO from sy1120 to sy1190
// MAINT    02/26/97  DMAYS   ADD ERROR MESSAGE FOR NOT FOUND
//                            CONDITION ON STYLE AND COLOR
// SL#0     07/17/97  OVAZQU  Add quantity grand total to
//                            receiving inquiry by whse screen
//                            (option 5).
// DLVRUSA  02/15/01  GNAGAR  Modified screens which displays
//                            PO should also display the SAP PO
//                            when the GOAL PO is not available
// 
//                            Modified the application not to
//                            reference PO & Tranportation IO
//                            Mods. IO1580 has been replaced
//                            with VRLITM02 & IO4930 has been
//                            replaced with VRLCMP02.
// 
//                            Commented out all the reference
//                            to Stock XFER.
// 
//                            Included SAP PO number in all
//                            the records where PO number is
//                            defined.
// 
// I/O Modules:
// ===========
// 
// NAME      DESCRIPTION
// --------  --------------------------------------------------
// none
// 
// ************************************************************
// ************************************************************
// *********************
Program SL0D type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  IN7REC IN7REC; // record
  IN8REC IN8REC; // record
  SL0DW00 SL0DW00; // record
  SL0DW01 SL0DW01; // record
  SL0DW02 SL0DW02; // record
  SL0DW03 SL0DW03; // record
  SL0DW04 SL0DW04; // record
  SL0DW05 SL0DW05; // record
  SL0DW06 SL0DW06; // record
  SL0DW07 SL0DW07; // record
  SL0DWB1 SL0DWB1; // record
  SL0DWB3 SL0DWB3; // record
  SL0DWB5 SL0DWB5; // record
  SL0DWD0 SL0DWD0; // record
  SL0DWPB SL0DWPB; // record
  SL0DWS0 SL0DWS0; // record
  SL1REC SL1REC; // record
  SLPREC SLPREC; // record
  SLSREC SLSREC; // record
  SLTREC SLTREC; // record
  SLUREC SLUREC; // record
  SLVREC SLVREC; // record
  SLWREC SLWREC; // record
  SLXREC SLXREC; // record
  SLYREC SLYREC; // record
  SQLCA SQLCA; // record
  SYPREC SYPREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  TARREC TARREC; // record
  TSHREC TSHREC; // record
  UT1REC UT1REC; // record
  VRLCMP02 VRLCMP02; // record
  VRLITM02 VRLITM02; // record
  X2CREC X2CREC; // record
  X3CREC X3CREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use SL0DT02; // table
  use SL0DT04; // table
  use SL0DT06; // table
  use SL0DT07; // table
  use XITTBL; // table
  use XRETBL; // table
  use XROTBL; // table
  use XWHTBL; // table
  use YRSTBL; // table
  use SL0DM.SL0DM010,  // forms
      SL0DM.SL0DM110, 
      SL0DM.SL0DM111, 
      SL0DM.SL0DM112, 
      SL0DM.SL0DM115, 
      SL0DM.SL0DM116, 
      SL0DM.SL0DM119, 
      SL0DM.SL0DM210, 
      SL0DM.SL0DM310, 
      SL0DM.SL0DM311, 
      SL0DM.SL0DM312, 
      SL0DM.SL0DM315, 
      SL0DM.SL0DM316, 
      SL0DM.SL0DM319, 
      SL0DM.SL0DM410, 
      SL0DM.SL0DM510, 
      SL0DM.SL0DM511, 
      SL0DM.SL0DM515, 
      SL0DM.SL0DM519, 
      SL0DM.SL0DM610, 
      SL0DM.SL0DM710, 
      SL0DM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    SL0D010: SL0D010();


     /* ************************************************************/
     /* *** if the map selection no. setup:                     ****/
     /* *** use it to go directly to selection (skip converse)  ****/
     /* ************************************************************/

    if (SL0DM010.XMSLMSNO > " ")
      if (SL0DM010.XMSLMSNO == "1")
        goto SL0D110; /* <=== new function*/
      end
      if (SL0DM010.XMSLMSNO == "2")
        goto SL0D210; /* <=== new function*/
      end
      if (SL0DM010.XMSLMSNO == "3")
        goto SL0D310; /* <=== new function*/
      end
      if (SL0DM010.XMSLMSNO == "4")
        goto SL0D410; /* <=== new function*/
      end
      if (SL0DM010.XMSLMSNO == "5")
        goto SL0D510; /* <=== new function*/
      end
      if (SL0DM010.XMSLMSNO == "6")
        goto SL0D610; /* <=== new function*/
      end
      if (SL0DM010.XMSLMSNO == "7")
        goto SL0D710; /* <=== new function*/
      end
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "010Z";
      SLWREC.SLWMSGNO = 0017; /* <--- invalid selection msg*/
      set SL0DM010.XMSLMSNO cursor, bold;
      goto SL0D020; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "020 "; /* error id location id*/
    goto SL0D020; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    SL0D020: SL0D020();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0D010; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0D110; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf14)
      goto SL0D210; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf15)
      goto SL0D310; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf16)
      goto SL0D410; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf17)
      goto SL0D510; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf18)
      goto SL0D610; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf20)
      goto SL0D710; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0D020; /* <=== re-display this screen*/
    end
     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      if (SL0DM010.XMSLMSNO == "1")
        goto SL0D110; /* <=== new function*/
      end
      if (SL0DM010.XMSLMSNO == "2")
        goto SL0D210; /* <=== new function*/
      end
      if (SL0DM010.XMSLMSNO == "3")
        goto SL0D310; /* <=== new function*/
      end
      if (SL0DM010.XMSLMSNO == "4")
        goto SL0D410; /* <=== new function*/
      end
      if (SL0DM010.XMSLMSNO == "5")
        goto SL0D510; /* <=== new function*/
      end
      if (SL0DM010.XMSLMSNO == "6")
        goto SL0D610; /* <=== new function*/
      end
      if (SL0DM010.XMSLMSNO == "7")
        goto SL0D710; /* <=== new function*/
      end
       /* ************************************************************/
       /* *** note: invalid selection is detected at this point   ****/
       /* ************************************************************/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "020Y";
      SLWREC.SLWMSGNO = 0017; /* <--- invalid selection msg*/
      set SL0DM010.XMSLMSNO cursor, bold;
      goto SL0D020; /* <=== converse map*/
    end


     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0D020; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    SL0D110: SL0D110();


     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "120 "; /* error id location id*/
    goto SL0D120; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    SL0D120: SL0D120();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0D110; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0DM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0D020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0D210; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf15)
      goto SL0D310; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf16)
      goto SL0D410; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf17)
      goto SL0D510; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf18)
      goto SL0D610; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf20)
      goto SL0D710; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0D120; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf6
     || converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      goto SL0D120; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0D120; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    SL0D210: SL0D210();


     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "220 "; /* error id location id*/
    goto SL0D220; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    SL0D220: SL0D220();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0D210; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.XXXLOCID = "020 "; /* reset error id*/
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0DM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0D020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0D110; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf15)
      goto SL0D310; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf16)
      goto SL0D410; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf17)
      goto SL0D510; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf18)
      goto SL0D610; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf20)
      goto SL0D710; /* <=== start new function*/
    end
     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0D220; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      goto SL0D220; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0D220; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    SL0D310: SL0D310();


     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "320 "; /* error id location id*/
    goto SL0D320; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    SL0D320: SL0D320();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0D310; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.XXXLOCID = "020 "; /* reset error id*/
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0DM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0D020; /* <=== re-display menu*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is pf13)
      goto SL0D110; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf14)
      goto SL0D210; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf16)
      goto SL0D410; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf17)
      goto SL0D510; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf18)
      goto SL0D610; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf20)
      goto SL0D710; /* <=== start new function*/
    end
     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0D320; /* <=== re-display this screen*/
    end
    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf6
     || converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      goto SL0D320; /* <=== converse map*/
    end


     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0D320; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    SL0D410: SL0D410();


     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "410 "; /* error id location id*/
    goto SL0D420; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    SL0D420: SL0D420();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0D410; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.XXXLOCID = "020 "; /* reset error id*/
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0DM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0D020; /* <=== re-display menu*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is pf13)
      goto SL0D110; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf14)
      goto SL0D210; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf15)
      goto SL0D310; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf17)
      goto SL0D510; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf18)
      goto SL0D610; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf20)
      goto SL0D710; /* <=== start new function*/
    end
     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0D420; /* <=== re-display this screen*/
    end

    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf6
     || converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      goto SL0D420; /* <=== converse map*/
    end


     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0D420; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    SL0D510: SL0D510();


     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "520 "; /* error id location id*/
    goto SL0D520; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    SL0D520: SL0D520();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0D510; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0DM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0D020; /* <=== re-display menu*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      goto SL0D520; /* <=== converse map*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0D110; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf14)
      goto SL0D210; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf15)
      goto SL0D310; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf16)
      goto SL0D410; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf18)
      goto SL0D610; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf20)
      goto SL0D710; /* <=== start new function*/
    end
     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0D520; /* <=== re-display this screen*/
    end

    if (converseVar.eventKey is enter)
      if (SLWREC.SLWSEXSW == "Y")
        goto SL0D110; /* <=== start new function*/
      else
        goto SL0D520; /* <=== converse map*/
      end
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "520Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0D520; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    SL0D610: SL0D610();


     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "620 "; /* error id location id*/
    goto SL0D620; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    SL0D620: SL0D620();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0D610; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0DM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0D020; /* <=== re-display menu*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is pf13)
      goto SL0D110; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf14)
      goto SL0D210; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf15)
      goto SL0D310; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf16)
      goto SL0D410; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf17)
      goto SL0D510; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf20)
      goto SL0D710; /* <=== start new function*/
    end
     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0D620; /* <=== re-display this screen*/
    end

    if (converseVar.eventKey is enter)
      goto SL0D620; /* <=== converse map*/
    end


     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "620Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0D620; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    SL0D710: SL0D710();

     /* *************************************************************/
     /* ***   normal flow to converse map                        ****/
     /* *************************************************************/

    SLWREC.XXXLOCID = "720"; /* error id location id*/
    goto SL0D720; /* converse map*/

     /* *************************************************************/
     /* ***   end of execute flow section                        ****/
     /* *************************************************************/

    SL0D720: SL0D720();

     /* *************************************************************/
     /* *** if PA2: restart application regardless of status     ****/
     /* *************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0D710; /* re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.XXXLOCID = "020"; /* reset error id*/
      SLWREC.SLWMSGNO = 0; /* reset msg no.*/
      SLWREC.SLWERRSW = "N"; /* reset error switch*/
      SL0DM010.XMSLMSNO = " "; /* blank out prev selection value*/
      goto SL0D020; /* redisplay menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0D110; /* restart new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0D210; /* restart new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0D310; /* restart new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0D410; /* restart new function*/
    end

    if (converseVar.eventKey is pf17)
      goto SL0D510; /* restart new function*/
    end

    if (converseVar.eventKey is pf18)
      goto SL0D610; /* restart new function*/
    end

     /* *************************************************************/
     /* *** if error: (re-) display the screen                   ****/
     /* *************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0D720; /* redisplay the screen*/
    end

     /* *************************************************************/
     /* *** if one of these PF keys: go to related process       ****/
     /* *************************************************************/

    if (converseVar.eventKey is enter)
      goto SL0D720; /* converse map*/
    end

     /* *************************************************************/
     /* *** fall thru error -code shouldn't be executed          ****/
     /* *************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "720Z";
    SLWREC.SLWMSGNO = 0001; /* severe error msg*/
    goto SL0D720; /* display this screen*/

     /* *************************************************************/
     /* *** end of flow                                          ****/
     /* *************************************************************/

  end // end main
end // end SL0D

// one time initializations
Function SL0D010()


   /* ************************************************************/
   /* *** standard security checking                          ****/
   /* *** note: comment out if exec'g from your msl           ****/
   /* ************************************************************/

  XSENTRY();

   /* ************************************************************/
   /* *** standard segmented trans id setting                 ****/
   /* ************************************************************/

  XSSEGTR();

   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0DM010 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0DM110 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0DM111 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0DM112 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0DM115 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0DM116 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0DM119 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0DM210 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0DM310 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0DM311 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0DM312 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0DM315 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0DM316 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0DM319 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0DM410 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0DM510 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0DM515 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0DM519 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0DM610 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0DM710 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set TA0PM001 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0DW00 empty; /* application storage*/
  set SL0DW01 empty; /* application storage*/
  set SL0DW02 empty; /* application storage*/
  set SL0DW03 empty; /* application storage*/
  set SL0DW04 empty; /* application storage*/
  set SL0DW05 empty; /* application storage*/
  set SL0DW06 empty; /* application storage*/
  set SL0DW07 empty; /* application storage*/
  set SL0DWS0 empty; /* application storage*/
  set SL0DWD0 empty; /* application storage*/
  set SL0DWB1 empty; /* application storage*/
  set SL0DWB3 empty; /* application storage*/
  set SL0DWB5 empty; /* application storage*/
  set SL0DWPB empty; /* application storage*/
  set IN7REC empty; /**/
  set IN8REC empty; /**/
   /* SET PCYREC EMPTY;                /**/
   /* SET PC3REC EMPTY;                /**/
  set VRLCMP02 empty; /**/
  set SLPREC empty; /**/
  set SLSREC empty; /**/
  set SLTREC empty; /**/
  set SLUREC empty; /**/
  set SLVREC empty; /**/
  set SLWREC empty; /* common working storage fields*/
  set SLXREC empty; /* passed keys user area layout*/
  set SLYREC empty; /* ta0050 parameter #1*/
  set SL1REC empty; /**/
  set VRLITM02 empty; /**/
  set SYPREC empty; /**/
  set TAEREC empty; /**/
  set TARREC empty; /**/
  set TA1REC empty; /* TA0020 record*/
  set TA2REC empty; /**/
  set TA3REC empty; /**/
  set TA5REC empty; /* ta0050 parameter #2*/
  set TA6REC empty; /**/
  set TSHREC empty; /**/
  set UT1REC empty; /**/
  set X2CREC empty; /**/
  set X3CREC empty; /**/
  set SQLCA empty; /* SQL returned data record*/
  set ERRSQLCA empty; /* TA0020 version of SQLCA*/

   /* ************************************************************/
   /* *** maintenance information:                            ****/
   /* *** =======================                             ****/
   /* *** rvsn   date    update by:    description:           ****/
   /* *** ---- --------  ------------  ---------------------- ****/
   /* ***  00  01/28/87  C. Beer       created                ****/
   /* ***  01  08/31/88  W. Jones      add reset scrn on fast ****/
   /* ***                              path exit error        ****/
   /* ***  02  10/26/88  L. Deluhery   fix 40 occurs abend    ****/
   /* ***  03  11/14/88  W. Jones      fix printer limit abend****/
   /* ***  04  11/15/88  J. Wood       added xssegtr logic    ****/
   /* ***  06  07/06/89  kande1        added receiving comment****/
   /* ***                              to sl0dm110 & sl0dm310 ****/
   /* ************************************************************/

  SLWREC.XXXRVNBR = "06";

  SLWREC.XXXMAPNM = "SL0DM010";
  SLWREC.XXXTITLE = "RECEIVING INQUIRY/PRINT MENU";

  XSX2CDT();

  SLWREC.XXXAPPID = "SL0D"; /* error id appl. name*/
  SLWREC.SLWTALOC = "SL0D010 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0DM010"; /* TA0020 current map name*/

  SLWREC.SLWSUMQU = "SLSD"; /* summary tsq appl. id*/
  SLWREC.SLWDETQU = "SLDD"; /* detail tsq appl. id*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* error message*/
  SLWREC.SLWLINPP = 15; /* lines per page*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0DM010.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0DM010.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0DM010.XXXTITLE = SLWREC.XXXTITLE;
  SL0DM010.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  XSSLSPQ();


   /* ************************************************************/
   /* *** check commarea fast path item to see if it should   ****/
   /* *** be used to setup working storage &/or map fields    ****/
   /* ************************************************************/

  if (COMMAREA.CAITEM > " ")
    SL0DSY0(); /* <=== use commarea item*/
    COMMAREA.CAITEM = " ";
  end

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end SL0D010

// converse & control key entry
Function SL0D020()


   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0DM010.XXXERRID = SLWREC.XXXERRID;


  converse SL0DM010 ;

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020A";
    SLWREC.SLWMSGNO = 0;
    SL0DM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to Receipt Entry Maint. Menu             ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "SW0R";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020B";
    SLWREC.SLWMSGNO = 0;
    SL0DM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020C";
    SLWREC.SLWMSGNO = 0;
    SL0DM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020D";
    SLWREC.SLWMSGNO = 0;
    SL0DM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0DM010.CATOAP > " ")
    COMMAREA.CATOAP = SL0DM010.CATOAP;
    COMMAREA.CAITEM = SL0DM010.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020E";
    SLWREC.SLWMSGNO = 0;
    SL0DM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0DM010.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0DM010.VAGen_EZEMSG = " ";
  SLWREC.SLWTALOC = "020 ";
  set SL0DM010.CATOAP initialAttributes;
  set SL0DM010.CAITEM initialAttributes;
  set SL0DM010.XMSLMSNO cursor, initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0DM010.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0DM010.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0DSH0(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pf20)
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "020I";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0D020

// one time initializations
Function SL0D110()


   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0DM110 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0DW01 empty; /* appl. working storage area*/

  SLWREC.XXXMAPNM = "SL0DM110";
  SLWREC.XXXTITLE = "RECEIVING CONTAINER INQUIRY";

  XSX2CDT();

  SLWREC.XXXAPPID = "SL0D"; /* error id appl. name*/
  SLWREC.SLWTALOC = "SL0D110 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0DM110"; /* TA0020 current map name*/

  SLWREC.SLWSUMQU = "SLSH"; /* summary tsq id*/
  SLWREC.SLWDETQU = "SLDH"; /* detail tsq id*/
  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* error message*/
  SLWREC.SLWLINPP = 14; /* lines per page*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed during resets and for multiple levels     ****/
   /* ************************************************************/

  SL0DM110.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0DM110.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0DM110.XXXTITLE = SLWREC.XXXTITLE;
  SL0DM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  SL0DM110.XWHCD = COMMAREA.XWHCD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  SL0DWS0.SL0DWLTH = 1020; /* max summary tsq length*/
  SL0DWD0.SL0DWLTH = 1020; /* max detail tsq length*/

   /* ************************************************************/
   /* *** purge any existing storage in case of 'left overs'  ****/
   /* *** note: not found is acceptable return code           ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq(s)*/

   /* ************************************************************/
   /* *** check commarea fast path item to see if it should   ****/
   /* *** be used to setup working storage &/or map fields    ****/
   /* ************************************************************/

  if (COMMAREA.CAITEM > " ")
    SL0DSY1(); /* <=== use commarea caitem*/
    COMMAREA.CAITEM = " ";
  end

  if (COMMAREA.CAUSERA > " ")
    SL0DS01(); /* <=== causera input processing*/
  end

   /* ************************************************************/
   /* *** setup the floating map lines for a blank map        ****/
   /* ************************************************************/

  SL0DSN1(); /* <=== setup blank screen*/

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end SL0D110

// conv & ctrl float
Function SL0D120()


   /* ************************************************************/
   /* *** no "before" processing ...                          ****/
   /* *** ... except msg no.  and  error id setup             ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0DM110.XXXERRID = SLWREC.XXXERRID;


  converse SL0DM110 ;

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    XSSLSPQ(); /* <=== purge tsq(s)*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120A";
    SLWREC.SLWMSGNO = 0;
    SL0DM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    converseLib.clearScreen();
    set SL0DM010 initial; /* clear the map*/
    XSSLSPQ(); /* <=== purge tsq(s)*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120C";
    SLWREC.SLWMSGNO = 0;
    SL0DM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120D";
    SLWREC.SLWMSGNO = 0;
    SL0DM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0DM110.CATOAP > " ")
    COMMAREA.CATOAP = SL0DM110.CATOAP;
    COMMAREA.CAITEM = SL0DM110.CAITEM;
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSEXIT();
    SL0DST1(); /* <=== reset scrn*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120E";
    SLWREC.SLWMSGNO = 0;
    SL0DM110.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0DM110.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0DM110.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "120 ";
  set SL0DM110.CATOAP initialAttributes;
  set SL0DM110.CAITEM initialAttributes;
  set SL0DM110.TS3CNTNR cursor;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set SL0DM110.XWHCD initialAttributes;
  set SL0DM110.TS3CNTNR initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0DM110.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0DM110.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pf20)
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    if (SLWREC.SLWLASPF == "E")
      SLWREC.SLWIDX01 = 1;
      while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
        if (SL0DM110.XMSLMSEL[SLWIDX01] > " ")
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "120G";
          SLWREC.SLWMSGNO = 0003; /* <--- use pf6 msg*/
          exit stack;
        else
          SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
        end
      end
    end
    SL0DSH1(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF6: do edits & process inputs                   ****/
   /* *** note: check first for need to save selected subkey  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf6)
    if (SLWREC.SLWLASPF == "6")
      SLWREC.SLWIDX01 = 1;
      while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
        if (SL0DM110.XMSLMSEL[SLWIDX01] > " ")
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "120G";
          SLWREC.SLWMSGNO = 0018;
          exit stack;
        else
          SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
        end
      end
    end
    SL0DSI1(); /* <=== PF6 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if selection input now: display error msg           ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    if (SL0DM110.XMSLMSEL[SLWIDX01] > " ")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "120H";
      SLWREC.SLWMSGNO = 0003; /* <--- use pf6 msg*/
      exit stack;
    else
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
    end
  end

   /* ************************************************************/
   /* *** if PF7: scroll backwards, key changes NOT allowed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf7)
    SL0DSJ1(); /* <=== PF7 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF8: scroll forwards, key changes NOT allowed    ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf8)
    SL0DSK1(); /* <=== PF8 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "120I";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0D120

// disp left sum line
Function SL0D121()

  SL0DM111.SL2PALET = SL0DWB1.SL2PALET;
  SL0DM111.SL2CASE = SL0DWB1.SL2CASE;
  SL0DM111.SL0DWMPO = SL0DWB1.SL0DWMPO;
  SL0DM111.SL0DWFPT = SL0DWB1.SL0DWFPT;
  SL0DM111.XGPCD = SL0DWB1.XGPCD;
  SL0DM111.SY1STNBR = SL0DWB1.SY1STNBR;
  SL0DM111.SY2CLRID = SL0DWB1.SY2CLRID;
  SL0DM111.XDMCD = SL0DWB1.XDMCD;
  SL0DM111.XQACD = SL0DWB1.XQACD;
  SL0DM111.XSDCD = SL0DWB1.XSDCD;
  SL0DM111.XEGCD = SL0DWB1.XEGCD;
  SL0DM111.XSLCD = SL0DWB1.XSLCD;
  SL0DM111.XPGCD = SL0DWB1.XPGCD;
  SL0DM111.XUMCD = SL0DWB1.XUMCD;
  SL0DM111.XOWCD = SL0DWB1.XOWCD;
  SL0DM111.SL0DMRCV = SL0DWB1.SL0DWRCV;


  display SL0DM111 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0D121

// disp left det line
Function SL0D122()


   /* ************************************************************/
   /* *** read the detail tsq by relative record number  and  ****/
   /* *** move it to the entire map data line                 ****/
   /* *** note: parm #2 index computed from summary ptr +     ****/
   /* ***       while/line ptr - 1 (adj. for correct tsq #)   ****/
   /* ************************************************************/

  SL0DM112.SL0DMSZ1 = SL0DWB1.SL0DWSZ1;
  SL0DM112.SL0DMSZ2 = SL0DWB1.SL0DWSZ2;
  SL0DM112.SL0DMSZ3 = SL0DWB1.SL0DWSZ3;
  SL0DM112.SL0DMSZ4 = SL0DWB1.SL0DWSZ4;

  SL0DM112.SL0DMQY1 = SL0DWB1.SL0DWQY1;
  SL0DM112.SL0DMQY2 = SL0DWB1.SL0DWQY2;
  SL0DM112.SL0DMQY3 = SL0DWB1.SL0DWQY3;
  SL0DM112.SL0DMQY4 = SL0DWB1.SL0DWQY4;



   /* ************************************************************/
   /* *** set select fld on all (detail map) lines ASKIP,DARK ****/
   /* ************************************************************/

  set SL0DM110.XMSLMSEL[SLWIDX01] skip, invisible;




  display SL0DM112 ;


   /* ************************************************************/
   /* *** no DISPLAY AFTER processing                         ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0D122

// disp left sum title
Function SL0D125()


   /* ************************************************************/
   /* *** no "before" processing... except to setup "S"       ****/
   /* ************************************************************/

  SL0DM110.XMSLMSSS = "S";
  set SL0DM110.XMSLMSSS initialAttributes;


  display SL0DM115 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0D125

// disp left det title
Function SL0D126()


   /* ************************************************************/
   /* *** no "before" processing... except to blank "S"       ****/
   /* ************************************************************/

  SL0DM110.XMSLMSSS = "S";
  set SL0DM110.XMSLMSSS initialAttributes;


  display SL0DM116 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0D126

// disp blank line
Function SL0D129()


   /* ************************************************************/
   /* *** set selection fields ASKIP,DARK                     ****/
   /* ************************************************************/

  set SL0DM110.XMSLMSEL[SLWIDX01] skip, invisible;


  display SL0DM119 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0D129

// one time initializations
Function SL0D210()


   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0DM210 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0DW02 empty; /* appl. working storage area*/

  SLWREC.XXXMAPNM = "SL0DM210";
  SLWREC.XXXTITLE = "RECEIVING REPORT";

  XSX2CDT();

  SLWREC.XXXAPPID = "SL0D"; /* error id appl. name*/
  SLWREC.SLWTALOC = "SL0D210 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0DM210"; /* TA0020 current map name*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* error message*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0DM210.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0DM210.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0DM210.XXXTITLE = SLWREC.XXXTITLE;
  SL0DM210.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  SL0DM210.XWHCD = COMMAREA.XWHCD;

   /* ************************************************************/
   /* *** if being transf from other appl do not save causerea****/
   /* *** fld. if transf from same appl save the causera fld  ****/
   /* *** which contains current printer                      ****/
   /* ************************************************************/
  if (COMMAREA.CAFROMAP == COMMAREA.CACURRAP)
    /* next sentence*/
  else
    COMMAREA.CAUSERA = " ";
  end

  if (COMMAREA.CAUSERA > " ")
    SL0DM410.SL0DMPID = COMMAREA.CAUSERA;
    TA6REC.XURDEST = COMMAREA.CAUSERA;
    COMMAREA.CAUSERA = " ";
    SLWREC.SLWFTMSW = "N";
  end

  if (SLWREC.SLWFTMSW == "N")
    SL0DM210.SL0DMPID = TA6REC.XURDEST; /* move dest field fro*/
  end

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  SLWREC.SLWLINPP = 10; /* lines per page*/

   /* ************************************************************/
   /* *** if whse present: validate keys/whse                 ****/
   /* ***                  save keys/whse                     ****/
   /* ************************************************************/

  if (SL0DM210.XWHCD > " ")
    SL0DSC2(); /* <=== field edits*/
    if (SLWREC.SLWERRSW == "Y")
      SLWREC.XXXLOCID = "210A";
      return;
    end
    SL0DSF2(); /* <=== save key values*/

    if (SLWREC.SLWERRSW == "Y")
      SLWREC.XXXLOCID = "210B";
    end
  end


end // end SL0D210

// conv & cntl fixed
Function SL0D220()


   /* ************************************************************/
   /* *** no "before" processing ...                          ****/
   /* *** ... except msg no.  and  error id setup             ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0DM210.XXXERRID = SLWREC.XXXERRID;


  converse SL0DM210 ;


   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220A";
    SLWREC.SLWMSGNO = 0;
    SL0DM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220C";
    SLWREC.SLWMSGNO = 0;
    SL0DM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220D";
    SLWREC.SLWMSGNO = 0;
    SL0DM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0DM210.CATOAP > " ")
    COMMAREA.CATOAP = SL0DM210.CATOAP;
    COMMAREA.CAITEM = SL0DM210.CAITEM;
    COMMAREA.CAUSERA = SL0DM210.SL0DMPID;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220E";
    SLWREC.SLWMSGNO = 0;
    SL0DM210.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0DM210.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0DM210.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "120 ";
  set SL0DM210.CATOAP initialAttributes;
  set SL0DM210.CAITEM initialAttributes;
  set SL0DM210.TS3CNTNR[1] cursor;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set SL0DM210.XWHCD initialAttributes;
  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= 10)
    set SL0DM210.TS3CNTNR[SLWIDX01] initialAttributes;
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0DM210.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0DM210.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pf20)
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0DSH2(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "220I";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0D220

// one time initializations
Function SL0D310()


   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0DM310 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0DW03 empty; /* appl. working storage area*/

  SLWREC.XXXMAPNM = "SL0DM310";
  SLWREC.XXXTITLE = "RECEIVING COMPARISON INQUIRY";

  XSX2CDT();

  SLWREC.XXXAPPID = "SL0D"; /* error id appl. namen(2)*/
  SLWREC.SLWTALOC = "SL0D310 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0DM310"; /* TA0020 current map name*/

  SLWREC.SLWSUMQU = "SLSH"; /* <-- summary tsq id*/
  SLWREC.SLWDETQU = "SLDH"; /* <-- detail tsq id*/
  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* error message*/
  SLWREC.SLWLINPP = 14; /* lines per page*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0DM310.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0DM310.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0DM310.XXXTITLE = SLWREC.XXXTITLE;
  SL0DM310.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* *** note: initial value may be overlayed by passed keys ****/
   /* ************************************************************/

  SL0DM310.XWHCD = COMMAREA.XWHCD;
  SL0DM310.SL0DMCHC = "PL"; /* pklist/po sel default*/

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  SL0DWS0.SL0DWLTH = 1020; /* max summary tsq length*/
  SL0DWD0.SL0DWLTH = 1020; /* max detail tsq length*/

   /* ************************************************************/
   /* *** purge any existing storage in case of 'left overs'  ****/
   /* *** note: not found is acceptable return code           ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq(s)*/

   /* ************************************************************/
   /* *** check commarea fast path item to see if it should   ****/
   /* *** be used to setup working storage &/or map fields    ****/
   /* ************************************************************/

  if (COMMAREA.CAITEM > " ")
    SL0DSY3(); /* <=== use commarea caitem*/
    COMMAREA.CAITEM = " ";
  end

  if (COMMAREA.CAUSERA > " ")
    SL0DS03(); /* <=== USERA processing*/
    COMMAREA.CAUSERA = " ";
  end

   /* ************************************************************/
   /* *** setup the floating map lines for a blank map        ****/
   /* ************************************************************/

  SL0DSN3(); /* <=== setup blank screen*/

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/



end // end SL0D310

// conv & ctrl float
Function SL0D320()


   /* ************************************************************/
   /* *** ...msg no.  and  error id setup                     ****/
   /* *** ...set up sas alert for hard error if needed        ****/
   /* ************************************************************/

  if (SL0DW03.SL0DWNPD == "Y") /* no pklist data found*/
    SL0DM310.SL0DMNPD = "NO PL EXISTS"; /* alert user of pl override*/
  else
    SL0DM310.SL0DMNPD = " ";
  end

   /* IF SL0DW03.SL0DWPSW EQ 'XF'             /* transfer processed*/
    /* AND SLWREC.SLWERRSW NE 'Y';           /* and no error*/
    /* MOVE ' ' TO SL0DM310.SL0DMCHC;*/
                                   /* blank out 'po'/'pl'..not applicable*/
   /* END;*/

  if (SL0DW03.SL0DWMHE == "Y") /* hard err sw for product*/
    SL0DM310.SL0DMSSA = "PRODUCTION SAS ALERT*"; /* sas alert*/
    set SL0DM310.SL0DMSSA bold;
  else
                                   /* no hard error*/
    SL0DM310.SL0DMSSA = " ";
    set SL0DM310.SL0DMSSA initialAttributes;
  end

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0DM310.XXXERRID = SLWREC.XXXERRID;


  converse SL0DM310 ;

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    XSSLSPQ(); /* <=== purge tsq(s)*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320A";
    SLWREC.SLWMSGNO = 0;
    SL0DM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    converseLib.clearScreen();
    set SL0DM010 initial; /* clear menu map*/
    XSSLSPQ(); /* <=== purge tsq*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320C";
    SLWREC.SLWMSGNO = 0;
    SL0DM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320D";
    SLWREC.SLWMSGNO = 0;
    SL0DM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  end


   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0DM310.CATOAP > " ")
    COMMAREA.CATOAP = SL0DM310.CATOAP;
    COMMAREA.CAITEM = SL0DM310.CAITEM;
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSEXIT();
    SL0DST3(); /* <=== reset scrn*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320E";
    SLWREC.SLWMSGNO = 0;
    SL0DM310.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0DM310.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0DM310.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "320 ";
  set SL0DM310.CATOAP initialAttributes;
  set SL0DM310.CAITEM initialAttributes;
  set SL0DM310.TS3CNTNR cursor;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set SL0DM310.XWHCD initialAttributes;
  set SL0DM310.TS3CNTNR initialAttributes;
  set SL0DM310.SL0DMCHC initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0DM310.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0DM310.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pf20)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF19: save this map's key values in SLXREC and   ****/
   /* ***          go to SL0c selection #5 to update the      ****/
   /* ***          receiving log into inventory               ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf19)
    SL0DS13(); /* <=== USERA exit processing*/
    COMMAREA.CATOAP = "SL0C";
    COMMAREA.CAITEM = "5";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320L";
    SLWREC.SLWMSGNO = 0;
    SL0DM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    if (SLWREC.SLWLASPF == "E")
      SLWREC.SLWIDX01 = 1;
      while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
        if (SL0DM310.XMSLMSEL[SLWIDX01] > " ")
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "320G";
          SLWREC.SLWMSGNO = 0003; /* <--- use pf6 msg*/
          exit stack;
        else
          SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
        end
      end
    end
    SL0DSH3(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF6: do edits & process inputs                   ****/
   /* *** note: check first for need to save selected subkey  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf6)
    if (SLWREC.SLWLASPF == "6")
      SLWREC.SLWIDX01 = 1;
      while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
        if (SL0DM310.XMSLMSEL[SLWIDX01] > " ")
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "320H";
          SLWREC.SLWMSGNO = 0018;
          exit stack;
        else
          SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
        end
      end
    end
    SL0DSI3(); /* <=== PF6 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if selection input now: display error msg           ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    if (SL0DM310.XMSLMSEL[SLWIDX01] > " ")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "320I";
      SLWREC.SLWMSGNO = 0003; /* <--- use pf6 msg*/
      exit stack;
    else
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
    end
  end

   /* ************************************************************/
   /* *** if PF7: scroll backwards, key changes NOT allowed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf7)
    SL0DSJ3(); /* <=== PF7 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF8: scroll forwards, key changes NOT allowed    ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf8)
    SL0DSK3(); /* <=== PF8 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "320K";
  SLWREC.SLWMSGNO = 0004; /* <--- invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0D320

// disp left sum line
Function SL0D321()

  SL0DM311.SL0DWMPO = SL0DWB3.SL0DWMPO;
  SL0DM311.SL0DWFPT = SL0DWB3.SL0DWFPT;
  SL0DM311.XGPCD = SL0DWB3.XGPCD;
  SL0DM311.SY1STNBR = SL0DWB3.SY1STNBR;
  SL0DM311.SY2CLRID = SL0DWB3.SY2CLRID;
  SL0DM311.XDMCD = SL0DWB3.XDMCD;
  SL0DM311.XQACD = SL0DWB3.XQACD;
  SL0DM311.XSDCD = SL0DWB3.XSDCD;
  SL0DM311.XEGCD = SL0DWB3.XEGCD;
  SL0DM311.XSLCD = SL0DWB3.XSLCD;
  SL0DM311.XPGCD = SL0DWB3.XPGCD;
  SL0DM311.XUMCD = SL0DWB3.XUMCD;
  SL0DM311.XOWCD = SL0DWB3.XOWCD;
  SL0DM311.SL0DMRCV = SL0DWB3.SL0DWRCV;
  SL0DM311.SL0DMPKL = SL0DWB3.SL0DWPKL;


  display SL0DM311 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0D321

// disp left det line
Function SL0D322()


   /* ************************************************************/
   /* *** read the detail tsq by relative record number  and  ****/
   /* *** move it to the entire map data line                 ****/
   /* *** note: parm #2 index computed from summary ptr +     ****/
   /* ***       while/line ptr - 1 (adj. for correct tsq #)   ****/
   /* ************************************************************/

  SL0DM312.SL0DMSZ1 = SL0DWB3.SL0DWSZ1;
  SL0DM312.SL0DMSZ2 = SL0DWB3.SL0DWSZ2;
  SL0DM312.SL0DMSZ3 = SL0DWB3.SL0DWSZ3;
  SL0DM312.SL0DMRC1 = SL0DWB3.SL0DWRC1;
  SL0DM312.SL0DMRC2 = SL0DWB3.SL0DWRC2;
  SL0DM312.SL0DMRC3 = SL0DWB3.SL0DWRC3;
  SL0DM312.SL0DMPL1 = SL0DWB3.SL0DWPL1;
  SL0DM312.SL0DMPL2 = SL0DWB3.SL0DWPL2;
  SL0DM312.SL0DMPL3 = SL0DWB3.SL0DWPL3;

   /* ************************************************************/
   /* *** highlight both receipt qty and packing list qty for ****/
   /* *** a size if they are not equal.                       ****/
   /* ************************************************************/

  if (SL0DWB3.SL0DWRC1 != SL0DWB3.SL0DWPL1)
    set SL0DM312.SL0DMRC1 bold;
    set SL0DM312.SL0DMPL1 bold;
  else
    set SL0DM312.SL0DMRC1 initialAttributes;
    set SL0DM312.SL0DMPL1 initialAttributes;
  end

  if (SL0DWB3.SL0DWRC2 != SL0DWB3.SL0DWPL2)
    set SL0DM312.SL0DMRC2 bold;
    set SL0DM312.SL0DMPL2 bold;
  else
    set SL0DM312.SL0DMRC2 initialAttributes;
    set SL0DM312.SL0DMPL2 initialAttributes;
  end

  if (SL0DWB3.SL0DWRC3 != SL0DWB3.SL0DWPL3)
    set SL0DM312.SL0DMRC3 bold;
    set SL0DM312.SL0DMPL3 bold;
  else
    set SL0DM312.SL0DMRC3 initialAttributes;
    set SL0DM312.SL0DMPL3 initialAttributes;
  end

   /* ************************************************************/
   /* *** set select fld on all (detail map) lines ASKIP,DARK ****/
   /* ************************************************************/

  set SL0DM110.XMSLMSEL[SLWIDX01] skip, invisible;




  display SL0DM312 ;


   /* ************************************************************/
   /* *** no DISPLAY AFTER processing                         ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0D322

// disp left sum title
Function SL0D325()


   /* ************************************************************/
   /* *** no "before" processing... except to setup "S"       ****/
   /* ************************************************************/

  SL0DM310.XMSLMSSS = "S";
  set SL0DM310.XMSLMSSS initialAttributes;


  display SL0DM315 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0D325

// disp left det title
Function SL0D326()


   /* ************************************************************/
   /* *** no "before" processing... except to blank "S"       ****/
   /* ************************************************************/

  SL0DM310.XMSLMSSS = " ";
  set SL0DM310.XMSLMSSS skip, invisible;


  display SL0DM316 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0D326

// disp blank line
Function SL0D329()


   /* ************************************************************/
   /* *** set selection fields ASKIP,DARK                     ****/
   /* ************************************************************/

  set SL0DM310.XMSLMSEL[SLWIDX01] skip, invisible;


  display SL0DM319 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0D329

// one time initializations
Function SL0D410()


   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0DM410 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0DW04 empty; /* appl. working storage area*/

  SLWREC.XXXMAPNM = "SL0DM410";
  SLWREC.XXXTITLE = "RECEIVING COMPARISON REPORT";

  XSX2CDT();

  SLWREC.XXXAPPID = "SL0D"; /* error id appl. name*/
  SLWREC.SLWTALOC = "SL0D410 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0DM410"; /* TA0020 current map name*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* error message*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0DM410.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0DM410.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0DM410.XXXTITLE = SLWREC.XXXTITLE;
  SL0DM410.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  SL0DM410.XWHCD = COMMAREA.XWHCD;

   /* ************************************************************/
   /* *** if being transf from other appl do not save causera ****/
   /* *** fld. if transf from same appl save the causera flda ****/
   /* *** which contains current printer                      ****/
   /* ************************************************************/
  if (COMMAREA.CAFROMAP == COMMAREA.CACURRAP)
    /* next sentence*/
  else
    COMMAREA.CAUSERA = " ";
  end

  if (COMMAREA.CAUSERA > " ")
    SL0DM410.SL0DMPID = COMMAREA.CAUSERA;
    TA6REC.XURDEST = COMMAREA.CAUSERA;
    COMMAREA.CAUSERA = " ";
    SLWREC.SLWFTMSW = "N";
  end

  if (SLWREC.SLWFTMSW == "N")
    SL0DM410.SL0DMPID = TA6REC.XURDEST; /* move dest field*/
  end

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  SLWREC.SLWLINPP = 10; /* lines per page*/

   /* ************************************************************/
   /* *** if whse present: validate keys/whse                 ****/
   /* ***                  save keys/whse                     ****/
   /* ************************************************************/

  if (SL0DM410.XWHCD > " ")
    SL0DSC4(); /* <=== field edits*/
    if (SLWREC.SLWERRSW == "Y")
      SLWREC.XXXLOCID = "410A";
      return;
    end
    SL0DSF4(); /* <=== save key values*/
    if (SLWREC.SLWERRSW == "Y")
      SLWREC.XXXLOCID = "410B";
    end
  end


end // end SL0D410

// conv & cntl fixed
Function SL0D420()


   /* ************************************************************/
   /* *** no "before" processing ...                          ****/
   /* *** ... except msg no.  and  error id setup             ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0DM410.XXXERRID = SLWREC.XXXERRID;


  converse SL0DM410 ;

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420A";
    SLWREC.SLWMSGNO = 0;
    SL0DM410.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420C";
    SLWREC.SLWMSGNO = 0;
    SL0DM410.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420D";
    SLWREC.SLWMSGNO = 0;
    SL0DM410.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0DM410.CATOAP > " ")
    COMMAREA.CATOAP = SL0DM410.CATOAP;
    COMMAREA.CAITEM = SL0DM410.CAITEM;
    COMMAREA.CAUSERA = SL0DM410.SL0DMPID;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420E";
    SLWREC.SLWMSGNO = 0;
    SL0DM410.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0DM410.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0DM410.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "420 ";
  set SL0DM410.CATOAP initialAttributes;
  set SL0DM410.CAITEM initialAttributes;
  set SL0DM410.TS3CNTNR[1] cursor;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set SL0DM410.XWHCD initialAttributes;
  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= 10)
    set SL0DM410.TS3CNTNR[SLWIDX01] initialAttributes;
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0DM410.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0DM410.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pf20)
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0DSH4(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "420I";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0D420

// inquiry : sz xlate : 0
Function SL0D450()


   /* ************************************************************/
   /* *** obtain the desired size description/size id (no.)   ****/
   /* *** using the std module:  SY1190                       ****/
   /* *** code the following before this is executed:         ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* ***   note: or setup during init. & use a comment       ****/
   /* ***   SYPREC.SYPFC:   PC = all valid sizes              ****/
   /* ***                   IE = int. sz id to desc.          ****/
   /* ***                   EI = desc. to int. sz id          ****/
   /* ***   SYPREC.SYPCMPSW: Y = compressed (first blank or   ****/
   /* ***                        zero is end of data)         ****/
   /* ***                    N = not compressed (positional)  ****/
   /* *** code the action for the following return codes:     ****/
   /* *** note: check the SYPREC.SYPRC (NOT sqlcode)          ****/
   /* ***      0 = successful                                 ****/
   /* ***      9 = deadlock                                   ****/
   /* ***     10 = not found                                  ****/
   /* ***  other = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** call sy1190                                         ****/
   /* *** note: func & compress sw setup prior to this sgrp   ****/
   /* ************************************************************/

  call "SY1190" (SQLCA, SYPREC) {isNoRefresh = yes, isExternal = yes};

  if (SYPREC.SYPRC == 0)
    return;
  end

  if (SYPREC.SYPRC == 9)
    return;
  end

  if (SYPREC.SYPRC == 10)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "SL0D450 ";
  TA1REC.TA1LOCAT[1] = "SY1190  ";
  TA1REC.TA1LOCAT[3] = SYPREC.SYPRCX;
  TA1REC.TA1LOCAT[4] = "SZ XLATE";
  TA1REC.TA1DBASE = "MULTIPLE";
  TA1REC.TA1TBLVU = "DB VIEWS";
  TA1REC.TA1TBLKE = SYPREC.SYPKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0D450

// one time initializations
Function SL0D510()


   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0DM510 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0DW05 empty; /* appl. working storage area*/

  SLWREC.XXXMAPNM = "SL0DM510";
  SLWREC.XXXTITLE = "RECEIVING INQUIRY BY WAREHOUSE";

  XSX2CDT();

  SLWREC.XXXAPPID = "SL0D"; /* error id appl. namen(2)*/
  SLWREC.SLWTALOC = "SL0D510 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0DM510"; /* TA0020 current map name*/

  SLWREC.SLWSUMQU = "SLSH"; /* summary tsq id*/
  SLWREC.SLWDETQU = "SLDH"; /* detail tsq id*/
  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWSEXSW = "N"; /* special exit switch*/
  SLWREC.SLWMSGNO = 0; /* error message*/
  SLWREC.SLWLINPP = 14; /* lines per page*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0DM510.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0DM510.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0DM510.XXXTITLE = SLWREC.XXXTITLE;
  SL0DM510.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  SL0DM510.XWHCD = COMMAREA.XWHCD;
  SL0DM510.YRSCD = "A ";
  set TA2REC empty;

  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "E";
  TA2REC.TA2GRGEN = X2CREC.X2CCURSD;

  call "TA0040" (TA2REC) {isNoRefresh = yes};

  if (TA2REC.TA2RTNCD == 0)
    SL0DM510.SL0DMSDT = TA2REC.TA2GRGAN;
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "510 ";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0DM510.SL0DMSDT cursor, bold;
  end


  set TA2REC empty;

  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "E";
  TA2REC.TA2GRGEN = X2CREC.X2CCURSD;

  call "TA0040" (TA2REC) {isNoRefresh = yes};

  if (TA2REC.TA2RTNCD == 0)
    SL0DM510.SL0DMEDT = TA2REC.TA2GRGAN;
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "510 ";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0DM510.SL0DMEDT cursor, bold;
  end


   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  SL0DWS0.SL0DWLTH = 1020; /* max summary tsq length*/
  SL0DWD0.SL0DWLTH = 1020; /* max detail tsq length*/

   /* ************************************************************/
   /* *** purge any existing storage in case of 'left overs'  ****/
   /* *** note: not found is acceptable return code           ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq(s)*/

   /* ************************************************************/
   /* *** setup the floating map lines for a blank map        ****/
   /* ************************************************************/

  SL0DSN5(); /* <=== setup blank screen*/

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end SL0D510

// conv & ctrl float
Function SL0D520()


   /* ************************************************************/
   /* *** no "before" processing ...                          ****/
   /* *** ... except msg no.  and  error id setup             ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0DM510.XXXERRID = SLWREC.XXXERRID;


  converse SL0DM510 ;

   /* ************************************************************/
   /* *** note: if leaving screen/application, purge tsq      ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    XSSLSPQ(); /* <=== purge tsq(s)*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "520A";
    SLWREC.SLWMSGNO = 0;
    SL0DM510.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    converseLib.clearScreen();
    set SL0DM010 initial; /* clear menu map*/
    XSSLSPQ(); /* <=== purge tsq(s)*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "520C";
    SLWREC.SLWMSGNO = 0;
    SL0DM510.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "520D";
    SLWREC.SLWMSGNO = 0;
    SL0DM510.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0DM510.CATOAP > " ")
    COMMAREA.CATOAP = SL0DM510.CATOAP;
    COMMAREA.CAITEM = SL0DM510.CAITEM;
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSEXIT();
    SL0DST5(); /* <=== reset scrn*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "520E";
    SLWREC.SLWMSGNO = 0;
    SL0DM510.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0DM510.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0DM510.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "520 ";
  SL0DW05.SL0DWRCV = 0;
  set SL0DM510.CATOAP initialAttributes;
  set SL0DM510.CAITEM initialAttributes;
  set SL0DM510.YRSCD cursor;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set SL0DM510.XWHCD initialAttributes;
  set SL0DM510.YRSCD initialAttributes;
  set SL0DM510.SL0DMSDT initialAttributes;
  set SL0DM510.SL0DMEDT initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0DM510.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "520F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0DM510.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pf20)
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SLWREC.SLWSEXSW = "N";
    SLWREC.SLWIDX01 = 1;
    while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
      if (SL0DM510.XMSLMSEL[SLWIDX01] > " ")
        SLWREC.SLWSEXSW = "Y";
        SL0DWB5.SL0DWSM5 = SL0DWS0.SL0DWDTA[SLWIDX01];
        SL0DS15(); /* <=== causera exit processing*/
        exit stack;
      else
        SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
      end
    end
    SL0DSH5(); /* <=== enter processing*/
    exit stack;
  end

   /* ******************************************************/
    /* if selection input now: display error message*/
   /* ******************************************************/


  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    if (SL0DM510.XMSLMSEL[SLWIDX01] > " ")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "520H";
      SLWREC.SLWMSGNO = 0018; /* <--- use enter msg*/
      exit stack;
    else
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
    end
  end

   /* ************************************************************/
   /* *** if PF7: scroll backwards, key changes NOT allowed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf7)
    SL0DSJ5(); /* <=== PF7 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF8: scroll forwards, key changes NOT allowed    ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf8)
    SL0DSK5(); /* <=== PF8 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "520I";
  SLWREC.SLWMSGNO = 0004; /* <--- invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0D520

// disp left sum line
Function SL0D521()

  SL0DM511.TS3CNTNR = SL0DWB5.TS3CNTNR;
  SL0DM511.SWEPLLNB = SL0DWB5.SWEPLLNB;
  SL0DM511.YRSCD = SL0DWB5.YRSCD;
  SL0DM511.SL1RCRNO = SL0DWB5.SL1RCRNO;
  SL0DM511.SL0DMCRT = SL0DWB5.SL0DWCRT;
  SL0DM511.SL0DMUDT = SL0DWB5.SL0DWUDT;
  SL0DM511.SL0DMRCV = SL0DWB5.SL0DWRCV;

  set SL0DM510.XMSLMSEL[SLWIDX01] initialAttributes;


  display SL0DM511 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0D521

// disp left sum title
Function SL0D525()


   /* ************************************************************/
   /* *** no "before" processing... except to setup "S"       ****/
   /* ************************************************************/

  SL0DM510.XMSLMSSS = "S";
  set SL0DM510.XMSLMSSS initialAttributes;


  display SL0DM515 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0D525

// disp blank line
Function SL0D529()


   /* ************************************************************/
   /* *** set selection fields ASKIP,DARK                     ****/
   /* ************************************************************/

  set SL0DM510.XMSLMSEL[SLWIDX01] skip, invisible;


  display SL0DM519 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0D529

// one time initializations
Function SL0D610()


   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0DM610 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0DW06 empty; /* appl. working storage area*/

  SLWREC.XXXMAPNM = "SL0DM610";
  SLWREC.XXXTITLE = "RECEIVING COUNTS REPORT";

  XSX2CDT();

  SLWREC.XXXAPPID = "SL0D"; /* error id appl. name*/
  SLWREC.SLWTALOC = "SL0D610 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0DM610"; /* TA0020 current map name*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* error message*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0DM610.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0DM610.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0DM610.XXXTITLE = SLWREC.XXXTITLE;
  SL0DM610.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  SL0DM610.XWHCD = COMMAREA.XWHCD;

   /* ************************************************************/
   /* *** if being transf from other appl do not save causera ****/
   /* *** fld. if transf from same appl save the causera fld  ****/
   /* *** which contains current printer                      ****/
   /* ************************************************************/
  if (COMMAREA.CAFROMAP == COMMAREA.CACURRAP)
    /* next sentence*/
  else
    COMMAREA.CAUSERA = " ";
  end

  if (COMMAREA.CAUSERA > " ")
    SL0DM610.SL0DMPID = COMMAREA.CAUSERA;
    TA6REC.XURDEST = COMMAREA.CAUSERA;
    COMMAREA.CAUSERA = " ";
    SLWREC.SLWFTMSW = "N";
  end

  if (SLWREC.SLWFTMSW == "N")
    SL0DM610.SL0DMPID = TA6REC.XURDEST; /* move dest field*/
  end

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  SLWREC.SLWLINPP = 10; /* lines per page*/

   /* ************************************************************/
   /* *** if whse present: validate keys/whse                 ****/
   /* ***                  save keys/whse                     ****/
   /* ***                  setup printers                     ****/
   /* ************************************************************/

  if (SL0DM610.XWHCD > " ")
    SL0DSC6(); /* <=== field edits*/
    if (SLWREC.SLWERRSW == "Y")
      SLWREC.XXXLOCID = "610A";
      return;
    end
    SL0DSF6(); /* <=== save key values*/
    if (SLWREC.SLWERRSW == "Y")
      SLWREC.XXXLOCID = "610B";
    end
  end


end // end SL0D610

// conv & cntl fixed
Function SL0D620()


   /* ************************************************************/
   /* *** no "before" processing ...                          ****/
   /* *** ... except msg no.  and  error id setup             ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0DM610.XXXERRID = SLWREC.XXXERRID;


  converse SL0DM610 ;

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "620A";
    SLWREC.SLWMSGNO = 0;
    SL0DM610.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "620C";
    SLWREC.SLWMSGNO = 0;
    SL0DM610.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "620D";
    SLWREC.SLWMSGNO = 0;
    SL0DM610.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0DM610.CATOAP > " ")
    COMMAREA.CATOAP = SL0DM610.CATOAP;
    COMMAREA.CAITEM = SL0DM610.CAITEM;
    COMMAREA.CAUSERA = SL0DM610.SL0DMPID;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "620E";
    SLWREC.SLWMSGNO = 0;
    SL0DM610.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0DM610.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0DM610.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "620 ";
  set SL0DM610.CATOAP initialAttributes;
  set SL0DM610.CAITEM initialAttributes;
  set SL0DM610.TS3CNTNR[1] cursor;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set SL0DM610.XWHCD initialAttributes;
  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= 10)
    set SL0DM610.TS3CNTNR[SLWIDX01] initialAttributes;
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0DM610.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "620F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0DM610.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf20)
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0DSH6(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "620I";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0D620

// one time initializations
Function SL0D710()


   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0DM710 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0DW07 empty; /* appl. working storage area*/
  set SL1REC empty; /* receiving log header*/

  SLWREC.XXXMAPNM = "SL0DM710";
  SLWREC.XXXTITLE = "CONTAINER COMPARISON SUBMIT";

  SLWREC.SLWTALOC = "SL0D710 "; /* TA0020 exec location(2)*/
  TA1REC.TA1MAP = "SL0DM710"; /* TA0020 current map name*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* saved msg number*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0DM710.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0DM710.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0DM710.XXXTITLE = SLWREC.XXXTITLE;
  SL0DM710.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  SL0DM710.XWHCD = COMMAREA.XWHCD;

  if (COMMAREA.CAITEM > " ")
    SL0DSY7(); /* use commarea caitem*/
    COMMAREA.CAITEM = " ";
  end

  if (COMMAREA.CAUSERA > " ")
    SL0DS07(); /* <=== causera input processing*/
  end

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  SL0DM710.SL0DMUSW = "Y";

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end SL0D710

// converse & control key entry
Function SL0D720()


   /* ************************************************************/
   /* *** protect (askip) data fields (if any)                ****/
   /* *** note: cursor is set if error or is map's default    ****/
   /* ************************************************************/

  if (SL0DW07.SL0DWUPS != "Y")
    set SL0DM710.SL0DMUSW skip, invisible;
  end

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0DM710.XXXERRID = SLWREC.XXXERRID;


  converse SL0DM710 ;


   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "720A";
    SLWREC.SLWMSGNO = 0;
    SL0DM710.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "720C";
    SLWREC.SLWMSGNO = 0;
    SL0DM710.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "720D";
    SLWREC.SLWMSGNO = 0;
    SL0DM710.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0DM710.CATOAP > " ")
    COMMAREA.CATOAP = SL0DM710.CATOAP;
    COMMAREA.CAITEM = SL0DM710.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "720E";
    SLWREC.SLWMSGNO = 0;
    SL0DM710.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0DM710.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0DM710.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "720";
  set SL0DM710.CATOAP initialAttributes;
  set SL0DM710.CAITEM initialAttributes;
  set SL0DM710.TS3CNTNR cursor;

   /* ************************************************************/
   /* *** reset key input fld attr.s as orig.ly defined       ****/
   /* ************************************************************/

  set SL0DM710.XWHCD initialAttributes;
  set SL0DM710.TS3CNTNR initialAttributes;

   /* ************************************************************/
   /* *** reset data input fld attr.s as orig.ly defined      ****/
   /* ************************************************************/

  set SL0DM710.SL0DMUSW initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0DM710.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "720F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0DM710.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & perfrom updates if no errors   ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0DSH7(); /* <=== perform edits*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf18)
    exit stack;
  end

   /* ************************************************************/
   /* *** if either pa2 or pa3 has been pressed:              ****/
   /* *** use the 'set map-name page' (only) to make sure     ****/
   /* *** the screen shows the original data since any input  ****/
   /* *** will not have been transmitted                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa2
   || converseVar.eventKey is pa3)
    converseLib.clearScreen();
    
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "720I";
  SLWREC.SLWMSGNO = 0004; /* <--- invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0D720

// causera input processing
Function SL0DS01()


   /* ************************************************************/
   /* *** if entered, use CAUSERA data by first moving it     ****/
   /* *** to the SLXREC working storage layout in order to    ****/
   /* *** 'read' the specific keys for this situation         ****/
   /* *** note: first make sure data present is from one of   ****/
   /* ***       the designated sending maps                   ****/
   /* ************************************************************/

  SLXREC.SLXUSERA = COMMAREA.CAUSERA;

  if (SLXREC.SLXFRMAP == "SL0AM110"
   || SLXREC.SLXFRMAP == "SL0AM210"
   || SLXREC.SLXFRMAP == "SL0AM310"
   || SLXREC.SLXFRMAP == "SL0BM110"
   || SLXREC.SLXFRMAP == "SL0BM210"
   || SLXREC.SLXFRMAP == "SL0CM110"
   || SLXREC.SLXFRMAP == "SL0CM210"
   || SLXREC.SLXFRMAP == "SL0CM310"
   || SLXREC.SLXFRMAP == "SL0CM410"
   || SLXREC.SLXFRMAP == "SL0CM510"
   || SLXREC.SLXFRMAP == "SL0DM110"
   || SLXREC.SLXFRMAP == "SL0DM310"
   || SLXREC.SLXFRMAP == "SL0DM510"
   || SLXREC.SLXFRMAP == "SL0DM710")
    SL0DM110.TS3CNTNR = SLXREC.TS3CNTNR;
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DS01

// USERA input processing
Function SL0DS03()


   /* ************************************************************/
   /* *** if entered, use CAUSERA data by first moving it     ****/
   /* *** to the SLXREC working storage layout in order to    ****/
   /* *** 'read' the specific keys for this situation         ****/
   /* *** note: first make sure data present is from one of   ****/
   /* ***       designated sending maps                       ****/
   /* ************************************************************/

  SLXREC.SLXUSERA = COMMAREA.CAUSERA;

  if (SLXREC.SLXFRMAP == "SL0AM110"
   || SLXREC.SLXFRMAP == "SL0AM210"
   || SLXREC.SLXFRMAP == "SL0AM310"
   || SLXREC.SLXFRMAP == "SL0BM110"
   || SLXREC.SLXFRMAP == "SL0BM210"
   || SLXREC.SLXFRMAP == "SL0CM110"
   || SLXREC.SLXFRMAP == "SL0CM210"
   || SLXREC.SLXFRMAP == "SL0CM310"
   || SLXREC.SLXFRMAP == "SL0CM410"
   || SLXREC.SLXFRMAP == "SL0CM510"
   || SLXREC.SLXFRMAP == "SL0DM110"
   || SLXREC.SLXFRMAP == "SL0DM310"
   || SLXREC.SLXFRMAP == "SL0DM710")
    SL0DM310.TS3CNTNR = SLXREC.TS3CNTNR;
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DS03

// causera input processing
Function SL0DS07()


   /* ************************************************************/
   /* *** if entered, use CAUSERA data by first moving it     ****/
   /* *** to the SLXREC working storage layout in order to    ****/
   /* *** 'read' the specific keys for this situation         ****/
   /* *** note: first make sure data present is from one of   ****/
   /* ***       designated sending maps                       ****/
   /* ************************************************************/

  SLXREC.SLXUSERA = COMMAREA.CAUSERA;

  if (SLXREC.SLXFRMAP == "SL0DM110" /* any sl0d maps*/
   || SLXREC.SLXFRMAP == "SL0DM210" 
   || SLXREC.SLXFRMAP == "SL0DM310" 
   || SLXREC.SLXFRMAP == "SL0DM410" 
   || SLXREC.SLXFRMAP == "SL0DM510" 
   || SLXREC.SLXFRMAP == "SL0DM610")
    SL0DM710.XWHCD = SLXREC.XWHCD; /* w/wh/cntnr*/
    SL0DM710.TS3CNTNR = SLXREC.TS3CNTNR;
    return;
  end

  if (SLXREC.SLXFRMAP == "SL0AM110"
   || SLXREC.SLXFRMAP == "SL0AM210"
   || SLXREC.SLXFRMAP == "SL0AM310"
   || SLXREC.SLXFRMAP == "SL0BM110"
   || SLXREC.SLXFRMAP == "SL0BM210"
   || SLXREC.SLXFRMAP == "SL0CM110"
   || SLXREC.SLXFRMAP == "SL0CM210"
   || SLXREC.SLXFRMAP == "SL0CM310"
   || SLXREC.SLXFRMAP == "SL0CM410"
   || SLXREC.SLXFRMAP == "SL0CM510")
    SL0DM710.TS3CNTNR = SLXREC.TS3CNTNR;
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DS07

// causera output processing
Function SL0DS11()


   /* ************************************************************/
   /* *** move this map's name and key fields to the working  ****/
   /* *** storage user area layout and then move the entire   ****/
   /* *** SLXREC to the commarea's user area field            ****/
   /* ************************************************************/

  SLXREC.SLXFRMAP = "SL0DM110";

  SLXREC.XWHCD = SL0DM110.XWHCD;
  SLXREC.TS3CNTNR = SL0DM110.TS3CNTNR;

  COMMAREA.CAUSERA = SLXREC.SLXUSERA;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DS11

// causera exit processing
Function SL0DS13()


   /* ************************************************************/
   /* *** move this map's name and key fields to the working  ****/
   /* *** storage user area layout and then move the entire   ****/
   /* *** SLXREC to the commarea's user area field            ****/
   /* ************************************************************/

  SLXREC.SLXFRMAP = "SL0DM310";

  SLXREC.XWHCD = SL0DM310.XWHCD;
  SLXREC.TS3CNTNR = SL0DM310.TS3CNTNR;

  COMMAREA.CAUSERA = SLXREC.SLXUSERA;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DS13

// causera exit processing
Function SL0DS15()


   /* ************************************************************/
   /* *** move this map's name and key fields to the working  ****/
   /* *** storage user area layout and then move the entire   ****/
   /* *** SLXREC to the commarea's user area field            ****/
   /* ************************************************************/

  SLXREC.SLXFRMAP = "SL0DM510";

  SLXREC.XWHCD = SL0DM510.XWHCD;
  SLXREC.TS3CNTNR = SL0DWB5.TS3CNTNR;

  COMMAREA.CAUSERA = SLXREC.SLXUSERA;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DS15

// USERA exit processing
Function SL0DS17()


   /* ************************************************************/
   /* *** move this map's name and key fields to the working  ****/
   /* *** storage user area layout and then move the entire   ****/
   /* *** SLXREC to the commarea's user area field            ****/
   /* ************************************************************/

  SLXREC.SLXFRMAP = "SL0DM710";

  SLXREC.XWHCD = SL0DM710.XWHCD;
  SLXREC.TS3CNTNR = SL0DM710.TS3CNTNR;

  COMMAREA.CAUSERA = SLXREC.SLXUSERA;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DS17

// loc break summary processing
Function SL0DS1A()

  SL0DS1C(); /* *** determine if detail record queue*/
                                   /* is full ****/


   /* *** format summary line (use saved product key) ****/

  SL0DWB1.SL2PALET = SL0DW01.SL2PALET;
  SL0DWB1.SL2CASE = SL0DW01.SL2CASE;

    /* IF SL0DW00.SL0DWPDF EQ 'ID';*/
            /* show po id/type*/
    /* MOVE SL0DW00.SL0DWFPI TO SL0DWB1.SL0DWMPO;*/
    /* MOVE SL0DW00.SL0DWFPT TO SL0DWB1.SL0DWFPT;*/
   /* ELSE;*/
  SL0DWB1.SL0DWMPO = SL0DW00.SL0DWFPN; /* show po nbr*/
  SL0DWB1.SL0DWFPT = "  ";
   /* END;*/

  SL0DWB1.XGPCD = SL0DW01.XGPCD;
  SL0DWB1.SY1STNBR = SL0DW01.SY1STNBR;
  SL0DWB1.SY2CLRID = SL0DW01.SY2CLRID;
  SL0DWB1.XDMCD = SL0DW01.XDMCD;
  SL0DWB1.XQACD = SL0DW01.XQACD;
  SL0DWB1.XSDCD = SL0DW01.XSDCD;
  SL0DWB1.XOWCD = SL0DW01.XOWCD;
  SL0DWB1.XSLCD = SL0DW01.XSLCD;
  SL0DWB1.XEGCD = SL0DW01.XEGCD;
  SL0DWB1.XPGCD = SL0DW01.XPGCD;
  SL0DWB1.XUMCD = SL0DW01.XUMCD;

   /* note: quantities are accumulated in their sl0dwb1 fields*/


   /* ************************************************************/
   /* *** save the new product's key values for compares      ****/
   /* ************************************************************/

   /* SL0DS1I            ; <=== save new key for compares*/

   /* *** move summary data to summary array area ****/
   /* *** if maximum nbr of lines in summary array put to tsq ****/

  if (SLWREC.SLWIDX03 <= SLWREC.SLWLINPP)
    SL0DWS0.SL0DWDPG[SLWIDX03] = SL0DW01.SL0DWDPA;
    SL0DWS0.SL0DWRTY[SLWIDX03] = "S";
    SL0DWS0.SL0DWDTA[SLWIDX03] = SL0DWB1.SL0DWSM1;
    SLWIDX03 = SLWIDX03 + 1;
  else
    TA5REC.TA5APPID = SLWREC.SLWSUMQU;
    TA5REC.TA5FNCCD = "A";

    call "TA0050" (SL0DWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
    if (TA5REC.TA5RTNCD != 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1AA";
      SLWREC.SLWMSGNO = 0008; /* <--- severe tsq error msg*/
      return;
    end
    /* *** increment summary counter ****/
    SL0DW01.SL0DWSPA = SL0DW01.SL0DWSPA + 1;
    /* *** setup next summary record ****/
    SLWREC.SLWIDX03 = 1;
    SL0DWS0.SL0DWDPG[SLWIDX03] = SL0DW01.SL0DWDPA;
    SL0DWS0.SL0DWRTY[SLWIDX03] = "S";
    SL0DWS0.SL0DWDTA[SLWIDX03] = SL0DWB1.SL0DWSM1;
    SLWIDX03 = SLWIDX03 + 1;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0DS1A

// obtain first summary record
Function SL0DS1B()


  TA5REC.TA5APPID = SLWREC.SLWSUMQU;
  TA5REC.TA5TSQIX = 0001;
  TA5REC.TA5FNCCD = "R";
  call "TA0050" (SL0DWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1BA";
    SLWREC.SLWMSGNO = 0008;
    return;
  end

  SLWREC.SLWSUMIX = TA5REC.TA5TSQIX;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0DS1B

// will group fit on detail queue
Function SL0DS1C()


   /* *** add 1 to idx01 to account for summary line ****/
  SLWREC.SLWIDX05 = SLWREC.SLWIDX01 + 1;

  if (SLWREC.SLWIDX05 <= SLWREC.SLWIDX04)
    SLWREC.SLWIDX04 = SLWREC.SLWIDX04 - SLWREC.SLWIDX05; /* available space*/
  else
    if (SLWREC.SLWIDX02 != 1) /* if any lines in detail w.s*/
      /* *** fill the rest of the detail queue with blank records ****/
      while (SLWREC.SLWIDX02 <= SLWREC.SLWLINPP)
        SL0DWD0.SL0DWRTY[SLWIDX02] = "B";
        SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
      end
      /* *** put the detail records to the tsq ****/
      TA5REC.TA5APPID = SLWREC.SLWDETQU;
      TA5REC.TA5FNCCD = "A";
      call "TA0050" (SL0DWD0, TA5REC) {isNoRefresh = yes};
      if (TA5REC.TA5RTNCD != 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S1CA";
        SLWREC.SLWMSGNO = 0008; /* <--- severe tsq error msg*/
        return;
      end
      /* *** reset for next group ****/
      SL0DW01.SL0DWDPA = SL0DW01.SL0DWDPA + 1;
      SLWREC.SLWIDX02 = 1;
      SLWREC.SLWIDX04 = SLWREC.SLWLINPP;
      SLWREC.SLWIDX04 = SLWREC.SLWIDX04 - SLWREC.SLWIDX05;
                                   /* available space*/
    end
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0DS1C

// obtain first detail record
Function SL0DS1D()


  TA5REC.TA5APPID = SLWREC.SLWDETQU;
  TA5REC.TA5TSQIX = 0001;
  TA5REC.TA5FNCCD = "R";
  call "TA0050" (SL0DWD0, TA5REC) {isNoRefresh = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1DA";
    SLWREC.SLWMSGNO = 0001;
    return;
  end

  SLWREC.SLWDETIX = TA5REC.TA5TSQIX;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0DS1D

// loc break detail processing
Function SL0DS1E()


   /* ***put summary line to detail queue****/
  SL0DWD0.SL0DWSPG[SLWIDX02] = SL0DW01.SL0DWSPA;
  SL0DWD0.SL0DWRTY[SLWIDX02] = "S";
  SL0DWD0.SL0DWDTA[SLWIDX02] = SL0DWB1.SL0DWSM1;
  SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;

  SLWREC.SLWIDX05 = 1;
  while (SLWREC.SLWIDX05 <= SLWREC.SLWIDX01)
    if (SLWREC.SLWIDX02 <= SLWREC.SLWLINPP)
      SL0DWD0.SL0DWSPG[SLWIDX02] = SL0DW01.SL0DWSPA;
      SL0DWD0.SL0DWRTY[SLWIDX02] = "D";
      SL0DWD0.SL0DWDTA[SLWIDX02] = SL0DWB1.SL0DWDT1[SLWIDX05];
      SLWREC.SLWIDX05 = SLWREC.SLWIDX05 + 1;
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
    else
       /* *** setup call areas and add record to tsq ****/
      TA5REC.TA5APPID = SLWREC.SLWDETQU;
      TA5REC.TA5FNCCD = "A";
      call "TA0050" (SL0DWD0, TA5REC) {isNoRefresh = yes};
      if (TA5REC.TA5RTNCD != 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S1AB";
        SLWREC.SLWMSGNO = 0008; /* <--- severe tsq error msg*/
        return;
      end
      /* *** keep track of detail record count ****/
      SLWREC.SLWDMAXR = TA5REC.TA5TSQIX;
      /* *** increment detail counter ****/
      SL0DW01.SL0DWDPA = SL0DW01.SL0DWDPA + 1;
      /* *** put same summary record on next group of details ****/
      SLWREC.SLWIDX02 = 1;
      SL0DWD0.SL0DWSPG[SLWIDX02] = SL0DW01.SL0DWSPA;
      SL0DWD0.SL0DWRTY[SLWIDX02] = "S";
      SL0DWD0.SL0DWDTA[SLWIDX02] = SL0DWB1.SL0DWSM1;
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
      /* *** now put detail line on new detail array ****/
      SL0DWD0.SL0DWSPG[SLWIDX02] = SL0DW01.SL0DWSPA;
      SL0DWD0.SL0DWRTY[SLWIDX02] = "D";
      SL0DWD0.SL0DWDTA[SLWIDX02] = SL0DWB1.SL0DWDT1[SLWIDX05];
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
      /* *** setup for next record ****/
      SLWREC.SLWIDX05 = SLWREC.SLWIDX05 + 1;
    end
  end

   /* *** add blank line to the detail queue ****/

  if (SLWREC.SLWIDX02 < SLWREC.SLWLINPP)
    SL0DWD0.SL0DWRTY[SLWIDX02] = "B";
    SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
    /* *** decrement available lines ctr ****/
    SLWREC.SLWIDX04 = SLWREC.SLWIDX04 - 1;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0DS1E

// format detail buffer area
Function SL0DS1F()
   /* ************************************************************/
   /* *** move iddsc and quantity to one of four buckets      ****/
   /* *** add quantity to summary bucket                      ****/
   /* ************************************************************/
  if (SLWREC.SLWIDX06 <= 4)
     /* next sentence*/
  else
    SLWREC.SLWIDX06 = 1;
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

  if (SLWREC.SLWIDX06 == 1)
    SL0DW01.SL0HWNDX = VRLITM02.SY5SZID;
    SL0DWB1.SL0DWSZ1[SLWIDX01] = SYPREC.SY4IDDSC[SL0HWNDX];
    if (SL0DWB1.SL0DWSZ1[SLWIDX01] > " ")
       /* next sentence*/
    else
      SL0DWB1.SL0DWSZ1[SLWIDX01] = "*****";
    end
    SL0DWB1.SL0DWQY1[SLWIDX01] = VRLITM02.SL2RCVD;
    SL0DWB1.SL0DWRCV = SL0DWB1.SL0DWRCV + SL0DWB1.SL0DWQY1[SLWIDX01];
  end
  if (SLWREC.SLWIDX06 == 2)
    SL0DW01.SL0HWNDX = VRLITM02.SY5SZID;
    SL0DWB1.SL0DWSZ2[SLWIDX01] = SYPREC.SY4IDDSC[SL0HWNDX];
    if (SL0DWB1.SL0DWSZ2[SLWIDX01] > " ")
       /* next sentence*/
    else
      SL0DWB1.SL0DWSZ2[SLWIDX01] = "*****";
    end
    SL0DWB1.SL0DWQY2[SLWIDX01] = VRLITM02.SL2RCVD;
    SL0DWB1.SL0DWRCV = SL0DWB1.SL0DWRCV + SL0DWB1.SL0DWQY2[SLWIDX01];
  end
  if (SLWREC.SLWIDX06 == 3)
    SL0DW01.SL0HWNDX = VRLITM02.SY5SZID;
    SL0DWB1.SL0DWSZ3[SLWIDX01] = SYPREC.SY4IDDSC[SL0HWNDX];
    if (SL0DWB1.SL0DWSZ3[SLWIDX01] > " ")
       /* next sentence*/
    else
      SL0DWB1.SL0DWSZ3[SLWIDX01] = "*****";
    end
    SL0DWB1.SL0DWQY3[SLWIDX01] = VRLITM02.SL2RCVD;
    SL0DWB1.SL0DWRCV = SL0DWB1.SL0DWRCV + SL0DWB1.SL0DWQY3[SLWIDX01];
  end
  if (SLWREC.SLWIDX06 == 4)
    SL0DW01.SL0HWNDX = VRLITM02.SY5SZID;
    SL0DWB1.SL0DWSZ4[SLWIDX01] = SYPREC.SY4IDDSC[SL0HWNDX];
    if (SL0DWB1.SL0DWSZ4[SLWIDX01] > " ")
       /* next sentence*/
    else
      SL0DWB1.SL0DWSZ4[SLWIDX01] = "*****";
    end
    SL0DWB1.SL0DWQY4[SLWIDX01] = VRLITM02.SL2RCVD;
    SL0DWB1.SL0DWRCV = SL0DWB1.SL0DWRCV + SL0DWB1.SL0DWQY4[SLWIDX01];
  end

  SLWREC.SLWIDX06 = SLWREC.SLWIDX06 + 1;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0DS1F

// process last summary group
Function SL0DS1G()

  SL0DS1C(); /* *** determine if detail record queue*/
                                   /* is full ****/


   /* *** format summary line (use saved product key) ****/

  SL0DWB1.SL2PALET = SL0DW01.SL2PALET;
  SL0DWB1.SL2CASE = SL0DW01.SL2CASE;

   /* IF SL0DW00.SL0DWPDF EQ 'ID';                      /* show po id/type*/
    /* MOVE SL0DW00.SL0DWFPI TO SL0DWB1.SL0DWMPO;*/
    /* MOVE SL0DW00.SL0DWFPT TO SL0DWB1.SL0DWFPT;*/
   /* ELSE;*/
  SL0DWB1.SL0DWMPO = SL0DW00.SL0DWFPN; /* show po nbr*/
  SL0DWB1.SL0DWFPT = "  ";
   /* END;*/

  SL0DWB1.XGPCD = SL0DW01.XGPCD;
  SL0DWB1.SY1STNBR = SL0DW01.SY1STNBR;
  SL0DWB1.SY2CLRID = SL0DW01.SY2CLRID;
  SL0DWB1.XDMCD = SL0DW01.XDMCD;
  SL0DWB1.XQACD = SL0DW01.XQACD;
  SL0DWB1.XSDCD = SL0DW01.XSDCD;
  SL0DWB1.XOWCD = SL0DW01.XOWCD;
  SL0DWB1.XSLCD = SL0DW01.XSLCD;
  SL0DWB1.XEGCD = SL0DW01.XEGCD;
  SL0DWB1.XPGCD = SL0DW01.XPGCD;
  SL0DWB1.XUMCD = SL0DW01.XUMCD;

   /* note: quantities are accumulated in their sl0dwb1 fields*/

   /* *** if there is room on summary array put last summary  ****/
   /* *** line on this summary array and put to tsq. if there ****/
   /* *** is no more room on the summary array, put summary   ****/
   /* *** array to tsq and put last summary line on summary   ****/
   /* *** array and then put to tsq.                          ****/

  if (SLWREC.SLWIDX03 <= SLWREC.SLWLINPP)
    SL0DWS0.SL0DWDPG[SLWIDX03] = SL0DW01.SL0DWDPA;
    SL0DWS0.SL0DWRTY[SLWIDX03] = "S";
    SL0DWS0.SL0DWDTA[SLWIDX03] = SL0DWB1.SL0DWSM1;
    SLWREC.SLWIDX03 = SLWREC.SLWIDX03 + 1;
    /* fill the rest of the buffer with blanks*/
    while (SLWREC.SLWIDX03 <= SLWREC.SLWLINPP)
      SL0DWS0.SL0DWDPG[SLWIDX03] = SL0DW01.SL0DWDPA;
      SL0DWS0.SL0DWRTY[SLWIDX03] = "B";
      SLWREC.SLWIDX03 = SLWREC.SLWIDX03 + 1;
    end

    TA5REC.TA5APPID = SLWREC.SLWSUMQU;
    TA5REC.TA5FNCCD = "A";
    call "TA0050" (SL0DWS0, TA5REC) {isNoRefresh = yes};
    if (TA5REC.TA5RTNCD != 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1GA";
      SLWREC.SLWMSGNO = 0008; /* <--- severe tsq error msg*/
      return;
    end

    /* *** save maximum number of summary records ****/
    SLWREC.SLWSMAXR = TA5REC.TA5TSQIX;
  else
    TA5REC.TA5APPID = SLWREC.SLWSUMQU;
    TA5REC.TA5FNCCD = "A";

    call "TA0050" (SL0DWS0, TA5REC) {isNoRefresh = yes};
    if (TA5REC.TA5RTNCD != 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1GB";
      SLWREC.SLWMSGNO = 0008; /* <--- severe tsq error msg*/
      return;
    end

     /* *** commented as a test **********/
    SL0DW01.SL0DWSPA = SL0DW01.SL0DWSPA + 1;
    /* *** setup next summary record ****/
    SLWREC.SLWIDX03 = 1;
    SL0DWS0.SL0DWDPG[SLWIDX03] = SL0DW01.SL0DWDPA;
    SL0DWS0.SL0DWRTY[SLWIDX03] = "S";
    SL0DWS0.SL0DWDTA[SLWIDX03] = SL0DWB1.SL0DWSM1;
    TA5REC.TA5APPID = SLWREC.SLWSUMQU;
    TA5REC.TA5FNCCD = "A";
    SLWREC.SLWIDX03 = SLWREC.SLWIDX03 + 1;
    /* fill the rest of the buffer with blanks*/
    while (SLWREC.SLWIDX03 <= SLWREC.SLWLINPP)
      SL0DWS0.SL0DWDPG[SLWIDX03] = SL0DW01.SL0DWDPA;
      SL0DWS0.SL0DWRTY[SLWIDX03] = "B";
      SLWREC.SLWIDX03 = SLWREC.SLWIDX03 + 1;
    end

    call "TA0050" (SL0DWS0, TA5REC) {isNoRefresh = yes};
    if (TA5REC.TA5RTNCD != 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1GC";
      SLWREC.SLWMSGNO = 0008; /* <--- severe tsq error msg*/
      return;
    end

    /* *** save maximum number of summary records ****/
    SLWREC.SLWSMAXR = TA5REC.TA5TSQIX;
    /* *** commented as a test ****/
    SL0DW01.SL0DWSPA = SL0DW01.SL0DWSPA + 1;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0DS1G

// process last detail group
Function SL0DS1H()


   /* *** put group summary line to detail queue ****/
  SL0DWD0.SL0DWSPG[SLWIDX02] = SL0DW01.SL0DWSPA;
  SL0DWD0.SL0DWRTY[SLWIDX02] = "S";
  SL0DWD0.SL0DWDTA[SLWIDX02] = SL0DWB1.SL0DWSM1;
  SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;

  SLWREC.SLWIDX05 = 1;
  while (SLWREC.SLWIDX05 <= SLWREC.SLWIDX01)
    if (SLWREC.SLWIDX05 <= SLWREC.SLWLINPP)
      SL0DWD0.SL0DWSPG[SLWIDX02] = SL0DW01.SL0DWSPA;
      SL0DWD0.SL0DWRTY[SLWIDX02] = "D";
      SL0DWD0.SL0DWDTA[SLWIDX02] = SL0DWB1.SL0DWDT1[SLWIDX05];
      SLWREC.SLWIDX05 = SLWREC.SLWIDX05 + 1;
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
    else
       /* *** setup call areas and add record to tsq ****/
      TA5REC.TA5APPID = SLWREC.SLWDETQU;
      TA5REC.TA5FNCCD = "A";
      call "TA0050" (SL0DWD0, TA5REC) {isNoRefresh = yes};
      if (TA5REC.TA5RTNCD != 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S1HB";
        SLWREC.SLWMSGNO = 0008; /* <--- severe tsq error msg*/
        return;
      end

      /* *** increment detail counter ****/
      SL0DW01.SL0DWDPA = SL0DW01.SL0DWDPA + 1;
      /* *** put same summary record on next group of details ****/
      SLWREC.SLWIDX02 = 1;
      SL0DWD0.SL0DWRTY[SLWIDX02] = "S";
      SL0DWD0.SL0DWDTA[SLWIDX02] = SL0DWB1.SL0DWSM1;
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
      SL0DWD0.SL0DWDTA[SLWIDX02] = SL0DWB1.SL0DWDT1[SLWIDX05];
      /* *** setup for next record ****/
      SLWREC.SLWIDX05 = SLWREC.SLWIDX05 + 1;
    end
  end
   /* *** fill the rest of the detail queue with blank records ****/
  while (SLWREC.SLWIDX02 <= SLWREC.SLWLINPP)
    SL0DWD0.SL0DWRTY[SLWIDX02] = "B";
    SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
  end
   /* *** put the last detail records to the tsq ****/
  TA5REC.TA5APPID = SLWREC.SLWDETQU;
  TA5REC.TA5FNCCD = "A";

  call "TA0050" (SL0DWD0, TA5REC) {isNoRefresh = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1HA";
    SLWREC.SLWMSGNO = 0008; /* <--- severe tsq error msg*/
    return;
  end

   /* *** keep track of last detail relative record number ****/
  SLWREC.SLWDMAXR = TA5REC.TA5TSQIX;


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0DS1H

// save new key for compares
Function SL0DS1I()

   /* ************************************************************/
   /* *** save the new product's key values for compares      ****/
   /* ************************************************************/

  SL0DW01.SL2PALET = VRLITM02.SL2PALET;
  SL0DW01.SL2CASE = VRLITM02.SL2CASE;
  SL0DW01.PC3POIDT = VRLITM02.PC3POIDT;
  SL0DW01.PCFSECD = VRLITM02.PCFSECD;
  SL0DW01.FY1FCTYC = VRLITM02.FY1FCTYC;
  SL0DW01.PC4ORTYP = VRLITM02.PC4ORTYP;
  SL0DW01.PC3PONBR = VRLITM02.PC3PONBR;
  SL0DW01.PC-SAP-PO-NBR = VRLITM02.PC-SAP-PO-NBR;
  SL0DW01.XGPCD = VRLITM02.XGPCD;
  SL0DW01.SY1STNBR = VRLITM02.SY1STNBR;
  SL0DW01.SY2CLRID = VRLITM02.SY2CLRID;
  SL0DW01.XDMCD = VRLITM02.XDMCD;
  SL0DW01.XQACD = VRLITM02.XQACD;
  SL0DW01.XOWCD = VRLITM02.XOWCD;
  SL0DW01.XSDCD = VRLITM02.PC2INSEG;
  SL0DW01.XEGCD = VRLITM02.XEGCD;
  SL0DW01.XSLCD = VRLITM02.XSLCD;
  SL0DW01.XPGCD = VRLITM02.XPGCD;
  SL0DW01.XUMCD = VRLITM02.XUMCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0DS1I

// save selected printer
Function SL0DS2A()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/
  SLWREC.SLWIDX02 = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (SL0DT02.TARTYPE[SLWIDX02] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user area*/
      /* ------------------------------------------------------------*/

      SL0DW02.SL0DWWHS = SL0DM210.XWHCD;

      SLWREC.SLWIDX01 = 1;
      while (SLWREC.SLWIDX01 <= 10)
        if (SL0DM210.TS3CNTNR[SLWIDX01] > " ")
          SL0DW02.TS3CNTNR = SL0DM210.TS3CNTNR[SLWIDX01];

          TA6REC.TARJCL[TA6INDEX] = SL0DW02.SL0DWLIN; /* Parametrs*/
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

        end

        SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;

      end

      TA6REC.TA6INDEX = TA6REC.TA6INDEX - 1; /* Keep table position*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = SL0DT02.TARJCL[SLWIDX02]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = SL0DT02.TARTYPE[SLWIDX02]; /* Type*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (SL0DT02.TARJCL[SLWIDX02] == "/*EOF") /* End of Table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  if (SL0DM210.SL0DMPID == " ")
    TA6REC.TA6SUBSW = "Y"; /* display map, tailor and submit JCL*/
  else
    TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  end

  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/
  TA6REC.XURDEST = SL0DM210.SL0DMPID; /* Destination*/

  set TA3REC empty;
  TA3REC.TA3OPTN = "USRNAME";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   || TA3REC.TA3RTNCD == "0")       

    TA6REC.XURUSRNM = TA3REC.TA3USRID;
  else
    /* ------------------------------------------------------------*/
     /* Call not successful, ta0p scr will ask for output recepient*/
    /* ------------------------------------------------------------*/
  end

  XPTA0P();

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  SLWREC.SLWFTMSW = "N";
  if (sysVar.errorCode == "00000000" /* Call successful*/
   || TA6REC.TA6RTNCD == "0")       

    SLWREC.SLWMSGNO = 59; /* job submitted message*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    SLWREC.SLWMSGNO = 58; /* Unexpected error occurred*/
    SLWREC.SLWERRSW = "Y";

  end

  if (TA6REC.TA6RTNCD == "1") /* Call was cancelled*/
    TA6REC.XURDEST = "      ";
  end


end // end SL0DS2A

// reset container fields
Function SL0DS2T()


   /* ************************************************************/
   /* *** reset all container flds to blanks                  ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = SLWREC.SLWLINPP;

  while (SLWREC.SLWIDX01 > 0)
    SL0DM210.TS3CNTNR[SLWIDX01] = " ";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end

  SL0DM210.SL0DMPID = TA6REC.XURDEST;


end // end SL0DS2T

// break summary processing
Function SL0DS3A()

  SL0DS3C(); /* *** determine if detail record queue is full ****/
  if (SLWREC.SLWERRSW == "Y")
    return;
  end


   /* *** format summary line (use saved product key) ****/

  if (SL0DW00.SL0DWPDF == "ID") /* show po id/type*/
    SL0DWB3.SL0DWMPO = SL0DW03.SL0DWPPI;
    SL0DWB3.SL0DWFPT = SL0DW03.SL0DWPPT;
  else /* show po nbr*/
    SL0DWB3.SL0DWMPO = SL0DW03.SL0DWPPN;
    SL0DWB3.SL0DWFPT = "  ";
  end

  SL0DWB3.XGPCD = SL0DW03.XGPCD;
  SL0DWB3.SY1STNBR = SL0DW03.SY1STNBR;
  SL0DWB3.SY2CLRID = SL0DW03.SY2CLRID;
  SL0DWB3.XDMCD = SL0DW03.XDMCD;
  SL0DWB3.XQACD = SL0DW03.XQACD;
  SL0DWB3.XOWCD = SL0DW03.XOWCD;
  SL0DWB3.XSDCD = SL0DW03.XSDCD;
  SL0DWB3.XEGCD = SL0DW03.XEGCD;
  SL0DWB3.XSLCD = SL0DW03.XSLCD;
  SL0DWB3.XPGCD = SL0DW03.XPGCD;
  SL0DWB3.XUMCD = SL0DW03.XUMCD;

  if (SL0DW03.SL0DWHES == "Y") /* hard error / prod sas*/
    SL0DWB3.SL0DWDSW = "R"; /* set switch*/
  end

   /* note: quantities are accumulated in their sl0dwb1 fields*/

   /* *** move summary data to summary array area ****/
   /* *** if maximum nbr of lines in summary array put to tsq ****/

  if (SLWREC.SLWIDX03 <= SLWREC.SLWLINPP)
    SL0DWS0.SL0DWDPG[SLWIDX03] = SL0DW03.SL0DWDPA;
    SL0DWS0.SL0DWRTY[SLWIDX03] = "S";
    SL0DWS0.SL0DWDTA[SLWIDX03] = SL0DWB3.SL0DWSM3;
    SLWIDX03 = SLWIDX03 + 1;
  else
    TA5REC.TA5APPID = SLWREC.SLWSUMQU;
    TA5REC.TA5FNCCD = "A";

    call "TA0050" (SL0DWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
    if (TA5REC.TA5RTNCD != 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3AA";
      SLWREC.SLWMSGNO = 0008; /* <--- severe tsq error msg*/
      return;
    end
    /* *** increment summary counter ****/
    SL0DW03.SL0DWSPA = SL0DW03.SL0DWSPA + 1;
    /* *** setup next summary record ****/
    SLWREC.SLWIDX03 = 1;
    SL0DWS0.SL0DWDPG[SLWIDX03] = SL0DW03.SL0DWDPA;
    SL0DWS0.SL0DWRTY[SLWIDX03] = "S";
    SL0DWS0.SL0DWDTA[SLWIDX03] = SL0DWB3.SL0DWSM3;
    SLWIDX03 = SLWIDX03 + 1;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0DS3A

// obtain first summary record
Function SL0DS3B()


  TA5REC.TA5APPID = SLWREC.SLWSUMQU;
  TA5REC.TA5TSQIX = 0001;
  TA5REC.TA5FNCCD = "R";
  call "TA0050" (SL0DWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S3BA";
    SLWREC.SLWMSGNO = 0008;
    return;
  end

  SLWREC.SLWSUMIX = TA5REC.TA5TSQIX;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0DS3B

// will group fit on detail queue
Function SL0DS3C()


   /* *** add 1 to idx01 to account for summary line ****/
  SLWREC.SLWIDX05 = SLWREC.SLWIDX01 + 1;

  if (SLWREC.SLWIDX05 <= SLWREC.SLWIDX04)
    SLWREC.SLWIDX04 = SLWREC.SLWIDX04 - SLWREC.SLWIDX05; /* available space*/
  else
    if (SLWREC.SLWIDX02 != 1) /* if any lines in detail w.s*/
      /* *** fill the rest of the detail queue with blank records ****/
      while (SLWREC.SLWIDX02 <= SLWREC.SLWLINPP)
        SL0DWD0.SL0DWRTY[SLWIDX02] = "B";
        SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
      end
      /* *** put the detail records to the tsq ****/
      TA5REC.TA5APPID = SLWREC.SLWDETQU;
      TA5REC.TA5FNCCD = "A";
      call "TA0050" (SL0DWD0, TA5REC) {isNoRefresh = yes};
      if (TA5REC.TA5RTNCD != 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S3CA";
        SLWREC.SLWMSGNO = 0008; /* <--- severe tsq error msg*/
        return;
      end
      /* *** reset for next group ****/
      SL0DW03.SL0DWDPA = SL0DW03.SL0DWDPA + 1;
      SLWREC.SLWIDX02 = 1;
      SLWREC.SLWIDX04 = SLWREC.SLWLINPP;
      SLWREC.SLWIDX04 = SLWREC.SLWIDX04 - SLWREC.SLWIDX05;
                                   /* available space*/
    end
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0DS3C

// obtain first detail record
Function SL0DS3D()


  TA5REC.TA5APPID = SLWREC.SLWDETQU;
  TA5REC.TA5TSQIX = 0001;
  TA5REC.TA5FNCCD = "R";
  call "TA0050" (SL0DWD0, TA5REC) {isNoRefresh = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S3DA";
    SLWREC.SLWMSGNO = 0001;
    return;
  end

  SLWREC.SLWDETIX = TA5REC.TA5TSQIX;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0DS3D

// break detail processing
Function SL0DS3E()


   /* ***put summary line to detail queue****/
  SL0DWD0.SL0DWSPG[SLWIDX02] = SL0DW03.SL0DWSPA;
  SL0DWD0.SL0DWRTY[SLWIDX02] = "S";
  SL0DWD0.SL0DWDTA[SLWIDX02] = SL0DWB3.SL0DWSM3;
  SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;

  SLWREC.SLWIDX05 = 1;
  while (SLWREC.SLWIDX05 <= SLWREC.SLWIDX01)
    if (SLWREC.SLWIDX02 <= SLWREC.SLWLINPP)
      SL0DWD0.SL0DWSPG[SLWIDX02] = SL0DW03.SL0DWSPA;
      SL0DWD0.SL0DWRTY[SLWIDX02] = "D";
      SL0DWD0.SL0DWDTA[SLWIDX02] = SL0DWB3.SL0DWDT3[SLWIDX05];
      SLWREC.SLWIDX05 = SLWREC.SLWIDX05 + 1;
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
    else
       /* *** setup call areas and add record to tsq ****/
      TA5REC.TA5APPID = SLWREC.SLWDETQU;
      TA5REC.TA5FNCCD = "A";
      call "TA0050" (SL0DWD0, TA5REC) {isNoRefresh = yes};
      if (TA5REC.TA5RTNCD != 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S3EA";
        SLWREC.SLWMSGNO = 0008; /* <--- severe tsq error msg*/
        return;
      end
      /* *** keep track of detail record count ****/
      SLWREC.SLWDMAXR = TA5REC.TA5TSQIX;
      /* *** increment detail counter ****/
      SL0DW03.SL0DWDPA = SL0DW03.SL0DWDPA + 1;
      /* *** put same summary record on next group of details ****/
      SLWREC.SLWIDX02 = 1;
      SL0DWD0.SL0DWSPG[SLWIDX02] = SL0DW03.SL0DWSPA;
      SL0DWD0.SL0DWRTY[SLWIDX02] = "S";
      SL0DWD0.SL0DWDTA[SLWIDX02] = SL0DWB3.SL0DWSM3;
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
      /* *** now put detail line on new detail array ****/
      SL0DWD0.SL0DWSPG[SLWIDX02] = SL0DW03.SL0DWSPA;
      SL0DWD0.SL0DWRTY[SLWIDX02] = "D";
      SL0DWD0.SL0DWDTA[SLWIDX02] = SL0DWB3.SL0DWDT3[SLWIDX05];
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
      /* *** setup for next record ****/
      SLWREC.SLWIDX05 = SLWREC.SLWIDX05 + 1;
    end
  end

   /* *** add blank line to the detail queue ****/

  if (SLWREC.SLWIDX02 < SLWREC.SLWLINPP)
    SL0DWD0.SL0DWRTY[SLWIDX02] = "B";
    SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
    /* *** decrement available lines ctr ****/
    SLWREC.SLWIDX04 = SLWREC.SLWIDX04 - 1;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0DS3E

// process last summary group
Function SL0DS3G()

  SL0DS3C(); /* *** determine if detail record queue is full ****/
  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0DW03.SL0DWLLF = "N"; /* last line formatted*/

  if (SL0DW03.SL0DWPSW == "PO") /* po*/
     /* commented out to allow all rows to show until*/
     /* IF SL0DWB3.SL0DWRCV NE 0      ;    amt to show*/
       /* OR SL0DW03.SL0DWCPL NE 0    ; pklist qty to check*/

    /* *** format summary line (use saved product key) ****/

    if (SL0DW00.SL0DWPDF == "ID") /* display po id/type*/
      SL0DWB3.SL0DWMPO = SL0DW03.SL0DWPPI;
      SL0DWB3.SL0DWFPT = SL0DW03.SL0DWPPT;
    else /* display po nbr*/
      SL0DWB3.SL0DWMPO = SL0DW03.SL0DWPPN;
      SL0DWB3.SL0DWFPT = "  ";
    end

    SL0DWB3.XGPCD = SL0DW03.XGPCD;
    SL0DWB3.SY1STNBR = SL0DW03.SY1STNBR;
    SL0DWB3.SY2CLRID = SL0DW03.SY2CLRID;
    SL0DWB3.XDMCD = SL0DW03.XDMCD;
    SL0DWB3.XQACD = SL0DW03.XQACD;
    SL0DWB3.XOWCD = SL0DW03.XOWCD;
    SL0DWB3.XSDCD = SL0DW03.XSDCD;
    SL0DWB3.XEGCD = SL0DW03.XEGCD;
    SL0DWB3.XSLCD = SL0DW03.XSLCD;
    SL0DWB3.XPGCD = SL0DW03.XPGCD;
    SL0DWB3.XUMCD = SL0DW03.XUMCD;

    SL0DW03.SL0DWLLF = "Y"; /* last line formatted*/

     /* END ;*/
  else /* pklist or xref*/

    if (SL0DWB3.SL0DWRCV != 0 /* amt to show*/
     || SL0DWB3.SL0DWPKL != 0)

      /* *** format summary line (use saved product key) ****/

      if (SL0DW00.SL0DWPDF == "ID") /* display po id/type*/
        SL0DWB3.SL0DWMPO = SL0DW03.SL0DWPPI;
        SL0DWB3.SL0DWFPT = SL0DW03.SL0DWPPT;
      else /* display po nbr*/
        SL0DWB3.SL0DWMPO = SL0DW03.SL0DWPPN;
        SL0DWB3.SL0DWFPT = "  ";
      end

      SL0DWB3.XGPCD = SL0DW03.XGPCD;
      SL0DWB3.SY1STNBR = SL0DW03.SY1STNBR;
      SL0DWB3.SY2CLRID = SL0DW03.SY2CLRID;
      SL0DWB3.XDMCD = SL0DW03.XDMCD;
      SL0DWB3.XQACD = SL0DW03.XQACD;
      SL0DWB3.XOWCD = SL0DW03.XOWCD;
      SL0DWB3.XSDCD = SL0DW03.XSDCD;
      SL0DWB3.XEGCD = SL0DW03.XEGCD;
      SL0DWB3.XSLCD = SL0DW03.XSLCD;
      SL0DWB3.XPGCD = SL0DW03.XPGCD;
      SL0DWB3.XUMCD = SL0DW03.XUMCD;

      SL0DW03.SL0DWLLF = "Y"; /* last line formatted*/

    end
  end

   /* *** if there is room on summary array put last summary  ****/
   /* *** line on this summary array and put to tsq. if there ****/
   /* *** is no more room on the summary array, put summary   ****/
   /* *** array to tsq and put last summary line on summary   ****/
   /* *** array and then put to tsq.                          ****/

  if (SLWREC.SLWIDX03 <= SLWREC.SLWLINPP)
    if (SL0DW03.SL0DWLLF == "Y") /* last line was formatted*/
      SL0DWS0.SL0DWDPG[SLWIDX03] = SL0DW03.SL0DWDPA;
      SL0DWS0.SL0DWRTY[SLWIDX03] = "S";
      SL0DWS0.SL0DWDTA[SLWIDX03] = SL0DWB3.SL0DWSM3;
      SLWREC.SLWIDX03 = SLWREC.SLWIDX03 + 1;
    end
    /* fill the rest of the buffer with blanks*/
    while (SLWREC.SLWIDX03 <= SLWREC.SLWLINPP)
      SL0DWS0.SL0DWDPG[SLWIDX03] = SL0DW03.SL0DWDPA;
      SL0DWS0.SL0DWRTY[SLWIDX03] = "B";
      SLWREC.SLWIDX03 = SLWREC.SLWIDX03 + 1;
    end

    TA5REC.TA5APPID = SLWREC.SLWSUMQU;
    TA5REC.TA5FNCCD = "A";
    call "TA0050" (SL0DWS0, TA5REC) {isNoRefresh = yes};
    if (TA5REC.TA5RTNCD != 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3GA";
      SLWREC.SLWMSGNO = 0008; /* <--- severe tsq error msg*/
      return;
    end

    /* *** save maximum number of summary records ****/
    SLWREC.SLWSMAXR = TA5REC.TA5TSQIX;
  else
    TA5REC.TA5APPID = SLWREC.SLWSUMQU;
    TA5REC.TA5FNCCD = "A";

    call "TA0050" (SL0DWS0, TA5REC) {isNoRefresh = yes};
    if (TA5REC.TA5RTNCD != 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3GB";
      SLWREC.SLWMSGNO = 0008; /* <--- severe tsq error msg*/
      return;
    end

     /* *** commented as a test **********/
    SL0DW03.SL0DWSPA = SL0DW03.SL0DWSPA + 1;
    /* *** setup next summary record ****/
    SLWREC.SLWIDX03 = 1;
    SL0DWS0.SL0DWDPG[SLWIDX03] = SL0DW03.SL0DWDPA;
    SL0DWS0.SL0DWRTY[SLWIDX03] = "S";
    SL0DWS0.SL0DWDTA[SLWIDX03] = SL0DWB3.SL0DWSM3;
    TA5REC.TA5APPID = SLWREC.SLWSUMQU;
    TA5REC.TA5FNCCD = "A";
    SLWREC.SLWIDX03 = SLWREC.SLWIDX03 + 1;
    /* fill the rest of the buffer with blanks*/
    while (SLWREC.SLWIDX03 <= SLWREC.SLWLINPP)
      SL0DWS0.SL0DWDPG[SLWIDX03] = SL0DW03.SL0DWDPA;
      SL0DWS0.SL0DWRTY[SLWIDX03] = "B";
      SLWREC.SLWIDX03 = SLWREC.SLWIDX03 + 1;
    end

    call "TA0050" (SL0DWS0, TA5REC) {isNoRefresh = yes};
    if (TA5REC.TA5RTNCD != 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3GC";
      SLWREC.SLWMSGNO = 0008; /* <--- severe tsq error msg*/
      return;
    end

    /* *** save maximum number of summary records ****/
    SLWREC.SLWSMAXR = TA5REC.TA5TSQIX;
    /* *** commented as a test ****/
    SL0DW03.SL0DWSPA = SL0DW03.SL0DWSPA + 1;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0DS3G

// process last detail group
Function SL0DS3H()


  if (SL0DW03.SL0DWPSW == "PO") /* po*/
      /* comment out quantity check at this time to allow*/
      /* all rows to show*/
     /* IF SL0DWB3.SL0DWRCV NE 0      ;    amt to show*/
       /* OR SL0DW03.SL0DWCPL NE 0 ; pklist qty for po option check*/

    /* *** put group summary line to detail queue ****/
    SL0DWD0.SL0DWSPG[SLWIDX02] = SL0DW03.SL0DWSPA;
    SL0DWD0.SL0DWRTY[SLWIDX02] = "S";
    SL0DWD0.SL0DWDTA[SLWIDX02] = SL0DWB3.SL0DWSM3;
    SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;

    SLWREC.SLWIDX05 = 1;
    while (SLWREC.SLWIDX05 <= SLWREC.SLWIDX01)
      if (SLWREC.SLWIDX05 <= SLWREC.SLWLINPP)
        SL0DWD0.SL0DWSPG[SLWIDX02] = SL0DW03.SL0DWSPA;
        SL0DWD0.SL0DWRTY[SLWIDX02] = "D";
        SL0DWD0.SL0DWDTA[SLWIDX02] = SL0DWB3.SL0DWDT3[SLWIDX05];
        SLWREC.SLWIDX05 = SLWREC.SLWIDX05 + 1;
        SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
      else
         /* *** setup call areas and add record to tsq ****/
        TA5REC.TA5APPID = SLWREC.SLWDETQU;
        TA5REC.TA5FNCCD = "A";
        call "TA0050" (SL0DWD0, TA5REC) {isNoRefresh = yes};
        if (TA5REC.TA5RTNCD != 0)
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "S3HB";
          SLWREC.SLWMSGNO = 0008; /* <--- severe tsq error msg*/
          return;
        end

        /* *** increment detail counter ****/
        SL0DW03.SL0DWDPA = SL0DW03.SL0DWDPA + 1;
        /* *** put same summary record on next group of details ****/
        SLWREC.SLWIDX02 = 1;
        SL0DWD0.SL0DWRTY[SLWIDX02] = "S";
        SL0DWD0.SL0DWDTA[SLWIDX02] = SL0DWB3.SL0DWSM3;
        SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
        SL0DWD0.SL0DWDTA[SLWIDX02] = SL0DWB3.SL0DWDT3[SLWIDX05];
        /* *** setup for next record ****/
        SLWREC.SLWIDX05 = SLWREC.SLWIDX05 + 1;
      end
    end
     /* END ;  commented out to allow all rows for po to show*/
  else

    if (SL0DWB3.SL0DWRCV != 0 /* amt to show*/
     || SL0DWB3.SL0DWPKL != 0)

      /* *** put group summary line to detail queue ****/
      SL0DWD0.SL0DWSPG[SLWIDX02] = SL0DW03.SL0DWSPA;
      SL0DWD0.SL0DWRTY[SLWIDX02] = "S";
      SL0DWD0.SL0DWDTA[SLWIDX02] = SL0DWB3.SL0DWSM3;
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;

      SLWREC.SLWIDX05 = 1;
      while (SLWREC.SLWIDX05 <= SLWREC.SLWIDX01)
        if (SLWREC.SLWIDX05 <= SLWREC.SLWLINPP)
          SL0DWD0.SL0DWSPG[SLWIDX02] = SL0DW03.SL0DWSPA;
          SL0DWD0.SL0DWRTY[SLWIDX02] = "D";
          SL0DWD0.SL0DWDTA[SLWIDX02] = SL0DWB3.SL0DWDT3[SLWIDX05];
          SLWREC.SLWIDX05 = SLWREC.SLWIDX05 + 1;
          SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
        else
           /* *** setup call areas and add record to tsq ****/
          TA5REC.TA5APPID = SLWREC.SLWDETQU;
          TA5REC.TA5FNCCD = "A";
          call "TA0050" (SL0DWD0, TA5REC) {isNoRefresh = yes};
          if (TA5REC.TA5RTNCD != 0)
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "S3HB";
            SLWREC.SLWMSGNO = 0008; /* <--- severe tsq error msg*/
            return;
          end

          /* *** increment detail counter ****/
          SL0DW03.SL0DWDPA = SL0DW03.SL0DWDPA + 1;
          /* *** put same summary record on next group of details ****/
          SLWREC.SLWIDX02 = 1;
          SL0DWD0.SL0DWRTY[SLWIDX02] = "S";
          SL0DWD0.SL0DWDTA[SLWIDX02] = SL0DWB3.SL0DWSM3;
          SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
          SL0DWD0.SL0DWDTA[SLWIDX02] = SL0DWB3.SL0DWDT3[SLWIDX05];
          /* *** setup for next record ****/
          SLWREC.SLWIDX05 = SLWREC.SLWIDX05 + 1;
        end
      end
    end
  end

   /* *** fill the rest of the detail queue with blank records ****/
  while (SLWREC.SLWIDX02 <= SLWREC.SLWLINPP)
    SL0DWD0.SL0DWRTY[SLWIDX02] = "B";
    SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
  end
   /* *** put the last detail records to the tsq ****/
  TA5REC.TA5APPID = SLWREC.SLWDETQU;
  TA5REC.TA5FNCCD = "A";

  call "TA0050" (SL0DWD0, TA5REC) {isNoRefresh = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S3HA";
    SLWREC.SLWMSGNO = 0008; /* <--- severe tsq error msg*/
    return;
  end

   /* *** keep track of last detail relative record number ****/
  SLWREC.SLWDMAXR = TA5REC.TA5TSQIX;


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0DS3H

// save new key for compares
Function SL0DS3I()

   /* ************************************************************/
   /* *** save the new product's key values for compares      ****/
   /* ************************************************************/

   /* *** save the formatted po id/type/nbr*/
   /* ***    (move current to previous)*/
   /* MOVE SL0DW03.SL0DWCPI TO SL0DW03.SL0DWPPI;     /* po id*/
   /* MOVE SL0DW03.SL0DWCPT TO SL0DW03.SL0DWPPT;     /* po type*/
  SL0DW03.SL0DWPPN = SL0DW03.SL0DWCPN; /* po nbr*/

  SL0DW03.PC3PONBR = VRLCMP02.PC3PONBR;
  SL0DW03.PC-SAP-PO-NBR = VRLCMP02.PC-SAP-PO-NBR;
   /* MOVE SL1REC.IN7STNBR TO SL0DW03.IN7STNBR;*/
  SL0DW03.XRECD = VRLCMP02.XRECD;

   /* *** save the product*/
  SL0DW03.XGPCD = VRLCMP02.XGPCD;
  SL0DW03.SY1STNBR = VRLCMP02.SY1STNBR;
  SL0DW03.SY2CLRID = VRLCMP02.SY2CLRID;
  SL0DW03.XDMCD = VRLCMP02.XDMCD;
  SL0DW03.XQACD = VRLCMP02.XQACD;
  SL0DW03.XOWCD = VRLCMP02.XOWCD;
  SL0DW03.XSDCD = VRLCMP02.PC2INSEG;
  SL0DW03.XEGCD = VRLCMP02.XEGCD;
  SL0DW03.XSLCD = VRLCMP02.XSLCD;
  SL0DW03.XPGCD = VRLCMP02.XPGCD;
  SL0DW03.XUMCD = VRLCMP02.XUMCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0DS3I

// process receipt compare data
Function SL0DS3K()


   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0DS3K ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

   /* ************************************************************/
   /* *** initialization for loop processing ****/
   /* ************************************************************/

  set SL0DWB3 empty;
  set SL0DWPB empty;
  SLWREC.SLWIDX01 = 1; /* buffer area index*/
  SLWREC.SLWIDX02 = 1; /* detail area index*/
  SLWREC.SLWIDX03 = 1; /* summary area index*/
  SLWREC.SLWIDX06 = 1; /* sizes per line index*/
  SLWREC.SLWIDX04 = SLWREC.SLWLINPP; /* # of available lines*/
  SL0DWB3.SL0DWRCV = 0; /* total received qty*/
  SL0DWB3.SL0DWPKL = 0; /* total packing memo qty*/
  SL0DW03.SL0DWCPL = 0; /* check packing list qtyfor po*/
  SL0DW03.SL0DWDPA = 1; /* detail page ctr*/
  SL0DW03.SL0DWSPA = 1; /* summary page ctr*/

   /* ************************************************************/
   /* *** initialize save area for product key                ****/
   /* ************************************************************/

  SL0DW03.PC3PONBR = 0;
  SL0DW03.PC-SAP-PO-NBR = " ";
  SL0DW03.XGPCD = " ";
  SL0DW03.SY1STNBR = " ";
  SL0DW03.SY2CLRID = " ";
  SL0DW03.XDMCD = " ";
  SL0DW03.XQACD = " ";
  SL0DW03.XOWCD = " ";
  SL0DW03.XSDCD = " ";
  SL0DW03.XEGCD = " ";
  SL0DW03.XSLCD = " ";
  SL0DW03.XPGCD = " ";
  SL0DW03.XUMCD = " ";

  SL0DW00.XGPCD = VRLCMP02.XGPCD; /* pass gpc to format module*/
  SL0DW00.PC3PONBR = VRLCMP02.PC3PONBR; /* pass po to format module*/
  SL0DW00.PC-SAP-PO-NBR = VRLCMP02.PC-SAP-PO-NBR; /* pass sappo format module*/
   /* dlvrusa change begin*/
  SL0DW00.XWHCD = VRLCMP02.XWHCD; /* pass whse cd to format module*/
   /* dlvrusa change end*/
  SL0DS3O(); /* format po id/type/nbr*/

   /* MOVE SL0DW00.SL0DWFPI TO SL0DW03.SL0DWCPI;/* previous po id*/
   /* MOVE SL0DW00.SL0DWFPT TO SL0DW03.SL0DWCPT;/* previous po type*/
  SL0DW03.SL0DWCPN = SL0DW00.SL0DWFPN; /* previous po nbr*/

  SL0DS3I(); /* save key for compares*/

  set SYPREC empty;
  SYPREC.XGPCD = VRLCMP02.XGPCD;
  SYPREC.SY1STNBR = VRLCMP02.SY1STNBR;
  SYPREC.SY2CLRID = VRLCMP02.SY2CLRID;
  SYPREC.XDMCD = VRLCMP02.XDMCD;
  SYPREC.XQACD = VRLCMP02.XQACD;

  SL0DSAA(); /* get first size scale*/
  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0DW03.SL0DWSXR = VRLCMP02.XRECD; /* save first xrecd*/

  while (SL0DW03.SL0DWRLF == "Y") /* rcpt compar data found*/

    SL0DS3N(); /* process rcpt compar rec*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end

    SL0DS3Q(); /* get next rcpt compar rec*/

    if (VRLCMP02.XGPCD == SL0DW03.XGPCD
     && VRLCMP02.PC3PONBR == SL0DW03.PC3PONBR
     && VRLCMP02.PC-SAP-PO-NBR == SL0DW03.PC-SAP-PO-NBR)
        /* next sentence*/
    else
      SL0DW00.XGPCD = VRLCMP02.XGPCD; /* pass gpc to format module*/
      SL0DW00.PC3PONBR = VRLCMP02.PC3PONBR; /* pass po to format module*/
      SL0DW00.PC-SAP-PO-NBR = VRLCMP02.PC-SAP-PO-NBR;
       /* dlvrusa change begin*/
      SL0DW00.XWHCD = VRLCMP02.XWHCD; /* pass whse cd to format module*/
       /* dlvrusa change end*/

      SL0DS3O(); /* format po id/type/nbr*/
     /* MOVE SL0DW00.SL0DWFPI TO SL0DW03.SL0DWCPI;/* current po id*/
     /* MOVE SL0DW00.SL0DWFPT TO SL0DW03.SL0DWCPT;/* current po type*/
      SL0DW03.SL0DWCPN = SL0DW00.SL0DWFPN; /* current po nbr*/
      SL0DW03.PC-SAP-PO-NBR = SL0DW00.PC-SAP-PO-NBR; /* sap po*/

    end
  end


   /* ************************************************/
   /* *** process last product for this container ****/
   /* ************************************************/

  SL0DS3Y(); /* check for hard error on last product*/
  SL0DS3V(); /* move pre-buffer to wb3rec*/
                                   /* (sizes/compress)*/
  SL0DS3G(); /* last group summary processing*/
  if (SLWREC.SLWERRSW == "Y")
    return;
  end
  SL0DS3H(); /* last group detail processing*/


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0DS3K

// process receipt compar record
Function SL0DS3N()


   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/

  TA1REC.TA1LOCAT[2] = "SL0DS3N ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;


  if (SL0DW03.SL0DWCPO == SL0DW03.SL0DWPPO /* check if po id/type/nbr*/
   /* and product are same*/
   && VRLCMP02.XGPCD == SL0DW03.XGPCD      
   && VRLCMP02.SY1STNBR == SL0DW03.SY1STNBR
   && VRLCMP02.SY2CLRID == SL0DW03.SY2CLRID
   && VRLCMP02.XDMCD == SL0DW03.XDMCD      
   && VRLCMP02.XQACD == SL0DW03.XQACD      
   && VRLCMP02.XOWCD == SL0DW03.XOWCD      
   && VRLCMP02.PC2INSEG == SL0DW03.XSDCD   
   && VRLCMP02.XPGCD == SL0DW03.XPGCD      
   && VRLCMP02.XUMCD == SL0DW03.XUMCD      
   && VRLCMP02.XEGCD == SL0DW03.XEGCD      
   && VRLCMP02.XSLCD == SL0DW03.XSLCD)    

     /* process the size qtys for the current rlcmp row*/

    SL0DW03.SL0DWSIZ = 1; /* initialize size subscript*/
    while (SL0DW03.SL0DWSIZ <= 40) /* process 40 sizes*/
      SL0DS3T(); /* add qtys to size in pre-buffer*/
      SL0DW03.SL0DWSIZ = SL0DW03.SL0DWSIZ + 1; /* increment size sub*/
    end


  else
    if (SL0DW03.SY1STNBR != " ")
      SL0DS3Y(); /* check for hard error*/
      SL0DS3V(); /* move pre-buffer to wb3rec (sizes/compress)*/

       /* write to tsq only if a qty ne to 0*/
      if (SL0DW03.SL0DWPSW == "PO") /* po*/
         /* comment out to allow all rows to show*/
             /* IF SL0DWB3.SL0DWRCV NE 0  ; receiving  amount present*/
               /* OR SL0DW03.SL0DWCPL NE 0       ; pklist qty exists*/
        SL0DS3A(); /* product break summary processing*/
             /* END ;*/
      end

      if (SL0DW03.SL0DWPSW != "PO") /* pklist or xref*/
        if (SL0DWB3.SL0DWRCV != 0 /* amt is present in either field*/
         || SL0DWB3.SL0DWPKL != 0)
          SL0DS3A(); /* product break summary processing*/
        end
      end

      if (SLWREC.SLWERRSW == "Y")
        return;
      end

      if (SL0DW03.SL0DWPSW == "PO") /* po*/
          /* commented out to allow all rows to show*/
             /* IF SL0DWB3.SL0DWRCV NE 0  ;   receiving qty present*/
               /* OR SL0DW03.SL0DWCPL NE 0       ;pklist qty exists*/
        SL0DS3E(); /* product break detail processing*/
             /* END ;*/
      end

      if (SL0DW03.SL0DWPSW != "PO") /* pklist or xref*/
        if (SL0DWB3.SL0DWRCV != 0 /* amt is present in either field*/
         || SL0DWB3.SL0DWPKL != 0)
          SL0DS3E(); /* product break detail processing*/
        end
      end

      if (SLWREC.SLWERRSW == "Y")
        return;
      end

      set SL0DWB3 empty; /* reset for next group*/
      set SL0DWPB empty;
      SL0DW03.SL0DWCPL = 0;
      SLWREC.SLWIDX01 = 1; /* buffer index*/
    end

    if (VRLCMP02.XGPCD == SL0DW03.XGPCD /* check for product scale chg*/
     && VRLCMP02.SY1STNBR == SL0DW03.SY1STNBR
     && VRLCMP02.SY2CLRID == SL0DW03.SY2CLRID
     && VRLCMP02.XDMCD == SL0DW03.XDMCD 
     && VRLCMP02.XQACD == SL0DW03.XQACD)
       /* next sentence*/
    else
      set SYPREC empty; /* get size descriptions*/
      SYPREC.XGPCD = VRLCMP02.XGPCD;
      SYPREC.SY1STNBR = VRLCMP02.SY1STNBR;
      SYPREC.SY2CLRID = VRLCMP02.SY2CLRID;
      SYPREC.XDMCD = VRLCMP02.XDMCD;
      SYPREC.XQACD = VRLCMP02.XQACD;
      SL0DSAA(); /* perform size translation call*/
      if (SLWREC.SLWERRSW == "Y")
        return;
      end
    end

     /* process the size qtys for the current rlcmp row*/

    SL0DW03.SL0DWSIZ = 1; /* initialize size subscript*/
    while (SL0DW03.SL0DWSIZ < 41) /* process 40 sizes*/
      SL0DS3T(); /* add qtys to size in pre-buffer*/
      SL0DW03.SL0DWSIZ = SL0DW03.SL0DWSIZ + 1; /* increment size sub*/
    end

    SL0DS3I(); /* save keys for compares*/

    SL0DW03.SL0DWSXR = VRLCMP02.XRECD; /* save current xre code*/

  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0DS3N

// format current po id/type/nbr
Function SL0DS3O()

   /* -----------------------------------------------------*/
   /* this module is called by several functions in sl0d*/
   /* it formats the po id/type/nbr in sl0dw00*/
      /* using a gpc/po passed in sl0dw00 (application storage)*/
   /* po nbr is formatted so that leading zeros suppressed*/
   /* it also sets a flag to indicate which po format*/
      /* should be displayed when both cannot be*/
      /* (set to po nbr, then changed if needed)*/
   /* if po hdr is not found, if defaults to po nbr*/
      /* and posts*/
   /* -----------------------------------------------------*/


  SL0DW00.SL0DWPDF = "NO"; /* default - display po nbr*/
   /* select the unique po hdr*/

   /* SET PCYREC EMPTY;*/
   /* SET PC3REC EMPTY;*/

   /* MOVE SL0DW00.XGPCD TO PC3REC.XGPCD;          /* gpc*/
   /* MOVE SL0DW00.PC3PONBR TO PC3REC.PC3PONBR;     /* pc-po-nbr*/
   /* MOVE 'S ' TO PCYREC.PCYFUNC;                 /* select unique*/

   /* SL0DS3S;                          /* select unique po hdr*/
   /* IF SQLCA.SQLCODE EQ 100;          /* if no po nbr or not found*/
    /* MOVE 0 TO SQLCA.SQLCODE;          /* set sqlcode to 0 to*/
   /* END;                               /* continue processing*/
    /* * * *   format the po id/type/nbr depending on gpc   * * **/

   /* IF SL0DW00.XGPCD EQ '03';                    /* apparel*/
    /* MOVE PC3REC.PCFSECD TO SL0DW00.SL0DWWSN;   /* work season code area*/
    /* MOVE PC3REC.PC3POIDT TO SL0DW00.SL0DWWMR;  /* work mo rng area*/
    /* MOVE SL0DW00.SL0DWWYY TO SL0DW00.SL0DWFSC; /* format po id*/
    /* MOVE SL0DW00.SL0DWWS1 TO SL0DW00.SL0DWFS1;*/
    /* MOVE SL0DW00.SL0DWWMM TO SL0DW00.SL0DWFMM;*/
    /* MOVE SL0DW00.SL0DWWDD TO SL0DW00.SL0DWFDD;*/
    /* MOVE PC3REC.FY1FCTYC TO SL0DW00.SL0DWFFT;*/
    /* MOVE PC3REC.PC4ORTYP TO SL0DW00.SL0DWFPT;  /* format po type*/
   /* ELSE;*/
                                  /* any other gpc*/
    /* MOVE PC3REC.PCFSECD TO SL0DW00.SL0DWWSN;   /* work season code area*/
    /* MOVE PC3REC.PC3POIDT TO SL0DW00.SL0DWWMR;  /* work mo rng area*/
    /* MOVE SL0DW00.SL0DWWYY TO SL0DW00.SL0DWFSC; /* format current po id*/
    /* MOVE SL0DW00.SL0DWWMM TO SL0DW00.SL0DWFMM;*/
    /* MOVE SL0DW00.SL0DWWDD TO SL0DW00.SL0DWFDD;*/
    /* MOVE PC3REC.FY1FCTYC TO SL0DW00.SL0DWFFT;*/
                                  /* MOVE PC3REC.PC4ORTYP TO*/
                                   /* SL0DW00.SL0DWFPT;  /* format current*/
                                   /* po type*/

    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/
      /* the following two lines will be restored depending on*/
      /* user's opinions after testing...per d. jerand*/
    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * **/

    /* IF SL0DW00.XGPCD EQ '02';             /* footwear*/
      /* IF PC3REC.PC4ORTYP = 'SS'         /* any type other than*/
        /* OR PC3REC.PC4ORTYP = 'PS'      /* 'qq' or 'ft'*/
        /* OR PC3REC.PC4ORTYP = 'CR';*/
        /* ; /* next sentence                   then show po nbr*/
      /* ELSE;*/
        /* MOVE 'ID' TO SL0DW00.SL0DWPDF;       /* display po id*/
      /* END;*/
    /* END;*/

   /* END;*/

   /* ------------------------------------------------------------*/
   /* show spaces when po id equals 0 ... no po date*/
   /* ------------------------------------------------------------*/

   /* IF PC3REC.PC3POIDT EQ 0;                   /* no po date*/
    /* MOVE ' ' TO SL0DW00.SL0DWFPI;    /* po id*/
    /* MOVE ' ' TO SL0DW00.SL0DWFPT;    /* po type*/
   /* END;*/

   /* ------------------------------------------------------------*/
   /* remove leading 0s from po nbr to display in char map field*/
   /* ------------------------------------------------------------*/

  if (SL0DW00.PC3PONBR > 0)
    SL0DW00.SL0DWPON = SL0DW00.PC3PONBR; /* unpack po nbr*/
    SL0DW00.SL0DWWGP = SL0DW00.SL0DWPON; /* group level po*/
  else
    SL0DW00.SL0DWWGP = SL0DW00.PC-SAP-PO-NBR;
  end
  SL0DW00.SL0DWWDX = 1; /* initialize idx*/
  while (SL0DW00.SL0DWWDX < 10 /* chars to search*/
   && SL0DW00.SL0DWCHR[SL0DWWDX] == "0") /* leading 0*/
    SL0DW00.SL0DWCHR[SL0DWWDX] = " "; /* replace 0 with space*/
    SL0DW00.SL0DWWDX = SL0DW00.SL0DWWDX + 1; /* increment idx*/
  end
  SL0DW00.SL0DWFPN = SL0DW00.SL0DWWGP; /* format po nbr*/

   /* *************************************************************/
   /* *** end of STATEMENT GROUP                               ****/
   /* *************************************************************/
end // end SL0DS3O

// get next rcpt compar record
Function SL0DS3Q()


   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/

  TA1REC.TA1LOCAT[2] = "SL0DS3Q ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  SL0DSSB(); /* fetch next rcpt compar record*/
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      SL0DW03.SL0DWRLF = "N";
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.SLWSKYSW = "N";
      SLWREC.XXXLOCID = "S3QA";
      SLWREC.SLWMSGNO = 0031;
    end
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0DS3Q

// add qtys to size in pre-buffer
Function SL0DS3T()
   /* ************************************************************/
   /* *** add qtys to appropriate size buckets depending on   ****/
   /* *** xfer, packlist, or po being processed               ****/
   /* *** also accumulate qtys in summary buckets             ****/
   /* ***                                                     ****/
   /* *                                                         **/
   /* *   if this is a po:      receipt qty  = rlog qty         **/
   /* *                         po qty       = sz onord qty -   **/
   /* *                                        sz rcpt qty      **/
   /* *                                                         **/
   /* *   if this is a xfer:    receipt qty  = rlog qty         **/
   /* *                         shipped qty  = crtn unt qty     **/
   /* *                                                         **/
   /* *   if this is a pklist : receipt qty  = rlog qty         **/
   /* *                         pklist qty   = crtn unt qty     **/
   /* *                                                         **/
   /* ************************************************************/

  SL0DW01.SL0HWNDX = SL0DW03.SL0DWSIZ; /* set size for this pass*/

   /* size description*/
  SL0DWPB.SL0DWSZ[SL0HWNDX] = SYPREC.SY4IDDSC[SL0HWNDX];

  if (SL0DW03.SL0DWPSW == "PO") /* po being processed*/

     /* size receipt qty*/
    SL0DWPB.SL0DWRC[SL0HWNDX] = VRLCMP02.SL2RCVD[SL0HWNDX];

     /* size po qty*/
    SL0DW03.SL0DWWPL = VRLCMP02.PC7ORDEQ[SL0HWNDX] - VRLCMP02.PCMRCPTQ[SL0HWNDX];
    SL0DWPB.SL0DWPL[SL0HWNDX] = SL0DW03.SL0DWWPL;

     /* accumulate summary qtys*/
    SL0DWB3.SL0DWRCV = SL0DWB3.SL0DWRCV + VRLCMP02.SL2RCVD[SL0HWNDX];
    SL0DWB3.SL0DWPKL = SL0DWB3.SL0DWPKL + SL0DW03.SL0DWWPL;
     /* accumulate pklist qty for check to write tsq if po exists*/
    SL0DW03.SL0DWCPL = SL0DW03.SL0DWCPL + VRLCMP02.TSOSHPQT[SL0HWNDX];

  else
    /* IF SL0DW03.SL0DWPSW EQ 'XF';      /* xfer being processed*/
      /* ;*/
      /* ; /* size receipt*/
      /* MOVE VRLCMP02.SL2RCVD(SL0HWNDX) TO SL0DWPB.SL0DWRC(SL0HWNDX);*/
      /* ;*/
      /* ; /* size shipped (note - rlcmp stores shipped same as pklist)*/
      /* MOVE VRLCMP02.TSOSHPQT(SL0HWNDX) TO SL0DWPB.SL0DWPL(SL0HWNDX);*/
      /* ;*/
      /* ; /* accumulate summary qtys*/
      /* SL0DWB3.SL0DWRCV = SL0DWB3.SL0DWRCV + VRLCMP02.SL2RCVD(SL0HWNDX);*/
                                  /* SL0DWB3.SL0DWPKL = SL0DWB3.SL0DWPKL +*/
                                   /* VRLCMP02.TSOSHPQT(SL0HWNDX);*/
      /* ;*/
      /* ;*/
    /* ELSE;                           /* (pklist being processed)*/

       /* size receipt qty*/
    SL0DWPB.SL0DWRC[SL0HWNDX] = VRLCMP02.SL2RCVD[SL0HWNDX];

       /* size pklist qty*/
    SL0DWPB.SL0DWPL[SL0HWNDX] = VRLCMP02.TSOSHPQT[SL0HWNDX];

       /* accumulate summary qtys*/
    SL0DWB3.SL0DWRCV = SL0DWB3.SL0DWRCV + VRLCMP02.SL2RCVD[SL0HWNDX];
    SL0DWB3.SL0DWPKL = SL0DWB3.SL0DWPKL + VRLCMP02.TSOSHPQT[SL0HWNDX];


    /* END;*/
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0DS3T

// format detail buffer area
Function SL0DS3V()
   /* ************************************************************/
   /* *** move iddsc and quantities to one of three buckets   ****/
   /* ************************************************************/

  if (SL0DWB3.SL0DWDSW != "R") /* hard error for product*/
    SL0DWB3.SL0DWDSW = "N";
  end
        /* note - 'r' (production sas hard error value) has*/
                    /* precedence over 'n' and 'y' settings*/

  SLWREC.SLWIX = 1;
  SLWREC.SLWIDX06 = 1;
  while (SLWREC.SLWIX <= 40)
    if (SLWREC.SLWIDX06 <= 3)
       /* next sentence*/
    else
      SLWREC.SLWIDX06 = 1;
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
    end
    if (SL0DWPB.SL0DWRC[SLWIX] != 0
     || SL0DWPB.SL0DWPL[SLWIX] != 0)
      if (SLWREC.SLWIDX06 == 1)
        SL0DWB3.SL0DWSZ1[SLWIDX01] = SL0DWPB.SL0DWSZ[SLWIX];
        SL0DWB3.SL0DWRC1[SLWIDX01] = SL0DWPB.SL0DWRC[SLWIX];
        SL0DWB3.SL0DWPL1[SLWIDX01] = SL0DWPB.SL0DWPL[SLWIX];
        if (SL0DWPB.SL0DWRC[SLWIX] != SL0DWPB.SL0DWPL[SLWIX]
         && SL0DWB3.SL0DWDSW != "R") /* hard error not present*/
          SL0DWB3.SL0DWDSW = "Y";
        end
        if (SL0DWB3.SL0DWSZ1[SLWIDX01] > " ")
           /* next sentence*/
        else
          SL0DWB3.SL0DWSZ1[SLWIDX01] = "*****";
        end
      end
      if (SLWREC.SLWIDX06 == 2)
        SL0DWB3.SL0DWSZ2[SLWIDX01] = SL0DWPB.SL0DWSZ[SLWIX];
        SL0DWB3.SL0DWRC2[SLWIDX01] = SL0DWPB.SL0DWRC[SLWIX];
        SL0DWB3.SL0DWPL2[SLWIDX01] = SL0DWPB.SL0DWPL[SLWIX];
        if (SL0DWPB.SL0DWRC[SLWIX] != SL0DWPB.SL0DWPL[SLWIX]
         && SL0DWB3.SL0DWDSW != "R") /* hard error not present*/
          SL0DWB3.SL0DWDSW = "Y";
        end
        if (SL0DWB3.SL0DWSZ2[SLWIDX01] > " ")
           /* next sentence*/
        else
          SL0DWB3.SL0DWSZ2[SLWIDX01] = "*****";
        end
      end
      if (SLWREC.SLWIDX06 == 3)
        SL0DWB3.SL0DWSZ3[SLWIDX01] = SL0DWPB.SL0DWSZ[SLWIX];
        SL0DWB3.SL0DWRC3[SLWIDX01] = SL0DWPB.SL0DWRC[SLWIX];
        SL0DWB3.SL0DWPL3[SLWIDX01] = SL0DWPB.SL0DWPL[SLWIX];
        if (SL0DWPB.SL0DWRC[SLWIX] != SL0DWPB.SL0DWPL[SLWIX]
         && SL0DWB3.SL0DWDSW != "R") /* hard error not present*/
          SL0DWB3.SL0DWDSW = "Y";
        end
        if (SL0DWB3.SL0DWSZ3[SLWIDX01] > " ")
           /* next sentence*/
        else
          SL0DWB3.SL0DWSZ3[SLWIDX01] = "*****";
        end
      end
      SLWREC.SLWIDX06 = SLWREC.SLWIDX06 + 1;
    end
    SLWREC.SLWIX = SLWREC.SLWIX + 1;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0DS3V

// check for hard error: prod sas
Function SL0DS3Y()

  SL0DW03.SL0DWHES = "N"; /* init hard error sw*/
                                  /* for product*/
  if (SL0DW03.XWHCD != "42" && 
  SL0DW03.XWHCD != "04" && 
  SL0DW03.XWHCD != "07" && 
  SL0DW03.XWHCD != "09")
                                  /* do not set hard err flag*/
                                  /* if whse cd is 42, 04, 07, 09*/
    if (SL0DW03.SL0DWSXR in XRETBL.XRECD) /* current xre code in corp tbl*/
      if (XRETBL.XREHRDFL[sysVar.arrayIndex] == "Y") /* it is a hard error*/
        if (XRETBL.XXXSTAT[sysVar.arrayIndex] == "A") /* status is active*/
          SL0DW03.SL0DWHES = "Y"; /* hard err flag for product*/
          SL0DW03.SL0DWMHE = "Y"; /* hard err fl for map display*/
        end
      end
    else
      if (SL0DW03.SL0DWSXR != "  ") /* if code is present*/
                                  /* post invalid xre code*/
        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "POST";
        TA1REC.TA1PGMNM = "SL0D    ";
        TA1REC.TA1LOCAT[1] = "SL0DS3Y ";
        TAEREC.TAEDESC1 = "INVALID XRE CODE ENCOUNTERED";
        TA1REC.TA1TBLKE = SL0DW03.SL0DWSXR;
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes};

      end
    end
  end

  if (SL0DW03.SL0DWHES == "Y") /* hard error for this product*/
    SL0DWB3.SL0DWDSW = "R"; /* ; display prod sas alert **/
  end

end // end SL0DS3Y

// save selected printer
Function SL0DS4A()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/
  SLWREC.SLWIDX02 = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (SL0DT04.TARTYPE[SLWIDX02] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user area*/
      /* ------------------------------------------------------------*/

      SL0DW04.SL0DWWHS = SL0DM410.XWHCD;

      SLWREC.SLWIDX01 = 1;
      while (SLWREC.SLWIDX01 <= 10)
        if (SL0DM410.TS3CNTNR[SLWIDX01] > " ")
          SL0DW04.TS3CNTNR = SL0DM410.TS3CNTNR[SLWIDX01];

          TA6REC.TARJCL[TA6INDEX] = SL0DW04.SL0DWLIN; /* Parametrs*/
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

        end

        SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;

      end

      TA6REC.TA6INDEX = TA6REC.TA6INDEX - 1; /* Keep table position*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = SL0DT04.TARJCL[SLWIDX02]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = SL0DT04.TARTYPE[SLWIDX02]; /* Type*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (SL0DT04.TARJCL[SLWIDX02] == "/*EOF") /* End of Table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  if (SL0DM410.SL0DMPID == " ")
    TA6REC.TA6SUBSW = "Y"; /* display map, tailor and submit JCL*/
  else
    TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  end

  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/
  TA6REC.XURDEST = SL0DM410.SL0DMPID; /* Destination*/

  set TA3REC empty;
  TA3REC.TA3OPTN = "USRNAME";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   || TA3REC.TA3RTNCD == "0")       

    TA6REC.XURUSRNM = TA3REC.TA3USRID;
  else
    /* ------------------------------------------------------------*/
     /* Call not successful, ta0p scr will ask for output recepient*/
    /* ------------------------------------------------------------*/
  end

  XPTA0P();

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  SLWREC.SLWFTMSW = "N";
  if (sysVar.errorCode == "00000000" /* Call successful*/
   || TA6REC.TA6RTNCD == "0")       

    SLWREC.SLWMSGNO = 59; /* job submitted message*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    SLWREC.SLWMSGNO = 58; /* Unexpected error occurred*/
    SLWREC.SLWERRSW = "Y";

  end

  if (TA6REC.TA6RTNCD == "1")
    TA6REC.XURDEST = " ";
  end


end // end SL0DS4A

// reset container fields
Function SL0DS4T()


   /* ************************************************************/
   /* *** reset all container flds to blanks                  ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = SLWREC.SLWLINPP;

  while (SLWREC.SLWIDX01 > 0)
    SL0DM410.TS3CNTNR[SLWIDX01] = " ";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end

  SL0DM410.SL0DMPID = TA6REC.XURDEST;


end // end SL0DS4T

// cntnr break summ processing
Function SL0DS5A()

   /* *** move summary data to summary array area ****/
   /* *** if maximum nbr of lines in summary array put to tsq ****/

  if (SLWREC.SLWIDX03 <= SLWREC.SLWLINPP)
    SL0DWS0.SL0DWDPG[SLWIDX03] = SL0DW05.SL0DWSPA;
    SL0DWS0.SL0DWRTY[SLWIDX03] = "S";
    SL0DWS0.SL0DWDTA[SLWIDX03] = SL0DWB5.SL0DWSM5;
    SLWIDX03 = SLWIDX03 + 1;
  else
    TA5REC.TA5APPID = SLWREC.SLWSUMQU;
    TA5REC.TA5FNCCD = "A";

    call "TA0050" (SL0DWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
    if (TA5REC.TA5RTNCD != 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S5AA";
      SLWREC.SLWMSGNO = 0008; /* <--- severe tsq error msg*/
      return;
    end
    /* *** increment summary counter ****/
    SL0DW01.SL0DWSPA = SL0DW01.SL0DWSPA + 1;
    /* *** setup next summary record ****/
    SLWREC.SLWIDX03 = 1;
    SL0DWS0.SL0DWDPG[SLWIDX03] = SL0DW05.SL0DWSPA;
    SL0DWS0.SL0DWRTY[SLWIDX03] = "S";
    SL0DWS0.SL0DWDTA[SLWIDX03] = SL0DWB5.SL0DWSM5;
    SLWIDX03 = SLWIDX03 + 1;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0DS5A

// obtain first summary record
Function SL0DS5B()


  TA5REC.TA5APPID = SLWREC.SLWSUMQU;
  TA5REC.TA5TSQIX = 0001;
  TA5REC.TA5FNCCD = "R";
  call "TA0050" (SL0DWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S5BA";
    SLWREC.SLWMSGNO = 0008;
    return;
  end

  SLWREC.SLWSUMIX = TA5REC.TA5TSQIX;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0DS5B

// process last summary group
Function SL0DS5G()

   /* *** if there is room on summary array put last summary  ****/
   /* *** line on this summary array and put to tsq. if there ****/
   /* *** is no more room on the summary array, put summary   ****/
   /* *** array to tsq and put last summary line on summary   ****/
   /* *** array and then put to tsq.                          ****/

  if (SLWREC.SLWIDX03 <= SLWREC.SLWLINPP)
    /* fill the rest of the buffer with blanks*/
    while (SLWREC.SLWIDX03 <= SLWREC.SLWLINPP)
      SL0DWS0.SL0DWDPG[SLWIDX03] = SL0DW05.SL0DWSPA;
      SL0DWS0.SL0DWRTY[SLWIDX03] = "B";
      SLWREC.SLWIDX03 = SLWREC.SLWIDX03 + 1;
    end

    TA5REC.TA5APPID = SLWREC.SLWSUMQU;
    TA5REC.TA5FNCCD = "A";
    call "TA0050" (SL0DWS0, TA5REC) {isNoRefresh = yes};
    if (TA5REC.TA5RTNCD != 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S5GA";
      SLWREC.SLWMSGNO = 0008; /* <--- severe tsq error msg*/
      return;
    end

    /* *** save maximum number of summary records ****/
    SLWREC.SLWSMAXR = TA5REC.TA5TSQIX;
     /* *** commented as a test *********/
    SL0DW05.SL0DWSPA = SL0DW05.SL0DWSPA + 1;
  else
    TA5REC.TA5APPID = SLWREC.SLWSUMQU;
    TA5REC.TA5FNCCD = "A";

    call "TA0050" (SL0DWS0, TA5REC) {isNoRefresh = yes};
    if (TA5REC.TA5RTNCD != 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S5GB";
      SLWREC.SLWMSGNO = 0008; /* <--- severe tsq error msg*/
      return;
    end
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0DS5G

// save new key for compares
Function SL0DS5I()

   /* ************************************************************/
   /* *** save the new product's key values for compares      ****/
   /* ************************************************************/

  SL0DWB5.TS3CNTNR = SL1REC.TS3CNTNR;
  SL0DWB5.YRSCD = SL1REC.YRSCD;
  SL0DWB5.SL1RCRNO = SL1REC.SL1RCRNO;
  SL0DWB5.SWEPLLNB = SL1REC.SWEPLLNB;
  set TA2REC empty;

  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2GRGGN = SL1REC.SL1CRTDT;

  call "TA0040" (TA2REC) {isNoRefresh = yes};

  if (TA2REC.TA2RTNCD == 0)
    SL0DWB5.SL0DWCRT = TA2REC.TA2GRGB;
  end
  set TA2REC empty;

  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2GRGGN = SL1REC.ZZZCHGDT;

  call "TA0040" (TA2REC) {isNoRefresh = yes};

  if (TA2REC.TA2RTNCD == 0)
    SL0DWB5.SL0DWUDT = TA2REC.TA2GRGB;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0DS5I

// save selected printer
Function SL0DS6A()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/
  SLWREC.SLWIDX02 = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (SL0DT06.TARTYPE[SLWIDX02] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user area*/
      /* ------------------------------------------------------------*/

      SL0DW06.SL0DWWHS = SL0DM610.XWHCD;

      SLWREC.SLWIDX01 = 1;
      while (SLWREC.SLWIDX01 <= 10)
        if (SL0DM610.TS3CNTNR[SLWIDX01] > " ")
          SL0DW06.TS3CNTNR = SL0DM610.TS3CNTNR[SLWIDX01];

          TA6REC.TARJCL[TA6INDEX] = SL0DW06.SL0DWLIN; /* Parametrs*/
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

        end

        SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;

      end

      TA6REC.TA6INDEX = TA6REC.TA6INDEX - 1; /* Keep table position*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = SL0DT06.TARJCL[SLWIDX02]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = SL0DT06.TARTYPE[SLWIDX02]; /* Type*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (SL0DT06.TARJCL[SLWIDX02] == "/*EOF") /* End of Table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  if (SL0DM610.SL0DMPID == " ")
    TA6REC.TA6SUBSW = "Y"; /* display map, tailor and submit JCL*/
  else
    TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  end

  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/
  TA6REC.XURDEST = SL0DM610.SL0DMPID; /* Destination*/

  set TA3REC empty;
  TA3REC.TA3OPTN = "USRNAME";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   || TA3REC.TA3RTNCD == "0")       

    TA6REC.XURUSRNM = TA3REC.TA3USRID;
  else
    /* ------------------------------------------------------------*/
     /* Call not successful, ta0p scr will ask for output recepient*/
    /* ------------------------------------------------------------*/
  end

  XPTA0P();

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  SLWREC.SLWFTMSW = "N";
  if (sysVar.errorCode == "00000000" /* Call successful*/
   || TA6REC.TA6RTNCD == "0")       

    SLWREC.SLWMSGNO = 59; /* job submitted message*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    SLWREC.SLWMSGNO = 58; /* Unexpected error occurred*/
    SLWREC.SLWERRSW = "Y";

  end

  if (TA6REC.TA6RTNCD == "1")
    TA6REC.XURDEST = " ";
  end


end // end SL0DS6A

// reset container fields
Function SL0DS6T()


   /* ************************************************************/
   /* *** reset all container flds to blanks                  ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = SLWREC.SLWLINPP;

  while (SLWREC.SLWIDX01 > 0)
    SL0DM610.TS3CNTNR[SLWIDX01] = " ";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end

  SL0DM610.SL0DMPID = TA6REC.XURDEST;


end // end SL0DS6T

// missing input edits
Function SL0DSA0()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: setup defaults for optional fields, if any    ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0DM010.XMSLMSNO > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA0A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0DM010.XMSLMSNO cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSA0

// missing key inputs edits
Function SL0DSA1()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: defaults setup during initialization          ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0DM110.TS3CNTNR > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1E";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0DM110.TS3CNTNR cursor, bold;
  end
  if (SL0DM110.XWHCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1E";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0DM110.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSA1

// missing input edits
Function SL0DSA2()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: defaults setup during initialization          ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0DM210.XWHCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0DM210.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSA2

// missing key inputs edits
Function SL0DSA3()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: defaults setup during initialization          ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

   /* IF SL0DW03.SL0DWPSW EQ 'XF';        /* choice may be blank on xfer*/
    /* ; /* ** next sentence ***/
   /* ELSE;*/
  if (SL0DM310.SL0DMCHC > " ")
       /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0DM310.SL0DMCHC cursor, bold;
  end
   /* END;*/

  if (SL0DM310.TS3CNTNR > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3B";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0DM310.TS3CNTNR cursor, bold;
  end

  if (SL0DM310.XWHCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3C";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0DM310.XWHCD cursor, bold;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSA3

// missing input edits
Function SL0DSA4()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: defaults setup during initialization          ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0DM410.XWHCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA4A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0DM410.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSA4

// missing key inputs edits
Function SL0DSA5()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: defaults setup during initialization          ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0DM510.YRSCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA5A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0DM510.YRSCD cursor, bold;
  end
  if (SL0DM510.XWHCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA5B";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0DM510.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSA5

// missing input edits
Function SL0DSA6()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: defaults setup during initialization          ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0DM610.XWHCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA6A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0DM610.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSA6

// key missing input edits
Function SL0DSA7()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: setup defaults for optional fields, if any    ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0DM710.TS3CNTNR > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA7A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0DM710.TS3CNTNR cursor, bold;
  end

  if (SL0DM710.XWHCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA7B";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0DM710.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSA7

// get size translations
Function SL0DSAA()


   /* ************************************************************/
   /* *** obtain all valid size data for use during detail    ****/
   /* *** (size) row creation                                 ****/
   /* ************************************************************/


  SYPREC.SYPFC = "PC";
  SYPREC.SYPCMPSW = "N";
  SYPREC.XQACD = "**";

  SL0D450(); /* <=== get size xlations SY1190*/

  if (SYPREC.SYPRC == 0)
     /* ** next sentence ***/
  else
    if (SYPREC.SYPRC == +10)
       /* show not found size rows as *****/
      SL0DW00.SL0DWWDX = 1; /* initialize index*/
      while (SL0DW00.SL0DWWDX < 41)
        SYPREC.SY4IDDSC[SL0DWWDX] = "*****";
        SL0DW00.SL0DWWDX = SL0DW00.SL0DWWDX + 1;
      end
       /* commented out 6/12/90 to show qtys even if size not found*/
         /* MOVE 'Y' TO SLWREC.SLWERRSW;*/
         /* MOVE 'SAAA' TO SLWREC.XXXLOCID;*/
         /* MOVE 0057 TO SLWREC.SLWMSGNO       ;  <--- not on db msg*/
      return;
    else
      if (SYPREC.SYPRC == +11)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SAAA";
        SLWREC.SLWMSGNO = 0466; /* <--- not on db msg*/
        return;
      end
    end
    if (SQLCA.VAGen_SQLCODE == +9)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SAAB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "SAAC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSAA

// same key edits
Function SL0DSB1()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw. (in0iwsks)****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (SL0DM110.TS3CNTNR != SL0DW01.TS3CNTNR)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

  if (SL0DM110.XWHCD != SL0DW01.XWHCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSB1

// same key edits
Function SL0DSB2()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw. (in0iwsks)****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (SL0DM210.XWHCD != SL0DW02.XWHCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSB2

// same key edits
Function SL0DSB3()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw. (in0iwsks)****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (SL0DM310.XWHCD != SL0DW03.XWHCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0DM310.TS3CNTNR != SL0DW03.TS3CNTNR)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0DM310.SL0DMCHC != SL0DW03.SL0DMCHC
   && SL0DM310.SL0DMCHC != "  ") /* may be blank with xfer*/
     /* avoid key change on pf6*/
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSB3

// same key edits
Function SL0DSB4()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw. (in0iwsks)****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (SL0DM410.XWHCD != SL0DW04.XWHCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSB4

// same key edits
Function SL0DSB5()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw. (in0iwsks)****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/


  if (SL0DM510.YRSCD != SL0DW05.YRSCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

  if (SL0DM510.XWHCD != SL0DW05.XWHCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSB5

// same key edits
Function SL0DSB6()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw. (in0iwsks)****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (SL0DM610.XWHCD != SL0DW06.XWHCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSB6

// key field edits
Function SL0DSC1()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (SL0DM110.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0DM110.XWHSABRV = XWHTBL.XWHSABRV[sysVar.arrayIndex];
    else
      SL0DM110.XWHSABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1C";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0DM110.XWHCD cursor, bold;
    end
  else
    SL0DM110.XWHSABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1D";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0DM110.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSC1

// field edits
Function SL0DSC2()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (SL0DM210.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0DM210.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      SL0DM210.XWHABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2A";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0DM210.XWHCD cursor, bold;
    end
  else
    SL0DM210.XWHABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2B";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0DM210.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSC2

// key field edits
Function SL0DSC3()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** validate packlist/po choice                         ****/
   /* ************************************************************/

   /* IF SL0DM310.SL0DMCHC EQ 'PL'*/
    /* OR SL0DM310.SL0DMCHC EQ 'PO';*/
    /* ; /* next sentence*/
   /* ELSE;*/
    /* IF SL0DW03.SL0DWPSW NE 'XF';         /* may be blank with xfer*/
      /* MOVE 'Y' TO SLWREC.SLWERRSW;*/
      /* MOVE 'SC3A' TO SLWREC.XXXLOCID;*/
      /* MOVE 0011 TO SLWREC.SLWMSGNO;         /* <--- must eq pl or po*/
      /* SET SL0DM310.SL0DMCHC CURSOR,BRIGHT;*/
    /* END;*/
   /* END;*/


   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (SL0DM310.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0DM310.XWHSABRV = XWHTBL.XWHSABRV[sysVar.arrayIndex];
    else
      SL0DM310.XWHSABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC3B";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0DM310.XWHCD cursor, bold;
    end
  else
    SL0DM310.XWHSABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC3C";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0DM310.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSC3

// field edits
Function SL0DSC4()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (SL0DM410.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0DM410.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      SL0DM410.XWHABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC4A";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0DM410.XWHCD cursor, bold;
    end
  else
    SL0DM410.XWHABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC4B";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0DM410.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSC4

// key field edits
Function SL0DSC5()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  set TA2REC empty;

  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";
  TA2REC.TA2GRGAN = SL0DM510.SL0DMSDT;

  call "TA0040" (TA2REC) {isNoRefresh = yes};

  if (TA2REC.TA2RTNCD == 0)
    SLVREC.SLVSDT = TA2REC.TA2GRGGN;
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC5A";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0DM510.SL0DMSDT cursor, bold;
  end

  set TA2REC empty;

  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";
  TA2REC.TA2GRGAN = SL0DM510.SL0DMEDT;

  call "TA0040" (TA2REC) {isNoRefresh = yes};

  if (TA2REC.TA2RTNCD == 0)
    SLVREC.SLVEDT = TA2REC.TA2GRGGN;
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC5B";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0DM510.SL0DMEDT cursor, bold;
  end

  if (SLVREC.SLVSDT <= SLVREC.SLVEDT)
     /* next sentence*/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC5C";
    SLWREC.SLWMSGNO = 0022; /* <--- date msg*/
    set SL0DM510.SL0DMSDT cursor, bold;
    set SL0DM510.SL0DMEDT bold;
  end

  if (SL0DM510.YRSCD == "A "
   || SL0DM510.YRSCD == " A"
   || SL0DM510.YRSCD == "AL")
    SL0DM510.YRSCD = "A ";
  else
    if (SL0DM510.YRSCD in YRSTBL.YRSCD)
      if (YRSTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC5D";
        SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
        set SL0DM510.YRSCD cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC5E";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0DM510.YRSCD cursor, bold;
    end
  end

  if (SL0DM510.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0DM510.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      SL0DM510.XWHABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC5F";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0DM510.XWHCD cursor, bold;
    end
  else
    SL0DM510.XWHABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC5G";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0DM510.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSC5

// field edits
Function SL0DSC6()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (SL0DM610.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0DM610.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      SL0DM610.XWHABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC6A";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0DM610.XWHCD cursor, bold;
    end
  else
    SL0DM610.XWHABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC6B";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0DM610.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSC6

// key field edits
Function SL0DSC7()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/
   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (SL0DM710.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0DM710.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      SLWREC.XWHOWNGF = XWHTBL.XWHOWNGF[sysVar.arrayIndex];
    else
      SL0DM710.XWHABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC7A";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0DM710.XWHCD cursor, bold;
    end
  else
    SL0DM710.XWHABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC7B";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0DM710.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSC7

// key relational edits
Function SL0DSD1()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSD1

// relational edits
Function SL0DSD2()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** validate all container no.s before creating jcl     ****/
   /* ************************************************************/

  SL1REC.XWHCD = SL0DM210.XWHCD;

  TA1REC.TA1LOCAT[2] = "SL0DSD2 ";
   /* ** TA1REC.TAMAP setup during initialization ***/

  SLWREC.SLWIDX01 = SLWREC.SLWLINPP;
  SLWREC.SLWFTMSW = "Y";

  while (SLWREC.SLWIDX01 > 0)
    if (SL0DM210.TS3CNTNR[SLWIDX01] > " ")
      SLWREC.SLWFTMSW = "N";
      SL1REC.TS3CNTNR = SL0DM210.TS3CNTNR[SLWIDX01];
      XSSLSV1(); /* <=== validate receipt list hdr*/
      if (SLWREC.SLWVERSW == "Y")
        SLWREC.SLWERRSW = "Y";
        set SL0DM210.XWHCD bold;
        set SL0DM210.TS3CNTNR[SLWIDX01] cursor, bold;
      end
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end

  if (SLWREC.SLWFTMSW == "Y")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD2A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0DM210.TS3CNTNR[1] cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSD2

// key relational edits
Function SL0DSD3()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSD3

// relational edits
Function SL0DSD4()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** validate all container no.s before creating jcl     ****/
   /* ************************************************************/

  SL1REC.XWHCD = SL0DM410.XWHCD;

  TA1REC.TA1LOCAT[2] = "SL0DSD4 ";
   /* ** TA1REC.TAMAP setup during initialization ***/

  SLWREC.SLWIDX01 = SLWREC.SLWLINPP;
  SLWREC.SLWFTMSW = "Y";

  while (SLWREC.SLWIDX01 > 0)
    if (SL0DM410.TS3CNTNR[SLWIDX01] > " ")
      SLWREC.SLWFTMSW = "N";
      SL1REC.TS3CNTNR = SL0DM410.TS3CNTNR[SLWIDX01];
      XSSLSV1(); /* <=== validate receipt list hdr*/
      if (SLWREC.SLWVERSW == "Y")
        SLWREC.SLWERRSW = "Y";
        set SL0DM410.XWHCD bold;
        set SL0DM410.TS3CNTNR[SLWIDX01] cursor, bold;
      end
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end

  if (SLWREC.SLWFTMSW == "Y")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD4A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0DM410.TS3CNTNR[1] cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSD4

// key relational edits
Function SL0DSD5()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSD5

// relational edits
Function SL0DSD6()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** validate all container no.s before creating jcl     ****/
   /* ************************************************************/

  SL1REC.XWHCD = SL0DM610.XWHCD;

  TA1REC.TA1LOCAT[2] = "SL0DSD6 ";
   /* ** TA1REC.TAMAP setup during initialization ***/

  SLWREC.SLWIDX01 = SLWREC.SLWLINPP;
  SLWREC.SLWFTMSW = "Y";

  while (SLWREC.SLWIDX01 > 0)
    if (SL0DM610.TS3CNTNR[SLWIDX01] > " ")
      SLWREC.SLWFTMSW = "N";
      SL1REC.TS3CNTNR = SL0DM610.TS3CNTNR[SLWIDX01];
      XSSLSV1(); /* <=== validate receipt list hdr*/
      if (SLWREC.SLWVERSW == "Y")
        SLWREC.SLWERRSW = "Y";
        set SL0DM610.XWHCD bold;
        set SL0DM610.TS3CNTNR[SLWIDX01] cursor, bold;
      end
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end

  if (SLWREC.SLWFTMSW == "Y")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD6A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0DM610.TS3CNTNR[1] cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSD6

// key relational edits
Function SL0DSD7()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** obtain receiving log header row for this container  ****/
   /* ************************************************************/

  SL1REC.XWHCD = SL0DM710.XWHCD;
  SL1REC.TS3CNTNR = SL0DM710.TS3CNTNR;

  TA1REC.TA1LOCAT[2] = "SL0DSD7 ";
   /* ** TA1REC.TAMAP setup during initialization ***/

  XSSLSV1(); /* <=== validate receiving log hdr*/

  if (SLWREC.SLWVERSW == "Y")
    SLWREC.SLWERRSW = "Y";
    set SL0DM710.XWHCD bold;
    set SL0DM710.TS3CNTNR cursor, bold;
    return;
  end


   /* ************************************************************/
   /* *** if status code greater than 03, cannot be submitted ****/
   /* ************************************************************/

  if (SL1REC.YRSCD == "01"
   || SL1REC.YRSCD == "02"
   || SL1REC.YRSCD == "03")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD7A";
    SLWREC.SLWMSGNO = 0079; /* <--- cannot be modified msg*/
    set SL0DM710.XWHCD bold;
    set SL0DM710.TS3CNTNR cursor, bold;
    return;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSD7

// obtain table data
Function SL0DSE1()


   /* ************************************************************/
   /* *** make one time table accesses for auxillary and/or   ****/
   /* *** main data                                           ****/
   /* *** note: first time executions before beginning a loop ****/
   /* ***       might also be performed                       ****/
   /* ************************************************************/
  set SL1REC empty;
  TA1REC.TA1LOCAT[2] = "SL0DSE1 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  SL1REC.XWHCD = SL0DM110.XWHCD;
  SL1REC.TS3CNTNR = SL0DM110.TS3CNTNR;

  XSSL1I0(); /* <=== receiving log header inquiry*/

  if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE1A";
    SLWREC.SLWMSGNO = 0118; /* <--- not on db msg*/
    set SL0DM110.XWHCD cursor, bold;
    set SL0DM110.TS3CNTNR bold;
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE1B";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0)
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "SE1C";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    SL0DST1(); /* <=== clear scrn (empty)*/
    return;
  end

  SL0DM110.SWEPLLNB = SL1REC.SWEPLLNB;
  SL0DM110.YRSCD = SL1REC.YRSCD;
  SL0DM110.XITCD = SL1REC.XITCD;
  SL0DM110.XARCD = SL1REC.XARCD;
  SL0DM110.SL4ZONE = SL1REC.SL4ZONE;
  SL0DM110.SL1RCRNO = SL1REC.SL1RCRNO;
  SL0DM110.SL1COMNT = SL1REC.SL1COMNT;

  set TA2REC empty;

  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2GRGGN = SL1REC.SL1CRTDT;

  call "TA0040" (TA2REC) {isNoRefresh = yes};

  if (TA2REC.TA2RTNCD == 0)
    SL0DM110.SL1CRTDT = TA2REC.TA2GRGB;
  end


  set TA2REC empty;

  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2GRGGN = SL1REC.ZZZCHGDT;

  call "TA0040" (TA2REC) {isNoRefresh = yes};

  if (TA2REC.TA2RTNCD == 0)
    SL0DM110.SL0DMUDT = TA2REC.TA2GRGB;
  end

   /* MOVE SL1REC.IN7STNBR TO SL0DM110.IN7STNBR;*/
  SL0DM110.SL1RCVR = SL1REC.SL1RCVR;
  SL0DM110.SL1CRTBY = SL1REC.SL1CRTBY;
  SL0DM110.SL1UPDBY = SL1REC.SL1UPDBY;
  if (SL0DM110.YRSCD in YRSTBL.YRSCD)
    SL0DM110.YRSABRV = YRSTBL.YRSABRV[sysVar.arrayIndex];
  end
  if (SL0DM110.XITCD in XITTBL.XITCD)
    SL0DM110.XITABRV = XITTBL.XITABRV[sysVar.arrayIndex];
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSE1

// obtain table data
Function SL0DSE3()


   /* ************************************************************/
   /* *** make one time table accesses for auxillary and/or   ****/
   /* *** main data                                           ****/
   /* *** note: first time executions before beginning a loop ****/
   /* ***       might also be performed                       ****/
   /* ************************************************************/
  TA1REC.TA1LOCAT[2] = "SL0DSE3 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  set SLVREC empty; /* function (set in xssl1i0)*/
  set SL1REC empty; /* dclgen*/
  SL1REC.XWHCD = SL0DM310.XWHCD;
  SL1REC.TS3CNTNR = SL0DM310.TS3CNTNR;

  XSSL1I0(); /* <=== receiving log header inquiry*/

  if (SQLCA.VAGen_SQLCODE == +100)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE3A";
    SLWREC.SLWMSGNO = 0118; /* not on db msg*/
    set SL0DM310.XWHCD cursor, bold;
    set SL0DM310.TS3CNTNR bold;
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE3B";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE != 0)
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "SE3C";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    SL0DST3(); /* <=== clear scrn (empty)*/
    return;
  end


  SL0DM310.SWEPLLNB = SL1REC.SWEPLLNB;
  SL0DM310.YRSCD = SL1REC.YRSCD;
  SL0DM310.XITCD = SL1REC.XITCD;
  SL0DM310.XARCD = SL1REC.XARCD;
  SL0DM310.SL4ZONE = SL1REC.SL4ZONE;
  SL0DM310.SL1COMNT = SL1REC.SL1COMNT;
  SL0DM310.SL1RCRNO = SL1REC.SL1RCRNO;

  set TA2REC empty;

  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2GRGGN = SL1REC.SL1CRTDT;

  call "TA0040" (TA2REC) {isNoRefresh = yes};

  if (TA2REC.TA2RTNCD == 0)
    SL0DM310.SL1CRTDT = TA2REC.TA2GRGB;
  end

   /* MOVE SL1REC.IN7STNBR TO SL0DM310.IN7STNBR;*/
  if (SL0DM310.YRSCD in YRSTBL.YRSCD)
    SL0DM310.YRSABRV = YRSTBL.YRSABRV[sysVar.arrayIndex];
  else
    SL0DM310.YRSABRV = "******";
  end
  if (SL0DM310.XITCD in XITTBL.XITCD)
    SL0DM310.XITABRV = XITTBL.XITABRV[sysVar.arrayIndex];
  else
    SL0DM310.XITABRV = "******";
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSE3

// obtain table data
Function SL0DSE5()


   /* ************************************************************/
   /* *** make one time table accesses for auxillary and/or   ****/
   /* *** main data                                           ****/
   /* *** note: first time executions before beginning a loop ****/
   /* ***       might also be performed                       ****/
   /* ************************************************************/

  set SL1REC empty;
  TA1REC.TA1LOCAT[2] = "SL0DSE5 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  SL1REC.XWHCD = SL0DM510.XWHCD;
  if (SL0DM510.YRSCD == "A ")
    SL1REC.YRSCD = "* ";
  else
    SL1REC.YRSCD = SL0DM510.YRSCD;
  end

  XSSL1S1(); /* select set of receiving log hdrs*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    set SL0DM510.XWHCD cursor, bold;
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.XXXLOCID = "SE5A";
      SLWREC.SLWMSGNO = 0119; /* <--- no receipt data msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.SLWSKYSW = "N";
      SLWREC.XXXLOCID = "SE5B";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.XXXLOCID = "SE5C";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end


   /* *** initialize fields for loop processing ****/

  SLWREC.SLWIDX03 = 1; /* summary area index*/
  SLWREC.SLWIDX04 = SLWREC.SLWLINPP; /* # of available lines*/
  SL0DWB5.SL0DWRCV = 0; /* total received qty*/
  SL0DW05.SL0DWSPA = 1; /* summary page ctr*/

   /* ************************************************************/
   /* *** process each of this containers' items              ****/
   /* *** note: for each container 'break', save new values   ****/
   /* ************************************************************/

  SL0DW05.XWHCD = SL1REC.XWHCD;
                                   /* <----- save xwhcd value*/
  SL0DW05.TS3CNTNR = SL1REC.TS3CNTNR; /* <----- save cntnr value*/
  SL0DM511.SWEPLLNB = SL1REC.SWEPLLNB; /* <----- move plan to map*/
  SL0DW05.VAGen_SQLCODE = SQLCA.VAGen_SQLCODE;
  SL0DS5I(); /* <=== save sl1rec in wb5*/

  while (SL0DW05.VAGen_SQLCODE == 0)
    set VRLITM02 empty;
    TA1REC.TA1LOCAT[2] = "SL0DSE5 ";
    TA1REC.TA1MAP = SLWREC.SLWTAMAP;
    VRLITM02.XWHCD = SL1REC.XWHCD;
    VRLITM02.TS3CNTNR = SL1REC.TS3CNTNR;
   /* XSSL2S2;                    /* <=== select set VRLITM02s*/
    XSSLS-S2-VRLITM02(); /* <=== select set VRLITM02s*/

    if (SQLCA.VAGen_SQLCODE == 0)
      while (SQLCA.VAGen_SQLCODE == 0)
        SL0DWB5.SL0DWRCV = SL0DWB5.SL0DWRCV + VRLITM02.SL2RCVD;
        SL0DW05.SL0DWRCV = SL0DW05.SL0DWRCV + VRLITM02.SL2RCVD;
   /* XSSL2F2;                   /* <--- fetch next sl2*/
        XSSLS-F2-VRLITM02(); /* <--- fetch next sl2*/
      end
    else
      if (SQLCA.VAGen_SQLCODE == +100)
         /* next sentence*/
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          SLWREC.SLWERRSW = "Y";
          SLWREC.SLWSKYSW = "N";
          SLWREC.XXXLOCID = "SE5D";
          SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
          return;
        end
        SLWREC.XXXLOCID = "SE5E";
        SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
        return;
      end
    end

    SL0DS5A(); /* <--- cntnr break summ proc*/

    XSSL1F1(); /* select next record*/

    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == +100)
       /* ** next sentence ***/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        SLWREC.SLWERRSW = "Y";
        SLWREC.SLWSKYSW = "N";
        SLWREC.XXXLOCID = "SE5F";
        SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
        set SL0DM510.XWHCD bold;
        return;
      end
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SE5G";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100)
      /* next sentence*/
    else
      /* *** reset sl0dwb5 for next group*/
      set SL0DWB5 empty;
      SL0DS5I(); /* <=== save sl1rec in wb5*/
      SL0DW05.TS3CNTNR = SL1REC.TS3CNTNR;
                                   /* <----- save cntnr values*/
    end
    SL0DW05.VAGen_SQLCODE = SQLCA.VAGen_SQLCODE;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    SL0DS5G(); /* last group summary processing*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
  end

  SL0DM510.SL0DWRCV = SL0DW05.SL0DWRCV; /* tot qty to map*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSE5

// key obtain table data
Function SL0DSE7()


   /* ************************************************************/
   /* *** make one time table accesses for auxillary and/or   ****/
   /* *** main data                                           ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSE7

// format rlcmp date on map
Function SL0DSEA()


   /* ************************************************************/
   /* *** format the zz chng time from rlcmp on map           ****/
   /* ************************************************************/


  set TA2REC empty;

  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2GRGGN = VRLCMP02.ZZZCHGDT;
  TA2REC.TA2TIMHM = VRLCMP02.ZZZCHGTM;

  call "TA0040" (TA2REC) {isNoRefresh = yes};

  if (TA2REC.TA2RTNCD == 0)
    SL0DM310.SL0DMCDT = TA2REC.TA2TIMED;
  else
    SL0DM310.SL0DMCDT = " ";
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSEA

// save current key value(s)
Function SL0DSF1()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  COMMAREA.XWHCD = SL0DM110.XWHCD;

  SL0DW01.XWHCD = SL0DM110.XWHCD;

  if (SL0DM110.TS3CNTNR != SL0DW01.TS3CNTNR)
    SL0DW01.TS3CNTNR = SL0DM110.TS3CNTNR;
    SL0DS11(); /* <=== causera output processing*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSF1

// save key values
Function SL0DSF2()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  COMMAREA.XWHCD = SL0DM210.XWHCD;

  SL0DW02.XWHCD = SL0DM210.XWHCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSF2

// save current key value(s)
Function SL0DSF3()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  COMMAREA.XWHCD = SL0DM310.XWHCD; /* warehouse code*/

  SL0DW03.XWHCD = SL0DM310.XWHCD;

  if (SL0DM310.SL0DMCHC != SL0DW03.SL0DMCHC) /* pklist/po choice*/
    SL0DW03.SL0DMCHC = SL0DM310.SL0DMCHC;
  end

  if (SL0DM310.TS3CNTNR != SL0DW03.TS3CNTNR) /* trans cntnr nbr*/
    SL0DW03.TS3CNTNR = SL0DM310.TS3CNTNR;
  end

  SL0DS13(); /* <=== causera output processing*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSF3

// save key values
Function SL0DSF4()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  COMMAREA.XWHCD = SL0DM410.XWHCD;

  SL0DW04.XWHCD = SL0DM410.XWHCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSF4

// save current key value(s)
Function SL0DSF5()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  COMMAREA.XWHCD = SL0DM510.XWHCD;

  SL0DW05.XWHCD = SL0DM510.XWHCD;
  SL0DW05.YRSCD = SL0DM510.YRSCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSF5

// save key values
Function SL0DSF6()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  COMMAREA.XWHCD = SL0DM610.XWHCD;

  SL0DW06.XWHCD = SL0DM610.XWHCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSF6

// save current key value(s)
Function SL0DSF7()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  COMMAREA.XWHCD = SL0DM710.XWHCD;

  SL0DW07.XWHCD = SL0DM710.XWHCD;

  if (SL0DM710.TS3CNTNR != SL0DW07.TS3CNTNR)
    SL0DW07.TS3CNTNR = SL0DM710.TS3CNTNR;
  end

  SL0DS17(); /* <=== causera output processing*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSF7

// setup map key fields
Function SL0DSG1()


   /* ************************************************************/
   /* *** since the 'special error switch' = 'y':             ****/
   /* *** use current ws values in the corresponding map flds ****/
   /* ************************************************************/

  SL0DM110.XWHCD = SL0DW01.XWHCD;
  SL0DM110.TS3CNTNR = SL0DW01.TS3CNTNR;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSG1

// setup map key fields
Function SL0DSG3()


   /* ************************************************************/
   /* *** since the 'special error switch' = 'y':             ****/
   /* *** use current ws values in the corresponding map flds ****/
   /* ************************************************************/

  SL0DM310.XWHCD = SL0DW03.XWHCD; /* warehouse*/
  SL0DM310.TS3CNTNR = SL0DW03.TS3CNTNR; /* container*/
  SL0DM310.SL0DMCHC = SL0DW03.SL0DMCHC; /* pklist/po choice*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSG3

// setup map key fields
Function SL0DSG5()


   /* ************************************************************/
   /* *** since the 'special error switch' = 'y':             ****/
   /* *** use current ws values in the corresponding map flds ****/
   /* ************************************************************/

  SL0DM510.XWHCD = SL0DW05.XWHCD;
  SL0DM510.YRSCD = SL0DW05.YRSCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSG5

// setup map key fields
Function SL0DSG7()


   /* ************************************************************/
   /* *** use current ws values in the corresponding map flds ****/
   /* ************************************************************/

  SL0DM710.XWHCD = SL0DW07.XWHCD;
  SL0DM710.TS3CNTNR = SL0DW07.TS3CNTNR;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSG7

// ENTER processing
Function SL0DSH0()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0DSA0(); /* <=== missing input edits*/

   /* ************************************************************/
   /* *** no missing fields:                                  ****/
   /* *** invalid selection detected in flow when             ****/
   /* *** transfer of control is attempted                    ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSH0

// ENTER processing
Function SL0DSH1()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0DSA1(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check the key fields for changes                    ****/
   /* *** note: save key will be blank & NOT = on first time  ****/
   /* *** note: IN0XWSKS=Y; if fields NOT changed (=same key) ****/
   /* ************************************************************/

  SL0DSB1(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "Y")
     /* ************************************************************/
     /* *** if same key fields & enter last used: setup error   ****/
     /* ************************************************************/
    if (SLWREC.SLWLASPF == "E")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SH1A";
      SLWREC.SLWMSGNO = 0005; /* <--- new input required msg*/
      return;
    end
     /* ************************************************************/
     /* *** since last pfkey was NOT ENTER & key is the same:   ****/
     /* ***   setup last pfkey = ENTER & make sure tsq is setup ****/
     /* ***   find the same subkey as on detail (& top of page) ****/
     /* ***   setup summary data lines for this page            ****/
     /* *** note: last pfkey can't be blank (first time thru)   ****/
     /* ***       re: same key checks will eq 'n'               ****/
     /* ************************************************************/
    SLWREC.SLWLASPF = "E";
    SL0DSU1(); /* <=== match detail's subkey*/
    if (SLWREC.SLWERRSW == "Y")
      SL0DST1(); /* <=== reset screen (empty)*/
      return;
    end
    SL0DSO1(); /* <=== setup left sum scrn*/
    return;
  end

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  SL0DSC1(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0DSD1(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    SL0DSF1(); /* <=== save current key value(s)*/
    SL0DST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses             ****/
   /* ************************************************************/

  SL0DSE1(); /* <=== obtain table data*/

  if (SLWREC.SLWERRSW == "Y")
    SL0DSF1(); /* <=== save current key value(s)*/
    SL0DST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s) & last pfkey as ENTER  ****/
   /* ************************************************************/

  SL0DSF1(); /* <=== save current key value(s)*/

  SLWREC.SLWLASPF = "E";

   /* ************************************************************/
   /* *** data present & changed: purge both tsqs             ****/
   /* ************************************************************/

  set TA5REC empty;
  XSSLSPQ(); /* <=== purge tsq(s)*/

  if (SLWREC.SLWERRSW == "Y")
    SL0DST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: setup summary tsq                        ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    SL0DM110.XMSLMSEL[SLWIDX01] = " ";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

  SL0DSS1(); /* <=== setup all pages in tsq*/

  if (SLWREC.SLWERRSW == "Y")
    SL0DST1(); /* <=== reset screen (empty)*/
    return;
  end

  SL0DS1B(); /* <=== obtain first summary record*/

   /* ************************************************************/
   /* *** setup sum screen                                    ****/
   /* ************************************************************/

  SL0DSO1(); /* <=== setup left sum scrn*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSH1

// ENTER processing
Function SL0DSH2()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0DSA2(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check the key fields for changes                    ****/
   /* *** if key (whse) changes: validate keys/whse           ****/
   /* ***                        save keys/whse               ****/
   /* ************************************************************/

  SL0DSB2(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "N")
    SL0DSC2(); /* <=== field edits*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
    SL0DSF2(); /* <=== save key values*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0DSD2(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: setup & submit jcl                       ****/
   /* ************************************************************/

  SL0DS2A(); /* <=== setup & submit jcl*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** reset the screen for new input & display msg        ****/
   /* *** only blank out the container flds                   ****/
   /* ************************************************************/

  SL0DS2T(); /* <=== reset cntnr flds*/

  SLWREC.SLWMSGNO = 0019; /* <--- report(s) printed msg*/
  SLWREC.XXXLOCID = "220 "; /* <=== reset error id*/


end // end SL0DSH2

// ENTER processing
Function SL0DSH3()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0DSA3(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check the key fields for changes                    ****/
   /* *** note: save key will be blank & NOT = on first time  ****/
   /* *** note: IN0XWSKS=Y; if fields NOT changed (=same key) ****/
   /* ************************************************************/

  SL0DSB3(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "Y")
     /* ************************************************************/
     /* *** if same key fields & enter last used: setup error   ****/
     /* ************************************************************/
    if (SLWREC.SLWLASPF == "E")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SH3A";
      SLWREC.SLWMSGNO = 0005; /* <--- new input required msg*/
      return;
    end
     /* ************************************************************/
     /* *** since last pfkey was NOT ENTER & key is the same:   ****/
     /* ***   setup last pfkey = ENTER & make sure tsq is setup ****/
     /* ***   find the same subkey as on detail (& top of page) ****/
     /* ***   setup summary data lines for this page            ****/
     /* *** note: last pfkey can't be blank (first time thru)   ****/
     /* ***       re: same key checks will eq 'n'               ****/
     /* ************************************************************/
    SLWREC.SLWLASPF = "E";
    SL0DSU3(); /* <=== match detail's subkey*/
    if (SLWREC.SLWERRSW == "Y")
      SL0DST3(); /* <=== reset screen (empty)*/
      return;
    end
    SL0DSO3(); /* <=== setup left sum scrn*/
    return;
  end

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  SL0DSC3(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0DSD3(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    SL0DSF3(); /* <=== save current key value(s)*/
    SL0DST3(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses             ****/
   /* ************************************************************/

  SL0DW03.SL0DWMHE = "N"; /* init hard err sw for alert msg*/
  SL0DW03.SL0DWPSW = " "; /* init process switch (po/pl/xf)*/

  if (SL0DM310.SL0DMCHC == "  ") /* choice is blank*/
    SL0DM310.SL0DMCHC = "PL"; /* reset packlist default*/
  end

  SL0DSE3(); /* <=== obtain table data*/

  if (SLWREC.SLWERRSW == "Y")
    SL0DSF3(); /* <=== save current key value(s)*/
    SL0DST3(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s) & last pfkey as ENTER  ****/
   /* ************************************************************/

  SL0DSF3(); /* <=== save current key value(s)*/

  SLWREC.SLWLASPF = "E";

   /* ************************************************************/
   /* *** data present and changed: purge both tsqs           ****/
   /* ************************************************************/

  set TA5REC empty;
  XSSLSPQ(); /* <=== purge tsqs*/

  if (SLWREC.SLWERRSW == "Y")
    SL0DST3(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: setup summary tsq                        ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    SL0DM310.XMSLMSEL[SLWIDX01] = " ";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

  SL0DW03.SL0DWPSW = "PL"; /* init process sw to default*/

  SL0DW03.SL0DWNPD = "N"; /* init no pklist data sw*/

   /* IF SL1REC.IN7STNBR > 0;           /* rlhdr xfer nbr present*/
    /* MOVE 'XF' TO SL0DW03.SL0DWPSW;  /* process xfer*/
   /* ELSE;                             /* not a xfer...check for pklist*/
   /* IF SL0DM310.SL0DMCHC NE 'PO';*/
     /* SET TSHREC EMPTY;             /* init cntnr record*/
                                  /* MOVE SL0DM310.TS3CNTNR TO*/
                                   /* TSHREC.TSHCNTNR; /* pass key for*/
                                   /* select set*/
     /* MOVE 'RC' TO TSHREC.TSHSTAT;*/
     /* SL0DSM3;                      /* check for packlist*/
                                   /* and format based on sqlcode*/
   /* ELSE;*/
     /* MOVE 'PO' TO SL0DW03.SL0DWPSW;       /* process po*/
   /* END;*/
   /* END;*/

  SL0DSS3(); /* <=== setup all pages in tsq*/

  if (SLWREC.SLWERRSW == "Y")
    SL0DST3(); /* <=== reset screen (empty)*/
    return;
  end

  SL0DS3B(); /* <=== obtain first summary record*/

   /* ************************************************************/
   /* *** setup sum screen                                    ****/
   /* ************************************************************/

  SL0DSO3(); /* <=== setup left sum scrn*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSH3

// ENTER processing
Function SL0DSH4()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0DSA4(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check the key fields for changes                    ****/
   /* *** if key (whse) changes: validate keys/whse           ****/
   /* ***                        save keys/whse               ****/
   /* ************************************************************/

  SL0DSB4(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "N")
    SL0DSC4(); /* <=== field edits*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
    SL0DSF4(); /* <=== save key values*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0DSD4(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: setup & submit jcl                       ****/
   /* ************************************************************/

  SL0DS4A(); /* <=== setup & submit jcl*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** reset the screen for new input & display msg        ****/
   /* *** only blank out the container flds                   ****/
   /* ************************************************************/

  SL0DS4T(); /* <=== reset cntnr flds*/

  SLWREC.SLWMSGNO = 0019; /* <--- report(s) printed msg*/
  SLWREC.XXXLOCID = "420 "; /* <=== reset error id*/


end // end SL0DSH4

// ENTER processing
Function SL0DSH5()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0DSA5(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  SL0DSC5(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0DSD5(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** data present and changed: purge both tsqs           ****/
   /* ************************************************************/

  set TA5REC empty;
  XSSLSPQ(); /* <=== purge tsqs*/

   /* ************************************************************/
   /* *** no errors: make one time table accesses             ****/
   /* ************************************************************/

  SL0DSE5(); /* <=== obtain table data*/

  if (SLWREC.SLWERRSW == "Y")
    SL0DSF5(); /* <=== save current key value(s)*/
    SL0DST5(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s) & last pfkey as ENTER  ****/
   /* ************************************************************/

  SL0DSF5(); /* <=== save current key value(s)*/


  if (SLWREC.SLWERRSW == "Y")
    SL0DST5(); /* <=== reset screen (empty)*/
    return;
  end


  SL0DS5B(); /* <=== obtain first summary record*/

   /* ************************************************************/
   /* *** setup sum screen                                    ****/
   /* ************************************************************/

  SL0DSO5(); /* <=== setup left sum scrn*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSH5

// ENTER processing
Function SL0DSH6()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0DSA6(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check the key fields for changes                    ****/
   /* *** if key (whse) changes: validate keys/whse           ****/
   /* ***                        save keys/whse               ****/
   /* ************************************************************/

  SL0DSB6(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "N")
    SL0DSC6(); /* <=== field edits*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
    SL0DSF6(); /* <=== save key values*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0DSD6(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: setup & submit jcl                       ****/
   /* ************************************************************/

  SL0DS6A(); /* <=== setup & submit jcl*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** reset the screen for new input & display msg        ****/
   /* *** only blank out the container flds                   ****/
   /* ************************************************************/

  SL0DS6T(); /* <=== reset cntnr flds*/

  SLWREC.SLWMSGNO = 0019; /* <--- report(s) printed msg*/
  SLWREC.XXXLOCID = "620 "; /* <=== reset error id*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSH6

// ENTER processing
Function SL0DSH7()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0DSA7(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    SL0DW07.SL0DWUPS = "N";
    return;
  end

   /* ************************************************************/
   /* *** no missing fields: edit individual fields           ****/
   /* ************************************************************/

  SL0DSC7(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    SL0DW07.SL0DWUPS = "N";
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0DSD7(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    SL0DW07.SL0DWUPS = "N";
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses & setup map ****/
   /* ************************************************************/

  SL0DSE7(); /* <=== obtain table data*/

  if (SLWREC.SLWERRSW == "Y")
    SL0DW07.SL0DWUPS = "N";
    SL0DSF7(); /* <=== save current key value(s)*/
    SL0DST7(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value and update                ****/
   /* ************************************************************/

  SL0DSF7(); /* <=== save current key value(s)*/

  if (SL0DW07.SL0DWUPS == "Y") /* <=== CHECK IF UPDATE SWITCH ON*/
    if (SL0DM710.SL0DMUSW == "Y")
      SL0DSU7(); /* <=== submit batch update*/
      SLWREC.SLWMSGNO = 0196;
      SL0DW07.SL0DWUPS = "N"; /* < === move no to ws update switch*/
      return;
    else
      SL0DW07.SL0DWUPS = "N"; /* <=== move no to ws update switch*/
      return;
    end
  end
  SL0DW07.SL0DWUPS = "Y"; /* move 'y' to ws update switch*/
  SL0DM710.SL0DMUSW = "Y"; /* move 'y' to screen update switch*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSH7

// PF6 processing
Function SL0DSI1()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0DSA1(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check for changes to the key fields                 ****/
   /* *** note: if first time: save keys = blanks & are NOT = ****/
   /* *** note: IN0XWSKS = Y : same keys as last saved        ****/
   /* ************************************************************/

  SL0DSB1(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "Y")
     /* ************************************************************/
     /* *** if same key fields & last pfkey was PF6: error msg  ****/
     /* ************************************************************/
    if (SLWREC.SLWLASPF == "6")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SI1A";
      SLWREC.SLWMSGNO = 0005; /* <--- new input required msg*/
      return;
    end
     /* ************************************************************/
     /* *** since the last pfkey was NOT PF6 & key is the same: ****/
     /* ***   setup last pfkey = PF6 & make sure tsq is setup   ****/
     /* ***   find the same subkey as on summary (& top of page)****/
     /* ***   setup detail data lines for this page             ****/
     /* *** note: same key checks prevent last pfkey = blank    ****/
     /* ************************************************************/
    SLWREC.SLWLASPF = "6";
    SL0DSW1(); /* <=== match summary's subkey*/
    if (SLWREC.SLWERRSW == "Y")
      SL0DST1(); /* <=== reset screen (empty)*/
      return;
    end
    SL0DSP1(); /* <=== setup left det scrn*/
    return;
  end

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  SL0DSC1(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0DSD1(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    SL0DSF1(); /* <=== save current key value(s)*/
    SL0DST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses             ****/
   /* ************************************************************/

  SL0DSE1(); /* <=== obtain table data*/

  if (SLWREC.SLWERRSW == "Y")
    SL0DSF1(); /* <=== save current key value(s)*/
    SL0DST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s) & last pfkey as PF6    ****/
   /* ************************************************************/

  SL0DSF1(); /* <=== save current key value(s)*/

  SLWREC.SLWLASPF = "6";

   /* ************************************************************/
   /* *** data present & changed: purge tsq(s)                ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq(s)*/

  if (SLWREC.SLWERRSW == "Y")
    SL0DST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: setup detail tsq and first page          ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    SL0DM110.XMSLMSEL[SLWIDX01] = " ";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

  SL0DSS1();
                                   /* <==== set up both tsq's*/

  if (SLWREC.SLWERRSW == "Y")
    SL0DST1(); /* <=== reset screen (empty)*/
    return;
  end

  SL0DS1D();

   /* ************************************************************/
   /* *** setup left det screen                               ****/
   /* ************************************************************/

  SL0DSP1(); /* <=== setup left det scrn*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSI1

// PF6 processing
Function SL0DSI3()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0DSA3(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check for changes to the key fields                 ****/
   /* *** note: if first time: save keys = blanks & are NOT = ****/
   /* *** note: IN0XWSKS = Y : same keys as last saved        ****/
   /* ************************************************************/

  SL0DSB3(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "Y")
     /* ************************************************************/
     /* *** if same key fields & last pfkey was PF6: error msg  ****/
     /* ************************************************************/
    if (SLWREC.SLWLASPF == "6")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SI3A";
      SLWREC.SLWMSGNO = 0005; /* <--- new input required msg*/
      return;
    end
     /* ************************************************************/
     /* *** since the last pfkey was NOT PF6 & key is the same: ****/
     /* ***   setup last pfkey = PF6 & make sure tsq is setup   ****/
     /* ***   find the same subkey as on summary (& top of page)****/
     /* ***   setup detail data lines for this page             ****/
     /* *** note: same key checks prevent last pfkey = blank    ****/
     /* ************************************************************/
    SLWREC.SLWLASPF = "6";
    SL0DSW3(); /* <=== match summary's subkey*/
    if (SLWREC.SLWERRSW == "Y")
      SL0DST3(); /* <=== reset screen (empty)*/
      return;
    end
    SL0DSP3(); /* <=== setup left det scrn*/
    return;
  end

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  SL0DSC3(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0DSD3(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    SL0DSF3(); /* <=== save current key value(s)*/
    SL0DST3(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses             ****/
   /* ************************************************************/

  SL0DSE3(); /* <=== obtain table data*/

  if (SLWREC.SLWERRSW == "Y")
    SL0DSF3(); /* <=== save current key value(s)*/
    SL0DST3(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s) & last pfkey as PF6    ****/
   /* ************************************************************/

  SL0DSF3(); /* <=== save current key value(s)*/

  SLWREC.SLWLASPF = "6";

   /* ************************************************************/
   /* *** data present & changed: purge tsq(s)                ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq(s)*/

  if (SLWREC.SLWERRSW == "Y")
    SL0DST3(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: setup detail tsq and first page          ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    SL0DM310.XMSLMSEL[SLWIDX01] = " ";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

  SL0DSS3(); /* <=== setup both tsqs*/

  if (SLWREC.SLWERRSW == "Y") /* <=== reset screen (empty)*/
    SL0DST3(); /* <=== reset screen (empty)*/
    return;
  end

  SL0DS3D();

   /* ************************************************************/
   /* *** setup left det screen                               ****/
   /* ************************************************************/

  SL0DSP3(); /* <=== setup left det scrn*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSI3

// PF7 processing
Function SL0DSJ1()


   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: IN0XWSKS=N; if fields changed (keys different)****/
   /* ************************************************************/

  SL0DSA1(); /* <=== check for missing data*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0DSB1(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "N")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SJ1A";
    SLWREC.SLWMSGNO = 0006; /* <--- changes not allowed msg*/
    return;
  end

   /* ************************************************************/
   /* *** decrement the last relative record number           ****/
   /* *** and setup the new page depending on last PFkey      ****/
   /* *** note: last pfkey used can not be blank at this point****/
   /* ************************************************************/

  if (SLWREC.SLWLASPF == "E")
    if (SLWREC.SLWSUMIX == 1)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SJ1B";
      SLWREC.SLWMSGNO = 0007; /* <--- top of data*/
    else
      SLWREC.SLWSUMIX = SLWREC.SLWSUMIX - 1;
      TA5REC.TA5TSQIX = SLWREC.SLWSUMIX;
      TA5REC.TA5APPID = SLWREC.SLWSUMQU;
      TA5REC.TA5FNCCD = "R";
      call "TA0050" (SL0DWS0, TA5REC) {isNoRefresh = yes};
      if (TA5REC.TA5RTNCD != 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SJ1C";
        SLWREC.SLWMSGNO = 0001;
        return;
      end
      SL0DSO1(); /* <=== setup left sum scrn*/
    end
  else
    if (SLWREC.SLWDETIX == 1)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SJ1D";
      SLWREC.SLWMSGNO = 0007; /* <--- top of data*/
    else
      SLWREC.SLWDETIX = SLWREC.SLWDETIX - 1;
      TA5REC.TA5TSQIX = SLWREC.SLWDETIX;
      TA5REC.TA5APPID = SLWREC.SLWDETQU;
      TA5REC.TA5FNCCD = "R";
      call "TA0050" (SL0DWD0, TA5REC) {isNoRefresh = yes};
      if (TA5REC.TA5RTNCD != 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SJ1E";
        SLWREC.SLWMSGNO = 0001;
        return;
      end
      SL0DSP1(); /* <=== setup left det scrn*/
    end
  end

  if (SLWREC.SLWERRSW == "N")
    SLWREC.XXXLOCID = "SJ1F";
    SLWREC.SLWMSGNO = 0014;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0DSJ1

// PF7 processing
Function SL0DSJ3()


   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: IN0XWSKS=N; if fields changed (keys different)****/
   /* ************************************************************/

  SL0DSA3(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0DSB3(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "N")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SJ3A";
    SLWREC.SLWMSGNO = 0006; /* <--- changes not allowed msg*/
    return;
  end

   /* ************************************************************/
   /* *** calculate the pointer value for the previous page   ****/
   /* *** and setup the new page depending on last PFkey      ****/
   /* *** note: last pfkey used can not be blank at this point****/
   /* ************************************************************/

  if (SLWREC.SLWLASPF == "E")
    if (SLWREC.SLWSUMIX == 1)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SJ3B";
      SLWREC.SLWMSGNO = 0007; /* <--- top of data*/
    else
      SLWREC.SLWSUMIX = SLWREC.SLWSUMIX - 1;
      TA5REC.TA5TSQIX = SLWREC.SLWSUMIX;
      TA5REC.TA5APPID = SLWREC.SLWSUMQU;
      TA5REC.TA5FNCCD = "R";
      call "TA0050" (SL0DWS0, TA5REC) {isNoRefresh = yes};
      if (TA5REC.TA5RTNCD != 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SJ3C";
        SLWREC.SLWMSGNO = 0001;
        return;
      end
      SL0DSO3(); /* <=== setup left sum scrn*/
    end
  else
    if (SLWREC.SLWDETIX == 1)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SJ3D";
      SLWREC.SLWMSGNO = 0007; /* <--- top of data*/
    else
      SLWREC.SLWDETIX = SLWREC.SLWDETIX - 1;
      TA5REC.TA5TSQIX = SLWREC.SLWDETIX;
      TA5REC.TA5APPID = SLWREC.SLWDETQU;
      TA5REC.TA5FNCCD = "R";
      call "TA0050" (SL0DWD0, TA5REC) {isNoRefresh = yes};
      if (TA5REC.TA5RTNCD != 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SJ3E";
        SLWREC.SLWMSGNO = 0001;
        return;
      end
      SL0DSP3(); /* <=== setup left det scrn*/
    end
  end

  if (SLWREC.SLWERRSW == "N")
    SLWREC.XXXLOCID = "SJ3F";
    SLWREC.SLWMSGNO = 0014;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0DSJ3

// PF7 processing
Function SL0DSJ5()


   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: IN0XWSKS=N; if fields changed (keys different)****/
   /* ************************************************************/

  SL0DSA5(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0DSB5(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "N")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SJ5A";
    SLWREC.SLWMSGNO = 0006; /* <--- changes not allowed msg*/
    return;
  end

   /* ************************************************************/
   /* *** calculate the pointer value for the previous page   ****/
   /* *** and setup the new page depending on last PFkey      ****/
   /* *** note: last pfkey used can not be blank at this point****/
   /* ************************************************************/

  if (SLWREC.SLWSUMIX == 1)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SJ5B";
    SLWREC.SLWMSGNO = 0007; /* <--- top of data*/
  else
    SLWREC.SLWSUMIX = SLWREC.SLWSUMIX - 1;
    TA5REC.TA5TSQIX = SLWREC.SLWSUMIX;
    TA5REC.TA5APPID = SLWREC.SLWSUMQU;
    TA5REC.TA5FNCCD = "R";
    call "TA0050" (SL0DWS0, TA5REC) {isNoRefresh = yes};
    if (TA5REC.TA5RTNCD != 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SJ5C";
      SLWREC.SLWMSGNO = 0001;
      return;
    end
    SL0DSO5(); /* <=== setup left sum scrn*/
  end

  if (SLWREC.SLWERRSW == "N")
    SLWREC.XXXLOCID = "SJ5F";
    SLWREC.SLWMSGNO = 0014;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0DSJ5

// PF8 processing
Function SL0DSK1()


   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: IN0XWSKS=N; if fields changed (keys different)****/
   /* ************************************************************/

  SL0DSA1(); /* <=== missing input check*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0DSB1(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "N")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SK1A";
    SLWREC.SLWMSGNO = 0006; /* <--- changes not allowed msg*/
    return;
  end


  if (SLWREC.SLWLASPF == "E")
    if (SLWREC.SLWSUMIX == SLWREC.SLWSMAXR)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SK1B";
      SLWREC.SLWMSGNO = 0008; /* <--- bottom of data*/
      return;
    else
      SLWREC.SLWSUMIX = SLWREC.SLWSUMIX + 1;
      TA5REC.TA5TSQIX = SLWREC.SLWSUMIX;
      TA5REC.TA5APPID = SLWREC.SLWSUMQU;
      TA5REC.TA5FNCCD = "R";
      call "TA0050" (SL0DWS0, TA5REC) {isNoRefresh = yes};
      if (TA5REC.TA5RTNCD != 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SK1C";
        SLWREC.SLWMSGNO = 0001;
        return;
      end
      SL0DSO1(); /* <=== setup left sum scrn*/
    end
  else
    if (SLWREC.SLWDETIX == SLWREC.SLWDMAXR)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SK1D";
      SLWREC.SLWMSGNO = 0008; /* <--- bottom of data*/
      return;
    else
      SLWREC.SLWDETIX = SLWREC.SLWDETIX + 1;
      TA5REC.TA5TSQIX = SLWREC.SLWDETIX;
      TA5REC.TA5APPID = SLWREC.SLWDETQU;
      TA5REC.TA5FNCCD = "R";
      call "TA0050" (SL0DWD0, TA5REC) {isNoRefresh = yes};
      if (TA5REC.TA5RTNCD != 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SK1E";
        SLWREC.SLWMSGNO = 0001;
        return;
      end
      SL0DSP1(); /* <=== setup left det scrn*/
    end
  end

  if (SLWREC.SLWERRSW == "N")
    SLWREC.XXXLOCID = "SK1F";
    SLWREC.SLWMSGNO = 0013; /* <--- page foreward msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSK1

// PF8 processing
Function SL0DSK3()


   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: IN0XWSKS=N; if fields changed (keys different)****/
   /* ************************************************************/

  SL0DSA3(); /* <=== missing input check*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0DSB3(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "N")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SK3A";
    SLWREC.SLWMSGNO = 0006; /* <--- changes not allowed msg*/
    return;
  end


  if (SLWREC.SLWLASPF == "E")
    if (SLWREC.SLWSUMIX == SLWREC.SLWSMAXR)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SK3B";
      SLWREC.SLWMSGNO = 0008; /* <--- bottom of data*/
      return;
    else
      SLWREC.SLWSUMIX = SLWREC.SLWSUMIX + 1;
      TA5REC.TA5TSQIX = SLWREC.SLWSUMIX;
      TA5REC.TA5APPID = SLWREC.SLWSUMQU;
      TA5REC.TA5FNCCD = "R";
      call "TA0050" (SL0DWS0, TA5REC) {isNoRefresh = yes};
      if (TA5REC.TA5RTNCD != 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SK3C";
        SLWREC.SLWMSGNO = 0001;
        return;
      end
      SL0DSO3(); /* <=== setup left sum scrn*/
    end
  else
    if (SLWREC.SLWDETIX == SLWREC.SLWDMAXR)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SK3D";
      SLWREC.SLWMSGNO = 0008; /* <--- bottom of data*/
      return;
    else
      SLWREC.SLWDETIX = SLWREC.SLWDETIX + 1;
      TA5REC.TA5TSQIX = SLWREC.SLWDETIX;
      TA5REC.TA5APPID = SLWREC.SLWDETQU;
      TA5REC.TA5FNCCD = "R";
      call "TA0050" (SL0DWD0, TA5REC) {isNoRefresh = yes};
      if (TA5REC.TA5RTNCD != 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SK3E";
        SLWREC.SLWMSGNO = 0001;
        return;
      end
      SL0DSP3(); /* <=== setup left det scrn*/
    end
  end

  if (SLWREC.SLWERRSW == "N")
    SLWREC.XXXLOCID = "SK3F";
    SLWREC.SLWMSGNO = 0013; /* <--- page foreward msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSK3

// PF8 processing
Function SL0DSK5()


   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: IN0XWSKS=N; if fields changed (keys different)****/
   /* ************************************************************/

  SL0DSA5(); /* <=== missing input check*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0DSB5(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "N")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SK5A";
    SLWREC.SLWMSGNO = 0006; /* <--- changes not allowed msg*/
    return;
  end


  if (SLWREC.SLWSUMIX == SLWREC.SLWSMAXR)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SK5B";
    SLWREC.SLWMSGNO = 0008; /* <--- bottom of data*/
    return;
  else
    SLWREC.SLWSUMIX = SLWREC.SLWSUMIX + 1;
    TA5REC.TA5TSQIX = SLWREC.SLWSUMIX;
    TA5REC.TA5APPID = SLWREC.SLWSUMQU;
    TA5REC.TA5FNCCD = "R";
    call "TA0050" (SL0DWS0, TA5REC) {isNoRefresh = yes};
    if (TA5REC.TA5RTNCD != 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SK5C";
      SLWREC.SLWMSGNO = 0001;
      return;
    end
    SL0DSO5(); /* <=== setup left sum scrn*/
  end

  if (SLWREC.SLWERRSW == "N")
    SLWREC.XXXLOCID = "SK5F";
    SLWREC.SLWMSGNO = 0013; /* <--- page foreward msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSK5

// setup blank screen
Function SL0DSN1()


   /* ************************************************************/
   /* *** display a blank screen by:                          ****/
   /* *** displaying the left sum title  and                  ****/
   /* *** displaying a blank line                             ****/
   /* *** until the page is full                              ****/
   /* ************************************************************/

  SL0D125(); /* <=== disp left sum title*/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    SL0D129(); /* <=== disp blank line*/
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSN1

// setup blank screen
Function SL0DSN3()


   /* ************************************************************/
   /* *** display a blank screen by:                          ****/
   /* *** displaying the left sum title  and                  ****/
   /* *** displaying a blank line                             ****/
   /* *** until the page is full                              ****/
   /* ************************************************************/

  SL0D325(); /* <=== disp left sum title*/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    SL0D329(); /* <=== disp blank line*/
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSN3

// setup blank screen
Function SL0DSN5()


   /* ************************************************************/
   /* *** display a blank screen by:                          ****/
   /* *** displaying the left sum title  and                  ****/
   /* *** displaying a blank line                             ****/
   /* *** until the page is full                              ****/
   /* ************************************************************/

  SL0D525(); /* <=== disp left sum title*/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    SL0D529(); /* <=== disp blank line*/
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSN5

// setup left sum scrn
Function SL0DSO1()


   /* ************************************************************/
   /* *** setup the left side of the summary data screen by:  ****/
   /* *** displaying the left summary title  and              ****/
   /* *** performing the display of the left summary line     ****/
   /* *** until the page is full                              ****/
   /* ************************************************************/

  SL0D125(); /* <=== disp left sum title*/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    if (SL0DWS0.SL0DWRTY[SLWIDX01] == "S")
      set SL0DM110.XMSLMSEL[SLWIDX01] initialAttributes;
      /* *** format summary line ****/
      SL0DWB1.SL0DWSM1 = SL0DWS0.SL0DWDTA[SLWIDX01];
      SL0D121(); /* <=== disp left sum line*/
    else
      set SL0DM110.XMSLMSEL[SLWIDX01] skip, invisible;
      SL0D129(); /* <=== disp blank line*/
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if error: display the cleared screen                ****/
   /* ************************************************************/

  if (SLWREC.SLWERRSW == "Y")
    SL0DST1(); /* <=== reset screen (empty)*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSO1

// setup left sum scrn
Function SL0DSO3()


   /* ************************************************************/
   /* *** setup the left side of the summary data screen by:  ****/
   /* *** displaying the left summary title  and              ****/
   /* *** performing the display of the left summary line     ****/
   /* *** until the page is full                              ****/
   /* ************************************************************/

  SL0DM310.SL0DMNPD = " "; /* init no pl data msg*/

   /* IF SL0DW03.SL0DWPSW EQ 'XF';      /* stock transfer*/
    /* MOVE 'SHIPPED' TO SL0DM315.SL0DMTTL;*/
    /* MOVE 'SHIPPED' TO SL0DM316.SL0DMTTL;*/
   /* ELSE;*/
   /* IF SL0DW03.SL0DWPSW EQ 'PO';    /* stock transfer*/
     /* MOVE 'PO     ' TO SL0DM315.SL0DMTTL;*/
     /* MOVE 'PO     ' TO SL0DM316.SL0DMTTL;*/
   /* ELSE;*/
  SL0DM315.SL0DMTTL = "PK LIST";
  SL0DM316.SL0DMTTL = "PK LIST";
   /* END;*/
   /* END;*/

  SL0D325(); /* <=== disp left sum title*/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    if (SL0DWS0.SL0DWRTY[SLWIDX01] == "S")
      set SL0DM310.XMSLMSEL[SLWIDX01] initialAttributes;
      /* *** format summary line ****/
      SL0DWB3.SL0DWSM3 = SL0DWS0.SL0DWDTA[SLWIDX01];
      SL0DM311.SL0DMDIF = SL0DWB3.SL0DWRCV - SL0DWB3.SL0DWPKL;
      if (SL0DWB3.SL0DWRCV != SL0DWB3.SL0DWPKL)
        set SL0DM311.SL0DMDIF bold;
        set SL0DM311.SL0DMRCV bold;
        set SL0DM311.SL0DMPKL bold;
      end
      if (SL0DWB3.SL0DWDSW == "Y") /* difference*/
        SL0DM311.SL0DMAS = " "; /* turn off hard err **/
        set SL0DM311.SL0DMAS initialAttributes;
        set SL0DM311.SL0DMRCV bold;
        set SL0DM311.SL0DMPKL bold;
      else
        if (SL0DWB3.SL0DWDSW == "R") /* hard error for product*/
          SL0DM311.SL0DMAS = "*"; /* move * to map*/
          set SL0DM311.SL0DMAS bold; /* turn on * in red*/
          set SL0DM311.SL0DMDIF bold;
          set SL0DM311.SL0DMRCV bold; /* and highlight qtys*/
          set SL0DM311.SL0DMPKL bold;
        else
          SL0DM311.SL0DMAS = " "; /* turn off hard err **/
          set SL0DM311.SL0DMAS initialAttributes;
          if (SL0DWB3.SL0DWRCV == SL0DWB3.SL0DWPKL)
            set SL0DM311.SL0DMRCV initialAttributes;
            set SL0DM311.SL0DMPKL initialAttributes;
            set SL0DM311.SL0DMDIF initialAttributes;
          end
        end
      end
      SL0D321(); /* <=== disp left sum line*/
    else
      set SL0DM310.XMSLMSEL[SLWIDX01] skip, invisible;
      SL0D329(); /* <=== disp blank line*/
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if error: display the cleared screen                ****/
   /* ************************************************************/

  if (SLWREC.SLWERRSW == "Y")
    SL0DST3(); /* <=== reset screen (empty)*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSO3

// setup left sum scrn
Function SL0DSO5()


   /* ************************************************************/
   /* *** setup the left side of the summary data screen by:  ****/
   /* *** displaying the left summary title  and              ****/
   /* *** performing the display of the left summary line     ****/
   /* *** until the page is full                              ****/
   /* ************************************************************/

  SL0D525(); /* <=== disp left sum title*/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    if (SL0DWS0.SL0DWRTY[SLWIDX01] == "S")
      /* *** format summary line ****/
      SL0DWB5.SL0DWSM5 = SL0DWS0.SL0DWDTA[SLWIDX01];
      SL0D521(); /* <=== disp left sum line*/
    else
      SL0D529(); /* <=== disp blank line*/
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if error: display the cleared screen                ****/
   /* ************************************************************/

  if (SLWREC.SLWERRSW == "Y")
    SL0DST5(); /* <=== reset screen (empty)*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSO5

// setup left det scrn
Function SL0DSP1()


  SL0D126(); /* <=== disp left det title*/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    if (SL0DWD0.SL0DWRTY[SLWIDX01] == "S")
      set SL0DM110.XMSLMSEL[SLWIDX01] initialAttributes;
      SL0DWB1.SL0DWSM1 = SL0DWD0.SL0DWDTA[SLWIDX01];
      SL0D121(); /* <=== disp left sum line*/
    else
      if (SL0DWD0.SL0DWRTY[SLWIDX01] == "D")
        set SL0DM110.XMSLMSEL[SLWIDX01] skip, invisible;
        SL0DWB1.SL0DWDT1[1] = SL0DWD0.SL0DWDTA[SLWIDX01];
        SL0D122(); /* <=== disp left det line*/
      else
        if (SL0DWD0.SL0DWRTY[SLWIDX01] == "B")
          set SL0DM110.XMSLMSEL[SLWIDX01] skip, invisible;
          SL0D129(); /* <=== disp blank line*/
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SP1A";
          SLWREC.SLWMSGNO = 0001;
        end
      end
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if error: display the cleared screen                ****/
   /* ************************************************************/

  if (SLWREC.SLWERRSW == "Y")
    SL0DST1(); /* <=== reset screen (empty)*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSP1

// setup left det scrn
Function SL0DSP3()


  SL0D326(); /* <=== disp left det title*/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    if (SL0DWD0.SL0DWRTY[SLWIDX01] == "S")
      set SL0DM310.XMSLMSEL[SLWIDX01] initialAttributes;
      SL0DWB3.SL0DWSM3 = SL0DWD0.SL0DWDTA[SLWIDX01];
      SL0DM311.SL0DMDIF = SL0DWB3.SL0DWRCV - SL0DWB3.SL0DWPKL;
      if (SL0DWB3.SL0DWRCV != SL0DWB3.SL0DWPKL)
        set SL0DM311.SL0DMDIF bold;
      end

      if (SL0DWB3.SL0DWDSW == "Y") /* difference*/
        SL0DM311.SL0DMAS = " "; /* turn off hard err **/
        set SL0DM311.SL0DMAS initialAttributes;
        set SL0DM311.SL0DMRCV bold;
        set SL0DM311.SL0DMPKL bold;
      else
        if (SL0DWB3.SL0DWDSW == "R") /* hard error for product*/
          SL0DM311.SL0DMAS = "*"; /* move * to map*/
          set SL0DM311.SL0DMAS bold; /* turn on * in red*/
          set SL0DM311.SL0DMDIF bold;
          set SL0DM311.SL0DMRCV bold; /* and highlight qtys*/
          set SL0DM311.SL0DMPKL bold;
        else
          SL0DM311.SL0DMAS = " "; /* turn off hard err **/
          set SL0DM311.SL0DMAS initialAttributes;
          set SL0DM311.SL0DMRCV initialAttributes;
          set SL0DM311.SL0DMPKL initialAttributes;
        end
      end

      SL0D321(); /* <=== disp left sum line*/
    else
      if (SL0DWD0.SL0DWRTY[SLWIDX01] == "D")
        set SL0DM310.XMSLMSEL[SLWIDX01] skip, invisible;
        SL0DWB3.SL0DWDT3[1] = SL0DWD0.SL0DWDTA[SLWIDX01];
        SL0D322(); /* <=== disp left det line*/
      else
        if (SL0DWD0.SL0DWRTY[SLWIDX01] == "B")
          set SL0DM310.XMSLMSEL[SLWIDX01] skip, invisible;
          SL0D329(); /* <=== disp blank line*/
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SP3A";
          SLWREC.SLWMSGNO = 0001;
        end
      end
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if error: display the cleared screen                ****/
   /* ************************************************************/

  if (SLWREC.SLWERRSW == "Y")
    SL0DST3(); /* <=== reset screen (empty)*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSP3

// setup sum tsq
Function SL0DSS1()


   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/


   /* *************** format receiving log item rec **************/

  set VRLITM02 empty;
  VRLITM02.XWHCD = SL0DM110.XWHCD;
  VRLITM02.TS3CNTNR = SL0DM110.TS3CNTNR;

   /* XSSL2S2;                     /* select set of receiving log items*/
  XSSLS-S2-VRLITM02(); /* select set of receiving log items*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    set SL0DM110.XWHCD bold;
    set SL0DM110.TS3CNTNR cursor, bold;
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.XXXLOCID = "SS1A";
      SLWREC.SLWMSGNO = 0119; /* <--- no receipt data msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.SLWSKYSW = "N";
      SLWREC.XXXLOCID = "SS1B";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.XXXLOCID = "SS1C";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

  TA1REC.TA1LOCAT[2] = "SL0DSS1 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

   /* *** obtain valid size descriptions ****/

  set SYPREC empty;
  SYPREC.XGPCD = VRLITM02.XGPCD;
  SYPREC.SY1STNBR = VRLITM02.SY1STNBR;
  SYPREC.SY2CLRID = VRLITM02.SY2CLRID;
  SYPREC.XDMCD = VRLITM02.XDMCD;
  SYPREC.XQACD = VRLITM02.XQACD;

  SL0DSAA(); /* perform size translation call*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* *** initialize fields for loop processing ****/

  SLWREC.SLWIDX01 = 1; /* buffer area index*/
  SLWREC.SLWIDX02 = 1; /* detail area index*/
  SLWREC.SLWIDX03 = 1; /* summary area index*/
  SLWREC.SLWIDX06 = 1; /* sizes per line index*/
  SLWREC.SLWIDX04 = SLWREC.SLWLINPP; /* # of available lines*/
  SL0DWB1.SL0DWRCV = 0; /* total received qty*/
  SL0DW01.SL0DWDPA = 1; /* detail page ctr*/
  SL0DW01.SL0DWSPA = 1; /* summary page ctr*/

   /* ************************************************************/
   /* *** process each of this containers' items              ****/
   /* *** note: for each product 'break', save new values     ****/
   /* ************************************************************/

  SL0DS1I(); /* <=== save prod. values*/

   /* *** format the po id/type/nbr for current product ****/
  SL0DW00.XGPCD = VRLITM02.XGPCD; /* pass gpc*/
  SL0DW00.PC3PONBR = VRLITM02.PC3PONBR; /* pass po*/
  SL0DW00.PC-SAP-PO-NBR = VRLITM02.PC-SAP-PO-NBR; /* pass sap po*/
   /* dlvrusa change begin*/
  SL0DW00.XWHCD = VRLITM02.XWHCD; /* pass whse cd*/
   /* dlvrusa change end*/
  SL0DS3O(); /* format po id/type/nbr*/


  while (SQLCA.VAGen_SQLCODE == 0)
     /* ************************************************************/
     /* *** check for product change                            ****/
     /* ************************************************************/
    if (VRLITM02.SL2PALET == SL0DW01.SL2PALET
     && VRLITM02.SL2CASE == SL0DW01.SL2CASE
     && VRLITM02.PC3POIDT == SL0DW01.PC3POIDT
     && VRLITM02.PCFSECD == SL0DW01.PCFSECD
     && VRLITM02.FY1FCTYC == SL0DW01.FY1FCTYC
     && VRLITM02.PC4ORTYP == SL0DW01.PC4ORTYP
     && VRLITM02.PC3PONBR == SL0DW01.PC3PONBR
     && VRLITM02.PC-SAP-PO-NBR == SL0DW01.PC-SAP-PO-NBR
     && VRLITM02.XGPCD == SL0DW01.XGPCD
     && VRLITM02.SY1STNBR == SL0DW01.SY1STNBR
     && VRLITM02.SY2CLRID == SL0DW01.SY2CLRID
     && VRLITM02.XDMCD == SL0DW01.XDMCD
     && VRLITM02.XQACD == SL0DW01.XQACD
     && VRLITM02.XOWCD == SL0DW01.XOWCD
     && VRLITM02.PC2INSEG == SL0DW01.XSDCD
     && VRLITM02.XSLCD == SL0DW01.XSLCD
     && VRLITM02.XEGCD == SL0DW01.XEGCD
     && VRLITM02.XPGCD == SL0DW01.XPGCD
     && VRLITM02.XUMCD == SL0DW01.XUMCD)
       /* ************************************************************/
       /* *** while same product, do the following                ****/
       /* ************************************************************/
      SL0DS1F(); /* <----- format detail buffer*/

    else

      SL0DS1A(); /* product break summary processing*/
      if (SLWREC.SLWERRSW == "Y")
        return;
      end

      SL0DS1E(); /* product break detail processing*/
      if (SLWREC.SLWERRSW == "Y")
        return;
      end

      /* *** reset sl0dwb1 for next group*/
      set SL0DWB1 empty;
      SLWREC.SLWIDX01 = 1; /* buffer index*/
      SLWREC.SLWIDX06 = 1; /* sizes per line index*/
      SL0DS1I(); /* <----- save prod values*/

       /* *** format the po id/type/nbr for current product ****/
      SL0DW00.XGPCD = VRLITM02.XGPCD; /* pass gpc*/
      SL0DW00.PC3PONBR = VRLITM02.PC3PONBR; /* pass po*/
      SL0DW00.PC-SAP-PO-NBR = VRLITM02.PC-SAP-PO-NBR; /* pass sap po*/
       /* dlvrusa change begin*/
      SL0DW00.XWHCD = VRLITM02.XWHCD; /* pass whse cd*/
       /* dlvrusa change end*/
      SL0DS3O(); /* format po id/type/nbr*/

       /* *** obtain valid size descriptions ****/

      set SYPREC empty;
      SYPREC.XGPCD = VRLITM02.XGPCD;
      SYPREC.SY1STNBR = VRLITM02.SY1STNBR;
      SYPREC.SY2CLRID = VRLITM02.SY2CLRID;
      SYPREC.XDMCD = VRLITM02.XDMCD;
      SYPREC.XQACD = VRLITM02.XQACD;

      SL0DSAA(); /* perform size translation call*/

      if (SLWREC.SLWERRSW == "Y")
        return;
      end
      SL0DS1F(); /* <----- format detail buffer*/
    end
    /* XSSL2F2;                     /* select next record*/
    XSSLS-F2-VRLITM02(); /* select next record*/

    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == +100)
       /* ** next sentence ***/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        SLWREC.SLWERRSW = "Y";
        SLWREC.SLWSKYSW = "N";
        SLWREC.XXXLOCID = "SS1E";
        SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
        set SL0DM110.XWHCD bold;
        set SL0DM110.TS3CNTNR cursor, bold;
        return;
      end
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SS1F";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
  end

  if (SQLCA.VAGen_SQLCODE == +100)

     /* *** format the po id/type/nbr for current product ****/
    SL0DW00.XGPCD = VRLITM02.XGPCD; /* pass gpc*/
    SL0DW00.PC3PONBR = VRLITM02.PC3PONBR; /* pass po*/
    SL0DW00.PC-SAP-PO-NBR = VRLITM02.PC-SAP-PO-NBR; /* pass po*/
     /* dlvrusa change begin*/
    SL0DW00.XWHCD = VRLITM02.XWHCD; /* pass whse cd*/
     /* dlvrusa change end*/
    SL0DS3O(); /* format po id/type/nbr*/

    SL0DS1G(); /* last group summary processing*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end

    SL0DS1H(); /* last group detail processing*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0DSS1

// setup sum tsq
Function SL0DSS3()


   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/

  TA1REC.TA1LOCAT[2] = "SL0DSS3 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;


  set VRLCMP02 empty;
  VRLCMP02.XWHCD = SL0DM310.XWHCD;
  VRLCMP02.TSHCNTNR = SL0DM310.TS3CNTNR;

  SL0DSSA(); /* select set of rcpt cmpr*/

  if (SQLCA.VAGen_SQLCODE == 0)
    SL0DW03.SL0DWRLF = "Y"; /* rcpt cmpr data found*/
    SL0DSEA(); /* format rcpt cmpr date on map*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      SL0DW03.SL0DWRLF = "N"; /* rcpt cmpr data not found*/
    else
      SLWREC.SLWERRSW = "Y";
      set SL0DM310.XWHCD bold;
      set SL0DM310.TS3CNTNR cursor, bold;
      if (SQLCA.VAGen_SQLCODE == -911)
        SLWREC.SLWSKYSW = "N";
        SLWREC.XXXLOCID = "SS3A";
        SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
        return;
      end
      SLWREC.XXXLOCID = "SS3B";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
  end


  if (SL0DW03.SL0DWRLF == "Y") /* rcpt cmpr data found*/
    SL0DS3K(); /* process rcpt cmpr data*/
  else
    SLWREC.SLWERRSW = "Y";
    set SL0DM310.XWHCD bold;
    set SL0DM310.TS3CNTNR cursor, bold;
    SLWREC.XXXLOCID = "SS3C";
    SLWREC.SLWMSGNO = 0119; /* <--- no data msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0DSS3

// setinq : rcv compare : 1
Function SL0DSSA()


   /* ************************************************************/
   /* *** select set of rows from:  receiving compare table   ****/
   /* *** using the std module:  VRLCMP02                     ****/
   /* *** note: use VRLCMP02 to pass warehouse & container nbr  ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique field values for:            ****/
   /* ***   xwhcd                                             ****/
   /* ***   ts3cntnr                                          ****/
   /* *** the order by for this select set is:                ****/
   /* ***   pc3ponbr                                          ****/
   /* ***   xgpcd                                             ****/
   /* ***   sy1stnbr                                          ****/
   /* ***   sy2clrid                                          ****/
   /* ***   xdmcd                                             ****/
   /* ***   xqacd                                             ****/
   /* ***   xowcd                                             ****/
   /* ***   pc2inseg                                          ****/
   /* ***   xpgcd                                             ****/
   /* ***   xumcd                                             ****/
   /* ***   xslcd                                             ****/
   /* ************************************************************/


   /* CALL IO4930 'S1',SQLCA,SLKREC (NOMAPS,NONCSP;*/
  call "VRLCMP02" ("S1", SQLCA, VRLCMP02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "SL0DSSA ";
    TA1REC.TA1LOCAT[1] = "VRLCMP02";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VRLCMP02";
    TA1REC.TA1TBLKE = VRLCMP02.TSHCNTNR;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* *** note: fetch handles return code correctly           ****/
   /* ************************************************************/

  SL0DSSB(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSSA

// fetch : rcv compare table
Function SL0DSSB()


   /* ************************************************************/
   /* *** fetch next row from:  receiving compare table       ****/
   /* *** using the std module:  VRLCMP02                     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ***       but w/these io mods the sgrp will close       ****/
   /* ************************************************************/


   /* CALL IO4930 'N1',SQLCA,SLKREC (NOMAPS,NONCSP;*/
  call "VRLCMP02" ("N1", SQLCA, VRLCMP02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    SL0DSSC(); /* <=== std close cursor*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "SL0DSSB ";
  TA1REC.TA1LOCAT[1] = "VRLCMP02";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VRLCMP02";
   /* MOVE SLAREC.SLAKEY TO TA1REC.TA1TBLKE;*/
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSSB

// close : receiving compare
Function SL0DSSC()


   /* ************************************************************/
   /* *** close select set of:  receiving compare             ****/
   /* *** using the std module:  VRLCMP02                     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/


   /* CALL IO4930 'C1',SQLCA,SLKREC (NOMAPS,NONCSP;*/
  call "VRLCMP02" ("C1", SQLCA, VRLCMP02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "SL0DSSC ";
  TA1REC.TA1LOCAT[1] = "VRLCMP02";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VRLCMP02";
  TA1REC.TA1TBLKE = VRLCMP02.TSHCNTNR;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSSC

// reset screen (empty)
Function SL0DST1()


   /* ************************************************************/
   /* *** "empty" map =  fld values only                      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0DM110 empty; /* resets entire screen*/

  SL0DSG1(); /* <=== setup map key fields*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0DM110.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0DM110.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0DM110.XXXTITLE = SLWREC.XXXTITLE;
  SL0DM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set SL0DW01 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** purge any existing storage in case of 'left overs'  ****/
   /* *** note: not found is acceptable return code           ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq(s)*/

   /* ************************************************************/
   /* *** setup the floating map lines for a blank map        ****/
   /* ************************************************************/

  SL0DSN1(); /* <=== setup blank screen*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DST1

// reset screen (empty)
Function SL0DST3()


   /* ************************************************************/
   /* *** "empty" map =  fld values only                      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0DM310 empty; /* resets entire screen*/

  SL0DSG3(); /* <=== setup map key fields*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0DM310.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0DM310.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0DM310.XXXTITLE = SLWREC.XXXTITLE;
  SL0DM310.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set SL0DW03 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** purge any existing storage in case of 'left overs'  ****/
   /* *** note: not found is acceptable return code           ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq(s)*/

   /* ************************************************************/
   /* *** setup the floating map lines for a blank map        ****/
   /* ************************************************************/

  SL0DSN3(); /* <=== setup blank screen*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DST3

// reset screen (empty)
Function SL0DST5()


   /* ************************************************************/
   /* *** "empty" map =  fld values only                      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0DM510 empty; /* resets entire screen*/

  SL0DSG5(); /* <=== setup map key fields*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0DM510.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0DM510.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0DM510.XXXTITLE = SLWREC.XXXTITLE;
  SL0DM510.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set SL0DW05 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** purge any existing storage in case of 'left overs'  ****/
   /* *** note: not found is acceptable return code           ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq(s)*/

   /* ************************************************************/
   /* *** setup the floating map lines for a blank map        ****/
   /* ************************************************************/

  SL0DSN5(); /* <=== setup blank screen*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DST5

// reset screen (empty)
Function SL0DST7()


   /* ************************************************************/
   /* *** "empty" map =  fld values only                      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0DM710 empty; /* resets entire screen*/

  SL0DSG7(); /* <=== setup map key fields*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0DM710.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0DM710.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0DM710.XXXTITLE = SLWREC.XXXTITLE;
  SL0DM710.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set SL0DW07 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DST7

// match det's subkey
Function SL0DSU1()


   /* *******************************************************/
   /* *** obtain summary page number from page number on ****/
   /* *** detail record and then perform call to get the ****/
   /* *** summary record.                                ****/
   /* *******************************************************/

  SLWREC.SLWIDX01 = SLWREC.SLWLINPP;
  SL0DW01.SL0DWSE1 = 1;

   /* *** if selection was made on screen use it,else ****/
   /* *** use first summary line on detail page.      ****/

  while (SLWIDX01 >= 1)
    if (SL0DM110.XMSLMSEL[SLWIDX01] != " ")
      SL0DW01.SL0DWSE1 = SLWREC.SLWIDX01;
    end
    SL0DM110.XMSLMSEL[SLWIDX01] = " ";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end

  TA5REC.TA5TSQIX = SL0DWD0.SL0DWSPG[SL0DWSE1];
  TA5REC.TA5APPID = SLWREC.SLWSUMQU;
  TA5REC.TA5FNCCD = "R";

  call "TA0050" (SL0DWS0, TA5REC) {isNoRefresh = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SU1A";
    SLWREC.SLWMSGNO = 0008;
    return;
  end

  SLWREC.SLWSUMIX = TA5REC.TA5TSQIX;


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSU1

// match det's subkey
Function SL0DSU3()


   /* *******************************************************/
   /* *** obtain summary page number from page number on ****/
   /* *** detail record and then perform call to get the ****/
   /* *** summary record.                                ****/
   /* *******************************************************/

  SLWREC.SLWIDX01 = SLWREC.SLWLINPP;
  SL0DW03.SL0DWSE3 = 1;

   /* *** if selection was made on screen use it,else ****/
   /* *** use first summary line on detail page.      ****/

  while (SLWIDX01 >= 1)
    if (SL0DM310.XMSLMSEL[SLWIDX01] != " ")
      SL0DW03.SL0DWSE3 = SLWREC.SLWIDX01;
      SL0DM310.XMSLMSEL[SLWIDX01] = " ";
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end

  TA5REC.TA5TSQIX = SL0DWD0.SL0DWSPG[SL0DWSE3];
  TA5REC.TA5APPID = SLWREC.SLWSUMQU;
  TA5REC.TA5FNCCD = "R";

  call "TA0050" (SL0DWS0, TA5REC) {isNoRefresh = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SU3A";
    SLWREC.SLWMSGNO = 0008;
    return;
  end

  SLWREC.SLWSUMIX = TA5REC.TA5TSQIX;


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSU3

// key missing input edits
Function SL0DSU7()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (SL0DT07.TARTYPE[TA6INDEX] > " ") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

      if (SL0DT07.TARTYPE[TA6INDEX] == "A") /* first parm*/
        SL0DT07.SL0DWWH2[TA6INDEX] = SL0DM710.XWHCD;
      else
        if (SL0DT07.TARTYPE[TA6INDEX] == "B") /* second parm*/
          SL0DT07.SL0DWWH3[TA6INDEX] = SL0DM710.XWHCD;
        else
          if (SL0DT07.TARTYPE[TA6INDEX] == "C") /* third parm*/
            SL0DT07.SL0DWWH1[TA6INDEX] = SL0DM710.XWHCD;
            SL0DT07.SL0DWCNR[TA6INDEX] = SL0DM710.TS3CNTNR;
          end
        end
      end
      TA6REC.TARJCL[TA6INDEX] = SL0DT07.TARJCL[TA6INDEX]; /* Parameters*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = SL0DT07.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = SL0DT07.TARTYPE[TA6INDEX]; /* Type*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (SL0DT07.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    SLWREC.XXXLOCID = "SU7A"; /* Module identification*/
    SLWREC.SLWERRSW = "Y"; /* trigger error switch*/

  end

  exit stack; /* Exit to display map*/


   /* *************************************************************/
   /* *** end of STATEMENT GROUP                               ****/
   /* *************************************************************/

end // end SL0DSU7

// match sum's subkey
Function SL0DSW1()


   /* ********************************************************/
   /* *** obtain detail page number from page number on   ****/
   /* *** summary record and then perform call to get the ****/
   /* *** detail record.                                  ****/
   /* ********************************************************/

  SLWREC.SLWIDX01 = SLWREC.SLWLINPP;
  SL0DW01.SL0DWSE1 = 1;

   /* *** if selection was made on screen use it,else ****/
   /* *** use first summary line on summary page.     ****/

  while (SLWIDX01 >= 1)
    if (SL0DM110.XMSLMSEL[SLWIDX01] != " ")
      SL0DW01.SL0DWSE1 = SLWREC.SLWIDX01;
    end
    SL0DM110.XMSLMSEL[SLWIDX01] = " ";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end

  TA5REC.TA5TSQIX = SL0DWS0.SL0DWDPG[SL0DWSE1];
  TA5REC.TA5APPID = SLWREC.SLWDETQU;
  TA5REC.TA5FNCCD = "R";

  call "TA0050" (SL0DWD0, TA5REC) {isNoRefresh = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SW1A";
    SLWREC.SLWMSGNO = 0008;
    return;
  end

  SLWREC.SLWDETIX = TA5REC.TA5TSQIX;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSW1

// match sum's subkey
Function SL0DSW3()


   /* ********************************************************/
   /* *** obtain detail page number from page number on   ****/
   /* *** summary record and then perform call to get the ****/
   /* *** detail record.                                  ****/
   /* ********************************************************/

  SLWREC.SLWIDX01 = SLWREC.SLWLINPP;
  SL0DW03.SL0DWSE3 = 1;

   /* *** if selection was made on screen use it,else ****/
   /* *** use first summary line on summary page.     ****/

  while (SLWIDX01 >= 1)
    if (SL0DM310.XMSLMSEL[SLWIDX01] != " ")
      SL0DW03.SL0DWSE3 = SLWREC.SLWIDX01;
    end
    SL0DM310.XMSLMSEL[SLWIDX01] = " ";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end

  TA5REC.TA5TSQIX = SL0DWS0.SL0DWDPG[SL0DWSE3];
  TA5REC.TA5APPID = SLWREC.SLWDETQU;
  TA5REC.TA5FNCCD = "R";

  call "TA0050" (SL0DWD0, TA5REC) {isNoRefresh = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SW3A";
    SLWREC.SLWMSGNO = 0008;
    return;
  end

  SLWREC.SLWDETIX = TA5REC.TA5TSQIX;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSW3

// CAITEM  processing
Function SL0DSY0()


   /* ************************************************************/
   /* *** if entered, use CAITEM data by first moving it to   ****/
   /* *** a ws field to make use of it with "redefines"       ****/
   /* *** note: CAITEM = character data as passed             ****/
   /* ************************************************************/

  SLWREC.CAITEM = COMMAREA.CAITEM;

  if (SLWREC.SLWCASNO > " ")
    SL0DM010.XMSLMSNO = SLWREC.SLWCASNO;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSY0

// CAITEM processing
Function SL0DSY1()


   /* ************************************************************/
   /* *** if entered, use CAITEM data by first moving it to   ****/
   /* *** a ws field to make use of it with "redefines"       ****/
   /* *** note: CAITEM = character data as passed             ****/
   /* ************************************************************/

  SL0DW01.CAITEM = COMMAREA.CAITEM;
  SL0DM110.XWHCD = SL0DW01.SL0DWXWH;
  SL0DM110.TS3CNTNR = SL0DW01.SL0DWXCN;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSY1

// CAITEM processing
Function SL0DSY3()


   /* ************************************************************/
   /* *** if entered, use CAITEM data by first moving it to   ****/
   /* *** a ws field to make use of it with "redefines"       ****/
   /* *** note: CAITEM = character data as passed             ****/
   /* ************************************************************/

  SL0DW03.CAITEM = COMMAREA.CAITEM;
  SL0DM310.XWHCD = SL0DW03.SL0DWXWH;
  SL0DM310.TS3CNTNR = SL0DW03.SL0DWXCN;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSY3

// CAITEM processing
Function SL0DSY7()


   /* ************************************************************/
   /* *** if entered, use CAITEM data by first moving it to   ****/
   /* *** a ws field to make use of it with "redefines"       ****/
   /* *** note: CAITEM = character data as passed             ****/
   /* ************************************************************/

  SL0DW07.CAITEM = COMMAREA.CAITEM;

  if (SL0DW07.SL0DWXWH > " ")
    SL0DM710.XWHCD = SL0DW07.SL0DWXWH;
  end

  if (SL0DW07.SL0DWXCN > " ")
    SL0DM710.TS3CNTNR = SL0DW07.SL0DWXCN;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0DSY7

// close : rcv log hdr : 1
Function XSSL1C1()


   /* ************************************************************/
   /* *** close select set of:  receiving log hdr             ****/
   /* *** using the std module:  IO1570                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "C1";

  call "IO1570" (SLVREC, SQLCA, SL1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSL1C1 ";
  TA1REC.TA1LOCAT[1] = "IO1570  ";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VRLHDR01";
  TA1REC.TA1TBLKE = SL1REC.SL1KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSL1C1

// fetch : rcv log hdr : 1
Function XSSL1F1()


   /* ************************************************************/
   /* *** fetch next row from:  receiving log hdr             ****/
   /* *** using the std module:  IO1570                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ***       but w/these io mods the sgrp will close       ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "N1";

  call "IO1570" (SLVREC, SQLCA, SL1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    XSSL1C1(); /* <=== std close cursor*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSL1F1 ";
  TA1REC.TA1LOCAT[1] = "IO1570  ";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VRLHDR01";
  TA1REC.TA1TBLKE = SL1REC.SL1KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSL1F1

// setinq : rcv log hdr : 1
Function XSSL1S1()


   /* ************************************************************/
   /* *** select set of rows from:  receiving log hdr         ****/
   /* *** using the std module:  IO1570                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique field values for:            ****/
   /* ***   xwhcd                                             ****/
   /* *** the following must have range values:               ****/
   /* ***   sl1crtdt  (use slvrec)                            ****/
   /* *** the following may be used with a wild card (*):     ****/
   /* ***   yrscd                                             ****/
   /* *** the order by for this select set is:                ****/
   /* ***   xwhcd                                             ****/
   /* ***   yrscd                                             ****/
   /* ***   sl1crtdt                                          ****/
   /* ************************************************************/

  SLVFNC = "S1";

  call "IO1570" (SLVREC, SQLCA, SL1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "XSSL1S1 ";
    TA1REC.TA1LOCAT[1] = "IO1570  ";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VRLHDR01";
    TA1REC.TA1TBLKE = SL1REC.SL1KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* *** note: fetch handles return code correctly           ****/
   /* ************************************************************/

  XSSL1F1(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSL1S1

// close : rcv log itm : 2
Function XSSLS-C2-VRLITM02()


   /* ************************************************************/
   /* *** close select set of:  receiving log itm             ****/
   /* *** using the std module:  VRLITM02                     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  SLSREC.SLSFNC = "C2";

   /* CALL IO1580 SLSREC,SQLCA,SL2REC (NOMAPS,NONCSP;*/
  call "VRLITM02" (SLSREC, SQLCA, VRLITM02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSLS-C2-VRLITM02";
  TA1REC.TA1LOCAT[1] = "VRLITM02";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VRLITM02";
  TA1REC.TA1TBLKE = VRLITM02.VRLITM02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSLS-C2-VRLITM02

// fetch : rcv log itm : 2
Function XSSLS-F2-VRLITM02()


   /* ************************************************************/
   /* *** fetch next row from:  receiving log itm             ****/
   /* *** using the std module:  VRLITM02                     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ************************************************************/

  SLSREC.SLSFNC = "N2";

   /* CALL IO1580 SLSREC,SQLCA,SL2REC (NOMAPS,NONCSP;*/
  call "VRLITM02" (SLSREC, SQLCA, VRLITM02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
   /* XSSL2C2;                       /* <=== std close cursor*/
    XSSLS-C2-VRLITM02(); /* <=== std close cursor*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSLS-F2-VRLITM02";
  TA1REC.TA1LOCAT[1] = "VRLITM02";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VRLITM02";
  TA1REC.TA1TBLKE = VRLITM02.VRLITM02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSLS-F2-VRLITM02

// setinq : rcv log itm : 2
Function XSSLS-S2-VRLITM02()


   /* ************************************************************/
   /* *** select set of rows from:  receiving log itm         ****/
   /* *** using the std module:  VRLITM02                     ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique field values for:            ****/
   /* ***   xwhcd                                             ****/
   /* ***   ts3cntnr                                          ****/
   /* *** the following may be used with a wild card (*):     ****/
   /* ***   none                                              ****/
   /* *** the order by for this select set is:                ****/
   /* ***   xwhcd                                             ****/
   /* ***   ts3cntnr                                          ****/
   /* ***   sl2palet                                          ****/
   /* ***   sl2case                                           ****/
   /* ***   pd1ponbr                                          ****/
   /* ***   xgpcd                                             ****/
   /* ***   sy1stnbr                                          ****/
   /* ***   sy2clrid                                          ****/
   /* ***   xdmcd                                             ****/
   /* ***   xqacd                                             ****/
   /* ***   xsdcd                                             ****/
   /* ***   xsacd                                             ****/
   /* ***   xpgcd                                             ****/
   /* ***   xumcd                                             ****/
   /* ***   xowcd                                             ****/
   /* ***   xslcd                                             ****/
   /* ***   sy5szid                                           ****/
   /* ************************************************************/

  SLSREC.SLSFNC = "S2";

   /* CALL IO1590   SLSREC,SQLCA,SL2REC (NOMAPS,NONCSP;*/
  call "VRLITM02" (SLSREC, SQLCA, VRLITM02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "XSSLS-S2-VRLITM02";
    TA1REC.TA1LOCAT[1] = "VRLITM02";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VRLITM02";
    TA1REC.TA1TBLKE = VRLITM02.VRLITM02-KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* *** note: fetch handles reurn codes correctly           ****/
   /* ************************************************************/

   /* XSSL2F2;                     /* <=== fetch first row*/
  XSSLS-F2-VRLITM02(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSLS-S2-VRLITM02

//*** RECORD=SL0DW00 ****
// -------------------------------------------
// Application working storage.
//     Includes fields accessed by more than
//     one apllication function.
// -------------------------------------------
// ***********************
Record SL0DW00 type basicRecord
  10 XGPCD XGPCD ; 
  10 PC3PONBR PC3PONBR ; 
  10 XWHCD XWHCD ; 
  10 PC-SAP-PO-NBR PC-SAP-PO-NBR ; 
  10 SL0DWPON SL0DWPON ; 
  10 SL0DWPDF SL0DWPDF ; 
  10 SL0DWFPO SL0DWFPO ; 
    15 SL0DWFPI SL0DWFPI ; 
      20 SL0DWFSC SL0DWFSC ; 
        25 SL0DWFS1 SL0DWFS1 ; 
        25 SL0DWFS2 SL0DWFS2 ; 
      20 SL0DWFMR SL0DWFMR ; 
        25 SL0DWFMM SL0DWFMM ; 
        25 SL0DWFDD SL0DWFDD ; 
      20 SL0DWFFT SL0DWFFT ; 
    15 SL0DWFPT SL0DWFPT ; 
    15 SL0DWFPN SL0DWFPN ; 
  10 SL0DWWSN SL0DWWSN ; 
    15 SL0DWWS1 SL0DWWS1 ; 
    15 SL0DWWS2 SL0DWWS2 ; 
  10 SL0DWWMR SL0DWWMR ; 
    15 * num(1) ; 
    15 SL0DWWCC SL0DWWCC ; 
    15 SL0DWWYY SL0DWWYY ; 
    15 SL0DWWMM SL0DWWMM ; 
    15 SL0DWWDD SL0DWWDD ; 
  10 SL0DWWDX SL0DWWDX ; 
  10 SL0DWWGP SL0DWWGP ; 
    15 SL0DWCHR SL0DWCHR [10] ; 
end // end SL0DW00

//*** RECORD=SL0DW01 ****
// ************************************************************
// 
//           STOCK LOCATE INQUIRY SKELETON
//           =============================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used specifically
//           by an application/function.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-87  Ward Jones   created
// 11-16-89  ryonke       added fields for phase iv db2 changes
// 10-21-90  jmoore       changed xsacd to xegcd
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0DW01 type basicRecord
  10 SL0DWLK1 SL0DWLK1 ; 
    15 XWHCD XWHCD ; 
    15 TS3CNTNR TS3CNTNR ; 
  10 SL0DWPK1 SL0DWPK1 ; 
    15 SL2PALET SL2PALET ; 
    15 SL2CASE SL2CASE ; 
    15 PD1PONBR PD1PONBR ; 
    15 PC3POIDT PC3POIDT ; 
    15 PCFSECD PCFSECD ; 
    15 FY1FCTYC FY1FCTYC ; 
    15 PC4ORTYP PC4ORTYP ; 
    15 PC3PONBR PC3PONBR ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 XOWCD XOWCD ; 
    15 XSDCD XSDCD ; 
    15 XEGCD XEGCD ; 
    15 XSLCD XSLCD ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
  10 SL0DWSL1 SL0DWSL1 ; 
    15 SL0DWSRT SL0DWSRT ; 
    15 SL0DWROW SL0DWROW ; 
    15 * char(89) ; 
  10 SL0DWDL1 SL0DWDL1 ; 
    15 SL0DWDRT SL0DWDRT ; 
    15 * char(92) ; 
  10 SL0DWSS1 SL0DWSS1 ; 
    15 SL0DWSRO SL0DWSRO ; 
  10 SL0DWDS1 SL0DWDS1 ; 
    15 SL0DWDRO SL0DWDRO ; 
  10 CAITEM CAITEM ; 
    15 SL0DWXWH SL0DWXWH ; 
    15 SL0DWXCN SL0DWXCN ; 
    15 * char(4) ; 
  10 SL0DWDPA SL0DWDPA ; 
  10 SL0DWSPA SL0DWSPA ; 
  10 SL0DWSE1 SL0DWSE1 ; 
  10 SL0DWSID SL0DWSID ; 
  10 SL0HWNDX SL0HWNDX ; 
  10 SL0DWMPO SL0DWMPO ; 
  10 PC-SAP-PO-NBR PC-SAP-PO-NBR ; 
end // end SL0DW01

//*** RECORD=SL0DW02 ****
// ************************************************************
// 
//           STOCK LOCATE INQUIRY SKELETON
//           =============================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used specifically
//           by an application/function.
// 
// NOTE: change literal 1 to 4 characters and
//       change literal 2 to 31 characters
//       when jobname not begining with userid not needed
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-87  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0DW02 type basicRecord
  10 SL0DWLK2 SL0DWLK2 ; 
    15 XWHCD XWHCD ; 
  10 CAUSERID CAUSERID ; 
    15 SL0DWUSR SL0DWUSR ; 
    15 * char(2) ; 
  10 SL0DWJOB SL0DWJOB ; 
    15 SL0DWLT1 SL0DWLT1 ; 
    15 SL0DWUID SL0DWUID ; 
    15 SL0DWLT2 SL0DWLT2 ; 
    15 * char(39) ; 
  10 SL0DWLIN SL0DWLIN ; 
    15 SL0DWWHS SL0DWWHS ; 
    15 TS3CNTNR TS3CNTNR ; 
    15 * char(64) ; 
  10 SL0DWOUT SL0DWOUT ; 
    15 SL0DWLT3 SL0DWLT3 ; 
    15 SL0DWPID SL0DWPID ; 
    15 * char(42) ; 
  10 XROPDEST XROPDEST [6] ; 
end // end SL0DW02

//*** RECORD=SL0DW03 ****
// ************************************************************
// 
//           STOCK LOCATE INQUIRY SKELETON
//           =============================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used specifically
//           by an application/function.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-87  Ward Jones   created
// 11-16-89  ryonke       added fields for phase iv db2 changes
// 10-21-90  jmoore       changed xsacd to xegcd
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0DW03 type basicRecord
  10 SL0DWLK3 SL0DWLK3 ; 
    15 XWHCD XWHCD ; 
    15 TS3CNTNR TS3CNTNR ; 
  10 SL0DWPK3 SL0DWPK3 ; 
    15 PD1PONBR PD1PONBR ; 
    15 PC3POIDT PC3POIDT ; 
    15 PCFSECD PCFSECD ; 
    15 FY1FCTYC FY1FCTYC ; 
    15 PC4ORTYP PC4ORTYP ; 
    15 PC3PONBR PC3PONBR ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 XOWCD XOWCD ; 
    15 XSDCD XSDCD ; 
    15 XSLCD XSLCD ; 
    15 XEGCD XEGCD ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
  10 IN7STNBR IN7STNBR ; 
  10 SL0DWSL3 SL0DWSL3 ; 
    15 SL0DWSRT SL0DWSRT ; 
    15 SL0DWROW SL0DWROW ; 
    15 * char(89) ; 
  10 SL0DWDL3 SL0DWDL3 ; 
    15 SL0DWDRT SL0DWDRT ; 
    15 * char(92) ; 
  10 SL0DWSS3 SL0DWSS3 ; 
    15 SL0DWSRO SL0DWSRO ; 
  10 SL0DWDS3 SL0DWDS3 ; 
    15 SL0DWDRO SL0DWDRO ; 
  10 CAITEM CAITEM ; 
    15 SL0DWXWH SL0DWXWH ; 
    15 SL0DWXCN SL0DWXCN ; 
    15 * char(4) ; 
  10 SL0DWDPA SL0DWDPA ; 
  10 SL0DWSPA SL0DWSPA ; 
  10 SL0DWSE3 SL0DWSE3 ; 
  10 SL0DWSID SL0DWSID ; 
  10 VAGen_SQLCODE VAGen_SQLCODE ; 
  10 SL0DWRLF SL0DWRLF ; 
  10 SL0DWPLF SL0DWPLF ; 
  10 SL0DWPSW SL0DWPSW ; 
  10 SL0DWCPO SL0DWCPO ; 
    15 SL0DWCPI SL0DWCPI ; 
      20 SL0DWCSC SL0DWCSC ; 
        25 SL0DWCS1 SL0DWCS1 ; 
        25 SL0DWCS2 SL0DWCS2 ; 
      20 SL0DWCMR SL0DWCMR ; 
        25 SL0DWCMM SL0DWCMM ; 
        25 SL0DWCDD SL0DWCDD ; 
      20 SL0DWCFT SL0DWCFT ; 
    15 SL0DWCPT SL0DWCPT ; 
    15 SL0DWCPN SL0DWCPN ; 
  10 SL0DWPPO SL0DWPPO ; 
    15 SL0DWPPI SL0DWPPI ; 
      20 SL0DWPSC SL0DWPSC ; 
        25 SL0DWPS1 SL0DWPS1 ; 
        25 SL0DWPS2 SL0DWPS2 ; 
      20 SL0DWPMR SL0DWPMR ; 
        25 SL0DWPMM SL0DWPMM ; 
        25 SL0DWPDD SL0DWPDD ; 
      20 SL0DWPFT SL0DWPFT ; 
    15 SL0DWPPT SL0DWPPT ; 
    15 SL0DWPPN SL0DWPPN ; 
  10 SL0DWPRP SL0DWPRP ; 
  10 SL0DMCHC SL0DMCHC ; 
  10 SL0DWSIZ SL0DWSIZ ; 
  10 SL0DWHES SL0DWHES ; 
  10 SL0DWMHE SL0DWMHE ; 
  10 SL0DWWPL SL0DWWPL ; 
  10 SL0DWNDX SL0DWNDX ; 
  10 XRECD XRECD ; 
  10 SL0DWNPD SL0DWNPD ; 
  10 SL0DWLLF SL0DWLLF ; 
  10 SL0DWSXR SL0DWSXR ; 
  10 SL0DWPMD SL0DWPMD ; 
    15 SL0DWPGC SL0DWPGC ; 
    15 SL0DWPGY SL0DWPGY ; 
    15 SL0DWPGM SL0DWPGM ; 
    15 SL0DWPGD SL0DWPGD ; 
  10 SL0DWCPL SL0DWCPL ; 
  10 SL0DWWRK SL0DWWRK ; 
  10 PC-SAP-PO-NBR PC-SAP-PO-NBR ; 
end // end SL0DW03

//*** RECORD=SL0DW04 ****
// ************************************************************
// 
//           STOCK LOCATE INQUIRY SKELETON
//           =============================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used specifically
//           by an application/function.
// 
// NOTE: change literal 1 to 4 characters and
//       change literal 2 to 31 characters
//       when jobname not begining with userid not needed
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-87  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0DW04 type basicRecord
  10 SL0DWLK4 SL0DWLK4 ; 
    15 XWHCD XWHCD ; 
  10 CAUSERID CAUSERID ; 
    15 SL0DWUSR SL0DWUSR ; 
    15 * char(2) ; 
  10 SL0DWJOB SL0DWJOB ; 
    15 SL0DWLT1 SL0DWLT1 ; 
    15 SL0DWUID SL0DWUID ; 
    15 SL0DWLT2 SL0DWLT2 ; 
    15 * char(39) ; 
  10 SL0DWLIN SL0DWLIN ; 
    15 SL0DWWHS SL0DWWHS ; 
    15 TS3CNTNR TS3CNTNR ; 
    15 * char(64) ; 
  10 SL0DWOUT SL0DWOUT ; 
    15 SL0DWLT3 SL0DWLT3 ; 
    15 SL0DWPID SL0DWPID ; 
    15 * char(42) ; 
  10 XROPDEST XROPDEST [6] ; 
end // end SL0DW04

//*** RECORD=SL0DW05 ****
// ************************************************************
// 
//           STOCK LOCATE INQUIRY SKELETON
//           =============================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used specifically
//           by an application/function.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-87  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0DW05 type basicRecord
  10 SL0DWLK5 SL0DWLK5 ; 
    15 XWHCD XWHCD ; 
    15 TS3CNTNR TS3CNTNR ; 
  10 YRSCD YRSCD ; 
  10 CAITEM CAITEM ; 
    15 SL0DWXWH SL0DWXWH ; 
    15 SL0DWXCN SL0DWXCN ; 
    15 SWEPLLNB SWEPLLNB ; 
  10 SL0DWSPA SL0DWSPA ; 
  10 VAGen_SQLCODE VAGen_SQLCODE ; 
  10 SL0DWRCV SL0DWRCV ; 
end // end SL0DW05

//*** RECORD=SL0DW06 ****
// ************************************************************
// 
//           STOCK LOCATE INQUIRY SKELETON
//           =============================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used specifically
//           by an application/function.
// 
// NOTE: change literal 1 to 4 characters and
//       change literal 2 to 31 characters
//       when jobname not begining with userid not needed
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-87  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0DW06 type basicRecord
  10 SL0DWLK6 SL0DWLK6 ; 
    15 XWHCD XWHCD ; 
  10 CAUSERID CAUSERID ; 
    15 SL0DWUSR SL0DWUSR ; 
    15 * char(2) ; 
  10 SL0DWJOB SL0DWJOB ; 
    15 SL0DWLT1 SL0DWLT1 ; 
    15 SL0DWUID SL0DWUID ; 
    15 SL0DWLT2 SL0DWLT2 ; 
    15 * char(39) ; 
  10 SL0DWLIN SL0DWLIN ; 
    15 SL0DWWHS SL0DWWHS ; 
    15 TS3CNTNR TS3CNTNR ; 
    15 * char(64) ; 
  10 SL0DWOUT SL0DWOUT ; 
    15 SL0DWLT3 SL0DWLT3 ; 
    15 SL0DWPID SL0DWPID ; 
    15 * char(42) ; 
  10 XROPDEST XROPDEST [6] ; 
end // end SL0DW06

//*** RECORD=SL0DW07 ****
// ************************************************************
// 
//           STOCK LOCATE MAINTENANCE SKELETON
//           =================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used for specific
//           application/function purposes.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-86  Ward Jones   created
// 09-23-88  Ward Jones   added (time) update type flag
// 01-31-90  rob yonker   added batch submit update switch
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0DW07 type basicRecord
  10 SL0DWLK7 SL0DWLK7 ; 
    15 XWHCD XWHCD ; 
    15 TS3CNTNR TS3CNTNR ; 
    15 XOWCD XOWCD ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 XSDCD XSDCD ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
    15 SY5SZID SY5SZID ; 
    15 XSLCD XSLCD ; 
  10 SL0DWDOC SL0DWDOC ; 
    15 * char(8) ; 
    15 IN5TRPRT IN5TRPRT ; 
  10 SL0DWSZT SL0DWSZT ; 
  10 SL0DWSZQ SL0DWSZQ ; 
  10 CAITEM CAITEM ; 
    15 SL0DWXWH SL0DWXWH ; 
    15 SL0DWXCN SL0DWXCN ; 
    15 * char(4) ; 
  10 INBSAQTG INBSAQTG ; 
    15 INBSAQTY INBSAQTY [40] ; 
  10 IN6TQTS IN6TQTS ; 
    15 IN6TQT IN6TQT [40] ; 
  10 SL0DWGRP SL0DWGRP ; 
    15 IN8SRQ IN8SRQ [40] ; 
  10 SL0DWDTE SL0DWDTE ; 
    15 SL0DWCCC SL0DWCCC ; 
    15 SL0DWSDT SL0DWSDT ; 
  10 IN7STNBR IN7STNBR ; 
  10 SL0DWNUM SL0DWNUM ; 
    15 SL0DWCHA SL0DWCHA ; 
  10 SL0DWSAI SL0DWSAI ; 
  10 SL0DWUFL SL0DWUFL ; 
  10 XSNBDT XSNBDT ; 
  10 XSECD XSECD ; 
  10 XSNYR XSNYR ; 
  10 SL0DWSYR SL0DWSYR ; 
  10 SL0DWFL1 SL0DWFL1 ; 
  10 SL0DWFL2 SL0DWFL2 ; 
  10 SL0DWFL3 SL0DWFL3 ; 
  10 SL0DWFL4 SL0DWFL4 ; 
  10 SL0DWFL6 SL0DWFL6 ; 
  10 SL0DW1DT SL0DW1DT ; 
    15 SL0DW0DT SL0DW0DT ; 
    15 SL0DW2DT SL0DW2DT ; 
  10 SL0DW3DT SL0DW3DT [8] ; 
  10 SL0DW4DT SL0DW4DT [8] ; 
  10 SL0DWQTY SL0DWQTY ; 
  10 XLCCD XLCCD ; 
  10 SL0DWUPS SL0DWUPS ; 
end // end SL0DW07

//*** RECORD=SL0DWB1 ****
//  1  10/21/90  jmoore  changed xsacd to xegcd
// ***********************
Record SL0DWB1 type basicRecord
  10 SL0DWSM1 SL0DWSM1 ; 
    15 SL2PALET SL2PALET ; 
    15 SL2CASE SL2CASE ; 
    15 SL0DWMPO SL0DWMPO ; 
    15 SL0DWFPT SL0DWFPT ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 XSDCD XSDCD ; 
    15 XEGCD XEGCD ; 
    15 XSLCD XSLCD ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
    15 XOWCD XOWCD ; 
    15 SL0DWRCV SL0DWRCV ; 
    15 * char(1) ; 
  10 SL0DWDT1 SL0DWDT1 [10] ; 
    15 SL0DWSZ1 SL0DWSZ1 ; 
    15 SL0DWQY1 SL0DWQY1 ; 
    15 SL0DWSZ2 SL0DWSZ2 ; 
    15 SL0DWQY2 SL0DWQY2 ; 
    15 SL0DWSZ3 SL0DWSZ3 ; 
    15 SL0DWQY3 SL0DWQY3 ; 
    15 SL0DWSZ4 SL0DWSZ4 ; 
    15 SL0DWQY4 SL0DWQY4 ; 
end // end SL0DWB1

//*** RECORD=SL0DWB3 ****
//   1   10/21/90  jmoore   changed xsacd to xegcd
// ***********************
Record SL0DWB3 type basicRecord
  10 SL0DWSM3 SL0DWSM3 ; 
    15 SL0DWMPO SL0DWMPO ; 
    15 SL0DWFPT SL0DWFPT ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 XSDCD XSDCD ; 
    15 XEGCD XEGCD ; 
    15 XSLCD XSLCD ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
    15 XOWCD XOWCD ; 
    15 SL0DWRCV SL0DWRCV ; 
    15 SL0DWPKL SL0DWPKL ; 
    15 SL0DWDSW SL0DWDSW ; 
  10 SL0DWDT3 SL0DWDT3 [13] ; 
    15 SL0DWSZ1 SL0DWSZ1 ; 
    15 SL0DWRC1 SL0DWRC1 ; 
    15 SL0DWPL1 SL0DWPL1 ; 
    15 SL0DWSZ2 SL0DWSZ2 ; 
    15 SL0DWRC2 SL0DWRC2 ; 
    15 SL0DWPL2 SL0DWPL2 ; 
    15 SL0DWSZ3 SL0DWSZ3 ; 
    15 SL0DWRC3 SL0DWRC3 ; 
    15 SL0DWPL3 SL0DWPL3 ; 
end // end SL0DWB3

Record SL0DWB5 type basicRecord
  10 SL0DWSM5 SL0DWSM5 ; 
    15 TS3CNTNR TS3CNTNR ; 
    15 SWEPLLNB SWEPLLNB ; 
    15 YRSCD YRSCD ; 
    15 SL1RCRNO SL1RCRNO ; 
    15 SL0DWCRT SL0DWCRT ; 
    15 SL0DWUDT SL0DWUDT ; 
    15 SL0DWRCV SL0DWRCV ; 
end // end SL0DWB5

Record SL0DWD0 type basicRecord
  10 SL0DWLTH SL0DWLTH ; 
  10 * char(68) [15] ; 
    15 SL0DWRTY SL0DWRTY ; 
    15 SL0DWSPG SL0DWSPG ; 
    15 SL0DWDTA SL0DWDTA ; 
end // end SL0DWD0

Record SL0DWPB type basicRecord
  10 SL0DWDTL SL0DWDTL [40] ; 
    15 SL0DWSZ SL0DWSZ ; 
    15 SL0DWRC SL0DWRC ; 
    15 SL0DWPL SL0DWPL ; 
end // end SL0DWPB

Record SL0DWS0 type basicRecord
  10 SL0DWLTH SL0DWLTH ; 
  10 * char(68) [15] ; 
    15 SL0DWRTY SL0DWRTY ; 
    15 SL0DWDPG SL0DWDPG ; 
    15 SL0DWDTA SL0DWDTA ; 
end // end SL0DWS0

//*** RECORD=SLTREC ****
// *************** stock locate IO module record **************
// 
// PUROSE:              passes the desired function and
//                      beginning & ending values for carton
//                      in the packing list item row
// 
// DB2 TABLE:           dstloc.vplitm01
// 
// COPYLIB MEMBER:      none
// 
// KEY TO DB2 TABLE:    none
// 
// note:                passes: function code
//                              beginning carton
//                              ending carton
// 
// MAINTENANCE LOG:
// 
// DATE:      INIT:    COMMENTS:
// --------   -------  -------------------------------------
// 07-20-87   w.jones  created csp record
// ************************************************************
// **********************
Record SLTREC type basicRecord
  10 SLTFNC SLTFNC ; 
  10 SLTBCRTN SLTBCRTN ; 
  10 SLTECRTN SLTECRTN ; 
end // end SLTREC

//*** RECORD=VRLCMP02 ****
// ******************** stock locate table ********************
// 
// TABLE NAME:             receiving comparison
// 
// DB2 TABLE:              dstloc.vrlcmp01
// 
// COPYLIB MEMBER:         dcl00809
// 
// KEY TO DB2 TABLE:       xwhcd
//                         tshcntnr
//                         pc3ponbr
//                         xgpcd
//                         sy1stnbr
//                         syclrid
//                         xdmcd
//                         xqacd
//                         xowcd
//                         pc2inseg
//                         xpgcd
//                         xumcd
//                         xslcd
// 
// MAINTENANCE LOG:
// 
// DATE      NAME    COMMENTS
// --------  ------  ------------------------------------------
// 03/29/90  ESMITH  Created CSP record
// 10/02/90  ryonke  added fields for new apparel warehouse
// 02/22/94  ryonke  added fields for table changes
// 
// ************************************************************
// ************************
Record VRLCMP02 type basicRecord
  10 XWHCD XWHCD ; 
  10 TSHCNTNR TSHCNTNR ; 
  10 SWEPLLNB SWEPLLNB ; 
  10 XARCD XARCD ; 
  10 SL4ZONE SL4ZONE ; 
  10 SL5LOCTN SL5LOCTN ; 
  10 SL2PALET SL2PALET ; 
  10 SL2CASE SL2CASE ; 
  10 TSOCRTNB TSOCRTNB ; 
  10 PC3PONBR PC3PONBR ; 
  10 PC-SAP-PO-NBR PC-SAP-PO-NBR ; 
  10 SLKPROD SLKPROD ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 XOWCD XOWCD ; 
    15 PC2INSEG PC2INSEG ; 
    15 XEGCD XEGCD ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
    15 XSLCD XSLCD ; 
  10 SL-ALT-XOW-CD SL-ALT-XOW-CD ; 
  10 XRECD XRECD ; 
  10 INASAID INASAID ; 
  10 SL2RCVD SL2RCVD [40] ; 
  10 TSOSHPQT TSOSHPQT [40] ; 
  10 PC7ORDEQ PC7ORDEQ [40] ; 
  10 PCMRCPTQ PCMRCPTQ [40] ; 
  10 ZZZCHGDT ZZZCHGDT ; 
  10 ZZZCHGTM ZZZCHGTM ; 
  10 ZZZCHGCT ZZZCHGCT ; 
end // end VRLCMP02

// packlist or po choice
DataItem SL0DMCHC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// leading zero
DataItem SL0DW0DT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date (0ccyymmdd)
DataItem SL0DW1DT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date (ccyymmdd)
DataItem SL0DW2DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin date for compare
DataItem SL0DW3DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end date for compare
DataItem SL0DW4DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date century (CC)
DataItem SL0DWCCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// curr mo range dd
DataItem SL0DWCDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// curr factory cd
DataItem SL0DWCFT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// character stock xfer no.
DataItem SL0DWCHA char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po char
DataItem SL0DWCHR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// curr mo range mm
DataItem SL0DWCMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// curr mo range
DataItem SL0DWCMR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current po id
DataItem SL0DWCPI char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// chk tot pklist qty - po option
DataItem SL0DWCPL num(8)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// current po nbr
DataItem SL0DWCPN char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current po id/type/nbr
DataItem SL0DWCPO char(21)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current po type
DataItem SL0DWCPT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date received at warehouse
DataItem SL0DWCRT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// curr sesn cd byte 1
DataItem SL0DWCS1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// curr sesn cd byte 2
DataItem SL0DWCS2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current sesn cd
DataItem SL0DWCSC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// detail data line
DataItem SL0DWDL1 char(93)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// detail data line
DataItem SL0DWDL3 char(93)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// audit tran doc nbr (num)
DataItem SL0DWDOC num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// detail page ctr
DataItem SL0DWDPA num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// detail page number
DataItem SL0DWDPG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// det subkey row no.
DataItem SL0DWDRO num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// det record type
DataItem SL0DWDRT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// detail subkey
DataItem SL0DWDS1 char(3)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// detail subkey
DataItem SL0DWDS3 char(3)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// quantity difference switch
DataItem SL0DWDSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// detail line data
DataItem SL0DWDT1 char(48)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// detail line data
DataItem SL0DWDT3 char(57)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// actual detail data
DataItem SL0DWDTA char(63)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current date (CCYYMMDD)
DataItem SL0DWDTE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// detail line data
DataItem SL0DWDTL char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// mo range dd
DataItem SL0DWFDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted fact cd
DataItem SL0DWFFT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season control flag
DataItem SL0DWFL6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// mo range mm
DataItem SL0DWFMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted mo range
DataItem SL0DWFMR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted po id
DataItem SL0DWFPI char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted po nbr
DataItem SL0DWFPN char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted po id/type/nbr
DataItem SL0DWFPO char(21)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted po type
DataItem SL0DWFPT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sesn cd byte 1
DataItem SL0DWFS1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sesn cd byte 2
DataItem SL0DWFS2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted sesn cd
DataItem SL0DWFSC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// all audit stock xfer qtys
DataItem SL0DWGRP char(160)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hard error switch: prod sas
DataItem SL0DWHES char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jobname
DataItem SL0DWJOB char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// instream jcl data line
DataItem SL0DWLIN char(80)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// complete last key
DataItem SL0DWLK1 char(16)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// complete last key
DataItem SL0DWLK2 char(2)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// complete last key
DataItem SL0DWLK3 char(16)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

DataItem SL0DWLK4 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// complete last key
DataItem SL0DWLK5 char(16)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

DataItem SL0DWLK6 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// complete last key
DataItem SL0DWLK7 char(45)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// last line formatted switch
DataItem SL0DWLLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal 1
DataItem SL0DWLT1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal 2
DataItem SL0DWLT2 char(33)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal 3
DataItem SL0DWLT3 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data length
DataItem SL0DWLTH num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map hard err sw: prod sas
DataItem SL0DWMHE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formatted po
DataItem SL0DWMPO char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size index
DataItem SL0DWNDX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// no pklist data switch
DataItem SL0DWNPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// numeric stock xfer no.
DataItem SL0DWNUM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// output (dest id) line
DataItem SL0DWOUT char(80)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// prev mo range dd
DataItem SL0DWPDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po disp fl (id or no)
DataItem SL0DWPDF char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prev factory cd
DataItem SL0DWPFT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prev mo group century
DataItem SL0DWPGC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prev mo group day
DataItem SL0DWPGD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prev mo group month
DataItem SL0DWPGM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prev mo group year
DataItem SL0DWPGY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// remote printer id
DataItem SL0DWPID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product key (no size)
DataItem SL0DWPK1 char(67)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product key (no size)
DataItem SL0DWPK3 char(54)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tot pklst/po qty for compare
DataItem SL0DWPKL num(8)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// pklst qty for size
DataItem SL0DWPL num(7)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// pklst qty for size
DataItem SL0DWPL1 num(7)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// pklst qty for size
DataItem SL0DWPL2 num(7)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// pklst qty for size
DataItem SL0DWPL3 num(7)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// pack lst items found
DataItem SL0DWPLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// previous month date
DataItem SL0DWPMD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prev mo range mm
DataItem SL0DWPMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prev mo range
DataItem SL0DWPMR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// numeric po
DataItem SL0DWPON num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// previous po id
DataItem SL0DWPPI char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// previous po nbr
DataItem SL0DWPPN char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// previous po id/type/nbr
DataItem SL0DWPPO char(21)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// previous po type
DataItem SL0DWPPT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// previous rlcmp product
DataItem SL0DWPRP char(27)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prev sesn cd byte 1
DataItem SL0DWPS1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prev sesn cd byte 2
DataItem SL0DWPS2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current sesn cd
DataItem SL0DWPSC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// process sw (pl/po/xf)
DataItem SL0DWPSW char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// qty work field
DataItem SL0DWQTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// rcvd qty for size
DataItem SL0DWQY1 num(7)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// rcvd qty for size
DataItem SL0DWQY2 num(7)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// rcvd qty for size
DataItem SL0DWQY3 num(7)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// rcvd qty for size
DataItem SL0DWQY4 num(7)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// rcvd qty for size
DataItem SL0DWRC num(7)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// rcvd qty for size
DataItem SL0DWRC1 num(7)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// rcvd qty for size
DataItem SL0DWRC2 num(7)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// rcvd qty for size
DataItem SL0DWRC3 num(7)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// tot rcvd qty for line item
DataItem SL0DWRCV num(8)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// recv log items found
DataItem SL0DWRLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// row no.
DataItem SL0DWROW num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// record type
DataItem SL0DWRTY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// numeric setaside id
DataItem SL0DWSAI num(13)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date (YYMMDD)
DataItem SL0DWSDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save selection entered
DataItem SL0DWSE1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save selection entered
DataItem SL0DWSE3 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size id
DataItem SL0DWSID smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// size subscript
DataItem SL0DWSIZ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// summary line data
DataItem SL0DWSL1 char(93)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// summary line data
DataItem SL0DWSL3 char(93)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// summary line data
DataItem SL0DWSM1 char(64)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// summary line data
DataItem SL0DWSM3 char(59)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work record for level 5
DataItem SL0DWSM5 char(48)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// summary page ctr
DataItem SL0DWSPA num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// corresponding summary page
DataItem SL0DWSPG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sum subkey row no.
DataItem SL0DWSRO num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sum record type
DataItem SL0DWSRT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// summary subkey
DataItem SL0DWSS1 char(3)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// summary subkey
DataItem SL0DWSS3 char(3)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// save area for xre code
DataItem SL0DWSXR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work season year
DataItem SL0DWSYR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size description
DataItem SL0DWSZ char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size description
DataItem SL0DWSZ1 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size description
DataItem SL0DWSZ2 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size description
DataItem SL0DWSZ3 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size description
DataItem SL0DWSZ4 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size qty accumulator (sas)
DataItem SL0DWSZQ num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// size qty accumulator
DataItem SL0DWSZT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// date qty updated
DataItem SL0DWUDT char(8)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// do online updates flag(y/n)
DataItem SL0DWUFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// user id for job name
DataItem SL0DWUID char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// batch submit update sw
DataItem SL0DWUPS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// user id for job name
DataItem SL0DWUSR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work mo rng century
DataItem SL0DWWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work mo rng day
DataItem SL0DWWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work index
DataItem SL0DWWDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work group for po nbr
DataItem SL0DWWGP char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warehouse code
DataItem SL0DWWHS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work mo rng month
DataItem SL0DWWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work mo rng area
DataItem SL0DWWMR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work area for pklist qty
DataItem SL0DWWPL int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work area to calculate differ
DataItem SL0DWWRK num(8)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// season code byte 1
DataItem SL0DWWS1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season code byte 2
DataItem SL0DWWS2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work season code area
DataItem SL0DWWSN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work mo rng year
DataItem SL0DWWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cont for sel
DataItem SL0DWXCN char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// whse for sel
DataItem SL0DWXWH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// beginning p.l. carton no.
DataItem SLTBCRTN char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ending p.l. carton no.
DataItem SLTECRTN char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// IO module function
DataItem SLTFNC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

