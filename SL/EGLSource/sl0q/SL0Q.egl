package sl0q;
import corpcom1.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import pc.common.*;
import pk.common.*;
import pw.common.*;
import rd.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=SL0Q ****
// This application displays the Report Request Menu screen and
// all subordinate report specification screens.
// 
// The menu is displayed for the user to select the reports to
// be printed.  Another available selection allows the user to
// view the available printers and change the remote printer
// destination.
// 
// Job Control Language statements are formatted and submitted
// through the Internal Reader Transient Data Queue (INTR).
// The job executes in batch and all output is routed to the
// remote destination specified through this application.
// 
// The JCL for each job is stored as a table.
// There are two formats available for a JCL statement.
// They are either a fixed or a variable format.
// 
// A fixed statement is identified in the table by a blank JCL
// statement type (SL0QTTYP).  These statements are written
// directly to the internal reader with no changes.
// 
// Variable statements are those that contain data that may
// change each time the job is submitted.  They are identified
// by a non-blank statement type.  The type determines the data
// that is to be substituted and the columns into which it is
// to be placed, as follows:
// 
// sl0qTTYP        JCL statement        Variable        Columns
// --------        -------------        --------        -------
//    E                EXEC             SL0QWexe         16-21
//    g            GDG parameter        SL0QWgen         21-22
//    J                JOB              SL0QWUID          5-10
//    N  (Test only)  NOTIFY            SL0QWUID         23-28
//    O               OUTPUT            SL0QMRMT         32-36
//                    "    "            SL0QMCPY           45
//    P             Parameters          SL0QWJCL          1-80
//    W            WHSE parameter       xwhcd            22-23
// 
// The data in working storage is substituted and the statement
// is written to the internal reader.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, from the menu, only.
// 
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// 06/30/88   mmoreh   New application copied from TS0H.
// 11/10/88   jwood    added xssegtr sgrp
// 05/07/90   kande1   changed container validation in the
//                     container product report to go against
//                     the container table vcntnr01. also, chg
//                     the job submit routine to use the new
//                     programs using the new databases.
// 06/21/90   kande1   add option 6 work order labels create
//                     and print
// 07/23/90   ryonke   change work order label print logic
// 10/09/90   sjohns   xrocd increased to 4 bytes so end of
//                     table now 9999
// 04/14/91   ryonke   change option 6 to process work orders
//                     for whse '51'
// SL#0     10/09/91  SPOPA   Change "Allow Implicits" to NO.
// SL#0     10/22/91  DPETTI  Changed SL0QT08 to call SL3146.
// SL#0     01/17/92  JWOOD   initialize w/s
//          01/22/92  SHENDE  Removed USER= and PASSWORD=
// sl#0     02/14/92  ryonke  set up to run for warehouse '04'
// sl#0     03/26/92  kande1  retrofit chgs for warehouse '04'
// sl#0     06/29/92  kande1  LETUP    chgs for warehouse '04'
// it036027 07/28/92  kande1  add check of slpgm table to see
//                            if replenishment label creat is
//                            already running before allowing
//                            the submit of manual label creat
// 02RETRO  07/31/92  kande1  RETROFIT CHANGES FOR WHSE '02'
// SL#00    09/29/92  kande1  ADD AUTO LETUP FOR WHSE '02','07'
// SL428    08/20/93  GRAY    ADD CALL TO PKPGM TO SEE IF SAME-
//                            DAY IS RUNNIG, ERROR IF SO.
// SL430    08/30/93  GRAY    add to menu 2 new reports.
// cspv4    09/30/93  GRAY    conversion stuff.
// SL405    11/30/93  RYONKE  ADDED MANUAL/REPLENISHMENT OPTION
//                            FOR MEMPHIS APPAREL.
// ASW001   10/19/95  OVAZQU  For whse '51', on the work order
//                            labels create and print screen
//                            add a selection field for either
//                            apparel or visual merchandise
//                            products, edit and pass info in
//                            parm to corresponding batch jobs.
// CANADA   12/01/95  PJAMES  Added code to handle the canadian
//                            warehouse.
// CANADA   12/19/95  PJAMES  Changed jcl tables for warehouse
//                            42.
// ASW001   04/01/96  KHEINA  For whse '51', add processing
//                            to print documents for single
//                            carton moves separately.
// BASICS   04/30/97  KHEINA  Add processing to print Basics
//                            case work orders. Submit proc
//                            Sl3159. See Sl0qm006, Sl0q066.
//                            Add table Sl0qt0v for Basics.
// TT15364  12/03/01  RBALAM  SL0Q044, SL0QS10, SL0QS20 ARE
//                            MODIFIED TO VERIFY THE CONTAINER
//                            AGAINST DSTLOC.VRCVSH01 INSTEAD
//                            OF DTRANS.VCNTNR01.
//                            THE SL6REC IN
//                            SL0QS-IO1470-CH,SL0QS-IO1470-C2
//                            SL0QS-IO1470-NH,SL0QS-IO1470-N2
//                            SL0QS-IO1470-SH,SL0QS-IO1470-S2
//                            IS REPLACED WITH VSYLOC02 AS
//                            RECORD STRUCTURE HAS BEEN
//                            CHANGED.
// *********************
Program SL0Q type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PWHREC PWHREC; // record
  SL0QW00 SL0QW00; // record
  SL0QW01 SL0QW01; // record
  SL0QW02 SL0QW02; // record
  SL0QW03 SL0QW03; // record
  SL0QW04 SL0QW04; // record
  SL0QW05 SL0QW05; // record
  SL0QW06 SL0QW06; // record
  SL0QW07 SL0QW07; // record
  SL0QW08 SL0QW08; // record
  SL0QW99 SL0QW99; // record
  SL0QW9G SL0QW9G { redefines = SL0QW99 } ; // record
  SL0QW9J SL0QW9J { redefines = SL0QW99 } ; // record
  SL0QW9N SL0QW9N { redefines = SL0QW99 } ; // record
  SL0QW9O SL0QW9O { redefines = SL0QW99 } ; // record
  SL0QW9W SL0QW9W { redefines = SL0QW99 } ; // record
  SL8REC SL8REC; // record
  SLBREC SLBREC; // record
  SLWREC SLWREC; // record
  SQLCA SQLCA; // record
  SW2REC SW2REC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  TSHREC TSHREC; // record
  UT1REC UT1REC; // record
  UT2REC UT2REC; // record
  VRCVSH01 VRCVSH01; // record
  VSYLOC02 VSYLOC02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use SL0QT02; // table
  use SL0QT03; // table
  use SL0QT04; // table
  use SL0QT05; // table
  use SL0QT06; // table
  use SL0QT07; // table
  use SL0QT08; // table
  use SL0QT09; // table
  use SL0QT0A; // table
  use SL0QT0B; // table
  use SL0QT0C; // table
  use SL0QT0D; // table
  use SL0QT0E; // table
  use SL0QT0F; // table
  use SL0QT0G; // table
  use SL0QT0H; // table
  use SL0QT0I; // table
  use SL0QT0J; // table
  use SL0QT0K; // table
  use SL0QT0L; // table
  use SL0QT0M; // table
  use SL0QT0N; // table
  use SL0QT0P; // table
  use SL0QT0Q {deleteAfterUse = yes}; // table
  use SL0QT0R {deleteAfterUse = yes}; // table
  use SL0QT0S {deleteAfterUse = yes}; // table
  use SL0QT0T {deleteAfterUse = yes}; // table
  use SL0QT0U {deleteAfterUse = yes}; // table
  use SL0QT0V {deleteAfterUse = yes}; // table
  use XROTBL; // table
  use XWHTBL; // table
  use SL0QM.SL0QM001,  // forms
      SL0QM.SL0QM002, 
      SL0QM.SL0QM003, 
      SL0QM.SL0QM004, 
      SL0QM.SL0QM005, 
      SL0QM.SL0QM006, 
      SL0QM.SL0QM007, 
      SL0QM.SL0QM008, 
      SL0QM.SL0QM099
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    SL0Q001: SL0Q001();
     /* ------------------------------------------------------------*/
     /* Flow to execute the Stock Locate Report Request process.*/
     /* ------------------------------------------------------------*/

    goto SL0Q002; /* Stock Locate Report Request*/


    SL0Q002: SL0Q002();
     /* ------------------------------------------------------------*/
     /* Flow to execute the Stock Locate Report Request process.*/
     /* ------------------------------------------------------------*/

    goto SL0Q002; /* Stock Locate Report Request*/


  end // end main
end // end SL0Q

// Look for Existing Pgm Cntl Rec
Function SL0Q-067()
   /* ------------------------------------------------------------*/
   /* Initialize the subroutine work record.*/
   /* ------------------------------------------------------------*/

  set SW2REC empty; /* clear Subroutine work record*/

  SW2REC.XWHCD = SL0QM006.XWHCD; /* warehouse*/
  SW2REC.XXXPGMNB = "SL333D"; /* program name*/

   /* ------------------------------------------------------------*/
   /* Perform 'select set' function to see if a pgm control record*/
   /* with a commit count of 1  exists in VSLPGM01 for the replen-*/
   /* ishment program sl333d and the current whse.  We do not*/
   /* want SL0Q to proceed with submitting JCL if there's a*/
   /* Replenishment Label create job already in progress.*/
   /* ------------------------------------------------------------*/
  try
    call "IO5700" ("S1", SQLCA, SW2REC) {isNoRefresh = yes, isExternal = yes};
  end /* select set*/

  if (sysVar.errorCode == "00000000") /* call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /**/
      try
        call "IO5700" ("N1", SQLCA, SW2REC) {isNoRefresh = yes, isExternal = yes};
      end /* FETCH*/

      if (sysVar.errorCode == "00000000") /* call successful*/
        if (SQLCA.VAGen_SQLCODE == 0 /* row already exists*/
         || SQLCA.VAGen_SQLCODE == 100) /* row not found*/
          if (SQLCA.VAGen_SQLCODE == 0
           && SW2REC.XXXCMTCT == 1) /* commit count 1 means repln*/
           /* work order labels in process*/
            converseLib.validationFailed(429); /* resources unavailable*/
          end

          try
            call "IO5700" ("C1", SQLCA, SW2REC) {isNoRefresh = yes, isExternal = yes};
          end /* FETCH*/

          if (sysVar.errorCode == "00000000") /* call successful*/
            if (SQLCA.VAGen_SQLCODE == 0) /**/
              return; /* return to previous process*/
            end
          end
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user;*/
   /* otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SL0QM006.XXXPRCNM = "SL0Q-067"; /* PROCESS NAME*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Resources unavailable*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Error - notify programming*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET VSLPGM01 ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = "SL0Q-067"; /* Module identification*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Database name*/
  TA1REC.TA1TBLVU = "VSLPGM01"; /* Table view name*/
  TA1REC.TA1TBLKE = SW2REC.SW2KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SL0Q-067

// product qty by product report
Function SL0Q-07000()
   /* ------------------------------------------------------------*/
   /* Format and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process the valid input request.*/
   /* ------------------------------------------------------------*/

  SL0Q-07100(); /* Format and display the map*/

  SL0Q-07200(); /* Check attention identifier*/

  SL0Q-07300(); /* Reset fields to normal intensity*/

  SL0Q-07400(); /* Verify the entered data*/

  SL0Q-07500(); /* Process valid input request*/


end // end SL0Q-07000

// Format and display the map
Function SL0Q-07100()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

   /* Current date*/
    SL0QM007.XXX-CURR-DT = VGVar.currentShortGregorianDate;
    if (SL0QW00.SL0QMCPY == 0)
      SL0QM007.SL0QMCPY = 1; /* copies*/
    else
      SL0QM007.SL0QMCPY = SL0QW00.SL0QMCPY; /* copies*/
    end

    SL0QM007.XWH-WHSE-CD = SL0QW01.XWHCD; /* Warehouse code*/
    SL0QM007.XURDEST = SL0QW01.SL0QMRMT; /* Printer*/
    SL0QM007.XRODESC = SL0QW01.SL0QMDES; /* Description*/

    if (SL0QW01.SL0QWMNO == 0 /* THIS HAPPENS FIRST TIME THROUGH..*/
     || SL0QW01.SL0QWMNO == 59) /* OR SUCCESSFUL JOB SUBMISSION.*/
      SL0Q-07110(); /* SET-UP DEFAULT PRODUCT CODES.*/
    end

    if (SL0QW01.SL0QWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(SL0QW01.SL0QWMNO);
    end /* Job submitted message number*/
    SL0QW01.SL0QWMNO = 0; /* Reset message number*/

  else

    set SL0QM007 alarm; /* Indicate sound alarm*/

  end

  converse SL0QM007 ;


end // end SL0Q-07100

// SET UP PRODUCT CODE DEFAULTS
Function SL0Q-07110()
   /* ------------------------------------------------------------*/
   /* SET-UP PRODUCT CODE DEFAULTS BASES ON WHSE CODE (GPC),*/
   /* AND OR DATA PASSED VIA SLWREC.*/
   /* ------------------------------------------------------------*/

  SL0QW01.SL0QWIXM = 1; /* set up loop*/

  while (SL0QW01.SL0QWIXM <= 13)
    SL0QM007.XGP-GPC-CD[SL0QWIXM] = SLWREC.XGPCD;
    SL0QM007.SY-COLR-CD-ID[SL0QWIXM] = "00 ";
    SL0QM007.XDM-DIM-CD[SL0QWIXM] = "00";
    SL0QM007.XQA-QUAL-CD[SL0QWIXM] = "01";
    SL0QM007.XOW-OWN-GRP-CD[SL0QWIXM] = "00";
    SL0QM007.PC-CU-IN-SEG-CD[SL0QWIXM] = "000";
    SL0QM007.XEG-ENGR-DIFF-CD[SL0QWIXM] = "000";
    SL0QM007.XUM-UOM-CD[SL0QWIXM] = "01";
    SL0QM007.XSL-CLASS-CD[SL0QWIXM] = "000";
    SL0QW01.SL0QWIXM = SL0QW01.SL0QWIXM + 1;
  end

  if (SL0QW01.SL0QWMNO != 0) /* RETURN IF NOT VERY FIRST TIME THROUGH.*/
    return;
  end

  if (SLWREC.SY1STNBR > "      ")
    SL0QM007.SY-STY-NBR[1] = SLWREC.SY1STNBR;
  end

  if (SLWREC.SY2CLRID > "   ")
    SL0QM007.SY-COLR-CD-ID[1] = SLWREC.SY2CLRID;
  end

  if (SLWREC.XDMCD > "  ")
    SL0QM007.XDM-DIM-CD[1] = SLWREC.XDMCD;
  end

  if (SLWREC.XQACD > "  ")
    SL0QM007.XQA-QUAL-CD[1] = SLWREC.XQACD;
  end

  if (SLWREC.XOWCD > "  ")
    SL0QM007.XOW-OWN-GRP-CD[1] = SLWREC.XOWCD;
  end

  if (SLWREC.PC2INSEG > "  ")
    SL0QM007.PC-CU-IN-SEG-CD[1] = SLWREC.PC2INSEG;
  end

  if (SLWREC.XEG-ENGR-DIFF-CD > "   ")
    SL0QM007.XEG-ENGR-DIFF-CD[1] = SLWREC.XEG-ENGR-DIFF-CD;
  end

  if (SLWREC.XUMCD > "  ")
    SL0QM007.XUM-UOM-CD[1] = SLWREC.XUMCD;
  end

  if (SLWREC.XSLCD > "   ")
    SL0QM007.XSL-CLASS-CD[1] = SLWREC.XSLCD;
  end

end // end SL0Q-07110

// Check attention identifier
Function SL0Q-07200()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    SL0QW01.SL0QMSEL[7] = "C"; /* Indicate selection cancelled*/
    set SL0QM007 initial; /* Clear map output area*/
    exit stack; /* Exit to display next map*/

  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    SL0QW01.SL0QMSEL[7] = "*"; /* Indicate selection cancelled*/
    set SL0QM007 initial; /* Clear map output area*/
    exit stack; /* Exit to display selection menu*/

  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    SL0QM007.XXX-ERR-ID = "07200-A"; /* Process name*/

    if (converseVar.eventKey is pakey) /* PA was pressed*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    exit stack; /* Exit to redisplay map*/

  end


end // end SL0Q-07200

// Reset highlighted fields
Function SL0Q-07300()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SL0QM007.SL0QMCPY initialAttributes; /* Number of copies*/
  SL0QW01.SL0QWIXM = 1;
  while (SL0QW01.SL0QWIXM <= 13)
    set SL0QM007.XGP-GPC-CD[SL0QWIXM] initialAttributes;
    set SL0QM007.SY-STY-NBR[SL0QWIXM] initialAttributes;
    set SL0QM007.SY-COLR-CD-ID[SL0QWIXM] initialAttributes;
    set SL0QM007.XDM-DIM-CD[SL0QWIXM] initialAttributes;
    set SL0QM007.XQA-QUAL-CD[SL0QWIXM] initialAttributes;
    set SL0QM007.XOW-OWN-GRP-CD[SL0QWIXM] initialAttributes;
    set SL0QM007.PC-CU-IN-SEG-CD[SL0QWIXM] initialAttributes;
    set SL0QM007.XEG-ENGR-DIFF-CD[SL0QWIXM] initialAttributes;
    set SL0QM007.XUM-UOM-CD[SL0QWIXM] initialAttributes;
    set SL0QM007.XSL-CLASS-CD[SL0QWIXM] initialAttributes;
    SL0QW01.SL0QWIXM = SL0QW01.SL0QWIXM + 1;
  end


end // end SL0Q-07300

// Verify the entered data
Function SL0Q-07400()
   /* -----------------------------------------------------------*/
   /* VALIDATE PRODUCT CODES THAT WERE ENTERED AGAINST THE*/
   /* DSTLOC.VSYLOC01 TABLE.*/
   /* SEVERE DB2 ERRORS ARE HANDLED IN THE IOMOD STATEMENT*/
   /* GROUPS.*/
   /* -----------------------------------------------------------*/

  SL0QW01.SL0QWSWA = "N"; /* DATA ENTERED FLAG*/
  SL0QW01.SL0QWIXM = 13; /* MAX NBR OF DETAIL ON MAP*/

  while (SL0QW01.SL0QWIXM > 0)
    if (SL0QM007.SY-STY-NBR[SL0QWIXM] > "      ") /* IF STYLE entered*/
      SL0QW01.SL0QWSWA = "Y"; /* DATA ENTERED FLAG*/
      SL0QS-IO1470-S2(); /* DECLARE AND OPEN SYLOC*/
      SL0QS-IO1470-N2(); /* FETCH ROW(S)*/
      if (SQLCA.VAGen_SQLCODE == 100)
        SL0QM007.XXX-ERR-ID = "07400-A"; /**/
        converseLib.validationFailed(75); /* NOT FOUND ON SYLOC*/
        set SL0QM007.XGP-GPC-CD[SL0QWIXM] cursor, bold; /**/
        set SL0QM007.SY-STY-NBR[SL0QWIXM] bold; /**/
        set SL0QM007.SY-COLR-CD-ID[SL0QWIXM] bold; /**/
      else /* OK, CONTINUE UNTIL DONE*/
      end
      SL0QS-IO1470-C2(); /* CLOSE CURSOR*/
    end
    SL0QW01.SL0QWIXM = SL0QW01.SL0QWIXM - 1;
  end /* END WHILE*/

  if (SL0QW01.SL0QWSWA == "N") /* NO DATA ENTERED*/
    SL0QM007.XXX-ERR-ID = "07400-B"; /**/
    converseLib.validationFailed(0009); /* MISSING REQUIRED FIELD*/
    set SL0QM007.XGP-GPC-CD[1] cursor, bold; /**/
    set SL0QM007.SY-STY-NBR[1] bold; /**/
    set SL0QM007.SY-COLR-CD-ID[1] bold; /**/
  end

   /* ------------------------------------------------------------*/
   /* Verify the number of copies to be printed.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (SL0QM007.SL0QMCPY == 0) /* Number of copies invalid*/
    set SL0QM007.SL0QMCPY cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(11); /* Indicate invalid number*/
    SL0QM007.XXX-ERR-ID = "07400-C"; /**/
  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    exit stack; /* Exit to redisplay map*/

  end


end // end SL0Q-07400

// Process valid input request
Function SL0Q-07500()
   /* ------------------------------------------------------------*/
   /* Enque the internal reader for job submission.*/
   /* Submit the job control through the internal reader.*/
   /* Deque the internal reader after job submission.*/
   /* Indicate that the selected function is completed.*/
   /* ------------------------------------------------------------*/

  set SL0QW00 empty; /* Initialize variables work area*/
  set SL0QW07 empty; /* Initialize variables work area*/

  SL0QW00.SL0QMCPY = SL0QM007.SL0QMCPY; /* Number of copies*/

  SL0QW07.XWH-WHSE-CD = SL0QM007.XWH-WHSE-CD; /* warehouse code*/

  SL0Q026(); /* Enque the internal reader*/

  SL0QW01.SL0QWSWS = "N"; /* SET TO 'Y' IN SL0Q027 WHEN /*EOF*/
                                   /* FOUND.*/

  while (SL0QW01.SL0QWSWS == "N") /* Until job is submitted*/
    SL0QW99.SL0QWJCL = SL0QT0N.SL0QWJCL[SL0QWIXT]; /* JCL statement*/
    SL0QW01.SL0QTTYP = SL0QT0N.SL0QTTYP[SL0QWIXT]; /* Statement type*/
    if (SL0QW01.SL0QTTYP == "P") /* Parameters statement*/
      SL0QW01.SL0QWIXM = 1; /* Initialize map from index*/
      while (SL0QW01.SL0QWIXM <= 13) /* Until all lines processed*/
        if (SL0QM007.SY-STY-NBR[SL0QWIXM] > "      ") /* BUILD A PARM  ?*/
          SL0QW07.XWH-WHSE-CD = SL0QM007.XWH-WHSE-CD;
          SL0QW07.XGP-GPC-CD = SL0QM007.XGP-GPC-CD[SL0QWIXM];
          SL0QW07.SY-STY-NBR = SL0QM007.SY-STY-NBR[SL0QWIXM];
          SL0QW07.SY-COLR-CD-ID = SL0QM007.SY-COLR-CD-ID[SL0QWIXM];
          SL0QW07.XDM-DIM-CD = SL0QM007.XDM-DIM-CD[SL0QWIXM];
          SL0QW07.XQA-QUAL-CD = SL0QM007.XQA-QUAL-CD[SL0QWIXM];
          SL0QW07.XOW-OWN-GRP-CD = SL0QM007.XOW-OWN-GRP-CD[SL0QWIXM];
          SL0QW07.PC-CU-IN-SEG-CD = SL0QM007.PC-CU-IN-SEG-CD[SL0QWIXM];
          SL0QW07.XEG-ENGR-DIFF-CD = SL0QM007.XEG-ENGR-DIFF-CD[SL0QWIXM];
          SL0QW07.XUM-UOM-CD = SL0QM007.XUM-UOM-CD[SL0QWIXM];
          SL0QW07.XSL-CLASS-CD = SL0QM007.XSL-CLASS-CD[SL0QWIXM];
          SL0QW00.SL0QWJCL = SL0QW07.SL0QWJCL; /* PARM CARD*/
          SL0Q027(); /* Write to the internal reader*/
          SL0QW01.SL0QWIXT = SL0QW01.SL0QWIXT - 1; /* HOLD POSITION IN*/
        end /* JCL TABLE UNTIL MAP IS DUMPED INTO*/
                                  /* PARM CARDS. SL0Q027 ADDS 1 TO INDEX.*/
        SL0QW01.SL0QWIXM = SL0QW01.SL0QWIXM + 1; /* BUMP MAP INDEX*/
      end
      SL0QW01.SL0QWIXT = SL0QW01.SL0QWIXT + 1; /* Continue with JCL table*/
    else
      SL0Q027(); /* Write to the internal reader*/
    end
  end

  SL0Q028(); /* Deque the internal reader*/

  SL0QW01.SL0QWMNO = 59; /* Job was submitted*/
   /* MOVE '*' TO SL0QW01.SL0QMSEL(7); /* Indicate function completed*/

  set SL0QM007 initial; /* Clear map output area*/

  exit stack;
end // end SL0Q-07500

// product qty by location report
Function SL0Q-08000()
   /* ------------------------------------------------------------*/
   /* Format and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process the valid input request.*/
   /* ------------------------------------------------------------*/

  SL0Q-08100(); /* Format and display the map*/

  SL0Q-08200(); /* Check attention identifier*/

  SL0Q-08300(); /* Reset fields to normal intensity*/

  SL0Q-08400(); /* Verify the entered data*/

  SL0Q-08500(); /* Process valid input request*/


end // end SL0Q-08000

// Format and display the map
Function SL0Q-08100()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

   /* Current date*/
    SL0QM008.XXX-CURR-DT = VGVar.currentShortGregorianDate;
    if (SL0QW00.SL0QMCPY == 0)
      SL0QM008.SL0QMCPY = 1; /* copies*/
    else
      SL0QM008.SL0QMCPY = SL0QW00.SL0QMCPY; /* copies*/
    end
    SL0QM008.XWH-WHSE-CD = SL0QW01.XWHCD; /* Warehouse code*/
    SL0QM008.XURDEST = SL0QW01.SL0QMRMT; /* Printer*/
    SL0QM008.XRODESC = SL0QW01.SL0QMDES; /* Description*/

    if (SL0QW01.SL0QWMNO == 0) /* THIS HAPPENS FIRST TIME THROUGH..*/
      SL0Q-08110(); /* SET-UP DEFAULT location.*/
    end

    if (SL0QW01.SL0QWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(SL0QW01.SL0QWMNO);
    end /* Job submitted message number*/
    SL0QW01.SL0QWMNO = 0; /* Reset message number*/

  else

    set SL0QM008 alarm; /* Indicate sound alarm*/

  end

  converse SL0QM008 ;


end // end SL0Q-08100

// SET UP PASSED AREA/ZONE/LOCATI
Function SL0Q-08110()
   /* ------------------------------------------------------------*/
   /* SET-UP LOCATION PASSED VIA SLWREC.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.XAR-AREA-CD > "  ")
    SL0QM008.XAR-AREA-CD[1] = SLWREC.XAR-AREA-CD;
  end

  if (SLWREC.SL-ZONE-CD > "  ")
    SL0QM008.SL-ZONE-CD[1] = SLWREC.SL-ZONE-CD;
  end

  if (SLWREC.SL-LOC-CD > "      ")
    SL0QM008.SL-LOC-CD[1] = SLWREC.SL-LOC-CD;
  end

end // end SL0Q-08110

// Check attention identifier
Function SL0Q-08200()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    SL0QW01.SL0QMSEL[8] = "C"; /* Indicate selection cancelled*/
    set SL0QM008 initial; /* Clear map output area*/
    exit stack; /* Exit to display next map*/

  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    SL0QW01.SL0QMSEL[8] = "*"; /* Indicate selection completed*/
    set SL0QM008 initial; /* Clear map output area*/
    exit stack; /* Exit to display selection menu*/
  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    SL0QM008.XXX-ERR-ID = "08200-A"; /* Process name*/

    if (converseVar.eventKey is pakey) /* PA was pressed*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    exit stack; /* Exit to redisplay map*/

  end


end // end SL0Q-08200

// Reset highlighted fields
Function SL0Q-08300()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SL0QM008.SL0QMCPY initialAttributes; /* Number of copies*/
  SL0QW01.SL0QWIXM = 1;
  while (SL0QW01.SL0QWIXM <= 8)
    set SL0QM008.XAR-AREA-CD[SL0QWIXM] initialAttributes;
    set SL0QM008.SL-ZONE-CD[SL0QWIXM] initialAttributes;
    set SL0QM008.SL-LOC-CD[SL0QWIXM] initialAttributes;
    SL0QW01.SL0QWIXM = SL0QW01.SL0QWIXM + 1;
  end


end // end SL0Q-08300

// Verify the entered data
Function SL0Q-08400()
   /* -----------------------------------------------------------*/
   /* VALIDATE LOCATION THAT WERE ENTERED AGAINST THE*/
   /* DSTLOC.VSYLOC01 TABLE.*/
   /* SEVERE DB2 ERRORS ARE HANDLED IN THE IOMOD STATEMENT*/
   /* GROUPS.*/
   /* -----------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Verify that all locations entered are really out there.*/
   /* ------------------------------------------------------------*/
  SL0QW01.SL0QWSWA = "N"; /* DATA ENTERED FLAG*/
  SL0QW01.SL0QWIXM = 9; /* MAX NBR OF DETAIL ON MAP*/

  while (SL0QW01.SL0QWIXM > 0)
    if (SL0QM008.XAR-AREA-CD[SL0QWIXM] > "  " /**/
     || SL0QM008.SL-ZONE-CD[SL0QWIXM] > "  "  /**/
     || SL0QM008.SL-LOC-CD[SL0QWIXM] > "      ") /**/
      SL0QW01.SL0QWSWA = "Y"; /* DATA ENTERED FLAG*/
      SL0QS-IO1470-SH(); /* DECLARE AND OPEN SYLOC*/
      SL0QS-IO1470-NH(); /* FETCH ROW(S)*/
      if (SQLCA.VAGen_SQLCODE == 100)
        SL0QM008.XXX-ERR-ID = "08400-A"; /**/
        converseLib.validationFailed(78); /* NOT FOUND ON SYLOC*/
        set SL0QM008.XAR-AREA-CD[SL0QWIXM] cursor, bold; /**/
        set SL0QM008.SL-ZONE-CD[SL0QWIXM] bold; /**/
        set SL0QM008.SL-LOC-CD[SL0QWIXM] bold; /**/
      else /* OK, CONTINUE UNTIL DONE*/
      end
      SL0QS-IO1470-CH(); /* CLOSE CURSOR*/
    end
    SL0QW01.SL0QWIXM = SL0QW01.SL0QWIXM - 1;
  end /* END WHILE*/

   /* ------------------------------------------------------------*/
   /* 'TO' location must be greater than 'FROM' location.*/
   /* ------------------------------------------------------------*/

  if (SL0QM008.XAR-AREA-CD[8] > "  "   /* is line 8 and 9 present ?*/
   && SL0QM008.SL-ZONE-CD[8] > "  "    /**/
   && SL0QM008.SL-LOC-CD[8] > "      " /**/
   && SL0QM008.XAR-AREA-CD[9] > "  "   /**/
   && SL0QM008.SL-ZONE-CD[9] > "  "    /**/
   && SL0QM008.SL-LOC-CD[9] > "      ") /**/
   /* set up for compare*/
    SL0QW08.XAR-AREA-CD = SL0QM008.XAR-AREA-CD[8];
    SL0QW08.SL-ZONE-CD = SL0QM008.SL-ZONE-CD[8];
    SL0QW08.SL-LOC-CD = SL0QM008.SL-LOC-CD[8];
    SL0QW08.XAR-TO-AREA-CD = SL0QM008.XAR-AREA-CD[9];
    SL0QW08.SL-TO-ZONE-CD = SL0QM008.SL-ZONE-CD[9];
    SL0QW08.SL-TO-LOC-CD = SL0QM008.SL-LOC-CD[9];
    if (SL0QW08.SL0QW-TO-LOC > SL0QW08.SL0QW-FROM-LOC)
   /* ok*/
    else
      converseLib.validationFailed(312);
      SL0QM008.XXX-ERR-ID = "08400-B"; /**/
      set SL0QM008.XAR-AREA-CD[8] cursor, bold; /**/
      set SL0QM008.SL-ZONE-CD[8] bold; /**/
      set SL0QM008.SL-LOC-CD[8] bold; /**/
    end
  end
   /* ------------------------------------------------------------*/
   /* Must enter something.*/
   /* ------------------------------------------------------------*/

  if (SL0QW01.SL0QWSWA == "N") /* NO DATA ENTERED*/
    SL0QM008.XXX-ERR-ID = "08400-C"; /**/
    converseLib.validationFailed(0009); /* MISSING REQUIRED FIELD*/
    set SL0QM008.XAR-AREA-CD[1] cursor, bold; /* HIGHLIT ROW ONE*/
    set SL0QM008.SL-ZONE-CD[1] bold; /**/
    set SL0QM008.SL-LOC-CD[1] bold; /**/
  end

   /* ------------------------------------------------------------*/
   /* Verify the number of copies to be printed.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (SL0QM008.SL0QMCPY == 0) /* Number of copies invalid*/
    set SL0QM008.SL0QMCPY cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(11); /* Indicate invalid number*/
    SL0QM008.XXX-ERR-ID = "08400-D"; /**/
  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    exit stack; /* Exit to redisplay map*/

  end


end // end SL0Q-08400

// Process valid input request
Function SL0Q-08500()
   /* ------------------------------------------------------------*/
   /* Enque the internal reader for job submission.*/
   /* Submit the job control through the internal reader.*/
   /* Deque the internal reader after job submission.*/
   /* Indicate that the selected function is completed.*/
   /* ------------------------------------------------------------*/

  set SL0QW00 empty; /* Initialize variables work area*/
  set SL0QW08 empty; /* Initialize variables work area*/

  SL0QW00.SL0QMCPY = SL0QM008.SL0QMCPY; /* Number of copies*/

  SL0QW08.XWH-WHSE-CD = SL0QM008.XWH-WHSE-CD; /* warehouse code*/

  SL0Q026(); /* Enque the internal reader*/

  SL0QW01.SL0QWSWS = "N"; /* SET TO 'Y' IN SL0Q027 WHEN /*EOF*/
                                   /* FOUND.*/

  while (SL0QW01.SL0QWSWS == "N") /* Until job is submitted*/
    SL0QW99.SL0QWJCL = SL0QT0P.SL0QWJCL[SL0QWIXT]; /* JCL statement*/
    SL0QW01.SL0QTTYP = SL0QT0P.SL0QTTYP[SL0QWIXT]; /* Statement type*/
    if (SL0QW01.SL0QTTYP == "P") /* Parameters statement*/
      SL0QW01.SL0QWIXM = 1; /* Initialize map from index*/
      SL0QW08.SL0QW-PARM-RUN-MODE = "UNIQUE";
      while (SL0QW01.SL0QWIXM <= 08) /* Until all lines processed*/
        if (SL0QM008.XAR-AREA-CD[SL0QWIXM] > "  ") /* BUILD A PARM  ?*/
          if (SL0QW01.SL0QWIXM <= 08) /* move for first 7 lines*/
            SL0QW08.XWH-WHSE-CD = SL0QM008.XWH-WHSE-CD;
            SL0QW08.XAR-AREA-CD = SL0QM008.XAR-AREA-CD[SL0QWIXM];
            SL0QW08.SL-ZONE-CD = SL0QM008.SL-ZONE-CD[SL0QWIXM];
            SL0QW08.SL-LOC-CD = SL0QM008.SL-LOC-CD[SL0QWIXM];
          end
          if (SL0QW01.SL0QWIXM == 08) /* do 'RANGE' stuff*/
            SL0QW08.SL0QW-PARM-RUN-MODE = "RANGE ";
            SL0QW08.XAR-TO-AREA-CD = SL0QM008.XAR-AREA-CD[9];
            SL0QW08.SL-TO-ZONE-CD = SL0QM008.SL-ZONE-CD[9];
            SL0QW08.SL-TO-LOC-CD = SL0QM008.SL-LOC-CD[9];
          end
          SL0QW00.SL0QWJCL = SL0QW08.SL0QWJCL; /* MOVE PARM CARD*/
          SL0Q027(); /* Write to the internal reader*/
          SL0QW01.SL0QWIXT = SL0QW01.SL0QWIXT - 1; /* HOLD POSITION IN*/
        end /* JCL TABLE UNTIL MAP IS DUMPED INTO*/
                                  /* PARM CARDS. SL0Q027 ADDS 1 TO INDEX.*/
        SL0QW01.SL0QWIXM = SL0QW01.SL0QWIXM + 1; /* BUMP MAP INDEX*/
      end
      SL0QW01.SL0QWIXT = SL0QW01.SL0QWIXT + 1; /* Continue with JCL table*/
    else
      SL0Q027(); /* Write to the internal reader*/
    end
  end

  SL0Q028(); /* Deque the internal reader*/

  SL0QW01.SL0QWMNO = 59; /* Job was submitted*/
   /* MOVE '*' TO SL0QW01.SL0QMSEL(8); /* Indicate function completed*/

  set SL0QM008 initial; /* Clear map output area*/

  exit stack;
end // end SL0Q-08500

// Report Requests initialization
Function SL0Q001()
   /* ------------------------------------------------------------*/
   /* Perform Stock Locate application initialization.*/
   /* Obtain the CICS Logon User Identification.*/
   /* Initialize the application working storage.*/
   /* Search the Remote Printer Destination Table (XROTBL) to*/
   /* determine the default remote printer destination.*/
   /* Initialize the selection line index limit.*/
   /* ------------------------------------------------------------*/

  XPSL001(); /* Application initialization*/

  set UT1REC empty; /* Initialize subroutine parameters*/
  set UT2REC empty; /* Initialize subroutine parameters*/

  try
    call "UT0200" (UT1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Obtain user identification*/

  if (sysVar.errorCode != "00000000" /* Call was not successful*/
   || UT1REC.UT1RETCD != 0)          /* or non-zero return code*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "SL0Q001 "; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN CICS USER IDENTIFICATION";
    SQLCA.SQLCAREC = UT1REC.UT1GRPLV; /* Error information*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    converseLib.validationFailed(01); /* Indicate system error*/

    COMMAREA.CATOAP = "SL0M"; /* Stock Locate Master Menu*/

    XSEXIT(); /* Exit to master menu*/

    exit program; /* Terminate application if exit failed*/

  end

  set SL0QW00 empty; /* Initialize working storage*/
  set SL0QW01 empty; /* Initialize working storage*/
  set SL0QW02 empty; /* Initialize working storage*/
  set SL0QW03 empty; /* Initialize working storage*/
  set SL0QW04 empty; /* Initialize working storage*/
  set SL0QW05 empty; /* Initialize working storage*/
  set SL0QW06 empty; /* Initialize working storage*/
  set SL0QW07 empty; /* Initialize working storage*/
  set SL0QW08 empty; /* Initialize working storage*/
  set SL0QW9G empty; /* Initialize working storage*/
  set SL0QW9J empty; /* Initialize working storage*/
  set SL0QW9N empty; /* Initialize working storage*/
  set SL0QW9O empty; /* Initialize working storage*/
  set SL0QW9W empty; /* Initialize working storage*/
  set SLBREC empty; /**/
  set SL8REC empty; /**/
  set TAEREC empty; /**/
  set TA1REC empty; /**/
  set TA2REC empty; /**/
  set TSHREC empty; /**/
  set SQLCA empty; /**/

  SL0QW01.SL0QWUID = UT1REC.UT1USRID; /* User identification*/
  SL0QW01.XWHCD = SLWREC.XWHCD; /* warehouse code*/
  SL0QW01.XGPCD = SLWREC.XGPCD; /* PROD CLASS*/

  SL0QW01.SL0QWIXM = 1; /* Initialize line index*/

  while (XROTBL.XROCD[SL0QWIXM] != "9999" /* Until end of table*/
   && SL0QW01.SL0QMRMT == " ") /* or printer is found*/

    if (XROTBL.XXXSTAT[SL0QWIXM] == "A") /* Active status*/

      if (XROTBL.XWHCD1[SL0QWIXM] == SL0QW01.XWHCD /* Warehouse*/
       || XROTBL.XWHCD2[SL0QWIXM] == SL0QW01.XWHCD /* code*/
       || XROTBL.XWHCD3[SL0QWIXM] == SL0QW01.XWHCD) /* matches*/

        SL0QW01.SL0QMRMT = XROTBL.XROPDEST[SL0QWIXM]; /* Printer*/
        SL0QW01.SL0QMDES = XROTBL.XRODESC[SL0QWIXM]; /* Description*/

      end

    end

    SL0QW01.SL0QWIXM = SL0QW01.SL0QWIXM + 1; /* Increment line number*/

  end

   /* ---------------------------------------------------------------------*/
   /* Check to see if transfer from application has passed the selection*/
   /* number. If so move an 'S' to the corresponding select field.*/
   /* ---------------------------------------------------------------------*/

  if (SLWREC.SLWCASNO == "1") /* Printer defaults*/
    SL0QW01.SL0QMSEL[1] = "S"; /**/
  end
  if (SLWREC.SLWCASNO == "2") /* Product location report*/
    SL0QW01.SL0QMSEL[2] = "S"; /**/
  end
  if (SLWREC.SLWCASNO == "3") /* Negative quantities report*/
    SL0QW01.SL0QMSEL[3] = "S"; /**/
  end
  if (SLWREC.SLWCASNO == "4") /* Container product report*/
    SL0QW01.SL0QMSEL[4] = "S"; /**/
  end
  if (SLWREC.SLWCASNO == "5") /* Production setaside report*/
    SL0QW01.SL0QMSEL[5] = "S"; /**/
  end
  if (SLWREC.SLWCASNO == "6") /* Print case work orders*/
    SL0QW01.SL0QMSEL[6] = "S"; /**/
  end
  if (SLWREC.SLWCASNO == "7") /* Product quantity by product report*/
    SL0QW01.SL0QMSEL[7] = "S"; /**/
  end
  if (SLWREC.SLWCASNO == "8") /* Product quantity by location report*/
    SL0QW01.SL0QMSEL[8] = "S"; /**/
  end

  set SL0QM001 initial; /* Initialize map output area*/
  set SL0QM002 initial; /* Initialize map output area*/
  set SL0QM003 initial; /* Initialize map output area*/
  set SL0QM004 initial; /* Initialize map output area*/
  set SL0QM005 initial; /* Initialize map output area*/
  set SL0QM006 initial; /* Initialize map output area*/
  set SL0QM007 initial; /* Initialize map output area*/
  set SL0QM008 initial; /* Initialize map output area*/
  set SL0QM099 initial; /* Initialize map output area*/

  SL0QW01.SL0QWIXL = 8; /* Number of menu selection lines*/


end // end SL0Q001

// Stock Locate Report Requests
Function SL0Q002()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display maps.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Invoke the process for each selection entered on menu.*/
   /* 2) After all selections are processed, display the menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (SL0QW01.SL0QMSEL[1] == "S" /* Line 1 was selected*/
   && converseVar.eventKey not pf3) /* and EXIT not requested*/
    SL0Q010(); /* Specify/Override Default Printer*/
  end

  if (SL0QW01.SL0QMSEL[2] == "S" /* Line 2 was selected*/
   && converseVar.eventKey not pf3) /* and EXIT not requested*/
    SL0Q020(); /* Carriers Report*/
  end

  if (SL0QW01.SL0QMSEL[3] == "S" /* Line 3 was selected*/
   && converseVar.eventKey not pf3) /* and EXIT not requested*/
    SL0Q030(); /* Carrier Crafts Report*/
  end

  if (SL0QW01.SL0QMSEL[4] == "S" /* Line 4 was selected*/
   && converseVar.eventKey not pf3) /* and EXIT not requested*/
    SL0Q040(); /* Container report*/
  end

  if (SL0QW01.SL0QMSEL[5] == "S" /* Line 5 was selected*/
   && converseVar.eventKey not pf3) /* and EXIT not requested*/
    SL0Q050(); /* Production Setaside report*/
  end

  if (SL0QW01.SL0QMSEL[6] == "S" /* Line 6 was selected*/
   && converseVar.eventKey not pf3) /* and EXIT not requested*/
    if (SL0QW01.XWHCD == "02"
     || SL0QW01.XWHCD == "04"
     || SL0QW01.XWHCD == "07"
     || SL0QW01.XWHCD == "51"
     || SL0QW01.XWHCD == "42")
      SL0Q060(); /* create and/or print wo labels*/
    else
      converseLib.validationFailed(197);
      SL0QM006.XXXPRCNM = "SL0Q002"; /* process name*/
      set SL0QM006 alarm; /* indicate sound alarm*/
    end
  end

  if (SL0QW01.SL0QMSEL[7] == "S" /* Line 7 was selected*/
   && converseVar.eventKey not pf3) /* and EXIT not requested*/
    SL0Q-07000(); /* Product qty by product report*/
  end

  if (SL0QW01.SL0QMSEL[8] == "S" /* Line 8 was selected*/
   && converseVar.eventKey not pf3) /* and EXIT not requested*/
    SL0Q-08000(); /* Product qty by location report*/
  end

  SL0Q990(); /* Report Request Menu*/


end // end SL0Q002

// Specify/Override Printer
Function SL0Q010()
   /* ------------------------------------------------------------*/
   /* Format and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process the valid input request.*/
   /* ------------------------------------------------------------*/

  SL0Q011(); /* Format and display the map*/

  SL0Q012(); /* Check attention identifier*/

  SL0Q013(); /* Reset fields to normal intensity*/

  SL0Q014(); /* Verify the entered data*/

  SL0Q015(); /* Process valid input request*/


end // end SL0Q010

// Format and display the map
Function SL0Q011()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map,*/
   /* including the active printer destination table entries.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    set SL0QM001 initial; /* Clear map output area*/

    SL0QM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    SL0QM001.SL0QMRMT = SL0QW01.SL0QMRMT; /* Printer*/
    SL0QM001.SL0QMDES = SL0QW01.SL0QMDES; /* Description*/

    SL0QW01.SL0QWSWP = "N"; /* Initialize page switch*/
    SL0QW01.SL0QWIXM = 1; /* Initialize map index*/

    if (SL0QW01.SL0QWIXP > 0) /* If not first page*/

      SL0QW01.SL0QWIXT = SL0QW01.SL0QWIXS[SL0QWIXP];
                                   /* Starting index*/
    else
      SL0QW01.SL0QWIXT = 1; /* Initialize table index*/

    end

    SL0QW01.SL0QWIXP = SL0QW01.SL0QWIXP + 1; /* Increment page index*/

    while (SL0QW01.SL0QWSWP == "N" /* Until page full*/
     && XROTBL.XROCD[SL0QWIXT] != "9999") /* or end of table*/

      if (XROTBL.XXXSTAT[SL0QWIXT] == "A") /* Active status*/

        if (SL0QW01.SL0QWIXM > 28) /* Display entries exceeded*/

          if (SL0QW01.SL0QWIXP > 10) /* Page entries exceeded*/

            TA1REC.TA1FUNC = "RETN"; /* Termination function*/
            TA1REC.TA1TYPE = "APPL"; /* Type of error*/
            TA1REC.TA1PGMNM = "SL0Q011 "; /* Process name*/
            TA1REC.TA1LOC = "XROTBL DISPLAY ENTRIES EXCEEDED";
            TA1REC.TA1MAP = "SL0QM001"; /* Map name*/
            SQLCA.SQLCAREC = " "; /* Application error information*/

            call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

            converseLib.clearScreen();
             /* Clear screen before redisplay*/

          else

            SL0QW01.SL0QWIXS[SL0QWIXP] = SL0QW01.SL0QWIXT;

          end

          SL0QW01.SL0QWSWP = "Y"; /* Indicate page full*/

        else

          SL0QM001.XROPDEST[SL0QWIXM] = XROTBL.XROPDEST[SL0QWIXT];
          SL0QM001.XRODESC[SL0QWIXM] = XROTBL.XRODESC[SL0QWIXT];

          SL0QW01.SL0QWIXM = SL0QW01.SL0QWIXM + 1; /* Increment map index*/

        end

      end

      if (SL0QW01.SL0QWSWP == "N") /* If page not full*/

        SL0QW01.SL0QWIXT = SL0QW01.SL0QWIXT + 1; /* Increment table index*/

      end

    end

    if (SL0QW01.SL0QWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(SL0QW01.SL0QWMNO);
    end /* Job submitted message number*/
    SL0QW01.SL0QWMNO = 0; /* Reset message number*/

  else

    set SL0QM001 alarm; /* Indicate sound alarm*/

  end

  converse SL0QM001 ;


end // end SL0Q011

// Check attention identifier
Function SL0Q012()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    SL0QW01.SL0QWIXP = SL0QW01.SL0QWIXP - 1; /* Decrement page index*/

    exit stack; /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    exit stack; /* Exit to display selection menu*/

  end

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    SL0QM001.XXXPRCNM = "SL0Q012"; /* Process name*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    exit stack; /* Exit to redisplay map*/

  end


end // end SL0Q012

// Reset highlighted fields
Function SL0Q013()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SL0QM001.SL0QMRMT initialAttributes; /* Printer destination*/


end // end SL0Q013

// Verify the entered data
Function SL0Q014()
   /* ------------------------------------------------------------*/
   /* If scroll was requested and data changed, indicate error.*/
   /* If scroll was requested, verify pages exist to scroll.*/
   /* If printer was modified, verify the destination.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll up was requested*/
   || converseVar.eventKey is pf8) /* or scroll down was requested*/

    if (SL0QM001.SL0QMRMT != SL0QW01.SL0QMRMT) /* Printer was changed*/

      set SL0QM001.SL0QMRMT cursor, modified, bold; /* Highlight data*/

      SL0QM001.SL0QMDES = " "; /* Clear printer description*/

      converseLib.validationFailed(06); /* Indicate cannot change data*/
      SL0QM001.XXXPRCNM = "SL0Q014"; /* Process name*/

    end

  end

  if (converseVar.eventKey is pf7) /* Scroll up was requested*/

    if (SL0QW01.SL0QWIXP == 1) /* First page displayed*/

      converseLib.validationFailed(7); /* Indicate no previous page*/
      SL0QM001.XXXPRCNM = "SL0Q014"; /* Process name*/

    end

  end

  if (converseVar.eventKey is pf8) /* Scroll down was requested*/

    if (XROTBL.XROCD[SL0QWIXT] == "9999") /* End of table*/

      converseLib.validationFailed(8); /* Indicate no more pages*/
      SL0QM001.XXXPRCNM = "SL0Q014"; /* Process name*/

    end

  end

  if (converseVar.eventKey not pf7 /* Scroll up not requested*/
   && converseVar.eventKey not pf8) /* and scroll down not requested*/

    if (SL0QM001.SL0QMRMT != SL0QW01.SL0QMRMT /* Printer was changed*/
     || SL0QW01.SL0QMRMT == " ")              /* or no printer is specified*/

      if (SL0QM001.SL0QMRMT in XROTBL.XROPDEST)
        SL0QM001.SL0QMDES = XROTBL.XRODESC[sysVar.arrayIndex];
      end

      if (sysVar.arrayIndex == 0 /* Table entry not found*/
       || XROTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* or entry is not active*/

        set SL0QM001.SL0QMRMT cursor, modified, bold; /* Highlight data*/

        SL0QM001.SL0QMDES = " "; /* Clear printer description*/

        converseLib.validationFailed(17); /* Printer destination invalid*/
        SL0QM001.XXXPRCNM = "SL0Q014"; /* Process name*/

      end

    end

  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    exit stack; /* Exit to redisplay map*/

  end


end // end SL0Q014

// Process valid input request
Function SL0Q015()
   /* ------------------------------------------------------------*/
   /* If scroll was requested, exit to redisplay the map.*/
   /* Save printer destination and description.*/
   /* Indicate that the selected function is completed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* If scroll up requested*/

    SL0QW01.SL0QWIXP = SL0QW01.SL0QWIXP - 2; /* Decrement page index*/

    exit stack; /* Exit to redisplay the map*/

  end

  if (converseVar.eventKey is pf8) /* If scroll down requested*/

    exit stack; /* Exit to redisplay the map*/

  end

  SL0QW01.SL0QMRMT = SL0QM001.SL0QMRMT; /* Printer*/
  SL0QW01.SL0QMDES = SL0QM001.SL0QMDES; /* Description*/

  SL0QW01.SL0QMSEL[1] = "*"; /* Indicate function completed*/


end // end SL0Q015

// Stock locate prod/loc. Report
Function SL0Q020()
   /* ------------------------------------------------------------*/
   /* Format and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process the valid input request.*/
   /* ------------------------------------------------------------*/

  SL0Q021(); /* Format and display the map*/

  SL0Q022(); /* Check attention identifier*/

  SL0Q023(); /* Reset fields to normal intensity*/

  SL0Q024(); /* Verify the entered data*/

  SL0Q025(); /* Process valid input request*/


end // end SL0Q020

// Format and display the map
Function SL0Q021()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    SL0QM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    SL0QM002.SL0QMWHS = SL0QW01.XWHCD; /* Warehouse code*/
    SL0QM002.SL0QMRMT = SL0QW01.SL0QMRMT; /* Printer*/
    SL0QM002.SL0QMDES = SL0QW01.SL0QMDES; /* Description*/

    if (SL0QW01.SL0QWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(SL0QW01.SL0QWMNO);
    end /* Job submitted message number*/
    SL0QW01.SL0QWMNO = 0; /* Reset message number*/

  else

    set SL0QM002 alarm; /* Indicate sound alarm*/

  end

  converse SL0QM002 ;


end // end SL0Q021

// Check attention identifier
Function SL0Q022()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    SL0QW01.SL0QMSEL[2] = "C"; /* Indicate selection cancelled*/

    set SL0QM002 initial; /* Clear map output area*/

    exit stack; /* Exit to display next map*/

  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    exit stack; /* Exit to display selection menu*/

  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    SL0QM002.XXXPRCNM = "SL0Q022"; /* Process name*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    exit stack; /* Exit to redisplay map*/

  end


end // end SL0Q022

// Reset highlighted fields
Function SL0Q023()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SL0QM002.SL0QMCPY initialAttributes; /* Number of copies*/
  set SL0QM002.SL0QMGPF initialAttributes; /* From  GPC number*/
  set SL0QM002.SL0QMGPT initialAttributes; /* To    GPC number*/
  set SL0QM002.SL0QMQLF initialAttributes; /* From  Quality number*/
  set SL0QM002.SL0QMQLT initialAttributes; /* To    Quality number*/
  set SL0QM002.SL0QMPDF initialAttributes; /* From  product number*/
  set SL0QM002.SL0QMPDT initialAttributes; /* To    product number*/
  set SL0QM002.SL0QMBLK initialAttributes; /* Bulk location flag*/
  set SL0QM002.SL0QMPRC initialAttributes; /* Processing location flag*/
  set SL0QM002.SL0QMRCV initialAttributes; /* Receiving location flag*/
  set SL0QM002.SL0QMPKH initialAttributes; /* Pack and Hold location flag*/
  set SL0QM002.SL0QMRTN initialAttributes; /* returns location flag*/
  set SL0QM002.SL0QMSHP initialAttributes; /* shipping location flag*/


end // end SL0Q023

// Verify the entered data
Function SL0Q024()
   /* ------------------------------------------------------------*/
   /* Verify the number of copies to be printed.*/
   /* Verify the 'from' and 'to' Gpc numbers.*/
   /* Verify the 'from' and 'to' Quality codes.*/
   /* Verify the 'from' and 'to' product codes.*/
   /* Verify the area location flags for:*/
         /* - BULK locations*/
         /* - Processing locations*/
         /* - Receiving locations*/
         /* - Pack and Hold locations*/
         /* - Returns locations*/
         /* - Shipping locations*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (SL0QM002.SL0QMSHP != "Y" /* shipping flag not yes*/
   && SL0QM002.SL0QMSHP != "N") /* shipping flag not no*/

    set SL0QM002.SL0QMSHP cursor, modified, bold; /* highlight*/
    converseLib.validationFailed(11); /* ship location flag invalid*/
    SL0QM002.XXXPRCNM = "SL0Q024"; /* process name*/

  end

  if (SL0QM002.SL0QMRTN != "Y" /* returns flag not yes*/
   && SL0QM002.SL0QMRTN != "N") /* returns flag not no*/

    set SL0QM002.SL0QMRTN cursor, modified, bold; /* highlight*/
    converseLib.validationFailed(11); /* rtrn location flag invalid*/
    SL0QM002.XXXPRCNM = "SL0Q024"; /* process name*/

  end

  if (SL0QM002.SL0QMPKH != "Y" /* pack & hold flag not yes*/
   && SL0QM002.SL0QMPKH != "N") /* pack & hold flag not no*/

    set SL0QM002.SL0QMPKH cursor, modified, bold; /* highlight*/
    converseLib.validationFailed(11); /* pk&h location flag invalid*/
    SL0QM002.XXXPRCNM = "SL0Q024"; /* process name*/

  end

  if (SL0QM002.SL0QMRCV != "Y" /* receiving  flag not yes*/
   && SL0QM002.SL0QMRCV != "N") /* receiving  flag not no*/

    set SL0QM002.SL0QMRCV cursor, modified, bold; /* highlight*/
    converseLib.validationFailed(11); /* rcvg location flag invalid*/
    SL0QM002.XXXPRCNM = "SL0Q024"; /* process name*/

  end

  if (SL0QM002.SL0QMPRC != "Y" /* processing flag not yes*/
   && SL0QM002.SL0QMPRC != "N") /* processing flag not no*/

    set SL0QM002.SL0QMPRC cursor, modified, bold; /* highlight*/
    converseLib.validationFailed(11); /* proc location flag invalid*/
    SL0QM002.XXXPRCNM = "SL0Q024"; /* process name*/

  end

  if (SL0QM002.SL0QMBLK != "Y" /* bulk flag not yes*/
   && SL0QM002.SL0QMBLK != "N") /* bulk flag not no*/

    set SL0QM002.SL0QMBLK cursor, modified, bold; /* highlight*/
    converseLib.validationFailed(11); /* bulk location flag invalid*/
    SL0QM002.XXXPRCNM = "SL0Q024"; /* process name*/

  end

  if (SL0QM002.SL0QMPDF > SL0QM002.SL0QMPDT) /* from product > to product*/

    set SL0QM002.SL0QMPDF cursor, modified, bold; /* highlight*/
    converseLib.validationFailed(28); /* from product code is invalid*/
    SL0QM002.XXXPRCNM = "SL0Q024"; /* process name*/

  end

  if (SL0QM002.SL0QMPDT == "      ") /* to product not entered*/

    set SL0QM002.SL0QMPDT cursor, modified, bold; /* highlight*/
    converseLib.validationFailed(63); /* to   product code is invalid*/
    SL0QM002.XXXPRCNM = "SL0Q024"; /* process name*/

  else

    if (SL0QM002.SL0QMPDT < "      " /* to product less than blank*/
     || SL0QM002.SL0QMPDT > "999999") /* to product greater than nines*/

      set SL0QM002.SL0QMPDT cursor, modified, bold; /* highlight*/
      converseLib.validationFailed(11); /* to product code is invalid*/
      SL0QM002.XXXPRCNM = "SL0Q024"; /* process name*/

    end
  end

  if (SL0QM002.SL0QMPDF == "      ") /* from product not entered*/

    set SL0QM002.SL0QMPDF cursor, modified, bold; /* highlight*/
    converseLib.validationFailed(63); /* from product code is invalid*/
    SL0QM002.XXXPRCNM = "SL0Q024"; /* process name*/

  else

    if (SL0QM002.SL0QMPDF < "      " /* from product less than blank*/
     || SL0QM002.SL0QMPDF > "999999")
                                   /* from product greater than nines*/

      set SL0QM002.SL0QMPDF cursor, modified, bold; /* highlight*/
      converseLib.validationFailed(11); /* from product code is invalid*/
      SL0QM002.XXXPRCNM = "SL0Q024"; /* process name*/

    end
  end

  if (SL0QM002.SL0QMQLF > SL0QM002.SL0QMQLT) /* from quality > to quality*/

    set SL0QM002.SL0QMQLF cursor, modified, bold; /* highlight*/
    converseLib.validationFailed(28); /* from quality code is invalid*/
    SL0QM002.XXXPRCNM = "SL0Q024"; /* process name*/

  end

  if (SL0QM002.SL0QMQLT == 0) /* to quality not entered*/

    set SL0QM002.SL0QMQLT cursor, modified, bold; /* highlight*/
    converseLib.validationFailed(09); /* to quality code is invalid*/
    SL0QM002.XXXPRCNM = "SL0Q024"; /* process name*/

  else

    if (SL0QM002.SL0QMQLT < 01 /* to quality less than one*/
     || SL0QM002.SL0QMQLT > 99) /* to quality greater than 99*/

      set SL0QM002.SL0QMQLT cursor, modified, bold; /* highlight*/
      converseLib.validationFailed(11); /* to quality code is invalid*/
      SL0QM002.XXXPRCNM = "SL0Q024"; /* process name*/

    end
  end

  if (SL0QM002.SL0QMQLF == 0) /* from quality not entered*/

    set SL0QM002.SL0QMQLF cursor, modified, bold; /* highlight*/
    converseLib.validationFailed(09); /* from quality code is invalid*/
    SL0QM002.XXXPRCNM = "SL0Q024"; /* process name*/

  else

    if (SL0QM002.SL0QMQLF < 01 /* from quality less than one*/
     || SL0QM002.SL0QMQLF > 99) /* from quality greater than 99*/

      set SL0QM002.SL0QMQLF cursor, modified, bold; /* highlight*/
      converseLib.validationFailed(11); /* from quality code is invalid*/
      SL0QM002.XXXPRCNM = "SL0Q024"; /* process name*/

    end
  end

  if (SL0QM002.SL0QMGPF > SL0QM002.SL0QMGPT) /* from gpc > to gpc*/

    set SL0QM002.SL0QMGPF cursor, modified, bold; /* highlight*/
    converseLib.validationFailed(28); /* from gpc code is invalid*/
    SL0QM002.XXXPRCNM = "SL0Q024"; /* process name*/

  end

  if (SL0QM002.SL0QMGPT == 0) /* to   gpc not entered*/

    set SL0QM002.SL0QMGPT cursor, modified, bold; /* highlight*/
    converseLib.validationFailed(09); /* to   gpc code is invalid*/
    SL0QM002.XXXPRCNM = "SL0Q024"; /* process name*/

  else

    if (SL0QM002.SL0QMGPT < 01 /* to   gpc less than one*/
     || SL0QM002.SL0QMGPT > 99) /* to   gpc greater than 99*/

      set SL0QM002.SL0QMGPT cursor, modified, bold; /* highlight*/
      converseLib.validationFailed(11); /* to   gpc code is invalid*/
      SL0QM002.XXXPRCNM = "SL0Q024"; /* process name*/

    end
  end

  if (SL0QM002.SL0QMGPF == 0) /* from gpc not entered*/

    set SL0QM002.SL0QMGPF cursor, modified, bold; /* highlight*/
    converseLib.validationFailed(09); /* from gpc code is invalid*/
    SL0QM002.XXXPRCNM = "SL0Q024"; /* process name*/

  else

    if (SL0QM002.SL0QMGPF < 01 /* from gpc less than one*/
     || SL0QM002.SL0QMGPF > 99) /* from gpc greater than 99*/

      set SL0QM002.SL0QMGPF cursor, modified, bold; /* highlight*/
      converseLib.validationFailed(11); /* from gpc code is invalid*/
      SL0QM002.XXXPRCNM = "SL0Q024"; /* process name*/

    end
  end

  if (SL0QM002.SL0QMCPY == 0) /* Number of copies invalid*/

    set SL0QM002.SL0QMCPY cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(11); /* Indicate invalid number*/
    SL0QM002.XXXPRCNM = "SL0Q024"; /* Process name*/

  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    exit stack; /* Exit to redisplay map*/

  end


end // end SL0Q024

// Process valid input request
Function SL0Q025()
   /* ------------------------------------------------------------*/
   /* Enque the internal reader for job submission.*/
   /* Submit the job control through the internal reader.*/
   /* Deque the internal reader after job submission.*/
   /* Indicate that the selected function is completed.*/
   /* ------------------------------------------------------------*/

  set SL0QW00 empty; /* Initialize variables work area*/
  set SL0QW02 empty; /* Initialize parameter work area*/

  SL0QW00.SL0QMCPY = SL0QM002.SL0QMCPY; /* Number of copies*/

  SL0QW02.SL0QMWHS = SL0QM002.SL0QMWHS; /* warehouse code*/
  SL0QW02.SL0QMGPF = SL0QM002.SL0QMGPF; /* from gpc code*/
  SL0QW02.SL0QMGPT = SL0QM002.SL0QMGPT; /* to   gpc code*/
  SL0QW02.SL0QMQLF = SL0QM002.SL0QMQLF; /* from quality code*/
  SL0QW02.SL0QMQLT = SL0QM002.SL0QMQLT; /* to   quality code*/
  SL0QW02.SL0QMPDF = SL0QM002.SL0QMPDF; /* from product code*/
  SL0QW02.SL0QMPDT = SL0QM002.SL0QMPDT; /* to   product code*/

  if (SL0QM002.SL0QMBLK == "Y") /* if flag is yes*/
    SL0QW02.SL0QMBLK = SL0QM002.SL0QMBLK; /* bulk location flag*/
  else
    SL0QW02.SL0QMBLK = "-"; /* move null value*/
  end

  if (SL0QM002.SL0QMPRC == "Y") /* if flag is yes*/
    SL0QW02.SL0QMPRC = SL0QM002.SL0QMPRC; /* processing location flag*/
  else
    SL0QW02.SL0QMPRC = "-"; /* move null value*/
  end

  if (SL0QM002.SL0QMRCV == "Y") /* if flag is yes*/
    SL0QW02.SL0QMRCV = SL0QM002.SL0QMRCV; /* receiving  location flag*/
  else
    SL0QW02.SL0QMRCV = "-"; /* move null value*/
  end

  if (SL0QM002.SL0QMPKH == "Y") /* if flag is yes*/
    SL0QW02.SL0QMPKH = SL0QM002.SL0QMPKH;
                                   /* pack & hold location flag*/
  else
    SL0QW02.SL0QMPKH = "-"; /* move null value*/
  end

  if (SL0QM002.SL0QMRTN == "Y") /* if flag is yes*/
    SL0QW02.SL0QMRTN = SL0QM002.SL0QMRTN; /* return location flag*/
  else
    SL0QW02.SL0QMRTN = "-"; /* move null value*/
  end

  if (SL0QM002.SL0QMSHP == "Y") /* if flag is yes*/
    SL0QW02.SL0QMSHP = SL0QM002.SL0QMSHP; /* shipping location flag*/
  else
    SL0QW02.SL0QMSHP = "-"; /* move null value*/
  end

  SL0QW00.SL0QWJCL = SL0QW02.SL0QWJCL; /* move parameter card*/

  SL0Q026(); /* Enque the internal reader*/

  while (SL0QW01.SL0QWSWS == "N") /* Until job is submitted*/

    SL0QW99.SL0QWJCL = SL0QT02.SL0QWJCL[SL0QWIXT]; /* JCL statement*/
    SL0QW01.SL0QTTYP = SL0QT02.SL0QTTYP[SL0QWIXT]; /* Statement type*/

    SL0Q027(); /* Write to the internal reader*/

  end

  SL0Q028(); /* Deque the internal reader*/

  SL0QW01.SL0QWMNO = 59; /* Job was submitted*/
  SL0QW01.SL0QMSEL[2] = "*"; /* Indicate function completed*/

  set SL0QM002 initial; /* Clear map output area*/


end // end SL0Q025

// Enque the Internal Reader
Function SL0Q026()
   /* ------------------------------------------------------------*/
   /* Enque the Internal Reader queue for job submission.*/
   /* ------------------------------------------------------------*/

  set UT2REC empty; /* Initialize subroutine parameters*/

  UT2REC.UT2FUNCT = "E"; /* Subroutine function*/
  UT2REC.UT2RSCLN = 8; /* Resource identification length*/
  UT2REC.UT2RSCID = "INTR"; /* Resource identification*/

  try
    call "UT0220" (UT2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Enque reader*/

  if (sysVar.errorCode != "00000000" /* Call was not successful*/
   || UT2REC.UT2RETCD != 0)          /* or non-zero return code*/

    converseLib.validationFailed(31); /* Indicate not available*/

    exit stack; /* Exit to redisplay map*/

  end

  SL0QW01.SL0QWIXT = 1; /* Initialize table index*/
  SL0QW01.SL0QWSWS = "N"; /* Initialize submit switch*/


end // end SL0Q026

// Submit JCL to internal reader
Function SL0Q027()
   /* ------------------------------------------------------------*/
   /* Format the variable areas of the JCL statement.*/
   /* Write Job Control Language to the Internal Reader queue.*/
   /* If error occurred, report to the error diagnosis facility.*/
   /* Indicate the job was submitted when end of file is written.*/
   /* ------------------------------------------------------------*/

  if (SL0QW01.SL0QTTYP == "G") /* GDG statement*/

    SL0QW9G.SL0QMGEN = SL0QW00.SL0QMGEN; /* generation parameter*/

  end

  if (SL0QW01.SL0QTTYP == "J") /* JOB statement*/

    SL0QW9J.SL0QWUID = SL0QW01.SL0QWUID; /* User identification*/

  end

  if (SL0QW01.SL0QTTYP == "N") /* NOTIFY statement*/

    SL0QW9N.SL0QWUID = SL0QW01.SL0QWUID; /* User identification*/

  end

  if (SL0QW01.SL0QTTYP == "O") /* OUTPUT statement*/

    SL0QW9O.SL0QMCPY = SL0QW00.SL0QMCPY; /* Number of copies*/
    SL0QW9O.SL0QMRMT = SL0QW01.SL0QMRMT; /* Print destination*/

  end

  if (SL0QW01.SL0QTTYP == "P") /* Parameter statement*/

    SL0QW99.SL0QWJCL = SL0QW00.SL0QWJCL; /* Report parameters*/

  end

  if (SL0QW01.SL0QTTYP == "W") /* WHSE statement*/

    SL0QW9W.XWHCD = SL0QW01.XWHCD; /* Warehouse code*/

  end

  try
    add SL0QW99 ;
  end

  if (sysVar.errorCode != "00000000") /* Non-zero return code*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "TS0H027 "; /* Process name*/
    TA1REC.TA1LOC = "WRITE JCL TO INTERNAL READER";
    TA1REC.TA1MAP = sysVar.errorCode; /* Return code*/
    SQLCA.SQLCAREC = SL0QW99.SL0QWJCL; /* Error information*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    converseLib.validationFailed(10); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* Exit to redisplay map*/

  end


  if (SL0QW99.SL0QWJCL == "/*EOF") /* End of file*/

    SL0QW01.SL0QWSWS = "Y"; /* Indicate job submitted*/
  else
    SL0QW01.SL0QWIXT = SL0QW01.SL0QWIXT + 1; /* Increment index*/

  end


end // end SL0Q027

// Deque the Internal Reader
Function SL0Q028()
   /* ------------------------------------------------------------*/
   /* Deque the Internal Reader queue after job submission.*/
   /* ------------------------------------------------------------*/

  set UT2REC empty; /* Initialize subroutine parameters*/

  UT2REC.UT2FUNCT = "D"; /* Subroutine function*/
  UT2REC.UT2RSCLN = 8; /* Resource identification length*/
  UT2REC.UT2RSCID = "INTR"; /* Resource identification*/

  try
    call "UT0220" (UT2REC) {isNoRefresh = yes, isExternal = yes};
  end /* Enque reader*/

  if (sysVar.errorCode != "00000000" /* Call was not successful*/
   || UT2REC.UT2RETCD != 0)          /* or non-zero return code*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "SL0Q028 "; /* Process name*/
    TA1REC.TA1LOC = "DEQUE THE SYSTEM INTERNAL READER";
    SQLCA.SQLCAREC = UT2REC.UT2GRPLV; /* Error information*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    converseLib.validationFailed(01); /* Indicate system error*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* Exit to redisplay map*/

  end


end // end SL0Q028

// bgrade neg net quantity Report
Function SL0Q030()
   /* ------------------------------------------------------------*/
   /* Format and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process the valid input request.*/
   /* ------------------------------------------------------------*/

  SL0Q031(); /* Format and display the map*/

  SL0Q032(); /* Check attention identifier*/

  SL0Q033(); /* Reset fields to normal intensity*/

  SL0Q034(); /* Verify the entered data*/

  SL0Q035(); /* Process valid input request*/


end // end SL0Q030

// Format and display the map
Function SL0Q031()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    SL0QM003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    SL0QM003.SL0QMWHS = SL0QW01.XWHCD; /* Warehouse code*/
    SL0QM003.SL0QMRMT = SL0QW01.SL0QMRMT; /* Printer*/
    SL0QM003.SL0QMDES = SL0QW01.SL0QMDES; /* Description*/

    if (SL0QW01.SL0QWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(SL0QW01.SL0QWMNO);
    end /* Job submitted message number*/
    SL0QW01.SL0QWMNO = 0; /* Reset message number*/

  else

    set SL0QM003 alarm; /* Indicate sound alarm*/

  end

  converse SL0QM003 ;


end // end SL0Q031

// Check attention identifier
Function SL0Q032()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    SL0QW01.SL0QMSEL[3] = "C"; /* Indicate selection cancelled*/

    set SL0QM003 initial; /* Clear map output area*/

    exit stack; /* Exit to display next map*/

  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    exit stack; /* Exit to display selection menu*/

  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    SL0QM003.XXXPRCNM = "SL0Q032"; /* Process name*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    exit stack; /* Exit to redisplay map*/

  end


end // end SL0Q032

// Reset highlighted fields
Function SL0Q033()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SL0QM003.SL0QMCPY initialAttributes; /* Number of copies*/
  set SL0QM003.SL0QMQLF initialAttributes; /* From Quality code*/
  set SL0QM003.SL0QMQLT initialAttributes; /* To   Quality code*/


end // end SL0Q033

// Verify the entered data
Function SL0Q034()
   /* ------------------------------------------------------------*/
   /* Verify the number of copies to be printed.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (SL0QM003.SL0QMQLF > SL0QM003.SL0QMQLT) /* from quality > to quality*/

    set SL0QM003.SL0QMQLF cursor, modified, bold; /* highlight*/
    converseLib.validationFailed(28); /* from quality code is invalid*/
    SL0QM003.XXXPRCNM = "SL0Q034"; /* process name*/

  end

  if (SL0QM003.SL0QMQLT == 0) /* to quality not entered*/

    set SL0QM003.SL0QMQLT cursor, modified, bold; /* highlight*/
    converseLib.validationFailed(09); /* to quality code is invalid*/
    SL0QM003.XXXPRCNM = "SL0Q034"; /* process name*/

  else

    if (SL0QM003.SL0QMQLT < 01 /* to quality less than one*/
     || SL0QM003.SL0QMQLT > 99) /* to quality greater than 99*/

      set SL0QM003.SL0QMQLT cursor, modified, bold; /* highlight*/
      converseLib.validationFailed(11); /* to quality code is invalid*/
      SL0QM003.XXXPRCNM = "SL0Q034"; /* process name*/

    end
  end

  if (SL0QM003.SL0QMQLF == 0) /* from quality not entered*/

    set SL0QM003.SL0QMQLF cursor, modified, bold; /* highlight*/
    converseLib.validationFailed(09); /* from quality code is invalid*/
    SL0QM003.XXXPRCNM = "SL0Q034"; /* process name*/

  else

    if (SL0QM003.SL0QMQLF < 01 /* from quality less than one*/
     || SL0QM003.SL0QMQLF > 99) /* from quality greater than 99*/

      set SL0QM003.SL0QMQLF cursor, modified, bold; /* highlight*/
      converseLib.validationFailed(11); /* from quality code is invalid*/
      SL0QM003.XXXPRCNM = "SL0Q034"; /* process name*/

    end
  end

  if (SL0QM003.SL0QMCPY == 0) /* Number of copies invalid*/

    set SL0QM003.SL0QMCPY cursor, modified, bold; /* Highlight*/

    converseLib.validationFailed(11); /* Indicate invalid number*/
    SL0QM003.XXXPRCNM = "SL0Q034"; /* Process name*/

  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    exit stack; /* Exit to redisplay map*/

  end


end // end SL0Q034

// Process valid input request
Function SL0Q035()
   /* ------------------------------------------------------------*/
   /* Enque the internal reader for job submission.*/
   /* Submit the job control through the internal reader.*/
   /* Deque the internal reader after job submission.*/
   /* Indicate that the selected function is completed.*/
   /* ------------------------------------------------------------*/

  set SL0QW00 empty; /* Initialize variables work area*/
  set SL0QW03 empty; /* Initialize variables work area*/

  SL0QW00.SL0QMCPY = SL0QM003.SL0QMCPY; /* Number of copies*/

  SL0QW03.SL0QMWHS = SL0QM003.SL0QMWHS; /* warehouse code*/
  SL0QW03.SL0QMQLF = SL0QM003.SL0QMQLF; /* from quality code*/
  SL0QW03.SL0QMQLT = SL0QM003.SL0QMQLT; /* from quality code*/

  SL0QW00.SL0QWJCL = SL0QW03.SL0QWJCL; /* move parameter card*/

  SL0Q026(); /* Enque the internal reader*/

  while (SL0QW01.SL0QWSWS == "N") /* Until job is submitted*/

    SL0QW99.SL0QWJCL = SL0QT03.SL0QWJCL[SL0QWIXT]; /* JCL statement*/
    SL0QW01.SL0QTTYP = SL0QT03.SL0QTTYP[SL0QWIXT]; /* Statement type*/

    SL0Q027(); /* Write to the internal reader*/

  end

  SL0Q028(); /* Deque the internal reader*/

  SL0QW01.SL0QWMNO = 59; /* Job was submitted*/
  SL0QW01.SL0QMSEL[3] = "*"; /* Indicate function completed*/

  set SL0QM003 initial; /* Clear map output area*/


end // end SL0Q035

// stock locate container Report
Function SL0Q040()
   /* ------------------------------------------------------------*/
   /* Format and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process the valid input request.*/
   /* ------------------------------------------------------------*/

  SL0Q041(); /* Format and display the map*/

  SL0Q042(); /* Check attention identifier*/

  SL0Q043(); /* Reset fields to normal intensity*/

  SL0Q044(); /* Verify the entered data*/

  SL0Q045(); /* Process valid input request*/


end // end SL0Q040

// Format and display the map
Function SL0Q041()
   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    SL0QM004.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    if (SL0QW00.SL0QMCPY == 0)
      SL0QM004.SL0QMCPY = 1; /* copies*/
    else
      SL0QM004.SL0QMCPY = SL0QW00.SL0QMCPY; /* copies*/
    end
    SL0QM004.XWHCD = SL0QW01.XWHCD; /* Warehouse code*/
    SL0QM004.SL0QMRMT = SL0QW01.SL0QMRMT; /* Printer*/
    SL0QM004.SL0QMDES = SL0QW01.SL0QMDES; /* Description*/

    if (SL0QW01.SL0QWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(SL0QW01.SL0QWMNO);
    end /* Job submitted message number*/
    SL0QW01.SL0QWMNO = 0; /* Reset message number*/

  else

    set SL0QM004 alarm; /* Indicate sound alarm*/

  end

  converse SL0QM004 ;


end // end SL0Q041

// Check attention identifier
Function SL0Q042()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    SL0QW01.SL0QMSEL[4] = "C"; /* Indicate selection cancelled*/

    set SL0QM004 initial; /* Clear map output area*/

    exit stack; /* Exit to display next map*/

  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    exit stack; /* Exit to display selection menu*/

  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    SL0QM004.XXXERRID = "SL0Q042"; /* Process name*/

    if (converseVar.eventKey is pakey) /* PA was pressed*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    exit stack; /* Exit to redisplay map*/

  end


end // end SL0Q042

// Reset highlighted fields
Function SL0Q043()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SL0QM004.SL0QMCPY initialAttributes; /* Number of copies*/
  SL0QW01.SL0QWIXM = 1;
  while (SL0QW01.SL0QWIXM <= 40)
    set SL0QM004.TSHCNTNR[SL0QWIXM] initialAttributes; /* Container Number*/
    SL0QW01.SL0QWIXM = SL0QW01.SL0QWIXM + 1;
  end


end // end SL0Q043

// Verify the entered data
Function SL0Q044()

   /* ************************************************************/
   /* *** validate any container numbers that were entered    ****/
   /* *** against the stloc. receiving  (dstloc.vrcvsh01).    ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** get current date minus 30 days                      ****/
   /* ************************************************************/

  SL0QS50();

  SL0QW01.SL0QWSWA = "N";
  SL0QW01.SL0QWIXM = 40;
  while (SL0QW01.SL0QWIXM > 0)
    if (SL0QM004.TSHCNTNR[SL0QWIXM] > " ")
      SL0QW01.SL0QWSWA = "Y";
      SL0QS10(); /* fetch select 2 container*/
      /* TT15364 start*/
      if (SQLCA.VAGen_SQLCODE != 0)
        SL0QM004.XXXERRID = "SLOQ044";
        converseLib.validationFailed(0085); /* <--- not found on d/b*/
        set SL0QM004.TSHCNTNR[SL0QWIXM] cursor, bold;
      end
      SL0QS20(); /* close select 2 container*/
      /* IF SQLCA.SQLCODE EQ 0;*/
      /* SL0QS20;                   /* close select 2 container*/
      /* ELSE;*/
      /* IF SQLCA.SQLCODE EQ 100;*/
      /* SL0QS20;                 /* close select 2 container*/
      /* SL0QS30;                 /* fetch select 3 container*/
      /* IF SQLCA.SQLCODE NE 0;*/
      /* MOVE 'SLOQ044' TO SL0QM004.XXXERRID;*/
      /* MOVE 0085 TO EZEMNO;     /* <--- not found on d/b*/
      /* SET SL0QM004.TSHCNTNR(SL0QWIXM) CURSOR,BRIGHT;*/
      /* END;*/
      /* SL0QS40;                 /* close select 3 container*/
      /* END;*/
      /* END;*/
      /* TT15364 end*/
    end
    SL0QW01.SL0QWIXM = SL0QW01.SL0QWIXM - 1;
  end

  if (SL0QW01.SL0QWSWA == "N") /* no containers entered*/
    SL0QM004.XXXERRID = "SL0Q044";
    converseLib.validationFailed(0009); /* <--- missing required field*/
    set SL0QM004.TSHCNTNR[1] cursor, bold;
  end

   /* ------------------------------------------------------------*/
   /* Verify the number of copies to be printed.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (SL0QM004.SL0QMCPY == 0) /* Number of copies invalid*/
    set SL0QM004.SL0QMCPY cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(11); /* Indicate invalid number*/
    SL0QM004.XXXERRID = "SL0Q044"; /* Process name*/
  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    exit stack; /* Exit to redisplay map*/

  end


end // end SL0Q044

// Process valid input request
Function SL0Q045()
   /* ------------------------------------------------------------*/
   /* Enque the internal reader for job submission.*/
   /* Submit the job control through the internal reader.*/
   /* Deque the internal reader after job submission.*/
   /* Indicate that the selected function is completed.*/
   /* ------------------------------------------------------------*/

  set SL0QW00 empty; /* Initialize variables work area*/
  set SL0QW04 empty; /* Initialize variables work area*/

  SL0QW00.SL0QMCPY = SL0QM004.SL0QMCPY; /* Number of copies*/

  SL0QW04.XWHCD = SL0QM004.XWHCD; /* warehouse code*/

  SL0Q026(); /* Enque the internal reader*/

  while (SL0QW01.SL0QWSWS == "N") /* Until job is submitted*/

    SL0QW99.SL0QWJCL = SL0QT04.SL0QWJCL[SL0QWIXT]; /* JCL statement*/
    SL0QW01.SL0QTTYP = SL0QT04.SL0QTTYP[SL0QWIXT]; /* Statement type*/
    if (SL0QW01.SL0QTTYP == "P") /* Parameters statement*/

      SL0QW01.SL0QWIXM = 1; /* Initialize map from index*/

      while (SL0QW01.SL0QWIXM <= 40) /* Until all lines processed*/

        if (SL0QM004.TSHCNTNR[SL0QWIXM] != " ") /* container nbr*/

          SL0QW04.TSHCNTNR = SL0QM004.TSHCNTNR[SL0QWIXM];

          SL0QW00.SL0QWJCL = SL0QW04.SL0QWJCL; /* Report parameters*/

          SL0Q027(); /* Write to the internal reader*/

          SL0QW01.SL0QWIXT = SL0QW01.SL0QWIXT - 1; /* Keep table position*/

        end

        SL0QW01.SL0QWIXM = SL0QW01.SL0QWIXM + 1; /* Increment from index*/

      end

      SL0QW01.SL0QWIXT = SL0QW01.SL0QWIXT + 1; /* Continue with JCL table*/

    else

      SL0Q027(); /* Write to the internal reader*/

    end

  end

  SL0Q028(); /* Deque the internal reader*/

  SL0QW01.SL0QWMNO = 59; /* Job was submitted*/
  SL0QW01.SL0QMSEL[4] = "*"; /* Indicate function completed*/

  set SL0QM004 initial; /* Clear map output area*/


end // end SL0Q045

// production setaside report
Function SL0Q050()
   /* ------------------------------------------------------------*/
   /* Format and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process the valid input request.*/
   /* ------------------------------------------------------------*/

  SL0Q051(); /* Format and display the map*/

  SL0Q052(); /* Check attention identifier*/

  SL0Q053(); /* Reset fields to normal intensity*/

  SL0Q054(); /* Verify the entered data*/

  SL0Q055(); /* Process valid input request*/


end // end SL0Q050

// format and display map
Function SL0Q051()

   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    SL0QM005.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    SL0QM005.SL0QMCPY = 1; /* Default no. of copies*/
    SL0QM005.XWHCD = SL0QW01.XWHCD; /* Warehouse code*/

    if (SL0QW01.XWHCD > " ") /* Whse entered*/
      if (SL0QW01.XWHCD in XWHTBL.XWHCD) /* Whse code in table*/
        if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Whse code active*/

          SL0QM005.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex]; /* Whse abrv*/

        else

          set SL0QM005.XWHCD cursor, modified, bold; /* Highlight*/
          converseLib.validationFailed(10); /* Indicate inactive number*/
          SL0QM005.XXXPRCNM = "SL0Q051"; /* Process name*/
          set SL0QM005 alarm; /* Indicate sound alarm*/
        end
      else
        set SL0QM005.XWHCD cursor, modified, bold; /* Highlight*/
        converseLib.validationFailed(11); /* Indicate invalid number*/
        SL0QM005.XXXPRCNM = "SL0Q051"; /* Process name*/
        set SL0QM005 alarm; /* Indicate sound alarm*/
      end
    else
      set SL0QM005.XWHCD cursor, modified, bold; /* Highlight*/
      converseLib.validationFailed(09); /* Indicate required field*/
      SL0QM005.XXXPRCNM = "SL0Q051"; /* Process name*/
      set SL0QM005 alarm; /* Indicate sound alarm*/
    end

    SL0QM005.SL0QMRMT = SL0QW01.SL0QMRMT; /* Printer*/
    SL0QM005.SL0QMDES = SL0QW01.SL0QMDES; /* Description*/

    if (SL0QW01.SL0QWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(SL0QW01.SL0QWMNO);
    end /* Job submitted message number*/
    SL0QW01.SL0QWMNO = 0; /* Reset message number*/

  else

    set SL0QM005 alarm; /* Indicate sound alarm*/

  end

  converse SL0QM005 ;
end // end SL0Q051

// check attention identifiers
Function SL0Q052()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    SL0QW01.SL0QMSEL[5] = "C"; /* Indicate selection cancelled*/

    set SL0QM005 initial; /* Clear map output area*/

    exit stack; /* Exit to display next map*/

  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    exit stack; /* Exit to display selection menu*/

  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    SL0QM005.XXXPRCNM = "SL0Q052"; /* Process name*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    exit stack; /* Exit to redisplay map*/

  end


end // end SL0Q052

// reset highlighted fields
Function SL0Q053()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SL0QM005.SL0QMCPY initialAttributes; /* Number of copies*/
  set SL0QM005.XWHCD initialAttributes; /* Warehouse code*/


end // end SL0Q053

// verify the entered data
Function SL0Q054()
   /* ------------------------------------------------------------*/
   /* Verify the number of copies to be printed.*/
   /* Verify the warehouse number.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (SL0QM005.XWHCD > " ") /* Whse entered*/
    if (SL0QM005.XWHCD in XWHTBL.XWHCD) /* Whse code in table*/
      if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Whse code active*/

        SL0QW01.XWHCD = SL0QM005.XWHCD; /* Whse code*/
        SL0QM005.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex]; /* Whse abrv.*/

      else

        set SL0QM005.XWHCD cursor, modified, bold; /* Highlight*/
        SL0QM005.XWHABRV = " "; /* Whse abrv.*/
        converseLib.validationFailed(10); /* Indicate inactive number*/
        SL0QM005.XXXPRCNM = "SL0Q054"; /* Process name*/
      end
    else
      set SL0QM005.XWHCD cursor, modified, bold; /* Highlight*/
      SL0QM005.XWHABRV = " "; /* Whse abrv.*/
      converseLib.validationFailed(11); /* Indicate invalid number*/
      SL0QM005.XXXPRCNM = "SL0Q054"; /* Process name*/
    end
  else
    set SL0QM005.XWHCD cursor, modified, bold; /* Highlight*/
    SL0QM005.XWHABRV = " "; /* Whse abrv.*/
    converseLib.validationFailed(09); /* Indicate required field*/
    SL0QM005.XXXPRCNM = "SL0Q054"; /* Process name*/
  end

  if (SL0QM005.SL0QMCPY == 0) /* Number of copies invalid*/

    set SL0QM005.SL0QMCPY cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(11); /* Indicate invalid number*/
    SL0QM005.XXXPRCNM = "SL0Q054"; /* Process name*/

  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    exit stack; /* Exit to redisplay map*/

  end


end // end SL0Q054

// process valid input request
Function SL0Q055()
   /* ------------------------------------------------------------*/
   /* Enque the internal reader for job submission.*/
   /* Submit the job control through the internal reader.*/
   /* Deque the internal reader after job submission.*/
   /* Indicate that the selected function is completed.*/
   /* ------------------------------------------------------------*/

  set SL0QW00 empty; /* Initialize variables work area*/
  set SL0QW05 empty; /* Initialize parameter work area*/

  SL0QW00.SL0QMCPY = SL0QM005.SL0QMCPY; /* Number of copies*/
  SL0QW05.XWHCD = SL0QM005.XWHCD; /* Warehouse code*/
  SL0QW01.SL0QMRMT = SL0QM005.SL0QMRMT; /* Remote printer*/
  SL0QW00.SL0QWJCL = SL0QW05.SL0QWJCL; /* move parameter card*/

  SL0Q026(); /* Enque the internal reader*/

  while (SL0QW01.SL0QWSWS == "N") /* Until job is submitted*/

    SL0QW99.SL0QWJCL = SL0QT05.SL0QWJCL[SL0QWIXT]; /* JCL statement*/
    SL0QW01.SL0QTTYP = SL0QT05.SL0QTTYP[SL0QWIXT]; /* Statement type*/

    SL0Q027(); /* Write to the internal reader*/

  end

  SL0Q028(); /* Deque the internal reader*/

  SL0QW01.SL0QWMNO = 59; /* Job was submitted*/
  SL0QW01.SL0QMSEL[5] = "*"; /* Indicate function completed*/

  set SL0QM005 initial; /* Clear map output area*/


end // end SL0Q055

// print/reprint work order label
Function SL0Q060()
   /* ------------------------------------------------------------*/
   /* Format and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process the valid input request.*/
   /* ------------------------------------------------------------*/

  SL0Q061(); /* obtain data to display*/

  SL0Q062(); /* Format and display the map*/

  SL0Q063(); /* Check attention identifier*/

  SL0Q064(); /* Reset fields to normal intensity*/

  SL0Q065(); /* Verify the entered data*/

  SL0Q066(); /* Process valid input request*/


end // end SL0Q060

// obtain data to display
Function SL0Q061()

   /* ********************************************************/
   /* ***  initialize application working switches        ****/
   /* ********************************************************/

  if (SL0QW01.SL0QWSWV == "Y")
    SL0QM006.SL0QMSFL = "Y";
  end

  if (converseVar.validationMsgNum == 0)
    if (SL0QW01.SL0QWSWV != "Y")
      SL0QM006.SL0QMSFL = " ";
      SL0QM006.SL0QMPFL = "R";
      SL0QM006.SL0QM-REPLEN-MANUAL-FLAG = "R";
      SL0QM006.SL0QM-APPAREL-VM-FL = "A";
      SL0QM006.SL0QMGEN = "+0";
      SL0QM006.SL0QMLBL = 01;
      SL0QM006.SL0QMSLB = 00;
      SL0QM006.SL0QMMGS = "N";
      SL0QM006.SL0QMMGE = "N";
    end
  end

end // end SL0Q061

// format and display map
Function SL0Q062()

   /* ------------------------------------------------------------*/
   /* If no error to display, format and display the map.*/
   /* Indicate sound audible alarm for any error.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    SL0QM006.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
    SL0QM006.XWHCD = SL0QW01.XWHCD; /* Warehouse code*/

    if (SL0QW01.XWHCD > " ") /* Whse entered*/
      if (SL0QW01.XWHCD in XWHTBL.XWHCD) /* Whse code in table*/
        if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Whse code active*/
          SL0QM006.XWHSABRV = XWHTBL.XWHSABRV[sysVar.arrayIndex]; /* Whse abrv*/

          if (SL0QW01.XWHCD == "02" /* if greenland warehouse*/
           || SL0QW01.XWHCD == "04" /* or memphis footwear warehouse*/
           || SL0QW01.XWHCD == "07" /* or WILSONVILLE Warehouse*/
           || SL0QW01.XWHCD == "51" /* or memphis apparel warehouse*/
           || SL0QW01.XWHCD == "42") /* or CANADA  apparel warehouse*/
             /* next sentence*/
          else
            set SL0QM006.XWHCD cursor, modified, bold; /* Highlight*/
            converseLib.validationFailed(197); /* wshe not valid for this option*/
            SL0QM006.XXXPRCNM = "SL0Q062"; /* Process name*/
            set SL0QM006 alarm; /* Indicate sound alarm*/
          end
        else
          set SL0QM006.XWHCD cursor, modified, bold; /* Highlight*/
          converseLib.validationFailed(10); /* Indicate inactive number*/
          SL0QM006.XXXPRCNM = "SL0Q062"; /* Process name*/
          set SL0QM006 alarm; /* Indicate sound alarm*/
        end
      else
        set SL0QM006.XWHCD cursor, modified, bold; /* Highlight*/
        converseLib.validationFailed(11); /* Indicate invalid number*/
        SL0QM006.XXXPRCNM = "SL0Q062"; /* Process name*/
        set SL0QM006 alarm; /* Indicate sound alarm*/
      end
    else
      set SL0QM006.XWHCD cursor, modified, bold; /* Highlight*/
      converseLib.validationFailed(09); /* Indicate required field*/
      SL0QM006.XXXPRCNM = "SL0Q062"; /* Process name*/
      set SL0QM006 alarm; /* Indicate sound alarm*/
    end

    SL0QM006.SL0QMRMT = SL0QW01.SL0QMRMT; /* Printer*/
    SL0QM006.SL0QMDES = SL0QW01.SL0QMDES; /* Description*/

    if (SL0QW01.SL0QWMNO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(SL0QW01.SL0QWMNO);
    end /* Job submitted message number*/
    SL0QW01.SL0QWMNO = 0; /* Reset message number*/
  else
    set SL0QM006 alarm; /* Indicate sound alarm*/
  end

  if (SL0QW01.XWHCD == "02" /* IF GREENLAND Warehouse*/
   || SL0QW01.XWHCD == "04" /* IF MEMPHIS FOOT Warehouse*/
   || SL0QW01.XWHCD == "07" /* IF WILSONVILLE Warehouse*/
   || SL0QW01.XWHCD == "51" /* IF MEMPHIS APP Warehouse*/
   || SL0QW01.XWHCD == "42") /* IF CANADA      Warehouse*/
    set SL0QM006.SL0QM-REPL-MAN-LITERAL2 normal; /* DISPLAY LITERAL*/
    set SL0QM006.SL0QM-REPL-MAN-LITERAL2 protect; /* DISPLAY LITERAL*/
    set SL0QM006.SL0QM-REPLACE-LITERAL normal; /* DISPLAY LITERAL*/
    set SL0QM006.SL0QM-REPLACE-LITERAL protect; /* DISPLAY LITERAL*/
    set SL0QM006.SL0QM-REPL-MAN-LITERAL normal; /* DISPLAY LITERAL*/
    set SL0QM006.SL0QM-REPL-MAN-LITERAL skip; /* DISPLAY LITERAL*/
    set SL0QM006.SL0QM-REPLEN-MANUAL-FLAG normal; /* DISPLAY FLAG*/
  end

  if (SL0QW01.XWHCD == "51") /* IF MEMPHIS APP Warehouse*/
    set SL0QM006.SL0QM-APPAREL-VM-LITERAL normal; /* DISPLAY LITERAL*/
    set SL0QM006.SL0QM-APPAREL-VM-LITERAL skip; /* DISPLAY LITERAL*/
    set SL0QM006.SL0QM-APPAREL-VM-FL normal; /* DISPLAY FLAG*/
  else
    set SL0QM006.SL0QM-APPAREL-VM-LITERAL initialAttributes; /* DARK & PROTECT*/
    set SL0QM006.SL0QM-APPAREL-VM-FL initialAttributes; /* DARK & PROTECT*/
  end

  if (converseVar.validationMsgNum == 0) /* if no error messageto display*/
    set SL0QM006.SL0QMPFL cursor, normal;
  else
    SL0QW01.SL0QWSWV = "N"; /* set verified to no*/
  end

  if (SL0QW01.SL0QWSWV != "Y") /* submit not verified*/
    set SL0QM006.SL0QMSFL skip, invisible; /* protect this field*/
  end

  if (SL0QW01.SL0QWSWV == "Y") /* submit verified*/
    set SL0QM006.XWHCD skip; /* protect this field*/
    set SL0QM006.SL0QMSFL cursor; /* set cursor here*/
    set SL0QM006.SL0QMPFL skip; /* protect this field*/
    set SL0QM006.SL0QMGEN skip; /* protect this field*/
    set SL0QM006.SL8WOGRP skip; /* protect this field*/
    set SL0QM006.SL8WONBR skip; /* protect this field*/
    set SL0QM006.SL0QWSCD skip; /* protect this field*/
    set SL0QM006.SL0QMLBL skip; /* protect this field*/
    set SL0QM006.SL0QMSLB skip; /* protect this field*/
    set SL0QM006.SL0QMMGS skip; /* protect this field*/
    set SL0QM006.SL0QMMGE skip; /* protect this field*/
  end

  converse SL0QM006 ;
end // end SL0Q062

// check attention identifiers
Function SL0Q063()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    SL0QW01.SL0QMSEL[6] = "C"; /* Indicate selection cancelled*/

    set SL0QM006 initial; /* Clear map output area*/
    SL0QW01.SL0QWSWV = "N"; /* reset verification flag*/

    exit stack; /* Exit to display next map*/

  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    exit stack; /* Exit to display selection menu*/

  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    SL0QM006.XXXPRCNM = "SL0Q063"; /* Process name*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    exit stack; /* Exit to redisplay map*/

  end


end // end SL0Q063

// reset highlighted fields
Function SL0Q064()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SL0QM006.SL0QMSFL initialAttributes; /* verify submit switch*/
  set SL0QM006.SL8WONBR initialAttributes; /* work order number*/
  set SL0QM006.SL0QWSCD initialAttributes; /* work order schedule nbr*/
  set SL0QM006.SL8WOGRP initialAttributes; /* work order group number*/
  set SL0QM006.SL0QMGEN initialAttributes; /* generation number*/
  set SL0QM006.SL0QMPFL initialAttributes; /* reprint/print switch*/
  set SL0QM006.SL0QMLBL initialAttributes; /* number of labels*/
  set SL0QM006.SL0QMSLB initialAttributes; /* number of startup labels*/
  set SL0QM006.SL0QMMGS initialAttributes; /* startup magnum print flag*/
  set SL0QM006.SL0QMMGE initialAttributes; /* ending  magnum print flag*/
  set SL0QM006.SL0QM-REPL-MAN-LITERAL initialAttributes;
  set SL0QM006.SL0QM-REPL-MAN-LITERAL2 initialAttributes;
  set SL0QM006.SL0QM-REPLEN-MANUAL-FLAG initialAttributes;
  set SL0QM006.SL0QM-REPLACE-LITERAL initialAttributes;
  set SL0QM006.SL0QM-APPAREL-VM-FL initialAttributes;
  set SL0QM006.SL0QM-APPAREL-VM-LITERAL initialAttributes;
  set SL0QM006.XWHCD initialAttributes; /* Warehouse code*/


end // end SL0Q064

// verify the entered data
Function SL0Q065()
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Verify the ending  magnum print flag.*/
   /* Verify the startup magnum print flag.*/
   /* Verify the warehouse number.*/
   /* Verify the label reprint flag.*/
   /* Determine whether there are any startup labels to print*/
        /* and if startup magnum flag equal y*/
   /* Determine whether there are any labels to print.*/
   /* Verify the generation of labels to be printed.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* check SLPGM and PKPGM for contention conflicts.*/
   /* ------------------------------------------------------------*/

  if (SL0QM006.SL0QMMGE == "Y" /* yes end magnum print*/
   || SL0QM006.SL0QMMGE == "N") /* no  do not end magnum*/
      /* next sentence*/
  else
    set SL0QM006.SL0QMMGE cursor, modified, bold; /* highlight*/
    converseLib.validationFailed(11); /* indicate print flag invalid*/
    SL0QM006.XXXPRCNM = "SL0Q065"; /* process name*/
  end


  if (SL0QM006.SL0QMMGS == "Y" /* yes start magnum print*/
   || SL0QM006.SL0QMMGS == "N") /* no  do not start magnum*/
      /* next sentence*/
  else
    set SL0QM006.SL0QMMGS cursor, modified, bold; /* highlight*/
    converseLib.validationFailed(11); /* indicate print flag invalid*/
    SL0QM006.XXXPRCNM = "SL0Q065"; /* process name*/
  end


  if (SL0QM006.SL0QMSLB > 0) /* if startup label requested*/
    if (SL0QM006.SL0QMMGS == "Y") /* if yes start magnum print*/
        /* next sentence*/
    else
      set SL0QM006.SL0QMMGS cursor, modified, bold; /* highlight*/
      converseLib.validationFailed(11); /* indicate print flag invalid*/
      SL0QM006.XXXPRCNM = "SL0Q065"; /* process name*/
    end
  end


  if (SL0QM006.SL0QMLBL > 0) /* number of labels*/
     /* next sentence*/
  else
    set SL0QM006.SL0QMLBL cursor, modified, bold; /* Highlight*/
    converseLib.validationFailed(009); /* Indicate required field*/
    SL0QM006.XXXPRCNM = "SL0Q065"; /* Process name*/
  end


  if (SL0QM006.SL8WONBR > 0 /* work order number entered*/
   || SL0QM006.SL8WOGRP > 0) /* work order group  entered*/
     /* next sentence*/
  else
    set SL0QM006.SL8WONBR modified, bold; /* Highlight*/
    set SL0QM006.SL8WOGRP cursor, modified, bold; /* Highlight*/
    SL0QM006.SL8WONBR = 0; /* work order number*/
    SL0QM006.SL8WOGRP = 0; /* work order group number*/
    converseLib.validationFailed(198); /* Indicate required field*/
    SL0QM006.XXXPRCNM = "SL0Q065"; /* Process name*/
  end


  if (SL0QM006.SL8WONBR > 0 /* work order number entered*/
   && SL0QM006.SL8WOGRP > 0) /* work order group  entered*/
    set SL0QM006.SL8WONBR modified, bold; /* Highlight*/
    set SL0QM006.SL8WOGRP cursor, modified, bold; /* Highlight*/
    SL0QM006.SL8WONBR = 0; /* work order number*/
    SL0QM006.SL8WOGRP = 0; /* work order group number*/
    converseLib.validationFailed(198); /* Indicate required field*/
    SL0QM006.XXXPRCNM = "SL0Q065"; /* Process name*/
  end


  if (SL0QM006.SL8WONBR > 0 /* work order number entered*/
   && SL0QM006.SL0QWSCD > 0) /* work order sched entered*/
    set SL0QM006.SL0QWSCD modified, bold; /* Highlight*/
    set SL0QM006.SL8WONBR cursor, modified, bold; /* Highlight*/
    SL0QM006.SL0QWSCD = 0; /* work order schedule*/
    SL0QM006.SL8WONBR = 0; /* work order number*/
    converseLib.validationFailed(404); /* sched nbr not valid with w/o nbr*/
    SL0QM006.XXXPRCNM = "SL0Q065"; /* Process name*/
  end


  if (SL0QM006.SL0QMPFL == "C" /* create and print*/
   && SL0QM006.SL0QWSCD > 0)   /* work order schedule entered*/
    set SL0QM006.SL0QWSCD modified, bold; /* Highlight*/
    set SL0QM006.SL0QMPFL cursor, modified, bold; /* Highlight*/
    SL0QM006.SL0QWSCD = 0; /* work order scedule*/
    converseLib.validationFailed(405); /* sched nbr not valid for create*/
    SL0QM006.XXXPRCNM = "SL0Q065"; /* Process name*/
  end


  if (SL0QM006.SL0QWSCD > 0) /* work order schedule entered*/
    if (SL0QM006.XWHCD == "51" /* Whse '51' entered*/
     || SL0QM006.XWHCD == "07" /* Whse '07' entered*/
     || SL0QM006.XWHCD == "04" /* Whse '04' entered*/
     || SL0QM006.XWHCD == "02" /* Whse '02' entered*/
     || SL0QM006.XWHCD == "42") /* Whse '42' entered*/
       /* next sentence*/
    else
      set SL0QM006.SL0QWSCD cursor, modified, bold; /* Highlight*/
      SL0QM006.SL0QWSCD = 0; /* work order number*/
      converseLib.validationFailed(406); /* sched nbr not valid for whse*/
      SL0QM006.XXXPRCNM = "SL0Q065"; /* Process name*/
    end
  end


  if (SL0QM006.SL0QMGEN != "+0" /* generation number 0*/
   && SL0QM006.SL0QMGEN != "-1" /* generation number -1*/
   && SL0QM006.SL0QMGEN != "-2") /* generation number -2*/

    set SL0QM006.SL0QMGEN cursor; /* set cursor*/
    SL0QM006.XXXPRCNM = "SL0Q065"; /* process name*/
    converseLib.validationFailed(11); /* indicate generation invalid*/
  end


  if (SL0QM006.XWHCD == "07" /* WILSONVILLE*/
   || SL0QM006.XWHCD == "02" /* GREENLAND*/
   || SL0QM006.XWHCD == "04") /* MEMPHIS FOOT*/

    if (SL0QM006.SL0QM-REPLEN-MANUAL-FLAG == "R" 
     || SL0QM006.SL0QM-REPLEN-MANUAL-FLAG == "M" 
     || SL0QM006.SL0QM-REPLEN-MANUAL-FLAG == "C" /* CASE LETUP*/
     || SL0QM006.SL0QM-REPLEN-MANUAL-FLAG == "P") /* PALLET LETUP*/
      /* next sentence*/
    else
      set SL0QM006.SL0QM-REPLEN-MANUAL-FLAG cursor, modified, bold;
      converseLib.validationFailed(11); /* indicate print flag invalid*/
      SL0QM006.XXXPRCNM = "SL0Q065"; /* process name*/
    end
  else
    if (SL0QM006.XWHCD == "51" /* MEMPHIS APP*/
     || SL0QM006.XWHCD == "42") /* CANADA*/

      if (SL0QM006.SL0QM-REPLEN-MANUAL-FLAG == "R"
       || SL0QM006.SL0QM-REPLEN-MANUAL-FLAG == "M")
        /* NEXT SENTENCE*/
      else
        set SL0QM006.SL0QM-REPLEN-MANUAL-FLAG cursor, modified, bold;
        converseLib.validationFailed(11); /* indicate print flag invalid*/
        SL0QM006.XXXPRCNM = "SL0Q065"; /* process name*/
      end
    end
  end


  if (SL0QM006.SL0QMPFL == "C" /* create and print*/
   || SL0QM006.SL0QMPFL == "R") /* reprint only flag*/
      /* next sentence*/
  else
    converseLib.validationFailed(11); /* indicate print flag invalid*/
    SL0QM006.XXXPRCNM = "SL0Q065"; /* process name*/
  end


  if (SL0QM006.XWHCD == "07" /* WILSONVILLE*/
   || SL0QM006.XWHCD == "02" /* GREENLAND*/
   || SL0QM006.XWHCD == "04" /* MEMPHIS FOOTWEAR*/
   || SL0QM006.XWHCD == "51" /* MEMPHIS APPAREL*/
   || SL0QM006.XWHCD == "42") /* MEMPHIS APPAREL*/

    if (SL0QM006.SL0QM-REPLEN-MANUAL-FLAG == "R" /* replenishemnt*/
     || SL0QM006.SL0QM-REPLEN-MANUAL-FLAG == "C" /* case letup*/
     || SL0QM006.SL0QM-REPLEN-MANUAL-FLAG == "P") /* pallet letup*/

      if (SL0QM006.SL0QMPFL == "C") /* create and print*/
        set SL0QM006.SL0QMPFL cursor, modified, bold; /* highlight*/
        converseLib.validationFailed(199); /* indicate print flag invalid*/
        SL0QM006.XXXPRCNM = "SL0Q065"; /* process name*/
      end
    end
  end


  if (SL0QM006.XWHCD == "51") /* MEMPHIS APP*/
    if (SL0QM006.SL0QM-REPLEN-MANUAL-FLAG != "R") /* No replenishemnt*/
      if ((SL0QM006.SL0QM-APPAREL-VM-FL == "S" /* single carton*/
       || SL0QM006.SL0QM-APPAREL-VM-FL == "B"  /* Basics*/
       || SL0QM006.SL0QM-APPAREL-VM-FL == "C")) /* Basics single carton*/
        set SL0QM006.SL0QM-APPAREL-VM-FL cursor, modified, bold;
        converseLib.validationFailed(11); /* invalid value*/
        SL0QM006.XXXPRCNM = "SL0Q065"; /* process name*/
      end
    end
  end


  if (SL0QM006.XWHCD == "51") /* MEMPHIS APP*/
    SL0QW01.SL0QWGPC = "03"; /* set work gpc cd to '03'*/
    if (SL0QM006.SL0QM-APPAREL-VM-FL == "A" /* APPAREL PRODUCT?*/
     || SL0QM006.SL0QM-APPAREL-VM-FL == "B") /* Basics*/
      SL0QW01.SL0QFRAR = "N1"; /* set work from area cd to NON '01'*/
    else
      if (SL0QM006.SL0QM-APPAREL-VM-FL == "S" /* APPAREL SINGLE CARTON MOVE*/
       || SL0QM006.SL0QM-APPAREL-VM-FL == "C") /* Basics single carton*/
        SL0QW01.SL0QFRAR = "01"; /* set work from area cd to '01'*/
      else
        if (SL0QM006.SL0QM-APPAREL-VM-FL == "Q") /* QUALITY DRIVE PRODUCT*/
          SL0QW01.SL0QFRAR = "QD";
                                   /* set work from area cd to "QD"*/
        else
          if (SL0QM006.SL0QM-APPAREL-VM-FL == "V")
                                   /* VISUAL MERCHANDIZE PRODUCT*/
            SL0QW01.SL0QWGPC = "01"; /* set work gpc cd to '01'*/
            SL0QW01.SL0QFRAR = "**";
                                   /* set work from area cd to "ALL"*/
          else
            SL0QW01.SL0QFRAR = "N1";
                                   /* set work from area cd to NON '01'*/
            set SL0QM006.SL0QM-APPAREL-VM-FL cursor, modified, bold;
            converseLib.validationFailed(11); /* indicate print flag invalid*/
            SL0QM006.XXXPRCNM = "SL0Q065"; /* process name*/
          end
        end
      end
    end
  end


  if (SL0QM006.XWHCD > " ") /* Whse entered*/
    if (SL0QM006.XWHCD in XWHTBL.XWHCD) /* Whse code in table*/
      if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Whse code active*/
        SL0QW01.XWHCD = SL0QM006.XWHCD; /* Whse code*/
        SL0QM006.XWHSABRV = XWHTBL.XWHSABRV[sysVar.arrayIndex]; /* Whse abrv.*/
      else
        set SL0QM006.XWHCD cursor, modified, bold; /* Highlight*/
        SL0QM006.XWHSABRV = " "; /* Whse abrv.*/
        converseLib.validationFailed(10); /* Indicate inactive number*/
        SL0QM006.XXXPRCNM = "SL0Q065"; /* Process name*/
      end
    else
      set SL0QM006.XWHCD cursor, modified, bold; /* Highlight*/
      SL0QM006.XWHSABRV = " "; /* Whse abrv.*/
      converseLib.validationFailed(11); /* Indicate invalid number*/
      SL0QM006.XXXPRCNM = "SL0Q065"; /* Process name*/
    end
  else
    set SL0QM006.XWHCD cursor, modified, bold; /* Highlight*/
    SL0QM006.XWHSABRV = " "; /* Whse abrv.*/
    converseLib.validationFailed(09); /* Indicate required field*/
    SL0QM006.XXXPRCNM = "SL0Q065"; /* Process name*/
  end


   /* IF SL0QM006.SL0QMPFL EQ 'C';     /* create and print ?*/
   /* PERFORM SL0Q-06510;            /* check PKPGM table for contention*/
   /* END;*/


  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SL0QW01.SL0QWSWV = "N"; /* set verified submit to no*/

    exit stack; /* Exit to redisplay map*/
  end


   /* now processing either work order group or work order number*/
   /* but not both -- if both entered it is an error*/

  if (SL0QM006.SL0QMPFL == "C") /* create and print labels*/

    SL0Q065-C(); /* edit "create & print labels"*/
  else
    if (SL0QM006.SL0QMPFL == "R") /* reprint labels*/

      SL0Q065-R(); /* edit "reprint labels"*/
    end
  end


  if (SL0QM006.XWHCD == "04" /* MEMPHIS FOOTWEAR*/
   || SL0QM006.XWHCD == "07" /* WILSONVILLE*/
   || SL0QM006.XWHCD == "02" /* GREENLAND*/
   || SL0QM006.XWHCD == "51" /* MEMPHIS APPAREL*/
   || SL0QM006.XWHCD == "42") /* canada*/

    if (SL0QM006.SL0QM-REPLEN-MANUAL-FLAG == "M" /* Manual work orders*/
     && SL0QM006.SL0QMPFL == "C")                /* create and print*/

      SL0Q-067(); /* check SLPGM table for contention*/
    end
  end


  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SL0QW01.SL0QWSWV = "N"; /* set verified submit to no*/

    exit stack; /* Exit to redisplay map*/
  else
    SL0QW01.SL0QWSWV = "Y"; /* set verified submit to yes*/
  end


  if (SL0QM006.SL0QMSFL == "N") /* if do not submit*/
    SL0QW01.SL0QWSWV = "N"; /* set verified submit to no*/
  end


end // end SL0Q065

// edit "create & print" request
Function SL0Q065-C()
   /* now processing either work order group or work order number*/
   /* but not both -- if both entered it is an error*/

   /* perform edits for requested "create and print labels" process*/

  if (SL0QM006.SL8WOGRP > 0) /* work order group  entered*/
    SL0QW01.SL0QWSWG = "N"; /* set wo grp found sw to not found*/
    SL0QW01.SL0QWSWF = "N"; /* set wo label switch to not found*/

    SL0QS70(); /* verify wo group exists on womhd01*/
    if (SQLCA.VAGen_SQLCODE == 0) /* work order group found*/
      SL0QW01.SL0QWSWO = "Y"; /* set ok-to-process sw to ok*/

      if (SL0QM006.XWHCD == "51") /* if memphis apparel*/
        SL0QS-CHK-SLBREC(); /* see if slbrec ok to be process*/
      end

      if (SL0QW01.SL0QWSWO == "Y") /* ok-to-process record?*/
        SL0QW01.SL0QWSWG = "Y"; /* set wo group switch to found*/
        if (SLBREC.SL8WOPFL == "Y") /* if label exist*/
          SL0QW01.SL0QWSWF = "Y"; /* set wo label switch to found*/
        end
      end

      while (SQLCA.VAGen_SQLCODE == 0)

        SL0QS72(); /* fetch next work order from vwomhd01*/
        if (SQLCA.VAGen_SQLCODE == 0)
          SL0QW01.SL0QWSWO = "Y"; /* set ok-to-process sw to ok*/

          if (SL0QM006.XWHCD == "51") /* if memphis apparel*/
            SL0QS-CHK-SLBREC(); /* see if slbrec ok to be process*/
          end

          if (SL0QW01.SL0QWSWO == "Y") /* ok-to-process record?*/

            if (SL0QM006.XWHCD == "51") /* MEMPHIS APPAREL*/
              if (SL0QW01.SL0QWSWG != "Y") /* wo group not found yet?*/
                SL0QW01.SL0QWSWG = "Y"; /* set wo grp sw to found*/
                if (SLBREC.SL8WOPFL == "Y") /* if label exist*/
                  SL0QW01.SL0QWSWF = "Y"; /* set wo lbl sw to found*/
                end
              end
            end

            if (SLBREC.SL8WOPFL != "Y") /* if label not exist*/
              SL0QW01.SL0QWSWF = "N"; /* set wo label to not found*/
            end
          end
        end
      end

      if (SL0QW01.SL0QWSWF == "N") /* if not ALL labels exist*/
       /* OK TO CREATE*/
      else
        set SL0QM006.SL8WOGRP cursor, modified, bold; /* Highlight*/
   /* MOVE 0 TO SL0QM006.SL8WOGRP;/* work order group number*/
        converseLib.validationFailed(199); /* CREATE INVALID  - labels exist*/
        SL0QM006.XXXPRCNM = "SL0Q065C"; /* Process name*/
      end
    end

    if (SL0QW01.SL0QWSWG == "N") /* work order group not found*/
      SL0QW01.SL0QWSWF = "N"; /* set wo label switch not found*/

      SL0QS60(); /* verify wo group exists on wolhd01*/
      if (SQLCA.VAGen_SQLCODE == 0) /* work order group found*/
        SL0QW01.SL0QWSWO = "Y"; /* set ok-to-process sw to ok*/

        if (SL0QM006.XWHCD == "51") /* if memphis apparel*/
          SL0QS-CHK-SL8REC(); /* see if sl8rec ok to be process*/
        end

        if (SL0QW01.SL0QWSWO == "Y") /* ok-to-process record?*/
          SL0QW01.SL0QWSWG = "Y"; /* set wo grp found sw to yes*/
          if (SL8REC.SL8WOPFL == "Y") /* if label exists*/
            SL0QW01.SL0QWSWF = "Y"; /* set wo label switch found*/
          end
        end

        while (SQLCA.VAGen_SQLCODE == 0)

          SL0QS62(); /* fetch next work order*/
          if (SQLCA.VAGen_SQLCODE == 0) /* work order group found*/
            SL0QW01.SL0QWSWO = "Y"; /* set ok-to-process sw to ok*/

            if (SL0QM006.XWHCD == "51") /* if memphis apparel*/
              SL0QS-CHK-SL8REC(); /* see if sl8rec ok to be process*/
            end

            if (SL0QW01.SL0QWSWO == "Y") /* ok-to-process record?*/

              if (SL0QM006.XWHCD == "51") /* MEMPHIS APPAREL*/
                if (SL0QW01.SL0QWSWG != "Y") /* wo group not found yet?*/
                  SL0QW01.SL0QWSWG = "Y"; /* set wo grp sw to found*/
                  if (SL8REC.SL8WOPFL == "Y") /* if label exist*/
                    SL0QW01.SL0QWSWF = "Y";
                                   /* set wo lbl sw to found*/
                  end
                end
              end

              if (SL8REC.SL8WOPFL != "Y") /* if label do not exist*/
                SL0QW01.SL0QWSWF = "N";
                                   /* set wo label switch not found*/
              end
            end
          end
        end

        if (SL0QW01.SL0QWSWF == "Y") /* if ALL labels exist*/
          set SL0QM006.SL8WOGRP cursor, modified, bold; /* Highlight*/
                                  /* MOVE 0 TO SL0QM006.SL8WOGRP;/**/
                                   /* work order group number*/
          converseLib.validationFailed(199); /* print invalid - labels exist*/
          SL0QM006.XXXPRCNM = "SL0Q065C"; /* Process name*/
        end
      end

      if (SL0QW01.SL0QWSWG == "N") /* work order group not found*/
        set SL0QM006.SL8WOGRP cursor, modified, bold; /* Highlight*/
          /* MOVE 0 TO SL0QM006.SL8WOGRP;/* work order group number*/
        converseLib.validationFailed(123); /* work order not found on db*/
        SL0QM006.XXXPRCNM = "SL0Q065C"; /* Process name*/
      end

      SL0QS61(); /* close select set on work order grp*/
    end

    SL0QS71(); /* close select set wo grp on mold*/
  end


  if (SL0QM006.SL8WONBR > 0) /* work order number entered*/
    SL0QW01.SL0QWSWO = "N"; /* set ok-to-process sw to no*/

    SL0QS65(); /* verify wo number exists on wolhd01*/
    if (SQLCA.VAGen_SQLCODE == 0) /* work order number found*/
      SL0QW01.SL0QWSWO = "Y"; /* set ok-to-process sw to ok*/

      if (SL0QM006.XWHCD == "51") /* if memphis apparel &*/
        SL0QS-CHK-SL8REC(); /* see if sl8rec ok to be process*/
      end

      if (SL0QW01.SL0QWSWO == "Y") /* ok-to-process record?*/
        if (SL8REC.SL8WOPFL == "Y") /* if label exist -- error*/
          set SL0QM006.SL8WONBR cursor, modified, bold; /* Highlight*/
          converseLib.validationFailed(199); /* print invalid - labels exist*/
          SL0QM006.XXXPRCNM = "SL0Q065C"; /* Process name*/
        end
      end
    end

    if (SL0QW01.SL0QWSWO == "N") /* ok-to-process record not found*/

      SL0QS75(); /* verify wo number exists on womhd01*/
      if (SQLCA.VAGen_SQLCODE == 0) /* work order number found*/
        SL0QW01.SL0QWSWO = "Y"; /* set ok-to-process sw to ok*/

        if (SL0QM006.XWHCD == "51") /* if memphis apparel &*/
          SL0QS-CHK-SLBREC(); /* see if slbrec ok to be process*/
        end

        if (SL0QW01.SL0QWSWO == "Y") /* ok-to-process record?*/
          if (SLBREC.SL8WOPFL == "Y") /* if label exist -- error*/
            set SL0QM006.SL8WONBR cursor, modified, bold; /* Highlight*/
            converseLib.validationFailed(199); /* print invalid - labels exist*/
            SL0QM006.XXXPRCNM = "SL0Q065C"; /* Process name*/
          end
        end
      end

      if (SL0QW01.SL0QWSWO == "N") /* ok-to-process record not found*/
        set SL0QM006.SL8WONBR cursor, modified, bold; /* Highlight*/
        converseLib.validationFailed(82); /* work order not found on db*/
        SL0QM006.XXXPRCNM = "SL0Q065C"; /* Process name*/
      end
    end
  end


end // end SL0Q065-C

// edit "reprint" request
Function SL0Q065-R()
   /* now processing either work order group or work order number*/
   /* but not both -- if both entered it is an error*/

   /* perform edits for requested "reprint labels" process*/

  if (SL0QM006.SL8WOGRP > 0) /* work order group  entered*/
    SL0QW01.SL0QWSWG = "N"; /* set wo group found sw to not found*/
    SL0QW01.SL0QWSWF = "N"; /* set wo label switch to not found*/

    SL0QS70(); /* verify wo group exists on womhd01*/
    if (SQLCA.VAGen_SQLCODE == 0) /* work order group found*/
      SL0QW01.SL0QWSWO = "Y"; /* set ok-to-process sw to ok*/

      if (SL0QM006.XWHCD == "51") /* if memphis apparel &*/
        SL0QS-CHK-SLBREC(); /* see if slbrec ok to be process*/
      end

      if (SL0QW01.SL0QWSWO == "Y") /* ok-to-process record?*/
        SL0QW01.SL0QWSWG = "Y"; /* set wo group switch to found*/
        if (SLBREC.SL8WOPFL == "Y") /* if label exist*/
          SL0QW01.SL0QWSWF = "Y"; /* set wo label switch to found*/
        end
      end

      while (SQLCA.VAGen_SQLCODE == 0)

        SL0QS72(); /* fetch next work order from vwomhd01*/
        if (SQLCA.VAGen_SQLCODE == 0)
          SL0QW01.SL0QWSWO = "Y"; /* set ok-to-process sw to ok*/

          if (SL0QM006.XWHCD == "51") /* if memphis apparel &*/
            SL0QS-CHK-SLBREC(); /* see if slbrec ok to be process*/
          end

          if (SL0QW01.SL0QWSWO == "Y") /* ok-to-process record?*/

            if (SL0QM006.XWHCD == "51") /* MEMPHIS APPAREL*/
              if (SL0QW01.SL0QWSWG != "Y") /* wo group not found yet?*/
                SL0QW01.SL0QWSWG = "Y"; /* set wo grp sw to found*/
                if (SLBREC.SL8WOPFL == "Y") /* if label exist*/
                  SL0QW01.SL0QWSWF = "Y"; /* set wo lbl sw to found*/
                end
              end
            end

            if (SLBREC.SL8WOPFL != "Y") /* if label not exist*/
              SL0QW01.SL0QWSWF = "N"; /* set wo label to not found*/
            end
          end
        end
      end

      if (SL0QW01.SL0QWSWF == "N") /* if not ALL labels exist*/
        set SL0QM006.SL8WOGRP cursor, modified, bold; /* Highlight*/
          /* MOVE 0 TO SL0QM006.SL8WOGRP;/* work order group number*/
        converseLib.validationFailed(200); /* reprint invalid - labels donot exist*/
        SL0QM006.XXXPRCNM = "SL0Q065R"; /* Process name*/
      end
    end

    if (SL0QW01.SL0QWSWG == "N") /* work order group not found*/
      SL0QW01.SL0QWSWF = "N"; /* set wo label switch to not found*/

      SL0QS60(); /* check wo group exists on wolhd01*/
      if (SQLCA.VAGen_SQLCODE == 0) /* work order group found*/
        SL0QW01.SL0QWSWO = "Y"; /* set ok-to-process sw to ok*/

        if (SL0QM006.XWHCD == "51") /* if memphis apparel &*/
          SL0QS-CHK-SL8REC(); /* see if sl8rec ok to be process*/
        end

        if (SL0QW01.SL0QWSWO == "Y") /* ok-to-process record?*/
          SL0QW01.SL0QWSWG = "Y"; /* set wo group switch to found*/
          if (SL8REC.SL8WOPFL == "Y") /* if label exist*/
            SL0QW01.SL0QWSWF = "Y"; /* set wo label switch to found*/
          end
        end

        while (SQLCA.VAGen_SQLCODE == 0)

          SL0QS62(); /* fetch next work order from vwomhd01*/
          if (SQLCA.VAGen_SQLCODE == 0)
            SL0QW01.SL0QWSWO = "Y"; /* set ok-to-process sw to ok*/

            if (SL0QM006.XWHCD == "51") /* if memphis apparel &*/
              SL0QS-CHK-SL8REC(); /* see if sl8rec ok to be process*/
            end

            if (SL0QW01.SL0QWSWO == "Y") /* ok-to-process record?*/

              if (SL0QM006.XWHCD == "51") /* MEMPHIS APPAREL*/
                if (SL0QW01.SL0QWSWG != "Y") /* wo group not found yet?*/
                  SL0QW01.SL0QWSWG = "Y"; /* set wo grp sw to found*/
                  if (SL8REC.SL8WOPFL == "Y") /* if label exist*/
                    SL0QW01.SL0QWSWF = "Y";
                                   /* set wo lbl sw to found*/
                  end
                end
              end

              if (SL8REC.SL8WOPFL != "Y") /* if label not exist*/
                SL0QW01.SL0QWSWF = "N"; /* set wo label to not found*/
              end
            end
          end
        end

        if (SL0QW01.SL0QWSWF == "N") /* if not ALL labels exist*/
          set SL0QM006.SL8WOGRP cursor, modified, bold; /* Highlight*/
                                  /* MOVE 0 TO SL0QM006.SL8WOGRP;/**/
                                   /* work order group number*/
          converseLib.validationFailed(200); /* reprint invalid - labels donot exist*/
          SL0QM006.XXXPRCNM = "SL0Q065R"; /* Process name*/
        end
      end

      if (SL0QW01.SL0QWSWG == "N") /* work order group not found*/
        set SL0QM006.SL8WOGRP cursor, modified, bold; /* Highlight*/
          /* MOVE 0 TO SL0QM006.SL8WOGRP;/* work order group number*/
        converseLib.validationFailed(123); /* work order not found on db*/
        SL0QM006.XXXPRCNM = "SL0Q065R"; /* Process name*/
      end

      SL0QS61(); /* close select set wo grp on live*/
    end

    SL0QS71(); /* close select set wo grp on mold*/
  end

  if (SL0QM006.SL8WONBR > 0) /* work order number entered*/
    SL0QW01.SL0QWSWO = "N"; /* set ok-to-process sw to no*/

    SL0QS75(); /* verify wo number exists on womhd01*/
    if (SQLCA.VAGen_SQLCODE == 0) /* work order number found*/
      SL0QW01.SL0QWSWO = "Y"; /* set ok-to-process sw to ok*/

      if (SL0QM006.XWHCD == "51") /* if memphis apparel &*/
        SL0QS-CHK-SLBREC(); /* see if slbrec ok to be process*/
      end

      if (SL0QW01.SL0QWSWO == "Y") /* ok-to-process record?*/
        if (SLBREC.SL8WOPFL != "Y") /* if labels donot exist -- error*/
          set SL0QM006.SL8WONBR cursor, modified, bold; /* Highlight*/
          converseLib.validationFailed(200); /* reprint invalid - labels donot exist*/
          SL0QM006.XXXPRCNM = "SL0Q065R"; /* Process name*/
        end
      end
    end

    if (SL0QW01.SL0QWSWO == "N") /* ok-to-process record not found*/

      SL0QS65(); /* check wo number exists on wolhd01*/
      if (SQLCA.VAGen_SQLCODE == 0) /* work order number found*/
        SL0QW01.SL0QWSWO = "Y"; /* set ok-to-process sw to ok*/

        if (SL0QM006.XWHCD == "51") /* if memphis apparel &*/
          SL0QS-CHK-SL8REC(); /* see if sl8rec ok to be process*/
        end

        if (SL0QW01.SL0QWSWO == "Y") /* ok-to-process record?*/
          if (SL8REC.SL8WOPFL != "Y")
                                   /* if labels donot exist -- error*/
            set SL0QM006.SL8WONBR cursor, modified, bold; /* Highlight*/
            converseLib.validationFailed(200); /* reprint invalid - labels donot exist*/
            SL0QM006.XXXPRCNM = "SL0Q065R"; /* Process name*/
          end
        end
      end

      if (SL0QW01.SL0QWSWO == "N") /* ok-to-process record not found*/
        set SL0QM006.SL8WONBR cursor, modified, bold; /* Highlight*/
        converseLib.validationFailed(82); /* work order not found on db*/
        SL0QM006.XXXPRCNM = "SL0Q065R"; /* Process name*/
      end
    end
  end


end // end SL0Q065-R

// process valid input request
Function SL0Q066()
   /* ------------------------------------------------------------*/
   /* Enque the internal reader for job submission.*/
   /* Submit the job control through the internal reader.*/
   /* Deque the internal reader after job submission.*/
   /* Indicate that the selected function is completed.*/
   /* ------------------------------------------------------------*/

  if (SL0QW01.SL0QWSWV != "Y" /* if not valid submit*/
   || SL0QM006.SL0QMSFL != "Y") /* submit not verified*/

    exit stack; /* exit to return to map*/
  end

  set SL0QW00 empty; /* Initialize variables work area*/
  set SL0QW06 empty; /* Initialize parameter work area*/

    /* build parameter*/

  SL0QW06.XWHCD = SL0QM006.XWHCD; /* Warehouse code*/
  if (SL0QM006.SL8WOGRP > 0) /* if wo grp entered*/
    SL0QW06.SL0QWWOG = SL0QM006.SL8WOGRP; /* work order group number*/
    SL0QW06.SL0QWSCD = SL0QM006.SL0QWSCD; /* work order schedule*/
  else
    SL0QW06.SL0QWWOG = 0; /* work order group number*/
    SL0QW06.SL0QWSCD = 0; /* work order schedule*/
  end
  if (SL0QM006.SL8WONBR > 0) /* if wo grp entered*/
    SL0QW06.SL0QWWON = SL0QM006.SL8WONBR; /* work order number*/
  else
    SL0QW06.SL0QWWON = 0; /* work order number*/
  end
  SL0QW06.SL0QMLBL = SL0QM006.SL0QMLBL; /* number of labels*/
  SL0QW06.SL0QMGEN = SL0QM006.SL0QMGEN; /* generation number*/
  SL0QW06.SL0QMSLB = SL0QM006.SL0QMSLB; /* number of startup labels*/
  SL0QW06.SL0QMMGS = SL0QM006.SL0QMMGS; /* startup magnum print flag*/
  SL0QW06.SL0QMMGE = SL0QM006.SL0QMMGE; /* end of  magnum print flag*/
  if (SL0QW01.XWHCD == "51") /* Memphis apparel*/
    SL0QW06.SL0QAVFL = SL0QM006.SL0QM-APPAREL-VM-FL; /* apparel/vm fl*/
    SL0QW06.SL0QRPFL = SL0QM006.SL0QM-REPLEN-MANUAL-FLAG; /* man/rp*/
  else
    SL0QW06.SL0QAVFL = " "; /* no apparel/vm fl*/
    SL0QW06.SL0QRPFL = " "; /* no manual/replen fl*/
  end

    /* build sl0qw00*/

  SL0QW00.SL0QWJCL = SL0QW06.SL0QWJCL; /* move parameter card*/
  SL0QW00.SL0QMGEN = SL0QM006.SL0QMGEN; /* generation number*/
  SL0QW00.SL0QMCPY = 1; /* number of copies default to 1*/

  SL0Q026(); /* Enque the internal reader*/

  if (SL0QM006.SL0QMPFL == "C") /* if create and print labels*/

    if (SL0QW01.XWHCD == "02") /* greenland*/
      if (SL0QM-REPLEN-MANUAL-FLAG == "M") /* MANUAL WORK ORDERS*/
        while (SL0QW01.SL0QWSWS == "N") /* Until job is submitted*/

          SL0QW99.SL0QWJCL = SL0QT06.SL0QWJCL[SL0QWIXT]; /* JCL statement*/
          SL0QW01.SL0QTTYP = SL0QT06.SL0QTTYP[SL0QWIXT]; /* Statement type*/

          SL0Q027(); /* Write to the internal reader*/

        end
      end
    end

    if (SL0QW01.XWHCD == "04") /* Memphis Footwear*/
      if (SL0QM-REPLEN-MANUAL-FLAG == "M") /* MANUAL WORK ORDERS*/
        while (SL0QW01.SL0QWSWS == "N") /* Until job is submitted*/

          SL0QW99.SL0QWJCL = SL0QT0E.SL0QWJCL[SL0QWIXT]; /* JCL statement*/
          SL0QW01.SL0QTTYP = SL0QT0E.SL0QTTYP[SL0QWIXT];
                                   /* Statement type*/
          SL0Q027(); /* Write to the internal reader*/

        end
      end
    end

    if (SL0QW01.XWHCD == "07") /* WILSONVILLE*/
      if (SL0QM-REPLEN-MANUAL-FLAG == "M") /* MANUAL WORK ORDERS*/
        while (SL0QW01.SL0QWSWS == "N") /* Until job is submitted*/

          SL0QW99.SL0QWJCL = SL0QT0B.SL0QWJCL[SL0QWIXT]; /* JCL statement*/
          SL0QW01.SL0QTTYP = SL0QT0B.SL0QTTYP[SL0QWIXT];
                                   /* Statement type*/
          SL0Q027(); /* Write to the internal reader*/

        end
      end
    end

    /* *** remove ; ****/
    if (SL0QW01.XWHCD == "51") /* Memphis apparel*/
      if (SL0QM-REPLEN-MANUAL-FLAG == "M") /* MANUAL WORK ORDERS*/
        while (SL0QW01.SL0QWSWS == "N") /* Until job is submitted*/

          SL0QW99.SL0QWJCL = SL0QT08.SL0QWJCL[SL0QWIXT];
          SL0QW01.SL0QTTYP = SL0QT08.SL0QTTYP[SL0QWIXT];

          SL0Q027(); /* Write to the internal reader*/

        end
      end
    end

    if (SL0QW01.XWHCD == "42") /* CANADA  apparel*/
      if (SL0QM-REPLEN-MANUAL-FLAG == "M") /* MANUAL WORK ORDERS*/
        while (SL0QW01.SL0QWSWS == "N") /* Until job is submitted*/

          SL0QW99.SL0QWJCL = SL0QT0R.SL0QWJCL[SL0QWIXT];
          SL0QW01.SL0QTTYP = SL0QT0R.SL0QTTYP[SL0QWIXT];

          SL0Q027(); /* Write to the internal reader*/

        end
      end
    end

  end

  if (SL0QM006.SL0QMPFL == "R") /* if reprint of work order labels*/

    if (SL0QW01.XWHCD == "02") /* GREENLAND*/
      if (SL0QM-REPLEN-MANUAL-FLAG == "R") /* REPLENISHMENT WORK ORDERS*/
        while (SL0QW01.SL0QWSWS == "N") /* Until job is submitted*/

          SL0QW99.SL0QWJCL = SL0QT0A.SL0QWJCL[SL0QWIXT]; /* JCL statement*/
          SL0QW01.SL0QTTYP = SL0QT0A.SL0QTTYP[SL0QWIXT];
                                   /* Statement type*/
          SL0Q027(); /* Write to the internal reader*/

        end
      end
      if (SL0QM-REPLEN-MANUAL-FLAG == "M") /* MANUAL WORK ORDERS*/
        while (SL0QW01.SL0QWSWS == "N") /* Until job is submitted*/

          SL0QW99.SL0QWJCL = SL0QT07.SL0QWJCL[SL0QWIXT]; /* JCL statement*/
          SL0QW01.SL0QTTYP = SL0QT07.SL0QTTYP[SL0QWIXT];
                                   /* Statement type*/
          SL0Q027(); /* Write to the internal reader*/

        end
      end
      if (SL0QM-REPLEN-MANUAL-FLAG == "C") /* CASE LETUP*/
        while (SL0QW01.SL0QWSWS == "N") /* Until job is submitted*/

          SL0QW99.SL0QWJCL = SL0QT0J.SL0QWJCL[SL0QWIXT]; /* JCL statement*/
          SL0QW01.SL0QTTYP = SL0QT0J.SL0QTTYP[SL0QWIXT];
                                   /* Statement type*/
          SL0Q027(); /* Write to the internal reader*/

        end
      end
      if (SL0QM-REPLEN-MANUAL-FLAG == "P") /* PALLET LETUP*/
        while (SL0QW01.SL0QWSWS == "N") /* Until job is submitted*/

          SL0QW99.SL0QWJCL = SL0QT0K.SL0QWJCL[SL0QWIXT]; /* JCL statement*/
          SL0QW01.SL0QTTYP = SL0QT0K.SL0QTTYP[SL0QWIXT];
                                   /* Statement type*/
          SL0Q027(); /* Write to the internal reader*/

        end
      end
    end
    if (SL0QW01.XWHCD == "04") /* Memphis footwear*/
      if (SL0QM-REPLEN-MANUAL-FLAG == "R") /* REPLENISHMENT WORK ORDERS*/
        while (SL0QW01.SL0QWSWS == "N") /* Until job is submitted*/

          SL0QW99.SL0QWJCL = SL0QT0F.SL0QWJCL[SL0QWIXT]; /* JCL statement*/
          SL0QW01.SL0QTTYP = SL0QT0F.SL0QTTYP[SL0QWIXT];
                                   /* Statement type*/
          SL0Q027(); /* Write to the internal reader*/

        end
      end
      if (SL0QM-REPLEN-MANUAL-FLAG == "M") /* MANUAL WORK ORDERS*/
        while (SL0QW01.SL0QWSWS == "N") /* Until job is submitted*/

          SL0QW99.SL0QWJCL = SL0QT0G.SL0QWJCL[SL0QWIXT]; /* JCL statement*/
          SL0QW01.SL0QTTYP = SL0QT0G.SL0QTTYP[SL0QWIXT];
                                   /* Statement type*/
          SL0Q027(); /* Write to the internal reader*/

        end
      end
      if (SL0QM-REPLEN-MANUAL-FLAG == "C") /* CASE LETUP*/
        while (SL0QW01.SL0QWSWS == "N") /* Until job is submitted*/

          SL0QW99.SL0QWJCL = SL0QT0H.SL0QWJCL[SL0QWIXT]; /* JCL statement*/
          SL0QW01.SL0QTTYP = SL0QT0H.SL0QTTYP[SL0QWIXT];
                                   /* Statement type*/
          SL0Q027(); /* Write to the internal reader*/

        end
      end
      if (SL0QM-REPLEN-MANUAL-FLAG == "P") /* PALLET LETUP*/
        while (SL0QW01.SL0QWSWS == "N") /* Until job is submitted*/

          SL0QW99.SL0QWJCL = SL0QT0I.SL0QWJCL[SL0QWIXT]; /* JCL statement*/
          SL0QW01.SL0QTTYP = SL0QT0I.SL0QTTYP[SL0QWIXT];
                                   /* Statement type*/
          SL0Q027(); /* Write to the internal reader*/

        end
      end
    end

    if (SL0QW01.XWHCD == "07") /* WILSONVILLE*/
      if (SL0QM-REPLEN-MANUAL-FLAG == "R") /* REPLENISHMENT WORK ORDERS*/
        while (SL0QW01.SL0QWSWS == "N") /* Until job is submitted*/

          SL0QW99.SL0QWJCL = SL0QT0C.SL0QWJCL[SL0QWIXT]; /* JCL statement*/
          SL0QW01.SL0QTTYP = SL0QT0C.SL0QTTYP[SL0QWIXT];
                                   /* Statement type*/
          SL0Q027(); /* Write to the internal reader*/

        end
      end
      if (SL0QM-REPLEN-MANUAL-FLAG == "M") /* MANUAL WORK ORDERS*/
        while (SL0QW01.SL0QWSWS == "N") /* Until job is submitted*/

          SL0QW99.SL0QWJCL = SL0QT0D.SL0QWJCL[SL0QWIXT]; /* JCL statement*/
          SL0QW01.SL0QTTYP = SL0QT0D.SL0QTTYP[SL0QWIXT];
                                   /* Statement type*/
          SL0Q027(); /* Write to the internal reader*/

        end
      end
      if (SL0QM-REPLEN-MANUAL-FLAG == "C") /* CASE LETUP*/
        while (SL0QW01.SL0QWSWS == "N") /* Until job is submitted*/

          SL0QW99.SL0QWJCL = SL0QT0L.SL0QWJCL[SL0QWIXT]; /* JCL statement*/
          SL0QW01.SL0QTTYP = SL0QT0L.SL0QTTYP[SL0QWIXT];
                                   /* Statement type*/
          SL0Q027(); /* Write to the internal reader*/

        end
      end
      if (SL0QM-REPLEN-MANUAL-FLAG == "P") /* PALLET LETUP*/
        while (SL0QW01.SL0QWSWS == "N") /* Until job is submitted*/

          SL0QW99.SL0QWJCL = SL0QT0M.SL0QWJCL[SL0QWIXT]; /* JCL statement*/
          SL0QW01.SL0QTTYP = SL0QT0M.SL0QTTYP[SL0QWIXT];
                                   /* Statement type*/
          SL0Q027(); /* Write to the internal reader*/

        end
      end
    end

    /* *** remove ; ****/
    if (SL0QW01.XWHCD == "51") /* Memphis apparel*/
      if (SL0QM-REPLEN-MANUAL-FLAG == "R") /* REPLENISHMENT WORK ORDERS*/
        if (SL0QM006.SL0QM-APPAREL-VM-FL == "S") /* APPAREL SINGLE CARTON MOVE*/
          while (SL0QW01.SL0QWSWS == "N") /* Until job is submitted*/

            SL0QW99.SL0QWJCL = SL0QT0U.SL0QWJCL[SL0QWIXT];
            SL0QW01.SL0QTTYP = SL0QT0U.SL0QTTYP[SL0QWIXT];

            SL0Q027(); /* Write to the internal reader*/
            /* ;*/
          end
        else
          if (SL0QM006.SL0QM-APPAREL-VM-FL == "B" /* Basics*/
           || SL0QM006.SL0QM-APPAREL-VM-FL == "C") /* Basics single carton*/
            while (SL0QW01.SL0QWSWS == "N") /* Until job is submitted*/

              SL0QW99.SL0QWJCL = SL0QT0V.SL0QWJCL[SL0QWIXT];
              SL0QW01.SL0QTTYP = SL0QT0V.SL0QTTYP[SL0QWIXT];

              SL0Q027(); /* Write to the internal reader*/
              /* ;*/
            end
          else
            while (SL0QW01.SL0QWSWS == "N") /* Until job is submitted*/

              SL0QW99.SL0QWJCL = SL0QT0Q.SL0QWJCL[SL0QWIXT];
              SL0QW01.SL0QTTYP = SL0QT0Q.SL0QTTYP[SL0QWIXT];

              SL0Q027(); /* Write to the internal reader*/
              /* ;*/
            end
          end
        end
      end
      if (SL0QM-REPLEN-MANUAL-FLAG == "M") /* MANUAL WORK ORDERS*/
        while (SL0QW01.SL0QWSWS == "N") /* Until job is submitted*/

          SL0QW99.SL0QWJCL = SL0QT09.SL0QWJCL[SL0QWIXT];
          SL0QW01.SL0QTTYP = SL0QT09.SL0QTTYP[SL0QWIXT];

          SL0Q027(); /* Write to the internal reader*/

        end
      end
    end
    /* *** remove ; ****/
    if (SL0QW01.XWHCD == "42") /* CANADA*/
      if (SL0QM-REPLEN-MANUAL-FLAG == "R") /* REPLENISHMENT WORK ORDERS*/
        while (SL0QW01.SL0QWSWS == "N") /* Until job is submitted*/

          SL0QW99.SL0QWJCL = SL0QT0T.SL0QWJCL[SL0QWIXT];
          SL0QW01.SL0QTTYP = SL0QT0T.SL0QTTYP[SL0QWIXT];

          SL0Q027(); /* Write to the internal reader*/
          /* ;*/
        end
      end
      if (SL0QM-REPLEN-MANUAL-FLAG == "M") /* MANUAL WORK ORDERS*/
        while (SL0QW01.SL0QWSWS == "N") /* Until job is submitted*/

          SL0QW99.SL0QWJCL = SL0QT0S.SL0QWJCL[SL0QWIXT];
          SL0QW01.SL0QTTYP = SL0QT0S.SL0QTTYP[SL0QWIXT];

          SL0Q027(); /* Write to the internal reader*/

        end
      end
    end

  end

  SL0Q028(); /* Deque the internal reader*/

  SL0QW01.SL0QWMNO = 59; /* Job was submitted*/
  SL0QW01.SL0QMSEL[6] = "*"; /* Indicate function completed*/

  set SL0QM006 initial; /* Clear map output area*/
  SL0QW01.SL0QWSWV = "N"; /* reset switches*/
  SL0QM006.SL0QMSFL = "N";


end // end SL0Q066

// Report Request Menu
Function SL0Q990()
   /* ------------------------------------------------------------*/
   /* Format and display the map.*/
   /* Check the attention identifier used to respond.*/
   /* Reset highlighted fields to normal intensity.*/
   /* Verify the data that was entered.*/
   /* Process the valid input request.*/
   /* ------------------------------------------------------------*/

  SL0Q991(); /* Format and display the map*/

  SL0Q992(); /* Check attention identifier*/

  SL0Q993(); /* Reset fields to normal intensity*/

  SL0Q994(); /* Verify the entered data*/

  SL0Q995(); /* Process valid input request*/


end // end SL0Q990

// Format and display the map
Function SL0Q991()
   /* ------------------------------------------------------------*/
   /* If no error to display, format the map output area.*/
   /* Indicate sound audible alarm for any error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* No error message to display*/

    set SL0QM099 initial; /* Clear map output area*/

    SL0QM099.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

    SL0QM099.XWHCD = SL0QW01.XWHCD; /* WAREHOUSE CODE*/

    SL0QW01.SL0QWIXM = 1; /* Initialize map index*/

    while (SL0QW01.SL0QWIXM <= SL0QW01.SL0QWIXL) /* Until end of array*/

      SL0QM099.SL0QMSEL[SL0QWIXM] = SL0QW01.SL0QMSEL[SL0QWIXM];

      SL0QW01.SL0QWIXM = SL0QW01.SL0QWIXM + 1; /* Increment index*/

    end

    SL0QM099.CAITEM = COMMAREA.CAITEM; /* Application data*/
    COMMAREA.CAITEM = " "; /* Clear application data*/

    if (SL0QW01.SL0QWMNO != 0) /* Job has been submitted*/

      if (SL0QW01.SL0QWMNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SL0QW01.SL0QWMNO);
      end /* Job submitted message number*/
      SL0QW01.SL0QWMNO = 0; /* Reset message number*/

    end

  else

    set SL0QM099 alarm; /* Indicate sound alarm*/

  end

  converse SL0QM099 ;


end // end SL0Q991

// Check attention identifier
Function SL0Q992()
   /* ------------------------------------------------------------*/
   /* Check attention identifier used to invoke the transaction.*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* If transfer failed, display returned error message.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set SL0QM099 initial; /* Clear map output area*/

    SL0QS99(); /* Exit to redisplay map*/

  end

  if (SL0QM099.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      COMMAREA.CATOAP = SL0QM099.CATOAP; /* TO application*/
      COMMAREA.CAITEM = SL0QM099.CAITEM; /* Application data*/

      XSSL001(); /* Exit to another application*/

    else

      converseLib.validationFailed(18); /* Indicate PF key not valid*/

    end

    set SL0QM099.CATOAP cursor, modified, bold; /* Highlight*/

    SL0QM099.XXXPRCNM = "SL0Q992"; /* Process name*/

    SL0QS99(); /* Exit to redisplay map*/

  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    COMMAREA.CATOAP = "SL0M"; /* Stock Locate Master Menu*/

  end

  if (converseVar.eventKey is pf9) /* PF3 was pressed*/

    COMMAREA.CATOAP = "SL0A"; /* Stock Locate product*/
                                    /* inquiry menu*/
  end

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf9) /* or PF9 was pressed*/

    XSSL001(); /* Exit to another application*/

    SL0QM099.XXXPRCNM = "SL0Q992"; /* Process name*/

    SL0QS99(); /* Exit to redisplay map*/

  end

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    SL0QM099.XXXPRCNM = "SL0Q992"; /* Process name*/

    if (converseVar.eventKey is pa1 /* PA1 was pressed*/
     || converseVar.eventKey is pa3) /* or PA3 was pressed*/

      converseLib.clearScreen();
       /* Clear screen before redisplay*/

    end

    SL0QS99(); /* Exit to redisplay map*/

  end


end // end SL0Q992

// Reset highlighted fields
Function SL0Q993()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SL0QM099.XWHCD initialAttributes; /* WAREHOUSE CODE*/

  SL0QW01.SL0QWIXM = 1; /* Initialize index*/

  while (SL0QW01.SL0QWIXM <= SL0QW01.SL0QWIXL) /* Until all lines are reset*/

    set SL0QM099.SL0QMSEL[SL0QWIXM] initialAttributes; /* Reset select tag*/

    SL0QW01.SL0QWIXM = SL0QW01.SL0QWIXM + 1; /* Increment line index*/

  end

  set SL0QM099.CATOAP initialAttributes; /* FAST PATH application*/
  set SL0QM099.CAITEM initialAttributes; /* Application data*/


end // end SL0Q993

// Verify the entered data
Function SL0Q994()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Check for proper select tag.*/
   /* Indicate an error if the line was not selected properly.*/
   /* ------------------------------------------------------------*/

  if (SL0QM099.CAITEM > " ") /* Application data was entered*/

    set SL0QM099.CAITEM cursor, modified, bold; /* Highlight data*/

    converseLib.validationFailed(2); /* Enter only with FAST PATH*/
    SL0QM099.XXXPRCNM = "SL0Q994"; /* Process name*/

  end

  SL0QW01.SL0QWIXM = SL0QW01.SL0QWIXL; /* Initialize line index*/

  while (SL0QW01.SL0QWIXM > 0) /* Until all lines are verified*/

    if (SL0QM099.SL0QMSEL[SL0QWIXM] != SL0QW01.SL0QMSEL[SL0QWIXM]
     && SL0QM099.SL0QMSEL[SL0QWIXM] != " " /* Line was selected*/
     && SL0QM099.SL0QMSEL[SL0QWIXM] != "S") /* and not with an "S"*/

      set SL0QM099.SL0QMSEL[SL0QWIXM] cursor, modified, bold; /* Highlight*/

      converseLib.validationFailed(17); /* Only "S" is valid*/
      SL0QM099.XXXPRCNM = "SL0Q994"; /* Process name*/

    end

    SL0QW01.SL0QWIXM = SL0QW01.SL0QWIXM - 1; /* Decrement line number*/

  end

  if (SL0QM099.XWHCD > " ") /* Whse entered*/
    if (SL0QM099.XWHCD in XWHTBL.XWHCD) /* Whse code in table*/
      if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Whse code active*/

        SL0QW01.XWHCD = SL0QM099.XWHCD; /* Whse code*/
        SLWREC.XWHCD = SL0QM099.XWHCD; /* Whse code*/
        SL0QM099.XWHSABRV = XWHTBL.XWHSABRV[sysVar.arrayIndex]; /* Whse abrv.*/

      else

        set SL0QM099.XWHCD cursor, modified, bold; /* Highlight*/
        SL0QM099.XWHSABRV = " "; /* Whse abrv.*/
        converseLib.validationFailed(10); /* Indicate inactive number*/
        SL0QM099.XXXPRCNM = "SL0Q994"; /* Process name*/
      end
    else
      set SL0QM099.XWHCD cursor, modified, bold; /* Highlight*/
      SL0QM099.XWHSABRV = " "; /* Whse abrv.*/
      converseLib.validationFailed(11); /* Indicate invalid number*/
      SL0QM099.XXXPRCNM = "SL0Q994"; /* Process name*/
    end
  else
    set SL0QM099.XWHCD cursor, modified, bold; /* Highlight*/
    SL0QM099.XWHSABRV = " "; /* Whse abrv.*/
    converseLib.validationFailed(09); /* Indicate required field*/
    SL0QM099.XXXPRCNM = "SL0Q994"; /* Process name*/
  end

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    SL0QS99(); /* Exit to redisplay map*/

  end

  SLWREC.XWHCD = SL0QM099.XWHCD; /* save valid xwhse code int slwrec*/

end // end SL0Q994

// Process valid input request
Function SL0Q995()
   /* ------------------------------------------------------------*/
   /* Indicate the lines that were selected.*/
   /* If no default print destination and at least one report was*/
   /* selected, force selection of printer.*/
   /* ------------------------------------------------------------*/

  SL0QW01.SL0QWIXM = 1; /* Initialize map line index*/

  while (SL0QW01.SL0QWIXM <= SL0QW01.SL0QWIXL) /* Until end of array*/

    if (SL0QM099.SL0QMSEL[SL0QWIXM] != SL0QW01.SL0QMSEL[SL0QWIXM])

      SL0QW01.SL0QMSEL[SL0QWIXM] = SL0QM099.SL0QMSEL[SL0QWIXM];

    end

    SL0QW01.SL0QWIXM = SL0QW01.SL0QWIXM + 1; /* Increment line number*/

  end

  if (SL0QW01.SL0QMRMT == " " /* No default print destination*/
   && SL0QW01.SL0QMSEL[1] != "S") /* and specify printer not selected*/

    SL0QW01.SL0QWIXM = 1; /* Initialize map line index*/

    while (SL0QW01.SL0QWIXM <= SL0QW01.SL0QWIXL /* Until end of selections*/
     && SL0QW01.SL0QMSEL[1] != "S") /* or specification is forced*/

      if (SL0QW01.SL0QMSEL[SL0QWIXM] == "S") /* Report was selected*/

        SL0QW01.SL0QMSEL[1] = "S"; /* Force printer specification*/

      end

      SL0QW01.SL0QWIXM = SL0QW01.SL0QWIXM + 1; /* Increment line number*/

    end

  end

  if (SL0QW01.SL0QMSEL[1] == "S") /* If specify printer selected*/

    SL0QW01.SL0QWIXP = 0; /* Initialize page index*/

  end


end // end SL0Q995

// check sl8rec for whse 51
Function SL0QS-CHK-SL8REC()
   /* ------------------------------------------------------------*/
   /* make sure that womhd (sl8rec) is ok to be processed for*/
   /* ------------------------------------------------------------*/

  if (SL0QM-REPLEN-MANUAL-FLAG == "R" /* REPLENISHMENT WORK ORDERS*/
   && SL0QM006.SL0QM-APPAREL-VM-FL == "S") /* APPAREL SINGLE CARTON MOVE*/
    if (SL8REC.SL8FRAR == "01" /* wolhd from-area eq '01'*/
     && SL0QW01.SL0QFRAR == "N1") /* and work from-area eq not-01?*/
      SL0QW01.SL0QWSWO = "N"; /* do not process this record*/

    else

      if ((SL8REC.SL8FRAR != "01") /* wolhd from-area ne '01'*/
       && SL0QW01.SL0QFRAR == "01") /* and work from-area eq 01?*/
        SL0QW01.SL0QWSWO = "N"; /* do not process this record*/
      end
    end
  end

  if (SL0QW01.SL0QWSWO == "N") /* if record is not to be process*/
    return;
  end


  if (SL8REC.XGPCD != SL0QW01.SL0QWGPC) /* incorrect gpc cd to process*/
    SL0QW01.SL0QWSWO = "N"; /* do not process this record*/
  end

end // end SL0QS-CHK-SL8REC

// check slbrec for whse 51
Function SL0QS-CHK-SLBREC()
   /* ------------------------------------------------------------*/
   /* make sure that womhd (slbrec) is ok to be processed for*/
   /* Note:*/
   /* For Basics, iseg should be 'y93'.*/
   /* ------------------------------------------------------------*/

  if (SL0QM-REPLEN-MANUAL-FLAG == "R"      /* REPLENISHMENT WORK ORDERS*/
   && (SL0QM006.SL0QM-APPAREL-VM-FL == "S" /* APPAREL SINGLE CARTON MOVE*/
   || SL0QM006.SL0QM-APPAREL-VM-FL == "C")) /* Basics single carton move*/
    if (SLBREC.SL8FRAR == "01" /* womhd from-area eq '01'*/
     && SL0QW01.SL0QFRAR == "N1") /* and work from-area eq not-01?*/
      SL0QW01.SL0QWSWO = "N"; /* do not process this record*/

    else

      if ((SLBREC.SL8FRAR != "01") /* womhd from-area ne '01'*/
       && SL0QW01.SL0QFRAR == "01") /* and work from-area eq 01?*/
        SL0QW01.SL0QWSWO = "N"; /* do not process this record*/
      end
    end
  end

  if (SL0QM-REPLEN-MANUAL-FLAG == "R") /* REPLENISHMENT WORK ORDERS*/
    if ((SL0QM006.SL0QM-APPAREL-VM-FL == "B" /* Basics*/
     || SL0QM006.SL0QM-APPAREL-VM-FL == "C")) /* Basics single carton move*/
      if (SLBREC.PC2INSEG != "Y93") /* womhd iseg ne 'Y93'*/
        SL0QW01.SL0QWSWO = "N"; /* do not process this record*/
      end
    else
      if (SLBREC.PC2INSEG == "Y93") /* womhd iseg eq 'Y93'*/
        SL0QW01.SL0QWSWO = "N"; /* do not process this record*/
      end
    end
  end

  if (SL0QW01.SL0QWSWO == "N") /* if record is not to be process*/
    return;
  end


  if (SLBREC.XGPCD != SL0QW01.SL0QWGPC) /* incorrect gpc cd to process*/
    SL0QW01.SL0QWSWO = "N"; /* do not process this record*/
  end

end // end SL0QS-CHK-SLBREC

// CLOSE C2 DSTLOC.VSYLOC01
Function SL0QS-IO1470-C2()
   /* -----------------------------------------------------------*/
   /* CLOSE DSTLOC.VSYLOC02 CURSOR.*/
   /*  */
   /* -----------------------------------------------------------*/

  try
    call "VSYLOC02" ("C2", SQLCA, VSYLOC02) {isNoRefresh = yes, isExternal = yes};
  end /* close set*/

  if (sysVar.errorCode == "00000000") /* call successful*/
    if (SQLCA.VAGen_SQLCODE == 0)
      return;
    end
  end

  converseLib.clearScreen();
  
  TA1REC.TA1LOCAT[1] = "EZERT8 =";
  TA1REC.TA1LOCAT[2] = sysVar.errorCode;
  TA1REC.TA1MAP = "SL0QM007";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1LOC = "SL0QS-VSYLOC02  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
  TA1REC.TA1PGMNO = "SL0Q";
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYLOC02";
  TA1REC.TA1TBLKE = VSYLOC02.VSYLOC02-KEY;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end SL0QS-IO1470-C2

// CLOSE C2 DSTLOC.VSYLOC01
Function SL0QS-IO1470-CH()
   /* -----------------------------------------------------------*/
   /* CLOSE DSTLOC.VSYLOC02 CURSOR.*/
   /*  */
   /* -----------------------------------------------------------*/

  try
    call "VSYLOC02" ("CH", SQLCA, VSYLOC02) {isNoRefresh = yes, isExternal = yes};
  end /* close set*/

  if (sysVar.errorCode == "00000000") /* call successful*/
    if (SQLCA.VAGen_SQLCODE == 0)
      return;
    end
  end

  converseLib.clearScreen();
  
  TA1REC.TA1LOCAT[1] = "EZERT8 =";
  TA1REC.TA1LOCAT[2] = sysVar.errorCode;
  TA1REC.TA1MAP = "SL0QM008";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1LOC = "SL0QS-VSYLOC02  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
  TA1REC.TA1PGMNO = "SL0Q";
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYLOC02";
  TA1REC.TA1TBLKE = VSYLOC02.VSYLOC02-KEY;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end SL0QS-IO1470-CH

// close  c3 trans.vcntn01
Function SL0QS-IO1470-N2()
   /* -----------------------------------------------------------*/
   /* FETCH DSTLOC.VSYLOC01 CURSOR.*/
   /*  */
   /* -----------------------------------------------------------*/

  try
    call "VSYLOC02" ("N2", SQLCA, VSYLOC02) {isNoRefresh = yes, isExternal = yes};
  end /* close set*/

  if (sysVar.errorCode == "00000000") /* call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* AT LEAST ONE ROW RETURNED, OK.*/
     || SQLCA.VAGen_SQLCODE == 100) /* NO ROWS RETUNED, CALLING PROCESS*/
      return; /* HANDLES THIS.*/
    end
  end

  converseLib.clearScreen();
   /* NOT OK.*/
  TA1REC.TA1LOCAT[1] = "EZERT8 =";
  TA1REC.TA1LOCAT[2] = sysVar.errorCode;
  TA1REC.TA1MAP = "SL0QM007";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1LOC = "SL0QS-VSYLOC02  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
  TA1REC.TA1PGMNO = "SL0Q";
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYLOC02";
  TA1REC.TA1TBLKE = VSYLOC02.VSYLOC02-KEY;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end SL0QS-IO1470-N2

// close  c3 trans.vcntn01
Function SL0QS-IO1470-NH()
   /* -----------------------------------------------------------*/
   /* FETCH DSTLOC.VSYLOC02 CURSOR.*/
   /*  */
   /* -----------------------------------------------------------*/

  try
    call "VSYLOC02" ("NH", SQLCA, VSYLOC02) {isNoRefresh = yes, isExternal = yes};
  end /* close set*/

  if (sysVar.errorCode == "00000000") /* call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* AT LEAST ONE ROW RETURNED, OK.*/
     || SQLCA.VAGen_SQLCODE == 100) /* NO ROWS RETUNED, CALLING PROCESS*/
      return; /* HANDLES THIS.*/
    end
  end

  converseLib.clearScreen();
   /* NOT OK.*/
  TA1REC.TA1LOCAT[1] = "EZERT8 =";
  TA1REC.TA1LOCAT[2] = sysVar.errorCode;
  TA1REC.TA1MAP = "SL0QM008";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1LOC = "SL0QS-VSYLOC02  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
  TA1REC.TA1PGMNO = "SL0Q";
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYLOC02";
  TA1REC.TA1TBLKE = VSYLOC02.VSYLOC02-KEY;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end SL0QS-IO1470-NH

// close  c3 trans.vcntn01
Function SL0QS-IO1470-S2()
   /* -----------------------------------------------------------*/
   /* DECLARE AND OPEN CURSOR FOR DSTLOC.VSYLOC01.*/
   /* SELECT BY PRODUCT KEY, IOMOD vsyloc02,'s2'*/
   /* -----------------------------------------------------------*/

  set VSYLOC02 empty;
  VSYLOC02.XWHCD = SL0QM007.XWH-WHSE-CD; /* WHSE*/
  VSYLOC02.XGPCD = SL0QM007.XGP-GPC-CD[SL0QWIXM]; /* GPC*/
  VSYLOC02.SY1STNBR = SL0QM007.SY-STY-NBR[SL0QWIXM]; /* STYLE*/
  VSYLOC02.SY2CLRID = SL0QM007.SY-COLR-CD-ID[SL0QWIXM]; /* COLOR*/
  VSYLOC02.XDMCD = SL0QM007.XDM-DIM-CD[SL0QWIXM]; /* DIM*/
  VSYLOC02.XQACD = SL0QM007.XQA-QUAL-CD[SL0QWIXM]; /* QUALITY*/
  VSYLOC02.XOWCD = SL0QM007.XOW-OWN-GRP-CD[SL0QWIXM]; /* OWNER GRP*/
  VSYLOC02.PC2INSEG = SL0QM007.PC-CU-IN-SEG-CD[SL0QWIXM]; /* ISEG*/
  VSYLOC02.XEGCD = SL0QM007.XEG-ENGR-DIFF-CD[SL0QWIXM]; /* ENG DIFF*/
  VSYLOC02.XUMCD = SL0QM007.XUM-UOM-CD[SL0QWIXM]; /* UNIT MEASURE*/
  VSYLOC02.XSLCD = SL0QM007.XSL-CLASS-CD[SL0QWIXM]; /* UNIT MEASURE*/
  VSYLOC02.XPGCD = "* "; /* PKG TYP (UNUSED)*/
  try
    call "VSYLOC02" ("S2", SQLCA, VSYLOC02) {isNoRefresh = yes, isExternal = yes};
  end /* SELECT CURSOR*/

  if (sysVar.errorCode == "00000000") /* call successful*/
    if (SQLCA.VAGen_SQLCODE == 0)
      return;
    end
  end

  converseLib.clearScreen();
  
  TA1REC.TA1LOCAT[1] = "EZERT8 =";
  TA1REC.TA1LOCAT[2] = sysVar.errorCode;
  TA1REC.TA1MAP = "SL0QM007";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1LOC = "SL0QS-VSYLOC02  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
  TA1REC.TA1PGMNO = "SL0Q";
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYLOC02";
  TA1REC.TA1TBLKE = VSYLOC02.VSYLOC02-KEY;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end SL0QS-IO1470-S2

// close  c3 trans.vcntn01
Function SL0QS-IO1470-SH()
   /* -----------------------------------------------------------*/
   /* DECLARE AND OPEN CURSOR FOR DSTLOC.VSYLOC02.*/
   /* SELECT BY LOCATION, IOMOD VSYLOC02 'SH'.*/
   /* -----------------------------------------------------------*/

  set VSYLOC02 empty;
  VSYLOC02.XWHCD = SL0QM008.XWH-WHSE-CD; /* WHSE*/
  VSYLOC02.XARCD = SL0QM008.XAR-AREA-CD[SL0QWIXM]; /* AREA*/
  VSYLOC02.SL4ZONE = SL0QM008.SL-ZONE-CD[SL0QWIXM]; /* ZONE*/
  VSYLOC02.SL5LOCTN = SL0QM008.SL-LOC-CD[SL0QWIXM]; /* LOCATION*/
  try
    call "VSYLOC02" ("SH", SQLCA, VSYLOC02) {isNoRefresh = yes, isExternal = yes};
  end /* SELECT CURSOR*/

  if (sysVar.errorCode == "00000000") /* call successful*/
    if (SQLCA.VAGen_SQLCODE == 0)
      return;
    end
  end

  converseLib.clearScreen();
  
  TA1REC.TA1LOCAT[1] = "EZERT8 =";
  TA1REC.TA1LOCAT[2] = sysVar.errorCode;
  TA1REC.TA1MAP = "SL0QM008";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1LOC = "SL0QS-VSYLOC02  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
  TA1REC.TA1PGMNO = "SL0Q";
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYLOC02";
  TA1REC.TA1TBLKE = VSYLOC02.VSYLOC02-KEY;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end SL0QS-IO1470-SH

// select set DSTLOC.VRCVSH01
Function SL0QS10()

   /* ************************************************************/
   /* *** select set on  the STLOC.VRCVSH01 for selected      ****/
   /* *** container and whse and fetch a row                  ****/
   /* ************************************************************/

  set VRCVSH01 empty;

  VRCVSH01.TS3CNTNR = SL0QM004.TSHCNTNR[SL0QWIXM];
  VRCVSH01.XWHCD = SL0QM004.XWHCD;
   /* MOVE 'RC' TO TSHREC.TSHSTAT;*/

  try
    call "VRCVSH01" ("S1", SQLCA, VRCVSH01) {isNoRefresh = yes, isExternal = yes};
  end /* select set*/

  if (sysVar.errorCode == "00000000") /* call successful*/

    if (SQLCA.VAGen_SQLCODE == 0)
      try
        call "VRCVSH01" ("N1", SQLCA, VRCVSH01) {isNoRefresh = yes, isExternal = yes};
      end /* fetch*/

      if (sysVar.errorCode == "00000000") /* call successful*/
        if (SQLCA.VAGen_SQLCODE == 0
         || SQLCA.VAGen_SQLCODE == +100)
          return;
        end
      end
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == -911)  
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
    converseLib.clearScreen();
    
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1LOC = "SELECT SET AND FETCH S2";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
  TA1REC.TA1PGMNO = "S10";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VRCVSH01";
  TA1REC.TA1TBLKE = VRCVSH01.RCVSHPKEY;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end SL0QS10

// close  c1 dstloc.vrcvsh01
Function SL0QS20()

   /* ************************************************************/
   /* *** close cursor c1 on the stloc.vrcvsh01               ****/
   /* ***                                                     ****/
   /* ************************************************************/


  try
    call "VRCVSH01" ("C1", SQLCA, VRCVSH01) {isNoRefresh = yes, isExternal = yes};
  end /* close set*/

  if (sysVar.errorCode == "00000000") /* call successful*/

    if (SQLCA.VAGen_SQLCODE == 0)
      return;
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == -911)  
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
    converseLib.clearScreen();
    
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1LOC = "CLOSE CURSOR C1 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
  TA1REC.TA1PGMNO = "S20";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VRCVSH01";
  TA1REC.TA1TBLKE = VRCVSH01.RCVSHPKEY;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end SL0QS20

// get current date minus 30
Function SL0QS50()

   /* ************************************************************/
   /* *** get current date minus 30 days                      ****/
   /* ************************************************************/

  set TA2REC empty;

  TA2REC.TA2DTOPT = "GETDATE "; /* date option*/
  TA2REC.TA2DYAOD = -30; /* days to add*/

  try
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
  end /* get current date -30*/

  if (sysVar.errorCode == "00000000") /* call successful*/
    if (TA2REC.TA2RTNCD == 0)
      return;
    end
  end

  TAEREC.TAEDESC1 = sysVar.errorCode;

  TA1REC.TA1FUNC = "RETN";
  converseLib.clearScreen();

  TA1REC.TA1TYPE = "APPL";
  TA1REC.TA1LOC = "GET CURRENT DATE -30   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
  TA1REC.TA1PGMNO = "S50";
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP;
  TA1REC.TA1MAPNO = "M004";
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end SL0QS50

// select set 5 dstloc.vwolhd01
Function SL0QS60()

   /* ************************************************************/
   /* *** select set on dstloc.vwolhd01 where for whse and    ****/
   /* *** work order group                                    ****/
   /* ************************************************************/

  set SL8REC empty;

  SL8REC.XWHCD = SL0QM006.XWHCD;
  SL8REC.SL8WOGRP = SL0QM006.SL8WOGRP;

  try
    call "IO1510" ("S5", SQLCA, SL8REC) {isNoRefresh = yes, isExternal = yes};
  end /* select set*/

  if (sysVar.errorCode == "00000000") /* call successful*/

    if (SQLCA.VAGen_SQLCODE == 0)
      try
        call "IO1510" ("N5", SQLCA, SL8REC) {isNoRefresh = yes, isExternal = yes};
      end /* fetch*/

      if (sysVar.errorCode == "00000000") /* call successful*/
        if (SQLCA.VAGen_SQLCODE == 0
         || SQLCA.VAGen_SQLCODE == +100)
          return;
        end
      end
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == -911)  
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
    converseLib.clearScreen();
    
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1LOC = "SELECT SET AND FETCH S5";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
  TA1REC.TA1PGMNO = "S60";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VWOLHD01";
  TA1REC.TA1TBLKE = SL8REC.SL8KEY;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end SL0QS60

// close  c5 dstloc.vwolhd01
Function SL0QS61()

   /* ************************************************************/
   /* *** close cursor c5 on dstloc.vwolhd01                  ****/
   /* ************************************************************/


  try
    call "IO1510" ("C5", SQLCA, SL8REC) {isNoRefresh = yes, isExternal = yes};
  end /* close set*/

  if (sysVar.errorCode == "00000000") /* call successful*/

    if (SQLCA.VAGen_SQLCODE == 0)
      return;
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == -911)  
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
    converseLib.clearScreen();
    
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1LOC = "CLOSE CURSOR C5 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
  TA1REC.TA1PGMNO = "S61";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VWOLHD01";
  TA1REC.TA1TBLKE = SL8REC.SL8KEY;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end SL0QS61

// fetch next 5 dstloc.vwolhd01
Function SL0QS62()

   /* ************************************************************/
   /* *** fetch next on dstloc.vwolhd01 where for whse and    ****/
   /* *** work order group                                    ****/
   /* ************************************************************/

  if (SQLCA.VAGen_SQLCODE == 0)
    try
      call "IO1510" ("N5", SQLCA, SL8REC) {isNoRefresh = yes, isExternal = yes};
    end /* fetch*/

    if (sysVar.errorCode == "00000000") /* call successful*/
      if (SQLCA.VAGen_SQLCODE == 0
       || SQLCA.VAGen_SQLCODE == +100)
        return;
      end
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == -911)  
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
    converseLib.clearScreen();
    
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1LOC = "FETCH NEXT N5 VWOLHD01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
  TA1REC.TA1PGMNO = "S62";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VWOLHD01";
  TA1REC.TA1TBLKE = SL8REC.SL8KEY;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end SL0QS62

// select unique dstloc.vwolhd01
Function SL0QS65()

   /* ************************************************************/
   /* *** select unique dstloc.vwolhd01  for whse and         ****/
   /* *** work order number                                   ****/
   /* ************************************************************/

  set SL8REC empty;

  SL8REC.XWHCD = SL0QM006.XWHCD;
  SL8REC.SL8WONBR = SL0QM006.SL8WONBR;

  try
    call "IO1510" ("S ", SQLCA, SL8REC) {isNoRefresh = yes, isExternal = yes};
  end /* unique*/

  if (sysVar.errorCode == "00000000") /* call successful*/

    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == +100)
      return;
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == -911)  
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
    converseLib.clearScreen();
    
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1LOC = "SELECT UNIQUE  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
  TA1REC.TA1PGMNO = "S65";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VWOLHD01";
  TA1REC.TA1TBLKE = SL8REC.SL8KEY;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end SL0QS65

// select set 5 dstloc.vwomhd01
Function SL0QS70()

   /* ************************************************************/
   /* *** select set on dstloc.vwomhd01 where for whse and    ****/
   /* *** work order group                                    ****/
   /* ************************************************************/

  set SLBREC empty;

  SLBREC.XWHCD = SL0QM006.XWHCD;
  SLBREC.SL8WOGRP = SL0QM006.SL8WOGRP;

  try
    call "IO1530" ("S5", SQLCA, SLBREC) {isNoRefresh = yes, isExternal = yes};
  end /* select set*/

  if (sysVar.errorCode == "00000000") /* call successful*/

    if (SQLCA.VAGen_SQLCODE == 0)
      try
        call "IO1530" ("N5", SQLCA, SLBREC) {isNoRefresh = yes, isExternal = yes};
      end /* fetch*/

      if (sysVar.errorCode == "00000000") /* call successful*/
        if (SQLCA.VAGen_SQLCODE == 0
         || SQLCA.VAGen_SQLCODE == +100)
          return;
        end
      end
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == -911)  
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
    converseLib.clearScreen();
    
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1LOC = "SELECT SET AND FETCH S5";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
  TA1REC.TA1PGMNO = "S70";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VWOMHD01";
  TA1REC.TA1TBLKE = SLBREC.SLBKEY;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end SL0QS70

// close  c5 dstloc.vwomhd01
Function SL0QS71()

   /* ************************************************************/
   /* *** close cursor c5 on dstloc.vwomhd01                  ****/
   /* ************************************************************/


  try
    call "IO1530" ("C5", SQLCA, SLBREC) {isNoRefresh = yes, isExternal = yes};
  end /* close set*/

  if (sysVar.errorCode == "00000000") /* call successful*/

    if (SQLCA.VAGen_SQLCODE == 0)
      return;
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == -911)  
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
    converseLib.clearScreen();
    
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1LOC = "CLOSE CURSOR C5 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
  TA1REC.TA1PGMNO = "S71";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VWOMHD01";
  TA1REC.TA1TBLKE = SLBREC.SLBKEY;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end SL0QS71

// fetch next 5 dstloc.vwomhd01
Function SL0QS72()

   /* ************************************************************/
   /* *** fetch next on dstloc.vwomhd01 where for whse and    ****/
   /* *** work order group                                    ****/
   /* ************************************************************/

  if (SQLCA.VAGen_SQLCODE == 0)
    try
      call "IO1530" ("N5", SQLCA, SLBREC) {isNoRefresh = yes, isExternal = yes};
    end /* fetch*/

    if (sysVar.errorCode == "00000000") /* call successful*/
      if (SQLCA.VAGen_SQLCODE == 0
       || SQLCA.VAGen_SQLCODE == +100)
        return;
      end
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == -911)  
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
    converseLib.clearScreen();
    
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1LOC = "FETCH NEXT ON VWOMHD01 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
  TA1REC.TA1PGMNO = "S72";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VWOMHD01";
  TA1REC.TA1TBLKE = SLBREC.SLBKEY;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end SL0QS72

// select unique dstloc.vwomhd01
Function SL0QS75()

   /* ************************************************************/
   /* *** select unique dstloc.vwolhd01  for whse and         ****/
   /* *** work order number                                   ****/
   /* ************************************************************/

  set SLBREC empty;

  SLBREC.XWHCD = SL0QM006.XWHCD;
  SLBREC.SL8WONBR = SL0QM006.SL8WONBR;

  try
    call "IO1530" ("S ", SQLCA, SLBREC) {isNoRefresh = yes, isExternal = yes};
  end /* unique*/

  if (sysVar.errorCode == "00000000") /* call successful*/

    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == +100)
      return;
    end
  end

  TA1REC.TA1MAP = sysVar.errorCode;
  TAEREC.SQLCAREC = SQLCA.SQLCAREC;

  if (sysVar.errorCode == "00000000" /* call successful*/
   && SQLCA.VAGen_SQLCODE == -911)  
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
    converseLib.clearScreen();
    
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1LOC = "SELECT UNIQUE  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP;
  TA1REC.TA1PGMNO = "S75";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VWOMHD01";
  TA1REC.TA1TBLKE = SLBREC.SLBKEY;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

  exit stack;

end // end SL0QS75

// Clear selections and exit
Function SL0QS99()
   /* ------------------------------------------------------------*/
   /* Reset any selections in working storage.*/
   /* Exit to redisplay the selection menu map.*/
   /* ------------------------------------------------------------*/

  SL0QW01.SL0QWIXM = 1; /* Initialize map index*/

  while (SL0QW01.SL0QWIXM <= SL0QW01.SL0QWIXL) /* Until end of array*/

    if (SL0QW01.SL0QMSEL[SL0QWIXM] == "S") /* Entry is selected*/

      SL0QW01.SL0QMSEL[SL0QWIXM] = " "; /* Reset entry*/

    end

    SL0QW01.SL0QWIXM = SL0QW01.SL0QWIXM + 1; /* Increment index*/

  end

  exit stack; /* Exit to redisplay map*/


end // end SL0QS99

//*** RECORD=SL0QW00 ****
// JCL variable storage for SL0Q - Report Request Menu
// ***********************
Record SL0QW00 type basicRecord
  10 SL0QMCPY SL0QMCPY ; 
  10 SL0QMGEN SL0QMGEN ; 
  10 SL0QWJCL SL0QWJCL ; 
end // end SL0QW00

//*** RECORD=SL0QW01 ****
// Working storage for SL0Q - Report Request Menu
// ***********************
Record SL0QW01 type basicRecord
  10 XWHCD XWHCD ; 
  10 XGPCD XGPCD ; 
  10 SL0QWUID SL0QWUID ; 
  10 SL0QWIXL SL0QWIXL ; 
  10 SL0QWIXM SL0QWIXM ; 
  10 SL0QWIX2 SL0QWIX2 ; 
  10 SL0QWIXP SL0QWIXP ; 
  10 SL0QWIXS SL0QWIXS [10] ; 
  10 SL0QWIXT SL0QWIXT ; 
  10 SL0QMRMT SL0QMRMT ; 
  10 SL0QMDES SL0QMDES ; 
  10 SL0QWSWA SL0QWSWA ; 
  10 SL0QWSWL SL0QWSWL [10000] ; 
  10 SL0QWSWP SL0QWSWP ; 
  10 SL0QWSWS SL0QWSWS ; 
  10 SL0QWSWF SL0QWSWF ; 
  10 SL0QWSWG SL0QWSWG ; 
  10 SL0QWSWO SL0QWSWO ; 
  10 SL0QWSWV SL0QWSWV ; 
  10 SL0QWMNO SL0QWMNO ; 
  10 SL0QTTYP SL0QTTYP ; 
  10 SL0QMSEL SL0QMSEL [98] ; 
  10 SL0QWGPC SL0QWGPC ; 
  10 SL0QFRAR SL0QFRAR ; 
end // end SL0QW01

//*** RECORD=SL0QW02 ****
// Parameters for SL5371 - Stock Locate Prod/Locs on request
// ***********************
Record SL0QW02 type basicRecord
  10 SL0QWJCL SL0QWJCL ; 
    15 SL0QMWHS SL0QMWHS ; 
    15 * char(1) ; 
    15 SL0QMGPF SL0QMGPF ; 
    15 SL0QMGPT SL0QMGPT ; 
    15 * char(1) ; 
    15 SL0QMQLF SL0QMQLF ; 
    15 SL0QMQLT SL0QMQLT ; 
    15 * char(1) ; 
    15 SL0QMPDF SL0QMPDF ; 
    15 SL0QMPDT SL0QMPDT ; 
    15 * char(1) ; 
    15 SL0QMBLK SL0QMBLK ; 
    15 SL0QMPRC SL0QMPRC ; 
    15 SL0QMRCV SL0QMRCV ; 
    15 SL0QMPKH SL0QMPKH ; 
    15 SL0QMRTN SL0QMRTN ; 
    15 SL0QMSHP SL0QMSHP ; 
    15 * char(48) ; 
end // end SL0QW02

//*** RECORD=SL0QW03 ****
// Parameters for SL5671 - Stock Locate neqative quantities rpt
// ***********************
Record SL0QW03 type basicRecord
  10 SL0QWJCL SL0QWJCL ; 
    15 SL0QMWHS SL0QMWHS ; 
    15 * char(1) ; 
    15 SL0QMQLF SL0QMQLF ; 
    15 SL0QMQLT SL0QMQLT ; 
    15 * char(73) ; 
end // end SL0QW03

//*** RECORD=SL0QW04 ****
// Parameters for SL5471 - Stock Locate container report
// ***********************
Record SL0QW04 type basicRecord
  10 SL0QWJCL SL0QWJCL ; 
    15 XWHCD XWHCD ; 
    15 TSHCNTNR TSHCNTNR ; 
    15 * char(64) ; 
end // end SL0QW04

//*** RECORD=SL0QW05 ****
// Parameters for SL6410 - PRODUCTION SETASIDE REPORT
// ***********************
Record SL0QW05 type basicRecord
  10 SL0QWJCL SL0QWJCL ; 
    15 XWHCD XWHCD ; 
    15 * char(78) ; 
end // end SL0QW05

//*** RECORD=SL0QW06 ****
// Parameters for SL6481 - creates and prints work order labels
//                         use whse, wo group number, wo number
// Parameters for SL6501 - reprints work order labels using
//                         whse, wo group number, wo number and
//                         generation number.
// ***********************
Record SL0QW06 type basicRecord
  10 SL0QWJCL SL0QWJCL ; 
    15 XWHCD XWHCD ; 
    15 SL0QWWOG SL0QWWOG ; 
    15 SL0QWWON SL0QWWON ; 
    15 SL0QMLBL SL0QMLBL ; 
    15 SL0QMGEN SL0QMGEN ; 
    15 SL0QMSLB SL0QMSLB ; 
    15 SL0QMMGS SL0QMMGS ; 
    15 SL0QMMGE SL0QMMGE ; 
    15 SL0QWSCD SL0QWSCD ; 
    15 * char(11) ; 
    15 SL0QAVFL SL0QAVFL ; 
    15 SL0QRPFL SL0QRPFL ; 
    15 * char(37) ; 
end // end SL0QW06

//*** RECORD=SL0QW07 ****
// ------------------------------------------------------------
// CONTROL CARD LAYOUT FOR SL111D. PRODUCT QUNATITY BY PRODUCT
// CODE REPORT. THIS SHOULD MATCH WSL1111 IN PANVALET. THIS
// PARM IS USED BY JCL SL0QT0N
// ------------------------------------------------------------
// ***********************
Record SL0QW07 type basicRecord
  5 SL0QWJCL SL0QWJCL ; 
    10 XWH-WHSE-CD XWH-WHSE-CD ; 
    10 * char(1) ; 
    10 XGP-GPC-CD XGP-GPC-CD ; 
    10 * char(1) ; 
    10 SY-STY-NBR SY-STY-NBR ; 
    10 * char(1) ; 
    10 SY-COLR-CD-ID SY-COLR-CD-ID ; 
    10 * char(1) ; 
    10 XDM-DIM-CD XDM-DIM-CD ; 
    10 * char(1) ; 
    10 XQA-QUAL-CD XQA-QUAL-CD ; 
    10 * char(1) ; 
    10 XOW-OWN-GRP-CD XOW-OWN-GRP-CD ; 
    10 * char(1) ; 
    10 PC-CU-IN-SEG-CD PC-CU-IN-SEG-CD ; 
    10 * char(1) ; 
    10 XEG-ENGR-DIFF-CD XEG-ENGR-DIFF-CD ; 
    10 * char(1) ; 
    10 XUM-UOM-CD XUM-UOM-CD ; 
    10 * char(1) ; 
    10 XSL-CLASS-CD XSL-CLASS-CD ; 
    10 * char(40) ; 
end // end SL0QW07

//*** RECORD=SL0QW08 ****
// ------------------------------------------------------------
// CONTROL CARD LAYOUT FOR SL111D. PRODUCT QUNATITY BY LOCATION
// CODE REPORT. THIS SHOULD MATCH WSL1101 IN PANVALET. THIS
// PARM IS USED BY JCL SL0QT0P
// ------------------------------------------------------------
// ***********************
Record SL0QW08 type basicRecord
  5 SL0QWJCL SL0QWJCL ; 
    10 SL0QW-PARM-RUN-MODE SL0QW-PARM-RUN-MODE ; 
    10 * char(1) ; 
    10 XWH-WHSE-CD XWH-WHSE-CD ; 
    10 * char(1) ; 
    10 SL0QW-FROM-LOC SL0QW-FROM-LOC ; 
      15 XAR-AREA-CD XAR-AREA-CD ; 
      15 * char(1) ; 
      15 SL-ZONE-CD SL-ZONE-CD ; 
      15 * char(1) ; 
      15 SL-LOC-CD SL-LOC-CD ; 
    10 * char(1) ; 
    10 SL0QW-TO-LOC SL0QW-TO-LOC ; 
      15 XAR-TO-AREA-CD XAR-TO-AREA-CD ; 
      15 * char(1) ; 
      15 SL-TO-ZONE-CD SL-TO-ZONE-CD ; 
      15 * char(1) ; 
      15 SL-TO-LOC-CD SL-TO-LOC-CD ; 
    10 * char(45) ; 
end // end SL0QW08

//*** RECORD=SL0QW99 ****
// System internal reader queue (INTR) record definition.
// ***********************
Record SL0QW99 type serialRecord  {
  fileName = "INTR"
  }
  10 SL0QWJCL SL0QWJCL ; 
end // end SL0QW99

//*** RECORD=SL0QW9G ****
// This record is a redefinition of the Job Control Language
// statement.  It is used to define the columns to be used to
// insert the GDG cataloged procedure parameter (SL0QMGEN).
// ***********************
Record SL0QW9G type basicRecord // VAGen Info - redefined SL0QW99
  10 * char(20) ; 
  10 SL0QMGEN SL0QMGEN ; 
  10 * char(58) ; 
end // end SL0QW9G

//*** RECORD=SL0QW9J ****
// This record is a redefinition of the Job Control Language
// statement.  It is used to define the columns to be used to
// insert the JOB name user identification (UT1USRID).
// ***********************
Record SL0QW9J type basicRecord // VAGen Info - redefined SL0QW99
  10 * char(4) ; 
  10 SL0QWUID SL0QWUID ; 
  10 * char(70) ; 
end // end SL0QW9J

//*** RECORD=SL0QW9N ****
// This record is a redefinition of the Job Control Language
// statement.  It is used to define the columns to be used to
// insert the NOTIFY user identification (UT1USRID).
// ***********************
Record SL0QW9N type basicRecord // VAGen Info - redefined SL0QW99
  10 * char(22) ; 
  10 SL0QWUID SL0QWUID ; 
  10 * char(52) ; 
end // end SL0QW9N

//*** RECORD=SL0QW9O ****
// This record is a redefinition of the Job Control Language
// statement.  It is used to define the columns to be used to
// insert the OUTPUT remote printer identification (SL0QMRMT)
// and the number of copies to print (SL0QMCPY).
// ***********************
Record SL0QW9O type basicRecord // VAGen Info - redefined SL0QW99
  10 * char(33) ; 
  10 SL0QMCPY SL0QMCPY ; 
  10 * char(6) ; 
  10 SL0QMRMT SL0QMRMT ; 
  10 * char(34) ; 
end // end SL0QW9O

//*** RECORD=SL0QW9W ****
// This record is a redefinition of the Job Control Language
// statement.  It is used to define the columns to be used to
// insert the WHSE cataloged procedure parameter (XWHCD).
// ***********************
Record SL0QW9W type basicRecord // VAGen Info - redefined SL0QW99
  10 * char(21) ; 
  10 XWHCD XWHCD ; 
  10 * char(57) ; 
end // end SL0QW9W

// TO LOCATION FOR RANGE
DataItem SL-TO-LOC-CD char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TO ZONE FOR RANGE
DataItem SL-TO-ZONE-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// APPAREL/VISUAL MERCHANDIZE FL
DataItem SL0QAVFL char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// work from area code
DataItem SL0QFRAR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// bulk location flag
DataItem SL0QMBLK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Number of copies to print
DataItem SL0QMCPY num(1)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Default printer description
DataItem SL0QMDES char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Print from generation number
DataItem SL0QMGEN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// from gpc number
DataItem SL0QMGPF char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// to gpc number
DataItem SL0QMGPT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// number of labels
DataItem SL0QMLBL num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// magnum print end flag
DataItem SL0QMMGE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// magnum print start flag
DataItem SL0QMMGS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// from product style
DataItem SL0QMPDF char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// to product style
DataItem SL0QMPDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pack & hold location flag
DataItem SL0QMPKH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// processing location flag
DataItem SL0QMPRC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// from quality code
DataItem SL0QMQLF char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// to quality code
DataItem SL0QMQLT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// receiving location flag
DataItem SL0QMRCV char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Default printer destination
DataItem SL0QMRMT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// returns location flag
DataItem SL0QMRTN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// select field
DataItem SL0QMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// shipping location flag
DataItem SL0QMSHP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// number of setup labels
DataItem SL0QMSLB num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// requested warehouse
DataItem SL0QMWHS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL0QRPFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL0QW-FROM-LOC char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// RUN MODE PARM FOR SL110D
DataItem SL0QW-PARM-RUN-MODE char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL0QW-TO-LOC char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work gpc code
DataItem SL0QWGPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Second index for map fields
DataItem SL0QWIX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Limit for map fields index
DataItem SL0QWIXL smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem SL0QWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for page number
DataItem SL0QWIXP smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for starting table
DataItem SL0QWIXS smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for table fields
DataItem SL0QWIXT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Job submitted message number
DataItem SL0QWMNO num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// REPLENISMENT SCHEDULE NUMBER
DataItem SL0QWSCD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// database not found switch
DataItem SL0QWSWA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work order label found switch
DataItem SL0QWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work order grp found switch
DataItem SL0QWSWG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Line error switch
DataItem SL0QWSWL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ok to process record switch
DataItem SL0QWSWO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Page full switch
DataItem SL0QWSWP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Job submitted switch
DataItem SL0QWSWS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// verify job submit switch
DataItem SL0QWSWV char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NIKE user identification
DataItem SL0QWUID char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work order group number
DataItem SL0QWWOG num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work order number
DataItem SL0QWWON num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TO AREA FOR RANGE
DataItem XAR-TO-AREA-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XSL_CLASS_CD
DataItem XSL-CLASS-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

