package sl08;
import corpcom1.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import pc.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=SL08 ****
// UCC 128 carton ID maintenance.
// ;
// This application allows users to diable 128 carton Id's or
// get them in sync with the Syloc table.
// ;
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// Aprlproj 09/05/97  OVAZQU  new program
// ;
// *********************
Program SL08 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  SL08W00 SL08W00; // record
  SL08W01 SL08W01; // record
  SL08W02 SL08W02; // record
  SL20REC SL20REC; // record
  SL6REC SL6REC; // record
  SLWREC SLWREC; // record
  SQLCA SQLCA; // record
  SYPREC SYPREC; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VCTNID01 VCTNID01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use SL00ENU; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use SL08M.SL08M001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPSL001: XPSL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    set SL08M001 initial; /* M001 input/output*/
    set SL08W00 empty; /* Working storage*/
    set SL08W01 empty; /* Working storage ts record*/
    set SQLCA empty; /* SQL communication area*/
    set ERRSQLCA empty; /* SQL communication errors area*/
    set SL6REC empty; /* Syloc row*/
    set VCTNID01 empty; /* 128 Crtn ID row*/
    set SL20REC empty; /* 128 Crtn ID i/o mod record*/
    set SYPREC empty; /* Size desc. translation rec*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* TS paging control record*/

    SL08M001.XWHCD = SLWREC.XWHCD;
    SL08W00.SL08WSWR = "N";
    SL08W00.SL08WSWF = "N";
    SL08W00.XXXTSLEN = 1500;


     /* ------------------------------------------------------------*/
     /* Flow to mainline processing*/
     /* ------------------------------------------------------------*/
    goto SL08001;


    SL08001: SL08001();
    goto SL08001;
    SL08002: SL08002();
    goto SL08002; /* Converse map*/

  end // end main
end // end SL08

// Main Process
Function SL08001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SL08S100-GET-DATA(); /* Obtain the data to display*/

  SL08S200-CNVRS-MAP(); /* Format and display the map*/

  SL08S300-CHK-PFKEY(); /* Check attention identifier*/

  SL08S400-RST-FLDS(); /* Reset fields to normal intensity*/

  SL08S500-VRFY-DATA(); /* Verify the entered data*/

  SL08S600-PROC-RQST(); /* Process valid input request*/

end // end SL08001

// Converse map
Function SL08002()
  converse SL08M001 ;
end // end SL08002

// inquiry : sz xlate : 0
Function SL08S-CALL-SY1190()
   /* ************************************************************/
   /* *** obtain the desired size description/size id (no.)   ****/
   /* *** using the std module:  SY1190                       ****/
   /* *** code the following before this is executed:         ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* ***   note: or setup during init. & use a comment       ****/
   /* ***   SYPREC.SYPFC:   PC = all valid sizes              ****/
   /* ***                   IE = int. sz id to desc.          ****/
   /* ***                   EI = desc. to int. sz id          ****/
   /* ***   SYPREC.SYPCMPSW: Y = compressed (first blank or   ****/
   /* ***                        zero is end of data)         ****/
   /* ***                    N = not compressed (positional)  ****/
   /* *** code the action for the following return codes:     ****/
   /* *** note: check the SYPREC.SYPRC (NOT sqlcode)          ****/
   /* ***      0 = successful                                 ****/
   /* ***      9 = deadlock                                   ****/
   /* ***     10 = not found                                  ****/
   /* ***  other = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** call sy1190                                         ****/
   /* *** note: func & compress sw setup prior to this sgrp   ****/
   /* ************************************************************/

  call "SY1190" (SQLCA, SYPREC) {isNoRefresh = yes, isExternal = yes};

  if (SYPREC.SYPRC == 0
   || SYPREC.SYPRC == 9
   || SYPREC.SYPRC == 10)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "CALL-SY1190";
  TA1REC.TA1LOCAT[1] = "SY1190  ";
  TA1REC.TA1LOCAT[3] = SYPREC.SYPRCX;
  TA1REC.TA1LOCAT[4] = "SZ XLATE";
  TA1REC.TA1DBASE = "MULTIPLE";
  TA1REC.TA1TBLVU = "DB VIEWS";
  TA1REC.TA1TBLKE = SYPREC.SYPKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};


end // end SL08S-CALL-SY1190

// add temporary storage
Function SL08S-TS-ADD()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  SL08W01.XXXTSLEN = SL08W00.XXXTSLEN;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (SL08W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set SL08W01 empty; /* m001 display storage*/

    SL08W00.SL08WIDX = 1; /* Display line index*/

    SL08W00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SL08W00.XXXLOCID = "TSA"; /* Module identification*/
  converseLib.validationFailed(109); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SL08W00.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL08S-TS-ADD

// purge temporary storage
Function SL08S-TS-PURGE()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set SL08W01 empty; /* m001 temporary storage detail*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  SL08W00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (SL08W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SL08W00.XXXLOCID = "TSP"; /* Module identification*/
  converseLib.validationFailed(109); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SL08W00.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL08S-TS-PURGE

// read temporary storage
Function SL08S-TS-READ()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  SL08W01.XXXTSLEN = SL08W00.XXXTSLEN;
  TA5REC.TA5TSQIX = SL08W00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (SL08W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SL08W00.XXXLOCID = "TSR"; /* Module identification*/
  converseLib.validationFailed(109); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SL08W00.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL08S-TS-READ

// update temporary storage
Function SL08S-TS-UPDT()
   /* ------------------------------------------------------------*/
   /* Update temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (SL08W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SL08W00.XXXLOCID = "TSU"; /* Module identification*/
  converseLib.validationFailed(109); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SL08W00.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL08S-TS-UPDT

// Call Vctnid01 tbl i/o mod
Function SL08S-VCTNID-IO()
   /* -------------------------------------------------------------------*/
   /* call vctnid01 to do vctnid01 i/o's*/
   /* -------------------------------------------------------------------*/

  set SL20REC empty;
  SL20REC.SL20W-RQST-TYP = SL08W00.SL08W-RQST-TYP;
  SL20REC.XXXPGMNB = "SL08";
  SL20REC.SL20W-VCTNID01 = VCTNID01.VCTNID01-DATA;

  call "SL0020" (SL20REC) {isNoRefresh = yes, isExternal = yes}; /* call vctnid io mod*/

   /* ------------------------------------------------------------*/
   /* Check return codes*/
   /* ------------------------------------------------------------*/
  if (SL20REC.SL20W-RTRN-CD == 0
   && (SL20REC.SL20W-RTRN-SQLCD == 0
   || SL20REC.SL20W-RTRN-SQLCD == 100))
    VCTNID01.VCTNID01-DATA = SL20REC.SL20W-VCTNID01;
  else
    SL08W00.XXXLOCID = "CTN";
    if (SL20REC.SL20W-RTRN-SQLCD == -911)
      converseLib.validationFailed(31); /* contention*/
    else
      converseLib.validationFailed(103); /* unexpected return*/
    end
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Rollback updates*/
  end


end // end SL08S-VCTNID-IO

// get screen data
Function SL08S100-GET-DATA()
   /* ------------------------------------------------------------*/
   /* If an error was found, return to the previous process*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0 /* An error was found*/
   || SL08W00.SL08WSWR == "N")          /* or no data was requested*/
    return; /* Return to previous process*/
  end


   /* ------------------------------------------------------------*/
   /* purge temporary storage*/
   /* ------------------------------------------------------------*/
  SL08S-TS-PURGE(); /* purge temporary storage*/


   /* ------------------------------------------------------------*/
   /* Reset total counters*/
   /* ------------------------------------------------------------*/
  SL08W00.SL08W-TOT-CRTNS = 0;
  SL08W00.SL08W-TOT-QTY = 0;


   /* ------------------------------------------------------------*/
   /* Clear the map.*/
   /* ------------------------------------------------------------*/
  set SL08M001 initial; /* reset map*/
  SL08M001.XWHCD = SL08W00.XWHCD;
  SL08M001.TS-UCC-128-CD = SL08W00.TS-UCC-128-CD;
  SL08M001.XARCD = SL08W00.XARCD;
  SL08M001.SL4ZONE = SL08W00.SL4ZONE;
  SL08M001.SL5LOCTN = SL08W00.SL5LOCTN;


   /* ------------------------------------------------------------*/
   /* obtain data from 128 carton ID table*/
   /* ------------------------------------------------------------*/
  SL08S120-GET-CTNID(); /* get dstloc.vctnid01 info*/


   /* ------------------------------------------------------------*/
   /* If an error was found, return to the previous process*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* An error was found*/
    return; /* Return to previous process*/
  end


   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/
  SL08W00.XXXTSPAG = 1;
  SL08W00.SL08WSWF = "Y"; /* Request to format data switch*/
  SL08W00.SL08WSWR = "N"; /* Reset request for data switch*/


end // end SL08S100-GET-DATA

// Get data from Dstloc.Vctnid01
Function SL08S120-GET-CTNID()
   /* ------------------------------------------------------------*/
   /* obtain data from Vctnid01 db2 table*/
   /* ------------------------------------------------------------*/

  SL08W00.SL08WIDX = 1;
  SL08W00.XXXTSPAG = 1;


  set VCTNID01 empty;
  VCTNID01.XWHCD = SL08W00.XWHCD;
  VCTNID01.TS-UCC-128-CD = SL08W00.TS-UCC-128-CD;
  VCTNID01.XARCD = SL08W00.XARCD;
  VCTNID01.SL4ZONE = SL08W00.SL4ZONE;
  VCTNID01.SL5LOCTN = SL08W00.SL5LOCTN;

  if (SL08W00.TS-UCC-128-CD > " ")
    SL08W00.SL08W-RQST-TYP = "S1"; /* Open Vctnid*/
  else
    SL08W00.SL08W-RQST-TYP = "S2"; /* Open Vctnid*/
  end
  SL08S-VCTNID-IO();

  if (SL20REC.SL20W-RTRN-CD == 0    
   && SL20REC.SL20W-RTRN-SQLCD == 0 /* good return codes*/
   && converseVar.validationMsgNum == 0)

    if (SL08W00.SL08W-RQST-TYP == "S1")
      SL08W00.SL08W-RQST-TYP = "N1"; /* Fetch Vctnid01*/
    else
      SL08W00.SL08W-RQST-TYP = "N2"; /* Fetch Vctnid01*/
    end
    SL08S-VCTNID-IO();

    while (SL20REC.SL20W-RTRN-CD == 0
     && SL20REC.SL20W-RTRN-SQLCD == 0
     && converseVar.validationMsgNum == 0)

      SL08S122-LOAD-TS(); /* move vctnid data to ts record*/
      SL08S-VCTNID-IO(); /* fetch next vctnid01*/
    end
  end


   /* ------------------------------------------------------------*/
   /* See if incomplete ts page to write*/
   /* ------------------------------------------------------------*/
  if (SL20REC.SL20W-RTRN-CD == 0)
    if (SL20REC.SL20W-RTRN-SQLCD == 0
     || SL20REC.SL20W-RTRN-SQLCD == 100) /* good return codes*/

      if (SL08W00.SL08WIDX > 1) /* incomplete page?*/
        SL08S-TS-ADD(); /* insert ts record*/
      end
    end
  end


   /* ------------------------------------------------------------*/
   /* if no data found, display message*/
   /* ------------------------------------------------------------*/
  if (SL08W00.TA5TSQIX == 0 /* no ts pages written*/
   && converseVar.validationMsgNum == 0) /* no error found*/
    SL08W00.XXXLOCID = "120";
    converseLib.validationFailed(214); /* no data for display*/
  end


   /* ------------------------------------------------------------*/
   /* see if any errors found, if so, do not format screen*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* error found*/
    SL08W00.SL08WSWF = "N"; /* do not try to format screen*/
    exit stack;
  end


end // end SL08S120-GET-CTNID

// move ctnid data to ts record
Function SL08S122-LOAD-TS()
   /* -------------------------------------------------------------------*/
   /* move Vctnid data to line on ts record*/
   /* -------------------------------------------------------------------*/
  if (SL08W00.TS-UCC-128-CD > " ") /* ucc cd was entered on screen*/
    SL08W01.SL08W-ALT-KEY[SL08WIDX] = " ";
    SL08W01.XARCD[SL08WIDX] = VCTNID01.XARCD;
    SL08W01.SL4ZONE[SL08WIDX] = VCTNID01.SL4ZONE;
    SL08W01.SL5LOCTN[SL08WIDX] = VCTNID01.SL5LOCTN;
  else /* location info was entered on screen*/
    SL08W01.SL08W-ALT-KEY[SL08WIDX] = VCTNID01.TS-UCC-128-CD;
  end
  SL08W01.XGPCD[SL08WIDX] = VCTNID01.XGPCD;
  SL08W01.SY1STNBR[SL08WIDX] = VCTNID01.SY1STNBR;
  SL08W01.SY2CLRID[SL08WIDX] = VCTNID01.SY2CLRID;
  SL08W01.XDMCD[SL08WIDX] = VCTNID01.XDMCD;
  SL08W01.XQACD[SL08WIDX] = VCTNID01.XQACD;
  SL08W01.XOWCD[SL08WIDX] = VCTNID01.XOWCD;
  SL08W01.PC2INSEG[SL08WIDX] = VCTNID01.PC2INSEG;
  SL08W01.XEGCD[SL08WIDX] = VCTNID01.XEGCD;
  SL08W01.XPGCD[SL08WIDX] = VCTNID01.XPGCD;
  SL08W01.XUMCD[SL08WIDX] = VCTNID01.XUMCD;
  SL08W01.SY5SZID[SL08WIDX] = VCTNID01.SY5SZID;
  SL08W01.SL6ONHND[SL08WIDX] = VCTNID01.SL6ONHND;
  SL08W01.SWEPLLNB[SL08WIDX] = VCTNID01.SWEPLLNB;
  SL08W01.SL2CASE[SL08WIDX] = VCTNID01.SL2CASE;
  SL08W01.FY1FCTYC[SL08WIDX] = VCTNID01.FY1FCTYC;
  SL08W01.PC3PONBR[SL08WIDX] = VCTNID01.PC3PONBR;
  SL08W01.SL8WOGRP[SL08WIDX] = VCTNID01.SL8WOGRP;
  SL08W01.SL8WONBR[SL08WIDX] = VCTNID01.SL8WONBR;
  SL08W01.SL-SCAN-SEQ-NBR[SL08WIDX] = VCTNID01.SL-SCAN-SEQ-NBR;
  SL08W01.SL-CRTN-STAT-CD[SL08WIDX] = VCTNID01.SL-CRTN-STAT-CD;
  SL08W01.SL-CONV-GRP-CD[SL08WIDX] = VCTNID01.SL-CONV-GRP-CD;
  SL08W01.ZZZSDT[SL08WIDX] = VCTNID01.ZZZSDT;
  SL08W01.ZZZCHGDT[SL08WIDX] = VCTNID01.ZZZCHGDT;
  SL08W01.ZZZCHGTM[SL08WIDX] = VCTNID01.ZZZCHGTM;

  SL08S1222-GETSZDSC(); /* get size description*/
  if (VCTNID01.SY5SZID > 0
   && VCTNID01.SY5SZID < 41)
    SL08W00.SL08WWDX = VCTNID01.SY5SZID;
    if (SYPREC.SY4IDDSC[SL08WWDX] > " ")
      SL08W01.SY4IDDSC[SL08WIDX] = SYPREC.SY4IDDSC[SL08WWDX];
    else
      SL08W00.SL08W-SZID-DSPLY = VCTNID01.SY5SZID;
      SL08W01.SY4IDDSC[SL08WIDX] = SL08W00.SL08W-SZID-DSPLY;
    end
  else
    if (VCTNID01.SY5SZID > 0)
      SL08W00.SL08W-SZID-DSPLY = VCTNID01.SY5SZID;
      SL08W01.SY4IDDSC[SL08WIDX] = SL08W00.SL08W-SZID-DSPLY;
    else
      SL08W01.SY4IDDSC[SL08WIDX] = "ERROR";
    end
  end


  if (VCTNID01.SL-CRTN-STAT-CD == "A") /* active carton*/
    SL08W00.SL08W-TOT-QTY = SL08W00.SL08W-TOT-QTY + VCTNID01.SL6ONHND;
    SL08W00.SL08W-TOT-CRTNS = SL08W00.SL08W-TOT-CRTNS + 1;
  end

   /* ------------------------------------------------------------*/
   /* increment index and see if a new page needed.*/
   /* ------------------------------------------------------------*/
  SL08W00.SL08WIDX = SL08W00.SL08WIDX + 1;

  if (SL08W00.SL08WIDX > 12)
    SL08S-TS-ADD(); /* insert ts record*/

    SL08W00.SL08WIDX = 1;
    SL08W00.XXXTSPAG = SL08W00.XXXTSPAG + 1;
  end


   /* ------------------------------------------------------------*/
   /* see if any errors found, if so, do not format screen*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* error found*/
    SL08W00.SL08WSWF = "N"; /* do not try to format screen*/
    exit stack;
  end


end // end SL08S122-LOAD-TS

// get size translations
Function SL08S1222-GETSZDSC()
   /* ************************************************************/
   /* *** avoid getting the same information twice.           ****/
   /* ************************************************************/
  if (VCTNID01.XGPCD == SYPREC.XGPCD
   && VCTNID01.SY1STNBR == SYPREC.SY1STNBR
   && VCTNID01.SY2CLRID == SYPREC.SY2CLRID
   && VCTNID01.XDMCD == SYPREC.XDMCD)
    return;
  end


   /* ************************************************************/
   /* *** obtain all valid size data for use during detail    ****/
   /* *** (size) row creation                                 ****/
   /* ************************************************************/
  set SYPREC empty;
  SYPREC.SYPFC = "PC";
  SYPREC.SYPCMPSW = "N";
  SYPREC.XGPCD = VCTNID01.XGPCD;
  SYPREC.SY1STNBR = VCTNID01.SY1STNBR;
  SYPREC.SY2CLRID = VCTNID01.SY2CLRID;
  SYPREC.XDMCD = VCTNID01.XDMCD;
  SYPREC.XQACD = "**";

  SL08S-CALL-SY1190(); /* <=== get size xlations SY1190*/

  if (SYPREC.SYPRC == 0)
     /* ** next sentence ***/
  else
    if (SYPREC.SYPRC == 9)
      SL08W00.XXXLOCID = "SZD";
      converseLib.validationFailed(31); /* -911 - try again*/
      exit stack;
    else
      /* ** next sentence **      Any other error, just display size ID*/
    end
  end


end // end SL08S1222-GETSZDSC

// Converse map
Function SL08S200-CNVRS-MAP()
   /* ------------------------------------------------------------*/
   /* format top & bottom info on map*/
   /* ------------------------------------------------------------*/
  SL08M001.XWHCD = SLWREC.XWHCD; /* warehouse code*/
  SL08M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  SL08M001.XXXTSPAG = SL08W00.XXXTSPAG;
  SL08M001.TA5TSQIX = SL08W00.TA5TSQIX;

  SL08M001.SL08M-TOT-CRTNS = SL08W00.SL08W-TOT-CRTNS;
  SL08M001.SL08M-TOT-QTY = SL08W00.SL08W-TOT-QTY;


   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* Message to display*/
    SL08M001.XXXLOCID = SL08W00.XXXLOCID; /* Module identification*/
    set SL08M001 alarm; /* Indicate sound alarm*/
  end


   /* ------------------------------------------------------------*/
   /* See if data needs to be formatted.*/
   /* ------------------------------------------------------------*/
  if (SL08W00.SL08WSWF == "Y" /* Needs to format data*/
   && converseVar.validationMsgNum == 0) /* and no errors found*/
    SL08S220-FRMT-DATA();
  end


   /* ------------------------------------------------------------*/
   /* if no data to show or not an "active" carton, protect action cd*/
   /* ------------------------------------------------------------*/
  SL08W00.SL08WIDX = 1;
  while (SL08W00.SL08WIDX < 13)
    if (SL08M001.SL-CRTN-STAT-CD[SL08WIDX] == "A") /* active carton*/
      set SL08M001.SL08M-ACTION-CD[SL08WIDX] normal;
      set SL08M001.SL08M-ACTION-CD[SL08WIDX] underline;
    else
      set SL08M001.SL08M-ACTION-CD[SL08WIDX] invisible, skip;
    end
    SL08W00.SL08WIDX = SL08W00.SL08WIDX + 1; /* increment index*/
  end


   /* ------------------------------------------------------------*/
   /* CONVERSE THE MAP*/
   /* ------------------------------------------------------------*/
  SL08002(); /* Converse map*/


   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/
  SL08W00.XXXLOCID = " "; /* Module identification*/
  converseLib.validationFailed(0);


end // end SL08S200-CNVRS-MAP

// format screen lines
Function SL08S220-FRMT-DATA()
   /* ------------------------------------------------------------*/
   /* Get data from TS to be displayed on screen.*/
   /* ------------------------------------------------------------*/
  SL08S-TS-READ();


   /* ------------------------------------------------------------*/
   /* Format data on map.*/
   /* ------------------------------------------------------------*/
  SL08W00.SL08WIDX = 1;
  while (SL08W00.SL08WIDX < 13)
    SL08M001.SL08M-ACTION-CD[SL08WIDX] = " ";
    SL08M001.SL08M-ALT-KEY[SL08WIDX] = SL08W01.SL08W-ALT-KEY[SL08WIDX];
    SL08M001.SL-CRTN-STAT-CD[SL08WIDX] = SL08W01.SL-CRTN-STAT-CD[SL08WIDX];
    SL08M001.SY1STNBR[SL08WIDX] = SL08W01.SY1STNBR[SL08WIDX];
    SL08M001.SY2CLRID[SL08WIDX] = SL08W01.SY2CLRID[SL08WIDX];
    SL08M001.XDMCD[SL08WIDX] = SL08W01.XDMCD[SL08WIDX];
    SL08M001.XQACD[SL08WIDX] = SL08W01.XQACD[SL08WIDX];
    SL08M001.XOWCD[SL08WIDX] = SL08W01.XOWCD[SL08WIDX];
    SL08M001.PC2INSEG[SL08WIDX] = SL08W01.PC2INSEG[SL08WIDX];
    SL08M001.XUMCD[SL08WIDX] = SL08W01.XUMCD[SL08WIDX];
    SL08M001.SY4IDDSC[SL08WIDX] = SL08W01.SY4IDDSC[SL08WIDX];
    SL08M001.SL6ONHND[SL08WIDX] = SL08W01.SL6ONHND[SL08WIDX];
    SL08M001.ZZZCHGDT[SL08WIDX] = SL08W01.ZZZCHGDT[SL08WIDX];
    SL08M001.ZZZCHGTM[SL08WIDX] = SL08W01.ZZZCHGTM[SL08WIDX];

    SL08W00.SL08WIDX = SL08W00.SL08WIDX + 1;
  end

  SL08W00.SL08WSWF = "N"; /* reset format screen sw*/


end // end SL08S220-FRMT-DATA

// check attention identifier
Function SL08S300-CHK-PFKEY()
   /* ------------------------------------------------------------*/
   /* Check attention identifier*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/


   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* refresh map*/
    exit stack; /* Exit to display map*/
  end


   /* ------------------------------------------------------------*/
   /* if fast path entered, only enter key is valid*/
   /* ------------------------------------------------------------*/
  if (SL08M001.CATOAP > " " /* Fast path requested, but*/
   && converseVar.eventKey not enter) /* ENTER was not pressed*/

    SL08W00.XXXLOCID = "300"; /* Module identification*/
    converseLib.validationFailed(258); /* Only "enter" valid w/fast path*/
    set SL08M001.CATOAP cursor, bold;
    exit stack;
  end


   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf1) /* PF1 was pressed*/
    COMMAREA.CATOAP = "GD00";

    XSPF1(); /* Exit to the HELP facility*/

    SL08M001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    SL08W00.XXXLOCID = "300"; /* Module identification*/
    exit stack; /* Exit to display map*/
  end


   /* ------------------------------------------------------------*/
   /* If END was requested, make sure user re-requests PF3 if*/
   /* location information was entered.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    COMMAREA.CATOAP = "SL0M"; /* Stock Locate main menu*/
    COMMAREA.CAUSERA = SLWREC.SLWGROUP; /* COMMAREA user area*/

    XSEXIT(); /* Invoke selected application*/

    SL08M001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    SL08W00.XXXLOCID = "300"; /* Module identification*/
    exit stack; /* Exit to display map*/
  end


   /* ------------------------------------------------------------*/
   /* Exit to Main Menu was requested*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf4) /* PF4 was pressed*/

    XSPF4(); /* Exit to system main menu*/

    SL08M001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    SL08W00.XXXLOCID = "300"; /* Module identification*/
    exit stack; /* Exit to display map*/
  end


   /* ------------------------------------------------------------*/
   /* if fast path entered: exit immeditately*/
   /* ------------------------------------------------------------*/
  if (SL08M001.CATOAP > " ")
    COMMAREA.CATOAP = SL08M001.CATOAP;
    COMMAREA.CAITEM = SL08M001.CAITEM;

    XSEXIT();

    SL08W00.XXXLOCID = "300"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    SL08M001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    set SL08M001.CATOAP cursor, bold;
    exit stack;
  end


   /* ------------------------------------------------------------*/
   /* Check for invalid key requested*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is enter /* ENTER was pressed*/
   || converseVar.eventKey is pf7   /* or pf7*/
   || converseVar.eventKey is pf8)  /* or pf8*/
  /* next sentence*/
  else
    SL08W00.XXXLOCID = "300"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    exit stack; /* Exit to display map*/
  end


   /* ------------------------------------------------------------*/
   /* Check for invalid scroll requested*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7) /* Scroll back request*/
    if (SL08W00.XXXTSPAG < 2) /* and no previous pages*/
      converseLib.validationFailed(7); /* No previous page to display*/
      SL08W00.XXXLOCID = "300"; /* Module identification*/
      exit stack; /* Exit to display map*/
    end
  end

  if (converseVar.eventKey is pf8) /* Scroll forward request*/
    if (SL08W00.XXXTSPAG >= SL08W00.TA5TSQIX) /* and no more pages*/
      converseLib.validationFailed(8); /* No more pages to display*/
      SL08W00.XXXLOCID = "300"; /* Module identification*/
      exit stack; /* Exit to display map*/
    end
  end


end // end SL08S300-CHK-PFKEY

// Reset enterable fields
Function SL08S400-RST-FLDS()
   /* ------------------------------------------------------------*/
   /* reset enterable fields to DEFINED intensity.*/
   /* ------------------------------------------------------------*/

  set SL08M001.XWHCD initialAttributes;
  set SL08M001.TS-UCC-128-CD initialAttributes, cursor;
  set SL08M001.XARCD initialAttributes;
  set SL08M001.SL4ZONE initialAttributes;
  set SL08M001.SL5LOCTN initialAttributes;
  set SL08M001.CATOAP initialAttributes;
  set SL08M001.CAITEM initialAttributes;

  SL08W00.SL08WIDX = 1;
  while (SL08W00.SL08WIDX < 13)
    set SL08M001.SL08M-ACTION-CD[SL08WIDX] initialAttributes;
    SL08W00.SL08WIDX = SL08W00.SL08WIDX + 1; /* increment index*/
  end


end // end SL08S400-RST-FLDS

// verify entered data
Function SL08S500-VRFY-DATA()
   /* ------------------------------------------------------------*/
   /* Edit entered data*/
   /* ------------------------------------------------------------*/
  if (SL08M001.XWHCD != SL08W00.XWHCD) /* new whse cd*/
    if (SL08M001.XWHCD in XWHTBL.XWHCD)
      if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        SL08M001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      else
        SL08M001.XWHABRV = " ";
        SL08W00.XXXLOCID = "500";
        converseLib.validationFailed(10); /* <--- inactive msg*/
        set SL08M001.XWHCD cursor, bold;
        exit stack; /* go to display error message*/
      end
    else
      SL08M001.XWHABRV = " ";
      SL08W00.XXXLOCID = "500";
      converseLib.validationFailed(11); /* <--- invalid value msg*/
      set SL08M001.XWHCD cursor, bold;
      exit stack; /* go to display error message*/
    end
    SLWREC.XWHCD = SL08M001.XWHCD;
    COMMAREA.XWHCD = SL08M001.XWHCD;
  end


  if (SL08M001.TS-UCC-128-CD > " " /* carton ID*/
   || (SL08M001.XARCD > " "        /* or location on screen*/
   && SL08M001.SL4ZONE > " "       
   && SL08M001.SL5LOCTN > " "))   
    /* next sentence*/
  else
    SL08W00.XXXLOCID = "500";
    converseLib.validationFailed(9); /* data is required*/
    set SL08M001.TS-UCC-128-CD cursor, bold;
    set SL08M001.XARCD bold;
    set SL08M001.SL4ZONE bold;
    set SL08M001.SL5LOCTN bold;
    exit stack; /* go to display error message*/
  end


  if (SL08M001.TS-UCC-128-CD > " ") /* if there is a carton ID*/
    if (SL08M001.XARCD > " " /* there should not be loctn info*/
     || SL08M001.SL4ZONE > " "
     || SL08M001.SL5LOCTN > " ")
      SL08W00.XXXLOCID = "500";
      converseLib.validationFailed(30); /* mutually exclusive entry fields*/
      set SL08M001.TS-UCC-128-CD cursor, bold;
      set SL08M001.XARCD bold;
      set SL08M001.SL4ZONE bold;
      set SL08M001.SL5LOCTN bold;
      exit stack; /* go to display error message*/
    end
  end


  if (SL08M001.XWHCD == SL08W00.XWHCD
   && SL08M001.TS-UCC-128-CD == SL08W00.TS-UCC-128-CD
   && SL08M001.XARCD == SL08W00.XARCD
   && SL08M001.SL4ZONE == SL08W00.SL4ZONE
   && SL08M001.SL5LOCTN == SL08W00.SL5LOCTN)
    /* next sentence*/
  else /* key data has changed*/
    if (converseVar.eventKey not enter)
      SL08W00.XXXLOCID = "500";
      converseLib.validationFailed(264); /* invalid pf key when entering data*/
      exit stack; /* go to display error message*/
    end
    if ("D" in SL08M001.SL08M-ACTION-CD
     || "U" in SL08M001.SL08M-ACTION-CD)
      SL08W00.XXXLOCID = "500";
      converseLib.validationFailed(30); /* cannot change key and action cds*/
      set SL08M001.SL08M-ACTION-CD[sysVar.arrayIndex] cursor, bold;
      set SL08M001.XWHCD bold;
      set SL08M001.TS-UCC-128-CD bold;
      set SL08M001.XARCD bold;
      set SL08M001.SL4ZONE bold;
      set SL08M001.SL5LOCTN bold;
      exit stack; /* go to display error message*/
    end
  end


  SL08W00.SL08WIDX = 12;
  while (SL08W00.SL08WIDX > 0)
    if (SL08M001.SL08M-ACTION-CD[SL08WIDX] == " "
     || SL08M001.SL08M-ACTION-CD[SL08WIDX] == "D"
     || SL08M001.SL08M-ACTION-CD[SL08WIDX] == "U")
      /* next sentence*/
    else
      SL08W00.XXXLOCID = "500";
      converseLib.validationFailed(11); /* invalid data*/
      set SL08M001.SL08M-ACTION-CD[SL08WIDX] cursor, bold;
    end
    SL08W00.SL08WIDX = SL08W00.SL08WIDX - 1; /* decrement index*/
  end

  if (converseVar.validationMsgNum > 0) /* errors found?*/
    exit stack; /* go to display error message*/
  end


  if ("D" in SL08M001.SL08M-ACTION-CD
   || "U" in SL08M001.SL08M-ACTION-CD)
    if (converseVar.eventKey not enter)
      SL08W00.XXXLOCID = "500";
      converseLib.validationFailed(18); /* invalid pf key when entering data*/
      set SL08M001.SL08M-ACTION-CD[sysVar.arrayIndex] cursor, bold;
      exit stack; /* go to display error message*/
    end
  end


  if (SL08M001.CATOAP == " "
   && SL08M001.CAITEM > " ")
    SL08W00.XXXLOCID = "500";
    converseLib.validationFailed(259); /* data valid only w/fast path*/
    set SL08M001.CAITEM cursor, bold;
    exit stack; /* go to display error message*/
  end


end // end SL08S500-VRFY-DATA

// Process request
Function SL08S600-PROC-RQST()
   /* --------------------------------------------------------*/
   /* See if just a scroll request*/
   /* --------------------------------------------------------*/
  if (converseVar.eventKey is pf7) /* scroll backwards*/
    SL08W00.XXXTSPAG = SL08W00.XXXTSPAG - 1;
    SL08W00.SL08WSWF = "Y"; /* set format map switch*/
    return;
  end

  if (converseVar.eventKey is pf8) /* scroll forward*/
    SL08W00.XXXTSPAG = SL08W00.XXXTSPAG + 1;
    SL08W00.SL08WSWF = "Y"; /* set format map switch*/
    return;
  end


   /* --------------------------------------------------------*/
   /* See if new data entered*/
   /* --------------------------------------------------------*/
  if (SL08M001.XWHCD == SL08W00.XWHCD
   && SL08M001.TS-UCC-128-CD == SL08W00.TS-UCC-128-CD
   && SL08M001.XARCD == SL08W00.XARCD
   && SL08M001.SL4ZONE == SL08W00.SL4ZONE
   && SL08M001.SL5LOCTN == SL08W00.SL5LOCTN)
    /* next sentence*/
  else /* new key data entered*/
    SL08W00.XWHCD = SL08M001.XWHCD;
    SL08W00.TS-UCC-128-CD = SL08M001.TS-UCC-128-CD;
    SL08W00.XARCD = SL08M001.XARCD;
    SL08W00.SL4ZONE = SL08M001.SL4ZONE;
    SL08W00.SL5LOCTN = SL08M001.SL5LOCTN;
    SL08W00.SL08WSWR = "Y"; /* retrieve data*/
    SL08W00.SL08WSWF = "Y"; /* format data on screen*/
    return;
  end


   /* --------------------------------------------------------*/
   /* Process update requests*/
   /* --------------------------------------------------------*/
  SL08W00.SL08WSWU = "N";
  SL08W00.SL08WIDX = 12;
  while (SL08W00.SL08WIDX > 0)
    if (SL08M001.SL08M-ACTION-CD[SL08WIDX] != " ")
      SL08S620-PROC-UPDT();
    end
    SL08W00.SL08WIDX = SL08W00.SL08WIDX - 1;
  end

  if (SL08W00.SL08WSWU == "Y" /* updates were done*/
   && converseVar.validationMsgNum == 0) /* and no errors found*/
    SL08S-TS-UPDT(); /* update ts record*/
    VAGen_EZEMSG = "UPDATES WERE SUCCESSFUL";
    SL08W00.SL08WSWF = "Y"; /* reformat screen*/
  end


end // end SL08S600-PROC-RQST

Function SL08S620-PROC-UPDT()
   /* --------------------------------------------------------*/
   /* Process update requests*/
   /* --------------------------------------------------------*/
  SL08W00.SL08WSWC = "N";
  SL08S622-LOADCTNID(); /* build vctnid01 from sl08m001/sl08w01*/

  if (SL08M001.SL08M-ACTION-CD[SL08WIDX] == "D")
    SL08W00.SL08WSWU = "Y";
    SL08W00.SL08WSWC = "Y";
    SL08W00.SL08W-TOT-CRTNS = SL08W00.SL08W-TOT-CRTNS - 1;
    SL08W00.SL08W-TOT-QTY = SL08W00.SL08W-TOT-QTY - VCTNID01.SL6ONHND;
    VCTNID01.SL-CRTN-STAT-CD = "I";
    SL08W01.SL-CRTN-STAT-CD[SL08WIDX] = "I";
  else
    if (SL08M001.SL08M-ACTION-CD[SL08WIDX] == "U") /* sync-up w/syloc*/
      SL08S624-GET-SYLOC(); /* build key & read vsyloc record*/
      if (SL6REC.XWHCD > " ") /* Vsyloc data was found*/
        SL08W00.SL08WSWU = "Y";
        SL08W00.SL08WSWC = "Y";
        SL08W00.SL08W-TOT-QTY = SL08W00.SL08W-TOT-QTY - VCTNID01.SL6ONHND;
        SL08W00.SL08W-TOT-QTY = SL08W00.SL08W-TOT-QTY + SL6REC.SY1UNPCS;
        VCTNID01.XDMCD = SL6REC.XDMCD;
        SL08W01.XDMCD[SL08WIDX] = SL6REC.XDMCD;
        VCTNID01.XQACD = SL6REC.XQACD;
        SL08W01.XQACD[SL08WIDX] = SL6REC.XQACD;
        VCTNID01.XOWCD = SL6REC.XOWCD;
        SL08W01.XOWCD[SL08WIDX] = SL6REC.XOWCD;
        VCTNID01.PC2INSEG = SL6REC.PC2INSEG;
        SL08W01.PC2INSEG[SL08WIDX] = SL6REC.PC2INSEG;
        VCTNID01.XEGCD = SL6REC.XEGCD;
        VCTNID01.XPGCD = SL6REC.XPGCD;
        VCTNID01.XUMCD = SL6REC.XUMCD;
        SL08W01.XUMCD[SL08WIDX] = SL6REC.XUMCD;
        VCTNID01.SL6ONHND = SL6REC.SY1UNPCS;
        SL08W01.SL6ONHND[SL08WIDX] = SL6REC.SY1UNPCS;
        if (VCTNID01.SL2CASE == " ")
          VCTNID01.SL2CASE = SL6REC.SL2CASE;
          SL08W01.SL2CASE[SL08WIDX] = SL6REC.SL2CASE;
        end
        if (VCTNID01.FY1FCTYC == " ")
          VCTNID01.FY1FCTYC = SL6REC.FY1FCTYC;
          SL08W01.FY1FCTYC[SL08WIDX] = SL6REC.FY1FCTYC;
        end
        if (VCTNID01.PC3PONBR == 0)
          VCTNID01.PC3PONBR = SL6REC.PC3PONBR;
          SL08W01.PC3PONBR[SL08WIDX] = SL6REC.PC3PONBR;
        end
      else /* Vsyloc not found*/
        SL08W00.XXXLOCID = "62S";
        converseLib.validationFailed(316); /* row not found*/
        set SL08M001.SL08M-ACTION-CD[SL08WIDX] bold, cursor;
      end
    end
  end

  if (SL08W00.SL08WSWC == "Y") /* Vctnid01 needs update*/
    SL08W00.SL08W-RQST-TYP = "UP";
    SL08S-VCTNID-IO();
    if (SL20REC.SL20W-RTRN-SQLCD == 100) /* Vctnid not found*/
      SL08W00.XXXLOCID = "62C";
      converseLib.validationFailed(316); /* row not found*/
      set SL08M001.SL08M-ACTION-CD[SL08WIDX] bold, cursor;
    end
  end


end // end SL08S620-PROC-UPDT

// Build vctnid01 record
Function SL08S622-LOADCTNID()
   /* --------------------------------------------------------*/
   /* Move map data to Vctnid01 record*/
   /* --------------------------------------------------------*/
  set VCTNID01 empty;
  VCTNID01.XWHCD = SL08M001.XWHCD;
  if (SL08M001.TS-UCC-128-CD > " ")
    VCTNID01.TS-UCC-128-CD = SL08M001.TS-UCC-128-CD;
    VCTNID01.XARCD = SL08W01.XARCD[SL08WIDX];
    VCTNID01.SL4ZONE = SL08W01.SL4ZONE[SL08WIDX];
    VCTNID01.SL5LOCTN = SL08W01.SL5LOCTN[SL08WIDX];
  else
    VCTNID01.TS-UCC-128-CD = SL08W01.SL08W-ALT-KEY[SL08WIDX];
    VCTNID01.XARCD = SL08M001.XARCD;
    VCTNID01.SL4ZONE = SL08M001.SL4ZONE;
    VCTNID01.SL5LOCTN = SL08M001.SL5LOCTN;
  end
  VCTNID01.XGPCD = SL08W01.XGPCD[SL08WIDX];
  VCTNID01.SY1STNBR = SL08W01.SY1STNBR[SL08WIDX];
  VCTNID01.SY2CLRID = SL08W01.SY2CLRID[SL08WIDX];
  VCTNID01.XDMCD = SL08W01.XDMCD[SL08WIDX];
  VCTNID01.XQACD = SL08W01.XQACD[SL08WIDX];
  VCTNID01.XOWCD = SL08W01.XOWCD[SL08WIDX];
  VCTNID01.PC2INSEG = SL08W01.PC2INSEG[SL08WIDX];
  VCTNID01.XEGCD = SL08W01.XEGCD[SL08WIDX];
  VCTNID01.XPGCD = SL08W01.XPGCD[SL08WIDX];
  VCTNID01.XUMCD = SL08W01.XUMCD[SL08WIDX];
  VCTNID01.SY5SZID = SL08W01.SY5SZID[SL08WIDX];
  VCTNID01.SL6ONHND = SL08W01.SL6ONHND[SL08WIDX];
  VCTNID01.SWEPLLNB = SL08W01.SWEPLLNB[SL08WIDX];
  VCTNID01.SL2CASE = SL08W01.SL2CASE[SL08WIDX];
  VCTNID01.FY1FCTYC = SL08W01.FY1FCTYC[SL08WIDX];
  VCTNID01.PC3PONBR = SL08W01.PC3PONBR[SL08WIDX];
  VCTNID01.SL8WOGRP = SL08W01.SL8WOGRP[SL08WIDX];
  VCTNID01.SL8WONBR = SL08W01.SL8WONBR[SL08WIDX];
  VCTNID01.SL-SCAN-SEQ-NBR = SL08W01.SL-SCAN-SEQ-NBR[SL08WIDX];
  VCTNID01.SL-CRTN-STAT-CD = SL08W01.SL-CRTN-STAT-CD[SL08WIDX];
  VCTNID01.SL-CONV-GRP-CD = SL08W01.SL-CONV-GRP-CD[SL08WIDX];
  VCTNID01.ZZZSDT = SL08W01.ZZZSDT[SL08WIDX];
  VCTNID01.ZZZCHGDT = SL08W01.ZZZCHGDT[SL08WIDX];
  VCTNID01.ZZZCHGTM = SL08W01.ZZZCHGTM[SL08WIDX];


end // end SL08S622-LOADCTNID

// Build key & get Vsyloc record
Function SL08S624-GET-SYLOC()
   /* --------------------------------------------------------*/
   /* Build key for Vsyloc record.*/
   /* --------------------------------------------------------*/
  set SL6REC empty;
  SL6REC.XWHCD = VCTNID01.XWHCD;
  SL6REC.XARCD = VCTNID01.XARCD;
  SL6REC.SL4ZONE = VCTNID01.SL4ZONE;
  SL6REC.SL5LOCTN = VCTNID01.SL5LOCTN;
  SL6REC.XGPCD = VCTNID01.XGPCD;
  SL6REC.SY1STNBR = VCTNID01.SY1STNBR;
  SL6REC.SY2CLRID = VCTNID01.SY2CLRID;
  SL6REC.XDMCD = "*";
  SL6REC.XQACD = "*";
  SL6REC.XOWCD = "*";
  SL6REC.PC2INSEG = "*";
  SL6REC.XEGCD = "*";
  SL6REC.XUMCD = "*";
  SL6REC.XSLCD = "*";


   /* --------------------------------------------------------*/
   /* Get Vsyloc record.*/
   /* --------------------------------------------------------*/
  SL08W02.SL08W-RQST-TYP = "SE";
  SL08S6242-SYLOC-IO(); /* open syloc data for carton*/

  SL08W02.SL08W-RQST-TYP = "NE";
  SL08S6242-SYLOC-IO(); /* fetch syloc data for carton*/

  while (SQLCA.VAGen_SQLCODE == 0 /* find correct syloc row*/
   && VCTNID01.SY5SZID != SL6REC.SY5SZID)
    SL08S6242-SYLOC-IO(); /* fetch syloc data for carton*/
  end

  if (VCTNID01.SY5SZID != SL6REC.SY5SZID) /* Syloc not found*/
    set SL6REC empty;
  end

  SL08W02.SL08W-RQST-TYP = "CE";
  SL08S6242-SYLOC-IO(); /* close syloc data for carton*/


end // end SL08S624-GET-SYLOC

// Do Vsyloc I/O's
Function SL08S6242-SYLOC-IO()
   /* --------------------------------------------------------------------*/
   /* Do Dstloc.vsyloc01 I/O's*/
   /* --------------------------------------------------------------------*/
  try
    call "IO1470" (SL08W02, SQLCA, SL6REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* and normal return code*/
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SL08W00.XXXLOCID = "624"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1PGMNO = "SL08"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT LOCATION ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYLOC01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL6REC.SL6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL08S6242-SYLOC-IO

//*** RECORD=SL08W00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// 
// ***********************
Record SL08W00 type basicRecord
  5 * char(77) ; 
    10 SL08W-RQST-TYP SL08W-RQST-TYP ; 
    10 XWHCD XWHCD ; 
    10 TS-UCC-128-CD TS-UCC-128-CD ; 
    10 XARCD XARCD ; 
    10 SL4ZONE SL4ZONE ; 
    10 SL5LOCTN SL5LOCTN ; 
    10 SL08W-TOT-QTY SL08W-TOT-QTY ; 
    10 SL08W-TOT-CRTNS SL08W-TOT-CRTNS ; 
    10 SL08WIDX SL08WIDX ; 
    10 SL08WWDX SL08WWDX ; 
    10 SL08WSWR SL08WSWR ; 
    10 SL08WSWF SL08WSWF ; 
    10 SL08WSWU SL08WSWU ; 
    10 SL08WSWC SL08WSWC ; 
    10 SL08W-SZID-DSPLY SL08W-SZID-DSPLY ; 
    10 XXXLOCID XXXLOCID ; 
    10 XXXTSPAG XXXTSPAG ; 
    10 XXXTSLEN XXXTSLEN ; 
    10 TA5TSQIX TA5TSQIX ; 
end // end SL08W00

//*** RECORD=SL08W01 ****
// ------------------------
// Map 001 display storage
// ------------------------
// ***********************
Record SL08W01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(1224) ; 
    10 * char(102) [12] ; 
      15 SL08W-ALT-KEY SL08W-ALT-KEY ; 
        20 XARCD XARCD ; 
        20 * char(1) ; 
        20 SL4ZONE SL4ZONE ; 
        20 * char(1) ; 
        20 SL5LOCTN SL5LOCTN ; 
        20 * char(8) ; 
      15 XGPCD XGPCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XQACD XQACD ; 
      15 XOWCD XOWCD ; 
      15 PC2INSEG PC2INSEG ; 
      15 XEGCD XEGCD ; 
      15 XPGCD XPGCD ; 
      15 XUMCD XUMCD ; 
      15 SY5SZID SY5SZID ; 
      15 SY4IDDSC SY4IDDSC ; 
      15 SL6ONHND SL6ONHND ; 
      15 SWEPLLNB SWEPLLNB ; 
      15 SL2CASE SL2CASE ; 
      15 FY1FCTYC FY1FCTYC ; 
      15 PC3PONBR PC3PONBR ; 
      15 SL8WOGRP SL8WOGRP ; 
      15 SL8WONBR SL8WONBR ; 
      15 SL-SCAN-SEQ-NBR SL-SCAN-SEQ-NBR ; 
      15 SL-CRTN-STAT-CD SL-CRTN-STAT-CD ; 
      15 SL-CONV-GRP-CD SL-CONV-GRP-CD ; 
      15 ZZZSDT ZZZSDT ; 
      15 ZZZCHGDT ZZZCHGDT ; 
      15 ZZZCHGTM ZZZCHGTM ; 
end // end SL08W01

//*** RECORD=SL08W02 ****
// -------------------------------
// Calling IO1470 working storage.
// -------------------------------
// 
// ***********************
Record SL08W02 type basicRecord
  5 * char(2) ; 
    10 SL08W-RQST-TYP SL08W-RQST-TYP ; 
end // end SL08W02

DataItem SL08W-ALT-KEY char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Call i/o request type
DataItem SL08W-RQST-TYP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size id in display format
DataItem SL08W-SZID-DSPLY num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total active cartons
DataItem SL08W-TOT-CRTNS num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// total active quantity
DataItem SL08W-TOT-QTY num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// general array's index
DataItem SL08WIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// update Vctnid01 switch
DataItem SL08WSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format data switch
DataItem SL08WSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// request for data switch
DataItem SL08WSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update TS switch
DataItem SL08WSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// general array's index - 2
DataItem SL08WWDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

