package sl0o;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import pc.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
import ww.common.*;
//*** PROGRAM=SL0O ****
// This application allows a user to inquire and maintain rows
// in a DB2 table.
// 
// There are two different screens that may be displayed.
// 
// The first screen displayed to the user allows specification
// of the search criteria to be used to list the rows in the
// table.  The list is displayed and the user may page backward
// and forward to view the information.
// 
// When a line is selected on the screen, the second screen is
// displayed, showing all information for that table row.
// 
// If the user has sufficient security to change the data, the
// modifiable fields remain unprotected.  Otherwise, they are
// protected from modification by the user.
// 
// If any data is modified, it is verified and, if complete and
// correct, the table row is updated with the changed data.
// The screen is redisplayed to the user, indicating that the
// update is completed.
// 
// If more that one line was selected on the first screen, the
// next selection is displayed when the user presses the ENTER
// key without making any change to the displayed data.
// 
// When the user exits the second screen (either via PF3 key or
// after all selections have been viewed) the first screen is
// redisplayed, indicating the selections that were viewed.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE    USERID  DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      08/27/96  OENFIE  New application.
// DCSPLIT  12/13/96  PSHARM  Disabled the change capability
//                            of the application also disabled
//                            the pf9/pf12 key functionality
//                            sl0o-14400,-22200,-23000,-24000,
//                            -25000, sl0om001, sl0om002.
// *********************
Program SL0O type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  SL0OW00 SL0OW00; // record
  SL0OW01 SL0OW01; // record
  SL0OW02 SL0OW02; // record
  SLWREC SLWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VREPLC03 VREPLC03; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use XARTBL {deleteAfterUse = yes}; // table
  use YSPTBL {deleteAfterUse = yes}; // table
  use SL0OM.SL0OM001,  // forms
      SL0OM.SL0OM002
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPSL-00000: XPSL-00000();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set SL0OM001 initial; /* M001 input/output*/
    set SL0OM002 initial; /* M002 input/output*/
    set SL0OW00 empty; /* Working storage*/
    set SL0OW01 empty; /* M001 display storage*/
    set SL0OW02 empty; /* M002 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    SL0OW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/
    SL0OW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    SL0OW00.XXX-MAP-DSP-CD = "1"; /* Map to be displayed*/

    SL0OW00.XXX-TEMP-STG-LNTH = 212; /* Temporary storage length*/
    SL0OW00.XXX-INX-LMT-NBR = 12; /* Number of lines on a page*/

     /* ------------------------------------------------------------*/
     /* Initialize any fields passed from another application.*/
     /* ------------------------------------------------------------*/

    SL0OW01.SL0OM1-WHSE-CD = SLWREC.XWHCD; /* whse code*/

    if (COMMAREA.CAITEM > " ") /* Data was passed*/

      /* cannot enter in this part of the code*/
      /* if it comes make sure that commarea should have all 4*/
      /* whse cd, area code, zone code and loc code because*/
      /* they are required  key fields. and in the first entry*/
      /* all the data will be displayed.*/

      SL0OM001.SL0OM1-WHSE-CD = SLWREC.XWHCD; /* whse code*/
      SL0OM001.SL0OM1-AREA-CD = COMMAREA.CAITEM; /* area code*/

      COMMAREA.CAITEM = " "; /* Clear passed data*/

      /* don't fetch data at the first screen.*/
      /* MOVE 'Y' TO SL0OW00.XXX-RQT-DATA-FL;/* Request for data flag*/

    end

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SL0O-00000; /* Converse the main process*/


    SL0O-00000: SL0O-00000();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SL0O-00000; /* Converse the main process*/


  end // end main
end // end SL0O

// Determine which map to display
Function SL0O-00000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the map that was requested.*/
   /* 2) Otherwise, indicate error and exit to System Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (SL0OW00.XXX-MAP-DSP-CD == "1") /* Map 1 was requested*/

    SL0O-10000(); /* Display map 1*/

    exit stack; /* Exit to display map*/

  end

  if (SL0OW00.XXX-MAP-DSP-CD == "2") /* Map 2 was requested*/

    SL0O-20000(); /* Display map 2*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Write the error to the Error Diagnosis Reporting Facility.*/
   /* ------------------------------------------------------------*/

  SLWREC.SLWTALOC = "00000"; /* Message location*/
  SLWREC.SLWMSGNO = 10; /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = SLWREC.SLWTALOC; /* Message location*/
  TA1REC.TA1LOC = "INVALID MAP NUMBER REQUESTED"; /* Description*/
  TA1REC.TA1MAPNO = SL0OW00.XXX-MAP-DSP-CD; /* Map requested*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

   /* ------------------------------------------------------------*/
   /* Exit to display the application system menu.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CATOAP = "SL0M"; /* System Menu*/

  XSSLS-EXIT(); /* Exit to another application*/

   /* ------------------------------------------------------------*/
   /* Abnormally terminate the transaction if the exit failed.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1FUNC = "ABND"; /* Termination function*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/


end // end SL0O-00000

// Main process to display a map
Function SL0O-10000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SL0O-11000(); /* Obtain the data to display*/

  SL0O-12000(); /* Format and display the map*/

  SL0O-13000(); /* Check attention identifier*/

  SL0O-14000(); /* Verify the entered data*/

  SL0O-15000(); /* Process valid input request*/


end // end SL0O-10000

// Obtain the data to display
Function SL0O-11000()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (SL0OW00.XXX-RQT-DATA-FL != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO == 0) /* No message to display*/
    SL0OW00.XXX-CURR-PAGE-NBR = 1; /* Page number to display*/
  end

   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/

  SL0OS-TA0050-P(); /* Purge any temporary storage*/

  SL0OW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

   /* ------------------------------------------------------------*/
   /* Select the information to display in the map heading.*/
   /* ------------------------------------------------------------*/

  SL0OW01.SL0OM1-WHSE-CD = SL0OM001.SL0OM1-WHSE-CD;
  SL0OW01.SL0OM1-WHSE-SHT-ABRV = SL0OM001.SL0OM1-WHSE-SHT-ABRV;
  SL0OW01.SL0OM1-AREA-CD = SL0OM001.SL0OM1-AREA-CD;
  SL0OW01.SL0OM1-ZONE-CD = SL0OM001.SL0OM1-ZONE-CD;
  SL0OW01.SL0OM1-LOC-CD = SL0OM001.SL0OM1-LOC-CD;
  SL0OW01.SL0OM1-LOC-TYP-CD = SL0OM001.SL0OM1-LOC-TYP-CD;

   /* ------------------------------------------------------------*/
   /* Select & open cursor for the detail data to be formatted*/
   /* ------------------------------------------------------------*/
  SL0O-11100(); /* select cursor for detail lines*/

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  SL0OW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/


end // end SL0O-11000

// Select VREPLC03 cursors
Function SL0O-11100()
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  set VREPLC03 empty; /* Clear row storage area*/

  VREPLC03.XWHCD = SL0OW01.SL0OM1-WHSE-CD;
  VREPLC03.XARCD = SL0OW01.SL0OM1-AREA-CD;
  VREPLC03.SL4ZONE = SL0OW01.SL0OM1-ZONE-CD;
  VREPLC03.SL5LOCTN = SL0OW01.SL0OM1-LOC-CD;
  VREPLC03.YLTCD = SL0OW01.SL0OM1-LOC-TYP-CD;

  SL0O-11110(); /* use cursor  1*/
end // end SL0O-11100

// Select VREPLC03 cursor 1
Function SL0O-11110()
   /* ------------------------------------------------------------*/
   /* Select and open cursor 1*/
   /* ------------------------------------------------------------*/
  SL0OS-VREPLC03-S1(); /* Select set and open cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  SL0OW00.XXX-INX-FLD-NBR = 1; /* Display line index*/

  SL0OW00.SL0OW-REPLC-EOF-FL = "N"; /* End of cursor flag*/

  while (SL0OW00.SL0OW-REPLC-EOF-FL == "N") /* Until end of cursor*/

    SL0OS-VREPLC03-N1(); /* Fetch next row in cursor*/

    /* ------------------------------------------------------------*/
    /* If not end of cursor, save the data in display storage.*/
    /* ------------------------------------------------------------*/

    if (SL0OW00.SL0OW-REPLC-EOF-FL == "N") /* Not end of cursor*/

      /* ------------------------------------------------------------*/
      /* If first line on subsequent page, save heading information.*/
      /* ------------------------------------------------------------*/

      if (SL0OW00.XXX-HI-PAGE-NBR > 0 /* Not the first page*/
       && SL0OW00.XXX-INX-FLD-NBR == 1) /* and first line on page*/

        SL0OW01.SL0OM1-WHSE-CD = SL0OM001.SL0OM1-WHSE-CD;
        SL0OW01.SL0OM1-WHSE-SHT-ABRV = SL0OM001.SL0OM1-WHSE-SHT-ABRV;
        SL0OW01.SL0OM1-AREA-CD = SL0OM001.SL0OM1-AREA-CD;
        SL0OW01.SL0OM1-ZONE-CD = SL0OM001.SL0OM1-ZONE-CD;
        SL0OW01.SL0OM1-LOC-CD = SL0OM001.SL0OM1-LOC-CD;
        SL0OW01.SL0OM1-LOC-TYP-CD = SL0OM001.SL0OM1-LOC-TYP-CD;

      end

      /* ------------------------------------------------------------*/
      /* Save the data from the table row in display storage.*/
      /* ------------------------------------------------------------*/

      SL0OW01.SL0OM1-XAR-AREA-CD[XXX-INX-FLD-NBR] = VREPLC03.XARCD;
      SL0OW01.SL0OM1-SL-ZONE-CD[XXX-INX-FLD-NBR] = VREPLC03.SL4ZONE;
      SL0OW01.SL0OM1-SL-LOC-CD[XXX-INX-FLD-NBR] = VREPLC03.SL5LOCTN;
      SL0OW01.SL0OM1-YLT-LOC-TYP-CD[XXX-INX-FLD-NBR] = VREPLC03.YLTCD;
      SL0OW01.SL0OM1-SL-LOC-SZ-IND[XXX-INX-FLD-NBR] = VREPLC03.SL-LOC-SZ-IND;
      SL0OW01.SL0OM1-YSP-STG-PRTY-CD[XXX-INX-FLD-NBR] = VREPLC03.YSPCD;

      /* ------------------------------------------------------------*/
      /* Increment the line index to the next row in display storage.*/
      /* ------------------------------------------------------------*/

      SL0OW00.XXX-INX-FLD-NBR = SL0OW00.XXX-INX-FLD-NBR + 1;
                                   /* Increment line index*/

    end

    /* ------------------------------------------------------------*/
    /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/

    if (SL0OW00.XXX-INX-FLD-NBR > SL0OW00.XXX-INX-LMT-NBR) /* Page is full*/

      SL0OS-TA0050-A(); /* Add page to temporary storage*/

      SL0OW00.XXX-INX-FLD-NBR = 1; /* Display line index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (SL0OW00.XXX-INX-FLD-NBR > 1) /* Page was formatted*/
    SL0OS-TA0050-A(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  SL0OS-VREPLC03-C1(); /* Close selected set cursor*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (SL0OW00.XXX-HI-PAGE-NBR == 0) /* No pages formatted*/

    SLWREC.SLWTALOC = "11110"; /* Message location*/
    converseLib.validationFailed(460); /* No data was found to display*/

    exit stack; /* Exit to display map*/

  end

end // end SL0O-11110

// Format and converse the map
Function SL0O-12000()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If the map must be formatted, format the data in the map.*/
   /* ------------------------------------------------------------*/

  if (SL0OW00.XXX-MAP-FMAT-FL == "Y") /* Map must be formatted*/
    SL0O-12100(); /* Format the data in the map*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SL0OM001.XXX-CURR-DT = VGVar.currentShortGregorianDate; /* Current date*/

  SL0OM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SL0OM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SL0OM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    SL0OM001.XXX-MSG-LOC-ID = SLWREC.SLWTALOC;
                                   /* Message location*/

    set SL0OM001 alarm; /* Indicate sound alarm*/

  end

  converse SL0OM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SLWREC.SLWTALOC = " "; /* Message location*/
  SLWREC.SLWMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = SL0OM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SL0OM001.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* Reset modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SL0OM001.SL0OM1-WHSE-CD normal; /* whse code*/
  set SL0OM001.SL0OM1-AREA-CD normal; /* area code*/
  set SL0OM001.SL0OM1-ZONE-CD normal; /* zone code*/
  set SL0OM001.SL0OM1-LOC-CD normal; /* loc  code*/
  set SL0OM001.SL0OM1-LOC-TYP-CD normal; /* loc type code*/

  SL0OW00.XXX-INX-FLD-NBR = 1; /* Initialize line index*/

  while (SL0OW00.XXX-INX-FLD-NBR <= SL0OW00.XXX-INX-LMT-NBR
   /* Until end of screen*/
   && SL0OM001.SL0OM1-XAR-AREA-CD[XXX-INX-FLD-NBR] > " ")
                                   /* or end of formatted lines*/

    set SL0OM001.SL0OM1-SEL-CD[XXX-INX-FLD-NBR] normal;
                                   /* Select indicator*/

    SL0OW00.XXX-INX-FLD-NBR = SL0OW00.XXX-INX-FLD-NBR + 1;
                                   /* Increment line index*/

  end

  set SL0OM001.CATOAP normal; /* TO application*/
  set SL0OM001.CAITEM normal; /* Application data*/


end // end SL0O-12000

// Format the data in the map
Function SL0O-12100()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set SL0OM001 initial; /* M001 input/output area*/

  SL0OW00.XXX-MAP-FMAT-FL = "N"; /* Format the map flag*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (SL0OW00.XXX-HI-PAGE-NBR > 0) /* Pages were formatted*/

    if (SL0OW00.XXX-CURR-PAGE-NBR != TA5REC.TA5TSQIX)
                                   /* Desired page not current*/

      /* ------------------------------------------------------------*/
      /* If the current page has been changed, update the page in*/
      /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (SL0OW00.XXX-PAGE-UPD-FL == "Y") /* Current page was changed*/

        SL0OS-TA0050-U(); /* Update temporary storage page*/

        SL0OW00.XXX-PAGE-UPD-FL = "N"; /* Page update flag*/

      end

      /* ------------------------------------------------------------*/
      /* If the desired page number is greater than the highest page*/
      /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (SL0OW00.XXX-CURR-PAGE-NBR > SL0OW00.XXX-HI-PAGE-NBR)
                                   /* Desired greater highest*/
        SL0OW00.XXX-CURR-PAGE-NBR = SL0OW00.XXX-HI-PAGE-NBR;
                                   /* Default to highest*/
      end

      SL0OS-TA0050-R(); /* Read temporary storage page*/

    end

    /* ------------------------------------------------------------*/
    /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set SL0OM001.XXX-CURR-PAGE-DESC skip; /* "PAGE" literal*/
    SL0OM001.XXX-CURR-PAGE-NBR = SL0OW00.XXX-CURR-PAGE-NBR;
                                   /* Current page*/
    set SL0OM001.XXX-HI-PAGE-DESC skip; /* "OF" literal*/
    SL0OM001.XXX-HI-PAGE-NBR = SL0OW00.XXX-HI-PAGE-NBR;
                                   /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* If WHSE code is missing, position the cursor on that field.*/
   /* ------------------------------------------------------------*/

  if (SL0OM001.SL0OM1-WHSE-CD <= " ") /* whse code missing*/
    set SL0OM001.SL0OM1-WHSE-CD cursor; /* Position cursor on whse cd*/
  else
    set SL0OM001.SL0OM1-AREA-CD cursor; /* Position cursor on area cd*/
  end

   /* ------------------------------------------------------------*/
   /* Format the map fields from the display storage area.*/
   /* ------------------------------------------------------------*/

  SL0OM001.SL0OM1-WHSE-CD = SL0OW01.SL0OM1-WHSE-CD; /* whse code*/
  SL0OM001.SL0OM1-WHSE-SHT-ABRV = SL0OW01.SL0OM1-WHSE-SHT-ABRV; /* whse short desc*/
  SL0OM001.SL0OM1-AREA-CD = SL0OW01.SL0OM1-AREA-CD; /* area code*/
  SL0OM001.SL0OM1-ZONE-CD = SL0OW01.SL0OM1-ZONE-CD; /* zone code*/
  SL0OM001.SL0OM1-LOC-CD = SL0OW01.SL0OM1-LOC-CD; /* loc code*/
  SL0OM001.SL0OM1-LOC-TYP-CD = SL0OW01.SL0OM1-LOC-TYP-CD; /* loc type*/


  SL0OW00.XXX-INX-FLD-NBR = 1; /* Initialize line index*/

  while (SL0OW00.XXX-INX-FLD-NBR <= SL0OW00.XXX-INX-LMT-NBR
   /* Until screen is full*/
   && SL0OW01.SL0OM1-XAR-AREA-CD[XXX-INX-FLD-NBR] > " ")
                                   /* or end of data*/

    if (SL0OW00.XXX-INX-FLD-NBR == 1) /* First select field*/

      set SL0OM001.SL0OM1-SEL-CD[XXX-INX-FLD-NBR] cursor, normal;
    else
      set SL0OM001.SL0OM1-SEL-CD[XXX-INX-FLD-NBR] normal;

    end

    SL0OM001.SL0OM1-SEL-CD[XXX-INX-FLD-NBR] = SL0OW01.XXX-LN-SEL-IND[XXX-INX-FLD-NBR]; /* Select code*/

    SL0OM001.SL0OM1-XAR-AREA-CD[XXX-INX-FLD-NBR] = SL0OW01.SL0OM1-XAR-AREA-CD[XXX-INX-FLD-NBR]; /* area code*/

    SL0OM001.SL0OM1-SL-ZONE-CD[XXX-INX-FLD-NBR] = SL0OW01.SL0OM1-SL-ZONE-CD[XXX-INX-FLD-NBR]; /* Zone code*/

    SL0OM001.SL0OM1-SL-LOC-CD[XXX-INX-FLD-NBR] = SL0OW01.SL0OM1-SL-LOC-CD[XXX-INX-FLD-NBR]; /* Loc code*/

    SL0OM001.SL0OM1-YLT-LOC-TYP-CD[XXX-INX-FLD-NBR] = SL0OW01.SL0OM1-YLT-LOC-TYP-CD[XXX-INX-FLD-NBR]; /* Loc type code*/

    SL0OM001.SL0OM1-YSP-STG-PRTY-CD[XXX-INX-FLD-NBR] = SL0OW01.SL0OM1-YSP-STG-PRTY-CD[XXX-INX-FLD-NBR]; /* Storage*/
                                                          /* priority code*/
    if (SL0OW01.SL0OM1-YSP-STG-PRTY-CD[XXX-INX-FLD-NBR] in YSPTBL.YSPCD)
      SL0OM001.SL0OM1-YSP-STG-PRTY-DESC[XXX-INX-FLD-NBR] = YSPTBL.YSPDESC[sysVar.arrayIndex]; /* Storage*/
                                                           /* priority desc*/
    else
      SL0OM001.SL0OM1-YSP-STG-PRTY-DESC[XXX-INX-FLD-NBR] = " "; /* Storage*/
                                                           /* priority desc*/
    end
    SL0OM001.SL0OM1-SL-LOC-SZ-IND[XXX-INX-FLD-NBR] = SL0OW01.SL0OM1-SL-LOC-SZ-IND[XXX-INX-FLD-NBR]; /* loc size ind*/

    if (SL0OW01.SL0OM1-SL-LOC-SZ-IND[XXX-INX-FLD-NBR] == "S")
      SL0OM001.SL0OM1-LOC-SZ-DESC[XXX-INX-FLD-NBR] = "SHORT";
    else

      if (SL0OW01.SL0OM1-SL-LOC-SZ-IND[XXX-INX-FLD-NBR] == "Q")
        SL0OM001.SL0OM1-LOC-SZ-DESC[XXX-INX-FLD-NBR] = "3-QUARTER";
      else

        if (SL0OW01.SL0OM1-SL-LOC-SZ-IND[XXX-INX-FLD-NBR] == "N")
          SL0OM001.SL0OM1-LOC-SZ-DESC[XXX-INX-FLD-NBR] = "NORMAL";
        else

          if (SL0OW01.SL0OM1-SL-LOC-SZ-IND[XXX-INX-FLD-NBR] == "T")
            SL0OM001.SL0OM1-LOC-SZ-DESC[XXX-INX-FLD-NBR] = "TALL";
          else
            SL0OM001.SL0OM1-LOC-SZ-DESC[XXX-INX-FLD-NBR] = " ";
          end
        end
      end
    end

    SL0OW00.XXX-INX-FLD-NBR = SL0OW00.XXX-INX-FLD-NBR + 1;
                                   /* Increment line index*/

  end

end // end SL0O-12100

// Check attention identifier
Function SL0O-13000()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (SL0OW00.XXX-RQT-DATA-FL == "Y") /* Request for data pending*/
      set SL0OW01 empty; /* M001 display storage*/
    end

    SL0OW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/
    SL0OW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (SL0OM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      SL0OS-TA0050-P(); /* Purge any temporary storage*/

      XSSLS-EXIT(); /* Exit to another application*/

      set SL0OM001.CATOAP cursor, bold; /* Highlight*/

    else

      SLWREC.SLWTALOC = "13000"; /* Message location*/
      converseLib.validationFailed(258); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If a PF key transfer requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SL0OM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "SL0M"; /* stock locate menu*/
    end

    SL0OS-TA0050-P(); /* Purge any temporary storage*/

    XSSLS-EXIT(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    SLWREC.SLWTALOC = "13000"; /* Message location*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end SL0O-13000

// Verify data that was entered
Function SL0O-14000()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (SL0OM001.CAITEM > " ") /* Application data was entered*/

    SLWREC.SLWTALOC = "14000"; /* Message location*/
    converseLib.validationFailed(259); /* Enter only with FAST PATH*/
    set SL0OM001.CAITEM cursor, bold; /* Highlight*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll requested, determine if any other field changed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    SL0O-14100(); /* Highlight other changed fields*/

    /* ------------------------------------------------------------*/
    /* Determine whether a valid request to scroll was entered.*/
    /* ------------------------------------------------------------*/

    SL0O-14200(); /* Verify scroll request*/

  else

    /* ------------------------------------------------------------*/
    /* If key field changed, determine if any other field changed.*/
    /* ------------------------------------------------------------*/

    if (SL0OM001.SL0OM1-WHSE-CD != SL0OW01.SL0OM1-WHSE-CD
     || SL0OM001.SL0OM1-AREA-CD != SL0OW01.SL0OM1-AREA-CD
     || SL0OM001.SL0OM1-ZONE-CD != SL0OW01.SL0OM1-ZONE-CD
     || SL0OM001.SL0OM1-LOC-CD != SL0OW01.SL0OM1-LOC-CD
     || SL0OM001.SL0OM1-LOC-TYP-CD != SL0OW01.SL0OM1-LOC-TYP-CD)

      SL0O-14100(); /* Highlight other changed fields*/

      /* ------------------------------------------------------------*/
      /* Determine if all the required key fields were entered.*/
      /* ------------------------------------------------------------*/

      SL0O-14300(); /* Check for required key fields*/

    else

      /* ------------------------------------------------------------*/
      /* Always check for required key fields.*/
      /* ------------------------------------------------------------*/
      SL0O-14300(); /* Check for required key fields*/

      /* ------------------------------------------------------------*/
      /* Otherwise, verify any modifiable data that was changed.*/
      /* ------------------------------------------------------------*/

      if (SL0OW00.XXX-HI-PAGE-NBR > 0) /* Page was formatted*/

        SL0OW00.XXX-INX-FLD-NBR = SL0OW00.XXX-INX-LMT-NBR;
                                   /* Line index*/

        while (SL0OW00.XXX-INX-FLD-NBR > 0) /* Until end of lines*/

          SL0O-14400(); /* Verify data in the line*/

          SL0OW00.XXX-INX-FLD-NBR = SL0OW00.XXX-INX-FLD-NBR - 1;
                                   /* Decrement line number*/

        end

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If any error was found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end SL0O-14000

// Highlight other changed fields
Function SL0O-14100()
   /* ------------------------------------------------------------*/
   /* If a modifiable field was changed, indicate that field may*/
   /* not be changed when key is changed or a pf key is pressed.*/
   /* ------------------------------------------------------------*/

  SL0OW00.XXX-INX-FLD-NBR = SL0OW00.XXX-INX-LMT-NBR; /* Line index*/

  while (SL0OW00.XXX-INX-FLD-NBR > 0) /* Until end of lines*/

    if (SL0OM001.SL0OM1-SEL-CD[XXX-INX-FLD-NBR] != 
    SL0OW01.XXX-LN-SEL-IND[XXX-INX-FLD-NBR])

      SLWREC.SLWTALOC = "14100"; /* Message location*/
      if (converseVar.eventKey is pf7 || converseVar.eventKey is pf8)
        converseLib.validationFailed(462); /* scrolling not allowed with*/
                                       /* selection criteria*/
      else
        converseLib.validationFailed(463); /* selection not valid with*/
                                       /* key field change*/
      end
      set SL0OM001.SL0OM1-SEL-CD[XXX-INX-FLD-NBR] cursor, bold;
                                   /* Highlight*/

    end

    SL0OW00.XXX-INX-FLD-NBR = SL0OW00.XXX-INX-FLD-NBR - 1;
                                   /* Decrement line number*/

  end


end // end SL0O-14100

// Verify scroll request
Function SL0O-14200()
   /* ------------------------------------------------------------*/
   /* Indicate key fields may not change when scroll is requested.*/
   /* ------------------------------------------------------------*/

  if (SL0OM001.SL0OM1-WHSE-CD != SL0OW01.SL0OM1-WHSE-CD) /* whse cd changed*/

    SLWREC.SLWTALOC = "14200"; /* Message location*/
    converseLib.validationFailed(464); /* Field may not change*/
                                    /* when scrolling is requested.*/
    set SL0OM001.SL0OM1-WHSE-CD cursor, bold; /* Highlight*/

  end

  if (SL0OM001.SL0OM1-AREA-CD != SL0OW01.SL0OM1-AREA-CD) /* area cd changed*/

    SLWREC.SLWTALOC = "14200"; /* Message location*/
    converseLib.validationFailed(464); /* Field may not change*/
    set SL0OM001.SL0OM1-AREA-CD cursor, bold; /* Highlight*/

  end

  if (SL0OM001.SL0OM1-ZONE-CD != SL0OW01.SL0OM1-ZONE-CD) /* zone cd changed*/

    SLWREC.SLWTALOC = "14200"; /* Message location*/
    converseLib.validationFailed(464); /* Field may not change*/
    set SL0OM001.SL0OM1-ZONE-CD cursor, bold; /* Highlight*/

  end

  if (SL0OM001.SL0OM1-LOC-CD != SL0OW01.SL0OM1-LOC-CD) /* loc cd changed*/

    SLWREC.SLWTALOC = "14200"; /* Message location*/
    converseLib.validationFailed(464); /* Field may not change*/
    set SL0OM001.SL0OM1-LOC-CD cursor, bold; /* Highlight*/

  end

  if (SL0OM001.SL0OM1-LOC-TYP-CD != SL0OW01.SL0OM1-LOC-TYP-CD)
                                                     /* loc type cd changed*/

    SLWREC.SLWTALOC = "14200"; /* Message location*/
    converseLib.validationFailed(464); /* Field may not change*/
    set SL0OM001.SL0OM1-LOC-TYP-CD cursor, bold; /* Highlight*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && SL0OW00.XXX-CURR-PAGE-NBR < 2) /* and no previous pages*/

    SLWREC.SLWTALOC = "14200"; /* Message location*/
    converseLib.validationFailed(7); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && SL0OW00.XXX-CURR-PAGE-NBR >= SL0OW00.XXX-HI-PAGE-NBR)
                                   /* and no more pages*/

    SLWREC.SLWTALOC = "14200"; /* Message location*/
    converseLib.validationFailed(8); /* No more pages to display*/

  end


end // end SL0O-14200

// Check for required key fields
Function SL0O-14300()
   /* the required key fields are whse cd, area cd, zone cd, loc cd*/
   /* they must be entered. o.w display error*/
   /* ------------------------------------------------------------*/
   /* Verify that a whse code was entered.*/
   /* ------------------------------------------------------------*/

  if (SL0OM001.SL0OM1-WHSE-CD <= " ") /* whse code not entered*/

    SLWREC.SLWTALOC = "14300"; /* Message location*/
    converseLib.validationFailed(9); /* whse cd is missing or invalid*/
    set SL0OM001.SL0OM1-WHSE-CD cursor, bold; /* Highlight*/
    return;

  end
   /* check for valid whse cd in xwhtbl table*/
  if (SL0OM001.SL0OM1-WHSE-CD in XWHTBL.XWHCD
  )
    SL0OM001.SL0OM1-WHSE-SHT-ABRV = XWHTBL.XWHSABRV[sysVar.arrayIndex];
    SL0OW01.SL0OM1-WHSE-SHT-ABRV = XWHTBL.XWHSABRV[sysVar.arrayIndex];

  else
    SLWREC.SLWTALOC = "14300"; /* message location*/
    converseLib.validationFailed(373); /* invalid whse code*/
    set SL0OM001.SL0OM1-WHSE-CD cursor, bold; /* Highlight*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Verify that a area code was entered.*/
   /* ------------------------------------------------------------*/

  if (SL0OM001.SL0OM1-AREA-CD <= " ") /* area code not entered*/

    SLWREC.SLWTALOC = "14300"; /* Message location*/
    converseLib.validationFailed(9); /* area cd is missing or invalid*/
    set SL0OM001.SL0OM1-AREA-CD cursor, bold; /* Highlight*/
    return;

  end

   /* check for valid area cd in xartbl table*/
  SL0OW00.SL0OW-WHSE-CD = SL0OM001.SL0OM1-WHSE-CD;
  SL0OW00.SL0OW-AREA-CD = SL0OM001.SL0OM1-AREA-CD;
  if (SL0OW00.SL0OW-XARKEY in XARTBL.XARKEY
  ) /* continue*/
  else
    SLWREC.SLWTALOC = "14300"; /* message location*/
    converseLib.validationFailed(323); /* invalid area code*/
    set SL0OM001.SL0OM1-AREA-CD cursor, bold; /* Highlight*/
    return;
  end
   /* ------------------------------------------------------------*/
   /* Verify that a zone code was entered.*/
   /* ------------------------------------------------------------*/

  if (SL0OM001.SL0OM1-ZONE-CD <= " ") /* zone code not entered*/

    SLWREC.SLWTALOC = "14300"; /* Message location*/
    converseLib.validationFailed(9); /* zone  cd is missing or invalid*/
    set SL0OM001.SL0OM1-ZONE-CD cursor, bold; /* Highlight*/
    return;

  end

   /* ------------------------------------------------------------*/
   /* Verify that a loc code was entered.*/
   /* ------------------------------------------------------------*/

  if (SL0OM001.SL0OM1-LOC-CD <= " ") /* loc code not entered*/

    SLWREC.SLWTALOC = "14300"; /* Message location*/
    converseLib.validationFailed(9); /* loc  cd is missing or invalid*/
    set SL0OM001.SL0OM1-LOC-CD cursor, bold; /* Highlight*/
    return;

  end


end // end SL0O-14300

// Verify data in the line
Function SL0O-14400()
   /* ------------------------------------------------------------*/
   /* If selection was entered and is not a "S", indicate that*/
   /* only "S" may be entered to select a line.*/
   /* ------------------------------------------------------------*/

  if (SL0OM001.SL0OM1-SEL-CD[XXX-INX-FLD-NBR] != 
  SL0OW01.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] /* Selection entered*/
   && SL0OM001.SL0OM1-SEL-CD[XXX-INX-FLD-NBR] != "S")
  /* PKS START 12/13/96*/
    /* AND SL0OM001.SL0OM1-SEL-CD(XXX-INX-FLD-NBR) NE 'C';  12/13/96*/
  /* PKS END 12/13/96*/
                                   /* and is not a "S"*/

    SLWREC.SLWTALOC = "14400"; /* Message location*/
    converseLib.validationFailed(461); /* Only "S" may be entered*/
    set SL0OM001.SL0OM1-SEL-CD[XXX-INX-FLD-NBR] cursor, bold;
                                   /* Highlight*/

  end


end // end SL0O-14400

// Process valid input request
Function SL0O-15000()
   /* ------------------------------------------------------------*/
   /* Save any work record fields that may have been modified.*/
   /* ------------------------------------------------------------*/

  SLWREC.XWHCD = SL0OM001.SL0OM1-WHSE-CD; /* whse code*/
   /* MOVE SL0OM001.SL0OM1-WHSE-SHT-ABRV TO SLWREC.XWH-WHSE-SHT-ABRV;*/

   /* ------------------------------------------------------------*/
   /* If the key fields changed, request the data to display.*/
   /* ------------------------------------------------------------*/

  if (SL0OM001.SL0OM1-WHSE-CD != SL0OW01.SL0OM1-WHSE-CD
   || SL0OM001.SL0OM1-AREA-CD != SL0OW01.SL0OM1-AREA-CD
   || SL0OM001.SL0OM1-ZONE-CD != SL0OW01.SL0OM1-ZONE-CD
   || SL0OM001.SL0OM1-LOC-CD != SL0OW01.SL0OM1-LOC-CD
   || SL0OM001.SL0OM1-LOC-TYP-CD != SL0OW01.SL0OM1-LOC-TYP-CD)

    SL0OW01.SL0OM1-WHSE-CD = SL0OM001.SL0OM1-WHSE-CD;
    SL0OW01.SL0OM1-AREA-CD = SL0OM001.SL0OM1-AREA-CD;
    SL0OW01.SL0OM1-ZONE-CD = SL0OM001.SL0OM1-ZONE-CD;
    SL0OW01.SL0OM1-LOC-CD = SL0OM001.SL0OM1-LOC-CD;
    SL0OW01.SL0OM1-LOC-TYP-CD = SL0OM001.SL0OM1-LOC-TYP-CD;

    SL0OW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll backward was requested, decrement the page number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    SL0OW00.XXX-CURR-PAGE-NBR = SL0OW00.XXX-CURR-PAGE-NBR - 1;
                                   /* Decrement page number*/

    SL0OW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, increment the page number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    SL0OW00.XXX-CURR-PAGE-NBR = SL0OW00.XXX-CURR-PAGE-NBR + 1;
                                   /* Increment page number*/

    SL0OW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Save any field that was changed in the map display storage.*/
   /* ------------------------------------------------------------*/

  SL0OW00.XXX-INX-FLD-NBR = 1; /* Initialize line index*/

  while (SL0OW00.XXX-INX-FLD-NBR <= SL0OW00.XXX-INX-LMT-NBR)
                                   /* Until end of lines*/

    if (SL0OM001.SL0OM1-SEL-CD[XXX-INX-FLD-NBR] != 
    SL0OW01.XXX-LN-SEL-IND[XXX-INX-FLD-NBR])

      SL0OW01.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] = SL0OM001.SL0OM1-SEL-CD[XXX-INX-FLD-NBR];

      SL0OW00.XXX-PAGE-UPD-FL = "Y"; /* Page update flag*/

    end

    SL0OW00.XXX-INX-FLD-NBR = SL0OW00.XXX-INX-FLD-NBR + 1;
                                   /* Increment line index*/

  end

   /* ------------------------------------------------------------*/
   /* If a line was selected, format the key fields and indicate*/
   /* that map 002 is to be displayed.*/
   /* ------------------------------------------------------------*/

  SL0OW00.XXX-INX-FLD-NBR = 1; /* initialize line-index*/
  SL0OW00.SL0OW-ROW-SEL-FL = "N"; /* row not selected*/
  while (SL0OW00.XXX-INX-FLD-NBR <= SL0OW00.XXX-INX-LMT-NBR
   /* until screen not full*/
   && SL0OW00.SL0OW-ROW-SEL-FL == "N")
                                  /* and 's' or 'c' not found*/

    if (SL0OW01.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] == "S"
     || SL0OW01.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] == "C")
      SL0OW00.SL0OW-ROW-SEL-FL = "Y";
    else
      SL0OW00.XXX-INX-FLD-NBR = SL0OW00.XXX-INX-FLD-NBR + 1;
    end
  end
  if (SL0OW00.SL0OW-ROW-SEL-FL == "Y") /* Line was selected*/

     /* save the sel fields in the working storage*/
    move SL0OW01.XXX-LN-SEL-IND to SL0OW00.SL0OW-LN-SEL-IND[1] for all;

    SL0OM002.SL0OM2-WHSE-CD = SL0OW01.SL0OM1-WHSE-CD;

    SL0OM002.SL0OM2-WHSE-SHT-ABRV = SL0OW01.SL0OM1-WHSE-SHT-ABRV;

    SL0OM002.SL0OM2-AREA-CD = SL0OW01.SL0OM1-XAR-AREA-CD[XXX-INX-FLD-NBR];

    SL0OM002.SL0OM2-ZONE-CD = SL0OW01.SL0OM1-SL-ZONE-CD[XXX-INX-FLD-NBR];

    SL0OM002.SL0OM2-LOC-CD = SL0OW01.SL0OM1-SL-LOC-CD[XXX-INX-FLD-NBR];

    SL0OM002.SL0OM2-LOC-TYP-CD = SL0OW01.SL0OM1-YLT-LOC-TYP-CD[XXX-INX-FLD-NBR];

    SL0OM002.SL0OM2-LOC-SZ-IND = SL0OW01.SL0OM1-SL-LOC-SZ-IND[XXX-INX-FLD-NBR];

    SL0OM002.SL0OM2-LOC-SZ-DESC = SL0OM001.SL0OM1-LOC-SZ-DESC[XXX-INX-FLD-NBR];

    SL0OM002.SL0OM2-STG-PRTY-CD = SL0OW01.SL0OM1-YSP-STG-PRTY-CD[XXX-INX-FLD-NBR];

    SL0OW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/
    SL0OW00.XXX-MAP-DSP-CD = "2"; /* Map to be displayed*/

  end


end // end SL0O-15000

// Main process to display a map
Function SL0O-20000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SL0O-21000(); /* Obtain the data to display*/

  SL0O-22000(); /* Format and display the map*/

  SL0O-23000(); /* Check attention identifier*/

  SL0O-24000(); /* Verify the entered data*/

  SL0O-25000(); /* Process valid input request*/


end // end SL0O-20000

// Obtain the data to display
Function SL0O-21000()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (SL0OW00.XXX-RQT-DATA-FL != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Clear the map display storage area and save the key fields.*/
   /* ------------------------------------------------------------*/

  set SL0OW02 empty; /* M002 display storage*/

  SL0OW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

  SL0OW02.SL0OM2-WHSE-CD = SL0OM002.SL0OM2-WHSE-CD; /* whse cd*/
  SL0OW02.SL0OM2-WHSE-SHT-ABRV = SL0OM002.SL0OM2-WHSE-SHT-ABRV; /* whse sht desc*/
  SL0OW02.SL0OM2-AREA-CD = SL0OM002.SL0OM2-AREA-CD; /* area cd*/
  SL0OW02.SL0OM2-ZONE-CD = SL0OM002.SL0OM2-ZONE-CD; /* zone cd*/
  SL0OW02.SL0OM2-LOC-CD = SL0OM002.SL0OM2-LOC-CD; /* loc cd*/
  SL0OW02.SL0OM2-LOC-TYP-CD = SL0OM002.SL0OM2-LOC-TYP-CD; /* loc type*/
  SL0OW02.SL0OM2-LOC-SZ-IND = SL0OM002.SL0OM2-LOC-SZ-IND; /* sz ind*/
  SL0OW02.SL0OM2-LOC-SZ-DESC = SL0OM002.SL0OM2-LOC-SZ-DESC; /* sz desc*/
  SL0OW02.SL0OM2-STG-PRTY-CD = SL0OM002.SL0OM2-STG-PRTY-CD; /* stg prty*/

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set VREPLC03 empty; /* Clear row storage area*/

  VREPLC03.XWHCD = SL0OW02.SL0OM2-WHSE-CD; /* whse code*/
  VREPLC03.XARCD = SL0OW02.SL0OM2-AREA-CD; /* area code*/
  VREPLC03.SL4ZONE = SL0OW02.SL0OM2-ZONE-CD; /* zone code*/
  VREPLC03.SL5LOCTN = SL0OW02.SL0OM2-LOC-CD; /* location code*/

  SL0OS-VREPLC03-S(); /* Select the table row*/

   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

    SL0OW02.SL0OW02-AVAIL-FL-QTY = VREPLC03-AVAIL-FL-QTY;
   /* PERFORM SL0O-21100;           /* load each of the 99 fields to*/
                                      /* working storage*/

  else

    SLWREC.SLWTALOC = "21000"; /* Message location*/
    converseLib.validationFailed(460); /* No data was found to display*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  SL0OW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/


end // end SL0O-21000

// Format and converse the map
Function SL0O-22000()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If the map must be formatted, format the data in the map.*/
   /* ------------------------------------------------------------*/

  if (SL0OW00.XXX-MAP-FMAT-FL == "Y") /* Map must be formatted*/
    SL0O-22100(); /* Format the data in the map*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether to protect any of the modifiable fields.*/
   /* ------------------------------------------------------------*/

  SL0O-22200(); /* Check change authorization*/

  if (SL0OM002.SL0OM2-WHSE-CD == "51") /* show pallet qty*/
      /* don't do anything*/
  else /* protect pallet qty*/

    SL0OW00.SL0OW-REPLC-INX = 1; /* initialize index*/

    while (SL0OW00.SL0OW-REPLC-INX <= 99)
      set SL0OM002.SL0OM2-SL-PLT-QTY[SL0OW-REPLC-INX] skip, invisible;
      SL0OW-REPLC-INX = SL0OW-REPLC-INX + 1;
    end
  end

   /* ------------------------------------------------------------*/
   /* Format any descriptions for codes that are displayed.*/
   /* ------------------------------------------------------------*/

  /* IF SL0OW02.XWH-WHSE-CD IN XWHTBL.XWHCD*/
  /* ;*/
  /* IF XWHTBL.XXXSTAT(EZETST) EQ 'A';   /* and it is active*/
  /* ;*/
  /* MOVE XWHTBL.XWHSABRV(EZETST) TO SL0OM2-WHSE-SHT-ABRV;*/
  /* ;*/
  /* ELSE;*/
  /* MOVE ' ' TO SL0OM2-WHSE-SHT-ABRV;*/
  /* END;*/
  /* ELSE;*/
  /* ;*/
  /* MOVE ' ' TO SL0OM2-WHSE-SHT-ABRV;/* No description*/
  /* ;*/
  /* END;*/

   /* ------------------------------------------------------*/
   /* format the size indicator description*/
   /* ------------------------------------------------------*/

  /* IF SL0OM2-LOC-SZ-IND EQ 'S';*/
  /* MOVE 'SHORT' TO SL0OM002.SL0OM2-LOC-SZ-DESC;*/
  /* ELSE;*/
  /* ;*/
  /* IF SL0OM2-LOC-SZ-IND EQ 'Q';*/
  /* MOVE '3-QUARTER' TO SL0OM002.SL0OM2-LOC-SZ-DESC;*/
  /* ELSE;*/
  /* ;*/
  /* IF SL0OM2-LOC-SZ-IND EQ 'N';*/
  /* MOVE 'NORMAL' TO SL0OM002.SL0OM2-LOC-SZ-DESC;*/
  /* ELSE;*/
  /* ;*/
  /* IF SL0OM2-LOC-SZ-IND EQ 'T';*/
  /* MOVE 'TALL' TO SL0OM002.SL0OM2-LOC-SZ-DESC;*/
  /* ELSE;*/
  /* MOVE ' ' TO SL0OM002.SL0OM2-LOC-SZ-DESC;*/
  /* END;*/
  /* ;*/
  /* END;*/
  /* ;*/
  /* END;*/
  /* END;*/

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SL0OM002.XXX-CURR-DT = VGVar.currentShortGregorianDate; /* Current date*/

  SL0OM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SL0OM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SL0OM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    SL0OM002.XXX-MSG-LOC-ID = SLWREC.SLWTALOC;
                                   /* Message location*/

    set SL0OM002 alarm; /* Indicate sound alarm*/

  end

  converse SL0OM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SLWREC.SLWTALOC = " "; /* Message location*/
  SLWREC.SLWMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = SL0OM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SL0OM002.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* Reset modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SL0OM002.CATOAP normal; /* TO application*/
  set SL0OM002.CAITEM normal; /* Application data*/

  SL0OW00.SL0OW-REPLC-INX = 1; /* initialize index*/

  while (SL0OW00.SL0OW-REPLC-INX <= 99)

    set SL0OM002.SL0OM2-SL-SCHED-AVAL-FL[SL0OW-REPLC-INX] normal;

    set SL0OM002.SL0OM2-SL-PLT-QTY[SL0OW-REPLC-INX] normal;

    SL0OW-REPLC-INX = SL0OW-REPLC-INX + 1;

  end

   /* ------------------------------------------------------------*/
   /* Change the selection indicator to show the line was viewed.*/
   /* ------------------------------------------------------------*/

  SL0OW01.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] = "*";
                                  /* viewed*/


end // end SL0O-22000

// Format the data in the map
Function SL0O-22100()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set SL0OM002 initial; /* M002 input/output area*/

  SL0OW00.XXX-MAP-FMAT-FL = "N"; /* Format the map flag*/

   /* ------------------------------------------------------------*/
   /* Format the map fields from the display storage area.*/
   /* ------------------------------------------------------------*/

  SL0OM002.SL0OM2-WHSE-CD = SL0OW02.SL0OM2-WHSE-CD;
  SL0OM002.SL0OM2-WHSE-SHT-ABRV = SL0OW02.SL0OM2-WHSE-SHT-ABRV;
  SL0OM002.SL0OM2-AREA-CD = SL0OW02.SL0OM2-AREA-CD;
  SL0OM002.SL0OM2-ZONE-CD = SL0OW02.SL0OM2-ZONE-CD;
  SL0OM002.SL0OM2-LOC-CD = SL0OW02.SL0OM2-LOC-CD;
  SL0OM002.SL0OM2-LOC-TYP-CD = SL0OW02.SL0OM2-LOC-TYP-CD;
  SL0OM002.SL0OM2-LOC-SZ-IND = SL0OW02.SL0OM2-LOC-SZ-IND;
  SL0OM002.SL0OM2-LOC-SZ-DESC = SL0OW02.SL0OM2-LOC-SZ-DESC;
  SL0OM002.SL0OM2-STG-PRTY-CD = SL0OW02.SL0OM2-STG-PRTY-CD;

   /* ------------------------------------------------------------*/
   /* Format the 99 occurrences of AVAL-FL and PLT-QTY from W/S*/
   /* ------------------------------------------------------------*/

  SL0OW00.SL0OW-REPLC-INX = 1; /* initialize index*/

  while (SL0OW00.SL0OW-REPLC-INX <= 99)

    SL0OM002.SL0OM2-SL-SCHED-AVAL-FL[SL0OW-REPLC-INX] = SL0OW02.SL0OM2-SL-SCHED-AVAL-FL[SL0OW-REPLC-INX];

    SL0OM002.SL0OM2-SL-PLT-QTY[SL0OW-REPLC-INX] = SL0OW02.SL0OM2-SL-PLT-QTY[SL0OW-REPLC-INX];

    SL0OW-REPLC-INX = SL0OW-REPLC-INX + 1;

  end

end // end SL0O-22100

// Check change authorization
Function SL0O-22200()
   /* ------------------------------------------------------------*/
   /* If requested data was found and the user is authorized to*/
   /* change data on the screen, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (SL0OW00.XXX-RQT-DATA-FL == "N" /* Requested data was found*/
   && COMMAREA.CACHGFL == "Y"        /* and user authorized to change*/
   && SL0OW00.SL0OW-LN-SEL-IND[XXX-INX-FLD-NBR] == "C")
                  /* and user entered 'c' on the sel field of map1*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, protect the modifiable fields on the screen.*/
   /* ------------------------------------------------------------*/
  SL0OW00.SL0OW-REPLC-INX = 1; /* initialize index*/

  while (SL0OW00.SL0OW-REPLC-INX <= 99)
    set SL0OM002.SL0OM2-SL-SCHED-AVAL-FL[SL0OW-REPLC-INX] skip;
    set SL0OM002.SL0OM2-SL-PLT-QTY[SL0OW-REPLC-INX] skip;
    SL0OW-REPLC-INX = SL0OW-REPLC-INX + 1;
  end

  /* PKS START 12/13/96*/
  /* SET SL0OM002.SL0OM2-PF9 DARK,AUTOSKIP;*/
  /* SET SL0OM002.SL0OM2-PF12 DARK,AUTOSKIP;*/
  /* PKS END 12/13/96*/
end // end SL0O-22200

// Check attention identifier
Function SL0O-23000()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (SL0OW00.XXX-RQT-DATA-FL == "Y") /* Request for data pending*/
      set SL0OW02 empty; /* M002 display storage*/
    end

    SL0OW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/
    SL0OW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      SL0OS-TA0050-P(); /* Purge any temporary storage*/

      XSSLS-EXIT(); /* Exit to another application*/

      set SL0OM002.CATOAP cursor, bold; /* Highlight*/

      SL0OW00.XXX-MAP-DSP-CD = "1"; /* Map to be displayed*/

    else

      SLWREC.SLWTALOC = "23000"; /* Message location*/
      converseLib.validationFailed(258); /* PA/PF key not valid with fastpath*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If a PF key transfer requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SL0OM002"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/

      SL0OW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
      SL0OW00.XXX-MAP-DSP-CD = "1"; /* Map to be displayed*/

      exit stack; /* Exit to display map*/

    end

    SL0OS-TA0050-P(); /* Purge any temporary storage*/

    XSSLS-EXIT(); /* Exit to another application*/

    SL0OW00.XXX-MAP-DSP-CD = "1"; /* Map to be displayed*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    /* PKS START 12/13/96*/
    /* AND EZEAID NOT PF9             /* and PF9 was not pressed  12/13/96*/
    /* AND EZEAID NOT PF12;           /* and PF12 was not pressed 12/13/96*/
    /* PKS END 12/13/96*/

    SLWREC.SLWTALOC = "23000"; /* Message location*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end

  /* PKS START 12/13/96*/
  /* IF EZEAID IS PF9          /* set all not available*/
  /* OR EZEAID IS PF12;     /* set all available*/
  /* ;*/
  /* IF COMMAREA.CACHGFL NE 'Y'    /* user not authorized to update*/
  /* OR SL0OW00.SL0OW-LN-SEL-IND(XXX-INX-FLD-NBR) NE 'C';*/
  /* /* user entered for viewing*/
  /* MOVE '23000' TO SLWREC.SLWTALOC;/* Message location*/
  /* MOVE 4 TO EZEMNO;              /* PA/PF key pressed is not valid*/
  /* ;*/
  /* EZEFLO;                 /* exit to display map*/
  /* ;*/
  /* END;*/
  /* END;*/
  /* ;*/
  /* PKS END 12/13/96*/
end // end SL0O-23000

// Verify data that was entered
Function SL0O-24000()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    SLWREC.SLWTALOC = "24000"; /* Message location*/
    converseLib.validationFailed(259); /* Enter only with FAST PATH*/
    set SL0OM002.CAITEM cursor, bold; /* Highlight*/

  end

  /* PKS START 12/13/96*/
  /* IF EZEAID IS PF9*/
  /* OR EZEAID IS PF12*/
  /* OR COMMAREA.CACHGFL NE 'Y';      /* user has no authority to update*/
  if (COMMAREA.CACHGFL != "Y") /* user has no authority to update*/
    return;
  end
  /* PKS END 12/13/96*/

   /* ------------------------------------------------------------*/
   /* Verify/Edit the 99 occurences of AVAL-FL and PLT-QTY*/
   /* ------------------------------------------------------------*/

  SL0OW00.SL0OW-DATA-CHG-FL = "N";

  SL0O-24100(); /* Verify AVAL-FL and PLT-QTY*/

   /* ------------------------------------------------------------*/
   /* If any error was found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end SL0O-24000

// Verify enterable fields
Function SL0O-24100()
   /* -------------------------------------------------------------------*/
   /* verify the modifiable fields: AVAL-FL and PLT-QTY*/
   /* -------------------------------------------------------------------*/

  SL0OW00.SL0OW-REPLC-INX = 99; /* initialize index*/

  while (SL0OW00.SL0OW-REPLC-INX >= 1)

    if (SL0OM002.SL0OM2-SL-SCHED-AVAL-FL[SL0OW-REPLC-INX] == 
    SL0OW02.SL0OM2-SL-SCHED-AVAL-FL[SL0OW-REPLC-INX]
     && SL0OM002.SL0OM2-SL-PLT-QTY[SL0OW-REPLC-INX] == 
    SL0OW02.SL0OM2-SL-PLT-QTY[SL0OW-REPLC-INX])
         /* continue*/
    else

      if (SL0OM002.SL0OM2-SL-SCHED-AVAL-FL[SL0OW-REPLC-INX] == "Y")
        if (SL0OM002.SL0OM2-SL-PLT-QTY[SL0OW-REPLC-INX] > 0)
          converseLib.validationFailed(457); /* QTY should BE 0 when avail fl = 'y'*/
          set SL0OM002.SL0OM2-SL-SCHED-AVAL-FL[SL0OW-REPLC-INX] bold, cursor;
          set SL0OM002.SL0OM2-SL-PLT-QTY[SL0OW-REPLC-INX] bold;
        end
      else
        if (SL0OM002.SL0OM2-SL-SCHED-AVAL-FL[SL0OW-REPLC-INX] == "N")
          if (SL0OM002.SL0OM2-SL-PLT-QTY[SL0OW-REPLC-INX] != 1)
            converseLib.validationFailed(458); /* QTY should be = 1*/
                                                /* WHEN AVAL-FL EQ 'N'*/
            set SL0OM002.SL0OM2-SL-SCHED-AVAL-FL[SL0OW-REPLC-INX] bold, cursor;
            set SL0OM002.SL0OM2-SL-PLT-QTY[SL0OW-REPLC-INX] bold;
          end
        else
          converseLib.validationFailed(257); /* ONLY 'Y' OR 'N' ARE VALID VALUES;*/
          set SL0OM002.SL0OM2-SL-SCHED-AVAL-FL[SL0OW-REPLC-INX] bold, cursor;
          set SL0OM002.SL0OM2-SL-PLT-QTY[SL0OW-REPLC-INX] bold;
        end
      end

      if (converseVar.validationMsgNum == 0)

        SL0OW00.SL0OW-DATA-CHG-FL = "Y";

      end

    end

    SL0OW-REPLC-INX = SL0OW-REPLC-INX - 1;

  end
end // end SL0O-24100

// Process valid input request
Function SL0O-25000()

  /* PKS START 12/13/96*/
  /* IF EZEAID IS PF9;*/
  /* PERFORM SL0O-25100;        /* set all available*/
  /* ELSE;*/
  /* IF EZEAID IS PF12;*/
  /* PERFORM SL0O-25200;     /* set all not available*/
  /* ELSE;                      /* enter key*/
  if (SL0OW00.SL0OW-DATA-CHG-FL == "Y") /* data changed*/
    SL0O-25300(); /* move 99 occurences from map to VREPLC03*/
  else
    SL0O-25400(); /* search for next selection*/
    return;
  end
  /* END;*/
  /* END;*/
  /* PKS END 12/13/96*/

   /* ------------------------------------------------------------*/
   /* Obtain the current date and time.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain date and time*/

  VREPLC03.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VREPLC03.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/

  SL0OS-VREPLC03-U(); /* Update the table row*/

   /* ------------------------------------------------------------*/
   /* Commit all changes and refresh the data to be displayed.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* Commit all changes*/

  SLWREC.SLWTALOC = "25000"; /* Message location*/
  SLWREC.SLWMSGNO = 459; /* Table update was completed*/

  SL0OW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/


end // end SL0O-25000

// format VREPLC03 from map data
Function SL0O-25300()
  SL0OW00.SL0OW-REPLC-INX = 1; /* initialize index*/

  while (SL0OW00.SL0OW-REPLC-INX <= 99)

    VREPLC03.SL-SCHED-AVAL-FL[SL0OW-REPLC-INX] = SL0OM002.SL0OM2-SL-SCHED-AVAL-FL[SL0OW-REPLC-INX];

    VREPLC03.WHSE-SL-PLT-QTY[SL0OW-REPLC-INX] = SL0OM002.SL0OM2-SL-PLT-QTY[SL0OW-REPLC-INX];

    SL0OW-REPLC-INX = SL0OW-REPLC-INX + 1;

  end

end // end SL0O-25300

// Search for next selection
Function SL0O-25400()
   /* ------------------------------------------------------------*/
   /* Determine if another line was selected for viewing.*/
   /* ------------------------------------------------------------*/

  SL0OW00.XXX-INX-FLD-NBR = 1; /* initialize line-index*/
  SL0OW00.SL0OW-ROW-SEL-FL = "N"; /* row not selected*/
  while (SL0OW00.XXX-INX-FLD-NBR <= SL0OW00.XXX-INX-LMT-NBR
   /* until screen not full*/
   && SL0OW00.SL0OW-ROW-SEL-FL == "N")
                                  /* and 's' or 'c' not found*/

    if (SL0OW01.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] == "S"
     || SL0OW01.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] == "C")
      SL0OW00.SL0OW-ROW-SEL-FL = "Y";
    else
      SL0OW00.XXX-INX-FLD-NBR = SL0OW00.XXX-INX-FLD-NBR + 1;
    end
  end
  if (SL0OW00.SL0OW-ROW-SEL-FL == "Y") /* Line was selected*/

    SL0OM002.SL0OM2-WHSE-CD = SL0OW01.SL0OM1-WHSE-CD;

    SL0OM002.SL0OM2-WHSE-SHT-ABRV = SL0OW01.SL0OM1-WHSE-SHT-ABRV;

    SL0OM002.SL0OM2-AREA-CD = SL0OW01.SL0OM1-XAR-AREA-CD[XXX-INX-FLD-NBR];

    SL0OM002.SL0OM2-ZONE-CD = SL0OW01.SL0OM1-SL-ZONE-CD[XXX-INX-FLD-NBR];

    SL0OM002.SL0OM2-LOC-CD = SL0OW01.SL0OM1-SL-LOC-CD[XXX-INX-FLD-NBR];

    SL0OM002.SL0OM2-LOC-TYP-CD = SL0OW01.SL0OM1-YLT-LOC-TYP-CD[XXX-INX-FLD-NBR];

    SL0OM002.SL0OM2-LOC-SZ-IND = SL0OW01.SL0OM1-SL-LOC-SZ-IND[XXX-INX-FLD-NBR];

    SL0OM002.SL0OM2-LOC-SZ-DESC = SL0OM001.SL0OM1-LOC-SZ-DESC[XXX-INX-FLD-NBR];

    SL0OM002.SL0OM2-STG-PRTY-CD = SL0OW01.SL0OM1-YSP-STG-PRTY-CD[XXX-INX-FLD-NBR];

    SL0OW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/

  else

    SL0OW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
    SL0OW00.XXX-MAP-DSP-CD = "1"; /* Map to be displayed*/

  end


end // end SL0O-25400

// Add page to temporary storage
Function SL0OS-TA0050-A()
   /* ------------------------------------------------------------*/
   /* Add the next page to the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  SL0OW01.XXX-TEMP-STG-LNTH = SL0OW00.XXX-TEMP-STG-LNTH;
                                   /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (SL0OW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Add page*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, initialize the storage area and*/
   /* indicators to be used and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set SL0OW01 empty; /* M001 display storage*/

    SL0OW00.XXX-HI-PAGE-NBR = TA5REC.TA5TSQIX; /* Highest page number*/

    TA5REC.TA5TSQIX = 0; /* Clear last page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.SLWTALOC = "TA0050A"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(10); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = SLWREC.SLWTALOC; /* Message location*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0OS-TA0050-A

// Purge any temporary storage
Function SL0OS-TA0050-P()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set SL0OW01 empty; /* M001 display storage*/

  SL0OW00.XXX-PAGE-UPD-FL = "N"; /* Page update flag*/

  TA5REC.TA5TSQIX = 0; /* Displayed page number*/
  SL0OW00.XXX-HI-PAGE-NBR = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (SL0OW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Purge storage*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.SLWTALOC = "TA0050P"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(10); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = SLWREC.SLWTALOC; /* Message location*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0OS-TA0050-P

// Read temporary storage page
Function SL0OS-TA0050-R()
   /* ------------------------------------------------------------*/
   /* Read the next page from the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  SL0OW01.XXX-TEMP-STG-LNTH = SL0OW00.XXX-TEMP-STG-LNTH;
                                   /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = SL0OW00.XXX-CURR-PAGE-NBR; /* Page number*/

  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (SL0OW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Read page*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.SLWTALOC = "TA0050R"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(10); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = SLWREC.SLWTALOC; /* Message location*/
  TA1REC.TA1LOC = "READ TEMPORARY STORAGE PAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0OS-TA0050-R

// Update temporary storage page
Function SL0OS-TA0050-U()
   /* ------------------------------------------------------------*/
   /* Update the page in the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (SL0OW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update page*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.SLWTALOC = "TA0050U"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(10); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = SLWREC.SLWTALOC; /* Message location*/
  TA1REC.TA1LOC = "UPDATE TEMPORARY STORAGE PAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0OS-TA0050-U

// Close cursor 1
Function SL0OS-VREPLC03-C1()
   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "VREPLC03" ("C1", SQLCA, VREPLC03) {isNoRefresh = yes, isExternal = yes};
  end /* Close cursor*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.SLWTALOC = "REPLC03C1"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(10); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SLWREC.SLWTALOC; /* Message location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VREPLC03"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0OS-VREPLC03-C1

// Fetch next row in cursor 1
Function SL0OS-VREPLC03-N1()
   /* ------------------------------------------------------------*/
   /* Fetch the next row that was selected from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VREPLC03" ("N1", SQLCA, VREPLC03) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
    /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      SL0OW00.SL0OW-REPLC-EOF-FL = "Y"; /* End of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.SLWTALOC = "REPLC03N1"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SLWREC.SLWTALOC; /* Message location*/
  TA1REC.TA1LOC = "FETCH NEXT ROW IN CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VREPLC03"; /* Table view name*/
   /* MOVE VREPLC03.SY2KEY TO TA1REC.TA1TBLKE;/* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0OS-VREPLC03-N1

// Select the table row
Function SL0OS-VREPLC03-S()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VREPLC03" ("S ", SQLCA, VREPLC03) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.SLWTALOC = "REPLC03S"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SLWREC.SLWTALOC; /* Message location*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW"; /* Description*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VREPLC03"; /* Table view name*/
   /* MOVE VREPLC03.SY1KEY TO TA1REC.TA1TBLKE;/* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0OS-VREPLC03-S

// Select table rowcursor 1
Function SL0OS-VREPLC03-S1()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VREPLC03" ("S1", SQLCA, VREPLC03) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.SLWTALOC = "REPLC03S1"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SLWREC.SLWTALOC; /* Message location*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW"; /* Description*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VREPLC03"; /* Table view name*/
   /* MOVE VREPLC03.SY2KEY TO TA1REC.TA1TBLKE;/* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0OS-VREPLC03-S1

// Update DSTLOC.VREPLC03
Function SL0OS-VREPLC03-U()
   /* ------------------------------------------------------------*/
   /* Update the specified row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VREPLC03" ("U ", SQLCA, VREPLC03) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
    /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      SL0OW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/

      SLWREC.SLWTALOC = "VREPLC03U"; /* Message location*/
      SLWREC.SLWMSGNO = 12; /* Data was updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.SLWTALOC = "VREPLC03U"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = SLWREC.SLWTALOC; /* Message location*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW"; /* Description*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VREPLC03"; /* Table view name*/
   /* MOVE VREPLC03.SY2KEY TO TA1REC.TA1TBLKE;/* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0OS-VREPLC03-U

// Exit to another application
Function XSSLS-EXIT()
   /* ------------------------------------------------------------*/
   /* Set the application to be invoked for PF1 or PF4.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1) /* PF1 was pressed*/
    COMMAREA.CATOAP = "GD01"; /* Goal Documentation*/
  end

  if (converseVar.eventKey is pf4) /* PF4 was pressed*/
    COMMAREA.CATOAP = "MN0M"; /* Master Menu*/
  end

   /* ------------------------------------------------------------*/
   /* Save the system work record in the COMMAREA user area.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOSYS == COMMAREA.CACURSYS) /* Same system*/

    COMMAREA.CAUSERA = SLWREC.SLWGROUP; /* Save work record*/
  else
    COMMAREA.CAUSERA = " "; /* Clear user area*/

  end

   /* ------------------------------------------------------------*/
   /* Transfer control to the specified application.*/
   /* ------------------------------------------------------------*/

  XSEXIT(); /* Exit to another application*/

  SLWREC.SLWTALOC = "XSEXIT"; /* Message location*/

   /* ------------------------------------------------------------*/
   /* Reestablish the COMMAREA application and item fields.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CAEZSG3 = "0"; /* Force zero third character*/
  COMMAREA.CACURRAP = COMMAREA.CAEZSAP; /* Current application*/

  if (converseVar.eventKey is pfkey) /* PF key was pressed*/

    COMMAREA.CATOAP = " "; /* Clear TO application*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = " "; /* Clear map name from item*/
    end

  end


end // end XSSLS-EXIT

//*** RECORD=SL0OW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record SL0OW00 type basicRecord
  10 XXX-RQT-DATA-FL XXX-RQT-DATA-FL ; 
  10 XXX-MAP-FMAT-FL XXX-MAP-FMAT-FL ; 
  10 XXX-MAP-DSP-CD XXX-MAP-DSP-CD ; 
  10 XXX-TEMP-STG-LNTH XXX-TEMP-STG-LNTH ; 
  10 XXX-INX-LMT-NBR XXX-INX-LMT-NBR ; 
  10 XXX-INX-FLD-NBR XXX-INX-FLD-NBR ; 
  10 XXX-CURR-PAGE-NBR XXX-CURR-PAGE-NBR ; 
  10 XXX-HI-PAGE-NBR XXX-HI-PAGE-NBR ; 
  10 XXX-PAGE-UPD-FL XXX-PAGE-UPD-FL ; 
  10 SL0OW-REPLC-EOF-FL SL0OW-REPLC-EOF-FL ; 
  10 SL0OW-REPLC-INX SL0OW-REPLC-INX ; 
  10 SL0OW-DATA-CHG-FL SL0OW-DATA-CHG-FL ; 
  10 SL0OW-ROW-SEL-FL SL0OW-ROW-SEL-FL ; 
  10 SL0OW-XARKEY SL0OW-XARKEY ; 
    15 SL0OW-WHSE-CD SL0OW-WHSE-CD ; 
    15 SL0OW-AREA-CD SL0OW-AREA-CD ; 
  10 SL0OW-LN-SEL-IND SL0OW-LN-SEL-IND [12] ; 
end // end SL0OW00

//*** RECORD=SL0OW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record SL0OW01 type basicRecord
  5 XXX-TEMP-STG-LNTH XXX-TEMP-STG-LNTH ; 
  5 * char(212) ; 
    10 SL0OM1-WHSE-CD SL0OM1-WHSE-CD ; 
    10 SL0OM1-WHSE-SHT-ABRV SL0OM1-WHSE-SHT-ABRV ; 
    10 SL0OM1-AREA-CD SL0OM1-AREA-CD ; 
    10 SL0OM1-ZONE-CD SL0OM1-ZONE-CD ; 
    10 SL0OM1-LOC-CD SL0OM1-LOC-CD ; 
    10 SL0OM1-LOC-TYP-CD SL0OM1-LOC-TYP-CD ; 
    10 XXX-LN-SEL-IND XXX-LN-SEL-IND [12] ; 
    10 SL0OM1-XAR-AREA-CD SL0OM1-XAR-AREA-CD [12] ; 
    10 SL0OM1-SL-ZONE-CD SL0OM1-SL-ZONE-CD [12] ; 
    10 SL0OM1-SL-LOC-CD SL0OM1-SL-LOC-CD [12] ; 
    10 SL0OM1-YLT-LOC-TYP-CD SL0OM1-YLT-LOC-TYP-CD [12] ; 
    10 SL0OM1-SL-LOC-SZ-IND SL0OM1-SL-LOC-SZ-IND [12] ; 
    10 SL0OM1-YSP-STG-PRTY-CD SL0OM1-YSP-STG-PRTY-CD [12] ; 
end // end SL0OW01

//*** RECORD=SL0OW02 ****
// ------------------------
// Map 002 display storage.
// ------------------------
// ***********************
Record SL0OW02 type basicRecord
  10 SL0OM2-WHSE-CD SL0OM2-WHSE-CD ; 
  10 SL0OM2-WHSE-SHT-ABRV SL0OM2-WHSE-SHT-ABRV ; 
  10 SL0OM2-AREA-CD SL0OM2-AREA-CD ; 
  10 SL0OM2-ZONE-CD SL0OM2-ZONE-CD ; 
  10 SL0OM2-LOC-CD SL0OM2-LOC-CD ; 
  10 SL0OM2-LOC-TYP-CD SL0OM2-LOC-TYP-CD ; 
  10 SL0OM2-LOC-SZ-IND SL0OM2-LOC-SZ-IND ; 
  10 SL0OM2-LOC-SZ-DESC SL0OM2-LOC-SZ-DESC ; 
  10 SL0OM2-STG-PRTY-CD SL0OM2-STG-PRTY-CD ; 
  10 SL0OW02-AVAIL-FL-QTY char(297) ; 
    15 * char(3) [99] ; 
      20 SL0OM2-SL-SCHED-AVAL-FL SL0OM2-SL-SCHED-AVAL-FL ; 
      20 SL0OM2-SL-PLT-QTY SL0OM2-SL-PLT-QTY ; 
end // end SL0OW02

DataItem SL0OM1-AREA-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sl-loc-cd OR FROM IF RANGE
DataItem SL0OM1-LOC-CD char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL0OM1-LOC-TYP-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sl-loc-cd OR FROM IF RANGE
DataItem SL0OM1-SL-LOC-CD char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SL_LOC_SZ_IND
DataItem SL0OM1-SL-LOC-SZ-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sl-zone-cd OR FROM IF RANGE
DataItem SL0OM1-SL-ZONE-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xwh-whse-cd
DataItem SL0OM1-WHSE-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL0OM1-WHSE-SHT-ABRV char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL0OM1-XAR-AREA-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL0OM1-YLT-LOC-TYP-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL0OM1-YSP-STG-PRTY-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sl-zone-cd OR FROM IF RANGE
DataItem SL0OM1-ZONE-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xar-area-cd OR FROM IF RANGE
DataItem SL0OM2-AREA-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sl-loc-cd OR FROM IF RANGE
DataItem SL0OM2-LOC-CD char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL0OM2-LOC-SZ-DESC char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SL_LOC_SZ_IND
DataItem SL0OM2-LOC-SZ-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL0OM2-LOC-TYP-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sl_sched_aval_fl
DataItem SL0OM2-SL-PLT-QTY smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sl_sched_aval_fl
DataItem SL0OM2-SL-SCHED-AVAL-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL0OM2-STG-PRTY-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xwh-whse-cd
DataItem SL0OM2-WHSE-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL0OM2-WHSE-SHT-ABRV char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sl-zone-cd OR FROM IF RANGE
DataItem SL0OM2-ZONE-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL0OW-AREA-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL0OW-DATA-CHG-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL0OW-LN-SEL-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL0OW-REPLC-EOF-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Limit for map fields index
DataItem SL0OW-REPLC-INX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL0OW-ROW-SEL-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL0OW-WHSE-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL0OW-XARKEY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

