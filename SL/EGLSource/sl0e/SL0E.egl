package sl0e;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import pc.common.*;
import pk.common.*;
import pw.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
import ww.common.*;
//*** PROGRAM=SL0E ****
// ************************************************************
// 
//           STOCK LOCATE MAINTENANCE
//           ========================
// 
//           SL0E :  WORK ORDER MAINTENANCE
// 
//                   COMPRISED OF THE FOLLOWING PROCESSES:
// 
//                       SL0E010 (MAP)
//                           110
//                           120 (MAP)
//                           210
//                           220 (MAP)
//                           240 (MAP)
//                           310
//                           320 (MAP)
// ************************************************************
// 
// OVERVIEW: This application is intended to display the data
//           selected from the user inputs for maintenance or
//           to add new data entered by the user.
// 
//           It has been designed to protect the data fields
//           during entry of the key fields but allow and
//           detect new key data during data entry/maintenance.
// 
//           A successful update message will be displayed and
//           the data portion of the screen cleared & protected
//           in order to continue the maintenance process.
// 
//           PF12 will edit data inputs only.
// 
// ************************************************************
// 
// I/O Modules:
// ===========
// 
// NAME      DESCRIPTION
// --------  --------------------------------------------------
// 
// IO1500    sl3rec
// IO1480    sl4rec
// VWOLHD02  VWOLHD02
// IO1490    sl5rec
// IO1470    sl6rec
// IO1560    sl7rec
// IO1510    sl8rec
// IO1520    sl9rec
// IO3340    pc2rec
// SY1120    obtain sizes
// TA0050    tsq file
// TA0020    severe error routine
// 
// ************************************************************
// 
// Decision Table A   (To Location Mult-SKU-Flag Selection)
// ----------------
// Screen Mult-SKU-Flag           * | * | Y | Y | N | N
// From Mult-SKU-Flag             Y | N | Y | N | Y | N
//                                ---------------------
// WS Location Flag Must Be Yes   X |   | X | X |   |
// WS Location Flag Must Be No      | X |   |   | X | X
// 
// ************************************************************
// 
// Decision Table B   (To Area Execution)
// ----------------
// To Area is Processing              Y | N | N | N | N
// To location Mult-SKU-Flag          - | Y | N | N | N
// From Location Size CTR >1          - | - | Y | N | N
// SKU Match-Flag                     - | - | - | Y | N
//   * empty to sets Match-Flag on      |   |   |   |
//                                    -----------------
// Error                                |   | X |   | X
// Move                               X | X |   | X |
// 
// ************************************************************
// 
// Decision Table C   (From Location Status Codes)
// ----------------
// 01 Empty                       Y | - | - | - | - | - | - |-
// 02 Occupied                    - | Y | - | - | - | - | - | -
// 03 Reserved                    - | - | Y | Y | - | - | - | -
// 04 In-Transit                  - | - | - | - | Y | - | - | -
// 05 Frozen                      - | - | - | - | - | Y | - | -
// 07 Combined                    - | - | - | - | - | - | Y | Y
// Duplicate W.O.                 - | - | Y | N | - | - | Y | N
//                                ----------------------------
// Error                          X |   |   |   |   | X |   |
// Move                             | X |   | X | X |   |   | X
// skip                             |   | X |   |   |   | X |
// 
// ************************************************************
// 
// Decision Table D   (To Location Status Codes)
// ----------------
// Bulk Area/Not 03/09 whse | N | Y | Y | Y | Y | Y | Y | Y | Y
// 01 Empty                 | - | Y | - | - | - | - | - | - | -
// 02 Occupied              | - | - | Y | Y | - | - | - | - | -
// 03 Reserved              | - | - | - | - | Y | Y | - | - | -
// 04 In-Transit            | - | - | - | - | - | - | Y | - | -
// 05 Frozen                | - | - | - | - | - | - | - | Y | -
// 07 Combined              | - | - | - | - | - | - | - | - | Y
// Results Of B             | - | - | Y | N | Y | N | - | - | -
//                          |   |   |   |   |   |   |   |   |
// Error                    |   |   |   | X |   | X | X | X | X
// Move                     | X | X | X |   | X |   |   |   |
// 
// ************************************************************
// 
// MAINTENANCE HISTORY:
// ===================
// 
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// 00  06/01/87  RON POLITOWSKI  FIRST TIME CODED
// to  06/27/88  many changes by rikada & wjones
// 13  06/28/88  w. jones    add skip to next aisle code
// 14  09/13/88  w. jones    del'd 2 reset scrns in sh2
// 15  10/07/88  jcampb      add codes 'p' and 'q' to the
//                           validation of sl5rec.sl5splfl
//                           sl_loc_sh_plt_fl.dstloc.vlocat01
// 16  11/10/88  jwood       added xssegtr sgrp
// 17  11/21/88  w. jones    change 04 to 07 type processing
// 18  11/29/88  w. jones    comment out fyi reporting
// 19  02/01/89  ryonke      fix from location being put into
//                           the to location.
// 
// 20  03/01/89  ryonke      change program so work orders are
//                           created for a single sku unless
//                           specified as multiple sku work
//                           orders or a processing work order.
//    *  see decision table at bottom of prologue for criteria.
// 
// 21  03/22/89  ryonke      allow receiving locations to have
//                           multiple products moved without
//                           entering product.
// 22  04/10/89  ryonke      re-install empty loc status code
//                           logic for receiving locations.
// 23  09/05/89  ryonke      fix, check for owner group status.
// 24  11/15/89  ryonke      added fields for phase 4 db2 chngs
// 25   2/02/90  kande1      added new case and new slc logic
//                           enhance req. sl23 and sl116.
// 26  04/04090  kande1      replaced xsdtbl with pc2rec and
//                           io3340
// 24  04/17/90  ryonke      changed all references of pd1ponbr
//                           to pc3ponbr.
// PK#161   06/28/90  SPOPA   Default label print flag in work
//                            order header to 'N' on insert.
// PK#161   07/05/90  ryonke  Change whse ('02' - greenland)
//                            to be a processing whse.
//          07/30/90  ryonke  prevent prod sas fields from
//                            being striped in syloc for whse02
// sl1140-b 08/03/90  ryonke  allow products on setaside to be
//                            move to areas (05,07).  change
//                            area type default from processing
//                            to bulk.
// sl1140-b 08/09/90  ryonke  prev fix did not work in some
//                            cases. now should be fully fixed.
// SL#1169  09/07/90  SPOPA   Ensure that warehouse 02 location
//                            is empty for at least two days
//                            before being selected for use.
// 27       10/09/90  sjohns  db2 table changes:
//                              - change wa1, wa2, wcp1 to
//                                match sl6rec
//                              - rename xsdcd to pc2inseg
//                              - rename xsacd to xegcd
//                              - delete pd1ponbr
// mem app  11/26/90  ryonke  add support logic for new apparel
//                            warehouse (whse 51).  this logic
//                            is mostly to support units per
//                            case and new prod sas id.
// mem app  01/07/91  ryonke  add po number to work orders.
// fix      03/28/91  ryonke  set up auto store in whse '32'
//                            for hand stack locations.
// tbl chg  06/10/91  ryonke  initialized new work order fields
// fix      07/22/91  ryonke  strip slc from work order when
//                            checking from prod/loc in update
//                            process for ylt '11','12','12'.
// SL#0     10/09/91  SPOPA   Change "Allow Implicits" to NO.
// SL#0     10/14/91  SPOPA   Install units/case processing for
//                            Memphis Apparel (warehouse 51).
// SL#0     10/25/91  ryonke  strip units per case for products
//                            going to processing where the ylt
//                            is gt 10 and lt 20.
// SL#0     11/04/91  SPOPA   Include warehouse 07 in the units
//                            per case warehouse-specific code.
// SL#0     12/04/91  SPOPA   Change to clear PO information
//                            in TO location for warehouse 07
//                            if FROM location PO information
//                            is not the same and TAT not bulk.
//                            For warehouse 07, do not allow
//                            move if setaside exists in either
//                            FROM or TO location and setaside
//                            id is not the same.
// FIX      12/11/91  SPOPA   Zero units/case for warehouses 07
//                            and 51 if TO location YLT is 16.
//                            Clear RLOG pallett on all moves.
//                            For warehouses 07 and 51, if FAT
//                            is PR and YLT in (11,12,13,14,16,
//                            19), use zero units/case to fetch
//                            the FROM product location.
// FIX      12/12/91  SPOPA   Move units/case from work order
//                            then determine whether to zero.
// sl#0     01/02/92  ryonke  Calculate number of labels for
//                            a pallet move when units per case
//                            is greater than zero.
//                            Strip po fields and create date
//                            when ylt in (11,12,13,14,16,19).
// ----     01/16/92  jwood   add initialize w/s logic
// SL#00    05/14/92  CENGEL  Memphis Footwear Retrofit
//                            project.  Affected maps:
//                            SL0EM310.  Affected procs:
//                            SL0E220, SL0E320.  Affected
//                            statement groups: SL0ESC2,
//                            SL0ESH3, SL0ESI1, SL0ESP2,
//                            SL0ESU3, SL0ES1F, SL0ES1G,
//                            SL0ES1H, SL0ES1O, SL0ES13,
//                            SL0ES2F, SL0ES2Z, SL0ES25,
//                            SL0ES3D, SL0ES3F, SL0ES3G,
//                            SL0ES3I, SL0ES3J, SL0ES3K,
//                            SL0ES3S.  Affected records:
//                            SL0EW01.  Affected data items:
//                            SL0EW-TO-LOC.
// SL#00   05/18/92 CENGEL    Added logic to SL0ES1O and
//                            SL0ES2Z to default
//                            sl8rec.sl-wo-nbr-of-labl to 1
// SL#00   05/19/92 CENGEL    Added logic to SL0ES1O and
//                            SL0ES2Z to fix lane assignment
// SL#00   05/21/92 CENGEL    Added logic to SL0ES1O and
//                            SL0ES2Z to fix lane assignment
//                            for 'to' ylt of 22 also.
// SL#00   05/29/92 CENGEL    Added logic to SL0ES1O and
//                            SL0ES2Z to prevent multiple
//                            cases being moved to one hand-
//                            stack location.
// SL#00   06/02/92 CENGEL    Added logic to SL0ES1O and
//                            SL0ES2Z to allow pallets
//                            to be moved from receiving
//                            locations to handstack locations
// SL#00   06/19/92 RYONKE    Changed working storage records
//                            to match table change records.
// SL#00   07/09/92 RYONKE    Changed vrows001's logic to match
//                            new DB2 record structure.
// SL#00   08/25/92 RYONKE    convert dprod lookups to dpick
//                            lookups.
// SL#00   08/28/92 RYONKE    change whse '02' to support
//                            units per case logic.
// SL#0    09/14/92 RYONKE    Default sl-wo-nbr-of-labl to 1
//                            for warehouse '02' when work
//                            order is from receiving and to
//                            processing.
// SL#00   06/19/92 RYONKE    Changed application due to table
//                            changes.
// NSG     02/26/93 gray      Changes to allow WHSE 25 (NSG) to
//                            use this appl.
// NSG     03/09/93 gray      Changes to allow WHSE 25 (NSG) to
//                            re-use a location the same day.
// TBLCHG  08/09/93 Ryonke    Code changes for table changes.
// none    10/01/93 Ryonke    correct 0C7 for redefined field.
// SL#00   03/02/94 RYONKE    Changed application due to table
//                            changes.
// SL#00   08/23/95 RYONKE    Added warehouse specific logic
//                            for Canada warehouse (whse=42).
//                            changes.
// SL#00   08/23/95 RYONKE    Added warehouse specific logic
//                            for Canada warehouse (whse=42).
// SL#00   12/14/95 PJAMES    Changed SAS code for CANADA to
//                            103
// SL#0    01/04/96 RYONKE    Default sl-wo-nbr-of-labl to 1
//                            for warehouse '42' when work
//                            order is from receiving and to
//                            processing.
// SL#0    01/04/96 RYONKE    Default sl-wo-nbr-of-labl to 1
//                            for warehouse '42' always.
// SL#0    02/08/96 RYONKE    Default location type 15 to zero
//                            units per case for 02 18 000000
//                            product moves (Canada Only).
// aprlprj 11/21/96 pshank    Round robin bulk changes to
//                            move a variable number of pallets
//                            to an aisle and move to the next
//                            aisle.
// aprlprj 01/09/97 pshank    Was not going back to first
//                            location when last location in
//                            zone is reached
//                            Procedures changed:
//                            SL0ESBB; SL0EW01 (Work. stg)
//         02/18/97 pcole     bypass units per case for balls
// aprlprj 04/03/97 OVAZQU    Allow for a setaside switch and
//                            ID. to be entered when doing
//                            individual W/O creation.
//         07/15/97 VKAKUB    To make locations which are
//                            empty for a day also to select
//                            instead of two days for warehouse
//                            07,04,02
// aprlprj 07/20/97 OVAZQU    Add PF key for SL0Q out of 210 &
//                            310 maps.  Plus display reminder
//                            messages to do pf15 and pf18 when
//                            done with those screen. (whse 51
//                            only).
// retroft 06/18/98 sjohn6    change edit in sl0es25 to not
//                            check units/case for picking
//         07/15/98 AJALIS    Display reminder messages to do
//                            pf15 and pf18 when done with
//                            SL0E210 SL0E310 for all whses.
//         12/16/98 DBRYLV    Changed the code so that when
//                            products are moved to a location
//                            type '10' the units per case are
//                            put equal to 0 .
// retroft 12/30/98 sjohn6    no more 2 day lag for whse 51
//                            also commented out qc check
// slmaInt 05/15/00 ssethu    Change has been made to get the
//                            Lane Nbr when the Product
//                            is moved to location type of 10.
//                            This will enable to print the
//                            Barcode through SL0Q.
// slmaint 09/25/00 lpattn    Added code to make the TO AREA/TO
//                            ZONE mandatory in both SL0EM110
//                            and SL0EM210 map for 07 and 04
// DLVRUSA 02/28/01 SSETHU    CHANGES FOR US GO-LIVE
// tt      02/04/02 SGOPAL    TO ADD YLT-TYP-CD '90'
// *********************
Program SL0E type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PC2REC PC2REC; // record
  PKEREC PKEREC; // record
  PKNREC PKNREC; // record
  SL0EW01 SL0EW01; // record
  SL0EW02 SL0EW02; // record
  SL0EW03 SL0EW03; // record
  SL0EW11 SL0EW11; // record
  SL0EW22 SL0EW22; // record
  SL0EWA1 SL0EWA1; // record
  SL0EWA2 SL0EWA2; // record
  SL0EWB1 SL0EWB1; // record
  SL0EWB2 SL0EWB2; // record
  SL0EWC0 SL0EWC0; // record
  SL0EWC1 SL0EWC1; // record
  SL0EWCP1 SL0EWCP1; // record
  SL0EWS1 SL0EWS1; // record
  SL0EWS2 SL0EWS2; // record
  SL0EWT2 SL0EWT2; // record
  SL0EWX1 SL0EWX1; // record
  SL3REC SL3REC; // record
  SL4REC SL4REC; // record
  SL5REC SL5REC; // record
  SL7REC SL7REC; // record
  SL9REC SL9REC; // record
  SLVREC SLVREC; // record
  SLWREC SLWREC; // record
  SLXREC SLXREC; // record
  SQLCA SQLCA; // record
  SYPREC SYPREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TA9REC TA9REC; // record
  VROWS001 VROWS001; // record
  VSYLOC02 VSYLOC02; // record
  VWOLHD02 VWOLHD02; // record
  X2CREC X2CREC; // record
  X3CREC X3CREC; // record
  X4CREC X4CREC; // record
  XARREC XARREC; // record
  XZZREC XZZREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XARTBL; // table
  use XDMTBL; // table
  use XGPTBL; // table
  use XOWTBL; // table
  use XPGTBL; // table
  use XQATBL; // table
  use XSLTBL; // table
  use XUMTBL; // table
  use XWHTBL; // table
  use YZTTBL; // table
  use SL0EM.SL0EM010,  // forms
      SL0EM.SL0EM110, 
      SL0EM.SL0EM210, 
      SL0EM.SL0EM310
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    SL0E010: SL0E010();

     /* ************************************************************/
     /* *** if the map selection no. setup:                     ****/
     /* *** use it to go directly to selection (skip converse)  ****/
     /* ************************************************************/

    if (SL0EM010.XMSLMSNO > " ")
      if (SL0EM010.XMSLMSNO == "1")
        goto SL0E110; /* <=== new function*/
      else
        if (SL0EM010.XMSLMSNO == "2")
          goto SL0E210; /* <=== new function*/
        else
          if (SL0EM010.XMSLMSNO == "3")
            goto SL0E310; /* <=== new function*/
          end
        end
      end
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "010Z";
      SLWREC.SLWMSGNO = 0017; /* <--- invalid selection msg*/
      set SL0EM010.XMSLMSNO cursor, bold;
      goto SL0E020; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "020 "; /* error id location id*/
    goto SL0E020; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/

    SL0E020: SL0E020();

     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0E010; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0E110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0E210;
    end

    if (converseVar.eventKey is pf15)
      goto SL0E310;
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0E020; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      if (SL0EM010.XMSLMSNO == "1")
        goto SL0E110; /* <=== new function*/
      end
      if (SL0EM010.XMSLMSNO == "2")
        goto SL0E210; /* <=== new function*/
      end
      if (SL0EM010.XMSLMSNO == "3")
        goto SL0E310; /* <=== new function*/
      end
       /* ************************************************************/
       /* *** note: invalid selection is detected at this point   ****/
       /* ************************************************************/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "020Y";
      SLWREC.SLWMSGNO = 0017; /* <--- invalid selection msg*/
      set SL0EM010.XMSLMSNO cursor, bold;
      goto SL0E020; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0E020; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/

    SL0E110: SL0E110();

     /* ************************************************************/
     /* ***  error on aquire of work order  group number        ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0E020;
    end

     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "120 "; /* error id location id*/
    goto SL0E120; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/

    SL0E120: SL0E120();

     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      if (SLWREC.SLWLINPP == 0) /* No units/case error*/
        goto SL0E110; /* <=== re-start this function*/
      else
        SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
        SLWREC.XXXLOCID = "120 "; /* <=== reset error id*/
        SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
        set SL0EM110.SL8FRAR[SLWLINPP] initialAttributes, cursor;
        set SL0EM110.SL8FRZN[SLWLINPP] initialAttributes;
        set SL0EM110.SL8FRLC[SLWLINPP] initialAttributes;
        set SL0EM110.SL2PALET[SLWLINPP] initialAttributes;
        set SL0EM110.SL2CASE[SLWLINPP] initialAttributes;
        SLWREC.SLWLINPP = 0; /* Reset units/case error*/
        goto SL0E120; /* <=== re-display this screen*/
      end
    end

    if (converseVar.eventKey is pf3)
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0EM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0E020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0E110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14) /* <=== start new function*/
      goto SL0E210;
    end

    if (converseVar.eventKey is pf15) /* <=== start new function*/
      goto SL0E310;
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0E120; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      SLWREC.XXXLOCID = "120 ";
      goto SL0E120; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0E120; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/

    SL0E210: SL0E210();

     /* ************************************************************/
     /* *** error on acquire of work order group number         ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y") /* return to main menu*/
      goto SL0E020;
    end

     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "220 "; /* error id location id*/
    goto SL0E220; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/

    SL0E220: SL0E220();

     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0E210; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0EM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0E020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0E110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0E210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0E310; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0E220; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      SLWREC.XXXLOCID = "240 ";
      goto SL0E240; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0E220; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/

    SL0E240: SL0E240();

     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      if (SLWREC.SLWLINPP == 0) /* No units/case error*/
        goto SL0E210; /* <=== re-start this function*/
      else
        SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
        SLWREC.XXXLOCID = "240 "; /* <=== reset error id*/
        SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
        set SL0EM210.SL0EWWOQ[SLWLINPP] initialAttributes, cursor;
        SLWREC.SLWLINPP = 0; /* Reset units/case error*/
        goto SL0E240; /* <=== re-display this screen*/
      end
    end

    if (converseVar.eventKey is pf3)
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0EM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0E020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0E110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0E210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0E310; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      if (SLWREC.SLWSKYSW == "N")
        goto SL0E220; /* <=== re-display key screen*/
      end
      goto SL0E240; /* <=== re-display data screen*/
    end

     /* ************************************************************/
     /* *** if no error and new key: re-display the data scrn   ****/
     /* ************************************************************/

    if (SLWREC.SLWSKYSW == "N")
      SLWREC.XXXLOCID = "240 ";
      goto SL0E240; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      SLWREC.XXXLOCID = "220 ";
      goto SL0E220; /* <=== setup for new input*/
    end

    if (converseVar.eventKey is pf12)
      SLWREC.XXXLOCID = "240 ";
      goto SL0E240; /* <=== converse data map*/
    end
     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "240Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0E240; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/

    SL0E310: SL0E310();

     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "320 "; /* error id location id*/
    goto SL0E320; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/

    SL0E320: SL0E320();

     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0E310; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0EM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0E020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0E110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0E210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0E310; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0E320; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      SLWREC.XXXLOCID = "320 ";
      goto SL0E320; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0E320; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/

  end // end main
end // end SL0E

// one time initializations
Function SL0E010()

   /* ************************************************************/
   /* *** standard security checking                          ****/
   /* *** note: comment out if exec'g from your msl           ****/
   /* ************************************************************/

  XSENTRY();

   /* ************************************************************/
   /* *** standard segmented trans id setting                 ****/
   /* ************************************************************/

  XSSEGTR();

   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0EM010 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0EM110 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0EM210 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0EM310 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set PC2REC empty; /**/
  set SL0EW01 empty; /**/
  set SL0EW02 empty; /**/
  set SL0EW03 empty; /**/
  set SL0EW11 empty; /**/
  set SL0EW22 empty; /**/
  set SL0EWA1 empty; /**/
  set SL0EWA2 empty; /**/
  set SL0EWB1 empty; /**/
  set SL0EWB2 empty; /**/
  set SL0EWC0 empty; /**/
  set SL0EWC1 empty; /* row counter table*/
  set SL0EWCP1 empty; /**/
  set SL0EWS1 empty; /* row saved loc.s table*/
  set SL0EWS2 empty; /**/
  set SL0EWT2 empty; /**/
  set SL0EWX1 empty; /* row counter & save fields*/
  set SLVREC empty; /**/
  set SLWREC empty; /* common working storage fields*/
  set SLXREC empty; /**/
  set SL3REC empty; /**/
  set SL4REC empty; /**/
  set SL5REC empty; /**/
   /* SET SL6REC EMPTY;                 /**/
  set VSYLOC02 empty; /**/
  set SL7REC empty; /**/
   /* SET SL8REC EMPTY;                 /**/
  set VWOLHD02 empty; /**/
  set SL9REC empty; /**/
  set PKNREC empty; /**/
  set SYPREC empty; /**/
  set TA1REC empty; /* TA0020 record*/
  set TA2REC empty; /**/
  set TA5REC empty; /**/
  set TA9REC empty; /**/
  set VROWS001 empty; /**/
  set X2CREC empty; /**/
  set X3CREC empty; /**/
  set X4CREC empty; /* check byte(s) record*/
  set XARREC empty; /**/
  set SQLCA empty; /* SQL returned data record*/
  set ERRSQLCA empty; /* TA0020 version of SQLCA*/

  SLWREC.XXXRVNBR = "42";

  SLWREC.XXXMAPNM = "SL0EM010";
  SLWREC.XXXTITLE = "      WORK ORDERS MENU           ";

  XSX2CDT(); /* get current ccyymmdd*/
  SLWREC.XXXAPPID = "SL0E"; /* error id appl. name*/
  SLWREC.SLWTALOC = "SL0E010 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0EM010"; /* TA0020 current map name*/

  SLWREC.SLWFTMSW = "Y"; /* error switch*/
  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* saved msg no.*/
  converseVar.commitOnConverse = 1; /* auto commit on converse*/
  VGVar.handleHardIOErrors = 1; /* allows sqlcode handling*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0EM010.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0EM010.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0EM010.XXXTITLE = SLWREC.XXXTITLE;
  SL0EM010.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  SLWREC.SLWSUMQU = "SL0E"; /* summary tsq id*/
  SLWREC.SLWDETQU = "    "; /* detail tsq id*/
  SL0EWX1.SL0EWPMX = 10; /* max rows to be saved in VPARM101*/
  SL0EWX1.SL0EWMLR = 6; /* max pallets/loc.s per row*/
  SL0EWX1.SL0EWMSR = 12; /* max saved loc.s per row*/
  SL0EWX1.SL0EWMSL = 100; /* max saved loc.s*/
  SL0EWX1.SL0EWLSF = "N"; /* loc.s saved flag (y/n)*/
  SL0EWX1.SL0EWUSW = "N"; /* loc. updated switch*/

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** check commarea fast path item to see if it should   ****/
   /* *** be used to setup working storage &/or map fields    ****/
   /* ************************************************************/

  if (COMMAREA.CAITEM > " ")
    SL0ESY0(); /* <=== use commarea item*/
    COMMAREA.CAITEM = " ";
  end

   /* ************************************************************/
   /* *** if the map selection no. is '4' or '5' we must      ****/
   /* *** transfer to another application.                    ****/
   /* ************************************************************/

  if (SL0EM010.XMSLMSNO == "4")
    COMMAREA.CATOAP = "SL0F";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    COMMAREA.CATOAP = "010A";
    SLWREC.SLWMSGNO = 0;
    SL0EM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  else
    if (SL0EM010.XMSLMSNO == "5")
      COMMAREA.CATOAP = "SL0G";
      XSEXIT();
      SLWREC.SLWERRSW = "Y";
      COMMAREA.CATOAP = "010B";
      SLWREC.SLWMSGNO = 0;
      SL0EM010.VAGen_EZEMSG = CAMSG;
      exit stack;
    end
  end

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/

end // end SL0E010

// converse & control key entry
Function SL0E020()

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0EM010.XXXERRID = SLWREC.XXXERRID;

  converse SL0EM010 ;

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020A";
    SLWREC.SLWMSGNO = 0;
    SL0EM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020B";
    SLWREC.SLWMSGNO = 0;
    SL0EM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020C";
    SLWREC.SLWMSGNO = 0;
    SL0EM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020D";
    SLWREC.SLWMSGNO = 0;
    SL0EM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0EM010.CATOAP > " ")
    COMMAREA.CATOAP = SL0EM010.CATOAP;
    COMMAREA.CAITEM = SL0EM010.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020E";
    SLWREC.SLWMSGNO = 0;
    SL0EM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0EM010.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0EM010.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "020 ";
  set SL0EM010.CATOAP initialAttributes;
  set SL0EM010.CAITEM initialAttributes;
  set SL0EM010.XMSLMSNO cursor, initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0EM010.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0EM010.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0ESH0(); /* <=== enter processing*/

     /* ************************************************************/
     /* *** if the map selection no. is '4' or '5' we must      ****/
     /* *** transfer to another application.                    ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW != "Y")
      if (SL0EM010.XMSLMSNO == "4")
        COMMAREA.CATOAP = "SL0F";
        XSEXIT();
        SLWREC.SLWERRSW = "Y";
        COMMAREA.CATOAP = "020J";
        SLWREC.SLWMSGNO = 0;
        SL0EM010.VAGen_EZEMSG = CAMSG;
        exit stack;
      else
        if (SL0EM010.XMSLMSNO == "5")
          COMMAREA.CATOAP = "SL0G";
          XSEXIT();
          SLWREC.SLWERRSW = "Y";
          COMMAREA.CATOAP = "020K";
          SLWREC.SLWMSGNO = 0;
          SL0EM010.VAGen_EZEMSG = CAMSG;
          exit stack;
        end
      end
    end

    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15)
    exit stack;
  end

  if (converseVar.eventKey is pf16)
    COMMAREA.CATOAP = "SL0F";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    COMMAREA.CATOAP = "020L";
    SLWREC.SLWMSGNO = 0;
    SL0EM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  else
    if (converseVar.eventKey is pf17)
      COMMAREA.CATOAP = "SL0G";
      XSEXIT();
      SLWREC.SLWERRSW = "Y";
      COMMAREA.CATOAP = "020M";
      SLWREC.SLWMSGNO = 0;
      SL0EM010.VAGen_EZEMSG = CAMSG;
      exit stack;
    end
  end
   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "020I";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/

end // end SL0E020

// one time initializations
Function SL0E110()

   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0EM110 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** get yesterdays date                                 ****/
   /* ************************************************************/

  SL0ES12(); /* <=== get yesterdays date*/
  SL0EWX1.SL0EWDT = SL0EW11.SL0EWDT;

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0EW01 empty; /* sl0e110 working storage area*/
  set SLXREC empty; /* saving keys for commarea*/
  set SLVREC empty; /* saving keys for commarea*/
  set SL3REC empty; /* appl. ws control table record*/
  set SL4REC empty; /* appl. ws control table record*/
  set SL5REC empty; /* appl. ws control table record*/
   /* SET SL6REC EMPTY;                /* appl. ws control table record*/
  set VSYLOC02 empty; /* appl. ws control table record*/
  set SL7REC empty; /* appl. ws control table record*/
   /* SET SL8REC EMPTY;                /* appl. ws control table record*/
  set VWOLHD02 empty; /* appl. ws control table record*/
  set SL9REC empty; /* appl. ws control table record*/
  set PKNREC empty; /* appl. ws control table record*/
  set SYPREC empty; /* appl. ws control table record*/
  set TA5REC empty; /* appl. ws control table record*/
  set TA2REC empty; /* appl. ws control table record*/
  set XARREC empty; /* appl. ws control table record*/
  set SL0EWA1 empty; /* appl. ws control table record*/
  set SL0EWB1 empty; /* appl. ws control table record*/
  set SL0EWC0 empty; /* appl. ws control table record*/
  set SL0EWCP1 empty; /* appl. ws compare table record*/

  SLWREC.XXXMAPNM = "SL0EM110";
  SLWREC.XXXTITLE = "     WORK ORDER CREATION (GROUP)   ";

  SLWREC.SLWTALOC = "SL0E110 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0EM110"; /* TA0020 current map name*/

  SL0EW01.SL0EWPFL = "N"; /* pallets from table*/
  SLWREC.SLWFTMSW = "Y"; /* no setaside detected yet*/
  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* saved msg no.*/
  SLWREC.SLWLINPP = 0; /* Units/case line error*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0EM110.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0EM110.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0EM110.XXXTITLE = SLWREC.XXXTITLE;
  SL0EM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  SL0EM110.XWHCD = COMMAREA.XWHCD;
  if (SL0EM110.XWHCD == "  ")
    SLWREC.XXXLOCID = "110W";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0EM110.XWHCD cursor, bold;
  end

  SL0EM110.SL-LOC-SZ-IND = "*"; /* default to from loc. flag value*/
  SL0EM110.SL0EMMPF = "*"; /* default to from loc. flag value*/

  SL3REC.XWHCD = SL0EM110.XWHCD; /* warehouse code from map*/

   /* ************************************************************/
   /* *** setup the following before i/o sgrp execution:      ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = found - continue                           ****/
   /* ***   -911 = deadlock - return w/ try again msg         ****/
   /* ***  <0 or = db/severe error - contact programming msg  ****/
   /* ***    +100  note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0E110 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

   /* ************************************************************/
   /* *** get the current work order group number             ****/
   /* ************************************************************/

  SL0ES-GET-WO-GRP(); /* <=== get current wo grp nbr*/

  SL0EM110.SL8WOGRP = SL3REC.SL3NXWOG;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit();

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/

end // end SL0E110

// converse & control key entry
Function SL0E120()

   /* ************************************************************/
   /* *** protect (askip) data fields (if any)                ****/
   /* *** note: cursor is set if error or is map's default    ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup msg no., error id and wo order group nbr      ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0EM110.XXXERRID = SLWREC.XXXERRID;

  converse SL0EM110 ;

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* If ENTER not pressed, reset units/case line error number.*/
   /* ************************************************************/

  if (converseVar.eventKey not enter) /* ENTER not pressed*/
    SLWREC.SLWLINPP = 0; /* Units/case line error*/
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120A";
    SLWREC.SLWMSGNO = 0;
    SL0EM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120B";
    SLWREC.SLWMSGNO = 0;
    SL0EM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120C";
    SLWREC.SLWMSGNO = 0;
    SL0EM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0EM110.CATOAP > " ")
    COMMAREA.CATOAP = SL0EM110.CATOAP;
    COMMAREA.CAITEM = SL0EM110.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120D";
    SLWREC.SLWMSGNO = 0;
    SL0EM110.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0EM110.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0EM110.VAGen_EZEMSG = " ";
  set SL0EM110.CATOAP initialAttributes;
  set SL0EM110.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset key input fld attr.s as orig.ly defined       ****/
   /* ************************************************************/

  set SL0EM110.XWHCD initialAttributes;

   /* ************************************************************/
   /* *** reset data input fld attr.s as orig.ly defined      ****/
   /* ************************************************************/

  set SL0EM110.SL8WOGRP initialAttributes;
  set SL0EM110.SL8FRAR[1] initialAttributes;
  set SL0EM110.SL8FRAR[2] initialAttributes;
  set SL0EM110.SL8FRAR[3] initialAttributes;
  set SL0EM110.SL8FRAR[4] initialAttributes;
  set SL0EM110.SL8FRAR[5] initialAttributes;
  set SL0EM110.SL8FRAR[6] initialAttributes;
  set SL0EM110.SL8FRAR[7] initialAttributes;
  set SL0EM110.SL8FRAR[8] initialAttributes;
  set SL0EM110.SL8FRZN[1] initialAttributes;
  set SL0EM110.SL8FRZN[2] initialAttributes;
  set SL0EM110.SL8FRZN[3] initialAttributes;
  set SL0EM110.SL8FRZN[4] initialAttributes;
  set SL0EM110.SL8FRZN[5] initialAttributes;
  set SL0EM110.SL8FRZN[6] initialAttributes;
  set SL0EM110.SL8FRZN[7] initialAttributes;
  set SL0EM110.SL8FRZN[8] initialAttributes;
  set SL0EM110.SL8FRLC[1] initialAttributes;
  set SL0EM110.SL8FRLC[2] initialAttributes;
  set SL0EM110.SL8FRLC[3] initialAttributes;
  set SL0EM110.SL8FRLC[4] initialAttributes;
  set SL0EM110.SL8FRLC[5] initialAttributes;
  set SL0EM110.SL8FRLC[6] initialAttributes;
  set SL0EM110.SL8FRLC[7] initialAttributes;
  set SL0EM110.SL8FRLC[8] initialAttributes;
  set SL0EM110.SL8TOAR[1] initialAttributes;
  set SL0EM110.SL8TOAR[2] initialAttributes;
  set SL0EM110.SL8TOAR[3] initialAttributes;
  set SL0EM110.SL8TOAR[4] initialAttributes;
  set SL0EM110.SL8TOAR[5] initialAttributes;
  set SL0EM110.SL8TOAR[6] initialAttributes;
  set SL0EM110.SL8TOAR[7] initialAttributes;
  set SL0EM110.SL8TOAR[8] initialAttributes;
  set SL0EM110.SL8TOZN[1] initialAttributes;
  set SL0EM110.SL8TOZN[2] initialAttributes;
  set SL0EM110.SL8TOZN[3] initialAttributes;
  set SL0EM110.SL8TOZN[4] initialAttributes;
  set SL0EM110.SL8TOZN[5] initialAttributes;
  set SL0EM110.SL8TOZN[6] initialAttributes;
  set SL0EM110.SL8TOZN[7] initialAttributes;
  set SL0EM110.SL8TOZN[8] initialAttributes;
  set SL0EM110.SL8TOLC[1] initialAttributes;
  set SL0EM110.SL8TOLC[2] initialAttributes;
  set SL0EM110.SL8TOLC[3] initialAttributes;
  set SL0EM110.SL8TOLC[4] initialAttributes;
  set SL0EM110.SL8TOLC[5] initialAttributes;
  set SL0EM110.SL8TOLC[6] initialAttributes;
  set SL0EM110.SL8TOLC[7] initialAttributes;
  set SL0EM110.SL8TOLC[8] initialAttributes;
  set SL0EM110.SL2PALET[1] initialAttributes;
  set SL0EM110.SL2PALET[2] initialAttributes;
  set SL0EM110.SL2PALET[3] initialAttributes;
  set SL0EM110.SL2PALET[4] initialAttributes;
  set SL0EM110.SL2PALET[5] initialAttributes;
  set SL0EM110.SL2PALET[6] initialAttributes;
  set SL0EM110.SL2PALET[7] initialAttributes;
  set SL0EM110.SL2PALET[8] initialAttributes;
  set SL0EM110.SL2CASE[1] initialAttributes;
  set SL0EM110.SL2CASE[2] initialAttributes;
  set SL0EM110.SL2CASE[3] initialAttributes;
  set SL0EM110.SL2CASE[4] initialAttributes;
  set SL0EM110.SL2CASE[5] initialAttributes;
  set SL0EM110.SL2CASE[6] initialAttributes;
  set SL0EM110.SL2CASE[7] initialAttributes;
  set SL0EM110.SL2CASE[8] initialAttributes;
  set SL0EM110.SL8INSTR initialAttributes;
  set SL0EM110.SL-LOC-SZ-IND initialAttributes;
  set SL0EM110.SL0EMMPF initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0EM110.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120E";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0EM110.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15)
    exit stack;
  end

  if (converseVar.eventKey is pf16)
    COMMAREA.CATOAP = "SL0F";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120F";
    SLWREC.SLWMSGNO = 0;
    SL0EM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf17)
    COMMAREA.CATOAP = "SL0G";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120G";
    SLWREC.SLWMSGNO = 0;
    SL0EM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF18: go to SL0g selection #1                    ****/
   /* *** note: save keys in slxrec & move to usera           ****/
   /* ***       save keys are whse cd and wo group nbr        ****/
   /* ************************************************************/
   /* ************************************************************/
   /* *** check if warehouse code in the table                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf18)
    if (SL0EM110.XWHCD > " ")
      if (SL0EM110.XWHCD in XWHTBL.XWHCD)
        if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
          COMMAREA.CATOAP = "SL0G";
          COMMAREA.CAITEM = "5";
          SL0ES11(); /* <=== slxrec to commarea.usera*/
          XSEXIT();
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "120H";
          SLWREC.SLWMSGNO = 0;
          SL0EM110.VAGen_EZEMSG = CAMSG;
          exit stack;
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "120I";
          SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
          set SL0EM110.XWHCD cursor, bold;
          exit stack;
        end
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "120J";
        SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
        set SL0EM110.XWHCD cursor, bold;
        exit stack;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "120K";
      SLWREC.SLWMSGNO = 0009; /* <--- inactive msg*/
      set SL0EM110.XWHCD cursor, bold;
      exit stack;
    end
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    if (SL0EM110.XWHCD != SL3REC.XWHCD)

   /* ************************************************************/
   /* *** setup the following before i/o sgrp execution:      ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = found - continue                           ****/
   /* ***   -911 = deadlock - return w/ try again msg         ****/
   /* ***  <0 or = db/severe error - contact programming msg  ****/
   /* ***    +100  note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

      TA1REC.TA1LOCAT[2] = "SL0E120";
      TA1REC.TA1MAP = SLWREC.SLWTAMAP;

      SL3REC.XWHCD = SL0EM110.XWHCD; /* <=== warehouse code from map*/

      SL0ES-GET-WO-GRP(); /* <=== get current wo grp nbr*/

      SL0EM110.SL8WOGRP = SL3REC.SL3NXWOG;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit();

    end
    SL0ESH1(); /* <=== enter processing*/
    if (SLWREC.SLWERRSW == "Y")
      exit stack;
    end
    if (SL0EM110.XWHCD != SL0EW01.XWHCD)
      if (SL0EM110.XWHCD == "02"
       || SL0EM110.XWHCD == "04"
       || SL0EM110.XWHCD == "07"
       || SL0EM110.XWHCD == "51"
       || SL0EM110.XWHCD == "25"
       || SL0EM110.XWHCD == "42") /* Canada*/
        SL0ES7W(); /* <=== setup date for 2 days ago*/
        if (SLWREC.SLWERRSW == "Y")
          SLWREC.XXXLOCID = "120W";
          exit stack;
        end
      else
        SL0EWX1.SL0EWDT = X2CREC.X2CCURDT; /* use current date*/
      end
    end
    SL0ESF1(); /* <=== save key values*/
    XSX3CTM(); /* get hhmmss current*/
    SL0ES1E(); /* <=== update work orders*/
    if (SLWREC.SLWERRSW == "Y")
      exit stack;
    end
    SLWREC.SLWMSGNO = 0020; /* transaction complete*/
    SL0ESQ1(); /* <=== clear screen, display keys*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "120L";
  SLWREC.SLWMSGNO = 0004; /* <--- invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/

end // end SL0E120

// one time initializations
Function SL0E210()
   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0EM210 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** get yesterdays date                                 ****/
   /* ************************************************************/

  SL0ES20(); /* <=== get yesterdays date*/
  SL0EWX1.SL0EWDT = SL0EW22.SL0EWDT;

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SLXREC empty;
  set SLVREC empty;
  set SL0EW02 empty; /* sl0e210 working storage area*/
  set SL0EWC0 empty; /* working storage compare area*/
  set SL3REC empty; /* appl. ws control table record*/
  set SL4REC empty; /* appl. ws control table record*/
  set SL5REC empty; /* appl. ws control table record*/
   /* SET SL6REC EMPTY;                /* appl. ws control table record*/
  set VSYLOC02 empty; /* appl. ws control table record*/
  set SL7REC empty; /* appl. ws control table record*/
   /* SET SL8REC EMPTY;                /* appl. ws control table record*/
  set VWOLHD02 empty; /* appl. ws control table record*/
  set SL9REC empty; /* appl. ws control table record*/
  set PKNREC empty; /* appl. ws control table record*/
  set SYPREC empty; /* appl. ws control table record*/
  set TA2REC empty; /* appl. ws control table record*/
  set TA5REC empty; /* appl. ws control table record*/
  set XARREC empty; /* appl. ws control table record*/
  set SL0EWA2 empty; /* appl. ws control table record*/
  set SL0EWB2 empty; /* appl. ws control table record*/
  set SL0EWCP1 empty; /* appl. ws compare table record*/

  SLWREC.XXXMAPNM = "SL0EM210";
  SLWREC.XXXTITLE = "  WORK ORDER CREATION (INDIVIDUAL) ";

  SLWREC.SLWTALOC = "SL0E210 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0EM210"; /* TA0020 current map name*/

  SLWREC.SLWFTMSW = "Y"; /* first setaside detected switch*/
  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* saved msg no.*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0EM210.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0EM210.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0EM210.XXXTITLE = SLWREC.XXXTITLE;
  SL0EM210.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  SL0EM210.XWHCD = COMMAREA.XWHCD;
  if (SL0EM210.XWHCD == " ")
    SLWREC.XXXLOCID = "210W";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0EM210.XWHCD cursor, bold;
  end

   /* Display warning message*/
  SL0EM210.VAGen_EZEMSG = "**WARNING!!!  PF15 TO UPDATE WORK ORDER GROUP BEFORE EXITING SCREEN";

  SL0EM210.SL0EM-STASDFL = "N";
  SL0EM210.INASAID = 0;
  SL0EM210.SL-LOC-SZ-IND = "*";
  SL0EM210.SL0EMMPF = "*";
  SL0EM210.SL2PALET = "*****";
  SL0EM210.SL2CASE = "********";
  SL0EM210.SL8ITMFL = "N";
  SL0EM210.SL8WOPY = "3";
  if (SL0EM210.XWHCD == "51")
    SL0EM210.XGPCD = "03";
  else
    SL0EM210.XGPCD = "02";
  end
  SL0EM210.SY2CLRID = "00 ";
  SL0EM210.XDMCD = "00";
  SL0EM210.XQACD = "01";
  SL0EM210.XPGCD = "00";
  SL0EM210.XSDCD = "000";
  SL0EM210.XSLCD = "000";
  SL0EM210.XUMCD = "01";
  SL0EM210.XOWCD = "00";

   /* ************************************************************/
   /* *** get the current work order group number             ****/
   /* ************************************************************/

  SL3REC.XWHCD = SL0EM210.XWHCD;

   /* ************************************************************/
   /* *** setup the following before i/o sgrp execution:      ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = found - continue                           ****/
   /* ***   -911 = deadlock - return w/ try again msg         ****/
   /* ***  <0 or = db/severe error - contact programming msg  ****/
   /* ***    +100  note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0E210 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  SL0ES-GET-WO-GRP(); /* get current wo grp nbr*/

  SL0EM210.SL8WOGRP = SL3REC.SL3NXWOG;
  SL0EW02.SL3NXWOG = SL3REC.SL3NXWOG;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit();

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/

end // end SL0E210

// converse & control key entry
Function SL0E220()

   /* ************************************************************/
   /* *** protect (askip) data fields (if any)                ****/
   /* *** note: cursor is set if error or is map's default    ****/
   /* ************************************************************/

  if (SL0EWC0.SL0EWNSS >= 1)
    SLWREC.SLWIDX01 = SL0EWC0.SL0EWNSS + 2;
                                   /* if amounts are on the screen*/
  else
    SLWREC.SLWIDX01 = 1;
  end

  while (SLWREC.SLWIDX01 <= 40)
    set SL0EM210.SL0EWWOQ[SLWIDX01] skip, invisible;
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** setup msg nbr, error id, and work order group nbr   ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0EM210.XXXERRID = SLWREC.XXXERRID;

  converse SL0EM210 ;

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220A";
    SLWREC.SLWMSGNO = 0;
    SL0EM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220B";
    SLWREC.SLWMSGNO = 0;
    SL0EM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220C";
    SLWREC.SLWMSGNO = 0;
    SL0EM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0EM210.CATOAP > " ")
    COMMAREA.CATOAP = SL0EM210.CATOAP;
    COMMAREA.CAITEM = SL0EM210.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220D";
    SLWREC.SLWMSGNO = 0;
    SL0EM210.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0EM210.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0EM210.VAGen_EZEMSG = " ";
  set SL0EM210.CATOAP initialAttributes;
  set SL0EM210.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset key input fld attr.s as orig.ly defined       ****/
   /* ************************************************************/

  set SL0EM210.XWHCD initialAttributes;

   /* ************************************************************/
   /* *** reset data input fld attr.s as orig.ly defined      ****/
   /* ************************************************************/

  set SL0EM210.SL8FRAR initialAttributes;
  set SL0EM210.SL8FRZN initialAttributes;
  set SL0EM210.SL8FRLC initialAttributes;
  set SL0EM210.SL8TOAR initialAttributes;
  set SL0EM210.SL8TOZN initialAttributes;
  set SL0EM210.SL8TOLC initialAttributes;
  set SL0EM210.SL2PALET initialAttributes;
  set SL0EM210.SL2CASE initialAttributes;
  set SL0EM210.SL8ITMFL initialAttributes;
  set SL0EM210.SL8WOPY initialAttributes;
  set SL0EM210.SL0EMSLC initialAttributes;
  set SL0EM210.SL0EMCAS initialAttributes;
  set SL0EM210.SL0EM-STASDFL initialAttributes;
  set SL0EM210.INASAID initialAttributes;
  set SL0EM210.XGPCD initialAttributes;
  set SL0EM210.SY1STNBR initialAttributes;
  set SL0EM210.SY2CLRID initialAttributes;
  set SL0EM210.XDMCD initialAttributes;
  set SL0EM210.XQACD initialAttributes;
  set SL0EM210.XSDCD initialAttributes;
  set SL0EM210.XSLCD initialAttributes;
  set SL0EM210.XPGCD initialAttributes;
  set SL0EM210.XUMCD initialAttributes;
  set SL0EM210.XOWCD initialAttributes;
  set SL0EM210.SY1UNPCS initialAttributes;
  set SL0EM210.SL-LOC-SZ-IND initialAttributes;
  set SL0EM210.SL0EMMPF initialAttributes;

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= 40)
    set SL0EM210.SY4IDDSC[SLWIDX01] initialAttributes;
    set SL0EM210.SL0EWWOQ[SLWIDX01] initialAttributes;
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0EM210.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0EM210.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15)
    exit stack;
  end

  if (converseVar.eventKey is pf16)
    COMMAREA.CATOAP = "SL0F";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220E";
    SLWREC.SLWMSGNO = 0;
    SL0EM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf17)
    COMMAREA.CATOAP = "SL0G";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220F";
    SLWREC.SLWMSGNO = 0;
    SL0EM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

  if (converseVar.eventKey is pf18)
    COMMAREA.CATOAP = "SL0Q";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220G";
    SLWREC.SLWMSGNO = 0;
    SL0EM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    if (SL0EM210.XWHCD != SL3REC.XWHCD)

      /* ************************************************************/
      /* *** setup the following before i/o sgrp execution:      ****/
      /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
      /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
      /* *** execute the appropriate sgrp                        ****/
      /* ***   note: sgrp names correspond to 'xq' process names ****/
      /* *** setup the action for the following return codes:    ****/
      /* ***      0 = found - continue                           ****/
      /* ***   -911 = deadlock - return w/ try again msg         ****/
      /* ***  <0 or = db/severe error - contact programming msg  ****/
      /* ***    +100  note: clear screen & put keys back         ****/
      /* ***          note: TA0020 will have been executed       ****/
      /* ***                within this sgrp for <0 only         ****/
      /* ************************************************************/

      /* ************************************************************/
      /* *** setup application specific ta1rec fields in case    ****/
      /* *** TA0020 is used for a severe DB error in this sgrp   ****/
      /* ************************************************************/

      TA1REC.TA1LOCAT[2] = "SL0E220";
      TA1REC.TA1MAP = SLWREC.SLWTAMAP;

      SL3REC.XWHCD = SL0EM210.XWHCD; /* <=== warehouse code from map*/

      SL0ES-GET-WO-GRP(); /* <=== get current wo grp nbr*/

      SL0EM210.SL8WOGRP = SL3REC.SL3NXWOG;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit();
    end

    SL0ESH2(); /* <=== enter processing*/

    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "220H";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/

end // end SL0E220

// converse & control data entry
Function SL0E240()

  if (SL0EWC0.SL0EWNSS >= 1)
    SLWREC.SLWIDX01 = SL0EWC0.SL0EWNSS + 2;
                                   /* if amounts are on the screen*/
  else
    SLWREC.SLWIDX01 = 1;
  end

  while (SLWREC.SLWIDX01 <= 40)
    set SL0EM210.SL0EWWOQ[SLWIDX01] skip, invisible;
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** setup non-default (data) cursor position, if any    ****/
   /* *** note: error cursor position has precedence          ****/
   /* ************************************************************/

  if (SLWREC.SLWERRSW == "N")
    SLWREC.SLWIDX01 = 1;
    set SL0EM210.SL0EWWOQ[SLWIDX01] cursor;
  end

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0EM210.XXXERRID = SLWREC.XXXERRID;

  converse SL0EM210 ;

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* If ENTER not pressed, reset units/case line error number.*/
   /* ************************************************************/

  if (converseVar.eventKey not enter) /* ENTER not pressed*/
    SLWREC.SLWLINPP = 0; /* Units/case line error*/
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "240A";
    SLWREC.SLWMSGNO = 0;
    SL0EM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "240B";
    SLWREC.SLWMSGNO = 0;
    SL0EM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "240C";
    SLWREC.SLWMSGNO = 0;
    SL0EM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0EM210.CATOAP > " ")
    COMMAREA.CATOAP = SL0EM210.CATOAP;
    COMMAREA.CAITEM = SL0EM210.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "240D";
    SLWREC.SLWMSGNO = 0;
    SL0EM210.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0EM210.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SLWREC.SLWSKYSW = "Y";
  SL0EM210.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "240 ";
  set SL0EM210.CATOAP initialAttributes;
  set SL0EM210.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset data input fld attr.s as orig.ly defined      ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= 40)
    set SL0EM210.SL0EWWOQ[SLWIDX01] initialAttributes;
    set SL0EM210.SY4IDDSC[SLWIDX01] initialAttributes;
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0EM210.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "240E";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0EM210.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do key & data entry edits & process inputs****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0ESB2(); /* <=== same key edits*/
    if (SLWREC.SLWSKYSW == "N")
      SL0ESF2(); /* <=== save key values*/
      SL0EST2(); /* <=== reset screen (clear)*/
      SL0ESH2(); /* <=== enter processing*/
      exit stack;
    end

    SL0ESR2(); /* <=== data entry edits*/
    if (SLWREC.SLWERRSW == "Y")
      exit stack;
    end

    XSX3CTM(); /* get current hhmmss*/
    SL0ES2H(); /* <=== obtain to location*/
    if (SLWREC.SLWERRSW == "Y")
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* <=== reset any updates*/
      exit stack;
    end

    SL0ESU2(); /* <=== update database*/
    if (SLWREC.SLWERRSW == "Y")
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* <=== reset any updates*/
      exit stack;
    end

    if (SL0EW02.SL0EWSZC > 0) /* <=== make sure wo have items*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.commit(); /* <=== commit any updates*/
    else
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* <=== reset any updates*/
      exit stack;
    end

    SL0ESQ2(); /* <=== reset screen (clear)*/
    SLWREC.SLWMSGNO = 0020; /* <--- transaction complete*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF12: do key & data entry edits only             ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf12)
    SL0ESB2(); /* <=== same key edits*/
    if (SLWREC.SLWSKYSW == "N")
      SL0ESF2(); /* <=== save key values*/
      SL0EST2(); /* <=== reset screen (clear)*/
      SL0ESH2(); /* <=== enter processing*/
      exit stack;
    end

    SL0ESR2(); /* <=== data entry edits*/
    if (SLWREC.SLWERRSW == "Y")
      exit stack;
    end

    SLWREC.SLWMSGNO = 0026; /* <--- edits completed*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no code executed              ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15)
    exit stack;
  end

  if (converseVar.eventKey is pf16)
    COMMAREA.CATOAP = "SL0F";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "240F";
    SLWREC.SLWMSGNO = 0;
    SL0EM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  else
    if (converseVar.eventKey is pf17)
      COMMAREA.CATOAP = "SL0G";
      XSEXIT();
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "240G";
      SLWREC.SLWMSGNO = 0;
      SL0EM210.VAGen_EZEMSG = CAMSG;
      exit stack;
    else
      if (converseVar.eventKey is pf18)
        COMMAREA.CATOAP = "SL0Q";
        XSEXIT();
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "240H";
        SLWREC.SLWMSGNO = 0;
        SL0EM210.VAGen_EZEMSG = CAMSG;
        exit stack;
      end
    end
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "240I";
  SLWREC.SLWMSGNO = 0004; /* <--- invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/

end // end SL0E240

// one time initializations
Function SL0E310()

   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0EM310 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0EW03 empty; /* appl. working storage area*/
  set SLXREC empty;
  set SLVREC empty;
  set SL3REC empty; /* appl. ws control table record*/
  set SL4REC empty; /* appl. ws control table record*/
  set SL5REC empty; /* appl. ws control table record*/
   /* SET SL6REC EMPTY;                /* appl. ws control table record*/
  set VSYLOC02 empty; /* appl. ws control table record*/
  set SL7REC empty; /* appl. ws control table record*/
   /* SET SL8REC EMPTY;                /* appl. ws control table record*/
  set VWOLHD02 empty; /* appl. ws control table record*/
  set SL9REC empty; /* appl. ws control table record*/
  set PKNREC empty; /* appl. ws control table record*/
  set SYPREC empty; /* appl. ws control table record*/
  set TA2REC empty; /* appl. ws control table record*/
  set TA5REC empty; /* appl. ws control table record*/
  set XARREC empty; /* appl. ws control table record*/

  SLWREC.XXXMAPNM = "SL0EM310";
  SLWREC.XXXTITLE = "WORK ORDER COMPLETION/CANCELLATION";

  SLWREC.SLWTALOC = "SL0E310 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0EM310"; /* TA0020 current map name*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* saved msg no.*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0EM310.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0EM310.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0EM310.XXXTITLE = SLWREC.XXXTITLE;
  SL0EM310.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  SL0EM310.XWHCD = COMMAREA.XWHCD;

   /* Display warning message*/
  SL0EM310.VAGen_EZEMSG = "** PLEASE REMEMBER TO PRINT THE WO LABEL (PF18) WHEN DONE **";

  SL0EM310.XMSLMFNC = "1";

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/

end // end SL0E310

// converse & control key entry
Function SL0E320()

   /* ************************************************************/
   /* *** protect (askip) data fields (if any)                ****/
   /* *** note: cursor is set if error or is map's default    ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0EM310.XXXERRID = SLWREC.XXXERRID;

  if (SL0EM310.XWHCD == " ")
    set SL0EM310.XWHCD cursor;
  end

  converse SL0EM310 ;

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320A";
    SLWREC.SLWMSGNO = 0;
    SL0EM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320B";
    SLWREC.SLWMSGNO = 0;
    SL0EM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320C";
    SLWREC.SLWMSGNO = 0;
    SL0EM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0EM310.CATOAP > " ")
    COMMAREA.CATOAP = SL0EM310.CATOAP;
    COMMAREA.CAITEM = SL0EM310.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320D";
    SLWREC.SLWMSGNO = 0;
    SL0EM310.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0EM310.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0EM310.VAGen_EZEMSG = " ";
  set SL0EM310.CATOAP initialAttributes;
  set SL0EM310.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset key input fld attr.s as orig.ly defined       ****/
   /* ************************************************************/

  set SL0EM310.XWHCD initialAttributes;
  set SL0EM310.XMSLMFNC initialAttributes;

   /* ************************************************************/
   /* *** reset data input fld attr.s as orig.ly defined      ****/
   /* ************************************************************/

  set SL0EM310.SL8WOGRP initialAttributes;
  SLWIDX01 = 1;
  while (SLWIDX01 <= 10)
    set SL0EM310.SL8WONBR[SLWIDX01] initialAttributes;
    SLWIDX01 = SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0EM310.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320E";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0EM310.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15)
    exit stack;
  end

  if (converseVar.eventKey is pf16)
    COMMAREA.CATOAP = "SL0F";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320F";
    SLWREC.SLWMSGNO = 0;
    SL0EM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  else
    if (converseVar.eventKey is pf17)
      COMMAREA.CATOAP = "SL0G";
      XSEXIT();
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "320G";
      SLWREC.SLWMSGNO = 0;
      SL0EM310.VAGen_EZEMSG = CAMSG;
      exit stack;
    else
      if (converseVar.eventKey is pf18)
        COMMAREA.CATOAP = "SL0Q";
        XSEXIT();
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "320H";
        SLWREC.SLWMSGNO = 0;
        SL0EM310.VAGen_EZEMSG = CAMSG;
        exit stack;
      end
    end
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0ESH3(); /* <=== edit screen*/
    if (SLWREC.SLWERRSW == "Y")
      exit stack;
    end

    SL0ESF3(); /* <=== save current keys*/
    XSX3CTM(); /* get current hhmmss*/
    SL0ESU3(); /* <=== update data bases*/
    if (SLWREC.SLWERRSW == "Y")
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      exit stack;
    end

    SL0ESQ3(); /* <=== clear map*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "320I";
  SLWREC.SLWMSGNO = 0004; /* <--- invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/

end // end SL0E320

// Get current work order grp num
Function SL0ES-GET-WO-GRP()

   /* ************************************************************/
   /* *** get the current work order group number from the    ****/
   /* *** DSTLOC.VSLCTL01 table.                              ****/
   /* ************************************************************/

  XSX3CTM(); /* <=== get current hhmmss*/

  SLWIDX01 = 1;
  SQLCA.VAGen_SQLCODE = 100;
  while (SQLCA.VAGen_SQLCODE == 100
   && SLWIDX01 < 21)
    XSSL3G2(); /* <=== std control record get*/
                                   /* for wogrpnbr*/
    SLWIDX01 = SLWIDX01 + 1;
  end

  if (SQLCA.VAGen_SQLCODE == 0)
                                  /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911 /* <=== for any initial db access*/
     || SQLCA.VAGen_SQLCODE == +100)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "110A";
      SLWREC.SLWMSGNO = 0031; /* <=== try again msg*/
      exit stack;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "110B";
    SLWREC.SLWMSGNO = 0001; /* <=== severe error msg*/
    exit stack;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES-GET-WO-GRP

// Select row from VROWS001
Function SL0ES-ROWS-S()

   /* ************************************************************/
   /* *** select unique row from: DSTLOC.VROWS001             ****/
   /* *** using the std module:  IO0270                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

  call "IO0270" ("S ", SQLCA, VROWS001) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0 /* Normal return*/
   || SQLCA.VAGen_SQLCODE == +100) /* or row not found*/

    return; /* Return to previous process*/

  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "ROWS-S  ";
  TA1REC.TA1LOCAT[1] = "IO0270  ";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VROWS001";
  TA1REC.TA1TBLKE = VROWS001.VROWS001-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES-ROWS-S

// USERA exit processing
Function SL0ES11()

   /* ************************************************************/
   /* *** move this map's name and key fields to SLXREC flds  ****/
   /* *** and then move the record to the CAUSERA             ****/
   /* ************************************************************/

  SLXREC.SLXFRMAP = "SL0EM110";

  SLXREC.XWHCD = SL0EM110.XWHCD;
  SLXREC.SL8WOGRP = SL0EM110.SL8WOGRP;

  COMMAREA.CAUSERA = SLXREC.SLXUSERA;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES11

// get yesterdays date (ccyymmss)
Function SL0ES12()

   /* ************************************************************/
   /* *** use ta0190 to obtain a +/- date from the current    ****/
   /* *** date using a 6 day work week                        ****/
   /* ************************************************************/

  set TA9REC empty;

  TA9REC.TA9BEGDT = X2CREC.X2CCURDT;
  TA9REC.TA9OFSET = -1;

  call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};

  if (TA9REC.TA9RTNFL == 0)
    SL0EW11.SL0EWDT = TA9REC.TA9RTNDT;
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S12A";
    SLWREC.SLWMSGNO = 0001;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES12

// to and from setaside same
Function SL0ES13()
   /* ***********************************************************/
   /* *** if the "from" location has a setaside, make sure   ****/
   /* *** the setaside id is the same for the "to" location. ****/
   /* ***********************************************************/

   /* ***********************************************************/
   /* *** obtain product/location record for the "from"      ****/
   /* *** location                                           ****/
   /* ***********************************************************/

  SL0ES15(); /* obtain prod/loc for "from" loc*/
  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0EW11.INASAID = 0;
  SL0EW11.SL0EWSAF = "N"; /* setaside exists flag*/

  while (SQLCA.VAGen_SQLCODE == 0
   && SL0EW11.SL0EWSAF == "N"
   && SLWREC.SLWERRSW != "Y")
    if (VSYLOC02.INASAID > 0)
      SL0EW11.SL0EWSAF = "Y"; /* setaside exists falg*/
      SL0EW11.INASAID = VSYLOC02.INASAID;
    else
      SL0ES1R(); /* fetch next prod/loc*/
    end
  end

  XSSLS-C3-VSYLOC02(); /* close cursor*/
  if (SQLCA.VAGen_SQLCODE != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S13A";
    SLWREC.SLWMSGNO = 001; /* severe error msg*/
  end
  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  if (SL0EW11.SL0EWSAF == "N" /* setaside doesn't exist in from loc*/
   && SL0EM110.XWHCD != "02"  /* and not Greenland*/
   && SL0EM110.XWHCD != "04"  /* and not Memphis Footwear*/
   && SL0EM110.XWHCD != "07") /* and not Wilsonville*/
    return;
  end

   /* ***********************************************************/
   /* *** the following is only performed if there is a      ****/
   /* *** setaside in the from location or the warehouse     ****/
   /* *** being processed is '07' (Wilsonville).             ****/
   /* ***********************************************************/

   /* ***********************************************************/
   /* *** obtain product/location record for the "to"        ****/
   /* *** location                                           ****/
   /* ***********************************************************/

  SL0ES14(); /* obtain prod/loc for "to" loc*/
  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0EW11.SL0EWOK = "N"; /* setaside ok flag*/

  while (SQLCA.VAGen_SQLCODE == 0
   && SL0EW11.SL0EWOK == "N"
   && SLWREC.SLWERRSW != "Y")
    if (VSYLOC02.INASAID > 0)
      if (VSYLOC02.INASAID == SL0EW11.INASAID)
        SL0EW11.SL0EWOK = "Y"; /* setaside ok, stops loop*/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S13B";
        SLWREC.SLWMSGNO = 159; /* setaside id's don't match*/
        set SL0EM110.SL8TOLC[SLWIDX01] bold;
        set SL0EM110.SL8TOZN[SLWIDX01] bold;
        set SL0EM110.SL8TOAR[SLWIDX01] bold;
        set SL0EM110.SL8FRLC[SLWIDX01] bold;
        set SL0EM110.SL8FRZN[SLWIDX01] bold;
        set SL0EM110.SL8FRAR[SLWIDX01] cursor, bold;
      end
    else
      if (SL0EW11.SL0EWSAF == "Y") /* Setaside exists in from loc*/
        if (SL0EM110.XWHCD == "02" /* Greenland*/
         || SL0EM110.XWHCD == "04" /* Memphis Footwear*/
         || SL0EM110.XWHCD == "07") /* Wilsonville*/
          if (VSYLOC02.INASAID == SL0EW11.INASAID)
            SL0EW11.SL0EWOK = "Y"; /* setaside ok, stops loop*/
          else
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "S13C";
            SLWREC.SLWMSGNO = 159; /* setaside id's don't match*/
            set SL0EM110.SL8TOLC[SLWIDX01] bold;
            set SL0EM110.SL8TOZN[SLWIDX01] bold;
            set SL0EM110.SL8TOAR[SLWIDX01] bold;
            set SL0EM110.SL8FRLC[SLWIDX01] bold;
            set SL0EM110.SL8FRZN[SLWIDX01] bold;
            set SL0EM110.SL8FRAR[SLWIDX01] cursor, bold;
          end
        else
          SL0ES1R(); /* fetch next prod/loc*/
        end
      else
        SL0ES1R(); /* fetch next prod/loc*/
      end
    end
  end

  XSSLS-C3-VSYLOC02(); /* close cursor*/
  if (SQLCA.VAGen_SQLCODE != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S13D";
    SLWREC.SLWMSGNO = 001; /* severe error msg*/
  end

   /* ***********************************************************/
   /* *** end of statement group                             ****/
   /* ***********************************************************/
end // end SL0ES13

// obtain prd/loc rec for to loc
Function SL0ES14()
   /* ************************************************************/
   /* *** obtain product/location records for the "to"        ****/
   /* *** location.                                           ****/
   /* ***                                                     ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO       ****/
   /* *** VSYLOC02                                              ****/
   /* ***                                                     ****/
   /* ************************************************************/

  set VSYLOC02 empty;

  VSYLOC02.XWHCD = SL0EM110.XWHCD;
  VSYLOC02.XARCD = SL0EM110.SL8TOAR[SLWIDX01];
  VSYLOC02.SL4ZONE = SL0EM110.SL8TOZN[SLWIDX01];
  VSYLOC02.SL5LOCTN = SL0EM110.SL8TOLC[SLWIDX01];
  VSYLOC02.SL2PALET = "*"; /* wild card palet*/
  VSYLOC02.SL2CASE = "*"; /* wild card case*/

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO and   ****/
   /* *** then setup the following before i/o sgrp execution: ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* ***   note: sgrp results will be in record              ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = not found - setup not fnd error/msg        ****/
   /* ***   -911 = deadlock - try again msg                   ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES14 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSLS-S3-VSYLOC02(); /* <=== std prod loctn selset*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == +100) /* <=== for selset*/
    /* ***  next sentence  ****/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S14A";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S14B";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES14

// obtain prod/loc for from loc
Function SL0ES15()
   /* ************************************************************/
   /* *** obtain product/location records for the "from"      ****/
   /* *** location                                            ****/
   /* ***                                                     ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO       ****/
   /* *** VSYLOC02                                              ****/
   /* *** note: palet & case checked here for *'s; therefore, ****/
   /* ***       SL0ES1J will not have to check again          ****/
   /* ************************************************************/

  set VSYLOC02 empty;

  VSYLOC02.XWHCD = SL0EM110.XWHCD;
  VSYLOC02.XARCD = SL0EM110.SL8FRAR[SLWIDX01];
  VSYLOC02.SL4ZONE = SL0EM110.SL8FRZN[SLWIDX01];
  VSYLOC02.SL5LOCTN = SL0EM110.SL8FRLC[SLWIDX01];

  if (SL0EM110.SL2PALET[SLWIDX01] == "     "
   || SL0EM110.SL2PALET[SLWIDX01] == "    *"
   || SL0EM110.SL2PALET[SLWIDX01] == "*    "
   || SL0EM110.SL2PALET[SLWIDX01] == "*****")
    VSYLOC02.SL2PALET = "*"; /* wild card palet*/
  else
    SL0ES7P(); /* <=== check palet for *'s*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
    VSYLOC02.SL2PALET = SL0EM110.SL2PALET[SLWIDX01];
  end

  if (SL0EM110.SL2CASE[SLWIDX01] == "        "
   || SL0EM110.SL2CASE[SLWIDX01] == "       *"
   || SL0EM110.SL2CASE[SLWIDX01] == "*       "
   || SL0EM110.SL2CASE[SLWIDX01] == "********")
    VSYLOC02.SL2CASE = "*"; /* wild card case*/
  else
    SL0ES7C(); /* <=== check case for *'s*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
    VSYLOC02.SL2CASE = SL0EM110.SL2CASE[SLWIDX01];
  end

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO and   ****/
   /* *** then setup the following before i/o sgrp execution: ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* ***   note: sgrp results will be in record              ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = not found - setup not fnd error/msg        ****/
   /* ***   -911 = deadlock - try again msg                   ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES15 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSLS-S3-VSYLOC02(); /* <=== std prod loctn selset*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == +100) /* <=== for selset*/
    /* ***  next sentence  ****/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S15A";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S15B";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES15

// determine "to" processing loc
Function SL0ES16()
   /* ***********************************************************/
   /* *** determine the "to" processing location             ****/
   /* *** if FAREA/FZONE/TAREA/TZONE entered   OR            ****/
   /* ***    FAREA/FZONE/FLOCATION/TAREA/TZONE entered       ****/
   /* ***********************************************************/

  if (SL0EW01.SL0EWTZP[SLWIDX01] == "PI") /* picking*/
    if (SL0EW01.SL0EW-MEZZ-LOC-IND == "Y") /* Mezzanine location*/
      return; /* Return to previous process*/
    end
    if (SL0EW01.SL0EWSPA > 0) /* setaside exists*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.SLWMSGNO = 194;
      SLWREC.XXXLOCID = "S16A";
      return;
    end
    SL0EM110.SL8TOLC[SLWIDX01] = " ";
    SL0EM110.SL8TOZN[SLWIDX01] = " ";
    SLWREC.SLWSEXSW = "Y";
    SL0ES1U(); /* get to sz/loc from prod/assign*/
    SL0EM110.SL8TOZN[SLWIDX01] = SL0EW01.SL0EWSZN;
    SL0EM110.SL8TOLC[SLWIDX01] = SL0EW01.SL0EWSLC;
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
    SL7REC.XARCD = SL0EW01.SL0EWSAR;
    SL7REC.SL4ZONE = SL0EW01.SL0EWSZN;
    SL7REC.SL5LOCTN = SL0EW01.SL0EWSLC;
  else
    if (SL0EW01.SL0EWTZP[SLWIDX01] == "FU") /* full case*/
      if (SL4REC.YZTCD != "22" /* not full case static*/
       && SL0EW01.SL0EWSPA > 0) /* setaside exists*/
        SLWREC.SLWERRSW = "Y";
        SLWREC.SLWMSGNO = 194;
        SLWREC.XXXLOCID = "S16B";
        return;
      end
      if (SL0EM110.XWHCD == "02"
       || SL0EM110.XWHCD == "04"
       || SL0EM110.XWHCD == "07"
       || SL0EM110.XWHCD == "25"
       || SL0EM110.XWHCD == "51"
       || SL0EM110.XWHCD == "42") /* Canada*/
        if (SL0EM110.XWHCD == "02" 
         && SL0EW01.SL0EWSPA != 62 /* whse 02 prod sas*/
         && SL0EW01.SL0EWSPA > 0)  /* setaside exists*/
          SLWREC.SLWERRSW = "Y";
          SLWREC.SLWMSGNO = 194;
          SLWREC.XXXLOCID = "S16C";
          return;
        end
        if (SL0EM110.XWHCD == "04" 
         && SL0EW01.SL0EWSPA != 64 /* whse 04 prod sas*/
         && SL0EW01.SL0EWSPA > 0)  /* setaside exists*/
          SLWREC.SLWERRSW = "Y";
          SLWREC.SLWMSGNO = 194;
          SLWREC.XXXLOCID = "S16C";
          return;
        end
        if (SL0EM110.XWHCD == "07" 
         && SL0EW01.SL0EWSPA != 65 /* whse 07 prod sas*/
         && SL0EW01.SL0EWSPA > 0)  /* setaside exists*/
          SLWREC.SLWERRSW = "Y";
          SLWREC.SLWMSGNO = 194;
          SLWREC.XXXLOCID = "S16D";
          return;
        end
        if (SL0EM110.XWHCD == "25" 
         && SL0EW01.SL0EWSPA != 68 /* whse 25 prod sas*/
         && SL0EW01.SL0EWSPA > 0)  /* setaside exists*/
          SLWREC.SLWERRSW = "Y";
          SLWREC.SLWMSGNO = 194;
          SLWREC.XXXLOCID = "S16E";
          return;
        end
        if (SL0EM110.XWHCD == "51" 
         && SL0EW01.SL0EWSPA != 69 /* whse 51 prod sas*/
         && SL0EW01.SL0EWSPA > 0)  /* setaside exists*/
          SLWREC.SLWERRSW = "Y";
          SLWREC.SLWMSGNO = 194;
          SLWREC.XXXLOCID = "S16F";
          return;
        end
        if (SL0EM110.XWHCD == "42"  
         && SL0EW01.SL0EWSPA != 103 /* Canada whse prod sas id*/
         && SL0EW01.SL0EWSPA > 0)   /* setaside exists*/
          SLWREC.SLWERRSW = "Y";
          SLWREC.SLWMSGNO = 194;
          SLWREC.XXXLOCID = "S16F";
          return;
        end
        SL0ES17(); /* get empty full case location*/
        if (SLWREC.SLWERRSW == "Y")
          return;
        end
        SL0EM110.SL8TOLC[SLWIDX01] = SL5REC.SL5LOCTN;
      else
        SL0EM110.SL8TOLC[SLWIDX01] = "000000";
      end
    else
       /* ************************************************************/
       /* *** if this code is executed (control drops thru),      ****/
       /* *** then an unexpected control condition has occurred   ****/
       /* ************************************************************/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S16F";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
  end

   /* ************************************************************/
   /* *** end of statement group                              ****/
   /* ************************************************************/
end // end SL0ES16

// get empty full case location
Function SL0ES17()

   /* ************************************************************/
   /* *** get empty full case location                        ****/
   /* *** setup the approriate record fields for sl5rec io    ****/
   /* ************************************************************/

  SL5REC.XWHCD = SL0EM110.XWHCD;
  SL5REC.XARCD = SL0EW01.SL0EWTAC[SLWIDX01];
  SL5REC.SL4ZONE = SL0EW01.SL0EWTZC[SLWIDX01];
  SL0EW01.SL0EWPEX = "N"; /* product exists*/

  if (SL0EM110.XWHCD == "02" /* whse 02*/
   && SL0EW01.SL0EWSPA == 62) /* whse 02 prod sas*/
    SL5REC.YLTCD = "22"; /* full case static loc*/
  else
    if (SL0EM110.XWHCD == "04" /* whse 04*/
     && SL0EW01.SL0EWSPA == 64) /* whse 04 prod sas*/
      SL5REC.YLTCD = "22"; /* full case static loc*/
    else
      if (SL0EM110.XWHCD == "07" /* whse 07*/
       && SL0EW01.SL0EWSPA == 65) /* whse 07 prod sas*/
        SL5REC.YLTCD = "22"; /* full case static loc*/
      else
        if (SL0EM110.XWHCD == "25" /* whse 25*/
         && SL0EW01.SL0EWSPA == 68) /* whse 25 prod sas*/
          SL5REC.YLTCD = "22"; /* full case static loc*/
        else
          /* IF SL0EM110.XWHCD EQ '51'/* whse 51*/
           /* AND SL0EW01.SL0EWSPA EQ 69;/* whse 51 prod sas*/
           /* MOVE '22' TO SL5REC.YLTCD;/* full case static loc*/
          /* ELSE;*/
          if (SL0EM110.XWHCD == "42" /* canada whse*/
           && SL0EW01.SL0EWSPA == 103) /* canada prod sas*/
            SL5REC.YLTCD = "22"; /* full case static loc*/
          else
            SL5REC.YLTCD = "*"; /* wild card loc type*/
          end
          /* END;*/
        end
      end
    end
  end

  SL5REC.YLSCD = "01"; /* move empty status*/
  SL5REC.SL-LOC-SZ-IND = SL0EWX1.SL-LOC-SZ-IND;
                                   /* specify short pallet flag type*/
  SL5REC.SL5MPDFL = SL0EWX1.SL0EWMPF;
                                   /* specify mult product flag type*/

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO and   ****/
   /* *** then setup the following before i/o sgrp execution: ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* ***   note: sgrp results will be in record              ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = not found - setup not fnd error/msg        ****/
   /* ***   -911 = deadlock - try again msg                   ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES17 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  if (SL0EM110.XWHCD == "25" /* if NSG*/
   || SL0EM110.XWHCD == "02" /* 02,07 and 04 added*/
   || SL0EM110.XWHCD == "07" /* to allow them to have*/
   || SL0EM110.XWHCD == "04" /* more locations*/
   || SL0EM110.XWHCD == "51") /* more locations*/
    SL0EW11.SL0EWDT = X2CREC.X2CCURDT; /* just needs to be empty*/
  end

  XSSL5S1(); /* <=== select set of location records*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (SL0EM110.XWHCD == "02"
     || SL0EM110.XWHCD == "04"
     || SL0EM110.XWHCD == "07"
     || SL0EM110.XWHCD == "25"
     || SL0EM110.XWHCD == "51"
     || SL0EM110.XWHCD == "42") /* Canada*/
      while (SL5REC.SL5STCDT >= SL0EW11.SL0EWDT
       /* <=== empty at least 2 days*/
       && SQLCA.VAGen_SQLCODE == 0)
        XSSL5F1(); /* <=== fetch next location*/
      end
    else
      return;
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    /* ***  next sentence  ****/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for select set*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S17A";
      SLWREC.SLWMSGNO = 0046; /* <--- no more empty locations*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S17B";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S17C";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES17

// find from zone processing type
Function SL0ES1A()
  if (SL4REC.YZTCD in YZTTBL.YZTCD)
    if (YZTTBL.YZTFCSFL[sysVar.arrayIndex] == "Y")
      SL0EW01.SL0EWFZP[SLWIDX01] = "FU";
    else
      if (YZTTBL.YZTPKGFL[sysVar.arrayIndex] == "Y")
        SL0EW01.SL0EWFZP[SLWIDX01] = "PI";
      else
         /* all flags are 'n' = misc area's zone*/
         /* misc area's zone = same as full case*/
         /* therefore: just setup "FU" zone type*/
        SL0EW01.SL0EWFZP[SLWIDX01] = "FU";
      end
    end
  end
end // end SL0ES1A

// obtain from area type
Function SL0ES1B()
  XARREC.XWHCD = SL0EM110.XWHCD;
  XARREC.XARCD = SL0EW01.SL0EWFAC[SLWIDX01];
  if (XARREC.XARKEY in XARTBL.XARKEY)
    if (XARTBL.XARBLKFL[sysVar.arrayIndex] == "Y")
      SL0EW01.SL0EWFAT[SLWIDX01] = "BU";
    else
      if (XARTBL.XARPRCFL[sysVar.arrayIndex] == "Y")
        SL0EW01.SL0EWFAT[SLWIDX01] = "PR";
      else
        if (XARTBL.XARRCVFL[sysVar.arrayIndex] == "Y")
          SL0EW01.SL0EWFAT[SLWIDX01] = "RE";
        else
          if (XARTBL.XARPKHFL[sysVar.arrayIndex] == "Y")
            SL0EW01.SL0EWFAT[SLWIDX01] = "PA";
          else
            if (XARTBL.XARRTNFL[sysVar.arrayIndex] == "Y")
              SL0EW01.SL0EWFAT[SLWIDX01] = "RT";
            else
              if (XARTBL.XARSHPFL[sysVar.arrayIndex] == "Y")
                SL0EW01.SL0EWFAT[SLWIDX01] = "SH";
              else
                 /* all flags are 'n' = misc area*/
                 /* misc area = same as processing w/out flag = y*/
                 /* therefore: just setup "bu" area type*/
                SL0EW01.SL0EWFAT[SLWIDX01] = "BU";
                return;
              end
            end
          end
        end
      end
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1BB";
    SLWREC.SLWMSGNO = 11;
    set SL0EM110.SL8FRAR[SLWIDX01] cursor, bold;
  end
end // end SL0ES1B

// obtain to zone processing type
Function SL0ES1C()
  if (SL4REC.YZTCD in YZTTBL.YZTCD)
    if (YZTTBL.YZTFCSFL[sysVar.arrayIndex] == "Y")
      SL0EW01.SL0EWTZP[SLWIDX01] = "FU";
    else
      if (YZTTBL.YZTPKGFL[sysVar.arrayIndex] == "Y")
        SL0EW01.SL0EWTZP[SLWIDX01] = "PI";
      else
         /* all flags are 'n' = misc area's zone*/
         /* misc area's zone = same as full case*/
         /* therefore: just setup "FU" zone type*/
        SL0EW01.SL0EWTZP[SLWIDX01] = "FU";
      end
    end
  end
end // end SL0ES1C

// obtain to area type
Function SL0ES1D()
  XARREC.XWHCD = SL0EM110.XWHCD;
  XARREC.XARCD = SL0EW01.SL0EWTAC[SLWIDX01];
  if (XARREC.XARKEY in XARTBL.XARKEY)
    if (XARTBL.XARBLKFL[sysVar.arrayIndex] == "Y")
      SL0EW01.SL0EWTAT[SLWIDX01] = "BU";
    else
      if (XARTBL.XARPRCFL[sysVar.arrayIndex] == "Y")
        SL0EW01.SL0EWTAT[SLWIDX01] = "PR";
      else
        if (XARTBL.XARRCVFL[sysVar.arrayIndex] == "Y")
          SL0EW01.SL0EWTAT[SLWIDX01] = "RE";
        else
          if (XARTBL.XARPKHFL[sysVar.arrayIndex] == "Y")
            SL0EW01.SL0EWTAT[SLWIDX01] = "PA";
          else
            if (XARTBL.XARRTNFL[sysVar.arrayIndex] == "Y")
              SL0EW01.SL0EWTAT[SLWIDX01] = "RT";
            else
              if (XARTBL.XARSHPFL[sysVar.arrayIndex] == "Y")
                SL0EW01.SL0EWTAT[SLWIDX01] = "SH";
              else
                 /* all flags are 'n' = misc area*/
                 /* misc area = same as processing w/out flag = y*/
                 /* therefore: just setup "bu" area type*/
                SL0EW01.SL0EWTAT[SLWIDX01] = "BU";
                return;
              end
            end
          end
        end
      end
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1DB";
    SLWREC.SLWMSGNO = 11;
    set SL0EM110.SL8TOAR[SLWIDX01] cursor, bold;
  end
end // end SL0ES1D

// sel work order update option
Function SL0ES1E()
   /* *************************************************************/
   /* ***   select the proper update function                 *****/
   /* ***   note: the setaside warning cause the entire tsq   *****/
   /* ***         to be setup again and to try to re-add all  *****/
   /* ***         wo's written prior to the setaside detection*****/
   /* ***         but the dup wo switch will cause both the   *****/
   /* ***         setaside check & wo creation to be skipped  *****/
   /* *************************************************************/
  XSSLSPQ(); /* purge tsq prior to process*/
  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= 8)
    if (SL0EM110.SL8FRAR[SLWIDX01] == " "
     && SL0EM110.SL8FRZN[SLWIDX01] == " "
     && SL0EM110.SL8FRLC[SLWIDX01] == " "
     && SL0EM110.SL8TOAR[SLWIDX01] == " "
     && SL0EM110.SL8TOZN[SLWIDX01] == " "
     && SL0EM110.SL8TOLC[SLWIDX01] == "      ")
       /* ** next sentence ***/
    else
      SL0ESXE(); /* process line depending on input*/
      if (SLWREC.SLWERRSW == "Y")
        return;
      end
      SL0EM110.SL8FRAR[SLWIDX01] = " ";
      SL0EM110.SL8FRZN[SLWIDX01] = " ";
      SL0EM110.SL8FRLC[SLWIDX01] = " ";
      SL0EM110.SL8TOAR[SLWIDX01] = " ";
      SL0EM110.SL8TOZN[SLWIDX01] = " ";
      SL0EM110.SL8TOLC[SLWIDX01] = " ";
      SL0EM110.SL2PALET[SLWIDX01] = " ";
      SL0EM110.SL2CASE[SLWIDX01] = " ";
      TA5REC.TA5FNCCD = "P";
      call "TA0050" (SL0EWB1, TA5REC); /* purge tsq*/
      if (SLWREC.SLWERRSW == "Y")
        return;
      end
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end
  if (SLWREC.SLWERRSW != "Y")
    SL0EW01.SL0EWPIX = 1;
    while (SL0EW01.SL0EWPIX <= SL0EWX1.SL0EWPMX && 
    SL0EW01.SL0EWPZN[SL0EWPIX] > 0)
      XZZREC.XZZQRYID = "SL0E    ";
      XZZREC.XZZQRYRN = 51;
      XZZREC.XZZQRYLN = SL0EW01.SL0EWPZN[SL0EWPIX];
      XSXZZD0(); /* delete row in VPARM101*/
      if (SQLCA.VAGen_SQLCODE == 0 || 
      SQLCA.VAGen_SQLCODE == +100)

      else
        if (SQLCA.VAGen_SQLCODE == -911)
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "S1EA";
          SLWREC.SLWMSGNO = 0031;
          return;
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "S1EB";
          SLWREC.SLWMSGNO = 0001;
          return;
        end
      end
      set XZZREC empty;
      XZZREC.XZZQRYID = "SL0E    ";
      XZZREC.XZZQRYRN = 51;
      XZZREC.XZZQRYLN = SL0EW01.SL0EWPZN[SL0EWPIX];
      XZZREC.XZZ6CHR = SL0EW01.SL0EWPLC[SL0EWPIX];
      XZZREC.ZZZSDT = X2CREC.X2CCURDT;
      XZZREC.ZZZSTM = X3CREC.X3CCURST;
      XSXZZA0(); /* Add row in VPARM101*/
      if (SQLCA.VAGen_SQLCODE == 0)

      else
        if (SQLCA.VAGen_SQLCODE == -911)
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "S1EA";
          SLWREC.SLWMSGNO = 0031;
          return;
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "S1EB";
          SLWREC.SLWMSGNO = 0001;
          return;
        end
      end
      SL0EWPIX = SL0EWPIX + 1;
    end /* end while loop*/
  end /* end while loop*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES1E

// update work orders option # 1
Function SL0ES1F()

   /* ***********************************************************/
   /* *** SL0ES1F****/
   /* *** insert work order item record (option 1)           ****/
   /* *** if FAREA/FZONE entered                             ****/
   /* ***    FAREA/FZONE/FLOCATION entered                   ****/
   /* ***    FAREA/FZONE/TAREA entered                       ****/
   /* ***    FAREA/FZONE/FLOCATION/TAREA entered             ****/
   /* ***********************************************************/

   /* ***********************************************************/
   /* *** Verify from location                               ****/
   /* ***********************************************************/

  SL0EWX1.SL0EWUSW = "N";

  SL0ES1I(); /* <=== verify from location*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ***********************************************************/
   /* *** obtain all products from product/location table    ****/
   /* ***********************************************************/

  SL0ES1J(); /* obtain a set of products*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ***********************************************************/
   /* *** load products to the tsq for further processing    ****/
   /* *** and read the first tsq stored record               ****/
   /* ***********************************************************/

  set TA5REC empty;
  set SL0EWB1 empty;

  SL0EWB1.SL0EWXLL = 134;
  TA5REC.TA5APPID = "SL0E";
  TA5REC.TA5FNCCD = "A";

  SL0EWA1.SL6DATA = VSYLOC02.VSYLOC02-DATA;
                   /* save the first cursor product*/

   /* ************************************************************/
   /* *** determine  if more than one product in the cursor   ****/
   /* ************************************************************/

  SL0EW01.SL0EWITC = 1; /* set counter for first fetched record*/

  while (SQLCA.VAGen_SQLCODE != +100)

    SL0EWB1.SL0EWXDL = VSYLOC02.VSYLOC02-DATA;

    if (SL0EWA1.XWHCD == "02" /* Greenland*/
     || SL0EWA1.XWHCD == "04" /* or Memphis Footwear*/
     || SL0EWA1.XWHCD == "07" /* Wilsonville*/
     || SL0EWA1.XWHCD == "51" /* or Memphis Apparel*/
     || SL0EWA1.XWHCD == "25" /* or NSG*/
     || SL0EWA1.XWHCD == "42") /* or Canada*/

      if (SL0EWA1.SL6ONHND > SL0EWA1.SL6PKRSV) /* On hand GT reserve*/

        SL0EW01.SL9WOQTY = SL0EW01.SL9WOQTY + SL0EWA1.SL6ONHND; /* On hand*/
        SL0EW01.SL9WOQTY = SL0EW01.SL9WOQTY - SL0EWA1.SL6PKRSV; /* Reserve*/

      end

    end

    call "TA0050" (SL0EWB1, TA5REC); /* move cursor prod to tsq*/

    if (TA5REC.TA5RTNCD != 0)

      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1FA";
      SLWREC.SLWMSGNO = 01; /* severe error*/

      return;

    end

    SL0ES1R(); /* fetch next cursor record for tsq*/

    if (SLWREC.SLWERRSW == "Y")
      return;
    end

    if (SL0EWA1.XWHCD == "02" /* Greenland*/
     || SL0EWA1.XWHCD == "04" /* or Memphis Footwear*/
     || SL0EWA1.XWHCD == "07" /* Wilsonville*/
     || SL0EWA1.XWHCD == "51" /* or Memphis Apparel*/
     || SL0EWA1.XWHCD == "25" /* or NSG*/
     || SL0EWA1.XWHCD == "42") /* or Canada*/

      if (SQLCA.VAGen_SQLCODE == +100     /* End of cursor*/
       || VSYLOC02.XGPCD != SL0EWA1.XGPCD /* or product changed*/
       || VSYLOC02.SY1STNBR != SL0EWA1.SY1STNBR
       || VSYLOC02.SY2CLRID != SL0EWA1.SY2CLRID
       || VSYLOC02.XDMCD != SL0EWA1.XDMCD 
       || VSYLOC02.XQACD != SL0EWA1.XQACD 
       || VSYLOC02.XOWCD != SL0EWA1.XOWCD 
       || VSYLOC02.PC2INSEG != SL0EWA1.XSDCD
       || VSYLOC02.XEGCD != SL0EWA1.XSACD 
       || VSYLOC02.XPGCD != SL0EWA1.XPGCD 
       || VSYLOC02.XUMCD != SL0EWA1.XUMCD 
       || VSYLOC02.XSLCD != SL0EWA1.XSLCD 
       || VSYLOC02.SY1UNPCS != SL0EWA1.SY1UNPCS)

        SL0EW01.SL0EW-NBR-CARTONS = 0; /* nbr cartons for size*/

        if (SL0EWA1.SY1UNPCS > 0) /* units/ gt zero*/

          SL0EW01.SL0EW-NBR-CARTONS = SL0EW01.SL9WOQTY / SL0EWA1.SY1UNPCS;
          SL0EW01.SL9WOQTY = SL0EW01.SL9WOQTY % SL0EWA1.SY1UNPCS;
          SL0EW01.SL-WO-NBR-OF-LABL = SL0EW01.SL-WO-NBR-OF-LABL +           SL0EW01.SL0EW-NBR-CARTONS;

          if (SL0EW01.SL9WOQTY != 0) /* Remainder not zero*/

            SL0EW01.SL-WO-NBR-OF-LABL = SL0EW01.SL-WO-NBR-OF-LABL + 1;

            SL0EW01.SL9WOQTY = 0; /* Reset quantity*/

            if (SLWREC.SLWIDX01 != SLWREC.SLWLINPP) /* New line error*/

              SLWREC.SLWLINPP = SLWREC.SLWIDX01; /* Line in error*/

              SLWREC.SLWERRSW = "Y"; /* Error switch*/
              SLWREC.XXXLOCID = "S1FB"; /* Location*/
              SLWREC.SLWMSGNO = 414; /* Odd units/case*/

              set SL0EM110.SL8FRAR[SLWIDX01] cursor, bold, skip;
              set SL0EM110.SL8FRZN[SLWIDX01] bold, skip;
              set SL0EM110.SL8FRLC[SLWIDX01] bold, skip;
              set SL0EM110.SL2PALET[SLWIDX01] bold, skip;
              set SL0EM110.SL2CASE[SLWIDX01] bold, skip;

              return;

            end

          end

        end

      end

    end

    if (VSYLOC02.XGPCD != SL0EWA1.XGPCD       /* check if prod/loc changes*/
     || VSYLOC02.SY1STNBR != SL0EWA1.SY1STNBR 
     || VSYLOC02.SY2CLRID != SL0EWA1.SY2CLRID 
     || VSYLOC02.XDMCD != SL0EWA1.XDMCD       
     || VSYLOC02.XQACD != SL0EWA1.XQACD       
     || VSYLOC02.XOWCD != SL0EWA1.XOWCD       
     || VSYLOC02.PC2INSEG != SL0EWA1.XSDCD    
     || VSYLOC02.XEGCD != SL0EWA1.XSACD       
     || VSYLOC02.XPGCD != SL0EWA1.XPGCD       
     || VSYLOC02.XUMCD != SL0EWA1.XUMCD       
     || VSYLOC02.XSLCD != SL0EWA1.XSLCD       
     || VSYLOC02.SY1UNPCS != SL0EWA1.SY1UNPCS /* units per case dont match*/
     || VSYLOC02.SY5SZID != SL0EWA1.SY5SZID)  /* if sizes don't match*/

      SL0EW01.SL0EWITC = SL0EW01.SL0EWITC + 1; /* increment item counter*/

    end

    if (SL0EW01.SL0EWITC > 1               /* more than one item counter*/
     && SL0EWX1.SL0EWMPF == "N"            /* mult-sku flag is no*/
     && SL0EW01.SL0EWTAT[SLWIDX01] != "PR" /* to area not processing*/
     && SL0EW01.SL0EWFAT[SLWIDX01] != "RE") /* from area ne receiving*/

      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1FC";
      SLWREC.SLWMSGNO = 0174; /* gt 1 item for no loc*/

      set SL0EM110.SL8FRAR[SLWIDX01] cursor, bold;
      set SL0EM110.SL8FRZN[SLWIDX01] bold;
      set SL0EM110.SL8FRLC[SLWIDX01] bold;

      return;

    end

    if (VSYLOC02.XWHCD == "02" /* Greenland*/
     || VSYLOC02.XWHCD == "04" /* or Memphis Footwear*/
     || VSYLOC02.XWHCD == "07" /* or Wilsonville*/
     || VSYLOC02.XWHCD == "51" /* or Memphis Apparel*/
     || VSYLOC02.XWHCD == "25" /* or NSG*/
     || VSYLOC02.XWHCD == "42") /* or Canada*/

      if (SL0EW01.SL0EWITC > 1            /* more than one item counter*/
       && VSYLOC02.XGPCD == SL0EWA1.XGPCD /* same prod*/
       && VSYLOC02.SY1STNBR == SL0EWA1.SY1STNBR
       && VSYLOC02.SY2CLRID == SL0EWA1.SY2CLRID
       && VSYLOC02.XDMCD == SL0EWA1.XDMCD 
       && VSYLOC02.XQACD == SL0EWA1.XQACD 
       && VSYLOC02.XOWCD == SL0EWA1.XOWCD 
       && VSYLOC02.PC2INSEG == SL0EWA1.XSDCD
       && VSYLOC02.XEGCD == SL0EWA1.XSACD 
       && VSYLOC02.XPGCD == SL0EWA1.XPGCD 
       && VSYLOC02.XUMCD == SL0EWA1.XUMCD 
       && VSYLOC02.XSLCD == SL0EWA1.XSLCD 
       && VSYLOC02.SY1UNPCS != SL0EWA1.SY1UNPCS
       /* units per case dont match*/
       && SL0EW01.SL0EWTAT[SLWIDX01] != "PR") /* to area not processing*/

        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S1FD";
        SLWREC.SLWMSGNO = 0226; /* no match units per case*/

        set SL0EM110.SL8FRAR[SLWIDX01] cursor, bold;
        set SL0EM110.SL8FRZN[SLWIDX01] bold;
        set SL0EM110.SL8FRLC[SLWIDX01] bold;

        return;

      end

    end

  end

  SLWREC.SLWLINPP = 0; /* Units/case line error*/

  TA5REC.TA5FNCCD = "R";
  TA5REC.TA5TSQIX = 1;

  call "TA0050" (SL0EWB1, TA5REC); /* READ TSQ RECORD*/

  if (TA5REC.TA5RTNCD != 0)

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1FE";
    SLWREC.SLWMSGNO = 01; /* error reserved status*/

    return;

  else

    VSYLOC02.VSYLOC02-DATA = SL0EWB1.SL0EWXDL;

  end

   /* ***********************************************************/
   /* *** Insert work order header/items for each product    ****/
   /* *** selected above.   This function will also bypass   ****/
   /* *** duplicate work orders and pass a warning message   ****/
   /* *** for prod/locat records whose setaside qnty > 0.    ****/
   /* *** If the fetched product numbers are equal to prior  ****/
   /* *** product number then insert an item wo rec. If the  ****/
   /* *** product and size are equal to prior, then accum    ****/
   /* *** the onhand and reserve quantities to print when a  ****/
   /* *** product number breaks. Whenever a product break    ****/
   /* *** occurs insert a header wo record for the new       ****/
   /* *** product.                                           ****/
   /* ***********************************************************/

  SL0EW01.SL0EWFL2 = "Y"; /* this set first rec sw to yes*/
  SL0EW01.SL0EWFL3 = "N"; /* this set dup wo sw to no*/
  SL0EW01.SL0EWFL4 = "N"; /* this set prior rec write sw to no*/
  SL0EW01.SL0EWFL5 = "N"; /* this set negative size/qnty sw to no*/
  SL0EW01.SL0EWFL6 = "N"; /* this set negative item written sw*/
  SLWREC.SLWSEXSW = "N";

  SLWREC.SLWCTR01 = 0;
  SL0EW01.SL0EWSZC = 0; /* initial product size counter*/

  set SL0EWA1 empty; /* spaces out previous prod/loc rec*/

   /* ***********************************************************/
   /* *** read all products in tsq selected above            ****/
   /* ***********************************************************/

  while (TA5REC.TA5RTNCD != 7)

    /* ***********************************************************/
    /* check if break in product numbers (prod/case xgpcd to xumcd)*/
    /* ***********************************************************/

    if (VSYLOC02.SL2PALET != SL0EWA1.SL2PALET
     /* check if curr prod eq to prev*/
     || VSYLOC02.SL2CASE != SL0EWA1.SL2CASE
     || VSYLOC02.XGPCD != SL0EWA1.XGPCD
     || VSYLOC02.SY1STNBR != SL0EWA1.SY1STNBR
     || VSYLOC02.SY2CLRID != SL0EWA1.SY2CLRID
     || VSYLOC02.XDMCD != SL0EWA1.XDMCD
     || VSYLOC02.XQACD != SL0EWA1.XQACD
     || VSYLOC02.XOWCD != SL0EWA1.XOWCD
     || VSYLOC02.PC2INSEG != SL0EWA1.XSDCD
     || VSYLOC02.XEGCD != SL0EWA1.XSACD
     || VSYLOC02.XPGCD != SL0EWA1.XPGCD
     || VSYLOC02.XUMCD != SL0EWA1.XUMCD
     || VSYLOC02.XSLCD != SL0EWA1.XSLCD
     || VSYLOC02.SY1UNPCS != SL0EWA1.SY1UNPCS)

      SL0EW01.SL0EWFL3 = "N"; /* reset the dup wo switch*/

      /* ***********************************************************/
      /* *** check for duplicate work orders at this location   ****/
      /* *** bypass further processing of product if true       ****/
      /* ***********************************************************/
      if (SL0EW01.SL5FRWOC != 0) /* if wo order count fld gt 0*/
        SL0ES1K(); /* verify duplicate work orders for*/
                                   /* locat*/
        if (SLWREC.SLWERRSW == "Y")
          return;
        end
      end

      /* ***********************************************************/
      /* *** write out the previous wo item record when a new   ****/
      /* *** product is encountered                             ****/
      /* ***********************************************************/
      if (SL0EW01.SL0EWFL2 == "N" /* not the first record of cursor*/
       && SL0EW01.SL0EWFL3 == "N" /* not a duplicate wo*/
       && SL0EW01.SL0EWFL4 == "N") /* prev rec not already written*/
        if (SL0EW01.SL0EWFL5 == "Y") /* neg qnty switch is yes*/
          SL0EW01.SL0EWFL5 = "N"; /* move no to neg qnty sw*/
          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback(); /* cancel prior update to last comitt*/
        else
          SL9REC.SL9WOQTY = SL0EWA1.SL6ONHND - SL0EWA1.SL6PKRSV;
          if (SL9REC.SL9WOQTY > 0) /* qnty must be grtr than 0 for wo*/
            SL0ES1L(); /* add a wo item (prior to prod change)*/
            if (SLWREC.SLWERRSW == "Y")
              VGVar.handleSysLibraryErrors = 0;
              sysLib.rollback(); /* cancel prior update to last comitt*/
              return;
            end
            if (SL0EW01.SL0EWSZC > 0) /* only commit when wo has items*/
              VGVar.handleSysLibraryErrors = 1;
              sysLib.commit();
              SLWREC.SLWCTR01 = SLWREC.SLWCTR01 + 1;
            else
              VGVar.handleSysLibraryErrors = 0;
              sysLib.rollback(); /* rollback when no items*/
            end
            SL0EW01.SL0EWFL4 = "Y"; /* prev rec has been written*/
          else
            if (SL9REC.SL9WOQTY < 0) /* qnty neg - zero ok*/
              VGVar.handleSysLibraryErrors = 0;
              sysLib.rollback(); /* cancel prior update to last comitt*/
            else
              if (SL0EW01.SL0EWSZC > 0) /* only commit when wo has items*/
                VGVar.handleSysLibraryErrors = 1;
                sysLib.commit();
                SLWREC.SLWCTR01 = SLWREC.SLWCTR01 + 1;
              else
                VGVar.handleSysLibraryErrors = 0;
                sysLib.rollback(); /* rollback when no items*/
              end
              SL0EW01.SL0EWFL4 = "Y"; /* prev rec has been written*/
            end
          end
        end
        SL0EW01.SL0EWFL5 = "N"; /* neg qnty sw*/
        SL0EW01.SL0EWFL6 = "N"; /* item written sw*/
      end

      /* ***********************************************************/
      /* *** insert new product header and procede to fetch     ****/
      /* *** the subsequent matching products for item insert.  ****/
      /* *** In the process, collect data for new product       ****/
      /* ***********************************************************/

      if (SL0EW01.SL0EWFL3 == "N") /* not a duplicate wo*/
        SL0ES1N(); /* determine new work order number*/
        if (SLWREC.SLWERRSW == "Y")
          return;
        end
        SL0EWX1.SL0EWUSW = "N"; /* empty bulk loc. update switch*/
        if (SL0EW01.SL0EWTAT[SLWIDX01] == "BU")
          SL5REC.XWHCD = SL0EM110.XWHCD;
          SL5REC.XARCD = SL0EW01.SL0EWTAC[SLWIDX01];
          while (SLWREC.SLWERRSW == "N"
           && SL0EWX1.SL0EWUSW == "N")
            SL0ES9T(); /* find empty loc w/in row limit*/
          end
          if (SLWREC.SLWERRSW == "Y")
            return;
          end
        else
          SL0ES1T(); /* find to location without zone*/
          if (SLWREC.SLWERRSW == "Y")
            return;
          end
        end
        SL0EM110.SL8TOLC[SLWIDX01] = SL5REC.SL5LOCTN;
        SL0ES1O(); /* insert wo header record*/
        if (SLWREC.SLWERRSW == "Y")
          return;
        end
        SL0ES1P(); /* update from location record*/
        if (SLWREC.SLWERRSW == "Y")
          return;
        end
        SL0ES1Q(); /* update to location record*/
        if (SLWREC.SLWERRSW == "Y")
          return;
        end
      end

      /* ***********************************************************/
      /* *** process the products that were same as prvious.    ****/
      /* *** if the sizes are the same then accumulate on hand  ****/
      /* *** and reserve quantities on the previous saved       ****/
      /* *** product.  if the curr/prev sizes are different then****/
      /* *** then insert the prev wo item record                ****/
      /* ***********************************************************/

    else
      if (SL0EW01.SL0EWFL3 == "N") /* not a duplicate wo*/
        if (VSYLOC02.SY5SZID == SL0EWA1.SY5SZID) /* sizes are equal*/
          SL0EWA1.SL6ONHND = SL0EWA1.SL6ONHND + VSYLOC02.SL6ONHND;
          SL0EWA1.SL6PKRSV = SL0EWA1.SL6PKRSV + VSYLOC02.SL6PKRSV;
        else
          SL9REC.SL9WOQTY = SL0EWA1.SL6ONHND - SL0EWA1.SL6PKRSV;
          if (SL9REC.SL9WOQTY < 0)
            SL0EW01.SL0EWFL5 = "Y"; /* move yes to neg qnty sw*/
          else
            SL0EW01.SL0EWFL6 = "Y"; /* item written sw*/
            if (SL9REC.SL9WOQTY > 0)
              SL0ES1L(); /* insert item to wo item db*/
              if (SLWREC.SLWERRSW == "Y")
                VGVar.handleSysLibraryErrors = 0;
                sysLib.rollback(); /* cancel prior update to last comitt*/
                return;
              end
            end
          end
        end
      end
    end

    /* ***********************************************************/
    /* *** if dup wo- insert prior item if not already done,  ****/
    /* ***              move curr to prev, and fetch next     ****/
    /* *** if not dup wo- if prod/size are equal fetch next   ****/
    /* ***    else move curr to prev and fetch next           ****/
    /* ***********************************************************/

    if (SL0EW01.SL0EWFL3 == "Y") /* dup wo is yes*/
      if (SL0EW01.SL0EWFL2 == "N") /* first record is no*/
        if (SL0EW01.SL0EWFL4 == "N") /* prior record written is no*/

          if (VSYLOC02.SL2PALET != SL0EWA1.SL2PALET /* is curr eq to prev*/
           || VSYLOC02.SL2CASE != SL0EWA1.SL2CASE   
           || VSYLOC02.XGPCD != SL0EWA1.XGPCD       
           || VSYLOC02.SY1STNBR != SL0EWA1.SY1STNBR 
           || VSYLOC02.SY2CLRID != SL0EWA1.SY2CLRID 
           || VSYLOC02.XDMCD != SL0EWA1.XDMCD       
           || VSYLOC02.XQACD != SL0EWA1.XQACD       
           || VSYLOC02.XOWCD != SL0EWA1.XOWCD       
           || VSYLOC02.PC2INSEG != SL0EWA1.XSDCD    
           || VSYLOC02.XEGCD != SL0EWA1.XSACD       
           || VSYLOC02.XPGCD != SL0EWA1.XPGCD       
           || VSYLOC02.XUMCD != SL0EWA1.XUMCD       
           || VSYLOC02.XSLCD != SL0EWA1.XSLCD       
           || VSYLOC02.SY1UNPCS != SL0EWA1.SY1UNPCS) /* units per case*/
            if (SL0EW01.SL0EWFL5 == "Y") /* neg qnty switch is yes*/
              VGVar.handleSysLibraryErrors = 0;
              sysLib.rollback(); /* cancel prior updates to last comitt*/
            else
              SL9REC.SL9WOQTY = SL0EWA1.SL6ONHND - SL0EWA1.SL6PKRSV;
              if (SL9REC.SL9WOQTY > 0)
                                   /* qnty must be grtr than 0 for wo*/
                SL0ES1L(); /* add a wo item (prior to prod change)*/
                if (SLWREC.SLWERRSW == "Y")
                  VGVar.handleSysLibraryErrors = 0;
                  sysLib.rollback(); /* cancel prior update to last comitt*/
                  return;
                end
                if (SL0EW01.SL0EWSZC > 0) /* only commit when wo has items*/
                  VGVar.handleSysLibraryErrors = 1;
                  sysLib.commit();
                  SLWREC.SLWCTR01 = SLWREC.SLWCTR01 + 1;
                else
                  VGVar.handleSysLibraryErrors = 0;
                  sysLib.rollback(); /* rollback when no items*/
                end
                SL0EWA1.SL6DATA = VSYLOC02.VSYLOC02-DATA;
                SL0EW01.SL0EWFL4 = "Y"; /* prior record written sw*/
              else
                if (SL9REC.SL9WOQTY < 0) /* qnty neg - zero ok*/
                  VGVar.handleSysLibraryErrors = 0;
                  sysLib.rollback(); /* cancel prior update to last comit*/
                else
                  if (SL0EW01.SL0EWSZC > 0)
                                   /* only commit when wo has items*/
                    VGVar.handleSysLibraryErrors = 1;
                    sysLib.commit();
                    SLWREC.SLWCTR01 = SLWREC.SLWCTR01 + 1;
                  else
                    VGVar.handleSysLibraryErrors = 0;
                    sysLib.rollback(); /* rollback when no items*/
                  end
                  SL0EWA1.SL6DATA = VSYLOC02.VSYLOC02-DATA;
                  SL0EW01.SL0EWFL4 = "Y"; /* prior record written sw*/
                end
              end
            end
            SL0EW01.SL0EWFL5 = "N"; /* move no to neg qnty sw*/
            SL0EW01.SL0EWFL6 = "N"; /* item written sw*/
          end
        end
      else
        SL0EWA1.SL6DATA = VSYLOC02.VSYLOC02-DATA;
      end
    else
      SL0EW01.SL0EWFL2 = "N"; /* first valid record sw*/
      SL0EW01.SL0EWFL4 = "N"; /* prior record written sw*/
      if (VSYLOC02.SL2PALET != SL0EWA1.SL2PALET /* is curr eq to prev*/
       || VSYLOC02.SL2CASE != SL0EWA1.SL2CASE   
       || VSYLOC02.XGPCD != SL0EWA1.XGPCD       
       || VSYLOC02.SY1STNBR != SL0EWA1.SY1STNBR 
       || VSYLOC02.SY2CLRID != SL0EWA1.SY2CLRID 
       || VSYLOC02.XDMCD != SL0EWA1.XDMCD       
       || VSYLOC02.XQACD != SL0EWA1.XQACD       
       || VSYLOC02.XOWCD != SL0EWA1.XOWCD       
       || VSYLOC02.PC2INSEG != SL0EWA1.XSDCD    
       || VSYLOC02.XEGCD != SL0EWA1.XSACD       
       || VSYLOC02.XPGCD != SL0EWA1.XPGCD       
       || VSYLOC02.XUMCD != SL0EWA1.XUMCD       
       || VSYLOC02.XSLCD != SL0EWA1.XSLCD       
       || VSYLOC02.SY1UNPCS != SL0EWA1.SY1UNPCS /* units per case*/
       || VSYLOC02.SY5SZID != SL0EWA1.SY5SZID) 
        SL0EWA1.SL6DATA = VSYLOC02.VSYLOC02-DATA;
      end
    end

    /* ***********************************************************/
    /* *** check if product is setaside.  if true then display****/
    /* *** warning message and bypass check on same product   ****/
    /* ***********************************************************/
    if (VSYLOC02.SL6STASD > 0   /* check if product is setaside*/
     && SL0EW01.SL0EWFL3 == "N" /* not a duplicate wo*/
     && SLWREC.SLWFTMSW == "Y") /* first time setaside detected*/
      SLWREC.SLWFTMSW = "N"; /* prevent further setaside msgs*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1FF";
      SLWREC.SLWMSGNO = 41; /* warning for setaside*/
      SL0EM110.SL8TOZN[SLWIDX01] = " ";
      SL0EM110.SL8TOLC[SLWIDX01] = " ";
      set SL0EM110.SL8FRAR[SLWIDX01] cursor, bold;
      set SL0EM110.SL8FRZN[SLWIDX01] bold;
      set SL0EM110.SL8FRLC[SLWIDX01] bold;
      return;
    end

    TA5REC.TA5FNCCD = "R";
    TA5REC.TA5TSQIX = TA5REC.TA5TSQIX + 1;
    call "TA0050" (SL0EWB1, TA5REC); /* READ TSQ RECORD*/
    if (TA5REC.TA5RTNCD == 0
     || TA5REC.TA5RTNCD == 7)
      VSYLOC02.VSYLOC02-DATA = SL0EWB1.SL0EWXDL;
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1FG";
      SLWREC.SLWMSGNO = 01; /* error reserved status*/
      return;
    end
  end

   /* ***********************************************************/
   /* *** at end of cursor write out the last wo order       ****/
   /* *** item record                                        ****/
   /* ***********************************************************/

  if (SL0EW01.SL0EWFL3 == "Y") /* dup wo is yes*/
    if (SL0EW01.SL0EWFL4 == "N") /* prior record written is no*/
      if (SLWREC.SLWCTR01 > 0)
        if (SL0EW01.SL0EWFL5 == "Y") /* neg qnty switch is yes*/
          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback(); /* cancel prior updates to last comitt*/
        else
          SL9REC.SL9WOQTY = SL0EWA1.SL6ONHND - SL0EWA1.SL6PKRSV;
          if (SL9REC.SL9WOQTY > 0) /* qnty must be grtr than 0 for wo*/
            SL0ES1L(); /* add a wo item (prior to prod change)*/
            if (SLWREC.SLWERRSW == "Y")
              VGVar.handleSysLibraryErrors = 0;
              sysLib.rollback(); /* cancel prior update to last comitt*/
              return;
            end
            if (SL0EW01.SL0EWSZC > 0) /* only commit when wo has items*/
              VGVar.handleSysLibraryErrors = 1;
              sysLib.commit();
            else
              VGVar.handleSysLibraryErrors = 0;
              sysLib.rollback(); /* rollback when no items*/
            end
          else
            if (SL9REC.SL9WOQTY < 0) /* qnty neg - zero ok*/
              VGVar.handleSysLibraryErrors = 0;
              sysLib.rollback(); /* cancel prior update to last comitt*/
            else
              if (SL0EW01.SL0EWSZC > 0) /* only commit when wo has items*/
                VGVar.handleSysLibraryErrors = 1;
                sysLib.commit();
              else
                VGVar.handleSysLibraryErrors = 0;
                sysLib.rollback(); /* rollback when no items*/
              end
            end
          end
        end
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S1FH";
        SLWREC.SLWMSGNO = 42; /* wo exist msg*/
        set SL0EM110.SL8FRAR[SLWIDX01] cursor, bold;
        set SL0EM110.SL8FRZN[SLWIDX01] bold;
        set SL0EM110.SL8FRLC[SLWIDX01] bold;
        return;
      end
    end
  else
    if (SL0EW01.SL0EWFL5 == "Y") /* neg qnty switch is yes*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* cancel prior updates to last comitt*/
      if (SLWREC.SLWCTR01 == 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S1FI";
        SLWREC.SLWMSGNO = 138; /* neg qty msg*/
        set SL0EM110.SL8FRAR[SLWIDX01] cursor, bold;
        set SL0EM110.SL8FRZN[SLWIDX01] bold;
        set SL0EM110.SL8FRLC[SLWIDX01] bold;
        return;
      end
    else
      SL9REC.SL9WOQTY = SL0EWA1.SL6ONHND - SL0EWA1.SL6PKRSV;
      if (SL9REC.SL9WOQTY > 0) /* qnty must be grtr than 0 for wo*/
        SL0ES1L(); /* add a wo item (prior to prod change)*/
        if (SLWREC.SLWERRSW == "Y")
          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback(); /* cancel prior update to last comitt*/
          return;
        end
        if (SL0EW01.SL0EWSZC > 0) /* only commit when wo has items*/
          VGVar.handleSysLibraryErrors = 1;
          sysLib.commit();
        else
          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback(); /* rollback when no items*/
        end
      else
        if (SL9REC.SL9WOQTY < 0) /* qnty neg - zero ok*/
          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback(); /* cancel prior update to last comitt*/
        else
          if (SL0EW01.SL0EWSZC > 0) /* only commit when wo has items*/
            VGVar.handleSysLibraryErrors = 1;
            sysLib.commit();
          else
            VGVar.handleSysLibraryErrors = 0;
            sysLib.rollback(); /* rollback when no items*/
          end
        end
      end
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES1F

// update work orders option # 2
Function SL0ES1G()

   /* ***********************************************************/
   /* *** SL0ES1G                                            ****/
   /* *** insert work order header/item records (option 2)   ****/
   /* *** if FAREA/FZONE/TAREA/TZONE entered                 ****/
   /* ***    FAREA/FZONE/FLOCATION/TAREA/TZONE entered       ****/
   /* ***********************************************************/

   /* ***********************************************************/
   /* *** Verify from location                               ****/
   /* ***********************************************************/

  SL0EWX1.SL0EWUSW = "N";

  SL0ES1I(); /* <=== verify from location*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ***********************************************************/
   /* *** obtain all products from product/location table    ****/
   /* ***********************************************************/

  SL0ES1J(); /* obtain a set of products*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ***********************************************************/
   /* *** load products to the tsq for further processing    ****/
   /* *** and read the first tsq stored record               ****/
   /* ***********************************************************/

  set TA5REC empty;
  set SL0EWB1 empty;

  SL0EWB1.SL0EWXLL = 134; /* The record length has*/
                                      /* been increased to 134 from 124*/
  TA5REC.TA5APPID = "SL0E";
  TA5REC.TA5FNCCD = "A";

  SL0EWA1.SL6DATA = VSYLOC02.VSYLOC02-DATA;
                   /* save the first cursor product*/

   /* ************************************************************/
   /* *** determine  if more than one product in the cursor   ****/
   /* ************************************************************/

  SL0EW01.SL0EWITC = 1; /* set counter for first fetched record*/
  SL0EW01.SL0EWSPA = 0; /* set saved prod sas id to zero*/

  while (SQLCA.VAGen_SQLCODE != +100)

    if (VSYLOC02.INASAID > 0) /* sas exists*/

      if (SL0EW01.SL0EWSPA == 0) /* no sas saved*/

        SL0EW01.SL0EWSPA = VSYLOC02.INASAID; /* save sas id*/

      else

        if (VSYLOC02.INASAID != 62 /* whse 02 prod sas id*/
         || VSYLOC02.INASAID != 64 /* whse 04 prod sas id*/
         || VSYLOC02.INASAID != 65 /* whse 07 prod sas id*/
         || VSYLOC02.INASAID != 68 /* whse 25 prod sas id*/
         || VSYLOC02.INASAID != 69 /* whse 51 prod sas id*/
         || VSYLOC02.INASAID != 103) /* canada whse prod sas id*/

          SL0EW01.SL0EWSPA = VSYLOC02.INASAID; /* save sas id*/

        end

      end

    end

    SL0EWB1.SL0EWXDL = VSYLOC02.VSYLOC02-DATA;

    if (SL0EWA1.XWHCD == "02" /* Greenland*/
     || SL0EWA1.XWHCD == "04" /* or Memphis Footwear*/
     || SL0EWA1.XWHCD == "07" /* or Wilsonville*/
     || SL0EWA1.XWHCD == "25" /* or NSG*/
     || SL0EWA1.XWHCD == "51" /* or Memphis Apparel*/
     || SL0EWA1.XWHCD == "42") /* or Canada*/

      if (SL0EWA1.SL6ONHND > SL0EWA1.SL6PKRSV) /* On hand GT reserve*/

        SL0EW01.SL9WOQTY = SL0EW01.SL9WOQTY + SL0EWA1.SL6ONHND; /* On hand*/
        SL0EW01.SL9WOQTY = SL0EW01.SL9WOQTY - SL0EWA1.SL6PKRSV; /* Reserve*/

      end

    end

    call "TA0050" (SL0EWB1, TA5REC); /* move cursor prod to tsq*/

    if (TA5REC.TA5RTNCD != 0)

      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1GA";
      SLWREC.SLWMSGNO = 01; /* severe error*/

      return;

    end

    SL0ES1R(); /* fetch next cursor record for tsq*/

    if (SLWREC.SLWERRSW == "Y")
      return;
    end

    if (SL0EWA1.XWHCD == "02" /* Greenland*/
     || SL0EWA1.XWHCD == "04" /* or Memphis Footwear*/
     || SL0EWA1.XWHCD == "07" /* or Wilsonville*/
     || SL0EWA1.XWHCD == "25" /* or NSG*/
     || SL0EWA1.XWHCD == "51" /* or Memphis Apparel*/
     || SL0EWA1.XWHCD == "42") /* or Canada*/

      if (SQLCA.VAGen_SQLCODE == +100     /* End of cursor*/
       || VSYLOC02.XGPCD != SL0EWA1.XGPCD /* or product changed*/
       || VSYLOC02.SY1STNBR != SL0EWA1.SY1STNBR
       || VSYLOC02.SY2CLRID != SL0EWA1.SY2CLRID
       || VSYLOC02.XDMCD != SL0EWA1.XDMCD 
       || VSYLOC02.XQACD != SL0EWA1.XQACD 
       || VSYLOC02.XOWCD != SL0EWA1.XOWCD 
       || VSYLOC02.PC2INSEG != SL0EWA1.XSDCD
       || VSYLOC02.XEGCD != SL0EWA1.XSACD 
       || VSYLOC02.XPGCD != SL0EWA1.XPGCD 
       || VSYLOC02.XUMCD != SL0EWA1.XUMCD 
       || VSYLOC02.XSLCD != SL0EWA1.XSLCD 
       || VSYLOC02.SY1UNPCS != SL0EWA1.SY1UNPCS)

        SL0EW01.SL0EW-NBR-CARTONS = 0; /* nbr cartons for size*/

        if (SL0EWA1.SY1UNPCS > 0) /* units per case gt zero*/

          SL0EW01.SL0EW-NBR-CARTONS = SL0EW01.SL9WOQTY / SL0EWA1.SY1UNPCS;
          SL0EW01.SL9WOQTY = SL0EW01.SL9WOQTY % SL0EWA1.SY1UNPCS;
          SL0EW01.SL-WO-NBR-OF-LABL = SL0EW01.SL-WO-NBR-OF-LABL +           SL0EW01.SL0EW-NBR-CARTONS;

          if (SL0EW01.SL9WOQTY != 0) /* Remainder not zero*/

            SL0EW01.SL-WO-NBR-OF-LABL = SL0EW01.SL-WO-NBR-OF-LABL + 1;

            SL0EW01.SL9WOQTY = 0; /* Reset quantity*/

            if (SLWREC.SLWIDX01 != SLWREC.SLWLINPP) /* New line error*/

              SLWREC.SLWLINPP = SLWREC.SLWIDX01; /* Line in error*/

              SLWREC.SLWERRSW = "Y"; /* Error switch*/
              SLWREC.XXXLOCID = "S1GB"; /* Location*/
              SLWREC.SLWMSGNO = 414; /* Odd units/case*/

              set SL0EM110.SL8FRAR[SLWIDX01] cursor, bold, skip;
              set SL0EM110.SL8FRZN[SLWIDX01] bold, skip;
              set SL0EM110.SL8FRLC[SLWIDX01] bold, skip;
              set SL0EM110.SL2PALET[SLWIDX01] bold, skip;
              set SL0EM110.SL2CASE[SLWIDX01] bold, skip;

              return;

            end

          end

        end

      end

    end

    if (VSYLOC02.XGPCD != SL0EWA1.XGPCD       /* check if prod/loc changes*/
     || VSYLOC02.SY1STNBR != SL0EWA1.SY1STNBR 
     || VSYLOC02.SY2CLRID != SL0EWA1.SY2CLRID 
     || VSYLOC02.XDMCD != SL0EWA1.XDMCD       
     || VSYLOC02.XQACD != SL0EWA1.XQACD       
     || VSYLOC02.XOWCD != SL0EWA1.XOWCD       
     || VSYLOC02.PC2INSEG != SL0EWA1.XSDCD    
     || VSYLOC02.XEGCD != SL0EWA1.XSACD       
     || VSYLOC02.XPGCD != SL0EWA1.XPGCD       
     || VSYLOC02.XUMCD != SL0EWA1.XUMCD       
     || VSYLOC02.XSLCD != SL0EWA1.XSLCD       
     || VSYLOC02.SY1UNPCS != SL0EWA1.SY1UNPCS /* units per case*/
     || VSYLOC02.SY5SZID != SL0EWA1.SY5SZID)  /* if sizes don't match*/

      SL0EW01.SL0EWITC = SL0EW01.SL0EWITC + 1; /* increment item counter*/

    end

    if (SL0EW01.SL0EWITC > 1               /* more than one item counter*/
     && SL0EWX1.SL0EWMPF == "N"            /* mult-sku flag is no*/
     && SL0EW01.SL0EWTAT[SLWIDX01] != "PR" /* to area not processing*/
     && SL0EW01.SL0EWFAT[SLWIDX01] != "RE") /* from area not receiving*/

      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1GC";
      SLWREC.SLWMSGNO = 0174; /* gt 1 item for no loc*/

      set SL0EM110.SL8FRAR[SLWIDX01] cursor, bold;
      set SL0EM110.SL8FRZN[SLWIDX01] bold;
      set SL0EM110.SL8FRLC[SLWIDX01] bold;

      return;

    end

    if (VSYLOC02.XWHCD == "02" /* Greenland*/
     || VSYLOC02.XWHCD == "04" /* or Memphis Footwear*/
     || VSYLOC02.XWHCD == "07" /* or Wilsonville*/
     || VSYLOC02.XWHCD == "25" /* or NSG*/
     || VSYLOC02.XWHCD == "51" /* or Memphis Apparel*/
     || VSYLOC02.XWHCD == "42") /* or Canada*/

      if (SL0EW01.SL0EWITC > 1                  /* more than one item counter*/
       && VSYLOC02.XGPCD == SL0EWA1.XGPCD       /* same prod*/
       && VSYLOC02.SY1STNBR == SL0EWA1.SY1STNBR 
       && VSYLOC02.SY2CLRID == SL0EWA1.SY2CLRID 
       && VSYLOC02.XDMCD == SL0EWA1.XDMCD       
       && VSYLOC02.XQACD == SL0EWA1.XQACD       
       && VSYLOC02.XOWCD == SL0EWA1.XOWCD       
       && VSYLOC02.PC2INSEG == SL0EWA1.XSDCD    
       && VSYLOC02.XEGCD == SL0EWA1.XSACD       
       && VSYLOC02.XPGCD == SL0EWA1.XPGCD       
       && VSYLOC02.XUMCD == SL0EWA1.XUMCD       
       && VSYLOC02.XSLCD == SL0EWA1.XSLCD       
       && VSYLOC02.SY1UNPCS != SL0EWA1.SY1UNPCS /* units per case*/
       && SL0EW01.SL0EWTAT[SLWIDX01] != "PR")   /* to area not processing*/

        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S1GD";
        SLWREC.SLWMSGNO = 0226; /* no match units per case*/

        set SL0EM110.SL8FRAR[SLWIDX01] cursor, bold;
        set SL0EM110.SL8FRZN[SLWIDX01] bold;
        set SL0EM110.SL8FRLC[SLWIDX01] bold;

        return;

      end

    end

  end

  SLWREC.SLWLINPP = 0; /* Units/case line error*/

  TA5REC.TA5FNCCD = "R";
  TA5REC.TA5TSQIX = 1;

  call "TA0050" (SL0EWB1, TA5REC); /* READ TSQ RECORD*/

  if (TA5REC.TA5RTNCD != 0)

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1GE";
    SLWREC.SLWMSGNO = 01; /* error reserved status*/

    return;

  else

    VSYLOC02.VSYLOC02-DATA = SL0EWB1.SL0EWXDL;

  end

   /* ***********************************************************/
   /* *** Insert work order header/items for each product    ****/
   /* *** selected above.   This function will also bypass   ****/
   /* *** duplicate work orders and pass a warning message   ****/
   /* *** for prod/locat records whose setaside qnty > 0.    ****/
   /* *** If the fetched product numbers are equal to prior  ****/
   /* *** product number then insert an item wo rec. If the  ****/
   /* *** product and size are equal to prior, then accum    ****/
   /* *** the onhand and reserve quantities to print when a  ****/
   /* *** product number breaks. Whenever a product break    ****/
   /* *** occurs insert a header wo record for the new       ****/
   /* *** product.                                           ****/
   /* ***********************************************************/

  SL0EW01.SL0EWFL2 = "Y"; /* this set first rec sw to yes*/
  SL0EW01.SL0EWFL3 = "N"; /* this set dup wo sw to no*/
  SL0EW01.SL0EWFL4 = "N"; /* this set prior rec write sw to no*/
  SL0EW01.SL0EWFL5 = "N"; /* this set neg qnty/size sw to no*/
  SL0EW01.SL0EWFL6 = "N"; /* this set prior item write sw to no*/
  SLWREC.SLWSEXSW = "N"; /* n=use specific zn/loc to get assign*/

  SLWREC.SLWCTR01 = 0; /* counter of written wo's*/
  SL0EW01.SL0EWSZC = 0; /* zero product size counter*/

  set SL0EWA1 empty; /* spaces out previous prod/loc rec*/

   /* ***********************************************************/
   /* *** read all products in tsq selected above            ****/
   /* ***********************************************************/

  while (TA5REC.TA5RTNCD != 7)

    /* ***********************************************************/
    /* *** check for break in product numbers (xgpcd to xumcd)****/
    /* ***********************************************************/

    if (VSYLOC02.SL2PALET != SL0EWA1.SL2PALET /* check if curr eq to prev*/
     || VSYLOC02.SL2CASE != SL0EWA1.SL2CASE   
     || VSYLOC02.XGPCD != SL0EWA1.XGPCD       
     || VSYLOC02.SY1STNBR != SL0EWA1.SY1STNBR 
     || VSYLOC02.SY2CLRID != SL0EWA1.SY2CLRID 
     || VSYLOC02.XDMCD != SL0EWA1.XDMCD       
     || VSYLOC02.XQACD != SL0EWA1.XQACD       
     || VSYLOC02.XOWCD != SL0EWA1.XOWCD       
     || VSYLOC02.PC2INSEG != SL0EWA1.XSDCD    
     || VSYLOC02.XEGCD != SL0EWA1.XSACD       
     || VSYLOC02.XPGCD != SL0EWA1.XPGCD       
     || VSYLOC02.XUMCD != SL0EWA1.XUMCD       
     || VSYLOC02.XSLCD != SL0EWA1.XSLCD       
     || VSYLOC02.SY1UNPCS != SL0EWA1.SY1UNPCS) /* units per case*/

      /* ***********************************************************/
      /* *** initialize product size assignment tbl flds        ****/
      /* ***********************************************************/
      SL0ESZZ(); /* init. sz/loc tbl flds*/
      SLWREC.SLWREM01 = 0; /* counter of prod. assign's used*/

      SL0EW01.SL0EWFL3 = "N"; /* reset the dup wo switch*/
      /* ***********************************************************/
      /* *** check for duplicate work orders at this location   ****/
      /* *** bypass further processing of product if true       ****/
      /* ***********************************************************/
      if (SL0EW01.SL5FRWOC != 0) /* if wo order count fld gt 0*/
        SL0ES1K(); /* verify duplicate work orders for*/
                                   /* locat*/
        if (SLWREC.SLWERRSW == "Y")
          return;
        end
      end

      /* ***********************************************************/
      /* *** write out the previous wo item record when a new   ****/
      /* *** product is encountered                             ****/
      /* ***********************************************************/
      if (SL0EW01.SL0EWFL2 == "N" /* not the first record of cursor*/
       && SL0EW01.SL0EWFL3 == "N" /* not a duplicate wo*/
       && SL0EW01.SL0EWFL4 == "N") /* prev rec not already written*/
        if (SL0EW01.SL0EWFL5 == "Y") /* neg qnty switch is yes*/
          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback(); /* cancel prior updates to last comitt*/
        else
          SL9REC.SL9WOQTY = SL0EWA1.SL6ONHND - SL0EWA1.SL6PKRSV;
          if (SL9REC.SL9WOQTY > 0) /* qnty must be grtr than 0 for wo*/
            SL0ES1L(); /* add a wo item (prior to prod change)*/
            if (SLWREC.SLWERRSW == "Y")
              VGVar.handleSysLibraryErrors = 0;
              sysLib.rollback(); /* cancel prior updates to last comitt*/
              return;
            end
            if (SL0EW01.SL0EWSZC > 0)
              VGVar.handleSysLibraryErrors = 1;
              sysLib.commit();
              SLWREC.SLWCTR01 = SLWREC.SLWCTR01 + 1;
            else
              VGVar.handleSysLibraryErrors = 0;
              sysLib.rollback();
            end
            SL0EW01.SL0EWFL4 = "Y"; /* prev rec has been written*/
          else
            if (SL9REC.SL9WOQTY < 0) /* neg qty - zero is ok*/
              VGVar.handleSysLibraryErrors = 0;
              sysLib.rollback(); /* cancel prior updates to last comitt*/
            else
              if (SL0EW01.SL0EWSZC > 0)
                VGVar.handleSysLibraryErrors = 1;
                sysLib.commit();
                SLWREC.SLWCTR01 = SLWREC.SLWCTR01 + 1;
              else
                VGVar.handleSysLibraryErrors = 0;
                sysLib.rollback();
              end
              SL0EW01.SL0EWFL4 = "Y"; /* prev rec has been written*/
            end
          end
        end
        SL0EW01.SL0EWFL5 = "N"; /* move no to neg qnty sw*/
        SL0EW01.SL0EWFL6 = "N"; /* move no to item written sw*/
      end

      /* ***********************************************************/
      /* *** insert new product header and procede to fetch     ****/
      /* *** the subsequent matching products for item insert.  ****/
      /* *** In the process, collect data for new product       ****/
      /* ***********************************************************/

      if (SL0EW01.SL0EWFL3 == "N") /* not a duplicate wo*/
        SL0ES1N(); /* determine new work order number*/
        if (SLWREC.SLWERRSW == "Y")
          return;
        end
        SL0EWX1.SL0EWUSW = "N"; /* empty bulk update switch*/
        if (SL0EW01.SL0EWTAT[SLWIDX01] == "PR") /* processing*/
          SL0ES16(); /* determine "to" processing location*/
          if (SLWREC.SLWERRSW == "Y")
            return;
          end
        else
          if (SL0EW01.SL0EWTAT[SLWIDX01] == "BU") /* bulk*/
            SL5REC.XWHCD = SL0EM110.XWHCD;
            SL5REC.XARCD = SL0EW01.SL0EWTAC[SLWIDX01];
            while (SLWREC.SLWERRSW == "N"
             && SL0EWX1.SL0EWUSW == "N")
              SL0ES9M(); /* find empty to loc w/in row limit*/
            end
            if (SLWREC.SLWERRSW == "Y")
              return;
            end
          else
            SL0ES1M(); /* find empty to loc w/ to zone*/
            if (SLWREC.SLWERRSW == "Y")
              return;
            end
          end
          SL0EM110.SL8TOLC[SLWIDX01] = SL5REC.SL5LOCTN;
        end
        SL0ES1O(); /* insert wo header record*/
        if (SLWREC.SLWERRSW == "Y")
          return;
        end
        SL0ES1P(); /* update from location record*/
        if (SLWREC.SLWERRSW == "Y")
          return;
        end
        SL0ES1Q(); /* update to location record*/
        if (SLWREC.SLWERRSW == "Y")
          return;
        end
      end

      /* ***********************************************************/
      /* *** process the products that were same as prvious.    ****/
      /* *** if the sizes are the same then accumulate on hand  ****/
      /* *** and reserve quantities on the previous saved       ****/
      /* *** product.  if the curr/prev sizes are different then****/
      /* *** then insert the prev wo item record                ****/
      /* ***********************************************************/

    else
      if (SL0EW01.SL0EWFL3 == "N") /* not a duplicate wo*/
        if (VSYLOC02.SY5SZID == SL0EWA1.SY5SZID) /* sizes are equal*/
          SL0EWA1.SL6ONHND = SL0EWA1.SL6ONHND + VSYLOC02.SL6ONHND;
          SL0EWA1.SL6PKRSV = SL0EWA1.SL6PKRSV + VSYLOC02.SL6PKRSV;
        else
          SL9REC.SL9WOQTY = SL0EWA1.SL6ONHND - SL0EWA1.SL6PKRSV;
          if (SL9REC.SL9WOQTY < 0)
            SL0EW01.SL0EWFL5 = "Y"; /* move yes to neg qnty sw*/
          else
            SL0EW01.SL0EWFL6 = "Y"; /* move Y to item written sw*/
            if (SL9REC.SL9WOQTY > 0) /* add wo item if gt 0*/
              SL0ES1L(); /* add wo item to db*/
              if (SLWREC.SLWERRSW == "Y")
                VGVar.handleSysLibraryErrors = 0;
                sysLib.rollback(); /* cancel prior updates to last comitt*/
                return;
              end
            end
            SL0ES1Z(); /* size break processing*/
            if (SLWREC.SLWERRSW == "Y")
              VGVar.handleSysLibraryErrors = 0;
              sysLib.rollback(); /* cancel prior updates to last comitt*/
              return;
            end
          end
        end
      end
    end

    /* ***********************************************************/
    /* *** if dup wo- insert prior item if not already done,  ****/
    /* ***              move curr to prev, and fetch next     ****/
    /* *** if not dup wo- if prod/size are equal fetch next   ****/
    /* ***    else move curr to prev and fetch next           ****/
    /* ***********************************************************/

    if (SL0EW01.SL0EWFL3 == "Y") /* dup wo is yes*/
      if (SL0EW01.SL0EWFL2 == "N") /* first record is no*/
        if (SL0EW01.SL0EWFL4 == "N") /* prior record written is no*/
          if (VSYLOC02.SL2PALET != SL0EWA1.SL2PALET
           /* check if curr eq to prev*/
           || VSYLOC02.SL2CASE != SL0EWA1.SL2CASE
           || VSYLOC02.XGPCD != SL0EWA1.XGPCD
           || VSYLOC02.SY1STNBR != SL0EWA1.SY1STNBR
           || VSYLOC02.SY2CLRID != SL0EWA1.SY2CLRID
           || VSYLOC02.XDMCD != SL0EWA1.XDMCD
           || VSYLOC02.XQACD != SL0EWA1.XQACD
           || VSYLOC02.XOWCD != SL0EWA1.XOWCD
           || VSYLOC02.PC2INSEG != SL0EWA1.XSDCD
           || VSYLOC02.XEGCD != SL0EWA1.XSACD
           || VSYLOC02.XPGCD != SL0EWA1.XPGCD
           || VSYLOC02.XUMCD != SL0EWA1.XUMCD
           || VSYLOC02.XSLCD != SL0EWA1.XSLCD
           || VSYLOC02.SY1UNPCS != SL0EWA1.SY1UNPCS) /* units per case*/
            if (SL0EW01.SL0EWFL5 == "Y") /* neg qnty switch is yes*/
              VGVar.handleSysLibraryErrors = 0;
              sysLib.rollback(); /* cancel prior updates to last comitt*/
            else
              SL9REC.SL9WOQTY = SL0EWA1.SL6ONHND - SL0EWA1.SL6PKRSV;
              if (SL9REC.SL9WOQTY > 0)
                                   /* qnty must be grtr than 0 for wo*/
                SL0ES1L(); /* add a wo item (prior to prod change)*/
                if (SLWREC.SLWERRSW == "Y")
                  VGVar.handleSysLibraryErrors = 0;
                  sysLib.rollback(); /* cancel prior updates to last comitt*/
                  return;
                end
                if (SL0EW01.SL0EWSZC > 0)
                  VGVar.handleSysLibraryErrors = 1;
                  sysLib.commit();
                  SLWREC.SLWCTR01 = SLWREC.SLWCTR01 + 1;
                else
                  VGVar.handleSysLibraryErrors = 0;
                  sysLib.rollback();
                end
                SL0EWA1.SL6DATA = VSYLOC02.VSYLOC02-DATA;
                SL0EW01.SL0EWFL4 = "Y"; /* prior record written sw*/
              else
                if (SL9REC.SL9WOQTY < 0) /* neg qty - zero is ok*/
                  VGVar.handleSysLibraryErrors = 0;
                  sysLib.rollback(); /* cancel prior updates to last comitt*/
                else
                  if (SL0EW01.SL0EWSZC > 0)
                    VGVar.handleSysLibraryErrors = 1;
                    sysLib.commit();
                    SLWREC.SLWCTR01 = SLWREC.SLWCTR01 + 1;
                  else
                    VGVar.handleSysLibraryErrors = 0;
                    sysLib.rollback();
                  end
                  SL0EWA1.SL6DATA = VSYLOC02.VSYLOC02-DATA;
                  SL0EW01.SL0EWFL4 = "Y"; /* prior record written sw*/
                end
              end
            end
            SL0EW01.SL0EWFL5 = "N"; /* move no to neg qnty sw*/
            SL0EW01.SL0EWFL6 = "N"; /* move no to item write sw*/
          end
        end
      else
        SL0EWA1.SL6DATA = VSYLOC02.VSYLOC02-DATA;
      end
    else
      SL0EW01.SL0EWFL2 = "N"; /* first valid record sw*/
      SL0EW01.SL0EWFL4 = "N"; /* prior record written sw*/
      if (VSYLOC02.SL2PALET != SL0EWA1.SL2PALET /* check if curr eq to prev*/
       || VSYLOC02.SL2CASE != SL0EWA1.SL2CASE   
       || VSYLOC02.XGPCD != SL0EWA1.XGPCD       
       || VSYLOC02.SY1STNBR != SL0EWA1.SY1STNBR 
       || VSYLOC02.SY2CLRID != SL0EWA1.SY2CLRID 
       || VSYLOC02.XDMCD != SL0EWA1.XDMCD       
       || VSYLOC02.XQACD != SL0EWA1.XQACD       
       || VSYLOC02.XOWCD != SL0EWA1.XOWCD       
       || VSYLOC02.PC2INSEG != SL0EWA1.XSDCD    
       || VSYLOC02.XEGCD != SL0EWA1.XSACD       
       || VSYLOC02.XPGCD != SL0EWA1.XPGCD       
       || VSYLOC02.XUMCD != SL0EWA1.XUMCD       
       || VSYLOC02.XSLCD != SL0EWA1.XSLCD       
       || VSYLOC02.SY1UNPCS != SL0EWA1.SY1UNPCS /* units per case*/
       || VSYLOC02.SY5SZID != SL0EWA1.SY5SZID) 
        SL0EWA1.SL6DATA = VSYLOC02.VSYLOC02-DATA;
      end
    end

    /* ***********************************************************/
    /* *** check if product is setaside.  if true then display****/
    /* *** warning message and bypass check on same product   ****/
    /* ***********************************************************/
    if (VSYLOC02.SL6STASD > 0   /* check if product is setaside*/
     && SL0EW01.SL0EWFL3 == "N" /* not a duplicate wo*/
     && SLWREC.SLWFTMSW == "Y") /* first time setaside detected*/
      SLWREC.SLWFTMSW = "N"; /* prevent further setaside msgs*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1GF";
      SLWREC.SLWMSGNO = 41; /* warning for setaside*/
      SL0EM110.SL8TOLC[SLWIDX01] = " ";
      set SL0EM110.SL8FRAR[SLWIDX01] cursor, bold;
      set SL0EM110.SL8FRZN[SLWIDX01] bold;
      return;
    end

    TA5REC.TA5FNCCD = "R";
    TA5REC.TA5TSQIX = TA5REC.TA5TSQIX + 1;
    call "TA0050" (SL0EWB1, TA5REC); /* READ TSQ RECORD*/
    if (TA5REC.TA5RTNCD == 0
     || TA5REC.TA5RTNCD == 7)
      VSYLOC02.VSYLOC02-DATA = SL0EWB1.SL0EWXDL;
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1GG";
      SLWREC.SLWMSGNO = 01; /* error reserved status*/
      return;
    end
  end

   /* ***********************************************************/
   /* *** at end of cursor write out the last wo order       ****/
   /* *** item record                                        ****/
   /* ***********************************************************/

  if (SL0EW01.SL0EWFL3 == "Y") /* dup wo is yes*/
    if (SL0EW01.SL0EWFL4 == "N") /* prior record written is no*/
      if (SLWREC.SLWCTR01 > 0)
        if (SL0EW01.SL0EWFL5 == "Y") /* neg qnty switch is yes*/
          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback(); /* cancel prior updates to last comitt*/
        else
          SL9REC.SL9WOQTY = SL0EWA1.SL6ONHND - SL0EWA1.SL6PKRSV;
          if (SL9REC.SL9WOQTY > 0) /* qnty must be grtr than 0 for wo*/
            SL0ES1L(); /* add a wo item (prior to prod change)*/
            if (SLWREC.SLWERRSW == "Y")
              VGVar.handleSysLibraryErrors = 0;
              sysLib.rollback(); /* cancel prior updates to last comitt*/
              return;
            end
            if (SL0EW01.SL0EWSZC > 0)
              VGVar.handleSysLibraryErrors = 1;
              sysLib.commit();
            else
              VGVar.handleSysLibraryErrors = 0;
              sysLib.rollback();
            end
          else
            if (SL9REC.SL9WOQTY < 0) /* neg qty - zero is ok*/
              VGVar.handleSysLibraryErrors = 0;
              sysLib.rollback(); /* cancel prior updates to last comitt*/
            else
              if (SL0EW01.SL0EWSZC > 0)
                VGVar.handleSysLibraryErrors = 1;
                sysLib.commit();
              else
                VGVar.handleSysLibraryErrors = 0;
                sysLib.rollback();
              end
            end
          end
        end
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S1GH";
        SLWREC.SLWMSGNO = 0042;
        set SL0EM110.SL8FRAR[SLWIDX01] cursor, bold;
        set SL0EM110.SL8FRZN[SLWIDX01] bold;
        set SL0EM110.SL8FRLC[SLWIDX01] bold;
        return;
      end
    end
  else
    if (SL0EW01.SL0EWFL5 == "Y") /* neg qnty switch is yes*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* cancel prior updates to last comitt*/
      if (SLWREC.SLWCTR01 == 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S1GI";
        SLWREC.SLWMSGNO = 0138;
        set SL0EM110.SL8FRAR[SLWIDX01] cursor, bold;
        set SL0EM110.SL8FRZN[SLWIDX01] bold;
        set SL0EM110.SL8FRLC[SLWIDX01] bold;
        return;
      end
    else
      SL9REC.SL9WOQTY = SL0EWA1.SL6ONHND - SL0EWA1.SL6PKRSV;
      if (SL9REC.SL9WOQTY > 0) /* qnty must be grtr than 0 for wo*/
        SL0ES1L(); /* add a wo item (prior to prod change)*/
        if (SLWREC.SLWERRSW == "Y")
          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback(); /* cancel prior updates to last comitt*/
          return;
        end
        if (SL0EW01.SL0EWSZC > 0)
          VGVar.handleSysLibraryErrors = 1;
          sysLib.commit();
        else
          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback();
        end
      else
        if (SL9REC.SL9WOQTY < 0) /* neg qty - zero is ok*/
          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback(); /* cancel prior updates to last comitt*/
        else
          if (SL0EW01.SL0EWSZC > 0)
            VGVar.handleSysLibraryErrors = 1;
            sysLib.commit();
          else
            VGVar.handleSysLibraryErrors = 0;
            sysLib.rollback();
          end
        end
      end
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES1G

// update work orders option # 3
Function SL0ES1H()

   /* ***********************************************************/
   /* *** SL0ES1H                                            ****/
   /* *** insert work order header/item records (option 3)   ****/
   /* *** if FAREA/FZONE/FLOCATION/TAREA/TZONE/TLOCAT        ****/
   /* ***********************************************************/

   /* ***********************************************************/
   /* *** Verify from location                               ****/
   /* ***********************************************************/

  SL0EWX1.SL0EWUSW = "N";

  SL0ES1I(); /* <=== verify from location*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ***********************************************************/
   /* *** Verify to location                                 ****/
   /* ***********************************************************/

  SL0ES1W(); /* <=== verify to location*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ***********************************************************/
   /* *** obtain all products from product/location table    ****/
   /* *** for the to location                                ****/
   /* ***********************************************************/

  if (SL0EWX1.SL0EWMPF == "N") /* verified to loc mult-prod flag*/

    SL0ES7R(); /* obtain a set of products*/

    if (SLWREC.SLWERRSW == "Y")
      return;
    end

  end

   /* ***********************************************************/
   /* *** obtain all products from product/location table    ****/
   /* *** for the from location                              ****/
   /* ***********************************************************/

  SL0ES1J(); /* obtain a set of products*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ***********************************************************/
   /* *** load products to the tsq for further processing    ****/
   /* *** and read the first tsq stored record               ****/
   /* ***********************************************************/

  set TA5REC empty;
  set SL0EWB1 empty;

  SL0EWB1.SL0EWXLL = 134;
  TA5REC.TA5APPID = "SL0E";
  TA5REC.TA5FNCCD = "A";

  SL0EWA1.SL6DATA = VSYLOC02.VSYLOC02-DATA;
    /* save the first cursor product*/

  if (VSYLOC02.XWHCD == "02" /* Greenland*/
   || VSYLOC02.XWHCD == "04" /* or Memphis Footwear*/
   || VSYLOC02.XWHCD == "07" /* Wilsonville*/
   || VSYLOC02.XWHCD == "25" /* or NSG*/
   || VSYLOC02.XWHCD == "51" /* or Memphis Apparel*/
   || VSYLOC02.XWHCD == "42") /* or Canada*/

    if (SL0EWX1.SL0EWMPF == "N"                /* verified to loc mult-prod flag*/
     && VSYLOC02.XGPCD == SL0EWCP1.XGPCD       /* same prod*/
     && VSYLOC02.SY1STNBR == SL0EWCP1.SY1STNBR 
     && VSYLOC02.SY2CLRID == SL0EWCP1.SY2CLRID 
     && VSYLOC02.XDMCD == SL0EWCP1.XDMCD       
     && VSYLOC02.XQACD == SL0EWCP1.XQACD       
     && VSYLOC02.XOWCD == SL0EWCP1.XOWCD       
     && VSYLOC02.PC2INSEG == SL0EWCP1.XSDCD    
     && VSYLOC02.XEGCD == SL0EWCP1.XSACD       
     && VSYLOC02.XPGCD == SL0EWCP1.XPGCD       
     && VSYLOC02.XUMCD == SL0EWCP1.XUMCD       
     && VSYLOC02.XSLCD == SL0EWCP1.XSLCD       
     && VSYLOC02.SY1UNPCS != SL0EWCP1.SY1UNPCS /* units per case*/
     && SL0EW01.SL0EWTAT[SLWIDX01] != "PR")    /* to area not processing*/

      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1HA";
      SLWREC.SLWMSGNO = 0226; /* no match units per case*/

      set SL0EM110.SL8TOAR[SLWIDX01] cursor, bold;
      set SL0EM110.SL8TOZN[SLWIDX01] bold;
      set SL0EM110.SL8TOLC[SLWIDX01] bold;

      return;

    end

  end

   /* ************************************************************/
   /* *** determine  if more than one product in the cursor   ****/
   /* ************************************************************/

  SL0EW01.SL0EWITC = 1; /* set counter for first fetched record*/
  SL0EW01.SL0EWSPA = 0; /* set saved prod sas id to zero*/

  while (SQLCA.VAGen_SQLCODE != +100)

    if (VSYLOC02.INASAID > 0) /* sas exists*/

      if (SL0EW01.SL0EWSPA == 0) /* sas not saved*/

        SL0EW01.SL0EWSPA = VSYLOC02.INASAID; /* save sas id*/

      else

        if (VSYLOC02.INASAID != 62 /* whse 02 prod sas id*/
         || VSYLOC02.INASAID != 64 /* whse 04 prod sas id*/
         || VSYLOC02.INASAID != 65 /* whse 07 prod sas id*/
         || VSYLOC02.INASAID != 68 /* whse 25 prod sas id*/
         || VSYLOC02.INASAID != 69 /* whse 51 prod sas id*/
         || VSYLOC02.INASAID != 103) /* Canada prod sas id*/

          SL0EW01.SL0EWSPA = VSYLOC02.INASAID; /* save sas id*/

        end

      end

    end

    SL0EWB1.SL0EWXDL = VSYLOC02.VSYLOC02-DATA;

    if (SL0EWA1.XWHCD == "02" /* Greenland*/
     || SL0EWA1.XWHCD == "04" /* or Memphis Footwear*/
     || SL0EWA1.XWHCD == "07" /* or Wilsonville*/
     || SL0EWA1.XWHCD == "25" /* or NSG*/
     || SL0EWA1.XWHCD == "51" /* or Memphis Apparel*/
     || SL0EWA1.XWHCD == "42") /* or Canada*/

      if (SL0EWA1.SL6ONHND > SL0EWA1.SL6PKRSV) /* On hand GT reserve*/

        SL0EW01.SL9WOQTY = SL0EW01.SL9WOQTY + SL0EWA1.SL6ONHND; /* On hand*/
        SL0EW01.SL9WOQTY = SL0EW01.SL9WOQTY - SL0EWA1.SL6PKRSV; /* Reserve*/

      end

    end

    call "TA0050" (SL0EWB1, TA5REC); /* move cursor prod to tsq*/

    if (TA5REC.TA5RTNCD != 0)

      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1HB";
      SLWREC.SLWMSGNO = 01; /* severe error*/

      return;

    end

    SL0ES1R(); /* fetch next cursor record for tsq*/

    if (SLWREC.SLWERRSW == "Y")
      return;
    end

    if (SL0EWA1.XWHCD == "02" /* Greenland*/
     || SL0EWA1.XWHCD == "04" /* or Memphis Footwear*/
     || SL0EWA1.XWHCD == "07" /* or Wilsonville*/
     || SL0EWA1.XWHCD == "25" /* or NSG*/
     || SL0EWA1.XWHCD == "51" /* or Memphis Apparel*/
     || SL0EWA1.XWHCD == "42") /* or Canada*/

      if (SQLCA.VAGen_SQLCODE == +100     /* End of cursor*/
       || VSYLOC02.XGPCD != SL0EWA1.XGPCD /* or product changed*/
       || VSYLOC02.SY1STNBR != SL0EWA1.SY1STNBR
       || VSYLOC02.SY2CLRID != SL0EWA1.SY2CLRID
       || VSYLOC02.XDMCD != SL0EWA1.XDMCD 
       || VSYLOC02.XQACD != SL0EWA1.XQACD 
       || VSYLOC02.XOWCD != SL0EWA1.XOWCD 
       || VSYLOC02.PC2INSEG != SL0EWA1.XSDCD
       || VSYLOC02.XEGCD != SL0EWA1.XSACD 
       || VSYLOC02.XPGCD != SL0EWA1.XPGCD 
       || VSYLOC02.XUMCD != SL0EWA1.XUMCD 
       || VSYLOC02.XSLCD != SL0EWA1.XSLCD 
       || VSYLOC02.SY1UNPCS != SL0EWA1.SY1UNPCS)

        SL0EW01.SL0EW-NBR-CARTONS = 0;
        if (SL0EWA1.SY1UNPCS > 0) /* units per case gt zero*/

          SL0EW01.SL0EW-NBR-CARTONS = SL0EW01.SL9WOQTY / SL0EWA1.SY1UNPCS;
          SL0EW01.SL9WOQTY = SL0EW01.SL9WOQTY % SL0EWA1.SY1UNPCS;
          SL0EW01.SL-WO-NBR-OF-LABL = SL0EW01.SL-WO-NBR-OF-LABL +           SL0EW01.SL0EW-NBR-CARTONS;

          if (SL0EW01.SL9WOQTY != 0) /* Remainder not zero*/

            SL0EW01.SL-WO-NBR-OF-LABL = SL0EW01.SL-WO-NBR-OF-LABL + 1;
            SL0EW01.SL9WOQTY = 0; /* Reset quantity*/

            if (SLWREC.SLWIDX01 != SLWREC.SLWLINPP) /* New line error*/

              SLWREC.SLWLINPP = SLWREC.SLWIDX01; /* Line in error*/

              SLWREC.SLWERRSW = "Y"; /* Error switch*/
              SLWREC.XXXLOCID = "S1HC"; /* Location*/
              SLWREC.SLWMSGNO = 414; /* Odd units/case*/

              set SL0EM110.SL8FRAR[SLWIDX01] cursor, bold, skip;
              set SL0EM110.SL8FRZN[SLWIDX01] bold, skip;
              set SL0EM110.SL8FRLC[SLWIDX01] bold, skip;
              set SL0EM110.SL2PALET[SLWIDX01] bold, skip;
              set SL0EM110.SL2CASE[SLWIDX01] bold, skip;

              return;

            end

          end

        end

      end

    end

    if (VSYLOC02.XGPCD != SL0EWA1.XGPCD       /* check if prod/loc changes*/
     || VSYLOC02.SY1STNBR != SL0EWA1.SY1STNBR 
     || VSYLOC02.SY2CLRID != SL0EWA1.SY2CLRID 
     || VSYLOC02.XDMCD != SL0EWA1.XDMCD       
     || VSYLOC02.XQACD != SL0EWA1.XQACD       
     || VSYLOC02.XOWCD != SL0EWA1.XOWCD       
     || VSYLOC02.PC2INSEG != SL0EWA1.XSDCD    
     || VSYLOC02.XEGCD != SL0EWA1.XSACD       
     || VSYLOC02.XPGCD != SL0EWA1.XPGCD       
     || VSYLOC02.XUMCD != SL0EWA1.XUMCD       
     || VSYLOC02.XSLCD != SL0EWA1.XSLCD       
     || VSYLOC02.SY1UNPCS != SL0EWA1.SY1UNPCS /* units per case*/
     || VSYLOC02.SY5SZID != SL0EWA1.SY5SZID)  /* if sizes don't match*/

      SL0EW01.SL0EWITC = SL0EW01.SL0EWITC + 1; /* increment item counter*/

    end

    if (SL0EW01.SL0EWITC > 1               /* more than one item counter*/
     && SL0EWX1.SL0EWMPF == "N"            /* verified to loc mult-prod flag*/
     && SL0EW01.SL0EWTAT[SLWIDX01] != "PR" /* to area not processing*/
     && SL0EW01.SL0EWFAT[SLWIDX01] != "RE") /* from area not receiving*/

      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1HD";
      SLWREC.SLWMSGNO = 0174; /* gt 1 item for no loc*/

      set SL0EM110.SL8TOAR[SLWIDX01] cursor, bold;
      set SL0EM110.SL8TOZN[SLWIDX01] bold;
      set SL0EM110.SL8TOLC[SLWIDX01] bold;

      return;

    end

    if (SL0EW01.SL0EWITC > 1               /* more than one item counter*/
     && SL0EWX1.SL0EWMPF == "N"            /* verified to loc mult-prod flag*/
     && SL0EW01.SL0EWTAT[SLWIDX01] == "PR" /* to area not processing*/
     && SL0EW01.SL0EWTZP[SLWIDX01] == "FU" /* to zone full case*/
     && SL0EW01.SL0EWSPA > 0)              /* setaside exists*/

      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1HE";
      SLWREC.SLWMSGNO = 0174; /* gt 1 item for no loc*/

      set SL0EM110.SL8TOAR[SLWIDX01] cursor, bold;
      set SL0EM110.SL8TOZN[SLWIDX01] bold;
      set SL0EM110.SL8TOLC[SLWIDX01] bold;

      return;

    end

    if (VSYLOC02.XWHCD == "02" /* Greenland*/
     || VSYLOC02.XWHCD == "04" /* or Memphis Footwear*/
     || VSYLOC02.XWHCD == "07" /* or Wilsonville*/
     || VSYLOC02.XWHCD == "25" /* or NSG*/
     || VSYLOC02.XWHCD == "51" /* or Memphis Apparel*/
     || VSYLOC02.XWHCD == "42") /* or Canada*/

      if (SL0EW01.SL0EWITC > 1                  /* more than one item counter*/
       && VSYLOC02.XGPCD == SL0EWA1.XGPCD       /* same prod*/
       && VSYLOC02.SY1STNBR == SL0EWA1.SY1STNBR 
       && VSYLOC02.SY2CLRID == SL0EWA1.SY2CLRID 
       && VSYLOC02.XDMCD == SL0EWA1.XDMCD       
       && VSYLOC02.XQACD == SL0EWA1.XQACD       
       && VSYLOC02.XOWCD == SL0EWA1.XOWCD       
       && VSYLOC02.PC2INSEG == SL0EWA1.XSDCD    
       && VSYLOC02.XEGCD == SL0EWA1.XSACD       
       && VSYLOC02.XPGCD == SL0EWA1.XPGCD       
       && VSYLOC02.XUMCD == SL0EWA1.XUMCD       
       && VSYLOC02.XSLCD == SL0EWA1.XSLCD       
       && VSYLOC02.SY1UNPCS != SL0EWA1.SY1UNPCS /* units per case*/
       && SL0EW01.SL0EWTAT[SLWIDX01] != "PR")   /* to area not processing*/

        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S1HF";
        SLWREC.SLWMSGNO = 0226; /* no match units per case*/

        set SL0EM110.SL8TOAR[SLWIDX01] cursor, bold;
        set SL0EM110.SL8TOZN[SLWIDX01] bold;
        set SL0EM110.SL8TOLC[SLWIDX01] bold;

        return;

      end

    end

    if (SL0EW01.SL0EWSPA > 0) /* sas exists*/

      if (SL0EW01.SL0EWTAT == "PR") /* to area processing*/

        if (SL5REC.YLTCD == "22") /* to loc full case static*/

          if (SL0EM110.XWHCD == "02" /* whse 02*/
           || SL0EM110.XWHCD == "04" /* whse 04*/
           || SL0EM110.XWHCD == "07" /* whse 07*/
           || SL0EM110.XWHCD == "25" /* whse 25*/
           || SL0EM110.XWHCD == "51" /* whse 51*/
           || SL0EM110.XWHCD == "42") /* Canada*/

            if (SL0EW01.SL0EWSPA == 62 /* whse 02 prod sas*/
             || SL0EW01.SL0EWSPA == 64 /* whse 04 prod sas*/
             || SL0EW01.SL0EWSPA == 65 /* whse 07 prod sas*/
             || SL0EW01.SL0EWSPA == 68 /* whse 25 prod sas*/
             || SL0EW01.SL0EWSPA == 69 /* whse 51 prod sas*/
             || SL0EW01.SL0EWSPA == 103) /* Canada prod sas*/

              if (SL5REC.YLSCD != "01") /* loc status not empty*/

                SLWREC.SLWERRSW = "Y";
                SLWREC.XXXLOCID = "S1HH";
                SLWREC.SLWMSGNO = 195; /* loc must be empty*/

                return;

              end

            else

              SLWREC.SLWERRSW = "Y";
              SLWREC.XXXLOCID = "S1HI";
              SLWREC.SLWMSGNO = 194; /* can not move product*/

              return;

            end

          else

            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "S1HJ";
            SLWREC.SLWMSGNO = 194; /* can not move product*/

            return;

          end

        else

          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "S1HK";
          SLWREC.SLWMSGNO = 194; /* can not move product*/

          return;

        end

      end

    end

  end

  SLWREC.SLWLINPP = 0; /* Units/case line error*/

  TA5REC.TA5FNCCD = "R";
  TA5REC.TA5TSQIX = 1;

  call "TA0050" (SL0EWB1, TA5REC); /* READ TSQ RECORD*/

  if (TA5REC.TA5RTNCD != 0)

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1HL";
    SLWREC.SLWMSGNO = 01; /* error reserved status*/

    return;

  else

    VSYLOC02.VSYLOC02-DATA = SL0EWB1.SL0EWXDL;

  end

   /* ***********************************************************/
   /* *** Insert work order header/items for each product    ****/
   /* *** selected above.   This function will also bypass   ****/
   /* *** duplicate work orders and pass a warning message   ****/
   /* *** for prod/locat records whose setaside qnty > 0.    ****/
   /* *** If the fetched product numbers are equal to prior  ****/
   /* *** product number then insert an item wo rec. If the  ****/
   /* *** product and size are equal to prior, then accum    ****/
   /* *** the onhand and reserve quantities to print when a  ****/
   /* *** product number breaks. Whenever a product break    ****/
   /* *** occurs insert a header wo record for the new       ****/
   /* *** product.                                           ****/
   /* ***********************************************************/

  SL0EW01.SL0EWFL2 = "Y"; /* this set first rec sw to yes*/
  SL0EW01.SL0EWFL3 = "N"; /* this set dup wo sw to no*/
  SL0EW01.SL0EWFL4 = "N"; /* this set prior rec write sw to no*/
  SL0EW01.SL0EWFL5 = "N"; /* this set neg qnty/size sw to no*/
  SL0EW01.SL0EWFL6 = "N"; /* this set item written sw  to no*/
  SLWREC.SLWSEXSW = "N";

  SLWREC.SLWCTR01 = 0;
  SL0EW01.SL0EWSZC = 0; /* zero out product size counter*/

  set SL0EWA1 empty; /* spaces out previous prod/loc rec*/

   /* ***********************************************************/
   /* *** read all products in tsq selected above            ****/
   /* ***********************************************************/

  while (TA5REC.TA5RTNCD != 7)

    /* ***********************************************************/
    /* *** check for break in product numbers (xgpcd to xslcd)****/
    /* ***********************************************************/

    if (VSYLOC02.SL2PALET != SL0EWA1.SL2PALET /* curr eq to prev*/
     || VSYLOC02.SL2CASE != SL0EWA1.SL2CASE   
     || VSYLOC02.XGPCD != SL0EWA1.XGPCD       
     || VSYLOC02.SY1STNBR != SL0EWA1.SY1STNBR 
     || VSYLOC02.SY2CLRID != SL0EWA1.SY2CLRID 
     || VSYLOC02.XDMCD != SL0EWA1.XDMCD       
     || VSYLOC02.XQACD != SL0EWA1.XQACD       
     || VSYLOC02.XOWCD != SL0EWA1.XOWCD       
     || VSYLOC02.PC2INSEG != SL0EWA1.XSDCD    
     || VSYLOC02.XEGCD != SL0EWA1.XSACD       
     || VSYLOC02.XPGCD != SL0EWA1.XPGCD       
     || VSYLOC02.XUMCD != SL0EWA1.XUMCD       
     || VSYLOC02.XSLCD != SL0EWA1.XSLCD       
     || VSYLOC02.SY1UNPCS != SL0EWA1.SY1UNPCS) /* units per case*/

      /* ***********************************************************/
      /* *** initialize product size assignment tbl flds        ****/
      /* ***********************************************************/
      SL0ESZZ(); /* init. sz/loc tbl flds*/
      SLWREC.SLWREM01 = 0; /* counter of prod. assign's*/

      SL0EW01.SL0EWFL3 = "N"; /* reset the dup wo switch*/
      /* ***********************************************************/
      /* *** check for duplicate work orders at this location   ****/
      /* *** bypass further processing of product if true       ****/
      /* ***********************************************************/
      if (SL0EW01.SL5FRWOC != 0) /* if wo order count fld gt 0*/
        SL0ES1K(); /* verify duplicate work orders for*/
                                   /* locat*/
        if (SLWREC.SLWERRSW == "Y")
          return;
        end
      end

      /* ***********************************************************/
      /* *** write out the previous wo item record when a new   ****/
      /* *** product is encountered                             ****/
      /* ***********************************************************/
      if (SL0EW01.SL0EWFL2 == "N" /* not the first record of cursor*/
       && SL0EW01.SL0EWFL3 == "N" /* not a duplicate wo*/
       && SL0EW01.SL0EWFL4 == "N") /* prev rec not already written*/
        if (SL0EW01.SL0EWFL5 == "Y" /* neg qnty switch is yes*/
         || SL0EW01.SL0EWMPF == "N") /* more than one prod in to loc*/
          SL0EW01.SL0EWSZC = 0; /* zero out size counter*/
          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback(); /* cancel prior updates to last comitt*/
        else
          SL9REC.SL9WOQTY = SL0EWA1.SL6ONHND - SL0EWA1.SL6PKRSV;
          if (SL9REC.SL9WOQTY > 0) /* qnty must be grtr than 0 for wo*/
            SL0ES1L(); /* add a wo item (prior to prod change)*/
            if (SLWREC.SLWERRSW == "Y")
              VGVar.handleSysLibraryErrors = 0;
              sysLib.rollback(); /* cancel prior updates to last comitt*/
              return;
            end
            if (SL0EW01.SL0EWSZC > 0)
              VGVar.handleSysLibraryErrors = 1;
              sysLib.commit();
              SLWREC.SLWCTR01 = SLWREC.SLWCTR01 + 1;
            else
              VGVar.handleSysLibraryErrors = 0;
              sysLib.rollback();
            end
            SL0EW01.SL0EWFL4 = "Y";
          else
            if (SL9REC.SL9WOQTY < 0) /* neg qty - zero ok*/
              VGVar.handleSysLibraryErrors = 0;
              sysLib.rollback(); /* cancel prior updates to last comit*/
            else
              if (SL0EW01.SL0EWSZC > 0)
                VGVar.handleSysLibraryErrors = 1;
                sysLib.commit();
                SLWREC.SLWCTR01 = SLWREC.SLWCTR01 + 1;
              else
                VGVar.handleSysLibraryErrors = 0;
                sysLib.rollback();
              end
              SL0EW01.SL0EWFL4 = "Y";
            end
          end
        end
        SL0EW01.SL0EWFL5 = "N"; /* move no to neg qnty sw*/
        SL0EW01.SL0EWFL6 = "N"; /* move no to item written sw*/
      end

      /* ***********************************************************/
      /* *** insert new product header and procede to fetch     ****/
      /* *** the subsequent matching products for item insert.  ****/
      /* *** In the process, collect data for new product       ****/
      /* ***********************************************************/

      if (SL0EW01.SL0EWFL3 == "N") /* not a duplicate wo*/
        SL0ES1N(); /* determine new work order number*/
        if (SLWREC.SLWERRSW == "Y")
          return;
        end
        if (SL0EW01.SL0EWTAT[SLWIDX01] == "PR") /* processing*/
          if (SL0EW01.SL0EWTZP[SLWIDX01] == "PI") /* picking*/
            SL0ES1U(); /* get to sz/loc from prod/assign*/
            SL0EM110.SL8TOZN[SLWIDX01] = SL0EW01.SL0EWSZN;
            SL0EM110.SL8TOLC[SLWIDX01] = SL0EW01.SL0EWSLC;
            if (SLWREC.SLWERRSW == "Y")
              return;
            end
            SL7REC.XARCD = SL0EW01.SL0EWSAR;
            SL7REC.SL4ZONE = SL0EW01.SL0EWSZN;
            SL7REC.SL5LOCTN = SL0EW01.SL0EWSLC;
          end
        end
        SL0ES1O(); /* insert wo header record*/
        if (SLWREC.SLWERRSW == "Y")
          return;
        end
        SL0ES1P(); /* update from location record*/
        if (SLWREC.SLWERRSW == "Y")
          return;
        end
        SL0ES1Q(); /* update to location record*/
        if (SLWREC.SLWERRSW == "Y")
          return;
        end
      end

      /* ***********************************************************/
      /* *** process the products that were same as prvious.    ****/
      /* *** if the sizes are the same then accumulate on hand  ****/
      /* *** and reserve quantities on the previous saved       ****/
      /* *** product.  if the curr/prev sizes are different then****/
      /* *** then insert the prev wo item record                ****/
      /* ***********************************************************/

    else
      if (SL0EW01.SL0EWFL3 == "N") /* not a duplicate wo*/
        if (VSYLOC02.SY5SZID == SL0EWA1.SY5SZID) /* sizes are equal*/
          SL0EWA1.SL6ONHND = SL0EWA1.SL6ONHND + VSYLOC02.SL6ONHND;
          SL0EWA1.SL6PKRSV = SL0EWA1.SL6PKRSV + VSYLOC02.SL6PKRSV;
        else
          SL9REC.SL9WOQTY = SL0EWA1.SL6ONHND - SL0EWA1.SL6PKRSV;
          if (SL9REC.SL9WOQTY < 0)
            SL0EW01.SL0EWFL5 = "Y"; /* move yes to neg qnty sw*/
          else
            SL0EW01.SL0EWFL6 = "Y"; /* move y to item written sw*/
            if (SL9REC.SL9WOQTY > 0) /* if qnty gt 0 then write item rec*/
              SL0ES1L(); /* add wo item to db*/
              if (SLWREC.SLWERRSW == "Y")
                VGVar.handleSysLibraryErrors = 0;
                sysLib.rollback(); /* cancel prior updates to last comitt*/
                return;
              end
            end
            SL0ES1Z(); /* size break processing*/
            if (SLWREC.SLWERRSW == "Y")
              VGVar.handleSysLibraryErrors = 0;
              sysLib.rollback(); /* cancel prior updates to last comitt*/
              return;
            end
          end
        end
      end
    end

    /* ***********************************************************/
    /* *** if dup wo- insert prior item if not already done,  ****/
    /* ***              move curr to prev, and fetch next     ****/
    /* *** if not dup wo- if prod/size are equal fetch next   ****/
    /* ***    else move curr to prev and fetch next           ****/
    /* ***********************************************************/

    if (SL0EW01.SL0EWFL3 == "Y") /* dup wo is yes*/
      if (SL0EW01.SL0EWFL2 == "N") /* first record is no*/
        if (SL0EW01.SL0EWFL4 == "N") /* prior record written is no*/
          if (VSYLOC02.SL2PALET != SL0EWA1.SL2PALET /* curr eq to prev*/
           || VSYLOC02.SL2CASE != SL0EWA1.SL2CASE   
           || VSYLOC02.XGPCD != SL0EWA1.XGPCD       
           || VSYLOC02.SY1STNBR != SL0EWA1.SY1STNBR 
           || VSYLOC02.SY2CLRID != SL0EWA1.SY2CLRID 
           || VSYLOC02.XDMCD != SL0EWA1.XDMCD       
           || VSYLOC02.XQACD != SL0EWA1.XQACD       
           || VSYLOC02.XOWCD != SL0EWA1.XOWCD       
           || VSYLOC02.PC2INSEG != SL0EWA1.XSDCD    
           || VSYLOC02.XEGCD != SL0EWA1.XSACD       
           || VSYLOC02.XPGCD != SL0EWA1.XPGCD       
           || VSYLOC02.XUMCD != SL0EWA1.XUMCD       
           || VSYLOC02.XSLCD != SL0EWA1.XSLCD       
           || VSYLOC02.XSLCD != SL0EWA1.XSLCD)     
            if (SL0EW01.SL0EWFL5 == "Y") /* neg qnty switch is yes*/
              VGVar.handleSysLibraryErrors = 0;
              sysLib.rollback(); /* cancel prior updates to last comitt*/
            else
              SL9REC.SL9WOQTY = SL0EWA1.SL6ONHND - SL0EWA1.SL6PKRSV;
              if (SL9REC.SL9WOQTY > 0)
                                   /* qnty must be grtr than 0 for wo*/
                SL0ES1L(); /* add a wo item (prior to prod change)*/
                if (SLWREC.SLWERRSW == "Y")
                  VGVar.handleSysLibraryErrors = 0;
                  sysLib.rollback(); /* cancel prior updates to last comitt*/
                  return;
                end
                if (SL0EW01.SL0EWSZC > 0)
                  VGVar.handleSysLibraryErrors = 1;
                  sysLib.commit();
                  SLWREC.SLWCTR01 = SLWREC.SLWCTR01 + 1;
                else
                  VGVar.handleSysLibraryErrors = 0;
                  sysLib.rollback();
                end
                SL0EWA1.SL6DATA = VSYLOC02.VSYLOC02-DATA;
                SL0EW01.SL0EWFL4 = "Y"; /* prior record written sw*/
              else
                if (SL9REC.SL9WOQTY < 0) /* neg qty - zero ok*/
                  VGVar.handleSysLibraryErrors = 0;
                  sysLib.rollback(); /* cancel prior updates to last comit*/
                else
                  if (SL0EW01.SL0EWSZC > 0)
                    VGVar.handleSysLibraryErrors = 1;
                    sysLib.commit();
                    SLWREC.SLWCTR01 = SLWREC.SLWCTR01 + 1;
                  else
                    VGVar.handleSysLibraryErrors = 0;
                    sysLib.rollback();
                  end
                  SL0EWA1.SL6DATA = VSYLOC02.VSYLOC02-DATA;
                  SL0EW01.SL0EWFL4 = "Y"; /* prior record written sw*/
                end
              end
            end
            SL0EW01.SL0EWFL5 = "N"; /* move no to neg qnty sw*/
            SL0EW01.SL0EWFL6 = "N"; /* move n to item written sw*/
          end
        end
      else
        SL0EWA1.SL6DATA = VSYLOC02.VSYLOC02-DATA;
      end
    else
      SL0EW01.SL0EWFL2 = "N"; /* first valid record sw*/
      SL0EW01.SL0EWFL4 = "N"; /* prior record written sw*/
      if (VSYLOC02.SL2PALET != SL0EWA1.SL2PALET /* curr eq to prev*/
       || VSYLOC02.SL2CASE != SL0EWA1.SL2CASE   
       || VSYLOC02.XGPCD != SL0EWA1.XGPCD       
       || VSYLOC02.SY1STNBR != SL0EWA1.SY1STNBR 
       || VSYLOC02.SY2CLRID != SL0EWA1.SY2CLRID 
       || VSYLOC02.XDMCD != SL0EWA1.XDMCD       
       || VSYLOC02.XQACD != SL0EWA1.XQACD       
       || VSYLOC02.XOWCD != SL0EWA1.XOWCD       
       || VSYLOC02.PC2INSEG != SL0EWA1.XSDCD    
       || VSYLOC02.XEGCD != SL0EWA1.XSACD       
       || VSYLOC02.XPGCD != SL0EWA1.XPGCD       
       || VSYLOC02.XUMCD != SL0EWA1.XUMCD       
       || VSYLOC02.XSLCD != SL0EWA1.XSLCD       
       || VSYLOC02.XSLCD != SL0EWA1.XSLCD       
       || VSYLOC02.SY5SZID != SL0EWA1.SY5SZID) 
        SL0EWA1.SL6DATA = VSYLOC02.VSYLOC02-DATA;
      end
    end

    /* ***********************************************************/
    /* *** check if product is setaside.  if true then display****/
    /* *** warning message and bypass check on same product   ****/
    /* ***********************************************************/
    if (VSYLOC02.SL6STASD > 0   /* check if product is setaside*/
     && SL0EW01.SL0EWFL3 == "N" /* not a duplicate wo*/
     && SLWREC.SLWFTMSW == "Y") /* first time setaside detected*/
      SLWREC.SLWFTMSW = "N"; /* prevent further setaside msgs*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1HM";
      SLWREC.SLWMSGNO = 41; /* warning for setaside*/
      set SL0EM110.SL8FRAR[SLWIDX01] cursor, bold;
      set SL0EM110.SL8FRZN[SLWIDX01] bold;
      set SL0EM110.SL8FRLC[SLWIDX01] bold;
      return;
    end

    TA5REC.TA5FNCCD = "R";
    TA5REC.TA5TSQIX = TA5REC.TA5TSQIX + 1;
    call "TA0050" (SL0EWB1, TA5REC); /* READ TSQ RECORD*/
    if (TA5REC.TA5RTNCD == 0
     || TA5REC.TA5RTNCD == 7)
      VSYLOC02.VSYLOC02-DATA = SL0EWB1.SL0EWXDL;
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1HN";
      SLWREC.SLWMSGNO = 01; /* error reserved status*/
      return;
    end
  end

   /* ***********************************************************/
   /* *** at end of cursor write out the last wo order       ****/
   /* *** item record                                        ****/
   /* ***********************************************************/

  if (SL0EW01.SL0EWFL3 == "Y") /* dup wo is yes*/
    if (SL0EW01.SL0EWFL4 == "N") /* prior record written is no*/
      if (SLWREC.SLWCTR01 > 0)
        if (SL0EW01.SL0EWFL5 == "Y") /* neg qnty switch is yes*/
          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback(); /* cancel prior updates to last comitt*/
        else
          SL9REC.SL9WOQTY = SL0EWA1.SL6ONHND - SL0EWA1.SL6PKRSV;
          if (SL9REC.SL9WOQTY > 0) /* qnty must be grtr than 0 for wo*/
            SL0ES1L(); /* add a wo item (prior to prod change)*/
            if (SLWREC.SLWERRSW == "Y")
              VGVar.handleSysLibraryErrors = 0;
              sysLib.rollback(); /* cancel prior updates to last comitt*/
              return;
            end
            if (SL0EW01.SL0EWSZC > 0)
              VGVar.handleSysLibraryErrors = 1;
              sysLib.commit();
            else
              VGVar.handleSysLibraryErrors = 0;
              sysLib.rollback();
            end
            VGVar.handleSysLibraryErrors = 1;
            sysLib.commit();
          else
            if (SL9REC.SL9WOQTY < 0) /* neg qty - zero ok*/
              VGVar.handleSysLibraryErrors = 0;
              sysLib.rollback(); /* cancel prior updates to last comit*/
            else
              if (SL0EW01.SL0EWSZC > 0)
                VGVar.handleSysLibraryErrors = 1;
                sysLib.commit();
              else
                VGVar.handleSysLibraryErrors = 0;
                sysLib.rollback();
              end
            end
          end
        end
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S1HO";
        SLWREC.SLWMSGNO = 42; /* wo exists msg*/
        set SL0EM110.SL8FRAR[SLWIDX01] cursor, bold;
        set SL0EM110.SL8FRZN[SLWIDX01] bold;
        set SL0EM110.SL8FRLC[SLWIDX01] bold;
        return;
      end
    end
  else
    if (SL0EW01.SL0EWFL5 == "Y") /* neg qnty switch is yes*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* cancel prior updates to last comitt*/
      if (SLWREC.SLWCTR01 == 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S1HP";
        SLWREC.SLWMSGNO = 138; /* neg qty msg*/
        set SL0EM110.SL8FRAR[SLWIDX01] cursor, bold;
        set SL0EM110.SL8FRZN[SLWIDX01] bold;
        set SL0EM110.SL8FRLC[SLWIDX01] bold;
        return;
      end
    else
      SL9REC.SL9WOQTY = SL0EWA1.SL6ONHND - SL0EWA1.SL6PKRSV;
      if (SL9REC.SL9WOQTY > 0) /* qnty must be grtr than 0 for wo*/
        SL0ES1L(); /* add a wo item (prior to prod change)*/
        if (SLWREC.SLWERRSW == "Y")
          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback(); /* cancel prior updates to last comitt*/
          return;
        end
        if (SL0EW01.SL0EWSZC > 0)
          VGVar.handleSysLibraryErrors = 1;
          sysLib.commit();
        else
          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback();
        end
      else
        if (SL9REC.SL9WOQTY < 0) /* neg qty - zero ok*/
          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback(); /* cancel prior updates to last comit*/
        else
          if (SL0EW01.SL0EWSZC > 0)
            VGVar.handleSysLibraryErrors = 1;
            sysLib.commit();
          else
            VGVar.handleSysLibraryErrors = 0;
            sysLib.rollback();
          end
        end
      end
    end
  end
   /* ***********************************************************/
   /* *** end of statement group                             ****/
   /* ***********************************************************/
end // end SL0ES1H

// verify from location
Function SL0ES1I()

   /* ************************************************************/
   /* *** VERIFY  FROM LOCATION                               ****/
   /* ************************************************************/

  SL5REC.XWHCD = SL0EM110.XWHCD;
  SL5REC.XARCD = SL0EW01.SL0EWFAC[SLWIDX01];
  SL5REC.SL4ZONE = SL0EW01.SL0EWFZC[SLWIDX01];
  if (SL0EM110.SL8FRLC[SLWIDX01] == " ")
    SL5REC.SL5LOCTN = "000000";
  else
    SL5REC.SL5LOCTN = SL0EM110.SL8FRLC[SLWIDX01];
  end

  TA1REC.TA1LOCAT[2] = "SL0ES1I ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL5I0(); /* <=== std loctn inquiry*/

  if (SQLCA.VAGen_SQLCODE == 0)

    SL0EW01.SL0EW-MEZZ-LOC-IND = "N"; /* Mezzanine location flag*/

    if (SL5REC.XWHCD == "07") /* Wilsonville*/

      if (SL5REC.YLTCD == "15" /* Mezzanine location*/
       || SL5REC.YLTCD == "17")
        SL0EW01.SL0EW-MEZZ-LOC-IND = "Y"; /* Mezzanine location flag*/
      end

    end

    if (SL0EM110.SL-LOC-SZ-IND == "*")
      SL0EWX1.SL-LOC-SZ-IND = SL5REC.SL-LOC-SZ-IND;
    else
      SL0EWX1.SL-LOC-SZ-IND = SL0EM110.SL-LOC-SZ-IND;
    end

    if (SL0EM110.SL0EMMPF == "*")
      SL0EWX1.SL0EWMPF = SL5REC.SL5MPDFL;
    else
      SL0EWX1.SL0EWMPF = SL0EM110.SL0EMMPF;
    end

    SL0EW01.SL5FRWOC = SL5REC.SL5FRWOC; /* save work order count*/

    if (SL0EW01.SL0EWFAT[SLWIDX01] == "BU" /* from area bulk*/
     || SL0EW01.SL0EWFAT[SLWIDX01] == "RE") /* from area receiving*/

      if (SL5REC.YLSCD == "01")
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S1IA";
        SLWREC.SLWMSGNO = 175; /* Error empty Status*/
        set SL0EM110.SL8FRLC[SLWIDX01] cursor, bold;
        return;
      end

    end

    if (SL5REC.YLSCD == "05")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1IB";
      SLWREC.SLWMSGNO = 40; /* Error Reserved Status*/
      set SL0EM110.SL8FRLC[SLWIDX01] cursor, bold;
      return;
    end

    if (SL5REC.YLSCD == "06") /* Replenishment-reserved status*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1IC";
      SLWREC.SLWMSGNO = 39; /* Location status is reserved*/
      set SL0EM110.SL8FRLC[SLWIDX01] cursor, bold;
      return;
    end

    if (SL5REC.YLSCD == "08")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1ID";
      SLWREC.SLWMSGNO = 345; /* Error planned Status*/
      set SL0EM110.SL8FRLC[SLWIDX01] cursor, bold;
      return;
    end

  else

    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1IE";
      SLWREC.SLWMSGNO = 0038; /* <--- a/z/l not loc db*/
      set SL0EM110.SL8FRAR[SLWIDX01] cursor, bold;
      set SL0EM110.SL8FRZN[SLWIDX01] bold;
      set SL0EM110.SL8FRLC[SLWIDX01] bold;
      return;
    end

    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1IF";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == -811) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1IG";
      SLWREC.SLWMSGNO = 0001; /* <--- duplicate rows call prog*/
      return;
    end

    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S1IH";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/

  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES1I

// obtain all products prd/loc db
Function SL0ES1J()
   /* ************************************************************/
   /* *** obtain all products from the product/location table ****/
   /* ***                                                     ****/
   /* ***                                                     ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO       ****/
   /* *** VSYLOC02                                              ****/
   /* ***                                                     ****/
   /* ************************************************************/

  VSYLOC02.XWHCD = SL0EM110.XWHCD;
  VSYLOC02.XARCD = SL0EW01.SL0EWFAC[SLWIDX01];
  VSYLOC02.SL4ZONE = SL0EW01.SL0EWFZC[SLWIDX01];
  if (SL0EM110.SL8FRLC[SLWIDX01] == " ")
    VSYLOC02.SL5LOCTN = "000000";
  else
    VSYLOC02.SL5LOCTN = SL0EM110.SL8FRLC[SLWIDX01];
  end

  if (SL0EM110.SL2PALET[SLWIDX01] == "     "
   || SL0EM110.SL2PALET[SLWIDX01] == "    *"
   || SL0EM110.SL2PALET[SLWIDX01] == "*    "
   || SL0EM110.SL2PALET[SLWIDX01] == "*****")
    VSYLOC02.SL2PALET = "*"; /* wild card palet*/
  else
    SL0ES7P(); /* <=== check palet for *'s*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
    VSYLOC02.SL2PALET = SL0EM110.SL2PALET[SLWIDX01];
  end

  if (SL0EM110.SL2CASE[SLWIDX01] == "        "
   || SL0EM110.SL2CASE[SLWIDX01] == "       *"
   || SL0EM110.SL2CASE[SLWIDX01] == "*       "
   || SL0EM110.SL2CASE[SLWIDX01] == "********")
    VSYLOC02.SL2CASE = "*"; /* wild card case*/
  else
    SL0ES7C(); /* <=== check case for *'s*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
    VSYLOC02.SL2CASE = SL0EM110.SL2CASE[SLWIDX01];
  end

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO and   ****/
   /* *** then setup the following before i/o sgrp execution: ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* ***   note: sgrp results will be in record              ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = not found - setup not fnd error/msg        ****/
   /* ***   -911 = deadlock - try again msg                   ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES1J ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSLS-S3-VSYLOC02(); /* <=== std prod loctn selset*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* ***  next sentence  ****/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for selset*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1JA";
      SLWREC.SLWMSGNO = 0092; /* <--- a/z/l not loc db*/
      set SL0EM110.SL8FRAR[SLWIDX01] cursor, bold;
      set SL0EM110.SL8FRZN[SLWIDX01] bold;
      set SL0EM110.SL8FRLC[SLWIDX01] bold;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1JB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S1JC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES1J

// verify duplicate wo for prod
Function SL0ES1K()
        /* VERIFY IF DUPLICATE WORK ORDERS FOR LOCATION*/
   /* ************************************************************/
   /* *** Verify there are no outstanding work orders for this****/
   /* ***  'from' location. This process uses the VWOLHD02 and  ****/
   /* *** accesses the work order header not using the standard **/
   /* *** key to the file.  If duplicate work orders are found****/
   /* *** then set the duplicate work order flag to 'Y' YES.  ****/
   /* *** This will cause the product to be bypassed for      ****/
   /* *** further processing. Select set is used to get first.****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** set up the appropiate fields for selection in i/o   ****/
   /* ************************************************************/

  VWOLHD02.XWHCD = SL0EM110.XWHCD;
  VWOLHD02.SL8FRAR = SL0EW01.SL0EWFAC[SLWIDX01];
  VWOLHD02.SL8FRZN = SL0EW01.SL0EWFZC[SLWIDX01];
  if (SL0EM110.SL8FRLC[SLWIDX01] == " ")
    VWOLHD02.SL8FRLC = "000000";
  else
    VWOLHD02.SL8FRLC = SL0EM110.SL8FRLC[SLWIDX01];
  end
  VWOLHD02.XGPCD = VSYLOC02.XGPCD;
  VWOLHD02.SY1STNBR = VSYLOC02.SY1STNBR;
  VWOLHD02.SY2CLRID = VSYLOC02.SY2CLRID;
  VWOLHD02.XDMCD = VSYLOC02.XDMCD;
  VWOLHD02.XQACD = VSYLOC02.XQACD;
  VWOLHD02.XOWCD = VSYLOC02.XOWCD;
  VWOLHD02.PC2INSEG = VSYLOC02.PC2INSEG;
  VWOLHD02.XEGCD = VSYLOC02.XEGCD;
  VWOLHD02.XPGCD = VSYLOC02.XPGCD;
  VWOLHD02.XUMCD = VSYLOC02.XUMCD;
  VWOLHD02.XSLCD = VSYLOC02.XSLCD;

          /* Select Set on WORK ORDER DATA BASE*/
   /* ************************************************************/
   /* *** setup the following before i/o sgrp execution:      ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = found - continue                           ****/
   /* ***   +100 = not found - return w/ not fnd msg          ****/
   /* ***   -911 = deadlock - return w/ try again msg         ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES1K ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSLS-S6-VWOLHD02(); /* <=== sel set wo header using non*/
                                  /* stndrd key*/
  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for selset*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1KA";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S1KB";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end
   /* ************************************************************/
   /* *** at this point we have a set of wo header recs for this**/
   /* *** product.  fetch each rec and check if wo already    ****/
   /* *** exists. If it exists then ezertn with or without an ****/
   /* *** ERROR SWITCH SET.                                   ****/
   /* ************************************************************/
   /* *** note: per pallet & case fields below:               ****/
   /* ***       because a blank fld & * are to be treated the ****/
   /* ***       same & in order to NOT change the code alot,  ****/
   /* ***       a ws fld will be made blank or x depending on ****/
   /* ***       whether or not pallet and case were blank/*   ****/
   /* ***       (=blank) or NE blank (=x)                     ****/
   /* ************************************************************/

   /* ===> setup the blank pallet field <===*/
  if (SL0EM110.SL2PALET[SLWIDX01] == "        "
   || SL0EM110.SL2PALET[SLWIDX01] == "       *"
   || SL0EM110.SL2PALET[SLWIDX01] == "*       "
   || SL0EM110.SL2PALET[SLWIDX01] == "********")
    SL0EW01.SL0EWBKP = " ";
  else
    SL0EW01.SL0EWBKP = "X";
  end

   /* ===> setup the blank case field <===*/
  if (SL0EM110.SL2CASE[SLWIDX01] == "        "
   || SL0EM110.SL2CASE[SLWIDX01] == "       *"
   || SL0EM110.SL2CASE[SLWIDX01] == "*       "
   || SL0EM110.SL2CASE[SLWIDX01] == "********")
    SL0EW01.SL0EWBKC = " ";
  else
    SL0EW01.SL0EWBKC = "X";
  end

  while (SQLCA.VAGen_SQLCODE == 0)
    if (SL0EW01.SL0EWFAT[SLWIDX01] == "RE" /* receiving*/
     || SL0EW01.SL0EWFAT[SLWIDX01] == "RT") /* returns*/
      if (VWOLHD02.YWSCD == "01") /* in-process*/
        if (VWOLHD02.SL2PALET != " ")
          if (SL0EW01.SL0EWBKP != " ")
            if (SL0EM110.SL2PALET[SLWIDX01] == VWOLHD02.SL2PALET)
              if (SL0EW01.SL0EWBKC != " ")
                if (SL0EM110.SL2CASE[SLWIDX01] == VWOLHD02.SL2CASE)
                  SLWREC.SLWERRSW = "Y";
                  SLWREC.XXXLOCID = "S1KC";
                  set SL0EM110.SL8FRAR[SLWIDX01] cursor, bold;
                  set SL0EM110.SL8FRZN[SLWIDX01] bold;
                  set SL0EM110.SL8FRLC[SLWIDX01] bold;
                  SLWREC.SLWMSGNO = 0042;
                  return;
                end
              else
                if (VSYLOC02.SL2CASE == VWOLHD02.SL2CASE)
                  SL0EW01.SL0EWFL3 = "Y"; /* set dup sw to y*/
                  XSSLS-C6-VWOLHD02();
                  return;
                end
              end
            end
          else
            if (VSYLOC02.SL2PALET == VWOLHD02.SL2PALET)
              if (SL0EW01.SL0EWBKC != " ")
                if (SL0EM110.SL2CASE[SLWIDX01] == VWOLHD02.SL2CASE)
                  SLWREC.SLWERRSW = "Y";
                  SLWREC.XXXLOCID = "S1KX";
                  set SL0EM110.SL8FRAR[SLWIDX01] cursor, bold;
                  set SL0EM110.SL8FRZN[SLWIDX01] bold;
                  set SL0EM110.SL8FRLC[SLWIDX01] bold;
                  SLWREC.SLWMSGNO = 0042;
                  return;
                end
              else
                if (VSYLOC02.SL2CASE == VWOLHD02.SL2CASE)
                  SL0EW01.SL0EWFL3 = "Y"; /* set dup sw to y*/
                  XSSLS-C6-VWOLHD02();
                  return;
                end
              end
            end
          end
        end
      end
    else
      if (SL0EW01.SL0EWFZP[SLWIDX01] == "FU") /* full case*/
        if (VWOLHD02.YWSCD == "01") /* in-process*/
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "S1KD";
          set SL0EM110.SL8FRAR[SLWIDX01] cursor, bold;
          set SL0EM110.SL8FRZN[SLWIDX01] bold;
          set SL0EM110.SL8FRLC[SLWIDX01] bold;
          SLWREC.SLWMSGNO = 0042;
          return;
        end
      else
        if (VWOLHD02.YWSCD == "01") /* in-process*/
          if (VWOLHD02.SL2CASE != " ")
            if (SL0EW01.SL0EWBKC != " ")
              if (SL0EM110.SL2CASE[SLWIDX01] == VWOLHD02.SL2CASE)
                SLWREC.SLWERRSW = "Y";
                SLWREC.XXXLOCID = "S1KE";
                set SL0EM110.SL8FRAR[SLWIDX01] cursor, bold;
                set SL0EM110.SL8FRZN[SLWIDX01] bold;
                set SL0EM110.SL8FRLC[SLWIDX01] bold;
                SLWREC.SLWMSGNO = 0042;
                return;
              end
            else
              if (VSYLOC02.SL2CASE == VWOLHD02.SL2CASE)
                SL0EW01.SL0EWFL3 = "Y"; /* set dup switch to yes*/
                XSSLS-C6-VWOLHD02();
                return;
              end
            end
          else
            if (SL0EW01.SL0EWBKC != " ")
               /* ** next sentence ***/
            else
              if (VSYLOC02.SL2CASE == VWOLHD02.SL2CASE)
                SL0EW01.SL0EWFL3 = "Y"; /* set dup switch to yes*/
                XSSLS-C6-VWOLHD02();
                return;
              end
            end
          end
        end
      end
    end
     /* ************************************************************/
     /* *** fetch next work order header row                    ****/
     /* ************************************************************/
    SL0ES1S(); /* fetch next work order header row*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
  end
end // end SL0ES1K

// add work order item record
Function SL0ES1L()
                   /* ADD WORK ORDER ITEM RECORD*/
   /* ************************************************************/
   /* *** For each break in the product, add the previous     ****/
   /* *** work order item record to the data base (sl9rec).   ****/
   /* *** warehouse = from map                                ****/
   /* *** work order nmb = from last determined stock loc cntr****/
   /* *** size = last prod/loc record                         ****/
   /* *** quantity = onhand - pick reserve                    ****/
   /* ***                                                     ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** set up the appropiate fields for insertion          ****/
   /* ************************************************************/
  set SL9REC empty;
  TA1REC.TA1LOCAT[2] = "SL0ES1L ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  if (SL0EW01.SL0EWPEX == "Y"
   && SL0EWX1.SL0EWMPF == "N")
    if (SL0EW01.SL0EWTAT[SLWIDX01] != "PR" /* not processing*/
     && SL0EW01.SL0EWFAT[SLWIDX01] != "RE") /* not receiving*/
      if (SL0EWA1.XGPCD != SL0EWCP1.XGPCD       /* compare for matching records*/
       || SL0EWA1.SY1STNBR != SL0EWCP1.SY1STNBR 
       || SL0EWA1.SY2CLRID != SL0EWCP1.SY2CLRID 
       || SL0EWA1.XDMCD != SL0EWCP1.XDMCD       
       || SL0EWA1.XQACD != SL0EWCP1.XQACD       
       || SL0EWA1.XOWCD != SL0EWCP1.XOWCD       
       || SL0EWA1.XSDCD != SL0EWCP1.XSDCD       
       || SL0EWA1.XSACD != SL0EWCP1.XSACD       
       || SL0EWA1.XPGCD != SL0EWCP1.XPGCD       
       || SL0EWA1.XUMCD != SL0EWCP1.XUMCD       
       || SL0EWA1.XSLCD != SL0EWCP1.XSLCD       
       || SL0EWA1.SY1UNPCS != SL0EWCP1.SY1UNPCS /* units per case*/
       || SL0EWA1.SY5SZID != SL0EWCP1.SY5SZID) 
        if (SL0EW01.SL0EWEMT == "Y") /* loc was empty at start*/
          SL0EW01.SL0EWSZC = 0;
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "S1LA";
          set SL0EM110.SL8FRAR[SLWIDX01] cursor, bold;
          set SL0EM110.SL8FRZN[SLWIDX01] bold;
          set SL0EM110.SL8FRLC[SLWIDX01] bold;
          SLWREC.SLWMSGNO = 0174; /* <--- more than one sku*/
          return;
        else
          SL0EW01.SL0EWSZC = 0;
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "S1LB";
          set SL0EM110.SL8TOLC[SLWIDX01] cursor, bold;
          SLWREC.SLWMSGNO = 0177;
                                   /* <--- location sku not matched*/
          return;
        end
      end
    else
      if (SL0EW01.SL0EWTAT[SLWIDX01] == "PR" /* processing*/
       && SL0EW01.SL0EWSPA == 0              /* setaside exists*/
       && SL5REC.YLTCD == "22")              /* full case static*/
        if (SL0EWA1.XGPCD != SL0EWCP1.XGPCD       /* compare for matching records*/
         || SL0EWA1.SY1STNBR != SL0EWCP1.SY1STNBR 
         || SL0EWA1.SY2CLRID != SL0EWCP1.SY2CLRID 
         || SL0EWA1.XDMCD != SL0EWCP1.XDMCD       
         || SL0EWA1.XQACD != SL0EWCP1.XQACD       
         || SL0EWA1.XOWCD != SL0EWCP1.XOWCD       
         || SL0EWA1.XSDCD != SL0EWCP1.XSDCD       
         || SL0EWA1.XSACD != SL0EWCP1.XSACD       
         || SL0EWA1.XPGCD != SL0EWCP1.XPGCD       
         || SL0EWA1.XUMCD != SL0EWCP1.XUMCD       
         || SL0EWA1.XSLCD != SL0EWCP1.XSLCD       
         || SL0EWA1.SY1UNPCS != SL0EWCP1.SY1UNPCS /* units per case*/
         || SL0EWA1.SY5SZID != SL0EWCP1.SY5SZID) 
          if (SL0EW01.SL0EWEMT == "Y") /* loc was empty at start*/
            SL0EW01.SL0EWSZC = 0;
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "S1LC";
            set SL0EM110.SL8FRAR[SLWIDX01] cursor, bold;
            set SL0EM110.SL8FRZN[SLWIDX01] bold;
            set SL0EM110.SL8FRLC[SLWIDX01] bold;
            SLWREC.SLWMSGNO = 0174; /* <--- more than one sku*/
            return;
          else
            SL0EW01.SL0EWSZC = 0;
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "S1LD";
            set SL0EM110.SL8TOLC[SLWIDX01] cursor, bold;
            SLWREC.SLWMSGNO = 0177;
                                   /* <--- location sku not matched*/
            return;
          end
        end
      else
        if (SL0EW01.SL0EWTAT[SLWIDX01] == "BU" /* bulk type (default)*/
         && SL0EM110.SL8TOAR != "01")          /* not bulk area*/
          if (SL0EWA1.XGPCD != SL0EWCP1.XGPCD       
           /* compare for matching records*/
           || SL0EWA1.SY1STNBR != SL0EWCP1.SY1STNBR 
           || SL0EWA1.SY2CLRID != SL0EWCP1.SY2CLRID 
           || SL0EWA1.XDMCD != SL0EWCP1.XDMCD       
           || SL0EWA1.XQACD != SL0EWCP1.XQACD       
           || SL0EWA1.XOWCD != SL0EWCP1.XOWCD       
           || SL0EWA1.XSDCD != SL0EWCP1.XSDCD       
           || SL0EWA1.XSACD != SL0EWCP1.XSACD       
           || SL0EWA1.XPGCD != SL0EWCP1.XPGCD       
           || SL0EWA1.XUMCD != SL0EWCP1.XUMCD       
           || SL0EWA1.XSLCD != SL0EWCP1.XSLCD       
           || SL0EWA1.SY1UNPCS != SL0EWCP1.SY1UNPCS /* units per case*/
           || SL0EWA1.SY5SZID != SL0EWCP1.SY5SZID) 
            if (SL0EW01.SL0EWEMT == "Y") /* loc was empty at start*/
              SL0EW01.SL0EWSZC = 0;
              SLWREC.SLWERRSW = "Y";
              SLWREC.XXXLOCID = "S1LE";
              set SL0EM110.SL8FRAR[SLWIDX01] cursor, bold;
              set SL0EM110.SL8FRZN[SLWIDX01] bold;
              set SL0EM110.SL8FRLC[SLWIDX01] bold;
              SLWREC.SLWMSGNO = 0174; /* <--- more than one sku*/
              return;
            else
              SL0EW01.SL0EWSZC = 0;
              SLWREC.SLWERRSW = "Y";
              SLWREC.XXXLOCID = "S1LF";
              set SL0EM110.SL8TOLC[SLWIDX01] cursor, bold;
              SLWREC.SLWMSGNO = 0177; /* <--- location sku not matched*/
              return;
            end
          end
        end
      end
    end
  end

  if (SL0EW01.SL0EWPEX == "N"
   && SL0EWX1.SL0EWMPF == "N")
    if (SL0EW01.SL0EWTAT[SLWIDX01] != "PR" /* not processing*/
     && SL0EW01.SL0EWFAT[SLWIDX01] != "RE") /* not receiving*/
      SL0EW01.SL0EWEMT = "Y"; /* location started out empty*/
      move SL0EWA1 to SL0EWCP1 withV60Compat;
    else
      if (SL0EW01.SL0EWTAT[SLWIDX01] == "BU" /* bulk type (default)*/
       && SL0EM110.SL8TOAR != "01")          /* not bulk area*/
        SL0EW01.SL0EWEMT = "Y"; /* location started out empty*/
        move SL0EWA1 to SL0EWCP1 withV60Compat;
      else
        if (SL0EW01.SL0EWTAT[SLWIDX01] == "PR" /* processing*/
         && SL0EW01.SL0EWSPA == 0              /* setaside exists*/
         && SL5REC.YLTCD == "22")              /* full case static*/
          SL0EW01.SL0EWEMT = "Y"; /* location started out empty*/
          move SL0EWA1 to SL0EWCP1 withV60Compat;
        end
      end
    end
  end

  SL9REC.XWHCD = SL0EM110.XWHCD;
  SL9REC.SL8WONBR = SL3REC.SL3NXWON;
  SL9REC.SY5SZID = SL0EWA1.SY5SZID;
  SL9REC.SL9WOQTY = SL0EWA1.SL6ONHND - SL0EWA1.SL6PKRSV;

  SL0EW01.SL0EWSZC = SL0EW01.SL0EWSZC + 1;
  SL0EW01.SL0EWPEX = "Y"; /* move yes to product exists flag*/

   /* ************************************************************/
   /* *** setup the following before i/o sgrp execution:      ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = good return for add                        ****/
   /* ***   -911 = lockout*/
   /* ***   -803 = duplicate for add                          ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

  XSSL9A0(); /* <=== add work order item record*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == -803) /* <=== duplicate records for add*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1LC";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1LD";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S1LE";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end
   /* ************************************************************/
   /* *** end of statement group                              ****/
   /* ************************************************************/
end // end SL0ES1L

// find empty to loc w/ to zone
Function SL0ES1M()

   /* ************************************************************/
   /* *** obtain an empty location for this product           ****/
   /* *** using the to zone code                              ****/
   /* *** setup the approriate record fields for the sl5rec io****/
   /* ************************************************************/

  SL5REC.XWHCD = SL0EM110.XWHCD;
  SL5REC.XARCD = SL0EW01.SL0EWTAC[SLWIDX01];
  SL5REC.SL4ZONE = SL0EW01.SL0EWTZC[SLWIDX01];
  SL5REC.YLTCD = "*"; /* wild card loc type*/
  SL5REC.YLSCD = "01"; /* move empty status*/
  SL5REC.SL-LOC-SZ-IND = SL0EWX1.SL-LOC-SZ-IND;
  SL5REC.SL5MPDFL = SL0EWX1.SL0EWMPF; /* specify mult product type*/
  SL0EW01.SL0EWPEX = "N"; /* product exists at empty loc*/

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO and   ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES1M ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  if (SL0EM110.XWHCD == "25" /* if NSG*/
   || SL0EM110.XWHCD == "42" /* or Canada*/
   || SL0EM110.XWHCD == "02" /* 02,07 and 04 added*/
   || SL0EM110.XWHCD == "07" /* to allow them to have*/
   || SL0EM110.XWHCD == "04") /* more locations*/
    SL0EW11.SL0EWDT = X2CREC.X2CCURDT; /* just needs to be empty*/
  end

  XSSL5S2(); /* <=== select set of location records*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (SL0EM110.XWHCD == "02"
     || SL0EM110.XWHCD == "04"
     || SL0EM110.XWHCD == "07"
     || SL0EM110.XWHCD == "25"
     || SL0EM110.XWHCD == "51"
     || SL0EM110.XWHCD == "42") /* Canada*/
      while (SL5REC.SL5STCDT >= SL0EW11.SL0EWDT
       /* <=== empty at least 2 days*/
       && SQLCA.VAGen_SQLCODE == 0)
        XSSL5F2(); /* <=== fetch next location*/
      end
    else
      return;
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    /* ***  next sentence  ****/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for select set*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1MA";
      SLWREC.SLWMSGNO = 0046; /* <--- a/z/l not loc db*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1MB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S1MC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES1M

// obtain and update wo number
Function SL0ES1N()
           /* GET AND OBTAIN NEXT WORK ORDER NUMBER*/
   /* ************************************************************/
   /* *** move key fields for i/o                             ****/
   /* ************************************************************/

  SL3REC.XWHCD = SL0EM110.XWHCD;

   /* ************************************************************/
   /* *** setup the following before i/o sgrp execution:      ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = found - continue                           ****/
   /* ***   -911 = deadlock - return w/ try again msg         ****/
   /* ***  <0 or = db/severe error - contact programming msg  ****/
   /* ***    +100  note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES1N ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  SLWIDX06 = 1;
  SQLCA.VAGen_SQLCODE = 100;
  while (SQLCA.VAGen_SQLCODE == 100
   && SLWIDX06 < 21)
    XSSL3G1(); /* <=== std control record replace for wo number*/
    SLWIDX06 = SLWIDX06 + 1;
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    SL0EW01.SL0EWSZC = 0; /* zero out size counter*/
  else
    if (SQLCA.VAGen_SQLCODE == -911 /* <=== for any initial db access*/
     || SQLCA.VAGen_SQLCODE == +100)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1NA";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      exit stack;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S1NB";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    exit stack;
  end

  VGVar.handleSysLibraryErrors = 1;
  sysLib.commit();

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/

end // end SL0ES1N

// add    work order header
Function SL0ES1O()
                   /* ADD WORK ORDER HEADER RECORD*/
   /* ************************************************************/
   /* *** For each break in the product, add the work order   ****/
   /* *** header record to the data base (VWOLHD02)             ****/
   /* ***                                                     ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** set up the appropiate fields for insertion          ****/
   /* ************************************************************/
  set VWOLHD02 empty;

  VWOLHD02.XWHCD = SL0EM110.XWHCD; /* warehouse code*/

  VWOLHD02.SL8WOGRP = SL0EM110.SL8WOGRP; /* wo grp number*/

  VWOLHD02.SL8WONBR = SL3REC.SL3NXWON; /* wo number*/

  VWOLHD02.PC3PONBR = VSYLOC02.PC3PONBR;
  VWOLHD02.PC-SAP-PO-NBR = VSYLOC02.PC-SAP-PO-NBR;
  VWOLHD02.XGPCD = VSYLOC02.XGPCD;
  VWOLHD02.SY1STNBR = VSYLOC02.SY1STNBR;
  VWOLHD02.SY2CLRID = VSYLOC02.SY2CLRID;
  VWOLHD02.XDMCD = VSYLOC02.XDMCD;
  VWOLHD02.XQACD = VSYLOC02.XQACD;
  VWOLHD02.XOWCD = VSYLOC02.XOWCD;
  VWOLHD02.PC2INSEG = VSYLOC02.PC2INSEG;
  VWOLHD02.XEGCD = VSYLOC02.XEGCD;
  VWOLHD02.XPGCD = VSYLOC02.XPGCD;
  VWOLHD02.XUMCD = VSYLOC02.XUMCD;
  VWOLHD02.XSLCD = VSYLOC02.XSLCD;
  VWOLHD02.SY1UNPCS = VSYLOC02.SY1UNPCS;

  VWOLHD02.SL8WOPY = "3"; /* priority code*/
  VWOLHD02.SL8WOPFL = "N"; /* Label print flag*/

  if (SL0EW01.SL0EWFAT[SLWIDX01] == "RE" /* receiving*/
   || SL0EW01.SL0EWFAT[SLWIDX01] == "RT") /* customer returns*/
    VWOLHD02.YWTCD = "01"; /* receipt code*/
  else
    if (SL0EW01.SL0EWTAT[SLWIDX01] == "BU") /* bulk storage*/
      if (SL0EW01.SL0EWFAT[SLWIDX01] == "BU") /* bulk storage*/
        VWOLHD02.YWTCD = "04"; /* misc.*/
      else
        VWOLHD02.YWTCD = "03"; /* return to storage*/
      end
    else
      if (SL0EW01.SL0EWTAT[SLWIDX01] == "PR") /* processing*/
        VWOLHD02.YWTCD = "02"; /* replenishment*/
      else
        VWOLHD02.YWTCD = "04"; /* misc.*/
      end
    end
  end

  VWOLHD02.YWSCD = "01";
                                   /* in process to change later wo stat cd*/

  VWOLHD02.SL2PALET = VSYLOC02.SL2PALET;
  VWOLHD02.SL2CASE = VSYLOC02.SL2CASE;
  VWOLHD02.PK2SCHNO = 0;
  VWOLHD02.TSOCRTNB = 0;

  VWOLHD02.SL8FRAR = SL0EW01.SL0EWFAC[SLWIDX01]; /* from area cd*/

  VWOLHD02.SL8FRZN = SL0EW01.SL0EWFZC[SLWIDX01]; /* from zone cd*/

  if (SL0EM110.SL8FRLC[SLWIDX01] == " ") /* from location code*/
    VWOLHD02.SL8FRLC = "000000";
  else
    VWOLHD02.SL8FRLC = SL0EM110.SL8FRLC[SLWIDX01];
  end

  SL0EW01.SL0EW-PARSE-LOC = VWOLHD02.SL8FRLC; /* parse location*/
  VWOLHD02.SL8TOAR = SL0EW01.SL0EWTAC[SLWIDX01]; /* to area cd*/

  if (SL0EW01.SL0EWTZP[SLWIDX01] == "PI") /* picking*/
    VWOLHD02.SL8TOZN = SL0EM110.SL8TOZN[SLWIDX01];
  else
    if (SL0EW01.SL0EWTZC[SLWIDX01] != " ") /* to zone code*/
      VWOLHD02.SL8TOZN = SL0EW01.SL0EWTZC[SLWIDX01];
    else
      VWOLHD02.SL8TOZN = SL5REC.SL4ZONE;
    end
  end

  if (SL0EW01.SL0EWTZP[SLWIDX01] == "PI") /* picking*/
    VWOLHD02.SL8TOLC = SL7REC.SL5LOCTN;
  else
    if (SL0EW01.SL0EWTZP[SLWIDX01] == "FU") /* full case*/
      if (SL0EM110.SL8TOLC[SLWIDX01] > " ")
        VWOLHD02.SL8TOLC = SL0EM110.SL8TOLC[SLWIDX01];
      else
        VWOLHD02.SL8TOLC = "000000";
      end
    else
      VWOLHD02.SL8TOLC = SL5REC.SL5LOCTN;
    end
  end

   /*  Cognizant Change to make SL_WO_NBR_OF_LABEL always 1 for Winchester label printing*/
   /* IF SL0EW01.SL-WO-NBR-OF-LABL EQ 0;*/
  VWOLHD02.SL-WO-NBR-OF-LABL = 1; /* set default to 1*/
   /* ELSE;*/
   /*   MOVE SL0EW01.SL-WO-NBR-OF-LABL TO VWOLHD02.SL-WO-NBR-OF-LABL;*/
   /* END;*/

  SL0EW01.SL-WO-NBR-OF-LABL = 0;

  VWOLHD02.SL8DRVR = " "; /* driver init*/

  VWOLHD02.SL8ITMFL = "N"; /* itemized flag*/

  VWOLHD02.SL8INSTR = SL0EM110.SL8INSTR; /* special instructions*/

  VWOLHD02.SL8CRTBY = COMMAREA.CAUSERID; /* created by*/

  VWOLHD02.SL8UPDBY = " "; /* updated by*/

  VWOLHD02.ZZZSDT = X2CREC.X2CCURDT; /* setup date*/

   /* ************************************************************/
   /* *** setup the following before i/o sgrp execution:      ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = good return for add                        ****/
   /* ***   -911 = lockout*/
   /* ***   -803 = duplicate for add                          ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES1O ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  SL5REC.XWHCD = VWOLHD02.XWHCD; /* whse*/
  SL5REC.XARCD = VWOLHD02.SL8FRAR; /* 'fr' area*/
  SL5REC.SL4ZONE = VWOLHD02.SL8FRZN; /* 'fr' zone*/
  SL5REC.SL5LOCTN = VWOLHD02.SL8FRLC; /* 'fr' location*/

  XSSL5I0(); /* get 'from' ylt code*/

   /* ************************************************************/
   /* *** setup the following before i/o sgrp execution:      ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = good return for select                     ****/
   /* ***   -911 = lockout*/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

  set VROWS001 empty; /* Row storage area*/

  VROWS001.XWHCD = VWOLHD02.XWHCD; /* Warehouse*/
  VROWS001.XARCD = VWOLHD02.SL8FRAR; /* Area*/
  VROWS001.SL4ZONE = VWOLHD02.SL8FRZN; /* Zone*/
  VROWS001.SL5ROWCD = VWOLHD02.SL5ROWCD; /* Row*/

  TA1REC.TA1LOCAT[2] = "SL0ES1O ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  SL0ES-ROWS-S(); /* <=== select sort row record*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return*/

    VWOLHD02.SL-SRT-ROW-CD = VROWS001.SL-SRT-ROW-CD;
    VWOLHD02.SL-SRT-ZONE-CD = VROWS001.SL-SRT-ZONE-CD;

    if (VROWS001.SL-ROW-DIR-IND == "D") /* Descending direction*/

      VWOLHD02.SL-SRT-LOC-NBR = VWOLHD02.XXX-NUM-4 * -1; /* Reverse sign*/
    else
      VWOLHD02.SL-SRT-LOC-NBR = VWOLHD02.XXX-NUM-4; /* row/bin number*/

    end

    SL0EW01.SL0EW-SRT-ROW-CD = VROWS001.SL-SRT-ROW-CD; /* row code*/

    if (SL0EW01.SL0EW-SRT-ROW-CD == " ")
      VWOLHD02.SL-SRT-ROW-NBR = 0; /* row nbr*/
    else
      VWOLHD02.SL-SRT-ROW-NBR = SL0EW01.SL0EW-SRT-ROW-NBR; /* row nbr*/
    end

    if (VROWS001.SL-ROW-DIR-IND == "D") /* Descending direction*/

      VWOLHD02.SL-SRT-ROW-NBR = SL0EW01.SL0EW-SRT-ROW-NBR * -1;

    end

    if (VROWS001.SL-BIN-DIR-IND == "D") /* Descending direction*/

      VWOLHD02.SL-SRT-BIN-NBR = SL0EW01.SL0EW-POS-3-4 * -1; /* Reverse sign*/
    else
      VWOLHD02.SL-SRT-BIN-NBR = SL0EW01.SL0EW-POS-3-4; /* Bin number*/

    end

    if (VROWS001.SL-LVL-DIR-IND == "D") /* Descending direction*/

      VWOLHD02.SL-SRT-LVL-NBR = SL0EW01.SL0EW-POS-5-6 * -1; /* Reverse sign*/
    else
      VWOLHD02.SL-SRT-LVL-NBR = SL0EW01.SL0EW-POS-5-6; /* lvl number*/

    end

  else

    if (SQLCA.VAGen_SQLCODE == +100) /* Row not found*/

      SL0EW01.SL0EW-SRT-ROW-CD = VWOLHD02.SL-SRT-ROW-CD; /* row code*/

      if (SL0EW01.SL0EW-SRT-ROW-CD == " ")
        VWOLHD02.SL-SRT-ROW-NBR = 0; /* row nbr*/
      else
        VWOLHD02.SL-SRT-ROW-NBR = SL0EW01.SL0EW-SRT-ROW-NBR; /* row nbr*/
      end

      VWOLHD02.SL-SRT-BIN-NBR = SL0EW01.SL0EW-POS-3-4; /* Bin number*/
      VWOLHD02.SL-SRT-LVL-NBR = SL0EW01.SL0EW-POS-5-6; /* lvl number*/

      VWOLHD02.SL-SRT-ZONE-CD = VWOLHD02.SL8FRZN; /* zone code*/

      VWOLHD02.SL-SRT-LOC-NBR = VWOLHD02.XXX-NUM-4; /* Bin number*/
      VWOLHD02.SL-SRT-ROW-CD = VWOLHD02.SL5ROWCD; /* Row code*/

    else
      if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S1OA";
        SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
        return;
      end
      SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
      SLWREC.XXXLOCID = "S1OB";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
  end

  if (SL5REC.YLTCD == "06")
    VWOLHD02.SL-SRT-LOC-NBR = 0; /* Loc number*/
    VWOLHD02.SL-SRT-ROW-CD = " "; /* Row code*/
  else
    VWOLHD02.SL-SRT-ROW-NBR = 0; /* Row number*/
    VWOLHD02.SL-SRT-BIN-NBR = 0; /* Bin number*/
    VWOLHD02.SL-SRT-LVL-NBR = 0; /* Lvl number*/
  end

   /* Ff the from location type is receiving get the to location type*/

  if (SL5REC.YLTCD == "27" /* if from 'receiving'*/
   || SL5REC.YLTCD == "30" 
   || SL5REC.YLTCD == "31")

    SL5REC.XARCD = VWOLHD02.SL8TOAR; /* 'to' area*/
    SL5REC.SL4ZONE = VWOLHD02.SL8TOZN; /* 'to' zone*/
    SL5REC.SL5LOCTN = VWOLHD02.SL8TOLC; /* 'to' location*/

    XSSL5I0(); /* get 'to' ylt code*/

    if (SL5REC.YLTCD == "22" /* if to 'handstack'*/
     || SL5REC.YLTCD == "06") /* or to 'handstack bulk*/
      VWOLHD02.SL-WO-NBR-OF-LABL = 1; /* create just one label*/
    end

    if (SL5REC.XWHCD == "02" /* warehouse '02'*/
     && SL5REC.XARCD == "02") /* and 'to' processing*/
      VWOLHD02.SL-WO-NBR-OF-LABL = 1; /* create just one label*/
    end

    if (SL5REC.XWHCD == "42") /* canada '42'*/
      VWOLHD02.SL-WO-NBR-OF-LABL = 1; /* create just one label*/
    end

  end

  SL5REC.XARCD = VWOLHD02.SL8TOAR; /* 'to' area*/
  SL5REC.SL4ZONE = VWOLHD02.SL8TOZN; /* 'to' zone*/
  SL5REC.SL5LOCTN = VWOLHD02.SL8TOLC; /* 'to' location*/

  XSSL5I0(); /* get 'to' ylt code*/

  if (SL5REC.YLTCD == "11" /* if picking - flow*/
   || SL5REC.YLTCD == "12" /* or picking - static*/
   || SL5REC.YLTCD == "13" /* or picking - high rack*/
   || SL5REC.YLTCD == "14" /* or instore promo*/
   || SL5REC.YLTCD == "15" /* or picking - offline*/
   || SL5REC.YLTCD == "16" /* or picking - default*/
   || SL5REC.YLTCD == "17" /* or special handling*/
   || SL5REC.YLTCD == "22" /* or full case - static*/
   || SL5REC.YLTCD == "10") /* or picking - pallet*/

    SL0ESI1(); /* get lane number*/

    if (SQLCA.VAGen_SQLCODE == 0) /* if lane number found*/
      VWOLHD02.SWCLNENB = PKEREC.PKERNSRN; /* norm lane*/
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* if lane number not found*/
        VWOLHD02.SL-WO-NBR-OF-LABL = 1;
      else /* severe DB2 error*/
        SLWREC.SLWERRSW = "Y"; /* set error switch*/
        SLWREC.XXXLOCID = "S1OF"; /* indicate location*/
        SLWREC.SLWMSGNO = 0001; /* severe error msg*/
        return; /* return to previous process*/
      end
    end

  else

    VWOLHD02.SL-WO-NBR-OF-LABL = 1;

  end

  XSSLS-A-VWOLHD02(); /* <=== add work order item record*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == -803) /* <=== duplicate records for add*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1OC";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1OD";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S1OE";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of statement group                              ****/
   /* ************************************************************/

end // end SL0ES1O

// update from location record
Function SL0ES1P()
            /* UPDATE THE FROM LOCATION (LOCATION DB)*/
   /* ************************************************************/
   /* *** move appropiate fields for read for update          ****/
   /* ***                                                     ****/
   /* ************************************************************/

  SL5REC.XWHCD = SL0EM110.XWHCD;
  SL5REC.XARCD = SL0EW01.SL0EWFAC[SLWIDX01];
  SL5REC.SL4ZONE = SL0EW01.SL0EWFZC[SLWIDX01];
  if (SL0EM110.SL8FRLC[SLWIDX01] == " ")
    SL5REC.SL5LOCTN = "000000";
  else
    SL5REC.SL5LOCTN = SL0EM110.SL8FRLC[SLWIDX01];
  end

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO and   ****/
   /* *** then setup the following before i/o sgrp execution: ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* ***   note: sgrp results will be in record              ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = not found - severe error                   ****/
   /* ***   -911 = deadlock - try again msg                   ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES1P ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL5U1(); /* <=== location read for update*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1PA";
      SLWREC.SLWMSGNO = 0001; /* <--- not on db msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1PB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S1PC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** move appropiate fields for update                   ****/
   /* ***                                                     ****/
   /* ************************************************************/

  if (SL5REC.YLSCD == "04") /* if in-transit*/
    SL5REC.YLSCD = "07"; /* make combined*/
  else
    SL5REC.YLSCD = "03"; /* reserved*/
  end
  SL5REC.SL5STCDT = X2CREC.X2CCURDT;
  SL5REC.SL5FRWOC = SL5REC.SL5FRWOC + 1;

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO and   ****/
   /* *** then setup the following before i/o sgrp execution: ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* ***   note: sgrp results will be in record              ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = concurrent update                          ****/
   /* ***   -911 = deadlock - try again msg                   ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

  XSSL5R0(); /* <=== location update*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for update*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1PD";
      SLWREC.SLWMSGNO = 0001; /* <--- concurrent update*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1PE";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S1PF";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES1P

// update to location (loc db)
Function SL0ES1Q()

            /* UPDATE THE  TO  LOCATION (LOCATION DB)*/
   /* ************************************************************/
   /* *** move appropiate fields for read for update          ****/
   /* *** note: if new empty loc routine has updated the      ****/
   /* ***       'to' location, skip this updatge              ****/
   /* ************************************************************/

  if (SL0EWX1.SL0EWUSW == "Y")
    return;
  end

  SL5REC.XWHCD = SL0EM110.XWHCD;
  SL5REC.XARCD = SL0EW01.SL0EWTAC[SLWIDX01];
  SL5REC.SL4ZONE = VWOLHD02.SL8TOZN;
  SL5REC.SL5LOCTN = SL0EM110.SL8TOLC[SLWIDX01];

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO and   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES1Q ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL5U1(); /* <=== location read for update*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (SL0EW01.SL0EWTLE == "N") /* to location not entered*/
      if (SL5REC.YLSCD == "01") /* empty location status*/
         /* ** next sentence ***/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S1QA";
        SLWREC.SLWMSGNO = 0162; /* to loc not open msg*/
        SL0EM110.SL8TOLC[SLWIDX01] = " ";
        set SL0EM110.SL8TOLC[SLWIDX01] cursor, bold;
        return;
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1QB";
      SLWREC.SLWMSGNO = 0001; /* <--- not on db msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1QC";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1QD";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** move appropiate fields for update                   ****/
   /* ************************************************************/

  SL5REC.YLSCD = "04"; /* in transit*/
  SL5REC.SL5STCDT = X2CREC.X2CCURDT;
  SL5REC.SL5TOWOC = SL5REC.SL5TOWOC + 1;

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO and   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ************************************************************/

  XSSL5R0(); /* <=== location update already coded*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1QE";
      SLWREC.SLWMSGNO = 0001; /* <--- concurrent update*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1QF";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1QG";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES1Q

// move curr prod/locat to
Function SL0ES1R()
        /* FETCH THE NEXT ROW FROM THE PRODUCT/LOCATION DB*/
   /* ************************************************************/
   /* *** setup the approriate record fields for the IO and   ****/
   /* *** then setup the following before i/o sgrp execution: ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* ***   note: sgrp results will be in record              ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = no more records*/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES1R ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSLS-N3-VSYLOC02(); /* fetch next prod/loc record*/

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for FETCH scan*/
      return;
    else
      SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
      SLWREC.XXXLOCID = "S1RA";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES1R

// fetch next work order header
Function SL0ES1S()
                 /* FETCH NEXT WORK ORDER HEADER ROW*/
   /* ************************************************************/
   /* *** setup the approriate record fields for the IO and   ****/
   /* *** then setup the following before i/o sgrp execution: ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* ***   note: sgrp results will be in record              ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = no more records*/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES1S ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSLS-N6-VWOLHD02(); /* fetch next wo header row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for FETCH scan*/
      return;
    else
      SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
      SLWREC.XXXLOCID = "S1SA";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES1S

// find empty to loc w/o to zone
Function SL0ES1T()

   /* ************************************************************/
   /* *** obtain an empty location for this product           ****/
   /* *** without the to zone                                 ****/
   /* *** setup the approriate record fields for the sl5rec io****/
   /* ************************************************************/

  SL5REC.XWHCD = SL0EM110.XWHCD;
  SL5REC.XARCD = SL0EW01.SL0EWTAC[SLWIDX01];
  SL5REC.SL4ZONE = "*";
  SL5REC.YLTCD = "*";
  SL5REC.YLSCD = "01"; /* move empty status*/
  SL5REC.SL-LOC-SZ-IND = SL0EWX1.SL-LOC-SZ-IND;
  SL5REC.SL5MPDFL = SL0EWX1.SL0EWMPF; /* specify mult product type*/
  SL0EW01.SL0EWPEX = "N"; /* product exists at empty loc*/

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO and   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES1T ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  if (SL0EM110.XWHCD == "25" /* if NSG*/
   || SL0EM110.XWHCD == "42" /* or Canada*/
   || SL0EM110.XWHCD == "02" /* 02,07 and 04 added*/
   || SL0EM110.XWHCD == "07" /* to allow them to have*/
   || SL0EM110.XWHCD == "04") /* more locations*/
    SL0EW11.SL0EWDT = X2CREC.X2CCURDT; /* <== just needs to be empty*/
  end

  XSSL5S2(); /* <=== select set of location records*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (SL0EM110.XWHCD == "02"
     || SL0EM110.XWHCD == "04"
     || SL0EM110.XWHCD == "07"
     || SL0EM110.XWHCD == "25"
     || SL0EM110.XWHCD == "51"
     || SL0EM110.XWHCD == "42") /* Canada*/
      while (SL5REC.SL5STCDT >= SL0EW11.SL0EWDT /* <== empty at least 2 days*/
       && SQLCA.VAGen_SQLCODE == 0)
        XSSL5F2(); /* <=== get next location*/
      end
    else
      return;
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    /* **next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for select set*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1TA";
      SLWREC.SLWMSGNO = 0046; /* <--- a/z/l not loc db*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1TB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S1TC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES1T

// get 'to' sz/loc from prod/asgn
Function SL0ES1U()
   /* --------------------------------------------------------------------*/
   /* Bypass product assignment if from a mezzanine location.*/
   /* --------------------------------------------------------------------*/

  if (SL0EW01.SL0EW-MEZZ-LOC-IND == "Y") /* Mezzanine location*/
    return; /* Return to previous process*/
  end

   /* ************************************************************/
   /* *** obtain the 'to location' for this size              ****/
   /* *** if the location is entered, use ar/zn/loc in select ****/
   /* *** otherwise, used only area & wild card zn & loc      ****/
   /* ************************************************************/

  SL0EW01.SL0EWTLE = "Y"; /* to location entered flag*/

   /* ************************************************************/
   /* *** set up the appropiate fields for selection in i/o   ****/
   /* ************************************************************/

  SL7REC.XWHCD = SL0EM110.XWHCD;
  SL7REC.XGPCD = VSYLOC02.XGPCD;
  SL7REC.SY1STNBR = VSYLOC02.SY1STNBR;
  SL7REC.SY2CLRID = VSYLOC02.SY2CLRID;
  SL7REC.XDMCD = VSYLOC02.XDMCD;
  SL7REC.XQACD = VSYLOC02.XQACD;
  SL7REC.XOWCD = VSYLOC02.XOWCD;
  SL7REC.XSDCD = VSYLOC02.PC2INSEG;
  SL7REC.XSACD = VSYLOC02.XEGCD;
  SL7REC.XPGCD = VSYLOC02.XPGCD;
  SL7REC.XUMCD = VSYLOC02.XUMCD;
  SL7REC.SY5SZID = VSYLOC02.SY5SZID;
  SL7REC.XXXSTAT = "*";
  SLVREC.SLVSDT = 0;
  SLVREC.SLVEDT = X2CREC.X2CCURDT;
  SL7REC.XARCD = SL0EM110.SL8TOAR[SLWIDX01];
  if (SL0EM110.SL8TOLC[SLWIDX01] > " "
   && SLWREC.SLWSEXSW == "N")
     /* ** used if from sl0es1h ***/
    if (SL0EM110.SL8TOLC[SLWIDX01] == "000000")
      SL0EW01.SL0EWSAR = SL0EM110.SL8TOAR[SLWIDX01];
      SL0EW01.SL0EWSZN = SL0EM110.SL8TOZN[SLWIDX01];
      SL0EW01.SL0EWSLC = "000000";
      return;
    end
    SL7REC.SL4ZONE = SL0EM110.SL8TOZN[SLWIDX01];
    SL7REC.SL5LOCTN = SL0EM110.SL8TOLC[SLWIDX01];
  else
     /* ** used if from sl0es1g ***/
     /* ** only sgrp which sets sexsw=y ***/
    SL7REC.SL4ZONE = "*";
    SL7REC.SL5LOCTN = "*";
  end

   /* ************************************************************/
   /* *** setup the following before i/o sgrp execution:      ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = found - continue                           ****/
   /* ***   +100 = not found - return w/ not fnd msg          ****/
   /* ***   -911 = deadlock - return w/ try again msg         ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* *** note: space out save flds to prevent showing the    ****/
   /* ***       previous line's to location                   ****/
   /* ***       if no prod. assignments are found             ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES1U ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL7S8(); /* <=== sel set of size prod.*/
                                   /* assignments*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1UA";
      if (SLWREC.SLWREM01 > 0)
        SLWREC.SLWMSGNO = 0156; /* <--- mult. assign's exist*/
        SL0EW01.SL0EWSAR = " ";
        SL0EW01.SL0EWSZN = " ";
        SL0EW01.SL0EWSLC = " ";
      else
        SLWREC.SLWMSGNO = 0047;
                                   /* <--- no assignment for to loc*/
      end
      set SL0EM110.SL8TOAR[SLWIDX01] cursor, bold;
      set SL0EM110.SL8TOZN[SLWIDX01] bold;
      set SL0EM110.SL8TOLC[SLWIDX01] bold;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1UB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1UC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** ws now have at least 1(set) of assignments          ****/
   /* *** initialize save & last ar/zn/loc                    ****/
   /* *** process each assignment (pair)                      ****/
   /* *** note: this will work even if zn/loc entered         ****/
   /* ************************************************************/

  SL0EW01.SL0EWSAR = " ";
  SL0EW01.SL0EWSZN = " ";
  SL0EW01.SL0EWSLC = " ";
  SL0EW01.SL0EWLAR = " ";
  SL0EW01.SL0EWLZN = " ";
  SL0EW01.SL0EWLLC = " ";

  while (SQLCA.VAGen_SQLCODE == +0
   && SLWREC.SLWERRSW == "N")
    SL0ESUU(); /* <=== process A/I assignment pair*/
  end

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** if save area has not been setup,                    ****/
   /* *** no valid active assignment was found                ****/
   /* ************************************************************/

  if (SL0EW01.SL0EWSAR > " ")
    SLWREC.SLWREM01 = SLWREC.SLWREM01 + 1;
    return;
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1UD";
    if (SLWREC.SLWREM01 > 0)
      SLWREC.SLWMSGNO = 0156; /* <--- mult. assign's exist*/
    else
      SLWREC.SLWMSGNO = 0047;
                                   /* <--- no assignment for to loc*/
    end
    set SL0EM110.SL8TOAR[SLWIDX01] cursor, bold;
    set SL0EM110.SL8TOZN[SLWIDX01] bold;
    set SL0EM110.SL8TOLC[SLWIDX01] bold;
  end

   /* ************************************************************/
   /* *** end of statement group                              ****/
   /* ************************************************************/

end // end SL0ES1U

// fetch next prod assignment rec
Function SL0ES1V()

                 /* FETCH NEXT product assignment record*/
   /* ************************************************************/
   /* *** setup the approriate record fields for the IO and   ****/
   /* *** then setup the following before i/o sgrp execution: ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* ***   note: sgrp results will be in record              ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = no more records*/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES1V ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL7F8(); /* fetch next prod assignment row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for FETCH scan*/
      return;
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1VA";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES1V

// verify to location
Function SL0ES1W()
   /* ************************************************************/
   /* *** VERIFY  to location                                 ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO       ****/
   /* *** SL5REC                                              ****/
   /* ************************************************************/

  SL5REC.XWHCD = SL0EM110.XWHCD;
  SL5REC.XARCD = SL0EW01.SL0EWTAC[SLWIDX01];
  SL5REC.SL4ZONE = SL0EW01.SL0EWTZC[SLWIDX01];
  SL5REC.SL5LOCTN = SL0EM110.SL8TOLC[SLWIDX01];

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO and   ****/
   /* *** then setup the following before i/o sgrp execution: ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* ***   note: sgrp results will be in record              ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = not found - setup not fnd error/msg        ****/
   /* ***   -811 = duplicates found - contact programming msg ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***   -911 = deadlock - try again msg                   ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES1W ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL5I0(); /* <=== std loctn inquiry*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (SL0EW01.SL0EWTAT[SLWIDX01] == "BU")
      if (SL0EM110.XWHCD == "03"
       || SL0EM110.XWHCD == "09")
         /* ** next sentence*/
      else
        if (SL5REC.YLSCD == "04") /* in-transit*/
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "S1WA";
          SLWREC.SLWMSGNO = 49; /* error intransit status*/
          set SL0EM110.SL8TOLC[SLWIDX01] cursor, bold;
          return;
        end
        if (SL5REC.YLSCD == "07") /* combined*/
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "S1WB";
          SLWREC.SLWMSGNO = 172; /* error combined status*/
          set SL0EM110.SL8TOLC[SLWIDX01] cursor, bold;
          return;
        end
      end
      if (SL0EM110.SL0EMMPF != "*") /* screen mult-sku flag*/
        if (SL0EM110.SL0EMMPF != SL5REC.SL5MPDFL) /* screen value*/
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "S1WC";
          SLWREC.SLWMSGNO = 173; /* screen value ne rec value*/
          set SL0EM110.SL0EMMPF cursor, bold;
          set SL0EM110.SL8TOLC[SLWIDX01] bold;
          return;
        end
      end
    end
    if (SL5REC.YLSCD == "05") /* frozen*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1WD";
      SLWREC.SLWMSGNO = 40; /* error frozen status*/
      set SL0EM110.SL8TOLC[SLWIDX01] cursor, bold;
      return;
    end
    if (SL5REC.YLSCD == "06") /* Replenishment-reserved status*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1WE";
      SLWREC.SLWMSGNO = 39; /* Location status is reserved*/
      set SL0EM110.SL8TOLC[SLWIDX01] cursor, bold;
      return;
    end
    if (SL5REC.YLSCD == "08") /* planned*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1WF";
      SLWREC.SLWMSGNO = 345; /* error planned status*/
      set SL0EM110.SL8TOLC[SLWIDX01] cursor, bold;
      return;
    end
    SL0EWX1.SL0EWMPF = SL5REC.SL5MPDFL; /* move mpf to ws*/
    SL0EW01.SL5TOWOC = SL5REC.SL5TOWOC; /* save to wo count*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1WG";
      SLWREC.SLWMSGNO = 0038; /* <--- a/z/l not loc db*/
      set SL0EM110.SL8TOAR[SLWIDX01] cursor, bold;
      set SL0EM110.SL8TOZN[SLWIDX01] bold;
      set SL0EM110.SL8TOLC[SLWIDX01] bold;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1WH";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1WI";
      SLWREC.SLWMSGNO = 0001;
                                   /* <--- duplicate rows call prog*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S1WJ";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES1W

// process size break
Function SL0ES1Z()

   /* ************************************************************/
   /* ***  if NOT picking or if mezzanine location, exit sgrp ****/
   /* ***  get size's prod. assignment                        ****/
   /* ***  if same ar/zn/loc, exit sgrp                       ****/
   /* ***  otherwise, commit previous db inserts              ****/
   /* ***  if ar/zn/loc exists in ws tbl, use related wo nbr  ****/
   /* ***  otherwise, create new wo hdr (nbr)                 ****/
   /* ***  note: last wo item (size) has been written         ****/
   /* ************************************************************/

  if (SL0EW01.SL0EWTAT[SLWIDX01] == "PR"
   && SL0EW01.SL0EWTZP[SLWIDX01] == "PI"
   && SL0EW01.SL0EW-MEZZ-LOC-IND == "N") /* and not mezzanine location*/
    /* NEXT SENTENCE*/
  else
    return; /* Return to previous process*/
  end

   /* ************************************************************/
   /* ***  get size's prod. assignment                        ****/
   /* ************************************************************/

  SL0ES1U(); /* <=== get to sz/loc from prod. asgn*/

  SL0EM110.SL8TOZN[SLWIDX01] = SL0EW01.SL0EWSZN;
  SL0EM110.SL8TOLC[SLWIDX01] = SL0EW01.SL0EWSLC;

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL7REC.XARCD = SL0EW01.SL0EWSAR;
  SL7REC.SL4ZONE = SL0EW01.SL0EWSZN;
  SL7REC.SL5LOCTN = SL0EW01.SL0EWSLC;

   /* ************************************************************/
   /* ***  check this size's assignment vs current to asgn    ****/
   /* ************************************************************/

  if (SL0EW01.SL0EWSAR == VWOLHD02.SL8TOAR
   && SL0EW01.SL0EWSZN == VWOLHD02.SL8TOZN
   && SL0EW01.SL0EWSLC == VWOLHD02.SL8TOLC)
    return;
  end

  VGVar.handleSysLibraryErrors = 1;
  sysLib.commit();
  SL0EW01.SL0EWFL4 = "Y"; /* prior record written sw*/

   /* ************************************************************/
   /* ***  check previous wo's (if any) for this to sz/loc    ****/
   /* ************************************************************/

  if (SL0EW01.SL0EWLTX > 0)
    SLWREC.SLWIX = 1;
    while (SLWREC.SLWIX <= SL0EW01.SL0EWLTX)
      if (SL0EW01.SL0EWUAC[SLWIX] == SL0EW01.SL0EWSAR
       && SL0EW01.SL0EWUZC[SLWIX] == SL0EW01.SL0EWSZN
       && SL0EW01.SL0EWULC[SLWIX] == SL0EW01.SL0EWSLC)
         /* ** move statments*/
        VWOLHD02.SL8TOAR = SL0EW01.SL0EWUAC[SLWIX];
        VWOLHD02.SL8TOZN = SL0EW01.SL0EWUZC[SLWIX];
        VWOLHD02.SL8TOLC = SL0EW01.SL0EWULC[SLWIX];
        SL0EM110.SL8TOLC = SL0EW01.SL0EWULC[SLWIX];
        SL3REC.SL3NXWON = SL0EW01.SL0EWUWO[SLWIX];
        return;
      end
      SLWREC.SLWIX = SLWREC.SLWIX + 1;
    end
  end

   /* ************************************************************/
   /* ***  setup the next tbl index value & save this wo/loc  ****/
   /* ***  note: then save this index as last tbl index used  ****/
   /* ************************************************************/

  SLWREC.SLWIX = SL0EW01.SL0EWLTX + 1;
  SL0EW01.SL0EWUWO[SLWIX] = SL3REC.SL3NXWON;
  SL0EW01.SL0EWUAC[SLWIX] = VWOLHD02.SL8TOAR;
  SL0EW01.SL0EWUZC[SLWIX] = VWOLHD02.SL8TOZN;
  SL0EW01.SL0EWULC[SLWIX] = VWOLHD02.SL8TOLC;
  SL0EW01.SL0EWLTX = SLWREC.SLWIX;

  SL0ES1N(); /* determine new work order number*/
  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0ES1O(); /* insert wo header record*/
  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0ES1P(); /* update fr location record*/
  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0ES1Q(); /* update to location record*/
  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES1Z

// get yesterdays date (ccyymmss)
Function SL0ES20()

   /* ************************************************************/
   /* *** use ta0190 to obtain a +/- date from the current    ****/
   /* *** date using a 6 day work week                        ****/
   /* ************************************************************/

  set TA9REC empty;

  TA9REC.TA9BEGDT = X2CREC.X2CCURDT;
  TA9REC.TA9OFSET = -1;

  call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};

  if (TA9REC.TA9RTNFL == 0)
    SL0EW22.SL0EWDT = TA9REC.TA9RTNDT;
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S20A";
    SLWREC.SLWMSGNO = 0001;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES20

// add work order item record
Function SL0ES21()
                   /* ADD WORK ORDER ITEM RECORD*/
   /* ************************************************************/
   /* *** For each break in the product, add the previous     ****/
   /* *** work order item record to the data base (sl9rec).   ****/
   /* *** warehouse = from map                                ****/
   /* *** work order nmb = from last determined stock loc cntr****/
   /* *** size = last prod/loc record                         ****/
   /* *** quantity = onhand - pick reserve                    ****/
   /* ***                                                     ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** set up the appropiate fields for insertion          ****/
   /* ************************************************************/
  set SL9REC empty;
  TA1REC.TA1LOCAT[2] = "SL0ES21 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  if (SL0EW02.SL0EWPEX == "Y"
   && SL0EWX1.SL0EWMPF == "N")
    if (SL0EW02.SL0EWTAT != "PR") /* not processing*/
      if (SL0EWA2.XGPCD != SL0EWCP1.XGPCD /* compare for matching records*/
       || SL0EWA2.SY1STNBR != SL0EWCP1.SY1STNBR
       || SL0EWA2.SY2CLRID != SL0EWCP1.SY2CLRID
       || SL0EWA2.XDMCD != SL0EWCP1.XDMCD 
       || SL0EWA2.XQACD != SL0EWCP1.XQACD 
       || SL0EWA2.XOWCD != SL0EWCP1.XOWCD 
       || SL0EWA2.XSDCD != SL0EWCP1.XSDCD 
       || SL0EWA2.XSACD != SL0EWCP1.XSACD 
       || SL0EWA2.XPGCD != SL0EWCP1.XPGCD 
       || SL0EWA2.XUMCD != SL0EWCP1.XUMCD 
       || SL0EWA2.XSLCD != SL0EWCP1.XSLCD 
       || SL0EW02.SY5SZID[SLWIDX01] != SL0EWCP1.SY5SZID)
        if (SL0EW02.SL0EWEMT == "Y") /* loc was empty at start*/

          /* *************************************************************/
          /* *** THE FOLLOWING CODE IS USED WHEN THERE IS AN ERROR ON AN*/
          /* *** EMPTY LOCATION THAT WAS OBTAINED IN SL0ES7X.  THE EMPTY*/
          /* *** LOCATION WAS PREMATURELY SET TO IN-TRANSIT AND NOW*/
          /* *** NEEDS TO BE RESET TO EMPTY.*/
          /* *************************************************************/

          if (SL0EWX1.SL0EWUSW == "Y")
                                   /* to location was already updated*/
            VGVar.handleSysLibraryErrors = 0;
            sysLib.rollback(); /* reset all changes since last commit*/
            SL0ESRU(); /* read location for update*/
            SL5REC.YLSCD = "01";
                                   /* reset location status to empty*/
            XSSL5R0(); /* update location*/
            if (SQLCA.VAGen_SQLCODE != 0)
              SL0ESP6(); /* post data if error*/
              SL0EW02.SL0EWSZC = 0;
              SLWREC.SLWERRSW = "Y";
              SLWREC.XXXLOCID = "S21A";
              SLWREC.SLWMSGNO = 01; /* <--- severe error*/
              return;
            end
            SL0EW02.SL0EWSZC = 0;
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "S21B";
            set SL0EM210.SL8FRAR cursor, bold;
            set SL0EM210.SL8FRZN bold;
            set SL0EM210.SL8FRLC bold;
            SL0EM210.SL8TOAR = "  ";
            SL0EM210.SL8TOZN = "  ";
            SL0EM210.SL8TOLC = "      ";
            SLWREC.SLWMSGNO = 0174; /* <--- more than one sku*/
            VGVar.handleSysLibraryErrors = 1;
            sysLib.commit(); /* commit changes before proceding*/
            return;
          else
            SL0EW02.SL0EWSZC = 0;
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "S21C";
            set SL0EM210.SL8FRAR cursor, bold;
            set SL0EM210.SL8FRZN bold;
            set SL0EM210.SL8FRLC bold;
            SLWREC.SLWMSGNO = 0174; /* <--- more than one sku*/
            return;
          end
        else
          SL0EW02.SL0EWSZC = 0;
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "S21D";
          set SL0EM210.SL8TOAR cursor, bold;
          set SL0EM210.SL8TOZN bold;
          set SL0EM210.SL8TOLC bold;
          SLWREC.SLWMSGNO = 0177;
                                   /* <--- location sku not matched*/
          return;
        end
      end
    else
      if (SL0EW02.SL0EWTAT == "PR" /* processing*/
       && SL0EW02.SL0EWSPA > 0)    /* setaside exists*/
        if (SL5REC.YLTCD == "22") /* full case static loc*/
          if (SL0EWA2.XGPCD != SL0EWCP1.XGPCD
           /* compare for matching records*/
           || SL0EWA2.SY1STNBR != SL0EWCP1.SY1STNBR
           || SL0EWA2.SY2CLRID != SL0EWCP1.SY2CLRID
           || SL0EWA2.XDMCD != SL0EWCP1.XDMCD
           || SL0EWA2.XQACD != SL0EWCP1.XQACD
           || SL0EWA2.XOWCD != SL0EWCP1.XOWCD
           || SL0EWA2.XSDCD != SL0EWCP1.XSDCD
           || SL0EWA2.XSACD != SL0EWCP1.XSACD
           || SL0EWA2.XPGCD != SL0EWCP1.XPGCD
           || SL0EWA2.XUMCD != SL0EWCP1.XUMCD
           || SL0EWA2.XSLCD != SL0EWCP1.XSLCD
           || SL0EW02.SY5SZID[SLWIDX01] != SL0EWCP1.SY5SZID)
            if (SL0EW02.SL0EWEMT == "Y") /* loc was empty at start*/

   /* *************************************************************/
   /* *** THE FOLLOWING CODE IS USED WHEN THERE IS AN ERROR ON AN*/
   /* *** EMPTY LOCATION THAT WAS OBTAINED IN SL0ES7X.  THE EMPTY*/
              /* *** LOCATION WAS PREMATURELY SET TO IN-TRANSIT AND NOW*/
              /* *** NEEDS TO BE RESET TO EMPTY.*/
   /* *************************************************************/

              if (SL0EWX1.SL0EWUSW == "Y")
                                   /* to location was already updated*/
                VGVar.handleSysLibraryErrors = 0;
                sysLib.rollback(); /* reset all changes since last commit*/
                SL0ESRU(); /* read location for update*/
                SL5REC.YLSCD = "01";
                                   /* reset location status to empty*/
                XSSL5R0(); /* update location*/
                if (SQLCA.VAGen_SQLCODE != 0)
                  SL0ESP6(); /* post data if error*/
                  SL0EW02.SL0EWSZC = 0;
                  SLWREC.SLWERRSW = "Y";
                  SLWREC.XXXLOCID = "S21E";
                  SLWREC.SLWMSGNO = 01; /* <--- severe error*/
                  return;
                end
                SL0EW02.SL0EWSZC = 0;
                SLWREC.SLWERRSW = "Y";
                SLWREC.XXXLOCID = "S21F";
                set SL0EM210.SL8FRAR cursor, bold;
                set SL0EM210.SL8FRZN bold;
                set SL0EM210.SL8FRLC bold;
                SL0EM210.SL8TOAR = "  ";
                SL0EM210.SL8TOZN = "  ";
                SL0EM210.SL8TOLC = "      ";
                SLWREC.SLWMSGNO = 0174; /* <--- more than one sku*/
                VGVar.handleSysLibraryErrors = 1;
                sysLib.commit(); /* commit chngs b4 proceding*/
                return;
              else
                SL0EW02.SL0EWSZC = 0;
                SLWREC.SLWERRSW = "Y";
                SLWREC.XXXLOCID = "S21G";
                set SL0EM210.SL8FRAR cursor, bold;
                set SL0EM210.SL8FRZN bold;
                set SL0EM210.SL8FRLC bold;
                SLWREC.SLWMSGNO = 0174; /* <--- more than one sku*/
                return;
              end
            else
              SL0EW02.SL0EWSZC = 0;
              SLWREC.SLWERRSW = "Y";
              SLWREC.XXXLOCID = "S21H";
              set SL0EM210.SL8TOAR cursor, bold;
              set SL0EM210.SL8TOZN bold;
              set SL0EM210.SL8TOLC bold;
              SLWREC.SLWMSGNO = 0177; /* <--- loc sku not matched*/
              return;
            end
          end
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "S21I";
          set SL0EM210.SL8FRAR cursor, bold;
          set SL0EM210.SL8FRZN bold;
          set SL0EM210.SL8FRLC bold;
          SLWREC.SLWMSGNO = 0194; /* <--- sas exists can't move*/
          return;
        end
      end
    end
  end

  if (SL0EW02.SL0EWPEX == "N"
   && SL0EWX1.SL0EWMPF == "N")
    if (SL0EW02.SL0EWTAT != "PR") /* not processing*/
      SL0EW02.SL0EWEMT = "Y"; /* location started out empty*/
      move SL0EWA2 to SL0EWCP1 withV60Compat;
      SL0EWCP1.SY5SZID = SL0EW02.SY5SZID[SLWIDX01];
    else
      if (SL0EW02.SL0EWTAT == "PR" /* not processing*/
       && SL0EW02.SL0EWSPA > 0)    /* setaside exists*/
        if (SL5REC.YLTCD == "22") /* full case static loc*/
          if (SL0EW02.SL0EWSPA == 62 /* whse 02 prod sas*/
           || SL0EW02.SL0EWSPA == 64 /* whse 04 prod sas*/
           || SL0EW02.SL0EWSPA == 65) /* whse 07 prod sas*/
            SL0EW02.SL0EWEMT = "Y"; /* location started out empty*/
            move SL0EWA2 to SL0EWCP1 withV60Compat;
            SL0EWCP1.SY5SZID = SL0EW02.SY5SZID[SLWIDX01];
          else
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "S21I";
            set SL0EM210.SL8FRAR cursor, bold;
            set SL0EM210.SL8FRZN bold;
            set SL0EM210.SL8FRLC bold;
            SLWREC.SLWMSGNO = 0194; /* <--- sas exists can't move*/
            return;
          end
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "S21J";
          set SL0EM210.SL8FRAR cursor, bold;
          set SL0EM210.SL8FRZN bold;
          set SL0EM210.SL8FRLC bold;
          SLWREC.SLWMSGNO = 0194; /* <--- sas exists can't move*/
          return;
        end
      end
    end
  end

  SL9REC.XWHCD = SL0EM210.XWHCD;
  SL9REC.SL8WONBR = SL3REC.SL3NXWON;
  SL9REC.SY5SZID = SL0EW02.SY5SZID[SLWIDX01];
  SL9REC.SL9WOQTY = SL0EM210.SL0EWWOQ[SLWIDX01];

  SL0EW02.SL0EWSZC = SL0EW02.SL0EWSZC + 1;
  SL0EW02.SL0EWPEX = "Y"; /* move yes to product exists flag*/

   /* ************************************************************/
   /* *** setup the following before i/o sgrp execution:      ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = good return for add                        ****/
   /* ***   -911 = lockout*/
   /* ***   -803 = duplicate for add                          ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

  XSSL9A0(); /* <=== add work order item record*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == -803) /* <=== duplicate records for add*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S21J";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S21K";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S21L";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end
   /* ************************************************************/
   /* *** end of statement group                              ****/
   /* ************************************************************/
end // end SL0ES21

// update from location record
Function SL0ES22()
            /* UPDATE THE FROM LOCATION (LOCATION DB)*/
   /* ************************************************************/
   /* *** move appropiate fields for read for update          ****/
   /* ***                                                     ****/
   /* ************************************************************/

  SL5REC.XWHCD = SL0EM210.XWHCD;
  SL5REC.XARCD = VWOLHD02.SL8FRAR;
  SL5REC.SL4ZONE = VWOLHD02.SL8FRZN;
  SL5REC.SL5LOCTN = VWOLHD02.SL8FRLC;

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO and   ****/
   /* *** then setup the following before i/o sgrp execution: ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* ***   note: sgrp results will be in record              ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = not found - severe error                   ****/
   /* ***   -911 = deadlock - try again msg                   ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES22 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL5U1(); /* <=== location read for update*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S22A";
      SLWREC.SLWMSGNO = 0001; /* <--- not on db msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S22B";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      SLWREC.SLWSKYSW = "N";
      SL0EST2();
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S22C";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** move appropiate fields for update                   ****/
   /* ***                                                     ****/
   /* ************************************************************/

  if (SL5REC.YLSCD == "04") /* if in-transit*/
    SL5REC.YLSCD = "07"; /* combined to be changed later*/
  else
    SL5REC.YLSCD = "03"; /* reserve to be changed later*/
  end
  SL5REC.SL5STCDT = X2CREC.X2CCURDT;
  SL5REC.SL5FRWOC = SL5REC.SL5FRWOC + 1;

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO and   ****/
   /* *** then setup the following before i/o sgrp execution: ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* ***   note: sgrp results will be in record              ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = concurrent update                          ****/
   /* ***   -911 = deadlock - try again msg                   ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

  XSSL5R0(); /* <=== location update already coded*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for update*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S22D";
      SLWREC.SLWMSGNO = 0001; /* <--- concurrent update*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S22E";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S22F";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES22

// update to location record
Function SL0ES23()

            /* UPDATE THE  TO  LOCATION (LOCATION DB)*/
   /* ************************************************************/
   /* *** move appropiate fields to read for update           ****/
   /* *** note: if new empty loc routine has updated the      ****/
   /* ***       'to' location, skip this updatge              ****/
   /* ************************************************************/

  if (SL0EWX1.SL0EWUSW == "Y")
    return;
  end

  SL5REC.XWHCD = SL0EM210.XWHCD;
  SL5REC.XARCD = VWOLHD02.SL8TOAR;
  SL5REC.SL4ZONE = VWOLHD02.SL8TOZN;
  SL5REC.SL5LOCTN = VWOLHD02.SL8TOLC;

  TA1REC.TA1LOCAT[2] = "SL0ES23 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL5U1(); /* <=== location read for update*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (SL0EW02.SL0EWTLE == "N") /* to location not entered*/
      if (SL5REC.YLSCD == "01")
         /* ** next sentence ***/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S23A";
        SLWREC.SLWMSGNO = 0162; /* to loc not open msg*/
        SL0EM210.SL8TOLC = " ";
        set SL0EM210.SL8TOLC cursor, bold;
        return;
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S23B";
      SLWREC.SLWMSGNO = 0001; /* <--- not on db msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S23C";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      SLWREC.SLWSKYSW = "N";
      SL0EST2();
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S23D";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** move appropiate fields for update  and              ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ************************************************************/

  if (SL5REC.YLSCD == "03") /* ; if reserved*/
    SL5REC.YLSCD = "07"; /* move in combined status*/
  else
    SL5REC.YLSCD = "04"; /* in transit*/
  end
  SL5REC.SL5STCDT = X2CREC.X2CCURDT;
  SL5REC.SL5TOWOC = SL5REC.SL5TOWOC + 1;

  XSSL5R0(); /* <=== location update already coded*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S23E";
      SLWREC.SLWMSGNO = 0001; /* <--- concurrent update*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S23F";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S23G";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES23

// edit negative qntys
Function SL0ES24()
   /* ************************************************************/
   /* *** qnty must not be less than zero                     ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SL0EWC0.SL0EWNSS)
    if (SL0EM210.SL0EWWOQ[SLWIDX01] < 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S24A";
      SLWREC.SLWMSGNO = 0129;
      set SL0EM210.SL0EWWOQ[SLWIDX01] cursor, bold;
      return;
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES24

// to and from setaside same
Function SL0ES25()
   /* ***********************************************************/
   /* *** if the "from" location has a setaside, make sure   ****/
   /* *** the setaside id is the same for the "to" location. ****/
   /* ***********************************************************/

   /* ***********************************************************/
   /* *** obtain product/location record for the "from"      ****/
   /* *** location                                           ****/
   /* ***********************************************************/

  SL0ES26(); /* obtain prod/loc for "from" loc*/
  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0EW22.INASAID = 0;
  SL0EW22.SL0EWSAF = "N"; /* setaside exists flag*/

  while (SQLCA.VAGen_SQLCODE == 0
   && SL0EW22.SL0EWSAF == "N"
   && SLWREC.SLWERRSW != "Y")
    if (VSYLOC02.INASAID > 0)
      SL0EW22.SL0EWSAF = "Y"; /* setaside exists falg*/
      SL0EW22.INASAID = VSYLOC02.INASAID;
    else
      SL0ES28(); /* fetch next prod/loc*/
    end
  end

  XSSLS-C1-VSYLOC02(); /* close cursor*/
  if (SQLCA.VAGen_SQLCODE != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S25A";
    SLWREC.SLWMSGNO = 001; /* severe error msg*/
  end
  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ***********************************************************/
   /* *** the following is only performed if there is a      ****/
   /* *** setaside in the from location.                     ****/
   /* ***********************************************************/

   /* ***********************************************************/
   /* *** obtain product/location record for the "to"        ****/
   /* *** location                                           ****/
   /* ***********************************************************/

  SL0ES27(); /* obtain prod/loc for "to" loc*/
  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0EW22.SL0EWOK = "N"; /* setaside ok flag*/

  while (SQLCA.VAGen_SQLCODE == 0)

    if (SL0EW22.SL0EWOK == "N"
     && SLWREC.SLWERRSW != "Y")
      if (SL0EW22.SL0EWSAF == "Y" /* setaside exist in "from" loc*/
       || SL0EM210.XWHCD == "02"  /* or Greenland*/
       || SL0EM210.XWHCD == "04"  /* or Memphis Footwear*/
       || SL0EM210.XWHCD == "07") /* or Wilsonville*/
        if (VSYLOC02.INASAID > 0) /* "to" setaside gt 0*/
          if (VSYLOC02.INASAID == SL0EW22.INASAID) /* "to" = "from"*/
            SL0EW22.SL0EWOK = "Y"; /* setaside ok, stops loop*/
          else
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "S25B";
            SLWREC.SLWMSGNO = 159; /* setaside id's don't match*/
          end
        else
          if (SL0EW22.SL0EWSAF == "Y") /* Setaside exists in "from" loc*/
            if (SL0EM210.XWHCD == "02" /* Greenland*/
             || SL0EM210.XWHCD == "04" /* Memphis Footwear*/
             || SL0EM210.XWHCD == "07") /* Wilsonvile*/
              if (VSYLOC02.INASAID == SL0EW22.INASAID) /* "to" & "from = 0*/
                SL0EW22.SL0EWOK = "Y"; /* setaside ok, stops loop*/
              else
                SLWREC.SLWERRSW = "Y";
                SLWREC.XXXLOCID = "S25C";
                SLWREC.SLWMSGNO = 159; /* setaside id's don't match*/
              end
            end
          end
        end
      end

      if (SL0EM210.INASAID > 0 /* setaside entered on scrn*/
       && SLWREC.SLWERRSW != "Y") /* & no error yet*/
        if (SL0EM210.INASAID == VSYLOC02.INASAID) /* "screen" = "to"*/
          SL0EW22.SL0EWOK = "Y"; /* setaside ok, stops loop*/
        else
          if (SL0EM210.XWHCD == "02" /* Greenland*/
           || SL0EM210.XWHCD == "04" /* Memphis Footwear*/
           || SL0EM210.XWHCD == "07") /* Wilsonvile*/
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "S25D";
            SLWREC.SLWMSGNO = 159; /* setaside id's don't match*/
            set SL0EM210.INASAID bold;
          else
            if (VSYLOC02.INASAID <= 0                /* "to" loc has no setaside and*/
             && (SL0EM210.INASAID == SL0EW22.INASAID /* "scrn" = "from"*/
             || SL0EW22.INASAID <= 0))               /* or "from" has no set aside*/
              SL0EW22.SL0EWOK = "Y"; /* setaside ok, stops loop*/
            else
              SLWREC.SLWERRSW = "Y";
              SLWREC.XXXLOCID = "S25E";
              SLWREC.SLWMSGNO = 159; /* setaside id's don't match*/
              set SL0EM210.INASAID bold;
            end
          end
        end
      end

      if (SLWREC.SLWERRSW != "Y") /* no error yet*/
        if (SL5REC.YLTCD != "22"   /* Not hand stack*/
         && SL5REC.YLTCD != "06"   /* Not hand stack bulk*/
         && SL5REC.YLTCD != "11"   /* not flow picking*/
         && SL5REC.YLTCD != "12"   /* Not static picking*/
         && SL5REC.SL5MPDFL != "Y" /* and not multi-sku*/
         && VSYLOC02.SY1UNPCS != SL0EM210.SY1UNPCS)
                                   /* and units/case differs*/
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "S25F";
          SLWREC.SLWMSGNO = 226; /* no match units per case*/
        end
      end
    end

    if (SLWREC.SLWERRSW == "Y") /* no error yet*/
      set SL0EM210.SL8TOLC bold;
      set SL0EM210.SL8TOZN bold;
      set SL0EM210.SL8TOAR bold;
      set SL0EM210.SL8FRLC bold;
      set SL0EM210.SL8FRZN bold;
      set SL0EM210.SL8FRAR cursor, bold;
    end

    SL0ES2N(); /* fetch next prod/loc*/
  end

  XSSLS-C4-VSYLOC02(); /* close cursor*/
  if (SQLCA.VAGen_SQLCODE != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S25G";
    SLWREC.SLWMSGNO = 001; /* severe error msg*/
  end

   /* ***********************************************************/
   /* *** end of statement group                             ****/
   /* ***********************************************************/
end // end SL0ES25

// obtain prod/loc for from loc
Function SL0ES26()
   /* ************************************************************/
   /* *** obtain product/location records for the "from"      ****/
   /* *** location                                            ****/
   /* ***                                                     ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO       ****/
   /* *** VSYLOC02                                              ****/
   /* ***                                                     ****/
   /* ************************************************************/

  set VSYLOC02 empty;

  VSYLOC02.XWHCD = SL0EM210.XWHCD;
  VSYLOC02.XARCD = SL0EM210.SL8FRAR;
  VSYLOC02.SL4ZONE = SL0EM210.SL8FRZN;
  VSYLOC02.SL5LOCTN = SL0EM210.SL8FRLC;

  if (SL0EM210.SL2PALET == " ")
    VSYLOC02.SL2PALET = "*"; /* wild card palet*/
  else
    VSYLOC02.SL2PALET = SL0EM210.SL2PALET;
  end

  if (SL0EM210.SL2CASE == " ")
    VSYLOC02.SL2CASE = "*"; /* wild card case*/
  else
    VSYLOC02.SL2CASE = SL0EM210.SL2CASE;
  end

  if (SL0EM210.XGPCD == " ")
    VSYLOC02.XGPCD = "*"; /* wild card case*/
  else
    VSYLOC02.XGPCD = SL0EM210.XGPCD;
  end

  if (SL0EM210.SY1STNBR == " ")
    VSYLOC02.SY1STNBR = "*"; /* wild card case*/
  else
    VSYLOC02.SY1STNBR = SL0EM210.SY1STNBR;
  end

  if (SL0EM210.SY2CLRID == " ")
    VSYLOC02.SY2CLRID = "*"; /* wild card case*/
  else
    VSYLOC02.SY2CLRID = SL0EM210.SY2CLRID;
  end

  if (SL0EM210.XDMCD == " ")
    VSYLOC02.XDMCD = "*"; /* wild card case*/
  else
    VSYLOC02.XDMCD = SL0EM210.XDMCD;
  end

  if (SL0EM210.XQACD == " ")
    VSYLOC02.XQACD = "*"; /* wild card case*/
  else
    VSYLOC02.XQACD = SL0EM210.XQACD;
  end

  if (SL0EM210.XOWCD == " ")
    VSYLOC02.XOWCD = "*"; /* wild card case*/
  else
    VSYLOC02.XOWCD = SL0EM210.XOWCD;
  end

  if (SL0EM210.XSDCD == " ")
    VSYLOC02.PC2INSEG = "*"; /* wild card case*/
  else
    VSYLOC02.PC2INSEG = SL0EM210.XSDCD;
  end

  VSYLOC02.XEGCD = "*"; /* wild card case*/

  if (SL0EM210.XPGCD == " ")
    VSYLOC02.XPGCD = "*"; /* wild card case*/
  else
    VSYLOC02.XPGCD = SL0EM210.XPGCD;
  end

  if (SL0EM210.XUMCD == " ")
    VSYLOC02.XUMCD = "*"; /* wild card case*/
  else
    VSYLOC02.XUMCD = SL0EM210.XUMCD;
  end

  if (SL0EM210.XSLCD == " ")
    VSYLOC02.XSLCD = "*"; /* wild card case*/
  else
    VSYLOC02.XSLCD = SL0EM210.XSLCD;
  end

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO and   ****/
   /* *** then setup the following before i/o sgrp execution: ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* ***   note: sgrp results will be in record              ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = not found - setup not fnd error/msg        ****/
   /* ***   -911 = deadlock - try again msg                   ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES26 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSLS-S1-VSYLOC02(); /* <=== std prod loctn selset*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == +100) /* <=== for selset*/
    /* ***  next sentence  ****/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S26A";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S26B";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
  end

  SL0EW22.SL2PALET = VSYLOC02.SL2PALET;
  SL0EW22.SL2CASE = VSYLOC02.SL2CASE;
  SL0EW22.PC3PONBR = VSYLOC02.PC3PONBR;
  SL0EW22.PC-SAP-PO-NBR = VSYLOC02.PC-SAP-PO-NBR;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES26

// obtain prd/loc rec for to loc
Function SL0ES27()
   /* ************************************************************/
   /* *** obtain product/location records for the "to"        ****/
   /* *** location.                                           ****/
   /* ***                                                     ****/
   /* ************************************************************/

  set SL5REC empty;

  SL5REC.XWHCD = SL0EM210.XWHCD;
  SL5REC.XARCD = SL0EM210.SL8TOAR;
  SL5REC.SL4ZONE = SL0EM210.SL8TOZN;
  SL5REC.SL5LOCTN = SL0EM210.SL8TOLC;

  XSSL5I0();

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO       ****/
   /* *** VSYLOC02                                              ****/
   /* ***                                                     ****/
   /* ************************************************************/

  set VSYLOC02 empty;

  VSYLOC02.XWHCD = SL0EM210.XWHCD;
  VSYLOC02.XARCD = SL0EM210.SL8TOAR;
  VSYLOC02.SL4ZONE = SL0EM210.SL8TOZN;
  VSYLOC02.SL5LOCTN = SL0EM210.SL8TOLC;
  VSYLOC02.SL2PALET = "*"; /* wild card palet*/
  VSYLOC02.SL2CASE = "*"; /* wild card case*/

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO and   ****/
   /* *** then setup the following before i/o sgrp execution: ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* ***   note: sgrp results will be in record              ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = not found - setup not fnd error/msg        ****/
   /* ***   -911 = deadlock - try again msg                   ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES27 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSLS-S4-VSYLOC02(); /* <=== std prod loctn selset*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == +100) /* <=== for selset*/
    /* ***  next sentence  ****/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S27A";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S27B";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES27

// fetch next prod/loc record
Function SL0ES28()
        /* FETCH THE NEXT ROW FROM THE PRODUCT/LOCATION DB*/
   /* ************************************************************/
   /* *** setup the approriate record fields for the IO and   ****/
   /* *** then setup the following before i/o sgrp execution: ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* ***   note: sgrp results will be in record              ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = no more records*/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES28 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSLS-N1-VSYLOC02(); /* fetch next prod/loc record*/

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for FETCH scan*/
      return;
    else
      SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
      SLWREC.XXXLOCID = "S28A";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES28

// get empty full case location
Function SL0ES29()

   /* ************************************************************/
   /* *** get empty full case location                        ****/
   /* ************************************************************/

  set SL5REC empty;

  SL5REC.XWHCD = SL0EM210.XWHCD;
  SL5REC.XARCD = SL0EM210.SL8TOAR;
  SL5REC.SL4ZONE = SL0EM210.SL8TOZN;
  if (SL0EM210.XWHCD == "02" /* whse 02*/
   && SL0EW02.SL0EWSPA == 62) /* whse 02 prod sas*/
    SL5REC.YLTCD = "22"; /* full case static only*/
  else
    if (SL0EM210.XWHCD == "04" /* whse 04*/
     && SL0EW02.SL0EWSPA == 64) /* whse 04 prod sas*/
      SL5REC.YLTCD = "22"; /* full case static only*/
    else
      if (SL0EM210.XWHCD == "07" /* whse 07*/
       && SL0EW02.SL0EWSPA == 65) /* whse 07 prod sas*/
        SL5REC.YLTCD = "22"; /* full case static only*/
      else
        if (SL0EM210.XWHCD == "25" /* whse 25*/
         && SL0EW02.SL0EWSPA == 68) /* whse 25 prod sas*/
          SL5REC.YLTCD = "22"; /* full case static only*/
        else
          if (SL0EM210.XWHCD == "51" /* whse 51*/
           && SL0EW02.SL0EWSPA == 69) /* whse 51 prod sas*/
            SL5REC.YLTCD = "22"; /* full case static only*/
          else
            if (SL0EM210.XWHCD == "42" /* Canada*/
             && SL0EW02.SL0EWSPA == 103) /* Canada prod sas*/
              SL5REC.YLTCD = "22"; /* full case static only*/
            else
              SL5REC.YLTCD = "*"; /* wild card loc type*/
            end
          end
        end
      end
    end
  end
  SL5REC.YLSCD = "01"; /* move empty status*/
  SL5REC.SL-LOC-SZ-IND = SL0EWX1.SL-LOC-SZ-IND;
                                   /* specify short pallet flag type*/
  SL5REC.SL5MPDFL = SL0EWX1.SL0EWMPF;
                                   /* specify mult product flag type*/

  TA1REC.TA1LOCAT[2] = "SL0ES29 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL5S1(); /* <=== select set of location records*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (SL0EM210.XWHCD == "02"
     || SL0EM210.XWHCD == "04"
     || SL0EM210.XWHCD == "07"
     || SL0EM210.XWHCD == "25"
     || SL0EM210.XWHCD == "51"
     || SL0EM210.XWHCD == "42") /* Canada*/
      while (SL5REC.SL5STCDT >= SL0EW22.SL0EWDT
       /* <=== empty at least 2 days*/
       && SQLCA.VAGen_SQLCODE == 0)
        XSSL5F1(); /* <=== fetch next location*/
      end
    else
      return;
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    SL0EM210.SL8TOLC = SL5REC.SL5LOCTN;
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for select set*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S29A";
      SLWREC.SLWMSGNO = 0046; /* <--- a/z/l not loc db*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S29B";
        SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      else
        SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
        SLWREC.XXXLOCID = "S29C";
        SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      end
    end
  end

  XSSL5C1();

  if (SQLCA.VAGen_SQLCODE == 0)
    /* ***  next sentence  ****/
  else
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S29D";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES29

// obtain from area type
Function SL0ES2A()

   /* ************************************************************/
   /* *** obtain from area type                               ****/
   /* ************************************************************/

  SLWREC.XWHCD = SL0EM210.XWHCD;
  SLWREC.SLWTBLCD = SL0EW02.SL0EWFAC;
  if (SLWREC.SLWTBLKY in XARTBL.XARKEY)
    if (XARTBL.XARBLKFL[sysVar.arrayIndex] == "Y")
      SL0EW02.SL0EWFAT = "BU"; /* bulk storage*/
    else
      if (XARTBL.XARPRCFL[sysVar.arrayIndex] == "Y")
        SL0EW02.SL0EWFAT = "PR"; /* processing*/
      else
        if (XARTBL.XARRCVFL[sysVar.arrayIndex] == "Y")
          SL0EW02.SL0EWFAT = "RE"; /* receiving*/
        else
          if (XARTBL.XARPKHFL[sysVar.arrayIndex] == "Y")
            SL0EW02.SL0EWFAT = "PA"; /* pack/hold*/
          else
            if (XARTBL.XARRTNFL[sysVar.arrayIndex] == "Y")
              SL0EW02.SL0EWFAT = "RT"; /* returns*/
            else
              if (XARTBL.XARSHPFL[sysVar.arrayIndex] == "Y")
                SL0EW02.SL0EWFAT = "SH"; /* shipping*/
              else
                 /* all flags are 'n' = misc area*/
                 /* misc area = same as processing w/out flag = y*/
                 /* therefore: just setup "bu" area type*/
                SL0EW02.SL0EWFAT = "BU"; /* processing*/
                return;
              end
            end
          end
        end
      end
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S2AB";
    SLWREC.SLWMSGNO = 11;
    set SL0EM210.SL8FRAR cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES2A

// obtain from zone process type
Function SL0ES2B()
   /* *************************************************************/
   /* ***   GET FROM ZONE PROCESS TYPE USING FROM ZONE TYPE    ****/
   /* *************************************************************/
  if (SL4REC.YZTCD in YZTTBL.YZTCD)
    if (YZTTBL.YZTFCSFL[sysVar.arrayIndex] == "Y")
      SL0EW02.SL0EWFZP = "FU"; /* full case*/
    else
      if (YZTTBL.YZTPKGFL[sysVar.arrayIndex] == "Y")
        SL0EW02.SL0EWFZP = "PI"; /* picking*/
      else
         /* all flags are 'n' = misc area's zone*/
         /* misc area's zone = same as full case*/
         /* therefore: just setup "FU" zone type*/
        SL0EW02.SL0EWFZP = "FU"; /* full case*/
      end
    end
  end
end // end SL0ES2B

// obtain to area type
Function SL0ES2C()
   /* ************************************************************/
   /* ***   obtain to area type using screen to area code     ****/
   /* ************************************************************/

  SLWREC.XWHCD = SL0EM210.XWHCD;
  SLWREC.SLWTBLCD = SL0EW02.SL0EWTAC;
  if (SLWREC.SLWTBLKY in XARTBL.XARKEY)
    if (XARTBL.XARBLKFL[sysVar.arrayIndex] == "Y")
      SL0EW02.SL0EWTAT = "BU"; /* bulk storage*/
    else
      if (XARTBL.XARPRCFL[sysVar.arrayIndex] == "Y")
        SL0EW02.SL0EWTAT = "PR"; /* processing*/
      else
        if (XARTBL.XARRCVFL[sysVar.arrayIndex] == "Y")
          SL0EW02.SL0EWTAT = "RE"; /* receiving*/
        else
          if (XARTBL.XARPKHFL[sysVar.arrayIndex] == "Y")
            SL0EW02.SL0EWTAT = "PA"; /* pack and hold*/
          else
            if (XARTBL.XARRTNFL[sysVar.arrayIndex] == "Y")
              SL0EW02.SL0EWTAT = "RT"; /* returns*/
            else
              if (XARTBL.XARSHPFL[sysVar.arrayIndex] == "Y")
                SL0EW02.SL0EWTAT = "SH"; /* shipping*/
              else
                 /* all flags are 'n' = misc area*/
                 /* misc area = same as processing w/out flag = y*/
                 /* therefore: just setup "bu" area type*/
                SL0EW02.SL0EWTAT = "BU"; /* processing*/
                return;
              end
            end
          end
        end
      end
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S2CB";
    SLWREC.SLWMSGNO = 11;
    set SL0EM210.SL8TOAR cursor, bold;
  end
end // end SL0ES2C

// obtain to zone process type
Function SL0ES2D()
   /* *************************************************************/
   /* ***  get and save to zone processing type using to zone type*/
   /* *************************************************************/

  if (SL4REC.YZTCD in YZTTBL.YZTCD)
    if (YZTTBL.YZTFCSFL[sysVar.arrayIndex] == "Y")
      SL0EW02.SL0EWTZP = "FU"; /* full case*/
    else
      if (YZTTBL.YZTPKGFL[sysVar.arrayIndex] == "Y")
        SL0EW02.SL0EWTZP = "PI"; /* picking*/
      else
         /* all flags are 'n' = misc area's zone*/
         /* misc area's zone = same as full case*/
         /* therefore: just setup "FU" zone type*/
        SL0EW02.SL0EWTZP = "FU"; /* full case*/
      end
    end
  end
end // end SL0ES2D

// obtain table data
Function SL0ES2E()
                   /* obtain table data  sl0es2e*/
   /* ***********************************************************/
   /* *** SL0ES2E                                            ****/
   /* ***   verify from location data                        ****/
   /* ***   verify to location data                          ****/
   /* ***   verify style / color                             ****/
   /* ***   find products in the from location on the prod/loc***/
   /* ***   determine if more than one product found         ****/
   /* ***********************************************************/

   /* ***********************************************************/
   /* *** Verify from location data                          ****/
   /* ***********************************************************/

  SL0ES2I(); /* <=== verify from location*/
  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ***********************************************************/
   /* *** Verify to   location data                          ****/
   /* ***********************************************************/

  if (SL0EW02.SL0EWTAC != " ")
    if (SL0EW02.SL0EWTZC != " ")
      if (SL0EM210.SL8TOLC != "      ")
        SL0ES2J(); /* <=== verify to location*/
        if (SLWREC.SLWERRSW == "Y")
          return;
        end
      end
    end
  end

   /* ***********************************************************/
   /* *** obtain the products in the to location using prod/loc*/
   /* ***********************************************************/

  if (SL0EW02.SL0EWTAC != " ")
    if (SL0EW02.SL0EWTZC != " ")
      if (SL0EM210.SL8TOLC != "      ")
        if (SL0EWX1.SL0EWMPF == "N")
          SL0ES9R(); /* obtain to location products*/
          if (SLWREC.SLWERRSW == "Y")
            return;
          end
        end
      end
    end
  end

   /* ***********************************************************/
   /* *** Verify style color data and obtain abbrev. for map ****/
   /* ***********************************************************/

  if (SL0EM210.SY1STNBR != " ")
    SL0ES2K(); /* obtain style color data*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
  end

   /* ***********************************************************/
   /* *** obtain all products for the from location          ****/
   /* *** using the prod/loc db. if the from area type is    ****/
   /* *** receiving then use the pallet number else use      ****/
   /* *** '******' for the pallet number                     ****/
   /* ***********************************************************/

  SL0ES2L(); /* select all prod for receiving area*/
  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0ES2M(); /* load prod/loc cursor to tsq*/
  if (SLWREC.SLWERRSW == "Y")
    TA5REC.TA5FNCCD = "P";
    call "TA0050" (SL0EWB2, TA5REC); /* purge tsq*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES2E

// process single product
Function SL0ES2F()
                /* process single products to obtain sizes*/
   /* ***********************************************************/
   /* *** SL0ES2F                                            ****/
   /* *** read each tsq record to accumulate qntys per size  ****/
   /* *** and move size/qnty to screen. uses sy1120 to obtain****/
   /* *** size desc for screen.                              ****/
   /* *** error if style entered and screen prod ne VSYLOC02 ****/
   /* ***    warning if setaside qnty for prod is > 0        ****/
   /* ***    grand total qnty on screen when tsq is empty    ****/
   /* ***    tsq contains multiple records per a single prod ****/
   /* ***        because of different sizes                  ****/
   /* ***********************************************************/

   /* ***********************************************************/
   /* *** obtain first tsq record and initialize totals      ****/
   /* ***    save first tsq rec for change in size and case  ****/
   /* ***    number (sl0ewa2)                                ****/
   /* ***********************************************************/

  set SL0EWA2 empty; /* clear out the working storage for loc/prod rec*/
  SL0EW02.SL0EWPTO = 0; /* clear out grand total qnty*/
  SL0EW02.SL0EWSTO = 0; /* clear out size total qnty*/
                               /* get first tsq record*/
  TA5REC.TA5FNCCD = "R";
  TA5REC.TA5TSQIX = 1;
  call "TA0050" (SL0EWB2, TA5REC); /* READ TSQ RECORD*/
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S2FA";
    SLWREC.SLWMSGNO = 01; /* error reserved status*/
    return;
  else
    VSYLOC02.VSYLOC02-DATA = SL0EWB2.SL0EWXDL; /* move tsq to VSYLOC02*/
  end
  SL0EWA2.SL6DATA = VSYLOC02.VSYLOC02-DATA;
  SLWREC.SLWIDX01 = 1; /* set screen position to 1 for moves*/

   /* ***********************************************************/
   /* *** if the style number entered on screen then screen  ****/
   /* ***   product must equal the VSYLOC02 product            ****/
   /* *** else, if the style nbr was not entered then        ****/
   /* ***     move the VSYLOC02 product data to the screen     ****/
   /* ***********************************************************/

  if (SL0EM210.SY1STNBR != " ")
    if (SL0EM210.XGPCD != VSYLOC02.XGPCD
     || SL0EM210.SY1STNBR != VSYLOC02.SY1STNBR
     || SL0EM210.SY2CLRID != VSYLOC02.SY2CLRID
     || SL0EM210.XDMCD != VSYLOC02.XDMCD
     || SL0EM210.XQACD != VSYLOC02.XQACD
     || SL0EM210.XOWCD != VSYLOC02.XOWCD
     || SL0EM210.XSDCD != VSYLOC02.PC2INSEG
     || SL0EM210.XSLCD != VSYLOC02.XSLCD
     || SL0EM210.XPGCD != VSYLOC02.XPGCD
     || SL0EM210.XUMCD != VSYLOC02.XUMCD
     || SL0EM210.SY1UNPCS != VSYLOC02.SY1UNPCS)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2FB";
      SLWREC.SLWMSGNO = 64; /* error: product keys don't match*/
      set SL0EM210.XGPCD cursor, bold;
      set SL0EM210.SY1STNBR bold;
      set SL0EM210.SY2CLRID bold;
      set SL0EM210.XDMCD bold;
      set SL0EM210.XQACD bold;
      set SL0EM210.XOWCD bold;
      set SL0EM210.XSDCD bold;
      set SL0EM210.XSLCD bold;
      set SL0EM210.XPGCD bold;
      set SL0EM210.XUMCD bold;
      set SL0EM210.SY1UNPCS bold;
      return;
    end
  else
    SL0EM210.XGPCD = VSYLOC02.XGPCD;
    SL0EM210.SY1STNBR = VSYLOC02.SY1STNBR;
    SL0EM210.SY2CLRID = VSYLOC02.SY2CLRID;
    SL0EM210.XDMCD = VSYLOC02.XDMCD;
    SL0EM210.XQACD = VSYLOC02.XQACD;
    SL0EM210.XOWCD = VSYLOC02.XOWCD;
    SL0EM210.XSDCD = VSYLOC02.PC2INSEG;
    SL0EM210.XSLCD = VSYLOC02.XSLCD;
    SL0EM210.XPGCD = VSYLOC02.XPGCD;
    SL0EM210.XUMCD = VSYLOC02.XUMCD;
    SL0EM210.SY1UNPCS = VSYLOC02.SY1UNPCS;
  end

   /* *****************************************************/
        /* get size size dat for the product*/
   /* *****************************************************/

  SL0ES2O(); /* get syprec size record for product(sy1120)*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ***********************************************************/
   /* *** process remaining tsq records for the product      ****/
   /* ***********************************************************/

  while (TA5REC.TA5RTNCD != 7)

    /* ***********************************************************/
    /* *** if the setaside qnty for the product is > 0        ****/
    /* ***   then flash a warning to the screen. do not repeat****/
    /* ***   the warning a second time for the same product   ****/
    /* ***********************************************************/

    if (VSYLOC02.SL6STASD > 0)
      if (SLWREC.SLWFTMSW == "Y")
        SLWREC.SLWFTMSW = "N";
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S2FC";
        SLWREC.SLWMSGNO = 41; /* warning for setaside*/
        set SL0EM210.SY1STNBR cursor, bold;
        return;
      end
    end

    if (VSYLOC02.SY5SZID == SL0EWA2.SY5SZID)
      SL0EW02.SL0EWSTO = SL0EW02.SL0EWSTO + VSYLOC02.SL6ONHND;
                                   /* accum size qt*/
      SL0EW02.SL0EWSTO = SL0EW02.SL0EWSTO - VSYLOC02.SL6PKRSV;
                                   /* accum size qt*/
    else
      if (SL0EW02.SL0EWSTO > 0)
        SL0EW02.SL0EWPTO = SL0EW02.SL0EWPTO + SL0EW02.SL0EWSTO; /* acc gnd tot*/
        SLWREC.SLWIDX02 = SL0EWA2.SY5SZID;
        if (SYPREC.SY4IDDSC[SLWIDX02] > " ")
          SL0EM210.SY4IDDSC[SLWIDX01] = SYPREC.SY4IDDSC[SLWIDX02];
        else
          SL0EM210.SY4IDDSC[SLWIDX01] = "**";
        end
        SL0EM210.SL0EWWOQ[SLWIDX01] = SL0EW02.SL0EWSTO;
        if (SL0EM210.SL8ITMFL == "Y")
          SL0EM210.SL0EWWOQ[SLWIDX01] = 0;
        end
        SL0EW02.SL0EWWOQ[SLWIDX01] = SL0EW02.SL0EWSTO; /* save qnty*/
        SL0EW02.SY5SZID[SLWIDX01] = SL0EWA2.SY5SZID;
                                   /* save size id*/
        SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
        SL0EWA2.SY5SZID = VSYLOC02.SY5SZID;
        SL0EW02.SL0EWSTO = 0;
        SL0EW02.SL0EWSTO = SL0EW02.SL0EWSTO + VSYLOC02.SL6ONHND;
                                         /* accum size*/
        SL0EW02.SL0EWSTO = SL0EW02.SL0EWSTO - VSYLOC02.SL6PKRSV;
                                         /* accum size*/
      else
        if (SL0EW02.SL0EWSTO < 0)
          SLWREC.SLWMSGNO = 138; /* warning for negative*/
          SL0EWA2.SY5SZID = VSYLOC02.SY5SZID;
          SL0EW02.SL0EWSTO = 0;
          SL0EW02.SL0EWSTO = SL0EW02.SL0EWSTO + VSYLOC02.SL6ONHND;
          SL0EW02.SL0EWSTO = SL0EW02.SL0EWSTO - VSYLOC02.SL6PKRSV;
        else
          SL0EWA2.SY5SZID = VSYLOC02.SY5SZID;
          SL0EW02.SL0EWSTO = 0;
          SL0EW02.SL0EWSTO = SL0EW02.SL0EWSTO + VSYLOC02.SL6ONHND;
          SL0EW02.SL0EWSTO = SL0EW02.SL0EWSTO - VSYLOC02.SL6PKRSV;
        end
      end
    end

    TA5REC.TA5FNCCD = "R"; /* get next tsq record*/
    TA5REC.TA5TSQIX = TA5REC.TA5TSQIX + 1;
    call "TA0050" (SL0EWB2, TA5REC); /* READ TSQ RECORD*/
    if (TA5REC.TA5RTNCD == 0
     || TA5REC.TA5RTNCD == 7)
      VSYLOC02.VSYLOC02-DATA = SL0EWB2.SL0EWXDL;
                                      /* move tsq to VSYLOC02*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2FE";
      SLWREC.SLWMSGNO = 01; /* error reserved status*/
      return;
    end
  end

   /* ***********************************************************/
   /* *** at end of tsq, move last size and grand tot to map ****/
   /* ***********************************************************/

  if (SL0EW02.SL0EWSTO > 0)
    SL0EW02.SL0EWPTO = SL0EW02.SL0EWPTO + SL0EW02.SL0EWSTO; /* acc gnd tot*/
    if (SL0EW02.SL0EWPTO == 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2FF";
      SLWREC.SLWMSGNO = 139; /* all product items had zero qnty*/
      return;
    end
    SLWREC.SLWIDX02 = SL0EWA2.SY5SZID;
    if (SYPREC.SY4IDDSC[SLWIDX02] > " ")
      SL0EM210.SY4IDDSC[SLWIDX01] = SYPREC.SY4IDDSC[SLWIDX02];
    else
      SL0EM210.SY4IDDSC[SLWIDX01] = "**";
    end
    SL0EM210.SL0EWWOQ[SLWIDX01] = SL0EW02.SL0EWSTO;
    if (SL0EM210.SL8ITMFL == "Y")
      SL0EM210.SL0EWWOQ[SLWIDX01] = 0;
    end
    SL0EW02.SL0EWWOQ[SLWIDX01] = SL0EW02.SL0EWSTO; /* save qnty*/
    SL0EW02.SY5SZID[SLWIDX01] = SL0EWA2.SY5SZID; /* save size*/
    SL0EWC0.SL0EWNSS = SLWREC.SLWIDX01;
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
    if (SL0EM210.SL8ITMFL == "N")
      SL0EM210.SL0EWWOQ[SLWIDX01] = SL0EW02.SL0EWPTO;
    else
      SL0EM210.SL0EWWOQ[SLWIDX01] = 0;
    end
    SL0EM210.SY4IDDSC[SLWIDX01] = "TOTAL";
  else
    if (SL0EW02.SL0EWSTO < 0)
      SL0EW02.SL0EWPTO = SL0EW02.SL0EWPTO + SL0EW02.SL0EWSTO;
                                   /* acc gnd tot*/
      if (SL0EW02.SL0EWPTO == 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S2FF";
        SLWREC.SLWMSGNO = 139; /* all product items had zero*/
        return;
      end
      SLWREC.SLWMSGNO = 138; /* less than zero item qnty*/
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1; /* back to prev siz entered*/
      SL0EWC0.SL0EWNSS = SLWREC.SLWIDX01;
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
      SL0EM210.SL0EWWOQ[SLWIDX01] = SL0EW02.SL0EWPTO;
      SL0EM210.SY4IDDSC[SLWIDX01] = "TOTAL";
      if (SL0EM210.SL8ITMFL == "Y")
        SL0EM210.SL0EWWOQ[SLWIDX01] = 0;
      end
    else
      SL0EW02.SL0EWPTO = SL0EW02.SL0EWPTO + SL0EW02.SL0EWSTO;
                                   /* acc gnd tot*/
      if (SL0EW02.SL0EWPTO == 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S2FF";
        SLWREC.SLWMSGNO = 139; /* all product items had zero*/
        return;
      end
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1; /* back to prev siz entered*/
      SL0EWC0.SL0EWNSS = SLWREC.SLWIDX01;
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
      SL0EM210.SL0EWWOQ[SLWIDX01] = SL0EW02.SL0EWPTO;
      SL0EM210.SY4IDDSC[SLWIDX01] = "TOTAL";
      if (SL0EM210.SL8ITMFL == "Y")
        SL0EM210.SL0EWWOQ[SLWIDX01] = 0;
      end
    end
  end

   /* ***********************************************************/
   /* *** darken out rest of screen for sizes                ****/
   /* ***********************************************************/

  SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  while (SLWREC.SLWIDX01 <= 40)
    set SL0EM210.SY4IDDSC[SLWIDX01] skip, invisible;
    set SL0EM210.SL0EWWOQ[SLWIDX01] skip, invisible;
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ***********************************************************/
   /* *** end of statement group                             ****/
   /* ***********************************************************/
end // end SL0ES2F

// process multiple products
Function SL0ES2G()
                /* process multiple products to obtain sizes*/
   /* ***********************************************************/
   /* *** SL0ES2G                                            ****/
   /* *** read each tsq record to accumulate qntys per size  ****/
   /* *** and move size/qnty to screen. uses sy1120 to obtain****/
   /* *** size desc for screen.                              ****/
   /* ***    error if case nbr changes                       ****/
   /* ***    warning if setaside qnty for prod is > 0        ****/
   /* ***    grand total qnty on screen when tsq is empty    ****/
   /* ***    tsq contains multiple records per a single prod ****/
   /* ***        because of different sizes and possibly     ****/
   /* ***        multiple cases                              ****/
   /* ***********************************************************/

   /* ***********************************************************/
   /* *** obtain first tsq record and initialize totals      ****/
   /* ***    save first tsq rec for change in size and case  ****/
   /* ***    number (sl0ewa2)                                ****/
   /* ***********************************************************/

  set SL0EWA2 empty; /* clear out the working storage for*/
                                   /* loc/prod rec*/
  SL0EW02.SL0EWPTO = 0; /* clear out grand total qnty*/
  SL0EW02.SL0EWSTO = 0; /* clear out size total qnty*/
                               /* get first tsq record*/
  TA5REC.TA5FNCCD = "R";
  TA5REC.TA5TSQIX = 1;
  call "TA0050" (SL0EWB2, TA5REC); /* READ TSQ RECORD*/
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S2GA";
    SLWREC.SLWMSGNO = 01; /* error reserved status*/
    return;
  else
    VSYLOC02.VSYLOC02-DATA = SL0EWB2.SL0EWXDL; /* move tsq to VSYLOC02*/
  end
  SL0EWA2.SL6DATA = VSYLOC02.VSYLOC02-DATA; /* save first tsq for hold*/

  SL0ES2O(); /* get syprec size record for*/
                                   /* product(sy1120)*/
  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SLWREC.SLWIDX01 = 1; /* set screen position to 1 for moves*/

   /* ***********************************************************/
   /* *** process remaining tsq records for the product      ****/
   /* ***********************************************************/

  while (TA5REC.TA5RTNCD != 7)

    if (VSYLOC02.SL6STASD > 0)
      if (SLWREC.SLWFTMSW == "Y")
        SLWREC.SLWFTMSW = "N";
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S2GB";
        SLWREC.SLWMSGNO = 41; /* warning for setaside*/
        set SL0EM210.SY1STNBR cursor, bold;
        return;
      end
    end

    if (VSYLOC02.SL2CASE != SL0EWA2.SL2CASE)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2GC";
      SLWREC.SLWMSGNO = 62; /* error reserved status*/
      set SL0EM210.SL2CASE cursor, bold;
      return;
    end

    if (VSYLOC02.SY5SZID == SL0EWA2.SY5SZID)
      SL0EW02.SL0EWSTO = SL0EW02.SL0EWSTO + VSYLOC02.SL6ONHND;
                                   /* accum size qt*/
      SL0EW02.SL0EWSTO = SL0EW02.SL0EWSTO - VSYLOC02.SL6PKRSV;
                                   /* accum size qt*/
    else
      if (SL0EW02.SL0EWSTO > 0)
        SL0EW02.SL0EWPTO = SL0EW02.SL0EWPTO + SL0EW02.SL0EWSTO;
                                   /* acc gnd tot*/
        SLWREC.SLWIDX02 = SL0EWA2.SY5SZID;
        if (SYPREC.SY4IDDSC[SLWIDX02] > " ")
          SL0EM210.SY4IDDSC[SLWIDX01] = SYPREC.SY4IDDSC[SLWIDX02];
        else
          SL0EM210.SY4IDDSC[SLWIDX01] = "**";
        end
        SL0EM210.SL0EWWOQ[SLWIDX01] = SL0EW02.SL0EWSTO;
        if (SL0EM210.SL8ITMFL == "Y")
          SL0EM210.SL0EWWOQ[SLWIDX01] = 0;
        end
        SL0EW02.SL0EWWOQ[SLWIDX01] = SL0EW02.SL0EWSTO; /* save qnty*/
        SL0EW02.SY5SZID[SLWIDX01] = SL0EWA2.SY5SZID;
                                   /* save size id*/
        SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
        SL0EWA2.SY5SZID = VSYLOC02.SY5SZID;
        SL0EW02.SL0EWSTO = 0;
        SL0EW02.SL0EWSTO = SL0EW02.SL0EWSTO + VSYLOC02.SL6ONHND;
                                /* accum size*/
        SL0EW02.SL0EWSTO = SL0EW02.SL0EWSTO - VSYLOC02.SL6PKRSV;
                                  /* accum size*/
      else
        if (SL0EW02.SL0EWSTO < 0)
          SLWREC.SLWMSGNO = 138; /* item qty was less than zero*/
          SL0EWA2.SY5SZID = VSYLOC02.SY5SZID;
          SL0EW02.SL0EWSTO = 0;
          SL0EW02.SL0EWSTO = SL0EW02.SL0EWSTO + VSYLOC02.SL6ONHND;
          SL0EW02.SL0EWSTO = SL0EW02.SL0EWSTO - VSYLOC02.SL6PKRSV;
        else
          SL0EWA2.SY5SZID = VSYLOC02.SY5SZID;
          SL0EW02.SL0EWSTO = 0;
          SL0EW02.SL0EWSTO = SL0EW02.SL0EWSTO + VSYLOC02.SL6ONHND;
          SL0EW02.SL0EWSTO = SL0EW02.SL0EWSTO - VSYLOC02.SL6PKRSV;
        end
      end
    end

    TA5REC.TA5FNCCD = "R"; /* get next tsq record*/
    TA5REC.TA5TSQIX = TA5REC.TA5TSQIX + 1;
    call "TA0050" (SL0EWB2, TA5REC); /* READ TSQ RECORD*/
    if (TA5REC.TA5RTNCD == 0
     || TA5REC.TA5RTNCD == 7)
      VSYLOC02.VSYLOC02-DATA = SL0EWB2.SL0EWXDL;
                                             /* move tsq to VSYLOC02*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2GE";
      SLWREC.SLWMSGNO = 01; /* error reserved status*/
      return;
    end
  end

   /* ***********************************************************/
   /* *** at end of tsq, move last size and grand tot to map ****/
   /* ***********************************************************/
  if (SL0EW02.SL0EWSTO > 0)
    SL0EW02.SL0EWPTO = SL0EW02.SL0EWPTO + SL0EW02.SL0EWSTO; /* acc gnd tot*/
    if (SL0EW02.SL0EWPTO == 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2GF";
      SLWREC.SLWMSGNO = 139; /* all item qty were zero*/
      return;
    end
    SLWREC.SLWIDX02 = SL0EWA2.SY5SZID;
    if (SYPREC.SY4IDDSC[SLWIDX02] > " ")
      SL0EM210.SY4IDDSC[SLWIDX01] = SYPREC.SY4IDDSC[SLWIDX02];
    else
      SL0EM210.SY4IDDSC[SLWIDX01] = "**";
    end
    SL0EM210.SL0EWWOQ[SLWIDX01] = SL0EW02.SL0EWSTO;
    if (SL0EM210.SL8ITMFL == "Y")
      SL0EM210.SL0EWWOQ[SLWIDX01] = 0;
    end
    SL0EW02.SL0EWWOQ[SLWIDX01] = SL0EW02.SL0EWSTO; /* save qnty*/
    SL0EW02.SY5SZID[SLWIDX01] = SL0EWA2.SY5SZID; /* save size*/
    SL0EWC0.SL0EWNSS = SLWREC.SLWIDX01;
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
    SL0EM210.SL0EWWOQ[SLWIDX01] = SL0EW02.SL0EWPTO;
    if (SL0EM210.SL8ITMFL == "Y")
      SL0EM210.SL0EWWOQ[SLWIDX01] = 0;
    end
    SL0EM210.SY4IDDSC[SLWIDX01] = "TOTAL";
  else
    if (SL0EW02.SL0EWSTO < 0)
      SL0EW02.SL0EWPTO = SL0EW02.SL0EWPTO + SL0EW02.SL0EWSTO;
                                   /* acc gnd tot*/
      if (SL0EW02.SL0EWPTO == 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S2GF";
        SLWREC.SLWMSGNO = 139; /* all item were zero*/
        return;
      end
      SLWREC.SLWMSGNO = 138; /* item qty less than zero*/
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1; /* back up to prev sze enter*/
      SL0EWC0.SL0EWNSS = SLWREC.SLWIDX01;
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
      SL0EM210.SL0EWWOQ[SLWIDX01] = SL0EW02.SL0EWPTO;
      SL0EM210.SY4IDDSC[SLWIDX01] = "TOTAL";
      if (SL0EM210.SL8ITMFL == "Y")
        SL0EM210.SL0EWWOQ[SLWIDX01] = 0;
      end
    else
      if (SL0EW02.SL0EWPTO == 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S2GF";
        SLWREC.SLWMSGNO = 139; /* all item were zero*/
        return;
      end
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1; /* back up to prev sze enter*/
      SL0EWC0.SL0EWNSS = SLWREC.SLWIDX01;
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
      SL0EM210.SL0EWWOQ[SLWIDX01] = SL0EW02.SL0EWPTO;
      SL0EM210.SY4IDDSC[SLWIDX01] = "TOTAL";
      if (SL0EM210.SL8ITMFL == "Y")
        SL0EM210.SL0EWWOQ[SLWIDX01] = 0;
      end
    end
  end
   /* ***********************************************************/
   /* *** darken out rest of screen for sizes                ****/
   /* ***********************************************************/

  SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  while (SLWREC.SLWIDX01 <= 40)
    set SL0EM210.SY4IDDSC[SLWIDX01] skip, invisible;
    set SL0EM210.SL0EWWOQ[SLWIDX01] skip, invisible;
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end
   /* *************************************************************/
   /* ***********************************************************/
   /* *** end of statement group                             ****/
   /* ***********************************************************/
end // end SL0ES2G

// determine the to location
Function SL0ES2H()
             /* determine the to location*/
   /* *************************************************************/
   /* ***   select the proper function to determine the       *****/
   /* ***   to location depending on how the to/from data     *****/
   /* ***   was entered.  there are three methods for determinig***/
   /* ***   the to location. (sl0es2p, sl0es2q, sl0es2r)      *****/
   /* *************************************************************/
  SL0EWX1.SL0EWUSW = "N"; /* empty bulk loc. update switch*/
  if (SL0EM210.SL8FRAR != " "
   && SL0EM210.SL8FRZN != " "
   && SL0EM210.SL8FRLC == " "
   && SL0EM210.SL8TOAR == " "
   && SL0EM210.SL8TOZN == " "
   && SL0EM210.SL8TOLC == "      ")
    SL0EW02.SL0EWTLE = "N"; /* to location entered flag*/
    SL0ES2P(); /* DETERMINE TO LOCATION OPTION 1*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
  else
    if (SL0EM210.SL8FRAR != " "
     && SL0EM210.SL8FRZN != " "
     && SL0EM210.SL8FRLC != " "
     && SL0EM210.SL8TOAR == " "
     && SL0EM210.SL8TOZN == " "
     && SL0EM210.SL8TOLC == "      ")
      SL0EW02.SL0EWTLE = "N"; /* to location entered flag*/
      SL0ES2P(); /* DETERMINE TO LOCATION OPTION 1*/
      if (SLWREC.SLWERRSW == "Y")
        return;
      end
    else
      if (SL0EM210.SL8FRAR != " "
       && SL0EM210.SL8FRZN != " "
       && SL0EM210.SL8FRLC == " "
       && SL0EM210.SL8TOAR != " "
       && SL0EM210.SL8TOZN == " "
       && SL0EM210.SL8TOLC == "      ")
        SL0EW02.SL0EWTLE = "N"; /* to location entered flag*/
        SL0ES2P(); /* DETERMINE TO LOCATION OPTION 1*/
        if (SLWREC.SLWERRSW == "Y")
          return;
        end
      else
        if (SL0EM210.SL8FRAR != " "
         && SL0EM210.SL8FRZN != " "
         && SL0EM210.SL8FRLC != " "
         && SL0EM210.SL8TOAR != " "
         && SL0EM210.SL8TOZN == " "
         && SL0EM210.SL8TOLC == "      ")
          SL0EW02.SL0EWTLE = "N"; /* to location entered flag*/
          SL0ES2P(); /* DETERMINE TO LOCATION OPTION 1*/
          if (SLWREC.SLWERRSW == "Y")
            return;
          end
        else
          if (SL0EM210.SL8FRAR != " "
           && SL0EM210.SL8FRZN != " "
           && SL0EM210.SL8FRLC == " "
           && SL0EM210.SL8TOAR != " "
           && SL0EM210.SL8TOZN != " "
           && SL0EM210.SL8TOLC == "      ")
            SL0EW02.SL0EWTLE = "N"; /* to location entered flag*/
            SL0ES2Q(); /* DETERMINE TO LOCATION OPTION #2*/
            if (SLWREC.SLWERRSW == "Y")
              return;
            end
          else
            if (SL0EM210.SL8FRAR != " "
             && SL0EM210.SL8FRZN != " "
             && SL0EM210.SL8FRLC != " "
             && SL0EM210.SL8TOAR != " "
             && SL0EM210.SL8TOZN != " "
             && SL0EM210.SL8TOLC == "      ")
              SL0EW02.SL0EWTLE = "N"; /* to location entered flag*/
              SL0ES2Q(); /* DETERMINE TO LOCATION OPTION #2*/
              if (SLWREC.SLWERRSW == "Y")
                return;
              end
            else
              if (SL0EM210.SL8FRAR != " "
               && SL0EM210.SL8FRZN != " "
               && SL0EM210.SL8FRLC != " "
               && SL0EM210.SL8TOAR != " "
               && SL0EM210.SL8TOZN != " "
               && SL0EM210.SL8TOLC != "      ")
                SL0EW02.SL0EWTLE = "Y"; /* to location entered flag*/
                                  /* SL0ES2S moved to SH2 as standalone*/
                                   /* where S2H used to be*/
              end
            end
          end
        end
      end
    end
  end
end // end SL0ES2H

// verify from location data
Function SL0ES2I()

   /* ************************************************************/
   /* *** VERIFY  FROM LOCATION                               ****/
   /* ************************************************************/

  SL5REC.XWHCD = SL0EM210.XWHCD;
  SL5REC.XARCD = SL0EW02.SL0EWFAC;
  SL5REC.SL4ZONE = SL0EW02.SL0EWFZC;
  SL5REC.SL5LOCTN = SL0EM210.SL8FRLC;

  TA1REC.TA1LOCAT[2] = "SL0ES2I ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL5I0(); /* <=== std loctn inquiry*/

  if (SQLCA.VAGen_SQLCODE == 0)

    SL0EW02.SL0EW-MEZZ-LOC-IND = "N"; /* Mezzanine location flag*/

    if (SL5REC.XWHCD == "07") /* Wilsonville*/

      if (SL5REC.YLTCD == "15" /* Mezzanine location*/
       || SL5REC.YLTCD == "17")
        SL0EW02.SL0EW-MEZZ-LOC-IND = "Y"; /* Mezzanine location flag*/
      end

    end

    if (SL0EM210.SL-LOC-SZ-IND == "*")
      SL0EWX1.SL-LOC-SZ-IND = SL5REC.SL-LOC-SZ-IND;
    else
      SL0EWX1.SL-LOC-SZ-IND = SL0EM210.SL-LOC-SZ-IND;
    end

    if (SL0EM210.SL0EMMPF == "*") /* multi-prod flag*/
      SL0EWX1.SL0EWMPF = SL5REC.SL5MPDFL;
    else
      SL0EWX1.SL0EWMPF = SL0EM210.SL0EMMPF;
    end

    if (SL0EW02.SL0EWFAT == "BU" /* from loc is bulk*/
     || SL0EW02.SL0EWFAT == "RE") /* from loc is receiving*/

      if (SL5REC.YLSCD == "01") /* empty location*/
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S2IA";
        SLWREC.SLWMSGNO = 175; /* error empty status*/
        set SL0EM210.SL8FRLC cursor, bold;
        return;
      end

    end

    if (SL5REC.YLSCD == "05") /* frozen location*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2IB";
      SLWREC.SLWMSGNO = 40; /* error frozen status*/
      set SL0EM210.SL8FRLC cursor, bold;
      return;
    end

    if (SL5REC.YLSCD == "06") /* Replenishment-reserved status*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2IC";
      SLWREC.SLWMSGNO = 39; /* Location status is reserved*/
      set SL0EM210.SL8FRLC cursor, bold;
      return;
    end

    SL0EW02.SL5FRWOC = SL5REC.SL5FRWOC; /* save wo count*/

  else

    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2ID";
      SLWREC.SLWMSGNO = 0038; /* <--- a/z/l not loc db*/
      set SL0EM210.SL8FRAR cursor, bold;
      set SL0EM210.SL8FRZN bold;
      set SL0EM210.SL8FRLC bold;
      return;
    end

    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2IE";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end

    if (SQLCA.VAGen_SQLCODE == -811) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2IF";
      SLWREC.SLWMSGNO = 0001; /* <--- duplicate rows call prog*/
      return;
    end

    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S2IG";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/

  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES2I

// verify to location
Function SL0ES2J()
                    /* VERIFY TO LOCATION*/
   /* ************************************************************/
   /* *** VERIFY  to location                                 ****/
   /* ***                                                     ****/
   /* ***                                                     ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO       ****/
   /* *** SL5REC                                              ****/
   /* ***                                                     ****/
   /* ************************************************************/

  SL5REC.XWHCD = SL0EM210.XWHCD;
  SL5REC.XARCD = SL0EW02.SL0EWTAC;
  SL5REC.SL4ZONE = SL0EW02.SL0EWTZC;
  SL5REC.SL5LOCTN = SL0EM210.SL8TOLC;

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO and   ****/
   /* *** then setup the following before i/o sgrp execution: ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* ***   note: sgrp results will be in record              ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = not found - setup not fnd error/msg        ****/
   /* ***   -811 = duplicates found - contact programming msg ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***   -911 = deadlock - try again msg                   ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES2J ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL5I0(); /* <=== std loctn inquiry*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (SL0EW02.SL0EWTAT == "BU")
      if (SL5REC.YLSCD == "04") /* in-transit*/
        if (SL0EW02.SL0EWFAT == "PR") /* from area is processing*/
           /* next sentence*/
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "S2JA";
          SLWREC.SLWMSGNO = 49; /* in-transit msg*/
          set SL0EM210.SL8TOLC cursor, bold;
          return;
        end
      end
      if (SL5REC.YLSCD == "07") /* combined*/
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S2JD";
        SLWREC.SLWMSGNO = 172; /* error combined status*/
        set SL0EM210.SL8TOLC cursor, bold;
        return;
      end
      if (SL0EM210.SL0EMMPF != "*")
        if (SL0EM210.SL0EMMPF != SL5REC.SL5MPDFL)
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "S2JF";
          SLWREC.SLWMSGNO = 173; /* screen value ne rec value*/
          set SL0EM210.SL0EMMPF cursor, bold;
          set SL0EM210.SL8TOLC bold;
          return;
        end
      end
    end
    if (SL5REC.YLSCD == "05") /* frozen*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2JB";
      SLWREC.SLWMSGNO = 40; /* error frozen status*/
      set SL0EM210.SL8TOLC cursor, bold;
      return;
    end
    if (SL5REC.YLSCD == "06") /* Replenishment-reserved status*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2JC";
      SLWREC.SLWMSGNO = 39; /* Location status is reserved*/
      set SL0EM210.SL8TOLC cursor, bold;
      return;
    end
    if (SL5REC.YLSCD == "08") /* planned*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2JE";
      SLWREC.SLWMSGNO = 345; /* error planned status*/
      set SL0EM210.SL8TOLC cursor, bold;
      return;
    end
    SL0EWX1.SL0EWMPF = SL5REC.SL5MPDFL;
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2JG";
      SLWREC.SLWMSGNO = 0038; /* <--- a/z/l not loc db*/
      set SL0EM210.SL8TOAR cursor, bold;
      set SL0EM210.SL8TOZN bold;
      set SL0EM210.SL8TOLC bold;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2JH";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2JI";
      SLWREC.SLWMSGNO = 0001;
                                   /* <--- duplicate rows call prog*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S2JJ";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES2J

// obtain style color data
Function SL0ES2K()
                   /* OBTAIN STYLE COLOR DATA*/
   /* ************************************************************/
   /* *** VERIFY  style color data                            ****/
   /* ***                                                     ****/
   /* ***                                                     ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO       ****/
   /* *** pknrec                                              ****/
   /* ***                                                     ****/
   /* ************************************************************/

  PKNREC.XGPCD = SL0EM210.XGPCD;
  PKNREC.SY1STNBR = SL0EM210.SY1STNBR;
  PKNREC.SY2CLRID = SL0EM210.SY2CLRID;
  PKNREC.XDMCD = SL0EM210.XDMCD;

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO and   ****/
   /* *** then setup the following before i/o sgrp execution: ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* ***   note: sgrp results will be in record              ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = not found - setup not fnd error/msg        ****/
   /* ***   -811 = duplicates found - contact programming msg ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***   -911 = deadlock - try again msg                   ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES2K ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  SL0ESCI(); /* <=== style color table inquirey*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* ***  next sentence  ****/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2KA";
      SLWREC.SLWMSGNO = 0056; /* <--- invalid style or color*/
      set SL0EM210.SY1STNBR cursor, bold;
      set SL0EM210.SY2CLRID bold;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2KB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2KC";
      SLWREC.SLWMSGNO = 0001;
                                   /* <--- duplicate rows call prog*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S2KD";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

  SL0EM210.SY1SSTNM = PKNREC.SY1SSTNM;
  SL0EM210.SY2CLRAB = PKNREC.SY2CLRAB;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES2K

// obtain prod/loc for from area
Function SL0ES2L()
             /* OBTAIN PROD / LOC FOR RECV AREA*/
   /* ************************************************************/
   /* *** obtain all products from the product/location table ****/
   /* *** for for the from area. if the from area is equal to ****/
   /* *** receiving then use the pallet number on the screen  ****/
   /* *** else, use '******' for the pallet number.           ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO       ****/
   /* *** VSYLOC02                                              ****/
   /* ***                                                     ****/
   /* ************************************************************/

  set VSYLOC02 empty;
  VSYLOC02.XWHCD = SL0EM210.XWHCD;
  VSYLOC02.XARCD = SL0EW02.SL0EWFAC;
  VSYLOC02.SL4ZONE = SL0EW02.SL0EWFZC;
  if (SL0EM210.SL8FRLC == " ")
    VSYLOC02.SL5LOCTN = "000000";
  else
    VSYLOC02.SL5LOCTN = SL0EM210.SL8FRLC;
  end
  VSYLOC02.SL2PALET = SL0EM210.SL2PALET;
  VSYLOC02.SL2CASE = SL0EM210.SL2CASE;

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO and   ****/
   /* *** then setup the following before i/o sgrp execution: ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* ***   note: sgrp results will be in record              ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = not found - setup not fnd error/msg        ****/
   /* ***   -911 = deadlock - try again msg                   ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES2L ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSLS-S4-VSYLOC02(); /* <=== std prod loctn selset*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* ***  next sentence  ****/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for selset*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2LA";
      SLWREC.SLWMSGNO = 0083; /* <--- no data for loc msg*/
      set SL0EM210.SL8FRAR cursor, bold;
      set SL0EM210.SL8FRZN bold;
      set SL0EM210.SL8FRLC bold;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2LB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S2LC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES2L

// load prod/loc cusor to tsq
Function SL0ES2M()
             /* load prod/loc cursor to tsq*/
   /* ************************************************************/
   /* *** load the prod/loc (VSYLOC02) to the tsq and determine ****/
   /* *** the following :                                     ****/
   /* ***   determine if 1 or more products in the cursor     ****/
   /* ***   if one product only                               ****/
   /* ***     error if the case number changes                ****/
   /* ***   if more than one product                          ****/
   /* ***     error if style code on screen not entered       ****/
   /* ***     error if any of the cursor prods does not match ****/
   /* ***           the screen product after loading the tsq  ****/
   /* ***                                                     ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** initialize the tsq                                  ****/
   /* ***     set up tsq initialization fields                ****/
   /* ***     purge the tsq prior to writing to it            ****/
   /* ************************************************************/

  set TA5REC empty;
  set SL0EWB2 empty;
  SL0EWB2.SL0EWXLL = 134;
  TA5REC.TA5APPID = "SL0E";

  TA5REC.TA5FNCCD = "P";
  call "TA0050" (SL0EWB2, TA5REC); /* purge tsq*/

   /* ************************************************************/
   /* *** initialize working storage flags, save first cursor ****/
   /* ***   product for compares.                             ****/
   /* ************************************************************/

  SL0EW02.SL0EWFL1 = "N"; /* set more than one prod found flg to N*/
  SL0EWA2.SL6DATA = VSYLOC02.VSYLOC02-DATA;
                              /* save the first cursor product*/

   /* ************************************************************/
   /* *** determine  if more than one product in the cursor   ****/
   /* ************************************************************/

  while (SL0EW02.SL0EWFL1 == "N") /* more than one prod flg eq N*/

    if (SL0EM210.XGPCD == VSYLOC02.XGPCD
     && SL0EM210.SY1STNBR == VSYLOC02.SY1STNBR
     && SL0EM210.SY2CLRID == VSYLOC02.SY2CLRID
     && SL0EM210.XDMCD == VSYLOC02.XDMCD
     && SL0EM210.XQACD == VSYLOC02.XQACD
     && SL0EM210.XOWCD == VSYLOC02.XOWCD
     && SL0EM210.XSDCD == VSYLOC02.PC2INSEG
     && SL0EM210.XPGCD == VSYLOC02.XPGCD
     && SL0EM210.XUMCD == VSYLOC02.XUMCD
     && SL0EM210.XSLCD == VSYLOC02.XSLCD
     && SL0EM210.SY1UNPCS == VSYLOC02.SY1UNPCS) /* units per case*/
      if (VSYLOC02.INASAID > 0) /* sas exists for other whse's*/
        if (SL0EW02.SL0EWSPA == 0) /* whse prod sas not saved*/
          SL0EW02.SL0EWSPA = VSYLOC02.INASAID; /* save sas id*/
        else
          if (VSYLOC02.INASAID == 62 /* whse 02 prod sas id*/
           || VSYLOC02.INASAID == 64 /* whse 04 prod sas id*/
           || VSYLOC02.INASAID == 65 /* whse 07 prod sas id*/
           || VSYLOC02.INASAID == 69 /* whse 51 prod sas id*/
           || VSYLOC02.INASAID == 103) /* whse 42 prod sas id*/
            SL0EW02.SL0EWSPA = VSYLOC02.INASAID; /* save sas id*/
          end
        end
      end
    end

    TA5REC.TA5FNCCD = "A";
    SL0EWB2.SL0EWXDL = VSYLOC02.VSYLOC02-DATA;
    call "TA0050" (SL0EWB2, TA5REC); /* move cursor prod to tsq*/
    if (TA5REC.TA5RTNCD != 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2MA";
      SLWREC.SLWMSGNO = 01; /* severe error*/
      return;
    end
    SL0ES2N(); /* fetch next cursor record*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for selset*/
      if (VSYLOC02.SL2CASE != SL0EWA2.SL2CASE)
                                   /* one product but different case*/
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S2MB";
        SLWREC.SLWMSGNO = 0062; /* <--- case number required*/
        set SL0EM210.SL2CASE cursor, bold;
        return;
      else
        SL0EM210.SL2CASE = VSYLOC02.SL2CASE;
        return;
      end
    end
    if (VSYLOC02.XGPCD != SL0EWA2.XGPCD /* check if prod/loc changes*/
     || VSYLOC02.SY1STNBR != SL0EWA2.SY1STNBR
     || VSYLOC02.SY2CLRID != SL0EWA2.SY2CLRID
     || VSYLOC02.XDMCD != SL0EWA2.XDMCD 
     || VSYLOC02.XQACD != SL0EWA2.XQACD 
     || VSYLOC02.XOWCD != SL0EWA2.XOWCD 
     || VSYLOC02.PC2INSEG != SL0EWA2.XSDCD
     || VSYLOC02.XEGCD != SL0EWA2.XSACD 
     || VSYLOC02.XPGCD != SL0EWA2.XPGCD 
     || VSYLOC02.XUMCD != SL0EWA2.XUMCD 
     || VSYLOC02.XSLCD != SL0EWA2.XSLCD 
     || VSYLOC02.SY1UNPCS != SL0EWA2.SY1UNPCS) /* units per case*/
      SL0EW02.SL0EWFL1 = "Y"; /* set more than one prod flag eq Y*/
    end
  end

   /* ************************************************************/
   /* *** multiple products found                             ****/
   /* ***   purge prior tsq record if not equal to the screen ****/
   /* ***         product (move prod to tsq if same as screen)****/
   /* ***   error if style code not entered on the screen      ***/
   /* ***   error if screen product not equal to found products***/
   /* ************************************************************/

  if (SL0EM210.SY1STNBR == " ") /* style number is blank*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S2MC";
    SLWREC.SLWMSGNO = 0063; /* <--- prod data missing*/
    set SL0EM210.SY1STNBR cursor, bold;
    return;
  end
  SL0EW02.SL0EWFL2 = "N"; /* screen product matches cursor prod*/
                                   /* flg*/
  if (SL0EM210.XGPCD == SL0EWA2.XGPCD /* if screen prod is eq to tsq prod*/
   && SL0EM210.SY1STNBR == SL0EWA2.SY1STNBR
   && SL0EM210.SY2CLRID == SL0EWA2.SY2CLRID
   && SL0EM210.XDMCD == SL0EWA2.XDMCD 
   && SL0EM210.XQACD == SL0EWA2.XQACD 
   && SL0EM210.XOWCD == SL0EWA2.XOWCD 
   && SL0EM210.XSDCD == SL0EWA2.XSDCD 
   && SL0EM210.XPGCD == SL0EWA2.XPGCD 
   && SL0EM210.XUMCD == SL0EWA2.XUMCD 
   && SL0EM210.XSLCD == SL0EWA2.XSLCD 
   && SL0EM210.SY1UNPCS == SL0EWA2.SY1UNPCS) /* units per case*/
    SL0EW02.SL0EWFL2 = "Y"; /* hit on multiple records*/
  else
    TA5REC.TA5FNCCD = "P";
    call "TA0050" (SL0EWB2, TA5REC); /* purge tsq if scr prod not equal tsq prod*/
  end

   /* ************************************************************/
   /* *** move cursor prod to tsq if equal to the screen prod ****/
   /* ************************************************************/

  while (SQLCA.VAGen_SQLCODE != +100) /* <=== for selset*/
    if (SL0EM210.XGPCD == VSYLOC02.XGPCD
     && SL0EM210.SY1STNBR == VSYLOC02.SY1STNBR
     && SL0EM210.SY2CLRID == VSYLOC02.SY2CLRID
     && SL0EM210.XDMCD == VSYLOC02.XDMCD
     && SL0EM210.XQACD == VSYLOC02.XQACD
     && SL0EM210.XOWCD == VSYLOC02.XOWCD
     && SL0EM210.XSDCD == VSYLOC02.PC2INSEG
     && SL0EM210.XPGCD == VSYLOC02.XPGCD
     && SL0EM210.XUMCD == VSYLOC02.XUMCD
     && SL0EM210.XSLCD == VSYLOC02.XSLCD
     && SL0EM210.SY1UNPCS == VSYLOC02.SY1UNPCS) /* units per case*/
      SL0EW02.SL0EWFL2 = "Y";
      TA5REC.TA5FNCCD = "A";
      SL0EWB2.SL0EWXDL = VSYLOC02.VSYLOC02-DATA;
      call "TA0050" (SL0EWB2, TA5REC); /* move cursor prod to tsq*/
      if (TA5REC.TA5RTNCD != 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S2MD";
        SLWREC.SLWMSGNO = 01; /* severe error*/
        return;
      end
    end
    if (SL0EM210.XGPCD == VSYLOC02.XGPCD
     && SL0EM210.SY1STNBR == VSYLOC02.SY1STNBR
     && SL0EM210.SY2CLRID == VSYLOC02.SY2CLRID
     && SL0EM210.XDMCD == VSYLOC02.XDMCD
     && SL0EM210.XQACD == VSYLOC02.XQACD
     && SL0EM210.XOWCD == VSYLOC02.XOWCD
     && SL0EM210.XSDCD == VSYLOC02.PC2INSEG
     && SL0EM210.XPGCD == VSYLOC02.XPGCD
     && SL0EM210.XUMCD == VSYLOC02.XUMCD
     && SL0EM210.XSLCD == VSYLOC02.XSLCD)
      if (VSYLOC02.INASAID > 0) /* sas exists for other whse's*/
        if (SL0EW02.SL0EWSPA == 0) /* whse prod sas not saved*/
          SL0EW02.SL0EWSPA = VSYLOC02.INASAID; /* save sas id*/
        else
          if (VSYLOC02.INASAID == 62 /* whse 02 prod sas id*/
           || VSYLOC02.INASAID == 64 /* whse 04 prod sas id*/
           || VSYLOC02.INASAID == 65 /* whse 07 prod sas id*/
           || VSYLOC02.INASAID == 69 /* whse 51 prod sas id*/
           || VSYLOC02.INASAID == 103) /* whse 42 prod sas id*/
            SL0EW02.SL0EWSPA = VSYLOC02.INASAID; /* save sas id*/
          end
        end
      end
    end
    SL0ES2N(); /* fetch next cursor record*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
  end
  if (SL0EW02.SL0EWFL2 == "N") /* screen prod not eq to cursor prod*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S2ME";
    SLWREC.SLWMSGNO = 0064; /* <--- prod data missing*/
    set SL0EM210.XGPCD cursor, bold;
    set SL0EM210.SY1STNBR bold;
    set SL0EM210.SY2CLRID bold;
    set SL0EM210.XDMCD bold;
    return;
  end
   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0ES2M

// fetch next prod/loc record
Function SL0ES2N()
        /* FETCH THE NEXT ROW FROM THE PRODUCT/LOCATION DB*/
   /* ************************************************************/
   /* *** setup the approriate record fields for the IO and   ****/
   /* *** then setup the following before i/o sgrp execution: ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* ***   note: sgrp results will be in record              ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = no more records*/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES2N ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSLS-N4-VSYLOC02(); /* fetch next prod/loc record*/

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for FETCH scan*/
      return;
    else
      SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
      SLWREC.XXXLOCID = "S2NA";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES2N

// obtain sizes for prod (sy1120)
Function SL0ES2O()
               /* obtain sizes for prod (sy1120)*/
   /* ************************************************************/
   /* *** call sy1120 to obtain sizes for a product           ****/
   /* ***     move required flds to syprec for find           ****/
   /* ************************************************************/

  set SYPREC empty;
  SYPREC.SYPFC = "PC";
  SYPREC.SYPCMPSW = "N";
  TA1REC.TA1LOCAT[2] = "SL0ES2O ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;
  SYPREC.XGPCD = SL0EM210.XGPCD;
  SYPREC.SY1STNBR = SL0EM210.SY1STNBR;
  SYPREC.SY2CLRID = SL0EM210.SY2CLRID;
  SYPREC.XDMCD = SL0EM210.XDMCD;
  SYPREC.XQACD = "**";

  SL0ESPI(); /* <---- CALL SY1190 FOR SIZE DESC XLATE*/

  if (SYPREC.SYPRC == 0)
    return;
  end

  if (SYPREC.SYPRC == 09)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S2OA";
    SLWREC.SLWMSGNO = 0031; /* <--- dead lock*/
    return;
  end

  if (SYPREC.SYPRC == 10)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S2OB";
    SLWREC.SLWMSGNO = 0012; /* <--- not on db msg*/
    return;
  end

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "S2OC";
  SLWREC.SLWMSGNO = 0001; /* <--- severe error*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES2O

// determine to location option 1
Function SL0ES2P()

                   /* determine to location option 1*/
   /* ************************************************************/
   /* *** if from location (from work order count) > 0        ****/
   /* ***   perform check for duplicate wo left as standalone ****/
   /* ***   where sl0es2h used to be                          ****/
   /* *** determine valid to location                         ****/
   /* ************************************************************/

  if (SL0EW02.SL0EWTAT == "BU")
    SL5REC.XWHCD = SL0EM210.XWHCD;
    SL5REC.XARCD = SL0EW02.SL0EWTAC;
    while (SLWREC.SLWERRSW == "N"
     && SL0EWX1.SL0EWUSW == "N")
      SL0ES8T(); /* find empty to loc w/in limit*/
    end
  else
    SL0ES2T(); /* find empty to loc*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES2P

// determine to location option 2
Function SL0ES2Q()

                   /* determine to location option 2*/
   /* ************************************************************/
   /* *** if from location (from work order count) > 0        ****/
   /* ***   perform check for duplicate wo left as standalone ****/
   /* ***   where sloes2h used to be performed                ****/
   /* *** determine valid to location                         ****/
   /* ************************************************************/

  if (SL0EW02.SL0EWTAT == "BU") /* bulk storage*/
    SL5REC.XWHCD = SL0EM210.XWHCD;
    SL5REC.XARCD = SL0EW02.SL0EWTAC;
    while (SLWREC.SLWERRSW == "N"
     && SL0EWX1.SL0EWUSW == "N")
      SL0ES8T(); /* find empty to loc w/in limit*/
    end
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
  else
    if (SL0EW02.SL0EWTZP == "PI") /* picking*/
      if (SL0EW02.SL0EWSPA > 0) /* saved sas exists*/
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S2QA";
        SLWREC.SLWMSGNO = 0194; /* prod on sas can't move*/
        return;
      end
      SLWREC.SLWIDX01 = 1;
      SL0ES2U(); /* determine valid to location using*/
                                   /* prod/loc*/
      if (SLWREC.SLWERRSW == "Y")
        return;
      end
      SL7REC.XARCD = SL0EW01.SL0EWSAR;
      SL7REC.SL4ZONE = SL0EW01.SL0EWSZN;
      SL7REC.SL5LOCTN = SL0EW01.SL0EWSLC;
    else
      if (SL0EW02.SL0EWTZP == "FU") /* full case*/
        if (SL4REC.YZTCD != "22" /* not full case static*/
         && SL0EW02.SL0EWSPA > 0) /* saved sas exists*/
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "S2QB";
          SLWREC.SLWMSGNO = 0194; /* prod on sas can't move*/
          return;
        end
        if (SL0EM210.XWHCD == "02" 
         || SL0EM210.XWHCD == "04" 
         || SL0EM210.XWHCD == "07" 
         || SL0EM210.XWHCD == "25" /* NSG*/
         || SL0EM210.XWHCD == "51" 
         || SL0EM210.XWHCD == "42") /* Canada*/
          if (SL0EM210.XWHCD == "02" 
           && SL0EW02.SL0EWSPA != 62 /* whse 02 prod sas*/
           && SL0EW02.SL0EWSPA > 0)  /* setaside exists*/
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "S2QC";
            SLWREC.SLWMSGNO = 0194; /* prod on sas can't move*/
            return;
          end
          if (SL0EM210.XWHCD == "04" 
           && SL0EW02.SL0EWSPA != 64 /* whse 04 prod sas*/
           && SL0EW02.SL0EWSPA > 0)  /* setaside exists*/
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "S2QC";
            SLWREC.SLWMSGNO = 0194; /* prod on sas can't move*/
            return;
          end
          if (SL0EM210.XWHCD == "07" 
           && SL0EW02.SL0EWSPA != 65 /* whse 07 prod sas*/
           && SL0EW02.SL0EWSPA > 0)  /* setaside exists*/
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "S2QC";
            SLWREC.SLWMSGNO = 0194; /* prod on sas can't move*/
            return;
          end
          if (SL0EM210.XWHCD == "25" 
           && SL0EW02.SL0EWSPA != 68 /* whse 25 prod sas*/
           && SL0EW02.SL0EWSPA > 0)  /* setaside exists*/
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "S2QD";
            SLWREC.SLWMSGNO = 0194; /* prod on sas can't move*/
            return;
          end
          if (SL0EM210.XWHCD == "51" 
           && SL0EW02.SL0EWSPA != 69 /* whse 51 prod sas*/
           && SL0EW02.SL0EWSPA > 0)  /* setaside exists*/
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "S2QE";
            SLWREC.SLWMSGNO = 0194; /* prod on sas can't move*/
            return;
          end
          if (SL0EM210.XWHCD == "42"  
           && SL0EW02.SL0EWSPA != 103 /* Canada prod sas*/
           && SL0EW02.SL0EWSPA > 0)   /* setaside exists*/
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "S2QF";
            SLWREC.SLWMSGNO = 0194; /* prod on sas can't move*/
            return;
          end
          SL0ES29(); /* get full case location*/
        else
          SL0EM210.SL8TOLC = "000000";
        end
      else
         /* ************************************************************/
         /* *** if this code is executed (control drops thru),      ****/
         /* *** then an unexpected control condition has occurred   ****/
         /* ************************************************************/
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S2QG";
        SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
        set SL0EM210.SL8TOAR cursor, bold;
        return;
      end
    end
  end
   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES2Q

// check for duplicate work order
Function SL0ES2S()
        /* VERIFY IF DUPLICATE WORK ORDERS FOR FROM LOCATION*/
   /* ************************************************************/
   /* *** Verify there are no outstanding work orders for this****/
   /* ***  'from' location. This process uses the VWOLHD02 and  ****/
   /* *** accesses the work order header not using the standard **/
   /* *** key to the file.                                    ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** initialize tsq for active work orders for the from  ****/
   /* *** location, product, pallet, and case entered.        ****/
   /* ************************************************************/

  SLWREC.SLWSUMQU = "SL2E";
  XSSLSPQ(); /* <=== purge the tsq*/
  SLWREC.SLWSUMQU = "SL0E";

  set SL0EWS2 empty;
  SL0EW02.SL0EWNTQ = 0; /* <=== number of tsq records*/

   /* ************************************************************/
   /* *** set up the appropiate fields for selection in i/o   ****/
   /* ************************************************************/

  VWOLHD02.XWHCD = SL0EM210.XWHCD;
  VWOLHD02.SL8FRAR = SL0EM210.SL8FRAR;
  VWOLHD02.SL8FRZN = SL0EM210.SL8FRZN;
  if (SL0EM210.SL8FRLC == " ")
    VWOLHD02.SL8FRLC = "000000";
  else
    VWOLHD02.SL8FRLC = SL0EM210.SL8FRLC;
  end
  VWOLHD02.XGPCD = SL0EM210.XGPCD;
  VWOLHD02.SY1STNBR = SL0EM210.SY1STNBR;
  VWOLHD02.SY2CLRID = SL0EM210.SY2CLRID;
  VWOLHD02.XDMCD = SL0EM210.XDMCD;
  VWOLHD02.XQACD = SL0EM210.XQACD;
  VWOLHD02.XOWCD = SL0EM210.XOWCD;
  VWOLHD02.PC2INSEG = SL0EM210.XSDCD;
  VWOLHD02.XEGCD = "000";
  VWOLHD02.XPGCD = SL0EM210.XPGCD;
  VWOLHD02.XUMCD = SL0EM210.XUMCD;
  VWOLHD02.XSLCD = SL0EM210.XSLCD;

          /* Select Set on WORK ORDER DATA BASE*/
   /* ************************************************************/
   /* *** setup the following before i/o sgrp execution:      ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = found - continue                           ****/
   /* ***   +100 = not found - return w/ not fnd msg          ****/
   /* ***   -911 = deadlock - return w/ try again msg         ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES2S ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSLS-S6-VWOLHD02(); /* ==>  sel set wo header using non stndrd key*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for selset*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2SA";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S2SB";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end
   /* ************************************************************/
   /* *** at this point we have a set of wo header recs for this**/
   /* *** product.  fetch each rec and check if wo already    ****/
   /* *** exists.                                             ****/
   /* ************************************************************/
  while (SQLCA.VAGen_SQLCODE == 0)
    if (SL0EW02.SL0EWFAT == "RE" /* receiving*/
     || SL0EW02.SL0EWFAT == "RT") /* returns*/
      if (VWOLHD02.YWSCD == "01") /* in-process*/
        if (VWOLHD02.SL2PALET != " ")
          if (SL0EM210.SL2PALET != " ")
            if (SL0EM210.SL2PALET == VWOLHD02.SL2PALET)
              SLWREC.SLWERRSW = "Y";
              SLWREC.XXXLOCID = "S2SC";
              SLWREC.SLWMSGNO = 0042;
              return;
            end
          end
        end
      end
    end
    if (VWOLHD02.YWSCD == "01") /* in-process*/
      if (VWOLHD02.SL2CASE != " ")
        if (SL0EM210.SL2CASE != " ")
          if (SL0EM210.SL2CASE == VWOLHD02.SL2CASE)
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "S2SD";
            SLWREC.SLWMSGNO = 0042;
            return;
          end
        end
      end
    end
    if (SL0EW02.SL0EWFAT == "PR") /* processing*/
      if (SL0EW02.SL0EWFZP == "PI") /* picking*/
        if (VWOLHD02.YWSCD == "01") /* in-process*/
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "S2SE";
          SLWREC.SLWMSGNO = 0042;
          return;
        end
      end
    end
    if (SL0EW02.SL0EWFAT == "BU") /* bulk storage*/
      if (SL0EM210.XWHCD == "03"
       || SL0EM210.XWHCD == "09")
         /* ** next sentence*/
      else
        if (VWOLHD02.YWSCD == "01") /* in-process*/
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "S2SF";
          SLWREC.SLWMSGNO = 0042;
          return;
        end
      end
    end
    if (VWOLHD02.YWSCD == "01") /* in-process*/
      SL0ES9C();
                                   /* if wo pertains, add it to the tsq rec*/
      if (SLWREC.SLWERRSW == "Y")
        return;
      end
    end
     /* ************************************************************/
     /* *** fetch next work order header row                    ****/
     /* ************************************************************/
    SL0ES2W(); /* fetch next work order header row*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
  end
  XSSLS-C6-VWOLHD02(); /* CLOSE CURSOR*/

   /* ************************************************************/
   /* *** if the current tsq record needs to be written,      ****/
   /* ***   write it out.                                     ****/
   /* ************************************************************/

  if (SL0EWS2.SL0EWNWO > 0) /* number of w/o on the current tsq rec*/
    SL0ES9B(); /* write tsq record*/
  end

   /* ************************************************************/
   /* *** end of statement group                              ****/
   /* ************************************************************/
end // end SL0ES2S

// find empty to loc (old way)
Function SL0ES2T()

   /* ************************************************************/
   /* *** obtain an empty to location for this product        ****/
   /* *** depending on if a to zone was entered               ****/
   /* ************************************************************/

  SL5REC.XWHCD = SL0EM210.XWHCD;
  SL5REC.XARCD = SL0EW02.SL0EWTAC; /* cntns val of map or bu code*/
  SL0EW02.SL0EWPEX = "N"; /* product exists at empty loc*/

  if (SL0EM210.SL8TOZN == " ")
    SL5REC.SL4ZONE = "*";
  else
    SL5REC.SL4ZONE = SL0EM210.SL8TOZN;
  end

  SL5REC.YLTCD = "*"; /* wild card location type code*/
  SL5REC.YLSCD = "01"; /* move empty status*/
  SL5REC.SL-LOC-SZ-IND = SL0EWX1.SL-LOC-SZ-IND;
                                   /* specify short pallet flag type*/
  SL5REC.SL5MPDFL = SL0EWX1.SL0EWMPF;
                                   /* specify multiple product flag*/

  TA1REC.TA1LOCAT[2] = "SL0ES2T ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL5S2(); /* <=== select set of location records*/

  if (SQLCA.VAGen_SQLCODE == 0)
    SL0EM210.SL8TOLC = SL5REC.SL5LOCTN;
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for select set*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2TA";
      SLWREC.SLWMSGNO = 0046; /* <--- no locations for this prd*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2TB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S2TC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
  end

  XSSL5C2(); /* CLOSE CURSOR*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES2T

// deter avail to loc prod/assign
Function SL0ES2U()
   /* --------------------------------------------------------------------*/
   /* Bypass product assignment if from a mezzanine location.*/
   /* --------------------------------------------------------------------*/

  if (SL0EW02.SL0EW-MEZZ-LOC-IND == "Y") /* Mezzanine location*/
    return; /* Return to previous process*/
  end

   /* ************************************************************/
   /* *** obtain the 'to location' for this size              ****/
   /* *** if the location is entered, use ar/zn/loc in select ****/
   /* *** otherwise, used only area & wild card zn & loc      ****/
   /* ************************************************************/

  SL0EW02.SL0EWTLE = "Y"; /* to location entered flag*/

   /* ************************************************************/
   /* *** set up the appropiate fields for selection in i/o   ****/
   /* ************************************************************/

  SL7REC.XWHCD = SL0EM210.XWHCD;
  SL7REC.XGPCD = SL0EM210.XGPCD;
  SL7REC.SY1STNBR = SL0EM210.SY1STNBR;
  SL7REC.SY2CLRID = SL0EM210.SY2CLRID;
  SL7REC.XDMCD = SL0EM210.XDMCD;
  SL7REC.XQACD = SL0EM210.XQACD;
  SL7REC.XOWCD = SL0EM210.XOWCD;
  SL7REC.XSDCD = SL0EM210.XSDCD;
  SL7REC.XSACD = "000";
  SL7REC.XPGCD = SL0EM210.XPGCD;
  SL7REC.XUMCD = SL0EM210.XUMCD;
  SL7REC.SY5SZID = SL0EW02.SY5SZID[SLWIDX01];
  SL7REC.XXXSTAT = "*";
  SLVREC.SLVSDT = 0;
  SLVREC.SLVEDT = X2CREC.X2CCURDT;
  SL7REC.XARCD = SL0EW02.SL0EWTAC;
  SL7REC.SL4ZONE = "*";
  SL7REC.SL5LOCTN = "*";

   /* ************************************************************/
   /* *** setup the following before i/o sgrp execution:      ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = found - continue                           ****/
   /* ***   +100 = not found - return w/ not fnd msg          ****/
   /* ***   -911 = deadlock - return w/ try again msg         ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES2U ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL7S8(); /* <=== sel set of size prod.*/
                                   /* assignments*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2UA";
      SLWREC.SLWMSGNO = 0047;
                                   /* <--- no assignment for to loc*/
      set SL0EM210.SL8TOAR cursor, bold;
      set SL0EM210.SL8TOZN bold;
      set SL0EM210.SL8TOLC bold;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2UB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S2UC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** ws now have at least 1(set) of assignments          ****/
   /* *** initialize save & last ar/zn/loc                    ****/
   /* *** process each assignment (pair)                      ****/
   /* *** note: this will work even if zn/loc entered         ****/
   /* ************************************************************/

  SL0EW01.SL0EWSAR = " ";
  SL0EW01.SL0EWSZN = " ";
  SL0EW01.SL0EWSLC = " ";
  SL0EW01.SL0EWLAR = " ";
  SL0EW01.SL0EWLZN = " ";
  SL0EW01.SL0EWLLC = " ";

  while (SQLCA.VAGen_SQLCODE == +0
   && SLWREC.SLWERRSW == "N")
    SL0ESVV(); /* <=== process A/I assignment pair*/
  end

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** if save area has not been setup,                    ****/
   /* *** no valid active assignment was found                ****/
   /* ************************************************************/

  if (SL0EW01.SL0EWSAR > " ")
    return;
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S2UD";
    SLWREC.SLWMSGNO = 0047; /* <--- no assignment for to loc*/
    set SL0EM210.SL8TOAR cursor, bold;
    set SL0EM210.SL8TOZN bold;
    set SL0EM210.SL8TOLC bold;
  end

   /* ************************************************************/
   /* *** end of statement group                              ****/
   /* ************************************************************/

end // end SL0ES2U

// fetch next prod assignment rec
Function SL0ES2V()

                 /* FETCH NEXT product assignment record*/
   /* ************************************************************/
   /* *** setup the approriate record fields for the IO and   ****/
   /* *** then setup the following before i/o sgrp execution: ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* ***   note: sgrp results will be in record              ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = no more records*/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES2V ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL7F8(); /* fetch next prod assignment row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for FETCH scan*/
      return;
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2VA";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES2V

// fetch next work order hdr rec
Function SL0ES2W()
                 /* FETCH NEXT WORK ORDER HEADER ROW*/
   /* ************************************************************/
   /* *** setup the approriate record fields for the IO and   ****/
   /* *** then setup the following before i/o sgrp execution: ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* ***   note: sgrp results will be in record              ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = no more records*/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES2W ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSLS-N6-VWOLHD02(); /* fetch next wo header row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for FETCH scan*/
      return;
    else
      SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
      SLWREC.XXXLOCID = "S2WA";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES2W

// determine new work order nbr
Function SL0ES2Y()
           /* GET AND OBTAIN NEXT WORK ORDER NUMBER*/
   /* ************************************************************/
   /* *** move key fields for i/o                             ****/
   /* ************************************************************/

  SL3REC.XWHCD = SL0EM210.XWHCD;

   /* ************************************************************/
   /* *** setup the following before i/o sgrp execution:      ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = found - continue                           ****/
   /* ***   -911 = deadlock - return w/ try again msg         ****/
   /* ***  <0 or = db/severe error - contact programming msg  ****/
   /* ***    +100  note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES2Y ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  SLWIDX06 = 1;
  SQLCA.VAGen_SQLCODE = 100;
  while (SQLCA.VAGen_SQLCODE == 100
   && SLWIDX06 < 21)
    XSSL3G1(); /* <=== std control record replace for wo number*/
    SLWIDX06 = SLWIDX06 + 1;
  end

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
    SL0EW02.SL0EWSZC = 0; /* zero out size counter*/
  else
    if (SQLCA.VAGen_SQLCODE == -911 /* <=== for any initial db access*/
     || SQLCA.VAGen_SQLCODE == +100)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2YA";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      SL0EST2();
      SLWREC.SLWSKYSW = "N";
      exit stack;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S2YB";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    exit stack;
  end

  VGVar.handleSysLibraryErrors = 1;
  sysLib.commit();

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/

end // end SL0ES2Y

// add work order header record
Function SL0ES2Z()
                   /* ADD WORK ORDER HEADER RECORD*/
   /* ************************************************************/
   /* *** For each product             , add the work order   ****/
   /* *** header record to the data base (VWOLHD02)             ****/
   /* ***                                                     ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** set up the appropiate fields for insertion          ****/
   /* ************************************************************/
  set VWOLHD02 empty;

  VWOLHD02.XWHCD = SL0EM210.XWHCD; /* warehouse code*/

  VWOLHD02.SL8WOGRP = SL0EM210.SL8WOGRP; /* wo grp number*/

  VWOLHD02.SL8WONBR = SL3REC.SL3NXWON; /* wo number*/

  VWOLHD02.PC3PONBR = SL0EW22.PC3PONBR;
  VWOLHD02.PC-SAP-PO-NBR = SL0EW22.PC-SAP-PO-NBR;
  VWOLHD02.XGPCD = SL0EM210.XGPCD;
  VWOLHD02.SY1STNBR = SL0EM210.SY1STNBR;
  VWOLHD02.SY2CLRID = SL0EM210.SY2CLRID;
  VWOLHD02.XDMCD = SL0EM210.XDMCD;
  VWOLHD02.XQACD = SL0EM210.XQACD;
  VWOLHD02.XOWCD = SL0EM210.XOWCD;
  VWOLHD02.PC2INSEG = SL0EM210.XSDCD;
  VWOLHD02.XEGCD = "000";
  VWOLHD02.XPGCD = SL0EM210.XPGCD;
  VWOLHD02.XUMCD = SL0EM210.XUMCD;
  VWOLHD02.SY1UNPCS = SL0EM210.SY1UNPCS;

  if (SL0EM210.SL0EMSLC > " ") /* passed edit and valid new slc*/
    VWOLHD02.XSLCD = SL0EM210.SL0EMSLC;
  else
    VWOLHD02.XSLCD = SL0EM210.XSLCD;
  end

  VWOLHD02.SL8WOPY = SL0EM210.SL8WOPY; /* PRIORITY CODE*/
  VWOLHD02.SL8WOPFL = "N"; /* Label print flag*/

  if (SL0EW02.SL0EWFAT == "RE" /* receiving*/
   || SL0EW02.SL0EWFAT == "RT") /* cust returns*/
    VWOLHD02.YWTCD = "01"; /* receipt code*/
  else
    if (SL0EW02.SL0EWTAT == "BU") /* bulk storage*/
      if (SL0EW02.SL0EWFAT == "BU") /* bulk storage*/
        VWOLHD02.YWTCD = "04"; /* misc.*/
      else
        VWOLHD02.YWTCD = "03"; /* return to storage*/
      end
    else
      if (SL0EW02.SL0EWTAT == "PR") /* processing*/
        VWOLHD02.YWTCD = "02"; /* replenishment*/
      else
        VWOLHD02.YWTCD = "04"; /* misc.*/
      end
    end
  end

  VWOLHD02.YWSCD = "01"; /* in process*/

  VWOLHD02.SL2PALET = SL0EW22.SL2PALET;
  VWOLHD02.PK2SCHNO = 0;
  VWOLHD02.TSOCRTNB = 0;

  if (SL0EM210.SL0EMCAS > " ") /* passed edit and valid new cas*/
    VWOLHD02.SL2CASE = SL0EM210.SL0EMCAS;
  else
    VWOLHD02.SL2CASE = SL0EW22.SL2CASE;
  end

  VWOLHD02.SL8FRAR = SL0EM210.SL8FRAR; /* from area cd*/

  VWOLHD02.SL8FRZN = SL0EM210.SL8FRZN; /* from zone cd*/

  VWOLHD02.SL8FRLC = SL0EM210.SL8FRLC; /* from location*/

  SL0EW02.SL0EW-PARSE-LOC = VWOLHD02.SL8FRLC; /* parse location*/

  VWOLHD02.SL8TOAR = SL0EW02.SL0EWTAC; /* to area cd frm table lookup*/

  if (SL0EW02.SL0EWTZC != " ") /* to zone code*/
    VWOLHD02.SL8TOZN = SL0EW02.SL0EWTZC;
  else
    VWOLHD02.SL8TOZN = SL5REC.SL4ZONE;
  end

  if (SL0EM210.SL8TOLC != "      ") /* to location code*/
    VWOLHD02.SL8TOLC = SL0EM210.SL8TOLC;
  else
    if (SL0EW02.SL0EWTAT == "BU") /* bulk storage*/
      VWOLHD02.SL8TOLC = SL5REC.SL5LOCTN;
    else
      if (SL0EW02.SL0EWTZP == "PI") /* picking*/
        VWOLHD02.SL8TOZN = SL7REC.SL4ZONE;
        VWOLHD02.SL8TOLC = SL7REC.SL5LOCTN;
      else
        if (SL0EW02.SL0EWTZP == "FU") /* full case*/
          VWOLHD02.SL8TOLC = "000000";
        end
      end
    end
  end

   /*  Cognizant Change to make SL_WO_NBR_OF_LABEL always 1 for Winchester label printing*/
  /*IF SL0EW02.SL-WO-NBR-OF-LABL EQ 0;*/
  VWOLHD02.SL-WO-NBR-OF-LABL = 1; /* set default to 1*/
  /*ELSE;*/
  /*  MOVE SL0EW02.SL-WO-NBR-OF-LABL TO VWOLHD02.SL-WO-NBR-OF-LABL;*/
  /*END;*/

  SL0EW02.SL-WO-NBR-OF-LABL = 0;

  VWOLHD02.SL8DRVR = " "; /* driver init*/

  if (SL0EM210.SL8ITMFL == "Y")
    VWOLHD02.SL8ITMFL = "Y"; /* itemized flag*/
  else
    if (SL0EW02.SL0EWFL1 == "Y") /* screen qty changed flag*/
      VWOLHD02.SL8ITMFL = "Y";
    else
      VWOLHD02.SL8ITMFL = "N";
    end
  end

  VWOLHD02.SL8INSTR = SL0EM210.SL8INSTR; /* special instructions*/

  VWOLHD02.SL8CRTBY = COMMAREA.CAUSERID; /* created by*/

  VWOLHD02.SL8UPDBY = " "; /* updated by*/

  VWOLHD02.ZZZSDT = X2CREC.X2CCURDT; /* setup date*/

   /* ************************************************************/
   /* *** setup the following before i/o sgrp execution:      ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = good return for add                        ****/
   /* ***   -911 = lockout*/
   /* ***   -803 = duplicate for add                          ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES2Z ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  SL5REC.XWHCD = VWOLHD02.XWHCD; /* whse*/
  SL5REC.XARCD = VWOLHD02.SL8FRAR; /* 'fr' area*/
  SL5REC.SL4ZONE = VWOLHD02.SL8FRZN; /* 'fr' zone*/
  SL5REC.SL5LOCTN = VWOLHD02.SL8FRLC; /* 'fr' loc*/

  XSSL5I0(); /* get 'fr' ylt*/

   /* ************************************************************/
   /* *** setup the following before i/o sgrp execution:      ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = good return for select                     ****/
   /* ***   -911 = lockout*/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

  set VROWS001 empty; /* Row storage area*/

  VROWS001.XWHCD = VWOLHD02.XWHCD; /* Warehouse*/
  VROWS001.XARCD = VWOLHD02.SL8FRAR; /* Area*/
  VROWS001.SL4ZONE = VWOLHD02.SL8FRZN; /* Zone*/
  VROWS001.SL5ROWCD = VWOLHD02.SL5ROWCD; /* Row*/

  TA1REC.TA1LOCAT[2] = "SL0ES2Z ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  SL0ES-ROWS-S(); /* <=== select sort row record*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return*/

    VWOLHD02.SL-SRT-ROW-CD = VROWS001.SL-SRT-ROW-CD;
    VWOLHD02.SL-SRT-ZONE-CD = VROWS001.SL-SRT-ZONE-CD;

    if (VROWS001.SL-ROW-DIR-IND == "D") /* Descending direction*/

      VWOLHD02.SL-SRT-LOC-NBR = VWOLHD02.XXX-NUM-4 * -1; /* Reverse sign*/
    else
      VWOLHD02.SL-SRT-LOC-NBR = VWOLHD02.XXX-NUM-4; /* Bin number*/

    end

    SL0EW02.SL0EW-SRT-ROW-CD = VROWS001.SL-SRT-ROW-CD; /* row code*/

    if (SL0EW02.SL0EW-SRT-ROW-CD == " ")
      VWOLHD02.SL-SRT-ROW-NBR = 0; /* Row number*/
    else
      VWOLHD02.SL-SRT-ROW-NBR = SL0EW02.SL0EW-SRT-ROW-NBR; /* Row nbr*/
    end

    if (VROWS001.SL-ROW-DIR-IND == "D") /* Descending direction*/

      VWOLHD02.SL-SRT-ROW-NBR = SL0EW02.SL0EW-SRT-ROW-NBR * -1;
                                   /* reverse sign*/
    end

    if (VROWS001.SL-BIN-DIR-IND == "D") /* Descending direction*/

      VWOLHD02.SL-SRT-BIN-NBR = SL0EW02.SL0EW-POS-3-4 * -1; /* reverse sign*/
    else
      VWOLHD02.SL-SRT-BIN-NBR = SL0EW02.SL0EW-POS-3-4; /* Bin number*/

    end

    if (VROWS001.SL-LVL-DIR-IND == "D") /* Descending direction*/

      VWOLHD02.SL-SRT-LVL-NBR = SL0EW02.SL0EW-POS-5-6 * -1; /* reverse sign*/
    else
      VWOLHD02.SL-SRT-LVL-NBR = SL0EW02.SL0EW-POS-5-6; /* Lvl number*/

    end

  else

    if (SQLCA.VAGen_SQLCODE == +100) /* Row not found*/

      SL0EW02.SL0EW-SRT-ROW-CD = VWOLHD02.SL-SRT-ROW-CD; /* Row code*/

      if (SL0EW02.SL0EW-SRT-ROW-CD == " ")
        VWOLHD02.SL-SRT-ROW-NBR = 0; /* Row number*/
      else
        VWOLHD02.SL-SRT-ROW-NBR = SL0EW02.SL0EW-SRT-ROW-NBR; /* Row nbr*/
      end

      VWOLHD02.SL-SRT-BIN-NBR = SL0EW02.SL0EW-POS-3-4; /* Bin nbr*/
      VWOLHD02.SL-SRT-LVL-NBR = SL0EW02.SL0EW-POS-5-6; /* Lvl nbr*/

      VWOLHD02.SL-SRT-ZONE-CD = VWOLHD02.SL8FRZN; /* Zone code*/

      VWOLHD02.SL-SRT-LOC-NBR = VWOLHD02.XXX-NUM-4; /* Bin number*/
      VWOLHD02.SL-SRT-ROW-CD = VWOLHD02.SL5ROWCD; /* Row code*/

    else
      if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S2ZA";
        SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
        return;
      end
      SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
      SLWREC.XXXLOCID = "S2ZB";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
  end

  if (SL5REC.YLTCD == "06")
    VWOLHD02.SL-SRT-LOC-NBR = 0; /* Loc number*/
    VWOLHD02.SL-SRT-ROW-CD = " "; /* Row code*/
  else
    VWOLHD02.SL-SRT-ROW-NBR = 0; /* Row number*/
    VWOLHD02.SL-SRT-BIN-NBR = 0; /* Bin number*/
    VWOLHD02.SL-SRT-LVL-NBR = 0; /* Lvl number*/
  end

   /* If the from location type is receiving get the to locatio type*/

  if (SL5REC.YLTCD == "27" /* if from 'receiving'*/
   || SL5REC.YLTCD == "30" 
   || SL5REC.YLTCD == "31")

    SL5REC.XARCD = VWOLHD02.SL8TOAR; /* 'to' area*/
    SL5REC.SL4ZONE = VWOLHD02.SL8TOZN; /* 'to' zone*/
    SL5REC.SL5LOCTN = VWOLHD02.SL8TOLC; /* 'to' loc*/

    XSSL5I0(); /* get 'to' ylt*/

    if (SL5REC.YLTCD == "22" /* if to 'handstack'*/
     || SL5REC.YLTCD == "06") /* if to 'handstack bulk'*/
      VWOLHD02.SL-WO-NBR-OF-LABL = 1; /* create just one label*/
    end

    if (SL5REC.XWHCD == "02" /* warehouse '02'*/
     || SL5REC.XARCD == "02") /* and 'to' area*/
      VWOLHD02.SL-WO-NBR-OF-LABL = 1; /* create just one label*/
    end

    if (SL5REC.XWHCD == "42") /* canada '42'*/
      VWOLHD02.SL-WO-NBR-OF-LABL = 1; /* create just one label*/
    end

  end

  SL5REC.XARCD = VWOLHD02.SL8TOAR; /* 'to' area*/
  SL5REC.SL4ZONE = VWOLHD02.SL8TOZN; /* 'to' zone*/
  SL5REC.SL5LOCTN = VWOLHD02.SL8TOLC; /* 'to' loc*/

  XSSL5I0(); /* get 'to' ylt*/

  if (SL5REC.YLTCD == "11" /* if picking - flow*/
   || SL5REC.YLTCD == "12" /* or picking - static*/
   || SL5REC.YLTCD == "13" /* or picking - high rack*/
   || SL5REC.YLTCD == "14" /* or instore promo*/
   || SL5REC.YLTCD == "15" /* or picking - offline*/
   || SL5REC.YLTCD == "16" /* or picking - default*/
   || SL5REC.YLTCD == "17" /* or special handling*/
   || SL5REC.YLTCD == "22" /* or full case - static*/
   || SL5REC.YLTCD == "10") /* or picking - pallet*/

    SL0ESI1(); /* get lane number*/

    if (SQLCA.VAGen_SQLCODE == 0) /* if lane number found*/
      VWOLHD02.SWCLNENB = PKEREC.PKERNSRN; /* norm lane*/
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* if lane number not found*/
        VWOLHD02.SL-WO-NBR-OF-LABL = 1;
      else
        SLWREC.SLWERRSW = "Y"; /* set error switch*/
        SLWREC.XXXLOCID = "S2ZF"; /* indicate location*/
        SLWREC.SLWMSGNO = 0001; /* severe error msg*/
        return; /* return to previous process*/
      end
    end

  else

    VWOLHD02.SL-WO-NBR-OF-LABL = 1;

  end

  XSSLS-A-VWOLHD02(); /* <=== add work order header record*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == -803) /* <=== duplicate records for add*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2ZC";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2ZD";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      SLWREC.SLWSKYSW = "N";
      SL0EST2();
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S2ZE";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of statement group                              ****/
   /* ************************************************************/

end // end SL0ES2Z

// update db using work order nbr
Function SL0ES3A()
         /* update the data base using work order number*/
   /* *************************************************************/
   /* ***   update the data bases using the work order        *****/
   /* ***   nbr.  this statement group is being performed     *****/
   /* ***   1 to 10 times depending on the number of work     *****/
   /* ***   order numbers.                                    *****/
   /* *************************************************************/

   /* *************************************************************/
   /* ***   obtain the work order header and update the       *****/
   /* ***   work order .                                      *****/
   /* *************************************************************/

  SL0ES3C(); /* select for update the work order using wo nbr*/
  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0ESEE(); /* update this wo data*/

   /* *************************************************************/
   /* ***   end of statement group                            *****/
   /* *************************************************************/

end // end SL0ES3A

// update db using w.o. grp nbr
Function SL0ES3B()
         /* update the data base using work order group number*/
   /* *************************************************************/
   /* ***   update the data bases using the work order group  *****/
   /* ***   nbr.  using the work order group number, select   *****/
   /* ***   a set of work order headers. for each work order  *****/
   /* ***   header, update it and select a set of work items. *****/
   /* ***   for each work order item update the prod location.*****/
   /* ***                                                     *****/
   /* ***     obtain set of work order headers                *****/
   /* ***     while sql code not eq 100                       *****/
   /* ***        update work order header                     *****/
   /* ***        obtain set of wo items                       *****/
   /* ***        while sql code not eq 100                    *****/
   /* ***           update prod/loc                           *****/
   /* ***        fetch next work order item                   *****/
   /* ***     fetch next work order header                    *****/
   /* ***                                                     *****/
   /* *************************************************************/

   /* *************************************************************/
   /* ***   obtain the work order header and update the       *****/
   /* ***   work order .                                      *****/
   /* *************************************************************/

  SL0ES3P(); /* select for update the work order*/
                                   /* using wo grp nbr*/
  if (SLWREC.SLWERRSW == "Y")
    return;
  end
  if (SL0EM310.XMSLMFNC == "2")
    SL0EW03.SL0EWFL4 = "1"; /* cancel function*/
  else
    SL0EW03.SL0EWFL4 = "0"; /* complete function*/
  end

  while (SQLCA.VAGen_SQLCODE == 0) /* perform for each work order header*/
    if (VWOLHD02.YWSCD != "02" /* complete*/
     && VWOLHD02.YWSCD != "03") /* cancelled*/
      SL0ESEE(); /* update this wo nbr's data*/
      if (SLWREC.SLWERRSW == "Y")
        return;
      end
      SL0EW03.SL0EWFL4 = "2";
                                   /* a cancel or complete performed*/
    end
    SL0ES3Q(); /* fetch next work order header*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
  end
   /* *************************************************************/
   /* ***   end of statement group                            *****/
   /* *************************************************************/

end // end SL0ES3B

// obt wo hdr using wo nbr
Function SL0ES3C()
        /* obtain work order header using the work order  nbr*/
   /* ************************************************************/
   /* *** obtain the work order using the work order number   ****/
   /* ***  as entered on the screen.                          ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** set up the appropiate fields for selection in i/o   ****/
   /* ************************************************************/

  VWOLHD02.XWHCD = SL0EM310.XWHCD;
  VWOLHD02.SL8WONBR = SL0EM310.SL8WONBR[SLWIDX01];

          /* Select for UPDATE on the work order data base*/
   /* ************************************************************/
   /* *** setup the following before i/o sgrp execution:      ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = found - continue                           ****/
   /* ***   +100 = not found - return w/ not fnd msg          ****/
   /* ***   -911 = deadlock - return w/ try again msg         ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES3C ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

   /* XSSL8U1;                /* Commented out for US go alive*/
   /* xssl8u1 is calling xssl8i0 which in turn will have calling IO module*/
   /* instead of calling within sgrp, now, it is changed to call directly*/
  XSSLS-S-VWOLHD02(); /* <=== sel a wo header using non stndrd*/
                                   /* key*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (VWOLHD02.YWSCD == "01") /* status is active*/
      SL0EW11.SL8FRAR = VWOLHD02.SL8FRAR; /* save from area*/
      SL0EW11.SL8FRZN = VWOLHD02.SL8FRZN; /* save from zone*/
      SL0EW11.SL8FRLC = VWOLHD02.SL8FRLC; /* save from loc*/
      SL0EW11.SL8TOAR = VWOLHD02.SL8TOAR; /* save from area*/
      SL0EW11.SL8TOZN = VWOLHD02.SL8TOZN; /* save from zone*/
      SL0EW11.SL8TOLC = VWOLHD02.SL8TOLC; /* save from loc*/
      SL0EW11.SWEPLLNB = VWOLHD02.SWEPLLNB; /* plan number*/
    else
      if (VWOLHD02.YWSCD == "02") /* status is complete*/
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S3CA";
        SLWREC.SLWMSGNO = 80; /* wo has already been completed*/
        set SL0EM310.SL8WONBR[SLWIDX01] cursor, bold;
        return;
      else
        if (VWOLHD02.YWSCD == "03") /* status is cancelled*/
          SLWREC.SLWERRSW = "Y";
                                   /* <=== for all other neg. sql codes*/
          SLWREC.XXXLOCID = "S3CB";
          SLWREC.SLWMSGNO = 81; /* wo has already been cancelled*/
          set SL0EM310.SL8WONBR[SLWIDX01] cursor, bold;
          return;
        end
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for select unique*/
      SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
      SLWREC.XXXLOCID = "S3CC";
      SLWREC.SLWMSGNO = 82; /* wo not found on data base*/
      set SL0EM310.SL8WONBR[SLWIDX01] cursor, bold;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3CD";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S3CE";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of statement group                              ****/
   /* ************************************************************/
end // end SL0ES3C

// obt work hdr using wo nbr
Function SL0ES3D()
            /* UPDATE THE  work order live header record*/

   /* ************************************************************/
   /* *** move appropiate fields for update                   ****/
   /* ***                                                     ****/
   /* ************************************************************/

  if (SL0EM310.XMSLMFNC == "1")
    VWOLHD02.YWSCD = "02"; /* completed*/
  else
    VWOLHD02.YWSCD = "03"; /* cancelled*/
  end
  VWOLHD02.SL8UPDBY = COMMAREA.CAUSERID;

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO and   ****/
   /* *** then setup the following before i/o sgrp execution: ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* ***   note: sgrp results will be in record              ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = concurrent update                          ****/
   /* ***   -911 = deadlock - try again msg                   ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/
  TA1REC.TA1LOCAT[2] = "SL0ES3D ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSLS-U-VWOLHD02(); /* <=== work order update*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for update*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3DA";
      SLWREC.SLWMSGNO = 0001; /* <--- concurrent update*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3DB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S3DC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of statement group                              ****/
   /* ************************************************************/
end // end SL0ES3D

// obtain set wo item records
Function SL0ES3E()
                   /* select set work order item records*/
   /* ************************************************************/
   /* *** select a set of work order item records using       ****/
   /* *** work order number and warehouse code                ****/
   /* ***                                                     ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** set up the appropiate fields for select             ****/
   /* ************************************************************/

  SL9REC.XWHCD = SL0EM310.XWHCD;
  SL9REC.SL8WONBR = VWOLHD02.SL8WONBR;

   /* ************************************************************/
   /* *** setup the following before i/o sgrp execution:      ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = good return for select                     ****/
   /* ***   -911 = lockout*/
   /* ***   +100 = not found                                  ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES3E ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL9S1(); /* <=== sel set work order item record*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== no work order items found*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3EA";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3EB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S3EC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end
   /* ************************************************************/
   /* *** end of statement group                              ****/
   /* ************************************************************/
end // end SL0ES3E

// obtain from prod/loc records
Function SL0ES3F()
   /* ************************************************************/
   /* *** obtain all products from the product/location table ****/
   /* ***  use work order header for from product info and    ****/
   /* ***      the work order item for the size data          ****/
   /* ************************************************************/

  SL0ES3O(); /* get to area processing type*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0ES3X(); /* get from area processing type*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO       ****/
   /* *** SL5REC.  For inquiry of from location type.         ****/
   /* ************************************************************/

  set SL5REC empty;

  SL5REC.XWHCD = SL0EM310.XWHCD;
  SL5REC.XARCD = VWOLHD02.SL8FRAR;
  SL5REC.SL4ZONE = VWOLHD02.SL8FRZN;
  SL5REC.SL5LOCTN = VWOLHD02.SL8FRLC;

  XSSL5I0(); /* get from location type*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO       ****/
   /* *** VSYLOC02.  use setupd function for later replace      ****/
   /* ***          and delete                                 ****/
   /* ************************************************************/

  set VSYLOC02 empty;

  VSYLOC02.XWHCD = SL0EM310.XWHCD;
  VSYLOC02.XARCD = VWOLHD02.SL8FRAR;
  VSYLOC02.SL4ZONE = VWOLHD02.SL8FRZN;
  VSYLOC02.SL5LOCTN = VWOLHD02.SL8FRLC;
  VSYLOC02.SL2PALET = VWOLHD02.SL2PALET;
  VSYLOC02.XGPCD = VWOLHD02.XGPCD;
  VSYLOC02.XOWCD = VWOLHD02.XOWCD;
  VSYLOC02.SY1STNBR = VWOLHD02.SY1STNBR;
  VSYLOC02.SY2CLRID = VWOLHD02.SY2CLRID;
  VSYLOC02.XDMCD = VWOLHD02.XDMCD;
  VSYLOC02.XQACD = VWOLHD02.XQACD;
  VSYLOC02.PC2INSEG = VWOLHD02.PC2INSEG;
  VSYLOC02.XEGCD = VWOLHD02.XEGCD;
  VSYLOC02.XPGCD = VWOLHD02.XPGCD;
  VSYLOC02.XUMCD = VWOLHD02.XUMCD;
  VSYLOC02.SY1UNPCS = VWOLHD02.SY1UNPCS; /* Work order units/case*/
  if (VWOLHD02.XWHCD == "02" /* Greenland*/
   || VWOLHD02.XWHCD == "04" /* or Memphis Footwear*/
   || VWOLHD02.XWHCD == "07" /* or Wilsonville*/
   || VWOLHD02.XWHCD == "25" /* or NSG*/
   || VWOLHD02.XWHCD == "51" /* or Memphis Apparel*/
   || VWOLHD02.XWHCD == "42") /* or Canada*/
    if (SL0EW03.SL0EWFAT == "PR") /* From processing*/
      if (SL5REC.YLTCD == "11" /* Picking flow*/
       || SL5REC.YLTCD == "10" /* or Picking static*/
       || SL5REC.YLTCD == "12" /* or Picking static*/
       || SL5REC.YLTCD == "13" /* or Picking high rack*/
       || SL5REC.YLTCD == "14" /* or Instore promo*/
       || SL5REC.YLTCD == "88" /* or vision wear 07 xwh*/
       || SL5REC.YLTCD == "89" /* or balls       07 xwh*/
       || SL5REC.YLTCD == "16" /* or Picking default*/
       || SL5REC.YLTCD == "19" /* or Supply replenishment*/
       || SL5REC.YLTCD == "90") /* or picking for golf*/
        VSYLOC02.SY1UNPCS = 0; /* Zero units/case*/
      end
    end
  end
  VSYLOC02.SY5SZID = SL9REC.SY5SZID;
  VSYLOC02.PC3PONBR = -1;
  VSYLOC02.PC-SAP-PO-NBR = "*"; /* vsyloc02 IO expects **/
  VSYLOC02.SL1CRTDT = -1;

   /* **************  sl23 temporary change*************/

  if (SL0EW03.SL0EWFAT == "PR"
   && SL0EW03.SL0EWTAT == "BU"
   && ((SL5REC.YLTCD >= "11"
   && SL5REC.YLTCD <= "13") || (SL5REC.YLTCD == "88" || 
  SL5REC.YLTCD == "89")))
    VSYLOC02.SL2CASE = "        ";
    VSYLOC02.XSLCD = "000";
  else
    VSYLOC02.SL2CASE = VWOLHD02.SL2CASE;
    VSYLOC02.XSLCD = VWOLHD02.XSLCD;
  end

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO and   ****/
   /* *** then setup the following before i/o sgrp execution: ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* ***   note: sgrp results will be in record              ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = not found - setup not fnd error/msg        ****/
   /* ***   -911 = deadlock - try again msg                   ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES3F ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

   /* XSSL6X5;                  /*this is  calling xssl6s5*/
  XSSLS-S5-VSYLOC02(); /* <=== std prod loctn setupd*/

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for setupd*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3FA";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3FB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S3FC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES3F

// update prod/loc for from loc
Function SL0ES3G()
               /* UPDATE PROD/LOC FOR FROM LOC*/
   /* ************************************************************/
   /* ***      update the VSYLOC02 obtained in the prior        ****/
   /* ***      setupd                                         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** move appropiate fields for update                   ****/
   /* *** note: sl6onhnd already calc.d to determine upd vs add***/
   /* ************************************************************/

  if (VSYLOC02.XWHCD == "02" /* Greenland*/
   || VSYLOC02.XWHCD == "04" /* or Memphis Footwear*/
   || VSYLOC02.XWHCD == "07" /* Wilsonville*/
   || VSYLOC02.XWHCD == "25" /* or NSG*/
   || VSYLOC02.XWHCD == "51" /* or Memphis Apparel*/
   || VSYLOC02.XWHCD == "42") /* or Canada*/
    if (SL5REC.YLTCD == "22" /* and hand stack*/
     || SL5REC.YLTCD == "06") /* and hand stack bulk*/
      VSYLOC02.SY1UNPCS = VSYLOC02.SL6ONHND; /* Units/case*/
    end
  end

  VSYLOC02.SL6STASD = SL0EW03.SL0EWRBQ;
  if (VSYLOC02.SL6STASD == 0)
    VSYLOC02.INASAID = 0;
    VSYLOC02.SL6SADTE = 0;
  end
  if (VSYLOC02.SL6ONHND == 0)
    VSYLOC02.SL1CRTDT = 0;
    VSYLOC02.SL6RTSDT = 0;
    VSYLOC02.PC3PONBR = 0;
    VSYLOC02.PC-SAP-PO-NBR = " ";
    VSYLOC02.PC3POIDT = 0;
    VSYLOC02.PCFSECD = " ";
    VSYLOC02.FY1FCTYC = " ";
    VSYLOC02.PC4ORTYP = " ";
  end

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO and   ****/
   /* *** then setup the following before i/o sgrp execution: ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* ***   note: sgrp results will be in record              ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = concurrent update                          ****/
   /* ***   -911 = deadlock - try again msg                   ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES3G ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  if (VSYLOC02.XWHCD == "02" /* Greenland*/
   || VSYLOC02.XWHCD == "04" /* or Memphis Footwear*/
   || VSYLOC02.XWHCD == "07" /* or Wilsonville*/
   || VSYLOC02.XWHCD == "25" /* or NSG*/
   || VSYLOC02.XWHCD == "51" /* or Memphis Apparel*/
   || VSYLOC02.XWHCD == "42") /* or Canada*/
    if (SL5REC.YLTCD == "22" /* and hand stack*/
     || SL5REC.YLTCD == "06") /* and hand stack bulk*/
      XSSLS-U-VSYLOC02(); /* <=== replace prod/location record*/
    else
      XSSLS-UA-VSYLOC02(); /* <=== replace prod/location record*/
    end
  else
    XSSLS-UA-VSYLOC02(); /* <=== replace prod/location record*/
  end

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for update*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3GA";
      SLWREC.SLWMSGNO = 0001; /* <--- concurrent update*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3GB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S3GC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES3G

// delete prod/loc for from loc
Function SL0ES3H()
               /* DELETE PROD/LOC FOR FROM LOC*/
   /* ************************************************************/
   /* ***      DELETE the sl6rec obtained in the prior        ****/
   /* ***      setupd                                         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** move appropiate fields for update                   ****/
   /* *** none for delete, uses setupd sl6rec obtained above  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO and   ****/
   /* *** then setup the following before i/o sgrp execution: ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* ***   note: sgrp results will be in record              ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = no record to delete                        ****/
   /* ***   -911 = deadlock - try again msg                   ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES3H ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSLS-DA-VSYLOC02(); /* <=== delete prod/location record*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for delete*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3HA";
      SLWREC.SLWMSGNO = 0001; /* <--- already deleted*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3HB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S3HC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES3H

// setupd prod/loc for to loc
Function SL0ES3I()
               /* OBTAIN PROD/LOC FOR TO LOC*/
   /* ************************************************************/
   /* *** obtain all products from the product/location table ****/
   /* ***  use work order header for to   product info and    ****/
   /* ***      the work order item for the size data          ****/
   /* ************************************************************/

  SL0ES3O(); /* get to area processing type*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* ***  verify to location for loc type before proceding   ****/
   /* ************************************************************/

  SL0ES3Y(); /* verify to location*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO       ****/
   /* *** VSYLOC02.  use setupd function for later replace      ****/
   /* ************************************************************/

  VSYLOC02.XARCD = VWOLHD02.SL8TOAR;
  VSYLOC02.SL4ZONE = VWOLHD02.SL8TOZN;
  VSYLOC02.SL5LOCTN = VWOLHD02.SL8TOLC;
  VSYLOC02.SL2PALET = "      ";
  VSYLOC02.SY1UNPCS = VWOLHD02.SY1UNPCS;

  if (SL0EW03.SL0EWTAT == "PR")
    if (VWOLHD02.XWHCD == "02" /* Greenland*/
     || VWOLHD02.XWHCD == "04" /* or Memphis Footwear*/
     || VWOLHD02.XWHCD == "07" /* or Wilsonville*/
     || VWOLHD02.XWHCD == "25" /* or NSG*/
     || VWOLHD02.XWHCD == "51" /* or Memphis Apparel*/
     || VWOLHD02.XWHCD == "42") /* or Canada*/
      if (VSYLOC02.INASAID > 0
       || SL5REC.YLTCD == "22")
        if (SL5REC.YLTCD == "22")
          VSYLOC02.SY1UNPCS = -1;
        end
      else
        if (VWOLHD02.XWHCD == "25" /* NSG*/
         || VWOLHD02.XWHCD == "51" /* Memphis Apparel*/
         || VWOLHD02.XWHCD == "42") /* Canada*/
          VSYLOC02.XSLCD = "000";
          VSYLOC02.SL2CASE = "        ";
          VSYLOC02.PC3POIDT = 0;
          VSYLOC02.PC3PONBR = 0;
          VSYLOC02.PC-SAP-PO-NBR = " ";
          VSYLOC02.PCFSECD = " ";
          VSYLOC02.FY1FCTYC = " ";
          VSYLOC02.PC4ORTYP = " ";
          VSYLOC02.SL1CRTDT = 0;
        end
        if (SL5REC.YLTCD == "10"
         || SL5REC.YLTCD == "11"
         || SL5REC.YLTCD == "12"
         || SL5REC.YLTCD == "13"
         || SL5REC.YLTCD == "14"
         || SL5REC.YLTCD == "16"
         || SL5REC.YLTCD == "88"
         || SL5REC.YLTCD == "89"
         || SL5REC.YLTCD == "90"
         || SL5REC.YLTCD == "19")
          VSYLOC02.SY1UNPCS = 0;
          VSYLOC02.XSLCD = "000";
          VSYLOC02.SL2CASE = "        ";
          VSYLOC02.PC3POIDT = 0;
          VSYLOC02.PC3PONBR = 0;
          VSYLOC02.PC-SAP-PO-NBR = " ";
          VSYLOC02.PCFSECD = " ";
          VSYLOC02.FY1FCTYC = " ";
          VSYLOC02.PC4ORTYP = " ";
          VSYLOC02.SL1CRTDT = 0;
        end

        /* zero units per case field for offline 02 18 000000*/

        if (VWOLHD02.XWHCD == "42" /* Canada*/
         && SL5REC.YLTCD == "15") 
          VSYLOC02.SY1UNPCS = 0;
        end
      end
    else
      VSYLOC02.XSLCD = "000";
      VSYLOC02.SL2CASE = "        ";
      VSYLOC02.PC3POIDT = 0;
      VSYLOC02.PC3PONBR = 0;
      VSYLOC02.PC-SAP-PO-NBR = " ";
      VSYLOC02.PCFSECD = " ";
      VSYLOC02.FY1FCTYC = " ";
      VSYLOC02.PC4ORTYP = " ";
      VSYLOC02.SL1CRTDT = 0;
    end
  else
    if (SL0EW03.SL0EWTAT == "BU"
     && VWOLHD02.XWHCD == "02" /* Greenland*/
     && SL5REC.YLTCD == "06")  /* handstack bulk*/
      VSYLOC02.SY1UNPCS = -1;
    else
       /* *** temporary change for sl23 ******/
      VSYLOC02.XSLCD = VWOLHD02.XSLCD;
      VSYLOC02.SL2CASE = VWOLHD02.SL2CASE;
    end
  end

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO and   ****/
   /* *** then setup the following before i/o sgrp execution: ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* ***   note: sgrp results will be in record              ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = not found - setup not fnd error/msg        ****/
   /* ***   -911 = deadlock - try again msg                   ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES3I ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  if (VSYLOC02.XWHCD == "07" /* Wilsonville*/
   || VSYLOC02.XWHCD == "04") /* Memphis Footwear*/
    if (SL0EW03.SL0EWTAT != "BU") /* and NOT bulk 'to' area type*/
      XSSLS-SB-VSYLOC02(); /* <=== read unique for update*/
    else
      if (VSYLOC02.SY1UNPCS == -1)
        XSSLS-S-VSYLOC02(); /* <=== read unique for update*/
      else
        XSSLS-SA-VSYLOC02(); /* <=== read unique for update*/
      end
    end
  else
    if (VSYLOC02.SY1UNPCS == -1)
      XSSLS-S-VSYLOC02(); /* <=== read unique for update*/
    else
      XSSLS-SA-VSYLOC02(); /* <=== read unique for update*/
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == +100) /* <=== for setupd*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3IA";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S3IB";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES3I

// insert prod/loc for to loc
Function SL0ES3J()
               /* INSERT PROD/LOC FOR TO LOCATION*/
   /* ************************************************************/
   /* *** obtain all products from the product/location table ****/
   /* ***  use work order header for to   product info and    ****/
   /* ***      the work order item for the size data          ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO       ****/
   /* *** VSYLOC02.  use insert function                        ****/
   /* *** note: since adding record setup for update,         ****/
   /* ***       zero out flds not involved                    ****/
   /* ************************************************************/

  VSYLOC02.SL6ONHND = SL0EW03.SL0EWWQY;

  if (VSYLOC02.XWHCD == "02" /* Greenland*/
   || VSYLOC02.XWHCD == "04" /* or Memphis Footwear*/
   || VSYLOC02.XWHCD == "07" /* or Wilsonville*/
   || VSYLOC02.XWHCD == "25" /* or Memphis Apparel*/
   || VSYLOC02.XWHCD == "51" /* or Memphis Apparel*/
   || VSYLOC02.XWHCD == "42") /* or Canada*/
    if (SL5REC.YLTCD == "22"
     || SL5REC.YLTCD == "06")
      VSYLOC02.SY1UNPCS = VSYLOC02.SL6ONHND;
    end
  end

  if (SL0EW03.SL0EWWMQ > 0) /* setaside qty*/
    VSYLOC02.SL6STASD = SL0EW03.SL0EWWMQ;
    VSYLOC02.INASAID = SL0EW03.INASAID;
    VSYLOC02.SL6SADTE = SL0EW03.SL6SADTE;
  else
    VSYLOC02.SL6STASD = 0;
    VSYLOC02.INASAID = 0;
    VSYLOC02.SL6SADTE = 0;
  end

  VSYLOC02.SL6PKRSV = 0;

  if (VWOLHD02.YWTCD == "03") /* return to storage*/
    VSYLOC02.SL6RTSDT = X2CREC.X2CCURDT;
  else
    if (VWOLHD02.YWTCD == "02") /* replenishment*/
      VSYLOC02.SL6RTSDT = 0;
    else
       /* ** next sentence ***/
       /* leave rts date alone to carry along in new record*/
       /* for misc. or receiving (it may be 0 or a value)*/
    end
  end

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO and   ****/
   /* *** then setup the following before i/o sgrp execution: ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* ***   note: sgrp results will be in record              ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   -803 = not found - setup not fnd error/msg        ****/
   /* ***   -911 = deadlock - try again msg                   ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES3J ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSLS-A-VSYLOC02(); /* <=== std prod loctn setupd*/

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    SLWREC.SLWERRSW = "Y";
    if (SQLCA.VAGen_SQLCODE == -803) /* <=== duplicate record for adds*/
      SLWREC.XXXLOCID = "S3JA";
      SLWREC.SLWMSGNO = 0001; /* <--- try again msg*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
        SLWREC.XXXLOCID = "S3JB";
        SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      else
        SLWREC.XXXLOCID = "S3JC";
        SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      end
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES3J

// replace prod/loc for to loc
Function SL0ES3K()
               /* UPDATE PROD/LOC FOR to loc*/
   /* ************************************************************/
   /* ***      update the VSYLOC02 obtained in the prior        ****/
   /* ***      setupd                                         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** move appropiate fields for update                   ****/
   /* ***                                                     ****/
   /* ************************************************************/

  VSYLOC02.SL6ONHND = VSYLOC02.SL6ONHND + SL0EW03.SL0EWWQY;
  if (VSYLOC02.XWHCD == "02" /* Greenland*/
   || VSYLOC02.XWHCD == "04" /* or Memphis Footwear*/
   || VSYLOC02.XWHCD == "07" /* Wilsonville*/
   || VSYLOC02.XWHCD == "25" /* or NSG*/
   || VSYLOC02.XWHCD == "51" /* or Memphis Apparel*/
   || VSYLOC02.XWHCD == "42") /* or Canada*/
    if (SL5REC.YLTCD == "22"
     || SL5REC.YLTCD == "06")
      VSYLOC02.SY1UNPCS = VSYLOC02.SL6ONHND;
    end
  end
  if (SL0EW03.SL0EWWMQ > 0)
    VSYLOC02.SL6STASD = VSYLOC02.SL6STASD + SL0EW03.SL0EWWMQ;
    VSYLOC02.INASAID = SL0EW03.INASAID;
    VSYLOC02.SL6SADTE = SL0EW03.SL6SADTE;
  end
  if (VWOLHD02.YWTCD == 03) /* return to storage*/
    VSYLOC02.SL6RTSDT = X2CREC.X2CCURDT;
  else
    if (VWOLHD02.YWTCD == "02") /* replenishment*/
       /* ** next sentence ***/
       /* leave rts date alone (is 0) since this 'to' area is pr*/
    else
       /* ** now receiving or misc.*/
      if (VSYLOC02.SL6RTSDT > 0)
         /* ** next sentence ***/
         /* leave rts date alone to keep existing rts date*/
      else
        VSYLOC02.SL6RTSDT = SL0EW03.SL0EWRTS;
         /* use the from loc rts date (even if 0)*/
      end
    end
  end

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO and   ****/
   /* *** then setup the following before i/o sgrp execution: ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* ***   note: sgrp results will be in record              ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = concurrent update                          ****/
   /* ***   -911 = deadlock - try again msg                   ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES3K ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  if (VSYLOC02.XWHCD == "02" /* Greenland*/
   || VSYLOC02.XWHCD == "04" /* Memphis Footwear*/
   || VSYLOC02.XWHCD == "07") /* Wilsonville*/
    if (SL0EW03.SL0EWTAT == "BU") /* Bulk location*/
      if (VSYLOC02.XWHCD == "02" /* Greenland*/
       && SL5REC.YLTCD == "06") 
        XSSLS-U-VSYLOC02(); /* <=== replace prod/location record*/
      else
        XSSLS-UA-VSYLOC02(); /* <=== replace prod/location record*/
      end
    else
      if (VSYLOC02.PC3PONBR == SL0EW03.PC3PONBR) /* Same PO*/
        XSSLS-U-VSYLOC02(); /* <=== replace prod/location record*/
      else
        XSSLS-D-VSYLOC02(); /* <=== delete prod/location record*/
        if (SQLCA.VAGen_SQLCODE == 0) /* Normal return*/
          VSYLOC02.ZZZCHGCT = 0; /* Change count*/
          VSYLOC02.SL1CRTDT = 0; /* RLOG create date*/
          VSYLOC02.PC3PONBR = 0; /* PO number*/
          VSYLOC02.PC-SAP-PO-NBR = " "; /* SAP PO NBR*/
          VSYLOC02.PC3POIDT = 0; /* PO id month range*/
          VSYLOC02.PCFSECD = " "; /* PO id season code*/
          VSYLOC02.PC4ORTYP = " "; /* PO order type code*/
          VSYLOC02.FY1FCTYC = " "; /* Factory code*/
          VSYLOC02.SL2PALET = " "; /* RLOG pallet*/
          VSYLOC02.SL2CASE = " "; /* RLOG case*/
          VSYLOC02.XSLCD = "000"; /* Class code*/
          XSSLS-A-VSYLOC02(); /* <=== add prod/location record*/
        end
      end
    end
  else
    if (VSYLOC02.XWHCD == "25" /* NSG*/
     || VSYLOC02.XWHCD == "51" /* Memphis Apparel*/
     || VSYLOC02.XWHCD == "42") /* Canada*/
      if (SL5REC.YLTCD == "22")
        XSSLS-U-VSYLOC02(); /* <=== replace prod/location record*/
      else
        XSSLS-UA-VSYLOC02(); /* <=== replace prod/location record*/
      end
    else
      XSSLS-U-VSYLOC02(); /* <=== replace prod/location record*/
    end
  end

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for update*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3KA";
      SLWREC.SLWMSGNO = 0001; /* <--- concurrent update*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3KB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S3KC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES3K

// fetch next work item
Function SL0ES3L()
        /* FETCH THE NEXT ROW FROM THE work item data base*/
   /* ************************************************************/
   /* *** setup the approriate record fields for the IO and   ****/
   /* *** then setup the following before i/o sgrp execution: ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* ***   note: sgrp results will be in record              ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = no more records*/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES3L ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL9F1(); /* fetch next work order item record*/

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for FETCH scan*/
      return;
    else
      SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
      SLWREC.XXXLOCID = "S3LA";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES3L

// update locat db for from loc
Function SL0ES3M()
            /* UPDATE THE FROM LOCATION (LOCATION DB)*/
   /* ************************************************************/
   /* *** move appropiate fields for read for update          ****/
   /* ***                                                     ****/
   /* ************************************************************/
  set SL5REC empty;

  SL5REC.XWHCD = SL0EM310.XWHCD;
  SL5REC.XARCD = SL0EW11.SL8FRAR;
  SL5REC.SL4ZONE = SL0EW11.SL8FRZN;
  SL5REC.SL5LOCTN = SL0EW11.SL8FRLC;

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO and   ****/
   /* *** then setup the following before i/o sgrp execution: ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* ***   note: sgrp results will be in record              ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = not found - severe error                   ****/
   /* ***   -911 = deadlock - try again msg                   ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES3M ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL5U1(); /* <=== location read for update*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3MA";
      SLWREC.SLWMSGNO = 0001; /* <--- not on db msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3MB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S3MC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** move appropiate fields for update                   ****/
   /* ***                                                     ****/
   /* ************************************************************/

  SL0EW11.XARCD = SL0EW11.SL8FRAR;
  SL0EW11.SL4ZONE = SL0EW11.SL8FRZN;
  SL0EW11.SL5LOCTN = SL0EW11.SL8FRLC;

  SL0ES3T(); /* determine location status*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL5REC.YLSCD = SL0EW11.YLSCD; /* set location status*/

  if (SL0EW11.SL0EWUFL == "Y")
    SL5REC.SL5MPDFL = SL0EW11.SL5MPDFL; /* mult prod flag*/
  end

  SL5REC.SL5STCDT = X2CREC.X2CCURDT;
  SL5REC.SL5FRWOC = SL5REC.SL5FRWOC - 1;

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO and   ****/
   /* *** then setup the following before i/o sgrp execution: ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* ***   note: sgrp results will be in record              ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = concurrent update                          ****/
   /* ***   -911 = deadlock - try again msg                   ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

  XSSL5R0(); /* <=== location update already coded*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for update*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3MD";
      SLWREC.SLWMSGNO = 0001; /* <--- concurrent update*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3ME";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S3MF";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES3M

// replace locat db for to loc
Function SL0ES3N()

            /* UPDATE THE to LOCATION (LOCATION DB)*/
   /* ************************************************************/
   /* *** move appropiate fields for read for update          ****/
   /* ***                                                     ****/
   /* ************************************************************/

  set SL5REC empty;

  SL5REC.XWHCD = SL0EM310.XWHCD;
  SL5REC.XARCD = SL0EW11.SL8TOAR;
  SL5REC.SL4ZONE = SL0EW11.SL8TOZN;
  SL5REC.SL5LOCTN = SL0EW11.SL8TOLC;

  TA1REC.TA1LOCAT[2] = "SL0ES3N ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL5U1(); /* <=== location read for update*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3NA";
      SLWREC.SLWMSGNO = 0001; /* <--- not on db msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3NB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S3NC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** move appropiate fields for update                   ****/
   /* ************************************************************/

  SL0EW11.XARCD = SL0EW11.SL8TOAR;
  SL0EW11.SL4ZONE = SL0EW11.SL8TOZN;
  SL0EW11.SL5LOCTN = SL0EW11.SL8TOLC;

  SL0ES3T(); /* determine location status*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL5REC.YLSCD = SL0EW11.YLSCD; /* set location status*/

   /* ************************************************************/
   /* *** decrement the row counter table per pallet          ****/
   /* ************************************************************/

  SL0EWX1.SL0EWCZN = SL0EW11.SL8TOZN;
  SL0EWX1.SL0EWLOC = SL0EW11.SL8TOLC;
  SL0EWX1.SL0EWCRW = SL0EWX1.SL0EWROW;
  if (SL0EWC1.SL0EWCRC[SL0EWCIX] > 0)
    SL0EWC1.SL0EWCRC[SL0EWCIX] = SL0EWC1.SL0EWCRC[SL0EWCIX] - 1;
  end

  SL5REC.SL5STCDT = X2CREC.X2CCURDT;
  SL5REC.SL5TOWOC = SL5REC.SL5TOWOC - 1;

  XSSL5R0(); /* <=== location update already coded*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for update*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3ND";
      SLWREC.SLWMSGNO = 0001; /* <--- concurrent update*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3NE";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S3NF";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES3N

// get to area process type
Function SL0ES3O()
   /* *******  get to area processing type  **********/

  SLWREC.XWHCD = SL0EM310.XWHCD;
  SLWREC.SLWTBLCD = VWOLHD02.SL8TOAR;
  if (SLWREC.SLWTBLKY in XARTBL.XARKEY)
    if (XARTBL.XARBLKFL[sysVar.arrayIndex] == "Y")
      SL0EW03.SL0EWTAT = "BU";
    else
      if (XARTBL.XARPRCFL[sysVar.arrayIndex] == "Y")
        SL0EW03.SL0EWTAT = "PR";
      else
        if (XARTBL.XARRCVFL[sysVar.arrayIndex] == "Y")
          SL0EW03.SL0EWTAT = "RE";
        else
          if (XARTBL.XARPKHFL[sysVar.arrayIndex] == "Y")
            SL0EW03.SL0EWTAT = "PA";
          else
            if (XARTBL.XARRTNFL[sysVar.arrayIndex] == "Y")
              SL0EW03.SL0EWTAT = "RT";
            else
              if (XARTBL.XARSHPFL[sysVar.arrayIndex] == "Y")
                SL0EW03.SL0EWTAT = "SH";
              else
                 /* all flags are 'n' = misc area*/
                 /* misc area = same as processing w/out flag = y*/
                 /* therefore: just setup "bu" area type*/
                SL0EW03.SL0EWTAT = "BU";
                return;
              end
            end
          end
        end
      end
    end
  end

end // end SL0ES3O

// obt wo header using wo grp nbr
Function SL0ES3P()
        /* obtain work order header using the work order grp nbr*/
   /* ************************************************************/
   /* *** obtain the work order using the work order grp nbr  ****/
   /* ***  as entered on the screen.                          ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** set up the appropiate fields for selection in i/o   ****/
   /* ************************************************************/

  VWOLHD02.XWHCD = SL0EM310.XWHCD;
  VWOLHD02.SL8WOGRP = SL0EM310.SL8WOGRP;

          /* Select for UPDATE on the work order data base*/
   /* ************************************************************/
   /* *** setup the following before i/o sgrp execution:      ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = found - continue                           ****/
   /* ***   +100 = not found - error message                  ****/
   /* ***   -911 = deadlock - return w/ try again msg         ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES3P ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

   /* XSSL8X5;                /* <=== sel a wo header using non stndrd key*/
   /* xssl8x5 was calling xssl8s5 which in turn calling the IO module*/
   /* now, it is changed to xssl8s5*/
  XSSLS-S5-VWOLHD02();

  if (SQLCA.VAGen_SQLCODE == 0)
    SL0EW11.SL8FRAR = VWOLHD02.SL8FRAR; /* save from area*/
    SL0EW11.SL8FRZN = VWOLHD02.SL8FRZN; /* save from zone*/
    SL0EW11.SL8FRLC = VWOLHD02.SL8FRLC; /* save from loc*/
    SL0EW11.SL8TOAR = VWOLHD02.SL8TOAR; /* save from area*/
    SL0EW11.SL8TOZN = VWOLHD02.SL8TOZN; /* save from zone*/
    SL0EW11.SL8TOLC = VWOLHD02.SL8TOLC; /* save from loc*/
    SL0EW11.SWEPLLNB = VWOLHD02.SWEPLLNB; /* plan number*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for select unique*/
      SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
      SLWREC.XXXLOCID = "S3PA";
      SLWREC.SLWMSGNO = 82; /* wo not found on data base*/
      set SL0EM310.SL8WOGRP cursor, bold;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3PB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S3PC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of statement group                              ****/
   /* ************************************************************/
end // end SL0ES3P

// fetch next work order header
Function SL0ES3Q()
     /* FETCH THE NEXT ROW FROM THE work order header data base*/
   /* ************************************************************/
   /* *** setup the approriate record fields for the IO and   ****/
   /* *** then setup the following before i/o sgrp execution: ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* ***   note: sgrp results will be in record              ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = no more records*/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES3L ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSLS-N5-VWOLHD02(); /* fetch next prod/loc record*/

  if (SQLCA.VAGen_SQLCODE == 0)
    SL0EW11.SL8FRAR = VWOLHD02.SL8FRAR; /* save from area*/
    SL0EW11.SL8FRZN = VWOLHD02.SL8FRZN; /* save from zone*/
    SL0EW11.SL8FRLC = VWOLHD02.SL8FRLC; /* save from loc*/
    SL0EW11.SL8TOAR = VWOLHD02.SL8TOAR; /* save from area*/
    SL0EW11.SL8TOZN = VWOLHD02.SL8TOZN; /* save from zone*/
    SL0EW11.SL8TOLC = VWOLHD02.SL8TOLC; /* save from loc*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for FETCH scan*/
      return;
    else
      SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
      SLWREC.XXXLOCID = "S3QA";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES3Q

// fetch next from prod locat
Function SL0ES3R()
        /* FETCH THE NEXT ROW FROM THE from prod location cursor*/
   /* ************************************************************/
   /* *** setup the approriate record fields for the IO and   ****/
   /* *** then setup the following before i/o sgrp execution: ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* ***   note: sgrp results will be in record              ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = no more records*/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES3R ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSLS-N5-VSYLOC02(); /* fetch next prod/loc record*/

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for FETCH scan*/
      return;
    else
      SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
      SLWREC.XXXLOCID = "S3RA";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES3R

// add from prod location record
Function SL0ES3S()
               /* INSERT PROD/LOC FOR from location*/
   /* ************************************************************/
   /* *** obtain all products from the product/location table ****/
   /* ***  use work order header for to   product info and    ****/
   /* ***      the work order item for the size data          ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO       ****/
   /* *** VSYLOC02.  use insert function                        ****/
   /* ***                                                     ****/
   /* ************************************************************/

  VSYLOC02.XARCD = VWOLHD02.SL8FRAR;
  VSYLOC02.SL4ZONE = VWOLHD02.SL8FRZN;
  VSYLOC02.SL5LOCTN = VWOLHD02.SL8FRLC;
  VSYLOC02.SL2PALET = VWOLHD02.SL2PALET;
  VSYLOC02.SL6ONHND = 0 - SL0EW03.SL0EWWQR;
  if (VSYLOC02.XWHCD == "02" /* Greenland*/
   || VSYLOC02.XWHCD == "04" /* or Memphis Footwear*/
   || VSYLOC02.XWHCD == "07" /* or Wilsonville*/
   || VSYLOC02.XWHCD == "25" /* NSG*/
   || VSYLOC02.XWHCD == "51" /* or Memphis Apparel*/
   || VSYLOC02.XWHCD == "42") /* or Canada*/
    if (SL5REC.YLTCD == "22"
     || SL5REC.YLTCD == "06")
      VSYLOC02.SY1UNPCS = VSYLOC02.SL6ONHND;
    end
  end
  VSYLOC02.PC3PONBR = 0;
  VSYLOC02.PC-SAP-PO-NBR = " ";
  VSYLOC02.PC3POIDT = 0;
  VSYLOC02.PCFSECD = " ";
  VSYLOC02.FY1FCTYC = " ";
  VSYLOC02.PC4ORTYP = " ";
  VSYLOC02.SL1CRTDT = 0;
  VSYLOC02.SL6STASD = 0;
  VSYLOC02.INASAID = 0;
  VSYLOC02.SL6SADTE = 0;
  VSYLOC02.SL6PKRSV = 0;
  VSYLOC02.SL6RTSDT = 0;

   /* *******temporary change for sl23 -- change when work order*/
   /* *******record has new case and new slc fields  ***********/

  if (SL0EW03.SL0EWFAT == "PR"
   && SL0EW03.SL0EWTAT == "BU")
    VSYLOC02.SL2CASE = "        ";
    VSYLOC02.XSLCD = "000";
  else
    VSYLOC02.SL2CASE = VWOLHD02.SL2CASE;
    VSYLOC02.XSLCD = VWOLHD02.XSLCD;
  end

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO and   ****/
   /* *** then setup the following before i/o sgrp execution: ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* ***   note: sgrp results will be in record              ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   -803 = not found - setup not fnd error/msg        ****/
   /* ***   -911 = deadlock - try again msg                   ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES3S ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL6A1(); /* <=== std prod loctn insert*/

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    if (SQLCA.VAGen_SQLCODE == -803) /* <=== duplicate record for adds*/
      SL0ESSS(); /* <=== read unique for update*/
      if (SLWREC.SLWERRSW == "Y")
        return;
      end
      VSYLOC02.SL6ONHND = VSYLOC02.SL6ONHND - SL0EW03.SL0EWWQR;
      if (VSYLOC02.XWHCD == "02" /* Greenland*/
       || VSYLOC02.XWHCD == "04" /* or Memphis Footwear*/
       || VSYLOC02.XWHCD == "07" /* or Wilsonville*/
       || VSYLOC02.XWHCD == "25" /* or NSG*/
       || VSYLOC02.XWHCD == "51" /* or Memphis Apparel*/
       || VSYLOC02.XWHCD == "42") /* or Canada*/
        if (SL5REC.YLTCD == "22"
         || SL5REC.YLTCD == "06")
          VSYLOC02.SY1UNPCS = VSYLOC02.SL6ONHND;
        end
      end
      SL0EW03.SL0EWRBQ = VSYLOC02.SL6STASD;
      SL0ES3G(); /* REPLACE PROD/LOC REC FOR FROM LOC*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3SB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S3SC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES3S

// get location status
Function SL0ES3T()
               /* get location status*/
   /* ************************************************************/
   /* *** this routine will determine what a locations status ****/
   /* *** should be.                                          ****/
   /* *** before performing this routine:                     ****/
   /* ***   1.  put the area code in sl0ew11.xarcd            ****/
   /* ***   2.  put the zone code in sl0ew11.sl4zone          ****/
   /* ***   3.  put the location code in sl0ew11.sl5loctn     ****/
   /* *** after performing this routine:                      ****/
   /* ***   1.  check the error switch (slwrec.slwerrsw)      ****/
   /* ***   2.  if no error,                                  ****/
   /* ***         the location status will be in              ****/
   /* ***            sl0ew11.ylscd                            ****/
   /* ************************************************************/

  SL0ES3U(); /* check for from work orders*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0ES3V(); /* check for to work orders*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** determine what the location status is to be         ****/
   /* ************************************************************/

  if (SL0EW11.SL0EWFWO == "Y" /* from w/o exists*/
   && SL0EW11.SL0EWTWO == "Y") /* to w/o exists*/
    SL0EW11.YLSCD = "07"; /* combined loc status*/
  else
    if (SL0EW11.SL0EWFWO == "Y") /* from w/o exists*/
      SL0EW11.YLSCD = "03"; /* reserved*/
    else
      if (SL0EW11.SL0EWTWO == "Y") /* to w/o exists*/
        SL0EW11.YLSCD = "04"; /* in-transit*/
      else
        SL0ES3W(); /* set loc status empty or occupied*/
      end
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES3T

// check for from work order
Function SL0ES3U()

   /* ************************************************************/
   /* *** this routine checks for active from work orders.    ****/
   /* *** sl0ew11.sl0ewfwo is set to 'y' if there are active  ****/
   /* *** from work orders for the location, otherwise it is  ****/
   /* ************************************************************/

  set VWOLHD02 empty;

  VWOLHD02.XWHCD = SL0EM310.XWHCD;
  VWOLHD02.SL8FRAR = SL0EW11.XARCD;
  VWOLHD02.SL8FRZN = SL0EW11.SL4ZONE;
  VWOLHD02.SL8FRLC = SL0EW11.SL5LOCTN;
  VWOLHD02.YWTCD = "*"; /* select all w/o types*/
  VWOLHD02.YWSCD = "01"; /* select active w/o*/
  SLVREC.SLVSDT = 0; /* start date*/
  SLVREC.SLVEDT = 99999999; /* end date*/

  XSSLS-S1-VWOLHD02(); /* select from work orders*/

  if (SQLCA.VAGen_SQLCODE == 0)
    SL0EW11.SL0EWFWO = "Y"; /* from w/o exists flag*/
    SL0EW11.SWEPLLNB = VWOLHD02.SWEPLLNB;
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      SL0EW11.SL0EWFWO = "N"; /* from w/o exists flag*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S3UA";
        SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      else
        SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
        SLWREC.XXXLOCID = "S3UB";
        SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      end
    end
  end

  XSSLS-C1-VWOLHD02(); /* close cursor*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES3U

// check for to work order
Function SL0ES3V()

   /* ************************************************************/
   /* *** this routine checks for active from work orders.    ****/
   /* *** sl0ew11.sl0ewfwo is set to 'y' if there are active  ****/
   /* *** from work orders for the location, otherwise it is  ****/
   /* ************************************************************/

  set VWOLHD02 empty;

  VWOLHD02.XWHCD = SL0EM310.XWHCD;
  VWOLHD02.SL8TOAR = SL0EW11.XARCD;
  VWOLHD02.SL8TOZN = SL0EW11.SL4ZONE;
  VWOLHD02.SL8TOLC = SL0EW11.SL5LOCTN;
  VWOLHD02.YWTCD = "*"; /* select all w/o types*/
  VWOLHD02.YWSCD = "01"; /* select active w/o*/
  SLVREC.SLVSDT = 0; /* start date*/
  SLVREC.SLVEDT = 99999999; /* end date*/

  XSSLS-S2-VWOLHD02(); /* select to work orders*/

  if (SQLCA.VAGen_SQLCODE == 0)
    SL0EW11.SL0EWTWO = "Y"; /* to w/o exists flag*/
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      SL0EW11.SL0EWTWO = "N"; /* to w/o exists flag*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S3VA";
        SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      else
        SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
        SLWREC.XXXLOCID = "S3VB";
        SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      end
    end
  end

  XSSLS-C2-VWOLHD02(); /* close cursor*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES3V

// set loc status empty or occupi
Function SL0ES3W()

   /* ************************************************************/
   /* *** this routine determines whether the location status ****/
   /* *** should be EMPTY or OCCUPIED.                        ****/
   /* ************************************************************/

  set VSYLOC02 empty;

  VSYLOC02.XWHCD = SL0EM310.XWHCD;
  VSYLOC02.XARCD = SL0EW11.XARCD;
  VSYLOC02.SL4ZONE = SL0EW11.SL4ZONE;
  VSYLOC02.SL5LOCTN = SL0EW11.SL5LOCTN;
  VSYLOC02.SL2PALET = "*";
  VSYLOC02.SL2CASE = "*";

  XSSLS-S3-VSYLOC02(); /* select product/location*/

  SL0EW11.SL0EWUFL = "N";

  if (SQLCA.VAGen_SQLCODE == 0)
    SL0EW11.YLSCD = "02"; /* occupied status*/
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      SL0EW11.YLSCD = "01"; /* empty status*/
      if (SL0EW11.SWEPLLNB > 0)
        SL0EW11.SL5MPDFL = "N";
        SL0EW11.SL0EWUFL = "Y";
      end
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S3WA";
        SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      else
        SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
        SLWREC.XXXLOCID = "S3WB";
        SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      end
    end
  end

  XSSLS-C3-VSYLOC02(); /* close cursor*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES3W

// get from area process type
Function SL0ES3X()
   /* *******  get to area processing type  **********/

  SLWREC.XWHCD = SL0EM310.XWHCD;
  SLWREC.SLWTBLCD = VWOLHD02.SL8FRAR;
  if (SLWREC.SLWTBLKY in XARTBL.XARKEY)
    if (XARTBL.XARBLKFL[sysVar.arrayIndex] == "Y")
      SL0EW03.SL0EWFAT = "BU";
    else
      if (XARTBL.XARPRCFL[sysVar.arrayIndex] == "Y")
        SL0EW03.SL0EWFAT = "PR";
      else
        if (XARTBL.XARRCVFL[sysVar.arrayIndex] == "Y")
          SL0EW03.SL0EWFAT = "RE";
        else
          if (XARTBL.XARPKHFL[sysVar.arrayIndex] == "Y")
            SL0EW03.SL0EWFAT = "PA";
          else
            if (XARTBL.XARRTNFL[sysVar.arrayIndex] == "Y")
              SL0EW03.SL0EWFAT = "RT";
            else
              if (XARTBL.XARSHPFL[sysVar.arrayIndex] == "Y")
                SL0EW03.SL0EWFAT = "SH";
              else
                 /* all flags are 'n' = misc area*/
                 /* misc area = same as processing w/out flag = y*/
                 /* therefore: just setup "bu" area type*/
                SL0EW03.SL0EWFAT = "BU";
                return;
              end
            end
          end
        end
      end
    end
  end

end // end SL0ES3X

// verify to location
Function SL0ES3Y()
   /* ************************************************************/
   /* *** VERIFY  to location                                 ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO       ****/
   /* *** SL5REC                                              ****/
   /* ************************************************************/

  SL5REC.XWHCD = VWOLHD02.XWHCD;
  SL5REC.XARCD = VWOLHD02.SL8TOAR;
  SL5REC.SL4ZONE = VWOLHD02.SL8TOZN;
  SL5REC.SL5LOCTN = VWOLHD02.SL8TOLC;

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO and   ****/
   /* *** then setup the following before i/o sgrp execution: ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* ***   note: sgrp results will be in record              ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = successful - continue                      ****/
   /* ***  non 0 = severe error                               ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES3Y ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL5I0(); /* <=== std loctn inquiry*/

  if (SQLCA.VAGen_SQLCODE == 0)
  else
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S3YA";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES3Y

// check case for *'s
Function SL0ES7C()

   /* ************************************************************/
   /* *** setup the following x4crec fields                   ****/
   /* ***   x4cfnc =                                          ****/
   /* ***     'E'  for error if find value found (rc=2)       ****/
   /* ***     'X'  to translate each find value to fill value ****/
   /* ***   x4cfnd = value to 'find' or match for error/xlate ****/
   /* ***   x4cfil = if 'X', fill value to replace found value****/
   /* ***   x4clen = length of this field (30 or less)        ****/
   /* ***   x4cfld = move your field to this character field  ****/
   /* ***            note: if 'X', = translated field value   ****/
   /* ***                          = move back to your field  ****/
   /* *** execute XSCKBYT sgrp                                ****/
   /* *** return codes:                                       ****/
   /* ***   0 = no characters found or translation OK         ****/
   /* ***   2 = characters found for error function           ****/
   /* ***   3 = invalid function code                         ****/
   /* ************************************************************/

  X4CREC.X4CFNC = "E";
  X4CREC.X4CFND = "*";
  X4CREC.X4CFIL = " ";
  X4CREC.X4CLEN = 8;
  X4CREC.X4CFLD = SL0EM110.SL2CASE[SLWIDX01];

  XSCKBYT(); /* <=== check fld's bytes*/

  if (X4CREC.X4CRC == 0)
     /* ** next sentence ***/
  else
    if (X4CREC.X4CRC == 2)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S7CA";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0EM110.SL2CASE[SLWIDX01] cursor, bold;
      /* EZERTN*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S7CB";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      set SL0EM110.SL2CASE[SLWIDX01] cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES7C

// check palet for *'s
Function SL0ES7P()

   /* ************************************************************/
   /* *** setup the following x4crec fields                   ****/
   /* ***   x4cfnc =                                          ****/
   /* ***     'E'  for error if find value found (rc=2)       ****/
   /* ***     'X'  to translate each find value to fill value ****/
   /* ***   x4cfnd = value to 'find' or match for error/xlate ****/
   /* ***   x4cfil = if 'X', fill value to replace found value****/
   /* ***   x4clen = length of this field (30 or less)        ****/
   /* ***   x4cfld = move your field to this character field  ****/
   /* ***            note: if 'X', = translated field value   ****/
   /* ***                          = move back to your field  ****/
   /* *** execute XSCKBYT sgrp                                ****/
   /* *** return codes:                                       ****/
   /* ***   0 = no characters found or translation OK         ****/
   /* ***   2 = characters found for error function           ****/
   /* ***   3 = invalid function code                         ****/
   /* ************************************************************/

  X4CREC.X4CFNC = "E";
  X4CREC.X4CFND = "*";
  X4CREC.X4CFIL = " ";
  X4CREC.X4CLEN = 5;
  X4CREC.X4CFLD = SL0EM110.SL2PALET[SLWIDX01];

  XSCKBYT(); /* <=== check fld's bytes*/

  if (X4CREC.X4CRC == 0)
     /* ** next sentence ***/
  else
    if (X4CREC.X4CRC == 2)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S7PA";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0EM110.SL2PALET[SLWIDX01] cursor, bold;
      /* EZERTN*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S7PB";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      set SL0EM110.SL2PALET[SLWIDX01] cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES7P

// obtain to location product
Function SL0ES7R()
   /* ************************************************************/
   /* *** obtain all products from the product/location table ****/
   /* *** for the to location                                 ****/
   /* ************************************************************/

  VSYLOC02.XWHCD = SL0EM110.XWHCD;
  VSYLOC02.XARCD = SL0EW01.SL0EWTAC;
  VSYLOC02.SL4ZONE = SL0EW01.SL0EWTZC;
  VSYLOC02.SL5LOCTN = SL0EM110.SL8TOLC;

  VSYLOC02.SL2PALET = "*"; /* wild card palet*/
  VSYLOC02.SL2CASE = "*"; /* wild card case*/

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO and   ****/
   /* *** then setup the following before i/o sgrp execution: ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* ***   note: sgrp results will be in record              ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = not found - setup not fnd error/msg        ****/
   /* ***   -911 = deadlock - try again msg                   ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES7R ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;
  set SL0EWCP1 empty;

  XSSLS-S3-VSYLOC02(); /* <=== std prod loctn selset*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* MOVE VSYLOC02 TO SL0EWCP1;  /* Fields are not Moving Properly*/
    /* in this move  - some CSP bug. So, Move has been changed by*/
    /* following Move*/
                                   /* move prod/loc to ws compare rec*/
    SL0EWCP1.SL6DATA = VSYLOC02.VSYLOC02-DATA;
    SL0EW01.SL0EWPEX = "Y"; /* product exists*/
    XSSLS-N3-VSYLOC02(); /* fetch next product*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S7RA";
      SLWREC.SLWMSGNO = 176; /* more than 1 sku for no loc*/
      set SL0EM110.SL8TOAR[SLWIDX01] cursor, bold;
      set SL0EM110.SL8TOZN[SLWIDX01] bold;
      set SL0EM110.SL8TOLC[SLWIDX01] bold;
      XSSLS-C3-VSYLOC02(); /* close cursor if mult prod/sku found*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* for second fetch*/
        return; /* only 1 product/sku found for to loc*/
      end
      if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S7RB";
        SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
        return;
      end
      SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
      SLWREC.XXXLOCID = "S7RC";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for selset*/
      SL0EW01.SL0EWPEX = "N"; /* no products exist*/
      SL0EW01.SL0EWEMT = "Y"; /* location is empty*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S7RD";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S7RE";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES7R

// setup 2 days ago date
Function SL0ES7W()

   /* ************************************************************/
   /* *** use ta0190 to obtain a +/- date from the current    ****/
   /* *** date using a 6 day work week                        ****/
   /* ************************************************************/

  set TA9REC empty;

  TA9REC.TA9BEGDT = X2CREC.X2CCURDT;
  TA9REC.TA9OFSET = -2;

  call "TA0190" (TA9REC) {isNoRefresh = yes, isExternal = yes};

  if (TA9REC.TA9RTNFL == 0)
    SL0EWX1.SL0EWDT = TA9REC.TA9RTNDT;
  else
    SLWREC.SLWERRSW = "Y";
     /* error loc setup where this sgrp used*/
    SLWREC.SLWMSGNO = 0001;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES7W

// find next empty location
Function SL0ES7X()

   /* ************************************************************/
   /* *** select the next valid saved location from those     ****/
   /* *** zone/location combinations which have been saved    ****/
   /* *** select that location for update and make sure it    ****/
   /* *** is still empty;  if not empty (spec. exit switch    ****/
   /* *** will still be = n instead of = y), repeat loop      ****/
   /* *** note: saved loc.s index init.d when loc.s saved     ****/
   /* ***       or points to next saved loc. from prev. loop  ****/
   /* *** note: if blank zone or max saved loc.s exceeded     ****/
   /* ***       w/out valid loc., exit immeediately;          ****/
   /* *** note: if last saved loc. is valid, set the loc.s    ****/
   /* ***       saved flag off (=n) but continue here         ****/
   /* *** note: post #2 not used re: sp2 sgrp exists          ****/
   /* ************************************************************/

  SL0EWX1.SL0EWESW = "N";
  while (SL0EWX1.SL0EWSIX <= SL0EWX1.SL0EWMSL
   && SL0EWX1.SL0EWLSF == "Y"
   && SLWREC.SLWERRSW == "N"
   && SL0EWX1.SL0EWESW == "N")
    if (SL0EWS1.SL0EWSZN[SL0EWSIX] == "  ")
      SL0EWX1.SL0EWLSF = "N";
      return;
    end
    SL0EWX1.SL0EWLOC = SL0EWS1.SL0EWSLC[SL0EWSIX];
    if (SL0EWS1.SL0EWSZN[SL0EWSIX] != SL0EWX1.SL0EWCZN
     || SL0EWX1.SL0EWROW != SL0EWX1.SL0EWCRW)
      if (SL0EWX1.SL0EWCZN != "00")
        if (SL0EWX1.SL0EWCTT > SL0EWX1.SL0EWMLR /* cnt tried > max/row*/
         || SL0EWX1.SL0EWCTU == 0)              /* cnt used = 0*/
          SL0ESP3(); /* post #3 - rpt cnt tried/used*/
        end
      end
      SL0EWX1.SL0EWCZN = SL0EWS1.SL0EWSZN[SL0EWSIX];
      SL0EWX1.SL0EWCRW = SL0EWX1.SL0EWROW;
      SL0EWX1.SL0EWCTT = 0; /* cnt of loc.s tried*/
      SL0EWX1.SL0EWCTU = 0; /* cnt of loc.s used*/
    end
    if (SL0EWC1.SL0EWCRC[SL0EWCIX] < SL0EWX1.SL0EWMLR)
      SL0EWX1.SL0EWCTT = SL0EWX1.SL0EWCTT + 1;
      SL5REC.SL4ZONE = SL0EWS1.SL0EWSZN[SL0EWSIX];
      SL5REC.SL5LOCTN = SL0EWS1.SL0EWSLC[SL0EWSIX];
      SL0ESRU(); /* <=== read loc for update*/
    end
    SL0EWX1.SL0EWSIX = SL0EWX1.SL0EWSIX + 1;
  end

  if (SL0EWX1.SL0EWSIX > SL0EWX1.SL0EWMSL)
    SL0EWX1.SL0EWRAN = SL0EWX1.SL0EWRAN + 1;
    SL0ESP4(); /* post #4 - ran out of saved loc.s*/
    SL0EWX1.SL0EWLSF = "N";
    if (SL0EWX1.SL0EWESW == "N")
      return;
    end
  end

   /* ************************************************************/
   /* *** update the to location                              ****/
   /* ************************************************************/
  SL5REC.YLSCD = "04"; /* make in transit*/
  SL5REC.SL5STCDT = X2CREC.X2CCURDT;
  SL5REC.SL5TOWOC = SL5REC.SL5TOWOC + 1;

   /* ************************************************************/
   /* *** setup the appropriate record fields for the IO and  ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES7O ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL5R0(); /* <=== location update*/

  if (SQLCA.VAGen_SQLCODE == 0)
    SL0EWC1.SL0EWCRC[SL0EWCIX] = SL0EWC1.SL0EWCRC[SL0EWCIX] + 1;
    SL0EWX1.SL0EWCTU = SL0EWX1.SL0EWCTU + 1;
    SL0EWX1.SL0EWUSW = "Y";
    if (SL5REC.XWHCD == "51")
      SL0ESDT();
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      SL0ESP5(); /* <=== post concurrent update*/
      return;
    end
    SLWREC.SLWERRSW = "Y";
    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.XXXLOCID = "S7XA";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.XXXLOCID = "S7XB";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES7X

// find empty to loc w/in limit
Function SL0ES8T()

   /* ************************************************************/
   /* *** obtain an empty to location for this product        ****/
   /* *** depending on if the to zone was input and           ****/
   /* *** limiting the number of pallets per row to the max   ****/
   /* *** note: 1 wo = 1 physical pallet for this             ****/
   /* *** note: (re-)setup the saved loc.s, if necessary      ****/
   /* *** note: whse/area setup before this exec.d            ****/
   /* ************************************************************/

  SL0EW02.SL0EWPEX = "N"; /* product exist at empty loc*/
  if (SL0EWX1.SL0EWLSF == "N"
   || SL0EWX1.SL0EWLWH != SL0EM210.XWHCD
   || SL0EWX1.SL0EWLAR != SL0EW02.SL0EWTAC
   || SL0EWX1.SL0EWLZN != SL0EM210.SL8TOZN
   || SL0EWX1.SL0EWLSP != SL0EWX1.SL-LOC-SZ-IND
   || SL0EWX1.SL0EWLMP != SL0EWX1.SL0EWMPF)

    SL0EWX1.SL0EWLWH = SL0EM210.XWHCD;
    SL0EWX1.SL0EWLAR = SL0EW02.SL0EWTAC;
    SL0EWX1.SL0EWLZN = SL0EM210.SL8TOZN;
    SL0EWX1.SL0EWLSP = SL0EWX1.SL-LOC-SZ-IND;
    SL0EWX1.SL0EWLMP = SL0EWX1.SL0EWMPF;

    if (SL0EM210.SL8TOZN == " ")
      SL5REC.SL4ZONE = "*";
      SL0EWX1.SL0EWBFL = "Y"; /* blank zone flag*/
    else
      SL5REC.SL4ZONE = SL0EM210.SL8TOZN;
      SL0EWX1.SL0EWBFL = "N"; /* blank zone flag*/
    end
    SL5REC.YLSCD = "01"; /* move empty status*/
    SL5REC.YLTCD = "*"; /* wild card location type code*/
    SL5REC.YSPCD = "*"; /* wild card storage priority code*/
    SL5REC.SL-LOC-SZ-IND = SL0EWX1.SL-LOC-SZ-IND;
                                   /* pre-setup short pallet flag*/
    SL5REC.SL5MPDFL = SL0EWX1.SL0EWMPF;
                                   /* pre-setup mult product flag*/
    SL5REC.SL5STCDT = SL0EWX1.SL0EWDT;
                                   /* pre-setup status change date*/

    SL0ESBB(); /* <=== save list of valid loc.s*/

    if (SLWREC.SLWERRSW == "Y")
      if (SL0EWX1.SL0EWBFL == "Y")
        SL0EM210.SL8TOZN = " ";
      end
      SL0EM210.SL8TOLC = " ";
      return;
    end
  end

  SL0ES7X(); /* <=== find next empty loc.*/

  if (SLWREC.SLWERRSW == "Y")
    if (SL0EWX1.SL0EWBFL == "Y")
      SL0EM210.SL8TOZN = " ";
    end
    SL0EM210.SL8TOLC = " ";
    return;
  end

  SL0EM210.SL8TOZN = SL5REC.SL4ZONE;
  SL0EM210.SL8TOLC = SL5REC.SL5LOCTN;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES8T

// read tsq (sl0ews2)
Function SL0ES9A()
   /* ***********************************************************/
               /* read tsq (sl0ews2)                        ****/
   /* ***********************************************************/

  TA5REC.TA5APPID = "SL2E";
  SL0EWS2.SL0EWLTH = 456;
  TA5REC.TA5FNCCD = "R"; /* get next tsq record*/
  TA5REC.TA5TSQIX = TA5REC.TA5TSQIX + 1;
  call "TA0050" (SL0EWS2, TA5REC); /* READ TSQ RECORD*/

  if (TA5REC.TA5RTNCD == 0)
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S9AA";
    SLWREC.SLWMSGNO = 109; /* severe tsq error msg*/
  end

  TA5REC.TA5APPID = SLWREC.SLWSUMQU;

   /* ***********************************************************/
   /* *** end of statement group                             ****/
   /* ***********************************************************/
end // end SL0ES9A

// write tsq (sl0ews2)
Function SL0ES9B()
   /* ***********************************************************/
              /* write tsq (sl0ews2)                        ****/
   /* ***********************************************************/

  TA5REC.TA5APPID = "SL2E";
  SL0EWS2.SL0EWLTH = 456;
  TA5REC.TA5FNCCD = "A"; /* write tsq record*/
  call "TA0050" (SL0EWS2, TA5REC) {isNoRefresh = yes}; /* write TSQ RECORD*/

  if (TA5REC.TA5RTNCD == 0)
    SL0EW02.SL0EWNTQ = SL0EW02.SL0EWNTQ + 1;
    set SL0EWS2 empty;
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S9BA";
    SLWREC.SLWMSGNO = 109; /* severe error msg*/
  end

  TA5REC.TA5APPID = SLWREC.SLWSUMQU;

   /* ***********************************************************/
   /* *** end of statement group                             ****/
   /* ***********************************************************/
end // end SL0ES9B

// if wo pertains, add it to tsq
Function SL0ES9C()
   /* ************************************************************/
   /* *** if the work order pertains to the current from      ****/
   /* *** location, product, pallet, and case,                ****/
   /* ***   add it to the tsq record.                         ****/
   /* ************************************************************/

  if (SL0EM210.SL2PALET == "*****")
    SL0ES9D(); /* check case entered, if = wo case, add*/
                                   /* to tsq rec*/
  else
    if (SL0EM210.SL2PALET == "*    ")
      SL0ES9D(); /* check case entered, if = wo case, add*/
                                   /* to tsq rec*/
    else
      if (SL0EM210.SL2PALET == "    *")
        SL0ES9D(); /* check case entered, if = wo case, add*/
                                   /* to tsq rec*/
      else
        SL0ES9E(); /* check if pallet entered = wo pallet*/
      end
    end
  end

  if (SL0EWS2.SL0EWNWO == 50)
    SL0ES9B(); /* write tsq record*/
  end

   /* ************************************************************/
   /* *** end of statement group                              ****/
   /* ************************************************************/
end // end SL0ES9C

// if wo pertains, add it to tsq
Function SL0ES9D()
   /* ************************************************************/
   /* *** if the work order pertains to the current from      ****/
   /* *** location, product, pallet, and case,                ****/
   /* ***   add it to the tsq record.                         ****/
   /* ************************************************************/

  if (SL0EM210.SL2CASE == "********")
    SL0EWS2.SL0EWNWO = SL0EWS2.SL0EWNWO + 1; /* num wo on tsq rec*/
    SLWIDX04 = SL0EWS2.SL0EWNWO;
    SL0EWS2.SL8WONBR[SLWIDX04] = VWOLHD02.SL8WONBR;
  else
    if (SL0EM210.SL2CASE == "*       ")
      SL0EWS2.SL0EWNWO = SL0EWS2.SL0EWNWO + 1; /* num wo on tsq rec*/
      SLWIDX04 = SL0EWS2.SL0EWNWO;
      SL0EWS2.SL8WONBR[SLWIDX04] = VWOLHD02.SL8WONBR;
    else
      if (SL0EM210.SL2CASE == "       *")
        SL0EWS2.SL0EWNWO = SL0EWS2.SL0EWNWO + 1; /* num wo on tsq rec*/
        SLWIDX04 = SL0EWS2.SL0EWNWO;
        SL0EWS2.SL8WONBR[SLWIDX04] = VWOLHD02.SL8WONBR;
      else
        if (SL0EM210.SL2CASE == VWOLHD02.SL2CASE)
          SL0EWS2.SL0EWNWO = SL0EWS2.SL0EWNWO + 1; /* num wo on tsq rec*/
          SLWIDX04 = SL0EWS2.SL0EWNWO;
          SL0EWS2.SL8WONBR[SLWIDX04] = VWOLHD02.SL8WONBR;
        end
      end
    end
  end

   /* ************************************************************/
   /* *** end of statement group                              ****/
   /* ************************************************************/
end // end SL0ES9D

// check if palt entered = wo pal
Function SL0ES9E()
   /* ************************************************************/
   /* *** if the work order pertains to the current from      ****/
   /* *** location, product, pallet, and case,                ****/
   /* ***   add it to the tsq record.                         ****/
   /* ************************************************************/

  if (SL0EM210.SL2CASE == "********")
    SL0EWS2.SL0EWNWO = SL0EWS2.SL0EWNWO + 1; /* num wo on tsq rec*/
    SLWIDX04 = SL0EWS2.SL0EWNWO;
    SL0EWS2.SL8WONBR[SLWIDX04] = VWOLHD02.SL8WONBR;
  else
    if (SL0EM210.SL2CASE == "*       ")
      SL0EWS2.SL0EWNWO = SL0EWS2.SL0EWNWO + 1; /* num wo on tsq rec*/
      SLWIDX04 = SL0EWS2.SL0EWNWO;
      SL0EWS2.SL8WONBR[SLWIDX04] = VWOLHD02.SL8WONBR;
    else
      if (SL0EM210.SL2CASE == "       *")
        SL0EWS2.SL0EWNWO = SL0EWS2.SL0EWNWO + 1; /* num wo on tsq rec*/
        SLWIDX04 = SL0EWS2.SL0EWNWO;
        SL0EWS2.SL8WONBR[SLWIDX04] = VWOLHD02.SL8WONBR;
      else
        if (SL0EM210.SL2CASE == VWOLHD02.SL2CASE
         && SL0EM210.SL2PALET == VWOLHD02.SL2PALET)
          SL0EWS2.SL0EWNWO = SL0EWS2.SL0EWNWO + 1; /* num wo on tsq rec*/
          SLWIDX04 = SL0EWS2.SL0EWNWO;
          SL0EWS2.SL8WONBR[SLWIDX04] = VWOLHD02.SL8WONBR;
        end
      end
    end
  end

   /* ************************************************************/
   /* *** end of statement group                              ****/
   /* ************************************************************/
end // end SL0ES9E

// accumulate acitve wo qtys
Function SL0ES9F()

   /* ************************************************************/
   /* *** accumulate active work order quantities.            ****/
   /* *** these quantities will be subtracted from the        ****/
   /* *** onhand qty to give the qty available for transfer.  ****/
   /* ************************************************************/

  TA5REC.TA5TSQIX = 0;
  SL0ES9A(); /* <=== read the tsq*/
  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SLWIDX06 = 1; /* used for accessing wo num on the tsq*/

  SL0EW02.SL0EWETQ = "N"; /* end of tsq flag*/
  while (SL0EW02.SL0EWETQ == "N"
   && SLWREC.SLWERRSW != "Y")
    SL0ES9H(); /* add wo qty to table*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES9F

// adjust wo qty out of onhand
Function SL0ES9G()

   /* ************************************************************/
   /* *** adjust live work order qty out of onhand qty.       ****/
   /* *** this will give the qty available to transfer.       ****/
   /* ************************************************************/

  SLWIDX04 = 0; /* live wo qty index*/
  while (SLWIDX04 != 40)
    SLWIDX04 = SLWIDX04 + 1;
    if (SL0EW02.SL0EWCWQ[SLWIDX04] > 0)
      SLWIDX05 = 1; /* onhand qty index*/
      while (SLWIDX05 < 41
       && SL0EW02.SY5SZID[SLWIDX05] != 0
       && SL0EW02.SY5SZID[SLWIDX05] != SLWIDX04)
        SLWIDX05 = SLWIDX05 + 1;
      end
      if (SL0EW02.SY5SZID[SLWIDX05] == SLWIDX04)
        SL0EW02.SL0EWWQT = SL0EW02.SL0EWWOQ[SLWIDX05];
        SL0EW02.SL0EWWQT = SL0EW02.SL0EWWQT - SL0EW02.SL0EWCWQ[SLWIDX04];
        SL0EW02.SL0EWPTO = SL0EW02.SL0EWPTO - SL0EW02.SL0EWCWQ[SLWIDX04];
        SL0EW02.SL0EWWOQ[SLWIDX05] = SL0EW02.SL0EWWQT;
        SL0EM210.SL0EWWOQ[SLWIDX05] = SL0EW02.SL0EWWQT;
      end
    end
  end

  if (SL0EW02.SL0EWPTO < 1)
    SLWIDX05 = SL0EWC0.SL0EWNSS;
    if (SLWIDX05 < 40)
      SLWIDX05 = SLWIDX05 + 1;
    end
    while (SLWIDX05 > 0)
      SL0EW02.SY5SZID[SLWIDX05] = 0;
      SL0EW02.SL0EWWOQ[SLWIDX05] = 0;
      SL0EM210.SY4IDDSC[SLWIDX05] = " ";
      SL0EM210.SL0EWWOQ[SLWIDX05] = 0;
      set SL0EM210.SY4IDDSC[SLWIDX05] skip, invisible;
      set SL0EM210.SL0EWWOQ[SLWIDX05] skip, invisible;
      SLWIDX05 = SLWIDX05 - 1;
    end
    set SL0EM210.SL8FRAR cursor;
    SL0EWC0.SL0EWNSS = 0; /* number of sizes*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S9GA";
    SLWREC.SLWMSGNO = 0160; /* no qty available for transfer*/
    return;
  end

   /* ************************************************************/
   /* *** move total to screen                                ****/
   /* ************************************************************/

  SLWIDX05 = 1;
  while (SLWIDX05 < 41
   && SL0EM210.SY4IDDSC[SLWIDX05] != "TOTAL")
    SLWIDX05 = SLWIDX05 + 1;
  end

  if (SL0EM210.SY4IDDSC[SLWIDX05] == "TOTAL")
    SL0EM210.SL0EWWOQ[SLWIDX05] = SL0EW02.SL0EWPTO;
    SL0EW02.SL0EWWOQ[SLWIDX05] = SL0EW02.SL0EWPTO;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES9G

// add wo qty to tbl
Function SL0ES9H()

   /* ************************************************************/
   /* *** add work order qtys to the working storage table    ****/
   /* ************************************************************/

  SL0ES9I(); /* select set live wo itm*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  while (SQLCA.VAGen_SQLCODE == 0
   && SLWREC.SLWERRSW != "Y")
    SLWIDX05 = SL9REC.SY5SZID;
    SL0EW02.SL0EWWQT = SL0EW02.SL0EWCWQ[SLWIDX05];
    SL0EW02.SL0EWWQT = SL0EW02.SL0EWWQT + SL9REC.SL9WOQTY;
    SL0EW02.SL0EWCWQ[SLWIDX05] = SL0EW02.SL0EWWQT; /* accum wo qty*/
    SL0ES9J(); /* fetch next wo itm rec*/
  end

  SL0ES9K(); /* close wo itm cursor*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SLWIDX06 = SLWIDX06 + 1; /* index used to access the wo on the*/
                                   /* tsq*/
  if (SLWIDX06 > SL0EWS2.SL0EWNWO) /* if all wo on tsq rec have been*/
                                   /* procesd*/
    if (TA5REC.TA5TSQIX == SL0EW02.SL0EWNTQ) /* if all tsq rec processed*/
      SL0EW02.SL0EWETQ = "Y"; /* end of tsq flag*/
    else
      SL0ES9A(); /* <=== read the tsq*/
      SLWIDX06 = 1;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES9H

// select set wo itm
Function SL0ES9I()

   /* ************************************************************/
   /* *** select set live work order item                     ****/
   /* ************************************************************/

  set SL9REC empty;
  SL9REC.XWHCD = SL0EM210.XWHCD;
  SL9REC.SL8WONBR = SL0EWS2.SL8WONBR[SLWIDX06];
  XSSL9S1(); /* select scan on wo live itm*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S9IA";
      SLWREC.SLWMSGNO = 0031; /* try again msg*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S9IB";
      SLWREC.SLWMSGNO = 0001; /* severe error msg*/
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES9I

// fetch live wo itm
Function SL0ES9J()

   /* ************************************************************/
   /* *** fetch live work order item                          ****/
   /* ************************************************************/

  XSSL9F1(); /* fetch live wo live itm*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S9JA";
    SLWREC.SLWMSGNO = 0001; /* severe error msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES9J

// close cursor live wo itm
Function SL0ES9K()

   /* ************************************************************/
   /* *** fetch live work order item                          ****/
   /* ************************************************************/

  XSSL9C1(); /* close cursor live wo itm*/

  if (SQLCA.VAGen_SQLCODE != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S9KA";
    SLWREC.SLWMSGNO = 0001; /* severe error msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES9K

// delete zero qty and darken
Function SL0ES9L()
   /* ***********************************************************/
   /* *** delete zero qty records from the screen and the    ****/
   /* *** working storage area.                              ****/
   /* *** set the size description and qty on the screen     ****/
   /* *** to autoskip,dark.                                  ****/
   /* ***********************************************************/

  SLWIDX04 = 1;
  while (SLWIDX04 < 41
   && SL0EW02.SY5SZID[SLWIDX04] != 0)
    if (SL0EW02.SL0EWWOQ[SLWIDX04] == 0)
      move SLWIDX04 to SLWIDX05 withV60Compat;
      while (SLWIDX05 < 40
       && SL0EM210.SY4IDDSC[SLWIDX05] != " ")
        SLWIDX06 = SLWIDX05 + 1;
        SL0EW02.SY5SZID[SLWIDX05] = SL0EW02.SY5SZID[SLWIDX06];
        SL0EW02.SL0EWWOQ[SLWIDX05] = SL0EW02.SL0EWWOQ[SLWIDX06];
        SL0EM210.SY4IDDSC[SLWIDX05] = SL0EM210.SY4IDDSC[SLWIDX06];
        SL0EM210.SL0EWWOQ[SLWIDX05] = SL0EM210.SL0EWWOQ[SLWIDX06];
        SLWIDX05 = SLWIDX05 + 1;
      end
      SL0EWC0.SL0EWNSS = SL0EWC0.SL0EWNSS - 1; /* num of sizes*/
      SL0EW02.SY5SZID[40] = 0;
      SL0EM210.SY4IDDSC[40] = " ";
    else
      SLWIDX04 = SLWIDX04 + 1;
    end
  end

   /* ***********************************************************/
   /* *** darken out rest of screen for sizes                ****/
   /* ***********************************************************/

  SLWIDX04 = 1;
  while (SLWIDX04 <= 40
   && SL0EM210.SY4IDDSC[SLWIDX04] != "TOTAL")
    SLWIDX04 = SLWIDX04 + 1;
  end

  SLWIDX04 = SLWIDX04 + 1;
  while (SLWREC.SLWIDX04 <= 40)
    set SL0EM210.SY4IDDSC[SLWIDX04] skip, invisible;
    set SL0EM210.SL0EWWOQ[SLWIDX04] skip, invisible;
    SLWIDX04 = SLWIDX04 + 1;
  end

   /* ***********************************************************/
   /* *** end of statement group                             ****/
   /* ***********************************************************/
end // end SL0ES9L

// find empty to loc w/in limit
Function SL0ES9M()

   /* ************************************************************/
   /* *** obtain an empty to location for this product        ****/
   /* *** using the input zone and                            ****/
   /* *** limiting the number of pallets per row to the max   ****/
   /* *** note: 1 wo = 1 physical pallet for this             ****/
   /* *** note: (re-)setup the saved loc.s, if necessary      ****/
   /* *** note: whse/area setup before this exec.d            ****/
   /* ************************************************************/

  SL0EW01.SL0EWPEX = "N"; /* product exist at empty loc*/
  if (SL0EWX1.SL0EWLSF == "N"
   || SL0EWX1.SL0EWLWH != SL0EM110.XWHCD
   || SL0EWX1.SL0EWLAR != SL0EW01.SL0EWTAC[SLWIDX01]
   || SL0EWX1.SL0EWLZN != SL0EW01.SL0EWTZC[SLWIDX01]
   || SL0EWX1.SL0EWLSP != SL0EWX1.SL-LOC-SZ-IND
   || SL0EWX1.SL0EWLMP != SL0EWX1.SL0EWMPF)

    SL0EWX1.SL0EWLWH = SL0EM110.XWHCD;
    SL0EWX1.SL0EWLAR = SL0EW01.SL0EWTAC[SLWIDX01];
    SL0EWX1.SL0EWLZN = SL0EW01.SL0EWTZC[SLWIDX01];
    SL0EWX1.SL0EWLSP = SL0EWX1.SL-LOC-SZ-IND;
    SL0EWX1.SL0EWLMP = SL0EWX1.SL0EWMPF;

    SL5REC.SL4ZONE = SL0EW01.SL0EWTZC[SLWIDX01];
    SL5REC.YLSCD = "01"; /* move empty status*/
    SL5REC.YLTCD = "*"; /* wild card location type code*/
    SL5REC.YSPCD = "*"; /* wild card storage priority code*/
    SL5REC.SL-LOC-SZ-IND = SL0EWX1.SL-LOC-SZ-IND;
                                   /* pre-setup short pallet flag*/
    SL5REC.SL5MPDFL = SL0EWX1.SL0EWMPF;
                                   /* pre-setup mult-product flag*/
    SL5REC.SL5STCDT = SL0EWX1.SL0EWDT;
                                   /* pre-setup status change date*/

    SL0ESBB(); /* <=== save list of valid loc.s*/

    if (SLWREC.SLWERRSW == "Y")
      return;
    end
  end

  SL0ES7X(); /* <=== find next empty loc*/

  if (SLWREC.SLWERRSW == "Y")
    SL0EM110.SL8TOLC[SLWIDX01] = " ";
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES9M

// obtain to location product
Function SL0ES9R()
   /* ************************************************************/
   /* *** obtain all products from the product/location table ****/
   /* *** for the to location                                 ****/
   /* ************************************************************/

  VSYLOC02.XWHCD = SL0EM210.XWHCD;
  VSYLOC02.XARCD = SL0EW02.SL0EWTAC;
  VSYLOC02.SL4ZONE = SL0EW02.SL0EWTZC;
  VSYLOC02.SL5LOCTN = SL0EM210.SL8TOLC;

  VSYLOC02.SL2PALET = "*"; /* wild card palet*/
  VSYLOC02.SL2CASE = "*"; /* wild card case*/

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO and   ****/
   /* *** then setup the following before i/o sgrp execution: ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* ***   note: sgrp results will be in record              ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = not found - setup not fnd error/msg        ****/
   /* ***   -911 = deadlock - try again msg                   ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ES9R ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;
  set SL0EWCP1 empty;

  XSSLS-S3-VSYLOC02(); /* <=== std prod loctn selset*/

  if (SQLCA.VAGen_SQLCODE == 0)
                                  /* MOVE VSYLOC02 TO SL0EWCP1;         /**/
                                   /* move prod/loc to ws compare rec*/
   /* The Move has been changed with the following move because of*/
   /* the previous move is not moving fields properly*/
    SL0EWCP1.SL6DATA = VSYLOC02.VSYLOC02-DATA;
    SL0EW02.SL0EWPEX = "Y"; /* product exists*/
    XSSLS-N3-VSYLOC02(); /* fetch next product*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S9RA";
      SLWREC.SLWMSGNO = 176; /* more than 1 sku for no loc*/
      set SL0EM210.SL8TOAR cursor, bold;
      set SL0EM210.SL8TOZN bold;
      set SL0EM210.SL8TOLC bold;
      XSSLS-C3-VSYLOC02(); /* close cursor if mult prod/sku found*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* for second fetch*/
        return; /* only 1 product/sku found for to loc*/
      end
      if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S9RB";
        SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
        return;
      end
      SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
      SLWREC.XXXLOCID = "S9RC";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for selset*/
      SL0EW02.SL0EWPEX = "N"; /* no products exist*/
      SL0EW02.SL0EWEMT = "Y"; /* location is empty*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S9RD";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S9RE";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES9R

// find empty to loc w/in limit
Function SL0ES9T()

   /* ************************************************************/
   /* *** obtain an empty to location for this product        ****/
   /* *** without using any input zone and                    ****/
   /* *** limiting the number of pallets per row to the max   ****/
   /* *** note: 1 wo = 1 physical pallet for this             ****/
   /* *** note: (re-)setup the saved loc.s, if necessary      ****/
   /* *** note: whse/area setup before this exec.d            ****/
   /* ************************************************************/

  SL0EW01.SL0EWPEX = "N"; /* product exists at empty loc*/
  if (SL0EWX1.SL0EWLSF == "N"
   || SL0EWX1.SL0EWLWH != SL0EM110.XWHCD
   || SL0EWX1.SL0EWLAR != SL0EW01.SL0EWTAC[SLWIDX01]
   || SL0EWX1.SL0EWLZN != "  "
   || SL0EWX1.SL0EWLSP != SL0EWX1.SL-LOC-SZ-IND
   || SL0EWX1.SL0EWLMP != SL0EWX1.SL0EWMPF)

    SL0EWX1.SL0EWLWH = SL0EM110.XWHCD;
    SL0EWX1.SL0EWLAR = SL0EW01.SL0EWTAC[SLWIDX01];
    SL0EWX1.SL0EWLZN = " ";
    SL0EWX1.SL0EWLSP = SL0EWX1.SL-LOC-SZ-IND;
    SL0EWX1.SL0EWLMP = SL0EWX1.SL0EWMPF;

    if (SL5REC.XWHCD == "51")
      if (SL0EW01.SL0EWTZC[SLWIDX01] != "  ")
        SL5REC.SL4ZONE = SL0EW01.SL0EWTZC[SLWIDX01];
      else
        SL5REC.SL4ZONE = "*";
      end
    else
      SL5REC.SL4ZONE = "*"; /* wild card zone*/
    end
    SL5REC.YLSCD = "01"; /* move empty status*/
    SL5REC.YLTCD = "*"; /* wild card location type code*/
    SL5REC.YSPCD = "*"; /* wild card storage prioity code*/
    SL5REC.SL-LOC-SZ-IND = SL0EWX1.SL-LOC-SZ-IND;
                                   /* pre-setup short pallet flag*/
    SL5REC.SL5MPDFL = SL0EWX1.SL0EWMPF;
                                   /* pre-setup mult product flag*/
    SL5REC.SL5STCDT = SL0EWX1.SL0EWDT;
                                   /* pre-setup status change date*/

    SL0ESBB(); /* <=== save list of valid loc.s*/

    if (SLWREC.SLWERRSW == "Y")
      SL0EM110.SL8TOLC[SLWIDX01] = " ";
      return;
    end
  end

  SL0ES7X(); /* <=== find next empty loc.*/

  if (SLWREC.SLWERRSW == "Y")
    SL0EM110.SL8TOLC[SLWIDX01] = " ";
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ES9T

// missing input edits
Function SL0ESA0()

   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: setup defaults for optional fields, if any    ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0EM010.XMSLMSNO == " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA0A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0EM010.XMSLMSNO cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ESA0

// key missing input edits
Function SL0ESA1()

   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** check for missing short pallet flag value           ****/
   /* ************************************************************/

  if (SL0EM110.SL-LOC-SZ-IND == " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0EM110.SL-LOC-SZ-IND cursor, bold;
  end

   /* ************************************************************/
   /* *** check for missing multi-product flag value          ****/
   /* ************************************************************/

  if (SL0EM110.SL0EMMPF == " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1B";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0EM110.SL0EMMPF cursor, bold;
  end

   /* ************************************************************/
   /* *** check for missing warehouse code                    ****/
   /* ************************************************************/

  if (SL0EM110.XWHCD == " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1C";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0EM110.XWHCD cursor, bold;
  end

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check for no data entered                           ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;
  SLWREC.SLWCTR01 = 0;

  while (SLWREC.SLWIDX01 <= 8
   && SLWREC.SLWCTR01 == 0)
    if (SL0EM110.SL8FRAR[SLWIDX01] != " ")
      SLWREC.SLWCTR01 = 1;
    else
      if (SL0EM110.SL8FRZN[SLWIDX01] != " ")
        SLWREC.SLWCTR01 = 1;
      else
        if (SL0EM110.SL8FRLC[SLWIDX01] != " ")
          SLWREC.SLWCTR01 = 1;
        else
          if (SL0EM110.SL8TOAR[SLWIDX01] != " ")
            SLWREC.SLWCTR01 = 1;
          else
            if (SL0EM110.SL8TOZN[SLWIDX01] != " ")
              SLWREC.SLWCTR01 = 1;
            else
              if (SL0EM110.SL8TOLC[SLWIDX01] != "      ")
                SLWREC.SLWCTR01 = 1;
              else
                if (SL0EM110.SL2PALET[SLWIDX01] != " ")
                  SLWREC.SLWCTR01 = 1;
                else
                  if (SL0EM110.SL2CASE[SLWIDX01] != " ")
                    SLWREC.SLWCTR01 = 1;
                  else
                    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
                  end
                end
              end
            end
          end
        end
      end
    end
  end

  if (SLWREC.SLWCTR01 == 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1D";
    SLWREC.SLWMSGNO = 0005; /* <--- no data entered message*/
    set SL0EM110.SL8FRAR cursor, bold;
  end

  SLWREC.SLWIDX01 = 0;
  SLWREC.SLWCTR01 = 0;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ESA1

// key missing input edits
Function SL0ESA2()

   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0EM210.SL8FRZN == " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0EM210.SL8FRZN cursor, bold;
  end

  if (SL0EM210.SL8FRAR == " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2B";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0EM210.SL8FRAR cursor, bold;
  end

  if (SL0EM210.SL-LOC-SZ-IND == " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2C";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0EM210.SL-LOC-SZ-IND cursor, bold;
  end

  if (SL0EM210.XWHCD == " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2D";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0EM210.XWHCD cursor, bold;
  end

  if (SL0EM210.SL0EMMPF == " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2E";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0EM210.SL0EMMPF cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ESA2

// key missing input edits
Function SL0ESA3()

   /* ************************************************************/
   /* *** check for missing fields in reverse order           ****/
   /* ***   check if the work order grp number and work order ****/
   /* ***         fields are all blank; set sl0ewfl1 = 'Y'    ****/
   /* ***         if a work order group number is entered     ****/
   /* ***   check if the function code is not entered (reqrd) ****/
   /* ***   check if no warehouse code is entered             ****/
   /* ************************************************************/

  SL0EW03.SL0EWFL1 = "N"; /* work order nbr entered flag*/
  SLWREC.SLWIDX01 = 1; /* index for 10 wo nbrs*/

  while (SLWREC.SLWIDX01 <= 10) /* check if no wo nbrs*/
    if (SL0EM310.SL8WONBR[SLWIDX01] > 0)
      SL0EW03.SL0EWFL1 = "Y";
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

  if (SL0EM310.SL8WOGRP == 0 /* check if wo grp nbr not entered and*/
   && SL0EW03.SL0EWFL1 == "N") /* no work order nbr entered*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0EM310.SL8WOGRP cursor, bold;
  end

  if (SL0EM310.XMSLMFNC == " ") /* function code was not entered*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3B";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0EM310.XMSLMFNC cursor, bold;
  end

  if (SL0EM310.XWHCD == " ") /* warehouse code was not entered*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3C";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0EM310.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ESA3

// same key edits
Function SL0ESB2()
   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw.           ****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (SL0EM210.XWHCD != SL0EW02.XWHCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0EM210.SL-LOC-SZ-IND != SL0EW02.SL-LOC-SZ-IND)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0EM210.SL0EM-STASDFL != SL0EW02.SL0EW-STASDFL)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0EM210.INASAID != SL0EW02.INASAID)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0EM210.SL0EMMPF != SL0EW02.SL0EWMPF) /* multi-prod flag*/
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0EM210.SL8FRAR != SL0EW02.SL8FRAR)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0EM210.SL8FRZN != SL0EW02.SL8FRZN)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0EM210.SL8FRLC != SL0EW02.SL8FRLC)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0EM210.SL8TOAR != SL0EW02.SL8TOAR)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0EM210.SL8TOZN != SL0EW02.SL8TOZN)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0EM210.SL8TOLC != SL0EW02.SL8TOLC)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0EM210.SL2PALET != SL0EW02.SL2PALET)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0EM210.SL2CASE != SL0EW02.SL2CASE)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0EM210.XGPCD != SL0EW02.XGPCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0EM210.SY1STNBR != SL0EW02.SY1STNBR)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0EM210.SY2CLRID != SL0EW02.SY2CLRID)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0EM210.XDMCD != SL0EW02.XDMCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0EM210.XQACD != SL0EW02.XQACD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0EM210.XSDCD != SL0EW02.XSDCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0EM210.XSLCD != SL0EW02.XSLCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0EM210.XPGCD != SL0EW02.XPGCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0EM210.XUMCD != SL0EW02.XUMCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0EM210.XOWCD != SL0EW02.XOWCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0EM210.SL0EMSLC != SL0EW02.SL0EMSLC)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0EM210.SL0EMCAS != SL0EW02.SL0EMCAS)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0ESB2

// black box save loc.s
Function SL0ESBB()
   /* ************************************************************/
   /* *** select all empty locations for the previously setup ****/
   /* *** sl5rec flds                                         ****/
   /* *** note: setup no more loc.s msg if +100               ****/
   /* *** note: perform this select set & processing until the****/
   /* ***       loc.s saved flag is set on in order to be able****/
   /* ***       to re-initialize the counts if all rows where ****/
   /* ***       there are empty locations have 6 assigments   ****/
   /* *** note: if lsf = y;  whse/area/zone changed           ****/
   /* ************************************************************/

   /* Get number of pallets to use per aisle*/
  if (SL5REC.XWHCD == "51")
    if (SL0EW01.SL0EWPFL != "Y")
      XZZREC.XZZQRYRN = 51;
      XZZREC.XZZQRYID = "SL421D  ";
      XZZREC.XZZQRYLN = 0;
      XSXZZI0(); /* Gets the number of pallets from*/
                                   /* VPARM101*/
      if (SQLCA.VAGen_SQLCODE == 0)
        SL0EWX1.SL0EWMLR = XZZREC.XZZINT1;
        SL0EW01.SL0EWPFL = "Y";
      else
        if (SQLCA.VAGen_SQLCODE == +100)
          SL0EWX1.SL0EWMLR = 6;
          SL0EW01.SL0EWPFL = "Y";
        else
          if (SQLCA.VAGen_SQLCODE == -911)
            SLWREC.XXXLOCID = "SBBE";
            SLWREC.SLWMSGNO = 0031;
            SLWREC.SLWERRSW = "Y";
            return;
          else
            SLWREC.XXXLOCID = "SBBF";
            SLWREC.SLWMSGNO = 0001;
            SLWREC.SLWERRSW = "Y";
            return;
          end
        end
      end
    end
  end

  if (SL0EWX1.SL0EWLSF == "Y")
    SL0EWX1.SL0EWRIN = 0;
    SL0EWX1.SL0EWRAN = 0;
    SL0EWX1.SL0EWLSF = "N";
  end

  TA1REC.TA1LOCAT[2] = "SL0ESBB ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  while (SL0EWX1.SL0EWLSF == "N"
   && SLWREC.SLWERRSW == "N")

    if (SL5REC.XWHCD == "51")
      if (SL5REC.SL4ZONE == "*")

      else
        SL0ESLC(); /* Search for last used location*/
        if (SLWREC.SLWERRSW == "Y")
          return;
        end
        SL0EW01.SL0EWSLOC = SL5REC.SL5LOCTN;
      end
      XSSL5S4(); /* <=== select set 4*/
    else
      XSSL5S3(); /* <=== select set 3*/
    end

    SL0EW01.SL0EWTFLG = "Y";

    while (SL0EW01.SL0EWTFLG == "Y")
      if (SQLCA.VAGen_SQLCODE == 0)
        set SL0EWS1 empty;
        SL0EWX1.SL0EWCZN = "00";
        SL0EWX1.SL0EWCRW = "00";
        SL0EWX1.SL0EWSIX = 1;
        while (SQLCA.VAGen_SQLCODE == 0
         && SL0EWX1.SL0EWSIX <= SL0EWX1.SL0EWMSL
         && SLWREC.SLWERRSW == "N")
          SL0ESPN(); /* <=== process next empty loc.*/
          if (SL5REC.XWHCD == "51")
            XSSL5F4(); /* <=== fetch next empty loc*/
          else
            XSSL5F3(); /* <=== fetch next empty loc.*/
          end
        end
        if (SQLCA.VAGen_SQLCODE == +100)
           /* ** next sentence ***/
        else
          if (SQLCA.VAGen_SQLCODE == 0)
            if (SL5REC.XWHCD == "51")
              XSSL5C4(); /* <=== close select*/
            else
              XSSL5C3(); /* <=== close select*/
            end
          else
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SBBA";
            SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
            return;
          end
        end
        if (SL0EWX1.SL0EWSIX > 1)
          SL0EWX1.SL0EWLSF = "Y";
          SL0EWX1.SL0EWSIX = 1;
          SL0EWX1.SL0EWCIX = "0000";
          return;
        end
        set SL0EWC1 empty;
        SL0EWX1.SL0EWRIN = SL0EWX1.SL0EWRIN + 1;
        SL0ESP1(); /* <=== post #1 - re-init. cnts*/
        SL0EW01.SL0EWTFLG = "N";
      else
        if (SQLCA.VAGen_SQLCODE == +100)
          if (SL5REC.XWHCD == "51" && 
          SL0EW01.SL0EWTZC[SLWIDX01] != "  ")
            if (SL0EW01.SL0EWSLOC != "000000")
              SL0EW01.SL0EWSLOC = "000000";
              SL5REC.SL5LOCTN = "000000";
              SQLCA.VAGen_SQLCODE = 0;
              XSSL5S4(); /* <== select from 1st location*/
            else
              SLWREC.SLWERRSW = "Y";
              SLWREC.XXXLOCID = "SBBB";
              SLWREC.SLWMSGNO = 0046; /* <--- no more loc.s msg*/
              return;
            end
          else
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SBBB";
            SLWREC.SLWMSGNO = 0046; /* <--- no more loc.s msg*/
            return;
          end
        else
          if (SQLCA.VAGen_SQLCODE == -911)
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SBBC";
            SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
            return;
          end
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SBBD";
          SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
          return;
        end
      end

    end

  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ESBB

// key field edits
Function SL0ESC1()

   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** short pallet flag must be: s/n/t/p/q/* default from loc*/
   /* ************************************************************/

  if (SL0EM110.SL-LOC-SZ-IND == "S"
   || SL0EM110.SL-LOC-SZ-IND == "N"
   || SL0EM110.SL-LOC-SZ-IND == "T"
   || SL0EM110.SL-LOC-SZ-IND == "P"
   || SL0EM110.SL-LOC-SZ-IND == "Q"
   || SL0EM110.SL-LOC-SZ-IND == "*")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1A";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0EM110.SL-LOC-SZ-IND cursor, bold;
  end

   /* ************************************************************/
   /* *** mult product flag must be: y/n/*(default to from loc)***/
   /* ************************************************************/

  if (SL0EM110.SL0EMMPF == "Y"
   || SL0EM110.SL0EMMPF == "N"
   || SL0EM110.SL0EMMPF == "*")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1B";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0EM110.SL0EMMPF cursor, bold;
  end

   /* ************************************************************/
   /* *** if warehouse code not found or not active then error ***/
   /* ************************************************************/

  if (SL0EM110.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0EM110.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      SL0EM110.XWHABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1C";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0EM110.XWHCD cursor, bold;
    end
  else
    SL0EM110.XWHABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1D";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0EM110.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ESC1

// key field edits
Function SL0ESC2()
   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setaside flag and id edits*/
   /* ************************************************************/
  if (SL0EM210.SL0EM-STASDFL <= " "
   || SL0EM210.SL0EM-STASDFL == "N"
   || SL0EM210.SL0EM-STASDFL == "Y")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2X";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value*/
    set SL0EM210.SL0EM-STASDFL cursor, bold;
  end

  if ((SL0EM210.SL0EM-STASDFL == "Y"
   && SL0EM210.INASAID <= 0)
   || (SL0EM210.INASAID > 0
   && SL0EM210.SL0EM-STASDFL != "Y"))
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2X";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value*/
    set SL0EM210.SL0EM-STASDFL cursor, bold;
  end

   /* ************************************************************/
   /* *** short pallet flag must be: s/n/t/p/q/*(default for from*/
   /* ************************************************************/
  if (SL0EM210.SL-LOC-SZ-IND == "S"
   || SL0EM210.SL-LOC-SZ-IND == "N"
   || SL0EM210.SL-LOC-SZ-IND == "T"
   || SL0EM210.SL-LOC-SZ-IND == "P"
   || SL0EM210.SL-LOC-SZ-IND == "Q"
   || SL0EM210.SL-LOC-SZ-IND == "*")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2A";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value*/
    set SL0EM210.SL-LOC-SZ-IND cursor, bold;
  end

   /* ************************************************************/
   /* *** mult product flag must be: y/n/*(default to from value)*/
   /* ************************************************************/
  if (SL0EM210.SL0EMMPF == "Y"
   || SL0EM210.SL0EMMPF == "N"
   || SL0EM210.SL0EMMPF == "*")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2B";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value*/
    set SL0EM210.SL0EMMPF cursor, bold;
  end

   /* ************************************************************/
   /* *** itemized flag must be:  'y' or 'n'                  ****/
   /* ************************************************************/
  if (SL0EM210.SL8ITMFL == "Y"
   || SL0EM210.SL8ITMFL == "N")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2C";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value*/
    set SL0EM210.SL8ITMFL cursor, bold;
  end

  if (SL0EM210.SY1UNPCS > 0  
   && SL0EM210.XWHCD != "02" /* not Greenland*/
   && SL0EM210.XWHCD != "04" /* not Memphis Footwear*/
   && SL0EM210.XWHCD != "07" /* not Wilsonville*/
   && SL0EM210.XWHCD != "25" /* not NSG*/
   && SL0EM210.XWHCD != "51" /* not Memphis Apparel*/
   && SL0EM210.XWHCD != "42") /* not Canada*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2D";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0EM210.SY1UNPCS cursor, bold;
  end

  if (SL0EM210.XUMCD in XUMTBL.XUMCD)
    if (XUMTBL.XXXSTAT[sysVar.arrayIndex] != "A")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2E";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0EM210.XUMCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2E";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0EM210.XUMCD cursor, bold;
  end

  if (SL0EM210.XPGCD in XPGTBL.XPGCD)
    if (XPGTBL.XXXSTAT[sysVar.arrayIndex] != "A")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2F";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0EM210.XPGCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2G";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0EM210.XPGCD cursor, bold;
  end

  if (SL0EM210.XSLCD in XSLTBL.XSLCD)
    if (XSLTBL.XXXSTAT[sysVar.arrayIndex] != "A")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2H";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0EM210.XSLCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2I";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0EM210.XSLCD cursor, bold;
  end

  set PC2REC empty; /* clear row storage area*/

  PC2REC.XGPCD = SL0EM210.XGPCD;
  PC2REC.PC2INSEG = SL0EM210.XSDCD;
  call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == +0)
    if (PC2REC.XXXSTAT != "A")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2J";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0EM210.XSDCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2K";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0EM210.XSDCD cursor, bold;
  end

  if (SL0EM210.XQACD in XQATBL.XQACD)
    if (XQATBL.XXXSTAT[sysVar.arrayIndex] != "A")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2L";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0EM210.XQACD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2M";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0EM210.XQACD cursor, bold;
  end

  if (SL0EM210.XDMCD in XDMTBL.XDMCD)
    if (XDMTBL.XXXSTAT[sysVar.arrayIndex] != "A")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2N";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0EM210.XDMCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2O";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0EM210.XDMCD cursor, bold;
  end

  if (SL0EM210.XGPCD in XGPTBL.XGPCD)
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] != "A")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2P";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0EM210.XGPCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2Q";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0EM210.XGPCD cursor, bold;
  end

  if (SL0EM210.SL0EMSLC > " ")
    if (SL0EM210.SL0EMSLC in XSLTBL.XSLCD)
      if (XSLTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC2R";
        SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
        set SL0EM210.SL0EMSLC cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2S";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0EM210.SL0EMSLC cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (SL0EM210.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0EM210.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      SLWREC.XCTCD = XWHTBL.XCTCD[sysVar.arrayIndex]; /* CANA save country cd*/
      if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] == "Y")
        SL0EWT2.SL0EWWHC = SL0EM210.XWHCD;
        SL0EWT2.SL0EWOWC = SL0EM210.XOWCD;
        if (SL0EWT2.SL0EWONK in XOWTBL.XOWKEY)
          if (XOWTBL.XXXSTAT[sysVar.arrayIndex] != "A")
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SC2T";
            SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
            set SL0EM210.XOWCD cursor, bold;
          end
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SC2U";
          SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
          set SL0EM210.XOWCD cursor, bold;
        end
      end
    else
      SL0EM210.XWHABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2V";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0EM210.XWHCD cursor, bold;
    end
  else
    SL0EM210.XWHABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2W";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0EM210.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0ESC2

// key field edits
Function SL0ESC3()

   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if map function code not entered then error.        ****/
   /* ************************************************************/

  if (SL0EM310.XMSLMFNC == "1"
   || SL0EM310.XMSLMFNC == "2")
    /* ** NEXT SENTENCE ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC3A";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value*/
    set SL0EM310.XMSLMFNC cursor, bold;
  end

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (SL0EM310.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0EM310.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      SL0EM310.XWHABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC3B";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0EM310.XWHCD cursor, bold;
    end
  else
    SL0EM310.XWHABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC3C";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0EM310.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ESC3

// inquiry:(style)color view 2:0
Function SL0ESCI()

   /* ************************************************************/
   /* *** select unique row/view: dpick.vpksty01              ****/
   /* *** using the std module:  IO1810                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -811 = duplicates found                           ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***     <0 = db/severe error (&-911)                    ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* ************************************************************/

  call "IO1810" ("S ", SQLCA, PKNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -811)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "SL0ESCI ";
  TA1REC.TA1LOCAT[1] = "IO1810  ";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DPICK   ";
  TA1REC.TA1TBLVU = "VPKSTY01";
  TA1REC.TA1TBLKE = PKNREC.PKNKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ESCI

// key relational edits
Function SL0ESD1()

   /* ************************************************************/
   /* *** do relational edits in order of top to bottom       ****/
   /* * note: ezertn when all fields are blank or field in error**/
   /* ************************************************************/

  if (SL0EM110.SL8FRAR[SLWIDX01] != " "
   && SL0EM110.SL8FRZN[SLWIDX01] != " "
   && SL0EM110.SL8FRLC[SLWIDX01] != " "
   && SL0EM110.SL8TOAR[SLWIDX01] != " "
   && SL0EM110.SL8TOZN[SLWIDX01] != " "
   && SL0EM110.SL8TOLC[SLWIDX01] != " ")
    SL0ES13(); /* check if "from" and "to" setaside =*/
    return;
  end

  if (SL0EM110.SL8FRAR[SLWIDX01] == " "
   && SL0EM110.SL8FRZN[SLWIDX01] == " "
   && SL0EM110.SL8FRLC[SLWIDX01] == " "
   && SL0EM110.SL2PALET[SLWIDX01] == " "
   && SL0EM110.SL2CASE[SLWIDX01] == " "
   && SL0EM110.SL8TOAR[SLWIDX01] == " "
   && SL0EM110.SL8TOZN[SLWIDX01] == " "
   && SL0EM110.SL8TOLC[SLWIDX01] == "      ")
    SL0EW01.SL0EWFL1 = "Y";
    return;
  end

  if (SL0EM110.SL8FRAR[SLWIDX01] == " "
   && SL0EM110.SL8FRZN[SLWIDX01] == " ")
    if (SL0EM110.SL8FRLC[SLWIDX01] != " ")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD1A";
      SLWREC.SLWMSGNO = 0009; /* <- rqrd fld message*/
      set SL0EM110.SL8FRAR[SLWIDX01] cursor, bold;
      set SL0EM110.SL8FRZN[SLWIDX01] bold;
      return;
    end
  end

  if (SL0EM110.SL8FRAR[SLWIDX01] == " "
   && SL0EM110.SL8FRZN[SLWIDX01] == " ")
    if (SL0EM110.SL8TOAR[SLWIDX01] != " "
     || SL0EM110.SL8TOZN[SLWIDX01] != " "
     || SL0EM110.SL8TOLC[SLWIDX01] != "      ")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD1B";
      SLWREC.SLWMSGNO = 0009; /* <- rqrd fld message*/
      set SL0EM110.SL8FRAR[SLWIDX01] cursor, bold;
      set SL0EM110.SL8FRZN[SLWIDX01] bold;
      return;
    end
  end

  if (SL0EM110.SL8FRAR[SLWIDX01] == " "
   && SL0EM110.SL8FRZN[SLWIDX01] == " ")
    if (SL0EM110.SL2PALET[SLWIDX01] != " "
     || SL0EM110.SL2CASE[SLWIDX01] != " ")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD1C";
      SLWREC.SLWMSGNO = 0009; /* <- rqrd fld message*/
      set SL0EM110.SL8FRAR[SLWIDX01] cursor, bold;
      set SL0EM110.SL8FRZN[SLWIDX01] bold;
      return;
    end
  end

  if (SL0EM110.SL8FRAR[SLWIDX01] != " "
   && SL0EM110.SL8FRZN[SLWIDX01] == " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD1D";
    SLWREC.SLWMSGNO = 0009; /* <- rqrd fld message*/
    set SL0EM110.SL8FRZN[SLWIDX01] cursor, bold;
    return;
  end

  if (SL0EM110.SL8FRZN[SLWIDX01] != " "
   && SL0EM110.SL8FRAR[SLWIDX01] == " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD1E";
    SLWREC.SLWMSGNO = 0009; /* <- rqrd fld message*/
    set SL0EM110.SL8FRAR[SLWIDX01] cursor, bold;
    return;
  end
   /* tt#6344- Lpattn changes starts*/
  if (SL0EM110.XWHCD == "07" || 
  SL0EM110.XWHCD == "04")
    if (SL0EM110.SL8FRAR[SLWIDX01] != " "
     && SL0EM110.SL8FRZN[SLWIDX01] != " ")
      if (SL0EM110.SL8TOAR[SLWIDX01] == " ")
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SD1A";
        SLWREC.SLWMSGNO = 0009; /* <- rqrd fld message*/
        set SL0EM110.SL8TOAR[SLWIDX01] cursor, bold;
        return;
      else
        if (SL0EM110.SL8TOZN[SLWIDX01] == " ")
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SD1A";
          SLWREC.SLWMSGNO = 0009; /* <- rqrd fld message*/
          set SL0EM110.SL8TOZN[SLWIDX01] cursor, bold;
          return;
        end
      end
    end
  end
   /* TT#-6344-lpattn changes ends*/
   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ESD1

// key relational edits
Function SL0ESD2()

                   /* SL0ESD2   RELATIONAL EDITS*/
   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if style not blank:                                 ****/
   /* *** use the combined style color product view to obtain ****/
   /* *** the short style name and short color abbrv.; and    ****/
   /* *** if blank, the default unit of measure               ****/
   /* ************************************************************/

  if (SL0EM210.SY1STNBR > " ")
    PKNREC.XGPCD = SL0EM210.XGPCD;
    PKNREC.SY1STNBR = SL0EM210.SY1STNBR;
    PKNREC.SY2CLRID = SL0EM210.SY2CLRID;
    PKNREC.XDMCD = SL0EM210.XDMCD;

    SL0ESVJ(); /* <=== validate style/color combo*/

    if (SLWREC.SLWVERSW == "Y")
      SLWREC.SLWERRSW = "Y";
      set SL0EM210.XGPCD bold;
      set SL0EM210.SY1STNBR cursor, bold;
      set SL0EM210.SY2CLRID bold;
      set SL0EM210.XDMCD bold;
      return;
    end

    SL0EM210.SY1SSTNM = PKNREC.SY1SSTNM;
    SL0EM210.SY2CLRAB = PKNREC.SY2CLRAB;

    if (SL0EM210.XUMCD > " ")
       /* ** next sentence ***/
    else
      SL0EM210.XUMCD = "01";
    end
  end

   /* ************************************************************/
   /* *** obtain the from area/zone type and the to area/zone ****/
   /* *** type from the tables. if no errors are encountered  ****/
   /* *** then perform the relational edits.                  ****/
   /* ************************************************************/

   /* *************************************************************/
   /* ***  move to/from area/zone data to the process working  ****/
   /* ***  storage record SL0EW02.                             ****/
   /* ***                                                      ****/
   /* *************************************************************/
   /* TT#-6344-Lpattn changes Starts*/
  if (SL0EM210.XWHCD == "07"
   || SL0EM210.XWHCD == "04")
    if (SL0EM210.SL8FRAR != " "
     && SL0EM210.SL8FRZN != " ")
      if (SL0EM210.SL8TOAR == " ")
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SD2A";
        SLWREC.SLWMSGNO = 0009; /* <- rqrd fld message*/
        set SL0EM210.SL8TOAR cursor, bold;
        return;
      else
        if (SL0EM210.SL8TOZN == " ")
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SD2A";
          SLWREC.SLWMSGNO = 0009; /* <- rqrd fld message*/
          set SL0EM210.SL8TOZN cursor, bold;
          return;
        end
      end
    end
  end
   /* TT#-6344-Lpattn changes Ends*/

  SL0EW02.SL0EWFAC = SL0EM210.SL8FRAR;
  SL0EW02.SL0EWFZC = SL0EM210.SL8FRZN;
  SL0EW02.SL0EWTAC = SL0EM210.SL8TOAR;
  SL0EW02.SL0EWTZC = SL0EM210.SL8TOZN;

   /* *************************************************************/
   /* *** obtain from area type and from zone processing type  ****/
   /* *************************************************************/

  SL0ES2A(); /* determine From Area Type and save in*/
                                   /* w02.fat*/
  if (SLWREC.SLWERRSW == "Y")
    return;
  end
  if (SL0EW02.SL0EWFAT == "PR") /* processing*/
    SL4REC.XWHCD = SL0EM210.XWHCD;
    SL4REC.XARCD = SL0EW02.SL0EWFAC;
    SL4REC.SL4ZONE = SL0EW02.SL0EWFZC;
               /* GET FROM ZONE TYPE*/
     /* ************************************************************/
     /* *** setup the following before i/o sgrp execution:      ****/
     /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
     /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
     /* *** execute the appropriate sgrp                        ****/
     /* ***   note: sgrp names correspond to 'xq' process names ****/
     /* *** setup the action for the following return codes:    ****/
     /* ***      0 = found - continue                           ****/
     /* ***   +100 = not found - return w/ not fnd msg          ****/
     /* ***   -911 = deadlock - return w/ try again msg         ****/
     /* ***     <0 = db/severe error - contact programming msg  ****/
     /* ***          note: clear screen & put keys back         ****/
     /* ***          note: TA0020 will have been executed       ****/
     /* ***                within this sgrp for <0 only         ****/
     /* ************************************************************/

     /* ************************************************************/
     /* *** setup application specific ta1rec fields in case    ****/
     /* *** TA0020 is used for a severe DB error in this sgrp   ****/
     /* ************************************************************/

    TA1REC.TA1LOCAT[2] = "SL0ESD2 ";
    TA1REC.TA1MAP = SLWREC.SLWTAMAP;

    XSSL4I0(); /* <=== get from zone type*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SL0ES2B(); /* determine and save From Zone Process*/
                                   /* Type*/
      if (SLWREC.SLWERRSW == "Y")
        return;
      end
    else
      if (SQLCA.VAGen_SQLCODE == +100)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SD2A";
        SLWREC.SLWMSGNO = 0011; /* <--- invalid value*/
        set SL0EM210.SL8FRZN cursor, bold;
        return;
      end
      if (SQLCA.VAGen_SQLCODE == -911)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SD2B";
        SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
        return;
      end
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD2C";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
  end

   /* *************************************************************/
   /* *** obtain  to  area type and  to  zone processing type  ****/
   /* *************************************************************/

  if (SL0EW02.SL0EWTAC != " ")
    SL0ES2C(); /* determine and move To Area Type*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
    if (SL0EW02.SL0EWTAT == "PR") /* processing*/
      if (SL0EW02.SL0EWTZC != " ")
        SL4REC.XWHCD = SL0EM210.XWHCD;
        SL4REC.XARCD = SL0EW02.SL0EWTAC;
        SL4REC.SL4ZONE = SL0EW02.SL0EWTZC;
                      /* GET TO ZONE TYPE*/
         /* ************************************************************/
         /* *** setup the following before i/o sgrp execution:      ****/
         /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
         /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
         /* *** execute the appropriate sgrp                        ****/
         /* ***   note: sgrp names correspond to 'xq' process names ****/
         /* *** setup the action for the following return codes:    ****/
         /* ***      0 = found - continue                           ****/
         /* ***   +100 = not found - return w/ not fnd msg          ****/
         /* ***   -911 = deadlock - return w/ try again msg         ****/
         /* ***     <0 = db/severe error - contact programming msg  ****/
         /* ***          note: clear screen & put keys back         ****/
         /* ***          note: TA0020 will have been executed       ****/
         /* ***                within this sgrp for <0 only         ****/
         /* ************************************************************/

         /* ************************************************************/
         /* *** setup application specific ta1rec fields in case    ****/
         /* *** TA0020 is used for a severe DB error in this sgrp   ****/
         /* ************************************************************/

        TA1REC.TA1LOCAT[2] = "SL0ESD2 ";
        TA1REC.TA1MAP = SLWREC.SLWTAMAP;

        XSSL4I0(); /* <=== get to zone type*/

        if (SQLCA.VAGen_SQLCODE == 0)
          SL0ES2D(); /* determine and move To Zone Process*/
                                   /* Type*/
          if (SLWREC.SLWERRSW == "Y")
            return;
          end
        else
          if (SQLCA.VAGen_SQLCODE == +100)
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SD2D";
            SLWREC.SLWMSGNO = 0011; /* <--- invalid value*/
            set SL0EM210.SL8TOZN cursor, bold;
            return;
          end
          if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SD2E";
            SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
            return;
          end
          SLWREC.SLWERRSW = "Y";
                                   /* <= for all other neg. sql codes*/
          SLWREC.XXXLOCID = "SD2F";
          SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
          return;
        end
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SD2G";
        SLWREC.SLWMSGNO = 09; /* <-reqrd field*/
        set SL0EM210.SL8TOZN cursor, bold;
        return;
      end
    else
      if (SL0EW02.SL0EWTAT != "BU") /* bulk*/
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SD2H";
        SLWREC.SLWMSGNO = 11; /* <-invalid value*/
        set SL0EM210.SL8TOAR cursor, bold;
        return;
      end
    end
  else
    /* *************************************************************/
    /* *** to area code not entered, find it in the             ****/
    /* *** warehouse/area table using warehouse code and bulk   ****/
    /* *** type equal yes                                       ****/
    /* *************************************************************/
    SLWREC.SLWIDX01 = 1;
    SL0EW02.SL0EWFL1 = "N"; /* hit in table flag*/
    while (SL0EW02.SL0EWFL1 == "N")
      if (XARTBL.XWHCD[SLWIDX01] == SL0EM210.XWHCD
       && XARTBL.XARBLKFL[SLWIDX01] == "Y")
        SL0EW02.SL0EWTAC = XARTBL.XARCD[SLWIDX01];
        SL0EW02.SL0EWTAT = "BU";
        SL0EW02.SL0EWFL1 = "Y";
      else
        if (XARTBL.XARCD[SLWIDX01] == "99")
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SD2I";
          SLWREC.SLWMSGNO = 01; /* <-call programming*/
          return;
        else
          SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
        end
      end
    end
  end

   /* *************************************************************/
   /* *** edit FROM area, zone, location field type relations  ****/
   /* ***                                                      ****/
   /* *************************************************************/

  if (SL0EW02.SL0EWFAT == "RE"
   && SL0EM210.SL8FRLC == " ")
    SL0EM210.SL8FRLC = "000000";
  end

  if (SL0EW02.SL0EWFAT == "PR"
   && SL0EW02.SL0EWFZP == "FU"
   && SL0EM210.SL8FRLC == " ")
    SL0EM210.SL8FRLC = "000000";
  end

  if (SL0EW02.SL0EWFAT == "BU"
   && SL0EM210.SL8FRLC == " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD2J";
    SLWREC.SLWMSGNO = 09; /* <-reqrd field*/
    set SL0EM210.SL8FRLC cursor, bold;
    return;
  end

  if (SL0EW02.SL0EWFAT == "PR"
   && SL0EW02.SL0EWFZP == "PI"
   && SL0EM210.SL8FRLC == " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD2K";
    SLWREC.SLWMSGNO = 09; /* <-reqrd field*/
    set SL0EM210.SL8FRLC cursor, bold;
    return;
  end

  if (SL0EW02.SL0EWFAT == "RE")
    if (SL0EM210.SL2PALET == " "
     || SL0EM210.SL2PALET == "*"
     || SL0EM210.SL2PALET == "*****"
     || SL0EM210.SL2PALET == "    *")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD2L";
      SLWREC.SLWMSGNO = 09; /* <-reqrd field*/
      set SL0EM210.SL2PALET cursor, bold;
      return;
    end
  end

   /* *************************************************************/
   /* *** edit NEW CASE number field relations                 ****/
   /* ***                                                      ****/
   /* *************************************************************/

  SLWREC.SLWIDX01 = 1;
  SL0EW02.SL0EWFL1 = "N"; /* hit in table flag*/
  while (SL0EW02.SL0EWFL1 == "N")
    if (XWHTBL.XWHCD[SLWIDX01] == SL0EM210.XWHCD)
      SL0EW02.SL0EWFL1 = "Y"; /* hit in table flag*/
      if (XWHTBL.XWHCSEFL[SLWIDX01] == "Y") /* a case warehouse*/
        if (SL0EM210.SL0EMCAS > " ")
          if (SL0EW02.SL0EWFAT != "PR" /* "from" area not processing*/
           || SL0EW02.SL0EWTAT != "BU") /* "to"   area not bulk*/
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SD2M";
            SLWREC.SLWMSGNO = 182; /* <-invalid from-to area*/
            set SL0EM210.SL0EMCAS cursor, bold;
            return;
          end
        else
          /* next sentence*/
        end
      else
        if (SL0EM210.SL0EMCAS > " ")
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SD2N";
          SLWREC.SLWMSGNO = 183; /* <- valid for case warehouse only*/
          set SL0EM210.SL0EMCAS cursor, bold;
          return;
        end
      end
    else
      if (XWHTBL.XWHCD[SLWIDX01] == "99")
        SL0EW02.SL0EWFL1 = "Y";
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SD2O";
        SLWREC.SLWMSGNO = 01; /* call programming*/
        return;
      else
        SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
      end
    end
  end

   /* *************************************************************/
   /* *** edit NEW SLC code field relations                    ****/
   /* ***                                                      ****/
   /* *************************************************************/

  if (SL0EM210.SL0EMSLC > " ")
    if (SL0EW02.SL0EWFAT != "PR" /* "from" area not processing*/
     || SL0EW02.SL0EWTAT != "BU") /* "to"   area not bulk*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD2P";
      SLWREC.SLWMSGNO = 182; /* <-invalid from-to area*/
      set SL0EM210.SL0EMSLC cursor, bold;
      return;
    else
      if (SL0EM210.XSLCD in XSLTBL.XSLCD)
        if (XSLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* slc code is active*/
           /* next sentence*/
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SD2Q";
          SLWREC.SLWMSGNO = 10; /* inactive msg*/
          set SL0EM210.SL0EMSLC cursor, bold;
          return;
        end
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SD2R";
        SLWREC.SLWMSGNO = 11; /* invalid value msg*/
        set SL0EM210.SL0EMSLC cursor, bold;
        return;
      end
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ESD2

// save data & upd VPARM101 later
Function SL0ESDT()
   /* ************************************************************/
   /* ** Updated the internal table with the last zone and     ***/
   /* ** location used for bulk storage                        ***/
   /* ** Table VPARM101 will be updated at the end  - when the ***/
   /* ** leaves the screen                                     ***/
   /* ************************************************************/
  SL0EW01.SL0EWPIX = 1;
  SL0EW01.SL0EWPFLG = "N";
  SL0EW01.SLZONE-NUM = SL5REC.SL4ZONE;

  while (SL0EW01.SL0EWPIX <= SL0EWX1.SL0EWPMX && 
  SL0EW01.SL0EWPZN[SL0EWPIX] > 0 && 
  SL0EW01.SL0EWPFLG == "N")
    if (SL0EW01.SLZONE-NUM == SL0EW01.SL0EWPZN[SL0EWPIX])
      SL0EW01.SL0EWPLC[SL0EWPIX] = SL5REC.SL5LOCTN;
      SL0EW01.SL0EWPFLG = "Y";
    end
    SL0EWPIX = SL0EWPIX + 1;
  end

  if (SL0EW01.SL0EWPFLG == "N")
    if (SL0EWPIX > 1)
      SL0EWPIX = SL0EWPIX - 1;
    end
    SL0EW01.SL0EWPZN[SL0EWPIX] = SL0EW01.SLZONE-NUM;
    SL0EW01.SL0EWPLC[SL0EWPIX] = SL5REC.SL5LOCTN;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ESDT

// key obtain table data
Function SL0ESE1()

   /* ************************************************************/
   /* *** for each entry obtain the to/from area and zone     ****/
   /* *** types from the tables.  depending on  the returned  ****/
   /* *** values perform further field edits                  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if there is no screen data for this from/to data    ****/
   /* *** then skip this processing and return to obtain table****/
   /* *** data for the next screen to/from data               ****/
   /* ************************************************************/

  if (SL0EW01.SL0EWFL1 == "Y")
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
    return;
  end

   /* ************************************************************/
   /* *** set the "previous" counter to 1 less than the       ****/
   /* *** current counter to check prior values.  if current  ****/
   /* *** counter is 1 then there is no previous data         ****/
   /* ************************************************************/

  if (SLWREC.SLWIDX01 > 1)
    SLWREC.SLWIDX02 = SLWREC.SLWIDX01 - 1; /* set previous counter*/
  end

   /* *************************************************************/
   /* ***  move to/from area/zone data to the process working  ****/
   /* ***  storage record SL0EW01.                             ****/
   /* ***                                                      ****/
   /* *************************************************************/

  SL0EW01.SL0EWFAC[SLWIDX01] = SL0EM110.SL8FRAR[SLWIDX01];
  SL0EW01.SL0EWFZC[SLWIDX01] = SL0EM110.SL8FRZN[SLWIDX01];
  SL0EW01.SL0EWTAC[SLWIDX01] = SL0EM110.SL8TOAR[SLWIDX01];
  SL0EW01.SL0EWTZC[SLWIDX01] = SL0EM110.SL8TOZN[SLWIDX01];

   /* *************************************************************/
   /* ***  edit from area/zone data - table lookups            ****/
   /* ***  curr from area code entered = prev from area code   ****/
   /* ***  obtain from    area/zone types                      ****/
   /* *************************************************************/

  if (SL0EW01.SL0EWFAC[SLWIDX01] == SL0EW01.SL0EWFAC[SLWIDX02]
   && SLWREC.SLWIDX01 > 1)
    SL0EW01.SL0EWFAT[SLWIDX01] = SL0EW01.SL0EWFAT[SLWIDX02];
    if (SL0EW01.SL0EWFAT[SLWIDX01] == "PR")
      if (SL0EW01.SL0EWFZC[SLWIDX01] == SL0EW01.SL0EWFZC[SLWIDX02])
        SL0EW01.SL0EWFZP[SLWIDX01] = SL0EW01.SL0EWFZP[SLWIDX02];
      else
        SL4REC.XWHCD = SL0EM110.XWHCD;
        SL4REC.XARCD = SL0EW01.SL0EWFAC[SLWIDX01];
        SL4REC.SL4ZONE = SL0EW01.SL0EWFZC[SLWIDX01];
                      /* GET FROM ZONE TYPE*/
         /* ************************************************************/
         /* *** setup the following before i/o sgrp execution:      ****/
         /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
         /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
         /* *** execute the appropriate sgrp                        ****/
         /* ***   note: sgrp names correspond to 'xq' process names ****/
         /* *** setup the action for the following return codes:    ****/
         /* ***      0 = found - continue                           ****/
         /* ***   +100 = not found - return w/ not fnd msg          ****/
         /* ***   -911 = deadlock - return w/ try again msg         ****/
         /* ***     <0 = db/severe error - contact programming msg  ****/
         /* ***          note: clear screen & put keys back         ****/
         /* ***          note: TA0020 will have been executed       ****/
         /* ***                within this sgrp for <0 only         ****/
         /* ************************************************************/

         /* ************************************************************/
         /* *** setup application specific ta1rec fields in case    ****/
         /* *** TA0020 is used for a severe DB error in this sgrp   ****/
         /* ************************************************************/

        TA1REC.TA1LOCAT[2] = "SL0ESE1 ";
        TA1REC.TA1MAP = SLWREC.SLWTAMAP;

        XSSL4I0(); /* <=== get from zone type seluniq*/

        if (SQLCA.VAGen_SQLCODE == 0)
          SL0ES1A(); /* determine and move From Zone Process Type*/
          if (SLWREC.SLWERRSW == "Y")
            return;
          end
        else
          if (SQLCA.VAGen_SQLCODE == +100) /* <=== for seluniq*/
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SE1A";
            SLWREC.SLWMSGNO = 0011; /* <--- invalid value*/
            set SL0EM110.SL8FRAR[SLWIDX01] cursor, bold;
            set SL0EM110.SL8FRZN[SLWIDX01] bold;
            return;
          end
          if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SE1B";
            SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
            return;
          end
          SLWREC.SLWERRSW = "Y";
                                   /* <=== for all other neg. sql codes*/
          SLWREC.XXXLOCID = "SE1C";
          SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
          return;
        end
      end
    end
  end

   /* *************************************************************/
   /* *** edit from area/zone data - table lookups             ****/
   /* *** curr from area code entered ^= prev from area code   ****/
   /* *** obtain from    area/zone types                       ****/
   /* *************************************************************/

  if (SL0EW01.SL0EWFAC[SLWIDX01] != SL0EW01.SL0EWFAC[SLWIDX02]
   || SLWREC.SLWIDX01 == 1)
    SL0ES1B(); /* determine and move From Area Type*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
    if (SL0EW01.SL0EWFAT[SLWIDX01] == "PR")
      SL4REC.XWHCD = SL0EM110.XWHCD;
      SL4REC.XARCD = SL0EW01.SL0EWFAC[SLWIDX01];
      SL4REC.SL4ZONE = SL0EW01.SL0EWFZC[SLWIDX01];
                 /* GET FROM ZONE TYPE*/
       /* ************************************************************/
       /* *** setup the following before i/o sgrp execution:      ****/
       /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
       /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
       /* *** execute the appropriate sgrp                        ****/
       /* ***   note: sgrp names correspond to 'xq' process names ****/
       /* *** setup the action for the following return codes:    ****/
       /* ***      0 = found - continue                           ****/
       /* ***   +100 = not found - return w/ not fnd msg          ****/
       /* ***   -911 = deadlock - return w/ try again msg         ****/
       /* ***     <0 = db/severe error - contact programming msg  ****/
       /* ***          note: clear screen & put keys back         ****/
       /* ***          note: TA0020 will have been executed       ****/
       /* ***                within this sgrp for <0 only         ****/
       /* ************************************************************/

       /* ************************************************************/
       /* *** setup application specific ta1rec fields in case    ****/
       /* *** TA0020 is used for a severe DB error in this sgrp   ****/
       /* ************************************************************/

      TA1REC.TA1LOCAT[2] = "SL0ESE1 ";
      TA1REC.TA1MAP = SLWREC.SLWTAMAP;

      XSSL4I0(); /* <=== get from zone type seluniq*/

      if (SQLCA.VAGen_SQLCODE == 0)
        SL0ES1A(); /* determine and move From Zone Process Type*/
        if (SLWREC.SLWERRSW == "Y")
          return;
        end
      else
        if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SE1D";
          SLWREC.SLWMSGNO = 0011; /* <--- invalid value*/
          set SL0EM110.SL8FRAR[SLWIDX01] cursor, bold;
          set SL0EM110.SL8FRZN[SLWIDX01] bold;
          return;
        end
        if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SE1E";
          SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
          return;
        end
        SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
        SLWREC.XXXLOCID = "SE1F";
        SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
        return;
      end
    end
  end

   /* *************************************************************/
   /* *** edit to area/zone data - table lookups               ****/
   /* *** curr to area code entered = prev to area code        ****/
   /* *** obtain to area/zone types                            ****/
   /* *************************************************************/

  if (SL0EW01.SL0EWTAC[SLWIDX01] != " ")
    if (SL0EW01.SL0EWTAC[SLWIDX01] == SL0EW01.SL0EWTAC[SLWIDX02]
     && SLWREC.SLWIDX01 > 1)
      SL0EW01.SL0EWTAT[SLWIDX01] = SL0EW01.SL0EWTAT[SLWIDX02];
      if (SL0EW01.SL0EWTAT[SLWIDX01] == "PR")
        if (SL0EW01.SL0EWTZC[SLWIDX01] != " ")
          if (SL0EW01.SL0EWTZC[SLWIDX01] == SL0EW01.SL0EWTZC[SLWIDX02])
            SL0EW01.SL0EWTZP[SLWIDX01] = SL0EW01.SL0EWTZP[SLWIDX02];
          else
            SL4REC.XWHCD = SL0EM110.XWHCD;
            SL4REC.XARCD = SL0EW01.SL0EWTAC[SLWIDX01];
            SL4REC.SL4ZONE = SL0EW01.SL0EWTZC[SLWIDX01];
                          /* GET TO ZONE TYPE*/

             /* ************************************************************/
                                  /* *** setup the following before i/o*/
                                   /* sgrp execution:      ****/
                                  /* ***   TA1REC.TA1LOCAT(2) = what*/
                                   /* executes this sgrp      ****/
                                  /* ***   TA1REC.TA1MAP      = what map*/
                                   /* this data is from   ****/
                                  /* *** execute the appropriate sgrp*/
                                   /* ****/
                                  /* ***   note: sgrp names correspond to*/
                                   /* 'xq' process names ****/
                                  /* *** setup the action for the*/
                                   /* following return codes:    ****/
                                  /* ***      0 = found - continue*/
                                   /* ****/
                                  /* ***   +100 = not found - return w/*/
                                   /* not fnd msg          ****/
                                  /* ***   -911 = deadlock - return w/ try*/
                                   /* again msg         ****/
                                  /* ***     <0 = db/severe error -*/
                                   /* contact programming msg  ****/
                                  /* ***          note: clear screen & put*/
                                   /* keys back         ****/
                                  /* ***          note: TA0020 will have*/
                                   /* been executed       ****/
                                  /* ***                within this sgrp*/
                                   /* for <0 only         ****/

             /* ************************************************************/

             /* ************************************************************/
                                  /* *** setup application specific ta1rec*/
                                   /* fields in case    ****/
                                  /* *** TA0020 is used for a severe DB*/
                                   /* error in this sgrp   ****/

             /* ************************************************************/

            TA1REC.TA1LOCAT[2] = "SL0ESE1 ";
            TA1REC.TA1MAP = SLWREC.SLWTAMAP;

            XSSL4I0(); /* <=== get to zone type seluniq*/

            if (SQLCA.VAGen_SQLCODE == 0)
              SL0ES1C(); /* determine and move To Zone Process Type*/
              if (SLWREC.SLWERRSW == "Y")
                return;
              end
            else
              if (SQLCA.VAGen_SQLCODE == +100) /* <=== for seluniq*/
                SLWREC.SLWERRSW = "Y";
                SLWREC.XXXLOCID = "SE1G";
                SLWREC.SLWMSGNO = 0011; /* <--- invalid value*/
                set SL0EM110.SL8TOAR[SLWIDX01] cursor, bold;
                set SL0EM110.SL8TOZN[SLWIDX01] bold;
                return;
              end
              if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
                SLWREC.SLWERRSW = "Y";
                SLWREC.XXXLOCID = "SE1H";
                SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
                return;
              end
              SLWREC.SLWERRSW = "Y";
                                   /* <= for all other neg. sql codes*/
              SLWREC.XXXLOCID = "SE1I";
              SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
              return;
            end
          end
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SE1J";
          SLWREC.SLWMSGNO = 09; /* <-reqrd field*/
          set SL0EM110.SL8TOZN[SLWIDX01] cursor, bold;
          return;
        end
      else
        if (SL0EW01.SL0EWTAT[SLWIDX01] != "BU")
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SE1K";
          SLWREC.SLWMSGNO = 11; /* <-invalid value*/
          set SL0EM110.SL8TOAR[SLWIDX01] cursor, bold;
          return;
        end
      end
    end
  end

   /* *************************************************************/
   /* *** edit to area/zone data - table lookups               ****/
   /* *** curr to area code entered ^= prev to area code       ****/
   /* *** obtain to area zone types                            ****/
   /* *************************************************************/

  if (SL0EW01.SL0EWTAC[SLWIDX01] != " ")
    if (SL0EW01.SL0EWTAC[SLWIDX01] != SL0EW01.SL0EWTAC[SLWIDX02]
     || SLWREC.SLWIDX01 == 1)
      SL0ES1D(); /* determine and move To Area Type*/
      if (SLWREC.SLWERRSW == "Y")
        return;
      end
      if (SL0EW01.SL0EWTAT[SLWIDX01] == "PR")
        if (SL0EW01.SL0EWTZC[SLWIDX01] != " ")
          SL4REC.XWHCD = SL0EM110.XWHCD;
          SL4REC.XARCD = SL0EW01.SL0EWTAC[SLWIDX01];
          SL4REC.SL4ZONE = SL0EW01.SL0EWTZC[SLWIDX01];
                        /* GET TO ZONE TYPE*/
           /* ************************************************************/
           /* *** setup the following before i/o sgrp execution:      ****/
           /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
           /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
           /* *** execute the appropriate sgrp                        ****/
           /* ***   note: sgrp names correspond to 'xq' process names ****/
           /* *** setup the action for the following return codes:    ****/
           /* ***      0 = found - continue                           ****/
           /* ***   +100 = not found - return w/ not fnd msg          ****/
           /* ***   -911 = deadlock - return w/ try again msg         ****/
           /* ***     <0 = db/severe error - contact programming msg  ****/
           /* ***          note: clear screen & put keys back         ****/
           /* ***          note: TA0020 will have been executed       ****/
           /* ***                within this sgrp for <0 only         ****/
           /* ************************************************************/

           /* ************************************************************/
           /* *** setup application specific ta1rec fields in case    ****/
           /* *** TA0020 is used for a severe DB error in this sgrp   ****/
           /* ************************************************************/

          TA1REC.TA1LOCAT[2] = "SL0ESE1 ";
          TA1REC.TA1MAP = SLWREC.SLWTAMAP;

          XSSL4I0(); /* <=== get to zone type seluniq*/

          if (SQLCA.VAGen_SQLCODE == 0)
            SL0ES1C(); /* determine and move To Zone Process Type*/
            if (SLWREC.SLWERRSW == "Y")
              return;
            end
          else
            if (SQLCA.VAGen_SQLCODE == +100) /* <=== for seluniq*/
              SLWREC.SLWERRSW = "Y";
              SLWREC.XXXLOCID = "SE1L";
              SLWREC.SLWMSGNO = 0011; /* <--- invalid value*/
              set SL0EM110.SL8TOAR[SLWIDX01] cursor, bold;
              set SL0EM110.SL8TOZN[SLWIDX01] bold;
              return;
            end
            if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
              SLWREC.SLWERRSW = "Y";
              SLWREC.XXXLOCID = "SE1M";
              SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
              return;
            end
            SLWREC.SLWERRSW = "Y";
                                   /* <= for all other neg. sql codes*/
            SLWREC.XXXLOCID = "SE1N";
            SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
            return;
          end
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SE1O";
          SLWREC.SLWMSGNO = 09; /* <-reqrd field*/
          set SL0EM110.SL8TOZN[SLWIDX01] cursor, bold;
          return;
        end
      else
        if (SL0EW01.SL0EWTAT[SLWIDX01] != "BU")
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SE1P";
          SLWREC.SLWMSGNO = 11; /* <-invalid value*/
          set SL0EM110.SL8TOAR[SLWIDX01] cursor, bold;
          return;
        end
      end
    end
  end

   /* *************************************************************/
   /* *** edit to area/zone data                               ****/
   /* *** if to area code not entered, then find it in the     ****/
   /* *** warehouse/area table using warehouse code and bulk   ****/
   /* *** type equal yes                                       ****/
   /* *************************************************************/

  if (SL0EW01.SL0EWTAC[SLWIDX01] == " ")
    SLWREC.SLWIDX03 = 1;
    SL0EW01.SL0EWFL1 = "N";
    while (SL0EW01.SL0EWFL1 == "N")
      if (XARTBL.XWHCD[SLWIDX03] == SL0EM110.XWHCD
       && XARTBL.XARBLKFL[SLWIDX03] == "Y")
        SL0EW01.SL0EWTAC[SLWIDX01] = XARTBL.XARCD[SLWIDX03];
        SL0EW01.SL0EWTAT[SLWIDX01] = "BU";
        SL0EW01.SL0EWFL1 = "Y";
      else
        if (XARTBL.XARCD[SLWIDX03] == "99")
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SE1Q";
          SLWREC.SLWMSGNO = 01; /* <-call programming*/
          return;
        else
          SLWREC.SLWIDX03 = SLWREC.SLWIDX03 + 1;
        end
      end
    end
  end

   /* *************************************************************/
   /* *** edit FROM area, zone, location field type relations  ****/
   /* *************************************************************/

  if (SL0EW01.SL0EWFAT[SLWIDX01] == "BU"
   && SL0EM110.SL8FRLC[SLWIDX01] == " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE1R";
    SLWREC.SLWMSGNO = 09; /* <-reqrd field*/
    set SL0EM110.SL8FRLC[SLWIDX01] cursor, bold;
    return;
  end

  if (SL0EW01.SL0EWFAT[SLWIDX01] == "PR"
   && SL0EW01.SL0EWFZP[SLWIDX01] == "PI"
   && SL0EM110.SL8FRLC[SLWIDX01] == " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE1S";
    SLWREC.SLWMSGNO = 09; /* <-reqrd field*/
    set SL0EM110.SL8FRLC[SLWIDX01] cursor, bold;
    return;
  end

  if (SL0EW01.SL0EWFAT[SLWIDX01] != "PR"
   && SL0EW01.SL0EWFAT[SLWIDX01] != "RE"
   && SL0EW01.SL0EWFAT[SLWIDX01] != "BU")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE1T";
    SLWREC.SLWMSGNO = 11; /* <-invalid value*/
    set SL0EM110.SL8FRAR[SLWIDX01] cursor, bold;
    return;
  end

  if (SL0EW01.SL0EWFAT[SLWIDX01] == "RE")
    if (SL0EM110.SL8FRLC[SLWIDX01] == " ")
      SL0EM110.SL8FRLC[SLWIDX01] = "000000";
    end
  end

  if (SL0EW01.SL0EWFAT[SLWIDX01] == "PR"
   && SL0EW01.SL0EWFZP[SLWIDX01] == "FU")
    if (SL0EM110.SL8FRLC[SLWIDX01] == " ")
      SL0EM110.SL8FRLC[SLWIDX01] = "000000";
    end
  end

  SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0ESE1

// key obtain table data
Function SL0ESE2()

                  /* OBTAIN TABLE DATA FOR PROCESSING*/
   /* ************************************************************/
   /* *** make one time table accesses for auxillary and/or   ****/
   /* *** main data                                           ****/
   /* *** obtain table data is broken down to three functions ****/
   /* ***        sl0es2e (obtain table data)                  ****/
   /* ***        sl0es2f (obtain sizes one product )          ****/
   /* ***        sl0es2g (obtain sizes > 1 product )          ****/
   /* ***        sl0es2h (determine to location)              ****/
   /* ************************************************************/

  SL0ES2E(); /* <=== obtain table data*/
  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  if (SL0EW02.SL0EWTAC != " " /* to area entered*/
   && SL0EW02.SL0EWTZC != " " /* to zone entered*/
   && SL0EM210.SL8TOLC != " ") /* to loc entered*/
    if (SL0EW02.SL0EWSPA > 0) /* sas exists*/
      if (SL0EW02.SL0EWTAT == "PR") /* to area processing*/
        if (SL5REC.YLTCD == "22") /* to loc full case static*/
          if (SL0EM210.XWHCD == "02" /* whse 02*/
           || SL0EM210.XWHCD == "04" /* whse 04*/
           || SL0EM210.XWHCD == "07" /* whse 07*/
           || SL0EM210.XWHCD == "25" /* whse 25*/
           || SL0EM210.XWHCD == "51" /* whse 51*/
           || SL0EM210.XWHCD == "42") /* Canada*/
            if (SL0EW02.SL0EWSPA == 62 /* whse 02 prod sas*/
             || SL0EW02.SL0EWSPA == 64 /* whse 04 prod sas*/
             || SL0EW02.SL0EWSPA == 65 /* whse 07 prod sas*/
             || SL0EW02.SL0EWSPA == 68 /* whse 25 prod sas*/
             || SL0EW02.SL0EWSPA == 69 /* whse 51 prod sas*/
             || SL0EW02.SL0EWSPA == 103) /* Canada prod sas*/
              if (SL5REC.YLSCD != "01") /* loc status not empty*/
                SLWREC.SLWERRSW = "Y";
                SLWREC.XXXLOCID = "SE2A";
                SLWREC.SLWMSGNO = 195; /* loc must be empty*/
                return;
              end
            end
          else
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SE2B";
            SLWREC.SLWMSGNO = 194; /* can not move product*/
            return;
          end
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SE2C";
          SLWREC.SLWMSGNO = 194; /* can not move product*/
          return;
        end
      end
    end
  end

  if (SL0EW02.SL0EWFL1 == "N") /* one or more products found flag*/
    SL0ES2F(); /* <=== process table data 1 prod fnd*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
  else
    SL0ES2G(); /* <=== process table data >1 prod fnd*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
  end

  if (SL0EW02.SL0EWNTQ > 0) /* <=== number of records in the tsq*/
    SL0ES9F(); /* <=== accumulate active wo qty*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
    SL0ES9G(); /* <=== adjust wo qty out of qty*/
                                  /* available for transfer*/
    SL0ES9L(); /* delete zero qty fields and darken*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ESE2

// process single wo data
Function SL0ESEE()

   /* *************************************************************/
   /* ***   work order header has been obtained               *****/
   /* *************************************************************/

  if (SL0EW11.SWEPLLNB > 0 /* Receiving work order*/
   && SL0EM310.XMSLMFNC == "2") /* and cancel function*/
    SLWREC.SLWERRSW = "Y"; /* Error switch*/
    SLWREC.XXXLOCID = "SEEA"; /* Error location*/
    SLWREC.SLWMSGNO = 415; /* Cancel not available*/
    set SL0EM310.XMSLMFNC cursor, bold; /* Highlight*/
    return; /* Return to previous process*/
  end

  SL0ES3D(); /* update the work order header*/
  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  if (SL0EM310.XMSLMFNC == "1") /* complete function*/
    SL0ES3E(); /* obtain all work order items*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end

    while (SQLCA.VAGen_SQLCODE == 0) /* perform for each work order item*/
      SL0EW03.SL0EWWQR = SL9REC.SL9WOQTY; /* save wo item qnty*/
      SL0ES3F(); /* setupd prod/loc rec for from locat*/
      if (SLWREC.SLWERRSW == "Y")
        return;
      end

      /* ********** process each from prod loc record till ********/
      /* ********** work order item qty is zero or less    ********/

      while (SL0EW03.SL0EWWQR > 0) /* loop thru each from prod loc*/
         /* till item wo qnty is all used up*/
        SL0EW03.SL0EWRTS = VSYLOC02.SL6RTSDT; /* save 'fr' rts date*/
        SL0EW03.PC3PONBR = VSYLOC02.PC3PONBR; /* save 'fr' po number*/
        SL0EW03.PC-SAP-PO-NBR = VSYLOC02.PC-SAP-PO-NBR;
                                                     /* save 'fr' po number*/

        if (VSYLOC02.SL6ONHND >= 0)
           /* ************** CALCULATE WS FIELDS ******************/
           /* setup wqy as amt to be moved for this prod/loc (size)*/
           /* and decrement the loop control qty (sz tot to be moved)*/

          SL0EW03.SL0EWWQY = VSYLOC02.SL6ONHND - SL0EW03.SL0EWWQR;
          if (SL0EW03.SL0EWWQY > 0)
            SL0EW03.SL0EWWQY = SL0EW03.SL0EWWQR;
          else
            SL0EW03.SL0EWWQY = VSYLOC02.SL6ONHND;
          end
          SL0EW03.SL0EWWQR = SL0EW03.SL0EWWQR - SL0EW03.SL0EWWQY;

          if (VSYLOC02.SL6STASD == 0)
            SL0EW03.SL0EWRBQ = 0; /* setaside to be left in 'fr' loc*/
            SL0EW03.SL0EWWMQ = 0; /* setaside to be moved to 'to' loc*/
          else
            if (VSYLOC02.SL6STASD < VSYLOC02.SL6ONHND)
              SL0EW03.SL0EWWMQ = VSYLOC02.SL6ONHND - VSYLOC02.SL6STASD;
              if (SL0EW03.SL0EWWMQ >= SL0EW03.SL0EWWQY)
                SL0EW03.SL0EWWMQ = 0;
                SL0EW03.SL0EWRBQ = VSYLOC02.SL6STASD;
              else
                SLWREC.SLWREM01 = SL0EW03.SL0EWWQY - SL0EW03.SL0EWWMQ;
                SL0EW03.SL0EWRBQ = VSYLOC02.SL6STASD - SLWREC.SLWREM01;
                SL0EW03.SL0EWWMQ = SLWREC.SLWREM01;
              end
            else
               /* VSYLOC02.sl6stasd is gt or eq VSYLOC02.sl6onhnd*/
              SL0EW03.SL0EWRBQ = VSYLOC02.SL6STASD - SL0EW03.SL0EWWQY;
              SL0EW03.SL0EWWMQ = SL0EW03.SL0EWWQY;
            end
            SL0EW03.INASAID = VSYLOC02.INASAID;
            SL0EW03.SL6SADTE = VSYLOC02.SL6SADTE;
          end

           /* If setaside Id entered on screen,*/
           /* make "to loc" setaside = "to loc" on-hand*/
          if (SL0EM210.SL0EM-STASDFL == "Y" /* setaside req'd on screen?*/
           && SL0EM210.INASAID > 0          
           && (VSYLOC02.INASAID <= 0        /* and ok with "to loc" setaside*/
           || SL0EM210.INASAID == VSYLOC02.INASAID))
            SL0EW03.SL0EWWMQ = SL0EW03.SL0EWWQY;
            SL0EW03.INASAID = SL0EM210.INASAID;
            SL0EW03.SL6SADTE = X2CREC.X2CCURDT;
          end

           /* ************** END CALCULATE WS FIELDS ******************/

          VSYLOC02.SL6ONHND = VSYLOC02.SL6ONHND - SL0EW03.SL0EWWQY;
          if (VSYLOC02.SL6ONHND == 0
           && SL0EW03.SL0EWRBQ == 0
           && VSYLOC02.SL6PKRSV == 0)
            SL0ES3H(); /* DELETE PROD/LOC REC FOR FROM LOC*/
          else
            SL0ES3G(); /* REPLACE PROD/LOC REC FOR FROM LOC*/
          end
          if (SLWREC.SLWERRSW == "Y")
            return;
          end

          SL0ES3I(); /* SETUPD PROD/LOC REC FOR TO LOC*/
          if (SLWREC.SLWERRSW == "Y")
            return;
          end
          if (SQLCA.VAGen_SQLCODE == +100)
            SL0ES3J(); /* ADD PROD/LOC FOR TO LOC*/
          else
            SL0ES3K(); /* REPLACE PROD/LOC FOR TO LOC*/
          end
          if (SLWREC.SLWERRSW == "Y")
            return;
          end
        end

         /* just get next if onhand < 0 (determined above)*/
        SL0ES3R(); /* fetch next from prod loc record*/
        if (SLWREC.SLWERRSW == "Y")
          return;
        end

        if (SQLCA.VAGen_SQLCODE == +100) /* end of from prod loc*/
          if (SL0EW03.SL0EWWQR > 0)
            set SL5REC empty;
            SL5REC.XWHCD = SL0EM310.XWHCD;
            SL5REC.XARCD = VWOLHD02.SL8FRAR;
            SL5REC.SL4ZONE = VWOLHD02.SL8FRZN;
            SL5REC.SL5LOCTN = VWOLHD02.SL8FRLC;
            XSSL5I0(); /* Get from location type*/
            if (SLWREC.SLWERRSW == "Y")
              return;
            end
             /* add a prod/loc item in the from loc*/
             /* with the wqr as a neg. qty*/
             /* and add the planned amt to the to loc*/
            SL0ES3S(); /* insert from prod loc record for diff*/
            if (SLWREC.SLWERRSW == "Y")
              return;
            end
             /* artificailly setup qty's*/
            SL0EW03.SL0EWWQY = SL0EW03.SL0EWWQR;
            SL0EW03.SL0EWWQR = 0;
            SL0EW03.SL0EWWMQ = 0; /* setaside to be moved to 'to' loc*/
            SL0ES3I(); /* SETUPD PROD/LOC REC FOR TO LOC*/
            if (SQLCA.VAGen_SQLCODE == +100)
              SL0ES3J(); /* ADD PROD/LOC FOR TO LOC*/
            else
              SL0ES3K(); /* REPLACE PROD/LOC FOR TO LOC*/
            end
            if (SLWREC.SLWERRSW == "Y")
              return;
            end
          end
        end
      end

      XSSLS-C5-VSYLOC02(); /* close from prod/loc cursor*/

      SL0ES3L(); /* FETCH NEXT ITEM RECORD*/
      if (SLWREC.SLWERRSW == "Y")
        return;
      end
    end
  end

  SL0ES3M(); /* READ/UPDATE LOCATION DB FOR FROM LOC*/
  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0ES3N(); /* READ/UPDATE LOCATION DB FOR TO LOC*/
  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* *************************************************************/
   /* ***   end of statement group                            *****/
   /* *************************************************************/
end // end SL0ESEE

// save current key value(s)
Function SL0ESF1()

   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  COMMAREA.XWHCD = SL0EM110.XWHCD;

  SL0EW01.XWHCD = SL0EM110.XWHCD;
  SL0EW01.SL-LOC-SZ-IND = SL0EM110.SL-LOC-SZ-IND;
  SL0EW01.SL0EWMPF = SL0EM110.SL0EMMPF; /* multi-product flag*/
  SL0EW01.SL8WOGRP = SL0EM110.SL8WOGRP;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ESF1

// save current key value(s)
Function SL0ESF2()
   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  COMMAREA.XWHCD = SL0EM210.XWHCD;

  SL0EW02.XWHCD = SL0EM210.XWHCD;
  SL0EW02.SL-LOC-SZ-IND = SL0EM210.SL-LOC-SZ-IND;
  SL0EW02.SL0EWMPF = SL0EM210.SL0EMMPF;
  SL0EW02.SL8FRAR = SL0EM210.SL8FRAR;
  SL0EW02.SL8FRZN = SL0EM210.SL8FRZN;
  SL0EW02.SL8FRLC = SL0EM210.SL8FRLC;
  SL0EW02.SL8TOAR = SL0EM210.SL8TOAR;
  SL0EW02.SL8TOZN = SL0EM210.SL8TOZN;
  SL0EW02.SL8TOLC = SL0EM210.SL8TOLC;
  SL0EW02.SL2PALET = SL0EM210.SL2PALET;
  SL0EW02.SL2CASE = SL0EM210.SL2CASE;
  SL0EW02.XGPCD = SL0EM210.XGPCD;
  SL0EW02.SY1STNBR = SL0EM210.SY1STNBR;
  SL0EW02.SY2CLRID = SL0EM210.SY2CLRID;
  SL0EW02.XDMCD = SL0EM210.XDMCD;
  SL0EW02.XQACD = SL0EM210.XQACD;
  SL0EW02.XSDCD = SL0EM210.XSDCD;
  SL0EW02.XSLCD = SL0EM210.XSLCD;
  SL0EW02.XPGCD = SL0EM210.XPGCD;
  SL0EW02.XUMCD = SL0EM210.XUMCD;
  SL0EW02.XOWCD = SL0EM210.XOWCD;
  SL0EW02.SL3NXWOG = SL0EM210.SL8WOGRP;
  SL0EW02.SL8ITMFL = SL0EM210.SL8ITMFL;
  SL0EW02.SL8WOPY = SL0EM210.SL8WOPY;
  SL0EW02.SL0EMSLC = SL0EM210.SL0EMSLC;
  SL0EW02.SL0EMCAS = SL0EM210.SL0EMCAS;
  SL0EW02.SL0EW-STASDFL = SL0EM210.SL0EM-STASDFL;
  SL0EW02.INASAID = SL0EM210.INASAID;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0ESF2

// save current key value(s)
Function SL0ESF3()

   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  COMMAREA.XWHCD = SL0EM310.XWHCD;

  SL0EW03.XWHCD = SL0EM310.XWHCD;
  SL0EW03.XMSLMFNC = SL0EM310.XMSLMFNC;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ESF3

// setup map key fields
Function SL0ESG1()

   /* ************************************************************/
   /* *** since the 'special error switch' = 'y':             ****/
   /* *** use current ws values in the corresponding map flds ****/
   /* ************************************************************/

  SL0EM110.XWHCD = SL0EW01.XWHCD;
  SL0EM110.SL-LOC-SZ-IND = SL0EW01.SL-LOC-SZ-IND;
  SL0EM110.SL0EMMPF = SL0EW01.SL0EWMPF; /* multi-product flag*/
  SL0EM110.SL8WOGRP = SL0EW01.SL8WOGRP;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ESG1

// setup map key fields
Function SL0ESG2()
   /* ************************************************************/
   /* *** since the 'special error switch' = 'y':             ****/
   /* *** use current ws values in the corresponding map flds ****/
   /* ************************************************************/

  SL0EM210.XWHCD = SL0EW02.XWHCD;
  SL0EM210.SL-LOC-SZ-IND = SL0EW02.SL-LOC-SZ-IND;
  SL0EM210.SL0EM-STASDFL = SL0EW02.SL0EW-STASDFL;
  SL0EM210.INASAID = SL0EW02.INASAID;
  SL0EM210.SL0EMMPF = SL0EW02.SL0EWMPF;
  SL0EM210.SL8FRAR = SL0EW02.SL8FRAR;
  SL0EM210.SL8FRZN = SL0EW02.SL8FRZN;
  SL0EM210.SL8FRLC = SL0EW02.SL8FRLC;
  SL0EM210.SL8TOAR = SL0EW02.SL8TOAR;
  SL0EM210.SL8TOZN = SL0EW02.SL8TOZN;
  SL0EM210.SL8TOLC = SL0EW02.SL8TOLC;
  SL0EM210.SL2PALET = SL0EW02.SL2PALET;
  SL0EM210.SL2CASE = SL0EW02.SL2CASE;
  SL0EM210.SL0EMSLC = SL0EW02.SL0EMSLC;
  SL0EM210.SL0EMCAS = SL0EW02.SL0EMCAS;
  SL0EM210.XGPCD = SL0EW02.XGPCD;
  SL0EM210.SY1STNBR = SL0EW02.SY1STNBR;
  SL0EM210.SY2CLRID = SL0EW02.SY2CLRID;
  SL0EM210.XDMCD = SL0EW02.XDMCD;
  SL0EM210.XQACD = SL0EW02.XQACD;
  SL0EM210.XSDCD = SL0EW02.XSDCD;
  SL0EM210.XSLCD = SL0EW02.XSLCD;
  SL0EM210.XPGCD = SL0EW02.XPGCD;
  SL0EM210.XUMCD = SL0EW02.XUMCD;
  SL0EM210.XOWCD = SL0EW02.XOWCD;
  SL0EM210.SL8WOGRP = SL0EW02.SL3NXWOG;
  SL0EM210.SL8ITMFL = SL0EW02.SL8ITMFL;
  SL0EM210.SL8WOPY = SL0EW02.SL8WOPY;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0ESG2

// setup map key fields
Function SL0ESG3()

   /* ************************************************************/
   /* *** since the 'special error switch' = 'y':             ****/
   /* *** use current ws values in the corresponding map flds ****/
   /* ************************************************************/

  SL0EM310.XWHCD = SL0EW03.XWHCD;
  SL0EM310.XMSLMFNC = SL0EW03.XMSLMFNC;
  if (SL0EW03.SL0EWFL4 == "0")
    SLWREC.SLWMSGNO = 161; /* <--- no wo's completed msg*/
  else
    if (SL0EW03.SL0EWFL4 == "1")
      SLWREC.SLWMSGNO = 145; /* <--- no wo's canceled msg*/
    else
      SLWREC.SLWMSGNO = 020; /* <--- completed msg*/
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ESG3

// ENTER processing
Function SL0ESH0()

   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0ESA0(); /* <=== missing input edits*/

   /* ************************************************************/
   /* *** no missing fields:                                  ****/
   /* *** invalid selection detected in flow when             ****/
   /* *** transfer of control is attempted                    ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ESH0

// ENTER processing
Function SL0ESH1()

   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0ESA1(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no missing fields: edit                               **/
   /* ************************************************************/

  SL0ESC1(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** field edits ok:    relate and table lookup ea section **/
   /* ************************************************************/

  set SL0EW01 empty;
  SLWREC.SLWIDX01 = 1; /* working storage type index*/
  SLWREC.SLWIDX02 = 1;
  while (SLWREC.SLWIDX01 <= 8)
    SL0EW01.SL0EWFL1 = "N"; /* no entry flag*/
    SL0ESD1(); /* <=== relational edits*/

    if (SLWREC.SLWERRSW == "Y")
      return;
    end

    SL0ESE1(); /* <=== obtain table data*/

    if (SLWREC.SLWERRSW == "Y")
      return;
    end
  end
  SLWREC.SLWIDX01 = 0;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ESH1

// ENTER processing
Function SL0ESH2()

   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0ESA2(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no missing fields: edit individual fields           ****/
   /* ************************************************************/

  SL0ESC2(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0ESD2(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  if (SL0EM210.XWHCD != SL0EWX1.SL0EWLWH)
    if (SL0EM210.XWHCD == "02"
     || SL0EM210.XWHCD == "04"
     || SL0EM210.XWHCD == "07"
     /* OR SL0EM210.XWHCD EQ '25';   /* NSG*/
     || SL0EM210.XWHCD == "51"
     || SL0EM210.XWHCD == "42") /* Canada*/
      SL0ES7W(); /* <=== setup date for 2 days ago*/
      if (SLWREC.SLWERRSW == "Y")
        SLWREC.XXXLOCID = "SH2W";
        return;
      end
    else
      SL0EWX1.SL0EWDT = X2CREC.X2CCURDT; /* use current date*/
    end
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses & setup map ****/
   /* ************************************************************/

  SL0ESE2(); /* <=== obtain table data*/

  XSSLSPQ(); /* <=== purge tsq*/

  SL0ESF2(); /* <=== save current key values*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  if (SL0EW02.SL5FRWOC != 0) /* if wo for the location*/
    SL0ES2S(); /* check for duplicate wo*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ESH2

// ENTER processing
Function SL0ESH3()

   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0ESA3(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no missing fields: edit individual fields           ****/
   /* ************************************************************/

  SL0ESC3(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ESH3

// Get Lane Number
Function SL0ESI1()
   /* ------------------------------------------------------------*/
   /* Select lane number for w.o. creation using 'to' location*/
   /* DB2 table: DPICK.VPDRAT01*/
   /* <key fields come from DSTLOC.VWOLHD01 columns>*/
   /* ------------------------------------------------------------*/

  set PKEREC empty; /* init VPDRAT01 work record*/
  set SQLCA empty; /* init SQL comm. record*/

  PKEREC.XWHCD = VWOLHD02.XWHCD; /* set whse*/
  PKEREC.PKETOARE = VWOLHD02.SL8TOAR; /* set 'to' area*/
  PKEREC.PKETOZON = VWOLHD02.SL8TOZN; /* set 'to' zone*/
  SL0EW01.SL0EW-TO-LOC = VWOLHD02.SL8TOLC; /* use 1st 2 bytes of loc*/
  PKEREC.PKETOROW = SL0EW01.SL5ROWCD; /* to set 'to' row*/

  call "IO2150" ("SB", SQLCA, PKEREC) {isNoRefresh = yes, isExternal = yes}; /* Select-Alt-B option*/

  if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
    return; /* return to previous process*/
  end

  if (SQLCA.VAGen_SQLCODE == +100) /* row not found*/
    return; /* return to previous process*/
  end

  if (SQLCA.VAGen_SQLCODE == -911) /* row not available*/
    TA1REC.TA1FUNC = "POST"; /* set 'post' optn for ta0020*/
  else /* severe error*/
    TA1REC.TA1FUNC = "RETN"; /* set 'retn' optn for ta0020*/
  end

  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1PGMNM = "SL0ESI1 ";
  TA1REC.TA1LOCAT[1] = "IO2150  ";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "ROW (SB)";
  TA1REC.TA1DBASE = "DPICK   ";
  TA1REC.TA1TBLVU = "VPDRAT01";
  TA1REC.TA1TBLKE = PKEREC.PKEKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* *************************************************************/
   /* ***  end of STATEMENT GROUP                              ****/
   /* *************************************************************/

end // end SL0ESI1

// search for last location
Function SL0ESLC()
   /* ************************************************************/
   /* ** Search for last saved location in the internal table  ***/
   /* ** if not found                                          ***/
   /* **    look for it in VPARM table                         ***/
   /* ************************************************************/
  SL0EW01.SL0EWPIX = 1;
  SL0EW01.SL0EWPFLG = "N";
  SL0EW01.SLZONE-NUM = SL5REC.SL4ZONE;

  while (SL0EW01.SL0EWPIX <= SL0EWX1.SL0EWPMX && 
  SL0EW01.SL0EWPZN[SL0EWPIX] > 0 && 
  SL0EW01.SL0EWPFLG == "N")
    if (SL0EW01.SLZONE-NUM == SL0EW01.SL0EWPZN[SL0EWPIX])
      SL0EW01.SL0EWPLC[SL0EWPIX] = SL5REC.SL5LOCTN;
      SL0EW01.SL0EWPFLG = "Y";
    end
    SL0EWPIX = SL0EWPIX + 1;
  end

  if (SL0EW01.SL0EWPFLG == "N")
    XZZREC.XZZQRYRN = 51;
    XZZREC.XZZQRYID = "SL0E    ";
    SL0EW01.SLZONE-NUM = SL5REC.SL4ZONE;
    XZZREC.XZZQRYLN = SLZONE-NUM;
    XSXZZI0();
    if (SQLCA.VAGen_SQLCODE == 0)
      SL5REC.SL5LOCTN = XZZ6CHR;
    else
      if (SQLCA.VAGen_SQLCODE == +100)
        SL5REC.SL5LOCTN = "000000";
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          SLWREC.XXXLOCID = "SLCA";
          SLWREC.SLWMSGNO = 0031;
          SLWREC.SLWERRSW = "Y";
          return;
        else
          SLWREC.XXXLOCID = "SLCB";
          SLWREC.SLWMSGNO = 0001;
          SLWREC.SLWERRSW = "Y";
          return;
        end
      end
    end
  else
    if (SL0EWPIX > 1)
      SL0EWPIX = SL0EWPIX - 1;
    end
    SL5REC.SL5LOCTN = SL0EW01.SL0EWPLC[SL0EWPIX];
  end

  SL0EW01.SL0EWGRP = SL5REC.SL5LOCTN;
  if (SL0EW01.SL0EWNLC[2] == 9)
    SL0EW01.SL0EWNLC[1] = SL0EW01.SL0EWNLC[1] + 1;
  end
  SL0EW01.SL0EWNLC[2] = SL0EW01.SL0EWNLC[2] + 1;
  SL0EW01.SL0EWNLC[3] = 0;
  SL0EW01.SL0EWNLC[4] = 0;
  SL0EW01.SL0EWNLC[5] = 0;
  SL0EW01.SL0EWNLC[6] = 0;

  SL5REC.SL5LOCTN = SL0EW01.SL0EWGRP;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ESLC

// data missing input edits
Function SL0ESN2()

   /* ************************************************************/
   /* *** if no qquantities are entered then an error exists  ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = SL0EWC0.SL0EWNSS; /* nbr of qntys on screen*/

  while (SLWREC.SLWIDX01 != 0)
    if (SL0EM210.SL0EWWOQ[SLWIDX01] != 0)
      return;
    else
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
    end
  end

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "SN2A";
  SLWREC.SLWMSGNO = 0067;
  SLWREC.SLWIDX01 = 1;
  set SL0EM210.SL0EWWOQ[SLWIDX01] cursor, bold;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ESN2

// data field edits
Function SL0ESO2()

   /* ************************************************************/
   /* *** edit each data field in reverse order and error out ****/
   /* *** if any quantity field was changed to be greater than****/
   /* *** originally entered.  if any change occurred then    ****/
   /* *** set a qnty change flag to yes (sl0ewfl1). this flag ****/
   /* *** is used later when inserting item work orders.      ****/
   /* ************************************************************/

  SL0EW02.SL0EWFL1 = "N"; /* qnty changed flag*/
  SLWREC.SLWIDX01 = SL0EWC0.SL0EWNSS; /* nbr of qntys on screen*/

  while (SLWREC.SLWIDX01 != 0)
    if (SL0EM210.SL8ITMFL == "N")
      if (SL0EM210.SL0EWWOQ[SLWIDX01] != SL0EW02.SL0EWWOQ[SLWIDX01])
        if (SL0EM210.SL0EWWOQ[SLWIDX01] > 0)
          SL0EW02.SL0EWFL1 = "Y";
        end
      end
    end
    if (SL0EM210.SL0EWWOQ[SLWIDX01] > SL0EW02.SL0EWWOQ[SLWIDX01])
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SO2A";
      SLWREC.SLWMSGNO = 0068;
      set SL0EM210.SL0EWWOQ[SLWIDX01] cursor, bold;
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end
   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0ESO2

// post #1 - re-init. cnts
Function SL0ESP1()

   /* ************************************************************/
   /* *** post data when forced to re-initialize the row cnts ****/
   /* ************************************************************/

   /* needs the 'fyi' setup also*/
   /* MOVE 'POST' TO TA1REC.TA1FUNC;*/
   /* MOVE 'APPL' TO TA1REC.TA1TYPE;*/
   /* MOVE 'SL0ESBB ' TO TA1REC.TA1PGMNM;*/
   /* MOVE 'RE-INIT ' TO TA1REC.TA1LOCAT(1);*/
   /* MOVE 'ROW CTS ' TO TA1REC.TA1LOCAT(2);*/
   /* MOVE SL0EWX1.SL0EWRIN TO TA1REC.TA1LOCAT(3);*/
   /* MOVE 'TIMES   ' TO TA1REC.TA1LOCAT(4);*/
   /* MOVE 'SL0ESP1 ' TO TA1REC.TA1DBASE;*/
   /* MOVE '        ' TO TA1REC.TA1TBLVU;*/
   /* MOVE SL5REC.SL5DATA TO TA1REC.TA1TBLKE;*/
   /* SET ERRSQLCA EMPTY;*/
   /* CALL TA0020 TA1REC,ERRSQLCA;*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ESP1

// data relational edits
Function SL0ESP2()

   /* ************************************************************/
   /* *** map total field must equal calculated adj. total    ****/
   /* ************************************************************/

  SL0EW01.SL9WOQTY = 0; /* Reset quantity*/
  SL0EW02.SL0EWPTO = 0;
  SLWREC.SLWIDX01 = 1;
  SL0EW02.SL-WO-NBR-OF-LABL = 0; /* nbr of labels*/

  while (SLWREC.SLWIDX01 <= SL0EWC0.SL0EWNSS)

    SL0EW02.SL0EW-NBR-CARTONS = 0; /* nbr cartons for size*/

    SL0EW02.SL0EWPTO = SL0EW02.SL0EWPTO + SL0EM210.SL0EWWOQ[SLWIDX01];

    if (SL0EM210.XWHCD == "02" /* Greenland*/
     || SL0EM210.XWHCD == "04" /* or Memphis Footwear*/
     || SL0EM210.XWHCD == "07" /* or Wilsonville*/
     || SL0EM210.XWHCD == "25" /* or NSG*/
     || SL0EM210.XWHCD == "51" /* or Memphis Apparel*/
     || SL0EM210.XWHCD == "42") /* or Canada*/

      if (SL0EM210.SY1UNPCS > 0) /* units per case gt zero*/

        SL0EW02.SL0EW-NBR-CARTONS = SL0EM210.SL0EWWOQ[SLWIDX01] /         SL0EM210.SY1UNPCS;
        SL0EW01.SL9WOQTY = SL0EM210.SL0EWWOQ[SLWIDX01] % SL0EM210.SY1UNPCS;
        SL0EW02.SL-WO-NBR-OF-LABL = SL0EW02.SL-WO-NBR-OF-LABL +         SL0EW02.SL0EW-NBR-CARTONS;

        if (SL0EW01.SL9WOQTY != 0) /* Remainder not zero*/

          SL0EW02.SL-WO-NBR-OF-LABL = SL0EW02.SL-WO-NBR-OF-LABL + 1;
          SL0EW01.SL9WOQTY = 0; /* Reset quantity*/

          if (SLWREC.SLWIDX01 != SLWREC.SLWLINPP) /* New line error*/

            SLWREC.SLWLINPP = SLWREC.SLWIDX01; /* Line in error*/

            SLWREC.SLWERRSW = "Y"; /* Error switch*/
            SLWREC.XXXLOCID = "SP2A"; /* Location*/
            SLWREC.SLWMSGNO = 414; /* Units/case differs*/

            set SL0EM210.SL0EWWOQ[SLWIDX01] cursor, bold, skip;

            return;

          end

        end

      end

    end

    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;

  end

  if (SL0EM210.SL0EWWOQ[SLWIDX01] != SL0EW02.SL0EWPTO)

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SP2B";
    SLWREC.SLWMSGNO = 0069;

    set SL0EM210.SL0EWWOQ[SLWIDX01] cursor, bold;

    return;

  end

  SL0ES25(); /* make sure "from" and "to" loc have*/
                                   /* same setaside id*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ESP2

// post #3 - rpt cnt tried/used
Function SL0ESP3()

   /* ************************************************************/
   /* *** post data when cnt tried > max/row or cnt used = 0  ****/
   /* ************************************************************/

   /* needs the 'fyi' setup also*/
   /* MOVE 'POST' TO TA1REC.TA1FUNC;*/
   /* MOVE 'APPL' TO TA1REC.TA1TYPE;*/
   /* MOVE 'SL0ES7X ' TO TA1REC.TA1PGMNM;*/
   /* MOVE 'TRY CNT=' TO TA1REC.TA1LOCAT(1);*/
   /* MOVE SL0EWX1.SL0EWCTT TO TA1REC.TA1LOCAT(2);*/
   /* MOVE 'USE CNT=' TO TA1REC.TA1LOCAT(3);*/
   /* MOVE SL0EWX1.SL0EWCTU TO TA1REC.TA1LOCAT(4);*/
   /* MOVE SL0EWX1.SL0EWLZN TO TA1REC.TA1DBASE;*/
   /* MOVE SL0EWX1.SL0EWLOC TO TA1REC.TA1TBLVU;*/
   /* MOVE 'SL0ESP3' TO TA1REC.TA1TBLKE;*/
   /* SET ERRSQLCA EMPTY;*/
   /* CALL TA0020 TA1REC,ERRSQLCA;*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ESP3

// post #4 - ran out of loc.s
Function SL0ESP4()

   /* ************************************************************/
   /* *** post data when ran out of saved loc.s in ws list    ****/
   /* ************************************************************/

   /* needs the 'fyi' setup also*/
   /* MOVE 'POST' TO TA1REC.TA1FUNC;*/
   /* MOVE 'APPL' TO TA1REC.TA1TYPE;*/
   /* MOVE 'SL0ES7X ' TO TA1REC.TA1PGMNM;*/
   /* MOVE 'RAN OUT ' TO TA1REC.TA1LOCAT(1);*/
   /* MOVE 'OF LOCS ' TO TA1REC.TA1LOCAT(2);*/
   /* MOVE SL0EWX1.SL0EWRAN TO TA1REC.TA1LOCAT(3);*/
   /* MOVE 'TIMES   ' TO TA1REC.TA1LOCAT(4);*/
   /* MOVE SL0EWX1.SL0EWLZN TO TA1REC.TA1DBASE;*/
   /* MOVE SL0EWX1.SL0EWLOC TO TA1REC.TA1TBLVU;*/
   /* MOVE 'SL0ESP4' TO TA1REC.TA1TBLKE;*/
   /* SET ERRSQLCA EMPTY;*/
   /* CALL TA0020 TA1REC,ERRSQLCA;*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ESP4

// post #5 - concurrent update
Function SL0ESP5()

   /* ************************************************************/
   /* *** post data when concurrent update                    ****/
   /* *** note: code will continue to try to get location     ****/
   /* ************************************************************/

  TA1REC.TA1FUNC = "POST";
  TA1REC.TA1TYPE = "APPL";
  TA1REC.TA1PGMNM = "SL0ES7X ";
  TA1REC.TA1LOCAT[1] = "LOCATION";
  TA1REC.TA1LOCAT[2] = " PREVLY ";
  TA1REC.TA1LOCAT[4] = "UPDATED ";
  TA1REC.TA1LOCAT[4] = "SL0ESP5 ";
  TA1REC.TA1DBASE = "DEL.D IF";
  TA1REC.TA1TBLVU = "KEY BLNK";
  TA1REC.TA1TBLKE = SL5REC.SL5DATA;
  set ERRSQLCA empty;
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ESP5

// post #6 - loc not changed
Function SL0ESP6()

   /* ************************************************************/
   /* *** post data when error occurs resetting status code   ****/
   /* ************************************************************/

  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "SL0ES21 ";
  TA1REC.TA1LOCAT[1] = "BULK LOC";
  TA1REC.TA1LOCAT[2] = SL5REC.SL4ZONE;
  TA1REC.TA1LOCAT[3] = SL5REC.SL5LOCTN;
  TA1REC.TA1LOCAT[4] = "NOT CHNG";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VLOCAT01";
  TA1REC.TA1TBLKE = "SL0ESP6";
  set ERRSQLCA empty;
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ESP6

// inquiry : sz xlate : 0
Function SL0ESPI()

   /* ************************************************************/
   /* *** obtain the desired size description/size id (no.)   ****/
   /* *** using the std module:  SY1190                       ****/
   /* *** code the following before this is executed:         ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* ***   note: or setup during init. & use a comment       ****/
   /* ***   SYPREC.SYPFC:   PC = all valid sizes              ****/
   /* ***                   IE = int. sz id to desc.          ****/
   /* ***                   EI = desc. to int. sz id          ****/
   /* ***   SYPREC.SYPCMPSW: Y = compressed (first blank or   ****/
   /* ***                        zero is end of data)         ****/
   /* ***                    N = not compressed (positional)  ****/
   /* *** code the action for the following return codes:     ****/
   /* *** note: check the SYPREC.SYPRC (NOT sqlcode)          ****/
   /* ***      0 = successful                                 ****/
   /* ***      9 = deadlock                                   ****/
   /* ***     10 = not found                                  ****/
   /* ***  other = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** call sy1120                                         ****/
   /* *** note: func & compress sw setup prior to this sgrp   ****/
   /* ************************************************************/

  call "SY1190" (SQLCA, SYPREC) {isNoRefresh = yes, isExternal = yes};

  if (SYPREC.SYPRC == 0)
    return;
  end

  if (SYPREC.SYPRC == 9)
    return;
  end

  if (SYPREC.SYPRC == 10)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "SL0ESPI ";
  TA1REC.TA1LOCAT[1] = "SY1190  ";
  TA1REC.TA1LOCAT[3] = SYPREC.SYPRCX;
  TA1REC.TA1LOCAT[4] = "SZ XLATE";
  TA1REC.TA1DBASE = "MULTIPLE";
  TA1REC.TA1TBLVU = "DB VIEWS";
  TA1REC.TA1TBLKE = SYPREC.SYPKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ESPI

// process next empty loc.
Function SL0ESPN()

   /* ************************************************************/
   /* *** if this location's row is different from the last   ****/
   /* *** location's row, zero the temp saved loc. counter    ****/
   /* *** if this location's row has less than the max/row    ****/
   /* *** assigned to it and the the saved loc. ctr is less   ****/
   /* *** than the max saved value, add it to the saved loc tbl***/
   /* ************************************************************/

  SL0EWX1.SL0EWLOC = SL5REC.SL5LOCTN;

  if (SL0EWX1.SL0EWROW != SL0EWX1.SL0EWCRW
   || SL5REC.SL4ZONE != SL0EWX1.SL0EWCZN)
    SL0EWX1.SL0EWCZN = SL5REC.SL4ZONE;
    SL0EWX1.SL0EWCRW = SL0EWX1.SL0EWROW;
    SL0EWX1.SL0EWCTR = 0;
  end

  if (SL0EWC1.SL0EWCRC[SL0EWCIX] < SL0EWX1.SL0EWMLR)
                                   /* cnt < max loc.s/row*/
    if (SL0EWX1.SL0EWCTR < SL0EWX1.SL0EWMSR) /* ctr < max saved loc.s/row*/
      SL0EWS1.SL0EWSZN[SL0EWSIX] = SL5REC.SL4ZONE;
      SL0EWS1.SL0EWSLC[SL0EWSIX] = SL5REC.SL5LOCTN;
      SL0EWX1.SL0EWCTR = SL0EWX1.SL0EWCTR + 1;
      SL0EWX1.SL0EWSIX = SL0EWX1.SL0EWSIX + 1;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ESPN

// reset screen (clear)
Function SL0ESQ1()

   /* ************************************************************/
   /* *** "clear" map =  fld values, attributes & cursor      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  if (SL0EM110.SL0EMMPF != SL0EW01.SL0EWMPF)
    SL0EW01.SL0EWMPF = SL0EM110.SL0EMMPF; /* reset screen mpf value*/
  end
  converseLib.clearScreen();
  set SL0EM110 initial; /* resets entire screen*/

  SL0ESG1(); /* <=== setup map key fields*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0EM110.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0EM110.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0EM110.XXXTITLE = SLWREC.XXXTITLE;
  SL0EM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set SL0EW01 empty; /* appl. working storage area*/

  SLWREC.SLWFTMSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ESQ1

// reset screen (clear)
Function SL0ESQ2()

   /* ************************************************************/
   /* *** "clear" map =  fld values, attributes & cursor      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  SL0EW02.XGPCD = SL0EM210.XGPCD;

  converseLib.clearScreen();
  set SL0EM210 initial; /* resets entire screen*/

  SL0EM210.XWHCD = COMMAREA.XWHCD;
  SL0EM210.SL-LOC-SZ-IND = SL0EW02.SL-LOC-SZ-IND;
  SL0EM210.SL0EMMPF = SL0EW02.SL0EWMPF;
  SL0EM210.SL2PALET = "*****";
  SL0EM210.SL2CASE = "********";
  SL0EM210.SL0EMSLC = "   ";
  SL0EM210.SL0EMCAS = "        ";
  SL0EM210.SL8ITMFL = SL0EW02.SL8ITMFL;
  SL0EM210.SL8WOPY = "3";
  SL0EM210.XGPCD = SL0EW02.XGPCD;
  SL0EM210.SY2CLRID = "00 ";
  SL0EM210.XDMCD = "00";
  SL0EM210.XQACD = "01";
  SL0EM210.XPGCD = "00";
  SL0EM210.XSDCD = "000";
  SL0EM210.XSLCD = "000";
  SL0EM210.XUMCD = "01";
  SL0EM210.XOWCD = "00";
  SL0EM210.SL8WOGRP = SL0EW02.SL3NXWOG;
   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0EM210.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0EM210.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0EM210.XXXTITLE = SLWREC.XXXTITLE;
  SL0EM210.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set SL0EWC0 empty; /* appl. working storage area*/
  set SL0EW02 empty; /* appl. working storage area*/

  SLWREC.SLWFTMSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ESQ2

// reset screen (clear)
Function SL0ESQ3()

   /* ************************************************************/
   /* *** "clear" map =  fld values, attributes & cursor      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0EM310 initial; /* resets entire screen*/

  SL0ESG3(); /* <=== setup map key fields*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0EM310.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0EM310.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0EM310.XXXTITLE = SLWREC.XXXTITLE;
  SL0EM310.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set SL0EW03 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ESQ3

// data entry edits
Function SL0ESR2()

   /* ************************************************************/
   /* *** check for missing data fields                       ****/
   /* ************************************************************/

  SL0ESN2(); /* <=== data missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check for negative qnty data fields                 ****/
   /* ************************************************************/

  SL0ES24(); /* <=== data missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end
   /* ************************************************************/
   /* *** no missing fields: edit individual data fields      ****/
   /* ************************************************************/

  SL0ESO2(); /* <=== data field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational data field edits        ****/
   /* ************************************************************/

  SL0ESP2(); /* <=== data relational edits*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ESR2

// read loc for update
Function SL0ESRU()

   /* ************************************************************/
   /* *** read location for update and make sure location has ****/
   /* *** not been used ( = not empty)                        ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ESRU ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL5U1(); /* <=== read for upd w/ data*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (SL5REC.YLSCD == "01") /* empty location status*/
      SL0EWX1.SL0EWESW = "Y";
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SRUA";
      SLWREC.SLWMSGNO = 0032; /* <--- row updated since last read*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SRUB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SRUC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ESRU

// read setup from for update
Function SL0ESSS()

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ESSS ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSLS-SA-VSYLOC02(); /* <=== read unique for update*/

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SSSA";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes(&+100)*/
    SLWREC.XXXLOCID = "SSSB";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ESSS

// reset screen (empty)
Function SL0EST2()

   /* ************************************************************/
   /* *** "empty" map =  fld values only                      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0EM210 empty; /* resets entire screen*/

  SL0ESG2(); /* <=== setup map key fields*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0EM210.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0EM210.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0EM210.XXXTITLE = SLWREC.XXXTITLE;
  SL0EM210.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set SL0EW02 empty; /* appl. working storage area*/

  SLWREC.SLWFTMSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0EST2

// update database
Function SL0ESU2()

   /* ************************************************************/
   /* *** update the data bases with work orders.             ****/
   /* ***   determine new work order number                   ****/
   /* ***   insert work order header                          ****/
   /* ***   insert work order item                            ****/
   /* ***   update from location record                       ****/
   /* ***   update to location record                         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** initialize the save wo nbr array                    ****/
   /* ************************************************************/

  SL0ESZZ(); /* <=== init. save wo array*/

   /* ************************************************************/
   /* *** determine new work order number                     ****/
   /* ************************************************************/

  SL0ES2Y(); /* <=== determine new work order number*/
  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** insert work order header                            ****/
   /* ************************************************************/

  SL0ES2Z(); /* <=== insert work order header*/
  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** insert work order item                              ****/
   /* *** if the map qnty different than found qnty(user changed**/
   /* *** then insert only changed items, else insert all qntys **/
   /* *** note: s2q prev.ly 'got' the 1st prod. assig (sz)    ****/
   /* ***       so sz2 gets 'it' for the next  AND            ****/
   /* ***       must not be done if loop has ended            ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SL0EWC0.SL0EWNSS)
    if (SL0EM210.SL0EWWOQ[SLWIDX01] > 0)
      SL0ES21(); /* <=== insert work order item*/
      if (SLWREC.SLWERRSW == "Y")
        return;
      end
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
      if (SLWREC.SLWIDX01 <= SL0EWC0.SL0EWNSS)
        SL0ESZ2(); /* <=== check for sz prod assign break*/
        if (SLWREC.SLWERRSW == "Y")
          return;
        end
      end
    else
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
    end
  end

   /* ************************************************************/
   /* *** update from location record                         ****/
   /* ************************************************************/

  SL0ES22(); /* <=== update from location record*/
  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* ***  update to location record                          ****/
   /* ************************************************************/

  SL0ES23(); /* <=== update to location record*/
  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ESU2

// update the data bases
Function SL0ESU3()
                 /* UPDATE THE DATA BASES*/
   /* *************************************************************/
   /* ***   update the data bases using the work order grp    *****/
   /* ***   nbr and/or the work order number.                 *****/
   /* ***    if work order nbr(s) are entered, sl0ewfl1 = Y,  *****/
   /* ***   then update each work order nbr (1 - 10 ) times.  *****/
   /* ***    else                                             *****/
   /* ***   update the work order group number.               *****/
   /* ***   select the proper update function                 *****/
   /* *************************************************************/

  SLWREC.SLWIDX01 = 1; /* screen position of work orders*/

  if (SL0EW03.SL0EWFL1 == "Y") /* work orders are entered*/
    while (SLWREC.SLWIDX01 <= 10) /* process all ten work ordr pos*/
      if (SL0EM310.SL8WONBR[SLWIDX01] == 0) /* skip over blank wo nbrs*/
        SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
      else
        SL0ES3A(); /* update the work order using wo nbr*/
        if (SLWREC.SLWERRSW == "Y")
          return;
        end
        SL0EM310.SL8WONBR[SLWIDX01] = 0; /* if good update*/
        VGVar.handleSysLibraryErrors = 1;
        sysLib.commit(); /* and commit updates*/
        SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
      end
    end
  else /* update data bases using the wo grp nbr only*/
    SL0ES3B(); /* update the work order using wo grp*/
                                   /* nbr*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
    VGVar.handleSysLibraryErrors = 1;
    sysLib.commit(); /* commit updates*/
  end

   /* *************************************************************/
   /* ***   end of statement group                            *****/
   /* *************************************************************/

end // end SL0ESU3

// process A/I assignment pair
Function SL0ESUU()

   /* ************************************************************/
   /* *** for each assignment (pair) determine:               ****/
   /* *** if valid active record has been found:              ****/
   /* ***   if another valid active found, setup mult. error  ****/
   /* ***   otherwise, get next until new pair is detected    ****/
   /* *** if NO valid active record has been found:           ****/
   /* ***   if (1st) valid active found, save a/z/l values    ****/
   /* ***   otherwise, get next until new pair is detected    ****/
   /* *** note: this will work even if zn/loc entered         ****/
   /* ************************************************************/

  if (SL0EW01.SL0EWSAR > " ")
     /* ** valid active was previously found ***/
    if (SL7REC.XXXSTAT == "A")
       /* ** 1st of possible pair is active ***/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SUUA";
      SLWREC.SLWMSGNO = 0154;
                                   /* <--- multiple assignments msg*/
      SL0EM110.SL8TOZN[SLWIDX01] = SL0EW01.SL0EWSZN;
      SL0EM110.SL8TOLC[SLWIDX01] = SL0EW01.SL0EWSLC;
      set SL0EM110.SL8TOAR[SLWIDX01] cursor, bold;
      set SL0EM110.SL8TOZN[SLWIDX01] bold;
      set SL0EM110.SL8TOLC[SLWIDX01] bold;
      return;
    else
       /* ** 1st of possible pair is inactive ***/
      SL0EW01.SL0EWLAR = SL7REC.XARCD;
      SL0EW01.SL0EWLZN = SL7REC.SL4ZONE;
      SL0EW01.SL0EWLLC = SL7REC.SL5LOCTN;
       /* ** get required active of I/A pair - to skip ***/
      SL0ES1V(); /* fetch next prod assignment record*/
      if (SLWREC.SLWERRSW == "Y"
       || SQLCA.VAGen_SQLCODE == +100)
        return;
      end
      if (SL7REC.XARCD == SL0EW01.SL0EWLAR
       && SL7REC.SL4ZONE == SL0EW01.SL0EWLZN
       && SL7REC.SL5LOCTN == SL0EW01.SL0EWLLC)
         /* ** this was the required active of the current pair ***/
         /* ** get 1st of next pair ***/
        SL0ES1V(); /* fetch next prod assignment record*/
        if (SLWREC.SLWERRSW == "Y"
         || SQLCA.VAGen_SQLCODE == +100)
          return;
        end
      else
         /* ** next is not the required active of this pair ***/
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SUUB";
        SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
        SL0EM110.SL8TOZN[SLWIDX01] = SL0EW01.SL0EWSZN;
        SL0EM110.SL8TOLC[SLWIDX01] = SL0EW01.SL0EWSLC;
        set SL0EM110.SL8TOAR[SLWIDX01] cursor, bold;
        set SL0EM110.SL8TOZN[SLWIDX01] bold;
        set SL0EM110.SL8TOLC[SLWIDX01] bold;
        return;
      end
    end
  else
     /* ** valid active has not been found yet ***/
    if (SL7REC.XXXSTAT == "A")
       /* ** 1st of possible pair is valid active ***/
       /* ** save valid active values for processing later ***/
      SL0EW01.SL0EWSAR = SL7REC.XARCD;
      SL0EW01.SL0EWSZN = SL7REC.SL4ZONE;
      SL0EW01.SL0EWSLC = SL7REC.SL5LOCTN;
       /* ** save current values as last to detect new pair ***/
      SL0EW01.SL0EWLAR = SL7REC.XARCD;
      SL0EW01.SL0EWLZN = SL7REC.SL4ZONE;
      SL0EW01.SL0EWLLC = SL7REC.SL5LOCTN;
       /* ** get next to check for possible inactive - to skip ***/
      SL0ES1V(); /* fetch next prod assignment record*/
      if (SLWREC.SLWERRSW == "Y"
       || SQLCA.VAGen_SQLCODE == +100)
        return;
      end
      if (SL7REC.XARCD == SL0EW01.SL0EWLAR
       && SL7REC.SL4ZONE == SL0EW01.SL0EWLZN
       && SL7REC.SL5LOCTN == SL0EW01.SL0EWLLC)
         /* ** this was the inactive of the current pair ***/
         /* ** get 1st of next pair ***/
        SL0ES1V(); /* fetch next prod assignment record*/
        if (SLWREC.SLWERRSW == "Y"
         || SQLCA.VAGen_SQLCODE == +100)
          return;
        end
      else
         /* ** this was the 1st of the next pair ***/
      end
    else
       /* ** 1st of possible pair is inactive ***/
      SL0EW01.SL0EWLAR = SL7REC.XARCD;
      SL0EW01.SL0EWLZN = SL7REC.SL4ZONE;
      SL0EW01.SL0EWLLC = SL7REC.SL5LOCTN;
       /* ** get required active of I/A pair - to skip ***/
      SL0ES1V(); /* fetch next prod assignment record*/
      if (SLWREC.SLWERRSW == "Y"
       || SQLCA.VAGen_SQLCODE == +100)
        return;
      end
      if (SL7REC.XARCD == SL0EW01.SL0EWLAR
       && SL7REC.SL4ZONE == SL0EW01.SL0EWLZN
       && SL7REC.SL5LOCTN == SL0EW01.SL0EWLLC)
         /* ** this was the required active of the current pair ***/
         /* ** get 1st of next pair ***/
        SL0ES1V(); /* fetch next prod assignment record*/
        if (SLWREC.SLWERRSW == "Y"
         || SQLCA.VAGen_SQLCODE == +100)
          return;
        end
      else
         /* ** next is not the required active of this pair ***/
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SUUC";
        SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
        SL0EM110.SL8TOZN[SLWIDX01] = SL0EW01.SL0EWSZN;
        SL0EM110.SL8TOLC[SLWIDX01] = SL0EW01.SL0EWSLC;
        set SL0EM110.SL8TOAR[SLWIDX01] cursor, bold;
        set SL0EM110.SL8TOZN[SLWIDX01] bold;
        set SL0EM110.SL8TOLC[SLWIDX01] bold;
        return;
      end
    end
  end

   /* ************************************************************/
   /* *** end of statement group                              ****/
   /* ************************************************************/

end // end SL0ESUU

// validate style/color combo
Function SL0ESVJ()

   /* ************************************************************/
   /* *** style/color combination must exist                  ****/
   /* ************************************************************/

  SLWREC.SLWVERSW = "N";

  SL0ESCI(); /* <=== select style/color view*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    SLWREC.SLWVERSW = "Y";
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.XXXLOCID = "SVJA";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.SLWSKYSW = "N";
      SLWREC.XXXLOCID = "SVJB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811)
      SLWREC.XXXLOCID = "SVJC";
      SLWREC.SLWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
      return;
    end
    SLWREC.XXXLOCID = "SVJD";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ESVJ

// process A/I assignment pair
Function SL0ESVV()

   /* ************************************************************/
   /* *** for each assignment (pair) determine:               ****/
   /* *** if valid active record has been found:              ****/
   /* ***   if another valid active found, setup mult. error  ****/
   /* ***   otherwise, get next until new pair is detected    ****/
   /* *** if NO valid active record has been found:           ****/
   /* ***   if (1st) valid active found, save a/z/l values    ****/
   /* ***   otherwise, get next until new pair is detected    ****/
   /* *** note: this will work even if zn/loc entered         ****/
   /* ************************************************************/

  if (SL0EW01.SL0EWSAR > " ")
     /* ** valid active was previously found ***/
    if (SL7REC.XXXSTAT == "A")
       /* ** 1st of possible pair is active ***/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SVVA";
      SLWREC.SLWMSGNO = 0154;
                                   /* <--- multiple assignments msg*/
      SL0EM210.SL8TOLC = SL0EW01.SL0EWSLC;
      set SL0EM210.SL8TOAR cursor, bold;
      set SL0EM210.SL8TOZN bold;
      set SL0EM210.SL8TOLC bold;
      return;
    else
       /* ** 1st of possible pair is inactive ***/
      SL0EW01.SL0EWLAR = SL7REC.XARCD;
      SL0EW01.SL0EWLZN = SL7REC.SL4ZONE;
      SL0EW01.SL0EWLLC = SL7REC.SL5LOCTN;
       /* ** get required active of I/A pair - to skip ***/
      SL0ES2V(); /* fetch next prod assignment record*/
      if (SLWREC.SLWERRSW == "Y"
       || SQLCA.VAGen_SQLCODE == +100)
        return;
      end
      if (SL7REC.XARCD == SL0EW01.SL0EWLAR
       && SL7REC.SL4ZONE == SL0EW01.SL0EWLZN
       && SL7REC.SL5LOCTN == SL0EW01.SL0EWLLC)
         /* ** this was the required active of the current pair ***/
         /* ** get 1st of next pair ***/
        SL0ES2V(); /* fetch next prod assignment record*/
        if (SLWREC.SLWERRSW == "Y"
         || SQLCA.VAGen_SQLCODE == +100)
          return;
        end
      else
         /* ** next is not the required active of this pair ***/
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SVVB";
        SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
        SL0EM210.SL8TOLC = SL0EW01.SL0EWSLC;
        set SL0EM210.SL8TOAR cursor, bold;
        set SL0EM210.SL8TOZN bold;
        set SL0EM210.SL8TOLC bold;
        return;
      end
    end
  else
     /* ** valid active has not been found yet ***/
    if (SL7REC.XXXSTAT == "A")
       /* ** 1st of possible pair is valid active ***/
       /* ** save valid active values for processing later ***/
      SL0EW01.SL0EWSAR = SL7REC.XARCD;
      SL0EW01.SL0EWSZN = SL7REC.SL4ZONE;
      SL0EW01.SL0EWSLC = SL7REC.SL5LOCTN;
       /* ** save current values as last to detect new pair ***/
      SL0EW01.SL0EWLAR = SL7REC.XARCD;
      SL0EW01.SL0EWLZN = SL7REC.SL4ZONE;
      SL0EW01.SL0EWLLC = SL7REC.SL5LOCTN;
       /* ** get next to check for possible inactive - to skip ***/
      SL0ES2V(); /* fetch next prod assignment record*/
      if (SLWREC.SLWERRSW == "Y"
       || SQLCA.VAGen_SQLCODE == +100)
        return;
      end
      if (SL7REC.XARCD == SL0EW01.SL0EWLAR
       && SL7REC.SL4ZONE == SL0EW01.SL0EWLZN
       && SL7REC.SL5LOCTN == SL0EW01.SL0EWLLC)
         /* ** this was the inactive of the current pair ***/
         /* ** get 1st of next pair ***/
        SL0ES2V(); /* fetch next prod assignment record*/
        if (SLWREC.SLWERRSW == "Y"
         || SQLCA.VAGen_SQLCODE == +100)
          return;
        end
      else
         /* ** this was the 1st of the next pair ***/
      end
    else
       /* ** 1st of possible pair is inactive ***/
      SL0EW01.SL0EWLAR = SL7REC.XARCD;
      SL0EW01.SL0EWLZN = SL7REC.SL4ZONE;
      SL0EW01.SL0EWLLC = SL7REC.SL5LOCTN;
       /* ** get required active of I/A pair - to skip ***/
      SL0ES2V(); /* fetch next prod assignment record*/
      if (SLWREC.SLWERRSW == "Y"
       || SQLCA.VAGen_SQLCODE == +100)
        return;
      end
      if (SL7REC.XARCD == SL0EW01.SL0EWLAR
       && SL7REC.SL4ZONE == SL0EW01.SL0EWLZN
       && SL7REC.SL5LOCTN == SL0EW01.SL0EWLLC)
         /* ** this was the required active of the current pair ***/
         /* ** get 1st of next pair ***/
        SL0ES2V(); /* fetch next prod assignment record*/
        if (SLWREC.SLWERRSW == "Y"
         || SQLCA.VAGen_SQLCODE == +100)
          return;
        end
      else
         /* ** next is not the required active of this pair ***/
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SVVC";
        SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
        SL0EM210.SL8TOLC = SL0EW01.SL0EWSLC;
        set SL0EM210.SL8TOAR cursor, bold;
        set SL0EM210.SL8TOZN bold;
        set SL0EM210.SL8TOLC bold;
        return;
      end
    end
  end

   /* ************************************************************/
   /* *** end of statement group                              ****/
   /* ************************************************************/

end // end SL0ESVV

// process line re: inputs
Function SL0ESXE()

   /* ************************************************************/
   /* *** if one of these mutually exclusive situations is    ****/
   /* *** not executed setup a missing input error            ****/
   /* ************************************************************/

  if (SL0EM110.SL8FRAR[SLWIDX01] != " "
   && SL0EM110.SL8FRZN[SLWIDX01] != " "
   && SL0EM110.SL8FRLC[SLWIDX01] == " "
   && SL0EM110.SL8TOAR[SLWIDX01] == " "
   && SL0EM110.SL8TOZN[SLWIDX01] == " "
   && SL0EM110.SL8TOLC[SLWIDX01] == "      ")
    SL0EW01.SL0EWTLE = "N"; /* to location entered flag*/
    SL0ES1F(); /* UPDATE THE WORK ORDER OPTION 1*/
    if (SLWREC.SLWERRSW == "Y")
      TA5REC.TA5FNCCD = "P";
      call "TA0050" (SL0EWB1, TA5REC); /* purge tsq*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
    end
    return;
  end

  if (SL0EM110.SL8FRAR[SLWIDX01] != " "
   && SL0EM110.SL8FRZN[SLWIDX01] != " "
   && SL0EM110.SL8FRLC[SLWIDX01] != " "
   && SL0EM110.SL8TOAR[SLWIDX01] == " "
   && SL0EM110.SL8TOZN[SLWIDX01] == " "
   && SL0EM110.SL8TOLC[SLWIDX01] == "      ")
    SL0EW01.SL0EWTLE = "N"; /* to location entered flag*/
    SL0ES1F(); /* UPDATE THE WORK ORDER OPTION 1*/
    if (SLWREC.SLWERRSW == "Y")
      TA5REC.TA5FNCCD = "P";
      call "TA0050" (SL0EWB1, TA5REC); /* purge tsq*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
    end
    return;
  end

  if (SL0EM110.SL8FRAR[SLWIDX01] != " "
   && SL0EM110.SL8FRZN[SLWIDX01] != " "
   && SL0EM110.SL8FRLC[SLWIDX01] == " "
   && SL0EM110.SL8TOAR[SLWIDX01] != " "
   && SL0EM110.SL8TOZN[SLWIDX01] == " "
   && SL0EM110.SL8TOLC[SLWIDX01] == " ")
    SL0EW01.SL0EWTLE = "N"; /* to location entered flag*/
    SL0ES1F(); /* UPDATE THE WORK ORDER OPTION 1*/
    if (SLWREC.SLWERRSW == "Y")
      TA5REC.TA5FNCCD = "P";
      call "TA0050" (SL0EWB1, TA5REC); /* purge tsq*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
    end
    return;
  end

  if (SL0EM110.SL8FRAR[SLWIDX01] != " "
   && SL0EM110.SL8FRZN[SLWIDX01] != " "
   && SL0EM110.SL8FRLC[SLWIDX01] != " "
   && SL0EM110.SL8TOAR[SLWIDX01] != " "
   && SL0EM110.SL8TOZN[SLWIDX01] == " "
   && SL0EM110.SL8TOLC[SLWIDX01] == "      ")
    SL0EW01.SL0EWTLE = "N"; /* to location entered flag*/
    SL0ES1F(); /* UPDATE THE WORK ORDER OPTION 1*/
    if (SLWREC.SLWERRSW == "Y")
      TA5REC.TA5FNCCD = "P";
      call "TA0050" (SL0EWB1, TA5REC); /* purge tsq*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
    end
    return;
  end

  if (SL0EM110.SL8FRAR[SLWIDX01] != " "
   && SL0EM110.SL8FRZN[SLWIDX01] != " "
   && SL0EM110.SL8FRLC[SLWIDX01] == " "
   && SL0EM110.SL8TOAR[SLWIDX01] != " "
   && SL0EM110.SL8TOZN[SLWIDX01] != " "
   && SL0EM110.SL8TOLC[SLWIDX01] == "      ")
    SL0EW01.SL0EWTLE = "N"; /* to location entered flag*/
    SL0ES1G(); /* update the work order*/
    if (SLWREC.SLWERRSW == "Y")
      TA5REC.TA5FNCCD = "P";
      call "TA0050" (SL0EWB1, TA5REC); /* purge tsq*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
    end
    return;
  end

  if (SL0EM110.SL8FRAR[SLWIDX01] != " "
   && SL0EM110.SL8FRZN[SLWIDX01] != " "
   && SL0EM110.SL8FRLC[SLWIDX01] != " "
   && SL0EM110.SL8TOAR[SLWIDX01] != " "
   && SL0EM110.SL8TOZN[SLWIDX01] != " "
   && SL0EM110.SL8TOLC[SLWIDX01] == "      ")
    SL0EW01.SL0EWTLE = "N"; /* to location entered flag*/
    SL0ES1G(); /* update the work order*/
    if (SLWREC.SLWERRSW == "Y")
      TA5REC.TA5FNCCD = "P";
      call "TA0050" (SL0EWB1, TA5REC); /* purge tsq*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
    end
    return;
  end

  if (SL0EM110.SL8FRAR[SLWIDX01] != " "
   && SL0EM110.SL8FRZN[SLWIDX01] != " "
   && SL0EM110.SL8FRLC[SLWIDX01] != " "
   && SL0EM110.SL8TOAR[SLWIDX01] != " "
   && SL0EM110.SL8TOZN[SLWIDX01] != " "
   && SL0EM110.SL8TOLC[SLWIDX01] != "      ")
    SL0EW01.SL0EWTLE = "Y"; /* to location entered flag*/
    SL0ES1H(); /* update the work order*/
    if (SLWREC.SLWERRSW == "Y")
      TA5REC.TA5FNCCD = "P";
      call "TA0050" (SL0EWB1, TA5REC); /* purge tsq*/
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
    end
    return;
  end

   /* ************************************************************/
   /* *** since inputs were not those expected/coded for:     ****/
   /* *** setup missing fld error w/out hilites               ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "SXEA";
  SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
  set SL0EM110.SL8FRAR[SLWIDX01] cursor;

   /* ************************************************************/
   /* *** end of statement group                              ****/
   /* ************************************************************/
end // end SL0ESXE

// CAITEM processing
Function SL0ESY0()

   /* ************************************************************/
   /* *** if entered, use CAITEM data by first moving it to   ****/
   /* *** a ws field to make use of it with "redefines"       ****/
   /* *** note: CAITEM = character data as passed             ****/
   /* ************************************************************/

  SLWREC.CAITEM = COMMAREA.CAITEM;

  if (SLWREC.SLWCASNO > " ")
    SL0EM010.XMSLMSNO = SLWREC.SLWCASNO;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ESY0

// check for sz assign break
Function SL0ESZ2()

   /* ************************************************************/
   /* ***  if NOT picking, exit sgrp                          ****/
   /* ***  if 'to' location entered, exit sgrp                ****/
   /* ***  if next quantity = 0, exit sgrp                    ****/
   /* ***  get size's prod. assignment                        ****/
   /* ***  if same ar/zn/loc, exit sgrp                       ****/
   /* ***  otherwise, commit previous db inserts              ****/
   /* ***  if ar/zn/loc exists in ws tbl, use related wo nbr  ****/
   /* ***  otherwise, create new wo hdr (nbr)                 ****/
   /* ***  note: last wo item (size) has been written         ****/
   /* ************************************************************/

  if (SL0EW02.SL0EWTAT == "PR"
   && SL0EW02.SL0EWTZP == "PI"
   && SL0EM210.SL8TOLC == "      "
   && SL0EM210.SL0EWWOQ[SLWIDX01] > 0)
     /* ** next sentence ***/
  else
    return;
  end

   /* ************************************************************/
   /* ***  get size's prod. assignment                        ****/
   /* ************************************************************/

  SL0ES2U(); /* <=== get to sz/loc from prod. asgn*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL7REC.XARCD = SL0EW01.SL0EWSAR;
  SL7REC.SL4ZONE = SL0EW01.SL0EWSZN;
  SL7REC.SL5LOCTN = SL0EW01.SL0EWSLC;

   /* ************************************************************/
   /* ***  check this size's assignment vs current to asgn    ****/
   /* ************************************************************/

  if (SL0EW01.SL0EWSAR == VWOLHD02.SL8TOAR
   && SL0EW01.SL0EWSZN == VWOLHD02.SL8TOZN
   && SL0EW01.SL0EWSLC == VWOLHD02.SL8TOLC)
    return;
  end

  SL0ES22(); /* update fr location record*/
  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0ES23(); /* update to location record*/
  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  VGVar.handleSysLibraryErrors = 1;
  sysLib.commit();

   /* ************************************************************/
   /* ***  check previous wo's (if any) for this to sz/loc    ****/
   /* ************************************************************/

  if (SL0EW01.SL0EWLTX > 0)
    SLWREC.SLWIX = 1;
    while (SLWREC.SLWIX <= SL0EW01.SL0EWLTX)
      if (SL0EW01.SL0EWUAC[SLWIX] == SL0EW01.SL0EWSAR
       && SL0EW01.SL0EWUZC[SLWIX] == SL0EW01.SL0EWSZN
       && SL0EW01.SL0EWULC[SLWIX] == SL0EW01.SL0EWSLC)
         /* ** move statments*/
        VWOLHD02.SL8TOAR = SL0EW01.SL0EWUAC[SLWIX];
        VWOLHD02.SL8TOZN = SL0EW01.SL0EWUZC[SLWIX];
        VWOLHD02.SL8TOLC = SL0EW01.SL0EWULC[SLWIX];
        SL3REC.SL3NXWON = SL0EW01.SL0EWUWO[SLWIX];
        return;
      end
      SLWREC.SLWIX = SLWREC.SLWIX + 1;
    end
  end

   /* ************************************************************/
   /* ***  setup the next tbl index value & save this wo/loc  ****/
   /* ***  note: then save this index as last tbl index used  ****/
   /* ************************************************************/

  SLWREC.SLWIX = SL0EW01.SL0EWLTX + 1;
  SL0EW01.SL0EWUWO[SLWIX] = SL3REC.SL3NXWON;
  SL0EW01.SL0EWUAC[SLWIX] = VWOLHD02.SL8TOAR;
  SL0EW01.SL0EWUZC[SLWIX] = VWOLHD02.SL8TOZN;
  SL0EW01.SL0EWULC[SLWIX] = VWOLHD02.SL8TOLC;
  SL0EW01.SL0EWLTX = SLWREC.SLWIX;

  SL0ES2Y(); /* determine new work order number*/
  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0ES2Z(); /* insert wo header record*/
  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ESZ2

// init. prod. sz/loc tbl flds
Function SL0ESZZ()

   /* ************************************************************/
   /* *** init. prod. sz/loc table single & occurs flds       ****/
   /* ************************************************************/

  SL0EW01.SL0EWLTX = 0; /* last tbl index used*/

  SLWREC.SLWIX = 1;

  while (SLWREC.SLWIX <= 20)
    SL0EW01.SL0EWUWO[SLWIX] = 0; /* used wo nbr*/
    SL0EW01.SL0EWUAC[SLWIX] = " "; /* used area code*/
    SL0EW01.SL0EWUZC[SLWIX] = " "; /* used zone code*/
    SL0EW01.SL0EWULC[SLWIX] = " "; /* used location code*/
    SLWREC.SLWIX = SLWREC.SLWIX + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ESZZ

// get next wo nbr : sys ctl : 1
Function XSSL3G1()

   /* ************************************************************/
   /* *** get next w.o. number from:  sl sys ctl tbl          ****/
   /* *** using the module:  IO1500                           ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = db/severe error (same as below)            ****/
   /* ***     <0 = db/severe error (&-911)                    ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** get next w.o. number                                ****/
   /* *** note: IO process increments record zzzchgct by +1   ****/
   /* ***       but ID's row to update by the old zzzchgct    ****/
   /* ***       and increments the next number automatically  ****/
   /* ************************************************************/

  call "IO1500" ("G1", SQLCA, SL3REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSSL3G1 ";
  TA1REC.TA1LOCAT[1] = "IO1500  ";
  TA1REC.TA1LOCAT[3] = "GET NEXT";
  TA1REC.TA1LOCAT[4] = "WO NBR  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSLCTL01";
  TA1REC.TA1TBLKE = SL3REC.SL3KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL3G1

// replace : sys ctl : 1 : wo no.
Function XSSL3G2()

   /* ************************************************************/
   /* *** get next w.o. number from:  sl sys ctl tbl          ****/
   /* *** using the module:  IO1500                           ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = db/severe error (same as below)            ****/
   /* ***     <0 = db/severe error (&-911)                    ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** get next w.o. number                                ****/
   /* *** note: IO process increments record zzzchgct by +1   ****/
   /* ***       but ID's row to update by the old zzzchgct    ****/
   /* ***       and increments the next number automatically  ****/
   /* ************************************************************/

  call "IO1500" ("G2", SQLCA, SL3REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "POST";
  TA1REC.TA1PGMNM = "XSSL3G2 ";
  TA1REC.TA1LOCAT[1] = "IO1500  ";
  TA1REC.TA1LOCAT[3] = "GET NEXT";
  TA1REC.TA1LOCAT[4] = "WO NBR  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSLCTL01";
  TA1REC.TA1TBLKE = SL3REC.SL3KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL3G2

// inquiry : area/zone : 0
Function XSSL4I0()

   /* ************************************************************/
   /* *** select unique row from:  area/zone                  ****/
   /* *** using the std module:  IO1480                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -811 = duplicates found                           ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* ************************************************************/

  call "IO1480" ("S ", SQLCA, SL4REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -811)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSSL4I0 ";
  TA1REC.TA1LOCAT[1] = "IO1480  ";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VAZONE01";
  TA1REC.TA1TBLKE = SL4REC.SL4KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL4I0

// close : location : 1
Function XSSL5C1()

   /* ************************************************************/
   /* *** close select set of:  location table                ****/
   /* *** using the std module:  IO1490                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  call "IO1490" ("C1", SQLCA, SL5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSL5C1 ";
  TA1REC.TA1LOCAT[1] = "IO1490  ";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VLOCAT01";
  TA1REC.TA1TBLKE = SL5REC.SL5KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL5C1

// close : location : 2
Function XSSL5C2()

   /* ************************************************************/
   /* *** close select set of:  location table                ****/
   /* *** using the std module:  IO1490                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  call "IO1490" ("C2", SQLCA, SL5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSL5C2 ";
  TA1REC.TA1LOCAT[1] = "IO1490  ";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VLOCAT01";
  TA1REC.TA1TBLKE = SL5REC.SL5KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL5C2

// close : location : 3
Function XSSL5C3()

   /* ************************************************************/
   /* *** close select set of:  location table                ****/
   /* *** using the std module:  IO1490                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  call "IO1490" ("C3", SQLCA, SL5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSL5C3 ";
  TA1REC.TA1LOCAT[1] = "IO1490  ";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VLOCAT01";
  TA1REC.TA1TBLKE = SL5REC.SL5KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL5C3

// close : location : 4
Function XSSL5C4()

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  call "IO1490" ("C4", SQLCA, SL5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSL5C4 ";
  TA1REC.TA1LOCAT[1] = "IO1490  ";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VLOCAT01";
  TA1REC.TA1TBLKE = SL5REC.SL5KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL5C4

// fetch : location : 1
Function XSSL5F1()

   /* ************************************************************/
   /* *** fetch next row from:  location                      ****/
   /* *** using the std module:  IO1490                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ************************************************************/

  call "IO1490" ("N1", SQLCA, SL5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    XSSL5C1(); /* <=== std close cursor*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSL5F1 ";
  TA1REC.TA1LOCAT[1] = "IO1490  ";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VLOCAT01";
  TA1REC.TA1TBLKE = SL5REC.SL5KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL5F1

// fetch : location : 2
Function XSSL5F2()

   /* ************************************************************/
   /* *** fetch next row from:  location                      ****/
   /* *** using the std module:  IO1490                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ************************************************************/

  call "IO1490" ("N2", SQLCA, SL5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    XSSL5C2(); /* <=== std close cursor*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSL5F2 ";
  TA1REC.TA1LOCAT[1] = "IO1490  ";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VLOCAT01";
  TA1REC.TA1TBLKE = SL5REC.SL5KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL5F2

// fetch : location : 3
Function XSSL5F3()

   /* ************************************************************/
   /* *** fetch next row from:  location                      ****/
   /* *** using the std module:  IO1490                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ************************************************************/

  call "IO1490" ("N3", SQLCA, SL5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    XSSL5C3(); /* <=== std close cursor*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSL5F3 ";
  TA1REC.TA1LOCAT[1] = "IO1490  ";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VLOCAT01";
  TA1REC.TA1TBLKE = SL5REC.SL5KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL5F3

// fetch : location : 3
Function XSSL5F4()

   /* ************************************************************/
   /* *** fetch next row from:  location                      ****/
   /* *** using the std module:  IO1490                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ************************************************************/

  call "IO1490" ("N4", SQLCA, SL5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    XSSL5C4(); /* <=== std close cursor*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSL5F4 ";
  TA1REC.TA1LOCAT[1] = "IO1490  ";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VLOCAT01";
  TA1REC.TA1TBLKE = SL5REC.SL5KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL5F4

// inquiry : location : 0
Function XSSL5I0()

   /* ************************************************************/
   /* *** select unique row from:  location table             ****/
   /* *** using the std module:  IO1490                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -811 = duplicates found                           ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* ************************************************************/

  call "IO1490" ("S ", SQLCA, SL5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -811)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSSL5I0 ";
  TA1REC.TA1LOCAT[1] = "IO1490  ";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VLOCAT01";
  TA1REC.TA1TBLKE = SL5REC.SL5KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL5I0

// replace : location : 0
Function XSSL5R0()

   /* ************************************************************/
   /* *** replace unique row in:  location                    ****/
   /* *** using the std module:  IO1490                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = concurrent update - re:                    ****/
   /* ***          deleted since last read (rec blanked out)  ****/
   /* ***          updated since last read (new data in rec)  ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** replace row                                         ****/
   /* *** note: IO process increments record zzzchgct by +1   ****/
   /* ***       but ID's row to update by the old zzzchgct    ****/
   /* ************************************************************/

  SL5REC.ZZZCHGDT = X2CREC.X2CCURDT;
  SL5REC.ZZZCHGTM = X3CREC.X3CCURST;

  call "IO1490" ("U ", SQLCA, SL5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
     /* ************************************************************/
     /* *** select the original row without a change count      ****/
     /* *** note: select unique does NOT use zzzchgct           ****/
     /* *** note: this puts current version of data in record   ****/
     /* ***       or blank out record layout = deleted          ****/
     /* ************************************************************/
    XSSL5I0(); /* <=== select unique row*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == +100)
      SL5REC.SL5DATA = " ";
      return;
    end
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSSL5R0 ";
  TA1REC.TA1LOCAT[1] = "IO1490  ";
  TA1REC.TA1LOCAT[3] = "REPLACE ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VLOCAT01";
  TA1REC.TA1TBLKE = SL5REC.SL5KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL5R0

// setinq : location : 1
Function XSSL5S1()

   /* ************************************************************/
   /* *** select set of rows from:  location                  ****/
   /* *** using the std module:  IO1490                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique field values for:            ****/
   /* ***   xwhcd                                             ****/
   /* ***   xarcd                                             ****/
   /* *** the following may be used with a wild card (*):     ****/
   /* ***   sl4zone                                           ****/
   /* ***   yltcd                                             ****/
   /* ***   ylscd                                             ****/
   /* *** the order by for this select set is:                ****/
   /* ***   xwhcd                                             ****/
   /* ***   xarcd                                             ****/
   /* ***   sl4zone                                           ****/
   /* ***   sl5loctn                                          ****/
   /* ***   yspcd                                             ****/
   /* ************************************************************/

  call "IO1490" ("S1", SQLCA, SL5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "XSSL5S1 ";
    TA1REC.TA1LOCAT[1] = "IO1490  ";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VLOCAT01";
    TA1REC.TA1TBLKE = SL5REC.SL5KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* *** note: fetch handles return code correctly           ****/
   /* ************************************************************/

  XSSL5F1(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL5S1

// setinq : location : 2
Function XSSL5S2()

   /* ************************************************************/
   /* *** select set of rows from:  location                  ****/
   /* *** using the std module:  IO1490                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique field values for:            ****/
   /* ***   xwhcd                                             ****/
   /* ***   xarcd                                             ****/
   /* *** the following may be used with a wild card (*):     ****/
   /* ***   sl4zone                                           ****/
   /* ***   yltcd                                             ****/
   /* ***   ylscd                                             ****/
   /* *** the order by for this select set is:                ****/
   /* ***   xwhcd                                             ****/
   /* ***   yspcd                                             ****/
   /* ***   sl5stcdt                                          ****/
   /* ************************************************************/

  call "IO1490" ("S2", SQLCA, SL5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "XSSL5S2 ";
    TA1REC.TA1LOCAT[1] = "IO1490  ";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VLOCAT01";
    TA1REC.TA1TBLKE = SL5REC.SL5KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* *** note: fetch handles return code correctly           ****/
   /* ************************************************************/

  XSSL5F2(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL5S2

// setinq : location : 3
Function XSSL5S3()

   /* ************************************************************/
   /* *** select set of rows from:  location                  ****/
   /* *** using the std module:  IO1490                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique field values for:            ****/
   /* ***   xwhcd                                             ****/
   /* ***   xarcd                                             ****/
   /* *** the following may be used with a wild card (*):     ****/
   /* ***   sl4zone                                           ****/
   /* ***   yltcd                                             ****/
   /* ***   ylscd                                             ****/
   /* *** the order by for this select set is:                ****/
   /* ***   xwhcd                                             ****/
   /* ***   yspcd                                             ****/
   /* ***   sl5stcdt                                          ****/
   /* ************************************************************/

  call "IO1490" ("S3", SQLCA, SL5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "XSSL5S3 ";
    TA1REC.TA1LOCAT[1] = "IO1490  ";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VLOCAT01";
    TA1REC.TA1TBLKE = SL5REC.SL5KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* *** note: fetch handles return code correctly           ****/
   /* ************************************************************/

  XSSL5F3(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL5S3

// setinq : location : 4
Function XSSL5S4()

   /* ************************************************************/
   /* *** select set of rows from:  vlocat01                  ****/
   /* *** using the std module:  IO1490                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique field values for: (vlocat01) ****/
   /* ***   xwhcd                                             ****/
   /* ***   xarcd                                             ****/
   /* *** the following may be used with a wild card (*):     ****/
   /* ***   sl4zone                                           ****/
   /* ***   yltcd                                             ****/
   /* ***   ylscd                                             ****/
   /* *** the order by for this select set is:                ****/
   /* ***   xwhcd                                             ****/
   /* ***   yspcd                                             ****/
   /* ***   sl5stcdt                                          ****/
   /* ************************************************************/

  call "IO1490" ("S4", SQLCA, SL5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "XSSL5S4 ";
    TA1REC.TA1LOCAT[1] = "IO1490  ";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VLOCAT01";
    TA1REC.TA1TBLKE = SL5REC.SL5KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* *** note: fetch handles return code correctly           ****/
   /* ************************************************************/

  XSSL5F4(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL5S4

// update : location : 1
Function XSSL5U1()

   /* ************************************************************/
   /* *** get unique row for update of:  location             ****/
   /* *** using the std module:  IO1490                       ****/
   /* *** note: IO process DOES move data to record           ****/
   /* ***       therefore, at this time (w/IO modules)        ****/
   /* ***       this will execute the std select unique sgrp  ****/
   /* ***       and                                           ****/
   /* ***       this sgrp should be used/executed so that     ****/
   /* ***       future conversion to native CSP DB2 will      ****/
   /* ***       only have to change/add code in this sgrp     ****/
   /* ***       and regenerate all applications               ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found (does not use zzzchgct)          ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

  XSSL5I0(); /* <=== std select unique*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL5U1

// add : prod location : 1
Function XSSL6A1()

   /* ************************************************************/
   /* *** add unique row to:  product loaction                ****/
   /* *** using the std module:  VSYLOC02                     ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -803 = adding duplicate row                       ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* *** note: 0 return code means record already exists     ****/
   /* ***       = setup -803 return code                      ****/
   /* ************************************************************/

   /* XSSL6I1;                          /* <=== select unique row*/
  XSSLS-SA-VSYLOC02();

  if (SQLCA.VAGen_SQLCODE == 0)
    SQLCA.VAGen_SQLCODE = -803;
    return;
  end

  if (SQLCA.VAGen_SQLCODE < 0)
    return;
  end

   /* ************************************************************/
   /* *** insert row (previous +100 = doesn't exist)          ****/
   /* *** note: IO process initializes zzzchgct to 0          ****/
   /* ************************************************************/

  VSYLOC02.ZZZCHGDT = X2CREC.X2CCURDT;
  VSYLOC02.ZZZCHGTM = X3CREC.X3CCURST;

  call "VSYLOC02" ("A ", SQLCA, VSYLOC02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSSY02A1";
  TA1REC.TA1LOCAT[1] = "VSYLOC02";
  TA1REC.TA1LOCAT[3] = "ADD     ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYLOC02";
  TA1REC.TA1TBLKE = VSYLOC02.VSYLOC02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL6A1

// close : prod loc asgmnt : 8
Function XSSL7C8()

   /* ************************************************************/
   /* *** close select set of:  product location assignment   ****/
   /* *** using the std module:  IO1550                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "C8";

  call "IO1550" (SLVREC, SQLCA, SL7REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSL7C8 ";
  TA1REC.TA1LOCAT[1] = "IO1550  ";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYASG01";
  TA1REC.TA1TBLKE = SL7REC.SL7KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL7C8

// fetch : prod loc asgmnt : 8
Function XSSL7F8()

   /* ************************************************************/
   /* *** fetch next row from:  product location assignment   ****/
   /* *** using the std module:  IO1550                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ***       but w/these io mods the sgrp will close       ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "N8";

  call "IO1550" (SLVREC, SQLCA, SL7REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    XSSL7C8(); /* <=== std close cursor*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSL7F8 ";
  TA1REC.TA1LOCAT[1] = "IO1550  ";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYASG01";
  TA1REC.TA1TBLKE = SL7REC.SL7KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL7F8

// setinq : prod loc asgmnt : 8
Function XSSL7S8()

   /* ************************************************************/
   /* *** select set of rows from:  product assignment        ****/
   /* *** using the std module:  IO1550                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** as of 9/30/87 = needs revision                      ****/
   /* *** select set with unique field values for:            ****/
   /* ***   xwhcd                                             ****/
   /* ***   xarcd                                             ****/
   /* ***   sl4zone                                           ****/
   /* ***   sl5loctn                                          ****/
   /* ***   xgpcd                                             ****/
   /* ***   sy1stnbr                                          ****/
   /* ***   sy2clrid                                          ****/
   /* ***   xdmcd                                             ****/
   /* ***   xqacd                                             ****/
   /* ***   xsdcd                                             ****/
   /* ***   xsacd                                             ****/
   /* ***   xpgcd                                             ****/
   /* ***   xumcd                                             ****/
   /* ***   xowcd                                             ****/
   /* *** the following may be used with a wild card (*):     ****/
   /* ***   sy5szid                                           ****/
   /* ***   sl7effdt                                          ****/
   /* ***   xxxstat                                           ****/
   /* *** the order by for this select set is:                ****/
   /* ***   xwhcd                                             ****/
   /* ***   xarcd                                             ****/
   /* ***   sl4zone                                           ****/
   /* ***   sl5loctn                                          ****/
   /* ***   xgpcd                                             ****/
   /* ***   sy1stnbr                                          ****/
   /* ***   sy2clrid                                          ****/
   /* ***   xdmcd                                             ****/
   /* ***   xqacd                                             ****/
   /* ***   xsdcd                                             ****/
   /* ***   xsacd                                             ****/
   /* ***   xpgcd                                             ****/
   /* ***   xumcd                                             ****/
   /* ***   xowcd                                             ****/
   /* ***   sy5szid                                           ****/
   /* ***   sl7effdt (descending)                             ****/
   /* ***   xxxstat                                           ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "S8";

  call "IO1550" (SLVREC, SQLCA, SL7REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "XSSL7S8 ";
    TA1REC.TA1LOCAT[1] = "IO1550  ";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VSYASG01";
    TA1REC.TA1TBLKE = SL7REC.SL7KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* *** note: fetch handles return code correctly           ****/
   /* ************************************************************/

  XSSL7F8(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL7S8

// add : w.o. 'l' itm : 0
Function XSSL9A0()

   /* ************************************************************/
   /* *** add unique row to:  w.o. 'l' itm                    ****/
   /* *** using the std module:  IO1520                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -803 = severe error re: del.d select unique       ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* *** note: IO process initializes zzzchgct to 0          ****/
   /* *** select unique row deleted 3/22/88 w. jones          ****/
   /* ************************************************************/

  SL9REC.ZZZCHGDT = X2CREC.X2CCURDT;
  SL9REC.ZZZCHGTM = X3CREC.X3CCURST;

  call "IO1520" ("A ", SQLCA, SL9REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSSL9A0 ";
  TA1REC.TA1LOCAT[1] = "IO1520  ";
  TA1REC.TA1LOCAT[3] = "ADD     ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VWOLIT01";
  TA1REC.TA1TBLKE = SL9REC.SL9KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL9A0

// close : w.o. 'l' itm : 1
Function XSSL9C1()

   /* ************************************************************/
   /* *** close select set of:  w.o. 'l' itm                  ****/
   /* *** using the std module:  IO1520                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  call "IO1520" ("C1", SQLCA, SL9REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSL9C1 ";
  TA1REC.TA1LOCAT[1] = "IO1520  ";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VWOLIT01";
  TA1REC.TA1TBLKE = SL9REC.SL9KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL9C1

// fetch : w.o. 'l' itm : 1
Function XSSL9F1()

   /* ************************************************************/
   /* *** fetch next row from:  w.o. 'l' itm                  ****/
   /* *** using the std module:  IO1520                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ***       but w/these io mods the sgrp will close       ****/
   /* ************************************************************/

  call "IO1520" ("N1", SQLCA, SL9REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    XSSL9C1(); /* <=== std close cursor*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSL9F1 ";
  TA1REC.TA1LOCAT[1] = "IO1520  ";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VWOLIT01";
  TA1REC.TA1TBLKE = SL9REC.SL9KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL9F1

// setinq : w.o. 'l' itm : 1
Function XSSL9S1()

   /* ************************************************************/
   /* *** select set of rows from:  w.o. 'l' itm              ****/
   /* *** using the std module:  IO1520                       ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique field values for:            ****/
   /* ***   xwhcd                                             ****/
   /* ***   sl8wonbr                                          ****/
   /* *** the following may be used with a wild card (*):     ****/
   /* ***   none                                              ****/
   /* *** the order by for this select set is:                ****/
   /* ***   xwhcd                                             ****/
   /* ***   sl8wonbr                                          ****/
   /* ***   sy5szid                                           ****/
   /* ************************************************************/

  call "IO1520" ("S1", SQLCA, SL9REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "XSSL9S1 ";
    TA1REC.TA1LOCAT[1] = "IO1520  ";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VWOLIT01";
    TA1REC.TA1TBLKE = SL9REC.SL9KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* *** note: fetch handles return code correctly           ****/
   /* ************************************************************/

  XSSL9F1(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL9S1

// add : prod location : a
Function XSSLS-A-VSYLOC02()

   /* ************************************************************/
   /* *** add unique row to:  product location view 2         ****/
   /* *** using the std module:  vsyloc02                     ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -803 = adding duplicate row                       ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* *** note: 0 return code means record already exists     ****/
   /* ***       = setup -803 return code                      ****/
   /* ************************************************************/

   /* <=== select unique row*/
  XSSLS-SA-VSYLOC02();
  if (SQLCA.VAGen_SQLCODE == 0)
    SQLCA.VAGen_SQLCODE = -803;
    return;
  end

  if (SQLCA.VAGen_SQLCODE < 0)
    return;
  end

   /* ************************************************************/
   /* *** insert row (previous +100 = doesn't exist)          ****/
   /* *** note: IO process initializes zzzchgct to 0          ****/
   /* ************************************************************/

  VSYLOC02.ZZZCHGDT = X2CREC.X2CCURDT;
  VSYLOC02.ZZZCHGTM = X3CREC.X3CCURST;

  call "VSYLOC02" ("A ", SQLCA, VSYLOC02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSSLOCA ";
  TA1REC.TA1LOCAT[1] = "VSYLOC02";
  TA1REC.TA1LOCAT[3] = "ADD     ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYLOC02";
  TA1REC.TA1TBLKE = VSYLOC02.VSYLOC02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSLS-A-VSYLOC02

// add : w.o. 'l' hdr : 0
Function XSSLS-A-VWOLHD02()

   /* ************************************************************/
   /* *** add unique row to:  w.o. 'l' hdr                    ****/
   /* *** using the std module:  VWOLHD02                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -803 = severe error re: del.d select unique       ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* *** note: IO process initializes zzzchgct to 0          ****/
   /* *** select unique row = deleted 3/22/88 w. jones        ****/
   /* ************************************************************/

  VWOLHD02.ZZZCHGDT = X2CREC.X2CCURDT;
  VWOLHD02.ZZZSDT = X2CREC.X2CCURDT;
  VWOLHD02.ZZZCHGTM = X3CREC.X3CCURST;
  VWOLHD02.SL8CRTBY = COMMAREA.CAUSERID;
  VWOLHD02.SL8UPDBY = COMMAREA.CAUSERID;

  SLVREC.SLVFNC = "A ";

  call "VWOLHD02" (SLVREC, SQLCA, VWOLHD02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSWHD02A";
  TA1REC.TA1LOCAT[1] = "VWOLHD02";
  TA1REC.TA1LOCAT[3] = "ADD     ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VWOLHD02";
  TA1REC.TA1TBLKE = VWOLHD02.WOLHD02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSLS-A-VWOLHD02

// close : prod location : C1
Function XSSLS-C1-VSYLOC02()

   /* ************************************************************/
   /* *** close select set of:  product location table        ****/
   /* *** using the std module:  VSYLOC02                     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  call "VSYLOC02" ("C1", SQLCA, VSYLOC02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSLOCC1";
  TA1REC.TA1LOCAT[1] = "VSYLOC02";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYLOC02";
  TA1REC.TA1TBLKE = VSYLOC02.VSYLOC02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSLS-C1-VSYLOC02

// close : w.o. 'l' hdr : 1
Function XSSLS-C1-VWOLHD02()

   /* ************************************************************/
   /* *** close select set of:  w.o. 'l' hdr                  ****/
   /* *** using the std module:  VWOLHD02                     ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "C1";

  call "VWOLHD02" (SLVREC, SQLCA, VWOLHD02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSHD02C1";
  TA1REC.TA1LOCAT[1] = "VWOLHD02";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VWOLHD02";
  TA1REC.TA1TBLKE = VWOLHD02.WOLHD02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSLS-C1-VWOLHD02

// close : w.o. 'l' hdr : 2
Function XSSLS-C2-VWOLHD02()

   /* ************************************************************/
   /* *** close select set of:  w.o. 'l' hdr                  ****/
   /* *** using the std module:  VWOLHD02                     ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "C2";

  call "VWOLHD02" (SLVREC, SQLCA, VWOLHD02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSHD02C2";
  TA1REC.TA1LOCAT[1] = "VWOLHD02";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VWOLHD02";
  TA1REC.TA1TBLKE = VWOLHD02.WOLHD02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSLS-C2-VWOLHD02

// close : prod location : c3
Function XSSLS-C3-VSYLOC02()

   /* ************************************************************/
   /* *** close select set of:  product location table        ****/
   /* *** using the std module:  VSYLOC02                     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  call "VSYLOC02" ("C3", SQLCA, VSYLOC02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSLOCC3";
  TA1REC.TA1LOCAT[1] = "VSYLOC02";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYLOC02";
  TA1REC.TA1TBLKE = VSYLOC02.VSYLOC02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSLS-C3-VSYLOC02

// close : product location : c4
Function XSSLS-C4-VSYLOC02()

   /* ************************************************************/
   /* *** close select set of:  product location table        ****/
   /* *** using the std module:  vsyloc02                     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  call "VSYLOC02" ("C4", SQLCA, VSYLOC02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSLOCC4";
  TA1REC.TA1LOCAT[1] = "VSYLOC02";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYLOC02";
  TA1REC.TA1TBLKE = VSYLOC02.VSYLOC02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSLS-C4-VSYLOC02

// close : prod location : c5
Function XSSLS-C5-VSYLOC02()

   /* ************************************************************/
   /* *** close select set of:  product location table        ****/
   /* *** using the std module:  VSYLOC02                     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  call "VSYLOC02" ("C5", SQLCA, VSYLOC02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSLOCC5";
  TA1REC.TA1LOCAT[1] = "VSYLOC02";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYLOC02";
  TA1REC.TA1TBLKE = VSYLOC02.VSYLOC02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSLS-C5-VSYLOC02

// close : w.o. 'l' hdr : 5
Function XSSLS-C5-VWOLHD02()

   /* ************************************************************/
   /* *** close select set of:  w.o. 'l' hdr                  ****/
   /* *** using the std module:  VWOLHD02                     ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "C5";

  call "VWOLHD02" (SLVREC, SQLCA, VWOLHD02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSHD02C5";
  TA1REC.TA1LOCAT[1] = "VWOLHD02";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VWOLHD02";
  TA1REC.TA1TBLKE = VWOLHD02.WOLHD02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSLS-C5-VWOLHD02

// close : w.o. 'l' hdr : 6
Function XSSLS-C6-VWOLHD02()

   /* ************************************************************/
   /* *** close select set of:  w.o. 'l' hdr                  ****/
   /* *** using the std module:  VWOLHD02                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "C6";

  call "VWOLHD02" (SLVREC, SQLCA, VWOLHD02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSHD02C6";
  TA1REC.TA1LOCAT[1] = "VWOLHD02";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VWOLHD02";
  TA1REC.TA1TBLKE = VWOLHD02.WOLHD02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSLS-C6-VWOLHD02

// delete : prod location : 0
Function XSSLS-D-VSYLOC02()

   /* ************************************************************/
   /* *** delete unique row in:  STYLE LOCATION TABLE         ****/
   /* *** using the std module:  VSYLOC02                     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = deleted since last read                    ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** delete row                                          ****/
   /* ************************************************************/

  call "VSYLOC02" ("D ", SQLCA, VSYLOC02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100
   || SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSSY02D0";
  TA1REC.TA1LOCAT[1] = "VSYLOC02";
  TA1REC.TA1LOCAT[3] = "DELETE  ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYLOC02";
  TA1REC.TA1TBLKE = VSYLOC02.VSYLOC02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSLS-D-VSYLOC02

// delete : prod location : da
Function XSSLS-DA-VSYLOC02()

   /* ************************************************************/
   /* *** delete unique row in:  product location table       ****/
   /* *** using the std module:  VSYLOC02                     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = deleted since last read                    ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** delete row                                          ****/
   /* ************************************************************/

  call "VSYLOC02" ("DA", SQLCA, VSYLOC02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100
   || SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSSLOCDA";
  TA1REC.TA1LOCAT[1] = "VSYLOC02";
  TA1REC.TA1LOCAT[3] = "DELETE  ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYLOC02";
  TA1REC.TA1TBLKE = VSYLOC02.VSYLOC02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSLS-DA-VSYLOC02

// fetch : prod location : 1
Function XSSLS-N1-VSYLOC02()

   /* ************************************************************/
   /* *** fetch next row from:  STYLE LOCATION TABLE          ****/
   /* *** using the std module:  VSYLOC02                     ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ***       but w/these io mods the sgrp will close       ****/
   /* ************************************************************/

  call "VSYLOC02" ("N1", SQLCA, VSYLOC02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    XSSLS-C1-VSYLOC02(); /* <=== std close cursor*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSY02N1";
  TA1REC.TA1LOCAT[1] = "VSYLOC02";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYLOC02";
  TA1REC.TA1TBLKE = VSYLOC02.VSYLOC02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSLS-N1-VSYLOC02

// fetch : w.o. 'l' hdr : 1
Function XSSLS-N1-VWOLHD02()

   /* ************************************************************/
   /* *** fetch next row from:  w.o. 'l' hdr                  ****/
   /* *** using the std module:  VWOLHD02                     ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ***       but w/these io mods the sgrp will close       ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "N1";

  call "VWOLHD02" (SLVREC, SQLCA, VWOLHD02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    move VWOLHD02 to VWOLHD02 withV60Compat;
    move SLVREC to SLVREC withV60Compat;

    XSSLS-C1-VWOLHD02(); /* <=== std close cursor*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSHD02N1";
  TA1REC.TA1LOCAT[1] = "VWOLHD02";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VWOLHD02";
  TA1REC.TA1TBLKE = VWOLHD02.WOLHD02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSLS-N1-VWOLHD02

// fetch : w.o. 'l' hdr : 2
Function XSSLS-N2-VWOLHD02()

   /* ************************************************************/
   /* *** fetch next row from:  w.o. 'l' hdr                  ****/
   /* *** using the std module:  VWOLHD02                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ***       but w/these io mods the sgrp will close       ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "N2";

  call "VWOLHD02" (SLVREC, SQLCA, VWOLHD02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    XSSLS-C2-VWOLHD02(); /* <=== std close cursor*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSHD02N2";
  TA1REC.TA1LOCAT[1] = "VWOLHD02";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VWOLHD02";
  TA1REC.TA1TBLKE = VWOLHD02.WOLHD02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSLS-N2-VWOLHD02

// fetch : prod location : n3
Function XSSLS-N3-VSYLOC02()

   /* ************************************************************/
   /* *** fetch next row from:  product location              ****/
   /* *** using the std module:  VSYLOC02                     ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ***       but w/these io mods the sgrp will close       ****/
   /* ************************************************************/

  call "VSYLOC02" ("N3", SQLCA, VSYLOC02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    XSSLS-C3-VSYLOC02(); /* <=== std close cursor*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSLOCN3";
  TA1REC.TA1LOCAT[1] = "VSYLOC02";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYLOC02";
  TA1REC.TA1TBLKE = VSYLOC02.VSYLOC02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSLS-N3-VSYLOC02

// fetch : prod location : n4
Function XSSLS-N4-VSYLOC02()

   /* ************************************************************/
   /* *** fetch next row from:  product location              ****/
   /* *** using the std module:  VSYLOC02                     ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ***       but w/these io mods the sgrp will close       ****/
   /* ************************************************************/

  call "VSYLOC02" ("N4", SQLCA, VSYLOC02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    XSSLS-C4-VSYLOC02(); /* <=== std close cursor*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSLOCN4";
  TA1REC.TA1LOCAT[1] = "VSYLOC02";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYLOC02";
  TA1REC.TA1TBLKE = VSYLOC02.VSYLOC02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSLS-N4-VSYLOC02

// fetch : prod location : n5
Function XSSLS-N5-VSYLOC02()

   /* ************************************************************/
   /* *** fetch next row from:  product location              ****/
   /* *** using the std module:  VSYLOC02                     ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ***       but w/these io mods the sgrp will close       ****/
   /* ************************************************************/

  call "VSYLOC02" ("N5", SQLCA, VSYLOC02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    XSSLS-C5-VSYLOC02(); /* <=== std close cursor*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSLOCN5";
  TA1REC.TA1LOCAT[1] = "VSYLOC02";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYLOC02";
  TA1REC.TA1TBLKE = VSYLOC02.VSYLOC02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSLS-N5-VSYLOC02

// fetch : w.o. 'l' hdr : 5
Function XSSLS-N5-VWOLHD02()

   /* ************************************************************/
   /* *** fetch next row from:  w.o. 'l' hdr                  ****/
   /* *** using the std module:  VWOLHD02                     ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ***       but w/these io mods the sgrp will close       ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "N5";

  call "VWOLHD02" (SLVREC, SQLCA, VWOLHD02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    XSSLS-C5-VWOLHD02(); /* <=== std close cursor*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XWHD02N5";
  TA1REC.TA1LOCAT[1] = "VWOLHD02";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VWOLHD02";
  TA1REC.TA1TBLKE = VWOLHD02.WOLHD02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSLS-N5-VWOLHD02

// fetch : w.o. 'l' hdr : 6
Function XSSLS-N6-VWOLHD02()

   /* ************************************************************/
   /* *** fetch next row from:  w.o. 'l' hdr                  ****/
   /* *** using the std module:  VWOLHD02                     ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ***       but w/these io mods the sgrp will close       ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "N6";

  call "VWOLHD02" (SLVREC, SQLCA, VWOLHD02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    XSSLS-C6-VWOLHD02(); /* <=== std close cursor*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSRM02N6";
  TA1REC.TA1LOCAT[1] = "VWOLHD02";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VWOLHD02";
  TA1REC.TA1TBLKE = VWOLHD02.WOLHD02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSLS-N6-VWOLHD02

// select : prod location : s
Function XSSLS-S-VSYLOC02()

   /* ************************************************************/
   /* *** select unique row from:  product location           ****/
   /* *** using the std module:  VSYLOC02                     ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -811 = duplicates found                           ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* ************************************************************/

  call "VSYLOC02" ("S ", SQLCA, VSYLOC02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -811)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSSLOCS ";
  TA1REC.TA1LOCAT[1] = "VSYLOC02";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYLOC02";
  TA1REC.TA1TBLKE = VSYLOC02.VSYLOC02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSLS-S-VSYLOC02

// inquiry : w.o. 'l' hdr : 0
Function XSSLS-S-VWOLHD02()

   /* ************************************************************/
   /* *** select unique row from:  w.o. 'l' hdr               ****/
   /* *** using the std module:  VWOLHD02                     ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -811 = duplicates found                           ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "S ";

  call "VWOLHD02" (SLVREC, SQLCA, VWOLHD02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSWHD02S";
  TA1REC.TA1LOCAT[1] = "VWOLHD02";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VWOLHD02";
  TA1REC.TA1TBLKE = VWOLHD02.WOLHD02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSLS-S-VWOLHD02

// setinq : prod location : 1
Function XSSLS-S1-VSYLOC02()

   /* ************************************************************/
   /* *** select set of rows from:  product/location          ****/
   /* *** using the std module:  VSYLOC02                     ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique field values for:            ****/
   /* ***   xwhcd                                             ****/
   /* ***   xarcd                                             ****/
   /* ***   sl2zone                                           ****/
   /* ***   sl4loctn                                          ****/
   /* *** the following may be used with a wild card (*):     ****/
   /* ***   xgpcd                                             ****/
   /* ***   sy1stnbr                                          ****/
   /* ***   sy2clrid                                          ****/
   /* ***   xdmcd                                             ****/
   /* ***   xqacd                                             ****/
   /* ***   xsdcd                                             ****/
   /* ***   xsacd                                             ****/
   /* ***   xpgcd                                             ****/
   /* ***   xumcd                                             ****/
   /* ***   xowcd                                             ****/
   /* ***   xslcd                                             ****/
   /* ***   sl2palet                                          ****/
   /* ***   sl2case                                           ****/
   /* *** the order by for this select set is:                ****/
   /* ***   xwhcd                                             ****/
   /* ***   xarcd                                             ****/
   /* ***   sl2zone                                           ****/
   /* ***   sl4loctn                                          ****/
   /* ***   xgpcd                                             ****/
   /* ***   sy1stnbr                                          ****/
   /* ***   sy2clrid                                          ****/
   /* ***   xdmcd                                             ****/
   /* ***   xqacd                                             ****/
   /* ***   xsdcd                                             ****/
   /* ***   xsacd                                             ****/
   /* ***   xpgcd                                             ****/
   /* ***   xumcd                                             ****/
   /* ***   xowcd                                             ****/
   /* ***   xslcd                                             ****/
   /* ***   sy5szid                                           ****/
   /* ************************************************************/

  call "VSYLOC02" ("S1", SQLCA, VSYLOC02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "XSSY02S1";
    TA1REC.TA1LOCAT[1] = "VSYLOC02";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VSYLOC02";
    TA1REC.TA1TBLKE = VSYLOC02.VSYLOC02-KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* *** note: fetch handles return code correctly           ****/
   /* ************************************************************/

  XSSLS-N1-VSYLOC02(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSLS-S1-VSYLOC02

// setinq : w.o. 'l' hdr : 1
Function XSSLS-S1-VWOLHD02()

   /* ************************************************************/
   /* *** select set of rows from:  w.o. 'l' hdr              ****/
   /* *** using the std module:  VWOLHD02                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique field values for:            ****/
   /* ***   xwhcd                                             ****/
   /* ***   xarcd                                             ****/
   /* ***   sl4zone                                           ****/
   /* *** the following may be used with a wild card (*):     ****/
   /* ***   sl5loctn                                          ****/
   /* ***   ywtcd                                             ****/
   /* ***   xxxstat                                           ****/
   /* *** the following must have a range passed:             ****/
   /* ***   zzzsdt                                            ****/
   /* *** the order by for this select set is:                ****/
   /* ***   xwhcd                                             ****/
   /* ***   sl8frar                                           ****/
   /* ***   sl8frzn                                           ****/
   /* ***   sl8frlc                                           ****/
   /* ***   zzzsdt                                            ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "S1";

  call "VWOLHD02" (SLVREC, SQLCA, VWOLHD02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "XSHD02S1";
    TA1REC.TA1LOCAT[1] = "VWOLHD02  ";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VWOLHD02";
    TA1REC.TA1TBLKE = VWOLHD02.WOLHD02-KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* *** note: fetch handles return code correctly           ****/
   /* ************************************************************/

  XSSLS-N1-VWOLHD02(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSLS-S1-VWOLHD02

// setinq : w.o. 'l' hdr : 2
Function XSSLS-S2-VWOLHD02()

   /* ************************************************************/
   /* *** select set of rows from:  w.o. 'l' hdr              ****/
   /* *** using the std module:  VWOLHD02                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique field values for:            ****/
   /* ***   xwhcd                                             ****/
   /* ***   xarcd                                             ****/
   /* ***   sl4zone                                           ****/
   /* *** the following may be used with a wild card (*):     ****/
   /* ***   sl5loctn                                          ****/
   /* ***   ywtcd                                             ****/
   /* ***   xxxstat                                           ****/
   /* *** the following must have a range passed:             ****/
   /* ***   zzzsdt                                            ****/
   /* *** the order by for this select set is:                ****/
   /* ***   xwhcd                                             ****/
   /* ***   sl8toar                                           ****/
   /* ***   sl8tozn                                           ****/
   /* ***   sl8tolc                                           ****/
   /* ***   zzzsdt                                            ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "S2";

  call "VWOLHD02" (SLVREC, SQLCA, VWOLHD02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "XSHD02S2";
    TA1REC.TA1LOCAT[1] = "VWOLHD02  ";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VWOLHD02";
    TA1REC.TA1TBLKE = VWOLHD02.WOLHD02-KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* *** note: fetch handles return code correctly           ****/
   /* ************************************************************/

  XSSLS-N2-VWOLHD02(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSLS-S2-VWOLHD02

// select : prod location : s3
Function XSSLS-S3-VSYLOC02()

   /* ************************************************************/
   /* *** select set of rows from:  product location          ****/
   /* *** using the std module:  VSYLOC02                     ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique field values for:            ****/
   /* ***   xwhcd                                             ****/
   /* ***   xarcd                                             ****/
   /* ***   sl4zone                                           ****/
   /* ***   sl5loctn                                          ****/
   /* *** the following may be used with a wild card (*):     ****/
   /* ***   sl2palet                                          ****/
   /* ***   sl2case                                           ****/
   /* *** the order by for this select set is:                ****/
   /* ***   xwhcd                                             ****/
   /* ***   xarcd                                             ****/
   /* ***   sl4zone                                           ****/
   /* ***   sl5loctn                                          ****/
   /* ***   sl2palet                                          ****/
   /* ***   sl2case                                           ****/
   /* ***   xgpcd                                             ****/
   /* ***   sy1stnbr                                          ****/
   /* ***   sy2clrid                                          ****/
   /* ***   xdmcd                                             ****/
   /* ***   xqacd                                             ****/
   /* ***   xsdcd                                             ****/
   /* ***   xsacd                                             ****/
   /* ***   xpgcd                                             ****/
   /* ***   xumcd                                             ****/
   /* ***   xowcd                                             ****/
   /* ***   xslcd                                             ****/
   /* ***   sy5szid                                           ****/
   /* ************************************************************/

  call "VSYLOC02" ("S3", SQLCA, VSYLOC02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "XSSLOCS3";
    TA1REC.TA1LOCAT[1] = "VSYLOC02";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VSYLOC02";
    TA1REC.TA1TBLKE = VSYLOC02.VSYLOC02-KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* *** note: fetch handles return code correctly           ****/
   /* ************************************************************/

  XSSLS-N3-VSYLOC02(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSLS-S3-VSYLOC02

// select : prod location : s4
Function XSSLS-S4-VSYLOC02()

   /* ************************************************************/
   /* *** select set of rows from:  product location          ****/
   /* *** using the std module:  VSYLOC02                     ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique field values for:            ****/
   /* ***   xwhcd                                             ****/
   /* ***   xarcd                                             ****/
   /* ***   sl4zone                                           ****/
   /* ***   sl5loctn                                          ****/
   /* *** the following may be used with a wild card (*):     ****/
   /* ***   sl2palet                                          ****/
   /* ***   sl2case                                           ****/
   /* *** the order by for this select set is:                ****/
   /* ***   xwhcd                                             ****/
   /* ***   xarcd                                             ****/
   /* ***   sl4zone                                           ****/
   /* ***   sl5loctn                                          ****/
   /* ***   xgpcd                                             ****/
   /* ***   sy1stnbr                                          ****/
   /* ***   sy2clrid                                          ****/
   /* ***   xdmcd                                             ****/
   /* ***   xqacd                                             ****/
   /* ***   xsdcd                                             ****/
   /* ***   xsacd                                             ****/
   /* ***   xpgcd                                             ****/
   /* ***   xumcd                                             ****/
   /* ***   xowcd                                             ****/
   /* ***   xslcd                                             ****/
   /* ***   sl2palet                                          ****/
   /* ***   sl2case                                           ****/
   /* ***   sy5szid                                           ****/
   /* ************************************************************/

  call "VSYLOC02" ("S4", SQLCA, VSYLOC02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "XSSL0CS4";
    TA1REC.TA1LOCAT[1] = "VSYLOC02";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VSYLOC02";
    TA1REC.TA1TBLKE = VSYLOC02.VSYLOC02-KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* *** note: fetch handles return code correctly           ****/
   /* ************************************************************/

  XSSLS-N4-VSYLOC02(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSLS-S4-VSYLOC02

// select : prod location : s5
Function XSSLS-S5-VSYLOC02()

   /* ************************************************************/
   /* *** select set of rows from:  product/location          ****/
   /* *** using the std module:  VSYLOC02                     ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique field values for:            ****/
   /* ***   xwhcd                                             ****/
   /* ***   xarcd                                             ****/
   /* ***   sl2zone                                           ****/
   /* ***   sl4loctn                                          ****/
   /* *** the following may be used with a wild card (*):     ****/
   /* ***   xgpcd                                             ****/
   /* ***   sy1stnbr                                          ****/
   /* ***   sy2clrid                                          ****/
   /* ***   xdmcd                                             ****/
   /* ***   xqacd                                             ****/
   /* ***   xsdcd                                             ****/
   /* ***   xsacd                                             ****/
   /* ***   xpgcd                                             ****/
   /* ***   xumcd                                             ****/
   /* ***   xowcd                                             ****/
   /* ***   xslcd                                             ****/
   /* ***   sl2palet                                          ****/
   /* ***   sl2case                                           ****/
   /* *** the order by for this select set is:                ****/
   /* ***   xwhcd                                             ****/
   /* ***   xarcd                                             ****/
   /* ***   sl2zone                                           ****/
   /* ***   sl4loctn                                          ****/
   /* ***   xgpcd                                             ****/
   /* ***   sy1stnbr                                          ****/
   /* ***   sy2clrid                                          ****/
   /* ***   xdmcd                                             ****/
   /* ***   xqacd                                             ****/
   /* ***   xsdcd                                             ****/
   /* ***   xsacd                                             ****/
   /* ***   xpgcd                                             ****/
   /* ***   xumcd                                             ****/
   /* ***   xowcd                                             ****/
   /* ***   xslcd                                             ****/
   /* ***   sy5szid                                           ****/
   /* ************************************************************/

  call "VSYLOC02" ("S5", SQLCA, VSYLOC02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "XSSLOCS5";
    TA1REC.TA1LOCAT[1] = "VSYLOC02";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VSYLOC02";
    TA1REC.TA1TBLKE = VSYLOC02.VSYLOC02-KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* *** note: fetch handles return code correctly           ****/
   /* ************************************************************/

  XSSLS-N5-VSYLOC02(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSLS-S5-VSYLOC02

// setinq : w.o. 'l' hdr : 5
Function XSSLS-S5-VWOLHD02()

   /* ************************************************************/
   /* *** select set of rows from:  w.o. 'l' hdr              ****/
   /* *** using the std module:  VWOLHD02                     ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique field values for:            ****/
   /* ***   xwhcd                                             ****/
   /* ***   xarcd                                             ****/
   /* ***   sl4zone                                           ****/
   /* *** the following may be used with a wild card (*):     ****/
   /* ***   sl5loctn                                          ****/
   /* ***   ywtcd                                             ****/
   /* ***   xxxstat                                           ****/
   /* *** the following must have a range passed:             ****/
   /* ***   zzzsdt                                            ****/
   /* *** the order by for this select set is:                ****/
   /* ***   xwhcd                                             ****/
   /* ***   sl8frar                                           ****/
   /* ***   sl8frzn                                           ****/
   /* ***   sl8frlc                                           ****/
   /* ***   zzzsdt                                            ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "S5";

  call "VWOLHD02" (SLVREC, SQLCA, VWOLHD02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "XSSWHDS5";
    TA1REC.TA1LOCAT[1] = "VWOLHD02";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VWOLHD02";
    TA1REC.TA1TBLKE = VWOLHD02.WOLHD02-KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* *** note: fetch handles return code correctly           ****/
   /* ************************************************************/

  XSSLS-N5-VWOLHD02(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSLS-S5-VWOLHD02

// setinq : w.o. 'l' hdr : 6
Function XSSLS-S6-VWOLHD02()

   /* ************************************************************/
   /* *** select set of rows from:  w.o. 'l' hdr              ****/
   /* *** using the std module:  VWOLHD02                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique field values for:            ****/
   /* ***   xwhcd                                             ****/
   /* ***   from xarcd                                        ****/
   /* ***   from sl4zone                                      ****/
   /* ***   from sl6loctn                                     ****/
   /* ***   xgpcd                                             ****/
   /* ***   sy1stnbr                                          ****/
   /* ***   sy2clrid                                          ****/
   /* ***   xdmcd                                             ****/
   /* ***   xqacd                                             ****/
   /* ***   xsdcd                                             ****/
   /* ***   xsacd                                             ****/
   /* ***   xpgcd                                             ****/
   /* ***   xumcd                                             ****/
   /* ***   xowcd                                             ****/
   /* ***   xslcd                                             ****/
   /* *** the following may be used with a wild card (*):     ****/
   /* ***   sl5loctn                                          ****/
   /* ***   ywtcd                                             ****/
   /* ***   xxxstat                                           ****/
   /* *** the following must have a range passed:             ****/
   /* ***   zzzsdt                                            ****/
   /* *** the order by for this select set is:                ****/
   /* ***   xwhcd                                             ****/
   /* ***   from xarcd                                        ****/
   /* ***   from sl4zone                                      ****/
   /* ***   from sl6loctn                                     ****/
   /* ***   xgpcd                                             ****/
   /* ***   sy1stnbr                                          ****/
   /* ***   sy2clrid                                          ****/
   /* ***   xdmcd                                             ****/
   /* ***   xqacd                                             ****/
   /* ***   xsdcd                                             ****/
   /* ***   xsacd                                             ****/
   /* ***   xpgcd                                             ****/
   /* ***   xumcd                                             ****/
   /* ***   xowcd                                             ****/
   /* ***   xslcd                                             ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "S6";

  call "VWOLHD02" (SLVREC, SQLCA, VWOLHD02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "XSHD02S6";
    TA1REC.TA1LOCAT[1] = "VWOLHD02";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VWOLHD02";
    TA1REC.TA1TBLKE = VWOLHD02.WOLHD02-KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* *** note: fetch handles return code correctly           ****/
   /* ************************************************************/

  XSSLS-N6-VWOLHD02(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSLS-S6-VWOLHD02

// select : prod location : sa
Function XSSLS-SA-VSYLOC02()

   /* ************************************************************/
   /* *** select unique row from:  product location           ****/
   /* *** using the std module:  VSYLOC02                     ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -811 = duplicates found                           ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* ************************************************************/

  call "VSYLOC02" ("SA", SQLCA, VSYLOC02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -811)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSSLOCSA";
  TA1REC.TA1LOCAT[1] = "VSYLOC02";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYLOC02";
  TA1REC.TA1TBLKE = VSYLOC02.VSYLOC02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSLS-SA-VSYLOC02

// inquiry : prod location : 2
Function XSSLS-SB-VSYLOC02()

   /* ************************************************************/
   /* *** select unique row from:  product location           ****/
   /* *** using the std module:  VSYLOC02                     ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* ************************************************************/

  call "VSYLOC02" ("SB", SQLCA, VSYLOC02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSY02SB ";
  TA1REC.TA1LOCAT[1] = "VSYLOC02";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYLOC02";
  TA1REC.TA1TBLKE = VSYLOC02.VSYLOC02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSLS-SB-VSYLOC02

// update : prod location : u
Function XSSLS-U-VSYLOC02()

   /* ************************************************************/
   /* *** update unique row in:  product location             ****/
   /* *** using the std module:  VSYLOC02                     ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = concurrent update - re:                    ****/
   /* ***          deleted since last read (rec blanked out)  ****/
   /* ***          updated since last read (new data in rec)  ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** replace row                                         ****/
   /* *** note: IO process increments record zzzchgct by +1   ****/
   /* ***       but ID's row to update by the old zzzchgct    ****/
   /* ************************************************************/

  VSYLOC02.ZZZCHGDT = X2CREC.X2CCURDT;
  VSYLOC02.ZZZCHGTM = X3CREC.X3CCURST;

  call "VSYLOC02" ("U ", SQLCA, VSYLOC02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
     /* ************************************************************/
     /* *** select the original row without a change count      ****/
     /* *** note: select unique does NOT use zzzchgct           ****/
     /* *** note: this puts current version of data in record   ****/
     /* ***       or blank out record layout = deleted          ****/
     /* ************************************************************/
    XSSLS-S-VSYLOC02(); /* <=== select unique row*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == +100)
      VSYLOC02.VSYLOC02-DATA = " ";
      return;
    end
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSSLOCU ";
  TA1REC.TA1LOCAT[1] = "VSYLOC02";
  TA1REC.TA1LOCAT[3] = "UPDATE  ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYLOC02";
  TA1REC.TA1TBLKE = VSYLOC02.VSYLOC02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSLS-U-VSYLOC02

// replace : w.o. 'l' hdr : 0
Function XSSLS-U-VWOLHD02()

   /* ************************************************************/
   /* *** replace unique row in:  w.o. 'l' hdr                ****/
   /* *** using the std module:  VWOLHD02                     ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = concurrent update - re:                    ****/
   /* ***          deleted since last read (rec blanked out)  ****/
   /* ***          updated since last read (new data in rec)  ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** replace row                                         ****/
   /* *** note: IO process increments record zzzchgct by +1   ****/
   /* ***       but ID's row to update by the old zzzchgct    ****/
   /* ************************************************************/

  VWOLHD02.ZZZCHGDT = X2CREC.X2CCURDT;
  VWOLHD02.ZZZCHGTM = X3CREC.X3CCURST;
  VWOLHD02.SL8UPDBY = COMMAREA.CAUSERID;

  SLVREC.SLVFNC = "U ";

  call "VWOLHD02" (SLVREC, SQLCA, VWOLHD02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
     /* ************************************************************/
     /* *** select the original row without a change count      ****/
     /* *** note: select unique does NOT use zzzchgct           ****/
     /* *** note: this puts current version of data in record   ****/
     /* ***       or blank out record layout = deleted          ****/
     /* ************************************************************/
    /* XSSL8I0;                        /* <=== select unique row*/
    XSSLS-S-VWOLHD02();
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == +100)
      set VWOLHD02 empty; /* Row storage area*/
      return;
    end
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSHD02U ";
  TA1REC.TA1LOCAT[1] = "VWOLHD02";
  TA1REC.TA1LOCAT[3] = "REPLACE ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VWOLHD02";
  TA1REC.TA1TBLKE = VWOLHD02.WOLHD02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSLS-U-VWOLHD02

// update : prod location : ua
Function XSSLS-UA-VSYLOC02()

   /* ************************************************************/
   /* *** update unique row in:  product location             ****/
   /* *** using the std module:  VSYLOC02                     ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = concurrent update - re:                    ****/
   /* ***          deleted since last read (rec blanked out)  ****/
   /* ***          updated since last read (new data in rec)  ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** replace row                                         ****/
   /* *** note: IO process increments record zzzchgct by +1   ****/
   /* ***       but ID's row to update by the old zzzchgct    ****/
   /* ************************************************************/

  VSYLOC02.ZZZCHGDT = X2CREC.X2CCURDT;
  VSYLOC02.ZZZCHGTM = X3CREC.X3CCURST;

  call "VSYLOC02" ("UA", SQLCA, VSYLOC02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
     /* ************************************************************/
     /* *** select the original row without a change count      ****/
     /* *** note: select unique does NOT use zzzchgct           ****/
     /* *** note: this puts current version of data in record   ****/
     /* ***       or blank out record layout = deleted          ****/
     /* ************************************************************/
    XSSLS-S1-VSYLOC02(); /* <=== select unique row*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == +100)
      VSYLOC02.VSYLOC02-DATA = " ";
      return;
    end
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSSLOCUA";
  TA1REC.TA1LOCAT[1] = "VSYLOC02";
  TA1REC.TA1LOCAT[3] = "REPLACE ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYLOC02";
  TA1REC.TA1TBLKE = VSYLOC02.VSYLOC02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSLS-UA-VSYLOC02

// purge tsqs
Function XSSLSPQ()

   /* ************************************************************/
   /* *** purge both the summary and detail tsq using ta0050  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** purge summary tsq                                   ****/
   /* ************************************************************/

  TA5REC.TA5APPID = SLWREC.SLWSUMQU;
  TA5REC.TA5FNCCD = "P";

  call "TA0050" ("0001 ", TA5REC) {isNoRefresh = yes, isExternal = yes};

  if (TA5REC.TA5RTNCD == 0
   || TA5REC.TA5RTNCD == 4)
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SPQA";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
     /* ** note: do not ezertn ***/
  end

   /* ************************************************************/
   /* *** if the detail tsq ID is greater than spaces,        ****/
   /* *** purge detail tsq (even if error above)              ****/
   /* ************************************************************/

  if (SLWREC.SLWDETQU > " ")
     /* ** next sentence ***/
  else
    return;
  end

  TA5REC.TA5APPID = SLWREC.SLWDETQU;
  TA5REC.TA5FNCCD = "P";

  call "TA0050" ("0001 ", TA5REC) {isNoRefresh = yes, isExternal = yes};

  if (TA5REC.TA5RTNCD == 0
   || TA5REC.TA5RTNCD == 4)
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SPQB";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSLSPQ

// obtain current date (ccyymmss)
Function XSX2CDT()

   /* ************************************************************/
   /* *** use ta0040 to obtain the current date including CC  ****/
   /* ************************************************************/

  set TA2REC empty;

  TA2REC.TA2DTOPT = "GETDATE ";
  TA2REC.TA2GRTYP = "G";

  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD == 0)
    X2CREC.X2CCURDT = TA2REC.TA2GRGGN;
    return;
  end

   /* ************************************************************/
   /* *** since ta0020 will not check 'getdate ' return code  ****/
   /* *** and we must prevent further processing,             ****/
   /* *** call ta0020 to display error and return to main menu****/
   /* ************************************************************/

  set TA1REC empty;

  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1TYPE = "APPL";
  TA1REC.TA1PGMNM = "XSX2CDT ";
  TA1REC.TA1LOC = "TA0040 - GET CURRENT DATE";
  SQLCA.SQLCAREC = TA2REC.TA2RTNCD;
  call "TA0020" (TA1REC, SQLCA) {isExternal = yes};

  XSPF4();

  exit program;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSX2CDT

// obtain current time (hhmmss)
Function XSX3CTM()

   /* ************************************************************/
   /* *** move CSP's time to ws fld with colons               ****/
   /* *** move corresponding flds to HHMMSS flds              ****/
   /* *** note: flds defined for use of HHMM also             ****/
   /* ************************************************************/

  X3CREC.X3CTIME = VGVar.currentFormattedTime;

  X3CREC.X3CCURHH = X3CREC.X3CTIMHH;
  X3CREC.X3CCURMM = X3CREC.X3CTIMMM;
  X3CREC.X3CCURSS = X3CREC.X3CTIMSS;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSX3CTM

// x4crec - translate byte value
Function XSXLATE()

   /* ************************************************************/
   /* *** if find character found, translate to fill          ****/
   /* ************************************************************/

  if (X4CREC.X4CBYT[X4CCTR] == X4CREC.X4CFND)
    X4CREC.X4CBYT[X4CCTR] = X4CREC.X4CFIL;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSXLATE

// add : qmf parm row : 0
Function XSXZZA0()

   /* ************************************************************/
   /* *** add unique row to:  qmf parm row                    ****/
   /* *** using the std module:  IO1000                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -803 = adding duplicate row                       ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* *** note: 0 return code means record already exists     ****/
   /* ***       = setup -803 return code                      ****/
   /* ************************************************************/

  XSXZZI0(); /* <=== select unique row*/

  if (SQLCA.VAGen_SQLCODE == +100)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = -803;
      return;
    end
    return;
  end

   /* ************************************************************/
   /* *** insert row (previous +100 = doesn't exist)          ****/
   /* *** note: IO process initializes zzzchgct to 0          ****/
   /* ************************************************************/

  XZZREC.ZZZSDT = X2CREC.X2CCURDT;
  XZZREC.ZZZSTM = X3CREC.X3CCURST;

  call "IO1000" ("A ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSXZZA0 ";
  TA1REC.TA1LOCAT[1] = "IO1000  ";
  TA1REC.TA1LOCAT[3] = "ADD     ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DCORP   ";
  TA1REC.TA1TBLVU = "VPARM101";
  TA1REC.TA1TBLKE = XZZREC.XZZKEYGP;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSXZZA0

// delete : qmf parm row : 0
Function XSXZZD0()

   /* ************************************************************/
   /* *** delete unique row in:  receiving log itm            ****/
   /* *** using the std module:  IO1000                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not fnd                                    ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** delete row                                          ****/
   /* ************************************************************/

  call "IO1000" ("D ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSXZZD0 ";
  TA1REC.TA1LOCAT[1] = "IO1000  ";
  TA1REC.TA1LOCAT[3] = "DELETE  ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DCORP   ";
  TA1REC.TA1TBLVU = "VPARM101";
  TA1REC.TA1TBLKE = XZZREC.XZZKEYGP;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSXZZD0

// inquiry : qmf parm row : 0
Function XSXZZI0()

   /* ************************************************************/
   /* *** select unique row from:  qmf parm row               ****/
   /* *** using the std module:  IO1000                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -811 = duplicates found                           ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* ************************************************************/

  call "IO1000" ("S ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -811)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSXZZI0 ";
  TA1REC.TA1LOCAT[1] = "IO1000  ";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DCORP   ";
  TA1REC.TA1TBLVU = "VPARM101";
  TA1REC.TA1TBLKE = XZZREC.XZZQRYID;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSXZZI0

//*** RECORD=SL0EW01 ****
// ************************************************************
// 
//           STOCK LOCATE MAINTENANCE SKELETON
//           =================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used for specific
//           application/function purposes.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-86  Ward Jones   created
// 03/01/89  ryonke       modified for creating single sku work
//                        orders
// 07/14/92  ryonke       Added fields for Vrows001 table logic
// 11/21/96  pshank       Added slzone-num - intrmdt ws var.
//                        to store numeric value of zone num
// ************************************************************
// ************************************************************
// ***********************
Record SL0EW01 type basicRecord
  10 SL0EWLK1 SL0EWLK1 ; 
    15 XWHCD XWHCD ; 
    15 SL-LOC-SZ-IND SL-LOC-SZ-IND ; 
  10 SL0EWFL1 SL0EWFL1 ; 
  10 SL0EWFL2 SL0EWFL2 ; 
  10 SL0EWFL3 SL0EWFL3 ; 
  10 SL0EWFL4 SL0EWFL4 ; 
  10 SL0EWFL5 SL0EWFL5 ; 
  10 SL0EWFL6 SL0EWFL6 ; 
  10 SL0EWTLE SL0EWTLE ; 
  10 SL0EW-MEZZ-LOC-IND SL0EW-MEZZ-LOC-IND ; 
  10 XARCD XARCD ; 
  10 SL4ZONE SL4ZONE ; 
  10 SL5LOCTN SL5LOCTN ; 
  10 SL2PALET SL2PALET ; 
  10 SL2CASE SL2CASE ; 
  10 XGPCD XGPCD ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 XQACD XQACD ; 
  10 XOWCD XOWCD ; 
  10 XSDCD XSDCD ; 
  10 XSACD XSACD ; 
  10 XPGCD XPGCD ; 
  10 XUMCD XUMCD ; 
  10 XSLCD XSLCD ; 
  10 SL0EWMPF SL0EWMPF ; 
  10 SL0EWSZC SL0EWSZC ; 
  10 SL0EWITC SL0EWITC ; 
  10 SL0EWPEX SL0EWPEX ; 
  10 SL0EWEMT SL0EWEMT ; 
  10 SL0EWFZT SL0EWFZT ; 
  10 SL0EWTZT SL0EWTZT ; 
  10 SL0EWFAC SL0EWFAC [8] ; 
  10 SL0EWFZC SL0EWFZC [8] ; 
  10 SL0EWTAC SL0EWTAC [8] ; 
  10 SL0EWTZC SL0EWTZC [8] ; 
  10 SL0EWFAT SL0EWFAT [8] ; 
  10 SL0EWFZP SL0EWFZP [8] ; 
  10 SL0EWTAT SL0EWTAT [8] ; 
  10 SL0EWTZP SL0EWTZP [8] ; 
  10 SL5FRWOC SL5FRWOC ; 
  10 SL5TOWOC SL5TOWOC ; 
  10 SL0EWSAR SL0EWSAR ; 
  10 SL0EWSZN SL0EWSZN ; 
  10 SL0EWSLC SL0EWSLC ; 
  10 SL0EWLAR SL0EWLAR ; 
  10 SL0EWLZN SL0EWLZN ; 
  10 SL0EWLLC SL0EWLLC ; 
  10 SL8WOGRP SL8WOGRP ; 
  10 SL0EWLTX SL0EWLTX ; 
  10 SL0EWTBL SL0EWTBL [20] ; 
    15 SL0EWUAC SL0EWUAC ; 
    15 SL0EWUZC SL0EWUZC ; 
    15 SL0EWULC SL0EWULC ; 
    15 SL0EWUWO SL0EWUWO ; 
  10 SL0EWBKP SL0EWBKP ; 
  10 SL0EWBKC SL0EWBKC ; 
  10 SL0EWSPA SL0EWSPA ; 
  10 SL9WOQTY SL9WOQTY ; 
  10 SL0EW-NBR-CARTONS SL0EW-NBR-CARTONS ; 
  10 SL-WO-NBR-OF-LABL SL-WO-NBR-OF-LABL ; 
  10 SL0EW-TO-LOC SL0EW-TO-LOC ; 
    15 SL5ROWCD SL5ROWCD ; 
    15 XXX-NUM-4 XXX-NUM-4 ; 
  10 SL0EW-PARSE-LOC SL0EW-PARSE-LOC ; 
    15 SL0EW-POS-1-2 SL0EW-POS-1-2 ; 
    15 SL0EW-POS-3-4 SL0EW-POS-3-4 ; 
    15 SL0EW-POS-5-6 SL0EW-POS-5-6 ; 
  10 SL0EW-SRT-ROW-CD SL0EW-SRT-ROW-CD ; 
    15 SL0EW-SRT-ROW-NBR SL0EW-SRT-ROW-NBR ; 
  10 SLZONE-NUM SLZONE-NUM ; 
  10 SL0EWPIX SL0EWPIX ; 
  10 SL0EWPZN SL0EWPZN [10] ; 
  10 SL0EWPLC SL0EWPLC [10] ; 
  10 SL0EWPFLG SL0EWPFLG ; 
  10 SL0EWGRP SL0EWGRP ; 
    15 SL0EWNLC SL0EWNLC [6] ; 
  10 SL0EWPFL SL0EWPFL ; 
  10 SL0EWTFLG SL0EWTFLG ; 
  10 SL0EWSLOC SL0EWSLOC ; 
end // end SL0EW01

Record SL0EW02 type basicRecord
  10 XWHCD XWHCD ; 
  10 SL-LOC-SZ-IND SL-LOC-SZ-IND ; 
  10 SL8TOAR SL8TOAR ; 
  10 SL8TOZN SL8TOZN ; 
  10 SL8TOLC SL8TOLC ; 
  10 SL8FRAR SL8FRAR ; 
  10 SL8FRZN SL8FRZN ; 
  10 SL8FRLC SL8FRLC ; 
  10 SL2PALET SL2PALET ; 
  10 SL2CASE SL2CASE ; 
  10 SL0EMCAS SL0EMCAS ; 
  10 XGPCD XGPCD ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 XQACD XQACD ; 
  10 XSDCD XSDCD ; 
  10 XSLCD XSLCD ; 
  10 SL0EMSLC SL0EMSLC ; 
  10 XPGCD XPGCD ; 
  10 XUMCD XUMCD ; 
  10 XOWCD XOWCD ; 
  10 XSACD XSACD ; 
  10 SL8ITMFL SL8ITMFL ; 
  10 SL8WOPY SL8WOPY ; 
  10 SL0EWFAC SL0EWFAC ; 
  10 SL0EWFAT SL0EWFAT ; 
  10 SL0EWTAC SL0EWTAC ; 
  10 SL0EWTAT SL0EWTAT ; 
  10 SL0EWFZC SL0EWFZC ; 
  10 SL0EWTZC SL0EWTZC ; 
  10 SL0EWFZP SL0EWFZP ; 
  10 SL0EWTZP SL0EWTZP ; 
  10 SL0EWFZT SL0EWFZT ; 
  10 SL0EWTZT SL0EWTZT ; 
  10 SL0EWFL1 SL0EWFL1 ; 
  10 SL0EWFL2 SL0EWFL2 ; 
  10 SL0EWFL3 SL0EWFL3 ; 
  10 SL0EWFL4 SL0EWFL4 ; 
  10 SL0EWFL5 SL0EWFL5 ; 
  10 SL0EWFL6 SL0EWFL6 ; 
  10 SL0EW-MEZZ-LOC-IND SL0EW-MEZZ-LOC-IND ; 
  10 SL0EWMPF SL0EWMPF ; 
  10 SL0EWSZC SL0EWSZC ; 
  10 SL0EWPEX SL0EWPEX ; 
  10 SL0EWEMT SL0EWEMT ; 
  10 SL0EWITC SL0EWITC ; 
  10 SL0EWPTO SL0EWPTO ; 
  10 SL0EWSTO SL0EWSTO ; 
  10 SL0EWWQT SL0EWWQT ; 
  10 SL5FRWOC SL5FRWOC ; 
  10 SY5SZID SY5SZID [40] ; 
  10 SL0EWWOQ SL0EWWOQ [40] ; 
  10 SL0EWCWQ SL0EWCWQ [40] ; 
  10 SL0EWNTQ SL0EWNTQ ; 
  10 SL0EWETQ SL0EWETQ ; 
  10 SL0EWTLE SL0EWTLE ; 
  10 SL3NXWOG SL3NXWOG ; 
  10 SL0EWSAR SL0EWSAR ; 
  10 SL0EWSZN SL0EWSZN ; 
  10 SL0EWSLC SL0EWSLC ; 
  10 SL0EWSPA SL0EWSPA ; 
  10 SL0EW-NBR-CARTONS SL0EW-NBR-CARTONS ; 
  10 SL-WO-NBR-OF-LABL SL-WO-NBR-OF-LABL ; 
  10 SL0EW-PARSE-LOC SL0EW-PARSE-LOC ; 
    15 SL0EW-POS-1-2 SL0EW-POS-1-2 ; 
    15 SL0EW-POS-3-4 SL0EW-POS-3-4 ; 
    15 SL0EW-POS-5-6 SL0EW-POS-5-6 ; 
  10 SL0EW-SRT-ROW-CD SL0EW-SRT-ROW-CD ; 
    15 SL0EW-SRT-ROW-NBR SL0EW-SRT-ROW-NBR ; 
  10 SL0EW-STASDFL SL0EW-STASDFL ; 
  10 INASAID INASAID ; 
end // end SL0EW02

//*** RECORD=SL0EW03 ****
// ************************************************************
// 
//           STOCK LOCATE MAINTENANCE SKELETON
//           =================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used for specific
//           application/function purposes.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-86  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0EW03 type basicRecord
  10 SL0EWLK3 SL0EWLK3 ; 
    15 XWHCD XWHCD ; 
    15 XMSLMFNC XMSLMFNC ; 
  10 SL0EWFL1 SL0EWFL1 ; 
  10 SL0EWFL2 SL0EWFL2 ; 
  10 SL0EWFL3 SL0EWFL3 ; 
  10 SL0EWFL4 SL0EWFL4 ; 
  10 SL0EWSDR SL0EWSDR ; 
  10 SL0EWRBQ SL0EWRBQ ; 
  10 SL0EWWMQ SL0EWWMQ ; 
  10 SL0EWWQY SL0EWWQY ; 
  10 SL0EWWQR SL0EWWQR ; 
  10 SL0EWSOH SL0EWSOH ; 
  10 SL0EWFAT SL0EWFAT ; 
  10 SL0EWTAT SL0EWTAT ; 
  10 INASAID INASAID ; 
  10 SL6SADTE SL6SADTE ; 
  10 SL0EWRTS SL0EWRTS ; 
  10 PC3PONBR PC3PONBR ; 
  10 PC-SAP-PO-NBR PC-SAP-PO-NBR ; 
end // end SL0EW03

//*** RECORD=SL0EW11 ****
// ************************************************************
// 
//           STOCK LOCATE MAINTENANCE SKELETON
//           =================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used for specific
//           application/function purposes.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-07-88  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0EW11 type basicRecord
  10 SL0EWDT SL0EWDT ; 
  10 XARCD XARCD ; 
  10 SL4ZONE SL4ZONE ; 
  10 SL5LOCTN SL5LOCTN ; 
  10 YLSCD YLSCD ; 
  10 SL0EWFWO SL0EWFWO ; 
  10 SL0EWTWO SL0EWTWO ; 
  10 SL8FRAR SL8FRAR ; 
  10 SL8FRZN SL8FRZN ; 
  10 SL8FRLC SL8FRLC ; 
  10 SL8TOAR SL8TOAR ; 
  10 SL8TOZN SL8TOZN ; 
  10 SL8TOLC SL8TOLC ; 
  10 SWEPLLNB SWEPLLNB ; 
  10 SL5MPDFL SL5MPDFL ; 
  10 SL0EWUFL SL0EWUFL ; 
  10 SL0EWSAF SL0EWSAF ; 
  10 SL0EWOK SL0EWOK ; 
  10 INASAID INASAID ; 
end // end SL0EW11

//*** RECORD=SL0EW22 ****
// ************************************************************
// 
//           STOCK LOCATE MAINTENANCE SKELETON
//           =================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used for specific
//           application/function purposes.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-07-88  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0EW22 type basicRecord
  10 SL0EWSAF SL0EWSAF ; 
  10 SL0EWOK SL0EWOK ; 
  10 INASAID INASAID ; 
  10 SL0EWDT SL0EWDT ; 
  10 SL2PALET SL2PALET ; 
  10 SL2CASE SL2CASE ; 
  10 PC3PONBR PC3PONBR ; 
  10 PC-SAP-PO-NBR PC-SAP-PO-NBR ; 
end // end SL0EW22

//*** RECORD=SL0EWA1 ****
// ****************  stock locate table  **********************
// 
// TABLE NAME:          product location
// 
// DB2 TABLE:           dstloc.vsyloc01
// 
// COPYLIB MEMBER:      dcl00254
// 
// KEY TO DB2 TABLE:    xwhcd
// (non-unique)         area code
//                      zone code
//                      location code
//                      xgpcd
//                      sy1stnbr
//                      sy2clrid
//                      xdmcd
//                      xqacd
//                      xowcd
//                      xsdcd
//                      xsacd
//                      xpgcd
//                      xumcd
//                      xslcd
//                      sy5szid
// 
// note: the following make the row unique
//                      palet number
//                      case number
//                      p.o. number
//                      receipt date
// 
// MAINTENANCE LOG:
// 
// DATE      NAME       COMMENTS
// --------  ---------  ------------------------------------
// 04-15-87  W. Jones   created csp record
// 11-15-89  ryonke     added po fields for phase 4 db2 changes
// 03-04-94  ryonke     record change because of table change.
// ************************************************************
// ***********************
Record SL0EWA1 type basicRecord
  5 SL6DATA SL6DATA ; 
    10 SL6KEY SL6KEY ; 
      15 XWHCD XWHCD ; 
      15 XARCD XARCD ; 
      15 SL4ZONE SL4ZONE ; 
      15 SL5LOCTN SL5LOCTN ; 
      15 XGPCD XGPCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XQACD XQACD ; 
      15 XOWCD XOWCD ; 
      15 XSDCD XSDCD ; 
      15 XSACD XSACD ; 
      15 XPGCD XPGCD ; 
      15 XUMCD XUMCD ; 
      15 XSLCD XSLCD ; 
      15 SY5SZID SY5SZID ; 
      15 SY1UNPCS SY1UNPCS ; 
    10 XBCCD XBCCD ; 
    10 XMCCD XMCCD ; 
    10 SL-RCV-LOT-ID SL-RCV-LOT-ID ; 
    10 SL2PALET SL2PALET ; 
    10 SL2CASE SL2CASE ; 
    10 TSOCRTNB TSOCRTNB ; 
    10 PC3POIDT PC3POIDT ; 
    10 PCFSECD PCFSECD ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 PC3PONBR PC3PONBR ; 
    10 SL1CRTDT SL1CRTDT ; 
    10 SL6ONHND SL6ONHND ; 
    10 SL6PKRSV SL6PKRSV ; 
    10 SL6STASD SL6STASD ; 
    10 INASAID INASAID ; 
    10 SL6SADTE SL6SADTE ; 
    10 SL6RTSDT SL6RTSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end SL0EWA1

//*** RECORD=SL0EWA2 ****
// ****************  stock locate table  **********************
// 
// TABLE NAME:          product location
// 
// DB2 TABLE:           dstloc.vsyloc01
// 
// COPYLIB MEMBER:      dcl00254
// 
// KEY TO DB2 TABLE:    xwhcd
// (non-unique)         area code
//                      zone code
//                      location code
//                      xgpcd
//                      sy1stnbr
//                      sy2clrid
//                      xdmcd
//                      xqacd
//                      xsdcd
//                      xsacd
//                      xslcd
//                      xpgcd
//                      xumcd
//                      xowcd
//                      sy5szid
// 
// note: the following make the row unique
//                      palet number
//                      case number
//                      p.o. number
//                      receipt date
// 
// MAINTENANCE LOG:
// 
// DATE      NAME       COMMENTS
// --------  ---------  ------------------------------------
// 04-15-87  W. Jones   created csp record
// 11-15-89  ryonke     added fields for phase iv db2 changes
// 03-04-94  ryonke     record change because of table change.
// ************************************************************
// ***********************
Record SL0EWA2 type basicRecord
  5 SL6DATA SL6DATA ; 
    10 SL6KEY SL6KEY ; 
      15 XWHCD XWHCD ; 
      15 XARCD XARCD ; 
      15 SL4ZONE SL4ZONE ; 
      15 SL5LOCTN SL5LOCTN ; 
      15 XGPCD XGPCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XQACD XQACD ; 
      15 XOWCD XOWCD ; 
      15 XSDCD XSDCD ; 
      15 XSACD XSACD ; 
      15 XPGCD XPGCD ; 
      15 XUMCD XUMCD ; 
      15 XSLCD XSLCD ; 
      15 SY5SZID SY5SZID ; 
      15 SY1UNPCS SY1UNPCS ; 
    10 XBCCD XBCCD ; 
    10 XMCCD XMCCD ; 
    10 SL-RCV-LOT-ID SL-RCV-LOT-ID ; 
    10 SL2PALET SL2PALET ; 
    10 SL2CASE SL2CASE ; 
    10 TSOCRTNB TSOCRTNB ; 
    10 PC3POIDT PC3POIDT ; 
    10 PCFSECD PCFSECD ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 PC3PONBR PC3PONBR ; 
    10 SL1CRTDT SL1CRTDT ; 
    10 SL6ONHND SL6ONHND ; 
    10 SL6PKRSV SL6PKRSV ; 
    10 SL6STASD SL6STASD ; 
    10 INASAID INASAID ; 
    10 SL6SADTE SL6SADTE ; 
    10 SL6RTSDT SL6RTSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end SL0EWA2

//*** RECORD=SL0EWB1 ****
// ************************************************************
// 
//           TA0050  PARAMTER #1:
//           ===================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used each time
//           TA0050 is called in order to pass the:
//             LL = line length
//             DL = data line
//           note: the first byte is usually reserved for the
//                 record type (RT): S = summary
//                                   D = detail
//                                   B = blank (even no.s)
//                                   M = message trigger
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 10-10-86  Ward Jones   created
// 11-15-89  ryonke       increased record size
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0EWB1 type basicRecord
  10 SL0EWXLL SL0EWXLL ; 
  10 SL0EWXDL SL0EWXDL ; 
    15 * char(134) ; 
end // end SL0EWB1

//*** RECORD=SL0EWB2 ****
// ************************************************************
// 
//           TA0050  PARAMTER #1:
//           ===================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used each time
//           TA0050 is called in order to pass the:
//             LL = line length
//             DL = data line
//           note: the first byte is usually reserved for the
//                 record type (RT): S = summary
//                                   D = detail
//                                   B = blank (even no.s)
//                                   M = message trigger
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 10-10-86  Ward Jones   created
// 11-15-89  ryonke       increased record size
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0EWB2 type basicRecord
  10 SL0EWXLL SL0EWXLL ; 
  10 SL0EWXDL SL0EWXDL ; 
    15 * char(134) ; 
end // end SL0EWB2

//*** RECORD=SL0EWC0 ****
// ************************************************************
// 
//           STOCK LOCATE MAINTENANCE SKELETON
//           =================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used for specific
//           application/function purposes.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-86  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0EWC0 type basicRecord
  10 XARCD XARCD ; 
  10 SL4ZONE SL4ZONE ; 
  10 SL5LOCTN SL5LOCTN ; 
  10 SL2PALET SL2PALET ; 
  10 SL2CASE SL2CASE ; 
  10 XGPCD XGPCD ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 XQACD XQACD ; 
  10 XOWCD XOWCD ; 
  10 XSDCD XSDCD ; 
  10 XSACD XSACD ; 
  10 XPGCD XPGCD ; 
  10 XUMCD XUMCD ; 
  10 XSLCD XSLCD ; 
  10 SL0EWNSS SL0EWNSS ; 
end // end SL0EWC0

//*** RECORD=SL0EWC1 ****
// ************************************************************
// 
//           STOCK LOCATE WORK ORDER MAINTENANCE
//           ===================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used to keep
//           track of how many pallets have been assigned
//           per row.
//           This table will be initialized only when the
//           application is first entered; therefore, all
//           work orders and work groups created while in
//           a specific session of this application (multiple
//           uses of levels 1, 2 and/or 3 using pfkeys but
//           not fast path) will all be tracked or counted
//           in the table without (re-)initialization.
//           note: the position in the occurs corresponds to
//                 the zone & location's row values.
//           note: the table will be re-initialized if all
//                 rows have reached their max values.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 06-30-88  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0EWC1 type basicRecord
  10 SL0EWCTB SL0EWCTB ; 
    15 SL0EWCRC SL0EWCRC [10000] ; 
end // end SL0EWC1

//*** RECORD=SL0EWCP1 ****
// ****************  stock locate table  **********************
// 
// TABLE NAME:          product location
// 
// DB2 TABLE:           dstloc.vsyloc01
// 
// COPYLIB MEMBER:      dcl00254
// 
// KEY TO DB2 TABLE:    xwhcd
// (non-unique)         area code
//                      zone code
//                      location code
//                      xgpcd
//                      sy1stnbr
//                      sy2clrid
//                      xdmcd
//                      xqacd
//                      xowcd
//                      xsdcd
//                      xsacd
//                      xpgcd
//                      xumcd
//                      xslcd
//                      sy5szid
// 
// note: the following make the row unique
//                      palet number
//                      case number
//                      p.o. number
//                      receipt date
// 
// MAINTENANCE LOG:
// 
// DATE      NAME       COMMENTS
// --------  ---------  ------------------------------------
// 03-01-89  ryonke     created csp record as a compare record
// 11-15-89  ryonke     added fields for phase iv db2 changes
// 03-04-94  ryonke     record change becuase of table change
// ************************************************************
// ************************
Record SL0EWCP1 type basicRecord
  5 SL6DATA SL6DATA ; 
    10 SL6KEY SL6KEY ; 
      15 XWHCD XWHCD ; 
      15 XARCD XARCD ; 
      15 SL4ZONE SL4ZONE ; 
      15 SL5LOCTN SL5LOCTN ; 
      15 XGPCD XGPCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XQACD XQACD ; 
      15 XOWCD XOWCD ; 
      15 XSDCD XSDCD ; 
      15 XSACD XSACD ; 
      15 XPGCD XPGCD ; 
      15 XUMCD XUMCD ; 
      15 XSLCD XSLCD ; 
      15 SY5SZID SY5SZID ; 
      15 SY1UNPCS SY1UNPCS ; 
    10 XBCCD XBCCD ; 
    10 XMCCD XMCCD ; 
    10 SL-RCV-LOT-ID SL-RCV-LOT-ID ; 
    10 SL2PALET SL2PALET ; 
    10 SL2CASE SL2CASE ; 
    10 TSOCRTNB TSOCRTNB ; 
    10 PC3POIDT PC3POIDT ; 
    10 PCFSECD PCFSECD ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 PC3PONBR PC3PONBR ; 
    10 SL1CRTDT SL1CRTDT ; 
    10 SL6ONHND SL6ONHND ; 
    10 SL6PKRSV SL6PKRSV ; 
    10 SL6STASD SL6STASD ; 
    10 INASAID INASAID ; 
    10 SL6SADTE SL6SADTE ; 
    10 SL6RTSDT SL6RTSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end SL0EWCP1

//*** RECORD=SL0EWS1 ****
// ************************************************************
// 
//           STOCK LOCATE WORK ORDER MAINTENANCE
//           ===================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used to keep
//           track of those to locations which have been
//           selected as possible to locations (empty & the
//           row maximum saved ahs not been reached).
//           It will re-built (& any not used initialized)
//           depending on the locations saved flag and/or
//           if the whse is changed (only done for bulk and
//           then not until its first needed).
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 07-05-88  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0EWS1 type basicRecord
  10 SL0EWSTB SL0EWSTB [100] ; 
    15 SL0EWSZN SL0EWSZN ; 
    15 SL0EWSLC SL0EWSLC ; 
end // end SL0EWS1

Record SL0EWS2 type basicRecord
  10 SL0EWLTH SL0EWLTH ; 
  10 SL0EWNWO SL0EWNWO ; 
  10 SL8WONBR SL8WONBR [50] ; 
end // end SL0EWS2

Record SL0EWT2 type basicRecord
  10 SL0EWONK SL0EWONK ; 
    15 SL0EWWHC SL0EWWHC ; 
    15 SL0EWOWC SL0EWOWC ; 
end // end SL0EWT2

//*** RECORD=SL0EWX1 ****
// ************************************************************
// 
//           STOCK LOCATE WORK ORDER MAINTENANCE
//           ===================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used to keep
//           track of the last zone/row used, how many to be
//           assigned per row and to setup the index/pointer
//           to a specific row in the row counter table.
//           The max pallets per row will only be initialized
//           when the application is first entered.  The
//           last zone/location fields will be initialized
//           each time level 1 or 2 is initiated.  The index/
//           pointer to the data in the pointer will be set
//           just before each use.
//           note: the position in the occurs corresponds to
//                 the zone & location's row values.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 06-30-88  Ward Jones   created
// 03/01/89  ryonke       modified for creating single sku work
//                        orders.
// ************************************************************
// ************************************************************
// ***********************
Record SL0EWX1 type basicRecord
  10 SL0EWDT SL0EWDT ; 
  10 SL0EWBFL SL0EWBFL ; 
  10 SL0EWLSF SL0EWLSF ; 
  10 SL0EWUSW SL0EWUSW ; 
  10 SL0EWESW SL0EWESW ; 
  10 SL-LOC-SZ-IND SL-LOC-SZ-IND ; 
  10 SL0EWMPF SL0EWMPF ; 
  10 SL0EWLWH SL0EWLWH ; 
  10 SL0EWLAR SL0EWLAR ; 
  10 SL0EWLZN SL0EWLZN ; 
  10 SL0EWLRW SL0EWLRW ; 
  10 SL0EWLSP SL0EWLSP ; 
  10 SL0EWLMP SL0EWLMP ; 
  10 SL0EWLOC SL0EWLOC ; 
    15 SL0EWROW SL0EWROW ; 
    15 * char(4) ; 
  10 SL0EWCIX SL0EWCIX ; 
    15 SL0EWCZN SL0EWCZN ; 
    15 SL0EWCRW SL0EWCRW ; 
  10 SL0EWSIX SL0EWSIX ; 
  10 SL0EWMLR SL0EWMLR ; 
  10 SL0EWMSR SL0EWMSR ; 
  10 SL0EWMSL SL0EWMSL ; 
  10 SL0EWCTR SL0EWCTR ; 
  10 SL0EWCTT SL0EWCTT ; 
  10 SL0EWCTU SL0EWCTU ; 
  10 SL0EWRIN SL0EWRIN ; 
  10 SL0EWRAN SL0EWRAN ; 
  10 SL0EWPMX SL0EWPMX ; 
end // end SL0EWX1

//*** RECORD=VROWS001 ****
// ************************ ROWS TABLE ************************
// 
// DB2 TABLE VIEW:      DSTLOC.VROWS001
// 
// DCLGEN MEMBER:       DCL01020
// 
// I/O MODULE:          IO0000
// 
// KEY TO TABLE:        XWHCD
//                      XARCD
//                      SL4ZONE
//                      SL5ROWCD
// 
// MAINTENANCE HISTORY:
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      11/20/91  SPOPA   New record.
// 02retro  07/09/92  ryonke  Added new fields for Cole Haan
//                            snake logic - sl-cupl-zone-cd,
//                            sl-srt-zone-cd, sl-bin-dir-ind,
//                            sl-lvl-dir-ind. Renamed
//                            xxx-dir-ind to sl-row-dir-ind.
// ************************
Record VROWS001 type basicRecord
  5 VROWS001-RECORD VROWS001-RECORD ; 
    10 VROWS001-KEY VROWS001-KEY ; 
      15 XWHCD XWHCD ; 
      15 XARCD XARCD ; 
      15 SL4ZONE SL4ZONE ; 
      15 SL5ROWCD SL5ROWCD ; 
    10 SL-CUPL-ZONE-CD SL-CUPL-ZONE-CD ; 
    10 SL-SRT-ZONE-CD SL-SRT-ZONE-CD ; 
    10 SL-CUPL-ROW-CD SL-CUPL-ROW-CD ; 
    10 SL-SRT-ROW-CD SL-SRT-ROW-CD ; 
    10 SL-ROW-DIR-IND SL-ROW-DIR-IND ; 
    10 SL-BIN-DIR-IND SL-BIN-DIR-IND ; 
    10 SL-LVL-DIR-IND SL-LVL-DIR-IND ; 
    10 SL-PICK-LVL-IND SL-PICK-LVL-IND ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end VROWS001

// SL_BIN_DIR_IND
DataItem SL-BIN-DIR-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SL_CUPL_ROW_CD
DataItem SL-CUPL-ROW-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SL_CUPL_ZONE_CD
DataItem SL-CUPL-ZONE-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SL_LVL_DIR_IND
DataItem SL-LVL-DIR-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SL_PICK_LVL_IND
DataItem SL-PICK-LVL-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SL_ROW_DIR_IND
DataItem SL-ROW-DIR-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new case number
DataItem SL0EMCAS char(8)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// new stock locate class code
DataItem SL0EMSLC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Mezzanine location indicator
DataItem SL0EW-MEZZ-LOC-IND char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// number of cartons for wo size
DataItem SL0EW-NBR-CARTONS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// parse location field
DataItem SL0EW-PARSE-LOC num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// loc position 1 and 2
DataItem SL0EW-POS-1-2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// loc position 3 and 4
DataItem SL0EW-POS-3-4 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// loc position 5 and 6
DataItem SL0EW-POS-5-6 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sort row code
DataItem SL0EW-SRT-ROW-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sort row number
DataItem SL0EW-SRT-ROW-NBR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Setaside flag
DataItem SL0EW-STASDFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL0EW-TO-LOC char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// blank zone flag (y/n)
DataItem SL0EWBFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// blank case fld
DataItem SL0EWBKC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// blank pallet fld
DataItem SL0EWBKP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// row ctr table index
DataItem SL0EWCIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// row ctr tbl row cnt
DataItem SL0EWCRC num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// row ctr table row
DataItem SL0EWCRW char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// row counter table
DataItem SL0EWCTB char(10000)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp saved loc.s/row ctr
DataItem SL0EWCTR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cnt of tried loc.s/row
DataItem SL0EWCTT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cnt of used loc.s/row
DataItem SL0EWCTU num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current wo quantity
DataItem SL0EWCWQ num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// row ctr table zone
DataItem SL0EWCZN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// yesterdays date
DataItem SL0EWDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// location empty flag
DataItem SL0EWEMT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end while loop switch (y/n)
DataItem SL0EWESW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of tsq flag
DataItem SL0EWETQ char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// from area code
DataItem SL0EWFAC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// from area type
DataItem SL0EWFAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work storage flag
DataItem SL0EWFL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work storage flag
DataItem SL0EWFL2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work storage flag
DataItem SL0EWFL3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work storage flag
DataItem SL0EWFL4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work storage flag
DataItem SL0EWFL5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work storage flag
DataItem SL0EWFL6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// from w/o exists flag
DataItem SL0EWFWO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// from zone code
DataItem SL0EWFZC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// from zone process type
DataItem SL0EWFZP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// from zone type
DataItem SL0EWFZT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Location stored as alphanum
DataItem SL0EWGRP char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// item counter
DataItem SL0EWITC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last to area code
DataItem SL0EWLAR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// complete last key
DataItem SL0EWLK1 char(3)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// warehouse code
DataItem SL0EWLK3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last to location code
DataItem SL0EWLLC char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last multi-prod flag
DataItem SL0EWLMP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work location code
DataItem SL0EWLOC char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last row
DataItem SL0EWLRW char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// loc.s saved flag (y/n)
DataItem SL0EWLSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last short pallet flag
DataItem SL0EWLSP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data length
DataItem SL0EWLTH num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last wo/loc tbl index used
DataItem SL0EWLTX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last whse
DataItem SL0EWLWH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last to zone code
DataItem SL0EWLZN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max loc.s per row
DataItem SL0EWMLR num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// multiple prod flag
DataItem SL0EWMPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max saved loc.s
DataItem SL0EWMSL num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max saved loc.s per row
DataItem SL0EWMSR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Location stored as num
DataItem SL0EWNLC num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nbr sizes on screen
DataItem SL0EWNSS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of tsq records
DataItem SL0EWNTQ num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// number of workorders
DataItem SL0EWNWO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// setaside ok flag
DataItem SL0EWOK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warehouse owner group key
DataItem SL0EWONK char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws owner group code
DataItem SL0EWOWC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product exist flag
DataItem SL0EWPEX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// No. of pallets frm tabl flag
DataItem SL0EWPFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// row found in parm tbl flag
DataItem SL0EWPFLG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Saved parmeter table index
DataItem SL0EWPIX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Loctn - to add in VPARM101
DataItem SL0EWPLC char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max no. of rows in vparm
DataItem SL0EWPMX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// tot size qnty for prod
DataItem SL0EWPTO num(8)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Zone - to add in VPARM101
DataItem SL0EWPZN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ran out of loc.s ctr
DataItem SL0EWRAN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws calc fld
DataItem SL0EWRBQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// re-init. row cnts ctr
DataItem SL0EWRIN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work loc's row
DataItem SL0EWROW char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// return to stg date
DataItem SL0EWRTS int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// setaside exists flag
DataItem SL0EWSAF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save to area code
DataItem SL0EWSAR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// driver's initials/code
DataItem SL0EWSDR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// saved loc table index
DataItem SL0EWSIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save to location code
DataItem SL0EWSLC char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Search start location
DataItem SL0EWSLOC char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws calc fld
DataItem SL0EWSOH int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved prod sas id
DataItem SL0EWSPA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved zone/loc table
DataItem SL0EWSTB char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size qnty for prod
DataItem SL0EWSTO num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// product size counter
DataItem SL0EWSZC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save to zone code
DataItem SL0EWSZN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// to area code
DataItem SL0EWTAC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// to area type
DataItem SL0EWTAT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// wo/loc tbl
DataItem SL0EWTBL char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Temporary flag
DataItem SL0EWTFLG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// to location entered flag
DataItem SL0EWTLE char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// to w/o exists flag
DataItem SL0EWTWO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// to zone code
DataItem SL0EWTZC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// to zone process type
DataItem SL0EWTZP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// to zone type
DataItem SL0EWTZT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// used to area code
DataItem SL0EWUAC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// location stat update flag
DataItem SL0EWUFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// used to location
DataItem SL0EWULC char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// to loc upd.d switch (y/n)
DataItem SL0EWUSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// used work order number
DataItem SL0EWUWO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// used to zone code
DataItem SL0EWUZC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws warehouse code
DataItem SL0EWWHC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws calc fld
DataItem SL0EWWMQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// wo quantity
DataItem SL0EWWOQ num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ws calc fld
DataItem SL0EWWQR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage qty
DataItem SL0EWWQT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws calc fld
DataItem SL0EWWQY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work data line
DataItem SL0EWXDL char(134)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// data (line) length
DataItem SL0EWXLL num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// zone number stored as numeric
DataItem SLZONE-NUM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Key group level
DataItem VROWS001-KEY char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem VROWS001-RECORD char(28)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

