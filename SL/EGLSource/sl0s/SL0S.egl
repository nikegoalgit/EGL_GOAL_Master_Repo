package sl0s;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
import ww.common.*;
//*** PROGRAM=SL0S ****
// This application allows a user to change or remove the
// setaside id for given product,po, and receipt date.
// 
// The application works in the following manner. first, the
// user enters a po/product/receipt date for a setaside id.
// The program then returns a list of locations containing the
// products that meet the search criteria. The user decides
// whether they want to releive the products from setaside.
// when they have decided they press pf12 and all the product
// in the listed locations will be relieved from the 'from'
// setaside to the 'to' setaside or removed completely from
// setaside.
// 
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          05/15/90  ryonke  New application.
// 1        08/01/90  ryonke  fix vasitm01 logic to update row
//                            if row already exists.
// 2        10/09/90  sjohns  db2 table changes:
//                              - rename xsdcd to pc2inseg
//                              - rename xsacd to xegcd
//                              - init sy1unpcs to zero
// tbl chng 06/11/91  ryonke  init new table value for pcmrec.
// -------- 01/17/92  jwood   initialize w/s
// sl#s---- 08/25/92  jfiat   change io from dprod to dpick
// CANADA   08/25/95  CBRINE  Added call to SY2000. Added XCTCD
//                            to SLWREC.
// CANADA   12/14/95  PJAMES  Changes setaside codes for CANADA
//                            to 103 and 104.
//          02/20/96  PJAMES  Corrected problem with routine
//                            sl0s117 - falling threw code to
//                            error screen.
// y2kproj  02-03-98  oricha  y2k modifications:  sl0s152,
//                            sl0s153.
// pca999   03-26-98  jniese  change program to use new views
//                            for pohdr, po receipts, & prdcu.
// *********************
Program SL0S type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  IN1REC IN1REC; // record
  IN5REC IN5REC; // record
  IN6REC IN6REC; // record
  INAREC INAREC; // record
  INBREC INBREC; // record
  PKNREC PKNREC; // record
  SL0SW00 SL0SW00; // record
  SL0SW01 SL0SW01; // record
  SL6REC SL6REC; // record
  SLAREC SLAREC; // record
  SLJREC SLJREC; // record
  SLVREC SLVREC; // record
  SLWREC SLWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VFYPO002 VFYPO002; // record
  VPOHDR02 VPOHDR02; // record
  VPRDCU03 VPRDCU03; // record
  WSY2000 WSY2000; // record
  X2CREC X2CREC; // record
  X3CREC X3CREC; // record
  XSSLW01 XSSLW01; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XSLTBL {deleteAfterUse = yes}; // table
  use XPGTBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use SL0SM.SL0SM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPSL001: XPSL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set SL0SM001 initial; /* M001 input/output*/
    set SL0SW00 empty; /* Working storage*/
    set SL0SW01 empty; /* M001 display storage*/
    set INAREC empty; /**/
    set INBREC empty; /**/
    set IN1REC empty; /**/
    set IN5REC empty; /**/
    set IN6REC empty; /**/
    set VFYPO002 empty; /**/
    set VPRDCU03 empty; /**/
    set VPOHDR02 empty; /* po header*/
    set SL6REC empty; /**/
    set SLAREC empty; /**/
    set SLJREC empty; /**/
    set SLVREC empty; /**/
    set SQLCA empty; /* SQL communication area*/
    set PKNREC empty; /**/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA2REC empty; /**/
    set TA5REC empty; /* Temporary storage parameters*/
    set X2CREC empty; /**/
    set X3CREC empty; /**/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    SL0SW00.SL0SWSWD = "1"; /* Map to be displayed switch*/
    SL0SW00.SL0SWSWF = "Y"; /* Format the map switch*/
    SL0SW00.SL0SWSWR = "N"; /* Request for data switch*/


     /* ------------------------------------------------------------*/
     /* initialize screen with default values.*/
     /* ------------------------------------------------------------*/

    SL0SW01.SY2CLRID = "00 "; /* color id*/
    SL0SW01.XDMCD = "00"; /* dim code*/
    SL0SW01.XQACD = "01"; /* qual code*/
    SL0SW01.PC2INSEG = "000"; /* seg code*/
    SL0SW01.XSLCD = "000"; /* class code*/
    SL0SW01.XPGCD = "00"; /* pkg typ code*/
    SL0SW01.XUMCD = "01"; /* uom code*/
    SL0SW01.XOWCD = "00"; /* own grp code*/

     /* ------------------------------------------------------------*/
     /* If data was passed in the COMMAREA, use as the initial key.*/
     /* ------------------------------------------------------------*/

    if (COMMAREA.CAITEM > " ") /* Data was passed*/

      SL0SW01.XWHCD = COMMAREA.XWHCD; /* whse code*/
      SL0SW01.XGPCD = COMMAREA.XGPCD; /* gpc code*/

      COMMAREA.CAITEM = " "; /* Clear passed data*/

    end

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SL0S001; /* Converse the main process*/


    SL0S001: SL0S001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SL0S001; /* Converse the main process*/


  end // end main
end // end SL0S

// Main process to display a map
Function SL0S001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, indicate error and exit to Application Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (SL0SW00.SL0SWSWD == "1") /* Map 1 was requested*/

    /* ------------------------------------------------------------*/
     /* blank area/zone/location fields on the map*/
    /* ------------------------------------------------------------*/

    SL0SW00.SL0SWBIX = 1;

    while (SL0SW00.SL0SWBIX <= 30)
      SL0SM001.XARCD[SL0SWBIX] = " "; /* blank area*/
      SL0SM001.SL4ZONE[SL0SWBIX] = " "; /* blank zone*/
      SL0SM001.SL5LOCTN[SL0SWBIX] = " "; /* blank location*/
      SL0SW00.SL0SWBIX = SL0SW00.SL0SWBIX + 1;
    end

    SL0S100(); /* Display map 1*/

  else

    /* ------------------------------------------------------------*/
     /* Write the error to the Error Diagnosis Reporting Facility.*/
    /* ------------------------------------------------------------*/

    SLWREC.XXXLOCID = "001"; /* Module identification*/
    SLWREC.SLWMSGNO = 01; /* Indicate system error*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1LOC = "INVALID MAP NUMBER WAS REQUESTED";
    TA1REC.TA1MAPNO = SL0SW00.SL0SWSWD; /* Map number*/
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    /* ------------------------------------------------------------*/
     /* Exit to display the application system menu.*/
    /* ------------------------------------------------------------*/

    COMMAREA.CATOAP = "SL0M"; /* TO application*/

    XSSL001(); /* Exit to another application*/

    /* ------------------------------------------------------------*/
     /* Abnormally terminate the transaction if the exit failed.*/
    /* ------------------------------------------------------------*/

    TA1REC.TA1FUNC = "ABND"; /* Termination function*/

    call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  end

end // end SL0S001

// List the rows in the table
Function SL0S100()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SL0S110(); /* Obtain the data to display*/

  SL0S120(); /* Format and display the map*/

  SL0S130(); /* Check attention identifier*/

  SL0S140(); /* Reset fields to normal intensity*/

  SL0S150(); /* Verify the entered data*/

  SL0S160(); /* Process valid input request*/


end // end SL0S100

// Obtain the data to display
Function SL0S110()
   /* ------------------------------------------------------------*/
   /* get the current date*/
   /* ____________________________________________________________*/

  XSX2CDT();

   /* ------------------------------------------------------------*/
   /* get the current time*/
   /* ____________________________________________________________*/

  XSX3CTM();

   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (SL0SW00.SL0SWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* ------------------------------------------------------------*/

  SL0SW00.XXXTSLEN = 360; /* Temporary storage page length*/

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO == 0) /* No message to display*/
    SL0SW00.XXXTSPAG = 1; /* Page number to display*/
  end

   /* ------------------------------------------------------------*/
   /* Purge any existing pages from the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  SL0S111(); /* Purge any temporary storage*/

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  set SL6REC empty; /* clear syloc rec*/

  SL6REC.XARCD = "*"; /* wildcard area code*/
  SL6REC.SL4ZONE = "*"; /* wildcard zone code*/
  SL6REC.SL5LOCTN = "*"; /* wildcard loc code*/

  SL0S112(); /* Select set and open cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  SL0SW00.SL0SWIXM = 1; /* Display line index*/
  SL0SW00.SL0SWSWC = "N"; /* End of cursor switch*/
  SL0SW00.SL0SWTQT = 0; /* ZERO TOTAL QTY*/

  SL0SW00.SL0SWARS = " "; /* area save*/
  SL0SW00.SL0SWZNS = " "; /* zone save*/
  SL0SW00.SL0SWLCS = " "; /* loc save*/


  while (SL0SW00.SL0SWSWC == "N") /* Until end of cursor*/

    SL0S113(); /* Fetch next row in the cursor*/

    /* ------------------------------------------------------------*/
     /* if values are still wildcarded there was no data found*/
    /* ------------------------------------------------------------*/

    if (SL6REC.XARCD == "*"
     && SL6REC.SL4ZONE == "*"
     && SL6REC.SL5LOCTN == "*")
      SLWREC.XXXLOCID = "110"; /* module identification*/
      converseLib.validationFailed(12);
      SL6REC.XARCD = " ";
      SL6REC.SL4ZONE = " ";
      SL6REC.SL5LOCTN = " ";

      SL0S114(); /* Save data in display storage*/

    end

    if (SL0SW00.SL0SWSWC == "N") /* if not end of cursor*/
      SL0SW00.SL0SWTQT = SL0SW00.SL0SWTQT + SL6REC.SL6STASD; /* ADD TOT QTY*/
    end

    if (SL6REC.XARCD != SL0SW00.SL0SWARS   /* not eq area save*/
     || SL6REC.SL4ZONE != SL0SW00.SL0SWZNS /* not eq zone save*/
     || SL6REC.SL5LOCTN != SL0SW00.SL0SWLCS) /* not eq loc save*/

      SL0S114(); /* Save data in display storage*/

    end

    SL0SW00.SL0SWARS = SL6REC.XARCD; /* area save*/
    SL0SW00.SL0SWZNS = SL6REC.SL4ZONE; /* zone save*/
    SL0SW00.SL0SWLCS = SL6REC.SL5LOCTN; /* loc save*/


    /* ------------------------------------------------------------*/
     /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/

    if (SL0SW00.SL0SWIXM > 30) /* Page is full*/

      SL0S115(); /* Add page to temporary storage*/

      SL0SW00.SL0SWIXM = 1; /* Display line index*/

    end

  end

  SL0SM001.SL0SMTQT = SL0SW00.SL0SWTQT; /* move tot qty to screen*/

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (SL0SW00.SL0SWIXM > 1) /* Page was formatted*/
    SL0S115(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  SL0S116(); /* Close the selected set cursor*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (SL0SW00.TA5TSQIX == 0) /* No pages formatted*/

    SLWREC.XXXLOCID = "110"; /* Module identification*/
    SLWREC.SLWMSGNO = 44; /* Indicate no data to display*/

    return; /* Exit to continue processing*/

  end


   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  SL0SW00.SL0SWSWR = "N"; /* Request for data switch*/


end // end SL0S110

// Purge any temporary storage
Function SL0S111()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set SL0SW01 empty; /* M001 display storage*/

  SL0SW00.SL0SWSWU = "N"; /* Storage update switch*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  SL0SW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (SL0SW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "111"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0S111

// Select set and open cursor
Function SL0S112()
   /* ------------------------------------------------------------*/
   /* Select the requested rows from the table.*/
   /* ------------------------------------------------------------*/

  SL6REC.XWHCD = SL0SM001.XWHCD; /* whse*/
  SL6REC.XGPCD = SL0SM001.XGPCD; /* GPC*/
  SL6REC.SY1STNBR = SL0SM001.SY1STNBR; /* Style*/
  SL6REC.SY2CLRID = SL0SM001.SY2CLRID; /* color*/
  SL6REC.XDMCD = SL0SM001.XDMCD; /* dimension*/
  SL6REC.XQACD = SL0SM001.XQACD; /* quality*/
  SL6REC.PC2INSEG = SL0SM001.PC2INSEG; /* spec*/
  SL6REC.XEGCD = "000"; /* shade*/
  SL6REC.XSLCD = SL0SM001.XSLCD; /* class*/
  SL6REC.XPGCD = SL0SM001.XPGCD; /* pkg type*/
  SL6REC.XUMCD = SL0SM001.XUMCD; /* unit of measure*/
  SL6REC.XOWCD = SL0SM001.XOWCD; /* own grp*/
  if (SL0SM001.PC3PONBR > 0)
    SL6REC.PC3PONBR = SL0SM001.PC3PONBR; /* po number*/
  else
    SL6REC.PC3PONBR = SL0SW00.SL0SWSPN; /* po number*/
  end
  SL6REC.INASAID = SL0SM001.SL0SMFSA; /* sas id*/
  SL0SW01.SL0SWRMM = SL0SM001.SL0SMRMM; /* receipt month*/
  SL0SW01.SL0SWRDD = SL0SM001.SL0SMRDD; /* receipt day*/
  SL0SW01.SL0SWRYY = SL0SM001.SL0SMRYY; /* receipt year*/
  SL0SW00.SL0SWRMM = SL0SM001.SL0SMRMM; /* receipt month*/
  SL0SW00.SL0SWRDD = SL0SM001.SL0SMRDD; /* receipt day*/
  SL0SW00.SL0SWRYY = SL0SM001.SL0SMRYY; /* receipt year*/

  if (SL0SM001.SL0SMRYY < 60)
    SL0SW00.SL0SWRCC = 20;
  else
    SL0SW00.SL0SWRCC = 19;
  end

  SL6REC.SL6SADTE = SL0SW00.SL0SWRDT;

  try
    call "IO1470" ("S8", SQLCA, SL6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "112"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYLOC01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL6REC.SL6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0S112

// Fetch next row in the cursor
Function SL0S113()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1470" ("N8", SQLCA, SL6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
     /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      SL0SW00.SL0SWSWC = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "113"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYLOC01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL6REC.SL6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0S113

// Save data in display storage
Function SL0S114()
   /* ------------------------------------------------------------*/
   /* If the first line on a page, save the heading information.*/
   /* ------------------------------------------------------------*/

  if (SL0SW00.SL0SWIXM == 1) /* First line on page*/

    SL0SW01.XWHCD = SL6REC.XWHCD; /* whse*/
    SL0SW01.XGPCD = SL6REC.XGPCD; /* GPC*/
    SL0SW01.SY1STNBR = SL6REC.SY1STNBR; /* Style*/
    SL0SW01.SY2CLRID = SL6REC.SY2CLRID; /* color*/
    SL0SW01.XDMCD = SL6REC.XDMCD; /* dimension*/
    SL0SW01.XQACD = SL6REC.XQACD; /* quality*/
    SL0SW01.PC2INSEG = SL6REC.PC2INSEG; /* segment*/
    SL0SW01.XSLCD = SL6REC.XSLCD; /* class*/
    SL0SW01.XPGCD = SL6REC.XPGCD; /* pkg type*/
    SL0SW01.XUMCD = SL6REC.XUMCD; /* unit of measure*/
    SL0SW01.XOWCD = SL6REC.XOWCD; /* own grp*/
    SL0SW01.XOWCD = SL6REC.XOWCD; /* own grp*/
    SL0SW01.SL0SWPID = SL0SM001.SL0SMPID; /* po id*/
    SL0SW01.PC4ORTYP = SL0SM001.PC4ORTYP; /* order type*/
    SL0SW01.PC3PONBR = SL0SM001.PC3PONBR; /* po number*/
    SL0SW01.SL0SMFSA = SL0SM001.SL0SMFSA; /* from sas id*/
    SL0SW01.SL0SMTSA = SL0SM001.SL0SMTSA; /* to sas id*/
    SL0SW01.SL0SWRMM = SL0SW00.SL0SWRMM; /* receipt month*/
    SL0SW01.SL0SWRDD = SL0SW00.SL0SWRDD; /* receipt day*/
    SL0SW01.SL0SWRYY = SL0SW00.SL0SWRYY; /* receipt year*/

    /* ------------------------------------------------------------*/
     /* get life cycle code*/
    /* ------------------------------------------------------------*/

    SL0S117();

  end

   /* ------------------------------------------------------------*/
   /* If no table row was found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 100) /* Table row not found*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  SL0SW01.XARCD[SL0SWIXM] = SL6REC.XARCD; /* area*/
  SL0SW01.SL4ZONE[SL0SWIXM] = SL6REC.SL4ZONE; /* zone*/
  SL0SW01.SL5LOCTN[SL0SWIXM] = SL6REC.SL5LOCTN; /* location*/

  SL0SW00.SL0SWIXM = SL0SW00.SL0SWIXM + 1; /* Increment line index*/


end // end SL0S114

// Add page to temporary storage
Function SL0S115()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  SL0SW01.XXXTSLEN = SL0SW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (SL0SW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set SL0SW01 empty; /* M001 display storage*/

    SL0SW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    SL0SW00.SL0SWSIX = SL0SW00.SL0SWIXM; /* Highest save idx nbr*/
    SL0SW00.SL0SWSIX = SL0SW00.SL0SWSIX - 1; /* decrement index*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "115"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0S115

// Close selected set cursor
Function SL0S116()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1470" ("C8", SQLCA, SL6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close table set*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "116"; /* Module identification*/
  converseLib.validationFailed(01); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCOLOR01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0S116

// Select the heading information
Function SL0S117()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  set PKNREC empty; /* Clear row storage area*/

  PKNREC.XGPCD = SL0SM001.XGPCD; /* GPC*/
  PKNREC.SY1STNBR = SL0SM001.SY1STNBR; /* Style*/
  PKNREC.SY2CLRID = SL0SM001.SY2CLRID; /* color*/
  PKNREC.XDMCD = SL0SM001.XDMCD; /* dimension*/

  try
    call "IO1810" ("S ", SQLCA, PKNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      /* CANADA 08/25/95*/

      if (SLWREC.XCTCD == "CANA")

        /* format ta1rec in case of bad return code from call to SY2000*/

        TA1REC.TA1PGMNM = "SL0S"; /* CANA program name*/
        TA1REC.TA1LOC = "SL0S117"; /* CANA sgrp name*/

        XSSL-CALL-SY2000(); /* CANA call SY2000 to get*/
                              /* product region record*/
        if (WSY2000.WSY2000-RETURN-CODE == 0) /* CANA row found*/
          SL0S118(); /* move life cycle*/
          return;
        else
          if (WSY2000.WSY2000-RETURN-CODE == 02) /* CANA row not found*/
            SL0SW01.XLCCD = "**"; /* life cycle*/

            return; /* Return to previous process*/
          end
          TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
          TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

          SLWREC.XXXLOCID = "117"; /* Module identification*/
          if (WSY2000.WSY2000-RETURN-CODE == 98) /* CANA database busy*/
            converseLib.validationFailed(31); /* Indicate not available*/
            TA1REC.TA1FUNC = "POST"; /* Termination function*/

          else
            converseLib.validationFailed(01); /* Indicate system error*/
            TA1REC.TA1FUNC = "RETN"; /* Termination function*/

            converseLib.clearScreen();
             /* Clear screen before display*/
          end
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1LOC = "CALL SY2000";
          TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program appl*/
          TA1REC.TA1PGMNM = "SL0S117"; /* Program number*/
          TA1REC.TA1MAP = SLWREC.XXXMAPNM; /* Map name*/
          TA1REC.TA1DBASE = "DPROD  "; /* Data base name*/
          TA1REC.TA1TBLVU = "VSYREG02"; /* Table view name*/
          TA1REC.TA1TBLKE = PKNREC.PKNKEY; /* Table key*/

                              /* Error diagnosis routine*/
          call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

          exit stack; /* Exit to display map*/
        end
      else
        SL0S118(); /* move life cycle*/
        return; /* Return to previous process*/
      end
    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      SL0SW01.XLCCD = "**"; /* life cycle*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "117"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN STYLE NAME FOR HEADING";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPKSTY01"; /* Table view name*/
  TA1REC.TA1TBLKE = PKNREC.PKNKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0S117

// Select the heading information
Function SL0S118()
   /* ------------------------------------------------------------*/
   /* Good return from IO1810*/
   /* ------------------------------------------------------------*/

  if (PKNREC.SY2CEDT1 <= X2CREC.X2CCURDT
   && PKNREC.XLCCD1 != " ")
    SL0SW01.XLCCD = PKNREC.XLCCD1;
    return; /* Return to previous process*/
  end
  if (PKNREC.SY2CEDT2 <= X2CREC.X2CCURDT
   && PKNREC.XLCCD2 != " ")
    SL0SW01.XLCCD = PKNREC.XLCCD2;
    return; /* Return to previous process*/
  end
  if (PKNREC.SY2CEDT3 <= X2CREC.X2CCURDT
   && PKNREC.XLCCD3 != " ")
    SL0SW01.XLCCD = PKNREC.XLCCD3;
    return; /* Return to previous process*/
  end
  if (PKNREC.SY2CEDT4 <= X2CREC.X2CCURDT
   && PKNREC.XLCCD4 != " ")
    SL0SW01.XLCCD = PKNREC.XLCCD4;
    return; /* Return to previous process*/
  end

  SL0SW01.XLCCD = "**"; /* life cycle*/
end // end SL0S118

// Format and converse the map
Function SL0S120()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* rollback any db2 tables or close any open cursors.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0) /* Error was found*/
    VGVar.handleSysLibraryErrors = 1;
    sysLib.rollback(); /* rollback any db2*/
  end


   /* ------------------------------------------------------------*/
   /* move pf12 display message*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0 /* no error found*/
   && SLWREC.SLWMSGNO == 0)             /* no error found*/
    if (SL0SW00.SL0SWUMS == "Y")
      SLWREC.SLWMSGNO = 188; /* Message number*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (SL0SW00.SL0SWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (SL0SW00.SL0SWSWF == "Y") /* Map must be formatted*/
      SL0S121(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SL0SM001.XXXCURDT = X2CREC.X2CCURDT; /* Current date*/

  SL0SM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SL0SM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SL0SM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    SL0SM001.XXXLOCID = SLWREC.XXXLOCID; /* Module identification*/

    set SL0SM001 alarm; /* Indicate sound alarm*/

  end

  converse SL0SM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = " "; /* Module identification*/
  SLWREC.SLWMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  SL0SW00.SL0SWUMS = "N";

  COMMAREA.CATOAP = SL0SM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SL0SM001.CAITEM; /* Application data*/


end // end SL0S120

// Format the display data
Function SL0S121()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set SL0SM001 initial; /* M001 input/output area*/

  SL0SW00.SL0SWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (SL0SW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (SL0SW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the current page has been changed, update the page in*/
       /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (SL0SW00.SL0SWSWU == "Y") /* Current page was changed*/

        SL0SS01(); /* Update temporary storage page*/

        SL0SW00.SL0SWSWU = "N"; /* Storage update switch*/

      end

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (SL0SW00.XXXTSPAG > SL0SW00.TA5TSQIX) /* Desired greater highest*/
        SL0SW00.XXXTSPAG = SL0SW00.TA5TSQIX; /* Default to highest*/
      end

      SL0SS02(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set SL0SM001.XXXLITPG skip; /* "PAGE" literal*/
    SL0SM001.XXXTSPAG = SL0SW00.XXXTSPAG; /* Current page*/
    set SL0SM001.XXXLITOF skip; /* "OF" literal*/
    SL0SM001.TA5TSQIX = SL0SW00.TA5TSQIX; /* Highest page*/


  end

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  SL0SM001.XWHCD = SL0SW01.XWHCD; /* whse*/
  SL0SM001.XGPCD = SL0SW01.XGPCD; /* GPC*/
  SL0SM001.SY1STNBR = SL0SW01.SY1STNBR; /* Style*/
  SL0SM001.SY2CLRID = SL0SW01.SY2CLRID; /* color*/
  SL0SM001.XDMCD = SL0SW01.XDMCD; /* dimension*/
  SL0SM001.XQACD = SL0SW01.XQACD; /* quality*/
  SL0SM001.XLCCD = SL0SW01.XLCCD; /* life cycle*/
  SL0SM001.PC2INSEG = SL0SW01.PC2INSEG; /* segment*/
  SL0SM001.XSLCD = SL0SW01.XSLCD; /* class*/
  SL0SM001.XPGCD = SL0SW01.XPGCD; /* pkg type*/
  SL0SM001.XUMCD = SL0SW01.XUMCD; /* unit of measure*/
  SL0SM001.XOWCD = SL0SW01.XOWCD; /* own grp*/
  SL0SM001.SL0SMPID = SL0SW01.SL0SWPID; /* po id*/
  SL0SM001.PC4ORTYP = SL0SW01.PC4ORTYP; /* order type*/
  SL0SM001.PC3PONBR = SL0SW01.PC3PONBR; /* po number*/
  SL0SM001.SL0SMFSA = SL0SW01.SL0SMFSA; /* from sas id*/
  SL0SM001.SL0SMTSA = SL0SW01.SL0SMTSA; /* to sas id*/
  SL0SM001.SL0SMRMM = SL0SW01.SL0SWRMM; /* receipt month*/
  SL0SM001.SL0SMRDD = SL0SW01.SL0SWRDD; /* receipt day*/
  SL0SM001.SL0SMRYY = SL0SW01.SL0SWRYY; /* receipt year*/
  SL0SM001.SL0SMTQT = SL0SW00.SL0SWTQT; /* total qty*/


  SL0SW00.SL0SWIXM = 1; /* Initialize line index*/

  while (SL0SW00.SL0SWIXM <= 30 /* Until screen is full*/
   && SL0SW01.XARCD[SL0SWIXM] > " ") /* or end of data*/

    SL0SM001.XARCD[SL0SWIXM] = SL0SW01.XARCD[SL0SWIXM];
    SL0SM001.SL4ZONE[SL0SWIXM] = SL0SW01.SL4ZONE[SL0SWIXM];
    SL0SM001.SL5LOCTN[SL0SWIXM] = SL0SW01.SL5LOCTN[SL0SWIXM];

    SL0SW00.SL0SWIXM = SL0SW00.SL0SWIXM + 1; /* Increment line index*/

  end


end // end SL0S121

// Check attention identifier
Function SL0S130()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

     /* IF SL0SW00.SL0SWSWR EQ 'Y'    ; Request for data*/
       /* SET SL0SW01 EMPTY           ; M001 display storage*/
     /* END ;*/

    SL0S111(); /* purge temporary storage*/

    SL0SW01.SY2CLRID = "00 "; /* color id*/
    SL0SW01.XDMCD = "00"; /* dim code*/
    SL0SW01.XQACD = "01"; /* qual code*/
    SL0SW01.PC2INSEG = "000"; /* seg code*/
    SL0SW01.XSLCD = "000"; /* class code*/
    SL0SW01.XPGCD = "00"; /* pkg typ code*/
    SL0SW01.XUMCD = "01"; /* uom code*/
    SL0SW01.XOWCD = "00"; /* own grp code*/
    SL0SW00.SL0SWTQT = 0; /* zero total qty*/

    SL0SW00.SL0SWSWF = "Y"; /* Format the map switch*/
    SL0SW00.SL0SWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (SL0SM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      SL0S111(); /* Purge temporary storage*/

      XSSL001(); /* Exit to another application*/

      set SL0SM001.CATOAP cursor, bold; /* Highlight*/

    else

      SLWREC.XXXLOCID = "130"; /* Module identification*/
      converseLib.validationFailed(4); /* Indicate PF key not valid*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SL0SM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "SL0M"; /* TO application*/
    end

    SL0S111(); /* Purge temporary storage*/

    XSSL001(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf12) /* and PF8 was not pressed*/

    SLWREC.XXXLOCID = "130"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end SL0S130

// Reset highlighted fields
Function SL0S140()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SL0SM001.XWHCD initialAttributes; /* whse code*/
  set SL0SM001.XGPCD initialAttributes; /* gpc code*/
  set SL0SM001.SY1STNBR initialAttributes; /* style code*/
  set SL0SM001.SY2CLRID initialAttributes; /* color code*/
  set SL0SM001.XDMCD initialAttributes; /* dim code*/
  set SL0SM001.XQACD initialAttributes; /* qual code*/
  set SL0SM001.XLCCD initialAttributes; /* life cyc code*/
  set SL0SM001.PC2INSEG initialAttributes; /* seg code*/
  set SL0SM001.XSLCD initialAttributes; /* class code*/
  set SL0SM001.XPGCD initialAttributes; /* pkg typ code*/
  set SL0SM001.XUMCD initialAttributes; /* uom code*/
  set SL0SM001.XOWCD initialAttributes; /* own grp code*/
  set SL0SM001.SL0SMPID initialAttributes; /* po id*/
  set SL0SM001.PC4ORTYP initialAttributes; /* order typ*/
  set SL0SM001.PC3PONBR initialAttributes; /* po number*/
  set SL0SM001.SL0SMFSA initialAttributes; /* from sas*/
  set SL0SM001.SL0SMTSA initialAttributes; /* to sas*/

  set SL0SM001.CATOAP initialAttributes; /* TO application*/
  set SL0SM001.CAITEM initialAttributes; /* Application data*/


end // end SL0S140

// Verify data that was entered
Function SL0S150()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (SL0SM001.CAITEM > " ") /* Application data was entered*/

    SLWREC.XXXLOCID = "150"; /* Module identification*/
    set SL0SM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Enter only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    SL0S151(); /* Verify scroll request*/

  else

    /* ------------------------------------------------------------*/
     /* Verify data was entered in enterable fields*/
    /* ------------------------------------------------------------*/

    SL0S152(); /* verify data entered*/


    /* ------------------------------------------------------------*/
     /* Verify data is correct in enterable fields*/
    /* ------------------------------------------------------------*/

    SL0S153(); /* verify entered fields*/

  end
end // end SL0S150

// Verify scroll request
Function SL0S151()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && SL0SW00.XXXTSPAG < 2)       /* and no previous pages*/

    SLWREC.XXXLOCID = "151"; /* Module identification*/
    converseLib.validationFailed(7); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && SL0SW00.XXXTSPAG >= SL0SW00.TA5TSQIX) /* and no more pages*/

    SLWREC.XXXLOCID = "151"; /* Module identification*/
    converseLib.validationFailed(8); /* No more pages to display*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* ------------------------------------------------------------*/

  if (SL0SM001.SL0SMTSA != SL0SW01.SL0SMTSA) /* to setaside*/

    SLWREC.XXXLOCID = "151"; /* Module identification*/
    set SL0SM001.SL0SMTSA cursor, bold; /* Highlight*/
    converseLib.validationFailed(6); /* Modifications not allowed*/

  end

  if (SL0SM001.SL0SMFSA != SL0SW01.SL0SMFSA) /* from setaside*/

    SLWREC.XXXLOCID = "151"; /* Module identification*/
    set SL0SM001.SL0SMFSA cursor, bold; /* Highlight*/
    converseLib.validationFailed(6); /* Modifications not allowed*/

  end

  if (SL0SM001.PC3PONBR != SL0SW01.PC3PONBR) /* po number*/

    SLWREC.XXXLOCID = "151"; /* Module identification*/
    set SL0SM001.PC3PONBR cursor, bold; /* Highlight*/
    converseLib.validationFailed(6); /* Modifications not allowed*/

  end

  if (SL0SM001.PC4ORTYP != SL0SW01.PC4ORTYP) /* order type*/

    SLWREC.XXXLOCID = "151"; /* Module identification*/
    set SL0SM001.PC4ORTYP cursor, bold; /* Highlight*/
    converseLib.validationFailed(6); /* Modifications not allowed*/

  end

  if (SL0SM001.SL0SMPID != SL0SW01.SL0SWPID) /* po id*/

    SLWREC.XXXLOCID = "151"; /* Module identification*/
    set SL0SM001.SL0SMPID cursor, bold; /* Highlight*/
    converseLib.validationFailed(6); /* Modifications not allowed*/

  end

  if (SL0SM001.XOWCD != SL0SW01.XOWCD) /* owner grp*/

    SLWREC.XXXLOCID = "151"; /* Module identification*/
    set SL0SM001.XOWCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(6); /* Modifications not allowed*/

  end

  if (SL0SM001.XUMCD != SL0SW01.XUMCD) /* unit of measure*/

    SLWREC.XXXLOCID = "151"; /* Module identification*/
    set SL0SM001.XUMCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(6); /* Modifications not allowed*/

  end

  if (SL0SM001.XPGCD != SL0SW01.XPGCD) /* pkg typ*/

    SLWREC.XXXLOCID = "151"; /* Module identification*/
    set SL0SM001.XPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(6); /* Modifications not allowed*/

  end

  if (SL0SM001.XSLCD != SL0SW01.XSLCD) /* class code*/

    SLWREC.XXXLOCID = "151"; /* Module identification*/
    set SL0SM001.XSLCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(6); /* Modifications not allowed*/

  end

  if (SL0SM001.PC2INSEG != SL0SW01.PC2INSEG) /* in seg code*/

    SLWREC.XXXLOCID = "151"; /* Module identification*/
    set SL0SM001.PC2INSEG cursor, bold; /* Highlight*/
    converseLib.validationFailed(6); /* Modifications not allowed*/

  end

  if (SL0SM001.XQACD != SL0SW01.XQACD) /* quality code*/

    SLWREC.XXXLOCID = "151"; /* Module identification*/
    set SL0SM001.XQACD cursor, bold; /* Highlight*/
    converseLib.validationFailed(6); /* Modifications not allowed*/

  end

  if (SL0SM001.XDMCD != SL0SW01.XDMCD) /* dimension code*/

    SLWREC.XXXLOCID = "151"; /* Module identification*/
    set SL0SM001.XDMCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(6); /* Modifications not allowed*/

  end

  if (SL0SM001.SY2CLRID != SL0SW01.SY2CLRID) /* color code*/

    SLWREC.XXXLOCID = "151"; /* Module identification*/
    set SL0SM001.SY2CLRID cursor, bold; /* Highlight*/
    converseLib.validationFailed(6); /* Modifications not allowed*/

  end

  if (SL0SM001.SY1STNBR != SL0SW01.SY1STNBR) /* style code*/

    SLWREC.XXXLOCID = "151"; /* Module identification*/
    set SL0SM001.SY1STNBR cursor, bold; /* Highlight*/
    converseLib.validationFailed(6); /* Modifications not allowed*/

  end

  if (SL0SM001.XGPCD != SL0SW01.XGPCD) /* GPC changed*/

    SLWREC.XXXLOCID = "151"; /* Module identification*/
    set SL0SM001.XGPCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(6); /* Modifications not allowed*/

  end

  if (SL0SM001.SL0SMRYY != SL0SW01.SL0SWRYY) /* receipt year*/

    SLWREC.XXXLOCID = "151"; /* Module identification*/
    set SL0SM001.SL0SMRYY cursor, bold; /* Highlight*/
    converseLib.validationFailed(6); /* Modifications not allowed*/

  end

  if (SL0SM001.SL0SMRDD != SL0SW01.SL0SWRDD) /* receipt day*/

    SLWREC.XXXLOCID = "151"; /* Module identification*/
    set SL0SM001.SL0SMRDD cursor, bold; /* Highlight*/
    converseLib.validationFailed(6); /* Modifications not allowed*/

  end

  if (SL0SM001.SL0SMRMM != SL0SW01.SL0SWRMM) /* receipt month*/

    SLWREC.XXXLOCID = "151"; /* Module identification*/
    set SL0SM001.SL0SMRMM cursor, bold; /* Highlight*/
    converseLib.validationFailed(6); /* Modifications not allowed*/

  end


end // end SL0S151

// Verify data that was entered
Function SL0S152()

   /* ------------------------------------------------------------*/
   /* Verify from setaside value entered*/
   /* ------------------------------------------------------------*/

  if (SL0SM001.SL0SMFSA > 0) /* value gt zero*/

     /* NEXT SENTENCE*/

  else

    SLWREC.XXXLOCID = "152"; /* Module identification*/
    set SL0SM001.SL0SMFSA cursor, bold; /* Highlight*/
    converseLib.validationFailed(09); /* Indicate missing*/

  end

   /* ------------------------------------------------------------*/
   /* Verify po id or po number entered*/
   /* ------------------------------------------------------------*/

  if (SL0SM001.SL0SMPID == " " /* po id eq spaces*/
   && SL0SM001.PC4ORTYP == " " /* order type eq spaces*/
   && SL0SM001.PC3PONBR == 0)  /* po number eq zero*/
    SLWREC.XXXLOCID = "152"; /* Module identification*/
    set SL0SM001.SL0SMPID cursor, bold; /* Highlight*/
    set SL0SM001.PC4ORTYP bold; /* Highlight*/
    set SL0SM001.PC3PONBR bold; /* Highlight*/
    converseLib.validationFailed(09); /* Indicate missing*/
  else
    if (SL0SM001.SL0SMPID > " " /* po id gt psaces*/
     && SL0SM001.PC4ORTYP == " ") /* order type eq spaces*/
      SLWREC.XXXLOCID = "152"; /* Module identification*/
      set SL0SM001.PC4ORTYP cursor, bold; /* Highlight*/
      converseLib.validationFailed(09); /* Indicate missing*/
    else
      if (SL0SM001.PC4ORTYP > " "  /* order type gt spaces*/
       && SL0SM001.SL0SMPID == " " /* po id eq spaces*/
       && SL0SM001.PC3PONBR == 0)  /* po number eq zero*/
        SLWREC.XXXLOCID = "152"; /* Module identification*/
        set SL0SM001.SL0SMPID cursor, bold; /* Highlight*/
        set SL0SM001.PC3PONBR bold; /* Highlight*/
        converseLib.validationFailed(09); /* Indicate missing*/

      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Verify apparel only entered po number*/
   /* ------------------------------------------------------------*/

  if (SL0SM001.XGPCD == "03")
    if (SL0SM001.SL0SMPID > " "
     || SL0SM001.PC4ORTYP > " ")
      SLWREC.XXXLOCID = "152"; /* Module identification*/
      set SL0SM001.SL0SMPID cursor, bold; /* Highlight*/
      set SL0SM001.PC4ORTYP bold; /* Highlight*/
      converseLib.validationFailed(191); /* Invalid for apparel*/

    end
  end

   /* ------------------------------------------------------------*/
   /* Verify owner group value entered*/
   /* ------------------------------------------------------------*/

  if (SL0SM001.XOWCD > " ") /* value gt spaces*/

     /* NEXT SENTENCE*/

  else

    SLWREC.XXXLOCID = "152"; /* Module identification*/
    set SL0SM001.XOWCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(09); /* Indicate missing*/

  end


   /* ------------------------------------------------------------*/
   /* Verify unit of measure value entered*/
   /* ------------------------------------------------------------*/

  if (SL0SM001.XUMCD > " ") /* value gt spaces*/

     /* NEXT SENTENCE*/

  else

    SLWREC.XXXLOCID = "152"; /* Module identification*/
    set SL0SM001.XUMCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(09); /* Indicate missing*/

  end


   /* ------------------------------------------------------------*/
   /* Verify package type  value entered*/
   /* ------------------------------------------------------------*/

  if (SL0SM001.XPGCD > " ") /* value gt spaces*/

     /* NEXT SENTENCE*/

  else

    SLWREC.XXXLOCID = "152"; /* Module identification*/
    set SL0SM001.XPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(09); /* Indicate missing*/

  end


   /* ------------------------------------------------------------*/
   /* Verify package type  value entered*/
   /* ------------------------------------------------------------*/

  if (SL0SM001.XPGCD > " ") /* value gt spaces*/

     /* NEXT SENTENCE*/

  else

    SLWREC.XXXLOCID = "152"; /* Module identification*/
    set SL0SM001.XPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(09); /* Indicate missing*/

  end


   /* ------------------------------------------------------------*/
   /* Verify class code value entered*/
   /* ------------------------------------------------------------*/

  if (SL0SM001.XSLCD > " ") /* value gt spaces*/

     /* NEXT SENTENCE*/

  else

    SLWREC.XXXLOCID = "152"; /* Module identification*/
    set SL0SM001.XSLCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(09); /* Indicate missing*/

  end


   /* ------------------------------------------------------------*/
   /* Verify segment code value entered*/
   /* ------------------------------------------------------------*/

  if (SL0SM001.PC2INSEG > " ") /* value gt spaces*/

     /* NEXT SENTENCE*/

  else

    SLWREC.XXXLOCID = "152"; /* Module identification*/
    set SL0SM001.PC2INSEG cursor, bold; /* Highlight*/
    converseLib.validationFailed(09); /* Indicate missing*/

  end


   /* ------------------------------------------------------------*/
   /* Verify quality code value entered*/
   /* ------------------------------------------------------------*/

  if (SL0SM001.XQACD > " ") /* value gt spaces*/

     /* NEXT SENTENCE*/

  else

    SLWREC.XXXLOCID = "152"; /* Module identification*/
    set SL0SM001.XQACD cursor, bold; /* Highlight*/
    converseLib.validationFailed(09); /* Indicate missing*/

  end


   /* ------------------------------------------------------------*/
   /* Verify dimension code value entered*/
   /* ------------------------------------------------------------*/

  if (SL0SM001.XDMCD > " ") /* value gt spaces*/

     /* NEXT SENTENCE*/

  else

    SLWREC.XXXLOCID = "152"; /* Module identification*/
    set SL0SM001.XDMCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(09); /* Indicate missing*/

  end


   /* ------------------------------------------------------------*/
   /* Verify color code value entered*/
   /* ------------------------------------------------------------*/

  if (SL0SM001.SY2CLRID > " ") /* value gt spaces*/

     /* NEXT SENTENCE*/

  else

    SLWREC.XXXLOCID = "152"; /* Module identification*/
    set SL0SM001.SY2CLRID cursor, bold; /* Highlight*/
    converseLib.validationFailed(09); /* Indicate missing*/

  end


   /* ------------------------------------------------------------*/
   /* Verify style value entered*/
   /* ------------------------------------------------------------*/

  if (SL0SM001.SY1STNBR > " ") /* value gt spaces*/

     /* NEXT SENTENCE*/

  else

    SLWREC.XXXLOCID = "152"; /* Module identification*/
    set SL0SM001.SY1STNBR cursor, bold; /* Highlight*/
    converseLib.validationFailed(09); /* Indicate missing*/

  end


   /* ------------------------------------------------------------*/
   /* Verify gpc code value entered*/
   /* ------------------------------------------------------------*/

  if (SL0SM001.XGPCD > " ") /* value gt spaces*/

     /* NEXT SENTENCE*/

  else

    SLWREC.XXXLOCID = "152"; /* Module identification*/
    set SL0SM001.XGPCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(09); /* Indicate missing*/

  end


   /* ------------------------------------------------------------*/
   /* Verify receipt year value entered*/
   /* ------------------------------------------------------------*/

   /* ------- y2k out begin ---------------*/
   /* IF SL0SM001.SL0SMRYY GT 0;        /* value gt zero*/
    /* ;*/
    /* ; /* NEXT SENTENCE*/
    /* ;*/
   /* ELSE;*/
    /* ;*/
    /* MOVE '152' TO SLWREC.XXXLOCID;  /* Module identification*/
    /* SET SL0SM001.SL0SMRYY CURSOR,BRIGHT;   /* Highlight*/
    /* MOVE 09 TO EZEMNO;              /* Indicate missing*/
    /* ;*/
   /* END;*/

   /* ------- y2k out end -----------------*/

   /* ------------------------------------------------------------*/
   /* Verify receipt day value entered*/
   /* ------------------------------------------------------------*/

  if (SL0SM001.SL0SMRDD > 0) /* value gt zero*/

     /* NEXT SENTENCE*/

  else

    SLWREC.XXXLOCID = "152"; /* Module identification*/
    set SL0SM001.SL0SMRDD cursor, bold; /* Highlight*/
    converseLib.validationFailed(09); /* Indicate missing*/

  end


   /* ------------------------------------------------------------*/
   /* Verify receipt month value entered*/
   /* ------------------------------------------------------------*/

  if (SL0SM001.SL0SMRMM > 0) /* value gt zero*/

     /* NEXT SENTENCE*/

  else

    SLWREC.XXXLOCID = "152"; /* Module identification*/
    set SL0SM001.SL0SMRMM cursor, bold; /* Highlight*/
    converseLib.validationFailed(09); /* Indicate missing*/

  end


   /* ------------------------------------------------------------*/
   /* Verify warehouse code value entered*/
   /* ------------------------------------------------------------*/

  if (SL0SM001.XWHCD > " ") /* value gt spaces*/

     /* NEXT SENTENCE*/

  else

    SLWREC.XXXLOCID = "152"; /* Module identification*/
    set SL0SM001.XWHCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(09); /* Indicate missing*/

  end


   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end SL0S152

// Verify data that was entered
Function SL0S153()


   /* ------------------------------------------------------------*/
   /* Verify the to sas id*/
   /* ------------------------------------------------------------*/

  if (SL0SM001.SL0SMTSA > 0) /* to sas exists*/

    if (SL0SM001.SL0SMTSA == 62 /* whse 02 prod sas*/
     || SL0SM001.SL0SMTSA == 63 /* whse 03 prod sas*/
     || SL0SM001.SL0SMTSA == 64 /* whse 04 prod sas*/
     || SL0SM001.SL0SMTSA == 65 /* whse 07 prod sas*/
     || SL0SM001.SL0SMTSA == 66 /* whse 09 prod sas*/
     || SL0SM001.SL0SMTSA == 67 /* whse 12 prod sas*/
     || SL0SM001.SL0SMTSA == 68 /* whse 32 prod sas*/
     || SL0SM001.SL0SMTSA == 69 /* whse 51 prod sas*/
     || SL0SM001.SL0SMTSA == 103) /* whse 42 prod sas canada*/

      /* ------------------------------------------------------------*/
       /* If to setaside is production setaside indicate error.*/
      /* ------------------------------------------------------------*/

      SLWREC.XXXLOCID = "153"; /* Module identification*/
      set SL0SM001.SL0SMTSA cursor, bold; /* Highlight*/
      converseLib.validationFailed(189); /* to sas must be dist*/
    end

    set INAREC empty; /* clear sas hdr rec*/
    INAREC.INASAID = SL0SM001.SL0SMTSA; /* sas id*/

    SL0S159(); /* select sas hdr*/

    if (SQLCA.VAGen_SQLCODE == 0)

    else

      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/

      SLWREC.XXXLOCID = "153"; /* Module identification*/
      set SL0SM001.SL0SMTSA cursor, bold; /* Highlight*/
      converseLib.validationFailed(11); /* Indicate missing or invalid*/

    end

  end


   /* ------------------------------------------------------------*/
   /* Verify the from sas id*/
   /* ------------------------------------------------------------*/

  if (SL0SM001.SL0SMFSA > 0) /* from sas exists*/

    if (SL0SM001.SL0SMFSA == 62 /* whse 02 prod sas*/
     || SL0SM001.SL0SMFSA == 63 /* whse 03 prod sas*/
     || SL0SM001.SL0SMFSA == 64 /* whse 04 prod sas*/
     || SL0SM001.SL0SMFSA == 65 /* whse 07 prod sas*/
     || SL0SM001.SL0SMFSA == 66 /* whse 09 prod sas*/
     || SL0SM001.SL0SMFSA == 67 /* whse 12 prod sas*/
     || SL0SM001.SL0SMFSA == 68 /* whse 32 prod sas*/
     || SL0SM001.SL0SMFSA == 69 /* whse 51 prod sas*/
     || SL0SM001.SL0SMFSA == 103) /* whse 42 prod sas (canada)*/

      if (SL0SM001.SL0SMTSA == 0) /* to sas must exist*/

        /* ------------------------------------------------------------*/
         /* If from setaside production setaside to setaside must exist*/
        /* ------------------------------------------------------------*/

        SLWREC.XXXLOCID = "153"; /* Module identification*/
        set SL0SM001.SL0SMTSA cursor, bold; /* Highlight*/
        converseLib.validationFailed(190); /* to sas must exist*/
      end

    end

    set INAREC empty; /* clear sas hdr rec*/
    INAREC.INASAID = SL0SM001.SL0SMFSA; /* sas id*/

    SL0S159(); /* select sas hdr*/

    if (SQLCA.VAGen_SQLCODE == 0)

       /* NEXT SENTENCE*/

    else

      /* ------------------------------------------------------------*/
       /* If not found or inactive, indicate missing or invalid.*/
      /* ------------------------------------------------------------*/

      SLWREC.XXXLOCID = "153"; /* Module identification*/
      set SL0SM001.SL0SMFSA cursor, bold; /* Highlight*/
      converseLib.validationFailed(11); /* Indicate missing or invalid*/

    end

  end


   /* ------------------------------------------------------------*/
   /* Verify the po number exists*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    if (SL0SM001.PC3PONBR > 0)
      VPOHDR02.XGPCD = SL0SM001.XGPCD;
      VPOHDR02.PO-REG-CD = "01";
      VPOHDR02.PC3PONBR = SL0SM001.PC3PONBR;
      SL0S154(); /* calls po header by gpc, reg, po #*/
      if (converseVar.validationMsgNum != 0)
        set SL0SM001.PC3PONBR cursor, bold;
      end
    else
      if (SL0SM001.SL0SMPID > " ")
        SL0SW01.SL0SWPID = SL0SM001.SL0SMPID; /* These fields are for*/
        SL0SW00.SL0SWPID = SL0SM001.SL0SMPID; /* These fields are for*/

        if (SL0SW00.SL0SWPDT >= "000000"
         && SL0SW00.SL0SWPDT <= "999999")
          SL0SW00.SL0SWFPI = SL0SW00.SL0SWPDT; /* convert po id*/
          SL0SW00.SL0SWAPI = SL0SW00.SL0SWPDT; /* into po hdr fields*/
          /* ------- y2k out begin ---------*/
          /* IF SL0SW00.SL0SWFYR > '00'*/
           /* AND SL0SW00.SL0SWFYR < '60';*/
           /* MOVE '20' TO SL0SW00.SL0SWCCN;*/
          /* ELSE;*/
           /* MOVE '19' TO SL0SW00.SL0SWCCN;*/
          /* END;*/
          /* ------- y2k out end -----------*/
          /* ------- y2k in  begin ---------*/
          if (SL0SW00.SL0SWFYR > "60"
           && SL0SW00.SL0SWFYR <= "99")
            SL0SW00.SL0SWCCN = "19";
          else
            SL0SW00.SL0SWCCN = "20";
          end
          /* ------- y2k in end ------------*/
          SL0SW00.SL0SWCYR = SL0SW00.SL0SWFYR;
          SL0SW00.SL0SWCMD = SL0SW00.SL0SWFMD;
          VPOHDR02.XGPCD = SL0SM001.XGPCD;
          VPOHDR02.PCFSECD = " ";
          SL0SW00.SL0SWNMR = SL0SW00.SL0SWCMR;
          VPOHDR02.PC3POIDT = SL0SW00.SL0SWNMR;
          VPOHDR02.FY1FCTYC = SL0SW00.SL0SWFAC; /* fac = factory code*/
          VPOHDR02.PC4ORTYP = SL0SM001.PC4ORTYP; /* order type*/
          VPOHDR02.PO-REG-CD = "01"; /* po region*/
          SL0S155(); /* calls po header by po id*/
          SL0SW00.SL0SWSPN = VPOHDR02.PC3PONBR;
        else
          converseLib.validationFailed(11);
          SLWREC.XXXLOCID = "153";
        end
        if (converseVar.validationMsgNum != 0)
          set SL0SM001.SL0SMPID cursor, bold;
          set SL0SM001.PC4ORTYP bold;
        end
      end
    end
    if (SL0SM001.XGPCD == "03")
      if (SL0SM001.SL0SMPID > " "
       || SL0SM001.PC4ORTYP > " ")
        converseLib.validationFailed(191);
        set SL0SM001.SL0SMPID cursor, bold;
        set SL0SM001.PC4ORTYP bold;
      end
    end

    if (SL0SM001.SL0SMPID > " "
     && SL0SM001.PC4ORTYP > " "
     && SL0SM001.PC3PONBR > 0)
      converseLib.validationFailed(192);
      set SL0SM001.SL0SMPID cursor, bold;
      set SL0SM001.PC4ORTYP bold;
      set SL0SM001.PC3PONBR bold;
    end

  end


   /* ------------------------------------------------------------*/
   /* Verify the owner group code*/
   /* ------------------------------------------------------------*/

  if (SL0SM001.XOWCD in XOWTBL.XOWCD /* Code in table*/
   && XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

     /* NEXT SENTENCE*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    SLWREC.XXXLOCID = "153"; /* Module identification*/
    set SL0SM001.XOWCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(11); /* Indicate missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* Verify the unit of measure code*/
   /* ------------------------------------------------------------*/

  if (SL0SM001.XUMCD in XUMTBL.XUMCD /* Code in table*/
   && XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

     /* NEXT SENTENCE*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    SLWREC.XXXLOCID = "153"; /* Module identification*/
    set SL0SM001.XUMCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(11); /* Indicate missing or invalid*/

  end


   /* ------------------------------------------------------------*/
   /* Verify the package type code*/
   /* ------------------------------------------------------------*/

  if (SL0SM001.XPGCD in XPGTBL.XPGCD /* Code in table*/
   && XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

     /* NEXT SENTENCE*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    SLWREC.XXXLOCID = "153"; /* Module identification*/
    set SL0SM001.XPGCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(11); /* Indicate missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* Verify the class code*/
   /* ------------------------------------------------------------*/

  if (SL0SM001.XSLCD in XSLTBL.XSLCD /* Code in table*/
   && XSLTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

     /* NEXT SENTENCE*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    SLWREC.XXXLOCID = "153"; /* Module identification*/
    set SL0SM001.XSLCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(11); /* Indicate missing or invalid*/

  end


   /* ------------------------------------------------------------*/
   /* Verify the segment code (currently using spec code)*/
   /* ------------------------------------------------------------*/

  set VPRDCU03 empty; /* clear rec in storage*/

  VPRDCU03.XGPCD = SL0SM001.XGPCD;
  VPRDCU03.PC2INSEG = SL0SM001.PC2INSEG;
  call "VPRDCU03" ("SG", SQLCA, VPRDCU03) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0 /* row exists*/
   && VPRDCU03.XXXSTAT == "A")  /* and active status*/

     /* NEXT SENTENCE*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    SLWREC.XXXLOCID = "153"; /* Module identification*/
    set SL0SM001.PC2INSEG cursor, bold; /* Highlight*/
    converseLib.validationFailed(11); /* Indicate missing or invalid*/

  end


   /* ------------------------------------------------------------*/
   /* Verify the quality code*/
   /* ------------------------------------------------------------*/

  if (SL0SM001.XQACD in XQATBL.XQACD /* Code in table*/
   && XQATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

     /* NEXT SENTENCE*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    SLWREC.XXXLOCID = "153"; /* Module identification*/
    set SL0SM001.XQACD cursor, bold; /* Highlight*/
    converseLib.validationFailed(11); /* Indicate missing or invalid*/

  end


   /* ------------------------------------------------------------*/
   /* Verify the dimension code*/
   /* ------------------------------------------------------------*/

  if (SL0SM001.XDMCD in XDMTBL.XDMCD /* Code in table*/
   && XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

     /* NEXT SENTENCE*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    SLWREC.XXXLOCID = "153"; /* Module identification*/
    set SL0SM001.XDMCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(11); /* Indicate missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* Verify the gpc code*/
   /* ------------------------------------------------------------*/

  if (SL0SM001.XGPCD in XGPTBL.XGPCD /* Code in table*/
   && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

     /* NEXT SENTENCE*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    SLWREC.XXXLOCID = "153"; /* Module identification*/
    set SL0SM001.XGPCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(11); /* Indicate missing or invalid*/

  end


   /* ------------------------------------------------------------*/
   /* Verify the receipt day*/
   /* ------------------------------------------------------------*/

  if (SL0SM001.SL0SMRDD > 0 /* receipt day gt zero*/
   && SL0SM001.SL0SMRDD <= 31) /* receipt day le 31*/

     /* NEXT SENTENCE*/

  else

    /* ------------------------------------------------------------*/
     /* day not within valid range*/
    /* ------------------------------------------------------------*/

    SLWREC.XXXLOCID = "153"; /* Module identification*/
    set SL0SM001.SL0SMRDD cursor, bold; /* Highlight*/
    converseLib.validationFailed(11); /* Indicate missing or invalid*/

  end


   /* ------------------------------------------------------------*/
   /* Verify the receipt month*/
   /* ------------------------------------------------------------*/

  if (SL0SM001.SL0SMRMM > 0 /* receipt month gt zero*/
   && SL0SM001.SL0SMRMM <= 12) /* receipt month le 12*/

     /* NEXT SENTENCE*/

  else

    /* ------------------------------------------------------------*/
     /* month not within valid range*/
    /* ------------------------------------------------------------*/

    SLWREC.XXXLOCID = "153"; /* Module identification*/
    set SL0SM001.SL0SMRMM cursor, bold; /* Highlight*/
    converseLib.validationFailed(11); /* Indicate missing or invalid*/

  end


   /* ------------------------------------------------------------*/
   /* Verify the warehouse code.*/
   /* ------------------------------------------------------------*/

  if (SL0SM001.XWHCD in XWHTBL.XWHCD /* Code in table*/
   && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

    SLWREC.XCTCD = XWHTBL.XCTCD[sysVar.arrayIndex]; /* CANA save country cd*/

  else

    /* ------------------------------------------------------------*/
     /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    SLWREC.XXXLOCID = "153"; /* Module identification*/
    set SL0SM001.XWHCD cursor, bold; /* Highlight*/
    converseLib.validationFailed(11); /* Indicate missing or invalid*/

  end


   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end


end // end SL0S153

// select unique po header
Function SL0S154()


   /* ************************************************************/
   /* *** select unique row from:  purchase order hdr         ****/
   /* *** using the std module:  vpohdr02                     ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -811 = duplicate records found                    ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* ************************************************************/

  call "VPOHDR02" ("S ", SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    converseLib.validationFailed(0012); /* invalid data*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -811)
    converseLib.validationFailed(0001); /* severe error dup row found*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(0031); /* deadlock try again*/
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "SL0S154 ";
  TA1REC.TA1LOCAT[1] = "VPOHDR02";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DPRODC  ";
  TA1REC.TA1TBLVU = "VPOHDR02";
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0S154

// declare po header cursor
Function SL0S155()


   /* ************************************************************/
   /* *** select set # 1 control from:  purchase order hdr    ****/
   /* *** using the std module:  vpohdr02                     ****/
   /* ************************************************************/

  SL0S156(); /* select cursor*/

  if (SQLCA.VAGen_SQLCODE == 0)
    SL0S157(); /* fetch cursor*/

    if (SQLCA.VAGen_SQLCODE == 0)
      converseLib.validationFailed(0011); /* invalid data*/
    end

  else
    if (SQLCA.VAGen_SQLCODE == +100)
      converseLib.validationFailed(0012); /* data not found*/

    else
      if (SQLCA.VAGen_SQLCODE == -911) /* deadlock try again*/
        converseLib.validationFailed(0031);

      else
        converseLib.validationFailed(0001); /* severe error*/
      end
    end
  end

  SL0S158(); /* close cursor*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0S155

// select from po header cursor
Function SL0S156()


   /* ************************************************************/
   /* *** select set of rows from:  po hdr                    ****/
   /* *** using the std module:  vpohdr02                     ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique field values for:            ****/
   /* ***   xwhcd                                             ****/
   /* ***   pc3poidt                                          ****/
   /* ***   pcfsecd                                           ****/
   /* ***   fy1fcty1                                          ****/
   /* ***   pc4ortyp                                          ****/
   /* ***   po-reg-cd                                         ****/
   /* *** the order by for this select set is:                ****/
   /* ***   pc3ponbr                                          ****/
   /* *** note: order is the same as select plus size         ****/
   /* ************************************************************/

  call "VPOHDR02" ("S1", SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "SL0S156 ";
    TA1REC.TA1LOCAT[1] = "VPOHDR02";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DPRODC  ";
    TA1REC.TA1TBLVU = "VPOHDR02";
    TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** note: fetch handles return code correctly           ****/
   /* ************************************************************/

  SL0S157(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0S156

// fetch from po header cursor
Function SL0S157()


   /* ************************************************************/
   /* *** fetch next row from:  po hdr                        ****/
   /* *** using the std module:  vpohdr02                     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ************************************************************/

  call "VPOHDR02" ("N1", SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "SL0S157 ";
  TA1REC.TA1LOCAT[1] = "VPOHDR02";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DPRODC  ";
  TA1REC.TA1TBLVU = "VPOHDR02";
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0S157

// close po header cursor
Function SL0S158()


   /* ************************************************************/
   /* *** close select set of:  po hdr                        ****/
   /* *** using the std module:  vpohdr02                     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  call "VPOHDR02" ("C1", SQLCA, VPOHDR02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "SL0S158 ";
  TA1REC.TA1LOCAT[1] = "VPOHDR02";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SELECT  ";
  TA1REC.TA1DBASE = "DPRODC  ";
  TA1REC.TA1TBLVU = "VPOHDR02";
  TA1REC.TA1TBLKE = VPOHDR02.VPOHDR02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0S158

// Select setaside hdr unique
Function SL0S159()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0940" ("S ", SQLCA, INAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* row not found*/

        converseLib.validationFailed(12); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      end
      if (SQLCA.VAGen_SQLCODE == -911) /* and resource not available*/

        converseLib.validationFailed(31); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else

        converseLib.validationFailed(01); /* Indicate system error*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "159"; /* Module identification*/
  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN SAS HEADER";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DINVNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VASHDR01"; /* Table view name*/
  TA1REC.TA1TBLKE = INAREC.INADATA; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

end // end SL0S159

// Process valid input request
Function SL0S160()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/

  SL0SW00.SL0SWSWF = "Y"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* Update the modifiable data in the COMMAREA.*/
   /* ------------------------------------------------------------*/

  COMMAREA.XWHCD = SL0SM001.XWHCD; /* whse code*/

   /* ------------------------------------------------------------*/
   /* If the search key was changed, save the search information.*/
   /* ------------------------------------------------------------*/

  if (SL0SM001.XWHCD != SL0SW01.XWHCD       /* whse changed*/
   || SL0SM001.SL0SMRMM != SL0SW01.SL0SWRMM /* recpt month changed*/
   || SL0SM001.SL0SMRDD != SL0SW01.SL0SWRDD /* recpt day changed*/
   || SL0SM001.SL0SMRYY != SL0SW01.SL0SWRYY /* recpt year changed*/
   || SL0SM001.XGPCD != SL0SW01.XGPCD       /* gpc changed*/
   || SL0SM001.SY1STNBR != SL0SW01.SY1STNBR /* style changed*/
   || SL0SM001.SY2CLRID != SL0SW01.SY2CLRID /* color changed*/
   || SL0SM001.XDMCD != SL0SW01.XDMCD       /* dim changed*/
   || SL0SM001.XQACD != SL0SW01.XQACD       /* quality changed*/
   || SL0SM001.PC2INSEG != SL0SW01.PC2INSEG /* in seg changed*/
   || SL0SM001.XSLCD != SL0SW01.XSLCD       /* class changed*/
   || SL0SM001.XPGCD != SL0SW01.XPGCD       /* pkg typ changed*/
   || SL0SM001.XUMCD != SL0SW01.XUMCD       /* uom changed*/
   || SL0SM001.SL0SMPID != SL0SW01.SL0SWPID /* po id changed*/
   || SL0SM001.PC4ORTYP != SL0SW01.PC4ORTYP /* order typ changed*/
   || SL0SM001.PC3PONBR != SL0SW01.PC3PONBR /* po nbr changed*/
   || SL0SM001.SL0SMFSA != SL0SW01.SL0SMFSA /* from sas changed*/
   || SL0SM001.SL0SMTSA != SL0SW01.SL0SMTSA) /* to sas changed*/

    /* ------------------------------------------------------------*/
     /* If a search key was entered, request the data to display.*/
    /* ------------------------------------------------------------*/

    SL0SW00.SL0SWSWR = "Y"; /* Request for data switch*/
    SL0SW00.SL0SWUMS = "Y"; /* display pf12 message switch*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    SL0SW00.XXXTSPAG = SL0SW00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    SL0SW00.XXXTSPAG = SL0SW00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If enter is pressed select the data again. this will*/
   /* redisplay the current data on the map. rollback any db2*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* no action requested*/

    SL0SW00.SL0SWSWR = "Y"; /* Request for data switch*/
    SL0SW00.SL0SWUMS = "Y"; /* display pf12 message switch*/

    VGVar.handleSysLibraryErrors = 1;
    sysLib.rollback();

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* initialize working storage save quantities for syloc*/
   /* ------------------------------------------------------------*/

  SL0SW00.SL0SWQIX = 1; /* save qty index*/

  while (SL0SW00.SL0SWQIX <= 40)
    SL0SW00.SL0SWSQT[SL0SWQIX] = 0; /* move zeros to qty buckets*/
    SL0SW00.SL0SWQIX = SL0SW00.SL0SWQIX + 1; /* increment index*/
  end

   /* ------------------------------------------------------------*/
   /* process for all locations in temp storage*/
   /* ------------------------------------------------------------*/

  SL0SW00.XXXTSPAG = 1; /* initialize temp page*/

  while (SL0SW00.XXXTSPAG <= SL0SW00.TA5TSQIX) /* le max temp pages*/

    SL0SS02(); /* read temp storage*/

    SL0SW00.SL0SWIXM = 1; /* Initialize line index*/

    if (SL0SW00.XXXTSPAG == SL0SW00.TA5TSQIX) /* if last temp page*/
      SL0SW00.SL0SWRIX = SL0SW00.SL0SWSIX; /* highest row value*/
    else
      SL0SW00.SL0SWRIX = 30; /* process all rows*/
    end

    while (SL0SW00.SL0SWIXM <= SL0SW00.SL0SWRIX) /* Until end of rows*/

      SL0SW00.SL0SWSWC = "N"; /* end of cursor*/

      set SL6REC empty; /* clear syloc rec*/

      SL6REC.XARCD = SL0SW01.XARCD[SL0SWIXM]; /* unique area*/
      SL6REC.SL4ZONE = SL0SW01.SL4ZONE[SL0SWIXM]; /* unique zone*/
      SL6REC.SL5LOCTN = SL0SW01.SL5LOCTN[SL0SWIXM]; /* unique loc*/

      SL0S112(); /* build syloc cursor*/

      while (SL0SW00.SL0SWSWC == "N") /* not end of cursor*/

        SL0S113(); /* fetch syloc cursor*/

        if (SL0SW00.SL0SWSWC == "N") /* not end of cursor*/
          SL0S161(); /* process sl tables*/
        end

      end

      SL0S116(); /* close syloc cursor*/

      SL0SW00.SL0SWIXM = SL0SW00.SL0SWIXM + 1; /* Increment line index*/

    end

    SL0SW00.XXXTSPAG = SL0SW00.XXXTSPAG + 1; /* Increment page index*/

  end

  SL0S165(); /* process inv. tables*/

   /* ------------------------------------------------------------*/
   /* procees these tables only if a production setaside*/
   /* ------------------------------------------------------------*/

  if (SL0SM001.SL0SMFSA == 62 /* whse 02 prod sas*/
   || SL0SM001.SL0SMFSA == 63 /* whse 03 prod sas*/
   || SL0SM001.SL0SMFSA == 64 /* whse 04 prod sas*/
   || SL0SM001.SL0SMFSA == 65 /* whse 07 prod sas*/
   || SL0SM001.SL0SMFSA == 66 /* whse 09 prod sas*/
   || SL0SM001.SL0SMFSA == 67 /* whse 12 prod sas*/
   || SL0SM001.SL0SMFSA == 68 /* whse 32 prod sas*/
   || SL0SM001.SL0SMFSA == 69 /* whse 51 prod sas*/
   || SL0SM001.SL0SMFSA == 103) /* Canada whse prod sas*/

    /* ------------------------------------------------------------*/
     /* load data into prod. sas audit row*/
    /* ------------------------------------------------------------*/

    SLJREC.XWHCD = SL0SM001.XWHCD; /* whse cd*/
    SLJREC.SLJSASRL = "T"; /* sas rel code*/
    SLJREC.INASAID = SL0SM001.SL0SMFSA; /* sas id*/
    SLJREC.SL1CRTDT = SL0SW00.SL0SWRDT; /* create date*/
    SLJREC.XGPCD = SL0SM001.XGPCD; /* gpd cd*/
    SLJREC.SY1STNBR = SL0SM001.SY1STNBR; /* style nbr*/
    SLJREC.SY2CLRID = SL0SM001.SY2CLRID; /* color id*/
    SLJREC.XDMCD = SL0SM001.XDMCD; /* dim cd*/
    SLJREC.XQACD = SL0SM001.XQACD; /* qual cd*/
    SLJREC.XOWCD = SL0SM001.XOWCD; /* own grp cd*/
    SLJREC.PC2INSEG = SL0SM001.PC2INSEG; /* in seg cd*/
    SLJREC.XPGCD = SL0SM001.XPGCD; /* pkg typ cd*/
    SLJREC.XUMCD = SL0SM001.XUMCD; /* uom cd*/
    SLJREC.XSLCD = SL0SM001.XSLCD; /* class cd*/
    SLJREC.XARCD = SL0SM001.XARCD; /* area cd*/
    SLJREC.SL4ZONE = SL0SM001.SL4ZONE; /* zone cd*/
    SLJREC.SL5LOCTN = SL0SM001.SL5LOCTN; /* loc cd*/
    if (SL0SM001.PC3PONBR > 0)
      SLJREC.PC3PONBR = SL0SM001.PC3PONBR; /* po nbr*/
    else
      SLJREC.PC3PONBR = SL0SW00.SL0SWSPN; /* po nbr*/
    end
    SLJREC.ZZZSDT = X2CREC.X2CCURDT; /* setup date*/
    SLJREC.ZZZSTM = X3CREC.X3CCURST; /* setup time*/

    SL0S16C(); /* insert sl prod sas*/

    /* ------------------------------------------------------------*/
     /* load data into po. receipt fypo row*/
    /* ------------------------------------------------------------*/

    VFYPO002.FY1FCTYC = "*"; /* delete with iomod change*/

    VFYPO002.YRSCD = "12"; /* receipt status*/
    VFYPO002.XGPCD = SL0SM001.XGPCD; /* gpd cd*/
    VFYPO002.PO-REG-CD = "01"; /* region cd*/
    if (SL0SM001.PC3PONBR > 0)
      VFYPO002.PC3PONBR = SL0SM001.PC3PONBR; /* po nbr*/
    else
      VFYPO002.PC3PONBR = SL0SW00.SL0SWSPN; /* po nbr*/
    end
    VFYPO002.SY1STNBR = SL0SM001.SY1STNBR; /* style nbr*/
    VFYPO002.SY2CLRID = SL0SM001.SY2CLRID; /* color id*/
    VFYPO002.XDMCD = SL0SM001.XDMCD; /* dim cd*/
    VFYPO002.XQACD = SL0SM001.XQACD; /* qual cd*/
    VFYPO002.XOWCD = SL0SM001.XOWCD; /* own grp cd*/
    VFYPO002.PC2INSEG = SL0SM001.PC2INSEG; /* in seg cd*/
    VFYPO002.XPGCD = SL0SM001.XPGCD; /* pkg typ cd*/
    VFYPO002.XUMCD = SL0SM001.XUMCD; /* uom cd*/
    VFYPO002.XWHCD = SL0SM001.XWHCD; /* whse cd*/
    VFYPO002.TSHRCTDT = SL0SW00.SL0SWRDT; /* create date*/
    VFYPO002.OP1CUOID = 0; /* cust ord id*/
    VFYPO002.OP1NORID = 0; /* nike ord id*/
    VFYPO002.OP1PARTN = " "; /* ord part char*/

    SL0SW00.SL0SWFCS = "N"; /* fypo cursor switch*/

    SL0S16D(); /* build fypo cursor*/

    if (SQLCA.VAGen_SQLCODE == 0)

      SL0S16G(); /* fetch fypo table*/

      while (SL0SW00.SL0SWFCS == "N") /* not cursor eof*/

        SL0S16I(); /* delete fypo row*/

        VFYPO002.YRSCD = "11"; /* receipt status*/
        VFYPO002.PCMYRSDT = X2CREC.X2CCURDT; /* receipt stat date*/
        VFYPO002.ZZZCHGDT = X2CREC.X2CCURDT; /* update change date*/
        VFYPO002.PCMYRSTM = X3CREC.X3CCURST; /* receipt sata time*/
        VFYPO002.ZZZCHGTM = X3CREC.X3CCURST; /* update change time*/

        SL0S16J(); /* insert fypo row*/

        SL0S16G(); /* fetch fypo table*/

      end

    end

    SL0S16H(); /* close fypo cursor*/

  end

  VGVar.handleSysLibraryErrors = 1;
  sysLib.commit();

  converseLib.validationFailed(20); /* transaction complete*/

end // end SL0S160

// Process stock locate tables
Function SL0S161()
   /* ------------------------------------------------------------*/
   /* load syloc data into slaud for inserts*/
   /* ------------------------------------------------------------*/

  set SLAREC empty; /* clear sl audit record*/

  SLAREC.XWHCD = SL6REC.XWHCD; /* xwh code*/
  SLAREC.IN5TRDCD = "S"; /* doc code*/
  SLAREC.IN5TRSUB = 0; /* sub code*/
  SLAREC.XGPCD = SL6REC.XGPCD; /* gpc code*/
  SLAREC.SY1STNBR = SL6REC.SY1STNBR; /* style nbr*/
  SLAREC.SY2CLRID = SL6REC.SY2CLRID; /* color id*/
  SLAREC.XDMCD = SL6REC.XDMCD; /* dim code*/
  SLAREC.XQACD = SL6REC.XQACD; /* qual code*/
  SLAREC.XOWCD = SL6REC.XOWCD; /* own grp code*/
  SLAREC.XSDCD = SL6REC.PC2INSEG; /* spec code*/
  SLAREC.XSACD = SL6REC.XEGCD; /* shd code*/
  SLAREC.XPGCD = SL6REC.XPGCD; /* pkg typ code*/
  SLAREC.XUMCD = SL6REC.XUMCD; /* uom code*/
  SLAREC.XSLCD = SL6REC.XSLCD; /* class code*/
  SLAREC.SY5SZID = SL6REC.SY5SZID; /* size id*/
  SLAREC.XIFCD = "04"; /* xif code*/
  SLAREC.XITCD = "80"; /* xit code*/
  SLAREC.XIRCD = "901"; /* xir code*/
  SLAREC.IN5TRREF = " "; /* ref nbr*/
  SLAREC.XARCD = SL6REC.XARCD; /* area code*/
  SLAREC.SL4ZONE = SL6REC.SL4ZONE; /* zone code*/
  SLAREC.SL5LOCTN = SL6REC.SL5LOCTN; /* loc code*/
  SLAREC.SL2PALET = SL6REC.SL2PALET; /* palet nbr*/
  SLAREC.SL2CASE = SL6REC.SL2CASE; /* case nbr*/
  SLAREC.SLATRBY = COMMAREA.CAUSERID; /* user id*/
  SLAREC.SLATRDTE = X2CREC.X2CCURDT; /* trans date*/
  SLAREC.ZZZSDT = X2CREC.X2CCURDT; /* setup date*/
  SLAREC.ZZHHMMSS = X3CREC.X3CCURTM; /* setup time*/

   /* ------------------------------------------------------------*/
   /* accumulate syloc qtys by size*/
   /* ------------------------------------------------------------*/

  SL0SW00.SL0SWQIX = SL6REC.SY5SZID; /* set index to size*/
  SL0SW00.SL0SWSQT[SL0SWQIX] = SL0SW00.SL0SWSQT[SL0SWQIX] + SL6REC.SL6STASD;

  SL0S162(); /* read syloc unique*/

  SL6REC.ZZZCHGDT = X2CREC.X2CCURDT; /* change date*/
  SL6REC.ZZZCHGTM = X3CREC.X3CCURST; /* change time*/

  if (SL0SM001.SL0SMTSA > 0) /* to sas entered*/

    SL6REC.INASAID = SL0SW01.SL0SMTSA; /* to sas*/

    SL0S163(); /* update syloc*/

    SLAREC.IN5TRDOC = SL0SW01.SL0SMTSA; /* doc nbr*/
    SL0SW00.SL0SWDOC = SL0SW01.SL0SMTSA; /* ws doc nbr*/
    SLAREC.IN5TRPRT = SL0SW00.SL0SWPRT; /* part nbr*/
    SLAREC.SLATRQTY = SL6REC.SL6STASD; /* slaud sas qty*/

    SL0S164(); /* insert slaud*/

    SLAREC.IN5TRDOC = SL0SW01.SL0SMFSA; /* doc nbr*/
    SL0SW00.SL0SWDOC = SL0SW01.SL0SMFSA; /* ws doc nbr*/
    SLAREC.IN5TRPRT = SL0SW00.SL0SWPRT; /* part nbr*/
    SLAREC.SLATRQTY = 0; /* zero slaud qty*/
    SLAREC.SLATRQTY = SLAREC.SLATRQTY - SL6REC.SL6STASD; /* slaud sas qty*/

    SL0S164(); /* insert slaud*/

  else

    SLAREC.IN5TRDOC = SL0SW01.SL0SMFSA; /* doc nbr*/
    SL0SW00.SL0SWDOC = SL0SW01.SL0SMFSA; /* ws doc nbr*/
    SLAREC.IN5TRPRT = SL0SW00.SL0SWPRT; /* part nbr*/
    SLAREC.SLATRQTY = 0; /* zero slaud qty*/
    SLAREC.SLATRQTY = SLAREC.SLATRQTY - SL6REC.SL6STASD; /* slaud sas qty*/

    SL0S164(); /* insert slaud*/

    SL6REC.INASAID = 0; /* zero sas id*/
    SL6REC.SL6SADTE = 0; /* zero sas date*/
    SL6REC.SL6STASD = 0; /* zero sas qtys*/

    if (SL6REC.XARCD == "02") /* processing area*/

      SL0S16K(); /* delete syloc*/

      SL0SW00.SL0SWSFC = SL6REC.FY1FCTYC; /* save factory code*/
      SL0SW00.SL0SWSSE = SL6REC.PCFSECD; /* save season code*/
      SL0SW00.SL0SWSOT = SL6REC.PC4ORTYP; /* save order type*/
      SL0SW00.SL0SWSMR = SL6REC.PC3POIDT; /* save month range*/
      SL0SW00.SL0SWSPO = SL6REC.PC3PONBR; /* save po nbr*/
      SL0SW00.SL0SWSCD = SL6REC.SL1CRTDT; /* save create date*/

      SL6REC.FY1FCTYC = " "; /* factory code*/
      SL6REC.PCFSECD = " "; /* season code*/
      SL6REC.PC4ORTYP = " "; /* order type*/
      SL6REC.PC3POIDT = 0; /* month range*/
      SL6REC.PC3PONBR = 0; /* po nbr*/
      SL6REC.SL1CRTDT = 0; /* create date*/
      SL6REC.SY1UNPCS = 0; /* units per case*/

      SL0S16L(); /* insert syloc*/

      SL6REC.FY1FCTYC = SL0SW00.SL0SWSFC; /* restore factory code*/
      SL6REC.PCFSECD = SL0SW00.SL0SWSSE; /* restore season code*/
      SL6REC.PC4ORTYP = SL0SW00.SL0SWSOT; /* restore order type*/
      SL6REC.PC3POIDT = SL0SW00.SL0SWSMR; /* restore month range*/
      SL6REC.PC3PONBR = SL0SW00.SL0SWSPO; /* restore po nbr*/
      SL6REC.SL1CRTDT = SL0SW00.SL0SWSCD; /* restore create date*/

    else

      SL0S163(); /* update syloc*/
    end

  end
end // end SL0S161

// Select syloc unique for qtys
Function SL0S162()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1470" ("S ", SQLCA, SL6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* row not found*/

        converseLib.validationFailed(12); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        if (SQLCA.VAGen_SQLCODE == -911) /* and resource not available*/

          converseLib.validationFailed(31); /* Indicate not available*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        else

          converseLib.validationFailed(01); /* Indicate system error*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "162"; /* Module identification*/
  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN PROD/LOC ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYLOC01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL6REC.SL6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SL0S162

// update syloc
Function SL0S163()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1470" ("U ", SQLCA, SL6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* row not found*/

        converseLib.validationFailed(12); /* Indicate not found*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        if (SQLCA.VAGen_SQLCODE == -911) /* and resource not available*/

          converseLib.validationFailed(31); /* Indicate not available*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        else

          converseLib.validationFailed(01); /* Indicate system error*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "163"; /* Module identification*/
  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PROD/LOC ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYLOC01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL6REC.SL6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SL0S163

// insert slaud
Function SL0S164()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1620" ("A ", SQLCA, SLAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* row not found*/

        converseLib.validationFailed(12); /* Indicate not foundable*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        if (SQLCA.VAGen_SQLCODE == -911) /* and resource not available*/

          converseLib.validationFailed(31); /* Indicate not available*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        else

          converseLib.validationFailed(01); /* Indicate system error*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "164"; /* Module identification*/
  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT STOCK LOCATE AUDIT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSLAUD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SLAREC.SLAKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SL0S164

// Process inventory tables
Function SL0S165()

   /* ------------------------------------------------------------*/
   /* clear inventory records*/
   /* ------------------------------------------------------------*/

  set IN1REC empty; /* inventory item*/
  set INBREC empty; /* inventory setaside item*/
  set IN5REC empty; /* inventory audit header*/
  set IN6REC empty; /* inventory audit item*/
  set SLJREC empty; /* sl prod sas audit*/

   /* ------------------------------------------------------------*/
   /* load screen data into inv. sas. item for select unique*/
   /* ------------------------------------------------------------*/

  INBREC.INASAID = SL0SW01.SL0SMFSA; /* sas id*/
  INBREC.XWHCD = SL0SW01.XWHCD; /* xwh code*/
  INBREC.XOWCD = SL0SW01.XOWCD; /* own grp code*/
  INBREC.XGPCD = SL0SW01.XGPCD; /* gpc code*/
  INBREC.SY1STNBR = SL0SW01.SY1STNBR; /* style nbr*/
  INBREC.SY2CLRID = SL0SW01.SY2CLRID; /* color id*/
  INBREC.XDMCD = SL0SW01.XDMCD; /* dim code*/
  INBREC.XQACD = SL0SW01.XQACD; /* qual code*/
  INBREC.XSDCD = SL0SW01.PC2INSEG; /* spec code*/
  INBREC.XSACD = "000"; /* shd code*/
  INBREC.XPGCD = SL0SW01.XPGCD; /* pkg typ code*/
  INBREC.XUMCD = SL0SW01.XUMCD; /* uom code*/

   /* ------------------------------------------------------------*/
   /* load screen data into inv. item for select unique*/
   /* ------------------------------------------------------------*/

  IN1REC.XWHCD = SL0SW01.XWHCD; /* xwh code*/
  IN1REC.XOWCD = SL0SW01.XOWCD; /* own grp code*/
  IN1REC.XGPCD = SL0SW01.XGPCD; /* gpc code*/
  IN1REC.SY1STNBR = SL0SW01.SY1STNBR; /* style nbr*/
  IN1REC.SY2CLRID = SL0SW01.SY2CLRID; /* color id*/
  IN1REC.XDMCD = SL0SW01.XDMCD; /* dim code*/
  IN1REC.XQACD = SL0SW01.XQACD; /* qual code*/
  IN1REC.XSDCD = SL0SW01.PC2INSEG; /* spec code*/
  IN1REC.XSACD = "000"; /* shd code*/
  IN1REC.XPGCD = SL0SW01.XPGCD; /* pkg typ code*/
  IN1REC.XUMCD = SL0SW01.XUMCD; /* uom code*/

   /* ------------------------------------------------------------*/
   /* load common data into inv. audit header for insert*/
   /* ------------------------------------------------------------*/

  IN5REC.XWHCD = SL0SW01.XWHCD; /* xwh code*/
  IN5REC.XOWCD = SL0SW01.XOWCD; /* own grp code*/
  IN5REC.IN5TRDCD = "S"; /* doc code*/
  IN5REC.IN5TRSUB = 0; /* sub nbr*/
  IN5REC.IN5TRDTE = X2CREC.X2CCURDT; /* trans date*/
  IN5REC.IN5TRTIM = X3CREC.X3CCURTM; /* trans time*/
  IN5REC.XIGCD = "80"; /* xig code*/
  IN5REC.XITCD = "80"; /* xit code*/
  IN5REC.XIRCD = "901"; /* xir code*/
  IN5REC.IN5USRID = COMMAREA.CAUSERID; /* user id*/
  IN5REC.IN5TRDDT = X2CREC.X2CCURDT; /* tran doc date*/
  IN5REC.IN5TRREF = " "; /* tran reference*/
  IN5REC.ZZZSDT = X2CREC.X2CCURDT; /* setup date*/
  IN5REC.ZZZSTM = X3CREC.X3CCURST; /* setup time*/

   /* ------------------------------------------------------------*/
   /* load common data into inv. audit item for insert*/
   /* ------------------------------------------------------------*/

  IN6REC.XWHCD = SL0SW01.XWHCD; /* xwh code*/
  IN6REC.XOWCD = SL0SW01.XOWCD; /* own grp code*/
  IN6REC.XGPCD = SL0SW01.XGPCD; /* gpc code*/
  IN6REC.SY1STNBR = SL0SW01.SY1STNBR; /* style nbr*/
  IN6REC.SY2CLRID = SL0SW01.SY2CLRID; /* color id*/
  IN6REC.XDMCD = SL0SW01.XDMCD; /* dim code*/
  IN6REC.XQACD = SL0SW01.XQACD; /* qual code*/
  IN6REC.XSDCD = SL0SW01.PC2INSEG; /* spec code*/
  IN6REC.XSACD = "000"; /* shd code*/
  IN6REC.XPGCD = SL0SW01.XPGCD; /* pkg typ code*/
  IN6REC.XUMCD = SL0SW01.XUMCD; /* uom code*/
  IN6REC.XIFCD = "04"; /* xif code*/
  IN6REC.IN5TRDCD = "S"; /* doc code*/
  IN6REC.IN5TRSUB = 0; /* sub nbr*/
  IN6REC.IN5TRDTE = X2CREC.X2CCURDT; /* trans date*/
  IN6REC.IN5TRTIM = X3CREC.X3CCURTM; /* trans time*/
  IN6REC.ZZZSDT = X2CREC.X2CCURDT; /* setup date*/
  IN6REC.ZZZSTM = X3CREC.X3CCURST; /* setup time*/

   /* ------------------------------------------------------------*/
   /* select unique from inv. sas. item*/
   /* ------------------------------------------------------------*/

  SL0S166(); /* get inv. sas. item*/

  SL0SW00.SL0SWQIX = 1; /* qty index*/
  SL0SW00.SL0SWSTQ = 0; /* sas tot temp qty*/
  SL0SW00.SL0SWSAT = 0; /* sas new tot temp qty*/

  while (SL0SW00.SL0SWQIX <= 40)

    SL0SW00.SL0SWWQT = 0; /* ws storage*/
    SL0SW00.SL0SWWQT = SL0SW00.SL0SWWQT + SL0SW00.SL0SWSQT[SL0SWQIX];
    SL0SW00.SL0SWSQ[SL0SWQIX] = 0; /* zero new sas qty*/

    SLJREC.SLJSASQT[SL0SWQIX] = SLJREC.SLJSASQT[SL0SWQIX] + SL0SW00.SL0SWWQT;

    if (SL0SW01.SL0SMTSA == 0)

      if (SL0SW00.SL0SWSQT[SL0SWQIX] > 0)

        INBREC.INBSATOT = INBREC.INBSATOT - SL0SW00.SL0SWWQT;
        INBREC.INBSAQTY[SL0SWQIX] = INBREC.INBSAQTY[SL0SWQIX] - SL0SW00.SL0SWWQT;

        SL0SW00.SL0SWSTQ = SL0SW00.SL0SWSTQ + INBREC.INBSAQTY[SL0SWQIX];

        IN1REC.SY5SZID = SL0SW00.SL0SWQIX; /* size id*/

        SL0S167(); /* select inv. item*/

        if (SQLCA.VAGen_SQLCODE == 0)
          IN1REC.IN1STASD = IN1REC.IN1STASD - SL0SW00.SL0SWWQT;
          IN1REC.ZZZCHGDT = X2CREC.X2CCURDT; /* change date*/
          IN1REC.ZZZCHGTM = X3CREC.X3CCURST; /* change time*/

          SL0S168(); /* update inv. item*/
        end

      end

    else

      if (SL0SW00.SL0SWSQT[SL0SWQIX] > 0)

        INBREC.INBSATOT = INBREC.INBSATOT - SL0SW00.SL0SWWQT;
        INBREC.INBSAQTY[SL0SWQIX] = INBREC.INBSAQTY[SL0SWQIX] - SL0SW00.SL0SWWQT;

        SL0SW00.SL0SWSTQ = SL0SW00.SL0SWSTQ + INBREC.INBSAQTY[SL0SWQIX];

        SL0SW00.SL0SWSAT = SL0SW00.SL0SWSAT + SL0SW00.SL0SWWQT;
        SL0SW00.SL0SWSQ[SL0SWQIX] = SL0SW00.SL0SWSQ[SL0SWQIX] + SL0SW00.SL0SWWQT;

      end

    end

    SL0SW00.SL0SWQIX = SL0SW00.SL0SWQIX + 1;

  end

   /* ------------------------------------------------------------*/
   /* load quantities and other data for writing inv aud items*/
   /* ------------------------------------------------------------*/

  if (SL0SW01.SL0SMTSA > 0)

    /* ------------------------------------------------------------*/
     /* insert audit records for the from setaside*/
    /* ------------------------------------------------------------*/

    IN5REC.IN5TRDOC = SL0SW01.SL0SMFSA; /* doc nbr*/
    SL0SW00.SL0SWDOC = SL0SW01.SL0SMFSA; /* ws doc nbr*/
    IN5REC.IN5TRPRT = SL0SW00.SL0SWPRT; /* part nbr*/
    SL0S169(); /* insert inv. aud hdr*/

    SL0SW00.SL0SWQIX = 1; /* qty index*/

    while (SL0SW00.SL0SWQIX <= 40)
      SL0SW00.SL0SWWQT = SL0SW00.SL0SWSQT[SL0SWQIX]; /* ws storage*/
      IN6REC.IN6TQT[SL0SWQIX] = 0; /* zero quantities*/
      IN6REC.IN6TQT[SL0SWQIX] = IN6REC.IN6TQT[SL0SWQIX] - SL0SW00.SL0SWWQT;

      SL0SW00.SL0SWQIX = SL0SW00.SL0SWQIX + 1;

    end

    IN6REC.IN5TRDOC = SL0SW01.SL0SMFSA; /* doc nbr*/
    SL0SW00.SL0SWDOC = SL0SW01.SL0SMFSA; /* ws doc nbr*/
    IN6REC.IN5TRPRT = SL0SW00.SL0SWPRT; /* part nbr*/
    SL0S16A(); /* insert inv. aud. item*/

    /* ------------------------------------------------------------*/
     /* insert audit records for the to setaside*/
    /* ------------------------------------------------------------*/

    IN5REC.IN5TRDOC = SL0SW01.SL0SMTSA; /* doc nbr*/
    SL0SW00.SL0SWDOC = SL0SW01.SL0SMTSA; /* ws doc nbr*/
    IN5REC.IN5TRPRT = SL0SW00.SL0SWPRT; /* part nbr*/
    SL0S169(); /* insert inv. aud hdr*/

    SL0SW00.SL0SWQIX = 1; /* qty index*/

    while (SL0SW00.SL0SWQIX <= 40)
      SL0SW00.SL0SWWQT = SL0SW00.SL0SWSQT[SL0SWQIX]; /* ws storage*/
      IN6REC.IN6TQT[SL0SWQIX] = 0; /* zero quantities*/
      IN6REC.IN6TQT[SL0SWQIX] = IN6REC.IN6TQT[SL0SWQIX] + SL0SW00.SL0SWWQT;

      SL0SW00.SL0SWQIX = SL0SW00.SL0SWQIX + 1;

    end

    IN6REC.IN5TRDOC = SL0SW01.SL0SMTSA; /* doc nbr*/
    SL0SW00.SL0SWDOC = SL0SW01.SL0SMTSA; /* ws doc nbr*/
    IN6REC.IN5TRPRT = SL0SW00.SL0SWPRT; /* part nbr*/
    SL0S16A(); /* insert inv. aud. item*/

    if (SL0SW00.SL0SWSTQ > 0)
      INBREC.ZZZCHGDT = X2CREC.X2CCURDT; /* change date*/
      INBREC.ZZZCHGTM = X3CREC.X3CCURST; /* change time*/
      SL0S16B(); /* update inv. sas item*/
    else
      SL0S16E(); /* delete inv. sas item*/
    end

    INBREC.INASAID = SL0SW01.SL0SMTSA; /* sas id*/

    SL0S166(); /* get inv. sas. item*/

    if (SQLCA.VAGen_SQLCODE == 0)
      INBREC.ZZZCHGDT = X2CREC.X2CCURDT; /* change date*/
      INBREC.ZZZCHGTM = X3CREC.X3CCURST; /* change time*/

      SL0SW00.SL0SWQIX = 1; /* qty index*/

      while (SL0SW00.SL0SWQIX <= 40)

        SL0SW00.SL0SWSTT = 0;
        SL0SW00.SL0SWSTT = SL0SW00.SL0SWSQ[SL0SWQIX];
        INBREC.INBSAQTY[SL0SWQIX] = INBREC.INBSAQTY[SL0SWQIX] + SL0SW00.SL0SWSTT;
        INBREC.INBSATOT = INBREC.INBSATOT + SL0SW00.SL0SWSTT;
        SL0SW00.SL0SWQIX = SL0SW00.SL0SWQIX + 1;

      end

      SL0S16B(); /* update inv. sas. item*/

    else
      INBREC.INBSATOT = SL0SW00.SL0SWSAT;
      INBREC.ZZZSDT = X2CREC.X2CCURDT; /* setup date*/
      INBREC.ZZZSTM = X3CREC.X3CCURST; /* setup time*/
      INBREC.ZZZCHGDT = X2CREC.X2CCURDT; /* change date*/
      INBREC.ZZZCHGTM = X3CREC.X3CCURST; /* change time*/
      INBREC.ZZZCHGCT = 0; /* change count*/

      SL0SW00.SL0SWQIX = 1; /* qty index*/

      while (SL0SW00.SL0SWQIX <= 40)

        INBREC.INBSAQTY[SL0SWQIX] = SL0SW00.SL0SWSQ[SL0SWQIX];
        SL0SW00.SL0SWQIX = SL0SW00.SL0SWQIX + 1;

      end

      SL0S16F(); /* insert inv. sas. item*/

    end

  else

    /* ------------------------------------------------------------*/
     /* insert audit records for the from setaside*/
    /* ------------------------------------------------------------*/

    IN5REC.IN5TRDOC = SL0SW01.SL0SMFSA; /* doc nbr*/
    SL0SW00.SL0SWDOC = SL0SW01.SL0SMFSA; /* doc nbr*/
    IN5REC.IN5TRPRT = SL0SW00.SL0SWPRT; /* part nbr*/
    SL0S169(); /* insert inv. aud hdr*/

    SL0SW00.SL0SWQIX = 1; /* qty index*/

    while (SL0SW00.SL0SWQIX <= 40)
      SL0SW00.SL0SWWQT = SL0SW00.SL0SWSQT[SL0SWQIX]; /* ws storage*/
      IN6REC.IN6TQT[SL0SWQIX] = 0; /* zero quantities*/
      IN6REC.IN6TQT[SL0SWQIX] = IN6REC.IN6TQT[SL0SWQIX] - SL0SW00.SL0SWWQT;

      SL0SW00.SL0SWQIX = SL0SW00.SL0SWQIX + 1;

    end

    IN6REC.IN5TRDOC = SL0SW01.SL0SMFSA; /* doc nbr*/
    SL0SW00.SL0SWDOC = SL0SW01.SL0SMFSA; /* ws doc nbr*/
    IN6REC.IN5TRPRT = SL0SW00.SL0SWPRT; /* part nbr*/
    SL0S16A(); /* insert inv. aud. item*/

    if (SL0SW00.SL0SWSTQ > 0)
      INBREC.ZZZCHGDT = X2CREC.X2CCURDT; /* change date*/
      INBREC.ZZZCHGTM = X3CREC.X3CCURST; /* change time*/
      SL0S16B(); /* update inv sas. item*/
    else
      SL0S16E(); /* delete inv sas. item*/
    end

  end

end // end SL0S165

// Select unique inv. sas. item
Function SL0S166()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0950" ("S ", SQLCA, INBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* row not found*/
        return;
      else
        if (SQLCA.VAGen_SQLCODE == -911) /* and resource not available*/

          converseLib.validationFailed(31); /* Indicate not available*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        else

          converseLib.validationFailed(01); /* Indicate system error*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "166"; /* Module identification*/
  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN INV SETASIDE ITEM";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DINVNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VASITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = INBREC.INBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SL0S166

// Select unique inv. item
Function SL0S167()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0590" ("S ", SQLCA, IN1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* row not found*/

        converseLib.validationFailed(12); /* Indicate not found*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        if (SQLCA.VAGen_SQLCODE == -911) /* and resource not available*/

          converseLib.validationFailed(31); /* Indicate not available*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        else

          converseLib.validationFailed(01); /* Indicate system error*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "167"; /* Module identification*/
  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN INV. ITEM ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DINVNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VINITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = IN1REC.IN1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SL0S167

// update inv. item
Function SL0S168()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0590" ("U ", SQLCA, IN1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* row not found*/

        converseLib.validationFailed(12); /* Indicate not found*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        if (SQLCA.VAGen_SQLCODE == -911) /* and resource not available*/

          converseLib.validationFailed(31); /* Indicate not available*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        else

          converseLib.validationFailed(01); /* Indicate system error*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "168"; /* Module identification*/
  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE INVENTORY ITEM ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DINVNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VINITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = IN1REC.IN1KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SL0S168

// insert inv. audit item
Function SL0S169()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0760" ("A ", SQLCA, IN5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* row not found*/

        converseLib.validationFailed(12); /* Indicate not found*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        if (SQLCA.VAGen_SQLCODE == -911) /* and resource not available*/

          converseLib.validationFailed(31); /* Indicate not available*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        else

          converseLib.validationFailed(01); /* Indicate system error*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "169"; /* Module identification*/
  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT INVENTORY AUD HDR ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DINVNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VIADHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = IN5REC.IN5KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SL0S169

// insert inv. audit item
Function SL0S16A()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0770" ("A ", SQLCA, IN6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* row not found*/

        converseLib.validationFailed(12); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        if (SQLCA.VAGen_SQLCODE == -911) /* and resource not available*/

          converseLib.validationFailed(31); /* Indicate not available*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        else

          converseLib.validationFailed(01); /* Indicate system error*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "16A"; /* Module identification*/
  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT INVENTORY AUD ITEM ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DINVNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VIADIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = IN6REC.IN6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SL0S16A

// update inv. sas. item
Function SL0S16B()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0950" ("U ", SQLCA, INBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* row not found*/

        converseLib.validationFailed(12); /* Indicate not found*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        if (SQLCA.VAGen_SQLCODE == -911) /* and resource not available*/

          converseLib.validationFailed(31); /* Indicate not available*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        else

          converseLib.validationFailed(01); /* Indicate system error*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "16B"; /* Module identification*/
  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE INVENTORY SAS ITEM ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DINVNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VASITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = INBREC.INBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SL0S16B

// insert sl prod sas audit
Function SL0S16C()
   /* ------------------------------------------------------------*/
   /* add the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5130" ("A ", SQLCA, SLJREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* row not found*/

        converseLib.validationFailed(12); /* Indicate not found*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        if (SQLCA.VAGen_SQLCODE == -911) /* and resource not available*/

          converseLib.validationFailed(31); /* Indicate not available*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        else

          converseLib.validationFailed(01); /* Indicate system error*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "16C"; /* Module identification*/
  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT SL PROD SAS AUDIT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPSAUD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SLJREC.SLJKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SL0S16C

// build cursor fypo table
Function SL0S16D()
   /* ------------------------------------------------------------*/
   /* build cursor for requested data from the table.*/
   /* ------------------------------------------------------------*/

  SLVREC.SLVFNC = "S2"; /* function*/
  SLVREC.SLVSDT = SL0SW00.SL0SWRDT; /* start date*/
  SLVREC.SLVEDT = SL0SW00.SL0SWRDT; /* end date*/

  try
    call "VFYPO002" (SLVREC, SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
  end
                                                        /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* and resource not available*/

        converseLib.validationFailed(31); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else

        converseLib.validationFailed(01); /* Indicate system error*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "16D"; /* Module identification*/
  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "BUILD CURSOR OF FYPO TABLE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPO002"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYPO002.VFYPO002-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SL0S16D

// delete inv. sas. item
Function SL0S16E()
   /* ------------------------------------------------------------*/
   /* delete the selected row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0950" ("D ", SQLCA, INBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* row not found*/

        converseLib.validationFailed(12); /* Indicate not found*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        if (SQLCA.VAGen_SQLCODE == -911) /* and resource not available*/

          converseLib.validationFailed(31); /* Indicate not available*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        else

          converseLib.validationFailed(01); /* Indicate system error*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "16E"; /* Module identification*/
  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE INVENTORY SAS ITEM ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DINVNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VASITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = INBREC.INBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SL0S16E

// add inv. sas. item
Function SL0S16F()
   /* ------------------------------------------------------------*/
   /* add the selected row into the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0950" ("A ", SQLCA, INBREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* row not found*/

        converseLib.validationFailed(12); /* Indicate not found*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        if (SQLCA.VAGen_SQLCODE == -911) /* and resource not available*/

          converseLib.validationFailed(31); /* Indicate not available*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        else

          converseLib.validationFailed(01); /* Indicate system error*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "16F"; /* Module identification*/
  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD INVENTORY SAS ITEM ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DINVNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VASITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = INBREC.INBKEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SL0S16F

// fetch from fypo table
Function SL0S16G()
   /* ------------------------------------------------------------*/
   /* fetch the requested row from the table.*/
   /* ------------------------------------------------------------*/

  SLVREC.SLVFNC = "N2"; /* function*/

  try
    call "VFYPO002" (SLVREC, SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
  end
                                                        /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* row not found*/
        SL0SW00.SL0SWFCS = "Y"; /* eof fypo cursor*/
        return;
      end
      if (SQLCA.VAGen_SQLCODE == -911) /* and resource not available*/

        converseLib.validationFailed(31); /* Indicate not available*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else

        converseLib.validationFailed(01); /* Indicate system error*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "16G"; /* Module identification*/
  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH PO RECEIPT FYPO ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPO002"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYPO002.VFYPO002-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SL0S16G

// close fypo cursor
Function SL0S16H()
   /* ------------------------------------------------------------*/
   /* close the fypo cursor*/
   /* ------------------------------------------------------------*/

  SLVREC.SLVFNC = "C2"; /* function*/

  try
    call "VFYPO002" (SLVREC, SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
  end /* close cursor*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* row not found*/

        converseLib.validationFailed(12); /* Indicate not found*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        if (SQLCA.VAGen_SQLCODE == -911) /* and resource not available*/

          converseLib.validationFailed(31); /* Indicate not available*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        else

          converseLib.validationFailed(01); /* Indicate system error*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "16H"; /* Module identification*/
  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE FYPO CURSOR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPO002"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYPO002.VFYPO002-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SL0S16H

// delete from fypo
Function SL0S16I()
   /* ------------------------------------------------------------*/
   /* delete the selected row from the table.*/
   /* ------------------------------------------------------------*/

  SLVREC.SLVFNC = "D "; /* function*/

  try
    call "VFYPO002" (SLVREC, SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
  end
                                                        /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* row not found*/

        converseLib.validationFailed(12); /* Indicate not found*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        if (SQLCA.VAGen_SQLCODE == -911) /* and resource not available*/

          converseLib.validationFailed(31); /* Indicate not available*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        else

          converseLib.validationFailed(01); /* Indicate system error*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "16I"; /* Module identification*/
  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE PO RECEIPT FYPO ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPO002"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYPO002.VFYPO002-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SL0S16I

// insert into fypo
Function SL0S16J()
   /* ------------------------------------------------------------*/
   /* insert the requested row into the table.*/
   /* ------------------------------------------------------------*/

  SLVREC.SLVFNC = "A "; /* function*/

  try
    call "VFYPO002" (SLVREC, SQLCA, VFYPO002) {isNoRefresh = yes, isExternal = yes};
  end
                                                        /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* row not found*/

        converseLib.validationFailed(12); /* Indicate not found*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        if (SQLCA.VAGen_SQLCODE == -911) /* and resource not available*/

          converseLib.validationFailed(31); /* Indicate not available*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        else

          converseLib.validationFailed(01); /* Indicate system error*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "16J"; /* Module identification*/
  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT PO RECEIPT FYPO ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VFYPO002"; /* Table view name*/
  TA1REC.TA1TBLKE = VFYPO002.VFYPO002-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SL0S16J

// delete syloc
Function SL0S16K()
   /* ------------------------------------------------------------*/
   /* delete the selected row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1470" ("D ", SQLCA, SL6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* row not found*/

        converseLib.validationFailed(12); /* Indicate not found*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        if (SQLCA.VAGen_SQLCODE == -911) /* and resource not available*/

          converseLib.validationFailed(31); /* Indicate not available*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        else

          converseLib.validationFailed(01); /* Indicate system error*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "16K"; /* Module identification*/
  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE INVENTORY SAS ITEM ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYLOC01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL6REC.SL6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SL0S16K

// insert syloc
Function SL0S16L()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO1470" ("A ", SQLCA, SL6REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select table row*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* row not found*/

        converseLib.validationFailed(12); /* Indicate not foundable*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
      else
        if (SQLCA.VAGen_SQLCODE == -911) /* and resource not available*/

          converseLib.validationFailed(31); /* Indicate not available*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        else

          converseLib.validationFailed(01); /* Indicate system error*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/
        end
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SLWREC.XXXLOCID = "16L"; /* Module identification*/
  converseLib.clearScreen();
   /* Clear screen before display*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "INSERT STOCK LOCATE AUDIT ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSSYLOC1"; /* Table view name*/
  TA1REC.TA1TBLKE = SL6REC.SL6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end SL0S16L

// Update temporary storage page
Function SL0SS01()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (SL0SW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S01"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0SS01

// Read temporary storage page
Function SL0SS02()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  SL0SW01.XXXTSLEN = SL0SW00.XXXTSLEN; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = SL0SW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (SL0SW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S02"; /* Module identification*/
  converseLib.validationFailed(10); /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0SS02

//*** RECORD=SL0SW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record SL0SW00 type basicRecord
  10 SL0SWIXM SL0SWIXM ; 
  10 SL0SWQIX SL0SWQIX ; 
  10 SL0SWRIX SL0SWRIX ; 
  10 SL0SWSIX SL0SWSIX ; 
  10 SL0SWBIX SL0SWBIX ; 
  10 SL0SWSWC SL0SWSWC ; 
  10 SL0SWFCS SL0SWFCS ; 
  10 SL0SWSWD SL0SWSWD ; 
  10 SL0SWSWF SL0SWSWF ; 
  10 SL0SWSWR SL0SWSWR ; 
  10 SL0SWSWU SL0SWSWU ; 
  10 SL0SWTQT SL0SWTQT ; 
  10 SL0SWRDT SL0SWRDT ; 
    15 * num(1) ; 
    15 SL0SWRCC SL0SWRCC ; 
    15 SL0SWRYY SL0SWRYY ; 
    15 SL0SWRMM SL0SWRMM ; 
    15 SL0SWRDD SL0SWRDD ; 
  10 SL0SWPID SL0SWPID ; 
    15 SL0SWPDT SL0SWPDT ; 
    15 SL0SWFAC SL0SWFAC ; 
  10 SL0SWFPI SL0SWFPI ; 
    15 SL0SWFYR SL0SWFYR ; 
    15 SL0SWFMD SL0SWFMD ; 
  10 SL0SWAPI SL0SWAPI ; 
    15 SL0SWASE SL0SWASE ; 
    15 SL0SWAFL SL0SWAFL ; 
  10 SL0SWCMR SL0SWCMR ; 
    15 SL0SWCML SL0SWCML ; 
    15 SL0SWCCN SL0SWCCN ; 
    15 SL0SWCYR SL0SWCYR ; 
    15 SL0SWCMD SL0SWCMD ; 
  10 SL0SWNMR SL0SWNMR ; 
  10 SL0SWSQT SL0SWSQT [40] ; 
  10 SL0SWWQT SL0SWWQT ; 
  10 SL0SWDOC SL0SWDOC ; 
    15 * char(8) ; 
    15 SL0SWPRT SL0SWPRT ; 
  10 SL0SWARS SL0SWARS ; 
  10 SL0SWZNS SL0SWZNS ; 
  10 SL0SWLCS SL0SWLCS ; 
  10 SL0SWSPN SL0SWSPN ; 
  10 SL0SWSTQ SL0SWSTQ ; 
  10 SL0SWSTT SL0SWSTT ; 
  10 SL0SWSAT SL0SWSAT ; 
  10 SL0SWSQ SL0SWSQ [40] ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 SL0SWUMS SL0SWUMS ; 
  10 SL0SWSMR SL0SWSMR ; 
  10 SL0SWSSE SL0SWSSE ; 
  10 SL0SWSFC SL0SWSFC ; 
  10 SL0SWSOT SL0SWSOT ; 
  10 SL0SWSPO SL0SWSPO ; 
  10 SL0SWSCD SL0SWSCD ; 
end // end SL0SW00

//*** RECORD=SL0SW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record SL0SW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(360) ; 
    10 XWHCD XWHCD ; 
    10 SL0SWRMM SL0SWRMM ; 
    10 SL0SWRDD SL0SWRDD ; 
    10 SL0SWRYY SL0SWRYY ; 
    10 XGPCD XGPCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 XLCCD XLCCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XSLCD XSLCD ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 XOWCD XOWCD ; 
    10 SL0SWPID SL0SWPID ; 
    10 PC4ORTYP PC4ORTYP ; 
    10 PC3PONBR PC3PONBR ; 
    10 SL0SMFSA SL0SMFSA ; 
    10 SL0SMTSA SL0SMTSA ; 
    10 XARCD XARCD [30] ; 
    10 SL4ZONE SL4ZONE [30] ; 
    10 SL5LOCTN SL5LOCTN [30] ; 
end // end SL0SW01

//*** RECORD=SLJREC ****
// ****************  stock locate table  **********************
// 
// TABLE NAME:          prod setaside
// 
// DB2 TABLE:           dstloc.vpsaud01
// 
// COPYLIB MEMBER:      dcl00823
// 
// KEY TO DB2 TABLE:    xwhcd
// (non-unique)         sljsasrl
//                      inasaid
//                      sl1crtdt
//                      xgpcd
//                      sy1stnbr
//                      sy2clrid
//                      xdmcd
//                      xqacd
//                      xowcd
//                      pc2inseg
//                      xpgcd
//                      xumcd
//                      xslcd
//                      xarcd
//                      sl4zone
//                      sl5loctn
//                      pc3ponbr
// 
// 
// MAINTENANCE LOG:
// 
// DATE      USERID     COMMENTS
// --------  ---------  ------------------------------------
// 04-12-90  r. yonker  created csp record
// 02/07/91  CHYDE      Correct slj* data item descriptions.
// ************************************************************
// **********************
Record SLJREC type basicRecord
  5 SLJDATA SLJDATA ; 
    10 SLJKEY SLJKEY ; 
      15 XWHCD XWHCD ; 
      15 SLJSASRL SLJSASRL ; 
      15 INASAID INASAID ; 
      15 SL1CRTDT SL1CRTDT ; 
      15 XGPCD XGPCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XQACD XQACD ; 
      15 XOWCD XOWCD ; 
      15 PC2INSEG PC2INSEG ; 
      15 XPGCD XPGCD ; 
      15 XUMCD XUMCD ; 
      15 XSLCD XSLCD ; 
      15 XARCD XARCD ; 
      15 SL4ZONE SL4ZONE ; 
      15 SL5LOCTN SL5LOCTN ; 
      15 PC3PONBR PC3PONBR ; 
    10 SLJSASQT SLJSASQT [40] ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZSTM ZZZSTM ; 
end // end SLJREC

// from sas id
DataItem SL0SMFSA int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// to sas id
DataItem SL0SMTSA int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// apparel po date filler
DataItem SL0SWAFL char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// apparel po id date
DataItem SL0SWAPI char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save area code
DataItem SL0SWARS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// apparel po id season
DataItem SL0SWASE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// blank a/z/l map fields index
DataItem SL0SWBIX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// char mon rng century
DataItem SL0SWCCN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// char mon rng month/day
DataItem SL0SWCMD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// char mon rng fill
DataItem SL0SWCML char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// char mon rng date
DataItem SL0SWCMR char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// char mon rng year
DataItem SL0SWCYR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// audit tran doc nbr
DataItem SL0SWDOC num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// po id factory code
DataItem SL0SWFAC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fypo end of file switch
DataItem SL0SWFCS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// footware po id mon/day
DataItem SL0SWFMD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// footware po id date
DataItem SL0SWFPI char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// footware po id year
DataItem SL0SWFYR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem SL0SWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// save loc code
DataItem SL0SWLCS char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// num mon rng date
DataItem SL0SWNMR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po id date
DataItem SL0SWPDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po id
DataItem SL0SWPID char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// document part number
DataItem SL0SWPRT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for qty fields
DataItem SL0SWQIX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// receipt century
DataItem SL0SWRCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// receipt day
DataItem SL0SWRDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// receipt date
DataItem SL0SWRDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for screen rows
DataItem SL0SWRIX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// receipt month
DataItem SL0SWRMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// receipt year
DataItem SL0SWRYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// new sas tot qty
DataItem SL0SWSAT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved create date
DataItem SL0SWSCD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved factory code
DataItem SL0SWSFC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// saved index
DataItem SL0SWSIX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// saved month range
DataItem SL0SWSMR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// saved order type
DataItem SL0SWSOT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// saved PC_PO_NBR
DataItem SL0SWSPN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved po number
DataItem SL0SWSPO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new sas item qty
DataItem SL0SWSQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// syloc saved qtys grp
DataItem SL0SWSQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved season code
DataItem SL0SWSSE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sas tot temp qty
DataItem SL0SWSTQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sas tot temp qty 2
DataItem SL0SWSTT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cursor end of file switch
DataItem SL0SWSWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed switch
DataItem SL0SWSWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem SL0SWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem SL0SWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem SL0SWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tot qty
DataItem SL0SWTQT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// update message switch
DataItem SL0SWUMS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// syloc saved qtys itm
DataItem SL0SWWQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save zone code
DataItem SL0SWZNS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// entire prod. sas. data row
DataItem SLJDATA char(218)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prod. sas. table key
DataItem SLJKEY char(52)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sl-sas-qty
DataItem SLJSASQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sl-sas-rel-ind
DataItem SLJSASRL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

