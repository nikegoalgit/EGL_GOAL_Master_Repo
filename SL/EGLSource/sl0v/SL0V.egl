package sl0v;
import corpcom1.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import pc.common.*;
import pk.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=SL0V ****
// This application displays the Background Job Request Menu
// screen and subordinate Background Job Submission screens.
// 
// The menu is displayed for the user to select the jobs to be
// submitted.  Another available selection allows the user to
// view the available printers and change the printed output
// destination.
// 
// Job Control Language statements are formatted and submitted
// through the Background Job Request Subroutine (TA0P).
// The job executes in batch and all output is routed to the
// remote destination specified through this application.
// 
// The JCL for each job is stored as a table.
// There are two formats available for a JCL statement.
// They are either a fixed or a variable format.
// 
// A fixed statement is identified in the table by a blank JCL
// statement type (TARTYPE).  These statements are written
// directly to the internal reader with no changes.
// 
// Variable statements are those that contain data that may
// change each time the job is submitted.  They are identified
// by a non-blank statement type.  The type determines the data
// that is to be substituted and the columns into which it is
// to be placed.  The data in working storage is substituted
// and the statement is written to the internal reader.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, from the menu, only.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      12/15/90  USERID  New application.
// 0001     01/03/91  jcampb  increase size of plan to 9
// 0002     01/08/91  sbeauc  change dd names & stop dup of ctn
// 0003     01/18/91  jcampb  pass caitem when fastpathing
// 0004     04/17/91  ryonke  allow carton delete for qual='02'
// 0005     01/28/92  GRAY    INITIALIZE ALL RECORDS AND MAPS.
// WILRCV   04/01/93  BGILDE  ADDED SL-LAST-CRTN-FL TO THE
//                            DELETE VALIDATION PROCESS.
//          06/19/97  Dgerlt  Changed to allow processing of
//                            all plan statuses except complete
// *********************
Program SL0V type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  SL0VW00 SL0VW00; // record
  SL0VW01 SL0VW01; // record
  SL0VW02 SL0VW02; // record
  SL0VW03 SL0VW03; // record
  SL0VW04 SL0VW04; // record
  SLLREC SLLREC; // record
  SLMREC SLMREC; // record
  SLVREC SLVREC; // record
  SLWREC SLWREC; // record
  SQLCA SQLCA; // record
  SWEREC SWEREC; // record
  SWRREC SWRREC; // record
  SWSREC SWSREC; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use SL0VT01; // table
  use SL0VT02; // table
  use SL0VT03; // table
  use XWHTBL; // table
  use SL0VM.SL0VM001,  // forms
      SL0VM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPSL001: XPSL001();
     /* ------------------------------------------------------------*/
     /* Initialize the working storage areas and variables.*/
     /* ------------------------------------------------------------*/

    set TA0PM001 initial; /* M001 input/output*/
    set SL0VM001 initial; /* M002 input/output*/
    set SL0VW00 empty; /* working storage*/
    set SL0VW01 empty; /* Working storage*/
    set SL0VW02 empty; /* Working storage*/
    set SL0VW03 empty; /* Working storage*/
    set SL0VW04 empty; /* Working storage*/
    set SQLCA empty; /* SQL communication area*/
    set SLLREC empty;
    set SLMREC empty;
    set SLVREC empty;
    set SWEREC empty;
    set SWRREC empty;
    set SWSREC empty;
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Background job subroutine parameters*/
    set TA6REC empty; /* Background job subroutine parameters*/
    SL0VW00.SL0VWPAS = "1"; /* force pass 1 check for converse*/
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SL0V001; /* Converse the main process*/


    SL0V001: SL0V001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SL0V001; /* Converse the main process*/


  end // end main
end // end SL0V

// Main process to display a map
Function SL0V001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SL0V010(); /* obtain the data to display*/

  SL0V020(); /* Format and display the map*/

  SL0V030(); /* Check attention identifier*/

  SL0V040(); /* Reset fields to normal intensity*/

  SL0V050(); /* Verify the data that was entered*/

  SL0V060(); /* Process valid input request*/


end // end SL0V001

// get data and store in tsq
Function SL0V010()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (SL0VW00.SL0VWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* establish tsq page length*/
   /* ------------------------------------------------------------*/

  SL0VW00.XXXTSLEN = 2029;

   /* ------------------------------------------------------------*/
   /* if no message to display reset the page to display*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO == 0)
    SL0VW00.XXXTSPAG = 1;
  end

   /* ------------------------------------------------------------*/
   /* purge any tempory storage*/
   /* ------------------------------------------------------------*/

  SL0V011(); /* purge tsq*/

   /* ------------------------------------------------------------*/
   /* initialize records and set key*/
   /* ------------------------------------------------------------*/
  set SL0VW01 empty; /* M002 display storage*/
  set SLMREC empty;
  set SQLCA empty;

  SL0VW00.TA5TSQIX = 0;
   /* MOVE 0 TO SL0VW00.SL0VWIDX;*/
  SL0VW00.SL0VWIDX = 1;
  if (SL0VM001.SL0VMOPT != "C")
    SL0VW00.SL0VW2CT = 1;
  end

  SL0VW00.SL0VWIXM = 0; /* display line index*/
  while (SL0VW00.SL0VWIDX <= SL0VW00.SL0VW2CT)

     /* SL0VW00.SL0VWIDX = SL0VW00.SL0VWIDX + 1;*/
    if (SL0VM001.SL0VMOPT == "C")
      SLMREC.XWHCD = SL0VW03.XWHCD[SL0VWIDX];
      SLMREC.SL8WONBR = SL0VW03.SL8WONBR[SL0VWIDX];
    else
      SLMREC.XWHCD = SL0VM001.XWHCD;
      SLMREC.SL8WONBR = SL0VM001.SL8WONBR;
    end

    /* ------------------------------------------------------------*/
     /* declare the table cursor*/
    /* ------------------------------------------------------------*/

    SL0V012(); /* declare cursor and open*/

    /* ------------------------------------------------------------*/
     /* Save the data from the table row in display storage.*/
    /* ------------------------------------------------------------*/

    while (SQLCA.VAGen_SQLCODE == 0) /* while not end of cursor*/
      SL0V013(); /* fetch row*/
      if (SQLCA.VAGen_SQLCODE == 0) /* not end of cursor*/
        SL0VWIXM = SL0VWIXM + 1;
        SL0VW01.SL0VMSEL[SL0VWIXM] = " ";
        SL0VW01.XQACD[SL0VWIXM] = SL0VW03.XQACD[SL0VWIDX];
        SL0VW01.SL8WONBR[SL0VWIXM] = SLMREC.SL8WONBR;
        SL0VW01.PKDNCSQN[SL0VWIXM] = SLMREC.PKDNCSQN;
      end
      /* ----------------------------------------------------------*/
       /* if page is full add page to tsq*/
      /* ----------------------------------------------------------*/
      if (SL0VW00.SL0VWIXM == 45) /* page is full*/
        SL0V014();
        SL0VW00.SL0VWIXM = 0;
        set SL0VW01 empty;
      end
    end

    /* ------------------------------------------------------------*/
     /* close the cursor*/
    /* ------------------------------------------------------------*/

    SL0V015();
    SL0VW00.SL0VWIDX = SL0VW00.SL0VWIDX + 1;

  end

   /* ------------------------------------------------------------*/
   /* add any  partialy formatted pages to tsq*/
   /* ------------------------------------------------------------*/
  if (SL0VW00.SL0VWIXM > 0)
    SL0V014();
  end

   /* ------------------------------------------------------------*/
   /* If no data found indicate no data to display*/
   /* ------------------------------------------------------------*/
  if (SL0VW00.TA5TSQIX == 0)
    SLWREC.XXXLOCID = "210";
    converseLib.validationFailed(214);
    SL0VW00.SL0VWPAS = "2";
    SL0VW00.SL0VWSWF = "N"; /* format the map switch*/
    set SL0VM001.SWEPLLNB normal;
    set SL0VM001.SL8WONBR normal;
    set SL0VM001.TSHCNTNR normal;
    set SL0VM001.SL8FRAR normal;
    set SL0VM001.SL8FRZN normal;
    set SL0VM001.SL8FRLC normal;
    set SL0VM001.SWEPLLNB cursor, bold;
    if (SL0VM001.SL8WONBR != 0)
      set SL0VM001.SL8WONBR bold;
    end
    if (SL0VM001.TSHCNTNR != " ")
      set SL0VM001.TSHCNTNR bold;
    end
    if (SL0VM001.SL8FRAR != " ")
      set SL0VM001.SL8FRAR bold;
      set SL0VM001.SL8FRZN bold;
      set SL0VM001.SL8FRLC bold;
    end
  else

    /* ------------------------------------------------------------*/
     /* set confirm delete flag unprotected as data was found.*/
    /* ------------------------------------------------------------*/

    set SL0VM001.SL0VMCNF normal;
    set SL0VM001.SL0VMCNF bold;

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  SL0VW00.SL0VWSWR = "N"; /* Request for data switch*/

end // end SL0V010

// purge the tsq
Function SL0V011()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  set SL0VW01 empty;
  SL0VW00.SL0VWSWU = "N";

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  SL0VW00.TA5TSQIX = 0;

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Program application*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (SL0VW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "011"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0V011

// select set dstloc.vwopit01
Function SL0V012()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  try
    call "IO5410" ("S2", SQLCA, SLMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SL0VW00.SL0VWSWR = "N"; /* Request for data switch*/

  SLWREC.XXXLOCID = "012"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = SLMREC.SLMDATA; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0V012

// fetch next dstloc.vwopit01
Function SL0V013()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5410" ("N2", SQLCA, SLMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SL0VW00.SL0VWSWR = "N"; /* Request for data switch*/

  SLWREC.XXXLOCID = "013"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH N2 TABLE ROW  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWPOIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = SLMREC.SLMDATA; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  if (SQLCA.VAGen_SQLCODE == -911)
    exit stack; /* Exit to display map*/
  end

end // end SL0V013

// add page to tsq
Function SL0V014()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  SL0VW01.XXXTSLEN = SL0VW00.XXXTSLEN;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Program application*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (SL0VW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set SL0VW01 empty; /* M001 display storage*/

    SL0VW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "116"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0V014

// close  set dstloc.vwoppit01
Function SL0V015()
   /* ------------------------------------------------------------*/
   /* close the cursor*/
   /* ------------------------------------------------------------*/

  try
    call "IO5410" ("C2", SQLCA, SLMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SL0VW00.SL0VWSWR = "N"; /* Request for data switch*/

  SLWREC.XXXLOCID = "015"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE THE CURSOR    ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPIT01"; /* Table view name*/
  TA1REC.TA1TBLKE = SWEREC.SWEGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  if (SQLCA.VAGen_SQLCODE == -911)
    exit stack; /* Exit to display map*/
  end

end // end SL0V015

// Format and display the map
Function SL0V020()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SL0VW00.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (SL0VW00.SL0VWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (SL0VW00.SL0VWSWF == "Y") /* Map must be formatted*/
      SL0V021(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SL0VM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  SL0VM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SL0VM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SL0VW00.SL0VWPAS == "3") /* confermation check*/
    set SL0VM001.XWHCD protect;
    set SL0VM001.SL0VMOPT protect;
    set SL0VM001.SL0VMCNF normal;
    if (SL0VM001.SL0VMOPT != "C")
      set SL0VM001.SL0VMCNF cursor, bold;
      SL0VW00.SLWMSGNO = 310;
    end
  end

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  SL0VM001.XWHCD = COMMAREA.XWHCD;
  SLWREC.XWHCD = COMMAREA.XWHCD;
  if (SL0VM001.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0VM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      set SL0VM001.XWHCD normal;
      set SL0VM001.XWHCD cursor, bold;
      set SL0VM001 alarm; /* Indicate sound alarm*/
      converseLib.validationFailed(11); /* invalid value entered*/
    end
  else
    set SL0VM001.XWHCD normal;
    set SL0VM001.XWHCD cursor, bold;
    set SL0VM001 alarm; /* Indicate sound alarm*/
    converseLib.validationFailed(11); /* invalid value entered*/
  end

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0)
    if (SL0VW00.SLWMSGNO != 0 /* Message to display*/
     || COMMAREA.CAMSG != " ") /* or message text*/

      if (SL0VW00.SLWMSGNO != 0) /* Message to display*/

        if (SL0VW00.SLWMSGNO == 9999)
          converseLib.validationFailed();
        else
          converseLib.validationFailed(SL0VW00.SLWMSGNO);
        end /* Message number*/
      else
        SL0VM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

      end

      SL0VM001.XXXLOCID = SLWREC.XXXLOCID; /* Module identification*/

      set SL0VM001 alarm; /* Indicate sound alarm*/

    end
  end

  SL0VM001.XXXLOCID = SLWREC.XXXLOCID; /* Module identification*/

  converse SL0VM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields.*/
   /* ------------------------------------------------------------*/

  SLWREC.SLWMSGNO = 0; /* Message number*/
  SLWREC.XXXLOCID = " "; /* Module identification*/
  COMMAREA.CAMSG = " "; /* Message text*/


end // end SL0V020

// format the map
Function SL0V021()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set SL0VM001 initial; /* m001 input/output area*/
  if (SL0VW00.SL0VMOPT == "C")
    set SL0VM001.SL0VMPF9 normal;
    set SL0VM001.SL0VMPF9 skip;
  end

  SL0VW00.SL0VWSWF = "N"; /* Format the map switch*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (SL0VW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (SL0VW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
       /* If the desired page number is greater than the highest page*/
       /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (SL0VW00.XXXTSPAG > SL0VW00.TA5TSQIX)
        SL0VW00.XXXTSPAG = SL0VW00.TA5TSQIX;
      end

      SL0V023(); /* Obtain temporary storage page*/

    end

    /* ------------------------------------------------------------*/
     /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set SL0VM001.XXXLITPG skip; /* "PAGE" literal*/
    SL0VM001.XXXTSPAG = SL0VW00.XXXTSPAG; /* Current page*/
    set SL0VM001.XXXLITOF skip; /* "OF" literal*/
    SL0VM001.TA5TSQIX = SL0VW00.TA5TSQIX; /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the fixed data on map from the display storage.*/
   /* ------------------------------------------------------------*/

  SL0VM001.SL0VMOPT = SL0VW00.SL0VMOPT;
  SL0VM001.SWEPLLNB = SL0VW00.SWEPLLNB;
  SL0VM001.SL8WOGRP = SL0VW00.SL8WOGRP;
  SL0VM001.SL8WONBR = SL0VW00.SL8WONBR;
  SL0VM001.TSHCNTNR = SL0VW00.TSHCNTNR;
  SL0VM001.SL2PALET = SL0VW00.SL2PALET;
  SL0VM001.SL8FRAR = SL0VW00.SL8FRAR;
  SL0VM001.SL8FRZN = SL0VW00.SL8FRZN;
  SL0VM001.SL8FRLC = SL0VW00.SL8FRLC;
  SL0VM001.SL8TOAR = SL0VW00.SL8TOAR;
  SL0VM001.SL8TOZN = SL0VW00.SL8TOZN;
  SL0VM001.SL8TOLC = SL0VW00.SL8TOLC;

   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  SL0VW00.SL0VWIXM = 1; /* Initialize line index*/

  while (SL0VW00.SL0VWIXM <= 45 /* Until screen is full*/
   && SL0VW01.PKDNCSQN[SL0VWIXM] != 0) /* end of data*/

    if (SL0VM001.SL0VMOPT == "C")
      set SL0VM001.SL0VMSEL[SL0VWIXM] normal; /* Unprotect*/
    end

    SL0VM001.SL0VMSEL[SL0VWIXM] = SL0VW01.SL0VMSEL[SL0VWIXM];
    SL0VM001.PKDNCSQN[SL0VWIXM] = SL0VW01.PKDNCSQN[SL0VWIXM];

    SL0VW00.SL0VWIXM = SL0VW00.SL0VWIXM + 1; /* Increment line index*/

  end

  if (SL0VM001.SL0VMOPT == "C")
    if (" " in SL0VM001.SL0VMSEL from 1) /* First select field*/
      set SL0VM001.SL0VMSEL[sysVar.arrayIndex] cursor; /* Position cursor*/
    end
  end
  SL0VW00.SL0VWSWU = "N"; /* storage update switch*/

end // end SL0V021

// obtain tsq page
Function SL0V023()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  SL0VW01.XXXTSLEN = SL0VW00.XXXTSLEN;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Program application*/
  TA5REC.TA5TSQIX = SL0VW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (SL0VW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "023"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0V023

// Check attention identifier
Function SL0V030()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (SL0VW00.SL0VWSWR == "Y") /* Request for data*/
      set SL0VW01 empty; /* M001 display storage*/
    end

    set SL0VM001 initial;
    SL0VW00.SLWMSGNO = 0; /* CANCEL - NO MSG*/
    SL0VW00.SL0VWPAS = 1; /* set pass to 1*/
    SL0VW00.SL0VWSWF = "N"; /* Format the map switch*/
    SL0VW00.SL0VWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (SL0VM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      SL0V011(); /* purge the tsq*/

      COMMAREA.CATOAP = SL0VM001.CATOAP;
      COMMAREA.CAITEM = SL0VM001.CAITEM;

      XSSL001(); /* Exit to another application*/

      set SL0VM001.CATOAP cursor, bold; /* Highlight*/

    else

      SLWREC.XXXLOCID = "030"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5 /* or PF5 was pressed*/
   || converseVar.eventKey is pf6) /* or PF5 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SL0VM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* pf3 was pressed*/
      COMMAREA.CATOAP = "SW0R"; /* TO application*/
    end

    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "SL0M"; /* TO application*/
    end

    if (converseVar.eventKey is pf6) /* PF6 was pressed*/
      COMMAREA.CATOAP = "SW0C"; /* TO application*/
    end


    SL0V011(); /* Purge the tsq*/

    XSSL001(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and pf7 was not pressed*/
   && converseVar.eventKey not pf8   /* and pf8 was not pressed*/
   && converseVar.eventKey not pf12) /* and pf12 was not pressed*/

    converseLib.clearScreen();
     /* Clear screen before display*/
    SLWREC.XXXLOCID = "030"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    exit stack; /* Exit to display map*/

  end


end // end SL0V030

// Reset highlighted fields
Function SL0V040()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SL0VM001.XWHCD initialAttributes;
  set SL0VM001.XWHCD protect;
  set SL0VM001.SL0VMOPT initialAttributes;
  set SL0VM001.SL0VMOPT protect;
  set SL0VM001.SWEPLLNB initialAttributes;
  set SL0VM001.SL8WOGRP initialAttributes;
  set SL0VM001.SL8WONBR initialAttributes;
  set SL0VM001.TSHCNTNR initialAttributes;
  set SL0VM001.SL2PALET initialAttributes;
  set SL0VM001.SL8FRAR initialAttributes;
  set SL0VM001.SL8FRZN initialAttributes;
  set SL0VM001.SL8FRLC initialAttributes;
end // end SL0V040

// verify the entered data
Function SL0V050()
   /* ------------------------------------------------------------*/
   /* first save the map variable fields to working storage*/
   /* ------------------------------------------------------------*/

  COMMAREA.XWHCD = SL0VM001.XWHCD;
  SL0VW00.SWEPLLNB = SL0VM001.SWEPLLNB;
  SL0VW00.SL8WOGRP = SL0VM001.SL8WOGRP;
  SL0VW00.SL8WONBR = SL0VM001.SL8WONBR;
  SL0VW00.TSHCNTNR = SL0VM001.TSHCNTNR;
  SL0VW00.SL2PALET = SL0VM001.SL2PALET;
  SL0VW00.SL8FRAR = SL0VM001.SL8FRAR;
  SL0VW00.SL8FRZN = SL0VM001.SL8FRZN;
  SL0VW00.SL8FRLC = SL0VM001.SL8FRLC;
  SL0VW00.SL8TOAR = SL0VM001.SL8TOAR;
  SL0VW00.SL8TOZN = SL0VM001.SL8TOZN;
  SL0VW00.SL8TOLC = SL0VM001.SL8TOLC;

   /* ------------------------------------------------------------*/
   /* If a required field was not entered, indicate that it is*/
   /* missing or invalid.*/
   /* ------------------------------------------------------------*/

  if (SL0VM001.SL0VMOPT == " ")
    set SL0VM001 initial;
    SLWREC.XXXLOCID = "050";
    converseLib.validationFailed(11);
    set SL0VM001.SL0VMOPT normal;
    set SL0VM001.SL0VMOPT cursor, bold;
    exit stack;
  end

  if (converseVar.validationMsgNum == 0)
    if (SL0VM001.SL0VMOPT != "P"
     && SL0VM001.SL0VMOPT != "A"
     && SL0VM001.SL0VMOPT != "C")
      converseLib.clearScreen();
      
      converseLib.validationFailed(11);
      set SL0VM001.SL0VMOPT normal;
      set SL0VM001.SL0VMOPT cursor, bold;
      exit stack;
    end
  end

  if (SL0VW00.SL0VWPAS == "1") /* ; if first time thru*/
    SL0V051(); /* pass1 validate options*/
  else
    if (SL0VW00.SL0VWPAS == "2") /* if second time thru*/
      if (SL0VM001.SL0VMOPT == "P")
        SL0V053(); /* validate plan*/
      else
        if (SL0VM001.SL0VMOPT == "A")
          SL0V054(); /* validate pallet data*/
        else
          SL0V055(); /* validate carton data*/
        end
      end
    else
      if (SL0VW00.SL0VWPAS == "3" /* if third time thru*/
       && SL0VW00.SL0VMOPT == "C" /* and option = carton delete*/
       && converseVar.eventKey not pf12) /* and enter or pf7/8 not pf12*/
        SL0V057(); /* check for carton selection*/
      end
    end
  end


end // end SL0V050

// validate option
Function SL0V051()

   /* reset the working storage keys*/

  SL0VW00.TSHCNTNR = " ";
  SL0VW00.SWEPLLNB = 0;
  SL0VW00.SL8WOGRP = 0;
  SL0VW00.SL8WONBR = 0;
  SL0VW00.SL8FRAR = " ";
  SL0VW00.SL8FRZN = " ";
  SL0VW00.SL8FRLC = " ";
  SL0VW00.SL8TOAR = " ";
  SL0VW00.SL8TOZN = " ";
  SL0VW00.SL8TOLC = " ";

   /* check the option and set the needed fields unprotected*/

  SL0VW00.SL0VMOPT = SL0VM001.SL0VMOPT;
  set SL0VM001.SL0VMOPT protect;
  set SL0VM001.XWHCD protect;
  if (SL0VW00.SL0VMOPT == "P")
    set SL0VM001.SWEPLLNB cursor, normal;
    SLWREC.XXXLOCID = "051";
    converseLib.validationFailed(307); /* please enter plan number*/
  else
    if (SL0VW00.SL0VMOPT == "A")
      set SL0VM001.SL8WONBR cursor, normal;
      SLWREC.XXXLOCID = "051";
      converseLib.validationFailed(308); /* please enter work order number*/
    else
      set SL0VM001.SWEPLLNB cursor, normal; /* required*/
      set SL0VM001.SL8WONBR normal; /* optional*/
      set SL0VM001.TSHCNTNR normal; /* required*/
      set SL0VM001.SL8FRAR normal; /* optional*/
      set SL0VM001.SL8FRZN normal; /* optional*/
      set SL0VM001.SL8FRLC normal; /* optional*/
      SLWREC.XXXLOCID = "051";
      converseLib.validationFailed(309); /* please enter plan and container*/
    end
  end

  SL0VW00.SL0VWPAS = 2; /* pass 1 complete*/

end // end SL0V051

// validate delete by plan
Function SL0V053()
  if (SL0VM001.SWEPLLNB == 0)
    SLWREC.XXXLOCID = "053";
    converseLib.validationFailed(307);
    return;
  end
  set SWEREC empty;
  SWEREC.XWHCD = SL0VM001.XWHCD;
  SWEREC.SWEPLLNB = SL0VM001.SWEPLLNB;
  SL0VS01();
  if (SQLCA.VAGen_SQLCODE == 100)
    set SL0VM001.XWHCD normal;
    set SL0VM001.XWHCD bold;
    set SL0VM001.SWEPLLNB normal;
    set SL0VM001.SWEPLLNB cursor, bold;
    SLWREC.XXXLOCID = "053";
    converseLib.validationFailed(115);
    return;
  else
    if (converseVar.eventKey is enter)
      if (SL0VM001.XWHCD != "07")
        if (SWEREC.XRPCD != "RC")
          SL0VM001.SL8WOGRP = SWEREC.SL8WOGRP;
          set SL0VM001.SWEPLLNB protect;
          set SL0VM001.SL0VMCNF cursor;
          SLWREC.XXXLOCID = "053";
          converseLib.validationFailed(310);
          SL0VW00.SL0VWPAS = 3;
          return;
        else
          set SL0VM001.SWEPLLNB normal;
          set SL0VM001.SWEPLLNB cursor, bold;
          SLWREC.XXXLOCID = "053";
          converseLib.validationFailed(218);
          return;
        end
      else
        if (SWEREC.SL-LAST-CRTN-FL == "Y")
          if (SWEREC.XRPCD == "IP"
           || SWEREC.XRPCD == "SC")
            SL0VM001.SL8WOGRP = SWEREC.SL8WOGRP;
            set SL0VM001.SWEPLLNB protect;
            set SL0VM001.SL0VMCNF cursor;
            SLWREC.XXXLOCID = "053";
            converseLib.validationFailed(310);
            SL0VW00.SL0VWPAS = 3;
            return;
          else
            set SL0VM001.SWEPLLNB normal;
            set SL0VM001.SWEPLLNB cursor, bold;
            SLWREC.XXXLOCID = "053";
            converseLib.validationFailed(218);
            return;
          end
        else
          set SL0VM001.SWEPLLNB normal;
          set SL0VM001.SWEPLLNB cursor, bold;
          SLWREC.XXXLOCID = "053";
          converseLib.validationFailed(441);
          return;
        end
      end
    end
  end

end // end SL0V053

// validate delete by pallet
Function SL0V054()

  if (SL0VM001.SL8WONBR == 0)
    SLWREC.XXXLOCID = "054";
    converseLib.validationFailed(308);
    return;
  end

  set SLLREC empty;
  SLLREC.XWHCD = SL0VM001.XWHCD;
  SLLREC.SL8WONBR = SL0VM001.SL8WONBR;
  SL0VS02();
  if (SQLCA.VAGen_SQLCODE == 100)
    set SL0VM001.SL8WONBR normal;
    set SL0VM001.SL8WONBR cursor, bold;
    SLWREC.XXXLOCID = "054";
    converseLib.validationFailed(115);
    return;
  end
  if (SLLREC.XQACD != "01")
    set SL0VM001.SL8WONBR normal;
    set SL0VM001.SL8WONBR cursor, bold;
    SLWREC.XXXLOCID = "054";
    converseLib.validationFailed(313); /* w/o delete not valid for b-grades*/
    return;
  end

  set SWEREC empty;
  SWEREC.XWHCD = SLLREC.XWHCD;
  SWEREC.SWEPLLNB = SLLREC.SWEPLLNB;
  SL0VS01();
  if (SQLCA.VAGen_SQLCODE == 100)
    SLWREC.XXXLOCID = "054";
    converseLib.validationFailed(001);
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
    SL0VW00.SL0VWSWR = "N"; /* Request for data switch*/
    SLWREC.XXXLOCID = "S01"; /* Module identification*/
    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT THE TABLE ROW";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
    TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
    TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VPLNHD01"; /* Table view name*/
    TA1REC.TA1TBLKE = SWEREC.SWEGROUP; /* Table key*/
    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    exit stack;
  else
    if (SWEREC.XRPCD != "IP"
     && SWEREC.XRPCD != "SC")
      set SL0VM001.SL8WONBR normal;
      set SL0VM001.SL8WONBR cursor, bold;
      SLWREC.XXXLOCID = "054";
      converseLib.validationFailed(218);
      return;
    end
  end


  if (SL0VM001.XWHCD != "07")
    set SL0VM001.SL8WONBR protect;
    set SL0VM001.SL0VMCNF cursor, normal;
    SL0VW00.SWEPLLNB = SLLREC.SWEPLLNB;
    SL0VW00.SL8WONBR = SLLREC.SL8WONBR;
    SL0VW00.SL8WOGRP = SLLREC.SL8WOGRP;
    SL0VW00.TSHCNTNR = SLLREC.TSHCNTNR;
    SL0VW00.SL2PALET = SLLREC.SL2PALET;
    SL0VW00.SL8FRAR = SLLREC.SL8FRAR;
    SL0VW00.SL8FRZN = SLLREC.SL8FRZN;
    SL0VW00.SL8FRLC = SLLREC.SL8FRLC;
    SL0VW00.SL8TOAR = SLLREC.SL8TOAR;
    SL0VW00.SL8TOZN = SLLREC.SL8TOZN;
    SL0VW00.SL8TOLC = SLLREC.SL8TOLC;
    SLWREC.XXXLOCID = "054";
    SL0VW00.SLWMSGNO = 310;
    SL0VW00.SL0VWPAS = 3;
    SL0VW00.SL0VWSWR = "Y";
    SL0VW00.SL0VWSWF = "Y";
    return;
  else
    if (SWEREC.SL-LAST-CRTN-FL == "Y")
      set SL0VM001.SL8WONBR protect;
      set SL0VM001.SL0VMCNF cursor, normal;
      SL0VW00.SWEPLLNB = SLLREC.SWEPLLNB;
      SL0VW00.SL8WONBR = SLLREC.SL8WONBR;
      SL0VW00.SL8WOGRP = SLLREC.SL8WOGRP;
      SL0VW00.TSHCNTNR = SLLREC.TSHCNTNR;
      SL0VW00.SL2PALET = SLLREC.SL2PALET;
      SL0VW00.SL8FRAR = SLLREC.SL8FRAR;
      SL0VW00.SL8FRZN = SLLREC.SL8FRZN;
      SL0VW00.SL8FRLC = SLLREC.SL8FRLC;
      SL0VW00.SL8TOAR = SLLREC.SL8TOAR;
      SL0VW00.SL8TOZN = SLLREC.SL8TOZN;
      SL0VW00.SL8TOLC = SLLREC.SL8TOLC;
      SLWREC.XXXLOCID = "054";
      SL0VW00.SLWMSGNO = 310;
      SL0VW00.SL0VWPAS = 3;
      SL0VW00.SL0VWSWR = "Y";
      SL0VW00.SL0VWSWF = "Y";
      return;
    else
      set SL0VM001.SL8WONBR normal;
      set SL0VM001.SL8WONBR cursor, bold;
      SLWREC.XXXLOCID = "054";
      converseLib.validationFailed(441);
      return;
    end
  end

end // end SL0V054

// validate delete by carton
Function SL0V055()
   /* ------------------------------------------------------------*/
   /* validate data for delete by carton*/
   /* ------------------------------------------------------------*/
  set SL0VM001.SWEPLLNB normal;
  set SL0VM001.TSHCNTNR normal;
  set SL0VM001.SL8WONBR normal;
  set SL0VM001.SL8FRAR normal;
  set SL0VM001.SL8FRZN normal;
  set SL0VM001.SL8FRLC normal;

  set SWEREC empty;
  set SLLREC empty;

  if (SL0VM001.SL8FRAR != " "
   || SL0VM001.SL8FRZN != " "
   || SL0VM001.SL8FRLC != " ")
    if (SL0VM001.SL8FRAR == " ")
      set SL0VM001.SL8FRAR cursor, bold;
      set SL0VM001.SL8FRZN bold;
      set SL0VM001.SL8FRLC bold;
      converseLib.validationFailed(312);
      if (SL0VM001.SL8FRZN == " ")
        set SL0VM001.SL8FRZN cursor, bold;
        set SL0VM001.SL8FRAR bold;
        set SL0VM001.SL8FRLC bold;
        converseLib.validationFailed(312);
        if (SL0VM001.SL8FRLC == " ")
          set SL0VM001.SL8FRLC cursor, bold;
          set SL0VM001.SL8FRAR bold;
          set SL0VM001.SL8FRZN bold;
          converseLib.validationFailed(312);
        end
      end
    end
  end


  if (SL0VM001.TSHCNTNR != " "
   || SL0VM001.SWEPLLNB != 0)
    if (SL0VM001.TSHCNTNR == " ")
      set SL0VM001.TSHCNTNR cursor, bold;
      SLWREC.XXXLOCID = "055";
      converseLib.validationFailed(009);
    end

    if (SL0VM001.SWEPLLNB == 0)
      set SL0VM001.SWEPLLNB cursor, bold;
      SLWREC.XXXLOCID = "055";
      converseLib.validationFailed(009);
    end
  end
  if (converseVar.validationMsgNum == 0)
    if (SL0VM001.SL8WONBR == 0)
      if (SL0VM001.TSHCNTNR == " "
       && SL0VM001.SWEPLLNB == 0)
        set SL0VM001.SL8WONBR cursor, bold;
        SLWREC.XXXLOCID = "055";
        converseLib.validationFailed(309);
      end
    end
  end

  if (SL0VM001.XWHCD == " ")
    set SL0VM001.XWHCD cursor, bold;
    SLWREC.XXXLOCID = "055";
    converseLib.validationFailed(009);
  end

  if (converseVar.validationMsgNum == 0)
    set SLLREC empty;
    SLLREC.XWHCD = SL0VM001.XWHCD;
    SLLREC.SWEPLLNB = SL0VM001.SWEPLLNB;
    SLLREC.TSHCNTNR = SL0VM001.TSHCNTNR;
    SLLREC.SL8WONBR = SL0VM001.SL8WONBR;
    if (SLLREC.SWEPLLNB == 0)
      SLLREC.SWEPLLNB = -1;
    end
    if (SLLREC.TSHCNTNR == " ")
      SLLREC.TSHCNTNR = "*";
    end
    if (SLLREC.SL8WONBR == 0)
      SLLREC.SL8WONBR = -1;
    end
    SL0VW00.SL0VWIDX = 0;
    SL0VW00.SL0VW2CT = 0;
    SL0VS03(); /* open vwophd01 's5' option*/
    SL0VS04(); /* fetch first row*/
    if (SQLCA.VAGen_SQLCODE != 0)
      set SL0VM001.SWEPLLNB cursor, bold;
      set SL0VM001.TSHCNTNR bold;
      set SL0VM001.SL8WONBR bold;
      set SL0VM001.SL8FRAR bold;
      set SL0VM001.SL8FRZN bold;
      set SL0VM001.SL8FRLC bold;
      converseLib.validationFailed(012);
    else
      while (SQLCA.VAGen_SQLCODE == 0)
        SL0V056();
        SL0VS04(); /* fetch next row*/
      end
    end
    SL0VS05(); /* close vwophd01*/
  end
  if (converseVar.validationMsgNum == 0)
    SL0VW00.SL0VW2CT = SL0VW00.SL0VWIDX; /* save count*/
    SL0VW00.SWEPLLNB = SL0VM001.SWEPLLNB;
    SL0VW00.SL8WONBR = SL0VM001.SL8WONBR;
    SL0VW00.SL8WOGRP = SLLREC.SL8WOGRP;
    SL0VW00.TSHCNTNR = SL0VM001.TSHCNTNR;
    SL0VW00.SL8FRAR = SL0VM001.SL8FRAR;
    SL0VW00.SL8FRZN = SL0VM001.SL8FRZN;
    SL0VW00.SL8FRLC = SL0VM001.SL8FRLC;
    if (SL0VM001.SL8WONBR > 0)
      SL0VW00.SL8TOAR = SLLREC.SL8TOAR;
      SL0VW00.SL8TOZN = SLLREC.SL8TOZN;
      SL0VW00.SL8TOLC = SLLREC.SL8TOLC;
    end
    SLWREC.XXXLOCID = "054";
    SL0VW00.SLWMSGNO = 315;
    SL0VW00.SL0VWPAS = 3;
    SL0VW00.SL0VWSWR = "Y";
    SL0VW00.SL0VWSWF = "Y";
  end
  if (converseVar.validationMsgNum == 0)
    set SWEREC empty;
    SWEREC.XWHCD = SL0VM001.XWHCD;
    SWEREC.SWEPLLNB = SL0VM001.SWEPLLNB;
    SL0VS01();
    if (SQLCA.VAGen_SQLCODE == 100)
      set SL0VM001.SWEPLLNB cursor, bold;
      SLWREC.XXXLOCID = "055";
      converseLib.validationFailed(115);
    else
      if (SL0VM001.XWHCD != "07")
        if (SWEREC.XRPCD != "IP"
         && SWEREC.XRPCD != "SC")
          set SL0VM001.SWEPLLNB cursor, bold;
          set SL0VM001.TSHCNTNR bold;
          set SL0VM001.SL8WONBR bold;
          set SL0VM001.SL8FRAR bold;
          set SL0VM001.SL8FRZN bold;
          set SL0VM001.SL8FRLC bold;
          SLWREC.XXXLOCID = "055";
          converseLib.validationFailed(218);
        end
      else
        if (SWEREC.SL-LAST-CRTN-FL == "Y")
          if (SWEREC.XRPCD != "IP"
           && SWEREC.XRPCD != "SC")
            set SL0VM001.SWEPLLNB cursor, bold;
            set SL0VM001.TSHCNTNR bold;
            set SL0VM001.SL8WONBR bold;
            set SL0VM001.SL8FRAR bold;
            set SL0VM001.SL8FRZN bold;
            set SL0VM001.SL8FRLC bold;
            SLWREC.XXXLOCID = "055";
            converseLib.validationFailed(218);
          end
        else
          set SL0VM001.SWEPLLNB cursor, bold;
          set SL0VM001.TSHCNTNR bold;
          SLWREC.XXXLOCID = "055";
          converseLib.validationFailed(441);
        end
      end
    end
  end


  if (converseVar.validationMsgNum != 0)
    exit stack;
  end

  set SL0VM001.SWEPLLNB protect;
  set SL0VM001.TSHCNTNR protect;
  set SL0VM001.SL8WONBR protect;
  set SL0VM001.SL8FRAR protect;
  set SL0VM001.SL8FRZN protect;
  set SL0VM001.SL8FRLC protect;

end // end SL0V055

// save wophd data for crtn sel
Function SL0V056()
  if (SL0VM001.SL8WONBR != 0)
     /* AND SLLREC.XQACD > '01';*/
     /* MOVE 100 TO SQLCA.SQLCODE;*/
     /* MOVE 313 TO EZEMNO;*/
     /* SET SL0VM001.SL8WONBR CURSOR,BRIGHT;*/
  else
    if (SL0VM001.SL8WONBR == 0
     || SLLREC.SL8WONBR == SL0VM001.SL8WONBR)

      if (SL0VM001.SL8FRAR == " "
       || SL0VM001.SL8FRAR == SLLREC.SL8FRAR)

        if (SL0VM001.SL8FRZN == " "
         || SL0VM001.SL8FRZN == SLLREC.SL8FRZN)

          if (SL0VM001.SL8FRLC == " "
           || SL0VM001.SL8FRLC == SLLREC.SL8FRLC)

            SL0VW00.SL0VWIDX = SL0VW00.SL0VWIDX + 1;
            SL0VW03.XWHCD[SL0VWIDX] = SLLREC.XWHCD;
            SL0VW03.TSHCNTNR[SL0VWIDX] = SLLREC.TSHCNTNR;
            SL0VW03.SWEPLLNB[SL0VWIDX] = SLLREC.SWEPLLNB;
            SL0VW03.SL8WOGRP[SL0VWIDX] = SLLREC.SL8WOGRP;
            SL0VW03.SL8WONBR[SL0VWIDX] = SLLREC.SL8WONBR;
            SL0VW03.SL8FRAR[SL0VWIDX] = SLLREC.SL8FRAR;
            SL0VW03.SL8FRZN[SL0VWIDX] = SLLREC.SL8FRZN;
            SL0VW03.SL8FRLC[SL0VWIDX] = SLLREC.SL8FRLC;
            SL0VW03.XQACD[SL0VWIDX] = SLLREC.XQACD;
            if (SL0VM001.TSHCNTNR == " ")
              SL0VM001.TSHCNTNR = SLLREC.TSHCNTNR;
            end
            if (SL0VM001.SWEPLLNB == 0)
              SL0VM001.SWEPLLNB = SLLREC.SWEPLLNB;
            end
            if (SWEREC.SWEPLLNB != SLLREC.SWEPLLNB)
              set SWEREC empty;
              SWEREC.XWHCD = SLLREC.XWHCD;
              SWEREC.SWEPLLNB = SLLREC.SWEPLLNB;
              SL0VS01();
              if (SQLCA.VAGen_SQLCODE == 100)
                set SL0VM001.SWEPLLNB cursor, bold;
                SLWREC.XXXLOCID = "055";
                converseLib.validationFailed(115);
              else
                if (SWEREC.XRPCD != "IP"
                 && SWEREC.XRPCD != "SC")
                  set SL0VM001.SWEPLLNB cursor, bold;
                  set SL0VM001.TSHCNTNR bold;
                  set SL0VM001.SL8WONBR bold;
                  set SL0VM001.SL8FRAR bold;
                  set SL0VM001.SL8FRZN bold;
                  set SL0VM001.SL8FRLC bold;
                  SLWREC.XXXLOCID = "055";
                  converseLib.validationFailed(218);
                end
              end
            end
          end
        end
      end
    end
  end



end // end SL0V056

// track crtn selections
Function SL0V057()

  SL0VW00.SL0VWIXM = 1; /* zero index*/
  while (SL0VW00.SL0VWIXM <= 45
   && SL0VM001.PKDNCSQN[SL0VWIXM] > 0)
    SL0VW01.SL0VMSEL[SL0VWIXM] = SL0VM001.SL0VMSEL[SL0VWIXM];
    SL0VW00.SL0VWIXM = SL0VW00.SL0VWIXM + 1;
  end

  SL0VS06(); /* updte current page*/

  SL0VW00.SL0VWIXM = 1; /* zero index*/

  while (SL0VW00.SL0VWIXM <= 45
   && SL0VM001.PKDNCSQN[SL0VWIXM] > 0)
    SL0VW01.SL0VMSEL[SL0VWIXM] = SL0VM001.SL0VMSEL[SL0VWIXM];
    if (SL0VW01.XQACD[SL0VWIXM] > "01" /* if crtn b-grade*/
     && SL0VM001.SL0VMSEL[SL0VWIXM] == "S") /* and selected*/

       /* select all cartons with the same carton # on curr page*/

      SL0VW00.SL0VWIDX = 1;
      while (SL0VW00.SL0VWIDX <= 45
       && SL0VW01.PKDNCSQN[SL0VWIDX] > 0)
        if (SL0VW01.PKDNCSQN[SL0VWIDX] == SL0VW01.PKDNCSQN[SL0VWIXM])
          SL0VW01.SL0VMSEL[SL0VWIDX] = "S";
          SL0VM001.SL0VMSEL[SL0VWIDX] = "S";
        end
        SL0VW00.SL0VWIDX = SL0VW00.SL0VWIDX + 1;
      end

      if (SL0VM001.TA5TSQIX > 1)

         /* if there is more then 1 tsq page check all the others*/
         /* for the same carton #*/

        TA5REC.TA5TSQIX = 1;
        while (TA5REC.TA5TSQIX <= SL0VM001.TA5TSQIX)
          if (TA5REC.TA5TSQIX != SL0VM001.XXXTSPAG)
            SL0VS07(); /* fetch tsq page*/
            SL0VW00.SL0VWIDX = 1;
            while (SL0VW00.SL0VWIDX <= 45
             && SL0VW02.PKDNCSQN[SL0VWIDX] > 0)
              if (SL0VW02.PKDNCSQN[SL0VWIDX] == SL0VW01.PKDNCSQN[SL0VWIXM])
                SL0VW02.SL0VMSEL[SL0VWIDX] = "S";
              end
              SL0VW00.SL0VWIDX = SL0VW00.SL0VWIDX + 1;
            end
            if ("S" in SL0VW02.SL0VMSEL from 1)
              SL0VS08(); /* update tsq page*/
            end
          end
          TA5REC.TA5TSQIX = TA5REC.TA5TSQIX + 1;
        end
        TA5REC.TA5TSQIX = SL0VM001.XXXTSPAG;
        SL0VS09(); /* fetch starting tsq page*/
      end
    end
    SL0VW00.SL0VWIXM = SL0VW00.SL0VWIXM + 1;
  end
end // end SL0V057

// process valid option
Function SL0V060()

   /* ------------------------------------------------------------*/
   /* Save the select fields*/
   /* ------------------------------------------------------------*/

  if (SL0VM001.SL0VMOPT == "C")

    SL0VW00.SL0VWIXM = 1; /* Initialize line index*/

    while (SL0VW00.SL0VWIXM <= 45) /* Until end of lines*/

      if (SL0VM001.SL0VMSEL[SL0VWIXM] != SL0VW01.SL0VMSEL[SL0VWIXM])

        SL0VW01.SL0VMSEL[SL0VWIXM] = SL0VM001.SL0VMSEL[SL0VWIXM];
        SL0VW00.SL0VWSWU = "Y"; /* Storage update switch*/

      end

      SL0VW00.SL0VWIXM = SL0VW00.SL0VWIXM + 1; /* Increment line index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (SL0VM001.SL0VMOPT == "A"
   || SL0VM001.SL0VMOPT == "C")
    if (converseVar.eventKey is pf7) /* Scroll back requested*/

      /* ------------------------------------------------------------*/
       /* Indicate that the map must be formatted before display.*/
      /* ------------------------------------------------------------*/

      SL0VW00.SL0VWSWF = "Y"; /* Format the map switch*/

      SL0VW00.XXXTSPAG = SL0VW00.XXXTSPAG - 1; /* Decrement page*/
      if (SL0VW00.XXXTSPAG == 0)
        SL0VW00.XXXTSPAG = SL0VW00.XXXTSPAG + 1;
      end

      return; /* Return to previous process*/

    end

    /* ------------------------------------------------------------*/
     /* If a scroll forward was requested, increment the page*/
     /* number and return to the previous process.*/
    /* ------------------------------------------------------------*/

    if (converseVar.eventKey is pf8) /* Scroll forward requested*/

      SL0VW00.SL0VWSWF = "Y"; /* Format the map switch*/
      SL0VW00.XXXTSPAG = SL0VW00.XXXTSPAG + 1; /* Increment page*/

      return; /* Return to previous process*/

    end

  end

  if (converseVar.validationMsgNum == 0
   && SL0VM001.SL0VMOPT == "C"
   && converseVar.eventKey is pf12)
    SL0VM001.SL0VMCNF = "Y"; /* submit delete request*/
  end
   /* ------------------------------------------------------------*/
   /* display the map if ezemno gt 0 (not nessarily an error)*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0 /* Error was found*/
   || SL0VM001.SL0VMCNF != "Y")        
    exit stack; /* Exit to display map*/
  end


  SL0V100(); /* submit delete job*/

end // end SL0V060

// submit JCL via xpta0p
Function SL0V100()
   /* ------------------------------------------------------------*/
   /* Format the variable parameters entered by the user.*/
   /* ------------------------------------------------------------*/

  if (SL0VM001.SL0VMOPT == "P") /* carton plan*/
    SL0V110();
  else
    if (SL0VM001.SL0VMOPT == "A") /* delete by pallet*/
      SL0V120();
    else
      SL0V130(); /* delete by carton*/
    end
  end

  if (converseVar.validationMsgNum == 0)
    set SL0VW00 empty;
    set SL0VM001 initial;
    SL0VW00.SL0VWPAS = 1;
    converseLib.validationFailed(311);
    SL0VW00.SLWMSGNO = 311;
  end

end // end SL0V100

// delete by plan jcl submit
Function SL0V110()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (SL0VT01.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/

      set SWRREC empty;
      SWRREC.SWRDELFL = "P";
      SWRREC.XWHCD = SL0VM001.XWHCD;
      SWRREC.SWRPLLNB = SL0VM001.SWEPLLNB;
      SWRREC.SWRWOGRP = SL0VM001.SL8WOGRP;
      SWRREC.SWRPF9FL = "N";
      TA6REC.TARJCL[TA6INDEX] = SWRREC.SWRGROUP; /* parm*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = SL0VT01.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = SL0VT01.TARTYPE[TA6INDEX]; /* Type*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (SL0VT01.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = "025"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    SL0VW01.SL0VMSEL[2] = "*"; /* Indicate function completed*/

    set SL0VM001 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end SL0V110

// delete by pallet submit
Function SL0V120()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (SL0VT02.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user.*/
      /* ------------------------------------------------------------*/

                                  /* delete by pallet*/
      set SWRREC empty;
      SWRREC.SWRDELFL = "A";
      SWRREC.XWHCD = SL0VM001.XWHCD;
      SWRREC.TSHCNTNR = SL0VM001.TSHCNTNR;
      SWRREC.SWRPLLNB = SL0VM001.SWEPLLNB;
      SWRREC.SWRWOGRP = SL0VM001.SL8WOGRP;
      SWRREC.SWRWONBR = SL0VM001.SL8WONBR;
      SWRREC.SL2PALET = SL0VM001.SL2PALET;
      SWRREC.SWRPF9FL = "N";
      SWRREC.SWRPONBR = SLLREC.PC3PONBR;
      TA6REC.TARJCL[TA6INDEX] = SWRREC.SWRGROUP; /* parm*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = SL0VT02.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = SL0VT02.TARTYPE[TA6INDEX]; /* Type*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (SL0VT02.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = "025"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    SL0VW01.SL0VMSEL[2] = "*"; /* Indicate function completed*/

    set SL0VM001 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end SL0V120

// delete by carton submit
Function SL0V130()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize tbl index*/
  SL0VW00.SL0VWIDX = 1; /* Initialize data idx*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (SL0VT03.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable carton parameters*/
      /* ------------------------------------------------------------*/

      if (SL0VT03.SL0VWTYP[TA6INDEX] == "C") /* w/o crtnin data*/
        if (converseVar.eventKey is enter) /* ; not pf12 select all*/
          SL0V140();
        else
          set SWSREC empty;
          TA6REC.TARJCL[SL0VWIDX] = SWSREC.SWSGROUP;
        end
      else
        set SWRREC empty;
        SWRREC.SWRDELFL = "C";
        SWRREC.XWHCD = SL0VM001.XWHCD;
        SWRREC.TSHCNTNR = SL0VM001.TSHCNTNR;
        SWRREC.SWRPLLNB = SL0VM001.SWEPLLNB;
        SWRREC.SWRWOGRP = SL0VM001.SL8WOGRP;
        SWRREC.SWRWONBR = SL0VM001.SL8WONBR;
        SWRREC.SL8FRAR = SL0VM001.SL8FRAR;
        SWRREC.SL8FRZN = SL0VM001.SL8FRZN;
        SWRREC.SL8FRLC = SL0VM001.SL8FRLC;
        if (converseVar.eventKey is enter)
          SWRREC.SWRPF9FL = "N";
        else
          SWRREC.SWRPF9FL = "Y";
        end
        TA6REC.TARJCL[SL0VWIDX] = SWRREC.SWRGROUP;
      end

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table.*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[SL0VWIDX] = SL0VT03.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[SL0VWIDX] = SL0VT03.TARTYPE[TA6INDEX]; /* Type*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (SL0VT03.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      SL0VW00.SL0VWIDX = SL0VW00.SL0VWIDX + 1;

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = "025"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    SL0VW01.SL0VMSEL[2] = "*"; /* Indicate function completed*/

    set SL0VM001 initial; /* Clear map output area*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/

  end

  exit stack; /* Exit to display map*/


end // end SL0V130

// format individual ctn deletes
Function SL0V140()
   /* ------------------------------------------------------------*/
   /* PROCESS ALL TSQ PAGES CHECKING FOR 'S' IN SEL AND FORMAT*/
   /* WSL4251 (SWSREC) FOR INPUT TO DELETE JOB*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5TSQIX = 1;
  while (TA5REC.TA5TSQIX <= SL0VM001.TA5TSQIX)
    if (SL0VM001.TA5TSQIX == 1)
      move SL0VW01 to SL0VW02 withV60Compat;
    else
      SL0VS07(); /* fetch tsq page*/
    end
    SL0VW00.SL0VWIXM = 1;
    while (SL0VW00.SL0VWIXM <= 45
     && SL0VW02.PKDNCSQN[SL0VWIXM] > 0)
      if (SL0VW02.SL0VMSEL[SL0VWIXM] == "S")
        SWSREC.SWSWONBR = SL0VW02.SL8WONBR[SL0VWIXM];
        SWSREC.SWSCRTNB = SL0VW02.PKDNCSQN[SL0VWIXM];
        TA6REC.TARJCL[SL0VWIDX] = SWSREC.SWSGROUP;
        SL0VW00.SL0VWIDX = SL0VW00.SL0VWIDX + 1;
      end
      SL0VW00.SL0VWIXM = SL0VW00.SL0VWIXM + 1;
    end
    TA5REC.TA5TSQIX = TA5REC.TA5TSQIX + 1;
  end
   /* ------------------------------------------------------------*/
   /* set the sl0vwidx back by 1 because it will be set up again*/
   /* when this procedure is complete*/
   /* ------------------------------------------------------------*/
end // end SL0V140

// select unique dstloc.vplnhd01
Function SL0VS01()
   /* ------------------------------------------------------------*/
   /* select unique dstloc.vplnhd01.*/
   /* ------------------------------------------------------------*/

  set SLVREC empty;
  SLVREC.SLVFNC = "S ";
  try
    call "IO5350" (SLVREC, SQLCA, SWEREC) {isNoRefresh = yes, isExternal = yes};
  end
                                   /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SL0VW00.SL0VWSWR = "N"; /* Request for data switch*/

  SLWREC.XXXLOCID = "S01"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPLNHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SWEREC.SWEGROUP; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0VS01

// select unique dstloc.vwophd01
Function SL0VS02()
   /* ------------------------------------------------------------*/
   /* select unique dstloc.vwophd01.*/
   /* ------------------------------------------------------------*/

  try
    call "IO5400" ("S ", SQLCA, SLLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* and normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or  not found*/

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SL0VW00.SL0VWSWR = "N"; /* Request for data switch*/

  SLWREC.XXXLOCID = "S02"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SLLREC.SLLDATA; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0VS02

// declare 's6' dstloc.vwophd01
Function SL0VS03()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  try
    call "IO5400" ("S6", SQLCA, SLLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SL0VW00.SL0VWSWR = "N"; /* Request for data switch*/

  SLWREC.XXXLOCID = "S03"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT SET \"S5\" ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SLLREC.SLLDATA; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0VS03

// fetch   'n6' dstloc.vwophd01
Function SL0VS04()
   /* ------------------------------------------------------------*/
   /* Fetch the row to display from the table.*/
   /* ------------------------------------------------------------*/
  try
    call "IO5400" ("N6", SQLCA, SLLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SL0VW00.SL0VWSWR = "N"; /* Request for data switch*/

  SLWREC.XXXLOCID = "S04"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT \"N5\" ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SLLREC.SLLDATA; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0VS04

// close   'c6' dstloc.vwophd01
Function SL0VS05()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/
  try
    call "IO5400" ("C6", SQLCA, SLLREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If successful or not found, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SL0VW00.SL0VWSWR = "N"; /* Request for data switch*/

  SLWREC.XXXLOCID = "S05"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Indicate not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Indicate system error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE  SET \"S5\" ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VWOPHD01"; /* Table view name*/
  TA1REC.TA1TBLKE = SLLREC.SLLDATA; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0VS05

// update current tsq page
Function SL0VS06()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  SL0VW01.XXXTSLEN = SL0VW00.XXXTSLEN;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Program application*/
  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (SL0VW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "022"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0VS06

// fetch working tsq page
Function SL0VS07()
   /* ------------------------------------------------------------*/
   /* Obtain a page of data to check for select b-grade*/
   /* ------------------------------------------------------------*/

  SL0VW02.XXXTSLEN = SL0VW00.XXXTSLEN;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Program application*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (SL0VW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S06"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0VS07

// update working tsq page
Function SL0VS08()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  SL0VW02.XXXTSLEN = SL0VW00.XXXTSLEN;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Program application*/
  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (SL0VW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "S07"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0VS08

// restore current tsq page
Function SL0VS09()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  SL0VW01.XXXTSLEN = SL0VW00.XXXTSLEN;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Program application*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (SL0VW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "023"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL0VS09

//*** RECORD=SL0VW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record SL0VW00 type basicRecord
  5 * char(26) ; 
    10 SL0VWSWF SL0VWSWF ; 
    10 SL0VWSWR SL0VWSWR ; 
    10 SL0VWSWU SL0VWSWU ; 
    10 XXXTSPAG XXXTSPAG ; 
    10 TA5TSQIX TA5TSQIX ; 
    10 XXXTSLEN XXXTSLEN ; 
    10 SLWMSGNO SLWMSGNO ; 
    10 SL0VWIXM SL0VWIXM ; 
    10 SL0VWIDX SL0VWIDX ; 
    10 SL0VW2CT SL0VW2CT ; 
    10 SL0VWSWD SL0VWSWD ; 
    10 SL0VWPAS SL0VWPAS ; 
    10 SL0VMOPT SL0VMOPT ; 
  5 * char(51) ; 
    10 SWEPLLNB SWEPLLNB ; 
    10 SL8WOGRP SL8WOGRP ; 
    10 SL8WONBR SL8WONBR ; 
    10 TSHCNTNR TSHCNTNR ; 
    10 SL2PALET SL2PALET ; 
    10 SL8FRAR SL8FRAR ; 
    10 SL8FRZN SL8FRZN ; 
    10 SL8FRLC SL8FRLC ; 
    10 SL8TOAR SL8TOAR ; 
    10 SL8TOZN SL8TOZN ; 
    10 SL8TOLC SL8TOLC ; 
end // end SL0VW00

//*** RECORD=SL0VW01 ****
// ************************************************************
// working storage for carton number delete.
// 
// WARNING -- If sl0vw03 is changed this record must be changed
//            also.
// 
// ************************************************************
// 
// when (C)arton delete selected any b-grade cartons selected
// will cause a search to select all other b-grade cartons with
// the same carton number. This includes all tsq pages.
// 
// ***********************
Record SL0VW01 type basicRecord
  3 XXXTSLEN XXXTSLEN ; 
  3 * char(2025) ; 
    5 SL0VMGRP SL0VMGRP [45] ; 
      10 SL0VMSEL SL0VMSEL ; 
      10 XWHCD XWHCD ; 
      10 TSHCNTNR TSHCNTNR ; 
      10 SWEPLLNB SWEPLLNB ; 
      10 SL8WOGRP SL8WOGRP ; 
      10 SL8WONBR SL8WONBR ; 
      10 SL8FRAR SL8FRAR ; 
      10 SL8FRZN SL8FRZN ; 
      10 SL8FRLC SL8FRLC ; 
      10 XQACD XQACD ; 
      10 PKDNCSQN PKDNCSQN ; 
end // end SL0VW01

//*** RECORD=SL0VW02 ****
// ************************************************************
// working storage for carton number search.
// 
// WARNING -- If sl0vw01 is changed this record must be changed
//            also.
// 
// ************************************************************
// 
// when (C)arton delete selected any b-grade cartons selected
// will cause a search to select all other b-grade cartons with
// the same carton number. This includes all tsq pages.
// 
// ***********************
Record SL0VW02 type basicRecord
  3 XXXTSLEN XXXTSLEN ; 
  3 * char(2025) ; 
    5 SL0VMGRP SL0VMGRP [45] ; 
      10 SL0VMSEL SL0VMSEL ; 
      10 XWHCD XWHCD ; 
      10 TSHCNTNR TSHCNTNR ; 
      10 SWEPLLNB SWEPLLNB ; 
      10 SL8WOGRP SL8WOGRP ; 
      10 SL8WONBR SL8WONBR ; 
      10 SL8FRAR SL8FRAR ; 
      10 SL8FRZN SL8FRZN ; 
      10 SL8FRLC SL8FRLC ; 
      10 XQACD XQACD ; 
      10 PKDNCSQN PKDNCSQN ; 
end // end SL0VW02

//*** RECORD=SL0VW03 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record SL0VW03 type basicRecord
  3 * char(32000) ; 
    5 * char(40) [800] ; 
      10 XWHCD XWHCD ; 
      10 TSHCNTNR TSHCNTNR ; 
      10 SWEPLLNB SWEPLLNB ; 
      10 SL8WOGRP SL8WOGRP ; 
      10 SL8WONBR SL8WONBR ; 
      10 SL8FRAR SL8FRAR ; 
      10 SL8FRZN SL8FRZN ; 
      10 SL8FRLC SL8FRLC ; 
      10 XQACD XQACD ; 
end // end SL0VW03

//*** RECORD=SL0VW04 ****
// ------------------------------------------------------------
// Parameters for DV1001 - Development Model Example.
// ------------------------------------------------------------
// ***********************
Record SL0VW04 type basicRecord
  5 TARJCL TARJCL ; 
    10 SL0VWTYP SL0VWTYP ; 
    10 * char(79) ; 
end // end SL0VW04

//*** RECORD=SWRREC ****
// ********************* PLAN HEADER TABLE ********************
// 
// DB2 TABLE:            none
// IBM COPYLIB MEMBER:   wsl4201
// DATE CREATED:         december 6, 1990
// 
// MAINTENANCE LOG:
// 
// DATE     INIT   COMMENTS
// -------- ------ --------------------------------------------
// 12-06-90 jcampb Created CSP record.
// ************************************************************
// **********************
Record SWRREC type basicRecord
  5 SWRGROUP SWRGROUP ; 
    10 SWRDELFL SWRDELFL ; 
    10 XWHCD XWHCD ; 
    10 TSHCNTNR TSHCNTNR ; 
    10 SWRPLLNB SWRPLLNB ; 
    10 SWRWOGRP SWRWOGRP ; 
    10 SWRWONBR SWRWONBR ; 
    10 SL2PALET SL2PALET ; 
    10 SWRPF9FL SWRPF9FL ; 
    10 SL8FRAR SL8FRAR ; 
    10 SL8FRZN SL8FRZN ; 
    10 SL8FRLC SL8FRLC ; 
    10 SWRPONBR SWRPONBR ; 
    10 * char(11) ; 
end // end SWRREC

//*** RECORD=SWSREC ****
// ********************* PLAN HEADER TABLE ********************
// 
// DB2 TABLE:            none
// COPYLIB MEMBER:       wsl4251
// DATE CREATED:         december 6, 1990
// 
// MAINTENANCE LOG:
// 
// DATE     INIT   COMMENTS
// -------- ------ --------------------------------------------
// 12-06-90 jcampb Created CSP record.
// ************************************************************
// **********************
Record SWSREC type basicRecord
  5 SWSGROUP SWSGROUP ; 
    10 SWSWONBR SWSWONBR ; 
    10 SWSCRTNB SWSCRTNB ; 
    10 * char(62) ; 
end // end SWSREC

DataItem SL0VMGRP char(45)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map option
DataItem SL0VMOPT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection variable
DataItem SL0VMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// count of entries in sl0vw02
DataItem SL0VW2CT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// general index
DataItem SL0VWIDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for map fields
DataItem SL0VWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// map pass count
DataItem SL0VWPAS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed switch
DataItem SL0VWSWD num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Format the map switch
DataItem SL0VWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem SL0VWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Storage page update switch
DataItem SL0VWSWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SWRDELFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SWRGROUP char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pf9 delete selected
DataItem SWRPF9FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SL_RCV_PLAN_NBR
DataItem SWRPLLNB num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PC_PO_NBR
DataItem SWRPONBR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work order group number
DataItem SWRWOGRP num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work order number
DataItem SWRWONBR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TS_CRTN_NBR
DataItem SWSCRTNB num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SWSGROUP char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work order number
DataItem SWSWONBR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

