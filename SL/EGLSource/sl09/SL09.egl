package sl09;
import corpcom1.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fb.common.*;
import fy.common.*;
import in1.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=SL09 ****
// Indirect Shipments.
// ;
// This application allows users to:
// ;
// 1. Print Carton Content documents, or
// 2. Print Packing List & Ship PO.
// ;
// Either option will generate JCL for batch processing after
// edits are performed on entered data.
// ;
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// Aprlproj 05/07/97  OVAZQU  new program
// ;
// *********************
Program SL09 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  PC6REC PC6REC; // record
  SL09W00 SL09W00; // record
  SL09W01 SL09W01; // record
  SL09W9D SL09W9D; // record
  SL09W9L SL09W9L; // record
  SL09W9O SL09W9O; // record
  SL09W9U SL09W9U; // record
  SL09W9W SL09W9W; // record
  SL6REC SL6REC; // record
  SLWREC SLWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use SL09T01; // table
  use SL09T02; // table
  use SL09T03 {deleteAfterUse = yes}; // table
  use SL00ENU; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use SL09M.SL09M001,  // forms
      SL09M.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPSL001: XPSL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set SL09M001 initial; /* M001 input/output*/
    set SL09W00 empty; /* Working storage*/
    set SQLCA empty; /* SQL communication area*/
    set SL6REC empty; /* Syloc row*/
    set PC6REC empty; /* Poitm row*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA3REC empty; /**/
    set TA6REC empty; /**/

    SL09M001.XWHCD = SLWREC.XWHCD;
    SL09W00.SL09WSWR = "Y"; /* CICS determination needed*/

    if (COMMAREA.CAITEM > " ")
      SL09M001.PC-PO-NBR = COMMAREA.CAITEM;
      COMMAREA.CAITEM = " ";
    else
      SL09M001.PC-PO-NBR = SLWREC.PC3PONBR;
    end


     /* ------------------------------------------------------------*/
     /* Flow to mainline processing*/
     /* ------------------------------------------------------------*/

    goto SL09001;

    SL09001: SL09001();
    goto SL09001;
    SL09002: SL09002();
    goto SL09002; /* Converse map*/

  end // end main
end // end SL09

// Main Process
Function SL09001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SL09S100-GET-DATA(); /* Obtain the data to display*/

  SL09S200-CNVRS-MAP(); /* Format and display the map*/

  SL09S300-CHK-PFKEY(); /* Check attention identifier*/

  SL09S400-RST-FLDS(); /* Reset fields to normal intensity*/

  SL09S500-VRFY-DATA(); /* Verify the entered data*/

  SL09S600-PROC-RQST(); /* Process valid input request*/

end // end SL09001

// Converse map
Function SL09002()
  converse SL09M001 ;
end // end SL09002

// Determine CICS region
Function SL09S-CALL-TA0230()
   /* ------------------------------------------------------------*/
   /* FIND WHICH ENVIRONMENT CURRENT PROGRAM IS RUNNING IN*/
   /*  */
   /* PRODUCTION REGION CAUSES PRODUCTION JCL TO BE EXECUTED,*/
   /* TEST REGION CAUSES TEST JCL TO BE EXECUTED USING DSNT OR DSND.*/
   /*  */
   /* ALL VERSIONS OF JCL ARE FOUND IN TS09T01*/
   /*  */
   /* ------------------------------------------------------------*/

  set TA3REC empty;

  TA3REC.TA3OPTN = "ASSIGN";

  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA3REC.TA3RTNCD == 0)         

    return;

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA3REC.TA3GROUP; /* Subroutine parameters*/

  SL09W00.XXXLOCID = "TA0"; /* Module identification*/
  converseLib.validationFailed(1); /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "FIND CICS REGION";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SL09W00.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M099"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL09S-CALL-TA0230

// get screen data
Function SL09S100-GET-DATA()
   /* ------------------------------------------------------------*/
   /* Determine CICS region*/
   /* ------------------------------------------------------------*/

  if (SL09W00.SL09WSWR == "Y")
    SL09W00.SL09WSWR = "N";

    SL09S-CALL-TA0230();
  end


   /* ------------------------------------------------------------*/
   /* If an error was found, return to the previous process*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* An error was found*/

    return; /* Return to previous process*/
  end


end // end SL09S100-GET-DATA

// Converse map
Function SL09S200-CNVRS-MAP()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SL09W00.SL09WMSG = converseVar.validationMsgNum; /* Message number*/
  else
    if (SL09W00.SL09W-INFO-MSG != 0)
      SL09W00.SL09WMSG = SL09W00.SL09W-INFO-MSG;
    end
  end

   /* ------------------------------------------------------------*/
   /* format top & bottom info on map*/
   /* ------------------------------------------------------------*/

  SL09M001.XWHCD = SLWREC.XWHCD; /* warehouse code*/
  SL09M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SL09W00.SL09WMSG != 0) /* Message to display*/
    if (SL09W00.SL09WMSG == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(SL09W00.SL09WMSG);
    end /* error message number*/
    SL09M001.XXXLOCID = SL09W00.XXXLOCID; /* Module identification*/
    set SL09M001 alarm; /* Indicate sound alarm*/
  end

   /* ------------------------------------------------------------*/
   /* CONVERSE THE MAP*/
   /* ------------------------------------------------------------*/

  SL09002(); /* Converse map*/


   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SL09W00.XXXLOCID = " "; /* Module identification*/
  SL09W00.SL09WMSG = 0;
  SL09W00.SL09W-INFO-MSG = 0;


end // end SL09S200-CNVRS-MAP

// check attention identifier
Function SL09S300-CHK-PFKEY()
   /* ------------------------------------------------------------*/
   /* Check attention identifier*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    converseLib.clearScreen();
     /* refresh map*/

    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* if fast path entered, only enter key is valid*/
   /* ------------------------------------------------------------*/

  if (SL09M001.CATOAP > " " /* Fast path requested, but*/
   && converseVar.eventKey not enter) /* ENTER was not pressed*/

    SL09W00.XXXLOCID = "300"; /* Module identification*/
    converseLib.validationFailed(258); /* Only "enter" valid w/fast path*/
    set SL09M001.CATOAP cursor, bold;
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1) /* PF1 was pressed*/
    COMMAREA.CATOAP = "GD00";

    XSPF1(); /* Exit to the HELP facility*/

    SL09M001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    SL09W00.XXXLOCID = "300"; /* Module identification*/

    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If END was requested, make sure user re-requests PF3 if*/
   /* location information was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    COMMAREA.CATOAP = "SL0M"; /* Stock Locate main menu*/
    COMMAREA.CAUSERA = SLWREC.SLWGROUP; /* COMMAREA user area*/

    XSEXIT(); /* Invoke selected application*/

    SL09M001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    SL09W00.XXXLOCID = "300"; /* Module identification*/

    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Exit to Main Menu was requested*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf4) /* PF4 was pressed*/

    XSPF4(); /* Exit to system main menu*/

    SL09M001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    SL09W00.XXXLOCID = "300"; /* Module identification*/

    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* if fast path entered: exit immeditately*/
   /* ------------------------------------------------------------*/

  if (SL09M001.CATOAP > " ")
    COMMAREA.CATOAP = SL09M001.CATOAP;
    COMMAREA.CAITEM = SL09M001.CAITEM;

    XSEXIT();

    SL09W00.XXXLOCID = "300"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    SL09M001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Returned error message*/
    set SL09M001.CATOAP cursor, bold;
    exit stack;
  end

   /* ------------------------------------------------------------*/
   /* Check for invalid key requested*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    SL09W00.XXXLOCID = "300"; /* Module identification*/
    converseLib.validationFailed(4); /* Indicate invalid attention key*/
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/
  end


end // end SL09S300-CHK-PFKEY

// Reset enterable fields
Function SL09S400-RST-FLDS()
   /* ------------------------------------------------------------*/
   /* reset enterable fields to DEFINED intensity.*/
   /* ------------------------------------------------------------*/

  set SL09M001.XWHCD initialAttributes;
  set SL09M001.PC-PO-NBR initialAttributes, cursor;
  set SL09M001.SL09M-OPTION initialAttributes;
  set SL09M001.CATOAP initialAttributes;
  set SL09M001.CAITEM initialAttributes;


end // end SL09S400-RST-FLDS

// verify entered data
Function SL09S500-VRFY-DATA()
   /* ------------------------------------------------------------*/
   /* Edit entered data*/
   /* ------------------------------------------------------------*/


  if (SL09M001.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL09M001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      SL09M001.XWHABRV = " ";
      SL09W00.XXXLOCID = "500";
      converseLib.validationFailed(10); /* <--- inactive msg*/
      set SL09M001.XWHCD cursor, bold;
      exit stack; /* go to display error message*/
    end
  else
    SL09M001.XWHABRV = " ";
    SL09W00.XXXLOCID = "500";
    converseLib.validationFailed(11); /* <--- invalid value msg*/
    set SL09M001.XWHCD cursor, bold;
    exit stack; /* go to display error message*/
  end

  SLWREC.XWHCD = SL09M001.XWHCD;
  COMMAREA.XWHCD = SL09M001.XWHCD;


  if (SL09M001.CATOAP == " "
   && SL09M001.CAITEM > " ")
    SL09W00.XXXLOCID = "500";
    converseLib.validationFailed(259); /* data valid only w/fast path*/
    set SL09M001.CAITEM cursor, bold;
  end


  if (SL09M001.SL09M-OPTION == "1"
   || SL09M001.SL09M-OPTION == "2"
   || SL09M001.SL09M-OPTION == "3")
                                  /* next sentence*/
  else
    set SL09M001.SL09M-OPTION cursor, bold;
    SL09W00.XXXLOCID = "500";
    converseLib.validationFailed(11); /* invalid data*/
  end


  if (SL09M001.PC-PO-NBR > 0) /* po# on screen*/
    SL09W00.PC-PO-NBR = SL09M001.PC-PO-NBR;

    SL09S520-EDITPONUM(); /* edit it*/

    if (SL09W00.SL09W-PO-FOUND-SW == "N")
      set SL09M001.PC-PO-NBR cursor, bold;
      SL09W00.XXXLOCID = "500";
    end
  else
    set SL09M001.PC-PO-NBR cursor, bold;
    SL09W00.XXXLOCID = "500";
    converseLib.validationFailed(9); /* data is required*/
  end


  if (converseVar.validationMsgNum > 0 /* errors found?*/
   || SL09W00.SL09W-PO-FOUND-SW == "N")
    exit stack; /* go to display error message*/
  end


end // end SL09S500-VRFY-DATA

// Edit PO number
Function SL09S520-EDITPONUM()
   /* --------------------------------------------------------------------*/
   /* Select set on Dprodc.vpoitm01*/
   /* --------------------------------------------------------------------*/

  SL09S521-OPENPOITM(); /* open poitm cursor*/

  SL09W00.SL09W-PO-FOUND-SW = "N";
  while (SL09W00.SL09W-PO-FOUND-SW == "N"
   && SQLCA.VAGen_SQLCODE == 0)

    SL09S522-FTCHPOITM(); /* fetch poitm cursor*/

    if (PC6REC.PC4ORTYP == "MM"
     || PC6REC.PC4ORTYP == "MD")
      SL09W00.SL09W-PO-FOUND-SW = "Y";
    end

  end

  SL09S523-CLOSPOITM(); /* close poitm cursor*/


  if (SL09W00.SL09W-PO-FOUND-SW == "N") /* get out if po not found*/
    SL09M001.VAGen_EZEMSG = "PO# NOT FOUND AS \"INDIRECT\" ON POITM TBL";
    return;
  end


   /* --------------------------------------------------------------------*/
   /* See if po exists on Syloc.*/
   /* --------------------------------------------------------------------*/

  SL09S526-OPENSYLOC(); /* open syloc cursor*/

  SL09W00.SL09W-PO-FOUND-SW = "N";
  while (SL09W00.SL09W-PO-FOUND-SW == "N"
   && SQLCA.VAGen_SQLCODE == 0)

    SL09S527-FTCHSYLOC(); /* fetch syloc cursor*/

    if (SL6REC.PC3PONBR == SL09W00.PC-PO-NBR)
      SL09W00.SL09W-PO-FOUND-SW = "Y";
    end

  end

  SL09S528-CLOSSYLOC(); /* close syloc cursor*/

  if (SL09W00.SL09W-PO-FOUND-SW == "N") /* get out if po not found*/
    SL09M001.VAGen_EZEMSG = "PO# NOT FOUND ON SYLOC TBL";
  end


end // end SL09S520-EDITPONUM

// Open poitm cursor
Function SL09S521-OPENPOITM()
   /* --------------------------------------------------------------------*/
   /* Open Dprodc.vpoitm01*/
   /* --------------------------------------------------------------------*/

  set PC6REC empty;
  PC6REC.PC3PONBR = SL09W00.PC-PO-NBR;
  if (SL09M001.XWHCD == "51") /* apparel warehouse*/
    PC6REC.XGPCD = "03";
  else
    PC6REC.XGPCD = "02";
  end

  try
    call "IO3310" ("S2", SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SL09W00.XXXLOCID = "521"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1PGMNO = "SL09"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT LOCATION ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC6REC.PC6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL09S521-OPENPOITM

// Fetch poitm cursor
Function SL09S522-FTCHPOITM()
   /* --------------------------------------------------------------------*/
   /* Fetch Dprodc.vpoitm01*/
   /* --------------------------------------------------------------------*/

  try
    call "IO3310" ("N2", SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* no more data*/
        set PC6REC empty;
        return; /* Return to previous process*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SL09W00.XXXLOCID = "522"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1PGMNO = "SL09"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT LOCATION ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC6REC.PC6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL09S522-FTCHPOITM

// Close poitm cursor
Function SL09S523-CLOSPOITM()
   /* --------------------------------------------------------------------*/
   /* Close Dprodc.vpoitm01*/
   /* --------------------------------------------------------------------*/

  try
    call "IO3310" ("C2", SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SL09W00.XXXLOCID = "523"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1PGMNO = "SL09"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT LOCATION ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPRODC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPOITM01"; /* Table view name*/
  TA1REC.TA1TBLKE = PC6REC.PC6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL09S523-CLOSPOITM

Function SL09S526-OPENSYLOC()
   /* --------------------------------------------------------------------*/
   /* Open Dstloc.vsyloc01*/
   /* --------------------------------------------------------------------*/

  set SL6REC empty;
  SL6REC.XWHCD = SL09M001.XWHCD;
  SL6REC.XARCD = "01";
  SL6REC.SL4ZONE = "13";
  SL6REC.SL5LOCTN = "*";

  try
    call "IO1470" ("SH", SQLCA, SL6REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SL09W00.XXXLOCID = "526"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1PGMNO = "SL09"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT LOCATION ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYLOC01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL6REC.SL6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL09S526-OPENSYLOC

Function SL09S527-FTCHSYLOC()
   /* --------------------------------------------------------------------*/
   /* Fetch Dstloc.vsyloc01*/
   /* --------------------------------------------------------------------*/

  try
    call "IO1470" ("NH", SQLCA, SL6REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* normal return code*/
      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* no more data*/
        set SL6REC empty;
        return; /* Return to previous process*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SL09W00.XXXLOCID = "527"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1PGMNO = "SL09"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT LOCATION ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYLOC01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL6REC.SL6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL09S527-FTCHSYLOC

Function SL09S528-CLOSSYLOC()
   /* --------------------------------------------------------------------*/
   /* Close Dstloc.vsyloc01*/
   /* --------------------------------------------------------------------*/

  try
    call "IO1470" ("CH", SQLCA, SL6REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  SL09W00.XXXLOCID = "528"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1PGMNO = "SL09"; /* Module identification*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT LOCATION ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSYLOC01"; /* Table view name*/
  TA1REC.TA1TBLKE = SL6REC.SL6KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end SL09S528-CLOSSYLOC

// process request
Function SL09S600-PROC-RQST()
   /* --------------------------------------------------------*/
   /* Obtain printer information*/
   /* --------------------------------------------------------*/

  TA6REC.TA6SUBSW = "N"; /* obtain information, do not submit jcl*/
  TA6REC.TA6MSGSW = "N"; /* no eoj message*/

  XPTA0P(); /* go get printer info*/


   /* --------------------------------------------------------*/
   /* Process the request*/
   /* --------------------------------------------------------*/

  if (SL09M001.SL09M-OPTION == "1")

    SL09S620-DO-CRTNCN(); /* Print Carton Content*/
  else
    if (SL09M001.SL09M-OPTION == "2")

      SL09S640-DO-PCKLST(); /* Print Packing List & Ship PO*/
    else
      if (SL09M001.SL09M-OPTION == "3")

        SL09S660-DO-CMPSUM(); /* Print Po/Inventory Compare Summ*/
      end
    end
  end


end // end SL09S600-PROC-RQST

Function SL09S620-DO-CRTNCN()
   /* -----------------------------------------------------------*/
   /* Submit JCL to print Carton Content report*/
   /* Determine CICS region.*/
   /* Format the batch program parameters.*/
   /* Submit the job control through the internal reader.*/
   /* Indicate that the selected function is completed.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/
  TA6REC.TA6INDEX = 1; /* Initialize index*/

  if (TA3REC.TA3RGNID == "03") /* PROD region*/
    SL09W00.SL09WIXJ = 1;
  else /* TEST region*/

    if ("/*EOF" in SL09T01.TARJCL)
      SL09W00.SL09WIXJ = sysVar.arrayIndex;
      SL09W00.SL09WIXJ = SL09W00.SL09WIXJ + 1;
    else
      SL09W00.SL09WIXJ = 1;
    end
  end

   /* ------------------------------------------------------------*/
   /* Format the Job Control Language statement from the table.*/
   /* ------------------------------------------------------------*/

  SL09W00.SL09WSWJ = "N";

  while (SL09W00.SL09WSWJ == "N" /* do until "eoj" found*/
   && SL09W00.SL09WIXJ < 999) /* limit to avoid endless loop*/

    TA6REC.TARJCL[TA6INDEX] = SL09T01.TARJCL[SL09WIXJ]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = SL09T01.TARTYPE[SL09WIXJ]; /* Type*/

    if (SL09T01.TARTYPE[SL09WIXJ] > " ") /* special jcl card*/
      SL09S622-SPCLJCLCD(); /* process any special JCL cards*/
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    if (SL09T01.TARJCL[SL09WIXJ] == "/*EOF") /* End of table*/
      SL09W00.SL09WSWJ = "Y"; /* Indicate job submitted*/
    else
      SL09W00.SL09WIXJ = SL09W00.SL09WIXJ + 1; /* Increment index*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    SL09W00.SL09W-INFO-MSG = 165; /* info msg "job submitted"*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(58); /* Print request failed*/
    SL09W00.XXXLOCID = "620"; /* Module identification*/

    exit stack; /* Exit to display map*/
  end


end // end SL09S620-DO-CRTNCN

Function SL09S622-SPCLJCLCD()
   /* -----------------------------------------------------------*/
   /* Process any special JCL card.*/
   /* ------------------------------------------------------------*/


  if (TA6REC.TARTYPE[TA6INDEX] == "D") /* dnsT/dsnD statement*/
    SL09W9D.TARJCL = TA6REC.TARJCL[TA6INDEX];
    if (TA3REC.TA3RGNID == "04"
     || TA3REC.TA3RGNID == "08")
      SL09W9D.SL09W-DSN = "T"; /* dsnT region*/
    else
      if (TA3REC.TA3RGNID == "05")
        SL09W9D.SL09W-DSN = "F"; /* dsnF region*/
      else
        SL09W9D.SL09W-DSN = "D"; /* dsnD region*/
      end
    end
    TA6REC.TARJCL[TA6INDEX] = SL09W9D.TARJCL;
  else

    if (TA6REC.TARTYPE[TA6INDEX] == "L") /* dnsT/dsnD statement*/
      SL09W9L.TARJCL = TA6REC.TARJCL[TA6INDEX];
      if (TA3REC.TA3RGNID == "04"
       || TA3REC.TA3RGNID == "08")
        SL09W9L.SL09W-DSN = "T"; /* dsnT region*/
      else
        if (TA3REC.TA3RGNID == "05")
          SL09W9L.SL09W-DSN = "F"; /* dsnF region*/
        else
          SL09W9L.SL09W-DSN = "D"; /* dsnD region*/
        end
      end
      TA6REC.TARJCL[TA6INDEX] = SL09W9L.TARJCL;
    else

      if (TA6REC.TARTYPE[TA6INDEX] == "W") /* whse card*/
        SL09W9W.TARJCL = TA6REC.TARJCL[TA6INDEX];
        SL09W9W.XWHCD = SLWREC.XWHCD;
        TA6REC.TARJCL[TA6INDEX] = SL09W9W.TARJCL;
      else


        if (TA6REC.TARTYPE[TA6INDEX] == "U") /* userid*/
          SL09W9U.TARJCL = TA6REC.TARJCL[TA6INDEX];
          SL09W9U.CAUSERID = COMMAREA.CAUSERID;
          TA6REC.TARJCL[TA6INDEX] = SL09W9U.TARJCL;
        else

          if (TA6REC.TARTYPE[TA6INDEX] == "P") /* parameter statement*/
            set SL09W01 empty;
            SL09W01.XWHCD = SLWREC.XWHCD;
            SL09W01.SL09W-PC3PONBR = SL09M001.PC-PO-NBR;
            SL09W01.CAUSERID = COMMAREA.CAUSERID;
            if (TA0PM001.XURDEST == "RMT124"
             || TA0PM001.XURDEST == "RMT125"
             || TA0PM001.XURDEST == "RMT126"
             || TA0PM001.XURDEST == "RMT127"
             || TA0PM001.XURDEST == "RMT220"
             || TA0PM001.XURDEST == "R124  "
             || TA0PM001.XURDEST == "R125  "
             || TA0PM001.XURDEST == "R126  "
             || TA0PM001.XURDEST == "R127  "
             || TA0PM001.XURDEST == "R220  ")
              SL09W01.SL09W-PRNTR-TYP = "L";
            else
              SL09W01.SL09W-PRNTR-TYP = "I";
            end
            if (TA3REC.TA3RGNID == "03")
              SL09W01.SL09W-DSN = "P"; /* dsnp region*/
            else
              SL09W01.SL09W-DSN = "D"; /* test region*/
            end
            TA6REC.TARJCL[TA6INDEX] = SL09W01.TARJCL;
          else

            if (TA6REC.TARTYPE[TA6INDEX] == "O") /* Output report card*/
              SL09W9O.TARJCL = TA6REC.TARJCL[TA6INDEX];
              SL09W9O.XURDEST = TA0PM001.XURDEST;
              SL09W9O.XURCOPY = TA0PM001.XURCOPY;
              TA6REC.XURCOPY = TA0PM001.XURCOPY;
              TA6REC.XURDEST = TA0PM001.XURDEST;
              TA6REC.XURBLDID = TA0PM001.XURBLDID;
              TA6REC.XURUSRNM = TA0PM001.XURUSRNM;
              TA6REC.XRODESC = TA0PM001.XRODESC;
              TA6REC.TARJCL[TA6INDEX] = SL09W9O.TARJCL;
            end
          end
        end
      end
    end
  end


end // end SL09S622-SPCLJCLCD

// Print Packing List & Ship PO
Function SL09S640-DO-PCKLST()
   /* -----------------------------------------------------------*/
   /* Submit JCL to print Packing List & Ship PO.*/
   /* Determine CICS region.*/
   /* Format the batch program parameters.*/
   /* Submit the job control through the internal reader.*/
   /* Indicate that the selected function is completed.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/
  TA6REC.TA6INDEX = 1; /* Initialize index*/

  if (TA3REC.TA3RGNID == "03") /* PROD region*/
    SL09W00.SL09WIXJ = 1;
  else /* TEST region*/

    if ("/*EOF" in SL09T02.TARJCL)
      SL09W00.SL09WIXJ = sysVar.arrayIndex;
      SL09W00.SL09WIXJ = SL09W00.SL09WIXJ + 1;
    else
      SL09W00.SL09WIXJ = 1;
    end
  end

   /* ------------------------------------------------------------*/
   /* Format the Job Control Language statement from the table.*/
   /* ------------------------------------------------------------*/

  SL09W00.SL09WSWJ = "N";

  while (SL09W00.SL09WSWJ == "N" /* do until "eoj" found*/
   && SL09W00.SL09WIXJ < 999) /* limit to avoid endless loop*/

    TA6REC.TARJCL[TA6INDEX] = SL09T02.TARJCL[SL09WIXJ]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = SL09T02.TARTYPE[SL09WIXJ]; /* Type*/

    if (SL09T02.TARTYPE[SL09WIXJ] > " ") /* special jcl card*/
      SL09S622-SPCLJCLCD(); /* process any special JCL cards*/
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    if (SL09T02.TARJCL[SL09WIXJ] == "/*EOF") /* End of table*/
      SL09W00.SL09WSWJ = "Y"; /* Indicate job submitted*/
    else
      SL09W00.SL09WIXJ = SL09W00.SL09WIXJ + 1; /* Increment index*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    SL09W00.SL09W-INFO-MSG = 165; /* info msg "job submitted"*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(58); /* Print request failed*/
    SL09W00.XXXLOCID = "640"; /* Module identification*/

    exit stack; /* Exit to display map*/
  end


end // end SL09S640-DO-PCKLST

// Print PO/Inv. Compare Summary
Function SL09S660-DO-CMPSUM()
   /* -----------------------------------------------------------*/
   /* Submit JCL to print PO/Inventory Compare Summary report.*/
   /* Determine CICS region.*/
   /* Format the batch program parameters.*/
   /* Submit the job control through the internal reader.*/
   /* Indicate that the selected function is completed.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/
  TA6REC.TA6INDEX = 1; /* Initialize index*/

  if (TA3REC.TA3RGNID == "03") /* PROD region*/
    SL09W00.SL09WIXJ = 1;
  else /* TEST region*/

    if ("/*EOF" in SL09T03.TARJCL)
      SL09W00.SL09WIXJ = sysVar.arrayIndex;
      SL09W00.SL09WIXJ = SL09W00.SL09WIXJ + 1;
    else
      SL09W00.SL09WIXJ = 1;
    end
  end

   /* ------------------------------------------------------------*/
   /* Format the Job Control Language statement from the table.*/
   /* ------------------------------------------------------------*/

  SL09W00.SL09WSWJ = "N";

  while (SL09W00.SL09WSWJ == "N" /* do until "eoj" found*/
   && SL09W00.SL09WIXJ < 999) /* limit to avoid endless loop*/

    TA6REC.TARJCL[TA6INDEX] = SL09T03.TARJCL[SL09WIXJ]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = SL09T03.TARTYPE[SL09WIXJ]; /* Type*/

    if (SL09T03.TARTYPE[SL09WIXJ] > " ") /* special jcl card*/
      SL09S622-SPCLJCLCD(); /* process any special JCL cards*/
    end

    TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    if (SL09T03.TARJCL[SL09WIXJ] == "/*EOF") /* End of table*/
      SL09W00.SL09WSWJ = "Y"; /* Indicate job submitted*/
    else
      SL09W00.SL09WIXJ = SL09W00.SL09WIXJ + 1; /* Increment index*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    SL09W00.SL09W-INFO-MSG = 165; /* info msg "job submitted"*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(58); /* Print request failed*/
    SL09W00.XXXLOCID = "660"; /* Module identification*/

    exit stack; /* Exit to display map*/
  end


end // end SL09S660-DO-CMPSUM

//*** RECORD=SL09W00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// 
// ***********************
Record SL09W00 type basicRecord
  5 * char(20) ; 
    10 XXXLOCID XXXLOCID ; 
    10 PC-PO-NBR PC-PO-NBR ; 
    10 SL09WSWJ SL09WSWJ ; 
    10 SL09WSWE SL09WSWE ; 
    10 SL09WSWR SL09WSWR ; 
    10 SL09W-INFO-MSG SL09W-INFO-MSG ; 
    10 SL09WMSG SL09WMSG ; 
    10 SL09WIXJ SL09WIXJ ; 
    10 SL09W-PO-FOUND-SW SL09W-PO-FOUND-SW ; 
end // end SL09W00

//*** RECORD=SL09W01 ****
// ----------------------------
// Application working storage.
// ----------------------------
// 
// ***********************
Record SL09W01 type basicRecord
  5 * char(80) ; 
    10 TARJCL TARJCL ; 
      15 XWHCD XWHCD ; 
      15 SL09W-PC3PONBR SL09W-PC3PONBR ; 
      15 CAUSERID CAUSERID ; 
      15 SL09W-PRNTR-TYP SL09W-PRNTR-TYP ; 
      15 SL09W-DSN SL09W-DSN ; 
      15 * char(59) ; 
end // end SL09W01

//*** RECORD=SL09W9D ****
// This record is a redefinition of the Job Control Language
// statement.  It is used to define the columns to be used to
// insert the dsnT/dsnD code.
// ***********************
Record SL09W9D type basicRecord
  5 TARJCL TARJCL ; 
    10 * char(14) ; 
    10 SL09W-DSN SL09W-DSN ; 
    10 * char(65) ; 
end // end SL09W9D

//*** RECORD=SL09W9L ****
// This record is a redefinition of the Job Control Language
// statement.  It is used to define the columns to be used to
// insert the dsnT/dsnD code.
// ***********************
Record SL09W9L type basicRecord
  5 TARJCL TARJCL ; 
    10 * char(27) ; 
    10 SL09W-DSN SL09W-DSN ; 
    10 * char(52) ; 
end // end SL09W9L

//*** RECORD=SL09W9O ****
// Parm card
// ***********************
Record SL09W9O type basicRecord
  5 TARJCL TARJCL ; 
    10 * char(33) ; 
    10 XURCOPY XURCOPY ; 
    10 * char(6) ; 
    10 XURDEST XURDEST ; 
    10 * char(34) ; 
end // end SL09W9O

//*** RECORD=SL09W9U ****
// This record is a redefinition of the Job Control Language
// statement.  It is used to define the columns to be used to
// insert the userid.
// ***********************
Record SL09W9U type basicRecord
  5 TARJCL TARJCL ; 
    10 * char(22) ; 
    10 CAUSERID CAUSERID ; 
    10 * char(50) ; 
end // end SL09W9U

//*** RECORD=SL09W9W ****
// This record is a redefinition of the Job Control Language
// statement.  It is used to define the columns to be used to
// insert the Warehouse code (xwhcd).
// ***********************
Record SL09W9W type basicRecord
  5 TARJCL TARJCL ; 
    10 * char(21) ; 
    10 XWHCD XWHCD ; 
    10 * char(57) ; 
end // end SL09W9W

// dsn(p), dsn(d), etc.
DataItem SL09W-DSN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// information message to display
DataItem SL09W-INFO-MSG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PC_PO_NBR
DataItem SL09W-PC3PONBR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PO number found switch
DataItem SL09W-PO-FOUND-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Printer type (impact/laser)
DataItem SL09W-PRNTR-TYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl index
DataItem SL09WIXJ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save msg no
DataItem SL09WMSG smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// error switch
DataItem SL09WSWE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Job submitted sw
DataItem SL09WSWJ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Need to determine CICS region
DataItem SL09WSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

