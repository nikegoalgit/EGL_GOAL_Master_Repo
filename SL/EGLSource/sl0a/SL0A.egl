package sl0a;
import corpcom1.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import pc.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=SL0A ****
// This application displays the Development Model Menu.
// It provides entry to the subordinate applications.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      06/22/93  hchapm  New application.
// *********************
Program SL0A type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  SL0AW00 SL0AW00; // record
  SL0AW01 SL0AW01; // record
  SLWREC SLWREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use SL0AT; // table
  use SL0AM.SL0AM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPSL001: XPSL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set SL0AM001 initial; /* M001 input/output*/
    set SL0AW00 empty; /* Working storage*/
    set SL0AW01 empty; /* M001 display storage*/

    if (SLWREC.XWHCD > "  ") /* if slwrec has xwhcd*/
      COMMAREA.XWHCD = SLWREC.XWHCD; /* save it*/
      set SLWREC empty;
      SLWREC.XWHCD = COMMAREA.XWHCD; /* put it back*/
    else
      set SLWREC empty; /* else, just clear it*/
    end

    SL0AW00.SL0AWSWF = "Y"; /* Format the map switch*/
    SL0AW00.SL0AWSWR = "N"; /* Request for data switch*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SL0A001; /* Converse the main process*/


    SL0A001: SL0A001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SL0A001; /* Converse the main process*/


  end // end main
end // end SL0A

// Main process to display a map
Function SL0A001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SL0A100(); /* Obtain the data to display*/

  SL0A200(); /* Format and display the map*/

  SL0A300(); /* Check attention identifier*/

  SL0A400(); /* Reset fields to normal intensity*/

  SL0A500(); /* Verify the data that was entered*/

  SL0A600(); /* Process valid input request*/


end // end SL0A001

// Obtain the data to display
Function SL0A100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (SL0AW00.SL0AWSWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Clear the map display storage area and save the key fields.*/
   /* ------------------------------------------------------------*/

  set SL0AW01 empty; /* M001 display storage*/

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  SL0AW00.SL0AWSWR = "N"; /* Request for data switch*/


end // end SL0A100

// Format and converse the map
Function SL0A200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (SL0AW00.SL0AWSWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (SL0AW00.SL0AWSWF == "Y") /* Map must be formatted*/
      SL0A210(); /* Format the data on the map*/
    end

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SL0AM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  SL0AM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SL0AM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SL0AM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    SL0AM001.XXXMODID = SLWREC.XXXLOCID; /* Module identification*/

    set SL0AM001 alarm; /* Indicate sound alarm*/

  end

  converse SL0AM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = " "; /* Module identification*/
  SLWREC.SLWMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = SL0AM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SL0AM001.CAITEM; /* Application data*/


end // end SL0A200

// Format the display data
Function SL0A210()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set SL0AM001 initial; /* M001 input/output area*/

  SL0AW00.SL0AWSWF = "N"; /* Format the map switch*/

end // end SL0A210

// Check attention identifier
Function SL0A300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (SL0AW00.SL0AWSWR == "Y") /* Request for data pending*/
      set SL0AW01 empty; /* M001 display storage*/
    end

    SL0AW00.SL0AWSWF = "Y"; /* Format the map switch*/
    SL0AW00.SL0AWSWR = "N"; /* Request for data switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (SL0AM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSSL001(); /* Exit to another application*/

      set SL0AM001.CATOAP cursor, bold; /* Highlight*/

    else

      SLWREC.XXXLOCID = "300"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ----------------------------------------------------------------*/
    /* pf1  - 'help' is requested*/
    /* pf3  - return to previous application if cafromap*/
    /* is available, else exit to stock locate menu (SL0M)*/
    /* pf4  - transfer to main menu (MN0M)*/
    /* pf5  - transfer to stock locate menu (SL0M)*/
    /* pf12 - transfer to application SL01*/
    /* pf13 - transfer to application SL02*/
    /* pf14 - transfer to application SL03*/
    /* pf15 - transfer to application SL04*/
    /* pf16 - transfer to application SL05*/
    /* pf17 - transfer to application SL07*/
    /* pf18 - transfer to application SL08*/
   /* ----------------------------------------------------------------*/

  if (converseVar.eventKey is pf1
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf5
   || converseVar.eventKey is pf12
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17
   || converseVar.eventKey is pf18)

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SL0AM001"; /* Application find code*/
    end


    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "SL0M"; /* TO application*/
    end


    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
    end


    if (converseVar.eventKey is pf5) /* PF5 was pressed*/
      COMMAREA.CATOAP = "SL0M"; /* TO application*/
    end

    if (converseVar.eventKey is pf12) /* PF12 was pressed*/
      COMMAREA.CATOAP = "SL01"; /* TO application*/
    end

    if (converseVar.eventKey is pf13) /* PF13 was pressed*/
      COMMAREA.CATOAP = "SL02"; /* TO application*/
    end

    if (converseVar.eventKey is pf14) /* PF14 was pressed*/
      COMMAREA.CATOAP = "SL03"; /* TO application*/
    end

    if (converseVar.eventKey is pf15) /* PF15 was pressed*/
      COMMAREA.CATOAP = "SL04"; /* TO application*/
    end

    if (converseVar.eventKey is pf16) /* PF16 was pressed*/
      COMMAREA.CATOAP = "SL05"; /* TO application*/
    end

    if (converseVar.eventKey is pf17) /* PF17 was pressed*/
      COMMAREA.CATOAP = "SL0Q"; /* TO application*/
      SLWREC.SLWCASNO = "7"; /* option number*/
    end

    if (converseVar.eventKey is pf18) /* PF18 was pressed*/
      COMMAREA.CATOAP = "SL0Q"; /* TO application*/
      SLWREC.SLWCASNO = "8"; /* option number*/
    end

    XSSL001();

    exit stack;

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    SLWREC.XXXLOCID = "300"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end SL0A300

// Reset highlighted fields
Function SL0A400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SL0AM001.SL0AMSEL initialAttributes; /* Menu selection*/
  set SL0AM001.CATOAP initialAttributes; /* FAST PATH to application*/
  set SL0AM001.CAITEM initialAttributes; /* FAST PATH application data*/

end // end SL0A400

// Verify data that was entered
Function SL0A500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    SLWREC.XXXLOCID = "500"; /* Module identification*/
    set SL0AM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(7); /* Indicate only with FAST PATH*/

  end

   /* ------------------------------------------------------------*/
   /* Verify the menu selection that was entered.*/
   /* ------------------------------------------------------------*/

  if (SL0AM001.SL0AMSEL in SL0AT.SL0AMSEL) /* Selection in table*/

     /* NEXT SENTENCE*/

  else

    /* ------------------------------------------------------------*/
     /* If not found, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    SLWREC.XXXLOCID = "500"; /* Module identification*/
    set SL0AM001.SL0AMSEL cursor, bold; /* Highlight*/
    converseLib.validationFailed(11); /* Field missing or invalid*/

  end

   /* ------------------------------------------------------------*/
   /* If any error was found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end SL0A500

// Process valid input request
Function SL0A600()
   /* ------------------------------------------------------------*/
   /* Invoke the application indicated by the table entry.*/
   /* ------------------------------------------------------------*/

  if (SL0AM001.SL0AMSEL in SL0AT.SL0AMSEL)
    COMMAREA.CATOAP = SL0AT.CATOAP[sysVar.arrayIndex];
  end

  XSSL001(); /* Exit to another application*/

   /* ------------------------------------------------------------*/
   /* If the request failed, display the returned error message.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CATOAP = " "; /* TO application*/

  set SL0AM001.SL0AMSEL cursor, bold; /* Highlight*/


end // end SL0A600

//*** RECORD=SL0AW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record SL0AW00 type basicRecord
  10 SL0AWSWF SL0AWSWF ; 
  10 SL0AWSWR SL0AWSWR ; 
end // end SL0AW00

//*** RECORD=SL0AW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record SL0AW01 type basicRecord
  10 XGPCD XGPCD ; 
  10 XGPABRV XGPABRV ; 
end // end SL0AW01

// Format the map switch
DataItem SL0AWSWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem SL0AWSWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

