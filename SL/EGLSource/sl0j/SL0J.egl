package sl0j;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import ww.common.*;
//*** PROGRAM=SL0J ****
// ************************************************************
// 
//           product / location inquiry
//           ==========================
// 
// ************************************************************
// 
// OVERVIEW: This application is intended to transfer control
//           to other applications and/or functions within its
//           application depending on the selction number
//           entered on the map or passed via fast path's
//           item area (first character only).
// 
//           notes:
//             1) selection number (since single digit) is
//                setup as a character type field in order to
//                make the use of CAITEM easier as well as
//                easier for the user and program to deal
//                with the map field.
// 
//           This application will make use of fixed maps
//           (i.e. for header info) and floating maps for
//           summary & detailed info for a specific selection.
// 
//           The data displayed in this application is the
//           product qty and location information within
//           each warehouse.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// RVN
// NBR   DATE     BY WHOM    OVERVIEW OF CHANGES:
// --- --------  ----------  ----------------------------------
// 00  01/30/87  s russell   created
// 01  01/11/88  D. Kenny    Added SL0JS2F to accumulate qtys
//                           for multiple sizes (occurs due to
//                           multiple po's for a given area,
//                           zone, location, pallet, case).
// 02  02/15/88  G. Gilray   change screen default value of UOM
//                           field to spaces instead of '01'.
//                           if no UOM entered get UOM from
//                           product database.
// 03  02/22/88  G. Gilray   Fix scrolling problem be modifing
//                           sl0js2h.
// 04  05/19/88  W. Jones    add recalc lines available to stop
//                           subscript out of range.
// 05  08/31/88  W. Jones    add reset scrn on fast path error.
// 06  09/01/88  W. Jones    add edit to prevent inq. if area
//                           is shipping or pack & hold
// 07  11/14/88  W. Jones    fix printer limit abend
// 08  11/15/88  J. Wood     added xssegtr logic
// 09  04/04/90  kande1      replace xsdtbl with pc2rec and
//                           io3340
// 10  10/08/90  M. Krause   replace xsacd with xegcd and
//                           xsdcd with pc2inseg, add xegtbl
// 11  10/15/90  ryonke      expanded xrocd compares to 4 char.
// 12  12/07/90  kande1      added units per case to option 1
//                           and slc to option 2 for memphis
//                           apparel.
// sl1178 01/21/91 kande1    fix summary calculation in sl0j-2
//                           correctly sum when multi rows for
//                           same product/size exist with diff.
//                           PO numbers or zero PO.
// sl#182 01/28/91 jlucas    print enhancement to call TA0P.
//                           maps 410 & 510 change.
// sl#182 02/05/91 jlucas    followup enhancements
// 
// sl#0   01/13/92 ryonke    initialize all records used in
//                           application in one time
//                           initialization section.
// sl#0   01/15/92 jwood     initialize all maps used
// sl#0   08/27/92 ryonke    change dprod calls to dpick calls
// CANADA 08/27/95 CBRINE    Added call to SY2000. Added XCTCD
//                           to SLWREC.
// aprl   02/18/97 ribane    changed CSNBR field to display 6
//                           chars (used to display just 5 )
// maint  08/07/98 ajalis    corrected accumulation logic for
//                           summary setaside quantity
//                           in statement group SL0JS2F
// TT1057302/23/01 sgopal    increased the index from 15 to 40
//                           for SL0JWS0 and SL0JWD0 to avoid
//                           AZI6 abend in sl0j screen
// i/O Modules:
// ===========
// 
// NAME      DESCRIPTION
// --------  --------------------------------------------------
// io3340    pc2rec pc-cu-in-seg pc2inseg (code, abrv, desc)
//           from dprodc.prdcu01
// 
// ************************************************************
// ************************************************************
// *********************
Program SL0J type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PC2REC PC2REC; // record
  PKNREC PKNREC; // record
  SL0JW01 SL0JW01; // record
  SL0JW02 SL0JW02; // record
  SL0JW03 SL0JW03; // record
  SL0JW04 SL0JW04; // record
  SL0JW05 SL0JW05; // record
  SL0JWB1 SL0JWB1; // record
  SL0JWB2 SL0JWB2; // record
  SL0JWB3 SL0JWB3; // record
  SL0JWD0 SL0JWD0; // record
  SL0JWS0 SL0JWS0; // record
  SL5REC SL5REC; // record
  SL6REC SL6REC; // record
  SLUREC SLUREC; // record
  SLVREC SLVREC; // record
  SLWREC SLWREC; // record
  SLXREC SLXREC; // record
  SLYREC SLYREC; // record
  SQLCA SQLCA; // record
  SYPREC SYPREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  UT1REC UT1REC; // record
  WSY2000 WSY2000; // record
  X2CREC X2CREC; // record
  X3CREC X3CREC; // record
  XOWREC XOWREC; // record
  XSSLW01 XSSLW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use SL0JT04 {deleteAfterUse = yes}; // table
  use SL0JT05 {deleteAfterUse = yes}; // table
  use XROTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XSATBL {deleteAfterUse = yes}; // table
  use XEGTBL {deleteAfterUse = yes}; // table
  use XSLTBL {deleteAfterUse = yes}; // table
  use XPGTBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use XARTBL {deleteAfterUse = yes}; // table
  use SL0JM.SL0JM010,  // forms
      SL0JM.SL0JM110, 
      SL0JM.SL0JM111, 
      SL0JM.SL0JM112, 
      SL0JM.SL0JM115, 
      SL0JM.SL0JM116, 
      SL0JM.SL0JM119, 
      SL0JM.SL0JM210, 
      SL0JM.SL0JM211, 
      SL0JM.SL0JM212, 
      SL0JM.SL0JM215, 
      SL0JM.SL0JM219, 
      SL0JM.SL0JM310, 
      SL0JM.SL0JM311, 
      SL0JM.SL0JM315, 
      SL0JM.SL0JM319, 
      SL0JM.SL0JM410, 
      SL0JM.SL0JM510,
      SL0JM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    SL0J010: SL0J010();

     /* ************************************************************/
     /* *** if the map selection no. setup:                     ****/
     /* *** use it to go directly to selection (skip converse)  ****/
     /* ************************************************************/

    if (SL0JM010.XMSLMSNO > " ")
      if (SL0JM010.XMSLMSNO == "1")
        goto SL0J110; /* <=== new function*/
      end
      if (SL0JM010.XMSLMSNO == "2")
        goto SL0J210; /* <=== new function*/
      end
      if (SL0JM010.XMSLMSNO == "3")
        goto SL0J310; /* <=== new function*/
      end
      if (SL0JM010.XMSLMSNO == "4")
        goto SL0J410; /* <=== new function*/
      end
      if (SL0JM010.XMSLMSNO == "5")
        goto SL0J510; /* <=== new function*/
      end
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "010Z";
      SLWREC.SLWMSGNO = 0017; /* <--- invalid selection msg*/
      set SL0JM010.XMSLMSNO cursor, bold;
      goto SL0J020; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "020 "; /* error id location id*/
    goto SL0J020; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/

    SL0J020: SL0J020();

     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0J010; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0J110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0J210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0J310; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0J410; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf17)
      goto SL0J510; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0JM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0J020; /* <=== re-display menu*/
    end
     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0J020; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      if (SL0JM010.XMSLMSNO == "1")
        goto SL0J110; /* <=== new function*/
      end
      if (SL0JM010.XMSLMSNO == "2")
        goto SL0J210; /* <=== new function*/
      end
      if (SL0JM010.XMSLMSNO == "3")
        goto SL0J310; /* <=== new function*/
      end
      if (SL0JM010.XMSLMSNO == "4")
        goto SL0J410; /* <=== new function*/
      end
      if (SL0JM010.XMSLMSNO == "5")
        goto SL0J510; /* <=== new function*/
      end
       /* ************************************************************/
       /* *** note: invalid selection is detected at this point   ****/
       /* ************************************************************/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "020Y";
      SLWREC.SLWMSGNO = 0017; /* <--- invalid selection msg*/
      set SL0JM010.XMSLMSNO cursor, bold;
      goto SL0J020; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0J020; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/

    SL0J110: SL0J110();

     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "120 "; /* error id location id*/
    goto SL0J120; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/

    SL0J120: SL0J120();

     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0J110; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0JM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0J020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0J110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0J210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0J310; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0J410; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf17)
      goto SL0J510; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0J120; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf6
     || converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      goto SL0J120; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0J120; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/

    SL0J210: SL0J210();

     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "220 "; /* error id location id*/
    goto SL0J220; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/

    SL0J220: SL0J220();

     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0J210; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0JM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0J020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0J110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0J210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0J310; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0J410; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf17)
      goto SL0J510; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0J220; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf6
     || converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      goto SL0J220; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0J220; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/

    SL0J310: SL0J310();

     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "320 "; /* error id location id*/
    goto SL0J320; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/

    SL0J320: SL0J320();

     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0J310; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0JM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0J020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0J110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0J210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0J310; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0J410; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf17)
      goto SL0J510; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0J320; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if special exit switch: go to related function      ****/
     /* ************************************************************/

    if (SLWREC.SLWSEXSW == "Y")
      goto SL0J110; /* <=== start related function*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      if (SLWREC.SLWIDX01 == 99)
        goto SL0J110;
      else
        goto SL0J320;
      end
    end

    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      goto SL0J320; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0J320; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/

    SL0J410: SL0J410();

     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "420 "; /* error id location id*/
    goto SL0J420; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/

    SL0J420: SL0J420();

     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0J410; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0JM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0J020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0J110; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf14)
      goto SL0J210; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf15)
      goto SL0J310; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf16)
      goto SL0J410; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf17)
      goto SL0J510; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0J420; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      goto SL0J420; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0J420; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/

    SL0J510: SL0J510();

     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "520 "; /* error id location id*/
    goto SL0J520; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/

    SL0J520: SL0J520();

     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0J510; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0JM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0J020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0J110; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf14)
      goto SL0J210; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf15)
      goto SL0J310; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf16)
      goto SL0J410; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf17)
      goto SL0J510; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0J520; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      goto SL0J520; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "520Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0J520; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/

  end // end main
end // end SL0J

// one time initializations
Function SL0J010()

   /* ************************************************************/
   /* *** standard security checking                          ****/
   /* *** note: comment out if exec'g from your msl           ****/
   /* ************************************************************/

  XSENTRY();

   /* ************************************************************/
   /* *** standard segmented trans id                         ****/
   /* ************************************************************/

  XSSEGTR();

   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0JM010 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0JM110 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0JM111 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0JM112 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0JM115 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0JM116 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0JM119 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0JM210 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0JM211 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0JM212 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0JM215 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0JM219 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0JM310 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0JM311 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0JM315 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0JM319 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0JM410 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0JM510 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set TA0PM001 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set PC2REC empty; /**/
  set UT1REC empty; /**/
  set SL5REC empty; /**/
  set SL6REC empty; /**/
  set SLUREC empty; /**/
  set SLVREC empty; /**/
  set SLWREC empty; /* common working storage fields*/
  set SLXREC empty; /* common working storage fields*/
  set SLYREC empty; /* ta0050 parameter #1*/
  set SL0JWS0 empty; /**/
  set SL0JWD0 empty; /**/
  set SL0JWB1 empty; /**/
  set SL0JWB2 empty; /**/
  set SL0JWB3 empty; /**/
  set SL0JW01 empty; /**/
  set SL0JW02 empty; /**/
  set SL0JW03 empty; /**/
  set SL0JW04 empty; /**/
  set SL0JW05 empty; /**/
  set TA1REC empty; /* TA0020 record*/
  set TA2REC empty; /**/
  set TA3REC empty; /**/
  set TA5REC empty; /* ta0050 parameter #2*/
  set TA6REC empty; /**/
  set TAEREC empty; /**/
  set X2CREC empty; /**/
  set X3CREC empty; /**/
  set SQLCA empty; /* SQL returned data record*/
  set ERRSQLCA empty; /* TA0020 version of SQLCA*/
  set XOWREC empty; /**/

   /* ************************************************************/
   /* *** maintenance information:                            ****/
   /* *** =======================                             ****/
   /* *** rvsn   date    update by:    description:           ****/
   /* *** ---- --------  ------------  ---------------------- ****/
   /* ***  00  01/30/87  s russell     created                ****/
   /* ***  01  01/12/88  D. Kenny      Added SL0JS2F SGRP to  ****/
   /* ***                              add to buffer if size  ****/
   /* ***                              is same as last size.  ****/
   /* ***                              This happens for multi-****/
   /* ***                              ple po's with same size****/
   /* ***  02  03/15/88  G. Gilray     change screen default  ****/
   /* ***                              of UOM field to spaces ****/
   /* ***                              instead of '01'. if no ****/
   /* ***                              UOM entered get default****/
   /* ***                              from product file.     ****/
   /* ***  03  03/22/88  G. Gilray     fix scrolling problem  ****/
   /* ***                              by modifing sl0js2h.   ****/
   /* ***  04  05/19/88  W. Jones      added recalc. of lines ****/
   /* ***                              available in sl0js1e & ****/
   /* ***                              sl0js2e to prevent     ****/
   /* ***                              subscript out of range ****/
   /* ***  05  08/31/88  W. Jones      added reset scrn on    ****/
   /* ***                              fast path exit error   ****/
   /* ***  06  09/01/88  W. Jones      add edit to prevent inq****/
   /* ***                              if shp or pk&hld area  ****/
   /* ***  07  11/14/88  W. Jones      fix printer limit abend****/
   /* ***  08  11/15/88  J. Wood       added xssegtr logic    ****/
   /* ************************************************************/

  SLWREC.XXXRVNBR = "08";

  SLWREC.XXXMAPNM = "SL0JM010";
  SLWREC.XXXTITLE = "PRODUCT/LOCATION INQUIRY MENU";

  XSX2CDT(); /* determine current date*/

  SLWREC.XXXAPPID = "SL0J"; /* error id appl. name*/
  SLWREC.SLWTALOC = "SL0J010 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0JM010"; /* TA0020 current map name*/

  SLWREC.SLWSUMQU = "SLSJ"; /* summary tsq appl. id*/
  SLWREC.SLWDETQU = "SLDJ"; /* detail tsq appl. id*/

  SLWREC.SLWMSGNO = 0; /* saved msg no.*/
  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWSEXSW = "N"; /* special error switch*/
  converseVar.commitOnConverse = 1; /* commit on converse*/
  VGVar.handleHardIOErrors = 1; /* allows neg sqlcode*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed during resets and for multiple levels     ****/
   /* ************************************************************/

  SL0JM010.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0JM010.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0JM010.XXXTITLE = SLWREC.XXXTITLE;
  SL0JM010.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  SLWREC.SLWLINPP = 15; /* total data lines per page*/

   /* ************************************************************/
   /* *** check commarea fast path item to see if it should   ****/
   /* *** be used to setup working storage &/or map fields    ****/
   /* ************************************************************/

  if (COMMAREA.CAITEM > " ")
    SL0JSY0(); /* <=== use commarea item*/
    COMMAREA.CAITEM = " ";
  end

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/

end // end SL0J010

// converse & control key entry
Function SL0J020()

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0JM010.XXXERRID = SLWREC.XXXERRID;

  converse SL0JM010 ;

   /* ************************************************************/
   /* *** commented EZECLOS code to be used ONLY in test      ****/
   /* *** in order to end application without canceling it    ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020A";
    SLWREC.SLWMSGNO = 0;
    SL0JM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020B";
    SLWREC.SLWMSGNO = 0;
    SL0JM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020C";
    SLWREC.SLWMSGNO = 0;
    SL0JM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020D";
    SLWREC.SLWMSGNO = 0;
    SL0JM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0JM010.CATOAP > " ")
    COMMAREA.CATOAP = SL0JM010.CATOAP;
    COMMAREA.CAITEM = SL0JM010.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020E";
    SLWREC.SLWMSGNO = 0;
    SL0JM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0JM010.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0JM010.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "020 ";
  set SL0JM010.CATOAP initialAttributes;
  set SL0JM010.CAITEM initialAttributes;
  set SL0JM010.XMSLMSNO cursor, initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0JM010.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0JM010.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0JSH0(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17)
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "020I";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/

end // end SL0J020

// one time initializations
Function SL0J110()

   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0JM110 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0JW01 empty; /* appl. working storage area*/

  SLWREC.XXXMAPNM = "SL0JM110";
  SLWREC.XXXTITLE = "PRODUCT INQUIRY BY PRODUCT KEY ";

  SLWREC.SLWTALOC = "SL0J110 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0JM110"; /* TA0020 current map name*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* saved message number*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed during resets and for multiple levels     ****/
   /* ************************************************************/

  SL0JM110.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0JM110.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0JM110.XXXTITLE = SLWREC.XXXTITLE;
  SL0JM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  if (SLXREC.SLXFRMAP == "SL0JM310")
    SL0JM110.XWHCD = SLXREC.XWHCD;
    SL0JM110.XGPCD = SLXREC.XGPCD;
    SL0JM110.SY1STNBR = SLXREC.SY1STNBR;
    SL0JM110.SY2CLRID = SLXREC.SY2CLRID;
    SL0JM110.XDMCD = SLXREC.XDMCD;
    SL0JM110.XQACD = SLXREC.XQACD;
    SL0JM110.PC2INSEG = SLXREC.XSDCD;
    SL0JM110.XEGCD = "000";
    SL0JM110.XSLCD = SLXREC.XSLCD;
    SL0JM110.XPGCD = SLXREC.XPGCD;
    SL0JM110.XUMCD = SLXREC.XUMCD;
    SL0JM110.XOWCD = SLXREC.XOWCD;
    set SLXREC empty;
  else
    SL0JM110.XWHCD = COMMAREA.XWHCD;
    SL0JM110.XGPCD = "02";
    SL0JM110.SY2CLRID = "00 ";
    SL0JM110.XDMCD = "00";
    SL0JM110.XQACD = "01";
    SL0JM110.PC2INSEG = "000";
    SL0JM110.XEGCD = "000";
    SL0JM110.XSLCD = "000";
    SL0JM110.XPGCD = "00";
    /* ***** code changed by Grant Gilray 3/15/88 ******/
    /* MOVE '01' TO SL0JM110.XUMCD;*/
    SL0JM110.XUMCD = "  ";
    /* ************* end of code changes ***************/
    SL0JM110.XOWCD = "00";
  end

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  SL0JWS0.SL0JWLTH = 1600; /* max summary tsq length*/
  SL0JWD0.SL0JWLTH = 1600; /* max detail tsq length*/

   /* ************************************************************/
   /* *** purge any existing storage in case of 'left overs'  ****/
   /* *** note: not found is acceptable return code           ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq(s)*/

   /* ************************************************************/
   /* *** check commarea fast path item to see if it should   ****/
   /* *** be used to setup working storage &/or map fields    ****/
   /* ************************************************************/

  if (COMMAREA.CAITEM > " ")
    SL0JSY1(); /* <=== use commarea item*/
    COMMAREA.CAITEM = " ";
  end

   /* ************************************************************/
   /* *** setup the floating map lines for a blank map        ****/
   /* ************************************************************/

  SL0JSN1(); /* <=== setup blank screen*/

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/

end // end SL0J110

// converse & control
Function SL0J120()

  if (SL0JM110.XWHCD == "  ")
    set SL0JM110.XWHCD cursor;
  end

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0JM110.XXXERRID = SLWREC.XXXERRID;

  converse SL0JM110 ;

   /* ************************************************************/
   /* *** note: if leaving screen/application, purge tsq      ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    XSSLSPQ(); /* <=== purge tsq(s)*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120A";
    SLWREC.SLWMSGNO = 0;
    SL0JM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    XSSLSPQ(); /* <=== purge tsq(s)*/
    converseLib.clearScreen();
    set SL0JM115 initial; /* resets fld values, attr.s & cursor*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120C";
    SLWREC.SLWMSGNO = 0;
    SL0JM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120D";
    SLWREC.SLWMSGNO = 0;
    SL0JM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0JM110.CATOAP > " ")
    COMMAREA.CATOAP = SL0JM110.CATOAP;
    COMMAREA.CAITEM = SL0JM110.CAITEM;
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSEXIT();
    SL0JST1(); /* <=== reset scrn*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120E";
    SLWREC.SLWMSGNO = 0;
    SL0JM110.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0JM110.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0JM110.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "120 ";
  set SL0JM110.CATOAP initialAttributes;
  set SL0JM110.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set SL0JM110.XWHCD initialAttributes;
  set SL0JM110.XOWCD initialAttributes;
  set SL0JM110.XGPCD initialAttributes;
  set SL0JM110.SY1STNBR initialAttributes;
  set SL0JM110.SY2CLRID initialAttributes;
  set SL0JM110.XDMCD initialAttributes;
  set SL0JM110.XQACD initialAttributes;
  set SL0JM110.PC2INSEG initialAttributes;
  set SL0JM110.XEGCD initialAttributes;
  set SL0JM110.XSLCD initialAttributes;
  set SL0JM110.XPGCD initialAttributes;
  set SL0JM110.XUMCD initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0JM110.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0JM110.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17)
    XSSLSPQ(); /* <=== purge tsq(s)*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    if (SLWREC.SLWLASPF == "E")
      SLWREC.SLWIDX01 = 1;
      while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
        if (SL0JM110.XMSLMSEL[SLWIDX01] > " ")
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "120G";
          SLWREC.SLWMSGNO = 0003; /* <--- use pf6 msg*/
          exit stack;
        else
          SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
        end
      end
    end
    SL0JSH1(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF6: do edits & process inputs                   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf6)
    if (SLWREC.SLWLASPF == "6")
      SLWREC.SLWIDX01 = 1;
      while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
        if (SL0JM110.XMSLMSEL[SLWIDX01] > " ")
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "120H";
          SLWREC.SLWMSGNO = 0018; /* <--- use pf6 msg*/
          exit stack;
        else
          SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
        end
      end
    end
    SL0JSI1(); /* <=== PF6 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if selection input now: display error msg           ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    if (SL0JM110.XMSLMSEL[SLWIDX01] > " ")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "120I";
      SLWREC.SLWMSGNO = 0003; /* <--- use pf6 msg*/
      exit stack;
    else
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
    end
  end

   /* ************************************************************/
   /* *** if PF7: scroll backwards, key changes NOT allowed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf7)
    SL0JSJ1(); /* <=== PF7 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF8: scroll forwards, key changes NOT allowed    ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf8)
    SL0JSK1(); /* <=== PF8 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "120J";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/

end // end SL0J120

// disp left sum line
Function SL0J121()
   /* *** move summary fields to map fields ****/

  SL0JM111.XARCD = SL0JWB1.XARCD;
  SL0JM111.SL4ZONE = SL0JWB1.SL4ZONE;
  SL0JM111.SL5LOCTN = SL0JWB1.SL5LOCTN;
  SL0JM111.YLSCD = SL0JWB1.YLSCD;
  SL0JM111.SL2PALET = SL0JWB1.SL2PALET;
  SL0JM111.SL0JWCSE = SL0JWB1.SL0JWCSE;
  SL0JM111.SL0JMUCS = SL0JWB1.SY1UNPCS;
  SL0JM111.SL0JMNET = SL0JWB1.SL0JWSNT;
  SL0JM111.SL6PKRSV = SL0JWB1.SL0JWSPR;
  SL0JM111.SL6STASD = SL0JWB1.SL0JWSSA;
  SL0JM111.SL6ONHND = SL0JWB1.SL0JWSOH;

  display SL0JM111 ;

   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/

end // end SL0J121

// disp left det line
Function SL0J122()

  SL0JM112.SY4IDDSC = SL0JWB1.SY4IDDSC[1];
  SL0JM112.SL0JMNET = SL0JWB1.SL0JWDNT[1];
  SL0JM112.SL6ONHND = SL0JWB1.SL0JWDOH[1];
  SL0JM112.SL6PKRSV = SL0JWB1.SL0JWDPR[1];
  SL0JM112.SL6STASD = SL0JWB1.SL0JWDSA[1];

  display SL0JM112 ;

   /* ************************************************************/
   /* *** no DISPLAY AFTER processing                         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/

end // end SL0J122

// disp left sum title
Function SL0J125()

  SL0JM110.XMSLMSSS = "S";
  set SL0JM110.XMSLMSSS initialAttributes;

  display SL0JM115 ;

   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/

end // end SL0J125

// disp left det title
Function SL0J126()

   /* ************************************************************/
   /* *** no "before" processing... except to blank "S"       ****/
   /* ************************************************************/

  SL0JM110.XMSLMSSS = "S";
  set SL0JM110.XMSLMSSS initialAttributes;

  display SL0JM116 ;

   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/

end // end SL0J126

// disp blank line
Function SL0J129()

   /* ************************************************************/
   /* *** set selection fields ASKIP,DARK                     ****/
   /* ************************************************************/

  set SL0JM110.XMSLMSEL[SLWIDX01] skip, invisible;

  display SL0JM119 ;

   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/

end // end SL0J129

// one time initializations
Function SL0J210()

   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0JM210 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0JW02 empty; /* appl. working storage area*/

  SLWREC.XXXMAPNM = "SL0JM210";
  SLWREC.XXXTITLE = "LOCATION  INQUIRY  ";

  SLWREC.SLWTALOC = "SL0J210 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0JM210"; /* TA0020 current map name*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* saved message nbr*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0JM210.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0JM210.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0JM210.XXXTITLE = SLWREC.XXXTITLE;
  SL0JM210.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  SL0JM210.XWHCD = COMMAREA.XWHCD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  SL0JWS0.SL0JWLTH = 1600; /* tsq line length*/
  SL0JWD0.SL0JWLTH = 1600; /* tsq line length*/

   /* ************************************************************/
   /* *** purge any existing storage in case of 'left overs'  ****/
   /* *** note: not found is acceptable return code           ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq(s)*/

   /* ************************************************************/
   /* *** setup the floating map lines for a blank map        ****/
   /* ************************************************************/

  SL0JSN2(); /* <=== setup blank screen*/

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/

end // end SL0J210

// converse & control
Function SL0J220()

  if (SL0JM210.XWHCD == "  ")
    set SL0JM210.XWHCD cursor;
  end

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0JM210.XXXERRID = SLWREC.XXXERRID;

  converse SL0JM210 ;

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    XSSLSPQ(); /* <=== purge tsq(s)*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220A";
    SLWREC.SLWMSGNO = 0;
    SL0JM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    XSSLSPQ(); /* <=== purge tsq(s)*/
    converseLib.clearScreen();
    set SL0JM215 initial; /* resets fld values, attr.s & cursor*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220C";
    SLWREC.SLWMSGNO = 0;
    SL0JM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220D";
    SLWREC.SLWMSGNO = 0;
    SL0JM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0JM210.CATOAP > " ")
    COMMAREA.CATOAP = SL0JM210.CATOAP;
    COMMAREA.CAITEM = SL0JM210.CAITEM;
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSEXIT();
    SL0JST2(); /* <=== clear scrn*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220E";
    SLWREC.SLWMSGNO = 0;
    SL0JM210.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0JM210.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0JM210.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "220 ";
  set SL0JM210.CATOAP initialAttributes;
  set SL0JM210.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set SL0JM210.XWHCD initialAttributes;
  set SL0JM210.XARCD initialAttributes;
  set SL0JM210.SL4ZONE initialAttributes;
  set SL0JM210.SL5LOCTN initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0JM210.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0JM210.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17)
    XSSLSPQ(); /* <=== purge tsq(s)*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    if (SLWREC.SLWLASPF == "E")
      SLWREC.SLWIDX01 = 1;
      while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
        if (SL0JM210.XMSLMSEL[SLWIDX01] > " ")
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "220G";
          SLWREC.SLWMSGNO = 0003; /* <--- use pf6 msg*/
          exit stack;
        else
          SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
        end
      end
    end
    SL0JSH2(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF6: do edits & process inputs                   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf6)
    if (SLWREC.SLWLASPF == "6")
      SLWREC.SLWIDX01 = 1;
      while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
        if (SL0JM210.XMSLMSEL[SLWIDX01] > " ")
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "220H";
          SLWREC.SLWMSGNO = 0018; /* <--- use pf6 msg*/
          exit stack;
        else
          SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
        end
      end
    end
    SL0JSI2(); /* <=== PF6 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if selection input now: display error msg           ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    if (SL0JM210.XMSLMSEL[SLWIDX01] > " ")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "220I";
      SLWREC.SLWMSGNO = 0003; /* <--- use pf6 msg*/
      exit stack;
    else
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
    end
  end

   /* ************************************************************/
   /* *** if PF7: scroll backwards, key changes NOT allowed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf7)
    SL0JSJ2(); /* <=== PF7 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF8: scroll forwards, key changes NOT allowed    ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf8)
    SL0JSK2(); /* <=== PF8 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "220J";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/

end // end SL0J220

// disp left sum line
Function SL0J221()

   /* *** move summary fields to map fields ****/

  SL0JM211.XGPCD = SL0JWB2.XGPCD;
  SL0JM211.SY1STNBR = SL0JWB2.SY1STNBR;
  SL0JM211.SY2CLRID = SL0JWB2.SY2CLRID;
  SL0JM211.XDMCD = SL0JWB2.XDMCD;
  SL0JM211.XQACD = SL0JWB2.XQACD;
  SL0JM211.PC2INSEG = SL0JWB2.PC2INSEG;
  SL0JM211.XEGCD = SL0JWB2.XEGCD;
  SL0JM211.XSLCD = SL0JWB2.XSLCD;
  SL0JM211.XPGCD = SL0JWB2.XPGCD;
  SL0JM211.XUMCD = SL0JWB2.XUMCD;
  SL0JM211.XOWCD = SL0JWB2.XOWCD;

  if (SL0JW02.SL0JWCPS == "C")
    SL0JM211.SL0JMCPF = SL0JWB2.SL0JWCSE;
  else
    SL0JM211.SL0JMCPF = SL0JWB2.SL2PALET;
  end

  SL0JM211.SL6PKRSV = SL0JWB2.SL0JWSPR;
  SL0JM211.SL6STASD = SL0JWB2.SL0JWSSA;
  SL0JM211.SL6ONHND = SL0JWB2.SL0JWSOH;

  display SL0JM211 ;

   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/

end // end SL0J221

// disp left det line
Function SL0J222()

   /* *** format map line ****/

  SL0JM212.SY4IDDSC = SL0JWB2.SY4IDDSC[1];
  SL0JM212.SL6ONHND = SL0JWB2.SL0JWDOH[1];
  SL0JM212.SL6PKRSV = SL0JWB2.SL0JWDPR[1];
  SL0JM212.SL6STASD = SL0JWB2.SL0JWDSA[1];

  display SL0JM212 ;

   /* ************************************************************/
   /* *** no DISPLAY AFTER processing                         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/

end // end SL0J222

// disp left sum title
Function SL0J225()

   /* ************************************************************/
   /* *** no "before" processing... except to setup "S"       ****/
   /* ************************************************************/

  SL0JM210.XMSLMSSS = "S";
  set SL0JM210.XMSLMSSS initialAttributes;

  if (SL0JW02.SL0JWCPS == "C")
    SL0JM215.SL0JMCPF = "CSNBR";
  else
    SL0JM215.SL0JMCPF = "PALET";
  end

  display SL0JM215 ;

   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/

end // end SL0J225

// disp blank line
Function SL0J229()

   /* ************************************************************/
   /* *** set selection fields ASKIP,DARK                     ****/
   /* ************************************************************/

  set SL0JM210.XMSLMSEL[SLWIDX01] skip, invisible;

  display SL0JM219 ;

   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/

end // end SL0J229

// one time initializations
Function SL0J310()

   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0JM310 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0JW03 empty; /* appl. working storage area*/

  SLWREC.XXXMAPNM = "SL0JM310";
  SLWREC.XXXTITLE = "STYLE / COLOR INQUIRY";

  SLWREC.SLWTALOC = "SL0J310 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0JM310"; /* TA0020 current map name*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWSEXSW = "N"; /* special exit switch*/
  SLWREC.SLWMSGNO = 0;

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0JM310.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0JM310.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0JM310.XXXTITLE = SLWREC.XXXTITLE;
  SL0JM310.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  SL0JM310.XWHCD = COMMAREA.XWHCD;
  SL0JM310.XGPCD = "02";
  SL0JM310.SY2CLRID = "00 ";
  SL0JM310.XDMCD = "00";
  SL0JM310.XQACD = "01";

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  SL0JWD0.SL0JWLTH = 1600; /* tsq line length*/

   /* ************************************************************/
   /* *** purge any existing storage in case of 'left overs'  ****/
   /* *** note: not found is acceptable return code           ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq(s)*/

   /* ************************************************************/
   /* *** setup the floating map lines for a blank map        ****/
   /* ************************************************************/

  SL0JSN3(); /* <=== setup blank screen*/

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/

end // end SL0J310

// converse & control
Function SL0J320()

  if (SL0JM310.XWHCD == "  ")
    set SL0JM310.XWHCD cursor;
  end

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0JM310.XXXERRID = SLWREC.XXXERRID;

  converse SL0JM310 ;

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    XSSLSPQ(); /* <=== purge tsq(s)*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320A";
    SLWREC.SLWMSGNO = 0;
    SL0JM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    XSSLSPQ(); /* <=== purge tsq(s)*/
    converseLib.clearScreen();
    set SL0JM315 initial; /* resets fld values, attr.s & cursor*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320C";
    SLWREC.SLWMSGNO = 0;
    SL0JM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320D";
    SLWREC.SLWMSGNO = 0;
    SL0JM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0JM310.CATOAP > " ")
    COMMAREA.CATOAP = SL0JM310.CATOAP;
    COMMAREA.CAITEM = SL0JM310.CAITEM;
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSEXIT();
    SL0JST3(); /* <=== reset scrn*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320E";
    SLWREC.SLWMSGNO = 0;
    SL0JM310.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0JM310.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0JM310.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "320 ";
  set SL0JM310.CATOAP initialAttributes;
  set SL0JM310.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set SL0JM310.XWHCD initialAttributes;
  set SL0JM310.XGPCD initialAttributes;
  set SL0JM310.SY1STNBR initialAttributes;
  set SL0JM310.SY2CLRID initialAttributes;
  set SL0JM310.XDMCD initialAttributes;
  set SL0JM310.XQACD initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0JM310.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0JM310.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17)
    XSSLSPQ(); /* <=== purge tsq(s)*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for need to save selected subkey  ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0JSH3(); /* <=== ENTER processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if selection input now: display error msg           ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    if (SL0JM310.XMSLMSEL[SLWIDX01] > " ")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "320H";
      SLWREC.SLWMSGNO = 0018; /* <--- use ENTER msg*/
      exit stack;
    else
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
    end
  end

   /* ************************************************************/
   /* *** if PF7: scroll backwards, key changes NOT allowed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf7)
    SL0JSJ3(); /* <=== PF7 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF8: scroll forwards, key changes NOT allowed    ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf8)
    SL0JSK3(); /* <=== PF8 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "320I";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/

end // end SL0J320

// disp left sum line
Function SL0J321()

   /* *** format map line ****/

  SL0JM311.PC2INSEG = SL0JWB3.PC2INSEG;
  SL0JM311.XEGCD = SL0JWB3.XEGCD;
  SL0JM311.XSLCD = SL0JWB3.XSLCD;
  SL0JM311.XPGCD = SL0JWB3.XPGCD;
  SL0JM311.XUMCD = SL0JWB3.XUMCD;
  SL0JM311.XOWCD = SL0JWB3.XOWCD;

  display SL0JM311 ;

   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/

end // end SL0J321

// disp left sum title
Function SL0J325()

   /* ************************************************************/
   /* *** no "before" processing... except to setup "S"       ****/
   /* ************************************************************/

  SL0JM310.XMSLMSSS = "S";
  set SL0JM310.XMSLMSSS initialAttributes;

  display SL0JM315 ;

   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/

end // end SL0J325

// disp blank line
Function SL0J329()

   /* ************************************************************/
   /* *** set selection fields ASKIP,DARK                     ****/
   /* ************************************************************/

  set SL0JM310.XMSLMSEL[SLWIDX01] skip, invisible;

  display SL0JM319 ;

   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/

end // end SL0J329

// one time initializations
Function SL0J410()

   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0JM410 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0JW04 empty; /* appl. working storage area*/

  SLWREC.XXXMAPNM = "SL0JM410";
  SLWREC.XXXTITLE = "PRODUCT QTY RPT BY PRODUCT";

  SLWREC.SLWTALOC = "SL0J410 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0JM410"; /* TA0020 current map name*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* saved msg no.*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed during resets and for multiple levels     ****/
   /* ************************************************************/

  SL0JM410.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0JM410.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0JM410.XXXTITLE = SLWREC.XXXTITLE;
  SL0JM410.XXXCURDT = X2CREC.X2CCURSD;

   /* *** move default values into map fields ****/

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= 5)
    SL0JM410.XGPCD[SLWIDX01] = "02";
    SL0JM410.SY2CLRID[SLWIDX01] = "00 ";
    SL0JM410.XDMCD[SLWIDX01] = "00";
    SL0JM410.XQACD[SLWIDX01] = "01";
    SL0JM410.PC2INSEG[SLWIDX01] = "000";
    SL0JM410.XEGCD[SLWIDX01] = "000";
    SL0JM410.XSLCD[SLWIDX01] = "000";
    SL0JM410.XPGCD[SLWIDX01] = "00";
    /* ***** code changed by Grant Gilray 3/16/88 ******/
    /* MOVE '01' TO SL0JM410.XUMCD(SLWIDX01);*/
    SL0JM410.XUMCD[SLWIDX01] = "  ";
    /* ******** end of code changed on 3/16/88 *********/
    SL0JM410.XOWCD[SLWIDX01] = "00";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

  SL0JM410.XWHCD = COMMAREA.XWHCD;

   /* ************************************************************/
   /* *** if being transf from other appl do not save causera ****/
   /* *** fld. if transf from same appl save the causera fld  ****/
   /* *** which contains current printer                      ****/
   /* ************************************************************/
  if (COMMAREA.CAFROMAP == COMMAREA.CACURRAP)
    /* next sentence*/
  else
    COMMAREA.CAUSERA = " ";
  end

  if (COMMAREA.CAUSERA > " ")
    SL0JM410.SL0JMPID = COMMAREA.CAUSERA;
    TA6REC.XURDEST = COMMAREA.CAUSERA;
    COMMAREA.CAUSERA = " ";
    SLWREC.SLWFTMSW = "N";
  end

  if (SLWREC.SLWFTMSW == "N")
    SL0JM410.SL0JMPID = TA6REC.XURDEST; /* move dest field fro*/
  end

end // end SL0J410

// conv & cntl fixed
Function SL0J420()

  if (SL0JM410.XWHCD == "  ")
    set SL0JM410.XWHCD cursor;
  end

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0JM410.XXXERRID = SLWREC.XXXERRID;

  converse SL0JM410 ;

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420A";
    SLWREC.SLWMSGNO = 0;
    SL0JM410.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420C";
    SLWREC.SLWMSGNO = 0;
    SL0JM410.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420D";
    SLWREC.SLWMSGNO = 0;
    SL0JM410.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0JM410.CATOAP > " ")
    COMMAREA.CATOAP = SL0JM410.CATOAP;
    COMMAREA.CAITEM = SL0JM410.CAITEM;
    COMMAREA.CAUSERA = SL0JM410.SL0JMPID;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420E";
    SLWREC.SLWMSGNO = 0;
    SL0JM410.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0JM410.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0JM410.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "420 ";
  set SL0JM410.CATOAP initialAttributes;
  set SL0JM410.CAITEM initialAttributes;
  set SL0JM410.SY1STNBR[1] cursor;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= 5)
    set SL0JM410.XWHCD initialAttributes;
    set SL0JM410.XGPCD[SLWIDX01] initialAttributes;
    set SL0JM410.SY1STNBR[SLWIDX01] initialAttributes;
    set SL0JM410.SY2CLRID[SLWIDX01] initialAttributes;
    set SL0JM410.XDMCD[SLWIDX01] initialAttributes;
    set SL0JM410.XQACD[SLWIDX01] initialAttributes;
    set SL0JM410.PC2INSEG[SLWIDX01] initialAttributes;
    set SL0JM410.XEGCD[SLWIDX01] initialAttributes;
    set SL0JM410.XSLCD[SLWIDX01] initialAttributes;
    set SL0JM410.XPGCD[SLWIDX01] initialAttributes;
    set SL0JM410.XUMCD[SLWIDX01] initialAttributes;
    set SL0JM410.XOWCD[SLWIDX01] initialAttributes;
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0JM410.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0JM410.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17)
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0JSH4(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "420I";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

end // end SL0J420

// one time initializations
Function SL0J510()

   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0JM510 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  SLWREC.XXXMAPNM = "SL0JM510";
  SLWREC.XXXTITLE = "PRODUCT QUANTITY REPORT BY LOCATION";

  SLWREC.SLWTALOC = "SL0J510 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0JM510"; /* TA0020 current map name*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* saved msg no.*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0JM510.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0JM510.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0JM510.XXXTITLE = SLWREC.XXXTITLE;
  SL0JM510.XXXCURDT = X2CREC.X2CCURSD;

  set SL0JW05 empty; /* appl. working storage area*/
  SL0JM510.XWHCD = COMMAREA.XWHCD;

   /* ************************************************************/
   /* *** if being transf from other appl do not save causera ****/
   /* *** fld. if transf from same appl save the causera fld  ****/
   /* *** which contains current printer                      ****/
   /* ************************************************************/
  if (COMMAREA.CAFROMAP == COMMAREA.CACURRAP)
    /* next sentence*/
  else
    COMMAREA.CAUSERA = " ";
  end

  if (COMMAREA.CAUSERA > " ")
    SL0JM510.SL0JMPID = COMMAREA.CAUSERA;
    TA6REC.XURDEST = COMMAREA.CAUSERA;
    COMMAREA.CAUSERA = " ";
    SLWREC.SLWFTMSW = "N";
  end

  if (SLWREC.SLWFTMSW == "N")
    SL0JM510.SL0JMPID = TA6REC.XURDEST; /* move dest from ta6rec*/
  end

end // end SL0J510

// conv & cntl fixed
Function SL0J520()

  if (SL0JM510.XWHCD == "  ")
    set SL0JM510.XWHCD cursor;
  end

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0JM510.XXXERRID = SLWREC.XXXERRID;

  converse SL0JM510 ;

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "520A";
    SLWREC.SLWMSGNO = 0;
    SL0JM510.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "520C";
    SLWREC.SLWMSGNO = 0;
    SL0JM510.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "520D";
    SLWREC.SLWMSGNO = 0;
    SL0JM510.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0JM510.CATOAP > " ")
    COMMAREA.CATOAP = SL0JM510.CATOAP;
    COMMAREA.CAITEM = SL0JM510.CAITEM;
    COMMAREA.CAUSERA = SL0JM510.SL0JMPID;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "520E";
    SLWREC.SLWMSGNO = 0;
    SL0JM510.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0JM510.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0JM510.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "520 ";
  set SL0JM510.CATOAP initialAttributes;
  set SL0JM510.CAITEM initialAttributes;
  set SL0JM510.XARCD[1] cursor;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= 6)
    set SL0JM510.XWHCD initialAttributes;
    set SL0JM510.XARCD[SLWIDX01] initialAttributes;
    set SL0JM510.SL4ZONE[SLWIDX01] initialAttributes;
    set SL0JM510.SL5LOCTN[SLWIDX01] initialAttributes;
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0JM510.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "520F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0JM510.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17)
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0JSH5(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "520I";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/

end // end SL0J520
// loc break summary processing
Function SL0JS1A()

  TA1REC.TA1LOCAT[2] = "SL0JS1A ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  SL0JS1C(); /* determine if detail record queue is full*/

   /* *** format summary line (use saved area,zone,location) ****/

  SL0JWB1.XARCD = SL0JW01.XARCD;
  SL0JWB1.SL4ZONE = SL0JW01.SL4ZONE;
  SL0JWB1.SL5LOCTN = SL0JW01.SL5LOCTN;
  SL0JWB1.SL2PALET = SL0JW01.SL2PALET;
  SL0JWB1.SL2CASE = SL0JW01.SL2CASE;
  SL0JWB1.SY1UNPCS = SL0JW01.SY1UNPCS;

   /* ***  obtain location status ****/

  set SL5REC empty;
  SL5REC.XWHCD = SL0JW01.XWHCD;
  SL5REC.XARCD = SL0JW01.XARCD;
  SL5REC.SL4ZONE = SL0JW01.SL4ZONE;
  SL5REC.SL5LOCTN = SL0JW01.SL5LOCTN;

  XSSL5I0(); /* obtain location record*/

  if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
    SL0JWB1.YLSCD = "**";
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWSKYSW = "N";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1AA";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == -811) /* <=== for INQUIRY*/
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S1AB";
        SLWREC.SLWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
        return;
      else
        if (SQLCA.VAGen_SQLCODE != 0)
          SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
          SLWREC.XXXLOCID = "S1AC";
          SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
          SL0JST2(); /* <=== clear scrn (empty)*/
          return;
        end
      end
    end
  end

  SL0JWB1.YLSCD = SL5REC.YLSCD;

   /* note: quantities are accumulated in their sl0jwb1 fields*/

   /* save current area,zone,location*/

  SL0JW01.XARCD = SL6REC.XARCD;
  SL0JW01.SL4ZONE = SL6REC.SL4ZONE;
  SL0JW01.SL5LOCTN = SL6REC.SL5LOCTN;
  SL0JW01.SL2PALET = SL6REC.SL2PALET;
  SL0JW01.SL2CASE = SL6REC.SL2CASE;
  SL0JW01.SY1UNPCS = SL6REC.SY1UNPCS;

   /* *** move summary data to summary array area ****/
   /* *** if maximum nbr of lines in summary array put to tsq ****/

  if (SLWREC.SLWIDX03 <= SLWREC.SLWLINPP)
    SL0JWS0.SL0JWDPG[SLWIDX03] = SL0JW01.SL0JWDPA;
    SL0JWS0.SL0JWRTY[SLWIDX03] = "S";
    SL0JWS0.SL0JWDTA[SLWIDX03] = SL0JWB1.SL0JWSM1;
    SLWIDX03 = SLWIDX03 + 1;
  else
    TA5REC.TA5APPID = SLWREC.SLWSUMQU;
    TA5REC.TA5FNCCD = "A";

    call "TA0050" (SL0JWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
    if (TA5REC.TA5RTNCD != 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1AA";
      SLWREC.SLWMSGNO = 0001; /* <--- severe tsq error msg*/
      return;
    end
    /* *** increment summary counter ****/
    SL0JW01.SL0JWSPA = SL0JW01.SL0JWSPA + 1;
    /* *** setup next summary record ****/
    SLWREC.SLWIDX03 = 1;
    SL0JWS0.SL0JWRTY[SLWIDX03] = "S";
    SL0JWS0.SL0JWDPG[SLWIDX03] = SL0JW01.SL0JWDPA;
    SL0JWS0.SL0JWDTA[SLWIDX03] = SL0JWB1.SL0JWSM1;
    SLWIDX03 = SLWIDX03 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0JS1A

// obtain 1st summary record
Function SL0JS1B()

  TA5REC.TA5APPID = SLWREC.SLWSUMQU;
  TA5REC.TA5TSQIX = 0001;
  TA5REC.TA5FNCCD = "R";
  call "TA0050" (SL0JWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1BA";
    SLWREC.SLWMSGNO = 0001;
    return;
  end

  SLWREC.SLWSUMIX = TA5REC.TA5TSQIX;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0JS1B

// will group fit on detail queue
Function SL0JS1C()

   /* *** add 1 to idx01 to account for summary line ****/
  SLWREC.SLWIDX06 = SLWREC.SLWIDX01 + 1;

  if (SLWREC.SLWIDX06 <= SLWREC.SLWIDX04)
    SLWREC.SLWIDX04 = SLWREC.SLWIDX04 - SLWREC.SLWIDX06; /* available space*/
  else
    if (SLWREC.SLWIDX02 != 1) /* if any lines in detail w.s*/
      /* *** fill the rest of the detail queue with blank records ****/
      while (SLWREC.SLWIDX02 <= SLWREC.SLWLINPP)
        SL0JWD0.SL0JWRTY[SLWIDX02] = "B";
        SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
      end
      /* *** put the detail records to the tsq ****/
      TA5REC.TA5APPID = SLWREC.SLWDETQU;
      TA5REC.TA5FNCCD = "A";
      call "TA0050" (SL0JWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
      if (TA5REC.TA5RTNCD != 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S1CA";
        SLWREC.SLWMSGNO = 0001; /* <--- severe tsq error msg*/
        return;
      end
      /* *** reset for next group ****/
      SL0JW01.SL0JWDPA = SL0JW01.SL0JWDPA + 1;
      SLWREC.SLWIDX02 = 1;
      SLWREC.SLWIDX04 = SLWREC.SLWLINPP;
      SLWREC.SLWIDX04 = SLWREC.SLWIDX04 - SLWREC.SLWIDX06;
                                   /* available space*/
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0JS1C

// obtain 1st detail record
Function SL0JS1D()

  TA5REC.TA5APPID = SLWREC.SLWDETQU;
  TA5REC.TA5TSQIX = 0001;
  TA5REC.TA5FNCCD = "R";
  call "TA0050" (SL0JWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1DA";
    SLWREC.SLWMSGNO = 0001;
    return;
  end

  SLWREC.SLWDETIX = TA5REC.TA5TSQIX;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0JS1D

// loc break detail processing
Function SL0JS1E()

   /* *** put summary line to detail queue ****/
  SL0JWD0.SL0JWSPG[SLWIDX02] = SL0JW01.SL0JWSPA;
  SL0JWD0.SL0JWRTY[SLWIDX02] = "S";
  SL0JWD0.SL0JWDTA[SLWIDX02] = SL0JWB1.SL0JWSM1;
  SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;

  SLWREC.SLWIDX05 = 1;
  while (SLWREC.SLWIDX05 <= SLWREC.SLWIDX01)
    if (SLWREC.SLWIDX02 <= SLWREC.SLWLINPP)
      SL0JWD0.SL0JWSPG[SLWIDX02] = SL0JW01.SL0JWSPA;
      SL0JWD0.SL0JWRTY[SLWIDX02] = "D";
      SL0JWD0.SL0JWDTA[SLWIDX02] = SL0JWB1.SL0JWDT1[SLWIDX05];
      SLWREC.SLWIDX05 = SLWREC.SLWIDX05 + 1;
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
    else
       /* *** setup call areas and add record to tsq ****/
      TA5REC.TA5APPID = SLWREC.SLWDETQU;
      TA5REC.TA5FNCCD = "A";
      call "TA0050" (SL0JWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
      if (TA5REC.TA5RTNCD != 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S1EB";
        SLWREC.SLWMSGNO = 0001; /* <--- severe tsq error msg*/
        return;
      end
      /* *** re-calc lines available before adding new lines ****/
      /* *** idx05 -1 re: idx05 points to next, not processed row ****/
      /* *** idx05 +1 re: sum line took up 1 row on this pg ****/
      /* *** idx04 -1 re: sum line added on next pg again ****/
      SLWREC.SLWIDX06 = SLWREC.SLWIDX06 - SLWREC.SLWIDX05;
      SLWREC.SLWIDX04 = SLWREC.SLWLINPP - SLWREC.SLWIDX06 - 1;
      /* *** keep track of detail record count ****/
      SLWREC.SLWDMAXR = TA5REC.TA5TSQIX;
      /* *** increment detail counter ****/
      SL0JW01.SL0JWDPA = SL0JW01.SL0JWDPA + 1;
      /* *** put same summary record on next group of details ****/
      SLWREC.SLWIDX02 = 1;
      SL0JWD0.SL0JWRTY[SLWIDX02] = "S";
      SL0JWD0.SL0JWDTA[SLWIDX02] = SL0JWB1.SL0JWSM1;
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
      /* *** now put detail line on new detail array ****/
      SL0JWD0.SL0JWSPG[SLWIDX02] = SL0JW01.SL0JWSPA;
      SL0JWD0.SL0JWRTY[SLWIDX02] = "D";
      SL0JWD0.SL0JWDTA[SLWIDX02] = SL0JWB1.SL0JWDT1[SLWIDX05];
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
      /* *** setup for next record ****/
      SLWREC.SLWIDX05 = SLWREC.SLWIDX05 + 1;
    end
  end

   /* *** add blank line to the detail queue ****/

  if (SLWREC.SLWIDX02 < SLWREC.SLWLINPP)
    SL0JWD0.SL0JWRTY[SLWIDX02] = "B";
    SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
    /* *** decrement available lines counter ****/
    SLWREC.SLWIDX04 = SLWREC.SLWIDX04 - 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0JS1E

// format detail buffer area
Function SL0JS1F()
  SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;

  SL0JW01.SL0JWSZ1 = SL6REC.SY5SZID;
  if (SYPREC.SY4IDDSC[SL0JWSZ1] > " ")
    SL0JWB1.SY4IDDSC[SLWIDX01] = SYPREC.SY4IDDSC[SL0JWSZ1];
  else
    SL0JWB1.SY4IDDSC[SLWIDX01] = "**";
  end
  SL0JWB1.SL0JWDOH[SLWIDX01] = SL6REC.SL6ONHND;
  SL0JWB1.SL0JWDPR[SLWIDX01] = SL6REC.SL6PKRSV;
  SL0JWB1.SL0JWDSA[SLWIDX01] = SL6REC.SL6STASD;
  SL0JW01.SL0JWNET = SL6REC.SL6ONHND - SL6REC.SL6PKRSV;
  SL0JW01.SL0JWNET = SL0JW01.SL0JWNET - SL6REC.SL6STASD;
  SL0JWB1.SL0JWDNT[SLWIDX01] = SL0JW01.SL0JWNET;
   /* *** accumulate summary quantities ****/
  SL0JWB1.SL0JWSNT = SL0JWB1.SL0JWSNT + SL0JWB1.SL0JWDNT[SLWIDX01];
  SL0JWB1.SL0JWSPR = SL0JWB1.SL0JWSPR + SL0JWB1.SL0JWDPR[SLWIDX01];
  SL0JWB1.SL0JWSSA = SL0JWB1.SL0JWSSA + SL0JWB1.SL0JWDSA[SLWIDX01];
  SL0JWB1.SL0JWSOH = SL0JWB1.SL0JWSOH + SL0JWB1.SL0JWDOH[SLWIDX01];

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0JS1F

// process last summary group
Function SL0JS1G()

  SL0JS1C(); /* determine if detail queue is full*/

   /* *** format summary line (use saved area,zone,location) ****/

  SL0JWB1.XARCD = SL0JW01.XARCD;
  SL0JWB1.SL4ZONE = SL0JW01.SL4ZONE;
  SL0JWB1.SL5LOCTN = SL0JW01.SL5LOCTN;
  SL0JWB1.SL2PALET = SL0JW01.SL2PALET;
  SL0JWB1.SL2CASE = SL0JW01.SL2CASE;
  SL0JWB1.SY1UNPCS = SL0JW01.SY1UNPCS;

   /* note: quantities are accumulated in their sl0jwb1 fields*/

   /* *** if there is room on summary array put last summary  ****/
   /* *** line on this summary array and put to tsq. if there ****/
   /* *** is no more room on the summary array, put summary   ****/
   /* *** array to tsq and put last summary line on summary   ****/
   /* *** array and then put to tsq.                          ****/

  if (SLWREC.SLWIDX03 <= SLWREC.SLWLINPP)
    SL0JWS0.SL0JWDPG[SLWIDX03] = SL0JW01.SL0JWDPA;
    SL0JWS0.SL0JWRTY[SLWIDX03] = "S";
    SL0JWS0.SL0JWDTA[SLWIDX03] = SL0JWB1.SL0JWSM1;
    SLWREC.SLWIDX03 = SLWREC.SLWIDX03 + 1;
    /* *** fill the rest of the buffer with blanks ****/
    while (SLWREC.SLWIDX03 <= SLWREC.SLWLINPP)
      SL0JWS0.SL0JWDPG[SLWIDX03] = SL0JW01.SL0JWDPA;
      SL0JWS0.SL0JWRTY[SLWIDX03] = "B";
      SLWREC.SLWIDX03 = SLWREC.SLWIDX03 + 1;
    end

    TA5REC.TA5APPID = SLWREC.SLWSUMQU;
    TA5REC.TA5FNCCD = "A";
    call "TA0050" (SL0JWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
    if (TA5REC.TA5RTNCD != 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1GA";
      SLWREC.SLWMSGNO = 0001; /* <--- severe tsq error msg*/
      return;
    end

    /* *** save maximum number of summary records ****/
    SLWREC.SLWSMAXR = TA5REC.TA5TSQIX;
  else
    TA5REC.TA5APPID = SLWREC.SLWSUMQU;
    TA5REC.TA5FNCCD = "A";

    call "TA0050" (SL0JWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
    if (TA5REC.TA5RTNCD != 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1GB";
      SLWREC.SLWMSGNO = 0008; /* <--- severe tsq error msg*/
      return;
    end

    /* *** increment summary counter ****/
    SL0JW01.SL0JWSPA = SL0JW01.SL0JWSPA + 1;
    /* *** setup next summary record ****/
    SLWREC.SLWIDX03 = 1;
    SL0JWS0.SL0JWDPG[SLWIDX03] = SL0JW01.SL0JWDPA;
    SL0JWS0.SL0JWRTY[SLWIDX03] = "S";
    SL0JWS0.SL0JWDTA[SLWIDX03] = SL0JWB1.SL0JWSM1;
    TA5REC.TA5APPID = SLWREC.SLWSUMQU;
    TA5REC.TA5FNCCD = "A";
    SLWREC.SLWIDX03 = SLWREC.SLWIDX03 + 1;
    /* *** fill the rest of the buffer with blanks ****/
    while (SLWREC.SLWIDX03 <= SLWREC.SLWLINPP)
      SL0JWS0.SL0JWDPG[SLWIDX03] = SL0JW01.SL0JWDPA;
      SL0JWS0.SL0JWRTY[SLWIDX03] = "B";
      SLWREC.SLWIDX03 = SLWREC.SLWIDX03 + 1;
    end

    call "TA0050" (SL0JWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
    if (TA5REC.TA5RTNCD != 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1GC";
      SLWREC.SLWMSGNO = 0001; /* <--- severe tsq error msg*/
      return;
    end

    /* *** save maximum number of summary records ****/
    SLWREC.SLWSMAXR = TA5REC.TA5TSQIX;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0JS1G

// process last detail group
Function SL0JS1H()

   /* *** put group summary line to detail queue ****/
  SL0JWD0.SL0JWSPG[SLWIDX02] = SL0JW01.SL0JWSPA;
  SL0JWD0.SL0JWRTY[SLWIDX02] = "S";
  SL0JWD0.SL0JWDTA[SLWIDX02] = SL0JWB1.SL0JWSM1;
  SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;

  SLWREC.SLWIDX05 = 1;
  while (SLWREC.SLWIDX05 <= SLWREC.SLWIDX01)
    if (SLWREC.SLWIDX02 <= SLWREC.SLWLINPP)
      SL0JWD0.SL0JWSPG[SLWIDX02] = SL0JW01.SL0JWSPA;
      SL0JWD0.SL0JWRTY[SLWIDX02] = "D";
      SL0JWD0.SL0JWDTA[SLWIDX02] = SL0JWB1.SL0JWDT1[SLWIDX05];
      SLWREC.SLWIDX05 = SLWREC.SLWIDX05 + 1;
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
    else
       /* *** setup call areas and add record to tsq ****/
      TA5REC.TA5APPID = SLWREC.SLWDETQU;
      TA5REC.TA5FNCCD = "A";
      call "TA0050" (SL0JWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
      if (TA5REC.TA5RTNCD != 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S1HB";
        SLWREC.SLWMSGNO = 0001; /* <--- severe tsq error msg*/
        return;
      end

      /* *** increment detail counter ****/
      SL0JW01.SL0JWDPA = SL0JW01.SL0JWDPA + 1;
      /* *** put same summary record on next group of details ****/
      SLWREC.SLWIDX02 = 1;
      SL0JWD0.SL0JWRTY[SLWIDX02] = "S";
      SL0JWD0.SL0JWDTA[SLWIDX02] = SL0JWB1.SL0JWSM1;
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;

      /* ***** the following code added by grant gilray 4/25/88 ******/
      SL0JWD0.SL0JWRTY[SLWIDX02] = "D";
      /* ***** end of code added by grant gilray 4/25/88 *************/

      SL0JWD0.SL0JWDTA[SLWIDX02] = SL0JWB1.SL0JWDT1[SLWIDX05];
      /* *** setup for next record ****/
      SLWREC.SLWIDX05 = SLWREC.SLWIDX05 + 1;

      /* ***** the following code added by grant gilray 4/25/88 ******/
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
      /* ***** end of code added by grant gilray 4/25/88 *************/

    end
  end
   /* *** fill the rest of the detail queue with blank records ****/
  while (SLWREC.SLWIDX02 <= SLWREC.SLWLINPP)
    SL0JWD0.SL0JWRTY[SLWIDX02] = "B";
    SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
  end
   /* *** put the last detail records to the tsq ****/
  TA5REC.TA5APPID = SLWREC.SLWDETQU;
  TA5REC.TA5FNCCD = "A";

  call "TA0050" (SL0JWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1HC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe tsq error msg*/
    return;
  end

   /* *** keep track of last detail relative record number ****/
  SLWREC.SLWDMAXR = TA5REC.TA5TSQIX;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0JS1H

// add to detail buffer area
Function SL0JS1I()
   /* *** add to previous quantities  for this size ****/
  SL0JW01.SL0JWTQ = SL6REC.SL6ONHND + SL0JWB1.SL0JWDOH[SLWIDX01];
  SL0JWB1.SL0JWDOH[SLWIDX01] = SL0JW01.SL0JWTQ;
  SL0JW01.SL0JWTQ = SL6REC.SL6PKRSV + SL0JWB1.SL0JWDPR[SLWIDX01];
  SL0JWB1.SL0JWDPR[SLWIDX01] = SL0JW01.SL0JWTQ;
  SL0JW01.SL0JWTQ = SL6REC.SL6STASD + SL0JWB1.SL0JWDSA[SLWIDX01];
  SL0JWB1.SL0JWDSA[SLWIDX01] = SL0JW01.SL0JWTQ;
  SL0JW01.SL0JWNET = SL6REC.SL6ONHND - SL6REC.SL6PKRSV;
  SL0JW01.SL0JWNET = SL0JW01.SL0JWNET - SL6REC.SL6STASD;
  SL0JW01.SL0JWTQ = SL0JW01.SL0JWNET + SL0JWB1.SL0JWDNT[SLWIDX01];
  SL0JWB1.SL0JWDNT[SLWIDX01] = SL0JW01.SL0JWTQ;

   /* *** accumulate summary quantities ****/
  SL0JWB1.SL0JWSNT = SL0JWB1.SL0JWSNT + SL0JW01.SL0JWNET;
  SL0JWB1.SL0JWSPR = SL0JWB1.SL0JWSPR + SL6REC.SL6PKRSV;
  SL0JWB1.SL0JWSSA = SL0JWB1.SL0JWSSA + SL6REC.SL6STASD;
  SL0JWB1.SL0JWSOH = SL0JWB1.SL0JWSOH + SL6REC.SL6ONHND;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0JS1I
// process summary product break
Function SL0JS2A()

  SL0JS2C(); /* determine if detail group will fit*/

   /* *** format summary line (use saved product) ****/

  SL0JWB2.XGPCD = SL0JW02.XGPCD;
  SL0JWB2.SY1STNBR = SL0JW02.SY1STNBR;
  SL0JWB2.SY2CLRID = SL0JW02.SY2CLRID;
  SL0JWB2.XDMCD = SL0JW02.XDMCD;
  SL0JWB2.XQACD = SL0JW02.XQACD;
  SL0JWB2.PC2INSEG = SL0JW02.PC2INSEG;
  SL0JWB2.XEGCD = SL0JW02.XEGCD;
  SL0JWB2.XSLCD = SL0JW02.XSLCD;
  SL0JWB2.XPGCD = SL0JW02.XPGCD;
  SL0JWB2.XUMCD = SL0JW02.XUMCD;
  SL0JWB2.XOWCD = SL0JW02.XOWCD;

  if (SL0JW02.SL0JWCPS == "C")
    SL0JWB2.SL2CASE = SL0JW02.SL2CASE;
  else
    SL0JWB2.SL2PALET = SL0JW02.SL2PALET;
  end

  SL0JWB2.XOWCD = SL0JW02.XOWCD;

   /* note: quantities are accumulated in their sl0jwb2 fields*/

   /* save current product*/

  SL0JW02.XGPCD = SL6REC.XGPCD;
  SL0JW02.SY1STNBR = SL6REC.SY1STNBR;
  SL0JW02.SY2CLRID = SL6REC.SY2CLRID;
  SL0JW02.XDMCD = SL6REC.XDMCD;
  SL0JW02.XQACD = SL6REC.XQACD;
  SL0JW02.PC2INSEG = SL6REC.PC2INSEG;
  SL0JW02.XEGCD = SL6REC.XEGCD;
  SL0JW02.XSLCD = SL6REC.XSLCD;
  SL0JW02.XPGCD = SL6REC.XPGCD;
  SL0JW02.XUMCD = SL6REC.XUMCD;
  SL0JW02.XOWCD = SL6REC.XOWCD;
  SL0JW02.SL2PALET = SL6REC.SL2PALET;
  SL0JW02.SL2CASE = SL6REC.SL2CASE;

   /* *** move summary data to summary array area ****/
   /* *** if maximum nbr of lines in summary array put to tsq ****/

  if (SLWREC.SLWIDX03 <= SLWREC.SLWLINPP)
    SL0JWS0.SL0JWDPG[SLWIDX03] = SL0JW02.SL0JWDPA;
    SL0JWS0.SL0JWRTY[SLWIDX03] = "S";
    SL0JWS0.SL0JWDTA[SLWIDX03] = SL0JWB2.SL0JWSM2;
    SLWIDX03 = SLWIDX03 + 1;
  else
    TA5REC.TA5APPID = SLWREC.SLWSUMQU;
    TA5REC.TA5FNCCD = "A";

    call "TA0050" (SL0JWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
    if (TA5REC.TA5RTNCD != 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2AA";
      SLWREC.SLWMSGNO = 0001; /* <--- severe tsq error msg*/
      return;
    end
    /* *** increment summary counter ****/
    SL0JW02.SL0JWSPA = SL0JW02.SL0JWSPA + 1;
    /* *** setup next summary record ****/
    SLWREC.SLWIDX03 = 1;
    SL0JWS0.SL0JWRTY[SLWIDX03] = "S";
    SL0JWS0.SL0JWDPG[SLWIDX03] = SL0JW02.SL0JWDPA;
    SL0JWS0.SL0JWDTA[SLWIDX03] = SL0JWB2.SL0JWSM2;
    SLWIDX03 = SLWIDX03 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0JS2A

// obtain 1st summary record
Function SL0JS2B()

  TA5REC.TA5APPID = SLWREC.SLWSUMQU;
  TA5REC.TA5TSQIX = 0001;
  TA5REC.TA5FNCCD = "R";
  call "TA0050" (SL0JWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S2BA";
    SLWREC.SLWMSGNO = 0001;
    return;
  end

  SLWREC.SLWSUMIX = TA5REC.TA5TSQIX;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0JS2B

// determine if group fits
Function SL0JS2C()

   /* *** include summary buffer line ****/
  SLWREC.SLWIDX06 = SLWREC.SLWIDX01 + 1;

  if (SLWREC.SLWIDX06 <= SLWREC.SLWIDX04)
    SLWREC.SLWIDX04 = SLWREC.SLWIDX04 - SLWREC.SLWIDX06; /* available space*/
  else
    if (SLWREC.SLWIDX02 != 1) /* if any lines in detail w.s*/
      /* *** fill the rest of the detail queue with blank records ****/
      while (SLWREC.SLWIDX02 <= SLWREC.SLWLINPP)
        SL0JWD0.SL0JWRTY[SLWIDX02] = "B";
        SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
      end
      /* *** put the detail records to the tsq ****/
      TA5REC.TA5APPID = SLWREC.SLWDETQU;
      TA5REC.TA5FNCCD = "A";
      call "TA0050" (SL0JWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
      if (TA5REC.TA5RTNCD != 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S2CA";
        SLWREC.SLWMSGNO = 0001; /* <--- severe tsq error msg*/
        return;
      end
      /* *** reset for next group ****/
      SL0JW02.SL0JWDPA = SL0JW02.SL0JWDPA + 1;
      SLWREC.SLWIDX02 = 1;
      SLWREC.SLWIDX04 = SLWREC.SLWLINPP;
      SLWREC.SLWIDX04 = SLWREC.SLWIDX04 - SLWREC.SLWIDX06;
                                   /* available space*/
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0JS2C

// obtain 1st detail record
Function SL0JS2D()

  TA5REC.TA5APPID = SLWREC.SLWDETQU;
  TA5REC.TA5TSQIX = 0001;
  TA5REC.TA5FNCCD = "R";
  call "TA0050" (SL0JWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S2DA";
    SLWREC.SLWMSGNO = 0001;
    return;
  end

  SLWREC.SLWDETIX = TA5REC.TA5TSQIX;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0JS2D

// detail processing
Function SL0JS2E()

  SL0JWD0.SL0JWSPG[SLWIDX02] = SL0JW02.SL0JWSPA;
  SL0JWD0.SL0JWRTY[SLWIDX02] = "S";
  SL0JWD0.SL0JWDTA[SLWIDX02] = SL0JWB2.SL0JWSM2;
  SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;

  SLWREC.SLWIDX05 = 1;
  while (SLWREC.SLWIDX05 <= SLWREC.SLWIDX01)
    if (SLWREC.SLWIDX02 <= SLWREC.SLWLINPP)
      SL0JWD0.SL0JWSPG[SLWIDX02] = SL0JW02.SL0JWSPA;
      SL0JWD0.SL0JWRTY[SLWIDX02] = "D";
      SL0JWD0.SL0JWDTA[SLWIDX02] = SL0JWB2.SL0JWDT2[SLWIDX05];
      SLWREC.SLWIDX05 = SLWREC.SLWIDX05 + 1;
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
    else
       /* *** setup call areas and add record to tsq ****/
      TA5REC.TA5APPID = SLWREC.SLWDETQU;
      TA5REC.TA5FNCCD = "A";
      call "TA0050" (SL0JWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
      if (TA5REC.TA5RTNCD != 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S2EA";
        SLWREC.SLWMSGNO = 0001; /* <--- severe tsq error msg*/
        return;
      end
      /* *** re-calc lines available before adding new lines ****/
      /* *** idx05 -1 re: idx05 points to next, not processed row ****/
      /* *** idx05 +1 re: sum line took up 1 row on this pg ****/
      /* *** idx04 -1 re: sum line added on next pg again ****/
      SLWREC.SLWIDX06 = SLWREC.SLWIDX06 - SLWREC.SLWIDX05;
      SLWREC.SLWIDX04 = SLWREC.SLWLINPP - SLWREC.SLWIDX06 - 1;
      /* *** increment detail page counter ****/
      SL0JW02.SL0JWDPA = SL0JW02.SL0JWDPA + 1;
      /* *** put same summary record on next group of details ****/
      SLWREC.SLWIDX02 = 1;
      SL0JWD0.SL0JWRTY[SLWIDX02] = "S";
      SL0JWD0.SL0JWDTA[SLWIDX02] = SL0JWB2.SL0JWSM2;
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
      /* *** now put detail line on new detail array ****/
      SL0JWD0.SL0JWSPG[SLWIDX02] = SL0JW02.SL0JWSPA;
      SL0JWD0.SL0JWRTY[SLWIDX02] = "D";
      SL0JWD0.SL0JWDTA[SLWIDX02] = SL0JWB2.SL0JWDT2[SLWIDX05];
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
      /* *** setup for next record ****/
      SLWREC.SLWIDX05 = SLWREC.SLWIDX05 + 1;
    end
  end

   /* *** add blank line to the detail queue ****/

  if (SLWREC.SLWIDX02 < SLWREC.SLWLINPP)
    SL0JWD0.SL0JWRTY[SLWIDX02] = "B";
    SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
    /* *** decrement lines available ****/
    SLWREC.SLWIDX04 = SLWREC.SLWIDX04 - 1;

  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0JS2E

// format detail buffer area
Function SL0JS2F()
  if (SL6REC.SY5SZID == SL0JW02.SL0JWSZ2)

    SL0JWB2.SL0JWDOH[SLWIDX01] = SL0JWB2.SL0JWDOH[SLWIDX01] + SL6REC.SL6ONHND;
    SL0JWB2.SL0JWDPR[SLWIDX01] = SL0JWB2.SL0JWDPR[SLWIDX01] + SL6REC.SL6PKRSV;
    SL0JWB2.SL0JWDSA[SLWIDX01] = SL0JWB2.SL0JWDSA[SLWIDX01] + SL6REC.SL6STASD;
     /* *** accumulate summary quantities ****/
    SL0JWB2.SL0JWSOH = SL0JWB2.SL0JWSOH + SL6REC.SL6ONHND;
    SL0JWB2.SL0JWSPR = SL0JWB2.SL0JWSPR + SL6REC.SL6PKRSV;
    SL0JWB2.SL0JWSSA = SL0JWB2.SL0JWSSA + SL6REC.SL6STASD;

  else

    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;

    SL0JW02.SL0JWSZ2 = SL6REC.SY5SZID;

    if (SYPREC.SY4IDDSC[SL0JWSZ2] > " ")
      SL0JWB2.SY4IDDSC[SLWIDX01] = SYPREC.SY4IDDSC[SL0JWSZ2];
    else
      SL0JWB2.SY4IDDSC[SLWIDX01] = "**";
    end

    SL0JWB2.SL0JWDOH[SLWIDX01] = SL6REC.SL6ONHND;
    SL0JWB2.SL0JWDPR[SLWIDX01] = SL6REC.SL6PKRSV;
    SL0JWB2.SL0JWDSA[SLWIDX01] = SL6REC.SL6STASD;
     /* *** accumulate summary quantities ****/
    SL0JWB2.SL0JWSOH = SL0JWB2.SL0JWSOH + SL0JWB2.SL0JWDOH[SLWIDX01];
    SL0JWB2.SL0JWSPR = SL0JWB2.SL0JWSPR + SL0JWB2.SL0JWDPR[SLWIDX01];
    SL0JWB2.SL0JWSSA = SL0JWB2.SL0JWSSA + SL0JWB2.SL0JWDSA[SLWIDX01];

  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0JS2F

// process last summary group
Function SL0JS2G()

  SL0JS2C(); /* determine if detail record queue is full*/

   /* *** format summary line (use saved area,zone,location) ****/

  SL0JWB2.XGPCD = SL0JW02.XGPCD;
  SL0JWB2.SY1STNBR = SL0JW02.SY1STNBR;
  SL0JWB2.SY2CLRID = SL0JW02.SY2CLRID;
  SL0JWB2.XDMCD = SL0JW02.XDMCD;
  SL0JWB2.XQACD = SL0JW02.XQACD;
  SL0JWB2.PC2INSEG = SL0JW02.PC2INSEG;
  SL0JWB2.XEGCD = SL0JW02.XEGCD;
  SL0JWB2.XSLCD = SL0JW02.XSLCD;
  SL0JWB2.XPGCD = SL0JW02.XPGCD;
  SL0JWB2.XUMCD = SL0JW02.XUMCD;
  SL0JWB2.XOWCD = SL0JW02.XOWCD;
  SL0JWB2.SL2PALET = SL0JW02.SL2PALET;
  SL0JWB2.SL2CASE = SL0JW02.SL2CASE;

   /* note: quantities are accumulated in their sl0jwb2 fields*/

   /* *** if there is room on summary array put last summary  ****/
   /* *** line on this summary array and put to tsq. if there ****/
   /* *** is no more room on the summary array, put summary   ****/
   /* *** array to tsq and put last summary line on summary   ****/
   /* *** array and then put to tsq.                          ****/

  if (SLWREC.SLWIDX03 <= SLWREC.SLWLINPP)
    SL0JWS0.SL0JWDPG[SLWIDX03] = SL0JW02.SL0JWDPA;
    SL0JWS0.SL0JWRTY[SLWIDX03] = "S";
    SL0JWS0.SL0JWDTA[SLWIDX03] = SL0JWB2.SL0JWSM2;
    SLWREC.SLWIDX03 = SLWREC.SLWIDX03 + 1;
    /* *** fill the rest of the buffer with blanks ****/
    while (SLWREC.SLWIDX03 <= SLWREC.SLWLINPP)
      SL0JWS0.SL0JWDPG[SLWIDX03] = SL0JW02.SL0JWDPA;
      SL0JWS0.SL0JWRTY[SLWIDX03] = "B";
      SLWREC.SLWIDX03 = SLWREC.SLWIDX03 + 1;
    end

    TA5REC.TA5APPID = SLWREC.SLWSUMQU;
    TA5REC.TA5FNCCD = "A";
    call "TA0050" (SL0JWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
    if (TA5REC.TA5RTNCD != 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2GA";
      SLWREC.SLWMSGNO = 0001; /* <--- severe tsq error msg*/
      return;
    end

    /* *** save maximum number of summary records ****/
    SLWREC.SLWSMAXR = TA5REC.TA5TSQIX;
  else
    TA5REC.TA5APPID = SLWREC.SLWSUMQU;
    TA5REC.TA5FNCCD = "A";

    call "TA0050" (SL0JWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
    if (TA5REC.TA5RTNCD != 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2GB";
      SLWREC.SLWMSGNO = 0001; /* <--- severe tsq error msg*/
      return;
    end

    /* *** increment summary counter ****/
    SL0JW02.SL0JWSPA = SL0JW02.SL0JWSPA + 1;
    /* *** setup next summary record ****/
    SLWREC.SLWIDX03 = 1;
    SL0JWS0.SL0JWDPG[SLWIDX03] = SL0JW02.SL0JWDPA;
    SL0JWS0.SL0JWRTY[SLWIDX03] = "S";
    SL0JWS0.SL0JWDTA[SLWIDX03] = SL0JWB2.SL0JWSM2;
    SLWREC.SLWIDX03 = SLWREC.SLWIDX03 + 1;
    /* *** fill the rest of the buffer with blanks ****/
    while (SLWREC.SLWIDX03 <= SLWREC.SLWLINPP)
      SL0JWS0.SL0JWDPG[SLWIDX03] = SL0JW02.SL0JWDPA;
      SL0JWS0.SL0JWRTY[SLWIDX03] = "B";
      SLWREC.SLWIDX03 = SLWREC.SLWIDX03 + 1;
    end

    TA5REC.TA5APPID = SLWREC.SLWSUMQU;
    TA5REC.TA5FNCCD = "A";

    call "TA0050" (SL0JWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
    if (TA5REC.TA5RTNCD != 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2GC";
      SLWREC.SLWMSGNO = 0001; /* <--- severe tsq error msg*/
      return;
    end

    /* *** save maximum number of summary records ****/
    SLWREC.SLWSMAXR = TA5REC.TA5TSQIX;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0JS2G

// process last detail group
Function SL0JS2H()

  SL0JWD0.SL0JWSPG[SLWIDX02] = SL0JW02.SL0JWSPA;
  SL0JWD0.SL0JWRTY[SLWIDX02] = "S";
  SL0JWD0.SL0JWDTA[SLWIDX02] = SL0JWB2.SL0JWSM2;
  SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;

  SLWREC.SLWIDX05 = 1;
  while (SLWREC.SLWIDX05 <= SLWREC.SLWIDX01)
    if (SLWREC.SLWIDX02 <= SLWREC.SLWLINPP)
      SL0JWD0.SL0JWSPG[SLWIDX02] = SL0JW02.SL0JWSPA;
      SL0JWD0.SL0JWRTY[SLWIDX02] = "D";
      SL0JWD0.SL0JWDTA[SLWIDX02] = SL0JWB2.SL0JWDT2[SLWIDX05];
      SLWREC.SLWIDX05 = SLWREC.SLWIDX05 + 1;
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
    else
       /* *** setup call areas and add record to tsq ****/
      TA5REC.TA5APPID = SLWREC.SLWDETQU;
      TA5REC.TA5FNCCD = "A";
      call "TA0050" (SL0JWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
      if (TA5REC.TA5RTNCD != 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S2HA";
        SLWREC.SLWMSGNO = 0001; /* <--- severe tsq error msg*/
        return;
      end

      /* *** increment detail counter ****/
      SL0JW02.SL0JWDPA = SL0JW02.SL0JWDPA + 1;
      /* *** put same summary record on next group of details ****/
      SLWREC.SLWIDX02 = 1;
      SL0JWD0.SL0JWRTY[SLWIDX02] = "S";
      SL0JWD0.SL0JWDTA[SLWIDX02] = SL0JWB2.SL0JWSM2;
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
      /* ***** this code added by Grant Gilray 3/22/88 ******/
      SL0JWD0.SL0JWRTY[SLWIDX02] = "D";
      /* ***** end of code added 3/22/88 ********************/
      SL0JWD0.SL0JWDTA[SLWIDX02] = SL0JWB2.SL0JWDT2[SLWIDX05];
      /* *** setup for next record ****/
      SLWREC.SLWIDX05 = SLWREC.SLWIDX05 + 1;
      /* ***** this code added by Grant Gilray 3/22/88 ******/
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
      /* ***** end of code added 3/22/88 ********************/
    end
  end
   /* *** fill the rest of the detail queue with blank records ****/
  while (SLWREC.SLWIDX02 <= SLWREC.SLWLINPP)
    SL0JWD0.SL0JWRTY[SLWIDX02] = "B";
    SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
  end
   /* *** put the last detail records to the tsq ****/
  TA5REC.TA5APPID = SLWREC.SLWDETQU;
  TA5REC.TA5FNCCD = "A";

  call "TA0050" (SL0JWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S2HB";
    SLWREC.SLWMSGNO = 0001; /* <--- severe tsq error msg*/
    return;
  end

   /* *** keep track of last detail relative record number ****/
  SLWREC.SLWDMAXR = TA5REC.TA5TSQIX;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0JS2H

// process each detail record
Function SL0JS3F()
  SL0JWB3.PC2INSEG = SL6REC.PC2INSEG;
  SL0JWB3.XEGCD = SL6REC.XEGCD;
  SL0JWB3.XSLCD = SL6REC.XSLCD;
  SL0JWB3.XPGCD = SL6REC.XPGCD;
  SL0JWB3.XUMCD = SL6REC.XUMCD;
  SL0JWB3.XOWCD = SL6REC.XOWCD;

  if (SLWREC.SLWIDX02 <= SLWREC.SLWLINPP)
    SL0JWD0.SL0JWRTY[SLWIDX02] = "D";
    SL0JWD0.SL0JWDTA[SLWIDX02] = SL0JWB3.SL0JWRC3;
    SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
  else
     /* *** setup call areas and add record to tsq ****/
    TA5REC.TA5APPID = SLWREC.SLWDETQU;
    TA5REC.TA5FNCCD = "A";
    call "TA0050" (SL0JWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
    if (TA5REC.TA5RTNCD != 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3FB";
      SLWREC.SLWMSGNO = 0001; /* <--- severe tsq error msg*/
      return;
    end
    /* *** put next record to data array area ****/
    SLWREC.SLWIDX02 = 1;
    SL0JWD0.SL0JWRTY[SLWIDX02] = "D";
    SL0JWD0.SL0JWDTA[SLWIDX02] = SL0JWB3.SL0JWRC3;
    SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0JS3F

// process last group
Function SL0JS3H()

   /* *** fill the rest of the detail queue with blank records ****/
  while (SLWREC.SLWIDX02 <= SLWREC.SLWLINPP)
    SL0JWD0.SL0JWRTY[SLWIDX02] = "B";
    SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
  end
   /* *** put the last detail records to the tsq ****/
  TA5REC.TA5APPID = SLWREC.SLWDETQU;
  TA5REC.TA5FNCCD = "A";

  call "TA0050" (SL0JWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S3HA";
    SLWREC.SLWMSGNO = 0001; /* <--- severe tsq error msg*/
    return;
  end

   /* *** keep track of last detail relative record number ****/
  SLWREC.SLWDMAXR = TA5REC.TA5TSQIX;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0JS3H

// save selected printer
Function SL0JS4A()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  SLWREC.SLWIDX02 = 1; /* Initialize index*/
  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (SL0JT04.TARTYPE[SLWIDX02] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user area*/
      /* ------------------------------------------------------------*/

      SLWREC.SLWIDX01 = 1;
      while (SLWREC.SLWIDX01 <= 5)
        if (SL0JM410.SY1STNBR[SLWIDX01] != "        ")
          SL0JW04.XWHCD = SL0JM410.XWHCD;
          SL0JW04.XGPCD = SL0JM410.XGPCD[SLWIDX01];
          SL0JW04.SY1STNBR = SL0JM410.SY1STNBR[SLWIDX01];
          SL0JW04.SY2CLRID = SL0JM410.SY2CLRID[SLWIDX01];

          SL0JW04.XDMCD = SL0JM410.XDMCD[SLWIDX01];
          SL0JW04.XQACD = SL0JM410.XQACD[SLWIDX01];
          SL0JW04.PC2INSEG = SL0JM410.PC2INSEG[SLWIDX01];
          SL0JW04.XEGCD = SL0JM410.XEGCD[SLWIDX01];

          SL0JW04.XSLCD = SL0JM410.XSLCD[SLWIDX01];
          SL0JW04.XPGCD = SL0JM410.XPGCD[SLWIDX01];
          SL0JW04.XUMCD = SL0JM410.XUMCD[SLWIDX01];
          SL0JW04.XOWCD = SL0JM410.XOWCD[SLWIDX01];

          TA6REC.TARJCL[TA6INDEX] = SL0JW04.SL0JWPRD; /* Parametrs*/
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

        end

        SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;

      end

      TA6REC.TA6INDEX = TA6REC.TA6INDEX - 1; /* Keep table position*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = SL0JT04.TARJCL[SLWIDX02]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = SL0JT04.TARTYPE[SLWIDX02]; /* Type*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (SL0JT04.TARJCL[SLWIDX02] == "/*EOF") /* End of Table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  if (SL0JM410.SL0JMPID == " ")
    TA6REC.TA6SUBSW = "Y"; /* display map, tailor and submit JCL*/
  else
    TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  end

  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/
  TA6REC.XURDEST = SL0JM410.SL0JMPID; /* Destination*/

  SL0JS4B(); /* ; get user name information*/

  XPTA0P();

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  SLWREC.SLWFTMSW = "N";
  if (sysVar.errorCode == "00000000" /* Call successful*/
   || TA6REC.TA6RTNCD == "0")       

    SLWREC.SLWMSGNO = 59; /* job submitted message*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    SLWREC.SLWMSGNO = 58; /* Unexpected error occurred*/
    SLWREC.SLWERRSW = "Y";

  end

  if (TA6REC.TA6RTNCD == "1")
    TA6REC.XURDEST = "      "; /* Blank out dest. field*/
  end

end // end SL0JS4A

// get username
Function SL0JS4B()
   /* ------------------------------------------------------------*/
   /* Get user id info., so when calling ta0p it will print*/
    /* automatically if valid printer was entered*/
   /* ------------------------------------------------------------*/

  set TA3REC empty;
  TA3REC.TA3OPTN = "USRNAME";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   || TA3REC.TA3RTNCD == "0")       

    TA6REC.XURUSRNM = TA3REC.TA3USRID;
    return;

  else
    /* ------------------------------------------------------------*/
     /* If not successful, indicate unexpected error has occurred.*/
    /* ------------------------------------------------------------*/

    TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return code*/
    TAEREC.TAEDESC2 = TA3REC.TA3GROUP; /* Error information*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/

    call "TA0020" (TA1REC) {isExternal = yes}; /* Error diagnosis routine*/

  end

end // end SL0JS4B

// save selected printer
Function SL0JS5A()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/
  SLWREC.SLWIDX02 = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (SL0JT05.TARTYPE[SLWIDX02] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user area*/
      /* ------------------------------------------------------------*/

      SLWREC.SLWIDX01 = 1;
      while (SLWREC.SLWIDX01 <= 6)
        if (SL0JM510.XARCD[SLWIDX01] != "  ")
          SL0JW05.XWHCD = SL0JM510.XWHCD;
          SL0JW05.XARCD = SL0JM510.XARCD[SLWIDX01];
          SL0JW05.SL4ZONE = SL0JM510.SL4ZONE[SLWIDX01];
          SL0JW05.SL5LOCTN = SL0JM510.SL5LOCTN[SLWIDX01];

          TA6REC.TARJCL[TA6INDEX] = SL0JW05.SL0JWLOC; /* Parametrs*/
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

        end

        SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;

      end

      TA6REC.TA6INDEX = TA6REC.TA6INDEX - 1; /* Keep table position*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = SL0JT05.TARJCL[SLWIDX02]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = SL0JT05.TARTYPE[SLWIDX02]; /* Type*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (SL0JT05.TARJCL[SLWIDX02] == "/*EOF") /* End of Table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  if (SL0JM510.SL0JMPID == " ")
    TA6REC.TA6SUBSW = "Y"; /* display map, tailor and submit JCL*/
  else
    TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  end

  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/
  TA6REC.XURDEST = SL0JM510.SL0JMPID; /* Destination*/

  SL0JS5B(); /* get user name information*/

  XPTA0P();

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  SLWREC.SLWFTMSW = "N";
  if (sysVar.errorCode == "00000000" /* Call successful*/
   || TA6REC.TA6RTNCD == "0")       

    SLWREC.SLWMSGNO = 59; /* job submitted message*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    SLWREC.SLWMSGNO = 58; /* Unexpected error occurred*/
    SLWREC.SLWERRSW = "Y";

  end

  if (TA6REC.TA6RTNCD == "1") /* Call cancelled*/
    TA6REC.XURDEST = "      "; /* blank out dest. field*/
  end

end // end SL0JS5A

// get username
Function SL0JS5B()
   /* ------------------------------------------------------------*/
   /* Get user id info., so when calling ta0p it will print*/
    /* automatically if valid printer was entered*/
   /* ------------------------------------------------------------*/

  set TA3REC empty;
  TA3REC.TA3OPTN = "USRNAME";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   || TA3REC.TA3RTNCD == "0")       

    TA6REC.XURUSRNM = TA3REC.TA3USRID;
    return;

  else
    /* ------------------------------------------------------------*/
     /* If not successful, indicate unexpected error has occurred.*/
    /* ------------------------------------------------------------*/

    TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return code*/
    TAEREC.TAEDESC2 = TA3REC.TA3GROUP; /* Error information*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/

    call "TA0020" (TA1REC) {isExternal = yes}; /* Error diagnosis routine*/

  end

end // end SL0JS5B

// missing input edits
Function SL0JSA0()

   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: setup defaults for optional fields, if any    ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0JM010.XMSLMSNO > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA0A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0JM010.XMSLMSNO cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSA0

// missing key inputs edits
Function SL0JSA1()

   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: defaults setup during initialization          ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0JM110.XOWCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0JM110.XOWCD cursor, bold;
  end

   /* ***** code commented by Grant Gilray 3/15/88 ******/
   /* IF SL0JM110.XUMCD GT ' ';*/
    /* ; ** next sentence ***/
   /* ELSE ;*/
    /* MOVE 'Y' TO SLWREC.SLWERRSW;*/
    /* MOVE 'SA1B' TO SLWREC.XXXLOCID;*/
    /* MOVE 0009 TO SLWREC.SLWMSGNO  ; <--- missing required fiel*/
    /* SET SL0JM110.XUMCD CURSOR,BRIGHT;*/
   /* END ;*/

   /* ***** end of code commented out on 3/15/88 ******/

  if (SL0JM110.XPGCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1C";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0JM110.XPGCD cursor, bold;
  end

  if (SL0JM110.XSLCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1D";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0JM110.XSLCD cursor, bold;
  end

  if (SL0JM110.XEGCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1E";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0JM110.XEGCD cursor, bold;
  end

  if (SL0JM110.PC2INSEG > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1F";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0JM110.PC2INSEG cursor, bold;
  end

  if (SL0JM110.XQACD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1G";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0JM110.XQACD cursor, bold;
  end

  if (SL0JM110.XDMCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1H";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0JM110.XDMCD cursor, bold;
  end

  if (SL0JM110.SY2CLRID > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1I";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0JM110.SY2CLRID cursor, bold;
  end

  if (SL0JM110.SY1STNBR > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1J";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0JM110.SY1STNBR cursor, bold;
  end

  if (SL0JM110.XGPCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1K";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0JM110.XGPCD cursor, bold;
  end

  if (SL0JM110.XWHCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1L";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0JM110.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSA1

// missing key inputs edits
Function SL0JSA2()

   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: defaults setup during initialization          ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0JM210.SL5LOCTN > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0JM210.SL5LOCTN cursor, bold;
  end

  if (SL0JM210.SL4ZONE > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2B";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0JM210.SL4ZONE cursor, bold;
  end

  if (SL0JM210.XARCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2C";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0JM210.XARCD cursor, bold;
  end

  if (SL0JM210.XWHCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2D";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0JM210.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSA2

// missing key inputs edits
Function SL0JSA3()

   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: defaults setup during initialization          ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0JM310.XQACD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0JM310.XQACD cursor, bold;
  end

  if (SL0JM310.XDMCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3B";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0JM310.XDMCD cursor, bold;
  end

  if (SL0JM310.SY2CLRID > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3C";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0JM310.SY2CLRID cursor, bold;
  end

  if (SL0JM310.SY1STNBR > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3D";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0JM310.SY1STNBR cursor, bold;
  end

  if (SL0JM310.XGPCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3E";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0JM310.XGPCD cursor, bold;
  end

  if (SL0JM310.XWHCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3F";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0JM310.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSA3

// missing input edits
Function SL0JSA4()

   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: defaults setup during initialization          ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0JM410.XOWCD[1] > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA4A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0JM410.XOWCD[SLWIDX01] cursor, bold;
  end

  if (SL0JM410.SY1STNBR[1] > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA4B";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0JM410.SY1STNBR[SLWIDX01] cursor, bold;
  end

  if (SL0JM410.XWHCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA4C";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0JM410.XWHCD cursor, bold;
  end

   /* ***** the following code added by Grant Gilray 3/16/88 ******/
  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= 5)
    if (SL0JM410.SY1STNBR[SLWIDX01] != "      ")
      if (SL0JM410.XUMCD[SLWIDX01] == "  ")
        SL0JSA7(); /* <--- get UOM code from prod db*/
      end
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end
   /* ******** end of code added by Grant Gilray 3/16/88 **********/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSA4

// missing input edits
Function SL0JSA5()

   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: defaults setup during initialization          ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 6;
  while (SLWREC.SLWIDX01 >= 1)
    if (SL0JM510.SL5LOCTN[SLWIDX01] > " ")
      return;
    end
    if (SL0JM510.SL4ZONE[SLWIDX01] > " ")
      return;
    end
    if (SL0JM510.XARCD[SLWIDX01] > " ")
      return;
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end

   /* *** if we get to this point no data was entered ****/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "SA5A";
  SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
  set SL0JM510.XARCD[1] cursor, bold;
  set SL0JM510.SL4ZONE[1] bold;
  set SL0JM510.SL5LOCTN[1] bold;

  if (SL0JM510.XWHCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA5D";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0JM510.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSA5

// Get UOM cd from Prod DB
Function SL0JSA7()

   /* ************************************************************/
   /* *** get the UOM code from product database.             ****/
   /* ************************************************************/

  set PKNREC empty;
  TA1REC.TA1LOCAT[2] = "SL0HSA7 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;
  PKNREC.XGPCD = SL0JM410.XGPCD[SLWIDX01];
  PKNREC.SY1STNBR = SL0JM410.SY1STNBR[SLWIDX01];
  PKNREC.SY2CLRID = SL0JM410.SY2CLRID[SLWIDX01];
  PKNREC.XDMCD = SL0JM410.XDMCD[SLWIDX01];

  SL0JSCI();
                                   /* <----- read sycrec for validate*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (SLWREC.XCTCD == "CANA") /* if Canada, then SY2000 was called*/
      if (WSY2000.WSY2000-RETURN-CODE == 0) /* CANA row found*/
        SL0JM410.XUMCD[SLWIDX01] = "01";
      end
    else
      SL0JM410.XUMCD[SLWIDX01] = "01";
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSA7

// perform size translation
Function SL0JSAA()

   /* ************************************************************/
   /* *** obtain all valid size data for use during detail    ****/
   /* *** (size) row creatation                               ****/
   /* *** note: use compressed mode to detect blank size and  ****/
   /* ***       reduce loop searches                          ****/
   /* ************************************************************/

  SYPREC.SYPFC = "PC";
  SYPREC.SYPCMPSW = "N";
  SYPREC.XQACD = "**";

  SL0JSPI(); /* <=== get size xlations*/

  if (SYPREC.SYPRC == 0)
     /* ** next sentence ***/
  else
    if (SYPREC.SYPRC == +10)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SAAA";
      SLWREC.SLWMSGNO = 0057; /* <--- not on db msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == +9)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SAAB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "SAAC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSAA

// same key edits
Function SL0JSB1()

   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw. (in0iwsks)****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (SL0JM110.XOWCD != SL0JW01.XOWCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

  if (SL0JM110.XUMCD != SL0JW01.XUMCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

  if (SL0JM110.XPGCD != SL0JW01.XPGCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

  if (SL0JM110.XSLCD != SL0JW01.XSLCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

  if (SL0JM110.XEGCD != SL0JW01.XEGCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

  if (SL0JM110.PC2INSEG != SL0JW01.PC2INSEG)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

  if (SL0JM110.XQACD != SL0JW01.XQACD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

  if (SL0JM110.XDMCD != SL0JW01.XDMCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

  if (SL0JM110.SY2CLRID != SL0JW01.SY2CLRID)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

  if (SL0JM110.SY1STNBR != SL0JW01.SY1STNBR)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

  if (SL0JM110.XGPCD != SL0JW01.XGPCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

  if (SL0JM110.XWHCD != SL0JW01.XWHCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSB1

// same key edits
Function SL0JSB2()

   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw. (in0iwsks)****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (SL0JM210.SL5LOCTN != SL0JW02.SL5LOCTN)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

  if (SL0JM210.SL4ZONE != SL0JW02.SL4ZONE)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

  if (SL0JM210.XARCD != SL0JW02.XARCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

  if (SL0JM210.XWHCD != SL0JW02.XWHCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSB2

// same key edits
Function SL0JSB3()

   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw. (in0iwsks)****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (SL0JM310.XQACD != SL0JW03.XQACD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

  if (SL0JM310.XDMCD != SL0JW03.XDMCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

  if (SL0JM310.XGPCD != SL0JW03.XGPCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

  if (SL0JM310.SY2CLRID != SL0JW03.SY2CLRID)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

  if (SL0JM310.SY1STNBR != SL0JW03.SY1STNBR)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

  if (SL0JM310.XWHCD != SL0JW03.XWHCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSB3

// key field edits
Function SL0JSC1()

   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if corporate code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

   /* ***/
  if (SL0JM110.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] == "Y")
        XOWREC.XOWCD = SL0JM110.XOWCD;
        XOWREC.XWHCD = SL0JM110.XWHCD;
        if (XOWREC.XOWKEY in XOWTBL.XOWKEY)
          if (XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A")
            /* next sentence;*/
          else
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SC1A";
            SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
            set SL0JM110.XOWCD cursor, bold;
          end
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SC1B";
          SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
          set SL0JM110.XOWCD cursor, bold;
        end
      end
    end
  end
   /* ***/
  if (SL0JM110.XUMCD != "  ")
    if (SL0JM110.XUMCD in XUMTBL.XUMCD)
      if (XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC1C";
        SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
        set SL0JM110.XUMCD cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1D";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0JM110.XUMCD cursor, bold;
    end
  end
   /* ***/
  if (SL0JM110.XPGCD in XPGTBL.XPGCD)
    if (XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1E";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0JM110.XPGCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1F";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0JM110.XPGCD cursor, bold;
  end
   /* ***/
  if (SL0JM110.XSLCD in XSLTBL.XSLCD)
    if (XSLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1G";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0JM110.XSLCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1H";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0JM110.XSLCD cursor, bold;
  end
   /* ***/
  if (SL0JM110.XEGCD in XEGTBL.XEGCD)
    if (XEGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1I";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0JM110.XEGCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1J";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0JM110.XEGCD cursor, bold;
  end
   /* ***/
  set PC2REC empty; /* clear row storage area*/

  PC2REC.XGPCD = SL0JM110.XGPCD;
  PC2REC.PC2INSEG = SL0JM110.PC2INSEG;
  call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == +0)
     /* next sentence*/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1L";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0JM110.PC2INSEG cursor, bold;
  end
   /* ***/
  if (SL0JM110.XQACD in XQATBL.XQACD)
    if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1M";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0JM110.XQACD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1N";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0JM110.XQACD cursor, bold;
  end
   /* ***/
  if (SL0JM110.XDMCD in XDMTBL.XDMCD)
    if (XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      /* next sentence;*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1O";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0JM110.XDMCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1P";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0JM110.XDMCD cursor, bold;
  end
   /* ***/
  if (SL0JM110.XGPCD in XGPTBL.XGPCD)
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1Q";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0JM110.XGPCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1R";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0JM110.XGPCD cursor, bold;
  end
   /* ***/
  if (SL0JM110.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0JM110.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      SLWREC.XCTCD = XWHTBL.XCTCD[sysVar.arrayIndex]; /* CANA save country code*/
    else
      SL0JM110.XWHABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1S";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0JM110.XWHCD cursor, bold;
    end
  else
    SL0JM110.XWHABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1T";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0JM110.XWHCD cursor, bold;
  end
   /* ***/
   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSC1

// key field edits
Function SL0JSC2()

   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (SL0JM210.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SLWREC.XCTCD = XWHTBL.XCTCD[sysVar.arrayIndex]; /* CANA save country code*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2A";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0JM210.XWHCD cursor, bold;
    end
  else
     /* MOVE ' ' TO SL0JM210.XWHABRV;*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2B";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0JM210.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSC2

// key field edits
Function SL0JSC3()

   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (SL0JM310.XQACD in XQATBL.XQACD)
    if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC3A";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0JM310.XQACD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC3B";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0JM310.XQACD cursor, bold;
  end

  if (SL0JM310.XDMCD in XDMTBL.XDMCD)
    if (XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC3C";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0JM310.XDMCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC3D";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0JM310.XDMCD cursor, bold;
  end

  if (SL0JM310.XGPCD in XGPTBL.XGPCD)
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC3E";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0JM310.XGPCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC3F";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0JM310.XGPCD cursor, bold;
  end

  if (SL0JM310.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SLWREC.XCTCD = XWHTBL.XCTCD[sysVar.arrayIndex]; /* CANA save country code*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC3G";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0JM310.XWHCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC3H";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0JM310.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSC3

// field edits
Function SL0JSC4()

   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (SL0JM410.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SLWREC.XCTCD = XWHTBL.XCTCD[sysVar.arrayIndex]; /* CANA save country code*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC4C";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0JM410.XWHCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC4D";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0JM410.XWHCD cursor, bold;
  end

end // end SL0JSC4

// field edits
Function SL0JSC5()

   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (SL0JM510.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SLWREC.XCTCD = XWHTBL.XCTCD[sysVar.arrayIndex]; /* CANA save country code*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC5C";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0JM510.XWHCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC5D";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0JM510.XWHCD cursor, bold;
  end

end // end SL0JSC5

// inquiry:(style)color view 2:0
Function SL0JSCI()

   /* ************************************************************/
   /* *** select unique row/view: combined style & color view ****/
   /* *** using the std module:  IO1810                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -811 = duplicates found                           ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***     <0 = db/severe error (&-911)                    ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* ************************************************************/

  call "IO1810" ("S ", SQLCA, PKNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)

    /* CANADA 08/25/95*/

    if (SLWREC.XCTCD == "CANA")

      /* format ta1rec in case of bad return code from call to SY2000*/

      TA1REC.TA1PGMNM = "SL0J"; /* CANA program name*/
      TA1REC.TA1LOC = "SL0JSCI"; /* CANA sgrp name*/

      XSSL-CALL-SY2000(); /* CANA call SY2000 to get*/
                              /* product region record*/
      if (WSY2000.WSY2000-RETURN-CODE == 0  /* CANA row found*/
       || WSY2000.WSY2000-RETURN-CODE == 02 /* CANA row not found*/
       || WSY2000.WSY2000-RETURN-CODE == 98) /* CANA database busy*/
        /* these errors are handled differently per map so return to*/
        /* calling sgrp and handle errors*/
        return;
      else
        converseLib.validationFailed(0001); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1LOC = "CALL SY2000";
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program appl*/
        TA1REC.TA1PGMNM = "SL0JSCI"; /* Program number*/
        TA1REC.TA1MAP = SLWREC.XXXMAPNM; /* Map name*/
        TA1REC.TA1DBASE = "DPROD  "; /* Data base name*/
        TA1REC.TA1TBLVU = "VSYREG02"; /* Table view name*/
        TA1REC.TA1TBLKE = PKNREC.PKNKEY; /* Table key*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback();

                              /* Error diagnosis routine*/
        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

      end
    end
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -811)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "SL0JSCI ";
  TA1REC.TA1LOCAT[1] = "IO1810  ";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DPICK   ";
  TA1REC.TA1TBLVU = "VCOLOR02";
  TA1REC.TA1TBLKE = PKNREC.PKNKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSCI

// key relational edits
Function SL0JSD1()

   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSD1

// key relational edits
Function SL0JSD2()

   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if either the ship or pack & hold flags = 'y',      ****/
   /* *** do not allow any inquiries                          ****/
   /* ************************************************************/

  SLWREC.XWHCD = SL0JM210.XWHCD;
  SLWREC.SLWTBLCD = SL0JM210.XARCD;
  if (SLWREC.SLWTBLKY in XARTBL.XARKEY)
    if (XARTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XARTBL.XARSHPFL[sysVar.arrayIndex] == "Y"
       || XARTBL.XARPKHFL[sysVar.arrayIndex] == "Y")
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SD2A";
        SLWREC.SLWMSGNO = 0163; /* <--- Inq not allowed msg*/
        set SL0JM210.XWHCD bold;
        set SL0JM210.XARCD cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD2B";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0JM210.XWHCD bold;
      set SL0JM210.XARCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SCDC";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0JM210.XWHCD bold;
    set SL0JM210.XARCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSD2

// key relational edits
Function SL0JSD3()

   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSD3

// relational edits
Function SL0JSD5()

  SLWREC.SLWIDX01 = 6;
  while (SLWREC.SLWIDX01 >= 1)
    if (SL0JM510.SL5LOCTN[SLWIDX01] != "      ")
      if (SL0JM510.SL4ZONE[SLWIDX01] == "  ")
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SD5A";
        SLWREC.SLWMSGNO = 0009;
        set SL0JM510.SL4ZONE[SLWIDX01] cursor, bold;
      end
      if (SL0JM510.XARCD[SLWIDX01] == "  ")
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SD5B";
        SLWREC.SLWMSGNO = 0009;
        set SL0JM510.XARCD[SLWIDX01] cursor, bold;
      end
    end
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
    if (SL0JM510.XARCD[SLWIDX01] != "      ")
      if (SL0JM510.SL4ZONE[SLWIDX01] == "  ")
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SD5C";
        SLWREC.SLWMSGNO = 0009;
        set SL0JM510.SL4ZONE[SLWIDX01] cursor, bold;
      end
    end
    if (SL0JM510.SL4ZONE[SLWIDX01] != "      ")
      if (SL0JM510.XARCD[SLWIDX01] == "  ")
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SD5D";
        SLWREC.SLWMSGNO = 0009;
        set SL0JM510.XARCD[SLWIDX01] cursor, bold;
      end
    end
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSD5

// obtain table data
Function SL0JSE1()

   /* ************************************************************/
   /* *** make one time table accesses for auxillary and/or   ****/
   /* *** main data                                           ****/
   /* *** note: first time executions before beginning a loop ****/
   /* ***       might also be performed                       ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0JSE1 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  PKNREC.XGPCD = SL0JM110.XGPCD;
  PKNREC.SY1STNBR = SL0JM110.SY1STNBR;
  PKNREC.SY2CLRID = SL0JM110.SY2CLRID;
  PKNREC.XDMCD = SL0JM110.XDMCD;

  SL0JSCI(); /* <=== std prod loctn inquiry*/

  if (SQLCA.VAGen_SQLCODE == 0) /* <=== good return*/
    if (SLWREC.XCTCD == "CANA") /* if Canada, then SY2000 was called*/
      if (WSY2000.WSY2000-RETURN-CODE == 02) /* CANA row not found*/
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SE1A";
        SLWREC.SLWMSGNO = 0056; /* <--- not on db msg*/
        set SL0JM110.SY1STNBR cursor, bold;
        set SL0JM110.SY2CLRID bold;
        return;
      else
        if (WSY2000.WSY2000-RETURN-CODE == 98) /* CANA database busy*/
          SLWREC.SLWSKYSW = "N";
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SE1B";
          SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
          return;
        end
      end
    end
  end

  if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE1C";
    SLWREC.SLWMSGNO = 0056; /* <--- not on db msg*/
    set SL0JM110.SY1STNBR cursor, bold;
    set SL0JM110.SY2CLRID bold;
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE1D";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0)
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "SE1E";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    SL0JST1(); /* <=== clear scrn (empty)*/
    return;
  end

  SL0JM110.SY1SSTNM = PKNREC.SY1SSTNM;
  SL0JM110.SY2CLRAB = PKNREC.SY2CLRAB;
  if (SL0JM110.XUMCD == "  ")
    SL0JM110.XUMCD = "01";
  end
  if (PKNREC.SY2CEDT1 <= X2CREC.X2CCURDT)
    SL0JM110.XLCCD = PKNREC.XLCCD1;
  else
    if (PKNREC.SY2CEDT2 <= X2CREC.X2CCURDT)
      SL0JM110.XLCCD = PKNREC.XLCCD2;
    else
      if (PKNREC.SY2CEDT3 <= X2CREC.X2CCURDT)
        SL0JM110.XLCCD = PKNREC.XLCCD3;
      else
        if (PKNREC.SY2CEDT4 <= X2CREC.X2CCURDT)
          SL0JM110.XLCCD = PKNREC.XLCCD4;
        else
          SL0JM110.XLCCD = "  ";
        end
      end
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSE1

// obtain table data
Function SL0JSE2()

   /* ************************************************************/
   /* *** make one time table accesses for auxillary and/or   ****/
   /* *** main data                                           ****/
   /* *** note: first time executions before beginning a loop ****/
   /* ***       might also be performed                       ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0JSE2 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

   /* *** verify location data and obtain status ****/

  set SL5REC empty;
  SL5REC.XWHCD = SL0JM210.XWHCD;
  SL5REC.XARCD = SL0JM210.XARCD;
  SL5REC.SL4ZONE = SL0JM210.SL4ZONE;
  SL5REC.SL5LOCTN = SL0JM210.SL5LOCTN;

  XSSL5I0(); /* obtain location record*/

  if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE2A";
    SLWREC.SLWMSGNO = 0038; /* <--- not on db msg*/
    set SL0JM210.XARCD cursor, bold;
    set SL0JM210.SL4ZONE bold;
    set SL0JM210.SL5LOCTN bold;
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE2B";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -811) /* <=== for INQUIRY*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE2C";
    SLWREC.SLWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0)
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "SE2D";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    SL0JST2(); /* <=== clear scrn (empty)*/
    return;
  end

  SL0JM210.YLSCD = SL5REC.YLSCD;
  SL0JW02.YLSCD = SL5REC.YLSCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSE2

// obtain table data
Function SL0JSE3()

   /* ************************************************************/
   /* *** make one time table accesses for auxillary and/or   ****/
   /* *** main data                                           ****/
   /* *** note: first time executions before beginning a loop ****/
   /* ***       might also be performed                       ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0JSE3 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  PKNREC.XGPCD = SL0JM310.XGPCD;
  PKNREC.SY1STNBR = SL0JM310.SY1STNBR;
  PKNREC.SY2CLRID = SL0JM310.SY2CLRID;
  PKNREC.XDMCD = SL0JM310.XDMCD;

  SL0JSCI(); /* <=== std prod loctn inquiry*/

  if (SQLCA.VAGen_SQLCODE == 0) /* <=== good return*/
    if (SLWREC.XCTCD == "CANA") /* if Canada, then SY2000 was called*/
      if (WSY2000.WSY2000-RETURN-CODE == 02) /* CANA row not found*/
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SE3A";
        SLWREC.SLWMSGNO = 0056; /* <--- not on db msg*/
        set SL0JM310.SY1STNBR cursor, bold;
        set SL0JM310.SY2CLRID bold;
        return;
      else
        if (WSY2000.WSY2000-RETURN-CODE == 98) /* CANA database busy*/
          SLWREC.SLWSKYSW = "N";
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SE3B";
          SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
          return;
        end
      end
    end
  end

  if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE3C";
    SLWREC.SLWMSGNO = 0056; /* <--- not on db msg*/
    set SL0JM310.SY1STNBR cursor, bold;
    set SL0JM310.SY2CLRID bold;
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE3D";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0)
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "SE3E";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    SL0JST3(); /* <=== clear scrn (empty)*/
    return;
  end

  SL0JM310.SY1SSTNM = PKNREC.SY1SSTNM;
  SL0JM310.SY2CLRAB = PKNREC.SY2CLRAB;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSE3

// save current key value(s)
Function SL0JSF1()

   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  COMMAREA.XWHCD = SL0JM110.XWHCD;

  SL0JW01.XWHCD = SL0JM110.XWHCD;
  SL0JW01.XOWCD = SL0JM110.XOWCD;
  SL0JW01.XGPCD = SL0JM110.XGPCD;
  SL0JW01.SY1STNBR = SL0JM110.SY1STNBR;
  SL0JW01.SY1SSTNM = SL0JM110.SY1SSTNM;
  SL0JW01.SY2CLRID = SL0JM110.SY2CLRID;
  SL0JW01.SY2CLRAB = SL0JM110.SY2CLRAB;
  SL0JW01.XDMCD = SL0JM110.XDMCD;
  SL0JW01.XQACD = SL0JM110.XQACD;
  SL0JW01.PC2INSEG = SL0JM110.PC2INSEG;
  SL0JW01.XEGCD = SL0JM110.XEGCD;
  SL0JW01.XSLCD = SL0JM110.XSLCD;
  SL0JW01.XPGCD = SL0JM110.XPGCD;
  SL0JW01.XUMCD = SL0JM110.XUMCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSF1

// save current key value(s)
Function SL0JSF2()

   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  COMMAREA.XWHCD = SL0JM210.XWHCD;

  SL0JW02.XWHCD = SL0JM210.XWHCD;
  SL0JW02.XARCD = SL0JM210.XARCD;
  SL0JW02.SL4ZONE = SL0JM210.SL4ZONE;
  SL0JW02.SL5LOCTN = SL0JM210.SL5LOCTN;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSF2

// save current key value(s)
Function SL0JSF3()

   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  COMMAREA.XWHCD = SL0JM310.XWHCD;

  SL0JW03.XWHCD = SL0JM310.XWHCD;
  SL0JW03.XGPCD = SL0JM310.XGPCD;
  SL0JW03.SY1STNBR = SL0JM310.SY1STNBR;
  SL0JW03.SY2CLRID = SL0JM310.SY2CLRID;
  SL0JW03.XDMCD = SL0JM310.XDMCD;
  SL0JW03.XQACD = SL0JM310.XQACD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSF3

// setup map key fields
Function SL0JSG1()

   /* ************************************************************/
   /* *** since the 'special error switch' = 'y':             ****/
   /* *** use current ws values in the corresponding map flds ****/
   /* ************************************************************/

  SL0JM110.XWHCD = SL0JW01.XWHCD;
  SL0JM110.XWHABRV = SL0JW01.XWHABRV;
  SL0JM110.XOWCD = SL0JW01.XOWCD;
  SL0JM110.XGPCD = SL0JW01.XGPCD;
  SL0JM110.SY1STNBR = SL0JW01.SY1STNBR;
  SL0JM110.SY1SSTNM = SL0JW01.SY1SSTNM;
  SL0JM110.SY2CLRID = SL0JW01.SY2CLRID;
  SL0JM110.SY2CLRAB = SL0JW01.SY2CLRAB;
  SL0JM110.XDMCD = SL0JW01.XDMCD;
  SL0JM110.XQACD = SL0JW01.XQACD;
  SL0JM110.PC2INSEG = SL0JW01.PC2INSEG;
  SL0JM110.XEGCD = SL0JW01.XEGCD;
  SL0JM110.XSLCD = SL0JW01.XSLCD;
  SL0JM110.XPGCD = SL0JW01.XPGCD;
  SL0JM110.XUMCD = SL0JW01.XUMCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSG1

// setup map key fields
Function SL0JSG2()

   /* ************************************************************/
   /* *** since the 'special error switch' = 'y':             ****/
   /* *** use current ws values in the corresponding map flds ****/
   /* ************************************************************/

  SL0JM210.XWHCD = SL0JW02.XWHCD;
  SL0JM210.XARCD = SL0JW02.XARCD;
  SL0JM210.SL4ZONE = SL0JW02.SL4ZONE;
  SL0JM210.SL5LOCTN = SL0JW02.SL5LOCTN;
  SL0JM210.YLSCD = SL0JW02.YLSCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSG2

// setup map key fields
Function SL0JSG3()

   /* ************************************************************/
   /* *** since the 'special error switch' = 'y':             ****/
   /* *** use current ws values in the corresponding map flds ****/
   /* ************************************************************/

  SL0JM310.XWHCD = SL0JW03.XWHCD;
  SL0JM310.SY1STNBR = SL0JW03.SY1STNBR;
  SL0JM310.SY2CLRID = SL0JW03.SY2CLRID;
  SL0JM310.XGPCD = SL0JW03.XGPCD;
  SL0JM310.XDMCD = SL0JW03.XDMCD;
  SL0JM310.XQACD = SL0JW03.XQACD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSG3

// ENTER processing
Function SL0JSH0()

   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0JSA0(); /* <=== missing input edits*/

   /* ************************************************************/
   /* *** no missing fields:                                  ****/
   /* *** invalid selection detected in flow when             ****/
   /* *** transfer of control is attempted                    ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSH0

// ENTER processing
Function SL0JSH1()

   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0JSA1(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check the key fields for changes                    ****/
   /* *** note: save key will be blank & NOT = on first time  ****/
   /* *** note: IN0XWSKS=Y; if fields NOT changed (=same key) ****/
   /* ************************************************************/

  SL0JSB1(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "Y")
     /* ************************************************************/
     /* *** if same key fields & enter last used: setup error   ****/
     /* ************************************************************/
    if (SLWREC.SLWLASPF == "E")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SH1A";
      SLWREC.SLWMSGNO = 0005; /* <--- new input required msg*/
      return;
    end
     /* ************************************************************/
     /* *** since last pfkey was NOT ENTER & key is the same:   ****/
     /* ***   setup last pfkey = ENTER & make sure tsq is setup ****/
     /* ***   find the same subkey as on detail (& top of page) ****/
     /* ***   setup summary data lines for this page            ****/
     /* *** note: last pfkey can't be blank (first time thru)   ****/
     /* ***       re: same key checks will eq 'n'               ****/
     /* ************************************************************/
    SLWREC.SLWLASPF = "E";
    SL0JSU1(); /* <=== match detail's subkey*/
    if (SLWREC.SLWERRSW == "Y")
      SL0JST1(); /* <=== reset screen (empty)*/
      return;
    end
    SL0JSO1(); /* <=== setup left sum scrn*/
    return;
  end

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  SL0JSC1(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0JSD1(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    SL0JSF1(); /* <=== save current key value(s)*/
    SL0JST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses             ****/
   /* ************************************************************/

  SL0JSE1(); /* <=== obtain table data*/

  if (SLWREC.SLWERRSW == "Y")
    SL0JSF1(); /* <=== save current key value(s)*/
    SL0JST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s) & last pfkey as ENTER  ****/
   /* ************************************************************/

  SL0JSF1(); /* <=== save current key value(s)*/

  SLWREC.SLWLASPF = "E";

   /* ************************************************************/
   /* *** data present & changed: purge both tsqs             ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq(s)*/

  if (SLWREC.SLWERRSW == "Y")
    SL0JST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: setup summary tsq                        ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    SL0JM110.XMSLMSEL[SLWIDX01] = " ";
    set SL0JM110.XMSLMSEL[SLWIDX01] skip, invisible;
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

  SL0JSS1(); /* <=== setup all pages in tsq*/

  if (SLWREC.SLWERRSW == "Y")
    SL0JST1(); /* <=== reset screen (empty)*/
    return;
  end

  SL0JS1B(); /* <=== obtain first summary record*/

   /* ************************************************************/
   /* *** setup sum screen                                    ****/
   /* ************************************************************/

  SL0JSO1(); /* <=== setup left sum scrn*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSH1

// ENTER processing
Function SL0JSH2()

   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0JSA2(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check the key fields for changes                    ****/
   /* *** note: save key will be blank & NOT = on first time  ****/
   /* *** note: IN0XWSKS=Y; if fields NOT changed (=same key) ****/
   /* ************************************************************/

  SL0JSB2(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "Y")
     /* ************************************************************/
     /* *** if same key fields & enter last used: setup error   ****/
     /* ************************************************************/
    if (SLWREC.SLWLASPF == "E")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SH2A";
      SLWREC.SLWMSGNO = 0005; /* <--- new input required msg*/
      return;
    end
     /* ************************************************************/
     /* *** since last pfkey was NOT ENTER & key is the same:   ****/
     /* ***   setup last pfkey = ENTER & make sure tsq is setup ****/
     /* ***   find the same subkey as on detail (& top of page) ****/
     /* ***   setup summary data lines for this page            ****/
     /* *** note: last pfkey can't be blank (first time thru)   ****/
     /* ***       re: same key checks will eq 'n'               ****/
     /* ************************************************************/
    SLWREC.SLWLASPF = "E";
    SL0JSU2(); /* <=== match detail record*/
    if (SLWREC.SLWERRSW == "Y")
      SL0JST2(); /* <=== reset screen (empty)*/
      return;
    end
    SL0JSO2();
    return;
  end

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  SL0JSC2(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0JSD2(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    SL0JSF2(); /* <=== save current key value(s)*/
    SL0JST2(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses             ****/
   /* ************************************************************/

  SL0JSE2(); /* <=== obtain table data*/

  if (SLWREC.SLWERRSW == "Y")
    SL0JSF2(); /* <=== save current key value(s)*/
    SL0JST2(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s) & last pfkey as ENTER  ****/
   /* ************************************************************/

  SL0JSF2(); /* <=== save current key value(s)*/

  SLWREC.SLWLASPF = "E";

   /* ************************************************************/
   /* *** data present & changed: purge both tsqs             ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq(s)*/

  if (SLWREC.SLWERRSW == "Y")
    SL0JST2(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: setup summary tsq                        ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    SL0JM210.XMSLMSEL[SLWIDX01] = " ";
    set SL0JM210.XMSLMSEL[SLWIDX01] skip, invisible;
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

  SL0JSS2(); /* <=== setup all pages in tsq*/

  if (SLWREC.SLWERRSW == "Y")
    SL0JST2(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** setup sum screen                                    ****/
   /* ************************************************************/

  SL0JS2B(); /* perform initial read*/

  if (SLWREC.SLWERRSW == "Y")
    SL0JST2(); /* <=== reset screen (empty)*/
    return;
  end

  SL0JSO2(); /* <=== setup left sum scrn*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSH2

// ENTER processing
Function SL0JSH3()

   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0JSA3(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check the key fields for changes                    ****/
   /* *** note: save key will be blank & NOT = on first time  ****/
   /* *** note: IN0XWSKS=Y; if fields NOT changed (=same key) ****/
   /* ************************************************************/

  SL0JSB3(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "Y")
     /* ************************************************************/
     /* *** if same key fields check for selected line          ****/
     /* ************************************************************/
    SLWREC.SLWIDX01 = 1;
    while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
      if (SL0JM310.XMSLMSEL[SLWIDX01] != " ")
        SL0JWB3.SL0JWRC3 = SL0JWD0.SL0JWDTA[SLWIDX01];
        SLXREC.SLXFRMAP = "SL0JM310";
        SLXREC.XWHCD = SL0JM310.XWHCD;
        SLXREC.XGPCD = SL0JM310.XGPCD;
        SLXREC.SY1STNBR = SL0JM310.SY1STNBR;
        SLXREC.SY2CLRID = SL0JM310.SY2CLRID;
        SLXREC.XDMCD = SL0JM310.XDMCD;
        SLXREC.XQACD = SL0JM310.XQACD;
        SLXREC.XSDCD = SL0JWB3.PC2INSEG;
        SLXREC.XSLCD = SL0JWB3.XSLCD;
        SLXREC.XPGCD = SL0JWB3.XPGCD;
        SLXREC.XUMCD = SL0JWB3.XUMCD;
        SLXREC.XOWCD = SL0JWB3.XOWCD;
        SLWREC.SLWIDX01 = 99;
      else
        SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
      end
    end

    if (SLWREC.SLWIDX01 != 99)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SH3A";
      SLWREC.SLWMSGNO = 0051; /* <--- need selection*/
      return;
    else
      return;
    end
  end

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  SL0JSC3(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0JSD3(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    SL0JSF3(); /* <=== save current key value(s)*/
    SL0JST3(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses             ****/
   /* ************************************************************/

  SL0JSE3(); /* <=== obtain table data*/

  if (SLWREC.SLWERRSW == "Y")
    SL0JSF3(); /* <=== save current key value(s)*/
    SL0JST3(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s) & last pfkey as ENTER  ****/
   /* ************************************************************/

  SL0JSF3(); /* <=== save current key value(s)*/

   /* ************************************************************/
   /* *** data present & changed: purge both tsqs             ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq*/

  if (SLWREC.SLWERRSW == "Y")
    SL0JST3(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: setup summary tsq                        ****/
   /* ************************************************************/

  SL0JSS3(); /* <=== setup all pages in tsq*/

  if (SLWREC.SLWERRSW == "Y")
    SL0JST3(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** setup screen                                        ****/
   /* ************************************************************/

  TA5REC.TA5TSQIX = 1;
  TA5REC.TA5APPID = SLWREC.SLWDETQU;
  TA5REC.TA5FNCCD = "R";

  call "TA0050" (SL0JWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SH3B";
    SLWREC.SLWMSGNO = 0001;
    return;
  end

  SLWREC.SLWDETIX = TA5REC.TA5TSQIX;

  SL0JSO3(); /* <=== setup left sum scrn*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSH3

// ENTER processing
Function SL0JSH4()

   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;
  SL0JSA4(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  SL0JSC4(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** format jcl data and submit to call ta0p             ****/
   /* ************************************************************/

  SL0JS4A(); /* format jcl data and submit*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* *** move default values into map fields ****/

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= 5)
    SL0JM410.SY1STNBR[SLWIDX01] = "      ";
    SL0JM410.SY2CLRID[SLWIDX01] = "00 ";
    SL0JM410.XDMCD[SLWIDX01] = "00";
    SL0JM410.XQACD[SLWIDX01] = "01";
    SL0JM410.PC2INSEG[SLWIDX01] = "000";
    SL0JM410.XEGCD[SLWIDX01] = "000";
    SL0JM410.XSLCD[SLWIDX01] = "000";
    SL0JM410.XPGCD[SLWIDX01] = "00";
    /* ***** code changed by Grant Gilray 3/16/88 ******/
    /* MOVE '01' TO SL0JM410.XUMCD(SLWIDX01);*/
    SL0JM410.XUMCD[SLWIDX01] = "  ";
    /* ******** end of code changed on 3/16/88 *********/
    SL0JM410.XOWCD[SLWIDX01] = "00";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

  SL0JM410.SL0JMPID = TA6REC.XURDEST;

end // end SL0JSH4

// ENTER processing
Function SL0JSH5()

   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0JSA5(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  SL0JSC5(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** relational edits                                    ****/
   /* ************************************************************/

  SL0JSD5(); /* relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** format jcl data and submit jcl to call ta0p         ****/
   /* ************************************************************/

  SL0JS5A(); /* format jcl data and submit j*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= 6)
    SL0JM510.XARCD[SLWIDX01] = "  ";
    SL0JM510.SL4ZONE[SLWIDX01] = "  ";
    SL0JM510.SL5LOCTN[SLWIDX01] = "      ";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

  SL0JM510.SL0JMPID = TA6REC.XURDEST;

end // end SL0JSH5

// PF6 processing
Function SL0JSI1()

   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0JSA1(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check for changes to the key fields                 ****/
   /* *** note: if first time: save keys = blanks & are NOT = ****/
   /* *** note: IN0XWSKS = Y : same keys as last saved        ****/
   /* ************************************************************/

  SL0JSB1(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "Y")
     /* ************************************************************/
     /* *** if same key fields & last pfkey was PF6: error msg  ****/
     /* ************************************************************/
    if (SLWREC.SLWLASPF == "6")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SI1A";
      SLWREC.SLWMSGNO = 0005; /* <--- new input required msg*/
      return;
    end
     /* ************************************************************/
     /* *** since the last pfkey was NOT PF6 & key is the same: ****/
     /* ***   setup last pfkey = PF6 & make sure tsq is setup   ****/
     /* ***   find the same subkey as on summary (& top of page)****/
     /* ***   setup detail data lines for this page             ****/
     /* *** note: same key checks prevent last pfkey = blank    ****/
     /* ************************************************************/
    SLWREC.SLWLASPF = "6";
    SL0JSW1(); /* <=== match summary's subkey*/
    if (SLWREC.SLWERRSW == "Y")
      SL0JST1(); /* <=== reset screen (empty)*/
      return;
    end
    SL0JSP1(); /* <=== setup left det scrn*/
    return;
  end

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  SL0JSC1(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0JSD1(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    SL0JSF1(); /* <=== save current key value(s)*/
    SL0JST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses             ****/
   /* ************************************************************/

  SL0JSE1(); /* <=== obtain table data*/

  if (SLWREC.SLWERRSW == "Y")
    SL0JSF1(); /* <=== save current key value(s)*/
    SL0JST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s) & last pfkey as PF6    ****/
   /* ************************************************************/

  SL0JSF1(); /* <=== save current key value(s)*/

  SLWREC.SLWLASPF = "6";

   /* ************************************************************/
   /* *** data present & changed: purge tsq(s)                ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq(s)*/

  if (SLWREC.SLWERRSW == "Y")
    SL0JST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: setup detail tsq and first page          ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    SL0JM110.XMSLMSEL[SLWIDX01] = " ";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

  SL0JSS1(); /* <=== setup both tsqs*/

  if (SLWREC.SLWERRSW == "Y")
    SL0JST1(); /* <=== reset screen (empty)*/
    return;
  end

  SL0JS1D(); /* <=== obtain first detail record*/

   /* ************************************************************/
   /* *** setup det scrn depending on last right/left pfkey   ****/
   /* ************************************************************/

  SL0JSP1(); /* <=== setup left det scrn*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSI1

// PF6 processing
Function SL0JSI2()

   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0JSA2(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check for changes to the key fields                 ****/
   /* *** note: if first time: save keys = blanks & are NOT = ****/
   /* *** note: IN0XWSKS = Y : same keys as last saved        ****/
   /* ************************************************************/

  SL0JSB2(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "Y")
     /* ************************************************************/
     /* *** if same key fields & last pfkey was PF6: error msg  ****/
     /* ************************************************************/
    if (SLWREC.SLWLASPF == "6")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SI2A";
      SLWREC.SLWMSGNO = 0005; /* <--- new input required msg*/
      return;
    end
     /* ************************************************************/
     /* *** since the last pfkey was NOT PF6 & key is the same: ****/
     /* ***   setup last pfkey = PF6 & make sure tsq is setup   ****/
     /* ***   find the same subkey as on summary (& top of page)****/
     /* ***   setup detail data lines for this page             ****/
     /* *** note: same key checks prevent last pfkey = blank    ****/
     /* ************************************************************/
    SLWREC.SLWLASPF = "6";
    SL0JSW2(); /* <=== match summary key*/
    if (SLWREC.SLWERRSW == "Y")
      SL0JST2(); /* <=== reset screen (empty)*/
      return;
    end
    SL0JSP2(); /* <=== setup left det screen*/
    return;
  end

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  SL0JSC2(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0JSD2(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    SL0JSF2(); /* <=== save current key value(s)*/
    SL0JST2(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses             ****/
   /* ************************************************************/

  SL0JSE2(); /* <=== obtain table data*/

  if (SLWREC.SLWERRSW == "Y")
    SL0JSF2(); /* <=== save current key value(s)*/
    SL0JST2(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s) & last pfkey as PF6    ****/
   /* ************************************************************/

  SL0JSF2(); /* <=== save current key value(s)*/

  SLWREC.SLWLASPF = "6";

   /* ************************************************************/
   /* *** data present & changed: purge tsq(s)                ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq(s)*/

  if (SLWREC.SLWERRSW == "Y")
    SL0JST2(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: setup detail tsq and first page          ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    SL0JM210.XMSLMSEL[SLWIDX01] = " ";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

  SL0JSS2(); /* <=== setup both tsqs*/

  if (SLWREC.SLWERRSW == "Y")
    SL0JST2(); /* <=== reset screen (empty)*/
    return;
  end

  SL0JS2D(); /* obtain 1st detail record*/

   /* ************************************************************/
   /* *** setup det scrn                                      ****/
   /* ************************************************************/

  SL0JSP2(); /* <=== setup left det scrn*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSI2

// PF7 processing
Function SL0JSJ1()

   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: IN0XWSKS=N; if fields changed (keys different)****/
   /* ************************************************************/

  SL0JSA1(); /* <=== check for missing data*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0JSB1(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "N")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SJ1A";
    SLWREC.SLWMSGNO = 0006; /* <--- changes not allowed msg*/
    return;
  end

   /* ************************************************************/
   /* *** decrement the last relative record number           ****/
   /* *** and setup the new page depending on last PFkey      ****/
   /* *** note: last pfkey used can not be blank at this point****/
   /* ************************************************************/

  if (SLWREC.SLWLASPF == "E")
    if (SLWREC.SLWSUMIX == 1)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SJ1B";
      SLWREC.SLWMSGNO = 0007; /* <--- top of data*/
    else
      SLWREC.SLWSUMIX = SLWREC.SLWSUMIX - 1;
      TA5REC.TA5TSQIX = SLWREC.SLWSUMIX;
      TA5REC.TA5APPID = SLWREC.SLWSUMQU;
      TA5REC.TA5FNCCD = "R";
      call "TA0050" (SL0JWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
      if (TA5REC.TA5RTNCD != 0)
        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SL0JSJ1 ";
        TA1REC.TA1LOC = "TA0050 - TSQ PAGING ERROR";
        TA1REC.TA1MAP = "SL0JM111";
        TA1REC.TA1DBTBL = " ";
        TA1REC.TA1TBLKE = TA5REC.TA5DATA;
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SJ1C";
        SLWREC.SLWMSGNO = 0001;
        return;
      end
      SL0JSO1(); /* <=== setup left sum scrn*/
    end
  else
    if (SLWREC.SLWDETIX == 1)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SJ1D";
      SLWREC.SLWMSGNO = 0007; /* <--- top of data*/
    else
      SLWREC.SLWDETIX = SLWREC.SLWDETIX - 1;
      TA5REC.TA5TSQIX = SLWREC.SLWDETIX;
      TA5REC.TA5APPID = SLWREC.SLWDETQU;
      TA5REC.TA5FNCCD = "R";
      call "TA0050" (SL0JWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
      if (TA5REC.TA5RTNCD != 0)
        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SL0JSJ1 ";
        TA1REC.TA1LOC = "TA0050 - TSQ PAGING ERROR";
        TA1REC.TA1MAP = "SL0JM112";
        TA1REC.TA1DBTBL = " ";
        TA1REC.TA1TBLKE = TA5REC.TA5DATA;
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SJ1E";
        SLWREC.SLWMSGNO = 0001;
        return;
      end
      SL0JSP1(); /* <=== setup left det scrn*/
    end
  end

  if (SLWREC.SLWERRSW == "N")
    SLWREC.XXXLOCID = "SJ1F";
    SLWREC.SLWMSGNO = 0014;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0JSJ1

// PF7 processing
Function SL0JSJ2()

   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: IN0XWSKS=N; if fields changed (keys different)****/
   /* ************************************************************/

  SL0JSA2(); /* <=== missing input check*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0JSB2(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "N")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SJ2A";
    SLWREC.SLWMSGNO = 0006; /* <--- changes not allowed msg*/
    return;
  end

   /* ************************************************************/
   /* *** decrement the last relative record number           ****/
   /* *** and setup the new page depending on last PFkey      ****/
   /* *** note: last pfkey used can not be blank at this point****/
   /* ************************************************************/

  if (SLWREC.SLWLASPF == "E")
    if (SLWREC.SLWSUMIX == 1)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SJ2B";
      SLWREC.SLWMSGNO = 0007; /* <--- top of data*/
    else
      SLWREC.SLWSUMIX = SLWREC.SLWSUMIX - 1;
      TA5REC.TA5TSQIX = SLWREC.SLWSUMIX;
      TA5REC.TA5APPID = SLWREC.SLWSUMQU;
      TA5REC.TA5FNCCD = "R";
      call "TA0050" (SL0JWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
      if (TA5REC.TA5RTNCD != 0)
        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SL0JSJ2 ";
        TA1REC.TA1LOC = "TA0050 - TSQ PAGING ERROR";
        TA1REC.TA1MAP = "SL0JM211";
        TA1REC.TA1DBTBL = " ";
        TA1REC.TA1TBLKE = TA5REC.TA5DATA;
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SJ2C";
        SLWREC.SLWMSGNO = 0001;
        return;
      end
      SL0JSO2(); /* <=== setup left sum scrn*/
    end
  else
    if (SLWREC.SLWDETIX == 1)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SJ2D";
      SLWREC.SLWMSGNO = 0007; /* <--- top of data*/
    else
      SLWREC.SLWDETIX = SLWREC.SLWDETIX - 1;
      TA5REC.TA5TSQIX = SLWREC.SLWDETIX;
      TA5REC.TA5APPID = SLWREC.SLWDETQU;
      TA5REC.TA5FNCCD = "R";
      call "TA0050" (SL0JWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
      if (TA5REC.TA5RTNCD != 0)
        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SL0JSJ2 ";
        TA1REC.TA1LOC = "TA0050 - TSQ PAGING ERROR";
        TA1REC.TA1MAP = "SL0JM212";
        TA1REC.TA1DBTBL = " ";
        TA1REC.TA1TBLKE = TA5REC.TA5DATA;
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SJ2E";
        SLWREC.SLWMSGNO = 0001;
        return;
      end
      SL0JSP2(); /* <=== setup left det scrn*/
    end
  end

  if (SLWREC.SLWERRSW == "N")
    SLWREC.XXXLOCID = "SJ2F";
    SLWREC.SLWMSGNO = 0014;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0JSJ2

// PF7 processing
Function SL0JSJ3()

   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: IN0XWSKS=N; if fields changed (keys different)****/
   /* ************************************************************/

  SL0JSA3(); /* <=== missing input check*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0JSB3(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "N")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SJ3A";
    SLWREC.SLWMSGNO = 0006; /* <--- changes not allowed msg*/
    return;
  end

   /* ************************************************************/
   /* *** decrement the last relative record number           ****/
   /* *** and setup the new page depending on last PFkey      ****/
   /* *** note: last pfkey used can not be blank at this point****/
   /* ************************************************************/

  if (SLWREC.SLWDETIX == 1)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SJ3B";
    SLWREC.SLWMSGNO = 0007; /* <--- top of data*/
  else
    SLWREC.SLWDETIX = SLWREC.SLWDETIX - 1;
    TA5REC.TA5TSQIX = SLWREC.SLWDETIX;
    TA5REC.TA5APPID = SLWREC.SLWDETQU;
    TA5REC.TA5FNCCD = "R";
    call "TA0050" (SL0JWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
    if (TA5REC.TA5RTNCD != 0)
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SL0JSJ3 ";
      TA1REC.TA1LOC = "TA0050 - TSQ PAGING ERROR";
      TA1REC.TA1MAP = "SL0JM312";
      TA1REC.TA1DBTBL = " ";
      TA1REC.TA1TBLKE = TA5REC.TA5DATA;
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SJ3C";
      SLWREC.SLWMSGNO = 0001;
      return;
    end
    SL0JSO3(); /* <=== setup left sum scrn*/
  end

  if (SLWREC.SLWERRSW == "N")
    SLWREC.XXXLOCID = "SJ3D";
    SLWREC.SLWMSGNO = 0014;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0JSJ3

// PF8 processing
Function SL0JSK1()

   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: IN0XWSKS=N; if fields changed (keys different)****/
   /* ************************************************************/

  SL0JSA1(); /* <=== missing input check*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0JSB1(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "N")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SK1A";
    SLWREC.SLWMSGNO = 0006; /* <--- changes not allowed msg*/
    return;
  end

  if (SLWREC.SLWLASPF == "E")
    if (SLWREC.SLWSUMIX == SLWREC.SLWSMAXR)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SK1B";
      SLWREC.SLWMSGNO = 0008; /* <--- bottom of data*/
      return;
    else
      SLWREC.SLWSUMIX = SLWREC.SLWSUMIX + 1;
      TA5REC.TA5TSQIX = SLWREC.SLWSUMIX;
      TA5REC.TA5APPID = SLWREC.SLWSUMQU;
      TA5REC.TA5FNCCD = "R";
      call "TA0050" (SL0JWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
      if (TA5REC.TA5RTNCD != 0)
        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SL0JSK1 ";
        TA1REC.TA1LOC = "TA0050 - TSQ PAGING ERROR";
        TA1REC.TA1MAP = "SL0JM111";
        TA1REC.TA1DBTBL = " ";
        TA1REC.TA1TBLKE = TA5REC.TA5DATA;
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SK1C";
        SLWREC.SLWMSGNO = 0001;
        return;
      end
      SL0JSO1(); /* <=== setup left sum scrn*/
    end
  else
    if (SLWREC.SLWDETIX == SLWREC.SLWDMAXR)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SK1D";
      SLWREC.SLWMSGNO = 0008; /* <--- bottom of data*/
      return;
    else
      SLWREC.SLWDETIX = SLWREC.SLWDETIX + 1;
      TA5REC.TA5TSQIX = SLWREC.SLWDETIX;
      TA5REC.TA5APPID = SLWREC.SLWDETQU;
      TA5REC.TA5FNCCD = "R";
      call "TA0050" (SL0JWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
      if (TA5REC.TA5RTNCD != 0)
        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SL0JSK1 ";
        TA1REC.TA1LOC = "TA0050 - TSQ PAGING ERROR";
        TA1REC.TA1MAP = "SL0JM112";
        TA1REC.TA1DBTBL = " ";
        TA1REC.TA1TBLKE = TA5REC.TA5DATA;
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SK1E";
        SLWREC.SLWMSGNO = 0001;
        return;
      end
      SL0JSP1(); /* <=== setup left det scrn*/
    end
  end

  if (SLWREC.SLWERRSW == "N")
    SLWREC.XXXLOCID = "SK1F";
    SLWREC.SLWMSGNO = 0013; /* <--- page foreward msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSK1

// PF8 processing
Function SL0JSK2()

   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: IN0XWSKS=N; if fields changed (keys different)****/
   /* ************************************************************/

  SL0JSA2(); /* <=== missing input check*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0JSB2(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "N")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SK2A";
    SLWREC.SLWMSGNO = 0006; /* <--- changes not allowed msg*/
    return;
  end

  if (SLWREC.SLWLASPF == "E")
    if (SLWREC.SLWSUMIX == SLWREC.SLWSMAXR)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SK2B";
      SLWREC.SLWMSGNO = 0008; /* <--- bottom of data*/
      return;
    else
      SLWREC.SLWSUMIX = SLWREC.SLWSUMIX + 1;
      TA5REC.TA5TSQIX = SLWREC.SLWSUMIX;
      TA5REC.TA5APPID = SLWREC.SLWSUMQU;
      TA5REC.TA5FNCCD = "R";
      call "TA0050" (SL0JWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
      if (TA5REC.TA5RTNCD != 0)
        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SL0JSK2 ";
        TA1REC.TA1LOC = "TA0050 - TSQ PAGING ERROR";
        TA1REC.TA1MAP = "SL0JM211";
        TA1REC.TA1DBTBL = " ";
        TA1REC.TA1TBLKE = TA5REC.TA5DATA;
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SK2C";
        SLWREC.SLWMSGNO = 0001;
        return;
      end
      SL0JSO2(); /* <=== setup left sum scrn*/
    end
  else
    if (SLWREC.SLWDETIX == SLWREC.SLWDMAXR)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SK2D";
      SLWREC.SLWMSGNO = 0008; /* <--- bottom of data*/
      return;
    else
      SLWREC.SLWDETIX = SLWREC.SLWDETIX + 1;
      TA5REC.TA5TSQIX = SLWREC.SLWDETIX;
      TA5REC.TA5APPID = SLWREC.SLWDETQU;
      TA5REC.TA5FNCCD = "R";
      call "TA0050" (SL0JWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
      if (TA5REC.TA5RTNCD != 0)
        TA1REC.TA1TYPE = "APPL";
        TA1REC.TA1FUNC = "RETN";
        TA1REC.TA1PGMNM = "SL0JSK2 ";
        TA1REC.TA1LOC = "TA0050 - TSQ PAGING ERROR";
        TA1REC.TA1MAP = "SL0JM212";
        TA1REC.TA1DBTBL = " ";
        TA1REC.TA1TBLKE = TA5REC.TA5DATA;
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SK2E";
        SLWREC.SLWMSGNO = 0001;
        return;
      end
      SL0JSP2(); /* <=== setup left det scrn*/
    end
  end

  if (SLWREC.SLWERRSW == "N")
    SLWREC.XXXLOCID = "SK2F";
    SLWREC.SLWMSGNO = 0013; /* <--- page foreward msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0JSK2

// PF8 processing
Function SL0JSK3()

   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: IN0XWSKS=N; if fields changed (keys different)****/
   /* ************************************************************/

  SL0JSA3(); /* <=== missing input check*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0JSB3(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "N")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SK3A";
    SLWREC.SLWMSGNO = 0006; /* <--- changes not allowed msg*/
    return;
  end

   /* ************************************************************/
   /* *** decrement the last relative record number           ****/
   /* *** and setup the new page depending on last PFkey      ****/
   /* *** note: last pfkey used can not be blank at this point****/
   /* ************************************************************/

  if (SLWREC.SLWDETIX == SLWREC.SLWDMAXR)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SK3B";
    SLWREC.SLWMSGNO = 0008; /* <--- bottom of data*/
  else
    SLWREC.SLWDETIX = SLWREC.SLWDETIX + 1;
    TA5REC.TA5TSQIX = SLWREC.SLWDETIX;
    TA5REC.TA5APPID = SLWREC.SLWDETQU;
    TA5REC.TA5FNCCD = "R";
    call "TA0050" (SL0JWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
    if (TA5REC.TA5RTNCD != 0)
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "SL0JSK3 ";
      TA1REC.TA1LOC = "TA0050 - TSQ PAGING ERROR";
      TA1REC.TA1MAP = "SL0JM312";
      TA1REC.TA1DBTBL = " ";
      TA1REC.TA1TBLKE = TA5REC.TA5DATA;
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SK3C";
      SLWREC.SLWMSGNO = 0001;
      return;
    end
    SL0JSO3(); /* <=== setup left sum scrn*/
  end

  if (SLWREC.SLWERRSW == "N")
    SLWREC.XXXLOCID = "SK3D";
    SLWREC.SLWMSGNO = 0013;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0JSK3

// setup blank screen
Function SL0JSN1()

   /* ************************************************************/
   /* *** display a blank screen by:                          ****/
   /* *** displaying the left sum title  and                  ****/
   /* *** displaying a blank line                             ****/
   /* *** until the page is full                              ****/
   /* ************************************************************/

  SL0J125(); /* <=== disp left sum title*/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    SL0J129(); /* <=== disp blank line*/
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSN1

// setup blank screen
Function SL0JSN2()

   /* ************************************************************/
   /* *** display a blank screen by:                          ****/
   /* *** displaying the left sum title  and                  ****/
   /* *** displaying a blank line                             ****/
   /* *** until the page is full                              ****/
   /* ************************************************************/

  SL0J225(); /* <=== disp left sum title*/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    SL0J229(); /* <=== disp blank line*/
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSN2

// setup blank screen
Function SL0JSN3()

   /* ************************************************************/
   /* *** display a blank screen by:                          ****/
   /* *** displaying the left sum title  and                  ****/
   /* *** displaying a blank line                             ****/
   /* *** until the page is full                              ****/
   /* ************************************************************/

  SL0J325(); /* <=== disp left sum title*/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    SL0J329(); /* <=== disp blank line*/
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSN3

// setup left sum scrn
Function SL0JSO1()

   /* ************************************************************/
   /* *** setup the left side of the summary data screen by:  ****/
   /* *** displaying the left summary title  and              ****/
   /* *** performing the display of the left summary line     ****/
   /* *** until the page is full                              ****/
   /* ************************************************************/

  SL0J125(); /* <=== disp left sum title*/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    if (SL0JWS0.SL0JWRTY[SLWIDX01] == "S")
      set SL0JM110.XMSLMSEL[SLWIDX01] initialAttributes;
      /* *** format summary line ****/
      SL0JWB1.SL0JWSM1 = SL0JWS0.SL0JWDTA[SLWIDX01];
      SL0J121(); /* <=== disp left sum line*/
    else
      set SL0JM110.XMSLMSEL[SLWIDX01] skip, invisible;
      SL0J129(); /* <=== disp blank line*/
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if error: display the cleared screen                ****/
   /* ************************************************************/

  if (SLWREC.SLWERRSW == "Y")
    SL0JST1(); /* <=== reset screen (empty)*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSO1

// setup left sum scrn
Function SL0JSO2()

   /* ************************************************************/
   /* *** setup the left side of the summary data screen by:  ****/
   /* *** displaying the left summary title  and              ****/
   /* *** performing the display of the left summary line     ****/
   /* *** until the page is full                              ****/
   /* ************************************************************/

  SL0J225(); /* <=== disp left sum title*/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    if (SL0JWS0.SL0JWRTY[SLWIDX01] == "S")
      set SL0JM210.XMSLMSEL[SLWIDX01] initialAttributes;
      /* *** format summary line ****/
      SL0JWB2.SL0JWSM2 = SL0JWS0.SL0JWDTA[SLWIDX01];
      SL0J221(); /* <=== disp left sum line*/
    else
      set SL0JM110.XMSLMSEL[SLWIDX01] skip, invisible;
      SL0J229(); /* <=== disp blank line*/
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if error: display the cleared screen                ****/
   /* ************************************************************/

  if (SLWREC.SLWERRSW == "Y")
    SL0JST2(); /* <=== reset screen (empty)*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSO2

// setup detail screen
Function SL0JSO3()

   /* ************************************************************/
   /* *** get first record from tsq and display the data      ****/
   /* ************************************************************/

  SL0J325(); /* <=== disp title*/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    if (SL0JWD0.SL0JWRTY[SLWIDX01] == "D")
      set SL0JM310.XMSLMSEL[SLWIDX01] initialAttributes;
      /* *** format detail line ****/
      SL0JWB3.SL0JWRC3 = SL0JWD0.SL0JWDTA[SLWIDX01];
      SL0J321(); /* <=== disp det line*/
    else
      if (SL0JWD0.SL0JWRTY[SLWIDX01] == "B")
        set SL0JM310.XMSLMSEL[SLWIDX01] initialAttributes;
        SL0J329(); /* display blank line*/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SO3A";
        SLWREC.SLWMSGNO = 0001;
        return;
      end
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if error: display the cleared screen                ****/
   /* ************************************************************/

  if (SLWREC.SLWERRSW == "Y")
    SL0JST3(); /* <=== reset screen (empty)*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSO3

// setup left det scrn
Function SL0JSP1()

  SL0J126(); /* <=== disp left det title*/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    if (SL0JWD0.SL0JWRTY[SLWIDX01] == "S")
      set SL0JM110.XMSLMSEL[SLWIDX01] initialAttributes;
      SL0JWB1.SL0JWSM1 = SL0JWD0.SL0JWDTA[SLWIDX01];
      SL0J121(); /* <=== disp left sum line*/
    else
      if (SL0JWD0.SL0JWRTY[SLWIDX01] == "D")
        set SL0JM110.XMSLMSEL[SLWIDX01] skip, invisible;
        SL0JWB1.SL0JWDT1[1] = SL0JWD0.SL0JWDTA[SLWIDX01];
        SL0J122(); /* <=== disp left det line*/
      else
        if (SL0JWD0.SL0JWRTY[SLWIDX01] == "B")
          set SL0JM110.XMSLMSEL[SLWIDX01] skip, invisible;
          SL0J129(); /* <=== disp blank line*/
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SP1A";
          SLWREC.SLWMSGNO = 0001;
        end
      end
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if error: display the cleared screen                ****/
   /* ************************************************************/

  if (SLWREC.SLWERRSW == "Y")
    SL0JST1(); /* <=== reset screen (empty)*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSP1

// setup left det scrn
Function SL0JSP2()

  SL0J225(); /* <=== disp left det title*/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    if (SL0JWD0.SL0JWRTY[SLWIDX01] == "S")
      set SL0JM210.XMSLMSEL[SLWIDX01] initialAttributes;
      SL0JWB2.SL0JWSM2 = SL0JWD0.SL0JWDTA[SLWIDX01];
      SL0J221(); /* <=== disp left sum line*/
    else
      if (SL0JWD0.SL0JWRTY[SLWIDX01] == "D")
        set SL0JM210.XMSLMSEL[SLWIDX01] skip, invisible;
        SL0JWB2.SL0JWDT2[1] = SL0JWD0.SL0JWDTA[SLWIDX01];
        SL0J222(); /* <=== disp left det line*/
      else
        if (SL0JWD0.SL0JWRTY[SLWIDX01] == "B")
          set SL0JM210.XMSLMSEL[SLWIDX01] skip, invisible;
          SL0J229(); /* <=== disp blank line*/
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SP2A";
          SLWREC.SLWMSGNO = 0001;
        end
      end
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if error: display the cleared screen                ****/
   /* ************************************************************/

  if (SLWREC.SLWERRSW == "Y")
    SL0JST2(); /* <=== reset screen (empty)*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0JSP2

// inquiry : sz xlate : 0
Function SL0JSPI()

   /* ************************************************************/
   /* *** obtain the desired size description/size id (no.)   ****/
   /* *** using the std module:  SY1190                       ****/
   /* *** code the following before this is executed:         ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* ***   note: or setup during init. & use a comment       ****/
   /* ***   SYPREC.SYPFC:   PC = all valid sizes              ****/
   /* ***                   IE = int. sz id to desc.          ****/
   /* ***                   EI = desc. to int. sz id          ****/
   /* ***   SYPREC.SYPCMPSW: Y = compressed (first blank or   ****/
   /* ***                        zero is end of data)         ****/
   /* ***                    N = not compressed (positional)  ****/
   /* *** code the action for the following return codes:     ****/
   /* *** note: check the SYPREC.SYPRC (NOT sqlcode)          ****/
   /* ***      0 = successful                                 ****/
   /* ***      9 = deadlock                                   ****/
   /* ***     10 = not found                                  ****/
   /* ***  other = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** call sy1190                                         ****/
   /* *** note: func & compress sw setup prior to this sgrp   ****/
   /* ************************************************************/

  call "SY1190" (SQLCA, SYPREC) {isNoRefresh = yes, isExternal = yes};

  if (SYPREC.SYPRC == 0)
    return;
  end

  if (SYPREC.SYPRC == 9)
    return;
  end

  if (SYPREC.SYPRC == 10)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "SL0JSPI ";
  TA1REC.TA1LOCAT[1] = "SY1190  ";
  TA1REC.TA1LOCAT[3] = SYPREC.SYPRCX;
  TA1REC.TA1LOCAT[4] = "SZ XLATE";
  TA1REC.TA1DBASE = "MULTIPLE";
  TA1REC.TA1TBLVU = "DB VIEWS";
  TA1REC.TA1TBLKE = SYPREC.SYPKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSPI

// setup sum tsq
Function SL0JSS1()

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0JSS1 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

   /* *** obtain valid size descriptions ****/

  set SYPREC empty;
  SYPREC.XGPCD = SL0JM110.XGPCD;
  SYPREC.SY1STNBR = SL0JM110.SY1STNBR;
  SYPREC.SY2CLRID = SL0JM110.SY2CLRID;
  SYPREC.XDMCD = SL0JM110.XDMCD;
  SYPREC.XQACD = SL0JM110.XQACD;

  SL0JSAA(); /* perform size translation call*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* *************** format prod/loc rec ************************/

  set SL6REC empty;
  SL6REC.XWHCD = SL0JM110.XWHCD;
  SL6REC.XGPCD = SL0JM110.XGPCD;
  SL6REC.SY1STNBR = SL0JM110.SY1STNBR;
  SL6REC.SY2CLRID = SL0JM110.SY2CLRID;
  SL6REC.XDMCD = SL0JM110.XDMCD;
  SL6REC.XQACD = SL0JM110.XQACD;
  SL6REC.XOWCD = SL0JM110.XOWCD;
  SL6REC.PC2INSEG = SL0JM110.PC2INSEG;
  SL6REC.XEGCD = SL0JM110.XEGCD;
  SL6REC.XPGCD = SL0JM110.XPGCD;
  SL6REC.XUMCD = SL0JM110.XUMCD;
  SL6REC.XSLCD = SL0JM110.XSLCD;

  XSSL6S6(); /* select set of prod/loc recs*/

  if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SS1A";
    SLWREC.SLWMSGNO = 0075; /* <--- not on db msg*/
    set SL0JM110.SY1STNBR cursor, bold;
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SS1B";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0)
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "SS1C";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    SL0JST1(); /* <=== clear scrn (empty)*/
    return;
  end

   /* *** initialize fields for loop processing ****/

  SLWREC.SLWIDX01 = 0; /* buffer area index*/
  SLWREC.SLWIDX02 = 1; /* detail area index*/
  SLWREC.SLWIDX03 = 1; /* summary area index*/
  SLWREC.SLWIDX04 = SLWREC.SLWLINPP; /* # of available lines*/
  SL0JWB1.SL0JWSNT = 0; /* summary net quantity*/
  SL0JWB1.SL0JWSPR = 0; /* summary pick reserve qty*/
  SL0JWB1.SL0JWSSA = 0; /* summary setaside qty*/
  SL0JWB1.SL0JWSOH = 0; /* summary on hand qty*/
  SL0JW01.SL0JWDPA = 1;
  SL0JW01.SL0JWSPA = 1;

  SL0JS1F(); /* format first detail record in buffer area ****/

   /* *** save location data ****/

  SL0JW01.XARCD = SL6REC.XARCD;
  SL0JW01.SL4ZONE = SL6REC.SL4ZONE;
  SL0JW01.SL5LOCTN = SL6REC.SL5LOCTN;
  SL0JW01.SL2PALET = SL6REC.SL2PALET;
  SL0JW01.SL2CASE = SL6REC.SL2CASE;
  SL0JW01.SY1UNPCS = SL6REC.SY1UNPCS;

  XSSL6F6(); /* select next record*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* *** process each prod/loc record and build tsqs ****/

  while (SQLCA.VAGen_SQLCODE == +0)
    if (SL6REC.XARCD == SL0JW01.XARCD
     && SL6REC.SL4ZONE == SL0JW01.SL4ZONE
     && SL6REC.SL5LOCTN == SL0JW01.SL5LOCTN
     && SL6REC.SL2PALET == SL0JW01.SL2PALET
     && SL6REC.SL2CASE == SL0JW01.SL2CASE
     && SL6REC.SY1UNPCS == SL0JW01.SY1UNPCS)

      if (SL6REC.SY5SZID == SL0JW01.SL0JWSZ1) /* if same size*/
        SL0JS1I(); /* add to detail in buffer area*/
      else
        SL0JS1F(); /* format detail in buffer area*/
      end

    else

      SL0JS1A(); /* location break summary processing*/
      if (SLWREC.SLWERRSW == "Y")
        return;
      end

      SL0JS1E(); /* location break detail processing*/
      if (SLWREC.SLWERRSW == "Y")
        return;
      end

      SLWREC.SLWIDX01 = 0; /* reset buffer area index*/

      /* *** reset summary quantity areas for next group*/
      SL0JWB1.SL0JWSNT = 0;
      SL0JWB1.SL0JWSPR = 0;
      SL0JWB1.SL0JWSSA = 0;
      SL0JWB1.SL0JWSOH = 0;

      SL0JS1F(); /* format detail in buffer area*/

    end

    XSSL6F6(); /* select next record*/

    if (SLWREC.SLWERRSW == "Y")
      return;
    end

  end

  if (SQLCA.VAGen_SQLCODE == +100)
    SL0JS1G(); /* last group summary processing*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end

    SL0JS1H(); /* last group detail processing*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0JSS1

// setup sum tsq
Function SL0JSS2()

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0JSS2 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

   /* *************** format prod/loc rec ************************/

  set SL6REC empty;
  SL6REC.XWHCD = SL0JM210.XWHCD;
  SL6REC.XARCD = SL0JM210.XARCD;
  SL6REC.SL4ZONE = SL0JM210.SL4ZONE;
  SL6REC.SL5LOCTN = SL0JM210.SL5LOCTN;
  SL6REC.SL2PALET = "*";
  SL6REC.SL2CASE = "*";

  XSSL6S4(); /* select set of prod/loc recs*/

  if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SS2A";
    SLWREC.SLWMSGNO = 0078; /* <--- not on db msg*/
    set SL0JM210.XARCD cursor, bold;
    set SL0JM210.SL4ZONE bold;
    set SL0JM210.SL5LOCTN bold;
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SS2B";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0) /* <=== for any initial db access*/
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "SS2C";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    SL0JST2(); /* <=== clear scrn (empty)*/
    return;
  end

   /* *** obtain valid size descriptions ****/

  SYPREC.XGPCD = SL6REC.XGPCD;
  SYPREC.SY1STNBR = SL6REC.SY1STNBR;
  SYPREC.SY2CLRID = SL6REC.SY2CLRID;
  SYPREC.XDMCD = SL6REC.XDMCD;
  SYPREC.XQACD = SL6REC.XQACD;

  SL0JSAA(); /* perform size translation call*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* *** initialize fields for loop processing ****/

  SLWREC.SLWIDX01 = 0; /* buffer area index*/
  SLWREC.SLWIDX02 = 1; /* detail area index*/
  SLWREC.SLWIDX03 = 1; /* summary area index*/
  SLWREC.SLWIDX04 = SLWREC.SLWLINPP; /* # of available lines*/
  SL0JWB2.SL0JWSPR = 0; /* summary pick reserve qty*/
  SL0JWB2.SL0JWSSA = 0; /* summary setaside qty*/
  SL0JWB2.SL0JWSOH = 0; /* summary on hand qty*/
  SL0JW02.SL0JWDPA = 1;
  SL0JW02.SL0JWSPA = 1;

   /* *** save product data ****/

  SL0JW02.XGPCD = SL6REC.XGPCD;
  SL0JW02.SY1STNBR = SL6REC.SY1STNBR;
  SL0JW02.SY2CLRID = SL6REC.SY2CLRID;
  SL0JW02.XDMCD = SL6REC.XDMCD;
  SL0JW02.XQACD = SL6REC.XQACD;
  SL0JW02.PC2INSEG = SL6REC.PC2INSEG;
  SL0JW02.XEGCD = SL6REC.XEGCD;
  SL0JW02.XSLCD = SL6REC.XSLCD;
  SL0JW02.XPGCD = SL6REC.XPGCD;
  SL0JW02.XUMCD = SL6REC.XUMCD;
  SL0JW02.XOWCD = SL6REC.XOWCD;
  SL0JW02.SL2PALET = SL6REC.SL2PALET;
  SL0JW02.SL2CASE = SL6REC.SL2CASE;
  SL0JW02.SL0JWSZ2 = 0;

   /* *** decide whether this is a case warehouse ****/

  if (SL6REC.SL2CASE == "        ")
    SL0JW02.SL0JWCPS = "P";
  else
    SL0JW02.SL0JWCPS = "C";
  end

  SL0JS2F(); /* format first detail record in buffer area ****/

  XSSL6F4(); /* select next record*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* *** process each prod/loc record and build tsqs ****/

  while (SQLCA.VAGen_SQLCODE == +0)
    if (SL6REC.XGPCD == SL0JW02.XGPCD
     && SL6REC.SY1STNBR == SL0JW02.SY1STNBR
     && SL6REC.SY2CLRID == SL0JW02.SY2CLRID
     && SL6REC.XDMCD == SL0JW02.XDMCD
     && SL6REC.XQACD == SL0JW02.XQACD
     && SL6REC.PC2INSEG == SL0JW02.PC2INSEG
     && SL6REC.XEGCD == SL0JW02.XEGCD
     && SL6REC.XSLCD == SL0JW02.XSLCD
     && SL6REC.XPGCD == SL0JW02.XPGCD
     && SL6REC.XUMCD == SL0JW02.XUMCD
     && SL6REC.XOWCD == SL0JW02.XOWCD
     && SL6REC.SL2PALET == SL0JW02.SL2PALET
     && SL6REC.SL2CASE == SL0JW02.SL2CASE)

      SL0JS2F(); /* format detail in buffer area*/

    else
       /* *** obtain valid size descriptions ****/

      SYPREC.XGPCD = SL6REC.XGPCD;
      SYPREC.SY1STNBR = SL6REC.SY1STNBR;
      SYPREC.SY2CLRID = SL6REC.SY2CLRID;
      SYPREC.XDMCD = SL6REC.XDMCD;
      SYPREC.XQACD = SL6REC.XQACD;

      SL0JSAA(); /* perform size translation call*/

      SL0JS2A(); /* product break summary processing*/
      if (SLWREC.SLWERRSW == "Y")
        return;
      end

      SL0JS2E(); /* product break detail processing*/
      if (SLWREC.SLWERRSW == "Y")
        return;
      end

      SLWREC.SLWIDX01 = 0; /* reset buffer area index*/
      SL0JW02.SL0JWSZ2 = 0; /* reset size index to zero*/

      /* *** reset summary quantiity areas for next group*/
      SL0JWB2.SL0JWSPR = 0;
      SL0JWB2.SL0JWSSA = 0;
      SL0JWB2.SL0JWSOH = 0;

      SL0JS2F(); /* format detail in buffer area*/

    end

    XSSL6F4(); /* select next record*/

    if (SLWREC.SLWERRSW == "Y")
      return;
    end

  end

  if (SQLCA.VAGen_SQLCODE == +100)
    SL0JS2G(); /* last group summary processing*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end

    SL0JS2H(); /* last group detail processing*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0JSS2

// setup sum tsq
Function SL0JSS3()

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0JSS3 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

   /* *************** format prod/loc rec ************************/

  set SL6REC empty;
  SL6REC.XWHCD = SL0JM310.XWHCD;
  SL6REC.XGPCD = SL0JM310.XGPCD;
  SL6REC.SY1STNBR = SL0JM310.SY1STNBR;
  SL6REC.SY2CLRID = SL0JM310.SY2CLRID;
  SL6REC.XDMCD = SL0JM310.XDMCD;
  SL6REC.XQACD = SL0JM310.XQACD;
  SL6REC.XOWCD = "*";
  SL6REC.PC2INSEG = "*";
  SL6REC.XEGCD = "*";
  SL6REC.XPGCD = "*";
  SL6REC.XUMCD = "*";
  SL6REC.XSLCD = "*";

  XSSL6S2(); /* select set of prod/loc recs*/

  if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SS3A";
    SLWREC.SLWMSGNO = 0075; /* <--- not on db msg*/
    set SL0JM310.SY1STNBR cursor, bold;
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SS3B";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0)
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "SS3C";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    SL0JST3(); /* <=== clear scrn (empty)*/
    return;
  end

   /* *** initialize fields for loop processing ****/

  SLWREC.SLWIDX02 = 1; /* detail area index*/

   /* *** format first detail record in buffer area ****/

  SL0JWB3.PC2INSEG = SL6REC.PC2INSEG;
  SL0JWB3.XEGCD = SL6REC.XEGCD;
  SL0JWB3.XSLCD = SL6REC.XSLCD;
  SL0JWB3.XPGCD = SL6REC.XPGCD;
  SL0JWB3.XUMCD = SL6REC.XUMCD;
  SL0JWB3.XOWCD = SL6REC.XOWCD;

   /* *** prepare compare area ****/

  SL0JW03.PC2INSEG = SL6REC.PC2INSEG;
  SL0JW03.XEGCD = SL6REC.XEGCD;
  SL0JW03.XSLCD = SL6REC.XSLCD;
  SL0JW03.XPGCD = SL6REC.XPGCD;
  SL0JW03.XUMCD = SL6REC.XUMCD;
  SL0JW03.XOWCD = SL6REC.XOWCD;

  SL0JWD0.SL0JWRTY[SLWIDX02] = "D";
  SL0JWD0.SL0JWDTA[SLWIDX02] = SL0JWB3.SL0JWRC3;
  SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;

  XSSL6F2(); /* select next record*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* *** process each prod/loc record and build tsqs ****/

  while (SQLCA.VAGen_SQLCODE == +0)

    if (SL6REC.PC2INSEG != SL0JW03.PC2INSEG
     || SL6REC.XEGCD != SL0JW03.XEGCD
     || SL6REC.XSLCD != SL0JW03.XSLCD
     || SL6REC.XPGCD != SL0JW03.XPGCD
     || SL6REC.XUMCD != SL0JW03.XUMCD
     || SL6REC.XOWCD != SL0JW03.XOWCD)

      SL0JS3F(); /* format detail*/

      /* *** prepare compare area ****/

      SL0JW03.PC2INSEG = SL6REC.PC2INSEG;
      SL0JW03.XEGCD = SL6REC.XEGCD;
      SL0JW03.XSLCD = SL6REC.XSLCD;
      SL0JW03.XPGCD = SL6REC.XPGCD;
      SL0JW03.XUMCD = SL6REC.XUMCD;
      SL0JW03.XOWCD = SL6REC.XOWCD;

    end

    XSSL6F2(); /* select next record*/

    if (SLWREC.SLWERRSW == "Y")
      return;
    end

  end

  if (SQLCA.VAGen_SQLCODE == +100)

    SL0JS3H(); /* final record processing*/

  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSS3

// reset screen (empty)
Function SL0JST1()

   /* ************************************************************/
   /* *** "empty" map =  fld values only                      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0JM110 empty; /* resets entire screen*/

  SL0JSG1(); /* <=== setup map key fields*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0JM110.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0JM110.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0JM110.XXXTITLE = SLWREC.XXXTITLE;
  SL0JM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set SL0JW01 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** purge any existing storage in case of 'left overs'  ****/
   /* *** note: not found is acceptable return code           ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq(s)*/

   /* ************************************************************/
   /* *** setup the floating map lines for a blank map        ****/
   /* ************************************************************/

  SL0JSN1(); /* <=== setup blank screen*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JST1

// reset screen (empty)
Function SL0JST2()

   /* ************************************************************/
   /* *** "empty" map =  fld values only                      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0JM210 empty; /* resets entire screen*/

  SL0JSG2(); /* <=== setup map key fields*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0JM210.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0JM210.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0JM210.XXXTITLE = SLWREC.XXXTITLE;
  SL0JM210.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set SL0JW02 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** purge any existing storage in case of 'left overs'  ****/
   /* *** note: not found is acceptable return code           ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq(s)*/

   /* ************************************************************/
   /* *** setup the floating map lines for a blank map        ****/
   /* ************************************************************/

  SL0JSN2(); /* <=== setup blank screen*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JST2

// reset screen (empty)
Function SL0JST3()

   /* ************************************************************/
   /* *** "empty" map =  fld values only                      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0JM310 empty; /* resets entire screen*/

  SL0JSG3(); /* <=== setup map key fields*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0JM310.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0JM310.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0JM310.XXXTITLE = SLWREC.XXXTITLE;
  SL0JM310.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set SL0JW03 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** purge any existing storage in case of 'left overs'  ****/
   /* *** note: not found is acceptable return code           ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq(s)*/

   /* ************************************************************/
   /* *** setup the floating map lines for a blank map        ****/
   /* ************************************************************/

  SL0JSN3(); /* <=== setup blank screen*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JST3

// match det's subkey
Function SL0JSU1()

   /* *******************************************************/
   /* *** obtain summary page number from page number on ****/
   /* *** detail record and then perform call to get the ****/
   /* *** summary record.                                ****/
   /* *******************************************************/

  SLWREC.SLWIDX01 = SLWREC.SLWLINPP;
  SL0JW01.SL0JWSE1 = 1;

   /* *** if selection was made on screen use it,else ****/
   /* *** use first summary line on detail page.      ****/

  while (SLWIDX01 >= 1)
    if (SL0JM110.XMSLMSEL[SLWIDX01] != " ")
      SL0JW01.SL0JWSE1 = SLWREC.SLWIDX01;
    end
    SL0JM110.XMSLMSEL[SLWIDX01] = " ";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end

  TA5REC.TA5TSQIX = SL0JWD0.SL0JWSPG[SL0JWSE1];
  TA5REC.TA5APPID = SLWREC.SLWSUMQU;
  TA5REC.TA5FNCCD = "R";

  call "TA0050" (SL0JWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SU1A";
    SLWREC.SLWMSGNO = 0001;
    return;
  end

  SLWREC.SLWSUMIX = TA5REC.TA5TSQIX;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSU1

// match det's subkey
Function SL0JSU2()

   /* *******************************************************/
   /* *** obtain summary page number from page number on ****/
   /* *** detail record and then perform call to get the ****/
   /* *** summary record.                                ****/
   /* *******************************************************/

  SLWREC.SLWIDX01 = SLWREC.SLWLINPP;
  SL0JW02.SL0JWSE2 = 1;

   /* *** if selection was made on screen use it,else ****/
   /* *** use first summary line on detail page.      ****/

  while (SLWIDX01 >= 1)
    if (SL0JM210.XMSLMSEL[SLWIDX01] != " ")
      SL0JW02.SL0JWSE2 = SLWREC.SLWIDX01;
    end
    SL0JM210.XMSLMSEL[SLWIDX01] = " ";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end

  TA5REC.TA5TSQIX = SL0JWD0.SL0JWSPG[SL0JWSE2];
  TA5REC.TA5APPID = SLWREC.SLWSUMQU;
  TA5REC.TA5FNCCD = "R";

  call "TA0050" (SL0JWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SU2A";
    SLWREC.SLWMSGNO = 0001;
    return;
  end

  SLWREC.SLWSUMIX = TA5REC.TA5TSQIX;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSU2

// match sum's subkey
Function SL0JSW1()

   /* ********************************************************/
   /* *** obtain detail page number from page number on   ****/
   /* *** summary record and then perform call to get the ****/
   /* *** detail record.                                  ****/
   /* ********************************************************/

  SLWREC.SLWIDX01 = SLWREC.SLWLINPP;
  SL0JW01.SL0JWSE1 = 1;

   /* *** if selection was made on screen use it,else ****/
   /* *** use first summary line on summary page.     ****/

  while (SLWIDX01 >= 1)
    if (SL0JM110.XMSLMSEL[SLWIDX01] != " ")
      SL0JW01.SL0JWSE1 = SLWREC.SLWIDX01;
    end
    SL0JM110.XMSLMSEL[SLWIDX01] = " ";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end

  TA5REC.TA5TSQIX = SL0JWS0.SL0JWDPG[SL0JWSE1];
  TA5REC.TA5APPID = SLWREC.SLWDETQU;
  TA5REC.TA5FNCCD = "R";

  call "TA0050" (SL0JWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SW1A";
    SLWREC.SLWMSGNO = 0001;
    return;
  end

  SLWREC.SLWDETIX = TA5REC.TA5TSQIX;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0JSW1

// match sum's key
Function SL0JSW2()

   /* ********************************************************/
   /* *** obtain detail page number from page number on   ****/
   /* *** summary record and then perform call to get the ****/
   /* *** detail record.                                  ****/
   /* ********************************************************/

  SLWREC.SLWIDX01 = SLWREC.SLWLINPP;
  SL0JW02.SL0JWSE2 = 1;

   /* *** if selection was made on screen use it,else ****/
   /* *** use first summary line on summary page.     ****/

  while (SLWIDX01 >= 1)
    if (SL0JM210.XMSLMSEL[SLWIDX01] != " ")
      SL0JW02.SL0JWSE2 = SLWREC.SLWIDX01;
    end
    SL0JM210.XMSLMSEL[SLWIDX01] = " ";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end

  TA5REC.TA5TSQIX = SL0JWS0.SL0JWDPG[SL0JWSE2];
  TA5REC.TA5APPID = SLWREC.SLWDETQU;
  TA5REC.TA5FNCCD = "R";

  call "TA0050" (SL0JWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SW2A";
    SLWREC.SLWMSGNO = 0001;
    return;
  end

  SLWREC.SLWDETIX = TA5REC.TA5TSQIX;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSW2

// CAITEM processing
Function SL0JSY0()

   /* ************************************************************/
   /* *** if entered, use CAITEM data by first moving it to   ****/
   /* *** a ws field to make use of it with "redefines"       ****/
   /* *** note: CAITEM = character data as passed             ****/
   /* ************************************************************/

  SLWREC.CAITEM = COMMAREA.CAITEM;

  if (SLWREC.SLWCASNO > " ")
    SL0JM010.XMSLMSNO = SLWREC.SLWCASNO;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSY0

// CAITEM processing
Function SL0JSY1()

   /* ************************************************************/
   /* *** if entered, use CAITEM data by first moving it to   ****/
   /* *** a ws field to make use of it with "redefines"       ****/
   /* *** note: CAITEM = character data as passed             ****/
   /* ************************************************************/

   /* none at this time*/
  if (COMMAREA.CAITEM == "SL0JM310")
    SL0JM110.XWHCD = SL0JM310.XWHCD;
    SL0JM110.XGPCD = SL0JM310.XGPCD;
    SL0JM110.SY1STNBR = SL0JM310.SY1STNBR;
    SL0JM110.SY2CLRID = SL0JM310.SY2CLRID;
    SL0JM110.XDMCD = SL0JM310.XDMCD;
    SL0JM110.XQACD = SL0JM310.XQACD;
    SL0JM110.XOWCD = "01";
    SL0JM110.PC2INSEG = "000";
    SL0JM110.XEGCD = "000";
    SL0JM110.XSLCD = "000";
    SL0JM110.XPGCD = "01";
    SL0JM110.XUMCD = "01";
  else
      /* next sentence ;*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0JSY1

// close cursor on prod/assgn
Function XSSL6C2()

   /* ************************************************************/
   /* *** close select set of:  product location table        ****/
   /* *** using the std module:  IO1470                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  call "IO1470" ("C2", SQLCA, SL6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSL6C2 ";
  TA1REC.TA1LOCAT[1] = "IO1470  ";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYLOC01";
  TA1REC.TA1TBLKE = SL6REC.SL6KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL6C2

// close cursor on prod/assgn
Function XSSL6C6()

   /* ************************************************************/
   /* *** close select set of:  product location table        ****/
   /* *** using the std module:  IO1470                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  call "IO1470" ("C6", SQLCA, SL6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSL6C6 ";
  TA1REC.TA1LOCAT[1] = "IO1470  ";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYLOC01";
  TA1REC.TA1TBLKE = SL6REC.SL6KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL6C6

// fetch next prod/loc rec
Function XSSL6F2()

   /* ************************************************************/
   /* *** fetch next row from:  product location              ****/
   /* *** using the std module:  IO1470                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ***       but w/these io mods the sgrp will close       ****/
   /* ************************************************************/

  call "IO1470" ("N2", SQLCA, SL6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    XSSL6C2(); /* <=== std close cursor*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSL6F2 ";
  TA1REC.TA1LOCAT[1] = "IO1470  ";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYLOC01";
  TA1REC.TA1TBLKE = SL6REC.SL6KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL6F2

// fetch next prod/loc rec
Function XSSL6F6()

   /* ************************************************************/
   /* *** fetch next row from:  product location              ****/
   /* *** using the std module:  IO1470                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ***       but w/these io mods the sgrp will close       ****/
   /* ************************************************************/

  call "IO1470" ("N6", SQLCA, SL6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    XSSL6C6(); /* <=== std close cursor*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSL6F6 ";
  TA1REC.TA1LOCAT[1] = "IO1470  ";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYLOC01";
  TA1REC.TA1TBLKE = SL6REC.SL6KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL6F6

// obtain set of prod/loc records
Function XSSL6S2()

   /* ************************************************************/
   /* *** select set of rows from:  product location          ****/
   /* *** using the std module:  IO1470                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique field values for:            ****/
   /* ***   xwhcd                                             ****/
   /* ***   xgpcd                                             ****/
   /* ***   sy1stnbr                                          ****/
   /* ***   sy2clrid                                          ****/
   /* ***   xdmcd                                             ****/
   /* *** the following may be used with a wild card (*):     ****/
   /* ***   xqacd                                             ****/
   /* ***   xowcd                                             ****/
   /* ***   xsdcd                                             ****/
   /* ***   xsacd                                             ****/
   /* ***   xpgcd                                             ****/
   /* ***   xumcd                                             ****/
   /* ***   xowcd                                             ****/
   /* ***   xslcd                                             ****/
   /* *** the order by for this select set is:                ****/
   /* ***   xwhcd                                             ****/
   /* ***   xgpcd                                             ****/
   /* ***   sy1stnbr                                          ****/
   /* ***   sy2clrid                                          ****/
   /* ***   xdmcd                                             ****/
   /* ***   xqacd                                             ****/
   /* ***   xsdcd                                             ****/
   /* ***   xsacd                                             ****/
   /* ***   xpgcd                                             ****/
   /* ***   xumcd                                             ****/
   /* ***   xowcd                                             ****/
   /* ***   xslcd                                             ****/
   /* ***   sy5szid                                           ****/
   /* ***   xarcd                                             ****/
   /* ***   sl4zone                                           ****/
   /* ***   sl5loctn                                          ****/
   /* ************************************************************/

  call "IO1470" ("S2", SQLCA, SL6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "XSSL6S2 ";
    TA1REC.TA1LOCAT[1] = "IO1470  ";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VSYLOC01";
    TA1REC.TA1TBLKE = SL6REC.SL6KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* *** note: fetch handles return code correctly           ****/
   /* ************************************************************/

  XSSL6F2(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL6S2

// obtain set of prod/loc records
Function XSSL6S6()

   /* ************************************************************/
   /* *** select set of rows from:  product location          ****/
   /* *** using the std module:  IO1470                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique field values for:            ****/
   /* ***   xwhcd                                             ****/
   /* ***   xgpcd                                             ****/
   /* ***   sy1stnbr                                          ****/
   /* ***   sy2clrid                                          ****/
   /* ***   xdmcd                                             ****/
   /* *** the following may be used with a wild card (*):     ****/
   /* ***   xqacd                                             ****/
   /* ***   xowcd                                             ****/
   /* ***   xsdcd                                             ****/
   /* ***   xsacd                                             ****/
   /* ***   xpgcd                                             ****/
   /* ***   xumcd                                             ****/
   /* ***   xowcd                                             ****/
   /* ***   xslcd                                             ****/
   /* *** the order by for this select set is:                ****/
   /* ***   xwhcd                                             ****/
   /* ***   xgpcd                                             ****/
   /* ***   sy1stnbr                                          ****/
   /* ***   sy2clrid                                          ****/
   /* ***   xdmcd                                             ****/
   /* ***   xqacd                                             ****/
   /* ***   xsdcd                                             ****/
   /* ***   xsacd                                             ****/
   /* ***   xpgcd                                             ****/
   /* ***   xumcd                                             ****/
   /* ***   xowcd                                             ****/
   /* ***   xslcd                                             ****/
   /* ***   xarcd                                             ****/
   /* ***   sl4zone                                           ****/
   /* ***   sl5loctn                                          ****/
   /* ***   sy5szid                                           ****/
   /* ************************************************************/

  call "IO1470" ("S6", SQLCA, SL6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "XSSL6S6 ";
    TA1REC.TA1LOCAT[1] = "IO1470  ";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VSYLOC01";
    TA1REC.TA1TBLKE = SL6REC.SL6KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* *** note: fetch handles return code correctly           ****/
   /* ************************************************************/

  XSSL6F6(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL6S6
//*** RECORD=SL0JW01 ****
// ************************************************************
// 
//           STOCK LOCATE INQUIRY SKELETON
//           =============================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used specifically
//           by an application/function.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-87  Ward Jones   created
// 01-11-87  D. Kenny     Added SL0JWTQ - a temporary quantity
//                        storage area.
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0JW01 type basicRecord
  10 SL0JWLK1 SL0JWLK1 ; 
    15 XWHCD XWHCD ; 
    15 XWHABRV XWHABRV ; 
    15 XOWCD XOWCD ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY1SSTNM SY1SSTNM ; 
    15 SY2CLRID SY2CLRID ; 
    15 SY2CLRAB SY2CLRAB ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 PC2INSEG PC2INSEG ; 
    15 XEGCD XEGCD ; 
    15 XSLCD XSLCD ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
  10 SL0JWNET SL0JWNET ; 
  10 SL0JWSZ1 SL0JWSZ1 ; 
  10 SL0JWDPA SL0JWDPA ; 
  10 SL0JWSPA SL0JWSPA ; 
  10 SL0JWSE1 SL0JWSE1 ; 
  10 XARCD XARCD ; 
  10 SL4ZONE SL4ZONE ; 
  10 SL5LOCTN SL5LOCTN ; 
  10 SL2PALET SL2PALET ; 
  10 SL2CASE SL2CASE ; 
  10 SY1UNPCS SY1UNPCS ; 
  10 SL0JWTQ SL0JWTQ ; 
end // end SL0JW01

//*** RECORD=SL0JW02 ****
// ************************************************************
// 
//           STOCK LOCATE INQUIRY SKELETON
//           =============================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used specifically
//           by an application/function.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-87  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0JW02 type basicRecord
  10 XWHCD XWHCD ; 
  10 XARCD XARCD ; 
  10 SL4ZONE SL4ZONE ; 
  10 SL5LOCTN SL5LOCTN ; 
  10 XOWCD XOWCD ; 
  10 XGPCD XGPCD ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 XQACD XQACD ; 
  10 PC2INSEG PC2INSEG ; 
  10 XEGCD XEGCD ; 
  10 XSLCD XSLCD ; 
  10 XPGCD XPGCD ; 
  10 XUMCD XUMCD ; 
  10 YLSCD YLSCD ; 
  10 SL2PALET SL2PALET ; 
  10 SL2CASE SL2CASE ; 
  10 SL0JWSZ2 SL0JWSZ2 ; 
  10 SL0JWDPA SL0JWDPA ; 
  10 SL0JWSPA SL0JWSPA ; 
  10 SL0JWSE2 SL0JWSE2 ; 
  10 SL0JWCPS SL0JWCPS ; 
end // end SL0JW02

//*** RECORD=SL0JW03 ****
// ************************************************************
// 
//           STOCK LOCATE INQUIRY SKELETON
//           =============================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used specifically
//           by an application/function.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-87  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0JW03 type basicRecord
  10 XWHCD XWHCD ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XGPCD XGPCD ; 
  10 XDMCD XDMCD ; 
  10 XQACD XQACD ; 
  10 PC2INSEG PC2INSEG ; 
  10 XEGCD XEGCD ; 
  10 XSLCD XSLCD ; 
  10 XPGCD XPGCD ; 
  10 XUMCD XUMCD ; 
  10 XOWCD XOWCD ; 
end // end SL0JW03

//*** RECORD=SL0JW04 ****
// ************************************************************
// 
//           STOCK LOCATE INQUIRY SKELETON
//           =============================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used specifically
//           by an application/function.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-87  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0JW04 type basicRecord
  10 SL0JWLWH SL0JWLWH ; 
  10 SL0JWPTR SL0JWPTR ; 
  10 SL0JWSSW SL0JWSSW ; 
  10 CAUSERID CAUSERID ; 
    15 SL0JWUSR SL0JWUSR ; 
    15 * char(2) ; 
  10 SL0JWJOB SL0JWJOB ; 
    15 SL0JWLT1 SL0JWLT1 ; 
    15 * char(56) ; 
  10 SL0JWOUT SL0JWOUT ; 
    15 SL0JWLT3 SL0JWLT3 ; 
    15 SL0JWPID SL0JWPID ; 
    15 * char(42) ; 
  10 SL0JWPRD SL0JWPRD ; 
    15 XWHCD XWHCD ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 PC2INSEG PC2INSEG ; 
    15 XEGCD XEGCD ; 
    15 XSLCD XSLCD ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
    15 XOWCD XOWCD ; 
end // end SL0JW04

//*** RECORD=SL0JW05 ****
// ************************************************************
// 
//           STOCK LOCATE INQUIRY SKELETON
//           =============================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used specifically
//           by an application/function.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-87  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0JW05 type basicRecord
  10 SL0JWLWH SL0JWLWH ; 
  10 SL0JWPTR SL0JWPTR ; 
  10 SL0JWSSW SL0JWSSW ; 
  10 CAUSERID CAUSERID ; 
    15 SL0JWUSR SL0JWUSR ; 
    15 * char(2) ; 
  10 SL0JWJOB SL0JWJOB ; 
    15 SL0JWLT1 SL0JWLT1 ; 
    15 * char(56) ; 
  10 SL0JWOUT SL0JWOUT ; 
    15 SL0JWLT3 SL0JWLT3 ; 
    15 SL0JWPID SL0JWPID ; 
    15 * char(42) ; 
  10 SL0JWLOC SL0JWLOC ; 
    15 XWHCD XWHCD ; 
    15 XARCD XARCD ; 
    15 SL4ZONE SL4ZONE ; 
    15 SL5LOCTN SL5LOCTN ; 
end // end SL0JW05

Record SL0JWB1 type basicRecord
  10 SL0JWSM1 SL0JWSM1 ; 
    15 XARCD XARCD ; 
    15 SL4ZONE SL4ZONE ; 
    15 SL5LOCTN SL5LOCTN ; 
    15 SL2PALET SL2PALET ; 
    15 SL2CASE SL2CASE ; 
      20 SL0JWCFL SL0JWCFL ; 
      20 SL0JWCSE SL0JWCSE ; 
    15 SY1UNPCS SY1UNPCS ; 
    15 YLSCD YLSCD ; 
    15 SL0JWSNT SL0JWSNT ; 
    15 SL0JWSOH SL0JWSOH ; 
    15 SL0JWSPR SL0JWSPR ; 
    15 SL0JWSSA SL0JWSSA ; 
  10 SL0JWDT1 SL0JWDT1 [40] ; 
    15 SY4IDDSC SY4IDDSC ; 
    15 SL0JWDNT SL0JWDNT ; 
    15 SL0JWDOH SL0JWDOH ; 
    15 SL0JWDPR SL0JWDPR ; 
    15 SL0JWDSA SL0JWDSA ; 
end // end SL0JWB1

Record SL0JWB2 type basicRecord
  10 SL0JWSM2 SL0JWSM2 ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 PC2INSEG PC2INSEG ; 
    15 XEGCD XEGCD ; 
    15 XSLCD XSLCD ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
    15 XOWCD XOWCD ; 
    15 SL2PALET SL2PALET ; 
    15 SL2CASE SL2CASE ; 
      20 SL0JWCFL SL0JWCFL ; 
      20 SL0JWCSE SL0JWCSE ; 
    15 SL0JWSOH SL0JWSOH ; 
    15 SL0JWSPR SL0JWSPR ; 
    15 SL0JWSSA SL0JWSSA ; 
  10 SL0JWDT2 SL0JWDT2 [40] ; 
    15 SY4IDDSC SY4IDDSC ; 
    15 SL0JWDOH SL0JWDOH ; 
    15 SL0JWDPR SL0JWDPR ; 
    15 SL0JWDSA SL0JWDSA ; 
end // end SL0JWB2

Record SL0JWB3 type basicRecord
  10 SL0JWRC3 SL0JWRC3 ; 
    15 XWHCD XWHCD ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 PC2INSEG PC2INSEG ; 
    15 XEGCD XEGCD ; 
    15 XSLCD XSLCD ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
    15 XOWCD XOWCD ; 
end // end SL0JWB3

Record SL0JWD0 type basicRecord
  10 SL0JWLTH SL0JWLTH ; 
  10 * char(100) [40] ; 
    15 SL0JWRTY SL0JWRTY ; 
    15 SL0JWSPG SL0JWSPG ; 
    15 SL0JWDTA SL0JWDTA ; 
end // end SL0JWD0

Record SL0JWS0 type basicRecord
  10 SL0JWLTH SL0JWLTH ; 
  10 * char(100) [40] ; 
    15 SL0JWRTY SL0JWRTY ; 
    15 SL0JWDPG SL0JWDPG ; 
    15 SL0JWDTA SL0JWDTA ; 
end // end SL0JWS0

// filler
DataItem SL0JWCFL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// case/pallet switch
DataItem SL0JWCPS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// s.l. case number
DataItem SL0JWCSE char(6)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// net quantity
DataItem SL0JWDNT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sl on hand quantity
DataItem SL0JWDOH num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// detail page counter
DataItem SL0JWDPA num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// detail page number
DataItem SL0JWDPG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sl pick reserve quantity
DataItem SL0JWDPR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sl set aside quantity
DataItem SL0JWDSA num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// detail line data
DataItem SL0JWDT1 char(41)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// detail line data
DataItem SL0JWDT2 char(32)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// actual detail data
DataItem SL0JWDTA char(95)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jobname
DataItem SL0JWJOB char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// complete last key
DataItem SL0JWLK1 char(69)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// location data from screen
DataItem SL0JWLOC char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal 1
DataItem SL0JWLT1 char(24)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product data from screen
DataItem SL0JWLT3 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data length
DataItem SL0JWLTH num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last whse
DataItem SL0JWLWH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// net quantity
DataItem SL0JWNET num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// output spaces
DataItem SL0JWOUT char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// output destination
DataItem SL0JWPID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product data from screen
DataItem SL0JWPRD char(32)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// printer save field
DataItem SL0JWPTR char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work record for level 3
DataItem SL0JWRC3 char(32)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record type
DataItem SL0JWRTY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save selection entered
DataItem SL0JWSE1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save selection entered
DataItem SL0JWSE2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// summary line data
DataItem SL0JWSM1 char(63)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// summary line data
DataItem SL0JWSM2 char(70)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// net quantity
DataItem SL0JWSNT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// net quantity
DataItem SL0JWSOH num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// summary page counter
DataItem SL0JWSPA num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// corresponding summary page
DataItem SL0JWSPG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// net quantity
DataItem SL0JWSPR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// net quantity
DataItem SL0JWSSA num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// printers shown flag
DataItem SL0JWSSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work size field
DataItem SL0JWSZ1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work size field
DataItem SL0JWSZ2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp quantity
DataItem SL0JWTQ num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// user id for jobname
DataItem SL0JWUSR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end