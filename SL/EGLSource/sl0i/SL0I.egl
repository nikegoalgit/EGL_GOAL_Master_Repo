package sl0i;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import pc.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
import ww.common.*;
//*** PROGRAM=SL0I ****
// ************************************************************
// 
//                    STOCK LOCATE
//           receiving maintenance functions
//           ===============================
// 
// ************************************************************
// 
// OVERVIEW: This application is intended to transfer control
//           to other applications and/or functions within its
//           application depending on the selction number
//           entered on the map or passed via fast path's
//           item area (first character only).
// 
//           These are:
//             1) receiving count entry/maintenance
// 
//             2) receiving inspection
// 
//             3) receiving update
// 
// 
// MAINTENANCE HISTORY:
// ===================
// RVN
// NBR   DATE     BY WHOM    OVERVIEW OF CHANGES:
// --- --------  ----------  ----------------------------------
// 00  02/17/87  Ward Jones  created
// 01  03/03/88  j. campbell add i/o mod IO2490 for add/delete
//                           of rows in dcycle.vcyloc01. chg is
//                           for cycle count.
// 02  03/04/88  j. campbell remove preselection of printer id
//                           in print option.
// 03  10/11/88  Ward Jones  add P & Q as valid short pallet fl
// 04  11/14/88  Ward Jones  fix printer limit abend
// 05  11/15/88  John Wood   added xssegtr logic
// 06  12/05/88  Ward Jones  added sht plt fl valid values lvl4
// 07  03/08/89  ryonke      added mult-prod flg to sl5rec read
// 08  06/12/90  kande1      removed ts1rec and ts2rec from
//                           application table list
// 09  10/09/90  kande1      xrocd increased to 4 bytes so end
//                           of table now 9999
// 10  11/20/90  RVAKEL      override default cursor settings:
//                           pgm SL0I240 - set cursor to
//                               location field on Sl0IM210
//                           pgm SL0I320 - set cursor to
//                               area code field on SL0I310
// 11  02/27/91 jlucas       printer enhancement on m310 to
//                           call ta0p
// 12  04/18/91 sbeauc       disallow change of status 08
// 13  10/23/91 KANDE1       Wilsonville retrofit - change maps
//                           210 and 410 from title of short
//                           pallet flag to location size ind;
//                           added location status of 06 for
//                           replenishment reserve.
// 14  12/06/91 DCHIAN       LOCATION MAINTENANCE FOR "ADD",
//                           LOCATION MUST BE NUMERIC.
// 15  01/17/92 jwood        initialize w/s
// 16  10/01/92 SCLEME      -CHANGE STAT DT FOR LOC STAT CHNG
//                          -BEFORE DELETE ENSURE NO PRODS/LOC
//                           OR NO ACTIVE PROD ASSIGNMENTS
//                          -BEFORE CHANGE MULT LOC FL Y->N
//                           ENSURE NO MORE THAN 1 PROD FOR LOC
// 17  10/10/92 Ryonke       Code changes made to support
//                           table changes.
// 18  02/24/93 mpluth       Fixed problem of not being able to
//                           change location status from '05'
//                           to '02'.  (SL0ISP2)
// 19  08/23/93 jcampb       fixed error with duplicate item in
//                           sl0iw02 - sl5loctn.......
// 20  12/19/93 Ryonke       Modified error logic for single
//                           sku with multiple PO's.
// 21  04/13/94 Ryonke       Add logic that will prevent a
//                           location from being deleteed if it
//                           has been flagged for use by the
//                           replenishment process.
// 22  04/19/94 Ryonke       Fix bug in prior fix.
// 23  01/02/96 Pjames       Add logic that will prevent a
//                           delete of locations for whse 42
//                           area 02 and zone 03.
// 24  09/09/96 Dhuffm       Add functionality to update/
//                           insert/delete VREPLC03 rows.
// 25  01/14/97 PSHARM       Included columns YSP-STG-PRTY-CD
//                           and SL-LOC-SZ-IND for update/
//                           insert in DSTLOC.VREPLC03.
//                           and also changed logic to update
//                          ylt-loc-typ-cd for vreplc03.
// 26  05/29/97 DGERLT       Added an online version of the
//                           empty locations report.  Also
//                           added totals to the last screen.
//     06/30/97 ovazqu       Add writing rows to Dstloc.Vsllog
//                           table every time Dstloc.vlocat is
//                           updated.
//     07/25/97 ovazqu       More of the same.
// y2kproj 02-03-98 oricha   y2k modfications:  zero fill
//                           date on maps 210 and 410.
//     05/12/98 sjohn6       do not clear screen on successful
//                           update
//  TT14867 03/19/02 sgopal  golf project  **#
//                           added new ylt-loc-typ-cd
// ************************************************************
// I/O Modules:
// ===========
// 
// NAME      DESCRIPTION
// --------  --------------------------------------------------
// IO2490    i/o for dcycle.vcyloc01
// VREPLC03  i/o for DSTLOC.VREPLC03
// 
// ************************************************************
// *********************
Program SL0I type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  CY7REC CY7REC; // record
  CYRREC CYRREC; // record
  ERRSQLCA ERRSQLCA; // record
  SL0IW00 SL0IW00; // record
  SL0IW01 SL0IW01; // record
  SL0IW02 SL0IW02; // record
  SL0IW03 SL0IW03; // record
  SL0IW04 SL0IW04; // record
  SL0IW05 SL0IW05; // record
  SL0IW06 SL0IW06; // record
  SL0IW07 SL0IW07; // record
  SL0IW08 SL0IW08; // record
  SL10REC SL10REC; // record
  SL4REC SL4REC; // record
  SL5REC SL5REC; // record
  SL6REC SL6REC; // record
  SL7REC SL7REC; // record
  SLIREC SLIREC; // record
  SLQREC SLQREC; // record
  SLUREC SLUREC; // record
  SLVREC SLVREC; // record
  SLWREC SLWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  UT1REC UT1REC; // record
  VREPLC03 VREPLC03; // record
  X2CREC X2CREC; // record
  X3CREC X3CREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use SL0IT03 {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use XARTBL {deleteAfterUse = yes}; // table
  use XROTBL {deleteAfterUse = yes}; // table
  use YLTTBL {deleteAfterUse = yes}; // table
  use YRPTBL {deleteAfterUse = yes}; // table
  use YSPTBL {deleteAfterUse = yes}; // table
  use YNTTBL {deleteAfterUse = yes}; // table
  use YLSTBL {deleteAfterUse = yes}; // table
  use YZTTBL {deleteAfterUse = yes}; // table
  use SL0IM.SL0IM010,  // forms
      SL0IM.SL0IM110, 
      SL0IM.SL0IM210, 
      SL0IM.SL0IM310, 
      SL0IM.SL0IM320, 
      SL0IM.SL0IM410, 
      SL0IM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    SL0I010: SL0I010();

     /* ************************************************************/
     /* *** if the map selection no. setup:                     ****/
     /* *** use it to go directly to selection (skip converse)  ****/
     /* ************************************************************/

    if (SL0IM010.XMSLMSNO > " ")
      if (SL0IM010.XMSLMSNO == "1")
        goto SL0I110; /* <=== new function*/
      end
      if (SL0IM010.XMSLMSNO == "2")
        goto SL0I210; /* <=== new function*/
      end
      if (SL0IM010.XMSLMSNO == "3")
        goto SL0I310; /* <=== new function*/
      end
      if (SL0IM010.XMSLMSNO == "4")
        goto SL0I410; /* <=== new function*/
      end
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "010Z";
      SLWREC.SLWMSGNO = 0017; /* <--- invalid selection msg*/
      set SL0IM010.XMSLMSNO cursor, bold;
      goto SL0I020; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "020 "; /* error id location id*/
    goto SL0I020; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/

    SL0I020: SL0I020();

     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0I010; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0I110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0I210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0I310; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0I410; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0I020; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      if (SL0IM010.XMSLMSNO == "1")
        goto SL0I110; /* <=== new function*/
      end
      if (SL0IM010.XMSLMSNO == "2")
        goto SL0I210; /* <=== new function*/
      end
      if (SL0IM010.XMSLMSNO == "3")
        goto SL0I310; /* <=== new function*/
      end
      if (SL0IM010.XMSLMSNO == "4")
        goto SL0I410; /* <=== new function*/
      end
       /* ************************************************************/
       /* *** note: invalid selection is detected at this point   ****/
       /* ************************************************************/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "020Y";
      SLWREC.SLWMSGNO = 0017; /* <--- invalid selection msg*/
      set SL0IM010.XMSLMSNO cursor, bold;
      goto SL0I020; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0I020; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/

    SL0I110: SL0I110();

     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "120 "; /* error id location id*/
    goto SL0I120; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/

    SL0I120: SL0I120();

     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0I110; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0IM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0I020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0I110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0I210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0I310; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0I410; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0I120; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      SLWREC.XXXLOCID = "140 ";
      goto SL0I140; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0I120; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/

    SL0I140: SL0I140();

     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0I110; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0IM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0I020; /* <=== re-display menu (no init.s)*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0I110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0I210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0I310; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0I410; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      if (SLWREC.SLWSKYSW == "N")
        goto SL0I120; /* <=== re-display key screen*/
      end
      goto SL0I140; /* <=== re-display data screen*/
    end

     /* ************************************************************/
     /* *** if no error and new key: re-display the data scrn   ****/
     /* ************************************************************/

    if (SLWREC.SLWSKYSW == "N")
      SLWREC.XXXLOCID = "140 ";
      goto SL0I140; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      SLWREC.XXXLOCID = "120 ";
      goto SL0I120; /* <=== setup for new input*/
    end

    if (converseVar.eventKey is pf12)
      SLWREC.XXXLOCID = "140 ";
      goto SL0I140; /* <=== converse data map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "140Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0I140; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/

    SL0I210: SL0I210();

     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "220 "; /* error id location id*/
    goto SL0I220; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/

    SL0I220: SL0I220();

     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0I210; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0IM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0I020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0I110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0I210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0I310; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0I410; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0I220; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      SLWREC.XXXLOCID = "240 ";
      goto SL0I240; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0I220; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/

    SL0I240: SL0I240();

     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0I210; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0IM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0I020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0I110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0I210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0I310; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0I410; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      if (SLWREC.SLWSKYSW == "N")
        goto SL0I220; /* <=== re-display key screen*/
      end
      goto SL0I240; /* <=== re-display data screen*/
    end

     /* ************************************************************/
     /* *** if no error and new key: re-display the data scrn   ****/
     /* ************************************************************/

    if (SLWREC.SLWSKYSW == "N")
      SLWREC.XXXLOCID = "240 ";
      goto SL0I240; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      SLWREC.XXXLOCID = "220 ";
      goto SL0I220; /* <=== setup for new input*/
    end

    if (converseVar.eventKey is pf12)
      SLWREC.XXXLOCID = "240 ";
      goto SL0I240; /* <=== converse data map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "240Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0I240; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/

    SL0I310: SL0I310();

     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "320 "; /* error id location id*/
    goto SL0I320; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/

    SL0I320: SL0I320();

     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0I310; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0IM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0I020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0I110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0I210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0I310; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0I410; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0I320; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      goto SL0I320; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** if pf9 - display the empty location screen          ****/
     /* ************************************************************/

    if (converseVar.eventKey is pf9
     && SLWREC.SLWERRSW != "Y")
      goto SL0I330; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0I320; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/

    SL0I330: SL0I330();
    goto SL0I340;
    SL0I340: SL0I340();

     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0I310; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.XXXLOCID = "310 "; /* <=== reset error id*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      goto SL0I310; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0I110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0I210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0I310; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0I410; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0I340; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf7
     || converseVar.eventKey is pf8
     || converseVar.eventKey is pf9)
      goto SL0I340; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "340Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0I340; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/

    SL0I410: SL0I410();

     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "420 "; /* error id location id*/
    goto SL0I420; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/

    SL0I420: SL0I420();

     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0I410; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0IM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0I020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0I110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0I210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0I310; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0I410; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0I420; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      SLWREC.XXXLOCID = "420 ";
      goto SL0I420; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0I420; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/

  end // end main
end // end SL0I
// one time initializations
Function SL0I010()

   /* ************************************************************/
   /* *** standard security checking                          ****/
   /* *** note: comment out if exec'g from your msl           ****/
   /* ************************************************************/

  XSENTRY();

   /* ************************************************************/
   /* *** standard segmented trans id                         ****/
   /* ************************************************************/

  XSSEGTR();

   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0IM010 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0IM110 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0IM210 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0IM310 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0IM410 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set TA0PM001 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set CYRREC empty; /**/
  set CY7REC empty; /**/
  set SLUREC empty; /**/
  set SLWREC empty; /* common working storage fields*/
  set SL0IW01 empty; /**/
  set SL0IW02 empty; /**/
  set SL0IW03 empty; /**/
  set SL0IW04 empty; /**/
  set SL4REC empty; /**/
  set SL5REC empty; /**/
  set SL6REC empty; /**/
  set TAEREC empty; /**/
  set TA1REC empty; /* TA0020 record*/
  set TA2REC empty; /**/
  set TA3REC empty; /**/
  set TA6REC empty; /**/
  set UT1REC empty; /**/
  set X2CREC empty; /* x2crec date rtn*/
  set X3CREC empty; /* x2crec time rtn*/
  set SQLCA empty; /* SQL returned data record*/
  set ERRSQLCA empty; /* TA0020 version of SQLCA*/

   /* ************************************************************/
   /* *** maintenance information:                            ****/
   /* *** =======================                             ****/
   /* *** rvsn   date    update by:    description:           ****/
   /* *** ---- --------  ------------  ---------------------- ****/
   /* ***  00  04/22/87  c. beer       created                ****/
   /* ***  01  07/30/87  w. jones      updated                ****/
   /* ***  02  04/03/88  j. campbell   stop ptr pre-selection ****/
   /* ***  03  10/11/88  w. jones      add P & Q as valid     ****/
   /* ***                              short pallet values    ****/
   /* ***  04  11/14/88  w. jones      fix printer limit abend****/
   /* ***  05  11/15/88  j. wood       added xssegtr logic    ****/
   /* ***  06  12/05/88  w. jones      added valid sht plt fl ****/
   /* ***                              values in lvl 4        ****/
   /* ************************************************************/

  SLWREC.XXXRVNBR = "06";

  SLWREC.XXXMAPNM = "SL0IM010";
  SLWREC.XXXTITLE = "LOCATION MAINTENANCE/PRINT MENU";

  XSX2CDT(); /* <=== get current ccyymmdd*/

  SLWREC.XXXAPPID = "SL0I"; /* error id appl. name*/
  SLWREC.SLWTALOC = "SL0I010 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0IM010"; /* TA0020 current map name*/

  SLWREC.SLWSUMQU = "SLSC"; /* summary tsq id*/
  SLWREC.SLWDETQU = "SLDC"; /* detail tsq id*/
  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* saved msg no.*/
  SLWREC.SLWLINPP = 15; /* lines per page*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0IM010.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0IM010.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0IM010.XXXTITLE = SLWREC.XXXTITLE;
  SL0IM010.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** check commarea fast path item to see if it should   ****/
   /* *** be used to setup working storage &/or map fields    ****/
   /* ************************************************************/

  if (COMMAREA.CAITEM > " ")
    SL0ISY0(); /* <=== use commarea item*/
    COMMAREA.CAITEM = " ";
  end

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/

end // end SL0I010

// converse & control key entry
Function SL0I020()

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0IM010.XXXERRID = SLWREC.XXXERRID;

  converse SL0IM010 ;

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020A";
    SLWREC.SLWMSGNO = 0;
    SL0IM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020B";
    SLWREC.SLWMSGNO = 0;
    SL0IM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020C";
    SLWREC.SLWMSGNO = 0;
    SL0IM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020D";
    SLWREC.SLWMSGNO = 0;
    SL0IM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0IM010.CATOAP > " ")
    COMMAREA.CATOAP = SL0IM010.CATOAP;
    COMMAREA.CAITEM = SL0IM010.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020E";
    SLWREC.SLWMSGNO = 0;
    SL0IM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0IM010.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0IM010.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "020 ";
  set SL0IM010.CATOAP initialAttributes;
  set SL0IM010.CAITEM initialAttributes;
  set SL0IM010.XMSLMSNO cursor, initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0IM010.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0IM010.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0ISH0(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "020I";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/

end // end SL0I020

// one time initializations
Function SL0I110()

   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0IM110 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0IW01 empty; /* appl. working storage area*/
  set CYRREC empty; /* io mod pass area*/

  SLWREC.XXXMAPNM = "SL0IM110";
  SLWREC.XXXTITLE = "AREA/ZONE MAINTENANCE";

  SLWREC.SLWTALOC = "SL0I110 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0IM110"; /* TA0020 current map name*/
  SLWREC.SLWERRSW = "N";
  SLWREC.SLWMSGNO = 0;

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed during resets and for multiple levels     ****/
   /* ************************************************************/

  SL0IM110.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0IM110.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0IM110.XXXTITLE = SLWREC.XXXTITLE;
  SL0IM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  SL0IM110.XWHCD = COMMAREA.XWHCD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/

end // end SL0I110

// converse & control key entry
Function SL0I120()

   /* ************************************************************/
   /* *** protect (askip) data fields (if any)                ****/
   /* *** note: cursor is set if error or is map's default    ****/
   /* ************************************************************/

  set SL0IM110.SL4ZNDSC skip, invisible;
  set SL0IM110.YZTCD skip, invisible;
  set SL0IM110.YRPCD skip, invisible;
  set SL0IM110.YSPCD skip, invisible;

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0IM110.XXXERRID = SLWREC.XXXERRID;

  converse SL0IM110 ;

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120A";
    SLWREC.SLWMSGNO = 0;
    SL0IM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120C";
    SLWREC.SLWMSGNO = 0;
    SL0IM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120D";
    SLWREC.SLWMSGNO = 0;
    SL0IM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0IM110.CATOAP > " ")
    COMMAREA.CATOAP = SL0IM110.CATOAP;
    COMMAREA.CAITEM = SL0IM110.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120E";
    SLWREC.SLWMSGNO = 0;
    SL0IM110.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0IM110.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0IM110.VAGen_EZEMSG = " ";
  set SL0IM110.CATOAP initialAttributes;
  set SL0IM110.CAITEM initialAttributes;
  set SL0IM110.XMSLMFNC cursor;

   /* ************************************************************/
   /* *** reset key input fld attr.s as orig.ly defined       ****/
   /* ************************************************************/

  set SL0IM110.XWHCD initialAttributes;
  set SL0IM110.XMSLMFNC initialAttributes;
  set SL0IM110.XARCD initialAttributes;
  set SL0IM110.SL4ZONE initialAttributes;

   /* ************************************************************/
   /* *** reset data input fld attr.s as orig.ly defined      ****/
   /* *** done in the 140's before section re: uses func.     ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0IM110.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0IM110.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0ISH1(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "120I";
  SLWREC.SLWMSGNO = 0004; /* <--- invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/

end // end SL0I120

// converse & control data entry
Function SL0I140()

   /* ************************************************************/
   /* *** setup non-default (data) cursor position, if any    ****/
   /* *** note: error cursor position has precedence          ****/
   /* *** note: i & d need data flds set to askip but not dark****/
   /* ************************************************************/

  if (SLWREC.SLWERRSW == "N")
    if (SL0IM110.XMSLMFNC == "A"
     || SL0IM110.XMSLMFNC == "C")
      set SL0IM110.SL4ZNDSC cursor;
      set SL0IM110.SL4ZNDSC initialAttributes;
      set SL0IM110.YZTCD initialAttributes;
      set SL0IM110.YRPCD initialAttributes;
      set SL0IM110.YSPCD initialAttributes;
    else
      if (SL0IM110.XMSLMFNC == "I") /* ---------*/
        set SL0IM110.XARCD cursor; /* -- rvakel*/
        set SL0IM110.SL4ZNDSC skip; /* -- code group added*/
        set SL0IM110.YZTCD skip; /* --            11/20/90*/
        set SL0IM110.YRPCD skip; /* --*/
        set SL0IM110.YSPCD skip; /* --------*/
      else
        set SL0IM110.XMSLMFNC cursor;
        set SL0IM110.SL4ZNDSC skip;
        set SL0IM110.YZTCD skip;
        set SL0IM110.YRPCD skip;
        set SL0IM110.YSPCD skip;
      end
    end
  end

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0IM110.XXXERRID = SLWREC.XXXERRID;

  converse SL0IM110 ;

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "140A";
    SLWREC.SLWMSGNO = 0;
    SL0IM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "140C";
    SLWREC.SLWMSGNO = 0;
    SL0IM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "140D";
    SLWREC.SLWMSGNO = 0;
    SL0IM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0IM110.CATOAP > " ")
    COMMAREA.CATOAP = SL0IM110.CATOAP;
    COMMAREA.CAITEM = SL0IM110.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "140E";
    SLWREC.SLWMSGNO = 0;
    SL0IM110.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0IM110.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0IM110.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "140 ";
  set SL0IM110.CATOAP initialAttributes;
  set SL0IM110.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set SL0IM110.XWHCD initialAttributes;
  set SL0IM110.XMSLMFNC initialAttributes;
  set SL0IM110.XARCD initialAttributes;
  set SL0IM110.SL4ZONE initialAttributes;

   /* ************************************************************/
   /* *** reset data input fld attr.s depending on function   ****/
   /* ************************************************************/

  if (SL0IM110.XMSLMFNC == "A"
   || SL0IM110.XMSLMFNC == "C")
    set SL0IM110.SL4ZNDSC cursor;
    set SL0IM110.SL4ZNDSC initialAttributes;
    set SL0IM110.YZTCD initialAttributes;
    set SL0IM110.YRPCD initialAttributes;
    set SL0IM110.YSPCD initialAttributes;
  else
    set SL0IM110.XMSLMFNC cursor;
    set SL0IM110.SL4ZNDSC skip;
    set SL0IM110.YZTCD skip;
    set SL0IM110.YRPCD skip;
    set SL0IM110.YSPCD skip;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0IM110.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "140F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0IM110.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do key & data entry edits & process inputs****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0ISB1(); /* <=== same key edits*/
    if (SLWREC.SLWSKYSW == "N")
      SL0ISF1(); /* <=== save key values*/
      SL0IST1(); /* <=== reset screen (clear)*/
      SL0ISH1(); /* <=== enter processing*/
      exit stack;
    end
    if (SL0IM110.XMSLMFNC == "I")
      SL0ISQ1();
      exit stack;
    end
    if (SL0IM110.XMSLMFNC == "D")
       /* ** next sentence ***/
    else
      SL0ISR1(); /* <=== data entry edits*/
      if (SLWREC.SLWERRSW == "Y")
        exit stack;
      end
    end
    XSX3CTM(); /* <=== get current time*/
    SL0ISU1(); /* <=== update database*/
    if (SLWREC.SLWERRSW == "Y")
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* <=== reset any updates*/
      exit stack;
    end
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* <=== commit any updates*/
    SL0ISQ1(); /* <=== reset screen (clear)*/
    SLWREC.SLWMSGNO = 0020; /* <--- trans. complete msg*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF12: do key & data entry edits only             ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf12)
    SL0ISB1(); /* <=== same key edits*/
    if (SLWREC.SLWSKYSW == "N")
      SL0ISF1(); /* <=== save key values*/
      SL0IST1(); /* <=== reset screen (clear)*/
      SL0ISH1(); /* <=== enter processing*/
      exit stack;
    end
    if (SL0IM110.XMSLMFNC == "I")
      exit stack;
    end
    if (SL0IM110.XMSLMFNC == "D")
      SLWREC.SLWMSGNO = 0102; /* <--- enter to delete msg*/
    else
      SL0ISR1(); /* <=== data entry edits*/
      if (SLWREC.SLWERRSW == "Y")
        exit stack;
      end
      SLWREC.SLWMSGNO = 0026; /* <--- trans. complete msg*/
    end
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no code executed              ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "140I";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/

end // end SL0I140

// one time initializations
Function SL0I210()

   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0IM210 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0IW02 empty; /* appl. working storage area*/

  SLWREC.XXXMAPNM = "SL0IM210";
  SLWREC.XXXTITLE = "LOCATION MAINTENANCE";

  SLWREC.SLWTALOC = "SL0I210 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0IM210"; /* TA0020 current map name*/
  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* saved msg no.*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0IM210.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0IM210.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0IM210.XXXTITLE = SLWREC.XXXTITLE;
  SL0IM210.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  SL0IM210.XWHCD = COMMAREA.XWHCD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/

end // end SL0I210

// converse & control key entry
Function SL0I220()

   /* ************************************************************/
   /* *** protect (askip) data fields (if any)                ****/
   /* *** note: cursor is set if error or is map's default    ****/
   /* ************************************************************/

  if (SL0IM210.XMSLMFNC == "  ")
    set SL0IM210.XMSLMFNC cursor;
  else
    if (SL0IM210.XMSLMFNC == "A")
      set SL0IM210.SL5LOCTN cursor;
      /* next sentence*/
    else
      set SL0IM210.SL5LOCTN cursor;
      set SL0IM210.SL5LCDSC skip, invisible;
      set SL0IM210.YLTCD skip, invisible;
      set SL0IM210.YRPCD skip, invisible;
      set SL0IM210.YSPCD skip, invisible;
      set SL0IM210.SL5MPDFL skip, invisible;
      set SL0IM210.SL-LOC-SZ-IND skip, invisible;
      set SL0IM210.YNTCD skip, invisible;
      set SL0IM210.SL5SZPLC skip, invisible;
      set SL0IM210.YLSCD skip, invisible;
      set SL0IM210.SL5STCDT skip, invisible;
    end
  end

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0IM210.XXXERRID = SLWREC.XXXERRID;

  converse SL0IM210 ;

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220A";
    SLWREC.SLWMSGNO = 0;
    SL0IM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220C";
    SLWREC.SLWMSGNO = 0;
    SL0IM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220D";
    SLWREC.SLWMSGNO = 0;
    SL0IM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0IM210.CATOAP > " ")
    COMMAREA.CATOAP = SL0IM210.CATOAP;
    COMMAREA.CAITEM = SL0IM210.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220E";
    SLWREC.SLWMSGNO = 0;
    SL0IM210.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0IM210.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0IM210.VAGen_EZEMSG = " ";
  set SL0IM210.CATOAP initialAttributes;
  set SL0IM210.CAITEM initialAttributes;
  set SL0IM210.XMSLMFNC cursor;

   /* ************************************************************/
   /* *** reset key input fld attr.s as orig.ly defined       ****/
   /* ************************************************************/

  set SL0IM210.XWHCD initialAttributes;
  set SL0IM210.XMSLMFNC initialAttributes;
  set SL0IM210.XARCD initialAttributes;
  set SL0IM210.SL4ZONE initialAttributes;
  set SL0IM210.SL5LOCTN initialAttributes;

   /* ************************************************************/
   /* *** reset data input fld attr.s as orig.ly defined      ****/
   /* *** note: resets done in 240 before section using func  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0IM210.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0IM210.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0ISH2(); /* <=== enter processing*/
    if (SLWREC.SLWERRSW == "Y")
      exit stack;
    end
    if (SL0IM210.XMSLMFNC == "D")
      SLWREC.SLWMSGNO = 0102; /* <--- enter to delete msg*/
      exit stack;
    end
    if (SL0IM210.XMSLMFNC == "A")
      SLWREC.SLWMSGNO = 0151; /* <--- enter to add msg*/
      exit stack;
    end
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "220I";
  SLWREC.SLWMSGNO = 0004; /* <--- invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/

end // end SL0I220

// converse & control data entry
Function SL0I240()

   /* ************************************************************/
   /* *** setup non-default (data) cursor position, if any    ****/
   /* *** note: error cursor position has precedence          ****/
   /* ***       XSLMFNC is default cursor position            ****/
   /* ************************************************************/

  if (SLWREC.SLWERRSW == "N")
    if (SL0IM210.XMSLMFNC == "A"
     || SL0IM210.XMSLMFNC == "C"
     || SL0IM210.XMSLMFNC == "D"
     || SL0IM210.XMSLMFNC == "I") /* rvakel added 11/20/90*/
                                    /* ;  chng req # SL76a*/
      set SL0IM210.SL5LOCTN cursor;
      set SL0IM210.SL5LCDSC initialAttributes;
      set SL0IM210.YLTCD initialAttributes;
      set SL0IM210.YRPCD initialAttributes;
      set SL0IM210.YSPCD initialAttributes;
      set SL0IM210.SL5MPDFL initialAttributes;
      set SL0IM210.SL-LOC-SZ-IND initialAttributes;
      set SL0IM210.YNTCD initialAttributes;
      set SL0IM210.SL5SZPLC initialAttributes;
      set SL0IM210.YLSCD initialAttributes;
      set SL0IM210.SL5STCDT initialAttributes;
    else
      set SL0IM210.SL5LCDSC cursor; /* rnv*/
         /* SET SL0IM210.XMSLMFNC CURSOR;*/
         /* SET SL0IM210.SL5LCDSC AUTOSKIP;*/
      set SL0IM210.YLTCD skip;
      set SL0IM210.YRPCD skip;
      set SL0IM210.YSPCD skip;
      set SL0IM210.SL5MPDFL skip;
      set SL0IM210.SL-LOC-SZ-IND skip;
      set SL0IM210.YNTCD skip;
      set SL0IM210.SL5SZPLC skip;
      set SL0IM210.YLSCD skip;
      set SL0IM210.SL5STCDT skip;
    end
  end

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0IM210.XXXERRID = SLWREC.XXXERRID;

  converse SL0IM210 ;

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "240A";
    SLWREC.SLWMSGNO = 0;
    SL0IM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "240C";
    SLWREC.SLWMSGNO = 0;
    SL0IM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "240D";
    SLWREC.SLWMSGNO = 0;
    SL0IM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0IM210.CATOAP > " ")
    COMMAREA.CATOAP = SL0IM210.CATOAP;
    COMMAREA.CAITEM = SL0IM210.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "240E";
    SLWREC.SLWMSGNO = 0;
    SL0IM210.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0IM210.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0IM210.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "240 ";
  set SL0IM210.CATOAP initialAttributes;
  set SL0IM210.CAITEM initialAttributes;
  set SL0IM210.XMSLMFNC cursor;

   /* ************************************************************/
   /* *** reset key input fld attr.s as orig.ly defined       ****/
   /* ************************************************************/

  set SL0IM210.XWHCD initialAttributes;
  set SL0IM210.XMSLMFNC initialAttributes;
  set SL0IM210.XARCD initialAttributes;
  set SL0IM210.SL4ZONE initialAttributes;
  set SL0IM210.SL5LOCTN initialAttributes;

   /* ************************************************************/
   /* *** reset data input fld attr.s as orig.ly defined      ****/
   /* ************************************************************/

  if (SL0IM210.XMSLMFNC == "A"
   || SL0IM210.XMSLMFNC == "C")
    set SL0IM210.SL5LCDSC cursor;
    set SL0IM210.SL5LCDSC initialAttributes;
    set SL0IM210.YLTCD initialAttributes;
    set SL0IM210.YRPCD initialAttributes;
    set SL0IM210.YSPCD initialAttributes;
    set SL0IM210.SL5MPDFL initialAttributes;
    set SL0IM210.SL-LOC-SZ-IND initialAttributes;
    set SL0IM210.YNTCD initialAttributes;
    set SL0IM210.SL5SZPLC initialAttributes;
    set SL0IM210.YLSCD initialAttributes;
    set SL0IM210.SL5STCDT initialAttributes;
  else
    set SL0IM210.XMSLMFNC cursor;
    set SL0IM210.SL5LCDSC skip;
    set SL0IM210.YLTCD skip;
    set SL0IM210.YRPCD skip;
    set SL0IM210.YSPCD skip;
    set SL0IM210.SL5MPDFL skip;
    set SL0IM210.SL-LOC-SZ-IND skip;
    set SL0IM210.YNTCD skip;
    set SL0IM210.SL5SZPLC skip;
    set SL0IM210.YLSCD skip;
    set SL0IM210.SL5STCDT skip;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0IM210.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "240F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0IM210.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do key & data entry edits & process inputs****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0ISB2(); /* <=== same key edits*/
    if (SLWREC.SLWSKYSW == "N")
      SL0ISF2(); /* <=== save key values*/
      SL0IST2(); /* <=== reset screen (clear)*/
      SL0ISH2(); /* <=== enter processing*/
      exit stack;
    end
    if (SL0IM210.XMSLMFNC == "I")
      SL0ISQ2();
      exit stack;
    end
    if (SL0IM210.XMSLMFNC == "D")
       /* next sentence*/
    else
      SL0ISR2(); /* <=== data entry edits*/
      if (SLWREC.SLWERRSW == "Y")
        exit stack;
      end
    end
    XSX3CTM(); /* <=== get current time*/
    SL0ISU2(); /* <=== update database*/
    if (SLWREC.SLWERRSW == "Y")
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* <=== reset any updates*/
      exit stack;
    end
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* <=== commit any updates*/
    SL0ISQ2(); /* <=== reset screen (clear)*/
    SLWREC.SLWMSGNO = 0020; /* <--- trans. complete msg*/
    set SL0IM210.XARCD cursor;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF12: do key & data entry edits only             ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf12)
    SL0ISB2(); /* <=== same key edits*/
    if (SLWREC.SLWSKYSW == "N")
      SL0ISF2(); /* <=== save key values*/
      SL0IST2(); /* <=== reset screen (clear)*/
      SL0ISH2(); /* <=== enter processing*/
      exit stack;
    end
    if (SL0IM210.XMSLMFNC == "I")
      exit stack;
    end
    if (SL0IM210.XMSLMFNC == "D")
      SLWREC.SLWFTMSW = "Y";
    else
      SL0ISR2(); /* <=== data entry edits*/
      if (SLWREC.SLWERRSW == "Y")
        exit stack;
      end
    end
    SLWREC.SLWMSGNO = 0026;
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no code executed              ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "240I";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/

end // end SL0I240

// one time initializations
Function SL0I241()

   /* ************************************************************/
   /* *** delete a row from the DSTLOC.VREPLC03 table         ****/
   /* ************************************************************/

  set VREPLC03 empty;
  VREPLC03.XWHCD = SL0IM210.XWHCD;
  VREPLC03.XARCD = SL0IM210.XARCD;
  VREPLC03.SL4ZONE = SL0IM210.SL4ZONE;
  VREPLC03.SL5LOCTN = SL0IM210.SL5LOCTN;

  if (SL0IM210.XWHCD == "51")
    if (SL5REC.YLTCD == "01"
     || SL5REC.YLTCD == "22"
     || SL5REC.YLTCD == "23"
     || SL5REC.YLTCD == "24")
      SL0IS-VREPLC-D2();
    end
  else
    if (SL0IM210.XWHCD == "42")
      if (SL5REC.YLTCD == "01"
       || SL5REC.YLTCD == "23"
       || SL5REC.YLTCD == "24")
        SL0IS-VREPLC-D2();
      end
    else
      if (SL5REC.YLTCD == "23"
       || SL5REC.YLTCD == "24"
       || SL5REC.YLTCD == "29")
        SL0IS-VREPLC-D2();
      end
    end
  end

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/

end // end SL0I241

// one time initializations
Function SL0I242()

   /* ************************************************************/
   /* *** select a row then update/insert depending on result ****/
   /* ************************************************************/

  set VREPLC03 empty;

  VREPLC03.XWHCD = SL0IM210.XWHCD;
  VREPLC03.XARCD = SL0IM210.XARCD;
  VREPLC03.SL4ZONE = SL0IM210.SL4ZONE;
  VREPLC03.SL5LOCTN = SL0IM210.SL5LOCTN;

  SL0IS-VREPLC-S();
  if (SQLCA.VAGen_SQLCODE == 0)
    if (SL0IM210.XWHCD == "51") /* If whse 51 process these loc types*/
      if (SL0IM210.YLTCD == "01"
       || SL0IM210.YLTCD == "22"
       || SL0IM210.YLTCD == "23"
       || SL0IM210.YLTCD == "24")
        if (SL0IM210.YLTCD == SL5REC.YLTCD) /* can update directly*/
          SL0IS-VREPLC-U2();
        else /* first delete and then insert into the table*/
          SL0IS-VREPLC-D2();
          SL0IS-VREPLC-I2();
        end
      else
        if (SL5REC.YLTCD == "01"
         || SL5REC.YLTCD == "22"
         || SL5REC.YLTCD == "23"
         || SL5REC.YLTCD == "24")
          SL0IS-VREPLC-D2(); /* Valid to delete VREPLC03 row*/
        end
      end
    else
      if (SL0IM210.XWHCD == "42") /* If whse 42 process these loc types*/
        if (SL0IM210.YLTCD == "01"
         || SL0IM210.YLTCD == "23"
         || SL0IM210.YLTCD == "24")
          if (SL0IM210.YLTCD == SL5REC.YLTCD) /* can update directly*/
            SL0IS-VREPLC-U2();
          else /* first delete and then insert into the table*/
            SL0IS-VREPLC-D2();
            SL0IS-VREPLC-I2();
          end
        else
          if (SL5REC.YLTCD == "01"
           || SL5REC.YLTCD == "23"
           || SL5REC.YLTCD == "24")
            SL0IS-VREPLC-D2(); /* Valid to delete VREPLC03 row*/
          end
        end
      else
        if (SL0IM210.YLTCD == "23"
         || SL0IM210.YLTCD == "24"
         || SL0IM210.YLTCD == "29") /* For all other whses*/
          if (SL0IM210.YLTCD == SL5REC.YLTCD) /* can update directly*/
            SL0IS-VREPLC-U2();
          else /* first delete and then insert into the table*/
            SL0IS-VREPLC-D2();
            SL0IS-VREPLC-I2();
          end
        else
          if (SL5REC.YLTCD == "23"
           || SL5REC.YLTCD == "24"
           || SL5REC.YLTCD == "29")
            SL0IS-VREPLC-D2(); /* Valid to delete VREPLC03 row*/
          end
        end
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* If VREPLC03 row does not exist*/
      if (SL0IM210.XWHCD == "51")
        if (SL0IM210.YLTCD == "01"
         || SL0IM210.YLTCD == "22"
         || SL0IM210.YLTCD == "23"
         || SL0IM210.YLTCD == "24")
          SL0IS-VREPLC-I2(); /* Valid to insert VREPLC03 row*/
        else
          if (SL5REC.YLTCD == "01"
           || SL5REC.YLTCD == "22"
           || SL5REC.YLTCD == "23"
           || SL5REC.YLTCD == "24")
            return; /* No need to add VREPLC03 row*/
          end
        end
      else
        if (SL0IM210.XWHCD == "42")
          if (SL0IM210.YLTCD == "01"
           || SL0IM210.YLTCD == "23"
           || SL0IM210.YLTCD == "24")
            SL0IS-VREPLC-I2(); /* Valid to insert VREPLC03 row*/
          else
            if (SL5REC.YLTCD == "01"
             || SL5REC.YLTCD == "23"
             || SL5REC.YLTCD == "24")
              return; /* No need to add VREPLC03 row*/
            end
          end
        else
          if (SL0IM210.YLTCD == "23"
           || SL0IM210.YLTCD == "24"
           || SL0IM210.YLTCD == "29")
            SL0IS-VREPLC-I2(); /* Valid to insert VREPLC03 row*/
          else
            if (SL5REC.YLTCD == "23"
             || SL5REC.YLTCD == "24"
             || SL5REC.YLTCD == "29")
              return; /* No need to add VREPLC03 row*/
            end
          end
        end
      end
    end
  end

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/

end // end SL0I242

// one time initializations
Function SL0I310()

   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0IM310 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0IW03 empty; /* appl. working storage area*/

  SLWREC.XXXMAPNM = "SL0IM310";
  SLWREC.XXXTITLE = "EMPTY LOCATIONS REPORT GENERATION";

  SLWREC.SLWTALOC = "SL0I310 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0IM310"; /* TA0020 current map name*/
  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* saved msg no.*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0IM310.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0IM310.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0IM310.XXXTITLE = SLWREC.XXXTITLE;
  SL0IM310.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  SL0IM310.XWHCD = COMMAREA.XWHCD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  SLWREC.SLWLINPP = 06; /* lines per page*/

   /* ************************************************************/
   /* *** if whse present: validate keys/whse                 ****/
   /* ***                  save keys/whse                     ****/
   /* ************************************************************/

  if (SL0IM310.XWHCD > " ")
    SL0ISC3(); /* <=== field edits*/
    if (SLWREC.SLWERRSW == "Y")
      SLWREC.XXXLOCID = "310A";
      return;
    end
    SL0ISF3(); /* <=== save key values*/
    if (SLWREC.SLWERRSW == "Y")
      SLWREC.XXXLOCID = "310B";
    end
  end

end // end SL0I310

// converse & control key entry
Function SL0I320()

   /* ************************************************************/
   /* *** no "before" processing ...                          ****/
   /* *** except setup msg no.  and  error id  on map         ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0IM310.XXXERRID = SLWREC.XXXERRID;

  set SL0IM310.XARCD[1] cursor; /* rvakel added 11/20/90*/
                         /* ;  override default cursor setting*/
  converse SL0IM310 ;

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320A";
    SLWREC.SLWMSGNO = 0;
    SL0IM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320C";
    SLWREC.SLWMSGNO = 0;
    SL0IM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320D";
    SLWREC.SLWMSGNO = 0;
    SL0IM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0IM310.CATOAP > " ")
    COMMAREA.CATOAP = SL0IM310.CATOAP;
    COMMAREA.CAITEM = SL0IM310.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320E";
    SLWREC.SLWMSGNO = 0;
    SL0IM310.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0IM310.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0IM310.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "120  ";
  set SL0IM310.CATOAP initialAttributes;
  set SL0IM310.CAITEM initialAttributes;
  set SL0IM310.XARCD[1] cursor;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set SL0IM310.XWHCD initialAttributes;
  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= 6)
    set SL0IM310.XARCD[SLWIDX01] initialAttributes;
    set SL0IM310.SL4ZONE[SLWIDX01] initialAttributes;
    set SL0IM310.SL0IWBPY[SLWIDX01] initialAttributes;
    set SL0IM310.SL0IWEPY[SLWIDX01] initialAttributes;
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0IM310.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0IM310.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf16)
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf9)
    SL0ISH3(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "320I";
  SLWREC.SLWMSGNO = 0004; /* <--- invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/

end // end SL0I320

Function SL0I330()
  SLWREC.XXXLOCID = "330";
  SL0ISJ3();
  SLWREC.SLWIDX01 = 1;
  SLWREC.SLWIDX02 = 1;
  SL0IW00.SL0IWTOTL = 0;
  set SL0IW07 empty;
  set SL0IW08 empty;
  while (SLWREC.SLWIDX01 <= 6)
    if (SL0IM310.XARCD[SLWIDX01] > " ")
      SL0ISI3();
    end

    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;

  end
  SL0ISN3();
  if (SLWREC.SLWIDX02 >= 2)
    SL0ISK3();
  end
  SL0IW00.SL0IWCURPG = 1;
  if (SL0IW00.TA5TSQIX < 1)
    SLWREC.XXXLOCID = "330"; /* Module identification*/
    SLWREC.SLWMSGNO = 214; /* Unexpected error occurred*/
  else
    SL0ISM3();
  end
end // end SL0I330

Function SL0I340()
  SL0ISL3();
  converse SL0IM320 ;

   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0IM320.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "340  ";
  set SL0IM320.CATOAP cursor, initialAttributes;
  set SL0IM320.CAITEM initialAttributes;

  if (converseVar.eventKey is pf7)
    if (SL0IW00.SL0IWCURPG == 1)
      SLWREC.XXXLOCID = "340"; /* Module identification*/
      SLWREC.SLWMSGNO = 7; /* No more pages to display*/
    else
      SL0IW00.SL0IWCURPG = SL0IW00.SL0IWCURPG - 1;
      SL0ISM3();
    end
  end
  if (converseVar.eventKey is pf8)
    if (SL0IW00.SL0IWCURPG >= SL0IW00.TA5TSQIX)
      SLWREC.XXXLOCID = "340"; /* Module identification*/
      SLWREC.SLWMSGNO = 8; /* No more pages to display*/
    else
      SL0IW00.SL0IWCURPG = SL0IW00.SL0IWCURPG + 1;
      SL0ISM3();
    end
  end
  if (converseVar.eventKey is pf9)
    SL0IW00.SL0IWCURPG = SL0IW00.TA5TSQIX;
    SL0ISM3();
  end

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "340A";
    SLWREC.SLWMSGNO = 0;
    SL0IM320.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "340C";
    SLWREC.SLWMSGNO = 0;
    SL0IM320.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "340D";
    SLWREC.SLWMSGNO = 0;
    SL0IM320.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0IM320.CATOAP > " ")
    COMMAREA.CATOAP = SL0IM320.CATOAP;
    COMMAREA.CAITEM = SL0IM320.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "340E";
    SLWREC.SLWMSGNO = 0;
    SL0IM320.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0IM320.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0IM320.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "340F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0IM320.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf9
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf16)
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "340I";
  SLWREC.SLWMSGNO = 0004; /* <--- invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/

end // end SL0I340

// one time initializations
Function SL0I410()

   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0IM410 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0IW04 empty; /* appl. working storage area*/

  SLWREC.XXXMAPNM = "SL0IM410";
  SLWREC.XXXTITLE = "LOCATION ENTRY";

  SLWREC.SLWTALOC = "SL0I410 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0IM410"; /* TA0020 current map name*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* saved msg no.*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0IM410.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0IM410.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0IM410.XXXTITLE = SLWREC.XXXTITLE;
  SL0IM410.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  set SL0IM410.XARCD cursor;
  SL0IM410.XWHCD = COMMAREA.XWHCD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  SLWREC.SLWFTMSW = "Y";

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/

end // end SL0I410

// converse & control update
Function SL0I420()

   /* ************************************************************/
   /* *** protect (askip) data fields (if any)                ****/
   /* *** note: cursor is set if error or is map's default    ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0IM410.XXXERRID = SLWREC.XXXERRID;

  converse SL0IM410 ;

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420A";
    SLWREC.SLWMSGNO = 0;
    SL0IM410.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420C";
    SLWREC.SLWMSGNO = 0;
    SL0IM410.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420D";
    SLWREC.SLWMSGNO = 0;
    SL0IM410.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0IM410.CATOAP > " ")
    COMMAREA.CATOAP = SL0IM410.CATOAP;
    COMMAREA.CAITEM = SL0IM410.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420E";
    SLWREC.SLWMSGNO = 0;
    SL0IM410.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0IM410.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0IM410.VAGen_EZEMSG = " ";
  set SL0IM410.CATOAP initialAttributes;
  set SL0IM410.CAITEM initialAttributes;
  set SL0IM410.XARCD cursor;

   /* ************************************************************/
   /* *** reset key input fld attr.s as orig.ly defined       ****/
   /* ************************************************************/

  set SL0IM410.XWHCD initialAttributes;
  set SL0IM410.XARCD initialAttributes;
  set SL0IM410.SL4ZONE initialAttributes;
  set SL0IM410.SL0IMBIS initialAttributes;
  set SL0IM410.SL0IWEIS initialAttributes;
  set SL0IM410.SL0IMBBN initialAttributes;
  set SL0IM410.SL0IWEBN initialAttributes;
  set SL0IM410.SL0IMBLV initialAttributes;
  set SL0IM410.SL0IWELV initialAttributes;
  set SL0IM410.SL0IMBPS initialAttributes;
  set SL0IM410.SL0IWEPS initialAttributes;

   /* ************************************************************/
   /* *** reset data input fld attr.s as orig.ly defined      ****/
   /* ************************************************************/

  set SL0IM410.SL5LCDSC initialAttributes;
  set SL0IM410.YLTCD initialAttributes;
  set SL0IM410.YLTABRV initialAttributes;
  set SL0IM410.YRPCD initialAttributes;
  set SL0IM410.YRPABRV initialAttributes;
  set SL0IM410.YSPCD initialAttributes;
  set SL0IM410.YSPABRV initialAttributes;
  set SL0IM410.SL5MPDFL initialAttributes;
  set SL0IM410.SL-LOC-SZ-IND initialAttributes;
  set SL0IM410.YNTCD initialAttributes;
  set SL0IM410.YNTABRV initialAttributes;
  set SL0IM410.SL5SZPLC initialAttributes;
  set SL0IM410.YLSCD initialAttributes;
  set SL0IM410.YLSABRV initialAttributes;
  set SL0IM410.ZZZCHGDT initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0IM410.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0IM410.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0ISH4(); /* <=== enter processing*/
    if (SLWREC.SLWERRSW == "Y")
      exit stack;
    end
    SL0ISR4(); /* <=== data entry edits*/
    if (SLWREC.SLWERRSW == "Y")
      exit stack;
    end
    XSX3CTM(); /* <=== get current time*/
    SL0ISU4(); /* <=== update database*/
    if (SLWREC.SLWERRSW == "Y")
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* <=== reset any updates*/
      SL0IST4(); /* <=== reset screen (empty)*/
      exit stack;
    end
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* <=== commit any updates*/
     /* SL0ISQ4;                        /* <=== reset screen (clear)*/
    if (SLWREC.SLWMSGNO > 0)
       /* ** next sentence ***/
    else
      SLWREC.XXXLOCID = "420G";
      SLWREC.SLWMSGNO = 0020; /* <--- trans. complete msg*/
    end
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level                                   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "420I";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/

end // end SL0I420

// one time initializations
Function SL0I421()

   /* ************************************************************/
   /* *** select a row then update/insert depending on result ****/
   /* ************************************************************/

  set VREPLC03 empty;

  VREPLC03.XWHCD = SL5REC.XWHCD;
  VREPLC03.XARCD = SL5REC.XARCD;
  VREPLC03.SL4ZONE = SL5REC.SL4ZONE;
  VREPLC03.SL5LOCTN = SL5REC.SL5LOCTN;

  SL0IS-VREPLC-S();
  if (SQLCA.VAGen_SQLCODE == 0)
    if (SL0IM410.XWHCD == "51") /* If whse 51 process these loc types*/
      if (SL0IM410.YLTCD == "01"
       || SL0IM410.YLTCD == "22"
       || SL0IM410.YLTCD == "23"
       || SL0IM410.YLTCD == "24")
        if (SL0IM410.YLTCD == VREPLC03.YLTCD) /* update directly*/
          SL0IS-VREPLC-U4();
        else /* first delete and then insert*/
          SL0IS-VREPLC-D4();
          SL0IS-VREPLC-I4();
        end
      end
    else
      if (SL0IM410.XWHCD == "42") /* If whse 42 process these loc types*/
        if (SL0IM410.YLTCD == "01"
         || SL0IM410.YLTCD == "23"
         || SL0IM410.YLTCD == "24")
          if (SL0IM410.YLTCD == VREPLC03.YLTCD) /* update directly*/
            SL0IS-VREPLC-U4();
          else /* first delete and then insert*/
            SL0IS-VREPLC-D4();
            SL0IS-VREPLC-I4();
          end
        end
      else
        if (SL0IM410.YLTCD == "23"
         || SL0IM410.YLTCD == "24"
         || SL0IM410.YLTCD == "29") /* For all other whses*/
          if (SL0IM410.YLTCD == VREPLC03.YLTCD) /* update directly*/
            SL0IS-VREPLC-U4();
          else /* first delete and then insert*/
            SL0IS-VREPLC-D4();
            SL0IS-VREPLC-I4();
          end
        end
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* If VREPLC03 row does not exist*/
      if (SL0IM410.XWHCD == "51")
        if (SL0IM410.YLTCD == "01"
         || SL0IM410.YLTCD == "22"
         || SL0IM410.YLTCD == "23"
         || SL0IM410.YLTCD == "24")
          SL0IS-VREPLC-I4(); /* Valid to insert VREPLC03 row*/
        end
      else
        if (SL0IM410.XWHCD == "42")
          if (SL0IM410.YLTCD == "01"
           || SL0IM410.YLTCD == "23"
           || SL0IM410.YLTCD == "24")
            SL0IS-VREPLC-I4(); /* Valid to insert VREPLC03 row*/
          end
        else
          if (SL0IM410.YLTCD == "23"
           || SL0IM410.YLTCD == "24"
           || SL0IM410.YLTCD == "29")
            SL0IS-VREPLC-I4(); /* Valid to insert VREPLC03 row*/
          end
        end
      end
    end
  end

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/

end // end SL0I421

// inquiry : location : 0
Function SL0IS-VREPLC-D2()

   /* ************************************************************/
   /* *** delete row from:  location table                    ****/
   /* *** using the std module:  VREPLC03                     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** delete unique row                                   ****/
   /* ************************************************************/

  call "VREPLC03" ("D ", SQLCA, VREPLC03) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "VREPLC03 ";
  TA1REC.TA1LOCAT[1] = "VREPLC03  ";
  TA1REC.TA1LOCAT[3] = "DELETE  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VREPLC03";
  TA1REC.TA1TBLKE = VREPLC03.VREPLC03-GROUP;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0IS-VREPLC-D2

// inquiry : location : 0
Function SL0IS-VREPLC-D4()

   /* ************************************************************/
   /* *** delete row from:  location table                    ****/
   /* *** using the std module:  VREPLC03                     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** delete unique row                                   ****/
   /* ************************************************************/

  call "VREPLC03" ("D ", SQLCA, VREPLC03) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "VREPLC03 ";
  TA1REC.TA1LOCAT[1] = "VREPLC03  ";
  TA1REC.TA1LOCAT[3] = "DELETE  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VREPLC03";
  TA1REC.TA1TBLKE = VREPLC03.VREPLC03-GROUP;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0IS-VREPLC-D4

// inquiry : location : 0
Function SL0IS-VREPLC-I2()

   /* ************************************************************/
   /* *** insert unique row from:  location table             ****/
   /* *** using the std module:  VREPLC03                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -803 = duplicates found                           ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** insert a table row                                  ****/
   /* ************************************************************/

  VREPLC03.YLTCD = SL0IM210.YLTCD;
  VREPLC03.YSPCD = SL0IM210.YSPCD;
  VREPLC03.SL-LOC-SZ-IND = SL0IM210.SL-LOC-SZ-IND;

  VREPLC03.SL-NBR-TIMES-USE = 0;

  if (SL0IM210.YLSCD == "01")
    SL0IW02.SL0IW-AVAL-FL = "Y";
  else
    if (SL0IM210.YLSCD == "02")
      SL0IW02.SL0IW-AVAL-FL = "N";
    end
  end
  SL0IW02.SL0IW-IXM = 1;
  while (SL0IW02.SL0IW-IXM <= 99)
    VREPLC03.SL-SCHED-AVAL-FL[SL0IW-IXM] = SL0IW02.SL0IW-AVAL-FL;
    VREPLC03.WHSE-SL-PLT-QTY[SL0IW-IXM] = 0;
    SL0IW02.SL0IW-IXM = SL0IW02.SL0IW-IXM + 1;
  end
  XSX3CTM();
  VREPLC03.ZZZCHGDT = X2CREC.X2CCURDT;
  VREPLC03.ZZZCHGTM = X3CREC.X3CCURST;
  VREPLC03.ZZZCHGCT = 0;

  call "VREPLC03" ("A ", SQLCA, VREPLC03) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -803)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "VREPLC03 ";
  TA1REC.TA1LOCAT[1] = "VREPLC03  ";
  TA1REC.TA1LOCAT[3] = "INSERT  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VREPLC03";
  TA1REC.TA1TBLKE = VREPLC03.VREPLC03-GROUP;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0IS-VREPLC-I2

// inquiry : location : 0
Function SL0IS-VREPLC-I4()

   /* ************************************************************/
   /* *** insert unique row from:  location table             ****/
   /* *** using the std module:  VREPLC03                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -803 = duplicates found                           ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** insert a table row                                  ****/
   /* ************************************************************/

  VREPLC03.YLTCD = SL0IM410.YLTCD;
  VREPLC03.YSPCD = SL0IM410.YSPCD;
  VREPLC03.SL-LOC-SZ-IND = SL0IM410.SL-LOC-SZ-IND;
  VREPLC03.SL-NBR-TIMES-USE = 0;

  if (SL0IM410.YLSCD == "01")
    SL0IW02.SL0IW-AVAL-FL = "Y";
  else
    if (SL0IM410.YLSCD == "02")
      SL0IW02.SL0IW-AVAL-FL = "N";
    end
  end
  SL0IW02.SL0IW-IXM = 1;
  while (SL0IW02.SL0IW-IXM <= 99)
    VREPLC03.SL-SCHED-AVAL-FL[SL0IW-IXM] = SL0IW02.SL0IW-AVAL-FL;
    VREPLC03.WHSE-SL-PLT-QTY[SL0IW-IXM] = 0;
    SL0IW02.SL0IW-IXM = SL0IW02.SL0IW-IXM + 1;
  end
  XSX3CTM();
  VREPLC03.ZZZCHGDT = X2CREC.X2CCURDT;
  VREPLC03.ZZZCHGTM = X3CREC.X3CCURST;
  VREPLC03.ZZZCHGCT = 0;

  call "VREPLC03" ("A ", SQLCA, VREPLC03) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -803)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "VREPLC03 ";
  TA1REC.TA1LOCAT[1] = "VREPLC03  ";
  TA1REC.TA1LOCAT[3] = "INSERT  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VREPLC03";
  TA1REC.TA1TBLKE = VREPLC03.VREPLC03-GROUP;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0IS-VREPLC-I4

// inquiry : location : 0
Function SL0IS-VREPLC-S()

   /* ************************************************************/
   /* *** select unique row from:  location table             ****/
   /* *** using the std module:  VREPLC03                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -811 = duplicates found                           ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* ************************************************************/

  call "VREPLC03" ("S ", SQLCA, VREPLC03) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -811)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "VREPLC03 ";
  TA1REC.TA1LOCAT[1] = "VREPLC03  ";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VREPLC03";
  TA1REC.TA1TBLKE = VREPLC03.VREPLC03-GROUP;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0IS-VREPLC-S

// inquiry : location : 0
Function SL0IS-VREPLC-U2()

   /* ************************************************************/
   /* *** update a row from: dstloc.vreplc03 table            ****/
   /* *** using the std module:  VREPLC03                     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** update a table row                                  ****/
   /* ************************************************************/

  VREPLC03.YSPCD = SL0IM210.YSPCD;
  VREPLC03.SL-LOC-SZ-IND = SL0IM210.SL-LOC-SZ-IND;

  if (SL0IM210.YLSCD == "01")
    SL0IW02.SL0IW-AVAL-FL = "Y";
  else
    if (SL0IM210.YLSCD == "02")
      SL0IW02.SL0IW-AVAL-FL = "N";
    end
  end
  SL0IW02.SL0IW-IXM = 1;
  while (SL0IW02.SL0IW-IXM <= 99)
    VREPLC03.SL-SCHED-AVAL-FL[SL0IW-IXM] = SL0IW02.SL0IW-AVAL-FL;
    VREPLC03.WHSE-SL-PLT-QTY[SL0IW-IXM] = 0;
    SL0IW02.SL0IW-IXM = SL0IW02.SL0IW-IXM + 1;
  end
  XSX3CTM();
  VREPLC03.ZZZCHGDT = X2CREC.X2CCURDT;
  VREPLC03.ZZZCHGTM = X3CREC.X3CCURST;

  call "VREPLC03" ("U ", SQLCA, VREPLC03) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "VREPLC03 ";
  TA1REC.TA1LOCAT[1] = "VREPLC03  ";
  TA1REC.TA1LOCAT[3] = "UPDATE  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VREPLC03";
  TA1REC.TA1TBLKE = VREPLC03.VREPLC03-GROUP;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0IS-VREPLC-U2

// inquiry : location : 0
Function SL0IS-VREPLC-U4()

   /* ************************************************************/
   /* *** update a row from: dstloc.vreplc03 table            ****/
   /* *** using the std module:  VREPLC03                     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** update a table row                                  ****/
   /* ************************************************************/

  VREPLC03.YSPCD = SL0IM410.YSPCD;
  VREPLC03.SL-LOC-SZ-IND = SL0IM410.SL-LOC-SZ-IND;

  if (SL0IM410.YLSCD == "01")
    SL0IW02.SL0IW-AVAL-FL = "Y";
  else
    if (SL0IM410.YLSCD == "02")
      SL0IW02.SL0IW-AVAL-FL = "N";
    end
  end
  SL0IW02.SL0IW-IXM = 1;
  while (SL0IW02.SL0IW-IXM <= 99)
    VREPLC03.SL-SCHED-AVAL-FL[SL0IW-IXM] = SL0IW02.SL0IW-AVAL-FL;
    VREPLC03.WHSE-SL-PLT-QTY[SL0IW-IXM] = 0;
    SL0IW02.SL0IW-IXM = SL0IW02.SL0IW-IXM + 1;
  end
  XSX3CTM();
  VREPLC03.ZZZCHGDT = X2CREC.X2CCURDT;
  VREPLC03.ZZZCHGTM = X3CREC.X3CCURST;
  VREPLC03.ZZZCHGCT = VREPLC03.ZZZCHGCT + 1;

  call "VREPLC03" ("U ", SQLCA, VREPLC03) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "VREPLC03 ";
  TA1REC.TA1LOCAT[1] = "VREPLC03  ";
  TA1REC.TA1LOCAT[3] = "UPDATE  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VREPLC03";
  TA1REC.TA1TBLKE = VREPLC03.VREPLC03-GROUP;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0IS-VREPLC-U4

// save selected printer
Function SL0IS3A()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/
  SLWREC.SLWIDX02 = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (SL0IT03.TARTYPE[SLWIDX02] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user area*/
      /* ------------------------------------------------------------*/

      SL0IW03.SL0IWWHS = SL0IM310.XWHCD;

      SLWREC.SLWIDX01 = 1;
      while (SLWREC.SLWIDX01 <= 6)
        if (SL0IM310.XARCD[SLWIDX01] > " ")
          SL0IW03.XARCD = SL0IM310.XARCD[SLWIDX01];
          SL0IW03.SL4ZONE = SL0IM310.SL4ZONE[SLWIDX01];
          SL0IW03.SL0IWBPY = SL0IM310.SL0IWBPY[SLWIDX01];

          SL0IW03.SL0IWEPY = SL0IM310.SL0IWEPY[SLWIDX01];
          TA6REC.TARJCL[TA6INDEX] = SL0IW03.SL0IWLIN; /* Parametrs*/
          TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

        end

        SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;

      end

      TA6REC.TA6INDEX = TA6REC.TA6INDEX - 1; /* Keep table position*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = SL0IT03.TARJCL[SLWIDX02]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = SL0IT03.TARTYPE[SLWIDX02]; /* Type*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (SL0IT03.TARJCL[SLWIDX02] == "/*EOF") /* End of Table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  if (SL0IM310.SL0IMPID == " ")
    TA6REC.TA6SUBSW = "Y"; /* display map, tailor and submit JCL*/
  else
    TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  end

  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/
  TA6REC.XURDEST = SL0IM310.SL0IMPID; /* Destination*/

  set TA3REC empty;
  TA3REC.TA3OPTN = "USRNAME";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   || TA3REC.TA3RTNCD == "0")       

    TA6REC.XURUSRNM = TA3REC.TA3USRID;
  end

  XPTA0P();

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  SLWREC.SLWFTMSW = "N";
  if (sysVar.errorCode == "00000000" /* Call successful*/
   || TA6REC.TA6RTNCD == "0")       

    SLWREC.SLWMSGNO = 59; /* job submitted message*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    SLWREC.SLWMSGNO = 58; /* Unexpected error occurred*/
    SLWREC.SLWERRSW = "Y";

  end

  if (TA6REC.TA6RTNCD == "1") /* Call was cancelled*/
    TA6REC.XURDEST = "      ";
  end

end // end SL0IS3A

// reset a/z/bprty/eprty
Function SL0IS3T()

   /* ************************************************************/
   /* *** reset all area/zone/beg prty/end prty flds to blanks****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 6;

  while (SLWREC.SLWIDX01 > 0)
    SL0IM310.XARCD[SLWIDX01] = " ";
    SL0IM310.SL4ZONE[SLWIDX01] = " ";
    SL0IM310.SL0IWBPY[SLWIDX01] = " ";
    SL0IM310.SL0IWEPY[SLWIDX01] = " ";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end

  SL0IM310.SL0IMPID = TA6REC.XURDEST;

end // end SL0IS3T

// key missing input edits
Function SL0ISA0()

   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: setup defaults for optional fields, if any    ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0IM010.XMSLMSNO > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA0A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0IM010.XMSLMSNO cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISA0

// key missing input edits
Function SL0ISA1()

   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: setup defaults for optional fields, if any    ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0IM110.SL4ZONE > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0IM110.SL4ZONE cursor, bold;
  end
  if (SL0IM110.XARCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1B";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0IM110.XARCD cursor, bold;
  end
  if (SL0IM110.XMSLMFNC > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1C";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0IM110.XMSLMFNC cursor, bold;
  end

  if (SL0IM110.XWHCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1D";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0IM110.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISA1

// key missing input edits
Function SL0ISA2()

   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: setup defaults for optional fields, if any    ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0IM210.XMSLMFNC == "A")
    SL0IW01.SL5LOCTN = SL0IM210.SL5LOCTN;
    if (SL0IW01.SL0IW-LOC-BYTE[1] > "Z"
     && SL0IW01.SL0IW-LOC-BYTE[2] > "Z"
     && SL0IW01.SL0IW-LOC-BYTE[3] > "Z"
     && SL0IW01.SL0IW-LOC-BYTE[4] > "Z"
     && SL0IW01.SL0IW-LOC-BYTE[5] > "Z"
     && SL0IW01.SL0IW-LOC-BYTE[6] > "Z")
         /* NEXT SENTENCE*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SA2A";
      SLWREC.SLWMSGNO = 0011; /* ADD, LOCTN MUST BE NUMERIC*/
      set SL0IM210.SL5LOCTN cursor, bold;
    end
  end

  if (SL0IM210.SL5LOCTN > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0IM210.SL5LOCTN cursor, bold;
  end

  if (SL0IM210.SL4ZONE > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2B";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0IM210.SL4ZONE cursor, bold;
  end
  if (SL0IM210.XARCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2C";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0IM210.XARCD cursor, bold;
  end
  if (SL0IM210.XMSLMFNC > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2D";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0IM210.XMSLMFNC cursor, bold;
  end
  if (SL0IM210.XWHCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2E";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0IM210.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISA2

// missing input edits
Function SL0ISA3()

   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: defaults setup during initialization          ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  SL0IW03.SL0IWESW = "N";
  SLWREC.SLWIDX01 = 6;
  while (SLWREC.SLWIDX01 > 0)
    if (SL0IM310.SL0IWBPY[SLWIDX01] > " "
     && SL0IM310.SL0IWEPY[SLWIDX01] > " "
     && SL0IM310.SL4ZONE[SLWIDX01] > " "
     && SL0IM310.XARCD[SLWIDX01] > " ")
      SL0IW03.SL0IWESW = "Y";
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end

  if (SL0IW03.SL0IWESW == "Y")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0IM310.XARCD[1] cursor, bold;
    set SL0IM310.SL4ZONE[1] bold;
    set SL0IM310.SL0IWBPY[1] bold;
    set SL0IM310.SL0IWEPY[1] bold;
  end

  if (SL0IM310.XWHCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3B";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0IM310.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISA3

// key missing input edits
Function SL0ISA4()

   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: setup defaults for optional fields, if any    ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0IM410.SL4ZONE > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA4I";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0IM410.SL4ZONE cursor, bold;
  end

  if (SL0IM410.XARCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA4J";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0IM410.XARCD cursor, bold;
  end

  if (SL0IM410.XWHCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA4K";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0IM410.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISA4

// same key edits
Function SL0ISB1()

   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw.           ****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (SL0IM110.SL4ZONE != SL0IW01.SL4ZONE)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0IM110.XARCD != SL0IW01.XARCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0IM110.XWHCD != SL0IW01.XWHCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0IM110.XMSLMFNC != SL0IW01.XMSLMFNC)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISB1

// same key edits
Function SL0ISB2()

   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw.           ****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (SL0IM210.SL5LOCTN != SL0IW02.SL5LOCTN)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0IM210.SL4ZONE != SL0IW02.SL4ZONE)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0IM210.XARCD != SL0IW02.XARCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0IM210.XMSLMFNC != SL0IW02.XMSLMFNC)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0IM210.XWHCD != SL0IW02.XWHCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISB2

// same key edits
Function SL0ISB3()

   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw. (in0iwsks)****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (SL0IM310.XWHCD != SL0IW03.XWHCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISB3

// key field edits
Function SL0ISC1()

   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if area code in tbl & active: put desc and type on map**/
   /* ************************************************************/

  SLWREC.XWHCD = SL0IM110.XWHCD;
  SLWREC.SLWTBLCD = SL0IM110.XARCD;
  if (SLWREC.SLWTBLKY in XARTBL.XARKEY)
    if (XARTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0IM110.XARDESC = XARTBL.XARDESC[sysVar.arrayIndex];
      SL0IW01.XARPRCFL = XARTBL.XARPRCFL[sysVar.arrayIndex];
      if (XARTBL.XARBLKFL[sysVar.arrayIndex] == "Y")
        SL0IM110.SL0IWAPT = "BULK";
      end
      if (XARTBL.XARPRCFL[sysVar.arrayIndex] == "Y")
        SL0IM110.SL0IWAPT = "PROCESS";
      end
      if (XARTBL.XARRCVFL[sysVar.arrayIndex] == "Y")
        SL0IM110.SL0IWAPT = "RECEIVING";
      end
      if (XARTBL.XARPKHFL[sysVar.arrayIndex] == "Y")
        SL0IM110.SL0IWAPT = "PACK&HOLD";
      end
      if (XARTBL.XARRTNFL[sysVar.arrayIndex] == "Y")
        SL0IM110.SL0IWAPT = "RETURNS";
      end
      if (XARTBL.XARSHPFL[sysVar.arrayIndex] == "Y")
        SL0IM110.SL0IWAPT = "SHIPPING";
      end
    else
      SL0IM110.XARDESC = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1A";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0IM110.XARCD cursor, bold;
    end
  else
    SL0IM110.XARDESC = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1B";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0IM110.XARCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if function code not 'i', 'a', 'c', or 'd'..... error **/
   /* ************************************************************/

  if (SL0IM110.XMSLMFNC == "I"
   || SL0IM110.XMSLMFNC == "A"
   || SL0IM110.XMSLMFNC == "C"
   || SL0IM110.XMSLMFNC == "D")
     /* next sentence*/
  else
    SL0IM110.XMSLMFNC = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1C";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0IM110.XMSLMFNC cursor, bold;
  end

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (SL0IM110.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0IM110.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      SL0IM110.XWHABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1D";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0IM110.XWHCD cursor, bold;
    end
  else
    SL0IM110.XWHABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1E";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0IM110.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISC1

// key field edits
Function SL0ISC2()

   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if zone code in tbl & active: put abrv. on map      ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ISC2 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;
  set SL4REC empty;
  SL4REC.XWHCD = SL0IM210.XWHCD;
  SL4REC.XARCD = SL0IM210.XARCD;
  SL4REC.SL4ZONE = SL0IM210.SL4ZONE;

  XSSL4I0(); /* <=== std area/zone inquiry*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2A";
      SLWREC.SLWMSGNO = 0035; /* <--- a/z not on db msg*/
      set SL0IM210.XWHCD bold;
      set SL0IM210.XARCD bold;
      set SL0IM210.SL4ZONE cursor, bold;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.SLWSKYSW = "N";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2B";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2C";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2D";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

  SL0IM210.SL4ZNDSC = SL4REC.SL4ZNDSC;

   /* ************************************************************/
   /* *** if area code in tbl & active: put abrv. on map      ****/
   /* ************************************************************/

  SLWREC.XWHCD = SL0IM210.XWHCD;
  SLWREC.SLWTBLCD = SL0IM210.XARCD;
  if (SLWREC.SLWTBLKY in XARTBL.XARKEY)
    if (XARTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0IM210.XARDESC = XARTBL.XARDESC[sysVar.arrayIndex];
      SL0IW02.XARPKHFL = XARTBL.XARPKHFL[sysVar.arrayIndex];
      SL0IW02.XARSHPFL = XARTBL.XARSHPFL[sysVar.arrayIndex];
    else
      SL0IM210.XARDESC = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2E";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0IM210.XARCD cursor, bold;
    end
  else
    SL0IM210.XARDESC = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2F";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0IM210.XARCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if function code not i, a, c, or d....error         ****/
   /* ************************************************************/

  if (SL0IM210.XMSLMFNC == "I"
   || SL0IM210.XMSLMFNC == "A"
   || SL0IM210.XMSLMFNC == "C"
   || SL0IM210.XMSLMFNC == "D")
     /* next sentence*/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2G";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0IM210.XMSLMFNC cursor, bold;
  end

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (SL0IM210.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0IM210.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      SL0IM210.XWHABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2H";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0IM210.XWHCD cursor, bold;
    end
  else
    SL0IM210.XWHABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2I";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0IM210.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISC2

// field edits
Function SL0ISC3()

   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (SL0IM310.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0IM310.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      SL0IM310.XWHABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC3A";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0IM310.XWHCD cursor, bold;
    end
  else
    SL0IM310.XWHABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC3B";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0IM310.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISC3

// key field edits
Function SL0ISC4()

   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if zone code in tbl & active: put abrv. on map      ****/
   /* ************************************************************/
  TA1REC.TA1LOCAT[2] = "SL0ISC4 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;
  set SL4REC empty;
  SL4REC.XWHCD = SL0IM410.XWHCD;
  SL4REC.XARCD = SL0IM410.XARCD;
  SL4REC.SL4ZONE = SL0IM410.SL4ZONE;

  XSSL4I0(); /* <=== std area/zone inquiry*/

  if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC4A";
    SLWREC.SLWMSGNO = 0038; /* <--- not on db msg*/
    set SL0IM410.XWHCD cursor, bold;
    set SL0IM410.XARCD bold;
    set SL0IM410.SL4ZONE bold;
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC4B";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -811) /* <=== for any initial db access*/
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "SC4C";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0) /* <=== for all other neg sql codes*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC4D";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    SL0IST4();
    return;
  end
  SL0IM410.SL4ZNDSC = SL4REC.SL4ZNDSC;

   /* ************************************************************/
   /* *** if area code in tbl & active: put abrv. on map      ****/
   /* ************************************************************/

  SLWREC.XWHCD = SL0IM410.XWHCD;
  SLWREC.SLWTBLCD = SL0IM410.XARCD;
  if (SLWREC.SLWTBLKY in XARTBL.XARKEY)
    if (XARTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0IM410.XARDESC = XARTBL.XARDESC[sysVar.arrayIndex];
      SL0IW04.XARPRCFL = XARTBL.XARPRCFL[sysVar.arrayIndex];
    else
      SL0IM410.XARDESC = " ";
      SL0IM410.SL4ZNDSC = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC4E";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0IM410.XARCD cursor, bold;
    end
  else
    SL0IM410.XARDESC = " ";
    SL0IM410.SL4ZNDSC = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC4F";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0IM410.XARCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (SL0IM410.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0IM410.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      SL0IM410.XWHABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC4G";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0IM410.XWHCD cursor, bold;
    end
  else
    SL0IM410.XWHABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC4H";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0IM410.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISC4

// key relational edits
Function SL0ISD1()

   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ISD1 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;
  set SL4REC empty;
  SL4REC.XWHCD = SL0IM110.XWHCD;
  SL4REC.XARCD = SL0IM110.XARCD;
  SL4REC.SL4ZONE = SL0IM110.SL4ZONE;

  XSSL4I0(); /* <=== std prod loctn inquiry*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.SLWERRSW = "Y";
      SLWREC.SLWSKYSW = "N";
      SLWREC.XXXLOCID = "SD1A";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD1B";
      SLWREC.SLWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD1C";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

  if (SL0IM110.XMSLMFNC == "I"
   || SL0IM110.XMSLMFNC == "C")
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD1D";
      SLWREC.SLWMSGNO = 0035; /* <-- area/zone not fnd msg*/
      set SL0IM110.XWHCD bold;
      set SL0IM110.XARCD bold;
      set SL0IM110.SL4ZONE cursor, bold;
    end
    return;
  end

  if (SL0IM110.XMSLMFNC == "A")
    if (SQLCA.VAGen_SQLCODE == 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD1E";
      SLWREC.SLWMSGNO = 0045; /* <-- already exists msg*/
      set SL0IM110.XWHCD bold;
      set SL0IM110.XARCD bold;
      set SL0IM110.SL4ZONE cursor, bold;
    end
    return;
  end

  if (SL0IM110.XMSLMFNC == "D")
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD1F";
      SLWREC.SLWMSGNO = 0035; /* <-- area/zone not fnd msg*/
      set SL0IM110.XWHCD bold;
      set SL0IM110.XARCD bold;
      set SL0IM110.SL4ZONE cursor, bold;
      return;
    end
    TA1REC.TA1LOCAT[2] = "SL0ISD1 ";
    TA1REC.TA1MAP = SLWREC.SLWTAMAP;
    set SL5REC empty;
    SL5REC.XWHCD = SL0IM110.XWHCD;
    SL5REC.XARCD = SL0IM110.XARCD;
    SL5REC.SL4ZONE = SL0IM110.SL4ZONE;
    SL5REC.YLTCD = "*";
    SL5REC.YLSCD = "*";
    SL5REC.SL-LOC-SZ-IND = "*";
    SL5REC.SL5MPDFL = "*";

    XSSL5S1(); /* <=== select set of locations*/

    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.SLWMSGNO = 0102; /* <--- press enter to delete msg*/
    else
      if (SQLCA.VAGen_SQLCODE == 0)
        TA1REC.TA1LOCAT[2] = "SL0ISD1 ";
        TA1REC.TA1MAP = SLWREC.SLWTAMAP;
        XSSL5C1(); /* <=== close select set*/
        if (SQLCA.VAGen_SQLCODE == 0)
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SD1H";
          SLWREC.SLWMSGNO = 0087; /* <-- locations exist msg*/
          set SL0IM110.XWHCD cursor, bold;
          set SL0IM110.XARCD bold;
          set SL0IM110.SL4ZONE bold;
          return;
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SD1G";
          SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
          return;
        end
      end
      if (SQLCA.VAGen_SQLCODE == -911)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SD1I";
        SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
        return;
      end
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD1J";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISD1

// key relational edits
Function SL0ISD2()

   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ISD2 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;
  set SL5REC empty;
  SL5REC.XWHCD = SL0IM210.XWHCD;
  SL5REC.XARCD = SL0IM210.XARCD;
  SL5REC.SL4ZONE = SL0IM210.SL4ZONE;
  SL5REC.SL5LOCTN = SL0IM210.SL5LOCTN;

  XSSL5I0(); /* <=== std prod loctn inquiry*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.SLWERRSW = "Y";
      SLWREC.SLWSKYSW = "N";
      SLWREC.XXXLOCID = "SD2A";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD2B";
      SLWREC.SLWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD2C";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

  if (SL0IM210.XMSLMFNC == "I"
   || SL0IM210.XMSLMFNC == "C")
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD2D";
      SLWREC.SLWMSGNO = 0038; /* <-- a/z/l not fnd msg*/
      set SL0IM210.XWHCD bold;
      set SL0IM210.XARCD bold;
      set SL0IM210.SL4ZONE bold;
      set SL0IM210.SL5LOCTN cursor, bold;
    end
    return;
  end

  if (SL0IM210.XMSLMFNC == "A")
    if (SQLCA.VAGen_SQLCODE == 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD2E";
      SLWREC.SLWMSGNO = 0045; /* <-- already exists msg*/
      set SL0IM210.XWHCD bold;
      set SL0IM210.XARCD bold;
      set SL0IM210.SL4ZONE bold;
      set SL0IM210.SL5LOCTN cursor, bold;
    end
    return;
  end

  /* **************************************************************/
  /* remove the flowing code later - 1/02/96*/
  /* **************************************************************/
  if (SL0IM210.XMSLMFNC == "D"
   && SL0IM210.XWHCD == "42"
   && SL0IM210.XARCD == "02"
   && SL0IM210.SL4ZONE == "03")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD2D";
    SLWREC.SLWMSGNO = 0219; /* cannot delete for 42*/
    set SL0IM210.XWHCD bold;
    set SL0IM210.XARCD bold;
    set SL0IM210.SL4ZONE cursor, bold;
    return;
  end
  if (SL0IM210.XMSLMFNC == "D")
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD2F";
      SLWREC.SLWMSGNO = 0035; /* <-- area/zone not fnd msg*/
      set SL0IM210.XWHCD bold;
      set SL0IM210.XARCD bold;
      set SL0IM210.SL4ZONE bold;
      set SL0IM210.SL5LOCTN cursor, bold;
      return;
    end
    if (SL5REC.YLSCD == "01"
     || SL5REC.YLSCD == "05")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD2G";
      SLWREC.SLWMSGNO = 0120;
      set SL0IM210.YLSCD cursor, bold;
    end

    set VREPLC03 empty;
    VREPLC03.XWHCD = SL0IM210.XWHCD;
    VREPLC03.XARCD = SL0IM210.XARCD;
    VREPLC03.SL4ZONE = SL0IM210.SL4ZONE;
    VREPLC03.SL5LOCTN = SL0IM210.SL5LOCTN;

    SL0IS-VREPLC-S();

    if (SQLCA.VAGen_SQLCODE == 100
    ) /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD2G";
      SLWREC.SLWMSGNO = 0454;
      set SL0IM210.XWHCD bold;
      set SL0IM210.XARCD bold;
      set SL0IM210.SL4ZONE bold;
      set SL0IM210.SL5LOCTN cursor, bold;
      return;
    end

    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISD2

// relational edits
Function SL0ISD3()

   /* ************************************************************/
   /* *** edit non-whse fields here as an exception           ****/
   /* *** re: special printer setup/whse change considerations****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 6;
  while (SLWREC.SLWIDX01 > 0)
    if (SL0IM310.SL0IWBPY[SLWIDX01] > " ")
      if (SL0IM310.SL0IWBPY[SLWIDX01] in YSPTBL.YSPCD)
        if (YSPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
           /* next sentence*/
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SD3A";
          SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
          set SL0IM310.SL0IWBPY[SLWIDX01] cursor, bold;
        end
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SD3B";
        SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
        set SL0IM310.SL0IWBPY[SLWIDX01] cursor, bold;
      end
    end
    if (SL0IM310.SL0IWEPY[SLWIDX01] > " ")
      if (SL0IM310.SL0IWEPY[SLWIDX01] in YSPTBL.YSPCD)
        if (YSPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
           /* next sentence*/
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SD3C";
          SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
          set SL0IM310.SL0IWEPY[SLWIDX01] cursor, bold;
        end
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SD3D";
        SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
        set SL0IM310.SL0IWEPY[SLWIDX01] cursor, bold;
      end
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** now ...                                             ****/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** validate all area/zone/prty before creating jcl     ****/
   /* ************************************************************/

  SL4REC.XWHCD = SL0IM310.XWHCD;

  TA1REC.TA1LOCAT[2] = "SL0ISD3 ";
   /* ** TA1REC.TAMAP setup during initialization ***/

  SLWREC.SLWIDX01 = 6;
  SLWREC.SLWFTMSW = "Y";

  while (SLWREC.SLWIDX01 > 0)
    if (SL0IM310.XARCD[SLWIDX01] > " ")
      SLWREC.SLWFTMSW = "N";
      SL4REC.XARCD = SL0IM310.XARCD[SLWIDX01];
      SL4REC.SL4ZONE = SL0IM310.SL4ZONE[SLWIDX01];
      XSSL4I0(); /* <=== validate area/zone*/

      if (SQLCA.VAGen_SQLCODE == 0)
         /* next sentence*/
      else
        SLWREC.SLWERRSW = "Y";
        set SL0IM310.XWHCD bold;
        set SL0IM310.XARCD[SLWIDX01] cursor, bold;
        set SL0IM310.SL4ZONE[SLWIDX01] bold;
        if (SQLCA.VAGen_SQLCODE == 100)
          SLWREC.XXXLOCID = "SD1A";
          SLWREC.SLWMSGNO = 0011; /* <--- try again msg*/
          return;
        end
        if (SQLCA.VAGen_SQLCODE == -911)
          SLWREC.SLWSKYSW = "N";
          SLWREC.XXXLOCID = "SD1A";
          SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
          return;
        end
        if (SQLCA.VAGen_SQLCODE == -811)
          SLWREC.XXXLOCID = "SD1B";
          SLWREC.SLWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
          return;
        end
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SD1C";
        SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
        return;
      end
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end

  if (SLWREC.SLWFTMSW == "Y")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD3E";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0IM310.XARCD[1] cursor, bold;
    set SL0IM310.SL4ZONE[1] bold;
  end

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SLWREC.SLWIDX01 = 6;
  while (SLWREC.SLWIDX01 > 0)
    if (SL0IM310.SL0IWBPY[SLWIDX01] <= SL0IM310.SL0IWEPY[SLWIDX01])
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD3F";
      SLWREC.SLWMSGNO = 0028; /* <--- beg > end msg*/
      set SL0IM310.SL0IWBPY[SLWIDX01] cursor, bold;
      set SL0IM310.SL0IWEPY[SLWIDX01] bold;
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISD3

// key relational edits
Function SL0ISD4()

   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

  if (SL0IM410.SL0IMBPS <= SL0IM410.SL0IWEPS)
     /* next sentence*/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD4A";
    SLWREC.SLWMSGNO = 0028;
    set SL0IM410.SL0IMBPS cursor, bold;
    set SL0IM410.SL0IWEPS bold;
    return;
  end
  if (SL0IM410.SL0IMBLV <= SL0IM410.SL0IWELV)
     /* next sentence*/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD4B";
    SLWREC.SLWMSGNO = 0028;
    set SL0IM410.SL0IMBLV cursor, bold;
    set SL0IM410.SL0IWELV bold;
    return;
  end
  if (SL0IM410.SL0IMBBN <= SL0IM410.SL0IWEBN)
     /* next sentence*/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD4C";
    SLWREC.SLWMSGNO = 0028;
    set SL0IM410.SL0IMBBN cursor, bold;
    set SL0IM410.SL0IWEBN bold;
    return;
  end
  if (SL0IM410.SL0IMBIS <= SL0IM410.SL0IWEIS)
     /* next sentence*/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD4D";
    SLWREC.SLWMSGNO = 0028;
    set SL0IM410.SL0IMBIS cursor, bold;
    set SL0IM410.SL0IWEIS bold;
    return;
  end
  if (SL0IW04.XARPRCFL == "Y")
    if (SL0IM410.XARCD == "00")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD4E";
      SLWREC.SLWMSGNO = 0011;
      set SL0IM410.XARCD bold;
      set SL0IM410.YNTCD cursor, bold;
      return;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISD4

// key obtain table data
Function SL0ISE1()

   /* ************************************************************/
   /* *** make one time table accesses for auxillary and/or   ****/
   /* *** main data                                           ****/
   /* *** note: first time executions before beginning a loop ****/
   /* ***       might also be performed                       ****/
   /* ************************************************************/

  if (SL0IM110.XMSLMFNC == "A")
    return;
  end

   /* ************************************************************/
   /* *** setup map flds from record                          ****/
   /* ************************************************************/

  SL0IM110.SL4ZNDSC = SL4REC.SL4ZNDSC;
  SL0IM110.YZTCD = SL4REC.YZTCD;
  SL0IM110.YRPCD = SL4REC.YRPCD;
  SL0IM110.YSPCD = SL4REC.YSPCD;

   /* ************************************************************/
   /* *** setup xlations/abbrev.s for row/map non-input flds  ****/
   /* ************************************************************/

  if (SL0IM110.YZTCD in YZTTBL.YZTCD)
    SL0IM110.YZTABRV = YZTTBL.YZTABRV[sysVar.arrayIndex];
  else
    SL0IM110.YZTABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE1A";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    set SL0IM110.YZTCD cursor, bold;
    return;
  end

  if (SL0IM110.YRPCD in YRPTBL.YRPCD)
    SL0IM110.YRPABRV = YRPTBL.YRPABRV[sysVar.arrayIndex];
  else
    SL0IM110.YRPABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE1B";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    set SL0IM110.YRPCD cursor, bold;
    return;
  end

  if (SL0IM110.YSPCD in YSPTBL.YSPCD)
    SL0IM110.YSPABRV = YSPTBL.YSPABRV[sysVar.arrayIndex];
  else
    SL0IM110.YSPABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE1C";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    set SL0IM110.YSPCD cursor, bold;
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISE1

// key obtain table data
Function SL0ISE2()

   /* ************************************************************/
   /* *** make one time table accesses for auxillary and/or   ****/
   /* *** main data                                           ****/
   /* *** note: first time executions before beginning a loop ****/
   /* ***       might also be performed                       ****/
   /* ************************************************************/

  if (SL0IM210.XMSLMFNC == "A")
    SL0IM210.YLSCD = "01"; /* <--- default to 01 - empty*/
    SL0IM210.SL-LOC-SZ-IND = "N";
    SL0IM210.SL5MPDFL = "N";
    return;
  end

  if (SL0IM210.XMSLMFNC == "D")
    return;
  end

  SL0IM210.SL5LCDSC = SL5REC.SL5LCDSC;
  SL0IM210.SL5MPDFL = SL5REC.SL5MPDFL;
  SL0IM210.SL-LOC-SZ-IND = SL5REC.SL-LOC-SZ-IND;
  SL0IM210.SL5SZPLC = SL5REC.SL5SZPLC;

  set TA2REC empty;

  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "E";
  SLWREC.SLWWKDTE = SL5REC.SL5STCDT;

  XSSLSXT(); /* <=== xlate ccyymmdd to mmddyy*/

  SL0IM210.SL5STCDT = SLWREC.SLWINDTE;
  SL0IM210.YLTCD = SL5REC.YLTCD;
  SL0IM210.YRPCD = SL5REC.YRPCD;
  SL0IM210.YSPCD = SL5REC.YSPCD;
  SL0IM210.YNTCD = SL5REC.YNTCD;
  SL0IM210.YLSCD = SL5REC.YLSCD;

  SL0IW05.XWHCD = SL5REC.XWHCD;
  SL0IW05.XARCD = SL5REC.XARCD;
  SL0IW05.YLTCD = SL5REC.YLTCD;
  SL0IW05.SL4ZONE = SL5REC.SL4ZONE;
  SL0IW05.SL5LOCTN = SL5REC.SL5LOCTN;

   /* ************************************************************/
   /* *** setup xlations/abbrev.s for row/map non-input flds  ****/
   /* ************************************************************/

  if (SL0IM210.YLTCD in YLTTBL.YLTCD)
    SL0IM210.YLTABRV = YLTTBL.YLTABRV[sysVar.arrayIndex];
  else
    SL0IM210.YLTABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE2B";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    set SL0IM210.YLTCD cursor, bold;
    return;
  end

  if (SL0IM210.YRPCD in YRPTBL.YRPCD)
    SL0IM210.YRPABRV = YRPTBL.YRPABRV[sysVar.arrayIndex];
  else
    SL0IM210.YRPABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE2C";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    set SL0IM210.YRPCD cursor, bold;
    return;
  end

  if (SL0IM210.YSPCD in YSPTBL.YSPCD)
    SL0IM210.YSPABRV = YSPTBL.YSPABRV[sysVar.arrayIndex];
  else
    SL0IM210.YSPABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE2D";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    set SL0IM210.YSPCD cursor, bold;
    return;
  end

  if (SL0IM210.YNTCD in YNTTBL.YNTCD)
    SL0IM210.YNTABRV = YNTTBL.YNTABRV[sysVar.arrayIndex];
  else
    SL0IM210.YNTABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE2E";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    set SL0IM210.YNTCD cursor, bold;
    return;
  end

  if (SL0IM210.YLSCD in YLSTBL.YLSCD)
    SL0IM210.YLSABRV = YLSTBL.YLSABRV[sysVar.arrayIndex];
  else
    SL0IM210.YLSABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE2F";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    set SL0IM210.YLSCD cursor, bold;
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISE2

// key obtain table data
Function SL0ISE4()

   /* ************************************************************/
   /* *** make one time table accesses for auxillary and/or   ****/
   /* *** main data                                           ****/
   /* *** note: first time executions before beginning a loop ****/
   /* ***       might also be performed                       ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISE4

// save current key value(s)
Function SL0ISF1()

   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  COMMAREA.XWHCD = SL0IM110.XWHCD;

  SL0IW01.XWHCD = SL0IM110.XWHCD;
  SL0IW01.XMSLMFNC = SL0IM110.XMSLMFNC;
  SL0IW01.XARCD = SL0IM110.XARCD;
  SL0IW01.SL4ZONE = SL0IM110.SL4ZONE;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISF1

// save current key value(s)
Function SL0ISF2()

   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  COMMAREA.XWHCD = SL0IM210.XWHCD;

  SL0IW02.XWHCD = SL0IM210.XWHCD;
  SL0IW02.XMSLMFNC = SL0IM210.XMSLMFNC;
  SL0IW02.XARCD = SL0IM210.XARCD;
  SL0IW02.SL4ZONE = SL0IM210.SL4ZONE;
  SL0IW02.SL5LOCTN = SL0IM210.SL5LOCTN;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISF2

// save key values
Function SL0ISF3()

   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  COMMAREA.XWHCD = SL0IM310.XWHCD;

  SL0IW03.XWHCD = SL0IM310.XWHCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISF3

// save current key value(s)
Function SL0ISF4()

   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  COMMAREA.XWHCD = SL0IM410.XWHCD;

  SL0IW04.XWHCD = SL0IM410.XWHCD;
  SL0IW04.XARCD = SL0IM410.XARCD;
  SL0IW04.SL4ZONE = SL0IM410.SL4ZONE;
  SL0IW04.SL0IWBIS = SL0IM410.SL0IMBIS;
  SL0IW04.SL0IWEIS = SL0IM410.SL0IWEIS;
  SL0IW04.SL0IWBBN = SL0IM410.SL0IMBBN;
  SL0IW04.SL0IWEBN = SL0IM410.SL0IWEBN;
  SL0IW04.SL0IWBLV = SL0IM410.SL0IMBLV;
  SL0IW04.SL0IWELV = SL0IM410.SL0IWELV;
  SL0IW04.SL0IWBPS = SL0IM410.SL0IMBPS;
  SL0IW04.SL0IWEPS = SL0IM410.SL0IWEPS;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISF4

// setup map key fields
Function SL0ISG1()

   /* ************************************************************/
   /* *** since the 'special error switch' = 'y':             ****/
   /* *** use current ws values in the corresponding map flds ****/
   /* ************************************************************/

  SL0IM110.XWHCD = SL0IW01.XWHCD;
  SL0IM110.XMSLMFNC = SL0IW01.XMSLMFNC;
  SL0IM110.XARCD = SL0IW01.XARCD;
  SL0IM110.SL4ZONE = SL0IW01.SL4ZONE;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISG1

// setup map key fields
Function SL0ISG2()

   /* ************************************************************/
   /* *** since the 'special error switch' = 'y':             ****/
   /* *** use current ws values in the corresponding map flds ****/
   /* ************************************************************/

  SL0IM210.XWHCD = SL0IW02.XWHCD;
  SL0IM210.XMSLMFNC = SL0IW02.XMSLMFNC;
  SL0IM210.XARCD = SL0IW02.XARCD;
  SL0IM210.SL4ZONE = SL0IW02.SL4ZONE;
  SL0IM210.SL5LOCTN = SL0IW02.SL5LOCTN;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISG2

// setup map key fields
Function SL0ISG4()

   /* ************************************************************/
   /* *** use current ws values in the corresponding map flds ****/
   /* ************************************************************/

  SL0IM410.XWHCD = SL0IW04.XWHCD;

  SL0IM410.XARCD = SL0IW04.XARCD;
  SL0IM410.SL4ZONE = SL0IW04.SL4ZONE;
  SL0IM410.SL0IMBIS = SL0IW04.SL0IWBIS;
  SL0IM410.SL0IWEIS = SL0IW04.SL0IWEIS;
  SL0IM410.SL0IMBBN = SL0IW04.SL0IWBBN;
  SL0IM410.SL0IWEBN = SL0IW04.SL0IWEBN;
  SL0IM410.SL0IMBLV = SL0IW04.SL0IWBLV;
  SL0IM410.SL0IWELV = SL0IW04.SL0IWELV;
  SL0IM410.SL0IMBPS = SL0IW04.SL0IWBPS;
  SL0IM410.SL0IWEPS = SL0IW04.SL0IWEPS;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISG4

// ENTER processing
Function SL0ISH0()

   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0ISA0(); /* <=== missing input edits*/

   /* ************************************************************/
   /* *** no missing fields:                                  ****/
   /* *** invalid selection detected in flow when             ****/
   /* *** transfer of control is attempted                    ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISH0

// ENTER processing
Function SL0ISH1()

   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0ISA1(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no missing fields: edit individual fields           ****/
   /* ************************************************************/

  SL0ISC1(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0ISD1(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    SL0ISF1(); /* <=== save current key value(s)*/
    SL0IST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses & setup map ****/
   /* ************************************************************/

  SL0ISE1(); /* <=== obtain table data*/

  if (SLWREC.SLWERRSW == "Y")
    SL0ISF1(); /* <=== save current key value(s)*/
    SL0IST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s)                        ****/
   /* ************************************************************/

  SL0ISF1(); /* <=== save current key value(s)*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISH1

// ENTER processing
Function SL0ISH2()

   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0ISA2(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no missing fields: edit individual fields           ****/
   /* ************************************************************/

  SL0ISC2(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0ISD2(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses & setup map ****/
   /* ************************************************************/

  SL0ISE2(); /* <=== obtain table data*/

  if (SLWREC.SLWERRSW == "Y")
    SL0ISF2(); /* <=== save current key value(s)*/
    SL0IST2(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s)                        ****/
   /* ************************************************************/

  SL0ISF2(); /* <=== save current key value(s)*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISH2

// ENTER processing
Function SL0ISH3()

   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0ISA3(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check the key fields for changes                    ****/
   /* *** if key (whse) changes: validate keys/whse           ****/
   /* ***                        save keys/whse               ****/
   /* ***                        re-setup printers            ****/
   /* ***                        exit for (re)select printer  ****/
   /* ************************************************************/

  SL0ISB3(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "N")
    SL0ISC3(); /* <=== field edits*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
    SL0ISF3(); /* <=== save key values*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0ISD3(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors and pf9 pressed: return                   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf9)
    return;
  end

   /* ************************************************************/
   /* *** no errors: setup & submit jcl                       ****/
   /* ************************************************************/

  SL0IS3A(); /* <=== setup & submit jcl*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** reset the screen for new input & display msg        ****/
   /* *** only blank out the container flds                   ****/
   /* ************************************************************/

  SL0IS3T(); /* <=== reset a/z/bprty/eprty*/

  SLWREC.SLWMSGNO = 0019; /* <--- report(s) printed msg*/
  SLWREC.XXXLOCID = "320 "; /* <=== reset error id*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISH3

// ENTER processing
Function SL0ISH4()

   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0ISA4(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no missing fields: edit individual fields           ****/
   /* ************************************************************/

  SL0ISC4(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0ISD4(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses & setup map ****/
   /* ************************************************************/

  SL0ISE4(); /* <=== obtain table data*/

  if (SLWREC.SLWERRSW == "Y")
    SL0ISF4(); /* <=== save current key value(s)*/
    SL0IST4(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s)                        ****/
   /* ************************************************************/

  SL0ISF4(); /* <=== save current key value(s)*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISH4

Function SL0ISI3()
  TA1REC.TA1LOCAT[2] = "SL0ISI3 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;
  set SL5REC empty;
  SL5REC.XWHCD = SL0IM310.XWHCD;
  SL5REC.XARCD = SL0IM310.XARCD[SLWIDX01];
  SL5REC.SL4ZONE = SL0IM310.SL4ZONE[SLWIDX01];
  SL5REC.YLTCD = "*";
  SL5REC.YLSCD = "01";
  SL5REC.SL-LOC-SZ-IND = "*";
  SL5REC.SL5MPDFL = "*";
  SLWREC.SLWIDX03 = 1;

  XSSL5S1(); /* <=== select set of locations*/

  while (SQLCA.VAGen_SQLCODE != +100
   && SLWREC.SLWMSGNO == 0)
    if (SL5REC.YSPCD >= SL0IM310.SL0IWBPY[SLWIDX01]
     && SL5REC.YSPCD <= SL0IM310.SL0IWEPY[SLWIDX01])
      SL0IW07.SL0IWPRTY[SLWIDX02] = SL5REC.YSPCD;
      SL0IW07.SL0IWAREA[SLWIDX02] = SL5REC.XARCD;
      SL0IW07.SL0IWZONE[SLWIDX02] = SL5REC.SL4ZONE;
      SL0IW07.SL0IWLOCCD[SLWIDX02] = SL5REC.SL5LOCTN;
      SL0IW07.SL0IWSIZE[SLWIDX02] = SL5REC.SL-LOC-SZ-IND;
      if (SL5REC.SL-LOC-SZ-IND != SL0IW08.SL0IWSIZE[SLWIDX03])
        SLWREC.SLWIDX03 = 1;
        while (SLWREC.SLWIDX03 < 11
         && SL0IW08.SL0IWSIZE[SLWIDX03] != " "
         && SL5REC.SL-LOC-SZ-IND != SL0IW08.SL0IWSIZE[SLWIDX03])
          SLWREC.SLWIDX03 = SLWREC.SLWIDX03 + 1;
        end
        if (SL5REC.SL-LOC-SZ-IND != SL0IW08.SL0IWSIZE[SLWIDX03])
          SL0IW08.SL0IWSIZE[SLWIDX03] = SL5REC.SL-LOC-SZ-IND;
        end
      end
      SL0IW00.SL0IWTOTL = SL0IW00.SL0IWTOTL + 1;
      SL0IW08.SL0IWNUMLOC[SLWIDX03] = SL0IW08.SL0IWNUMLOC[SLWIDX03] + 1;
      if (SLWREC.SLWIDX02 >= 33)
        SL0ISK3();
        SLWREC.SLWIDX02 = 1;
      else
        SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
      end
    end
    XSSL5F1(); /* <=== select the next location*/
  end
end // end SL0ISI3

Function SL0ISJ3()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set SL0IW07 empty; /* M001 display storage*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  SL0IW00.TA5TSQIX = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (SL0IW07, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "SJ3"; /* Module identification*/
  SLWREC.SLWMSGNO = 1; /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M320"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
end // end SL0ISJ3

Function SL0ISK3()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  SL0IW07.XXXTSLEN = 433; /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (SL0IW07, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set SL0IW07 empty; /* M001 display storage*/

    SL0IW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "SK3"; /* Module identification*/
  SLWREC.SLWMSGNO = 1; /* Unexpected error occurred*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M320"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

end // end SL0ISK3

Function SL0ISL3()
  set SL0IM320 initial;
  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0IM320.XXXERRID = SLWREC.XXXERRID;
  SLWREC.XXXMAPNM = "SL0IM320";
  SLWREC.XXXTITLE = "EMPTY LOCATIONS";

  SLWREC.SLWTALOC = "SL0I340 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0IM320"; /* TA0020 current map name*/
  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* saved msg no.*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0IM320.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0IM320.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0IM320.XXXTITLE = SLWREC.XXXTITLE;
  SL0IM320.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  SL0IM320.XWHCD = COMMAREA.XWHCD;
  SL0IM320.XWHABRV = SL0IM310.XWHABRV;

  SL0IM320.SL0IMCURPG = SL0IW00.SL0IWCURPG;
  SL0IM320.SL0IMENDPG = SL0IW00.TA5TSQIX;
  SL0IM320.SL0IMTOTL = SL0IW00.SL0IWTOTL;
  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= 32)
    SL0IM320.SL0IMPRTY[SLWIDX01] = SL0IW07.SL0IWPRTY[SLWIDX01];
    SL0IM320.SL0IMAREA[SLWIDX01] = SL0IW07.SL0IWAREA[SLWIDX01];
    SL0IM320.SL0IMZONE[SLWIDX01] = SL0IW07.SL0IWZONE[SLWIDX01];
    SL0IM320.SL0IMLOCCD[SLWIDX01] = SL0IW07.SL0IWLOCCD[SLWIDX01];
    SL0IM320.SL0IMSIZE[SLWIDX01] = SL0IW07.SL0IWSIZE[SLWIDX01];
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end
end // end SL0ISL3

// add : prod loc asgmnt : 0
Function SL0ISLOG()
   /* ************************************************************/
   /* *** add unique row to:  SL log table                    ****/
   /* *** using the std module:  SL0010                       ****/
   /* *** note: use sl10rec to pass log data                  ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -803 = adding duplicate row                       ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

  set SL10REC empty;

  if (SL5REC.XWHCD == "04"
   || SL5REC.XWHCD == "07"
   || SL5REC.XWHCD == "51")
     /* next sentence*/
  else
    return;
  end

  SLQREC.XWHCD = SL5REC.XWHCD;
  SLQREC.ZZZCHGDT = X2CREC.X2CCURDT;
  SLQREC.ZZZCHGTM = X3CREC.X3CCURST;
  SLQREC.XXXTBLNM = "VLOCAT01";
  SLQREC.XXXUSRID = COMMAREA.CAUSERID;
  SLQREC.XXXPGMNB = "SL0I";
  SLQREC.XARCD = SL5REC.XARCD;
  SLQREC.SL4ZONE = SL5REC.SL4ZONE;
  SLQREC.SL5LOCTN = SL5REC.SL5LOCTN;

  SL10REC.SL10W-DSLLOG01 = SLQREC.SLQDATA;
  SL10REC.LTIOFNCTN = "A ";
  SL10REC.XXXPGMNB = "SL0I";

  call "SL0010" (SL10REC) {isNoRefresh = yes, isExternal = yes};

  if (SL10REC.SL10W-RTN-SQLCODE == 0)
    if (SL10REC.SL10W-RTN-CODE == 0)
      return;
    else
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1PGMNM = "SL0010 ";
      TA1REC.TA1LOC = SL10REC.SL10W-RTN-MSG;
      TA1REC.TA1DBASE = "DSTLOC  ";
      TA1REC.TA1TBLVU = "VSSLOG01";
      TA1REC.TA1TBLKE = SLQREC.SLQKEY;
      move SQLCA to ERRSQLCA withV60Compat;
      SLWREC.SLWMSGNO = 0001;
      SLWREC.SLWERRSW = "Y";
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    end
  else
    SLWREC.SLWERRSW = "Y";
    if (SL10W-RTN-SQLCODE == -911)
      SLWREC.SLWSKYSW = "N";
      SLWREC.XXXLOCID = "SLOG";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    else
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1LOCAT[1] = "SL0010 ";
      TA1REC.TA1LOCAT[3] = "ADD     ";
      TA1REC.TA1LOCAT[4] = "ROW     ";
      TA1REC.TA1DBASE = "DSTLOC  ";
      TA1REC.TA1TBLVU = "VSSLOG01";
      TA1REC.TA1TBLKE = SLQREC.SLQKEY;
      SLWREC.SLWMSGNO = 0001;
      move SQLCA to ERRSQLCA withV60Compat;
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISLOG

Function SL0ISM3()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  SL0IW07.XXXTSLEN = 433;
  TA5REC.TA5TSQIX = SL0IW00.SL0IWCURPG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (SL0IW07, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  SLWREC.XXXLOCID = "SM3"; /* Module identification*/
  SLWREC.SLWMSGNO = 1; /* Indicate system error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M320"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

end // end SL0ISM3

// data missing input edits
Function SL0ISN1()

   /* ************************************************************/
   /* *** setup error for each missing data field             ****/
   /* *** note: setup defaults for optional fields, if any    ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0IM110.YSPCD > " ")
     /* next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SN1A";
    SLWREC.SLWMSGNO = 09; /* <--missing required field message*/
    set SL0IM110.YSPCD cursor, bold;
  end

  if (SL0IM110.YRPCD > " ")
     /* next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SN1B";
    SLWREC.SLWMSGNO = 09; /* <--missing required field message*/
    set SL0IM110.YRPCD cursor, bold;
  end

  if (SL0IM110.YZTCD > " ")
     /* next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SN1C";
    SLWREC.SLWMSGNO = 09; /* <--missing required field message*/
    set SL0IM110.YZTCD cursor, bold;
  end

  if (SL0IM110.SL4ZNDSC > " ")
     /* next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SN1D";
    SLWREC.SLWMSGNO = 09; /* <--missing required field message*/
    set SL0IM110.SL4ZNDSC cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISN1

// data missing input edits
Function SL0ISN2()

   /* ************************************************************/
   /* *** setup error for each missing data field             ****/
   /* *** note: setup defaults for optional fields, if any    ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0IM210.YLSCD > " ")
     /* next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SN2A";
    SLWREC.SLWMSGNO = 09; /* <--missing required field message*/
    set SL0IM210.YLSCD cursor, bold;
  end

  if (SL0IM210.YNTCD > " ")
     /* next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SN2C";
    SLWREC.SLWMSGNO = 09; /* <--missing required field message*/
    set SL0IM210.YNTCD cursor, bold;
  end

  if (SL0IM210.SL-LOC-SZ-IND > " ")
     /* next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SN2D";
    SLWREC.SLWMSGNO = 09; /* <--missing required field message*/
    set SL0IM210.SL-LOC-SZ-IND cursor, bold;
  end

  if (SL0IM210.SL5MPDFL > " ")
     /* next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SN2E";
    SLWREC.SLWMSGNO = 09; /* <--missing required field message*/
    set SL0IM210.SL5MPDFL cursor, bold;
  end

  if (SL0IM210.YSPCD > " ")
     /* next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SN2F";
    SLWREC.SLWMSGNO = 09; /* <--missing required field message*/
    set SL0IM210.YSPCD cursor, bold;
  end

  if (SL0IM210.YRPCD > " ")
     /* next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SN2F";
    SLWREC.SLWMSGNO = 09; /* <--missing required field message*/
    set SL0IM210.YRPCD cursor, bold;
  end

  if (SL0IM210.YLTCD > " ")
     /* next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SN2G";
    SLWREC.SLWMSGNO = 09; /* <--missing required field message*/
    set SL0IM210.YLTCD cursor, bold;
  end

  if (SL0IM210.SL5LCDSC > " ")
     /* next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SN2H";
    SLWREC.SLWMSGNO = 09; /* <--missing required field message*/
    set SL0IM210.SL5LCDSC cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISN2

Function SL0ISN3()
  SL0IW00.SL0IWCKLN = SLWREC.SLWIDX02 % 2;
  if (SL0IW00.SL0IWCKLN > 0)

  else
    SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
  end
  if (SLWREC.SLWIDX02 > 29)
    SL0ISK3();
    SLWREC.SLWIDX02 = 1;
  end
  SL0IW07.SL0IWLOCCD[SLWIDX02] = "TOTALS";
  SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 2;
  SLWREC.SLWIDX03 = 1;
  while (SL0IW08.SL0IWSIZE[SLWIDX03] > " "
   && SLWREC.SLWIDX03 < 11)
    SL0IW07.SL0IWAREA[SLWIDX02] = SL0IW08.SL0IWSIZE[SLWIDX03];
    SL0IW07.SL0IWLOCCD[SLWIDX02] = SL0IW08.SL0IWNUMLOC[SLWIDX03];
    SLWREC.SLWIDX03 = SLWREC.SLWIDX03 + 1;
    if (SLWREC.SLWIDX02 >= 33)
      SL0ISK3();
      SLWREC.SLWIDX02 = 1;
    else
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
    end
  end
end // end SL0ISN3

// data missing input edits
Function SL0ISN4()

   /* ************************************************************/
   /* *** setup error for each missing data field             ****/
   /* *** note: setup defaults for optional fields, if any    ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0IM410.YLSCD > " ")
     /* next sentence ***/
  else
    SL0IM410.YLSCD = "01";
  end
  if (SL0IM410.YNTCD > " ")
     /* next sentence ***/
  else
    SL0IM410.YNTCD = "00";
  end
  if (SL0IM410.SL5SZPLC > 0)
     /* next sentence ***/
  else
    SL0IM410.SL5SZPLC = 0;
  end
  if (SL0IM410.SL-LOC-SZ-IND > " ")
     /* next sentence ***/
  else
    SL0IM410.SL-LOC-SZ-IND = "N";
  end
  if (SL0IM410.SL5MPDFL > " ")
     /* next sentence ***/
  else
    SL0IM410.SL5MPDFL = "N";
  end
  if (SL0IM410.YSPCD > " ")
     /* next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SN4A";
    SLWREC.SLWMSGNO = 09; /* <--missing required field message*/
    set SL0IM410.YSPCD cursor, bold;
  end

  if (SL0IM410.YRPCD > " ")
     /* next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SN4B";
    SLWREC.SLWMSGNO = 09; /* <--missing required field message*/
    set SL0IM410.YRPCD cursor, bold;
  end

  if (SL0IM410.YLTCD > " ")
     /* next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SN4C";
    SLWREC.SLWMSGNO = 09; /* <--missing required field message*/
    set SL0IM410.YLTCD cursor, bold;
  end

  if (SL0IM410.SL5LCDSC > " ")
     /* next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SN4D";
    SLWREC.SLWMSGNO = 09; /* <--missing required field message*/
    set SL0IM410.SL5LCDSC cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISN4

// data field edits
Function SL0ISO1()

   /* ************************************************************/
   /* *** edit each data field, even if error detected        ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

  if (SL0IM110.YSPCD in YSPTBL.YSPCD)
    if (YSPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0IM110.YSPABRV = YSPTBL.YSPABRV[sysVar.arrayIndex];
    else
      SL0IM110.YSPABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SO1A";
      SLWREC.SLWMSGNO = 0010; /* <=== inactive msg*/
      set SL0IM110.YSPCD cursor, bold;
    end
  else
    SL0IM110.YSPABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SO1B";
    SLWREC.SLWMSGNO = 0011; /* <=== invalid value msg*/
    set SL0IM110.YSPCD cursor, bold;
  end

  if (SL0IM110.YRPCD in YRPTBL.YRPCD)
    if (YRPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0IM110.YRPABRV = YRPTBL.YRPABRV[sysVar.arrayIndex];
    else
      SL0IM110.YRPABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SO1C";
      SLWREC.SLWMSGNO = 0010; /* <=== inactive msg*/
      set SL0IM110.YRPCD cursor, bold;
    end
  else
    SL0IM110.YRPABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SO1D";
    SLWREC.SLWMSGNO = 0011; /* <=== invalid value msg*/
    set SL0IM110.YRPCD cursor, bold;
  end

  if (SL0IM110.YZTCD in YZTTBL.YZTCD)
    if (YZTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0IM110.YZTABRV = YZTTBL.YZTABRV[sysVar.arrayIndex];
      SL0IW01.YZTPKGFL = YZTTBL.YZTPKGFL[sysVar.arrayIndex];
    else
      SL0IM110.YZTABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SO1E";
      SLWREC.SLWMSGNO = 0010; /* <=== inactive msg*/
      set SL0IM110.YZTCD cursor, bold;
    end
  else
    SL0IM110.YZTABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SO1F";
    SLWREC.SLWMSGNO = 0011; /* <=== invalid value msg*/
    set SL0IM110.YZTCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISO1

// data field edits
Function SL0ISO2()

   /* ************************************************************/
   /* *** edit each data field, even if error detected        ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

  if (SL0IM210.YLSCD in YLSTBL.YLSCD)
    if (YLSTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0IM210.YLSABRV = YLSTBL.YLSABRV[sysVar.arrayIndex];
    else
      SL0IM210.YLSABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SO2A";
      SLWREC.SLWMSGNO = 0010; /* <=== inactive msg*/
      set SL0IM210.YLSCD cursor, bold;
    end
  else
    SL0IM210.YLSABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SO2B";
    SLWREC.SLWMSGNO = 0011; /* <=== invalid value msg*/
    set SL0IM210.YLSCD cursor, bold;
  end

  if (SL0IM210.YNTCD in YNTTBL.YNTCD)
    if (YNTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0IM210.YNTABRV = YNTTBL.YNTABRV[sysVar.arrayIndex];
    else
      SL0IM210.YNTABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SO2C";
      SLWREC.SLWMSGNO = 0010; /* <=== inactive msg*/
      set SL0IM210.YNTCD cursor, bold;
    end
  else
    SL0IM210.YNTABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SO2D";
    SLWREC.SLWMSGNO = 0011; /* <=== invalid value msg*/
    set SL0IM210.YNTCD cursor, bold;
  end

  if (SL0IM210.SL-LOC-SZ-IND == "S"
   || SL0IM210.SL-LOC-SZ-IND == "N"
   || SL0IM210.SL-LOC-SZ-IND == "T"
   || SL0IM210.SL-LOC-SZ-IND == "P"
   || SL0IM210.SL-LOC-SZ-IND == "Q")
     /* next sentence*/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SO2E";
    SLWREC.SLWMSGNO = 0011; /* <=== invalid msg*/
    set SL0IM210.SL-LOC-SZ-IND cursor, bold;
  end

  if (SL0IM210.SL5MPDFL == "Y"
   || SL0IM210.SL5MPDFL == "N")

     /* ******************************************************************/
     /* if changing from multiple to single prod flag, if multiple     **/
     /* products at location change not allowed                        **/
     /* ******************************************************************/

    if (SL5REC.SL5MPDFL == "Y"
     && SL0IM210.SL5MPDFL == "N")

      TA1REC.TA1LOCAT[2] = "SL0ISO2 ";
      TA1REC.TA1MAP = SLWREC.SLWTAMAP;
      set SL6REC empty;
      SL6REC.XWHCD = SL0IM210.XWHCD;
      SL6REC.XARCD = SL0IM210.XARCD;
      SL6REC.SL4ZONE = SL0IM210.SL4ZONE;
      SL6REC.SL5LOCTN = SL0IM210.SL5LOCTN;
      XSSLISC(); /* <===  prod loctn count inquiry*/

      if (SQLCA.VAGen_SQLCODE == 0)
        if (SLIREC.SLICOUNT > 1)
          SL0IW02.SL0IW-SYLOC-FL = "N";
          XSSL6S3();
          SL0IW06.XGPCD = SL6REC.XGPCD;
          SL0IW06.SY1STNBR = SL6REC.SY1STNBR;
          SL0IW06.SY2CLRID = SL6REC.SY2CLRID;
          SL0IW06.XDMCD = SL6REC.XDMCD;
          SL0IW06.XQACD = SL6REC.XQACD;
          SL0IW06.XOWCD = SL6REC.XOWCD;
          SL0IW06.PC2INSEG = SL6REC.PC2INSEG;
          SL0IW06.XEGCD = SL6REC.XEGCD;
          SL0IW06.XPGCD = SL6REC.XPGCD;
          SL0IW06.XUMCD = SL6REC.XUMCD;
          SL0IW06.XSLCD = SL6REC.XSLCD;
          SL0IW06.SY5SZID = SL6REC.SY5SZID;
          SL0IW06.SY1UNPCS = SL6REC.SY1UNPCS;
          while (SL0IW02.SL0IW-SYLOC-FL == "N")
            if (SL6REC.XGPCD != SL0IW06.XGPCD
             || SL6REC.SY1STNBR != SL0IW06.SY1STNBR
             || SL6REC.SY2CLRID != SL0IW06.SY2CLRID
             || SL6REC.XDMCD != SL0IW06.XDMCD
             || SL6REC.XQACD != SL0IW06.XQACD
             || SL6REC.XOWCD != SL0IW06.XOWCD
             || SL6REC.PC2INSEG != SL0IW06.PC2INSEG
             || SL6REC.XEGCD != SL0IW06.XEGCD
             || SL6REC.XPGCD != SL0IW06.XPGCD
             || SL6REC.XUMCD != SL0IW06.XUMCD
             || SL6REC.XSLCD != SL0IW06.XSLCD
             || SL6REC.SY5SZID != SL0IW06.SY5SZID
             || SL6REC.SY1UNPCS != SL0IW06.SY1UNPCS)
              SL0IW02.SL0IW-SYLOC-FL = "Y";
              SLWREC.SLWERRSW = "Y";
              SLWREC.XXXLOCID = "SO2L";
              SLWREC.SLWMSGNO = 0432; /* <--- mult prods exist*/
              set SL0IM210.SL5MPDFL cursor, bold;
            end
            XSSL6F3();
            if (SQLCA.VAGen_SQLCODE == +100)
              SL0IW02.SL0IW-SYLOC-FL = "Y";
            else
              if (SQLCA.VAGen_SQLCODE == -911)
                SLWREC.SLWERRSW = "Y";
                SLWREC.SLWSKYSW = "N";
                SLWREC.XXXLOCID = "SO2M";
                SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
                return;
              end
            end
          end
          XSSL6C3();
        end
      else

        if (SQLCA.VAGen_SQLCODE == -911)
          SLWREC.SLWERRSW = "Y";
          SLWREC.SLWSKYSW = "N";
          SLWREC.XXXLOCID = "SO2M";
          SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
          return;
        end

        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SO2N";
        SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
        return;

      end /* sqlcode check*/
    end /* 'Y', -> 'N'*/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SO2F";
    SLWREC.SLWMSGNO = 0011; /* <=== invalid msg*/
    set SL0IM210.SL5MPDFL cursor, bold;
  end

  if (SL0IM210.YSPCD in YSPTBL.YSPCD)
    if (YSPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0IM210.YSPABRV = YSPTBL.YSPABRV[sysVar.arrayIndex];
    else
      SL0IM210.YSPABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SO2G";
      SLWREC.SLWMSGNO = 0010; /* <=== inactive msg*/
      set SL0IM210.YSPCD cursor, bold;
    end
  else
    SL0IM210.YSPABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SO2H";
    SLWREC.SLWMSGNO = 0011; /* <=== invalid value msg*/
    set SL0IM210.YSPCD cursor, bold;
  end

  if (SL0IM210.YRPCD in YRPTBL.YRPCD)
    if (YRPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0IM210.YRPABRV = YRPTBL.YRPABRV[sysVar.arrayIndex];
    else
      SL0IM210.YRPABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SO2I";
      SLWREC.SLWMSGNO = 0010; /* <=== inactive msg*/
      set SL0IM210.YRPCD cursor, bold;
    end
  else
    SL0IM210.YRPABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SO2J";
    SLWREC.SLWMSGNO = 0011; /* <=== invalid value msg*/
    set SL0IM210.YRPCD cursor, bold;
  end

  if (SL0IM210.YLTCD in YLTTBL.YLTCD)
    if (YLTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0IM210.YLTABRV = YLTTBL.YLTABRV[sysVar.arrayIndex];
    else
      SL0IM210.YLTABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SO2K";
      SLWREC.SLWMSGNO = 0010; /* <=== inactive msg*/
      set SL0IM210.YLTCD cursor, bold;
    end
  else
    SL0IM210.YLTABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SO2L";
    SLWREC.SLWMSGNO = 0011; /* <=== invalid value msg*/
    set SL0IM210.YLTCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISO2

// data field edits
Function SL0ISO4()

   /* ************************************************************/
   /* *** edit each data field, even if error detected        ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

  if (SL0IM410.YLSCD in YLSTBL.YLSCD)
    if (YLSTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0IM410.YLSABRV = YLSTBL.YLSABRV[sysVar.arrayIndex];
    else
      SL0IM410.YLSABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SO4A";
      SLWREC.SLWMSGNO = 0010; /* <=== inactive msg*/
      set SL0IM210.YLSCD cursor, bold;
    end
  else
    SL0IM410.YLSABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SO4B";
    SLWREC.SLWMSGNO = 0011; /* <=== invalid value msg*/
    set SL0IM410.YLSCD cursor, bold;
  end
  if (SL0IM410.SL5SZPLC > 0)
     /* next sentence*/
  else
    SL0IM410.SL5SZPLC = 0;
  end
  if (SL0IM410.YNTCD in YNTTBL.YNTCD)
    if (YNTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0IM410.YNTABRV = YNTTBL.YNTABRV[sysVar.arrayIndex];
    else
      SL0IM410.YNTABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SO4C";
      SLWREC.SLWMSGNO = 0010; /* <=== inactive msg*/
      set SL0IM410.YNTCD cursor, bold;
    end
  else
    SL0IM410.YNTABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SO4D";
    SLWREC.SLWMSGNO = 0011; /* <=== invalid value msg*/
    set SL0IM410.YNTCD cursor, bold;
  end
  if (SL0IM410.SL-LOC-SZ-IND == "S"
   || SL0IM410.SL-LOC-SZ-IND == "N"
   || SL0IM410.SL-LOC-SZ-IND == "T"
   || SL0IM410.SL-LOC-SZ-IND == "P"
   || SL0IM410.SL-LOC-SZ-IND == "Q")
     /* next sentence*/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SO4E";
    SLWREC.SLWMSGNO = 0011; /* <=== invalid msg*/
    set SL0IM410.SL-LOC-SZ-IND cursor, bold;
  end
  if (SL0IM410.SL5MPDFL == "Y"
   || SL0IM410.SL5MPDFL == "N")
     /* next sentence*/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SO4F";
    SLWREC.SLWMSGNO = 0011; /* <=== invalid msg*/
    set SL0IM410.SL5MPDFL cursor, bold;
  end
  if (SL0IM410.YSPCD in YSPTBL.YSPCD)
    if (YSPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0IM410.YSPABRV = YSPTBL.YSPABRV[sysVar.arrayIndex];
    else
      SL0IM410.YSPABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SO4G";
      SLWREC.SLWMSGNO = 0010; /* <=== inactive msg*/
      set SL0IM410.YSPCD cursor, bold;
    end
  else
    SL0IM410.YSPABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SO4H";
    SLWREC.SLWMSGNO = 0011; /* <=== invalid value msg*/
    set SL0IM410.YSPCD cursor, bold;
  end
  if (SL0IM410.YRPCD in YRPTBL.YRPCD)
    if (YRPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0IM410.YRPABRV = YRPTBL.YRPABRV[sysVar.arrayIndex];
    else
      SL0IM410.YRPABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SO4I";
      SLWREC.SLWMSGNO = 0010; /* <=== inactive msg*/
      set SL0IM410.YRPCD cursor, bold;
    end
  else
    SL0IM410.YRPABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SO4J";
    SLWREC.SLWMSGNO = 0011; /* <=== invalid value msg*/
    set SL0IM410.YRPCD cursor, bold;
  end
  if (SL0IM410.YLTCD in YLTTBL.YLTCD)
    if (YLTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0IM410.YLTABRV = YLTTBL.YLTABRV[sysVar.arrayIndex];
    else
      SL0IM410.YLTABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SO4K";
      SLWREC.SLWMSGNO = 0010; /* <=== inactive msg*/
      set SL0IM410.YLTCD cursor, bold;
    end
  else
    SL0IM410.YLTABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SO4L";
    SLWREC.SLWMSGNO = 0011; /* <=== invalid value msg*/
    set SL0IM410.YLTCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISO4

// data relational edits
Function SL0ISP1()

   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

  if (SL0IW01.XARPRCFL == SL0IW01.YZTPKGFL)
     /* next sentence*/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SP1A";
    SLWREC.SLWMSGNO = 0149; /* <--- zone type msg*/
    set SL0IM110.YZTCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISP1

// data relational edits
Function SL0ISP2()

   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

  if (SL0IM210.XMSLMFNC == "C")
    if (SL0IM210.YLSCD == SL5REC.YLSCD)
      return;
    end
    if (SL5REC.YLSCD == "01" /* **** empty *****/
     || SL5REC.YLSCD == "02") /* **** occupied *****/
      if (SL0IM210.YLSCD == "05") /* **** frozen *****/
        SL0IM210.SL5STCDT = X2CREC.X2CCURSD;
        SLWREC.SLWWKDTE = X2CREC.X2CCURDT;
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SP2A";
        SLWREC.SLWMSGNO = 0098; /* <--- chg to frozen msg*/
        set SL0IM210.YLSCD cursor, bold;
      end
      return;
    end
    if (SL5REC.YLSCD == "06") /* replenishment reserved***/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SP2A";
      SLWREC.SLWMSGNO = 0397; /* <--- cant change*/
      set SL0IM210.YLSCD cursor, bold;
      return;
    end
    if (SL5REC.YLSCD == "08") /* planned reserved *****/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SP2A";
      SLWREC.SLWMSGNO = 0397; /* <--- cant change*/
      set SL0IM210.YLSCD cursor, bold;
      return;
    end
    if (SL5REC.YLSCD == "05") /* **** frozen *****/
      TA1REC.TA1LOCAT[2] = "SL0ISP2 ";
      TA1REC.TA1MAP = SLWREC.SLWTAMAP;
      set SL6REC empty;
      SL6REC.XWHCD = SL0IM210.XWHCD;
      SL6REC.XARCD = SL0IM210.XARCD;
      SL6REC.SL4ZONE = SL0IM210.SL4ZONE;
      SL6REC.SL5LOCTN = SL0IM210.SL5LOCTN;
      SL6REC.SL2PALET = "*****";
      SL6REC.SL2CASE = "********";

      XSSL6S4(); /* <=== std prod loctn inquiry*/

      if (SQLCA.VAGen_SQLCODE == 0)
        if (SL0IM210.YLSCD == "02") /* <-- status occupied*/
          /* next sentence*/
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SP2B";
          SLWREC.SLWMSGNO = 0095;
          set SL0IM210.YLSCD cursor, bold;
        end
        return;
      else
        if (SQLCA.VAGen_SQLCODE == +100)
          if (SL0IM210.YLSCD == "01" /* <-- STATUS empty*/
           || SL0IM210.YLSCD == "05") /* <-- STATUS frozen*/
            /* next sentence*/
          else
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SP2C";
            SLWREC.SLWMSGNO = 0096;
            set SL0IM210.YLSCD cursor, bold;
          end
          return;
        end
        if (SQLCA.VAGen_SQLCODE == -911)
          SLWREC.SLWSKYSW = "N";
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SP2D";
          SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
          return;
        end
        SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
        SLWREC.XXXLOCID = "SP2E";
        SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
        return;
      end
    end
  end

  if (SL0IM210.XMSLMFNC == "A")
    if (SL0IM210.YLSCD == "01" /* ******** empty *******/
     || SL0IM210.YLSCD == "05") /* ******** frozen *******/
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SP2G";
      SLWREC.SLWMSGNO = 0097;
      set SL0IM210.YLSCD cursor, bold;
    end
    return;
  end

  if (SL0IM210.XMSLMFNC == "D")
    if (SL0IM210.YLSCD == "01") /* <--- location status 01 - empty*/
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SP2H";
      SLWREC.SLWMSGNO = 0087;
      set SL0IM210.YLSCD cursor, bold;
    end
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISP2

// data relational edits
Function SL0ISP4()

   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* none required*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISP4

// reset screen (clear)
Function SL0ISQ1()

   /* ************************************************************/
   /* *** "clear" map =  fld values, attributes & cursor      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0IM110 initial; /* resets entire screen*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0IM110.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0IM110.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0IM110.XXXTITLE = SLWREC.XXXTITLE;
  SL0IM110.XXXCURDT = X2CREC.X2CCURSD;
  SL0IM110.XWHCD = SL0IW01.XWHCD;
  SL0IM110.XMSLMFNC = SL0IW01.XMSLMFNC;
  SL0IM110.XARCD = SL0IW01.XARCD;
  SL0IM110.SL4ZONE = SL0IW01.SL4ZONE;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set SL0IW01 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISQ1

// reset screen (clear)
Function SL0ISQ2()

   /* ************************************************************/
   /* *** "clear" map =  fld values, attributes & cursor      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  if (SL0IM210.XMSLMFNC == "A")
    SL0IM210.SL5LOCTN = " ";
    set SL0IW02 empty; /* appl. working storage area*/
    return;
  end

  converseLib.clearScreen();
  set SL0IM210 initial; /* resets entire screen*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0IM210.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0IM210.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0IM210.XXXTITLE = SLWREC.XXXTITLE;
  SL0IM210.XXXCURDT = X2CREC.X2CCURSD;

  SL0IM210.XWHCD = SL0IW02.XWHCD;
  SL0IM210.XMSLMFNC = SL0IW02.XMSLMFNC;
  SL0IM210.XARCD = SL0IW02.XARCD;
  SL0IM210.SL4ZONE = SL0IW02.SL4ZONE;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set SL0IW02 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISQ2

// data entry edits
Function SL0ISR1()

   /* ************************************************************/
   /* *** check for missing data fields                       ****/
   /* ************************************************************/

  SL0ISN1(); /* <=== data missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no missing fields: edit individual data fields      ****/
   /* ************************************************************/

  SL0ISO1(); /* <=== data field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational data field edits        ****/
   /* ************************************************************/

  SL0ISP1(); /* <=== data relational edits*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISR1

// data entry edits
Function SL0ISR2()

   /* ************************************************************/
   /* *** check for missing data fields                       ****/
   /* ************************************************************/

  SL0ISN2(); /* <=== data missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no missing fields: edit individual data fields      ****/
   /* ************************************************************/

  SL0ISO2(); /* <=== data field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational data field edits        ****/
   /* ************************************************************/

  SL0ISP2(); /* <=== data relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check more data field edits              ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf12)
      /* don't do anything in dstloc.vreplc03 table*/
  else
      /* this sgrp is performed only for enter key*/
    SL0ISS2(); /* <=== MORE relational edits*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISR2

// data entry edits
Function SL0ISR4()

   /* ************************************************************/
   /* *** check for missing data fields                       ****/
   /* ************************************************************/

  SL0ISN4(); /* <=== data missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no missing fields: edit individual data fields      ****/
   /* ************************************************************/

  SL0ISO4(); /* <=== data field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational data field edits        ****/
   /* ************************************************************/

  SL0ISP4(); /* <=== data relational edits*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISR4

// data relational edits
Function SL0ISS2()

   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

  if (SL0IM210.XMSLMFNC == "C")
    if (SL0IM210.YLSCD != SL5REC.YLSCD)
      if (SL0IM210.YLSCD == "05")
        SL0I241();
      else
        if (SL0IM210.YLSCD == "01")
          SL0I242();
        else
          if (SL0IM210.YLSCD == "02")
            SL0I242();
          end
        end
      end
    else
      if (SL0IM210.YLTCD != SL5REC.YLTCD)
        SL0I242();
      else
        if (SL0IM210.YSPCD != SL5REC.YSPCD
         || SL0IM210.SL-LOC-SZ-IND != SL5REC.SL-LOC-SZ-IND)
          SL0I242(); /* update dstloc.vreplc03*/
        end
      end
    end
  end

  if (SL0IM210.XMSLMFNC == "A")
    if (SL0IM210.YLSCD == "01") /* ******** empty *******/
      SL0I242();
    end
  end

  if (SL0IM210.XMSLMFNC == "D")
    SL0I241();
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISS2

// reset screen (empty)
Function SL0IST1()

   /* ************************************************************/
   /* *** "empty" map =  fld values only                      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0IM110 empty; /* resets entire screen*/

  SL0ISG1(); /* <=== setup map key fields*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0IM110.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0IM110.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0IM110.XXXTITLE = SLWREC.XXXTITLE;
  SL0IM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set SL0IW01 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0IST1

// reset screen (empty)
Function SL0IST2()

   /* ************************************************************/
   /* *** "empty" map =  fld values only                      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0IM210 empty; /* resets entire screen*/

  SL0ISG2(); /* <=== setup map key fields*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0IM210.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0IM210.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0IM210.XXXTITLE = SLWREC.XXXTITLE;
  SL0IM210.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set SL0IW02 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0IST2

// reset screen (empty)
Function SL0IST4()

   /* ************************************************************/
   /* *** "empty" map =  fld values only                      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0IM410 empty; /* resets entire screen*/

  SL0ISG4(); /* <=== setup map key fields*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0IM410.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0IM410.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0IM410.XXXTITLE = SLWREC.XXXTITLE;
  SL0IM410.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  SLWREC.SLWFTMSW = "Y";

  set SL0IW04 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0IST4

// update database
Function SL0ISU1()

   /* ************************************************************/
   /* *** use the saved keys, obtained database data and the  ****/
   /* *** input changes (including new data) to update the    ****/
   /* *** specified database record (or add if new record)    ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if add, add row & exit                              ****/
   /* *** since keys & data have been setup                   ****/
   /* ************************************************************/

  if (SL0IM110.XMSLMFNC == "A")
     /* ************************************************************/
     /* *** setup data flds only since key flds have been setup ****/
     /* *** during key edits no matter what function is used    ****/
     /* ************************************************************/
    SL4REC.YZTCD = SL0IM110.YZTCD;
    SL4REC.SL4ZNDSC = SL0IM110.SL4ZNDSC;
    SL4REC.YSPCD = SL0IM110.YSPCD;
    SL4REC.YRPCD = SL0IM110.YRPCD;
    TA1REC.TA1LOCAT[2] = "SL0ISU1 ";
    TA1REC.TA1MAP = SLWREC.SLWTAMAP;

    XSSL4A0(); /* <=== std area/zone add*/

    if (SQLCA.VAGen_SQLCODE == 0)
      return;
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        SLWREC.SLWSKYSW = "N";
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SU1A";
        SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
        return;
      end
      if (SQLCA.VAGen_SQLCODE == -803) /* <=== for ADD*/
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SU1B";
        SLWREC.SLWMSGNO = 0045; /* <--- duplicate add msg*/
        set SL0IM110.XARCD cursor;
        return;
      end
      SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
      SLWREC.XXXLOCID = "SU1C";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
  end

   /* ************************************************************/
   /* *** either change or delete will require a read for     ****/
   /* *** update (without new data in row) before replacing   ****/
   /* *** or deleting this row                                ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ISU1 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL4U0(); /* <=== read for update w/out data*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SU1D";
      SLWREC.SLWMSGNO = 0033; /* <--- row del since last read*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SU1E";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SU1F";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** if change, just replace & exit                      ****/
   /* *** since keys have been setup & row is read for update ****/
   /* ************************************************************/

  if (SL0IM110.XMSLMFNC == "C")
     /* ************************************************************/
     /* *** setup data flds only since key flds have been setup ****/
     /* *** during key edits no matter what function is used    ****/
     /* ************************************************************/
    SL4REC.YZTCD = SL0IM110.YZTCD;
    SL4REC.SL4ZNDSC = SL0IM110.SL4ZNDSC;
    SL4REC.YSPCD = SL0IM110.YSPCD;
    SL4REC.YRPCD = SL0IM110.YRPCD;
    TA1REC.TA1LOCAT[2] = "SL0ISU1 ";
    TA1REC.TA1MAP = SLWREC.SLWTAMAP;

    XSSL4R0(); /* <=== std area/zone update*/

    if (SQLCA.VAGen_SQLCODE == 0)
      return;
    else
      if (SQLCA.VAGen_SQLCODE == +100)
        SLWREC.SLWSKYSW = "N";
        SLWREC.SLWERRSW = "Y";
        if (SL4REC.SL4DATA > " ")
          SLWREC.XXXLOCID = "SU1G";
          SLWREC.SLWMSGNO = 0032; /* <--- row chg since last read*/
        else
          SLWREC.XXXLOCID = "SU1H";
          SLWREC.SLWMSGNO = 0033; /* <--- row del since last read*/
        end
        return;
      end
      SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
      SLWREC.XXXLOCID = "SU1I";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
  end

   /* ************************************************************/
   /* *** if delete, just delete & exit                       ****/
   /* *** since keys & data have been setup                   ****/
   /* *** and this row has been read for update               ****/
   /* ************************************************************/

  if (SL0IM110.XMSLMFNC == "D")
    TA1REC.TA1LOCAT[2] = "SL0ISU1 ";
    TA1REC.TA1MAP = SLWREC.SLWTAMAP;

    XSSL4D0(); /* <=== std prod loctn inquiry*/

    if (SQLCA.VAGen_SQLCODE == 0)
      return;
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SU1J";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
  end

   /* ************************************************************/
   /* *** fall thru error - code shouldn't be executed        ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "140Q";
  SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISU1

// update database
Function SL0ISU2()
   /* ************************************************************/
   /* *** use the saved keys, obtained database data and the  ****/
   /* *** input changes (including new data) to update the    ****/
   /* *** specified database record (or add if new record)    ****/
   /* ************************************************************/

  if (SL0IM210.XMSLMFNC == "A"
   || SL0IM210.XMSLMFNC == "C")
     /* ************************************************************/
     /* *** setup data flds only since key flds have been setup ****/
     /* *** during key edits no matter what function is used    ****/
     /* ************************************************************/
    SL5REC.YLTCD = SL0IM210.YLTCD;
    SL5REC.YLSCD = SL0IM210.YLSCD;
    SL5REC.SL5LCDSC = SL0IM210.SL5LCDSC;
    SL5REC.YSPCD = SL0IM210.YSPCD;
    SL5REC.YRPCD = SL0IM210.YRPCD;
    SL5REC.SL-LOC-SZ-IND = SL0IM210.SL-LOC-SZ-IND;
    SL5REC.SL5MPDFL = SL0IM210.SL5MPDFL;
    SL5REC.YNTCD = SL0IM210.YNTCD;
    SL5REC.SL5SZPLC = SL0IM210.SL5SZPLC;
  end

  set SLQREC empty;

  TA1REC.TA1LOCAT[2] = "SL0ISU2 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  if (SL0IM210.XMSLMFNC == "A")
    SL5REC.SL5STCDT = X2CREC.X2CCURDT;

    XSSL5A0(); /* <=== std location add*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SLQREC.LTIOFNCTN = "A ";
      SL0ISLOG(); /* <=== add sllog row*/
      if (SL10REC.SL10W-RTN-CODE == 0
       && SL10REC.SL10W-RTN-SQLCODE == 0)
        SL0ISZ1(); /* <=== add cyc cnt location*/
      end
    else
      SLWREC.SLWERRSW = "Y";
      if (SQLCA.VAGen_SQLCODE == -911)
        SLWREC.SLWSKYSW = "N";
        SLWREC.XXXLOCID = "SU2A";
        SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      else
        if (SQLCA.VAGen_SQLCODE == -803)
          SLWREC.XXXLOCID = "SU2B";
          SLWREC.SLWMSGNO = 0045; /* <--- duplicate add msg*/
          set SL0IM210.SL5LOCTN cursor, bold;
        else
          SLWREC.XXXLOCID = "SU2C";
          SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
        end
      end
    end
    return;
  end

   /* ************************************************************/
   /* *** either change or delete will require a read for     ****/
   /* *** update (without new data in row) before replacing   ****/
   /* *** or deleting this row                                ****/
   /* ************************************************************/

  XSSL5U0(); /* <=== sL read for update w/o data*/

  if (SQLCA.VAGen_SQLCODE != 0)
    SLWREC.SLWERRSW = "Y";
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.XXXLOCID = "SU2D";
      SLWREC.SLWMSGNO = 0033; /* <--- row del since last read*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        SLWREC.SLWSKYSW = "N";
        SLWREC.XXXLOCID = "SU2E";
        SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      else
        SLWREC.XXXLOCID = "SU2F";
        SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      end
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "SL0ISU2 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

   /* ************************************************************/
   /* *** if change, replace & exit after setting up data     ****/
   /* *** since keys have been setup & row is read for update ****/
   /* ************************************************************/

  if (SL0IM210.XMSLMFNC == "C")

    /* slc MOVE X2CREC.X2CCURDT TO SL5REC.SL5STCDT;*/
    SL5REC.SL5STCDT = SLWREC.SLWWKDTE;

    XSSL5R0(); /* <=== std location update*/

    if (SQLCA.VAGen_SQLCODE == 0)
      SLQREC.LTIOFNCTN = "C ";
      SL0ISLOG(); /* <=== add sllog row*/
      if (SL10REC.SL10W-RTN-CODE != 0
       || SL10REC.SL10W-RTN-SQLCODE != 0)
        return;
      end
    end

    CY7REC.XWHCD = SL5REC.XWHCD;
    CY7REC.XARCD = SL5REC.XARCD;
    CY7REC.YLTCD = SL5REC.YLTCD;
    CY7REC.SL4ZONE = SL5REC.SL4ZONE;
    CY7REC.SL5LOCTN = SL5REC.SL5LOCTN;

    SL0ISZ3(); /* <=== cycle count change*/

    if (SQLCA.VAGen_SQLCODE != 0)
      SLWREC.SLWERRSW = "Y";
      if (SQLCA.VAGen_SQLCODE == +100)
        SLWREC.SLWSKYSW = "N";
        if (SL5REC.SL5DATA > " ")
          SLWREC.XXXLOCID = "SU2G";
          SLWREC.SLWMSGNO = 0032; /* <--- row chg since last read*/
        else
          SLWREC.XXXLOCID = "SU2H";
          SLWREC.SLWMSGNO = 0033; /* <--- row del since last read*/
        end
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          SLWREC.SLWSKYSW = "N";
          SLWREC.XXXLOCID = "SU2I";
          SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
        else
          SLWREC.XXXLOCID = "SU2J";
          SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
        end
      end
    end
    return;
  end

   /* ************************************************************/
   /* *** if delete, delete & exit                            ****/
   /* *** since keys have been setup & row is read for update ****/
   /* ************************************************************/

  if (SL0IM210.XMSLMFNC == "D")

     /* ********************************************************/
     /* if delete ensure  no products exist in the location ***/
     /* (check of dstloc.vsyloc01)                        ***/
     /* ********************************************************/
    set SL6REC empty;
    SL6REC.XWHCD = SL0IM210.XWHCD;
    SL6REC.XARCD = SL0IM210.XARCD;
    SL6REC.SL4ZONE = SL0IM210.SL4ZONE;
    SL6REC.SL5LOCTN = SL0IM210.SL5LOCTN;
    SL6REC.SL2PALET = "*****";
    SL6REC.SL2CASE = "********";

    XSSL6S4(); /* <=== std prod loctn inquiry*/
    if (SQLCA.VAGen_SQLCODE == +100)
         /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SU2K";
        SLWREC.SLWMSGNO = 0433; /* <--- prod(s) exist in location*/
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          SLWREC.SLWSKYSW = "N";
          SLWREC.XXXLOCID = "SU2L";
          SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
        else
          SLWREC.SLWSKYSW = "Y";
          SLWREC.XXXLOCID = "SU2M";
          SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
        end
      end
      return;
    end

    TA1REC.TA1LOCAT[2] = "SL0ISU2 ";
    TA1REC.TA1MAP = SLWREC.SLWTAMAP;

     /* ********************************************************/
     /* ensure that no active product assignment exists     ***/
     /* (check dstoc.vsyasg01)                            ***/
     /* ********************************************************/
    set SL7REC empty;
    SL7REC.XWHCD = SL0IM210.XWHCD;
    SL7REC.XARCD = SL0IM210.XARCD;
    SL7REC.SL4ZONE = SL0IM210.SL4ZONE;
    SL7REC.SL5LOCTN = SL0IM210.SL5LOCTN;
    SL7REC.XXXSTAT = "A";
    SL7REC.XGPCD = "*";
    SL7REC.SY1STNBR = "*";
    SL7REC.SY2CLRID = "*";
    SL7REC.XDMCD = "*";
    SL7REC.XQACD = "*";
    SL7REC.XOWCD = "*";
    SL7REC.XSDCD = "*";
    SL7REC.XSACD = "*";
    SL7REC.XPGCD = "*";
    SL7REC.XUMCD = "*";
    SL7REC.SY5SZID = -1;

    SLVREC.SLVSDT = +000000000;
    SLVREC.SLVEDT = +999999999;

    XSSL7S7(); /* <=== std prod assign inquiry*/
    if (SQLCA.VAGen_SQLCODE == +100)
         /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SU2N";
        SLWREC.SLWMSGNO = 0434; /* <--- active prod assign exists*/
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          SLWREC.SLWSKYSW = "N";
          SLWREC.XXXLOCID = "SU2O";
          SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
        else
          SLWREC.SLWSKYSW = "Y";
          SLWREC.XXXLOCID = "SU2P";
          SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
        end
      end
      return;
    end

    TA1REC.TA1LOCAT[2] = "SL0ISU2 ";
    TA1REC.TA1MAP = SLWREC.SLWTAMAP;

    XSSL5D0(); /* <=== std location delete*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SLQREC.LTIOFNCTN = "D ";
      SL0ISLOG(); /* <=== add sllog row*/
      if (SL10REC.SL10W-RTN-CODE == 0
       && SL10REC.SL10W-RTN-SQLCODE == 0)
        set CY7REC empty;
        CY7REC.XWHCD = SL5REC.XWHCD;
        CY7REC.XARCD = SL5REC.XARCD;
        CY7REC.YLTCD = SL5REC.YLTCD;
        CY7REC.SL4ZONE = SL5REC.SL4ZONE;
        CY7REC.SL5LOCTN = SL5REC.SL5LOCTN;
        XSCY7I0(); /* <=== select unique row*/
        if (SQLCA.VAGen_SQLCODE == 0)
          CY7REC.XXXSTAT = "I";
          SL0ISZ2(); /* <=== update cyc cnt location*/
        else
          SLWREC.SLWERRSW = "Y";
          if (SQLCA.VAGen_SQLCODE == +100)
            SLWREC.SLWSKYSW = "N";
            SLWREC.XXXLOCID = "SU2Q";
            SLWREC.SLWMSGNO = 0033; /* <--- row del since last read*/
          end
        end
      end
    else
      SLWREC.SLWERRSW = "Y";
      if (SQLCA.VAGen_SQLCODE == +100)
        SLWREC.SLWSKYSW = "N";
        SLWREC.XXXLOCID = "SU2R";
        SLWREC.SLWMSGNO = 0033; /* <--- row del since last read*/
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          SLWREC.SLWSKYSW = "N";
          SLWREC.XXXLOCID = "SU2S";
          SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
        else
          SLWREC.XXXLOCID = "SU2T";
          SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
        end
      end
    end
    return;
  end

   /* ************************************************************/
   /* *** fall thru error - code shouldn't be executed        ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "240Z";
  SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISU2

// update database
Function SL0ISU4()

   /* ************************************************************/
   /* *** use the saved keys, obtained database data and the  ****/
   /* *** input changes (including new data) to add the       ****/
   /* *** specified range of rows                             ****/
   /* *** note: skip any rows fnd in range (-803 not error)   ****/
   /* *** note: update & delete functions will be added later ****/
   /* ************************************************************/

  set SL5REC empty;

  SL5REC.XWHCD = SL0IM410.XWHCD;
                                   /* **** move whse, area, zone*/
  SL5REC.XARCD = SL0IM410.XARCD; /* to first part of loc key ******/
  SL5REC.SL4ZONE = SL0IM410.SL4ZONE;
  SL5REC.YLTCD = SL0IM410.YLTCD;
  SL5REC.YLSCD = SL0IM410.YLSCD;
  SL5REC.SL5STCDT = X2CREC.X2CCURDT;
  SL5REC.SL5LCDSC = SL0IM410.SL5LCDSC;
  SL5REC.YSPCD = SL0IM410.YSPCD;
  SL5REC.YRPCD = SL0IM410.YRPCD;
  SL5REC.SL-LOC-SZ-IND = SL0IM410.SL-LOC-SZ-IND;
  SL5REC.SL5MPDFL = SL0IM410.SL5MPDFL;
  SL5REC.YNTCD = SL0IM410.YNTCD;
  SL5REC.SL5SZPLC = SL0IM410.SL5SZPLC;

   /* ************************************************************/
   /* *** loop to process location codes                      ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = SL0IM410.SL0IMBIS; /* <-- move beg aisle to x1*/
  while (SLWREC.SLWIDX01 <= SL0IM410.SL0IWEIS)
    SLWREC.SLWIDX02 = SL0IM410.SL0IMBBN; /* <-- move beg bin to x2*/
    while (SLWREC.SLWIDX02 <= SL0IM410.SL0IWEBN)
      SLWREC.SLWIDX03 = SL0IM410.SL0IMBLV; /* <-- move beg lvl to x3*/
      while (SLWREC.SLWIDX03 <= SL0IM410.SL0IWELV)
        SLWREC.SLWIDX04 = SL0IM410.SL0IMBPS;
                                   /* <-- move beg psn to x4*/
        while (SLWREC.SLWIDX04 <= SL0IM410.SL0IWEPS)
          SL0ISUA(); /* <=== add sl5rec*/
          if (SLWREC.SLWERRSW == "Y")
            return;
          end
          if (SL0IM410.YLSCD == "01"
           || SL0IM410.YLSCD == "02")
            SL0I421();
          end
          SLWREC.SLWIDX04 = SLWREC.SLWIDX04 + 1;
        end
        SLWREC.SLWIDX03 = SLWREC.SLWIDX03 + 1;
      end
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISU4

// add specific location
Function SL0ISUA()
   /* ************************************************************/
   /* *** setup location value using the current index values ****/
   /* *** and add both the stock locate & cycle cnt locations ****/
   /* *** note: if dupl., just continue (no -803 error)       ****/
   /* ************************************************************/

  SL0IW04.SL0IWNIS = SLWREC.SLWIDX01;
  SL0IW04.SL0IWNBN = SLWREC.SLWIDX02;
  SL0IW04.SL0IWNLV = SLWREC.SLWIDX03;
  SL0IW04.SL0IWNPS = SLWREC.SLWIDX04;
  SL5REC.SL5LOCTN = SL0IW04.SL0IWNLO;

  TA1REC.TA1LOCAT[2] = "SL0ISUA ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL5A0(); /* <=== std location insert*/

  if (SQLCA.VAGen_SQLCODE != 0) /* <=== bad return code*/
    if (SQLCA.VAGen_SQLCODE == -803)
       /* ===> note: no error, just skip add*/
      SL0ISZR(); /* <=== resetup correct data*/
      SLWREC.XXXLOCID = "SUAA";
      SLWREC.SLWMSGNO = 0045; /* <--- duplicates exist msg*/
    else
      SLWREC.SLWERRSW = "Y";
      if (SQLCA.VAGen_SQLCODE == -911)
        SLWREC.SLWSKYSW = "N";
        SLWREC.XXXLOCID = "SUAB";
        SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      else
        SLWREC.XXXLOCID = "SUAC";
        SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
        SL0IST4(); /* <=== clear scrn (empty)*/
      end
    end
    return;
  end

  set SLQREC empty;
  SLQREC.LTIOFNCTN = "A ";

  SL0ISLOG(); /* <=== add sllog row*/

  if (SL10REC.SL10W-RTN-CODE != 0 /* bad return from sl0010*/
   || SL10REC.SL10W-RTN-SQLCODE != 0)
    return;
  end

  SL0ISZ1(); /* <=== add cycle cnt location*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISUA

// CAITEM  processing
Function SL0ISY0()

   /* ************************************************************/
   /* *** if entered, use CAITEM data by first moving it to   ****/
   /* *** a ws field to make use of it with "redefines"       ****/
   /* *** note: CAITEM = character data as passed             ****/
   /* ************************************************************/

  SLWREC.CAITEM = COMMAREA.CAITEM;

  if (SLWREC.SLWCASNO > " ")
    SL0IM010.XMSLMSNO = SLWREC.SLWCASNO;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISY0

// insert dcycle.vcyloc01 row
Function SL0ISZ1()

   /* ************************************************************/
   /* *** add the related cycle count location                ****/
   /* ************************************************************/

  set CY7REC empty;
  CY7REC.XWHCD = SL5REC.XWHCD;
  CY7REC.XARCD = SL5REC.XARCD;
  CY7REC.YLTCD = SL5REC.YLTCD;
  CY7REC.SL4ZONE = SL5REC.SL4ZONE;
  CY7REC.SL5LOCTN = SL5REC.SL5LOCTN;

  TA1REC.TA1LOCAT[2] = "SL0ISZ1 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSCY7I0(); /* <=== select unique row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* <=== if row exists*/
    CY7REC.XXXSTAT = "A";
    SL0ISZ2(); /* <=== update cyc cnt loc*/
  else
    XSCY7A0(); /* <=== add row*/
    if (SQLCA.VAGen_SQLCODE == 0)
      return;
    else
      SLWREC.SLWERRSW = "Y";
      if (SQLCA.VAGen_SQLCODE == -911)
        SLWREC.SLWSKYSW = "N";
        SLWREC.XXXLOCID = "SZ1A";
        SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
        return;
      end
      if (SQLCA.VAGen_SQLCODE == -803)
        SLWREC.XXXLOCID = "SZ1B";
        SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
        set SL0IM210.SL5LOCTN cursor, bold;
        return;
      end
      SLWREC.XXXLOCID = "SZ1C";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISZ1

// update dcycle.vcyloc01 row
Function SL0ISZ2()

   /* ************************************************************/
   /* *** update the related cycle count location             ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0ISZ2 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSCY7U0(); /* <=== read for update*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.XXXLOCID = "SZ2A";
      SLWREC.SLWMSGNO = 0033; /* <--- row del since last read*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.SLWSKYSW = "N";
      SLWREC.XXXLOCID = "SZ2B";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.XXXLOCID = "SZ2C";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISZ2

// change dcycle.vcyloc01 row
Function SL0ISZ3()

   /* ************************************************************/
   /* *** change cycle count location                         ****/
   /* ************************************************************/

  set CY7REC empty;
  CY7REC.XWHCD = SL0IW05.XWHCD;
  CY7REC.XARCD = SL0IW05.XARCD;
  CY7REC.SL4ZONE = SL0IW05.SL4ZONE;
  CY7REC.SL5LOCTN = SL0IW05.SL5LOCTN;
  CY7REC.YLTCD = SL0IW05.YLTCD;

  TA1REC.TA1LOCAT[2] = "SL0ISZ3 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSCY7I0(); /* <=== select unique row*/

  if (SQLCA.VAGen_SQLCODE == 0) /* <=== if row exists*/
    if (CY7REC.XXXSTAT == "A") /* <=== if row exists*/
      CY7REC.XXXSTAT = "I"; /* <=== move active to status*/
      SL0ISZ2(); /* <=== update cyc cnt loc*/
      CY7REC.XWHCD = SL5REC.XWHCD;
      CY7REC.XARCD = SL5REC.XARCD;
      CY7REC.SL4ZONE = SL5REC.SL4ZONE;
      CY7REC.SL5LOCTN = SL5REC.SL5LOCTN;
      CY7REC.YLTCD = SL5REC.YLTCD;
      XSCY7I0(); /* <=== select unique row*/
      if (SQLCA.VAGen_SQLCODE == 0) /* <=== if row exists*/
        CY7REC.XXXSTAT = "A"; /* <=== move active to status*/
        SL0ISZ2(); /* <=== update cyc cnt loc*/
      else
        if (SQLCA.VAGen_SQLCODE == +100) /* <=== if row doesn't exist*/
          CY7REC.XXXSTAT = "A"; /* <=== move active to status*/
          XSCY7A0(); /* <=== insert row*/
        end
      end
    else
      CY7REC.XWHCD = SL5REC.XWHCD;
      CY7REC.XARCD = SL5REC.XARCD;
      CY7REC.SL4ZONE = SL5REC.SL4ZONE;
      CY7REC.SL5LOCTN = SL5REC.SL5LOCTN;
      CY7REC.YLTCD = SL5REC.YLTCD;
      XSCY7I0(); /* <=== select unique row*/
      if (SQLCA.VAGen_SQLCODE == 0) /* <=== if row exists*/
        CY7REC.XXXSTAT = "A"; /* <=== move active to status*/
        SL0ISZ2(); /* <=== update cyc cnt loc*/
      else
        if (SQLCA.VAGen_SQLCODE == +100)
          CY7REC.XXXSTAT = "A"; /* <=== move active to status*/
          XSCY7A0(); /* <=== insert row*/
        end
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      CY7REC.XWHCD = SL5REC.XWHCD;
      CY7REC.XARCD = SL5REC.XARCD;
      CY7REC.SL4ZONE = SL5REC.SL4ZONE;
      CY7REC.SL5LOCTN = SL5REC.SL5LOCTN;
      CY7REC.YLTCD = SL5REC.YLTCD;
      CY7REC.XXXSTAT = "A"; /* <=== move active to status*/
      XSCY7A0(); /* <=== insert row*/
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISZ3

// resetup correct data
Function SL0ISZR()

   /* ************************************************************/
   /* *** resetup all record flds, re: the -803 was detected  ****/
   /* *** by doing a select unique which returned data        ****/
   /* ************************************************************/

  set SL5REC empty;

  SL5REC.XWHCD = SL0IM410.XWHCD;
                                   /* **** move whse, area, zone*/
  SL5REC.XARCD = SL0IM410.XARCD; /* to first part of loc key ******/
  SL5REC.SL4ZONE = SL0IM410.SL4ZONE;
  SL5REC.YLTCD = SL0IM410.YLTCD;
  SL5REC.YLSCD = SL0IM410.YLSCD;
  SL5REC.SL5STCDT = X2CREC.X2CCURDT;
  SL5REC.SL5LCDSC = SL0IM410.SL5LCDSC;
  SL5REC.YSPCD = SL0IM410.YSPCD;
  SL5REC.YRPCD = SL0IM410.YRPCD;
  SL5REC.SL-LOC-SZ-IND = SL0IM410.SL-LOC-SZ-IND;
  SL5REC.SL5MPDFL = SL0IM410.SL5MPDFL;
  SL5REC.YNTCD = SL0IM410.YNTCD;
  SL5REC.SL5SZPLC = SL0IM410.SL5SZPLC;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0ISZR

// add : cc loc : 0
Function XSCY7A0()

   /* ************************************************************/
   /* *** add unique row to:  cyc cnt loc                     ****/
   /* *** using the std module:  IO2490                       ****/
   /* *** note: use cyrrec to pass function & date ranges     ****/
   /* *** note: 0 return code means record already exists     ****/
   /* ***       = setup -803 return code                      ****/
   /* ************************************************************/

  XSCY7I0(); /* <=== select unique row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    SQLCA.VAGen_SQLCODE = -803;
    return;
  end

  if (SQLCA.VAGen_SQLCODE < 0)
    return;
  end

   /* ************************************************************/
   /* *** insert row (previous +100 = doesn't exist)          ****/
   /* *** note: IO process initializes zzzchgct to 0          ****/
   /* ************************************************************/

  CY7REC.ZZZSDT = X2CREC.X2CCURDT;
  CY7REC.ZZZCHGDT = X2CREC.X2CCURDT;
  CY7REC.ZZZCHGTM = X3CREC.X3CCURST;

  CYRREC.CYRFNC = "A ";

  call "IO2490" (CYRREC, SQLCA, CY7REC) {isNoRefresh = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSCY7A0 ";
  TA1REC.TA1LOCAT[1] = "IO2490  ";
  TA1REC.TA1LOCAT[3] = "ADD     ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DCYCLE  ";
  TA1REC.TA1TBLVU = "VCYLOC01";
  TA1REC.TA1TBLKE = CY7REC.CY7KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSCY7A0

// update : cc loc : 0
Function XSCY7U0()

   /* ************************************************************/
   /* *** get unique row for update of:  cyc cnt loc          ****/
   /* *** using the std module:  IO2490                       ****/
   /* *** note: IO process does not move rec/row data         ****/
   /* ***       therefore, at this time (w/IO modules)        ****/
   /* ***       nothing is coded                              ****/
   /* ***       (except the move of 0 to sqlcode)             ****/
   /* ***       BUT                                           ****/
   /* ***       this sgrp should be used/executed so that     ****/
   /* ***       future conversion to native CSP DB2 will      ****/
   /* ***       only have to change/add code in this sgrp     ****/
   /* ***       and regenerate all applications               ****/
   /* *** note: use cyrrec to pass function & date ranges     ****/
   /* ************************************************************/

  SQLCA.VAGen_SQLCODE = 0;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSCY7U0

// add : area/zone : 0
Function XSSL4A0()

   /* ************************************************************/
   /* *** add unique row to:  area/zone                       ****/
   /* *** using the std module:  IO1480                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -803 = adding duplicate row                       ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* *** note: 0 return code means record already exists     ****/
   /* ***       = setup -803 return code                      ****/
   /* ************************************************************/

  XSSL4I0(); /* <=== select unique row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    SQLCA.VAGen_SQLCODE = -803;
    return;
  end

  if (SQLCA.VAGen_SQLCODE < 0)
    return;
  end

   /* ************************************************************/
   /* *** insert row (previous +100 = doesn't exist)          ****/
   /* *** note: IO process initializes zzzchgct to 0          ****/
   /* ************************************************************/

  SL4REC.ZZZCHGDT = X2CREC.X2CCURDT;
  SL4REC.ZZZCHGTM = X3CREC.X3CCURST;

  call "IO1480" ("A ", SQLCA, SL4REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSSL4A0 ";
  TA1REC.TA1LOCAT[1] = "IO1480  ";
  TA1REC.TA1LOCAT[3] = "ADD     ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VAZONE01";
  TA1REC.TA1TBLKE = SL4REC.SL4KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL4A0

// delete : area/zone : 0
Function XSSL4D0()

   /* ************************************************************/
   /* *** delete unique row in:  area/zone                    ****/
   /* *** using the std module:  IO1480                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = deleted since last read                    ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** delete row                                          ****/
   /* ************************************************************/

  call "IO1480" ("D ", SQLCA, SL4REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100
   || SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSSL4D0 ";
  TA1REC.TA1LOCAT[1] = "IO1480  ";
  TA1REC.TA1LOCAT[3] = "DELETE  ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VAZONE01";
  TA1REC.TA1TBLKE = SL4REC.SL4KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL4D0

// inquiry : area/zone : 0
Function XSSL4I0()

   /* ************************************************************/
   /* *** select unique row from:  area/zone                  ****/
   /* *** using the std module:  IO1480                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -811 = duplicates found                           ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* ************************************************************/

  call "IO1480" ("S ", SQLCA, SL4REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -811)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSSL4I0 ";
  TA1REC.TA1LOCAT[1] = "IO1480  ";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VAZONE01";
  TA1REC.TA1TBLKE = SL4REC.SL4KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL4I0

// replace : area/zone : 0
Function XSSL4R0()

   /* ************************************************************/
   /* *** replace unique row in:  area/zone                   ****/
   /* *** using the std module:  IO1480                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = concurrent update - re:                    ****/
   /* ***          deleted since last read (rec blanked out)  ****/
   /* ***          updated since last read (new data in rec)  ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** replace row                                         ****/
   /* *** note: IO process increments record zzzchgct by +1   ****/
   /* ***       but ID's row to update by the old zzzchgct    ****/
   /* ************************************************************/

  SL4REC.ZZZCHGDT = X2CREC.X2CCURDT;
  SL4REC.ZZZCHGTM = X3CREC.X3CCURST;

  call "IO1480" ("U ", SQLCA, SL4REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
     /* ************************************************************/
     /* *** select the original row without a change count      ****/
     /* *** note: select unique does NOT use zzzchgct           ****/
     /* *** note: this puts current version of data in record   ****/
     /* ***       or blank out record layout = deleted          ****/
     /* ************************************************************/
    XSSL4I0(); /* <=== select unique row*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == +100)
      SL4REC.SL4DATA = " ";
      return;
    end
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSSL4R0 ";
  TA1REC.TA1LOCAT[1] = "IO1480  ";
  TA1REC.TA1LOCAT[3] = "REPLACE ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VAZONE01";
  TA1REC.TA1TBLKE = SL4REC.SL4KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL4R0

// update : area/zone : 0
Function XSSL4U0()

   /* ************************************************************/
   /* *** get unique row for update of:  area/zone            ****/
   /* *** using the std module:  IO1480                       ****/
   /* *** note: IO process does not move rec/row data         ****/
   /* ***       therefore, at this time (w/IO modules)        ****/
   /* ***       nothing is coded                              ****/
   /* ***       (except the move of 0 to sqlcode)             ****/
   /* ***       BUT                                           ****/
   /* ***       this sgrp should be used/executed so that     ****/
   /* ***       future conversion to native CSP DB2 will      ****/
   /* ***       only have to change/add code in this sgrp     ****/
   /* ***       and regenerate all applications               ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found (does not use zzzchgct)          ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

  SQLCA.VAGen_SQLCODE = 0;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL4U0

// add : location : 0
Function XSSL5A0()

   /* ************************************************************/
   /* *** add unique row to:  location                        ****/
   /* *** using the std module:  IO1490                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -803 = adding duplicate row                       ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* *** note: 0 return code means record already exists     ****/
   /* ***       = setup -803 return code                      ****/
   /* ************************************************************/

  XSSL5I0(); /* <=== select unique row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    SQLCA.VAGen_SQLCODE = -803;
    return;
  end

  if (SQLCA.VAGen_SQLCODE < 0)
    return;
  end

   /* ************************************************************/
   /* *** insert row (previous +100 = doesn't exist)          ****/
   /* *** note: IO process initializes zzzchgct to 0          ****/
   /* ************************************************************/

  SL5REC.ZZZCHGDT = X2CREC.X2CCURDT;
  SL5REC.ZZZCHGTM = X3CREC.X3CCURST;

  call "IO1490" ("A ", SQLCA, SL5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSSL5A0 ";
  TA1REC.TA1LOCAT[1] = "IO1490  ";
  TA1REC.TA1LOCAT[3] = "ADD     ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VLOCAT01";
  TA1REC.TA1TBLKE = SL5REC.SL5KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL5A0

// close : location : 1
Function XSSL5C1()

   /* ************************************************************/
   /* *** close select set of:  location table                ****/
   /* *** using the std module:  IO1490                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  call "IO1490" ("C1", SQLCA, SL5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSL5C1 ";
  TA1REC.TA1LOCAT[1] = "IO1490  ";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VLOCAT01";
  TA1REC.TA1TBLKE = SL5REC.SL5KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL5C1

// delete : location : 0
Function XSSL5D0()

   /* ************************************************************/
   /* *** delete unique row in:  location                     ****/
   /* *** using the std module:  IO1490                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = deleted since last read                    ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** delete row                                          ****/
   /* ************************************************************/

  call "IO1490" ("D ", SQLCA, SL5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100
   || SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSSL5D0 ";
  TA1REC.TA1LOCAT[1] = "IO1490  ";
  TA1REC.TA1LOCAT[3] = "DELETE  ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VLOCAT01";
  TA1REC.TA1TBLKE = SL5REC.SL5KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL5D0

// fetch : location : 1
Function XSSL5F1()

   /* ************************************************************/
   /* *** fetch next row from:  location                      ****/
   /* *** using the std module:  IO1490                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ************************************************************/

  call "IO1490" ("N1", SQLCA, SL5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    XSSL5C1(); /* <=== std close cursor*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSL5F1 ";
  TA1REC.TA1LOCAT[1] = "IO1490  ";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VLOCAT01";
  TA1REC.TA1TBLKE = SL5REC.SL5KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL5F1

// inquiry : location : 0
Function XSSL5I0()

   /* ************************************************************/
   /* *** select unique row from:  location table             ****/
   /* *** using the std module:  IO1490                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -811 = duplicates found                           ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* ************************************************************/

  call "IO1490" ("S ", SQLCA, SL5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -811)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSSL5I0 ";
  TA1REC.TA1LOCAT[1] = "IO1490  ";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VLOCAT01";
  TA1REC.TA1TBLKE = SL5REC.SL5KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL5I0

// replace : location : 0
Function XSSL5R0()

   /* ************************************************************/
   /* *** replace unique row in:  location                    ****/
   /* *** using the std module:  IO1490                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = concurrent update - re:                    ****/
   /* ***          deleted since last read (rec blanked out)  ****/
   /* ***          updated since last read (new data in rec)  ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** replace row                                         ****/
   /* *** note: IO process increments record zzzchgct by +1   ****/
   /* ***       but ID's row to update by the old zzzchgct    ****/
   /* ************************************************************/

  SL5REC.ZZZCHGDT = X2CREC.X2CCURDT;
  SL5REC.ZZZCHGTM = X3CREC.X3CCURST;

  call "IO1490" ("U ", SQLCA, SL5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
     /* ************************************************************/
     /* *** select the original row without a change count      ****/
     /* *** note: select unique does NOT use zzzchgct           ****/
     /* *** note: this puts current version of data in record   ****/
     /* ***       or blank out record layout = deleted          ****/
     /* ************************************************************/
    XSSL5I0(); /* <=== select unique row*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == +100)
      SL5REC.SL5DATA = " ";
      return;
    end
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSSL5R0 ";
  TA1REC.TA1LOCAT[1] = "IO1490  ";
  TA1REC.TA1LOCAT[3] = "REPLACE ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VLOCAT01";
  TA1REC.TA1TBLKE = SL5REC.SL5KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL5R0

// setinq : location : 1
Function XSSL5S1()

   /* ************************************************************/
   /* *** select set of rows from:  location                  ****/
   /* *** using the std module:  IO1490                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique field values for:            ****/
   /* ***   xwhcd                                             ****/
   /* ***   xarcd                                             ****/
   /* *** the following may be used with a wild card (*):     ****/
   /* ***   sl4zone                                           ****/
   /* ***   yltcd                                             ****/
   /* ***   ylscd                                             ****/
   /* *** the order by for this select set is:                ****/
   /* ***   xwhcd                                             ****/
   /* ***   xarcd                                             ****/
   /* ***   sl4zone                                           ****/
   /* ***   sl5loctn                                          ****/
   /* ***   yspcd                                             ****/
   /* ************************************************************/

  call "IO1490" ("S1", SQLCA, SL5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "XSSL5S1 ";
    TA1REC.TA1LOCAT[1] = "IO1490  ";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VLOCAT01";
    TA1REC.TA1TBLKE = SL5REC.SL5KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* *** note: fetch handles return code correctly           ****/
   /* ************************************************************/

  XSSL5F1(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL5S1

// update : location : 0
Function XSSL5U0()

   /* ************************************************************/
   /* *** get unique row for update of:  location             ****/
   /* *** using the std module:  IO1490                       ****/
   /* *** note: IO process does not move rec/row data         ****/
   /* ***       therefore, at this time (w/IO modules)        ****/
   /* ***       nothing is coded                              ****/
   /* ***       (except the move of 0 to sqlcode)             ****/
   /* ***       BUT                                           ****/
   /* ***       this sgrp should be used/executed so that     ****/
   /* ***       future conversion to native CSP DB2 will      ****/
   /* ***       only have to change/add code in this sgrp     ****/
   /* ***       and regenerate all applications               ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found (does not use zzzchgct)          ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

  SQLCA.VAGen_SQLCODE = 0;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL5U0

// close the cursor
Function XSSL6C3()

   /* ************************************************************/
   /* *** close select set of:  product location table        ****/
   /* *** using the std module:  IO1470                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  call "IO1470" ("C3", SQLCA, SL6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSL6C3 ";
  TA1REC.TA1LOCAT[1] = "IO1470  ";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYLOC01";
  TA1REC.TA1TBLKE = SL6REC.SL6KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL6C3


// 'c4' close for prod/loc db
Function XSSL6C4()

   /* ************************************************************/
   /* *** close select set of:  product location table        ****/
   /* *** using the std module:  IO1470                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  call "IO1470" ("C4", SQLCA, SL6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSL6C4 ";
  TA1REC.TA1LOCAT[1] = "IO1470  ";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYLOC01";
  TA1REC.TA1TBLKE = SL6REC.SL6KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL6C4

// fetch next prod/loc record
Function XSSL6F3()

   /* ************************************************************/
   /* *** fetch next row from:  product location              ****/
   /* *** using the std module:  IO1470                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ***       but w/these io mods the sgrp will close       ****/
   /* ************************************************************/

  call "IO1470" ("N3", SQLCA, SL6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    XSSL6C3(); /* <=== std close cursor*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSL6F3 ";
  TA1REC.TA1LOCAT[1] = "IO1470  ";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYLOC01";
  TA1REC.TA1TBLKE = SL6REC.SL6KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL6F3

// 'f4' fetch to prod/loc db
Function XSSL6F4()

   /* ************************************************************/
   /* *** fetch next row from:  product location              ****/
   /* *** using the std module:  IO1470                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ***       but w/these io mods the sgrp will close       ****/
   /* ************************************************************/

  call "IO1470" ("N4", SQLCA, SL6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    XSSL6C4(); /* <=== std close cursor*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSL6F4 ";
  TA1REC.TA1LOCAT[1] = "IO1470  ";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYLOC01";
  TA1REC.TA1TBLKE = SL6REC.SL6KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL6F4

// select set prod/loc recs
Function XSSL6S3()

   /* ************************************************************/
   /* *** select set of rows from:  product location          ****/
   /* *** using the std module:  IO1470                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique field values for:            ****/
   /* ***   xwhcd                                             ****/
   /* ***   xarcd                                             ****/
   /* ***   sl4zone                                           ****/
   /* ***   sl5loctn                                          ****/
   /* *** the following may be used with a wild card (*):     ****/
   /* ***   sl2palet                                          ****/
   /* ***   sl2case                                           ****/
   /* *** the order by for this select set is:                ****/
   /* ***   xwhcd                                             ****/
   /* ***   xarcd                                             ****/
   /* ***   sl4zone                                           ****/
   /* ***   sl5loctn                                          ****/
   /* ***   sl2palet                                          ****/
   /* ***   sl2case                                           ****/
   /* ***   xgpcd                                             ****/
   /* ***   sy1stnbr                                          ****/
   /* ***   sy2clrid                                          ****/
   /* ***   xdmcd                                             ****/
   /* ***   xqacd                                             ****/
   /* ***   xsdcd                                             ****/
   /* ***   xsacd                                             ****/
   /* ***   xpgcd                                             ****/
   /* ***   xumcd                                             ****/
   /* ***   xowcd                                             ****/
   /* ***   xslcd                                             ****/
   /* ***   sy5szid                                           ****/
   /* ************************************************************/

  call "IO1470" ("S3", SQLCA, SL6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "XSSL6S3 ";
    TA1REC.TA1LOCAT[1] = "IO1470  ";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VSYLOC01";
    TA1REC.TA1TBLKE = SL6REC.SL6KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* *** note: fetch handles return code correctly           ****/
   /* ************************************************************/

  XSSL6F3(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL6S3

// 's4' scan on prod/loc db
Function XSSL6S4()

   /* ************************************************************/
   /* *** select set of rows from:  product location          ****/
   /* *** using the std module:  IO1470                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique field values for:            ****/
   /* ***   xwhcd                                             ****/
   /* ***   xarcd                                             ****/
   /* ***   sl4zone                                           ****/
   /* ***   sl5loctn                                          ****/
   /* *** the following may be used with a wild card (*):     ****/
   /* ***   sl2palet                                          ****/
   /* ***   sl2case                                           ****/
   /* *** the order by for this select set is:                ****/
   /* ***   xwhcd                                             ****/
   /* ***   xarcd                                             ****/
   /* ***   sl4zone                                           ****/
   /* ***   sl5loctn                                          ****/
   /* ***   xgpcd                                             ****/
   /* ***   sy1stnbr                                          ****/
   /* ***   sy2clrid                                          ****/
   /* ***   xdmcd                                             ****/
   /* ***   xqacd                                             ****/
   /* ***   xsdcd                                             ****/
   /* ***   xsacd                                             ****/
   /* ***   xpgcd                                             ****/
   /* ***   xumcd                                             ****/
   /* ***   xowcd                                             ****/
   /* ***   xslcd                                             ****/
   /* ***   sl2palet                                          ****/
   /* ***   sl2case                                           ****/
   /* ***   sy5szid                                           ****/
   /* ************************************************************/

  call "IO1470" ("S4", SQLCA, SL6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "XSSL6S4 ";
    TA1REC.TA1LOCAT[1] = "IO1470  ";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VSYLOC01";
    TA1REC.TA1TBLKE = SL6REC.SL6KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* *** note: fetch handles return code correctly           ****/
   /* ************************************************************/

  XSSL6F4(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL6S4

// close : prod loc asgmnt : 7
Function XSSL7C7()

   /* ************************************************************/
   /* *** close select set of:  product location assignment   ****/
   /* *** using the std module:  IO1550                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "C7";

  call "IO1550" (SLVREC, SQLCA, SL7REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSL7C7 ";
  TA1REC.TA1LOCAT[1] = "IO1550  ";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYASG01";
  TA1REC.TA1TBLKE = SL7REC.SL7KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL7C7

// fetch : prod loc asgmnt : 7
Function XSSL7F7()

   /* ************************************************************/
   /* *** fetch next row from:  product location assignment   ****/
   /* *** using the std module:  IO1550                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ***       but w/these io mods the sgrp will close       ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "N7";

  call "IO1550" (SLVREC, SQLCA, SL7REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    XSSL7C7(); /* <=== std close cursor*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSL7F7 ";
  TA1REC.TA1LOCAT[1] = "IO1550  ";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYASG01";
  TA1REC.TA1TBLKE = SL7REC.SL7KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL7F7

// setinq : prod loc asgmnt : 7
Function XSSL7S7()

   /* ************************************************************/
   /* *** select set of rows from:  product assignment        ****/
   /* *** using the std module:  IO1550                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique field values for:            ****/
   /* ***   xwhcd                                             ****/
   /* ***   xarcd                                             ****/
   /* ***   sl4zone                                           ****/
   /* ***   sl5loctn                                          ****/
   /* ***   xgpcd                                             ****/
   /* ***   sy1stnbr                                          ****/
   /* ***   sy2clrid                                          ****/
   /* ***   xdmcd                                             ****/
   /* ***   xqacd                                             ****/
   /* ***   xsdcd                                             ****/
   /* ***   xsacd                                             ****/
   /* ***   xpgcd                                             ****/
   /* ***   xumcd                                             ****/
   /* ***   xowcd                                             ****/
   /* *** the following may be used with a wild card (*):     ****/
   /* ***   sy5szid                                           ****/
   /* ***   sl7effdt                                          ****/
   /* ***   xxxstat                                           ****/
   /* *** the order by for this select set is:                ****/
   /* ***   xwhcd                                             ****/
   /* ***   xarcd                                             ****/
   /* ***   sl4zone                                           ****/
   /* ***   sl5loctn                                          ****/
   /* ***   xgpcd                                             ****/
   /* ***   sy1stnbr                                          ****/
   /* ***   sy2clrid                                          ****/
   /* ***   xdmcd                                             ****/
   /* ***   xqacd                                             ****/
   /* ***   xsdcd                                             ****/
   /* ***   xsacd                                             ****/
   /* ***   xpgcd                                             ****/
   /* ***   xumcd                                             ****/
   /* ***   xowcd                                             ****/
   /* ***   sy5szid                                           ****/
   /* ***   sl7effdt (descending)                             ****/
   /* ***   xxxstat                                           ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "S7";

  call "IO1550" (SLVREC, SQLCA, SL7REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "XSSL7S7 ";
    TA1REC.TA1LOCAT[1] = "IO1550  ";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VSYASG01";
    TA1REC.TA1TBLKE = SL7REC.SL7KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* *** note: fetch handles return code correctly           ****/
   /* ************************************************************/

  XSSL7F7(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL7S7
// obtain prod location count
Function XSSLISC()

   /* ************************************************************/
   /* *** select count of rows from:  product location        ****/
   /* *** using the std module:  IO1470                       ****/
   /* *** note: use slirec to pass function & count values    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful (count 0 or # found)            ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***  other = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique field values for:            ****/
   /* ***   xwhcd                                             ****/
   /* ***   xarcd                                             ****/
   /* ***   sl4zone                                           ****/
   /* ***   sl5loctn                                          ****/
   /* *** the following may be used with a wild card (*):     ****/
   /* ************************************************************/

  SLIREC.SLIFUNC = "SC";
  SLIREC.SLICOUNT = +0;

  call "IO1470" (SLIREC, SQLCA, SL6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "XSSLISC ";
    TA1REC.TA1LOCAT[1] = "IO1470  ";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "COUNT   ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VSYLOC01";
    TA1REC.TA1TBLKE = SL6REC.SL6KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSLISC

// xlate ccyymmdd to mmddyy
Function XSSLSXT()

   /* ************************************************************/
   /* *** translate ccyymmdd to mmddyy format                 ****/
   /* *** note: move ccyymmdd format to slwwkdte              ****/
   /* *** note: get mmddyy format from slwindte               ****/
   /* ************************************************************/

  SLWREC.SLWINYY = SLWREC.SLWWKYY;

  SLWREC.SLWINMM = SLWREC.SLWWKMM;

  SLWREC.SLWINDD = SLWREC.SLWWKDD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSLSXT

//*** RECORD=SL0IW00 ****
// ************************************************************
// 
//           STOCK LOCATE MAINTENANCE SKELETON
//           =================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used for specific
//           application/function purposes.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-86  Ward Jones   created
// 12-06-91  DCHIAN       ADD NEW FIELD FOR EDIT.
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0IW00 type basicRecord
  10 TA5TSQIX TA5TSQIX ; 
  10 SL0IWCURPG SL0IWCURPG ; 
  10 SL0IWCKLN SL0IWCKLN ; 
  10 SL0IWTOTL SL0IWTOTL ; 
end // end SL0IW00

//*** RECORD=SL0IW01 ****
// ************************************************************
// 
//           STOCK LOCATE MAINTENANCE SKELETON
//           =================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used for specific
//           application/function purposes.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-86  Ward Jones   created
// 12-06-91  DCHIAN       ADD NEW FIELD FOR EDIT.
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0IW01 type basicRecord
  10 SL0IWLK1 SL0IWLK1 ; 
    15 XWHCD XWHCD ; 
    15 XARCD XARCD ; 
  10 XMSLMFNC XMSLMFNC ; 
  10 SL4ZONE SL4ZONE ; 
  10 XARPRCFL XARPRCFL ; 
  10 YZTPKGFL YZTPKGFL ; 
  10 SL5LOCTN SL5LOCTN ; 
    15 SL0IW-LOC-BYTE SL0IW-LOC-BYTE [6] ; 
end // end SL0IW01

//*** RECORD=SL0IW02 ****
// ************************************************************
// 
//           STOCK LOCATE MAINTENANCE SKELETON
//           =================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used for specific
//           application/function purposes.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-86  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0IW02 type basicRecord
  10 SL0IWLK2 SL0IWLK2 ; 
    15 XWHCD XWHCD ; 
    15 XARCD XARCD ; 
    15 SL4ZONE SL4ZONE ; 
    15 SL5LOCTN SL5LOCTN ; 
    15 XMSLMFNC XMSLMFNC ; 
  10 SL5LOCTN2 SL5LOCTN2 ; 
    15 SL0IWISL SL0IWISL ; 
    15 SL0IWBIN SL0IWBIN ; 
    15 SL0IWLVL SL0IWLVL ; 
    15 SL0IWFBI SL0IWFBI ; 
  10 YLSCD YLSCD ; 
  10 XARPKHFL XARPKHFL ; 
  10 XARSHPFL XARSHPFL ; 
  10 SL0IW-SYLOC-FL SL0IW-SYLOC-FL ; 
  10 SL0IW-AVAL-FL SL0IW-AVAL-FL ; 
  10 SL0IW-IXM SL0IW-IXM ; 
end // end SL0IW02

//*** RECORD=SL0IW03 ****
// ************************************************************
// 
//           STOCK LOCATE INQUIRY SKELETON
//           =============================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used specifically
//           by an application/function.
// 
// NOTE: change literal 1 to 4 characters and
//       change literal 2 to 31 characters
//       when jobname not begining with userid not needed
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-87  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0IW03 type basicRecord
  10 SL0IWLK3 SL0IWLK3 ; 
    15 XWHCD XWHCD ; 
  10 CAUSERID CAUSERID ; 
    15 SL0IWUSR SL0IWUSR ; 
    15 * char(2) ; 
  10 SL0IWJOB SL0IWJOB ; 
    15 SL0IWLT1 SL0IWLT1 ; 
    15 SL0IWUID SL0IWUID ; 
    15 SL0IWLT2 SL0IWLT2 ; 
    15 * char(39) ; 
  10 SL0IWLIN SL0IWLIN ; 
    15 SL0IWWHS SL0IWWHS ; 
    15 XARCD XARCD ; 
    15 SL4ZONE SL4ZONE ; 
    15 SL0IWBPY SL0IWBPY ; 
    15 SL0IWEPY SL0IWEPY ; 
    15 * char(70) ; 
  10 SL0IWOUT SL0IWOUT ; 
    15 SL0IWLT3 SL0IWLT3 ; 
    15 SL0IWPID SL0IWPID ; 
    15 * char(42) ; 
  10 XROPDEST XROPDEST [6] ; 
  10 SL0IWESW SL0IWESW ; 
end // end SL0IW03

//*** RECORD=SL0IW04 ****
// ************************************************************
// 
//           STOCK LOCATE MAINTENANCE SKELETON
//           =================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used for specific
//           application/function purposes.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-86  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0IW04 type basicRecord
  10 SL0IWLK4 SL0IWLK4 ; 
    15 XWHCD XWHCD ; 
    15 XARCD XARCD ; 
    15 SL4ZONE SL4ZONE ; 
    15 SL5LOCTN SL5LOCTN ; 
      20 SL0IWBIS SL0IWBIS ; 
      20 SL0IWBBN SL0IWBBN ; 
      20 SL0IWBLV SL0IWBLV ; 
      20 SL0IWBPS SL0IWBPS ; 
  10 SL0IMLOC SL0IMLOC ; 
    20 SL0IWEIS SL0IWEIS ; 
    20 SL0IWEBN SL0IWEBN ; 
    20 SL0IWELV SL0IWELV ; 
    20 SL0IWEPS SL0IWEPS ; 
  10 SL0IWNLO SL0IWNLO ; 
    20 SL0IWNIS SL0IWNIS ; 
    20 SL0IWNBN SL0IWNBN ; 
    20 SL0IWNLV SL0IWNLV ; 
    20 SL0IWNPS SL0IWNPS ; 
  10 XARPRCFL XARPRCFL ; 
end // end SL0IW04

//*** RECORD=SL0IW05 ****
// ************************************************************
// 
//           STOCK LOCATE MAINTENANCE SKELETON
//           =================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used for specific
//           application/function purposes.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-86  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0IW05 type basicRecord
  10 SL0IWLK5 SL0IWLK5 ; 
    15 XWHCD XWHCD ; 
    15 XARCD XARCD ; 
    15 SL4ZONE SL4ZONE ; 
    15 SL5LOCTN SL5LOCTN ; 
    15 YLTCD YLTCD ; 
end // end SL0IW05

//*** RECORD=SL0IW06 ****
// ****************  stock locate table  **********************
// 
// MAINTENANCE LOG:
// 
// DATE      USERID     COMMENTS
// --------  ---------  ------------------------------------
// 12-17-93  RYONKE     CRESTED CSP RECORD
// ************************************************************
// ***********************
Record SL0IW06 type basicRecord
  15 XGPCD XGPCD ; 
  15 SY1STNBR SY1STNBR ; 
  15 SY2CLRID SY2CLRID ; 
  15 XDMCD XDMCD ; 
  15 XQACD XQACD ; 
  15 XOWCD XOWCD ; 
  15 PC2INSEG PC2INSEG ; 
  15 XEGCD XEGCD ; 
  15 XPGCD XPGCD ; 
  15 XUMCD XUMCD ; 
  15 XSLCD XSLCD ; 
  15 SY5SZID SY5SZID ; 
  15 SY1UNPCS SY1UNPCS ; 
end // end SL0IW06

//*** RECORD=SL0IW07 ****
// ****************  stock locate table  **********************
// 
// MAINTENANCE LOG:
// 
// DATE      USERID     COMMENTS
// --------  ---------  ------------------------------------
// 12-17-93  RYONKE     CRESTED CSP RECORD
// ************************************************************
// ***********************
Record SL0IW07 type basicRecord
  10 XXXTSLEN XXXTSLEN ; 
  10 * char(13) [33] ; 
    15 SL0IWPRTY SL0IWPRTY ; 
    15 SL0IWAREA SL0IWAREA ; 
    15 SL0IWZONE SL0IWZONE ; 
    15 SL0IWLOCCD SL0IWLOCCD ; 
    15 SL0IWSIZE SL0IWSIZE ; 
end // end SL0IW07

//*** RECORD=SL0IW08 ****
// ****************  stock locate table  **********************
// 
// MAINTENANCE LOG:
// 
// DATE      USERID     COMMENTS
// --------  ---------  ------------------------------------
// 12-17-93  RYONKE     CRESTED CSP RECORD
// ************************************************************
// ***********************
Record SL0IW08 type basicRecord
  10 SL0IWSIZE SL0IWSIZE [10] ; 
  10 SL0IWNUMLOC SL0IWNUMLOC [10] ; 
end // end SL0IW08

Record SLIREC type basicRecord
  10 SLIFUNC SLIFUNC ; 
  10 SLICOUNT SLICOUNT ; 
end // end SLIREC

// end of isle,bin,lvl,psn
DataItem SL0IMLOC num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// WS for SL-SCHED-AVAL-FL(1-99)
DataItem SL0IW-AVAL-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// WS index
DataItem SL0IW-IXM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SL0IW-LOC-BYTE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Program Product Flag
DataItem SL0IW-SYLOC-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_STY_NBR
DataItem SL0IWAREA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// beginning bin
DataItem SL0IWBBN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// bin id
DataItem SL0IWBIN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// beginning isle
DataItem SL0IWBIS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// beginning level
DataItem SL0IWBLV char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// beg position
DataItem SL0IWBPS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// beginning storage priority
DataItem SL0IWBPY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL0IWCKLN num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current page
DataItem SL0IWCURPG num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ending bin
DataItem SL0IWEBN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ending isle
DataItem SL0IWEIS num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ending level
DataItem SL0IWELV num(1)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// end position
DataItem SL0IWEPS num(1)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ending storage priority
DataItem SL0IWEPY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error sw for sc3
DataItem SL0IWESW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// front/back indicator
DataItem SL0IWFBI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// aisle id
DataItem SL0IWISL num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// jobname
DataItem SL0IWJOB char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// instream jcl data line
DataItem SL0IWLIN char(80)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// complete last key
DataItem SL0IWLK1 char(4)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// complete last key
DataItem SL0IWLK2 char(13)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// complete last key
DataItem SL0IWLK3 char(2)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// complete last key
DataItem SL0IWLK4 char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// complete last key
DataItem SL0IWLK5 char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XDM_DIM_CD
DataItem SL0IWLOCCD char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal 1
DataItem SL0IWLT1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal 2
DataItem SL0IWLT2 char(33)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal 3
DataItem SL0IWLT3 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// level id
DataItem SL0IWLVL num(1)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// numeric bin id
DataItem SL0IWNBN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// numeric isle id
DataItem SL0IWNIS num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// end of isle,bin,lvl,psn
DataItem SL0IWNLO num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// numeric level id
DataItem SL0IWNLV num(1)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// numeric positn id
DataItem SL0IWNPS num(1)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL0IWNUMLOC num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// output (dest id) line
DataItem SL0IWOUT char(80)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// remote printer id
DataItem SL0IWPID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD
DataItem SL0IWPRTY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XQA_QUAL_CD
DataItem SL0IWSIZE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL0IWTOTL num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// user id for job name
DataItem SL0IWUID char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// user id for job name
DataItem SL0IWUSR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warehouse code
DataItem SL0IWWHS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_COLR_CD_ID
DataItem SL0IWZONE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sl-loc-cd
DataItem SL5LOCTN2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SLICOUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SLIFUNC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

