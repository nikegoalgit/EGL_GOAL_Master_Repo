package sl0p;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import ww.common.*;
//*** PROGRAM=SL0P ****
// ************************************************************
// 
//           STOCK LOCATE MENU SKELETON
//           ==========================
// 
// ************************************************************
// 
// OVERVIEW: This application is intended to transfer control
//           to other applications and/or functions within its
//           application depending on the selction number
//           entered on the map or passed via fast path's
//           item area (first character only).
// 
//           notes:
//             1) selection number (since single digit) is
//                setup as a character type field in order to
//                make the use of CAITEM easier as well as
//                easier for the user and program to deal
//                with the map field.
//             2) if selections include both external appl.s
//                and internal functions,  the internal func.s
//                should be listed first so that they will
//                correspond to the level number used in the
//                multiple function naming convention(s).
//             3) transfer to external applications will use
//                xsexit and require these selection values
//                be tested in the after section in either
//                the process or the related statement group
//                  CAITEM: 110 After or SY1
//                  SelNo.: 120 After or SB1
// 
// 
// MAINTENANCE HISTORY:
// ===================
// RVN
// NBR   DATE     BY WHOM    OVERVIEW OF CHANGES:
// --- --------  ----------  ----------------------------------
// 00  04/08/87  chuck beer  created
// 01  07/11/88  w. jones    fixed a/z/l verification
// 02  08/31/88  w. jones    add reset scrn on fast path error
// 03  11/14/88  w. jones    fix printer limit abend
// 04  11/15/88  J. Wood     added xssegtr logic
// 05  04/04/90  kande1      replace xsdtbl with pc2rec and
//                           io3340
// 06  10/02/90  sjohns      change map 110 to allow uom to be
//                           enterable
// 07  10/09/90  sjohns      xrocd increased to 4 bytes so end
//                           of table now 9999
// 08  12/27/90  jcampb      increse size of rmt flds to 6 in
//                           sl0pm310 and 410.
// 09  02/04/91  jlucas      chge maps 310 & 410 to call ta0p
//                           for printer selection
// 10  01/19/92  jwood       initialze w/s
// 10  08/25/92  jFIAT       change sy1120 to sy1190
//                                  sy1rec,sycrec pknrec
//                        ** commented access to sy1rec **
//                           Does existance check for style.
// 11  09/29/93  WTATE     FIX MAP PAGE CLEARING PROBLEM CSP4.1
// 12  08/25/95  CBRINE    Added call to SY2000. Added XCTCD to
//                         SLWREC.
// I/O Modules:
// ===========
// 
// NAME      DESCRIPTION
// --------  --------------------------------------------------
// io3340    pc2rec pc-cu-in-seg pc2inseg (code, abrv, desc)
//           from dprodc.prdcu01
// 
// ************************************************************
// ************************************************************
// *********************
Program SL0P type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PC2REC PC2REC; // record
  PKNREC PKNREC; // record
  SL0PW01 SL0PW01; // record
  SL0PW02 SL0PW02; // record
  SL0PW03 SL0PW03; // record
  SL0PW04 SL0PW04; // record
  SL0PWB1 SL0PWB1; // record
  SL0PWB2 SL0PWB2; // record
  SL0PWD0 SL0PWD0; // record
  SL0PWL1 SL0PWL1; // record
  SL0PWL2 SL0PWL2; // record
  SL4REC SL4REC; // record
  SL5REC SL5REC; // record
  SL7REC SL7REC; // record
  SLUREC SLUREC; // record
  SLVREC SLVREC; // record
  SLWREC SLWREC; // record
  SLXREC SLXREC; // record
  SLYREC SLYREC; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  SYPREC SYPREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  UT1REC UT1REC; // record
  WSY2000 WSY2000; // record
  X2CREC X2CREC; // record
  XOWREC XOWREC; // record
  XSSLW01 XSSLW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use XOWTBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use XPGTBL {deleteAfterUse = yes}; // table
  use XROTBL {deleteAfterUse = yes}; // table
  use XSATBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use SL0PT01 {deleteAfterUse = yes}; // table
  use SL0PT02 {deleteAfterUse = yes}; // table
  use SL0PT03 {deleteAfterUse = yes}; // table
  use SL0PT04 {deleteAfterUse = yes}; // table
  use SL0PM.SL0PM010,  // forms
      SL0PM.SL0PM110, 
      SL0PM.SL0PM111, 
      SL0PM.SL0PM112, 
      SL0PM.SL0PM115, 
      SL0PM.SL0PM119, 
      SL0PM.SL0PM210, 
      SL0PM.SL0PM211, 
      SL0PM.SL0PM212, 
      SL0PM.SL0PM215, 
      SL0PM.SL0PM219, 
      SL0PM.SL0PM310, 
      SL0PM.SL0PM410, 
      SL0PM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    SL0P010: SL0P010();


     /* ************************************************************/
     /* *** if the map selection no. setup:                     ****/
     /* *** use it to go directly to selection (skip converse)  ****/
     /* ************************************************************/

    if (SL0PM010.XMSLMSNO > " ")
      if (SL0PM010.XMSLMSNO == "1")
        goto SL0P110; /* <=== new function*/
      end
      if (SL0PM010.XMSLMSNO == "2")
        goto SL0P210; /* <=== new function*/
      end
      if (SL0PM010.XMSLMSNO == "3")
        goto SL0P310; /* <=== new function*/
      end
      if (SL0PM010.XMSLMSNO == "4")
        goto SL0P410; /* <=== new function*/
      end
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "010Z";
      SLWREC.SLWMSGNO = 0017; /* <--- invalid selection msg*/
      set SL0PM010.XMSLMSNO cursor, bold;
      goto SL0P020; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "020 "; /* error id location id*/
    goto SL0P020; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    SL0P020: SL0P020();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0P010; /* <=== re-start this function*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* *** note: if enter, use selection to determine process  ****/
     /* ************************************************************/

    if (converseVar.eventKey is pf13)
      goto SL0P110; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf14)
      goto SL0P210; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf15)
      goto SL0P310; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf16)
      goto SL0P410; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0P020; /* <=== re-display this screen*/
    end

    if (converseVar.eventKey is enter)
      if (SL0PM010.XMSLMSNO == "1")
        goto SL0P110; /* <=== new function*/
      end
      if (SL0PM010.XMSLMSNO == "2")
        goto SL0P210; /* <=== new function*/
      end
      if (SL0PM010.XMSLMSNO == "3")
        goto SL0P310; /* <=== new function*/
      end
      if (SL0PM010.XMSLMSNO == "4")
        goto SL0P410; /* <=== new function*/
      end
       /* ************************************************************/
       /* *** note: invalid selection is detected at this point   ****/
       /* ************************************************************/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "020Y";
      SLWREC.SLWMSGNO = 0017; /* <--- invalid selection msg*/
      set SL0PM010.XMSLMSNO cursor, bold;
      goto SL0P020; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0P020; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    SL0P110: SL0P110();


     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "120 "; /* error id location id*/
    goto SL0P120; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    SL0P120: SL0P120();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0P110; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0PM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0P020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0P110; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf14)
      goto SL0P210; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf15)
      goto SL0P310; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf16)
      goto SL0P410; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0P120; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf6
     || converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      goto SL0P120; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0P120; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    SL0P210: SL0P210();


     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "220 "; /* error id location id*/
    goto SL0P220; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    SL0P220: SL0P220();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0P210; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0PM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0P020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0P110; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf14)
      goto SL0P210; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf15)
      goto SL0P310; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf16)
      goto SL0P410; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0P220; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf6
     || converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      goto SL0P220; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0P220; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    SL0P310: SL0P310();


     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "320 "; /* error id location id*/
    goto SL0P320; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    SL0P320: SL0P320();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0P310; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0PM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0P020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0P110; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf14)
      goto SL0P210; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf15)
      goto SL0P310; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf16)
      goto SL0P410; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0P320; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      goto SL0P320; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0P320; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    SL0P410: SL0P410();


     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "420 "; /* error id location id*/
    goto SL0P420; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    SL0P420: SL0P420();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0P410; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0PM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0P020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0P110; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf14)
      goto SL0P210; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf15)
      goto SL0P310; /* <=== start new function*/
    end
    if (converseVar.eventKey is pf16)
      goto SL0P410; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0P420; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      goto SL0P420; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0P420; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


  end // end main
end // end SL0P

// one time initializations
Function SL0P010()


   /* ************************************************************/
   /* *** standard security checking                          ****/
   /* *** note: comment out if exec'g from your msl           ****/
   /* ************************************************************/

  XSENTRY();

   /* ************************************************************/
   /* *** standard segmented trans id setting                 ****/
   /* ************************************************************/

  XSSEGTR();

   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0PM010 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0PM110 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0PM111 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0PM112 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0PM115 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0PM119 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0PM210 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0PM211 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0PM212 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0PM215 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0PM219 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0PM310 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0PM410 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set TA0PM001 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0PWB1 empty; /**/
  set SL0PWB2 empty; /**/
  set SL0PWD0 empty; /**/
  set SL0PWL1 empty; /**/
  set SL0PWL2 empty; /**/
  set SL0PW01 empty; /* TA0020 version of SQLCA*/
  set SL0PW02 empty; /* TA0020 version of SQLCA*/
  set SL0PW03 empty; /* TA0020 version of SQLCA*/
  set SL0PW04 empty; /* TA0020 version of SQLCA*/
  set PC2REC empty; /**/
  set SLUREC empty; /**/
  set SLVREC empty; /**/
  set SLWREC empty; /* common working storage fields*/
  set SLXREC empty; /* passed key value layout*/
  set SLYREC empty; /* ta0050 parameter #1*/
  set SL4REC empty; /* area/zone record layout*/
  set SL5REC empty; /* area/zone/location record layout*/
  set SL7REC empty; /**/
  set PKNREC empty; /**/
  set SYPREC empty; /**/
  set SY1REC empty; /**/
  set TAEREC empty; /**/
  set TA1REC empty; /* TA0020 record*/
  set TA2REC empty; /**/
  set TA3REC empty; /**/
  set TA5REC empty; /* ta0050 parameter #2*/
  set TA6REC empty; /**/
  set UT1REC empty; /**/
  set XOWREC empty; /**/
  set X2CREC empty; /**/
  set SQLCA empty; /* SQL returned data record*/
  set ERRSQLCA empty; /* TA0020 version of SQLCA*/

   /* ************************************************************/
   /* *** maintenance information:                            ****/
   /* *** =======================                             ****/
   /* *** rvsn   date    update by:    description:           ****/
   /* *** ---- --------  ------------  ---------------------- ****/
   /* ***  00  04/08/87  C. Beer       created                ****/
   /* ***  01  07/11/88  W. Jones      fix a/z/l verification:****/
   /* ***                              chg a/z/l ss to s      ****/
   /* ***                              (re-)allow loc = *     ****/
   /* ***  02  08/31/88  W. Jones      add reset scrn on fast ****/
   /* ***                              path exit error        ****/
   /* ***  04  11/15/88  J. Wood       added xssegtr logic    ****/
   /* ************************************************************/

  SLWREC.XXXRVNBR = "10";

  SLWREC.XXXMAPNM = "SL0PM010";
  SLWREC.XXXTITLE = "PRODUCT LOCATION ASSIGNMENT INQUIRY MENU";

  XSX2CDT();

  SLWREC.XXXAPPID = "SL0P"; /* error id appl. name*/
  SLWREC.SLWTALOC = "SL0P010 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0PM010"; /* TA0020 current map name*/

  SLWREC.SLWSUMQU = "SLS2"; /* summary tsq id*/
  SLWREC.SLWDETQU = "SLD2"; /* detail tsq id*/
  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* saved msg no.*/
  SLWREC.SLWLINPP = 15; /* lines per page*/
  converseVar.commitOnConverse = 1; /* allow commit on converse*/
  VGVar.handleHardIOErrors = 1; /* allow negative sqlcode*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0PM010.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0PM010.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0PM010.XXXTITLE = SLWREC.XXXTITLE;
  SL0PM010.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup inital values, if any                         ****/
   /* *** note: do not use init. selection value              ****/
   /* ***       re: caitem's code will use prematurely        ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** init. appl. ws fields & switches, if any            ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** check commarea fast path item to see if it should   ****/
   /* *** be used to setup working storage &/or map fields    ****/
   /* *** note: used here to go directly to a menu selction   ****/
   /* ************************************************************/

  if (COMMAREA.CAITEM > " ")
    SL0PSY0(); /* <=== use commarea item*/
    COMMAREA.CAITEM = " ";
  end

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end SL0P010

// converse & control key entry
Function SL0P020()


   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  converseLib.clearScreen();
  
  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0PM010.XXXERRID = SLWREC.XXXERRID;


  converse SL0PM010 ;


   /* ************************************************************/
   /* *** this EZECLOS code to be used ONLY in test           ****/
   /* *** in order to end application without canceling it    ****/
   /* *** note: comment out or delete for pseudo/prod         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020A";
    SLWREC.SLWMSGNO = 0;
    SL0PM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020B";
    SLWREC.SLWMSGNO = 0;
    SL0PM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020C";
    SLWREC.SLWMSGNO = 0;
    SL0PM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020D";
    SLWREC.SLWMSGNO = 0;
    SL0PM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0PM010.CATOAP > " ")
    COMMAREA.CATOAP = SL0PM010.CATOAP;
    COMMAREA.CAITEM = SL0PM010.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020E";
    SLWREC.SLWMSGNO = 0;
    SL0PM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0PM010.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0PM010.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "020 ";
  set SL0PM010.CATOAP initialAttributes;
  set SL0PM010.CAITEM initialAttributes;
  set SL0PM010.XMSLMSNO cursor, initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0PM010.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0PM010.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0PSH0(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level process                           ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "020G";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0P020

// one time initializations
Function SL0P110()


   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0PM110 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0PW01 empty; /* appl. working storage area*/

  SLWREC.XXXMAPNM = "SL0PM110";
  SLWREC.XXXTITLE = "PROD LOC ASSIGN INQUIRY PROD";

  SLWREC.SLWTALOC = "SL0P110 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0PM110"; /* TA0020 current map name*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* saved msg no.*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0PM110.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0PM110.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0PM110.XXXTITLE = SLWREC.XXXTITLE;
  SL0PM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  SL0PM110.XWHCD = COMMAREA.XWHCD;
  SL0PM110.XGPCD = "02";
  SL0PM110.SY2CLRID = "00 ";
  SL0PM110.XDMCD = "00";
  SL0PM110.XQACD = "01";
  SL0PM110.XSDCD = "000";
  SL0PM110.XSACD = "000";
  SL0PM110.XPGCD = "00";
  SL0PM110.XUMCD = "01";
  SL0PM110.XOWCD = "00";

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  SL0PWD0.SL0PWLTH = 975; /* tsq line length (15x65)*/

   /* ************************************************************/
   /* *** purge any existing storage in case of 'left overs'  ****/
   /* *** note: not found is acceptable return code           ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq(s)*/

   /* ************************************************************/
   /* *** check commarea fast path item to see if it should   ****/
   /* *** be used to setup working storage &/or map fields    ****/
   /* ************************************************************/

  if (COMMAREA.CAITEM > " ")
    SL0PSY1(); /* <=== use commarea item*/
    COMMAREA.CAITEM = " ";
  end

   /* ************************************************************/
   /* *** setup the floating map lines for a blank map        ****/
   /* ************************************************************/

  SL0PSN1(); /* <=== setup blank screen*/

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end SL0P110

// conv & ctrl float
Function SL0P120()


   /* ************************************************************/
   /* *** before processing                                   ****/
   /* ************************************************************/

  if (SL0PM110.XWHCD == "  ")
    set SL0PM110.XWHCD cursor;
  end

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0PM110.XXXERRID = SLWREC.XXXERRID;


  converse SL0PM110 ;


   /* ************************************************************/
   /* *** note: if leaving screen/application, purge tsq      ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    XSSLSPQ(); /* <=== purge tsq(s)*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120A";
    SLWREC.SLWMSGNO = 0;
    SL0PM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    XSSLSPQ(); /* <=== purge tsq(s)*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120C";
    SLWREC.SLWMSGNO = 0;
    SL0PM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120D";
    SLWREC.SLWMSGNO = 0;
    SL0PM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0PM110.CATOAP > " ")
    COMMAREA.CATOAP = SL0PM110.CATOAP;
    COMMAREA.CAITEM = SL0PM110.CAITEM;
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSEXIT();
    SL0PST1(); /* <=== reset scrn*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120E";
    SLWREC.SLWMSGNO = 0;
    SL0PM110.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0PM110.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0PM110.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "120 ";
  set SL0PM110.CATOAP initialAttributes;
  set SL0PM110.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set SL0PM110.XWHCD initialAttributes;
  set SL0PM110.SL0PMSEL initialAttributes;
  set SL0PM110.XGPCD initialAttributes;
  set SL0PM110.SY1STNBR initialAttributes;
  set SL0PM110.SY2CLRID initialAttributes;
  set SL0PM110.XDMCD initialAttributes;
  set SL0PM110.XQACD initialAttributes;
  set SL0PM110.XSDCD initialAttributes;
  set SL0PM110.XSACD initialAttributes;
  set SL0PM110.XPGCD initialAttributes;
  set SL0PM110.XUMCD initialAttributes;
  set SL0PM110.XOWCD initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0PM110.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0PM110.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0PSH1(); /* <=== enter processing*/
    exit stack;
  end


   /* ************************************************************/
   /* *** if PF7: scroll backwards, key changes NOT allowed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf7)
    SL0PSJ1(); /* <=== PF7 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF8: scroll forwards, key changes NOT allowed    ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf8)
    SL0PSK1(); /* <=== PF8 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "120I";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0P120

// disp left sum line
Function SL0P121()


   /* *** format map line ****/

  SLWREC.SLWIDX06 = 1;
  while (SLWREC.SLWIDX06 <= 8)
    SL0PM111.SY4IDDSC[SLWIDX06] = SL0PWL1.SY4IDDSC[SLWIDX06];
    SLWREC.SLWIDX06 = SLWREC.SLWIDX06 + 1;
  end


  display SL0PM111 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0P121

// disp left det line
Function SL0P122()


   /* *** format map line ****/

  SL0PM112.XARCD = SL0PWL1.XARCD;
  SL0PM112.SL4ZONE = SL0PWL1.SL4ZONE;
  SL0PM112.SL5LOCTN = SL0PWL1.SL5LOCTN;

  if (SL0PWL1.SL7EFFDT == 0)
    SL0PM112.SL7EFFDT = SL0PWL1.SL7EFFDT;
  else

    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2GRGGN = SL0PWL1.SL7EFFDT;
    call "TA0040" (TA2REC) {isNoRefresh = yes};

    if (TA2REC.TA2RTNCD == 0)
      SL0PM112.SL7EFFDT = TA2REC.TA2GRGAN;
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "122A";
      SLWREC.SLWMSGNO = 0001; /* <--- db date error*/
      return;
    end
  end

  SL0PM112.XXXSTAT = SL0PWL1.XXXSTAT;
  SLWREC.SLWIDX06 = 1;
  while (SLWREC.SLWIDX06 <= 8)
    SL0PM112.SY4IDDSC[SLWIDX06] = SL0PWL1.SY4IDDSC[SLWIDX06];
    SLWREC.SLWIDX06 = SLWREC.SLWIDX06 + 1;
  end



  display SL0PM112 ;


   /* ************************************************************/
   /* *** no DISPLAY AFTER processing                         ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0P122

// disp title line
Function SL0P125()


   /* ************************************************************/
   /* *** no "before" processing                              ****/
   /* ************************************************************/

  display SL0PM115 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0P125

// disp blank line
Function SL0P129()


  display SL0PM119 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0P129

// one time initializations
Function SL0P210()


   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0PM210 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0PW02 empty; /* appl. working storage area*/

  SLWREC.XXXMAPNM = "SL0PM210";
  SLWREC.XXXTITLE = "PROD LOC ASSIGN INQUIRY LOCATN";

  SLWREC.SLWTALOC = "SL0P210 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0PM210"; /* TA0020 current map name*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* saved msg no.*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0PM210.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0PM210.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0PM210.XXXTITLE = SLWREC.XXXTITLE;
  SL0PM210.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  SL0PM210.XWHCD = COMMAREA.XWHCD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  SL0PWD0.SL0PWLTH = 1040; /* tsq line length*/

   /* ************************************************************/
   /* *** purge any existing storage in case of 'left overs'  ****/
   /* *** note: not found is acceptable return code           ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq(s)*/

   /* ************************************************************/
   /* *** check commarea fast path item to see if it should   ****/
   /* *** be used to setup working storage &/or map fields    ****/
   /* ************************************************************/

  if (COMMAREA.CAITEM > " ")
    SL0PSY2(); /* <=== use commarea item*/
    COMMAREA.CAITEM = " ";
  end

   /* ************************************************************/
   /* *** setup the floating map lines for a blank map        ****/
   /* ************************************************************/

  SL0PSN2(); /* <=== setup blank screen*/

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end SL0P210

// conv & ctrl float
Function SL0P220()


   /* ************************************************************/
   /* *** before processing                                   ****/
   /* ************************************************************/

  if (SL0PM210.XWHCD == "  ")
    set SL0PM210.XWHCD cursor;
  end


  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0PM210.XXXERRID = SLWREC.XXXERRID;


  converse SL0PM210 ;


   /* ************************************************************/
   /* *** note: if leaving screen/application, purge tsq      ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    XSSLSPQ(); /* <=== purge tsq(s)*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220A";
    SLWREC.SLWMSGNO = 0;
    SL0PM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    XSSLSPQ(); /* <=== purge tsq(s)*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220C";
    SLWREC.SLWMSGNO = 0;
    SL0PM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220D";
    SLWREC.SLWMSGNO = 0;
    SL0PM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0PM210.CATOAP > " ")
    COMMAREA.CATOAP = SL0PM210.CATOAP;
    COMMAREA.CAITEM = SL0PM210.CAITEM;
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSEXIT();
    SL0PST2(); /* <=== reset scnr*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220E";
    SLWREC.SLWMSGNO = 0;
    SL0PM210.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0PM210.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0PM210.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "220 ";
  set SL0PM210.CATOAP initialAttributes;
  set SL0PM210.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set SL0PM210.XWHCD initialAttributes;
  set SL0PM210.SL0PMSEL initialAttributes;
  set SL0PM210.XARCD initialAttributes;
  set SL0PM210.SL4ZONE initialAttributes;
  set SL0PM210.SL5LOCTN initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0PM210.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0PM210.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0PSH2(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF7: scroll backwards, key changes NOT allowed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf7)
    SL0PSJ2(); /* <=== PF7 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF8: scroll forwards, key changes NOT allowed    ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf8)
    SL0PSK2(); /* <=== PF8 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "220I";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0P220

// disp left sum line
Function SL0P221()


   /* *** format map line ****/

  SLWREC.SLWIDX06 = 1;
  while (SLWREC.SLWIDX06 <= 5)
    SL0PM211.SY4IDDSC[SLWIDX06] = SL0PWL2.SY4IDDSC[SLWIDX06];
    SLWREC.SLWIDX06 = SLWREC.SLWIDX06 + 1;
  end



  display SL0PM211 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0P221

// disp left det line
Function SL0P222()


   /* *** format map line ****/

  SL0PM212.XGPCD = SL0PWL2.XGPCD;
  SL0PM212.SY1STNBR = SL0PWL2.SY1STNBR;
  SL0PM212.SY2CLRID = SL0PWL2.SY2CLRID;
  SL0PM212.XDMCD = SL0PWL2.XDMCD;
  SL0PM212.XQACD = SL0PWL2.XQACD;
  SL0PM212.XSDCD = SL0PWL2.XSDCD;
  SL0PM212.XSACD = SL0PWL2.XSACD;
  SL0PM212.XPGCD = SL0PWL2.XPGCD;
  SL0PM212.XUMCD = SL0PWL2.XUMCD;
  SL0PM212.XOWCD = SL0PWL2.XOWCD;

  if (SL0PWL2.SL7EFFDT == 0)
    SL0PM212.SL7EFFDT = SL0PWL2.SL7EFFDT;
  else

    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2GRGGN = SL0PWL2.SL7EFFDT;
    call "TA0040" (TA2REC) {isNoRefresh = yes};

    if (TA2REC.TA2RTNCD == 0)
      SL0PM212.SL7EFFDT = TA2REC.TA2GRGAN;
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "222A";
      SLWREC.SLWMSGNO = 0001; /* <--- db date error*/
      return;
    end
  end

  SL0PM212.XXXSTAT = SL0PWL2.XXXSTAT;
  SLWREC.SLWIDX06 = 1;
  while (SLWREC.SLWIDX06 <= 5)
    SL0PM212.SY4IDDSC[SLWIDX06] = SL0PWL2.SY4IDDSC[SLWIDX06];
    SLWREC.SLWIDX06 = SLWREC.SLWIDX06 + 1;
  end

  display SL0PM212 ;


   /* ************************************************************/
   /* *** no DISPLAY AFTER processing                         ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0P222

// disp left sum title
Function SL0P225()


   /* ************************************************************/
   /* *** no "before" processing                              ****/
   /* ************************************************************/



  display SL0PM215 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0P225

// disp blank line
Function SL0P229()


   /* ************************************************************/
   /* *** set selection fields ASKIP,DARK                     ****/
   /* ************************************************************/

   /* SET SL0PM210.XMSLMSEL(SLWIDX01) AUTOSKIP,DARK;*/


  display SL0PM219 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0P229

// one time initializations
Function SL0P310()


   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0PM310 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0PW03 empty; /* appl. working storage area*/

  SLWREC.XXXMAPNM = "SL0PM310";
  SLWREC.XXXTITLE = "PRODUCT LOCATION ASSIGNMENT REPORT GENER";

  SLWREC.SLWTALOC = "SL0P310 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0PM310"; /* TA0020 current map name*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* saved msg no.*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0PM310.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0PM310.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0PM310.XXXTITLE = SLWREC.XXXTITLE;
  SL0PM310.XXXCURDT = X2CREC.X2CCURSD;

  SL0PM310.XWHCD = COMMAREA.XWHCD;

   /* ************************************************************/
   /* *** if being transf from other appl do not save causera ****/
   /* *** fld. if transf from same appl save the causera fld  ****/
   /* *** which contains current printer                      ****/
   /* ************************************************************/
  if (COMMAREA.CAFROMAP == COMMAREA.CACURRAP)
    /* next sentence*/
  else
    COMMAREA.CAUSERA = " ";
  end

  if (COMMAREA.CAUSERA > " ")
    SL0PM310.SL0PMPID = COMMAREA.CAUSERA;
    TA6REC.XURDEST = COMMAREA.CAUSERA;
    COMMAREA.CAUSERA = " ";
    SLWREC.SLWFTMSW = "N";
  end

  if (SLWREC.SLWFTMSW == "N")
    SL0PM310.SL0PMPID = TA6REC.XURDEST;
  end


end // end SL0P310

// conv & cntl fixed
Function SL0P320()


  if (SL0PM310.XWHCD == "  ")
    set SL0PM310.XWHCD cursor;
  end

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0PM310.XXXERRID = SLWREC.XXXERRID;


  converse SL0PM310 ;

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320A";
    SLWREC.SLWMSGNO = 0;
    SL0PM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320C";
    SLWREC.SLWMSGNO = 0;
    SL0PM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320D";
    SLWREC.SLWMSGNO = 0;
    SL0PM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0PM310.CATOAP > " ")
    COMMAREA.CATOAP = SL0PM310.CATOAP;
    COMMAREA.CAITEM = SL0PM310.CAITEM;
    COMMAREA.CAUSERA = SL0PM310.SL0PMPID;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320E";
    SLWREC.SLWMSGNO = 0;
    SL0PM310.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0PM310.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0PM310.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "320 ";
  set SL0PM310.CATOAP initialAttributes;
  set SL0PM310.CAITEM initialAttributes;
  set SL0PM310.SL0PMOP1 cursor;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set SL0PM310.XWHCD initialAttributes;
  set SL0PM310.SL0PMOP1 initialAttributes;
  set SL0PM310.SL0PMOP2 initialAttributes;
  set SL0PM310.XARCD initialAttributes;
  set SL0PM310.SL4ZONE initialAttributes;
  set SL0PM310.SL5LOCTN initialAttributes;
  set SL0PM310.XGPCD initialAttributes;
  set SL0PM310.SY1STNBR initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0PM310.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0PM310.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0PSH3(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "320I";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0P320

// one time initializations
Function SL0P410()


  converseLib.clearScreen();
  set SL0PM410 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0PW04 empty; /* appl. working storage area*/

  SLWREC.XXXMAPNM = "SL0PM410";
  SLWREC.XXXTITLE = "SAFETY STOCK REPORT GENERATION";

  SLWREC.SLWTALOC = "SL0P410 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0PM410"; /* TA0020 current map name*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* saved msg no.*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0PM410.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0PM410.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0PM410.XXXTITLE = SLWREC.XXXTITLE;
  SL0PM410.XXXCURDT = X2CREC.X2CCURSD;

  SL0PM410.XWHCD = COMMAREA.XWHCD;

   /* ************************************************************/
   /* *** if being transf from other appl do not save causera ****/
   /* *** fld. if transf from same appl save the causera fld  ****/
   /* *** which contains current printer                      ****/
   /* ************************************************************/
  if (COMMAREA.CAFROMAP == COMMAREA.CACURRAP)
    /* next sentence*/
  else
    COMMAREA.CAUSERA = " ";
  end

  if (COMMAREA.CAUSERA > " ")
    SL0PM410.SL0PMPID = COMMAREA.CAUSERA;
    TA6REC.XURDEST = COMMAREA.CAUSERA;
    COMMAREA.CAUSERA = " ";
    SLWREC.SLWFTMSW = "N";
  end

  if (SLWREC.SLWFTMSW == "N")
    SL0PM410.SL0PMPID = TA6REC.XURDEST;
  end


end // end SL0P410

// conv & cntl fixed
Function SL0P420()


  if (SL0PM410.XWHCD == "  ")
    set SL0PM410.XWHCD cursor;
  end

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0PM410.XXXERRID = SLWREC.XXXERRID;


  converse SL0PM410 ;


   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420A";
    SLWREC.SLWMSGNO = 0;
    SL0PM410.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420C";
    SLWREC.SLWMSGNO = 0;
    SL0PM410.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420D";
    SLWREC.SLWMSGNO = 0;
    SL0PM410.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0PM410.CATOAP > " ")
    COMMAREA.CATOAP = SL0PM410.CATOAP;
    COMMAREA.CAITEM = SL0PM410.CAITEM;
    COMMAREA.CAUSERA = SL0PM410.SL0PMPID;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420E";
    SLWREC.SLWMSGNO = 0;
    SL0PM410.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0PM410.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0PM410.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "420 ";
  set SL0PM410.CATOAP initialAttributes;
  set SL0PM410.CAITEM initialAttributes;
  set SL0PM410.SL0PMOP1 cursor;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set SL0PM410.XWHCD initialAttributes;
  set SL0PM410.SL0PMOP1 initialAttributes;
  set SL0PM410.SL0PMOP2 initialAttributes;
  set SL0PM410.XARCD initialAttributes;
  set SL0PM410.SL4ZONE initialAttributes;
  set SL0PM410.SL5LOCTN initialAttributes;
  set SL0PM410.XGPCD initialAttributes;
  set SL0PM410.SY1STNBR initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0PM410.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0PM410.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0PSH4(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "420I";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0P420

// inquiry : sz xlate : 0
Function SL0P450()


   /* ************************************************************/
   /* *** obtain the desired size description/size id (no.)   ****/
   /* *** using the std module:  SY1190                       ****/
   /* *** code the following before this is executed:         ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* ***   note: or setup during init. & use a comment       ****/
   /* ***   SYPREC.SYPFC:   PC = all valid sizes              ****/
   /* ***                   IE = int. sz id to desc.          ****/
   /* ***                   EI = desc. to int. sz id          ****/
   /* ***   SYPREC.SYPCMPSW: Y = compressed (first blank or   ****/
   /* ***                        zero is end of data)         ****/
   /* ***                    N = not compressed (positional)  ****/
   /* *** code the action for the following return codes:     ****/
   /* *** note: check the SYPREC.SYPRC (NOT sqlcode)          ****/
   /* ***      0 = successful                                 ****/
   /* ***      9 = deadlock                                   ****/
   /* ***     10 = not found                                  ****/
   /* ***  other = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** call sy1190                                         ****/
   /* *** note: func & compress sw setup prior to this sgrp   ****/
   /* ************************************************************/

  call "SY1190" (SQLCA, SYPREC) {isNoRefresh = yes, isExternal = yes};

  if (SYPREC.SYPRC == 0)
    return;
  end

  if (SYPREC.SYPRC == 9)
    return;
  end

  if (SYPREC.SYPRC == 10)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "SL0P450 ";
  TA1REC.TA1LOCAT[1] = "SY1190  ";
  TA1REC.TA1LOCAT[3] = SYPREC.SYPRCX;
  TA1REC.TA1LOCAT[4] = "SZ XLATE";
  TA1REC.TA1DBASE = "MULTIPLE";
  TA1REC.TA1TBLVU = "DB VIEWS";
  TA1REC.TA1TBLKE = SYPREC.SYPKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0P450

// inquiry:(style)color view 2:0
Function SL0P460()


   /* ************************************************************/
   /* *** select unique row/view: combined style & color view ****/
   /* *** using the std module:  IO1810                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -811 = duplicates found                           ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***     <0 = db/severe error (&-911)                    ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* ************************************************************/

  call "IO1810" ("S ", SQLCA, PKNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)

    /* CANADA 08/25/95*/

    if (SLWREC.XCTCD == "CANA")

      /* format ta1rec in case of bad return code from call to SY2000*/

      TA1REC.TA1PGMNM = "SL0P"; /* CANA program name*/
      TA1REC.TA1LOC = "SL0P460"; /* CANA sgrp name*/

      XSSL-CALL-SY2000(); /* CANA call SY2000 to get*/
                              /* product region record*/
      if (WSY2000.WSY2000-RETURN-CODE == 0) /* CANA row found*/
        return;
      else
        if (WSY2000.WSY2000-RETURN-CODE == 02) /* CANA row not found*/
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SE1A";
          SLWREC.SLWMSGNO = 0056; /* <--- not on db msg*/
          set SL0PM110.SY1STNBR cursor, bold;
          set SL0PM110.SY2CLRID bold;
          return;
        end
        if (WSY2000.WSY2000-RETURN-CODE == 98) /* CANA database busy*/
          SLWREC.SLWSKYSW = "N";
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SE1B";
          SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
          return;
        end
        converseLib.validationFailed(0001); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1LOC = "CALL SY2000";
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program appl*/
        TA1REC.TA1PGMNM = "SL0P460"; /* Program number*/
        TA1REC.TA1MAP = SLWREC.XXXMAPNM; /* Map name*/
        TA1REC.TA1DBASE = "DPROD  "; /* Data base name*/
        TA1REC.TA1TBLVU = "VSYREG02"; /* Table view name*/
        TA1REC.TA1TBLKE = PKNREC.PKNKEY; /* Table key*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback();

                              /* Error diagnosis routine*/
        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

      end
    end
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -811)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "SL0H460 ";
  TA1REC.TA1LOCAT[1] = "IO1810  ";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DPICK   ";
  TA1REC.TA1TBLVU = "VPKSTY01";
  TA1REC.TA1TBLKE = PKNREC.PKNKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0P460

// will group fit on detail queue
Function SL0PS1C()


  if (SLWREC.SLWIDX01 <= SLWREC.SLWIDX04)
    SLWREC.SLWIDX04 = SLWREC.SLWIDX04 - SLWREC.SLWIDX01; /* available space*/
  else
    if (SLWREC.SLWIDX02 != 1) /* if any lines in detail w.s*/
      /* *** fill the rest of the detail queue with blank records ****/
      while (SLWREC.SLWIDX02 <= SLWREC.SLWLINPP)
        SL0PWD0.SL0PWRTY[SLWIDX02] = "B";
        SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
      end
      /* *** put the detail records to the tsq ****/
      TA5REC.TA5APPID = SLWREC.SLWDETQU;
      TA5REC.TA5FNCCD = "A";
      call "TA0050" (SL0PWD0, TA5REC) {isNoRefresh = yes};
      if (TA5REC.TA5RTNCD != 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S1CA";
        SLWREC.SLWMSGNO = 0001; /* <--- severe tsq error msg*/
        return;
      end
      /* *** reset for next group ****/
      SLWREC.SLWIDX02 = 1; /* detail lines*/
      SLWREC.SLWIDX04 = SLWREC.SLWLINPP; /* available lines*/
      SLWREC.SLWIDX04 = SLWREC.SLWIDX04 - SLWREC.SLWIDX01;
                                   /* available space*/
    end
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0PS1C

// format detail buffer
Function SL0PS1E()

  SL0PW01.SL0PWSZ1 = SL7REC.SY5SZID;

  if (SL7REC.SL7EFFDT != SL0PW01.SL7EFFDT
   || SL7REC.XXXSTAT != SL0PW01.XXXSTAT
   || SL7REC.XARCD != SL0PW01.XARCD
   || SL7REC.SL4ZONE != SL0PW01.SL4ZONE
   || SL7REC.SL5LOCTN != SL0PW01.SL5LOCTN)

    if (SLWREC.SLWFTMSW == "N")
      while (SLWREC.SLWIDX03 <= 8) /* fill rest of size fields w/spaces*/
        SL0PWL1.SY4IDDSC[SLWIDX03] = "     ";
        SLWREC.SLWIDX03 = SLWREC.SLWIDX03 + 1;
      end

      SLWREC.SLWIDX03 = 1; /* reset size counter*/

      SLWREC.SLWIDX01 = SLWIDX01 + 1; /* increment buffer line count*/
      SL0PWB1.SL0PWRC1[SLWIDX01] = SL0PWL1.SL0PWLN1;
      SLWREC.SLWIDX05 = 1; /* initialize for stepping thru buffer*/

      SL0PS1C(); /* will the group fit on tsq ?*/

      while (SLWREC.SLWIDX05 <= SLWREC.SLWIDX01) /* for all in buffer*/
        if (SLWREC.SLWIDX05 == 1)
          SL0PWD0.SL0PWRTY[SLWIDX02] = "D";
        else
          SL0PWD0.SL0PWRTY[SLWIDX02] = "S"; /* only sizes*/
        end
        SL0PWD0.SL0PWDTA[SLWIDX02] = SL0PWB1.SL0PWRC1[SLWIDX05];
        SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
        SLWREC.SLWIDX05 = SLWREC.SLWIDX05 + 1;
      end
      SLWREC.SLWIDX01 = 0; /* reset buffer counter*/
    end
    SLWREC.SLWFTMSW = "N"; /* no longer first time*/
    /* *** check for location break ****/
    if (SL7REC.XARCD != SL0PW01.XARCD
     || SL7REC.SL4ZONE != SL0PW01.SL4ZONE
     || SL7REC.SL5LOCTN != SL0PW01.SL5LOCTN)

      /* *** format work line ****/
      SL0PWL1.XARCD = SL7REC.XARCD;
      SL0PWL1.SL4ZONE = SL7REC.SL4ZONE;
      SL0PWL1.SL5LOCTN = SL7REC.SL5LOCTN;
      SL0PWL1.SL7EFFDT = SL7REC.SL7EFFDT;
      SL0PWL1.XXXSTAT = SL7REC.XXXSTAT;
      SL0PW01.SL0PWSZ1 = SL7REC.SY5SZID;
      SL0PWL1.SY4IDDSC[SLWIDX03] = SYPREC.SY4IDDSC[SL0PWSZ1];
      SLWREC.SLWIDX03 = SLWREC.SLWIDX03 + 1;
    else
      /* *** format work line ****/
      if (SLWREC.SLWIDX02 == 1) /* if first line on screen*/
        SL0PWL1.XARCD = SL7REC.XARCD;
        SL0PWL1.SL4ZONE = SL7REC.SL4ZONE;
        SL0PWL1.SL5LOCTN = SL7REC.SL5LOCTN;
        SL0PWL1.SL7EFFDT = SL7REC.SL7EFFDT;
        SL0PWL1.XXXSTAT = SL7REC.XXXSTAT;
      else
        SL0PWL1.XARCD = "  ";
        SL0PWL1.SL4ZONE = "  ";
        SL0PWL1.SL5LOCTN = "      ";
        SL0PWL1.SL7EFFDT = SL7REC.SL7EFFDT;
        SL0PWL1.XXXSTAT = SL7REC.XXXSTAT;
      end
      SL0PW01.SL0PWSZ1 = SL7REC.SY5SZID;
      SL0PWL1.SY4IDDSC[SLWIDX03] = SYPREC.SY4IDDSC[SL0PWSZ1];
      SLWREC.SLWIDX03 = SLWREC.SLWIDX03 + 1;
    end
    /* *** prepare compare fields ****/
    SL0PW01.XARCD = SL7REC.XARCD;
    SL0PW01.SL4ZONE = SL7REC.SL4ZONE;
    SL0PW01.SL5LOCTN = SL7REC.SL5LOCTN;
    SL0PW01.SL7EFFDT = SL7REC.SL7EFFDT;
    SL0PW01.XXXSTAT = SL7REC.XXXSTAT;
  else
    if (SLWREC.SLWIDX03 > 8)
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
      SL0PWB1.SL0PWRC1[SLWIDX01] = SL0PWL1.SL0PWLN1;
      SLWIDX03 = 1;
      SL0PWL1.XARCD = "  ";
      SL0PWL1.SL4ZONE = "  ";
      SL0PWL1.SL5LOCTN = "      ";
      SL0PWL1.SL7EFFDT = 0;
      SL0PWL1.XXXSTAT = "  ";
      SL0PW01.SL0PWSZ1 = SL7REC.SY5SZID;
      SL0PWL1.SY4IDDSC[SLWIDX03] = SYPREC.SY4IDDSC[SL0PWSZ1];
      SLWREC.SLWIDX03 = SLWREC.SLWIDX03 + 1;
    else
      SL0PW01.SL0PWSZ1 = SL7REC.SY5SZID;
      SL0PWL1.SY4IDDSC[SLWIDX03] = SYPREC.SY4IDDSC[SL0PWSZ1];
      SLWREC.SLWIDX03 = SLWREC.SLWIDX03 + 1;
    end
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0PS1E

// process last group
Function SL0PS1H()

  while (SLWREC.SLWIDX03 <= 8)
    SL0PWL1.SY4IDDSC[SLWIDX03] = "     ";
    SLWREC.SLWIDX03 = SLWREC.SLWIDX03 + 1;
  end
  SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  SL0PWB1.SL0PWRC1[SLWIDX01] = SL0PWL1.SL0PWLN1;

  SL0PS1C(); /* determine if detail record queue is full*/

  SLWREC.SLWIDX05 = 1;
  while (SLWREC.SLWIDX05 <= SLWREC.SLWIDX01)
    if (SLWREC.SLWIDX05 == 1)
      SL0PWD0.SL0PWRTY[SLWIDX02] = "D";
    else
      SL0PWD0.SL0PWRTY[SLWIDX02] = "S";
    end
    SL0PWD0.SL0PWDTA[SLWIDX02] = SL0PWB1.SL0PWRC1[SLWIDX05];
    SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
    SLWREC.SLWIDX05 = SLWREC.SLWIDX05 + 1;
  end

   /* *** fill the rest of the detail queue with blank records ****/
  while (SLWREC.SLWIDX02 <= SLWREC.SLWLINPP)
    SL0PWD0.SL0PWRTY[SLWIDX02] = "B";
    SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
  end
   /* *** put the last detail records to the tsq ****/
  TA5REC.TA5APPID = SLWREC.SLWDETQU;
  TA5REC.TA5FNCCD = "A";

  call "TA0050" (SL0PWD0, TA5REC) {isNoRefresh = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1HA";
    SLWREC.SLWMSGNO = 0001; /* <--- severe tsq error msg*/
    return;
  end

   /* *** keep track of last detail relative record number ****/
  SLWREC.SLWDMAXR = TA5REC.TA5TSQIX;


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0PS1H

// process first prod/assgn rec
Function SL0PS1K()

  if (SL0PM110.SL0PMSEL == "C")
    if (SL7REC.XXXSTAT == "A")
      SL0PS1E(); /* format line*/
    end
  else
    if (SL7REC.XXXSTAT == "I")
      SL0PS1E(); /* format line*/
    end
  end

  SL0PW01.SL0PWARE = SL7REC.XARCD;
  SL0PW01.SL0PWZON = SL7REC.SL4ZONE;
  SL0PW01.SL0PWLOC = SL7REC.SL5LOCTN;
  SL0PW01.SL0PWSIZ = SL7REC.SY5SZID;

  XSSL7F8(); /* fetch records*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  if (SL7REC.XARCD != SL0PW01.SL0PWARE
   || SL7REC.SL4ZONE != SL0PW01.SL0PWZON
   || SL7REC.SL5LOCTN != SL0PW01.SL0PWLOC
   || SL7REC.SY5SZID != SL0PW01.SL0PWSIZ)
    SLWREC.SLWLINSS = "Y";
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    if (SL0PM110.SL0PMSEL == "C")
      if (SL7REC.XXXSTAT == "I")
        /* skip = only want to see the actives 10/21/87 wnj*/
        /* SL0PS1E                   ; format line*/
        return;
      end
    else
      if (SL7REC.XXXSTAT == "A")
        SL0PS1E(); /* format line*/
        return;
      end
    end
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0PS1K

// process last group
Function SL0PS1M()

  TA1REC.TA1LOCAT[2] = "SL0PS1M ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

   /* *************** format prod/assgn rec **********************/

  set SL7REC empty;
  SL7REC.XWHCD = SL0PM110.XWHCD;
  SL7REC.XGPCD = SL0PM110.XGPCD;
  SL7REC.SY1STNBR = SL0PM110.SY1STNBR;
  SL7REC.SY2CLRID = SL0PM110.SY2CLRID;
  SL7REC.XDMCD = SL0PM110.XDMCD;
  SL7REC.XQACD = SL0PM110.XQACD;
  SL7REC.XOWCD = SL0PM110.XOWCD;
  SL7REC.XSDCD = SL0PM110.XSDCD;
  SL7REC.XSACD = SL0PM110.XSACD;
  SL7REC.XPGCD = SL0PM110.XPGCD;
  SL7REC.XUMCD = SL0PM110.XUMCD;
  SL7REC.SY5SZID = -1;
  SL7REC.XXXSTAT = "*";

  if (SL0PM110.SL0PMSEL == "F")
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2DYAOD = 1;
    TA2REC.TA2GRGGN = X2CREC.X2CCURDT;
    call "TA0040" (TA2REC) {isNoRefresh = yes};

    if (TA2REC.TA2RTNCD == 0)
      SLVREC.SLVSDT = TA2REC.TA2GRGGN;
      SLVREC.SLVEDT = 999999999;
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1MA";
      SLWREC.SLWMSGNO = 0001; /* <--- db date error*/
      return;
    end
  else
    SLVREC.SLVSDT = 0;
    SLVREC.SLVEDT = 999999999;
  end

  XSSL7S5(); /* select set of prod/assgn recs*/

  if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1MB";
    SLWREC.SLWMSGNO = 0044; /* <--- not on db msg*/
    set SL0PM110.SY1STNBR cursor, bold;
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1MC";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0)
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S1MD";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    SL0PST1(); /* <=== clear scrn (empty)*/
    return;
  end


   /* *** initialize fields for loop processing ****/

  SLWREC.SLWFTMSW = "Y";
  SLWREC.SLWIDX01 = 0; /* buffer area index*/
  SLWREC.SLWIDX02 = 1; /* detail area index*/
  SLWREC.SLWIDX03 = 1; /* sizes on work line index*/
  SLWREC.SLWIDX05 = 1; /* step thru buffer*/
  SLWREC.SLWIDX04 = SLWREC.SLWLINPP; /* remaining lines*/
  SL0PW01.XARCD = "  ";
  SL0PW01.SL4ZONE = "  ";
  SL0PW01.SL5LOCTN = "  ";
  SL0PW01.XXXSTAT = "  ";
  SL0PW01.SL7EFFDT = 0;
  SL0PW01.SY5SZID = 0;

  SL0PS1E();

  XSSL7F5(); /* select next record*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* *** process each prod/assgn record and build tsqs ****/

  while (SQLCA.VAGen_SQLCODE == +0)

    SL0PS1E(); /* format detail in buffer area*/

    XSSL7F5(); /* select next record*/

    if (SLWREC.SLWERRSW == "Y")
      return;
    end
  end

  if (SQLCA.VAGen_SQLCODE == +100)

    SL0PS1H(); /* last group detail processing*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0PS1M

// will group fit on detail queue
Function SL0PS1N()

  TA1REC.TA1LOCAT[2] = "SL0PS1N ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

   /* *************** format prod/assgn rec **********************/

  set SL7REC empty;
  SL7REC.XWHCD = SL0PM110.XWHCD;
  SL7REC.XGPCD = SL0PM110.XGPCD;
  SL7REC.SY1STNBR = SL0PM110.SY1STNBR;
  SL7REC.SY2CLRID = SL0PM110.SY2CLRID;
  SL7REC.XDMCD = SL0PM110.XDMCD;
  SL7REC.XQACD = SL0PM110.XQACD;
  SL7REC.XOWCD = SL0PM110.XOWCD;
  SL7REC.XSDCD = SL0PM110.XSDCD;
  SL7REC.XSACD = SL0PM110.XSACD;
  SL7REC.XPGCD = SL0PM110.XPGCD;
  SL7REC.XUMCD = SL0PM110.XUMCD;
   /* *** put in wild card values ****/
  SL7REC.XARCD = "*";
  SL7REC.SL4ZONE = "*";
  SL7REC.SL5LOCTN = "*";
  SL7REC.SY5SZID = -1;
  SL7REC.XXXSTAT = "*";

  if (SL0PM110.SL0PMSEL == "C")
    SLVREC.SLVSDT = 0;
    SLVREC.SLVEDT = X2CREC.X2CCURDT;
  else
     /* SL0PM110.SL0PMSEL EQ 'P';*/
    SLVREC.SLVSDT = 0;
    SLVREC.SLVEDT = X2CREC.X2CCURDT;
  end

  XSSL7S8(); /* select set of prod/assgn recs*/

  if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1NA";
    SLWREC.SLWMSGNO = 0044; /* <--- not on db msg*/
    set SL0PM110.SY1STNBR cursor, bold;
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1NB";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0)
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S1NC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    SL0PST1(); /* <=== clear scrn (empty)*/
    return;
  end

   /* *** initialize fields for loop processing ****/

  SLWREC.SLWFTMSW = "Y"; /* set first time switch*/
  SLWREC.SLWIDX01 = 0; /* buffer area index*/
  SLWREC.SLWIDX02 = 1; /* detail area index*/
  SLWREC.SLWIDX03 = 1; /* sizes on work line index*/
  SLWREC.SLWIDX05 = 1; /* step thru buffer*/
  SLWREC.SLWIDX04 = SLWREC.SLWLINPP; /* remaining lines*/
  SL0PW01.XARCD = "  ";
  SL0PW01.SL4ZONE = "  ";
  SL0PW01.SL5LOCTN = "  ";
  SL0PW01.XXXSTAT = "  ";
  SL0PW01.SL7EFFDT = 0;
  SL0PW01.SY5SZID = 0;

   /* *** process each prod/assgn record and build tsqs ****/

  while (SQLCA.VAGen_SQLCODE == +0)

    SLWREC.SLWLINSS = "N";
    SL0PS1K(); /* process this active/inactive group*/

    if (SLWREC.SLWERRSW == "Y")
      return;
    end

    if (SQLCA.VAGen_SQLCODE == +0)
      if (SLWREC.SLWLINSS == "N")
        XSSL7F8(); /* select next record*/
      end
    end

    if (SLWREC.SLWERRSW == "Y")
      return;
    end

  end

  if (SQLCA.VAGen_SQLCODE == +100)

    SL0PS1H(); /* last group detail processing*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0PS1N

// determine if group will fit
Function SL0PS2C()


  if (SLWREC.SLWIDX01 <= SLWREC.SLWIDX04)
    SLWREC.SLWIDX04 = SLWREC.SLWIDX04 - SLWREC.SLWIDX01; /* available space*/
  else
    if (SLWREC.SLWIDX02 != 1) /* if any lines in detail w.s*/
      /* *** fill the rest of the detail queue with blank records ****/
      while (SLWREC.SLWIDX02 <= SLWREC.SLWLINPP)
        SL0PWD0.SL0PWRTY[SLWIDX02] = "B";
        SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
      end
      /* *** put the detail records to the tsq ****/
      TA5REC.TA5APPID = SLWREC.SLWDETQU;
      TA5REC.TA5FNCCD = "A";
      call "TA0050" (SL0PWD0, TA5REC) {isNoRefresh = yes};
      if (TA5REC.TA5RTNCD != 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S2CA";
        SLWREC.SLWMSGNO = 0001; /* <--- severe tsq error msg*/
        return;
      end
      /* *** reset for next group ****/
      SLWREC.SLWIDX02 = 1; /* detail lines*/
      SLWREC.SLWIDX04 = SLWREC.SLWLINPP; /* available lines*/
      SLWREC.SLWIDX04 = SLWREC.SLWIDX04 - SLWREC.SLWIDX01;
                                   /* available space*/
    end
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0PS2C

// prod assign loop for prod/assg
Function SL0PS2F()

  SL0PW02.SL0PWSZ2 = SL7REC.SY5SZID;

  if (SL0PW02.SL0PWRSW == "N")
    SL0PW02.SL0PWRSW = "Y"; /* records exist*/
  end

  if (SL7REC.XGPCD != SL0PW02.XGPCD
   || SL7REC.SY1STNBR != SL0PW02.SY1STNBR
   || SL7REC.SY2CLRID != SL0PW02.SY2CLRID
   || SL7REC.XDMCD != SL0PW02.XDMCD
   || SL7REC.XQACD != SL0PW02.XQACD
   || SL7REC.XSDCD != SL0PW02.XSDCD
   || SL7REC.XSACD != SL0PW02.XSACD
   || SL7REC.XPGCD != SL0PW02.XPGCD
   || SL7REC.XUMCD != SL0PW02.XUMCD
   || SL7REC.XOWCD != SL0PW02.XOWCD
   || SL7REC.SL7EFFDT != SL0PW02.SL7EFFDT
   || SL7REC.XXXSTAT != SL0PW02.XXXSTAT)

    if (SLWREC.SLWFTMSW == "N")
      while (SLWREC.SLWIDX03 <= 5) /* fill rest of size fields w/spaces*/
        SL0PWL2.SY4IDDSC[SLWIDX03] = "     ";
        SLWREC.SLWIDX03 = SLWREC.SLWIDX03 + 1;
      end

      SLWREC.SLWIDX03 = 1; /* reset size counter*/

      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
      SL0PWB2.SL0PWRC2[SLWIDX01] = SL0PWL2.SL0PWLN2;
      SLWREC.SLWIDX05 = 1; /* initialize for stepping thru buffer*/

      SL0PS2C(); /* will the group fit on tsq ?*/

      while (SLWREC.SLWIDX05 <= SLWREC.SLWIDX01) /* for all in buffer*/
        if (SLWREC.SLWIDX05 == 1)
          SL0PWD0.SL0PWRTY[SLWIDX02] = "D";
        else
          SL0PWD0.SL0PWRTY[SLWIDX02] = "S"; /* only sizes*/
        end
        SL0PWD0.SL0PWDTA[SLWIDX02] = SL0PWB2.SL0PWRC2[SLWIDX05];
        SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
        SLWREC.SLWIDX05 = SLWREC.SLWIDX05 + 1;
      end
      SLWREC.SLWIDX01 = 0; /* reset buffer counter*/
    end
    SLWREC.SLWFTMSW = "N";
    /* *** check for product break ****/
    if (SL7REC.XGPCD != SL0PW02.XGPCD
     || SL7REC.SY1STNBR != SL0PW02.SY1STNBR
     || SL7REC.SY2CLRID != SL0PW02.SY2CLRID
     || SL7REC.XDMCD != SL0PW02.XDMCD
     || SL7REC.XQACD != SL0PW02.XQACD
     || SL7REC.XSDCD != SL0PW02.XSDCD
     || SL7REC.XSACD != SL0PW02.XSACD
     || SL7REC.XPGCD != SL0PW02.XPGCD
     || SL7REC.XUMCD != SL0PW02.XUMCD
     || SL7REC.XOWCD != SL0PW02.XOWCD)

       /* *** obtain valid size descriptions ****/

      set SYPREC empty;
      SYPREC.XGPCD = SL7REC.XGPCD;
      SYPREC.SY1STNBR = SL7REC.SY1STNBR;
      SYPREC.SY2CLRID = SL7REC.SY2CLRID;
      SYPREC.XDMCD = SL7REC.XDMCD;
      SYPREC.XQACD = SL7REC.XQACD;

      SL0PSAA(); /* perform size translation call*/

      if (SLWREC.SLWERRSW == "Y")
        return;
      end

      /* *** format work line ****/
      SL0PWL2.XGPCD = SL7REC.XGPCD;
      SL0PWL2.SY1STNBR = SL7REC.SY1STNBR;
      SL0PWL2.SY2CLRID = SL7REC.SY2CLRID;
      SL0PWL2.XDMCD = SL7REC.XDMCD;
      SL0PWL2.XQACD = SL7REC.XQACD;
      SL0PWL2.XSDCD = SL7REC.XSDCD;
      SL0PWL2.XSACD = SL7REC.XSACD;
      SL0PWL2.XPGCD = SL7REC.XPGCD;
      SL0PWL2.XUMCD = SL7REC.XUMCD;
      SL0PWL2.XOWCD = SL7REC.XOWCD;
      SL0PWL2.SL7EFFDT = SL7REC.SL7EFFDT;
      SL0PWL2.XXXSTAT = SL7REC.XXXSTAT;
      SL0PW02.SL0PWSZ2 = SL7REC.SY5SZID;
      SL0PWL2.SY4IDDSC[SLWIDX03] = SYPREC.SY4IDDSC[SL0PWSZ2];
      SLWREC.SLWIDX03 = SLWREC.SLWIDX03 + 1;
      /* *** prepare compare fields ****/
      SL0PW02.XGPCD = SL7REC.XGPCD;
      SL0PW02.SY1STNBR = SL7REC.SY1STNBR;
      SL0PW02.SY2CLRID = SL7REC.SY2CLRID;
      SL0PW02.XDMCD = SL7REC.XDMCD;
      SL0PW02.XQACD = SL7REC.XQACD;
      SL0PW02.XSDCD = SL7REC.XSDCD;
      SL0PW02.XSACD = SL7REC.XSACD;
      SL0PW02.XPGCD = SL7REC.XPGCD;
      SL0PW02.XUMCD = SL7REC.XUMCD;
      SL0PW02.XOWCD = SL7REC.XOWCD;
      SL0PW02.SL7EFFDT = SL7REC.SL7EFFDT;
      SL0PW02.XXXSTAT = SL7REC.XXXSTAT;
      SLWREC.SLWIDX06 = 1;
      while (SLWREC.SLWIDX06 <= 40)
        SL0PW02.SL0PWZFL[SLWIDX06] = "N";
        SL0PW02.SL0PWZDT[SLWIDX06] = 0;
        SLWREC.SLWIDX06 = SLWREC.SLWIDX06 + 1;
      end
      if (SL0PM210.SL0PMSEL == "C")
        if (SL0PW02.SL0PWZFL[SL0PWSZ2] == "Y" /* yes this size processed*/
         && SL7REC.SL7EFFDT != SL0PW02.SL0PWZDT[SL0PWSZ2])
          SL0PW02.SL0PWZFL[SL0PWSZ2] = "Y"; /* set switch for size*/
          SL0PW02.SL0PWZDT[SL0PWSZ2] = SL7REC.SL7EFFDT;
          return;
        else
          SL0PW02.SL0PWZFL[SL0PWSZ2] = "Y"; /* set switch for size*/
          SL0PW02.SL0PWZDT[SL0PWSZ2] = SL7REC.SL7EFFDT;
        end
      else
        if (SL0PM210.SL0PMSEL == "P")
          if (SL0PW02.SL0PWZFL[SL0PWSZ2] == "N") /* have not processed size*/
            SL0PW02.SL0PWZFL[SL0PWSZ2] = "Y"; /* set switch for size*/
            SL0PW02.SL0PWZDT[SL0PWSZ2] = SL7REC.SL7EFFDT;
          end
        end
      end
    else
      /* *** format work line ****/
      if (SLWREC.SLWIDX02 == 1) /* if first line on screen*/
        SL0PWL2.XGPCD = SL7REC.XGPCD;
        SL0PWL2.SY1STNBR = SL7REC.SY1STNBR;
        SL0PWL2.SY2CLRID = SL7REC.SY2CLRID;
        SL0PWL2.XDMCD = SL7REC.XDMCD;
        SL0PWL2.XQACD = SL7REC.XQACD;
        SL0PWL2.XSDCD = SL7REC.XSDCD;
        SL0PWL2.XSACD = SL7REC.XSACD;
        SL0PWL2.XPGCD = SL7REC.XPGCD;
        SL0PWL2.XUMCD = SL7REC.XUMCD;
        SL0PWL2.XOWCD = SL7REC.XOWCD;
      else
        SL0PWL2.XGPCD = "  ";
        SL0PWL2.SY1STNBR = "      ";
        SL0PWL2.SY2CLRID = "   ";
        SL0PWL2.XDMCD = "  ";
        SL0PWL2.XQACD = "  ";
        SL0PWL2.XSDCD = "   ";
        SL0PWL2.XSACD = "   ";
        SL0PWL2.XPGCD = "  ";
        SL0PWL2.XUMCD = "  ";
        SL0PWL2.XOWCD = "  ";
      end
      SL0PWL2.SL7EFFDT = SL7REC.SL7EFFDT;
      SL0PWL2.XXXSTAT = SL7REC.XXXSTAT;
      SL0PW02.SL0PWSZ2 = SL7REC.SY5SZID;
      SL0PWL2.SY4IDDSC[SLWIDX03] = SYPREC.SY4IDDSC[SL0PWSZ2];
      SLWREC.SLWIDX03 = SLWREC.SLWIDX03 + 1;
      /* *** prepare compare fields ****/
      SL0PW02.SL7EFFDT = SL7REC.SL7EFFDT;
      SL0PW02.XXXSTAT = SL7REC.XXXSTAT;
    end
  else
    if (SLWREC.SLWIDX03 > 5)
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
      SL0PWB2.SL0PWRC2[SLWIDX01] = SL0PWL2.SL0PWLN2;
      SLWIDX03 = 1;
      SL0PWL2.XGPCD = "  ";
      SL0PWL2.SY1STNBR = "      ";
      SL0PWL2.SY2CLRID = "   ";
      SL0PWL2.XDMCD = "  ";
      SL0PWL2.XQACD = "  ";
      SL0PWL2.XSDCD = "   ";
      SL0PWL2.XSACD = "   ";
      SL0PWL2.XPGCD = "  ";
      SL0PWL2.XUMCD = "  ";
      SL0PWL2.XOWCD = "  ";
      SL0PWL2.SL7EFFDT = 0;
      SL0PWL2.XXXSTAT = "  ";
      SL0PW02.SL0PWSZ2 = SL7REC.SY5SZID;
      SL0PWL2.SY4IDDSC[SLWIDX03] = SYPREC.SY4IDDSC[SL0PWSZ2];
      SLWREC.SLWIDX03 = SLWREC.SLWIDX03 + 1;
    else
      SL0PW02.SL0PWSZ2 = SL7REC.SY5SZID;
      SL0PWL2.SY4IDDSC[SLWIDX03] = SYPREC.SY4IDDSC[SL0PWSZ2];
      SLWREC.SLWIDX03 = SLWREC.SLWIDX03 + 1;
    end
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0PS2F

// process last group
Function SL0PS2H()

  if (SL0PM210.SL0PMSEL == "P")
    if (SL0PW02.SL0PWRSW == "N")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2HA";
      SLWREC.SLWMSGNO = 0083;
      set SL0PM210.XARCD cursor, bold;
      set SL0PM210.SL4ZONE bold;
      set SL0PM210.SL5LOCTN bold;
      return;
    end
  end

  while (SLWREC.SLWIDX03 <= 5)
    SL0PWL2.SY4IDDSC[SLWIDX03] = "     ";
    SLWREC.SLWIDX03 = SLWREC.SLWIDX03 + 1;
  end

  SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  SL0PWB2.SL0PWRC2[SLWIDX01] = SL0PWL2.SL0PWLN2;

  SL0PS2C(); /* will the group fit on tsq ?*/

  SLWREC.SLWIDX05 = 1; /* initialize for stepping thru buffer*/

  while (SLWREC.SLWIDX05 <= SLWREC.SLWIDX01) /* for all in buffer*/
    if (SLWREC.SLWIDX05 == 1)
      SL0PWD0.SL0PWRTY[SLWIDX02] = "D";
    else
      SL0PWD0.SL0PWRTY[SLWIDX02] = "S";
    end
    SL0PWD0.SL0PWDTA[SLWIDX02] = SL0PWB2.SL0PWRC2[SLWIDX05];
    SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
    SLWREC.SLWIDX05 = SLWREC.SLWIDX05 + 1;
  end

   /* *** fill the rest of the detail queue with blank records ****/
  while (SLWREC.SLWIDX02 <= SLWREC.SLWLINPP)
    SL0PWD0.SL0PWRTY[SLWIDX02] = "B";
    SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
  end
   /* *** put the last detail records to the tsq ****/
  TA5REC.TA5APPID = SLWREC.SLWDETQU;
  TA5REC.TA5FNCCD = "A";

  call "TA0050" (SL0PWD0, TA5REC) {isNoRefresh = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S2HB";
    SLWREC.SLWMSGNO = 0001; /* <--- severe tsq error msg*/
    return;
  end

   /* *** keep track of last detail relative record number ****/
  SLWREC.SLWDMAXR = TA5REC.TA5TSQIX;


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0PS2H

// process first prod/assgn rec
Function SL0PS2K()

  if (SL0PM210.SL0PMSEL == "C")
    if (SL7REC.XXXSTAT == "A")
      SL0PS2F(); /* format line*/
    end
  else
    if (SL7REC.XXXSTAT == "I")
      SL0PS2F(); /* format line*/
    end
  end

  SL0PW02.SL0PWGPC = SL7REC.XGPCD;
  SL0PW02.SL0PWSTY = SL7REC.SY1STNBR;
  SL0PW02.SL0PWCOL = SL7REC.SY2CLRID;
  SL0PW02.SL0PWDIM = SL7REC.XDMCD;
  SL0PW02.SL0PWQUA = SL7REC.XQACD;
  SL0PW02.SL0PWSPE = SL7REC.XSDCD;
  SL0PW02.SL0PWSHA = SL7REC.XSACD;
  SL0PW02.SL0PWPAC = SL7REC.XPGCD;
  SL0PW02.SL0PWUOM = SL7REC.XUMCD;
  SL0PW02.SL0PWOWN = SL7REC.XOWCD;
  SL0PW02.SL0PWSIZ = SL7REC.SY5SZID;

  XSSL7F7(); /* fetch records*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  if (SL7REC.XGPCD != SL0PW02.SL0PWGPC
   || SL7REC.SY1STNBR != SL0PW02.SL0PWSTY
   || SL7REC.SY2CLRID != SL0PW02.SL0PWCOL
   || SL7REC.XDMCD != SL0PW02.SL0PWDIM
   || SL7REC.XQACD != SL0PW02.SL0PWQUA
   || SL7REC.XSDCD != SL0PW02.SL0PWSPE
   || SL7REC.XSACD != SL0PW02.SL0PWSHA
   || SL7REC.XPGCD != SL0PW02.SL0PWPAC
   || SL7REC.XUMCD != SL0PW02.SL0PWUOM
   || SL7REC.XOWCD != SL0PW02.SL0PWOWN
   || SL7REC.SY5SZID != SL0PW02.SL0PWSIZ)
    SLWREC.SLWLINSS = "Y";
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    if (SL0PM210.SL0PMSEL == "C")
      if (SL7REC.XXXSTAT == "I")
        SL0PS2F(); /* format line*/
        return;
      end
    else
      if (SL7REC.XXXSTAT == "A")
        SL0PS2F(); /* format line*/
        return;
      end
    end
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0PS2K

// setup sum tsq
Function SL0PS2M()


   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0PSS2 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* *************** format prod/loc rec ************************/

  set SL7REC empty;
  SL7REC.XWHCD = SL0PM210.XWHCD;
  SL7REC.XARCD = SL0PM210.XARCD;
  SL7REC.SL4ZONE = SL0PM210.SL4ZONE;
  SL7REC.SL5LOCTN = SL0PM210.SL5LOCTN;
  SL7REC.XXXSTAT = "*";

  if (SL0PM210.SL0PMSEL == "F")
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2DYAOD = 1;
    TA2REC.TA2GRGGN = X2CREC.X2CCURDT;
    call "TA0040" (TA2REC) {isNoRefresh = yes};

    if (TA2REC.TA2RTNCD == 0)
      SLVREC.SLVSDT = TA2REC.TA2GRGGN;
      SLVREC.SLVEDT = 999999999;
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SS2A";
      SLWREC.SLWMSGNO = 0001; /* <--- db date error*/
      return;
    end
  else
    SLVREC.SLVSDT = 0;
    SLVREC.SLVEDT = 999999999;
  end

  XSSL7S2(); /* select set of prod/assgn recs*/

  if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SS2B";
    SLWREC.SLWMSGNO = 0083; /* <--- not on db msg*/
    set SL0PM210.XARCD cursor, bold;
    set SL0PM210.SL4ZONE bold;
    set SL0PM210.SL5LOCTN bold;
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SS2C";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0)
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "SS2D";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    SL0PST2(); /* <=== clear scrn (empty)*/
    return;
  end


   /* *** initialize fields for loop processing ****/

  SLWREC.SLWFTMSW = "Y";
  SLWREC.SLWIDX01 = 0; /* buffer area index*/
  SLWREC.SLWIDX02 = 1; /* detail area index*/
  SLWREC.SLWIDX03 = 1; /* sizes on work line index*/
  SLWREC.SLWIDX05 = 1; /* step thru buffer*/
  SLWREC.SLWIDX04 = SLWREC.SLWLINPP; /* remaining lines*/
  SL0PW02.SL0PWRSW = "N";
  SL0PW02.XGPCD = "   ";
  SL0PW02.SY1STNBR = "      ";
  SL0PW02.SY2CLRID = "   ";
  SL0PW02.XDMCD = "  ";
  SL0PW02.XQACD = "  ";
  SL0PW02.XOWCD = "  ";
  SL0PW02.XSDCD = "   ";
  SL0PW02.XSACD = "   ";
  SL0PW02.XPGCD = "  ";
  SL0PW02.XUMCD = "  ";


  SL0PS2F(); /* format first detail record in buffer area ****/

  XSSL7F2(); /* select next record*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* *** process each prod/assgn record and build tsqs ****/

  while (SQLCA.VAGen_SQLCODE == +0)

    SL0PS2F(); /* format detail in buffer area*/

    XSSL7F2(); /* select next record*/

    if (SLWREC.SLWERRSW == "Y")
      return;
    end

  end

  if (SQLCA.VAGen_SQLCODE == +100)

    SL0PS2H(); /* last group detail processing*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0PS2M

// setup sum tsq
Function SL0PS2N()


   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0PSS2 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* *************** format prod/loc rec ************************/

  set SL7REC empty;
  SL7REC.XWHCD = SL0PM210.XWHCD;
  SL7REC.XARCD = SL0PM210.XARCD;
  SL7REC.SL4ZONE = SL0PM210.SL4ZONE;
  SL7REC.SL5LOCTN = SL0PM210.SL5LOCTN;
  SL7REC.XXXSTAT = "*";
  SL7REC.SY5SZID = -1;
  SL7REC.XGPCD = "*";
  SL7REC.SY1STNBR = "*";
  SL7REC.SY2CLRID = "*";
  SL7REC.XDMCD = "*";
  SL7REC.XQACD = "*";
  SL7REC.XSDCD = "*";
  SL7REC.XSACD = "*";
  SL7REC.XPGCD = "*";
  SL7REC.XUMCD = "*";
  SL7REC.XOWCD = "*";

  if (SL0PM210.SL0PMSEL == "C")
    SLVREC.SLVSDT = 0;
    SLVREC.SLVEDT = X2CREC.X2CCURDT;
  else
    if (SL0PM210.SL0PMSEL == "P")
      SLVREC.SLVSDT = 0;
      SLVREC.SLVEDT = X2CREC.X2CCURDT;
    end
  end

  XSSL7S7(); /* select set of prod/assgn recs*/

  if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SS2B";
    SLWREC.SLWMSGNO = 0083; /* <--- not on db msg*/
    set SL0PM210.XARCD cursor, bold;
    set SL0PM210.SL4ZONE bold;
    set SL0PM210.SL5LOCTN bold;
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SS2C";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0)
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "SS2D";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    SL0PST2(); /* <=== clear scrn (empty)*/
    return;
  end


   /* *** initialize fields for loop processing ****/

  SLWREC.SLWFTMSW = "Y";
  SLWREC.SLWIDX01 = 0; /* buffer area index*/
  SLWREC.SLWIDX02 = 1; /* detail area index*/
  SLWREC.SLWIDX03 = 1; /* sizes on work line index*/
  SLWREC.SLWIDX05 = 1; /* step thru buffer*/
  SLWREC.SLWIDX04 = SLWREC.SLWLINPP; /* remaining lines*/
  SL0PW02.SL0PWRSW = "N";
  SL0PW02.XGPCD = "   ";
  SL0PW02.SY1STNBR = "      ";
  SL0PW02.SY2CLRID = "   ";
  SL0PW02.XDMCD = "  ";
  SL0PW02.XQACD = "  ";
  SL0PW02.XOWCD = "  ";
  SL0PW02.XSDCD = "   ";
  SL0PW02.XSACD = "   ";
  SL0PW02.XPGCD = "  ";
  SL0PW02.XUMCD = "  ";

   /* *** process each prod/assgn record and build tsqs ****/

  while (SQLCA.VAGen_SQLCODE == +0)

    SLWREC.SLWLINSS = "N";
    SL0PS2K(); /* format detail in buffer area*/

    if (SLWREC.SLWERRSW == "Y")
      return;
    end

    if (SQLCA.VAGen_SQLCODE == +0)
      if (SLWREC.SLWLINSS == "N")
        XSSL7F7(); /* select next record*/
      end
    end

    if (SLWREC.SLWERRSW == "Y")
      return;
    end

  end

  if (SQLCA.VAGen_SQLCODE == +100)

    SL0PS2H(); /* last group detail processing*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0PS2N

// save selected printer
Function SL0PS3A()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (SL0PT02.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user area*/
      /* ------------------------------------------------------------*/

      SL0PW03.XWHCD = SL0PM310.XWHCD;
      SL0PW03.SL0PMOP1 = SL0PM310.SL0PMOP1;
      SL0PW03.SL0PMOP2 = SL0PM310.SL0PMOP2;
      SL0PW03.XARCD = SL0PM310.XARCD;
      SL0PW03.SL4ZONE = SL0PM310.SL4ZONE;
      SL0PW03.SL5LOCTN = SL0PM310.SL5LOCTN;
      SL0PW03.XGPCD = SL0PM310.XGPCD;
      SL0PW03.SY1STNBR = SL0PM310.SY1STNBR;

      TA6REC.TARJCL[TA6INDEX] = SL0PW03.SL0PWRC3; /* Paramet*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = SL0PT02.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = SL0PT02.TARTYPE[TA6INDEX]; /* Type*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (SL0PT02.TARJCL[TA6INDEX] == "/*EOF") /* End of Table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  if (SL0PM310.SL0PMPID == " ")
    TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  else
    TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  end

  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/
  TA6REC.XURDEST = SL0PM310.SL0PMPID; /* Destination*/

  set TA3REC empty;
  TA3REC.TA3OPTN = "USRNAME";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   || TA3REC.TA3RTNCD == "0")       

    TA6REC.XURUSRNM = TA3REC.TA3USRID;
  else
    /* ------------------------------------------------------------*/
     /* call not successful, ta0p scr will ask for output recepient*/
    /* ------------------------------------------------------------*/
  end

  XPTA0P();

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  SLWREC.SLWFTMSW = "N";
  if (sysVar.errorCode == "00000000"
   || TA6REC.TA6RTNCD == "0")

    SLWREC.SLWMSGNO = 59; /* job submitted*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* Unexpected error*/

    SLWREC.SLWMSGNO = 58; /* Unexpected error occurred*/
    SLWREC.SLWERRSW = "Y";

  end

  if (TA6REC.TA6RTNCD == "1")
    TA6REC.XURDEST = "      ";
  end


end // end SL0PS3A

// save selected printer
Function SL0PS3B()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (SL0PT01.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user area*/
      /* ------------------------------------------------------------*/

      SL0PW03.XWHCD = SL0PM310.XWHCD;
      SL0PW03.SL0PMOP1 = SL0PM310.SL0PMOP1;
      SL0PW03.SL0PMOP2 = SL0PM310.SL0PMOP2;
      SL0PW03.XARCD = SL0PM310.XARCD;
      SL0PW03.SL4ZONE = SL0PM310.SL4ZONE;
      SL0PW03.SL5LOCTN = SL0PM310.SL5LOCTN;
      SL0PW03.XGPCD = SL0PM310.XGPCD;
      SL0PW03.SY1STNBR = SL0PM310.SY1STNBR;

      TA6REC.TARJCL[TA6INDEX] = SL0PW03.SL0PWRC3; /* Paramet*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = SL0PT01.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = SL0PT01.TARTYPE[TA6INDEX]; /* Type*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (SL0PT01.TARJCL[TA6INDEX] == "/*EOF") /* End of Table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  if (SL0PM310.SL0PMPID == " ")
    TA6REC.TA6SUBSW = "Y"; /* display map, tailor and submit JCL*/
  else
    TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  end

  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/
  TA6REC.XURDEST = SL0PM310.SL0PMPID; /* Destination*/

  set TA3REC empty;
  TA3REC.TA3OPTN = "USRNAME";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   || TA3REC.TA3RTNCD == "0")       

    TA6REC.XURUSRNM = TA3REC.TA3USRID;
  else
    /* ------------------------------------------------------------*/
     /* call not successful, ta0p scr will ask for output recepient*/
    /* ------------------------------------------------------------*/
  end

  XPTA0P();

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  SLWREC.SLWFTMSW = "N";
  if (sysVar.errorCode == "00000000" /* Call successful*/
   || TA6REC.TA6RTNCD == "0")       

    SLWREC.SLWMSGNO = 59; /* job submitted message*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    SLWREC.SLWMSGNO = 58; /* Unexpected error occurred*/
    SLWREC.SLWERRSW = "Y";

  end

  if (TA6REC.TA6RTNCD == "1")
    TA6REC.XURDEST = "      ";
  end


end // end SL0PS3B

// verify area/zone only
Function SL0PS3L()


   /* ************************************************************/
   /* *** find specific area/zone to verify                   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0PS3L ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL4I0(); /* <=== std prod loctn inquiry*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    set SL0PM310.XARCD cursor, bold;
    set SL0PM310.SL4ZONE bold;
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.XXXLOCID = "S3LA";
      SLWREC.SLWMSGNO = 0012; /* <--- not on db msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.SLWSKYSW = "N";
      SLWREC.XXXLOCID = "S3LB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.XXXLOCID = "S3LC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0PS3L

// verify area/zone/location
Function SL0PS3M()


   /* ************************************************************/
   /* *** find specific area/zone/location to verify          ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0PS3M ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL5I0(); /* <=== std prod loctn inquiry*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    set SL0PM310.XARCD cursor, bold;
    set SL0PM310.SL4ZONE bold;
    set SL0PM310.SL5LOCTN bold;
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.XXXLOCID = "S3MA";
      SLWREC.SLWMSGNO = 0012; /* <--- not on db msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.SLWSKYSW = "N";
      SLWREC.XXXLOCID = "S3MB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.XXXLOCID = "S3MC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0PS3M

// save selected printer
Function SL0PS4A()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (SL0PT03.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user area*/
      /* ------------------------------------------------------------*/

      SL0PW04.XWHCD = SL0PM410.XWHCD;
      SL0PW04.SL0PMOP1 = SL0PM410.SL0PMOP1;
      SL0PW04.SL0PMOP2 = SL0PM410.SL0PMOP2;
      SL0PW04.XARCD = SL0PM410.XARCD;
      SL0PW04.SL4ZONE = SL0PM410.SL4ZONE;
      SL0PW04.SL5LOCTN = SL0PM410.SL5LOCTN;
      SL0PW04.XGPCD = SL0PM410.XGPCD;
      SL0PW04.SY1STNBR = SL0PM410.SY1STNBR;

      TA6REC.TARJCL[TA6INDEX] = SL0PW04.SL0PWRC4; /* Paramet*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = SL0PT03.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = SL0PT03.TARTYPE[TA6INDEX]; /* Type*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (SL0PT03.TARJCL[TA6INDEX] == "/*EOF") /* End of Table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  if (SL0PM410.SL0PMPID == " ")
    TA6REC.TA6SUBSW = "Y"; /* Tailor and submit JCL*/
  else
    TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  end

  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/
  TA6REC.XURDEST = SL0PM410.SL0PMPID; /* Destination*/

  set TA3REC empty;
  TA3REC.TA3OPTN = "USRNAME";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   || TA3REC.TA3RTNCD == "0")       

    TA6REC.XURUSRNM = TA3REC.TA3USRID;
  else
    /* ------------------------------------------------------------*/
     /* Call not successful, ta0p scr will ask for output recepient*/
    /* ------------------------------------------------------------*/
  end

  XPTA0P();

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  SLWREC.SLWFTMSW = "N";
  if (sysVar.errorCode == "00000000"
   || TA6REC.TA6RTNCD == "0")

    SLWREC.SLWMSGNO = 59; /* job submitted*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* Unexpected error*/

    SLWREC.SLWMSGNO = 58; /* Unexpected error occurred*/
    SLWREC.SLWERRSW = "Y";

  end

  if (TA6REC.TA6RTNCD == "1")
    TA6REC.XURDEST = "      ";
  end


end // end SL0PS4A

// save selected printer
Function SL0PS4B()
   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    if (SL0PT04.TARTYPE[TA6INDEX] == "P") /* Parameters statement*/

      /* ------------------------------------------------------------*/
       /* Format the variable parameters entered by the user area*/
      /* ------------------------------------------------------------*/

      SL0PW04.XWHCD = SL0PM410.XWHCD;
      SL0PW04.SL0PMOP1 = SL0PM410.SL0PMOP1;
      SL0PW04.SL0PMOP2 = SL0PM410.SL0PMOP2;
      SL0PW04.XARCD = SL0PM410.XARCD;
      SL0PW04.SL4ZONE = SL0PM410.SL4ZONE;
      SL0PW04.SL5LOCTN = SL0PM410.SL5LOCTN;
      SL0PW04.XGPCD = SL0PM410.XGPCD;
      SL0PW04.SY1STNBR = SL0PM410.SY1STNBR;

      TA6REC.TARJCL[TA6INDEX] = SL0PW04.SL0PWRC4; /* Paramet*/

    else

      /* ------------------------------------------------------------*/
       /* Format the Job Control Language statement from the table*/
      /* ------------------------------------------------------------*/

      TA6REC.TARJCL[TA6INDEX] = SL0PT04.TARJCL[TA6INDEX]; /* JCL*/
      TA6REC.TARTYPE[TA6INDEX] = SL0PT04.TARTYPE[TA6INDEX]; /* Type*/

    end

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (SL0PT04.TARJCL[TA6INDEX] == "/*EOF") /* End of Table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  if (SL0PM410.SL0PMPID == " ")
    TA6REC.TA6SUBSW = "Y"; /* display map, tailor and submit JCL*/
  else
    TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  end

  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/
  TA6REC.XURDEST = SL0PM410.SL0PMPID; /* Destination*/

  set TA3REC empty;
  TA3REC.TA3OPTN = "USRNAME";
  try
    call "TA0230" (TA3REC) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000" /* Call successful*/
   || TA3REC.TA3RTNCD == "0")       

    TA6REC.XURUSRNM = TA3REC.TA3USRID;
  else
    /* ------------------------------------------------------------*/
     /* Call not successful, ta0p scr will ask for output recepient*/
    /* ------------------------------------------------------------*/
  end

  XPTA0P();

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  SLWREC.SLWFTMSW = "N";
  if (sysVar.errorCode == "00000000" /* Call successful*/
   || TA6REC.TA6RTNCD == "0")       

    SLWREC.SLWMSGNO = 59; /* job submitted message*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    SLWREC.SLWMSGNO = 58; /* Unexpected error occurred*/
    SLWREC.SLWERRSW = "Y";

  end

  if (TA6REC.TA6RTNCD == "1")
    TA6REC.XURDEST = "      ";
  end


end // end SL0PS4B

// verify area/zone only
Function SL0PS4L()


   /* ************************************************************/
   /* *** find specific area/zone to verify                   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0PS4L ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL4I0(); /* <=== std prod loctn inquiry*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    set SL0PM410.XARCD cursor, bold;
    set SL0PM410.SL4ZONE bold;
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.XXXLOCID = "S4LA";
      SLWREC.SLWMSGNO = 0012; /* <--- not on db msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.SLWSKYSW = "N";
      SLWREC.XXXLOCID = "S4LB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.XXXLOCID = "S4LC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0PS4L

// verify area/zone/location
Function SL0PS4M()


   /* ************************************************************/
   /* *** find specific area/zone/location to verify          ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0PS4M ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL5I0(); /* <=== std prod loctn inquiry*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    set SL0PM410.XARCD cursor, bold;
    set SL0PM410.SL4ZONE bold;
    set SL0PM410.SL5LOCTN bold;
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.XXXLOCID = "S4MA";
      SLWREC.SLWMSGNO = 0012; /* <--- not on db msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.SLWSKYSW = "N";
      SLWREC.XXXLOCID = "S4MB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.XXXLOCID = "S4MC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0PS4M

// missing input edits
Function SL0PSA0()


   /* ************************************************************/
   /* *** setup error if selection not entered                ****/
   /* ************************************************************/

  if (SL0PM010.XMSLMSNO > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA0A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing fld msg*/
    set SL0PM010.XMSLMSNO cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0PSA0

// missing key inputs edits
Function SL0PSA1()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: defaults setup during initialization          ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0PM110.XOWCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0PM110.XOWCD cursor, bold;
  end


  if (SL0PM110.XPGCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1C";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0PM110.XPGCD cursor, bold;
  end


  if (SL0PM110.XSACD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1E";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0PM110.XSACD cursor, bold;
  end


  if (SL0PM110.XSDCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1F";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0PM110.XSDCD cursor, bold;
  end


  if (SL0PM110.XQACD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1G";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0PM110.XQACD cursor, bold;
  end


  if (SL0PM110.XDMCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1H";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0PM110.XDMCD cursor, bold;
  end


  if (SL0PM110.SY2CLRID > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1I";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0PM110.SY2CLRID cursor, bold;
  end


  if (SL0PM110.SY1STNBR > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1J";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0PM110.SY1STNBR cursor, bold;
  end


  if (SL0PM110.XGPCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1K";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0PM110.XGPCD cursor, bold;
  end


  if (SL0PM110.SL0PMSEL > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1L";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0PM110.SL0PMSEL cursor, bold;
  end


  if (SL0PM110.XWHCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1M";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0PM110.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0PSA1

// missing key inputs edits
Function SL0PSA2()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: defaults setup during initialization          ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0PM210.SL5LOCTN > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0PM210.SL5LOCTN cursor, bold;
  end


  if (SL0PM210.SL4ZONE > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2B";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0PM210.SL4ZONE cursor, bold;
  end


  if (SL0PM210.XARCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2C";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0PM210.XARCD cursor, bold;
  end


  if (SL0PM210.SL0PMSEL > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2D";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0PM210.SL0PMSEL cursor, bold;
  end


  if (SL0PM210.XWHCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2E";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0PM210.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0PSA2

// missing input edits
Function SL0PSA3()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: defaults setup during initialization          ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0PM310.SL0PMOP1 == "P")
    if (SL0PM310.SY1STNBR == "      ")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SA3A";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0PM310.SY1STNBR cursor, bold;
    end
    if (SL0PM310.XGPCD == "  ")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SA3B";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0PM310.XGPCD cursor, bold;
    end
  end

  if (SL0PM310.SL0PMOP1 == "L")
    if (SL0PM310.SL5LOCTN == "      ")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SA3C";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0PM310.SL5LOCTN cursor, bold;
    end
    if (SL0PM310.SL4ZONE == "  ")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SA3D";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0PM310.SL4ZONE cursor, bold;
    end
    if (SL0PM310.XARCD == "  ")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SA3E";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0PM310.XARCD cursor, bold;
    end
  end


  if (SL0PM310.SL0PMOP2 > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3F";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0PM310.SL0PMOP2 cursor, bold;
  end


  if (SL0PM310.SL0PMOP1 > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3G";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0PM310.SL0PMOP1 cursor, bold;
  end


  if (SL0PM310.XWHCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3H";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0PM310.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0PSA3

// missing input edits
Function SL0PSA4()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: defaults setup during initialization          ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0PM410.SL0PMOP1 == "P")
    if (SL0PM410.SY1STNBR == "      ")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SA4A";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0PM410.SY1STNBR cursor, bold;
    end
    if (SL0PM410.XGPCD == "  ")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SA4B";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0PM410.XGPCD cursor, bold;
    end
  end

  if (SL0PM410.SL0PMOP1 == "L")
    if (SL0PM410.SL5LOCTN == "      ")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SA4C";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0PM410.SL5LOCTN cursor, bold;
    end
    if (SL0PM410.SL4ZONE == "  ")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SA4D";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0PM410.SL4ZONE cursor, bold;
    end
    if (SL0PM410.XARCD == "  ")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SA4E";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0PM410.XARCD cursor, bold;
    end
  end

  if (SL0PM410.SL0PMOP2 > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA4F";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0PM410.SL0PMOP2 cursor, bold;
  end


  if (SL0PM410.SL0PMOP1 > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA4G";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0PM410.SL0PMOP1 cursor, bold;
  end


  if (SL0PM410.XWHCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA4H";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0PM410.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0PSA4

// obtain size desc data
Function SL0PSAA()


   /* ************************************************************/
   /* *** obtain all valid size data for use during detail    ****/
   /* *** (size) row creatation                               ****/
   /* ************************************************************/

  SYPREC.SYPFC = "PC";
  SYPREC.SYPCMPSW = "N";
  SYPREC.XQACD = "**";

  SL0P450(); /* <=== get size xlations*/

  if (SYPREC.SYPRC == 0)
     /* ** next sentence ***/
  else
    if (SYPREC.SYPRC == +10)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SAAA";
      SLWREC.SLWMSGNO = 0057; /* <--- not on db msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == +9)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SAAB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "SAAC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0PSAA

// same key edits
Function SL0PSB1()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw. (in0iwsks)****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (SL0PM110.XOWCD != SL0PW01.XOWCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";


  if (SL0PM110.XUMCD != SL0PW01.XUMCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";


  if (SL0PM110.XPGCD != SL0PW01.XPGCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";


  if (SL0PM110.XSACD != SL0PW01.XSACD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";


  if (SL0PM110.XSDCD != SL0PW01.XSDCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";


  if (SL0PM110.XQACD != SL0PW01.XQACD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";


  if (SL0PM110.XDMCD != SL0PW01.XDMCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";


  if (SL0PM110.SY2CLRID != SL0PW01.SY2CLRID)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";


  if (SL0PM110.SY1STNBR != SL0PW01.SY1STNBR)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";


  if (SL0PM110.XGPCD != SL0PW01.XGPCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

  if (SL0PM110.SL0PMSEL != SL0PW01.SL0PWSEL)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

  if (SL0PM110.XWHCD != SL0PW01.XWHCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0PSB1

// same key edits
Function SL0PSB2()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw. (in0iwsks)****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (SL0PM210.SL5LOCTN != SL0PW02.SL5LOCTN)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";


  if (SL0PM210.SL4ZONE != SL0PW02.SL4ZONE)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";


  if (SL0PM210.XARCD != SL0PW02.XARCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";


  if (SL0PM210.SL0PMSEL != SL0PW02.SL0PWSEL)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";


  if (SL0PM210.XWHCD != SL0PW02.XWHCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0PSB2

// key field edits
Function SL0PSC1()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (SL0PM110.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] == "Y")
        XOWREC.XOWCD = SL0PM110.XOWCD;
        XOWREC.XWHCD = SL0PM110.XWHCD;
        if (XOWREC.XOWKEY in XOWTBL.XOWKEY)
          if (XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A")
            /* next sentence;*/
          else
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SC1A";
            SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
            set SL0PM110.XOWCD cursor, bold;
          end
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SC1B";
          SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
          set SL0PM110.XOWCD cursor, bold;
        end
      end
    end
  end


  if (SL0PM110.XUMCD != "  ")
    if (SL0PM110.XUMCD in XUMTBL.XUMCD)
      if (XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC1C";
        SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
        set SL0PM110.XUMCD cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1D";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0PM110.XUMCD cursor, bold;
    end
  end


  if (SL0PM110.XPGCD in XPGTBL.XPGCD)
    if (XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1E";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0PM110.XPGCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1F";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0PM110.XPGCD cursor, bold;
  end


  if (SL0PM110.XSACD in XSATBL.XSACD)
    if (XSATBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1I";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0PM110.XSACD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1J";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0PM110.XSACD cursor, bold;
  end

  set PC2REC empty; /* clear row storage area*/

  PC2REC.XGPCD = SL0PM110.XGPCD;
  PC2REC.PC2INSEG = SL0PM110.XSDCD;
  call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes};
  if (SQLCA.VAGen_SQLCODE == +0)
    if (PC2REC.XXXSTAT == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1K";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0PM110.XSDCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1K";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0PM110.XSDCD cursor, bold;
  end


  if (SL0PM110.XQACD in XQATBL.XQACD)
    if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1M";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0PM110.XQACD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1N";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0PM110.XQACD cursor, bold;
  end


  if (SL0PM110.XDMCD in XDMTBL.XDMCD)
    if (XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1O";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0PM110.XDMCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1P";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0PM110.XDMCD cursor, bold;
  end


  if (SL0PM110.SL0PMSEL != "F"
   && SL0PM110.SL0PMSEL != "C"
   && SL0PM110.SL0PMSEL != "P"
   && SL0PM110.SL0PMSEL != "A")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1S";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0PM110.SL0PMSEL cursor, bold;
  end


  if (SL0PM110.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0PM110.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      SLWREC.XCTCD = XWHTBL.XCTCD[sysVar.arrayIndex]; /* CANA save country code*/
    else
      SL0PM110.XWHABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1T";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0PM110.XWHCD cursor, bold;
    end
  else
    SL0PM110.XWHABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1U";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0PM110.XWHCD cursor, bold;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0PSC1

// key field edits
Function SL0PSC2()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

  if (SL0PM210.SL0PMSEL != "F"
   && SL0PM210.SL0PMSEL != "C"
   && SL0PM210.SL0PMSEL != "P"
   && SL0PM210.SL0PMSEL != "A")

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2A";
    SLWREC.SLWMSGNO = 0011; /* <--- inactive msg*/
    set SL0PM210.SL0PMSEL cursor, bold;
  end

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (SL0PM210.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0PM210.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      SLWREC.XCTCD = XWHTBL.XCTCD[sysVar.arrayIndex]; /* CANA save country code*/
    else
      SL0PM210.XWHABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2B";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0PM210.XWHCD cursor, bold;
    end
  else
    SL0PM210.XWHABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2C";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0PM210.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0PSC2

// field edits
Function SL0PSC3()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

  if (SL0PM310.SL0PMOP1 == "P")
    if (SL0PM310.XGPCD in XGPTBL.XGPCD)
      if (XGPTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC3F";
        SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
        set SL0PM310.XGPCD cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC3G";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0PM310.XGPCD cursor, bold;
    end
  end

  if (SL0PM310.SL0PMOP1 != "L"
   && SL0PM310.SL0PMOP1 != "P")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC3H";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0PM310.SL0PMOP1 cursor, bold;
  end

  if (SL0PM310.SL0PMOP2 != "C"
   && SL0PM310.SL0PMOP2 != "F"
   && SL0PM310.SL0PMOP2 != "P"
   && SL0PM310.SL0PMOP2 != "A")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC3I";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0PM310.SL0PMOP2 cursor, bold;
  end

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (SL0PM310.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0PM310.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      SLWREC.XCTCD = XWHTBL.XCTCD[sysVar.arrayIndex]; /* CANA save country code*/
      COMMAREA.XWHCD = SL0PM310.XWHCD;
    else
      SL0PM310.XWHABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC3J";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0PM310.XWHCD cursor, bold;
    end
  else
    SL0PM310.XWHABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC3K";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0PM310.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0PSC3

// field edits
Function SL0PSC4()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

  if (SL0PM410.SL0PMOP1 == "P")
    if (SL0PM410.XGPCD in XGPTBL.XGPCD)
      if (XGPTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC4F";
        SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
        set SL0PM410.XGPCD cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC4G";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0PM410.XGPCD cursor, bold;
    end
  end


  if (SL0PM410.SL0PMOP1 != "L"
   && SL0PM410.SL0PMOP1 != "P")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC4H";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0PM410.SL0PMOP1 cursor, bold;
  end

  if (SL0PM410.SL0PMOP2 != "C"
   && SL0PM410.SL0PMOP2 != "F"
   && SL0PM410.SL0PMOP2 != "P"
   && SL0PM410.SL0PMOP2 != "A")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC4I";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0PM410.SL0PMOP2 cursor, bold;
  end

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (SL0PM410.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0PM410.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      SLWREC.XCTCD = XWHTBL.XCTCD[sysVar.arrayIndex]; /* CANA save country code*/
      COMMAREA.XWHCD = SL0PM410.XWHCD;
    else
      SL0PM410.XWHABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC4J";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0PM410.XWHCD cursor, bold;
    end
  else
    SL0PM410.XWHABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC4K";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0PM410.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0PSC4

// key relational edits
Function SL0PSD1()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0PSD1

// key relational edits
Function SL0PSD2()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0PSD2

// relational edits
Function SL0PSD3()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

  if (SL0PM310.SL0PMOP1 == "L")
    if (SL0PM310.SL4ZONE > " ")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD3A";
      SLWREC.SLWMSGNO = 0009; /* required field*/
      set SL0PM310.SL4ZONE cursor, bold;
    end
    if (SL0PM310.XARCD > " ")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD3B";
      SLWREC.SLWMSGNO = 0009; /* required field*/
      set SL0PM310.XARCD cursor, bold;
    end
    if (SL0PM310.SY1STNBR > " ")
      SL0PM310.SY1STNBR = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD3C";
      SLWREC.SLWMSGNO = 0153;
      set SL0PM310.SY1STNBR cursor, bold;
    end
    if (SL0PM310.XGPCD > " ")
      SL0PM310.XGPCD = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD3D";
      SLWREC.SLWMSGNO = 0153;
      set SL0PM310.XGPCD cursor, bold;
    end
    return;
  end

  if (SL0PM310.SL0PMOP1 == "P")
    if (SL0PM310.SY1STNBR > " ")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD3E";
      SLWREC.SLWMSGNO = 0009;
      set SL0PM310.SY1STNBR cursor, bold;
    end
    if (SL0PM310.XGPCD > " ")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD3F";
      SLWREC.SLWMSGNO = 0009;
      set SL0PM310.XGPCD cursor, bold;
    end
    if (SL0PM310.SL5LOCTN > " ")
      SL0PM310.SL5LOCTN = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD3G";
      SLWREC.SLWMSGNO = 0153; /* erased*/
      set SL0PM310.SL5LOCTN cursor, bold;
    end
    if (SL0PM310.SL4ZONE > " ")
      SL0PM310.SL4ZONE = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD3H";
      SLWREC.SLWMSGNO = 0153; /* erased*/
      set SL0PM310.SL4ZONE cursor, bold;
    end
    if (SL0PM310.XARCD > " ")
      SL0PM310.XARCD = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD3I";
      SLWREC.SLWMSGNO = 0153; /* erased*/
      set SL0PM310.XARCD cursor, bold;
    end
    return;
  end

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "SD3J";
  SLWREC.SLWMSGNO = 0011; /* invalid value*/
  set SL0PM310.SL0PMOP1 cursor, bold;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0PSD3

// relational edits
Function SL0PSD4()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

  if (SL0PM410.SL0PMOP1 == "L")
    if (SL0PM410.SL4ZONE > " ")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD4A";
      SLWREC.SLWMSGNO = 0009;
      set SL0PM410.SL4ZONE cursor, bold;
    end
    if (SL0PM410.XARCD > " ")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD4B";
      SLWREC.SLWMSGNO = 0009;
      set SL0PM410.XARCD cursor, bold;
    end
    if (SL0PM410.SY1STNBR > " ")
      SL0PM410.SY1STNBR = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD4C";
      SLWREC.SLWMSGNO = 0153;
      set SL0PM410.SY1STNBR cursor, bold;
    end
    if (SL0PM410.XGPCD > " ")
      SL0PM410.XGPCD = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD4D";
      SLWREC.SLWMSGNO = 0153;
      set SL0PM410.XGPCD cursor, bold;
    end
    return;
  end

  if (SL0PM410.SL0PMOP1 == "P")
    if (SL0PM410.SY1STNBR > " ")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD4E";
      SLWREC.SLWMSGNO = 0009;
      set SL0PM410.SY1STNBR cursor, bold;
    end
    if (SL0PM410.XGPCD > " ")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD4F";
      SLWREC.SLWMSGNO = 0009;
      set SL0PM410.XGPCD cursor, bold;
    end
    if (SL0PM410.SL5LOCTN > " ")
      SL0PM410.SL4ZONE = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD4G";
      SLWREC.SLWMSGNO = 0153;
      set SL0PM410.SL5LOCTN cursor, bold;
    end
    if (SL0PM410.SL4ZONE > " ")
      SL0PM410.SL4ZONE = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD4H";
      SLWREC.SLWMSGNO = 0153;
      set SL0PM410.SL4ZONE cursor, bold;
    end
    if (SL0PM410.XARCD > " ")
      SL0PM410.XARCD = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD4I";
      SLWREC.SLWMSGNO = 0153;
      set SL0PM410.XARCD cursor, bold;
    end
    return;
  end

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "SD4J";
  SLWREC.SLWMSGNO = 0011;
  set SL0PM410.SL0PMOP1 cursor, bold;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0PSD4

// obtain table data
Function SL0PSE1()


   /* ************************************************************/
   /* *** make one time table accesses for auxillary and/or   ****/
   /* *** main data                                           ****/
   /* *** note: first time executions before beginning a loop ****/
   /* ***       might also be performed                       ****/
   /* ************************************************************/

  PKNREC.XGPCD = SL0PM110.XGPCD;
  PKNREC.SY1STNBR = SL0PM110.SY1STNBR;
  PKNREC.SY2CLRID = SL0PM110.SY2CLRID;
  PKNREC.XDMCD = SL0PM110.XDMCD;


  SL0P460(); /* <=== std prod loctn inquiry*/

  if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE1A";
    SLWREC.SLWMSGNO = 0056; /* <--- not on db msg*/
    set SL0PM110.SY1STNBR cursor, bold;
    set SL0PM110.SY2CLRID bold;
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE1B";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0)
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "SE1C";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    SL0PST1(); /* <=== clear scrn (empty)*/
    return;
  end

  SL0PM110.SY1SSTNM = PKNREC.SY1SSTNM;
  SL0PM110.SY2CLRAB = PKNREC.SY2CLRAB;

  if (SL0PM110.XUMCD == "  ")
    SL0PM110.XUMCD = "01";
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0PSE1

// obtain table data
Function SL0PSE2()


   /* ************************************************************/
   /* *** make one time table accesses for auxillary and/or   ****/
   /* *** main data                                           ****/
   /* *** note: first time executions before beginning a loop ****/
   /* ***       might also be performed                       ****/
   /* ************************************************************/

   /* *** verify location data*/

  set SL5REC empty;
  SL5REC.XWHCD = SL0PM210.XWHCD;
  SL5REC.XARCD = SL0PM210.XARCD;
  SL5REC.SL4ZONE = SL0PM210.SL4ZONE;
  SL5REC.SL5LOCTN = SL0PM210.SL5LOCTN;

  XSSL5I0(); /* obtain location record*/

  if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE2A";
    SLWREC.SLWMSGNO = 0038; /* <--- not on db msg*/
    set SL0PM210.XARCD cursor, bold;
    set SL0PM210.SL4ZONE bold;
    set SL0PM210.SL5LOCTN bold;
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE2B";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -811) /* <=== for INQUIRY*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE2C";
    SLWREC.SLWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0)
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "SE2D";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    SL0PST2(); /* <=== clear scrn (empty)*/
    return;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0PSE2

// obtain table data
Function SL0PSE3()


   /* ************************************************************/
   /* *** make one time table accesses for auxillary and/or   ****/
   /* *** main data                                           ****/
   /* *** note: first time executions before beginning a loop ****/
   /* ***       might also be performed                       ****/
   /* ************************************************************/

   /* *** verify area and zone ****/

  if (SL0PM310.SL0PMOP1 == "L")
    if (SL0PM310.SL5LOCTN == "*     "
     || SL0PM310.SL5LOCTN == "******"
     || SL0PM310.SL5LOCTN == "     *")
      SL0PM310.SL5LOCTN = "*     ";
      SL4REC.XWHCD = SL0PM310.XWHCD;
      SL4REC.XARCD = SL0PM310.XARCD;
      SL4REC.SL4ZONE = SL0PM310.SL4ZONE;
      SL0PS3L(); /* <=== verfiy area/zone only*/
    else
      SL5REC.XWHCD = SL0PM310.XWHCD;
      SL5REC.XARCD = SL0PM310.XARCD;
      SL5REC.SL4ZONE = SL0PM310.SL4ZONE;
      SL5REC.SL5LOCTN = SL0PM310.SL5LOCTN;
      SL0PS3M(); /* <=== verfiy area/zone/location*/
    end
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
  end

   /* *** verify style ****/

   /* ** Due to change from dprod to dpick databases, this io will be*/
   /* ** commented out until pknrec can be used via io1810*/
   /* ***/

  if (SL0PM310.SL0PMOP1 == "P")
    return; /* ***TEMPORARY -- IO WILL BE REPLACED WITH IO1810*/
   /* MOVE SL0PM310.XGPCD TO SY1REC.XGPCD;*/
   /* MOVE SL0PM310.SY1STNBR TO SY1REC.SY1STNBR;*/
   /* ;*/
   /* XSSY1I0;*/
   /* ;*/
   /* IF SQLCA.SQLCODE EQ +100;        /* <=== for INQUIRY*/
     /* MOVE 'Y' TO SLWREC.SLWERRSW;*/
     /* MOVE 'SE3D' TO SLWREC.XXXLOCID;*/
     /* MOVE 0043 TO SLWREC.SLWMSGNO;         /* <--- not on db msg*/
     /* SET SL0PM310.XGPCD CURSOR,BRIGHT;*/
     /* SET SL0PM310.SY1STNBR BRIGHT;*/
     /* EZERTN;*/
   /* END;*/
   /* IF SQLCA.SQLCODE EQ -911;        /* <=== for any initial db access*/
     /* MOVE 'N' TO SLWREC.SLWSKYSW;*/
     /* MOVE 'Y' TO SLWREC.SLWERRSW;*/
     /* MOVE 'SE3E' TO SLWREC.XXXLOCID;*/
     /* MOVE 0031 TO SLWREC.SLWMSGNO;         /* <--- try again msg*/
     /* EZERTN;*/
   /* END;*/
   /* IF SQLCA.SQLCODE NE 0;*/
                                  /* MOVE 'Y' TO SLWREC.SLWERRSW;   /**/
                                   /* <=== for all other neg. sql codes*/
     /* MOVE 'SE3F' TO SLWREC.XXXLOCID;*/
     /* MOVE 0001 TO SLWREC.SLWMSGNO;         /* <--- severe error msg*/
     /* EZERTN;*/
   /* END;*/
  end


end // end SL0PSE3

// obtain table data
Function SL0PSE4()


   /* ************************************************************/
   /* *** make one time table accesses for auxillary and/or   ****/
   /* *** main data                                           ****/
   /* *** note: first time executions before beginning a loop ****/
   /* ***       might also be performed                       ****/
   /* ************************************************************/

   /* *** verify area and zone ****/

  if (SL0PM410.SL0PMOP1 == "L")
    if (SL0PM410.SL5LOCTN == "*     "
     || SL0PM410.SL5LOCTN == "******"
     || SL0PM410.SL5LOCTN == "     *")
      SL0PM410.SL5LOCTN = "*     ";
      SL4REC.XWHCD = SL0PM410.XWHCD;
      SL4REC.XARCD = SL0PM410.XARCD;
      SL4REC.SL4ZONE = SL0PM410.SL4ZONE;
      SL0PS4L(); /* <=== verfiy area/zone only*/
    else
      SL5REC.XWHCD = SL0PM410.XWHCD;
      SL5REC.XARCD = SL0PM410.XARCD;
      SL5REC.SL4ZONE = SL0PM410.SL4ZONE;
      SL5REC.SL5LOCTN = SL0PM410.SL5LOCTN;
      SL0PS4M(); /* <=== verfiy area/zone/location*/
    end
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
  end

   /* *** verify style ****/
   /* ***/
   /* ** This process will be commented out until IO1810 is modified*/
   /* ** to handled a cursor select*/

  if (SL0PM410.SL0PMOP1 == "P")
    return; /* **TEMPORARY -- WAITING FOR IO1810*/
   /* MOVE SL0PM410.XGPCD TO SY1REC.XGPCD;*/
   /* MOVE SL0PM410.SY1STNBR TO SY1REC.SY1STNBR;*/
   /* ;*/
   /* XSSY1I0;*/
   /* ;*/
   /* IF SQLCA.SQLCODE EQ +100;        /* <=== for INQUIRY*/
     /* MOVE 'Y' TO SLWREC.SLWERRSW;*/
     /* MOVE 'SE4D' TO SLWREC.XXXLOCID;*/
     /* MOVE 0043 TO SLWREC.SLWMSGNO;         /* <--- not on db msg*/
     /* SET SL0PM410.SY1STNBR CURSOR,BRIGHT;*/
     /* EZERTN;*/
   /* END;*/
   /* IF SQLCA.SQLCODE EQ -911;        /* <=== for any initial db access*/
     /* MOVE 'N' TO SLWREC.SLWSKYSW;*/
     /* MOVE 'Y' TO SLWREC.SLWERRSW;*/
     /* MOVE 'SE4E' TO SLWREC.XXXLOCID;*/
     /* MOVE 0031 TO SLWREC.SLWMSGNO;         /* <--- try again msg*/
   /* ;  EZERTN;*/
   /* END;*/
   /* IF SQLCA.SQLCODE NE 0;*/
                                  /* MOVE 'Y' TO SLWREC.SLWERRSW;   /**/
                                   /* <=== for all other neg. sql codes*/
     /* MOVE 'SE4F' TO SLWREC.XXXLOCID;*/
     /* MOVE 0001 TO SLWREC.SLWMSGNO;         /* <--- severe error msg*/
     /* EZERTN;*/
   /* END;*/
  end


end // end SL0PSE4

// save current key value(s)
Function SL0PSF1()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  COMMAREA.XWHCD = SL0PM110.XWHCD;

  SL0PW01.XWHCD = SL0PM110.XWHCD;
  SL0PW01.SL0PWSEL = SL0PM110.SL0PMSEL;
  SL0PW01.XGPCD = SL0PM110.XGPCD;
  SL0PW01.SY1STNBR = SL0PM110.SY1STNBR;
  SL0PW01.SY1SSTNM = SL0PM110.SY1SSTNM;
  SL0PW01.SY2CLRID = SL0PM110.SY2CLRID;
  SL0PW01.SY2CLRAB = SL0PM110.SY2CLRAB;
  SL0PW01.XDMCD = SL0PM110.XDMCD;
  SL0PW01.XQACD = SL0PM110.XQACD;
  SL0PW01.XSACD = SL0PM110.XSACD;
  SL0PW01.XSDCD = SL0PM110.XSDCD;
  SL0PW01.XPGCD = SL0PM110.XPGCD;
  SL0PW01.XUMCD = SL0PM110.XUMCD;
  SL0PW01.XOWCD = SL0PM110.XOWCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0PSF1

// save current key value(s)
Function SL0PSF2()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  COMMAREA.XWHCD = SL0PM210.XWHCD;

  SL0PW02.XWHCD = SL0PM210.XWHCD;
  SL0PW02.SL0PWSEL = SL0PM210.SL0PMSEL;
  SL0PW02.XARCD = SL0PM210.XARCD;
  SL0PW02.SL4ZONE = SL0PM210.SL4ZONE;
  SL0PW02.SL5LOCTN = SL0PM210.SL5LOCTN;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0PSF2

// setup map key fields
Function SL0PSG1()


   /* ************************************************************/
   /* *** use current ws values in the corresponding map flds ****/
   /* ************************************************************/

  SL0PM110.XWHCD = SL0PW01.XWHCD;
  SL0PM110.SL0PMSEL = SL0PW01.SL0PWSEL;
  SL0PM110.XGPCD = SL0PW01.XGPCD;
  SL0PM110.SY1STNBR = SL0PW01.SY1STNBR;
  SL0PM110.SY1SSTNM = SL0PW01.SY1SSTNM;
  SL0PM110.SY2CLRID = SL0PW01.SY2CLRID;
  SL0PM110.SY2CLRAB = SL0PW01.SY2CLRAB;
  SL0PM110.XDMCD = SL0PW01.XDMCD;
  SL0PM110.XQACD = SL0PW01.XQACD;
  SL0PM110.XSACD = SL0PW01.XSACD;
  SL0PM110.XSDCD = SL0PW01.XSDCD;
  SL0PM110.XPGCD = SL0PW01.XPGCD;
  SL0PM110.XUMCD = SL0PW01.XUMCD;
  SL0PM110.XOWCD = SL0PW01.XOWCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0PSG1

// setup map key fields
Function SL0PSG2()


   /* ************************************************************/
   /* *** use current ws values in the corresponding map flds ****/
   /* ************************************************************/

  SL0PM210.XWHCD = SL0PW02.XWHCD;
  SL0PM210.SL0PMSEL = SL0PW02.SL0PWSEL;
  SL0PM210.XARCD = SL0PW02.XARCD;
  SL0PM210.SL4ZONE = SL0PW02.SL4ZONE;
  SL0PM210.SL5LOCTN = SL0PW02.SL5LOCTN;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0PSG2

// ENTER processing
Function SL0PSH0()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0PSA0(); /* <=== missing input edits*/

   /* ************************************************************/
   /* *** no missing fields:                                  ****/
   /* *** invalid selection will be detected in flow when the ****/
   /* *** transfer of control is attempted                    ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0PSH0

// ENTER processing
Function SL0PSH1()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0PSA1(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check the key fields for changes                    ****/
   /* *** note: save key will be blank & NOT = on first time  ****/
   /* *** note: slwskysw=Y; if fields NOT changed (=same key) ****/
   /* ************************************************************/

  SL0PSB1(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "Y")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SH1A";
    SLWREC.SLWMSGNO = 0005;
    return;
  end

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  SL0PSC1(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0PSD1(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses             ****/
   /* ************************************************************/

  SL0PSE1(); /* <=== obtain table data*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s) & last pfkey as ENTER  ****/
   /* ************************************************************/

  SL0PSF1(); /* <=== save current key value(s)*/

   /* ************************************************************/
   /* *** data present & changed: purge both tsqs             ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq(s)*/

  if (SLWREC.SLWERRSW == "Y")
    SL0PST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: setup summary tsq                        ****/
   /* ************************************************************/

  SL0PSS1(); /* <=== setup all pages in tsq*/

  if (SLWREC.SLWERRSW == "Y")
    SL0PST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** setup screen                                        ****/
   /* ************************************************************/

  TA5REC.TA5TSQIX = 1;
  TA5REC.TA5APPID = SLWREC.SLWDETQU;
  TA5REC.TA5FNCCD = "R";

  call "TA0050" (SL0PWD0, TA5REC) {isNoRefresh = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SH1B";
    SLWREC.SLWMSGNO = 0001;
    return;
  end

  SLWREC.SLWDETIX = TA5REC.TA5TSQIX;


  SL0PSO1(); /* <=== setup detail screen*/


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0PSH1

// ENTER processing
Function SL0PSH2()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0PSA2(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check the key fields for changes                    ****/
   /* *** note: save key will be blank & NOT = on first time  ****/
   /* *** note: slwskysw=Y; if fields NOT changed (=same key) ****/
   /* ************************************************************/

  SL0PSB2(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "Y")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SH2A";
    SLWREC.SLWMSGNO = 0005;
    return;
  end

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  SL0PSC2(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0PSD2(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses             ****/
   /* ************************************************************/

  SL0PSE2(); /* <=== obtain table data*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s) & last pfkey as ENTER  ****/
   /* ************************************************************/

  SL0PSF2(); /* <=== save current key value(s)*/

   /* ************************************************************/
   /* *** data present & changed: purge both tsqs             ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq(s)*/

  if (SLWREC.SLWERRSW == "Y")
    SL0PST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: setup summary tsq                        ****/
   /* ************************************************************/

  SL0PSS2(); /* <=== setup all pages in tsq*/

  if (SLWREC.SLWERRSW == "Y")
    SL0PST2(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** setup screen                                        ****/
   /* ************************************************************/

  TA5REC.TA5TSQIX = 1;
  TA5REC.TA5APPID = SLWREC.SLWDETQU;
  TA5REC.TA5FNCCD = "R";

  call "TA0050" (SL0PWD0, TA5REC) {isNoRefresh = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SH2B";
    SLWREC.SLWMSGNO = 0001;
    return;
  end

  SLWREC.SLWDETIX = TA5REC.TA5TSQIX;


  SL0PSO2(); /* <=== setup detail screen*/


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/




end // end SL0PSH2

// ENTER processing
Function SL0PSH3()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0PSA3(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  SL0PSC3(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0PSD3(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses             ****/
   /* ************************************************************/

  SL0PSE3(); /* <=== obtain table data*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ****************************************************/
   /* *** format jcl and submit job                   ****/
   /* ****************************************************/

  if (SL0PM310.SL0PMOP1 == "P")
    SL0PS3A(); /* format jcl data and submit sl5711*/
  else
    SL0PS3B(); /* format jcl data and submit sl5731*/
  end

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0PM310.SL0PMOP1 = " ";
  SL0PM310.SL0PMOP2 = " ";
  SL0PM310.XARCD = "  ";
  SL0PM310.SL4ZONE = "  ";
  SL0PM310.SL5LOCTN = "      ";
  SL0PM310.XGPCD = "   ";
  SL0PM310.SY1STNBR = "      ";
  SL0PM310.SL0PMPID = TA6REC.XURDEST;


end // end SL0PSH3

// ENTER processing
Function SL0PSH4()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0PSA4(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  SL0PSC4(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0PSD4(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses             ****/
   /* ************************************************************/

  SL0PSE4(); /* <=== obtain table data*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ****************************************************/
   /* *** format jcl and submit job                   ****/
   /* ****************************************************/

  if (SL0PM410.SL0PMOP1 == "L")
    SL0PS4A(); /* submit job sl5781*/
  else
    SL0PS4B(); /* submit job sl5771*/
  end

  if (SLWREC.SLWERRSW == "Y") /* Error switch*/
    return;
  end

  SL0PM410.SL0PMOP1 = " ";
  SL0PM410.SL0PMOP2 = " ";
  SL0PM410.XARCD = "  ";
  SL0PM410.SL4ZONE = "  ";
  SL0PM410.SL5LOCTN = "      ";
  SL0PM410.XGPCD = "   ";
  SL0PM410.SY1STNBR = "      ";
  SL0PM410.SL0PMPID = TA6REC.XURDEST;


end // end SL0PSH4

// PF7 processing
Function SL0PSJ1()


   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: IN0XWSKS=N; if fields changed (keys different)****/
   /* ************************************************************/


  SL0PSA1(); /* <=== missing input check*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0PSB1(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "N")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SJ1A";
    SLWREC.SLWMSGNO = 0006; /* <--- changes not allowed msg*/
    return;
  end

   /* ************************************************************/
   /* *** decrement the last relative record number           ****/
   /* ************************************************************/

  if (SLWREC.SLWDETIX == 1)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SJ1B";
    SLWREC.SLWMSGNO = 0007; /* <--- top of data*/
  else
    SLWREC.SLWDETIX = SLWREC.SLWDETIX - 1;
    TA5REC.TA5TSQIX = SLWREC.SLWDETIX;
    TA5REC.TA5APPID = SLWREC.SLWDETQU;
    TA5REC.TA5FNCCD = "R";
    call "TA0050" (SL0PWD0, TA5REC) {isNoRefresh = yes};
    if (TA5REC.TA5RTNCD != 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SJ1C";
      SLWREC.SLWMSGNO = 0001;
      return;
    end
    SL0PSO1(); /* <=== setup screen*/
  end

  if (SLWREC.SLWERRSW == "N")
    SLWREC.XXXLOCID = "SJ1D";
    SLWREC.SLWMSGNO = 0014;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0PSJ1

// PF7 processing
Function SL0PSJ2()


   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: IN0XWSKS=N; if fields changed (keys different)****/
   /* ************************************************************/


  SL0PSA2(); /* <=== missing input check*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0PSB2(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "N")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SJ2A";
    SLWREC.SLWMSGNO = 0006; /* <--- changes not allowed msg*/
    return;
  end

   /* ************************************************************/
   /* *** decrement the last relative record number           ****/
   /* ************************************************************/

  if (SLWREC.SLWDETIX == 1)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SJ2B";
    SLWREC.SLWMSGNO = 0007; /* <--- top of data*/
  else
    SLWREC.SLWDETIX = SLWREC.SLWDETIX - 1;
    TA5REC.TA5TSQIX = SLWREC.SLWDETIX;
    TA5REC.TA5APPID = SLWREC.SLWDETQU;
    TA5REC.TA5FNCCD = "R";
    call "TA0050" (SL0PWD0, TA5REC) {isNoRefresh = yes};
    if (TA5REC.TA5RTNCD != 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SJ2C";
      SLWREC.SLWMSGNO = 0001;
      return;
    end
    SL0PSO2(); /* <=== setup screen*/
  end

  if (SLWREC.SLWERRSW == "N")
    SLWREC.XXXLOCID = "SJ2D";
    SLWREC.SLWMSGNO = 0014;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0PSJ2

// PF8 processing
Function SL0PSK1()


   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: IN0XWSKS=N; if fields changed (keys different)****/
   /* ************************************************************/


  SL0PSA1(); /* <=== missing input check*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0PSB1(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "N")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SK1A";
    SLWREC.SLWMSGNO = 0006; /* <--- changes not allowed msg*/
    return;
  end

   /* ************************************************************/
   /* *** decrement the last relative record number           ****/
   /* ************************************************************/

  if (SLWREC.SLWDETIX == SLWREC.SLWDMAXR)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SK1B";
    SLWREC.SLWMSGNO = 0008; /* <--- bottom of data*/
  else
    SLWREC.SLWDETIX = SLWREC.SLWDETIX + 1;
    TA5REC.TA5TSQIX = SLWREC.SLWDETIX;
    TA5REC.TA5APPID = SLWREC.SLWDETQU;
    TA5REC.TA5FNCCD = "R";
    call "TA0050" (SL0PWD0, TA5REC) {isNoRefresh = yes};
    if (TA5REC.TA5RTNCD != 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SK1C";
      SLWREC.SLWMSGNO = 0001;
      return;
    end
    SL0PSO1(); /* <=== setup screen*/
  end

  if (SLWREC.SLWERRSW == "N")
    SLWREC.XXXLOCID = "SK1D";
    SLWREC.SLWMSGNO = 0013;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0PSK1

// PF8 processing
Function SL0PSK2()


   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: IN0XWSKS=N; if fields changed (keys different)****/
   /* ************************************************************/


  SL0PSA2(); /* <=== missing input check*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0PSB2(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "N")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SK2A";
    SLWREC.SLWMSGNO = 0006; /* <--- changes not allowed msg*/
    return;
  end

   /* ************************************************************/
   /* *** decrement the last relative record number           ****/
   /* ************************************************************/

  if (SLWREC.SLWDETIX == SLWREC.SLWDMAXR)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SK2B";
    SLWREC.SLWMSGNO = 0008; /* <--- bottom of data*/
  else
    SLWREC.SLWDETIX = SLWREC.SLWDETIX + 1;
    TA5REC.TA5TSQIX = SLWREC.SLWDETIX;
    TA5REC.TA5APPID = SLWREC.SLWDETQU;
    TA5REC.TA5FNCCD = "R";
    call "TA0050" (SL0PWD0, TA5REC) {isNoRefresh = yes};
    if (TA5REC.TA5RTNCD != 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SK2C";
      SLWREC.SLWMSGNO = 0001;
      return;
    end
    SL0PSO2(); /* <=== setup screen*/
  end

  if (SLWREC.SLWERRSW == "N")
    SLWREC.XXXLOCID = "SK2D";
    SLWREC.SLWMSGNO = 0013;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0PSK2

// setup blank screen
Function SL0PSN1()


   /* ************************************************************/
   /* *** display a blank screen by:                          ****/
   /* *** displaying the left sum title  and                  ****/
   /* *** displaying a blank line                             ****/
   /* *** until the page is full                              ****/
   /* ************************************************************/

  SL0P125(); /* <=== disp left sum title*/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    SL0P129(); /* <=== disp blank line*/
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0PSN1

// setup blank screen
Function SL0PSN2()


   /* ************************************************************/
   /* *** display a blank screen by:                          ****/
   /* *** displaying the left sum title  and                  ****/
   /* *** displaying a blank line                             ****/
   /* *** until the page is full                              ****/
   /* ************************************************************/

  SL0P225(); /* <=== disp left sum title*/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    SL0P229(); /* <=== disp blank line*/
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0PSN2

// setup left sum scrn
Function SL0PSO1()


   /* ************************************************************/
   /* *** get first record from tsq and display the data      ****/
   /* ************************************************************/


  SL0P125(); /* <=== disp title*/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    if (SL0PWD0.SL0PWRTY[SLWIDX01] == "D")
      /* *** format detail line ****/
      SL0PWL1.SL0PWLN1 = SL0PWD0.SL0PWDTA[SLWIDX01];
      SL0P122(); /* <=== disp det line*/
    else
      if (SL0PWD0.SL0PWRTY[SLWIDX01] == "S")
        /* *** format detail line ****/
        SL0PWL1.SL0PWLN1 = SL0PWD0.SL0PWDTA[SLWIDX01];
        SL0P121(); /* <=== disp only sizes*/
      else
        if (SL0PWD0.SL0PWRTY[SLWIDX01] == "B")
          SL0P129(); /* display blank line*/
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SO1A";
          SLWREC.SLWMSGNO = 0001;
          return;
        end
      end
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if error: display the cleared screen                ****/
   /* ************************************************************/

  if (SLWREC.SLWERRSW == "Y")
    SL0PST1(); /* <=== reset screen (empty)*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0PSO1

// setup left sum scrn
Function SL0PSO2()


   /* ************************************************************/
   /* *** get first record from tsq and display the data      ****/
   /* ************************************************************/


  SL0P225(); /* <=== disp title*/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    if (SL0PWD0.SL0PWRTY[SLWIDX01] == "D")
      /* *** format detail line ****/
      SL0PWL2.SL0PWLN2 = SL0PWD0.SL0PWDTA[SLWIDX01];
      SL0P222(); /* <=== disp det line*/
    else
      if (SL0PWD0.SL0PWRTY[SLWIDX01] == "S")
        /* *** format detail line ****/
        SL0PWL2.SL0PWLN2 = SL0PWD0.SL0PWDTA[SLWIDX01];
        SL0P221(); /* <=== disp det line*/
      else
        if (SL0PWD0.SL0PWRTY[SLWIDX01] == "B")
          SL0P229(); /* display blank line*/
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SO2A";
          SLWREC.SLWMSGNO = 0001;
          return;
        end
      end
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if error: display the cleared screen                ****/
   /* ************************************************************/

  if (SLWREC.SLWERRSW == "Y")
    SL0PST2(); /* <=== reset screen (empty)*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0PSO2

// setup sum tsq
Function SL0PSS1()


   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0PSS1 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

   /* *** obtain valid size descriptions ****/

  set SYPREC empty;
  SYPREC.XGPCD = SL0PM110.XGPCD;
  SYPREC.SY1STNBR = SL0PM110.SY1STNBR;
  SYPREC.SY2CLRID = SL0PM110.SY2CLRID;
  SYPREC.XDMCD = SL0PM110.XDMCD;
  SYPREC.XQACD = SL0PM110.XQACD;

  SL0PSAA(); /* perform size translation call*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  if (SL0PM110.SL0PMSEL == "F"
   || SL0PM110.SL0PMSEL == "A")
    SL0PS1M(); /* process future and all*/
  else
    SL0PS1N(); /* process current and prior*/
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0PSS1

// setup sum tsq
Function SL0PSS2()


   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0PSS2 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  if (SL0PM210.SL0PMSEL == "F"
   || SL0PM210.SL0PMSEL == "A")
    SL0PS2M(); /* process future and all*/
  else
    SL0PS2N(); /* process current and prior*/
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0PSS2

// reset screen (empty)
Function SL0PST1()


   /* ************************************************************/
   /* *** "empty" map =  fld values only                      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0PM110 empty; /* resets entire screen*/

  SL0PSG1(); /* <=== setup map key fields*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0PM110.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0PM110.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0PM110.XXXTITLE = SLWREC.XXXTITLE;
  SL0PM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set SL0PW01 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** purge any existing storage in case of 'left overs'  ****/
   /* *** note: not found is acceptable return code           ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq(s)*/

   /* ************************************************************/
   /* *** setup the floating map lines for a blank map        ****/
   /* ************************************************************/

  SL0PSN1(); /* <=== setup blank screen*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0PST1

// reset screen (empty)
Function SL0PST2()


   /* ************************************************************/
   /* *** "empty" map =  fld values only                      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0PM210 empty; /* resets entire screen*/

  SL0PSG2(); /* <=== setup map key fields*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0PM210.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0PM210.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0PM210.XXXTITLE = SLWREC.XXXTITLE;
  SL0PM210.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set SL0PW02 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** purge any existing storage in case of 'left overs'  ****/
   /* *** note: not found is acceptable return code           ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq(s)*/

   /* ************************************************************/
   /* *** setup the floating map lines for a blank map        ****/
   /* ************************************************************/

  SL0PSN2(); /* <=== setup blank screen*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0PST2

// CAITEM  processing
Function SL0PSY0()


   /* ************************************************************/
   /* *** if entered, use CAITEM data by first moving it to   ****/
   /* *** a ws field to make use of it with "redefines"       ****/
   /* *** note: CAITEM = character data                       ****/
   /* ************************************************************/

  SLWREC.CAITEM = COMMAREA.CAITEM;

  if (SLWREC.SLWCASNO > " ")
    SL0PM010.XMSLMSNO = SLWREC.SLWCASNO;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0PSY0

// CAITEM processing
Function SL0PSY1()


   /* ************************************************************/
   /* *** if entered, use CAITEM data by first moving it to   ****/
   /* *** a ws field to make use of it with "redefines"       ****/
   /* *** note: CAITEM = character data as passed             ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0PSY1

// CAITEM processing
Function SL0PSY2()


   /* ************************************************************/
   /* *** if entered, use CAITEM data by first moving it to   ****/
   /* *** a ws field to make use of it with "redefines"       ****/
   /* *** note: CAITEM = character data as passed             ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0PSY2

// close : prod loc asgmnt : 2
Function XSSL7C2()


   /* ************************************************************/
   /* *** close select set of:  product location assignment   ****/
   /* *** using the std module:  IO1550                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "C2";

  call "IO1550" (SLVREC, SQLCA, SL7REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSL7C2 ";
  TA1REC.TA1LOCAT[1] = "IO1550  ";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYASG01";
  TA1REC.TA1TBLKE = SL7REC.SL7KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSL7C2

// close : prod loc asgmnt : 3
Function XSSL7C5()


   /* ************************************************************/
   /* *** close select set of:  product location assignment   ****/
   /* *** using the std module:  IO1550                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "C5";

  call "IO1550" (SLVREC, SQLCA, SL7REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSL7C5 ";
  TA1REC.TA1LOCAT[1] = "IO1550  ";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYASG01";
  TA1REC.TA1TBLKE = SL7REC.SL7KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSL7C5

// fetch : prod loc asgmnt : 2
Function XSSL7F2()


   /* ************************************************************/
   /* *** fetch next row from:  product location assignment   ****/
   /* *** using the std module:  IO1550                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ***       but w/these io mods the sgrp will close       ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "N2";

  call "IO1550" (SLVREC, SQLCA, SL7REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    XSSL7C2(); /* <=== std close cursor*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSL7F2 ";
  TA1REC.TA1LOCAT[1] = "IO1550  ";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYASG01";
  TA1REC.TA1TBLKE = SL7REC.SL7KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSL7F2

// fetch : prod loc asgmnt : 5
Function XSSL7F5()


   /* ************************************************************/
   /* *** fetch next row from:  product location assignment   ****/
   /* *** using the std module:  IO1550                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ***       but w/these io mods the sgrp will close       ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "N5";

  call "IO1550" (SLVREC, SQLCA, SL7REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    XSSL7C5(); /* <=== std close cursor*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSL7F5 ";
  TA1REC.TA1LOCAT[1] = "IO1550  ";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYASG01";
  TA1REC.TA1TBLKE = SL7REC.SL7KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSL7F5

// setinq : prod loc asgmnt : 2
Function XSSL7S2()


   /* ************************************************************/
   /* *** select set of rows from:  product assignment        ****/
   /* *** using the std module:  IO1550                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique field values for:            ****/
   /* ***   xwhcd                                             ****/
   /* ***   xarcd                                             ****/
   /* *** the following may be used with a wild card (*):     ****/
   /* ***   sl4zone                                           ****/
   /* ***   sl5loctn                                          ****/
   /* ***   xxxstat                                           ****/
   /* *** the order by for this select set is:                ****/
   /* ***   xwhcd                                             ****/
   /* ***   xarcd                                             ****/
   /* ***   sl4zone                                           ****/
   /* ***   sl5loctn                                          ****/
   /* ***   xgpcd                                             ****/
   /* ***   sy1stnbr                                          ****/
   /* ***   sy2clrid                                          ****/
   /* ***   xdmcd                                             ****/
   /* ***   xqacd                                             ****/
   /* ***   xsdcd                                             ****/
   /* ***   xsacd                                             ****/
   /* ***   xpgcd                                             ****/
   /* ***   xumcd                                             ****/
   /* ***   xowcd                                             ****/
   /* ***   sl7effdt (descending)                             ****/
   /* ***   xxxstat                                           ****/
   /* ***   sy5szid                                           ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "S2";

  call "IO1550" (SLVREC, SQLCA, SL7REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "XSSL7S2 ";
    TA1REC.TA1LOCAT[1] = "IO1550  ";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VSYASG01";
    TA1REC.TA1TBLKE = SL7REC.SL7KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* *** note: fetch handles return code correctly           ****/
   /* ************************************************************/

  XSSL7F2(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSL7S2

// setinq : prod loc asgmnt : 5
Function XSSL7S5()


   /* ************************************************************/
   /* *** select set of rows from:  product assignment        ****/
   /* *** using the std module:  IO1550                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique field values for:            ****/
   /* ***   xwhcd                                             ****/
   /* ***   xgpcd                                             ****/
   /* ***   sy1stnbr                                          ****/
   /* ***   sy2clrid                                          ****/
   /* ***   xdmcd                                             ****/
   /* ***   xqacd                                             ****/
   /* ***   xsdcd                                             ****/
   /* ***   xsacd                                             ****/
   /* ***   xpgcd                                             ****/
   /* ***   xumcd                                             ****/
   /* ***   xowcd                                             ****/
   /* *** the following may be used with a wild card (*):     ****/
   /* ***   xxxstat                                           ****/
   /* ***   sy5szid                                           ****/
   /* *** the following must have a range passed:             ****/
   /* ***   sl7effdt                                          ****/
   /* *** the order by for this select set is:                ****/
   /* ***   xwhcd                                             ****/
   /* ***   xgpcd                                             ****/
   /* ***   sy1stnbr                                          ****/
   /* ***   sy2clrid                                          ****/
   /* ***   xdmcd                                             ****/
   /* ***   xqacd                                             ****/
   /* ***   xsdcd                                             ****/
   /* ***   xsacd                                             ****/
   /* ***   xpgcd                                             ****/
   /* ***   xumcd                                             ****/
   /* ***   xowcd                                             ****/
   /* ***   sl7effdt (descending)                             ****/
   /* ***   xxxstat                                           ****/
   /* ***   sy5szid                                           ****/
   /* ***   xarcd                                             ****/
   /* ***   sl4zone                                           ****/
   /* ***   sl5loctn                                          ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "S5";

  call "IO1550" (SLVREC, SQLCA, SL7REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "XSSL7S5 ";
    TA1REC.TA1LOCAT[1] = "IO1550  ";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VSYASG01";
    TA1REC.TA1TBLKE = SL7REC.SL7KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ************************************************************/

  XSSL7F5(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSL7S5

//*** RECORD=SL0PW01 ****
// ************************************************************
// 
//           STOCK LOCATE INQUIRY SKELETON
//           =============================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used specifically
//           by an application/function.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-87  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0PW01 type basicRecord
  10 XWHCD XWHCD ; 
  10 SL0PWSEL SL0PWSEL ; 
  10 XGPCD XGPCD ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY1SSTNM SY1SSTNM ; 
  10 SY2CLRID SY2CLRID ; 
  10 SY2CLRAB SY2CLRAB ; 
  10 XDMCD XDMCD ; 
  10 XQACD XQACD ; 
  10 XSDCD XSDCD ; 
  10 XSACD XSACD ; 
  10 XPGCD XPGCD ; 
  10 XUMCD XUMCD ; 
  10 XOWCD XOWCD ; 
  10 XARCD XARCD ; 
  10 SL4ZONE SL4ZONE ; 
  10 SL5LOCTN SL5LOCTN ; 
  10 SY5SZID SY5SZID ; 
  10 SL0PWARE SL0PWARE ; 
  10 SL0PWZON SL0PWZON ; 
  10 SL0PWLOC SL0PWLOC ; 
  10 SL0PWSIZ SL0PWSIZ ; 
  10 SL7EFFDT SL7EFFDT ; 
  10 XXXSTAT XXXSTAT ; 
  10 SL0PWSZ1 SL0PWSZ1 ; 
  10 SL0PWZFL SL0PWZFL [40] ; 
  10 SL0PWZDT SL0PWZDT [40] ; 
end // end SL0PW01

//*** RECORD=SL0PW02 ****
// ************************************************************
// 
//           STOCK LOCATE INQUIRY SKELETON
//           =============================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used specifically
//           by an application/function.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-87  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0PW02 type basicRecord
  10 XWHCD XWHCD ; 
  10 SL0PWSEL SL0PWSEL ; 
  10 XARCD XARCD ; 
  10 SL4ZONE SL4ZONE ; 
  10 SL5LOCTN SL5LOCTN ; 
  10 XGPCD XGPCD ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 XQACD XQACD ; 
  10 XSDCD XSDCD ; 
  10 XSACD XSACD ; 
  10 XPGCD XPGCD ; 
  10 XUMCD XUMCD ; 
  10 XOWCD XOWCD ; 
  10 SL0PWGPC SL0PWGPC ; 
  10 SL0PWSTY SL0PWSTY ; 
  10 SL0PWCOL SL0PWCOL ; 
  10 SL0PWDIM SL0PWDIM ; 
  10 SL0PWQUA SL0PWQUA ; 
  10 SL0PWSPE SL0PWSPE ; 
  10 SL0PWSHA SL0PWSHA ; 
  10 SL0PWPAC SL0PWPAC ; 
  10 SL0PWUOM SL0PWUOM ; 
  10 SL0PWOWN SL0PWOWN ; 
  10 SL0PWSIZ SL0PWSIZ ; 
  10 SL7EFFDT SL7EFFDT ; 
  10 XXXSTAT XXXSTAT ; 
  10 SL0PWSZ2 SL0PWSZ2 ; 
  10 SL0PWRSW SL0PWRSW ; 
  10 SL0PWZFL SL0PWZFL [40] ; 
  10 SL0PWZDT SL0PWZDT [40] ; 
end // end SL0PW02

//*** RECORD=SL0PW03 ****
// ************************************************************
// 
//           STOCK LOCATE INQUIRY SKELETON
//           =============================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used specifically
//           by an application/function.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-87  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0PW03 type basicRecord
  10 SL0PWRC3 SL0PWRC3 ; 
    15 XWHCD XWHCD ; 
    15 SL0PMOP1 SL0PMOP1 ; 
    15 SL0PMOP2 SL0PMOP2 ; 
    15 XARCD XARCD ; 
    15 SL4ZONE SL4ZONE ; 
    15 SL5LOCTN SL5LOCTN ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
  10 SL0PWPTR SL0PWPTR ; 
  10 SL0PWSSW SL0PWSSW ; 
  10 CAUSERID CAUSERID ; 
    15 SL0PWUSR SL0PWUSR ; 
    15 * char(2) ; 
  10 SL0PWJOB SL0PWJOB ; 
    15 SL0PWLT1 SL0PWLT1 ; 
    15 * char(56) ; 
  10 SL0PWOUT SL0PWOUT ; 
    15 SL0PWLT3 SL0PWLT3 ; 
    15 SL0PWPID SL0PWPID ; 
    15 * char(42) ; 
end // end SL0PW03

//*** RECORD=SL0PW04 ****
// ************************************************************
// 
//           STOCK LOCATE INQUIRY SKELETON
//           =============================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used specifically
//           by an application/function.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-87  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0PW04 type basicRecord
  10 SL0PWRC4 SL0PWRC4 ; 
    15 XWHCD XWHCD ; 
    15 SL0PMOP1 SL0PMOP1 ; 
    15 SL0PMOP2 SL0PMOP2 ; 
    15 XARCD XARCD ; 
    15 SL4ZONE SL4ZONE ; 
    15 SL5LOCTN SL5LOCTN ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
  10 SL0PWPTR SL0PWPTR ; 
  10 SL0PWSSW SL0PWSSW ; 
  10 CAUSERID CAUSERID ; 
    15 SL0PWUSR SL0PWUSR ; 
    15 * char(2) ; 
  10 SL0PWJOB SL0PWJOB ; 
    15 SL0PWLT1 SL0PWLT1 ; 
    15 * char(56) ; 
  10 SL0PWOUT SL0PWOUT ; 
    15 SL0PWLT3 SL0PWLT3 ; 
    15 SL0PWPID SL0PWPID ; 
    15 * char(42) ; 
end // end SL0PW04

Record SL0PWB1 type basicRecord
  10 SL0PWRC1 SL0PWRC1 [5] ; 
end // end SL0PWB1

Record SL0PWB2 type basicRecord
  10 SL0PWRC2 SL0PWRC2 [8] ; 
end // end SL0PWB2

Record SL0PWD0 type basicRecord
  10 SL0PWLTH SL0PWLTH ; 
  10 * char(65) [15] ; 
    15 SL0PWRTY SL0PWRTY ; 
    15 SL0PWSPG SL0PWSPG ; 
    15 SL0PWDTA SL0PWDTA ; 
end // end SL0PWD0

Record SL0PWL1 type basicRecord
  10 SL0PWLN1 SL0PWLN1 ; 
    15 XARCD XARCD ; 
    15 SL4ZONE SL4ZONE ; 
    15 SL5LOCTN SL5LOCTN ; 
    15 SL7EFFDT SL7EFFDT ; 
    15 XXXSTAT XXXSTAT ; 
    15 SY4IDDSC SY4IDDSC [8] ; 
end // end SL0PWL1

Record SL0PWL2 type basicRecord
  10 SL0PWLN2 SL0PWLN2 ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 XSDCD XSDCD ; 
    15 XSACD XSACD ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
    15 XOWCD XOWCD ; 
    15 SL7EFFDT SL7EFFDT ; 
    15 XXXSTAT XXXSTAT ; 
    15 SY4IDDSC SY4IDDSC [5] ; 
end // end SL0PWL2

// print option 1
DataItem SL0PMOP1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// print option 2
DataItem SL0PMOP2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xar-area-cd
DataItem SL0PWARE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// identifying color
DataItem SL0PWCOL char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dimension code
DataItem SL0PWDIM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// actual detail data
DataItem SL0PWDTA char(60)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// gen prod class code
DataItem SL0PWGPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jobname
DataItem SL0PWJOB char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work line
DataItem SL0PWLN1 char(55)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work line
DataItem SL0PWLN2 char(57)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sl-loc-cd
DataItem SL0PWLOC char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// literal 1
DataItem SL0PWLT1 char(24)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jes2 output statement
DataItem SL0PWLT3 char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data length
DataItem SL0PWLTH num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// jes2 output line of jcl
DataItem SL0PWOUT char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// owner group code
DataItem SL0PWOWN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// packaging type code
DataItem SL0PWPAC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// output destination
DataItem SL0PWPID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// printer save field
DataItem SL0PWPTR char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// quality code
DataItem SL0PWQUA char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work buffer area
DataItem SL0PWRC1 char(55)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work buffer area
DataItem SL0PWRC2 char(60)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL0PWRC3 char(22)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL0PWRC4 char(22)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// output records switch
DataItem SL0PWRSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record type
DataItem SL0PWRTY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save selection field
DataItem SL0PWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// shade code
DataItem SL0PWSHA char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size id
DataItem SL0PWSIZ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// spec difference
DataItem SL0PWSPE char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// corresponding summary page
DataItem SL0PWSPG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// printers shown flag
DataItem SL0PWSSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style number
DataItem SL0PWSTY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work size field
DataItem SL0PWSZ1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work size field
DataItem SL0PWSZ2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// unit of measure code
DataItem SL0PWUOM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// user id for job name
DataItem SL0PWUSR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// date (for each size)
DataItem SL0PWZDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size switch(for each size)
DataItem SL0PWZFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sl-zone-cd
DataItem SL0PWZON char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

