package sl0x;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import pc.common.*;
import pw.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=SL0X ****
// This application allows a user to change the RTS value
// for pallet letdowns.
// 
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          12/12/96  dgerlt  New application.
//          07/11/97  dgerlt  Added an option for belt pick lag
//          08/12/97  kheina  Allow lag = 0 for Memphis App.
// *********************
Program SL0X type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  SL3REC SL3REC; // record
  SLWREC SLWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TAEREC TAEREC; // record
  UT1REC UT1REC; // record
  X2CREC X2CREC; // record
  X3CREC X3CREC; // record
  XX0XW02 XX0XW02; // record
  XZZREC XZZREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL {deleteAfterUse = yes}; // table
  use SL0XM.SL0XM001,  // forms
      SL0XM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPSL001: XPSL001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set UT1REC empty; /* Initialize subroutine parameters*/
    set SL0XM001 initial; /* M001 input/output*/

     /* ------------------------------------------------------------*/
     /* If data was passed in the COMMAREA, use as the initial key.*/
     /* ------------------------------------------------------------*/

    SL0XM001.XWHCD = SLWREC.XWHCD; /* display passed warehouse*/

    if (SLWREC.XWHCD != "  ") /* is there a warehouse passed?*/

      if (SL0XM001.XWHCD in XWHTBL.XWHCD /* if warehouse valid*/
       && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active*/

        SL0XM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex]; /* disp whse abrv*/

      else

        converseLib.validationFailed(11); /* invalid msg*/

      end

    else

      converseLib.validationFailed(09); /* field required msg*/

    end

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto SL0X002; /* Get the min rts value*/
    goto SL0X001; /* Converse the main process*/


    SL0X002: SL0X002();
    SL0X001: SL0X001();
    goto SL0X001;
  end // end main
end // end SL0X

// Inquire/maintain a table row
Function SL0X001()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  SL0X100(); /* Obtain the data to display*/

  SL0X200(); /* Format and display the map*/

  SL0X300(); /* Check attention identifier*/

  SL0X400(); /* Reset fields to normal intensity*/

  SL0X500(); /* Check to see if a change was made*/

end // end SL0X001

Function SL0X002()

   /* Get the date and time*/

  set X3CREC empty;
  set X2CREC empty;
  XSX2CDT();
  XSX3CTM();

   /* Get the minimum rts value from DSTLOC.VSLCTL01*/

  SL0XSE1();
  SL0XM001.SL0XMMRTS = SL3REC.SL-MIN-RTS;
  SL0XM001.SL0XMBPLG = SL3REC.SL3BPLAG;

   /* Get the current user id*/

  call "UT0200" (UT1REC) {isNoRefresh = yes}; /* Obtain user identification*/

  if (UT1REC.UT1RETCD != 0) /* Non-zero return code*/

    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "SL0X002 "; /* Process name*/
    TA1REC.TA1LOC = "OBTAIN CICS USER IDENTIFICATION";
    SQLCA.SQLCAREC = UT1REC.UT1GRPLV; /* Error information*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes}; /* Error diagnosis routine*/

    converseLib.validationFailed(29); /* Indicate system error*/

    COMMAREA.CATOAP = "MN0M"; /* Picking Master Menu*/

    XSEXIT(); /* Exit to master menu*/

    exit program; /* Terminate application if exit failed*/

  end

   /* Get the last updated userid and date*/

  SL0XSE2();
  SL0XM001.SL0XMLUBY = XZZREC.XZZ6CHR;
  SL0XM001.SL0XMLUDT = XZZREC.XZZ8CHR;
  SL0XSE3();
  SL0XM001.SL0XMLUBY2 = XZZREC.XZZ6CHR;
  SL0XM001.SL0XMLUDT2 = XZZREC.XZZ8CHR;
end // end SL0X002

// Obtain the data to display
Function SL0X100()
   /* ------------------------------------------------------------*/
   /* Clear the map display storage area and save the key fields.*/
   /* ------------------------------------------------------------*/

  SL0XM001.XXXCURDT = VGVar.currentShortGregorianDate; /* date to map*/

  if (SLWREC.SLWMSGNO == 20) /* if completed update*/

    return;

  end

   /* ------------------------------------------------------------*/
   /* Retrieve warehouse name from Warehouse Table*/
   /* ------------------------------------------------------------*/

  if (SL0XM001.XWHCD in XWHTBL.XWHCD /* if warehouse on table*/
   && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active*/

  /* MOVE XWHTBL.XWHABRV(EZETST) TO Sl0xW01.XWHABRV;/* save abrv*/
    SL0XM001.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex]; /* display abrv*/

  else

    converseLib.validationFailed(11); /* invalid value entered*/
  /* MOVE ' ' TO Sl0xW01.XWHABRV;   /* blank warehouse abrev*/
    return;

  end
end // end SL0X100

// Format and display the map
Function SL0X200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/


  if (converseVar.validationMsgNum != 0) /* Error was found*/
    SLWREC.SLWMSGNO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SL0XM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  SL0XM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  SL0XM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (SLWREC.SLWMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (SLWREC.SLWMSGNO != 0) /* Message to display*/

      if (SLWREC.SLWMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(SLWREC.SLWMSGNO);
      end /* Message number*/
    else
      SL0XM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    SL0XM001.XXXLOCID = SLWREC.XXXLOCID; /* Module identification*/

    set SL0XM001 alarm; /* Indicate sound alarm*/

  end

  converse SL0XM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = " "; /* Module identification*/
  SLWREC.SLWMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = SL0XM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = SL0XM001.CAITEM; /* Application data*/


end // end SL0X200

// Check attention identifier
Function SL0X300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  SLWREC.XXXLOCID = "300"; /* Module identification*/
  if (SL0XM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      COMMAREA.CATOAP = SL0XM001.CATOAP;
      XSSL001(); /* Exit to another application*/
      converseLib.validationFailed(166); /* If here, couldnt go to appl*/

      set SL0XM001.CATOAP cursor, bold; /* Highlight*/

    else

      converseLib.validationFailed(258); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
  )                              
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "SL0XM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
    end

    XSSL001(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
  )                                 
    SLWREC.XXXLOCID = "300"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    set SL0XM001.XWHCD cursor;

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end

end // end SL0X300

// Reset highlighted fields
Function SL0X400()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set SL0XM001.XWHCD initialAttributes; /* warehouse code*/
  set SL0XM001.XWHABRV initialAttributes; /* warehouse name*/
  set SL0XM001.SL0XMMRTS initialAttributes; /* minimum rts*/
  set SL0XM001.SL0XMBPLG initialAttributes; /* belt pick lag*/
  set SL0XM001.CATOAP initialAttributes; /* Commarea TO application*/
  set SL0XM001.CAITEM initialAttributes; /* Commarea application data*/

   /* ------------------------------------------------------------*/
   /* If no list was requested, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (SL0XM001.XWHCD == "?") /* warehouse list requested*/

    if (converseVar.eventKey not enter) /* ENTER was not pressed*/

      SLWREC.XXXLOCID = "400"; /* Module identification*/
      converseLib.validationFailed(18); /* PA/PF key may not be used*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If requested, display the list of warehouse codes.*/
   /* ------------------------------------------------------------*/

  if (SL0XM001.XWHCD == "?") /* warehouse list requested*/

    XPXX001(); /* window initialization*/
    XX0XW02.XX0XWHDR = "            WAREHOUSE CODES"; /* Heading*/

    while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
      XPXWH01(); /* Display the list*/
    end

    if (XX0XW02.XX0XWPIX == 0) /* No selection made*/

  /* MOVE Sl0xW01.XWHCD TO Sl0xM001.XWHCD; /* Restore prior code*/
  /* MOVE Sl0xW01.XWHABRV TO Sl0xM001.XWHABRV; /* Warehouse name*/
    else
      SL0XM001.XWHCD = XWHTBL.XWHCD[XX0XWPIX]; /* Selected code*/
      SL0XM001.XWHABRV = XWHTBL.XWHABRV[XX0XWPIX]; /* whse name*/

    end

    set SL0XM001.XWHCD cursor; /* Establish cursor position*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/

  SLWREC.XXXLOCID = "400"; /* Module identification*/

  exit stack; /* Exit to display map*/


end // end SL0X400

Function SL0X500()
  SL0XSE1();
  if (SL3REC.SL-MIN-RTS != SL0XM001.SL0XMMRTS)
    if (SL0XM001.SL0XMMRTS < 3 /* Value out of range*/
     || SL0XM001.SL0XMMRTS > 9)

      SLWREC.XXXLOCID = "500"; /* Module identification*/
      converseLib.validationFailed(11); /* Value is to large or small*/
      set SL0XM001.SL0XMMRTS bold;

      exit stack; /* Exit to display map*/

    end
    SL3REC.SL-MIN-RTS = SL0XM001.SL0XMMRTS;
    SL0XSUP();
    SL0XSDE();
    SL0XSAD();
  end
  if (SL3REC.SL3BPLAG != SL0XM001.SL0XMBPLG)
    if (SL0XM001.XWHCD == "51") /* Memphis apparel*/
      if (SL0XM001.SL0XMBPLG < 0 /* Value out of range*/
       || SL0XM001.SL0XMBPLG > 14)

        SLWREC.XXXLOCID = "500"; /* Module identification*/
        converseLib.validationFailed(11); /* Value is to large or small*/
        set SL0XM001.SL0XMBPLG bold;

        exit stack; /* Exit to display map*/

      end
    else
      if (SL0XM001.SL0XMBPLG < 1 /* Value out of range*/
       || SL0XM001.SL0XMBPLG > 14)

        SLWREC.XXXLOCID = "500"; /* Module identification*/
        converseLib.validationFailed(11); /* Value is to large or small*/
        set SL0XM001.SL0XMBPLG bold;

        exit stack; /* Exit to display map*/

      end
    end
    SL3REC.SL3BPLAG = SL0XM001.SL0XMBPLG;
    SL0XSUP();
    SL0XSDE2();
    SL0XSAD2();
  end
end // end SL0X500

// add for vparm101
Function SL0XSAD()
   /* ------------------------------------------------------------*/
   /* Add the row to the table.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Key to database is warehouse code and program (SL0X)*/
   /* ------------------------------------------------------------*/

  XZZREC.XZZQRYID = "SL0X  "; /* query id*/
  XZZREC.XZZQRYRN = 51; /* request number*/
  XZZREC.XZZQRYLN = 0; /* line number*/
  XZZREC.XZZ6CHR = UT1REC.UT1USRID;
  XZZREC.XZZ8CHR = VGVar.currentShortGregorianDate;
  SL0XM001.SL0XMLUBY = XZZREC.XZZ6CHR;
  SL0XM001.SL0XMLUDT = XZZREC.XZZ8CHR;
  XZZREC.ZZZSDT = X2CREC.X2CCURDT;
  XZZREC.ZZZSTM = X3CREC.X3CCURST;

  try
    call "IO1000" ("A ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "ADD"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  set SL0XM001.SL0XMMRTS cursor, bold; /* highlight*/
  exit stack; /* Exit to display map*/


end // end SL0XSAD

// add for vparm101
Function SL0XSAD2()
   /* ------------------------------------------------------------*/
   /* Add the row to the table.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Key to database is warehouse code and program (SL0X)*/
   /* ------------------------------------------------------------*/

  XZZREC.XZZQRYID = "SL0X  "; /* query id*/
  XZZREC.XZZQRYRN = 51; /* request number*/
  XZZREC.XZZQRYLN = 1; /* line number*/
  XZZREC.XZZ6CHR = UT1REC.UT1USRID;
  XZZREC.XZZ8CHR = VGVar.currentShortGregorianDate;
  SL0XM001.SL0XMLUBY2 = XZZREC.XZZ6CHR;
  SL0XM001.SL0XMLUDT2 = XZZREC.XZZ8CHR;
  XZZREC.ZZZSDT = X2CREC.X2CCURDT;
  XZZREC.ZZZSTM = X3CREC.X3CCURST;

  try
    call "IO1000" ("A ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "ADD"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "ADD THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  set SL0XM001.SL0XMMRTS cursor, bold; /* highlight*/
  exit stack; /* Exit to display map*/


end // end SL0XSAD2

// delete for vparm101
Function SL0XSDE()
   /* ------------------------------------------------------------*/
   /* delete the old row from the table.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Key to database is warehouse code and program (sl0x)*/
   /* ------------------------------------------------------------*/

  XZZREC.XZZQRYID = "SL0X  "; /* query id*/
  XZZREC.XZZQRYRN = 51; /* request number*/
  XZZREC.XZZQRYLN = 0; /* line number*/

  try
    call "IO1000" ("D ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    else

      if (SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

        return;

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "DEL"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  set SL0XM001.SL0XMMRTS cursor, bold; /* highlight*/
  exit stack; /* Exit to display map*/


end // end SL0XSDE

// delete for vparm101
Function SL0XSDE2()
   /* ------------------------------------------------------------*/
   /* delete the old row from the table.*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Key to database is warehouse code and program (sl0x)*/
   /* ------------------------------------------------------------*/

  XZZREC.XZZQRYID = "SL0X  "; /* query id*/
  XZZREC.XZZQRYRN = 51; /* request number*/
  XZZREC.XZZQRYLN = 1; /* line number*/

  try
    call "IO1000" ("D ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    else

      if (SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

        return;

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "DEL"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DELETE THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  set SL0XM001.SL0XMMRTS cursor, bold; /* highlight*/
  exit stack; /* Exit to display map*/


end // end SL0XSDE2

// obtain hdr data
Function SL0XSE1()


   /* ************************************************************/
   /* *** obtain slctl record                                 ****/
   /* ************************************************************/

  SL3REC.XWHCD = SL0XM001.XWHCD;

  TA1REC.TA1LOCAT[2] = "SL0XSE1 ";
   /* ** TA1REC.TAMAP setup during initialization ***/

  XSSL3S1(); /* <=== obtain next recvg rpt no.*/

  if (SQLCA.VAGen_SQLCODE == 0)
  else
    SLWREC.SLWERRSW = "Y";
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.XXXLOCID = "SE1A";
      SLWREC.SLWMSGNO = 0001; /* <--- not on db/severe msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.XXXLOCID = "SE1B";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.XXXLOCID = "SE1C";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0XSE1

// select unique for vparm101
Function SL0XSE2()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/


  set XZZREC empty; /* Clear row storage area*/

   /* ------------------------------------------------------------*/
   /* Key to database is warehouse code and program (SL421D)*/
   /* ------------------------------------------------------------*/

  XZZREC.XZZQRYID = "SL0X  "; /* query id*/
  XZZREC.XZZQRYRN = 51; /* request number*/
  XZZREC.XZZQRYLN = 0; /* line number*/

  try
    call "IO1000" ("S ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    else

      if (SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

        return; /* Return to previous process*/

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "SE2"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  set SL0XM001.SL0XMMRTS cursor, bold; /* highlight*/
  exit stack; /* Exit to display map*/


end // end SL0XSE2

// select unique for vparm101
Function SL0XSE3()
   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/


  set XZZREC empty; /* Clear row storage area*/

   /* ------------------------------------------------------------*/
   /* Key to database is warehouse code and program (SL421D)*/
   /* ------------------------------------------------------------*/

  XZZREC.XZZQRYID = "SL0X  "; /* query id*/
  XZZREC.XZZQRYRN = 51; /* request number*/
  XZZREC.XZZQRYLN = 1; /* line number*/

  try
    call "IO1000" ("S ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    else

      if (SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

        return; /* Return to previous process*/

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  SLWREC.XXXLOCID = "SE2"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = SLWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DCORP   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPARM101"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  set SL0XM001.SL0XMMRTS cursor, bold; /* highlight*/
  exit stack; /* Exit to display map*/


end // end SL0XSE3

Function SL0XSUP()
  XSSL3U1();
end // end SL0XSUP

Function XSSL3S1()


   /* ************************************************************/
   /* *** get the vslctl01 record from:    sl sys ctl tbl     ****/
   /* *** using the module:  IO1500                           ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = db/severe error (same as below)            ****/
   /* ***     <0 = db/severe error (&-911)                    ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

  call "IO1500" ("S ", SQLCA, SL3REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSSL3S1 ";
  TA1REC.TA1LOCAT[1] = "IO1500  ";
  TA1REC.TA1LOCAT[3] = "GET CTL ";
  TA1REC.TA1LOCAT[4] = "RECORD  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSLCTL01";
  TA1REC.TA1TBLKE = SL3REC.SL3KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSL3S1

Function XSSL3U1()


   /* ************************************************************/
   /* *** get the vslctl01 record from:    sl sys ctl tbl     ****/
   /* *** using the module:  IO1500                           ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = db/severe error (same as below)            ****/
   /* ***     <0 = db/severe error (&-911)                    ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

  call "IO1500" ("U ", SQLCA, SL3REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSSL3U1 ";
  TA1REC.TA1LOCAT[1] = "IO1500  ";
  TA1REC.TA1LOCAT[3] = "UPD CTL ";
  TA1REC.TA1LOCAT[4] = "RECORD  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSLCTL01";
  TA1REC.TA1TBLKE = SL3REC.SL3KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSL3U1

