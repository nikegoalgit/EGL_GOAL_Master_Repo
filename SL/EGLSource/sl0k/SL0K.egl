package sl0k;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fb.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
import ww.common.*;
//*** PROGRAM=SL0K ****
// ************************************************************
// 
//           STOCK LOCATE MAINTENANCE SKELETON
//           =================================
// 
// ************************************************************
// 
// OVERVIEW: This application is intended to display the data
//           selected from the user inputs for maintenance or
//           to add new data entered by the user.
// 
//           It has been designed to protect the data fields
//           during entry of the key fields but allow and
//           detect new key data during data entry/maintenance.
// 
//           A successful update message will be displayed and
//           the data portion of the screen cleared & protected
//           in order to continue the maintenance process.
// 
//           PF12 will edit data inputs only.
// 
// ************************************************************
// 
// I/O Modules:
// ===========
// 
// NAME      DESCRIPTION
// --------  --------------------------------------------------
// io3340    pc2rec pc2inseg pc-cu-in-seg (code, abrv, desc)
//           from dprodc.vprdcu01
// 
// ************************************************************
// 
// MAINTENANCE HISTORY:
// ===================
// 
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// 00  01/26/87  Ward Jones  created
// 00  01/14/88  pmainw      sl0kse2 - access sy1120 using
//                           'all' quality code option.
// 02  03/16/88  G. Gilray   change UOM screen default from
//                           '01' to spaces. if no UOM entered
//                           get default from product file.
// 03  08/11/88  Ward Jones  add 'c' doc. code
// 04  08/31/88  Ward Jones  add reset scrn on fast path error
// 05  11/10/88  John Wood   added xssegtr sgrp
// 06  06/16/89  kande1      change sl0ks9g and sl0ksim to
//                           delete record form syloc01 when
//                           onhand, reserve, and setaside zero
// 07  08/21/89  esmith      remove code relating to shade and
//                           and spec ctl: sl0ks1w, sl0ks12,
//                           sl0ks2m, sl0ks3m, in3rec, in4rec
// 08  08/30/89  esmith      changes to option #2:
//                           add code to process adjustments
//                           when reserves and setasides exist
//                           ...adjustments made against net
//                           (vs on hand) and alert the user;
//                           delete related restriction logic
// 09  09/05/89  esmith      init sl6rec before update of 'to'
//                           product in function #2
// 10  11/15/89  ryonke      added fields for phase 4 db2 chngs
// 11  02/21/90  kande1      added code to delete setaside rows
//                           when all qty are zero
// 12  04/04/90  kande1      replace xsdtbl with pc2rec and
//                           io3340
// 13  05/14/90  kande1      replace logic using old po number
//                           pc1ponbr with new logic using the
//                           new po number pc4ponbr or the new
//                           po id and po type.
// 14  06/14/90  kande1      fix build of new po nbr, id, type.
//                           allow inactive iseg codes to be
//                           maintenanced - during key changes
//                           new iseg code must be active
// 15  10/09/90  sjohns      db2 table changes
//                            - rename xsdcd to pc2inseg
//                            - rename xsacd to xegcd
//                            - delete pd1ponbr
// 16  12/03/90  kande1      during memphis appl whse project
//                           added units per case logic to
//                           screen 1 and 2. changed all refer.
//                           in code from spec and shd to inseg
//                           and engineering difference
// sl100 12/06/90 kande1     add logic in option 1 to display a
//                           warning message if prod assignment
//                           not found instead of prohibitive
//                           message.
//       05/02/91 jlucas     for whse 51 unpcs does not need to
//                           be entered for ylt_loc_type_cd
//                           11, 12, 13
//       05/07/91 jlucas     edit trans cd against fld type in
//                           m110 &edit trans cd against xittbl
//                           .xitadjfl in m110 m210 m310
//       07/23/91 sjohns     add edit for multiple units per
//                           case in m110.
// SL#0     10/09/91  SPOPA   Change "Allow Implicits" to NO.
// SL#0     10/21/91  SPOPA   Wildcard SY1UNPCS when using S5
//                            function in IO1470 (XSSL6S5).
// SL#0     10/26/91  SPOPA   Include warehouse 07 in the units
//                            per case warehouse-specific code.
// SL#0     12/12/91  SPOPA   For warehouse 07, wildcard PO
//                            number for quantity adjustment if
//                            location not receiving or bulk.
// SL#0     01/31/92  SPOPA   Default PO NUMBER on screen 1 to
//                            -1 to serve as a wildcard.  This
//                            will allow PO 0 to be specified.
// SL#0     02/11/92  SPOPA   Change units/case wildcard from 0
//                            to -1 to access 0 units/case row.
//                            Change to include units/case as
//                            part of the key fields on map 2.
//                            Change edit of map 2 units/case
//                            to maintain data integrity for
//                            warehouses 07 and 51.
//                            Change map 2 update to maintain
//                            units/case in YLT 22 (handstack)
//                            locations.
//                            Force entire quantity to be moved
//                            to new product if not multi-SKU
//                            location.
// sl#0     03/27/92 CENGEL   Included Memphis Footwear whse
//                            in same edits as Wilsonville
//                            whse with respect to u/c logic.
//                            These modifications were made as
//                            part of the Greenland/Memphis
//                            (footwear) Retrofit project of
//                            spring '92.  The following procs
//                            and statement groups were
//                            modified: SL0K120, SL0K140,
//                            SL0K220, SL0K240, SL0KSD1,
//                            SL0KSP1, SL0KS9D, SL0KS19,
//                            SL0KS1J (in two different areas),
//                            SL0KS9F, SL0KSP2.  Future logic
//                            for Greenland was included in
//                            these updates, but commented-out.
//                            SL0KSC1 had whse 04 and 02 added
//                            but 51 is absent and shall
//                            remain so until a later time.
// sl#0    04/03/92  cengel   Set '**' size entries in detail
//                            part of SL0KM110 and SL0KM210
//                            to autoskip mode.  The following
//                            were affected: SL0KSE1, SL0KS1D,
//                            SL0KS2I.
// sl#0    04/06/92  cengel   Added a key field hold area -
//                            SL0KW04 - to enable passing key
//                            field info between the three
//                            screens of SL0K.  The following
//                            were affected: SL0KW04 (new),
//                            SL0K010, SL0K110, SL0K210,
//                            SL0K310, SL0KSRP(new), SL0KSC1,
//                            SL0KSC2 & SL0KSC3.
// sl#0    08/25/92  ryonke   change dprod calls to dpick.
// sl#0    08/26/92  ryonke   previous change deleted a step.
// sl#0    08/28/92  ryonke   Added logic to procees whse '02'
//                            as units per case warehouse.
// whse25  02/11/93  kande1   add whse 25 NSG to program
// 1H0007  03/31/94  hkempe   Change to call IN9060 subroutine
//                            to perform inventory hdr/item and
//                            inventory audit updates.
//                            Delete the old statement groups
//                            that used to perform the above
//                            functions.
// sl#0    08/23/95  RYONKE   Added warehouse specific logic
//                            for Canada whse (whse=42).
// Canada  08/25/95  RYONKE   Added XCTCD to SLWREC.
// Canada  03/27/96  Pjames   Added call to SY2000.
// wilson  11/06/96  Pcole    add ylt 88 for vision
// Apparel 07/25/97  Kheina   Add destroyed inventory adj.
//                            edit for whse 51. See Sl0ksp1,
//                            Sl0ksp2.
// Apparel 10/16/97  Kheina   Modify destroyed inventory edit.
//                            See Sl0ksp1.
// y2kproj 02-03-98  oricha   y2k modifications:  sl0ksc1.
// GDS/NSC 04/24/00  MARBUC   Change from using VSLAUD01 to
//                            VSLAUD02.  For warehouse 42
//                            (Canada) call new subroutine
//                            GN1000 instead of IN9060.
//         11/06/00  marbuc   initialize PO number on map
//                            sl0km110 to -1 in sl0k110.
//                            and sl0ksq1.  initial UNPCs 1 & 2
//                            to -1 for sl0km210 in sl0k210 and
//                            and sl0ksq2.
// Dlvrusa 02/05/2001 SRAMA1  UOM Validity check/sapia01
//                    SRAMA1  VSYLOC02 changes
// Divest  10/01/2002 RBALAM   Commented the
//     SL0KS1H  in  SL0KSU1
//     SL0KS2M  in  SL0KSU2
//     SL0KS3M  in  SL0KSU3 for divestiture         of DINVNT.
//     04/21/03  snaras   Restricted 31/085 & 31/089
//  combinations of
//                                    XIT/XIR in SL0K Option
//  1. Permit 31/085 &
//                                   31/089 combinations in
//  SL0K Option 2 but
//                                   prevented the QTY field
//  from being edited.
// *********************
Program SL0K type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  IN1REC IN1REC; // record
  IN2REC IN2REC; // record
  IN5REC IN5REC; // record
  IN6REC IN6REC; // record
  INAREC INAREC; // record
  INBREC INBREC; // record
  INFREC INFREC; // record
  PC2REC PC2REC; // record
  PC3REC PC3REC; // record
  PKNREC PKNREC; // record
  SL0KW01 SL0KW01; // record
  SL0KW02 SL0KW02; // record
  SL0KW03 SL0KW03; // record
  SL0KW04 SL0KW04; // record
  SL0KW11 SL0KW11; // record
  SL0KW12 SL0KW12; // record
  SL0KW21 SL0KW21; // record
  SL0KW22 SL0KW22; // record
  SL0KW23 SL0KW23; // record
  SL0KW31 SL0KW31; // record
  SL0KW32 SL0KW32; // record
  SL0KW33 SL0KW33; // record
  SL0KW34 SL0KW34; // record
  SL0KWTQ SL0KWTQ; // record
  SL4REC SL4REC; // record
  SL5REC SL5REC; // record
  SL7REC SL7REC; // record
  SL8REC SL8REC; // record
  SLSREC SLSREC; // record
  SLVREC SLVREC; // record
  SLWREC SLWREC; // record
  SQLCA SQLCA; // record
  SYCREC SYCREC; // record
  SYPREC SYPREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VPOITM05 VPOITM05; // record
  VSAPIA01 VSAPIA01; // record
  VSLAUD02 VSLAUD02; // record
  VSYLOC02 VSYLOC02; // record
  VVIFTR01 VVIFTR01; // record
  WSY2000 WSY2000; // record
  X2CREC X2CREC; // record
  X3CREC X3CREC; // record
  X4CREC X4CREC; // record
  XOWREC XOWREC; // record
  XSSLW01 XSSLW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XARTBL; // table
  use XDMTBL; // table
  use XEGTBL; // table
  use XGPTBL; // table
  use XIFTBL; // table
  use XIRTBL; // table
  use XITTBL; // table
  use XOWTBL; // table
  use XPGTBL; // table
  use XQATBL; // table
  use XSLTBL; // table
  use XUMTBL; // table
  use XWHTBL; // table
  use YZTTBL; // table
  use SL0KM.SL0KM010,  // forms
      SL0KM.SL0KM110, 
      SL0KM.SL0KM210, 
      SL0KM.SL0KM310
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    SL0K010: SL0K010();
     /* ************************************************************/
     /* *** if the map selection no. setup:                     ****/
     /* *** use it to go directly to selection (skip converse)  ****/
     /* ************************************************************/

    if (SL0KM010.XMSLMSNO > " ")
      if (SL0KM010.XMSLMSNO == "1")
        goto SL0K110; /* <=== new function*/
      end
      if (SL0KM010.XMSLMSNO == "2")
        goto SL0K210; /* <=== new function*/
      end
      if (SL0KM010.XMSLMSNO == "3")
        goto SL0K310; /* <=== new function*/
      end
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "010Z";
      SLWREC.SLWMSGNO = 0017; /* <--- invalid selection msg*/
      set SL0KM010.XMSLMSNO cursor, bold;
      goto SL0K020; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "020 "; /* error id location id*/
    goto SL0K020; /* <=== converse map*/

    SL0K020: SL0K020();

     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0K010; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0K110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0K210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0K310; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0K020; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      if (SL0KM010.XMSLMSNO == "1")
        goto SL0K110; /* <=== new function*/
      end
      if (SL0KM010.XMSLMSNO == "2")
        goto SL0K210; /* <=== new function*/
      end
      if (SL0KM010.XMSLMSNO == "3")
        goto SL0K310; /* <=== new function*/
      end
       /* ************************************************************/
       /* *** note: invalid selection is detected at this point   ****/
       /* ************************************************************/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "020Y";
      SLWREC.SLWMSGNO = 0017; /* <--- invalid selection msg*/
      set SL0KM010.XMSLMSNO cursor, bold;
      goto SL0K020; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0K020; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/

    SL0K110: SL0K110();
     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "120 "; /* error id location id*/
    goto SL0K120; /* <=== converse map*/

    SL0K120: SL0K120();

     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0K110; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0KM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0K020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0K110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0K210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0K310; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0K120; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      SLWREC.SLWFTMSW = "Y"; /* first time switch*/
      SLWREC.XXXLOCID = "140 ";
      goto SL0K140; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0K120; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/

    SL0K140: SL0K140();
     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0K110; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0KM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0K020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0K110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0K210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0K310; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SL0KW12.SL0KWNIN == "Y") /* <=== neg inv net flag*/
      goto SL0K140; /* <=== re-display data screen*/
    end

    if (SLWREC.SLWERRSW == "Y")
      if (SLWREC.SLWSKYSW == "N"
       || SLWREC.SLWSEXSW == "Y")
        SLWREC.SLWFTMSW = "Y"; /* first time switch*/
        goto SL0K120; /* <=== re-display key screen*/
      end
      goto SL0K140; /* <=== re-display data screen*/
    end

     /* ************************************************************/
     /* *** if no error and new key: re-display the data scrn   ****/
     /* ************************************************************/

    if (SLWREC.SLWSKYSW == "N")
      SLWREC.SLWFTMSW = "Y"; /* first time switch*/
      SLWREC.XXXLOCID = "140 ";
      goto SL0K140; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      if (SLWREC.SLWFTMSW == "N")
        SLWIDX03 = 1;
        while (SLWIDX03 <= 39)
          set SL0KM110.SL0KMADJ[SLWIDX03] skip, invisible;
          SLWIDX03 = SLWIDX03 + 1;
        end
        goto SL0K140; /* <=== converse data map*/
      else
        SLWREC.XXXLOCID = "120 ";
        goto SL0K120; /* <=== setup for new input*/
      end
    end

    if (converseVar.eventKey is pf12)
      goto SL0K140; /* <=== converse data map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "140Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0K140; /* <=== display this screen*/

    SL0K210: SL0K210();

     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "220 "; /* error id location id*/
    goto SL0K220; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/

    SL0K220: SL0K220();

     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0K210; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0KM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0K020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0K110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0K210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0K310; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0K220; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      SLWREC.XXXLOCID = "240 ";
      goto SL0K240; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0K220; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/

    SL0K240: SL0K240();
     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0K210; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0KM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0K020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0K110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0K210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0K310; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      if (SLWREC.SLWSKYSW == "N")
        goto SL0K220; /* <=== re-display key screen*/
      end
      goto SL0K240; /* <=== re-display data screen*/
    end

     /* ************************************************************/
     /* *** if no error and new key: re-display the data scrn   ****/
     /* ************************************************************/

    if (SLWREC.SLWSKYSW == "N")
      SLWREC.XXXLOCID = "240 ";
      goto SL0K240; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      if (SLWREC.SLWFTMSW == "N")
        goto SL0K240; /* <=== converse data map*/
      else
        SLWREC.XXXLOCID = "220 ";
        goto SL0K220; /* <=== setup for new input*/
      end
    end

    if (converseVar.eventKey is pf12)
      goto SL0K240; /* <=== converse data map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "240Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0K240; /* <=== display this screen*/

    SL0K310: SL0K310();

     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "320 "; /* error id location id*/
    goto SL0K320; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/

    SL0K320: SL0K320();

     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0K310; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0KM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0K020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0K110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0K210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0K310; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0K320; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      SLWREC.XXXLOCID = "320 ";
      goto SL0K320; /* <=== converse map*/
    end

    if (converseVar.eventKey is pf12)
      goto SL0K320; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0K320; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/

  end // end main
end // end SL0K

// one time initializations
Function SL0K010()
   /* ************************************************************/
   /* *** standard security checking                          ****/
   /* *** note: comment out if exec'g from your msl           ****/
   /* ************************************************************/

  XSENTRY();

   /* ************************************************************/
   /* *** standard segmented trans id setting                 ****/
   /* ************************************************************/

  XSSEGTR();

   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0KM010 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SLWREC empty; /* common working storage fields*/
  set TA1REC empty; /* TA0020 record*/
  set X4CREC empty; /* check byte(s) record*/
  set SQLCA empty; /* SQL returned data record*/
  set ERRSQLCA empty; /* TA0020 version of SQLCA*/
  set TA5REC empty; /* tsq record*/

  XSSLSPQ(); /* <=== purge tsq*/

  SLWREC.XXXRVNBR = "30";

  SLWREC.XXXMAPNM = "SL0KM010";
  SLWREC.XXXTITLE = "PRODUCT QUANTITY MAINTENANCE MENU";

  XSX2CDT(); /* <--- get current ccyymmdd*/

  SLWREC.XXXAPPID = "SL0K"; /* error id appl. name*/
  SLWREC.SLWTALOC = "SL0K010 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0KM010"; /* TA0020 current map name*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* saved msg no.*/

  converseVar.commitOnConverse = 1; /* <--- auto commit on converse*/
  VGVar.handleHardIOErrors = 1; /* <--- allows sql code handling*/

  SLWREC.SLWSUMQU = "SLSK";

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0KM010.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0KM010.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0KM010.XXXTITLE = SLWREC.XXXTITLE;
  SL0KM010.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set SL0KW01 empty;
  set SL0KW02 empty;
  set SL0KW03 empty;
  set SL0KW04 empty;
  set SL0KW11 empty;
  set SL0KW12 empty;
  set SL0KW21 empty;
  set SL0KW22 empty;
  set SL0KW23 empty;
  set SL0KW31 empty;
  set SL0KW32 empty;
  set SL0KW33 empty;
  set SL0KW34 empty;
  set SL0KWTQ empty;

  SL0KSRP(); /* reset key field hold area*/

   /* ************************************************************/
   /* *** check commarea fast path item to see if it should   ****/
   /* *** be used to setup working storage &/or map fields    ****/
   /* ************************************************************/

  if (COMMAREA.CAITEM > " ")
    SL0KSY0(); /* <=== use commarea item*/
    COMMAREA.CAITEM = " ";
  end

end // end SL0K010

// converse & control key entry
Function SL0K020()

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0KM010.XXXERRID = SLWREC.XXXERRID;

  converse SL0KM010 ;

   /* ************************************************************/
   /* *** commented EZECLOS code to be used ONLY in test      ****/
   /* *** in order to end application without canceling it    ****/
   /* ************************************************************/

   /* SLPF9;*/

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020A";
    SLWREC.SLWMSGNO = 0;
    SL0KM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020B";
    SLWREC.SLWMSGNO = 0;
    SL0KM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020C";
    SLWREC.SLWMSGNO = 0;
    SL0KM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020D";
    SLWREC.SLWMSGNO = 0;
    SL0KM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0KM010.CATOAP > " ")
    COMMAREA.CATOAP = SL0KM010.CATOAP;
    COMMAREA.CAITEM = SL0KM010.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020E";
    SLWREC.SLWMSGNO = 0;
    SL0KM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0KM010.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0KM010.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "020 ";
  set SL0KM010.CATOAP initialAttributes;
  set SL0KM010.CAITEM initialAttributes;
  set SL0KM010.XMSLMSNO cursor, initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0KM010.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0KM010.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0KSH0(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15)
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "020I";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/

end // end SL0K020

// one time initializations
Function SL0K110()

  if (converseVar.eventKey is pa2) /* if this proc reentered by PA2*/
    SL0KSRP(); /* reset key field hold area*/
  end

   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0KM110 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0KW01 empty; /* appl. working storage area*/

  SLWREC.XXXMAPNM = "SL0KM110";
  SLWREC.XXXTITLE = "MAINTAIN PRODUCT QUANTITIES ";

  SLWREC.SLWTALOC = "SL0K110 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0KM110"; /* TA0020 current map name*/

  SLWREC.SLWFTMSW = "Y"; /* first time switch*/
  SLWREC.SLWSEXSW = "N"; /* Special exit switch*/
  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* saved msg no.*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0KM110.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0KM110.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0KM110.XXXTITLE = SLWREC.XXXTITLE;
  SL0KM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  SL0KM110.XWHCD = COMMAREA.XWHCD;
  if (SL0KM110.XWHCD == " ")
    set SL0KM110.XWHCD cursor;
  else
    set SL0KM110.IN5TRDCD cursor;
  end

  SL0KM110.IN5TRDCD = SL0KW04.IN5TRDCD; /* use hold doc part I*/
  SL0KM110.IN5TRDOC = SL0KW04.IN5TRDOC; /* use hold doc part II*/
  SL0KM110.IN5TRSUB = SL0KW04.IN5TRSUB; /* use hold doc part III*/
  SL0KM110.XITCD = SL0KW04.XITCD; /* use hold tran type*/
  SL0KM110.IN5TRREF = SL0KW04.IN5TRREF; /* use hold xref nbr*/
  SL0KM110.XIRCD = SL0KW04.XIRCD; /* use hold reason code*/
  SL0KM110.XGPCD = SL0KW04.XGPCD; /* use hold gpc*/
  SL0KM110.SY1STNBR = SL0KW04.SY1STNBR; /* use hold style*/
  SL0KM110.SY2CLRID = SL0KW04.SY2CLRID; /* use hold color*/
  SL0KM110.XDMCD = SL0KW04.XDMCD; /* use hold dim*/
  SL0KM110.XQACD = SL0KW04.XQACD; /* use hold qual*/
  SL0KM110.PC2INSEG = SL0KW04.PC2INSEG; /* use hold iseg*/
  SL0KM110.XEGCD = SL0KW04.XEGCD; /* use hold edif*/
  SL0KM110.XSLCD = SL0KW04.XSLCD; /* use hold slc*/
  SL0KM110.XPGCD = SL0KW04.XPGCD; /* use hold pg*/
  SL0KM110.XUMCD = SL0KW04.XUMCD; /* use hold uom*/
  SL0KM110.XOWCD = SL0KW04.XOWCD; /* use hold own group*/
  SL0KM110.XARCD = SL0KW04.XARCD; /* use hold area*/
  SL0KM110.SL4ZONE = SL0KW04.SL4ZONE; /* use hold zone*/
  SL0KM110.SL5LOCTN = SL0KW04.SL5LOCTN; /* use hold location*/
  SL0KM110.SY1UNPCS = SL0KW04.SY1UNPCS; /* use hold u/c*/

  SL0KM110.PC3PONBR = -1; /* initialize po number*/

   /* DLVRUSA STARTS - SAIRAM-SAPPO*/
  SL0KM110.PC-SAP-PO-NBR = "*"; /* initialize sap po number*/
   /* DLVRUSA ENDS   - SAIRAM-SAPPO*/

  SL0KM110.XIFCD = "01"; /* field code*/
  SL0KM110.SL0KWPID = "*";
  SL0KM110.PC4ORTYP = "*";

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

   /* DLVRUSA STARTS - SAIRAM-SAPPO*/
   /* MOVE 39 TO SL0KWTQ.SL0KWLEN;     /* SL0KWTQ temporary storage length*/
  SL0KWTQ.SL0KWLEN = 49; /* SL0KWTQ temporary storage length*/
   /* DLVRUSA ENDS   - SAIRAM-SAPPO*/

end // end SL0K110

// converse & control key entry
Function SL0K120()
   /* ************************************************************/
   /* *** protect (askip) data fields (if any)                ****/
   /* *** note: cursor is set if error or is map's default    ****/
   /* ************************************************************/

  SL0KW11.SL0KWACF = "N"; /* <=== don't pos cursor at area*/
  SL0KW12.SL0KWNIN = "N"; /* <=== neg inv net flag*/

  if (SLWREC.SLWFTMSW != "Y"
   || SLWREC.SLWSEXSW == "Y")
    set SL0KM110.XWHCD skip;
    set SL0KM110.IN5TRDCD skip;
    set SL0KM110.IN5TRDOC skip;
    set SL0KM110.IN5TRSUB skip;
    set SL0KM110.XITCD skip;
    set SL0KM110.IN5TRREF skip;
    set SL0KM110.XIRCD skip;
    set SL0KM110.XIFCD skip;
    set SL0KM110.XGPCD skip;
    set SL0KM110.SY1STNBR skip;
    set SL0KM110.SY2CLRID skip;
    set SL0KM110.XDMCD skip;
    set SL0KM110.XQACD skip;
    set SL0KM110.PC2INSEG skip;
    set SL0KM110.XEGCD skip;
    set SL0KM110.XSLCD skip;
    set SL0KM110.XPGCD skip;
    set SL0KM110.XUMCD skip;
    set SL0KM110.XOWCD skip;
    set SL0KM110.XARCD skip;
    set SL0KM110.SY1UNPCS skip;
    set SL0KM110.SL4ZONE skip;
    set SL0KM110.SL5LOCTN skip;
    set SL0KM110.PC3PONBR skip;
    /* DLVRUSA STARTS - SAIRAM-SAPPO*/
    set SL0KM110.PC-SAP-PO-NBR skip;
    /* DLVRUSA ENDS   - SAIRAM-SAPPO*/
    set SL0KM110.SL0KWPID skip;
    set SL0KM110.PC4ORTYP skip;
    set SL0KM110.SL2CASE skip;
  end

  if (SL0KM110.XWHCD != "02" /* Not Greenland*/
   && SL0KM110.XWHCD != "04" /* and not Memphis Footwear*/
   && SL0KM110.XWHCD != "07" /* and not Wilsonville*/
   && SL0KM110.XWHCD != "51" /* and not Memphis Apparel*/
   && SL0KM110.XWHCD != "25" /* and not NSG*/
   && SL0KM110.XWHCD != "42") /* and not Canada*/
    set SL0KM110.SL0KMTL1 skip, invisible;
    set SL0KM110.SY1UNPCS skip, invisible, modified;
  end

  set SL0KM110.SL0KMTOT skip, invisible;

  SLWIDX01 = 1;
  while (SLWIDX01 <= 36)
    set SL0KM110.SL0KMADJ[SLWIDX01] skip, invisible;
    SLWIDX01 = SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0KM110.XXXERRID = SLWREC.XXXERRID;

  converse SL0KM110 ;

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120A";
    SLWREC.SLWMSGNO = 0;
    SL0KM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120C";
    SLWREC.SLWMSGNO = 0;
    SL0KM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120D";
    SLWREC.SLWMSGNO = 0;
    SL0KM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0KM110.CATOAP > " ")
    COMMAREA.CATOAP = SL0KM110.CATOAP;
    COMMAREA.CAITEM = SL0KM110.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120E";
    SLWREC.SLWMSGNO = 0;
    SL0KM110.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0KM110.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0KM110.VAGen_EZEMSG = " ";
  set SL0KM110.CATOAP initialAttributes;
  set SL0KM110.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset key input fld attr.s as orig.ly defined       ****/
   /* ************************************************************/

  set SL0KM110.XWHCD initialAttributes;
  set SL0KM110.IN5TRDCD initialAttributes;
  set SL0KM110.IN5TRDOC initialAttributes;
  set SL0KM110.IN5TRSUB initialAttributes;
  set SL0KM110.XITCD initialAttributes;
  set SL0KM110.IN5TRREF initialAttributes;
  set SL0KM110.XIRCD initialAttributes;
  set SL0KM110.XIFCD initialAttributes;
  set SL0KM110.XGPCD initialAttributes;
  set SL0KM110.SY1STNBR initialAttributes;
  set SL0KM110.SY2CLRID initialAttributes;
  set SL0KM110.XDMCD initialAttributes;
  set SL0KM110.XQACD initialAttributes;
  set SL0KM110.PC2INSEG initialAttributes;
  set SL0KM110.XEGCD initialAttributes;
  set SL0KM110.XSLCD initialAttributes;
  set SL0KM110.XPGCD initialAttributes;
  set SL0KM110.XUMCD initialAttributes;
  set SL0KM110.XOWCD initialAttributes;
  set SL0KM110.XARCD initialAttributes;
  set SL0KM110.SL4ZONE initialAttributes;
  set SL0KM110.SL5LOCTN initialAttributes;
  set SL0KM110.SL0KWPID initialAttributes;
  set SL0KM110.PC4ORTYP initialAttributes;
  set SL0KM110.PC3PONBR initialAttributes;
   /* DLVRUSA STARTS - SAIRAM-SAPPO*/
  set SL0KM110.PC-SAP-PO-NBR initialAttributes;
   /* DLVRUSA ENDS   - SAIRAM-SAPPO*/
  set SL0KM110.SL2CASE initialAttributes;
  set SL0KM110.SL0KMTL1 initialAttributes;
  set SL0KM110.SY1UNPCS initialAttributes;
  set SL0KM110.SL0KMTOT initialAttributes;

   /* ************************************************************/
   /* *** reset data input fld attr.s as orig.ly defined      ****/
   /* ************************************************************/

  SLWIDX01 = 1;
  while (SLWIDX01 <= 36)
    set SL0KM110.SL0KMADJ[SLWIDX01] initialAttributes;
    SLWIDX01 = SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0KM110.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0KM110.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15)
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0KSH1(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "120I";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

end // end SL0K120

// converse & control data entry
Function SL0K140()
   /* ************************************************************/
   /* *** setup non-default (data) cursor position, if any    ****/
   /* *** note: error cursor position has precedence          ****/
   /* ************************************************************/

  if (SLWREC.SLWERRSW == "N")

    if (SL0KW11.SL0KWACF == "N")
      set SL0KM110.SL0KMTOT cursor;
    else
      set SL0KM110.XARCD cursor;
    end

    if (SL0KM110.XWHCD != "02" /* Not Greenland*/
     && SL0KM110.XWHCD != "04" /* and not Memphis Footwear*/
     && SL0KM110.XWHCD != "07" /* and not Wilsonville*/
     && SL0KM110.XWHCD != "51" /* and not Memphis Apparel*/
     && SL0KM110.XWHCD != "25" /* and not NSG*/
     && SL0KM110.XWHCD != "42") /* and not Canada*/
      set SL0KM110.SL0KMTL1 skip, invisible;
      set SL0KM110.SY1UNPCS skip, invisible, modified;
    end

  end

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0KM110.XXXERRID = SLWREC.XXXERRID;

  converse SL0KM110 ;

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    XSSLSPQ(); /* <=== purge tsq*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    XSSLSPQ(); /* <=== purge tsq*/
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "140A";
    SLWREC.SLWMSGNO = 0;
    SL0KM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    XSSLSPQ(); /* <=== purge tsq*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSSLSPQ(); /* <=== purge tsq*/
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "140C";
    SLWREC.SLWMSGNO = 0;
    SL0KM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    XSSLSPQ(); /* <=== purge tsq*/
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "140D";
    SLWREC.SLWMSGNO = 0;
    SL0KM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0KM110.CATOAP > " ")
    COMMAREA.CATOAP = SL0KM110.CATOAP;
    COMMAREA.CAITEM = SL0KM110.CAITEM;
    XSSLSPQ(); /* <=== purge tsq*/
    XSEXIT();
    SL0KST1(); /* <=== reset scrn*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "140E";
    SLWREC.SLWMSGNO = 0;
    SL0KM110.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0KM110.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0KM110.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "140 ";
  set SL0KM110.CATOAP initialAttributes;
  set SL0KM110.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set SL0KM110.XWHCD initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0KM110.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "140F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0KM110.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do key & data entry edits & process inputs****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0KSB1(); /* <=== same key edits*/
    if (SLWREC.SLWSKYSW == "N") /* <=== if key has changed*/
      SLWREC.SLWSEXSW = "N"; /* <=== special exit switch*/
      SLWREC.SLWFTMSW = "Y"; /* <=== first time sw*/
      SL0KSF1(); /* <=== save key values*/
      SL0KST1(); /* <=== reset screen (clear)*/
      SL0KSH1(); /* <=== enter processing*/
      SL0KW11.SL0KWACF = "N"; /* <=== area cursor flag*/
      SL0KW12.SL0KWNIN = "N"; /* <=== neg inv net flag*/
      exit stack;
    end
    SL0KSR1(); /* <=== data entry edits*/
    if (SLWREC.SLWERRSW == "Y")
      SL0KW11.SL0KWACF = "N"; /* <=== area cursor flag*/
      exit stack;
    end
    SL0KW04.SL0KWSCT = 0; /* clear sizes counter*/
    SLWIDX01 = 1; /* initialize index*/
    while (SLWIDX01 <= SL0KW01.SL0KWNSZ)
      if (SL0KM110.XIFCD == "01") /* check field code*/
        SL0KW04.SL0KWSW1 = SL0KW01.SL6ONHND[SLWIDX01];
      end
      if (SL0KM110.XIFCD == "02") /* check field code*/
        SL0KW04.SL0KWSW1 = SL0KW01.SL6PKRSV[SLWIDX01];
      end
      if (SL0KM110.XIFCD == "04") /* check field code*/
        SL0KW04.SL0KWSW1 = SL0KW01.SL6STASD[SLWIDX01];
      end
      SL0KW04.SL0KWSW2 = SL0KM110.SL0KMADJ[SLWIDX01];
      SL0KW04.SL0KWSW3 = SL0KW04.SL0KWSW1 + SL0KW04.SL0KWSW2;
      if (SL0KW04.SL0KWSW3 != 0)
        SL0KW04.SL0KWSCT = SL0KW04.SL0KWSCT + 1;
      end
      SLWIDX01 = SLWIDX01 + 1; /* incr index*/
    end /* end-while*/
    if (SL0KW01.SL0KWISZ != 0) /* invalid sizes?*/
      if (SLWIDX01 <= 40)
        SL0KW04.SL0KWSCT = SL0KW04.SL0KWSCT + 1; /* incr size counter*/
      end
    end
    if (SL5REC.SL5MPDFL == "N") /* single-sku location?*/
      if (SL0KW04.SL0KWSCT > 1) /* multiple sizes found*/
        SLWREC.SLWMSGNO = 0423; /* single-sku error msg*/
        SLWREC.SLWERRSW = "Y"; /* set error switch*/
        SLWREC.XXXLOCID = "140G"; /* edit location*/
        set SL0KM110.SL5LOCTN cursor, bold; /* hilight field*/
      end
    end
    if (SLWREC.SLWERRSW == "Y")
      exit stack;
    end
    XSX3CTM(); /* <=== get current hhmmss*/
    SL0KSU1(); /* <=== update database*/
    if (SLWREC.SLWERRSW == "Y")
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* <=== reset any updates*/
      if (SL0KW12.SL0KWNIN == "N")
        SL0KST1(); /* <=== reset screen (empty)*/
      end
      exit stack;
    end
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* <=== commit any updates*/
    SL0KSQ1(); /* <=== reset screen (clear)*/
    SLWREC.SLWMSGNO = 0020; /* <--- trans. complete msg*/
    set SL0KM110.XARCD cursor;
    SL0KW11.SL0KWACF = "Y"; /* <=== area cursor flag*/
    SLWREC.SLWSEXSW = "N"; /* <=== special exit switch*/
    SLWREC.SLWFTMSW = "Y"; /* <=== first time sw*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF12: do key & data entry edits only             ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf12)
    SL0KW11.SL0KWACF = "N"; /* <=== area cursor flag*/
    SL0KSB1(); /* <=== same key edits*/
    if (SLWREC.SLWSKYSW == "N")
      SLWREC.SLWSEXSW = "N"; /* <=== special exit switch*/
      SL0KSF1(); /* <=== save key values*/
      SL0KST1(); /* <=== reset screen (clear)*/
      SL0KSH1(); /* <=== enter processing*/
      exit stack;
    end
    SL0KSR1(); /* <=== data entry edits*/
    if (SLWREC.SLWERRSW == "Y")
      exit stack;
    end
    SLWREC.SLWMSGNO = 0026; /* <--- edits ok msg*/
    SLWIDX03 = 1;
    while (SLWIDX03 <= SL0KW01.SL0KWNSZ)
      set SL0KM110.SL0KMADJ[SLWIDX03] initialAttributes;
      SLWIDX03 = SLWIDX03 + 1;
    end
    set SL0KM110.SL0KMTOT initialAttributes;
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no code executed              ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15)
    XSSLSPQ(); /* <=== purge tsq*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "140I";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

end // end SL0K140

// one time initializations
Function SL0K210()

  if (converseVar.eventKey is pa2) /* if this proc reentered by PA2*/
    SL0KSRP(); /* reset key field hold area*/
  end

   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0KM210 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0KW02 empty; /* appl. working storage area*/

  SLWREC.XXXMAPNM = "SL0KM210";
  SLWREC.XXXTITLE = "SPECIAL PRODUCT QTY MAINTENANCE";

  SLWREC.SLWTALOC = "SL0K210 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0K2110"; /* TA0020 current map name*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* saved msg no.*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0KM210.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0KM210.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0KM210.XXXTITLE = SLWREC.XXXTITLE;
  SL0KM210.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  SL0KM210.XWHCD = COMMAREA.XWHCD;
  if (SL0KM210.XWHCD == " ")
    set SL0KM210.XWHCD cursor;
  else
    set SL0KM210.IN5TRDOC cursor;
  end

  SL0KM210.IN5TRDCD = SL0KW04.IN5TRDCD; /* use hold doc part I*/
  SL0KM210.IN5TRDOC = SL0KW04.IN5TRDOC; /* use hold doc part II*/
  SL0KM210.IN5TRSUB = SL0KW04.IN5TRSUB; /* use hold doc part III*/
  SL0KM210.XITCD = SL0KW04.XITCD; /* use hold tran type*/
  SL0KM210.IN5TRREF = SL0KW04.IN5TRREF; /* use hold xref nbr*/
  SL0KM210.XIRCD = SL0KW04.XIRCD; /* use hold reason code*/
  SL0KM210.XGPCD = SL0KW04.XGPCD; /* use hold gpc*/
  SL0KM210.SY1STNBR = SL0KW04.SY1STNBR; /* use hold style*/
  SL0KM210.SY2CLRID = SL0KW04.SY2CLRID; /* use hold color*/
  SL0KM210.XDMCD = SL0KW04.XDMCD; /* use hold dim*/
  SL0KM210.XQACD = SL0KW04.XQACD; /* use hold qual*/
  SL0KM210.PC2INSEG = SL0KW04.PC2INSEG; /* use hold iseg*/
  SL0KM210.XEGCD = SL0KW04.XEGCD; /* use hold edif*/
  SL0KM210.XSLCD = SL0KW04.XSLCD; /* use hold slc*/
  SL0KM210.XPGCD = SL0KW04.XPGCD; /* use hold pg*/
  SL0KM210.XUMCD = SL0KW04.XUMCD; /* use hold uom*/
  SL0KM210.XOWCD = SL0KW04.XOWCD; /* use hold xow*/
  SL0KM210.XARCD = SL0KW04.XARCD; /* use hold area*/
  SL0KM210.SL4ZONE = SL0KW04.SL4ZONE; /* use hold zone*/
  SL0KM210.SL5LOCTN = SL0KW04.SL5LOCTN; /* use hold location*/
  SL0KM210.SL0KMUT1 = SL0KW04.SY1UNPCS; /* use hold u/c*/
  SL0KM210.SL0KMUT2 = -1; /* initialize units per carton 2*/

  SL0KM210.SL0KWCLR = "00";
  SL0KM210.SL0KWDIM = "00";
  SL0KM210.SL0KWQLT = "01";
  SL0KM210.SL0KWISG = "000";
  SL0KM210.SL0KWXEG = "000";
  SL0KM210.SL0KWSLC = "000";
  SL0KM210.SL0KWPKG = "00";
   /* ***** code changed by Grant Gilray 3/16/88 ******/
   /* MOVE '01' TO SL0KM210.SL0KWUOM;*/
  SL0KM210.SL0KWUOM = "  ";
   /* *************************************************/
  SL0KM210.SL0KWOWN = "00";

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

   /* DLVRUSA STARTS - SAIRAM-SAPPO*/
   /* MOVE 41 TO SL0KWTQ.SL0KWLEN;      /* <=== length of tsq rec*/
  SL0KWTQ.SL0KWLEN = 51; /* <=== length of tsq rec*/
   /* DLVRUSA STARTS - SAIRAM-SAPPO*/

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/

end // end SL0K210

// converse & control key entry
Function SL0K220()
   /* ************************************************************/
   /* *** protect (askip) data fields (if any)                ****/
   /* *** note: cursor is set if error or is map's default    ****/
   /* ************************************************************/

  SLWREC.SLWFTMSW = "Y"; /* <=== first time sw*/
  SL0KW23.SL0KWNIN = "N"; /* <=== neg inv net flag*/

  if (SL0KM210.XWHCD != "02" /* Not Greenland*/
   && SL0KM210.XWHCD != "04" /* and not Memphis Footwear*/
   && SL0KM210.XWHCD != "07" /* and not Wilsonville*/
   && SL0KM210.XWHCD != "51" /* and not Memphis Apparel*/
   && SL0KM210.XWHCD != "25" /* and not NSG*/
   && SL0KM210.XWHCD != "42") /* and not Canada*/
    set SL0KM210.SL0KMTL1 skip, invisible;
    set SL0KM210.SL0KMUT1 skip, invisible, modified;
    set SL0KM210.SL0KMTL2 skip, invisible;
    set SL0KM210.SL0KMUT2 skip, invisible, modified;
  end

  set SL0KM210.SL0KMTOT skip, invisible;

  SLWIDX01 = 1;
  while (SLWIDX01 <= 40)
    set SL0KM210.SL0KMQTY[SLWIDX01] skip, invisible;
    SLWIDX01 = SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0KM210.XXXERRID = SLWREC.XXXERRID;

  converse SL0KM210 ;

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220A";
    SLWREC.SLWMSGNO = 0;
    SL0KM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220C";
    SLWREC.SLWMSGNO = 0;
    SL0KM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220D";
    SLWREC.SLWMSGNO = 0;
    SL0KM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0KM210.CATOAP > " ")
    COMMAREA.CATOAP = SL0KM210.CATOAP;
    COMMAREA.CAITEM = SL0KM210.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220E";
    SLWREC.SLWMSGNO = 0;
    SL0KM210.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0KM210.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0KM210.VAGen_EZEMSG = " ";
  set SL0KM210.CATOAP initialAttributes;
  set SL0KM210.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset key input fld attr.s as orig.ly defined       ****/
   /* ************************************************************/

  set SL0KM210.XWHCD initialAttributes;
  set SL0KM210.IN5TRDCD initialAttributes;
  set SL0KM210.IN5TRDOC initialAttributes;
  set SL0KM210.IN5TRSUB initialAttributes;
  set SL0KM210.XITCD initialAttributes;
  set SL0KM210.IN5TRREF initialAttributes;
  set SL0KM210.XIRCD initialAttributes;
  set SL0KM210.XGPCD initialAttributes;
  set SL0KM210.SY1STNBR initialAttributes;
  set SL0KM210.SY2CLRID initialAttributes;
  set SL0KM210.XDMCD initialAttributes;
  set SL0KM210.XQACD initialAttributes;
  set SL0KM210.PC2INSEG initialAttributes;
  set SL0KM210.XEGCD initialAttributes;
  set SL0KM210.XSLCD initialAttributes;
  set SL0KM210.XPGCD initialAttributes;
  set SL0KM210.XUMCD initialAttributes;
  set SL0KM210.XOWCD initialAttributes;
  set SL0KM210.SL0KMTL1 initialAttributes;
  set SL0KM210.SL0KMUT1 initialAttributes;
  set SL0KM210.SL0KWGPC initialAttributes;
  set SL0KM210.SL0KWSTY initialAttributes;
  set SL0KM210.SL0KWCLR initialAttributes;
  set SL0KM210.SL0KWDIM initialAttributes;
  set SL0KM210.SL0KWQLT initialAttributes;
  set SL0KM210.SL0KWISG initialAttributes;
  set SL0KM210.SL0KWXEG initialAttributes;
  set SL0KM210.SL0KWSLC initialAttributes;
  set SL0KM210.SL0KWPKG initialAttributes;
  set SL0KM210.SL0KWUOM initialAttributes;
  set SL0KM210.SL0KWOWN initialAttributes;
  set SL0KM210.SL0KMTL2 initialAttributes;
  set SL0KM210.SL0KMUT2 initialAttributes;
  set SL0KM210.XARCD initialAttributes;
  set SL0KM210.SL4ZONE initialAttributes;
  set SL0KM210.SL5LOCTN initialAttributes;
  set SL0KM210.SL0KMNET initialAttributes;
  set SL0KM210.SL0KMTOT initialAttributes;

   /* ************************************************************/
   /* *** reset data input fld attr.s as orig.ly defined      ****/
   /* ************************************************************/

  SLWIDX01 = 1;
  while (SLWIDX01 <= 40)
    set SL0KM210.SL0KMQTY[SLWIDX01] initialAttributes;
    SLWIDX01 = SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0KM210.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0KM210.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15)
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0KSH2(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "220I";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

end // end SL0K220

// converse & control data entry
Function SL0K240()
   /* ************************************************************/
   /* *** setup non-default (data) cursor position, if any    ****/
   /* *** note: error cursor position has precedence          ****/
   /* *** also set up net adjustment fields if required       ****/
   /* ************************************************************/

  if (SLWREC.SLWERRSW == "N")

    if (SL5REC.SL5MPDFL == "N") /* Single SKU location*/
      set SL0KM210.SL0KMTOT cursor, skip;
    else
      set SL0KM210.SL0KMTOT cursor;
    end

    if (SL0KW02.SL0KWNTF == "Y") /* rsrv/sas exist?*/
      if (SL5REC.SL5MPDFL == "N") /* single-sku location?*/
        SL0KM210.SL0KMNET = "NET"; /* turn flashing 'net' fld on*/
        SLWREC.SLWMSGNO = 0425; /* single-sku rsrv/sas warning*/
      else
        SL0KM210.SL0KMNET = "NET"; /* turn flashing 'net' fld on*/
        SLWREC.SLWMSGNO = 0179; /* rsrv/sas warning*/
      end
    end

    if (SL0KM210.XWHCD != "02" /* Not Greenland*/
     && SL0KM210.XWHCD != "04" /* and not Memphis Footwear*/
     && SL0KM210.XWHCD != "07" /* and not Wilsonville*/
     && SL0KM210.XWHCD != "51" /* and not Memphis Apparel*/
     && SL0KM210.XWHCD != "25" /* and not NSG*/
     && SL0KM210.XWHCD != "42") /* and not Canada*/
      set SL0KM210.SL0KMTL1 skip, invisible;
      set SL0KM210.SL0KMUT1 skip, invisible, modified;
      set SL0KM210.SL0KMTL2 skip, invisible;
      set SL0KM210.SL0KMUT2 skip, invisible, modified;
    end

  end

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0KM210.XXXERRID = SLWREC.XXXERRID;

  converse SL0KM210 ;

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "240A";
    SLWREC.SLWMSGNO = 0;
    SL0KM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "240C";
    SLWREC.SLWMSGNO = 0;
    SL0KM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "240D";
    SLWREC.SLWMSGNO = 0;
    SL0KM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0KM210.CATOAP > " ")
    COMMAREA.CATOAP = SL0KM210.CATOAP;
    COMMAREA.CAITEM = SL0KM210.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "240E";
    SLWREC.SLWMSGNO = 0;
    SL0KM210.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0KM210.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0KM210.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "240 ";
  set SL0KM210.CATOAP initialAttributes;
  set SL0KM210.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set SL0KM210.XWHCD initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0KM210.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "240F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0KM210.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do key & data entry edits & process inputs****/
   /* ************************************************************/

  if (converseVar.eventKey is enter) /* <=== process inputs detected*/
    SL0KSB2(); /* <=== same key edits*/
    if (SLWREC.SLWSKYSW == "N")
      SLWREC.SLWFTMSW = "Y"; /* <=== first time switch*/
      SL0KSF2(); /* <=== save key values*/
      SL0KST2(); /* <=== reset screen (clear)*/
      SL0KSH2(); /* <=== enter processing*/
      SL0KW23.SL0KWNIN = "N"; /* <=== neg inv net flag*/
      exit stack;
    end
    SL0KSR2(); /* <=== data entry edits*/
    if (SLWREC.SLWERRSW == "Y")
      exit stack;
    end
    SL0KW04.SL0KWSCT = 0; /* clear sizes counter*/
    SLWIDX01 = 1; /* initialize idx*/
    while (SLWIDX01 <= SL0KW02.SL0KWNSZ)
      if (SL0KW02.SL0KWNTF == "N") /* adj by onhand qtys*/
        if (SL0KW02.SL6ONHND[SLWIDX01] != 0) /* sz info found*/
          SL0KW04.SL0KWSCT = SL0KW04.SL0KWSCT + 1;
        end
      else
        if (SL0KW02.SL0KWSNT[SLWIDX01] != 0) /* sz info found*/
          SL0KW04.SL0KWSCT = SL0KW04.SL0KWSCT + 1;
        end
      end
      SLWIDX01 = SLWIDX01 + 1;
    end
    if (SL0KW02.SL0KWISZ != 0)
      if (SLWIDX01 <= 40)
        SL0KW04.SL0KWSCT = SL0KW04.SL0KWSCT + 1;
      end
    end
    if (SL5REC.SL5MPDFL == "N") /* single-sku location?*/
      if (SL0KW04.SL0KWSCT > 1) /* multiple sizes found?*/
        SLWREC.XXXLOCID = "240G"; /* edit location*/
        SLWREC.SLWMSGNO = 0423; /* single-sku error msg*/
        SLWREC.SLWERRSW = "Y"; /* set error switch*/
        set SL0KM210.SL5LOCTN cursor, bold;
      else
        if (SL0KW04.SL0KWSCT == 1) /* only one size bucket?*/
          if (SL0KW02.SL0KWISZ != 0) /* invalid size bucket?*/
            SLWREC.XXXLOCID = "240 "; /* edit location*/
            SLWREC.SLWMSGNO = 0426; /* invalid size error msg*/
            SLWREC.SLWERRSW = "Y"; /* set error switch*/
          end
        end
      end
    end
    if (SLWREC.SLWERRSW == "Y")
      exit stack;
    end
    if (SL5REC.SL5MPDFL == "N") /* single-sku location?*/
      if (SL0KW02.SL0KWNTF == "Y") /* sas or rsrv found?*/
        SLWREC.XXXLOCID = "240H"; /* edit location*/
        SLWREC.SLWMSGNO = 0424; /* single-sku/rsrv/sas error msg*/
        SLWREC.SLWERRSW = "Y"; /* set error switch*/
        set SL0KM210.SL5LOCTN cursor, bold;
      end
    end
    if (SLWREC.SLWERRSW == "Y")
      exit stack;
    end
    XSX3CTM(); /* <=== get current hhmmss*/
    SL0KSU2(); /* <=== update database*/
    if (SLWREC.SLWERRSW == "Y")
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* <=== reset any updates*/
      if (SL0KW23.SL0KWNIN == "N") /* <=== neg inv net flag*/
        SL0KST2(); /* <=== reset screen (empty)*/
      end
      exit stack;
    end
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* <=== commit any updates*/
    SL0KSQ2(); /* <=== reset screen (clear)*/
    SLWREC.SLWMSGNO = 0020; /* <--- trans. complete msg*/
    SLWREC.SLWFTMSW = "Y"; /* <=== first time switch*/
    set SL0KM210.XARCD cursor;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF12: do key & data entry edits only             ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf12)
    SL0KSB2(); /* <=== same key edits*/
    if (SLWREC.SLWSKYSW == "N")
      SL0KSF2(); /* <=== save key values*/
      SL0KST2(); /* <=== reset screen (clear)*/
      SL0KSH2(); /* <=== enter processing*/
      exit stack;
    end
    SL0KSR2(); /* <=== data entry edits*/
    if (SLWREC.SLWERRSW == "Y")
      exit stack;
    end
    SLWREC.SLWMSGNO = 0026; /* <--- edits ok msg*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no code executed              ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15)
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "240I";
  SLWREC.SLWMSGNO = 0004; /* <--- invalid pfkey msg*/

end // end SL0K240

// one time initializations
Function SL0K310()

  if (converseVar.eventKey is pa2) /* if this proc reentered by PA2*/
    SL0KSRP(); /* reset key field hold area*/
  end

   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0KM310 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0KW03 empty; /* appl. working storage area*/

  SLWREC.XXXMAPNM = "SL0KM310";
  SLWREC.XXXTITLE = "SPECIAL PRODUCT KEY MAINTENANCE";

  SLWREC.SLWTALOC = "SL0K310 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0KM310"; /* TA0020 current map name*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* saved msg no.*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0KM310.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0KM310.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0KM310.XXXTITLE = SLWREC.XXXTITLE;
  SL0KM310.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  SL0KM310.XWHCD = COMMAREA.XWHCD;
  if (SL0KM310.XWHCD == " ")
    set SL0KM310.XWHCD cursor;
  else
    set SL0KM310.IN5TRDOC cursor;
  end

  SL0KM310.IN5TRDCD = SL0KW04.IN5TRDCD; /* use hold doc part I*/
  SL0KM310.IN5TRDOC = SL0KW04.IN5TRDOC; /* use hold doc part II*/
  SL0KM310.IN5TRSUB = SL0KW04.IN5TRSUB; /* use hold doc part III*/
  SL0KM310.XITCD = SL0KW04.XITCD; /* use hold tran type*/
  SL0KM310.IN5TRREF = SL0KW04.IN5TRREF; /* use hold xref nbr*/
  SL0KM310.XIRCD = SL0KW04.XIRCD; /* use hold reason*/
  SL0KM310.XGPCD = SL0KW04.XGPCD; /* use hold gpc*/
  SL0KM310.SY1STNBR = SL0KW04.SY1STNBR; /* use hold style*/
  SL0KM310.SY2CLRID = SL0KW04.SY2CLRID; /* use hold color*/
  SL0KM310.XDMCD = SL0KW04.XDMCD; /* use hold dim*/
  SL0KM310.XQACD = SL0KW04.XQACD; /* use hold qual*/
  SL0KM310.PC2INSEG = SL0KW04.PC2INSEG; /* use hold iseg*/
  SL0KM310.XEGCD = SL0KW04.XEGCD; /* use hold edif*/
  SL0KM310.XSLCD = SL0KW04.XSLCD; /* use hold slc*/
  SL0KM310.XPGCD = SL0KW04.XPGCD; /* use hold pg*/
  SL0KM310.XUMCD = SL0KW04.XUMCD; /* use hold uom*/
  SL0KM310.XOWCD = SL0KW04.XOWCD; /* use hold own group*/

  SL0KM310.SL0KWCLR = "00";
  SL0KM310.SL0KWDIM = "00";
  SL0KM310.SL0KWQLT = "01";
  SL0KM310.SL0KWISG = "000";
  SL0KM310.SL0KWXEG = "000";
  SL0KM310.SL0KWSLC = "000";
  SL0KM310.SL0KWPKG = "00";
   /* ***** code changed by Grant Gilray 3/16/88 ******/
   /* MOVE '01' TO SL0KM310.SL0KWUOM;*/
  SL0KM310.SL0KWUOM = "  ";
   /* ******** end of code changed on 3/16/88 *********/
  SL0KM310.SL0KWOWN = "00";

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  SLWREC.SLWFTMSW = "Y";
  SL0KW33.SL0KWNIN = "N"; /* <=== neg inv net flag*/

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/

end // end SL0K310

// converse & control key entry
Function SL0K320()

   /* ************************************************************/
   /* *** protect (askip) data fields (if any)                ****/
   /* *** note: cursor is set if error or is map's default    ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0KM310.XXXERRID = SLWREC.XXXERRID;

  converse SL0KM310 ;

   /* ************************************************************/
   /* *** commented EZECLOS code to be used ONLY in test      ****/
   /* *** in order to end application without canceling it    ****/
   /* ************************************************************/

   /* SLPF9;*/

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320A";
    SLWREC.SLWMSGNO = 0;
    SL0KM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320C";
    SLWREC.SLWMSGNO = 0;
    SL0KM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320D";
    SLWREC.SLWMSGNO = 0;
    SL0KM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0KM310.CATOAP > " ")
    COMMAREA.CATOAP = SL0KM310.CATOAP;
    COMMAREA.CAITEM = SL0KM310.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320E";
    SLWREC.SLWMSGNO = 0;
    SL0KM310.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0KM310.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0KM310.VAGen_EZEMSG = " ";
  set SL0KM310.CATOAP initialAttributes;
  set SL0KM310.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset key input fld attr.s as orig.ly defined       ****/
   /* ************************************************************/

  set SL0KM310.XWHCD initialAttributes;
  set SL0KM310.IN5TRDCD initialAttributes;
  set SL0KM310.IN5TRDOC initialAttributes;
  set SL0KM310.IN5TRSUB initialAttributes;
  set SL0KM310.XITCD initialAttributes;
  set SL0KM310.IN5TRREF initialAttributes;
  set SL0KM310.XIRCD initialAttributes;
  set SL0KM310.XGPCD initialAttributes;
  set SL0KM310.SY1STNBR initialAttributes;
  set SL0KM310.SY2CLRID initialAttributes;
  set SL0KM310.XDMCD initialAttributes;
  set SL0KM310.XQACD initialAttributes;
  set SL0KM310.PC2INSEG initialAttributes;
  set SL0KM310.XEGCD initialAttributes;
  set SL0KM310.XSLCD initialAttributes;
  set SL0KM310.XPGCD initialAttributes;
  set SL0KM310.XUMCD initialAttributes;
  set SL0KM310.XOWCD initialAttributes;

  set SL0KM310.SL0KWGPC initialAttributes;
  set SL0KM310.SL0KWSTY initialAttributes;
  set SL0KM310.SL0KWCLR initialAttributes;
  set SL0KM310.SL0KWDIM initialAttributes;
  set SL0KM310.SL0KMSYN initialAttributes;
  set SL0KM310.SL0KMCLI initialAttributes;
  set SL0KM310.SL0KWQLT initialAttributes;
  set SL0KM310.SL0KWISG initialAttributes;
  set SL0KM310.SL0KWXEG initialAttributes;
  set SL0KM310.SL0KWSLC initialAttributes;
  set SL0KM310.SL0KWPKG initialAttributes;
  set SL0KM310.SL0KWUOM initialAttributes;
  set SL0KM310.SL0KWOWN initialAttributes;

   /* ************************************************************/
   /* *** reset data input fld attr.s as orig.ly defined      ****/
   /* ************************************************************/

  SLWIDX01 = 1;
  while (SLWIDX01 <= 36)
    set SL0KM310.XARCD[SLWIDX01] initialAttributes;
    set SL0KM310.SL4ZONE[SLWIDX01] initialAttributes;
    set SL0KM310.SL5LOCTN[SLWIDX01] initialAttributes;
    set SL0KM310.SL2CASE[SLWIDX01] initialAttributes;
    SLWIDX01 = SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0KM310.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0KM310.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pf keys:                    ****/
   /* *** xsexit to the specified application   or            ****/
   /* *** the flow section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15)
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0KS7F();
                                   /* <=== check for current product change*/
    SL0KSH3(); /* <=== enter processing*/
    if (SLWREC.SLWERRSW == "Y")
      exit stack;
    end
    XSX3CTM(); /* <=== get current hhmmss*/
    SL0KSU3(); /* <=== update database*/
    if (SLWREC.SLWERRSW == "Y")
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* <=== reset any updates*/
      if (SL0KW33.SL0KWNIN == "N") /* <=== neg inv net flag*/
        SL0KST3(); /* <=== reset screen (empty)*/
      end
      exit stack;
    end
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* <=== commit any updates*/
    SL0KSQ3(); /* <=== reset screen (clear)*/
    SLWREC.SLWMSGNO = 0020; /* <--- trans. complete msg*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF12:  enter processing only                     ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf12)
    SL0KSH3(); /* <=== enter processing*/
    if (SLWREC.SLWERRSW == "Y")
      exit stack;
    end
    SLWREC.SLWMSGNO = 0026; /* <=== edits ok msg*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "320I";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/

end // end SL0K320

// close : po item 05    : C0
Function SL0KS-C0-VPOITM05()

   /* ************************************************************/
   /* *** close select set of:  DPRODC.VPOITM05               ****/
   /* *** using the std module:  VPOITM05                     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  try
    call "VPOITM05" ("C0", SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end

   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "SL0KPOC0";
  TA1REC.TA1LOCAT[1] = "VPOITM05";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DPRODC  ";
  TA1REC.TA1TBLVU = "VPOITM05";
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS-C0-VPOITM05

// select from dprodc.vpoitm05
Function SL0KS-CHK-VPOITM05()
   /* ************************************************************/
   /* *** validate data from dprodc.vpoitm05 table if the     ****/
   /* *** goal po or the sap po nbr or both are entered       ****/
   /* ************************************************************/

  if (SL0KM110.PC3PONBR == -1
   || SL0KM110.PC3PONBR == 0)
    SL0KW01.SL0KWSPN = SL0KM110.PC3PONBR;
  end

  if (SL0KM110.PC-SAP-PO-NBR == "*"
   || SL0KM110.PC-SAP-PO-NBR == " ")
    SL0KW01.SL0KWSSPN = SL0KM110.PC-SAP-PO-NBR;
  end

  if (SL0KM110.PC3PONBR != -1
   && SL0KM110.PC3PONBR != 0
   && SL0KM110.PC-SAP-PO-NBR != "*"
   && SL0KM110.PC-SAP-PO-NBR != " ")
    /* MOVE SL0KM110.XGPCD TO PC3REC.XGPCD;*/
    /* MOVE SL0KM110.PC3PONBR TO PC3REC.PC3PONBR;*/
    VPOITM05.XGPCD = SL0KM110.XGPCD;
    VPOITM05.PC3PONBR = SL0KM110.PC3PONBR;
    VPOITM05.PC-SAP-PO-NBR = SL0KM110.PC-SAP-PO-NBR;
    VPOITM05.XWHCD = "*";
    SL0KS-S0-VPOITM05(); /* calls po item05 by gpc,po and sap po*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SL0KW01.SL0KWSPN = VPOITM05.PC3PONBR;
      SL0KW01.SL0KWSSPN = VPOITM05.PC-SAP-PO-NBR;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* <=== for not found condition*/
        set SL0KM110.PC3PONBR cursor, bold;
        set SL0KM110.PC-SAP-PO-NBR bold;
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SPO1";
        SLWREC.SLWMSGNO = 0486; /* <--- po/sap po combo invalid*/
        SL0KS-C0-VPOITM05(); /* close po item05*/
        return;
      end
      if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
        SLWREC.SLWSKYSW = "N";
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SPO2";
        SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
        SL0KS-C0-VPOITM05(); /* close po item05*/
        return;
      end
      SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
      SLWREC.XXXLOCID = "SPO3";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      SL0KS-C0-VPOITM05(); /* close po item05*/
      return;
    end
    SL0KS-C0-VPOITM05(); /* close po item05*/
  end
  if (SL0KM110.PC3PONBR != -1
   && SL0KM110.PC3PONBR != 0)
    if (SL0KM110.PC-SAP-PO-NBR == "*"
     || SL0KM110.PC-SAP-PO-NBR == " ")
      /* MOVE SL0KM110.XGPCD TO PC3REC.XGPCD;*/
      /* MOVE SL0KM110.PC3PONBR TO PC3REC.PC3PONBR;*/
      VPOITM05.XGPCD = SL0KM110.XGPCD;
      VPOITM05.PC3PONBR = SL0KM110.PC3PONBR;
      VPOITM05.PC-SAP-PO-NBR = "*";
      VPOITM05.XWHCD = SL0KM110.XWHCD;
      SL0KS-S0-VPOITM05(); /* calls po item05 by gpc and po*/
      if (SQLCA.VAGen_SQLCODE == 0)
        SL0KW01.SL0KWSPN = VPOITM05.PC3PONBR;
        SL0KW01.SL0KWSSPN = VPOITM05.PC-SAP-PO-NBR;
        SL0KM110.PC-SAP-PO-NBR = VPOITM05.PC-SAP-PO-NBR;
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* <=== for not found condition*/
          SL0KS-C0-VPOITM05(); /* close po item05*/
          VPOITM05.XWHCD = "*";
          SL0KS-S0-VPOITM05(); /* calls po item05 by gpc and po*/
          if (SQLCA.VAGen_SQLCODE == 0)
            SL0KW01.SL0KWSPN = VPOITM05.PC3PONBR;
            SL0KW01.SL0KWSSPN = " ";
            SL0KM110.PC-SAP-PO-NBR = " ";
          else
            if (SQLCA.VAGen_SQLCODE == 100) /* <=== for not found condition*/
              set SL0KM110.PC3PONBR cursor, bold;
              SLWREC.SLWERRSW = "Y";
              SLWREC.XXXLOCID = "SPO4";
              SLWREC.SLWMSGNO = 0489; /* <--- po not in vpoitm05*/
              SL0KS-C0-VPOITM05(); /* close po item05*/
              return;
            end
          end
        end
        if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
          SLWREC.SLWSKYSW = "N";
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SPO5";
          SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
          SL0KS-C0-VPOITM05(); /* close po item05*/
          return;
        end
        if (SQLCA.VAGen_SQLCODE != 0
         && SQLCA.VAGen_SQLCODE != 100
         && SQLCA.VAGen_SQLCODE != -911) /* <=== for any initial db access*/
          SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
          SLWREC.XXXLOCID = "SPO6";
          SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
          SL0KS-C0-VPOITM05(); /* close po item05*/
          return;
        end
      end
      SL0KS-C0-VPOITM05(); /* close po item05*/
    end
  end
  if (SL0KM110.PC-SAP-PO-NBR != "*"
   && SL0KM110.PC-SAP-PO-NBR != " ")
    if (SL0KM110.PC3PONBR == -1
     || SL0KM110.PC3PONBR == 0)
      /* MOVE SL0KM110.XGPCD TO PC3REC.XGPCD;*/
      /* MOVE SL0KM110.PC3PONBR TO PC3REC.PC3PONBR;*/
      VPOITM05.XGPCD = SL0KM110.XGPCD;
      VPOITM05.PC3PONBR = -1;
      VPOITM05.PC-SAP-PO-NBR = SL0KM110.PC-SAP-PO-NBR;
      VPOITM05.XWHCD = "*";
      SL0KS-S0-VPOITM05(); /* calls po item05 by gpc and po*/
      if (SQLCA.VAGen_SQLCODE == 0)
        SL0KW01.SL0KWSPN = VPOITM05.PC3PONBR;
        SL0KM110.PC3PONBR = VPOITM05.PC3PONBR;
        SL0KW01.SL0KWSSPN = VPOITM05.PC-SAP-PO-NBR;
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* <=== for not found condition*/
          SL0KS-C0-VPOITM05(); /* close po item05*/
          set SL0KM110.PC-SAP-PO-NBR cursor, bold;
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SPO7";
          SLWREC.SLWMSGNO = 0490; /* <--- sap po not in vpoitm05*/
          SL0KS-C0-VPOITM05(); /* close po item05*/
          return;
        end
        if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
          SLWREC.SLWSKYSW = "N";
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SPO8";
          SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
          SL0KS-C0-VPOITM05(); /* close po item05*/
          return;
        end
        if (SQLCA.VAGen_SQLCODE != 0
         && SQLCA.VAGen_SQLCODE != 100
         && SQLCA.VAGen_SQLCODE != -911) /* <=== for any initial db access*/
          SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
          SLWREC.XXXLOCID = "SPO9";
          SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
          SL0KS-C0-VPOITM05(); /* close po item05*/
          return;
        end
      end
      SL0KS-C0-VPOITM05(); /* close po item05*/
    end
  end
end // end SL0KS-CHK-VPOITM05

// select from dstloc.vsyloc02
Function SL0KS-CHK-VSYLOC02()
   /* ************************************************************/
   /* *** chk dstloc.vsyloc02 table for po/sap po # when      ****/
   /* *** goal po or the sap po nbr or both are entered       ****/
   /* ************************************************************/

  SL0KW-PO-IN-SYLOC = "N"; /* <=== init po found in syloc02 flag*/

  if (SL0KM110.PC3PONBR == -1
   && SL0KM110.PC-SAP-PO-NBR == "*")
    return;
  end

  SL0KW01.SL0KWPCN = SL0KM110.PC3PONBR; /* <=== po nbr*/
  SL0KW01.SL0KWSPCN = SL0KM110.PC-SAP-PO-NBR; /* <=== sap po nbr*/

  if (SL0KM110.PC3PONBR == -1
   || SL0KM110.PC3PONBR == 0)
    SL0KW01.SL0KWSPN = SL0KM110.PC3PONBR;
  end

  if (SL0KM110.PC-SAP-PO-NBR == "*"
   || SL0KM110.PC-SAP-PO-NBR == " ")
    SL0KW01.SL0KWSSPN = SL0KM110.PC-SAP-PO-NBR;
  end

   /* ************************************************************/
   /* *** pugre the tsq                                       ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** setup the selection criteria                        ****/
   /* ************************************************************/

  set VSYLOC02 empty;
  VSYLOC02.XWHCD = SL0KM110.XWHCD;
  VSYLOC02.XARCD = SL0KM110.XARCD;
  VSYLOC02.SL4ZONE = SL0KM110.SL4ZONE;
  VSYLOC02.SL5LOCTN = SL0KM110.SL5LOCTN;
  VSYLOC02.XGPCD = SL0KM110.XGPCD;
  VSYLOC02.SY1STNBR = SL0KM110.SY1STNBR;
  VSYLOC02.SY2CLRID = SL0KM110.SY2CLRID;
  VSYLOC02.XDMCD = SL0KM110.XDMCD;
  VSYLOC02.XQACD = SL0KM110.XQACD;
  VSYLOC02.XOWCD = SL0KM110.XOWCD;
  VSYLOC02.PC2INSEG = SL0KM110.PC2INSEG;
  VSYLOC02.XEGCD = SL0KM110.XEGCD;
  VSYLOC02.XPGCD = SL0KM110.XPGCD;
  VSYLOC02.XUMCD = SL0KM110.XUMCD;
  VSYLOC02.XSLCD = SL0KM110.XSLCD;
  VSYLOC02.SY1UNPCS = SL0KM110.SY1UNPCS;
  VSYLOC02.SY5SZID = -1;
  VSYLOC02.SL2PALET = "*";
  VSYLOC02.SL2CASE = SL0KM110.SL2CASE;
  VSYLOC02.SL1CRTDT = -1;

  VSYLOC02.PC3PONBR = SL0KW01.SL0KWSPN;
  VSYLOC02.PC-SAP-PO-NBR = SL0KW01.SL0KWSSPN;

    /* ************************************************************/
    /* *** setup application specific TA1REC fields in case    ****/
    /* *** TA0020 is used for a severe DB error in this sgrp   ****/
    /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KSYCK";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  if (SL0KM110.PC3PONBR != -1
   && SL0KM110.PC-SAP-PO-NBR != "*")
    VSYLOC02.PC3PONBR = SL0KM110.PC3PONBR;
    VSYLOC02.PC-SAP-PO-NBR = SL0KM110.PC-SAP-PO-NBR;
    XSSLS-S5-VSYLOC02(); /* calls syloc02 with po and sap po*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SL0KW01.SL0KWSPN = VSYLOC02.PC3PONBR;
      SL0KW01.SL0KWSSPN = VSYLOC02.PC-SAP-PO-NBR;
      SL0KW-PO-IN-SYLOC = "Y"; /* <=== set po found in syloc02 flag*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* <=== for not found condition*/
        XSSLS-C5-VSYLOC02(); /* close syloc02*/
        return;
      end
      if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SYC1";
        SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
        XSSLS-C5-VSYLOC02(); /* close syloc02*/
        return;
      end
      SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
      SLWREC.XXXLOCID = "SYC2";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      XSSLS-C5-VSYLOC02(); /* close syloc02*/
      return;
    end
    XSSLS-C5-VSYLOC02(); /* close syloc02*/
  end
  if (SL0KM110.PC3PONBR != -1)
    if (SL0KM110.PC-SAP-PO-NBR == "*")
      /* OR SL0KM110.SAPPONBR EQ ' ';*/
      VSYLOC02.PC3PONBR = SL0KM110.PC3PONBR;
      VSYLOC02.PC-SAP-PO-NBR = "*";
      XSSLS-S5-VSYLOC02(); /* calls syloc02 with po*/
      if (SQLCA.VAGen_SQLCODE == 0)
        SL0KW01.SL0KWSPN = VSYLOC02.PC3PONBR;
        SL0KW01.SL0KWSSPN = VSYLOC02.PC-SAP-PO-NBR;
        SL0KM110.PC-SAP-PO-NBR = VSYLOC02.PC-SAP-PO-NBR;
        SL0KW-PO-IN-SYLOC = "Y"; /* <=== set po found in syloc02 flag*/
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* <=== for not found condition*/
          XSSLS-C5-VSYLOC02(); /* close syloc02*/
          return;
        end
        if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SYC3";
          SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
          XSSLS-C5-VSYLOC02(); /* close syloc02*/
          return;
        end
        SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
        SLWREC.XXXLOCID = "SYC4";
        SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
        XSSLS-C5-VSYLOC02(); /* close syloc02*/
        return;
      end
      XSSLS-C5-VSYLOC02(); /* close syloc02*/
    end
  end
  if (SL0KM110.PC-SAP-PO-NBR != "*")
    if (SL0KM110.PC3PONBR == -1
    ) /* OR SL0KM110.PC3PONBR EQ 0;*/
      VSYLOC02.PC3PONBR = -1;
      VSYLOC02.PC-SAP-PO-NBR = SL0KM110.PC-SAP-PO-NBR;
      XSSLS-S5-VSYLOC02(); /* calls syloc02 with sap po*/
      if (SQLCA.VAGen_SQLCODE == 0)
        SL0KW01.SL0KWSPN = VSYLOC02.PC3PONBR;
        SL0KM110.PC3PONBR = VSYLOC02.PC3PONBR;
        SL0KW01.SL0KWSSPN = VSYLOC02.PC-SAP-PO-NBR;
        SL0KW-PO-IN-SYLOC = "Y"; /* <=== set po found in syloc02 flag*/
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* <=== for not found condition*/
          XSSLS-C5-VSYLOC02(); /* close syloc02*/
          return;
        end
        if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SYC5";
          SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
          XSSLS-C5-VSYLOC02(); /* close syloc02*/
          return;
        end
        SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
        SLWREC.XXXLOCID = "SYC6";
        SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
        XSSLS-C5-VSYLOC02(); /* close syloc02*/
        return;
      end
      XSSLS-C5-VSYLOC02(); /* close syloc02*/
    end
  end
end // end SL0KS-CHK-VSYLOC02

// Format SAP Inv adj record
Function SL0KS-MOVE1-SAPIA()

   /* ************************************************************/
   /* *** This format the SAP inventory audit records         ****/
   /* *** --- product quantity maintanence                    ****/
   /* ************************************************************/

  set VSAPIA01 empty;

  VSAPIA01.XWH-WHSE-CD = SL0KM110.XWHCD;
  VSAPIA01.XGP-GPC-CD = SL0KM110.XGPCD;
  VSAPIA01.SY-STY-NBR = SL0KM110.SY1STNBR;
  VSAPIA01.SY-COLR-CD-ID = SL0KM110.SY2CLRID;
  VSAPIA01.XQA-QUAL-CD = SL0KM110.XQACD;
  VSAPIA01.XSD-SPEC-CD = SL0KM110.PC2INSEG;
  VSAPIA01.XUM-UOM-CD = SL0KM110.XUMCD;
  VSAPIA01.XIF-TRN-FLD-CD = SL0KM110.XIFCD;
  VSAPIA01.XIT-TRN-TYP-CD = SL0KM110.XITCD;
  VSAPIA01.XIR-TRN-RSN-CD = SL0KM110.XIRCD;
  if (SL0KM110.IN5TRDCD == "S"
   && SL0KM110.XIFCD == "04")
    VSAPIA01.IN-SAS-ID = SL0KM110.IN5TRDOC;
  else
    VSAPIA01.IN-SAS-ID = 0;
  end
  VSAPIA01.IN-AUD-TRN-DOC-CD = SL0KM110.IN5TRDCD;
  VSAPIA01.IN-AUD-TRN-DOC-NBR = SL0KM110.IN5TRDOC;
  VSAPIA01.IN-AUD-TRN-DOC-SUB = SL0KM110.IN5TRSUB;
  VSAPIA01.ADJ-SEQ-NBR = 0;

   /* ************************************************************/
   /* *** write size adjustments                              ****/
   /* ************************************************************/

  SLWIDX01 = 1;
  while (SLWIDX01 <= SL0KW01.SL0KWNSZ
   && SLWREC.SLWERRSW == "N")
    if (SL0KM110.SL0KMADJ[SLWIDX01] != 0)
      VSAPIA01.SY-SZ-ID-DESC = SL0KM110.SY4IDDSC[SLWIDX01];
      VSAPIA01.SL-SY-LOC-AUD-QTY = SL0KM110.SL0KMADJ[SLWIDX01];
      VSAPIA01.ADJ-SEQ-NBR = VSAPIA01.ADJ-SEQ-NBR + 1;
      SL0KS-TAREC-SAPIA();
    end
    SLWIDX01 = SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS-MOVE1-SAPIA

// Format SAP Inv adj record
Function SL0KS-MOVE2-SAPIA()

   /* ************************************************************/
   /* *** This format the SAP inventory audit records         ****/
   /* *** --- Special product quantity maintanence (current)  ****/
   /* ************************************************************/

  set VSAPIA01 empty;

  VSAPIA01.XWH-WHSE-CD = SL0KM210.XWHCD;
  VSAPIA01.XGP-GPC-CD = SL0KM210.XGPCD;
  VSAPIA01.SY-STY-NBR = SL0KM210.SY1STNBR;
  VSAPIA01.SY-COLR-CD-ID = SL0KM210.SY2CLRID;
  VSAPIA01.XQA-QUAL-CD = SL0KM210.XQACD;
  VSAPIA01.XSD-SPEC-CD = SL0KM210.PC2INSEG;
  VSAPIA01.XUM-UOM-CD = SL0KM210.XUMCD;
  VSAPIA01.XIF-TRN-FLD-CD = "01";
  VSAPIA01.XIT-TRN-TYP-CD = SL0KM210.XITCD;
  VSAPIA01.XIR-TRN-RSN-CD = SL0KM210.XIRCD;
  VSAPIA01.IN-SAS-ID = 0;
  VSAPIA01.IN-AUD-TRN-DOC-CD = SL0KM210.IN5TRDCD;
  VSAPIA01.IN-AUD-TRN-DOC-NBR = SL0KM210.IN5TRDOC;
  VSAPIA01.IN-AUD-TRN-DOC-SUB = SL0KM210.IN5TRSUB;
  VSAPIA01.ADJ-SEQ-NBR = 0;

   /* ************************************************************/
   /* *** write size adjustments                              ****/
   /* ************************************************************/

  SLWIDX01 = 1;
  while (SLWIDX01 <= SL0KW02.SL0KWNSZ
   && SLWREC.SLWERRSW == "N")
    if (SL0KM210.SL0KMQTY[SLWIDX01] != 0)
      VSAPIA01.SY-SZ-ID-DESC = SL0KM210.SY4IDDSC[SLWIDX01];
      VSAPIA01.SL-SY-LOC-AUD-QTY = SL0KM210.SL0KMQTY[SLWIDX01];
      VSAPIA01.SL-SY-LOC-AUD-QTY = VSAPIA01.SL-SY-LOC-AUD-QTY * -1;
      VSAPIA01.ADJ-SEQ-NBR = VSAPIA01.ADJ-SEQ-NBR + 1;
      SL0KS-TAREC-SAPIA();
    end
    SLWIDX01 = SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS-MOVE2-SAPIA

// Format SAP Inv adj record
Function SL0KS-MOVE3-SAPIA()

   /* ************************************************************/
   /* *** This format the SAP inventory audit records         ****/
   /* *** --- Special product quantity maintanence (new)      ****/
   /* ************************************************************/

  set VSAPIA01 empty;

  VSAPIA01.XWH-WHSE-CD = SL0KM210.XWHCD;
  VSAPIA01.XGP-GPC-CD = SL0KM210.SL0KWGPC;
  VSAPIA01.SY-STY-NBR = SL0KM210.SL0KWSTY;
  VSAPIA01.SY-COLR-CD-ID = SL0KM210.SL0KWCLR;
  VSAPIA01.XQA-QUAL-CD = SL0KM210.SL0KWQLT;
  VSAPIA01.XSD-SPEC-CD = SL0KM210.SL0KWISG;
  VSAPIA01.XUM-UOM-CD = SL0KM210.SL0KWUOM;
  VSAPIA01.XIF-TRN-FLD-CD = "01";
  VSAPIA01.XIT-TRN-TYP-CD = SL0KM210.XITCD;
  VSAPIA01.XIR-TRN-RSN-CD = SL0KM210.XIRCD;
  VSAPIA01.IN-SAS-ID = 0;
  VSAPIA01.IN-AUD-TRN-DOC-CD = SL0KM210.IN5TRDCD;
  VSAPIA01.IN-AUD-TRN-DOC-NBR = SL0KM210.IN5TRDOC;
  VSAPIA01.IN-AUD-TRN-DOC-SUB = SL0KM210.IN5TRSUB;
  VSAPIA01.ADJ-SEQ-NBR = 0;

   /* ************************************************************/
   /* *** write size adjustments                              ****/
   /* ************************************************************/

  SLWIDX01 = 1;
  while (SLWIDX01 <= SL0KW02.SL0KWNSZ
   && SLWREC.SLWERRSW == "N")
    if (SL0KM210.SL0KMQTY[SLWIDX01] != 0)
      VSAPIA01.SY-SZ-ID-DESC = SL0KM210.SY4IDDSC[SLWIDX01];
      VSAPIA01.SL-SY-LOC-AUD-QTY = SL0KM210.SL0KMQTY[SLWIDX01];
      VSAPIA01.ADJ-SEQ-NBR = VSAPIA01.ADJ-SEQ-NBR + 1;
      SL0KS-TAREC-SAPIA();
    end
    SLWIDX01 = SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS-MOVE3-SAPIA

// Format SAP Inv adj record
Function SL0KS-MOVE4-SAPIA()

   /* ************************************************************/
   /* *** This format the SAP inventory audit records         ****/
   /* *** --- Special product key maintanence (current)       ****/
   /* ************************************************************/

  set VSAPIA01 empty;

  VSAPIA01.XWH-WHSE-CD = SL0KM310.XWHCD;
  VSAPIA01.XGP-GPC-CD = SL0KM310.XGPCD;
  VSAPIA01.SY-STY-NBR = SL0KM310.SY1STNBR;
  VSAPIA01.SY-COLR-CD-ID = SL0KM310.SY2CLRID;
  VSAPIA01.XQA-QUAL-CD = SL0KM310.XQACD;
  VSAPIA01.XSD-SPEC-CD = SL0KM310.PC2INSEG;
  VSAPIA01.XUM-UOM-CD = SL0KM310.XUMCD;
  VSAPIA01.XIF-TRN-FLD-CD = "01";
  VSAPIA01.XIT-TRN-TYP-CD = SL0KM310.XITCD;
  VSAPIA01.XIR-TRN-RSN-CD = SL0KM310.XIRCD;
  VSAPIA01.IN-SAS-ID = 0;
  VSAPIA01.IN-AUD-TRN-DOC-CD = SL0KM310.IN5TRDCD;
  VSAPIA01.IN-AUD-TRN-DOC-NBR = SL0KM310.IN5TRDOC;
  VSAPIA01.IN-AUD-TRN-DOC-SUB = SL0KM310.IN5TRSUB;
  VSAPIA01.ADJ-SEQ-NBR = 0;

   /* ************************************************************/
   /* *** write size adjustments                              ****/
   /* ************************************************************/

  SLWIDX02 = 1;
  while (SLWIDX02 <= SL0KW03.SL0KWNSZ
   && SLWREC.SLWERRSW == "N")
    if (SL0KW03.SL6ONHND[SLWIDX02] != 0)
      VSAPIA01.SY-SZ-ID-DESC = SL0KW03.SY4IDDSC[SLWIDX02];
      VSAPIA01.SL-SY-LOC-AUD-QTY = SL0KW03.SL6ONHND[SLWIDX02];
      VSAPIA01.SL-SY-LOC-AUD-QTY = VSAPIA01.SL-SY-LOC-AUD-QTY * -1;
      VSAPIA01.ADJ-SEQ-NBR = VSAPIA01.ADJ-SEQ-NBR + 1;
      SL0KS-TAREC-SAPIA();
    end
    SLWIDX02 = SLWIDX02 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS-MOVE4-SAPIA

// Format SAP Inv adj record
Function SL0KS-MOVE5-SAPIA()

   /* ************************************************************/
   /* *** This format the SAP inventory audit records         ****/
   /* *** --- Special product key maintanence (new)           ****/
   /* ************************************************************/

  set VSAPIA01 empty;

  VSAPIA01.XWH-WHSE-CD = SL0KM310.XWHCD;
  VSAPIA01.XGP-GPC-CD = SL0KM310.SL0KWGPC;
  VSAPIA01.SY-STY-NBR = SL0KM310.SL0KWSTY;
  VSAPIA01.SY-COLR-CD-ID = SL0KM310.SL0KWCLR;
  VSAPIA01.XQA-QUAL-CD = SL0KM310.SL0KWQLT;
  VSAPIA01.XSD-SPEC-CD = SL0KM310.SL0KWISG;
  VSAPIA01.XUM-UOM-CD = SL0KM310.SL0KWUOM;
  VSAPIA01.XIF-TRN-FLD-CD = "01";
  VSAPIA01.XIT-TRN-TYP-CD = SL0KM310.XITCD;
  VSAPIA01.XIR-TRN-RSN-CD = SL0KM310.XIRCD;
  VSAPIA01.IN-SAS-ID = 0;
  VSAPIA01.IN-AUD-TRN-DOC-CD = SL0KM310.IN5TRDCD;
  VSAPIA01.IN-AUD-TRN-DOC-NBR = SL0KM310.IN5TRDOC;
  VSAPIA01.IN-AUD-TRN-DOC-SUB = SL0KM310.IN5TRSUB;
  VSAPIA01.ADJ-SEQ-NBR = 0;

   /* ************************************************************/
   /* *** write size adjustments                              ****/
   /* ************************************************************/

  SLWIDX02 = 1;
  while (SLWIDX02 <= SL0KW03.SL0KWNSZ
   && SLWREC.SLWERRSW == "N")
    if (SL0KW03.SL6ONHND[SLWIDX02] != 0)
      VSAPIA01.SY-SZ-ID-DESC = SL0KW03.SY4IDDSC[SLWIDX02];
      VSAPIA01.SL-SY-LOC-AUD-QTY = SL0KW03.SL6ONHND[SLWIDX02];
      VSAPIA01.ADJ-SEQ-NBR = VSAPIA01.ADJ-SEQ-NBR + 1;
      SL0KS-TAREC-SAPIA();
    end
    SLWIDX02 = SLWIDX02 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS-MOVE5-SAPIA

// fetch : po item 05 : n0
Function SL0KS-N0-VPOITM05()

   /* ************************************************************/
   /* *** fetch next row from:  DPRODC.VPOITM05               ****/
   /* *** using the std module:  VPOITM05                     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ***       but w/these io mods the sgrp will close       ****/
   /* ************************************************************/

  try
    call "VPOITM05" ("N0", SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    SL0KS-C0-VPOITM05(); /* <=== std close cursor*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "SL0KPON0";
  TA1REC.TA1LOCAT[1] = "VPOITM05";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DPRODC  ";
  TA1REC.TA1TBLVU = "VPOITM05";
  TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS-N0-VPOITM05

// select : po item 05 : s0
Function SL0KS-S0-VPOITM05()

   /* ************************************************************/
   /* *** select set of rows from:  DPRODC.VPOITM05           ****/
   /* *** using the std module:  VPOITM05                     ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

  try
    call "VPOITM05" ("S0", SQLCA, VPOITM05) {isNoRefresh = yes, isExternal = yes};
  end

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "SL0KPOS0";
    TA1REC.TA1LOCAT[1] = "VPOITM05";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DPRODC  ";
    TA1REC.TA1TBLVU = "VPOITM05";
    TA1REC.TA1TBLKE = VPOITM05.VPOITM05-KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* *** note: fetch handles return code correctly           ****/
   /* ************************************************************/

   /* <=== fetch first row*/
  SL0KS-N0-VPOITM05();
   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0KS-S0-VPOITM05

// Write SAP inventory adj record
Function SL0KS-TAREC-SAPIA()

   /* ************************************************************/
   /* *** Write SAP inventory adjustment record               ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO       ****/
   /* *** setup the following before just i/o sgrp execution: ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** note: TA1MAP may be setup once in initialization for****/
   /* ***       that level-use a comment for TA1LOCAT(2) setup****/
   /* *** execute the appropriate sgrp                        ****/
   /* *** note: sgrp results will be in record layout         ****/
   /* *** code the action for the following return codes:     ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = not found - setup not fnd msg              ****/
   /* ***   +100 = EOF                                        ****/
   /* ***   +100 = if rec gt blank,                           ****/
   /* ***            rec updated since last displayed         ****/
   /* ***            note: display new data (in rec)          ****/
   /* ***          else                                       ****/
   /* ***            row deleted since last displayed         ****/
   /* ***            note: clear screen & put keys back       ****/
   /* ***   -803 = duplicate add - setup record exists msg    ****/
   /* ***   -811 = duplicates found - contact programming msg ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***   -911 = deadlock - try again msg                   ****/
   /* ***          note: set same key switch = 'n', if used   ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KSSIA";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSIA-ADD-VSAPIA01(); /* <=== add prod/loc audit*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWSKYSW = "N";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SIA1";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -803) /* <=== for ADD*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SIA2";
      SLWREC.SLWMSGNO = 0045; /* <--- record exists msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "SIA3";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS-TAREC-SAPIA

// Validate XIT/XIR combination
Function SL0KS-TAREC-XIFTR()

   /* ************************************************************/
   /* *** Validate the XIF/XIT/XIR combination                ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO       ****/
   /* *** setup the following before just i/o sgrp execution: ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** note: TA1MAP may be setup once in initialization for****/
   /* ***       that level-use a comment for TA1LOCAT(2) setup****/
   /* *** execute the appropriate sgrp                        ****/
   /* *** note: sgrp results will be in record layout         ****/
   /* *** code the action for the following return codes:     ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = not found - setup not fnd msg              ****/
   /* ***   +100 = EOF                                        ****/
   /* ***   +100 = if rec gt blank,                           ****/
   /* ***            rec updated since last displayed         ****/
   /* ***            note: display new data (in rec)          ****/
   /* ***          else                                       ****/
   /* ***            row deleted since last displayed         ****/
   /* ***            note: clear screen & put keys back       ****/
   /* ***   -803 = duplicate add - setup record exists msg    ****/
   /* ***   -811 = duplicates found - contact programming msg ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***   -911 = deadlock - try again msg                   ****/
   /* ***          note: set same key switch = 'n', if used   ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KSFTR";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSFTR-SEL-VVIFTR01(); /* <=== sel to validate XIF/XIT/XIR*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (VVIFTR01.XXX-STAT == "A") /* <-- Valid Active XIT/XIR*/
      /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "FTR1";
      SLWREC.SLWMSGNO = 0484; /* <--- Inactive XIT/XIR*/
      return;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* <=== rec not found in db*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "FTR2";
      SLWREC.SLWMSGNO = 0485; /* <--- not found msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811) /* <=== for dublicate records*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "FTR3";
      SLWREC.SLWMSGNO = 0483; /* <--- dublicate records msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWSKYSW = "N";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "FTR4";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "FTR5";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS-TAREC-XIFTR

// delete product/location rec
Function SL0KS10()
   /* ************************************************************/
   /* *** delete product/location record                      ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS10 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

   /* DLVRUSA STARTS - SAIRAM VSYLOC02*/
   /* XSSL6D1;                     /* <=== delete prod/loc record*/
  XSSLS-DA-VSYLOC02(); /* <=== delete prod/loc record*/
   /* DLVRUSA ENDS   - SAIRAM VSYLOC02*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S10A";
      SLWREC.SLWMSGNO = 0012; /* <--- not on db msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWSKYSW = "N";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S10B";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S10C";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

end // end SL0KS10

// negative adjustment process
Function SL0KS18()

   /* ************************************************************/
   /* *** this statement group process negative adjustments   ****/
   /* ************************************************************/

   /* DLVRUSA CHANGES - All SL6REC has been changed to VSYLOC02*/

  if (SL0KM110.XIFCD == "01") /* <=== on-hand*/
    if (SL0KW01.SL0KWQTY >= VSYLOC02.SL6ONHND)
      SL0KW01.SL0KWNQT = SL0KW01.SL0KWNQT + VSYLOC02.SL6ONHND;
      VSYLOC02.SL6ONHND = 0;
    else
      VSYLOC02.SL6ONHND = VSYLOC02.SL6ONHND + SL0KW01.SL0KWNQT;
      SL0KW01.SL0KWNQT = 0;
    end
  else
    if (SL0KM110.XIFCD == "02") /* <=== reserve*/
      if (SL0KW01.SL0KWQTY > VSYLOC02.SL6PKRSV)
        SL0KW01.SL0KWNQT = SL0KW01.SL0KWNQT + VSYLOC02.SL6PKRSV;
        VSYLOC02.SL6PKRSV = 0;
      else
        VSYLOC02.SL6PKRSV = VSYLOC02.SL6PKRSV + SL0KW01.SL0KWNQT;
        SL0KW01.SL0KWNQT = 0;
      end
    else
      if (SL0KM110.XIFCD == "04") /* <=== setaside*/
        if (SL0KW01.SL0KWQTY >= VSYLOC02.SL6STASD)
          SL0KW01.SL0KWNQT = SL0KW01.SL0KWNQT + VSYLOC02.SL6STASD;
          VSYLOC02.SL6STASD = 0;
          VSYLOC02.INASAID = 0;
          VSYLOC02.SL6SADTE = 0;
        else
          VSYLOC02.SL6STASD = VSYLOC02.SL6STASD + SL0KW01.SL0KWNQT;
          SL0KW01.SL0KWNQT = 0;
        end
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S18A";
        SLWREC.SLWMSGNO = 0101; /* <=== invalid field msg*/
        return;
      end
    end
  end

  if (VSYLOC02.SL6ONHND == 0
   && VSYLOC02.SL6PKRSV == 0
   && VSYLOC02.SL6STASD == 0)
    SL0KS10(); /* <=== delete prod/loc rec*/
  else
    if (VSYLOC02.SL6ONHND == 0)
      if (VSYLOC02.SL1CRTDT == 0
       && VSYLOC02.PC3PONBR == 0
       && VSYLOC02.PC4ORTYP == " "
       && VSYLOC02.PC3POIDT == 0)
        VSYLOC02.SL6RTSDT = 0;
        SL0KS1J(); /* <=== update prod/loc*/
      else
        SL0KS9F();
                                   /* <=== clear rts date, receipt date, po*/
      end
    else
      SL0KS1J(); /* <=== update prod/loc*/
    end
  end

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  if (SL0KW01.SL0KWNQT < 0) /* <=== more qty to adjust*/
    if (SL0KW01.SL0KWREC[SLWIDX01] > 1) /* <=== if more tsq rec for size*/
      TA5REC.TA5TSQIX = TA5REC.TA5TSQIX + 1;
      SL0KS19(); /* <=== get prod/loc rec to update*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S18B";
      SLWREC.SLWMSGNO = 0103; /* <=== program logic error msg*/
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS18

// read tsq record
Function SL0KS19()
   /* ************************************************************/
   /* *** get the next product/location record to update      ****/
   /* ************************************************************/

   /* DLVRUSA CHANGES - All SL6REC has been changed to VSYLOC02*/

  TA5REC.TA5APPID = SLWREC.SLWSUMQU;
  TA5REC.TA5FNCCD = "R";
  call "TA0050" (SL0KWTQ, TA5REC) {isNoRefresh = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S19A";
    SLWREC.SLWMSGNO = 0001;
    return;
  end
   /* ************************************************************/
   /* *** setup the product/location key for the select unique****/
   /* ************************************************************/

  set VSYLOC02 empty;

  VSYLOC02.XWHCD = SL0KM110.XWHCD;
  VSYLOC02.XARCD = SL0KM110.XARCD;
  VSYLOC02.SL4ZONE = SL0KM110.SL4ZONE;
  VSYLOC02.SL5LOCTN = SL0KM110.SL5LOCTN;
  VSYLOC02.XGPCD = SL0KM110.XGPCD;
  VSYLOC02.SY1STNBR = SL0KM110.SY1STNBR;
  VSYLOC02.SY2CLRID = SL0KM110.SY2CLRID;
  VSYLOC02.XDMCD = SL0KM110.XDMCD;
  VSYLOC02.XQACD = SL0KM110.XQACD;
  VSYLOC02.XOWCD = SL0KM110.XOWCD;
  VSYLOC02.PC2INSEG = SL0KM110.PC2INSEG;
  VSYLOC02.XEGCD = SL0KM110.XEGCD;
  VSYLOC02.XPGCD = SL0KM110.XPGCD;
  VSYLOC02.XUMCD = SL0KM110.XUMCD;
  VSYLOC02.XSLCD = SL0KM110.XSLCD;
  VSYLOC02.SY5SZID = SL0KW01.SY5SZID[SLWIDX01];
  VSYLOC02.SL2PALET = SL0KWTQ.SL2PALET;
  VSYLOC02.SL2CASE = SL0KWTQ.SL2CASE;
  VSYLOC02.PC3POIDT = SL0KWTQ.PC3POIDT;
  VSYLOC02.PCFSECD = SL0KWTQ.PCFSECD;
  VSYLOC02.FY1FCTYC = SL0KWTQ.FY1FCTYC;
  VSYLOC02.PC4ORTYP = SL0KWTQ.PC4ORTYP;
  VSYLOC02.PC3PONBR = SL0KWTQ.PC3PONBR;
   /* DLVRUSA STARTS - SAIRAM-SAPPO*/
  VSYLOC02.PC-SAP-PO-NBR = SL0KWTQ.PC-SAP-PO-NBR;
   /* DLVRUSA STARTS - SAIRAM-SAPPO*/
  VSYLOC02.SL1CRTDT = SL0KWTQ.SL1CRTDT;

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS19 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  if (SL0KM110.XWHCD == "02" /* Greenland*/
   || SL0KM110.XWHCD == "04" /* or Memphis foot*/
   || SL0KM110.XWHCD == "07" /* or Wilsonville*/
   || SL0KM110.XWHCD == "51" /* or Memphis aprl*/
   || SL0KM110.XWHCD == "25" /* or NSG*/
   || SL0KM110.XWHCD == "42") /* or Canada*/
    VSYLOC02.SY1UNPCS = SL0KW01.SY1UNPCS;
    /* DLVRUSA STARTS - SAIRAM VSYLOC02*/
    /* XSSL6I1;                   /* <=== select unique prod/loc*/
    XSSLS-SA-VSYLOC02(); /* <=== select unique prod/loc*/
    /* DLVRUSA ENDS   - SAIRAM VSYLOC02*/
  else
    /* DLVRUSA STARTS - SAIRAM VSYLOC02*/
    /* XSSL6I0;                   /* <=== select unique prod/loc*/
    XSSLS-S-VSYLOC02(); /* <=== select unique prod/loc*/
    /* DLVRUSA ENDS   - SAIRAM VSYLOC02*/
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    if (VSYLOC02.ZZZCHGCT != SL0KWTQ.ZZZCHGCT)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S19B";
      SLWREC.SLWMSGNO = 0032; /* <--- rec changed since display*/
      return;
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S19C";
      SLWREC.SLWMSGNO = 0033; /* <--- rec deleted since display*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWSKYSW = "N";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S19D";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S19E";
      SLWREC.SLWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S19F";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

end // end SL0KS19

// validate product info
Function SL0KS1A()

   /* ************************************************************/
   /* *** make one time table accesses for auxillary and/or   ****/
   /* *** main data                                           ****/
   /* *** note: first time executions before beginning a loop ****/
   /* ***       might also be performed                       ****/
   /* ************************************************************/

  TA1REC.TA1MAP = SLWREC.SLWTAMAP;
  PKNREC.XGPCD = SL0KM110.XGPCD;
  PKNREC.SY1STNBR = SL0KM110.SY1STNBR;
  PKNREC.SY2CLRID = SL0KM110.SY2CLRID;
  PKNREC.XDMCD = SL0KM110.XDMCD;
  SL0KW01.SL0KW-CH-STY-FL = "N"; /* Cole Haan Style Flag*/

  SL0KSCI(); /* <===  obtain style and color data*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +0)
    if (SLWREC.XCTCD == "CANA") /* if Canada, then SY2000 was called*/
      if (WSY2000.WSY2000-RETURN-CODE == 02) /* CANA row not found*/
        SLWREC.SLWSKYSW = "N";
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S1A";
        SLWREC.SLWMSGNO = 0456; /* <--- not on db msg*/
        set SL0KM110.SY1STNBR cursor, bold;
        set SL0KM110.SY2CLRID bold;
        return;
      else
        if (WSY2000.WSY2000-RETURN-CODE == 98) /* CANA database busy*/
          SLWREC.SLWSKYSW = "N";
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "S1A";
          SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
          return;
        end
      end
    end
    SL0KM110.SY1SSTNM = PKNREC.SY1SSTNM;
    SL0KM110.SY2CLRAB = PKNREC.SY2CLRAB;
    if (PKNREC.XBCCD == "08") /* Cole Haan product*/
      SL0KW01.SL0KW-CH-STY-FL = "Y";
    end
    if (SL0KM110.XUMCD == "  ")
      SL0KM110.XUMCD = "01";
    end
    if (PKNREC.SY2CEDT1 <= X2CREC.X2CCURDT)
      SL0KM110.XLCCD = PKNREC.XLCCD1;
    else
      if (PKNREC.SY2CEDT2 <= X2CREC.X2CCURDT)
        SL0KM110.XLCCD = PKNREC.XLCCD2;
      else
        if (PKNREC.SY2CEDT3 <= X2CREC.X2CCURDT)
          SL0KM110.XLCCD = PKNREC.XLCCD3;
        else
          if (PKNREC.SY2CEDT4 <= X2CREC.X2CCURDT)
            SL0KM110.XLCCD = PKNREC.XLCCD4;
          else
            SL0KM110.XLCCD = "  ";
          end
        end
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <--- rec not found*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1AA";
      SLWREC.SLWMSGNO = 0043;
      set SL0KM110.XDMCD cursor, bold;
      set SL0KM110.SY2CLRID cursor, bold;
      set SL0KM110.SY1STNBR cursor, bold;
      set SL0KM110.XGPCD cursor, bold;
      return;
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1AB";
      SLWREC.SLWMSGNO = 0001;
      set SL0KM110.XDMCD cursor, bold;
      set SL0KM110.SY2CLRID cursor, bold;
      set SL0KM110.SY1STNBR cursor, bold;
      set SL0KM110.XGPCD cursor, bold;
      return;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS1A

// move sizes to ws size tbl proc
Function SL0KS1B()

   /* ************************************************************/
   /* *** this statement group checks product assignment for  ****/
   /* *** repack processing area the first time thru and gives****/
   /* *** a warning message if does not exist.                ****/
   /* *** this statement group moves the internal size and    ****/
   /* *** description to the ws size table (PROCESSING AREA)  ****/
   /* ************************************************************/

  if (SLWREC.SLWFTMSW == "Y") /* if first time processed*/

    SL0KW31.SL0KWASG = "N"; /* <=== prd asg setup for a size*/

    SL0KS9K(); /* <=== select set prod asg*/

    if (SLWREC.SLWERRSW == "Y")
      SL0KS9L(); /* <=== close scan prd asg 1*/
      return;
    end

    SLWIDX01 = 1;
    SLWIDX02 = 1;
    SL0KW01.SL0KWNSZ = 0;
    while (SLWIDX01 <= 40
     && SLWREC.SLWERRSW != "Y"
     && SQLCA.VAGen_SQLCODE == 0)
      if (SYPREC.SY4IDDSC[SLWIDX01] > " ")
        while (SL7REC.SY5SZID < SLWIDX01
         && SLWREC.SLWERRSW != "Y"
         && SQLCA.VAGen_SQLCODE == 0)
          SL0KS9M(); /* <=== fetch next prd asg 1*/
        end
        if (SLWREC.SLWERRSW == "Y"
         || SQLCA.VAGen_SQLCODE != 0)
        else
          if (SL7REC.SY5SZID == SLWIDX01
           && SL7REC.XXXSTAT == "A")
            SL0KW31.SL0KWASG = "Y";
            SLWIDX02 = SLWIDX02 + 1;
          else
            /* **  prod asg not setup for size*/
          end
        end
      end
      SLWIDX01 = SLWIDX01 + 1;
    end

    if (SL0KW31.SL0KWASG == "N") /* <=== prd asg not setup*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.SLWFTMSW = "N"; /* set first time sw to no*/
      SLWREC.XXXLOCID = "S1BA";
      SLWREC.SLWMSGNO = 0202;
      set SL0KM110.SL5LOCTN cursor, bold;
      set SL0KM110.SL4ZONE cursor, bold;
      set SL0KM110.XARCD cursor, bold;
    end

    SL0KS9L(); /* <=== close scan prd asg 1*/

    if (SLWREC.SLWERRSW == "Y")
      return;
    end

  end

  SL0KS9N(); /* move sizes to ws size tbl*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS1B

// load ws size tbl with qty
Function SL0KS1C()
   /* ************************************************************/
   /* *** this statement group moves the quantities to the    ****/
   /* *** ws size table.                                      ****/
   /* ************************************************************/
   /* DLVRUSA CHANGES - All SL6REC has been changed to VSYLOC02*/

  SL0KW01.SL0KWPCN = SL0KM110.PC3PONBR; /* PO number*/
   /* DLVRUSA STARTS - SAIRAM SAPPO*/
  SL0KW01.SL0KWSPCN = SL0KM110.PC-SAP-PO-NBR; /* sap PO number*/
   /* DLVRUSA ENDS   - SAIRAM SAPPO*/

   /* ************************************************************/
   /* *** pugre the tsq                                       ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** setup the selection criteria                        ****/
   /* ************************************************************/

  set VSYLOC02 empty;
  VSYLOC02.XWHCD = SL0KM110.XWHCD;
  VSYLOC02.XARCD = SL0KM110.XARCD;
  VSYLOC02.SL4ZONE = SL0KM110.SL4ZONE;
  VSYLOC02.SL5LOCTN = SL0KM110.SL5LOCTN;
  VSYLOC02.XGPCD = SL0KM110.XGPCD;
  VSYLOC02.SY1STNBR = SL0KM110.SY1STNBR;
  VSYLOC02.SY2CLRID = SL0KM110.SY2CLRID;
  VSYLOC02.XDMCD = SL0KM110.XDMCD;
  VSYLOC02.XQACD = SL0KM110.XQACD;
  VSYLOC02.XOWCD = SL0KM110.XOWCD;
  VSYLOC02.PC2INSEG = SL0KM110.PC2INSEG;
  VSYLOC02.XEGCD = SL0KM110.XEGCD;
  VSYLOC02.XPGCD = SL0KM110.XPGCD;
  VSYLOC02.XUMCD = SL0KM110.XUMCD;
  VSYLOC02.XSLCD = SL0KM110.XSLCD;
  VSYLOC02.SY1UNPCS = SL0KM110.SY1UNPCS;
  VSYLOC02.SY5SZID = -1;
  VSYLOC02.SL2PALET = "*";
  VSYLOC02.SL2CASE = SL0KM110.SL2CASE;
  VSYLOC02.PC3PONBR = SL0KW01.SL0KWSPN;
   /* DLVRUSA STARTS - SAIRAM SAPPO*/
  VSYLOC02.PC-SAP-PO-NBR = SL0KW01.SL0KWSSPN;
   /* DLVRUSA ENDS   - SAIRAM SAPPO*/
  VSYLOC02.SL1CRTDT = -1;

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS1C ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

   /* DLVRUSA STARTS - SAIRAM VSYLOC02*/
   /* XSSL6S5;                     /* <=== select set prd/loc*/
  XSSLS-S5-VSYLOC02(); /* <=== select set prd/loc*/
   /* DLVRUSA ENDS   - SAIRAM VSYLOC02*/

  TA5REC.TA5TSQIX = 0; /* <=== initialize tsq relative pos*/

  if (SQLCA.VAGen_SQLCODE == 0)
    SL0KW01.SL0KWISZ = 0; /* <=== invalid size qty*/
    SL0KW01.SL0KWIFL = "N"; /* <=== invalid size flag*/
    if (SL0KM110.SY1UNPCS == -1)
      SL0KW01.SY1UNPCS = VSYLOC02.SY1UNPCS;
    end
    if (SL0KM110.PC3PONBR == -1)
      SL0KW01.SL0KWPCN = VSYLOC02.PC3PONBR;
    end
    /* DLVRUSA STARTS - SAIRAM SAPPO*/
    if (SL0KM110.PC-SAP-PO-NBR == "*")
      SL0KW01.SL0KWSPCN = VSYLOC02.PC-SAP-PO-NBR;
    end
    /* DLVRUSA ENDS   - SAIRAM SAPPO*/
    while (SQLCA.VAGen_SQLCODE == 0
     && SLWREC.SLWERRSW == "N")
      if (VSYLOC02.PC3PONBR != SL0KW01.SL0KWPCN
       && SL0KM110.PC3PONBR == -1)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S1CA";
        set SL0KM110.PC3PONBR cursor, bold;
        SLWREC.SLWMSGNO = 413;
      end
      /* DLVRUSA STARTS - SAIRAM SAPPO*/
      if (VSYLOC02.PC-SAP-PO-NBR != SL0KW01.SL0KWSPCN
       && SL0KM110.PC-SAP-PO-NBR == "*")
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S1CG";
        set SL0KM110.PC-SAP-PO-NBR cursor, bold;
        SLWREC.SLWMSGNO = 413;
      end
      /* DLVRUSA ENDS   - SAIRAM SAPPO*/
      if (VSYLOC02.SY1UNPCS != SL0KW01.SY1UNPCS
       && SL0KM110.SY1UNPCS == -1)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S1CB";
        set SL0KM110.SL0KMTL1 skip;
        set SL0KM110.SY1UNPCS cursor, bold;
        SLWREC.SLWMSGNO = 412;
      end
      SL0KS1E(); /* <=== load qtys into ws size tbl*/
    end
    SL0KSXD(); /* <=== close scan*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== setinq eof*/
      if (SLWREC.SLWSEXSW == "N") /* Special exit switch*/
        SLWREC.SLWSEXSW = "Y";
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S1CC";
        set SL0KM110.XARCD cursor;
        SLWREC.SLWMSGNO = 417; /* No product at location*/
        if (SL0KM110.SY1UNPCS == -1)
          SL0KM110.SY1UNPCS = 0;
        end
        if (SL0KM110.PC3PONBR == -1)
          SL0KM110.PC3PONBR = 0;
        end
        /* DLVRUSA STARTS - SAIRAM SAPPO*/
        if (SL0KM110.PC-SAP-PO-NBR == "*")
          SL0KM110.PC-SAP-PO-NBR = " ";
        end
        /* DLVRUSA ENDS   - SAIRAM SAPPO*/
      else
        SLWREC.SLWSEXSW = "N";
      end
      SL0KSXD(); /* <=== close scan*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SL0KSXD(); /* <=== close scan*/
      SLWREC.SLWSKYSW = "N";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1CD";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811) /* <=== for INQUIRY*/
      SL0KSXD(); /* <=== close scan*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1CE";
      SLWREC.SLWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
      return;
    end
    SL0KSXD(); /* <=== close scan*/
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S1CF";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    /* SL02ST1                       ;  <=== clear scrn (empty)*/
    return;
  end

end // end SL0KS1C

// move size and qty to map
Function SL0KS1D()
   /* ************************************************************/
   /* *** this statement group moves the size desc and qty    ****/
   /* *** to the map.                                         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** on-hand adjustments                                 ****/
   /* ************************************************************/

  SL0KW04.SL0KWSCT = 0; /* init size count*/

  if (SL0KM110.XIFCD == "01")
    SLWIDX01 = 1;
    while (SLWIDX01 <= SL0KW01.SL0KWNSZ)
      SL0KM110.SY4IDDSC[SLWIDX01] = SL0KW01.SY4IDDSC[SLWIDX01];
      SL0KM110.SL0KMCQT[SLWIDX01] = SL0KW01.SL6ONHND[SLWIDX01];
      if (SL0KW01.SL6ONHND[SLWIDX01] != 0) /* if size info found*/
        SL0KW04.SL0KWSCT = SL0KW04.SL0KWSCT + 1;
      end
      SLWIDX01 = SLWIDX01 + 1;
    end
    if (SL0KW01.SL0KWISZ != 0)
                                   /* <=== if there is qty for invalid size*/
      if (SLWIDX01 < 40)
        SL0KM110.SY4IDDSC[SLWIDX01] = "**";
        set SL0KM110.SL0KMADJ[SLWIDX01] skip; /* disable adj ability*/
        SL0KM110.SL0KMCQT[SLWIDX01] = SL0KW01.SL0KWISZ;
        SL0KW04.SL0KWSCT = SL0KW04.SL0KWSCT + 1;
      end
    end
    if (SL5REC.SL5MPDFL == "N") /* if single-sku location*/
      if (SL0KW04.SL0KWSCT > 1) /* if more than 1 sz found*/
        SLWREC.SLWMSGNO = 0422; /* single-sku warning msg*/
      end
    end
    return;
  end

   /* ************************************************************/
   /* *** pick reserve adjustments                            ****/
   /* ************************************************************/

  if (SL0KM110.XIFCD == "02")
    SLWIDX01 = 1;
    while (SLWIDX01 <= SL0KW01.SL0KWNSZ)
      SL0KM110.SY4IDDSC[SLWIDX01] = SL0KW01.SY4IDDSC[SLWIDX01];
      SL0KM110.SL0KMCQT[SLWIDX01] = SL0KW01.SL6PKRSV[SLWIDX01];
      if (SL0KW01.SL6PKRSV[SLWIDX01] != 0) /* if size info found*/
        SL0KW04.SL0KWSCT = SL0KW04.SL0KWSCT + 1;
      end
      SLWIDX01 = SLWIDX01 + 1;
    end
    if (SL0KW01.SL0KWISZ != 0)
                                   /* <=== if there is qty for invalid size*/
      if (SLWIDX01 < 40)
        SL0KM110.SY4IDDSC[SLWIDX01] = "**";
        set SL0KM110.SL0KMADJ[SLWIDX01] skip; /* disable adj ability*/
        SL0KM110.SL0KMCQT[SLWIDX01] = SL0KW01.SL0KWISZ;
        SL0KW04.SL0KWSCT = SL0KW04.SL0KWSCT + 1;
      end
    end
    if (SL5REC.SL5MPDFL == "N") /* if single-sku location*/
      if (SL0KW04.SL0KWSCT > 1) /* if more than 1 sz found*/
        SLWREC.SLWMSGNO = 0422; /* single-sku warning msg*/
      end
    end
    return;
  end

   /* ************************************************************/
   /* *** set-aside adjustments                               ****/
   /* ************************************************************/

  if (SL0KM110.XIFCD == "04")
    SLWIDX01 = 1;
    while (SLWIDX01 <= SL0KW01.SL0KWNSZ)
      SL0KM110.SY4IDDSC[SLWIDX01] = SL0KW01.SY4IDDSC[SLWIDX01];
      SL0KMCQT[SLWIDX01] = SL0KW01.SL6STASD[SLWIDX01];
      if (SL0KW01.SL6STASD[SLWIDX01] != 0) /* if size info found*/
        SL0KW04.SL0KWSCT = SL0KW04.SL0KWSCT + 1;
      end
      SLWIDX01 = SLWIDX01 + 1;
    end
    if (SL0KW01.SL0KWISZ != 0)
                                   /* <=== if there is qty for invalid size*/
      if (SLWIDX01 < 40)
        SL0KM110.SY4IDDSC[SLWIDX01] = "**";
        set SL0KM110.SL0KMADJ[SLWIDX01] skip; /* disable adj ability*/
        SL0KM110.SL0KMCQT[SLWIDX01] = SL0KW01.SL0KWISZ;
        SL0KW04.SL0KWSCT = SL0KW04.SL0KWSCT + 1;
      end
    end
    if (SL5REC.SL5MPDFL == "N") /* if single-sku location*/
      if (SL0KW04.SL0KWSCT > 1) /* if more than 1 sz found*/
        SLWREC.SLWMSGNO = 0422; /* single-sku warning msg*/
      end
    end
    return;
  end

   /* *******************************************************************/
   /* END OF STATEMENT GROUP*/
   /* *******************************************************************/

end // end SL0KS1D

// load ws size tbl with qty
Function SL0KS1E()
   /* ************************************************************/
   /* *** this statement group moves the quantities to the    ****/
   /* *** ws size table.                                      ****/
   /* ************************************************************/
   /* DLVRUSA CHANGES - All SL6REC has been changed to VSYLOC02*/

  if (SL0KM110.XIFCD == "04") /* <=== if setaside adjustment*/
    if (VSYLOC02.INASAID > 0) /* <=== if there is a current setaside*/
      if (VSYLOC02.INASAID != INAREC.INASAID)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S1EA";
        SLWREC.SLWMSGNO = 0099; /* <--- inv setaside for loc*/
        set SL0KM110.IN5TRDOC cursor, bold;
        return;
      end
      if (VSYLOC02.INASAID != SL0KM110.IN5TRDOC)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S1EB";
        SLWREC.SLWMSGNO = 0099; /* <--- inv setaside for loc*/
        set SL0KM110.IN5TRDOC cursor, bold;
        return;
      end
    end
  end
                     /* <=== search the ws size tbl for the size*/
  SLWIDX01 = 1;
  while (SLWIDX01 <= 39
   && VSYLOC02.SY5SZID != SL0KW01.SY5SZID[SLWIDX01])
    SLWIDX01 = SLWIDX01 + 1;
  end

  if (SLWIDX01 == 40)
    SL0KW01.SL0KWIFL = "Y";
    if (SL0KM110.XIFCD == "01") /* <=== on hand*/
      SL0KW01.SL0KWISZ = SL0KW01.SL0KWISZ + VSYLOC02.SL6ONHND;
    else
      if (SL0KM110.XIFCD == "02") /* <=== reserve*/
        SL0KW01.SL0KWISZ = SL0KW01.SL0KWISZ + VSYLOC02.SL6PKRSV;
      else
        if (SL0KM110.XIFCD == "04") /* <=== setaside*/
          SL0KW01.SL0KWISZ = SL0KW01.SL0KWISZ + VSYLOC02.SL6STASD;
        end
      end
    end
    SL0KS1N(); /* <=== FETCH NEXT PROD/LOC*/
    return;
  end

   /* ************************************************************/
   /* *** store the product/location record in the tsq        ****/
   /* ************************************************************/

  SL0KWTQ.SY1UNPCS = VSYLOC02.SY1UNPCS;
  SL0KWTQ.SY5SZID = VSYLOC02.SY5SZID;
  TA5REC.TA5TSQIX = TA5REC.TA5TSQIX + 1;
  SL0KWTQ.SL2PALET = VSYLOC02.SL2PALET;
  SL0KWTQ.SL2CASE = VSYLOC02.SL2CASE;
  SL0KWTQ.PC3POIDT = VSYLOC02.PC3POIDT;
  SL0KWTQ.PCFSECD = VSYLOC02.PCFSECD;
  SL0KWTQ.FY1FCTYC = VSYLOC02.FY1FCTYC;
  SL0KWTQ.PC4ORTYP = VSYLOC02.PC4ORTYP;
  SL0KWTQ.PC3PONBR = VSYLOC02.PC3PONBR;
   /* DLVRUSA STARTS - SAIRAM-SAPPO*/
  SL0KWTQ.PC-SAP-PO-NBR = VSYLOC02.PC-SAP-PO-NBR;
   /* DLVRUSA STARTS - SAIRAM-SAPPO*/
  SL0KWTQ.SL1CRTDT = VSYLOC02.SL1CRTDT;
  SL0KWTQ.ZZZCHGCT = VSYLOC02.ZZZCHGCT;

   /* *** setup call areas and add record to tsq ****/
  TA5REC.TA5APPID = SLWREC.SLWSUMQU;
  TA5REC.TA5FNCCD = "A";
  call "TA0050" (SL0KWTQ, TA5REC) {isNoRefresh = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1EC";
    SLWREC.SLWMSGNO = 0109; /* <--- severe tsq error msg*/
    return;
  end
                         /* <=== add to on-hand*/
  SL0KW01.SL0KWONH = SL0KW01.SL6ONHND[SLWIDX01];
  SL0KW01.SL0KWONH = SL0KW01.SL0KWONH + VSYLOC02.SL6ONHND;
  SL0KW01.SL6ONHND[SLWIDX01] = SL0KW01.SL0KWONH;
                         /* <=== add to reserve*/
  SL0KW01.SL0KWRSV = SL0KW01.SL6PKRSV[SLWIDX01];
  SL0KW01.SL0KWRSV = SL0KW01.SL0KWRSV + VSYLOC02.SL6PKRSV;
  SL0KW01.SL6PKRSV[SLWIDX01] = SL0KW01.SL0KWRSV;
                         /* <=== add to set aside*/
  SL0KW01.SL0KWSAD = SL0KW01.SL6STASD[SLWIDX01];
  SL0KW01.SL0KWSAD = SL0KW01.SL0KWSAD + VSYLOC02.SL6STASD;
  SL0KW01.SL6STASD[SLWIDX01] = SL0KW01.SL0KWSAD;

   /* ************************************************************/
   /* *** add to the number of records for this size          ****/
   /* ************************************************************/

  SL0KW01.SL0KWREC[SLWIDX01] = SL0KW01.SL0KWREC[SLWIDX01] + 1;

  SL0KW01.SL0KWCRC[SLWIDX01] = "Y"; /* <=== PRD/LOC REC EXIST FLAG*/

   /* ************************************************************/
   /* *** move the relative position of the first tsq record  ****/
   /* *** for the size to the ws size table                   ****/
   /* ************************************************************/

  if (SL0KW01.SL0KWPTS[SLWIDX01] < 1)
    SL0KW01.SL0KWPTS[SLWIDX01] = TA5REC.TA5TSQIX;
  end

   /* ************************************************************/
   /* *** fetch the next product/location record              ****/
   /* ************************************************************/

  SL0KS1N(); /* <=== FETCH NEXT*/

end // end SL0KS1E

// update product/location record
Function SL0KS1F()

   /* ************************************************************/
   /* *** this statement group updates the product/location   ****/
   /* *** record.                                             ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if there isn't an adjustment made for the size,     ****/
   /* *** skip the rest of this statement group.              ****/
   /* ************************************************************/

  if (SL0KM110.SL0KMADJ[SLWIDX01] == 0)
    return;
  end

   /* ************************************************************/
   /* *** if a record doesn't exist for this size,            ****/
   /* ***   write a new record for this size.                 ****/
   /* ************************************************************/

  if (SL0KW01.SL0KWCRC[SLWIDX01] == "N")
                                   /* <=== prd/loc rec doesn't exist*/
    SL0KS1L(); /* <=== setup the prod/loc record for*/
                                   /* add*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    else
      SL0KS9D(); /* <=== write the prod/loc record*/
    end
    return;
  end

   /* ************************************************************/
   /* *** the rest of this statement group is sizes that      ****/
   /* *** currently have quantities.                          ****/
   /* ************************************************************/

  TA5REC.TA5TSQIX = SL0KW01.SL0KWPTS[SLWIDX01];
                                   /* <=== first size tsq*/
  SL0KS19(); /* <=== get prod/loc rec for update*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** positive adjustment                                 ****/
   /* ************************************************************/

  if (SL0KM110.SL0KMADJ[SLWIDX01] > 0) /* <=== positive adjustment*/
    SL0KS1M(); /* <=== add to prod/loc qty*/
    return;
  end

   /* ************************************************************/
   /* *** negative adjustment                                 ****/
   /* ************************************************************/

  SL0KW01.SL0KWNQT = SL0KM110.SL0KMADJ[SLWIDX01];

  while (SL0KW01.SL0KWNQT != 0
   && SLWREC.SLWERRSW != "Y")
    SL0KW01.SL0KWQTY = SL0KW01.SL0KWNQT * -1;
    SL0KS18(); /* <=== negative adjustment process*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS1F

// setaside update
Function SL0KS1G()

   /* ************************************************************/
   /* *** setaside update                                     ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS1G ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

   /* ************************************************************/
   /* *** HARDCODE TEST FOR PRODUCTION SETASIDE ID'S to BE    ****/
   /* *** CHANGED WHEN PRODUCTION SETASIDE ID"S ARE ADDED TO  ****/
   /* *** THE WAREHOUSE TABLE                                 ****/
   /* ************************************************************/

  if (INAREC.INASAID == 62
   || INAREC.INASAID == 63
   || INAREC.INASAID == 64
   || INAREC.INASAID == 65
   || INAREC.INASAID == 66
   || INAREC.INASAID == 67
   || INAREC.INASAID == 68)
    SLWREC.SLWMSGNO = 184; /* cannot maintenance prod. setaside*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1GA";
    return;
  end

    /* ***  setup key for setaside item read  ****/

  set INBREC empty;
  INBREC.INASAID = INAREC.INASAID;
  INBREC.XWHCD = SL0KM110.XWHCD;
  INBREC.XOWCD = SL0KM110.XOWCD;
  INBREC.XGPCD = SL0KM110.XGPCD;
  INBREC.SY1STNBR = SL0KM110.SY1STNBR;
  INBREC.SY2CLRID = SL0KM110.SY2CLRID;
  INBREC.XDMCD = SL0KM110.XDMCD;
  INBREC.XQACD = SL0KM110.XQACD;
  INBREC.XSDCD = SL0KM110.PC2INSEG;
  INBREC.XSACD = SL0KM110.XEGCD;
  INBREC.XPGCD = SL0KM110.XPGCD;
  INBREC.XUMCD = SL0KM110.XUMCD;

  XSINBU1(); /* <=== read setaside for update*/

  if (SQLCA.VAGen_SQLCODE == 0)
    SL0KS1T(); /* <=== update setaside itm with adj*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
      SL0KS1U(); /* <=== add setaside itm rec*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWSKYSW = "N";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1GB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1GC";
      SLWREC.SLWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S1GD";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    /* SL02ST1                       ;  <=== clear scrn (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS1G

// obtain style row
Function SL0KS1I()

   /* ************************************************************/
   /* *** This group write audit records                      ****/
   /* ************************************************************/

  set VSLAUD02 empty;

  VSLAUD02.XWHCD = SL0KM110.XWHCD;
  VSLAUD02.IN5TRDCD = SL0KM110.IN5TRDCD;
  SL0KW11.SL0KWDOC = SL0KM110.IN5TRDOC;
  VSLAUD02.IN5TRPRT = SL0KW11.SL0KWLST;
  VSLAUD02.IN5TRDOC = SL0KM110.IN5TRDOC;
  VSLAUD02.IN5TRSUB = SL0KM110.IN5TRSUB;
  VSLAUD02.XGPCD = SL0KM110.XGPCD;
  VSLAUD02.SY1STNBR = SL0KM110.SY1STNBR;
  VSLAUD02.SY2CLRID = SL0KM110.SY2CLRID;
  VSLAUD02.XDMCD = SL0KM110.XDMCD;
  VSLAUD02.XQACD = SL0KM110.XQACD;
  VSLAUD02.XOWCD = SL0KM110.XOWCD;
  VSLAUD02.XSDCD = SL0KM110.PC2INSEG;
  VSLAUD02.XSACD = SL0KM110.XEGCD;
  VSLAUD02.XPGCD = SL0KM110.XPGCD;
  VSLAUD02.XUMCD = SL0KM110.XUMCD;
  VSLAUD02.XSLCD = SL0KM110.XSLCD;
  VSLAUD02.XIFCD = SL0KM110.XIFCD;
  VSLAUD02.XITCD = SL0KM110.XITCD;
  VSLAUD02.XIRCD = SL0KM110.XIRCD;
  VSLAUD02.IN5TRREF = SL0KM110.IN5TRREF;
  VSLAUD02.XARCD = SL0KM110.XARCD;
  VSLAUD02.SL4ZONE = SL0KM110.SL4ZONE;
  VSLAUD02.SL5LOCTN = SL0KM110.SL5LOCTN;
  VSLAUD02.SL2CASE = SL0KM110.SL2CASE;

   /* Start add  4/24/00 SAP load PO number to audit*/
  VSLAUD02.PC3PONBR = SL0KM110.PC3PONBR;
   /* End add  4/24/00 SAP load PO number to audit*/

   /* ************************************************************/
   /* *** write size adjustments                              ****/
   /* ************************************************************/

  SLWIDX01 = 1;
  while (SLWIDX01 <= SL0KW01.SL0KWNSZ
   && SLWREC.SLWERRSW == "N")
    if (SL0KM110.SL0KMADJ[SLWIDX01] != 0)
      VSLAUD02.SY5SZID = SL0KW01.SY5SZID[SLWIDX01];
      VSLAUD02.SLATRQTY = SL0KM110.SL0KMADJ[SLWIDX01];
      SL0KS1R();
    end
    SLWIDX01 = SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS1I

// modify prod/loc record
Function SL0KS1J()
   /* ************************************************************/
   /* *** this sgrp updates the product/location record       ****/
   /* ************************************************************/

   /* DLVRUSA CHANGES - All SL6REC has been changed to VSYLOC02*/

  if (VSYLOC02.XWHCD == "02" /* Greenland*/
   || VSYLOC02.XWHCD == "04" /* or Memphis Footwear*/
   || VSYLOC02.XWHCD == "07" /* or Wilsonville*/
   || VSYLOC02.XWHCD == "51" /* or Memphis Apparel*/
   || VSYLOC02.XWHCD == "25" /* or NSG*/
   || VSYLOC02.XWHCD == "42") /* or Canada*/
    if (SL5REC.YLTCD == "06" /* Highrise location*/
     || SL5REC.YLTCD == "22") /* or Handstack location*/
      VSYLOC02.SY1UNPCS = VSYLOC02.SL6ONHND; /* Units/case*/
    end
  else
    VSYLOC02.SY1UNPCS = 0; /* Units/case*/
  end

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS1J ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  if (VSYLOC02.XWHCD == "02" /* Greenland*/
   || VSYLOC02.XWHCD == "04" /* or Memphis Footwear*/
   || VSYLOC02.XWHCD == "07" /* or Wilsonville*/
   || VSYLOC02.XWHCD == "51" /* or Memphis Apparel*/
   || VSYLOC02.XWHCD == "25" /* or NSG*/
   || VSYLOC02.XWHCD == "42") /* or Canada*/
    if (SL5REC.YLTCD == "06" /* Highrise location*/
     || SL5REC.YLTCD == "22") /* or Handstack location*/
      /* DLVRUSA STARTS - SAIRAM VSYLOC02*/
      /* XSSL6R0;                 /* <=== replace prod/location record*/
      XSSLS-U-VSYLOC02(); /* <=== replace prod/location record*/
      /* DLVRUSA ENDS   - SAIRAM VSYLOC02*/
    else
      /* DLVRUSA STARTS - SAIRAM VSYLOC02*/
      /* XSSL6R1;                 /* <=== replace prod/location record*/
      XSSLS-UA-VSYLOC02(); /* <=== replace prod/location record*/
      /* DLVRUSA ENDS   - SAIRAM VSYLOC02*/
    end
  else
    /* DLVRUSA STARTS - SAIRAM VSYLOC02*/
    /* XSSL6R1;                   /* <=== replace prod/location record*/
    XSSLS-UA-VSYLOC02(); /* <=== replace prod/location record*/
    /* DLVRUSA ENDS   - SAIRAM VSYLOC02*/
  end

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    if (SQLCA.VAGen_SQLCODE == +100)
      if (VSYLOC02.VSYLOC02-DATA > " ")
        SLWREC.XXXLOCID = "S1JA";
        SLWREC.SLWMSGNO = 0032; /* <--- row updated since last read*/
      else
        SLWREC.XXXLOCID = "S1JB";
        SLWREC.SLWMSGNO = 0033; /* <--- row deleted since last read*/
      end
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.SLWSKYSW = "N";
      SLWREC.XXXLOCID = "S1JC";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.XXXLOCID = "S1JD";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

end // end SL0KS1J

// delete setaside itm when empty
Function SL0KS1K()

   /* ************************************************************/
   /* *** delete setaside itm with all zero quantities        ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS1K ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

   /* ************************************************************/
   /* *** delete setaside row                                 ****/
   /* ************************************************************/

  call "IO0950" ("D ", SQLCA, INBREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
     /* ************************************************************/
     /* *** select the original row without a change count      ****/
     /* *** note: select unique does NOT use zzzchgct           ****/
     /* *** note: this puts current version of data in record   ****/
     /* ***       or blank out record layout = deleted          ****/
     /* ************************************************************/
    XSINBI0(); /* <=== select unique row*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    if (SQLCA.VAGen_SQLCODE == +100)
      INBREC.INBDATA = " ";
    end
    SLWREC.SLWERRSW = "Y";
    if (INBREC.INBDATA > " ")
      SLWREC.XXXLOCID = "S1KA";
      SLWREC.SLWMSGNO = 0032; /* <--- row updated since last read*/
       /* you may want to perform a scrn re-setup*/
    else
      SLWREC.XXXLOCID = "S1KB";
      SLWREC.SLWMSGNO = 0033; /* <--- row deleted since last read*/
      /* SL02ST1                   ;  <=== clear scrn (empty)*/
    end
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1KC";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
  else
    TA1REC.TA1FUNC = "RETN";
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S1KD";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    /* SL02ST1                       ;  <=== clear scrn (empty)*/
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "SL0KS1K ";
  TA1REC.TA1LOCAT[1] = "IO0950  ";
  TA1REC.TA1LOCAT[3] = "DELETE  ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DINVNT  ";
  TA1REC.TA1TBLVU = "VASITM01";
  TA1REC.TA1TBLKE = INBREC.INBKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS1K

// setup product/location for add
Function SL0KS1L()
   /* ************************************************************/
   /* *** setup the product/location rec for an add           ****/
   /* ************************************************************/

   /* DLVRUSA CHANGES - All SL6REC has been changed to VSYLOC02*/

  set VSYLOC02 empty;
  VSYLOC02.XWHCD = SL0KM110.XWHCD;
  VSYLOC02.XARCD = SL0KM110.XARCD;
  VSYLOC02.SL4ZONE = SL0KM110.SL4ZONE;
  VSYLOC02.SL5LOCTN = SL0KM110.SL5LOCTN;
  VSYLOC02.XGPCD = SL0KM110.XGPCD;
  VSYLOC02.SY1STNBR = SL0KM110.SY1STNBR;
  VSYLOC02.SY2CLRID = SL0KM110.SY2CLRID;
  VSYLOC02.XDMCD = SL0KM110.XDMCD;
  VSYLOC02.XQACD = SL0KM110.XQACD;
  VSYLOC02.XOWCD = SL0KM110.XOWCD;
  VSYLOC02.PC2INSEG = SL0KM110.PC2INSEG;
  VSYLOC02.XEGCD = SL0KM110.XEGCD;
  VSYLOC02.XPGCD = SL0KM110.XPGCD;
  VSYLOC02.XUMCD = SL0KM110.XUMCD;
  VSYLOC02.XSLCD = SL0KM110.XSLCD;
  VSYLOC02.SY1UNPCS = SL0KM110.SY1UNPCS;
  VSYLOC02.SY5SZID = SL0KW01.SY5SZID[SLWIDX01];
  VSYLOC02.SL2PALET = " ";
  VSYLOC02.SL2CASE = SL0KM110.SL2CASE;

  if (SL0KW01.SL0KW-CH-STY-FL == "Y") /* Cole Haan product*/
    VSYLOC02.XBCCD = "08";
  else
    VSYLOC02.XBCCD = "  ";
  end

  /* DLVRUSA STARTS - SAIRAM-SAPPO*/
  if (SL0KM110.XWHCD == "02")
    VSYLOC02.PC-SAP-PO-NBR = " ";
  /* DLVRUSA ENDS   - SAIRAM-SAPPO*/
    if (SL0KW01.SL0KWSPN == -1
     || SL0KW01.SL0KWSPN == 0)
      VSYLOC02.PC3POIDT = 0;
      VSYLOC02.PCFSECD = " ";
      VSYLOC02.FY1FCTYC = " ";
      VSYLOC02.PC4ORTYP = " ";
      VSYLOC02.PC3PONBR = 0;
    else
      VSYLOC02.PC3POIDT = PC3REC.PC3POIDT;
      VSYLOC02.PCFSECD = PC3REC.PCFSECD;
      VSYLOC02.FY1FCTYC = PC3REC.FY1FCTYC;
      VSYLOC02.PC4ORTYP = PC3REC.PC4ORTYP;
      VSYLOC02.PC3PONBR = PC3REC.PC3PONBR;
    end
    /* DLVRUSA STARTS - SAIRAM-SAPPO*/
  else
    VSYLOC02.PC3POIDT = 0;
    VSYLOC02.PCFSECD = " ";
    VSYLOC02.FY1FCTYC = " ";
    VSYLOC02.PC4ORTYP = " ";
    if (SL0KW01.SL0KWSPN == -1
     || SL0KW01.SL0KWSPN == 0)
      VSYLOC02.PC3PONBR = 0;
    else
      /* MOVE VPOITM05.PC3PONBR TO VSYLOC02.PC3PONBR;*/
      VSYLOC02.PC3PONBR = SL0KW01.SL0KWSPN;
    end
    if (SL0KW01.SL0KWSSPN == "*"
     || SL0KW01.SL0KWSSPN == " ")
      VSYLOC02.PC-SAP-PO-NBR = " ";
    else
      /* MOVE VPOITM05.PC-SAP-PO-NBR TO VSYLOC02.SAPPONBR;*/
      VSYLOC02.PC-SAP-PO-NBR = SL0KW01.SL0KWSSPN;
    end
  end
    /* DLVRUSA ENDS   - SAIRAM-SAPPO*/

  if (SL0KM110.XIFCD == "01") /* <=== on-hand*/
    VSYLOC02.SL6ONHND = SL0KM110.SL0KMADJ[SLWIDX01];
  else
    if (SL0KM110.XIFCD == "02") /* <=== reserve*/
      VSYLOC02.SL6PKRSV = SL0KM110.SL0KMADJ[SLWIDX01];
    else
      if (SL0KM110.XIFCD == "04") /* <=== setaside*/
        VSYLOC02.SL6STASD = SL0KM110.SL0KMADJ[SLWIDX01];
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S1LB";
        SLWREC.SLWMSGNO = 0101; /* <=== invalid field msg*/
      end
    end
  end

  if (PC2REC.XXXSTAT == "A") /* if iseg is active*/
     /* next sentence*/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1LD";
    SLWREC.SLWMSGNO = 0010; /* inactive message*/
    set SL0KM110.PC2INSEG cursor, bold;
  end

end // end SL0KS1L

// add adj to prod/loc record
Function SL0KS1M()

   /* ************************************************************/
   /* *** add the adjustment qty to the product/location rec  ****/
   /* ************************************************************/

   /* DLVRUSA CHANGES - All SL6REC has been changed to VSYLOC02*/

  if (SL0KM110.XIFCD == "01") /* <=== on-hand*/
    VSYLOC02.SL6ONHND = VSYLOC02.SL6ONHND + SL0KM110.SL0KMADJ[SLWIDX01];
  else
    if (SL0KM110.XIFCD == "02") /* <=== reserved*/
      VSYLOC02.SL6PKRSV = VSYLOC02.SL6PKRSV + SL0KM110.SL0KMADJ[SLWIDX01];
    else
      if (SL0KM110.XIFCD == "04") /* <=== setaside*/
        SL0KW01.SL0KWQT2 = SL0KM110.SL0KMADJ[SLWIDX01];
        SL0KS9G(); /* <=== positive setaside update*/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S1MA";
        SLWREC.SLWMSGNO = 0101; /* <--- invalid field code msg*/
        return;
      end
    end
  end

  if (VSYLOC02.SL6ONHND == 0 /* if onhand equal zero and*/
   && VSYLOC02.SL6PKRSV == 0 /* reserve equal zero and*/
   && VSYLOC02.SL6STASD == 0) /* setaside equal zero*/
    SL0KS10();
                                   /* delete prod/location*/
  else
    SL0KS1J();
  end

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS1M

// fetch next prod/loc scan 5
Function SL0KS1N()

   /* ************************************************************/
   /* *** fetch next product/location record.                 ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS1N ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

   /* DLVRUSA STARTS - SAIRAM VSYLOC02*/
   /* XSSL6F5;                     /* <=== fetch next prod/loc*/
  XSSLS-N5-VSYLOC02(); /* <=== fetch next prod/loc*/
   /* DLVRUSA ENDS   - SAIRAM VSYLOC02*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == +100) /* <=== SETINQ EOF*/
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S1NA";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    /* SL02ST1                       ;  <=== clear scrn (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS1N

// check if work order exists
Function SL0KS1O()
        /* VERIFY IF WORK ORDER exists for product/location*/
   /* ************************************************************/
   /* *** Verify there are no outstanding work orders for this****/
   /* ***  'from' location. This process uses the SL8REC and  ****/
   /* *** accesses the work order header not using the standard **/
   /* *** key to the file.                                    ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** set up the appropiate fields for selection in i/o   ****/
   /* ************************************************************/

  set SL8REC empty;

  SL8REC.XWHCD = SL0KM110.XWHCD;
  SL8REC.SL8FRAR = SL0KM110.XARCD;
  SL8REC.SL8FRZN = SL0KM110.SL4ZONE;
  if (SL0KM110.SL5LOCTN == " ")
    SL8REC.SL8FRLC = "000000";
  else
    SL8REC.SL8FRLC = SL0KM110.SL5LOCTN;
  end
  SL8REC.XGPCD = SL0KM110.XGPCD;
  SL8REC.SY1STNBR = SL0KM110.SY1STNBR;
  SL8REC.SY2CLRID = SL0KM110.SY2CLRID;
  SL8REC.XDMCD = SL0KM110.XDMCD;
  SL8REC.XQACD = SL0KM110.XQACD;
  SL8REC.XOWCD = SL0KM110.XOWCD;
  SL8REC.PC2INSEG = SL0KM110.PC2INSEG;
  SL8REC.XEGCD = SL0KM110.XEGCD;
  SL8REC.XPGCD = SL0KM110.XPGCD;
  SL8REC.XUMCD = SL0KM110.XUMCD;
  SL8REC.XSLCD = SL0KM110.XSLCD;

          /* Select Set on WORK ORDER DATA BASE*/
   /* ************************************************************/
   /* *** setup the following before i/o sgrp execution:      ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = found - continue                           ****/
   /* ***   +100 = not found - return w/ not fnd msg          ****/
   /* ***   -911 = deadlock - return w/ try again msg         ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS1O ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL8S6(); /* <=== sel set wo header using non stndrd key*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for selset*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1OA";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S1OB";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** fetch next work order header row                    ****/
   /* ***  until an active w/o found or end of set.           ****/
   /* ************************************************************/
  while (SQLCA.VAGen_SQLCODE == 0
   && SL8REC.YWSCD != "01") /* <=== if w/o not active*/
    SL0KS1P(); /* fetch next work order header row*/
  end

  if (SL8REC.YWSCD == "01") /* <=== active w/o exists*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1OC";
    SLWREC.SLWMSGNO = 0042; /* <=== active w/o exists msg*/
    set SL0KM110.XARCD cursor, bold;
  end
end // end SL0KS1O

// fetch next work order header
Function SL0KS1P()
                 /* FETCH NEXT WORK ORDER HEADER ROW*/
   /* ************************************************************/
   /* *** setup the approriate record fields for the IO and   ****/
   /* *** then setup the following before i/o sgrp execution: ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* ***   note: sgrp results will be in record              ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = no more records*/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS1P ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL8F6(); /* fetch next wo header row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for FETCH scan*/
      return;
    else
      SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
      SLWREC.XXXLOCID = "S1PA";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS1P

// check for negative net
Function SL0KS1Q()

   /* ************************************************************/
   /* *** check each size for a negative net.                 ****/
   /* ************************************************************/

  if (SL0KM110.SL0KMADJ[SLWIDX01] != 0)
    SL0KW01.SL0KWQTY = SL0KW01.SL6ONHND[SLWIDX01];
    SL0KW01.SL0KWQTY = SL0KW01.SL0KWQTY - SL0KW01.SL6PKRSV[SLWIDX01];
    SL0KW01.SL0KWQTY = SL0KW01.SL0KWQTY - SL0KW01.SL6STASD[SLWIDX01];
    if (SL0KM110.XIFCD == "01") /* <=== on hand*/
      SL0KW01.SL0KWQTY = SL0KW01.SL0KWQTY + SL0KM110.SL0KMADJ[SLWIDX01];
    else
      SL0KW01.SL0KWQTY = SL0KW01.SL0KWQTY - SL0KM110.SL0KMADJ[SLWIDX01];
    end
    if (SL0KW01.SL0KWQTY < 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1QA";
      SLWREC.SLWMSGNO = 0091;
                                   /* <-- enter to accept, pa2 reject*/
      set SL0KM110.SL0KMADJ[SLWIDX01] skip, bold;
      SLWREC.SLWFTMSW = "N";
    else
      set SL0KM110.SL0KMADJ[SLWIDX01] skip;
    end
  else
    set SL0KM110.SL0KMADJ[SLWIDX01] skip;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS1Q

// write prod/loc audit rec
Function SL0KS1R()

   /* ************************************************************/
   /* *** write product/location audit record                 ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO       ****/
   /* *** note: zzzchgdt & zzzchgtm are setup in sgrp         ****/
   /* *** setup the following before just i/o sgrp execution: ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** note: TA1MAP may be setup once in initialization for****/
   /* ***       that level-use a comment for TA1LOCAT(2) setup****/
   /* *** execute the appropriate sgrp                        ****/
   /* *** note: sgrp results will be in record layout         ****/
   /* *** code the action for the following return codes:     ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = not found - setup not fnd msg              ****/
   /* ***   +100 = EOF                                        ****/
   /* ***   +100 = if rec gt blank,                           ****/
   /* ***            rec updated since last displayed         ****/
   /* ***            note: display new data (in rec)          ****/
   /* ***          else                                       ****/
   /* ***            row deleted since last displayed         ****/
   /* ***            note: clear screen & put keys back       ****/
   /* ***   -803 = duplicate add - setup record exists msg    ****/
   /* ***   -811 = duplicates found - contact programming msg ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***   -911 = deadlock - try again msg                   ****/
   /* ***          note: set same key switch = 'n', if used   ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS1R ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSLA-ADD-VSLAUD02(); /* <=== add prod/loc audit*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWSKYSW = "N";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1RA";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -803) /* <=== for ADD*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1RB";
      SLWREC.SLWMSGNO = 0045; /* <--- record exists msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S1RC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    /* SL02ST1                       ;  <=== clear scrn (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS1R

// validate setaside id
Function SL0KS1S()

   /* ************************************************************/
   /* *** validate the setaside id                            ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup the approriate record fields for the IO       ****/
   /* *** note: zzzchgdt & zzzchgtm are setup in sgrp         ****/
   /* *** setup the following before just i/o sgrp execution: ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** note: TA1MAP may be setup once in initialization for****/
   /* ***       that level-use a comment for TA1LOCAT(2) setup****/
   /* *** execute the appropriate sgrp                        ****/
   /* *** note: sgrp results will be in record layout         ****/
   /* *** code the action for the following return codes:     ****/
   /* ***      0 = successful - continue                      ****/
   /* ***   +100 = not found - setup not fnd msg              ****/
   /* ***   -811 = duplicates found - contact programming msg ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS1S ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSINAI0(); /* <=== setaside inquiry*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1SA";
      SLWREC.SLWMSGNO = 0012; /* <--- not on db msg*/
      set SL0KM110.IN5TRDOC cursor, bold;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1SB";
      SLWREC.SLWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S1SC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    /* SL02ST1                       ;  <=== clear scrn (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS1S

// update setaside itm with adj
Function SL0KS1T()

   /* ************************************************************/
   /* *** update setaside itm with adjustments                ****/
   /* ************************************************************/

  SL0KW01.SL0KWSFL = "N"; /* set setaside flag to no update*/

   /* ************************************************************/
   /* *** add the adjustment qty to the setaside item record  ****/
   /* ************************************************************/

  SLWIDX01 = 1;
  while (SLWIDX01 <= SL0KW01.SL0KWNSZ)
    SLWIDX02 = SL0KW01.SY5SZID[SLWIDX01];
    SL0KW01.SL0KWQTY = INBREC.INBSAQTY[SLWIDX02];
    SL0KW01.SL0KWQTY = SL0KW01.SL0KWQTY + SL0KM110.SL0KMADJ[SLWIDX01];
    INBREC.INBSAQTY[SLWIDX02] = SL0KW01.SL0KWQTY;
    INBREC.INBSATOT = INBREC.INBSATOT + SL0KM110.SL0KMADJ[SLWIDX01];
    if (SL0KW01.SL0KWQTY != 0)
      SL0KW01.SL0KWSFL = "Y";
                                   /* set setaside flag - yes update*/
    end
    SLWIDX01 = SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS1T ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  if (SL0KW01.SL0KWSFL == "Y") /* if setaside flag - yes do update*/

    XSINBR0(); /* <=== replace setaside itm*/

    if (SQLCA.VAGen_SQLCODE == 0)
       /* ** next sentence ***/
    else
      if (SQLCA.VAGen_SQLCODE == +100) /* <=== for REPLACE*/
        SLWREC.SLWERRSW = "Y";
        if (INBREC.INBDATA > " ")
          SLWREC.XXXLOCID = "S1TA";
          SLWREC.SLWMSGNO = 0032;
                                   /* <--- row updated since last read*/
           /* you may want to perform a scrn re-setup*/
        else
          SLWREC.XXXLOCID = "S1TB";
          SLWREC.SLWMSGNO = 0033;
                                   /* <--- row deleted since last read*/
          /* SL02ST1                   ;  <=== clear scrn (empty)*/
        end
        return;
      end
      if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
        SLWREC.SLWSKYSW = "N";
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S1TC";
        SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
        return;
      end
      SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
      SLWREC.XXXLOCID = "S1TD";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      /* SL02ST1                       ;  <=== clear scrn (empty)*/
      return;
    end
  else
    SL0KS1K(); /* delete the empty setaside row*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS1T

// add setaside item record
Function SL0KS1U()

   /* ************************************************************/
   /* *** add a setaside item record                          ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** set up the setaside item record                     ****/
   /* ************************************************************/

  set INBREC empty;
  INBREC.INASAID = INAREC.INASAID;
  INBREC.XWHCD = SL0KM110.XWHCD;
  INBREC.XOWCD = SL0KM110.XOWCD;
  INBREC.XGPCD = SL0KM110.XGPCD;
  INBREC.SY1STNBR = SL0KM110.SY1STNBR;
  INBREC.SY2CLRID = SL0KM110.SY2CLRID;
  INBREC.XDMCD = SL0KM110.XDMCD;
  INBREC.XQACD = SL0KM110.XQACD;
  INBREC.XSDCD = SL0KM110.PC2INSEG;
  INBREC.XSACD = SL0KM110.XEGCD;
  INBREC.XPGCD = SL0KM110.XPGCD;
  INBREC.XUMCD = SL0KM110.XUMCD;

   /* ************************************************************/
   /* *** set setaside flag to no for adding setaside record  ****/
   /* ************************************************************/

  SL0KW01.SL0KWSFL = "N"; /* set setaside add/delete flag no*/

   /* ************************************************************/
   /* *** move the adjustment qty to the setaside item record ****/
   /* ************************************************************/

  SLWIDX01 = 1;
  while (SLWIDX01 <= SL0KW01.SL0KWNSZ)
    SLWIDX02 = SL0KW01.SY5SZID[SLWIDX01];
    INBREC.INBSAQTY[SLWIDX02] = SL0KM110.SL0KMADJ[SLWIDX01];
    INBREC.INBSATOT = INBREC.INBSATOT + SL0KM110.SL0KMADJ[SLWIDX01];
    if (SL0KM110.SL0KMADJ[SLWIDX01] != 0)
      SL0KW01.SL0KWSFL = "Y"; /* set setaside flag to yes for add*/
    end
    SLWIDX01 = SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS1U ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  if (SL0KW01.SL0KWSFL == "Y") /* setaside flag is yes - add record*/
    XSINBA0(); /* <=== add setaside item rec*/

    if (SQLCA.VAGen_SQLCODE == 0)
       /* ** next sentence ***/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
        SLWREC.SLWSKYSW = "N";
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S1UA";
        SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
        return;
      end
      if (SQLCA.VAGen_SQLCODE == -803) /* <=== for ADD*/
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S1UB";
        SLWREC.SLWMSGNO = 0045; /* <--- record exists msg*/
        return;
      end
      SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
      SLWREC.XXXLOCID = "S1UC";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      /* SL02ST1                      ;  <=== clear scrn (empty)*/
      return;
    end
  else
     /* ** next sentence  ***/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS1U

// edit trans & field code
Function SL0KS1V()

   /* ************************************************************/
   /* *** edit transaction against field type                 ****/
   /* ************************************************************/

  if (XITTBL.XITADJFL[sysVar.arrayIndex] == "Y")

    if (SL0KM110.XITCD in XITTBL.XITCD)
      SL0KW01.XIGCD = XITTBL.XIGCD[sysVar.arrayIndex];
    end

    if (SL0KM110.XIFCD == "01")
      if (SL0KW01.XIGCD == "10"
       || SL0KW01.XIGCD == "20"
       || SL0KW01.XIGCD == "30"
       || SL0KW01.XIGCD == "90")
         /* next sentence*/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S1VA";
        SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
        set SL0KM110.XITCD cursor, bold;
      end
    else
      if (SL0KM110.XIFCD == "02"
       && SL0KW01.XIGCD == "60")
         /* next sentence*/
      else
        if (SL0KM110.XIFCD == "04"
         && SL0KW01.XIGCD == "80")
           /* next sentence*/
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "S1VB";
          SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
          set SL0KM110.XITCD cursor, bold;
        end
      end
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1VC";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM110.XITCD cursor, bold;
  end

end // end SL0KS1V

// check for multiple u/c, po#
Function SL0KS1W()
   /* ************************************************************/
   /* *** this statement group check for multiple units per   ****/
   /* *** case, po # and Cole Haan products.                  ****/
   /* ************************************************************/

   /* DLVRUSA CHANGES - All SL6REC has been changed to VSYLOC02*/

  SL0KW01.SL0KWPCN = SL0KM110.PC3PONBR; /* <=== po nbr*/
   /* DLVRUSA STARTS - SAIRAM-SAPPO*/
  SL0KW01.SL0KWSPCN = SL0KM110.PC-SAP-PO-NBR; /* <=== sap po nbr*/

  if (SL0KM110.XWHCD == "02")
    /* DLVRUSA ENDS   - SAIRAM-SAPPO*/
    if (SL0KM110.PC3PONBR != -1
     && SL0KM110.SY1UNPCS != -1)
      return;
    end
    /* DLVRUSA STARTS - SAIRAM-SAPPO*/
  else
    if (SL0KM110.PC3PONBR != -1
     && SL0KM110.PC-SAP-PO-NBR != "*"
     && SL0KM110.SY1UNPCS != -1)
      return;
    end
  end
   /* DLVRUSA ENDS   - SAIRAM-SAPPO*/

   /* ************************************************************/
   /* *** setup the selection criteria                        ****/
   /* ************************************************************/

  set VSYLOC02 empty;
  VSYLOC02.XWHCD = SL0KM110.XWHCD;
  VSYLOC02.XARCD = SL0KM110.XARCD;
  VSYLOC02.SL4ZONE = SL0KM110.SL4ZONE;
  VSYLOC02.SL5LOCTN = SL0KM110.SL5LOCTN;
  VSYLOC02.XGPCD = SL0KM110.XGPCD;
  VSYLOC02.SY1STNBR = SL0KM110.SY1STNBR;
  VSYLOC02.SY2CLRID = SL0KM110.SY2CLRID;
  VSYLOC02.XDMCD = SL0KM110.XDMCD;
  VSYLOC02.XQACD = SL0KM110.XQACD;
  VSYLOC02.XOWCD = SL0KM110.XOWCD;
  VSYLOC02.PC2INSEG = SL0KM110.PC2INSEG;
  VSYLOC02.XEGCD = SL0KM110.XEGCD;
  VSYLOC02.XPGCD = SL0KM110.XPGCD;
  VSYLOC02.XUMCD = SL0KM110.XUMCD;
  VSYLOC02.XSLCD = SL0KM110.XSLCD;
  VSYLOC02.SY1UNPCS = SL0KM110.SY1UNPCS;
  VSYLOC02.SY5SZID = -1;
  VSYLOC02.SL2PALET = "*";
  VSYLOC02.SL2CASE = SL0KM110.SL2CASE;
  VSYLOC02.PC3PONBR = SL0KW01.SL0KWSPN;
   /* DLVRUSA STARTS - SAIRAM-SAPPO*/
  VSYLOC02.PC-SAP-PO-NBR = SL0KW01.SL0KWSSPN;
   /* DLVRUSA ENDS   - SAIRAM-SAPPO*/
  VSYLOC02.SL1CRTDT = -1;

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS1W ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

   /* DLVRUSA STARTS - SAIRAM VSYLOC02*/
   /* XSSL6S5;                     /* <=== select set prd/loc*/
  XSSLS-S5-VSYLOC02(); /* <=== select set prd/loc*/
   /* DLVRUSA ENDS   - SAIRAM VSYLOC02*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (SL0KM110.SY1UNPCS == -1)
      SL0KW01.SY1UNPCS = VSYLOC02.SY1UNPCS; /* <=== units per case*/
    end
    if (SL0KM110.PC3PONBR == -1)
      SL0KW01.SL0KWPCN = VSYLOC02.PC3PONBR; /* <=== po nbr*/
    end
    /* DLVRUSA STARTS - SAIRAM-SAPPO*/
    if (SL0KM110.PC-SAP-PO-NBR == "*")
      SL0KW01.SL0KWSPCN = VSYLOC02.PC-SAP-PO-NBR; /* <=== sap po nbr*/
    end
    /* DLVRUSA ENDS   - SAIRAM-SAPPO*/
    if (VSYLOC02.XBCCD == "08" /* Cole haan*/
     && SL0KM110.IN5TRDCD == "S") /* setaside*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1WA";
      set SL0KM110.IN5TRDCD bold, cursor;
      SLWREC.SLWMSGNO = 0430; /* sas not valid for prod*/
      return;
    end
  end

  if (SQLCA.VAGen_SQLCODE == +100) /* Row not found*/
    if (SLWREC.SLWSEXSW == "N") /* Special exit switch*/
      SLWREC.SLWSEXSW = "Y";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1WB";
      set SL0KM110.XARCD cursor;
      SLWREC.SLWMSGNO = 417; /* No product at location*/
      if (SL0KM110.SY1UNPCS == -1)
        SL0KM110.SY1UNPCS = 0;
      end
      if (SL0KM110.PC3PONBR == -1)
        SL0KM110.PC3PONBR = 0;
      end
      /* DLVRUSA STARTS - SAIRAM-SAPPO*/
      if (SL0KM110.PC-SAP-PO-NBR == "*")
        SL0KM110.PC-SAP-PO-NBR = " ";
      end
      /* DLVRUSA ENDS   - SAIRAM-SAPPO*/
      return;
    else
      SLWREC.SLWSEXSW = "N";
      return;
    end
  end

  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1WC";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE != 0)
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S1WD";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

  while (SQLCA.VAGen_SQLCODE == 0
   && SLWREC.SLWERRSW == "N")
    if (VSYLOC02.PC3PONBR != SL0KW01.SL0KWPCN /* <=== PO number*/
     && SL0KM110.PC3PONBR == -1)             
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1WE";
      set SL0KM110.PC3PONBR cursor, bold;
      SLWREC.SLWMSGNO = 0413; /* <--- multiple PO nbrs*/
    end
    /* DLVRUSA STARTS - SAIRAM-SAPPO*/
    if (VSYLOC02.PC-SAP-PO-NBR != SL0KW01.SL0KWSPCN /* <=== sap PO number*/
     && SL0KM110.PC-SAP-PO-NBR == "*")             
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1WJ";
      set SL0KM110.PC-SAP-PO-NBR cursor, bold;
      SLWREC.SLWMSGNO = 0481; /* <--- multiple sap PO nbrs*/
    end
    /* DLVRUSA ENDS   - SAIRAM-SAPPO*/
    if (VSYLOC02.SY1UNPCS != SL0KW01.SY1UNPCS /* <=== units per case*/
     && SL0KM110.SY1UNPCS == -1)             
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1WF";
      set SL0KM110.SL0KMTL1 skip;
      set SL0KM110.SY1UNPCS cursor, bold;
      SLWREC.SLWMSGNO = 0412; /* <--- multiple units per case*/
    end
    if (SLWREC.SLWERRSW != "Y")
      /* DLVRUSA STARTS - SAIRAM VSYLOC02*/
      /* XSSL6F5;                 /* <=== fetch next row*/
      XSSLS-N5-VSYLOC02(); /* <=== fetch next row*/
      /* DLVRUSA ENDS   - SAIRAM VSYLOC02*/
    else
      SL0KSXD(); /* <=== close scan*/
    end
  end

  if (SLWREC.SLWERRSW != "Y")
    if (SL0KM110.SY1UNPCS == -1)
      SL0KM110.SY1UNPCS = SL0KW01.SY1UNPCS; /* <=== units per case*/
    end
    if (SL0KM110.PC3PONBR == -1)
      SL0KM110.PC3PONBR = SL0KW01.SL0KWPCN; /* <=== po nbr*/
      SL0KW01.SL0KWSPN = SL0KW01.SL0KWPCN; /* <=== po nbr*/
    end
    /* DLVRUSA STARTS - SAIRAM-SAPPO*/
    if (SL0KM110.PC-SAP-PO-NBR == "*")
      SL0KM110.PC-SAP-PO-NBR = SL0KW01.SL0KWSPCN; /* <=== sap po nbr*/
      SL0KW01.SL0KWSSPN = SL0KW01.SL0KWSPCN; /* <=== sap po nbr*/
    end
    /* DLVRUSA ENDS   - SAIRAM-SAPPO*/
  end

  if (SQLCA.VAGen_SQLCODE == 0 /* <=== for any initial db access*/
   || SQLCA.VAGen_SQLCODE == 100) /* <=== for any initial db access*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1WG";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -811) /* <=== for INQUIRY*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1WH";
    SLWREC.SLWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
    return;
  end

  SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
  SLWREC.XXXLOCID = "S1WI";
  SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
  return;

end // end SL0KS1W

// write prod/loc audit (new)
Function SL0KS21()

   /* ************************************************************/
   /* *** this statement group writes the product/location    ****/
   /* *** audit records for thr new product                   ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** Setup the product/location audit record,            ****/
   /* *** except for the size and quantity.                   ****/
   /* ************************************************************/

  set VSLAUD02 empty; /* <=== product/location audit*/
  VSLAUD02.XWHCD = SL0KM210.XWHCD;
  VSLAUD02.IN5TRDCD = SL0KM210.IN5TRDCD;
  SL0KW21.SL0KWDOC = SL0KM210.IN5TRDOC;
  VSLAUD02.IN5TRPRT = SL0KW21.SL0KWLST;
  VSLAUD02.IN5TRDOC = SL0KM210.IN5TRDOC;
  VSLAUD02.IN5TRSUB = SL0KM210.IN5TRSUB;
  VSLAUD02.XGPCD = SL0KM210.SL0KWGPC;
  VSLAUD02.SY1STNBR = SL0KM210.SL0KWSTY;
  VSLAUD02.SY2CLRID = SL0KM210.SL0KWCLR;
  VSLAUD02.XDMCD = SL0KM210.SL0KWDIM;
  VSLAUD02.XQACD = SL0KM210.SL0KWQLT;
  VSLAUD02.XOWCD = SL0KM210.SL0KWOWN;
  VSLAUD02.XSDCD = SL0KM210.SL0KWISG;
  VSLAUD02.XSACD = SL0KM210.SL0KWXEG;
  VSLAUD02.XPGCD = SL0KM210.SL0KWPKG;
  VSLAUD02.XUMCD = SL0KM210.SL0KWUOM;
  VSLAUD02.XSLCD = SL0KM210.SL0KWSLC;
  VSLAUD02.XIFCD = "01";
  VSLAUD02.XITCD = SL0KM210.XITCD;
  VSLAUD02.XIRCD = SL0KM210.XIRCD;
  VSLAUD02.IN5TRREF = SL0KM210.IN5TRREF;
  VSLAUD02.XARCD = SL0KM210.XARCD;
  VSLAUD02.SL4ZONE = SL0KM210.SL4ZONE;
  VSLAUD02.SL5LOCTN = SL0KM210.SL5LOCTN;

   /* ************************************************************/
   /* *** Write a product/location audit record for each size ****/
   /* *** that has been adjusted.                             ****/
   /* ************************************************************/

  SLWIDX01 = 1;
  while (SLWIDX01 <= SL0KW02.SL0KWNSZ
   && SLWREC.SLWERRSW == "N")
    if (SL0KM210.SL0KMQTY[SLWIDX01] != 0)
      VSLAUD02.SY5SZID = SL0KW02.SY5SZID[SLWIDX01];
      VSLAUD02.SLATRQTY = SL0KM210.SL0KMQTY[SLWIDX01];
      SL0KS1R(); /* <=== write prod/loc audit*/
    end
    SLWIDX01 = SLWIDX01 + 1;
  end
   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS21

// add or modify prd/loc
Function SL0KS22()
   /* ************************************************************/
   /* *** add or modify product/location record               ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup the product/location key for the select unique****/
   /* ************************************************************/

   /* DLVRUSA CHANGES - All SL6REC has been changed to VSYLOC02*/

  set VSYLOC02 empty;

  VSYLOC02.XWHCD = SL0KM210.XWHCD;
  VSYLOC02.XARCD = SL0KM210.XARCD;
  VSYLOC02.SL4ZONE = SL0KM210.SL4ZONE;
  VSYLOC02.SL5LOCTN = SL0KM210.SL5LOCTN;
  VSYLOC02.XGPCD = SL0KM210.SL0KWGPC;
  VSYLOC02.SY1STNBR = SL0KM210.SL0KWSTY;
  VSYLOC02.SY2CLRID = SL0KM210.SL0KWCLR;
  VSYLOC02.XDMCD = SL0KM210.SL0KWDIM;
  VSYLOC02.XQACD = SL0KM210.SL0KWQLT;
  VSYLOC02.XOWCD = SL0KM210.SL0KWOWN;
  VSYLOC02.PC2INSEG = SL0KM210.SL0KWISG;
  VSYLOC02.XEGCD = SL0KM210.SL0KWXEG;
  VSYLOC02.XPGCD = SL0KM210.SL0KWPKG;
  VSYLOC02.XUMCD = SL0KM210.SL0KWUOM;
  VSYLOC02.XSLCD = SL0KM210.SL0KWSLC;
  VSYLOC02.SY1UNPCS = SL0KM210.SL0KMUT2;
  VSYLOC02.SY5SZID = SL0KW02.SY5SZID[SLWIDX01];
  VSYLOC02.SL2PALET = SL0KWTQ.SL2PALET;
  VSYLOC02.SL2CASE = SL0KWTQ.SL2CASE;
  VSYLOC02.PC3POIDT = SL0KWTQ.PC3POIDT;
  VSYLOC02.PCFSECD = SL0KWTQ.PCFSECD;
  VSYLOC02.FY1FCTYC = SL0KWTQ.FY1FCTYC;
  VSYLOC02.PC4ORTYP = SL0KWTQ.PC4ORTYP;
  VSYLOC02.PC3PONBR = SL0KWTQ.PC3PONBR;
   /* DLVRUSA STARTS - SAIRAM-SAPPO*/
  VSYLOC02.PC-SAP-PO-NBR = SL0KWTQ.PC-SAP-PO-NBR;
   /* DLVRUSA ENDS   - SAIRAM-SAPPO*/
  VSYLOC02.SL1CRTDT = SL0KWTQ.SL1CRTDT;

  if (SL0KW02.SL0KW-CH-STY-FL == "Y") /* Cole Haan Product*/
    VSYLOC02.XBCCD = "08";
  else
    VSYLOC02.XBCCD = "  ";
  end

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS22 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  if (VSYLOC02.SY1UNPCS == -1) /* Units/case wildcard*/
    /* DLVRUSA STARTS - SAIRAM VSYLOC02*/
    /* XSSL6I0;                   /* Select without units/case*/
    XSSLS-S-VSYLOC02(); /* Select without units/case*/
    /* DLVRUSA ENDS   - SAIRAM VSYLOC02*/
  else
    /* DLVRUSA STARTS - SAIRAM VSYLOC02*/
    /* XSSL6I1;                   /* Select with units/case*/
    XSSLS-SA-VSYLOC02(); /* Select with units/case*/
    /* DLVRUSA ENDS   - SAIRAM VSYLOC02*/
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    VSYLOC02.SL6ONHND = VSYLOC02.SL6ONHND + SL0KW02.SL0KWQT3;
    SL0KS1J(); /* <=== modify prod/loc*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
      VSYLOC02.SL6ONHND = SL0KW02.SL0KWQT3;
      SL0KS9D(); /* <=== add prod/loc*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWSKYSW = "N";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S22A";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S22B";
      SLWREC.SLWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S22C";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

end // end SL0KS22

// check for product assignment
Function SL0KS23()

   /* ************************************************************/
   /* *** check for product assignment                        ****/
   /* ************************************************************/

  set SL7REC empty;
  SL7REC.XWHCD = SL0KM210.XWHCD;
  SL7REC.XARCD = SL0KM210.XARCD;
  SL7REC.SL4ZONE = SL0KM210.SL4ZONE;
  SL7REC.SL5LOCTN = SL0KM210.SL5LOCTN;
  SL7REC.XGPCD = SL0KM210.SL0KWGPC;
  SL7REC.SY1STNBR = SL0KM210.SL0KWSTY;
  SL7REC.SY2CLRID = SL0KM210.SL0KWCLR;
  SL7REC.XDMCD = SL0KM210.SL0KWDIM;
  SL7REC.XQACD = SL0KM210.SL0KWQLT;
  SL7REC.XOWCD = SL0KM210.SL0KWOWN;
  SL7REC.XSDCD = SL0KM210.SL0KWISG;
  SL7REC.XSACD = SL0KM210.SL0KWXEG;
  SL7REC.XPGCD = SL0KM210.SL0KWPKG;
  SL7REC.XUMCD = SL0KM210.SL0KWUOM;
  SL7REC.SY5SZID = -1;
  SL7REC.XXXSTAT = "*";
  SLVREC.SLVSDT = 0; /* <=== start date*/
  SLVREC.SLVEDT = X2CREC.X2CCURDT; /* <=== end date*/

  SL0KS24(); /* <=== select set on prod assignment*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SLWIDX03 = 1;
  while (SLWIDX03 <= SL0KW02.SL0KWNSZ
   && SLWREC.SLWERRSW != "Y")
    if (SL0KW02.SL6ONHND[SLWIDX03] > 0)
      while (SL0KW02.SY5SZID[SLWIDX03] != SL7REC.SY5SZID
       && SLWREC.SLWERRSW != "Y")
        SL0KS25(); /* <=== check for prod assignment for size*/
      end
      if (SLWREC.SLWERRSW == "N")
        if (SL0KW02.SY5SZID[SLWIDX03] == SL7REC.SY5SZID
         && SL7REC.XXXSTAT == "A")
           /* ** product assignment setup*/
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "S23A";
          SLWREC.SLWMSGNO = 0132; /* <=== prod assgn not setup*/
          set SL0KM210.SL0KWSTY cursor, bold;
        end
      end
    end
    SLWIDX03 = SLWIDX03 + 1;
  end

  SL0KSXE(); /* <=== close scan*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS23

// select set on prod assign
Function SL0KS24()

   /* ************************************************************/
   /* *** select set on the product assignment                ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS24 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL7S7(); /* <=== select set prod assign*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* ** next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== setinq eof*/
      SL0KSXE(); /* <=== close scan*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S24A";
      SLWREC.SLWMSGNO = 0132; /* <--- prod assign not setup*/
      set SL0KM210.SL0KWSTY cursor, bold;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWSKYSW = "N";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S24B";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S24C";
      SLWREC.SLWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S24D";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    /* SL02ST1                       ;  <=== clear scrn (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS24

// fetch next prod asgn rec
Function SL0KS25()

   /* ************************************************************/
   /* *** fetch next product assignment record                ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS25 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL7F7(); /* <=== fetch next prod assign*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== SETINQ EOF*/
      SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
      SLWREC.XXXLOCID = "S25A";
      SLWREC.SLWMSGNO = 0132; /* <--- prod asign not setup*/
      set SL0KM210.SL0KWSTY cursor, bold;
    else
      SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
      SLWREC.XXXLOCID = "S25B";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      /* SL02ST1                       ;  <=== clear scrn (empty)*/
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS25

// get new prod. information
Function SL0KS26()
   /* ************************************************************/
   /* *** this statement group check if row exists for new    ****/
   /* *** key and if row exists uses the first fetched units  ****/
   /* *** per case for the new units per case                 ****/
   /* ************************************************************/

   /* DLVRUSA CHANGES - All SL6REC has been changed to VSYLOC02*/

  SL0KW02.SL0KWUNT = SL0KM210.SL0KMUT2; /* Units/case*/

   /* ************************************************************/
   /* *** setup the selection criteria                        ****/
   /* ************************************************************/

  set VSYLOC02 empty;
  VSYLOC02.XWHCD = SL0KM210.XWHCD;
  VSYLOC02.XARCD = SL0KM210.XARCD;
  VSYLOC02.SL4ZONE = SL0KM210.SL4ZONE;
  VSYLOC02.SL5LOCTN = SL0KM210.SL5LOCTN;
  VSYLOC02.XGPCD = SL0KM210.SL0KWGPC;
  VSYLOC02.SY1STNBR = SL0KM210.SL0KWSTY;
  VSYLOC02.SY2CLRID = SL0KM210.SL0KWCLR;
  VSYLOC02.XDMCD = SL0KM210.SL0KWDIM;
  VSYLOC02.XQACD = SL0KM210.SL0KWQLT;
  VSYLOC02.XOWCD = SL0KM210.SL0KWOWN;
  VSYLOC02.PC2INSEG = SL0KM210.SL0KWISG;
  VSYLOC02.XEGCD = SL0KM210.SL0KWXEG;
  VSYLOC02.XPGCD = SL0KM210.SL0KWPKG;
  VSYLOC02.XUMCD = SL0KM210.SL0KWUOM;
  VSYLOC02.XSLCD = SL0KM210.SL0KWSLC;
  VSYLOC02.SY1UNPCS = SL0KM210.SL0KMUT2;
  VSYLOC02.SY5SZID = -1;
  VSYLOC02.SL2PALET = "*";
  VSYLOC02.SL2CASE = " ";
  VSYLOC02.PC3PONBR = -1;
   /* DLVRUSA STARTS - SAIRAM-SAPPO*/
  VSYLOC02.PC-SAP-PO-NBR = "*";
   /* DLVRUSA ENDS   - SAIRAM-SAPPO*/
  VSYLOC02.SL1CRTDT = -1;

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS26 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

   /* DLVRUSA STARTS - SAIRAM VSYLOC02*/
   /* XSSL6S5;                     /* <=== select set prd/loc*/
  XSSLS-S5-VSYLOC02(); /* <=== select set prd/loc*/
   /* DLVRUSA ENDS   - SAIRAM VSYLOC02*/

  if (SQLCA.VAGen_SQLCODE == 0)
    SL0KW02.SL0KWIFL = "N"; /* <=== invalid size flag*/
    SL0KW02.SL0KWNTF = "N"; /* <=== adjust by net flag*/
    if (SL0KM210.SL0KMUT2 == -1 /* Wildcard units/case*/
     && SL5REC.YLTCD != "06"    /* and not highrise*/
     && SL5REC.YLTCD != "22")   /* and not handstack*/
      SL0KW02.SL0KWUNT = VSYLOC02.SY1UNPCS; /* Units/case*/
    end
    while (SQLCA.VAGen_SQLCODE == 0
     && SLWREC.SLWERRSW == "N")
      if (VSYLOC02.SY1UNPCS != SL0KW02.SL0KWUNT /* Units/case different*/
       && SL0KM210.SL0KMUT2 == -1               /* and units/case wildcard*/
       && SL5REC.YLTCD != "06"                  /* and not highrise*/
       && SL5REC.YLTCD != "22")                 /* and not handstack*/
        if (VSYLOC02.SY1UNPCS != SL0KW02.SY1UNPCS) /* Not same as old*/
          if (SL0KW02.SY1UNPCS == SL0KW02.SL0KWUNT /* Old same as new*/
           && SL0KM210.XGPCD == SL0KM210.SL0KWGPC  
           && SL0KM210.SY1STNBR == SL0KM210.SL0KWSTY
           && SL0KM210.SY2CLRID == SL0KM210.SL0KWCLR
           && SL0KM210.XDMCD == SL0KM210.SL0KWDIM  
           && SL0KM210.XQACD == SL0KM210.SL0KWQLT  
           && SL0KM210.PC2INSEG == SL0KM210.SL0KWISG
           && SL0KM210.XEGCD == SL0KM210.SL0KWXEG  
           && SL0KM210.XSLCD == SL0KM210.SL0KWSLC  
           && SL0KM210.XPGCD == SL0KM210.SL0KWPKG  
           && SL0KM210.XUMCD == SL0KM210.SL0KWUOM  
           && SL0KM210.XOWCD == SL0KM210.SL0KWOWN)
            SL0KW02.SL0KWUNT = VSYLOC02.SY1UNPCS; /* Units/case*/
            SL0KW02.SL0KWNPQ = 0; /* New product quantity*/
          else
            SLWREC.SLWERRSW = "Y"; /* Indicate error*/
            SLWREC.XXXLOCID = "S26A"; /* Error location*/
            set SL0KM210.SL0KMTL2 skip;
            set SL0KM210.SL0KMUT2 cursor, bold; /* Highlight*/
            SLWREC.SLWMSGNO = 412; /* Multiple units/case found*/
            return;
          end
        end
      end
      SL0KS27(); /* total qty for qty case check*/
    end
    SL0KSXD(); /* <=== close scan*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== setinq eof*/
      SL0KSXD(); /* <=== close scan*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SL0KSXD(); /* <=== close scan*/
      SLWREC.SLWSKYSW = "N";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S26B";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SL0KSXD(); /* <=== close scan*/
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S26C";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

end // end SL0KS26

// calc. qty exist. for new prod
Function SL0KS27()
   /* ************************************************************/
   /* *** this statement group calculate quantities existing  ****/
   /* *** for new product key which is used in case qty test  ****/
   /* ************************************************************/

   /* DLVRUSA CHANGES - All SL6REC has been changed to VSYLOC02*/

  if (VSYLOC02.SY1UNPCS != SL0KW02.SL0KWUNT /* Units/case different*/
   && SL5REC.YLTCD != "06"                  /* and not highrise*/
   && SL5REC.YLTCD != "22")                 /* and not handstack*/
    SL0KS1N(); /* <=== FETCH NEXT PROD/LOC*/
    return;
  end
                     /* <=== search the ws size tbl for the size*/
  SLWIDX01 = 1;
  while (SLWIDX01 <= 40
   && VSYLOC02.SY5SZID != SL0KW02.SY5SZID[SLWIDX01])
    SLWIDX01 = SLWIDX01 + 1;
  end

  if (SLWIDX01 == 41)
    SL0KW02.SL0KWIFL = "Y"; /* <=== invalid size flag*/
    SL0KS1N(); /* <=== FETCH NEXT PROD/LOC*/
    return;
  end

  SL0KW02.SL0KWNPQ = SL0KW02.SL0KWNPQ + VSYLOC02.SL6ONHND;

   /* ************************************************************/
   /* *** fetch the next product/location record              ****/
   /* ************************************************************/

  SL0KS1N(); /* <=== FETCH NEXT*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS27

// check if inv needs to be updt
Function SL0KS28()

   /* ************************************************************/
   /* *** check to see if the inventory files need to be      ****/
   /* *** updated                                             ****/
   /* ************************************************************/

  SL0KW21.SL0KWUIN = "Y"; /* <=== update inv flag*/

  if (SL0KM210.XGPCD != SL0KM210.SL0KWGPC)
    return;
  end

  if (SL0KM210.SY1STNBR != SL0KM210.SL0KWSTY)
    return;
  end

  if (SL0KM210.SY2CLRID != SL0KM210.SL0KWCLR)
    return;
  end

  if (SL0KM210.XDMCD != SL0KM210.SL0KWDIM)
    return;
  end

  if (SL0KM210.XQACD != SL0KM210.SL0KWQLT)
    return;
  end

  if (SL0KM210.PC2INSEG != SL0KM210.SL0KWISG)
    return;
  end

  if (SL0KM210.XEGCD != SL0KM210.SL0KWXEG)
    return;
  end

  if (SL0KM210.XPGCD != SL0KM210.SL0KWPKG)
    return;
  end

  if (SL0KM210.XUMCD != SL0KM210.SL0KWUOM)
    return;
  end

  if (SL0KM210.XOWCD != SL0KM210.SL0KWOWN)
    return;
  end

  SL0KW21.SL0KWUIN = "N"; /* <=== update inv flag*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS28

// validate current product info
Function SL0KS2A()

   /* ************************************************************/
   /* *** make one time table accesses for auxillary and/or   ****/
   /* *** main data                                           ****/
   /* *** note: first time executions before beginning a loop ****/
   /* ***       might also be performed                       ****/
   /* ************************************************************/

   /* ************************************************************/
   /* ***  validate current product information               ****/
   /* ************************************************************/

  PKNREC.XGPCD = SL0KM210.XGPCD;
  PKNREC.SY1STNBR = SL0KM210.SY1STNBR;
  PKNREC.SY2CLRID = SL0KM210.SY2CLRID;
  PKNREC.XDMCD = SL0KM210.XDMCD;

  SL0KSCI(); /* <===  obtain style and color data*/

  if (SQLCA.VAGen_SQLCODE == +0)
    SL0KM210.SY1SSTNM = PKNREC.SY1SSTNM;
    SL0KM210.SY2CLRAB = PKNREC.SY2CLRAB;
    if (SL0KM210.XUMCD == "  ")
      SL0KM210.XUMCD = "01";
    end
    if (SL0KW02.SL0KW-CH-STY-FL == "Y" /* New Prod is Cole Haan*/
     && PKNREC.XBCCD != "08")          /* Current Prod not Cole Haan*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2AA";
      SLWREC.SLWMSGNO = 0431; /* product brand mismatch*/
      set SL0KM210.XDMCD cursor, bold;
      set SL0KM210.SY2CLRID cursor, bold;
      set SL0KM210.SY1STNBR cursor, bold;
      set SL0KM210.XGPCD cursor, bold;
      return;
    end
    if (SL0KW02.SL0KW-CH-STY-FL != "Y" /* New Prod is not Cole Haan*/
     && PKNREC.XBCCD == "08")          /* Current Prod is Cole Haan*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2AB";
      SLWREC.SLWMSGNO = 0431; /* product brand mismatch*/
      set SL0KM210.XDMCD cursor, bold;
      set SL0KM210.SY2CLRID cursor, bold;
      set SL0KM210.SY1STNBR cursor, bold;
      set SL0KM210.XGPCD cursor, bold;
      return;
    end
    if (PKNREC.XBCCD == "08") /* Current Prod is Cole Haan*/
      SL0KW02.SL0KW-CH-STY-FL = "Y"; /* Cole Haan Product*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <--- rec not found*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2AA";
      SLWREC.SLWMSGNO = 0043;
      set SL0KM210.XDMCD cursor, bold;
      set SL0KM210.SY2CLRID cursor, bold;
      set SL0KM210.SY1STNBR cursor, bold;
      set SL0KM210.XGPCD cursor, bold;
      return;
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2AB";
      SLWREC.SLWMSGNO = 0001;
      set SL0KM210.XDMCD cursor, bold;
      set SL0KM210.SY2CLRID cursor, bold;
      set SL0KM210.SY1STNBR cursor, bold;
      set SL0KM210.XGPCD cursor, bold;
      return;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS2A

// validate new product info
Function SL0KS2B()

   /* ************************************************************/
   /* *** make one time table accesses for auxillary and/or   ****/
   /* *** main data                                           ****/
   /* *** note: first time executions before beginning a loop ****/
   /* ***       might also be performed                       ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** validate new product information                    ****/
   /* ************************************************************/

  PKNREC.XGPCD = SL0KM210.SL0KWGPC;
  PKNREC.SY1STNBR = SL0KM210.SL0KWSTY;
  PKNREC.SY2CLRID = SL0KM210.SL0KWCLR;
  PKNREC.XDMCD = SL0KM210.SL0KWDIM;
  SL0KW02.SL0KW-CH-STY-FL = "N"; /* Cole Haan Style Flag*/

  SL0KSCI(); /* <===  obtain style and color data*/

  if (SQLCA.VAGen_SQLCODE == +0)
    SL0KM210.SL0KMSYN = PKNREC.SY1SSTNM;
    SL0KM210.SL0KMCLI = PKNREC.SY2CLRAB;
    if (SL0KM210.SL0KWUOM == "  ")
      SL0KM210.SL0KWUOM = "01";
    end
    if (PKNREC.XBCCD == "08") /* Cole Haan*/
      SL0KW02.SL0KW-CH-STY-FL = "Y"; /* Cole Haan Style Flag*/
    end

  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <--- rec not found*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2BA";
      SLWREC.SLWMSGNO = 0043;
      set SL0KM210.SL0KWDIM cursor, bold;
      set SL0KM210.SL0KWCLR cursor, bold;
      set SL0KM210.SL0KWSTY cursor, bold;
      set SL0KM210.SL0KWGPC cursor, bold;
      return;
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2BB";
      SLWREC.SLWMSGNO = 0001;
      set SL0KM210.SL0KWDIM cursor, bold;
      set SL0KM210.SL0KWCLR cursor, bold;
      set SL0KM210.SL0KWSTY cursor, bold;
      set SL0KM210.SL0KWGPC cursor, bold;
      return;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS2B

// check if work order exists
Function SL0KS2C()
        /* VERIFY IF WORK ORDER exists for product/location*/
   /* ************************************************************/
   /* *** Verify there are no outstanding work orders for this****/
   /* ***  'from' location. This process uses the SL8REC and  ****/
   /* *** accesses the work order header not using the standard **/
   /* *** key to the file.                                    ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** set up the appropiate fields for selection in i/o   ****/
   /* ************************************************************/

  set SL8REC empty;

  SL8REC.XWHCD = SL0KM210.XWHCD;
  SL8REC.SL8FRAR = SL0KM210.XARCD;
  SL8REC.SL8FRZN = SL0KM210.SL4ZONE;
  if (SL0KM210.SL5LOCTN == " ")
    SL8REC.SL8FRLC = "000000";
  else
    SL8REC.SL8FRLC = SL0KM210.SL5LOCTN;
  end
  SL8REC.XGPCD = SL0KM210.XGPCD;
  SL8REC.SY1STNBR = SL0KM210.SY1STNBR;
  SL8REC.SY2CLRID = SL0KM210.SY2CLRID;
  SL8REC.XDMCD = SL0KM210.XDMCD;
  SL8REC.XQACD = SL0KM210.XQACD;
  SL8REC.XOWCD = SL0KM210.XOWCD;
  SL8REC.PC2INSEG = SL0KM210.PC2INSEG;
  SL8REC.XEGCD = SL0KM210.XEGCD;
  SL8REC.XPGCD = SL0KM210.XPGCD;
  SL8REC.XUMCD = SL0KM210.XUMCD;
  SL8REC.XSLCD = SL0KM210.XSLCD;

          /* Select Set on WORK ORDER DATA BASE*/
   /* ************************************************************/
   /* *** setup the following before i/o sgrp execution:      ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = found - continue                           ****/
   /* ***   +100 = not found - return w/ not fnd msg          ****/
   /* ***   -911 = deadlock - return w/ try again msg         ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS2C ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL8S6(); /* <=== sel set wo header using non stndrd key*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for selset*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2CA";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S2CB";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** fetch next work order header row                    ****/
   /* ***  until an active w/o found or end of set.           ****/
   /* ************************************************************/
  while (SQLCA.VAGen_SQLCODE == 0
   && SL8REC.YWSCD != "01") /* <=== if w/o not active*/
    SL0KS1P(); /* fetch next work order header row*/
  end

  if (SL8REC.YWSCD == "01") /* <=== active w/o exists*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S2CC";
    SLWREC.SLWMSGNO = 0042; /* <=== active w/o exists msg*/
    set SL0KM210.XARCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of statement group                              ****/
   /* ************************************************************/
end // end SL0KS2C

// validate area/zone
Function SL0KS2D()

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS2D ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL4I0(); /* <=== std area/zone inquiry*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2DA";
      SLWREC.SLWMSGNO = 0012; /* <--- not on db msg*/
      set SL0KM210.SL4ZONE cursor, bold;
      set SL0KM210.XARCD cursor, bold;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWSKYSW = "N";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2DB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2DC";
      SLWREC.SLWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S2DE";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    /* SL02ST1                       ;  <=== clear scrn (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS2D

// find location
Function SL0KS2E()

   /* ************************************************************/
   /* ***         find locaiton                               ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS2E ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL5I0(); /* <=== std location inquiry*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2EA";
      SLWREC.SLWMSGNO = 0012; /* <--- not on db msg*/
      set SL0KM210.SL5LOCTN cursor, bold;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWSKYSW = "N";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2EB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2EC";
      SLWREC.SLWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S2EE";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    /* SL02ST1                       ;  <=== clear scrn (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS2E

// compare curr and new prod key
Function SL0KS2F()
   /* ************************************************************/
   /* *** compare the current product key against the new     ****/
   /* *** product key,  they shouldn't be the same            ****/
   /* ************************************************************/

  if (SL0KM210.XGPCD != SL0KM210.SL0KWGPC)
    return;
  end

  if (SL0KM210.SY1STNBR != SL0KM210.SL0KWSTY)
    return;
  end

  if (SL0KM210.SY2CLRID != SL0KM210.SL0KWCLR)
    return;
  end

  if (SL0KM210.XDMCD != SL0KM210.SL0KWDIM)
    return;
  end

  if (SL0KM210.XQACD != SL0KM210.SL0KWQLT)
    return;
  end

  if (SL0KM210.PC2INSEG != SL0KM210.SL0KWISG)
    return;
  end

  if (SL0KM210.XEGCD != SL0KM210.SL0KWXEG)
    return;
  end

  if (SL0KM210.XSLCD != SL0KM210.SL0KWSLC)
    return;
  end

  if (SL0KM210.XPGCD != SL0KM210.SL0KWPKG)
    return;
  end

  if (SL0KM210.XUMCD != SL0KM210.SL0KWUOM)
    return;
  end

  if (SL0KM210.XOWCD != SL0KM210.SL0KWOWN)
    return;
  end

  if (SL0KM210.SL0KMUT1 != SL0KM210.SL0KMUT2)
    return;
  end

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "S2FA";
  SLWREC.SLWMSGNO = 0122; /* <=== new prd same as curr*/
  set SL0KM210.SL0KWCLR cursor, bold;
  set SL0KM210.SL0KWSTY cursor, bold;

end // end SL0KS2F

// move sizes to ws size tbl
Function SL0KS2G()

   /* ************************************************************/
   /* *** this statement group moves the internal size and    ****/
   /* *** description to the ws size table.                   ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** clear working storage size table                    ****/
   /* ************************************************************/

  SLWIDX01 = 1;
  while (SLWIDX01 <= 40)
    SL0KW02.SY5SZID[SLWIDX01] = 0;
    SL0KW02.SY4IDDSC[SLWIDX01] = " ";
    SL0KW02.SL6ONHND[SLWIDX01] = 0;
    SL0KW02.SL0KWSNT[SLWIDX01] = 0;
    SLWIDX01 = SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** move the internal size and and description to the   ****/
   /* *** size table.                                         ****/
   /* ************************************************************/

  SLWIDX01 = 1;
  SLWIDX02 = 1;
  SL0KW02.SL0KWNSZ = 0;
  while (SLWIDX01 <= 40)
    if (SYPREC.SY4IDDSC[SLWIDX01] > " ")
      SL0KW02.SY5SZID[SLWIDX02] = SLWIDX01;
      SL0KW02.SY4IDDSC[SLWIDX02] = SYPREC.SY4IDDSC[SLWIDX01];
      SL0KW02.SL0KWNSZ = SL0KW02.SL0KWNSZ + 1;
      SLWIDX02 = SLWIDX02 + 1;
    end
    SLWIDX01 = SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS2G

// load ws size tbl with qty
Function SL0KS2H()
   /* ************************************************************/
   /* *** this statement group moves the quantities to the    ****/
   /* *** ws size table.                                      ****/
   /* ************************************************************/

   /* DLVRUSA CHANGES - All SL6REC has been changed to VSYLOC02*/

  SL0KW02.SY1UNPCS = SL0KM210.SL0KMUT1;

   /* ************************************************************/
   /* *** pugre the tsq                                       ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** setup the selection criteria                        ****/
   /* ************************************************************/

  set VSYLOC02 empty;
  VSYLOC02.XWHCD = SL0KM210.XWHCD;
  VSYLOC02.XARCD = SL0KM210.XARCD;
  VSYLOC02.SL4ZONE = SL0KM210.SL4ZONE;
  VSYLOC02.SL5LOCTN = SL0KM210.SL5LOCTN;
  VSYLOC02.XGPCD = SL0KM210.XGPCD;
  VSYLOC02.SY1STNBR = SL0KM210.SY1STNBR;
  VSYLOC02.SY2CLRID = SL0KM210.SY2CLRID;
  VSYLOC02.XDMCD = SL0KM210.XDMCD;
  VSYLOC02.XQACD = SL0KM210.XQACD;
  VSYLOC02.XOWCD = SL0KM210.XOWCD;
  VSYLOC02.PC2INSEG = SL0KM210.PC2INSEG;
  VSYLOC02.XEGCD = SL0KM210.XEGCD;
  VSYLOC02.XPGCD = SL0KM210.XPGCD;
  VSYLOC02.XUMCD = SL0KM210.XUMCD;
  VSYLOC02.XSLCD = SL0KM210.XSLCD;
  VSYLOC02.SY1UNPCS = SL0KM210.SL0KMUT1;
  VSYLOC02.SY5SZID = -1;
  VSYLOC02.SL2PALET = "*";
  VSYLOC02.SL2CASE = "*";
  VSYLOC02.PC3PONBR = -1;
   /* DLVRUSA STARTS - SAIRAM-SAPPO*/
  VSYLOC02.PC-SAP-PO-NBR = "*";
   /* DLVRUSA ENDS   - SAIRAM SAPPO*/
  VSYLOC02.SL1CRTDT = -1;

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS2H ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

   /* DLVRUSA STARTS - SAIRAM VSYLOC02*/
   /* XSSL6S5;                     /* <=== select set prd/loc*/
  XSSLS-S5-VSYLOC02(); /* <=== select set prd/loc*/
   /* DLVRUSA ENDS   - SAIRAM VSYLOC02*/

  TA5REC.TA5TSQIX = 0; /* <=== initialize tsq relative pos*/

  if (SQLCA.VAGen_SQLCODE == 0)
    SL0KW02.SL0KWISZ = 0; /* <=== invalid size qty*/
    SL0KW02.SL0KWIFL = "N"; /* <=== invalid size flag*/
    SL0KW02.SL0KWNTF = "N"; /* <=== adjust by net flag*/
    if (SL0KM210.SL0KMUT1 == -1 /* Wildcard units/case*/
     && SL5REC.YLTCD != "06"    /* and not highrise*/
     && SL5REC.YLTCD != "22")   /* and not handstack*/
      SL0KW02.SY1UNPCS = VSYLOC02.SY1UNPCS; /* Units/case*/
    end
    if (VSYLOC02.XBCCD == "08" /* Cole Haan*/
     && SL0KM210.IN5TRDCD == "S") /* setaside*/
      SLWREC.SLWERRSW = "Y"; /* Indicate error*/
      SLWREC.XXXLOCID = "S2HA"; /* Error location*/
      set SL0KM210.IN5TRDCD cursor, bold; /* Highlight*/
      SLWREC.SLWMSGNO = 0430; /* setaside not valid for prod*/
      return;
    end
    while (SQLCA.VAGen_SQLCODE == 0
     && SLWREC.SLWERRSW == "N")
      if (VSYLOC02.SY1UNPCS != SL0KW02.SY1UNPCS /* Units/case different*/
       && SL0KM210.SL0KMUT1 == -1               /* and units/case wildcard*/
       && SL5REC.YLTCD != "06"                  /* and not highrise*/
       && SL5REC.YLTCD != "22")                 /* and not handstack*/
        SLWREC.SLWERRSW = "Y"; /* Indicate error*/
        SLWREC.XXXLOCID = "S2HB"; /* Error location*/
        set SL0KM210.SL0KMTL1 skip;
        set SL0KM210.SL0KMUT1 cursor, bold; /* Highlight*/
        SLWREC.SLWMSGNO = 412; /* Multiple units/case found*/
        return;
      end
      SL0KS2K(); /* load the qtys into the ws size tbl*/
    end
    SL0KSXD(); /* <=== close scan*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== setinq eof*/
      SL0KSXD(); /* <=== close scan*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2HC";
      SLWREC.SLWMSGNO = 0128; /* <--- prod not found in loc*/
      set SL0KM210.SL5LOCTN cursor, bold;
      set SL0KM210.SL4ZONE cursor, bold;
      set SL0KM210.XARCD cursor, bold;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SL0KSXD(); /* <=== close scan*/
      SLWREC.SLWSKYSW = "N";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2HD";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811) /* <=== for INQUIRY*/
      SL0KSXD(); /* <=== close scan*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2HE";
      SLWREC.SLWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
      return;
    end
    SL0KSXD(); /* <=== close scan*/
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S2HF";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

end // end SL0KS2H

// move size and qty to map
Function SL0KS2I()

   /* ************************************************************/
   /* *** this statement group moves the size desc and qty    ****/
   /* *** to the map.                                         ****/
   /* ************************************************************/

  SL0KW02.SL0KWQT4 = 0;
  SL0KW04.SL0KWSCT = 0;

  SLWIDX01 = 1;
  while (SLWIDX01 <= SL0KW02.SL0KWNSZ)
    SL0KM210.SY4IDDSC[SLWIDX01] = SL0KW02.SY4IDDSC[SLWIDX01];
    if (SL0KW02.SL0KWNTF == "N") /* <=== adjust by on hand qtys*/
      SL0KM210.SL0KMQTY[SLWIDX01] = SL0KW02.SL6ONHND[SLWIDX01];
      if (SL0KW02.SL6ONHND[SLWIDX01] != 0) /* size info found*/
        SL0KW04.SL0KWSCT = SL0KW04.SL0KWSCT + 1;
      end
      SL0KW02.SL0KWQT4 = SL0KW02.SL0KWQT4 + SL0KW02.SL6ONHND[SLWIDX01];
    else /* <=== adjust by net qtys*/
      SL0KM210.SL0KMQTY[SLWIDX01] = SL0KW02.SL0KWSNT[SLWIDX01];
      if (SL0KW02.SL0KWSNT[SLWIDX01] != 0) /* size info found*/
        SL0KW04.SL0KWSCT = SL0KW04.SL0KWSCT + 1;
      end
      SL0KW02.SL0KWQT4 = SL0KW02.SL0KWQT4 + SL0KW02.SL0KWSNT[SLWIDX01];
    end
    SLWIDX01 = SLWIDX01 + 1;
  end

  if (SL0KW02.SL0KWISZ != 0)
                                   /* <=== if there is qty for invalid size*/
    if (SLWIDX01 <= 40)
      SL0KM210.SY4IDDSC[SLWIDX01] = "**";
      set SL0KM210.SL0KMQTY[SLWIDX01] skip; /* disable adj ability*/
      SL0KM210.SL0KMQTY[SLWIDX01] = SL0KW02.SL0KWISZ;
      SL0KW04.SL0KWSCT = SL0KW04.SL0KWSCT + 1;
    end
  end

  SL0KM210.SL0KMTOT = SL0KW02.SL0KWQT4; /* <=== total qty*/

  if (SL5REC.SL5MPDFL == "N") /* if single-sku location*/
    if (SL0KW04.SL0KWSCT > 1) /* if more than 1 sz found*/
      SLWREC.SLWMSGNO = 0422; /* single-sku warning msg*/
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS2I

// get size scale code
Function SL0KS2J()

   /* ************************************************************/
   /* *** get the size scale code                             ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS2J ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  SL0KSII(); /* <=== style inquiry*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2JA";
      SLWREC.SLWMSGNO = 0124; /* <--- not on db msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2JB";
      SLWREC.SLWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S2JC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    /* SL02ST1                       ;  <=== clear scrn (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS2J

// load ws size tbl with qty
Function SL0KS2K()
   /* ************************************************************/
   /* *** this statement group moves the quantities to the    ****/
   /* *** ws size table.                                      ****/
   /* ************************************************************/

   /* DLVRUSA CHANGES - All SL6REC has been changed to VSYLOC02*/

  if (VSYLOC02.SY1UNPCS != SL0KW02.SY1UNPCS /* Units/case different*/
   && SL5REC.YLTCD != "06"                  /* and not highrise*/
   && SL5REC.YLTCD != "22")                 /* and not handstack*/
    SL0KS1N(); /* <=== FETCH NEXT PROD/LOC*/
    return;
  end

   /* ************************************************************/
   /* *** if pick reserves or setasides exist adjustments     ****/
   /* *** must be made by net quantities rather than on hand  ****/
   /* ************************************************************/

  if (VSYLOC02.SL6PKRSV != 0 /* if rsrvs/sas exist, set flag*/
   || VSYLOC02.SL6STASD != 0) /* to make adjustments by net*/
    if (SL0KW02.SL0KWNTF == "N")
      SL0KW02.SL0KWNTF = "Y";
    end
  end
                     /* <=== search the ws size tbl for the size*/
  SLWIDX01 = 1;
  while (SLWIDX01 <= 40
   && VSYLOC02.SY5SZID != SL0KW02.SY5SZID[SLWIDX01])
    SLWIDX01 = SLWIDX01 + 1;
  end

  if (SLWIDX01 == 41)
    SL0KW02.SL0KWIFL = "Y"; /* <=== invalid size flag*/
    SL0KW02.SL0KWISZ = SL0KW02.SL0KWISZ + VSYLOC02.SL6ONHND;
    SL0KS1N(); /* <=== FETCH NEXT PROD/LOC*/
    return;
  end

   /* ************************************************************/
   /* *** store the product/location record in the tsq        ****/
   /* ************************************************************/

  SL0KWTQ.SY5SZID = VSYLOC02.SY5SZID;
  TA5REC.TA5TSQIX = TA5REC.TA5TSQIX + 1;
  SL0KWTQ.SL2PALET = VSYLOC02.SL2PALET;
  SL0KWTQ.SL2CASE = VSYLOC02.SL2CASE;
  SL0KWTQ.PC3POIDT = VSYLOC02.PC3POIDT;
  SL0KWTQ.PCFSECD = VSYLOC02.PCFSECD;
  SL0KWTQ.FY1FCTYC = VSYLOC02.FY1FCTYC;
  SL0KWTQ.PC4ORTYP = VSYLOC02.PC4ORTYP;
  SL0KWTQ.PC3PONBR = VSYLOC02.PC3PONBR;
   /* DLVRUSA STARTS - SAIRAM-SAPPO*/
  SL0KWTQ.PC-SAP-PO-NBR = VSYLOC02.PC-SAP-PO-NBR;
   /* DLVRUSA ENDS   - SAIRAM-SAPPO*/
  SL0KWTQ.SL1CRTDT = VSYLOC02.SL1CRTDT;
  SL0KWTQ.ZZZCHGCT = VSYLOC02.ZZZCHGCT;

  TA5REC.TA5APPID = SLWREC.SLWSUMQU;
  TA5REC.TA5FNCCD = "A";
  call "TA0050" (SL0KWTQ, TA5REC) {isNoRefresh = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S2KC";
    SLWREC.SLWMSGNO = 0109; /* <--- severe tsq error msg*/
    return;
  end

  if (SL0KW02.SL0KWNTF == "N") /* <=== add to on-hand*/

    SL0KW02.SL0KWONH = SL0KW02.SL6ONHND[SLWIDX01];
    SL0KW02.SL0KWONH = SL0KW02.SL0KWONH + VSYLOC02.SL6ONHND;
    SL0KW02.SL6ONHND[SLWIDX01] = SL0KW02.SL0KWONH;

     /* also move oh to net field in case net flag will be*/
       /* set to 'y' in subsequent sizes*/

    SL0KW02.SL0KWSNT[SLWIDX01] = SL0KW02.SL0KWONH;

  else /* <=== add to net*/

    SL0KW02.SL0KWNET = SL0KW02.SL0KWSNT[SLWIDX01];
    SL0KW02.SL0KWNET = SL0KW02.SL0KWNET + VSYLOC02.SL6ONHND; /* + oh*/
    SL0KW02.SL0KWNET = SL0KW02.SL0KWNET - VSYLOC02.SL6PKRSV; /* -rsv*/
    SL0KW02.SL0KWNET = SL0KW02.SL0KWNET - VSYLOC02.SL6STASD; /* -sas*/
    SL0KW02.SL0KWSNT[SLWIDX01] = SL0KW02.SL0KWNET;

     /* also move net to oh field for subsequent enter processing*/

    SL0KW02.SL6ONHND[SLWIDX01] = SL0KW02.SL0KWNET;
  end

   /* ************************************************************/
   /* *** add to the number of records for this size          ****/
   /* ************************************************************/

  SL0KW02.SL0KWREC[SLWIDX01] = SL0KW02.SL0KWREC[SLWIDX01] + 1;

  SL0KW02.SL0KWCRC[SLWIDX01] = "Y"; /* <=== PRD/LOC REC EXIST FLAG*/

   /* ************************************************************/
   /* *** move the relative position of the first tsq record  ****/
   /* *** for the size to the ws size table                   ****/
   /* ************************************************************/

  if (SL0KW02.SL0KWPTS[SLWIDX01] < 1)
    SL0KW02.SL0KWPTS[SLWIDX01] = TA5REC.TA5TSQIX;
  end

   /* ************************************************************/
   /* *** fetch the next product/location record              ****/
   /* ************************************************************/

  SL0KS1N(); /* <=== FETCH NEXT*/

end // end SL0KS2K

// update product/location record
Function SL0KS2L()
   /* ************************************************************/
   /* *** this statement group updates the product/location   ****/
   /* *** record.                                             ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if there isn't an adjustment made for the size,     ****/
   /* *** skip the rest of this statement group.              ****/
   /* ************************************************************/

  if (SL0KM210.SL0KMQTY[SLWIDX01] == 0)
    return;
  end

   /* ************************************************************/
   /* *** the rest of this statement group is sizes that      ****/
   /* *** currently have quantities.                          ****/
   /* ************************************************************/

  TA5REC.TA5TSQIX = SL0KW02.SL0KWPTS[SLWIDX01];
                                   /* <=== first size tsq*/
  SL0KS2O(); /* <=== get prod/loc rec for update*/

  if (SLWREC.SLWERRSW == "Y")
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    return;
  end

   /* ************************************************************/
   /* *** change product qty to new prod qty                  ****/
   /* ************************************************************/

  SL0KW02.SL0KWQT2 = SL0KM210.SL0KMQTY[SLWIDX01];

  while (SL0KW02.SL0KWQT2 != 0
   && SLWREC.SLWERRSW != "Y")
    SL0KS2P(); /* <=== change prod qty to new prod qty*/
  end

  if (SLWREC.SLWERRSW == "Y")
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    return;
  end

end // end SL0KS2L
// write prod/loc audit (curr)
Function SL0KS2N()

   /* ************************************************************/
   /* *** this statement group writes the product/location    ****/
   /* *** audit records for the current product               ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** Setup the product/location audit record,            ****/
   /* *** except for the size and quantity.                   ****/
   /* ************************************************************/

  set VSLAUD02 empty; /* <=== product/location audit*/
  VSLAUD02.XWHCD = SL0KM210.XWHCD;
  VSLAUD02.IN5TRDCD = SL0KM210.IN5TRDCD;
  SL0KW21.SL0KWDOC = SL0KM210.IN5TRDOC;
  VSLAUD02.IN5TRPRT = SL0KW21.SL0KWLST;
  VSLAUD02.IN5TRDOC = SL0KM210.IN5TRDOC;
  VSLAUD02.IN5TRSUB = SL0KM210.IN5TRSUB;
  VSLAUD02.XGPCD = SL0KM210.XGPCD;
  VSLAUD02.SY1STNBR = SL0KM210.SY1STNBR;
  VSLAUD02.SY2CLRID = SL0KM210.SY2CLRID;
  VSLAUD02.XDMCD = SL0KM210.XDMCD;
  VSLAUD02.XQACD = SL0KM210.XQACD;
  VSLAUD02.XOWCD = SL0KM210.XOWCD;
  VSLAUD02.XSDCD = SL0KM210.PC2INSEG;
  VSLAUD02.XSACD = SL0KM210.XEGCD;
  VSLAUD02.XPGCD = SL0KM210.XPGCD;
  VSLAUD02.XUMCD = SL0KM210.XUMCD;
  VSLAUD02.XSLCD = SL0KM210.XSLCD;
  VSLAUD02.XIFCD = "01";
  VSLAUD02.XITCD = SL0KM210.XITCD;
  VSLAUD02.XIRCD = SL0KM210.XIRCD;
  VSLAUD02.IN5TRREF = SL0KM210.IN5TRREF;
  VSLAUD02.XARCD = SL0KM210.XARCD;
  VSLAUD02.SL4ZONE = SL0KM210.SL4ZONE;
  VSLAUD02.SL5LOCTN = SL0KM210.SL5LOCTN;

   /* ************************************************************/
   /* *** Write a product/location audit record for each size ****/
   /* *** that has been adjusted.                             ****/
   /* ************************************************************/

  SLWIDX01 = 1;
  while (SLWIDX01 <= SL0KW02.SL0KWNSZ
   && SLWREC.SLWERRSW == "N")
    if (SL0KM210.SL0KMQTY[SLWIDX01] != 0)
      VSLAUD02.SY5SZID = SL0KW02.SY5SZID[SLWIDX01];
      VSLAUD02.SLATRQTY = SL0KM210.SL0KMQTY[SLWIDX01];
      VSLAUD02.SLATRQTY = VSLAUD02.SLATRQTY * -1;
      SL0KS1R(); /* <=== write prod/loc audit*/
    end
    SLWIDX01 = SLWIDX01 + 1;
  end
   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS2N

// get prod/loc record for update
Function SL0KS2O()
   /* ************************************************************/
   /* *** get the next product/location record to update      ****/
   /* ************************************************************/

   /* DLVRUSA CHANGES - All SL6REC has been changed to VSYLOC02*/

  TA5REC.TA5APPID = SLWREC.SLWSUMQU;
  TA5REC.TA5FNCCD = "R";
  call "TA0050" (SL0KWTQ, TA5REC) {isNoRefresh = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S2OA";
    SLWREC.SLWMSGNO = 0001;
    return;
  end

   /* ************************************************************/
   /* *** setup the product/location key for the select unique****/
   /* ************************************************************/

  set VSYLOC02 empty;

  VSYLOC02.XWHCD = SL0KM210.XWHCD;
  VSYLOC02.XARCD = SL0KM210.XARCD;
  VSYLOC02.SL4ZONE = SL0KM210.SL4ZONE;
  VSYLOC02.SL5LOCTN = SL0KM210.SL5LOCTN;
  VSYLOC02.XGPCD = SL0KM210.XGPCD;
  VSYLOC02.SY1STNBR = SL0KM210.SY1STNBR;
  VSYLOC02.SY2CLRID = SL0KM210.SY2CLRID;
  VSYLOC02.XDMCD = SL0KM210.XDMCD;
  VSYLOC02.XQACD = SL0KM210.XQACD;
  VSYLOC02.XOWCD = SL0KM210.XOWCD;
  VSYLOC02.PC2INSEG = SL0KM210.PC2INSEG;
  VSYLOC02.XEGCD = SL0KM210.XEGCD;
  VSYLOC02.XPGCD = SL0KM210.XPGCD;
  VSYLOC02.XUMCD = SL0KM210.XUMCD;
  VSYLOC02.XSLCD = SL0KM210.XSLCD;
  VSYLOC02.SY1UNPCS = SL0KM210.SL0KMUT1;
  VSYLOC02.SY5SZID = SL0KW02.SY5SZID[SLWIDX01];
  VSYLOC02.SL2PALET = SL0KWTQ.SL2PALET;
  VSYLOC02.SL2CASE = SL0KWTQ.SL2CASE;
  VSYLOC02.PC3POIDT = SL0KWTQ.PC3POIDT;
  VSYLOC02.PCFSECD = SL0KWTQ.PCFSECD;
  VSYLOC02.FY1FCTYC = SL0KWTQ.FY1FCTYC;
  VSYLOC02.PC4ORTYP = SL0KWTQ.PC4ORTYP;
  VSYLOC02.PC3PONBR = SL0KWTQ.PC3PONBR;
   /* DLVRUSA STARTS - SAIRAM-SAPPO*/
  VSYLOC02.PC-SAP-PO-NBR = SL0KWTQ.PC-SAP-PO-NBR;
   /* DLVRUSA ENDS   - SAIRAM-SAPPO*/
  VSYLOC02.SL1CRTDT = SL0KWTQ.SL1CRTDT;

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS2O ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  if (VSYLOC02.SY1UNPCS == -1) /* Units/case wildcard*/
    /* DLVRUSA STARTS - SAIRAM VSYLOC02*/
    /* XSSL6I0;                   /* Select without units/case*/
    XSSLS-S-VSYLOC02(); /* Select without units/case*/
    /* DLVRUSA ENDS   - SAIRAM VSYLOC02*/
  else
    /* DLVRUSA STARTS - SAIRAM VSYLOC02*/
    /* XSSL6I1;                   /* Select with units/case*/
    XSSLS-SA-VSYLOC02(); /* Select with units/case*/
    /* DLVRUSA ENDS   - SAIRAM VSYLOC02*/
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    if (VSYLOC02.ZZZCHGCT != SL0KWTQ.ZZZCHGCT)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2OB";
      SLWREC.SLWMSGNO = 0032; /* <--- rec changed since display*/
      return;
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2OC";
      SLWREC.SLWMSGNO = 0033; /* <--- rec deleted since display*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWSKYSW = "N";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2OD";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2OE";
      SLWREC.SLWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S2OF";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

end // end SL0KS2O

// change prd qty to new prd qty
Function SL0KS2P()
   /* ************************************************************/
   /* *** change the prod qty to the new prod qty             ****/
   /* ************************************************************/

   /* DLVRUSA CHANGES - All SL6REC has been changed to VSYLOC02*/

  if (VSYLOC02.SL6ONHND == SL0KW02.SL0KWQT2)
    SL0KW02.SL0KWQT3 = VSYLOC02.SL6ONHND;
    SL0KS10(); /* <=== delete prod/loc record*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
    SL0KS22(); /* <=== add or modify prod/loc*/
    SL0KW02.SL0KWQT2 = 0;
  else
    if (VSYLOC02.SL6ONHND < SL0KW02.SL0KWQT2)
      SL0KW02.SL0KWQT3 = VSYLOC02.SL6ONHND;
      SL0KW02.SL0KWQT2 = SL0KW02.SL0KWQT2 - VSYLOC02.SL6ONHND;
      SL0KS10(); /* <=== delete prod/loc record*/
      if (SLWREC.SLWERRSW == "Y")
        return;
      end
      SL0KS22(); /* <=== add or modify prod/loc*/
      if (SLWREC.SLWERRSW == "Y")
        return;
      end
      TA5REC.TA5TSQIX = TA5REC.TA5TSQIX + 1;
      SL0KS2O(); /* <=== get next prdo/loc rec*/
    else
      SL0KW02.SL0KWQT3 = SL0KW02.SL0KWQT2;
      VSYLOC02.SL6ONHND = VSYLOC02.SL6ONHND - SL0KW02.SL0KWQT2;
      SL0KS1J(); /* <=== modify prod/loc record*/
      if (SLWREC.SLWERRSW == "Y")
        return;
      end
      SL0KS22(); /* <=== add or modify prod/loc*/
      SL0KW02.SL0KWQT2 = 0;
    end
  end

end // end SL0KS2P

// updt prd/loc cases for loc
Function SL0KS32()

   /* ************************************************************/
   /* *** update all cases for a location.                    ****/
   /* ***   product location and and s/l audit file           ****/
   /* ************************************************************/

   /* DLVRUSA CHANGES - All SL6REC has been changed to VSYLOC02*/

  SL0KS33(); /* <=== select set prd/loc*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0KW31.SL0KWEOS = "N"; /* <=== end of set flag*/
  while (SQLCA.VAGen_SQLCODE == 0
   && SLWREC.SLWERRSW != "Y"
   && SL0KW31.SL0KWEOS == "N")
    SLWIDX02 = 1;
    while (SLWIDX02 <= 40) /* <=== clear ws qty size table*/
      SL0KW03.SY5SZID[SLWIDX02] = 0;
      /* DLVRUSA STARTS - SAIRAM SAPIA*/
      SL0KW03.SY4IDDSC[SLWIDX02] = " ";
      /* DLVRUSA ENDS - SAIRAM SAPIA*/
      SL0KW03.SL6ONHND[SLWIDX02] = 0;
      SLWIDX02 = SLWIDX02 + 1;
    end
    SL0KW31.SL2CASE = VSYLOC02.SL2CASE;
    while (VSYLOC02.SL2CASE == SL0KW31.SL2CASE
     && SQLCA.VAGen_SQLCODE == 0
     && SLWREC.SLWERRSW != "Y")
      SL0KS34(); /* <=== product/location update*/
      if (SLWREC.SLWERRSW == "Y")
        return;
      end
      if (SQLCA.VAGen_SQLCODE == +100)
        SL0KW31.SL0KWEOS = "Y";
      end
    end
    SL0KS3N(); /* <===  write prd/loc audit (curr)*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
    /* DLVRUSA CHANGE STARTS - SAIRAM SAPIA*/
    if (SL0KM110.XWHCD != "02") /* <===  not colehaan*/
      SL0KS-MOVE4-SAPIA(); /* <===  write SAP inv adj records(curr)*/
      if (SLWREC.SLWERRSW == "Y")
        return;
      end
    end
    /* DLVRUSA CHANGE ENDS - SAIRAM SAPIA*/
    SL0KS3O(); /* <===  write prd/loc audit (new)*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
    /* DLVRUSA CHANGE STARTS - SAIRAM SAPIA*/
    if (SL0KM110.XWHCD != "02") /* <===  not colehaan*/
      SL0KS-MOVE5-SAPIA(); /* <===  write SAP inv adj records(new)*/
      if (SLWREC.SLWERRSW == "Y")
        return;
      end
    end
    /* DLVRUSA CHANGE ENDS - SAIRAM SAPIA*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS32

// select set prod loc scan 7
Function SL0KS33()

   /* ************************************************************/
   /* *** select set for product location scan 7              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup the selection criteria                        ****/
   /* ************************************************************/

   /* DLVRUSA CHANGES - All SL6REC has been changed to VSYLOC02*/

  set VSYLOC02 empty;
  VSYLOC02.XWHCD = SL0KM310.XWHCD;
  VSYLOC02.XARCD = SL0KM310.XARCD[SLWIDX01];
  VSYLOC02.SL4ZONE = SL0KM310.SL4ZONE[SLWIDX01];
  VSYLOC02.SL5LOCTN = SL0KM310.SL5LOCTN[SLWIDX01];
  VSYLOC02.XGPCD = SL0KM310.XGPCD;
  VSYLOC02.SY1STNBR = SL0KM310.SY1STNBR;
  VSYLOC02.SY2CLRID = SL0KM310.SY2CLRID;
  VSYLOC02.XDMCD = SL0KM310.XDMCD;
  VSYLOC02.XQACD = SL0KM310.XQACD;
  VSYLOC02.XOWCD = SL0KM310.XOWCD;
  VSYLOC02.PC2INSEG = SL0KM310.PC2INSEG;
  VSYLOC02.XEGCD = SL0KM310.XEGCD;
  VSYLOC02.XPGCD = SL0KM310.XPGCD;
  VSYLOC02.XUMCD = SL0KM310.XUMCD;
  VSYLOC02.XSLCD = SL0KM310.XSLCD;
  VSYLOC02.SY5SZID = -1;
  VSYLOC02.SL2PALET = "*";
  VSYLOC02.SL2CASE = SL0KM310.SL2CASE[SLWIDX01];
  VSYLOC02.PC3PONBR = -1;
   /* DLVRUSA STARTS - SAIRAM-SAPPO*/
  VSYLOC02.PC-SAP-PO-NBR = "*";
   /* DLVRUSA STARTS - SAIRAM-SAPPO*/
  VSYLOC02.SL1CRTDT = -1;

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS33 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

   /* DLVRUSA STARTS - SAIRAM VSYLOC02*/
   /* XSSL6X7;                     /* <=== select set prd/loc*/
  XSSLS-S7-VSYLOC02(); /* <=== select set prd/loc*/
   /* DLVRUSA ENDS   - SAIRAM VSYLOC02*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* ** next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== setinq eof*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S33A";
      SLWREC.SLWMSGNO = 0032; /* <--- prod not found in loc*/
      set SL0KM310.XARCD[SLWIDX01] cursor, bold;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWSKYSW = "N";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S33B";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S33C";
      SLWREC.SLWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S33E";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    /* SL02ST1                       ;  <=== clear scrn (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS33

// update prd/loc for a case
Function SL0KS34()

   /* ************************************************************/
   /* *** this statement group updates the product/location   ****/
   /* *** record.                                             ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** store the size and qty in the ws table to be used   ****/
   /* *** to update the stock locate files                    ****/
   /* ************************************************************/

   /* DLVRUSA CHANGES - All SL6REC has been changed to VSYLOC02*/

  if (SL0KW03.SL0KWNSZ > 0)
    SLWIDX04 = SL0KW03.SL0KWNSZ;
    if (VSYLOC02.SY5SZID == SL0KW03.SY5SZID[SLWIDX04])
      /* DLVRUSA STARTS - SAIRAM SAPIA*/
      SLWIDX07 = VSYLOC02.SY5SZID;
      SL0KW03.SY4IDDSC[SLWIDX04] = SYPREC.SY4IDDSC[SLWIDX07];
      /* DLVRUSA ENDS - SAIRAM SAPIA*/
      SL0KW03.SL6ONHND[SLWIDX04] = SL0KW03.SL6ONHND[SLWIDX04] +       VSYLOC02.SL6ONHND;
    else
      SL0KW03.SL0KWNSZ = SL0KW03.SL0KWNSZ + 1;
      SLWIDX04 = SL0KW03.SL0KWNSZ;
      SL0KW03.SY5SZID[SLWIDX04] = VSYLOC02.SY5SZID;
      /* DLVRUSA STARTS - SAIRAM SAPIA*/
      SLWIDX07 = VSYLOC02.SY5SZID;
      SL0KW03.SY4IDDSC[SLWIDX04] = SYPREC.SY4IDDSC[SLWIDX07];
      /* DLVRUSA ENDS - SAIRAM SAPIA*/
      SL0KW03.SL6ONHND[SLWIDX04] = VSYLOC02.SL6ONHND;
    end
  else
    SL0KW03.SL0KWNSZ = SL0KW03.SL0KWNSZ + 1;
    SLWIDX04 = SL0KW03.SL0KWNSZ;
    SL0KW03.SY5SZID[SLWIDX04] = VSYLOC02.SY5SZID;
    /* DLVRUSA STARTS - SAIRAM SAPIA*/
    SLWIDX07 = VSYLOC02.SY5SZID;
    SL0KW03.SY4IDDSC[SLWIDX04] = SYPREC.SY4IDDSC[SLWIDX07];
    /* DLVRUSA ENDS - SAIRAM SAPIA*/
    SL0KW03.SL6ONHND[SLWIDX04] = VSYLOC02.SL6ONHND;
  end

   /* ************************************************************/
   /* *** store the qty in the ws table to be used to update  ****/
   /* *** the inventory files                                 ****/
   /* ************************************************************/

  SLWIDX04 = VSYLOC02.SY5SZID;
  SL0KW31.SL6ONHND[SLWIDX04] = SL0KW31.SL6ONHND[SLWIDX04] +   VSYLOC02.SL6ONHND;

  SL0KS10(); /* <=== delete prod/loc record*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0KW03.SL0KWQT3 = VSYLOC02.SL6ONHND;
  SL0KS3P(); /* <=== add or modify prd/loc for new*/
                                   /* prd*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0KS36(); /* <=== fetch next prod/loc scan 7*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS34

// fetch next prod asgn rec
Function SL0KS35()

   /* ************************************************************/
   /* *** fetch next product assignment record                ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS35 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL7F7(); /* <=== fetch next prod assign*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== SETINQ EOF*/
      SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
      SLWREC.XXXLOCID = "S35A";
      SLWREC.SLWMSGNO = 0132; /* <--- prod asign not setup*/
    else
      SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
      SLWREC.XXXLOCID = "S35B";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      /* SL02ST1                       ;  <=== clear scrn (empty)*/
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS35

// fetch next prod/loc scan 7
Function SL0KS36()

   /* ************************************************************/
   /* *** fetch next product/location record.                 ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS36 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

   /* DLVRUSA STARTS - SAIRAM VSYLOC02*/
   /* XSSL6F7;                     /* <=== fetch next prod/loc*/
  XSSLS-N7-VSYLOC02(); /* <=== fetch next prod/loc*/
   /* DLVRUSA ENDS   - SAIRAM VSYLOC02*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == +100) /* <=== SETINQ EOF*/
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S36A";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    /* SL02ST1                       ;  <=== clear scrn (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS36

// check if inv needs to be updt
Function SL0KS37()

   /* ************************************************************/
   /* *** compare the current product key against the new     ****/
   /* *** product key,  they shouldn't be the same            ****/
   /* ************************************************************/

  SL0KW31.SL0KWUIN = "Y"; /* <=== update inv flag*/

  if (SL0KM310.XGPCD != SL0KM310.SL0KWGPC)
    return;
  end

  if (SL0KM310.SY1STNBR != SL0KM310.SL0KWSTY)
    return;
  end

  if (SL0KM310.SY2CLRID != SL0KM310.SL0KWCLR)
    return;
  end

  if (SL0KM310.XDMCD != SL0KM310.SL0KWDIM)
    return;
  end

  if (SL0KM310.XQACD != SL0KM310.SL0KWQLT)
    return;
  end

  if (SL0KM310.PC2INSEG != SL0KM310.SL0KWISG)
    return;
  end

  if (SL0KM310.XEGCD != SL0KM310.SL0KWXEG)
    return;
  end

  if (SL0KM310.XPGCD != SL0KM310.SL0KWPKG)
    return;
  end

  if (SL0KM310.XUMCD != SL0KM310.SL0KWUOM)
    return;
  end

  if (SL0KM310.XOWCD != SL0KM310.SL0KWOWN)
    return;
  end

  SL0KW31.SL0KWUIN = "N"; /* <=== update inv flag*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS37

// old prd sz in new prd sz range
Function SL0KS38()

   /* ************************************************************/
   /* *** check to see if the old product code sizes are      ****/
   /* *** in the new product code size range.                 ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS38 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

   /* ************************************************************/
   /* *** Get the size descriptions for the new product.      ****/
   /* *** These will be compared with the old product to      ****/
   /* *** make sure that the new product has every size that  ****/
   /* *** the old product has.                                ****/
   /* ************************************************************/

   /* DLVRUSA STARTS - SAIRAM-SAPIA*/
   /* IF SL0KM310.SL0KWGPC = SL0KM310.XGPCD*/
   /* AND SL0KM310.SL0KWSTY = SL0KM310.SY1STNBR*/
   /* AND SL0KM310.SL0KWCLR = SL0KM310.SY2CLRID*/
   /* AND SL0KM310.SL0KWDIM = SL0KM310.XDMCD*/
   /* AND SL0KM310.SL0KWQLT = SL0KM310.XQACD;*/
   /* EZERTN;*/
   /* END;*/
   /* DLVRUSA ENDS   - SAIRAM-SAPIA*/

  set SYPREC empty;
  SYPREC.XGPCD = SL0KM310.SL0KWGPC;
  SYPREC.SY1STNBR = SL0KM310.SL0KWSTY;
  SYPREC.SY2CLRID = SL0KM310.SL0KWCLR;
  SYPREC.XDMCD = SL0KM310.SL0KWDIM;
  SYPREC.XQACD = SL0KM310.SL0KWQLT;

  SL0KSXC(); /* perform size translation call*/

  SL0KW32.SYPDATA = SYPREC.SYPDATA;

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** get the size descriptions for the old product.      ****/
   /* ************************************************************/

  set SYPREC empty;
  SYPREC.XGPCD = SL0KM310.XGPCD;
  SYPREC.SY1STNBR = SL0KM310.SY1STNBR;
  SYPREC.SY2CLRID = SL0KM310.SY2CLRID;
  SYPREC.XDMCD = SL0KM310.XDMCD;
  SYPREC.XQACD = SL0KM310.XQACD;

  SL0KSXC(); /* perform size translation call*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** if the new product doesn't contain all of the sizes ****/
   /* *** that the old product has,  cannot change the qtys.  ****/
   /* ************************************************************/

  SLWIDX01 = 1;
  while (SLWIDX01 <= 40
   && SLWREC.SLWERRSW != "Y")
    if (SYPREC.SY4IDDSC[SLWIDX01] != " ")
      if (SYPREC.SY4IDDSC[SLWIDX01] != SL0KW32.SY4IDDSC[SLWIDX01])
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S38A";
        SLWREC.SLWMSGNO = 0146; /* <=== diff size runs*/
        set SL0KM310.XQACD cursor, bold;
        set SL0KM310.XDMCD cursor, bold;
        set SL0KM310.SY2CLRID cursor, bold;
        set SL0KM310.SY1STNBR cursor, bold;
        set SL0KM310.XGPCD cursor, bold;
        set SL0KM310.SL0KWQLT cursor, bold;
        set SL0KM310.SL0KWDIM cursor, bold;
        set SL0KM310.SL0KWCLR cursor, bold;
        set SL0KM310.SL0KWSTY cursor, bold;
        set SL0KM310.SL0KWGPC cursor, bold;
      end
    end
    SLWIDX01 = SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS38

// validate current product info
Function SL0KS3A()

   /* ************************************************************/
   /* *** make one time table accesses for auxillary and/or   ****/
   /* *** main data                                           ****/
   /* *** note: first time executions before beginning a loop ****/
   /* ***       might also be performed                       ****/
   /* ************************************************************/

   /* ************************************************************/
   /* ***  validate current product information               ****/
   /* ************************************************************/

  PKNREC.XGPCD = SL0KM310.XGPCD;
  PKNREC.SY1STNBR = SL0KM310.SY1STNBR;
  PKNREC.SY2CLRID = SL0KM310.SY2CLRID;
  PKNREC.XDMCD = SL0KM310.XDMCD;

  SL0KSCI(); /* <===  obtain style and color data*/

  if (SQLCA.VAGen_SQLCODE == +0)
    SL0KM310.SY1SSTNM = PKNREC.SY1SSTNM;
    SL0KM310.SY2CLRAB = PKNREC.SY2CLRAB;
    if (SL0KM310.XUMCD == "  ")
      SL0KM310.XUMCD = "01";
    end
    if (SL0KW03.SL0KW-CH-STY-FL == "Y" /* New Prod is Cole Haan*/
     && PKNREC.XBCCD != "08")          /* Current Prod not Cole Haan*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3AA";
      SLWREC.SLWMSGNO = 0431; /* product brand mismatch*/
      set SL0KM310.XDMCD cursor, bold;
      set SL0KM310.SY2CLRID cursor, bold;
      set SL0KM310.SY1STNBR cursor, bold;
      set SL0KM310.XGPCD cursor, bold;
      return;
    end
    if (SL0KW03.SL0KW-CH-STY-FL != "Y" /* New Prod not Cole Haan*/
     && PKNREC.XBCCD == "08")          /* Current Prod Cole Haan*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3AB";
      SLWREC.SLWMSGNO = 0431; /* product brand mismatch*/
      set SL0KM310.XDMCD cursor, bold;
      set SL0KM310.SY2CLRID cursor, bold;
      set SL0KM310.SY1STNBR cursor, bold;
      set SL0KM310.XGPCD cursor, bold;
      return;
    end
    if (PKNREC.XBCCD == "08") /* Current Prod Cole Haan*/
      SL0KW03.SL0KW-CH-STY-FL = "Y"; /* Cole Haan Product*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <--- rec not found*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3AC";
      SLWREC.SLWMSGNO = 0043;
      set SL0KM310.XDMCD cursor, bold;
      set SL0KM310.SY2CLRID cursor, bold;
      set SL0KM310.SY1STNBR cursor, bold;
      set SL0KM310.XGPCD cursor, bold;
      return;
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3AD";
      SLWREC.SLWMSGNO = 0001;
      set SL0KM310.XDMCD cursor, bold;
      set SL0KM310.SY2CLRID cursor, bold;
      set SL0KM310.SY1STNBR cursor, bold;
      set SL0KM310.XGPCD cursor, bold;
      return;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS3A

// validate new product info
Function SL0KS3B()

   /* ************************************************************/
   /* *** make one time table accesses for auxillary and/or   ****/
   /* *** main data                                           ****/
   /* *** note: first time executions before beginning a loop ****/
   /* ***       might also be performed                       ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** validate new product information                    ****/
   /* ************************************************************/

  PKNREC.XGPCD = SL0KM310.SL0KWGPC;
  PKNREC.SY1STNBR = SL0KM310.SL0KWSTY;
  PKNREC.SY2CLRID = SL0KM310.SL0KWCLR;
  PKNREC.XDMCD = SL0KM310.SL0KWDIM;
  SL0KW03.SL0KW-CH-STY-FL = "N"; /* Cole Haan Style Flag*/

  SL0KSCI(); /* <===  obtain style and color data*/

  if (SQLCA.VAGen_SQLCODE == +0)
    SL0KM310.SL0KMSYN = PKNREC.SY1SSTNM;
    SL0KM310.SL0KMCLI = PKNREC.SY2CLRAB;
    if (SL0KM310.SL0KWUOM == "  ")
      SL0KM310.SL0KWUOM = "01";
    end
    if (PKNREC.XBCCD == "08") /* Cole Haan Product*/
      SL0KW03.SL0KW-CH-STY-FL = "Y"; /* Cole Haan Style Flag*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <--- rec not found*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3BA";
      SLWREC.SLWMSGNO = 0043;
      set SL0KM310.SL0KWDIM cursor, bold;
      set SL0KM310.SL0KWCLR cursor, bold;
      set SL0KM310.SL0KWSTY cursor, bold;
      set SL0KM310.SL0KWGPC cursor, bold;
      return;
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3BB";
      SLWREC.SLWMSGNO = 0001;
      set SL0KM310.SL0KWDIM cursor, bold;
      set SL0KM310.SL0KWCLR cursor, bold;
      set SL0KM310.SL0KWSTY cursor, bold;
      set SL0KM310.SL0KWGPC cursor, bold;
      return;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS3B

// compare curr and new prod key
Function SL0KS3C()

   /* ************************************************************/
   /* *** compare the current product key against the new     ****/
   /* *** product key,  they shouldn't be the same            ****/
   /* ************************************************************/

  if (SL0KM310.XGPCD != SL0KM310.SL0KWGPC)
    return;
  end

  if (SL0KM310.SY1STNBR != SL0KM310.SL0KWSTY)
    return;
  end

  if (SL0KM310.SY2CLRID != SL0KM310.SL0KWCLR)
    return;
  end

  if (SL0KM310.XDMCD != SL0KM310.SL0KWDIM)
    return;
  end

  if (SL0KM310.XQACD != SL0KM310.SL0KWQLT)
    return;
  end

  if (SL0KM310.PC2INSEG != SL0KM310.SL0KWISG)
    return;
  end

  if (SL0KM310.XEGCD != SL0KM310.SL0KWXEG)
    return;
  end

  if (SL0KM310.XSLCD != SL0KM310.SL0KWSLC)
    return;
  end

  if (SL0KM310.XPGCD != SL0KM310.SL0KWPKG)
    return;
  end

  if (SL0KM310.XUMCD != SL0KM310.SL0KWUOM)
    return;
  end

  if (SL0KM310.XOWCD != SL0KM310.SL0KWOWN)
    return;
  end

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "S3FA";
  SLWREC.SLWMSGNO = 0122; /* <=== new prd same as curr*/
  set SL0KM310.SL0KWCLR cursor, bold;
  set SL0KM310.SL0KWSTY cursor, bold;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS3C

// missing area/zn/loc edit
Function SL0KS3D()

   /* ************************************************************/
   /* *** check for missing area/zone/location                ****/
   /* ************************************************************/

  if (SL0KM310.XARCD[SLWIDX03] == " "
   && SL0KM310.SL4ZONE[SLWIDX03] == " "
   && SL0KM310.SL5LOCTN[SLWIDX03] == " "
   && SL0KM310.SL2CASE[SLWIDX03] == " ")
     /* ** next sentence ***/
  else
    SL0KW31.SL0KWLEF = "Y"; /* <=== loc entered flag*/
    if (SL0KM310.SL5LOCTN[SLWIDX03] == " ")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3DC";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0KM310.SL5LOCTN[SLWIDX03] cursor, bold;
    end
    if (SL0KM310.SL4ZONE[SLWIDX03] == " ")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3DB";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0KM310.SL4ZONE[SLWIDX03] cursor, bold;
    end
    if (SL0KM310.XARCD[SLWIDX03] == " ")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3DA";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0KM310.XARCD[SLWIDX03] cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS3D

// check if receiving area
Function SL0KS3E()

   /* ************************************************************/
   /* *** check if trying to change a receiving area.         ****/
   /* *** cannot change a receiving area                      ****/
   /* ************************************************************/

  SL0KW31.XWHCD = SL0KM310.XWHCD;
  SL0KW31.XARCD = SL0KM310.XARCD[SLWIDX03];
  if (SL0KW31.SL0KWWAR in XARTBL.XARKEY) /* <--- area type*/
    if (XARTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XARTBL.XARRCVFL[sysVar.arrayIndex] == "Y") /* <=== if receiving area*/
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S3EA";
        SLWREC.SLWMSGNO = 0093; /* <--- cannot adj receiving*/
        set SL0KM310.XARCD[SLWIDX03] cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3EB";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM310.XARCD[SLWIDX03] cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S3EC";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM310.XARCD[SLWIDX03] cursor, bold;
  end
   /* ***/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS3E

// validate product assignment
Function SL0KS3F()

   /* ************************************************************/
   /* *** if processing location,                             ****/
   /* ***   check for valid product assignment for new size,  ****/
   /* *** else                                                ****/
   /* ***   error if setaside or pick reserve exists.         ****/
   /* ************************************************************/

  SL0KW31.XWHCD = SL0KM310.XWHCD;
  SL0KW31.XARCD = SL0KM310.XARCD[SLWIDX03];
  if (SL0KW31.SL0KWWAR in XARTBL.XARKEY) /* <--- area type*/
    if (XARTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XARTBL.XARPRCFL[sysVar.arrayIndex] == "Y") /* <=== if processing area*/
        if (SL4REC.YZTCD in YZTTBL.YZTCD)
          if (YZTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
            if (YZTTBL.YZTFCSFL[sysVar.arrayIndex] == "Y" /* <=== full case*/
             || SL0KM310.SL5LOCTN[SLWIDX03] == "000000") 
              SL0KS3X(); /* <=== check for rsv or setaside*/
            else
              SL0KS3G(); /* <=== check for prod assignment*/
            end
          else
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "S3FA";
            SLWREC.SLWMSGNO = 0010; /* <=== inactive msg*/
            set SL0KM310.SL4ZONE[SLWIDX03] cursor, bold;
            set SL0KM310.XARCD[SLWIDX03] cursor, bold;
          end
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "S3FB";
          SLWREC.SLWMSGNO = 0011; /* <=== invalid value msg*/
          set SL0KM310.SL4ZONE[SLWIDX03] cursor, bold;
          set SL0KM310.XARCD[SLWIDX03] cursor, bold;
        end
      else
        SL0KS3X(); /* <=== check for rsv or setaside*/
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3FC";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM310.XARCD[SLWIDX03] cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S3FD";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM310.XARCD[SLWIDX03] cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS3F

// check for prod assignment
Function SL0KS3G()

   /* ************************************************************/
   /* *** check for a product assignment for all new product  ****/
   /* *** sizes                                               ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup the selection criteria                        ****/
   /* ************************************************************/

   /* DLVRUSA CHANGES - All SL6REC has been changed to VSYLOC02*/

  set VSYLOC02 empty;
  VSYLOC02.XWHCD = SL0KM310.XWHCD;
  VSYLOC02.XARCD = SL0KM310.XARCD[SLWIDX03];
  VSYLOC02.SL4ZONE = SL0KM310.SL4ZONE[SLWIDX03];
  VSYLOC02.SL5LOCTN = SL0KM310.SL5LOCTN[SLWIDX03];
  VSYLOC02.XGPCD = SL0KM310.XGPCD;
  VSYLOC02.SY1STNBR = SL0KM310.SY1STNBR;
  VSYLOC02.SY2CLRID = SL0KM310.SY2CLRID;
  VSYLOC02.XDMCD = SL0KM310.XDMCD;
  VSYLOC02.XQACD = SL0KM310.XQACD;
  VSYLOC02.XOWCD = SL0KM310.XOWCD;
  VSYLOC02.PC2INSEG = SL0KM310.PC2INSEG;
  VSYLOC02.XEGCD = SL0KM310.XEGCD;
  VSYLOC02.XPGCD = SL0KM310.XPGCD;
  VSYLOC02.XUMCD = SL0KM310.XUMCD;
  VSYLOC02.XSLCD = SL0KM310.XSLCD;
  VSYLOC02.SY1UNPCS = -1;
  VSYLOC02.SY5SZID = -1;
  VSYLOC02.SL2PALET = "*";
  VSYLOC02.SL2CASE = SL0KM310.SL2CASE[SLWIDX03];
  VSYLOC02.PC3PONBR = -1;
   /* DLVRUSA STARTS - SAIRAM-SAPPO*/
  VSYLOC02.PC-SAP-PO-NBR = "*";
   /* DLVRUSA ENDS   - SAIRAM-SAPPO*/
  VSYLOC02.SL1CRTDT = -1;

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS3G ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

   /* DLVRUSA STARTS - SAIRAM VSYLOC02*/
   /* XSSL6S5;                     /* <=== select set prd/loc*/
  XSSLS-S5-VSYLOC02(); /* <=== select set prd/loc*/
   /* DLVRUSA ENDS   - SAIRAM VSYLOC02*/

  if (SQLCA.VAGen_SQLCODE == 0)
    SL0KS3H(); /* <=== check for prd asg, rsv and*/
                                   /* setaside*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== setinq eof*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3GA";
      SLWREC.SLWMSGNO = 0128; /* <--- prod not found in loc*/
      set SL0KM310.SL2CASE[SLWIDX03] cursor, bold;
      set SL0KM310.SL5LOCTN[SLWIDX03] cursor, bold;
      set SL0KM310.SL4ZONE[SLWIDX03] cursor, bold;
      set SL0KM310.XARCD[SLWIDX03] cursor, bold;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWSKYSW = "N";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3GB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3GC";
      SLWREC.SLWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S3GE";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    /* SL02ST1                       ;  <=== clear scrn (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS3G

// check for product assignment
Function SL0KS3H()

   /* ************************************************************/
   /* *** check for product assignment                        ****/
   /* ************************************************************/

  set SL7REC empty;
  SL7REC.XWHCD = SL0KM310.XWHCD;
  SL7REC.XARCD = SL0KM310.XARCD[SLWIDX03];
  SL7REC.SL4ZONE = SL0KM310.SL4ZONE[SLWIDX03];
  SL7REC.SL5LOCTN = SL0KM310.SL5LOCTN[SLWIDX03];
  SL7REC.XGPCD = SL0KM310.SL0KWGPC;
  SL7REC.SY1STNBR = SL0KM310.SL0KWSTY;
  SL7REC.SY2CLRID = SL0KM310.SL0KWCLR;
  SL7REC.XDMCD = SL0KM310.SL0KWDIM;
  SL7REC.XQACD = SL0KM310.SL0KWQLT;
  SL7REC.XOWCD = SL0KM310.SL0KWOWN;
  SL7REC.XSDCD = SL0KM310.SL0KWISG;
  SL7REC.XSACD = SL0KM310.SL0KWXEG;
  SL7REC.XPGCD = SL0KM310.SL0KWPKG;
  SL7REC.XUMCD = SL0KM310.SL0KWUOM;
  SL7REC.SY5SZID = -1;
  SL7REC.XXXSTAT = "*";
  SLVREC.SLVSDT = 0;
  SLVREC.SLVEDT = X2CREC.X2CCURDT;

   /* ************************************************************/
   /* *** select set on the product assignment                ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS3H ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL7S7(); /* <=== select set prod assign*/

  if (SQLCA.VAGen_SQLCODE == 0)
    while (SQLCA.VAGen_SQLCODE == 0
     && SLWREC.SLWERRSW != "Y")
      SL0KS3I(); /* <=== check prd asgn, rsv qty, setaside qty*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== setinq eof*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3HA";
      SLWREC.SLWMSGNO = 0132; /* <--- prod assign not setup*/
      set SL0KM310.SL5LOCTN[SLWIDX03] cursor, bold;
      set SL0KM310.SL4ZONE[SLWIDX03] cursor, bold;
      set SL0KM310.XARCD[SLWIDX03] cursor, bold;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3HB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3HC";
      SLWREC.SLWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S3HD";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    /* SL02ST1                       ;  <=== clear scrn (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS3H

// check prd/asgn, rsv, setasd qt
Function SL0KS3I()

   /* ************************************************************/
   /* *** product assignment must exist.                      ****/
   /* *** reserve and setaside qty must not exist.            ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** pick reserve and setaside qty cannot exist to       ****/
   /* *** change the product                                  ****/
   /* ************************************************************/

   /* DLVRUSA CHANGES - All SL6REC has been changed to VSYLOC02*/

  if (VSYLOC02.SL6PKRSV != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S3IA";
    SLWREC.SLWMSGNO = 0126; /* <--- pick reserve exists*/
    set SL0KM310.SL5LOCTN[SLWIDX03] cursor, bold;
    set SL0KM310.SL4ZONE[SLWIDX03] cursor, bold;
    set SL0KM310.XARCD[SLWIDX03] cursor, bold;
    return;
  end

  if (VSYLOC02.SL6STASD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S3IB";
    SLWREC.SLWMSGNO = 0127; /* <--- setaside exists*/
    set SL0KM310.SL5LOCTN[SLWIDX03] cursor, bold;
    set SL0KM310.SL4ZONE[SLWIDX03] cursor, bold;
    set SL0KM310.XARCD[SLWIDX03] cursor, bold;
    return;
  end

  if (VSYLOC02.SY5SZID == SL7REC.SY5SZID)
    if (SL7REC.XXXSTAT == "A")
      SL0KS1N(); /* <=== FETCH NEXT prd/loc*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3IC";
      SLWREC.SLWMSGNO = 0132; /* <--- prd asg not setup*/
      set SL0KM310.SL5LOCTN[SLWIDX03] cursor, bold;
      set SL0KM310.SL4ZONE[SLWIDX03] cursor, bold;
      set SL0KM310.XARCD[SLWIDX03] cursor, bold;
    end
  else
    if (VSYLOC02.SY5SZID > SL7REC.SY5SZID)
      while (VSYLOC02.SY5SZID != SL7REC.SY5SZID
       && SLWREC.SLWERRSW != "Y")
        SL0KS35(); /* <=== fetch next prd asgn*/
      end
      if (SLWREC.SLWERRSW == "Y")
        set SL0KM310.SL5LOCTN[SLWIDX03] cursor, bold;
        set SL0KM310.SL4ZONE[SLWIDX03] cursor, bold;
        set SL0KM310.XARCD[SLWIDX03] cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3ID";
      SLWREC.SLWMSGNO = 0132; /* <--- prd asg not setup*/
      set SL0KM310.SL5LOCTN[SLWIDX03] cursor, bold;
      set SL0KM310.SL4ZONE[SLWIDX03] cursor, bold;
      set SL0KM310.XARCD[SLWIDX03] cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS3I

// update records for a loc
Function SL0KS3J()

   /* ************************************************************/
   /* *** update all records for a location.                  ****/
   /* ***   product location, inventory files, s/l and inv    ****/
   /* ***   audit files.                                      ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** clear ws qty size table                             ****/
   /* ************************************************************/

  SLWIDX02 = 1;
  while (SLWIDX02 <= 40)
    SL0KW03.SY5SZID[SLWIDX02] = 0;
    /* DLVRUSA STARTS - SAIRAM SAPIA*/
    SL0KW03.SY4IDDSC[SLWIDX02] = " ";
    /* DLVRUSA ENDS - SAIRAM SAPIA*/
    SL0KW03.SL6ONHND[SLWIDX02] = 0;
    SLWIDX02 = SLWIDX02 + 1;
  end

  SL0KW03.SL0KWNSZ = 0;

  SL0KS3K(); /* <=== select set prd/loc*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  while (SQLCA.VAGen_SQLCODE == 0
   && SLWREC.SLWERRSW != "Y")
    SL0KS3L(); /* <=== product/location update*/
  end

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0KSXD(); /* <=== close scan prd/loc*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0KS3N(); /* <===  write prd/loc audit (curr)*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* DLVRUSA CHANGE STARTS - SAIRAM SAPIA*/

  if (SL0KM110.XWHCD != "02") /* <===  not colehaan*/
    SL0KS-MOVE4-SAPIA(); /* <===  write SAP inv adj records(curr)*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
  end

   /* DLVRUSA CHANGE ENDS - SAIRAM SAPIA*/

  SL0KS3O(); /* <===  write prd/loc audit (new)*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* DLVRUSA CHANGE STARTS - SAIRAM SAPIA*/

  if (SL0KM110.XWHCD != "02") /* <===  not colehaan*/
    SL0KS-MOVE5-SAPIA(); /* <===  write SAP inv adj records(new)*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
  end

   /* DLVRUSA CHANGE ENDS - SAIRAM SAPIA*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS3J

// select set prod location
Function SL0KS3K()

   /* ************************************************************/
   /* *** select set for product location                     ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup the selection criteria                        ****/
   /* ************************************************************/

   /* DLVRUSA CHANGES - All SL6REC has been changed to VSYLOC02*/

  set VSYLOC02 empty;
  VSYLOC02.XWHCD = SL0KM310.XWHCD;
  VSYLOC02.XARCD = SL0KM310.XARCD[SLWIDX01];
  VSYLOC02.SL4ZONE = SL0KM310.SL4ZONE[SLWIDX01];
  VSYLOC02.SL5LOCTN = SL0KM310.SL5LOCTN[SLWIDX01];
  VSYLOC02.XGPCD = SL0KM310.XGPCD;
  VSYLOC02.SY1STNBR = SL0KM310.SY1STNBR;
  VSYLOC02.SY2CLRID = SL0KM310.SY2CLRID;
  VSYLOC02.XDMCD = SL0KM310.XDMCD;
  VSYLOC02.XQACD = SL0KM310.XQACD;
  VSYLOC02.XOWCD = SL0KM310.XOWCD;
  VSYLOC02.PC2INSEG = SL0KM310.PC2INSEG;
  VSYLOC02.XEGCD = SL0KM310.XEGCD;
  VSYLOC02.XPGCD = SL0KM310.XPGCD;
  VSYLOC02.XUMCD = SL0KM310.XUMCD;
  VSYLOC02.XSLCD = SL0KM310.XSLCD;
  VSYLOC02.SY1UNPCS = -1;
  VSYLOC02.SY5SZID = -1;
  VSYLOC02.SL2PALET = "*";
  VSYLOC02.SL2CASE = SL0KM310.SL2CASE[SLWIDX01];
  VSYLOC02.PC3PONBR = -1;
   /* DLVRUSA STARTS - SAIRAM-SAPPO*/
  VSYLOC02.PC-SAP-PO-NBR = "*";
   /* DLVRUSA ENDS   - SAIRAM-SAPPO*/
  VSYLOC02.SL1CRTDT = -1;

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS3K ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

   /* DLVRUSA STARTS - SAIRAM VSYLOC02*/
   /* XSSL6X5;                     /* <=== select set prd/loc*/
  XSSLS-S5-VSYLOC02(); /* <=== select set prd/loc*/
   /* DLVRUSA ENDS - SAIRAM VSYLOC02*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* ** next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== setinq eof*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3KA";
      SLWREC.SLWMSGNO = 0032; /* <--- prod not found in loc*/
      set SL0KM310.XARCD[SLWIDX01] cursor, bold;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWSKYSW = "N";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3KB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3KC";
      SLWREC.SLWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S3KE";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    /* SL02ST1                       ;  <=== clear scrn (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS3K

// update product/location record
Function SL0KS3L()

   /* ************************************************************/
   /* *** this statement group updates the product/location   ****/
   /* *** record.                                             ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** store the size and qty in the ws table to be used   ****/
   /* *** to update the stock locate files                    ****/
   /* ************************************************************/

   /* DLVRUSA CHANGES - All SL6REC has been changed to VSYLOC02*/

  if (SL0KW03.SL0KWNSZ > 0)
    SLWIDX04 = SL0KW03.SL0KWNSZ;
    if (VSYLOC02.SY5SZID == SL0KW03.SY5SZID[SLWIDX04])
      /* DLVRUSA STARTS - SAIRAM SAPIA*/
      SLWIDX07 = VSYLOC02.SY5SZID;
      SL0KW03.SY4IDDSC[SLWIDX04] = SYPREC.SY4IDDSC[SLWIDX07];
      /* DLVRUSA ENDS - SAIRAM SAPIA*/
      SL0KW03.SL6ONHND[SLWIDX04] = SL0KW03.SL6ONHND[SLWIDX04] +       VSYLOC02.SL6ONHND;
    else
      SL0KW03.SL0KWNSZ = SL0KW03.SL0KWNSZ + 1;
      SLWIDX04 = SL0KW03.SL0KWNSZ;
      SL0KW03.SY5SZID[SLWIDX04] = VSYLOC02.SY5SZID;
      /* DLVRUSA STARTS - SAIRAM SAPIA*/
      SLWIDX07 = VSYLOC02.SY5SZID;
      SL0KW03.SY4IDDSC[SLWIDX04] = SYPREC.SY4IDDSC[SLWIDX07];
      /* DLVRUSA ENDS - SAIRAM SAPIA*/
      SL0KW03.SL6ONHND[SLWIDX04] = VSYLOC02.SL6ONHND;
    end
  else
    SL0KW03.SL0KWNSZ = SL0KW03.SL0KWNSZ + 1;
    SLWIDX04 = SL0KW03.SL0KWNSZ;
    SL0KW03.SY5SZID[SLWIDX04] = VSYLOC02.SY5SZID;
    /* DLVRUSA STARTS - SAIRAM SAPIA*/
    SLWIDX07 = VSYLOC02.SY5SZID;
    SL0KW03.SY4IDDSC[SLWIDX04] = SYPREC.SY4IDDSC[SLWIDX07];
    /* DLVRUSA ENDS - SAIRAM SAPIA*/
    SL0KW03.SL6ONHND[SLWIDX04] = VSYLOC02.SL6ONHND;
  end

   /* ************************************************************/
   /* *** store the qty in the ws table to be used to update  ****/
   /* *** the inventory files                                 ****/
   /* ************************************************************/

  SLWIDX04 = VSYLOC02.SY5SZID;
  SL0KW31.SL6ONHND[SLWIDX04] = SL0KW31.SL6ONHND[SLWIDX04] +              VSYLOC02.SL6ONHND;

  SL0KS10(); /* <=== delete prod/loc record*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0KW03.SL0KWQT3 = VSYLOC02.SL6ONHND;
  SL0KS3P(); /* <=== add or modify prd/loc for new*/
                                   /* prd*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0KS1N(); /* <=== fetch next prod/loc*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS3L

// write prod/loc audit (curr)
Function SL0KS3N()

   /* ************************************************************/
   /* *** this statement group writes the product/location    ****/
   /* *** audit records for the current product               ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** Setup the product/location audit record,            ****/
   /* *** except for the size and quantity.                   ****/
   /* ************************************************************/

  set VSLAUD02 empty; /* <=== product/location audit*/
  VSLAUD02.XWHCD = SL0KM310.XWHCD;
  VSLAUD02.IN5TRDCD = SL0KM310.IN5TRDCD;
  SL0KW31.SL0KWDOC = SL0KM310.IN5TRDOC;
  VSLAUD02.IN5TRPRT = SL0KW31.SL0KWLST;
  VSLAUD02.IN5TRDOC = SL0KM310.IN5TRDOC;
  VSLAUD02.IN5TRSUB = SL0KM310.IN5TRSUB;
  VSLAUD02.XGPCD = SL0KM310.XGPCD;
  VSLAUD02.SY1STNBR = SL0KM310.SY1STNBR;
  VSLAUD02.SY2CLRID = SL0KM310.SY2CLRID;
  VSLAUD02.XDMCD = SL0KM310.XDMCD;
  VSLAUD02.XQACD = SL0KM310.XQACD;
  VSLAUD02.XOWCD = SL0KM310.XOWCD;
  VSLAUD02.XSDCD = SL0KM310.PC2INSEG;
  VSLAUD02.XSACD = SL0KM310.XEGCD;
  VSLAUD02.XPGCD = SL0KM310.XPGCD;
  VSLAUD02.XUMCD = SL0KM310.XUMCD;
  VSLAUD02.XSLCD = SL0KM310.XSLCD;
  VSLAUD02.XIFCD = "01";
  VSLAUD02.XITCD = SL0KM310.XITCD;
  VSLAUD02.XIRCD = SL0KM310.XIRCD;
  VSLAUD02.IN5TRREF = SL0KM310.IN5TRREF;
  VSLAUD02.XARCD = SL0KM310.XARCD[SLWIDX01];
  VSLAUD02.SL4ZONE = SL0KM310.SL4ZONE[SLWIDX01];
  VSLAUD02.SL5LOCTN = SL0KM310.SL5LOCTN[SLWIDX01];
  if (SL0KM310.SL2CASE[SLWIDX01] == "*")
    VSLAUD02.SL2CASE = SL0KW31.SL2CASE;
  else
    VSLAUD02.SL2CASE = SL0KM310.SL2CASE[SLWIDX01];
  end

   /* ************************************************************/
   /* *** Write a product/location audit record for each size ****/
   /* *** that has been adjusted.                             ****/
   /* ************************************************************/

  SLWIDX02 = 1;
  while (SLWIDX02 <= SL0KW03.SL0KWNSZ
   && SLWREC.SLWERRSW == "N")
    if (SL0KW03.SL6ONHND[SLWIDX02] != 0)
      VSLAUD02.SY5SZID = SL0KW03.SY5SZID[SLWIDX02];
      VSLAUD02.SLATRQTY = SL0KW03.SL6ONHND[SLWIDX02];
      VSLAUD02.SLATRQTY = VSLAUD02.SLATRQTY * -1;
      SL0KS1R(); /* <=== write prod/loc audit*/
    end
    SLWIDX02 = SLWIDX02 + 1;
  end
   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS3N

// write prod/loc audit (new)
Function SL0KS3O()

   /* ************************************************************/
   /* *** this statement group writes the product/location    ****/
   /* *** audit records for thr new product                   ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** Setup the product/location audit record,            ****/
   /* *** except for the size and quantity.                   ****/
   /* ************************************************************/

  set VSLAUD02 empty; /* <=== product/location audit*/
  VSLAUD02.XWHCD = SL0KM310.XWHCD;
  VSLAUD02.IN5TRDCD = SL0KM310.IN5TRDCD;
  SL0KW31.SL0KWDOC = SL0KM310.IN5TRDOC;
  VSLAUD02.IN5TRPRT = SL0KW31.SL0KWLST;
  VSLAUD02.IN5TRDOC = SL0KM310.IN5TRDOC;
  VSLAUD02.IN5TRSUB = SL0KM310.IN5TRSUB;
  VSLAUD02.XGPCD = SL0KM310.SL0KWGPC;
  VSLAUD02.SY1STNBR = SL0KM310.SL0KWSTY;
  VSLAUD02.SY2CLRID = SL0KM310.SL0KWCLR;
  VSLAUD02.XDMCD = SL0KM310.SL0KWDIM;
  VSLAUD02.XQACD = SL0KM310.SL0KWQLT;
  VSLAUD02.XOWCD = SL0KM310.SL0KWOWN;
  VSLAUD02.XSDCD = SL0KM310.SL0KWISG;
  VSLAUD02.XSACD = SL0KM310.SL0KWXEG;
  VSLAUD02.XPGCD = SL0KM310.SL0KWPKG;
  VSLAUD02.XUMCD = SL0KM310.SL0KWUOM;
  VSLAUD02.XSLCD = SL0KM310.SL0KWSLC;
  VSLAUD02.XIFCD = "01";
  VSLAUD02.XITCD = SL0KM310.XITCD;
  VSLAUD02.XIRCD = SL0KM310.XIRCD;
  VSLAUD02.IN5TRREF = SL0KM310.IN5TRREF;
  VSLAUD02.XARCD = SL0KM310.XARCD[SLWIDX01];
  VSLAUD02.SL4ZONE = SL0KM310.SL4ZONE[SLWIDX01];
  VSLAUD02.SL5LOCTN = SL0KM310.SL5LOCTN[SLWIDX01];
  if (SL0KM310.SL2CASE[SLWIDX01] == "*")
    VSLAUD02.SL2CASE = SL0KW31.SL2CASE;
  else
    VSLAUD02.SL2CASE = SL0KM310.SL2CASE[SLWIDX01];
  end

   /* ************************************************************/
   /* *** Write a product/location audit record for each size ****/
   /* *** that has been adjusted.                             ****/
   /* ************************************************************/

  SLWIDX02 = 1;
  while (SLWIDX02 <= SL0KW03.SL0KWNSZ
   && SLWREC.SLWERRSW == "N")
    if (SL0KW03.SL6ONHND[SLWIDX02] != 0)
      VSLAUD02.SY5SZID = SL0KW03.SY5SZID[SLWIDX02];
      VSLAUD02.SLATRQTY = SL0KW03.SL6ONHND[SLWIDX02];
      SL0KS1R(); /* <=== write prod/loc audit*/
    end
    SLWIDX02 = SLWIDX02 + 1;
  end
   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS3O

// add or modify prd/loc
Function SL0KS3P()

   /* ************************************************************/
   /* *** add or modify product/location record               ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup the product/location key for the select unique****/
   /* ************************************************************/

   /* DLVRUSA CHANGES - All SL6REC has been changed to VSYLOC02*/

  VSYLOC02.XGPCD = SL0KM310.SL0KWGPC;
  VSYLOC02.SY1STNBR = SL0KM310.SL0KWSTY;
  VSYLOC02.SY2CLRID = SL0KM310.SL0KWCLR;
  VSYLOC02.XDMCD = SL0KM310.SL0KWDIM;
  VSYLOC02.XQACD = SL0KM310.SL0KWQLT;
  VSYLOC02.XOWCD = SL0KM310.SL0KWOWN;
  VSYLOC02.PC2INSEG = SL0KM310.SL0KWISG;
  VSYLOC02.XEGCD = SL0KM310.SL0KWXEG;
  VSYLOC02.XPGCD = SL0KM310.SL0KWPKG;
  VSYLOC02.XUMCD = SL0KM310.SL0KWUOM;
  VSYLOC02.XSLCD = SL0KM310.SL0KWSLC;

  if (SL0KW03.SL0KW-CH-STY-FL == "Y") /* Cole Haan Style*/
    VSYLOC02.XBCCD = "08";
  else
    VSYLOC02.XBCCD = "  ";
  end

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS3P ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

   /* DLVRUSA STARTS - SAIRAM VSYLOC02*/
   /* XSSL6U1;                     /* <=== select unique prod/loc*/
  XSSLS-S-VSYLOC02(); /* <=== select unique prod/loc*/
   /* DLVRUSA ENDS   - SAIRAM VSYLOC02*/

  if (SQLCA.VAGen_SQLCODE == 0)
    VSYLOC02.SL6ONHND = VSYLOC02.SL6ONHND + SL0KW03.SL0KWQT3;
    SL0KS1J(); /* <=== modify prod/loc*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
      VSYLOC02.SL6ONHND = SL0KW03.SL0KWQT3;
      SL0KS9D(); /* <=== add prod/loc*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWSKYSW = "N";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3PA";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3PB";
      SLWREC.SLWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S3PC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    /* SL02ST1                       ;  <=== clear scrn (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0KS3P

// validate area, zone, loc
Function SL0KS3U()

   /* ************************************************************/
   /* *** validate the area, zone, location                   ****/
   /* ************************************************************/

  set SL4REC empty;
  SL4REC.XWHCD = SL0KM310.XWHCD;
  SL4REC.XARCD = SL0KM310.XARCD[SLWIDX02];
  SL4REC.SL4ZONE = SL0KM310.SL4ZONE[SLWIDX02];

  SL0KS3V(); /* <--- validate area/zone*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ***/
  if (SL4REC.YZTCD in YZTTBL.YZTCD) /* <--- zone type*/
    if (YZTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3UA";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM310.SL4ZONE[SLWIDX02] cursor, bold;
      return;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S3UB";
    SLWREC.SLWMSGNO = 0113; /* <--- invalid zone type msg*/
    set SL0KM310.SL4ZONE[SLWIDX02] cursor, bold;
    return;
  end

  set SL5REC empty;
  SL5REC.XWHCD = SL0KM310.XWHCD;
  SL5REC.XARCD = SL0KM310.XARCD[SLWIDX02];
  SL5REC.SL4ZONE = SL0KM310.SL4ZONE[SLWIDX02];
  SL5REC.SL5LOCTN = SL0KM310.SL5LOCTN[SLWIDX02];

  SL0KS3W(); /* <--- find location*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  if (SL5REC.YLSCD == "05") /* <=== frozen location*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S3UC";
    SLWREC.SLWMSGNO = 0040; /* <=== location frozen msg*/
    set SL0KM310.SL5LOCTN[SLWIDX02] cursor, bold;
    return;
  end

  if (SL5REC.YLSCD == "06") /* Replenishment-reserved status*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S3UD";
    SLWREC.SLWMSGNO = 0039; /* Location in reserved status*/
    set SL0KM310.SL5LOCTN[SLWIDX02] cursor, bold;
    return;
  end

  if (SL5REC.YLSCD == "08") /* Planned status*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S3UE";
    SLWREC.SLWMSGNO = 0345; /* Location in planned status*/
    set SL0KM310.SL5LOCTN[SLWIDX02] cursor, bold;
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS3U

// validate area/zone
Function SL0KS3V()

   /* ************************************************************/
   /* *** validate area/zone                                  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS3V ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL4I0(); /* <=== std area/zone inquiry*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3VA";
      SLWREC.SLWMSGNO = 0012; /* <--- not on db msg*/
      set SL0KM310.SL4ZONE[SLWIDX02] cursor, bold;
      set SL0KM310.XARCD[SLWIDX02] cursor, bold;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWSKYSW = "N";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3VB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3VC";
      SLWREC.SLWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S3VE";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    /* SL02ST1                       ;  <=== clear scrn (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS3V

// find location
Function SL0KS3W()

   /* ************************************************************/
   /* ***         find locaiton                               ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS3W ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL5I0(); /* <=== std location inquiry*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3WA";
      SLWREC.SLWMSGNO = 0012; /* <--- not on db msg*/
      set SL0KM310.SL5LOCTN[SLWIDX02] cursor, bold;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWSKYSW = "N";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3WB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3WC";
      SLWREC.SLWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S3WE";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    /* SL02ST1                       ;  <=== clear scrn (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS3W

// check for rsv and setaside qty
Function SL0KS3X()

   /* ************************************************************/
   /* *** setup the selection criteria                        ****/
   /* ************************************************************/

   /* DLVRUSA CHANGES - All SL6REC has been changed to VSYLOC02*/

  set VSYLOC02 empty;
  VSYLOC02.XWHCD = SL0KM310.XWHCD;
  VSYLOC02.XARCD = SL0KM310.XARCD[SLWIDX03];
  VSYLOC02.SL4ZONE = SL0KM310.SL4ZONE[SLWIDX03];
  VSYLOC02.SL5LOCTN = SL0KM310.SL5LOCTN[SLWIDX03];
  VSYLOC02.XGPCD = SL0KM310.XGPCD;
  VSYLOC02.SY1STNBR = SL0KM310.SY1STNBR;
  VSYLOC02.SY2CLRID = SL0KM310.SY2CLRID;
  VSYLOC02.XDMCD = SL0KM310.XDMCD;
  VSYLOC02.XQACD = SL0KM310.XQACD;
  VSYLOC02.XOWCD = SL0KM310.XOWCD;
  VSYLOC02.PC2INSEG = SL0KM310.PC2INSEG;
  VSYLOC02.XEGCD = SL0KM310.XEGCD;
  VSYLOC02.XPGCD = SL0KM310.XPGCD;
  VSYLOC02.XUMCD = SL0KM310.XUMCD;
  VSYLOC02.XSLCD = SL0KM310.XSLCD;
  VSYLOC02.SY5SZID = -1;
  VSYLOC02.SY1UNPCS = -1;
  VSYLOC02.SL2PALET = "*";
  VSYLOC02.SL2CASE = SL0KM310.SL2CASE[SLWIDX03];
  VSYLOC02.PC3PONBR = -1;
   /* DLVRUSA STARTS - SAIRAM-SAPPO*/
  VSYLOC02.PC-SAP-PO-NBR = "*";
   /* DLVRUSA ENDS   - SAIRAM-SAPPO*/
  VSYLOC02.SL1CRTDT = -1;

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS3X ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

   /* DLVRUSA STARTS - SAIRAM VSYLOC02*/
   /* XSSL6S5;                     /* <=== select set prd/loc*/
  XSSLS-S5-VSYLOC02(); /* <=== select set prd/loc*/
   /* DLVRUSA ENDS   - SAIRAM VSYLOC02*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (VSYLOC02.XBCCD == "08" /* Cole Haan*/
     && SL0KM310.IN5TRDCD == "S") /* setaside*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3XA";
      SLWREC.SLWMSGNO = 0430; /* setaside not valid for product*/
      set SL0KM310.IN5TRDCD cursor, bold;
      return;
    end
    while (SQLCA.VAGen_SQLCODE == 0
     && SLWREC.SLWERRSW == "N")
      SL0KS3Y(); /* <=== check for rsv or setaside*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== setinq eof*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3XA";
      SLWREC.SLWMSGNO = 0128; /* <--- prod not found in loc*/
      set SL0KM310.SL2CASE[SLWIDX03] cursor, bold;
      set SL0KM310.SL5LOCTN[SLWIDX03] cursor, bold;
      set SL0KM310.SL4ZONE[SLWIDX03] cursor, bold;
      set SL0KM310.XARCD[SLWIDX03] cursor, bold;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWSKYSW = "N";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3XB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3XC";
      SLWREC.SLWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S3XE";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    /* SL02ST1                       ;  <=== clear scrn (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS3X

// check for rsv or setaside
Function SL0KS3Y()

   /* ************************************************************/
   /* *** check for reserve or setaside qty, cannot change    ****/
   /* *** if they exist                                       ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** pick reserve and setaside qty cannot exist to       ****/
   /* *** change the product                                  ****/
   /* ************************************************************/

   /* DLVRUSA CHANGES - All SL6REC has been changed to VSYLOC02*/

  if (VSYLOC02.SL6PKRSV != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S3YA";
    SLWREC.SLWMSGNO = 0126; /* <--- pick reserve exists*/
    set SL0KM310.SL5LOCTN[SLWIDX03] cursor, bold;
    set SL0KM310.SL4ZONE[SLWIDX03] cursor, bold;
    set SL0KM310.XARCD[SLWIDX03] cursor, bold;
    return;
  end

  if (VSYLOC02.SL6STASD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S3YB";
    SLWREC.SLWMSGNO = 0127; /* <--- setaside exists*/
    set SL0KM310.SL5LOCTN[SLWIDX03] cursor, bold;
    set SL0KM310.SL4ZONE[SLWIDX03] cursor, bold;
    set SL0KM310.XARCD[SLWIDX03] cursor, bold;
    return;
  end

  SL0KS1N(); /* <=== FETCH NEXT prd/loc*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS3Y

// check if work order exists
Function SL0KS3Z()
        /* VERIFY IF WORK ORDER exists for product/location*/
   /* ************************************************************/
   /* *** Verify there are no outstanding work orders for this****/
   /* ***  'from' location. This process uses the SL8REC and  ****/
   /* *** accesses the work order header not using the standard **/
   /* *** key to the file.                                    ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** set up the appropiate fields for selection in i/o   ****/
   /* ************************************************************/

  set SL8REC empty;

  SL8REC.XWHCD = SL0KM310.XWHCD;
  SL8REC.SL8FRAR = SL0KM310.XARCD[SLWIDX02];
  SL8REC.SL8FRZN = SL0KM310.SL4ZONE[SLWIDX02];
  if (SL0KM310.SL5LOCTN[SLWIDX02] == " ")
    SL8REC.SL8FRLC = "000000";
  else
    SL8REC.SL8FRLC = SL0KM310.SL5LOCTN[SLWIDX02];
  end
  SL8REC.XGPCD = SL0KM310.XGPCD;
  SL8REC.SY1STNBR = SL0KM310.SY1STNBR;
  SL8REC.SY2CLRID = SL0KM310.SY2CLRID;
  SL8REC.XDMCD = SL0KM310.XDMCD;
  SL8REC.XQACD = SL0KM310.XQACD;
  SL8REC.XOWCD = SL0KM310.XOWCD;
  SL8REC.PC2INSEG = SL0KM310.PC2INSEG;
  SL8REC.XEGCD = SL0KM310.XEGCD;
  SL8REC.XPGCD = SL0KM310.XPGCD;
  SL8REC.XUMCD = SL0KM310.XUMCD;
  SL8REC.XSLCD = SL0KM310.XSLCD;

          /* Select Set on WORK ORDER DATA BASE*/
   /* ************************************************************/
   /* *** setup the following before i/o sgrp execution:      ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* *** execute the appropriate sgrp                        ****/
   /* ***   note: sgrp names correspond to 'xq' process names ****/
   /* *** setup the action for the following return codes:    ****/
   /* ***      0 = found - continue                           ****/
   /* ***   +100 = not found - return w/ not fnd msg          ****/
   /* ***   -911 = deadlock - return w/ try again msg         ****/
   /* ***     <0 = db/severe error - contact programming msg  ****/
   /* ***          note: clear screen & put keys back         ****/
   /* ***          note: TA0020 will have been executed       ****/
   /* ***                within this sgrp for <0 only         ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS3Z ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL8S6(); /* <=== sel set wo header using non stndrd key*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for selset*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3ZA";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S3ZB";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** fetch next work order header row                    ****/
   /* ***  until an active w/o found or end of set.           ****/
   /* ************************************************************/
  while (SQLCA.VAGen_SQLCODE == 0
   && SL8REC.YWSCD != "01") /* <=== if w/o not active*/
    SL0KS1P(); /* fetch next work order header row*/
  end

  if (SL8REC.YWSCD == "01") /* <=== active w/o exists*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S3ZC";
    SLWREC.SLWMSGNO = 0042; /* <=== active w/o exists msg*/
    set SL0KM310.XARCD[SLWIDX02] cursor, bold;
  end

   /* ************************************************************/
   /* *** end of statement group                              ****/
   /* ************************************************************/
end // end SL0KS3Z

// check for curr prod change
Function SL0KS7F()

   /* ************************************************************/
   /* *** check if the current product has changed            ****/
   /* ************************************************************/

  if (SL0KW33.SL0KWNIN == "N")
    return;
  end

  if (SL0KM310.XGPCD != SL0KW34.XGPCD
   || SL0KM310.SY1STNBR != SL0KW34.SY1STNBR
   || SL0KM310.SY2CLRID != SL0KW34.SY2CLRID
   || SL0KM310.XDMCD != SL0KW34.XDMCD
   || SL0KM310.XQACD != SL0KW34.XQACD
   || SL0KM310.PC2INSEG != SL0KW34.PC2INSEG
   || SL0KM310.XEGCD != SL0KW34.XEGCD
   || SL0KM310.XSLCD != SL0KW34.XSLCD
   || SL0KM310.XPGCD != SL0KW34.XPGCD
   || SL0KM310.XUMCD != SL0KW34.XUMCD
   || SL0KM310.XOWCD != SL0KW34.XOWCD)
    SL0KW33.SL0KWNIN = "N";
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS7F

// select unique po hdr
Function SL0KS7H()
   /* ************************************************************/
   /* *** select unique row from:  purchase order hdr         ****/
   /* *** using the std module:  1O3270                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -811 = duplicate records found                    ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

  SLWREC.SLWVERSW = "N";
  SLVREC.SLVFNC = "S ";

  call "IO3270" (SLVREC, SQLCA, PC3REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    set SL0KM110.PC3PONBR cursor, bold;
    SLWREC.SLWVERSW = "Y";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S7HA";
    SLWREC.SLWMSGNO = 0011; /* invalid data*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    SLWREC.SLWVERSW = "Y";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S7HB";
    SLWREC.SLWMSGNO = 0031; /* deadlock try again*/
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "SL0CS7H ";
  TA1REC.TA1LOCAT[1] = "IO3270  ";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DPRODC  ";
  TA1REC.TA1TBLVU = "VPOHDR01";
  TA1REC.TA1TBLKE = PC3REC.PC3KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

end // end SL0KS7H

// select set #1 po hdr control
Function SL0KS7I()

   /* ************************************************************/
   /* *** select set # 1 control from:  purchase order hdr    ****/
   /* *** using the std module:  1O3270                       ****/
   /* ************************************************************/

  SLWREC.SLWVERSW = "N";

  SL0KS7K();
  if (SQLCA.VAGen_SQLCODE == 0)
    SL0KS7L();
    if (SQLCA.VAGen_SQLCODE == 0)
      set SL0KM110.SL0KWPID cursor, bold;
      set SL0KM110.PC4ORTYP bold;
      set SL0KM110.PC3PONBR bold;
      SLWREC.SLWVERSW = "Y";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S7IA";
      SLWREC.SLWMSGNO = 0011; /* invalid data*/
    end
  else
    set SL0KM110.SL0KWPID cursor, bold;
    set SL0KM110.PC4ORTYP bold;
    set SL0KM110.PC3PONBR bold;
    SLWREC.SLWVERSW = "Y";
    SLWREC.SLWERRSW = "Y";
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.XXXLOCID = "S7IB";
      SLWREC.SLWMSGNO = 0011; /* invalid data*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* deadlock try again*/
        SLWREC.XXXLOCID = "S7IC";
        SLWREC.SLWMSGNO = 0031;
      else
        SLWREC.XXXLOCID = "S7ID";
        SLWREC.SLWMSGNO = 0001; /* severe error*/
      end
    end
  end
  SL0KS7M();

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS7I

// check case for *'s
Function SL0KS7J()

   /* ************************************************************/
   /* *** check each byte of case for an '*'                  ****/
   /* *** setup error if one found                            ****/
   /* ************************************************************/

  X4CREC.X4CFNC = "E";
  X4CREC.X4CFND = "*";
  X4CREC.X4CFIL = " ";
  X4CREC.X4CLEN = 8;
  X4CREC.X4CFLD = SL0KM310.SL2CASE[SLWIDX01];

  XSCKBYT(); /* <=== check fld's bytes*/

  if (X4CREC.X4CRC == 0)
     /* ** next sentence ***/
  else
    if (X4CREC.X4CRC == 2)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S7JW";
      SLWREC.SLWMSGNO = 0105; /* <--- cannot enter * msg*/
      set SL0KM310.SL2CASE[SLWIDX01] cursor, bold;
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S7JX";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      set SL0KM310.SL2CASE[SLWIDX01] cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS7J

// select set po hdr :1
Function SL0KS7K()

   /* ************************************************************/
   /* *** select set of rows from:  po hdr                    ****/
   /* *** using the std module:  IO3270                       ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique field values for:            ****/
   /* ***   xwhcd                                             ****/
   /* ***   pc3poidt                                          ****/
   /* ***   pcfsecd                                           ****/
   /* ***   fy1fcty1                                          ****/
   /* ***   pc4ortyp                                          ****/
   /* *** the order by for this select set is:                ****/
   /* ***   pc3ponbr                                          ****/
   /* *** note: order is the same as select plus size         ****/
   /* ************************************************************/

  SLSREC.SLSFNC = "S1";

  call "IO3270" (SLSREC, SQLCA, PC3REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "SL0KS7K ";
    TA1REC.TA1LOCAT[1] = "IO3270  ";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DPRODC  ";
    TA1REC.TA1TBLVU = "VPOHDR01";
    TA1REC.TA1TBLKE = PC3REC.PC3KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** note: fetch handles return code correctly           ****/
   /* ************************************************************/

  SL0KS7L(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS7K

// fetch : po hdr : 1
Function SL0KS7L()

   /* ************************************************************/
   /* *** fetch next row from:  po hdr                        ****/
   /* *** using the std module:  IO3270                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ************************************************************/

  SLSREC.SLSFNC = "N1";

  call "IO3270" (SLSREC, SQLCA, PC3REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "SL0CS7L ";
  TA1REC.TA1LOCAT[1] = "IO3270  ";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DPRODC  ";
  TA1REC.TA1TBLVU = "VPOHDR01";
  TA1REC.TA1TBLKE = PC3REC.PC3KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS7L

// close : po hdr : 1
Function SL0KS7M()

   /* ************************************************************/
   /* *** close select set of:  po hdr                        ****/
   /* *** using the std module:  IO3270                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  SLSREC.SLSFNC = "C1";

  call "IO3270" (SLSREC, SQLCA, PC3REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "SL0CS7M ";
  TA1REC.TA1LOCAT[1] = "IO3270  ";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SELECT  ";
  TA1REC.TA1DBASE = "DPRODC  ";
  TA1REC.TA1TBLVU = "VPOHDR01";
  TA1REC.TA1TBLKE = PC3REC.PC3KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS7M

// update location status
Function SL0KS9A()

   /* ************************************************************/
   /* ***       UPDATE THE LOCATION STATUS                    ****/
   /* *** This statement group updates the location status    ****/
   /* *** if it currently is occupied or empty.               ****/
   /* ************************************************************/

   /* DLVRUSA CHANGES - All SL6REC has been changed to VSYLOC02*/

  set SL5REC empty;
  SL5REC.XWHCD = SL0KM110.XWHCD;
  SL5REC.XARCD = SL0KM110.XARCD;
  SL5REC.SL4ZONE = SL0KM110.SL4ZONE;
  SL5REC.SL5LOCTN = SL0KM110.SL5LOCTN;

  SL0KS9B(); /* <=== read location for update*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** only change the status if it is occupied or empty   ****/
   /* ************************************************************/

  if (SL5REC.YLSCD == "05") /* <=== frozen loc status*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S9AA";
    SLWREC.SLWMSGNO = 0040; /* <--- frozen location*/
    set SL0KM110.SL5LOCTN cursor, bold;
    return;
  end

  if (SL5REC.YLSCD == "06") /* Replenishment-reserved status*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S9AB";
    SLWREC.SLWMSGNO = 0039; /* Location in reserved status*/
    set SL0KM110.SL5LOCTN cursor, bold;
    return;
  end

  if (SL5REC.YLSCD == "08") /* Planned status*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S9AC";
    SLWREC.SLWMSGNO = 0345; /* Location in planned status*/
    set SL0KM110.SL5LOCTN cursor, bold;
    return;
  end

  if (SL5REC.YLSCD == "01" /* <=== empty loc status*/
   || SL5REC.YLSCD == "02") /* <=== occupied loc status*/

     /* NEXT SENTENCE*/
  else
    return; /* Return to previous process*/

  end

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS9A ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  set VSYLOC02 empty;
  VSYLOC02.XWHCD = SL0KM110.XWHCD;
  VSYLOC02.XARCD = SL0KM110.XARCD;
  VSYLOC02.SL4ZONE = SL0KM110.SL4ZONE;
  VSYLOC02.SL5LOCTN = SL0KM110.SL5LOCTN;
  VSYLOC02.SL2PALET = "*";
  VSYLOC02.SL2CASE = "*";

   /* DLVRUSA STARTS - SAIRAM VSYLOC02*/
   /* XSSL6S3;                     /* <=== prod/loc inquiry*/
  XSSLS-S3-VSYLOC02(); /* <=== prod/loc inquiry*/
   /* DLVRUSA ENDS   - SAIRAM VSYLOC02*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (SL5REC.YLSCD == "01") /* <=== empty loc status*/
      SL5REC.YLSCD = "02"; /* <=== occupied loc status*/
      SL5REC.SL5STCDT = X2CREC.X2CCURDT; /* <=== loc stat chg date*/
      SL0KS9C(); /* <=== update location*/
    else
       /* ** next sentence ***/
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
      if (SL5REC.YLSCD == "02") /* <=== occupied loc status*/
        SL5REC.YLSCD = "01"; /* <=== empty loc status*/
        SL5REC.SL5STCDT = X2CREC.X2CCURDT; /* <=== loc stat chg date*/
        SL0KS9C(); /* <=== update location*/
      else
         /* ** next sentence ***/
      end
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
        SLWREC.SLWSKYSW = "N";
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S9AD";
        SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      else
        if (SQLCA.VAGen_SQLCODE == -811) /* <=== for INQUIRY*/
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "S9AE";
          SLWREC.SLWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
        else
          SLWREC.SLWERRSW = "Y";
                                   /* <=== for all other neg. sql codes*/
          SLWREC.XXXLOCID = "S9AF";
          SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
          /* SL02ST1                       ;  <=== clear scrn (empty)*/
        end
      end
    end
  end

   /* DLVRUSA STARTS - SAIRAM VSYLOC02*/
   /* XSSL6C3;*/
  XSSLS-C3-VSYLOC02();
   /* DLVRUSA ENDS   - SAIRAM VSYLOC02*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS9A

// read location for update
Function SL0KS9B()

   /* ************************************************************/
   /* ***         READ LOCATION FOR UPDATE                    ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS9B ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL5U1(); /* <=== read location for update*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S9BA";
      SLWREC.SLWMSGNO = 0012; /* <--- not on db msg*/
      set SL0KM110.SL5LOCTN cursor, bold;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWSKYSW = "N";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S9BB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S9BC";
      SLWREC.SLWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S9BD";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    /* SL02ST1                       ;  <=== clear scrn (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS9B

// update location record
Function SL0KS9C()

   /* ************************************************************/
   /* ***          UPDATE LOCATION RECORD                     ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS9C ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL5R0(); /* <=== update location record*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for REPLACE*/
      SLWREC.SLWERRSW = "Y";
      if (SL5REC.SL5DATA > " ")
        SLWREC.XXXLOCID = "S9CA";
        SLWREC.SLWMSGNO = 0032; /* <--- row updated since last read*/
         /* you may want to perform a scrn re-setup*/
      else
        SLWREC.XXXLOCID = "S9CB";
        SLWREC.SLWMSGNO = 0033; /* <--- row deleted since last read*/
        /* SL02ST1                   ;  <=== clear scrn (empty)*/
      end
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWSKYSW = "N";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S9CD";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S9CE";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    /* SL02ST1                       ;  <=== clear scrn (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS9C

// add product/location record
Function SL0KS9D()
   /* ************************************************************/
   /* ***          ADD PRODUCT LOCATION RECORD                ****/
   /* ************************************************************/

   /* DLVRUSA CHANGES - All SL6REC has been changed to VSYLOC02*/

  if (VSYLOC02.XWHCD == "02" /* Greenland*/
   || VSYLOC02.XWHCD == "04" /* or Memphis Footwear*/
   || VSYLOC02.XWHCD == "07" /* or Wilsonville*/
   || VSYLOC02.XWHCD == "51" /* or Memphis Apparel*/
   || VSYLOC02.XWHCD == "25" /* or NSG*/
   || VSYLOC02.XWHCD == "42") /* or Canada*/
    if (SL5REC.YLTCD == "06" /* Highrise location*/
     || SL5REC.YLTCD == "22") /* or Handstack location*/
      VSYLOC02.SY1UNPCS = VSYLOC02.SL6ONHND; /* Units/case*/
    end
  else
    VSYLOC02.SY1UNPCS = 0; /* Units/case*/
  end

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS9D ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

   /* DLVRUSA STARTS - SAIRAM VSYLOC02*/
   /* XSSL6A1;                    /* <=== add prod/loc rec*/
  XSSLS-A-VSYLOC02(); /* <=== add prod/loc rec*/
   /* DLVRUSA ENDS   - SAIRAM VSYLOC02*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWSKYSW = "N";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S9DA";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -803) /* <=== for ADD*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S9DB";
      SLWREC.SLWMSGNO = 0045; /* <--- record exists msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S9DC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

end // end SL0KS9D

// check setaside not > onhand
Function SL0KS9E()

   /* ************************************************************/
   /* *** setaside cannot be greater than on hand qty         ****/
   /* ************************************************************/

  if (SL0KM110.SL0KMADJ[SLWIDX03] != 0)
    SL0KW01.SL0KWQTY = SL0KW01.SL6STASD[SLWIDX03];
    SL0KW01.SL0KWQTY = SL0KW01.SL0KWQTY + SL0KM110.SL0KMADJ[SLWIDX03];
    if (SL0KW01.SL0KWQTY > SL0KW01.SL6ONHND[SLWIDX03])
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S9EA";
      SLWREC.SLWMSGNO = 0116; /* <== cannot adj setaside > onhand*/
      set SL0KM110.SL0KMADJ[SLWIDX03] cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS9E

// clear rts date, recpt date, po
Function SL0KS9F()
   /* ************************************************************/
   /* *** this statement group clears the rst date, receipt   ****/
   /* *** date, and po.                                       ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** save fields needed for the update after the         ****/
   /* *** delete.                                             ****/
   /* ************************************************************/

   /* DLVRUSA CHANGES - All SL6REC has been changed to VSYLOC02*/

  SL0KW11.SL6PKRSV = VSYLOC02.SL6PKRSV;
  SL0KW11.SL6STASD = VSYLOC02.SL6STASD;
  SL0KW11.INASAID = VSYLOC02.INASAID;
  SL0KW11.SL6SADTE = VSYLOC02.SL6SADTE;

  SL0KS10(); /* <=== delete prod/loc rec*/

   /* ************************************************************/
   /* *** setup fields for a select unique on the product     ****/
   /* *** location record.                                    ****/
   /* ************************************************************/

  VSYLOC02.PC3POIDT = 0;
  VSYLOC02.PCFSECD = " ";
  VSYLOC02.FY1FCTYC = " ";
  VSYLOC02.PC4ORTYP = " ";
  VSYLOC02.PC3PONBR = 0;
   /* DLVRUSA STARTS - SAIRAM-SAPPO*/
  VSYLOC02.PC-SAP-PO-NBR = " ";
   /* DLVRUSA ENDS   - SAIRAM-SAPPO*/
  VSYLOC02.SL1CRTDT = 0;

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS9F ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  if (SL0KM110.XWHCD == "02" /* if Greenland*/
   || SL0KM110.XWHCD == "04" /* or Memphis Footwear*/
   || SL0KM110.XWHCD == "07" /* or Wilsonville*/
   || SL0KM110.XWHCD == "51" /* or Memphis Apparel*/
   || SL0KM110.XWHCD == "25" /* or NSG*/
   || SL0KM110.XWHCD == "42") /* or Canada*/
    VSYLOC02.SY1UNPCS = SL0KW01.SY1UNPCS;
    /* DLVRUSA STARTS - SAIRAM VSYLOC02*/
    /* XSSL6I1;                   /* <=== select unique prod/loc*/
    XSSLS-SA-VSYLOC02(); /* <=== select unique prod/loc*/
  else
    /* XSSL6I0;                   /* <=== select unique prod/loc*/
    XSSLS-S-VSYLOC02(); /* <=== select unique prod/loc*/
    /* DLVRUSA ENDS   - SAIRAM VSYLOC02*/
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    VSYLOC02.SL6PKRSV = VSYLOC02.SL6PKRSV + SL0KW11.SL6PKRSV;
    if (VSYLOC02.SL6STASD != 0)
      VSYLOC02.SL6STASD = VSYLOC02.SL6STASD + SL0KW11.SL6STASD;
    else
      VSYLOC02.SL6STASD = SL0KW11.SL6STASD;
      VSYLOC02.INASAID = SL0KW11.INASAID;
      VSYLOC02.SL6SADTE = SL0KW11.SL6SADTE;
    end
    SL0KS1J(); /* <=== update product/location*/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
      VSYLOC02.SL6RTSDT = 0;
      SL0KS9D(); /* <=== add product/location rec*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWSKYSW = "N";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S9FA";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S9FB";
      SLWREC.SLWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S9FC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

end // end SL0KS9F

// positive setaside update
Function SL0KS9G()

   /* ************************************************************/
   /* *** this statement group process positive setaside      ****/
   /* *** adjustments                                         ****/
   /* ************************************************************/

   /* DLVRUSA CHANGES - All SL6REC has been changed to VSYLOC02*/

  if (VSYLOC02.INASAID == 0)
    VSYLOC02.INASAID = INAREC.INASAID;
    VSYLOC02.SL6SADTE = X2CREC.X2CCURDT;
  end

  VSYLOC02.SL6STASD = VSYLOC02.SL6STASD + SL0KW01.SL0KWQT2;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS9G

// check onhand not < setaside
Function SL0KS9H()

   /* ************************************************************/
   /* *** cannot adjust onhand below setaside                 ****/
   /* ************************************************************/

  if (SL0KM110.SL0KMADJ[SLWIDX03] != 0)
    SL0KW01.SL0KWQTY = SL0KW01.SL6ONHND[SLWIDX03];
    SL0KW01.SL0KWQTY = SL0KW01.SL0KWQTY + SL0KM110.SL0KMADJ[SLWIDX03];
    if (SL0KW01.SL0KWQTY < SL0KW01.SL6STASD[SLWIDX03])
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S9HA";
      SLWREC.SLWMSGNO = 0117; /* <== cannot adj onhand below stasd*/
      set SL0KM110.SL0KMADJ[SLWIDX03] cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS9H

// validate prod in case
Function SL0KS9I()

   /* ************************************************************/
   /* *** make sure the adjustment won't create multiple      ****/
   /* *** products in the case                                ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup the selection criteria                        ****/
   /* ************************************************************/

   /* DLVRUSA CHANGES - All SL6REC has been changed to VSYLOC02*/

  set VSYLOC02 empty;
  VSYLOC02.XWHCD = SL0KM110.XWHCD;
  VSYLOC02.XARCD = SL0KM110.XARCD;
  VSYLOC02.SL4ZONE = SL0KM110.SL4ZONE;
  VSYLOC02.SL5LOCTN = SL0KM110.SL5LOCTN;
  VSYLOC02.SL2PALET = "*";
  VSYLOC02.SL2CASE = SL0KM110.SL2CASE;

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS9I ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

   /* DLVRUSA STARTS - SAIRAM VSYLOC02*/
   /* XSSL6S4;                     /* <=== select set prd/loc*/
  XSSLS-S4-VSYLOC02(); /* <=== select set prd/loc*/
   /* DLVRUSA ENDS   - SAIRAM VSYLOC02*/

  TA5REC.TA5TSQIX = 0; /* <=== initialize tsq relative pos*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (SL0KM110.XGPCD == VSYLOC02.XGPCD
     && SL0KM110.SY1STNBR == VSYLOC02.SY1STNBR
     && SL0KM110.SY2CLRID == VSYLOC02.SY2CLRID
     && SL0KM110.XDMCD == VSYLOC02.XDMCD
     && SL0KM110.XQACD == VSYLOC02.XQACD
     && SL0KM110.XOWCD == VSYLOC02.XOWCD
     && SL0KM110.PC2INSEG == VSYLOC02.PC2INSEG
     && SL0KM110.XEGCD == VSYLOC02.XEGCD
     && SL0KM110.XPGCD == VSYLOC02.XPGCD
     && SL0KM110.XUMCD == VSYLOC02.XUMCD
     && SL0KM110.XSLCD == VSYLOC02.XSLCD)
      /* ** next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S9IA";
      SLWREC.SLWMSGNO = 0140; /* <--- product not in case*/
      set SL0KM110.SY2CLRID cursor, bold;
      set SL0KM110.SY1STNBR cursor, bold;
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== setinq eof*/
      /* ** next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
        SLWREC.SLWSKYSW = "N";
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S9IB";
        SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      else
        if (SQLCA.VAGen_SQLCODE == -811) /* <=== for INQUIRY*/
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "S9IC";
          SLWREC.SLWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
        else
          SLWREC.SLWERRSW = "Y";
                                   /* <=== for all other neg. sql codes*/
          SLWREC.XXXLOCID = "S9ID";
          SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
          /* SL02ST1                       ;  <=== clear scrn (empty)*/
        end
      end
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS9I

// close scan prd/loc 4
Function SL0KS9J()

   /* ************************************************************/
   /* *** close scan for product location 4                   ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS9J ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

   /* DLVRUSA STARTS - SAIRAM VSYLOC02*/
   /* XSSL6C4;                     /* <=== close scan prd/loc*/
  XSSLS-C4-VSYLOC02(); /* <=== close scan prd/loc*/
   /* DLVRUSA ENDS   - SAIRAM VSYLOC02*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* ** next sentence*/
  else
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S9JA";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    /* SL02ST1                       ;  <=== clear scrn (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS9J

// select set prod assignment
Function SL0KS9K()
   /* ************************************************************/
   /* *** select set product assignment                       ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup the product/assignmt key for the select set   ****/
   /* ************************************************************/

  set SL7REC empty;
  SL7REC.XWHCD = SL0KM110.XWHCD;
  SL7REC.XARCD = SL0KM110.XARCD;
  SL7REC.SL4ZONE = SL0KM110.SL4ZONE;
  SL7REC.SL5LOCTN = SL0KM110.SL5LOCTN;
  SL7REC.XGPCD = SL0KM110.XGPCD;
  SL7REC.SY1STNBR = SL0KM110.SY1STNBR;
  SL7REC.SY2CLRID = SL0KM110.SY2CLRID;
  SL7REC.XDMCD = SL0KM110.XDMCD;
  SL7REC.XQACD = SL0KM110.XQACD;
  SL7REC.XOWCD = SL0KM110.XOWCD;
  SL7REC.XSDCD = SL0KM110.PC2INSEG;
  SL7REC.XSACD = SL0KM110.XEGCD;
  SL7REC.XPGCD = SL0KM110.XPGCD;
  SL7REC.XUMCD = SL0KM110.XUMCD;
  SL7REC.SY5SZID = -1;
  SL7REC.XXXSTAT = "*";
  SLVREC.SLVSDT = 0; /* <=== start date*/
  SLVREC.SLVEDT = X2CREC.X2CCURDT; /* <=== end date*/

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS9K ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL7S7(); /* <=== select set prod/asg*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.SLWFTMSW = "N";
      SLWREC.XXXLOCID = "S9KA";
      SLWREC.SLWMSGNO = 0202; /* <--- prd asg not setup*/
      set SL0KM110.SL5LOCTN cursor, bold;
      set SL0KM110.SL4ZONE cursor, bold;
      set SL0KM110.XARCD cursor, bold;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWSKYSW = "N";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S9KB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S9KC";
      SLWREC.SLWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S9KD";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    /* SL02ST1                       ;  <=== clear scrn (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0KS9K

// close scan prd/asg 7
Function SL0KS9L()

   /* ************************************************************/
   /* *** close scan for product assignment 1                 ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS9L ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL7C7(); /* <=== close scan prd/asg*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* ** next sentence*/
  else
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S9LA";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    /* SL02ST1                       ;  <=== clear scrn (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS9L

// fetch next prod/asg scan 7
Function SL0KS9M()

   /* ************************************************************/
   /* *** fetch next product/assignment scan 7                ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KS9M ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL7F7(); /* <=== fetch next prod/loc*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == +100) /* <=== SETINQ EOF*/
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S9MA";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    /* SL02ST1                       ;  <=== clear scrn (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS9M

// move sizes to ws size tbl bulk
Function SL0KS9N()

   /* ************************************************************/
   /* *** this statement group moves the internal size and    ****/
   /* *** description to the ws size table (BULK AREA)        ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** clear working storage size table                    ****/
   /* ************************************************************/

  SLWIDX01 = 1;
  while (SLWIDX01 <= 39)
    SL0KW01.SY5SZID[SLWIDX01] = 0;
    SL0KW01.SY4IDDSC[SLWIDX01] = " ";
    SL0KW01.SL6ONHND[SLWIDX01] = 0;
    SL0KW01.SL6PKRSV[SLWIDX01] = 0;
    SL0KW01.SL6STASD[SLWIDX01] = 0;
    SL0KW01.SL0KWCRC[SLWIDX01] = "N";
    SLWIDX01 = SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** move the internal size and and description to the   ****/
   /* *** size table.                                         ****/
   /* ************************************************************/

  SLWIDX01 = 1;
  SLWIDX02 = 1;
  SL0KW01.SL0KWNSZ = 0;
  while (SLWIDX01 <= 40)
    if (SYPREC.SY4IDDSC[SLWIDX01] > " ")
      SL0KW01.SY5SZID[SLWIDX02] = SLWIDX01;
      SL0KW01.SY4IDDSC[SLWIDX02] = SYPREC.SY4IDDSC[SLWIDX01];
      SL0KW01.SL0KWNSZ = SL0KW01.SL0KWNSZ + 1;
      SLWIDX02 = SLWIDX02 + 1;
    end
    SLWIDX01 = SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KS9N

// missing input edits
Function SL0KSA0()

   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: setup defaults for optional fields, if any    ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0KM010.XMSLMSNO > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA0A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM010.XMSLMSNO cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KSA0

// key missing input edits
Function SL0KSA1()

   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: setup defaults for optional fields, if any    ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

   /* DLVRUSA STARTS - SAIRAM-SAPPO*/
  if (SL0KM110.XWHCD == "02")
    SL0KM110.PC-SAP-PO-NBR = "*";
    set SL0KM110.PC-SAP-PO-NBR skip;
    /* DLVRUSA ENDS   - SAIRAM-SAPPO*/
    if (SL0KM110.SL0KWPID > " "
     && SL0KM110.PC4ORTYP == " ")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SA1A";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0KM110.PC4ORTYP cursor, bold;
    else
      if (SL0KM110.PC4ORTYP > " "
       && SL0KM110.SL0KWPID == " ")
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SA1B";
        SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
        set SL0KM110.PC4ORTYP cursor, bold;
      end
    end

    if (SL0KM110.XGPCD == "03")
      if (SL0KM110.PC4ORTYP > " "
       || SL0KM110.SL0KWPID > " ")
        if (SL0KM110.PC4ORTYP == "*"
         && SL0KM110.SL0KWPID == "*")
          /* NEXT SENTENCE*/
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SA1C";
          SLWREC.SLWMSGNO = 0191; /* <--- not valid for gpc 03*/
          set SL0KM110.SL0KWPID cursor, bold;
          set SL0KM110.PC4ORTYP bold;
        end
      end
    end

    if (SL0KM110.PC3PONBR != -1
     && SL0KM110.PC3PONBR != 0)
      if (SL0KM110.SL0KWPID > " "
       && SL0KM110.PC4ORTYP > " "
       && SL0KM110.PC4ORTYP != "*"
       && SL0KM110.SL0KWPID != "*")
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SA1D";
        SLWREC.SLWMSGNO = 0192; /* <--- can not enter both fields*/
        set SL0KM110.SL0KWPID cursor, bold;
        set SL0KM110.PC4ORTYP bold;
        set SL0KM110.PC3PONBR bold;
      end
    end
    /* DLVRUSA STARTS - SAIRAM-SAPPO*/
  else
    SL0KM110.SL0KWPID = "*";
    SL0KM110.PC4ORTYP = "*";
    set SL0KM110.PC4ORTYP skip;
    set SL0KM110.SL0KWPID skip;
  end
   /* DLVRUSA ENDS   - SAIRAM-SAPPO*/

  if (SL0KM110.SL5LOCTN > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1E";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM110.SL5LOCTN cursor, bold;
  end

  if (SL0KM110.SL4ZONE > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1F";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM110.SL4ZONE cursor, bold;
  end

  if (SL0KM110.XARCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1G";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM110.XARCD cursor, bold;
  end

  if (SL0KM110.XOWCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1H";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM110.XOWCD cursor, bold;
  end

   /* ***** code commented by Grant Gilray 3/16/88 ******/
   /* IF SL0KM110.XUMCD GT ' ';*/
    /* ; ** next sentence ***/
   /* ELSE ;*/
    /* MOVE 'Y' TO SLWREC.SLWERRSW;*/
    /* MOVE 'SA1i' TO SLWREC.XXXLOCID;*/
    /* MOVE 0009 TO SLWREC.SLWMSGNO  ;  <--- missing required fie*/
    /* SET SL0KM110.XUMCD CURSOR,BRIGHT;*/
   /* END ;*/
   /* ***************************************************/

  if (SL0KM110.XPGCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1J";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM110.XPGCD cursor, bold;
  end

  if (SL0KM110.XSLCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1K";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM110.XSLCD cursor, bold;
  end

  if (SL0KM110.XEGCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1L";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM110.XEGCD cursor, bold;
  end

  if (SL0KM110.PC2INSEG > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1M";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM110.PC2INSEG cursor, bold;
  end

  if (SL0KM110.XQACD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1N";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM110.XQACD cursor, bold;
  end

  if (SL0KM110.XDMCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1O";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM110.XDMCD cursor, bold;
  end

  if (SL0KM110.SY2CLRID > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1P";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM110.SY2CLRID cursor, bold;
  end

  if (SL0KM110.SY1STNBR > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1Q";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM110.SY1STNBR cursor, bold;
  end

  if (SL0KM110.XGPCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1R";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM110.XGPCD cursor, bold;
  end

  if (SL0KM110.XIFCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1S";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM110.XIFCD cursor, bold;
  end

  if (SL0KM110.XIRCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1T";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM110.XIRCD cursor, bold;
  end

  if (SL0KM110.XITCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1U";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM110.XITCD cursor, bold;
  end

  if (SL0KM110.IN5TRDOC > 0)
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1V";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM110.IN5TRDOC cursor, bold;
  end

  if (SL0KM110.IN5TRDCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1W";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM110.IN5TRDCD cursor, bold;
  end

  if (SL0KM110.XWHCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1X";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM110.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KSA1

// key missing input edits
Function SL0KSA2()

   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: setup defaults for optional fields, if any    ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0KM210.SL5LOCTN > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA24";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM210.SL5LOCTN cursor, bold;
  end

  if (SL0KM210.SL4ZONE > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA23";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM210.SL4ZONE cursor, bold;
  end

  if (SL0KM210.XARCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA22";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM210.XARCD cursor, bold;
  end

  if (SL0KM210.SL0KWOWN > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA21";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM210.SL0KWOWN cursor, bold;
  end

   /* ***** code commented by Grant Gilray 3/16/88 ******/
   /* IF SL0KM210.SL0KWUOM GT ' ';*/
    /* ; ** next sentence ***/
   /* ELSE ;*/
    /* MOVE 'Y' TO SLWREC.SLWERRSW;*/
    /* MOVE 'SA2Z' TO SLWREC.XXXLOCID;*/
    /* MOVE 0009 TO SLWREC.SLWMSGNO  ;  <--- missing required fie*/
    /* SET SL0KM210.SL0KWUOM CURSOR,BRIGHT;*/
   /* END ;*/
   /* ********* end of commented code 3/16/88 ***********/

  if (SL0KM210.SL0KWPKG > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2Y";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM210.SL0KWPKG cursor, bold;
  end

  if (SL0KM210.SL0KWSLC > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2X";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM210.SL0KWSLC cursor, bold;
  end

  if (SL0KM210.SL0KWXEG > " ") /* engr. diff.*/
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA25";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM210.SL0KWXEG cursor, bold;
  end

  if (SL0KM210.SL0KWISG > " ") /* in-seg*/
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2W";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM210.SL0KWISG cursor, bold;
  end

  if (SL0KM210.SL0KWQLT > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2V";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM210.SL0KWQLT cursor, bold;
  end

  if (SL0KM210.SL0KWDIM > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2U";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM210.SL0KWDIM cursor, bold;
  end

  if (SL0KM210.SL0KWCLR > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2T";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM210.SL0KWCLR cursor, bold;
  end

  if (SL0KM210.SL0KWSTY > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2S";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM210.SL0KWSTY cursor, bold;
  end

  if (SL0KM210.SL0KWGPC > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2R";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM210.SL0KWGPC cursor, bold;
  end

  if (SL0KM210.XOWCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2Q";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM210.XOWCD cursor, bold;
  end

   /* ***** code commented by Grant Gilray 3/16/88 ******/
   /* IF SL0KM210.XUMCD GT ' ';*/
    /* ; ** next sentence ***/
   /* ELSE ;*/
    /* MOVE 'Y' TO SLWREC.SLWERRSW;*/
    /* MOVE 'SA2P' TO SLWREC.XXXLOCID;*/
    /* MOVE 0009 TO SLWREC.SLWMSGNO  ;  <--- missing required fie*/
    /* SET SL0KM210.XUMCD CURSOR,BRIGHT;*/
   /* END ;*/
   /* ******** end of code commented on 3/16/88 *********/

  if (SL0KM210.XPGCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2O";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM210.XPGCD cursor, bold;
  end

  if (SL0KM210.XSLCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2N";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM210.XSLCD cursor, bold;
  end

  if (SL0KM210.XEGCD > " ") /* engr. diff.*/
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA26";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM210.XEGCD cursor, bold;
  end

  if (SL0KM210.PC2INSEG > " ") /* in-seg*/
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2M";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM210.PC2INSEG cursor, bold;
  end

  if (SL0KM210.XQACD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2L";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM210.XQACD cursor, bold;
  end

  if (SL0KM210.XDMCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2K";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM210.XDMCD cursor, bold;
  end

  if (SL0KM210.SY2CLRID > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2J";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM210.SY2CLRID cursor, bold;
  end

  if (SL0KM210.SY1STNBR > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2I";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM210.SY1STNBR cursor, bold;
  end

  if (SL0KM210.XGPCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2H";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM210.XGPCD cursor, bold;
  end

  if (SL0KM210.XIRCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2G";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM210.XIRCD cursor, bold;
  end

  if (SL0KM210.XITCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2E";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM210.XITCD cursor, bold;
  end

  if (SL0KM210.IN5TRDOC > 0)
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2C";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM210.IN5TRDOC cursor, bold;
  end

  if (SL0KM210.IN5TRDCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2B";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM210.IN5TRDCD cursor, bold;
  end

  if (SL0KM210.XWHCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM210.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KSA2

// key missing input edits
Function SL0KSA3()

   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: setup defaults for optional fields, if any    ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** check for missing area/zone/location                ****/
   /* ************************************************************/

  SL0KW31.SL0KWLEF = "N"; /* <=== loc entered flag*/
  SLWIDX03 = 36;
  while (SLWIDX03 != 0)
    SL0KS3D(); /* <=== check for missing area/zn/loc*/
    SLWIDX03 = SLWIDX03 - 1;
  end

  if (SL0KW31.SL0KWLEF == "Y")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA31";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM310.SL5LOCTN[1] cursor, bold;
    set SL0KM310.SL4ZONE[1] cursor, bold;
    set SL0KM310.XARCD[1] cursor, bold;
  end

  if (SL0KM310.SL0KWOWN > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3Z";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM310.SL0KWOWN cursor, bold;
  end

   /* ***** code commented by Grant Gilray 3/21/88 ******/
   /* iF SL0KM310.SL0KWUOM GT ' ';*/
    /* ; ** next sentence ***/
   /* ELSE ;*/
    /* MOVE 'Y' TO SLWREC.SLWERRSW;*/
    /* MOVE 'SA3Y' TO SLWREC.XXXLOCID;*/
    /* MOVE 0009 TO SLWREC.SLWMSGNO  ;  <--- missing required fie*/
    /* SET SL0KM310.SL0KWUOM CURSOR,BRIGHT;*/
   /* END ;*/
   /* ***** end of code commented on 3/21/88 ******/

  if (SL0KM310.SL0KWPKG > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3X";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM310.SL0KWPKG cursor, bold;
  end

  if (SL0KM310.SL0KWSLC > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3W";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM310.SL0KWSLC cursor, bold;
  end

  if (SL0KM310.SL0KWXEG > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA32";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM310.SL0KWXEG cursor, bold;
  end

  if (SL0KM310.SL0KWISG > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3V";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM310.SL0KWISG cursor, bold;
  end

  if (SL0KM310.SL0KWQLT > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3U";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM310.SL0KWQLT cursor, bold;
  end

  if (SL0KM310.SL0KWDIM > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3T";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM310.SL0KWDIM cursor, bold;
  end

  if (SL0KM310.SL0KWCLR > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3S";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM310.SL0KWCLR cursor, bold;
  end

  if (SL0KM310.SL0KWSTY > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3R";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM310.SL0KWSTY cursor, bold;
  end

  if (SL0KM310.SL0KWGPC > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3Q";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM310.SL0KWGPC cursor, bold;
  end

  if (SL0KM310.XOWCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3P";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM310.XOWCD cursor, bold;
  end

   /* ***** code commented by Grant Gilray 3/21/88 ******/
   /* IF SL0KM310.XUMCD GT ' ';*/
    /* ; ** next sentence ***/
   /* ELSE ;*/
    /* MOVE 'Y' TO SLWREC.SLWERRSW;*/
    /* MOVE 'SA3O' TO SLWREC.XXXLOCID;*/
    /* MOVE 0009 TO SLWREC.SLWMSGNO  ;  <--- missing required fie*/
    /* SET SL0KM310.XUMCD CURSOR,BRIGHT;*/
   /* END ;*/
   /* ***** end of code commented on 3/21/88 ******/

  if (SL0KM310.XPGCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3N";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM310.XPGCD cursor, bold;
  end

  if (SL0KM310.XSLCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3M";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM310.XSLCD cursor, bold;
  end

  if (SL0KM310.XEGCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA32";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM310.XEGCD cursor, bold;
  end

  if (SL0KM310.PC2INSEG > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3L";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM310.PC2INSEG cursor, bold;
  end

  if (SL0KM310.XQACD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3K";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM310.XQACD cursor, bold;
  end

  if (SL0KM310.XDMCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3J";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM310.XDMCD cursor, bold;
  end

  if (SL0KM310.SY2CLRID > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3I";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM310.SY2CLRID cursor, bold;
  end

  if (SL0KM310.SY1STNBR > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3H";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM310.SY1STNBR cursor, bold;
  end

  if (SL0KM310.XGPCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3G";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM310.XGPCD cursor, bold;
  end

  if (SL0KM310.XIRCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3F";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM310.XIRCD cursor, bold;
  end

  if (SL0KM310.XITCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3E";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM310.XITCD cursor, bold;
  end

  if (SL0KM310.IN5TRDOC > 0)
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3C";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM310.IN5TRDOC cursor, bold;
  end

  if (SL0KM310.IN5TRDCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3B";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM310.IN5TRDCD cursor, bold;
  end

  if (SL0KM310.XWHCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0KM310.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KSA3

// same key edits
Function SL0KSB1()

   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw.           ****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (SL0KM110.XWHCD != SL0KW01.XWHCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM110.IN5TRDCD != SL0KW01.IN5TRDCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM110.IN5TRDOC != SL0KW01.IN5TRDOC)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM110.IN5TRSUB != SL0KW01.IN5TRSUB)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM110.XITCD != SL0KW01.XITCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM110.IN5TRREF != SL0KW01.IN5TRREF)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM110.XIRCD != SL0KW01.XIRCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM110.XIFCD != SL0KW01.XIFCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM110.XGPCD != SL0KW01.XGPCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM110.SY1STNBR != SL0KW01.SY1STNBR)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM110.SY2CLRID != SL0KW01.SY2CLRID)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM110.XDMCD != SL0KW01.XDMCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM110.XQACD != SL0KW01.XQACD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM110.PC2INSEG != SL0KW01.PC2INSEG)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM110.XEGCD != SL0KW01.XEGCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM110.XSLCD != SL0KW01.XSLCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM110.XPGCD != SL0KW01.XPGCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM110.XUMCD != SL0KW01.XUMCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM110.XOWCD != SL0KW01.XOWCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM110.XARCD != SL0KW01.XARCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM110.SY1UNPCS != SL0KW01.SY1UNPCS)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM110.SL4ZONE != SL0KW01.SL4ZONE)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM110.SL5LOCTN != SL0KW01.SL5LOCTN)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM110.PC3PONBR != SL0KW01.PC3PONBR)
    SLWREC.SLWSKYSW = "N";
    return;
  end

   /* DLVRUSA STARTS - SAIRAM-SAPPO*/
  if (SL0KM110.XWHCD != "02")
    if (SL0KM110.PC-SAP-PO-NBR != SL0KW01.PC-SAP-PO-NBR)
      SLWREC.SLWSKYSW = "N";
      return;
    end
  end
   /* DLVRUSA STARTS - SAIRAM-SAPPO*/

  if (SL0KM110.SL0KWPID != SL0KW01.SL0KWPID)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM110.PC4ORTYP != SL0KW01.PC4ORTYP)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM110.SL2CASE != SL0KW01.SL2CASE)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KSB1

// same key edits
Function SL0KSB2()
   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw.           ****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (SL0KM210.XWHCD != SL0KW02.XWHCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM210.IN5TRDCD != SL0KW02.IN5TRDCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM210.IN5TRDOC != SL0KW02.IN5TRDOC)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM210.IN5TRSUB != SL0KW02.IN5TRSUB)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM210.XITCD != SL0KW02.XITCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM210.IN5TRREF != SL0KW02.IN5TRREF)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM210.XIRCD != SL0KW02.XIRCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM210.XGPCD != SL0KW02.XGPCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM210.SY1STNBR != SL0KW02.SY1STNBR)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM210.SY2CLRID != SL0KW02.SY2CLRID)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM210.XDMCD != SL0KW02.XDMCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM210.XQACD != SL0KW02.XQACD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM210.PC2INSEG != SL0KW02.PC2INSEG)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM210.XEGCD != SL0KW02.XEGCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM210.XSLCD != SL0KW02.XSLCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM210.XPGCD != SL0KW02.XPGCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM210.XUMCD != SL0KW02.XUMCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM210.XOWCD != SL0KW02.XOWCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM210.SL0KMUT1 != SL0KW02.SY1UNPCS)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM210.SL0KWGPC != SL0KW02.SL0KWGPC)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM210.SL0KWSTY != SL0KW02.SL0KWSTY)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM210.SL0KWCLR != SL0KW02.SL0KWCLR)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM210.SL0KWDIM != SL0KW02.SL0KWDIM)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM210.SL0KWQLT != SL0KW02.SL0KWQLT)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM210.SL0KWISG != SL0KW02.SL0KWISG)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM210.SL0KWXEG != SL0KW02.SL0KWXEG)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM210.SL0KWSLC != SL0KW02.SL0KWSLC)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM210.SL0KWPKG != SL0KW02.SL0KWPKG)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM210.SL0KWUOM != SL0KW02.SL0KWUOM)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM210.SL0KWOWN != SL0KW02.SL0KWOWN)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM210.SL0KMUT2 != SL0KW02.SL0KWUNT)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM210.XARCD != SL0KW02.XARCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM210.SL4ZONE != SL0KW02.SL4ZONE)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0KM210.SL5LOCTN != SL0KW02.SL5LOCTN)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

end // end SL0KSB2

// key field edits
Function SL0KSC1()
   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

  if (SL0KM110.SL2CASE > "        ")
    X4CREC.X4CFNC = "E";
    X4CREC.X4CFND = "*";
    X4CREC.X4CFIL = " ";
    X4CREC.X4CLEN = 8;
    X4CREC.X4CFLD = SL0KM110.SL2CASE;

    XSCKBYT(); /* <=== check fld's bytes*/

    if (X4CREC.X4CRC == 0)
       /* ** next sentence ***/
    else
      if (X4CREC.X4CRC == 2)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC1A";
        SLWREC.SLWMSGNO = 0105; /* <--- cannot enter * msg*/
        set SL0KM110.SL2CASE cursor, bold;
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC1B";
        SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
        set SL0KM110.SL2CASE cursor, bold;
      end
    end
  end

  SL0KW11.XWHCD = SL0KM110.XWHCD;
  SL0KW11.XARCD = SL0KM110.XARCD;
  if (SL0KW11.SL0KWWAR in XARTBL.XARKEY) /* <--- area type*/
    if (XARTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XARTBL.XARRCVFL[sysVar.arrayIndex] == "Y") /* <=== if receiving area*/
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC1C";
        SLWREC.SLWMSGNO = 0093; /* <--- cannot adj receiving*/
        set SL0KM110.XARCD cursor, bold;
      else
        if (XARTBL.XARPRCFL[sysVar.arrayIndex] == "Y") /* <=== if processing area*/
          if (SL0KM110.SL2CASE != " ")
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SC1D";
            SLWREC.SLWMSGNO = 0107; /* <--- case must be blank*/
            set SL0KM110.SL2CASE cursor, bold;
          end
          if (SL0KM110.PC3PONBR != -1
           && SL0KM110.PC3PONBR != 0)
            if (SL0KM110.XWHCD != "02" /* if  not Greenland*/
             && SL0KM110.XWHCD != "04" /* and not Memphis Footwear*/
             && SL0KM110.XWHCD != "07") /* and not Wilsonville*/
              SLWREC.SLWERRSW = "Y";
              SLWREC.XXXLOCID = "SC1E";
              SLWREC.SLWMSGNO = 0108; /* <--- po must be zero*/
              set SL0KM110.PC3PONBR cursor, bold;
            end
          end
          /* DLVRUSA STARTS - SAIRAM-SAPPO*/
          if (SL0KM110.XWHCD != "02")
            if (SL0KM110.PC-SAP-PO-NBR != " "
             && SL0KM110.PC-SAP-PO-NBR != "*")
              if (SL0KM110.XWHCD != "04" /* if not Memphis Footwear*/
               && SL0KM110.XWHCD != "07") /* and not Wilsonville*/
                SLWREC.SLWERRSW = "Y";
                SLWREC.XXXLOCID = "SC1$";
                SLWREC.SLWMSGNO = 0108; /* <--- po must be space*/
                set SL0KM110.PC-SAP-PO-NBR cursor, bold;
              end
            end
          end
          /* DLVRUSA STARTS - SAIRAM-SAPPO*/
          if (SL0KM110.SL0KWPID != "*"
           && SL0KM110.SL0KWPID > " ")
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SC1F";
            SLWREC.SLWMSGNO = 0108; /* <--- po must be space*/
            set SL0KM110.SL0KWPID cursor, bold;
          end
          if (SL0KM110.PC4ORTYP != "*"
           && SL0KM110.PC4ORTYP > " ")
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SC1G";
            SLWREC.SLWMSGNO = 0108; /* <--- po must be space*/
            set SL0KM110.PC4ORTYP cursor, bold;
          end
        else
           /* ** next sentence ***/
        end
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1H";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM110.XARCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1I";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM110.XWHCD cursor, bold;
    set SL0KM110.XARCD bold;
  end

  set PC3REC empty; /* clear row in storage*/

   /* DLVRUSA STARTS - SAIRAM-SAPPO*/

  if (SL0KM110.XWHCD == "02")
    /* DLVRUSA ENDS   - SAIRAM-SAPPO*/
    if (SL0KM110.PC3PONBR == -1
     || SL0KM110.PC3PONBR == 0)
      if (SL0KM110.SL0KWPID == "*")
        SL0KW01.SL0KWSPN = SL0KM110.PC3PONBR;
      else
        if (SL0KM110.SL0KWPID > " "
         && SL0KM110.SL0KWPID != "*")
          SL0KW01.SL0KWPID = SL0KM110.SL0KWPID;
                                   /* these fields are for*/
          if (SL0KW01.SL0KWPDT >= "000000"
           && SL0KW01.SL0KWPDT <= "999999")
            SL0KW01.SL0KWFPI = SL0KW01.SL0KWPDT; /* convert po id*/
            /* ------ y2k out begin -------*/
            /* IF SL0KW01.SL0KWFYR > '00'*/
            /* AND SL0KW01.SL0KWFYR < '60';*/
            /* MOVE '20' TO SL0KW01.SL0KWCCN;*/
            /* ELSE;*/
            /* MOVE '19' TO SL0KW01.SL0KWCCN;*/
            /* END;*/
            /* ------ y2k out end ---------*/
            /* ------ y2k in  begin -------*/
            if (SL0KW01.SL0KWFYR > "60"
             && SL0KW01.SL0KWFYR <= "99")
              SL0KW01.SL0KWCCN = "19";
            else
              SL0KW01.SL0KWCCN = "20";
            end
            /* ------ y2k in end ----------*/
            SL0KW01.SL0KWCYR = SL0KW01.SL0KWFYR;
            SL0KW01.SL0KWCMD = SL0KW01.SL0KWFMD;
            PC3REC.XGPCD = SL0KM110.XGPCD;
            PC3REC.PCFSECD = " ";
            SL0KW01.SL0KWNMR = SL0KW01.SL0KWCMR;
            PC3REC.PC3POIDT = SL0KW01.SL0KWNMR;
            PC3REC.FY1FCTYC = SL0KW01.SL0KWFAC; /* fac = factory code*/
            PC3REC.PC4ORTYP = SL0KM110.PC4ORTYP; /* order type*/
            SL0KS7I(); /* calls po header by po id*/
            SL0KW01.SL0KWSPN = PC3REC.PC3PONBR;
          else
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SC1J";
            SLWREC.SLWMSGNO = 0011;
            set SL0KM110.SL0KWPID cursor, bold;
            set SL0KM110.PC4ORTYP bold;
            set SL0KM110.PC3PONBR bold;
          end
        end
      end
    else
      PC3REC.XGPCD = SL0KM110.XGPCD;
      PC3REC.PC3PONBR = SL0KM110.PC3PONBR;
      SL0KS7H(); /* calls po header by gpc and po number*/
      SL0KW01.SL0KWSPN = PC3REC.PC3PONBR;
    end
    /* DLVRUSA STARTS - SAIRAM-SAPPO*/
  else

    set VPOITM05 empty; /* clear row in vpoitm05*/

    SL0KS-CHK-VSYLOC02();

    if (SL0KW-PO-IN-SYLOC == "N")
      SL0KS-CHK-VPOITM05();
    end

  end
   /* DLVRUSA ENDS   - SAIRAM-SAPPO*/

  if (SL0KM110.SY1UNPCS < -1) /* Units/case LT -1*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1K";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM110.SY1UNPCS cursor, bold;
  end

  if (SL0KM110.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] == "Y")
        XOWREC.XOWCD = SL0KM110.XOWCD; /* <--- owner group*/
        XOWREC.XWHCD = SL0KM110.XWHCD;
        if (XOWREC.XOWKEY in XOWTBL.XOWKEY)
          if (XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A")
            /* next sentence;*/
          else
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SC1L";
            SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
            set SL0KM110.XOWCD cursor, bold;
          end
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SC1M";
          SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
          set SL0KM110.XOWCD cursor, bold;
        end
      else
        if (SL0KM110.XOWCD != "00")
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SC1N";
          SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
          set SL0KM110.XOWCD cursor, bold;
        end
      end
    end
  end

  if (SL0KM110.XUMCD > " ")
    if (SL0KM110.XUMCD in XUMTBL.XUMCD) /* <--- unit of measure*/
      if (XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC1O";
        SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
        set SL0KM110.XUMCD cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1P";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0KM110.XUMCD cursor, bold;
    end
  end

  if (SL0KM110.XPGCD in XPGTBL.XPGCD) /* <--- package type*/
    if (XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1Q";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM110.XPGCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1R";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM110.XPGCD cursor, bold;
  end

  if (SL0KM110.XSLCD in XSLTBL.XSLCD) /* <--- slc*/
    if (XSLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1S";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM110.XSLCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1T";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM110.XSLCD cursor, bold;
  end

  if (SL0KM110.XEGCD in XEGTBL.XEGCD) /* <--- xegcd engr diff.*/
    if (XEGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1U";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM110.XEGCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1V";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM110.XEGCD cursor, bold;
  end

  set PC2REC empty; /* clear row storage area*/

  PC2REC.XGPCD = SL0KM110.XGPCD;
  PC2REC.PC2INSEG = SL0KM110.PC2INSEG;
  call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes};
  if (SQLCA.VAGen_SQLCODE == +0)
     /* next sentence*/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1W";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM110.PC2INSEG cursor, bold;
  end

  if (SL0KM110.XQACD in XQATBL.XQACD) /* <--- quality*/
    if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1X";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM110.XQACD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1Y";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM110.XQACD cursor, bold;
  end

  if (SL0KM110.XDMCD in XDMTBL.XDMCD) /* <--- dimension*/
    if (XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      /* next sentence;*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1Z";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM110.XDMCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC10";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM110.XDMCD cursor, bold;
  end

  if (SL0KM110.XGPCD in XGPTBL.XGPCD) /* <--- gpc*/
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0KS1A(); /* <--- style, color, dimension*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC11";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM110.XGPCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC12";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM110.XGPCD cursor, bold;
  end

  if (SL0KM110.XIFCD in XIFTBL.XIFCD) /* <--- field*/
    if (XIFTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (SL0KM110.XIFCD == "01"
       || SL0KM110.XIFCD == "02"
       || SL0KM110.XIFCD == "04")
        SL0KM110.XIFABRV = XIFTBL.XIFABRV[sysVar.arrayIndex];
        SL0KM110.SL0KMFL1 = XIFTBL.XIFABRV[sysVar.arrayIndex];
        SL0KM110.SL0KMFL2 = XIFTBL.XIFABRV[sysVar.arrayIndex];
        SL0KM110.SL0KMFL3 = XIFTBL.XIFABRV[sysVar.arrayIndex];
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC13";
        SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
        set SL0KM110.XIFCD cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC14";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM110.XIFCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC15";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM110.XIFCD cursor, bold;
  end

   /************************************************************/
   /****** XIT/XIR Combination restriction                  ******/
   /************************************************************/
  if (SL0KM110.XITCD == "31")
    if (SL0KM110.XIRCD == "085"
     || SL0KM110.XIRCD == "089")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC22";
      SLWREC.SLWMSGNO = 0455; /* <--- XIT-XIR Combination not valid msg*/
      set SL0KM110.XIRCD cursor, bold;
    else
         /* next sentence*/
    end
  end
   /****  END of XIT/XIR Restriction ***********************/

  if (SL0KM110.XIRCD in XIRTBL.XIRCD) /* <--- adj reason*/
    if (XIRTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC16";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM110.XIRCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC17";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM110.XIRCD cursor, bold;
  end

  if (SL0KM110.XITCD in XITTBL.XITCD) /* <--- transaction type*/
    if (XITTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (SL0KM110.XIFCD == "01"
       || SL0KM110.XIFCD == "02"
       || SL0KM110.XIFCD == "04")
        SL0KS1V(); /* edit field/transaction type*/
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC18";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM110.XITCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC19";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM110.XITCD cursor, bold;
  end

  if (SL0KM110.IN5TRDCD == "S") /* <--- set aside*/
    set INAREC empty;
    INAREC.INASAID = SL0KM110.IN5TRDOC;
    SL0KS1S(); /* <=== validate setaside id*/
  end

                           /* <-------- document ------->*/
  if (SL0KM110.IN5TRDCD == "A" /* <--- adjustment*/
   || SL0KM110.IN5TRDCD == "B" /* <--- batch*/
   || SL0KM110.IN5TRDCD == "O" /* <--- order*/
   || SL0KM110.IN5TRDCD == "P" /* <--- physical inventory*/
   || SL0KM110.IN5TRDCD == "R" /* <--- receiving*/
   || SL0KM110.IN5TRDCD == "S" /* <--- set aside*/
   || SL0KM110.IN5TRDCD == "T" /* <--- stock transfer*/
   || SL0KM110.IN5TRDCD == "C") /* <--- cycle count*/
     /* next sentence*/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1!";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM110.IN5TRDCD cursor, bold;
  end

  if (SL0KM110.XWHCD in XWHTBL.XWHCD) /* <--- warehouse*/
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0KM110.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      SLWREC.XCTCD = XWHTBL.XCTCD[sysVar.arrayIndex];
    else
      SL0KM110.XWHABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1@";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM110.XWHCD cursor, bold;
    end
  else
    SL0KM110.XWHABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1#";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM110.XWHCD cursor, bold;
  end

  if (SLWREC.SLWERRSW == "N") /* if edits all okay*/
    SL0KW04.IN5TRDCD = SL0KM110.IN5TRDCD; /* hold doc part I*/
    SL0KW04.IN5TRDOC = SL0KM110.IN5TRDOC; /* hold doc part II*/
    SL0KW04.IN5TRSUB = SL0KM110.IN5TRSUB; /* hold doc part III*/
    SL0KW04.XITCD = SL0KM110.XITCD; /* hold tran type*/
    SL0KW04.IN5TRREF = SL0KM110.IN5TRREF; /* hold xref nbr*/
    SL0KW04.XIRCD = SL0KM110.XIRCD; /* hold reason code*/
    SL0KW04.XGPCD = SL0KM110.XGPCD; /* hold gpc*/
    SL0KW04.SY1STNBR = SL0KM110.SY1STNBR; /* hold style*/
    SL0KW04.SY2CLRID = SL0KM110.SY2CLRID; /* hold color*/
    SL0KW04.XDMCD = SL0KM110.XDMCD; /* hold dim*/
    SL0KW04.XQACD = SL0KM110.XQACD; /* hold quality*/
    SL0KW04.PC2INSEG = SL0KM110.PC2INSEG; /* hold iseg*/
    SL0KW04.XEGCD = SL0KM110.XEGCD; /* hold edif*/
    SL0KW04.XSLCD = SL0KM110.XSLCD; /* hold slc*/
    SL0KW04.XPGCD = SL0KM110.XPGCD; /* hold pg*/
    SL0KW04.XUMCD = SL0KM110.XUMCD; /* hold uom*/
    SL0KW04.XOWCD = SL0KM110.XOWCD; /* hold own group*/
    SL0KW04.XARCD = SL0KM110.XARCD; /* hold area*/
    SL0KW04.SL4ZONE = SL0KM110.SL4ZONE; /* hold zone*/
    SL0KW04.SL5LOCTN = SL0KM110.SL5LOCTN; /* hold location*/
  end

  /* DLVRUSA STARTS - SAIRAM-UOM*/

   /* *********************************************************/
   /* Verify UOM for given GPC/STYLE/CLR/DIM in DPROD.VCOLOR02*/
   /* Except for UOM L and R*/
   /* *********************************************************/

  if (SL0KM110.XWHCD != "02") /* except for Cole-Haan.*/

    set SYCREC empty;

    SYCREC.XGPCD = SL0KM110.XGPCD; /* GPC*/
    SYCREC.SY1STNBR = SL0KM110.SY1STNBR; /* Style*/
    SYCREC.SY2CLRID = SL0KM110.SY2CLRID; /* Color*/
    SYCREC.XDMCD = SL0KM110.XDMCD; /* Dim*/

    call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes}; /* Select unique row*/

    if (SQLCA.VAGen_SQLCODE == 0 || 
    SQLCA.VAGen_SQLCODE == -811)
      if (SYCREC.XUMCD == SL0KM110.XUMCD)
        SL0KW01.SL0KW-VALID-UOM-FL = "Y";
      else
        SL0KW01.SL0KW-VALID-UOM-FL = "N";
      end
    else
      SL0KW01.SL0KW-VALID-UOM-FL = "N";
    end
    if (SL0KM110.XUMCD == "L" ||  /* For UOM L*/
    SL0KM110.XUMCD == "R")        /* For UOM R*/
      SL0KW01.SL0KW-VALID-UOM-FL = "Y";
    end
  end
   /* DLVRUSA ENDS   - SAIRAM-UOM*/

end // end SL0KSC1

// key field edits
Function SL0KSC2()

   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

  SL0KW21.XWHCD = SL0KM210.XWHCD;
  SL0KW21.XARCD = SL0KM210.XARCD;
  if (SL0KW21.SL0KWWAR in XARTBL.XARKEY) /* <--- area type*/
    if (XARTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XARTBL.XARRCVFL[sysVar.arrayIndex] == "Y") /* <=== if receiving area*/
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC2A";
        SLWREC.SLWMSGNO = 0093; /* <--- cannot adj receiving*/
        set SL0KM210.XARCD cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2C";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM210.XARCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2D";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM210.XWHCD cursor, bold;
    set SL0KM210.XARCD cursor, bold;
  end

   /* ************************************************************/
   /* ***  new product                                        ****/
   /* ************************************************************/

  if (SL0KM210.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] == "Y")
        XOWREC.XOWCD = SL0KM210.SL0KWOWN; /* <--- owner group*/
        XOWREC.XWHCD = SL0KM210.XWHCD;
        if (XOWREC.XOWKEY in XOWTBL.XOWKEY)
          if (XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A")
            /* next sentence;*/
          else
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SC2E";
            SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
            set SL0KM210.SL0KWOWN cursor, bold;
          end
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SC2F";
          SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
          set SL0KM210.SL0KWOWN cursor, bold;
        end
      else
        if (SL0KM210.SL0KWOWN != "00")
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SC2G";
          SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
          set SL0KM210.SL0KWOWN cursor, bold;
        end
      end
    end
  end

  if (SL0KM210.SL0KWUOM > " ")
    if (SL0KM210.SL0KWUOM in XUMTBL.XUMCD) /* <--- unit of measure*/
      if (XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC2H";
        SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
        set SL0KM210.SL0KWUOM cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2I";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0KM210.SL0KWUOM cursor, bold;
    end
  end

  if (SL0KM210.SL0KWPKG in XPGTBL.XPGCD) /* <--- package type*/
    if (XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2J";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM210.SL0KWPKG cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2K";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM210.SL0KWPKG cursor, bold;
  end

  if (SL0KM210.SL0KWSLC in XSLTBL.XSLCD) /* <--- slc*/
    if (XSLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2L";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM210.SL0KWSLC cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2M";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM210.SL0KWSLC cursor, bold;
  end

  if (SL0KM210.SL0KWXEG in XEGTBL.XEGCD) /* <--- engr. diff.*/
    if (XEGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2L";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM210.SL0KWXEG cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2M";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM210.SL0KWXEG cursor, bold;
  end

  set PC2REC empty; /* clear row storage area*/

  PC2REC.XGPCD = SL0KM210.XGPCD;
  PC2REC.PC2INSEG = SL0KM210.SL0KWISG;
  call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes};
  if (SQLCA.VAGen_SQLCODE == +0)
    if (PC2REC.XXXSTAT == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2N";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM210.SL0KWISG cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2O";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM210.SL0KWISG cursor, bold;
  end

  if (SL0KM210.SL0KWQLT in XQATBL.XQACD) /* <--- quality*/
    if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2P";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM210.SL0KWQLT cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2Q";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM210.SL0KWQLT cursor, bold;
  end

  if (SL0KM210.SL0KWDIM in XDMTBL.XDMCD) /* <--- dimension*/
    if (XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      /* next sentence;*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2R";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM210.SL0KWDIM cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2S";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM210.SL0KWDIM cursor, bold;
  end

  if (SL0KM210.SL0KWGPC in XGPTBL.XGPCD) /* <--- gpc*/
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0KS2B(); /* <--- style, color, dimension*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2T";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM210.SL0KWGPC cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2U";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM210.SL0KWGPC cursor, bold;
  end

   /* ************************************************************/
   /* ***   current product                                   ****/
   /* ************************************************************/

  if (SL0KM210.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] == "Y")
        XOWREC.XOWCD = SL0KM210.XOWCD; /* <--- owner group*/
        XOWREC.XWHCD = SL0KM210.XWHCD;
        if (XOWREC.XOWKEY in XOWTBL.XOWKEY)
          if (XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A")
            /* next sentence;*/
          else
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SC2V";
            SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
            set SL0KM210.XOWCD cursor, bold;
          end
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SC2W";
          SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
          set SL0KM210.XOWCD cursor, bold;
        end
      else
        if (SL0KM210.XOWCD != "00")
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SC2X";
          SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
          set SL0KM210.XOWCD cursor, bold;
        end
      end
    end
  end

  if (SL0KM210.XUMCD > " ")
    if (SL0KM210.XUMCD in XUMTBL.XUMCD) /* <--- unit of measure*/
      if (XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC2Y";
        SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
        set SL0KM210.XUMCD cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2Z";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0KM210.XUMCD cursor, bold;
    end
  end

  if (SL0KM210.XPGCD in XPGTBL.XPGCD) /* <--- package type*/
    if (XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC21";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM210.XPGCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC22";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM210.XPGCD cursor, bold;
  end

  if (SL0KM210.XSLCD in XSLTBL.XSLCD) /* <--- slc*/
    if (XSLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC23";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM210.XSLCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC24";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM210.XSLCD cursor, bold;
  end

  if (SL0KM210.XEGCD in XEGTBL.XEGCD) /* <--- engr. diff.*/
    if (XSLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC23";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM210.XEGCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC24";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM210.XEGCD cursor, bold;
  end

  set PC2REC empty; /* clear row storage area*/

  PC2REC.XGPCD = SL0KM210.XGPCD;
  PC2REC.PC2INSEG = SL0KM210.PC2INSEG;
  call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes};
  if (SQLCA.VAGen_SQLCODE == +0)
     /* next sentence*/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC26";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM210.PC2INSEG cursor, bold;
  end

  if (SL0KM210.XQACD in XQATBL.XQACD) /* <--- quality*/
    if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC27";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM210.XQACD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC28";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM210.XQACD cursor, bold;
  end

  if (SL0KM210.XDMCD in XDMTBL.XDMCD) /* <--- dimension*/
    if (XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      /* next sentence;*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC29";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM210.XDMCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC20";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM210.XDMCD cursor, bold;
  end

  if (SL0KM210.XGPCD in XGPTBL.XGPCD) /* <--- gpc*/
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0KS2A(); /* <--- style, color, dimension*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2A";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM210.XGPCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2B";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM210.XGPCD cursor, bold;
  end
   /* ***/

  if (SL0KM210.XIRCD in XIRTBL.XIRCD) /* <--- adj reason*/
    if (XIRTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2F";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM210.XIRCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2G";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM210.XIRCD cursor, bold;
  end

  if (SL0KM210.XITCD in XITTBL.XITCD) /* <--- transaction type*/
    if (XITTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XITTBL.XITADJFL[sysVar.arrayIndex] == "Y")
         /* next sentence*/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC2H";
        SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
        set SL0KM210.XITCD cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2I";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM210.XITCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2J";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM210.XITCD cursor, bold;
  end

  if (SL0KM210.IN5TRDCD == "S") /* <--- set aside*/
    set INAREC empty;
    INAREC.INASAID = SL0KM210.IN5TRDOC;
    SL0KS1S(); /* <=== validate setaside id*/
  end

  if (SL0KM210.IN5TRDCD == "A" /* <--- adjustment*/
   || SL0KM210.IN5TRDCD == "O" /* <--- order*/
   || SL0KM210.IN5TRDCD == "P" /* <--- physical inventory*/
   || SL0KM210.IN5TRDCD == "R" /* <--- receiving*/
   || SL0KM210.IN5TRDCD == "S" /* <--- set aside*/
   || SL0KM210.IN5TRDCD == "T" /* <--- stock transfer*/
   || SL0KM210.IN5TRDCD == "C") /* <--- cycle count*/
     /* next sentence*/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2K";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM210.IN5TRDCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (SL0KM210.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* MOVE XWHTBL.XWHABRV(EZETST) TO SL0KM210.XWHABRV;*/
    else
         /* MOVE ' ' TO SL0KM210.XWHABRV;*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2L";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM210.XWHCD cursor, bold;
    end
  else
     /* MOVE ' ' TO SL0KM210.XWHABRV;*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2M";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM210.XWHCD cursor, bold;
  end

  if (SLWREC.SLWERRSW == "N") /* if edits all okay*/
    SL0KW04.IN5TRDCD = SL0KM210.IN5TRDCD; /* hold doc part I*/
    SL0KW04.IN5TRDOC = SL0KM210.IN5TRDOC; /* hold doc part II*/
    SL0KW04.IN5TRSUB = SL0KM210.IN5TRSUB; /* hold doc part III*/
    SL0KW04.XITCD = SL0KM210.XITCD; /* hold tran type*/
    SL0KW04.IN5TRREF = SL0KM210.IN5TRREF; /* hold xref nbr*/
    SL0KW04.XIRCD = SL0KM210.XIRCD; /* hold reason code*/
    SL0KW04.XGPCD = SL0KM210.XGPCD; /* hold gpc*/
    SL0KW04.SY1STNBR = SL0KM210.SY1STNBR; /* hold style*/
    SL0KW04.SY2CLRID = SL0KM210.SY2CLRID; /* hold color*/
    SL0KW04.XDMCD = SL0KM210.XDMCD; /* hold dim*/
    SL0KW04.XQACD = SL0KM210.XQACD; /* hold quality*/
    SL0KW04.PC2INSEG = SL0KM210.PC2INSEG; /* hold iseg*/
    SL0KW04.XEGCD = SL0KM210.XEGCD; /* hold edif*/
    SL0KW04.XSLCD = SL0KM210.XSLCD; /* hold slc*/
    SL0KW04.XPGCD = SL0KM210.XPGCD; /* hold pg*/
    SL0KW04.XUMCD = SL0KM210.XUMCD; /* hold uom*/
    SL0KW04.XOWCD = SL0KM210.XOWCD; /* hold own group*/
    SL0KW04.XARCD = SL0KM210.XARCD; /* hold area*/
    SL0KW04.SL4ZONE = SL0KM210.SL4ZONE; /* hold zone*/
    SL0KW04.SL5LOCTN = SL0KM210.SL5LOCTN; /* hold location*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KSC2

// key field edits
Function SL0KSC3()

   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* ***  new product                                        ****/
   /* ************************************************************/

  if (SL0KM310.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] == "Y")
        XOWREC.XOWCD = SL0KM310.SL0KWOWN; /* <--- owner group*/
        XOWREC.XWHCD = SL0KM310.XWHCD;
        if (XOWREC.XOWKEY in XOWTBL.XOWKEY)
          if (XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A")
            /* next sentence;*/
          else
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SC3E";
            SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
            set SL0KM310.SL0KWOWN cursor, bold;
          end
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SC3F";
          SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
          set SL0KM310.SL0KWOWN cursor, bold;
        end
      else
        if (SL0KM310.SL0KWOWN != "00")
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SC3G";
          SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
          set SL0KM310.SL0KWOWN cursor, bold;
        end
      end
    end
  end

  if (SL0KM310.SL0KWUOM > " ")
    if (SL0KM310.SL0KWUOM in XUMTBL.XUMCD) /* <--- unit of measure*/
      if (XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC3H";
        SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
        set SL0KM310.SL0KWUOM cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC3I";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0KM310.SL0KWUOM cursor, bold;
    end
  end

  if (SL0KM310.SL0KWPKG in XPGTBL.XPGCD) /* <--- package type*/
    if (XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC3J";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM310.SL0KWPKG cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC3K";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM310.SL0KWPKG cursor, bold;
  end

  if (SL0KM310.SL0KWSLC in XSLTBL.XSLCD) /* <--- slc*/
    if (XSLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC3L";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM310.SL0KWSLC cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC3M";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM310.SL0KWSLC cursor, bold;
  end

  if (SL0KM310.SL0KWXEG in XEGTBL.XEGCD) /* <--- engr. diff.*/
    if (XEGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC3L";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM310.SL0KWXEG cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC3M";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM310.SL0KWXEG cursor, bold;
  end

  set PC2REC empty; /* clear row storage area*/

  PC2REC.XGPCD = SL0KM310.SL0KWGPC;
  PC2REC.PC2INSEG = SL0KM310.SL0KWISG;
  call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes};
  if (SQLCA.VAGen_SQLCODE == +0)
    if (PC2REC.XXXSTAT == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC3N";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM310.SL0KWISG cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC3O";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM310.SL0KWISG cursor, bold;
  end

  if (SL0KM310.SL0KWQLT in XQATBL.XQACD) /* <--- quality*/
    if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC3P";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM310.SL0KWQLT cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC3Q";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM310.SL0KWQLT cursor, bold;
  end

  if (SL0KM310.SL0KWDIM in XDMTBL.XDMCD) /* <--- dimension*/
    if (XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      /* next sentence;*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC3R";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM310.SL0KWDIM cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC3S";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM310.SL0KWDIM cursor, bold;
  end

  if (SL0KM310.SL0KWGPC in XGPTBL.XGPCD) /* <--- gpc*/
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0KS3B(); /* <--- style, color, dimension*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC3T";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM310.SL0KWGPC cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC3U";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM310.SL0KWGPC cursor, bold;
  end

   /* ************************************************************/
   /* ***   current product                                   ****/
   /* ************************************************************/

  if (SL0KM310.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] == "Y")
        XOWREC.XOWCD = SL0KM310.XOWCD; /* <--- owner group*/
        XOWREC.XWHCD = SL0KM310.XWHCD;
        if (XOWREC.XOWKEY in XOWTBL.XOWKEY)
          if (XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A")
            /* next sentence;*/
          else
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SC3V";
            SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
            set SL0KM310.XOWCD cursor, bold;
          end
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SC3W";
          SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
          set SL0KM310.XOWCD cursor, bold;
        end
      else
        if (SL0KM310.XOWCD != "00")
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SC3X";
          SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
          set SL0KM310.XOWCD cursor, bold;
        end
      end
    end
  end

  if (SL0KM310.XUMCD > " ")
    if (SL0KM310.XUMCD in XUMTBL.XUMCD) /* <--- unit of measure*/
      if (XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC3Y";
        SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
        set SL0KM310.XUMCD cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC3Z";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0KM310.XUMCD cursor, bold;
    end
  end

  if (SL0KM310.XPGCD in XPGTBL.XPGCD) /* <--- package type*/
    if (XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC31";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM310.XPGCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC32";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM310.XPGCD cursor, bold;
  end

  if (SL0KM310.XSLCD in XSLTBL.XSLCD) /* <--- slc*/
    if (XSLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC33";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM310.XSLCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC34";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM310.XSLCD cursor, bold;
  end

  if (SL0KM310.XEGCD in XEGTBL.XEGCD) /* <--- engr. diff.*/
    if (XEGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC33";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM310.XEGCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC34";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM310.XEGCD cursor, bold;
  end
   /* ***/

  set PC2REC empty; /* clear row storage area*/

  PC2REC.XGPCD = SL0KM310.XGPCD;
  PC2REC.PC2INSEG = SL0KM310.PC2INSEG;
  call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes};
  if (SQLCA.VAGen_SQLCODE == +0)
     /* next sentence*/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC36";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM310.PC2INSEG cursor, bold;
  end

  if (SL0KM310.XQACD in XQATBL.XQACD) /* <--- quality*/
    if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC37";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM310.XQACD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC38";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM310.XQACD cursor, bold;
  end

  if (SL0KM310.XDMCD in XDMTBL.XDMCD) /* <--- dimension*/
    if (XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      /* next sentence;*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC39";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM310.XDMCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC30";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM310.XDMCD cursor, bold;
  end

  if (SL0KM310.XGPCD in XGPTBL.XGPCD) /* <--- gpc*/
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0KS3A(); /* <--- style, color, dimension*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC3A";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM310.XGPCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC3B";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM310.XGPCD cursor, bold;
  end

  if (SL0KM310.XIRCD in XIRTBL.XIRCD) /* <--- adj reason*/
    if (XIRTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC3F";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM310.XIRCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC3G";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM310.XIRCD cursor, bold;
  end

  if (SL0KM310.XITCD in XITTBL.XITCD) /* <--- transaction type*/
    if (XITTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XITTBL.XITADJFL[sysVar.arrayIndex] == "Y")
         /* next sentence*/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC3H";
        SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
        set SL0KM310.XITCD cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC3I";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM310.XITCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC3J";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM310.XITCD cursor, bold;
  end

   /* ************************************************************/
   /* *** the following are not valid in this situation:*/
   /* ***   SL0KM310.IN5TRDCD EQ 'O'   ; <--- order*/
   /* ***   SL0KM310.IN5TRDCD EQ 'P'   ; <--- physical inventory*/
   /* ***   SL0KM310.IN5TRDCD EQ 'R'   ; <--- receiving*/
   /* ***   SL0KM310.IN5TRDCD EQ 'S'   ; <--- set aside*/
   /* ***   SL0KM310.IN5TRDCD EQ 'T'   ; <--- stock transfer*/
   /* ***   SL0KM310.IN5TRDCD EQ 'c'   ; <--- cycle count*/
   /* ************************************************************/

  if (SL0KM310.IN5TRDCD == "A") /* <--- adjustment*/
     /* next sentence*/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC3K";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM310.IN5TRDCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (SL0KM310.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0KM310.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      SL0KM310.XWHABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC3L";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM310.XWHCD cursor, bold;
    end
  else
    SL0KM310.XWHABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC3M";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM310.XWHCD cursor, bold;
  end

  if (SLWREC.SLWERRSW == "N") /* if edits all okay*/
    SL0KW04.IN5TRDCD = SL0KM310.IN5TRDCD; /* hold doc part I*/
    SL0KW04.IN5TRDOC = SL0KM310.IN5TRDOC; /* hold doc part II*/
    SL0KW04.IN5TRSUB = SL0KM310.IN5TRSUB; /* hold doc part III*/
    SL0KW04.XITCD = SL0KM310.XITCD; /* hold tran type*/
    SL0KW04.IN5TRREF = SL0KM310.IN5TRREF; /* hold xref nbr*/
    SL0KW04.XIRCD = SL0KM310.XIRCD; /* hold reason code*/
    SL0KW04.XGPCD = SL0KM310.XGPCD; /* hold gpc*/
    SL0KW04.SY1STNBR = SL0KM310.SY1STNBR; /* hold style*/
    SL0KW04.SY2CLRID = SL0KM310.SY2CLRID; /* hold color*/
    SL0KW04.XDMCD = SL0KM310.XDMCD; /* hold dim*/
    SL0KW04.XQACD = SL0KM310.XQACD; /* hold quality*/
    SL0KW04.PC2INSEG = SL0KM310.PC2INSEG; /* hold iseg*/
    SL0KW04.XEGCD = SL0KM310.XEGCD; /* hold edif*/
    SL0KW04.XSLCD = SL0KM310.XSLCD; /* hold slc*/
    SL0KW04.XPGCD = SL0KM310.XPGCD; /* hold pg*/
    SL0KW04.XUMCD = SL0KM310.XUMCD; /* hold uom*/
    SL0KW04.XOWCD = SL0KM310.XOWCD; /* hold own group*/
    SL0KW04.XARCD = "  "; /* hold area*/
    SL0KW04.SL4ZONE = "  "; /* hold zone*/
    SL0KW04.SL5LOCTN = "      "; /* hold location*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KSC3

// inquiry:(style)color view 2:0
Function SL0KSCI()

   /* ************************************************************/
   /* *** select unique row/view: Dpick.vpksty01              ****/
   /* *** using the std module:  IO1810                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -811 = duplicates found                           ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***     <0 = db/severe error (&-911)                    ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* ************************************************************/

  call "IO1810" ("S ", SQLCA, PKNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* CANADA 03/27/96*/

    if (SLWREC.XCTCD == "CANA")

      /* format ta1rec in case of bad return code from call to SY2000*/

      TA1REC.TA1PGMNM = "SL0K"; /* CANA program name*/
      TA1REC.TA1LOC = "SL0KSCI"; /* CANA sgrp name*/

      XSSL-CALL-SY2000(); /* CANA call SY2000 to get*/
                              /* product region record*/
      if (WSY2000.WSY2000-RETURN-CODE == 0  /* CANA row found*/
       || WSY2000.WSY2000-RETURN-CODE == 02 /* CANA row not found*/
       || WSY2000.WSY2000-RETURN-CODE == 98) /* CANA database busy*/
        /* these errors are handled differently per map so return to*/
        /* calling sgrp and handle errors*/
        return;
      else
        SLWREC.SLWVERSW = "Y";
        converseLib.validationFailed(0001); /* Indicate system error*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1LOC = "CALL SY2000";
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program appl*/
        TA1REC.TA1PGMNM = "SL0KSCI"; /* Program number*/
        TA1REC.TA1MAP = SLWREC.XXXMAPNM; /* Map name*/
        TA1REC.TA1DBASE = "DPROD  "; /* Data base name*/
        TA1REC.TA1TBLVU = "VSYREG02"; /* Table view name*/
        TA1REC.TA1TBLKE = PKNREC.PKNKEY; /* Table key*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback();

                              /* Error diagnosis routine*/
        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

      end
    end
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -811)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "SL0KSCI ";
  TA1REC.TA1LOCAT[1] = "IO1810  ";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DPICK   ";
  TA1REC.TA1TBLVU = "VPKSTY01";
  TA1REC.TA1TBLKE = PKNREC.PKNKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KSCI

// key relational edits
Function SL0KSD1()

   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

  if (SL0KM110.IN5TRDCD == "S" /* <=== setaside*/
   && SL0KM110.XIFCD != "04")  /* <=== field not = setaside*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD1A";
    SLWREC.SLWMSGNO = 0100; /* <=== doc and field should = setaside*/
    set SL0KM110.IN5TRDCD cursor, bold;
    set SL0KM110.XIFCD cursor, bold;
    return;
  end

  if (SL0KM110.XIFCD == "04" /* <=== field = setaside*/
   && SL0KM110.IN5TRDCD != "S") /* <=== not setaside*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD1B";
    SLWREC.SLWMSGNO = 0144; /* <=== field setaside & doc not*/
    set SL0KM110.IN5TRDCD cursor, bold;
    set SL0KM110.XIFCD cursor, bold;
    return;
  end

  if (SL0KM110.XIFCD == "02") /* <=== reserve adjustment*/
    SL0KW11.XWHCD = SL0KM110.XWHCD;
    SL0KW11.XARCD = SL0KM110.XARCD;
    if (SL0KW11.SL0KWWAR in XARTBL.XARKEY)
      if (XARTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        if (XARTBL.XARBLKFL[sysVar.arrayIndex] == "Y") /* <=== bulk area*/
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SD1C";
          SLWREC.SLWMSGNO = 0094; /* <=== cannot adj resv in bulk*/
          set SL0KM110.XARCD cursor, bold;
          return;
        end
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SD1D";
        SLWREC.SLWMSGNO = 0010; /* <=== inactive msg*/
        set SL0KM110.XARCD cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD1E";
      SLWREC.SLWMSGNO = 0011; /* <=== invalid value msg*/
      set SL0KM110.XARCD cursor, bold;
    end
  end

  set SL4REC empty;
  SL4REC.XWHCD = SL0KM110.XWHCD;
  SL4REC.XARCD = SL0KM110.XARCD;
  SL4REC.SL4ZONE = SL0KM110.SL4ZONE;

  SL0KSXA(); /* <--- validate area/zone*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ***/
  if (SL4REC.YZTCD in YZTTBL.YZTCD) /* <--- zone type*/
    if (YZTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD1F";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM110.SL4ZONE cursor, bold;
      return;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD1G";
    SLWREC.SLWMSGNO = 0113; /* <--- invalid zone type msg*/
    set SL0KM110.SL4ZONE cursor, bold;
    return;
  end

  set SL5REC empty;
  SL5REC.XWHCD = SL0KM110.XWHCD;
  SL5REC.XARCD = SL0KM110.XARCD;
  SL5REC.SL4ZONE = SL0KM110.SL4ZONE;
  SL5REC.SL5LOCTN = SL0KM110.SL5LOCTN;

  SL0KSXB(); /* <--- find location*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  if (SL5REC.YLSCD == "05") /* <=== frozen location*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD1H";
    SLWREC.SLWMSGNO = 0040; /* <=== location frozen msg*/
    set SL0KM110.SL5LOCTN cursor, bold;
    return;
  end

  if (SL5REC.YLSCD == "06") /* Replenishment-reserved status*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD1I";
    SLWREC.SLWMSGNO = 0039; /* Location status is reserved*/
    set SL0KM110.SL5LOCTN cursor, bold;
    return;
  end

  if (SL5REC.YLSCD == "08") /* Planned status*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD1J";
    SLWREC.SLWMSGNO = 0345; /* Location status is planned*/
    set SL0KM110.SL5LOCTN cursor, bold;
    return;
  end

  if (SL0KM110.SL2CASE != " ")
    SL0KS9I(); /* <=== make sure prod is same as in*/
                                   /* case*/
    SL0KS9J(); /* <=== close scan 4*/
  end

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0KS1O(); /* <=== check if active w/o exists*/

  if (SL0KM110.XWHCD == "02" /* check if Greenland*/
   || SL0KM110.XWHCD == "04" /* check if Memphis Footwear*/
   || SL0KM110.XWHCD == "07" /* check if Wilsonville*/
   || SL0KM110.XWHCD == "51" /* check if Memphis Apparel*/
   || SL0KM110.XWHCD == "25" /* check if NSG*/
   || SL0KM110.XWHCD == "42") /* check if Canada*/
    SL0KS1W(); /* <=== check for multiple u/c*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KSD1

// key relational edits
Function SL0KSD2()
   /* ************************************************************/
   /* *** make sure the size scale of the new product match   ****/
   /* *** the the size scale of the current product           ****/
   /* ************************************************************/

  set PKNREC empty;
  PKNREC.XGPCD = SL0KM210.XGPCD;
  PKNREC.SY1STNBR = SL0KM210.SY1STNBR;
  PKNREC.SY2CLRID = SL0KM210.SY2CLRID;
  PKNREC.XDMCD = SL0KM210.XDMCD;

  SL0KS2J(); /* <=== style inquity*/

  if (SLWREC.SLWERRSW == "Y")
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.XXXLOCID = "SD2A";
      SLWREC.SLWMSGNO = 0124; /* <=== style not on style db*/
      set SL0KM210.SY1STNBR cursor, bold;
      set SL0KM210.XGPCD cursor, bold;
    end
    return;
  end

  SL0KW02.SY4SZSCL = PKNREC.SY4SZSCL;

  set PKNREC empty;
  PKNREC.XGPCD = SL0KM210.SL0KWGPC;
  PKNREC.SY1STNBR = SL0KM210.SL0KWSTY;
  PKNREC.SY2CLRID = SL0KM210.SL0KWCLR;
  PKNREC.XDMCD = SL0KM210.SL0KWDIM;

  SL0KS2J(); /* <=== style inquity*/

  if (SLWREC.SLWERRSW == "Y")
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.XXXLOCID = "SD2B";
      SLWREC.SLWMSGNO = 0124; /* <=== style not on style db*/
      set SL0KM210.SL0KWSTY cursor, bold;
      set SL0KM210.SL0KWGPC cursor, bold;
    end
    return;
  end

  if (PKNREC.SY4SZSCL != SL0KW02.SY4SZSCL) /* <=== size scales don't match*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD2C";
    SLWREC.SLWMSGNO = 0125; /* <=== size scales don't match*/
    set SL0KM210.SL0KWSTY cursor, bold;
    set SL0KM210.SL0KWGPC cursor, bold;
    return;
  end

  /* DLVRUSA CHANGE STARTS - SAIRAM-UOM*/

   /* ************************************************************/
   /* *** Make sure the UOM of new product is valid for that  ****/
   /* *** product (GPC/Style/Color/Dim) except for cole-haan  ****/
   /* ************************************************************/

  if (SL0KM210.XWHCD != "02") /* except for Cole-Haan.*/

    set SYCREC empty;

    SYCREC.XGPCD = SL0KM210.SL0KWGPC; /* GPC*/
    SYCREC.SY1STNBR = SL0KM210.SL0KWSTY; /* Style*/
    SYCREC.SY2CLRID = SL0KM210.SL0KWCLR; /* Color*/
    SYCREC.XDMCD = SL0KM210.SL0KWDIM; /* Dim*/

    call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes}; /* Select unique row*/

    if (SQLCA.VAGen_SQLCODE == 0)
      if (SYCREC.XUMCD == SL0KM210.SL0KWUOM || 
      SL0KM210.SL0KWUOM == "L" ||  /* If UOM = 'L'*/
      SL0KM210.SL0KWUOM == "R")    /* If UOM = 'R'*/
         /* NEXT SENTENCE*/
      else
        SLWREC.SLWERRSW = "Y"; /* Indicate error*/
        SLWREC.XXXLOCID = "SD2M"; /* Error location*/
        SLWREC.SLWMSGNO = 0478; /* Invalid UOM for new product*/
        set SL0KM210.SL0KWUOM cursor, bold; /* Highlight*/
        return;
      end
    else
      if (SQLCA.VAGen_SQLCODE == +100)
        SLWREC.SLWERRSW = "Y"; /* Indicate error*/
        SLWREC.XXXLOCID = "SD2N"; /* Error location*/
        SLWREC.SLWMSGNO = 0479; /* Can't find Product in vcolor02 db*/
        set SL0KM210.SL0KWGPC cursor, bold; /* Highlight*/
        set SL0KM210.SL0KWSTY cursor, bold; /* Highlight*/
        set SL0KM210.SL0KWCLR cursor, bold; /* Highlight*/
        set SL0KM210.SL0KWDIM cursor, bold; /* Highlight*/
        set SL0KM210.SL0KWUOM cursor, bold; /* Highlight*/
        return;
      else
        if (SQLCA.VAGen_SQLCODE == -811)
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SD2O";
          SLWREC.SLWMSGNO = 0480; /* Duplicate rows in vcolor02 db*/
          set SL0KM210.SL0KWGPC cursor, bold; /* Highlight*/
          set SL0KM210.SL0KWSTY cursor, bold; /* Highlight*/
          set SL0KM210.SL0KWCLR cursor, bold; /* Highlight*/
          set SL0KM210.SL0KWDIM cursor, bold; /* Highlight*/
          set SL0KM210.SL0KWUOM cursor, bold; /* Highlight*/
          return;
        else
          if (SQLCA.VAGen_SQLCODE == -911)
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SD2P";
            SLWREC.SLWMSGNO = 0031; /* < Try again*/
            set SL0KM210.SL0KWGPC cursor, bold; /* Highlight*/
            set SL0KM210.SL0KWSTY cursor, bold; /* Highlight*/
            set SL0KM210.SL0KWCLR cursor, bold; /* Highlight*/
            set SL0KM210.SL0KWDIM cursor, bold; /* Highlight*/
            set SL0KM210.SL0KWUOM cursor, bold; /* Highlight*/
            return;
          else
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SD2Q";
            SLWREC.SLWMSGNO = 0001; /* < Severe Error message*/
            set SL0KM210.SL0KWGPC cursor, bold; /* Highlight*/
            set SL0KM210.SL0KWSTY cursor, bold; /* Highlight*/
            set SL0KM210.SL0KWCLR cursor, bold; /* Highlight*/
            set SL0KM210.SL0KWDIM cursor, bold; /* Highlight*/
            set SL0KM210.SL0KWUOM cursor, bold; /* Highlight*/
            return;
          end
        end
      end
    end
  end

  /* DLVRUSA CHANGE ENDS   - SAIRAM-UOM*/

   /* ************************************************************/
   /* *** validate area/zone                                  ****/
   /* ************************************************************/

  set SL4REC empty;
  SL4REC.XWHCD = SL0KM210.XWHCD;
  SL4REC.XARCD = SL0KM210.XARCD;
  SL4REC.SL4ZONE = SL0KM210.SL4ZONE;

  SL0KS2D(); /* <--- validate area/zone*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  if (SL4REC.YZTCD in YZTTBL.YZTCD) /* <--- zone type*/
    if (YZTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD2D";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM210.SL4ZONE cursor, bold;
      return;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD2E";
    SLWREC.SLWMSGNO = 0113; /* <--- invalid zone type msg*/
    set SL0KM210.SL4ZONE cursor, bold;
    return;
  end

  set SL5REC empty;
  SL5REC.XWHCD = SL0KM210.XWHCD;
  SL5REC.XARCD = SL0KM210.XARCD;
  SL5REC.SL4ZONE = SL0KM210.SL4ZONE;
  SL5REC.SL5LOCTN = SL0KM210.SL5LOCTN;

  SL0KS2E(); /* <--- find location*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  if (SL5REC.YLSCD == "05") /* <=== frozen location*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD2F";
    SLWREC.SLWMSGNO = 0040; /* <=== location frozen msg*/
    set SL0KM210.SL5LOCTN cursor, bold;
    return;
  end

  if (SL5REC.YLSCD == "06") /* Replenishment-reserved status*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD2G";
    SLWREC.SLWMSGNO = 0039; /* Location in reserved status*/
    set SL0KM210.SL5LOCTN cursor, bold;
    return;
  end

  if (SL5REC.YLSCD == "08") /* Planned status*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD2H";
    SLWREC.SLWMSGNO = 0345; /* Location in planned status*/
    set SL0KM210.SL5LOCTN cursor, bold;
    return;
  end

  SL0KS2C(); /* <=== check if active w/o exists*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ***************************************************************/
   /* Edit both the new and current units per case fields.*/
   /* ***************************************************************/

  if (SL5REC.YLTCD == "06" /* Highrise location*/
   || SL5REC.YLTCD == "22") /* or Handstack location*/

    if (SL0KM210.SL0KMUT2 != -1) /* Units/case not wildcard*/
      SLWREC.SLWERRSW = "Y"; /* Indicate error*/
      SLWREC.XXXLOCID = "SD2I"; /* Error location*/
      SLWREC.SLWMSGNO = 418; /* Units/case must remain wildcard*/
      set SL0KM210.SL0KMUT2 cursor, bold; /* Highlight*/
    end

    if (SL0KM210.SL0KMUT1 != -1) /* Units/case not wildcard*/
      SLWREC.SLWERRSW = "Y"; /* Indicate error*/
      SLWREC.XXXLOCID = "SD2J"; /* Error location*/
      SLWREC.SLWMSGNO = 418; /* Units/case must remain wildcard*/
      set SL0KM210.SL0KMUT1 cursor, bold; /* Highlight*/
    end

  else

    if (SL0KM210.SL0KMUT2 < -1) /* Units/case less than -1*/
      SLWREC.SLWERRSW = "Y"; /* Indicate error*/
      SLWREC.XXXLOCID = "SD2K"; /* Error location*/
      SLWREC.SLWMSGNO = 11; /* Invalid value entered*/
      set SL0KM210.SL0KMUT2 cursor, bold; /* Highlight*/
    end

    if (SL0KM210.SL0KMUT1 < -1) /* Units/case less than -1*/
      SLWREC.SLWERRSW = "Y"; /* Indicate error*/
      SLWREC.XXXLOCID = "SD2L"; /* Error location*/
      SLWREC.SLWMSGNO = 11; /* Invalid value entered*/
      set SL0KM210.SL0KMUT1 cursor, bold; /* Highlight*/
    end

  end

end // end SL0KSD2

// key relational edits
Function SL0KSD3()

   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

  SL0KS3C(); /* <=== compare new prod key against*/
                                   /* current*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** make sure the size scale of the new product match   ****/
   /* *** the the size scale of the current product           ****/
   /* ************************************************************/

  set PKNREC empty;
  PKNREC.XGPCD = SL0KM310.XGPCD;
  PKNREC.SY1STNBR = SL0KM310.SY1STNBR;
  PKNREC.SY2CLRID = SL0KM310.SY2CLRID;
  PKNREC.XDMCD = SL0KM310.XDMCD;

  SL0KS2J(); /* <=== style inquiry*/

  if (SLWREC.SLWERRSW == "Y")
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.XXXLOCID = "SD3A";
      SLWREC.SLWMSGNO = 0124; /* <=== style not on style db*/
      set SL0KM310.SY1STNBR cursor, bold;
      set SL0KM310.XGPCD cursor, bold;
    end
    return;
  end

  SL0KW03.SY4SZSCL = PKNREC.SY4SZSCL;

  set PKNREC empty;
  PKNREC.XGPCD = SL0KM310.SL0KWGPC;
  PKNREC.SY1STNBR = SL0KM310.SL0KWSTY;
  PKNREC.SY2CLRID = SL0KM310.SL0KWCLR;
  PKNREC.XDMCD = SL0KM310.SL0KWDIM;

  SL0KS2J(); /* <=== style inquiry*/

  if (SLWREC.SLWERRSW == "Y")
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.XXXLOCID = "SD3B";
      SLWREC.SLWMSGNO = 0124; /* <=== style not on style db*/
      set SL0KM310.SL0KWSTY cursor, bold;
      set SL0KM310.SL0KWGPC cursor, bold;
    end
    return;
  end

  if (PKNREC.SY4SZSCL != SL0KW03.SY4SZSCL) /* <=== size scales don't match*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD3C";
    SLWREC.SLWMSGNO = 0125; /* <=== size scales don't match*/
    set SL0KM310.SL0KWSTY cursor, bold;
    set SL0KM310.SL0KWGPC cursor, bold;
    return;
  end

  /* DLVRUSA CHANGE STARTS - SAIRAM-UOM*/

   /* ************************************************************/
   /* *** Make sure the UOM of new product is valid for that  ****/
   /* *** product (GPC/Style/Color/Dim) except for cole-haan  ****/
   /* ************************************************************/

  if (SL0KM310.XWHCD != "02") /* except for Cole-Haan.*/

    set SYCREC empty;

    SYCREC.XGPCD = SL0KM310.SL0KWGPC; /* GPC*/
    SYCREC.SY1STNBR = SL0KM310.SL0KWSTY; /* Style*/
    SYCREC.SY2CLRID = SL0KM310.SL0KWCLR; /* Color*/
    SYCREC.XDMCD = SL0KM310.SL0KWDIM; /* Dim*/

    call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes}; /* Select unique row*/

    if (SQLCA.VAGen_SQLCODE == 0)
      if (SYCREC.XUMCD == SL0KM310.SL0KWUOM || 
      SL0KM310.SL0KWUOM == "L" ||  /* If UOM = 'L'*/
      SL0KM310.SL0KWUOM == "R")    /* If UOM = 'R'*/
         /* NEXT SENTENCE*/
      else
        SLWREC.SLWERRSW = "Y"; /* Indicate error*/
        SLWREC.XXXLOCID = "SD3E"; /* Error location*/
        SLWREC.SLWMSGNO = 0478; /* Invalid value entered*/
        set SL0KM310.SL0KWUOM cursor, bold; /* Highlight*/
        return;
      end
    else
      if (SQLCA.VAGen_SQLCODE == +100)
        SLWREC.SLWERRSW = "Y"; /* Indicate error*/
        SLWREC.XXXLOCID = "SD3F"; /* Error location*/
        SLWREC.SLWMSGNO = 0479; /* Product not in vcolor02 db*/
        set SL0KM310.SL0KWGPC cursor, bold; /* Highlight*/
        set SL0KM310.SL0KWSTY cursor, bold; /* Highlight*/
        set SL0KM310.SL0KWCLR cursor, bold; /* Highlight*/
        set SL0KM310.SL0KWDIM cursor, bold; /* Highlight*/
        set SL0KM310.SL0KWUOM cursor, bold; /* Highlight*/
        return;
      else
        if (SQLCA.VAGen_SQLCODE == -811)
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SD3G";
          SLWREC.SLWMSGNO = 0480; /* Duplicate rows in vcolor02 db*/
          set SL0KM310.SL0KWGPC cursor, bold; /* Highlight*/
          set SL0KM310.SL0KWSTY cursor, bold; /* Highlight*/
          set SL0KM310.SL0KWCLR cursor, bold; /* Highlight*/
          set SL0KM310.SL0KWDIM cursor, bold; /* Highlight*/
          set SL0KM310.SL0KWUOM cursor, bold; /* Highlight*/
          return;
        else
          if (SQLCA.VAGen_SQLCODE == -911)
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SD3H";
            SLWREC.SLWMSGNO = 0031; /* < Try again*/
            set SL0KM310.SL0KWGPC cursor, bold; /* Highlight*/
            set SL0KM310.SL0KWSTY cursor, bold; /* Highlight*/
            set SL0KM310.SL0KWCLR cursor, bold; /* Highlight*/
            set SL0KM310.SL0KWDIM cursor, bold; /* Highlight*/
            set SL0KM310.SL0KWUOM cursor, bold; /* Highlight*/
            return;
          else
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SD3I";
            SLWREC.SLWMSGNO = 0001; /* < Severe Error message*/
            set SL0KM310.SL0KWGPC cursor, bold; /* Highlight*/
            set SL0KM310.SL0KWSTY cursor, bold; /* Highlight*/
            set SL0KM310.SL0KWCLR cursor, bold; /* Highlight*/
            set SL0KM310.SL0KWDIM cursor, bold; /* Highlight*/
            set SL0KM310.SL0KWUOM cursor, bold; /* Highlight*/
            return;
          end
        end
      end
    end
  end

   /* DLVRUSA CHANGE ENDS   - SAIRAM-UOM*/

   /* ************************************************************/
   /* *** make sure old product sizes are in the new product  ****/
   /* *** size run                                            ****/
   /* ************************************************************/

  SL0KS38();

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check for duplicate locations entered               ****/
   /* ************************************************************/

  SLWIDX02 = 36;
  while (SLWIDX02 != 0)
    if (SL0KM310.XARCD[SLWIDX02] != " ")
      move SLWIDX02 to SLWIDX03 withV60Compat;
      SLWIDX03 = SLWIDX03 - 1;
      while (SLWIDX03 != 0)
        if (SL0KM310.XARCD[SLWIDX03] != " ")
          if (SL0KM310.XARCD[SLWIDX02] == SL0KM310.XARCD[SLWIDX03]
           && SL0KM310.SL4ZONE[SLWIDX02] == SL0KM310.SL4ZONE[SLWIDX03]
           && SL0KM310.SL5LOCTN[SLWIDX02] == SL0KM310.SL5LOCTN[SLWIDX03])
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SD3D";
            SLWREC.SLWMSGNO = 0137; /* <=== dup loc entered*/
            set SL0KM310.SL5LOCTN[SLWIDX02] cursor, bold;
            set SL0KM310.SL4ZONE[SLWIDX02] cursor, bold;
            set SL0KM310.XARCD[SLWIDX02] cursor, bold;
            set SL0KM310.SL5LOCTN[SLWIDX03] cursor, bold;
            set SL0KM310.SL4ZONE[SLWIDX03] cursor, bold;
            set SL0KM310.XARCD[SLWIDX03] cursor, bold;
          end
        end
        SLWIDX03 = SLWIDX03 - 1;
      end
    end
    SLWIDX02 = SLWIDX02 - 1;
  end

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** validate area, zone, location                       ****/
   /* ************************************************************/

  SLWIDX02 = 1;
  while (SLWIDX02 <= 36
   && SLWREC.SLWERRSW != "Y")
    if (SL0KM310.XARCD[SLWIDX02] != " ")
      SL0KS3U(); /* <=== validate area, zone, location*/
    end
    SLWIDX02 = SLWIDX02 + 1;
  end

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** cannot change receiving                             ****/
   /* ************************************************************/

  SLWIDX03 = 36;
  while (SLWIDX03 != 0)
    if (SL0KM310.XARCD[SLWIDX03] > " ")
      SL0KS3E(); /* <=== check if receiving area*/
    end
    SLWIDX03 = SLWIDX03 - 1;
  end

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** if processing area,                                 ****/
   /* ***   check if product assignment is setup for new size,****/
   /* ***   also can't change product if setaside or reserve  ****/
   /* ***   qty exists.                                       ****/
   /* *** if bulk area,                                       ****/
   /* ***   cannot change if reserve or setaside exists.      ****/
   /* ************************************************************/

  SLWIDX03 = 1;
  while (SLWIDX03 <= 36
   && SLWREC.SLWERRSW != "Y")
    if (SL0KM310.XARCD[SLWIDX03] > " ")
      SL0KS3F(); /* <=== prod assgn setup for processing*/
      SL0KSXD(); /* <=== close scan prod/loc*/
      SL0KSXE(); /* <=== close scan prod/asg*/
    end /* <=== check for rsv or setaside*/
    SLWIDX03 = SLWIDX03 + 1;
  end

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check if work order exists                          ****/
   /* ************************************************************/

  SLWIDX02 = 1;
  while (SLWIDX02 <= 36
   && SLWREC.SLWERRSW != "Y")
    if (SL0KM310.XARCD[SLWIDX02] != " ")
      SL0KS3Z();
    end
    SLWIDX02 = SLWIDX02 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KSD3

// key obtain table data
Function SL0KSE1()

   /* ************************************************************/
   /* *** make one time table accesses for auxillary and/or   ****/
   /* *** main data                                           ****/
   /* *** note: first time executions before beginning a loop ****/
   /* ***       might also be performed                       ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KSE1 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

   /* ************************************************************/
   /* *** get the size descriptions.                          ****/
   /* ************************************************************/

  set SYPREC empty;
  SYPREC.XGPCD = SL0KM110.XGPCD;
  SYPREC.SY1STNBR = SL0KM110.SY1STNBR;
  SYPREC.SY2CLRID = SL0KM110.SY2CLRID;
  SYPREC.XDMCD = SL0KM110.XDMCD;
  SYPREC.XQACD = "**";

  SL0KSXC(); /* perform size translation call*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** load the working storage size table with the        ****/
   /* *** size id and description.                            ****/
   /* ************************************************************/

  SL0KW11.XWHCD = SL0KM110.XWHCD;
  SL0KW11.XARCD = SL0KM110.XARCD;
  if (SL0KW11.SL0KWWAR in XARTBL.XARKEY)
    if (XARTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XARTBL.XARPRCFL[sysVar.arrayIndex] == "Y") /* <=== processing area*/
        if (SL4REC.YZTCD in YZTTBL.YZTCD)
          if (YZTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
            if (YZTTBL.YZTFCSFL[sysVar.arrayIndex] == "Y" /* <=== full case*/
             || SL0KM110.SL5LOCTN == "000000")           
              SL0KS9N(); /* <=== move sizes to ws tbl - non pick*/
                                   /* zone*/
            else
              SL0KS1B(); /* <=== move sizes to ws tbl - picking*/
                                   /* zone*/
            end
          else
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SE1A";
            SLWREC.SLWMSGNO = 0010; /* <=== inactive msg*/
            set SL0KM110.SL4ZONE cursor, bold;
            set SL0KM110.XARCD cursor, bold;
          end
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SE1B";
          SLWREC.SLWMSGNO = 0011; /* <=== invalid value msg*/
          set SL0KM110.SL4ZONE cursor, bold;
          set SL0KM110.XARCD cursor, bold;
        end
      else
        SL0KS9N(); /* <=== move sizes to ws tbl - non pick*/
                                   /* zone*/
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SE1C";
      SLWREC.SLWMSGNO = 0010; /* <=== inactive msg*/
      set SL0KM110.XARCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE1D";
    SLWREC.SLWMSGNO = 0011; /* <=== invalid value msg*/
    set SL0KM110.XARCD cursor, bold;
  end

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** load the working storage size table with quantities ****/
   /* ************************************************************/

  SL0KS1C();

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** load the map quantities                             ****/
   /* ************************************************************/

  SL0KS1D();

   /* ************************************************************/
   /* *** darken the map sizes not used                       ****/
   /* ************************************************************/

  SLWIDX01 = 1;
  while (SLWIDX01 <= SL0KW01.SL0KWNSZ)
    set SL0KM110.SY4IDDSC[SLWIDX01] initialAttributes;
    set SL0KM110.SL0KMCQT[SLWIDX01] initialAttributes;
    set SL0KM110.SL0KMADJ[SLWIDX01] initialAttributes;
    SLWIDX01 = SLWIDX01 + 1;
  end

  SLWIDX01 = SL0KW01.SL0KWNSZ;
  SLWIDX01 = SLWIDX01 + 1;
  while (SLWIDX01 <= 36)
    set SL0KM110.SY4IDDSC[SLWIDX01] skip, invisible;
    set SL0KM110.SL0KMCQT[SLWIDX01] skip, invisible;
    set SL0KM110.SL0KMADJ[SLWIDX01] skip, invisible;
    SLWIDX01 = SLWIDX01 + 1;
  end

  set SL0KM110.SL0KMTOT initialAttributes;

   /* ************************************************************/
   /* *** the following displays invalid size qtys            ****/
   /* ************************************************************/

  if (SL0KW01.SL0KWIFL == "Y" /* <=== invalid size exist*/
   && SL0KW01.SL0KWNSZ < 36) 
    SLWIDX01 = SL0KW01.SL0KWNSZ;
    SLWIDX01 = SLWIDX01 + 1;
    SL0KM110.SY4IDDSC[SLWIDX01] = "**";
    SL0KM110.SL0KMCQT[SLWIDX01] = SL0KW01.SL0KWISZ;
    set SL0KM110.SY4IDDSC[SLWIDX01] initialAttributes;
    set SL0KM110.SL0KMCQT[SLWIDX01] initialAttributes;
    set SL0KM110.SL0KMADJ[SLWIDX01] skip; /* disable adj ability*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KSE1

// key obtain table data
Function SL0KSE2()
   /* ************************************************************/
   /* *** make one time table accesses for auxillary and/or   ****/
   /* *** main data                                           ****/
   /* *** note: first time executions before beginning a loop ****/
   /* ***       might also be performed                       ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KSE2 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

   /* ************************************************************/
   /* *** Get the size descriptions for the new product.      ****/
   /* *** These will be compared with the old product to      ****/
   /* *** make sure that the new product has every size that  ****/
   /* *** the old product has.                                ****/
   /* ************************************************************/

  if (SL0KM210.SL0KWGPC == SL0KM210.XGPCD
   && SL0KM210.SL0KWSTY == SL0KM210.SY1STNBR
   && SL0KM210.SL0KWCLR == SL0KM210.SY2CLRID
   && SL0KM210.SL0KWDIM == SL0KM210.XDMCD
   && SL0KM210.SL0KWQLT == SL0KM210.XQACD)
     /* ** next sentence*/
  else
    set SYPREC empty;
    SYPREC.XGPCD = SL0KM210.SL0KWGPC;
    SYPREC.SY1STNBR = SL0KM210.SL0KWSTY;
    SYPREC.SY2CLRID = SL0KM210.SL0KWCLR;
    SYPREC.XDMCD = SL0KM210.SL0KWDIM;
    SYPREC.XQACD = "**";

    SL0KSXC(); /* perform size translation call*/

    SL0KW22.SYPDATA = SYPREC.SYPDATA;
  end

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** get the size descriptions for the old product.      ****/
   /* ************************************************************/

  set SYPREC empty;
  SYPREC.XGPCD = SL0KM210.XGPCD;
  SYPREC.SY1STNBR = SL0KM210.SY1STNBR;
  SYPREC.SY2CLRID = SL0KM210.SY2CLRID;
  SYPREC.XDMCD = SL0KM210.XDMCD;
  SYPREC.XQACD = "**";

  SL0KSXC(); /* perform size translation call*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** if the new product doesn't contain all of the sizes ****/
   /* *** that the old product has,  cannot change the qtys.  ****/
   /* ************************************************************/

  if (SL0KM210.SL0KWGPC == SL0KM210.XGPCD
   && SL0KM210.SL0KWSTY == SL0KM210.SY1STNBR
   && SL0KM210.SL0KWCLR == SL0KM210.SY2CLRID
   && SL0KM210.SL0KWDIM == SL0KM210.XDMCD
   && SL0KM210.SL0KWQLT == SL0KM210.XQACD)
     /* ** next sentence*/
  else
    SLWIDX01 = 1;
    while (SLWIDX01 <= 40
     && SLWREC.SLWERRSW != "Y")
      if (SYPREC.SY4IDDSC[SLWIDX01] != " ")
        if (SYPREC.SY4IDDSC[SLWIDX01] != SL0KW22.SY4IDDSC[SLWIDX01])
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SE2A";
          SLWREC.SLWMSGNO = 0146; /* <=== diff size runs*/
          set SL0KM210.XQACD cursor, bold;
          set SL0KM210.XDMCD cursor, bold;
          set SL0KM210.SY2CLRID cursor, bold;
          set SL0KM210.SY1STNBR cursor, bold;
          set SL0KM210.XGPCD cursor, bold;
          set SL0KM210.SL0KWQLT cursor, bold;
          set SL0KM210.SL0KWDIM cursor, bold;
          set SL0KM210.SL0KWCLR cursor, bold;
          set SL0KM210.SL0KWSTY cursor, bold;
          set SL0KM210.SL0KWGPC cursor, bold;
          return;
        end
      end
      SLWIDX01 = SLWIDX01 + 1;
    end
  end

   /* ************************************************************/
   /* *** load the working storage size table with the        ****/
   /* *** size id and description.                            ****/
   /* ************************************************************/

  SL0KS2G();

   /* ************************************************************/
   /* *** Load the working storage size table with quantities.****/
   /* *** If pick reserve or setaside qtys exist, adjustment  ****/
   /* *** must be made against net rather than on hand        ****/
   /* ************************************************************/

  SL0KS2H();

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check for exist new key row for this location if    ****/
   /* *** found use existing unit per case                    ****/
   /* *** calculate existing qtys for case qty test           ****/
   /* ************************************************************/

  SL0KS26();

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

  if (SL0KM210.SL0KMUT1 == -1) /* Units/case wildcard*/
    SL0KM210.SL0KMUT1 = SL0KW02.SY1UNPCS;
  end

  if (SL0KM210.SL0KMUT2 == -1) /* Units/case wildcard*/
    if (SL0KW02.SL0KWUNT == -1) /* No units/case found*/
      SL0KM210.SL0KMUT2 = SL0KW02.SY1UNPCS;
    else
      SL0KM210.SL0KMUT2 = SL0KW02.SL0KWUNT;
    end
  end

  SL0KS2F(); /* compare new prod key against current*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** if processing location,                             ****/
   /* ***   check if product assignment exists                ****/
   /* ************************************************************/

  SL0KW21.XWHCD = SL0KM210.XWHCD;
  SL0KW21.XARCD = SL0KM210.XARCD;
  if (SL0KW21.SL0KWWAR in XARTBL.XARKEY) /* <--- area type*/
    if (XARTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XARTBL.XARPRCFL[sysVar.arrayIndex] == "Y") /* <=== if processing area*/
        if (SL4REC.YZTCD in YZTTBL.YZTCD)
          if (YZTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
            if (YZTTBL.YZTFCSFL[sysVar.arrayIndex] == "Y" /* <=== full case*/
             || SL0KM210.SL5LOCTN == "000000")           
               /* ** next sentence*/
            else
              SL0KS23(); /* <=== check for prod assignment*/
            end
          else
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SE2B";
            SLWREC.SLWMSGNO = 0010; /* <=== inactive msg*/
            set SL0KM210.SL4ZONE cursor, bold;
            set SL0KM210.XARCD cursor, bold;
          end
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SE2C";
          SLWREC.SLWMSGNO = 0011; /* <=== invalid value msg*/
          set SL0KM210.SL4ZONE cursor, bold;
          set SL0KM210.XARCD cursor, bold;
        end
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SE2D";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0KM210.XARCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE2F";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0KM210.XARCD cursor, bold;
  end

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** load the map quantities                             ****/
   /* ************************************************************/

  SL0KS2I();

   /* ************************************************************/
   /* *** darken the map sizes not used                       ****/
   /* ************************************************************/

  SLWIDX01 = 1;
  while (SLWIDX01 <= SL0KW02.SL0KWNSZ)
    set SL0KM210.SY4IDDSC[SLWIDX01] initialAttributes;
    set SL0KM210.SL0KMQTY[SLWIDX01] initialAttributes;
    SLWIDX01 = SLWIDX01 + 1;
  end

  SLWIDX01 = SL0KW02.SL0KWNSZ;
  SLWIDX01 = SLWIDX01 + 1;
  while (SLWIDX01 <= 40)
    set SL0KM210.SY4IDDSC[SLWIDX01] skip, invisible;
    set SL0KM210.SL0KMQTY[SLWIDX01] skip, invisible;
    SLWIDX01 = SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** set autoskip sizes which have zero qty              ****/
   /* ************************************************************/

  SLWIDX01 = 1;
  while (SLWIDX01 <= SL0KW02.SL0KWNSZ)
    if (SL0KM210.SL0KMQTY[SLWIDX01] == 0
     || SL5REC.SL5MPDFL == "N") /* or single SKU location*/
      set SL0KM210.SL0KMQTY[SLWIDX01] skip;
    end
    SLWIDX01 = SLWIDX01 + 1;
  end

   /* ***********************************************************************/
   /* *** set autoskip qty if XIT/XIR Combo is 31/085 or 31/089  ****/
   /* ***********************************************************************/

  if (SL0KM210.XITCD == "31")
    if (SL0KM210.XIRCD == "085"
     || SL0KM210.XIRCD == "089")
      set SL0KM210.SL0KMTOT skip;
      SLWIDX01 = 1;
      while (SLWIDX01 <= SL0KW02.SL0KWNSZ)
        set SL0KM210.SL0KMQTY[SLWIDX01] skip;
        SLWIDX01 = SLWIDX01 + 1;
      end
    end
  end

   /* ************************************************************/
   /* *** the following displays invalid size qtys            ****/
   /* ************************************************************/

  if (SL0KW02.SL0KWIFL == "Y" /* <=== invalid size exist*/
   && SL0KW02.SL0KWNSZ < 40) 
    SLWIDX01 = SL0KW02.SL0KWNSZ;
    SLWIDX01 = SLWIDX01 + 1;
    SL0KM210.SY4IDDSC[SLWIDX01] = "**";
    SL0KM210.SL0KMQTY[SLWIDX01] = SL0KW02.SL0KWISZ;
    set SL0KM210.SY4IDDSC[SLWIDX01] initialAttributes;
    set SL0KM210.SL0KMQTY[SLWIDX01] skip;
  end

end // end SL0KSE2

// key obtain table data
Function SL0KSE3()

   /* ************************************************************/
   /* *** make one time table accesses for auxillary and/or   ****/
   /* *** main data                                           ****/
   /* *** note: first time executions before beginning a loop ****/
   /* ***       might also be performed                       ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KSE3

// save current key value(s)
Function SL0KSF1()
   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  COMMAREA.XWHCD = SL0KM110.XWHCD;

  SL0KW01.XWHCD = SL0KM110.XWHCD;
  SL0KW01.IN5TRDCD = SL0KM110.IN5TRDCD;
  SL0KW01.IN5TRDOC = SL0KM110.IN5TRDOC;
  SL0KW01.IN5TRSUB = SL0KM110.IN5TRSUB;
  SL0KW01.XITCD = SL0KM110.XITCD;
  SL0KW01.IN5TRREF = SL0KM110.IN5TRREF;
  SL0KW01.XIRCD = SL0KM110.XIRCD;
  SL0KW01.XIFCD = SL0KM110.XIFCD;
  SL0KW01.XGPCD = SL0KM110.XGPCD;
  SL0KW01.SY1STNBR = SL0KM110.SY1STNBR;
  SL0KW01.SY2CLRID = SL0KM110.SY2CLRID;
  SL0KW01.XDMCD = SL0KM110.XDMCD;
  SL0KW01.XQACD = SL0KM110.XQACD;
  SL0KW01.PC2INSEG = SL0KM110.PC2INSEG;
  SL0KW01.XEGCD = SL0KM110.XEGCD;
  SL0KW01.XSLCD = SL0KM110.XSLCD;
  SL0KW01.XPGCD = SL0KM110.XPGCD;
  SL0KW01.XUMCD = SL0KM110.XUMCD;
  SL0KW01.XOWCD = SL0KM110.XOWCD;
  SL0KW01.XARCD = SL0KM110.XARCD;
  SL0KW01.SY1UNPCS = SL0KM110.SY1UNPCS;
  SL0KW01.SL4ZONE = SL0KM110.SL4ZONE;
  SL0KW01.SL5LOCTN = SL0KM110.SL5LOCTN;
  SL0KW01.PC3PONBR = SL0KM110.PC3PONBR;
   /* DLVRUSA STARTS - SAIRAM-SAPPO*/
  SL0KW01.PC-SAP-PO-NBR = SL0KM110.PC-SAP-PO-NBR;
   /* DLVRUSA STARTS - SAIRAM-SAPPO*/
  SL0KW01.SL0KWPID = SL0KM110.SL0KWPID;
  SL0KW01.PC4ORTYP = SL0KM110.PC4ORTYP;
  SL0KW01.SL2CASE = SL0KM110.SL2CASE;

end // end SL0KSF1

// save current key value(s)
Function SL0KSF2()
   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  COMMAREA.XWHCD = SL0KM210.XWHCD;

  SL0KW02.XWHCD = SL0KM210.XWHCD;
  SL0KW02.IN5TRDCD = SL0KM210.IN5TRDCD;
  SL0KW02.IN5TRDOC = SL0KM210.IN5TRDOC;
  SL0KW02.IN5TRSUB = SL0KM210.IN5TRSUB;
  SL0KW02.XITCD = SL0KM210.XITCD;
  SL0KW02.IN5TRREF = SL0KM210.IN5TRREF;
  SL0KW02.XIRCD = SL0KM210.XIRCD;
  SL0KW02.XGPCD = SL0KM210.XGPCD;
  SL0KW02.SY1STNBR = SL0KM210.SY1STNBR;
  SL0KW02.SY2CLRID = SL0KM210.SY2CLRID;
  SL0KW02.XDMCD = SL0KM210.XDMCD;
  SL0KW02.XQACD = SL0KM210.XQACD;
  SL0KW02.PC2INSEG = SL0KM210.PC2INSEG;
  SL0KW02.XEGCD = SL0KM210.XEGCD;
  SL0KW02.XSLCD = SL0KM210.XSLCD;
  SL0KW02.XPGCD = SL0KM210.XPGCD;
  SL0KW02.XUMCD = SL0KM210.XUMCD;
  SL0KW02.XOWCD = SL0KM210.XOWCD;
  SL0KW02.SY1UNPCS = SL0KM210.SL0KMUT1;

  SL0KW02.SL0KWGPC = SL0KM210.SL0KWGPC;
  SL0KW02.SL0KWSTY = SL0KM210.SL0KWSTY;
  SL0KW02.SL0KWCLR = SL0KM210.SL0KWCLR;
  SL0KW02.SL0KWDIM = SL0KM210.SL0KWDIM;
  SL0KW02.SL0KWQLT = SL0KM210.SL0KWQLT;
  SL0KW02.SL0KWISG = SL0KM210.SL0KWISG;
  SL0KW02.SL0KWXEG = SL0KM210.SL0KWXEG;
  SL0KW02.SL0KWSLC = SL0KM210.SL0KWSLC;
  SL0KW02.SL0KWPKG = SL0KM210.SL0KWPKG;
  SL0KW02.SL0KWUOM = SL0KM210.SL0KWUOM;
  SL0KW02.SL0KWOWN = SL0KM210.SL0KWOWN;
  SL0KW02.SL0KWUNT = SL0KM210.SL0KMUT2;

  SL0KW02.XARCD = SL0KM210.XARCD;
  SL0KW02.SL4ZONE = SL0KM210.SL4ZONE;
  SL0KW02.SL5LOCTN = SL0KM210.SL5LOCTN;

end // end SL0KSF2

// save current key value(s)
Function SL0KSF3()

   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  COMMAREA.XWHCD = SL0KM310.XWHCD;

  SL0KW03.XWHCD = SL0KM310.XWHCD;
  SL0KW03.IN5TRDCD = SL0KM310.IN5TRDCD;
  SL0KW03.IN5TRDOC = SL0KM310.IN5TRDOC;
  SL0KW03.IN5TRSUB = SL0KM310.IN5TRSUB;
  SL0KW03.XITCD = SL0KM310.XITCD;
  SL0KW03.IN5TRREF = SL0KM310.IN5TRREF;
  SL0KW03.XIRCD = SL0KM310.XIRCD;
  SL0KW03.XGPCD = SL0KM310.XGPCD;
  SL0KW03.SY1STNBR = SL0KM310.SY1STNBR;
  SL0KW03.SY2CLRID = SL0KM310.SY2CLRID;
  SL0KW03.XDMCD = SL0KM310.XDMCD;
  SL0KW03.XQACD = SL0KM310.XQACD;
  SL0KW03.PC2INSEG = SL0KM310.PC2INSEG;
  SL0KW03.XEGCD = SL0KM310.XEGCD;
  SL0KW03.XSLCD = SL0KM310.XSLCD;
  SL0KW03.XPGCD = SL0KM310.XPGCD;
  SL0KW03.XUMCD = SL0KM310.XUMCD;
  SL0KW03.XOWCD = SL0KM310.XOWCD;

  SL0KW03.SL0KWGPC = SL0KM310.SL0KWGPC;
  SL0KW03.SL0KWSTY = SL0KM310.SL0KWSTY;
  SL0KW03.SL0KWCLR = SL0KM310.SL0KWCLR;
  SL0KW03.SL0KWDIM = SL0KM310.SL0KWDIM;
  SL0KW03.SL0KWQLT = SL0KM310.SL0KWQLT;
  SL0KW03.SL0KWISG = SL0KM310.SL0KWISG;
  SL0KW03.SL0KWXEG = SL0KM310.SL0KWXEG;
  SL0KW03.SL0KWSLC = SL0KM310.SL0KWSLC;
  SL0KW03.SL0KWPKG = SL0KM310.SL0KWPKG;
  SL0KW03.SL0KWUOM = SL0KM310.SL0KWUOM;
  SL0KW03.SL0KWOWN = SL0KM310.SL0KWOWN;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KSF3

// setup map key fields
Function SL0KSG1()
   /* ************************************************************/
   /* *** since the 'special error switch' = 'y':             ****/
   /* *** use current ws values in the corresponding map flds ****/
   /* ************************************************************/

  SL0KM110.XWHCD = SL0KW01.XWHCD;
  SL0KM110.IN5TRDCD = SL0KW01.IN5TRDCD;
  SL0KM110.IN5TRDOC = SL0KW01.IN5TRDOC;
  SL0KM110.IN5TRSUB = SL0KW01.IN5TRSUB;
  SL0KM110.XITCD = SL0KW01.XITCD;
  SL0KM110.IN5TRREF = SL0KW01.IN5TRREF;
  SL0KM110.XIRCD = SL0KW01.XIRCD;
  SL0KM110.XIFCD = SL0KW01.XIFCD;
  SL0KM110.XGPCD = SL0KW01.XGPCD;
  SL0KM110.SY1STNBR = SL0KW01.SY1STNBR;
  SL0KM110.SY2CLRID = SL0KW01.SY2CLRID;
  SL0KM110.XDMCD = SL0KW01.XDMCD;
  SL0KM110.XQACD = SL0KW01.XQACD;
  SL0KM110.PC2INSEG = SL0KW01.PC2INSEG;
  SL0KM110.XEGCD = SL0KW01.XEGCD;
  SL0KM110.XSLCD = SL0KW01.XSLCD;
  SL0KM110.XPGCD = SL0KW01.XPGCD;
  SL0KM110.XUMCD = SL0KW01.XUMCD;
  SL0KM110.XOWCD = SL0KW01.XOWCD;
  SL0KM110.XARCD = SL0KW01.XARCD;
  SL0KM110.SY1UNPCS = SL0KW01.SY1UNPCS;
  SL0KM110.SL4ZONE = SL0KW01.SL4ZONE;
  SL0KM110.SL5LOCTN = SL0KW01.SL5LOCTN;
  SL0KM110.PC3PONBR = SL0KW01.PC3PONBR;
   /* DLVRUSA STARTS - SAIRAM-SAPPO*/
  SL0KM110.PC-SAP-PO-NBR = SL0KW01.PC-SAP-PO-NBR;
   /* DLVRUSA STARTS - SAIRAM-SAPPO*/
  SL0KM110.PC4ORTYP = SL0KW01.PC4ORTYP;
  SL0KM110.SL0KWPID = SL0KW01.SL0KWPID;
  SL0KM110.SL2CASE = SL0KW01.SL2CASE;

end // end SL0KSG1

// setup map key fields
Function SL0KSG2()
   /* ************************************************************/
   /* *** since the 'special error switch' = 'y':             ****/
   /* *** use current ws values in the corresponding map flds ****/
   /* ************************************************************/

  SL0KM210.XWHCD = SL0KW02.XWHCD;
  SL0KM210.IN5TRDCD = SL0KW02.IN5TRDCD;
  SL0KM210.IN5TRDOC = SL0KW02.IN5TRDOC;
  SL0KM210.IN5TRSUB = SL0KW02.IN5TRSUB;
  SL0KM210.XITCD = SL0KW02.XITCD;
  SL0KM210.IN5TRREF = SL0KW02.IN5TRREF;
  SL0KM210.XIRCD = SL0KW02.XIRCD;
  SL0KM210.XGPCD = SL0KW02.XGPCD;
  SL0KM210.SY1STNBR = SL0KW02.SY1STNBR;
  SL0KM210.SY2CLRID = SL0KW02.SY2CLRID;
  SL0KM210.XDMCD = SL0KW02.XDMCD;
  SL0KM210.XQACD = SL0KW02.XQACD;
  SL0KM210.PC2INSEG = SL0KW02.PC2INSEG;
  SL0KM210.XEGCD = SL0KW02.XEGCD;
  SL0KM210.XSLCD = SL0KW02.XSLCD;
  SL0KM210.XPGCD = SL0KW02.XPGCD;
  SL0KM210.XUMCD = SL0KW02.XUMCD;
  SL0KM210.XOWCD = SL0KW02.XOWCD;
  SL0KM210.SL0KMUT1 = SL0KW02.SY1UNPCS;

  SL0KM210.SL0KWGPC = SL0KW02.SL0KWGPC;
  SL0KM210.SL0KWSTY = SL0KW02.SL0KWSTY;
  SL0KM210.SL0KWCLR = SL0KW02.SL0KWCLR;
  SL0KM210.SL0KWDIM = SL0KW02.SL0KWDIM;
  SL0KM210.SL0KWQLT = SL0KW02.SL0KWQLT;
  SL0KM210.SL0KWISG = SL0KW02.SL0KWISG;
  SL0KM210.SL0KWXEG = SL0KW02.SL0KWXEG;
  SL0KM210.SL0KWSLC = SL0KW02.SL0KWSLC;
  SL0KM210.SL0KWPKG = SL0KW02.SL0KWPKG;
  SL0KM210.SL0KWUOM = SL0KW02.SL0KWUOM;
  SL0KM210.SL0KWOWN = SL0KW02.SL0KWOWN;
  SL0KM210.XARCD = SL0KW02.XARCD;
  SL0KM210.SL4ZONE = SL0KW02.SL4ZONE;
  SL0KM210.SL5LOCTN = SL0KW02.SL5LOCTN;
  SL0KM210.SL0KMUT2 = SL0KW02.SL0KWUNT;

end // end SL0KSG2

// setup map key fields
Function SL0KSG3()

   /* ************************************************************/
   /* *** use current ws values in the corresponding map flds ****/
   /* ************************************************************/

  SL0KM310.XWHCD = SL0KW03.XWHCD;
  SL0KM310.IN5TRDCD = SL0KW03.IN5TRDCD;
  SL0KM310.IN5TRDOC = SL0KW03.IN5TRDOC;
  SL0KM310.IN5TRSUB = SL0KW03.IN5TRSUB;
  SL0KM310.XITCD = SL0KW03.XITCD;
  SL0KM310.IN5TRREF = SL0KW03.IN5TRREF;
  SL0KM310.XIRCD = SL0KW03.XIRCD;
  SL0KM310.XGPCD = SL0KW03.XGPCD;
  SL0KM310.SY1STNBR = SL0KW03.SY1STNBR;
  SL0KM310.SY2CLRID = SL0KW03.SY2CLRID;
  SL0KM310.XDMCD = SL0KW03.XDMCD;
  SL0KM310.XQACD = SL0KW03.XQACD;
  SL0KM310.PC2INSEG = SL0KW03.PC2INSEG;
  SL0KM310.XEGCD = SL0KW03.XEGCD;
  SL0KM310.XSLCD = SL0KW03.XSLCD;
  SL0KM310.XPGCD = SL0KW03.XPGCD;
  SL0KM310.XUMCD = SL0KW03.XUMCD;
  SL0KM310.XOWCD = SL0KW03.XOWCD;

  SL0KM310.SL0KWGPC = SL0KW03.SL0KWGPC;
  SL0KM310.SL0KWSTY = SL0KW03.SL0KWSTY;
  SL0KM310.SL0KWCLR = SL0KW03.SL0KWCLR;
  SL0KM310.SL0KWDIM = SL0KW03.SL0KWDIM;
  SL0KM310.SL0KWQLT = SL0KW03.SL0KWQLT;
  SL0KM310.SL0KWISG = SL0KW03.SL0KWISG;
  SL0KM310.SL0KWXEG = SL0KW03.SL0KWXEG;
  SL0KM310.SL0KWSLC = SL0KW03.SL0KWSLC;
  SL0KM310.SL0KWPKG = SL0KW03.SL0KWPKG;
  SL0KM310.SL0KWUOM = SL0KW03.SL0KWUOM;
  SL0KM310.SL0KWOWN = SL0KW03.SL0KWOWN;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KSG3

// ENTER processing
Function SL0KSH0()

   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0KSA0(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no missing fields:                                  ****/
   /* *** invalid selection detected in flow when             ****/
   /* *** transfer of control is attempted                    ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KSH0

// ENTER processing
Function SL0KSH1()
   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0KSA1(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no missing fields: edit individual fields           ****/
   /* ************************************************************/

  SL0KSC1(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0KSD1(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses & setup map ****/
   /* ************************************************************/

  SL0KSE1(); /* <=== obtain table data*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s)                        ****/
   /* ************************************************************/

  SL0KSF1(); /* <=== save current key value(s)*/

end // end SL0KSH1

// ENTER processing
Function SL0KSH2()

   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0KSA2(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no missing fields: edit individual fields           ****/
   /* ************************************************************/

  SL0KSC2(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0KSD2(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses & setup map ****/
   /* ************************************************************/

  SL0KSE2(); /* <=== obtain table data*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s)                        ****/
   /* ************************************************************/

  SL0KSF2(); /* <=== save current key value(s)*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KSH2

// ENTER processing
Function SL0KSH3()

   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0KSA3(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no missing fields: edit individual fields           ****/
   /* ************************************************************/

  SL0KSC3(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0KSD3(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses & setup map ****/
   /* ************************************************************/

  SL0KSE3(); /* <=== obtain table data*/

  if (SLWREC.SLWERRSW == "Y")
    SL0KSF3(); /* <=== save current key value(s)*/
    SL0KST3(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s)                        ****/
   /* ************************************************************/

  SL0KSF3(); /* <=== save current key value(s)*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KSH3

// obtain style row
Function SL0KSII()

   /* ************************************************************/
   /* *** select unique row/view: style                       ****/
   /* *** using the std module:  IO1810                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -811 = duplicates found                           ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***     <0 = db/severe error (&-911)                    ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* ************************************************************/

  call "IO1810" ("S ", SQLCA, PKNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -811)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "SL0KSII ";
  TA1REC.TA1LOCAT[1] = "IO1810  ";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DPICK   ";
  TA1REC.TA1TBLVU = "VPKSTY01";
  TA1REC.TA1TBLKE = PKNREC.PKNKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KSII

// data missing input edits
Function SL0KSN1()
   /* ************************************************************/
   /* *** setup error for each missing data field             ****/
   /* *** note: setup defaults for optional fields, if any    ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  SLWIDX01 = 1;
  while (SLWIDX01 <= SL0KW01.SL0KWNSZ
   && SL0KM110.SL0KMADJ[SLWIDX01] == 0) /* <=== ADJ ENTERED*/
    SLWIDX01 = SLWIDX01 + 1;
  end

  if (SLWIDX01 <= 39)
    if (SL0KM110.SL0KMADJ[SLWIDX01] != 0)
       /* ** next sentence ***/
       /* DLVRUSA STARTS - SAIRAM-UOM*/
      if (SL0KM110.XWHCD != "02")
        if (SL0KM110.SL0KMADJ[SLWIDX01] > 0)
          if (SL0KW01.SL0KW-VALID-UOM-FL == "N")
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SN1C";
            SLWREC.SLWMSGNO = 0477; /* Invalid UOM - Can't incrs qty*/
            set SL0KM110.SL0KMADJ[1] cursor, bold;
          end
        end
      end
       /* DLVRUSA ENDS   - SAIRAM-UOM*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SN1A";
      SLWREC.SLWMSGNO = 0009; /* <--missing required field msg*/
      set SL0KM110.SL0KMADJ[1] cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SN1B";
    SLWREC.SLWMSGNO = 0009; /* <--missing required field msg*/
    set SL0KM110.SL0KMADJ[1] cursor, bold;
  end

end // end SL0KSN1

// data missing input edits
Function SL0KSN2()
   /* ************************************************************/
   /* *** setup error for each missing data field             ****/
   /* *** note: setup defaults for optional fields, if any    ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  SLWIDX01 = 1;
  while (SLWIDX01 <= SL0KW02.SL0KWNSZ
   && SL0KM210.SL0KMQTY[SLWIDX01] == 0) /* <=== ADJ ENTERED*/
    SLWIDX01 = SLWIDX01 + 1;
  end

  if (SLWIDX01 <= 40)
    if (SL0KM210.SL0KMQTY[SLWIDX01] != 0)
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SN2A";
      SLWREC.SLWMSGNO = 0009; /* <--missing required field msg*/
      set SL0KM210.SL0KMQTY[1] cursor;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SN2B";
    SLWREC.SLWMSGNO = 0009; /* <--missing required field msg*/
    set SL0KM210.SL0KMQTY[1] cursor;
  end

end // end SL0KSN2

// data field edits
Function SL0KSO1()

   /* ************************************************************/
   /* *** edit each data field, even if error detected        ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** cannot adjust qty below zero                        ****/
   /* ************************************************************/

  SLWIDX01 = SL0KW01.SL0KWNSZ;
  while (SLWIDX01 > 0)
    SL0KW01.SL0KWQTY = SL0KM110.SL0KMADJ[SLWIDX01];
    SL0KW01.SL0KWQTY = SL0KW01.SL0KWQTY + SL0KM110.SL0KMCQT[SLWIDX01];
    if (SL0KW01.SL0KWQTY < 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SO1A";
      SLWREC.SLWMSGNO = 0088; /* <--- cannot adj below zero*/
      set SL0KM110.SL0KMADJ[SLWIDX01] cursor, bold;
    end
    SLWIDX01 = SLWIDX01 - 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KSO1

// data field edits
Function SL0KSO2()

   /* ************************************************************/
   /* *** edit each data field, even if error detected        ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** cannot change a negative qty                        ****/
   /* ************************************************************/

  SLWIDX01 = SL0KW02.SL0KWNSZ;
  while (SLWIDX01 > 0)
    if (SL0KM210.SL0KMQTY[SLWIDX01] < 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SO2A";
      SLWREC.SLWMSGNO = 0129; /* <--- qty must be positive*/
      set SL0KM210.SL0KMQTY[SLWIDX01] cursor, bold;
    end
    SLWIDX01 = SLWIDX01 - 1;
  end

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KSO2

// data relational edits
Function SL0KSP1()

   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** for setaside only:                                  ****/
   /* ***   cannot setaside a qty greater than what is on     ****/
   /* ***   hand                                              ****/
   /* ************************************************************/

  if (SL0KM110.XIFCD == "04") /* <=== setaside*/
    SLWIDX03 = SL0KW01.SL0KWNSZ;
    while (SLWIDX03 > 0)
      SL0KS9E(); /* <=== check setaside le on hand*/
      SLWIDX03 = SLWIDX03 - 1;
    end

    if (SLWREC.SLWERRSW == "Y")
      return;
    end
  end

   /* ************************************************************/
   /* *** cannot adjust on hand less than setaside            ****/
   /* ************************************************************/

  if (SL0KM110.XIFCD == "01") /* <=== on hand*/
    SLWIDX03 = SL0KW01.SL0KWNSZ;
    while (SLWIDX03 > 0)
      SL0KS9H(); /* <=== check onhand not < setaside*/
      SLWIDX03 = SLWIDX03 - 1;
    end
  end

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** Test for negative net.                              ****/
   /* *** If there are negative adjustments,                  ****/
   /* ***   the user have the option to process or not        ****/
   /* ***   process the adjustments.                          ****/
   /* ************************************************************/

  if (SLWREC.SLWFTMSW == "Y") /* <=== first time sw*/
    SLWIDX01 = 1;
    while (SLWIDX01 <= SL0KW01.SL0KWNSZ)
      SL0KS1Q(); /* <=== check for negative net*/
      SLWIDX01 = SLWIDX01 + 1;
    end
    if (SLWREC.SLWERRSW == "Y")
      return;
    else
      SLWIDX01 = 1;
      while (SLWIDX01 <= SL0KW01.SL0KWNSZ)
        set SL0KM110.SL0KMADJ[SLWIDX01] initialAttributes;
        SLWIDX01 = SLWIDX01 + 1;
      end
    end
  end

   /* ************************************************************/
   /* *** map total field must equal calculated adj. total    ****/
   /* ************************************************************/

  SL0KW01.SL0KWTOT = 0;
  SLWIDX01 = 1;
  while (SLWIDX01 <= 36)
    SL0KW01.SL0KWTOT = SL0KW01.SL0KWTOT + SL0KM110.SL0KMADJ[SLWIDX01];
    SLWIDX01 = SLWIDX01 + 1;
  end

  if (SL0KW01.SL0KWTOT == SL0KM110.SL0KMTOT)
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SP1D";
    SLWREC.SLWMSGNO = 0112; /* <-- adj.s must equal total msg*/
    set SL0KM110.SL0KMTOT cursor, bold;
    return;
  end

   /* ************************************************************/
   /* *** For whse 51, check destroyed inventory trans        ****/
   /* *** for neg adj qty.                                    ****/
   /* ************************************************************/

  if (SL0KW01.XWHCD == "51") /* <=== Memphis aprl*/
    if (SL0KM110.XITCD == "40") /* <--- tran type destroyed inv*/
      if (SL0KM110.SL0KMTOT > 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SP1E";
        SLWREC.SLWMSGNO = 0470; /* <-- adj qty must be neg*/
        set SL0KM110.SL0KMTOT cursor, bold;
        return;
      end
      SLWIDX01 = 1;
      while (SLWIDX01 <= 36)
        if (SL0KM110.SL0KMADJ[SLWIDX01] > 0)
          SLWREC.SLWERRSW = "Y";
          SLWREC.SLWMSGNO = 0470; /* <-- adj qty must be neg*/
          set SL0KM110.SL0KMADJ[SLWIDX01] cursor, bold;
        end
        SLWIDX01 = SLWIDX01 + 1;
      end
    end
  end

   /* ************************************************************/
   /* *** If Memphis Apparel Warehouse - Test units per case  ****/
   /* *** if zone =  bulk                                     ****/
   /* *** or zone =  bulk short                               ****/
   /* *** or zone =  full case offline                        ****/
   /* *** or zone =  full case static                         ****/
   /* *** or zone =  full case letdown                        ****/
   /* *** or zone =  full case beltpick                       ****/
   /* *** or zone =  full case default                        ****/
   /* ***   if total onhand qty not even divide by units per  ****/
   /* ***   case qty                                          ****/
   /* ***       the user have the option to process or not    ****/
   /* ***       process the adjustments.                      ****/
   /* ************************************************************/

  if (SL0KW01.XWHCD == "02" /* <=== Greenland*/
   || SL0KW01.XWHCD == "04" /* <=== or Memphis foot*/
   || SL0KW01.XWHCD == "07" /* <=== or Greenland*/
   || SL0KW01.XWHCD == "51" /* <=== or Memphis aprl*/
   || SL0KW01.XWHCD == "25" /* <=== or NSG*/
   || SL0KW01.XWHCD == "42") /* <=== or Canada*/
    if (SLWREC.SLWFTMSW == "Y") /* <=== first time sw*/
      if (SL4REC.YZTCD == "01" /* if zone =  bulk*/
       || SL4REC.YZTCD == "02" /* if zone =  bulk short*/
       || SL4REC.YZTCD == "06" /* if zone =  bulk highrise*/
       || SL4REC.YZTCD == "21" /* if zone =  full case offline*/
       || SL4REC.YZTCD == "22" /* if zone =  full case static*/
       || SL4REC.YZTCD == "23" /* if zone =  full case letdown*/
       || SL4REC.YZTCD == "24" /* if zone =  full case beltpick*/
       || SL4REC.YZTCD == "25") /* if zone =  full case default*/
        SLWIDX01 = 1;
        SL0KW01.SL0KWQTY = 0;
        while (SLWIDX01 <= SL0KW01.SL0KWNSZ)
          SL0KW01.SL0KWQTY = SL0KW01.SL0KWQTY + SL0KW01.SL6ONHND[SLWIDX01];
          if (SL0KM110.XIFCD == "01") /* <=== on hand*/
            SL0KW01.SL0KWQTY = SL0KW01.SL0KWQTY +             SL0KM110.SL0KMADJ[SLWIDX01];
          end
          SLWIDX01 = SLWIDX01 + 1;
        end
        /* check case qty*/
        if (SL0KW01.SL0KWQTY > 0) /* if onhand qty greater than 0*/
          if (SL0KM110.SY1UNPCS > 0) /* if units per case gT 0*/
            if (SL0KW01.SL0KWQTY < SL0KM110.SY1UNPCS)
                                   /* if onhand qty LT 1 case*/
              SLWREC.SLWERRSW = "Y";
              SLWREC.XXXLOCID = "SP1A"; /* enter to accept, pa2 reject*/
              SLWREC.SLWMSGNO = 0278;
              SLWREC.SLWFTMSW = "N";
            else
              /* calculate remainder by dividing total onhand by unt/cs*/
              SL0KW01.SL0KWQTY = SL0KW01.SL0KWQTY % SL0KM110.SY1UNPCS;
              if (SL0KW01.SL0KWQTY > 0) /* if there is a remainder*/
                SLWREC.SLWERRSW = "Y";
                SLWREC.XXXLOCID = "SP1B";
                                   /* enter to accept, pa2 reject*/
                SLWREC.SLWMSGNO = 0278;
                SLWREC.SLWFTMSW = "N";
              end
            end
          else
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SP1C"; /* enter to accept, pa2 reject*/
            SLWREC.SLWMSGNO = 0286;
            SLWREC.SLWFTMSW = "N";
          end
          if (SLWREC.SLWERRSW == "Y")
            return;
          end
        end
      end
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KSP1

// data relational edits
Function SL0KSP2()
   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** cannot change more qty than what is in the location ****/
   /* ************************************************************/

  SLWIDX01 = SL0KW02.SL0KWNSZ;
  while (SLWIDX01 > 0)
    if (SL0KM210.SL0KMQTY[SLWIDX01] > SL0KW02.SL6ONHND[SLWIDX01])
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SP2A";
      SLWREC.SLWMSGNO = 0130; /* <--- qty must be < onhnd*/
      set SL0KM210.SL0KMQTY[SLWIDX01] cursor, bold;
    end
    SLWIDX01 = SLWIDX01 - 1;
  end

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** map total field must equal calculated adj. total    ****/
   /* ************************************************************/

  SL0KW02.SL0KWTOT = 0;
  SLWIDX01 = 1;
  while (SLWIDX01 <= 40)
    if (SL0KM210.SY4IDDSC[SLWIDX01] != "**")
      SL0KW02.SL0KWTOT = SL0KW02.SL0KWTOT + SL0KM210.SL0KMQTY[SLWIDX01];
    end
    SLWIDX01 = SLWIDX01 + 1;
  end

  if (SL0KW02.SL0KWTOT == SL0KM210.SL0KMTOT)
      /* ** NEXT SENTENCE ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SP2B";
    SLWREC.SLWMSGNO = 0112; /* <-- adj.s must equal total msg*/
    set SL0KM210.SL0KMTOT cursor, bold;
    return;
  end

   /* DLVRUSA STARTS - SAIRAM XIT/XIR*/
   /* Start add 8/21/00  SAP for Canada validate XIT/XIR*/
   /* IF SL0KM210.XWHCD EQ '42';        /* <=== Canada*/
   /* SET INFREC EMPTY;*/
   /* SL0KS-LOD2-INFREC;*/
   /* XSINS-XIT-XIR-VALD;*/
   /* IF INFREC.INF-RETURN-CODE GT 0;*/
   /* SL0KS-IN9060-ERRS;*/
   /* END;*/
  if (SL0KM110.XWHCD != "02")
    set VVIFTR01 empty;
    VVIFTR01.XIF-TRN-FLD-CD = "01";
    VVIFTR01.XIT-TRN-TYP-CD = SL0KM210.XITCD;
    VVIFTR01.XIR-TRN-RSN-CD = SL0KM210.XIRCD;
    SL0KS-TAREC-XIFTR();
    if (SLWREC.SLWERRSW == "Y")
      set SL0KM210.XITCD cursor, bold;
      set SL0KM210.XIRCD bold;
      return;
    end
  end
   /* End add 8/21/00  SAP for Canada validate XIT/XIR*/
   /* DLVRUSA ENDS   - SAIRAM XIT/XIR*/

   /* ************************************************************/
   /* Edit the new units per case field relative to quantity.*/
   /* ************************************************************/

  if (SL0KM210.XWHCD == "02" /* Greenland*/
   || SL0KM210.XWHCD == "04" /* or Memphis Footwear*/
   || SL0KM210.XWHCD == "07" /* or Wilsonville*/
   || SL0KM210.XWHCD == "51" /* or Memphis Apparel*/
   || SL0KM210.XWHCD == "25" /* or NSG*/
   || SL0KM210.XWHCD == "42") /* or Canada*/

    if (SL5REC.YLTCD == "06" /* Highrise location*/
     || SL5REC.YLTCD == "22") /* Handstack location*/

      /* NEXT SENTENCE*/

    else

      if (SL5REC.YLTCD == "11"
       || SL5REC.YLTCD == "12"
       || SL5REC.YLTCD == "13"
       || SL5REC.YLTCD == "14"
       || SL5REC.YLTCD == "16"
       || SL5REC.YLTCD == "88"
       || SL5REC.YLTCD == "19")

        if (SL0KM210.SL0KMUT2 != 0) /* Units/case not zero*/
          SLWREC.SLWERRSW = "Y"; /* Indicate error*/
          SLWREC.XXXLOCID = "SP2C"; /* Error location*/
          SLWREC.SLWMSGNO = 419; /* Units/case must be zero*/
          set SL0KM210.SL0KMUT2 cursor, bold; /* Highlight*/
        end

      else

        if (SL0KM210.SL0KMUT2 > 0) /* Units/case greater than zero*/

          SLWREC.SLWIDX01 = 1; /* Initialize index*/
          SL0KW02.SL0KWQT1 = SL0KW02.SL0KWNPQ; /* New product quantity*/

          while (SLWREC.SLWIDX01 <= SL0KW02.SL0KWNSZ) /* Until end of sizes*/
            SL0KW02.SL0KWQT1 = SL0KW02.SL0KWQT1 +             SL0KM210.SL0KMQTY[SLWIDX01]; /* Add size quantity*/
            SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1; /* Increment index*/
          end

          SL0KW02.SL0KWQT1 = SL0KW02.SL0KWQT1 % SL0KM210.SL0KMUT2;

          if (SL0KW02.SL0KWQT1 > 0) /* Remainder greater than zero*/
            SLWREC.SLWERRSW = "Y"; /* Indicate error*/
            SLWREC.XXXLOCID = "SP2D"; /* Error location*/
            SLWREC.SLWMSGNO = 421; /* Quantity not divisible*/
            set SL0KM210.SL0KMUT2 cursor, bold; /* Highlight*/
          end

        else

          SLWREC.SLWERRSW = "Y"; /* Indicate error*/
          SLWREC.XXXLOCID = "SP2E"; /* Error location*/
          SLWREC.SLWMSGNO = 420; /* Must be greater than zero*/
          set SL0KM210.SL0KMUT2 cursor, bold; /* Highlight*/

        end

      end

    end

  end

end // end SL0KSP2

// inquiry : sz xlate : 0
Function SL0KSPI()

   /* ************************************************************/
   /* *** obtain the desired size description/size id (no.)   ****/
   /* *** using the std module:  SY1190                       ****/
   /* *** code the following before this is executed:         ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* ***   note: or setup during init. & use a comment       ****/
   /* ***   SYPREC.SYPFC:   PC = all valid sizes              ****/
   /* ***                   IE = int. sz id to desc.          ****/
   /* ***                   EI = desc. to int. sz id          ****/
   /* ***   SYPREC.SYPCMPSW: Y = compressed (first blank or   ****/
   /* ***                        zero is end of data)         ****/
   /* ***                    N = not compressed (positional)  ****/
   /* *** code the action for the following return codes:     ****/
   /* *** note: check the SYPREC.SYPRC (NOT sqlcode)          ****/
   /* ***      0 = successful                                 ****/
   /* ***      9 = deadlock                                   ****/
   /* ***     10 = not found                                  ****/
   /* ***  other = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** call sy1120                                         ****/
   /* *** note: func & compress sw setup prior to this sgrp   ****/
   /* ************************************************************/

  call "SY1190" (SQLCA, SYPREC) {isNoRefresh = yes, isExternal = yes};

  if (SYPREC.SYPRC == 0)
    return;
  end

  if (SYPREC.SYPRC == 9)
    return;
  end

  if (SYPREC.SYPRC == 10)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSYPI0 ";
  TA1REC.TA1LOCAT[1] = "SY1120  ";
  TA1REC.TA1LOCAT[3] = SYPREC.SYPRCX;
  TA1REC.TA1LOCAT[4] = "SZ XLATE";
  TA1REC.TA1DBASE = "MULTIPLE";
  TA1REC.TA1TBLVU = "DB VIEWS";
  TA1REC.TA1TBLKE = SYPREC.SYPKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KSPI

// reset screen (clear)
Function SL0KSQ1()

   /* ************************************************************/
   /* *** "clear" map =  fld values, attributes & cursor      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0KM110 initial; /* resets entire screen*/

   /* ************************************************************/
   /* *** set map key fields*/
   /* ************************************************************/

  SL0KM110.XWHCD = SL0KW01.XWHCD;
  SL0KM110.IN5TRDCD = SL0KW01.IN5TRDCD;
  SL0KM110.IN5TRDOC = SL0KW01.IN5TRDOC;
  SL0KM110.IN5TRSUB = SL0KW01.IN5TRSUB;
  SL0KM110.XITCD = SL0KW01.XITCD;
  SL0KM110.IN5TRREF = SL0KW01.IN5TRREF;
  SL0KM110.XIRCD = SL0KW01.XIRCD;
  SL0KM110.XIFCD = SL0KW01.XIFCD;
  SL0KM110.XGPCD = SL0KW01.XGPCD;
  SL0KM110.SY1STNBR = SL0KW01.SY1STNBR;
  SL0KM110.SY2CLRID = SL0KW01.SY2CLRID;
  SL0KM110.XDMCD = SL0KW01.XDMCD;
  SL0KM110.XQACD = SL0KW01.XQACD;
  SL0KM110.PC2INSEG = SL0KW01.PC2INSEG;
  SL0KM110.XEGCD = SL0KW01.XEGCD;
  SL0KM110.XSLCD = SL0KW01.XSLCD;
  SL0KM110.XPGCD = SL0KW01.XPGCD;
  SL0KM110.XUMCD = SL0KW01.XUMCD;
  SL0KM110.XOWCD = SL0KW01.XOWCD;

  SL0KM110.SY1UNPCS = -1; /* intialize unit per carton*/
  SL0KM110.PC3PONBR = -1; /* initialize po number*/
   /* DLVRUSA STARTS - SAIRAM SAPPO*/
  SL0KM110.PC-SAP-PO-NBR = "*"; /* initialize sap po number*/
   /* DLVRUSA ENDS   - SAIRAM SAPPO*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0KM110.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0KM110.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0KM110.XXXTITLE = SLWREC.XXXTITLE;
  SL0KM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize default field values                     ****/
   /* ************************************************************/

  SL0KM110.PC4ORTYP = "*";
  SL0KM110.SL0KWPID = "*";

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set SL0KW01 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KSQ1

// reset screen (clear)
Function SL0KSQ2()

   /* ************************************************************/
   /* *** "clear" map =  fld values, attributes & cursor      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0KM210 initial; /* resets entire screen*/

   /* ************************************************************/
   /* *** set map key fields*/
   /* ************************************************************/

  SL0KM210.XWHCD = SL0KW02.XWHCD;
  SL0KM210.IN5TRDCD = SL0KW02.IN5TRDCD;
  SL0KM210.IN5TRDOC = SL0KW02.IN5TRDOC;
  SL0KM210.IN5TRSUB = SL0KW02.IN5TRSUB;
  SL0KM210.XITCD = SL0KW02.XITCD;
  SL0KM210.IN5TRREF = SL0KW02.IN5TRREF;
  SL0KM210.XIRCD = SL0KW02.XIRCD;
  SL0KM210.XGPCD = SL0KW02.XGPCD;
  SL0KM210.SY1STNBR = SL0KW02.SY1STNBR;
  SL0KM210.SY2CLRID = SL0KW02.SY2CLRID;
  SL0KM210.XDMCD = SL0KW02.XDMCD;
  SL0KM210.XQACD = SL0KW02.XQACD;
  SL0KM210.PC2INSEG = SL0KW02.PC2INSEG;
  SL0KM210.XEGCD = SL0KW02.XEGCD;
  SL0KM210.XSLCD = SL0KW02.XSLCD;
  SL0KM210.XPGCD = SL0KW02.XPGCD;
  SL0KM210.XUMCD = SL0KW02.XUMCD;
  SL0KM210.XOWCD = SL0KW02.XOWCD;

  SL0KM210.SL0KWGPC = SL0KW02.SL0KWGPC;
  SL0KM210.SL0KWSTY = SL0KW02.SL0KWSTY;
  SL0KM210.SL0KWCLR = SL0KW02.SL0KWCLR;
  SL0KM210.SL0KWDIM = SL0KW02.SL0KWDIM;
  SL0KM210.SL0KWQLT = SL0KW02.SL0KWQLT;
  SL0KM210.SL0KWISG = SL0KW02.SL0KWISG;
  SL0KM210.SL0KWXEG = SL0KW02.SL0KWXEG;
  SL0KM210.SL0KWSLC = SL0KW02.SL0KWSLC;
  SL0KM210.SL0KWPKG = SL0KW02.SL0KWPKG;
  SL0KM210.SL0KWUOM = SL0KW02.SL0KWUOM;
  SL0KM210.SL0KWOWN = SL0KW02.SL0KWOWN;

  SL0KM210.SL0KMUT1 = -1; /* initialize units per carton 1*/
  SL0KM210.SL0KMUT2 = -1; /* initialize units per carton 2*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0KM210.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0KM210.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0KM210.XXXTITLE = SLWREC.XXXTITLE;
  SL0KM210.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize default field values                     ****/
   /* ************************************************************/

  SL0KM210.IN5TRDCD = "A";

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set SL0KW02 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KSQ2

// reset screen (clear)
Function SL0KSQ3()

   /* ************************************************************/
   /* *** "clear" map =  fld values, attributes & cursor      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0KM310 initial; /* resets entire screen*/

   /* ************************************************************/
   /* *** use current ws values in the corresponding map flds ****/
   /* *** plus any default values desired on the cleared map  ****/
   /* ************************************************************/

  SL0KM310.XWHCD = SL0KW03.XWHCD;
  SL0KM310.IN5TRDCD = SL0KW03.IN5TRDCD;
  SL0KM310.IN5TRDOC = SL0KW03.IN5TRDOC;
  SL0KM310.IN5TRSUB = SL0KW03.IN5TRSUB;
  SL0KM310.XITCD = SL0KW03.XITCD;
  SL0KM310.IN5TRREF = SL0KW03.IN5TRREF;
  SL0KM310.XIRCD = SL0KW03.XIRCD;
  SL0KM310.XGPCD = SL0KW03.XGPCD;
  SL0KM310.SY1STNBR = SL0KW03.SY1STNBR;
  SL0KM310.SY2CLRID = SL0KW03.SY2CLRID;
  SL0KM310.XDMCD = SL0KW03.XDMCD;
  SL0KM310.XQACD = SL0KW03.XQACD;
  SL0KM310.PC2INSEG = SL0KW03.PC2INSEG;
  SL0KM310.XEGCD = SL0KW03.XEGCD;
  SL0KM310.XSLCD = SL0KW03.XSLCD;
  SL0KM310.XPGCD = SL0KW03.XPGCD;
  SL0KM310.XUMCD = SL0KW03.XUMCD;
  SL0KM310.XOWCD = SL0KW03.XOWCD;

  SL0KM310.SL0KWGPC = SL0KW03.SL0KWGPC;
  SL0KM310.SL0KWSTY = SL0KW03.SL0KWSTY;
  SL0KM310.SL0KWCLR = SL0KW03.SL0KWCLR;
  SL0KM310.SL0KWDIM = SL0KW03.SL0KWDIM;
  SL0KM310.SL0KWQLT = SL0KW03.SL0KWQLT;
  SL0KM310.SL0KWISG = SL0KW03.SL0KWISG;
  SL0KM310.SL0KWXEG = SL0KW03.SL0KWXEG;
  SL0KM310.SL0KWSLC = SL0KW03.SL0KWSLC;
  SL0KM310.SL0KWPKG = SL0KW03.SL0KWPKG;
  SL0KM310.SL0KWUOM = SL0KW03.SL0KWUOM;
  SL0KM310.SL0KWOWN = SL0KW03.SL0KWOWN;

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0KM310.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0KM310.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0KM310.XXXTITLE = SLWREC.XXXTITLE;
  SL0KM310.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  SLWREC.SLWFTMSW = "Y";

  set SL0KW03 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KSQ3

// data entry edits
Function SL0KSR1()

   /* ************************************************************/
   /* *** reset adjustment qty fields to defined              ****/
   /* ************************************************************/

  SLWIDX03 = 1;
  while (SLWIDX03 <= SL0KW01.SL0KWNSZ)
    set SL0KM110.SL0KMADJ[SLWIDX03] initialAttributes;
    SLWIDX03 = SLWIDX03 + 1;
  end

   /* ************************************************************/
   /* *** check for missing data fields                       ****/
   /* ************************************************************/

  SL0KSN1(); /* <=== data missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no missing fields: edit individual data fields      ****/
   /* ************************************************************/

  SL0KSO1(); /* <=== data field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational data field edits        ****/
   /* ************************************************************/

  SL0KSP1(); /* <=== data relational edits*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KSR1

// data entry edits
Function SL0KSR2()
   /* ************************************************************/
   /* *** reset adjustment qty fields to defined              ****/
   /* ************************************************************/

  if (SL5REC.SL5MPDFL == "Y") /* Multiple SKU location*/

    SLWIDX03 = 1;

    while (SLWIDX03 <= SL0KW02.SL0KWNSZ)

      if (SL0KW02.SL0KWNTF == "N") /* Adjust onhand quantities*/

        if (SL0KW02.SL6ONHND[SLWIDX03] != 0) /* Quantity not zero*/
          set SL0KM210.SL0KMQTY[SLWIDX03] initialAttributes;
        end

      else

        if (SL0KW02.SL0KWSNT[SLWIDX03] != 0) /* Quantity not zero*/
          set SL0KM210.SL0KMQTY[SLWIDX03] initialAttributes;
        end

      end

      SLWIDX03 = SLWIDX03 + 1;

    end

  end

   /* ************************************************************/
   /* *** check for missing data fields                       ****/
   /* ************************************************************/

  SL0KSN2(); /* <=== data missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no missing fields: edit individual data fields      ****/
   /* ************************************************************/

  SL0KSO2(); /* <=== data field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational data field edits        ****/
   /* ************************************************************/

  SL0KSP2(); /* <=== data relational edits*/

end // end SL0KSR2

// Reset SL0KW04 fields
Function SL0KSRP()

   /* ************************************************************/
   /* *** reset SL0KW04 fields                                ****/
   /* ************************************************************/

  set SL0KW04 empty;

  SL0KW04.IN5TRDCD = "A"; /* reset hold doc part I*/
  SL0KW04.IN5TRDOC = 0; /* reset hold doc part II*/
  SL0KW04.IN5TRSUB = 0; /* reset hold doc part III*/
  SL0KW04.XITCD = "  "; /* reset hold tran type*/
  SL0KW04.XIRCD = "   "; /* reset hold reason code*/
  SL0KW04.XGPCD = "  "; /* reset hold gpc*/
  SL0KW04.SY1STNBR = "      "; /* reset hold style*/
  SL0KW04.SY2CLRID = "00"; /* reset hold color*/
  SL0KW04.XDMCD = "00"; /* reset hold dim*/
  SL0KW04.XQACD = "01"; /* reset hold qual*/
  SL0KW04.PC2INSEG = "000"; /* reset hold iseg*/
  SL0KW04.XEGCD = "000"; /* reset hold edif*/
  SL0KW04.XSLCD = "000"; /* reset hold slc*/
  SL0KW04.XPGCD = "00"; /* reset hold pg*/
  SL0KW04.XUMCD = "  "; /* reset hold uom*/
  SL0KW04.XOWCD = "00"; /* reset hold own group*/
  SL0KW04.XARCD = "  "; /* reset hold area*/
  SL0KW04.SL4ZONE = "  "; /* reset hold zone*/
  SL0KW04.SL5LOCTN = "      "; /* reset hold location*/
  SL0KW04.SY1UNPCS = -1; /* reset hold u/c*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KSRP

// reset screen (empty)
Function SL0KST1()
   /* ************************************************************/
   /* *** "empty" map =  fld values only                      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  set SL0KM110 initial; /* resets entire screen*/

  SL0KSG1(); /* <=== setup map key fields*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0KM110.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0KM110.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0KM110.XXXTITLE = SLWREC.XXXTITLE;
  SL0KM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set SL0KW01 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** set size/qty fields dark                            ****/
   /* ************************************************************/

  SLWIDX03 = 1;
  while (SLWIDX03 <= 36)
    set SL0KM110.SY4IDDSC[SLWIDX03] skip, invisible;
    set SL0KM110.SL0KMCQT[SLWIDX03] skip, invisible;
    set SL0KM110.SL0KMADJ[SLWIDX03] skip, invisible;
    SLWIDX03 = SLWIDX03 + 1;
  end

  set SL0KM110.SL0KMTOT skip, invisible;

end // end SL0KST1

// reset screen (empty)
Function SL0KST2()
   /* ************************************************************/
   /* *** "empty" map =  fld values only                      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  set SL0KM210 initial; /* resets entire screen*/

  SL0KSG2(); /* <=== setup map key fields*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0KM210.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0KM210.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0KM210.XXXTITLE = SLWREC.XXXTITLE;
  SL0KM210.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set SL0KW02 empty; /* appl. working storage area*/

end // end SL0KST2

// reset screen (empty)
Function SL0KST3()

   /* ************************************************************/
   /* *** "empty" map =  fld values only                      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0KM310 empty; /* resets entire screen*/

  SL0KSG3(); /* <=== setup map key fields*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0KM310.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0KM310.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0KM310.XXXTITLE = SLWREC.XXXTITLE;
  SL0KM310.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  SLWREC.SLWFTMSW = "Y";

  set SL0KW03 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KST3

// update database
Function SL0KSU1()

   /* ************************************************************/
   /* *** use the saved keys, obtained database data and the  ****/
   /* *** input changes (including new data) to update the    ****/
   /* *** specified database record (or add if new record)    ****/
   /* ************************************************************/

  if (SL0KM110.XIFCD != "02" /* <=== not pick reserve*/
   && SL0KW01.SL0KW-CH-STY-FL != "Y") /* <=== and not Cole Haan*/
     /* DLVRUSA STARTS - SAIRAM XIT/XIR*/
     /* Start add 4/24/00  SAP for Canada validate XIT/XIR*/
     /* IF SL0KM110.XWHCD EQ '42';     /* <=== Canada*/
     /* SET INFREC EMPTY;*/
     /* SL0KS-LOD1-INFREC;*/
     /* XSINS-XIT-XIR-VALD;*/
     /* IF INFREC.INF-RETURN-CODE GT 0;*/
     /* SL0KS-IN9060-ERRS;*/
     /* END;*/
     /* End add 4/24/00  SAP for Canada validate XIT/XIR*/
    if (SL0KM110.XWHCD != "02")
      set VVIFTR01 empty;
      VVIFTR01.XIF-TRN-FLD-CD = SL0KM110.XIFCD;
      VVIFTR01.XIT-TRN-TYP-CD = SL0KM110.XITCD;
      VVIFTR01.XIR-TRN-RSN-CD = SL0KM110.XIRCD;
      SL0KS-TAREC-XIFTR();
      if (SLWREC.SLWERRSW == "Y")
        set SL0KM110.XIFCD cursor, bold;
        set SL0KM110.XITCD bold;
        set SL0KM110.XIRCD bold;
        return;
      end
       /* DLVRUSA ENDS   - SAIRAM XIT/XIR*/
       /* Divestiture starts*/
      /*  ELSE;*/
      /*   SL0KS1H();                   /* <=== inventory update*/
       /* Divestiture Ends*/
    end
  end

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SLWIDX01 = 1;
  while (SLWIDX01 <= SL0KW01.SL0KWNSZ
   && SLWREC.SLWERRSW != "Y")
    SL0KS1F(); /* <=== product/location update*/
    SLWIDX01 = SLWIDX01 + 1;
  end

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  if (SL0KM110.XIFCD == "04" /* <=== setaside*/
   && SL0KW01.SL0KW-CH-STY-FL != "Y") /* <=== and not Cole Haan*/
    SL0KS1G(); /* <=== SETASIDE UPDATE*/
  end

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0KS1I(); /* <===  write product/location audit*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* DLVRUSA CHANGE STARTS - SAIRAM SAPIA*/

  if (SL0KM110.XWHCD != "02") /* <===  not colehaan*/
    SL0KS-MOVE1-SAPIA(); /* <===  write SAP inv adj records*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
  end

   /* DLVRUSA CHANGE ENDS - SAIRAM SAPIA*/

  SL0KS9A(); /* <===  update location status*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KSU1

// update database
Function SL0KSU2()

   /* ************************************************************/
   /* *** use the saved keys, obtained database data and the  ****/
   /* *** input changes (including new data) to update the    ****/
   /* *** specified database record (or add if new record)    ****/
   /* ************************************************************/

  SL0KS28();
                                   /* <=== check if inv needs to be updated*/

  if (SL0KW21.SL0KWUIN == "Y" /* <=== inv update flag*/
   && SL0KW02.SL0KW-CH-STY-FL != "Y") /* <=== and not Cole Haan style*/
     /* DLVRUSA starts - SAIRAM XIT/XIR*/
     /* Start add 4/24/00  SAP for Canada validate XIT/XIR*/
     /* IF SL0KM210.XWHCD EQ '42';     /* <=== Canada*/
     /* SET INFREC EMPTY;*/
     /* SL0KS-LOD2-INFREC;*/
     /* XSINS-XIT-XIR-VALD;*/
     /* IF INFREC.INF-RETURN-CODE GT 0;*/
     /* SL0KS-IN9060-ERRS;*/
     /* END;*/
     /* End add 4/24/00  SAP for Canada validate XIT/XIR*/
    if (SL0KM110.XWHCD != "02")
      set VVIFTR01 empty;
      VVIFTR01.XIF-TRN-FLD-CD = "01";
      VVIFTR01.XIT-TRN-TYP-CD = SL0KM210.XITCD;
      VVIFTR01.XIR-TRN-RSN-CD = SL0KM210.XIRCD;
      SL0KS-TAREC-XIFTR();
      if (SLWREC.SLWERRSW == "Y")
        set SL0KM110.XITCD cursor, bold;
        set SL0KM110.XIRCD bold;
        return;
      end
       /* DLVRUSA ENDS   - SAIRAM XIT/XIR*/
       /* Divestiture Starts*/
      /* ELSE;*/
      /* SL0KS2M();                   /* <=== inventory update*/
       /* Divestiture Ends*/
    end
  end

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SLWIDX01 = 1;
  while (SLWIDX01 <= SL0KW02.SL0KWNSZ
   && SLWREC.SLWERRSW != "Y")
    SL0KS2L(); /* <=== product/location update*/
    SLWIDX01 = SLWIDX01 + 1;
  end

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0KS2N(); /* <===  write prd/loc audit (curr)*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* DLVRUSA CHANGE STARTS - SAIRAM SAPIA*/

  if (SL0KM110.XWHCD != "02") /* <===  not colehaan*/
    SL0KS-MOVE2-SAPIA(); /* <===  write SAP inv adj records(curr)*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
  end

   /* DLVRUSA CHANGE ENDS - SAIRAM SAPIA*/

  SL0KS21(); /* <===  write prd/loc audit (new)*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* DLVRUSA CHANGE STARTS - SAIRAM SAPIA*/

  if (SL0KM110.XWHCD != "02") /* <===  not colehaan*/
    SL0KS-MOVE3-SAPIA(); /* <===  write SAP inv adj records(new)*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
  end

   /* DLVRUSA CHANGE ENDS - SAIRAM SAPIA*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KSU2

// update database
Function SL0KSU3()

   /* ************************************************************/
   /* *** use the saved keys, obtained database data and the  ****/
   /* *** input changes (including new data) to update the    ****/
   /* *** specified database record (or add if new record)    ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** clear the inv ws qty table                          ****/
   /* ************************************************************/

  SLWIDX01 = 1;
  while (SLWIDX01 <= 40)
    SL0KW31.SL6ONHND[SLWIDX01] = 0;
    SLWIDX01 = SLWIDX01 + 1;
  end

  SLWIDX01 = 1;
  while (SLWIDX01 <= 36
   && SLWREC.SLWERRSW != "Y")
    if (SL0KM310.XARCD[SLWIDX01] != " ")
      if (SL0KM310.SL2CASE[SLWIDX01] == "*       "
       || SL0KM310.SL2CASE[SLWIDX01] == "       *"
       || SL0KM310.SL2CASE[SLWIDX01] == "********")
        SL0KS32(); /* <=== update prd/loc for each case in*/
                                   /* loc*/
        SL0KSXD(); /* <=== close scan prd/loc*/
      else
        SL0KS7J(); /* <=== check case for **/
        SL0KS3J(); /* <=== update prd/loc for a loc*/
      end
    end
    SLWIDX01 = SLWIDX01 + 1;
  end

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** inventory update                                    ****/
   /* ************************************************************/

  SL0KS37();
                                   /* <=== check if inv needs to be updated*/

  if (SL0KW31.SL0KWUIN == "Y" /* <=== inv update flag*/
   && SL0KW03.SL0KW-CH-STY-FL != "Y") /* <=== Cole Haan style flag*/
    /* DLVRUSA STARTS - SAIRAM XIT/XIR*/
    /* Start add 4/24/00  SAP for Canada validate XIT/XIR*/
    /* IF SL0KM110.XWHCD EQ '42';        /* <=== Canada*/
    /* SET INFREC EMPTY;*/
    /* SL0KS-LOD4-INFREC;*/
    /* XSINS-XIT-XIR-VALD;*/
    /* IF INFREC.INF-RETURN-CODE GT 0;*/
    /* SL0KS-IN9060-ERRS;*/
    /* END;*/
    /* End add 4/24/00  SAP for Canada validate XIT/XIR*/
    if (SL0KM110.XWHCD != "02")
      set VVIFTR01 empty;
      VVIFTR01.XIF-TRN-FLD-CD = "01";
      VVIFTR01.XIT-TRN-TYP-CD = SL0KM310.XITCD;
      VVIFTR01.XIR-TRN-RSN-CD = SL0KM310.XIRCD;
      SL0KS-TAREC-XIFTR();
      if (SLWREC.SLWERRSW == "Y")
        set SL0KM310.XITCD cursor, bold;
        set SL0KM310.XIRCD bold;
        return;
      end
      /* DLVRUSA ENDS   - SAIRAM XIT/XIR*/
    /* Divestiture Starts*/
  /*  ELSE;*/
  /*    SL0KS3M();                   /* <=== inventory update*/
     /* Divestiture Ends*/
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KSU3

// validate area/zone
Function SL0KSXA()

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KSXA ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL4I0(); /* <=== std area/zone inquiry*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SXAA";
      SLWREC.SLWMSGNO = 0012; /* <--- not on db msg*/
      set SL0KM110.SL4ZONE cursor, bold;
      set SL0KM110.XARCD cursor, bold;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWSKYSW = "N";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SXAB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SXAC";
      SLWREC.SLWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "SXAE";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    /* SL02ST1                       ;  <=== clear scrn (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KSXA

// find location
Function SL0KSXB()

   /* ************************************************************/
   /* ***         find locaiton                               ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KSXB ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL5I0(); /* <=== std location inquiry*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SXBA";
      SLWREC.SLWMSGNO = 0012; /* <--- not on db msg*/
      set SL0KM110.SL5LOCTN cursor, bold;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWSKYSW = "N";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SXBB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SXBC";
      SLWREC.SLWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "SXBE";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    /* SL02ST1                       ;  <=== clear scrn (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KSXB

// load syprec with size desc
Function SL0KSXC()

   /* ************************************************************/
   /* *** this routine loads the syprec with the size         ****/
   /* *** descriptions.                                       ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KSXC ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

   /* *** obtain valid size descriptions ****/

  SYPREC.SYPFC = "PC";
  SYPREC.SYPCMPSW = "N";
  SYPREC.XQACD = "**";

  SL0KSPI(); /* <=== load syprec with size desc*/

  if (SYPREC.SYPRC == 0) /* <=== product desc loaded*/
    return;
  end

  if (SYPREC.SYPRC == 10) /* <=== product not found*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SXCA";
    SLWREC.SLWMSGNO = 0012; /* <--- not on db msg*/
    set SL0KM110.SY1STNBR cursor, bold;
    return;
  end

  if (SYPREC.SYPRC == 9) /* <=== deadlock*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SXCB";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  end

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "SXCC";
  SLWREC.SLWMSGNO = 0001; /* <--- contact pgm'g*/
  return;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KSXC

// close scan prd/loc 5
Function SL0KSXD()

   /* ************************************************************/
   /* *** close scan for product location 5                   ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KSXD ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

   /* DLVRUSA STARTS - SAIRAM VSYLOC02*/
   /* XSSL6C5;                       /* <=== close scan prd/loc*/
  XSSLS-C5-VSYLOC02(); /* <=== close scan prd/loc*/
   /* DLVRUSA ENDS   - SAIRAM VSYLOC02*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* ** next sentence*/
  else
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "SXDA";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    /* SL02ST1                       ;  <=== clear scrn (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KSXD

// close scan prd/asg 7
Function SL0KSXE()

   /* ************************************************************/
   /* *** close scan for product assignment 7                 ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** setup application specific TA1REC fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0KSXE ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  XSSL7C7(); /* <=== close scan prd/asg*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* ** next sentence*/
  else
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "SXEA";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    /* SL02ST1                       ;  <=== clear scrn (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KSXE

// CAITEM processing
Function SL0KSY0()

   /* ************************************************************/
   /* *** if entered, use CAITEM data by first moving it to   ****/
   /* *** a ws field to make use of it with "redefines"       ****/
   /* *** note: CAITEM = character data as passed             ****/
   /* ************************************************************/

  SLWREC.CAITEM = COMMAREA.CAITEM;

  if (SLWREC.SLWCASNO > " ")
    SL0KM010.XMSLMSNO = SLWREC.SLWCASNO;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0KSY0

// Sel : To validate the XIT/XIR
Function XSFTR-SEL-VVIFTR01()

   /* ************************************************************/
   /* *** Select unique row to:  validate the XIT/XIR combo   ****/
   /* *** using the std module:  VVIFTR01                     ****/
   /* *** note: use VVIFTR01 to pass function & date ranges   ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -803 = adding duplicate row                       ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** insert row                                          ****/
   /* *** note: does NOT try to prevent duplicates            ****/
   /* ************************************************************/

  call "VVIFTR01" ("S ", SQLCA, VVIFTR01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSXIFTR ";
  TA1REC.TA1LOCAT[1] = "VVIFTR01";
  TA1REC.TA1LOCAT[3] = "SEL     ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VVIFTR01";
  TA1REC.TA1TBLKE = VVIFTR01.VVIFTR01-GROUP;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSFTR-SEL-VVIFTR01
// add : inv. setaside itm : 0
Function XSINBA0()

   /* ************************************************************/
   /* *** add unique row to:  inv. setaside itm               ****/
   /* *** using the std module:  IO0950                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -803 = adding duplicate row                       ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* *** note: 0 return code means record already exists     ****/
   /* ***       = setup -803 return code                      ****/
   /* ************************************************************/

  XSINBI0(); /* <=== select unique row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    SQLCA.VAGen_SQLCODE = -803;
    return;
  end

  if (SQLCA.VAGen_SQLCODE < 0)
    return;
  end

   /* ************************************************************/
   /* *** insert row (previous +100 = doesn't exist)          ****/
   /* *** note: IO process initializes zzzchgct to 0          ****/
   /* ************************************************************/

  INBREC.ZZZSDT = X2CREC.X2CCURDT;
  INBREC.ZZZCHGDT = X2CREC.X2CCURDT;
  INBREC.ZZZSTM = X3CREC.X3CCURST;
  INBREC.ZZZCHGTM = X3CREC.X3CCURST;

  call "IO0950" ("A ", SQLCA, INBREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSINBA0 ";
  TA1REC.TA1LOCAT[1] = "IO0950  ";
  TA1REC.TA1LOCAT[3] = "ADD     ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DINVNT  ";
  TA1REC.TA1TBLVU = "VASITM01";
  TA1REC.TA1TBLKE = INBREC.INBKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSINBA0

// inquiry:inv. setaside itm:0
Function XSINBI0()

   /* ************************************************************/
   /* *** select unique row from:  inv. setaside itm          ****/
   /* *** using the std module:  IO0950                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -811 = duplicates found                           ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* ************************************************************/

  call "IO0950" ("S ", SQLCA, INBREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -811)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSINBI0 ";
  TA1REC.TA1LOCAT[1] = "IO0950  ";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DINVNT  ";
  TA1REC.TA1TBLVU = "VASITM01";
  TA1REC.TA1TBLKE = INBREC.INBKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSINBI0

// replace :inv. setaside itm : 0
Function XSINBR0()

   /* ************************************************************/
   /* *** replace unique row in:  inv. setaside itm           ****/
   /* *** using the std module:  IO0950                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = concurrent update - re:                    ****/
   /* ***          deleted since last read (rec blanked out)  ****/
   /* ***          updated since last read (new data in rec)  ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** replace row                                         ****/
   /* *** note: IO process increments record zzzchgct by +1   ****/
   /* ***       but ID's row to update by the old zzzchgct    ****/
   /* ************************************************************/

  INBREC.ZZZCHGDT = X2CREC.X2CCURDT;
  INBREC.ZZZCHGTM = X3CREC.X3CCURST;

  call "IO0950" ("U ", SQLCA, INBREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
     /* ************************************************************/
     /* *** select the original row without a change count      ****/
     /* *** note: select unique does NOT use zzzchgct           ****/
     /* *** note: this puts current version of data in record   ****/
     /* ***       or blank out record layout = deleted          ****/
     /* ************************************************************/
    XSINBI0(); /* <=== select unique row*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == +100)
      INBREC.INBDATA = " ";
      return;
    end
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSINBR0 ";
  TA1REC.TA1LOCAT[1] = "IO0950  ";
  TA1REC.TA1LOCAT[3] = "REPLACE ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DINVNT  ";
  TA1REC.TA1TBLVU = "VASITM01";
  TA1REC.TA1TBLKE = INBREC.INBKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSINBR0

// update : inv. setaside itm : 1
Function XSINBU1()

   /* ************************************************************/
   /* *** get unique row for update of:  inv. setaside itm    ****/
   /* *** using the std module:  IO0950                       ****/
   /* *** note: IO process DOES move data to record           ****/
   /* ***       therefore, at this time (w/IO modules)        ****/
   /* ***       this will execute the std select unique sgrp  ****/
   /* ***       and                                           ****/
   /* ***       this sgrp should be used/executed so that     ****/
   /* ***       future conversion to native CSP DB2 will      ****/
   /* ***       only have to change/add code in this sgrp     ****/
   /* ***       and regenerate all applications               ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found (does not use zzzchgct)          ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

  XSINBI0(); /* <=== std select unique*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSINBU1

// add : SAP inv audit row : 0
Function XSSIA-ADD-VSAPIA01()

   /* ************************************************************/
   /* *** add unique row to:  SAP Inventory adjustment table  ****/
   /* *** using the std module:  VSAPIA01                     ****/
   /* *** note: use VSAPIA01 to pass function & date ranges   ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -803 = adding duplicate row                       ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** insert row                                          ****/
   /* *** note: does NOT try to prevent duplicates            ****/
   /* ************************************************************/

  VSAPIA01.SL-SY-LOC-AUD-USER = COMMAREA.CAUSERID;
  VSAPIA01.SL-SY-LOC-AUD-DT = X2CREC.X2CCURDT;
  VSAPIA01.IN-AUD-TRN-HHMMSS = X3CREC.X3CCURTM;
  VSAPIA01.XXX-STAT = "U";
  VSAPIA01.XXX-USER-ID = "SL0K";
  VSAPIA01.ZZ-SDT = X2CREC.X2CCURDT;
  VSAPIA01.ZZ-SETUP-HHMMSS = X3CREC.X3CCURTM;
  VSAPIA01.ZZ-CHNG-DT = X2CREC.X2CCURDT;
  VSAPIA01.ZZ-CHNG-HHMM = X3CREC.X3CCURST;
  VSAPIA01.ZZ-CHNG-CNT = 0;

  call "VSAPIA01" ("A ", SQLCA, VSAPIA01) {isNoRefresh = yes, isExternal = yes}; /* insert vsapia01 rec*/

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSSIAA0 ";
  TA1REC.TA1LOCAT[1] = "VSAPIA01";
  TA1REC.TA1LOCAT[3] = "ADD     ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSAPIA01";
  TA1REC.TA1TBLKE = VSAPIA01.VSAPIA01-RECORD;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSIA-ADD-VSAPIA01

// close : w.o. 'l' hdr : 6
Function XSSL8C6()

   /* ************************************************************/
   /* *** close select set of:  w.o. 'l' hdr                  ****/
   /* *** using the std module:  IO1510                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "C6";

  call "IO1510" (SLVREC, SQLCA, SL8REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSL8C6 ";
  TA1REC.TA1LOCAT[1] = "IO1510  ";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VWOLHD01";
  TA1REC.TA1TBLKE = SL8REC.SL8KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL8C6

// fetch : w.o. 'l' hdr : 6
Function XSSL8F6()

   /* ************************************************************/
   /* *** fetch next row from:  w.o. 'l' hdr                  ****/
   /* *** using the std module:  IO1510                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ***       but w/these io mods the sgrp will close       ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "N6";

  call "IO1510" (SLVREC, SQLCA, SL8REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    XSSL8C6(); /* <=== std close cursor*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSL8F6 ";
  TA1REC.TA1LOCAT[1] = "IO1510  ";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VWOLHD01";
  TA1REC.TA1TBLKE = SL8REC.SL8KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL8F6

// setinq : w.o. 'l' hdr : 6
Function XSSL8S6()

   /* ************************************************************/
   /* *** select set of rows from:  w.o. 'l' hdr              ****/
   /* *** using the std module:  IO1510                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique field values for:            ****/
   /* ***   xwhcd                                             ****/
   /* ***   from xarcd                                        ****/
   /* ***   from sl4zone                                      ****/
   /* ***   from sl6loctn                                     ****/
   /* ***   xgpcd                                             ****/
   /* ***   sy1stnbr                                          ****/
   /* ***   sy2clrid                                          ****/
   /* ***   xdmcd                                             ****/
   /* ***   xqacd                                             ****/
   /* ***   xsdcd                                             ****/
   /* ***   xsacd                                             ****/
   /* ***   xpgcd                                             ****/
   /* ***   xumcd                                             ****/
   /* ***   xowcd                                             ****/
   /* ***   xslcd                                             ****/
   /* *** the following may be used with a wild card (*):     ****/
   /* ***   sl5loctn                                          ****/
   /* ***   ywtcd                                             ****/
   /* ***   xxxstat                                           ****/
   /* *** the following must have a range passed:             ****/
   /* ***   zzzsdt                                            ****/
   /* *** the order by for this select set is:                ****/
   /* ***   xwhcd                                             ****/
   /* ***   from xarcd                                        ****/
   /* ***   from sl4zone                                      ****/
   /* ***   from sl6loctn                                     ****/
   /* ***   xgpcd                                             ****/
   /* ***   sy1stnbr                                          ****/
   /* ***   sy2clrid                                          ****/
   /* ***   xdmcd                                             ****/
   /* ***   xqacd                                             ****/
   /* ***   xsdcd                                             ****/
   /* ***   xsacd                                             ****/
   /* ***   xpgcd                                             ****/
   /* ***   xumcd                                             ****/
   /* ***   xowcd                                             ****/
   /* ***   xslcd                                             ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "S6";

  call "IO1510" (SLVREC, SQLCA, SL8REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "XSSL8S6 ";
    TA1REC.TA1LOCAT[1] = "IO1510  ";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VWOLHD01";
    TA1REC.TA1TBLKE = SL8REC.SL8KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* *** note: fetch handles return code correctly           ****/
   /* ************************************************************/

  XSSL8F6(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSL8S6

// add : sl audit row : 0
Function XSSLA-ADD-VSLAUD02()

   /* ************************************************************/
   /* *** add unique row to:  stock locate audit              ****/
   /* *** using the std module:  VSLAUD02                     ****/
   /* *** note: use VSLAUD02 to pass function & date ranges   ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -803 = adding duplicate row                       ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** insert row                                          ****/
   /* *** note: does NOT try to prevent duplicates            ****/
   /* ************************************************************/

  VSLAUD02.SLATRDTE = X2CREC.X2CCURDT;
  VSLAUD02.ZZZSDT = X2CREC.X2CCURDT;
  VSLAUD02.ZZHHMMSS = X3CREC.X3CCURTM;
  VSLAUD02.SLATRBY = COMMAREA.CAUSERID;

  SLVREC.SLVFNC = "A ";

  call "VSLAUD02" (SLVREC, SQLCA, VSLAUD02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSSLAA0 ";
  TA1REC.TA1LOCAT[1] = "VSLAUD02";
  TA1REC.TA1LOCAT[3] = "ADD     ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSLAUD02";
  TA1REC.TA1TBLKE = VSLAUD02.VSLAUD02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSLA-ADD-VSLAUD02

// close : prod location : c7
Function XSSLS-C7-VSYLOC02()

   /* ************************************************************/
   /* *** close select set of:  product location table        ****/
   /* *** using the std module:  VSYLOC02                     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  call "VSYLOC02" ("C7", SQLCA, VSYLOC02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSLOCC7";
  TA1REC.TA1LOCAT[1] = "VSYLOC02";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYLOC02";
  TA1REC.TA1TBLKE = VSYLOC02.VSYLOC02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSLS-C7-VSYLOC02

// fetch : prod location : n7
Function XSSLS-N7-VSYLOC02()

   /* ************************************************************/
   /* *** fetch next row from:  product location              ****/
   /* *** using the std module:  VSYLOC02                     ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ***       but w/these io mods the sgrp will close       ****/
   /* ************************************************************/

  call "VSYLOC02" ("N7", SQLCA, VSYLOC02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    XSSLS-C7-VSYLOC02(); /* <=== std close cursor*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSLOCN7";
  TA1REC.TA1LOCAT[1] = "VSYLOC02";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSYLOC02";
  TA1REC.TA1TBLKE = VSYLOC02.VSYLOC02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSLS-N7-VSYLOC02

// select : prod location : s7
Function XSSLS-S7-VSYLOC02()

   /* ************************************************************/
   /* *** select set of rows from:  product/location          ****/
   /* *** using the std module:  VSYLOC02                     ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique field values for:            ****/
   /* ***   xwhcd                                             ****/
   /* ***   xarcd                                             ****/
   /* ***   sl2zone                                           ****/
   /* ***   sl4loctn                                          ****/
   /* *** the following may be used with a wild card (*):     ****/
   /* ***   xgpcd                                             ****/
   /* ***   sy1stnbr                                          ****/
   /* ***   sy2clrid                                          ****/
   /* ***   xdmcd                                             ****/
   /* ***   xqacd                                             ****/
   /* ***   xsdcd                                             ****/
   /* ***   xsacd                                             ****/
   /* ***   xpgcd                                             ****/
   /* ***   xumcd                                             ****/
   /* ***   xowcd                                             ****/
   /* ***   xslcd                                             ****/
   /* ***   sl2palet                                          ****/
   /* ***   sl2case                                           ****/
   /* *** the order by for this select set is:                ****/
   /* ***   xwhcd                                             ****/
   /* ***   xarcd                                             ****/
   /* ***   sl2zone                                           ****/
   /* ***   sl4loctn                                          ****/
   /* ***   sl2case                                           ****/
   /* ***   xgpcd                                             ****/
   /* ***   sy1stnbr                                          ****/
   /* ***   sy2clrid                                          ****/
   /* ***   xdmcd                                             ****/
   /* ***   xqacd                                             ****/
   /* ***   xsdcd                                             ****/
   /* ***   xsacd                                             ****/
   /* ***   xpgcd                                             ****/
   /* ***   xumcd                                             ****/
   /* ***   xowcd                                             ****/
   /* ***   xslcd                                             ****/
   /* ***   sy5szid                                           ****/
   /* ************************************************************/

  call "VSYLOC02" ("S7", SQLCA, VSYLOC02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "XSSLOCS7";
    TA1REC.TA1LOCAT[1] = "VSYLOC02";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VSYLOC02";
    TA1REC.TA1TBLKE = VSYLOC02.VSYLOC02-KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* *** note: fetch handles return code correctly           ****/
   /* ************************************************************/

  XSSLS-N7-VSYLOC02(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end XSSLS-S7-VSYLOC02

//*** RECORD=SL0KW01 ****
// ************************************************************
// 
//           STOCK LOCATE MAINTENANCE SKELETON
//           =================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used for specific
//           application/function purposes.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-86  Ward Jones   created
// 05-16-90  kande1       added fields for logic change from
//                        pd1ponbr po nbr to either pc3ponbr
//                        PC_PO_NBR or po id and po type.
// 11-15-90  kande1       added xegcd field and changed xsdcd
//                        to pc2inseg. added units per case
//                        sy1unpcs. added sl0kwufl units per
//                        case found flag.
// 07-16-92  Ryonke       Added cole haan ws field(s).
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0KW01 type basicRecord
  10 SL0KWLK1 SL0KWLK1 ; 
    15 XWHCD XWHCD ; 
    15 IN5TRDCD IN5TRDCD ; 
    15 IN5TRDOC IN5TRDOC ; 
    15 IN5TRSUB IN5TRSUB ; 
    15 XITCD XITCD ; 
    15 IN5TRREF IN5TRREF ; 
    15 XIRCD XIRCD ; 
    15 XIFCD XIFCD ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 PC2INSEG PC2INSEG ; 
    15 XEGCD XEGCD ; 
    15 XSLCD XSLCD ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
    15 XOWCD XOWCD ; 
    15 XARCD XARCD ; 
    15 SL4ZONE SL4ZONE ; 
    15 SL5LOCTN SL5LOCTN ; 
    15 PC3PONBR PC3PONBR ; 
    15 PC-SAP-PO-NBR PC-SAP-PO-NBR ; 
    15 SL2CASE SL2CASE ; 
  10 SY1UNPCS SY1UNPCS ; 
  10 SL0KWPCN SL0KWPCN ; 
  10 SL0KWSPCN SL0KWSPCN ; 
  10 SL0KWTOT SL0KWTOT ; 
  10 SL0KWNSZ SL0KWNSZ ; 
  10 SL0KWIFL SL0KWIFL ; 
  10 SL0KWISZ SL0KWISZ ; 
  10 SL0KWSFL SL0KWSFL ; 
  10 SL0KWONH SL0KWONH ; 
  10 SL0KWRSV SL0KWRSV ; 
  10 SL0KWSAD SL0KWSAD ; 
  10 SL0KWQTY SL0KWQTY ; 
  10 SL0KWQT2 SL0KWQT2 ; 
  10 SL0KWQT3 SL0KWQT3 ; 
  10 SL0KWQT4 SL0KWQT4 ; 
  10 SL0KWQT5 SL0KWQT5 ; 
  10 SL0KWDIF SL0KWDIF ; 
  10 SL0KWNQT SL0KWNQT ; 
  10 SL0KWARY SL0KWARY [39] ; 
    15 SY5SZID SY5SZID ; 
    15 SL0KWREC SL0KWREC ; 
    15 SL0KWPTS SL0KWPTS ; 
    15 SY4IDDSC SY4IDDSC ; 
    15 SL6ONHND SL6ONHND ; 
    15 SL6PKRSV SL6PKRSV ; 
    15 SL6STASD SL6STASD ; 
    15 SL0KWCRC SL0KWCRC ; 
  10 SL0KWPID SL0KWPID ; 
    15 SL0KWPDT SL0KWPDT ; 
    15 SL0KWFAC SL0KWFAC ; 
  10 SL0KWFPI SL0KWFPI ; 
    15 SL0KWFYR SL0KWFYR ; 
      20 SL0KWFYD SL0KWFYD ; 
      20 SL0KWFYY SL0KWFYY ; 
    15 SL0KWFMD SL0KWFMD ; 
  10 SL0KWCMR SL0KWCMR ; 
    15 SL0KWCML SL0KWCML ; 
    15 SL0KWCCN SL0KWCCN ; 
    15 SL0KWCYR SL0KWCYR ; 
    15 SL0KWCMD SL0KWCMD ; 
  10 SL0KWNMR SL0KWNMR ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 SL0KWSPN SL0KWSPN ; 
  10 SL0KWSSPN SL0KWSSPN ; 
  10 YMTCD YMTCD ; 
  10 XIGCD XIGCD ; 
  10 SL0KW-CH-STY-FL SL0KW-CH-STY-FL ; 
  10 SL0KW-VALID-UOM-FL SL0KW-VALID-UOM-FL ; 
  10 SL0KW-PO-IN-SYLOC SL0KW-PO-IN-SYLOC ; 
end // end SL0KW01

//*** RECORD=SL0KW02 ****
// ************************************************************
// 
//           STOCK LOCATE MAINTENANCE SKELETON
//           =================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used for specific
//           application/function purposes.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-86  Ward Jones   created
// 08-30-89  Ernie Smith  add sl0kwnet, sl0kwsnt, sl0kwntf
// 11-15-90  kande1       add xegcd, sl0kwxeg, sy1unpcs and
//                        changed xsdcd spc to pc2inseg and isg
// 07-16-92  Ryonke       Added Cole Haan ws field(s).
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0KW02 type basicRecord
  10 SL0KWLK2 SL0KWLK2 ; 
    15 XWHCD XWHCD ; 
    15 IN5TRDCD IN5TRDCD ; 
    15 IN5TRDOC IN5TRDOC ; 
    15 IN5TRSUB IN5TRSUB ; 
    15 XITCD XITCD ; 
    15 IN5TRREF IN5TRREF ; 
    15 XIRCD XIRCD ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 PC2INSEG PC2INSEG ; 
    15 XEGCD XEGCD ; 
    15 XSLCD XSLCD ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
    15 XOWCD XOWCD ; 
    15 SY1UNPCS SY1UNPCS ; 
    15 SL0KWGPC SL0KWGPC ; 
    15 SL0KWSTY SL0KWSTY ; 
    15 SL0KWCLR SL0KWCLR ; 
    15 SL0KWDIM SL0KWDIM ; 
    15 SL0KWQLT SL0KWQLT ; 
    15 SL0KWISG SL0KWISG ; 
    15 SL0KWXEG SL0KWXEG ; 
    15 SL0KWSLC SL0KWSLC ; 
    15 SL0KWPKG SL0KWPKG ; 
    15 SL0KWUOM SL0KWUOM ; 
    15 SL0KWOWN SL0KWOWN ; 
    15 SL0KWUNT SL0KWUNT ; 
    15 XARCD XARCD ; 
    15 SL4ZONE SL4ZONE ; 
    15 SL5LOCTN SL5LOCTN ; 
  10 SL0KWTOT SL0KWTOT ; 
  10 SL0KWONH SL0KWONH ; 
  10 SL0KWNET SL0KWNET ; 
  10 SL0KWNTF SL0KWNTF ; 
  10 SL0KWNSZ SL0KWNSZ ; 
  10 SL0KWNPQ SL0KWNPQ ; 
  10 SL0KWQT1 SL0KWQT1 ; 
  10 SL0KWQT2 SL0KWQT2 ; 
  10 SL0KWQT3 SL0KWQT3 ; 
  10 SL0KWQT4 SL0KWQT4 ; 
  10 SL0KWQT5 SL0KWQT5 ; 
  10 SL0KWIFL SL0KWIFL ; 
  10 SL0KWISZ SL0KWISZ ; 
  10 SL0KWARR SL0KWARR [40] ; 
    15 SY5SZID SY5SZID ; 
    15 SL0KWREC SL0KWREC ; 
    15 SL0KWPTS SL0KWPTS ; 
    15 SY4IDDSC SY4IDDSC ; 
    15 SL6ONHND SL6ONHND ; 
    15 SL0KWSNT SL0KWSNT ; 
    15 SL0KWCRC SL0KWCRC ; 
  10 SY4SZSCL SY4SZSCL ; 
  10 SL0KW-CH-STY-FL SL0KW-CH-STY-FL ; 
end // end SL0KW02

//*** RECORD=SL0KW03 ****
// ************************************************************
// 
//           STOCK LOCATE MAINTENANCE SKELETON
//           =================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used for specific
//           application/function purposes.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-86  Ward Jones   created
// 11-15-90  kande1       added xegcd and sl0kwxeg. changed spc
//                        and xsdcd to pc2inseg and isg.
// 07-16-92  Ryonke       Added Cole Haan ws field(s).
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0KW03 type basicRecord
  10 SL0KWLK3 SL0KWLK3 ; 
    15 XWHCD XWHCD ; 
    15 IN5TRDCD IN5TRDCD ; 
    15 IN5TRDOC IN5TRDOC ; 
    15 IN5TRSUB IN5TRSUB ; 
    15 XITCD XITCD ; 
    15 IN5TRREF IN5TRREF ; 
    15 XIRCD XIRCD ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 PC2INSEG PC2INSEG ; 
    15 XEGCD XEGCD ; 
    15 XSLCD XSLCD ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
    15 XOWCD XOWCD ; 
    15 SL0KWGPC SL0KWGPC ; 
    15 SL0KWSTY SL0KWSTY ; 
    15 SL0KWCLR SL0KWCLR ; 
    15 SL0KWDIM SL0KWDIM ; 
    15 SL0KWQLT SL0KWQLT ; 
    15 SL0KWISG SL0KWISG ; 
    15 SL0KWXEG SL0KWXEG ; 
    15 SL0KWSLC SL0KWSLC ; 
    15 SL0KWPKG SL0KWPKG ; 
    15 SL0KWUOM SL0KWUOM ; 
    15 SL0KWOWN SL0KWOWN ; 
  10 SL0KWQT3 SL0KWQT3 ; 
  10 SL0KWQT4 SL0KWQT4 ; 
  10 SL0KWQT5 SL0KWQT5 ; 
  10 SY4SZSCL SY4SZSCL ; 
  10 SL0KWNSZ SL0KWNSZ ; 
  10 SL0KW3AR SL0KW3AR [40] ; 
    15 SY5SZID SY5SZID ; 
    15 SY4IDDSC SY4IDDSC ; 
    15 SL6ONHND SL6ONHND ; 
  10 SL0KW-CH-STY-FL SL0KW-CH-STY-FL ; 
end // end SL0KW03

//*** RECORD=SL0KW04 ****
// ************************************************************
// 
//           STOCK LOCATE MAINTENANCE SKELETON
//           =================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used to hold
//           key field values for data items common to at
//           least 2 of the SL0K maps.
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 04-03-92  CEngel       created
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0KW04 type basicRecord
  10 IN5TRDCD IN5TRDCD ; 
  10 IN5TRDOC IN5TRDOC ; 
  10 IN5TRSUB IN5TRSUB ; 
  10 XITCD XITCD ; 
  10 IN5TRREF IN5TRREF ; 
  10 XIRCD XIRCD ; 
  10 XGPCD XGPCD ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 XQACD XQACD ; 
  10 PC2INSEG PC2INSEG ; 
  10 XEGCD XEGCD ; 
  10 XSLCD XSLCD ; 
  10 XPGCD XPGCD ; 
  10 XUMCD XUMCD ; 
  10 XOWCD XOWCD ; 
  10 XARCD XARCD ; 
  10 SL4ZONE SL4ZONE ; 
  10 SL5LOCTN SL5LOCTN ; 
  10 SY1UNPCS SY1UNPCS ; 
  10 SL0KWSCT SL0KWSCT ; 
  10 SL0KWSW1 SL0KWSW1 ; 
  10 SL0KWSW2 SL0KWSW2 ; 
  10 SL0KWSW3 SL0KWSW3 ; 
end // end SL0KW04

//*** RECORD=SL0KW11 ****
// ************************************************************
// 
//           STOCK LOCATE MAINTENANCE SKELETON
//           =================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used for specific
//           application/function purposes.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0KW11 type basicRecord
  10 SL0KWWAR SL0KWWAR ; 
    15 XWHCD XWHCD ; 
    15 XARCD XARCD ; 
  10 SL0KWDOC SL0KWDOC ; 
    15 * num(8) ; 
    15 SL0KWLST SL0KWLST ; 
  10 SL0KWACF SL0KWACF ; 
  10 SL6PKRSV SL6PKRSV ; 
  10 SL6STASD SL6STASD ; 
  10 INASAID INASAID ; 
  10 SL6SADTE SL6SADTE ; 
end // end SL0KW11

//*** RECORD=SL0KW12 ****
// ************************************************************
// 
//           STOCK LOCATE MAINTENANCE SKELETON
//           =================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           This record will be used for storing the
//           adjustments.  This will be used to tell
//           whether a change was made to ad adjustment.
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0KW12 type basicRecord
  10 SL0KWNIN SL0KWNIN ; 
  10 SL0KWAQC SL0KWAQC ; 
  10 SL0KWADJ SL0KWADJ [39] ; 
end // end SL0KW12

//*** RECORD=SL0KW21 ****
// ************************************************************
// 
//           STOCK LOCATE MAINTENANCE SKELETON
//           =================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used for specific
//           application/function purposes.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0KW21 type basicRecord
  10 SL0KWWAR SL0KWWAR ; 
    15 XWHCD XWHCD ; 
    15 XARCD XARCD ; 
  10 SL0KWDOC SL0KWDOC ; 
    15 * num(8) ; 
    15 SL0KWLST SL0KWLST ; 
  10 SL0KWUIN SL0KWUIN ; 
end // end SL0KW21

//*** RECORD=SL0KW22 ****
// *********** size description translation record ************
//                   NEW PRODUCT
// PURPOSE:      this is used to compare the new product sizes
//               with the old product sizes.
// 
// ************************************************************
// ***********************
Record SL0KW22 type basicRecord
  5 SYPDATA SYPDATA ; 
    10 SYPFC SYPFC ; 
    10 SYPCMPSW SYPCMPSW ; 
    10 SYPKEY SYPKEY ; 
      15 XGPCD XGPCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XQACD XQACD ; 
    10 SYPRC SYPRC ; 
    10 SYPARRAY SYPARRAY [40] ; 
      15 SY5SZID SY5SZID ; 
      15 SY4IDDSC SY4IDDSC ; 
      15 XDVCD XDVCD ; 
      15 SYPSZRC SYPSZRC ; 
    10 * char(50) ; 
end // end SL0KW22

//*** RECORD=SL0KW23 ****
// ************************************************************
// 
//           STOCK LOCATE MAINTENANCE SKELETON
//           =================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           This record will be used for storing the
//           adjustments.  This will be used to tell
//           whether a change was made to ad adjustment.
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0KW23 type basicRecord
  10 SL0KWNIN SL0KWNIN ; 
  10 SL0KWAQC SL0KWAQC ; 
  10 SL0KWADJ SL0KWADJ [40] ; 
end // end SL0KW23

//*** RECORD=SL0KW31 ****
// ************************************************************
// 
//           STOCK LOCATE MAINTENANCE SKELETON
//           =================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used for specific
//           application/function purposes.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0KW31 type basicRecord
  10 SL0KWWAR SL0KWWAR ; 
    15 XWHCD XWHCD ; 
    15 XARCD XARCD ; 
  10 SL0KWDOC SL0KWDOC ; 
    15 * num(8) ; 
    15 SL0KWLST SL0KWLST ; 
  10 SL0KWLEF SL0KWLEF ; 
  10 SL0KWIAR SL0KWIAR [40] ; 
    15 SL6ONHND SL6ONHND ; 
  10 SL2CASE SL2CASE ; 
  10 SL0KWEOS SL0KWEOS ; 
  10 SL0KWASG SL0KWASG ; 
  10 SL0KWUIN SL0KWUIN ; 
end // end SL0KW31

//*** RECORD=SL0KW32 ****
// *********** size description translation record ************
//                   NEW PRODUCT
// PURPOSE:      this is used to compare the new product sizes
//               with the old product sizes.
// 
// ************************************************************
// ***********************
Record SL0KW32 type basicRecord
  5 SYPDATA SYPDATA ; 
    10 SYPFC SYPFC ; 
    10 SYPCMPSW SYPCMPSW ; 
    10 SYPKEY SYPKEY ; 
      15 XGPCD XGPCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XQACD XQACD ; 
    10 SYPRC SYPRC ; 
    10 SYPARRAY SYPARRAY [40] ; 
      15 SY5SZID SY5SZID ; 
      15 SY4IDDSC SY4IDDSC ; 
      15 XDVCD XDVCD ; 
      15 SYPSZRC SYPSZRC ; 
    10 * char(50) ; 
end // end SL0KW32

//*** RECORD=SL0KW33 ****
// ************************************************************
// 
//           STOCK LOCATE MAINTENANCE SKELETON
//           =================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           This record will be used for storing the
//           adjustments.  This will be used to tell
//           whether a change was made to ad adjustment.
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0KW33 type basicRecord
  10 SL0KWNIN SL0KWNIN ; 
  10 SL0KWAQC SL0KWAQC ; 
  10 SL0KWADJ SL0KWADJ [40] ; 
end // end SL0KW33

//*** RECORD=SL0KW34 ****
// ************************************************************
// 
//           STOCK LOCATE MAINTENANCE SKELETON
//           =================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used for specific
//           application/function purposes.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-86  Ward Jones   created
// 11-15-90  kande1       added xegcd. chged xsdcd to pc2inseg.
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0KW34 type basicRecord
  15 XGPCD XGPCD ; 
  15 SY1STNBR SY1STNBR ; 
  15 SY2CLRID SY2CLRID ; 
  15 XDMCD XDMCD ; 
  15 XQACD XQACD ; 
  15 PC2INSEG PC2INSEG ; 
  15 XEGCD XEGCD ; 
  15 XSLCD XSLCD ; 
  15 XPGCD XPGCD ; 
  15 XUMCD XUMCD ; 
  15 XOWCD XOWCD ; 
end // end SL0KW34

//*** RECORD=SL0KWTQ ****
//           This tsq record holds the product/location key
//           fields for sl0km110.
// ***********************
Record SL0KWTQ type basicRecord
  10 SL0KWLEN SL0KWLEN ; 
  10 * char(49) ; 
    15 SY1UNPCS SY1UNPCS ; 
    15 SY5SZID SY5SZID ; 
    15 SL2PALET SL2PALET ; 
    15 SL2CASE SL2CASE ; 
    15 PC3POIDT PC3POIDT ; 
    15 PCFSECD PCFSECD ; 
    15 FY1FCTYC FY1FCTYC ; 
    15 PC4ORTYP PC4ORTYP ; 
    15 PC3PONBR PC3PONBR ; 
    15 PC-SAP-PO-NBR PC-SAP-PO-NBR ; 
    15 SL1CRTDT SL1CRTDT ; 
    15 ZZZCHGCT ZZZCHGCT ; 
end // end SL0KWTQ

//*** RECORD=VSAPIA01 ****
// ********* DCMS INVENTORY ADJUSTMENT REASONS TABLE **********
// 
// DB2 TABLE VIEW:      DINVNT.VDCRSN01
// 
// COPYLIB MEMBER:      VDCRSN01
// 
// I/O MODULE:          VDCRSN01
// 
// KEY TO DB2 TABLE:    DC-RSN-TYP-CD
//                      DC-RSN-CD
//                      DC-ADJ-TYP-CD
// 
// DATE CREATED:        12/03/98
// 
// MAINTENANCE LOG:
// 
// DATE       NAME     COMMENT
// --------   ------   ---------------------------------------
// 12/03/98   ESMIT2   New view definition.
// ************************
Record VSAPIA01 type basicRecord
  5 VSAPIA01-RECORD VSAPIA01-RECORD ; 
    10 XWH-WHSE-CD XWH-WHSE-CD ; 
    10 XGP-GPC-CD XGP-GPC-CD ; 
    10 SY-STY-NBR SY-STY-NBR ; 
    10 SY-COLR-CD-ID SY-COLR-CD-ID ; 
    10 XQA-QUAL-CD XQA-QUAL-CD ; 
    10 XSD-SPEC-CD XSD-SPEC-CD ; 
    10 XUM-UOM-CD XUM-UOM-CD ; 
    10 XIF-TRN-FLD-CD XIF-TRN-FLD-CD ; 
    10 XIT-TRN-TYP-CD XIT-TRN-TYP-CD ; 
    10 XIR-TRN-RSN-CD XIR-TRN-RSN-CD ; 
    10 IN-SAS-ID IN-SAS-ID ; 
    10 SY-SZ-ID-DESC SY-SZ-ID-DESC ; 
    10 SL-SY-LOC-AUD-QTY SL-SY-LOC-AUD-QTY ; 
    10 IN-AUD-TRN-DOC-CD IN-AUD-TRN-DOC-CD ; 
    10 IN-AUD-TRN-DOC-NBR IN-AUD-TRN-DOC-NBR ; 
    10 IN-AUD-TRN-DOC-SUB IN-AUD-TRN-DOC-SUB ; 
    10 SL-SY-LOC-AUD-USER SL-SY-LOC-AUD-USER ; 
    10 SL-SY-LOC-AUD-DT SL-SY-LOC-AUD-DT ; 
    10 IN-AUD-TRN-HHMMSS IN-AUD-TRN-HHMMSS ; 
    10 XXX-STAT XXX-STAT ; 
    10 XXX-USER-ID XXX-USER-ID ; 
    10 ADJ-SEQ-NBR ADJ-SEQ-NBR ; 
    10 ZZ-SDT ZZ-SDT ; 
    10 ZZ-SETUP-HHMMSS ZZ-SETUP-HHMMSS ; 
    10 ZZ-CHNG-DT ZZ-CHNG-DT ; 
    10 ZZ-CHNG-HHMM ZZ-CHNG-HHMM ; 
    10 ZZ-CHNG-CNT ZZ-CHNG-CNT ; 
end // end VSAPIA01

//*** RECORD=VSLAUD02 ****
// ****************  stock locate table  **********************
// 
// TABLE NAME:          product location audit
// 
// DB2 TABLE:           dstloc.vslaud01
// 
// COPYLIB MEMBER:      dcl00251
// 
// POSSIBLE INDEX:      xwhcd
// (if indexed)         document
// 
// POSSIBLE INDEX:      xwhcd
// (if indexed)         xgpcd
//                      sy1stnbr
//                      sy2clrid
//                      xdmcd
//                      xqacd
//                      xsdcd
//                      xsacd
//                      xslcd
//                      xpgcd
//                      xumcd
//                      xowcd
//                      sy5szid
// 
// POSSIBLE INDEX:      xwhcd
// (if indexed)         from area code
//                      from zone code
//                      from location code
// 
// POSSIBLE INDEX:      xwhcd
// (if indexed)         to area code
//                      to zone code
//                      to location code
// 
// MAINTENANCE LOG:
// 
// DATE      NAME       COMMENTS
// --------  ---------  ------------------------------------
// 04-13-87  W. Jones   created csp record
// 02/07/91  CHYDE      Chg sla* data item literal descriptions
//                      to corresponding db2 name (standard).
// ************************************************************
// ************************
Record VSLAUD02 type basicRecord
  5 VSLAUD02-DATA VSLAUD02-DATA ; 
    10 VSLAUD02-KEY VSLAUD02-KEY ; 
      15 XWHCD XWHCD ; 
      15 IN5TRDCD IN5TRDCD ; 
      15 IN5TRPRT IN5TRPRT ; 
      15 IN5TRDOC IN5TRDOC ; 
      15 IN5TRSUB IN5TRSUB ; 
      15 XGPCD XGPCD ; 
      15 SY1STNBR SY1STNBR ; 
      15 SY2CLRID SY2CLRID ; 
      15 XDMCD XDMCD ; 
      15 XQACD XQACD ; 
      15 XOWCD XOWCD ; 
      15 XSDCD XSDCD ; 
      15 XSACD XSACD ; 
      15 XPGCD XPGCD ; 
      15 XUMCD XUMCD ; 
      15 XSLCD XSLCD ; 
      15 SY5SZID SY5SZID ; 
      15 XIFCD XIFCD ; 
    10 XITCD XITCD ; 
    10 XIRCD XIRCD ; 
    10 IN5TRREF IN5TRREF ; 
    10 PC3PONBR PC3PONBR ; 
    10 XARCD XARCD ; 
    10 SL4ZONE SL4ZONE ; 
    10 SL5LOCTN SL5LOCTN ; 
    10 SL2PALET SL2PALET ; 
    10 SL2CASE SL2CASE ; 
    10 SLATRQTY SLATRQTY ; 
    10 SLATRBY SLATRBY ; 
    10 SLATRDTE SLATRDTE ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZHHMMSS ZZHHMMSS ; 
end // end VSLAUD02

//*** RECORD=VVIFTR01 ****
// ********* DCMS INVENTORY ADJUSTMENT REASONS TABLE **********
// 
// DB2 TABLE VIEW:      DINVNT.VDCRSN01
// 
// COPYLIB MEMBER:      VDCRSN01
// 
// I/O MODULE:          VDCRSN01
// 
// KEY TO DB2 TABLE:    DC-RSN-TYP-CD
//                      DC-RSN-CD
//                      DC-ADJ-TYP-CD
// 
// DATE CREATED:        12/03/98
// 
// MAINTENANCE LOG:
// 
// DATE       NAME     COMMENT
// --------   ------   ---------------------------------------
// 12/03/98   ESMIT2   New view definition.
// ************************
Record VVIFTR01 type basicRecord
  5 VVIFTR01-GROUP VVIFTR01-GROUP ; 
    10 XIF-TRN-FLD-CD XIF-TRN-FLD-CD ; 
    10 XIT-TRN-TYP-CD XIT-TRN-TYP-CD ; 
    10 XIR-TRN-RSN-CD XIR-TRN-RSN-CD ; 
    10 XXX-STAT XXX-STAT ; 
    10 XXX-USER-ID XXX-USER-ID ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZSTM ZZZSTM ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end VVIFTR01

// ZZ_CHNG_CNT
DataItem ADJ-SEQ-NBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// IN_SAS_ID
DataItem IN-SAS-ID int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL-SY-LOC-AUD-DT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SL-SY-LOC-AUD-QTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SL-SY-LOC-AUD-USER char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cole haan style flag
DataItem SL0KW-CH-STY-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cole haan style flag
DataItem SL0KW-PO-IN-SYLOC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cole haan style flag
DataItem SL0KW-VALID-UOM-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size qty array
DataItem SL0KW3AR char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// area cursor position flag
DataItem SL0KWACF char(1)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// adjustment qty
DataItem SL0KWADJ int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// adjustment qty changed flag
DataItem SL0KWAQC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size data array
DataItem SL0KWARR char(21)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size data array
DataItem SL0KWARY char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prd asg exists flag
DataItem SL0KWASG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// char mon rng century
DataItem SL0KWCCN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// color
DataItem SL0KWCLR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// char mon rng month/day
DataItem SL0KWCMD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// char mon rng fill
DataItem SL0KWCML char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// char mon rng date
DataItem SL0KWCMR char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prod/loc rec exists flag
DataItem SL0KWCRC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// char mon rng year
DataItem SL0KWCYR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws difference qty field
DataItem SL0KWDIF int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dimension
DataItem SL0KWDIM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// audit tran doc nbr
DataItem SL0KWDOC num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// end of set flag
DataItem SL0KWEOS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po id factory code
DataItem SL0KWFAC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// footwear po id mon/day
DataItem SL0KWFMD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// footwear po id date
DataItem SL0KWFPI char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// footwear po id decade
DataItem SL0KWFYD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// footwear po id year
DataItem SL0KWFYR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// footwear po id digit
DataItem SL0KWFYY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// gen prod cls shipped from whse
DataItem SL0KWGPC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// inv array
DataItem SL0KWIAR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// invalid size flag
DataItem SL0KWIFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new in-seg
DataItem SL0KWISG char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// invalid size qty
DataItem SL0KWISZ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// location entered flag
DataItem SL0KWLEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record length
DataItem SL0KWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// complete last key
DataItem SL0KWLK1 char(91)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// complete last key
DataItem SL0KWLK2 char(101)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// complete last key
DataItem SL0KWLK3 char(87)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// audit tran part
DataItem SL0KWLST num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// net adjustment qty
DataItem SL0KWNET int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// negative inv net flag
DataItem SL0KWNIN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// num  mon rng date
DataItem SL0KWNMR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new prod. qty total
DataItem SL0KWNPQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws negative qty field
DataItem SL0KWNQT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// num of sizes
DataItem SL0KWNSZ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// net adjustment flag
DataItem SL0KWNTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sl on hand quantity
DataItem SL0KWONH int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// owner group code
DataItem SL0KWOWN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_PO_NBR
DataItem SL0KWPCN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// po id date
DataItem SL0KWPDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po id
DataItem SL0KWPID char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// package type
DataItem SL0KWPKG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// position of first tsq siz
DataItem SL0KWPTS num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quality
DataItem SL0KWQLT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws qty field
DataItem SL0KWQT1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws qty field
DataItem SL0KWQT2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws qty field
DataItem SL0KWQT3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws qty field
DataItem SL0KWQT4 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws qty field
DataItem SL0KWQT5 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws qty field
DataItem SL0KWQTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of size records
DataItem SL0KWREC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sl pick reserve qty
DataItem SL0KWRSV int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sl set aside qty
DataItem SL0KWSAD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SL0KWSCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// setaside add/delete flag
DataItem SL0KWSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// stock locate code
DataItem SL0KWSLC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size net quantity
DataItem SL0KWSNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PC_PO_NBR
DataItem SL0KWSPCN char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// saved pc_po_nbr
DataItem SL0KWSPN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved pc_po_nbr
DataItem SL0KWSSPN char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style
DataItem SL0KWSTY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL0KWSW1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SL0KWSW2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SL0KWSW3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// adj. total
DataItem SL0KWTOT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// updt inv flag
DataItem SL0KWUIN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new units per case
DataItem SL0KWUNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// unit of measure
DataItem SL0KWUOM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warehouse area
DataItem SL0KWWAR char(4)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// new engr-diff-cd
DataItem SL0KWXEG char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem VSAPIA01-RECORD char(90)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// entire prod loc audit data row
DataItem VSLAUD02-DATA char(113)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prod loc audit table key
DataItem VSLAUD02-KEY char(44)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem VVIFTR01-GROUP char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

