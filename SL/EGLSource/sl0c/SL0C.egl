package sl0c;
import av.common.*;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import pw.common.*;
import rd.common.*;
import sa.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
import ww.common.*;
//*** PROGRAM=SL0C ****
// ************************************************************
// 
//                    STOCK LOCATE
//           receiving maintenance functions
//           ===============================
// 
// ************************************************************
// 
// OVERVIEW: This application is intended to transfer control
//           to other applications and/or functions within its
//           application depending on the selction number
//           entered on the map or passed via fast path's
//           item area (first character only).
// 
//           These are:
//             1) receiving count entry/maintenance
// 
//             2) receiving inspection
// 
//             3) receiving update
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// 00  02/25/87  Ward Jones  created prototype
// 01  05/13/87  Ward Jones  created production version
// 02  08/03/87  Ward Jones  reset sexsw in s5u and
//                           use ws size in s5q, s5t & s5x
// 03  08/04/87  Ward Jones  zeroed -803's in s5y
// 04  09/26/88  Ward Jones  fix audit ID's
// 05  09/29/88  Ward Jones  add use of transaction DB > 6pm
// 06  11/10/88  John Wood   added xssegtr sgrp
// 07  12/21/88  rob yonker  entry of group codes eq to 10 only
// 08  01/11/89  Ward Jones  init. new initm eom fld
// 08  04/11/89  rob yonker  fix effective date logic in s1n
// 10  07/05/89  kande1      added receiving log comment logic
//                           to add, update and display comment
// 11  08/21/89  esmith      remove shd/spec cntl logic
// 12  08/30/89  kande1      added logic to update or insert
//                           availability header, f and n qty
//                           rows for whse 09 or 12 only.
//                           added the followinf records sy1rec
//                           sy2rec, sy5rec, sy6rec, av4rec,
//                           av5rec, av6rec and taerec. added
//                           the season table xsntbl. added i/o
//                           modules are io2310, io2300, io2320
//                           io4380, io4370, io0380, io0130,
//                           io0120 and io0360.
// 13  10/20/89  ryonke      added table slgrec and logic to
//                           add rows to this table when a size
//                           has been received that is valid
//                           for the product size/scale ,but
//                           not set up for the product.
// 14  11/16/89  ryonke      added fields for phase 4 db2 chngs
// 15  01/29/90  ryonke      changed the update process to an
//                           on-line submitted batch job.
// 15  05/30/90  ryonke      allowed whse 09, gpc 01,04 to be
//                           entered without a po required.
// 16  06/04/90  ryonke      fixed edit problem with product
//                           fields in options 1, 2, and 4.
// 16  06/06/90  ryonke      allow whse '09' and gpc '01' the
//                           option of entering po fields.
// 17  06/12/90  kande1      removed ts1rec from the table list
// FIX      07/03/90  SPOPA   Change to pass TARTYPE to TA0P.
// 18  10/09/90  sjohns      db2 table changes
//                             - init slnrec.swepllnb to 0
//                             - rename xsdcd to pc2inseg
//                             - rename xsacd to xegcd
//                             - delete pd1ponbr
// 19  10/24/90  j moore     warehouse '51' not valid.
// 20  01/03/91  j lucas     PF3 will transfer to SW0R - Receip
//                           Entry Maint. Menu
// 21  01/04/91  j lucas     valid area code 09 was showing up
//                           invalid first time thru.
// sl212  01/28/91 kande1    made po not required for trans.
//                           type '17' misc
// 22     02/12/91 ryonke    code changes required because of
//                           table changes.
//     05/14/91   jmoore     warehouse '51' is valid.
//     05/15/91   JCAMPB     FIX SL0CSC2 TO INCLUDE WHSE CD
//                           WHEN LOOKING UP XOWCD
//     05/17/91   cengel     added units-per-case data item
//                           to options 1 & 2.
//     05/20/91   cengel     corrected warehouse edit (option
//                           2) for 5/17/91 modification.
// 23  06/03/91   ryonke     Disallow any access if container
//                           exists as part of a receiving plan
// 24  07/01/91   sjohns     add whse 51 edit - total qty must
//                           be divisible by units/case-opt 1,2
// SL#0     10/09/91  SPOPA   Change "Allow Implicits" to NO.
//                            Set Receiving Log Item (SL2REC)
//                            empty before format for insert.
//                            Remove SLNREC from record list.
// wil.retro 10/23/91 KANDE1  CHG TO ALLOW WHSE 07 TO PROCESS
//                            UNITS PER CASE LIKE WHSE 51.
// ----      01/16/92 jwood   initialization of maps added
// 04.retro  10/23/91 KANDE1  CHG TO ALLOW WHSE 04 TO PROCESS
//                            UNITS PER CASE.
// sl#0      08/24/92 Ryonke  Fix pksty oversite.
// 02.retro  08/07/91 KANDE1  CHG TO ALLOW WHSE 02 TO PROCESS
//                            UNITS PER CASE.
// whse 25   02/11/93 kande1  add whse 25 NSG to program
// sl#458    03/29/94 Ryonke  Make whse '03' receipts like '09'
// Tblchg    04/04/94 Ryonke  Change reference in sy6rec.
// Tblchg    08/22/95 Ryonke  Added warehouse specific logic
//                            for Canada Warehouse (whse=42).
// Canada    08/25/95 CBRINE  Added call to SY2000.  Added
//                            XCTCD to SLWREC.
// y2kproj   02-03-98 oricha  y2k modifications:  SL0CS1M,
//                             SL0CSC2, SL0CSC4.
// retroft   09-24-98 sjohn6  do not allow updates between
//                            21:00 and 03:00 for dcms
// slmaint   03-22-00 SSETHU  Changed for WHSE 07 To Accept
//                            Only Receipt Type 10 And 13
//                            Per JIM BUDLONG
// slmaint   09-27-00 LPATTN  Changed for Warehouse 07
//                            The Pallet Number is validated
//                            to accept only numeric digits
// gds4nsc   04-11-00 marbuc  Created SL0CT06, which is a clone
//                            of SL0CT05.  SL0CT06 will submit
//                            jcl to create goods receipt file
//                            for SAP.  Modify SL0CSH5 to use
//                            SL0CT06 for warehouse 42 and all
//                            other warehouses to still use
//                            SL0CT05.
//                            Modified SL0CSD5 to not allow
//                            submit of receipt between 8:00 pm
//                            and 2:30 am for whse 42 (Canada)
// 
//  dlvrusa  02/19/01 ssethu  Modified for US go live
// List of Rules :
// ---------------
// 1. Container Number should be present on DSTLOC.VRCVSH01
// 2. PO should be valid for the corresponding CNTNR
// 3. PO vs SAP PO should be valid
// 4. UOM should be present on DPROD.VCOLOR02
// 5. Either PO or SAP PO can be entered. If both entered
//    then, it should be a right combination
// 6. Time constraint for Whse 42 (between 8.00pm and 2.30am)
//    has been removed.
// 7. JCL will always be submitted for SL0CT06.
// 8. Inventory Stock XFER is commented out for all the warehou
// 9. XIT of 13 cannot be received for any warehouse
// 10. Any receiving should have a valid PO/SAP PO
// 11. Entire Online screen will use new views like VSYLOC02
//     VRCVPH01, VRCVSH01
// 12. There is no check against the DTRANS tables at all
// 13. Validation against the region code has been removed
// 
// IO Modules :
// ===========
// vrlitm02  used to insert the items with pc sap po nbr
// vrcvph01  used to check whether the container, pc po nbr
// pc sap po nbr is valid or not
// ************************************************************
// ************************************************************
// *********************
Program SL0C type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = yes, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  AV4REC AV4REC; // record
  AV5REC AV5REC; // record
  AV6REC AV6REC; // record
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  IN7REC IN7REC; // record
  IN8REC IN8REC; // record
  INAREC INAREC; // record
  INBREC INBREC; // record
  PC2REC PC2REC; // record
  PC3REC PC3REC; // record
  PKNREC PKNREC; // record
  SL0CW01 SL0CW01; // record
  SL0CW02 SL0CW02; // record
  SL0CW03 SL0CW03; // record
  SL0CW04 SL0CW04; // record
  SL0CW05 SL0CW05; // record
  SL1REC SL1REC; // record
  SL3REC SL3REC; // record
  SL4REC SL4REC; // record
  SL5REC SL5REC; // record
  SLAREC SLAREC; // record
  SLEREC SLEREC; // record
  SLGREC SLGREC; // record
  SLSREC SLSREC; // record
  SLVREC SLVREC; // record
  SLWREC SLWREC; // record
  SLXREC SLXREC; // record
  SQLCA SQLCA; // record
  SY2REC SY2REC; // record
  SY4REC SY4REC; // record
  SY5REC SY5REC; // record
  SY6REC SY6REC; // record
  SYCREC SYCREC; // record
  SYPREC SYPREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  TARREC TARREC; // record
  TS5REC TS5REC; // record
  TSFREC TSFREC; // record
  VRCVPH01 VRCVPH01; // record
  VRCVPI01 VRCVPI01; // record
  VRCVSH01 VRCVSH01; // record
  VRLITM02 VRLITM02; // record
  WSY2000 WSY2000; // record
  X2CREC X2CREC; // record
  X3CREC X3CREC; // record
  XSSLW01 XSSLW01; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use SL0CT05; // table
  use SL0CT06 {deleteAfterUse = yes}; // table
  use XARTBL; // table
  use XDMTBL; // table
  use XGPTBL; // table
  use XITTBL; // table
  use XOWTBL; // table
  use XPGTBL; // table
  use XQATBL; // table
  use XSLTBL; // table
  use XSNTBL; // table
  use XUMTBL; // table
  use XWHTBL; // table
  use YMTTBL; // table
  use YRSTBL; // table
  use SL0CM.SL0CM010,  // forms
      SL0CM.SL0CM110, 
      SL0CM.SL0CM210, 
      SL0CM.SL0CM310, 
      SL0CM.SL0CM410, 
      SL0CM.SL0CM510, 
      SL0CM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    SL0C010: SL0C010();


     /* ************************************************************/
     /* *** if the map selection no. setup:                     ****/
     /* *** use it to go directly to selection (skip converse)  ****/
     /* ************************************************************/

    if (SL0CM010.XMSLMSNO > " ")
      if (SL0CM010.XMSLMSNO == "1")
        goto SL0C110; /* <=== new function*/
      end
      if (SL0CM010.XMSLMSNO == "2")
        goto SL0C210; /* <=== new function*/
      end
      if (SL0CM010.XMSLMSNO == "3")
        goto SL0C310; /* <=== new function*/
      end
      if (SL0CM010.XMSLMSNO == "4")
        goto SL0C410; /* <=== new function*/
      end
      if (SL0CM010.XMSLMSNO == "5")
        goto SL0C510; /* <=== new function*/
      end
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "010Z";
      SLWREC.SLWMSGNO = 0017; /* <--- invalid selection msg*/
      set SL0CM010.XMSLMSNO cursor, bold;
      goto SL0C020; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "020 "; /* error id location id*/
    goto SL0C020; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    SL0C020: SL0C020();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0C010; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0C110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0C210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0C310; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0C410; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf17)
      goto SL0C510; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0C020; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      if (SL0CM010.XMSLMSNO == "1")
        goto SL0C110; /* <=== new function*/
      end
      if (SL0CM010.XMSLMSNO == "2")
        goto SL0C210; /* <=== new function*/
      end
      if (SL0CM010.XMSLMSNO == "3")
        goto SL0C310; /* <=== new function*/
      end
      if (SL0CM010.XMSLMSNO == "4")
        goto SL0C410; /* <=== new function*/
      end
      if (SL0CM010.XMSLMSNO == "5")
        goto SL0C510; /* <=== new function*/
      end
       /* ************************************************************/
       /* *** note: invalid selection is detected at this point   ****/
       /* ************************************************************/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "020Y";
      SLWREC.SLWMSGNO = 0017; /* <--- invalid selection msg*/
      set SL0CM010.XMSLMSNO cursor, bold;
      goto SL0C020; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0C020; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    SL0C110: SL0C110();


     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "120 "; /* error id location id*/
    goto SL0C120; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    SL0C120: SL0C120();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0C110; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0CM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0C020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0C110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0C210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0C310; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0C410; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf17)
      goto SL0C510; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0C120; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      goto SL0C120; /* <=== re-display this screen*/
    end

    if (converseVar.eventKey is pf12)
      goto SL0C120; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0C120; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    SL0C210: SL0C210();


     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "220 "; /* error id location id*/
    goto SL0C220; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    SL0C220: SL0C220();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0C210; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0CM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0C020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0C110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0C210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0C310; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0C410; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf17)
      goto SL0C510; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0C220; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      SLWREC.XXXLOCID = "240 ";
      goto SL0C240; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0C220; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    SL0C240: SL0C240();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0C210; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0CM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0C020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0C110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0C210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0C310; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0C410; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf17)
      goto SL0C510; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      if (SLWREC.SLWSKYSW == "N")
        goto SL0C220; /* <=== re-display key screen*/
      end
      goto SL0C240; /* <=== re-display data screen*/
    end

     /* ************************************************************/
     /* *** if no error and new key: re-display the data scrn   ****/
     /* ************************************************************/

    if (SLWREC.SLWSKYSW == "N")
      SLWREC.XXXLOCID = "240 ";
      goto SL0C240; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      SLWREC.XXXLOCID = "220 ";
      goto SL0C220; /* <=== setup for new input*/
    end

    if (converseVar.eventKey is pf12)
      SLWREC.XXXLOCID = "240 ";
      goto SL0C240; /* <=== converse data map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "240Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0C240; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    SL0C310: SL0C310();


     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "320 "; /* error id location id*/
    goto SL0C320; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    SL0C320: SL0C320();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0C310; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0CM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0C020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0C110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0C210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0C310; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0C410; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf17)
      goto SL0C510; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0C320; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      SLWREC.XXXLOCID = "340 ";
      goto SL0C340; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0C320; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    SL0C340: SL0C340();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0C310; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0CM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0C020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0C110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0C210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0C310; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0C410; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf17)
      goto SL0C510; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      if (SLWREC.SLWSKYSW == "N")
        goto SL0C320; /* <=== re-display key screen*/
      end
      goto SL0C340; /* <=== re-display data screen*/
    end

     /* ************************************************************/
     /* *** if no error and new key: re-display the data scrn   ****/
     /* ************************************************************/

    if (SLWREC.SLWSKYSW == "N")
      SLWREC.XXXLOCID = "340 ";
      goto SL0C340; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      SLWREC.XXXLOCID = "320 ";
      goto SL0C320; /* <=== setup for new input*/
    end

    if (converseVar.eventKey is pf12)
      SLWREC.XXXLOCID = "340 ";
      goto SL0C340; /* <=== converse data map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "340Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0C340; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    SL0C410: SL0C410();


     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "420 "; /* error id location id*/
    goto SL0C420; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    SL0C420: SL0C420();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0C410; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0CM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0C020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0C110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0C210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0C310; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0C410; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf17)
      goto SL0C510; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0C420; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      SLWREC.XXXLOCID = "440 ";
      goto SL0C440; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0C420; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    SL0C440: SL0C440();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0C410; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0CM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0C020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0C110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0C210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0C310; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0C410; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf17)
      goto SL0C510; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      if (SLWREC.SLWSKYSW == "N")
        goto SL0C420; /* <=== re-display key screen*/
      end
      goto SL0C440; /* <=== re-display data screen*/
    end

     /* ************************************************************/
     /* *** if no error and new key: re-display the data scrn   ****/
     /* ************************************************************/

    if (SLWREC.SLWSKYSW == "N")
      SLWREC.XXXLOCID = "440 ";
      goto SL0C440; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      SLWREC.XXXLOCID = "420 ";
      goto SL0C420; /* <=== setup for new input*/
    end

    if (converseVar.eventKey is pf12)
      SLWREC.XXXLOCID = "440 ";
      goto SL0C440; /* <=== converse data map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "440Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0C440; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    SL0C510: SL0C510();


     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "520 "; /* error id location id*/
    goto SL0C520; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    SL0C520: SL0C520();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0C510; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0CM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0C020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0C110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0C210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0C310; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0C410; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf17)
      goto SL0C510; /* <=== start new function*/
    end


     /* ************************************************************/
     /* *** if enter perform this process again                 ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      goto SL0C520; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "520Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0C520; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


  end // end main
end // end SL0C

// one time initializations
Function SL0C010()


   /* ************************************************************/
   /* *** standard security checking                          ****/
   /* *** note: comment out if exec'g from your msl           ****/
   /* ************************************************************/

  XSENTRY();

   /* ************************************************************/
   /* *** standard segmented trans id setting                 ****/
   /* ************************************************************/

  XSSEGTR();

   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0CM010 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0CM110 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0CM210 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0CM310 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0CM410 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0CM510 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SLWREC empty; /* common working storage fields*/
  set SLVREC empty; /* io module pass fields*/
  set SLSREC empty; /* io module pass fields*/
  set SLXREC empty; /* fast path pass fields*/
  set TA1REC empty; /* TA0020 record*/
  set TA2REC empty; /* TA0040 record*/
  set TA5REC empty; /* TA0050 parameter*/
  set SQLCA empty; /* SQL returned data record*/
  set ERRSQLCA empty; /* TA0020 version of SQLCA*/
  set X2CREC empty; /* current date record*/
  set X3CREC empty; /* current time record*/

   /* ************************************************************/
   /* *** maintenance information:                            ****/
   /* *** =======================                             ****/
   /* *** rvsn   date    update by:    description:           ****/
   /* *** ---- --------  ------------  ---------------------- ****/
   /* ***  00  02/25/87  W. Jones      created prototype      ****/
   /* ***  01  05/13/87  W. Jones      created production     ****/
   /* ***  02  08/03/87  W. Jones      added sexsw reset in s5u***/
   /* ***                              use ws szid in s5q,t,x ****/
   /* ***  03  08/04/87  W. Jones      0'd -803 rc in s5y     ****/
   /* ***  04  09/26/88  W. Jones      fix audit doc. ID's    ****/
   /* ***  05  08/29/88  W. Jones      add use of transaction ****/
   /* ***                              db > 6pm & < 3am       ****/
   /* ***  06  11/10/88  J. Wood       added xssegtr sgrp     ****/
   /* ***  07  12/21/88  R. Yonker     receipt type entry only****/
   /* ***  08  01/11/89  W. Jones      init. initm new eom fld****/
   /* ***  10  07/06/89  kande1        add comment logic for  ****/
   /* ***                              new comment field      ****/
   /* ************************************************************/

  SLWREC.XXXRVNBR = "10";

  SLWREC.XXXMAPNM = "SL0CM010";
  SLWREC.XXXTITLE = "RECEIVING MAINTENANCE MENU";

  XSX2CDT(); /* <=== get current ccyymmdd*/

  SLWREC.XXXAPPID = "SL0C"; /* error id appl. name*/
  SLWREC.SLWTALOC = "SL0C010 "; /* TA0020 exec location(2)*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* saved msg number*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0CM010.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0CM010.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0CM010.XXXTITLE = SLWREC.XXXTITLE;
  SL0CM010.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** check commarea fast path item to see if it should   ****/
   /* *** be used to setup working storage &/or map fields    ****/
   /* ************************************************************/

  if (COMMAREA.CAITEM > " ")
    SL0CSY0(); /* <=== use commarea item*/
    COMMAREA.CAITEM = " ";
  end

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end SL0C010

// converse & control key entry
Function SL0C020()


   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0CM010.XXXERRID = SLWREC.XXXERRID;


  converse SL0CM010 ;


   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020A";
    SLWREC.SLWMSGNO = 0;
    SL0CM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go Receipt entry Maintenance Menu           ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "SW0R";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020B";
    SLWREC.SLWMSGNO = 0;
    SL0CM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020C";
    SLWREC.SLWMSGNO = 0;
    SL0CM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020D";
    SLWREC.SLWMSGNO = 0;
    SL0CM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0CM010.CATOAP > " ")
    COMMAREA.CATOAP = SL0CM010.CATOAP;
    COMMAREA.CAITEM = SL0CM010.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020E";
    SLWREC.SLWMSGNO = 0;
    SL0CM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0CM010.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0CM010.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "020 ";
  set SL0CM010.CATOAP initialAttributes;
  set SL0CM010.CAITEM initialAttributes;
  set SL0CM010.XMSLMSNO cursor, initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0CM010.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0CM010.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0CSH0(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17)
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "020I";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0C020

// one time initializations
Function SL0C110()


   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0CM110 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0CW01 empty; /* appl. working storage area*/

  SLWREC.XXXMAPNM = "SL0CM110";
  SLWREC.XXXTITLE = "RECEIVING COUNT ENTRY";

  SLWREC.SLWTALOC = "SL0C110 "; /* TA0020 exec location(2)*/
  TA1REC.TA1MAP = "SL0CM110"; /* TA0020 current map name*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* saved msg number*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0CM110.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0CM110.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0CM110.XXXTITLE = SLWREC.XXXTITLE;
  SL0CM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  if (COMMAREA.CAUSERA > " ")
    SL0CS01(); /* <=== causera input processing*/
  end

  SL0CM110.XWHCD = COMMAREA.XWHCD;
  SL0CM110.XGPCD = COMMAREA.XGPCD;
  SL0CM110.SY2CLRID = "00 ";
  SL0CM110.XDMCD = "00";
  SL0CM110.XQACD = "01";
  SL0CM110.XSDCD = "000";
  SL0CM110.XSLCD = "000";
  SL0CM110.XPGCD = "00";
  SL0CM110.XOWCD = "00";
  SL0CM110.SL5LOCTN = "000000";
  SL0CW01.SL0CWFSW = "Y";

  if (SL0CM110.XWHCD == "51"
   || SL0CM110.XWHCD == "07"
   || SL0CM110.XWHCD == "04"
   || SL0CM110.XWHCD == "02"
   || SL0CM110.XWHCD == "25"
   || SL0CM110.XWHCD == "42") /* Canada*/
    set SL0CM110.SY1UNPCS initialAttributes;
  else
    set SL0CM110.SY1UNPCS skip, invisible;
  end

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  SLWREC.SLWLINPP = 11; /* The detail line set to 11*/



   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end SL0C110

// converse & control update
Function SL0C120()


   /* ************************************************************/
   /* *** protect (askip) data fields (if any)                ****/
   /* *** note: cursor is set if error or is map's default    ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0CM110.XXXERRID = SLWREC.XXXERRID;


  converse SL0CM110 ;


   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120A";
    SLWREC.SLWMSGNO = 0;
    SL0CM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120C";
    SLWREC.SLWMSGNO = 0;
    SL0CM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120D";
    SLWREC.SLWMSGNO = 0;
    SL0CM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF18: save this map's key values in SLXREC and   ****/
   /* ***          go to SL0D selection #3 to compare the     ****/
   /* ***          quantity received vs packing list          ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf18)
    SL0CS11(); /* <=== USERA exit processing*/
    COMMAREA.CATOAP = "SL0D";
    COMMAREA.CAITEM = "7";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120J";
    SLWREC.SLWMSGNO = 0;
    SL0CM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0CM110.CATOAP > " ")
    COMMAREA.CATOAP = SL0CM110.CATOAP;
    COMMAREA.CAITEM = SL0CM110.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120E";
    SLWREC.SLWMSGNO = 0;
    SL0CM110.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0CM110.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0CM110.VAGen_EZEMSG = " ";
  set SL0CM110.CATOAP initialAttributes;
  set SL0CM110.CAITEM initialAttributes;
  set SL0CM110.TS3CNTNR cursor;

   /* ************************************************************/
   /* *** reset ws pallet & case flds in order to require the ****/
   /* *** re-entry if there has been an error and prior lines ****/
   /* *** have been cleared                                   ****/
   /* ************************************************************/

  SL0CW01.SL2PALET = " ";
  SL0CW01.SL2CASE = " ";

   /* ************************************************************/
   /* *** reset key input fld attr.s as orig.ly defined       ****/
   /* ************************************************************/

   /* F SL0CW01.SL0CWFSW = 'Y';*/
  set SL0CM110.XWHCD initialAttributes;
  set SL0CM110.TS3CNTNR initialAttributes;
   /* SET SL0CM110.IN7STNBR DEFINED;*/
  set SL0CM110.XITCD initialAttributes;
  set SL0CM110.XARCD initialAttributes;
  set SL0CM110.YMTCD initialAttributes;
  set SL0CM110.SL4ZONE initialAttributes;
  set SL0CM110.SL1COMNT initialAttributes;
  set SL0CM110.SL1RCVR initialAttributes;
  set SL0CM110.SL5LOCTN initialAttributes;
   /* SET SL0CM110.SL0CMPID DEFINED;*/
   /* SET SL0CM110.PC4ORTYP DEFINED;*/
  set SL0CM110.PC-SAP-PO-NBR initialAttributes;
  set SL0CM110.PC3PONBR initialAttributes;
  set SL0CM110.XGPCD initialAttributes;
  set SL0CM110.SY1STNBR initialAttributes;
  set SL0CM110.SY2CLRID initialAttributes;
  set SL0CM110.XDMCD initialAttributes;
  set SL0CM110.XQACD initialAttributes;
  set SL0CM110.XSDCD initialAttributes;
  set SL0CM110.XSLCD initialAttributes;
  set SL0CM110.XPGCD initialAttributes;
  set SL0CM110.XUMCD initialAttributes;
  set SL0CM110.XOWCD initialAttributes;
  set SL0CM110.INASAID initialAttributes;

  if (SL0CM110.XWHCD == "51"
   || SL0CM110.XWHCD == "07"
   || SL0CM110.XWHCD == "04"
   || SL0CM110.XWHCD == "02"
   || SL0CM110.XWHCD == "25"
   || SL0CM110.XWHCD == "42") /* Canada*/
    set SL0CM110.SY1UNPCS initialAttributes;
  else
    set SL0CM110.SY1UNPCS skip, invisible;
  end

   /* ND ;*/

   /* ************************************************************/
   /* *** reset data input fld attr.s as orig.ly defined      ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    set SL0CM110.SL2PALET[SLWIDX01] initialAttributes;
    set SL0CM110.SL2CASE[SLWIDX01] initialAttributes;
    set SL0CM110.SL0CMSZ1[SLWIDX01] initialAttributes;
    set SL0CM110.SL0CMQY1[SLWIDX01] initialAttributes;
    set SL0CM110.SL0CMSZ2[SLWIDX01] initialAttributes;
    set SL0CM110.SL0CMQY2[SLWIDX01] initialAttributes;
    set SL0CM110.SL0CMSZ3[SLWIDX01] initialAttributes;
    set SL0CM110.SL0CMQY3[SLWIDX01] initialAttributes;
    set SL0CM110.SL0CMSZ4[SLWIDX01] initialAttributes;
    set SL0CM110.SL0CMQY4[SLWIDX01] initialAttributes;
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0CM110.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0CM110.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0CS1G(); /* <=== missing hdr key edits*/
    if (SLWREC.SLWERRSW == "Y")
      exit stack;
    end
    SL0CS1P(); /* <=== hdr key edits*/
    if (SLWREC.SLWERRSW == "Y")
      exit stack;
    end
    SL0CS1J(); /* <=== detect existing hdr*/
    if (SLWREC.SLWERRSW == "Y")
      exit stack;
    end
    if (SLWREC.SLWSKYSW == "Y")
      SL0CSF1(); /* <=== save key values*/
      SL0CS1H(); /* <=== same hdr data edits*/
      if (SLWREC.SLWERRSW == "Y")
        exit stack;
      end
      SL0CS1I(); /* <=== item edits*/
    else
      SL0CSH1(); /* <=== new hdr edits*/
      if (SLWREC.SLWERRSW == "Y")
        exit stack;
      end
      SL0CSE1(); /* <=== obtain new rcvg rpt no.*/
      if (SLWREC.SLWERRSW == "Y")
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* <=== reset any updates*/
        exit stack;
      end
      SL0CS1I(); /* <=== item edits*/
      if (SLWREC.SLWERRSW == "Y")
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* <=== reset any updates*/
        exit stack;
      end
      XSX3CTM(); /* <=== get current hhmmss*/
      SL0CS1K(); /* <=== add new hdr*/
      if (SLWREC.SLWERRSW == "Y")
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* <=== reset any updates*/
        exit stack;
      end
      SL0CSF1(); /* <=== save key values*/
    end
    if (SLWREC.SLWERRSW == "Y")
      exit stack;
    end
   /* IF SL1REC.IN7STNBR GT 0;*/
     /* SL0CS1B;                      /* <=== read stock xfer itm row*/
     /* IF SLWREC.SLWERRSW EQ 'Y';*/
       /* CALL EZEROLLB;              /* <=== reset any updates*/
       /* EZEFLO;*/
     /* END;*/
   /* END;*/
    XSX3CTM(); /* <=== get current hhmmss*/
    SLWREC.SLWIDX01 = 1;
    SLWREC.SLWFTMSW = "Y";
    while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
      if (SLWREC.SLWIDX01 == SLWREC.SLWLINPP)
        if (SL0CM110.SL0CMSZ1[SLWIDX01] > " ")
          set SL0CM110.SL2PALET[1] cursor;
        else
          set SL0CM110.SL5LOCTN cursor;
        end
      end
      SL0CSR1(); /* <=== data entry edits*/
      if (SLWREC.SLWERRSW == "Y")
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* <=== reset any updates*/
        exit stack;
      end
      if (SLWREC.SLWSEXSW == "Y")
         /* ** next sentence ***/
      else
        SL0CSU1(); /* <=== update database*/
        if (SLWREC.SLWERRSW == "Y")
          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback(); /* <=== reset any updates*/
          exit stack;
        end
        VGVar.handleSysLibraryErrors = 0;
        sysLib.commit(); /* <=== commit any updates*/
        SL0CS1A(); /* <=== clear line*/
      end
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
    end
    if (SLWREC.SLWFTMSW == "Y")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "120J";
      SLWREC.SLWMSGNO = 0009; /* <--- required fld msg*/
      set SL0CM110.SL2PALET[1] cursor, bold;
      set SL0CM110.SL0CMSZ1[1] bold;
      set SL0CM110.SL0CMQY1[1] bold;
    else
      SLWREC.XXXLOCID = "120 ";
      SLWREC.SLWMSGNO = 0020; /* <--- trans. complete msg*/
      SL0CM110.INASAID = 0; /* <--- zeor out screen sas*/
    end
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF12: do key & data entry edits only             ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf12)
    SL0CS1G(); /* <=== missing hdr key edits*/
    if (SLWREC.SLWERRSW == "Y")
      exit stack;
    end
    SL0CS1P(); /* <=== hdr key edits*/
    if (SLWREC.SLWERRSW == "Y")
      exit stack;
    end
    SL0CSB1(); /* <=== same hdr key edits*/
    if (SLWREC.SLWSKYSW == "Y")
      SL0CS1H(); /* <=== same hdr data edits*/
      if (SLWREC.SLWERRSW == "Y")
        exit stack;
      end
      SL0CS1I(); /* <=== item edits*/
    else
      SL0CS1J(); /* <=== detect existing hdr*/
      if (SLWREC.SLWERRSW == "Y")
        exit stack;
      end
      if (SLWREC.SLWSKYSW == "Y")
        SL0CS1H(); /* <=== same hdr data edits*/
        if (SLWREC.SLWERRSW == "Y")
          exit stack;
        end
        SL0CS1I(); /* <=== item edits*/
      else
        SL0CSH1(); /* <=== new hdr edits*/
        if (SLWREC.SLWERRSW == "Y")
          exit stack;
        end
        SL0CM110.SL1RCRNO = 0;
        SL0CS1I(); /* <=== item edits*/
        if (SLWREC.SLWERRSW == "Y")
          exit stack;
        end
      end
    end
    if (SLWREC.SLWERRSW == "Y")
      exit stack;
    end
    SLWREC.SLWIDX01 = 1;
    while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
      SL0CSR1(); /* <=== data entry edits*/
      if (SLWREC.SLWERRSW == "Y")
        exit stack;
      end
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
    end
    if (SLWREC.SLWFTMSW == "Y")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "120K";
      SLWREC.SLWMSGNO = 0009; /* <--- required fld msg*/
      set SL0CM110.SL2PALET[1] cursor, bold;
      set SL0CM110.SL0CMSZ1[1] bold;
      set SL0CM110.SL0CMQY1[1] bold;
    else
      SLWREC.XXXLOCID = "120 ";
      SLWREC.SLWMSGNO = 0026; /* <--- edits ok msg*/
      set SL0CM110.SL2PALET[1] cursor;
    end
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level                                   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17)
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "120I";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0C120

// one time initializations
Function SL0C210()


   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0CM210 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0CW02 empty; /* appl. working storage area*/

  SLWREC.XXXMAPNM = "SL0CM210";
  SLWREC.XXXTITLE = "RECEIVING COUNT MAINTENANCE";

  SLWREC.SLWTALOC = "SL0C210 "; /* TA0020 exec location(2)*/
  TA1REC.TA1MAP = "SL0CM210"; /* TA0020 current map name*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* saved msg number*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0CM210.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0CM210.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0CM210.XXXTITLE = SLWREC.XXXTITLE;
  SL0CM210.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  if (COMMAREA.CAUSERA > " ")
    SL0CS02(); /* <=== causera input processing*/
  end

  SL0CM210.XWHCD = COMMAREA.XWHCD;
  SL0CM210.XGPCD = COMMAREA.XGPCD;
  SL0CM210.XMSLMOPT = "P";
  SL0CM210.SY2CLRID = "00 ";
  SL0CM210.XDMCD = "00";
  SL0CM210.XQACD = "01";
  SL0CM210.XSDCD = "000";
  SL0CM210.XSLCD = "000";
  SL0CM210.XPGCD = "00";
  SL0CM210.XOWCD = "00";
  SL0CW02.SL0CWFSW = "Y";

  if (SL0CM210.XWHCD == "51"
   || SL0CM210.XWHCD == "07"
   || SL0CM210.XWHCD == "04"
   || SL0CM210.XWHCD == "02"
   || SL0CM210.XWHCD == "25"
   || SL0CM210.XWHCD == "42") /* Canada*/
    if (SL0CM210.XMSLMOPT == "P")
      set SL0CM210.SY1UNPCS initialAttributes;
    else
      set SL0CM210.SY1UNPCS skip, invisible;
    end
  else
    set SL0CM210.SY1UNPCS skip, invisible;
  end

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end SL0C210

// converse & control key entry
Function SL0C220()


   /* ************************************************************/
   /* *** protect (askip) & darken hdr data fields            ****/
   /* *** note: cursor is set if error or is map's default    ****/
   /* ************************************************************/

   /* SET SL0CM210.IN7STNBR AUTOSKIP,DARK;*/
  set SL0CM210.XITCD skip, invisible;
  set SL0CM210.XARCD skip, invisible;
  set SL0CM210.SL4ZONE skip, invisible;
  set SL0CM210.SL1RCVR skip, invisible;
  set SL0CM210.SL1COMNT skip, invisible;
  set SL0CM210.YMTCD skip, invisible;

   /* ************************************************************/
   /* *** protect (askip) & darken itm data fields            ****/
   /* ************************************************************/

  set SL0CM210.SL5LOCTN skip, invisible;
  set SL0CM210.INASAID skip, invisible;

  set SL0CM210.SL0CMTOT skip, invisible;

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= 30)
    set SL0CM210.SY4IDDSC[SLWIDX01] skip, invisible;
    set SL0CM210.SL2RCVD[SLWIDX01] skip, invisible;
    set SL0CM210.SL0CMADJ[SLWIDX01] skip, invisible;
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0CM210.XXXERRID = SLWREC.XXXERRID;


  converse SL0CM210 ;


   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220A";
    SLWREC.SLWMSGNO = 0;
    SL0CM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220C";
    SLWREC.SLWMSGNO = 0;
    SL0CM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220D";
    SLWREC.SLWMSGNO = 0;
    SL0CM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF18: save this map's key values in SLXREC and   ****/
   /* ***          go to SL0D selection #3 to compare the     ****/
   /* ***          quantity received vs packing list          ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf18)
    SL0CS12(); /* <=== USERA exit processing*/
    COMMAREA.CATOAP = "SL0D";
    COMMAREA.CAITEM = "7";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220J";
    SLWREC.SLWMSGNO = 0;
    SL0CM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0CM210.CATOAP > " ")
    COMMAREA.CATOAP = SL0CM210.CATOAP;
    COMMAREA.CAITEM = SL0CM210.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220E";
    SLWREC.SLWMSGNO = 0;
    SL0CM210.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0CM210.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0CM210.VAGen_EZEMSG = " ";
  set SL0CM210.CATOAP initialAttributes;
  set SL0CM210.CAITEM initialAttributes;
  set SL0CM210.TS3CNTNR cursor;

   /* ************************************************************/
   /* *** reset key input fld attr.s as orig.ly defined       ****/
   /* ************************************************************/

  set SL0CM210.XWHCD initialAttributes;
  set SL0CM210.XMSLMOPT initialAttributes;
  set SL0CM210.TS3CNTNR initialAttributes;

   /* ************************************************************/
   /* *** reset product key fields as defined                 ****/
   /* ************************************************************/

  set SL0CM210.SL2PALET initialAttributes;
  set SL0CM210.SL2CASE initialAttributes;
   /* SET SL0CM210.SL0CMPID DEFINED;*/
   /* SET SL0CM210.PC4ORTYP DEFINED;*/
  set SL0CM210.PC-SAP-PO-NBR initialAttributes;
  set SL0CM210.PC3PONBR initialAttributes;
  set SL0CM210.YMTCD initialAttributes;
  set SL0CM210.XGPCD initialAttributes;
  set SL0CM210.SY1STNBR initialAttributes;
  set SL0CM210.SY2CLRID initialAttributes;
  set SL0CM210.XDMCD initialAttributes;
  set SL0CM210.XQACD initialAttributes;
  set SL0CM210.XSDCD initialAttributes;
  set SL0CM210.XSLCD initialAttributes;
  set SL0CM210.XPGCD initialAttributes;
  set SL0CM210.XUMCD initialAttributes;
  set SL0CM210.XOWCD initialAttributes;

  if (SL0CM210.XWHCD == "51"
   || SL0CM210.XWHCD == "07"
   || SL0CM210.XWHCD == "04"
   || SL0CM210.XWHCD == "02"
   || SL0CM210.XWHCD == "25"
   || SL0CM210.XWHCD == "42") /* Canada*/
    if (SL0CM210.XMSLMOPT == "P")
      set SL0CM210.SY1UNPCS initialAttributes;
    else
      set SL0CM210.SY1UNPCS skip, invisible;
    end
  else
    set SL0CM210.SY1UNPCS skip, invisible;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0CM210.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0CM210.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & processing                     ****/
   /* *** note: make sure change option entered & valid       ****/
   /* ***       since other edits determined by its value     ****/
   /* *** note: attributes setup in 'H' if no errors (for 240)****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    if (SL0CM210.XMSLMOPT > " ")
      if (SL0CM210.XMSLMOPT == "C"
       || SL0CM210.XMSLMOPT == "P")
         /* ** next sentence ***/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "220K";
        SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
        set SL0CM210.XMSLMOPT cursor, bold;
        exit stack;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "220L";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0CM210.XMSLMOPT cursor, bold;
      exit stack;
    end
    SL0CSH2(); /* <=== change enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17)
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "220I";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0C220

// converse & control data entry
Function SL0C240()


   /* ************************************************************/
   /* *** setup non-default (data) cursor position            ****/
   /* *** note: error cursor position has precedence          ****/
   /* ************************************************************/

  if (SLWREC.SLWERRSW == "N")
    if (SL0CM210.XMSLMOPT == "C")

     /* SET SL0CM210.IN7STNBR CURSOR;*/
    else
      set SL0CM210.SL0CMTOT cursor;
    end
  end

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0CM210.XXXERRID = SLWREC.XXXERRID;


  converse SL0CM210 ;


   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "240A";
    SLWREC.SLWMSGNO = 0;
    SL0CM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "240C";
    SLWREC.SLWMSGNO = 0;
    SL0CM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "240D";
    SLWREC.SLWMSGNO = 0;
    SL0CM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF18: save this map's key values in SLXREC and   ****/
   /* ***          go to SL0D selection #3 to compare the     ****/
   /* ***          quantity received vs packing list          ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf18)
    SL0CS12(); /* <=== USERA exit processing*/
    COMMAREA.CATOAP = "SL0D";
    COMMAREA.CAITEM = "7";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "240J";
    SLWREC.SLWMSGNO = 0;
    SL0CM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0CM210.CATOAP > " ")
    COMMAREA.CATOAP = SL0CM210.CATOAP;
    COMMAREA.CAITEM = SL0CM210.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "240E";
    SLWREC.SLWMSGNO = 0;
    SL0CM210.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0CM210.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0CM210.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "240 ";
  set SL0CM210.CATOAP initialAttributes;
  set SL0CM210.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set SL0CM210.XMSLMOPT initialAttributes;
  set SL0CM210.XWHCD initialAttributes;
  set SL0CM210.TS3CNTNR initialAttributes;


   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0CM210.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "240F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0CM210.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do key & data entry edits & process inputs****/
   /* *** note: make sure change option entered & valid       ****/
   /* ***       since other edits determined by its value     ****/
   /* *** note: reset item data flds as defined if opt=prod   ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    if (SL0CM210.XMSLMOPT > " ")
      if (SL0CM210.XMSLMOPT == "C"
       || SL0CM210.XMSLMOPT == "P")
         /* ** next sentence ***/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "240K";
        SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
        set SL0CM210.XMSLMOPT cursor, bold;
        exit stack;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "240L";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0CM210.XMSLMOPT cursor, bold;
      exit stack;
    end
    if (SL0CM210.XMSLMOPT == "C")
       /* ************************************************************/
       /* *** if option = c, reset hdr data flds                  ****/
       /* *** note: product flds are already askip,dark           ****/
       /* ************************************************************/
     /* SET SL0CM210.IN7STNBR DEFINED;*/
      set SL0CM210.XITCD initialAttributes;
      set SL0CM210.XARCD initialAttributes;
      set SL0CM210.SL4ZONE initialAttributes;
      set SL0CM210.SL1COMNT initialAttributes;
      set SL0CM210.SL1RCVR initialAttributes;
      set SL0CM210.YMTCD initialAttributes;
      set SL0CM210.SY1UNPCS skip, invisible;
    else
       /* ************************************************************/
       /* *** opt = p, reset all product fields                   ****/
       /* *** note: hdr key flds were already reset               ****/
       /* *** note: hdr data flds have been protected & undarkened****/
       /* ************************************************************/
      if (SL0CM210.XWHCD == "51"
       || SL0CM210.XWHCD == "07"
       || SL0CM210.XWHCD == "04"
       || SL0CM210.XWHCD == "02"
       || SL0CM210.XWHCD == "25"
       || SL0CM210.XWHCD == "42") /* Canada*/
        set SL0CM210.SY1UNPCS initialAttributes;
      else
        set SL0CM210.SY1UNPCS skip, invisible;
      end
      set SL0CM210.SL2PALET initialAttributes;
      set SL0CM210.SL2CASE initialAttributes;
     /* SET SL0CM210.SL0CMPID DEFINED;*/
     /* SET SL0CM210.PC4ORTYP DEFINED;*/
      set SL0CM210.PC-SAP-PO-NBR initialAttributes;
      set SL0CM210.PC3PONBR initialAttributes;
      set SL0CM210.YMTCD initialAttributes;
      set SL0CM210.XGPCD initialAttributes;
      set SL0CM210.SY1STNBR initialAttributes;
      set SL0CM210.SY2CLRID initialAttributes;
      set SL0CM210.XDMCD initialAttributes;
      set SL0CM210.XQACD initialAttributes;
      set SL0CM210.XSDCD initialAttributes;
      set SL0CM210.XSLCD initialAttributes;
      set SL0CM210.XPGCD initialAttributes;
      set SL0CM210.XUMCD initialAttributes;
      set SL0CM210.XOWCD initialAttributes;
      set SL0CM210.SL5LOCTN initialAttributes;
      set SL0CM210.INASAID initialAttributes;
      set SL0CM210.SL0CMTOT initialAttributes;
      SLWREC.SLWIDX01 = 1;
      while (SLWREC.SLWIDX01 <= 30)
        if (SL0CW02.SY5SZID[SLWIDX01] > 0)
          set SL0CM210.SY4IDDSC[SLWIDX01] skip;
        else
          set SL0CM210.SY4IDDSC[SLWIDX01] initialAttributes;
        end
        set SL0CM210.SL2RCVD[SLWIDX01] skip;
        set SL0CM210.SL0CMADJ[SLWIDX01] initialAttributes;
        SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
      end
    end
    SL0CSB2(); /* <=== same key edits*/
    if (SLWREC.SLWSKYSW == "N")
      SL0CSF2(); /* <=== save key values*/
      SL0CSQ2(); /* <=== reset screen (clear)*/
      SL0CSH2(); /* <=== enter processing & set attr.s*/
      exit stack;
    end
    SL0CSR2(); /* <=== hdr data entry edits*/
    if (SLWREC.SLWERRSW == "Y")
      exit stack;
    end
    XSX3CTM(); /* <=== get current hhmmss*/
    if (SL0CM210.XMSLMOPT == "C")
      if (SLWREC.SLWSEXSW == "N")
        SL0CSU2(); /* <=== hdr data update*/
        if (SLWREC.SLWERRSW == "Y")
          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback(); /* <=== reset any updates*/
          SL0CST2(); /* <=== reset screen (empty)*/
          exit stack;
        end
        VGVar.handleSysLibraryErrors = 1;
        sysLib.commit(); /* <=== commit any updates*/
        SLWREC.XXXLOCID = "240M";
        SLWREC.SLWMSGNO = 0020; /* <--- trans. complete msg*/
        set SL0CM210.TS3CNTNR cursor;
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "240N";
        SLWREC.SLWMSGNO = 0070; /* <--- update not needed msg*/
        set SL0CM210.XMSLMOPT cursor, bold;
      end
      exit stack;
    end
    if (SLWREC.SLWSEXSW == "N")
      SL0CSU2(); /* <=== hdr data updates*/
      if (SLWREC.SLWERRSW == "Y")
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* <=== reset any updates*/
        SL0CST2(); /* <=== reset screen (empty)*/
        exit stack;
      end
      VGVar.handleSysLibraryErrors = 1;
      sysLib.commit(); /* <=== commit any updates*/
    end
    if (SL0CW02.SL0CWICS == "Y")
      SL0CS2B(); /* <=== setup item data from map*/
    end
    SLWREC.SLWIDX01 = 1;
    while (SLWREC.SLWIDX01 <= 30)
      SL0CS2R(); /* <=== item data entry edits by line*/
      if (SLWREC.SLWERRSW == "Y")
        exit stack;
      end
      if (SL0CW02.SL0CWICS == "Y"
       || SLWREC.SLWSEXSW == "N")
        if (SL0CM210.SL0CMADJ[SLWIDX01] != 0)
          SL0CS2U(); /* <=== item data updates by line*/
          if (SLWREC.SLWERRSW == "Y")
            VGVar.handleSysLibraryErrors = 0;
            sysLib.rollback(); /* <=== reset any updates*/
            exit stack;
          end
          VGVar.handleSysLibraryErrors = 1;
          sysLib.commit(); /* <=== commit any updates*/
          SL0CS2A(); /* <=== clear size adj.*/
        end
      end
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
    end
    SL0CS2E(); /* <=== delete hdr if no items*/
    if (SLWREC.SLWERRSW == "Y")
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* <=== reset any updates*/
      exit stack;
    end
    VGVar.handleSysLibraryErrors = 1;
    sysLib.commit(); /* <=== commit any updates*/
    set SL0CM210.SL2PALET cursor;
    SLWREC.SLWMSGNO = 0020; /* <--- trans. complete msg*/
     /* ** reset display flds since map will not be cleared*/
    SL0CM210.SL0CMTOT = 0;
    SL0CM210.XITABRV = " ";
    SL0CM210.SL1RCRNO = 0;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF12: do key & data entry edits only             ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf12)
    if (SL0CM210.XMSLMOPT > " ")
      if (SL0CM210.XMSLMOPT == "C"
       || SL0CM210.XMSLMOPT == "P")
         /* ** next sentence ***/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "240P";
        SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
        set SL0CM210.XMSLMOPT cursor, bold;
        exit stack;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "240Q";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0CM210.XMSLMOPT cursor, bold;
      exit stack;
    end
    if (SL0CM210.XMSLMOPT == "C")
       /* ************************************************************/
       /* *** if option = c, reset hdr data flds                  ****/
       /* *** note: product flds are already askip,dark           ****/
       /* ************************************************************/
     /* SET SL0CM210.IN7STNBR DEFINED;*/
      set SL0CM210.XITCD initialAttributes;
      set SL0CM210.XARCD initialAttributes;
      set SL0CM210.SL4ZONE initialAttributes;
      set SL0CM210.SL1RCVR initialAttributes;
      set SL0CM210.SL1COMNT initialAttributes;
      set SL0CM210.YMTCD initialAttributes;
      set SL0CM210.SY1UNPCS skip, invisible;
    else
       /* ************************************************************/
       /* *** opt = p, reset all product fields                   ****/
       /* *** note: hdr key flds were already reset               ****/
       /* *** note: hdr data flds have been protected & undarkened****/
       /* ************************************************************/
      if (SL0CM210.XWHCD == "51"
       || SL0CM210.XWHCD == "07"
       || SL0CM210.XWHCD == "04"
       || SL0CM210.XWHCD == "02"
       || SL0CM210.XWHCD == "25"
       || SL0CM210.XWHCD == "42")
        set SL0CM210.SY1UNPCS initialAttributes;
      else
        set SL0CM210.SY1UNPCS skip, invisible;
      end
      set SL0CM210.SL2PALET initialAttributes;
      set SL0CM210.SL2CASE initialAttributes;
     /* SET SL0CM210.SL0CMPID DEFINED;*/
     /* SET SL0CM210.PC4ORTYP DEFINED;*/
      set SL0CM210.PC3PONBR initialAttributes;
      set SL0CM210.PC-SAP-PO-NBR initialAttributes;
      set SL0CM210.XGPCD initialAttributes;
      set SL0CM210.SY1STNBR initialAttributes;
      set SL0CM210.SY2CLRID initialAttributes;
      set SL0CM210.XDMCD initialAttributes;
      set SL0CM210.XQACD initialAttributes;
      set SL0CM210.XSDCD initialAttributes;
      set SL0CM210.XSLCD initialAttributes;
      set SL0CM210.XPGCD initialAttributes;
      set SL0CM210.XUMCD initialAttributes;
      set SL0CM210.XOWCD initialAttributes;
      set SL0CM210.SL5LOCTN initialAttributes;
      set SL0CM210.INASAID initialAttributes;
      set SL0CM210.SL0CMTOT initialAttributes;
      SLWREC.SLWIDX01 = 1;
      while (SLWREC.SLWIDX01 <= 30)
        if (SL0CW02.SY5SZID[SLWIDX01] > 0)
          set SL0CM210.SY4IDDSC[SLWIDX01] skip;
        else
          set SL0CM210.SY4IDDSC[SLWIDX01] initialAttributes;
        end
        set SL0CM210.SL2RCVD[SLWIDX01] skip;
        set SL0CM210.SL0CMADJ[SLWIDX01] initialAttributes;
        SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
      end
    end
    SL0CSB2(); /* <=== same key edits*/
    if (SLWREC.SLWSKYSW == "N")
      SL0CSF2(); /* <=== save key values*/
      SL0CSQ2(); /* <=== reset screen (clear)*/
      SL0CSH2(); /* <=== enter processing & set attr.s*/
      exit stack;
    end
    SL0CSR2(); /* <=== hdr data entry edits*/
    if (SLWREC.SLWERRSW == "Y")
      exit stack;
    end
    if (SL0CM210.XMSLMOPT == "C")
      if (SLWREC.SLWSEXSW == "N")
        SLWREC.XXXLOCID = "240R";
        SLWREC.SLWMSGNO = 0026; /* <--- edits ok msg*/
        set SL0CM210.TS3CNTNR cursor;
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "240S";
        SLWREC.SLWMSGNO = 0070; /* <--- update not needed msg*/
        set SL0CM210.XMSLMOPT cursor, bold;
      end
      exit stack;
    end
    if (SL0CW02.SL0CWICS == "Y")
      SL0CS2B(); /* <=== setup item data from map*/
    end
    SLWREC.SLWIDX01 = 1;
    while (SLWREC.SLWIDX01 <= 30)
      SL0CW02.SL0CWFSW = "Y";
      SL0CS2R(); /* <=== item data entry edits by line*/
      if (SLWREC.SLWERRSW == "Y")
        exit stack;
      end
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
    end
    set SL0CM210.SL2PALET cursor;
    SLWREC.SLWMSGNO = 0026; /* <--- edits ok msg*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no code executed              ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17)
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "240I";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0C240

// one time initializations
Function SL0C310()


   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0CM310 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0CW03 empty; /* appl. working storage area*/

  SLWREC.XXXMAPNM = "SL0CM310";
  SLWREC.XXXTITLE = "RECEIVING COUNT DELETE";

  SLWREC.SLWTALOC = "SL0C310 "; /* TA0020 exec location(2)*/
  TA1REC.TA1MAP = "SL0CM310"; /* TA0020 current map name*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* saved msg number*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0CM310.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0CM310.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0CM310.XXXTITLE = SLWREC.XXXTITLE;
  SL0CM310.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  if (COMMAREA.CAUSERA > " ")
    SL0CS03(); /* <=== causera input processing*/
  end

  SL0CM310.XWHCD = COMMAREA.XWHCD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end SL0C310

// converse & control key entry
Function SL0C320()


   /* ************************************************************/
   /* *** protect (askip) data fields (if any)                ****/
   /* *** note: cursor is set if error or is map's default    ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0CM310.XXXERRID = SLWREC.XXXERRID;



  converse SL0CM310 ;


   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320A";
    SLWREC.SLWMSGNO = 0;
    SL0CM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320C";
    SLWREC.SLWMSGNO = 0;
    SL0CM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320D";
    SLWREC.SLWMSGNO = 0;
    SL0CM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF18: save this map's key values in SLXREC and   ****/
   /* ***          go to SL0D selection #3 to compare the     ****/
   /* ***          quantity received vs packing list          ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf18)
    SL0CS13(); /* <=== USERA exit processing*/
    COMMAREA.CATOAP = "SL0D";
    COMMAREA.CAITEM = "7";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320J";
    SLWREC.SLWMSGNO = 0;
    SL0CM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0CM310.CATOAP > " ")
    COMMAREA.CATOAP = SL0CM310.CATOAP;
    COMMAREA.CAITEM = SL0CM310.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320E";
    SLWREC.SLWMSGNO = 0;
    SL0CM310.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0CM310.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0CM210.VAGen_EZEMSG = " ";
  set SL0CM310.CATOAP initialAttributes;
  set SL0CM310.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset key input fld attr.s as orig.ly defined       ****/
   /* ************************************************************/

  set SL0CM310.XWHCD initialAttributes;
  set SL0CM310.XMSLMOPT initialAttributes;
  set SL0CM310.TS3CNTNR initialAttributes;
  set SL0CM310.SL2PALET initialAttributes;
  set SL0CM310.SL2CASE initialAttributes;

   /* ************************************************************/
   /* *** reset data input fld attr.s as orig.ly defined      ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0CM310.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0CM310.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: first edit option for use in 'H'              ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    if (SL0CM310.XMSLMOPT > " ")
      if (SL0CM310.XMSLMOPT == "C"
       || SL0CM310.XMSLMOPT == "P"
       || SL0CM310.XMSLMOPT == "A")
         /* ** next sentence ***/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "320K";
        SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
        set SL0CM310.XMSLMOPT cursor, bold;
        exit stack;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "320L";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0CM310.XMSLMOPT cursor, bold;
      exit stack;
    end
    SL0CSH3(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17)
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "320I";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0C320

// converse & control data entry
Function SL0C340()


   /* ************************************************************/
   /* *** setup non-default (data) cursor position, if any    ****/
   /* *** note: error cursor position has precedence          ****/
   /* ************************************************************/

  if (SLWREC.SLWERRSW == "N")
    if (SL0CM310.XMSLMOPT == "C")
      SLWREC.SLWMSGNO = 0072; /* <--- press to delete container msg*/
      set SL0CM310.TS3CNTNR cursor;
    else
      if (SL0CM310.XMSLMOPT == "P")
        SLWREC.SLWMSGNO = 0073; /* <--- press to delete pallet msg*/
        set SL0CM310.SL2PALET cursor;
      else
        SLWREC.SLWMSGNO = 0074; /* <--- press to delete case msg*/
        set SL0CM310.SL2CASE cursor;
      end
    end
  end

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0CM310.XXXERRID = SLWREC.XXXERRID;


  converse SL0CM310 ;


   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "340A";
    SLWREC.SLWMSGNO = 0;
    SL0CM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "340C";
    SLWREC.SLWMSGNO = 0;
    SL0CM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "340D";
    SLWREC.SLWMSGNO = 0;
    SL0CM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF18: save this map's key values in SLXREC and   ****/
   /* ***          go to SL0D selection #3 to compare the     ****/
   /* ***          quantity received vs packing list          ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf18)
    SL0CS13(); /* <=== USERA exit processing*/
    COMMAREA.CATOAP = "SL0D";
    COMMAREA.CAITEM = "7";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "340J";
    SLWREC.SLWMSGNO = 0;
    SL0CM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0CM310.CATOAP > " ")
    COMMAREA.CATOAP = SL0CM310.CATOAP;
    COMMAREA.CAITEM = SL0CM310.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "340E";
    SLWREC.SLWMSGNO = 0;
    SL0CM310.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0CM310.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0CM210.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "340 ";
  set SL0CM310.CATOAP initialAttributes;
  set SL0CM310.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set SL0CM310.XWHCD initialAttributes;
  set SL0CM310.XMSLMOPT initialAttributes;
  set SL0CM310.TS3CNTNR initialAttributes;
  set SL0CM310.SL2PALET initialAttributes;
  set SL0CM310.SL2CASE initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0CM310.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "340F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0CM310.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do key & data entry edits & process inputs****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0CSB3(); /* <=== same key edits*/
    if (SLWREC.SLWSKYSW == "N")
      if (SL0CM310.XMSLMOPT > " ")
        if (SL0CM310.XMSLMOPT == "C"
         || SL0CM310.XMSLMOPT == "P"
         || SL0CM310.XMSLMOPT == "A")
           /* ** next sentence ***/
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "340K";
          SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
          set SL0CM310.XMSLMOPT cursor, bold;
          exit stack;
        end
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "340L";
        SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
        set SL0CM310.XMSLMOPT cursor, bold;
        exit stack;
      end
      SL0CSF3(); /* <=== save key values*/
      SL0CSQ3(); /* <=== reset screen (clear)*/
      SL0CSH3(); /* <=== enter processing*/
      exit stack;
    end
    XSX3CTM(); /* <=== get current hhmmss*/
    SL0CSU3(); /* <=== update database*/
    if (SLWREC.SLWERRSW == "Y")
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* <=== reset any updates*/
      SL0CST3(); /* <=== reset screen (empty)*/
      exit stack;
    end
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* <=== commit any updates*/
    SL0CSQ3(); /* <=== reset screen (clear)*/
    if (SL0CM310.XMSLMOPT == "C")
      set SL0CM310.TS3CNTNR cursor;
    else
      if (SL0CM310.XMSLMOPT == "P")
        set SL0CM310.SL2PALET cursor;
      else
        set SL0CM310.SL2CASE cursor;
      end
    end
    SLWREC.SLWMSGNO = 0020; /* <--- trans. complete msg*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF12: do key & data entry edits only             ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf12)
    SL0CSB3(); /* <=== same key edits*/
    if (SLWREC.SLWSKYSW == "N")
      if (SL0CM310.XMSLMOPT > " ")
        if (SL0CM310.XMSLMOPT == "C"
         || SL0CM310.XMSLMOPT == "P"
         || SL0CM310.XMSLMOPT == "A")
           /* ** next sentence ***/
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "340M";
          SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
          set SL0CM310.XMSLMOPT cursor, bold;
          exit stack;
        end
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "340N";
        SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
        set SL0CM310.XMSLMOPT cursor, bold;
        exit stack;
      end
      SL0CSF3(); /* <=== save key values*/
      SL0CSQ3(); /* <=== reset screen (clear)*/
      SL0CSH3(); /* <=== enter processing*/
      exit stack;
    end
    if (SL0CM310.XMSLMOPT == "C")
      set SL0CM310.TS3CNTNR cursor;
    else
      if (SL0CM310.XMSLMOPT == "P")
        set SL0CM310.SL2PALET cursor;
      else
        set SL0CM310.SL2CASE cursor;
      end
    end
    SLWREC.SLWMSGNO = 0026; /* <--- edits ok msg*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no code executed              ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17)
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "340I";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0C340

// one time initializations
Function SL0C410()


   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0CM410 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0CW04 empty; /* appl. working storage area*/

  SLWREC.XXXMAPNM = "SL0CM410";
  SLWREC.XXXTITLE = "RECEIVING INSPECTION";

  SLWREC.SLWTALOC = "SL0C410 "; /* TA0020 exec location(2)*/
  TA1REC.TA1MAP = "SL0C410 "; /* TA0020 current map name*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* saved msg number*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0CM410.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0CM410.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0CM410.XXXTITLE = SLWREC.XXXTITLE;
  SL0CM410.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  if (COMMAREA.CAUSERA > " ")
    SL0CS04(); /* <=== causera input processing*/
  end

  SL0CM410.XWHCD = COMMAREA.XWHCD;
  SL0CM410.XGPCD = COMMAREA.XGPCD;
  SL0CM410.SY2CLRID = "00 ";
  SL0CM410.XDMCD = "00";
  SL0CM410.XQACD = "01";

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  SLWREC.SLWLINPP = 11; /* The Detail line set to 11*/


   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end SL0C410

// converse & control key entry
Function SL0C420()


   /* ************************************************************/
   /* *** protect (askip) data fields (if any)                ****/
   /* *** note: cursor is set if error or is map's default    ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    set SL0CM410.SL0CMCSD[SLWIDX01] skip, invisible;
    set SL0CM410.SL0CMCSL[SLWIDX01] skip, invisible;
    set SL0CM410.SL0CMCPG[SLWIDX01] skip, invisible;
    set SL0CM410.SL0CMCUM[SLWIDX01] skip, invisible;
    set SL0CM410.SL0CMCOW[SLWIDX01] skip, invisible;
    set SL0CM410.SL0CMNSD[SLWIDX01] skip, invisible;
    set SL0CM410.SL0CMNSL[SLWIDX01] skip, invisible;
    set SL0CM410.SL0CMNPG[SLWIDX01] skip, invisible;
    set SL0CM410.SL0CMNUM[SLWIDX01] skip, invisible;
    set SL0CM410.SL0CMNOW[SLWIDX01] skip, invisible;
    set SL0CM410.SL0CMBPL[SLWIDX01] skip, invisible;
    set SL0CM410.SL0CMEPL[SLWIDX01] skip, invisible;
    set SL0CM410.SL0CMBCN[SLWIDX01] skip, invisible;
    set SL0CM410.SL0CMECN[SLWIDX01] skip, invisible;
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0CM410.XXXERRID = SLWREC.XXXERRID;


  converse SL0CM410 ;


   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420A";
    SLWREC.SLWMSGNO = 0;
    SL0CM410.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420C";
    SLWREC.SLWMSGNO = 0;
    SL0CM410.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420D";
    SLWREC.SLWMSGNO = 0;
    SL0CM410.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF18: save this map's key values in SLXREC and   ****/
   /* ***          go to SL0D selection #3 to compare the     ****/
   /* ***          quantity received vs packing list          ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf18)
    SL0CS14(); /* <=== USERA exit processing*/
    COMMAREA.CATOAP = "SL0D";
    COMMAREA.CAITEM = "7";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420J";
    SLWREC.SLWMSGNO = 0;
    SL0CM410.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0CM410.CATOAP > " ")
    COMMAREA.CATOAP = SL0CM410.CATOAP;
    COMMAREA.CAITEM = SL0CM410.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420E";
    SLWREC.SLWMSGNO = 0;
    SL0CM410.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0CM410.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0CM410.VAGen_EZEMSG = " ";
  set SL0CM410.CATOAP initialAttributes;
  set SL0CM410.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset key input fld attr.s as orig.ly defined       ****/
   /* ************************************************************/

  set SL0CM410.XWHCD initialAttributes;
  set SL0CM410.TS3CNTNR initialAttributes;
   /* SET SL0CM410.IN7STNBR DEFINED;*/
   /* SET SL0CM410.SL0CMPID DEFINED;*/
   /* SET SL0CM410.PC4ORTYP DEFINED;*/
  set SL0CM410.PC3PONBR initialAttributes;
  set SL0CM410.PC-SAP-PO-NBR initialAttributes;
  set SL0CM410.XGPCD initialAttributes;
  set SL0CM410.SY1STNBR initialAttributes;
  set SL0CM410.SY2CLRID initialAttributes;
  set SL0CM410.XDMCD initialAttributes;
  set SL0CM410.XQACD initialAttributes;

   /* ************************************************************/
   /* *** reset data input fld attr.s as orig.ly defined      ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    set SL0CM410.SL0CMCSD[SLWIDX01] initialAttributes;
    set SL0CM410.SL0CMCSL[SLWIDX01] initialAttributes;
    set SL0CM410.SL0CMCPG[SLWIDX01] initialAttributes;
    set SL0CM410.SL0CMCUM[SLWIDX01] initialAttributes;
    set SL0CM410.SL0CMCOW[SLWIDX01] initialAttributes;
    set SL0CM410.SL0CMNSD[SLWIDX01] initialAttributes;
    set SL0CM410.SL0CMNSL[SLWIDX01] initialAttributes;
    set SL0CM410.SL0CMNPG[SLWIDX01] initialAttributes;
    set SL0CM410.SL0CMNUM[SLWIDX01] initialAttributes;
    set SL0CM410.SL0CMNOW[SLWIDX01] initialAttributes;
    set SL0CM410.SL0CMBPL[SLWIDX01] initialAttributes;
    set SL0CM410.SL0CMEPL[SLWIDX01] initialAttributes;
    set SL0CM410.SL0CMBCN[SLWIDX01] initialAttributes;
    set SL0CM410.SL0CMECN[SLWIDX01] initialAttributes;
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0CM410.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0CM410.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0CSH4(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17)
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "420I";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0C420

// converse & control data entry
Function SL0C440()


   /* ************************************************************/
   /* *** setup non-default (data) cursor position, if any    ****/
   /* *** note: error cursor position has precedence          ****/
   /* ************************************************************/
   /* *** set cursor to beginning of current data field       ****/
   /* *** CHNG REQ # SL1142b         RVAKEL  11/20/90         ****/
   /* ************************************************************/

  if (SLWREC.SLWERRSW == "N")
    set SL0CM410.SL0CMCSD cursor;
  end

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0CM410.XXXERRID = SLWREC.XXXERRID;


  converse SL0CM410 ;


   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "440A";
    SLWREC.SLWMSGNO = 0;
    SL0CM410.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "440C";
    SLWREC.SLWMSGNO = 0;
    SL0CM410.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "440D";
    SLWREC.SLWMSGNO = 0;
    SL0CM410.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF18: save this map's key values in SLXREC and   ****/
   /* ***          go to SL0D selection #3 to compare the     ****/
   /* ***          quantity received vs packing list          ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf18)
    SL0CS14(); /* <=== USERA exit processing*/
    COMMAREA.CATOAP = "SL0D";
    COMMAREA.CAITEM = "7";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "440J";
    SLWREC.SLWMSGNO = 0;
    SL0CM410.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0CM410.CATOAP > " ")
    COMMAREA.CATOAP = SL0CM410.CATOAP;
    COMMAREA.CAITEM = SL0CM410.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "440E";
    SLWREC.SLWMSGNO = 0;
    SL0CM410.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0CM410.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0CM410.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "440 ";
  set SL0CM410.CATOAP initialAttributes;
  set SL0CM410.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set SL0CM410.XWHCD initialAttributes;
  set SL0CM410.TS3CNTNR initialAttributes;
   /* SET SL0CM410.IN7STNBR DEFINED;*/
   /* SET SL0CM410.SL0CMPID DEFINED;*/
   /* SET SL0CM410.PC4ORTYP DEFINED;*/
  set SL0CM410.PC3PONBR initialAttributes;
  set SL0CM410.PC-SAP-PO-NBR initialAttributes;
  set SL0CM410.XGPCD initialAttributes;
  set SL0CM410.SY1STNBR initialAttributes;
  set SL0CM410.SY2CLRID initialAttributes;
  set SL0CM410.XDMCD initialAttributes;
  set SL0CM410.XQACD initialAttributes;

   /* ************************************************************/
   /* *** reset data input fld attr.s as orig.ly defined      ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    set SL0CM410.SL0CMCSD[SLWIDX01] initialAttributes;
    set SL0CM410.SL0CMCSL[SLWIDX01] initialAttributes;
    set SL0CM410.SL0CMCPG[SLWIDX01] initialAttributes;
    set SL0CM410.SL0CMCUM[SLWIDX01] initialAttributes;
    set SL0CM410.SL0CMCOW[SLWIDX01] initialAttributes;
    set SL0CM410.SL0CMNSD[SLWIDX01] initialAttributes;
    set SL0CM410.SL0CMNSL[SLWIDX01] initialAttributes;
    set SL0CM410.SL0CMNPG[SLWIDX01] initialAttributes;
    set SL0CM410.SL0CMNUM[SLWIDX01] initialAttributes;
    set SL0CM410.SL0CMNOW[SLWIDX01] initialAttributes;
    set SL0CM410.SL0CMBPL[SLWIDX01] initialAttributes;
    set SL0CM410.SL0CMEPL[SLWIDX01] initialAttributes;
    set SL0CM410.SL0CMBCN[SLWIDX01] initialAttributes;
    set SL0CM410.SL0CMECN[SLWIDX01] initialAttributes;
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0CM410.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "440F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0CM410.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do key & data entry edits & process inputs****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0CSB4(); /* <=== same key edits*/
    if (SLWREC.SLWSKYSW == "N")
      SL0CSF4(); /* <=== save key values*/
      SL0CSQ4(); /* <=== reset screen (clear)*/
      SL0CSH4(); /* <=== enter processing*/
      exit stack;
    end
     /* ************************************************************/
     /* *** process each line separately                        ****/
     /* *** note: exit if error                                 ****/
     /* *** note: skip update if special exit sw is 'y'         ****/
     /* ************************************************************/
    XSX3CTM(); /* <=== get current hhmmss*/
    SL0CS4D(); /* <=== setup select constant values*/
    SLWREC.SLWFTMSW = "Y";
    SLWREC.SLWIDX01 = 1;
    while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
      SL0CSR4(); /* <=== data entry edits*/
      if (SLWREC.SLWERRSW == "Y")
        exit stack;
      end
      if (SLWREC.SLWSEXSW == "Y")
         /* ** next sentence ***/
      else
        SL0CSU4(); /* <=== update database*/
        SLWREC.SLWFTMSW = "N";
        if (SLWREC.SLWERRSW == "Y")
          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback(); /* <=== reset any updates*/
          exit stack;
        end
        VGVar.handleSysLibraryErrors = 1;
        sysLib.commit(); /* <=== commit any updates*/
        SL0CS4A(); /* <=== clear line*/
      end
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
    end
     /* ************************************************************/
     /* *** if first time switch is still turned on (=y),       ****/
     /* *** setup missing flds error on first line              ****/
     /* ************************************************************/
    if (SLWREC.SLWFTMSW == "Y")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "440K";
      SLWREC.SLWMSGNO = 0009; /* <--- required field msg*/
      set SL0CM410.SL0CMNSD[1] cursor, bold;
      set SL0CM410.SL0CMNSL[1] bold;
      set SL0CM410.SL0CMNPG[1] bold;
      set SL0CM410.SL0CMNUM[1] bold;
      set SL0CM410.SL0CMNOW[1] bold;
      set SL0CM410.SL0CMEPL[1] bold;
      set SL0CM410.SL0CMBPL[1] bold;
      set SL0CM410.SL0CMECN[1] bold;
      set SL0CM410.SL0CMBCN[1] bold;
    else
      SLWREC.SLWMSGNO = 0020; /* <--- trans. complete msg*/
     /* SET SL0CM410.SL0CMPID CURSOR;*/
      set SL0CM410.PC-SAP-PO-NBR cursor;
    end
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF12: do key & data entry edits only             ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf12)
    SL0CSB4(); /* <=== same key edits*/
    if (SLWREC.SLWSKYSW == "N")
      SL0CSF4(); /* <=== save key values*/
      SL0CST4(); /* <=== reset screen (clear)*/
      SL0CSH4(); /* <=== enter processing*/
      exit stack;
    end
     /* ************************************************************/
     /* *** process each line separately                        ****/
     /* *** note: exit if error                                 ****/
     /* *** note: skip update if special exit sw is 'y'         ****/
     /* ************************************************************/
    SLWREC.SLWFTMSW = "Y";
    SLWREC.SLWIDX01 = 1;
    while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
      SL0CSR4(); /* <=== data entry edits*/
      if (SLWREC.SLWERRSW == "Y")
        exit stack;
      end
      if (SLWREC.SLWSEXSW == "N")
        SLWREC.SLWFTMSW = "N";
      end
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
    end
     /* ************************************************************/
     /* *** if first time switch is still turned on (=y),       ****/
     /* *** setup missing flds error on first line              ****/
     /* ************************************************************/
    if (SLWREC.SLWFTMSW == "Y")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "440L";
      SLWREC.SLWMSGNO = 0009; /* <--- required field msg*/
      set SL0CM410.SL0CMNSD[1] cursor, bold;
      set SL0CM410.SL0CMNSL[1] bold;
      set SL0CM410.SL0CMNPG[1] bold;
      set SL0CM410.SL0CMNUM[1] bold;
      set SL0CM410.SL0CMNOW[1] bold;
      set SL0CM410.SL0CMEPL[1] bold;
      set SL0CM410.SL0CMBPL[1] bold;
      set SL0CM410.SL0CMECN[1] bold;
      set SL0CM410.SL0CMBCN[1] bold;
    else
      SLWREC.SLWMSGNO = 0026; /* <--- edits ok msg*/
     /* SET SL0CM410.SL0CMPID CURSOR;*/
      set SL0CM410.PC-SAP-PO-NBR cursor;
    end
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no code executed              ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17)
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "440I";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0C440

// one time initializations
Function SL0C510()


   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0CM510 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0CW05 empty; /* appl. working storage area*/
  set SL1REC empty; /* receiving log header*/

  SLWREC.XXXMAPNM = "SL0CM510";
  SLWREC.XXXTITLE = "RECEIVING UPDATE SUBMIT";

  SLWREC.SLWTALOC = "SL0C510 "; /* TA0020 exec location(2)*/
  TA1REC.TA1MAP = "SL0CM510"; /* TA0020 current map name*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* saved msg number*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0CM510.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0CM510.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0CM510.XXXTITLE = SLWREC.XXXTITLE;
  SL0CM510.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  if (COMMAREA.CAUSERA > " ")
    SL0CS05(); /* <=== causera input processing*/
  end

  SL0CM510.XWHCD = COMMAREA.XWHCD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  SL0CM510.SL0CMUSW = "Y";

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end SL0C510

// converse & control key entry
Function SL0C520()


   /* ************************************************************/
   /* *** protect (askip) data fields (if any)                ****/
   /* *** note: cursor is set if error or is map's default    ****/
   /* ************************************************************/

  if (SL0CW05.SL0CWUPS != "Y")
    set SL0CM510.SL0CMUSW skip, invisible;
  end

   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0CM510.XXXERRID = SLWREC.XXXERRID;


  converse SL0CM510 ;


   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "520A";
    SLWREC.SLWMSGNO = 0;
    SL0CM510.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "520C";
    SLWREC.SLWMSGNO = 0;
    SL0CM510.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "520D";
    SLWREC.SLWMSGNO = 0;
    SL0CM510.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF19: go to w.o. creation                        ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf18)
    COMMAREA.CATOAP = "SL0E";
    COMMAREA.CAITEM = "1";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "520K";
    SLWREC.SLWMSGNO = 0;
    SL0CM510.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0CM510.CATOAP > " ")
    COMMAREA.CATOAP = SL0CM510.CATOAP;
    COMMAREA.CAITEM = SL0CM510.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "520E";
    SLWREC.SLWMSGNO = 0;
    SL0CM510.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0CM510.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0CM510.VAGen_EZEMSG = " ";
  set SL0CM510.CATOAP initialAttributes;
  set SL0CM510.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset key input fld attr.s as orig.ly defined       ****/
   /* ************************************************************/

  set SL0CM510.XWHCD initialAttributes;
  set SL0CM510.TS3CNTNR initialAttributes;

   /* ************************************************************/
   /* *** reset data input fld attr.s as orig.ly defined      ****/
   /* ************************************************************/

  set SL0CM510.SL0CMUSW initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0CM510.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "520F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0CM510.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & perfrom updates if no errors   ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0CSH5(); /* <=== perform edits*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17)
    exit stack;
  end

   /* ************************************************************/
   /* *** if either pa2 or pa3 has been pressed:              ****/
   /* *** use the 'set map-name page' (only) to make sure     ****/
   /* *** the screen shows the original data since any input  ****/
   /* *** will not have been transmitted                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa1
   || converseVar.eventKey is pa3)
    converseLib.clearScreen();
    
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "520I";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0C520

// causer input processing
Function SL0CS01()


   /* ************************************************************/
   /* *** if entered, use CAUSERA data by first moving it     ****/
   /* *** to the SLXREC working storage layout in order to    ****/
   /* *** 'read' the specific keys for this situation         ****/
   /* *** note: first make sure data present is from one of   ****/
   /* ***       the designated sending maps                   ****/
   /* ************************************************************/

  SLXREC.SLXUSERA = COMMAREA.CAUSERA;

  if (SLXREC.SLXFRMAP == "SL0AM110"
   || SLXREC.SLXFRMAP == "SL0AM210"
   || SLXREC.SLXFRMAP == "SL0AM310"
   || SLXREC.SLXFRMAP == "SL0BM110"
   || SLXREC.SLXFRMAP == "SL0BM210"
   || SLXREC.SLXFRMAP == "SL0CM110"
   || SLXREC.SLXFRMAP == "SL0CM210"
   || SLXREC.SLXFRMAP == "SL0CM310"
   || SLXREC.SLXFRMAP == "SL0CM410"
   || SLXREC.SLXFRMAP == "SL0CM510"
   || SLXREC.SLXFRMAP == "SL0DM110"
   || SLXREC.SLXFRMAP == "SL0DM310")
    SL0CM110.TS3CNTNR = SLXREC.TS3CNTNR;
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS01

// causera input processing
Function SL0CS02()


   /* ************************************************************/
   /* *** if entered, use CAUSERA data by first moving it     ****/
   /* *** to the SLXREC working storage layout in order to    ****/
   /* *** 'read' the specific keys for this situation         ****/
   /* *** note: first make sure data present is from one of   ****/
   /* ***       the designated sending maps                   ****/
   /* ************************************************************/

  SLXREC.SLXUSERA = COMMAREA.CAUSERA;

  if (SLXREC.SLXFRMAP == "SL0AM110"
   || SLXREC.SLXFRMAP == "SL0AM210"
   || SLXREC.SLXFRMAP == "SL0AM310"
   || SLXREC.SLXFRMAP == "SL0BM110"
   || SLXREC.SLXFRMAP == "SL0BM210"
   || SLXREC.SLXFRMAP == "SL0CM110"
   || SLXREC.SLXFRMAP == "SL0CM210"
   || SLXREC.SLXFRMAP == "SL0CM310"
   || SLXREC.SLXFRMAP == "SL0CM410"
   || SLXREC.SLXFRMAP == "SL0CM510"
   || SLXREC.SLXFRMAP == "SL0DM110"
   || SLXREC.SLXFRMAP == "SL0DM310")
    SL0CM210.TS3CNTNR = SLXREC.TS3CNTNR;
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS02

// causera input processing
Function SL0CS03()


   /* ************************************************************/
   /* *** if entered, use CAUSERA data by first moving it     ****/
   /* *** to the SLXREC working storage layout in order to    ****/
   /* *** 'read' the specific keys for this situation         ****/
   /* *** note: first make sure data present is from one of   ****/
   /* ***       the designated sending maps                   ****/
   /* ************************************************************/

  SLXREC.SLXUSERA = COMMAREA.CAUSERA;

  if (SLXREC.SLXFRMAP == "SL0AM110"
   || SLXREC.SLXFRMAP == "SL0AM210"
   || SLXREC.SLXFRMAP == "SL0AM310"
   || SLXREC.SLXFRMAP == "SL0BM110"
   || SLXREC.SLXFRMAP == "SL0BM210"
   || SLXREC.SLXFRMAP == "SL0CM110"
   || SLXREC.SLXFRMAP == "SL0CM210"
   || SLXREC.SLXFRMAP == "SL0CM310"
   || SLXREC.SLXFRMAP == "SL0CM410"
   || SLXREC.SLXFRMAP == "SL0CM510"
   || SLXREC.SLXFRMAP == "SL0DM110"
   || SLXREC.SLXFRMAP == "SL0DM310")
    SL0CM310.TS3CNTNR = SLXREC.TS3CNTNR;
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS03

// USERA input processing
Function SL0CS04()


   /* ************************************************************/
   /* *** if entered, use CAUSERA data by first moving it     ****/
   /* *** to the SLXREC working storage layout in order to    ****/
   /* *** 'read' the specific keys for this situation         ****/
   /* *** note: first make sure data present is from one of   ****/
   /* ***       designated sending maps                       ****/
   /* ************************************************************/

  SLXREC.SLXUSERA = COMMAREA.CAUSERA;

  if (SLXREC.SLXFRMAP == "SL0AM110"
   || SLXREC.SLXFRMAP == "SL0AM210"
   || SLXREC.SLXFRMAP == "SL0AM310"
   || SLXREC.SLXFRMAP == "SL0BM110"
   || SLXREC.SLXFRMAP == "SL0BM210"
   || SLXREC.SLXFRMAP == "SL0CM110"
   || SLXREC.SLXFRMAP == "SL0CM210"
   || SLXREC.SLXFRMAP == "SL0CM310"
   || SLXREC.SLXFRMAP == "SL0CM410"
   || SLXREC.SLXFRMAP == "SL0CM510"
   || SLXREC.SLXFRMAP == "SL0DM110"
   || SLXREC.SLXFRMAP == "SL0DM310")
    SL0CM410.TS3CNTNR = SLXREC.TS3CNTNR;
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS04

// causera input processing
Function SL0CS05()


   /* ************************************************************/
   /* *** if entered, use CAUSERA data by first moving it     ****/
   /* *** to the SLXREC working storage layout in order to    ****/
   /* *** 'read' the specific keys for this situation         ****/
   /* *** note: first make sure data present is from one of   ****/
   /* ***       designated sending maps                       ****/
   /* ************************************************************/

  SLXREC.SLXUSERA = COMMAREA.CAUSERA;

  if (SLXREC.SLXFRMAP == "SL0DM310")
    SL0CM510.XWHCD = SLXREC.XWHCD;
    SL0CM510.TS3CNTNR = SLXREC.TS3CNTNR;
    return;
  end

  if (SLXREC.SLXFRMAP == "SL0AM110"
   || SLXREC.SLXFRMAP == "SL0AM210"
   || SLXREC.SLXFRMAP == "SL0AM310"
   || SLXREC.SLXFRMAP == "SL0BM110"
   || SLXREC.SLXFRMAP == "SL0BM210"
   || SLXREC.SLXFRMAP == "SL0CM110"
   || SLXREC.SLXFRMAP == "SL0CM210"
   || SLXREC.SLXFRMAP == "SL0CM310"
   || SLXREC.SLXFRMAP == "SL0CM410"
   || SLXREC.SLXFRMAP == "SL0CM510"
   || SLXREC.SLXFRMAP == "SL0DM110")
    SL0CM510.TS3CNTNR = SLXREC.TS3CNTNR;
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS05

// USERA exit processing
Function SL0CS11()


   /* ************************************************************/
   /* *** move this map's name and key fields to the working  ****/
   /* *** storage user area layout and then move the entire   ****/
   /* *** SLXREC to the commarea's user area field            ****/
   /* ************************************************************/

  SLXREC.SLXFRMAP = "SL0CM110";

  SLXREC.XWHCD = SL0CM110.XWHCD;
  SLXREC.TS3CNTNR = SL0CM110.TS3CNTNR;

  COMMAREA.CAUSERA = SLXREC.SLXUSERA;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS11

// USERA exit processing
Function SL0CS12()


   /* ************************************************************/
   /* *** move this map's name and key fields to the working  ****/
   /* *** storage user area layout and then move the entire   ****/
   /* *** SLXREC to the commarea's user area field            ****/
   /* ************************************************************/

  SLXREC.SLXFRMAP = "SL0CM210";

  SLXREC.XWHCD = SL0CM210.XWHCD;
  SLXREC.TS3CNTNR = SL0CM210.TS3CNTNR;

  COMMAREA.CAUSERA = SLXREC.SLXUSERA;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS12

// USERA exit processing
Function SL0CS13()


   /* ************************************************************/
   /* *** move this map's name and key fields to the working  ****/
   /* *** storage user area layout and then move the entire   ****/
   /* *** SLXREC to the commarea's user area field            ****/
   /* ************************************************************/

  SLXREC.SLXFRMAP = "SL0CM310";

  SLXREC.XWHCD = SL0CM310.XWHCD;
  SLXREC.TS3CNTNR = SL0CM310.TS3CNTNR;

  COMMAREA.CAUSERA = SLXREC.SLXUSERA;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS13

// USERA exit processing
Function SL0CS14()


   /* ************************************************************/
   /* *** move this map's name and key fields to the working  ****/
   /* *** storage user area layout and then move the entire   ****/
   /* *** SLXREC to the commarea's user area field            ****/
   /* ************************************************************/

  SLXREC.SLXFRMAP = "SL0CM410";

  SLXREC.XWHCD = SL0CM410.XWHCD;
  SLXREC.TS3CNTNR = SL0CM410.TS3CNTNR;

  COMMAREA.CAUSERA = SLXREC.SLXUSERA;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS14

// USERA exit processing
Function SL0CS15()


   /* ************************************************************/
   /* *** move this map's name and key fields to the working  ****/
   /* *** storage user area layout and then move the entire   ****/
   /* *** SLXREC to the commarea's user area field            ****/
   /* ************************************************************/

  SLXREC.SLXFRMAP = "SL0CM510";

  SLXREC.XWHCD = SL0CM510.XWHCD;
  SLXREC.TS3CNTNR = SL0CM510.TS3CNTNR;

  COMMAREA.CAUSERA = SLXREC.SLXUSERA;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS15

// clear line
Function SL0CS1A()


   /* ************************************************************/
   /* *** blank out each line field                           ****/
   /* ************************************************************/

  SL0CM110.SL2PALET[SLWIDX01] = " ";
  SL0CM110.SL2CASE[SLWIDX01] = " ";
  SL0CM110.SL0CMSZ1[SLWIDX01] = " ";
  SL0CM110.SL0CMSZ2[SLWIDX01] = " ";
  SL0CM110.SL0CMSZ3[SLWIDX01] = " ";
  SL0CM110.SL0CMSZ4[SLWIDX01] = " ";
  SL0CM110.SL0CMQY1[SLWIDX01] = 0;
  SL0CM110.SL0CMQY2[SLWIDX01] = 0;
  SL0CM110.SL0CMQY3[SLWIDX01] = 0;
  SL0CM110.SL0CMQY4[SLWIDX01] = 0;
  SL0CW01.SL0CWFSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS1A

// missing hdr key edits
Function SL0CS1G()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: setup defaults for optional fields, if any    ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0CM110.TS3CNTNR > " ")
     /* ** next sentence **       /* Validate the contr against Receiving*/
                                  /* table*/
    VRCVSH01.TS3CNTNR = SL0CM110.TS3CNTNR;
    VRCVSH01.XWHCD = SL0CM110.XWHCD;
    SL0CS1Q(); /* Calling the VRCVSH01*/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1GA";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0CM110.TS3CNTNR cursor, bold;
  end

  if (SL0CM110.XWHCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1GB";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0CM110.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS1G

// same hdr data edits
Function SL0CS1H()


   /* ************************************************************/
   /* *** check map data fields versus the row data values    ****/
   /* *** note: check all flds in reverse order               ****/
   /* ************************************************************/

  if (SL0CM110.SL1RCVR > " ")
    if (SL0CM110.SL1RCVR != SL1REC.SL1RCVR)
      SL0CM110.SL1RCVR = SL1REC.SL1RCVR;
      SLWREC.SLWERRSW = "Y";
      XXXLOCID = "S1HA";
      SLWREC.SLWMSGNO = 0052;
      set SL0CM110.SL1RCVR cursor, bold;
    end
  else
    SL0CM110.SL1RCVR = SL1REC.SL1RCVR;
    SLWREC.SLWERRSW = "Y";
    XXXLOCID = "S1HB";
    SLWREC.SLWMSGNO = 0053;
    set SL0CM110.SL1RCVR cursor, bold;
  end

  if (SL0CM110.SL1COMNT != SL1REC.SL1COMNT)
    SL0CM110.SL1COMNT = SL1REC.SL1COMNT;
    SLWREC.SLWERRSW = "Y";
    XXXLOCID = "S1HC";
    SLWREC.SLWMSGNO = 0052;
    set SL0CM110.SL1COMNT cursor, bold;
  end

   /* ************************************************************/
   /* *** just move receiving report no. each time re: it     ****/
   /* *** can't be changed but might be missing or from a     ****/
   /* *** different container display                         ****/
   /* ************************************************************/

  SL0CM110.SL1RCRNO = SL1REC.SL1RCRNO;

  if (SL0CM110.SL4ZONE > " ")
    if (SL0CM110.SL4ZONE != SL1REC.SL4ZONE)
      SL0CM110.SL4ZONE = SL1REC.SL4ZONE;
      SLWREC.SLWERRSW = "Y";
      XXXLOCID = "S1HE";
      SLWREC.SLWMSGNO = 0052;
      set SL0CM110.SL4ZONE cursor, bold;
    end
  else
    SL0CM110.SL4ZONE = SL1REC.SL4ZONE;
    SLWREC.SLWERRSW = "Y";
    XXXLOCID = "S1HF";
    SLWREC.SLWMSGNO = 0053;
    set SL0CM110.SL4ZONE cursor, bold;
  end

  if (SL0CM110.XARCD > " ")
    if (SL0CM110.XARCD != SL1REC.XARCD)
      SL0CM110.XARCD = SL1REC.XARCD;
      SLWREC.SLWERRSW = "Y";
      XXXLOCID = "S1HG";
      SLWREC.SLWMSGNO = 0052;
      set SL0CM110.XARCD cursor, bold;
    end
  else
    SL0CM110.XARCD = SL1REC.XARCD;
    SLWREC.SLWERRSW = "Y";
    XXXLOCID = "S1HH";
    SLWREC.SLWMSGNO = 0053;
    set SL0CM110.XARCD cursor, bold;
  end

  if (SL0CM110.XITCD > " ")
    if (SL0CM110.XITCD != SL1REC.XITCD)
      SL0CM110.XITCD = SL1REC.XITCD;
      SLWREC.SLWERRSW = "Y";
      XXXLOCID = "S1HI";
      SLWREC.SLWMSGNO = 0052;
      set SL0CM110.XITCD cursor, bold;
    end
  else
    SL0CM110.XITCD = SL1REC.XITCD;
    SLWREC.SLWERRSW = "Y";
    XXXLOCID = "S1HJ";
    SLWREC.SLWMSGNO = 0053;
    set SL0CM110.XITCD cursor, bold;
  end

   /* IF SL0CM110.IN7STNBR GT 0;*/
    /* IF SL0CM110.IN7STNBR NE SL1REC.IN7STNBR;*/
      /* MOVE SL1REC.IN7STNBR TO SL0CM110.IN7STNBR;*/
      /* MOVE 'Y' TO SLWREC.SLWERRSW;*/
      /* MOVE 'S1HK' TO XXXLOCID;*/
      /* MOVE 0052 TO SLWREC.SLWMSGNO;*/
      /* SET SL0CM110.IN7STNBR CURSOR,BRIGHT;*/
    /* END;*/
   /* ELSE;*/
    /* IF SL1REC.IN7STNBR EQ 0;*/
       /* ** next sentence ***/
    /* ELSE;*/
      /* MOVE SL1REC.IN7STNBR TO SL0CM110.IN7STNBR;*/
      /* MOVE 'Y' TO SLWREC.SLWERRSW;*/
      /* MOVE 'S1HL' TO XXXLOCID;*/
      /* MOVE 0053 TO SLWREC.SLWMSGNO;*/
      /* SET SL0CM110.IN7STNBR CURSOR,BRIGHT;*/
    /* END;*/
   /* END;*/

  if (SL0CM110.YMTCD > " ")
    if (SL0CM110.YMTCD != SL1REC.YMTCD)
      SL0CM110.YMTCD = SL1REC.YMTCD;
      SLWREC.SLWERRSW = "Y";
      XXXLOCID = "S1HM";
      SLWREC.SLWMSGNO = 0052;
      set SL0CM110.YMTCD cursor, bold;
    end
  else
    if (SL1REC.YMTCD == " ")
       /* ** next sentence ***/
    else
      SL0CM110.YMTCD = SL1REC.YMTCD;
      SLWREC.SLWERRSW = "Y";
      XXXLOCID = "S1HN";
      SLWREC.SLWMSGNO = 0053;
      set SL0CM110.YMTCD cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS1H

// item edits
Function SL0CS1I()


   /* ************************************************************/
   /* *** check for missing item key fields                   ****/
   /* ************************************************************/

  SL0CS1L(); /* <=== missing item input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no missing fields: edit individual fields           ****/
   /* ************************************************************/

  SL0CS1M(); /* <=== item field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0CS1N(); /* <=== item relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses & setup map ****/
   /* ************************************************************/

  SL0CS1O(); /* <=== obtain item data*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS1I

// detect existing hdr
Function SL0CS1J()


   /* ************************************************************/
   /* *** if receiving log container hdr row found,           ****/
   /* *** set the same key sqitch to 'y' to use hdr data edits****/
   /* ************************************************************/

  SL1REC.XWHCD = SL0CM110.XWHCD;
  SL1REC.TS3CNTNR = SL0CM110.TS3CNTNR;

  TA1REC.TA1LOCAT[2] = "SL0CS1J ";
   /* ** TA1REC.TA1MAP setup during initialization ***/

  XSSL1I0(); /* <=== select rcvg log hdr row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    SLWREC.SLWSKYSW = "Y";
     /* ** next sentnece ***/
  else
    SLWREC.SLWSKYSW = "N";
    if (SQLCA.VAGen_SQLCODE == +100)
      return;
    end
    SLWREC.SLWERRSW = "Y";
    set SL0CM110.XWHCD bold;
    set SL0CM110.TS3CNTNR cursor, bold;
    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.XXXLOCID = "S1JA";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811)
      SLWREC.XXXLOCID = "S1JB";
      SLWREC.SLWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
      return;
    end
    SLWREC.XXXLOCID = "S1JC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** if status code greater than 02, cannot be modified  ****/
   /* ************************************************************/

  if (SL1REC.YRSCD == "01"
   || SL1REC.YRSCD == "02")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1JD";
    SLWREC.SLWMSGNO = 0079; /* <--- cannot be entered msg*/
    set SL0CM110.XWHCD bold;
    set SL0CM110.TS3CNTNR cursor, bold;
    return;
  end


   /* ************************************************************/
   /* *** if plan number gt zero cannot be modified           ****/
   /* ************************************************************/

  if (SL1REC.SWEPLLNB == 0)
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1JE";
    SLWREC.SLWMSGNO = 0407; /* <--- conatiner invalid*/
    set SL0CM110.XWHCD bold;
    set SL0CM110.TS3CNTNR cursor, bold;
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS1J

// add new hdr
Function SL0CS1K()


   /* ************************************************************/
   /* *** since hdr & item key value edits are ok,            ****/
   /* *** add new receiving log header record & continue      ****/
   /* ************************************************************/

  SL1REC.XWHCD = SL0CM110.XWHCD;
  SL1REC.TS3CNTNR = SL0CM110.TS3CNTNR;
  SL1REC.XARCD = SL0CM110.XARCD;
  SL1REC.SL4ZONE = SL0CM110.SL4ZONE;
  SL1REC.XITCD = SL0CM110.XITCD;
  SL1REC.YRSCD = "01";
   /* MOVE SL0CM110.IN7STNBR TO SL1REC.IN7STNBR;*/
  SL1REC.SL1RCRNO = SL0CM110.SL1RCRNO;
  SL1REC.SL1COMNT = SL0CM110.SL1COMNT;
  SL1REC.SL1RCVR = SL0CM110.SL1RCVR;
  SL1REC.YMTCD = SL0CM110.YMTCD;
  SL1REC.SWEPLLNB = 0;
   /* create by, date & time setup by sgrp*/
   /* update by, date & time setup by sgrp*/

  TA1REC.TA1LOCAT[2] = "SL0CS1K ";
   /* ** TA1REC.TA1MAP setup during initialization ***/

  XSSL1A0(); /* <=== add rcvg log hdr row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1KA";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      set SL0CM110.TS3CNTNR cursor, bold;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -803)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1KB";
      SLWREC.SLWMSGNO = 0045; /* <--- duplicate add msg*/
      set SL0CM110.TS3CNTNR cursor, bold;
      return;
    end
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1KC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    set SL0CM110.TS3CNTNR cursor, bold;
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS1K

// missing item edits
Function SL0CS1L()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: setup defaults for optional fields, if any    ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0CM110.XOWCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1LA";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0CM110.XOWCD cursor, bold;
  end

  if (SL0CM110.XPGCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1LB";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0CM110.XPGCD cursor, bold;
  end

  if (SL0CM110.XSLCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1LC";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0CM110.XSLCD cursor, bold;
  end

  if (SL0CM110.XSDCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1LD";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0CM110.XSDCD cursor, bold;
  end

  if (SL0CM110.XQACD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1LE";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0CM110.XQACD cursor, bold;
  end

  if (SL0CM110.XDMCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1LF";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0CM110.XDMCD cursor, bold;
  end

  if (SL0CM110.SY2CLRID > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1LG";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0CM110.SY2CLRID cursor, bold;
  end

  if (SL0CM110.SY1STNBR > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1LH";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0CM110.SY1STNBR cursor, bold;
  end

  if (SL0CM110.XGPCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1LI";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0CM110.XGPCD cursor, bold;
  end

  if (SL0CM110.SL5LOCTN > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1LQ";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0CM110.SL5LOCTN cursor, bold;
  end

  if (SL0CM110.XWHCD == "51" /* warehouse 51 units/case check*/
   || SL0CM110.XWHCD == "07" /* warehouse 07 units/case check*/
   || SL0CM110.XWHCD == "04" /* warehouse 04 units/case check*/
   || SL0CM110.XWHCD == "02" /* warehouse 02 units/case check*/
   || SL0CM110.XWHCD == "25" /* warehouse 25 units/case check*/
   || SL0CM110.XWHCD == "42") /* Canada Whse  units/case check*/
    if (SL0CM110.SY1UNPCS > 0)
       /* ** next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1LQ";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0CM110.SY1UNPCS cursor, bold;
    end
  end

   /* *************************************************************/
   /* * check to see if a cole-haan product if gpc = '02'        **/
   /* *************************************************************/

  if (SL0CM110.XGPCD == "02") /* footware*/
    PKNREC.XGPCD = SL0CM110.XGPCD;
    PKNREC.SY1STNBR = SL0CM110.SY1STNBR;
    PKNREC.SY2CLRID = SL0CM110.SY2CLRID;
    PKNREC.XDMCD = SL0CM110.XDMCD;

    SL0CSVJ();

    if (SLWREC.SLWVERSW == "Y")
      SLWREC.SLWERRSW = "Y";
      set SL0CM110.XGPCD bold;
      set SL0CM110.SY1STNBR cursor, bold;
      set SL0CM110.SY2CLRID bold;
      set SL0CM110.XDMCD bold;
      return;
    end

    SL0CM110.SY1SSTNM = PKNREC.SY1SSTNM;
    SL0CM110.SY2CLRAB = PKNREC.SY2CLRAB;

  end

  SL0CW01.SL0CWPNT = "N"; /* po entered flag*/

   /* IF SL0CM110.IN7STNBR GT 0*/
  if (SL0CM110.XGPCD == "04"
   || PKNREC.XBCCD == "08")
    if (SL0CM110.PC-SAP-PO-NBR > " "
     || SL0CM110.PC3PONBR > 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1LK";
      SLWREC.SLWMSGNO = 0193; /* <--- po fields not valid now*/
      set SL0CM110.PC-SAP-PO-NBR cursor, bold;
      set SL0CM110.PC3PONBR bold;
    end
    return; /* return to previous process*/
  end

   /* IF SL0CM110.IN7STNBR EQ 0*/
   /* IF SL0CM110.XWHCD NE '09'/* For Whse 09, Po/SAP Po required*/
  if (SL0CM110.XWHCD != "03"
   && SL0CM110.XWHCD != "12"
   && SL0CM110.XGPCD != "01"
   && SL0CM110.XGPCD != "04"
   && PKNREC.XBCCD != "08")
    if (SL0CM110.PC-SAP-PO-NBR == " "
     && SL0CM110.PC3PONBR == 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1LL";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0CM110.PC-SAP-PO-NBR cursor, bold;
      set SL0CM110.PC3PONBR bold;
    end
  end

   /* IF SL0CM110.XGPCD EQ '03';*/
    /* IF SL0CM110.SAPPONBR GT ' '*/
      /* OR SL0CM110.PC3PONBR GT 0;*/
      /* MOVE 'Y' TO SLWREC.SLWERRSW;*/
      /* MOVE 'S1LO' TO SLWREC.XXXLOCID;*/
      /* MOVE 0191 TO SLWREC.SLWMSGNO;/* po id invalid for apparel*/
      /* SET SL0CM110.SAPPONBR CURSOR,BRIGHT;*/
      /* SET SL0CM110.PC3PONBR BRIGHT;*/
    /* END;*/
   /* END;*/

  if (SL0CM110.PC3PONBR > 0
   && SL0CM110.PC-SAP-PO-NBR > " ")
    VRCVPH01.XGPCD = SL0CM110.XGPCD;
    VRCVPH01.TS3CNTNR = SL0CM110.TS3CNTNR;
    VRCVPH01.PC3PONBR = SL0CM110.PC3PONBR;
    VRCVPH01.PC-SAP-PO-NBR = " ";
    SL0CS7B();
    if (SL0CM110.PC-SAP-PO-NBR == VRCVPH01.PC-SAP-PO-NBR
    ) /* Map fields matches with table data*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1LR";
      SLWREC.SLWMSGNO = 0486;
                              /* <--- PO Number & SAP PO Nbr Not Related*/
      set SL0CM110.PC-SAP-PO-NBR cursor, bold;
      set SL0CM110.PC3PONBR bold;
    end
  end

   /* IF SL0CM110.XWHCD EQ '09'*/
    /* OR SL0CM110.XWHCD EQ '03'*/
    /* OR SL0CM110.XGPCD EQ '01';*/
    /* IF SL0CM110.SAPPONBR EQ ' '*/
      /* AND SL0CM110.PC3PONBR EQ 0;*/
      /* MOVE 'Y' TO SLWREC.SLWERRSW;*/
      /* MOVE 'S1LR' TO SLWREC.XXXLOCID;*/
      /* MOVE 0009 TO SLWREC.SLWMSGNO;/* missing required field*/
      /* SET SL0CM110.SAPPONBR CURSOR,BRIGHT;*/
      /* SET SL0CM110.PC3PONBR BRIGHT;*/
     /* EZERTN;*/
   /* END;*/
   /* END;*/

  if (SL0CM110.XWHCD == "09"
   || SL0CM110.XWHCD == "03"
   || SL0CM110.XWHCD == "12"
   || SL0CM110.XGPCD == "01")
    if (SL0CM110.PC-SAP-PO-NBR > " "
     || SL0CM110.PC3PONBR > 0)
         /* next sentence*/
    else
      return;
    end
  end

  SL0CW01.SL0CWPNT = "Y"; /* po entered flag*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS1L

// item fld edits
Function SL0CS1M()


   /* ************************************************************/
   /* *** edit the following prior to the normal ordered edits****/
   /* *** re: each of thses will exit if error since the error****/
   /* ***     might be a database error (or try again)        ****/
   /* ************************************************************/

  SLWREC.SLWVERSW = "N";
  SLWREC.SLWERRSW = "N";

   /* ************************************************************/
   /* *** if entered, set a side number must already exist    ****/
   /* ************************************************************/

  if (SL0CM110.INASAID > 0)
    INAREC.INASAID = SL0CM110.INASAID;
    TA1REC.TA1LOCAT[2] = "SL0CS1M ";
     /* ** TA1REC.TAMAP setup during initialization ***/
    XSSLSVF(); /* <=== validate setaside id*/
    if (SLWREC.SLWVERSW == "Y")
      SLWREC.SLWERRSW = "Y";
      set SL0CM110.INASAID cursor, bold;
      return; /* <=== ** execption ***/
    end
    if (PKNREC.XBCCD == "08")
      SLWREC.SLWVERSW = "Y";
      SLWREC.SLWERRSW = "Y";
      SLWREC.SLWMSGNO = 0011; /* invalid value*/
      set SL0CM110.INASAID cursor, bold;
      return; /* <=== ** execption ***/
    end
  end

   /* ************************************************************/
   /* *** since valid area/zone, location record must exist   ****/
   /* ************************************************************/

  SL5REC.XWHCD = SL0CM110.XWHCD;
  SL5REC.XARCD = SL0CM110.XARCD;
  SL5REC.SL4ZONE = SL0CM110.SL4ZONE;
  SL5REC.SL5LOCTN = SL0CM110.SL5LOCTN;

  TA1REC.TA1LOCAT[2] = "SL0CS1M ";
   /* ** TA1REC.TAMAP setup during initialization ***/

  XSSLSV5(); /* <=== validate location*/

  if (SLWREC.SLWVERSW == "Y")
    SLWREC.SLWERRSW = "Y";
    set SL0CM110.SL5LOCTN cursor, bold;
    return; /* <=== ** exception ***/
  end

   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if owner grp code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  SLWREC.XWHCD = SL0CM110.XWHCD;
  SLWREC.SLWTBLCD = SL0CM110.XOWCD;

  TA1REC.TA1LOCAT[2] = "SL0CS1M ";
   /* ** TA1REC.TAMAP setup during initialization ***/

  XSSLSVO(); /* <=== validate owner group*/

  if (SLWREC.SLWVERSW == "Y")
    SLWREC.SLWERRSW = "Y";
    SL0CM110.XOWABRV = " ";
    set SL0CM110.XOWCD cursor, bold;
  else
    SL0CM110.XOWABRV = XOWTBL.XOWABRV[sysVar.arrayIndex];
  end

   /* ************************************************************/
   /* *** if entered, unit of measure must be in tbl & active ****/
   /* *** if blank,   rel edits will find in product db       ****/
   /* ************************************************************/

  if (SL0CM110.XUMCD > " ")
    if (SL0CM110.XUMCD in XUMTBL.XUMCD)
      if (XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* ** next sentence ***/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S1MA";
        SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
        set SL0CM110.XUMCD cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1MB";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0CM110.XUMCD cursor, bold;
    end
  end

   /* **********************************************************/
   /* check the UOM in dprod.vcolor02 for validation*/
   /* **********************************************************/
  set SYCREC empty;
  SYCREC.XGPCD = SL0CM110.XGPCD; /* GPC*/
  SYCREC.SY1STNBR = SL0CM110.SY1STNBR; /* Style*/
  SYCREC.SY2CLRID = SL0CM110.SY2CLRID; /* Color*/
  SYCREC.XDMCD = SL0CM110.XDMCD; /* Dim*/

  call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes}; /* Select unique row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (SYCREC.XUMCD == SL0CM110.XUMCD)
                      /* Next Sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1MC";
      SLWREC.SLWMSGNO = 0478; /* < Invalid UOM for the Product*/
      set SL0CM110.XUMCD cursor, bold;
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1MC";
      SLWREC.SLWMSGNO = 0479; /* < Cannot find a product*/
      set SL0CM110.XUMCD cursor, bold;
    else
      if (SQLCA.VAGen_SQLCODE == -811)
        SLWREC.XXXLOCID = "S1MC";
        SLWREC.SLWMSGNO = 0480; /* < Duplicate rows found*/
        set SL0CM110.XUMCD cursor, bold;
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "S1MC";
          SLWREC.SLWMSGNO = 0031;
          set SL0CM110.XUMCD cursor, bold;
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "S1MC";
          SLWREC.SLWMSGNO = 0001;
          set SL0CM110.XUMCD cursor, bold;
        end
      end
    end
  end

   /* ************************************************************/
   /* *** if package code in tbl & active: continue           ****/
   /* ************************************************************/

  if (SL0CM110.XPGCD in XPGTBL.XPGCD)
    if (XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1MC";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0CM110.XPGCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1MD";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0CM110.XPGCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if sl class code in tbl & active: continue          ****/
   /* ************************************************************/

  if (SL0CM110.XSLCD in XSLTBL.XSLCD)
    if (XSLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1ME";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0CM110.XSLCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1MF";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0CM110.XSLCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if spec code in tbl & active: continue              ****/
   /* ************************************************************/

  set PC2REC empty; /* clear row in storage*/

  PC2REC.XGPCD = SL0CM110.XGPCD;
  PC2REC.PC2INSEG = SL0CM110.XSDCD;
  call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    if (PC2REC.XXXSTAT == "A")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1MG";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0CM110.XSDCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1MH";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0CM110.XSDCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if qualty code in tbl & active: continue            ****/
   /* ************************************************************/

  if (SL0CM110.XQACD in XQATBL.XQACD)
    if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1MI";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0CM110.XQACD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1MJ";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0CM110.XQACD cursor, bold;
  end

   /* ************************************************************/
   /* *** if dim code in tbl & active: continue               ****/
   /* ************************************************************/

  if (SL0CM110.XDMCD in XDMTBL.XDMCD)
    if (XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1MK";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0CM110.XDMCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1ML";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0CM110.XDMCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if gpc code in tbl & active: continue               ****/
   /* ************************************************************/

  if (SL0CM110.XGPCD in XGPTBL.XGPCD)
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1MM";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0CM110.XGPCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1MN";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0CM110.XGPCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if an error has occured return to previos process   ****/
   /* ************************************************************/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** p.o. nbr must exist unless stock transfer           ****/
   /* ************************************************************/
   /* ;*/
  if (SL0CW01.SL0CWPNT == "Y")
    if (SL0CM110.PC3PONBR > 0)
      SL0CW01.SL0CW-PO-ENTERED-FL = "Y";
      VRCVPH01.XGPCD = SL0CM110.XGPCD;
      VRCVPH01.TS3CNTNR = SL0CM110.TS3CNTNR;
      VRCVPH01.PC3PONBR = SL0CM110.PC3PONBR;
      VRCVPH01.PC-SAP-PO-NBR = SL0CM110.PC-SAP-PO-NBR;
      SL0CS7B(); /* calls new Sl hdr by GPC,cntnr,PO Nbr*/
      SL0CM110.PC-SAP-PO-NBR = VRCVPH01.PC-SAP-PO-NBR;
      if (VRCVPH01-CHECK-FLAG == "Y")
        VRCVPH01.TS3CNTNR = SL0CM110.TS3CNTNR;
        SL0CS8A();
      end
        /* Move the SAP PO to populate in the map*/

    else
      if (SL0CM110.PC-SAP-PO-NBR > " ")
        SL0CW01.SAP-PO-ENTERED-FLAG = "Y";
        SL0CW01.PC-SAP-PO-NBR = SL0CM110.PC-SAP-PO-NBR;
        VRCVPH01.XGPCD = SL0CM110.XGPCD;
        VRCVPH01.TS3CNTNR = SL0CM110.TS3CNTNR;
        VRCVPH01.PC-SAP-PO-NBR = SL0CM110.PC-SAP-PO-NBR;
        VRCVPH01.PC3PONBR = SL0CM110.PC3PONBR;
        SL0CS7B(); /* calls New Sl hdr by GPC,cntnr, Sap Po*/
                                   /* Nbr*/
        SL0CW01.SL0CWSPN = VRCVPH01.PC3PONBR;
        SL0CM110.PC3PONBR = VRCVPH01.PC3PONBR;
        if (VRCVPH01-CHECK-FLAG == "Y")
          SL0CS8A(); /* check atleast the container exists*/
        end
               /* Move the PO To populate in the map*/
      end
    end
  end
  if (SLWREC.SLWVERSW == "Y")
    if (SL0CW01.SL0CW-PO-ENTERED-FL == "Y")
      SLWREC.SLWERRSW = "Y";
      set SL0CM110.PC3PONBR cursor, bold; /* Set the cursor pos in PO*/
      set SL0CM110.PC-SAP-PO-NBR bold;
      return; /* <=== ** execption ***/
    else
      if (SL0CW01.SAP-PO-ENTERED-FLAG == "Y")
        SLWREC.SLWERRSW = "Y";
        set SL0CM110.PC-SAP-PO-NBR cursor, bold;
                                   /* Set the cursor pos in SAP PO*/
        set SL0CM110.PC3PONBR bold;
        return;
      end
    end
    VRCVPH01-CHECK-FLAG = " "; /* reinitialize the field*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS1M

// item relational edits
Function SL0CS1N()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

  if (SL0CM110.XGPCD == XWHTBL.XGPCD1[SL0CWTST]
   || SL0CM110.XGPCD == XWHTBL.XGPCD2[SL0CWTST]
   || SL0CM110.XGPCD == XWHTBL.XGPCD3[SL0CWTST]
   || SL0CM110.XGPCD == XWHTBL.XGPCD4[SL0CWTST]
   || SL0CM110.XGPCD == XWHTBL.XGPCD5[SL0CWTST]
   || SL0CM110.XGPCD == XWHTBL.XGPCD6[SL0CWTST]
   || SL0CM110.XGPCD == XWHTBL.XGPCD7[SL0CWTST]
   || SL0CM110.XGPCD == XWHTBL.XGPCD8[SL0CWTST])
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1NA";
    SLWREC.SLWMSGNO = 0157; /* <--- invalid gpc w/whse msg*/
    set SL0CM110.XGPCD cursor, bold;
    set SL0CM110.XWHCD bold;
  end

   /* ************************************************************/
   /* *** use the combined style color product view to obtain ****/
   /* *** the short style name and short color abbrv.; and    ****/
   /* *** if blank, the default unit of measure               ****/
   /* ************************************************************/

  PKNREC.XGPCD = SL0CM110.XGPCD;
  PKNREC.SY1STNBR = SL0CM110.SY1STNBR;
  PKNREC.SY2CLRID = SL0CM110.SY2CLRID;
  PKNREC.XDMCD = SL0CM110.XDMCD;

  SL0CSVJ(); /* <=== validate style/color combo*/

  if (SLWREC.SLWVERSW == "Y")
    SLWREC.SLWERRSW = "Y";
    set SL0CM110.XGPCD bold;
    set SL0CM110.SY1STNBR cursor, bold;
    set SL0CM110.SY2CLRID bold;
    set SL0CM110.XDMCD bold;
    return;
  end

  SL0CM110.SY1SSTNM = PKNREC.SY1SSTNM;
  SL0CM110.SY2CLRAB = PKNREC.SY2CLRAB;

  if (SL0CM110.XUMCD > " ")
     /* ** next sentence ***/
  else
    SL0CM110.XUMCD = "01";
  end

   /* ************************************************************/
   /* *** if current date greater than effective date:        ****/
   /* *** use the corresponding life cycle code               ****/
   /* *** note: effective dates in ascending order            ****/
   /* ************************************************************/

  if (X2CREC.X2CCURDT >= PKNREC.SY2CEDT1)
    SL0CM110.XLCCD = PKNREC.XLCCD1;
  else
    if (X2CREC.X2CCURDT >= PKNREC.SY2CEDT2)
      SL0CM110.XLCCD = PKNREC.XLCCD2;
    else
      if (X2CREC.X2CCURDT >= PKNREC.SY2CEDT3)
        SL0CM110.XLCCD = PKNREC.XLCCD3;
      else
        if (X2CREC.X2CCURDT >= PKNREC.SY2CEDT4)
          SL0CM110.XLCCD = PKNREC.XLCCD4;
        else
           /* ************************************************************/
           /* *** fall thru error - code shouldn't have been executed ****/
           /* ************************************************************/
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "S1NE";
          SLWREC.SLWMSGNO = 0001; /* <--- severe error msg/fall thru*/
          set SL0CM110.XGPCD bold;
          set SL0CM110.SY1STNBR cursor, bold;
          set SL0CM110.SY2CLRID bold;
          set SL0CM110.XDMCD bold;
          return;
        end
      end
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS1N

// obtain item data
Function SL0CS1O()


   /* ************************************************************/
   /* *** make one time table accesses for auxillary and/or   ****/
   /* *** main data                                           ****/
   /* *** note: first time executions before beginning a loop ****/
   /* ***       might also be performed                       ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** obtain all valid size data for use during detail    ****/
   /* *** (size) row creatation                               ****/
   /* ************************************************************/

  set SYPREC empty;

  SYPREC.SYPFC = "PC";
  SYPREC.SYPCMPSW = "N";

  SYPREC.XGPCD = SL0CM110.XGPCD;
  SYPREC.SY1STNBR = SL0CM110.SY1STNBR;
  SYPREC.SY2CLRID = SL0CM110.SY2CLRID;
  SYPREC.XDMCD = SL0CM110.XDMCD;
  SYPREC.XQACD = "**";

  TA1REC.TA1LOCAT[2] = "SL0CS1O ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  SL0CSPI(); /* <=== get size xlations*/

  if (SYPREC.SYPRC == 0)
     /* ** next sentence ***/
  else
    if (SYPREC.SYPRC == +10)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1OA";
      SLWREC.SLWMSGNO = 0012; /* <--- not on db msg*/
      set SL0CM110.XGPCD bold;
      set SL0CM110.SY1STNBR cursor, bold;
      set SL0CM110.SY2CLRID bold;
      set SL0CM110.XDMCD bold;
      set SL0CM110.XQACD bold;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == +9)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1OB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      set SL0CM110.XGPCD bold;
      set SL0CM110.SY1STNBR cursor, bold;
      set SL0CM110.SY2CLRID bold;
      set SL0CM110.XDMCD bold;
      set SL0CM110.XQACD bold;
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S1OC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    set SL0CM110.XGPCD bold;
    set SL0CM110.SY1STNBR cursor, bold;
    set SL0CM110.SY2CLRID bold;
    set SL0CM110.XDMCD bold;
    set SL0CM110.XQACD bold;
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS1O

// hdr key edits (only whse)
Function SL0CS1P()


   /* ************************************************************/
   /* *** note: whse must be edited each time inorder to      ****/
   /* ***       setup the owner group flag in slwrec for      ****/
   /* ***       possible owner validation                     ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if whse code in tbl & active: put short abrv. on map****/
   /* ************************************************************/

  if (SL0CM110.XWHCD in XWHTBL.XWHCD)
    if (SL0CM110.XWHCD == "51")
      SL0CM110.XWHSABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1PB";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0CM110.XWHCD cursor, bold;
      return; /* <=== ** execption ***/
    end
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0CM110.XWHSABRV = XWHTBL.XWHSABRV[sysVar.arrayIndex];
      SLWREC.XWHOWNGF = XWHTBL.XWHOWNGF[sysVar.arrayIndex];
      SLWREC.XCTCD = XWHTBL.XCTCD[sysVar.arrayIndex]; /* CANA save country code*/
      SL0CW01.SL0CWTST = sysVar.arrayIndex;
    else
      SL0CM110.XWHSABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1PA";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0CM110.XWHCD cursor, bold;
      return; /* <=== ** execption ***/
    end
  else
    SL0CM110.XWHSABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1PB";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0CM110.XWHCD cursor, bold;
    return; /* <=== ** execption ***/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS1P

// select set po hdr :1
Function SL0CS1Q()


   /* ************************************************************/
   /* *** declare set of rows from:  SL Receiving Table       ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique field values for:            ****/
   /* *** the order by for this select set is:                ****/
   /* ***   tscntnr                                           ****/
   /* ************************************************************/

  SLSREC.SLSFNC = "S1";

  call "VRCVSH01" (SLSREC, SQLCA, VRCVSH01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "SL0CS1Q ";
    TA1REC.TA1LOCAT[1] = "VRCVSH01";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VRCVSH01";
    TA1REC.TA1TBLKE = VRCVSH01.RCVSHPKEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** note: fetch handles return code correctly           ****/
   /* ************************************************************/

  SL0CS1R(); /* <=== fetch first row*/

  if (SQLCA.VAGen_SQLCODE == 0)

  else
    if (SQLCA.VAGen_SQLCODE == 100)
      SLWREC.SLWVERSW = "Y";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1QA";
      SLWREC.SLWMSGNO = 0493; /* Cont. Nbr is invalid for the whse*/
    else
      SLWREC.SLWVERSW = "Y";
      SLWREC.SLWERRSW = "Y";
      if (SQLCA.VAGen_SQLCODE == -911) /* deadlock try again*/
        SLWREC.XXXLOCID = "S1QA";
        SLWREC.SLWMSGNO = 0031;
      else
        SLWREC.XXXLOCID = "S1QA"; /* For all other SQL codes*/
        SLWREC.SLWMSGNO = 0001;
      end
    end
  end

  SL0CS1S();
   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS1Q

// fetch : po hdr : 1
Function SL0CS1R()


   /* ************************************************************/
   /* *** fetch next row from:  Sl receiving table            ****/
   /* *** using the std module:  vrcvsh01                     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ************************************************************/

  SLSREC.SLSFNC = "N1";

  call "VRCVSH01" (SLSREC, SQLCA, VRCVSH01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "SL0CS1R ";
  TA1REC.TA1LOCAT[1] = "VRCVSH01";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VRCVSH01";
  TA1REC.TA1TBLKE = VRCVSH01.RCVSHPKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS1R

// close : po hdr : 1
Function SL0CS1S()


   /* ************************************************************/
   /* *** close select set of:  sl rcv  header table          ****/
   /* *** using the std module:  vrcvsh01                     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  SLSREC.SLSFNC = "C1";

  call "VRCVSH01" (SLSREC, SQLCA, VRCVSH01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "SL0CS1S ";
  TA1REC.TA1LOCAT[1] = "VRCVSH01";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SELECT  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VRCVSH01";
  TA1REC.TA1TBLKE = VRCVSH01.RCVSHPKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS1S

// match sz desc to sz id
Function SL0CS1X()

   /* ************************************************************/
   /* *** loop thru the previously obtained                   ****/
   /* *** size translations until a match                     ****/
   /* ************************************************************/

  SL0CW01.SL0CWERW = "N";
  SL0CW01.SL0CWERS = "N";
  SL0CW01.SL0CWARS = "N";
  SLWREC.SLWIDX02 = 1;

  while (SLWREC.SLWIDX02 <= 40)
    if (SL0CW01.SY4IDDSC == SYPREC.SY4IDDSC[SLWIDX02])
      return;
    end
    SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
  end

  SL0CS61(); /* obtain size  scale*/

  SLWREC.SLWIDX05 = 1;

  while (SLWREC.SLWIDX05 <= 40)
    if (SL0CW01.SY4IDDSC == SY4REC.SY4IDDSC[SLWIDX05])
      SL0CW01.SL0CWSIX = SLWREC.SLWIDX05;
      if (SL0CW01.SL0CWFSW == "Y")
        SLWREC.SLWERRSW = "Y";
        SL0CW01.SL0CWERS = "Y";
        SL0CW01.SL0CWARS = "Y";
        SLWREC.XXXLOCID = "S1XA";
        SLWREC.SLWMSGNO = 0180; /* size out of prod rng warning*/
        SL0CW01.SL0CWECT = SL0CW01.SL0CWECT + 1;

        set SL0CM110.XWHCD skip;
        set SL0CM110.TS3CNTNR skip;
        /* SET SL0CM110.IN7STNBR AUTOSKIP;*/
        set SL0CM110.XITCD skip;
        set SL0CM110.XARCD skip;
        set SL0CM110.SL4ZONE skip;
        set SL0CM110.SL1COMNT skip;
        set SL0CM110.SL1RCVR skip;
        set SL0CM110.SL5LOCTN skip;
        /* SET SL0CM110.SL0CMPID AUTOSKIP;*/
        /* SET SL0CM110.PC4ORTYP AUTOSKIP;*/
        set SL0CM110.PC3PONBR skip;
        set SL0CM110.PC-SAP-PO-NBR skip;
        set SL0CM110.XGPCD skip;
        set SL0CM110.SY1STNBR skip;
        set SL0CM110.SY2CLRID skip;
        set SL0CM110.XDMCD skip;
        set SL0CM110.XQACD skip;
        set SL0CM110.XSDCD skip;
        set SL0CM110.XSLCD skip;
        set SL0CM110.XPGCD skip;
        set SL0CM110.XUMCD skip;
        set SL0CM110.XOWCD skip;
        set SL0CM110.INASAID skip;
        return;
      end
    end
    SLWREC.SLWIDX05 = SLWREC.SLWIDX05 + 1;
  end

  if (SL0CW01.SL0CWFSW == "N")
    if (SL0CW01.SL0CWECT > 0)
      SL0CS63(); /* add row to vrlxcp01 if size valid for*/
                                   /* scale*/
      SL0CW01.SL0CWECT = SL0CW01.SL0CWECT - 1;
      return;
    end
  end

  SLWREC.SLWERRSW = "Y";
  SL0CW01.SL0CWERS = "Y";
  SL0CW01.SL0CWFSW = "Y";
  SL0CW01.SL0CWSVE = "Y";
  SLWREC.XXXLOCID = "S1XB";
  SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS1X

// add item row
Function SL0CS1Y()


   /* ************************************************************/
   /* *** use the already setup sl2rec and add the item row   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0CS1Y ";
   /* ** TA1REC.TA1MAP setup during initialization ***/

  XSSLS-A0-VRLITM02(); /* <=== add recvg log item row*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.SLWSKYSW = "N";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1YA";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -803)
      SL0CW01.SL0CWFSW = "Y";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1YB";
      SLWREC.SLWMSGNO = 0045; /* <--- record exists msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1YC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS1Y

// clear size adj.
Function SL0CS2A()


   /* ************************************************************/
   /* *** "clear" size adj.:                                  ****/
   /* ***   move 0 to adj. fld                                ****/
   /* ***   move newly calc'd size quantity to map qty fld    ****/
   /* *** note: if item delete sw = 'y', move 0 to rcvd qty   ****/
   /* *** note: if item add sw = 'y', desc. has been setup    ****/
   /* ************************************************************/

  SL0CM210.SL0CMADJ[SLWIDX01] = 0;
  SL0CW02.SL0CWFSW = "Y";

  if (SL0CW02.SL0CWIDS == "Y")
    SL0CM210.SL2RCVD[SLWIDX01] = 0;
    SL0CW02.SY5SZID[SLWIDX01] = 0;
    SL0CW02.ZZZCHGCT[SLWIDX01] = 0;
    SL0CM210.SY4IDDSC[SLWIDX01] = " ";
  else
    SL0CM210.SL2RCVD[SLWIDX01] = VRLITM02.SL2RCVD;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS2A

// setup item data
Function SL0CS2B()


   /* ************************************************************/
   /* *** setup item data from map to update all items       ****/
   /* ************************************************************/

  VRLITM02.SL5LOCTN = SL0CM210.SL5LOCTN;
  VRLITM02.INASAID = SL0CM210.INASAID;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS2B

// add new item row
Function SL0CS2C()


   /* ************************************************************/
   /* *** use the already setup VRLITM02 and add the item row   ****/
   /* ************************************************************/

  VRLITM02.SL2RCVD = SL0CM210.SL0CMADJ[SLWIDX01];

  TA1REC.TA1LOCAT[2] = "SL0CS2C ";
   /* ** TA1REC.TA1MAP setup during initialization ***/

  XSSLS-A-VRLITM02(); /* <=== add recvg log item row*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    set SL0CM210.SY4IDDSC[SLWIDX01] cursor, bold;
    SLWREC.SLWERRSW = "Y";
    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.XXXLOCID = "S2CA";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -803)
      SLWREC.XXXLOCID = "S2CB";
      SLWREC.SLWMSGNO = 0045; /* <--- record exists msg*/
      return;
    end
    SLWREC.XXXLOCID = "S2CC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS2C

// delete item row
Function SL0CS2D()


   /* ************************************************************/
   /* *** note: include zzzchgct for use by delete sgrp       ****/
   /* *** note: read w/out data those items for update        ****/
   /* ************************************************************/

  VRLITM02.ZZ-CHNG-CNT = SL0CW02.ZZZCHGCT[SLWIDX01];

  TA1REC.TA1LOCAT[2] = "SL0CS2D ";
   /* ** TA1REC.TA1MAP setup during initialization ***/

  XSSL2U0(); /* <=== read for update w/out data*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    set SL0CM210.SY4IDDSC[SLWIDX01] cursor, bold;
    SLWREC.SLWERRSW = "Y";
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.XXXLOCID = "S2DA";
      SLWREC.SLWMSGNO = 0033; /* <--- row deleted since last read*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.XXXLOCID = "S2DB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.XXXLOCID = "S2DC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** delete the item/size row already setup              ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0CS2D ";
   /* ** TA1REC.TA1MAP setup during initialization ***/

  XSSLS-D-VRLITM02(); /* <=== std delete rcvg log item*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    set SL0CM210.SY4IDDSC[SLWIDX01] cursor, bold;
    SLWREC.SLWERRSW = "Y";
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.XXXLOCID = "S2DD";
      SLWREC.SLWMSGNO = 0033; /* <--- row deleted since last read*/
      return;
    end
    SLWREC.XXXLOCID = "S2DE";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS2D

// check for no items
Function SL0CS2E()



   /* ************************************************************/
   /* *** select all size rows                                ****/
   /* *** note: rec setup from previous processing            ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0CS2E ";
   /* ** TA1REC.TAMAP setup during initialization ***/

   /* XSSL2S1;                           /* <=== select set rcvg log items*/
  XSSLS-S1-VRLITM02();

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

   /* ************************************************************/
   /* *** if no size/item rows found,                         ****/
   /* *** delete hdr (rec is already setup)                   ****/
   /* ************************************************************/

  if (SQLCA.VAGen_SQLCODE == +100)
    TA1REC.TA1LOCAT[2] = "SL0CSE2 ";
     /* ** TA1REC.TAMAP setup during initialization ***/
    XSSL1D0(); /* <=== std delete row*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2EA";
      SLWREC.SLWMSGNO = 0071; /* <--- all cntnr data deleted msg*/
      return;
    else
      if (SQLCA.VAGen_SQLCODE == +100)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S2EB";
        SLWREC.SLWMSGNO = 0033; /* <--- row deleted since last read*/
        return;
      end
      if (SQLCA.VAGen_SQLCODE == -911)
        SLWREC.SLWSKYSW = "N";
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S2EC";
        SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
        return;
      end
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2ED";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S2EE";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  end

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "S2EF";
  SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS2E

// item data entry edits by line
Function SL0CS2R()


   /* ************************************************************/
   /* *** note: normal data edit sgrps are not used           ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** set item add & delete switches & special exit sw    ****/
   /* *** = 'N' prior these checks to reset them each time     ***/
   /* *** and set = 'y' only if the related situation exists  ****/
   /* ************************************************************/

  SL0CW02.SL0CWIAS = "N";
  SL0CW02.SL0CWIDS = "N";
  SLWREC.SLWSEXSW = "N";

   /* ************************************************************/
   /* *** these combined edits are done here rather than      ****/
   /* *** separately & in the designated sgrps because of     ****/
   /* *** their intertwined & complicated nature              ****/
   /* ************************************************************/

  if (SL0CM210.SY4IDDSC[SLWIDX01] > " ")
    if (SL0CW02.SY5SZID[SLWIDX01] > 0)
      if (SL0CM210.SL0CMADJ[SLWIDX01] == 0)
         /* ************************************************************/
         /* *** this size desc. existed & has no adj. qty           ****/
         /* *** set the special exit switch = y to skip processing  ****/
         /* ************************************************************/
        SLWREC.SLWSEXSW = "Y";
      else
         /* ************************************************************/
         /* *** if signed adj. plus rcvd qty = 0, set ids = y       ****/
         /* ************************************************************/
        SL0CW02.SL0CWSUM = 0;
        SL0CW02.SL0CWSUM = SL0CW02.SL0CWSUM + SL0CM210.SL2RCVD[SLWIDX01];
        SL0CW02.SL0CWSUM = SL0CW02.SL0CWSUM + SL0CM210.SL0CMADJ[SLWIDX01];
        if (SL0CW02.SL0CWSUM == 0)
          SL0CW02.SL0CWIDS = "Y";
        end
      end
      return;
    else
       /* ************************************************************/
       /* *** this size desc. has been added,                     ****/
       /* *** set the ws item add switch = y  and                 ****/
       /* *** edit/obtain the size id no. (save in ws)            ****/
       /* *** note: adj. qty must be entered                      ****/
       /* ************************************************************/
      SL0CW02.SL0CWIAS = "Y";
      if (SL0CM210.SL0CMADJ[SLWIDX01] == 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S2RA";
        SLWREC.SLWMSGNO = 0009; /* <--- missing fld msg*/
        set SL0CM210.SL0CMADJ[SLWIDX01] cursor, bold;
      end
      SL0CS2X(); /* <=== find size id no.*/
      return;
    end
  else
     /* ************************************************************/
     /* *** note: size desc. blank, adj. qty cannot be entered  ****/
     /* ************************************************************/
    if (SL0CM210.SL0CMADJ[SLWIDX01] > 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2RB";
      SLWREC.SLWMSGNO = 0065; /* <--- cannot be entered msg*/
      set SL0CM210.SL0CMADJ[SLWIDX01] cursor, bold;
      return;
    end
    if (SL0CW02.SY5SZID[SLWIDX01] > 0)
       /* ************************************************************/
       /* *** this size desc. has been erased/blanked out,        ****/
       /* *** set the ws item delete switch = y                   ****/
       /* *** note: at this time the desc is askip & can't be     ****/
       /* ***       erased but code left since complete & may     ****/
       /* ***       want to allow later                           ****/
       /* ************************************************************/
      SL0CW02.SL0CWIDS = "Y";
    else
       /* ************************************************************/
       /* *** there is nothing to process (set sexsw = y)         ****/
       /* ************************************************************/
      SLWREC.SLWSEXSW = "Y";
    end
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS2R

// item data update DB by line
Function SL0CS2U()


   /* ************************************************************/
   /* *** setup the appropriate size id no.  and              ****/
   /* *** detemine which of the mutually excluse functions    ****/
   /* *** should be performed on this size data:              ****/
   /* ***   add;  delete;  change                             ****/
   /* ************************************************************/
  VRLITM02.SY1UNPCS = SL0CM210.SY1UNPCS;

  VRLITM02.SY5SZID = SL0CW02.SY5SZID[SLWIDX01];

   /* ************************************************************/
   /* *** if add sw = y, add this size & exit                 ****/
   /* ************************************************************/

  if (SL0CW02.SL0CWIAS == "Y")
    SL0CS2C(); /* <=== add new rcvg log item row*/
    return;
  end

   /* ************************************************************/
   /* *** if delete sw = y, delete this size & exit           ****/
   /* ************************************************************/

  if (SL0CW02.SL0CWIDS == "Y")
    SL0CS2D(); /* <=== delete rcvg log item row*/
    return;
  end

   /* ************************************************************/
   /* *** since no sw = y, this is a change/adjustment        ****/
   /* *** calculate the new/net received quantity & update    ****/
   /* *** note: include zzzchgct for use by replace sgrp      ****/
   /* *** note: read w/out data those items for update        ****/
   /* ************************************************************/

  VRLITM02.SL2RCVD = SL0CM210.SL2RCVD[SLWIDX01]   + SL0CM210.SL0CMADJ[SLWIDX01];

  VRLITM02.ZZ-CHNG-CNT = SL0CW02.ZZZCHGCT[SLWIDX01];

  TA1REC.TA1LOCAT[2] = "SL0CS2U ";
   /* ** TA1REC.TA1MAP setup during initialization ***/

  XSSL2U0(); /* <=== read for update w/out data*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    set SL0CM210.SY4IDDSC[SLWIDX01] cursor, bold;
    SLWREC.SLWERRSW = "Y";
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.XXXLOCID = "S2UA";
      SLWREC.SLWMSGNO = 0033; /* <--- row deleted since last read*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.XXXLOCID = "S2UB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.XXXLOCID = "S2UC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

  TA1REC.TA1LOCAT[2] = "SL0CS2U ";
   /* ** TA1REC.TA1MAP setup during initialization ***/

  XSSLS-U-VRLITM02(); /* <=== update recvg log item row*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    set SL0CM210.SY4IDDSC[SLWIDX01] cursor, bold;
    SLWREC.SLWERRSW = "Y";
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.XXXLOCID = "S2UD";
      SLWREC.SLWMSGNO = 0032; /* <--- row updated since last read*/
      return;
    end
    SLWREC.XXXLOCID = "S2UE";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS2U

// match sz desc to sz id
Function SL0CS2X()

   /* ************************************************************/
   /* *** loop thru the previously obtained                   ****/
   /* *** size translations until a match                     ****/
   /* ************************************************************/

  SLWREC.SLWIDX02 = 1;

  while (SLWREC.SLWIDX02 <= 40)
    if (SL0CM210.SY4IDDSC[SLWIDX01] == SYPREC.SY4IDDSC[SLWIDX02])
      SL0CW02.SY5SZID[SLWIDX01] = SYPREC.SY5SZID[SLWIDX02];
      return;
    end
    SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
  end

  SL0CS61(); /* obtain size  scale*/

  if (SL0CW02.SL0CWFSW == "N")
    if (SL0CM210.SY4IDDSC[SLWIDX01] != SL0CW02.SL0CWPSD)
      SL0CW02.SL0CWFSW = "Y";
    end
  end
  SL0CW02.SL0CWPSD = SL0CM210.SY4IDDSC[SLWIDX01];

  SLWREC.SLWIDX05 = 1;

  while (SLWREC.SLWIDX05 <= 40)
    if (SL0CM210.SY4IDDSC[SLWIDX01] == SY4REC.SY4IDDSC[SLWIDX05])
      SL0CW02.SL0CWSIX = SLWREC.SLWIDX05;
      SL0CW02.SY5SZID[SLWIDX01] = SLWREC.SLWIDX05;
      if (SL0CW02.SL0CWFSW == "Y")
        SLWREC.SLWERRSW = "Y";
        SL0CW02.SL0CWFSW = "N";
        SL0CW02.SY5SZID[SLWIDX01] = 0;
        SLWREC.XXXLOCID = "S2XA";
        SLWREC.SLWMSGNO = 0180; /* size out of prod rng warning*/
        set SL0CM210.SY4IDDSC[SLWIDX01] cursor, bold;

        set SL0CM210.XWHCD skip;
        set SL0CM210.TS3CNTNR skip;
   /* SET SL0CM210.IN7STNBR AUTOSKIP;*/
        set SL0CM210.XITCD skip;
        set SL0CM210.XARCD skip;
        set SL0CM210.SL4ZONE skip;
        set SL0CM210.SL1COMNT skip;
        set SL0CM210.SL1RCVR skip;
        set SL0CM210.SL5LOCTN skip;
   /* SET SL0CM210.SL0CMPID AUTOSKIP;*/
   /* SET SL0CM210.PC4ORTYP AUTOSKIP;*/
        set SL0CM210.PC3PONBR skip;
        set SL0CM210.PC-SAP-PO-NBR skip;
        set SL0CM210.XGPCD skip;
        set SL0CM210.SY1STNBR skip;
        set SL0CM210.SY2CLRID skip;
        set SL0CM210.XDMCD skip;
        set SL0CM210.XQACD skip;
        set SL0CM210.XSDCD skip;
        set SL0CM210.XSLCD skip;
        set SL0CM210.XPGCD skip;
        set SL0CM210.XUMCD skip;
        set SL0CM210.XOWCD skip;
        set SL0CM210.INASAID skip;
        set SL0CM210.SL2PALET skip;
        set SL0CM210.SL2CASE skip;
        return;
      end
    end
    SLWREC.SLWIDX05 = SLWREC.SLWIDX05 + 1;
  end

  if (SL0CW02.SL0CWFSW == "N")
    SL0CS73(); /* add row to vrlxcp01 if size valid for scale*/
    return;
  end

  SLWREC.SLWERRSW = "Y";
  SL0CW02.SL0CWFSW = "Y";
  SLWREC.XXXLOCID = "S2XB";
  SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS2X

// clear line
Function SL0CS4A()


   /* ************************************************************/
   /* *** "clear" this line by moving blanks to each fld      ****/
   /* ************************************************************/

  SL0CM410.SL0CMCSD = " ";
  SL0CM410.SL0CMCSL = " ";
  SL0CM410.SL0CMCPG = " ";
  SL0CM410.SL0CMCUM = " ";
  SL0CM410.SL0CMCOW = " ";

  SL0CM410.SL0CMNSD = " ";
  SL0CM410.SL0CMNSL = " ";
  SL0CM410.SL0CMNPG = " ";
  SL0CM410.SL0CMNUM = " ";
  SL0CM410.SL0CMNOW = " ";

  SL0CM410.SL0CMBPL = " ";
  SL0CM410.SL0CMEPL = " ";
  SL0CM410.SL0CMBCN = " ";
  SL0CM410.SL0CMECN = " ";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS4A

// setup select criteria
Function SL0CS4B()


   /* ************************************************************/
   /* *** wild card setup for size id not required to avoid   ****/
   /* *** getting last size accessed                          ****/
   /* *** re: size is not used in the select's "where"        ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if case no. entered, use their values               ****/
   /* *** otherwise, use all blanks & 9's, respectively       ****/
   /* ************************************************************/

  if (SL0CM410.SL0CMBCN[SLWIDX01] > " ")
    SLSREC.SLSBCN = SL0CM410.SL0CMBCN[SLWIDX01];
    SLSREC.SLSECN = SL0CM410.SL0CMECN[SLWIDX01];
  else
    SLSREC.SLSBCN = "        ";
    SLSREC.SLSECN = "99999999";
  end

   /* ************************************************************/
   /* *** setup palet range with entered values               ****/
   /* ************************************************************/

  SLSREC.SLSBPL = SL0CM410.SL0CMBPL[SLWIDX01];
  SLSREC.SLSEPL = SL0CM410.SL0CMEPL[SLWIDX01];

   /* ************************************************************/
   /* *** if current owner group entered, use its value       ****/
   /* *** otherwise, use '*'                                  ****/
   /* ************************************************************/

  if (SL0CM410.SL0CMCOW[SLWIDX01] > " ")
    VRLITM02.XOWCD = SL0CM410.SL0CMCOW[SLWIDX01];
  else
    VRLITM02.XOWCD = "*";
  end

   /* ************************************************************/
   /* *** if current unit of measure entered, use its value   ****/
   /* *** otherwise, use '*'                                  ****/
   /* ************************************************************/

  if (SL0CM410.SL0CMCUM[SLWIDX01] > " ")
    VRLITM02.XUMCD = SL0CM410.SL0CMCUM[SLWIDX01];
  else
    VRLITM02.XUMCD = "*";
  end

   /* ************************************************************/
   /* *** if current package code entered, use its value      ****/
   /* *** otherwise, use '*'                                  ****/
   /* ************************************************************/

  if (SL0CM410.SL0CMCPG[SLWIDX01] > " ")
    VRLITM02.XPGCD = SL0CM410.SL0CMCPG[SLWIDX01];
  else
    VRLITM02.XPGCD = "*";
  end

   /* ************************************************************/
   /* *** if current sl class code entered, use its value     ****/
   /* *** otherwise, use '*'                                  ****/
   /* ************************************************************/

  if (SL0CM410.SL0CMCSL[SLWIDX01] > " ")
    VRLITM02.XSLCD = SL0CM410.SL0CMCSL[SLWIDX01];
  else
    VRLITM02.XSLCD = "*";
  end

   /* ************************************************************/
   /* *** if current spec code entered, use its value         ****/
   /* *** otherwise, use '*'                                  ****/
   /* ************************************************************/

  if (SL0CM410.SL0CMCSD[SLWIDX01] > " ")
    VRLITM02.PC2INSEG = SL0CM410.SL0CMCSD[SLWIDX01];
  else
    VRLITM02.PC2INSEG = "*";
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS4B

// modify row per line data
Function SL0CS4C()


   /* ************************************************************/
   /* *** if new owner group entered, overlay row value       ****/
   /* ************************************************************/

  if (SL0CM410.SL0CMNOW[SLWIDX01] > " ")
    VRLITM02.XOWCD = SL0CM410.SL0CMNOW[SLWIDX01];
  end

   /* ************************************************************/
   /* *** if new unit of measure entered, overlay row value   ****/
   /* ************************************************************/

  if (SL0CM410.SL0CMNUM[SLWIDX01] > " ")
    VRLITM02.XUMCD = SL0CM410.SL0CMNUM[SLWIDX01];
  end

   /* ************************************************************/
   /* *** if new package code entered, overlay row value      ****/
   /* ************************************************************/

  if (SL0CM410.SL0CMNPG[SLWIDX01] > " ")
    VRLITM02.XPGCD = SL0CM410.SL0CMNPG[SLWIDX01];
  end

   /* ************************************************************/
   /* *** if new sl class code entered, overlay row value     ****/
   /* ************************************************************/

  if (SL0CM410.SL0CMNSL[SLWIDX01] > " ")
    VRLITM02.XSLCD = SL0CM410.SL0CMNSL[SLWIDX01];
  end

   /* ************************************************************/
   /* *** if new spec code entered, overlay row value         ****/
   /* ************************************************************/

  if (SL0CM410.SL0CMNSD[SLWIDX01] > " ")
    VRLITM02.PC2INSEG = SL0CM410.SL0CMNSD[SLWIDX01];
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS4C

// setup select constant values
Function SL0CS4D()


   /* ************************************************************/
   /* *** move scrn key values to item row key flds           ****/
   /* ************************************************************/

  VRLITM02.XWHCD = SL0CM410.XWHCD;
  VRLITM02.TS3CNTNR = SL0CM410.TS3CNTNR;
  if (SL0CM410.PC3PONBR > 0)
    VRLITM02.PC3PONBR = SL0CM410.PC3PONBR;
  else
    VRLITM02.PC3PONBR = SL0CW04.SL0CWSPN;
  end
  VRLITM02.XGPCD = SL0CM410.XGPCD;
  VRLITM02.SY1STNBR = SL0CM410.SY1STNBR;
  VRLITM02.SY2CLRID = SL0CM410.SY2CLRID;
  VRLITM02.XDMCD = SL0CM410.XDMCD;
  VRLITM02.XQACD = SL0CM410.XQACD;
  VRLITM02.XEGCD = "000";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS4D

// select unique vscale01
Function SL0CS61()


   /* ************************************************************/
   /* *** Verify product size to see if it is valid for       ****/
   /* *** size scale.  If size is valid for scale display     ****/
   /* *** warning message that size can be received, but is   ****/
   /* *** not vaild for the current product.                  ****/
   /* ************************************************************/


  set SY4REC empty;

  SY4REC.SY4SZSCL = PKNREC.SY4SZSCL;

  SL0CS62();

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S61A";
      SLWREC.SLWMSGNO = 0000; /* row not found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S61B";
      SLWREC.SLWMSGNO = 0031; /* deadlock try again*/
      return;
    end
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S61C";
    SLWREC.SLWMSGNO = 0001; /* severe error*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS61

// obtain scale row
Function SL0CS62()


   /* ************************************************************/
   /* *** select unique row/view: scale                       ****/
   /* *** using the std module:  IO0040                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -811 = duplicates found                           ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***     <0 = db/severe error (&-911)                    ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* ************************************************************/

  call "IO0040" ("S ", SQLCA, SY4REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -811)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "SL0CS62 ";
  TA1REC.TA1LOCAT[1] = "IO0040  ";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DPROD   ";
  TA1REC.TA1TBLVU = "VSCALE01";
  TA1REC.TA1TBLKE = SY4REC.SY4SZSCL;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS62

// format & write slgrec
Function SL0CS63()

   /* ************************************************************/
   /* *** format and write records to the receipt log except  ****/
   /* *** table for sizes that were received into a warehouse ****/
   /* *** with the incorrect division code.                   ****/
   /* ************************************************************/

  SLGREC.XWHCD = SL0CM110.XWHCD;
  SLGREC.XGPCD = SL0CM110.XGPCD;
  SLGREC.SY1STNBR = SL0CM110.SY1STNBR;
  SLGREC.SY2CLRID = SL0CM110.SY2CLRID;
  SLGREC.XDMCD = SL0CM110.XDMCD;
  SLGREC.XQACD = SL0CM110.XQACD;
  SLGREC.XOWCD = SL0CM110.XOWCD;
  SLGREC.XSDCD = SL0CM110.XSDCD;
  SLGREC.XPGCD = SL0CM110.XPGCD;
  SLGREC.XUMCD = SL0CM110.XUMCD;
  SLGREC.XSLCD = SL0CM110.XSLCD;
  SLGREC.XLCCD = SL0CM110.XLCCD;
  SLGREC.XDVCD = PKNREC.XDVCD[1];
  SLGREC.SY5SZID = SL0CW01.SL0CWSIX;
  SLGREC.SL2RCVD = SL0CW01.SL2RCVD;
  SLGREC.ZZZSDT = X2CREC.X2CCURDT;
  SLGREC.ZZZSTM = X3CREC.X3CCURST;

  call "IO4570" ("A ", SQLCA, SLGREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    SL0CW01.SL0CWERW = "Y"; /* record writen switch*/
    return;
  else
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "SL0CS63 ";
    TA1REC.TA1LOCAT[1] = "IO4570  ";
    TA1REC.TA1LOCAT[2] = "ADD     ";
    TA1REC.TA1LOCAT[3] = "ROW     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VRLXCP01";
    TA1TBLKE = SLGREC.SLGDATA;
    move SQLCA to ERRSQLCA withV60Compat;
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S63A";
    SLWREC.SLWMSGNO = 01;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS63

// format & write slgrec
Function SL0CS73()

   /* ************************************************************/
   /* *** format and write records to the receipt log except  ****/
   /* *** table for sizes that were received into a warehouse ****/
   /* *** with the incorrect division code.                   ****/
   /* ************************************************************/

  SLGREC.XWHCD = SL0CM210.XWHCD;
  SLGREC.XGPCD = SL0CM210.XGPCD;
  SLGREC.SY1STNBR = SL0CM210.SY1STNBR;
  SLGREC.SY2CLRID = SL0CM210.SY2CLRID;
  SLGREC.XDMCD = SL0CM210.XDMCD;
  SLGREC.XQACD = SL0CM210.XQACD;
  SLGREC.XOWCD = SL0CM210.XOWCD;
  SLGREC.XSDCD = SL0CM210.XSDCD;
  SLGREC.XPGCD = SL0CM210.XPGCD;
  SLGREC.XUMCD = SL0CM210.XUMCD;
  SLGREC.XSLCD = SL0CM210.XSLCD;
  SLGREC.XLCCD = SL0CW02.XLCCD;
  SLGREC.XDVCD = PKNREC.XDVCD[1];
  SLGREC.SY5SZID = SL0CW02.SL0CWSIX;
  SLGREC.SL2RCVD = SL0CM210.SL0CMADJ[SLWIDX01];
  SLGREC.ZZZSDT = X2CREC.X2CCURDT;
  SLGREC.ZZZSTM = X3CREC.X3CCURST;

  call "IO4570" ("A ", SQLCA, SLGREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    SL0CW01.SL0CWERW = "Y"; /* record writen switch*/
    return;
  else
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "SL0CS73 ";
    TA1REC.TA1LOCAT[1] = "IO4570  ";
    TA1REC.TA1LOCAT[2] = "ADD     ";
    TA1REC.TA1LOCAT[3] = "ROW     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VRLXCP01";
    TA1TBLKE = SLGREC.SLGDATA;
    move SQLCA to ERRSQLCA withV60Compat;
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S73A";
    SLWREC.SLWMSGNO = 01;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS73

// select set #1 po hdr control
Function SL0CS7B()


   /* ************************************************************/
   /* *** select set # 1 control from:  New Receiving Table   ****/
   /* *** using the std module:  vrcvph01                     ****/
   /* ************************************************************/

  SLWREC.SLWVERSW = "N";
  SLWREC.SLWERRSW = "N";

  SL0CS7C();
  if (SQLCA.VAGen_SQLCODE == 0)

                                  /* SL0CS7D;                       /**/
                                   /* Commented outno more duplicate check*/
   /* IF SQLCA.SQLCODE EQ 0;*/
     /* MOVE 'Y' TO SLWREC.SLWVERSW;*/
     /* MOVE 'Y' TO SLWREC.SLWERRSW;*/
     /* MOVE 'S7BA' TO SLWREC.XXXLOCID;*/
     /* MOVE 0488 TO SLWREC.SLWMSGNO;/* duplicates found in vrcvph01 table*/
   /* END;*/
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      VRCVPH01-CHECK-FLAG = "Y";
      /* MOVE 'S7BB' TO SLWREC.XXXLOCID;*/
      /* MOVE 0487 TO SLWREC.SLWMSGNO;   /* Either Po/SAP Po not found*/
    else
      SLWREC.SLWVERSW = "Y";
      SLWREC.SLWERRSW = "Y";
      if (SQLCA.VAGen_SQLCODE == -911) /* deadlock try again*/
        SLWREC.XXXLOCID = "S7BC";
        SLWREC.SLWMSGNO = 0031;
      else
        SLWREC.XXXLOCID = "S7BD";
        SLWREC.SLWMSGNO = 0001; /* severe error*/
      end
    end
  end
  SL0CS7E();

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS7B

// select set po hdr :1
Function SL0CS7C()


   /* ************************************************************/
   /* *** select set of rows from:  SL Receiving Table        ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique field values for:            ****/
   /* *** the order by for this select set is:                ****/
   /* ***   gpc,pc3ponbr,sapponbr,tscntnr                     ****/
   /* ************************************************************/

  SLSREC.SLSFNC = "S2";

  call "VRCVPH01" (SLSREC, SQLCA, VRCVPH01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "SL0CS7C ";
    TA1REC.TA1LOCAT[1] = "VRCVPH01";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VRCVPH01";
    TA1REC.TA1TBLKE = VRCVPH01.RCVPHKEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** note: fetch handles return code correctly           ****/
   /* ************************************************************/

  SL0CS7D(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS7C

// fetch : po hdr : 1
Function SL0CS7D()


   /* ************************************************************/
   /* *** fetch next row from:  Sl receiving table            ****/
   /* *** using the std module:  vrcvph01                     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ************************************************************/

  SLSREC.SLSFNC = "N2";

  call "VRCVPH01" (SLSREC, SQLCA, VRCVPH01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    VRCVPH01-CHECK-FLAG = "N"; /* No need to check for container*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "SL0CS7D ";
  TA1REC.TA1LOCAT[1] = "VRCVPH01";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VRCVPH01";
  TA1REC.TA1TBLKE = VRCVPH01.RCVPHKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS7D

// close : po hdr : 1
Function SL0CS7E()


   /* ************************************************************/
   /* *** close select set of:  sl rcv  header table          ****/
   /* *** using the std module:  vrcvph01                     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  SLSREC.SLSFNC = "C2";

  call "VRCVPH01" (SLSREC, SQLCA, VRCVPH01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "SL0CS7E ";
  TA1REC.TA1LOCAT[1] = "VRCVPH01";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SELECT  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VRCVPH01";
  TA1REC.TA1TBLKE = VRCVPH01.RCVPHKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS7E

// control for trans ymtcd select
Function SL0CS7F()


   /* ************************************************************/
   /* *** This statement group is used to control the process ****/
   /* *** of obtaining the mode code from transportation.     ****/
   /* *** First the transportation container is selected then ****/
   /* *** the ship hdr and finally the mode code is selected  ****/
   /* *** from the craft table.                               ****/
   /* ************************************************************/


  SL0CS7G();
  if (SQLCA.VAGen_SQLCODE == 0)
    SL0CS7H();
    if (SQLCA.VAGen_SQLCODE == 0)
      SL0CS7I();
      if (SQLCA.VAGen_SQLCODE == 0)
        /* next sentence*/
      else
        if (SQLCA.VAGen_SQLCODE == +100)
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "S7FA";
          SLWREC.SLWMSGNO = 0186; /* no transportation data*/
        else
          if (SQLCA.VAGen_SQLCODE == -911)
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "S7FB";
            SLWREC.SLWMSGNO = 0031; /* please try again*/
          else
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "S7FC";
            SLWREC.SLWMSGNO = 0001; /* notify programming*/
          end
        end
      end
    else
      if (SQLCA.VAGen_SQLCODE == +100)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S7FD";
        SLWREC.SLWMSGNO = 0186; /* no transportation data*/
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "S7FE";
          SLWREC.SLWMSGNO = 0031; /* please try again*/
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "S7FF";
          SLWREC.SLWMSGNO = 0001; /* notify programming*/
        end
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S7FG";
      SLWREC.SLWMSGNO = 0186; /* no transportation data*/
    else
      if (SQLCA.VAGen_SQLCODE == -911)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S7FH";
        SLWREC.SLWMSGNO = 0031; /* please try again*/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S7FI";
        SLWREC.SLWMSGNO = 0001; /* notify programming*/
      end
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS7F

// select unique cntnr tbl row
Function SL0CS7G()


   /* ************************************************************/
   /* *** select set and fetch first from trans container     ****/
   /* *** using the std module:  VRCVPH01                     ****/
   /* *** note: this fetch only returns the sap ship id       ****/
   /* ***       and ts_nike_cntnr_nbr                         ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique with these fields:                    ****/
   /* ***   ts_cntnr_nbr                                      ****/
   /* ************************************************************/

  SLSREC.SLSFNC = "S1";

  call "VRCVPH01" (SLSREC, SQLCA, VRCVPH01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)

    SLSREC.SLSFNC = "N1";

    call "VRCVPH01" (SLSREC, SQLCA, VRCVPH01) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == 0)

      SLSREC.SLSFNC = "C1";

      call "VRCVPH01" (SLSREC, SQLCA, VRCVPH01) {isNoRefresh = yes, isExternal = yes};

      if (SQLCA.VAGen_SQLCODE == 0)

        return;

      end
    end
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "SL0CS7G ";
  TA1REC.TA1LOCAT[1] = "VRCVPH01";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "SET2    ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VRCVPH01";
  TA1REC.TA1TBLKE = VRCVPH01.RCVPHKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  return;


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS7G

// select unique shp hdr tbl row
Function SL0CS7H()


   /* ************************************************************/
   /* *** select unique from: transportation container        ****/
   /* *** using the std module:  VRCVSH01                     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique with these fields:                    ****/
   /* ***   ts_nike_shp_id                                    ****/
   /* ************************************************************/

  VRCVSH01.SL-SAP-SHP-ID = VRCVPH01.SL-SAP-SHP-ID;

  SLSREC.SLSFNC = "S ";

  call "VRCVSH01" (SLSREC, SQLCA, VRCVSH01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "SL0CS7H ";
    TA1REC.TA1LOCAT[1] = "VRCVSH01";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "UNIQUE  ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VRCVSH01";
    TA1REC.TA1TBLKE = VRCVSH01.RCVSHPKEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS7H

// select unique craft tbl row
Function SL0CS7I()


   /* ************************************************************/
   /* *** select unique from: transportation Craft Table      ****/
   /* *** using the std module:  IO2330                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique with these fields:                    ****/
   /* ***   ts_carr_cd                                        ****/
   /* ***   ts_craft_nbr                                      ****/
   /* ************************************************************/

  TS5REC.TSACARCD = VRCVSH01.TSACARCD;
  TS5REC.TS5CRAFT = VRCVSH01.TS5CRAFT;

  SLSREC.SLSFNC = "S ";

  call "IO2330" (SLSREC, SQLCA, TS5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "SL0CS7H ";
    TA1REC.TA1LOCAT[1] = "IO2540  ";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "UNIQUE  ";
    TA1REC.TA1DBASE = "DTRANS  ";
    TA1REC.TA1TBLVU = "VCRAFT01";
    TA1REC.TA1TBLKE = TS5REC.TS5KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS7I

// select set po hdr :1
Function SL0CS8A()


   /* ************************************************************/
   /* *** declare set of rows from:  SL Receiving Table       ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique field values for:            ****/
   /* *** the order by for this select set is:                ****/
   /* ***   tscntnr                                           ****/
   /* ************************************************************/

  SLSREC.SLSFNC = "S1";

  call "VRCVPH01" (SLSREC, SQLCA, VRCVPH01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "SL0CS8A ";
    TA1REC.TA1LOCAT[1] = "VRCVPH01";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VRCVPH01";
    TA1REC.TA1TBLKE = VRCVPH01.RCVPHKEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** note: fetch handles return code correctly           ****/
   /* ************************************************************/

  SL0CS8D(); /* <=== fetch first row*/

  if (SQLCA.VAGen_SQLCODE == 100)
    SLWREC.SLWVERSW = "Y";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S8BA";
    SLWREC.SLWMSGNO = 0491; /* Container Number not found*/
  else
    if (SQLCA.VAGen_SQLCODE == 0)
      SLWREC.SLWVERSW = "Y";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S8BA";
      SLWREC.SLWMSGNO = 0492; /* Then PO/SAP PO is invalid for*/
                                  /* for the container*/
    else
      SLWREC.SLWVERSW = "Y";
      SLWREC.SLWERRSW = "Y";
      if (SQLCA.VAGen_SQLCODE == -911) /* deadlock try again*/
        SLWREC.XXXLOCID = "S8BA";
        SLWREC.SLWMSGNO = 0031;
      else
        SLWREC.XXXLOCID = "S8BA";
        SLWREC.SLWMSGNO = 0001;
      end
    end
  end


  SL0CS8E(); /* close the cursor*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS8A

// fetch : po hdr : 1
Function SL0CS8D()


   /* ************************************************************/
   /* *** fetch next row from:  Sl receiving table            ****/
   /* *** using the std module:  vrcvph01                     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ************************************************************/

  SLSREC.SLSFNC = "N1";

  call "VRCVPH01" (SLSREC, SQLCA, VRCVPH01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "SL0CS8D ";
  TA1REC.TA1LOCAT[1] = "VRCVPH01";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VRCVPH01";
  TA1REC.TA1TBLKE = VRCVPH01.RCVPHKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS8D

// close : po hdr : 1
Function SL0CS8E()


   /* ************************************************************/
   /* *** close select set of:  sl rcv  header table          ****/
   /* *** using the std module:  vrcvph01                     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  SLSREC.SLSFNC = "C1";

  call "VRCVPH01" (SLSREC, SQLCA, VRCVPH01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "SL0CS8E ";
  TA1REC.TA1LOCAT[1] = "VRCVPH01";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SELECT  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VRCVPH01";
  TA1REC.TA1TBLKE = VRCVPH01.RCVPHKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CS8E

// missing input edits
Function SL0CSA0()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: setup defaults for optional fields, if any    ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0CM010.XMSLMSNO > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA0A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0CM010.XMSLMSNO cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSA0

// missing hdr data edits
Function SL0CSA1()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: setup defaults for optional fields, if any    ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0CM110.SL1RCVR > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1B";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0CM110.SL1RCVR cursor, bold;
  end

  if (SL0CM110.SL4ZONE > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1C";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0CM110.SL4ZONE cursor, bold;
  end

  if (SL0CM110.XARCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1D";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0CM110.XARCD cursor, bold;
  end

  if (SL0CM110.XITCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1E";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0CM110.XITCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSA1

// key missing input edits
Function SL0CSA2()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: setup defaults for optional fields, if any    ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0CM210.XMSLMOPT == "P")
    if (SL0CM210.XOWCD > " ")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SA2A";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0CM210.XOWCD cursor, bold;
    end
    if (SL0CM210.XPGCD > " ")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SA2B";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0CM210.XPGCD cursor, bold;
    end
    if (SL0CM210.XSLCD > " ")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SA2C";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0CM210.XSLCD cursor, bold;
    end
    if (SL0CM210.XSDCD > " ")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SA2D";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0CM210.XSDCD cursor, bold;
    end
    if (SL0CM210.XQACD > " ")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SA2E";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0CM210.XQACD cursor, bold;
    end
    if (SL0CM210.XDMCD > " ")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SA2F";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0CM210.XDMCD cursor, bold;
    end
    if (SL0CM210.SY2CLRID > " ")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SA2G";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0CM210.SY2CLRID cursor, bold;
    end
    if (SL0CM210.SY1STNBR > " ")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SA2H";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0CM210.SY1STNBR cursor, bold;
    end
    if (SL0CM210.XGPCD > " ")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SA2I";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0CM210.XGPCD cursor, bold;
    end
    if (SL0CM210.SL2PALET > " ")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SA2M";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0CM210.SL2PALET cursor, bold;
    end
  else
    if (SL0CM210.XOWCD > " ")
      SL0CM210.XOWCD = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SA2O";
      SLWREC.SLWMSGNO = 0153; /* <--- erased msg*/
      set SL0CM210.XOWCD cursor, bold;
    end
    if (SL0CM210.XPGCD > " ")
      SL0CM210.XPGCD = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SA2P";
      SLWREC.SLWMSGNO = 0153; /* <--- erased msg*/
      set SL0CM210.XPGCD cursor, bold;
    end
    if (SL0CM210.XSLCD > " ")
      SL0CM210.XSLCD = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SA2Q";
      SLWREC.SLWMSGNO = 0153; /* <--- erased msg*/
      set SL0CM210.XSLCD cursor, bold;
    end
    if (SL0CM210.XSDCD > " ")
      SL0CM210.XSDCD = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SA2R";
      SLWREC.SLWMSGNO = 0153; /* <--- erased msg*/
      set SL0CM210.XSDCD cursor, bold;
    end
    if (SL0CM210.XQACD > " ")
      SL0CM210.XQACD = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SA2S";
      SLWREC.SLWMSGNO = 0153; /* <--- erased msg*/
      set SL0CM210.XQACD cursor, bold;
    end
    if (SL0CM210.XDMCD > " ")
      SL0CM210.XDMCD = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SA2T";
      SLWREC.SLWMSGNO = 0153; /* <--- erased msg*/
      set SL0CM210.XDMCD cursor, bold;
    end
    if (SL0CM210.SY2CLRID > " ")
      SL0CM210.SY2CLRID = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SA2U";
      SLWREC.SLWMSGNO = 0153; /* <--- erased msg*/
      set SL0CM210.SY2CLRID cursor, bold;
    end
    if (SL0CM210.SY1STNBR > " ")
      SL0CM210.SY1STNBR = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SA2V";
      SLWREC.SLWMSGNO = 0153; /* <--- erased msg*/
      set SL0CM210.SY1STNBR cursor, bold;
    end
    if (SL0CM210.XGPCD > " ")
      SL0CM210.XGPCD = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SA2W";
      SLWREC.SLWMSGNO = 0153; /* <--- erased msg*/
      set SL0CM210.XGPCD cursor, bold;
    end
    /* IF SL0CM210.IN7STNBR EQ 0;*/
    /* IF SL0CM210.SL0CMPID GT ' ';*/
    /* MOVE ' ' TO SL0CM210.SL0CMPID;*/
    /* MOVE 'Y' TO SLWREC.SLWERRSW;*/
    /* MOVE 'SA2X' TO SLWREC.XXXLOCID;*/
    /* MOVE 0153 TO SLWREC.SLWMSGNO;/* <--- erased msg*/
    /* SET SL0CM210.SL0CMPID CURSOR,BRIGHT;*/
    /* END;*/
    if (SL0CM210.PC-SAP-PO-NBR > " ")
      SL0CM210.PC-SAP-PO-NBR = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SA2Y";
      SLWREC.SLWMSGNO = 0153; /* <--- erased msg*/
      set SL0CM210.PC-SAP-PO-NBR cursor, bold;
    end
    if (SL0CM210.PC3PONBR > 0)
      SL0CM210.PC3PONBR = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SA2Z";
      SLWREC.SLWMSGNO = 0153; /* <--- erased msg*/
      set SL0CM210.PC3PONBR cursor, bold;
    end
    /* END;*/
    if (SL0CM210.SL2CASE > " ")
      SL0CM210.SL2CASE = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SA21";
      SLWREC.SLWMSGNO = 0153; /* <--- erased msg*/
      set SL0CM210.SL2CASE cursor, bold;
    end
    if (SL0CM210.SL2PALET > " ")
      SL0CM210.SL2PALET = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SA22";
      SLWREC.SLWMSGNO = 0153; /* <--- erased msg*/
      set SL0CM210.SL2PALET cursor, bold;
    end
  end

  if (SL0CM210.TS3CNTNR > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA23";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0CM210.TS3CNTNR cursor, bold;
  end

  if (SL0CM210.XWHCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA24";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0CM210.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if whse code in tbl & active: put short abrv. on map****/
   /* *** note: whse edited 1st re: used with others          ****/
   /* ************************************************************/

  if (SL0CM210.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0CM210.XWHSABRV = XWHTBL.XWHSABRV[sysVar.arrayIndex];
      SLWREC.XWHOWNGF = XWHTBL.XWHOWNGF[sysVar.arrayIndex];
      SLWREC.XCTCD = XWHTBL.XCTCD[sysVar.arrayIndex]; /* CANA save country cd*/
      SL0CW01.SL0CWTST = sysVar.arrayIndex;
       /* ** note: sl0cw01 fld used so will be unique subscript fld*/
    else
      SL0CM210.XWHSABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2A5";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0CM210.XWHCD cursor, bold;
      return; /* <=== ** execption ***/
    end
  else
    SL0CM210.XWHSABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S2A6";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0CM210.XWHCD cursor, bold;
    return; /* <=== ** execption ***/
  end

  if (SL0CM210.XMSLMOPT == "P")

     /* ************************************************************/
     /* *** make one time table accesses for auxillary and/or   ****/
     /* *** main data                                           ****/
     /* *** note: first time executions before beginning a loop ****/
     /* ***       might also be performed                       ****/
     /* ************************************************************/

     /* ************************************************************/
     /* *** check relational edits                              ****/
     /* ************************************************************/

    SL0CSD2(); /* relational edits*/

    if (SLWREC.SLWERRSW == "Y")
      return;
    end

     /* ************************************************************/
     /* *** obtain receiving log header row for this container  ****/
     /* ************************************************************/

    SL1REC.XWHCD = SL0CM210.XWHCD;
    SL1REC.TS3CNTNR = SL0CM210.TS3CNTNR;

    TA1REC.TA1LOCAT[2] = "SL0CSA2 ";
     /* ** TA1REC.TAMAP setup during initialization ***/

    XSSLSV1(); /* <=== validate receiving log hdr*/

    if (SLWREC.SLWVERSW == "Y")
      SLWREC.SLWERRSW = "Y";
      set SL0CM210.XWHCD bold;
      set SL0CM210.TS3CNTNR cursor, bold;
      return;
    end

     /* ************************************************************/
     /* *** fill hdr/container data fields on map               ****/
     /* ************************************************************/

    SL0CM210.SL1RCVR = SL1REC.SL1RCVR;
    SL0CM210.SL1RCRNO = SL1REC.SL1RCRNO;
    SL0CM210.SL1COMNT = SL1REC.SL1COMNT;
    SL0CM210.SL4ZONE = SL1REC.SL4ZONE;
    SL0CM210.XARCD = SL1REC.XARCD;
    SL0CM210.XITCD = SL1REC.XITCD;
    /* MOVE SL1REC.IN7STNBR TO SL0CM210.IN7STNBR;*/
    SL0CM210.YMTCD = SL1REC.YMTCD;

     /* ************************************************************/
     /* *** if status code greater than 01, cannot be modified  ****/
     /* ************************************************************/

    if (SL1REC.YRSCD == "01"
     || SL1REC.YRSCD == "02")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SA27";
      SLWREC.SLWMSGNO = 0079; /* <--- already processed msg*/
      set SL0CM210.XWHCD bold;
      set SL0CM210.TS3CNTNR cursor, bold;
      return;
    end


     /* ************************************************************/
     /* *** if plan number greater than 0 , cannot be modified  ****/
     /* ************************************************************/

    if (SL1REC.SWEPLLNB == 0)
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SA28";
      SLWREC.SLWMSGNO = 0407; /* <--- container invalid*/
      set SL0CM210.XWHCD bold;
      set SL0CM210.TS3CNTNR cursor, bold;
      return;
    end

    /* IF SL1REC.IN7STNBR GT 0;*/
      /* SL0CS2V;                     /* <=== read stock xfer itm row*/
      /* IF SLWREC.SLWERRSW EQ 'Y';*/
        /* EZERTN;*/
      /* END;*/
    /* END;*/

    SL0CW02.SL0CWPNT = "N"; /* move 'n' to po entered*/

    /* F SL0CM210.IN7STNBR GT 0*/
    if (SL0CM210.XGPCD == "04"
     || PKNREC.XBCCD == "08")
      if (SL0CM210.PC-SAP-PO-NBR > " "
       || SL0CM210.PC3PONBR > 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SA29";
        SLWREC.SLWMSGNO = 0193; /* SAP PO / PO number not valid*/
        set SL0CM210.PC-SAP-PO-NBR cursor, bold;
        set SL0CM210.PC3PONBR bold;
      end
      return; /* return to previous process*/
    end

    /* IF SL0CM210.IN7STNBR EQ 0*/
    /* IF SL0CM210.XWHCD NE '09'      /* Po/SAP Po required for whse 09*/
    if (SL0CM210.XWHCD != "03"
     && SL0CM210.XWHCD != "12"
     && SL0CM210.XGPCD != "01"
     && SL0CM210.XGPCD != "04"
     && PKNREC.XBCCD != "08"
    ) /* AND SL1REC.XITCD NE '17';    /* Even*/
                                   /* for XIT 17, Po/SAP Po required*/
      if (SL0CM210.PC3PONBR == 0
       && SL0CM210.PC-SAP-PO-NBR == " ")
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SA20";
        SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
        set SL0CM210.PC-SAP-PO-NBR bold;
        set SL0CM210.PC3PONBR bold;
      end
    end

    if (SL0CM210.XGPCD == "03"
    ) /* AND SL1REC.XITCD NE '17';    /* not*/
                                   /* trans. type 17 misc*/
      if (SL0CM210.PC-SAP-PO-NBR == " "
       && SL0CM210.PC3PONBR == 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SA2@";
        SLWREC.SLWMSGNO = 0191; /* <--- missing required field msg*/
        set SL0CM210.PC-SAP-PO-NBR cursor, bold;
        set SL0CM210.PC3PONBR bold;
      end
    end

    if (SL0CM210.PC-SAP-PO-NBR > " "
     && SL0CM210.PC3PONBR > 0)
      VRCVPH01.XGPCD = SL0CM210.XGPCD;
      VRCVPH01.TS3CNTNR = SL0CM210.TS3CNTNR;
      VRCVPH01.PC3PONBR = SL0CM210.PC3PONBR;
      VRCVPH01.PC-SAP-PO-NBR = " ";
      SL0CS7B();
      if (SL0CM210.PC-SAP-PO-NBR == VRCVPH01.PC-SAP-PO-NBR)
        /* / Map field does match with Table Data*/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SA2$";
        SLWREC.SLWMSGNO = 0486;
                                   /* PO &  SAP PO not related*/
        set SL0CM210.PC-SAP-PO-NBR cursor, bold;
        set SL0CM210.PC3PONBR bold;
      end
    end
  end

   /* IF SL1REC.XITCD NE '17';         /* if not trans type misc '17'*/
    /* IF SL0CM210.XWHCD EQ '09'*/
      /* OR SL0CM210.XWHCD EQ '03'*/
      /* OR SL0CM210.XGPCD EQ '01';*/
      /* IF SL0CM210.SAPPONBR EQ ' '*/
        /* AND SL0CM210.PC3PONBR EQ 0;*/
        /* MOVE 'Y' TO SLWREC.SLWERRSW;*/
        /* MOVE 'SA2$' TO SLWREC.XXXLOCID;*/
        /* MOVE 0009 TO SLWREC.SLWMSGNO;/* missing required field msg*/
        /* SET SL0CM210.SAPPONBR CURSOR,BRIGHT;*/
        /* SET SL0CM210.PC3PONBR BRIGHT;*/
        /* EZERTN;*/
      /* END;*/
    /* END;*/
   /* END;*/

  if (SL0CM210.XWHCD == "09"
   || SL0CM210.XWHCD == "03"
   || SL0CM210.XGPCD == "01")
    if (SL0CM210.PC-SAP-PO-NBR > " "
     || SL0CM210.PC3PONBR > 0)
       /* next sentence*/
    else
      return;
    end
  end

  SL0CW02.SL0CWPNT = "Y"; /* move 'y' to po entered*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSA2

// key missing input edits
Function SL0CSA3()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: setup defaults for optional fields, if any    ****/
   /* *** note: check in reverse order as in edits            ****/
   /* *** note: since blanks are valid case value,            ****/
   /* ***       it can not be required                        ****/
   /* ************************************************************/

  if (SL0CM310.TS3CNTNR > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0CM310.TS3CNTNR cursor, bold;
  end

  if (SL0CM310.XWHCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3B";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0CM310.XWHCD cursor, bold;
  end

  if (SL0CM310.XMSLMOPT == "C")
    return;
  end

  if (SL0CM310.SL2PALET > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3C";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0CM310.SL2PALET cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSA3

// key missing input edits
Function SL0CSA4()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: setup defaults for optional fields, if any    ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0CM410.XQACD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA4A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0CM410.XQACD cursor, bold;
  end

  if (SL0CM410.XDMCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA4B";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0CM410.XDMCD cursor, bold;
  end

  if (SL0CM410.SY2CLRID > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA4C";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0CM410.SY2CLRID cursor, bold;
  end

  if (SL0CM410.SY1STNBR > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA4D";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0CM410.SY1STNBR cursor, bold;
  end

  if (SL0CM410.XGPCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA4E";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0CM410.XGPCD cursor, bold;
  end

  if (SL0CM410.TS3CNTNR > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA4F";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0CM410.TS3CNTNR cursor, bold;
  end

  if (SL0CM410.XWHCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA4G";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0CM410.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* *** note: save whse owner group flag for owner validate ****/
   /* ************************************************************/

  if (SL0CM410.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0CM410.XWHSABRV = XWHTBL.XWHSABRV[sysVar.arrayIndex];
      SLWREC.XWHOWNGF = XWHTBL.XWHOWNGF[sysVar.arrayIndex];
      SLWREC.XCTCD = XWHTBL.XCTCD[sysVar.arrayIndex]; /* CANA save country code*/
      SL0CW01.SL0CWTST = sysVar.arrayIndex;
       /* ** note: sl0cw01 fld used so will be unique subscript fld*/
    else
      SL0CM410.XWHSABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SA4H";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0CM410.XWHCD cursor, bold;
    end
  else
    SL0CM410.XWHSABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA4I";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0CM410.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** check relational field edits                        ****/
   /* ************************************************************/

  SL0CSD4(); /* relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0CW04.SL0CWPNT = "N"; /* po entered flag*/

  if (SL0CM410.XGPCD == "04"
   || PKNREC.XBCCD == "08")
    if (SL0CM410.PC-SAP-PO-NBR > " "
     || SL0CM410.PC3PONBR > 0)
      SL0CM410.XWHSABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SA4J";
      SLWREC.SLWMSGNO = 0193; /* <--- not valid now*/
      set SL0CM410.PC-SAP-PO-NBR cursor, bold;
      set SL0CM410.PC3PONBR bold;
    end
    return; /* return to previous process*/
  end

   /* IF SL0CM410.XWHCD NE '09'          /* Po/SAP PO required for promo*/
  if (SL0CM410.XWHCD != "03"
   && SL0CM410.XWHCD != "12"
   && SL0CM410.XGPCD != "01"
   && SL0CM410.XGPCD != "04"
   && PKNREC.XBCCD != "08"
  ) /* AND SL0CM410.XITCD NE '17';*/

    if (SL0CM410.PC-SAP-PO-NBR == " "
     && SL0CM410.PC3PONBR == 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SA4K";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0CM410.PC-SAP-PO-NBR cursor, bold;
      set SL0CM410.PC3PONBR bold;
    else

      if (SL0CM410.XGPCD == "03"
      ) /* AND SL0CM410.XITCD NE '17';*/
        if (SL0CM410.PC-SAP-PO-NBR == " "
         && SL0CM410.PC3PONBR == 0)
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SA4N";
          SLWREC.SLWMSGNO = 0191; /* <--- missing required field msg*/
          set SL0CM410.PC-SAP-PO-NBR cursor, bold;
          set SL0CM410.PC3PONBR bold;
        end
      end
    end

    if (SL0CM410.PC-SAP-PO-NBR > " "
     && SL0CM410.PC3PONBR > 0)
      VRCVPH01.XGPCD = SL0CM410.XGPCD;
      VRCVPH01.TS3CNTNR = SL0CM410.TS3CNTNR;
      VRCVPH01.PC3PONBR = SL0CM410.PC3PONBR;
      VRCVPH01.PC-SAP-PO-NBR = " ";
      SL0CS7B();
      if (SL0CM410.PC-SAP-PO-NBR == VRCVPH01.PC-SAP-PO-NBR)
        /* / Map variable matches with table data*/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SA4O";
        SLWREC.SLWMSGNO = 0486;
                                   /* Po & SAP PO not related*/
        set SL0CM410.PC-SAP-PO-NBR cursor, bold;
        set SL0CM410.PC3PONBR bold;
      end
    end
  end

   /* for promo, other than xit 17, it should have either SAP PO or PO*/
   /* IF SL0CM410.XITCD NE '17';*/
    /* IF SL0CM410.XWHCD EQ '09'*/
     /* OR SL0CM410.XWHCD EQ '03'*/
     /* OR SL0CM410.XGPCD EQ '01';*/
     /* IF SL0CM410.PC3PONBR EQ 0*/
       /* AND SL0CM410.SAPPONBR EQ ' ';*/
       /* MOVE 'Y' TO SLWREC.SLWERRSW;*/
       /* MOVE 'SA4P' TO SLWREC.XXXLOCID;*/
       /* MOVE 0009 TO SLWREC.SLWMSGNO;/* missing required field msg*/
       /* SET SL0CM410.SAPPONBR CURSOR,BRIGHT;*/
       /* SET SL0CM410.PC3PONBR BRIGHT;*/
       /* EZERTN;*/
     /* END;*/
      /* ELSE;*/
      /* IF SL0CM410.PC3PONBR EQ ' '*/
      /* AND SL0CM410.PC4ORTYP GT ' ';*/
      /* MOVE 'Y' TO SLWREC.SLWERRSW;*/
      /* MOVE 'SA4Q' TO SLWREC.XXXLOCID;*/
      /* MOVE 0009 TO SLWREC.SLWMSGNO;/* missing required field msg*/
      /* SET SL0CM410.SL0CMPID CURSOR,BRIGHT;*/
      /* SET SL0CM410.PC4ORTYP BRIGHT;*/
      /* EZERTN;*/
      /* END;*/
   /* END;*/
   /* END;*/

  if (SL0CM410.XWHCD == "09"
   || SL0CM410.XWHCD == "03"
   || SL0CM410.XGPCD == "01")
    if (SL0CM410.PC-SAP-PO-NBR > " "
     || SL0CM410.PC3PONBR > 0)
       /* next sentence*/
    else
      return;
    end
  end

  SL0CW04.SL0CWPNT = "Y"; /* move 'y' to po entered*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSA4

// key missing input edits
Function SL0CSA5()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: setup defaults for optional fields, if any    ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0CM510.TS3CNTNR > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA5A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0CM510.TS3CNTNR cursor, bold;
  end

  if (SL0CM510.XWHCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA5B";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0CM510.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSA5

// same hdr key edits
Function SL0CSB1()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw.           ****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (SL0CM110.XWHCD != SL0CW01.XWHCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0CM110.TS3CNTNR != SL0CW01.TS3CNTNR)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSB1

// same key edits
Function SL0CSB2()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw.           ****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (SL0CM210.XMSLMOPT != SL0CW02.XMSLMOPT)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0CM210.XWHCD != SL0CW02.XWHCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0CM210.TS3CNTNR != SL0CW02.TS3CNTNR)
    SLWREC.SLWSKYSW = "N";
    return;
  end


   /* ************************************************************/
   /* *** if option = product, check the following fields     ****/
   /* ************************************************************/

  if (SL0CM210.XMSLMOPT == "C")
    SLWREC.SLWSKYSW = "Y";
    return;
  end

   /* IF SL0CM210.IN7STNBR NE SL0CW02.IN7STNBR;*/
   /* MOVE 'N' TO SLWREC.SLWSKYSW;*/
   /* EZERTN;*/
   /* END;*/

  if (SL0CM210.SL2PALET != SL0CW02.SL2PALET)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0CM210.SL2CASE != SL0CW02.SL2CASE)
    SLWREC.SLWSKYSW = "N";
    return;
  end

   /* IF SL0CM210.SL0CMPID NE SL0CW02.SL0CWPID;*/
   /* MOVE 'N' TO SLWREC.SLWSKYSW;*/
   /* EZERTN;*/
   /* END;*/

   /* IF SL0CM210.PC4ORTYP NE SL0CW02.PC4ORTYP;*/
   /* MOVE 'N' TO SLWREC.SLWSKYSW;*/
   /* EZERTN;*/
   /* END;*/

  if (SL0CM210.PC-SAP-PO-NBR != SL0CW02.PC-SAP-PO-NBR)
    SLWREC.SLWSKYSW = "N";
  end

  if (SL0CM210.PC3PONBR != SL0CW02.PC3PONBR)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0CM210.XGPCD != SL0CW02.XGPCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0CM210.SY1STNBR != SL0CW02.SY1STNBR)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0CM210.SY2CLRID != SL0CW02.SY2CLRID)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0CM210.XDMCD != SL0CW02.XDMCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0CM210.XQACD != SL0CW02.XQACD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0CM210.XSDCD != SL0CW02.XSDCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0CM210.XSLCD != SL0CW02.XSLCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0CM210.XPGCD != SL0CW02.XPGCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0CM210.XUMCD != SL0CW02.XUMCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0CM210.XOWCD != SL0CW02.XOWCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSB2

// same key edits
Function SL0CSB3()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw.           ****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (SL0CM310.XWHCD != SL0CW03.XWHCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0CM310.XMSLMOPT != SL0CW03.XMSLMOPT)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0CM310.TS3CNTNR != SL0CW03.TS3CNTNR)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0CM310.XMSLMOPT == "C")
    SLWREC.SLWSKYSW = "Y";
    return;
  end

  if (SL0CM310.SL2PALET != SL0CW03.SL2PALET)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0CM310.XMSLMOPT == "P")
    SLWREC.SLWSKYSW = "Y";
    return;
  end

  if (SL0CM310.SL2CASE != SL0CW03.SL2CASE)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSB3

// same key edits
Function SL0CSB4()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw.           ****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (SL0CM410.XWHCD != SL0CW04.XWHCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0CM410.TS3CNTNR != SL0CW04.TS3CNTNR)
    SLWREC.SLWSKYSW = "N";
    return;
  end

   /* IF SL0CM410.IN7STNBR NE SL0CW04.IN7STNBR;*/
   /* MOVE 'N' TO SLWREC.SLWSKYSW;*/
   /* EZERTN;*/
   /* END;*/

   /* IF SL0CM410.SL0CMPID NE SL0CW04.SL0CWPID;*/
   /* MOVE 'N' TO SLWREC.SLWSKYSW;*/
   /* EZERTN;*/
   /* END;*/

   /* IF SL0CM410.PC4ORTYP NE SL0CW04.PC4ORTYP;*/
   /* MOVE 'N' TO SLWREC.SLWSKYSW;*/
   /* EZERTN;*/
   /* END;*/

  if (SL0CM410.PC3PONBR != SL0CW04.PC3PONBR)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0CM410.PC-SAP-PO-NBR != SL0CW04.PC-SAP-PO-NBR)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0CM410.XGPCD != SL0CW04.XGPCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0CM410.SY1STNBR != SL0CW04.SY1STNBR)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0CM410.SY2CLRID != SL0CW04.SY2CLRID)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0CM410.XDMCD != SL0CW04.XDMCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0CM410.XQACD != SL0CW04.XQACD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSB4

// hdr data field edits
Function SL0CSC1()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ***       except for owner & setaside which exit        ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** if mode code is entered verify it exists in table   ****/
   /* *** else retrieve it from the transportation system.    ****/
   /* ************************************************************/

  if (SL0CM110.YMTCD > " ")
    set SL0CM110.YMTCD initialAttributes;
    if (SL0CM110.YMTCD in YMTTBL.YMTCD)
      if (YMTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC1A";
        SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
        set SL0CM110.YMTCD cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1B";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0CM110.YMTCD cursor, bold;
    end
  else
    VRCVPH01.TS3CNTNR = SL0CM110.TS3CNTNR;
   /* MOVE 'RC' TO VRCVPH01.TSCPLSTCD;   /* No need any more*/
    SL0CS7F();
    if (SLWREC.SLWERRSW == "Y")
      set SL0CM110.YMTCD cursor, bold;
    else
      SL0CM110.YMTCD = TS5REC.YMTCD;
    end
  end

   /* ************************************************************/
   /* *** if area code in tbl & active: continue              ****/
   /* *** note: make sure area is rcvg & zone exists          ****/
   /* ************************************************************/

  SLWREC.SLWTBLCD = SL0CM110.XARCD;
  SLWREC.XWHCD = SL0CM110.XWHCD;

  if (SLWREC.SLWTBLKY in XARTBL.XARKEY)
    if (XARTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ************************************************************/
       /* *** valid area must be a receiving area                 ****/
       /* ************************************************************/
      if (XARTBL.XARRCVFL[sysVar.arrayIndex] == "Y")
         /* ************************************************************/
         /* *** since valid receiving area, zone record must exist  ****/
         /* ************************************************************/
        SL4REC.XWHCD = SL0CM110.XWHCD;
        SL4REC.XARCD = SL0CM110.XARCD;
        SL4REC.SL4ZONE = SL0CM110.SL4ZONE;
        TA1REC.TA1LOCAT[2] = "SL0CSC1 ";
         /* ** TA1REC.TAMAP setup during initialization ***/
        XSSLSV4(); /* <=== validate area/zone*/
        if (SLWREC.SLWVERSW == "Y")
          SLWREC.SLWERRSW = "Y";
          set SL0CM110.SL4ZONE cursor, bold;
          return; /* <--- ** exception ***/
        end
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC1D";
        SLWREC.SLWMSGNO = 0050; /* <--- not rcvg msg*/
        set SL0CM110.XARCD cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1E";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0CM110.XARCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1F";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0CM110.XARCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if receipt type in tbl & active: put abrv. on map   ****/
   /* ************************************************************/

  if (SL0CM110.XITCD in XITTBL.XITCD)
    if (XITTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XITTBL.XIGCD[sysVar.arrayIndex] == "10")
        if (SL0CM110.XWHCD == "07") /* for 07, only stock receipts(xit 10)*/
          if (SL0CM110.XITCD == "10")
            SL0CM110.XITABRV = XITTBL.XITABRV[sysVar.arrayIndex];
          else
            SL0CM110.XITABRV = " ";
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SC1G";
            SLWREC.SLWMSGNO = 0050; /* <--- not a receiving type*/
            set SL0CM110.XITCD cursor, bold;
          end
        else
          if (SL0CM110.XITCD == "13")
            SL0CM110.XITABRV = " ";
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SC1@";
            SLWREC.SLWMSGNO = 0482; /* Xfer Not applicable*/
            set SL0CM110.XITCD cursor, bold;
          else
            SL0CM110.XITABRV = XITTBL.XITABRV[sysVar.arrayIndex];
          end
        end
      else
        SL0CM110.XITABRV = " ";
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC1$";
        SLWREC.SLWMSGNO = 0050; /* <--- not a receiving type*/
        set SL0CM110.XITCD cursor, bold;
      end
    else
      SL0CM110.XITABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1%";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0CM110.XITCD cursor, bold;
    end
  else
    SL0CM110.XITABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1I";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0CM110.XITCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if entered, stock xfer number must already exist    ****/
   /* *** note: error sw can't be checked because a previous  ****/
   /* ***       error will have set it = 'y'                  ****/
   /* ************************************************************/

   /* IF SL0CM110.IN7STNBR GT 0;*/
    /* IF SL0CM110.XWHCD EQ '02';*/
      /* MOVE SL0CM110.IN7STNBR TO IN7REC.IN7STNBR;*/
      /* MOVE 'SL0CSC1 ' TO TA1REC.TA1LOCAT(2);*/
      /* ;/* ** TA1REC.TAMAP setup during initialization ***/
      /* XSSLSVG;                     /* <=== validate stock xfer no.*/

      /* IF SLWREC.SLWVERSW EQ 'Y';*/
        /* MOVE 'Y' TO SLWREC.SLWERRSW;*/
        /* SET SL0CM110.IN7STNBR CURSOR,BRIGHT;*/
      /* END;*/
   /* ELSE;*/
     /* MOVE 'Y' TO SLWREC.SLWERRSW;*/
     /* MOVE 'SC1J' TO SLWREC.XXXLOCID;*/
                                  /* MOVE 0477 TO SLWREC.SLWMSGNO;/* <-*/
                                   /* Xfer not applicable for this whse*/
     /* SET SL0CM110.IN7STNBR CURSOR,BRIGHT;*/
   /* END;*/
   /* END;*/



   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSC1

// key field edits
Function SL0CSC2()


   /* ************************************************************/
   /* *** edit the following prior to the normal ordered edits****/
   /* *** re: each of thses will exit if error since the error****/
   /* ***     might be a database error (or try again)        ****/
   /* ************************************************************/

  SLWREC.SLWVERSW = "N";
  SLWREC.SLWERRSW = "N";


   /* ************************************************************/
   /* *** if option = product, do the following edits         ****/
   /* ************************************************************/

  if (SL0CM210.XMSLMOPT == "C")
    return;
  end

   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if owner grp code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  SLWREC.XWHCD = SL0CM210.XWHCD;
  SLWREC.SLWTBLCD = SL0CM210.XOWCD;

  TA1REC.TA1LOCAT[2] = "SL0CSC2 ";
   /* ** TA1REC.TAMAP setup during initialization ***/

  XSSLSVO(); /* <=== validate owner group*/

  if (SLWREC.SLWVERSW == "Y")
    SLWREC.SLWERRSW = "Y";
    set SL0CM210.XOWCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if entered, unit of measure must be in tbl & active ****/
   /* *** if blank,   rel edits will find in product db       ****/
   /* ************************************************************/

  if (SL0CM210.XUMCD > " ")
    if (SL0CM210.XUMCD in XUMTBL.XUMCD)
      if (XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* ** next sentence ***/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC2C";
        SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
        set SL0CM210.XUMCD cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2D";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0CM210.XUMCD cursor, bold;
    end
  end

  set SYCREC empty;
  SYCREC.XGPCD = SL0CM210.XGPCD; /* GPC*/
  SYCREC.SY1STNBR = SL0CM210.SY1STNBR; /* Style*/
  SYCREC.SY2CLRID = SL0CM210.SY2CLRID; /* Color*/
  SYCREC.XDMCD = SL0CM210.XDMCD; /* Dim*/

  call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes}; /* Select unique row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    if (SYCREC.XUMCD == SL0CM210.XUMCD)
                        /* Next Sentence*/
    else

      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1MC";
      SLWREC.SLWMSGNO = 0478; /* < Invalid UOM for the Product*/
      set SL0CM210.XUMCD cursor, bold;
    end
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1MC";
      SLWREC.SLWMSGNO = 0479; /* < Cannot find a product*/
      set SL0CM210.XUMCD cursor, bold;
    else
      if (SQLCA.VAGen_SQLCODE == -811)
        SLWREC.XXXLOCID = "S1MC";
        SLWREC.SLWMSGNO = 0480; /* < Duplicate rows found*/
        set SL0CM210.XUMCD cursor, bold;
      else
        if (SQLCA.VAGen_SQLCODE == -911)
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "S1MC";
          SLWREC.SLWMSGNO = 0031;
          set SL0CM210.XUMCD cursor, bold;
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "S1MC";
          SLWREC.SLWMSGNO = 0001;
          set SL0CM210.XUMCD cursor, bold;
        end
      end
    end
  end
   /* ************************************************************/
       /* ;/* *** if package code in tbl & active: continue           ****/
      /* ************************************************************/
  if (SL0CM210.XPGCD in XPGTBL.XPGCD)
    if (XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2E";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0CM210.XPGCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2F";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0CM210.XPGCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if sl class code in tbl & active: continue          ****/
   /* ************************************************************/

  if (SL0CM210.XSLCD in XSLTBL.XSLCD)
    if (XSLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2G";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0CM210.XSLCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2H";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0CM210.XSLCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if spec code in tbl & active: continue              ****/
   /* ************************************************************/

  set PC2REC empty; /* clear row in storage*/

  PC2REC.XGPCD = SL0CM210.XGPCD;
  PC2REC.PC2INSEG = SL0CM210.XSDCD;
  call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    if (PC2REC.XXXSTAT == "A")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2I";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0CM210.XSDCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2J";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0CM210.XSDCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if qualty code in tbl & active: continue            ****/
   /* ************************************************************/

  if (SL0CM210.XQACD in XQATBL.XQACD)
    if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2K";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0CM210.XQACD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2L";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0CM210.XQACD cursor, bold;
  end

   /* ************************************************************/
   /* *** if dim code in tbl & active: continue               ****/
   /* ************************************************************/

  if (SL0CM210.XDMCD in XDMTBL.XDMCD)
    if (XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2M";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0CM210.XDMCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2N";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0CM210.XDMCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if gpc code in tbl & active: continue               ****/
   /* ************************************************************/

  if (SL0CM210.XGPCD in XGPTBL.XGPCD)
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2O";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0CM210.XGPCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2P";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0CM210.XGPCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if error has occurred return to previos process     ****/
   /* ************************************************************/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** p.o. nbr must exist unless stock transfer           ****/
   /* ************************************************************/

  if (SL0CW02.SL0CWPNT == "Y") /* po fields entered*/
    if (SL0CM210.PC3PONBR > 0)
      VRCVPH01.XGPCD = SL0CM210.XGPCD;
      VRCVPH01.PC3PONBR = SL0CM210.PC3PONBR;
      VRCVPH01.TS3CNTNR = SL0CM210.TS3CNTNR;
      VRCVPH01.PC-SAP-PO-NBR = SL0CM210.PC-SAP-PO-NBR;
      SL0CS7B(); /* calls po header by gpc and po number*/
      SL0CW02.PC-SAP-PO-NBR = VRCVPH01.PC-SAP-PO-NBR;
      SL0CM210.PC-SAP-PO-NBR = VRCVPH01.PC-SAP-PO-NBR;
                                 /* To Populae in the Map*/
      if (SLWREC.SLWERRSW == "Y")
        set SL0CM210.PC3PONBR cursor, bold;
        set SL0CM210.PC-SAP-PO-NBR bold;
        return; /* <=== ** execption ***/
      end
    else
      if (SL0CM210.PC-SAP-PO-NBR > " ")
        SL0CW02.PC-SAP-PO-NBR = SL0CM210.PC-SAP-PO-NBR;
        VRCVPH01.XGPCD = SL0CM210.XGPCD;
        VRCVPH01.PC-SAP-PO-NBR = SL0CM210.PC-SAP-PO-NBR;
        VRCVPH01.TS3CNTNR = SL0CM210.TS3CNTNR;
        VRCVPH01.PC3PONBR = SL0CM210.PC3PONBR;
        SL0CS7B(); /* calls new SL tble by SAP PO NBR*/
        SL0CW02.SL0CWSPN = VRCVPH01.PC3PONBR;
        SL0CM210.PC3PONBR = VRCVPH01.PC3PONBR;
                                   /* To Populate in the Map*/
        if (SLWREC.SLWERRSW == "Y")
          set SL0CM210.PC-SAP-PO-NBR cursor, bold;
          set SL0CM210.PC3PONBR bold;
          return; /* <=== ** execption ***/
        end
      end
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSC2

// key field edits
Function SL0CSC3()

   /* ************************************************************/
   /* *** if whse code in tbl & active: put short abrv. on map****/
   /* *** note: exit on whse error since used by other edits  ****/
   /* *** note: option edit part of AFTER section             ****/
   /* ************************************************************/

  if (SL0CM310.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0CM310.XWHSABRV = XWHTBL.XWHSABRV[sysVar.arrayIndex];
      SLWREC.XWHOWNGF = XWHTBL.XWHOWNGF[sysVar.arrayIndex];
      SLWREC.XCTCD = XWHTBL.XCTCD[sysVar.arrayIndex]; /* CANA save country code*/
    else
      SL0CM310.XWHSABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC3A";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0CM310.XWHCD cursor, bold;
      return; /* <=== ** execption ***/
    end
  else
    SL0CM310.XWHSABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC3B";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0CM310.XWHCD cursor, bold;
    return; /* <=== ** execption ***/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSC3

// key field edits
Function SL0CSC4()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if quality code in tbl & active: put abrv. on map   ****/
   /* ************************************************************/

  if (SL0CM410.XQACD in XQATBL.XQACD)
    if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0CM410.XQAABRV = XQATBL.XQAABRV[sysVar.arrayIndex];
    else
      SL0CM410.XQAABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC4A";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0CM410.XQACD cursor, bold;
    end
  else
    SL0CM410.XQAABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC4B";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0CM410.XQACD cursor, bold;
  end

   /* ************************************************************/
   /* *** if gpc in tbl & active: continue                    ****/
   /* ************************************************************/

  if (SL0CM410.XGPCD in XGPTBL.XGPCD)
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC4C";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0CM410.XGPCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC4D";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0CM410.XGPCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if error has occurred return to previos process     ****/
   /* ************************************************************/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** p.o. nbr must exist                                 ****/
   /* ************************************************************/

  if (SL0CW04.SL0CWPNT == "Y") /* po entered flag*/
    if (SL0CM410.PC3PONBR > 0)
      VRCVPH01.XGPCD = SL0CM410.XGPCD;
      VRCVPH01.PC3PONBR = SL0CM410.PC3PONBR;
      VRCVPH01.TS3CNTNR = SL0CM410.TS3CNTNR;
      VRCVPH01.PC-SAP-PO-NBR = SL0CM410.PC-SAP-PO-NBR;
      SL0CS7B(); /* calls po header by gpc and po number*/
      SL0CM410.PC-SAP-PO-NBR = VRCVPH01.PC-SAP-PO-NBR;
                               /* To Populate in the Map*/
    else
      if (SL0CM410.PC-SAP-PO-NBR > " ")
        SL0CW04.SL0CWPID = SL0CM410.PC-SAP-PO-NBR;
                                                    /* These fields are for*/
        VRCVPH01.XGPCD = SL0CM410.XGPCD;
        VRCVPH01.PC-SAP-PO-NBR = SL0CM410.PC-SAP-PO-NBR;
        VRCVPH01.PC3PONBR = SL0CM410.PC3PONBR;
        VRCVPH01.TS3CNTNR = SL0CM410.TS3CNTNR;
        SL0CS7B(); /* calls po header by SAP PO NBR*/
        SL0CM410.PC3PONBR = VRCVPH01.PC3PONBR;
                               /* To Populate in the Map*/
      end
    end
  end
  if (SLWREC.SLWERRSW == "Y")
    set SL0CM410.PC-SAP-PO-NBR cursor, bold;
    set SL0CM410.PC3PONBR bold;
    return; /* <=== ** execption ***/
  end
   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0CSC4

// key field edits
Function SL0CSC5()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (SL0CM510.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0CM510.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      SLWREC.XWHOWNGF = XWHTBL.XWHOWNGF[sysVar.arrayIndex];
      SLWREC.XCTCD = XWHTBL.XCTCD[sysVar.arrayIndex]; /* CANA save country code*/
    else
      SL0CM510.XWHABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC5A";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0CM510.XWHCD cursor, bold;
    end
  else
    SL0CM510.XWHABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC5B";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0CM510.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSC5

// inquiry:(style)color view 2:0
Function SL0CSCI()


   /* ************************************************************/
   /* *** select unique row/view: Dpick Vpksty01              ****/
   /* *** using the std module:  IO1810                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -811 = duplicates found                           ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***     <0 = db/severe error (&-911)                    ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* ************************************************************/

  call "IO1810" ("S ", SQLCA, PKNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)

    /* CANADA 08/25/95*/

    if (SLWREC.XCTCD == "CANA")

      /* format ta1rec in case of bad return code from call to SY2000*/

      TA1REC.TA1PGMNM = "SL0C"; /* CANA program name*/
      TA1REC.TA1LOC = "SL0CSCI"; /* CANA sgrp name*/

      XSSL-CALL-SY2000(); /* CANA call SY2000 to get*/
                              /* product region record*/
      if (WSY2000.WSY2000-RETURN-CODE == 0 /* CANA row found*/
       || WSY2000.WSY2000-RETURN-CODE == 02) /* CANA row not found*/
        return;
      else
        SLWREC.SLWVERSW = "Y";
        /* IF WSY2000.WSY2000-RETURN-CODE = 02;/* CANA row not found*/
         /* MOVE 'SCIA' TO SLWREC.XXXLOCID;*/
         /* MOVE 0456 TO SLWREC.SLWMSGNO;   /* <--- invalid value msg*/
         /* EZERTN;*/
        /* ELSE;*/
        if (WSY2000.WSY2000-RETURN-CODE == 98) /* CANA database busy*/
          SLWREC.SLWSKYSW = "N";
          SLWREC.XXXLOCID = "SCIB";
          SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
          return;
        else
          TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
          TA1REC.TA1LOC = "CALL SY2000";
          TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program appl*/
          TA1REC.TA1PGMNM = "SL0CSCI"; /* Program number*/
          TA1REC.TA1MAP = SLWREC.XXXMAPNM; /* Map name*/
          TA1REC.TA1DBASE = "DPROD  "; /* Data base name*/
          TA1REC.TA1TBLVU = "VSYREG02"; /* Table view name*/
          TA1REC.TA1TBLKE = PKNREC.PKNKEY; /* Table key*/
          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback();
                                  /* Error diagnosis routine*/
          call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes};

        end
        /* END;*/
      end
    end
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -811)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSYCI0 ";
  TA1REC.TA1LOCAT[1] = "IO1810  ";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DPICK   ";
  TA1REC.TA1TBLVU = "VPKSTY01";
  TA1REC.TA1TBLKE = PKNREC.PKNKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSCI

// hdr data relational edits
Function SL0CSD1()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSD1

// key relational edits
Function SL0CSD2()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** do the following edits only if option = product     ****/
   /* ************************************************************/

  if (SL0CM210.XMSLMOPT == "C")
    return;
  end

   /* ************************************************************/
   /* *** use the combined style color product view to obtain ****/
   /* *** the short style name and short color abbrv.; and    ****/
   /* *** if blank, the default unit of measure               ****/
   /* ************************************************************/

  PKNREC.XGPCD = SL0CM210.XGPCD;
  PKNREC.SY1STNBR = SL0CM210.SY1STNBR;
  PKNREC.SY2CLRID = SL0CM210.SY2CLRID;
  PKNREC.XDMCD = SL0CM210.XDMCD;

  SL0CSVJ(); /* <=== validate style/color combo*/

  if (SLWREC.SLWVERSW == "Y")
    SLWREC.SLWERRSW = "Y";
    set SL0CM210.XGPCD bold;
    set SL0CM210.SY1STNBR cursor, bold;
    set SL0CM210.SY2CLRID bold;
    set SL0CM210.XDMCD bold;
    return;
  end

  SL0CM210.SY1SSTNM = PKNREC.SY1SSTNM;
  SL0CM210.SY2CLRAB = PKNREC.SY2CLRAB;

  if (SL0CM210.XUMCD > " ")
     /* ** next sentence ***/
  else
    SL0CM210.XUMCD = "01";
  end

   /* *************************************************************/
   /* *** if current date greater than effective date:         ****/
   /* *** use the corresponding life cycle code                ****/
   /* *** note: effective dates in ascending order             ****/
   /* *************************************************************/

  if (X2CREC.X2CCURDT >= PKNREC.SY2CEDT1)
    SL0CW02.XLCCD = PKNREC.XLCCD1;
  else
    if (X2CREC.X2CCURDT >= PKNREC.SY2CEDT2)
      SL0CW02.XLCCD = PKNREC.XLCCD2;
    else
      if (X2CREC.X2CCURDT >= PKNREC.SY2CEDT3)
        SL0CW02.XLCCD = PKNREC.XLCCD3;
      else
        if (X2CREC.X2CCURDT >= PKNREC.SY2CEDT4)
          SL0CW02.XLCCD = PKNREC.XLCCD4;
        else
          /* ***********************************************************/
          /* *** fall thru error -- code should not be executed     ****/
          /* ***********************************************************/
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SD2A";
          SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
          return;
        end
      end
    end
  end

  if (SL0CM210.XGPCD == XWHTBL.XGPCD1[SL0CWTST]
   || SL0CM210.XGPCD == XWHTBL.XGPCD2[SL0CWTST]
   || SL0CM210.XGPCD == XWHTBL.XGPCD3[SL0CWTST]
   || SL0CM210.XGPCD == XWHTBL.XGPCD4[SL0CWTST]
   || SL0CM210.XGPCD == XWHTBL.XGPCD5[SL0CWTST]
   || SL0CM210.XGPCD == XWHTBL.XGPCD6[SL0CWTST]
   || SL0CM210.XGPCD == XWHTBL.XGPCD7[SL0CWTST]
   || SL0CM210.XGPCD == XWHTBL.XGPCD8[SL0CWTST])
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD2B";
    SLWREC.SLWMSGNO = 0157; /* <--- invalid gpc w/whse msg*/
    set SL0CM210.XGPCD cursor, bold;
    set SL0CM210.XWHCD bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSD2

// key relational edits
Function SL0CSD3()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** obtain receiving log header row for this container  ****/
   /* ************************************************************/

  SL1REC.XWHCD = SL0CM310.XWHCD;
  SL1REC.TS3CNTNR = SL0CM310.TS3CNTNR;

  TA1REC.TA1LOCAT[2] = "SL0CSD3 ";
   /* ** TA1REC.TAMAP setup during initialization ***/

  XSSLSV1(); /* <=== validate receiving log hdr*/

  if (SLWREC.SLWVERSW == "Y")
    SLWREC.SLWERRSW = "Y";
    set SL0CM310.XWHCD bold;
    set SL0CM310.TS3CNTNR cursor, bold;
    return;
  end

   /* ************************************************************/
   /* *** if status code greater than 01,02 can't be modified  ***/
   /* ************************************************************/

  if (SL1REC.YRSCD == "01"
   || SL1REC.YRSCD == "02")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD3A";
    SLWREC.SLWMSGNO = 0079; /* <--- cannot be entered msg*/
    set SL0CM310.XWHCD bold;
    set SL0CM310.TS3CNTNR cursor, bold;
    return;
  end


   /* ************************************************************/
   /* *** if plan number greater than 0, can't be modified     ***/
   /* ************************************************************/

  if (SL1REC.SWEPLLNB == 0)
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD3B";
    SLWREC.SLWMSGNO = 0407; /* <--- container invalid*/
    set SL0CM310.XWHCD bold;
    set SL0CM310.TS3CNTNR cursor, bold;
    return;
  end

   /* ************************************************************/
   /* *** fill hdr/container data fields on map               ****/
   /* ************************************************************/

  SL0CM310.SL1RCVR = SL1REC.SL1RCVR;
  SL0CM310.SL1COMNT = SL1REC.SL1COMNT;
  SL0CM310.SL1RCRNO = SL1REC.SL1RCRNO;
  SL0CM310.SL4ZONE = SL1REC.SL4ZONE;
  SL0CM310.XARCD = SL1REC.XARCD;
  SL0CM310.XITCD = SL1REC.XITCD;
   /* MOVE SL1REC.IN7STNBR TO SL0CM310.IN7STNBR;*/

  if (SL0CM310.XMSLMOPT == "A")
    return;
  end

  if (SL0CM310.SL2CASE > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD3C";
    SLWREC.SLWMSGNO = 0065; /* <--- cannot be entered msg*/
    set SL0CM310.SL2CASE cursor, bold;
  end

  if (SL0CM310.XMSLMOPT == "P")
    return;
  end

  if (SL0CM310.SL2PALET > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD3D";
    SLWREC.SLWMSGNO = 0065; /* <--- cannot be entered msg*/
    set SL0CM310.SL2PALET cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSD3

// key relational edits
Function SL0CSD4()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

  if (SL0CM410.XGPCD == XWHTBL.XGPCD1[SL0CWTST]
   || SL0CM410.XGPCD == XWHTBL.XGPCD2[SL0CWTST]
   || SL0CM410.XGPCD == XWHTBL.XGPCD3[SL0CWTST]
   || SL0CM410.XGPCD == XWHTBL.XGPCD4[SL0CWTST]
   || SL0CM410.XGPCD == XWHTBL.XGPCD5[SL0CWTST]
   || SL0CM410.XGPCD == XWHTBL.XGPCD6[SL0CWTST]
   || SL0CM410.XGPCD == XWHTBL.XGPCD7[SL0CWTST]
   || SL0CM410.XGPCD == XWHTBL.XGPCD8[SL0CWTST])
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD4A";
    SLWREC.SLWMSGNO = 0157; /* <--- invalid gpc w/whse msg*/
    set SL0CM410.XGPCD cursor, bold;
    set SL0CM410.XWHCD bold;
  end

   /* ************************************************************/
   /* *** obtain receiving log header row for this container  ****/
   /* ************************************************************/

  SL1REC.XWHCD = SL0CM410.XWHCD;
  SL1REC.TS3CNTNR = SL0CM410.TS3CNTNR;

  TA1REC.TA1LOCAT[2] = "SL0CSD4 ";
   /* ** TA1REC.TAMAP setup during initialization ***/

  XSSLSV1(); /* <=== validate receiving log hdr*/

  if (SLWREC.SLWVERSW == "Y")
    SLWREC.SLWERRSW = "Y";
    set SL0CM410.XWHCD bold;
    set SL0CM410.TS3CNTNR cursor, bold;
    return;
  end

   /* ************************************************************/
   /* *** fill hdr/container data fields on map               ****/
   /* ************************************************************/

  SL0CM410.SL1RCRNO = SL1REC.SL1RCRNO;
  SL0CM410.SL4ZONE = SL1REC.SL4ZONE;
  SL0CM410.XARCD = SL1REC.XARCD;
  SL0CM410.XITCD = SL1REC.XITCD;
   /* MOVE SL1REC.IN7STNBR TO SL0CM410.IN7STNBR;*/
  SL0CM410.SL1COMNT = SL1REC.SL1COMNT;
  SL0CM410.SL1RCVR = SL1REC.SL1RCVR;

   /* ************************************************************/
   /* *** if status code greater than 01, cannot be modified  ****/
   /* ************************************************************/

  if (SL1REC.YRSCD == "01"
   || SL1REC.YRSCD == "02")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD4C";
    SLWREC.SLWMSGNO = 0079; /* <--- cannot be entered msg*/
    set SL0CM410.XWHCD bold;
    set SL0CM410.TS3CNTNR cursor, bold;
    return;
  end


   /* ************************************************************/
   /* *** if plan number greater than 0, cannot be modified   ****/
   /* ************************************************************/

  if (SL1REC.SWEPLLNB == 0)
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD4D";
    SLWREC.SLWMSGNO = 0407; /* <--- container invalid*/
    set SL0CM410.XWHCD bold;
    set SL0CM410.TS3CNTNR cursor, bold;
    return;
  end

   /* ************************************************************/
   /* *** use the combined style color product view to obtain ****/
   /* *** the short style name and short color abbrv.; and    ****/
   /* *** if blank, the default unit of measure               ****/
   /* ************************************************************/

  PKNREC.XGPCD = SL0CM410.XGPCD;
  PKNREC.SY1STNBR = SL0CM410.SY1STNBR;
  PKNREC.SY2CLRID = SL0CM410.SY2CLRID;
  PKNREC.XDMCD = SL0CM410.XDMCD;

  SL0CSVJ(); /* <=== validate style/color combo*/

  if (SLWREC.SLWVERSW == "Y")
    SLWREC.SLWERRSW = "Y";
    set SL0CM410.XGPCD bold;
    set SL0CM410.SY1STNBR cursor, bold;
    set SL0CM410.SY2CLRID bold;
    set SL0CM410.XDMCD bold;
    return;
  end

  SL0CM410.SY1SSTNM = PKNREC.SY1SSTNM;
  SL0CM410.SY2CLRAB = PKNREC.SY2CLRAB;

   /* ************************************************************/
   /* *** if current date greater than effective date:        ****/
   /* *** use the corresponding life cycle code               ****/
   /* *** note: effective dates in ascending order            ****/
   /* ************************************************************/

  if (X2CREC.X2CCURDT >= PKNREC.SY2CEDT1)
    SL0CM410.XLCCD = PKNREC.XLCCD1;
  else
    if (X2CREC.X2CCURDT >= PKNREC.SY2CEDT2)
      SL0CM410.XLCCD = PKNREC.XLCCD2;
    else
      if (X2CREC.X2CCURDT >= PKNREC.SY2CEDT3)
        SL0CM410.XLCCD = PKNREC.XLCCD3;
      else
        if (X2CREC.X2CCURDT >= PKNREC.SY2CEDT4)
          SL0CM410.XLCCD = PKNREC.XLCCD4;
        else
           /* ************************************************************/
           /* *** fall thru error - code shouldn't have been executed ****/
           /* ************************************************************/
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SD4E";
          SLWREC.SLWMSGNO = 0001; /* <--- severe error msg/fall thru*/
          set SL0CM410.XGPCD bold;
          set SL0CM410.SY1STNBR cursor, bold;
          set SL0CM410.SY2CLRID bold;
          set SL0CM410.XDMCD bold;
          return;
        end
      end
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSD4

// key relational edits
Function SL0CSD5()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** obtain receiving log header row for this container  ****/
   /* ************************************************************/

  SL1REC.XWHCD = SL0CM510.XWHCD;
  SL1REC.TS3CNTNR = SL0CM510.TS3CNTNR;

  TA1REC.TA1LOCAT[2] = "SL0CSD5 ";
   /* ** TA1REC.TAMAP setup during initialization ***/

  XSSLSV1(); /* <=== validate receiving log hdr*/

  if (SLWREC.SLWVERSW == "Y")
    SLWREC.SLWERRSW = "Y";
    set SL0CM510.XWHCD bold;
    set SL0CM510.TS3CNTNR cursor, bold;
    return;
  end

   /* ************************************************************/
   /* *** fill hdr/container data fields on map               ****/
   /* ************************************************************/

  SL0CM510.YRSCD = SL1REC.YRSCD;
  SL0CM510.XITCD = SL1REC.XITCD;
  SL0CM510.XARCD = SL1REC.XARCD;
  SL0CM510.SL4ZONE = SL1REC.SL4ZONE;
   /* MOVE SL1REC.IN7STNBR TO SL0CM510.IN7STNBR;*/
  SL0CM510.SL1RCRNO = SL1REC.SL1RCRNO;
  SL0CM510.SL1COMNT = SL1REC.SL1COMNT;
  SL0CW05.SL0CWDTE = SL1REC.SL1CRTDT;
  SL0CM510.SL1CRTDT = SL0CW05.SL0CWSDT;

   /* ************************************************************/
   /* *** if status code greater than 03, cannot be modified  ****/
   /* ************************************************************/

  if (SL1REC.YRSCD == "01"
   || SL1REC.YRSCD == "02"
   || SL1REC.YRSCD == "03")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD5A";
    SLWREC.SLWMSGNO = 0079; /* <--- cannot be modified msg*/
    set SL0CM510.XWHCD bold;
    set SL0CM510.TS3CNTNR cursor, bold;
    return;
  end


   /* ************************************************************/
   /* *** if plan number greater than 0, cannot be modified   ****/
   /* ************************************************************/

  if (SL1REC.SWEPLLNB == 0)
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD5B";
    SLWREC.SLWMSGNO = 0407; /* <--- container invalid*/
    set SL0CM510.XWHCD bold;
    set SL0CM510.TS3CNTNR cursor, bold;
    return;
  end

   /* ************************************************************/
   /* *** if receipt type in tbl & active: put abrv. on map   ****/
   /* ************************************************************/

  if (SL0CM510.XITCD in XITTBL.XITCD)
    if (XITTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XITTBL.XIGCD[sysVar.arrayIndex] == "10")
        if (SL0CM510.XWHCD == "07")
          if (SL0CM510.XITCD == "10"
           || SL0CM510.XITCD == "13")
            SL0CM510.XITABRV = XITTBL.XITABRV[sysVar.arrayIndex];
          else
            SL0CM510.XITABRV = " ";
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SD5C";
            SLWREC.SLWMSGNO = 0050; /* <--- not a receiving type*/
            set SL0CM510.XITCD cursor, bold;
          end
        else
          if (SL0CM510.XITCD == "13") /* Xfer not applicable for any whse*/
            SL0CM510.XITABRV = " ";
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SD5@";
            SLWREC.SLWMSGNO = 0050; /* <--- not a receiving type*/
            set SL0CM510.XITCD cursor, bold;
          else
            SL0CM510.XITABRV = XITTBL.XITABRV[sysVar.arrayIndex];
          end
        end
      else
        SL0CM510.XITABRV = " ";
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SD5$";
        SLWREC.SLWMSGNO = 0050; /* <--- not a receiving type*/
        set SL0CM510.XITCD cursor, bold;
      end
    else
      SL0CM510.XITABRV = " ";
      SL0CM510.XITABRV = XITTBL.XITABRV[sysVar.arrayIndex];
      SLWREC.XXXLOCID = "SD5D";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0CM510.XITCD cursor, bold;
    end
  else
    SL0CM510.XITABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD5E";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0CM510.XITCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if receipt status in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (SL0CM510.YRSCD in YRSTBL.YRSCD)
    if (YRSTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0CM510.YRSABRV = YRSTBL.YRSABRV[sysVar.arrayIndex];
    else
      SL0CM510.YRSABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD5F";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0CM510.YRSCD cursor, bold;
    end
  else
    SL0CM510.YRSABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD5G";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0CM510.YRSCD cursor, bold;
  end

   /* ------------------------------------------------------------*/
   /* do not allow updates at night (for DCMS conversion)*/
   /* ------------------------------------------------------------*/

  if (SL0CM510.XWHCD == "51")
    XX0XS01(); /* get time*/
    if (XX0XW01.XX0XWTIM >= 1900
     || XX0XW01.XX0XWTIM <= 0100)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD5G";
      SLWREC.SLWMSGNO = 0475; /* <--- inactive msg*/
      set SL0CM510.TS3CNTNR cursor, bold;
    end
  end

   /* ------------------------------------------------------------*/
   /* DO NOT ALLOW UPDATES BETWEEN 8:00pm and 2:30am FOR CANADA*/
   /* SAP runs the ARUN job which can not have goods receipts*/
   /* being sent from GOAL to SAP while it is running.*/
   /* if changing the time must also change message 476 in SL00ENU*/
   /* ------------------------------------------------------------*/

   /* IF SL0CM510.XWHCD EQ '42';*/
    /* XX0XS01;                       /* get time*/
    /* IF XX0XW01.XX0XWTIM GE 2000*/
      /* OR XX0XW01.XX0XWTIM LE 0230;*/
      /* MOVE 'Y' TO SLWREC.SLWERRSW;*/
      /* MOVE 'SD5G' TO SLWREC.XXXLOCID;*/
      /* MOVE 0476 TO SLWREC.SLWMSGNO;/* <--- inactive msg*/
      /* SET SL0CM510.TS3CNTNR CURSOR,BRIGHT;*/
    /* END;*/
   /* END;*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSD5

// obtain hdr data
Function SL0CSE1()


   /* ************************************************************/
   /* *** make one time table accesses for auxillary and/or   ****/
   /* *** main data                                           ****/
   /* *** note: first time executions before beginning a loop ****/
   /* ***       might also be performed                       ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** obtain next receiving report number                 ****/
   /* *** note: sgrp automatically updates the control file   ****/
   /* ***       with the new next receiving rpt no.           ****/
   /* ************************************************************/

  SL3REC.XWHCD = "00";

  TA1REC.TA1LOCAT[2] = "SL0CSE1 ";
   /* ** TA1REC.TAMAP setup during initialization ***/

  XSSL3G3(); /* <=== obtain next recvg rpt no.*/

  if (SQLCA.VAGen_SQLCODE == 0)
    SL0CM110.SL1RCRNO = SL3REC.SL3NXRRN;
  else
    SLWREC.SLWERRSW = "Y";
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.XXXLOCID = "SE1A";
      SLWREC.SLWMSGNO = 0001; /* <--- not on db/severe msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.XXXLOCID = "SE1B";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.XXXLOCID = "SE1C";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSE1

// key obtain table data
Function SL0CSE2()


   /* ************************************************************/
   /* *** make one time table accesses for auxillary and/or   ****/
   /* *** main data                                           ****/
   /* *** note: first time executions before beginning a loop ****/
   /* ***       might also be performed                       ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** obtain receiving log header row for this container  ****/
   /* ************************************************************/

  SL1REC.XWHCD = SL0CM210.XWHCD;
  SL1REC.TS3CNTNR = SL0CM210.TS3CNTNR;

  TA1REC.TA1LOCAT[2] = "SL0CSE2 ";
   /* ** TA1REC.TAMAP setup during initialization ***/

  XSSLSV1(); /* <=== validate receiving log hdr*/

  if (SLWREC.SLWVERSW == "Y")
    SLWREC.SLWERRSW = "Y";
    set SL0CM210.XWHCD bold;
    set SL0CM210.TS3CNTNR cursor, bold;
    return;
  end

   /* ************************************************************/
   /* *** fill hdr/container data fields on map               ****/
   /* ************************************************************/

  SL0CM210.SL1RCVR = SL1REC.SL1RCVR;
  SL0CM210.SL1RCRNO = SL1REC.SL1RCRNO;
  SL0CM210.SL1COMNT = SL1REC.SL1COMNT;
  SL0CM210.SL4ZONE = SL1REC.SL4ZONE;
  SL0CM210.XARCD = SL1REC.XARCD;
  SL0CM210.XITCD = SL1REC.XITCD;
   /* MOVE SL1REC.IN7STNBR TO SL0CM210.IN7STNBR;*/
  SL0CM210.YMTCD = SL1REC.YMTCD;

   /* ************************************************************/
   /* *** if status code greater than 01, cannot be modified  ****/
   /* ************************************************************/

  if (SL1REC.YRSCD == "01"
   || SL1REC.YRSCD == "02")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE2A";
    SLWREC.SLWMSGNO = 0079; /* <--- already processed msg*/
    set SL0CM210.XWHCD bold;
    set SL0CM210.TS3CNTNR cursor, bold;
    return;
  end


   /* ************************************************************/
   /* *** if plan number greater than 0 , cannot be modified  ****/
   /* ************************************************************/

  if (SL1REC.SWEPLLNB == 0)
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE2B";
    SLWREC.SLWMSGNO = 0407; /* <--- container invalid*/
    set SL0CM210.XWHCD bold;
    set SL0CM210.TS3CNTNR cursor, bold;
    return;
  end

   /* IF SL1REC.IN7STNBR GT 0;*/
    /* SL0CS2V;                        /* <=== read stock xfer itm row*/
    /* IF SLWREC.SLWERRSW EQ 'Y';*/
      /* EZERTN;*/
    /* END;*/
   /* END;*/

   /* ************************************************************/
   /* *** if option = product, obtain receiving log item rows ****/
   /* ************************************************************/

  if (SL0CM210.XMSLMOPT == "C")
    return;
  end

  set VRLITM02 empty; /* Row storage area*/

  VRLITM02.XWHCD = SL0CM210.XWHCD;
  VRLITM02.TS3CNTNR = SL0CM210.TS3CNTNR;
  VRLITM02.SL2PALET = SL0CM210.SL2PALET;
  VRLITM02.SL2CASE = SL0CM210.SL2CASE;
  if (SL0CM210.PC3PONBR > 0)
    VRLITM02.PC3PONBR = SL0CM210.PC3PONBR;
  else
    VRLITM02.PC3PONBR = SL0CW02.SL0CWSPN;
  end
  if (SL0CM210.PC-SAP-PO-NBR > " ")
    VRLITM02.PC-SAP-PO-NBR = SL0CM210.PC-SAP-PO-NBR;
  else
    VRLITM02.PC-SAP-PO-NBR = SL0CW02.PC-SAP-PO-NBR;
  end
  VRLITM02.XGPCD = SL0CM210.XGPCD;
  VRLITM02.SY1STNBR = SL0CM210.SY1STNBR;
  VRLITM02.SY2CLRID = SL0CM210.SY2CLRID;
  VRLITM02.XDMCD = SL0CM210.XDMCD;
  VRLITM02.XQACD = SL0CM210.XQACD;
  VRLITM02.PC2INSEG = SL0CM210.XSDCD;
  VRLITM02.XEGCD = "000";
  VRLITM02.XSLCD = SL0CM210.XSLCD;
  VRLITM02.XPGCD = SL0CM210.XPGCD;
  VRLITM02.XUMCD = SL0CM210.XUMCD;
  VRLITM02.XOWCD = SL0CM210.XOWCD;

  TA1REC.TA1LOCAT[2] = "SL0CSE2 ";
   /* ** TA1REC.TAMAP setup during initialization ***/

  XSSLS-S3-VRLITM02(); /* <=== select set rcvg log items*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    set SL0CM210.SL2PALET bold;
    set SL0CM210.SL2CASE bold;
    /* SET SL0CM210.SL0CMPID BRIGHT;*/
    /* SET SL0CM210.PC4ORTYP BRIGHT;*/
    set SL0CM210.PC3PONBR bold;
    set SL0CM210.PC-SAP-PO-NBR bold;
    set SL0CM210.XGPCD bold;
    set SL0CM210.SY1STNBR cursor, bold;
    set SL0CM210.SY2CLRID bold;
    set SL0CM210.XDMCD bold;
    set SL0CM210.XQACD bold;
    set SL0CM210.XSDCD bold;
    set SL0CM210.XSLCD bold;
    set SL0CM210.XPGCD bold;
    set SL0CM210.XUMCD bold;
    set SL0CM210.XOWCD bold;
    SLWREC.SLWERRSW = "Y";
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.XXXLOCID = "SE2E";
      SLWREC.SLWMSGNO = 0012; /* <--- not on db msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.XXXLOCID = "SE2F";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811)
      SLWREC.XXXLOCID = "SE2G";
      SLWREC.SLWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
      return;
    end
    SLWREC.XXXLOCID = "SE2H";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** obtain all valid size description for this product  ****/
   /* ************************************************************/

  set SYPREC empty;

  SYPREC.SYPFC = "PC";
  SYPREC.SYPCMPSW = "N";

  SYPREC.XGPCD = SL0CM210.XGPCD;
  SYPREC.SY1STNBR = SL0CM210.SY1STNBR;
  SYPREC.SY2CLRID = SL0CM210.SY2CLRID;
  SYPREC.XDMCD = SL0CM210.XDMCD;
  SYPREC.XQACD = "**";

  TA1REC.TA1LOCAT[2] = "SL0CSE2 ";
   /* ** TA1REC.TAMAP setup during initialization ***/

  SL0CSPI(); /* <=== get size xlations*/

  if (SYPREC.SYPRC == 0)
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    set SL0CM210.XGPCD bold;
    set SL0CM210.SY1STNBR cursor, bold;
    set SL0CM210.SY2CLRID bold;
    set SL0CM210.XDMCD bold;
    set SL0CM210.XQACD bold;
    if (SYPREC.SYPRC == +10)
      SLWREC.XXXLOCID = "SE2I";
      SLWREC.SLWMSGNO = 0012; /* <--- not on db msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == +9)
      SLWREC.XXXLOCID = "SE2J";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.XXXLOCID = "SE2K";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** setup map product fields from 1st row only,         ****/
   /* *** (from 1st fetch in the select set)                  ****/
   /* *** even if others have different values                ****/
   /* *** note: logically they shouldn't...                   ****/
   /* ************************************************************/

  SL0CM210.SL5LOCTN = VRLITM02.SL5LOCTN;
  SL0CM210.INASAID = VRLITM02.INASAID;
  SL0CM210.SY1UNPCS = VRLITM02.SY1UNPCS;

   /* ************************************************************/
   /* *** setup map data fields                               ****/
   /* *** note: leave non-used size flds open to add sizes    ****/
   /* *** note: first fetch done as part of select set        ****/
   /* *** note: desc is askip = can't erase later but the     ****/
   /* ***       code is still in sl0cs2r in case needed       ****/
   /* ************************************************************/

  SLWREC.SLWIDX03 = 1;
  TA1REC.TA1LOCAT[2] = "SL0CSE2 ";
   /* ** TA1REC.TAMAP setup during initialization ***/

  while (SLWREC.SLWIDX03 <= 30)
    if (SQLCA.VAGen_SQLCODE == 0)
      SLWREC.SLWIDX04 = VRLITM02.SY5SZID;
      SL0CM210.SY4IDDSC[SLWIDX03] = SYPREC.SY4IDDSC[SLWIDX04];
      set SL0CM210.SY4IDDSC[SLWIDX03] skip;
      SL0CM210.SL2RCVD[SLWIDX03] = VRLITM02.SL2RCVD;
      SL0CM210.SL0CMADJ[SLWIDX03] = 0;
      SL0CW02.SY5SZID[SLWIDX03] = VRLITM02.SY5SZID;
      SL0CW02.ZZZCHGCT[SLWIDX03] = VRLITM02.ZZ-CHNG-CNT;
      if (SYPREC.SY4IDDSC[SLWIDX04] == " "
       && VRLITM02.SL2RCVD > 0)
        SL0CM210.SY4IDDSC[SLWIDX03] = "*****";
      end
      XSSLS-N3-VRLITM02(); /* <=== fetch next rcvg log item*/
      if (SQLCA.VAGen_SQLCODE == 0
       || SQLCA.VAGen_SQLCODE == +100)
         /* ** next sentence ***/
      else
        SLWREC.SLWERRSW = "Y";
        set SL0CM210.SL2PALET bold;
        set SL0CM210.SL2CASE bold;
        /* SET SL0CM210.SL0CMPID BRIGHT;*/
        /* SET SL0CM210.PC4ORTYP BRIGHT;*/
        set SL0CM210.PC3PONBR bold;
        set SL0CM210.PC-SAP-PO-NBR bold;
        set SL0CM210.XGPCD bold;
        set SL0CM210.SY1STNBR cursor, bold;
        set SL0CM210.SY2CLRID bold;
        set SL0CM210.SY1UNPCS bold;
        set SL0CM210.XDMCD bold;
        set SL0CM210.XQACD bold;
        set SL0CM210.XSDCD bold;
        set SL0CM210.XSLCD bold;
        set SL0CM210.XPGCD bold;
        set SL0CM210.XUMCD bold;
        set SL0CM210.XOWCD bold;
        if (SQLCA.VAGen_SQLCODE == -911)
          SLWREC.XXXLOCID = "SE2L";
          SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
          return;
        end
        if (SQLCA.VAGen_SQLCODE == -811)
          SLWREC.XXXLOCID = "SE2M";
          SLWREC.SLWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
          return;
        end
        SLWREC.XXXLOCID = "SE2N";
        SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
        return;
      end
    else
      SL0CM210.SY4IDDSC[SLWIDX03] = " ";
      set SL0CM210.SY4IDDSC[SLWIDX03] initialAttributes;
      SL0CM210.SL2RCVD[SLWIDX03] = 0;
      SL0CM210.SL0CMADJ[SLWIDX03] = 0;
      SL0CW02.SY5SZID[SLWIDX03] = 0;
      SL0CW02.ZZZCHGCT[SLWIDX03] = 0;
    end
    set SL0CM210.SL2RCVD[SLWIDX03] skip;
    set SL0CM210.SL0CMADJ[SLWIDX03] initialAttributes;
    SLWREC.SLWIDX03 = SLWREC.SLWIDX03 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSE2

// key obtain table data
Function SL0CSE3()


   /* ************************************************************/
   /* *** make one time table accesses for auxillary and/or   ****/
   /* *** main data                                           ****/
   /* *** note: first time executions before beginning a loop ****/
   /* ***       might also be performed                       ****/
   /* ************************************************************/

  if (SL0CM310.XMSLMOPT == "C")
    return;
  end

  if (SL0CM310.XMSLMOPT == "P")
    VRLITM02.XWHCD = SL0CM310.XWHCD;
    VRLITM02.TS3CNTNR = SL0CM310.TS3CNTNR;
    VRLITM02.SL2PALET = SL0CM310.SL2PALET;
    VRLITM02.SL2CASE = "*";
    TA1REC.TA1LOCAT[2] = "SL0CSE3 ";
     /* ** TA1REC.TAMAP setup during initialization ***/
    XSSLS-S4-VRLITM02(); /* <=== select set rcvg log items*/
    if (SQLCA.VAGen_SQLCODE == 0)
       /* ** next sentence ***/
    else
      set SL0CM310.TS3CNTNR bold;
      set SL0CM310.SL2PALET cursor, bold;
      SLWREC.SLWERRSW = "Y";
      if (SQLCA.VAGen_SQLCODE == +100)
        SLWREC.XXXLOCID = "SE3A";
        SLWREC.SLWMSGNO = 0012; /* <--- not on db msg*/
        return;
      end
      if (SQLCA.VAGen_SQLCODE == -911)
        SLWREC.XXXLOCID = "SE3B";
        SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
        return;
      end
      SLWREC.XXXLOCID = "SE3C";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
    return;
  end

  VRLITM02.XWHCD = SL0CM310.XWHCD;
  VRLITM02.TS3CNTNR = SL0CM310.TS3CNTNR;
  VRLITM02.SL2PALET = SL0CM310.SL2PALET;
  VRLITM02.SL2CASE = SL0CM310.SL2CASE;

  TA1REC.TA1LOCAT[2] = "SL0CSE3 ";
   /* ** TA1REC.TAMAP setup during initialization ***/

  XSSLS-S4-VRLITM02(); /* <=== select set rcvg log items*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    set SL0CM310.TS3CNTNR bold;
    set SL0CM310.SL2PALET bold;
    set SL0CM310.SL2CASE cursor, bold;
    SLWREC.SLWERRSW = "Y";
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.XXXLOCID = "SE3D";
      SLWREC.SLWMSGNO = 0012; /* <--- not on db msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.XXXLOCID = "SE3E";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.XXXLOCID = "SE3F";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSE3

// key obtain table data
Function SL0CSE4()


   /* ************************************************************/
   /* *** make one time table accesses for auxillary and/or   ****/
   /* *** main data                                           ****/
   /* *** note: first time executions before beginning a loop ****/
   /* ***       might also be performed                       ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSE4

// key obtain table data
Function SL0CSE5()


   /* ************************************************************/
   /* *** make one time table accesses for auxillary and/or   ****/
   /* *** main data                                           ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSE5

// save key values
Function SL0CSF1()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  COMMAREA.XWHCD = SL0CM110.XWHCD;
  COMMAREA.XGPCD = SL0CM110.XGPCD;

  SL0CW01.XWHCD = SL0CM110.XWHCD;

  if (SL0CM110.TS3CNTNR != SL0CW01.TS3CNTNR)
    SL0CW01.TS3CNTNR = SL0CM110.TS3CNTNR;
    SL0CS11(); /* <=== causera output processing*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSF1

// save current key value(s)
Function SL0CSF2()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  COMMAREA.XWHCD = SL0CM210.XWHCD;
  COMMAREA.XGPCD = SL0CM210.XGPCD;

  SL0CW02.XMSLMOPT = SL0CM210.XMSLMOPT;
  SL0CW02.XWHCD = SL0CM210.XWHCD;

  if (SL0CM210.TS3CNTNR != SL0CW02.TS3CNTNR)
    SL0CW02.TS3CNTNR = SL0CM210.TS3CNTNR;
    SL0CS12(); /* <=== causera output processing*/
  end

   /* ************************************************************/
   /* *** always save in order to overlay any previous values ****/
   /* ************************************************************/

   /* MOVE SL0CM210.IN7STNBR TO SL0CW02.IN7STNBR;*/
  SL0CW02.SL2PALET = SL0CM210.SL2PALET;
  SL0CW02.SL2CASE = SL0CM210.SL2CASE;
   /* MOVE SL0CM210.SL0CMPID TO SL0CW02.SL0CWPID;*/
   /* MOVE SL0CM210.PC4ORTYP TO SL0CW02.PC4ORTYP;*/
  SL0CW02.PC3PONBR = SL0CM210.PC3PONBR;
  SL0CW02.PC-SAP-PO-NBR = SL0CM210.PC-SAP-PO-NBR;
  SL0CW02.XGPCD = SL0CM210.XGPCD;
  SL0CW02.SY1STNBR = SL0CM210.SY1STNBR;
  SL0CW02.SY1UNPCS = SL0CM210.SY1UNPCS;
  SL0CW02.SY2CLRID = SL0CM210.SY2CLRID;
  SL0CW02.XDMCD = SL0CM210.XDMCD;
  SL0CW02.XQACD = SL0CM210.XQACD;
  SL0CW02.XSDCD = SL0CM210.XSDCD;
  SL0CW02.XSLCD = SL0CM210.XSLCD;
  SL0CW02.XPGCD = SL0CM210.XPGCD;
  SL0CW02.XUMCD = SL0CM210.XUMCD;
  SL0CW02.XOWCD = SL0CM210.XOWCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSF2

// save current key value(s)
Function SL0CSF3()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  COMMAREA.XWHCD = SL0CM310.XWHCD;

  SL0CW03.XWHCD = SL0CM310.XWHCD;
  SL0CW03.XMSLMOPT = SL0CM310.XMSLMOPT;
  SL0CW03.SL2PALET = SL0CM310.SL2PALET;
  SL0CW03.SL2CASE = SL0CM310.SL2CASE;

  if (SL0CM310.TS3CNTNR != SL0CW03.TS3CNTNR)
    SL0CW03.TS3CNTNR = SL0CM310.TS3CNTNR;
    SL0CS13(); /* <=== causera output processing*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSF3

// save current key value(s)
Function SL0CSF4()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  COMMAREA.XWHCD = SL0CM410.XWHCD;
  COMMAREA.XGPCD = SL0CM410.XGPCD;

  SL0CW04.XWHCD = SL0CM410.XWHCD;
   /* MOVE SL0CM410.IN7STNBR TO SL0CW04.IN7STNBR;*/
   /* MOVE SL0CM410.SL0CMPID TO SL0CW04.SL0CWPID;*/
   /* MOVE SL0CM410.PC4ORTYP TO SL0CW04.PC4ORTYP;*/
  SL0CW04.PC3PONBR = SL0CM410.PC3PONBR;
  SL0CW04.PC-SAP-PO-NBR = SL0CM410.PC-SAP-PO-NBR;
  SL0CW04.XGPCD = SL0CM410.XGPCD;
  SL0CW04.SY1STNBR = SL0CM410.SY1STNBR;
  SL0CW04.SY2CLRID = SL0CM410.SY2CLRID;
  SL0CW04.XDMCD = SL0CM410.XDMCD;
  SL0CW04.XQACD = SL0CM410.XQACD;

  if (SL0CM410.TS3CNTNR != SL0CW04.TS3CNTNR)
    SL0CW04.TS3CNTNR = SL0CM410.TS3CNTNR;
    SL0CS14(); /* <=== causera output processing*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSF4

// save current key value(s)
Function SL0CSF5()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  COMMAREA.XWHCD = SL0CM510.XWHCD;

  SL0CW05.XWHCD = SL0CM510.XWHCD;

  if (SL0CM510.TS3CNTNR != SL0CW05.TS3CNTNR)
    SL0CW05.TS3CNTNR = SL0CM510.TS3CNTNR;
    SL0CS15(); /* <=== causera output processing*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSF5

// setup map key fields
Function SL0CSG2()


   /* ************************************************************/
   /* *** use current ws values in the corresponding map flds ****/
   /* ************************************************************/

  SL0CM210.XMSLMOPT = SL0CW02.XMSLMOPT;
  SL0CM210.XWHCD = SL0CW02.XWHCD;
  SL0CM210.TS3CNTNR = SL0CW02.TS3CNTNR;
   /* MOVE SL0CW02.IN7STNBR TO SL0CM210.IN7STNBR;*/
  SL0CM210.SL2PALET = SL0CW02.SL2PALET;
  SL0CM210.SL2CASE = SL0CW02.SL2CASE;
   /* MOVE SL0CW02.SL0CWPID TO SL0CM210.SL0CMPID;*/
   /* MOVE SL0CW02.PC4ORTYP TO SL0CM210.PC4ORTYP;*/
  SL0CM210.PC3PONBR = SL0CW02.PC3PONBR;
  SL0CM210.PC-SAP-PO-NBR = SL0CW02.PC-SAP-PO-NBR;
  SL0CM210.XGPCD = SL0CW02.XGPCD;
  SL0CM210.SY1STNBR = SL0CW02.SY1STNBR;
  SL0CM210.SY1UNPCS = SL0CW02.SY1UNPCS;
  SL0CM210.SY2CLRID = SL0CW02.SY2CLRID;
  SL0CM210.XDMCD = SL0CW02.XDMCD;
  SL0CM210.XQACD = SL0CW02.XQACD;
  SL0CM210.XSDCD = SL0CW02.XSDCD;
  SL0CM210.XSLCD = SL0CW02.XSLCD;
  SL0CM210.XPGCD = SL0CW02.XPGCD;
  SL0CM210.XUMCD = SL0CW02.XUMCD;
  SL0CM210.XOWCD = SL0CW02.XOWCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSG2

// setup map key fields
Function SL0CSG3()


   /* ************************************************************/
   /* *** use current ws values in the corresponding map flds ****/
   /* ************************************************************/

  SL0CM310.XWHCD = SL0CW03.XWHCD;
  SL0CM310.XMSLMOPT = SL0CW03.XMSLMOPT;
  SL0CM310.TS3CNTNR = SL0CW03.TS3CNTNR;
  SL0CM310.SL2PALET = SL0CW03.SL2PALET;
  SL0CM310.SL2CASE = SL0CW03.SL2CASE;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSG3

// setup map key fields
Function SL0CSG4()


   /* ************************************************************/
   /* *** use current ws values in the corresponding map flds ****/
   /* ************************************************************/

  SL0CM410.XWHCD = SL0CW04.XWHCD;
  SL0CM410.TS3CNTNR = SL0CW04.TS3CNTNR;
   /* MOVE SL0CW04.IN7STNBR TO SL0CM410.IN7STNBR;*/
   /* MOVE SL0CW04.SL0CWPID TO SL0CM410.SL0CMPID;*/
   /* MOVE SL0CW04.PC4ORTYP TO SL0CM410.PC4ORTYP;*/
  SL0CM410.PC3PONBR = SL0CW04.PC3PONBR;
  SL0CM410.PC-SAP-PO-NBR = SL0CW04.PC-SAP-PO-NBR;
  SL0CM410.XGPCD = SL0CW04.XGPCD;
  SL0CM410.SY1STNBR = SL0CW04.SY1STNBR;
  SL0CM410.SY2CLRID = SL0CW04.SY2CLRID;
  SL0CM410.XDMCD = SL0CW04.XDMCD;
  SL0CM410.XQACD = SL0CW04.XQACD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSG4

// setup map key fields
Function SL0CSG5()


   /* ************************************************************/
   /* *** use current ws values in the corresponding map flds ****/
   /* ************************************************************/

  SL0CM510.XWHCD = SL0CW05.XWHCD;
  SL0CM510.TS3CNTNR = SL0CW05.TS3CNTNR;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSG5

// ENTER processing
Function SL0CSH0()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0CSA0(); /* <=== missing input edits*/

   /* ************************************************************/
   /* *** no missing fields:                                  ****/
   /* *** invalid selection detected in flow when             ****/
   /* *** transfer of control is attempted                    ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSH0

// new hdr edits
Function SL0CSH1()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0CSA1(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no missing fields: edit individual fields           ****/
   /* ************************************************************/

  SL0CSC1(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0CSD1(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSH1

// ENTER processing
Function SL0CSH2()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0CSA2(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no missing fields: edit individual fields           ****/
   /* ************************************************************/

  SL0CSC2(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses & setup map ****/
   /* ************************************************************/

  SL0CSE2(); /* <=== obtain table data*/

  if (SLWREC.SLWERRSW == "Y")
    SL0CSF2(); /* <=== save current key value(s)*/
    SL0CST2(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s)                        ****/
   /* ************************************************************/

  SL0CSF2(); /* <=== save current key value(s)*/

   /* ************************************************************/
   /* *** no errors, so no fields will have to be reset       ****/
   /* *** setup attributes depending on the option value      ****/
   /* ************************************************************/

  if (SL0CM210.XMSLMOPT == "C")
     /* ************************************************************/
     /* *** if option = c, open only the container data flds and****/
     /* ***                protect & darken all product key flds****/
     /* *** note: product key flds were edited to be blank      ****/
     /* *** note: product data flds are already askip,dark      ****/
     /* ************************************************************/
   /* SET SL0CM210.IN7STNBR DEFINED;*/
    set SL0CM210.XITCD initialAttributes;
    set SL0CM210.XARCD initialAttributes;
    set SL0CM210.SL4ZONE initialAttributes;
    set SL0CM210.SL1RCVR initialAttributes;
    set SL0CM210.SL1COMNT initialAttributes;
    set SL0CM210.YMTCD initialAttributes;
    set SL0CM210.SL2PALET skip, invisible;
    set SL0CM210.SL2CASE skip, invisible;
   /* SET SL0CM210.SL0CMPID AUTOSKIP,DARK;*/
   /* SET SL0CM210.PC4ORTYP AUTOSKIP,DARK;*/
    set SL0CM210.PC3PONBR skip, invisible;
    set SL0CM210.PC-SAP-PO-NBR skip, invisible;
    set SL0CM210.XGPCD skip, invisible;
    set SL0CM210.SY1STNBR skip, invisible;
    set SL0CM210.SY2CLRID skip, invisible;
    set SL0CM210.XDMCD skip, invisible;
    set SL0CM210.XQACD skip, invisible;
    set SL0CM210.XSDCD skip, invisible;
    set SL0CM210.XSLCD skip, invisible;
    set SL0CM210.XPGCD skip, invisible;
    set SL0CM210.XUMCD skip, invisible;
    set SL0CM210.XOWCD skip, invisible;
  else
     /* ************************************************************/
     /* *** opt = p, setup product data fields depending on ws  ****/
     /* ***          size id value greater than 0               ****/
     /* *** note: hdr data flds were protected & dark           ****/
     /* ************************************************************/
    set SL0CM210.SL5LOCTN initialAttributes;
    set SL0CM210.INASAID initialAttributes;
    set SL0CM210.SL0CMTOT initialAttributes;
    SLWREC.SLWIDX01 = 1;
    while (SLWREC.SLWIDX01 <= 30)
      if (SL0CW02.SY5SZID[SLWIDX01] > 0)
        set SL0CM210.SY4IDDSC[SLWIDX01] skip;
      else
        set SL0CM210.SY4IDDSC[SLWIDX01] initialAttributes;
      end
      set SL0CM210.SL2RCVD[SLWIDX01] skip;
      set SL0CM210.SL0CMADJ[SLWIDX01] initialAttributes;
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
    end
   /* SET SL0CM210.IN7STNBR DEFINED;*/
    set SL0CM210.XITCD initialAttributes;
    set SL0CM210.XARCD initialAttributes;
    set SL0CM210.SL4ZONE initialAttributes;
    set SL0CM210.SL1COMNT initialAttributes;
    set SL0CM210.SL1RCVR initialAttributes;
   /* SET SL0CM210.IN7STNBR AUTOSKIP;*/
    set SL0CM210.XITCD skip;
    set SL0CM210.XARCD skip;
    set SL0CM210.SL4ZONE skip;
    set SL0CM210.SL1RCVR skip;
    set SL0CM210.SL1COMNT skip;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSH2

// ENTER processing
Function SL0CSH3()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0CSA3(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no missing fields: edit individual fields           ****/
   /* ************************************************************/

  SL0CSC3(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0CSD3(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses & setup map ****/
   /* ************************************************************/

  SL0CSE3(); /* <=== obtain table data*/

  if (SLWREC.SLWERRSW == "Y")
    SL0CSF3(); /* <=== save current key value(s)*/
    SL0CST3(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s)                        ****/
   /* ************************************************************/

  SL0CSF3(); /* <=== save current key value(s)*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSH3

// ENTER processing
Function SL0CSH4()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0CSA4(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no missing fields: edit individual fields           ****/
   /* ************************************************************/

  SL0CSC4(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses & setup map ****/
   /* ************************************************************/

  SL0CSE4(); /* <=== obtain table data*/

  if (SLWREC.SLWERRSW == "Y")
    SL0CSF4(); /* <=== save current key value(s)*/
    SL0CST4(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s)                        ****/
   /* ************************************************************/

  SL0CSF4(); /* <=== save current key value(s)*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSH4

// ENTER processing
Function SL0CSH5()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0CSA5(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    SL0CW05.SL0CWUPS = "N";
    return;
  end

   /* ************************************************************/
   /* *** no missing fields: edit individual fields           ****/
   /* ************************************************************/

  SL0CSC5(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    SL0CW05.SL0CWUPS = "N";
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0CSD5(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    SL0CW05.SL0CWUPS = "N";
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses & setup map ****/
   /* ************************************************************/

  SL0CSE5(); /* <=== obtain table data*/

  if (SLWREC.SLWERRSW == "Y")
    SL0CW05.SL0CWUPS = "N";
    SL0CSF5(); /* <=== save current key value(s)*/
    SL0CST5(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value and update                ****/
   /* ************************************************************/

  SL0CSF5(); /* <=== save current key value(s)*/

  if (SL0CW05.SL0CWUPS == "Y") /* <=== CHECK IF UPDATE SWITCH ON*/
    if (SL0CM510.SL0CMUSW == "Y")
      /* start add 4/11/00  warehouse 42 will use new table  ****/
      /* IF SL0CM510.XWHCD EQ '42';    /* <=== Canada Warehouse*/
      SL0CSU6(); /* <=== submit batch update (SAP)*/
      /* ELSE;*/
       /* SL0CSU5;                    /* <=== submit batch update*/
      /* END;*/
      /* end add 4/11/00  warehouse 42 will use new table        ****/
      SLWREC.SLWMSGNO = 0187;
      SL0CW05.SL0CWUPS = "N"; /* < === move no to ws update switch*/
      return;
    else
      SL0CW05.SL0CWUPS = "N"; /* <=== move no to ws update switch*/
      return;
    end
  end
  SL0CW05.SL0CWUPS = "Y"; /* move 'y' to ws update switch*/
  SL0CM510.SL0CMUSW = "Y"; /* move 'y' to screen update switch*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSH5

// missing data inputs
Function SL0CSN1()


   /* ************************************************************/
   /* *** setup error for each missing data field             ****/
   /* *** note: setup defaults for optional fields, if any    ****/
   /* *** note: check in reverse order as in edits            ****/
   /* *** note: set the first time sw n each time there is    ****/
   /* ***       anything on a line to be checked after this   ****/
   /* ***       loop to detect no lines of data error         ****/
   /* *** note: set the special exit sw to y or n each time   ****/
   /* ***       re: if y, to skip processing this line        ****/
   /* *** note: rel. edits done here re: complexity & timing  ****/
   /* ***       re: what errors show up & when                ****/
   /* ************************************************************/

   /* lpattn changes starts*/
   /* IF SL0CM110.SL2PALET(SLWIDX01) GT ' '*/
  if (SL0CM110.SL2PALET[SLWIDX01] > 0
   || SL0CM110.SL2CASE[SLWIDX01] > " "
   || SL0CM110.SL0CMSZ1[SLWIDX01] > " "
   || SL0CM110.SL0CMQY1[SLWIDX01] > 0
   || SL0CM110.SL0CMSZ2[SLWIDX01] > " "
   || SL0CM110.SL0CMQY2[SLWIDX01] > 0
   || SL0CM110.SL0CMSZ3[SLWIDX01] > " "
   || SL0CM110.SL0CMQY3[SLWIDX01] > 0
   || SL0CM110.SL0CMSZ4[SLWIDX01] > " "
   || SL0CM110.SL0CMQY4[SLWIDX01] > 0)
    SLWREC.SLWSEXSW = "N";
    SLWREC.SLWFTMSW = "N";
  else
    SLWREC.SLWSEXSW = "Y";
    return;
  end

   /* ************************************************************/
   /* *** atleast one field has been entered on the line,     ****/
   /* *** if size description entered, quantity must be there ****/
   /* *** and vice versa                                      ****/
   /* *** set ws 'x' switch to 'N' if any size data entered   ****/
   /* *** in order to detect 'no size data error'             ****/
   /* *** note: the ws switch is used to determine that none  ****/
   /* ***       of the 4 size data pairs were entered later   ****/
   /* ************************************************************/

  SL0CW01.SL0CWXSW = "Y";

  if (SL0CM110.SL0CMSZ4[SLWIDX01] > " ")
    if (SL0CM110.SL0CMQY4[SLWIDX01] > 0)
      SL0CW01.SL0CWXSW = "N";
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SN1A";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0CM110.SL0CMQY4[SLWIDX01] cursor, bold;
    end
  else
    if (SL0CM110.SL0CMQY4[SLWIDX01] > 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SN1B";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0CM110.SL0CMSZ4[SLWIDX01] cursor, bold;
    end
  end

  if (SL0CM110.SL0CMSZ3[SLWIDX01] > " ")
    if (SL0CM110.SL0CMQY3[SLWIDX01] > 0)
      SL0CW01.SL0CWXSW = "N";
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SN1C";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0CM110.SL0CMQY3[SLWIDX01] cursor, bold;
    end
  else
    if (SL0CM110.SL0CMQY3[SLWIDX01] > 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SN1D";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0CM110.SL0CMSZ3[SLWIDX01] cursor, bold;
    end
  end

  if (SL0CM110.SL0CMSZ2[SLWIDX01] > " ")
    if (SL0CM110.SL0CMQY2[SLWIDX01] > 0)
      SL0CW01.SL0CWXSW = "N";
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SN1E";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0CM110.SL0CMQY2[SLWIDX01] cursor, bold;
    end
  else
    if (SL0CM110.SL0CMQY2[SLWIDX01] > 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SN1F";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0CM110.SL0CMSZ2[SLWIDX01] cursor, bold;
    end
  end

  if (SL0CM110.SL0CMSZ1[SLWIDX01] > " ")
    if (SL0CM110.SL0CMQY1[SLWIDX01] > 0)
      SL0CW01.SL0CWXSW = "N";
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SN1G";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0CM110.SL0CMQY1[SLWIDX01] cursor, bold;
    end
  else
    if (SL0CM110.SL0CMQY1[SLWIDX01] > 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SN1H";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0CM110.SL0CMSZ1[SLWIDX01] cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** if the ws pallet is NOT setup, then this is the 1st ****/
   /* *** time data has been detected & it must be entered    ****/
   /* ************************************************************/

  if (SL0CW01.SL2PALET > " ")
     /* ** next sentence ***/
  else
    /* lpattn changes starts*/
    /* IF SL0CM110.SL2PALET(SLWIDX01) GT ' ';*/
    if (SL0CM110.SL2PALET[SLWIDX01] > 0)
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SN1I";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0CM110.SL2PALET[SLWIDX01] cursor, bold;
      if (SL0CW01.SL0CWXSW == "Y")
        set SL0CM110.SL0CMSZ1[SLWIDX01] bold;
        set SL0CM110.SL0CMQY1[SLWIDX01] bold;
      end
    end
  end

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** if the 'x' switch = y, then no pairs have been      ****/
   /* *** entered at this point  and the pallet and/or case   ****/
   /* *** must have been entered on the map  or these         ****/
   /* *** edits would have been skipped for this line;        ****/
   /* *** also, the ws pallet has been setup;  therefore,     ****/
   /* *** setup (only) the first data flds as missing & exit  ****/
   /* ************************************************************/

  if (SL0CW01.SL0CWXSW == "Y")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SN1J";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0CM110.SL0CMSZ1[SLWIDX01] cursor, bold;
    set SL0CM110.SL0CMQY1[SLWIDX01] bold;
    return;
  end

   /* ************************************************************/
   /* *** setup ws flds with palet and/or case to be used     ****/
   /* *** during update so that if either are left out,       ****/
   /* *** the previous value will be used                     ****/
   /* *** note: if only palet entered, a blank case will not  ****/
   /* ***       use the previous value but will be blank      ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if pallet entered, save both in ws fld & exit       ****/
   /* *** note: move case even if blank to overlay prior case ****/
   /* ************************************************************/

   /* lpattn chnages starts*/
  SL0CW01.SLCIDX08 = 1;
  SL0CW01.SL0CWPAL = SL0CM110.SL2PALET[SLWIDX01];
  while (SL0CW01.SLCIDX08 < 6)
    if (SL0CW01.SL0CWPAI[SLCIDX08] == 0)
      SL0CW01.SL0CWPAI[SLCIDX08] = " ";
    else
      SL0CW01.SLCIDX08 = 6;
    end
    SL0CW01.SLCIDX08 = SL0CW01.SLCIDX08 + 1;
  end
   /* IF SL0CM110.SL2PALET(SLWIDX01) GT ' ';*/
  if (SL0CM110.SL2PALET[SLWIDX01] > 0)
    SL0CW01.SL2PALET = SL0CM110.SL2PALET[SLWIDX01];
    SL0CW01.SL2PALET = SL0CW01.SL0CWPAL;
    SL0CW01.SL2CASE = SL0CM110.SL2CASE[SLWIDX01];
    return;
  end

   /* ************************************************************/
   /* *** if only case entered, save in ws fld                ****/
   /* ************************************************************/

  if (SL0CM110.SL2CASE[SLWIDX01] > " ")
    SL0CW01.SL2CASE = SL0CM110.SL2CASE[SLWIDX01];
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSN1

// key data missing input edits
Function SL0CSN2()


   /* ************************************************************/
   /* *** setup error for each missing data field             ****/
   /* *** note: setup defaults for optional fields, if any    ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0CM210.SL4ZONE > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SN2A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0CM210.SL4ZONE cursor, bold;
  end

  if (SL0CM210.XARCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SN2B";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0CM210.XARCD cursor, bold;
  end

  if (SL0CM210.XITCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SN2C";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0CM210.XITCD cursor, bold;
  end

  if (SL0CM210.SL1RCVR > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SN2D";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0CM210.SL1RCVR cursor, bold;
  end

   /* ************************************************************/
   /* *** if option = product, check for these fields         ****/
   /* ************************************************************/

  if (SL0CM210.XMSLMOPT == "C")
    return;
  end

  if (SL0CM210.SY1UNPCS > 0)
     /* **next sentence ***/
  else
    if (SL0CM210.XWHCD == "51"
     || SL0CM210.XWHCD == "07"
     || SL0CM210.XWHCD == "04"
     || SL0CM210.XWHCD == "02"
     || SL0CM210.XWHCD == "25"
     || SL0CM210.XWHCD == "42") /* Canada*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SN2E";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0CM210.SY1UNPCS cursor, bold;
    end
  end

  if (SL0CM210.SL5LOCTN > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SN2E";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0CM210.SL5LOCTN cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSN2

// data missing input edits
Function SL0CSN4()


   /* ************************************************************/
   /* *** setup error for each missing data field             ****/
   /* *** note: must use indexed(slwidx01) field names        ****/
   /* *** note: setup defaults for optional fields, if any    ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

   /* ************************************************************/
   /* ***  if no fields entered,                              ****/
   /* ***  set special exit sw to skip this line              ****/
   /* ***  note: except that the 1st line must be used        ****/
   /* ************************************************************/

  if (SL0CM410.SL0CMECN[SLWIDX01] > " "
   || SL0CM410.SL0CMBCN[SLWIDX01] > " "
   || SL0CM410.SL0CMEPL[SLWIDX01] > " "
   || SL0CM410.SL0CMBPL[SLWIDX01] > " "
   || SL0CM410.SL0CMNOW[SLWIDX01] > " "
   || SL0CM410.SL0CMNUM[SLWIDX01] > " "
   || SL0CM410.SL0CMNPG[SLWIDX01] > " "
   || SL0CM410.SL0CMNSL[SLWIDX01] > " "
   || SL0CM410.SL0CMNSD[SLWIDX01] > " "
   || SL0CM410.SL0CMCOW[SLWIDX01] > " "
   || SL0CM410.SL0CMCUM[SLWIDX01] > " "
   || SL0CM410.SL0CMCPG[SLWIDX01] > " "
   || SL0CM410.SL0CMCSL[SLWIDX01] > " "
   || SL0CM410.SL0CMCSD[SLWIDX01] > " ")
    SLWREC.SLWSEXSW = "N";
     /* ** next sentnece ***/
  else
    SLWREC.SLWSEXSW = "Y";
    return;
  end

   /* ************************************************************/
   /* *** if either case no. entered, both must be entered    ****/
   /* ************************************************************/

  if (SL0CM410.SL0CMBCN[SLWIDX01] > " "
   || SL0CM410.SL0CMECN[SLWIDX01] > " ")
    if (SL0CM410.SL0CMECN[SLWIDX01] > " ")
       /* ** next sentnece ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SN4A";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0CM410.SL0CMECN[SLWIDX01] cursor, bold;
    end
    if (SL0CM410.SL0CMBCN[SLWIDX01] > " ")
       /* ** next sentnece ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SN4B";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0CM410.SL0CMBCN[SLWIDX01] cursor, bold;
    end
  end

   /* ************************************************************/
   /* ***  1 of the new flds & both pallets must be entered,  ****/
   /* ***  re: something was entered on this line             ****/
   /* ************************************************************/

  if (SL0CM410.SL0CMEPL[SLWIDX01] > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SN4C";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0CM410.SL0CMEPL cursor, bold;
  end

  if (SL0CM410.SL0CMBPL[SLWIDX01] > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SN4D";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0CM410.SL0CMBPL cursor, bold;
  end

  if (SL0CM410.SL0CMNOW[SLWIDX01] > " "
   || SL0CM410.SL0CMNUM[SLWIDX01] > " "
   || SL0CM410.SL0CMNPG[SLWIDX01] > " "
   || SL0CM410.SL0CMNSL[SLWIDX01] > " "
   || SL0CM410.SL0CMNSD[SLWIDX01] > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SN4E";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0CM410.SL0CMNSD cursor, bold;
    set SL0CM410.SL0CMNSL bold;
    set SL0CM410.SL0CMNPG bold;
    set SL0CM410.SL0CMNUM bold;
    set SL0CM410.SL0CMNOW bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSN4

// data field edits
Function SL0CSO1()


   /* ************************************************************/
   /* *** edit each data field, even if error detected        ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if size desc. entered, validate and save ID# in ws  ****/
   /* *** note: reverse order for cursor positioning          ****/
   /* ************************************************************/

  SL0CW01.SL0CWCP1 = "N";
  SL0CW01.SL0CWCP2 = "N";
  SL0CW01.SL0CWCP3 = "N";
  SL0CW01.SL0CWCP4 = "N";

  if (SL0CM110.SL2PALET[SLWIDX01] != SL0CW01.SL0CWPPT
   || SL0CM110.SL2CASE[SLWIDX01] != SL0CW01.SL0CWPCS
   || SL0CM110.SL0CMSZ4[SLWIDX01] != SL0CW01.SL0CWPS4
   || SL0CM110.SL0CMSZ3[SLWIDX01] != SL0CW01.SL0CWPS3
   || SL0CM110.SL0CMSZ2[SLWIDX01] != SL0CW01.SL0CWPS2
   || SL0CM110.SL0CMSZ1[SLWIDX01] != SL0CW01.SL0CWPS1)
    SL0CW01.SL0CWFSW = "Y";
  end
  SL0CW01.SL0CWPPT = SL0CM110.SL2PALET[SLWIDX01];
  SL0CW01.SL0CWPCS = SL0CM110.SL2CASE[SLWIDX01];
  SL0CW01.SL0CWPS4 = SL0CM110.SL0CMSZ4[SLWIDX01];
  SL0CW01.SL0CWPS3 = SL0CM110.SL0CMSZ3[SLWIDX01];
  SL0CW01.SL0CWPS2 = SL0CM110.SL0CMSZ2[SLWIDX01];
  SL0CW01.SL0CWPS1 = SL0CM110.SL0CMSZ1[SLWIDX01];

  SL0CW01.SL0CWSVE = "N";

  if (SL0CW01.SL0CWFSW == "Y")
    SL0CW01.SL0CWECT = 0;
  end

  if (SL0CM110.SL0CMSZ4[SLWIDX01] > " ")
    SL0CW01.SY4IDDSC = SL0CM110.SL0CMSZ4[SLWIDX01];
    SL0CW01.SL2RCVD = SL0CM110.SL0CMQY4[SLWIDX01];
    SL0CS1X(); /* <=== match sz desc to sz id*/
    if (SL0CW01.SL0CWERS == "Y")
      set SL0CM110.SL0CMSZ4[SLWIDX01] cursor, bold;
      SL0CW01.SL0CWRS4 = SL0CW01.SL0CWARS;
      if (SL0CW01.SL0CWRS4 == "N")
        SL0CW01.SL0CWCP4 = "Y";
      end
    else
      if (SL0CW01.SL0CWERW == "Y")
        SL0CW01.SL0CWID4 = SL0CW01.SL0CWSIX;
      else
        SL0CW01.SL0CWID4 = SYPREC.SY5SZID[SLWIDX02];
      end
    end
  else
    SL0CW01.SL0CWID4 = 0;
  end

  if (SL0CM110.SL0CMSZ3[SLWIDX01] > " ")
    SL0CW01.SY4IDDSC = SL0CM110.SL0CMSZ3[SLWIDX01];
    SL0CW01.SL2RCVD = SL0CM110.SL0CMQY3[SLWIDX01];
    SL0CS1X(); /* <=== match sz desc to sz id*/
    if (SL0CW01.SL0CWERS == "Y")
      set SL0CM110.SL0CMSZ3[SLWIDX01] cursor, bold;
      SL0CW01.SL0CWRS3 = SL0CW01.SL0CWARS;
      if (SL0CW01.SL0CWRS3 == "N")
        SL0CW01.SL0CWCP3 = "Y";
      end
    else
      if (SL0CW01.SL0CWERW == "Y")
        SL0CW01.SL0CWID3 = SL0CW01.SL0CWSIX;
      else
        SL0CW01.SL0CWID3 = SYPREC.SY5SZID[SLWIDX02];
      end
    end
  else
    SL0CW01.SL0CWID3 = 0;
  end

  if (SL0CM110.SL0CMSZ2[SLWIDX01] > " ")
    SL0CW01.SY4IDDSC = SL0CM110.SL0CMSZ2[SLWIDX01];
    SL0CW01.SL2RCVD = SL0CM110.SL0CMQY2[SLWIDX01];
    SL0CS1X(); /* <=== match sz desc to sz id*/
    if (SL0CW01.SL0CWERS == "Y")
      set SL0CM110.SL0CMSZ2[SLWIDX01] cursor, bold;
      SL0CW01.SL0CWRS2 = SL0CW01.SL0CWARS;
      if (SL0CW01.SL0CWRS2 == "N")
        SL0CW01.SL0CWCP2 = "Y";
      end
    else
      if (SL0CW01.SL0CWERW == "Y")
        SL0CW01.SL0CWID2 = SL0CW01.SL0CWSIX;
      else
        SL0CW01.SL0CWID2 = SYPREC.SY5SZID[SLWIDX02];
      end
    end
  else
    SL0CW01.SL0CWID2 = 0;
  end

  if (SL0CM110.SL0CMSZ1[SLWIDX01] > " ")
    SL0CW01.SY4IDDSC = SL0CM110.SL0CMSZ1[SLWIDX01];
    SL0CW01.SL2RCVD = SL0CM110.SL0CMQY1[SLWIDX01];
    SL0CS1X(); /* <=== match sz desc to sz id*/
    if (SL0CW01.SL0CWERS == "Y")
      set SL0CM110.SL0CMSZ1[SLWIDX01] cursor, bold;
      SL0CW01.SL0CWRS1 = SL0CW01.SL0CWARS;
      if (SL0CW01.SL0CWRS1 == "N")
        SL0CW01.SL0CWCP1 = "Y";
      end
    else
      if (SL0CW01.SL0CWERW == "Y")
        SL0CW01.SL0CWID1 = SL0CW01.SL0CWSIX;
      else
        SL0CW01.SL0CWID1 = SYPREC.SY5SZID[SLWIDX02];
      end
    end
  else
    SL0CW01.SL0CWID1 = 0;
  end

  if (SLWREC.SLWERRSW == "Y")
    if (SL0CW01.SL0CWSVE == "N")
      SL0CW01.SL0CWFSW = "N";
    end
  else
    SL0CW01.SL0CWFSW = "Y";
  end

  if (SL0CW01.SL0CWSVE == "Y")
    if (SL0CW01.SL0CWRS4 == "Y")
      set SL0CM110.SL0CMSZ4[SLWIDX01] initialAttributes;
    end

    if (SL0CW01.SL0CWRS3 == "Y")
      set SL0CM110.SL0CMSZ3[SLWIDX01] initialAttributes;
    end

    if (SL0CW01.SL0CWRS2 == "Y")
      set SL0CM110.SL0CMSZ2[SLWIDX01] initialAttributes;
    end

    if (SL0CW01.SL0CWRS1 == "Y")
      set SL0CM110.SL0CMSZ1[SLWIDX01] initialAttributes;
    end

    if (SL0CW01.SL0CWCP4 == "Y")
      set SL0CM110.SL0CMSZ4[SLWIDX01] cursor;
    end

    if (SL0CW01.SL0CWCP3 == "Y")
      set SL0CM110.SL0CMSZ3[SLWIDX01] cursor;
    end

    if (SL0CW01.SL0CWCP2 == "Y")
      set SL0CM110.SL0CMSZ2[SLWIDX01] cursor;
    end
    if (SL0CW01.SL0CWCP1 == "Y")
      set SL0CM110.SL0CMSZ1[SLWIDX01] cursor;
    end

    SLWREC.XXXLOCID = "SO1A";
    SLWREC.SLWMSGNO = 0011;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSO1

// key data field edits
Function SL0CSO2()


   /* ************************************************************/
   /* *** edit the following prior to the normal ordered edits****/
   /* *** re: each of thses will exit if error since the error****/
   /* ***     might be a database error (or try again)        ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if entered, stock xfer number must already exist    ****/
   /* ************************************************************/

   /* IF SL0CM210.IN7STNBR GT 0;*/
   /* MOVE SL0CM210.IN7STNBR TO IN7REC.IN7STNBR;*/
   /* MOVE 'SL0CSO2 ' TO TA1REC.TA1LOCAT(2);*/
     /* ** TA1REC.TAMAP setup during initialization*/
   /* XSSLSVG;                       /* <=== validate stock xfer nbr*/
   /* F SLWREC.SLWVERSW EQ 'Y';*/
   /* MOVE 'Y' TO SLWREC.SLWERRSW;*/
   /* SET SL0CM210.IN7STNBR CURSOR,BRIGHT;*/
   /* EZERTN;                      /* <--- ** exception ***/
   /* ND;*/
   /* END;*/

   /* ************************************************************/
   /* *** if area code in tbl & active: continue              ****/
   /* *** note: make sure area is rcvg & zone exists          ****/
   /* ************************************************************/

  if (SL0CM210.XARCD in XARTBL.XARCD)
    if (XARTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* ************************************************************/
       /* *** valid area must be a receiving area                 ****/
       /* ************************************************************/
      if (XARTBL.XARRCVFL[sysVar.arrayIndex] == "Y")
         /* ************************************************************/
         /* *** since valid receiving area, zone record must exist  ****/
         /* ************************************************************/
        SL4REC.XWHCD = SL0CM210.XWHCD;
        SL4REC.XARCD = SL0CM210.XARCD;
        SL4REC.SL4ZONE = SL0CM210.SL4ZONE;
        TA1REC.TA1LOCAT[2] = "SL0CSO2 ";
         /* ** TA1REC.TAMAP setup during initialization ***/
        XSSLSV4(); /* <=== validate area/zone*/
        if (SLWREC.SLWVERSW == "Y")
          SLWREC.SLWERRSW = "Y";
          set SL0CM210.SL4ZONE cursor, bold;
          return; /* <--- ** exception ***/
        end
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SO2A";
        SLWREC.SLWMSGNO = 0050; /* <--- not rcvg msg*/
        set SL0CM210.XARCD cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SO2B";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0CM210.XARCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SO2C";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0CM210.XARCD cursor, bold;
  end

   /* ************************************************************/
   /* *** if receipt type in tbl & active: put abrv. on map   ****/
   /* ************************************************************/

  if (SL0CM210.XITCD in XITTBL.XITCD)
    if (XITTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XITTBL.XIGCD[sysVar.arrayIndex] == "10")
        if (SL0CM210.XWHCD == "07")
          if (SL0CM210.XITCD == "10")
            SL0CM210.XITABRV = XITTBL.XITABRV[sysVar.arrayIndex];
          else
            SL0CM210.XITABRV = " ";
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SO2D";
            SLWREC.SLWMSGNO = 0050; /* <--- not a receiving type*/
            set SL0CM210.XITCD cursor, bold;
          end
        else
          if (SL0CM210.XITCD == "13")
            SL0CM210.XITABRV = " ";
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SO2@";
            SLWREC.SLWMSGNO = 0050; /* <--- Xfer not applicable*/
          else
            SL0CM110.XITABRV = XITTBL.XITABRV[sysVar.arrayIndex];
          end
        end
      else
        SL0CM110.XITABRV = " ";
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SO2$";
        SLWREC.SLWMSGNO = 0050; /* <--- not a receiving type*/
        set SL0CM110.XITCD cursor, bold;
      end
    else
      SL0CM210.XITABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SO2E";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0CM210.XITCD cursor, bold;
    end
  else
    SL0CM210.XITABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SO2F";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0CM210.XITCD cursor, bold;
  end


   /* ************************************************************/
   /* *** if mode code is entered verify it exists in table   ****/
   /* *** else retrieve it from the transportation system.    ****/
   /* ************************************************************/

  if (SL0CM210.YMTCD > " ")
    set SL0CM210.YMTCD initialAttributes;
    if (SL0CM210.YMTCD in YMTTBL.YMTCD)
      if (YMTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SO2G";
        SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
        set SL0CM210.YMTCD cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SO2H";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0CM210.YMTCD cursor, bold;
    end
  else
    VRCVPH01.TS3CNTNR = SL0CM210.TS3CNTNR;
   /* MOVE 'RC' TO VRCVPH01.TSCPLSTCD;  /* No need any more*/
    SL0CS7F();
    if (SLWREC.SLWERRSW == "Y")
      set SL0CM210.YMTCD cursor, bold;
    else
      SL0CM210.YMTCD = TS5REC.YMTCD;
    end
  end

   /* ************************************************************/
   /* *** if option = product, do the following edits         ****/
   /* ************************************************************/

  if (SL0CM210.XMSLMOPT == "C")
    return;
  end

   /* ************************************************************/
   /* *** edit the following prior to the normal ordered edits****/
   /* *** re: each of thses will exit if error since the error****/
   /* ***     might be a database error (or try again)        ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if entered, setaside number must already exist      ****/
   /* ************************************************************/

  if (SL0CM210.INASAID > 0)
    INAREC.INASAID = SL0CM210.INASAID;
    TA1REC.TA1LOCAT[2] = "SL0CSO2 ";
     /* ** TA1REC.TAMAP setup during initialization*/
    XSSLSVF(); /* <=== validate seaside #*/
    if (SLWREC.SLWVERSW == "Y")
      SLWREC.SLWERRSW = "Y";
      set SL0CM210.INASAID cursor, bold;
      return; /* <=== ** execption ***/
    end
  end

   /* ************************************************************/
   /* *** location must exist                                 ****/
   /* ************************************************************/

  SL5REC.XWHCD = SL0CM210.XWHCD;
  SL5REC.XARCD = SL0CM210.XARCD;
  SL5REC.SL4ZONE = SL0CM210.SL4ZONE;
  SL5REC.SL5LOCTN = SL0CM210.SL5LOCTN;

  TA1REC.TA1LOCAT[2] = "SL0CSO2 ";
   /* ** TA1REC.TAMAP setup during initialization*/

  XSSLSV5(); /* <=== validate location*/

  if (SLWREC.SLWVERSW == "Y")
    SLWREC.SLWERRSW = "Y";
    set SL0CM210.XWHCD bold;
    set SL0CM210.XARCD bold;
    set SL0CM210.SL4ZONE bold;
    set SL0CM210.SL5LOCTN cursor, bold;
    return; /* <=== ** exception ***/
  end

   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/
   /* *** if receipt type in tbl & active: put abrv. on map   ****/
   /* ************************************************************/

  if (SL0CM210.XITCD in XITTBL.XITCD)
    if (XITTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      if (XITTBL.XIGCD[sysVar.arrayIndex] == "10")
        if (SL0CM210.XWHCD == "07")
          if (SL0CM210.XITCD == "10")
            SL0CM210.XITABRV = XITTBL.XITABRV[sysVar.arrayIndex];
          else
            SL0CM210.XITABRV = " ";
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SO2Z";
            SLWREC.SLWMSGNO = 0050; /* <--- not a receiving type*/
            set SL0CM210.XITCD cursor, bold;
          end
        else
          if (SL0CM210.XITCD == "13")
            SL0CM210.XITABRV = " ";
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SO2Y";
            SLWREC.SLWMSGNO = 0050; /* <--- Xfer not applicable*/
          else
            SL0CM110.XITABRV = XITTBL.XITABRV[sysVar.arrayIndex];
          end
        end
      else
        SL0CM210.XITABRV = " ";
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SO2X";
        SLWREC.SLWMSGNO = 0050; /* <--- not a receiving type*/
        set SL0CM210.XITCD cursor, bold;
      end
    else
      SL0CM210.XITABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SO2W";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0CM210.XITCD cursor, bold;
    end
  else
    SL0CM210.XITABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SO2*";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0CM210.XITCD cursor, bold;
  end
   /* ************************************************************/
   /* *** note: option edit is part of the AFTER section      ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSO2

// data field edits
Function SL0CSO4()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if new flds are the same as current,                ****/
   /* *** setup update not required error/msg                 ****/
   /* ************************************************************/

  if (SL0CM410.SL0CMNOW[SLWIDX01] == SL0CM410.SL0CMCOW[SLWIDX01]
   && SL0CM410.SL0CMNUM[SLWIDX01] == SL0CM410.SL0CMCUM[SLWIDX01]
   && SL0CM410.SL0CMNPG[SLWIDX01] == SL0CM410.SL0CMCPG[SLWIDX01]
   && SL0CM410.SL0CMNSL[SLWIDX01] == SL0CM410.SL0CMCSL[SLWIDX01]
   && SL0CM410.SL0CMNSD[SLWIDX01] == SL0CM410.SL0CMCSD[SLWIDX01])
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SO4A";
    SLWREC.SLWMSGNO = 0070; /* <--- update not required msg*/
    set SL0CM410.SL0CMCSD[SLWIDX01] cursor, bold;
    return;
  end

   /* ************************************************************/
   /* *** if current owner group entered, validate            ****/
   /* *** note: whse validation save whse owner grp flag      ****/
   /* ************************************************************/

  if (SL0CM410.SL0CMCOW[SLWIDX01] > " ")
    SLWREC.XWHCD = SL0CM410.XWHCD;
    SLWREC.SLWTBLCD = SL0CM410.SL0CMCOW[SLWIDX01];
    XSSLSVO(); /* <=== validate owner group*/
    if (SLWREC.SLWVERSW == "Y")
      SLWREC.SLWERRSW = "Y";
      set SL0CM410.SL0CMCOW[SLWIDX01] cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** if current unit of measure entered, validate        ****/
   /* ************************************************************/

  if (SL0CM410.SL0CMCUM[SLWIDX01] > " ")
    if (SL0CM410.SL0CMCUM[SLWIDX01] in XUMTBL.XUMCD)
      if (XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* ** next sentence ***/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SO4B";
        SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
        set SL0CM410.SL0CMCUM[SLWIDX01] cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SO4C";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0CM410.SL0CMCUM[SLWIDX01] cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** if current package code entered, validate           ****/
   /* ************************************************************/

  if (SL0CM410.SL0CMCPG[SLWIDX01] > " ")
    if (SL0CM410.SL0CMCPG[SLWIDX01] in XPGTBL.XPGCD)
      if (XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* ** next sentence ***/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SO4D";
        SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
        set SL0CM410.SL0CMCPG[SLWIDX01] cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SO4E";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0CM410.SL0CMCPG[SLWIDX01] cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** if current sl class code entered, validate          ****/
   /* ************************************************************/

  if (SL0CM410.SL0CMCSL[SLWIDX01] > " ")
    if (SL0CM410.SL0CMCSL[SLWIDX01] in XSLTBL.XSLCD)
      if (XSLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* ** next sentence ***/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SO4F";
        SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
        set SL0CM410.SL0CMCSL[SLWIDX01] cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SO4G";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0CM410.SL0CMCSL[SLWIDX01] cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** if current spec code entered, validate              ****/
   /* ************************************************************/

  if (SL0CM410.SL0CMCSD[SLWIDX01] > " ")

    set PC2REC empty; /* clear row in storage*/

    PC2REC.XGPCD = SL0CM410.XGPCD;
    PC2REC.PC2INSEG = SL0CM410.SL0CMCSD[SLWIDX01];
    call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == +0)
      if (PC2REC.XXXSTAT == "A")
         /* ** next sentence ***/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SO4H";
        SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
        set SL0CM410.SL0CMCSD[SLWIDX01] cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SO4I";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0CM410.SL0CMCSD[SLWIDX01] cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** if current fields have error, exit                  ****/
   /* *** re: new edits will assume current are correct       ****/
   /* ************************************************************/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** if current owner group = new, continue              ****/
   /* ************************************************************/

  if (SL0CM410.SL0CMCOW[SLWIDX01] == SL0CM410.SL0CMNOW[SLWIDX01])
     /* ** next sentence **/
  else
    SLWREC.XWHCD = SL0CM410.XWHCD;
    SLWREC.SLWTBLCD = SL0CM410.SL0CMNOW[SLWIDX01];
    XSSLSVO(); /* <=== validate owner group*/
    if (SLWREC.SLWVERSW == "Y")
      SLWREC.SLWERRSW = "Y";
      set SL0CM410.SL0CMNOW[SLWIDX01] cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** if current unit of measure = new, continue          ****/
   /* ************************************************************/

  if (SL0CM410.SL0CMCUM[SLWIDX01] == SL0CM410.SL0CMNUM[SLWIDX01])
     /* ** next sentence **/
  else
    if (SL0CM410.SL0CMNUM[SLWIDX01] in XUMTBL.XUMCD)
      if (XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* ** next sentence ***/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SO4J";
        SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
        set SL0CM410.SL0CMNUM[SLWIDX01] cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SO4K";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0CM410.SL0CMNUM[SLWIDX01] cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** if current package code = new, continue             ****/
   /* ************************************************************/

  if (SL0CM410.SL0CMCPG[SLWIDX01] == SL0CM410.SL0CMNPG[SLWIDX01])
     /* ** next sentence **/
  else
    if (SL0CM410.SL0CMNPG[SLWIDX01] in XPGTBL.XPGCD)
      if (XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* ** next sentence ***/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SO4L";
        SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
        set SL0CM410.SL0CMNPG[SLWIDX01] cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SO4M";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0CM410.SL0CMNPG[SLWIDX01] cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** if current sl class code = new, continue            ****/
   /* ************************************************************/

  if (SL0CM410.SL0CMCSL[SLWIDX01] == SL0CM410.SL0CMNSL[SLWIDX01])
     /* ** next sentence **/
  else
    if (SL0CM410.SL0CMNSL[SLWIDX01] in XSLTBL.XSLCD)
      if (XSLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* ** next sentence ***/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SO4N";
        SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
        set SL0CM410.SL0CMNSL[SLWIDX01] cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SO4O";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0CM410.SL0CMNSL[SLWIDX01] cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** if current spec code = new, continue                ****/
   /* ************************************************************/

  if (SL0CM410.SL0CMCSD[SLWIDX01] == SL0CM410.SL0CMNSD[SLWIDX01])
     /* ** next sentence **/
  else

    set PC2REC empty; /* clear row in storage*/

    PC2REC.XGPCD = SL0CM410.XGPCD;
    PC2REC.PC2INSEG = SL0CM410.SL0CMCSD[SLWIDX01];
    call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == +0)
      if (PC2REC.XXXSTAT == "A")
         /* ** next sentence ***/
         /* ** next sentence ***/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SO4P";
        SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
        set SL0CM410.SL0CMNSD[SLWIDX01] cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SO4Q";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0CM410.SL0CMNSD[SLWIDX01] cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSO4

// relational data edits
Function SL0CSP1()

   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** for warehouse 51,07,04 & 02                         ****/
   /* *** calculate total quantity and make sure it is        ****/
   /* *** divisible by units/case       sjohns 7/1/91         ****/
   /* ************************************************************/

  if (SL0CM110.XWHCD != "51"
   && SL0CM110.XWHCD != "07"
   && SL0CM110.XWHCD != "04"
   && SL0CM110.XWHCD != "02"
   && SL0CM110.XWHCD != "25"
   && SL0CM110.XWHCD != "42") /* Canada*/
    return;
  end

  if (SLWREC.SLWIDX01 == 1)
    SL0CW01.SL0CWPLT = " ";
    SL0CW01.SL0CWCAS = " ";
  end

   /* ************************************************************/
   /* *** if the palet or case is new, we need to edit for    ****/
   /* *** total count divisible by units per case             ****/
   /* ************************************************************/

  if (SL0CW01.SL2PALET != SL0CW01.SL0CWPLT
   || SL0CW01.SL2CASE != SL0CW01.SL0CWCAS)
     /* ** next sentence*/
  else
    return;
  end

   /* ************************************************************/
   /* *** first we must add qty's from the current line       ****/
   /* ************************************************************/

  SL0CW01.SL0CWTQY = SL0CM110.SL0CMQY1[SLWIDX01];
  SL0CW01.SL0CWTQY = SL0CW01.SL0CWTQY + SL0CM110.SL0CMQY2[SLWIDX01];
  SL0CW01.SL0CWTQY = SL0CW01.SL0CWTQY + SL0CM110.SL0CMQY3[SLWIDX01];
  SL0CW01.SL0CWTQY = SL0CW01.SL0CWTQY + SL0CM110.SL0CMQY4[SLWIDX01];

   /* ************************************************************/
   /* *** then we add qty's from rows beneath with the same   ****/
   /* *** palet and case -- blanks can mean use prev values   ****/
   /* ************************************************************/

  SLWREC.SLWIDX02 = SLWREC.SLWIDX01 + 1;
  while (SLWREC.SLWIDX02 <= 11)
   /* lpattn changes starts*/
   /* IF SL0CM110.SL2PALET(SLWIDX02) NE ' '*/
    if (SL0CM110.SL2PALET[SLWIDX02] != 0
     && SL0CW01.SL0CWPLT != SL0CW01.SL2PALET)
      SLWREC.SLWIDX02 = 12;
    else
      if (SL0CM110.SL2CASE[SLWIDX02] != " "
       && SL0CW01.SL0CWCAS != SL0CW01.SL2CASE)
        SLWREC.SLWIDX02 = 12;
      end
    end
    if (SLWREC.SLWIDX02 <= 11)
      SL0CW01.SL0CWTQY = SL0CW01.SL0CWTQY + SL0CM110.SL0CMQY1[SLWIDX02];
      SL0CW01.SL0CWTQY = SL0CW01.SL0CWTQY + SL0CM110.SL0CMQY2[SLWIDX02];
      SL0CW01.SL0CWTQY = SL0CW01.SL0CWTQY + SL0CM110.SL0CMQY3[SLWIDX02];
      SL0CW01.SL0CWTQY = SL0CW01.SL0CWTQY + SL0CM110.SL0CMQY4[SLWIDX02];
    end
    SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
  end

   /* ************************************************************/
   /* *** finally we make sure that the total qty is divisible****/
   /* *** by the units per case.                              ****/
   /* ************************************************************/

  SL0CW02.SL0CWREM = SL0CW01.SL0CWTQY % SL0CM110.SY1UNPCS;
  if (SL0CW02.SL0CWREM != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SP1C";
    SLWREC.SLWMSGNO = 0409; /* <--- total must / by un/cse*/
    set SL0CM110.SY1UNPCS cursor, bold;
  end

  SL0CW01.SL0CWPLT = SL0CW01.SL2PALET;
  SL0CW01.SL0CWCAS = SL0CW01.SL2CASE;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0CSP1

// key data relational edits
Function SL0CSP2()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if atleast 1 of the hdr data flds has changed,      ****/
   /* *** set spec. exit sw = n to update hdr (y=skip)        ****/
   /* ************************************************************/

  SLWREC.SLWSEXSW = "Y";

  if (SL0CM210.XARCD != SL1REC.XARCD)
    SLWREC.SLWSEXSW = "N";
  end

  if (SL0CM210.SL4ZONE != SL1REC.SL4ZONE)
    SLWREC.SLWSEXSW = "N";
  end

   /* IF SL0CM210.IN7STNBR NE SL1REC.IN7STNBR;*/
   /* MOVE 'N' TO SLWREC.SLWSEXSW;*/
   /* END;*/

  if (SL0CM210.SL1RCVR != SL1REC.SL1RCVR)
    SLWREC.SLWSEXSW = "N";
  end

  if (SL0CM210.SL1COMNT != SL1REC.SL1COMNT)
    SLWREC.SLWSEXSW = "N";
  end

  if (SL0CM210.XITCD != SL1REC.XITCD)
    SLWREC.SLWSEXSW = "N";
  end

   /* ************************************************************/
   /* *** if option = product, do the following edits         ****/
   /* ************************************************************/

  if (SL0CM210.XMSLMOPT == "C")
    return;
  end

   /* ************************************************************/
   /* *** calculate the net adjustments & compare to total    ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;
  SL0CW02.SL0CWTOT = 0;
  SLWREC.SLWCTR01 = 0;
  while (SLWREC.SLWIDX01 <= 30)
    if (SL0CM210.SL0CMADJ[SLWIDX01] != 0)
      SLWREC.SLWCTR01 = SLWREC.SLWCTR01 + 1;
      SL0CW02.SL0CWTOT = SL0CW02.SL0CWTOT + SL0CM210.SL0CMADJ[SLWIDX01];
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

  if (SLWREC.SLWCTR01 == 0)
    if (SL0CM210.SL0CMTOT == 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SP2A";
      SLWREC.SLWMSGNO = 0009; /* <--- missing fld msg*/
      set SL0CM210.SL0CMTOT cursor, bold;
      set SL0CM210.SL0CMADJ[1] bold;
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SP2B";
      SLWREC.SLWMSGNO = 0067; /* <--- atleast 1 entered msg*/
      set SL0CM210.SL0CMADJ[1] cursor, bold;
    end
  else
    if (SL0CW02.SL0CWTOT == SL0CM210.SL0CMTOT)
       /* ** next sentnece ***/
    else
      SL0CW02.SL0CWFSW = "Y";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SP2C";
      SLWREC.SLWMSGNO = 0069; /* <--- total must = sum msg*/
      set SL0CM210.SL0CMTOT cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** for warehouse 51,07,04 & 02                         ****/
   /* *** calculate total quantity and make sure it is        ****/
   /* *** divisible by units/case                             ****/
   /* ************************************************************/

  if (SL0CM210.XWHCD == "51"
   || SL0CM210.XWHCD == "07"
   || SL0CM210.XWHCD == "04"
   || SL0CM210.XWHCD == "02"
   || SL0CM210.XWHCD == "25"
   || SL0CM210.XWHCD == "42") /* Canada*/

    SLWREC.SLWIDX01 = 1;
    SL0CW02.SL0CWTQY = 0;
    while (SLWREC.SLWIDX01 <= 30)
      SL0CW02.SL0CWTQY = SL0CW02.SL0CWTQY + SL0CM210.SL2RCVD[SLWIDX01];
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
    end

    SL0CW02.SL0CWTQY = SL0CW02.SL0CWTQY + SL0CW02.SL0CWTOT; /* qty + adj*/
    SL0CW02.SL0CWREM = SL0CW02.SL0CWTQY % SL0CM210.SY1UNPCS;
    if (SL0CW02.SL0CWREM != 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SP2D";
      SLWREC.SLWMSGNO = 0409; /* <--- total must / by un/cse*/
      set SL0CM210.SY1UNPCS cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** if atleast 1 of the hdr data flds has changed,      ****/
   /* *** set item changed sw = y to process all items        ****/
   /* ************************************************************/

  SL0CW02.SL0CWICS = "N";

  if (SL0CM210.SL5LOCTN != VRLITM02.SL5LOCTN)
    SL0CW02.SL0CWICS = "Y";
  end

  if (SL0CM210.INASAID != VRLITM02.INASAID)
    SL0CW02.SL0CWICS = "Y";
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSP2

// data relational edits
Function SL0CSP4()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** beginning palet must be less than or equal ending   ****/
   /* ************************************************************/

  if (SL0CM410.SL0CMBPL[SLWIDX01] <= SL0CM410.SL0CMEPL[SLWIDX01])
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SP4A";
    SLWREC.SLWMSGNO = 0028; /* <--- beg.g > end.g msg*/
    set SL0CM410.SL0CMBPL[SLWIDX01] cursor, bold;
    set SL0CM410.SL0CMEPL[SLWIDX01] bold;
  end

   /* ************************************************************/
   /* *** if entered, beginning case must be < or = ending    ****/
   /* ************************************************************/

  if (SL0CM410.SL0CMBCN[SLWIDX01] > " ")
    if (SL0CM410.SL0CMBCN[SLWIDX01] <= SL0CM410.SL0CMECN[SLWIDX01])
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SP4B";
      SLWREC.SLWMSGNO = 0028; /* <--- beg.g > end.g msg*/
      set SL0CM410.SL0CMBCN[SLWIDX01] cursor, bold;
      set SL0CM410.SL0CMECN[SLWIDX01] bold;
      return;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSP4

// inquiry : sz xlate : 0
Function SL0CSPI()


   /* ************************************************************/
   /* *** obtain the desired size description/size id (no.)   ****/
   /* *** using the std module:  SY1190                       ****/
   /* *** code the following before this is executed:         ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* ***   note: or setup during init. & use a comment       ****/
   /* ***   SYPREC.SYPFC:   PC = all valid sizes              ****/
   /* ***                   IE = int. sz id to desc.          ****/
   /* ***                   EI = desc. to int. sz id          ****/
   /* ***   SYPREC.SYPCMPSW: Y = compressed (first blank or   ****/
   /* ***                        zero is end of data)         ****/
   /* ***                    N = not compressed (positional)  ****/
   /* *** code the action for the following return codes:     ****/
   /* *** note: check the SYPREC.SYPRC (NOT sqlcode)          ****/
   /* ***      0 = successful                                 ****/
   /* ***      9 = deadlock                                   ****/
   /* ***     10 = not found                                  ****/
   /* ***  other = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** call sy1120                                         ****/
   /* *** note: func & compress sw setup prior to this sgrp   ****/
   /* ************************************************************/

  call "SY1190" (SQLCA, SYPREC) {isNoRefresh = yes, isExternal = yes};

  if (SYPREC.SYPRC == 0)
    return;
  end

  if (SYPREC.SYPRC == 9)
    return;
  end

  if (SYPREC.SYPRC == 10)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSYPI0 ";
  TA1REC.TA1LOCAT[1] = "SY1190  ";
  TA1REC.TA1LOCAT[3] = SYPREC.SYPRCX;
  TA1REC.TA1LOCAT[4] = "SZ XLATE";
  TA1REC.TA1DBASE = "MULTIPLE";
  TA1REC.TA1TBLVU = "DB VIEWS";
  TA1REC.TA1TBLKE = SYPREC.SYPKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSPI

// reset screen (clear)
Function SL0CSQ2()


   /* ************************************************************/
   /* *** "clear" map =  fld values, attributes & cursor      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0CM210 initial; /* resets entire screen*/

  SL0CSG2(); /* <=== setup map key fields*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0CM210.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0CM210.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0CM210.XXXTITLE = SLWREC.XXXTITLE;
  SL0CM210.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set SL0CW02 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSQ2

// reset screen (clear)
Function SL0CSQ3()


   /* ************************************************************/
   /* *** "clear" map =  fld values, attributes & cursor      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0CM310 initial; /* resets entire screen*/

  SL0CM310.XWHCD = SL0CW03.XWHCD;
  SL0CM310.XMSLMOPT = SL0CW03.XMSLMOPT;

  if (SL0CM310.XMSLMOPT == "C")
     /* ** next sentence ***/
  else
    if (SL0CM310.XMSLMOPT == "P")
      SL0CM310.TS3CNTNR = SL0CW03.TS3CNTNR;
    else
      SL0CM310.TS3CNTNR = SL0CW03.TS3CNTNR;
      SL0CM310.SL2PALET = SL0CW03.SL2PALET;
    end
  end

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0CM310.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0CM310.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0CM310.XXXTITLE = SLWREC.XXXTITLE;
  SL0CM310.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set SL0CW03 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSQ3

// reset screen (clear)
Function SL0CSQ4()


   /* ************************************************************/
   /* *** "clear" map =  fld values, attributes & cursor      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0CM410 initial; /* resets entire screen*/

  SL0CSG4(); /* <=== setup key values*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0CM410.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0CM410.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0CM410.XXXTITLE = SLWREC.XXXTITLE;
  SL0CM410.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set SL0CW04 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSQ4

// data processing (edits)
Function SL0CSR1()


   /* ************************************************************/
   /* *** check for missing data fields                       ****/
   /* ************************************************************/

  SL0CSN1(); /* <=== data missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  if (SLWREC.SLWSEXSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no missing fields: edit individual data fields      ****/
   /* ************************************************************/

  SL0CSO1(); /* <=== data field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational data field edits        ****/
   /* ************************************************************/

  SL0CSP1(); /* <=== data relational edits*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSR1

// key data entry edits
Function SL0CSR2()


   /* ************************************************************/
   /* *** check for missing data fields                       ****/
   /* ************************************************************/

  SL0CSN2(); /* <=== data missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no missing fields: edit individual data fields      ****/
   /* ************************************************************/

  SL0CSO2(); /* <=== data field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational data field edits        ****/
   /* *** note: set special exit switch=y if data not changed ****/
   /* ************************************************************/

  SL0CSP2(); /* <=== data relational edits*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSR2

// data entry edits
Function SL0CSR4()


   /* ************************************************************/
   /* *** check for missing data fields                       ****/
   /* *** note: exit if special exit switch = 'y'             ****/
   /* ************************************************************/

  SL0CSN4(); /* <=== data missing input edits*/

  if (SLWREC.SLWERRSW == "Y"
   || SLWREC.SLWSEXSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no missing fields: edit individual data fields      ****/
   /* ************************************************************/

  SL0CSO4(); /* <=== data field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational data field edits        ****/
   /* ************************************************************/

  SL0CSP4(); /* <=== data relational edits*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSR4

// reset screen (empty)
Function SL0CST2()


   /* ************************************************************/
   /* *** "empty" map =  fld values only                      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0CM210 empty; /* resets entire screen*/

  SL0CSG2(); /* <=== setup map key fields*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0CM210.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0CM210.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0CM210.XXXTITLE = SLWREC.XXXTITLE;
  SL0CM210.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set SL0CW02 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CST2

// reset screen (empty)
Function SL0CST3()


   /* ************************************************************/
   /* *** "empty" map =  fld values only                      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0CM310 empty; /* resets entire screen*/

  SL0CSG3(); /* <=== setup map key fields*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0CM310.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0CM310.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0CM310.XXXTITLE = SLWREC.XXXTITLE;
  SL0CM310.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set SL0CW03 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CST3

// reset screen (empty)
Function SL0CST4()


   /* ************************************************************/
   /* *** "empty" map =  fld values only                      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0CM410 empty; /* resets entire screen*/

  SL0CSG4(); /* <=== setup map key fields*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0CM410.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0CM410.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0CM410.XXXTITLE = SLWREC.XXXTITLE;
  SL0CM410.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set SL0CW04 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CST4

// reset screen (empty)
Function SL0CST5()


   /* ************************************************************/
   /* *** "empty" map =  fld values only                      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0CM510 empty; /* resets entire screen*/

  SL0CSG5(); /* <=== setup map key fields*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0CM510.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0CM510.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0CM510.XXXTITLE = SLWREC.XXXTITLE;
  SL0CM510.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set SL0CW05 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CST5

// data processing (updates)
Function SL0CSU1()


   /* ************************************************************/
   /* *** use the map field values to add receiving log detail****/
   /* *** rows (the header existed or was added during edits) ****/
   /* *** note: all valid sizes obtained during edits also    ****/
   /* *** note: all constant key & item fields are setup only ****/
   /* ***       on the first loop execution                   ****/
   /* ************************************************************/

  if (SLWREC.SLWIDX01 == 1)

    set VRLITM02 empty; /* Row storage area*/

    VRLITM02.XWHCD = SL0CM110.XWHCD;
    VRLITM02.TS3CNTNR = SL0CM110.TS3CNTNR;

    if (SL0CW01.SL0CWPNT == "Y") /* po entered flag*/

      if (SL0CM110.PC3PONBR > 0)
        VRCVPH01.PC3PONBR = SL0CM110.PC3PONBR;
      else
        VRCVPH01.PC3PONBR = SL0CW01.SL0CWSPN;
      end
      if (SL0CM110.PC-SAP-PO-NBR > " ")
        VRCVPH01.PC-SAP-PO-NBR = SL0CM110.PC-SAP-PO-NBR;
      else
        VRCVPH01.PC-SAP-PO-NBR = SL0CW01.PC-SAP-PO-NBR;
      end
      VRCVPH01.TS3CNTNR = SL0CM110.TS3CNTNR;
      VRCVPH01.XGPCD = SL0CM110.XGPCD;
      SL0CS7B();

      if (SLWREC.SLWERRSW == "Y")
        SLWREC.SLWMSGNO = 001;
        exit stack;
      end

      VRLITM02.PC3PONBR = VRCVPH01.PC3PONBR;
      VRLITM02.PC-SAP-PO-NBR = VRCVPH01.PC-SAP-PO-NBR;
      VRLITM02.FY1FCTYC = VRCVPH01.FY1FCTYC;

    else
      VRLITM02.PC3PONBR = 0;
      VRLITM02.PC-SAP-PO-NBR = " ";
      VRLITM02.FY1FCTYC = " ";

    end

    VRLITM02.XGPCD = SL0CM110.XGPCD;
    VRLITM02.SY1STNBR = SL0CM110.SY1STNBR;
    VRLITM02.SY2CLRID = SL0CM110.SY2CLRID;
    VRLITM02.XDMCD = SL0CM110.XDMCD;
    VRLITM02.XQACD = SL0CM110.XQACD;
    VRLITM02.XOWCD = SL0CM110.XOWCD;
    VRLITM02.PC2INSEG = SL0CM110.XSDCD;
    VRLITM02.XEGCD = "000";
    VRLITM02.XPGCD = SL0CM110.XPGCD;
    VRLITM02.XUMCD = SL0CM110.XUMCD;
    VRLITM02.XSLCD = SL0CM110.XSLCD;
    VRLITM02.SL5LOCTN = SL0CM110.SL5LOCTN;
    VRLITM02.INASAID = SL0CM110.INASAID;
    VRLITM02.SWHLNCAT = " ";
  end

  VRLITM02.SL2PALET = SL0CW01.SL2PALET;
  VRLITM02.SL2CASE = SL0CW01.SL2CASE;

  if (SL0CM110.XWHCD == "51" /* warehouse 51*/
   || SL0CM110.XWHCD == "07" /* warehouse 07*/
   || SL0CM110.XWHCD == "04" /* warehouse 04*/
   || SL0CM110.XWHCD == "02" /* warehouse 02*/
   || SL0CM110.XWHCD == "25" /* warehouse 25*/
   || SL0CM110.XWHCD == "42") /* Canada Whse*/
    VRLITM02.SY1UNPCS = SL0CM110.SY1UNPCS; /* set units per case*/
  end

   /* ************************************************************/
   /* *** create size/detail row for each non-blank size on   ****/
   /* *** the line using that line's pallet & case            ****/
   /* ************************************************************/

  if (SL0CM110.SL0CMSZ1[SLWIDX01] > " ")
    VRLITM02.SY5SZID = SL0CW01.SL0CWID1;
    VRLITM02.SL2RCVD = SL0CM110.SL0CMQY1[SLWIDX01];
    SL0CS1Y(); /* <=== add item row*/
    if (SLWREC.SLWERRSW == "Y")
      set SL0CM110.SL0CMSZ1[SLWIDX01] cursor, bold;
      set SL0CM110.SL0CMQY1[SLWIDX01] bold;
      return;
    end
  end

  if (SL0CM110.SL0CMSZ2[SLWIDX01] > " ")
    VRLITM02.SY5SZID = SL0CW01.SL0CWID2;
    VRLITM02.SL2RCVD = SL0CM110.SL0CMQY2[SLWIDX01];
    SL0CS1Y(); /* <=== add item row*/
    if (SLWREC.SLWERRSW == "Y")
      set SL0CM110.SL0CMSZ2[SLWIDX01] cursor, bold;
      set SL0CM110.SL0CMQY2[SLWIDX01] bold;
      return;
    end
  end

  if (SL0CM110.SL0CMSZ3[SLWIDX01] > " ")
    VRLITM02.SY5SZID = SL0CW01.SL0CWID3;
    VRLITM02.SL2RCVD = SL0CM110.SL0CMQY3[SLWIDX01];
    SL0CS1Y(); /* <=== add item row*/
    if (SLWREC.SLWERRSW == "Y")
      set SL0CM110.SL0CMSZ3[SLWIDX01] cursor, bold;
      set SL0CM110.SL0CMQY3[SLWIDX01] bold;
      return;
    end
  end

  if (SL0CM110.SL0CMSZ4[SLWIDX01] > " ")
    VRLITM02.SY5SZID = SL0CW01.SL0CWID4;
    VRLITM02.SL2RCVD = SL0CM110.SL0CMQY4[SLWIDX01];
    SL0CS1Y(); /* <=== add item row*/
    if (SLWREC.SLWERRSW == "Y")
      set SL0CM110.SL0CMSZ4[SLWIDX01] cursor, bold;
      set SL0CM110.SL0CMQY4[SLWIDX01] bold;
      return;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSU1

// key data update database
Function SL0CSU2()


   /* ************************************************************/
   /* *** move each of the map data flds to db record & update****/
   /* *** note: record keys still setup from 1st read         ****/
   /* ************************************************************/

  SL1REC.XARCD = SL0CM210.XARCD;
  SL1REC.SL4ZONE = SL0CM210.SL4ZONE;
  SL1REC.XITCD = SL0CM210.XITCD;
   /* MOVE SL0CM210.IN7STNBR TO SL1REC.IN7STNBR;*/
  SL1REC.SL1COMNT = SL0CM210.SL1COMNT;
  SL1REC.SL1RCVR = SL0CM210.SL1RCVR;
  SL1REC.YMTCD = SL0CM210.YMTCD;

  TA1REC.TA1LOCAT[2] = "SL0CSU2 ";
   /* ** TA1REC.TA1MAP setup during initialization ***/

  XSSL1R0(); /* <=== std replace*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    SLWREC.SLWSKYSW = "N"; /* <=== will cause xfer to 220*/
    SLWREC.SLWERRSW = "Y";
    set SL0CM210.XWHCD bold;
    set SL0CM210.TS3CNTNR cursor, bold;
    if (SQLCA.VAGen_SQLCODE == +100)
      if (SL1REC.SL1DATA > " ")
        SLWREC.XXXLOCID = "SU2A";
        SLWREC.SLWMSGNO = 0032; /* <--- row updated since last read*/
      else
        SLWREC.XXXLOCID = "SU2B";
        SLWREC.SLWMSGNO = 0033; /* <--- row deleted since last read*/
      end
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.XXXLOCID = "SU2C";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.XXXLOCID = "SU2D";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSU2

// update database
Function SL0CSU3()


   /* ************************************************************/
   /* *** depending on the option, select the appropriate set ****/
   /* *** of container item rows to be deleted using the set  ****/
   /* *** update select and loop/delete until eof             ****/
   /* *** note: if container option, also delete the cntnr    ****/
   /* ************************************************************/

  if (SL0CM310.XMSLMOPT == "C")
    VRLITM02.XWHCD = SL0CM310.XWHCD;
    VRLITM02.TS3CNTNR = SL0CM310.TS3CNTNR;
    VRLITM02.SL2PALET = "*";
    VRLITM02.SL2CASE = "*";
    TA1REC.TA1LOCAT[2] = "SL0CSU3 ";
     /* ** TA1REC.TAMAP setup during initialization ***/
    /* XSSL2X4;               /* <=== select set rcvg log items for upd*/
    XSSLS-S4-VRLITM02();
    if (SQLCA.VAGen_SQLCODE == 0)
       /* ** next sentence ***/
    else
      set SL0CM310.TS3CNTNR cursor, bold;
      SLWREC.SLWERRSW = "Y";
      if (SQLCA.VAGen_SQLCODE == +100)
        SLWREC.XXXLOCID = "SU3A";
        SLWREC.SLWMSGNO = 0033; /* <--- deleted since displayed msg*/
        return;
      end
      if (SQLCA.VAGen_SQLCODE == -911)
        SLWREC.XXXLOCID = "SU3B";
        SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
        return;
      end
      SLWREC.XXXLOCID = "SU3C";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
  else
    if (SL0CM310.XMSLMOPT == "P")
      VRLITM02.XWHCD = SL0CM310.XWHCD;
      VRLITM02.TS3CNTNR = SL0CM310.TS3CNTNR;
      VRLITM02.SL2PALET = SL0CM310.SL2PALET;
      VRLITM02.SL2CASE = "*";
      TA1REC.TA1LOCAT[2] = "SL0CSU3 ";
       /* ** TA1REC.TAMAP setup during initialization ***/
      /* XSSL2X4;                     /* <=== select set rl items for upd*/
      XSSLS-S4-VRLITM02();
      if (SQLCA.VAGen_SQLCODE == 0)
         /* ** next sentence ***/
      else
        set SL0CM310.TS3CNTNR bold;
        set SL0CM310.SL2PALET cursor, bold;
        SLWREC.SLWERRSW = "Y";
        if (SQLCA.VAGen_SQLCODE == +100)
          SLWREC.XXXLOCID = "SU3D";
          SLWREC.SLWMSGNO = 0033;
                                   /* <--- deleted since displayed msg*/
          return;
        end
        if (SQLCA.VAGen_SQLCODE == -911)
          SLWREC.XXXLOCID = "SU3E";
          SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
          return;
        end
        SLWREC.XXXLOCID = "SU3F";
        SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
        return;
      end
    else
      VRLITM02.XWHCD = SL0CM310.XWHCD;
      VRLITM02.TS3CNTNR = SL0CM310.TS3CNTNR;
      VRLITM02.SL2PALET = SL0CM310.SL2PALET;
      VRLITM02.SL2CASE = SL0CM310.SL2CASE;
      TA1REC.TA1LOCAT[2] = "SL0CSU3 ";
       /* ** TA1REC.TAMAP setup during initialization ***/
      /* XSSL2X4;                     /* <=== select set rl items for upd*/
      XSSLS-S4-VRLITM02();
      if (SQLCA.VAGen_SQLCODE == 0)
         /* ** next sentence ***/
      else
        set SL0CM310.TS3CNTNR bold;
        set SL0CM310.SL2PALET bold;
        set SL0CM310.SL2CASE cursor, bold;
        SLWREC.SLWERRSW = "Y";
        if (SQLCA.VAGen_SQLCODE == +100)
          SLWREC.XXXLOCID = "SU3G";
          SLWREC.SLWMSGNO = 0033;
                                   /* <--- deleted since displayed msg*/
          return;
        end
        if (SQLCA.VAGen_SQLCODE == -911)
          SLWREC.XXXLOCID = "SU3H";
          SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
          return;
        end
        SLWREC.XXXLOCID = "SU3I";
        SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
        return;
      end
    end
  end

   /* ************************************************************/
   /* *** delete selected rows until eof or error             ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0CSU3 ";
   /* ** TA1REC.TAMAP setup during initialization ***/

  while (SQLCA.VAGen_SQLCODE == 0)
    XSSLS-D-VRLITM02(); /* <=== std delete row*/
    if (SQLCA.VAGen_SQLCODE == 0)
       /* ** next sentence ***/
    else
      set SL0CM310.TS3CNTNR cursor, bold;
      set SL0CM310.SL2PALET bold;
      set SL0CM310.SL2CASE bold;
      SLWREC.SLWERRSW = "Y";
      if (SQLCA.VAGen_SQLCODE == +100)
        SLWREC.XXXLOCID = "SEUJ";
        SLWREC.SLWMSGNO = 0033; /* <--- deleted since displayed msg*/
        return;
      end
      SLWREC.XXXLOCID = "SEUL";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
    XSSLS-N4-VRLITM02(); /* <=== fetch next row for delete*/
    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == +100)
       /* ** next sentence ***/
    else
      set SL0CM310.TS3CNTNR cursor, bold;
      set SL0CM310.SL2PALET bold;
      set SL0CM310.SL2CASE bold;
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SU3L";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
  end

  if (SL0CM310.XMSLMOPT == "C")
    SL1REC.XWHCD = SL0CM310.XWHCD;
    SL1REC.TS3CNTNR = SL0CM310.TS3CNTNR;
    TA1REC.TA1LOCAT[2] = "SL0CSU3 ";
     /* ** TA1REC.TAMAP setup during initialization ***/
    XSSL1U0(); /* <=== select rcvg log hdr for upd*/
    if (SQLCA.VAGen_SQLCODE == 0)
       /* ** next sentence ***/
    else
      set SL0CM310.TS3CNTNR cursor, bold;
      SLWREC.SLWERRSW = "Y";
      if (SQLCA.VAGen_SQLCODE == +100)
        SLWREC.XXXLOCID = "SU3M";
        SLWREC.SLWMSGNO = 0033; /* <--- deleted since displayed msg*/
        return;
      end
      if (SQLCA.VAGen_SQLCODE == -911)
        SLWREC.XXXLOCID = "SU3N";
        SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
        return;
      end
      SLWREC.XXXLOCID = "SU3O";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
    TA1REC.TA1LOCAT[2] = "SL0CSU3 ";
     /* ** TA1REC.TAMAP setup during initialization ***/
    XSSL1D0(); /* <=== delete rcvg log hdr*/
    if (SQLCA.VAGen_SQLCODE == 0)
       /* ** next sentence ***/
    else
      set SL0CM310.TS3CNTNR cursor, bold;
      SLWREC.SLWERRSW = "Y";
      if (SQLCA.VAGen_SQLCODE == +100)
        SLWREC.XXXLOCID = "SU3P";
        SLWREC.SLWMSGNO = 0033; /* <--- deleted since displayed msg*/
        return;
      end
      if (SQLCA.VAGen_SQLCODE == -911)
        SLWREC.XXXLOCID = "SU3Q";
        SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
        return;
      end
      SLWREC.XXXLOCID = "SU3R";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSU3

// update database
Function SL0CSU4()


   /* ************************************************************/
   /* *** setup this line's select set criteria               ****/
   /* *** note: constant values setup prior to loop           ****/
   /* ************************************************************/

  SL0CS4B(); /* <=== setup select set values*/

   /* ************************************************************/
   /* *** select all the item rows to be changed for update   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0CSU4 ";
   /* ** TA1REC.TA1MAP setup during initialization ***/

   /* XSSL2X5;                           /* <=== select set for update*/
   /* PREVIOUSLY XSSL2X5 WAS CALLING ANOTHE SGRP WHICH IN TURN CALLING IO*/
   /* NOW IT IS CHANGED TO CALL THE IO DIRECTLY FROM HERE*/
  XSSLS-S5-VRLITM02();
  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SU4A";
      SLWREC.SLWMSGNO = 0012; /* <--- not on db msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.SLWSKYSW = "N";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SU4B";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SU4C";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** unitl EOF:                                          ****/
   /* *** delete each row as fetched                          ****/
   /* *** add the same row with the changes                   ****/
   /* *** fetch the next row (1st part of select set)         ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0CSU4 ";
   /* ** TA1REC.TA1MAP setup during initialization ***/

  while (SQLCA.VAGen_SQLCODE == 0)
    XSSLS-D-VRLITM02(); /* <=== delete row*/
    if (SQLCA.VAGen_SQLCODE == 0)
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SU4D";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
    SL0CS4C(); /* <=== modify row per this line*/
    /* XSSL2A0;                         /* <=== add set*/
    XSSLS-A0-VRLITM02();
    if (SQLCA.VAGen_SQLCODE == 0)
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      if (SQLCA.VAGen_SQLCODE == -803)
        SLWREC.XXXLOCID = "SU4E";
        SLWREC.SLWMSGNO = 0045; /* <--- record exists msg*/
        return;
      end
      SLWREC.XXXLOCID = "SU4F";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
    XSSLS-N5-VRLITM02(); /* <=== fetch next row*/
    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == +100)
       /* ** next sentence ***/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SU4G";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSU4

// key missing input edits
Function SL0CSU6()

   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  set TA6REC empty; /* Subroutine work area*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Until end of table*/

    /* ------------------------------------------------------------*/
     /* Format the variable parameters entered by the user.*/
    /* ------------------------------------------------------------*/

    if (SL0CT06.TARTYPE[TA6INDEX] == "A") /* first parm*/
      SL0CT06.SL0CWWS2[TA6INDEX] = SL0CM510.XWHCD;
    else
      if (SL0CT06.TARTYPE[TA6INDEX] == "B") /* second parm*/
        SL0CT06.SL0CWWS3[TA6INDEX] = SL0CM510.XWHCD;
      else
        if (SL0CT06.TARTYPE[TA6INDEX] == "C") /* third parm*/
          SL0CT06.SL0CWWS1[TA6INDEX] = SL0CM510.XWHCD;
          SL0CT06.SL0CWCNR[TA6INDEX] = SL0CM510.TS3CNTNR;
        else
          if (SL0CT06.TARTYPE[TA6INDEX] == "P") /* Fourth Parm(FTP)*/
            if (SL0CM510.XWHCD == "09")
              SL0CT06.SL0CWFTP[TA6INDEX] = "GN200125";
            else
              if (SL0CM510.XWHCD == "04")
                SL0CT06.SL0CWFTP[TA6INDEX] = "GN200115";
              else
                if (SL0CM510.XWHCD == "42")
                  SL0CT06.SL0CWFTP[TA6INDEX] = "GN200110";
                else
                  if (SL0CM510.XWHCD == "07")
                    SL0CT06.SL0CWFTP[TA6INDEX] = "GN200120";
                  end
                end
              end
            end
          end
        end
      end
    end

    /* ------------------------------------------------------------*/
     /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/

    TA6REC.TARJCL[TA6INDEX] = SL0CT06.TARJCL[TA6INDEX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = SL0CT06.TARTYPE[TA6INDEX]; /* Type*/

    /* ------------------------------------------------------------*/
     /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (SL0CT06.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    SLWREC.XXXLOCID = "SU5A"; /* Module identification*/
    SLWREC.SLWERRSW = "Y"; /* trigger error switch*/

  end

  exit stack; /* Exit to display map*/


end // end SL0CSU6

// validate style/color combo
Function SL0CSVJ()


   /* ************************************************************/
   /* *** style/color combination must exist                  ****/
   /* ************************************************************/

  SLWREC.SLWVERSW = "N";

  SL0CSCI(); /* <=== select style/color view*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    SLWREC.SLWVERSW = "Y";
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.XXXLOCID = "SVJA";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.SLWSKYSW = "N";
      SLWREC.XXXLOCID = "SVJB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811)
      SLWREC.XXXLOCID = "SVJC";
      SLWREC.SLWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
      return;
    end
    SLWREC.XXXLOCID = "SVJD";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSVJ

// CAITEM  processing
Function SL0CSY0()


   /* ************************************************************/
   /* *** if entered, use CAITEM data by first moving it to   ****/
   /* *** a ws field to make use of it with "redefines"       ****/
   /* *** note: CAITEM = character data as passed             ****/
   /* ************************************************************/

  SLWREC.CAITEM = COMMAREA.CAITEM;

  if (SLWREC.SLWCASNO > " ")
    SL0CM010.XMSLMSNO = SLWREC.SLWCASNO;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0CSY0

// add : rcv log hdr : 0
Function XSSL1A0()


   /* ************************************************************/
   /* *** add unique row to:  receiving log hdr               ****/
   /* *** using the std module:  IO1570                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -803 = adding duplicate row                       ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* *** note: 0 return code means record already exists     ****/
   /* ***       = setup -803 return code                      ****/
   /* ************************************************************/

  XSSL1I0(); /* <=== select unique row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    SQLCA.VAGen_SQLCODE = -803;
    return;
  end

  if (SQLCA.VAGen_SQLCODE < 0)
    return;
  end

   /* ************************************************************/
   /* *** insert row (previous +100 = doesn't exist)          ****/
   /* *** note: IO process initializes zzzchgct to 0          ****/
   /* ************************************************************/

  SL1REC.SL1CRTDT = X2CREC.X2CCURDT;
  SL1REC.ZZZCHGDT = X2CREC.X2CCURDT;
  SL1REC.ZZZSTM = X3CREC.X3CCURST;
  SL1REC.ZZZCHGTM = X3CREC.X3CCURST;
  SL1REC.SL1CRTBY = COMMAREA.CAUSERID;
  SL1REC.SL1UPDBY = COMMAREA.CAUSERID;

  SLVREC.SLVFNC = "A ";

  call "IO1570" (SLVREC, SQLCA, SL1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSSL1A0 ";
  TA1REC.TA1LOCAT[1] = "IO1570  ";
  TA1REC.TA1LOCAT[3] = "ADD     ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VRLHDR01";
  TA1REC.TA1TBLKE = SL1REC.SL1KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSL1A0

// delete : rcv log hdr : 0
Function XSSL1D0()


   /* ************************************************************/
   /* *** delete unique row in:  receiving log hdr            ****/
   /* *** using the std module:  IO1570                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = deleted since last read                    ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** delete row                                          ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "D ";

  call "IO1570" (SLVREC, SQLCA, SL1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100
   || SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSSL1D0 ";
  TA1REC.TA1LOCAT[1] = "IO1570  ";
  TA1REC.TA1LOCAT[3] = "DELETE  ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VRLHDR01";
  TA1REC.TA1TBLKE = SL1REC.SL1KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSL1D0

// replace : rcv log hdr : 0
Function XSSL1R0()


   /* ************************************************************/
   /* *** replace unique row in:  receiving log hdr           ****/
   /* *** using the std module:  IO1570                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = concurrent update - re:                    ****/
   /* ***          deleted since last read (rec blanked out)  ****/
   /* ***          updated since last read (new data in rec)  ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** replace row                                         ****/
   /* *** note: IO process increments record zzzchgct by +1   ****/
   /* ***       but ID's row to update by the old zzzchgct    ****/
   /* ************************************************************/

  SL1REC.ZZZCHGDT = X2CREC.X2CCURDT;
  SL1REC.ZZZCHGTM = X3CREC.X3CCURST;
  SL1REC.SL1UPDBY = COMMAREA.CAUSERID;

  SLVREC.SLVFNC = "U ";

  call "IO1570" (SLVREC, SQLCA, SL1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
     /* ************************************************************/
     /* *** select the original row without a change count      ****/
     /* *** note: select unique does NOT use zzzchgct           ****/
     /* *** note: this puts current version of data in record   ****/
     /* ***       or blank out record layout = deleted          ****/
     /* ************************************************************/
    XSSL1I0(); /* <=== select unique row*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == +100)
      SL1REC.SL1DATA = " ";
      return;
    end
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSSL1R0 ";
  TA1REC.TA1LOCAT[1] = "IO1570  ";
  TA1REC.TA1LOCAT[3] = "REPLACE ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VRLHDR01";
  TA1REC.TA1TBLKE = SL1REC.SL1KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSL1R0

// update : rcv log hdr : 0
Function XSSL1U0()


   /* ************************************************************/
   /* *** get unique row for update of:  receiving log hdr    ****/
   /* *** using the std module:  IO1570                       ****/
   /* *** note: IO process does not move rec/row data         ****/
   /* ***       therefore, at this time (w/IO modules)        ****/
   /* ***       nothing is coded                              ****/
   /* ***       (except the move of 0 to sqlcode)             ****/
   /* ***       BUT                                           ****/
   /* ***       this sgrp should be used/executed so that     ****/
   /* ***       future conversion to native CSP DB2 will      ****/
   /* ***       only have to change/add code in this sgrp     ****/
   /* ***       and regenerate all applications               ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found (does not use zzzchgct)          ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

  SQLCA.VAGen_SQLCODE = 0;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSL1U0

// update : rcv log itm : 0
Function XSSL2U0()


   /* ************************************************************/
   /* *** get unique row for update of:  receiving log itm    ****/
   /* *** using the std module:  IO1580                       ****/
   /* *** note: IO process does not move rec/row data         ****/
   /* ***       therefore, at this time (w/IO modules)        ****/
   /* ***       nothing is coded                              ****/
   /* ***       (except the move of 0 to sqlcode)             ****/
   /* ***       BUT                                           ****/
   /* ***       this sgrp should be used/executed so that     ****/
   /* ***       future conversion to native CSP DB2 will      ****/
   /* ***       only have to change/add code in this sgrp     ****/
   /* ***       and regenerate all applications               ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found (does not use zzzchgct)          ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

  SQLCA.VAGen_SQLCODE = 0;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSL2U0

// get next rcv rpt nbr:sys ctl:3
Function XSSL3G3()


   /* ************************************************************/
   /* *** get next receiving rpt nbr from:  sl sys ctl tbl    ****/
   /* *** using the module:  IO1500                           ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = db/severe error (same as below)            ****/
   /* ***     <0 = db/severe error (&-911)                    ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** get next receiving report number                    ****/
   /* *** note: IO process increments record zzzchgct by +1   ****/
   /* ***       but ID's row to update by the old zzzchgct    ****/
   /* ***       and increments the next number automatically  ****/
   /* ************************************************************/

   /* ***** the following loop added by Grant Gilray 4/26/88 ******/
  SLWREC.SLWREM01 = 1; /* init loop counter to 1*/
  SQLCA.VAGen_SQLCODE = 100; /* init sqlcode to 100 for loop*/
  while (SQLCA.VAGen_SQLCODE == 100 /* if return code = 100 try as many as*/
   && SLWREC.SLWREM01 <= 5) /* 5 times to get 0 return code*/
    call "IO1500" ("G3", SQLCA, SL3REC) {isNoRefresh = yes, isExternal = yes};
    SLWREC.SLWREM01 = SLWREC.SLWREM01 + 1;
  end
   /* ***** end of loop added by Grant Gilray 4/26/88 *************/

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "POST";
  TA1REC.TA1PGMNM = "XSSL3G3 ";
  TA1REC.TA1LOCAT[1] = "IO1500  ";
  TA1REC.TA1LOCAT[3] = "GET NEXT";
  TA1REC.TA1LOCAT[4] = "WO NBR  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VSLCTL01";
  TA1REC.TA1TBLKE = SL3REC.SL3KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSL3G3

// add : rcv log itm : 0
Function XSSLS-A-VRLITM02()


   /* ************************************************************/
   /* *** add unique row to:  receiving log itm               ****/
   /* *** using the std module:  VRLITM02(NEW VIEW )          ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -803 = adding duplicate row                       ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* *** note: 0 return code means record already exists     ****/
   /* ***       = setup -803 return code                      ****/
   /* ************************************************************/

  XSSLS-S-VRLITM02(); /* <=== select unique row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    SQLCA.VAGen_SQLCODE = -803;
    return;
  end

  if (SQLCA.VAGen_SQLCODE < 0)
    return;
  end

   /* ************************************************************/
   /* *** insert row (previous +100 = doesn't exist)          ****/
   /* *** note: IO process initializes zzzchgct to 0          ****/
   /* ************************************************************/

  VRLITM02.ZZ-CHNG-DT = X2CREC.X2CCURDT;
  VRLITM02.ZZ-CHNG-HHMM = X3CREC.X3CCURST;

  SLSREC.SLSFNC = "A ";

  call "VRLITM02" (SLSREC, SQLCA, VRLITM02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSRLM02A";
  TA1REC.TA1LOCAT[1] = "VRLITM02";
  TA1REC.TA1LOCAT[3] = "ADD     ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VRLITM02";
  TA1REC.TA1TBLKE = VRLITM02.VRLITM02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSLS-A-VRLITM02

// add : rcv log itm : 0
Function XSSLS-A0-VRLITM02()


   /* ************************************************************/
   /* *** add unique row to:  receiving log itm               ****/
   /* *** using the std module:  VRLITM02                     ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -803 = adding duplicate row                       ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* *** note: 0 return code means record already exists     ****/
   /* ***       = setup -803 return code                      ****/
   /* ************************************************************/

  XSSLS-S-VRLITM02(); /* <=== select unique row*/

  if (SQLCA.VAGen_SQLCODE == 0)
    SQLCA.VAGen_SQLCODE = -803;
    return;
  end

  if (SQLCA.VAGen_SQLCODE < 0)
    return;
  end

   /* ************************************************************/
   /* *** insert row (previous +100 = doesn't exist)          ****/
   /* *** note: IO process initializes zzzchgct to 0          ****/
   /* ************************************************************/

  VRLITM02.ZZ-CHNG-DT = X2CREC.X2CCURDT;
  VRLITM02.ZZ-CHNG-HHMM = X3CREC.X3CCURST;

  SLSREC.SLSFNC = "A ";

  call "VRLITM02" (SLSREC, SQLCA, VRLITM02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSRL02A ";
  TA1REC.TA1LOCAT[1] = "VRLITM02";
  TA1REC.TA1LOCAT[3] = "ADD     ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VRLITM02";
  TA1REC.TA1TBLKE = VRLITM02.VRLITM02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSLS-A0-VRLITM02

// close : rcv log itm : 1
Function XSSLS-C1-VRLITM02()


   /* ************************************************************/
   /* *** close select set of:  receiving log itm             ****/
   /* *** using the std module:  VRLITM02                     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  SLSREC.SLSFNC = "C1";

  call "VRLITM02" (SLSREC, SQLCA, VRLITM02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSRL02C1";
  TA1REC.TA1LOCAT[1] = "VRLITM02";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VRLITM02";
  TA1REC.TA1TBLKE = VRLITM02.VRLITM02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSLS-C1-VRLITM02

// close : rcv log itm : 3
Function XSSLS-C3-VRLITM02()


   /* ************************************************************/
   /* *** close select set of:  receiving log itm             ****/
   /* *** using the std module:  VRLITM02                     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  SLSREC.SLSFNC = "C3";

  call "VRLITM02" (SLSREC, SQLCA, VRLITM02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSRM02C3";
  TA1REC.TA1LOCAT[1] = "VRLITM02";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VRLITM02";
  TA1REC.TA1TBLKE = VRLITM02.VRLITM02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSLS-C3-VRLITM02

// close : rcv log itm : 4
Function XSSLS-C4-VRLITM02()


   /* ************************************************************/
   /* *** close select set of:  receiving log itm             ****/
   /* *** using the std module:  VRLITM02                     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  SLSREC.SLSFNC = "C4";

  call "VRLITM02" (SLSREC, SQLCA, VRLITM02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSRM02C4";
  TA1REC.TA1LOCAT[1] = "VRLITM02";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VRLITM02";
  TA1REC.TA1TBLKE = VRLITM02.VRLITM02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSLS-C4-VRLITM02

// close : rcv log itm : 5
Function XSSLS-C5-VRLITM02()


   /* ************************************************************/
   /* *** close select set of:  receiving log itm             ****/
   /* *** using the std module:  VRLITM02                     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  SLSREC.SLSFNC = "C5";

  call "VRLITM02" (SLSREC, SQLCA, VRLITM02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSRM02C5";
  TA1REC.TA1LOCAT[1] = "VRLITM02";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VRLITM02";
  TA1REC.TA1TBLKE = VRLITM02.VRLITM02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSLS-C5-VRLITM02

// delete : rcv log itm : 0
Function XSSLS-D-VRLITM02()


   /* ************************************************************/
   /* *** delete unique row in:  receiving log itm            ****/
   /* *** using the std module:  VRLITM02                     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = deleted since last read                    ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** delete row                                          ****/
   /* ************************************************************/

  SLSREC.SLSFNC = "D ";

  call "VRLITM02" (SLSREC, SQLCA, VRLITM02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100
   || SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSRLM02D";
  TA1REC.TA1LOCAT[1] = "VRLITM02";
  TA1REC.TA1LOCAT[3] = "DELETE  ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VRLITM02";
  TA1REC.TA1TBLKE = VRLITM02.VRLITM02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSLS-D-VRLITM02

// fetch : rcv log itm : 1
Function XSSLS-N1-VRLITM02()


   /* ************************************************************/
   /* *** fetch next row from:  receiving log itm             ****/
   /* *** using the std module:  VRLITM02                     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ************************************************************/

  SLSREC.SLSFNC = "N1";

  call "VRLITM02" (SLSREC, SQLCA, VRLITM02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    XSSLS-C1-VRLITM02(); /* <=== std close cursor*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSRM02N1";
  TA1REC.TA1LOCAT[1] = "VRLITM02";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VRLITM02";
  TA1REC.TA1TBLKE = VRLITM02.VRLITM02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSLS-N1-VRLITM02

// fetch : rcv log itm : 3
Function XSSLS-N3-VRLITM02()


   /* ************************************************************/
   /* *** fetch next row from:  receiving log itm             ****/
   /* *** using the std module:  VRLITM02                     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ************************************************************/

  SLSREC.SLSFNC = "N3";

  call "VRLITM02" (SLSREC, SQLCA, VRLITM02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    XSSLS-C3-VRLITM02(); /* <=== std close cursor*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSRM02N3";
  TA1REC.TA1LOCAT[1] = "VLITM02";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VRLITM02";
  TA1REC.TA1TBLKE = VRLITM02.VRLITM02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSLS-N3-VRLITM02

// fetch : rcv log itm : 4
Function XSSLS-N4-VRLITM02()


   /* ************************************************************/
   /* *** fetch next row from:  receiving log itm             ****/
   /* *** using the std module:  VRLITM02                     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ************************************************************/

  SLSREC.SLSFNC = "N4";

  call "VRLITM02" (SLSREC, SQLCA, VRLITM02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    XSSLS-C4-VRLITM02(); /* <=== std close cursor*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSRM02N4";
  TA1REC.TA1LOCAT[1] = "VRLITM02";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VRLITM02";
  TA1REC.TA1TBLKE = VRLITM02.VRLITM02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSLS-N4-VRLITM02

// fetch : rcv log itm : 5
Function XSSLS-N5-VRLITM02()


   /* ************************************************************/
   /* *** fetch next row from:  receiving log itm             ****/
   /* *** using the std module:  VRLITM02                     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ************************************************************/

  SLSREC.SLSFNC = "N5";

  call "VRLITM02" (SLSREC, SQLCA, VRLITM02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    XSSLS-C5-VRLITM02(); /* <=== std close cursor*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSRM02N5";
  TA1REC.TA1LOCAT[1] = "VRLITM02";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VRLITM02";
  TA1REC.TA1TBLKE = VRLITM02.VRLITM02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSLS-N5-VRLITM02

// inquiry : rcv log itm : 0
Function XSSLS-S-VRLITM02()


   /* ************************************************************/
   /* *** select unique row from:  receiving log itm          ****/
   /* *** using the std module:  VRLITM02                     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -811 = duplicates found                           ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* ************************************************************/

  SLSREC.SLSFNC = "S ";

  call "VRLITM02" (SLSREC, SQLCA, VRLITM02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -811)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSRLM02S";
  TA1REC.TA1LOCAT[1] = "VRLITM02";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VRLITM02";
  TA1REC.TA1TBLKE = VRLITM02.VRLITM02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSLS-S-VRLITM02

// setinq : rcv log itm : 1
Function XSSLS-S1-VRLITM02()


   /* ************************************************************/
   /* *** select set of rows from:  receiving log itm         ****/
   /* *** using the std module:  VRLITM02                      ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique field values for:            ****/
   /* ***   xwhcd                                             ****/
   /* ***   ts3cntnr                                          ****/
   /* *** the following may be used with a wild card (*):     ****/
   /* ***   none                                              ****/
   /* *** the order by for this select set is:                ****/
   /* ***   xwhcd                                             ****/
   /* ***   ts3cntnr                                          ****/
   /* ***   pc3ponbr                                          ****/
   /* ***   sapponbr*/
   /* ***   xgpcd                                             ****/
   /* ***   sy1stnbr                                          ****/
   /* ***   sy2clrid                                          ****/
   /* ***   xdmcd                                             ****/
   /* ***   xqacd                                             ****/
   /* ***   xsdcd                                             ****/
   /* ***   xsacd                                             ****/
   /* ***   xslcd                                             ****/
   /* ***   xpgcd                                             ****/
   /* ***   xumcd                                             ****/
   /* ***   sy5szid                                           ****/
   /* ************************************************************/

  SLSREC.SLSFNC = "S1";

  call "VRLITM02" (SLSREC, SQLCA, VRLITM02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "XSRM02S1";
    TA1REC.TA1LOCAT[1] = "VRLITM02";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VRLITM02";
    TA1REC.TA1TBLKE = VRLITM02.VRLITM02-KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* *** note: fetch sgrp handles all return codes correctly ****/
   /* ************************************************************/

  XSSLS-N1-VRLITM02(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSLS-S1-VRLITM02

// setinq : rcv log itm : 3
Function XSSLS-S3-VRLITM02()


   /* ************************************************************/
   /* *** select set of rows from:  receiving log itm         ****/
   /* *** using the std module:  VRLITM02                     ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique field values for:            ****/
   /* ***   xwhcd                                             ****/
   /* ***   ts3cntnr                                          ****/
   /* ***   sl2palet                                          ****/
   /* ***   sl2case                                           ****/
   /* ***   pd1ponbr                                          ****/
   /* ***   xgpcd                                             ****/
   /* ***   sy1stnbr                                          ****/
   /* ***   sy2clrid                                          ****/
   /* ***   xdmcd                                             ****/
   /* ***   xqacd                                             ****/
   /* ***   xsdcd                                             ****/
   /* ***   xsacd                                             ****/
   /* ***   xpgcd                                             ****/
   /* ***   xumcd                                             ****/
   /* ***   xowcd                                             ****/
   /* ***   xslcd                                             ****/
   /* *** the following may be used with a wild card (*):     ****/
   /* ***   none                                              ****/
   /* *** the order by for this select set is:                ****/
   /* ***   xwhcd                                             ****/
   /* ***   ts3cntnr                                          ****/
   /* ***   sl2palet                                          ****/
   /* ***   sl2case                                           ****/
   /* ***   pd1ponbr                                          ****/
   /* ***   xgpcd                                             ****/
   /* ***   sy1stnbr                                          ****/
   /* ***   sy2clrid                                          ****/
   /* ***   xdmcd                                             ****/
   /* ***   xqacd                                             ****/
   /* ***   xsdcd                                             ****/
   /* ***   xsacd                                             ****/
   /* ***   xpgcd                                             ****/
   /* ***   xumcd                                             ****/
   /* ***   xowcd                                             ****/
   /* ***   xslcd                                             ****/
   /* ***   sy5szid                                           ****/
   /* *** note: order is the same as select plus size         ****/
   /* ************************************************************/

  SLSREC.SLSFNC = "S3";

  call "VRLITM02" (SLSREC, SQLCA, VRLITM02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "XSRM02S3";
    TA1REC.TA1LOCAT[1] = "VRLITM02";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VRLITM02";
    TA1REC.TA1TBLKE = VRLITM02.VRLITM02-KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* *** note: fetch handles return code correctly           ****/
   /* ************************************************************/

  XSSLS-N3-VRLITM02(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSLS-S3-VRLITM02

// setinq : rcv log itm : 4
Function XSSLS-S4-VRLITM02()


   /* ************************************************************/
   /* *** select set of rows from:  receiving log itm         ****/
   /* *** using the std module:  VRLITM02                     ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique field values for:            ****/
   /* ***   xwhcd                                             ****/
   /* ***   ts3cntnr                                          ****/
   /* *** the following may be used with a wild card (*):     ****/
   /* ***   sl2palet                                          ****/
   /* ***   sl2case                                           ****/
   /* *** the order by for this select set is:                ****/
   /* ***   xwhcd                                             ****/
   /* ***   ts3cntnr                                          ****/
   /* ***   sl2palet                                          ****/
   /* ***   sl2case                                           ****/
   /* ************************************************************/

  SLSREC.SLSFNC = "S4";

  call "VRLITM02" (SLSREC, SQLCA, VRLITM02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "XSRM02S4";
    TA1REC.TA1LOCAT[1] = "RLITM02 ";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VRLITM02";
    TA1REC.TA1TBLKE = VRLITM02.VRLITM02-KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* *** note: fetch handles return code correctly           ****/
   /* ************************************************************/

  XSSLS-N4-VRLITM02(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSLS-S4-VRLITM02

// setinq : rcv log itm : 5
Function XSSLS-S5-VRLITM02()


   /* ************************************************************/
   /* *** select set of rows from:  receiving log itm         ****/
   /* *** using the std module:  VRLITM02                     ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique field values for:            ****/
   /* ***   xwhcd                                             ****/
   /* ***   ts3cntnr                                          ****/
   /* ***   pd1ponbr                                          ****/
   /* ***   xgpcd                                             ****/
   /* ***   sy1stnbr                                          ****/
   /* ***   sy2clrid                                          ****/
   /* ***   xdmcd                                             ****/
   /* ***   xqacd                                             ****/
   /* *** the following may be used with a wild card (*):     ****/
   /* ***   xsdcd                                             ****/
   /* ***   xsacd                                             ****/
   /* ***   xpgcd                                             ****/
   /* ***   xumcd                                             ****/
   /* ***   xowcd                                             ****/
   /* ***   xslcd                                             ****/
   /* *** the following must have separate ranges entered:    ****/
   /* ***   sl2palet                                          ****/
   /* ***   sl2case                                           ****/
   /* *** the order by for this select set is:                ****/
   /* ***   none                                              ****/
   /* *** note: the order is not used re: all will be         ****/
   /* ***       updated with the same change                  ****/
   /* ************************************************************/

  SLSREC.SLSFNC = "S5";

  call "VRLITM02" (SLSREC, SQLCA, VRLITM02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "XSRM02S5";
    TA1REC.TA1LOCAT[1] = "VRLITM02";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VRLITM02";
    TA1REC.TA1TBLKE = VRLITM02.VRLITM02-KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* *** note: fetch handles return code correctly           ****/
   /* ************************************************************/

  XSSLS-N5-VRLITM02(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSLS-S5-VRLITM02

// replace : rcv log itm : 0
Function XSSLS-U-VRLITM02()


   /* ************************************************************/
   /* *** replace unique row in:  receiving log itm           ****/
   /* *** using the std module:  VRLITM02                     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = concurrent update - re:                    ****/
   /* ***          deleted since last read (rec blanked out)  ****/
   /* ***          updated since last read (new data in rec)  ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** replace row                                         ****/
   /* *** note: IO process increments record zzzchgct by +1   ****/
   /* ***       but ID's row to update by the old zzzchgct    ****/
   /* ************************************************************/

  VRLITM02.ZZ-CHNG-DT = X2CREC.X2CCURDT;
  VRLITM02.ZZ-CHNG-HHMM = X3CREC.X3CCURST;

  SLSREC.SLSFNC = "U ";

  call "VRLITM02" (SLSREC, SQLCA, VRLITM02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
     /* ************************************************************/
     /* *** select the original row without a change count      ****/
     /* *** note: select unique does NOT use zzzchgct           ****/
     /* *** note: this puts current version of data in record   ****/
     /* ***       or blank out record layout = deleted          ****/
     /* ************************************************************/
    XSSLS-S-VRLITM02(); /* * <=== select unique row*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
      return;
    end
    if (SQLCA.VAGen_SQLCODE == +100)
      VRLITM02.VRLITM02-DATA = " ";
      return;
    end
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSRLM02U";
  TA1REC.TA1LOCAT[1] = "VRLITM02 ";
  TA1REC.TA1LOCAT[3] = "REPLACE ";
  TA1REC.TA1LOCAT[4] = "ROW     ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VRLITM02";
  TA1REC.TA1TBLKE = VRLITM02.VRLITM02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSLS-U-VRLITM02

// validate area/zone
Function XSSLSV4()


   /* ************************************************************/
   /* *** since valid area, area/zone record must exist       ****/
   /* ************************************************************/

  SLWREC.SLWVERSW = "N";

  XSSL4I0(); /* <=== select area/zone*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    SLWREC.SLWVERSW = "Y";
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.XXXLOCID = "SV4A";
      SLWREC.SLWMSGNO = 0035; /* <--- invalid a/zone msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.SLWSKYSW = "N";
      SLWREC.XXXLOCID = "SV4B";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811)
      SLWREC.XXXLOCID = "SV4C";
      SLWREC.SLWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
      return;
    end
    SLWREC.XXXLOCID = "SV4D";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSLSV4

// validate location
Function XSSLSV5()


   /* ************************************************************/
   /* *** since valid area/zone, location record must exist   ****/
   /* ************************************************************/

  SLWREC.SLWVERSW = "N";

  XSSL5I0(); /* <=== select location*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    SLWREC.SLWVERSW = "Y";
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.XXXLOCID = "SV5A";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.SLWSKYSW = "N";
      SLWREC.XXXLOCID = "SV5B";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811)
      SLWREC.XXXLOCID = "SV5C";
      SLWREC.SLWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
      return;
    end
    SLWREC.XXXLOCID = "SV5D";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSLSV5

// validate setaside ID
Function XSSLSVF()


   /* ************************************************************/
   /* *** setaside number must already exist                  ****/
   /* ************************************************************/

  SLWREC.SLWVERSW = "N";

  XSINAI0(); /* <=== select setaside #*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* ** next sentence ***/
  else
    SLWREC.SLWVERSW = "Y";
    if (SQLCA.VAGen_SQLCODE == +100)
      SLWREC.XXXLOCID = "SVFA";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911)
      SLWREC.SLWSKYSW = "N";
      SLWREC.XXXLOCID = "SVFB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -811)
      SLWREC.XXXLOCID = "SVFC";
      SLWREC.SLWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
      return;
    end
    SLWREC.XXXLOCID = "SVFD";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSLSVF

// validate owner group
Function XSSLSVO()


   /* ************************************************************/
   /* *** if whse owner group flag set (=Y): use ow table     ****/
   /* *** owner group must be zero for all other whses        ****/
   /* ************************************************************/

  SLWREC.SLWVERSW = "N";

  if (SLWREC.XWHOWNGF == "Y")
     /* ************************************************************/
     /* *** if owner group cd in tbl & active: put abrv. on map ****/
     /* ************************************************************/
    if (SLWREC.SLWTBLKY in XOWTBL.XOWKEY)
      if (XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        return;
      else
        SLWREC.SLWVERSW = "Y";
        SLWREC.XXXLOCID = "SVOA";
        SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
        return;
      end
    else
      SLWREC.SLWVERSW = "Y";
      SLWREC.XXXLOCID = "SVOB";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      return;
    end
  else
    if (SLWREC.SLWTBLCD != "00")
      SLWREC.SLWVERSW = "Y";
      SLWREC.XXXLOCID = "SVOC";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      return;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSLSVO

//*** RECORD=SL0CW01 ****
// ************************************************************
// 
//           STOCK LOCATE MAINTENANCE SKELETON
//           =================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used for specific
//           application/function purposes.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 03-25-86  Ward Jones   created
// 09-09-89  Rob Yonker   added switches and counters
// 01-29-90  Rob Yonker   added fields for po id
// 06-06-90  Rob Yonker   added po entered flag
// 02-20-01  sriram sethuraman added sap po number field
// 04-19-01  sriram       added VRCVPH01-CHECK-FLAG,
//                        added po-entered-flag
//                        added sap-po-entered-flag
//                        added vrcvph01-check-flag
// ************************************************************
// ************************************************************
// ***********************
Record SL0CW01 type basicRecord
  10 SL0CWLK1 SL0CWLK1 ; 
    15 XWHCD XWHCD ; 
    15 TS3CNTNR TS3CNTNR ; 
  10 SL0CWXSW SL0CWXSW ; 
  10 SL0CWFSW SL0CWFSW ; 
  10 SL0CWSVE SL0CWSVE ; 
  10 SL0CWERW SL0CWERW ; 
  10 SL0CWERS SL0CWERS ; 
  10 SL0CWARS SL0CWARS ; 
  10 SL0CWRS1 SL0CWRS1 ; 
  10 SL0CWRS2 SL0CWRS2 ; 
  10 SL0CWRS3 SL0CWRS3 ; 
  10 SL0CWRS4 SL0CWRS4 ; 
  10 SL0CWCP1 SL0CWCP1 ; 
  10 SL0CWCP2 SL0CWCP2 ; 
  10 SL0CWCP3 SL0CWCP3 ; 
  10 SL0CWCP4 SL0CWCP4 ; 
  10 SL0CWECT SL0CWECT ; 
  10 SL0CWSIX SL0CWSIX ; 
  10 SL2PALET SL2PALET ; 
  10 SL0CWPPT SL0CWPPT ; 
  10 SL0CWPLT SL0CWPLT ; 
  10 SL2CASE SL2CASE ; 
  10 SL0CWPCS SL0CWPCS ; 
  10 SL0CWCAS SL0CWCAS ; 
  10 SY4IDDSC SY4IDDSC ; 
  10 SL0CWPS1 SL0CWPS1 ; 
  10 SL0CWPS2 SL0CWPS2 ; 
  10 SL0CWPS3 SL0CWPS3 ; 
  10 SL0CWPS4 SL0CWPS4 ; 
  10 SL2RCVD SL2RCVD ; 
  10 SL0CWTQY SL0CWTQY ; 
  10 SL0CWID1 SL0CWID1 ; 
  10 SL0CWID2 SL0CWID2 ; 
  10 SL0CWID3 SL0CWID3 ; 
  10 SL0CWID4 SL0CWID4 ; 
  10 SL0CWTST SL0CWTST ; 
  10 SL0CWPID SL0CWPID ; 
    15 SL0CWPDT SL0CWPDT ; 
    15 SL0CWFAC SL0CWFAC ; 
  10 SL0CWFPI SL0CWFPI ; 
    15 SL0CWFYR SL0CWFYR ; 
      20 SL0CWFYD SL0CWFYD ; 
      20 SL0CWFYY SL0CWFYY ; 
    15 SL0CWFMD SL0CWFMD ; 
  10 SL0CWAPI SL0CWAPI ; 
    15 SL0CWASE SL0CWASE ; 
    15 SL0CWAFL SL0CWAFL ; 
  10 SL0CWCMR SL0CWCMR ; 
    15 SL0CWCML SL0CWCML ; 
    15 SL0CWCCN SL0CWCCN ; 
    15 SL0CWCYR SL0CWCYR ; 
    15 SL0CWCMD SL0CWCMD ; 
  10 SL0CWNMR SL0CWNMR ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 SL0CWSPN SL0CWSPN ; 
  10 SL0CWPNT SL0CWPNT ; 
  10 PC-SAP-PO-NBR PC-SAP-PO-NBR ; 
  10 VRCVPH01-CHECK-FLAG VRCVPH01-CHECK-FLAG ; 
  10 SL0CW-PO-ENTERED-FL SL0CW-PO-ENTERED-FL ; 
  10 SAP-PO-ENTERED-FLAG SAP-PO-ENTERED-FLAG ; 
  10 YMTCD YMTCD ; 
  10 SL0CWPAL SL0CWPAL ; 
    15 SL0CWPAI SL0CWPAI [5] ; 
  10 SLCIDX08 SLCIDX08 ; 
end // end SL0CW01

//*** RECORD=SL0CW02 ****
// ************************************************************
// 
//           STOCK LOCATE MAINTENANCE SKELETON
//           =================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used for specific
//           application/function purposes.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-86  Ward Jones   created
// 01-29-90  rob yonker   added fields for po id
// 06-06-90  rob yonker   added po entered flag
// 02-25-01 sriram sethuraman added sap po number field
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0CW02 type basicRecord
  10 SL0CWLK2 SL0CWLK2 ; 
    15 XMSLMOPT XMSLMOPT ; 
    15 XWHCD XWHCD ; 
    15 TS3CNTNR TS3CNTNR ; 
    15 IN7STNBR IN7STNBR ; 
    15 SL2PALET SL2PALET ; 
    15 SL2CASE SL2CASE ; 
    15 PC3PONBR PC3PONBR ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 XSDCD XSDCD ; 
    15 XSLCD XSLCD ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
    15 XOWCD XOWCD ; 
  10 XLCCD XLCCD ; 
  10 SY1UNPCS SY1UNPCS ; 
  10 SL0CWIAS SL0CWIAS ; 
  10 SL0CWICS SL0CWICS ; 
  10 SL0CWIDS SL0CWIDS ; 
  10 SL0CWSUM SL0CWSUM ; 
  10 SL0CWTOT SL0CWTOT ; 
  10 SL0CWTQY SL0CWTQY ; 
  10 SL0CWREM SL0CWREM ; 
  10 SL0CWFSW SL0CWFSW ; 
  10 SL0CWSIX SL0CWSIX ; 
  10 SY5SZID SY5SZID [33] ; 
  10 SY4IDDSC SY4IDDSC ; 
  10 SL0CWPSD SL0CWPSD ; 
  10 ZZZCHGCT ZZZCHGCT [33] ; 
  10 SL0CWPID SL0CWPID ; 
    15 SL0CWPDT SL0CWPDT ; 
    15 SL0CWFAC SL0CWFAC ; 
  10 SL0CWFPI SL0CWFPI ; 
    15 SL0CWFYR SL0CWFYR ; 
      20 SL0CWFYD SL0CWFYD ; 
      20 SL0CWFYY SL0CWFYY ; 
    15 SL0CWFMD SL0CWFMD ; 
  10 SL0CWAPI SL0CWAPI ; 
    15 SL0CWASE SL0CWASE ; 
    15 SL0CWAFL SL0CWAFL ; 
  10 SL0CWCMR SL0CWCMR ; 
    15 SL0CWCML SL0CWCML ; 
    15 SL0CWCCN SL0CWCCN ; 
    15 SL0CWCYR SL0CWCYR ; 
    15 SL0CWCMD SL0CWCMD ; 
  10 SL0CWNMR SL0CWNMR ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 SL0CWSPN SL0CWSPN ; 
  10 SL0CWPNT SL0CWPNT ; 
  10 PC-SAP-PO-NBR PC-SAP-PO-NBR ; 
  10 YMTCD YMTCD ; 
end // end SL0CW02

//*** RECORD=SL0CW03 ****
// ************************************************************
// 
//           STOCK LOCATE MAINTENANCE SKELETON
//           =================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used for specific
//           application/function purposes.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-86  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0CW03 type basicRecord
  10 SL0CWLK3 SL0CWLK3 ; 
    15 XMSLMOPT XMSLMOPT ; 
    15 XWHCD XWHCD ; 
    15 TS3CNTNR TS3CNTNR ; 
    15 SL2PALET SL2PALET ; 
    15 SL2CASE SL2CASE ; 
    15 PD1PONBR PD1PONBR ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 XSDCD XSDCD ; 
    15 XSLCD XSLCD ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
    15 XOWCD XOWCD ; 
end // end SL0CW03

//*** RECORD=SL0CW04 ****
// ************************************************************
// 
//           STOCK LOCATE MAINTENANCE SKELETON
//           =================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used for specific
//           application/function purposes.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-86  Ward Jones   created
// 01-29-90  rob yonker   added po fields
// 06-06-90  rob yonker   added po entered flag
// 02-25-01 sriram sethuraman added sap po number column
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0CW04 type basicRecord
  10 SL0CWLK4 SL0CWLK4 ; 
    15 XWHCD XWHCD ; 
    15 TS3CNTNR TS3CNTNR ; 
    15 IN7STNBR IN7STNBR ; 
    15 PC3PONBR PC3PONBR ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
  10 SL0CWPID SL0CWPID ; 
    15 SL0CWPDT SL0CWPDT ; 
    15 SL0CWFAC SL0CWFAC ; 
  10 SL0CWFPI SL0CWFPI ; 
    15 SL0CWFYR SL0CWFYR ; 
      20 SL0CWFYD SL0CWFYD ; 
      20 SL0CWFYY SL0CWFYY ; 
    15 SL0CWFMD SL0CWFMD ; 
  10 SL0CWAPI SL0CWAPI ; 
    15 SL0CWASE SL0CWASE ; 
    15 SL0CWAFL SL0CWAFL ; 
  10 SL0CWCMR SL0CWCMR ; 
    15 SL0CWCML SL0CWCML ; 
    15 SL0CWCCN SL0CWCCN ; 
    15 SL0CWCYR SL0CWCYR ; 
    15 SL0CWCMD SL0CWCMD ; 
  10 SL0CWNMR SL0CWNMR ; 
  10 PC4ORTYP PC4ORTYP ; 
  10 SL0CWSPN SL0CWSPN ; 
  10 PC-SAP-PO-NBR PC-SAP-PO-NBR ; 
  10 SL0CWPNT SL0CWPNT ; 
end // end SL0CW04

//*** RECORD=SL0CW05 ****
// ************************************************************
// 
//           STOCK LOCATE MAINTENANCE SKELETON
//           =================================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used for specific
//           application/function purposes.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-86  Ward Jones   created
// 09-23-88  Ward Jones   added (time) update type flag
// 01-31-90  rob yonker   added batch submit update switch
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0CW05 type basicRecord
  10 SL0CWLK5 SL0CWLK5 ; 
    15 XWHCD XWHCD ; 
    15 TS3CNTNR TS3CNTNR ; 
    15 XOWCD XOWCD ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 XSDCD XSDCD ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
    15 SY5SZID SY5SZID ; 
    15 XSLCD XSLCD ; 
  10 SL0CWDOC SL0CWDOC ; 
    15 * char(8) ; 
    15 IN5TRPRT IN5TRPRT ; 
  10 SL0CWSZT SL0CWSZT ; 
  10 SL0CWSZQ SL0CWSZQ ; 
  10 INBSAQTG INBSAQTG ; 
    15 INBSAQTY INBSAQTY [40] ; 
  10 IN6TQTS IN6TQTS ; 
    15 IN6TQT IN6TQT [40] ; 
  10 SL0CWGRP SL0CWGRP ; 
    15 IN8SRQ IN8SRQ [40] ; 
  10 SL0CWDTE SL0CWDTE ; 
    15 SL0CWCCC SL0CWCCC ; 
    15 SL0CWSDT SL0CWSDT ; 
  10 IN7STNBR IN7STNBR ; 
  10 SL0CWNUM SL0CWNUM ; 
    15 SL0CWCHA SL0CWCHA ; 
  10 SL0CWSAI SL0CWSAI ; 
  10 SL0CWUFL SL0CWUFL ; 
  10 XSNBDT XSNBDT ; 
  10 XSECD XSECD ; 
  10 XSNYR XSNYR ; 
  10 SL0CWSYR SL0CWSYR ; 
  10 SL0CWFL1 SL0CWFL1 ; 
  10 SL0CWFL2 SL0CWFL2 ; 
  10 SL0CWFL3 SL0CWFL3 ; 
  10 SL0CWFL4 SL0CWFL4 ; 
  10 SL0CWFL6 SL0CWFL6 ; 
  10 SL0CWDT1 SL0CWDT1 ; 
    15 SL0CWDT0 SL0CWDT0 ; 
    15 SL0CWDT2 SL0CWDT2 ; 
  10 SL0CWDT3 SL0CWDT3 [8] ; 
  10 SL0CWDT4 SL0CWDT4 [8] ; 
  10 SL0CWQTY SL0CWQTY ; 
  10 XLCCD XLCCD ; 
  10 SL0CWUPS SL0CWUPS ; 
end // end SL0CW05

//*** RECORD=SLEREC ****
// ****************  stock locate table  **********************
// 
// TABLE NAME:          receiving log tag (file)
//                      - tags(ID's) of all daily receipts
// 
// DB2 TABLE:           dstloc.vrltag01
// 
// COPYLIB MEMBER:      dcl00???
// 
// KEY TO DB2 TABLE:    xwhcd
//                      container
// 
// MAINTENANCE LOG:
// 
// DATE      NAME       COMMENTS
// --------  ---------  ------------------------------------
// 06-05-87  W. Jones   created csp record
// ************************************************************
// **********************
Record SLEREC type basicRecord
  5 SLEDATA SLEDATA ; 
    10 SLEKEY SLEKEY ; 
      15 XWHCD XWHCD ; 
      15 TS3CNTNR TS3CNTNR ; 
    10 ZZZSDT ZZZSDT ; 
end // end SLEREC

//*** RECORD=SLGREC ****
// ****************  stock locate table  **********************
// 
// TABLE NAME:          receipt log exception table
// 
// DB2 TABLE:           dstloc.vrlxcp01
// 
// COPYLIB MEMBER:      dcl00765
// 
// MAINTENANCE LOG:
// 
// DATE      NAME       COMMENTS
// --------  ---------  ------------------------------------
// 08-29-89  R. Yonker  created csp record
// ************************************************************
// **********************
Record SLGREC type basicRecord
  5 SLGDATA SLGDATA ; 
    10 XWHCD XWHCD ; 
    10 XGPCD XGPCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 XOWCD XOWCD ; 
    10 XSDCD XSDCD ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 XSLCD XSLCD ; 
    10 XLCCD XLCCD ; 
    10 XDVCD XDVCD ; 
    10 SY5SZID SY5SZID ; 
    10 SL2RCVD SL2RCVD ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZSTM ZZZSTM ; 
end // end SLGREC

DataItem SAP-PO-ENTERED-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL0CW-PO-ENTERED-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// apparel po date filler
DataItem SL0CWAFL char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// apparel po id date
DataItem SL0CWAPI char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// attribute reset switch (y/n)
DataItem SL0CWARS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// apparel po id season
DataItem SL0CWASE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// previous case number
DataItem SL0CWCAS char(8)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// current date century (CC)
DataItem SL0CWCCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// char mon rng century
DataItem SL0CWCCN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// character stock xfer no.
DataItem SL0CWCHA char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// char mon rng month/day
DataItem SL0CWCMD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// char mon rng fill
DataItem SL0CWCML char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// char mon rng date
DataItem SL0CWCMR char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cursor position switch 1
DataItem SL0CWCP1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cursor position switch 2
DataItem SL0CWCP2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cursor position switch 3
DataItem SL0CWCP3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cursor position switch 4
DataItem SL0CWCP4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// char mon rng year
DataItem SL0CWCYR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// audit tran doc nbr (num)
DataItem SL0CWDOC num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// leading zero
DataItem SL0CWDT0 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date (0ccyymmdd)
DataItem SL0CWDT1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date (ccyymmdd)
DataItem SL0CWDT2 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin date for compare
DataItem SL0CWDT3 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end date for compare
DataItem SL0CWDT4 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date (CCYYMMDD)
DataItem SL0CWDTE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// row error count
DataItem SL0CWECT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// error sw used like slwerrsw
DataItem SL0CWERS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error record writen sw (y/n)
DataItem SL0CWERW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po id factory code
DataItem SL0CWFAC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// season control flag
DataItem SL0CWFL6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// footware po id mon/day
DataItem SL0CWFMD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// footware po id date
DataItem SL0CWFPI char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first-time switch (y/n)
DataItem SL0CWFSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// footware po id decade
DataItem SL0CWFYD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// footware po id year
DataItem SL0CWFYR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// footware po id digit
DataItem SL0CWFYY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// all audit stock xfer qtys
DataItem SL0CWGRP char(160)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// item add switch (y/n)
DataItem SL0CWIAS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// item change switch (y/n)
DataItem SL0CWICS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size id #1
DataItem SL0CWID1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size id #2
DataItem SL0CWID2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size id #3
DataItem SL0CWID3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size id #4
DataItem SL0CWID4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// item delete switch (y/n)
DataItem SL0CWIDS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// complete last key
DataItem SL0CWLK1 char(16)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// complete last key
DataItem SL0CWLK2 char(65)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// complete last key
DataItem SL0CWLK3 char(65)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// complete last key
DataItem SL0CWLK4 char(39)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// complete last key
DataItem SL0CWLK5 char(45)  {
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// num mon rng date
DataItem SL0CWNMR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric stock xfer no.
DataItem SL0CWNUM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SL0CWPAI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SL0CWPAL char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// previous case number
DataItem SL0CWPCS char(8)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// po id date
DataItem SL0CWPDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po id
DataItem SL0CWPID char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// previous palet number
DataItem SL0CWPLT char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// po entered flag
DataItem SL0CWPNT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// previous palet number
DataItem SL0CWPPT char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// previous size #1 desc
DataItem SL0CWPS1 char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// previous size #2 desc
DataItem SL0CWPS2 char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// previous size #3 desc
DataItem SL0CWPS3 char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// previous size #4 desc
DataItem SL0CWPS4 char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// previous size description
DataItem SL0CWPSD char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// qty work field
DataItem SL0CWQTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work total remainder
DataItem SL0CWREM num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// reset switch 1 (y/n)
DataItem SL0CWRS1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// reset switch 2 (y/n)
DataItem SL0CWRS2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// reset switch 3 (y/n)
DataItem SL0CWRS3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// reset switch 4 (y/n)
DataItem SL0CWRS4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// numeric setaside id
DataItem SL0CWSAI num(13)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date (YYMMDD)
DataItem SL0CWSDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved index
DataItem SL0CWSIX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// saved PC_PO_NBR
DataItem SL0CWSPN int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// net adj. per size
DataItem SL0CWSUM num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// severe error switch (y/n)
DataItem SL0CWSVE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work season year
DataItem SL0CWSYR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// size qty accumulator (sas)
DataItem SL0CWSZQ num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// size qty accumulator
DataItem SL0CWSZT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// work adj.s total
DataItem SL0CWTOT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work total qty
DataItem SL0CWTQY num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved whse ezetst value
DataItem SL0CWTST smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// do online updates flag(y/n)
DataItem SL0CWUFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// batch submit update sw
DataItem SL0CWUPS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// exit/skip switch (y/n)
DataItem SL0CWXSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SLCIDX08 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// entire rcvg log tag data row
DataItem SLEDATA char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// rcvg log tag table key
DataItem SLEKEY char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// entire recept log except row
DataItem SLGDATA char(45)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem VRCVPH01-CHECK-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// function's option
DataItem XMSLMOPT char(1)  {
  align = left, fillCharacter = " ", inputRequired = no
}
end

