package sl0g;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
//*** PROGRAM=SL0G ****
// ************************************************************
// 
//           WORK ORDER  INQUIRY/PRINT(S)
//           =============================
// 
// ************************************************************
// 
// OVERVIEW: This application is intended to transfer control
//           to other applications and/or functions within its
//           application depending on the selction number
//           entered on the map or passed via fast path's
//           item area (first character only).
// 
//           notes:
//             1) selection number (since single digit) is
//                setup as a character type field in order to
//                make the use of CAITEM easier as well as
//                easier for the user and program to deal
//                with the map field.
// 
//           This application will make use of fixed maps
//           (i.e. for header info) and floating maps for
//           summary & detailed info for a specific selection.
// 
//           The work order list print will cause the selected
//           work order information to be printed.
// 
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// 00  02/03/87  Chuck Beer  created
// 01  01/06/88  D. Kenny    Deleted default printer selection
// 02  11/14/88  W. Jones    fix printer limit abend
// 03  11/15/88  J. Wood     added xssegtr logic
// 04  05/23/89  E. Smith    Added sort by location (sl0gm510)
// 05  04/04/90  kande1      replace xsdtbl with pc2rec and
//                           io3340
// 06  10/09/90  sjohns      db2 table changes:
//                             - xrocd increased to 4 bytes
//                               so end of table is now 9999
// sl82 10/17/90 sjohns      allow report to generate when
//                           location is not valid
// SL#0 10/09/91 SPOPA       Change "Allow Implicits" to NO.
// SL#0 01/16/92 jwood       added init of all w/s .........
// 0000 01/25/94 S.JOB       Change the joblib concatenation
//                           to standards when calling TA0070.
// 
// I/O Modules:
// ===========
// 
// NAME      DESCRIPTION
// --------  --------------------------------------------------
// io3340    pc2rec pc-cu-in-seg (cd, abrv, desc) pcrinseg
//           from dprodc.vprdcu01
// 
// ************************************************************
// ************************************************************
// *********************
Program SL0G type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PC2REC PC2REC; // record
  SL0GW01 SL0GW01; // record
  SL0GW02 SL0GW02; // record
  SL0GW03 SL0GW03; // record
  SL0GW04 SL0GW04; // record
  SL0GW05 SL0GW05; // record
  SL5REC SL5REC; // record
  SL8REC SL8REC; // record
  SLBREC SLBREC; // record
  SLUREC SLUREC; // record
  SLVREC SLVREC; // record
  SLWREC SLWREC; // record
  SLYREC SLYREC; // record
  SQLCA SQLCA; // record
  SYCREC SYCREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  UT1REC UT1REC; // record
  X2CREC X2CREC; // record
  X3CREC X3CREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDMTBL; // table
  use XGPTBL; // table
  use XLCTBL; // table
  use XOWTBL; // table
  use XPGTBL; // table
  use XQATBL; // table
  use XROTBL; // table
  use XSLTBL; // table
  use XUMTBL; // table
  use XWHTBL; // table
  use YWSTBL; // table
  use YWTTBL; // table
  use SL0GM.SL0GM010,  // forms
      SL0GM.SL0GM110, 
      SL0GM.SL0GM210, 
      SL0GM.SL0GM310, 
      SL0GM.SL0GM410, 
      SL0GM.SL0GM510
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    SL0G010: SL0G010();


     /* ************************************************************/
     /* *** if the map selection no. setup:                     ****/
     /* *** use it to go directly to selection (skip converse)  ****/
     /* ************************************************************/

    if (SL0GM010.XMSLMSNO > " ")
      if (SL0GM010.XMSLMSNO == "1")
        goto SL0G110; /* <=== new function*/
      end
      if (SL0GM010.XMSLMSNO == "2")
        goto SL0G210; /* <=== new function*/
      end
      if (SL0GM010.XMSLMSNO == "3")
        goto SL0G310; /* <=== new function*/
      end
      if (SL0GM010.XMSLMSNO == "4")
        goto SL0G410; /* <=== new function*/
      end
      if (SL0GM010.XMSLMSNO == "5")
        goto SL0G510; /* <=== new function*/
      end
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "010Z";
      SLWREC.SLWMSGNO = 0017; /* <--- invalid selection msg*/
      set SL0GM010.XMSLMSNO cursor, bold;
      goto SL0G020; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "020 "; /* error id location id*/
    goto SL0G020; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    SL0G020: SL0G020();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0G010; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0G110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0G210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0G310; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0G410; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf17)
      goto SL0G510; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0G020; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      if (SL0GM010.XMSLMSNO == "1")
        goto SL0G110; /* <=== new function*/
      end
      if (SL0GM010.XMSLMSNO == "2")
        goto SL0G210; /* <=== new function*/
      end
      if (SL0GM010.XMSLMSNO == "3")
        goto SL0G310; /* <=== new function*/
      end
      if (SL0GM010.XMSLMSNO == "4")
        goto SL0G410; /* <=== new function*/
      end
      if (SL0GM010.XMSLMSNO == "5")
        goto SL0G510; /* <=== new function*/
      end
       /* ************************************************************/
       /* *** note: invalid selection is detected at this point   ****/
       /* ************************************************************/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "020Y";
      SLWREC.SLWMSGNO = 0017; /* <--- invalid selection msg*/
      set SL0GM010.XMSLMSNO cursor, bold;
      goto SL0G020; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0G020; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    SL0G110: SL0G110();


     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "120 "; /* error id location id*/
    goto SL0G120; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    SL0G120: SL0G120();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0G110; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0GM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0G020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0G110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0G210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0G310; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0G410; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf17)
      goto SL0G510; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0G120; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      goto SL0G120; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0G120; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    SL0G210: SL0G210();


     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "220 "; /* error id location id*/
    goto SL0G220; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    SL0G220: SL0G220();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0G210; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0GM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0G020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0G110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0G210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0G310; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0G410; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf17)
      goto SL0G510; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0G220; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      goto SL0G220; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0G220; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    SL0G310: SL0G310();


     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "320 "; /* error id location id*/
    goto SL0G320; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    SL0G320: SL0G320();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0G310; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0GM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0G020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0G110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0G210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0G310; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0G410; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf17)
      goto SL0G510; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0G320; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if special exit switch: go to related function      ****/
     /* ************************************************************/

    if (SLWREC.SLWSEXSW == "Y")
      goto SL0G320; /* <=== start related function*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      goto SL0G320; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0G320; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    SL0G410: SL0G410();


     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "420 "; /* error id location id*/
    goto SL0G420; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    SL0G420: SL0G420();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0G410; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0GM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0G020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0G110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0G210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0G310; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0G410; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf17)
      goto SL0G510; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0G420; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      goto SL0G420; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0G420; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    SL0G510: SL0G510();


     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "520 "; /* error id location id*/
    goto SL0G520; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    SL0G520: SL0G520();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0G510; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0GM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0G020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0G110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0G210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0G310; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0G410; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf17)
      goto SL0G510; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0G520; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is enter)
      goto SL0G520; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "520Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0G520; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


  end // end main
end // end SL0G

// one time initializations
Function SL0G010()


   /* ************************************************************/
   /* *** standard security checking                          ****/
   /* *** note: comment out if exec'g from your msl           ****/
   /* ************************************************************/

  XSENTRY();

   /* ************************************************************/
   /* *** standard segmented trans id setting                 ****/
   /* ************************************************************/

  XSSEGTR();

   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0GM010 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0GM110 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0GM210 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0GM310 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0GM410 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0GM510 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set PC2REC empty; /**/
  set SLBREC empty; /**/
  set SLUREC empty; /**/
  set SLVREC empty; /**/
  set SLWREC empty; /* common working storage fields*/
  set SLYREC empty; /**/
  set SL0GW01 empty; /**/
  set SL0GW02 empty; /**/
  set SL0GW03 empty; /**/
  set SL0GW04 empty; /**/
  set SL0GW05 empty; /**/
  set SL5REC empty; /**/
  set SL8REC empty; /**/
  set SYCREC empty; /**/
  set TA1REC empty; /* TA0020 record*/
  set TA2REC empty; /* TA0020 record*/
  set UT1REC empty; /**/
  set X2CREC empty; /* common date routine record*/
  set X3CREC empty; /* common time routine record*/
  set SQLCA empty; /* SQL returned data record*/
  set ERRSQLCA empty; /* TA0020 version of SQLCA*/

   /* ************************************************************/
   /* *** maintenance information:                            ****/
   /* *** =======================                             ****/
   /* *** rvsn   date    update by:    description:           ****/
   /* *** ---- --------  ------------  ---------------------- ****/
   /* ***  00  02/02/87  c. beer       created                ****/
   /* ***  01  01/06/88  D. Kenny      Deleted default printer****/
   /* ***                              selection              ****/
   /* ***  02  11/14/88  W. Jones      fix printer limit abend****/
   /* ***  03  11/15/88  J. Wood       added xssegtr logic    ****/
   /* ************************************************************/

  SLWREC.XXXRVNBR = "03";

  SLWREC.XXXMAPNM = "SL0GM010";
  SLWREC.XXXTITLE = "WORK ORDER REPORT PRINT MENU";

  XSX2CDT();

  SLWREC.XXXAPPID = "SL0G"; /* error id appl. name*/
  SLWREC.SLWTALOC = "SL0G010 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0GM010"; /* TA0020 current map name*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* special error switch*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed during resets and for multiple levels     ****/
   /* ************************************************************/

  SL0GM010.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0GM010.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0GM010.XXXTITLE = SLWREC.XXXTITLE;
  SL0GM010.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** check commarea fast path item to see if it should   ****/
   /* *** be used to setup working storage &/or map fields    ****/
   /* ************************************************************/

  if (COMMAREA.CAITEM > " ")
    SL0GSY0(); /* <=== use commarea item*/
    COMMAREA.CAITEM = " ";
  end

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end SL0G010

// converse & control key entry
Function SL0G020()


  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0GM010.XXXERRID = SLWREC.XXXERRID;


  converse SL0GM010 ;


   /* ************************************************************/
   /* *** commented EZECLOS code to be used ONLY in test      ****/
   /* *** in order to end application without canceling it    ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf9)
    exit program;
  end

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020A";
    SLWREC.SLWMSGNO = 0;
    SL0GM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020B";
    SLWREC.SLWMSGNO = 0;
    SL0GM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020C";
    SLWREC.SLWMSGNO = 0;
    SL0GM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020D";
    SLWREC.SLWMSGNO = 0;
    SL0GM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0GM010.CATOAP > " ")
    COMMAREA.CATOAP = SL0GM010.CATOAP;
    COMMAREA.CAITEM = SL0GM010.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020E";
    SLWREC.SLWMSGNO = 0;
    SL0GM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0GM010.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0GM010.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "020 ";
  set SL0GM010.CATOAP initialAttributes;
  set SL0GM010.CAITEM initialAttributes;
  set SL0GM010.XMSLMSNO cursor, initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0GM010.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0GM010.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0GSH0(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17)
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "020I";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0G020

// one time initializations
Function SL0G110()


   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0GM110 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0GW01 empty; /* appl. working storage area*/

  SLWREC.XXXMAPNM = "SL0GM110";
  SLWREC.XXXTITLE = "WORK ORDER REPORT BY LOCATION";

  SLWREC.SLWTALOC = "SL0G110 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0GM110"; /* TA0020 current map name*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* saved msg no.*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0GM110.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0GM110.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0GM110.XXXTITLE = SLWREC.XXXTITLE;
  SL0GM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  SL0GM110.XWHCD = COMMAREA.XWHCD;

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "E";
  TA2REC.TA2GRGEN = X2CREC.X2CCURSD;
  call "TA0040" (TA2REC) {isNoRefresh = yes};

  if (TA2REC.TA2RTNCD == 0)
    SL0GM110.SL0GMFDT = TA2REC.TA2GRGAN;
    SL0GM110.SL0GMTDT = TA2REC.TA2GRGAN;
  end

  SL0GM110.YWSCD = "A ";
  SL0GM110.YWTCD = "A ";

   /* ************************************************************/
   /* *** if whse present: validate whse                      ****/
   /* ***                  save whse                          ****/
   /* ***                  setup printers                     ****/
   /* ************************************************************/

  if (SL0GM110.XWHCD > " ")
    SL0GS1C(); /* <=== whse edit*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
  else
    SLWREC.SLWIDX02 = 1;
    while (SLWREC.SLWIDX02 <= 6)
      set SL0GM110.XMSLMSEL[SLWIDX02] skip, invisible;
      set SL0GM110.XROABRV[SLWIDX02] skip, invisible;
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
    end
    set SL0GM110.SL0GMSEL skip, invisible;
    set SL0GM110.SL0GMPID skip, invisible;
  end

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end SL0G110

// converse & control
Function SL0G120()


   /* ************************************************************/
   /* *** no "before" processing ...                          ****/
   /* *** ... except msg no.  and  error id setup             ****/
   /* ************************************************************/

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0GM110.XXXERRID = SLWREC.XXXERRID;


  converse SL0GM110 ;


   /* ************************************************************/
   /* *** commented EZECLOS code to be used ONLY in test      ****/
   /* *** in order to end application without canceling it    ****/
   /* ************************************************************/

   /* IF EZEAID IS PF9;*/
    /* EZECLOS;*/
   /* END ;*/

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120A";
    SLWREC.SLWMSGNO = 0;
    SL0GM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120C";
    SLWREC.SLWMSGNO = 0;
    SL0GM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120D";
    SLWREC.SLWMSGNO = 0;
    SL0GM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0GM110.CATOAP > " ")
    COMMAREA.CATOAP = SL0GM110.CATOAP;
    COMMAREA.CAITEM = SL0GM110.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120E";
    SLWREC.SLWMSGNO = 0;
    SL0GM110.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0GM110.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0GM110.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "120 ";
  set SL0GM110.CATOAP initialAttributes;
  set SL0GM110.CAITEM initialAttributes;
  set SL0GM110.XARCD cursor;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set SL0GM110.XWHCD initialAttributes;
  set SL0GM110.SL0GMFDT initialAttributes;
  set SL0GM110.SL0GMTDT initialAttributes;
  set SL0GM110.YWSCD initialAttributes;
  set SL0GM110.XARCD initialAttributes;
  set SL0GM110.SL4ZONE initialAttributes;
  set SL0GM110.SL5LOCTN initialAttributes;
  set SL0GM110.YWTCD initialAttributes;

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= 6)
    if (SL0GW01.XROPDEST[SLWIDX01] > " ")
      set SL0GM110.XMSLMSEL[SLWIDX01] initialAttributes;
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

  set SL0GM110.SL0GMSEL initialAttributes;
  set SL0GM110.SL0GMPID initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0GM110.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0GM110.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17)
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0GSH1(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "120I";
  SLWREC.SLWMSGNO = 0004; /* <--- invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0G120

// one time initializations
Function SL0G210()


   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0GM210 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0GW02 empty; /* appl. working storage area*/

  SLWREC.XXXMAPNM = "SL0GM210";
  SLWREC.XXXTITLE = "WORK ORDER REPORT BY PRODUCT";

  SLWREC.SLWTALOC = "SL0G210 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0GM210"; /* TA0020 current map name*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0;

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0GM210.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0GM210.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0GM210.XXXTITLE = SLWREC.XXXTITLE;
  SL0GM210.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  SL0GM210.XWHCD = COMMAREA.XWHCD;

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "E";
  TA2REC.TA2GRGEN = X2CREC.X2CCURSD;
  call "TA0040" (TA2REC) {isNoRefresh = yes};

  if (TA2REC.TA2RTNCD == 0)
    SL0GM210.SL0GMFDT = TA2REC.TA2GRGAN;
    SL0GM210.SL0GMTDT = TA2REC.TA2GRGAN;
  end

  SL0GM210.YWSCD = "A ";
  SL0GM210.YWTCD = "A ";


  SL0GM210.XGPCD = "02";
  SL0GM210.SY2CLRID = "00 ";
  SL0GM210.XDMCD = "00";
  SL0GM210.XQACD = "01";
  SL0GM210.XSDCD = "000";
  SL0GM210.XSLCD = "000";
  SL0GM210.XPGCD = "00";
  SL0GM210.XUMCD = "01";
  SL0GM210.XOWCD = "00";

   /* ************************************************************/
   /* *** if whse present: validate whse                      ****/
   /* ***                  save whse                          ****/
   /* ***                  setup printers                     ****/
   /* ************************************************************/

  if (SL0GM210.XWHCD > " ")
    SL0GS2C(); /* <=== whse edit*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
  else
    SLWREC.SLWIDX02 = 1;
    while (SLWREC.SLWIDX02 <= 6)
      set SL0GM210.XMSLMSEL[SLWIDX02] skip, invisible;
      set SL0GM210.XROABRV[SLWIDX02] skip, invisible;
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
    end
    set SL0GM210.SL0GMSEL skip, invisible;
    set SL0GM210.SL0GMPID skip, invisible;
  end

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end SL0G210

// converse & control
Function SL0G220()


  if (SL0GM210.XWHCD == "  ")
    set SL0GM210.XWHCD cursor;
  end

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0GM210.XXXERRID = SLWREC.XXXERRID;


  converse SL0GM210 ;


   /* ************************************************************/
   /* *** commented EZECLOS code to be used ONLY in test      ****/
   /* *** in order to end application without canceling it    ****/
   /* ************************************************************/

   /* IF EZEAID IS PF9;*/
    /* EZECLOS;*/
   /* END ;*/

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220A";
    SLWREC.SLWMSGNO = 0;
    SL0GM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220C";
    SLWREC.SLWMSGNO = 0;
    SL0GM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220D";
    SLWREC.SLWMSGNO = 0;
    SL0GM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0GM210.CATOAP > " ")
    COMMAREA.CATOAP = SL0GM210.CATOAP;
    COMMAREA.CAITEM = SL0GM210.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220E";
    SLWREC.SLWMSGNO = 0;
    SL0GM210.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0GM210.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0GM210.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "220 ";
  set SL0GM210.CATOAP initialAttributes;
  set SL0GM210.CAITEM initialAttributes;
  set SL0GM210.SY1STNBR cursor;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set SL0GM210.XWHCD initialAttributes;
  set SL0GM210.XGPCD initialAttributes;
  set SL0GM210.SY1STNBR initialAttributes;
  set SL0GM210.SY2CLRID initialAttributes;
  set SL0GM210.XDMCD initialAttributes;
  set SL0GM210.XQACD initialAttributes;
  set SL0GM210.XSDCD initialAttributes;
  set SL0GM210.XSLCD initialAttributes;
  set SL0GM210.XPGCD initialAttributes;
  set SL0GM210.XUMCD initialAttributes;
  set SL0GM210.XOWCD initialAttributes;
  set SL0GM210.SL0GMFDT initialAttributes;
  set SL0GM210.SL0GMTDT initialAttributes;
  set SL0GM210.YWSCD initialAttributes;
  set SL0GM210.YWTCD initialAttributes;

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= 6)
    if (SL0GW02.XROPDEST[SLWIDX01] > " ")
      set SL0GM210.XMSLMSEL[SLWIDX01] initialAttributes;
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

  set SL0GM210.SL0GMSEL initialAttributes;
  set SL0GM210.SL0GMPID initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0GM210.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0GM210.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17)
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0GSH2(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "220I";
  SLWREC.SLWMSGNO = 0004; /* <--- invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0G220

// one time initializations
Function SL0G310()


   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0GM310 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0GW03 empty; /* appl. working storage area*/

  SLWREC.XXXMAPNM = "SL0GM310";
  SLWREC.XXXTITLE = "WORK ORDER REPORT BY DATE      ";

  SLWREC.SLWTALOC = "SL0G310 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0GM310"; /* TA0020 current map name*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0;

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0GM310.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0GM310.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0GM310.XXXTITLE = SLWREC.XXXTITLE;
  SL0GM310.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  SL0GM310.XWHCD = COMMAREA.XWHCD;

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "E";
  TA2REC.TA2GRGEN = X2CREC.X2CCURSD;
  call "TA0040" (TA2REC) {isNoRefresh = yes};

  if (TA2REC.TA2RTNCD == 0)
    SL0GM310.SL0GMFDT = TA2REC.TA2GRGAN;
    SL0GM310.SL0GMTDT = TA2REC.TA2GRGAN;
  end

  SL0GM310.YWSCD = "A ";
  SL0GM310.YWTCD = "A ";

   /* ************************************************************/
   /* *** if whse present: validate whse                      ****/
   /* ***                  save whse                          ****/
   /* ***                  setup printers                     ****/
   /* ************************************************************/

  if (SL0GM310.XWHCD > " ")
    SL0GS3C(); /* <=== whse edit*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
  else
    SLWREC.SLWIDX02 = 1;
    while (SLWREC.SLWIDX02 <= 6)
      set SL0GM310.XMSLMSEL[SLWIDX02] skip, invisible;
      set SL0GM310.XROABRV[SLWIDX02] skip, invisible;
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
    end
    set SL0GM310.SL0GMSEL skip, invisible;
    set SL0GM310.SL0GMPID skip, invisible;
  end

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end SL0G310

// converse & control
Function SL0G320()


  if (SL0GM310.XWHCD == "  ")
    set SL0GM310.XWHCD cursor;
  end

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0GM310.XXXERRID = SLWREC.XXXERRID;


  converse SL0GM310 ;


   /* ************************************************************/
   /* *** commented EZECLOS code to be used ONLY in test      ****/
   /* *** in order to end application without canceling it    ****/
   /* ************************************************************/

   /* IF EZEAID IS PF9;*/
    /* EZECLOS;*/
   /* END ;*/

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320A";
    SLWREC.SLWMSGNO = 0;
    SL0GM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320C";
    SLWREC.SLWMSGNO = 0;
    SL0GM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320D";
    SLWREC.SLWMSGNO = 0;
    SL0GM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0GM310.CATOAP > " ")
    COMMAREA.CATOAP = SL0GM310.CATOAP;
    COMMAREA.CAITEM = SL0GM310.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320E";
    SLWREC.SLWMSGNO = 0;
    SL0GM310.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0GM310.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0GM310.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "320 ";
  set SL0GM310.CATOAP initialAttributes;
  set SL0GM310.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set SL0GM310.XWHCD initialAttributes;
  set SL0GM310.SL0GMFDT initialAttributes;
  set SL0GM310.SL0GMTDT initialAttributes;
  set SL0GM310.YWSCD initialAttributes;
  set SL0GM310.YWTCD initialAttributes;

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= 6)
    if (SL0GW03.XROPDEST[SLWIDX01] > " ")
      set SL0GM310.XMSLMSEL[SLWIDX01] initialAttributes;
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

  set SL0GM310.SL0GMSEL initialAttributes;
  set SL0GM310.SL0GMPID initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0GM310.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0GM310.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17)
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0GSH3(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "320I";
  SLWREC.SLWMSGNO = 0004; /* <--- invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0G320

// one time initializations
Function SL0G410()


   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0GM410 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0GW04 empty; /* appl. working storage area*/

  SLWREC.XXXMAPNM = "SL0GM410";
  SLWREC.XXXTITLE = "WORK ORDER REPORT BY WORK ORDER NBR";

  SLWREC.SLWTALOC = "SL0G410 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0GM410"; /* TA0020 current map name*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* error switch*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0GM410.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0GM410.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0GM410.XXXTITLE = SLWREC.XXXTITLE;
  SL0GM410.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  SL0GM410.XWHCD = COMMAREA.XWHCD;

   /* ************************************************************/
   /* *** if whse present: validate whse                      ****/
   /* ***                  save whse                          ****/
   /* ***                  setup printers                     ****/
   /* ************************************************************/

  if (SL0GM410.XWHCD > " ")
    SL0GS4C(); /* <=== whse edit*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
  else
    SLWREC.SLWIDX02 = 1;
    while (SLWREC.SLWIDX02 <= 6)
      set SL0GM410.XMSLMSEL[SLWIDX02] skip, invisible;
      set SL0GM410.XROABRV[SLWIDX02] skip, invisible;
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
    end
    set SL0GM410.SL0GMSEL skip, invisible;
    set SL0GM410.SL0GMPID skip, invisible;
  end

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end SL0G410

// converse & control
Function SL0G420()


  if (SL0GM410.XWHCD == "  ")
    set SL0GM410.XWHCD cursor;
  end

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0GM410.XXXERRID = SLWREC.XXXERRID;


  converse SL0GM410 ;


   /* ************************************************************/
   /* *** commented EZECLOS code to be used ONLY in test      ****/
   /* *** in order to end application without canceling it    ****/
   /* ************************************************************/

   /* IF EZEAID IS PF9;*/
    /* EZECLOS;*/
   /* END ;*/

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420A";
    SLWREC.SLWMSGNO = 0;
    SL0GM410.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420C";
    SLWREC.SLWMSGNO = 0;
    SL0GM410.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420D";
    SLWREC.SLWMSGNO = 0;
    SL0GM410.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0GM410.CATOAP > " ")
    COMMAREA.CATOAP = SL0GM410.CATOAP;
    COMMAREA.CAITEM = SL0GM410.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420E";
    SLWREC.SLWMSGNO = 0;
    SL0GM410.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0GM410.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0GM410.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "420 ";
  set SL0GM410.CATOAP initialAttributes;
  set SL0GM410.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set SL0GM410.XWHCD initialAttributes;
  set SL0GM410.SL8WONBR initialAttributes;

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= 6)
    if (SL0GW04.XROPDEST[SLWIDX01] > " ")
      set SL0GM410.XMSLMSEL[SLWIDX01] initialAttributes;
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

  set SL0GM410.SL0GMSEL initialAttributes;
  set SL0GM410.SL0GMPID initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0GM410.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0GM410.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17)
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0GSH4(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "420I";
  SLWREC.SLWMSGNO = 0004; /* <--- invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0G420

// one time initializations
Function SL0G510()


   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0GM510 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0GW05 empty; /* appl. working storage area*/

  SLWREC.XXXMAPNM = "SL0GM510";
  SLWREC.XXXTITLE = "WORK ORDER REPORT BY WO GROUP NBR ";

  SLWREC.SLWTALOC = "SL0G510 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0GM510"; /* TA0020 current map name*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* error switch*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0GM510.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0GM510.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0GM510.XXXTITLE = SLWREC.XXXTITLE;
  SL0GM510.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  SL0GM510.XWHCD = COMMAREA.XWHCD;
  SL0GM510.SL0GMMFL = "N";

   /* ************************************************************/
   /* *** if whse present: validate whse                      ****/
   /* ***                  save whse                          ****/
   /* ***                  setup printers                     ****/
   /* ************************************************************/

  if (SL0GM510.XWHCD > " ")
    SL0GS5C(); /* <=== whse edit*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
  else
    SLWREC.SLWIDX02 = 1;
    while (SLWREC.SLWIDX02 <= 6)
      set SL0GM510.XMSLMSEL[SLWIDX02] skip, invisible;
      set SL0GM510.XROABRV[SLWIDX02] skip, invisible;
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
    end
    set SL0GM510.SL0GMSEL skip, invisible;
    set SL0GM510.SL0GMPID skip, invisible;
  end

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end SL0G510

// converse & control
Function SL0G520()


  if (SL0GM510.XWHCD == "  ")
    set SL0GM510.XWHCD cursor;
  else
    if (SLWREC.SLWERRSW == "N")
      if (SL0GM510.XWHCD == "32" /* <--- set default sort selection*/
       || SL0GM510.XWHCD == "04")
        SL0GM510.SL0GMSRT = "2";
      else
        SL0GM510.SL0GMSRT = "1";
      end
    end
  end

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0GM510.XXXERRID = SLWREC.XXXERRID;


  converse SL0GM510 ;


   /* ************************************************************/
   /* *** commented EZECLOS code to be used ONLY in test      ****/
   /* *** in order to end application without canceling it    ****/
   /* ************************************************************/

   /* IF EZEAID IS PF9;*/
    /* EZECLOS;*/
   /* END ;*/

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "520A";
    SLWREC.SLWMSGNO = 0;
    SL0GM510.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "520C";
    SLWREC.SLWMSGNO = 0;
    SL0GM510.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "520D";
    SLWREC.SLWMSGNO = 0;
    SL0GM510.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0GM510.CATOAP > " ")
    COMMAREA.CATOAP = SL0GM510.CATOAP;
    COMMAREA.CAITEM = SL0GM510.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "520E";
    SLWREC.SLWMSGNO = 0;
    SL0GM510.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0GM510.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0GM510.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "520 ";
  set SL0GM510.CATOAP initialAttributes;
  set SL0GM510.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set SL0GM510.XWHCD initialAttributes;
  set SL0GM510.SL8WOGRP initialAttributes;
  set SL0GM510.SL0GMMFL initialAttributes;
  set SL0GM510.SL0GMSRT initialAttributes;

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= 6)
    if (SL0GW05.XROPDEST[SLWIDX01] > " ")
      set SL0GM510.XMSLMSEL[SLWIDX01] initialAttributes;
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

  set SL0GM510.SL0GMSEL initialAttributes;
  set SL0GM510.SL0GMPID initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0GM510.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "520F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0GM510.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16
   || converseVar.eventKey is pf17)
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0GSH5(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "520I";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0G520

// format & submit jcl
Function SL0GS1A()


   /* ************************************************************/
   /* *** create the production jcl in the slurec array       ****/
   /* *** create the instream data as part of this array      ****/
   /* *** use ta0070 to submit the jcl                        ****/
   /* ************************************************************/

  set SLUREC empty;

  SLUREC.SLUCOUNT = 1;

  SL0GW01.SL0GWJSL = "//";
  SL0GW01.SL0GWJOB = "SL5891";
  SL0GW01.SL0GWJST = "   JOB  (DV,MUR2),'W.O. BY LOCATION RPT',  ";
  SLUREC.SLUJCLIN[SLUCOUNT] = SL0GW01.SL0GWJLN;
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/

  SLUREC.SLUJCLIN[SLUCOUNT] = "//         CLASS=P,                     ";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1;

  SLUREC.SLUJCLIN[SLUCOUNT] = "//         MSGCLASS=J                   ";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1;

  SL0GW01.SL0GWOUS = "/*OUTPUT  WHSE FORMS=SL01,DEST=";
  SLUREC.SLUJCLIN[SLUCOUNT] = SL0GW01.SL0GWOUP;
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/


  SLUREC.SLUJCLIN[SLUCOUNT] = "//JOBLIB     DD   DSN=PROD.ONETIME.LOADLIB,DISP=SHR";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/

  SLUREC.SLUJCLIN[SLUCOUNT] = "//           DD   DSN=PROD.COB2.LOADLIB,DISP=SHR";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/


  SLUREC.SLUJCLIN[SLUCOUNT] = "//           DD   DSN=PROD.LOADLIB,DISP=SHR";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/

  SLUJCLIN[SLUCOUNT] = "//P0010    EXEC SL5891 ";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/

  SLUJCLIN[SLUCOUNT] = "//P0010.DATAIN  DD *";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/

  SLUJCLIN[SLUCOUNT] = SL0GW01.SL0GWLC1;
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/

  SLUJCLIN[SLUCOUNT] = "//P0030.DATAIN  DD *";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/

  SLUJCLIN[SLUCOUNT] = SL0GW01.SL0GWLC1;
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/

  SLUJCLIN[SLUCOUNT] = "//*                             ";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* INCREMENT LINE COUNT*/

  SLUJCLIN[SLUCOUNT] = "//********* END OF SL5891 ******";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* INCREMENT LINE COUNT*/

  SLUJCLIN[SLUCOUNT] = "//                              ";

   /* *** PERFORM CALL TO SUBMIT JOB ****/

  SLUREC.SLURETRN = 0;

  try
    call "TA0070" (SLUREC) {isNoRefresh = yes};
  end

  if (SLUREC.SLURETRN != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1AA";
    SLWREC.SLWMSGNO = 0058; /* <--- PRINT REQUEST FAILED MSG*/
  end

   /* ************************************************************/
   /* *** END OF STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GS1A

// whse edit
Function SL0GS1C()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (SL0GM110.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0GM110.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      SL0GM110.XWHABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1CA";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0GM110.XWHCD cursor, bold;
      return;
    end
  else
    SL0GM110.XWHABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1CB";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0GM110.XWHCD cursor, bold;
    return;
  end

  SL0GS1P(); /* <=== setup printers*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GS1C

// use input printer dest
Function SL0GS1I()


   /* ************************************************************/
   /* *** make sure selection & printer dest. abrv. are input ****/
   /* *** note: exit if either fld missing (error)            ****/
   /* *** find dest. abrv. in table                           ****/
   /* *** save dest. id in output jcl line in ws              ****/
   /* ************************************************************/

  if (SL0GM110.SL0GMPID > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1IA";
    SLWREC.SLWMSGNO = 0009; /* <--- requiered field msg*/
    set SL0GM110.SL0GMPID cursor, bold;
  end

  if (SL0GM110.SL0GMSEL > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1IB";
    SLWREC.SLWMSGNO = 0009; /* <--- requiered field msg*/
    set SL0GM110.SL0GMSEL cursor, bold;
  end

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  if (SL0GM110.SL0GMPID in XROTBL.XROABRV)
    if (XROTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0GW01.SL0GWPID = XROTBL.XROPDEST[sysVar.arrayIndex];
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1IC";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0GM110.SL0GMPID cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1ID";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0GM110.SL0GMPID cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GS1I

// setup printers
Function SL0GS1P()


   /* ************************************************************/
   /* *** setup printer selections on scrn & in ws            ****/
   /* *** and darken/askip all other printer flds             ****/
   /* *** note: darken/askip all, if none found               ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;
  SLWREC.SLWIDX02 = 1;

  while (XROTBL.XROCD[SLWIDX01] != "9999"
   && SLWREC.SLWIDX02 <= 6)
    if (XROTBL.XWHCD1[SLWIDX01] == SL0GM110.XWHCD
     || XROTBL.XWHCD2[SLWIDX01] == SL0GM110.XWHCD
     || XROTBL.XWHCD3[SLWIDX01] == SL0GM110.XWHCD)
      if (XROTBL.XXXSTAT[SLWIDX01] == "A")
        SL0GW01.XROPDEST[SLWIDX02] = XROTBL.XROPDEST[SLWIDX01];
        SL0GM110.XROABRV[SLWIDX02] = XROTBL.XROABRV[SLWIDX01];
        set SL0GM110.XMSLMSEL[SLWIDX02] initialAttributes;
        set SL0GM110.XROABRV[SLWIDX02] initialAttributes;
        SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
      end
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

  if (SLWREC.SLWIDX02 == 1)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1PA";
    SLWREC.SLWMSGNO = 0054; /* <--- no printer assigned*/
    while (SLWREC.SLWIDX02 <= 6)
      set SL0GM110.XMSLMSEL[SLWIDX02] skip, invisible;
      set SL0GM110.XROABRV[SLWIDX02] skip, invisible;
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
    end
    set SL0GM110.SL0GMSEL skip, invisible;
    set SL0GM110.SL0GMPID skip, invisible;
    return;
  end

  while (SLWREC.SLWIDX02 <= 6)
    set SL0GM110.XMSLMSEL[SLWIDX02] skip, invisible;
    set SL0GM110.XROABRV[SLWIDX02] skip, invisible;
    SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
  end

  SL0GM110.SL0GMSEL = " ";
  SL0GM110.SL0GMPID = " ";
  set SL0GM110.SL0GMSEL initialAttributes;
  set SL0GM110.SL0GMPID initialAttributes;
  COMMAREA.XWHCD = SL0GM110.XWHCD;
  SL0GW01.XWHCD = SL0GM110.XWHCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GS1P

// save printer selection
Function SL0GS1S()


   /* ************************************************************/
   /* *** make sure a printer has been selected               ****/
   /* *** note: if more than 1 selected: use the first        ****/
   /* ***       therefore, edit in reverse order to use first ****/
   /* *** note: also save the printer's destination id right  ****/
   /* ***       in the ws jcl line's fld to avoid another     ****/
   /* ***       loop later (use the same index on the ws tbl) ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 6;
  SLWREC.SLWFTMSW = "Y";

  while (SLWREC.SLWIDX01 > 0)
    if (SL0GM110.XMSLMSEL[SLWIDX01] > " ")
      SLWREC.SLWFTMSW = "N";
      SL0GW01.SL0GWPID = SL0GW01.XROPDEST[SLWIDX01];
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end

  if (SLWREC.SLWFTMSW == "Y")
    if (SL0GM110.SL0GMSEL > " "
     || SL0GM110.SL0GMPID > " ")
      SL0GS1I(); /* <=== use input printer dest*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1SA";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0GM110.XMSLMSEL[1] cursor, bold;
    end
    return;
  end

  if (SL0GM110.SL0GMPID > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1SB";
    SLWREC.SLWMSGNO = 0065; /* <--- can't be entered now*/
    set SL0GM110.SL0GMPID cursor, bold;
  end

  if (SL0GM110.SL0GMSEL > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1SC";
    SLWREC.SLWMSGNO = 0065; /* <--- can't be entered now*/
    set SL0GM110.SL0GMSEL cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GS1S

// reset printer fields
Function SL0GS1T()


   /* ************************************************************/
   /* *** reset all printer selection flds to blanks          ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 6;

  while (SLWREC.SLWIDX01 > 0)
    SL0GM110.XMSLMSEL[SLWIDX01] = " ";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end

   /* ************************************************************/
   /* *** setup the 1st printer as selected to avoid all the  ****/
   /* *** cursor movement to select the 1st, if it is desired ****/
   /* ***                                                     ****/
   /* *** Rev 1 deleted the default printer by commenting out ****/
   /* *** the move.                                           ****/
   /* ************************************************************/

   /* MOVE 'X' TO SL0GM110.XMSLMSEL(1);*/

   /* ************************************************************/
   /* *** reset input/optional printer flds to blanks         ****/
   /* ************************************************************/

  SL0GM110.SL0GMSEL = " ";
  SL0GM110.SL0GMPID = " ";

   /* ************************************************************/
   /* *** move default values into map fields                 ****/
   /* ************************************************************/

  SL0GM110.XARCD = "  ";
  SL0GM110.SL4ZONE = "  ";
  SL0GM110.SL5LOCTN = "      ";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GS1T

// format & submit jcl
Function SL0GS2A()


   /* ************************************************************/
   /* *** create the production jcl in the slurec array       ****/
   /* *** create the instream data as part of this array      ****/
   /* *** use ta0070 to submit the jcl                        ****/
   /* ************************************************************/

  set SLUREC empty;

  SLUREC.SLUCOUNT = 1;

  SL0GW02.SL0GWJSL = "//";
  SL0GW02.SL0GWJOB = "SL5911";
  SL0GW02.SL0GWJST = "   JOB  (DV,MUR2),'W.O. BY PRODUCT RPT',  ";
  SLUREC.SLUJCLIN[SLUCOUNT] = SL0GW02.SL0GWJLN;
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/

  SLUREC.SLUJCLIN[SLUCOUNT] = "//         CLASS=P,                     ";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1;

  SLUREC.SLUJCLIN[SLUCOUNT] = "//         MSGCLASS=J                   ";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1;

  SL0GW02.SL0GWOUS = "/*OUTPUT  WHSE FORMS=SL01,DEST=";
  SLUREC.SLUJCLIN[SLUCOUNT] = SL0GW02.SL0GWOUP;
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/

  SLUREC.SLUJCLIN[SLUCOUNT] = "//JOBLIB     DD   DSN=PROD.ONETIME.LOADLIB,DISP=SHR";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/


  SLUREC.SLUJCLIN[SLUCOUNT] = "//           DD   DSN=PROD.COB2.LOADLIB,DISP=SHR";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/


  SLUREC.SLUJCLIN[SLUCOUNT] = "//           DD   DSN=PROD.LOADLIB,DISP=SHR";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/


  SLUJCLIN[SLUCOUNT] = "//P0010    EXEC SL5911 ";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/

  SLUJCLIN[SLUCOUNT] = "//P0010.DATAIN  DD *";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/

  SLUJCLIN[SLUCOUNT] = SL0GW02.SL0GWLC2;
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/

  SLUJCLIN[SLUCOUNT] = "//P0030.DATAIN  DD *";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/

  SLUJCLIN[SLUCOUNT] = SL0GW02.SL0GWLC2;
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/

  SLUJCLIN[SLUCOUNT] = "//*                             ";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/

  SLUJCLIN[SLUCOUNT] = "//********* END OF SL5911 ******";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/

  SLUJCLIN[SLUCOUNT] = "//                              ";

   /* *** perform call to submit job ****/

  SLUREC.SLURETRN = 0;

  try
    call "TA0070" (SLUREC) {isNoRefresh = yes};
  end

  if (SLUREC.SLURETRN != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S2AA";
    SLWREC.SLWMSGNO = 0058; /* <--- print request failed msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GS2A

// whse edit
Function SL0GS2C()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (SL0GM210.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0GM210.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      SL0GM210.XWHABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2CA";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0GM210.XWHCD cursor, bold;
      return;
    end
  else
    SL0GM210.XWHABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S2CB";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0GM210.XWHCD cursor, bold;
    return;
  end

  SL0GS2P(); /* <=== setup printers*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GS2C

// use input printer dest
Function SL0GS2I()


   /* ************************************************************/
   /* *** make sure selection & printer dest. abrv. are input ****/
   /* *** note: exit if either fld missing (error)            ****/
   /* *** find dest. abrv. in table                           ****/
   /* *** save dest. id in output jcl line in ws              ****/
   /* ************************************************************/

  if (SL0GM210.SL0GMPID > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S2IA";
    SLWREC.SLWMSGNO = 0009; /* <--- requiered field msg*/
    set SL0GM210.SL0GMPID cursor, bold;
  end

  if (SL0GM210.SL0GMSEL > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S2IB";
    SLWREC.SLWMSGNO = 0009; /* <--- requiered field msg*/
    set SL0GM210.SL0GMSEL cursor, bold;
  end

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  if (SL0GM210.SL0GMPID in XROTBL.XROABRV)
    if (XROTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0GW02.SL0GWPID = XROTBL.XROPDEST[sysVar.arrayIndex];
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2IC";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0GM210.SL0GMPID cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S2ID";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0GM210.SL0GMPID cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GS2I

// setup printers
Function SL0GS2P()


   /* ************************************************************/
   /* *** setup printer selections on scrn & in ws            ****/
   /* *** and darken/askip all other printer flds             ****/
   /* *** note: darken/askip all, if none found               ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;
  SLWREC.SLWIDX02 = 1;

  while (XROTBL.XROCD[SLWIDX01] != "9999"
   && SLWREC.SLWIDX02 <= 6)
    if (XROTBL.XWHCD1[SLWIDX01] == SL0GM210.XWHCD
     || XROTBL.XWHCD2[SLWIDX01] == SL0GM210.XWHCD
     || XROTBL.XWHCD3[SLWIDX01] == SL0GM210.XWHCD)
      if (XROTBL.XXXSTAT[SLWIDX01] == "A")
        SL0GW02.XROPDEST[SLWIDX02] = XROTBL.XROPDEST[SLWIDX01];
        SL0GM210.XROABRV[SLWIDX02] = XROTBL.XROABRV[SLWIDX01];
        set SL0GM210.XMSLMSEL[SLWIDX02] initialAttributes;
        set SL0GM210.XROABRV[SLWIDX02] initialAttributes;
        SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
      end
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

  if (SLWREC.SLWIDX02 == 1)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S2PA";
    SLWREC.SLWMSGNO = 0054; /* <--- no printer assigned*/
    while (SLWREC.SLWIDX02 <= 6)
      set SL0GM210.XMSLMSEL[SLWIDX02] skip, invisible;
      set SL0GM210.XROABRV[SLWIDX02] skip, invisible;
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
    end
    set SL0GM210.SL0GMSEL skip, invisible;
    set SL0GM210.SL0GMPID skip, invisible;
    return;
  end

  while (SLWREC.SLWIDX02 <= 6)
    set SL0GM210.XMSLMSEL[SLWIDX02] skip, invisible;
    set SL0GM210.XROABRV[SLWIDX02] skip, invisible;
    SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
  end

  SL0GM210.SL0GMSEL = " ";
  SL0GM210.SL0GMPID = " ";
  set SL0GM210.SL0GMSEL initialAttributes;
  set SL0GM210.SL0GMPID initialAttributes;
  COMMAREA.XWHCD = SL0GM210.XWHCD;
  SL0GW02.XWHCD = SL0GM210.XWHCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GS2P

// save printer selection
Function SL0GS2S()


   /* ************************************************************/
   /* *** make sure a printer has been selected               ****/
   /* *** note: if more than 1 selected: use the first        ****/
   /* ***       therefore, edit in reverse order to use first ****/
   /* *** note: also save the printer's destination id right  ****/
   /* ***       in the ws jcl line's fld to avoid another     ****/
   /* ***       loop later (use the same index on the ws tbl) ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 6;
  SLWREC.SLWFTMSW = "Y";

  while (SLWREC.SLWIDX01 > 0)
    if (SL0GM210.XMSLMSEL[SLWIDX01] > " ")
      SLWREC.SLWFTMSW = "N";
      SL0GW02.SL0GWPID = SL0GW02.XROPDEST[SLWIDX01];
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end

  if (SLWREC.SLWFTMSW == "Y")
    if (SL0GM210.SL0GMSEL > " "
     || SL0GM210.SL0GMPID > " ")
      SL0GS2I(); /* <=== use input printer dest*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2SA";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0GM210.XMSLMSEL[1] cursor, bold;
    end
    return;
  end

  if (SL0GM210.SL0GMPID > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S2SB";
    SLWREC.SLWMSGNO = 0065; /* <--- can't be entered now*/
    set SL0GM210.SL0GMPID cursor, bold;
  end

  if (SL0GM210.SL0GMSEL > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S2SC";
    SLWREC.SLWMSGNO = 0065; /* <--- can't be entered now*/
    set SL0GM210.SL0GMSEL cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GS2S

// reset printer fields
Function SL0GS2T()


   /* ************************************************************/
   /* *** reset all printer selection flds to blanks          ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 6;

  while (SLWREC.SLWIDX01 > 0)
    SL0GM210.XMSLMSEL[SLWIDX01] = " ";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end

   /* ************************************************************/
   /* *** setup the 1st printer as selected to avoid all the  ****/
   /* *** cursor movement to select the 1st, if it is desired ****/
   /* ***                                                     ****/
   /* *** Rev 1 deleted the default printer by commenting out ****/
   /* *** the move.                                           ****/
   /* ************************************************************/

   /* MOVE 'X' TO SL0GM210.XMSLMSEL(1);*/

   /* ************************************************************/
   /* *** reset input/optional printer flds to blanks         ****/
   /* ************************************************************/

  SL0GM210.SL0GMSEL = " ";
  SL0GM210.SL0GMPID = " ";

   /* ************************************************************/
   /* *** move default values into map fields                 ****/
   /* ************************************************************/

  SL0GM210.SY2CLRID = "00 ";
  SL0GM210.XDMCD = "00";
  SL0GM210.XQACD = "01";
  SL0GM210.XSDCD = "000";
  SL0GM210.XSLCD = "000";
  SL0GM210.XPGCD = "00";
  SL0GM210.XUMCD = "01";
  SL0GM210.XOWCD = "00";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GS2T

// format & submit jcl
Function SL0GS3A()


   /* ************************************************************/
   /* *** create the production jcl in the slurec array       ****/
   /* *** create the instream data as part of this array      ****/
   /* *** use ta0070 to submit the jcl                        ****/
   /* ************************************************************/

  set SLUREC empty;

  SLUREC.SLUCOUNT = 1;

  SL0GW03.SL0GWJSL = "//";
  SL0GW03.SL0GWJOB = "SL5931";
  SL0GW03.SL0GWJST = "   JOB  (DV,MUR2),'W.O. BY DATE RPT',  ";
  SLUREC.SLUJCLIN[SLUCOUNT] = SL0GW03.SL0GWJLN;
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/

  SLUREC.SLUJCLIN[SLUCOUNT] = "//         CLASS=P,                     ";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1;

  SLUREC.SLUJCLIN[SLUCOUNT] = "//         MSGCLASS=J                   ";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1;

  SL0GW03.SL0GWOUS = "/*OUTPUT  WHSE FORMS=SL01,DEST=";
  SLUREC.SLUJCLIN[SLUCOUNT] = SL0GW03.SL0GWOUP;
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/

  SLUREC.SLUJCLIN[SLUCOUNT] = "//JOBLIB     DD   DSN=PROD.ONETIME.LOADLIB,DISP=SHR";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/


  SLUREC.SLUJCLIN[SLUCOUNT] = "//           DD   DSN=PROD.COB2.LOADLIB,DISP=SHR";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/


  SLUREC.SLUJCLIN[SLUCOUNT] = "//           DD   DSN=PROD.LOADLIB,DISP=SHR";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/


  SLUJCLIN[SLUCOUNT] = "//P0010    EXEC SL5931 ";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/

  SLUJCLIN[SLUCOUNT] = "//P0010.SYSIN   DD *";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/

  SLUJCLIN[SLUCOUNT] = SL0GW03.SL0GWLC3;
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/

  SLUJCLIN[SLUCOUNT] = "//P0030.SYSIN   DD *";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/

  SLUJCLIN[SLUCOUNT] = SL0GW03.SL0GWLC3;
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/

  SLUJCLIN[SLUCOUNT] = "//*                             ";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/

  SLUJCLIN[SLUCOUNT] = "//********* END OF SL5931 ******";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/

  SLUJCLIN[SLUCOUNT] = "//                              ";

   /* *** perform call to submit job ****/

  SLUREC.SLURETRN = 0;

  try
    call "TA0070" (SLUREC) {isNoRefresh = yes};
  end

  if (SLUREC.SLURETRN != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S3AA";
    SLWREC.SLWMSGNO = 0058; /* <--- print request failed msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GS3A

// whse edit
Function SL0GS3C()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (SL0GM310.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0GM310.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      SL0GM310.XWHABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3CA";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0GM310.XWHCD cursor, bold;
      return;
    end
  else
    SL0GM310.XWHABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S3CB";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0GM310.XWHCD cursor, bold;
    return;
  end

  SL0GS3P(); /* <=== setup printers*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GS3C

// use input printer dest
Function SL0GS3I()


   /* ************************************************************/
   /* *** make sure selection & printer dest. abrv. are input ****/
   /* *** note: exit if either fld missing (error)            ****/
   /* *** find dest. abrv. in table                           ****/
   /* *** save dest. id in output jcl line in ws              ****/
   /* ************************************************************/

  if (SL0GM310.SL0GMPID > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S3IA";
    SLWREC.SLWMSGNO = 0009; /* <--- requiered field msg*/
    set SL0GM310.SL0GMPID cursor, bold;
  end

  if (SL0GM310.SL0GMSEL > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S3IB";
    SLWREC.SLWMSGNO = 0009; /* <--- requiered field msg*/
    set SL0GM310.SL0GMSEL cursor, bold;
  end

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  if (SL0GM310.SL0GMPID in XROTBL.XROABRV)
    if (XROTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0GW03.SL0GWPID = XROTBL.XROPDEST[sysVar.arrayIndex];
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3IC";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0GM310.SL0GMPID cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S3ID";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0GM310.SL0GMPID cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GS3I

// setup printers
Function SL0GS3P()


   /* ************************************************************/
   /* *** setup printer selections on scrn & in ws            ****/
   /* *** and darken/askip all other printer flds             ****/
   /* *** note: darken/askip all, if none found               ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;
  SLWREC.SLWIDX02 = 1;

  while (XROTBL.XROCD[SLWIDX01] != "9999"
   && SLWREC.SLWIDX02 <= 6)
    if (XROTBL.XWHCD1[SLWIDX01] == SL0GM310.XWHCD
     || XROTBL.XWHCD2[SLWIDX01] == SL0GM310.XWHCD
     || XROTBL.XWHCD3[SLWIDX01] == SL0GM310.XWHCD)
      if (XROTBL.XXXSTAT[SLWIDX01] == "A")
        SL0GW03.XROPDEST[SLWIDX02] = XROTBL.XROPDEST[SLWIDX01];
        SL0GM310.XROABRV[SLWIDX02] = XROTBL.XROABRV[SLWIDX01];
        set SL0GM310.XMSLMSEL[SLWIDX02] initialAttributes;
        set SL0GM310.XROABRV[SLWIDX02] initialAttributes;
        SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
      end
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

  if (SLWREC.SLWIDX02 == 1)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S3PA";
    SLWREC.SLWMSGNO = 0054; /* <--- no printer assigned*/
    while (SLWREC.SLWIDX02 <= 6)
      set SL0GM310.XMSLMSEL[SLWIDX02] skip, invisible;
      set SL0GM310.XROABRV[SLWIDX02] skip, invisible;
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
    end
    set SL0GM310.SL0GMSEL skip, invisible;
    set SL0GM310.SL0GMPID skip, invisible;
    return;
  end

  while (SLWREC.SLWIDX02 <= 6)
    set SL0GM310.XMSLMSEL[SLWIDX02] skip, invisible;
    set SL0GM310.XROABRV[SLWIDX02] skip, invisible;
    SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
  end

  SL0GM310.SL0GMSEL = " ";
  SL0GM310.SL0GMPID = " ";
  set SL0GM310.SL0GMSEL initialAttributes;
  set SL0GM310.SL0GMPID initialAttributes;
  COMMAREA.XWHCD = SL0GM310.XWHCD;
  SL0GW03.XWHCD = SL0GM310.XWHCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GS3P

// save printer selection
Function SL0GS3S()


   /* ************************************************************/
   /* *** make sure a printer has been selected               ****/
   /* *** note: if more than 1 selected: use the first        ****/
   /* ***       therefore, edit in reverse order to use first ****/
   /* *** note: also save the printer's destination id right  ****/
   /* ***       in the ws jcl line's fld to avoid another     ****/
   /* ***       loop later (use the same index on the ws tbl) ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 6;
  SLWREC.SLWFTMSW = "Y";

  while (SLWREC.SLWIDX01 > 0)
    if (SL0GM310.XMSLMSEL[SLWIDX01] > " ")
      SLWREC.SLWFTMSW = "N";
      SL0GW03.SL0GWPID = SL0GW03.XROPDEST[SLWIDX01];
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end

  if (SLWREC.SLWFTMSW == "Y")
    if (SL0GM310.SL0GMSEL > " "
     || SL0GM310.SL0GMPID > " ")
      SL0GS3I(); /* <=== use input printer dest*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S3SA";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0GM310.XMSLMSEL[1] cursor, bold;
    end
    return;
  end

  if (SL0GM310.SL0GMPID > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S3SB";
    SLWREC.SLWMSGNO = 0065; /* <--- can't be entered now*/
    set SL0GM310.SL0GMPID cursor, bold;
  end

  if (SL0GM310.SL0GMSEL > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S3SC";
    SLWREC.SLWMSGNO = 0065; /* <--- can't be entered now*/
    set SL0GM310.SL0GMSEL cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GS3S

// reset printer fields
Function SL0GS3T()


   /* ************************************************************/
   /* *** reset all printer selection flds to blanks          ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 6;

  while (SLWREC.SLWIDX03 > 0)
    SL0GM310.XMSLMSEL[SLWIDX01] = " ";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end

   /* ************************************************************/
   /* *** setup the 1st printer as selected to avoid all the  ****/
   /* *** cursor movement to select the 1st, if it is desired ****/
   /* ***                                                     ****/
   /* *** Rev 1 deleted the default printer by commenting out ****/
   /* *** the move.                                           ****/
   /* ************************************************************/

   /* MOVE 'X' TO SL0GM310.XMSLMSEL(1);*/

   /* ************************************************************/
   /* *** reset input/optional printer flds to blanks         ****/
   /* ************************************************************/

  SL0GM310.SL0GMSEL = " ";
  SL0GM310.SL0GMPID = " ";

   /* ************************************************************/
   /* *** move default values into map fields                 ****/
   /* ************************************************************/

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "E";
  TA2REC.TA2GRGEN = X2CREC.X2CCURSD;
  call "TA0040" (TA2REC) {isNoRefresh = yes};

  if (TA2REC.TA2RTNCD == 0)
    SL0GM310.SL0GMFDT = TA2REC.TA2GRGAN;
    SL0GM310.SL0GMTDT = TA2REC.TA2GRGAN;
  end

  SL0GM310.YWSCD = "A ";
  SL0GM310.YWTCD = "A ";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GS3T

// format & submit jcl
Function SL0GS4A()


   /* ************************************************************/
   /* *** create the production jcl in the slurec array       ****/
   /* *** create the instream data as part of this array      ****/
   /* *** use ta0070 to submit the jcl                        ****/
   /* ************************************************************/

  set SLUREC empty;

  SLUREC.SLUCOUNT = 1;

  SL0GW04.SL0GWJSL = "//";
  SL0GW04.SL0GWJOB = "SL5951";
  SL0GW04.SL0GWJST = "   JOB  (DV,MUR2),'W.O. BY W.O. NBR RPT',  ";
  SLUREC.SLUJCLIN[SLUCOUNT] = SL0GW04.SL0GWJLN;
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/

  SLUREC.SLUJCLIN[SLUCOUNT] = "//         CLASS=P,                     ";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1;

  SLUREC.SLUJCLIN[SLUCOUNT] = "//         MSGCLASS=J                   ";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1;

  SL0GW04.SL0GWOUS = "/*OUTPUT  WHSE FORMS=SL01,DEST=";
  SLUREC.SLUJCLIN[SLUCOUNT] = SL0GW04.SL0GWOUP;
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/

  SLUREC.SLUJCLIN[SLUCOUNT] = "//JOBLIB     DD   DSN=PROD.ONETIME.LOADLIB,DISP=SHR";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/


  SLUREC.SLUJCLIN[SLUCOUNT] = "//           DD   DSN=PROD.COB2.LOADLIB,DISP=SHR";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/


  SLUJCLIN[SLUCOUNT] = "//           DD   DSN=PROD.LOADLIB,DISP=SHR";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/

  SLUJCLIN[SLUCOUNT] = "//P0010    EXEC SL5951 ";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/

  SLUJCLIN[SLUCOUNT] = "//P0010.SYSIN   DD *";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/

  SLUJCLIN[SLUCOUNT] = SL0GW04.SL0GWLC4;
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/

  SLUJCLIN[SLUCOUNT] = "//*                             ";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/

  SLUJCLIN[SLUCOUNT] = "//********* END OF SL5951 ******";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/

  SLUJCLIN[SLUCOUNT] = "//                              ";

   /* *** perform call to submit job ****/

  SLUREC.SLURETRN = 0;

  try
    call "TA0070" (SLUREC) {isNoRefresh = yes};
  end

  if (SLUREC.SLURETRN != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S4AA";
    SLWREC.SLWMSGNO = 0058; /* <--- print request failed msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GS4A

// whse edit
Function SL0GS4C()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (SL0GM410.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0GM410.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      SL0GM410.XWHABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S4CA";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0GM410.XWHCD cursor, bold;
      return;
    end
  else
    SL0GM410.XWHABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S4CB";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0GM410.XWHCD cursor, bold;
    return;
  end

  SL0GS4P(); /* <=== setup printers*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GS4C

// use input printer dest
Function SL0GS4I()


   /* ************************************************************/
   /* *** make sure selection & printer dest. abrv. are input ****/
   /* *** note: exit if either fld missing (error)            ****/
   /* *** find dest. abrv. in table                           ****/
   /* *** save dest. id in output jcl line in ws              ****/
   /* ************************************************************/

  if (SL0GM410.SL0GMPID > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S4IA";
    SLWREC.SLWMSGNO = 0009; /* <--- requiered field msg*/
    set SL0GM410.SL0GMPID cursor, bold;
  end

  if (SL0GM410.SL0GMSEL > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S4IB";
    SLWREC.SLWMSGNO = 0009; /* <--- requiered field msg*/
    set SL0GM410.SL0GMSEL cursor, bold;
  end

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  if (SL0GM410.SL0GMPID in XROTBL.XROABRV)
    if (XROTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0GW04.SL0GWPID = XROTBL.XROPDEST[sysVar.arrayIndex];
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S4IC";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0GM410.SL0GMPID cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S4ID";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0GM410.SL0GMPID cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GS4I

// setup printers
Function SL0GS4P()


   /* ************************************************************/
   /* *** setup printer selections on scrn & in ws            ****/
   /* *** and darken/askip all other printer flds             ****/
   /* *** note: darken/askip all, if none found               ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;
  SLWREC.SLWIDX02 = 1;

  while (XROTBL.XROCD[SLWIDX01] != "9999"
   && SLWREC.SLWIDX02 <= 6)
    if (XROTBL.XWHCD1[SLWIDX01] == SL0GM410.XWHCD
     || XROTBL.XWHCD2[SLWIDX01] == SL0GM410.XWHCD
     || XROTBL.XWHCD3[SLWIDX01] == SL0GM410.XWHCD)
      if (XROTBL.XXXSTAT[SLWIDX01] == "A")
        SL0GW04.XROPDEST[SLWIDX02] = XROTBL.XROPDEST[SLWIDX01];
        SL0GM410.XROABRV[SLWIDX02] = XROTBL.XROABRV[SLWIDX01];
        set SL0GM410.XMSLMSEL[SLWIDX02] initialAttributes;
        set SL0GM410.XROABRV[SLWIDX02] initialAttributes;
        SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
      end
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

  if (SLWREC.SLWIDX02 == 1)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S4PA";
    SLWREC.SLWMSGNO = 0054; /* <--- no printer assigned*/
    while (SLWREC.SLWIDX02 <= 6)
      set SL0GM410.XMSLMSEL[SLWIDX02] skip, invisible;
      set SL0GM410.XROABRV[SLWIDX02] skip, invisible;
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
    end
    set SL0GM410.SL0GMSEL skip, invisible;
    set SL0GM410.SL0GMPID skip, invisible;
    return;
  end

  while (SLWREC.SLWIDX02 <= 6)
    set SL0GM410.XMSLMSEL[SLWIDX02] skip, invisible;
    set SL0GM410.XROABRV[SLWIDX02] skip, invisible;
    SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
  end

  SL0GM410.SL0GMSEL = " ";
  SL0GM410.SL0GMPID = " ";
  set SL0GM410.SL0GMSEL initialAttributes;
  set SL0GM410.SL0GMPID initialAttributes;
  COMMAREA.XWHCD = SL0GM410.XWHCD;
  SL0GW04.XWHCD = SL0GM410.XWHCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GS4P

// save printer selection
Function SL0GS4S()


   /* ************************************************************/
   /* *** make sure a printer has been selected               ****/
   /* *** note: if more than 1 selected: use the first        ****/
   /* ***       therefore, edit in reverse order to use first ****/
   /* *** note: also save the printer's destination id right  ****/
   /* ***       in the ws jcl line's fld to avoid another     ****/
   /* ***       loop later (use the same index on the ws tbl) ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 6;
  SLWREC.SLWFTMSW = "Y";

  while (SLWREC.SLWIDX01 > 0)
    if (SL0GM410.XMSLMSEL[SLWIDX01] > " ")
      SLWREC.SLWFTMSW = "N";
      SL0GW04.SL0GWPID = SL0GW04.XROPDEST[SLWIDX01];
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end

  if (SLWREC.SLWFTMSW == "Y")
    if (SL0GM410.SL0GMSEL > " "
     || SL0GM410.SL0GMPID > " ")
      SL0GS4I(); /* <=== use input printer dest*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S4SA";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0GM410.XMSLMSEL[1] cursor, bold;
    end
    return;
  end

  if (SL0GM410.SL0GMPID > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S4SB";
    SLWREC.SLWMSGNO = 0065; /* <--- can't be entered now*/
    set SL0GM410.SL0GMPID cursor, bold;
  end

  if (SL0GM410.SL0GMSEL > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S4SC";
    SLWREC.SLWMSGNO = 0065; /* <--- can't be entered now*/
    set SL0GM410.SL0GMSEL cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GS4S

// reset printer fields
Function SL0GS4T()


   /* ************************************************************/
   /* *** reset all printer selection flds to blanks          ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 6;

  while (SLWREC.SLWIDX01 > 0)
    SL0GM410.XMSLMSEL[SLWIDX01] = " ";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end

   /* ************************************************************/
   /* *** setup the 1st printer as selected to avoid all the  ****/
   /* *** cursor movement to select the 1st, if it is desired ****/
   /* ***                                                     ****/
   /* *** Rev 1 deleted the default printer by commenting out ****/
   /* *** the move.                                           ****/
   /* ************************************************************/

   /* MOVE 'X' TO SL0GM410.XMSLMSEL(1);*/

   /* ************************************************************/
   /* *** reset input/optional printer flds to blanks         ****/
   /* ************************************************************/

  SL0GM410.SL0GMSEL = " ";
  SL0GM410.SL0GMPID = " ";

   /* ************************************************************/
   /* *** move default values into map fields                 ****/
   /* ************************************************************/

  SL0GM410.SL8WONBR = 0;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GS4T

// format & submit jcl
Function SL0GS5A()


   /* ************************************************************/
   /* *** create the production jcl in the slurec array       ****/
   /* *** create the instream data as part of this array      ****/
   /* *** use ta0070 to submit the jcl                        ****/
   /* ************************************************************/

  set SLUREC empty;

  SLUREC.SLUCOUNT = 1;

  SL0GW05.SL0GWJSL = "//";
  SL0GW05.SL0GWJOB = "SL5961";
  SL0GW05.SL0GWJST = "   JOB  (DV,MUR2),'W.O. BY W.O. GRP RPT',  ";
  SLUREC.SLUJCLIN[SLUCOUNT] = SL0GW05.SL0GWJLN;
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/

  SLUREC.SLUJCLIN[SLUCOUNT] = "//         CLASS=P,                     ";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1;

  SLUREC.SLUJCLIN[SLUCOUNT] = "//         MSGCLASS=J                   ";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1;

  SL0GW05.SL0GWOUS = "/*OUTPUT  WHSE FORMS=SL01,DEST=";
  SLUREC.SLUJCLIN[SLUCOUNT] = SL0GW05.SL0GWOUP;
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/

  SLUREC.SLUJCLIN[SLUCOUNT] = "//JOBLIB     DD   DSN=PROD.ONETIME.LOADLIB,DISP=SHR";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/


  SLUREC.SLUJCLIN[SLUCOUNT] = "//           DD   DSN=PROD.COB2.LOADLIB,DISP=SHR";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/


  SLUREC.SLUJCLIN[SLUCOUNT] = "//           DD   DSN=PROD.LOADLIB,DISP=SHR";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/

  if (SL0GM510.SL0GMSRT == "1")
    SLUJCLIN[SLUCOUNT] = "//S0010    EXEC SL5961 ";
    SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/
  else
    SLUJCLIN[SLUCOUNT] = "//S0010   EXEC SL5961, ";
    SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/
    SLUJCLIN[SLUCOUNT] = "//             SRTPARM=SL596120 ";
    SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/
  end

  SLUJCLIN[SLUCOUNT] = "//P0010.SYSIN   DD *";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/

  SLUJCLIN[SLUCOUNT] = SL0GW05.SL0GWLC5;
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/

  SLUJCLIN[SLUCOUNT] = "//P0030.SYSIN   DD *";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/

  SLUJCLIN[SLUCOUNT] = SL0GW05.SL0GWLC5;
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/

  SLUJCLIN[SLUCOUNT] = "//*                             ";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/

  SLUJCLIN[SLUCOUNT] = "//********* END OF SL5961 ******";
  SLUREC.SLUCOUNT = SLUREC.SLUCOUNT + 1; /* increment line count*/

  SLUJCLIN[SLUCOUNT] = "//                              ";

   /* *** perform call to submit job ****/

  SLUREC.SLURETRN = 0;

  try
    call "TA0070" (SLUREC) {isNoRefresh = yes};
  end

  if (SLUREC.SLURETRN != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S5AA";
    SLWREC.SLWMSGNO = 0058; /* <--- print request failed msg*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GS5A

// whse edit
Function SL0GS5C()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (SL0GM510.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0GM510.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      SL0GM510.XWHABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S5CA";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0GM510.XWHCD cursor, bold;
      return;
    end
  else
    SL0GM510.XWHABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S5CB";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0GM510.XWHCD cursor, bold;
    return;
  end

  SL0GS5P(); /* <=== setup printers*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GS5C

// use input printer dest
Function SL0GS5I()


   /* ************************************************************/
   /* *** make sure selection & printer dest. abrv. are input ****/
   /* *** note: exit if either fld missing (error)            ****/
   /* *** find dest. abrv. in table                           ****/
   /* *** save dest. id in output jcl line in ws              ****/
   /* ************************************************************/

  if (SL0GM510.SL0GMPID > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S5IA";
    SLWREC.SLWMSGNO = 0009; /* <--- requiered field msg*/
    set SL0GM510.SL0GMPID cursor, bold;
  end

  if (SL0GM510.SL0GMSEL > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S5IB";
    SLWREC.SLWMSGNO = 0009; /* <--- requiered field msg*/
    set SL0GM510.SL0GMSEL cursor, bold;
  end

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  if (SL0GM510.SL0GMPID in XROTBL.XROABRV)
    if (XROTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0GW05.SL0GWPID = XROTBL.XROPDEST[sysVar.arrayIndex];
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S5IC";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0GM510.SL0GMPID cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S5ID";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0GM510.SL0GMPID cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GS5I

// setup printers
Function SL0GS5P()


   /* ************************************************************/
   /* *** setup printer selections on scrn & in ws            ****/
   /* *** and darken/askip all other printer flds             ****/
   /* *** note: darken/askip all, if none found               ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;
  SLWREC.SLWIDX02 = 1;

  while (XROTBL.XROCD[SLWIDX01] != "9999"
   && SLWREC.SLWIDX02 <= 6)
    if (XROTBL.XWHCD1[SLWIDX01] == SL0GM510.XWHCD
     || XROTBL.XWHCD2[SLWIDX01] == SL0GM510.XWHCD
     || XROTBL.XWHCD3[SLWIDX01] == SL0GM510.XWHCD)
      if (XROTBL.XXXSTAT[SLWIDX01] == "A")
        SL0GW05.XROPDEST[SLWIDX02] = XROTBL.XROPDEST[SLWIDX01];
        SL0GM510.XROABRV[SLWIDX02] = XROTBL.XROABRV[SLWIDX01];
        set SL0GM510.XMSLMSEL[SLWIDX02] initialAttributes;
        set SL0GM510.XROABRV[SLWIDX02] initialAttributes;
        SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
      end
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

  if (SLWREC.SLWIDX02 == 1)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S5PA";
    SLWREC.SLWMSGNO = 0054; /* <--- no printer assigned*/
    while (SLWREC.SLWIDX02 <= 6)
      set SL0GM510.XMSLMSEL[SLWIDX02] skip, invisible;
      set SL0GM510.XROABRV[SLWIDX02] skip, invisible;
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
    end
    set SL0GM510.SL0GMSEL skip, invisible;
    set SL0GM510.SL0GMPID skip, invisible;
    return;
  end

  while (SLWREC.SLWIDX02 <= 6)
    set SL0GM510.XMSLMSEL[SLWIDX02] skip, invisible;
    set SL0GM510.XROABRV[SLWIDX02] skip, invisible;
    SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
  end

  SL0GM510.SL0GMSEL = " ";
  SL0GM510.SL0GMPID = " ";
  set SL0GM510.SL0GMSEL initialAttributes;
  set SL0GM510.SL0GMPID initialAttributes;
  COMMAREA.XWHCD = SL0GM510.XWHCD;
  SL0GW05.XWHCD = SL0GM510.XWHCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GS5P

// save printer selection
Function SL0GS5S()


   /* ************************************************************/
   /* *** make sure a printer has been selected               ****/
   /* *** note: if more than 1 selected: use the first        ****/
   /* ***       therefore, edit in reverse order to use first ****/
   /* *** note: also save the printer's destination id right  ****/
   /* ***       in the ws jcl line's fld to avoid another     ****/
   /* ***       loop later (use the same index on the ws tbl) ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 6;
  SLWREC.SLWFTMSW = "Y";

  while (SLWREC.SLWIDX01 > 0)
    if (SL0GM510.XMSLMSEL[SLWIDX01] > " ")
      SLWREC.SLWFTMSW = "N";
      SL0GW05.SL0GWPID = SL0GW05.XROPDEST[SLWIDX01];
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end

  if (SLWREC.SLWFTMSW == "Y")
    if (SL0GM510.SL0GMSEL > " "
     || SL0GM510.SL0GMPID > " ")
      SL0GS5I(); /* <=== use input printer dest*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S5SA";
      SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
      set SL0GM510.XMSLMSEL[1] cursor, bold;
    end
    return;
  end

  if (SL0GM510.SL0GMPID > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S5SB";
    SLWREC.SLWMSGNO = 0065; /* <--- can't be entered now*/
    set SL0GM510.SL0GMPID cursor, bold;
  end

  if (SL0GM510.SL0GMSEL > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S5SC";
    SLWREC.SLWMSGNO = 0065; /* <--- can't be entered now*/
    set SL0GM510.SL0GMSEL cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GS5S

// reset printer fields
Function SL0GS5T()


   /* ************************************************************/
   /* *** reset all printer selection flds to blanks          ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 6;

  while (SLWREC.SLWIDX01 > 0)
    SL0GM510.XMSLMSEL[SLWIDX01] = " ";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end

   /* ************************************************************/
   /* *** setup the 1st printer as selected to avoid all the  ****/
   /* *** cursor movement to select the 1st, if it is desired ****/
   /* ***                                                     ****/
   /* *** Rev 1 deleted the default printer by commenting out ****/
   /* *** the move.                                           ****/
   /* ************************************************************/

   /* MOVE 'X' TO SL0GM510.XMSLMSEL(1);*/

   /* ************************************************************/
   /* *** reset input/optional printer flds to blanks         ****/
   /* ************************************************************/

  SL0GM510.SL0GMSEL = " ";
  SL0GM510.SL0GMPID = " ";

   /* ************************************************************/
   /* *** move default values into map fields                 ****/
   /* ************************************************************/

  SL0GM510.SL8WOGRP = 0;
  SL0GM510.SL0GMMFL = "N";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GS5T

// missing input edits
Function SL0GSA0()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: setup defaults for optional fields, if any    ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0GM010.XMSLMSNO > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA0A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0GM010.XMSLMSNO cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GSA0

// missing input edits
Function SL0GSA1()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: defaults setup during initialization          ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0GM110.YWTCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0GM110.YWTCD cursor, bold;
  end

  if (SL0GM110.SL5LOCTN > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1B";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0GM110.SL5LOCTN cursor, bold;
  end

  if (SL0GM110.SL4ZONE > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1C";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0GM110.SL4ZONE cursor, bold;
  end

  if (SL0GM110.XARCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1D";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0GM110.XARCD cursor, bold;
  end

  if (SL0GM110.YWSCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1E";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0GM110.YWSCD cursor, bold;
  end

  if (SL0GM110.SL0GMTDT != 0)
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1F";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0GM110.SL0GMTDT cursor, bold;
  end

  if (SL0GM110.SL0GMFDT != 0)
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1G";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0GM110.SL0GMFDT cursor, bold;
  end

  if (SL0GM110.XWHCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1H";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0GM110.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GSA1

// missing key inputs edits
Function SL0GSA2()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: defaults setup during initialization          ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0GM210.XOWCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0GM210.XOWCD cursor, bold;
  end

  if (SL0GM210.XUMCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2B";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0GM210.XUMCD cursor, bold;
  end

  if (SL0GM210.XPGCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2C";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0GM210.XPGCD cursor, bold;
  end

  if (SL0GM210.XSLCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2D";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0GM210.XSLCD cursor, bold;
  end

  if (SL0GM210.XSDCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2E";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0GM210.XSDCD cursor, bold;
  end

  if (SL0GM210.XQACD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2F";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0GM210.XQACD cursor, bold;
  end

  if (SL0GM210.XDMCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2G";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0GM210.XDMCD cursor, bold;
  end

  if (SL0GM210.SY2CLRID > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2H";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0GM210.SY2CLRID cursor, bold;
  end

  if (SL0GM210.SY1STNBR > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2I";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0GM210.SY1STNBR cursor, bold;
  end

  if (SL0GM210.XGPCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2J";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0GM210.XGPCD cursor, bold;
  end

  if (SL0GM210.YWTCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2K";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0GM210.YWTCD cursor, bold;
  end

  if (SL0GM210.YWSCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2L";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0GM210.YWSCD cursor, bold;
  end

  if (SL0GM210.SL0GMTDT != 0)
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2M";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0GM210.SL0GMTDT cursor, bold;
  end

  if (SL0GM210.SL0GMFDT != 0)
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2N";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0GM210.SL0GMFDT cursor, bold;
  end

  if (SL0GM210.XWHCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2O";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0GM210.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GSA2

// missing key inputs edits
Function SL0GSA3()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: defaults setup during initialization          ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0GM310.YWTCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0GM310.YWTCD cursor, bold;
  end

  if (SL0GM310.YWSCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3B";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0GM310.YWSCD cursor, bold;
  end

  if (SL0GM310.SL0GMTDT != 0)
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3C";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0GM310.SL0GMTDT cursor, bold;
  end

  if (SL0GM310.SL0GMFDT != 0)
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3D";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0GM310.SL0GMFDT cursor, bold;
  end

  if (SL0GM310.XWHCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3E";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0GM310.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GSA3

// missing key inputs edits
Function SL0GSA4()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: defaults setup during initialization          ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0GM410.SL8WONBR != 0)
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA4A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0GM410.SL8WONBR cursor, bold;
  end
  if (SL0GM410.XWHCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA4B";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0GM410.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GSA4

// missing input edits
Function SL0GSA5()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: defaults setup during initialization          ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0GM510.SL0GMSRT > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA5A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0GM510.SL0GMSRT cursor, bold;
  end

  if (SL0GM510.SL0GMMFL != " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA5B";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0GM510.SL0GMMFL cursor, bold;
  end

  if (SL0GM510.SL8WOGRP != 0)
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA5C";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0GM510.SL8WOGRP cursor, bold;
  end

  if (SL0GM510.XWHCD > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA5D";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0GM510.XWHCD cursor, bold;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GSA5

// same whse check
Function SL0GSB1()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw. (slwskysw)****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (SL0GM110.XWHCD != SL0GW01.XWHCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GSB1

// same whse check
Function SL0GSB2()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw. (slwskysw)****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (SL0GM210.XWHCD != SL0GW02.XWHCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GSB2

// same whse check
Function SL0GSB3()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw. (slwskysw)****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (SL0GM310.XWHCD != SL0GW03.XWHCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GSB3

// same whse check
Function SL0GSB4()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw. (in0iwsks)****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (SL0GM410.XWHCD != SL0GW04.XWHCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GSB4

// same whse check
Function SL0GSB5()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw. (in0iwsks)****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (SL0GM510.XWHCD != SL0GW05.XWHCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GSB5

// key field edits
Function SL0GSC1()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

  if (SL0GM110.YWTCD != "A ")
    if (SL0GM110.YWTCD in YWTTBL.YWTCD)
      if (YWTTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC1A";
        SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
        set SL0GM110.YWTCD cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1B";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0GM110.YWTCD cursor, bold;
    end
  end

  TA1REC.TA1LOCAT[2] = "SL0GSC1 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

   /* *** verify location ****/

  if (SL0GM110.SL0GMFDT != SL0GW01.SL0GWFDT
   || SL0GM110.SL0GMTDT != SL0GW01.SL0GWTDT
   || SL0GM110.YWSCD != SL0GW01.YWSCD
   || SL0GM110.XARCD != SL0GW01.XARCD
   || SL0GM110.SL4ZONE != SL0GW01.SL4ZONE
   || SL0GM110.SL5LOCTN != SL0GW01.SL5LOCTN
   || SL0GM110.YWTCD != SL0GW01.YWTCD)
    SL0GW01.SL0GWLSW = "N";
  end

  set SL5REC empty;
  SL5REC.XWHCD = SL0GM110.XWHCD;
  SL5REC.XARCD = SL0GM110.XARCD;
  SL5REC.SL4ZONE = SL0GM110.SL4ZONE;
  if (SL0GM110.SL5LOCTN == "      ")
    SL5REC.SL5LOCTN = "*";
  else
    SL5REC.SL5LOCTN = SL0GM110.SL5LOCTN;
  end

  XSSL5I0(); /* obtain location record*/

  if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
    if (SL0GW01.SL0GWLSW == "Y")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SL0GW01.SL0GWLSW = "Y";
      SLWREC.XXXLOCID = "SC1C";
      SLWREC.SLWMSGNO = 0208; /* <--- not on db msg*/
      set SL0GM110.XARCD cursor, bold;
      set SL0GM110.SL4ZONE bold;
      set SL0GM110.SL5LOCTN bold;
      SL0GSF1(); /* save the key*/
      return;
    end
    SL0GW01.SL0GWLSW = "N";
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1D";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -811) /* <=== for INQUIRY*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1E";
    SLWREC.SLWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != +100)
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "SC1F";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

  if (SL0GM110.YWSCD != "A ")
    if (SL0GM110.YWSCD in YWSTBL.YWSCD)
      if (YWSTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC1G";
        SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
        set SL0GM110.YWSCD cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1H";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0GM110.YWSCD cursor, bold;
    end
  end

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";
  TA2REC.TA2GRGAN = SL0GM110.SL0GMTDT;
  call "TA0040" (TA2REC) {isNoRefresh = yes};

  if (TA2REC.TA2RTNCD == 0)
    SL0GW01.SL0GWTDB = TA2REC.TA2GRGGN;
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1I";
    SLWREC.SLWMSGNO = 0021; /* <--- invalid value msg*/
    set SL0GM110.SL0GMTDT cursor, bold;
  end

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";
  TA2REC.TA2GRGAN = SL0GM110.SL0GMFDT;
  call "TA0040" (TA2REC) {isNoRefresh = yes};

  if (TA2REC.TA2RTNCD == 0)
    SL0GW01.SL0GWFDB = TA2REC.TA2GRGGN;
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1J";
    SLWREC.SLWMSGNO = 0021; /* <--- invalid value msg*/
    set SL0GM110.SL0GMFDT cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GSC1

// individual field edits
Function SL0GSC2()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

  if (SL0GM210.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] == "Y")
      if (SL0GM210.XOWCD in XOWTBL.XOWCD)
        if (XOWTBL.XXXSTAT[sysVar.arrayIndex] == "A")
           /* next sentence*/
        else
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SC2A";
          SLWREC.SLWMSGNO = 010; /* <--- inactive msg*/
          set SL0GM210.XOWCD cursor, bold;
        end
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC2B";
        SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
        set SL0GM210.XOWCD cursor, bold;
      end
    end
  end

  if (SL0GM210.XUMCD in XUMTBL.XUMCD)
    if (XUMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2A";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0GM210.XUMCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2B";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0GM210.XUMCD cursor, bold;
  end

  if (SL0GM210.XPGCD in XPGTBL.XPGCD)
    if (XPGTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2C";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0GM210.XPGCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2D";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0GM210.XPGCD cursor, bold;
  end

  if (SL0GM210.XSLCD in XSLTBL.XSLCD)
    if (XSLTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2E";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0GM210.XSLCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2F";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0GM210.XSLCD cursor, bold;
  end

  set PC2REC empty; /* clear row storage area*/

  PC2REC.XGPCD = SL0GM210.XGPCD;
  PC2REC.PC2INSEG = SL0GM210.XSDCD;
  call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes};
  if (SQLCA.VAGen_SQLCODE == +0)
    if (PC2REC.XXXSTAT == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2G";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0GM210.XSDCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2J";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0GM210.XSDCD cursor, bold;
  end

  if (SL0GM210.XQACD in XQATBL.XQACD)
    if (XQATBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2I";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0GM210.XQACD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2J";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0GM210.XQACD cursor, bold;
  end

  if (SL0GM210.XDMCD in XDMTBL.XDMCD)
    if (XDMTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2K";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0GM210.XDMCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2L";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0GM210.XDMCD cursor, bold;
  end

  if (SL0GM210.XGPCD in XGPTBL.XGPCD)
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
       /* next sentence*/
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2M";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0GM210.XGPCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2N";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0GM210.XGPCD cursor, bold;
  end

  TA1REC.TA1LOCAT[2] = "SL0GSC2 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  SYCREC.XGPCD = SL0GM210.XGPCD;
  SYCREC.SY1STNBR = SL0GM210.SY1STNBR;
  SYCREC.SY2CLRID = SL0GM210.SY2CLRID;
  SYCREC.XDMCD = SL0GM210.XDMCD;

  XSSYCI0(); /* <=== std prod loctn inquiry*/

  if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2O";
    SLWREC.SLWMSGNO = 0056; /* <--- not on db msg*/
    set SL0GM210.SY1STNBR cursor, bold;
    set SL0GM210.SY2CLRID bold;
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2P";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0)
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "SC2Q";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

  if (SL0GM210.YWTCD != "A ")
    if (SL0GM210.YWTCD in YWTTBL.YWTCD)
      if (YWTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC2R";
        SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
        set SL0GM210.YWTCD cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2S";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0GM210.YWTCD cursor, bold;
    end
  end

  if (SL0GM210.YWSCD != "A ")
    if (SL0GM210.YWSCD in YWSTBL.YWSCD)
      if (YWSTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC2T";
        SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
        set SL0GM210.YWSCD cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2U";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0GM210.YWSCD cursor, bold;
    end
  end

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";
  TA2REC.TA2GRGAN = SL0GM210.SL0GMTDT;
  call "TA0040" (TA2REC) {isNoRefresh = yes};

  if (TA2REC.TA2RTNCD == 0)
    SL0GW02.SL0GWTDB = TA2REC.TA2GRGGN;
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2V";
    SLWREC.SLWMSGNO = 0021; /* <--- invalid value msg*/
    set SL0GM210.SL0GMTDT cursor, bold;
  end

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";
  TA2REC.TA2GRGAN = SL0GM210.SL0GMFDT;
  call "TA0040" (TA2REC) {isNoRefresh = yes};

  if (TA2REC.TA2RTNCD == 0)
    SL0GW02.SL0GWFDB = TA2REC.TA2GRGGN;
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2W";
    SLWREC.SLWMSGNO = 0021; /* <--- invalid value msg*/
    set SL0GM210.SL0GMFDT cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GSC2

// key field edits
Function SL0GSC3()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/


  if (SL0GM310.YWTCD != "A ")
    if (SL0GM310.YWTCD in YWTTBL.YWTCD)
      if (YWTTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC3A";
        SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
        set SL0GM310.YWTCD cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC3B";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0GM310.YWTCD cursor, bold;
    end
  end

  if (SL0GM310.YWSCD != "A ")
    if (SL0GM310.YWSCD in YWSTBL.YWSCD)
      if (YWSTBL.XXXSTAT[sysVar.arrayIndex] == "A")
         /* next sentence*/
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC3C";
        SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
        set SL0GM310.YWSCD cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC3D";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0GM310.YWSCD cursor, bold;
    end
  end

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";
  TA2REC.TA2GRGAN = SL0GM310.SL0GMTDT;
  call "TA0040" (TA2REC) {isNoRefresh = yes};

  if (TA2REC.TA2RTNCD == 0)
    SL0GW03.SL0GWTDB = TA2REC.TA2GRGGN;
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC3E";
    SLWREC.SLWMSGNO = 0021; /* <--- invalid value msg*/
    set SL0GM310.SL0GMTDT cursor, bold;
  end

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";
  TA2REC.TA2GRGAN = SL0GM310.SL0GMFDT;
  call "TA0040" (TA2REC) {isNoRefresh = yes};

  if (TA2REC.TA2RTNCD == 0)
    SL0GW03.SL0GWFDB = TA2REC.TA2GRGGN;
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC3F";
    SLWREC.SLWMSGNO = 0021; /* <--- invalid value msg*/
    set SL0GM310.SL0GMFDT cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GSC3

// key field edits
Function SL0GSC4()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* *** validate work order number from live & history w.o  ****/
   /* *** headers.                                            ****/

  set SL8REC empty;

  SL8REC.XWHCD = SL0GM410.XWHCD;
  SL8REC.SL8WONBR = SL0GM410.SL8WONBR;

  XSSL8I0(); /* select unique w.o. live hdr rec*/

  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC4A";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE < 0)
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "SC4B";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100) /* no live records*/
    set SLBREC empty;
    SLBREC.XWHCD = SL0GM410.XWHCD;
    SLBREC.SL8WONBR = SL0GM410.SL8WONBR;

    XSSLBI0(); /* select unique w.o. history hdr rec*/

    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWSKYSW = "N";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC4C";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE < 0)
      SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
      SLWREC.XXXLOCID = "SC4D";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == +100) /* no history records*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC4E";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0GM410.SL8WONBR cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GSC4

// individual field edits
Function SL0GSC5()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* *** validate sort selection                             ****/
   /* ***                                                     ****/

  if (SL0GM510.SL0GMSRT == "1" /* <--- validate sort selection*/
   || SL0GM510.SL0GMSRT == "2")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC5A";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value message*/
    set SL0GMSRT cursor, bold;
    return;
  end

   /* *** validate work order group from live & history w.o   ****/
   /* *** headers.                                            ****/

  set SL8REC empty;

  SL8REC.XWHCD = SL0GM510.XWHCD;
  SL8REC.SL8WOGRP = SL0GM510.SL8WOGRP;

  XSSL8S5(); /* select set w.o. live hdr recs*/

  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC5B";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE < 0)
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "SC5C";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    XSSL8C5(); /* close w.o. live hdr cursor*/
  else /* no live records*/
    set SLBREC empty;
    SLBREC.XWHCD = SL0GM510.XWHCD;
    SLBREC.SL8WOGRP = SL0GM510.SL8WOGRP;
    XSSLBS5(); /* select set w.o. history hdr recs*/
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWSKYSW = "N";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC5D";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE < 0)
      SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
      SLWREC.XXXLOCID = "SC5E";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == 0)
      XSSLBC5(); /* close w.o. hist hdr cursor*/
    else /* no history records*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC5F";
      SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
      set SL0GM510.SL8WOGRP cursor, bold;
    end
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GSC5

// relational field edits
Function SL0GSD1()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** start date cannot be greater than the end date      ****/
   /* ************************************************************/

  if (SL0GW01.SL0GWFDB > SL0GW01.SL0GWTDB)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD1A";
    SLWREC.SLWMSGNO = 0022; /* <--- end > start msg*/
    set SL0GM110.SL0GMFDT cursor, bold;
    set SL0GM110.SL0GMTDT bold;
    return;
  end

   /* ************************************************************/
   /* *** cannot be more than 30 days between dates           ****/
   /* *** note: check is non-incluse (re: use of '29')        ****/
   /* ************************************************************/

  set TA2REC empty;
  TA2REC.TA2DBDFN = SL0GW01.SL0GWFDB;
  TA2REC.TA2DBDTN = SL0GW01.SL0GWTDB;
  TA2REC.TA2CENT = SLWREC.SLWWKCC;
  TA2REC.TA2DTOPT = "DAYSDIFF";
  call "TA0040" (TA2REC) {isNoRefresh = yes};
  if (TA2REC.TA2RTNCD == 0)
    if (TA2REC.TA2DBDDN > 29)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD1B";
      SLWREC.SLWMSGNO = 0023; /* <--- days between exceeded*/
      set SL0GM110.SL0GMTDT cursor, bold;
      set SL0GM110.SL0GMFDT bold;
      return;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD1C";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    set SL0GM110.SL0GMTDT cursor, bold;
    set SL0GM110.SL0GMFDT bold;
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GSD1

// key relational edits
Function SL0GSD2()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** start date cannot be greater than the end date      ****/
   /* ************************************************************/

  if (SL0GW02.SL0GWFDB > SL0GW02.SL0GWTDB)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD2A";
    SLWREC.SLWMSGNO = 0022; /* <--- end > start msg*/
    set SL0GM210.SL0GMFDT cursor, bold;
    set SL0GM210.SL0GMTDT bold;
    return;
  end

   /* ************************************************************/
   /* *** cannot be more than 30 days between dates           ****/
   /* *** note: check is non-incluse (re: use of '29')        ****/
   /* ************************************************************/

  set TA2REC empty;
  TA2REC.TA2DBDFN = SL0GW02.SL0GWFDB;
  TA2REC.TA2DBDTN = SL0GW02.SL0GWTDB;
  TA2REC.TA2CENT = SLWREC.SLWWKCC;
  TA2REC.TA2DTOPT = "DAYSDIFF";
  call "TA0040" (TA2REC) {isNoRefresh = yes};
  if (TA2REC.TA2RTNCD == 0)
    if (TA2REC.TA2DBDDN > 29)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD2B";
      SLWREC.SLWMSGNO = 0023; /* <--- days between exceeded*/
      set SL0GM210.SL0GMTDT cursor, bold;
      set SL0GM210.SL0GMFDT bold;
      return;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD2C";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    set SL0GM210.SL0GMTDT cursor, bold;
    set SL0GM210.SL0GMFDT bold;
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GSD2

// key relational edits
Function SL0GSD3()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** start date cannot be greater than the end date      ****/
   /* ************************************************************/

  if (SL0GW03.SL0GWFDB > SL0GW03.SL0GWTDB)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD3A";
    SLWREC.SLWMSGNO = 0022; /* <--- end > start msg*/
    set SL0GM310.SL0GMFDT cursor, bold;
    set SL0GM310.SL0GMTDT bold;
    return;
  end

   /* ************************************************************/
   /* *** cannot be more than 30 days between dates           ****/
   /* *** note: check is non-incluse (re: use of '29')        ****/
   /* ************************************************************/

  set TA2REC empty;
  TA2REC.TA2DBDFN = SL0GW03.SL0GWFDB;
  TA2REC.TA2DBDTN = SL0GW03.SL0GWTDB;
  TA2REC.TA2CENT = SLWREC.SLWWKCC;
  TA2REC.TA2DTOPT = "DAYSDIFF";
  call "TA0040" (TA2REC) {isNoRefresh = yes};
  if (TA2REC.TA2RTNCD == 0)
    if (TA2REC.TA2DBDDN > 29)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SD3B";
      SLWREC.SLWMSGNO = 0023; /* <--- days between exceeded*/
      set SL0GM310.SL0GMTDT cursor, bold;
      set SL0GM310.SL0GMFDT bold;
      return;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD3C";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    set SL0GM310.SL0GMTDT cursor, bold;
    set SL0GM310.SL0GMFDT bold;
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GSD3

// save key values
Function SL0GSF1()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  SL0GW01.SL0GWFDT = SL0GM110.SL0GMFDT;
  SL0GW01.SL0GWTDT = SL0GM110.SL0GMTDT;
  SL0GW01.YWSCD = SL0GM110.YWSCD;
  SL0GW01.XARCD = SL0GM110.XARCD;
  SL0GW01.SL4ZONE = SL0GM110.SL4ZONE;
  SL0GW01.SL5LOCTN = SL0GM110.SL5LOCTN;
  SL0GW01.YWTCD = SL0GM110.YWTCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GSF1

// save current key value(s)
Function SL0GSF2()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  SL0GW02.SL0GWFDT = SL0GM210.SL0GMFDT;
  SL0GW02.SL0GWTDT = SL0GM210.SL0GMTDT;
  SL0GW02.YWSCD = SL0GM210.YWSCD;
  SL0GW02.YWTCD = SL0GM210.YWTCD;
  SL0GW02.XGPCD = SL0GM210.XGPCD;
  SL0GW02.SY1STNBR = SL0GM210.SY1STNBR;
  SL0GW02.SY2CLRID = SL0GM210.SY2CLRID;
  SL0GW02.XDMCD = SL0GM210.XDMCD;
  SL0GW02.XQACD = SL0GM210.XQACD;
  SL0GW02.XSDCD = SL0GM210.XSDCD;
  SL0GW02.XSLCD = SL0GM210.XSLCD;
  SL0GW02.XPGCD = SL0GM210.XPGCD;
  SL0GW02.XUMCD = SL0GM210.XUMCD;
  SL0GW02.XOWCD = SL0GM210.XOWCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GSF2

// save current key value(s)
Function SL0GSF3()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  SL0GW03.SL0GWFDT = SL0GM310.SL0GMFDT;
  SL0GW03.SL0GWTDT = SL0GM310.SL0GMTDT;
  SL0GW03.YWSCD = SL0GM310.YWSCD;
  SL0GW03.YWTCD = SL0GM310.YWTCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GSF3

// save current key value(s)
Function SL0GSF4()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  SL0GW04.SL0GWNBR = SL0GM410.SL8WONBR;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GSF4

// save key values
Function SL0GSF5()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  SL0GW05.SL0GWGRP = SL0GM510.SL8WOGRP;
  SL0GW05.SL0GWMFL = SL0GM510.SL0GMMFL;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GSF5

// ENTER processing
Function SL0GSH0()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0GSA0(); /* <=== missing input edits*/

   /* ************************************************************/
   /* *** no missing fields:                                  ****/
   /* *** invalid selection detected in flow when             ****/
   /* *** transfer of control is attempted                    ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GSH0

// ENTER processing
Function SL0GSH1()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0GSA1(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check whse for setting up printers       ****/
   /* ************************************************************/

  SL0GSB1(); /* <=== same whse check*/

  if (SLWREC.SLWSKYSW == "N")
    SL0GS1C(); /* <=== whse edit*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: check other field edits                  ****/
   /* ************************************************************/

  SL0GSC1(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0GSD1(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: save other key values                    ****/
   /* ************************************************************/

  SL0GSF1(); /* <=== save values*/

   /* ************************************************************/
   /* *** select printer                                      ****/
   /* ************************************************************/

  SL0GS1S(); /* <=== select printer*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end
   /* ************************************************************/
   /* *** no errors: setup & submit jcl                       ****/
   /* ************************************************************/

  SL0GS1A(); /* <=== setup & submit jcl*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** reset the screen for new input & display msg        ****/
   /* *** only blank out the container flds                   ****/
   /* ************************************************************/

  SL0GS1T(); /* <=== reset fields*/

  SLWREC.SLWMSGNO = 0019; /* <--- report(s) printed msg*/
  SLWREC.XXXLOCID = "120 "; /* <=== reset error id*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GSH1

// ENTER processing
Function SL0GSH2()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0GSA2(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check whse for setting up printers       ****/
   /* ************************************************************/

  SL0GSB2(); /* <=== same whse check*/

  if (SLWREC.SLWSKYSW == "N")
    SL0GS2C(); /* <=== whse edit*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: check other field edits                  ****/
   /* ************************************************************/

  SL0GSC2(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0GSD2(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: save other key values                    ****/
   /* ************************************************************/

  SL0GSF2(); /* <=== save values*/

   /* ************************************************************/
   /* *** select printer                                      ****/
   /* ************************************************************/

  SL0GS2S(); /* <=== select printer*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end
   /* ************************************************************/
   /* *** no errors: setup & submit jcl                       ****/
   /* ************************************************************/

  SL0GS2A(); /* <=== setup & submit jcl*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** reset the screen for new input & display msg        ****/
   /* *** only blank out the container flds                   ****/
   /* ************************************************************/

  SL0GS2T(); /* <=== reset fields*/

  SLWREC.SLWMSGNO = 0019; /* <--- report(s) printed msg*/
  SLWREC.XXXLOCID = "220 "; /* <=== reset error id*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GSH2

// ENTER processing
Function SL0GSH3()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0GSA3(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check whse for setting up printers       ****/
   /* ************************************************************/

  SL0GSB3(); /* <=== same whse check*/

  if (SLWREC.SLWSKYSW == "N")
    SL0GS3C(); /* <=== whse edit*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: check other field edits                  ****/
   /* ************************************************************/

  SL0GSC3(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0GSD3(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: save other key values                    ****/
   /* ************************************************************/

  SL0GSF3(); /* <=== save values*/

   /* ************************************************************/
   /* *** select printer                                      ****/
   /* ************************************************************/

  SL0GS3S(); /* <=== select printer*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end
   /* ************************************************************/
   /* *** no errors: setup & submit jcl                       ****/
   /* ************************************************************/

  SL0GS3A(); /* <=== setup & submit jcl*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** reset the screen for new input & display msg        ****/
   /* *** only blank out the container flds                   ****/
   /* ************************************************************/

  SL0GS3T(); /* <=== reset fields*/

  SLWREC.SLWMSGNO = 0019; /* <--- report(s) printed msg*/
  SLWREC.XXXLOCID = "320 "; /* <=== reset error id*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GSH3

// ENTER processing
Function SL0GSH4()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0GSA4(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check whse for setting up printers       ****/
   /* ************************************************************/

  SL0GSB4(); /* <=== same whse check*/

  if (SLWREC.SLWSKYSW == "N")
    SL0GS4C(); /* <=== whse edit*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: check other field edits                  ****/
   /* ************************************************************/

  SL0GSC4(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: save other key values                    ****/
   /* ************************************************************/

  SL0GSF4(); /* <=== save values*/

   /* ************************************************************/
   /* *** select printer                                      ****/
   /* ************************************************************/

  SL0GS4S(); /* <=== select printer*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end
   /* ************************************************************/
   /* *** no errors: setup & submit jcl                       ****/
   /* ************************************************************/

  SL0GS4A(); /* <=== setup & submit jcl*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** reset the screen for new input & display msg        ****/
   /* *** only blank out the container flds                   ****/
   /* ************************************************************/

  SL0GS4T(); /* <=== reset fields*/

  SLWREC.SLWMSGNO = 0019; /* <--- report(s) printed msg*/
  SLWREC.XXXLOCID = "420 "; /* <=== reset error id*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GSH4

// ENTER processing
Function SL0GSH5()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0GSA5(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check whse for setting up printers       ****/
   /* ************************************************************/

  SL0GSB5(); /* <=== same whse check*/

  if (SLWREC.SLWSKYSW == "N")
    SL0GS5C(); /* <=== whse edit*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: check other field edits                  ****/
   /* ************************************************************/

  SL0GSC5(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: save other key values                    ****/
   /* ************************************************************/

  SL0GSF5(); /* <=== save values*/

   /* ************************************************************/
   /* *** select printer                                      ****/
   /* ************************************************************/

  SL0GS5S(); /* <=== select printer*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end
   /* ************************************************************/
   /* *** no errors: setup & submit jcl                       ****/
   /* ************************************************************/

  SL0GS5A(); /* <=== setup & submit jcl*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** reset the screen for new input & display msg        ****/
   /* *** only blank out the container flds                   ****/
   /* ************************************************************/

  SL0GS5T(); /* <=== reset fields*/

  SLWREC.SLWMSGNO = 0019; /* <--- report(s) printed msg*/
  SLWREC.XXXLOCID = "520 "; /* <=== reset error id*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GSH5

// CAITEM processing
Function SL0GSY0()


   /* ************************************************************/
   /* *** if entered, use CAITEM data by first moving it to   ****/
   /* *** a ws field to make use of it with "redefines"       ****/
   /* *** note: CAITEM = character data as passed             ****/
   /* ************************************************************/

  SLWREC.CAITEM = COMMAREA.CAITEM;

  if (SLWREC.SLWCASNO > " ")
    SL0GM010.XMSLMSNO = SLWREC.SLWCASNO;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0GSY0

//*** RECORD=SL0GW01 ****
// ************************************************************
// 
//           STOCK LOCATE INQUIRY SKELETON
//           =============================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used specifically
//           by an application/function.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-87  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0GW01 type basicRecord
  10 SL0GWJLN SL0GWJLN ; 
    15 SL0GWJSL SL0GWJSL ; 
    15 SL0GWJOB SL0GWJOB ; 
    15 SL0GWJST SL0GWJST ; 
  10 SL0GWOUP SL0GWOUP ; 
    15 SL0GWOUS SL0GWOUS ; 
    15 SL0GWPID SL0GWPID ; 
    15 * char(41) ; 
  10 SL0GWLC1 SL0GWLC1 ; 
    15 XWHCD XWHCD ; 
    15 SL0GWFDT SL0GWFDT ; 
    15 SL0GWTDT SL0GWTDT ; 
    15 YWSCD YWSCD ; 
    15 XARCD XARCD ; 
    15 SL4ZONE SL4ZONE ; 
    15 SL5LOCTN SL5LOCTN ; 
    15 YWTCD YWTCD ; 
  10 SL0GWFDB SL0GWFDB ; 
  10 SL0GWTDB SL0GWTDB ; 
  10 XROPDEST XROPDEST [6] ; 
  10 SL0GWLSW SL0GWLSW ; 
end // end SL0GW01

//*** RECORD=SL0GW02 ****
// ************************************************************
// 
//           STOCK LOCATE INQUIRY SKELETON
//           =============================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used specifically
//           by an application/function.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-87  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0GW02 type basicRecord
  10 SL0GWJLN SL0GWJLN ; 
    15 SL0GWJSL SL0GWJSL ; 
    15 SL0GWJOB SL0GWJOB ; 
    15 SL0GWJST SL0GWJST ; 
  10 SL0GWOUP SL0GWOUP ; 
    15 SL0GWOUS SL0GWOUS ; 
    15 SL0GWPID SL0GWPID ; 
    15 * char(41) ; 
  10 SL0GWLC2 SL0GWLC2 ; 
    15 XWHCD XWHCD ; 
    15 SL0GWFDT SL0GWFDT ; 
    15 SL0GWTDT SL0GWTDT ; 
    15 YWSCD YWSCD ; 
    15 YWTCD YWTCD ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 XQACD XQACD ; 
    15 XSDCD XSDCD ; 
    15 XSLCD XSLCD ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
    15 XOWCD XOWCD ; 
  10 SL0GWFDB SL0GWFDB ; 
  10 SL0GWTDB SL0GWTDB ; 
  10 XROPDEST XROPDEST [6] ; 
end // end SL0GW02

//*** RECORD=SL0GW03 ****
// ************************************************************
// 
//           STOCK LOCATE INQUIRY SKELETON
//           =============================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used specifically
//           by an application/function.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-87  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0GW03 type basicRecord
  10 SL0GWJLN SL0GWJLN ; 
    15 SL0GWJSL SL0GWJSL ; 
    15 SL0GWJOB SL0GWJOB ; 
    15 SL0GWJST SL0GWJST ; 
  10 SL0GWOUP SL0GWOUP ; 
    15 SL0GWOUS SL0GWOUS ; 
    15 SL0GWPID SL0GWPID ; 
    15 * char(41) ; 
  10 SL0GWLC3 SL0GWLC3 ; 
    15 XWHCD XWHCD ; 
    15 SL0GWFDT SL0GWFDT ; 
    15 SL0GWTDT SL0GWTDT ; 
    15 YWSCD YWSCD ; 
    15 YWTCD YWTCD ; 
  10 SL0GWFDB SL0GWFDB ; 
  10 SL0GWTDB SL0GWTDB ; 
  10 XROPDEST XROPDEST [6] ; 
end // end SL0GW03

//*** RECORD=SL0GW04 ****
// ************************************************************
// 
//           STOCK LOCATE INQUIRY SKELETON
//           =============================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used specifically
//           by an application/function.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-87  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0GW04 type basicRecord
  10 SL0GWJLN SL0GWJLN ; 
    15 SL0GWJSL SL0GWJSL ; 
    15 SL0GWJOB SL0GWJOB ; 
    15 SL0GWJST SL0GWJST ; 
  10 SL0GWOUP SL0GWOUP ; 
    15 SL0GWOUS SL0GWOUS ; 
    15 SL0GWPID SL0GWPID ; 
    15 * char(41) ; 
  10 SL0GWLC4 SL0GWLC4 ; 
    15 XWHCD XWHCD ; 
    15 SL0GWNBR SL0GWNBR ; 
  10 XROPDEST XROPDEST [6] ; 
end // end SL0GW04

//*** RECORD=SL0GW05 ****
// ************************************************************
// 
//           STOCK LOCATE INQUIRY SKELETON
//           =============================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used specifically
//           by an application/function.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-87  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0GW05 type basicRecord
  10 SL0GWJLN SL0GWJLN ; 
    15 SL0GWJSL SL0GWJSL ; 
    15 SL0GWJOB SL0GWJOB ; 
    15 SL0GWJST SL0GWJST ; 
  10 SL0GWOUP SL0GWOUP ; 
    15 SL0GWOUS SL0GWOUS ; 
    15 SL0GWPID SL0GWPID ; 
    15 * char(41) ; 
  10 SL0GWLC5 SL0GWLC5 ; 
    15 XWHCD XWHCD ; 
    15 SL0GWGRP SL0GWGRP ; 
    15 SL0GWMFL SL0GWMFL ; 
  10 XROPDEST XROPDEST [6] ; 
end // end SL0GW05

// from date binary
DataItem SL0GWFDB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// from date
DataItem SL0GWFDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work order group number
DataItem SL0GWGRP num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// job line of jcl
DataItem SL0GWJLN char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jobname
DataItem SL0GWJOB char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jobcard slashes
DataItem SL0GWJSL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// rest of the job card
DataItem SL0GWJST char(70)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// location data from screen
DataItem SL0GWLC1 char(28)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// location data from screen
DataItem SL0GWLC2 char(45)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// location data from screen
DataItem SL0GWLC3 char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// location data from screen
DataItem SL0GWLC4 char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// location data from screen
DataItem SL0GWLC5 char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// location not found switch
DataItem SL0GWLSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// multiple w.o. per page flag
DataItem SL0GWMFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work order number
DataItem SL0GWNBR num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// jes2 output line of jcl
DataItem SL0GWOUP char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jes2 output statement
DataItem SL0GWOUS char(31)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// remote printer id
DataItem SL0GWPID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// to data binary
DataItem SL0GWTDB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// to date
DataItem SL0GWTDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

