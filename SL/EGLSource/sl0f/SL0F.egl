package sl0f;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import pc.common.*;
import pk.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import ts.common.*;
import vv.common.*;
import ww.common.*;
//*** PROGRAM=SL0F ****
// ************************************************************
// 
//           STOCK LOCATE INQUIRY SKELETON
//           =============================
// 
// ************************************************************
// 
// OVERVIEW: This application is intended to display the data
//           selected from the user inputs.
// 
//           It has been designed to be able to save a non-
//           restricted number of lines to display for the
//           BY W.O. NBR and BY W.O. GROUP functions and a
//           restricted number of pages for the by location
//           and by product functions. Data is stored in a
//           CICS Temporary Storage Queue (TSQ) and retrieved
//           by relative record/index number (including
//           blank lines).
// 
//           PF7/PF8 will page to the NEXT/PREV pages.
// 
//           PF10/PF11 will page LEFT/RIGHT on the current
//           page of data (actually left & right on the TSQ
//           data record.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// 00  01/26/87  ward jones  created
// 01  08/31/88  ward jones  add reset scrn on fast path error
// 02  11/14/88  ward jones  remove slurec from appl list
// 03  11/15/88  john wood   added xssegtr logic
// 04  06/22/89  ernie smith 'omit type' option
//                           page limits on displayed data
//                             in 'by loc/by prod' functions
//                           sort by w.o. nbr in 'by loc/
//                             by prod' functions
//                           new linkage record and common code
//                             modules to access db1420
//                           new common code modules for new
//                             cursor options in io1510/io1530
// 
// 05  04/04/90  kande1    replace xsdtbl with pc2rec and
//                         io3340
// 
// 06  10/09/90  sjohns    db2 table changes:
//                           - rename xsdcd to pc2inseg
//                           - rename xsacd to xegcd
// 
// 07  10/22/90  mkraus    add fields to maps:
//                           - plan number
//                           - po number or po id
//                           - container
// 08  01/08/90  jlucas    ISEG chge to 3 length from 2 for wo
//                          inquiry by location screen
// 09  02/12/91  ryonke    change whse 32 logic for whse 51.
// 10  04/23/91  sbeauc    correct action taken when pf6 and no
//                          data.
// 11  06/24/91  mpluth    Fixed problem of message number
//                           not being initialized.
// SL#0     10/09/01  SPOPA   Change "Allow Implicits" to NO.
// WILRETRO 11/06/91  KANDE1  ADD SCHED AND UNITS PER CASE TO
//                            OPTION 1, 2, AND 3.
// sl#0     01/10/92  ryonke  initialize all records used in
//                            application in the one time
//                            initialization section.
// sl#0     01/15/92  jwood   initialize all maps used
// sl#0     08/25/92  jfiat   Changed IO from sy1120 to sy1190
//                                       and  sycrec to pknrec
// sl nsg   02/17/93  gray    add whse '25' to whse '51'
//                            specific code.
// SL#00    08/23/95  RYONKE  Added warehouse specific logic
//                            for Canada warehouse (whse=42).
// CANADA   08/25/95  CBRINE  Added call to SY2000.  Added
//                            XCTCD to SLWREC.
// 
// I/O Modules:
// ===========
// 
// NAME      DESCRIPTION
// --------  --------------------------------------------------
// DB1420    union of live and memorex work order headers
// io3340    pc2rec the pc-cu-in-seg (code, abrv, desc)
//           from dprodc.vprdcu01
// 
// SL#0  09/27/93  CHANGES SL0F020 TO CLEAR SCREEN WHEN RETURN
//       02/26/01     SSETHU CHANGES FOR US GO-LIVE
// ************************************************************
// ************************************************************
// *********************
Program SL0F type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  PC2REC PC2REC; // record
  PC3REC PC3REC; // record
  PKNREC PKNREC; // record
  SL0FW01 SL0FW01; // record
  SL0FW02 SL0FW02; // record
  SL0FW03 SL0FW03; // record
  SL0FW04 SL0FW04; // record
  SL0FWB1 SL0FWB1; // record
  SL0FWB2 SL0FWB2; // record
  SL0FWB4 SL0FWB4; // record
  SL0FWD0 SL0FWD0; // record
  SL0FWL1 SL0FWL1; // record
  SL0FWL2 SL0FWL2; // record
  SL0FWS0 SL0FWS0; // record
  SL5REC SL5REC; // record
  SL8REC SL8REC; // record
  SL9REC SL9REC; // record
  SLBREC SLBREC; // record
  SLCREC SLCREC; // record
  SLDREC SLDREC; // record
  SLVREC SLVREC; // record
  SLWREC SLWREC; // record
  SLYREC SLYREC; // record
  SQLCA SQLCA; // record
  SYPREC SYPREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  VWOLHD02 VWOLHD02; // record
  VWOMHD02 VWOMHD02; // record
  X2CREC X2CREC; // record
  X3CREC X3CREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XDMTBL; // table
  use XEGTBL; // table
  use XGPTBL; // table
  use XOWTBL; // table
  use XPGTBL; // table
  use XQATBL; // table
  use XSLTBL; // table
  use XUMTBL; // table
  use XWHTBL; // table
  use YWSTBL; // table
  use YWTTBL; // table
  use SL0FM.SL0FM010,  // forms
      SL0FM.SL0FM110, 
      SL0FM.SL0FM111, 
      SL0FM.SL0FM112, 
      SL0FM.SL0FM113, 
      SL0FM.SL0FM115, 
      SL0FM.SL0FM116, 
      SL0FM.SL0FM117, 
      SL0FM.SL0FM118, 
      SL0FM.SL0FM119, 
      SL0FM.SL0FM11A, 
      SL0FM.SL0FM11B, 
      SL0FM.SL0FM11C, 
      SL0FM.SL0FM210, 
      SL0FM.SL0FM211, 
      SL0FM.SL0FM212, 
      SL0FM.SL0FM213, 
      SL0FM.SL0FM215, 
      SL0FM.SL0FM216, 
      SL0FM.SL0FM217, 
      SL0FM.SL0FM218, 
      SL0FM.SL0FM219, 
      SL0FM.SL0FM21C, 
      SL0FM.SL0FM310, 
      SL0FM.SL0FM410, 
      SL0FM.SL0FM411, 
      SL0FM.SL0FM415, 
      SL0FM.SL0FM416, 
      SL0FM.SL0FM419
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    SL0F010: SL0F010();


     /* ************************************************************/
     /* *** if the map selection no. setup:                     ****/
     /* *** use it to go directly to selection (skip converse)  ****/
     /* ************************************************************/

    if (SL0FM010.XMSLMSNO > " ")
      if (SL0FM010.XMSLMSNO == "1")
        goto SL0F110; /* <=== new function*/
      end
      if (SL0FM010.XMSLMSNO == "2")
        goto SL0F210; /* <=== new function*/
      end
      if (SL0FM010.XMSLMSNO == "3")
        goto SL0F310; /* <=== new function*/
      end
      if (SL0FM010.XMSLMSNO == "4")
        goto SL0F410; /* <=== new function*/
      end
      if (SL0FM010.XMSLMSNO == "5")
        goto SL0F510; /* <=== new function*/
      end
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "010Z";
      SLWREC.SLWMSGNO = 0017; /* <--- invalid selection msg*/
      set SL0FM010.XMSLMSNO cursor, bold;
      goto SL0F020; /* <=== converse map*/
    end

     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "020 "; /* error id location id*/
    goto SL0F020; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/
    SL0F020: SL0F020();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0F010; /* <=== re-start this function*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is pf13)
      goto SL0F110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0F210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0F310; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0F410; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0F020; /* <=== re-display this screen*/
    end

    if (converseVar.eventKey is enter)
      if (SL0FM010.XMSLMSNO == "1")
        goto SL0F110;
      else
        if (SL0FM010.XMSLMSNO == "2")
          goto SL0F210;
        else
          if (SL0FM010.XMSLMSNO == "3")
            goto SL0F310;
          else
            if (SL0FM010.XMSLMSNO == "4")
              goto SL0F410;
            else
              if (SL0FM010.XMSLMSNO == "5")
                goto SL0F510;
              else
                SLWREC.SLWERRSW = "Y";
                SLWREC.SLWMSGNO = 11;
                SLWREC.SLWTALOC = "SC0Y";
                set SL0FM010.XMSLMSNO cursor, bold;
                goto SL0F020;
              end
            end
          end
        end
      end
    end


     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0F020; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    SL0F110: SL0F110();


     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "120 "; /* error id location id*/
    goto SL0F120; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    SL0F120: SL0F120();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0F110; /* <=== re-start this function*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is pf3)
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0FM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0F020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0F110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0F210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0F310; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0F410; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0F120; /* <=== re-display this screen*/
    end

    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf6
     || converseVar.eventKey is pf7
     || converseVar.eventKey is pf8
     || converseVar.eventKey is pf10
     || converseVar.eventKey is pf11)
      goto SL0F120; /* <=== converse map*/
    end


     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0F120; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    SL0F121: SL0F121();
    SL0F122: SL0F122();
    SL0F123: SL0F123();
    SL0F125: SL0F125();
    SL0F126: SL0F126();
    SL0F127: SL0F127();
    SL0F128: SL0F128();
    SL0F129: SL0F129();
    SL0F12A: SL0F12A();
    SL0F12B: SL0F12B();
    SL0F12C: SL0F12C();
    SL0F210: SL0F210();


     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "220 "; /* error id location id*/
    goto SL0F220; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    SL0F220: SL0F220();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0F210; /* <=== re-start this function*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is pf3)
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0FM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0F020; /* <=== re-display menu*/
    end

    if (converseVar.eventKey is pf13)
      goto SL0F110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0F210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0F310; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0F410; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0F220; /* <=== re-display this screen*/
    end

    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf6
     || converseVar.eventKey is pf7
     || converseVar.eventKey is pf8
     || converseVar.eventKey is pf10
     || converseVar.eventKey is pf11)
      goto SL0F220; /* <=== converse map*/
    end


     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0F220; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    SL0F221: SL0F221();
    SL0F222: SL0F222();
    SL0F223: SL0F223();
    SL0F225: SL0F225();
    SL0F226: SL0F226();
    SL0F227: SL0F227();
    SL0F228: SL0F228();
    SL0F229: SL0F229();
    SL0F22C: SL0F22C();
    SL0F310: SL0F310();


     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "320 "; /* error id location id*/
    goto SL0F320; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    SL0F320: SL0F320();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0F310; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0FM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0F020; /* <=== re-display menu*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is pf13)
      goto SL0F110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0F210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0F310; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0F410; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0F320; /* <=== re-display this screen*/
    end

    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf6
     || converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      goto SL0F320; /* <=== converse map*/
    end


     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0F320; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    SL0F410: SL0F410();


     /* ************************************************************/
     /* *** normal flow to converse map                         ****/
     /* ************************************************************/

    SLWREC.XXXLOCID = "420 "; /* error id location id*/
    goto SL0F420; /* <=== converse map*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/


    SL0F420: SL0F420();


     /* ************************************************************/
     /* *** if PA2: restart application regardless of status    ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto SL0F410; /* <=== re-start this function*/
    end

    if (converseVar.eventKey is pf3)
      SLWREC.SLWMSGNO = 0; /* <=== reset msg no.*/
      SLWREC.XXXLOCID = "020 "; /* <=== reset error id*/
      SLWREC.SLWERRSW = "N"; /* <=== reset error switch*/
      SL0FM010.XMSLMSNO = " "; /* <=== blank out prev. selection value*/
      goto SL0F020; /* <=== re-display menu*/
    end

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is pf13)
      goto SL0F110; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf14)
      goto SL0F210; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf15)
      goto SL0F310; /* <=== start new function*/
    end

    if (converseVar.eventKey is pf16)
      goto SL0F410; /* <=== start new function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (SLWREC.SLWERRSW == "Y")
      goto SL0F420; /* <=== re-display this screen*/
    end

    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf6
     || converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      goto SL0F420; /* <=== converse map*/
    end


     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420Z";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    goto SL0F420; /* <=== display this screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/


    SL0F421: SL0F421();
    SL0F425: SL0F425();
    SL0F426: SL0F426();
    SL0F429: SL0F429();
    SL0F510: SL0F510();
  end // end main
end // end SL0F

// one time initializations
Function SL0F010()


   /* ************************************************************/
   /* *** standard security checking                          ****/
   /* *** note: comment out if exec'g from your msl           ****/
   /* ************************************************************/

  XSENTRY();

   /* ************************************************************/
   /* *** standard segmented trans id setting                 ****/
   /* ************************************************************/

  XSSEGTR();

   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0FM010 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0FM11A initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0FM11B initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0FM11C initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0FM110 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0FM111 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0FM112 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0FM113 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0FM115 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0FM116 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0FM117 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0FM118 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0FM119 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0FM21C initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0FM210 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0FM211 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0FM212 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0FM213 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0FM215 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0FM216 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0FM217 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0FM218 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0FM219 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0FM310 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0FM410 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0FM411 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0FM415 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0FM416 initial; /* resets fld values, attr.s & cursor*/
  converseLib.clearScreen();
  set SL0FM419 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0FW01 empty; /* working storage fields*/
  set SL0FW02 empty; /* working storage fields*/
  set SL0FW03 empty; /* working storage fields*/
  set SL0FW04 empty; /* working storage fields*/
  set SL0FWB1 empty; /* working storage fields*/
  set SL0FWB2 empty; /* working storage fields*/
  set SL0FWB4 empty; /* working storage fields*/
  set SL0FWD0 empty; /* working storage fields*/
  set SL0FWL1 empty; /* working storage fields*/
  set SL0FWL2 empty; /* working storage fields*/
  set SL0FWS0 empty; /* working storage fields*/
  set PC2REC empty; /**/
  set PC3REC empty; /**/
  set SLBREC empty; /**/
  set SLCREC empty; /**/
  set SLDREC empty; /**/
  set SLVREC empty; /**/
  set SLWREC empty; /* common working storage fields*/
  set SLYREC empty; /* ta0050 parameter #1*/
  set SL5REC empty; /**/
  set SL8REC empty; /**/
  set SL9REC empty; /**/
  set PKNREC empty; /**/
  set SYPREC empty; /**/
  set TA1REC empty; /* TA0020 record*/
  set TA2REC empty; /**/
  set TA5REC empty; /* ta0050 parameter #2*/
  set X2CREC empty; /**/
  set X3CREC empty; /**/
  set SQLCA empty; /* SQL returned data record*/
  set ERRSQLCA empty; /* TA0020 version of SQLCA*/

   /* ************************************************************/
   /* *** maintenance information:                            ****/
   /* *** =======================                             ****/
   /* *** rvsn   date    update by:    description:           ****/
   /* *** ---- --------  ------------  ---------------------- ****/
   /* ***  00  01/28/87  W. Jones      created                ****/
   /* ***  01  08/31/88  W. Jones      add reset scrn on fast ****/
   /* ***                              path exit error        ****/
   /* ***  02  11/14/88  W. Jones      remove slurec from list****/
   /* ***  03  11/15/88  J. Wood       added xssegtr logic    ****/
   /* ************************************************************/

  SLWREC.XXXRVNBR = "03";

  SLWREC.XXXMAPNM = "SL0FM010";
  SLWREC.XXXTITLE = "WORK ORDER INQUIRY MENU   ";

  XSX2CDT(); /* determine current date*/

  SLWREC.XXXAPPID = "SL0F"; /* error id appl. name*/
  SLWREC.SLWTALOC = "SL0F010 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0FM010"; /* TA0020 current map name*/

  SLWREC.SLWSUMQU = "SLSF"; /* summary tsq id*/
  SLWREC.SLWDETQU = "SLDF"; /* detail tsq id*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* ERROR msg no*/
  SLWREC.SLWSEXSW = "N"; /* error switch*/
  SL0FWS0.SL0FWLTH = 2520; /* 168 x 15 = 2520*/
  SL0FWD0.SL0FWLTH = 2520; /* 168 x 15 = 2520*/
  converseVar.commitOnConverse = 1; /* commit on converse*/
  VGVar.handleHardIOErrors = 1; /* allows neg sqlcode*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0FM010.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0FM010.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0FM010.XXXTITLE = SLWREC.XXXTITLE;
  SL0FM010.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** check commarea fast path item to see if it should   ****/
   /* *** be used to setup working storage &/or map fields    ****/
   /* ************************************************************/

  if (COMMAREA.CAITEM > " ")
    SL0FSY0(); /* <=== use commarea item*/
    COMMAREA.CAITEM = " ";
  end

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end SL0F010

// converse & control key entry
Function SL0F020()


   /* ************************************************************/
   /* *** setup msg no.  and  error id  on map                ****/
   /* ************************************************************/

  converseLib.clearScreen();
  
  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0FM010.XXXERRID = SLWREC.XXXERRID;


  converse SL0FM010 ;


   /* ************************************************************/
   /* *** commented EZECLOS code to be used ONLY in test      ****/
   /* *** in order to end application without canceling it    ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf9)
    exit program;
  end

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020A";
    SLWREC.SLWMSGNO = 0;
    SL0FM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020B";
    SLWREC.SLWMSGNO = 0;
    SL0FM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020C";
    SLWREC.SLWMSGNO = 0;
    SL0FM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020D";
    SLWREC.SLWMSGNO = 0;
    SL0FM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0FM010.CATOAP > " ")
    COMMAREA.CATOAP = SL0FM010.CATOAP;
    COMMAREA.CAITEM = SL0FM010.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020E";
    SLWREC.SLWMSGNO = 0;
    SL0FM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0FM010.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset std fields and switches                       ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0FM010.VAGen_EZEMSG = " ";
  SLWREC.SLWTALOC = "020 ";
  set SL0FM010.CATOAP initialAttributes;
  set SL0FM010.CAITEM initialAttributes;
  set SL0FM010.XMSLMSNO cursor, initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0FM010.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0FM010.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0FSH0(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF17: go to wo inquiry by po menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf17)
    COMMAREA.CATOAP = "SL0Y";
    XSSL001();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "020G";
    SLWREC.SLWMSGNO = 0;
    SL0FM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "020H";
  SLWREC.SLWMSGNO = 0004; /* <--- invlaid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0F020

// one time initializations
Function SL0F110()


   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0FM110 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0FW01 empty; /* appl. working storage area*/

  SLWREC.XXXMAPNM = "SL0FM110";
  SLWREC.XXXTITLE = "WORK ORDER INQUIRY BY LOCATION";

  SLWREC.SLWTALOC = "SL0F110 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0FM110"; /* TA0020 current map name*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* error switch*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0FM110.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0FM110.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0FM110.XXXTITLE = SLWREC.XXXTITLE;
  SL0FM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  SL0FM110.XWHCD = COMMAREA.XWHCD;

   /* *** move default map values ****/

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "E";
  TA2REC.TA2GRGEN = X2CREC.X2CCURSD;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD == 0)
    SL0FM110.SL0FMFDT = TA2REC.TA2GRGAN;
    SL0FM110.SL0FMTDT = TA2REC.TA2GRGAN;
  end

  SL0FM110.YWSCD = "A ";
  SL0FM110.YWTCD = "A ";


   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  SLWREC.SLWLASRL = "10"; /* last right left pfkey*/

  SLWREC.SLWLINPP = 13;

   /* ************************************************************/
   /* *** purge any existing storage in case of 'left overs'  ****/
   /* *** note: not found is acceptable return code           ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq(s)*/

   /* ************************************************************/
   /* *** setup the floating map lines for a blank map        ****/
   /* ************************************************************/

  SL0FSN1(); /* <=== setup blank screen*/

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end SL0F110

// conv & ctrl float + l/r
Function SL0F120()


  if (SL0FM110.XWHCD == "  ")
    set SL0FM110.XWHCD cursor;
  end

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0FM110.XXXERRID = SLWREC.XXXERRID;


  converse SL0FM110 ;


   /* ************************************************************/
   /* *** note: if leaving screen/application, purge tsq      ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    XSSLSPQ(); /* <=== purge tsq(s)*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120A";
    SLWREC.SLWMSGNO = 0;
    SL0FM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    XSSLSPQ(); /* <=== purge tsq(s)*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120C";
    SLWREC.SLWMSGNO = 0;
    SL0FM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120D";
    SLWREC.SLWMSGNO = 0;
    SL0FM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0FM110.CATOAP > " ")
    COMMAREA.CATOAP = SL0FM110.CATOAP;
    COMMAREA.CAITEM = SL0FM110.CAITEM;
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSEXIT();
    SL0FST1(); /* <=== reset scrn*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120E";
    SLWREC.SLWMSGNO = 0;
    SL0FM110.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0FM110.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0FM110.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "120 ";
  set SL0FM110.CATOAP initialAttributes;
  set SL0FM110.CAITEM initialAttributes;
  set SL0FM110.SL0FMFDT cursor;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set SL0FM110.XWHCD initialAttributes;
  set SL0FM110.SL0FMFDT initialAttributes;
  set SL0FM110.SL0FMTDT initialAttributes;
  set SL0FM110.YWSCD initialAttributes;
  set SL0FM110.YWTCD initialAttributes;
  set SL0FM110.SL0FMOTP initialAttributes;
  set SL0FM110.XARCD initialAttributes;
  set SL0FM110.SL4ZONE initialAttributes;
  set SL0FM110.SL5LOCTN initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0FM110.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120F";
    SLWREC.SLWMSGNO = 0002; /* option required msg*/
    set SL0FM110.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    XSSLSPQ();
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF17: go to wo inquiry by po menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf17)
    COMMAREA.CATOAP = "SL0Y";
    COMMAREA.XWHCD = SL0FM110.XWHCD;
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSSL001();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "120G";
    SLWREC.SLWMSGNO = 0;
    SL0FM110.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    if (SLWREC.SLWLASPF == "E")
      SLWREC.SLWIDX01 = 1;
      while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
        if (SL0FM110.XMSLMSEL[SLWIDX01] > " ")
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "120H";
          SLWREC.SLWMSGNO = 0003; /* use pf6 msg*/
          exit stack;
        else
          SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
        end
      end
    end
    SL0FSH1(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF6: do edits & process inputs                   ****/
   /* *** note: check first for need to save selected subkey  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf6)
    if (SLWREC.SLWLASPF == "6")
      SLWREC.SLWIDX01 = 1;
      while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
        if (SL0FM110.XMSLMSEL[SLWIDX01] > " ")
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "120I";
          SLWREC.SLWMSGNO = 0018; /* use pf6 msg*/
          exit stack;
        else
          SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
        end
      end
    end
    SL0FSI1(); /* <=== PF6 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if selection input now: display error msg           ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    if (SL0FM110.XMSLMSEL[SLWIDX01] > " ")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "120J";
      SLWREC.SLWMSGNO = 0003; /* use pf6 msg*/
      exit stack;
    else
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
    end
  end

   /* ************************************************************/
   /* *** if PF7: scroll backwards, key changes NOT allowed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf7)
    SL0FSJ1(); /* <=== PF7 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF8: scroll forwards, key changes NOT allowed    ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf8)
    SL0FSK1(); /* <=== PF8 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF10: scroll left, key changes NOT allowed       ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf10)
    SL0FSL1(); /* <=== PF10 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF11: scroll right, key changes NOT allowed      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf11)
    SL0FSM1(); /* <=== PF11 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "120I";
  SLWREC.SLWMSGNO = 0004; /* invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0F120

// disp left sum line
Function SL0F121()


   /* *** move summary fields to map fields ****/

  SL0FM111.SL0FMROW = SL0FWB1.SL0FWROW;
  SL0FM111.YWSCD = SL0FWB1.YWSCD;
  SL0FM111.YWTCD = SL0FWB1.YWTCD;
  SL0FM111.SL8WONBR = SL0FWB1.SL8WONBR;
  SL0FM111.SL2PALET = SL0FWB1.SL2PALET;
  SL0FM111.SL2CASE = SL0FWB1.SL2CASE;
  SL0FM111.SL8WOGRP = SL0FWB1.SL8WOGRP;
  SL0FM111.SL8FRAR = SL0FWB1.SL8FRAR;
  SL0FM111.SL8FRZN = SL0FWB1.SL8FRZN;
  SL0FM111.SL8FRLC = SL0FWB1.SL8FRLC;
  SL0FM111.SL8TOAR = SL0FWB1.SL8TOAR;
  SL0FM111.SL8TOZN = SL0FWB1.SL8TOZN;
  SL0FM111.SL8TOLC = SL0FWB1.SL8TOLC;


  display SL0FM111 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0F121

// disp left det line
Function SL0F122()


   /* *** move detail fields to map fields ****/

  SLWREC.SLWIDX06 = 1;
  while (SLWREC.SLWIDX06 <= 4)
    SL0FM112.SY4IDDSC[SLWIDX06] = SL0FWL1.SY4IDDSC[SLWIDX06];
    SL0FM112.SL9WOQTY[SLWIDX06] = SL0FWL1.SL9WOQTY[SLWIDX06];
    SLWREC.SLWIDX06 = SLWREC.SLWIDX06 + 1;
  end



  display SL0FM112 ;


   /* ************************************************************/
   /* *** no DISPLAY AFTER processing                         ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0F122

// disp right sum line
Function SL0F123()


   /* *** move summary fields to map fields ****/

  SL0FM113.SL0FMROW = SL0FWB1.SL0FWROW;

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2GRGGN = SL0FWB1.SL0FWSDT;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD == 0)
    SL0FM113.SL0FMSDT = TA2REC.TA2GRGA;
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "123A";
    SLWREC.SLWMSGNO = 0001; /* <--- db date error*/
    return;
  end

  SL0FM113.SL8DRVR = SL0FWB1.SL8DRVR;
  SL0FM113.SL0FMPIN = SL0FWB1.SL0FWPIN;
  SL0FM113.SL0FMCON = SL0FWB1.SL0FWCON;
  SL0FM113.SL0FMPNB = SL0FWB1.SL0FWPNB;

  if (SL0FWB1.SL0FWCDT == 0)
    SL0FM113.SL0FMCDT = "        ";
  else
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2GRGGN = SL0FWB1.SL0FWCDT;
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      SL0FM113.SL0FMCDT = TA2REC.TA2GRGA;
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "123B";
      SLWREC.SLWMSGNO = 0001; /* <--- db date error*/
      return;
    end
  end

  SL0FM113.PK2SCHNO = SL0FWB1.PK2SCHNO;

  SL0FM113.SL8CRTBY = SL0FWB1.SL8CRTBY;


  display SL0FM113 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0F123

// disp top left title
Function SL0F125()


  display SL0FM115 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0F125

// disp left det title
Function SL0F126()


  SL0FM110.XMSLMSSS = "S";
  set SL0FM110.XMSLMSSS initialAttributes;


  display SL0FM116 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0F126

// disp top right title
Function SL0F127()


  display SL0FM117 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0F127

// disp bot rt title
Function SL0F128()


  SL0FM110.XMSLMSSS = "S";
  set SL0FM110.XMSLMSSS initialAttributes;

  if (SL0FM110.XWHCD == 32)
    SL0FM118.SL0FMPHD = "     PO NBR";
  else
    SL0FM118.SL0FMPHD = "   PO ID/OT";
  end

  display SL0FM118 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0F128

// disp blank line
Function SL0F129()


   /* ************************************************************/
   /* *** set selection fields ASKIP,DARK                     ****/
   /* ************************************************************/

  set SL0FM110.XMSLMSEL[SLWIDX01] skip, invisible;


  display SL0FM119 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0F129

// display 1st line prod data
Function SL0F12A()


   /* *** move first product line data to map fields ****/

  SL0FM11A.XGPCD = SL0FWB1.XGPCD;
  SL0FM11A.SY1STNBR = SL0FWB1.SY1STNBR;
  SL0FM11A.SY2CLRID = SL0FWB1.SY2CLRID;
  SL0FM11A.XDMCD = SL0FWB1.XDMCD;
  SL0FM11A.SY1SSTNM = SL0FWB1.SY1SSTNM;
  SL0FM11A.SY2CLRAB = SL0FWB1.SY2CLRAB;



  display SL0FM11A ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0F12A

// display 2nd line prod data
Function SL0F12B()


   /* *** move second product line data to map fields ****/

  SL0FM11B.XQACD = SL0FWB1.XQACD;
  SL0FM11B.PC2INSEG = SL0FWB1.PC2INSEG;
  SL0FM11B.XEGCD = SL0FWB1.XEGCD;
  SL0FM11B.XSLCD = SL0FWB1.XSLCD;
  SL0FM11B.XPGCD = SL0FWB1.XPGCD;
  SL0FM11B.XUMCD = SL0FWB1.XUMCD;
  SL0FM11B.XOWCD = SL0FWB1.XOWCD;
  SL0FM11B.SY1UNPCS = SL0FWB1.SY1UNPCS;


  display SL0FM11B ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0F12B

// display hdr line for sizes
Function SL0F12C()


   /* *** no 'before' processing ****/

  display SL0FM11C ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0F12C

// one time initializations
Function SL0F210()


   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0FM210 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0FW02 empty; /* appl. working storage area*/

  SLWREC.XXXMAPNM = "SL0FM210";
  SLWREC.XXXTITLE = "WORK ORDER INQUIRY BY PRODUCT";

  SLWREC.SLWTALOC = "SL0F210 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0FM210"; /* TA0020 current map name*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* error switch*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0FM210.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0FM210.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0FM210.XXXTITLE = SLWREC.XXXTITLE;
  SL0FM210.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  SL0FM210.XWHCD = COMMAREA.XWHCD;


  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "E";
  TA2REC.TA2GRGEN = X2CREC.X2CCURSD;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD == 0)
    SL0FM210.SL0FMFDT = TA2REC.TA2GRGAN;
    SL0FM210.SL0FMTDT = TA2REC.TA2GRGAN;
  end

  SL0FM210.YWSCD = "A ";
  SL0FM210.YWTCD = "A ";
  SL0FM210.XGPCD = "02";
  SL0FM210.SY2CLRID = "00 ";
  SL0FM210.XDMCD = "00";
  SL0FM210.XQACD = "01";
  SL0FM210.PC2INSEG = "000";
  SL0FM210.XEGCD = "000";
  SL0FM210.XSLCD = "000";
  SL0FM210.XPGCD = "00";
  SL0FM210.XUMCD = "01";
  SL0FM210.XOWCD = "00";

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  SLWREC.SLWLASRL = "10"; /* last right left pfkey*/

  SLWREC.SLWLINPP = 13; /* error switch*/

   /* ************************************************************/
   /* *** purge any existing storage in case of 'left overs'  ****/
   /* *** note: not found is acceptable return code           ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq(s)*/

   /* ************************************************************/
   /* *** setup the floating map lines for a blank map        ****/
   /* ************************************************************/

  SL0FSN2(); /* <=== setup blank screen*/

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end SL0F210

// conv & ctrl float + l/r
Function SL0F220()


  if (SL0FM210.XWHCD == "  ")
    set SL0FM210.XWHCD cursor;
  end

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0FM210.XXXERRID = SLWREC.XXXERRID;


  converse SL0FM210 ;


   /* ************************************************************/
   /* *** note: if leaving screen/application, purge tsq      ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    XSSLSPQ(); /* <=== purge tsq(s)*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220A";
    SLWREC.SLWMSGNO = 0;
    SL0FM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    XSSLSPQ(); /* <=== purge tsq(s)*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220C";
    SLWREC.SLWMSGNO = 0;
    SL0FM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220D";
    SLWREC.SLWMSGNO = 0;
    SL0FM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0FM210.CATOAP > " ")
    COMMAREA.CATOAP = SL0FM210.CATOAP;
    COMMAREA.CAITEM = SL0FM210.CAITEM;
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSEXIT();
    SL0FST2(); /* <=== reset scrn*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220E";
    SLWREC.SLWMSGNO = 0;
    SL0FM210.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0FM210.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0FM210.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "220 ";
  set SL0FM210.CATOAP initialAttributes;
  set SL0FM210.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set SL0FM210.XWHCD initialAttributes;
  set SL0FM210.SL0FMFDT initialAttributes;
  set SL0FM210.SL0FMTDT initialAttributes;
  set SL0FM210.YWSCD initialAttributes;
  set SL0FM210.YWTCD initialAttributes;
  set SL0FM210.SL0FMOTP initialAttributes;
  set SL0FM210.XGPCD initialAttributes;
  set SL0FM210.SY1STNBR initialAttributes;
  set SL0FM210.SY2CLRID initialAttributes;
  set SL0FM210.XDMCD initialAttributes;
  set SL0FM210.XQACD initialAttributes;
  set SL0FM210.PC2INSEG initialAttributes;
  set SL0FM210.XEGCD initialAttributes;
  set SL0FM210.XSLCD initialAttributes;
  set SL0FM210.XPGCD initialAttributes;
  set SL0FM210.XUMCD initialAttributes;
  set SL0FM210.XOWCD initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0FM210.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220F";
    SLWREC.SLWMSGNO = 0002; /* option required msg*/
    set SL0FM210.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    XSSLSPQ(); /* <=== purge tsq(s)*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF17: go to wo inquiry by po menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf17)
    COMMAREA.CATOAP = "SL0Y";
    COMMAREA.XWHCD = SL0FM210.XWHCD;
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSSL001();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "220G";
    SLWREC.SLWMSGNO = 0;
    SL0FM210.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    if (SLWREC.SLWLASPF == "E")
      SLWREC.SLWIDX01 = 1;
      while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
        if (SL0FM210.XMSLMSEL[SLWIDX01] > " ")
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "220H";
          SLWREC.SLWMSGNO = 0003; /* use pf6 msg*/
          exit stack;
        else
          SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
        end
      end
    end
    SL0FSH2(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if selection input now: display error msg           ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf6)
    if (SLWREC.SLWLASPF == "6")
      SLWREC.SLWIDX01 = 1;
      while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
        if (SL0FM210.XMSLMSEL[SLWIDX01] > " ")
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "220I";
          SLWREC.SLWMSGNO = 0018; /* use pf6 msg*/
          exit stack;
        else
          SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
        end
      end
    end
    SL0FSI2(); /* <=== PF6 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF7: scroll backwards, key changes NOT allowed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf7)
    SL0FSJ2(); /* <=== PF7 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF8: scroll forwards, key changes NOT allowed    ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf8)
    SL0FSK2(); /* <=== PF8 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF10: scroll left, key changes NOT allowed       ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf10)
    SL0FSL2(); /* <=== PF10 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF11: scroll right, key changes NOT allowed      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf11)
    SL0FSM2(); /* <=== PF11 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "220J";
  SLWREC.SLWMSGNO = 0004; /* invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0F220

// disp left sum line
Function SL0F221()


   /* *** move summary fields to map fields ****/

  SL0FM211.SL0FMROW = SL0FWB2.SL0FWROW;
  SL0FM211.YWSCD = SL0FWB2.YWSCD;
  SL0FM211.YWTCD = SL0FWB2.YWTCD;
  SL0FM211.SL8WONBR = SL0FWB2.SL8WONBR;
  SL0FM211.SL2PALET = SL0FWB2.SL2PALET;
  SL0FM211.SL2CASE = SL0FWB2.SL2CASE;
  SL0FM211.SL8WOGRP = SL0FWB2.SL8WOGRP;
  SL0FM211.SL8FRAR = SL0FWB2.SL8FRAR;
  SL0FM211.SL8FRZN = SL0FWB2.SL8FRZN;
  SL0FM211.SL8FRLC = SL0FWB2.SL8FRLC;
  SL0FM211.SL8TOAR = SL0FWB2.SL8TOAR;
  SL0FM211.SL8TOZN = SL0FWB2.SL8TOZN;
  SL0FM211.SL8TOLC = SL0FWB2.SL8TOLC;




  display SL0FM211 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0F221

// disp left det line
Function SL0F222()


   /* *** move detail fields to map fields ****/

  SLWREC.SLWIDX06 = 1;
  while (SLWREC.SLWIDX06 <= 4)
    SL0FM212.SY4IDDSC[SLWIDX06] = SL0FWL2.SY4IDDSC[SLWIDX06];
    SL0FM212.SL9WOQTY[SLWIDX06] = SL0FWL2.SL9WOQTY[SLWIDX06];
    SLWREC.SLWIDX06 = SLWREC.SLWIDX06 + 1;
  end




  display SL0FM212 ;


   /* ************************************************************/
   /* *** no DISPLAY AFTER processing                         ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0F222

// disp right sum line
Function SL0F223()


   /* *** move summary fields to map fields ****/

  SL0FM213.SL0FMROW = SL0FWB2.SL0FWROW;

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2GRGGN = SL0FWB2.SL0FWSDT;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD == 0)
    SL0FM213.SL0FMSDT = TA2REC.TA2GRGA;
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "223A";
    SLWREC.SLWMSGNO = 0001; /* <--- db date error*/
    return;
  end

  SL0FM213.SL8DRVR = SL0FWB2.SL8DRVR;
  SL0FM213.SL0FMPIN = SL0FWB2.SL0FWPIN;
  SL0FM213.SL0FMCON = SL0FWB2.SL0FWCON;
  SL0FM213.SL0FMPNB = SL0FWB2.SL0FWPNB;

  if (SL0FWB2.SL0FWCDT == 0)
    SL0FM213.SL0FMCDT = "        ";
  else
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2GRGGN = SL0FWB2.SL0FWCDT;
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

    if (TA2REC.TA2RTNCD == 0)
      SL0FM213.SL0FMCDT = TA2REC.TA2GRGA;
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "223B";
      SLWREC.SLWMSGNO = 0001; /* <--- db date error*/
      return;
    end
  end

  SL0FM213.PK2SCHNO = SL0FWB2.PK2SCHNO;

  SL0FM213.SL8CRTBY = SL0FWB2.SL8CRTBY;



  display SL0FM213 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0F223

// disp left sum title
Function SL0F225()


   /* ************************************************************/
   /* *** no "before" processing                              ****/
   /* ************************************************************/



  display SL0FM215 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0F225

// disp left det title
Function SL0F226()


  SL0FM210.XMSLMSSS = "S";
  set SL0FM210.XMSLMSSS initialAttributes;


  display SL0FM216 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0F226

// disp right sum title
Function SL0F227()


   /* ************************************************************/
   /* *** no "before" processing... except to setup "S"       ****/
   /* ************************************************************/


  display SL0FM217 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0F227

// disp right det title
Function SL0F228()


  SL0FM210.XMSLMSSS = "S";
  set SL0FM210.XMSLMSSS initialAttributes;

  if (SL0FM210.XWHCD == 32)
    SL0FM218.SL0FMPHD = "     PO NBR";
  else
    SL0FM218.SL0FMPHD = "   PO ID/OT";
  end

  display SL0FM218 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0F228

// disp blank line
Function SL0F229()


   /* ************************************************************/
   /* *** set selection fields ASKIP,DARK                     ****/
   /* ************************************************************/

  set SL0FM210.XMSLMSEL[SLWIDX01] skip, invisible;


  display SL0FM219 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0F229

// display hdr line for sizes
Function SL0F22C()


   /* *** no 'before' processing ****/

  display SL0FM21C ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0F22C

// one time initializations
Function SL0F310()


   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0FM310 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0FW03 empty; /* appl. working storage area*/

  SLWREC.XXXMAPNM = "SL0FM310";
  SLWREC.XXXTITLE = "WORK ORDER INQUIRY BY WORK ORDER";

  SLWREC.SLWTALOC = "SL0F310 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0FM310"; /* TA0020 current map name*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* error switch*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0FM310.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0FM310.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0FM310.XXXTITLE = SLWREC.XXXTITLE;
  SL0FM310.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  SL0FM310.XWHCD = COMMAREA.XWHCD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end SL0F310

// conv & cntl fixed
Function SL0F320()


  if (SL0FM310.XWHCD == "  ")
    set SL0FM310.XWHCD cursor;
  end

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0FM310.XXXERRID = SLWREC.XXXERRID;


  converse SL0FM310 ;


   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320A";
    SLWREC.SLWMSGNO = 0;
    SL0FM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320C";
    SLWREC.SLWMSGNO = 0;
    SL0FM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320D";
    SLWREC.SLWMSGNO = 0;
    SL0FM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0FM310.CATOAP > " ")
    COMMAREA.CATOAP = SL0FM310.CATOAP;
    COMMAREA.CAITEM = SL0FM310.CAITEM;
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320E";
    SLWREC.SLWMSGNO = 0;
    SL0FM310.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0FM310.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0FM310.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "320 ";
  set SL0FM310.CATOAP initialAttributes;
  set SL0FM310.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set SL0FM310.XWHCD initialAttributes;
  set SL0FM310.SL8WONBR initialAttributes;
  set SL0FM310.SL8WOGRP initialAttributes;

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= 40)
    set SL0FM310.SY4IDDSC[SLWIDX01] initialAttributes;
    set SL0FM310.SL9WOQTY[SLWIDX01] initialAttributes;
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0FM310.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0FM310.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF17: go to wo inquiry by po menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf17)
    COMMAREA.CATOAP = "SL0Y";
    COMMAREA.XWHCD = SL0FM310.XWHCD;
    XSSL001();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "320G";
    SLWREC.SLWMSGNO = 0;
    SL0FM310.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0FSH3(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "320H";
  SLWREC.SLWMSGNO = 0004; /* <--- invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0F320

// one time initializations
Function SL0F410()


   /* ************************************************************/
   /* *** "clear" map = resets fld values, attr.s & cursor    ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0FM410 initial; /* resets fld values, attr.s & cursor*/

   /* ************************************************************/
   /* *** initialize std working storage & map fields         ****/
   /* ************************************************************/

  set SL0FW04 empty; /* appl. working storage area*/

  SLWREC.XXXMAPNM = "SL0FM410";
  SLWREC.XXXTITLE = "WORK ORDER INQUIRY BY WO GROUP";

  SLWREC.SLWTALOC = "SL0F410 "; /* TA0020 exec location(2)*/
  SLWREC.SLWTAMAP = "SL0FM410"; /* TA0020 current map name*/

  SLWREC.SLWERRSW = "N"; /* error switch*/
  SLWREC.SLWMSGNO = 0; /* error switch*/

   /* ************************************************************/
   /* *** move ws fields to map fields - re: this data will   ****/
   /* *** be needed suring resets and for multiple levels     ****/
   /* ************************************************************/

  SL0FM410.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0FM410.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0FM410.XXXTITLE = SLWREC.XXXTITLE;
  SL0FM410.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** setup ws default values & map fields, if any        ****/
   /* ************************************************************/

  SL0FM410.XWHCD = COMMAREA.XWHCD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  SLWREC.SLWLINPP = 13; /* error switch*/

   /* ************************************************************/
   /* *** purge any existing storage in case of 'left overs'  ****/
   /* *** note: not found is acceptable return code           ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq(s)*/

   /* ************************************************************/
   /* *** setup the floating map lines for a blank map        ****/
   /* ************************************************************/

  SL0FSN4(); /* <=== setup blank screen*/

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/


end // end SL0F410

// conv & ctrl float
Function SL0F420()


  if (SL0FM410.XWHCD == "  ")
    set SL0FM410.XWHCD cursor;
  end

  if (SLWREC.SLWMSGNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(SLWREC.SLWMSGNO);
  end
  SL0FM410.XXXERRID = SLWREC.XXXERRID;


  converse SL0FM410 ;


   /* ************************************************************/
   /* *** note: if leaving screen/application, purge tsq      ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    XSSLSPQ(); /* <=== purge tsq(s)*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF1: go to help application                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf1)
    COMMAREA.CATOAP = "GD00";
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420A";
    SLWREC.SLWMSGNO = 0;
    SL0FM410.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF3: go to previous logical level                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    XSSLSPQ(); /* <=== purge tsq(s)*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSPF4();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420C";
    SLWREC.SLWMSGNO = 0;
    SL0FM410.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF5: go to stock locate main menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    COMMAREA.CATOAP = "SL0M";
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSEXIT();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420D";
    SLWREC.SLWMSGNO = 0;
    SL0FM410.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (SL0FM410.CATOAP > " ")
    COMMAREA.CATOAP = SL0FM410.CATOAP;
    COMMAREA.CAITEM = SL0FM410.CAITEM;
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSEXIT();
    SL0FST4(); /* <=== reset scrn*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420E";
    SLWREC.SLWMSGNO = 0;
    SL0FM410.VAGen_EZEMSG = COMMAREA.CAMSG;
    set SL0FM410.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  SLWREC.SLWMSGNO = 0;
  SLWREC.SLWERRSW = "N";
  SL0FM410.VAGen_EZEMSG = " ";
  SLWREC.XXXLOCID = "420 ";
  set SL0FM410.CATOAP initialAttributes;
  set SL0FM410.CAITEM initialAttributes;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set SL0FM410.XWHCD initialAttributes;
  set SL0FM410.SL8WOGRP initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (SL0FM410.CAITEM > " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420F";
    SLWREC.SLWMSGNO = 0002; /* <--- option required msg*/
    set SL0FM410.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if any of the following pfkeys:                     ****/
   /* *** xsexit to the specified application  or             ****/
   /* *** the FLOW section will transfer control to the       ****/
   /* *** appropriate level regardless of previous errors     ****/
   /* *** re: reset completed & no processing code executed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf16)
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF17: go to wo inquiry by po menu                ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf17)
    COMMAREA.CATOAP = "SL0Y";
    COMMAREA.XWHCD = SL0FM410.XWHCD;
    XSSLSPQ(); /* <=== purge tsq(s)*/
    XSSL001();
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "420G";
    SLWREC.SLWMSGNO = 0;
    SL0FM410.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process inputs                 ****/
   /* *** note: check first for selection entered error       ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    SL0FSH4(); /* <=== enter processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF7: scroll backwards, key changes NOT allowed   ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf7)
    SL0FSJ4(); /* <=== PF7 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF8: scroll forwards, key changes NOT allowed    ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf8)
    SL0FSK4(); /* <=== PF8 processing*/
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "420H";
  SLWREC.SLWMSGNO = 0004; /* <--- invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/


end // end SL0F420

// disp left sum line
Function SL0F421()


   /* *** move detail fields to map fields ****/

  SL0FM411.YWSCD = SL0FWB4.YWSCD;
  SL0FM411.YWTCD = SL0FWB4.YWTCD;
  
  SL0FM411.SL8WONBR = SL0FWB4.SL8WONBR;
  
  SL0FM411.SL2PALET = SL0FWB4.SL2PALET;
  SL0FM411.SL2CASE = SL0FWB4.SL2CASE;

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2GRGGN = SL0FWB4.SL0FWSDT;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD == 0)
    SL0FM411.SL0FMSDT = TA2REC.TA2GRGB;
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "421A";
    SLWREC.SLWMSGNO = 0001; /* <--- db date error*/
    return;
  end

  SL0FM411.SL8FRAR = SL0FWB4.SL8FRAR;
  SL0FM411.SL8FRZN = SL0FWB4.SL8FRZN;
  SL0FM411.SL8FRLC = SL0FWB4.SL8FRLC;
  SL0FM411.SL8TOAR = SL0FWB4.SL8TOAR;
  SL0FM411.SL8TOZN = SL0FWB4.SL8TOZN;
  SL0FM411.SL8TOLC = SL0FWB4.SL8TOLC;
  SL0FM411.SL8CRTBY = SL0FWB4.SL8CRTBY;





  display SL0FM411 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0F421

// disp left sum title
Function SL0F425()


   /* ************************************************************/
   /* *** no "before" processing                              ****/
   /* ************************************************************/


  display SL0FM415 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0F425

// disp left det title
Function SL0F426()


   /* ************************************************************/
   /* *** no "before" processing                              ****/
   /* ************************************************************/


  display SL0FM416 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0F426

// disp blank line
Function SL0F429()


   /* ************************************************************/
   /* *** set selection fields ASKIP,DARK                     ****/
   /* ************************************************************/


  display SL0FM419 ;


   /* ************************************************************/
   /* *** no statements in the AFTER section                  ****/
   /* ************************************************************/


   /* ************************************************************/
   /* *** end of DISPLAY AFTER section                        ****/
   /* ************************************************************/


end // end SL0F429

// inquiry : sz xlate : 0
Function SL0F450()


   /* ************************************************************/
   /* *** obtain the desired size description/size id (no.)   ****/
   /* *** using the std module:  SY1190                       ****/
   /* *** code the following before this is executed:         ****/
   /* ***   TA1REC.TA1LOCAT(2) = what executes this sgrp      ****/
   /* ***   TA1REC.TA1MAP      = what map this data is from   ****/
   /* ***   note: or setup during init. & use a comment       ****/
   /* ***   SYPREC.SYPFC:   PC = all valid sizes              ****/
   /* ***                   IE = int. sz id to desc.          ****/
   /* ***                   EI = desc. to int. sz id          ****/
   /* ***   SYPREC.SYPCMPSW: Y = compressed (first blank or   ****/
   /* ***                        zero is end of data)         ****/
   /* ***                    N = not compressed (positional)  ****/
   /* *** code the action for the following return codes:     ****/
   /* *** note: check the SYPREC.SYPRC (NOT sqlcode)          ****/
   /* ***      0 = successful                                 ****/
   /* ***      9 = deadlock                                   ****/
   /* ***     10 = not found                                  ****/
   /* ***  other = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** call sy1190                                         ****/
   /* *** note: func & compress sw setup prior to this sgrp   ****/
   /* ************************************************************/

  call "SY1190" (SQLCA, SYPREC) {isNoRefresh = yes, isExternal = yes};

  if (SYPREC.SYPRC == 0)
    return;
  end

  if (SYPREC.SYPRC == 9)
    return;
  end

  if (SYPREC.SYPRC == 10)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "SL0F450 ";
  TA1REC.TA1LOCAT[1] = "SY1190  ";
  TA1REC.TA1LOCAT[3] = SYPREC.SYPRCX;
  TA1REC.TA1LOCAT[4] = "SZ XLATE";
  TA1REC.TA1DBASE = "MULTIPLE";
  TA1REC.TA1TBLVU = "DB VIEWS";
  TA1REC.TA1TBLKE = SYPREC.SYPKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0F450

// inquiry:(style)color view 2:0
Function SL0F460()


   /* ************************************************************/
   /* *** select unique row/view: combined style & color view ****/
   /* *** using the std module:  IO1810                       ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -811 = duplicates found                           ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***     <0 = db/severe error (&-911)                    ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* ************************************************************/

  call "IO1810" ("S ", SQLCA, PKNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -811)
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "SL0F460 ";
  TA1REC.TA1LOCAT[1] = "IO1810  ";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DPICK   ";
  TA1REC.TA1TBLVU = "VPKSTY01";
  TA1REC.TA1TBLKE = PKNREC.PKNKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0F460

// one time initializations
Function SL0F510()
   /* ************************************************************/
   /* *** go to wo inquiry by po menu                         ****/
   /* ************************************************************/

  COMMAREA.CATOAP = "SL0Y";
  SLWREC.SLWMSGNO = 0;
  XSSL001();
  SLWREC.SLWERRSW = "Y";
  SLWREC.XXXLOCID = "510";
  SLWREC.SLWMSGNO = 0;
  SL0FM010.VAGen_EZEMSG = CAMSG;
  exit stack;


end // end SL0F510

// format sum in buffer area
Function SL0FS1A()
   /* ************************************************************/
   /* *** format summary line in buffer area                  ****/
   /* ************************************************************/

  SL0FWB1.SL0FWROW = SL0FW01.SL0FWROW;
  SL0FW01.SL0FWROW = SL0FW01.SL0FWROW + 1;
  SL0FWB1.YWSCD = SL8REC.YWSCD;
  SL0FWB1.YWTCD = SL8REC.YWTCD;
  SL0FWB1.SL8WONBR = SL8REC.SL8WONBR;
  SL0FWB1.SL2PALET = SL8REC.SL2PALET;
  SL0FWB1.SL2CASE = SL8REC.SL2CASE;
  SL0FWB1.SL8WOGRP = SL8REC.SL8WOGRP;
  SL0FWB1.SL8FRAR = SL8REC.SL8FRAR;
  SL0FWB1.SL8FRZN = SL8REC.SL8FRZN;
  SL0FWB1.SL8FRLC = SL8REC.SL8FRLC;
  SL0FWB1.SL8TOAR = SL8REC.SL8TOAR;
  SL0FWB1.SL8TOZN = SL8REC.SL8TOZN;
  SL0FWB1.SL8TOLC = SL8REC.SL8TOLC;
  SL0FWB1.SL0FWSDT = SL8REC.ZZZSDT;
  SL0FWB1.SL8DRVR = SL8REC.SL8DRVR;

  if (SL8REC.XWHCD == "51"
   || SL8REC.XWHCD == "25")
    SL0FW01.SL0FWPD = SL8REC.PC3PONBR;
    SL0FWB1.SL0FWPIN = SL0FW01.SL0FWPD;
  else
    if (SL8REC.XWHCD == "42" /* Canada*/
     && SL8REC.XGPCD == "03")
      SL0FW01.SL0FWPD = SL8REC.PC3PONBR;
      SL0FWB1.SL0FWPIN = SL0FW01.SL0FWPD;
    else
      SL0FW01.SL0FWPD = PC3REC.PC3POIDT;
      SL0FW01.SL0FWPE1 = SL0FW01.SL0FWPD2;
      SL0FW01.SL0FWPG = PC3REC.FY1FCTYC;
      SL0FW01.SL0FWPE2 = SL0FW01.SL0FWPG2;
      SL0FW01.SL0FWPE3 = PC3REC.PC4ORTYP;
      SL0FWB1.SL0FWPIN = SL0FW01.SL0FWPE;
    end
  end

  SL0FWB1.SL0FWCON = SL8REC.TS3CNTNR;
  SL0FWB1.SL0FWPNB = SL8REC.SWEPLLNB;

  if (SL0FWB1.YWSCD == "01")
    SL0FWB1.SL0FWCDT = 0;
  else
    SL0FWB1.SL0FWCDT = SL8REC.ZZZCHGDT;
  end

  SL0FWB1.PK2SCHNO = SL8REC.PK2SCHNO;
  SL0FWB1.SL8CRTBY = SL8REC.SL8CRTBY;


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FS1A

// process live/memorex hdrs
Function SL0FS1B()


  TA1REC.TA1LOCAT[2] = "SL0FS1B ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;


  set SL8REC empty;
  SL8REC.XWHCD = SL0FM110.XWHCD;
  SL8REC.SL8FRAR = SL0FM110.XARCD;
  SL8REC.SL8FRZN = SL0FM110.SL4ZONE;
  SL8REC.SL8FRLC = SL0FM110.SL5LOCTN;

  if (SL0FM110.YWSCD == "A ")
    SL8REC.YWSCD = "* ";
  else
    SL8REC.YWSCD = SL0FM110.YWSCD;
  end

  if (SL0FM110.YWTCD == "A ")
    SL8REC.YWTCD = "* ";
  else
    SL8REC.YWTCD = SL0FM110.YWTCD;
  end


  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";
  TA2REC.TA2GRGAN = SL0FM110.SL0FMFDT;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD == 0)
    SLDREC.SLDSDT = TA2REC.TA2GRGGN;
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1BA";
    SLWREC.SLWMSGNO = 0021; /* invalid value msg*/
    set SL0FM110.SL0FMFDT cursor, bold;
    return;
  end

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";
  TA2REC.TA2GRGAN = SL0FM110.SL0FMTDT;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD == 0)
    SLDREC.SLDEDT = TA2REC.TA2GRGGN;
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1BB";
    SLWREC.SLWMSGNO = 0021; /* invalid value msg*/
    set SL0FM110.SL0FMTDT cursor, bold;
    return;
  end

  SLDREC.SLDXWH = SL0FM110.XWHCD;
                                   /* parameters passed for select*/
  SLDREC.SLDARC = SL0FM110.XARCD;
  SLDREC.SLDZNC = SL0FM110.SL4ZONE;
  SLDREC.SLDLOC = SL0FM110.SL5LOCTN;

  SL0FW01.SL0FWRCR = 0;
                                   /* initialize recs read counter*/

  SL0FW01.SL0FWEOW = "N"; /* set end of w.o. recs switch*/
  XSSLUS1(); /* <=== select set of w.o. hdr recs*/

  if (SQLCA.VAGen_SQLCODE == +100) /* for INQUIRY*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1BC";
    SLWREC.SLWMSGNO = 0031; /* try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0)
    SLWREC.SLWERRSW = "Y";
                                   /* for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S1BD";
    SLWREC.SLWMSGNO = 0001; /* severe error msg*/
    SL0FST1(); /* <=== clear scrn (empty)*/
    return;
  end

   /* **********************************************/
   /* ***  if record has a type that is to be   ****/
   /* ***  omitted, then fetch until a valid    ****/
   /* ***  type is found or end of file.        ****/
   /* **********************************************/

  if (SQLCA.VAGen_SQLCODE == +0)
    if (SL0FM110.SL0FMOTP != "  ") /* type for omission*/
      if (SL8REC.YWTCD == SL0FM110.SL0FMOTP) /* if type to omit*/
        while (SL8REC.YWTCD == SL0FM110.SL0FMOTP /* while type to omit*/
         && SL0FW01.SL0FWEOW != "Y") /* and rows remain*/
          XSSLUF1(); /* <=== fetch next w.o. record*/
          if (SQLCA.VAGen_SQLCODE == +100)
            SL0FW01.SL0FWEOW = "Y"; /* set eof switch*/
          end
        end
      end
    end
  end

  if (SL0FW01.SL0FWEOW == "N")
    SL0FW01.SL0FWRSW = "Y"; /* yes we have data*/
  end

   /* ************************************************/
   /* *** process w.o. hdr records and build tsqs ****/
   /* ************************************************/

  while (SQLCA.VAGen_SQLCODE != +100) /* while there is data*/

    SL0FW01.SL0FWRCR = SL0FW01.SL0FWRCR + 1; /* increment recs read counter*/

    move SL8REC to SLBREC withV60Compat;

    SL0FS1J(); /* <=== obtain size data*/
    if (SLWREC.SLWERRSW == "Y") /* if not live, try memorex*/
      SLWREC.SLWERRSW = "N";
      SL0FS1I(); /* <=== obtain size data*/
    end

    if (SLWREC.SLWERRSW == "Y")
      return;
    end

    SL0FS1K(); /* <=== obtain style color data*/
    if (SLWREC.SLWERRSW == "Y") /* if not live try memorex*/
      SLWREC.SLWERRSW = "N";
      SL0FS1L(); /* <=== obtain style color data*/
    end

    if (SLWREC.SLWERRSW == "Y")
      return;
    end

    set SL9REC empty;
    SL9REC.XWHCD = SL8REC.XWHCD;
    SL9REC.SL8WONBR = SL8REC.SL8WONBR;

    set SLCREC empty;
    SLCREC.XWHCD = SL8REC.XWHCD;
    SLCREC.SL8WONBR = SL8REC.SL8WONBR;

    XSSL9S1(); /* <=== obtain w.o. item recs*/

    if (SQLCA.VAGen_SQLCODE == +0)
      SL0FW01.SL0FWTSW = "L"; /* live w.o. being processed*/
    end

    if (SQLCA.VAGen_SQLCODE == +100) /* for live inquiry*/
      XSSLCS1();
      if (SQLCA.VAGen_SQLCODE == +0)
        SL0FW01.SL0FWTSW = "M";
                                   /* memorex w.o. being processed*/
      end
      if (SQLCA.VAGen_SQLCODE == +100) /* for memorex inquiry*/
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S1BE";
        SLWREC.SLWMSGNO = 0001; /* try again msg*/
        return;
      end
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* for any initial db access*/
      SLWREC.SLWSKYSW = "N";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1BF";
      SLWREC.SLWMSGNO = 0031; /* try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE != 0)
      SLWREC.SLWERRSW = "Y";
                                   /* for all other neg. sql codes*/
      SLWREC.XXXLOCID = "S1BG";
      SLWREC.SLWMSGNO = 0001; /* severe error msg*/
      SL0FST1(); /* <=== clear scrn (empty)*/
      return;
    end

    if (SL0FW01.SL0FWTSW == "L")
      SL0FS1A(); /* <=== format sum in buffer area*/
      SL0FS1E(); /* <=== format dtl in buffer area*/
    else
      SL0FS1Q(); /* <=== format sum in buffer area*/
      SL0FS1R(); /* <=== format dtl in buffer area*/
    end


    if (SLWREC.SLWERRSW == "Y")
      return;
    end

    if (SQLCA.VAGen_SQLCODE == +100)

      SL0FS1M(); /* <=== put summary buffer to tsq*/

      SL0FS1N(); /* <=== put detail buffer to tsq*/

      SLWREC.SLWIDX01 = 0;

      SL0FW01.SL0FWACC = 0; /* initialize accumulator*/

      if (SLWREC.SLWERRSW == "Y")
        return;
      end
    end

    if (SL0FM110.SL0FMOTP != "  ") /* type for omission*/
      SL8REC.YWTCD = SL0FM110.SL0FMOTP;
      while (SL8REC.YWTCD == SL0FM110.SL0FMOTP /* while type to omit*/
       && SL0FW01.SL0FWEOW != "Y") /* and rows remain*/
        XSSLUF1();
                                   /* <=== fetch next w.o. header rec*/
        if (SQLCA.VAGen_SQLCODE == +100)
          SL0FW01.SL0FWEOW = "Y"; /* set eof switch*/
        end
      end
    else
      XSSLUF1();
                                   /* <=== fetch next w.o. header rec*/
    end

    if (SQLCA.VAGen_SQLCODE == +100)
      SL0FW01.SL0FWEOW = "Y";
    end
    if (SQLCA.VAGen_SQLCODE < +0)
      SLWREC.SLWERRSW = "Y"; /* for negative sql codes*/
      SLWREC.XXXLOCID = "S1H ";
      SLWREC.SLWMSGNO = 0001; /* severe error message*/
      SL0FST1(); /* <=== reset screen empty*/
      return;
    end

    if (SLWREC.SLWERRSW == "Y")
      return;
    end

    /* ***********************************************************/
    /* *** set limit on data to be displayed                  ****/
    /* *** note: data displayed will equal 2 pages            ****/
    /* ***********************************************************/

    if (SL0FW01.SL0FWRCR == 390)

      if (SQLCA.VAGen_SQLCODE == +0)
        XSSLUC1(); /* close cursor*/
        SLWREC.XXXLOCID = "S1BI"; /* limited data displayed*/
        SLWREC.SLWMSGNO = 0178;
      end

      SQLCA.VAGen_SQLCODE = +100;
    end

  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FS1B

// is detail queue full ?
Function SL0FS1C()


   /* *** include summary buffer line ****/
  SLWREC.SLWIDX06 = SLWREC.SLWIDX01 + 4; /* det + sum,prod,size lines*/

  if (SLWREC.SLWIDX06 <= SLWREC.SLWIDX04)
    SLWREC.SLWIDX04 = SLWREC.SLWIDX04 - SLWREC.SLWIDX06; /* available space*/
  else
    if (SLWREC.SLWIDX02 != 1) /* if any lines in detail w.s*/
      /* *** fill the rest of the detail queue with blank records ****/
      while (SLWREC.SLWIDX02 <= SLWREC.SLWLINPP)
        SL0FWD0.SL0FWRTY[SLWIDX02] = "B";
        SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
      end
      /* *** put the detail records to the tsq ****/
      TA5REC.TA5APPID = SLWREC.SLWDETQU;
      TA5REC.TA5FNCCD = "A";
      call "TA0050" (SL0FWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
      if (TA5REC.TA5RTNCD != 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S1CA";
        SLWREC.SLWMSGNO = 0001; /* <--- severe tsq error msg*/
        return;
      end
      /* *** reset for next group ****/
      SL0FW01.SL0FWDPA = SL0FW01.SL0FWDPA + 1;
      SLWREC.SLWIDX02 = 1;
      SLWREC.SLWIDX04 = SLWREC.SLWLINPP;
      SLWREC.SLWIDX04 = SLWREC.SLWIDX04 - SLWREC.SLWIDX06;
                                   /* available space*/
    end
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0FS1C

// obtain 1st detail record
Function SL0FS1D()


  TA5REC.TA5APPID = SLWREC.SLWDETQU;
  TA5REC.TA5TSQIX = 0001;
  TA5REC.TA5FNCCD = "R";
  call "TA0050" (SL0FWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1DA";
    SLWREC.SLWMSGNO = 0001;
    return;
  end

  SLWREC.SLWDETIX = TA5REC.TA5TSQIX;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0FS1D

// format detail line & read next
Function SL0FS1E()
  SL0FWB1.XGPCD = SL8REC.XGPCD;
  SL0FWB1.SY1STNBR = SL8REC.SY1STNBR;
  SL0FWB1.SY2CLRID = SL8REC.SY2CLRID;
  SL0FWB1.XDMCD = SL8REC.XDMCD;
  SL0FWB1.SY1SSTNM = PKNREC.SY1SSTNM;
  SL0FWB1.SY2CLRAB = PKNREC.SY2CLRAB;
  SL0FWB1.XQACD = SL8REC.XQACD;
  SL0FWB1.PC2INSEG = SL8REC.PC2INSEG;
  SL0FWB1.XEGCD = XEGTBL.XEGCD;
  SL0FWB1.XSLCD = SL8REC.XSLCD;
  SL0FWB1.XPGCD = SL8REC.XPGCD;
  SL0FWB1.XUMCD = SL8REC.XUMCD;
  SL0FWB1.XOWCD = SL8REC.XOWCD;
  SL0FWB1.SY1UNPCS = SL8REC.SY1UNPCS;

  SLWREC.SLWIDX06 = 1;

  while (SQLCA.VAGen_SQLCODE == +0)

    SL0FW01.SL0FWSZ1 = SL9REC.SY5SZID;
    if (SLWREC.SLWIDX06 > 4)
       /* put detail line to detail buffer*/
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1; /* increment det line ct.*/
      SL0FWB1.SL0FWDT1[SLWIDX01] = SL0FWL1.SL0FWLN1;
       /* reset sizes per line counter*/
      SLWREC.SLWIDX06 = 1;
    end
    SL0FWL1.SY4IDDSC[SLWIDX06] = SYPREC.SY4IDDSC[SL0FWSZ1];
    SL0FWL1.SL9WOQTY[SLWIDX06] = SL9REC.SL9WOQTY;
    SL0FW01.SL0FWACC = SL0FW01.SL0FWACC + SL9REC.SL9WOQTY;
    SLWREC.SLWIDX06 = SLWREC.SLWIDX06 + 1; /* increment sizes/line*/

    XSSL9F1(); /* fetch next w.o. item rec*/

    if (SLWREC.SLWERRSW == "Y")
      return;
    end
  end

   /* *** fill remaining sizes with spaces and put to det buffer*/

  if (SQLCA.VAGen_SQLCODE == +100)
    if (SLWREC.SLWIDX06 > 4)
       /* put detail line to detail buffer*/
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1; /* increment det line ct.*/
      SL0FWB1.SL0FWDT1[SLWIDX01] = SL0FWL1.SL0FWLN1;
      SLWREC.SLWIDX06 = 1;
    end
    /* *** put total qty on detail line ****/
    SL0FWL1.SY4IDDSC[SLWIDX06] = "TOTAL";
    SL0FWL1.SL9WOQTY[SLWIDX06] = SL0FW01.SL0FWACC;
    SLWREC.SLWIDX06 = SLWREC.SLWIDX06 + 1; /* increment sizes/line*/

    while (SLWREC.SLWIDX06 <= 4)
      SL0FWL1.SY4IDDSC[SLWIDX06] = "     ";
      SL0FWL1.SL9WOQTY[SLWIDX06] = 0;
      SLWREC.SLWIDX06 = SLWREC.SLWIDX06 + 1; /* increment sizes/line*/
    end
    /* *** now put detail line to buffer area ****/
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1; /* increment det line ct.*/
    SL0FWB1.SL0FWDT1[SLWIDX01] = SL0FWL1.SL0FWLN1;
  end

   /* ***********************************************************/
   /* *** end of statement group                             ****/
   /* ***********************************************************/
end // end SL0FS1E

// obtain size data (memorex)
Function SL0FS1I()

   /* *** obtain valid size descriptions ****/

  SYPREC.XGPCD = SLBREC.XGPCD;
  SYPREC.SY1STNBR = SLBREC.SY1STNBR;
  SYPREC.SY2CLRID = SLBREC.SY2CLRID;
  SYPREC.XDMCD = SLBREC.XDMCD;
  SYPREC.XQACD = SLBREC.XQACD;

  SL0FSAA(); /* perform size translation call*/


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0FS1I

// obtain size data
Function SL0FS1J()

   /* *** obtain valid size descriptions ****/

  SYPREC.XGPCD = SL8REC.XGPCD;
  SYPREC.SY1STNBR = SL8REC.SY1STNBR;
  SYPREC.SY2CLRID = SL8REC.SY2CLRID;
  SYPREC.XDMCD = SL8REC.XDMCD;
  SYPREC.XQACD = SL8REC.XQACD;

  SL0FSAA(); /* perform size translation call*/


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0FS1J

// obtain style color data
Function SL0FS1K()


   /* ************************************************************/
   /* *** obtain style and color data                         ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0FS1K ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  PKNREC.XGPCD = SL8REC.XGPCD;
  PKNREC.SY1STNBR = SL8REC.SY1STNBR;
  PKNREC.SY2CLRID = SL8REC.SY2CLRID;
  PKNREC.XDMCD = SL8REC.XDMCD;

  SL0F460(); /* <=== std prod loctn inquiry*/

  if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1KA";
    SLWREC.SLWMSGNO = 0001; /* <--- not on db msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1KB";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0)
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S1KC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    SL0FST1(); /* <=== clear scrn (empty)*/
    return;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FS1K

// obtain style,color (memorex)
Function SL0FS1L()


   /* ************************************************************/
   /* *** obtain style and color data                         ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0FS1L ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  PKNREC.XGPCD = SLBREC.XGPCD;
  PKNREC.SY1STNBR = SLBREC.SY1STNBR;
  PKNREC.SY2CLRID = SLBREC.SY2CLRID;
  PKNREC.XDMCD = SLBREC.XDMCD;

  SL0F460(); /* <=== std prod loctn inquiry*/

  if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1LA";
    SLWREC.SLWMSGNO = 0001; /* <--- not on db msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1LB";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0)
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S1LC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    SL0FST1(); /* <=== clear scrn (empty)*/
    return;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FS1L

// put summary data to tsq
Function SL0FS1M()


   /* *** check to see if detail lines will fit to keep       ****/
   /* *** detail page count correct on summary record.        ****/
   /* *** move summary data to summary array area             ****/
   /* *** if maximum nbr of lines in summary array put to tsq ****/

  SL0FS1C(); /* determine if detail record queue is full*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  if (SLWREC.SLWIDX03 <= SLWREC.SLWLINPP)
    SL0FWS0.SL0FWDPG[SLWIDX03] = SL0FW01.SL0FWDPA;
    SL0FWS0.SL0FWRTY[SLWIDX03] = "S";
    SL0FWS0.SL0FWDTA[SLWIDX03] = SL0FWB1.SL0FWSM1;
    SLWIDX03 = SLWIDX03 + 1;
  else
    TA5REC.TA5APPID = SLWREC.SLWSUMQU;
    TA5REC.TA5FNCCD = "A";

    call "TA0050" (SL0FWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
    if (TA5REC.TA5RTNCD != 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1MA";
      SLWREC.SLWMSGNO = 0001; /* <--- severe tsq error msg*/
      return;
    end
    /* *** increment summary counter ****/
    SL0FW01.SL0FWSPA = SL0FW01.SL0FWSPA + 1;
    /* *** setup next summary record ****/
    SLWREC.SLWIDX03 = 1;
    SL0FWS0.SL0FWRTY[SLWIDX03] = "S";
    SL0FWS0.SL0FWDTA[SLWIDX03] = SL0FWB1.SL0FWSM1;
    SLWIDX03 = SLWIDX03 + 1;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0FS1M

// put detail data to tsq
Function SL0FS1N()


  SL0FWD0.SL0FWSPG[SLWIDX02] = SL0FW01.SL0FWSPA;
  SL0FWD0.SL0FWRTY[SLWIDX02] = "S";
  SL0FWD0.SL0FWDTA[SLWIDX02] = SL0FWB1.SL0FWSM1;
  SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;

  SL0FWD0.SL0FWSPG[SLWIDX02] = SL0FW01.SL0FWSPA;
  SL0FWD0.SL0FWRTY[SLWIDX02] = "P";
  SL0FWD0.SL0FWDTA[SLWIDX02] = SL0FWB1.SL0FWSY1;
  SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;

  SL0FWD0.SL0FWSPG[SLWIDX02] = SL0FW01.SL0FWSPA;
  SL0FWD0.SL0FWRTY[SLWIDX02] = "Q";
  SL0FWD0.SL0FWDTA[SLWIDX02] = SL0FWB1.SL0FWQA1;
  SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;

  SL0FWD0.SL0FWSPG[SLWIDX02] = SL0FW01.SL0FWSPA;
  SL0FWD0.SL0FWRTY[SLWIDX02] = "Z";
  SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;

  SLWREC.SLWIDX05 = 1;
  while (SLWREC.SLWIDX05 <= SLWREC.SLWIDX01)
    if (SLWREC.SLWIDX02 <= SLWREC.SLWLINPP)
      SL0FWD0.SL0FWSPG[SLWIDX02] = SL0FW01.SL0FWSPA;
      SL0FWD0.SL0FWRTY[SLWIDX02] = "D";
      SL0FWD0.SL0FWDTA[SLWIDX02] = SL0FWB1.SL0FWDT1[SLWIDX05];
      SLWREC.SLWIDX05 = SLWREC.SLWIDX05 + 1;
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
    else
      /* *** since we checked for this in sl0fs1c, there must ****/
      /* *** be a subscript error                             ****/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S1NA";
      SLWREC.SLWMSGNO = 0001; /* <--- severe tsq error msg*/
      return;
    end
  end

   /* *** add blank line to the detail queue ****/

  if (SLWREC.SLWIDX02 < SLWREC.SLWLINPP)
    SL0FWD0.SL0FWRTY[SLWIDX02] = "B";
    SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
    /* *** decrement lines available ****/
    SLWREC.SLWIDX04 = SLWREC.SLWIDX04 - 1;

  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0FS1N

// put last sum group to tsq
Function SL0FS1O()


   /* *** move summary data to summary array area ****/
   /* *** if maximum nbr of lines in summary array put to tsq ****/

  while (SLWREC.SLWIDX03 <= SLWREC.SLWLINPP)
    SL0FWS0.SL0FWRTY[SLWIDX03] = "B";
    SLWIDX03 = SLWIDX03 + 1;
  end

  TA5REC.TA5APPID = SLWREC.SLWSUMQU;
  TA5REC.TA5FNCCD = "A";

  call "TA0050" (SL0FWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1OA";
    SLWREC.SLWMSGNO = 0001; /* <--- severe tsq error msg*/
    return;
  end
   /* *** increment summary page counter ****/
  SL0FW01.SL0FWSPA = SL0FW01.SL0FWSPA + 1;
   /* *** save maximum number of summary records ****/
  SLWREC.SLWSMAXR = TA5REC.TA5TSQIX;
   /* *** increment summary counter ****/
  SLWIDX03 = SLWIDX03 + 1;


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0FS1O

// put last detail group to tsq
Function SL0FS1P()


  while (SLWREC.SLWIDX02 <= SLWREC.SLWLINPP)
    SL0FWD0.SL0FWSPG[SLWIDX02] = SL0FW01.SL0FWSPA;
    SL0FWD0.SL0FWRTY[SLWIDX02] = "B";
    SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
  end

   /* *** setup call areas and add record to tsq ****/
  TA5REC.TA5APPID = SLWREC.SLWDETQU;
  TA5REC.TA5FNCCD = "A";
  call "TA0050" (SL0FWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1PA";
    SLWREC.SLWMSGNO = 0001; /* <--- severe tsq error msg*/
    return;
  end

   /* *** increment detail page counter ****/
  SL0FW01.SL0FWDPA = SL0FW01.SL0FWDPA + 1;
   /* *** save maximum number of summary records ****/
  SLWREC.SLWDMAXR = TA5REC.TA5TSQIX;


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0FS1P

// format summary data
Function SL0FS1Q()
   /* ************************************************************/
   /* *** format summary line in buffer area                  ****/
   /* ************************************************************/

  SL0FWB1.SL0FWROW = SL0FW01.SL0FWROW;
  SL0FW01.SL0FWROW = SL0FW01.SL0FWROW + 1;
  SL0FWB1.YWSCD = SLBREC.YWSCD;
  SL0FWB1.YWTCD = SLBREC.YWTCD;
  SL0FWB1.SL8WONBR = SLBREC.SL8WONBR;
  SL0FWB1.SL2PALET = SLBREC.SL2PALET;
  SL0FWB1.SL2CASE = SLBREC.SL2CASE;
  SL0FWB1.SL8WOGRP = SLBREC.SL8WOGRP;
  SL0FWB1.SL8FRAR = SLBREC.SL8FRAR;
  SL0FWB1.SL8FRZN = SLBREC.SL8FRZN;
  SL0FWB1.SL8FRLC = SLBREC.SL8FRLC;
  SL0FWB1.SL8TOAR = SLBREC.SL8TOAR;
  SL0FWB1.SL8TOZN = SLBREC.SL8TOZN;
  SL0FWB1.SL8TOLC = SLBREC.SL8TOLC;
  SL0FWB1.SL0FWSDT = SLBREC.ZZZSDT;
  SL0FWB1.SL8DRVR = SLBREC.SL8DRVR;

  if (SLBREC.XWHCD == "51"
   || SLBREC.XWHCD == "25")
    SL0FW01.SL0FWPD = SLBREC.PC3PONBR;
    SL0FWB1.SL0FWPIN = SL0FW01.SL0FWPD;
  else
    if (SLBREC.XWHCD == "42" /* Canada*/
     && SLBREC.XGPCD == "03")
      SL0FW01.SL0FWPD = SLBREC.PC3PONBR;
      SL0FWB1.SL0FWPIN = SL0FW01.SL0FWPD;
    else
      SL0FW01.SL0FWPD = PC3REC.PC3POIDT;
      SL0FW01.SL0FWPE1 = SL0FW01.SL0FWPD2;
      SL0FW01.SL0FWPG = PC3REC.FY1FCTYC;
      SL0FW01.SL0FWPE2 = SL0FW01.SL0FWPG2;
      SL0FW01.SL0FWPE3 = PC3REC.PC4ORTYP;
      SL0FWB1.SL0FWPIN = SL0FW01.SL0FWPE;
    end
  end

  SL0FWB1.SL0FWCON = SLBREC.TS3CNTNR;
  SL0FWB1.SL0FWPNB = SLBREC.SWEPLLNB;

  if (SL0FWB1.YWSCD == "01")
    SL0FWB1.SL0FWCDT = 0;
  else
    SL0FWB1.SL0FWCDT = SLBREC.ZZZCHGDT;
  end

  SL0FWB1.PK2SCHNO = SLBREC.PK2SCHNO;
  SL0FWB1.SL8CRTBY = SLBREC.SL8CRTBY;


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0FS1Q

// format detail area
Function SL0FS1R()
  SL0FWB1.XGPCD = SLBREC.XGPCD;
  SL0FWB1.SY1STNBR = SLBREC.SY1STNBR;
  SL0FWB1.SY2CLRID = SLBREC.SY2CLRID;
  SL0FWB1.XDMCD = SLBREC.XDMCD;
  SL0FWB1.SY1SSTNM = PKNREC.SY1SSTNM;
  SL0FWB1.SY2CLRAB = PKNREC.SY2CLRAB;
  SL0FWB1.XQACD = SLBREC.XQACD;
  SL0FWB1.PC2INSEG = SLBREC.PC2INSEG;
  SL0FWB1.XEGCD = XEGTBL.XEGCD;
  SL0FWB1.XSLCD = SLBREC.XSLCD;
  SL0FWB1.XPGCD = SLBREC.XPGCD;
  SL0FWB1.XUMCD = SLBREC.XUMCD;
  SL0FWB1.XOWCD = SLBREC.XOWCD;
  SL0FWB1.SY1UNPCS = SLBREC.SY1UNPCS;

  SLWREC.SLWIDX06 = 1;

  while (SQLCA.VAGen_SQLCODE == +0)

    SL0FW01.SL0FWSZ1 = SLCREC.SY5SZID;
    if (SLWREC.SLWIDX06 > 4)
       /* put detail line to detail buffer*/
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1; /* increment det line ct.*/
      SL0FWB1.SL0FWDT1[SLWIDX01] = SL0FWL1.SL0FWLN1;
       /* now put current size data to detail line*/
      SLWREC.SLWIDX06 = 1;
    end
    SL0FWL1.SY4IDDSC[SLWIDX06] = SYPREC.SY4IDDSC[SL0FWSZ1];
    SL0FWL1.SL9WOQTY[SLWIDX06] = SLCREC.SL9WOQTY;
    SL0FW01.SL0FWACC = SL0FW01.SL0FWACC + SLCREC.SL9WOQTY;
    SLWREC.SLWIDX06 = SLWREC.SLWIDX06 + 1; /* increment sizes/line*/

    XSSLCF1(); /* fetch next w.o. item rec*/

    if (SLWREC.SLWERRSW == "Y")
      return;
    end
  end

   /* *** fill remaining sizes with spaces and put to det buffer*/

  if (SQLCA.VAGen_SQLCODE == +100)
    if (SLWREC.SLWIDX06 > 4)
       /* put detail line to detail buffer*/
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1; /* increment det line ct.*/
      SL0FWB1.SL0FWDT1[SLWIDX01] = SL0FWL1.SL0FWLN1;
      SLWREC.SLWIDX06 = 1;
    end
    /* *** put total qty on detail line ****/
    SL0FWL1.SY4IDDSC[SLWIDX06] = "TOTAL";
    SL0FWL1.SL9WOQTY[SLWIDX06] = SL0FW01.SL0FWACC;
    SLWREC.SLWIDX06 = SLWREC.SLWIDX06 + 1; /* increment sizes/line*/

    while (SLWREC.SLWIDX06 <= 4)
      SL0FWL1.SY4IDDSC[SLWIDX06] = "     ";
      SL0FWL1.SL9WOQTY[SLWIDX06] = 0;
      SLWREC.SLWIDX06 = SLWREC.SLWIDX06 + 1; /* increment sizes/line*/
    end
    /* *** now put detail line to buffer area ****/
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1; /* increment det line ct.*/
    SL0FWB1.SL0FWDT1[SLWIDX01] = SL0FWL1.SL0FWLN1;
  end


   /* ***********************************************************/
   /* *** end of statement group                             ****/
   /* ***********************************************************/
end // end SL0FS1R

// obtain first summary record
Function SL0FS1S()


  TA5REC.TA5APPID = SLWREC.SLWSUMQU;
  TA5REC.TA5TSQIX = 0001;
  TA5REC.TA5FNCCD = "R";
  call "TA0050" (SL0FWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S1SA";
    SLWREC.SLWMSGNO = 0001;
    return;
  end

  SLWREC.SLWSUMIX = TA5REC.TA5TSQIX;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0FS1S

// format summary in buffer area
Function SL0FS2A()
   /* ************************************************************/
   /* *** format summary line in buffer area                  ****/
   /* ************************************************************/

  SL0FWB2.SL0FWROW = SL0FW02.SL0FWROW;
  SL0FW02.SL0FWROW = SL0FW02.SL0FWROW + 1;
  SL0FWB2.YWSCD = SL8REC.YWSCD;
  SL0FWB2.YWTCD = SL8REC.YWTCD;
  SL0FWB2.SL8WONBR = SL8REC.SL8WONBR;
  SL0FWB2.SL2PALET = SL8REC.SL2PALET;
  SL0FWB2.SL2CASE = SL8REC.SL2CASE;
  SL0FWB2.SL8WOGRP = SL8REC.SL8WOGRP;
  SL0FWB2.SL8FRAR = SL8REC.SL8FRAR;
  SL0FWB2.SL8FRZN = SL8REC.SL8FRZN;
  SL0FWB2.SL8FRLC = SL8REC.SL8FRLC;
  SL0FWB2.SL8TOAR = SL8REC.SL8TOAR;
  SL0FWB2.SL8TOZN = SL8REC.SL8TOZN;
  SL0FWB2.SL8TOLC = SL8REC.SL8TOLC;
  SL0FWB2.SL0FWSDT = SL8REC.ZZZSDT;
  SL0FWB2.SL8DRVR = SL8REC.SL8DRVR;

  if (SL8REC.XWHCD == "51"
   || SL8REC.XWHCD == "25")
    SL0FW02.SL0FWPD = SL8REC.PC3PONBR;
    SL0FWB2.SL0FWPIN = SL0FW02.SL0FWPD;
  else
    if (SL8REC.XWHCD == "42" /* Canada*/
     && SL8REC.XGPCD == "03")
      SL0FW02.SL0FWPD = SL8REC.PC3PONBR;
      SL0FWB2.SL0FWPIN = SL0FW02.SL0FWPD;
    else
      SL0FW02.SL0FWPD = PC3REC.PC3POIDT;
      SL0FW02.SL0FWPE1 = SL0FW02.SL0FWPD2;
      SL0FW02.SL0FWPG = PC3REC.FY1FCTYC;
      SL0FW02.SL0FWPE2 = SL0FW02.SL0FWPG2;
      SL0FW02.SL0FWPE3 = PC3REC.PC4ORTYP;
      SL0FWB2.SL0FWPIN = SL0FW02.SL0FWPE;
    end
  end

  SL0FWB2.SL0FWCON = SL8REC.TS3CNTNR;
  SL0FWB2.SL0FWPNB = SL8REC.SWEPLLNB;

  if (SL0FWB2.YWSCD == "01")
    SL0FWB2.SL0FWCDT = 0;
  else
    SL0FWB2.SL0FWCDT = SL8REC.ZZZCHGDT;
  end

  SL0FWB2.PK2SCHNO = SL8REC.PK2SCHNO;
  SL0FWB2.SL8CRTBY = SL8REC.SL8CRTBY;


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FS2A

// process live/memorex records
Function SL0FS2B()


  TA1REC.TA1LOCAT[2] = "SL0FS2B ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  SL0FS2W(); /* <=== initialize dcl record areas*/

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";
  TA2REC.TA2GRGAN = SL0FM210.SL0FMFDT;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD == 0)
    SLVREC.SLVSDT = TA2REC.TA2GRGGN;
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S2BA";
    SLWREC.SLWMSGNO = 0021; /* invalid value msg*/
    set SL0FM210.SL0FMFDT cursor, bold;
    return;
  end

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";
  TA2REC.TA2GRGAN = SL0FM210.SL0FMTDT;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD == 0)
    SLVREC.SLVEDT = TA2REC.TA2GRGGN;
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S2BB";
    SLWREC.SLWMSGNO = 0021; /* invalid value msg*/
    set SL0FM210.SL0FMTDT cursor, bold;
    return;
  end

  SL0FW02.SL0FWEOL = "N";
  SL0FW02.SL0FWEOM = "N";

  XSSL8S4(); /* <=== select set of w.o. hdr recs*/

  if (SQLCA.VAGen_SQLCODE == +100) /* for INQUIRY*/
    SL0FW02.SL0FWLKY = +999999999;
                                   /* high values to live sort key*/
    SL0FW02.SL0FWEOL = "Y"; /* end of live hdrs*/
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S2BC";
    SLWREC.SLWMSGNO = 0031; /* try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE < 0)
    SLWREC.SLWERRSW = "Y";
                                   /* for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S2BD";
    SLWREC.SLWMSGNO = 0001; /* severe error msg*/
    SL0FST2(); /* <=== clear scrn (empty)*/
    return;
  end

   /* ****************************************************/
   /* ***  if live record has a type that is to be    ****/
   /* ***  omitted, then fetch until a valid type is  ****/
   /* ***  found or end of file.                      ****/
   /* ****************************************************/

  if (SQLCA.VAGen_SQLCODE == +0)
    if (SL0FM210.SL0FMOTP != "  ") /* type for omission*/
      if (SL8REC.YWTCD == SL0FM210.SL0FMOTP)
        while (SL8REC.YWTCD == SL0FM210.SL0FMOTP /* while type to omit*/
         && SL0FW02.SL0FWEOL != "Y") /* and rows remain*/
          XSSL8F4(); /* <=== fetch next live hdr*/
          if (SQLCA.VAGen_SQLCODE == +100)
            SL0FW02.SL0FWEOL = "Y"; /* set eof switch*/
          end
        end
      end
    end
    if (SL0FW02.SL0FWEOL != "Y")
      SL0FW02.SL0FWLKY = SL8REC.SL8WONBR;
    else
      SL0FW02.SL0FWLKY = +999999999;
    end

  end


  XSSLBS4(); /* <=== select memorex w.o. hdrs*/

  if (SQLCA.VAGen_SQLCODE == +100)
    SL0FW02.SL0FWMKY = +999999999; /* high values to mem sort key*/
    SL0FW02.SL0FWEOM = "Y"; /* end of memorex hdrs*/
  end

  if (SQLCA.VAGen_SQLCODE == -911) /* for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S2BE";
    SLWREC.SLWMSGNO = 0031; /* try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE < 0)
    SLWREC.SLWERRSW = "Y"; /* for negative sql codes*/
    SLWREC.XXXLOCID = "S2BF";
    SLWREC.SLWMSGNO = 0001; /* severe error message*/
    SL0FST2(); /* <=== clear scrn (empty)*/
    return;
  end

   /* ****************************************************/
   /* ***  if memorex record has a type that is to be ****/
   /* ***  omitted, then fetch until a valid type is  ****/
   /* ***  found of end of file.                      ****/
   /* ****************************************************/

  if (SQLCA.VAGen_SQLCODE == +0)
    if (SL0FM210.SL0FMOTP != "  ") /* type for omission*/
      if (SLBREC.YWTCD == SL0FM210.SL0FMOTP)
        while (SLBREC.YWTCD == SL0FM210.SL0FMOTP /* no valid type*/
         && SL0FW02.SL0FWEOM != "Y") /* and rows remain*/
          XSSLBF4(); /* <=== fetch next mem record*/
          if (SQLCA.VAGen_SQLCODE == +100)
            SL0FW02.SL0FWEOM = "Y"; /* set eof switch*/
          end
        end
      end
    end
    if (SL0FW02.SL0FWEOM != "Y")
      SL0FW02.SL0FWMKY = SLBREC.SL8WONBR; /* set mem sort key*/
    else
      SL0FW02.SL0FWMKY = +999999999;
    end
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    SL0FW02.SL0FWMKY = +999999999; /* high values to mem sort key*/
    SL0FW02.SL0FWEOM = "Y"; /* end of memorex hdrs;*/
  end

  if (SQLCA.VAGen_SQLCODE < +0)
    SLWREC.SLWERRSW = "Y"; /* for negative sql codes*/
    SLWREC.XXXLOCID = "S2BG";
    SLWREC.SLWMSGNO = 0001; /* severe error message*/
    SL0FST2(); /* <=== clear scrn (empty)*/
    return;
  end

  if (SL0FW02.SL0FWEOL == "N"
   || SL0FW02.SL0FWEOM == "N")
    SL0FW02.SL0FWRSW = "Y"; /* yes we have data*/
  end

  SL0FW02.SL0FWRCR = 0; /* initialize hdr recs counter*/

   /* ****************************************************/
   /* *** process each w.o. hdr record and build tsqs ****/
   /* ****************************************************/

  while (SL0FW02.SL0FWEOL == "N" /* while there is data*/
   || SL0FW02.SL0FWEOM == "N")

    SL0FW02.SL0FWRCR = SL0FW02.SL0FWRCR + 1; /* increment hdr recs counter*/

    if (SL0FW02.SL0FWLKY < SL0FW02.SL0FWMKY) /* live key is lowest*/


      set SL9REC empty;
      SL9REC.XWHCD = SL8REC.XWHCD;
      SL9REC.SL8WONBR = SL8REC.SL8WONBR;

      XSSL9S1(); /* <=== obtain w.o. item recs*/

    else /* memorex key is lowest*/
      set SLCREC empty;
      SLCREC.XWHCD = SLBREC.XWHCD;
      SLCREC.SL8WONBR = SLBREC.SL8WONBR;

      XSSLCS1(); /* <=== obtain w.o. item recs*/

    end

    if (SQLCA.VAGen_SQLCODE == +100) /* for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2BH";
      /* *** if no items for a work order severe error ****/
      SLWREC.SLWMSGNO = 0001; /* try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* for any initial db access*/
      SLWREC.SLWSKYSW = "N";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2BI";
      SLWREC.SLWMSGNO = 0031; /* try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE < 0)
      SLWREC.SLWERRSW = "Y";
                                   /* for all other neg. sql codes*/
      SLWREC.XXXLOCID = "S2BJ";
      SLWREC.SLWMSGNO = 0001; /* severe error msg*/
      SL0FST2(); /* <=== clear scrn (empty)*/
      return;
    end

    if (SL0FW02.SL0FWLKY < SL0FW02.SL0FWMKY) /* build live record*/
      SL0FS2A();
                                   /* <=== format summary in buffer area*/
      SL0FS2E();
                                   /* <=== format detail in buffer area*/

      if (SLWREC.SLWERRSW == "Y")
        return;
      end

      if (SQLCA.VAGen_SQLCODE == +100)
        SL0FS2M(); /* <=== put summary buffer to tsq*/
        SL0FS2N(); /* <=== put detail buffer to tsq*/

        SLWREC.SLWIDX01 = 0;

        SL0FW02.SL0FWACC = 0; /* initialize accumulator*/

        if (SLWREC.SLWERRSW == "Y")
          return;
        end
      end

      if (SL0FM210.SL0FMOTP != "  ") /* type for omission*/
        SL8REC.YWTCD = SL0FM210.SL0FMOTP;
        while (SL8REC.YWTCD == SL0FM210.SL0FMOTP /* while type to omit*/
         && SL0FW02.SL0FWEOL != "Y") /* and rows remain*/
          XSSL8F4(); /* <=== fetch next live hdr*/
          if (SQLCA.VAGen_SQLCODE == +100)
            SL0FW02.SL0FWEOL = "Y"; /* set eof switch*/
          end
        end
      else
        XSSL8F4(); /* <=== fetch next live hdr*/
      end

      if (SQLCA.VAGen_SQLCODE == +100)
        SL0FW02.SL0FWEOL = "Y";
        SL0FW02.SL0FWLKY = +999999999;
                                   /* high values to live sort key*/
      end

      if (SQLCA.VAGen_SQLCODE < +0)
        SLWREC.SLWERRSW = "Y"; /* for negative sql codes*/
        SLWREC.XXXLOCID = "S2BK";
        SLWREC.SLWMSGNO = 0001; /* severe error message*/
        SL0FST2();
                                   /* <=== clear scrn (empty)*/
        return;
      end

      if (SQLCA.VAGen_SQLCODE == +0)
        SL0FW02.SL0FWLKY = SL8REC.SL8WONBR; /* set up live sort key*/
      end
    else /* build memorex record*/
      SL0FS2Q(); /* <=== format sum in buffer*/
      SL0FS2R(); /* <=== format dtl in buffer*/

      if (SLWREC.SLWERRSW == "Y")
        return;
      end

      if (SQLCA.VAGen_SQLCODE == +100)
        SL0FS2M(); /* <=== put sum buffer to tsq*/
        SL0FS2N(); /* <=== put dtl buffer to tsq*/

        SLWREC.SLWIDX01 = 0;

        SL0FW02.SL0FWACC = 0; /* initialize accumulator*/

        if (SLWREC.SLWERRSW == "Y")
          return;
        end
      end
      if (SL0FM210.SL0FMOTP != "  ") /* type for omission*/
        SLBREC.YWTCD = SL0FM210.SL0FMOTP;
        while (SLBREC.YWTCD == SL0FM210.SL0FMOTP /* while type to omit*/
         && SL0FW02.SL0FWEOM != "Y") /* and rows remain*/
          XSSLBF4(); /* <=== fetch next mem w.o. hdr*/
          if (SQLCA.VAGen_SQLCODE == +100)
            SL0FW02.SL0FWEOM = "Y"; /* set eof switch*/
          end
        end
      else
        XSSLBF4(); /* <=== fetch next mem w.o. hdr*/
      end

      if (SQLCA.VAGen_SQLCODE == +100)
        SL0FW02.SL0FWMKY = +999999999; /* high val to mem sort key*/
        SL0FW02.SL0FWEOM = "Y"; /* end of memorex hdrs*/
      end

      if (SQLCA.VAGen_SQLCODE < +0)
        SLWREC.SLWERRSW = "Y"; /* for negative sql codes*/
        SLWREC.XXXLOCID = "S2BL";
        SLWREC.SLWMSGNO = 0001; /* severe error message*/
        SL0FST2();
                                   /* <=== clear scrn (empty)*/
        return;
      end

      if (SQLCA.VAGen_SQLCODE == +0)
        SL0FW02.SL0FWMKY = SLBREC.SL8WONBR; /* set mem sort key*/
      end

    end
    if (SLWREC.SLWERRSW == "Y")
      return;
    end

    /* ***********************************************************/
    /* ***   set limits on data displayed                     ****/
    /* ***   note:  display limits = 30 pages (13 x 30 = 390) ****/
    /* ***********************************************************/

    if (SL0FW02.SL0FWRCR == 390)

      if (SQLCA.VAGen_SQLCODE == +0) /* close cursors*/
        XSSL8C4();
        XSSLBC4();
        SLWREC.XXXLOCID = "S1BM";
        SLWREC.SLWMSGNO = 0178; /* display limits reached*/
      end

      SL0FW02.SL0FWEOL = "Y";
      SL0FW02.SL0FWEOM = "Y";
      SQLCA.VAGen_SQLCODE = +100;
    end

  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FS2B

// is detail queue full ?
Function SL0FS2C()


   /* *** include summary buffer line ****/
  SLWREC.SLWIDX06 = SLWREC.SLWIDX01 + 2; /* det + sum,size title lines*/

  if (SLWREC.SLWIDX06 <= SLWREC.SLWIDX04)
    SLWREC.SLWIDX04 = SLWREC.SLWIDX04 - SLWREC.SLWIDX06; /* available space*/
  else
    if (SLWREC.SLWIDX02 != 1) /* if any lines in detail w.s*/
      /* *** fill the rest of the detail queue with blank records ****/
      while (SLWREC.SLWIDX02 <= SLWREC.SLWLINPP)
        SL0FWD0.SL0FWRTY[SLWIDX02] = "B";
        SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
      end
      /* *** put the detail records to the tsq ****/
      TA5REC.TA5APPID = SLWREC.SLWDETQU;
      TA5REC.TA5FNCCD = "A";
      call "TA0050" (SL0FWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
      if (TA5REC.TA5RTNCD != 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "S2CA";
        SLWREC.SLWMSGNO = 0001; /* <--- severe tsq error msg*/
        return;
      end
      /* *** reset for next group ****/
      SL0FW02.SL0FWDPA = SL0FW02.SL0FWDPA + 1;
      SLWREC.SLWIDX02 = 1;
      SLWREC.SLWIDX04 = SLWREC.SLWLINPP;
      SLWREC.SLWIDX04 = SLWREC.SLWIDX04 - SLWREC.SLWIDX06;
                                   /* available space*/
    end
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0FS2C

// obtain first detail record
Function SL0FS2D()


  TA5REC.TA5APPID = SLWREC.SLWDETQU;
  TA5REC.TA5TSQIX = 0001;
  TA5REC.TA5FNCCD = "R";
  call "TA0050" (SL0FWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S2DA";
    SLWREC.SLWMSGNO = 0001;
    return;
  end

  SLWREC.SLWDETIX = TA5REC.TA5TSQIX;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0FS2D

// format detail line & read next
Function SL0FS2E()

  SLWREC.SLWIDX06 = 1;

  while (SQLCA.VAGen_SQLCODE == +0)

    SL0FW02.SL0FWSZ2 = SL9REC.SY5SZID;
    if (SLWREC.SLWIDX06 > 4)
       /* put detail line to detail buffer*/
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1; /* increment det line ct.*/
      SL0FWB2.SL0FWDT2[SLWIDX01] = SL0FWL2.SL0FWLN2;
       /* reset sizes per line counter*/
      SLWREC.SLWIDX06 = 1;
    end
    SL0FWL2.SY4IDDSC[SLWIDX06] = SYPREC.SY4IDDSC[SL0FWSZ2];
    SL0FWL2.SL9WOQTY[SLWIDX06] = SL9REC.SL9WOQTY;
    SL0FW02.SL0FWACC = SL0FW02.SL0FWACC + SL9REC.SL9WOQTY;
    SLWREC.SLWIDX06 = SLWREC.SLWIDX06 + 1; /* increment sizes/line*/

    XSSL9F1(); /* fetch next w.o. item rec*/

    if (SLWREC.SLWERRSW == "Y")
      return;
    end
  end

   /* *** fill remaining sizes with spaces and put to det buffer*/

  if (SQLCA.VAGen_SQLCODE == +100)
    if (SLWREC.SLWIDX06 > 4)
       /* put detail line to detail buffer*/
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1; /* increment det line ct.*/
      SL0FWB2.SL0FWDT2[SLWIDX01] = SL0FWL2.SL0FWLN2;
      SLWREC.SLWIDX06 = 1;
    end
    /* *** put total qty on detail line ****/
    SL0FWL2.SY4IDDSC[SLWIDX06] = "TOTAL";
    SL0FWL2.SL9WOQTY[SLWIDX06] = SL0FW02.SL0FWACC;
    SLWREC.SLWIDX06 = SLWREC.SLWIDX06 + 1; /* increment sizes/line*/

    while (SLWREC.SLWIDX06 <= 4)
      SL0FWL2.SY4IDDSC[SLWIDX06] = "     ";
      SL0FWL2.SL9WOQTY[SLWIDX06] = 0;
      SLWREC.SLWIDX06 = SLWREC.SLWIDX06 + 1; /* increment sizes/line*/
    end
    /* *** now put detail line to buffer area ****/
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1; /* increment det line ct.*/
    SL0FWB2.SL0FWDT2[SLWIDX01] = SL0FWL2.SL0FWLN2;
  end

   /* ***********************************************************/
   /* *** end of statement group                             ****/
   /* ***********************************************************/
end // end SL0FS2E

// obtain size data
Function SL0FS2J()

   /* *** obtain valid size descriptions ****/

  SYPREC.XGPCD = SL0FM210.XGPCD;
  SYPREC.SY1STNBR = SL0FM210.SY1STNBR;
  SYPREC.SY2CLRID = SL0FM210.SY2CLRID;
  SYPREC.XDMCD = SL0FM210.XDMCD;
  SYPREC.XQACD = SL0FM210.XQACD;

  SL0FSAA(); /* perform size translation call*/


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0FS2J

// put summary data to tsq
Function SL0FS2M()


   /* *** check to see if detail lines will fit to keep       ****/
   /* *** detail page count correct on summary record.        ****/
   /* *** move summary data to summary array area             ****/
   /* *** if maximum nbr of lines in summary array put to tsq ****/

  SL0FS2C(); /* determine if detail record queue is full*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  if (SLWREC.SLWIDX03 <= SLWREC.SLWLINPP)
    SL0FWS0.SL0FWDPG[SLWIDX03] = SL0FW02.SL0FWDPA;
    SL0FWS0.SL0FWRTY[SLWIDX03] = "S";
    SL0FWS0.SL0FWDTA[SLWIDX03] = SL0FWB2.SL0FWSM2;
    SLWIDX03 = SLWIDX03 + 1;
  else
    TA5REC.TA5APPID = SLWREC.SLWSUMQU;
    TA5REC.TA5FNCCD = "A";

    call "TA0050" (SL0FWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
    if (TA5REC.TA5RTNCD != 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2MA";
      SLWREC.SLWMSGNO = 0001; /* <--- severe tsq error msg*/
      return;
    end
    /* *** increment summary counter ****/
    SL0FW02.SL0FWSPA = SL0FW02.SL0FWSPA + 1;
    /* *** setup next summary record ****/
    SLWREC.SLWIDX03 = 1;
    SL0FWS0.SL0FWRTY[SLWIDX03] = "S";
    SL0FWS0.SL0FWDPG[SLWIDX03] = SL0FW02.SL0FWDPA;
    SL0FWS0.SL0FWDTA[SLWIDX03] = SL0FWB2.SL0FWSM2;
    SLWIDX03 = SLWIDX03 + 1;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0FS2M

// put detail data to tsq
Function SL0FS2N()


  SL0FWD0.SL0FWSPG[SLWIDX02] = SL0FW02.SL0FWSPA;
  SL0FWD0.SL0FWRTY[SLWIDX02] = "S";
  SL0FWD0.SL0FWDTA[SLWIDX02] = SL0FWB2.SL0FWSM2;
  SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;

  SL0FWD0.SL0FWSPG[SLWIDX02] = SL0FW02.SL0FWSPA;
  SL0FWD0.SL0FWRTY[SLWIDX02] = "Z";
  SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;

  SLWREC.SLWIDX05 = 1;
  while (SLWREC.SLWIDX05 <= SLWREC.SLWIDX01)
    if (SLWREC.SLWIDX02 <= SLWREC.SLWLINPP)
      SL0FWD0.SL0FWSPG[SLWIDX02] = SL0FW02.SL0FWSPA;
      SL0FWD0.SL0FWRTY[SLWIDX02] = "D";
      SL0FWD0.SL0FWDTA[SLWIDX02] = SL0FWB2.SL0FWDT2[SLWIDX05];
      SLWREC.SLWIDX05 = SLWREC.SLWIDX05 + 1;
      SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
    else
      /* *** since we checked for this in sl0fs1c, there must ****/
      /* *** be a subscript error                             ****/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S2NA";
      SLWREC.SLWMSGNO = 0001; /* <--- severe tsq error msg*/
      return;
    end
  end

   /* *** add blank line to the detail queue ****/

  if (SLWREC.SLWIDX02 < SLWREC.SLWLINPP)
    SL0FWD0.SL0FWRTY[SLWIDX02] = "B";
    SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
    /* *** decrement lines available ****/
    SLWREC.SLWIDX04 = SLWREC.SLWIDX04 - 1;

  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0FS2N

// put last sum group to tsq
Function SL0FS2O()


   /* *** move summary data to summary array area ****/
   /* *** if maximum nbr of lines in summary array put to tsq ****/

  while (SLWREC.SLWIDX03 <= SLWREC.SLWLINPP)
    SL0FWS0.SL0FWRTY[SLWIDX03] = "B";
    SLWIDX03 = SLWIDX03 + 1;
  end

  TA5REC.TA5APPID = SLWREC.SLWSUMQU;
  TA5REC.TA5FNCCD = "A";

  call "TA0050" (SL0FWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S2OA";
    SLWREC.SLWMSGNO = 0001; /* <--- severe tsq error msg*/
    return;
  end
   /* *** increment summary page counter ****/
  SL0FW02.SL0FWSPA = SL0FW02.SL0FWSPA + 1;
   /* *** save maximum number of summary records ****/
  SLWREC.SLWSMAXR = TA5REC.TA5TSQIX;
   /* *** increment summary counter ****/
  SLWIDX03 = SLWIDX03 + 1;


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0FS2O

// put last detail group to tsq
Function SL0FS2P()


  while (SLWREC.SLWIDX02 <= SLWREC.SLWLINPP)
    SL0FWD0.SL0FWSPG[SLWIDX02] = SL0FW01.SL0FWSPA;
    SL0FWD0.SL0FWRTY[SLWIDX02] = "B";
    SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
  end

   /* *** setup call areas and add record to tsq ****/
  TA5REC.TA5APPID = SLWREC.SLWDETQU;
  TA5REC.TA5FNCCD = "A";
  call "TA0050" (SL0FWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S2PA";
    SLWREC.SLWMSGNO = 0001; /* <--- severe tsq error msg*/
    return;
  end

   /* *** increment detail page counter ****/
  SL0FW02.SL0FWDPA = SL0FW02.SL0FWDPA + 1;
   /* *** save maximum number of summary records ****/
  SLWREC.SLWDMAXR = TA5REC.TA5TSQIX;


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0FS2P

// format summary data
Function SL0FS2Q()
   /* ************************************************************/
   /* *** format summary line in buffer area                  ****/
   /* ************************************************************/

  SL0FWB2.SL0FWROW = SL0FW02.SL0FWROW;
  SL0FW02.SL0FWROW = SL0FW02.SL0FWROW + 1;
  SL0FWB2.YWSCD = SLBREC.YWSCD;
  SL0FWB2.YWTCD = SLBREC.YWTCD;
  SL0FWB2.SL8WONBR = SLBREC.SL8WONBR;
  SL0FWB2.SL2PALET = SLBREC.SL2PALET;
  SL0FWB2.SL2CASE = SLBREC.SL2CASE;
  SL0FWB2.SL8WOGRP = SLBREC.SL8WOGRP;
  SL0FWB2.SL8FRAR = SLBREC.SL8FRAR;
  SL0FWB2.SL8FRZN = SLBREC.SL8FRZN;
  SL0FWB2.SL8FRLC = SLBREC.SL8FRLC;
  SL0FWB2.SL8TOAR = SLBREC.SL8TOAR;
  SL0FWB2.SL8TOZN = SLBREC.SL8TOZN;
  SL0FWB2.SL8TOLC = SLBREC.SL8TOLC;
  SL0FWB2.SL0FWSDT = SLBREC.ZZZSDT;
  SL0FWB2.SL8DRVR = SLBREC.SL8DRVR;

  if (SLBREC.XWHCD == "51"
   || SLBREC.XWHCD == "25")
    SL0FW02.SL0FWPD = SLBREC.PC3PONBR;
    SL0FWB2.SL0FWPIN = SL0FW02.SL0FWPD;
  else
    if (SLBREC.XWHCD == "42" /* Canada*/
     && SLBREC.XGPCD == "03")
      SL0FW02.SL0FWPD = SLBREC.PC3PONBR;
      SL0FWB2.SL0FWPIN = SL0FW02.SL0FWPD;
    else
      SL0FW02.SL0FWPD = PC3REC.PC3POIDT;
      SL0FW02.SL0FWPE1 = SL0FW02.SL0FWPD2;
      SL0FW02.SL0FWPG = PC3REC.FY1FCTYC;
      SL0FW02.SL0FWPE2 = SL0FW02.SL0FWPG2;
      SL0FW02.SL0FWPE3 = PC3REC.PC4ORTYP;
      SL0FWB2.SL0FWPIN = SL0FW02.SL0FWPE;
    end
  end

  SL0FWB2.SL0FWCON = SLBREC.TS3CNTNR;
  SL0FWB2.SL0FWPNB = SLBREC.SWEPLLNB;

  if (SL0FWB2.YWSCD == "01")
    SL0FWB2.SL0FWCDT = 0;
  else
    SL0FWB2.SL0FWCDT = SLBREC.ZZZCHGDT;
  end

  SL0FWB2.PK2SCHNO = SLBREC.PK2SCHNO;
  SL0FWB2.SL8CRTBY = SLBREC.SL8CRTBY;


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0FS2Q

// format detail area
Function SL0FS2R()

  SLWREC.SLWIDX06 = 1;

  while (SQLCA.VAGen_SQLCODE == +0)

    SL0FW02.SL0FWSZ2 = SLCREC.SY5SZID;
    if (SLWREC.SLWIDX06 > 4)
       /* put detail line to detail buffer*/
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1; /* increment det line ct.*/
      SL0FWB2.SL0FWDT2[SLWIDX01] = SL0FWL2.SL0FWLN2;
       /* now put current size data to detail line*/
      SLWREC.SLWIDX06 = 1;
    end
    SL0FWL2.SY4IDDSC[SLWIDX06] = SYPREC.SY4IDDSC[SL0FWSZ2];
    SL0FWL2.SL9WOQTY[SLWIDX06] = SLCREC.SL9WOQTY;
    SL0FW02.SL0FWACC = SL0FW02.SL0FWACC + SLCREC.SL9WOQTY;
    SLWREC.SLWIDX06 = SLWREC.SLWIDX06 + 1; /* increment sizes/line*/

    XSSLCF1(); /* fetch next w.o. item rec*/

    if (SLWREC.SLWERRSW == "Y")
      return;
    end
  end

   /* *** fill remaining sizes with spaces and put to det buffer*/

  if (SQLCA.VAGen_SQLCODE == +100)
    if (SLWREC.SLWIDX06 > 4)
       /* put detail line to detail buffer*/
      SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1; /* increment det line ct.*/
      SL0FWB2.SL0FWDT2[SLWIDX01] = SL0FWL2.SL0FWLN2;
      SLWREC.SLWIDX06 = 1;
    end
    /* *** put total qty on detail line ****/
    SL0FWL2.SY4IDDSC[SLWIDX06] = "TOTAL";
    SL0FWL2.SL9WOQTY[SLWIDX06] = SL0FW02.SL0FWACC;
    SLWREC.SLWIDX06 = SLWREC.SLWIDX06 + 1; /* increment sizes/line*/

    while (SLWREC.SLWIDX06 <= 4)
      SL0FWL2.SY4IDDSC[SLWIDX06] = "     ";
      SL0FWL2.SL9WOQTY[SLWIDX06] = 0;
      SLWREC.SLWIDX06 = SLWREC.SLWIDX06 + 1; /* increment sizes/line*/
    end
    /* *** now put detail line to buffer area ****/
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1; /* increment det line ct.*/
    SL0FWB2.SL0FWDT2[SLWIDX01] = SL0FWL2.SL0FWLN2;
  end


   /* ***********************************************************/
   /* *** end of statement group                             ****/
   /* ***********************************************************/
end // end SL0FS2R

// obtain first summary record
Function SL0FS2S()


  TA5REC.TA5APPID = SLWREC.SLWSUMQU;
  TA5REC.TA5TSQIX = 0001;
  TA5REC.TA5FNCCD = "R";
  call "TA0050" (SL0FWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S2SA";
    SLWREC.SLWMSGNO = 0001;
    return;
  end

  SLWREC.SLWSUMIX = TA5REC.TA5TSQIX;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0FS2S

// initialize dclgen record areas
Function SL0FS2W()

  set SL8REC empty; /* live hdr dclgen*/

  set SLBREC empty; /* memorex hdr dclgen*/

  SL8REC.XWHCD = SL0FM210.XWHCD;
  SLBREC.XWHCD = SL0FM210.XWHCD;

  if (SL0FM210.YWSCD == "A ")
    SL8REC.YWSCD = "* ";
    SLBREC.YWSCD = "* ";
  else
    SL8REC.YWSCD = SL0FM210.YWSCD;
    SLBREC.YWSCD = SL0FM210.YWSCD;
  end

  if (SL0FM210.YWTCD == "A ")
    SL8REC.YWTCD = "* ";
    SLBREC.YWTCD = "* ";
  else
    SL8REC.YWTCD = SL0FM210.YWTCD;
    SLBREC.YWTCD = SL0FM210.YWTCD;
  end


  SL8REC.XGPCD = SL0FM210.XGPCD;
  SL8REC.SY1STNBR = SL0FM210.SY1STNBR;
  SL8REC.SY2CLRID = SL0FM210.SY2CLRID;
  SL8REC.XDMCD = SL0FM210.XDMCD;
  SL8REC.XQACD = SL0FM210.XQACD;
  SL8REC.PC2INSEG = SL0FM210.PC2INSEG;
  SL8REC.XEGCD = "000";
  SL8REC.XSLCD = SL0FM210.XSLCD;
  SL8REC.XPGCD = SL0FM210.XPGCD;
  SL8REC.XUMCD = SL0FM210.XUMCD;
  SL8REC.XOWCD = SL0FM210.XOWCD;

  SLBREC.XGPCD = SL0FM210.XGPCD;
  SLBREC.SY1STNBR = SL0FM210.SY1STNBR;
  SLBREC.SY2CLRID = SL0FM210.SY2CLRID;
  SLBREC.XDMCD = SL0FM210.XDMCD;
  SLBREC.XQACD = SL0FM210.XQACD;
  SLBREC.PC2INSEG = SL0FM210.PC2INSEG;
  SLBREC.XEGCD = "000";
  SLBREC.XSLCD = SL0FM210.XSLCD;
  SLBREC.XPGCD = SL0FM210.XPGCD;
  SLBREC.XUMCD = SL0FM210.XUMCD;
  SLBREC.XOWCD = SL0FM210.XOWCD;

end // end SL0FS2W

// format live header records
Function SL0FS3A()

  if (VWOLHD02.XWHCD == "51"
   || VWOLHD02.XWHCD == "25")
    SL0FM310.SL0FMONB = VWOLHD02.PC3PONBR;
  else
    if (VWOLHD02.XWHCD == "42" /* Canada*/
     && VWOLHD02.XGPCD == "03")
      SL0FM310.SL0FMONB = VWOLHD02.PC3PONBR;
      SL0FM310.PC-SAP-PO-NBR = VWOLHD02.PC-SAP-PO-NBR;
                                                      /* Display SAP Po NBR*/
    else
      SL0FM310.SL0FMONB = VWOLHD02.PC3PONBR; /* Display PO for others*/
      SL0FM310.PC-SAP-PO-NBR = VWOLHD02.PC-SAP-PO-NBR;
                                                          /* Display SAP Po*/
      /* MOVE PC3REC.PC3POIDT TO SL0FW03.SL0FWPD;*/
      /* MOVE SL0FW03.SL0FWPD2 TO SL0FW03.SL0FWPF1;*/
      /* MOVE PC3REC.FY1FCTYC TO SL0FW03.SL0FWPG;*/
      /* MOVE SL0FW03.SL0FWPG2 TO SL0FW03.SL0FWPF2;*/
      /* MOVE ' ' TO SL0FW03.SL0FWPF3;*/
      /* MOVE PC3REC.PC4ORTYP TO SL0FW03.SL0FWPF4;*/
      /* MOVE SL0FW03.SL0FWPF TO SL0FM310.SL0FMOID;*/
    end
  end

  SL0FM310.SL0FMPNB = VWOLHD02.SWEPLLNB;
  SL0FM310.PK2SCHNO = VWOLHD02.PK2SCHNO;
  SL0FM310.SL0FMCON = VWOLHD02.TS3CNTNR;

  SL0FM310.SL8INSTR = VWOLHD02.SL8INSTR;
  SL0FM310.YWSCD = VWOLHD02.YWSCD;
  SL0FM310.YWTCD = VWOLHD02.YWTCD;
  SL0FM310.SL2PALET = VWOLHD02.SL2PALET;
  SL0FM310.SL2CASE = VWOLHD02.SL2CASE;
  SL0FM310.SL8WOGRP = VWOLHD02.SL8WOGRP;

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2GRGGN = VWOLHD02.ZZZSDT;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD == 0)
    SL0FM310.SL0FMSDT = TA2REC.TA2GRGB;
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S3AA";
    SLWREC.SLWMSGNO = 0001; /* <--- invalid value msg*/
    return;
  end

  SL0FM310.SL8FRAR = VWOLHD02.SL8FRAR;
  SL0FM310.SL8FRZN = VWOLHD02.SL8FRZN;
  SL0FM310.SL8FRLC = VWOLHD02.SL8FRLC;
  SL0FM310.SL8TOAR = VWOLHD02.SL8TOAR;
  SL0FM310.SL8TOZN = VWOLHD02.SL8TOZN;
  SL0FM310.SL8TOLC = VWOLHD02.SL8TOLC;
  SL0FM310.SL8CRTBY = VWOLHD02.SL8CRTBY;
  SL0FM310.XGPCD = VWOLHD02.XGPCD;
  SL0FM310.SY1STNBR = VWOLHD02.SY1STNBR;
  SL0FM310.SY2CLRID = VWOLHD02.SY2CLRID;
  SL0FM310.XDMCD = VWOLHD02.XDMCD;

  PKNREC.XGPCD = VWOLHD02.XGPCD;
  PKNREC.SY1STNBR = VWOLHD02.SY1STNBR;
  PKNREC.SY2CLRID = VWOLHD02.SY2CLRID;
  PKNREC.XDMCD = VWOLHD02.XDMCD;

  SL0F460(); /* <=== std prod loctn inquiry*/

  if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S3AB";
    SLWREC.SLWMSGNO = 0001; /* <--- not on db msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S3AC";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0)
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S3AD";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    SL0FST3(); /* <=== clear scrn (empty)*/
    return;
  end

  SL0FM310.SY1SSTNM = PKNREC.SY1SSTNM;
  SL0FM310.SY2CLRAB = PKNREC.SY2CLRAB;

  SL0FM310.XQACD = VWOLHD02.XQACD;
  SL0FM310.PC2INSEG = VWOLHD02.PC2INSEG;
  SL0FM310.XEGCD = XEGTBL.XEGCD;
  SL0FM310.XSLCD = VWOLHD02.XSLCD;
  SL0FM310.XPGCD = VWOLHD02.XPGCD;
  SL0FM310.XUMCD = VWOLHD02.XUMCD;
  SL0FM310.XOWCD = VWOLHD02.XOWCD;
  SL0FM310.SY1UNPCS = VWOLHD02.SY1UNPCS; /* units per case*/


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0FS3A

// obtain live item records
Function SL0FS3B()


  set SL9REC empty;

  SL9REC.XWHCD = SL0FM310.XWHCD;
  SL9REC.SL8WONBR = SL0FM310.SL8WONBR;

  XSSL9S1(); /* select set of item records*/

  if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S3BA";
    SLWREC.SLWMSGNO = 0001; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S3BB";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0)
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S3BC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    SL0FST3(); /* <=== clear scrn (empty)*/
    return;
  end

   /* *** obtain valid size descriptions ****/

  SYPREC.XGPCD = VWOLHD02.XGPCD;
  SYPREC.SY1STNBR = VWOLHD02.SY1STNBR;
  SYPREC.SY2CLRID = VWOLHD02.SY2CLRID;
  SYPREC.XDMCD = VWOLHD02.XDMCD;
  SYPREC.XQACD = VWOLHD02.XQACD;

  SL0FSAA(); /* perform size translation call*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0FW03.SL0FWACC = 0;
  SLWREC.SLWIDX01 = 1;
  while (SQLCA.VAGen_SQLCODE == +0)
    SL0FW03.SL0FWSZ3 = SL9REC.SY5SZID;
    SL0FM310.SY4IDDSC[SLWIDX01] = SYPREC.SY4IDDSC[SL0FWSZ3];
    SL0FM310.SL9WOQTY[SLWIDX01] = SL9REC.SL9WOQTY;
    SL0FW03.SL0FWACC = SL0FW03.SL0FWACC + SL9REC.SL9WOQTY;
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;

    XSSL9F1(); /* fetch next item record*/

    if (SLWREC.SLWERRSW == "Y")
      return;
    end

  end

  SL0FM310.SY4IDDSC[SLWIDX01] = "TOTAL";
  SL0FM310.SL9WOQTY[SLWIDX01] = SL0FW03.SL0FWACC;

   /* *** darken the remaining fields ****/

  SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;

  while (SLWREC.SLWIDX01 <= 40)
    set SL0FM310.SY4IDDSC[SLWIDX01] skip, invisible;
    set SL0FM310.SL9WOQTY[SLWIDX01] skip, invisible;
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0FS3B

// format memorex hdr records
Function SL0FS3D()

  if (VWOMHD02.XWHCD == "51"
   || VWOMHD02.XWHCD == "25")
    SL0FM310.SL0FMONB = VWOMHD02.PC3PONBR;
  else
    if (VWOMHD02.XWHCD == "42" /* Canada*/
     && VWOMHD02.XGPCD == "03")
      SL0FM310.SL0FMONB = VWOMHD02.PC3PONBR;
      SL0FM310.PC-SAP-PO-NBR = VWOMHD02.PC-SAP-PO-NBR;
    else
      SL0FM310.PC-SAP-PO-NBR = VWOMHD02.PC-SAP-PO-NBR;
      SL0FM310.SL0FMONB = VWOMHD02.PC3PONBR;
      /* MOVE PC3REC.PC3POIDT TO SL0FW03.SL0FWPD;*/
      /* MOVE SL0FW03.SL0FWPD2 TO SL0FW03.SL0FWPF1;*/
      /* MOVE PC3REC.FY1FCTYC TO SL0FW03.SL0FWPG;*/
      /* MOVE SL0FW03.SL0FWPG2 TO SL0FW03.SL0FWPF2;*/
      /* MOVE ' ' TO SL0FW03.SL0FWPF3;*/
      /* MOVE PC3REC.PC4ORTYP TO SL0FW03.SL0FWPF4;*/
      /* MOVE SL0FW03.SL0FWPF TO SL0FM310.SL0FMOID;*/
    end
  end

  SL0FM310.SL0FMPNB = VWOMHD02.SWEPLLNB;
  SL0FM310.PK2SCHNO = VWOMHD02.PK2SCHNO;
  SL0FM310.SL0FMCON = VWOMHD02.TS3CNTNR;

  SL0FM310.SL8INSTR = VWOMHD02.SL8INSTR;
  SL0FM310.YWSCD = VWOMHD02.YWSCD;
  SL0FM310.YWTCD = VWOMHD02.YWTCD;
  SL0FM310.SL2PALET = VWOMHD02.SL2PALET;
  SL0FM310.SL2CASE = VWOMHD02.SL2CASE;
  SL0FM310.SL8WOGRP = VWOMHD02.SL8WOGRP;

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "G";
  TA2REC.TA2GRGGN = VWOMHD02.ZZZSDT;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD == 0)
    SL0FM310.SL0FMSDT = TA2REC.TA2GRGB;
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S3DA";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error*/
    return;
  end

  SL0FM310.SL8FRAR = VWOMHD02.SL8FRAR;
  SL0FM310.SL8FRZN = VWOMHD02.SL8FRZN;
  SL0FM310.SL8FRLC = VWOMHD02.SL8FRLC;
  SL0FM310.SL8TOAR = VWOMHD02.SL8TOAR;
  SL0FM310.SL8TOZN = VWOMHD02.SL8TOZN;
  SL0FM310.SL8TOLC = VWOMHD02.SL8TOLC;
  SL0FM310.SL8CRTBY = VWOMHD02.SL8CRTBY;
  SL0FM310.XGPCD = VWOMHD02.XGPCD;
  SL0FM310.SY1STNBR = VWOMHD02.SY1STNBR;
  SL0FM310.SY2CLRID = VWOMHD02.SY2CLRID;
  SL0FM310.XDMCD = VWOMHD02.XDMCD;

  PKNREC.XGPCD = VWOMHD02.XGPCD;
  PKNREC.SY1STNBR = VWOMHD02.SY1STNBR;
  PKNREC.SY2CLRID = VWOMHD02.SY2CLRID;
  PKNREC.XDMCD = VWOMHD02.XDMCD;

  SL0F460(); /* <=== std prod loctn inquiry*/

  if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S3DB";
    SLWREC.SLWMSGNO = 0001; /* <--- not on db msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S3DC";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0)
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S3DD";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    SL0FST3(); /* <=== clear scrn (empty)*/
    return;
  end

  SL0FM310.SY1SSTNM = PKNREC.SY1SSTNM;
  SL0FM310.SY2CLRAB = PKNREC.SY2CLRAB;

  SL0FM310.XQACD = VWOMHD02.XQACD;
  SL0FM310.PC2INSEG = VWOMHD02.PC2INSEG;
  SL0FM310.XEGCD = XEGTBL.XEGCD;
  SL0FM310.XSLCD = VWOMHD02.XSLCD;
  SL0FM310.XPGCD = VWOMHD02.XPGCD;
  SL0FM310.XUMCD = VWOMHD02.XUMCD;
  SL0FM310.XOWCD = VWOMHD02.XOWCD;
  SL0FM310.SY1UNPCS = VWOMHD02.SY1UNPCS;


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0FS3D

// obtain & format item records
Function SL0FS3E()


  set SLCREC empty;

  SLCREC.XWHCD = SL0FM310.XWHCD;
  SLCREC.SL8WONBR = SL0FM310.SL8WONBR;

  XSSLCS1(); /* select set of item records*/

  if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S3EA";
    SLWREC.SLWMSGNO = 0001; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S3EB";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0)
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "S3EC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    SL0FST3(); /* <=== clear scrn (empty)*/
    return;
  end

   /* *** obtain valid size descriptions ****/

  SYPREC.XGPCD = VWOMHD02.XGPCD;
  SYPREC.SY1STNBR = VWOMHD02.SY1STNBR;
  SYPREC.SY2CLRID = VWOMHD02.SY2CLRID;
  SYPREC.XDMCD = VWOMHD02.XDMCD;
  SYPREC.XQACD = VWOMHD02.XQACD;

  SL0FSAA(); /* perform size translation call*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0FW03.SL0FWACC = 0;
  SLWREC.SLWIDX01 = 1;
  while (SQLCA.VAGen_SQLCODE == +0)
    SL0FW03.SL0FWSZ3 = SLCREC.SY5SZID;
    SL0FM310.SY4IDDSC[SLWIDX01] = SYPREC.SY4IDDSC[SL0FWSZ3];
    SL0FM310.SL9WOQTY[SLWIDX01] = SLCREC.SL9WOQTY;
    SL0FW03.SL0FWACC = SL0FW03.SL0FWACC + SLCREC.SL9WOQTY;
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;

    XSSLCF1(); /* fetch next item record*/

    if (SLWREC.SLWERRSW == "Y")
      return;
    end

  end

  SL0FM310.SY4IDDSC[SLWIDX01] = "TOTAL";
  SL0FM310.SL9WOQTY[SLWIDX01] = SL0FW03.SL0FWACC;

   /* *** darken the remaining fields ****/

  SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;

  while (SLWREC.SLWIDX01 <= 40)
    set SL0FM310.SY4IDDSC[SLWIDX01] skip, invisible;
    set SL0FM310.SL9WOQTY[SLWIDX01] skip, invisible;
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0FS3E

// obtain first tsq record
Function SL0FS4C()


  TA5REC.TA5APPID = SLWREC.SLWDETQU;
  TA5REC.TA5TSQIX = 0001;
  TA5REC.TA5FNCCD = "R";
  call "TA0050" (SL0FWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S4CA";
    SLWREC.SLWMSGNO = 0001; /* severe error*/
    return;
  end

  SLWREC.SLWDETIX = TA5REC.TA5TSQIX;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0FS4C

// format history detail
Function SL0FS4D()

  SL0FWB4.YWSCD = SLBREC.YWSCD;
  SL0FWB4.YWTCD = SLBREC.YWTCD;
  SL0FWB4.SL8WONBR = SLBREC.SL8WONBR;
  SL0FWB4.SL2PALET = SLBREC.SL2PALET;
  SL0FWB4.SL2CASE = SLBREC.SL2CASE;
  SL0FWB4.SL0FWSDT = SLBREC.ZZZSDT;
  SL0FWB4.SL8FRAR = SLBREC.SL8FRAR;
  SL0FWB4.SL8FRZN = SLBREC.SL8FRZN;
  SL0FWB4.SL8FRLC = SLBREC.SL8FRLC;
  SL0FWB4.SL8TOAR = SLBREC.SL8TOAR;
  SL0FWB4.SL8TOZN = SLBREC.SL8TOZN;
  SL0FWB4.SL8TOLC = SLBREC.SL8TOLC;
  SL0FWB4.SL8CRTBY = SLBREC.SL8CRTBY;

  if (SLWREC.SLWIDX02 > SLWREC.SLWLINPP)
    /* *** put the detail records to the tsq ****/
    TA5REC.TA5APPID = SLWREC.SLWDETQU;
    TA5REC.TA5FNCCD = "A";
    call "TA0050" (SL0FWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
    if (TA5REC.TA5RTNCD != 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S4FA";
      SLWREC.SLWMSGNO = 0001; /* <--- severe tsq error msg*/
      return;
    end
    SLWREC.SLWIDX02 = 1;
  end

  SL0FWD0.SL0FWRTY[SLWIDX02] = "D";
  SL0FWD0.SL0FWDTA[SLWIDX02] = SL0FWB4.SL0FWDT4;

  SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0FS4D

// format detail
Function SL0FS4F()

  SL0FWB4.YWSCD = SL8REC.YWSCD;
  SL0FWB4.YWTCD = SL8REC.YWTCD;
  SL0FWB4.SL8WONBR = SL8REC.SL8WONBR;
  SL0FWB4.SL2PALET = SL8REC.SL2PALET;
  SL0FWB4.SL2CASE = SL8REC.SL2CASE;
  SL0FWB4.SL0FWSDT = SL8REC.ZZZSDT;
  SL0FWB4.SL8FRAR = SL8REC.SL8FRAR;
  SL0FWB4.SL8FRZN = SL8REC.SL8FRZN;
  SL0FWB4.SL8FRLC = SL8REC.SL8FRLC;
  SL0FWB4.SL8TOAR = SL8REC.SL8TOAR;
  SL0FWB4.SL8TOZN = SL8REC.SL8TOZN;
  SL0FWB4.SL8TOLC = SL8REC.SL8TOLC;
  SL0FWB4.SL8CRTBY = SL8REC.SL8CRTBY;

  if (SLWREC.SLWIDX02 > SLWREC.SLWLINPP)
    /* *** put the detail records to the tsq ****/
    TA5REC.TA5APPID = SLWREC.SLWDETQU;
    TA5REC.TA5FNCCD = "A";
    call "TA0050" (SL0FWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
    if (TA5REC.TA5RTNCD != 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "S4FA";
      SLWREC.SLWMSGNO = 0001; /* <--- severe tsq error msg*/
      return;
    end
    SLWREC.SLWIDX02 = 1;
  end

  SL0FWD0.SL0FWRTY[SLWIDX02] = "D";
  SL0FWD0.SL0FWDTA[SLWIDX02] = SL0FWB4.SL0FWDT4;

  SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0FS4F

// process last group
Function SL0FS4H()

  while (SLWREC.SLWIDX02 <= SLWREC.SLWLINPP)
    SL0FWD0.SL0FWRTY[SLWIDX02] = "B";
    SLWREC.SLWIDX02 = SLWREC.SLWIDX02 + 1;
  end

   /* *** put the detail records to the tsq ****/
  TA5REC.TA5APPID = SLWREC.SLWDETQU;
  TA5REC.TA5FNCCD = "A";
  call "TA0050" (SL0FWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "S4HA";
    SLWREC.SLWMSGNO = 0001; /* <--- severe tsq error msg*/
    return;
  end

   /* *** keep track of last detail record number ****/
  SLWREC.SLWDMAXR = TA5REC.TA5TSQIX;


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0FS4H

// missing input edits
Function SL0FSA0()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: setup defaults for optional fields, if any    ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0FM010.XMSLMSNO > " ")
     /* ** next sentence ***/
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA0A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0FM010.XMSLMSNO cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSA0

// missing key inputs edits
Function SL0FSA1()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: defaults setup during initialization          ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0FM110.YWTCD == "  ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0FM110.YWTCD cursor, bold;
  end

  if (SL0FM110.SL5LOCTN == "      ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1B";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0FM110.SL5LOCTN cursor, bold;
  end

  if (SL0FM110.SL4ZONE == "      ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1H";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0FM110.SL4ZONE cursor, bold;
  end

  if (SL0FM110.XARCD == "  ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1C";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0FM110.XARCD cursor, bold;
  end

  if (SL0FM110.YWSCD == "  ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1D";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0FM110.YWSCD cursor, bold;
  end

  if (SL0FM110.SL0FMTDT == 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1E";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0FM110.SL0FMTDT cursor, bold;
  end

  if (SL0FM110.SL0FMFDT == 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1F";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0FM110.SL0FMFDT cursor, bold;
  end

  if (SL0FM110.XWHCD == "  ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA1G";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0FM110.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSA1

// missing key inputs edits
Function SL0FSA2()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: defaults setup during initialization          ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0FM210.XOWCD == "  ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0FM210.XOWCD cursor, bold;
  end

  if (SL0FM210.XUMCD == "  ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2B";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0FM210.XUMCD cursor, bold;
  end

  if (SL0FM210.XPGCD == "  ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2C";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0FM210.XPGCD cursor, bold;
  end

  if (SL0FM210.XSLCD == "   ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2D";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0FM210.XSLCD cursor, bold;
  end

  if (SL0FM210.XEGCD == "   ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2E";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0FM210.XEGCD cursor, bold;
  end

  if (SL0FM210.PC2INSEG == "   ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2F";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0FM210.PC2INSEG cursor, bold;
  end

  if (SL0FM210.XQACD == "  ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2G";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0FM210.XQACD cursor, bold;
  end

  if (SL0FM210.XDMCD == "  ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2H";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0FM210.XDMCD cursor, bold;
  end

  if (SL0FM210.SY2CLRID == "   ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2I";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0FM210.SY2CLRID cursor, bold;
  end

  if (SL0FM210.SY1STNBR == "      ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2J";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0FM210.SY1STNBR cursor, bold;
  end

  if (SL0FM210.XGPCD == "  ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2K";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0FM210.XGPCD cursor, bold;
  end

  if (SL0FM210.YWTCD == "  ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2L";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0FM210.YWTCD cursor, bold;
  end

  if (SL0FM210.YWSCD == "  ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2M";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0FM210.YWSCD cursor, bold;
  end

  if (SL0FM210.SL0FMTDT == 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2N";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0FM210.SL0FMTDT cursor, bold;
  end

  if (SL0FM210.SL0FMFDT == 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2O";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0FM210.SL0FMFDT cursor, bold;
  end

  if (SL0FM210.XWHCD == "  ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA2P";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0FM210.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSA2

// missing input edits
Function SL0FSA3()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: defaults setup during initialization          ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0FM310.SL8WONBR == 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3A";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0FM310.SL8WONBR cursor, bold;
  end

  if (SL0FM310.XWHCD == " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA3B";
    SLWREC.SLWMSGNO = 0009; /* <--- missing required field msg*/
    set SL0FM310.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSA3

// missing key inputs edits
Function SL0FSA4()


   /* ************************************************************/
   /* *** setup error for each missing field                  ****/
   /* *** note: defaults setup during initialization          ****/
   /* *** note: check in reverse order as in edits            ****/
   /* ************************************************************/

  if (SL0FM410.SL8WOGRP == 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA4A";
    SLWREC.SLWMSGNO = 0009;
    set SL0FM410.SL8WOGRP cursor, bold;
  end

  if (SL0FM410.XWHCD == " ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SA4B";
    SLWREC.SLWMSGNO = 0009;
    set SL0FM410.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSA4

// obtain size data
Function SL0FSAA()


   /* ************************************************************/
   /* *** obtain all valid size data for use during detail    ****/
   /* *** (size) row creatation                               ****/
   /* ************************************************************/

  SYPREC.SYPFC = "PC";
  SYPREC.SYPCMPSW = "N";
  SYPREC.XQACD = "**";

  SL0F450(); /* <=== get size xlations sy1190*/

  if (SYPREC.SYPRC == 0)
     /* ** next sentence ***/
  else
    if (SYPREC.SYPRC == +10)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SAAA";
      SLWREC.SLWMSGNO = 0057; /* <--- not on db msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == +9)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SAAB";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "SAAC";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    return;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSAA

// same key edits
Function SL0FSB1()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw. (in0iwsks)****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (SL0FM110.XWHCD != SL0FW01.XWHCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0FM110.SL0FMFDT != SL0FW01.SL0FWFDT)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0FM110.SL0FMTDT != SL0FW01.SL0FWTDT)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0FM110.YWSCD != SL0FW01.YWSCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0FM110.XARCD != SL0FW01.XARCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0FM110.SL4ZONE != SL0FW01.SL4ZONE)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0FM110.SL5LOCTN != SL0FW01.SL5LOCTN)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0FM110.YWTCD != SL0FW01.YWTCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0FM110.SL0FMOTP != SL0FW01.SL0FWOTP)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSB1

// same key edits
Function SL0FSB2()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw. (in0iwsks)****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (SL0FM210.XWHCD != SL0FW02.XWHCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0FM210.SL0FMFDT != SL0FW02.SL0FWFDT)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0FM210.SL0FMTDT != SL0FW02.SL0FWTDT)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0FM210.YWTCD != SL0FW02.YWTCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0FM210.SL0FMOTP != SL0FW02.SL0FWOTP)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0FM210.XGPCD != SL0FW02.XGPCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0FM210.SY1STNBR != SL0FW02.SY1STNBR)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0FM210.SY2CLRID != SL0FW02.SY2CLRID)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0FM210.XDMCD != SL0FW02.XDMCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0FM210.XQACD != SL0FW02.XQACD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0FM210.PC2INSEG != SL0FW02.PC2INSEG)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0FM210.XEGCD != SL0FW02.XEGCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0FM210.XSLCD != SL0FW02.XSLCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0FM210.XPGCD != SL0FW02.XPGCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0FM210.XUMCD != SL0FW02.XUMCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0FM210.XOWCD != SL0FW02.XOWCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0FM210.YWSCD != SL0FW02.YWSCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSB2

// same key edits
Function SL0FSB3()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw. (in0iwsks)****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (SL0FM310.XWHCD != SL0FW03.XWHCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0FM310.SL8WONBR != SL0FW03.SL8WONBR)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSB3

// same key edits
Function SL0FSB4()


   /* ************************************************************/
   /* *** check individual map (key) fields versus the last   ****/
   /* *** value saved in ws to set the same key sw. (in0iwsks)****/
   /* *** note: set sw. = N & ezertn on first NOT equal  BUT  ****/
   /* ***       sw. must be set = Y if all compare equal      ****/
   /* ************************************************************/

  if (SL0FM410.XWHCD != SL0FW04.XWHCD)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  if (SL0FM410.SL8WOGRP != SL0FW04.SL8WOGRP)
    SLWREC.SLWSKYSW = "N";
    return;
  end

  SLWREC.SLWSKYSW = "Y";

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSB4

// key field edits
Function SL0FSC1()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

  if (SL0FM110.SL0FMOTP != "  ")
    if (SL0FM110.SL0FMOTP in YWTTBL.YWTCD)
      if (YWTTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        SL0FM110.SL0FMTAB = "      ";
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC2A";
        SLWREC.SLWMSGNO = 0010; /* inactive message*/
        set SL0FM110.SL0FMOTP cursor, bold;
      else
        SL0FM110.SL0FMTAB = YWTTBL.YWTABRV[sysVar.arrayIndex];
      end
    else
      SL0FM110.SL0FMTAB = "      ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2B";
      SLWREC.SLWMSGNO = 0011; /* inactive msg*/
      set SL0FM110.SL0FMOTP cursor, bold;
    end
  else
    SL0FM110.SL0FMTAB = "     ";
  end

  if (SL0FM110.YWTCD == "A ")
    SL0FM110.YWTABRV = "ALL";
  else
    if (SL0FM110.YWTCD in YWTTBL.YWTCD)
      if (YWTTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC1C";
        SLWREC.SLWMSGNO = 0010; /* inactive msg*/
        set SL0FM110.YWTCD cursor, bold;
      else
        SL0FM110.YWTABRV = YWTTBL.YWTABRV[sysVar.arrayIndex];
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1D";
      SLWREC.SLWMSGNO = 0011; /* invalid value msg*/
      set SL0FM110.YWTCD cursor, bold;
    end
  end

  if (SL0FM110.YWSCD == "A ")
    SL0FM110.YWSABRV = "ALL";
  else
    if (SL0FM110.YWSCD in YWSTBL.YWSCD)
      if (YWSTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC1E";
        SLWREC.SLWMSGNO = 0010; /* inactive msg*/
        set SL0FM110.YWSCD cursor, bold;
      else
        SL0FM110.YWSABRV = YWSTBL.YWSABRV[sysVar.arrayIndex];
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1F";
      SLWREC.SLWMSGNO = 0011; /* invalid value msg*/
      set SL0FM110.YWSCD cursor, bold;
    end
  end


  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";
  TA2REC.TA2GRGAN = SL0FM110.SL0FMTDT;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1G";
    SLWREC.SLWMSGNO = 0021; /* invalid value msg*/
    set SL0FM110.SL0FMTDT cursor, bold;
  end

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";
  TA2REC.TA2GRGAN = SL0FM110.SL0FMFDT;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1H";
    SLWREC.SLWMSGNO = 0021; /* invalid value msg*/
    set SL0FM110.SL0FMFDT cursor, bold;
  end

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (SL0FM110.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0FM110.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      SL0FM110.XWHABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC1I";
      SLWREC.SLWMSGNO = 0010; /* inactive msg*/
      set SL0FM110.XWHCD cursor, bold;
    end
  else
    SL0FM110.XWHABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC1J";
    SLWREC.SLWMSGNO = 0011; /* invalid value msg*/
    set SL0FM110.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSC1

// key field edits
Function SL0FSC2()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (SL0FM210.YWSCD != "A ")
    if (SL0FM210.YWSCD in YWSTBL.YWSCD)
      if (YWSTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC2A";
        SLWREC.SLWMSGNO = 0010; /* inactive msg*/
        set SL0FM210.YWSCD cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2B";
      SLWREC.SLWMSGNO = 0011; /* invalid value msg*/
      set SL0FM210.YWSCD cursor, bold;
    end
  end

  if (SL0FM210.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XWHOWNGF[sysVar.arrayIndex] == "Y")
      if (SL0FM210.XOWCD in XOWTBL.XOWCD)
        if (XOWTBL.XXXSTAT[sysVar.arrayIndex] != "A")
          SLWREC.SLWERRSW = "Y";
          SLWREC.XXXLOCID = "SC2C";
          SLWREC.SLWMSGNO = 0010; /* inactive msg*/
          set SL0FM210.XOWCD cursor, bold;
        end
      else
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC2D";
        SLWREC.SLWMSGNO = 0011; /* invalid value msg*/
        set SL0FM210.XOWCD cursor, bold;
      end
    end
  end

  if (SL0FM210.XUMCD in XUMTBL.XUMCD)
    if (XUMTBL.XXXSTAT[sysVar.arrayIndex] != "A")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2E";
      SLWREC.SLWMSGNO = 0010; /* inactive msg*/
      set SL0FM210.XUMCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2F";
    SLWREC.SLWMSGNO = 0011; /* invalid value msg*/
    set SL0FM210.XUMCD cursor, bold;
  end

  if (SL0FM210.XPGCD in XPGTBL.XPGCD)
    if (XPGTBL.XXXSTAT[sysVar.arrayIndex] != "A")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2G";
      SLWREC.SLWMSGNO = 0010; /* inactive msg*/
      set SL0FM210.XPGCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2H";
    SLWREC.SLWMSGNO = 0011; /* invalid value msg*/
    set SL0FM210.XPGCD cursor, bold;
  end

  if (SL0FM210.XSLCD in XSLTBL.XSLCD)
    if (XSLTBL.XXXSTAT[sysVar.arrayIndex] != "A")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2I";
      SLWREC.SLWMSGNO = 0010; /* inactive msg*/
      set SL0FM210.XSLCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2J";
    SLWREC.SLWMSGNO = 0011; /* invalid value msg*/
    set SL0FM210.XSLCD cursor, bold;
  end

  if (SL0FM210.XEGCD in XEGTBL.XEGCD)
    if (XSLTBL.XXXSTAT[sysVar.arrayIndex] != "A")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2K";
      SLWREC.SLWMSGNO = 0010; /* inactive msg*/
      set SL0FM210.XEGCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2L";
    SLWREC.SLWMSGNO = 0011; /* invalid value msg*/
    set SL0FM210.XEGCD cursor, bold;
  end

  set PC2REC empty; /* clear row storage area*/

  PC2REC.XGPCD = SL0FM210.XGPCD;
  PC2REC.PC2INSEG = SL0FM210.PC2INSEG;
  call "IO3340" ("SG", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == +0)
    if (PC2REC.XXXSTAT != "A")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2M";
      SLWREC.SLWMSGNO = 0010; /* inactive msg*/
      set SL0FM210.PC2INSEG cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2N";
    SLWREC.SLWMSGNO = 0011; /* invalid value msg*/
    set SL0FM210.PC2INSEG cursor, bold;
  end

  if (SL0FM210.XQACD in XQATBL.XQACD)
    if (XQATBL.XXXSTAT[sysVar.arrayIndex] != "A")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2O";
      SLWREC.SLWMSGNO = 0010; /* inactive msg*/
      set SL0FM210.XQACD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2P";
    SLWREC.SLWMSGNO = 0011; /* invalid value msg*/
    set SL0FM210.XQACD cursor, bold;
  end

  if (SL0FM210.XDMCD in XDMTBL.XDMCD)
    if (XDMTBL.XXXSTAT[sysVar.arrayIndex] != "A")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2Q";
      SLWREC.SLWMSGNO = 0010; /* inactive msg*/
      set SL0FM210.XDMCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2R";
    SLWREC.SLWMSGNO = 0011; /* invalid value msg*/
    set SL0FM210.XDMCD cursor, bold;
  end

  if (SL0FM210.XGPCD in XGPTBL.XGPCD)
    if (XGPTBL.XXXSTAT[sysVar.arrayIndex] != "A")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2S";
      SLWREC.SLWMSGNO = 0010; /* inactive msg*/
      set SL0FM210.XGPCD cursor, bold;
    end
  else
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2T";
    SLWREC.SLWMSGNO = 0011; /* invalid value msg*/
    set SL0FM210.XGPCD cursor, bold;
  end

  if (SL0FM210.SL0FMOTP != "  ")
    if (SL0FM210.SL0FMOTP in YWTTBL.YWTCD)
      if (YWTTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC2U";
        SLWREC.SLWMSGNO = 0010; /* inactive msg*/
        set SL0FM210.SL0FMOTP cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2V";
      SLWREC.SLWMSGNO = 0011; /* invalid value msg*/
      set SL0FM210.SL0FMOTP cursor, bold;
    end
  end
  if (SL0FM210.YWTCD != "A ")
    if (SL0FM210.YWTCD in YWTTBL.YWTCD)
      if (YWTTBL.XXXSTAT[sysVar.arrayIndex] != "A")
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SC2W";
        SLWREC.SLWMSGNO = 0010; /* inactive msg*/
        set SL0FM210.YWTCD cursor, bold;
      end
    else
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2X";
      SLWREC.SLWMSGNO = 0011; /* invalid value msg*/
      set SL0FM210.YWTCD cursor, bold;
    end
  end

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";
  TA2REC.TA2GRGAN = SL0FM210.SL0FMTDT;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2Y";
    SLWREC.SLWMSGNO = 0021; /* invalid value msg*/
    set SL0FM210.SL0FMTDT cursor, bold;
  end

  set TA2REC empty;
  TA2REC.TA2DTOPT = "GREGGREG";
  TA2REC.TA2GRTYP = "A";
  TA2REC.TA2GRGAN = SL0FM210.SL0FMFDT;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2Z";
    SLWREC.SLWMSGNO = 0021; /* invalid value msg*/
    set SL0FM210.SL0FMFDT cursor, bold;
  end

  if (SL0FM210.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0FM210.XWHSABRV = XWHTBL.XWHSABRV[sysVar.arrayIndex];
    else
      SL0FM210.XWHSABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC2Y";
      SLWREC.SLWMSGNO = 0010; /* inactive msg*/
      set SL0FM210.XWHCD cursor, bold;
    end
  else
    SL0FM210.XWHSABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC2Z";
    SLWREC.SLWMSGNO = 0011; /* invalid value msg*/
    set SL0FM210.XWHCD cursor, bold;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0FSC2

// field edits
Function SL0FSC3()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (SL0FM310.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0FM310.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
    else
      SL0FM310.XWHABRV = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC3C";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0FM310.XWHCD cursor, bold;
    end
  else
    SL0FM310.XWHABRV = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC3D";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0FM310.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSC3

// key field edits
Function SL0FSC4()


   /* ************************************************************/
   /* *** edit all individual fields, even if error detected  ****/
   /* *** note: use reverse order to sync msg, cursor & attr. ****/
   /* ***       do not test for modified fields (CSP resets)  ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** if warehouse code in tbl & active: put abrv. on map ****/
   /* ************************************************************/

  if (SL0FM410.XWHCD in XWHTBL.XWHCD)
    if (XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      SL0FM410.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
      SL0FW04.SL0FWPNB = SL8REC.SWEPLLNB;
      SL0FM410.SL0FMPNB = SL0FW04.SL0FWPNB;
    else
      SL0FM410.XWHABRV = " ";
      SL0FM410.SL0FMPNB = " ";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SC4A";
      SLWREC.SLWMSGNO = 0010; /* <--- inactive msg*/
      set SL0FM410.XWHCD cursor, bold;
    end
  else
    SL0FM410.XWHABRV = " ";
    SL0FM410.SL0FMPNB = " ";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SC4B";
    SLWREC.SLWMSGNO = 0011; /* <--- invalid value msg*/
    set SL0FM410.XWHCD cursor, bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSC4

// key relational edits
Function SL0FSD1()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* ************************************************************/
   /* ***  omit type option not valid unless type = 'a' (all) ****/
   /* ************************************************************/

  if (SL0FM110.SL0FMOTP != "  "
   && SL0FM110.YWTCD != "A ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD1A";
    SLWREC.SLWMSGNO = 0030; /* mutually exclusive fields*/
    set SL0FM110.SL0FMOTP cursor, bold; /* highlight fields*/
    set SL0FM110.YWTCD bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSD1

// key relational edits
Function SL0FSD2()

   /* ************************************************************/
   /* *** OMIT TYPE option not valid unless TYPE='A ' (ALL)   ****/
   /* ************************************************************/

  if (SL0FM210.SL0FMOTP != "  "
   && SL0FM210.YWTCD != "A ")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SD2A";
    SLWREC.SLWMSGNO = 0030; /* mutually exclusive fields*/
    set SL0FM210.SL0FMOTP cursor, bold; /* highlight fields*/
    set SL0FM210.YWTCD bold;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSD2

// relational edits
Function SL0FSD3()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSD3

// key relational edits
Function SL0FSD4()


   /* ************************************************************/
   /* *** do relational edits in any order but exit on error  ****/
   /* *** note: all required flds entered & edits = ok        ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSD4

// obtain table data
Function SL0FSE1()


   /* ************************************************************/
   /* *** make one time table accesses for auxillary and/or   ****/
   /* *** main data                                           ****/
   /* *** note: first time executions before beginning a loop ****/
   /* ***       might also be performed                       ****/
   /* ************************************************************/


  TA1REC.TA1LOCAT[2] = "SL0FSE1 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

   /* *** verify location data and obtain status ****/

  set SL5REC empty;
  SL5REC.XWHCD = SL0FM110.XWHCD;
  SL5REC.XARCD = SL0FM110.XARCD;
  SL5REC.SL4ZONE = SL0FM110.SL4ZONE;
  if (SL0FM110.SL5LOCTN == "      ")
    SL5REC.SL5LOCTN = "*";
  else
    SL5REC.SL5LOCTN = SL0FM110.SL5LOCTN;
  end

  XSSL5I0(); /* obtain location record*/

  if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
    if (SL0FW01.SL0FWLSW == "Y") /* second time thru*/
      SL0FW01.SL0FWLSW = "N";
    else
      SL0FW01.SL0FWLSW = "Y";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SE1A";
      SLWREC.SLWMSGNO = 0208; /* <--- not on db msg*/
      set SL0FM110.XARCD cursor, bold;
      set SL0FM110.SL4ZONE bold;
      set SL0FM110.SL5LOCTN bold;
      return;
    end
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE1B";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -811) /* <=== for INQUIRY*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE1C";
    SLWREC.SLWMSGNO = 0001; /* <--- dupl rows/severe error msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != +100)
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "SE1E";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    SL0FST1(); /* <=== clear scrn (empty)*/
    return;
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSE1

// obtain table data
Function SL0FSE2()


   /* ************************************************************/
   /* *** make one time table accesses for auxillary and/or   ****/
   /* *** main data                                           ****/
   /* *** note: first time executions before beginning a loop ****/
   /* ***       might also be performed                       ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0FSE2 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  PKNREC.XGPCD = SL0FM210.XGPCD;
  PKNREC.SY1STNBR = SL0FM210.SY1STNBR;
  PKNREC.SY2CLRID = SL0FM210.SY2CLRID;
  PKNREC.XDMCD = SL0FM210.XDMCD;

  SL0F460(); /* <=== std prod loctn inquiry*/

  if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE2A";
    SLWREC.SLWMSGNO = 0056; /* <--- not on db msg*/
    set SL0FM210.SY1STNBR cursor, bold;
    set SL0FM210.SY2CLRID bold;
    return;
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE2B";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE != 0)
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "SE2C";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    SL0FST2(); /* <=== clear scrn (empty)*/
    return;
  end

  SL0FM210.SY1SSTNM = PKNREC.SY1SSTNM;
  SL0FM210.SY2CLRAB = PKNREC.SY2CLRAB;


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0FSE2

// obtain table data
Function SL0FSE3()


   /* ************************************************************/
   /* *** make one time table accesses for auxillary and/or   ****/
   /* *** main data                                           ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0FSE3 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  SL0FW03.SL0FWRSW = "Y"; /* initialize records switch*/

   /* *** obtain work order header record ****/

  set VWOLHD02 empty;

  VWOLHD02.XWHCD = SL0FM310.XWHCD;
  VWOLHD02.SL8WONBR = SL0FM310.SL8WONBR;

  XSSLS-S-VWOLHD02(); /* select unique w.o. hdr rec*/

  if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
    SL0FW03.SL0FWRSW = "N"; /* no live records*/
  end
  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SE3A";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  end
  if (SQLCA.VAGen_SQLCODE < 0)
    SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
    SLWREC.XXXLOCID = "SE3B";
    SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
    SL0FST3(); /* <=== clear scrn (empty)*/
    return;
  end

  if (SL0FW03.SL0FWRSW == "Y")
    SL0FS3A(); /* format header data*/
    if (SLWREC.SLWERRSW == "Y")
      return;
    end
    SL0FS3B(); /* obtain & format live detail records*/
    return;
  else

    /* *** obtain memorex w.o. hdr rec ****/

    set VWOMHD02 empty; /* IF NO LIVE RECORDS, PULL FROM MOLDY*/

    VWOMHD02.XWHCD = SL0FM310.XWHCD;
    VWOMHD02.SL8WONBR = SL0FM310.SL8WONBR;

    XSSLS-S-VWOMHD02(); /* select unique w.o. hdr rec*/

    if (SQLCA.VAGen_SQLCODE == +100) /* <=== for INQUIRY*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SE3C";
      SLWREC.SLWMSGNO = 0082; /* <--- no w.o. found*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
      SLWREC.SLWSKYSW = "N";
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SE3D";
      SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
      return;
    end
    if (SQLCA.VAGen_SQLCODE != 0)
      SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
      SLWREC.XXXLOCID = "SE3E";
      SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
      SL0FST3(); /* <=== clear scrn (empty)*/
      return;
    end

    SL0FS3D(); /* format header data*/

    if (SLWREC.SLWERRSW == "Y")
      return;
    end

    SL0FS3E(); /* obtain & format memorex item records*/
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSE3

// obtain table data
Function SL0FSE4()


   /* ************************************************************/
   /* *** make one time table accesses for auxillary and/or   ****/
   /* *** main data                                           ****/
   /* *** note: first time executions before beginning a loop ****/
   /* ***       might also be performed                       ****/
   /* ************************************************************/

   /* none at this time*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSE4

// save current key value(s)
Function SL0FSF1()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  COMMAREA.XWHCD = SL0FM110.XWHCD;

  SL0FW01.XWHCD = SL0FM110.XWHCD;
  SL0FW01.XWHABRV = SL0FM110.XWHABRV;
  SL0FW01.SL0FWFDT = SL0FM110.SL0FMFDT;
  SL0FW01.SL0FWTDT = SL0FM110.SL0FMTDT;
  SL0FW01.YWSCD = SL0FM110.YWSCD;
  SL0FW01.YWSABRV = SL0FM110.YWSABRV;
  SL0FW01.XARCD = SL0FM110.XARCD;
  SL0FW01.SL4ZONE = SL0FM110.SL4ZONE;
  SL0FW01.SL5LOCTN = SL0FM110.SL5LOCTN;
  SL0FW01.YWTCD = SL0FM110.YWTCD;
  SL0FW01.SL0FWOTP = SL0FM110.SL0FMOTP;
  SL0FW01.SL0FWTAB = SL0FM110.SL0FMTAB;
  SL0FW01.YWTABRV = SL0FM110.YWTABRV;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSF1

// save current key value(s)
Function SL0FSF2()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  COMMAREA.XWHCD = SL0FM210.XWHCD;

  SL0FW02.XWHCD = SL0FM210.XWHCD;
  SL0FW02.XWHSABRV = SL0FM210.XWHSABRV;
  SL0FW02.SL0FWFDT = SL0FM210.SL0FMFDT;
  SL0FW02.SL0FWTDT = SL0FM210.SL0FMTDT;
  SL0FW02.YWTCD = SL0FM210.YWTCD;
  SL0FW02.SL0FWOTP = SL0FM210.SL0FMOTP;
  SL0FW02.XGPCD = SL0FM210.XGPCD;
  SL0FW02.SY1STNBR = SL0FM210.SY1STNBR;
  SL0FW02.SY1SSTNM = SL0FM210.SY1SSTNM;
  SL0FW02.SY2CLRID = SL0FM210.SY2CLRID;
  SL0FW02.SY2CLRAB = SL0FM210.SY2CLRAB;
  SL0FW02.XDMCD = SL0FM210.XDMCD;
  SL0FW02.XQACD = SL0FM210.XQACD;
  SL0FW02.PC2INSEG = SL0FM210.PC2INSEG;
  SL0FW02.XEGCD = SL0FM210.XEGCD;
  SL0FW02.XSLCD = SL0FM210.XSLCD;
  SL0FW02.XPGCD = SL0FM210.XPGCD;
  SL0FW02.XUMCD = SL0FM210.XUMCD;
  SL0FW02.XOWCD = SL0FM210.XOWCD;
  SL0FW02.YWSCD = SL0FM210.YWSCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSF2

// save key values
Function SL0FSF3()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  COMMAREA.XWHCD = SL0FM310.XWHCD;

  SL0FW03.XWHCD = SL0FM310.XWHCD;
  SL0FW03.XWHABRV = SL0FM310.XWHABRV;
  SL0FW03.SL8WONBR = SL0FM310.SL8WONBR;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSF3

// save current key value(s)
Function SL0FSF4()


   /* ************************************************************/
   /* *** save current key values in the corresponding ws flds****/
   /* ************************************************************/

  COMMAREA.XWHCD = SL0FM410.XWHCD;

  SL0FW04.XWHCD = SL0FM410.XWHCD;
  SL0FW04.XWHABRV = SL0FM410.XWHABRV;
  SL0FW04.SL8WOGRP = SL0FM410.SL8WOGRP;
  SL0FW04.SL0FWPNB = SL8REC.SWEPLLNB;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSF4

// setup map key fields
Function SL0FSG1()


   /* ************************************************************/
   /* *** since the 'special error switch' = 'y':             ****/
   /* *** use current ws values in the corresponding map flds ****/
   /* ************************************************************/

  SL0FM110.XWHCD = SL0FW01.XWHCD;
  SL0FM110.XWHABRV = SL0FW01.XWHABRV;
  SL0FM110.SL0FMFDT = SL0FW01.SL0FWFDT;
  SL0FM110.SL0FMTDT = SL0FW01.SL0FWTDT;
  SL0FM110.YWSCD = SL0FW01.YWSCD;
  SL0FM110.YWSABRV = SL0FW01.YWSABRV;
  SL0FM110.XARCD = SL0FW01.XARCD;
  SL0FM110.SL4ZONE = SL0FW01.SL4ZONE;
  SL0FM110.SL5LOCTN = SL0FW01.SL5LOCTN;
  SL0FM110.YWTCD = SL0FW01.YWTCD;
  SL0FM110.YWTABRV = SL0FW01.YWTABRV;
  SL0FM110.SL0FMOTP = SL0FW01.SL0FWOTP;
  SL0FM110.SL0FMTAB = SL0FW01.SL0FWTAB;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSG1

// setup map key fields
Function SL0FSG2()


   /* ************************************************************/
   /* *** since the 'special error switch' = 'y':             ****/
   /* *** use current ws values in the corresponding map flds ****/
   /* ************************************************************/

  SL0FM210.XWHCD = SL0FW02.XWHCD;
  SL0FM210.XWHSABRV = SL0FW02.XWHSABRV;
  SL0FM210.SL0FMFDT = SL0FW02.SL0FWFDT;
  SL0FM210.SL0FMTDT = SL0FW02.SL0FWTDT;
  SL0FM210.YWTCD = SL0FW02.YWTCD;
  SL0FM210.SL0FMOTP = SL0FW02.SL0FWOTP;
  SL0FM210.XGPCD = SL0FW02.XGPCD;
  SL0FM210.SY1STNBR = SL0FW02.SY1STNBR;
  SL0FM210.SY1SSTNM = SL0FW02.SY1SSTNM;
  SL0FM210.SY2CLRID = SL0FW02.SY2CLRID;
  SL0FM210.SY2CLRAB = SL0FW02.SY2CLRAB;
  SL0FM210.XDMCD = SL0FW02.XDMCD;
  SL0FM210.XQACD = SL0FW02.XQACD;
  SL0FM210.PC2INSEG = SL0FW02.PC2INSEG;
  SL0FM210.XEGCD = SL0FW02.XEGCD;
  SL0FM210.XSLCD = SL0FW02.XSLCD;
  SL0FM210.XPGCD = SL0FW02.XPGCD;
  SL0FM210.XUMCD = SL0FW02.XUMCD;
  SL0FM210.XOWCD = SL0FW02.XOWCD;
  SL0FM210.YWSCD = SL0FW02.YWSCD;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSG2

// setup map key fields
Function SL0FSG3()


   /* ************************************************************/
   /* *** use current ws values in the corresponding map flds ****/
   /* ************************************************************/

  SL0FM310.XWHCD = SL0FW03.XWHCD;
  SL0FM310.XWHABRV = SL0FW03.XWHABRV;
  SL0FM310.SL8WONBR = SL0FW03.SL8WONBR;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSG3

// setup map key fields
Function SL0FSG4()


   /* ************************************************************/
   /* *** since the 'special error switch' = 'y':             ****/
   /* *** use current ws values in the corresponding map flds ****/
   /* ************************************************************/

  SL0FM410.XWHCD = SL0FW04.XWHCD;
  SL0FM410.XWHABRV = SL0FW04.XWHABRV;
  SL0FM410.SL8WOGRP = SL0FW04.SL8WOGRP;
  SL0FM410.SL0FMPNB = SL0FW04.SL0FWPNB;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSG4

// ENTER processing
Function SL0FSH0()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0FSA0(); /* <=== missing input edits*/

   /* ************************************************************/
   /* *** no missing fields:                                  ****/
   /* *** invalid selection detected in flow when             ****/
   /* *** transfer of control is attempted                    ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSH0

// ENTER processing
Function SL0FSH1()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0FSA1(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check the key fields for changes                    ****/
   /* *** note: save key will be blank & NOT = on first time  ****/
   /* *** note: IN0XWSKS=Y; if fields NOT changed (=same key) ****/
   /* ************************************************************/

  SL0FSB1(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "Y")
    if (SL0FW01.SL0FWLSW == "Y")
       /* next sentence*/
    else
       /* ************************************************************/
       /* *** if same key fields & enter last used: setup error   ****/
       /* ************************************************************/
      if (SLWREC.SLWLASPF == "E")
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SH1A";
        SLWREC.SLWMSGNO = 0005; /* <--- new input required msg*/
        return;
      end
       /* ************************************************************/
       /* *** since last pfkey was NOT ENTER & key is the same:   ****/
       /* ***   setup last pfkey = ENTER & make sure tsq is setup ****/
       /* ***   find the same subkey as on detail (& top of page) ****/
       /* ***   setup summary data lines for this page            ****/
       /* *** note: last pfkey can't be blank (first time thru)   ****/
       /* ***       re: same key checks will eq 'n'               ****/
       /* ************************************************************/
      SLWREC.SLWLASPF = "E";
      SL0FSU1(); /* <=== match detail's subkey*/
      if (SLWREC.SLWERRSW == "Y")
        SL0FST1(); /* <=== reset screen (empty)*/
        return;
      end
      if (SLWREC.SLWLASRL == "10")
        SL0FSO1(); /* <=== setup left sum scrn*/
      else
        SL0FSQ1(); /* <=== setup right sum scrn*/
      end
      return;
    end
  else
    SL0FW01.SL0FWLSW = "N";
  end

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  SL0FSC1(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0FSD1(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    SL0FSF1(); /* <=== save current key value(s)*/
    SL0FST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses             ****/
   /* ************************************************************/

  SL0FSE1(); /* <=== obtain table data*/

  if (SLWREC.SLWERRSW == "Y")
    SL0FSF1(); /* <=== save current key value(s)*/
    SL0FST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s) & last pfkey as ENTER  ****/
   /* ************************************************************/

  SL0FSF1(); /* <=== save current key value(s)*/

  SLWREC.SLWLASPF = "E";

   /* ************************************************************/
   /* *** data present & changed: purge both tsqs             ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq(s)*/

  if (SLWREC.SLWERRSW == "Y")
    SL0FST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: setup summary tsq                        ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    SL0FM110.XMSLMSEL[SLWIDX01] = " ";
    set SL0FM110.XMSLMSEL[SLWIDX01] skip, invisible;
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

  SL0FSS1(); /* <=== setup all pages in tsq*/

  if (SLWREC.SLWERRSW == "Y")
    SL0FST1(); /* <=== reset screen (empty)*/
    return;
  end

  SL0FS1S(); /* obtain first summary record*/

   /* ************************************************************/
   /* *** setup sum screen depending on last right left pfkey ****/
   /* ************************************************************/

  if (SLWREC.SLWLASRL == "10")
    SL0FSO1(); /* <=== setup left sum scrn*/
  else
    SL0FSQ1(); /* <=== setup right sum scrn*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSH1

// ENTER processing
Function SL0FSH2()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0FSA2(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check the key fields for changes                    ****/
   /* *** note: save key will be blank & NOT = on first time  ****/
   /* *** note: IN0XWSKS=Y; if fields NOT changed (=same key) ****/
   /* ************************************************************/

  SL0FSB2(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "Y")
     /* ************************************************************/
     /* *** if same key fields & enter last used: setup error   ****/
     /* ************************************************************/
    if (SLWREC.SLWLASPF == "E")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SH2A";
      SLWREC.SLWMSGNO = 0005; /* <--- new input required msg*/
      return;
    end
     /* ************************************************************/
     /* *** since last pfkey was NOT ENTER & key is the same:   ****/
     /* ***   setup last pfkey = ENTER & make sure tsq is setup ****/
     /* ***   find the same subkey as on detail (& top of page) ****/
     /* ***   setup summary data lines for this page            ****/
     /* *** note: last pfkey can't be blank (first time thru)   ****/
     /* ***       re: same key checks will eq 'n'               ****/
     /* ************************************************************/
    SLWREC.SLWLASPF = "E";
    SL0FSU2(); /* <=== match detail's subkey*/
    if (SLWREC.SLWERRSW == "Y")
      SL0FST2(); /* <=== reset screen (empty)*/
      return;
    end
    if (SLWREC.SLWLASRL == "10")
      SL0FSO2(); /* <=== setup left sum scrn*/
    else
      SL0FSQ2(); /* <=== setup right sum scrn*/
    end
    return;
  end

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  SL0FSC2(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0FSD2(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    SL0FSF2(); /* <=== save current key value(s)*/
    SL0FST2(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses             ****/
   /* ************************************************************/

  SL0FSE2(); /* <=== obtain table data*/

  if (SLWREC.SLWERRSW == "Y")
    SL0FSF2(); /* <=== save current key value(s)*/
    SL0FST2(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s) & last pfkey as ENTER  ****/
   /* ************************************************************/

  SL0FSF2(); /* <=== save current key value(s)*/

  SLWREC.SLWLASPF = "E";

   /* ************************************************************/
   /* *** data present & changed: purge both tsqs             ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq(s)*/

  if (SLWREC.SLWERRSW == "Y")
    SL0FST2(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: setup summary tsq                        ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    SL0FM210.XMSLMSEL[SLWIDX01] = " ";
    set SL0FM210.XMSLMSEL[SLWIDX01] skip, invisible;
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

  SL0FSS2(); /* <=== setup all pages in tsq*/

  if (SLWREC.SLWERRSW == "Y")
    SL0FST2(); /* <=== reset screen (empty)*/
    return;
  end

  SL0FS2S(); /* obtain first summary record*/

   /* ************************************************************/
   /* *** setup sum screen depending on last right left pfkey ****/
   /* ************************************************************/

  if (SLWREC.SLWLASRL == "10")
    SL0FSO2(); /* <=== setup left sum scrn*/
  else
    SL0FSQ2(); /* <=== setup right sum scrn*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSH2

// ENTER processing
Function SL0FSH3()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0FSA3(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check the key fields for changes                    ****/
   /* *** note: save key will be blank & NOT = on first time  ****/
   /* *** note: IN0XWSKS=Y; if fields NOT changed (=same key) ****/
   /* ************************************************************/

  SL0FSB3(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "Y")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SH3A";
    SLWREC.SLWMSGNO = 0005; /* <--- new input required msg*/
    return;
  end

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  SL0FSC3(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0FSD3(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    SL0FSF3();
    SL0FST3();
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses             ****/
   /* ************************************************************/

  SL0FSE3(); /* <=== obtain table data*/

  if (SLWREC.SLWERRSW == "Y")
    SL0FSF3();
    SL0FST3();
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s)                        ****/
   /* ************************************************************/

  SL0FSF3(); /* <=== save current key value(s)*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSH3

// ENTER processing
Function SL0FSH4()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0FSA4(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check the key fields for changes                    ****/
   /* *** note: save key will be blank & NOT = on first time  ****/
   /* *** note: IN0XWSKS=Y; if fields NOT changed (=same key) ****/
   /* ************************************************************/

  SL0FSB4(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "Y")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SH4A";
    SLWREC.SLWMSGNO = 0005; /* <--- new input required msg*/
    return;
  end

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  SL0FSC4(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    SL0FSF4();
    SL0FST4();
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0FSD4(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    SL0FSF4();
    SL0FST4();
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses             ****/
   /* ************************************************************/

  SL0FSE4(); /* <=== obtain table data*/

  if (SLWREC.SLWERRSW == "Y")
    SL0FSF4();
    SL0FST4();
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s) & last pfkey as ENTER  ****/
   /* ************************************************************/

  SL0FSF4(); /* <=== save current key value(s)*/

   /* ************************************************************/
   /* *** data present & changed: purge both tsqs             ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq(s)*/

  if (SLWREC.SLWERRSW == "Y")
    SL0FST4(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: setup summary tsq                        ****/
   /* ************************************************************/

  SL0FSS4(); /* <=== setup all pages in tsq*/

  if (SLWREC.SLWERRSW == "Y")
    SL0FST4(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** setup sum screen                                    ****/
   /* ************************************************************/

  SL0FS4C(); /* obtain first record from tsq*/

  if (SLWREC.SLWERRSW == "Y")
    SL0FST4(); /* <=== reset screen (empty)*/
    return;
  end

  SL0FSO4(); /* <=== setup left sum scrn*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSH4

// PF6 processing
Function SL0FSI1()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0FSA1(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check for changes to the key fields                 ****/
   /* *** note: if first time: save keys = blanks & are NOT = ****/
   /* *** note: IN0XWSKS = Y : same keys as last saved        ****/
   /* ************************************************************/

  SL0FSB1(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "Y")
     /* ************************************************************/
     /* *** if same key fields & last pfkey was PF6: error msg  ****/
     /* ************************************************************/
    if (SLWREC.SLWLASPF == "6")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SI1A";
      SLWREC.SLWMSGNO = 0005; /* <--- new input required msg*/
      return;
    end
     /* ************************************************************/
     /* *** since the last pfkey was NOT PF6 & key is the same: ****/
     /* ***   setup last pfkey = PF6 & make sure tsq is setup   ****/
     /* ***   find the same subkey as on summary (& top of page)****/
     /* ***   setup detail data lines for this page             ****/
     /* *** note: same key checks prevent last pfkey = blank    ****/
     /* ************************************************************/
    SLWREC.SLWLASPF = "6";
    SL0FSW1(); /* <=== match summary's subkey*/
    if (SLWREC.SLWERRSW == "Y")
      SL0FST1(); /* <=== reset screen (empty)*/
      return;
    end
    if (SLWREC.SLWLASRL == "10")
      SL0FSP1(); /* <=== setup left det scrn*/
    else
      SL0FSR1(); /* <=== setup right det scrn*/
    end
    return;
  end

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  SL0FSC1(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0FSD1(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    SL0FSF1(); /* <=== save current key value(s)*/
    SL0FST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses             ****/
   /* ************************************************************/

  SL0FSE1(); /* <=== obtain table data*/

  if (SLWREC.SLWERRSW == "Y")
    SL0FSF1(); /* <=== save current key value(s)*/
    SL0FST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s) & last pfkey as PF6    ****/
   /* ************************************************************/

  SL0FSF1(); /* <=== save current key value(s)*/

  SLWREC.SLWLASPF = "6";

   /* ************************************************************/
   /* *** data present & changed: purge tsq(s)                ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq(s)*/

  if (SLWREC.SLWERRSW == "Y")
    SL0FST1(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: setup detail tsq and first page          ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    SL0FM110.XMSLMSEL[SLWIDX01] = " ";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

  SL0FSS1(); /* setup tsqs*/

  if (SLWREC.SLWERRSW == "Y")
    SL0FST1(); /* reset screen*/
    return;
  end

  SL0FS1D(); /* obtain 1st detail record*/

   /* ************************************************************/
   /* *** setup det scrn depending on last right/left pfkey   ****/
   /* ************************************************************/

  if (SLWREC.SLWLASRL == "10")
    SL0FSP1(); /* <=== setup left det scrn*/
  else
    SL0FSR1(); /* <=== setup right det scrn*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSI1

// PF6 processing
Function SL0FSI2()


   /* ************************************************************/
   /* *** check for missing fields                            ****/
   /* ************************************************************/

  SL0FSA2(); /* <=== missing input edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** check for changes to the key fields                 ****/
   /* *** note: if first time: save keys = blanks & are NOT = ****/
   /* *** note: IN0XWSKS = Y : same keys as last saved        ****/
   /* ************************************************************/

  SL0FSB2(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "Y")
     /* ************************************************************/
     /* *** if same key fields & last pfkey was PF6: error msg  ****/
     /* ************************************************************/
    if (SLWREC.SLWLASPF == "6")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SI2A";
      SLWREC.SLWMSGNO = 0005; /* <--- new input required msg*/
      return;
    end
     /* ************************************************************/
     /* *** since the last pfkey was NOT PF6 & key is the same: ****/
     /* ***   setup last pfkey = PF6 & make sure tsq is setup   ****/
     /* ***   find the same subkey as on summary (& top of page)****/
     /* ***   setup detail data lines for this page             ****/
     /* *** note: same key checks prevent last pfkey = blank    ****/
     /* ************************************************************/
    SLWREC.SLWLASPF = "6";
    SL0FSW2(); /* <=== match summary's subkey*/
    if (SLWREC.SLWERRSW == "Y")
      SL0FST2(); /* <=== reset screen (empty)*/
      return;
    end
    if (SLWREC.SLWLASRL == "10")
      SL0FSP2(); /* <=== setup left det scrn*/
    else
      SL0FSR2(); /* <=== setup right det scrn*/
    end
    return;
  end

   /* ************************************************************/
   /* *** data present & changed: edit individual fields      ****/
   /* ************************************************************/

  SL0FSC2(); /* <=== field edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* ************************************************************/
   /* *** no errors: check relational field edits             ****/
   /* ************************************************************/

  SL0FSD2(); /* <=== relational edits*/

  if (SLWREC.SLWERRSW == "Y")
    SL0FSF2(); /* <=== save current key value(s)*/
    SL0FST2(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: make one time table accesses             ****/
   /* ************************************************************/

  SL0FSE2(); /* <=== obtain table data*/

  if (SLWREC.SLWERRSW == "Y")
    SL0FSF2(); /* <=== save current key value(s)*/
    SL0FST2(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: save key value(s) & last pfkey as PF6    ****/
   /* ************************************************************/

  SL0FSF2(); /* <=== save current key value(s)*/

  SLWREC.SLWLASPF = "6";

   /* ************************************************************/
   /* *** data present & changed: purge tsq(s)                ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq(s)*/

  if (SLWREC.SLWERRSW == "Y")
    SL0FST2(); /* <=== reset screen (empty)*/
    return;
  end

   /* ************************************************************/
   /* *** no errors: setup detail tsq and first page          ****/
   /* ************************************************************/

  SLWREC.SLWIDX01 = 1;
  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    SL0FM210.XMSLMSEL[SLWIDX01] = " ";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

  SL0FSS2();

  if (SLWREC.SLWERRSW == "Y")
    SL0FST2(); /* <=== reset screen (empty)*/
    return;
  end

  SL0FS2D(); /* obtain 1st detail record*/

   /* ************************************************************/
   /* *** setup det scrn depending on last right/left pfkey   ****/
   /* ************************************************************/

  if (SLWREC.SLWLASRL == "10")
    SL0FSP2(); /* <=== setup left det scrn*/
  else
    SL0FSR2(); /* <=== setup right det scrn*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSI2

// PF7 processing
Function SL0FSJ1()


   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: IN0XWSKS=N; if fields changed (keys different)****/
   /* ************************************************************/

  SL0FSA1(); /* <=== check for missing data*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0FSB1(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "N")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SJ1A";
    SLWREC.SLWMSGNO = 0006; /* <--- changes not allowed msg*/
    return;
  end

   /* ************************************************************/
   /* *** decrement the last relative record number           ****/
   /* *** and setup the new page depending on last PFkey      ****/
   /* *** note: last pfkey used can not be blank at this point****/
   /* ************************************************************/

  if (SLWREC.SLWLASPF == "E")
    if (SLWREC.SLWSUMIX == 1)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SJ1B";
      SLWREC.SLWMSGNO = 0007; /* <--- top of data*/
      return;
    else
      SLWREC.SLWSUMIX = SLWREC.SLWSUMIX - 1;
      TA5REC.TA5TSQIX = SLWREC.SLWSUMIX;
      TA5REC.TA5APPID = SLWREC.SLWSUMQU;
      TA5REC.TA5FNCCD = "R";
      call "TA0050" (SL0FWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
      if (TA5REC.TA5RTNCD != 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SJ1C";
        SLWREC.SLWMSGNO = 0001;
        return;
      end
    end
    if (SLWREC.SLWLASRL == "10")
      SL0FSO1(); /* <=== setup left sum scrn*/
    else
      SL0FSQ1(); /* <=== setup right sum scrn*/
    end
  else
    if (SLWREC.SLWDETIX == 1)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SJ1D";
      SLWREC.SLWMSGNO = 0007; /* <--- top of data*/
      return;
    else
      SLWREC.SLWDETIX = SLWREC.SLWDETIX - 1;
      TA5REC.TA5TSQIX = SLWREC.SLWDETIX;
      TA5REC.TA5APPID = SLWREC.SLWDETQU;
      TA5REC.TA5FNCCD = "R";
      call "TA0050" (SL0FWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
      if (TA5REC.TA5RTNCD != 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SJ1E";
        SLWREC.SLWMSGNO = 0001;
        return;
      end
      if (SLWREC.SLWLASRL == "10")
        SL0FSP1(); /* <=== setup left det scrn*/
      else
        SL0FSR1(); /* <=== setup right det scrn*/
      end
    end
  end

  if (SLWREC.SLWERRSW == "N")
    SLWREC.XXXLOCID = "SJ1F";
    SLWREC.SLWMSGNO = 0014;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0FSJ1

// PF7 processing
Function SL0FSJ2()


   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* ************************************************************/

  SL0FSA2(); /* <=== check for missing data*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0FSB2(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "N")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SJ2A";
    SLWREC.SLWMSGNO = 0006; /* <--- changes not allowed msg*/
    return;
  end

   /* ************************************************************/
   /* *** decrement the last relative record number           ****/
   /* *** and setup the new page depending on last PFkey      ****/
   /* *** note: last pfkey used can not be blank at this point****/
   /* ************************************************************/

  if (SLWREC.SLWLASPF == "E")
    if (SLWREC.SLWSUMIX == 1)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SJ2B";
      SLWREC.SLWMSGNO = 0007; /* <--- top of data*/
      return;
    else
      SLWREC.SLWSUMIX = SLWREC.SLWSUMIX - 1;
      TA5REC.TA5TSQIX = SLWREC.SLWSUMIX;
      TA5REC.TA5APPID = SLWREC.SLWSUMQU;
      TA5REC.TA5FNCCD = "R";
      call "TA0050" (SL0FWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
      if (TA5REC.TA5RTNCD != 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SJ2C";
        SLWREC.SLWMSGNO = 0001;
        return;
      end
    end
    if (SLWREC.SLWLASRL == "10")
      SL0FSO2(); /* <=== setup left sum scrn*/
    else
      SL0FSQ2(); /* <=== setup right sum scrn*/
    end
  else
    if (SLWREC.SLWDETIX == 1)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SJ2D";
      SLWREC.SLWMSGNO = 0007; /* <--- top of data*/
      return;
    else
      SLWREC.SLWDETIX = SLWREC.SLWDETIX - 1;
      TA5REC.TA5TSQIX = SLWREC.SLWDETIX;
      TA5REC.TA5APPID = SLWREC.SLWDETQU;
      TA5REC.TA5FNCCD = "R";
      call "TA0050" (SL0FWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
      if (TA5REC.TA5RTNCD != 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SJ2E";
        SLWREC.SLWMSGNO = 0001;
        return;
      end
      if (SLWREC.SLWLASRL == "10")
        SL0FSP2(); /* <=== setup left det scrn*/
      else
        SL0FSR2(); /* <=== setup right det scrn*/
      end
    end
  end

  if (SLWREC.SLWERRSW == "N")
    SLWREC.XXXLOCID = "SJ2F";
    SLWREC.SLWMSGNO = 0014;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0FSJ2

// PF7 processing
Function SL0FSJ4()


   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: IN0XWSKS=N; if fields changed (keys different)****/
   /* ************************************************************/

  SL0FSA4(); /* <=== missing input check*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0FSB4(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "N")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SJ4A";
    SLWREC.SLWMSGNO = 0006; /* <--- changes not allowed msg*/
    return;
  end

   /* ************************************************************/
   /* *** decrement the last relative record number           ****/
   /* *** and setup the new page depending on last PFkey      ****/
   /* *** note: last pfkey used can not be blank at this point****/
   /* ************************************************************/

  if (SLWREC.SLWDETIX == 1)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SJ4D";
    SLWREC.SLWMSGNO = 0007; /* <--- top of data*/
  else
    SLWREC.SLWDETIX = SLWREC.SLWDETIX - 1;
    TA5REC.TA5TSQIX = SLWREC.SLWDETIX;
    TA5REC.TA5APPID = SLWREC.SLWDETQU;
    TA5REC.TA5FNCCD = "R";
    call "TA0050" (SL0FWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
    if (TA5REC.TA5RTNCD != 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SJ4E";
      SLWREC.SLWMSGNO = 0001;
      return;
    end
    SL0FSO4(); /* <=== setup left det scrn*/
  end

  if (SLWREC.SLWERRSW == "N")
    SLWREC.XXXLOCID = "SJ4F";
    SLWREC.SLWMSGNO = 0014;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0FSJ4

// PF8 processing
Function SL0FSK1()


   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: IN0XWSKS=N; if fields changed (keys different)****/
   /* ************************************************************/

  SL0FSA1(); /* <=== check for missing data*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0FSB1(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "N")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SK1A";
    SLWREC.SLWMSGNO = 0006; /* <--- changes not allowed msg*/
    return;
  end

   /* ************************************************************/
   /* *** decrement the last relative record number           ****/
   /* *** and setup the new page depending on last PFkey      ****/
   /* *** note: last pfkey used can not be blank at this point****/
   /* ************************************************************/

  if (SLWREC.SLWLASPF == "E")
    if (SLWREC.SLWSUMIX == SLWREC.SLWSMAXR)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SK1B";
      SLWREC.SLWMSGNO = 0008; /* <--- bot of data*/
      return;
    else
      SLWREC.SLWSUMIX = SLWREC.SLWSUMIX + 1;
      TA5REC.TA5TSQIX = SLWREC.SLWSUMIX;
      TA5REC.TA5APPID = SLWREC.SLWSUMQU;
      TA5REC.TA5FNCCD = "R";
      call "TA0050" (SL0FWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
      if (TA5REC.TA5RTNCD != 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SK1C";
        SLWREC.SLWMSGNO = 0001;
        return;
      end
    end
    if (SLWREC.SLWLASRL == "10")
      SL0FSO1(); /* <=== setup left sum scrn*/
    else
      SL0FSQ1(); /* <=== setup right sum scrn*/
    end
  else
    if (SLWREC.SLWDETIX == SLWDMAXR)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SK1D";
      SLWREC.SLWMSGNO = 0008; /* <--- bot of data*/
      return;
    else
      SLWREC.SLWDETIX = SLWREC.SLWDETIX + 1;
      TA5REC.TA5TSQIX = SLWREC.SLWDETIX;
      TA5REC.TA5APPID = SLWREC.SLWDETQU;
      TA5REC.TA5FNCCD = "R";
      call "TA0050" (SL0FWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
      if (TA5REC.TA5RTNCD != 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SK1E";
        SLWREC.SLWMSGNO = 0001;
        return;
      end
      if (SLWREC.SLWLASRL == "10")
        SL0FSP1(); /* <=== setup left det scrn*/
      else
        SL0FSR1(); /* <=== setup right det scrn*/
      end
    end
  end

  if (SLWREC.SLWERRSW == "N")
    SLWREC.XXXLOCID = "SK1F";
    SLWREC.SLWMSGNO = 0013;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0FSK1

// PF8 processing
Function SL0FSK2()


   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: IN0XWSKS=N; if fields changed (keys different)****/
   /* ************************************************************/

  SL0FSA2(); /* <=== check for missing data*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0FSB2(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "N")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SK2A";
    SLWREC.SLWMSGNO = 0006; /* <--- changes not allowed msg*/
    return;
  end

   /* ************************************************************/
   /* *** decrement the last relative record number           ****/
   /* *** and setup the new page depending on last PFkey      ****/
   /* *** note: last pfkey used can not be blank at this point****/
   /* ************************************************************/

  if (SLWREC.SLWLASPF == "E")
    if (SLWREC.SLWSUMIX == SLWREC.SLWSMAXR)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SK2B";
      SLWREC.SLWMSGNO = 0008; /* <--- bot of data*/
      return;
    else
      SLWREC.SLWSUMIX = SLWREC.SLWSUMIX + 1;
      TA5REC.TA5TSQIX = SLWREC.SLWSUMIX;
      TA5REC.TA5APPID = SLWREC.SLWSUMQU;
      TA5REC.TA5FNCCD = "R";
      call "TA0050" (SL0FWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
      if (TA5REC.TA5RTNCD != 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SK2C";
        SLWREC.SLWMSGNO = 0001;
        return;
      end
    end
    if (SLWREC.SLWLASRL == "10")
      SL0FSO2(); /* <=== setup left sum scrn*/
    else
      SL0FSQ2(); /* <=== setup right sum scrn*/
    end
  else
    if (SLWREC.SLWDETIX == SLWDMAXR)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SK2D";
      SLWREC.SLWMSGNO = 0008; /* <--- bot of data*/
      return;
    else
      SLWREC.SLWDETIX = SLWREC.SLWDETIX + 1;
      TA5REC.TA5TSQIX = SLWREC.SLWDETIX;
      TA5REC.TA5APPID = SLWREC.SLWDETQU;
      TA5REC.TA5FNCCD = "R";
      call "TA0050" (SL0FWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
      if (TA5REC.TA5RTNCD != 0)
        SLWREC.SLWERRSW = "Y";
        SLWREC.XXXLOCID = "SK2E";
        SLWREC.SLWMSGNO = 0001;
        return;
      end
      if (SLWREC.SLWLASRL == "10")
        SL0FSP2(); /* <=== setup left det scrn*/
      else
        SL0FSR2(); /* <=== setup right det scrn*/
      end
    end
  end

  if (SLWREC.SLWERRSW == "N")
    SLWREC.XXXLOCID = "SK2F";
    SLWREC.SLWMSGNO = 0013;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSK2

// PF8 processing
Function SL0FSK4()


   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: IN0XWSKS=N; if fields changed (keys different)****/
   /* ************************************************************/

  SL0FSA4(); /* <=== check for missing data*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0FSB4(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "N")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SK4A";
    SLWREC.SLWMSGNO = 0006; /* <--- changes not allowed msg*/
    return;
  end

   /* ************************************************************/
   /* *** decrement the last relative record number           ****/
   /* *** and setup the new page depending on last PFkey      ****/
   /* *** note: last pfkey used can not be blank at this point****/
   /* ************************************************************/

  if (SLWREC.SLWDETIX == SLWDMAXR)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SK4D";
    SLWREC.SLWMSGNO = 0008; /* <--- bot of data*/
    return;
  else
    SLWREC.SLWDETIX = SLWREC.SLWDETIX + 1;
    TA5REC.TA5TSQIX = SLWREC.SLWDETIX;
    TA5REC.TA5APPID = SLWREC.SLWDETQU;
    TA5REC.TA5FNCCD = "R";
    call "TA0050" (SL0FWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
    if (TA5REC.TA5RTNCD != 0)
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SK4E";
      SLWREC.SLWMSGNO = 0001;
      return;
    end
    SL0FSO4(); /* <=== setup left det scrn*/
  end

  if (SLWREC.SLWERRSW == "N")
    SLWREC.XXXLOCID = "SK4F";
    SLWREC.SLWMSGNO = 0013;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/



end // end SL0FSK4

// PF10 processing
Function SL0FSL1()


   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: IN0XWSKS=N; if fields changed (keys different)****/
   /* ************************************************************/

  SL0FSA1(); /* <=== same key edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0FSB1(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "N")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SL1A";
    SLWREC.SLWMSGNO = 0006; /* <--- changes not allowed msg*/
    return;
  end

   /* ************************************************************/
   /* *** setup the last right left pfkey value               ****/
   /* ************************************************************/

  SLWREC.SLWLASRL = "10";

   /* ************************************************************/
   /* *** setup the new page depending on last PFkey          ****/
   /* *** note: last pfkey used can not be blank at this point****/
   /* ************************************************************/

  if (SLWREC.SLWLASPF == "E")
    SL0FSO1(); /* <=== setup left sum scrn*/
  else
    SL0FSP1(); /* <=== setup left det scrn*/
  end

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SLWREC.XXXLOCID = "SL1B";
  SLWREC.SLWMSGNO = 0016; /* <--- page left msg*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSL1

// PF10 processing
Function SL0FSL2()


   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: IN0XWSKS=N; if fields changed (keys different)****/
   /* ************************************************************/

  SL0FSA2();

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0FSB2(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "N")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SL2A";
    SLWREC.SLWMSGNO = 0006; /* <--- changes not allowed msg*/
    return;
  end

   /* ************************************************************/
   /* *** setup the last right left pfkey value               ****/
   /* ************************************************************/

  SLWREC.SLWLASRL = "10";

   /* ************************************************************/
   /* *** setup the new page depending on last PFkey          ****/
   /* *** note: last pfkey used can not be blank at this point****/
   /* ************************************************************/

  if (SLWREC.SLWLASPF == "E")
    SL0FSO2(); /* <=== setup left sum scrn*/
  else
    SL0FSP2(); /* <=== setup left det scrn*/
  end

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SLWREC.XXXLOCID = "SL2B";
  SLWREC.SLWMSGNO = 0016; /* <--- page left msg*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSL2

// PF11 processing
Function SL0FSM1()


   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: IN0XWSKS=N; if fields changed (keys different)****/
   /* ************************************************************/

  SL0FSA1(); /* <=== same key edits*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0FSB1(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "N")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SM1A";
    SLWREC.SLWMSGNO = 0006; /* <--- changes not allowed msg*/
    return;
  end

   /* ************************************************************/
   /* *** setup the last right left pfkey value               ****/
   /* ************************************************************/

  SLWREC.SLWLASRL = "11";

   /* ************************************************************/
   /* *** setup the new page depending on last PFkey          ****/
   /* *** note: last pfkey used can not be blank at this point****/
   /* ************************************************************/

  if (SLWREC.SLWLASPF == "E")
    SL0FSQ1(); /* <=== setup left sum scrn*/
  else
    SL0FSR1(); /* <=== setup left det scrn*/
  end

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SLWREC.XXXLOCID = "SM1B";
  SLWREC.SLWMSGNO = 0015; /* <--- page left msg*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/



end // end SL0FSM1

// PF11 processing
Function SL0FSM2()


   /* ************************************************************/
   /* *** key changes NOT allowed during scrolling            ****/
   /* *** note: IN0XWSKS=N; if fields changed (keys different)****/
   /* ************************************************************/

  SL0FSA2();

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SL0FSB2(); /* <=== same key edits*/

  if (SLWREC.SLWSKYSW == "N")
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SM2A";
    SLWREC.SLWMSGNO = 0002; /* <--- changes not allowed msg*/
    return;
  end

   /* ************************************************************/
   /* *** setup the last right left pfkey value               ****/
   /* ************************************************************/

  SLWREC.SLWLASRL = "11";

   /* ************************************************************/
   /* *** setup the new page depending on last PFkey          ****/
   /* *** note: last pfkey used can not be blank at this point****/
   /* ************************************************************/

  if (SLWREC.SLWLASPF == "E")
    SL0FSQ2(); /* <=== setup right sum scrn*/
  else
    SL0FSR2(); /* <=== setup right det scrn*/
  end

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

  SLWREC.XXXLOCID = "SM2B";
  SLWREC.SLWMSGNO = 0015; /* <--- page right msg*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSM2

// setup blank screen
Function SL0FSN1()


   /* ************************************************************/
   /* *** display a blank screen by:                          ****/
   /* *** displaying the left sum title  and                  ****/
   /* *** displaying a blank line                             ****/
   /* *** until the page is full                              ****/
   /* ************************************************************/

  SL0F125(); /* <=== disp top left title*/

  SL0F126(); /* <=== disp bot left title*/

  SLWREC.SLWIDX01 = 1; /* 1st line should start on 3rd line*/

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    SL0F129(); /* <=== disp blank line*/
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSN1

// setup blank screen
Function SL0FSN2()


   /* ************************************************************/
   /* *** display a blank screen by:                          ****/
   /* *** displaying the left sum title  and                  ****/
   /* *** displaying a blank line                             ****/
   /* *** until the page is full                              ****/
   /* ************************************************************/

  SL0F225(); /* <=== disp top left title*/

  SL0F226(); /* <=== disp bot left title*/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    SL0F229(); /* <=== disp blank line*/
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSN2

// setup blank screen
Function SL0FSN4()


   /* ************************************************************/
   /* *** display a blank screen by:                          ****/
   /* *** displaying the left sum title  and                  ****/
   /* *** displaying a blank line                             ****/
   /* *** until the page is full                              ****/
   /* ************************************************************/

  SL0F425(); /* <=== disp top sum/det title*/

  SL0F426(); /* <=== disp bot sum/det title*/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    SL0F429(); /* <=== disp blank line*/
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSN4

// setup left sum scrn
Function SL0FSO1()


   /* ************************************************************/
   /* *** setup the left side of the summary data screen by:  ****/
   /* *** displaying the left summary title  and              ****/
   /* *** performing the display of the left summary line     ****/
   /* *** until the page is full                              ****/
   /* ************************************************************/

  SL0F125(); /* <=== disp top left title*/

  SL0F126(); /* <=== disp bot left title*/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    if (SL0FWS0.SL0FWRTY[SLWIDX01] == "S")
      set SL0FM110.XMSLMSEL[SLWIDX01] initialAttributes;
      /* *** format summary line ****/
      SL0FWB1.SL0FWSM1 = SL0FWS0.SL0FWDTA[SLWIDX01];
      SL0F121(); /* <=== disp left sum line*/
    else
      set SL0FM110.XMSLMSEL[SLWIDX01] skip, invisible;
      SL0F129(); /* <=== disp blank line*/
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if error: display the cleared screen                ****/
   /* ************************************************************/

  if (SLWREC.SLWERRSW == "Y")
    SL0FST1(); /* <=== reset screen (empty)*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0FSO1

// setup left sum scrn
Function SL0FSO2()


   /* ************************************************************/
   /* *** setup the left side of the summary data screen by:  ****/
   /* *** displaying the left summary title  and              ****/
   /* *** performing the display of the left summary line     ****/
   /* *** until the page is full                              ****/
   /* ************************************************************/

  SL0F225(); /* <=== disp left sum title*/

  SL0F226(); /* <=== disp left sum title*/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    if (SL0FWS0.SL0FWRTY[SLWIDX01] == "S")
      set SL0FM210.XMSLMSEL[SLWIDX01] initialAttributes;
      /* *** format summary line ****/
      SL0FWB2.SL0FWSM2 = SL0FWS0.SL0FWDTA[SLWIDX01];
      SL0F221(); /* <=== disp left sum line*/
    else
      set SL0FM210.XMSLMSEL[SLWIDX01] skip, invisible;
      SL0F229(); /* <=== disp blank line*/
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if error: display the cleared screen                ****/
   /* ************************************************************/

  if (SLWREC.SLWERRSW == "Y")
    SL0FST2(); /* <=== reset screen (empty)*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0FSO2

// setup screen for display
Function SL0FSO4()


   /* ************************************************************/
   /* *** setup the left side of the summary data screen by:  ****/
   /* *** displaying the left summary title  and              ****/
   /* *** performing the display of the left summary line     ****/
   /* *** until the page is full                              ****/
   /* ************************************************************/

  SL0F425(); /* <=== disp left sum title*/

  SL0F426(); /* <=== disp left sum title*/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    if (SL0FWD0.SL0FWRTY[SLWIDX01] == "D")
      /* *** format detail line ****/
      SL0FWB4.SL0FWDT4 = SL0FWD0.SL0FWDTA[SLWIDX01];
      SL0F421(); /* <=== disp left sum line*/
    else
      SL0F429(); /* <=== disp blank line*/
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if error: display the cleared screen                ****/
   /* ************************************************************/

  if (SLWREC.SLWERRSW == "Y")
    SL0FST4(); /* <=== reset screen (empty)*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end SL0FSO4

// setup left det scrn
Function SL0FSP1()


   /* ************************************************************/
   /* *** setup the left side of the detail data screen by:   ****/
   /* *** displaying the left detail title  and               ****/
   /* *** performing the display of the left detail line      ****/
   /* *** until the page is full                              ****/
   /* *** note: the left summary display will be used each    ****/
   /* ***       time a summary line type is detected          ****/
   /* ************************************************************/

  SL0F125(); /* <=== disp top left title*/

  SL0F126(); /* <=== disp bot left title*/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    if (SL0FWD0.SL0FWRTY[SLWIDX01] == "S")
      set SL0FM110.XMSLMSEL[SLWIDX01] initialAttributes;
      SL0FWB1.SL0FWSM1 = SL0FWD0.SL0FWDTA[SLWIDX01];
      SL0F121(); /* <=== disp left sum line*/
    else
      if (SL0FWD0.SL0FWRTY[SLWIDX01] == "P")
        set SL0FM110.XMSLMSEL[SLWIDX01] skip, invisible;
        SL0FWB1.SL0FWSY1 = SL0FWD0.SL0FWDTA[SLWIDX01];
        SL0F12A(); /* <=== disp 1st prod line*/
      else
        if (SL0FWD0.SL0FWRTY[SLWIDX01] == "Q")
          set SL0FM110.XMSLMSEL[SLWIDX01] skip, invisible;
          SL0FWB1.SL0FWQA1 = SL0FWD0.SL0FWDTA[SLWIDX01];
          SL0F12B(); /* <=== disp 1st prod line*/
        else
          if (SL0FWD0.SL0FWRTY[SLWIDX01] == "Z")
            set SL0FM110.XMSLMSEL[SLWIDX01] skip, invisible;
            SL0F12C(); /* <=== disp size,qty title line*/
          else
            if (SL0FWD0.SL0FWRTY[SLWIDX01] == "D")
              set SL0FM110.XMSLMSEL[SLWIDX01] skip, invisible;
              SL0FWL1.SL0FWLN1 = SL0FWD0.SL0FWDTA[SLWIDX01];
              SL0F122(); /* <=== disp left det line*/
            else
              if (SL0FWD0.SL0FWRTY[SLWIDX01] == "B")
                set SL0FM110.XMSLMSEL[SLWIDX01] skip, invisible;
                SL0F129(); /* <=== disp blank line*/
              else
                SLWREC.SLWERRSW = "Y";
                SLWREC.XXXLOCID = "SP1A";
                SLWREC.SLWMSGNO = 0001;
              end
            end
          end
        end
      end
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if error: display the cleared screen                ****/
   /* ************************************************************/

  if (SLWREC.SLWERRSW == "Y")
    SL0FST1(); /* <=== reset screen (empty)*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSP1

// setup left det scrn
Function SL0FSP2()


   /* ************************************************************/
   /* *** setup the left side of the detail data screen by:   ****/
   /* *** displaying the left detail title  and               ****/
   /* *** performing the display of the left detail line      ****/
   /* *** until the page is full                              ****/
   /* *** note: the left summary display will be used each    ****/
   /* ***       time a summary line type is detected          ****/
   /* ************************************************************/

  SL0F225(); /* <=== disp top left title*/

  SL0F226(); /* <=== disp bot left title*/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    if (SL0FWD0.SL0FWRTY[SLWIDX01] == "S")
      set SL0FM210.XMSLMSEL[SLWIDX01] initialAttributes;
      SL0FWB2.SL0FWSM2 = SL0FWD0.SL0FWDTA[SLWIDX01];
      SL0F221(); /* <=== disp left sum line*/
    else
      if (SL0FWD0.SL0FWRTY[SLWIDX01] == "Z")
        set SL0FM210.XMSLMSEL[SLWIDX01] skip, invisible;
        SL0F22C(); /* <=== disp size,qty title line*/
      else
        if (SL0FWD0.SL0FWRTY[SLWIDX01] == "D")
          set SL0FM210.XMSLMSEL[SLWIDX01] skip, invisible;
          SL0FWL2.SL0FWLN2 = SL0FWD0.SL0FWDTA[SLWIDX01];
          SL0F222(); /* <=== disp left det line*/
        else
          if (SL0FWD0.SL0FWRTY[SLWIDX01] == "B")
            set SL0FM210.XMSLMSEL[SLWIDX01] skip, invisible;
            SL0F229(); /* <=== disp blank line*/
          else
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SP2A";
            SLWREC.SLWMSGNO = 0001;
          end
        end
      end
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if error: display the cleared screen                ****/
   /* ************************************************************/

  if (SLWREC.SLWERRSW == "Y")
    SL0FST2(); /* <=== reset screen (empty)*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0FSP2

// setup right sum scrn
Function SL0FSQ1()


   /* ************************************************************/
   /* *** setup the right side of the summary data screen by: ****/
   /* *** displaying the right summary title  and             ****/
   /* *** performing the display of the right summary line    ****/
   /* *** until the page is full                              ****/
   /* ************************************************************/

  SL0F127(); /* <=== disp top right title*/

  SL0F128(); /* <=== disp bottom rt title*/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    if (SL0FWS0.SL0FWRTY[SLWIDX01] == "S")
      set SL0FM110.XMSLMSEL[SLWIDX01] initialAttributes;
      /* *** format summary line ****/
      SL0FWB1.SL0FWSM1 = SL0FWS0.SL0FWDTA[SLWIDX01];
      SL0F123(); /* <=== disp left sum line*/
    else
      set SL0FM110.XMSLMSEL[SLWIDX01] skip, invisible;
      SL0F129(); /* <=== disp blank line*/
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if error: display the cleared screen                ****/
   /* ************************************************************/

  if (SLWREC.SLWERRSW == "Y")
    SL0FST1(); /* <=== reset screen (empty)*/
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSQ1

// setup right sum scrn
Function SL0FSQ2()


   /* ************************************************************/
   /* *** setup the right side of the summary data screen by: ****/
   /* *** displaying the right summary title  and             ****/
   /* *** performing the display of the right summary line    ****/
   /* *** until the page is full                              ****/
   /* ************************************************************/

  SL0F227(); /* <=== disp top sum title*/

  SL0F228(); /* <=== disp bot sum title*/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    if (SL0FWS0.SL0FWRTY[SLWIDX01] == "S")
      set SL0FM210.XMSLMSEL[SLWIDX01] initialAttributes;
      /* *** format summary line ****/
      SL0FWB2.SL0FWSM2 = SL0FWS0.SL0FWDTA[SLWIDX01];
      SL0F223(); /* <=== disp left sum line*/
    else
      set SL0FM210.XMSLMSEL[SLWIDX01] skip, invisible;
      SL0F229(); /* <=== disp blank line*/
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if error: display the cleared screen                ****/
   /* ************************************************************/

  if (SLWREC.SLWERRSW == "Y")
    SL0FST2(); /* <=== reset screen (empty)*/
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0FSQ2

// setup right det scrn
Function SL0FSR1()


   /* ************************************************************/
   /* *** setup the right side of the detail data screen by:  ****/
   /* *** displaying the right detail title  and              ****/
   /* *** performing the display of the right detail line     ****/
   /* *** until the page is full                              ****/
   /* *** note: the right summary display will be used each   ****/
   /* ***       time a summary line type is detected          ****/
   /* ************************************************************/

  SL0F127(); /* <=== disp top rt title*/

  SL0F128(); /* <=== disp bot rt title*/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    if (SL0FWD0.SL0FWRTY[SLWIDX01] == "S")
      set SL0FM110.XMSLMSEL[SLWIDX01] initialAttributes;
      SL0FWB1.SL0FWSM1 = SL0FWD0.SL0FWDTA[SLWIDX01];
      SL0F123(); /* <=== disp right sum line*/
    else
      if (SL0FWD0.SL0FWRTY[SLWIDX01] == "P")
        set SL0FM110.XMSLMSEL[SLWIDX01] skip, invisible;
        SL0FWB1.SL0FWSY1 = SL0FWD0.SL0FWDTA[SLWIDX01];
        SL0F12A(); /* <=== disp 1st prod line*/
      else
        if (SL0FWD0.SL0FWRTY[SLWIDX01] == "Q")
          set SL0FM110.XMSLMSEL[SLWIDX01] skip, invisible;
          SL0FWB1.SL0FWQA1 = SL0FWD0.SL0FWDTA[SLWIDX01];
          SL0F12B(); /* <=== disp 1st prod line*/
        else
          if (SL0FWD0.SL0FWRTY[SLWIDX01] == "Z")
            set SL0FM110.XMSLMSEL[SLWIDX01] skip, invisible;
            SL0F12C(); /* <=== size,qty titles*/
          else
            if (SL0FWD0.SL0FWRTY[SLWIDX01] == "D")
              set SL0FM110.XMSLMSEL[SLWIDX01] skip, invisible;
              SL0FWL1.SL0FWLN1 = SL0FWD0.SL0FWDTA[SLWIDX01];
              SL0F122(); /* <=== disp left det line*/
            else
              if (SL0FWD0.SL0FWRTY[SLWIDX01] == "B")
                set SL0FM110.XMSLMSEL[SLWIDX01] skip, invisible;
                SL0F129(); /* <=== disp blank line*/
              else
                SLWREC.SLWERRSW = "Y";
                SLWREC.XXXLOCID = "SR1A";
                SLWREC.SLWMSGNO = 0001;
                return;
              end
            end
          end
        end
      end
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if error: display the cleared screen                ****/
   /* ************************************************************/

  if (SLWREC.SLWERRSW == "Y")
    SL0FST1(); /* <=== reset screen (empty)*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSR1

// setup right det scrn
Function SL0FSR2()


   /* ************************************************************/
   /* *** setup the right side of the detail data screen by:  ****/
   /* *** displaying the right detail title  and              ****/
   /* *** performing the display of the right detail line     ****/
   /* *** until the page is full                              ****/
   /* *** note: the right summary display will be used each   ****/
   /* ***       time a summary line type is detected          ****/
   /* ************************************************************/

  SL0F227(); /* <=== disp top left title*/

  SL0F228(); /* <=== disp bot left title*/

  SLWREC.SLWIDX01 = 1;

  while (SLWREC.SLWIDX01 <= SLWREC.SLWLINPP)
    if (SL0FWD0.SL0FWRTY[SLWIDX01] == "S")
      set SL0FM210.XMSLMSEL[SLWIDX01] initialAttributes;
      SL0FWB2.SL0FWSM2 = SL0FWD0.SL0FWDTA[SLWIDX01];
      SL0F223(); /* <=== disp right sum line*/
    else
      if (SL0FWD0.SL0FWRTY[SLWIDX01] == "Z")
        set SL0FM210.XMSLMSEL[SLWIDX01] skip, invisible;
        SL0F22C(); /* <=== size,qty titles*/
      else
        if (SL0FWD0.SL0FWRTY[SLWIDX01] == "D")
          set SL0FM210.XMSLMSEL[SLWIDX01] skip, invisible;
          SL0FWL2.SL0FWLN2 = SL0FWD0.SL0FWDTA[SLWIDX01];
          SL0F222(); /* <=== disp det line*/
        else
          if (SL0FWD0.SL0FWRTY[SLWIDX01] == "B")
            set SL0FM210.XMSLMSEL[SLWIDX01] skip, invisible;
            SL0F229(); /* <=== disp blank line*/
          else
            SLWREC.SLWERRSW = "Y";
            SLWREC.XXXLOCID = "SR2A";
            SLWREC.SLWMSGNO = 0001;
            return;
          end
        end
      end
    end
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 + 1;
  end

   /* ************************************************************/
   /* *** if error: display the cleared screen                ****/
   /* ************************************************************/

  if (SLWREC.SLWERRSW == "Y")
    SL0FST2(); /* <=== reset screen (empty)*/
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0FSR2

// setup sum tsq
Function SL0FSS1()


   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0FSS1 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* *** initialize fields ****/

  SLWREC.SLWIDX01 = 0; /* records in buffer area*/
  SLWREC.SLWIDX02 = 1; /* detail area index*/
  SLWREC.SLWIDX03 = 1; /* sizes on work line index*/
  SLWREC.SLWIDX05 = 1; /* step thru buffer*/
  SLWREC.SLWIDX04 = SLWREC.SLWLINPP; /* remaining lines*/
  SL0FW01.SL0FWRSW = "N"; /* no records found indicator*/
  SL0FW01.SL0FWACC = 0; /* initialize accumulator*/
  SL0FW01.SL0FWDPA = 1;
                                   /* initialize detail page count*/
  SL0FW01.SL0FWSPA = 1; /* initialize summary count*/
  SL0FW01.SL0FWROW = 1; /* initialize row number*/

  SL0FS1B(); /* <=== process w.o. hdr recs*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end


  if (SQLCA.VAGen_SQLCODE == +100)
    if (SL0FW01.SL0FWRSW == "N")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SS1A";
      SLWREC.SLWMSGNO = 0083; /* not on db msg*/
      set SL0FM110.XARCD cursor, bold;
      set SL0FM110.SL4ZONE bold;
      set SL0FM110.SL5LOCTN bold;
      return;
    else

      SL0FS1O(); /* <=== put last sum group to tsq*/

      SL0FS1P(); /* <=== put last dtl group to tsq*/

      if (SLWREC.SLWERRSW == "Y")
        return;
      end
    end
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSS1

// setup sum tsq
Function SL0FSS2()


   /* ************************************************************/
   /* *** setup application specific ta1rec fields in case    ****/
   /* *** TA0020 is used for a severe DB error in this sgrp   ****/
   /* ************************************************************/

  TA1REC.TA1LOCAT[2] = "SL0FSS2 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  SL0FS2J(); /* <=== obtain size data*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end

   /* *** initialize fields ****/

  SLWREC.SLWIDX01 = 0; /* records in buffer area*/
  SLWREC.SLWIDX02 = 1; /* detail area index*/
  SLWREC.SLWIDX03 = 1; /* sizes on work line index*/
  SLWREC.SLWIDX05 = 1; /* step thru buffer*/
  SLWREC.SLWIDX04 = SLWREC.SLWLINPP; /* remaining lines*/
  SL0FW02.SL0FWRSW = "N"; /* no records found indicator*/
  SL0FW02.SL0FWACC = 0; /* initialize accumulator*/
  SL0FW02.SL0FWDPA = 1;
                                   /* initialize detail page count*/
  SL0FW02.SL0FWSPA = 1; /* initialize summary count*/
  SL0FW02.SL0FWROW = 1; /* initialize row number*/

  SL0FS2B(); /* <=== process live/memorex hdrs*/

  if (SLWREC.SLWERRSW == "Y")
    return;
  end


  if (SL0FM210.YWSCD == "01") /* active w.o.*/
    if (SL0FW02.SL0FWRSW == "N") /* no records found*/
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SS2D";
      SLWREC.SLWMSGNO = 0044; /* not on db msg*/
      set SL0FM210.XGPCD cursor, bold;
      set SL0FM210.SY1STNBR bold;
      return;
    end
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    if (SL0FW02.SL0FWRSW == "N")
      SLWREC.SLWERRSW = "Y";
      SLWREC.XXXLOCID = "SS2E";
      SLWREC.SLWMSGNO = 0044; /* not on db msg*/
      set SL0FM210.XGPCD cursor, bold;
      set SL0FM210.SY1STNBR bold;
      return;
    else

      SL0FS2O(); /* <=== put last sum group to tsq*/

      SL0FS2P(); /* <=== put last dtl group to tsq*/

      if (SLWREC.SLWERRSW == "Y")
        return;
      end
    end
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/



end // end SL0FSS2

// setup sum tsq
Function SL0FSS4()


  TA1REC.TA1LOCAT[2] = "SL0FSS4 ";
  TA1REC.TA1MAP = SLWREC.SLWTAMAP;

  SL0FW04.SL0FWRSW = "N"; /* initialize records switch*/

   /* *** obtain work order header record ****/

  set SL8REC empty;

  SL8REC.XWHCD = SL0FM410.XWHCD;
  SL8REC.SL8WOGRP = SL0FM410.SL8WOGRP;

  XSSL8S5(); /* select set of w.o. hdr recs*/

  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SS4A";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 0)
      SL0FW04.SL0FWRSW = "Y";
    else
      if (SQLCA.VAGen_SQLCODE != +100)
        SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
        SLWREC.XXXLOCID = "SS4B";
        SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
        SL0FST4(); /* <=== clear scrn (empty)*/
        return;
      end
    end
  end

   /* *** initialize fields for loop processing ****/

  SLWREC.SLWIDX01 = 0; /* buffer area index*/
  SLWREC.SLWIDX02 = 1; /* detail area index*/
  SLWREC.SLWIDX04 = SLWREC.SLWLINPP; /* remaining lines*/


  if (SL0FW04.SL0FWRSW == "Y")
    /* *** process each work order header record and build tsqs ****/

    while (SQLCA.VAGen_SQLCODE == +0)

      SL0FS4F(); /* format detail in buffer area*/

      XSSL8F5(); /* select next record*/

      if (SLWREC.SLWERRSW == "Y")
        return;
      end
    end
  end

   /* *** obtain work order history header record ****/

  set SLBREC empty;

  SLBREC.XWHCD = SL0FM410.XWHCD;
  SLBREC.SL8WOGRP = SL0FM410.SL8WOGRP;

  XSSLBS5(); /* select set of w.o. hdr recs*/

  if (SQLCA.VAGen_SQLCODE == -911) /* <=== for any initial db access*/
    SLWREC.SLWSKYSW = "N";
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SS4C";
    SLWREC.SLWMSGNO = 0031; /* <--- try again msg*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 0)
      SL0FW04.SL0FWRSW = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == +100)
        if (SL0FW04.SL0FWRSW == "N")
          SLWREC.SLWERRSW = "Y";
                                   /* <=== for all other neg. sql codes*/
          SLWREC.XXXLOCID = "SS4D";
          SLWREC.SLWMSGNO = 0123; /* <--- no w.o. group data*/
          set SL0FM410.SL8WOGRP cursor, bold;
          return;
        else
          SL0FS4H();
          SL0FW04.SL0FWRSW = "N";
          return;
        end
      else
        SLWREC.SLWERRSW = "Y"; /* <=== for all other neg. sql codes*/
        SLWREC.XXXLOCID = "SS4E";
        SLWREC.SLWMSGNO = 0001; /* <--- severe error msg*/
        SL0FST4(); /* <=== clear scrn (empty)*/
        SL0FSG4();
        return;
      end
    end
  end

  if (SL0FW04.SL0FWRSW == "Y")
    /* *** process each work order header record and build tsqs ****/

    while (SQLCA.VAGen_SQLCODE == +0)

      SL0FS4D(); /* format detail in buffer area*/

      XSSLBF5(); /* select next record*/

      if (SLWREC.SLWERRSW == "Y")
        return;
      end

    end

    if (SQLCA.VAGen_SQLCODE == +100)

      SL0FS4H(); /* last group detail processing*/
      if (SLWREC.SLWERRSW == "Y")
        return;
      end
    end
  end


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end SL0FSS4

// reset screen (empty)
Function SL0FST1()


   /* ************************************************************/
   /* *** "empty" map =  fld values only                      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0FM110 empty; /* resets entire screen*/

  SL0FSG1(); /* <=== setup map key fields*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0FM110.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0FM110.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0FM110.XXXTITLE = SLWREC.XXXTITLE;
  SL0FM110.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

   /* SET SL0FW01 empty               ; appl. working storage area*/

   /* ************************************************************/
   /* *** purge any existing storage in case of 'left overs'  ****/
   /* *** note: not found is acceptable return code           ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq(s)*/

   /* ************************************************************/
   /* *** setup the floating map lines for a blank map        ****/
   /* ************************************************************/

  SL0FSN1(); /* <=== setup blank screen*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FST1

// reset screen (empty)
Function SL0FST2()


   /* ************************************************************/
   /* *** "empty" map =  fld values only                      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0FM210 empty; /* resets entire screen*/

  SL0FSG2(); /* <=== setup map key fields*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0FM210.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0FM210.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0FM210.XXXTITLE = SLWREC.XXXTITLE;
  SL0FM210.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set SL0FW02 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** purge any existing storage in case of 'left overs'  ****/
   /* *** note: not found is acceptable return code           ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq(s)*/

   /* ************************************************************/
   /* *** setup the floating map lines for a blank map        ****/
   /* ************************************************************/

  SL0FSN2(); /* <=== setup blank screen*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FST2

// reset screen
Function SL0FST3()


   /* ************************************************************/
   /* *** "empty" map =  fld values only                      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0FM310 empty; /* resets entire screen*/

  SL0FSG3(); /* <=== setup map key fields*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0FM310.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0FM310.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0FM310.XXXTITLE = SLWREC.XXXTITLE;
  SL0FM310.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set SL0FW03 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FST3

// reset screen (empty)
Function SL0FST4()


   /* ************************************************************/
   /* *** "empty" map =  fld values only                      ****/
   /* *** setup map fields using the last ws values           ****/
   /* *** before (re-)initializing the appl. ws area          ****/
   /* ************************************************************/

  converseLib.clearScreen();
  set SL0FM410 empty; /* resets entire screen*/

  SL0FSG4(); /* <=== setup map key fields*/

   /* ************************************************************/
   /* *** initialize std map fields                           ****/
   /* ************************************************************/

  SL0FM410.XXXMAPNM = SLWREC.XXXMAPNM;
  SL0FM410.XXXRVNBR = SLWREC.XXXRVNBR;
  SL0FM410.XXXTITLE = SLWREC.XXXTITLE;
  SL0FM410.XXXCURDT = X2CREC.X2CCURSD;

   /* ************************************************************/
   /* *** initialize application working storage & switches   ****/
   /* ************************************************************/

  set SL0FW04 empty; /* appl. working storage area*/

   /* ************************************************************/
   /* *** purge any existing storage in case of 'left overs'  ****/
   /* *** note: not found is acceptable return code           ****/
   /* ************************************************************/

  XSSLSPQ(); /* <=== purge tsq(s)*/

   /* ************************************************************/
   /* *** setup the floating map lines for a blank map        ****/
   /* ************************************************************/

  SL0FSN4(); /* <=== setup blank screen*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FST4

// match det's subkey
Function SL0FSU1()


   /* *******************************************************/
   /* *** obtain summary page number from page number on ****/
   /* *** detail record and then perform call to get the ****/
   /* *** summary record.                                ****/
   /* *******************************************************/

  SLWREC.SLWIDX01 = SLWREC.SLWLINPP;
  SL0FW01.SL0FWSE1 = 1;

   /* *** if selection was made on screen use it,else ****/
   /* *** use first summary line on detail page.      ****/

  while (SLWIDX01 >= 1)
    if (SL0FM110.XMSLMSEL[SLWIDX01] != " ")
      SL0FW01.SL0FWSE1 = SLWREC.SLWIDX01;
    end
    SL0FM110.XMSLMSEL[SLWIDX01] = " ";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end

  TA5REC.TA5TSQIX = SL0FWD0.SL0FWSPG[SL0FWSE1];
  TA5REC.TA5APPID = SLWREC.SLWSUMQU;
  TA5REC.TA5FNCCD = "R";

  call "TA0050" (SL0FWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SU1A";
    SLWREC.SLWMSGNO = 0001;
    return;
  end

  SLWREC.SLWSUMIX = TA5REC.TA5TSQIX;


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSU1

// match det's subkey
Function SL0FSU2()


   /* *******************************************************/
   /* *** obtain summary page number from page number on ****/
   /* *** detail record and then perform call to get the ****/
   /* *** summary record.                                ****/
   /* *******************************************************/

  SLWREC.SLWIDX01 = SLWREC.SLWLINPP;
  SL0FW02.SL0FWSE2 = 1;

   /* *** if selection was made on screen use it,else ****/
   /* *** use first summary line on detail page.      ****/

  while (SLWIDX01 >= 1)
    if (SL0FM210.XMSLMSEL[SLWIDX01] != " ")
      SL0FW02.SL0FWSE2 = SLWREC.SLWIDX01;
    end
    SL0FM210.XMSLMSEL[SLWIDX01] = " ";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end

  TA5REC.TA5TSQIX = SL0FWD0.SL0FWSPG[SL0FWSE2];
  TA5REC.TA5APPID = SLWREC.SLWSUMQU;
  TA5REC.TA5FNCCD = "R";

  call "TA0050" (SL0FWS0, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SU2A";
    SLWREC.SLWMSGNO = 0001;
    return;
  end

  SLWREC.SLWSUMIX = TA5REC.TA5TSQIX;


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/



end // end SL0FSU2

// match sum's subkey
Function SL0FSW1()


   /* ********************************************************/
   /* *** obtain detail page number from page number on   ****/
   /* *** summary record and then perform call to get the ****/
   /* *** detail record.                                  ****/
   /* ********************************************************/

  SLWREC.SLWIDX01 = SLWREC.SLWLINPP;
  SL0FW01.SL0FWSE1 = 1;

   /* *** if selection was made on screen use it,else ****/
   /* *** use first summary line on summary page.     ****/

  while (SLWIDX01 >= 1)
    if (SL0FM110.XMSLMSEL[SLWIDX01] != " ")
      SL0FW01.SL0FWSE1 = SLWREC.SLWIDX01;
    end
    SL0FM110.XMSLMSEL[SLWIDX01] = " ";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end

  if (SL0FWS0.SL0FWDPG[SL0FWSE1] == 0)
    SLWREC.SLWMSGNO = 0005;
    SLWREC.SLWERRSW = "Y";
    return; /* no data to retrieve*/
  end
  TA5REC.TA5TSQIX = SL0FWS0.SL0FWDPG[SL0FWSE1];
  TA5REC.TA5APPID = SLWREC.SLWDETQU;
  TA5REC.TA5FNCCD = "R";

  call "TA0050" (SL0FWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SW1A";
    SLWREC.SLWMSGNO = 0001;
    return;
  end

  SLWREC.SLWDETIX = TA5REC.TA5TSQIX;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSW1

// match sum's subkey
Function SL0FSW2()


   /* ********************************************************/
   /* *** obtain detail page number from page number on   ****/
   /* *** summary record and then perform call to get the ****/
   /* *** detail record.                                  ****/
   /* ********************************************************/

  SLWREC.SLWIDX01 = SLWREC.SLWLINPP;
  SL0FW02.SL0FWSE2 = 1;

   /* *** if selection was made on screen use it,else ****/
   /* *** use first summary line on summary page.     ****/

  while (SLWIDX01 >= 1)
    if (SL0FM210.XMSLMSEL[SLWIDX01] != " ")
      SL0FW02.SL0FWSE2 = SLWREC.SLWIDX01;
    end
    SL0FM210.XMSLMSEL[SLWIDX01] = " ";
    SLWREC.SLWIDX01 = SLWREC.SLWIDX01 - 1;
  end

  TA5REC.TA5TSQIX = SL0FWS0.SL0FWDPG[SL0FWSE2];
  TA5REC.TA5APPID = SLWREC.SLWDETQU;
  TA5REC.TA5FNCCD = "R";

  call "TA0050" (SL0FWD0, TA5REC) {isNoRefresh = yes, isExternal = yes};
  if (TA5REC.TA5RTNCD != 0)
    SLWREC.SLWERRSW = "Y";
    SLWREC.XXXLOCID = "SW2A";
    SLWREC.SLWMSGNO = 0001;
    return;
  end

  SLWREC.SLWDETIX = TA5REC.TA5TSQIX;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/



end // end SL0FSW2

// CAITEM  processing
Function SL0FSY0()


   /* ************************************************************/
   /* *** if entered, use CAITEM data by first moving it to   ****/
   /* *** a ws field to make use of it with "redefines"       ****/
   /* *** note: CAITEM = character data as passed             ****/
   /* ************************************************************/

  SLWREC.CAITEM = COMMAREA.CAITEM;

  if (SLWREC.SLWCASNO > " ")
    SL0FM010.XMSLMSNO = SLWREC.SLWCASNO;
  end

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end SL0FSY0

// 'c4' close for w.o. hdr rec
Function XSSL8C4()



   /* ************************************************************/
   /* *** close select set of:  w.o. 'l' hdr                  ****/
   /* *** using the std module:  IO1510                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "C4";

  call "IO1510" (SLVREC, SQLCA, SL8REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSL8C4 ";
  TA1REC.TA1LOCAT[1] = "IO1510  ";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VWOLHD01";
  TA1REC.TA1TBLKE = SL8REC.SL8KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSL8C4

// 'f4' fetch for w.o. hdr rec
Function XSSL8F4()



   /* ************************************************************/
   /* *** fetch next row from:  w.o. 'l' hdr                  ****/
   /* *** using the std module:  IO1510                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ***       but w/these io mods the sgrp will close       ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "N4";

  call "IO1510" (SLVREC, SQLCA, SL8REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    XSSL8C4(); /* <=== std close cursor*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSL8F4 ";
  TA1REC.TA1LOCAT[1] = "IO1510  ";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VWOLHD01";
  TA1REC.TA1TBLKE = SL8REC.SL8KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSL8F4

// 's4' scan for w.o. live db
Function XSSL8S4()



   /* ************************************************************/
   /* *** select set of rows from:  w.o. 'l' hdr              ****/
   /* *** using the std module:  IO1510                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique field values for:            ****/
   /* ***   xwhcd                                             ****/
   /* ***   xgpcd                                             ****/
   /* ***   sy1stnbr                                          ****/
   /* ***   sy2clrid                                          ****/
   /* ***   xdmcd                                             ****/
   /* ***   xqacd                                             ****/
   /* ***   xsdcd                                             ****/
   /* ***   xslcd                                             ****/
   /* ***   xpgcd                                             ****/
   /* ***   xumcd                                             ****/
   /* ***   xowcd                                             ****/
   /* *** the following may be used with a wild card (*):     ****/
   /* ***   ywscd                                             ****/
   /* ***   ywtcd                                             ****/
   /* *** the following must have a range passed:             ****/
   /* ***   zzzsdt                                            ****/
   /* *** the order by for this select set is:                ****/
   /* ***   wonbr                                             ****/
   /* ***                                                     ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "S4";

  call "IO1510" (SLVREC, SQLCA, SL8REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "XSSL8S4 ";
    TA1REC.TA1LOCAT[1] = "IO1510  ";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VWOLHD01";
    TA1REC.TA1TBLKE = SL8REC.SL8KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* *** note: fetch handles return code correctly           ****/
   /* ************************************************************/

  XSSL8F4(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSL8S4

// 'c4' close for w.o. hdr record
Function XSSLBC4()



   /* ************************************************************/
   /* *** close select set of:  w.o. 'm' hdr                  ****/
   /* *** using the std module:  IO1530                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "C4";

  call "IO1530" (SLVREC, SQLCA, SLBREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSLBC4 ";
  TA1REC.TA1LOCAT[1] = "IO1530  ";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VWOMHD01";
  TA1REC.TA1TBLKE = SLBREC.SLBKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSLBC4

// 'n4' fetch for w.o. hdr record
Function XSSLBF4()



   /* ************************************************************/
   /* *** fetch next row from:  w.o. 'm' hdr                  ****/
   /* *** using the std module:  IO1530                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ***       but w/these io mods the sgrp will close       ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "N4";

  call "IO1530" (SLVREC, SQLCA, SLBREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    XSSLBC4(); /* <=== std close cursor*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSLBF4 ";
  TA1REC.TA1LOCAT[1] = "IO1530  ";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VWOMHD01";
  TA1REC.TA1TBLKE = SLBREC.SLBKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSLBF4

// 's4' select for wo memorex db
Function XSSLBS4()



   /* ************************************************************/
   /* *** select set of rows from:  w.o. 'm' hdr              ****/
   /* *** using the std module:  IO1530                       ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique field values for:            ****/
   /* ***   xwhcd                                             ****/
   /* ***   xgpcd                                             ****/
   /* ***   sy1stnbr                                          ****/
   /* ***   sy2clrid                                          ****/
   /* ***   xdmcd                                             ****/
   /* ***   xqacd                                             ****/
   /* ***   xsdcd                                             ****/
   /* ***   xsacd                                             ****/
   /* ***   xslcd                                             ****/
   /* ***   xpgcd                                             ****/
   /* ***   xumcd                                             ****/
   /* ***   xowcd                                             ****/
   /* *** the following may be used with a wild card (*):     ****/
   /* ***   ywscd                                             ****/
   /* ***   ywtcd                                             ****/
   /* *** the following must have a range passed:             ****/
   /* ***   zzzsdt                                            ****/
   /* *** the order by for this select set is:                ****/
   /* ***   wonbr                                             ****/
   /* ***                                                     ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "S4";

  call "IO1530" (SLVREC, SQLCA, SLBREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "XSSLBS4 ";
    TA1REC.TA1LOCAT[1] = "IO1530  ";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VWOMHD01";
    TA1REC.TA1TBLKE = SLBREC.SLBKEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* *** note: fetch handles return code correctly           ****/
   /* ************************************************************/

  XSSLBF4(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/
end // end XSSLBS4

// inquiry : w.o. 'm' hdr : 0
Function XSSLS-S-VWOMHD02()


   /* ************************************************************/
   /* *** select unique row from:  w.o. 'm' hdr               ****/
   /* *** using the std module:  VWOMHD02                     ****/
   /* *** note: use slvrec to pass function & date ranges     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -811 = duplicates found                           ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* ************************************************************/

  SLVREC.SLVFNC = "S ";

  call "VWOMHD02" (SLVREC, SQLCA, VWOMHD02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "VWMHD02S";
  TA1REC.TA1LOCAT[1] = "VWOMHD02";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VWOMHD02";
  TA1REC.TA1TBLKE = VWOMHD02.WOMHD02-KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSLS-S-VWOMHD02

// close : union of w.o. hdrs :1
Function XSSLUC1()



   /* ************************************************************/
   /* *** close select set of:  union of work order headers   ****/
   /* *** using the std module:  db1420                       ****/
   /* *** note: use sldrec to pass func/whse/loc/date range   ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   -501 = cursor already closed = return 0           ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** close select set (if prior to EOF)                  ****/
   /* ************************************************************/

  SLDREC.SLDFNC = "C1";

  call "DB1420" (SLDREC, SQLCA, SL8REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -501)
    SQLCA.VAGen_SQLCODE = 0;
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSLUC1 ";
  TA1REC.TA1LOCAT[1] = "DB1420  ";
  TA1REC.TA1LOCAT[3] = "CLOSE   ";
  TA1REC.TA1LOCAT[4] = "SETINQ  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VWOLHD01";
  TA1REC.TA1TBLKE = SL8REC.SL8KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSLUC1

// fetch : union of w.o. hdrs :1
Function XSSLUF1()



   /* ************************************************************/
   /* *** fetch next row from:  union of work order headers   ****/
   /* *** using the std module:  db1420                       ****/
   /* *** note: use sldrec to pass func/whse/loc/date range   ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = EOF (first +100 = not fnd, was detected as ****/
   /* ***          part of the select set w/first fetch)      ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** scan/retrieve/fetch next row                        ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* ***       but w/these io mods the sgrp will close       ****/
   /* ************************************************************/

  SLDREC.SLDFNC = "N1";

  call "DB1420" (SLDREC, SQLCA, SL8REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    move SL8REC to SL8REC withV60Compat;
    move SLDREC to SLDREC withV60Compat;

    XSSLUC1(); /* <=== std close cursor*/
    if (SQLCA.VAGen_SQLCODE == 0)
      SQLCA.VAGen_SQLCODE = +100;
    end
    return;
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1FUNC = "RETN";
  TA1REC.TA1PGMNM = "XSSLUF1 ";
  TA1REC.TA1LOCAT[1] = "DB1420  ";
  TA1REC.TA1LOCAT[3] = "FETCH   ";
  TA1REC.TA1LOCAT[4] = "NEXT    ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VWOLHD01";
  TA1REC.TA1TBLKE = SL8REC.SL8KEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSLUF1

// setinq : union of w.o. hdrs :1
Function XSSLUS1()


   /* ************************************************************/
   /* *** select set of rows from:  union of w.o. hdrs        ****/
   /* *** using the std module:  db1420                       ****/
   /* *** note: use sldrec to pass func/whse/loc/date range   ****/
   /* *** note: the 1st fetch will be in the record layout    ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = none fnd on 1st fetch                      ****/
   /* ***          (+100 = EOF detected in fetch next only)   ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select set with unique field values for:            ****/
   /* ***   xwhcd                                             ****/
   /* ***   xarcd                                             ****/
   /* ***   sl4zone                                           ****/
   /* ***   sl5loctn                                          ****/
   /* *** the following may be used with a wild card (*):     ****/
   /* ***   ywtcd                                             ****/
   /* ***   xxxstat                                           ****/
   /* *** the following must have a range passed:             ****/
   /* ***   zzzsdt                                            ****/
   /* *** the order by for this select set is:                ****/
   /* ***   slwonbr                                           ****/
   /* ************************************************************/

  SLDREC.SLDFNC = "S1";

  call "DB1420" (SLDREC, SQLCA, SL8REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE < 0)
    if (SQLCA.VAGen_SQLCODE == -911)
      TA1REC.TA1FUNC = "POST";
    else
      TA1REC.TA1FUNC = "RETN";
    end
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1PGMNM = "XSSLUS1 ";
    TA1REC.TA1LOCAT[1] = "DB1420  ";
    TA1REC.TA1LOCAT[3] = "SELECT  ";
    TA1REC.TA1LOCAT[4] = "SET     ";
    TA1REC.TA1DBASE = "DSTLOC  ";
    TA1REC.TA1TBLVU = "VWOLHD01";
    TA1REC.TA1TBLKE = SL8REC.SL8KEY;
    move SQLCA to ERRSQLCA withV60Compat;
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    return;
  end

   /* ************************************************************/
   /* *** scan/retrieve/fetch first row                       ****/
   /* *** in order to detect not found (+100)                 ****/
   /* *** note: CSP closes cursor at end of set (+100)        ****/
   /* *** note: any loop processing must use this first row   ****/
   /* ***       and fetch the next row at the end of the loop ****/
   /* *** note: fetch handles return code correctly           ****/
   /* ************************************************************/

  XSSLUF1(); /* <=== fetch first row*/

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end XSSLUS1

//*** RECORD=SL0FW01 ****
// ************************************************************
// 
//           STOCK LOCATE INQUIRY SKELETON
//           =============================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used specifically
//           by an application/function.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-87  Ward Jones   created
// 06-22-89  Ernie Smith  added fields for 'omit type' option
//                          and switches for new sort
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0FW01 type basicRecord
  10 XWHCD XWHCD ; 
  10 XWHABRV XWHABRV ; 
  10 SL0FWFDT SL0FWFDT ; 
  10 SL0FWTDT SL0FWTDT ; 
  10 YWSCD YWSCD ; 
  10 YWSABRV YWSABRV ; 
  10 XARCD XARCD ; 
  10 SL4ZONE SL4ZONE ; 
  10 SL5LOCTN SL5LOCTN ; 
  10 YWTCD YWTCD ; 
  10 YWTABRV YWTABRV ; 
  10 SL0FWOTP SL0FWOTP ; 
  10 SL0FWTAB SL0FWTAB ; 
  10 SL0FWTSW SL0FWTSW ; 
  10 SL0FWEOW SL0FWEOW ; 
  10 SL0FWRCR SL0FWRCR ; 
  10 SL0FWDPA SL0FWDPA ; 
  10 SL0FWSPA SL0FWSPA ; 
  10 SL0FWRSW SL0FWRSW ; 
  10 SL0FWSE1 SL0FWSE1 ; 
  10 SL0FWSZ1 SL0FWSZ1 ; 
  10 SL0FWACC SL0FWACC ; 
  10 SL0FWROW SL0FWROW ; 
  10 SL0FWLSW SL0FWLSW ; 
  10 SL0FWPD SL0FWPD ; 
    15 SL0FWPD1 SL0FWPD1 ; 
    15 SL0FWPD2 SL0FWPD2 ; 
  10 SL0FWPG SL0FWPG ; 
    15 SL0FWPG1 SL0FWPG1 ; 
    15 SL0FWPG2 SL0FWPG2 ; 
  10 SL0FWPE SL0FWPE ; 
    15 SL0FWPE1 SL0FWPE1 ; 
    15 SL0FWPE2 SL0FWPE2 ; 
    15 SL0FWPE3 SL0FWPE3 ; 
end // end SL0FW01

//*** RECORD=SL0FW02 ****
// ************************************************************
// 
//           STOCK LOCATE INQUIRY SKELETON
//           =============================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used specifically
//           by an application/function.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-87  Ward Jones   created
// 06-22-89  Ernie Smith  added fields for 'omit type' option
//                          and switches for new sorts
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0FW02 type basicRecord
  10 XWHCD XWHCD ; 
  10 XWHABRV XWHABRV ; 
  10 XWHSABRV XWHSABRV ; 
  10 SL0FWFDT SL0FWFDT ; 
  10 SL0FWTDT SL0FWTDT ; 
  10 YWSCD YWSCD ; 
  10 YWTCD YWTCD ; 
  10 SL0FWOTP SL0FWOTP ; 
  10 XGPCD XGPCD ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY1SSTNM SY1SSTNM ; 
  10 SY2CLRID SY2CLRID ; 
  10 SY2CLRAB SY2CLRAB ; 
  10 XDMCD XDMCD ; 
  10 XQACD XQACD ; 
  10 PC2INSEG PC2INSEG ; 
  10 XEGCD XEGCD ; 
  10 XSLCD XSLCD ; 
  10 XPGCD XPGCD ; 
  10 XUMCD XUMCD ; 
  10 XOWCD XOWCD ; 
  10 SL0FWDPA SL0FWDPA ; 
  10 SL0FWSPA SL0FWSPA ; 
  10 SL0FWRSW SL0FWRSW ; 
  10 SL0FWRCR SL0FWRCR ; 
  10 SL0FWSSW SL0FWSSW ; 
  10 SL0FWLKY SL0FWLKY ; 
  10 SL0FWMKY SL0FWMKY ; 
  10 SL0FWSE2 SL0FWSE2 ; 
  10 SL0FWSZ2 SL0FWSZ2 ; 
  10 SL0FWACC SL0FWACC ; 
  10 SL0FWROW SL0FWROW ; 
  10 SL0FWEOL SL0FWEOL ; 
  10 SL0FWEOM SL0FWEOM ; 
  10 SL0FWPD SL0FWPD ; 
    15 SL0FWPD1 SL0FWPD1 ; 
    15 SL0FWPD2 SL0FWPD2 ; 
  10 SL0FWPG SL0FWPG ; 
    15 SL0FWPG1 SL0FWPG1 ; 
    15 SL0FWPG2 SL0FWPG2 ; 
  10 SL0FWPE SL0FWPE ; 
    15 SL0FWPE1 SL0FWPE1 ; 
    15 SL0FWPE2 SL0FWPE2 ; 
    15 SL0FWPE3 SL0FWPE3 ; 
end // end SL0FW02

//*** RECORD=SL0FW03 ****
// ************************************************************
// 
//           STOCK LOCATE INQUIRY SKELETON
//           =============================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used specifically
//           by an application/function.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-87  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0FW03 type basicRecord
  10 XWHCD XWHCD ; 
  10 XWHABRV XWHABRV ; 
  10 SL8WONBR SL8WONBR ; 
  10 SL0FWACC SL0FWACC ; 
  10 SL0FWSZ3 SL0FWSZ3 ; 
  10 SL0FWRSW SL0FWRSW ; 
  10 SL0FWPD SL0FWPD ; 
    15 SL0FWPD1 SL0FWPD1 ; 
    15 SL0FWPD2 SL0FWPD2 ; 
  10 SL0FWPG SL0FWPG ; 
    15 SL0FWPG1 SL0FWPG1 ; 
    15 SL0FWPG2 SL0FWPG2 ; 
  10 SL0FWPF SL0FWPF ; 
    15 SL0FWPF1 SL0FWPF1 ; 
    15 SL0FWPF2 SL0FWPF2 ; 
    15 SL0FWPF3 SL0FWPF3 ; 
    15 SL0FWPF4 SL0FWPF4 ; 
end // end SL0FW03

//*** RECORD=SL0FW04 ****
// ************************************************************
// 
//           STOCK LOCATE INQUIRY SKELETON
//           =============================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are used specifically
//           by an application/function.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-26-87  Ward Jones   created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record SL0FW04 type basicRecord
  10 XWHCD XWHCD ; 
  10 XWHABRV XWHABRV ; 
  10 SL8WOGRP SL8WOGRP ; 
  10 SL0FWPNB SL0FWPNB ; 
  10 SL0FWRSW SL0FWRSW ; 
end // end SL0FW04

Record SL0FWB1 type basicRecord
  10 SL0FWSM1 SL0FWSM1 ; 
    15 SL0FWROW SL0FWROW ; 
    15 YWSCD YWSCD ; 
    15 YWTCD YWTCD ; 
    15 SL8WONBR SL8WONBR ; 
    15 SL2PALET SL2PALET ; 
    15 SL2CASE SL2CASE ; 
    15 SL8WOGRP SL8WOGRP ; 
    15 SL8FRAR SL8FRAR ; 
    15 SL8FRZN SL8FRZN ; 
    15 SL8FRLC SL8FRLC ; 
    15 SL8TOAR SL8TOAR ; 
    15 SL8TOZN SL8TOZN ; 
    15 SL8TOLC SL8TOLC ; 
    15 SL0FWSDT SL0FWSDT ; 
    15 SL0FWPIN SL0FWPIN ; 
    15 SL0FWCON SL0FWCON ; 
    15 SL0FWPNB SL0FWPNB ; 
    15 SL8DRVR SL8DRVR ; 
    15 SL0FWCDT SL0FWCDT ; 
    15 PK2SCHNO PK2SCHNO ; 
    15 SL8CRTBY SL8CRTBY ; 
  10 SL0FWSY1 SL0FWSY1 ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
    15 SY1SSTNM SY1SSTNM ; 
    15 SY2CLRAB SY2CLRAB ; 
  10 SL0FWQA1 SL0FWQA1 ; 
    15 XQACD XQACD ; 
    15 PC2INSEG PC2INSEG ; 
    15 XEGCD XEGCD ; 
    15 XSLCD XSLCD ; 
    15 XPGCD XPGCD ; 
    15 XUMCD XUMCD ; 
    15 XOWCD XOWCD ; 
    15 SY1UNPCS SY1UNPCS ; 
  10 SL0FWDT1 SL0FWDT1 [10] ; 
end // end SL0FWB1

Record SL0FWB2 type basicRecord
  10 SL0FWSM2 SL0FWSM2 ; 
    15 SL0FWROW SL0FWROW ; 
    15 YWSCD YWSCD ; 
    15 YWTCD YWTCD ; 
    15 SL8WONBR SL8WONBR ; 
    15 SL2PALET SL2PALET ; 
    15 SL2CASE SL2CASE ; 
    15 SL8WOGRP SL8WOGRP ; 
    15 SY1UNPCS SY1UNPCS ; 
    15 SL8FRAR SL8FRAR ; 
    15 SL8FRZN SL8FRZN ; 
    15 SL8FRLC SL8FRLC ; 
    15 SL8TOAR SL8TOAR ; 
    15 SL8TOZN SL8TOZN ; 
    15 SL8TOLC SL8TOLC ; 
    15 SL0FWSDT SL0FWSDT ; 
    15 SL0FWPIN SL0FWPIN ; 
    15 SL0FWCON SL0FWCON ; 
    15 SL0FWPNB SL0FWPNB ; 
    15 SL8DRVR SL8DRVR ; 
    15 SL0FWCDT SL0FWCDT ; 
    15 PK2SCHNO PK2SCHNO ; 
    15 SL8CRTBY SL8CRTBY ; 
  10 SL0FWDT2 SL0FWDT2 [10] ; 
end // end SL0FWB2

Record SL0FWB4 type basicRecord
  10 SL0FWDT4 SL0FWDT4 ; 
    15 YWSCD YWSCD ; 
    15 YWTCD YWTCD ; 
    15 SL8WONBR SL8WONBR ; 
    15 SL2PALET SL2PALET ; 
    15 SL2CASE SL2CASE ; 
    15 SL0FWSDT SL0FWSDT ; 
    15 SL8FRAR SL8FRAR ; 
    15 SL8FRZN SL8FRZN ; 
    15 SL8FRLC SL8FRLC ; 
    15 SL8TOAR SL8TOAR ; 
    15 SL8TOZN SL8TOZN ; 
    15 SL8TOLC SL8TOLC ; 
    15 SL8CRTBY SL8CRTBY ; 
end // end SL0FWB4

Record SL0FWD0 type basicRecord
  10 SL0FWLTH SL0FWLTH ; 
  10 * char(168) [15] ; 
    15 SL0FWRTY SL0FWRTY ; 
    15 SL0FWSPG SL0FWSPG ; 
    15 SL0FWDTA SL0FWDTA ; 
end // end SL0FWD0

Record SL0FWL1 type basicRecord
  10 SL0FWLN1 SL0FWLN1 ; 
    15 SY4IDDSC SY4IDDSC [4] ; 
    15 SL9WOQTY SL9WOQTY [4] ; 
end // end SL0FWL1

Record SL0FWL2 type basicRecord
  10 SL0FWLN2 SL0FWLN2 ; 
    15 SY4IDDSC SY4IDDSC [4] ; 
    15 SL9WOQTY SL9WOQTY [4] ; 
end // end SL0FWL2

Record SL0FWS0 type basicRecord
  10 SL0FWLTH SL0FWLTH ; 
  10 * char(168) [15] ; 
    15 SL0FWRTY SL0FWRTY ; 
    15 SL0FWDPG SL0FWDPG ; 
    15 SL0FWDTA SL0FWDTA ; 
end // end SL0FWS0

//*** RECORD=SLDREC ****
// *************** stock locate IO module record **************
// 
// PURPOSE:             to pass the desired function and
//                      selection parameters to db1420
// 
// DB2 TABLE:           dstloc.vwoldr01 / dstloc.vwomdr01
// 
// COPYLIB MEMBER:      none
// 
// KEY TO DB2 TABLE:    none
// 
// NOTE:                passes: function code
//                              warehouse code
//                              area code
//                              zone code
//                              location code
//                              beginning date
//                              ending date
// 
// MAINTENANCE LOG:
// 
// DATE:      INIT:    COMMENTS:
// --------   -------  -------------------------------------
// 06-23-89   esmith   created csp record
// ************************************************************
// **********************
Record SLDREC type basicRecord
  10 SLDFNC SLDFNC ; 
  10 SLDXWH SLDXWH ; 
  10 SLDARC SLDARC ; 
  10 SLDZNC SLDZNC ; 
  10 SLDLOC SLDLOC ; 
  10 SLDSDT SLDSDT ; 
  10 SLDEDT SLDEDT ; 
end // end SLDREC

//*** RECORD=VWOMHD02 ****
// ****************  stock locate table  **********************
// 
// TABLE NAME:          work order history header
// 
// DB2 TABLE:           dstloc.vwomhd02
// 
// COPYLIB MEMBER:      vwomhd02
// 
// KEY TO DB2 TABLE:    xwhcd
//                      w.o. group number
//                      w.o. number
// 
// note: w.o. tables have the current/daily/likely/less records
//       in the 'w.o. hdr & itm' tables which will have the
//       view name with the "L" in each name
//       (the 'L' comes before the 'M')
//       re: these are the records concerned with the current
//           day vs the historical/audit/most/more records
//           which will have the view name with the "M" in it
//           (current records are moved to historical each
//            night if they have been completed or canceled)
// 
// MAINTENANCE LOG:
// 
// DATE      NAME       COMMENTS
// --------  ---------  ------------------------------------
// 02-27-02  ssethu     new record created
// ************************************************************
// ************************
Record VWOMHD02 type basicRecord
  5 WOMHD02-DATA WOMHD02-DATA ; 
    10 WOMHD02-KEY WOMHD02-KEY ; 
      15 XWHCD XWHCD ; 
      15 SL8WOGRP SL8WOGRP ; 
      15 SL8WONBR SL8WONBR ; 
    10 SWEPLLNB SWEPLLNB ; 
    10 TS3CNTNR TS3CNTNR ; 
    10 PC3PONBR PC3PONBR ; 
    10 PC-SAP-PO-NBR PC-SAP-PO-NBR ; 
    10 XGPCD XGPCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 XOWCD XOWCD ; 
    10 PC2INSEG PC2INSEG ; 
    10 XEGCD XEGCD ; 
    10 XPGCD XPGCD ; 
    10 XUMCD XUMCD ; 
    10 XBCCD XBCCD ; 
    10 XMCCD XMCCD ; 
    10 XSLCD XSLCD ; 
    10 SL8WOPY SL8WOPY ; 
    10 SL8WOPFL SL8WOPFL ; 
    10 YWTCD YWTCD ; 
    10 YWSCD YWSCD ; 
    10 SL-RCV-LOT-ID SL-RCV-LOT-ID ; 
    10 SL2PALET SL2PALET ; 
    10 SL2CASE SL2CASE ; 
    10 TSOCRTNB TSOCRTNB ; 
    10 SY1UNPCS SY1UNPCS ; 
    10 SL8FRAR SL8FRAR ; 
    10 SL8FRZN SL8FRZN ; 
    10 SL8FRLC SL8FRLC ; 
    10 SL8TOAR SL8TOAR ; 
    10 SL8TOZN SL8TOZN ; 
    10 SL8TOLC SL8TOLC ; 
    10 PK2SCHNO PK2SCHNO ; 
    10 SL8DRVR SL8DRVR ; 
    10 SL8ITMFL SL8ITMFL ; 
    10 SL8INSTR SL8INSTR ; 
    10 SL8CRTBY SL8CRTBY ; 
    10 SL8UPDBY SL8UPDBY ; 
    10 SL-SRT-ROW-NBR SL-SRT-ROW-NBR ; 
    10 SL-SRT-BIN-NBR SL-SRT-BIN-NBR ; 
    10 SL-SRT-LVL-NBR SL-SRT-LVL-NBR ; 
    10 SL-SRT-ZONE-CD SL-SRT-ZONE-CD ; 
    10 SL-SRT-LOC-NBR SL-SRT-LOC-NBR ; 
    10 SL-SRT-ROW-CD SL-SRT-ROW-CD ; 
    10 SWCLNENB SWCLNENB ; 
    10 SL-SPCL-LANE-NBR SL-SPCL-LANE-NBR ; 
    10 XHDCD XHDCD [5] ; 
    10 SL-WO-NBR-OF-LABL SL-WO-NBR-OF-LABL ; 
    10 SL-SCAN-SEQ-NBR SL-SCAN-SEQ-NBR ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end VWOMHD02

// work qty accumulator
DataItem SL0FWACC num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// completion date
DataItem SL0FWCDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// container
DataItem SL0FWCON char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// detail page
DataItem SL0FWDPA num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// detail page number
DataItem SL0FWDPG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// detail line
DataItem SL0FWDT1 char(36)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// detail line
DataItem SL0FWDT2 char(36)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// summary line data
DataItem SL0FWDT4 char(58)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// actual detail data
DataItem SL0FWDTA char(163)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of live hdrs
DataItem SL0FWEOL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of memorex hdrs
DataItem SL0FWEOM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end of work orders switch
DataItem SL0FWEOW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// from date
DataItem SL0FWFDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// sort key live
DataItem SL0FWLKY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// detail work line
DataItem SL0FWLN1 char(36)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// detail work line
DataItem SL0FWLN2 char(36)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// location not found switch
DataItem SL0FWLSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// data length
DataItem SL0FWLTH num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sort key memorex
DataItem SL0FWMKY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// omitted work order type code
DataItem SL0FWOTP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po date
DataItem SL0FWPD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// po date cc
DataItem SL0FWPD1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// po date yymmmm
DataItem SL0FWPD2 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// formated po id
DataItem SL0FWPE char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formated po id 1-6
DataItem SL0FWPE1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formated po id 7-9
DataItem SL0FWPE2 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formated po id 10-11
DataItem SL0FWPE3 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formated po id
DataItem SL0FWPF num(12)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// formated po id 1-6
DataItem SL0FWPF1 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// formated po id 7-9
DataItem SL0FWPF2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// formated po id 10
DataItem SL0FWPF3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// formated po id 11-12
DataItem SL0FWPF4 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// fcty code
DataItem SL0FWPG char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcty code 1-3
DataItem SL0FWPG1 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fcty code 4
DataItem SL0FWPG2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// po id or po number
DataItem SL0FWPIN char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// plan number
DataItem SL0FWPNB num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// 2nd product line
DataItem SL0FWQA1 char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// number of hdr recs read
DataItem SL0FWRCR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// row no.
DataItem SL0FWROW num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// any records switch
DataItem SL0FWRSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// record type
DataItem SL0FWRTY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// setup date
DataItem SL0FWSDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work selection field
DataItem SL0FWSE1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work selection field
DataItem SL0FWSE2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// summary line data
DataItem SL0FWSM1 char(116)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// summary line data
DataItem SL0FWSM2 char(118)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// summary page
DataItem SL0FWSPA num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// corresponding summary page
DataItem SL0FWSPG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sort switch: live or memorex
DataItem SL0FWSSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 1st product line
DataItem SL0FWSY1 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work size
DataItem SL0FWSZ1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work size
DataItem SL0FWSZ2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work size index
DataItem SL0FWSZ3 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// omitted type abbreviation
DataItem SL0FWTAB char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// to date
DataItem SL0FWTDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// work order table switch
DataItem SL0FWTSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// area code
DataItem SLDARC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end date (CCYYMMDD)
DataItem SLDEDT int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// IO module function
DataItem SLDFNC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// location code
DataItem SLDLOC char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// start date (CCYYMMDD)
DataItem SLDSDT int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// warehouse code
DataItem SLDXWH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// zone code
DataItem SLDZNC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem WOMHD02-DATA char(237)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem WOMHD02-KEY char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

