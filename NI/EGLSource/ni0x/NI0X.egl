package ni0x;

import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPNL002;
import corpcom3.XPNL005;
import corpcom3.XPXCT01;
import corpcom3.XPXX001;
import corpcom3.XPZCH01;
import corpcom3.XPZIT01;
import corpcom4.XSENTRY;
import corpcom4.XSNLS01;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XCTTBL;
import corpz3.ZCHTBL;
import corpz3.ZITTBL;
import ni.common.NIWREC;
import nl.common.*;
import ta.common.TA1REC;
import vv.common.VPRZIT01;

//*** PROGRAM=NI0X ****
// ************************************************************
// 
//          NI0X - nil PROFORMA/AGENT'S ORDER INCO TERMS TXT
//          ---------------------------------------------
// 
// This application allows the user to ADD/UPDATE MISC CHARGE
// FREIGHT TERMS TEXT AND AMOUNT AND THREE POP UP WINDOWS.
// can also be entered using a valid charge type.
// 
// Maintenance History:
//   Date   Who    Remarks
// -------- ------ --------------------------------------------
// 04-24-91 LNGO   Creation
// 07-25-91 LNGO   change ni0x125 to allow updates when pf12
//                 key is pushed.
// 10-14-92 jjudki Use expanded nlxrec.
// 02-23-98 TTHAN1 Y2KFIX - REGEN FOR NEW XX0XS01 CODE.
// *********************
Program NI0X type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "NL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  NI0XW01 NI0XW01; // record
  NIWREC NIWREC; // record
  NLXREC NLXREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  VPRZIT01 VPRZIT01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCTTBL {deleteAfterUse = yes}; // table
  use ZITTBL; // table
  use ZCHTBL {deleteAfterUse = yes}; // table
  use NI0XM.NI0XM100, // form
  NI0XM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    NI0X000: NI0X000();
    exit program;
  end // end main
end // end NI0X


// main flow
Function NI0X000()

   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   perform initialization, set application revision nbrs,**/
   /* *   then do main perform until done with application      **/
   /* *                                                         **/
   /* ************************************************************/

  NLXREC.NLXCPROC = "NI0X000";
  COMMAREA.CACURRAP = "NI0X";

  NI0X001(); /* initilize the application*/

  NLXREC.NLXEOAF = "N"; /* set end-of-application flag to 'no'*/

  while (NLXREC.NLXEOAF == "N") /* while not end-of-aplication*/
    NI0X050(); /* process the application screen(s)*/
  end

  COMMAREA.CACURRAP = "NL0A";
  XPNL002();
  exit program;
end // end NI0X000


// initialize application
Function NI0X001()


   /* -----------------------------------------------------------*/
         /* initialize the application working storage*/

   /* -----------------------------------------------------------*/


  NLXREC.NLXCPROC = "NI0X001";

  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen converse*/
  VGVar.handleHardIOErrors = 1; /* return control to appl if hard db2 error*/

  set NI0XW01 empty; /* clear working storage rec1*/
  set NIWREC empty; /* clear common working storage*/
  set NLXREC empty; /* clear 2nd common working storage*/
  set VPRZIT01 empty; /* clear PROFORMA text record*/
  set TA1REC empty;
  set SQLCA empty;
  set ERRSQLCA empty;

  XSENTRY(); /* appl entry security*/
  XSSEGTR(); /* set segmented transaction id*/

  NLXREC.NLXPF3 = "N"; /* pf3 confirm flag*/
  NLXREC.NLXPF4 = "N"; /* pf4 confirm flag*/
  NLXREC.NLXPF20 = "N"; /* pf20 confirm flag*/

  NI0XW01.NI0XWOFL = "N"; /* niTrec found flag*/
  NI0XW01.NI0XWUPT = "N"; /* nitrec update flag*/

  if (COMMAREA.CAFRMSYS != "NI")
    COMMAREA.CAUSERA = " ";
  end

  NIWREC.NIWGROUP = COMMAREA.CAUSERA;

  if (COMMAREA.CAITEM > 0)
    COMMAREA.CATOAP = "NI0U";
    XPNL002();
  else
    if (COMMAREA.CAFROMAP == "NI0S"
     || COMMAREA.CAFROMAP == "NI0T"
     || COMMAREA.CAFROMAP == "NI0U"
     || COMMAREA.CAFROMAP == "NI0V"
     || COMMAREA.CAFROMAP == "NI0W")
      if (NIWREC.NIQPROID > 0)
        /* next sentence*/
      else
        if (NIWREC.NIWADDFL == "Y")
          COMMAREA.CATOAP = "NI0S";
          XPNL002();
        else
          COMMAREA.CATOAP = "NI0T";
          XPNL002();
        end
      end
    else
      COMMAREA.CATOAP = "NI0T";
      XPNL002();
    end
  end

  NLXREC.NLXCSCRN = "NI0XM100"; /* set first screen to display*/
  NLXREC.NLXSNAME[1] = "NI0XM100"; /* move map name to array*/

end // end NI0X001


// map control display
Function NI0X050()

   /* ************************************************************/
   /* *   control process the application screen(s)             **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/

  NLXREC.NLXCPROC = "NI0X050"; /* set current process name*/

  sysVar.arrayIndex = 0;
  NLXREC.NLXSCRNX = 0;

  if (NLXREC.NLXCSCRN in NLXREC.NLXSNAME) /* if current-screen-name is*/
    NLXREC.NLXSCRNX = sysVar.arrayIndex; /* in the screen-array, then set*/
  end /* the screen-index*/

  set TA1REC empty;
  TA1REC.TA1MAP = NLXREC.NLXCSCRN; /* prepare for abend*/

  NLXREC.NLXBLDSC = "Y"; /* set build screen flag to 'yes'*/
  NLXREC.NLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
  NLXREC.NLXERRF = "N"; /* clear error flag*/
  NI0XW01.NI0XWMCT = 1; /* set map count to 1.*/
  NI0XW01.NI0XWONT = "N"; /* set one time execute*/


  if (NLXREC.NLXSCRNX == 1) /* if screen NI0Xm100*/
    while (NLXREC.NLXEOSF == "N") /* show until user is done*/
      NI0X100();
    end

    TA1REC.TA1MAP = NLXREC.NLXCSCRN;
    TA1REC.TA1TBLKE = "UNKNOWN SCREEN NAME";
    TA1REC.TA1LOCAT[2] = NLXREC.NLXCSCRN;
    XPNL005(); /* abend*/
  end

   /* at this point;*/
       /* if the end-of-application flag (NLXeoaf ) = 'n'*/
         /* the perform will return to the top of NI0X050...*/
       /* else*/
         /* the perform will auto return to NI0X000.*/

end // end NI0X050


// converse map m100
Function NI0X100()

   /* ************************************************************/
       /* process screen NI0Xm100*/

     /* note that this process is being performed in a*/
        /* "while loop" from nl0k050 until the end-of-screen*/
        /* flag (nlxeosf) is set to 'y'.*/

   /* ************************************************************/

  NLXREC.NLXCPROC = "NI0X100";

  if (NLXREC.NLXBLDSC == "Y")
    NI0X101();
    NLXREC.NLXBLDSC = "N";
  end

   /* ***********************************************************/
  converse NI0XM100 ;

   /* ***********************************************************/

  VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N"; /* reset error flag to no*/

  NI0X110(); /* validate pfkeys*/

  NI0XW01.NI0XWPOP = "N"; /* window flag*/
  if (NLXREC.NLXERRF == "N")
    NI0X120(); /* edit entries and update*/
  end

  if (NLXREC.NLXERRF == "N")
    NI0X125(); /* process pf keys*/
  end

  if (NLXREC.NLXERRF == "N")
    NI0X130(); /* determine next action*/
  end

   /* at this point;*/
     /* if the end-of-screen flag (nlxeosf) is 'n'*/
        /* we go back to top of process NI0X100.*/
     /* if the end-of-screen flag (nlxeosf) is 'y'*/
        /* we return to NI0X050.*/
end // end NI0X100


// build screen
Function NI0X101()

   /* fill in all screen fields*/

   /* **************************************/
   /* build screen*/
   /* **************************************/

  NLXREC.NLXCPROC = "NI0X101";

  if (NLXREC.NLXERRF != "Y" /* if no error*/
   && converseVar.validationMsgNum == 0)
    converseLib.clearScreen();
    set NI0XM100 initial;
    set NI0XM100.XCTCD cursor; /* place cursor at country code field*/
  end

  NI0XM100.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  NI0XM100.XXXRVNBR = "00"; /* revision nbr*/
  NI0XM100.XXXPRCNM = "NI0X100"; /* process name*/

  NI0XS05(); /* initialize related fields*/
  NI0XS17(); /* format screen header fields*/

  if (NI0XWONT == "N") /* one time execution flag*/
    NI0XS06(); /* get 1st country and fill the screen if found*/
    NI0XWONT = "Y";
  end

   /* ------------------------------*/
   /* MOVE NI0XW01.NI0XWCTH(NI0XWMCT) TO CHAR1;*/
   /* MOVE NI0XW01.NI0XWCMX TO NUM2;*/
   /* ------------------------------*/
  if (NI0XW01.NI0XWMCT <= NI0XWCMX)
    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8
     || converseVar.eventKey is pf5)

      NI0XS31(); /* reset update flags to no.*/

      if (converseVar.eventKey is pf5)
        VAGen_EZEMSG = "PREVIOUS COUNTRY DELETED SUCCESSFULLY";
      end

      NI0XM100.XCTCD = NI0XW01.NI0XWXCY;

      NI0XS22(); /* position map count for pf7 & pf8*/
      NI0XS15();
                                   /* get country desc and fill the screen*/

    end
  else
    if (NI0XWCMX > 0)
      converseLib.validationFailed(30); /* bottom of file, no further scrolling*/
    else
      NI0XW01.NI0XWOFL = "N"; /* reset found proforma flag*/
      NI0XW01.NI0XWMCT = 1; /* reset map count to 1*/
       /* clear out the country array*/

      NI0XW01.NI0XWDX1 = 1;
      while (NI0XWDX1 < 50)
        NI0XWCTH[NI0XWDX1] = " ";
        NI0XWDX1 = NI0XWDX1 + 1;
      end

    end
  end
   /* ------------------------------*/
   /* MOVE NI0XW01.NI0XWMCT TO NUM1;*/
   /* -----------------------*/
  if (NI0XW01.NI0XWIER == "Y") /* error on init*/
    NI0XW01.NI0XWIER = "N";
    return;
  end


end // end NI0X101


// edit pfkeys
Function NI0X110()
   /* *************************************************************/
                         /* Edit PF keys*/
   /* *************************************************************/

  NLXREC.NLXCPROC = "NI0X110";

  set NI0XM100.CATOAP normal;
  if (NI0XM100.CATOAP != " ") /* if any fastpath data entered*/
    COMMAREA.CATOAP = NI0XM100.CATOAP;
    COMMAREA.CAITEM = NI0XM100.CAITEM;
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002();

    if (NLXREC.NLXERRF == "Y")
      set NI0XM100.CATOAP cursor, modified, bold;
    end

    return;
  end

  if (NLXREC.NLXPF3 == "Y" /* pf3 confirm flag*/
   && converseVar.eventKey not pf3)
    NLXREC.NLXPF3 = "N";
  end

  if (NLXREC.NLXPF4 == "Y" /* pf4 confirm flag*/
   && converseVar.eventKey not pf4)
    NLXREC.NLXPF4 = "N";
  end

  if (NLXREC.NLXPF20 == "Y" /* pf20 confirm flag*/
   && converseVar.eventKey not pf20)
    NLXREC.NLXPF20 = "N";
  end

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf12
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf5
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
     /* next sentence*/
  else
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa2
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      converseLib.validationFailed(36); /* loss of keyed data,rekey any change*/
       /* set alterable fields modified*/
      NLXREC.NLXERRF = "Y";
    else
      if (converseVar.eventKey is pf1)
        XSNLS01(); /* nil help routine - exit to gd01*/
      else
        if (converseVar.eventKey is pf4)
          if (NLXREC.NLXPF4 == "N"
           && NI0XM100 is modified)
            NLXREC.NLXPF4 = "Y";
            converseLib.validationFailed(109); /* update not saved - pf4 to confirm*/
            NLXREC.NLXERRF = "Y";
            return;
          end

          COMMAREA.CAUSERA = " ";
          XSPF4();
        else
          if (converseVar.eventKey is pf3)
            if (NLXREC.NLXPF3 == "N"
             && NI0XM100 is modified)
              NLXREC.NLXPF3 = "Y";
              converseLib.validationFailed(108); /* update not saved - pf3 to confirm*/
              NLXREC.NLXERRF = "Y";
              return;
            end

            COMMAREA.CAUSERA = NIWREC.NIWGROUP;
            COMMAREA.CATOAP = COMMAREA.CAFROMAP;
            XPNL002();
            return;
          else
            if (converseVar.eventKey is pf20)
              COMMAREA.CATOAP = "NL0A";
              XPNL002();
              return;
            else
              COMMAREA.CATOAP = " ";
              converseLib.validationFailed(2); /* INVALID FUNCTION KEY*/
              NLXREC.NLXERRF = "Y";
            end
          end
        end
      end
    end
  end


   /* **********************  END NI0X110  ************************/
end // end NI0X110


// edit entries and update niTrec
Function NI0X120()

  NLXREC.NLXCPROC = "NI0X120";

   /* **************************************/
   /* edit entries and update*/
   /* **************************************/
  NI0XS31(); /* reset update flags to no*/

  NI0XS20(); /* set modified flags prior to windows*/

  NI0XS21(); /* perform window functions*/

   /* set the cursor at the country field*/
  set NI0XM100.XCTCD cursor, normal;

  if (NI0XM100.XCTCD == "0000")
    converseLib.validationFailed(195); /* country code is invalid*/
    NLXREC.NLXERRF = "Y";
    set NI0XM100.XCTCD bold;
    return;
  end

  if (NI0XM100.XCTCD > " ")
       /* check to see if xctcd > space*/
    NI0XS24(); /* then validate the country code*/
  else
    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf5
     || converseVar.eventKey is pf7
     || converseVar.eventKey is pf8
     || converseVar.eventKey is pf12
     || converseVar.eventKey is pf15)
      if (NI0XWCTH[NI0XWMCT] > " ")
        NI0XM100.XCTCD = NI0XWCTH[NI0XWMCT];
        set NI0XM100.XCTCD normal;

        NI0XS15(); /* get country desc and fill screen*/

        NI0XW01.NI0XWCRM = "N"; /* set crty modified flag to no*/
        NI0XS31(); /* reset update flags to no*/

         /* cannot erase an existing ctry, ctry restored*/
        converseLib.validationFailed(219);
        NLXREC.NLXERRF = "Y";
        return;
      end
      if (NI0XWCRM == "Y")
        if (NI0XWMCT <= NI0XWCMX)
          if (converseVar.eventKey is pf7
           || converseVar.eventKey is pf8)
            /* next sentence*/
          end
        else
          NI0XS24(); /* validate the country code*/
        end
      else
        NI0XS24(); /* validate the country code*/
      end
    else
      NI0XS24(); /* validate the country code*/
    end
    NI0XM100.XCTDESC = " "; /* blank out the ctry desc.*/
  end


  if (NLXREC.NLXERRF != "Y")
    if (NI0XW01.NI0XWCRM == "Y"
     || NI0XW01.NI0XWCAE == "Y")
      if (converseVar.eventKey not pf5
       || NI0XWMCT > NI0XWCMX)
        NI0XS40(); /* check for country's existence*/
        if (NLXREC.NLXERRF == "Y")
          return;
        end
      end
    end
  end


   /* edit freight texts and amts*/

   /* IF NLXREC.NLXERRF EQ 'N';*/

  NI0XW01.NI0XWSUM = 0; /* sum amount*/
  set NI0XM100.ZITCDTXT normal;

  NI0XW01.NI0XWDX1 = 1;
  while (NI0XW01.NI0XWDX1 < 6)
                                   /* when text entered,there should be*/

    set NI0XM100.NITLTXTS[NI0XWDX1] normal;
    set NI0XM100.NITPINTX[NI0XWDX1] normal;
    set NI0XM100.NITPTAMT[NI0XWDX1] normal;

    NI0XW01.NI0XWDX1 = NI0XW01.NI0XWDX1 + 1;
  end

  NI0XW01.NI0XWDX1 = 1;
  while (NI0XW01.NI0XWDX1 < 6)
                                   /* when text entered,there should be*/
                                     /* an amount > 0*/
    if (NI0XM100.NITLTXTS[NI0XWDX1] > " ")
      NI0XS30(); /* validate the misc. charge type*/
    end

    if (NI0XM100.NITPINTX[NI0XWDX1] > " ") /* amount, if not display error*/
      if (NI0XM100.NITPTAMT[NI0XWDX1] > 0)
        if (NI0XW01.NI0XWMOD == "Y"
         || NI0XW01.NI0XWZXM == "Y"
         || NI0XW01.NI0XWCRM == "Y")
          if (NI0XM100.XCTCD > " ")
            /* AND NI0XM100.XCTCD NOT NULL;*/
            NI0XW01.NI0XWPUP = "Y"; /* set pre-update flag*/
          end
        end
      else
        set NI0XM100.NITPTAMT[NI0XWDX1] cursor, modified, bold;
        NI0XS26(); /* set error flag*/
                       /* ... text and amount have to both exist.*/
      end
    end
    if (NI0XM100.NITPTAMT[NI0XWDX1] > 0) /* when amount entered, there*/
      if (NI0XM100.NITPINTX[NI0XWDX1] == " ") /* should be text, if not*/

        set NI0XM100.NITPINTX[NI0XWDX1] cursor, modified, bold;
        NI0XS26(); /* set error flag*/
                       /* ... text and amount have to both exist.*/
      end
    end
    if (NI0XM100.NITPINTX[NI0XWDX1] > " " /* if there is freight txt or*/
     || NI0XM100.NITPTAMT[NI0XWDX1] > 0)  /* greater than 0*/
      NI0XW01.NI0XWBLK = "Y";
    end

    NI0XW01.NI0XWSUM = NI0XW01.NI0XWSUM + NI0XM100.NITPTAMT[NI0XWDX1];
    NI0XW01.NI0XWDX1 = NI0XW01.NI0XWDX1 + 1;
  end

  NI0XM100.ZITAMT = NI0XW01.NI0XWSUM; /* move zitsum to screen*/

   /* END ;*/


  if (NLXREC.NLXERRF == "N")
    if (NI0XM100.XCTCD > " ")
      /* IF NI0XM100.XCTCD IS NULL;*/
      /* next sentence*/
      /* ELSE ;*/
      if (NI0XW01.NI0XWCAE == "N" /* country not already exists*/
       /* and blank in freight text & amt*/
       && NI0XW01.NI0XWBLK == "N")
        set NI0XM100.NITLTXTS[1] cursor;
                  /* enter more information mssg*/
        converseLib.validationFailed(213);
        NLXREC.NLXERRF = "Y";
        return;
      end
      /* END ;*/
    end
  end

  if (NLXREC.NLXERRF == "N"
   && NI0XW01.NI0XWBLK == "Y")

     /* check inco terms text's existence when freight text(s)*/
     /* and amount(s) are entered.*/

    set NI0XM100.ZITCD normal;
    if (NI0XM100.ZITCD > " ") /* if zitcd exists on the map*/
      VPRZIT01.ZITCD = NI0XM100.ZITCD;

      NI0XS41(); /* validate the zitcd inco terms code*/

    end

    set NI0XM100.ZITCDTXT normal;
    if (NI0XM100.ZITCDTXT > " ") /* if inco terms text exists*/
      if (NLXREC.NLXERRF != "Y" /* no error in checking incoterms code*/
       && NI0XW01.NI0XWPUP == "Y") /* and pre-update flag is yes*/
        NI0XW01.NI0XWUPT = "Y"; /* set nitrec update flag*/
      end
    else
      set NI0XM100.ZITCDTXT cursor, modified, bold;
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(192);
        /* inco terms text required in this case*/
    end
  end

  if (converseVar.eventKey is enter)
    if (NLXREC.NLXERRF == "N")

      if (NI0XW01.NI0XWUPT == "N") /* if no updates occurred.*/
        NI0XS01(); /* fetch 1st row to check for proforma existence*/
        if (NI0XW01.NI0XWOFL == "Y")

          NI0XS13(); /* set up country arrays ,clear screen arrays*/
                  /* and fill up the screen with new country data*/
        else
          NLXREC.NLXBLDSC = "Y"; /* set build screen to yes*/
        end
      end
    end
  end

  if (NI0XM100.XCTCD <= " ")
    /* OR NI0XM100.XCTCD IS NULL;*/
    if (NI0XW01.NI0XWBLK == "N"
     && NI0XM100.ZITCDTXT == " "
     && NI0XM100.ZITCD == " ")
      set NI0XM100.XCTCD normal;
      NI0XW01.NI0XWCRM = "N"; /* reset the country mod flag*/
      NLXREC.NLXERRF = "N"; /* reset error flag*/
      converseLib.validationFailed(0); /* reset error mssg*/
      NI0XS31(); /* reset update flags to no*/
    end
  end
end // end NI0X120


// process pfkeys & update niTrec
Function NI0X125()

  NLXREC.NLXCPROC = "NI0X125";

   /* **************************************/
   /* process pfkeys and update*/
   /* **************************************/

  if (NI0XW01.NI0XWZIP == "Y")
    VAGen_EZEMSG = "PLEASE, REVIEW INCO TEXT, FIX IF NEEDED...ENTER TO UPDATE";
    set NI0XM100.ZITCDTXT cursor; /* set cursor at zit text field*/
    NI0XW01.NI0XWZIP = "N"; /* reset zit pop up to off*/
    return;
  end

  if (NLXREC.NLXERRF == "Y"
   || NI0XW01.NI0XWPOP == "Y") /* treat window like pf12*/
    return;
  end


  NI0XW01.NI0XWNOI = "N";

  if (NI0XW01.NI0XWUPT == "Y"
   && NLXREC.NLXERRF == "N") /* and no previous edit errors occurred*/

    NI0XS01(); /* check for proforma existence*/
    call "IO5830" ("C2", SQLCA, VPRZIT01) {isNoRefresh = yes, isExternal = yes};
    if (NI0XW01.NI0XWOFL == "Y") /* if proforma found*/
      if (NI0XW01.NI0XWMOD == "Y"
       || NI0XW01.NI0XWZXM == "Y"
       || NI0XW01.NI0XWCRM == "Y")
        if (NI0XM100.XCTCD <= " ")

          /* next sentence*/
        else
          NI0XS18(); /* select unique country*/
          NI0XS39();
          if (NI0XW01.NI0XWCRF == "N")
            /* next sentence*/
          else
            NI0XS28(); /* delete current country*/
             /* no increment ctry table counter*/
            NI0XW01.NI0XWNOI = "Y";
          end
        end
      end
    end

    NI0XS38(); /* insert new country record to NITREC*/

    if (NI0XW01.NI0XWNOI != "Y")
      NI0XWCMX = NI0XWCMX + 1; /* increase ctry array by 1*/
      NI0XWCTH[NI0XWCMX] = NI0XM100.XCTCD; /* store new ctry in array*/
    end

     /* use NITLTXTS on the map (set of 6)*/
    NI0XS31(); /* reset update flags to no*/
    NI0XWCRM = "N"; /* country modified flag*/
  end

  NI0XW01.NI0XWXCY = " "; /* reset temp country field*/

  if (NLXREC.NLXERRF == "N") /* no error occurs so far*/
    if (converseVar.eventKey is pf5) /* reload country array and recount the country count*/

      NI0XS28(); /* delete the existing country on screen*/
       /* reload the country array and counts*/
      NI0XS11();

      if (NI0XWMCT == 1)
        if (NI0XWCMX > 0)
          NI0XW01.NI0XWXCY = NI0XWCTH[NI0XWMCT];
        end
      else
        NI0XW01.NI0XWMCT = NI0XW01.NI0XWMCT - 1;
        NI0XW01.NI0XWXCY = NI0XWCTH[NI0XWMCT];
      end
      NLXREC.NLXBLDSC = "Y";
      return;
    end
  end

  if (converseVar.eventKey is pf7)
    if (NI0XW01.NI0XWMCT == 1)
      converseLib.validationFailed(29);
      NLXREC.NLXERRF = "Y";
      if (NI0XWCMX > 0)
        NI0XW01.NI0XWXCY = NI0XWCTH[NI0XWMCT];
        NLXREC.NLXBLDSC = "Y";
      end
    else
      NI0XW01.NI0XWMCT = NI0XW01.NI0XWMCT - 1;
       /* move previous xctry to map*/
      NI0XW01.NI0XWXCY = NI0XWCTH[NI0XWMCT];

      NLXREC.NLXBLDSC = "Y";
    end
    return;
  end

  if (converseVar.eventKey is pf8)
    if (NI0XW01.NI0XWMCT > NI0XW01.NI0XWCMX) /* map count = country count*/
      NLXREC.NLXBLDSC = "Y"; /* build the screen*/

    else
      NI0XW01.NI0XWMCT = NI0XW01.NI0XWMCT + 1;
      NI0XW01.NI0XWXCY = NI0XWCTH[NI0XWMCT]; /* move next ctry to map*/

      NLXREC.NLXBLDSC = "Y";
    end
    return;
  end

  if (converseVar.eventKey is enter)
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    COMMAREA.CATOAP = "NI0U"; /* transfer to ni0u appl*/
    XPNL002();
  end
  if (converseVar.eventKey is pf5
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf12
   || converseVar.eventKey is enter)
     /* next sentence*/
  else
    converseLib.validationFailed(2);
    NLXREC.NLXERRF = "Y";
  end
end // end NI0X125


// determine next action
Function NI0X130()
   /* **************************************/
   /* Determine next action from 1st screen*/
   /* **************************************/

  NLXREC.NLXCPROC = "NI0X130";

  if (COMMAREA.CATOAP != " " /* if any fastpath data entered*/
   && converseVar.eventKey is enter)
    COMMAREA.CAUSERA = " ";
    NIWREC.NIWFRMAP = "NL0A";
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002();
  end
end // end NI0X130


// select unique from niTrec
Function NI0XS01()

  NLXREC.NLXCPROC = "NI0XS01";

  NI0XW01.NI0XWOFL = "N"; /* set niTrec not found flag*/

   /* format key for PROFORMA INCO TERMS TXT table*/
  VPRZIT01.NIQPROID = NIWREC.NIQPROID;
  VPRZIT01.XCTCD = " ";

   /* select cursor for a proforma number*/
  call "IO5830" ("S2", SQLCA, VPRZIT01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE != 100)
      TA1REC.TA1LOCAT[2] = "S2     "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO5830 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VPRZIT01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end

  NI0XS03(); /* fetch 1st row to check for proforma*/
                                   /* existence*/


end // end NI0XS01


// select next n2 frm niTrec
Function NI0XS03()

  NLXREC.NLXCPROC = "NI0XS03";

   /* select next to check for proforma's existence*/
  call "IO5830" ("N2", SQLCA, VPRZIT01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    if (NI0XW01.NI0XWOFL != "Y")
      NI0XW01.NI0XWOFL = "Y"; /* niTrec found*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      call "IO5830" ("C2", SQLCA, VPRZIT01) {isNoRefresh = yes, isExternal = yes};
      NI0XW01.NI0XWEND = "Y"; /* format end of table flag*/
    else
      TA1REC.TA1LOCAT[2] = "N2     "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO5830 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VPRZIT01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end



end // end NI0XS03


// initialize internal flags
Function NI0XS05()


  NLXREC.NLXCPROC = "NI0XS05";

  NI0XW01.NI0XWSUM = 0; /* set zitsum count to 0*/

  NI0XW01.NI0XWCRF = "N"; /* country code found  flag*/
  NI0XW01.NI0XWCEX = "N"; /* country code exist in XCTTBL*/

end // end NI0XS05


// get 1st ctry,fill scr if fnd
Function NI0XS06()
   /* *************************************************************/
     /* get 1st country, fill the screen if found*/
   /* *************************************************************/

  NLXREC.NLXCPROC = "NI0XS06";

  NI0XS01(); /* get 1st country*/

  if (NI0XWOFL == "Y")
    NI0XM100.XCTCD = VPRZIT01.XCTCD;
    NI0XS24(); /* get country desc*/
    NI0XS13(); /* and fill up the screen*/
  else
    converseLib.validationFailed(207); /* edit this proforma mssg*/
  end

  call "IO5830" ("C2", SQLCA, VPRZIT01) {isNoRefresh = yes, isExternal = yes};

   /* **********************  END NI0XS06  ************************/
end // end NI0XS06


// get 1st ctry,reload ctry array
Function NI0XS11()
   /* *************************************************************/
     /* reload the country arrays*/
   /* *************************************************************/

  NLXREC.NLXCPROC = "NI0XS11";

  NI0XWCTH[NI0XWMCT] = " ";

  NI0XWDX1 = 1;
  NI0XWDX2 = 1;
   /* reshape existing array to temp array*/
  while (NI0XW01.NI0XWDX1 <= 50)
    NI0XWCTB[NI0XWDX1] = " ";
    if (NI0XWCTH[NI0XWDX1] > " ")
      NI0XWCTB[NI0XWDX2] = NI0XWCTH[NI0XWDX1];
      NI0XWDX2 = NI0XWDX2 + 1;
    end
    NI0XWDX1 = NI0XWDX1 + 1;
  end
  NI0XWCMX = NI0XWCMX - 1;

  NI0XWDX1 = 1;
  while (NI0XW01.NI0XWDX1 <= 50) /* restructure the ctry arrays*/
    NI0XWCTH[NI0XWDX1] = NI0XWCTB[NI0XWDX1];
    NI0XWDX1 = NI0XWDX1 + 1;
  end

   /* **********************  END NI0XS11  ************************/
end // end NI0XS11


// Fetch rows when proforma found
Function NI0XS13()
   /* *************************************************************/
     /* fetch rows and select unique country when found*/
   /* *************************************************************/

  NLXREC.NLXCPROC = "NI0XS13";

  NI0XW01.NI0XWPRF = "N"; /* set proforma flag to no*/
  NI0XW01.NI0XWEND = "N";
                                   /* set end of prof cursor select to no*/
  NI0XW01.NI0XWED1 = "N"; /* set end of cntry  select to no*/

  NI0XW01.NI0XWCNT = 0; /* country code count*/
  NI0XW01.NI0XWCTH = " "; /* country code array*/
  NI0XW01.NI0XWXTC = " "; /* ws temp country code*/

  while (NI0XW01.NI0XWEND == "N") /* fetch rows and check next NITREC*/
    NI0XS32();
    if (NI0XW01.NI0XWEND == "N")
      NI0XS03(); /* fetch next nitrec record*/
    end
  end
  if (NI0XW01.NI0XWCMX > 0)
    NI0XS18(); /* select a unique set of prof # and country code.*/

    NI0XS14(); /* clear the screen except country field*/
                                   /* related*/

    while (NI0XW01.NI0XWED1 == "N") /* fetch rows and check next NITREC*/
      NI0XS19(); /* using proforma and country cd as key*/
    end
  end

  NI0XS22();
                                   /* position map count for pf7 or pf8*/


   /* **********************  END NI0XS13  ************************/
end // end NI0XS13


// clear map fields except ctry
Function NI0XS14()
   /* *************************************************************/
     /* clear map screen , except country*/
   /* *************************************************************/

  NLXREC.NLXCPROC = "NI0XS14";

  NI0XM100.ZITCD = " "; /* clear inco terms flds*/
  NI0XM100.ZITCDTXT = " ";
  NI0XM100.ZITAMT = 0;

  NI0XWDX1 = 1;
  while (NI0XWDX1 < 6)
    NI0XM100.NITPINTX[NI0XWDX1] = " "; /* clear map text arrays*/
    NI0XM100.NITPTAMT[NI0XWDX1] = 0; /* clear map amt arrays*/
    NI0XM100.NITLTXTS[NI0XWDX1] = " "; /* clear map seq arrays*/
    NI0XWDX1 = NI0XWDX1 + 1;
  end

   /* **********************  END NI0XS14  ************************/
end // end NI0XS14


// get country data & fill screen
Function NI0XS15()
   /* *************************************************************/
     /* get country desc  and fill screen*/
   /* *************************************************************/

  NLXREC.NLXCPROC = "NI0XS15";

  if (NI0XM100.XCTCD <= " ")
    /* next sentence*/
  else
    NI0XS24(); /* get country desc.*/
  end

  NI0XS18(); /* fetch row for pf7, pf8 using ctry as key*/

  while (NI0XWED1 == "N") /* fetch row and check next NITREC*/
                        /* using proforma and ctry as key*/
    NI0XS19(); /* and fill up the screen*/
  end

   /* **********************  END NI0XS15  ************************/
end // end NI0XS15


// format screen header fields
Function NI0XS17()


   /* **************************************/
   /* fill in all screen header fields*/
   /* **************************************/

  NLXREC.NLXCPROC = "NI0XS17";

   /* proforma number and*/
   /* customer fields*/

  NI0XM100.NIQPROID = NIWREC.NIQPROID;
  NI0XM100.KUCCOID = NIWREC.KUCCOID;
  NI0XM100.KUCCONM = NIWREC.KUCCONM;
  NI0XM100.XCTDESC1 = NIWREC.XCTDESC;



end // end NI0XS17


// slect prof,xctry - niTrec
Function NI0XS18()

  NLXREC.NLXCPROC = "NI0XS18";

  NI0XW01.NI0XWED1 = "N"; /* set unique country flag to no.*/

   /* format key for PROFORMA INCO TERMS TXT table*/

  VPRZIT01.NIQPROID = NIWREC.NIQPROID;
  VPRZIT01.XCTCD = NI0XM100.XCTCD;
  NI0XW01.NI0XWXTC = NI0XM100.XCTCD;

   /* select unique set of country code within a proforma #*/
  call "IO5830" ("S1", SQLCA, VPRZIT01) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      NI0XW01.NI0XWCRF = "N"; /* country code not found*/
    else
      TA1REC.TA1LOCAT[2] = "S1     "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO5830 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VPRZIT01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end



end // end NI0XS18


// fetch prof,xctry in nitrec
Function NI0XS19()
   /* *************************************************************/
        /* fetch proforma and country as key in NITREC          **/
   /* *************************************************************/

  NLXREC.NLXCPROC = "NI0XS19"; /* set current proc name*/

  call "IO5830" ("N1", SQLCA, VPRZIT01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
    if (NI0XW01.NI0XWCRF != "Y")
      NI0XW01.NI0XWCRF = "Y"; /* XCTRY CD # found flag*/
    end

    if (VPRZIT01.XCTCD != NI0XW01.NI0XWXTC) /* if xctry different*/
      NI0XW01.NI0XWED1 = "Y"; /* end of country flag*/
      call "IO5830" ("C1", SQLCA, VPRZIT01) {isNoRefresh = yes, isExternal = yes};

    end
    if (NI0XW01.NI0XWED1 == "N")
      NI0XW01.NI0XWCHC = VPRZIT01.ZZZCHGCT;
      NI0XW01.NI0XWCT1 = VPRZIT01.ZZZCHGCT;

      NI0XS36(); /* fill up  freight terms txt and*/
               /* charge amount including the inco terms (fin) and*/
               /* inco SUM.*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      NI0XW01.NI0XWED1 = "Y"; /* end of country flag*/
      call "IO5830" ("C1", SQLCA, VPRZIT01) {isNoRefresh = yes, isExternal = yes};
    else
      TA1REC.TA1LOCAT[2] = "N1     "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO5830 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VPRZIT01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end



   /* **********************  END ni0xs19  ************************/
end // end NI0XS19


// set up modified flags
Function NI0XS20()

  NLXREC.NLXCPROC = "NI0XS20"; /* set current proc name*/

   /* set modified flags for editing*/

   /* country code*/
  if (NI0XM100.XCTCD is modified)
    NI0XW01.NI0XWCRM = "Y";
    /* ELSE ;*/
      /* MOVE 'N' TO NI0XW01.NI0XWCRM;*/
  end

   /* zchcd charge type*/

  NI0XW01.NI0XWDX1 = 1;

  while (NI0XWDX1 < 6)
    if (NI0XM100.NITLTXTS[NI0XWDX1] is modified
     || NI0XM100.NITPINTX[NI0XWDX1] is modified
     || NI0XM100.NITPTAMT[NI0XWDX1] is modified)
      NI0XW01.NI0XWMOD = "Y";
    end

    NI0XW01.NI0XWDX1 = NI0XW01.NI0XWDX1 + 1;
  end

   /* zitcd   text  or zit code*/
  if (NI0XM100.ZITCDTXT is modified
   || NI0XM100.ZITCD is modified)
    NI0XW01.NI0XWZXM = "Y";
  end

end // end NI0XS20


// perform windowing
Function NI0XS21()

  NLXREC.NLXCPROC = "NI0XS10"; /* set current proc name*/

   /* perform windowing*/
   /* FOR XCT FOREIGN COUNTRY TABLE*/

  if (NI0XM100.XCTCD == "?")
    NI0XW01.NI0XWPOP = "Y"; /* window flag*/
    XPXX001();
    while (XX0XW02.XX0XWEND == "N")
      XPXCT01();
    end
    set NI0XM100.XCTCD cursor;
    if (XX0XW02.XX0XWPIX > 0)
      NI0XM100.XCTCD = XCTTBL.XCTCD[XX0XWPIX];
      NI0XM100.XCTDESC = XCTTBL.XCTDESC[XX0XWPIX];
    else
      NI0XM100.XCTCD = " "; /* clear fields*/
      NI0XM100.XCTDESC = " ";
    end
  end

   /* PERFORM ZIT INCO TERMS TEXT*/

  if (NI0XM100.ZITCD == "?")
    NI0XW01.NI0XWPOP = "Y"; /* window flag*/
    XPXX001();
    while (XX0XW02.XX0XWEND == "N")
      XPZIT01();
    end
    set NI0XM100.ZITCD cursor;
    if (XX0XW02.XX0XWPIX > 0)
      NI0XM100.ZITCD = ZITTBL.ZITCD[XX0XWPIX];
      NI0XM100.ZITCDTXT = ZITTBL.ZITDESC[XX0XWPIX];
      NI0XW01.NI0XWZIP = "Y"; /* set zit pop up up*/
    else
      NI0XM100.ZITCD = " "; /* clear fields*/
      NI0XM100.ZITCDTXT = " ";
    end
  end

   /* MISC.  charge types*/

  NI0XW01.NI0XWDX1 = 1;
  while (NI0XWDX1 < 6)
    if (NI0XM100.NITLTXTS[NI0XWDX1] == "?")
      NI0XW01.NI0XWPOP = "Y"; /* window flag*/
      XPXX001();
      while (XX0XW02.XX0XWEND == "N")
        XPZCH01();
      end
      set NI0XM100.NITLTXTS[NI0XWDX1] cursor;
      if (XX0XW02.XX0XWPIX > 0)
        NI0XM100.NITLTXTS[NI0XWDX1] = ZCHTBL.ZCHCD[XX0XWPIX];
        NI0XM100.NITPINTX[NI0XWDX1] = ZCHTBL.ZCHDESC[XX0XWPIX];
      end
    end
    NI0XW01.NI0XWDX1 = NI0XW01.NI0XWDX1 + 1;
  end

   /* restore original screen*/
  converseLib.clearScreen();



end // end NI0XS21


// position map count for pf7,8
Function NI0XS22()

  NLXREC.NLXCPROC = "NI0XS22"; /* set current proc name*/

   /* position map count for pf7 or pf8*/

  NI0XW01.NI0XWDX1 = 1;

  while (NI0XWDX1 < 50)
    NI0XW01.NI0XWMDL = NI0XW01.NI0XWDX1; /* set mx country cnt*/
    if (NI0XWCTH[NI0XWDX1] == NI0XM100.XCTCD)
      NI0XW01.NI0XWMCT = NI0XWDX1;
      NI0XWDX1 = 50;
    end
    if (NI0XWCTH[NI0XWDX1] == " ")
      NI0XWDX1 = 50;
    end
    NI0XWDX1 = NI0XWDX1 + 1;
  end


end // end NI0XS22


// validate the country code
Function NI0XS24()

  NLXREC.NLXCPROC = "NI0XS24";

  NI0XW01.NI0XWCEX = "N"; /* set xctcd code exist flag to no*/
   /* validate the country code*/

  if (NI0XM100.XCTCD in XCTTBL.XCTCD)
    NI0XM100.XCTDESC = XCTTBL.XCT-ISO-CTRY-CD[sysVar.arrayIndex];
  end
  if (sysVar.arrayIndex > 0) /* that means this xctcd exists*/
    /* fill country description*/
    set NI0XM100.XCTCD normal;
    NI0XM100.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
    NI0XW01.NI0XWPIX = sysVar.arrayIndex; /* keep count for use after*/
                                    /* clear screen*/
    NI0XW01.NI0XWCEX = "Y"; /* xctcd code exists in XCTTBL*/
  else
    NI0XW01.NI0XWCRM = "Y"; /* set ctry mod. flag on*/
    set NI0XM100.XCTCD cursor, modified, bold; /* highlight xtry fld*/
    converseLib.validationFailed(195); /* country code does not exist*/
    NLXREC.NLXERRF = "Y";
    return;
  end

end // end NI0XS24


// set error flag
Function NI0XS26()


   /* **************************************/
   /* set display error flag             **/
   /* for freight text amd amount        **/
   /* **************************************/

  NLXREC.NLXCPROC = "NI0XS26";

  converseLib.validationFailed(196); /* text and amount has to*/
                              /* both exist.*/
  NLXREC.NLXERRF = "Y";


end // end NI0XS26


// niTrec insert
Function NI0XS27()
  NLXREC.NLXCPROC = "NI0XS27";

  if (NI0XW01.NI0XWDX1 == 6 /* allow to insert incoterms text or*/
   || NI0XM100.NITPINTX[NI0XWDX1] != " ") /* if text field contains text*/

    /* add new PROFORMA INCO TERMS TXT record*/
    call "IO5830" ("A ", SQLCA, VPRZIT01) {isNoRefresh = yes, isExternal = yes};


    if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
    else
      TA1REC.TA1TBLKE = NI0XW01.NI0XWOKE; /* table key*/
      TA1REC.TA1LOCAT[2] = "A      "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO5830 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VPRZIT01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end


end // end NI0XS27


// delete current country code
Function NI0XS28()
  NLXREC.NLXCPROC = "NI0XS28";

  VPRZIT01.NIQPROID = NI0XM100.NIQPROID;
  VPRZIT01.XCTCD = NI0XM100.XCTCD; /* move keys for deletion*/
  VPRZIT01.NITLTXTS = -1;

  NI0XS37(); /* delete current country code*/

end // end NI0XS28


// format niTrec fields
Function NI0XS29()

  NLXREC.NLXCPROC = "NI0XS29";

   /* format fields for updates PROFORMA TEXT TABLE*/
  VPRZIT01.NIQPROID = NI0XM100.NIQPROID;

  VPRZIT01.XCTCD = NI0XM100.XCTCD;

  VPRZIT01.ZZZCHGCT = NI0XW01.NI0XWCHC;
  VPRZIT01.ZZZSDT = XX0XW01.XX0XWDAT;
  VPRZIT01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPRZIT01.ZZZCHGTM = XX0XW01.XX0XWTIM;



end // end NI0XS29


// validate the zchcd usng ZCHTBL
Function NI0XS30()
  NLXREC.NLXCPROC = "NI0XS30";

   /* validate the zchcd charge types*/

  set NI0XM100.NITPINTX[NI0XWDX1] normal;

  if (NI0XM100.NITLTXTS[NI0XWDX1] in ZCHTBL.ZCHCD
   && ZCHTBL.ZCHCD[sysVar.arrayIndex] != "99") /* end of the table*/
     /* valid chrge type for product IVC*/
    /* AND ZCHTBL.ZCHPIFL(EZETST) EQ 'Y';*/
    if (NI0XM100.NITPINTX[NI0XWDX1] > " ")
      /* next sentence*/
    else
      NI0XM100.NITPINTX[NI0XWDX1] = ZCHTBL.ZCHDESC[sysVar.arrayIndex];
    end
  else
    set NI0XM100.NITLTXTS[NI0XWDX1] cursor, modified, bold;
    converseLib.validationFailed(205); /* charge type is invalid*/
    NLXREC.NLXERRF = "Y";
    return;
  end

end // end NI0XS30


// reset update flags to no
Function NI0XS31()
   /* *************************************************************/
     /* reset update flags to no*/
   /* *************************************************************/

  NLXREC.NLXCPROC = "NI0XS31";

  NI0XW01.NI0XWUPT = "N";
  NI0XW01.NI0XWPUP = "N";
  NI0XW01.NI0XWBLK = "N";
  NI0XW01.NI0XWMOD = "N";
  NI0XW01.NI0XWZXM = "N";

   /* **********************  END NI0XS31  ************************/
end // end NI0XS31


// fetch and check next NITREC
Function NI0XS32()
   /* *************************************************************/
                 /* Fetch and Check Next NITREC*/
   /* *************************************************************/

  NLXREC.NLXCPROC = "NI0XS32"; /* set current proc name*/

  if (SQLCA.VAGen_SQLCODE == 100) /* end of table*/
    NI0XW01.NI0XWEND = "Y"; /* format end of table flag*/
  else
    if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
      if (NI0XW01.NI0XWPRF != "Y")
        NI0XW01.NI0XWPRF = "Y"; /* PROFORMA # found flag*/
      end

       /* set country code occurrences into array of 50 and*/
       /* set country count and country max to the occurrences.*/
      if (VPRZIT01.XCTCD != NI0XW01.NI0XWXTC)
        NI0XWCNT = NI0XWCNT + 1;
        NI0XWCTH[NI0XWCNT] = VPRZIT01.XCTCD;
        NI0XW01.NI0XWXTC = VPRZIT01.XCTCD;
        NI0XW01.NI0XWCMX = NI0XW01.NI0XWCNT;
      end

    else
      TA1REC.TA1LOCAT[2] = "N2     "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO5830 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VPRZIT01"; /* table view*/
      NI0XW01.NI0XWOID = NIWREC.NIQPROID; /* PROFORMA display format*/
      XPNL005(); /* abend routine*/
    end
  end


   /* **********************  END NI0XS32  ************************/
end // end NI0XS32


// move fields for updt of NITREC
Function NI0XS34()

  NLXREC.NLXCPROC = "NI0XS34";

   /* format fields for updates PROFORMA TEXT TABLE*/

  if (NI0XW01.NI0XWDX1 == 6)
    VPRZIT01.ZITCD = NI0XM100.ZITCD;
    VPRZIT01.NITLTXTS = 6;
    VPRZIT01.NITPINTY = NI0XM100.ZITCDTXT;
    VPRZIT01.NITPTAMT = NI0XM100.ZITAMT;
  else
    if (NI0XM100.NITPINTX[NI0XWDX1] != " ")
      VPRZIT01.NITLTXTS = NI0XW01.NI0XWDX1;
      VPRZIT01.NITPINTY = NI0XM100.NITPINTX[NI0XWDX1];
      VPRZIT01.NITPTAMT = NI0XM100.NITPTAMT[NI0XWDX1];
      VPRZIT01.ZITCD = NI0XM100.NITLTXTS[NI0XWDX1];
    end
  end


end // end NI0XS34


// validate the zitcd inco terms
Function NI0XS36()
   /* and fill up freight term text, charge amount, inco terms,*/
   /* inco term text and sum of all charge amounts for a country.*/

  NLXREC.NLXCPROC = "NI0XS36";

   /* validate the zitcd inco terms*/

  if (VPRZIT01.NITLTXTS == 6)

      /* fill inco terms text and country code,*/
    NI0XM100.XCTCD = VPRZIT01.XCTCD;
    NI0XS24(); /* get country description*/

    NI0XM100.ZITAMT = VPRZIT01.NITPTAMT; /* and sum amount on screen*/
    NI0XM100.ZITCD = VPRZIT01.ZITCD; /* move zitcd to screen*/
    NI0XM100.ZITCDTXT = VPRZIT01.NITPINTY; /* move zit txt to scr*/
  else

    NI0XW01.NI0XWTXT = VPRZIT01.NITLTXTS;
     /* freight txts, amounts, charge types*/
    NI0XM100.NITPINTX[NI0XWTXT] = VPRZIT01.NITPINTY; /* texts, amounts*/
    NI0XM100.NITPTAMT[NI0XWTXT] = VPRZIT01.NITPTAMT;
                                   /* and charge types*/
    NI0XM100.NITLTXTS[NI0XWTXT] = VPRZIT01.ZITCD; /* enterd on screen*/
  end

end // end NI0XS36


// fet pro,ctry,seq for delete
Function NI0XS37()
   /* *************************************************************/
     /* fetch proforma and country and seq. as key*/
     /* NITREC for deletion*/
   /* *************************************************************/

  NLXREC.NLXCPROC = "NI0XS37"; /* set current proc name*/

  call "IO5830" ("D ", SQLCA, VPRZIT01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* row delete*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE != 100)
      TA1REC.TA1LOCAT[2] = "N      "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO5830 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VPRZIT01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end



   /* **********************  END NI0XS37  ************************/
end // end NI0XS37


// update niTrec
Function NI0XS38()
  NLXREC.NLXCPROC = "NI0XS38";

  XX0XS01(); /* get current date and time.*/

  NI0XS29(); /* format nitrec fields*/

   /* update PROFORMA INCO TERMS TXT RECORD*/

   /* move key to abend key, ni0xw01.ni0xwoke in case of an abend*/
  NI0XW01.NI0XWPRX = NI0XM100.NIQPROID; /* proforma move*/
  NI0XW01.NI0XWCRT = NI0XM100.XCTCD; /* country  move*/

  NI0XW01.NI0XWDX1 = 1;
  while (NI0XW01.NI0XWDX1 < 7)
    NI0XS34(); /* move fields to NITREC for update*/
    NI0XS27(); /* insert the data record.,NITREC*/
    NI0XW01.NI0XWDX1 = NI0XW01.NI0XWDX1 + 1;
  end

end // end NI0XS38


// fetch 1st unique in nitrec
Function NI0XS39()
   /* *************************************************************/
        /* fetch proforma and country as key in NITREC          **/
        /* check for country existence                          **/
   /* *************************************************************/

  NLXREC.NLXCPROC = "NI0XS39"; /* set current proc name*/

  call "IO5830" ("N1", SQLCA, VPRZIT01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
    if (NI0XW01.NI0XWCRF != "Y")
      NI0XW01.NI0XWCRF = "Y"; /* XCTRY CD # found flag*/
    end

    NI0XW01.NI0XWED1 = "Y"; /* end of country flag*/
    call "IO5830" ("C1", SQLCA, VPRZIT01) {isNoRefresh = yes, isExternal = yes};

  else
    if (SQLCA.VAGen_SQLCODE == 100) /* row not found*/
      NI0XW01.NI0XWED1 = "Y"; /* end of country flag*/
      NI0XW01.NI0XWCRF = "N"; /* XCTRY CD # found flag*/
      call "IO5830" ("C1", SQLCA, VPRZIT01) {isNoRefresh = yes, isExternal = yes};
    else
      TA1REC.TA1LOCAT[2] = "N1     "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO5830 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VPRZIT01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end



   /* **********************  END ni0xs39  ************************/
end // end NI0XS39


// check for country existence
Function NI0XS40()
   /* *************************************************************/
        /* check for country existence                          **/
   /* *************************************************************/

  NLXREC.NLXCPROC = "NI0XS40"; /* set current proc name*/

  if (NLXREC.NLXERRF != "Y")
    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
       /* next sentence*/
    else
      NI0XW01.NI0XWCAE = "N"; /* reset ctry already exist flag*/
      NI0XWDX1 = 1;
      while (NI0XWDX1 <= 50)
        if (NI0XM100.XCTCD == NI0XWCTH[NI0XWDX1]
         && NI0XM100.XCTCD > " ")
          NI0XS24(); /* get country desc.*/
          /* country already exists in database*/
          converseLib.validationFailed(220);
          NI0XW01.NI0XWCAE = "Y"; /* cntry already exists*/
          NLXREC.NLXERRF = "Y";
          set NI0XM100.XCTCD bold;
           /* set ctry mod. flag to no*/
          NI0XW01.NI0XWCRM = "N";
          NI0XS31(); /* reset update flags to no*/
          return;
        end
        NI0XWDX1 = NI0XWDX1 + 1;
      end
    end
  end

   /* **********************  END ni0xs39  ************************/
end // end NI0XS40


// validate the zitcd using RETR
Function NI0XS41()

  NLXREC.NLXCPROC = "NI0XS41";

  NI0XW01.NI0XWZTD = " "; /* blank out the zit desc*/

   /* validate the zitcd inco terms using RETR*/
  if (VPRZIT01.ZITCD in ZITTBL.ZITCD)
    NI0XW01.NI0XWZTD = ZITTBL.ZITABRV[sysVar.arrayIndex];
  end
  if (sysVar.arrayIndex > 0) /* zitcd exists*/
     /* ezetst contains the row # of the item*/
    set NI0XM100.ZITCD normal;
    if (NI0XM100.ZITCDTXT > " ") /* if zit text exists*/
      /* next sentence*/
    else
      NI0XM100.ZITCDTXT = ZITTBL.ZITDESC[sysVar.arrayIndex];
    end
  else
    set NI0XM100.ZITCD cursor, modified, bold;
    converseLib.validationFailed(194); /* inco terms does not exist*/
    NLXREC.NLXERRF = "Y";
    return;
  end

end // end NI0XS41


//*** RECORD=NI0XW01 ****
// This is the main working storage record for NI0X.
// 
// Maintenance:
// 
// Date      Userid    Description of change
// 04/24/91   LNGO     CREATED ON
// ------------------------------------------------------------
// ***********************
Record NI0XW01 type basicRecord
  10 NI0XWXTC NI0XWXTC ; 
  10 NI0XWZTD NI0XWZTD ; 
  10 NI0XWSUM NI0XWSUM ; 
  10 NI0XWOID NI0XWOID ; 
  10 NI0XWPRF NI0XWPRF ; 
  10 NI0XWNOI NI0XWNOI ; 
  10 NI0XWOFL NI0XWOFL ; 
  10 NI0XWDX1 NI0XWDX1 ; 
  10 NI0XWDX2 NI0XWDX2 ; 
  10 NI0XWIER NI0XWIER ; 
  10 NI0XWEDT NI0XWEDT ; 
  10 NI0XWMOD NI0XWMOD ; 
  10 NI0XWCAE NI0XWCAE ; 
  10 NI0XWBLK NI0XWBLK ; 
  10 NI0XWPUP NI0XWPUP ; 
  10 NI0XWFDT NI0XWFDT ; 
    15 NI0XWMM NI0XWMM ; 
    15 NI0XWDD NI0XWDD ; 
    15 NI0XWYY NI0XWYY ; 
  10 NI0XWOKE NI0XWOKE ; 
    15 NI0XWPRX NI0XWPRX ; 
    15 NI0XWCRT NI0XWCRT ; 
    15 NI0XWFIL NI0XWFIL ; 
  10 NI0XWEND NI0XWEND ; 
  10 NI0XWPOP NI0XWPOP ; 
  10 NI0XWZIP NI0XWZIP ; 
  10 NI0XWXCT NI0XWXCT ; 
  10 NI0XWXCY NI0XWXCY ; 
  10 NI0XWCT1 NI0XWCT1 ; 
  10 NI0XWCT2 NI0XWCT2 ; 
  10 NI0XWPIX NI0XWPIX ; 
  10 NI0XWCHC NI0XWCHC ; 
  10 NI0XWDT2 NI0XWDT2 ; 
  10 NI0XXCTG NI0XXCTG [50] ; 
    15 NI0XWCTH NI0XWCTH ; 
    15 NI0XWCTB NI0XWCTB ; 
  10 NI0XWCNT NI0XWCNT ; 
  10 NI0XWMCT NI0XWMCT ; 
  10 NI0XWMDL NI0XWMDL ; 
  10 NI0XWCMX NI0XWCMX ; 
  10 NI0XWTXT NI0XWTXT ; 
  10 NI0XWCRF NI0XWCRF ; 
  10 NI0XWCEX NI0XWCEX ; 
  10 NI0XWED1 NI0XWED1 ; 
  10 NI0XWONT NI0XWONT ; 
  10 NI0XWZXM NI0XWZXM ; 
  10 NI0XWCRM NI0XWCRM ; 
  10 NI0XWUPT NI0XWUPT ; 
  10 NI0XWINE NI0XWINE ; 
end // end NI0XW01


// screen arrays flag
DataItem NI0XWBLK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// country already exist flag
DataItem NI0XWCAE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// country code exist in XCTTBL
DataItem NI0XWCEX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// WS CHANGE COUNT
DataItem NI0XWCHC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// country max count
DataItem NI0XWCMX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// country count
DataItem NI0XWCNT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// country code found flag
DataItem NI0XWCRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// xctcd modified flag
DataItem NI0XWCRM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// country
DataItem NI0XWCRT char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// change count before
DataItem NI0XWCT1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// change count after
DataItem NI0XWCT2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// temp country occurrences
DataItem NI0XWCTB char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// country occurrences
DataItem NI0XWCTH char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// field day
DataItem NI0XWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// current date in ccyymmdd
DataItem NI0XWDT2 int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end


// ws array index1
DataItem NI0XWDX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// ws array index2
DataItem NI0XWDX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// end selected ctry flag
DataItem NI0XWED1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// edit flag
DataItem NI0XWEDT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// quit flag
DataItem NI0XWEND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// format mmddyy
DataItem NI0XWFDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// field year
DataItem NI0XWFIL char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// init error flag
DataItem NI0XWIER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// inco terms exist flag
DataItem NI0XWINE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// map count
DataItem NI0XWMCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// ws max country count
DataItem NI0XWMDL smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// field month
DataItem NI0XWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// arrays modified flag
DataItem NI0XWMOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// no increment ctry table countr
DataItem NI0XWNOI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// niTrec found flag
DataItem NI0XWOFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// proforma to display
DataItem NI0XWOID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// niorec key for error trap
DataItem NI0XWOKE char(22)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// one time execute
DataItem NI0XWONT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// xcttbl select position
DataItem NI0XWPIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// pop-up window flag
DataItem NI0XWPOP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// PROFORMA found flag
DataItem NI0XWPRF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// proforma
DataItem NI0XWPRX char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// pre-update flag
DataItem NI0XWPUP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// ZIT SUM
DataItem NI0XWSUM decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// WS text sequence number
DataItem NI0XWTXT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// database update flag
DataItem NI0XWUPT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// ws country desc.
DataItem NI0XWXCT char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// ws temp country code
DataItem NI0XWXCY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// xct ctry cd to display
DataItem NI0XWXTC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// field year
DataItem NI0XWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// pop-up zit window flag
DataItem NI0XWZIP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// ZIT inco terms desc
DataItem NI0XWZTD char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// zittext modified flag
DataItem NI0XWZXM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// country codes group level
DataItem NI0XXCTG char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


