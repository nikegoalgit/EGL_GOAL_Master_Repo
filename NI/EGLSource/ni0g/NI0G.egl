package ni0g;

import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom2.XZCREC;
import corpcom3.XPNL001;
import corpcom3.XPNL002;
import corpcom3.XPNL003;
import corpcom3.XPNL004;
import corpcom3.XPNL005;
import corpcom3.XPXLA01;
import corpcom3.XPXPT01;
import corpcom3.XPXX001;
import corpcom3.XPZCH01;
import corpcom3.XPZIV01;
import corpcom3.XPZPR01;
import corpcom4.XSENTRY;
import corpcom4.XSNLS01;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom5.GLAENT;
import corpcom5.GLAGRP;
import corpcom5.GLANTAC;
import corpcom5.GLAPRJ;
import corpcom5.GLARCID;
import corpcom5.GLAREC;
import corpcom5.GLASUB;
import corpcom6.SQLCA;
import corpx1.XAUCD;
import corpx1.XAUTBL;
import corpx1.XCTDESC;
import corpx1.XCTTBL;
import corpx1.XGPCD;
import corpx1.XLATBL;
import corpx1.XPTTBL;
import corpy2.YSMXOB;
import corpz3.ZCHCD;
import corpz3.ZCHTBL;
import corpz3.ZISTBL;
import corpz3.ZIVCD;
import corpz3.ZIVDESC;
import corpz3.ZIVSHPTO;
import corpz3.ZIVTBL;
import corpz3.ZPRTBL;
import corpz3.ZRTCD;
import corpz3.ZRTTBL;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import corpz3.ZZZSDT;
import ku.common.KUCCOID;
import ku.common.KUCCONM;
import ku.common.KUCREC;
import ku.common.KULREC;
import ku.common.KUMREC;
import ku.common.KUMSTRID;
import ni.common.NIBGROUP;
import ni.common.NIBLFCUR;
import ni.common.NIBLIAMT;
import ni.common.NIBLINBR;
import ni.common.NIBLITXT;
import ni.common.NIDIVCID;
import ni.common.NIWREC;
import nl.common.*;
import op.common.OP1REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import vv.common.VDSTRB01;
import vv.common.VGCOA001;
import vv.common.VINTGL02;
import vv.common.VLADDR01;
import vv.common.VMIHDR01;
import vv.common.VMIITM01;
import vv.common.VMISCI01;
import vv.common.VNLCTL01;
import vv.common.VNLIVX01;
import vv.common.VNLXPT01;
import vv.common.VRCVGL01;
import vv.common.VZCHGL01;
//*** PROGRAM=NI0G ****
// ************************************************************
// 
//               ni0g - misc invoice maintenance
//               -------------------------------
// 
// This application allows the user to maintain and inquire
// on miscellaneous invoices.
// 
// Maintenance History:
//   Date   Who    Remarks
// -------- ------ --------------------------------------------
// 08-01-89 cross  Creation.
// 01-05-90 jjohns Add display key for nilrec in s38.
// 01-31-90 jjohns Add display key for niirec in s39.
// 02-01-90 jjohns Initialize ezetst for zchtbl lookups.
//                 Fixed problem in process 220 when there were
//                 no charge types on the 2nd line item screen.
// 03-16-90 jjohns Comment out GL specific comp logic on s43.
// 03-29-90 jjohns Change S43 to override charge type GL acct
//                 nbr with the entire comp nbr GL acct.
// 04-18-90 jbaker Remove security from xlbcd.  move zrt and
//                 rcvble gl stuff to new stmt grp ni0gs47.
// 05-02-90 jbaker Fix gl code derivation problem when xlbcd
//                 is changed.
// 05-14-90 jbaker Fix miitm and rcvgl not found problems
//                 related to original change of 5-2-90.
// 08-01-90 jbaker change ni0g120 and ni0g220 to update
//                 database only when changes are made.
// 08/08/90 jshann Prevent paging to NI0GM200 unless data is
//                 entered on NI0GM100.
// 09/12/90 jshann Move Ivc id to working storage when going to
//                 NI0H via PF17 and edit user-id.
// 02/11/91 jshann DB2 CHANGES XLBCD NOW ON CMPNY
// 03/21/91 jshann CHANGED ERROR MESSAGE WHEN LOOKING FOR PFHRE
// 07/31/91 lngo   Add error message instead of abending appl.
//                 in NI0GS28  when a receivable G/L code not
//                 found (sqlca.sqlcode = +100).
// 10/10/91 lngo   fix 2-page line item problem for john kemmpe
// 02/04/92 jshann do not override the rec glent id for for
//                 invoices with comp numbers. use id from cust
// 02/06/92 jjudki Task#491. Changes for distributor table.
// 03/27/92 JSHANN Task#587. Not allow amounts for NC ivc.
// 08/11/92 JSHANN Validate store before laddr fetch in ni0g101
// 11/18/92 jjudki Add zchcd to key in ni0gs05 for io4450.
// 11/29/92 DKINGM Task 655 - correct security for XPTCD.
//  4/22/93 jjudki Add use of pf24 to create/print new misc inv
//                and fix existing bug allowing data entry when
//                voiding an invoice.
//  5/10/93 jjudki Darken pf6,9,17,24 in inquiry or transferred
//                from NI0B.
// 05/25/93 JSHANN Add edit logic to the changing of status to
//                 active.  Do not allow maintenance after AC
//                 status.  Insure no dollar amounts on ivc if
//                 a 'NC' invoice.
//  5/28/93 jjudki Task#801. Allow change of shipto addess id
//                map100 for marketing invoices. Add pf12 on
//                map100.
// 06/30/93 JSHANN Dis-allow PF9
// 10/01/93 JSHANN fix run away transaction
// 10/14/93 JJUDKI Fix update abend.
// 11/09/93 JJUDKI NOV DB CHANGES.
// 06/01/94 JSHANN Add 25 invoice type for shipto addr over-rid
// 06/13/94 JSHANN Prevent 'NC' override for 100 gl-entity-id,
//                 allow mixing of other charges with 52, and
//                 add comp number validation.
// 06/24/94 JSHANN Add fix for rcv-cd in ni0gs47
// 04/03/95 ahowar finally putting ni0gs13 into prod after a
//                 it executing in onetime for a few weeks.
//                 ni0gs13 changed to handle comp customer
//                 entity on map 200.
// 04/20/95 ahowar if comp customer gl_proj_id = 'xx' spaces
//                 are forced into gl_proj_id. this is done in
//                 ni0gs43. (per shannon blankenship).
// 06/15/95 ahowar allowed nike owned to have differnt receive
//                 type on charge type compare. ni0gw01.xaucd
//                 if stmt in ni0gs17 added.(per s.blankenship)
// 01/16/96 ahowar edit for bad gl being added.
// *********************
Program NI0G type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "NL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  GLAREC GLAREC; // record
  KUCREC KUCREC; // record
  KULREC KULREC; // record
  KUMREC KUMREC; // record
  NI0GW01 NI0GW01; // record
  NI0GW02 NI0GW02; // record
  NIWREC NIWREC; // record
  NLXREC NLXREC; // record
  OP1REC OP1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  VDSTRB01 VDSTRB01; // record
  VGCOA001 VGCOA001; // record
  VINTGL02 VINTGL02; // record
  VLADDR01 VLADDR01; // record
  VMIHDR01 VMIHDR01; // record
  VMIITM01 VMIITM01; // record
  VMISCI01 VMISCI01; // record
  VNLCTL01 VNLCTL01; // record
  VNLIVX01 VNLIVX01; // record
  VNLXPT01 VNLXPT01; // record
  VRCVGL01 VRCVGL01; // record
  VZCHGL01 VZCHGL01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  XZCREC XZCREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XAUTBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use XLATBL {deleteAfterUse = yes}; // table
  use XPTTBL {deleteAfterUse = yes}; // table
  use ZCHTBL {deleteAfterUse = yes}; // table
  use ZIVTBL {deleteAfterUse = yes}; // table
  use ZISTBL {deleteAfterUse = yes}; // table
  use ZPRTBL {deleteAfterUse = yes}; // table
  use ZRTTBL {deleteAfterUse = yes}; // table
  use NI0GM.NI0GM100,  // forms
      NI0GM.NI0GM200,
      NI0GM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    NI0G000: NI0G000();
    exit program;
  end // end main
end // end NI0G

// main flow
Function NI0G000()
   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   perform initialization, set application revision nbrs,**/
   /* *   then do main perform until done with application      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0G000";
  COMMAREA.CACURRAP = "NI0G";
  ;
  NI0G001(); /* initilize the application*/
  ;
  NLXREC.NLXEOAF = "N"; /* set end-of-application flag to 'no'*/
  ;
  while (NLXREC.NLXEOAF == "N") /* while not end-of-aplication*/
    NI0G050(); /* process the application screen(s)*/
  end
  ;
  COMMAREA.CACURRAP = "NL0A";
  XPNL002();
end // end NI0G000

// initialize application
Function NI0G001()
  NLXREC.NLXCPROC = "NI0G001";
  ;
  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen*/
                                   /* converse*/
  VGVar.handleHardIOErrors = 1; /* return control to appl if hard db2*/
                                   /* error*/
  ;
  set NI0GW01 empty; /* clear working storage rec1*/
  set NI0GW02 empty; /* clear working storage rec2*/
  set NIWREC empty;
  set VNLCTL01 empty;
  set VMIHDR01 empty;
  set VMIITM01 empty;
  set VMISCI01 empty;
  set VNLIVX01 empty;
  set VRCVGL01 empty;
  set VZCHGL01 empty;
  set VNLXPT01 empty;
  set VINTGL02 empty;
  set XZCREC empty;
   /* SET KUAREC EMPTY; KUAREC DEINSTALLED FEB 91*/
  set KUCREC empty;
  set KULREC empty;
  set KUMREC empty;
  set VLADDR01 empty;
  set SQLCA empty;
  ;
  XSENTRY(); /* appl entry security*/
  XSSEGTR(); /* set segmented transaction id*/
  ;
   /* TEMP001;*/
  set NLXREC empty; /* clear common working storage*/
  XX0XS01(); /* get system date and time*/
  NI0GW01.NI0GWKCH = "Y"; /* init key chg for first time thru*/
  NI0GW01.NI0GWARN = "N"; /* init warning edit flag*/
  NI0GW01.NI0GW-GCOA-ERR-FLG = "N"; /* init gcoa not found flag*/
  ;
   /* check for inquiry only user*/
  if (COMMAREA.CAADDFL == "N"
   && COMMAREA.CACHGFL == "N")
    NI0GW01.NI0GWBIQ = "Y"; /* set basic inquiry only flag*/
  end
  ;
   /* set up key if special entry options*/
  NIWREC.NIWGROUP = COMMAREA.CAUSERA;
  if (COMMAREA.CAFROMAP == "NK0G")
    NI0GW01.NIDIVCID = NIWREC.NIDIVCID;
    NI0GM100.ZISCD = "CR";
    NI0GM100.ZISABRV = "CREDIT";
    NLXREC.NLXERRF = "Y";
    if (NIWREC.NIWMSGNR == 378)
      converseLib.validationFailed(378); /* credit performed but no claim created*/
    else
      converseLib.validationFailed(139); /* credit performed*/
    end
  else
    if (NIWREC.NIWFRMAP == "NI0A" /* user in middle of inquiry list*/
     || NIWREC.NIWFRMAP == "NI0B")
      NI0GW01.NI0GWINQ = "Y"; /* inquiry list flag*/
      NI0GW01.NIDIVCID = NIWREC.NIWIAIVC[NIWIAIDX];
    else
      if (COMMAREA.CAFROMAP == "NI0I" /* entry from other misc ivc appls*/
       || COMMAREA.CAFROMAP == "NI0H")
        NI0GW01.NIDIVCID = NIWREC.NIDIVCID;
         /* added to bring from i and h*/
        if (NIWREC.NIDIVCID == 0)
          NI0GW01.NI0GWINK = "Y"; /* incoming key flag*/
          NI0GW01.NI0GWIER = "Y"; /* error on init*/
          NI0GW01.KUCCOID = NIWREC.KUCCOID;
          NI0GW01.ZIVCD = NIWREC.ZIVCD;
        end
      else
        if (COMMAREA.CAFROMAP == "NI0P") /* return from "Submit"*/
          if (NIWREC.NIWMSGNR == 0) /* without error message*/
            if (NIWREC.NIWSBIND == "G") /* during "Create/Print"*/
                            /* init key chg for first time thru*/
              if (NIWREC.NIWIAIVC[NIWIAIDX] < 100000) /* Reg Inv Id*/
                NI0GW01.NIDIVCID = NIWREC.NIWIAIVC[NIWIAIDX];
              end
              NLXREC.NLXERRF = "Y";
              converseLib.validationFailed(397); /* invoice is printing*/
            end
          else
            NLXREC.NLXERRF = "Y";
            if (NIWREC.NIWMSGNR == 9999)
              converseLib.validationFailed();
            else
              converseLib.validationFailed(NIWREC.NIWMSGNR);
            end
            return;
          end
        else
          if (COMMAREA.CAITEM != " ") /* fastpath entry*/
            XPNL004(); /* edit caitem for 8 numeric digits*/
            if (NLXREC.NLXERRF == "Y")
              NI0GW01.NI0GWIER = "Y"; /* error on init flag*/
            else
              NI0GW01.NIDIVCID = NLXREC.NLXNUM8A;
            end
          end
        end
      end
    end
  end
  ;
  if (NI0GW01.NIDIVCID != 0)
    VNLIVX01.NIDIVCID = NI0GW01.NIDIVCID;
    NI0GS04(); /* read xref*/
    if (SQLCA.VAGen_SQLCODE == 0)
      NI0GS07(); /* read misc ivc hdr*/
    else
      set NI0GM100.NIDIVCID cursor, modified, bold;
      converseLib.validationFailed(47); /* invalid cd*/
      NI0GW01.NI0GWIER = "Y";
    end
  end
  ;
  NLXREC.NLXSNAME[1] = "NI0GM100"; /* init screens used in this appl*/
  NLXREC.NLXSNAME[2] = "NI0GM200"; /* init screens used in this appl*/
  NLXREC.NLXCSCRN = "NI0GM100"; /* set first screen to display*/
  ;
end // end NI0G001

// decide which map to display
Function NI0G050()
   /* ************************************************************/
   /* *   control process the application screen(s)             **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0G050"; /* set current process name*/
  ;
  sysVar.arrayIndex = 0;
  NLXREC.NLXSCRNX = 0;
  ;
  if (NLXREC.NLXCSCRN in NLXREC.NLXSNAME) /* if current-screen-name is*/
    NLXREC.NLXSCRNX = sysVar.arrayIndex; /* in the screen-array, then set*/
  end /* the screen-index*/
  ;
  set TA1REC empty;
  TA1REC.TA1MAP = NLXREC.NLXCSCRN; /* prepare for abend*/
  ;
  NLXREC.NLXBLDSC = "Y"; /* set build screen flag to 'yes'*/
  NLXREC.NLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
  NLXREC.NLXERRF = "N"; /* clear error flag*/
  NI0GW01.NI0GWEXT = 0; /* clear pf key warning ind*/
  NI0GW01.NI0GWDX2 = 1; /* index for position on m200*/
  ;
  if (NLXREC.NLXSCRNX == 1) /* if screen xx0xm100*/
    while (NLXREC.NLXEOSF == "N") /* show until user is done*/
      NI0G100();
    end
  else
    if (NLXREC.NLXSCRNX == 2) /* if screen xx0xm100*/
      while (NLXREC.NLXEOSF == "N") /* show until user is done*/
        NI0G200();
      end
    else
      TA1REC.TA1MAP = NLXREC.NLXCSCRN;
      TA1REC.TA1TBLKE = "UNKNOWN SCREEN NAME";
      TA1REC.TA1LOCAT[2] = NLXREC.NLXCSCRN;
      XPNL005(); /* abend*/
    end
  end
  ;
   /* at this point;*/
       /* if the end-of-application flag (NLXeoaf ) = 'n'*/
         /* the perform will return to the top of nl0%050...*/
       /* else*/
         /* the perform will auto return to nl0%000.*/
  ;
end // end NI0G050

// converse map m100
Function NI0G100()
   /* ************************************************************/
   /* *    process screen nl0%m100                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from nl0%050 until the end-of-screen   **/
   /* *     flag (nlxeosfl) is set to 'y'.                      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0G100";
  ;
  if (NLXREC.NLXBLDSC == "Y")
    NI0G101();
    NLXREC.NLXBLDSC = "N";
  else
    if (NI0GW-GCOA-ERR-FLG == "Y")
      if (converseVar.validationMsgNum == 0)
        converseLib.validationFailed(433);
      else
        if (converseVar.validationMsgNum == 433)
          NI0GM100.XXXMSG = NI0GW-GCOA-MESSAGE;
        end
      end
    end
  end
  ;
   /* ***********************************************************/
  converse NI0GM100 ;
   /* ***********************************************************/
  ;
  ;
  if (NI0GW-GCOA-ERR-FLG == "Y")
    /* continue;*/
    /* MOVE 433 TO EZEMSG;*/
  else
    VAGen_EZEMSG = " ";
    NLXREC.NLXERRF = "N";
  end
  ;
  NI0GW01.NI0GWKCH = "N"; /* init key chg flag*/
  ;
  if (NI0GW01.NI0GWINQ == "Y")
    NI0G114(); /* special pfkey edit for inq list*/
  else
    NI0G110(); /* validate pfkeys*/
  end
  ;
  if (NLXREC.NLXERRF == "N")
    NI0G120(); /* edit entries and update*/
  end
  ;
  if (NLXREC.NLXERRF == "N")
    NI0G130(); /* determine next action*/
  end
  ;
   /* at this point;*/
     /* if the end-of-screen flag (nlxeosfl) is 'n'*/
        /* we go back to top of process nl0%100.*/
     /* if the end-of-screen flag (nlxeosfl) is 'y'*/
        /* we return to nl0%050.*/
end // end NI0G100

// build screen
Function NI0G101()
   /* *****************************************/
   /* build screen*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NI0G101";
  ;
  set NI0GM100 initial;
  NI0GM100.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  NI0GSS1(); /* perform security*/
  ;
  if (NI0GW01.ZIVCD == " " /* user must enter key fields*/
   && NI0GW01.NIDIVCID == 0
   && NI0GW01.NI0GWIID == 0)
    return;
  end
  ;
  if (NI0GW01.NI0GWIER == "Y") /* error on init - so only fill in key*/
    NI0GW01.NI0GWIER = "N";
    NI0GM100.NIDIVCID = NI0GW01.NIDIVCID; /* ivc id*/
    NI0GM100.NI0GWIID = NI0GW01.NIDIVCID; /* misc ivc id*/
    NI0GM100.KUCCOID = NI0GW01.KUCCOID;
    NI0GM100.ZIVCD = NI0GW01.ZIVCD;
    return;
  end
  ;
   /* fill in hdr fields in ws and on screen*/
  ;
  if (NI0GW01.NI0GWKCH == "Y")
    NI0GS13(); /* fill hdr fields in ws*/
  end
  ;
  NI0GM100.KUCCOID = NI0GW01.KUCCOID;
  NI0GM100.KUMSTRID = NI0GW01.KUMSTRID;
  NI0GM100.ZIVCD = NI0GW01.ZIVCD;
  if (VMIHDR01.ZIVCD in ZIVTBL.ZIVCD)
    NI0GM100.ZIVDESC = ZIVTBL.ZIVDESC[sysVar.arrayIndex];
    NI0GW01.ZIVDESC = ZIVTBL.ZIVDESC[sysVar.arrayIndex];
    NI0GW01.ZIVSHPTO = ZIVTBL.ZIVSHPTO[sysVar.arrayIndex];
  end
  NI0GM100.KUCCONM = NI0GW01.KUCCONM;
  NI0GM100.XCTDESC = NI0GW01.XCTDESC;
  NI0GM100.NIDIVCID = NI0GW01.NIDIVCID; /* ivc id*/
  NI0GM100.NI0GWIID = NI0GW01.NI0GWIID; /* misc ivc id*/
  ;
  NI0GM100.OP1CMPNB = VMIHDR01.OP1CMPNB;
  NI0GM100.NIARCRFL = VMIHDR01.NIARCRFL;
  NI0GM100.ZISCD = VMIHDR01.ZISCD;
  if (VMIHDR01.ZISCD in ZISTBL.ZISCD)
    NI0GM100.ZISABRV = ZISTBL.ZISABRV[sysVar.arrayIndex];
  end
   /* format print date*/
  if (VMIHDR01.NIAPRTDT != 0)
    NLXREC.XXXWCYMD = VMIHDR01.NIAPRTDT;
    XPNL003();
    NI0GM100.NIAPRTDT = NLXREC.XXXFLDT;
  end
   /* format ivc date*/
  if (VMIHDR01.NIAIVCDT != 0)
    NLXREC.XXXWCYMD = VMIHDR01.NIAIVCDT;
    XPNL003();
    NI0GM100.NIAIVCDT = NLXREC.XXXFLDT;
  end
  NI0GM100.XPTCD = VMIHDR01.XPTCD;
  if (VMIHDR01.XPTCD in XPTTBL.XPTCD)
    NI0GM100.XPTDESC = XPTTBL.XPTDESC[sysVar.arrayIndex];
  end
   /* format payment terms due date*/
  if (VMIHDR01.NIAPTDDT != 0 /* no due date yet*/
   && VMIHDR01.NIAPTDDT != 20991231) /* special non-display date*/
    NLXREC.XXXWCYMD = VMIHDR01.NIAPTDDT;
    XPNL003();
    NI0GM100.NIAPTDDT = NLXREC.XXXFLDT;
  end
   /* format gl post mth*/
  if (VMIHDR01.NIAGLPMO != 0)
    NI0GW01.NI0GWMTH = VMIHDR01.NIAGLPMO;
    NI0GW01.NI0GWDMM = NI0GW01.NI0GWBMM;
    NI0GW01.NI0GWDSS = "-";
    NI0GW01.NI0GWDYY = NI0GW01.NI0GWBYY;
    NI0GM100.NIAGLPMO = NI0GW01.NI0GWDIS;
  end
  ;
  NI0GM100.XLBCD = VMIHDR01.XLBCD;
  if (VMIHDR01.XLBCD in XLATBL.XLBCD)
    NI0GM100.XXXADDR1 = XLATBL.XXX-ADDR1[sysVar.arrayIndex];
  end
  NI0GM100.OP1CUOID = VMIHDR01.OP1CUOID;
  NI0GM100.OP1NORID = VMIHDR01.OP1NORID;
   /* format ship date*/
  if (VMIHDR01.SR1SHPDT != 0)
    NLXREC.XXXWCYMD = VMIHDR01.SR1SHPDT;
    XPNL003();
    NI0GM100.SR1SHPDT = NLXREC.XXXFLDT;
  end
  ;
  NI0GM100.OP1CUPO = VMIHDR01.OP1CUPO;
  ;
   /* validate store*/
  KUMREC.KUCCOID = NI0GM100.KUCCOID;
  KUMREC.KUMSTRID = NI0GM100.KUMSTRID;
  NI0GS30(); /* read store row*/
  if (SQLCA.VAGen_SQLCODE != 0)
    set NI0GM100.KUMSTRID cursor, modified, bold;
    converseLib.validationFailed(84); /* invalid store number*/
    NLXREC.NLXERRF = "Y";
    return;
  end
  ;
   /* read cust long address for bill group*/
  VLADDR01.NLATYPIN = "C";
  VLADDR01.NLABSIND = " ";
  VLADDR01.NLAONECH = " ";
  VLADDR01.NLAINTGR = KUMREC.KUCCOID;
  VLADDR01.NLASINT1 = 0;
  VLADDR01.NLASINT2 = 0;
  VLADDR01.NLAADRID = KUMREC.KUMSTAID;
  NI0GS29(); /* select unique nlarec*/
  NI0GM100.NLAADDR1[1] = VLADDR01.XXX-ADDR1;
  NI0GM100.NLAADDR2[1] = VLADDR01.XXX-ADDR2;
  NI0GM100.NLAADDR3[1] = VLADDR01.XXX-ADDR3;
  NI0GM100.NLAADDR4[1] = VLADDR01.XXX-ADDR4;
  NI0GM100.NLAADDR5[1] = VLADDR01.XXX-ADDR5;
  NI0GM100.NLAADDR6[1] = VLADDR01.XXX-ADDR6;
  ;
   /* read ship-to address*/
    /* if required by zivcd*/
  if (NI0GW01.ZIVSHPTO == "Y")
     /* read cust long address for ship to*/
     /* use new shipto if overridden*/
    VLADDR01.NLATYPIN = "I";
    VLADDR01.NLABSIND = "S";
    VLADDR01.NLAONECH = " ";
    if (NI0GM100.NIDIVCID != 0)
      VLADDR01.NLAINTGR = NI0GM100.NIDIVCID;
    else
      if (NI0GM100.NI0GWIID != 0)
        VLADDR01.NLAINTGR = NI0GM100.NI0GWIID;
      end
    end
    VLADDR01.NLASINT1 = 0;
    VLADDR01.NLASINT2 = 0;
    VLADDR01.NLAADRID = 0;
    NI0GS-S-VLADDR01(); /* select unique nlarec*/
    if (SQLCA.VAGen_SQLCODE == 100)
      VLADDR01.NLATYPIN = "C";
      VLADDR01.NLABSIND = " ";
      VLADDR01.NLAONECH = " ";
      VLADDR01.NLAINTGR = KUMREC.KUCCOID; /* Store Cust Id*/
      VLADDR01.NLASINT1 = 0;
      VLADDR01.NLASINT2 = 0;
      if (NI0GW-NEW-SA > 0
       && (NI0GM100.ZIVCD == "25"
       || NI0GM100.ZIVCD == "30"))
        VLADDR01.NLAADRID = NI0GW-NEW-SA;
      else
        VLADDR01.NLAADRID = KUMREC.KUMSHAID; /* Store ShipTo Id*/
        NI0GW-OLD-SA = KUMREC.KUMSHAID;
      end
                                   /* Save original shipto addr id*/
      NI0GS29(); /* select unique nlarec*/
    end
    NI0GM100.NLAADDR1[2] = VLADDR01.XXX-ADDR1;
    NI0GM100.NLAADDR2[2] = VLADDR01.XXX-ADDR2;
    NI0GM100.NLAADDR3[2] = VLADDR01.XXX-ADDR3;
    NI0GM100.NLAADDR4[2] = VLADDR01.XXX-ADDR4;
    NI0GM100.NLAADDR5[2] = VLADDR01.XXX-ADDR5;
    NI0GM100.NLAADDR6[2] = VLADDR01.XXX-ADDR6;
  end
  ;
  NI0GM100.XXXUSRID = VMIHDR01.XXXUSRID;
  if (VMIHDR01.XXXUSRID in ZPRTBL.XXXUSRID)
    NI0GM100.XXXUNTXT = ZPRTBL.XXXUNTXT[sysVar.arrayIndex];
  end
  NI0GM100.NIAIVAMT = VMIHDR01.NIAIVAMT;
  ;
  if (NI0GM100.ZIVCD == "25"
   || NI0GM100.ZIVCD == "30")
    /* Next Sentence*/
  else
    set NI0GM100.NI0GM-100-SA skip, invisible; /* Shipto Address Id*/
    NI0GW-NEW-SA = 0;
  end
  ;
end // end NI0G101

// edit pfkeys
Function NI0G110()
   /* **************************************/
   /* edit pk keys*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NI0G110";
  ;
  if (NI0GM100.CATOAP != " ") /* if any fastpath data entered*/
    COMMAREA.CATOAP = NI0GM100.CATOAP;
    COMMAREA.CAITEM = NI0GM100.CAITEM;
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002();
    return;
  end
  ;
   /* user is inquiry only - cannot delete or reprint or print*/
  if (NI0GW01.NI0GWBIQ == "Y")
    if (converseVar.eventKey is pf6
     /* OR EZEAID IS PF9;   /* turned off on*/
     /* 6/30/93, how have on demand prt*/
     || converseVar.eventKey is pf24)
      converseLib.validationFailed(1); /* INVALID FUNCTION KEY*/
      NLXREC.NLXERRF = "Y";
      return;
    end
  end
  ;
  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf6 /* delete*/
   /* OR EZEAID IS PF9;  /* not valid any more*/
   || converseVar.eventKey is pf12) /* edit only*/
    /* OR EZEAID IS PF24;             /* print*/
     /* next sentence*/
  else
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa2
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      converseLib.validationFailed(36); /* pa1/2 cause loss of keyed data-rekey*/
                                   /* any change*/
       /* set alterable fields modified*/
      NLXREC.NLXERRF = "Y";
    else
      if (converseVar.eventKey is pf1)
        XSNLS01(); /* nil help routine - exit to gd01*/
      else
        if (converseVar.eventKey is pf2
         && NI0GM100.ZISCD == "VD")
          NI0GS44(); /* void formatting*/
          NLXREC.NLXERRF = "Y";
        else
          if (converseVar.eventKey is pf4)
            XSPF4();
          else
            if (converseVar.eventKey is pf3)
              COMMAREA.CATOAP = "NI0J";
              XPNL002();
              return;
            else
              if (converseVar.eventKey is pf15)
                COMMAREA.CATOAP = "NI0I";
                if (NI0GW01.NIDIVCID == 0)
                  NIWREC.NIDIVCID = NI0GW01.NI0GWIID;
                else
                  NIWREC.NIDIVCID = NI0GW01.NIDIVCID;
                end
                NIWREC.KUCCOID = NI0GW01.KUCCOID;
                NIWREC.ZIVCD = NI0GW01.ZIVCD;
                COMMAREA.CAUSERA = NIWREC.NIWGROUP;
                XPNL002();
                return;
              else
                if (converseVar.eventKey is pf17)
                  COMMAREA.CATOAP = "NI0H";
                  if (NI0GW01.NIDIVCID == 0)
                    NIWREC.NIDIVCID = NI0GW01.NI0GWIID;
                  else
                    NIWREC.NIDIVCID = NI0GW01.NIDIVCID;
                  end
                  /* MOVE 0 TO NIWREC.NIDIVCID;*/
                  NIWREC.KUCCOID = NI0GW01.KUCCOID;
                  NIWREC.ZIVCD = NI0GW01.ZIVCD;
                  COMMAREA.CAUSERA = NIWREC.NIWGROUP;
                  XPNL002();
                  return;
                else
                  if (converseVar.eventKey is pf18
                   && NI0GM100.ZISCD == "VD")
                    if (COMMAREA.CACLVL[1] == "N") /* check security*/
                      set NI0GM100.ZISCD cursor, modified, bold;
                      converseLib.validationFailed(73); /* user cannot credit*/
                      NLXREC.NLXERRF = "Y";
                      return;
                    else
                      VMIHDR01.ZISCD = "CR";
                                                 /* credit, instead of void*/
                      VMIHDR01.NIAACIND = "V"; /* set activity ind*/
                      NI0GS32(); /* update header*/
                      if (VMIHDR01.XPTCD != "NC")
                        COMMAREA.CATOAP = "NK0G";
                      end
                      NIWREC.KUCCOID = NI0GW01.KUCCOID;
                      NIWREC.NIWZDTCD = VMIHDR01.ZDTCD;
                      NIWREC.ZIVCD = NI0GW01.ZIVCD;
                      NIWREC.NIDIVCID = NI0GW01.NIDIVCID;
                      COMMAREA.CAUSERA = NIWREC.NIWGROUP;
                      XPNL002();
                      NI0GM100.ZISCD = "CR";
                      NI0GM100.ZISABRV = "CREDIT";
                      converseLib.validationFailed(139); /* credit peformed*/
                      NLXREC.NLXERRF = "Y";
                    end
                  else
                    if (converseVar.eventKey is pf21)
                      COMMAREA.CATOAP = "NI0A";
                      COMMAREA.CAUSERA = " ";
                      XPNL002();
                      return;
                    else
                      if (converseVar.eventKey is pf24) /* Print (call NI0P)*/
                        if (VMIHDR01.NIARCRFL == "Y" /* RECURRING INVOICE*/
                         || NI0GM100.NIARCRFL == "Y")
                          if (VMIHDR01.NIDIVCID == 0 /* DRAFT RECURRING*/
                           || VMIHDR01.NIDIVCID > 100000) /* DONT PRINT*/
                            COMMAREA.CATOAP = " ";
                            converseLib.validationFailed(408); /* Already submitted*/
                            set NI0GM100.KUCCOID cursor;
                            NLXREC.NLXERRF = "Y";
                            return;
                          end
                        end
                        if (VMIHDR01.NIAACIND == "R")
                          COMMAREA.CATOAP = " ";
                          converseLib.validationFailed(400); /* Already submitted*/
                          set NI0GM100.KUCCOID cursor;
                          NLXREC.NLXERRF = "Y";
                          return;
                        end
                        if (NI0GM100.ZISCD == "AC" /* Active Invoice*/
                         && NI0GM100.NIDIVCID != 0) /* Inv Id*/
                           /* next sentence*/
                        else
                          if (NI0GM100.ZISCD != "AC") /* Not Active Invoice*/
                            COMMAREA.CATOAP = " ";
                            converseLib.validationFailed(398); /* Cannot print*/
                            if (NI0GM100.ZISCD == "VD"
                             || NI0GM100.ZISCD == "CR")
                              set NI0GM100.ZISCD skip; /* Status*/
                              set NI0GM100.KUCCOID cursor;
                            else
                              set NI0GM100.ZISCD cursor, bold; /* Status*/
                            end
                            NLXREC.NLXERRF = "Y";
                          else
                            if (NI0GM100.ZISCD == "AC" /* Active Invoice*/
                             && NI0GM100.NI0GWIID == 0) /* No Misc Inv Id*/
                              COMMAREA.CATOAP = " ";
                              converseLib.validationFailed(399);
                                   /* Cannot print, No charges*/
                              set NI0GM100.NI0GWIID cursor, bold; /**/
                              set NI0GM100.ZISCD bold; /* Status*/
                              NLXREC.NLXERRF = "Y";
                            end
                          end
                        end
                        return;
                      else
                        COMMAREA.CATOAP = " ";
                        converseLib.validationFailed(2); /* INVALID FUNCTION KEY*/
                        NLXREC.NLXERRF = "Y";
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end
end // end NI0G110

// special pf key edit
Function NI0G114()
   /* **************************************/
   /* edit pk keys*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NI0I114";
  ;
  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "NI0J";
    COMMAREA.CAUSERA = " ";
    XPNL002();
    return;
  else
    if (converseVar.eventKey is pf4)
      COMMAREA.CAUSERA = " ";
      XSPF4();
    else
      if (converseVar.eventKey is pf15)
        COMMAREA.CATOAP = "NI0I";
        XPNL002();
        return;
      else
        if (converseVar.eventKey is pf21)
          COMMAREA.CATOAP = NIWREC.NIWFRMAP;
          NIWREC.NIWQUIT = "Y";
          COMMAREA.CAUSERA = NIWREC.NIWGROUP;
          XPNL002();
          return;
        else
          if (converseVar.eventKey is enter)
            NLXREC.NLXEOSF = "Y";
            NLXREC.NLXCSCRN = "NI0GM200";
            NI0GS05(); /* get line items and store to ws*/
            return;
          else
            COMMAREA.CATOAP = " ";
            converseLib.validationFailed(2); /* INVALID FUNCTION KEY*/
            NLXREC.NLXERRF = "Y";
          end
        end
      end
    end
  end
end // end NI0G114

// edit entries and update
Function NI0G120()
   /* **************************************/
   /* edit entries and update*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NI0GM120";
  ;
  set NI0GM100.KUCCOID cursor;
  set NI0GM100.ZIVCD normal;
  set NI0GM100.NIDIVCID normal;
  set NI0GM100.NI0GWIID normal;
  set NI0GM100.OP1CUOID normal;
  set NI0GM100.OP1NORID normal;
  if (NI0GM100.ZISCD == "VD")
    set NI0GM100.NIAPTDDT skip;
    set NI0GM100.OP1CUOID skip;
    set NI0GM100.OP1NORID skip;
    set NI0GM100.ZISCD skip;
  else
    set NI0GM100.NIAPTDDT normal;
    set NI0GM100.OP1CUOID normal;
    set NI0GM100.OP1NORID normal;
  end
  ;
  NI0GS09(); /* set modified flags*/
  NI0GS10(); /* perform window functions*/
  ;
  if (NI0GW01.NI0GWINK == "Y") /* incoming key needs edit*/
    NI0GW01.NI0GWINK = "N";
    NI0GW01.NI0GWMFZ = "Y"; /* zivcd modified*/
    NI0GW01.NI0GWMFK = "Y"; /* kuccoid modified*/
  end
  ;
   /* edit selections - perform edits in reverse sequence*/
  ;
  NI0GS11(); /* pre-edit key selection*/
  if (NLXREC.NLXERRF == "Y")
    return;
  end
  ;
   /* edit key changes*/
  if (NI0GW01.NI0GWKCH == "Y") /* key chg*/
    if (NI0GW01.NI0GWMF2 == "Y" /* ni0gwiid modified*/
     && NI0GM100.NI0GWIID != 0) /* and non-zero*/
      NI0GS34(); /* edit ni0gwiid key chg*/
    else
      if (NI0GW01.NI0GWMFI == "Y" /* nidivcid modified*/
       && NI0GM100.NIDIVCID != 0) /* and non-zero*/
        NI0GS35(); /* edit nidivcid key chg*/
      else
        if (NI0GM100.ZIVCD != " "
         && NI0GM100.KUCCOID != 0)
           /* edit company*/
          NI0GW01.KUCCOID = NI0GM100.KUCCOID;
          NI0GS08(); /* read company row*/
          NI0GS49(); /* read distributor row*/
          if (SQLCA.VAGen_SQLCODE == 0)
            set NI0GM100.KUCCOID normal;
          else
            set NI0GM100.KUCCOID cursor, modified, bold;
            converseLib.validationFailed(9); /* invalid cd*/
            NLXREC.NLXERRF = "Y";
            return;
                                   /* don't edit further if company invalid*/
          end
          NI0GS36(); /* edit zivcd & kuccoid key chg*/
        else
          set NI0GM100.KUCCOID cursor, modified, bold;
          set NI0GM100.ZIVCD modified, bold;
          converseLib.validationFailed(97); /* invalid ivc typ*/
          NLXREC.NLXERRF = "Y";
          return;
        end
      end
    end
  end
  ;
  if (NI0GW01.NI0GWKCH == "Y") /* if valid key chg*/
    NI0GW01.ZRTCD = " "; /* initialize for edit in process 220*/
    return;
  end
  ;
   /* edit rest of fields on screen*/
  ;
   /* edit pers resp*/
   /* IF NI0GW01.NI0GWMFU = 'Y';*/
  if (NI0GM100.XXXUSRID in ZPRTBL.XXXUSRID)
    NI0GM100.XXXUNTXT = ZPRTBL.XXXUNTXT[sysVar.arrayIndex];
    if (NI0GM100.ZISCD == "VD")
      set NI0GM100.XXXUSRID skip;
    end
    VMIHDR01.XXXUSRID = NI0GM100.XXXUSRID;
  else
    set NI0GM100.XXXUSRID cursor, modified, bold;
    converseLib.validationFailed(81); /* invalid user*/
    NLXREC.NLXERRF = "Y";
  end
   /* END ;*/
  ;
  if (NI0GW01.NI0GWMF8 == "Y") /* cust po modified*/
    VMIHDR01.OP1CUPO = NI0GM100.OP1CUPO;
  end
  ;
   /* Edit Ship Address Id*/
   /* F NI0GM100.NI0GM-100-SA IS MODIFIED;*/
  if (NI0GM100.NI0GM-100-SA > 0
   && (NI0GM100.ZIVCD == "25"
   || NI0GM100.ZIVCD == "30")
   && NI0GM100.NI0GWIID != 0)
    VLADDR01.NLATYPIN = "C"; /* nl_addr_sys_ind*/
    VLADDR01.NLABSIND = " "; /* nl_bill_shp_ind*/
    VLADDR01.NLAONECH = " "; /* nl_addr_one_char*/
    VLADDR01.NLAINTGR = KUMREC.KUCCOID; /* nl_addr_integer*/
    VLADDR01.NLAADRID = NI0GM-100-SA; /* nl_addr_id*/
    NI0GS-S-VLADDR01(); /* Select unique nlarec (large address*/
                                   /* table)*/
    if (SQLCA.VAGen_SQLCODE == 0)
      move NI0GM-100-SA to NI0GW-NEW-SA withV60Compat; /* Overridden nl_addr_id*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        set NI0GM-100-SA cursor, modified, bold;
        converseLib.validationFailed(402); /* shipto address does not exist*/
        NLXREC.NLXERRF = "Y";
      end
    end
  end
  ;
   /* edit ship date*/
  if (NI0GW01.NI0GWMF7 == "Y")
    if (NI0GM100.SR1SHPDT != " ")
      NLXREC.NLXVALDT = "Y";
      NLXREC.XXXED8C = NI0GM100.SR1SHPDT;
      XPNL001();
      if (NLXREC.NLXVALDT == "N")
        set NI0GM100.SR1SHPDT cursor, modified, bold;
        converseLib.validationFailed(5); /* invalid date*/
        NLXREC.NLXERRF = "Y";
      else
        set NI0GM100.SR1SHPDT normal;
        NI0GM100.SR1SHPDT = NLXREC.XXXFLDT;
        VMIHDR01.SR1SHPDT = NLXREC.XXXWCYMD;
      end
    else
      if (NI0GM100.XPTCD in XPTTBL.XPTCD)
        if (XPTTBL.XPTSHDTI[sysVar.arrayIndex] == "S") /* ship date required with term*/
          set NI0GM100.SR1SHPDT cursor, modified, bold;
          converseLib.validationFailed(137);
          NLXREC.NLXERRF = "Y";
        else
          set NI0GM100.SR1SHPDT normal;
          VMIHDR01.SR1SHPDT = 0;
        end
      end
    end
  end
  ;
   /* edit order, sub order*/
  if (NI0GW01.NI0GWMF5 == "Y" /* order modified*/
   || NI0GW01.NI0GWMF6 == "Y") /* sub-order modified*/
    if (NI0GM100.OP1CUOID != 0 /* A non-zero value is present*/
     || NI0GM100.OP1NORID != 0)
      OP1REC.OP1CUOID = NI0GM100.OP1CUOID; /* Load key*/
      OP1REC.OP1NORID = NI0GM100.OP1NORID;
      NI0GWORD = NI0GM100.OP1CUOID;
      OP1REC.OP1PARTN = NI0GW01.NI0GWPTN;
      NI0GS31(); /* Read Order file*/
      if (SQLCA.VAGen_SQLCODE != 0) /* Order not found*/
        set NI0GM100.OP1CUOID cursor, modified, bold;
        set NI0GM100.OP1NORID modified, bold;
        converseLib.validationFailed(14); /* Order number nrf during 'add'*/
        NLXREC.NLXERRF = "Y";
      else /* Order was found*/
        if (OP1REC.KUCCOID != KUCREC.KUCCOID) /* Right customer?*/
          set NI0GM100.OP1CUOID cursor, modified, bold;
          set NI0GM100.OP1NORID modified, bold;
          converseLib.validationFailed(35); /* Order invalid - no cust match*/
          NLXREC.NLXERRF = "Y";
        else
          VMIHDR01.OP1CUOID = NI0GM100.OP1CUOID;
          VMIHDR01.OP1NORID = NI0GM100.OP1NORID;
          VMIHDR01.OP1PARTN = NI0GW01.NI0GWPTN;
        end
      end
    else
      VMIHDR01.OP1CUOID = 0;
      VMIHDR01.OP1NORID = 0;
      VMIHDR01.OP1PARTN = 0;
    end
  end
  ;
   /* edit remit-to*/
  if (NI0GM100.XLBCD == "IR"
   || NI0GM100.XLBCD == "NL"
   || NI0GM100.XLBCD == "IN")
    if (NI0GM100.XLBCD in XLATBL.XLBCD)
      NI0GM100.XXXADDR1 = XLATBL.XXX-ADDR1[sysVar.arrayIndex];
      if (NI0GM100.OP1CMPNB == 0) /* no comp exists*/
        VMIHDR01.GLAENT = XLATBL.GLAENT[sysVar.arrayIndex]; /* rcvbl gl entity*/
        NI0GW01.GLAENT = XLATBL.GLAENT[sysVar.arrayIndex]; /* cust dflt*/
      end
      set NI0GM100.XLBCD normal;
         /* remit-to chg causes special upd processing for gl's*/
      if (NI0GM100.XLBCD != VMIHDR01.XLBCD)
        if (NI0GW01.NI0GWADD != "Y")
          NI0GW01.NI0GWRMF = "Y"; /* remit-to chgd flag*/
        end
      end
      VMIHDR01.XLBCD = NI0GM100.XLBCD;
    else
      set NI0GM100.XLBCD cursor, modified, bold;
      converseLib.validationFailed(40); /* invalid cd*/
      NLXREC.NLXERRF = "Y";
    end
  else
    set NI0GM100.XLBCD cursor, modified, bold;
    converseLib.validationFailed(40); /* invalid cd*/
    NLXREC.NLXERRF = "Y";
  end
  ;
  if (NI0GW01.NI0GWMFD == "Y" /* due date modified*/
   || NI0GW01.NI0GWMFX == "Y" /* xptcd modified*/
   || NI0GW01.NI0GWADD == "Y") /* in add mode force this edit*/
    NI0GS41(); /* edit payment term and due date*/
  end
  ;
   /* edit ivc stat*/
  if (NI0GW01.NI0GWMF4 == "Y")
    if (NI0GM100.ZISCD == "AC")
      if (VMIHDR01.XPTCD == "NV")
        set NI0GM100.ZISCD modified, bold;
        set NI0GM100.XPTCD cursor, modified, bold;
        converseLib.validationFailed(144); /* xptcd needs override*/
        NLXREC.NLXERRF = "Y";
      else
        if (VMIHDR01.NIAACIND == "M")
          set NI0GM100.ZISCD normal;
          VMIHDR01.ZISCD = NI0GM100.ZISCD;
        else
          converseLib.validationFailed(400); /* Already submitted for print*/
          NLXREC.NLXERRF = "Y";
        end
      end
      NI0GS-EDIT-ITEMS(); /* Edit items and make sure NC have no*/
                                   /* dollars*/
    else
      if (NI0GM100.ZISCD == "IN")
        if (VMIHDR01.NIAACIND == "M"
         || VMIHDR01.NIAACIND == " ")
          set NI0GM100.ZISCD normal;
          VMIHDR01.ZISCD = NI0GM100.ZISCD;
        else
          set NI0GM100.ZISCD cursor, modified, bold;
          converseLib.validationFailed(93); /* inactivate - do not void*/
          NLXREC.NLXERRF = "Y";
        end
      else
        if (NI0GM100.ZISCD == "VD") /* special void processing*/
          if (VMIHDR01.NIAGLPMO == 0) /* ivc not issued yet - no gl mth*/
            set NI0GM100.ZISCD cursor, modified, bold;
            converseLib.validationFailed(86); /* inactivate - do not void*/
            NLXREC.NLXERRF = "Y";
          else
            if (COMMAREA.CACLVL[1] == "Y") /* user has void security*/
              converseLib.validationFailed(64); /* msg to confirm void*/
              NLXREC.NLXERRF = "Y"; /* to re-display screen*/
            else
              set NI0GM100.ZISCD cursor, modified, bold;
              converseLib.validationFailed(65); /* user cannot perform voids*/
              NLXREC.NLXERRF = "Y";
            end
          end
        else
          set NI0GM100.ZISCD cursor, modified, bold;
          converseLib.validationFailed(38); /* invalid cd*/
          NLXREC.NLXERRF = "Y";
        end
      end
    end
  end
  ;
   /* edit recur flag*/
  if (NI0GW01.NI0GWMF3 == "Y")
    if (NI0GM100.NIARCRFL == "Y"
     || NI0GM100.NIARCRFL == "N")
      set NI0GM100.NIARCRFL normal;
      VMIHDR01.NIARCRFL = NI0GM100.NIARCRFL;
    else
      set NI0GM100.NIARCRFL cursor, modified, bold;
      converseLib.validationFailed(7); /* invalid cd*/
      NLXREC.NLXERRF = "Y";
    end
  end
  ;
   /* edit comp nbr*/
  if (NI0GW01.NI0GWMFC == "Y")
    if (NI0GM100.OP1CMPNB != 0)
      KUCREC.KUCCOID = NI0GM100.OP1CMPNB;
      NI0GW01.XAUCD = KUCREC.XAUCD; /* save cust xaucd*/
      call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* check comp nbr*/
      if (SQLCA.VAGen_SQLCODE == 0
       && KUCREC.XXXSTAT == "A")
        if (KUCREC.XAUCD in XAUTBL.XAUCD)
          if (XAUTBL.XATCD[sysVar.arrayIndex] == "06") /* valid comp*/
            VMIHDR01.OP1CMPNB = NI0GM100.OP1CMPNB;
            NI0GS46(); /* cal default payment terms*/
            NI0GS43(); /* read profitability table*/
            NI0GS08(); /* read kucrec to refresh cust fields*/
            NI0GS49(); /* read distributor table to refresh*/
                                  /* cust fields*/
          else
            set NI0GM100.OP1CMPNB cursor, modified, bold;
            converseLib.validationFailed(104);
            NLXREC.NLXERRF = "Y";
          end
        end
      else
        if (SQLCA.VAGen_SQLCODE != 100
         && SQLCA.VAGen_SQLCODE != 0)
          TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
          TA1REC.TA1LOCAT[3] = "IO0240 "; /* io module*/
          TA1REC.TA1DBASE = "DCUST"; /* database*/
          TA1REC.TA1TBLVU = "VCMPNY01"; /* table view*/
          XPNL005(); /* abend routine*/
        else /* comp not found*/
          set NI0GM100.OP1CMPNB cursor, modified, bold;
          converseLib.validationFailed(104);
          NLXREC.NLXERRF = "Y";
        end
      end
    else
      VMIHDR01.OP1CMPNB = NI0GM100.OP1CMPNB;
    end
  end
  ;
  if (NI0GW01.NI0GWMF1 == "Y" /* store modified*/
   && NI0GW01.ZIVSHPTO == "Y") /* ship-to addr required*/
    NI0GW01.NI0GWKCH = "Y"; /* set key chg - to re-display new addr*/
  end
  ;
   /* edit store*/
  if (NI0GW01.NI0GWMF1 == "Y") /* store modified*/
    KUMREC.KUCCOID = NI0GM100.KUCCOID;
    KUMREC.KUMSTRID = NI0GM100.KUMSTRID;
    NI0GS30(); /* read store row*/
    if (SQLCA.VAGen_SQLCODE == 0)
      set NI0GM100.KUMSTRID normal;
      VMIHDR01.KUMSTRID = NI0GM100.KUMSTRID;
      NI0GW01.KUMSTRID = NI0GM100.KUMSTRID;
    else
      set NI0GM100.KUMSTRID cursor, modified, bold;
      converseLib.validationFailed(84); /* invalid cd*/
      NLXREC.NLXERRF = "Y";
    end
  end
  ;
  if (NLXREC.NLXERRF == "Y")
    NI0GW01.NI0GWARN = "N";
    return;
  end
  ;
   /* perform warning edit after all other edits successful*/
  if (NI0GW01.NI0GWARN == "N")
    if (NI0GW01.NI0GWMFD == "Y" /* due date modified*/
     && NI0GM100.NIAPTDDT != " ")
      if (XX0XW01.XX0XWDAT > VMIHDR01.NIAPTDDT)
        set NI0GM100.NIAPTDDT cursor, modified, bold;
        converseLib.validationFailed(45); /* warning msg*/
        NI0GW01.NI0GWARN = "Y";
      end
    end
  else
    NI0GW01.NI0GWARN = "N";
  end
  ;
  if (NI0GW01.NI0GWARN == "Y")
    NLXREC.NLXERRF = "Y";
    return;
  end
  ;
  if (NI0GW01.NI0GWADD == "Y") /* will add after next screen*/
    return;
  end
  ;
   /* perform update*/
  ;
   /* get new remit-to gl entiry for rcvbl gl on hdr*/
   /* uncommented the folllowing 2 if stmts 4/24/90 jab.*/
  if (NI0GW01.NI0GWRMF == "Y") /* remit-to chgd*/
    if (VMIHDR01.XLBCD in XLATBL.XLBCD)
      VMIHDR01.GLAENT = XLATBL.GLAENT[sysVar.arrayIndex]; /* rcvbl gl entty*/
      NI0GW01.GLAENT = XLATBL.GLAENT[sysVar.arrayIndex]; /* cust dflt*/
    end
     /* added following line of code 4/24/90 jab.*/
    return;
  end
  ;
  converseLib.clearScreen();
  
  if (NI0GM100 is modified) /* if map has changed and passed all*/
                                   /* edits*/
    NI0GS32(); /* upd niarec*/
  end
  ;
   /* ************************  END NI0G120  **********************/
  ;
end // end NI0G120

// determine next action
Function NI0G130()
   /* **************************************/
   /* determine next action*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NI0G130";
  ;
  if (NI0GM100.ZIVCD == "25"
   || NI0GM100.ZIVCD == "30")
    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf12 /* Edit only*/
     || converseVar.eventKey is pf24) /* Submit for print*/
      converseLib.clearScreen();
      
                        /* Edit Ship Address Id*/
      if (NI0GM100.NI0GM-100-SA is modified)
        VLADDR01.NLATYPIN = "C"; /* nl_addr_sys_ind*/
        VLADDR01.NLABSIND = " "; /* nl_bill_shp_ind*/
        VLADDR01.NLAONECH = " "; /* nl_addr_one_char*/
        VLADDR01.NLAINTGR = KUMREC.KUCCOID;
                                   /* nl_addr_integer*/
        VLADDR01.NLAADRID = NI0GM-100-SA;
                                   /* nl_addr_id*/
        NI0GS-S-VLADDR01();
                                   /* Select unique nlarec (large address*/
                                   /* table)*/
        if (SQLCA.VAGen_SQLCODE == 0)
          move NI0GM-100-SA to NI0GW-NEW-SA withV60Compat;
                                   /* Overridden nl_addr_id*/
          if (NI0GM100.NIDIVCID > 0)
            VLADDR01.NLAINTGR = NI0GM100.NIDIVCID;
                                   /* nl_addr_integer*/
          else
            VLADDR01.NLAINTGR = NI0GM100.NI0GWIID;
                                   /* nl_addr_integer*/
          end
          VLADDR01.NLATYPIN = "I"; /* nl_addr_sys_ind*/
          VLADDR01.NLABSIND = "S"; /* nl_bill_shp_ind*/
          VLADDR01.NLAADRID = 0; /* nl_addr_id*/
          if (SQLCA.VAGen_SQLCODE == 0)
            NI0GS-D-VLADDR01(); /* Delete existing address*/
          end
          XX0XS01(); /* Get system date/time*/
          VLADDR01.ZZZCHGDT = XX0XW01.XX0XWDAT;
          VLADDR01.ZZZCHGTM = XX0XW01.XX0XWTIM;
          NI0GS-A-VLADDR01();
                                   /* Add/Insert new large address row*/
          ;
        else
          if (SQLCA.VAGen_SQLCODE == 100)
            set NI0GM-100-SA cursor, modified, bold;
            converseLib.validationFailed(402);
                                   /* shipto address does not exist*/
            NLXREC.NLXERRF = "Y";
            return;
          end
        end
      end
      ;
      ;
    end
  end
  ;
  if (converseVar.eventKey is pf12)
    NLXERRF = "Y";
    NLXBLDSC = "Y";
  end
  ;
  if (converseVar.eventKey is enter)
    if (NI0GM100.KUCCOID == 0  /* CUSTOMER NOT ENTERED*/
     && NI0GM100.ZIVCD == " "  /* Invoice type not entered*/
     && NI0GM100.NI0GWIID == 0 /* Misc id not entered*/
     && NI0GM100.NIDIVCID == 0) /* Invoice id not entered*/
      set NI0GM100.KUCCOID cursor, modified, bold;
      set NI0GM100.ZIVCD modified, bold;
      set NI0GM100.NI0GWIID modified, bold;
      set NI0GM100.NIDIVCID modified, bold;
      converseLib.validationFailed(3); /* Please enter option*/
      NLXREC.NLXERRF = "Y";
    else
      if (NI0GW01.NI0GWKCH == "Y")
        NLXREC.NLXBLDSC = "Y";
      else
        NLXREC.NLXEOSF = "Y";
        NLXREC.NLXCSCRN = "NI0GM200";
        if (VMIHDR01.NIDIVCID != 0) /* existing misc ivc*/
          NI0GS05(); /* get line items and store to ws*/
          if (NI0GW01.NI0GWRMF == "Y") /* remit-to chgd*/
            converseLib.validationFailed(163); /* remit-to changed, scroll forward*/
                   /* MOVE 'N' TO NI0GW01.NI0GWRMF;*/
                   /* MOVE 1 TO NI0GW01.NI0GWDX5     ; init work index*/
            /* WHILE NI0GW01.NI0GWDX5 LE NI0GW01.NI0GWDX1; le max in array*/
                     /* IF NI0GW02.NLXGLACC(NI0GWDX5) = ' ';*/
                       /* ; next sentence*/
                     /* ELSE ;*/
                       /* MOVE NI0GW02.ZCHCD(NI0GWDX5) TO NIKREC.ZCHCD;*/
                       /* NI0GS14             ;get nikrec*/
                       /* ; if dflt cust gl entity was used in derivation*/
                       /* IF NIKREC.GLENTID EQ ' ';*/
                /* MOVE NI0GW02.NLXGLACC(NI0GWDX5) TO NLXREC.NLXGLACC;*/
                /* MOVE NI0GW01.GLENTID TO NLXREC.GLENTID; use cust dflt*/
                /* MOVE NLXREC.NLXGLACC TO NI0GW02.NLXGLACC(NI0GWDX5);*/
                         /* MOVE 'Y' TO NI0GW02.NI0GWUPD(NI0GWDX5);*/
                       /* END ;*/
                     /* END ;*/
                     /* NI0GW01.NI0GWDX5 = NI0GW01.NI0GWDX5 + 1;*/
          end
               /* END ;*/
        end
      end
    end
  end
  ;
  if (converseVar.eventKey is pf6) /* delete ivc*/
    if (NI0GW01.NI0GWADD == "Y")
      converseLib.validationFailed(50); /* function not valid during add mode*/
      NLXREC.NLXERRF = "Y";
      return;
    else
      if (VMIHDR01.ZISCD == "IN") /* inactive status*/
        if (VMIHDR01.NIAACIND == "M")
          if (COMMAREA.CAUSERID == VMIHDR01.XXXUSRID)
            if (NI0GW01.NI0GWEXT == 6) /* delete previously attempted*/
              NI0GW01.NI0GWEXT = 0;
            else
              NI0GW01.NI0GWEXT = 6;
              converseLib.validationFailed(99); /* warning, about to delete*/
              NLXREC.NLXERRF = "Y";
              return;
            end
            NI0GS33(); /* delete xref, hdr, line items*/
            NI0GW01.ZIVCD = " "; /* init keys in ws*/
            NI0GW01.KUCCOID = 0;
            NI0GW01.NIDIVCID = 0;
            NI0GW01.NI0GWIID = 0;
            NLXREC.NLXBLDSC = "Y";
            return;
          else
            converseLib.validationFailed(92); /* only creator can delete an invoice*/
            NLXREC.NLXERRF = "Y";
            return;
          end
        else
          converseLib.validationFailed(48); /* invoice cannot be deleted*/
          NLXREC.NLXERRF = "Y";
          return;
        end
      else
        converseLib.validationFailed(49); /* status not 'IN', cannot delete*/
        NLXREC.NLXERRF = "Y";
        return;
      end
    end
  end
  ;
   /* F EZEAID IS PF9;                /* re-print ivc*/
   /* IF NI0GW01.NI0GWADD = 'Y';*/
     /* MOVE 50 TO EZEMNO;           /* not valid while in add mode*/
     /* MOVE 'Y' TO NLXREC.NLXERRF;*/
     /* EZERTN;*/
   /* ELSE;*/
     /* IF NIAREC.ZISCD = 'AC';      /* active status*/
       /* IF NIAREC.NIAACIND = 'P';*/
         /* OR NIAREC.NIAACIND = 'R';*/
         /* MOVE 'R' TO NIAREC.NIAACIND;*/
         /* NI0GS32;                 /* upd niarec*/
         /* MOVE 90 TO EZEMNO;       /* ivc will be re-printed*/
         /* EZERTN;*/
       /* ELSE;*/
         /* MOVE 51 TO EZEMNO;       /* invoice cannot be re-printed*/
         /* MOVE 'Y' TO NLXREC.NLXERRF;*/
         /* EZERTN;*/
       /* END;*/
     /* ELSE;*/
       /* MOVE 51 TO EZEMNO;         /* invoice cannot be re-printed*/
       /* MOVE 'Y' TO NLXREC.NLXERRF;*/
       /* EZERTN;*/
     /* END;*/
   /* END;*/
   /* ND;*/
  ;
  if (converseVar.eventKey is pf24) /* Print new misc invoice*/
    if (VMIHDR01.NIAACIND == "P"
     || VMIHDR01.NIAACIND == "M")
      NIWREC.NIWSBIND = "G"; /* print new misc invoice*/
      NIWREC.NIWMSGNR = 0; /* initialize error msg number*/
      NIWIAIDX = 1; /* invoice pointer*/
      if (NI0GW01.NIDIVCID != 0) /* invoice id*/
        if (VMIHDR01.NIAACIND == "P")
          VMIHDR01.NIAACIND = "R";
          NI0GS32(); /* upd niarec*/
        end
        NIWREC.NIWIAIVC[NIWIAIDX] = NI0GW01.NIDIVCID; /* array invoice*/
      else
        if (NI0GW01.NI0GWIID != 0) /* misc invoice id*/
          VMIHDR01.NIAACIND = "R";
          NI0GS32(); /* upd niarec*/
          NIWREC.NIWIAIVC[NIWIAIDX] = NI0GW01.NI0GWIID;
                                   /* array invoice*/
        end
      end
      COMMAREA.CAUSERA = NIWREC.NIWGROUP;
      COMMAREA.CATOAP = "NI0P"; /* job submitter application*/
      XPNL002();
    end
  end
  ;
  ;
end // end NI0G130

// converse map m200
Function NI0G200()
   /* ************************************************************/
   /* *    process screen nl0%m200                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from nl0%050 until the end-of-screen   **/
   /* *     flag (nlxeosfl) is set to 'y'.                      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0G200";
  ;
  if (NLXREC.NLXBLDSC == "Y")
    NI0G201();
    NLXREC.NLXBLDSC = "N";
  end
  ;
  if (NI0GW-GCOA-ERR-FLG == "U") /* move the gcoa key into xxxmsg if*/
                                   /* the duplicate row flag is set*/
    converseLib.validationFailed(434);
    NI0GM200.XXXMSG = NI0GW-GCOA-MESSAGE;
    NI0GW-GCOA-ERR-FLG = "N";
  else /* otherwise clear xxxmsg*/
    NI0GM200.XXXMSG = " ";
  end
  ;
   /* ***********************************************************/
  converse NI0GM200 ;
   /* ***********************************************************/
  ;
  VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";
  ;
  if (NI0GW01.NI0GWINQ == "Y")
    NI0G214(); /* special pfkey edit for inq list*/
  else
    NI0G210(); /* validate pfkeys*/
  end
  ;
   /* perform edits even if scrn not modified*/
   /* this will force completion of default entries*/
  if (converseVar.eventKey is pf3)
     /* next sentence*/
  else
    if (NLXREC.NLXERRF == "N")
      NI0G220(); /* edit entries and update*/
    end
  end
  ;
  if (NLXREC.NLXERRF == "N")
    NI0G230(); /* determine next action*/
  end
  ;
   /* at this point;*/
     /* if the end-of-screen flag (nlxeosfl) is 'n'*/
        /* we go back to top of process nl0%100.*/
     /* if the end-of-screen flag (nlxeosfl) is 'y'*/
        /* we return to nl0%050.*/
end // end NI0G200

// build screen
Function NI0G201()
  NLXREC.NLXCPROC = "NI0G201";
  ;
   /* **************************************/
   /* build screen*/
   /* **************************************/
  ;
  set NI0GM200 initial;
  NI0GM200.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  NI0GSS2(); /* security routine*/
  ;
   /* fill in all screen fields*/
  ;
  NI0GM200.KUCCOID = NI0GW01.KUCCOID;
  NI0GM200.KUMSTRID = NI0GW01.KUMSTRID;
  NI0GM200.ZIVCD = NI0GW01.ZIVCD;
  NI0GM200.ZIVDESC = NI0GW01.ZIVDESC;
  NI0GM200.KUCCONM = NI0GW01.KUCCONM;
  NI0GM200.XCTDESC = NI0GW01.XCTDESC;
  NI0GM200.NIDIVCID = NI0GW01.NIDIVCID; /* ivc id*/
  NI0GM200.NI0GWIID = NI0GW01.NI0GWIID; /* misc ivc id*/
  ;
   /* move from ws array to screen*/
  ;
  NI0GW01.NI0GWDX3 = 1;
  while (NI0GWDX3 < 7)
    NI0GS02();
  end
  NI0GW01.NI0GWDX3 = 6;
  ;
  if (converseVar.validationMsgNum == 0) /* only use this msg if no others are in use*/
    if (NI0GW01.NI0GWDX1 >= NI0GW01.NI0GWDX2)
      converseLib.validationFailed(69);
    end
  end
  ;
end // end NI0G201

// edit pfkeys
Function NI0G210()
   /* **************************************/
   /* edit pk keys*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NI0G210";
  ;
  if (NI0GWADD == "Y")
    NI0GS37(); /* check for exit during add*/
    if (NLXREC.NLXERRF == "Y")
      return;
    end
  end
  ;
  if (NI0GM100.CATOAP != " ") /* if any fastpath data entered*/
    COMMAREA.CATOAP = NI0GM100.CATOAP;
    COMMAREA.CAITEM = NI0GM100.CAITEM;
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002();
    return;
  end
  ;
  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
     /* next sentence*/
  else
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa2
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      converseLib.validationFailed(36); /* pa1/2 cause loss of keyed data-rekey*/
                                   /* any change*/
       /* set alterable fields modified*/
      NLXREC.NLXERRF = "Y";
    else
      if (converseVar.eventKey is pf1)
        XSNLS01(); /* nil help routine - exit to gd01*/
      else
        if (converseVar.eventKey is pf4)
          XSPF4();
        else
          if (converseVar.eventKey is pf3)
            return;
          else
            if (converseVar.eventKey is pf15)
              COMMAREA.CATOAP = "NI0I";
              if (NI0GW01.NIDIVCID == 0)
                NIWREC.NIDIVCID = NI0GW01.NI0GWIID;
              else
                NIWREC.NIDIVCID = NI0GW01.NIDIVCID;
              end
              NIWREC.KUCCOID = NI0GW01.KUCCOID;
              NIWREC.ZIVCD = NI0GW01.ZIVCD;
              COMMAREA.CAUSERA = NIWREC.NIWGROUP;
              XPNL002();
              return;
            else
              if (converseVar.eventKey is pf17)
                COMMAREA.CATOAP = "NI0H";
                if (NI0GW01.NIDIVCID == 0)
                  NIWREC.NIDIVCID = NI0GW01.NI0GWIID;
                else
                  NIWREC.NIDIVCID = NI0GW01.NIDIVCID;
                end
                /* MOVE 0 TO NIWREC.NIDIVCID;*/
                NIWREC.KUCCOID = NI0GW01.KUCCOID;
                NIWREC.ZIVCD = NI0GW01.ZIVCD;
                COMMAREA.CAUSERA = NIWREC.NIWGROUP;
                XPNL002();
                return;
              else
                if (converseVar.eventKey is pf21)
                  COMMAREA.CATOAP = "NI0A";
                  COMMAREA.CAUSERA = " ";
                  XPNL002();
                  return;
                else
                  COMMAREA.CATOAP = " ";
                  converseLib.validationFailed(2); /* INVALID FUNCTION KEY*/
                  NLXREC.NLXERRF = "Y";
                end
              end
            end
          end
        end
      end
    end
  end
end // end NI0G210

// special pf key edit
Function NI0G214()
   /* **************************************/
   /* edit pk keys*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NI0I114";
  ;
  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
     /* next sentence*/
  else
    if (converseVar.eventKey is pf3)
         /* MOVE 'NI0J' TO COMMAREA.CATOAP;*/
         /* MOVE ' ' TO COMMAREA.CAUSERA;*/
         /* PERFORM XPNL002;*/
      NI0GW01.NI0GWEXT = 3;
      return;
    else
      if (converseVar.eventKey is pf4)
        COMMAREA.CAUSERA = " ";
        XSPF4();
      else
        if (converseVar.eventKey is pf15)
          COMMAREA.CATOAP = "NI0I";
          XPNL002();
          return;
        else
          if (converseVar.eventKey is pf21)
            COMMAREA.CATOAP = NIWREC.NIWFRMAP;
            NIWREC.NIWQUIT = "Y";
            COMMAREA.CAUSERA = NIWREC.NIWGROUP;
            XPNL002();
            return;
          else
            if (converseVar.eventKey is enter)
              COMMAREA.CATOAP = "NI0I";
              XPNL002();
              return;
            else
              COMMAREA.CATOAP = " ";
              converseLib.validationFailed(2); /* INVALID FUNCTION KEY*/
              NLXREC.NLXERRF = "Y";
            end
          end
        end
      end
    end
  end
end // end NI0G214

// edit entries and update
Function NI0G220()
  NLXREC.NLXCPROC = "NI0G220";
  ;
   /* **************************************/
   /* edit entries and update*/
   /* **************************************/
  ;
  NI0GS15(); /* set up modified flags*/
  ;
   /* perform window function for charge types*/
  NI0GW01.NI0GWDX4 = 0;
  while (NI0GW01.NI0GWDX4 < 6)
    NI0GW01.NI0GWDX4 = NI0GW01.NI0GWDX4 + 1;
    if (NI0GM200.ZCHCD[NI0GWDX4] == "?")
      XPXX001();
      while (XX0XW02.XX0XWEND == "N")
        XPZCH01();
      end
      set NI0GM200.ZCHCD[NI0GWDX4] cursor;
      if (XX0XW02.XX0XWPIX > 0)
        NI0GM200.ZCHCD[NI0GWDX4] = ZCHTBL.ZCHCD[XX0XWPIX];
        NI0GM200.ZCHDESC[NI0GWDX4] = ZCHTBL.ZCHDESC[XX0XWPIX];
      end
    end
  end
  converseLib.clearScreen();
  
  ;
   /* edit selections - perform edits in reverse sequence*/
  ;
   /* edit charge types*/
  NI0GW01.NI0GWDX4 = 7;
  NI0GW01.NI0GWDX6 = 1;
  while (NI0GW01.NI0GWDX4 > 1)
    NI0GW01.NI0GWDX4 = NI0GW01.NI0GWDX4 - 1;
    if (NI0GM100.XPTCD == "NC") /* no charge are to alway zero*/
      NI0GM200.NIBLIAMT[NI0GWDX4] = 0;
      NI0GWML3[NI0GWDX4] = "Y";
    end
    if (NI0GW01.NI0GWML1[NI0GWDX4] == "Y") /* zchcd modified*/
      if (NI0GM200.ZCHCD[NI0GWDX4] != " ")
        if (NI0GM200.ZCHCD[NI0GWDX4] in ZCHTBL.ZCHCD)
          NI0GM200.ZCHDESC[NI0GWDX4] = ZCHTBL.ZCHDESC[sysVar.arrayIndex];
          if (VMIHDR01.XLBCD == ZCHTBL.XLBCD1[sysVar.arrayIndex]
           || VMIHDR01.XLBCD == ZCHTBL.XLBCD2[sysVar.arrayIndex]
           || VMIHDR01.XLBCD == ZCHTBL.XLBCD3[sysVar.arrayIndex]
           || VMIHDR01.XLBCD == ZCHTBL.XLBCD4[sysVar.arrayIndex])
            set NI0GM200.ZCHCD[NI0GWDX4] normal;
          else
            set NI0GM200.ZCHCD[NI0GWDX4] cursor, modified, bold;
            converseLib.validationFailed(103); /* invalid cd*/
            NLXREC.NLXERRF = "Y";
          end
        else
          set NI0GM200.ZCHCD[NI0GWDX4] cursor, modified, bold;
          converseLib.validationFailed(10); /* invalid cd*/
          NLXREC.NLXERRF = "Y";
        end
      else
        set NI0GM200.ZCHCD[NI0GWDX4] normal;
        NI0GM200.ZCHDESC[NI0GWDX4] = " ";
        NI0GM200.GLAGRP[NI0GWDX4] = " ";
      end
    end
  end
  ;
   /* edit for line item amt always filled in with zchcd*/
  NI0GW01.NI0GWDX4 = 7;
  while (NI0GW01.NI0GWDX4 > 1)
    NI0GW01.NI0GWDX4 = NI0GW01.NI0GWDX4 - 1;
     /* only set to normal if chgs are possible*/
    if (NI0GW01.NI0GWINQ == "Y"  /* on invoice inquiry list*/
     || NI0GW01.NI0GWBIQ == "Y"  /* inquiry only user*/
     || VMIHDR01.NIAACIND == "P" /* ivc has been issued*/
     || VMIHDR01.NIAACIND == "R" 
     || VMIHDR01.NIAACIND == "V")
       /* next sentence*/
    else
      set NI0GM200.NIBLIAMT[NI0GWDX4] normal;
    end
    if (NI0GM200.NIBLIAMT[NI0GWDX4] == 0 /* must enter $ with chrg typ*/
     && NI0GM200.ZCHCD[NI0GWDX4] != " "  
     && VMIHDR01.XPTCD != "NC")          /* not a no charge invoice*/
      set NI0GM200.NIBLIAMT[NI0GWDX4] cursor, modified, bold;
      converseLib.validationFailed(42); /* $ required with chg typ*/
      NLXREC.NLXERRF = "Y";
    else
      if (NI0GM200.NIBLIAMT[NI0GWDX4] != 0 /* must enter $ with chrg typ*/
       && NI0GM200.ZCHCD[NI0GWDX4] == " ")
        set NI0GM200.ZCHCD[NI0GWDX4] cursor, modified, bold;
        converseLib.validationFailed(42); /* $ required with chg typ*/
        NLXREC.NLXERRF = "Y";
      end
    end
  end
  ;
   /* move modified line items to ws array*/
  NI0GW01.NI0GWDX3 = 1; /* start at top of screen*/
  NI0GW01.NI0GWDX4 = NI0GW01.NI0GWDX2 - 6;
  if (NI0GW01.NI0GWDX4 < 1)
    NI0GW01.NI0GWDX4 = 1;
  end
  while (NI0GW01.NI0GWDX3 < 7)
    NI0GS16(); /* move screen entries to ws array*/
  end
  ;
  if (NI0GW01.ZRTCD == " ")
    NI0GW01.ZRTCD = VMIHDR01.ZRTCD; /* init ws zrtcd for later*/
  end
  ;
   /* only perform if mod - since pre-edited at ivc typ entry*/
   /* always perform,   jab 4/24/90*/
   /* IF NI0GW01.NI0GWMOD = 'Y'; screen m200 modified;jab 04/24/90*/
  NI0GS17(); /* rcvbl typ edit*/
   /* ELSE ;*/
    /* IF NI0GW01.NI0GWADD NE 'Y'    ; not add mode*/
      /* MOVE NIAREC.ZRTCD TO NI0GW01.ZRTCD ; init ws zrtcd*/
    /* END ;*/
   /* END ; jab 4/24/90*/
  ;
  NI0GW01.NI0GWDX6 = 1;
  while (NI0GW01.NI0GWDX6 < 7)
    if (NI0GM200.ZCHCD[NI0GWDX6] > " ")
      if (NI0GM200.ZCHCD[NI0GWDX6] in ZCHTBL.ZCHCD)
        ;
        NI0GS28(); /* check for a valid receivable G/L code*/
      end
    end
    NI0GW01.NI0GWDX6 = NI0GW01.NI0GWDX6 + 1;
  end
  ;
  if (NI0GW01.NI0GWADD == "Y")
    NI0GS-EDIT-GL1();
    return; /* if edit errors do not update*/
  else
    NI0GS45(); /* edit for at least 1 line item*/
    if (NLXREC.NLXERRF == "Y")
      return; /* if edit errors do not update*/
    end
  end
  ;
  NI0GS-EDIT-GL1();
  if (NLXREC.NLXERRF == "Y")
    return; /* if edit errors do not update*/
  end
  ;
   /* perform updates as needed*/
  ;
   /* moved line item update/delete logic to statement ni0gs48*/
   /* due to the addition of logic needed for remit-to code chng.*/
   /* jab 05/17/90*/
  ;
  if (NI0GW01.NI0GWRMF == "Y") /* if the remit-to code has changed*/
    if (NI0GW01.NI0GWDX2 > NI0GW01.NI0GWDX1) /* end of line items*/
      NI0GS48(); /* check for add/update/delete line*/
                                   /* items*/
    end
  else
    NI0GS48(); /* check for add/update/delete line*/
                                   /* items*/
  end
  ;
  ;
   /* if ivc hdr amt chgs OR zrtcd chgs - upd hdr*/
   /* always update header  jab 4/24/90*/
   /* IF NI0GW01.NI0GWHTA NE NIAREC.NIAIVAMT ;*/
   /* OR NI0GW01.ZRTCD NE NIAREC.ZRTCD ; ws field filled in edit*/
  ;
  if (NI0GW01.NI0GWHTA != VMIHDR01.NIAIVAMT)
    VMIHDR01.NIAIVAMT = NI0GW01.NI0GWHTA;
  end
   /* if zrtcd chgs - upd hdr*/
  if (NI0GW01.ZRTCD != VMIHDR01.ZRTCD) /* ws field filled in edit*/
    if (KUCREC.KUCCOID == 694643)
      VMIHDR01.ZRTCD = "CO";
      NI0GW01.ZRTCD = "CO";
    else
      if (KUCREC.XAUCD == "31")
        VMIHDR01.ZRTCD = "IC";
        NI0GW01.ZRTCD = "IC";
      else
        VMIHDR01.ZRTCD = NI0GW01.ZRTCD;
      end
    end
    if (VMIHDR01.OP1CMPNB == 0) /* not a comp*/
      VMIHDR01.GLAENT = NI0GW01.GLAENT; /* use remit-to entity*/
      VRCVGL01.ZARCD = VDSTRB01.ZARCD; /* from distributor table*/
      VRCVGL01.ZRTCD = NI0GW01.ZRTCD;
      NI0GS39(); /* select unique niirec*/
      VMIHDR01.GLARCID = VRCVGL01.GLARCID;
      VMIHDR01.GLANTAC = VRCVGL01.GLANTAC;
      VMIHDR01.GLASUB = VRCVGL01.GLASUB;
      VMIHDR01.GLAPRJ = VRCVGL01.GLAPRJ;
    end
  end
  if (NI0GW01.NI0GWRMF == "Y") /* remit-to has been changed(not in add*/
                                   /* mode)*/
    if (NI0GW01.NI0GWDX2 > NI0GW01.NI0GWDX1) /* no more line items*/
      NI0GS32(); /* update misc ivc hdr*/
      NI0GW01.NI0GWRMF = "N";
    end
  else /* remit-to has not changed*/
    if (NI0GW01.NI0GWMOD == "Y") /* screen has been modified*/
      NI0GS32(); /* update misc ivc hdr*/
    end
  end
  ;
end // end NI0G220

// determine next action
Function NI0G230()
   /* **************************************/
   /* determine next action*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NI0G230";
  ;
  if (converseVar.eventKey is enter)
    if (NI0GW01.NI0GWADD == "Y"
     || NI0GW01.NI0GWRMF == "Y")
      if (NI0GW01.NI0GWDX2 > NI0GW01.NI0GWDX1)
        NI0GS45(); /* edit for at least 1 line item*/
        if (NLXREC.NLXERRF == "Y")
          return;
        end
        NI0GS-EDIT-GL2(); /* edit for bad gl in work recd*/
        if (NLXREC.NLXERRF == "Y")
          return;
        end
        if (NI0GW01.NI0GWADD == "Y")
          NI0GS23(); /* add new misc hdr and line items*/
          NI0GW01.NI0GWADD = "N";
        end
      else
        NLXREC.NLXBLDSC = "Y";
        return;
      end
    end
    if (NI0GW-NEW-SA > 0)
      if (NI0GM200.NIDIVCID > 0)
        VLADDR01.NLAINTGR = NI0GM200.NIDIVCID; /* nl_addr_integer*/
      else
        VLADDR01.NLAINTGR = NI0GM200.NI0GWIID; /* nl_addr_integer*/
      end
      VLADDR01.NLATYPIN = "I"; /* nl_addr_sys_ind*/
      VLADDR01.NLABSIND = "S"; /* nl_bill_shp_ind*/
      VLADDR01.NLAADRID = 0; /* nl_addr_id*/
      if (SQLCA.VAGen_SQLCODE == 0)
        NI0GS-D-VLADDR01(); /* Delete existing address*/
      end
      ;
    /* Edit Ship Address Id*/
      /* MOVE 'C' TO NLAREC.NLATYPIN; /* nl_addr_sys_ind*/
      /* MOVE ' ' TO NLAREC.NLABSIND; /* nl_bill_shp_ind*/
      /* MOVE ' ' TO NLAREC.NLAONECH; /* nl_addr_one_char*/
      /* MOVE KUMREC.KUCCOID TO NLAREC.NLAINTGR;/* nl_addr_integer*/
      /* MOVE NI0GM-100-SA TO NLAREC.NLAADRID;/* nl_addr_id*/
                                  /* NI0GS-S-VLADDR01;            /**/
                                   /* Select unique nlarec (large address*/
                                  /* table)*/
      XX0XS01(); /* Get system date/time*/
      VLADDR01.ZZZCHGDT = XX0XW01.XX0XWDAT;
      VLADDR01.ZZZCHGTM = XX0XW01.XX0XWTIM;
      NI0GS-A-VLADDR01(); /* Add/Insert new large address row*/
    end
    NLXREC.NLXEOSF = "Y";
    NLXREC.NLXCSCRN = "NI0GM100";
    return;
  end
  ;
  if (converseVar.eventKey is pf3)
    NLXREC.NLXEOSF = "Y";
    NLXREC.NLXCSCRN = "NI0GM100";
    NI0GW01.NI0GWEXT = 0; /* re-init exit check*/
    return;
  end
  ;
  if (converseVar.eventKey is pf7)
    if (NI0GW01.NI0GWDX2 <= 7)
      converseLib.validationFailed(029); /* cannot scroll back*/
    else
      NI0GW01.NI0GWDX2 = NI0GW01.NI0GWDX2 - 12;
      if (NI0GW01.NI0GWDX2 < 1)
        NI0GW01.NI0GWDX2 = 1;
      end
      NLXREC.NLXBLDSC = "Y";
    end
    return;
  end
  ;
  if (converseVar.eventKey is pf8)
    if (VMIHDR01.NIAACIND == "M"
     || VMIHDR01.NIAACIND == " ")
      NLXREC.NLXBLDSC = "Y";
      return;
    else
      if (NI0GW01.NI0GWDX2 > NI0GW01.NI0GWDX1)
        converseLib.validationFailed(030); /* cannot scroll forward*/
      else
        NLXREC.NLXBLDSC = "Y";
        return;
      end
    end
  end
  ;
end // end NI0G230

// Select Unique from NLAREC
Function NI0GS-A-VLADDR01()
  NLXREC.NLXCPROC = "NI0GS-A-VLADDR01";
  ;
   /* NLAREC - ADD new row*/
  ;
  call "IO4410" ("A ", SQLCA, VLADDR01) {isNoRefresh = yes, isExternal = yes}; /* ADD Long Address*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "A      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4410 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VLADDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NI0GS-A-VLADDR01

// fetch rows from NIDREC
Function NI0GS-CHECK-VNLIVX()
  ;
  NLXREC.NLXCPROC = "NI0GS-CHECK-VNLIVX"; /* set current proc name*/
   /* find if ref id is zero*/
  call "IO4460" ("S ", SQLCA, VNLIVX01) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    if (VNLIVX01.NIDREFID == 0) /* Misc Inv*/
      NI0GW01.NI0GWEND = "Y";
    end
  else
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4460 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VNLIVX01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
end // end NI0GS-CHECK-VNLIVX

// Select Unique from NLAREC
Function NI0GS-D-VLADDR01()
  NLXREC.NLXCPROC = "NI0GS-D-VLADDR01";
  ;
   /* NLAREC - Select Unique and DO NOT abend if row not found*/
  ;
  call "IO4410" ("D ", SQLCA, VLADDR01) {isNoRefresh = yes, isExternal = yes}; /* Read Long Address*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "D      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4410 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VLADDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NI0GS-D-VLADDR01

// ADD/UPDATE/DELETE LINE ITEMS
Function NI0GS-EDIT-GL1()
  ;
   /* **************************************/
   /* edit gl in the ni0dw02 record*/
   /* trying to fix bug of adding vmiitm01 with missing g/l fields*/
   /* **************************************/
  ;
  NI0GW01.NI0GWDX4 = 0;
  while (NI0GW01.NI0GWDX4 < NI0GW01.NI0GWDX1)
    NI0GW01.NI0GWDX4 = NI0GW01.NI0GWDX4 + 1;
    if (NI0GW02.NI0GWUPD[NI0GWDX4] == "Y")
      if (NI0GW02.ZCHCD[NI0GWDX4] != " ")
        if (NI0GW02.GLAENT[NI0GWDX4] == " "
         || NI0GW02.GLARCID[NI0GWDX4] == " "
         || NI0GW02.GLANTAC[NI0GWDX4] == " "
         || NI0GW02.GLASUB[NI0GWDX4] == " ")
          NLXREC.NLXERRF = "Y";
          converseLib.validationFailed(431);
          return;
        end
      end
    end
  end
  ;
end // end NI0GS-EDIT-GL1

// ADD/UPDATE/DELETE LINE ITEMS
Function NI0GS-EDIT-GL2()
  ;
   /* **************************************/
   /* edit gl in the ni0dw02 record*/
   /* trying to fix bug of adding vmiitm01 with missing g/l fields*/
   /* **************************************/
  ;
  ;
  NI0GW01.NI0GWDX4 = 0;
  while (NI0GW01.NI0GWDX4 < NI0GW01.NI0GWDX1)
    NI0GW01.NI0GWDX4 = NI0GW01.NI0GWDX4 + 1;
    if (NI0GW02.NI0GWUPD[NI0GWDX4] == "Y")
      if (NI0GW02.ZCHCD[NI0GWDX4] != " ")
        if (NI0GW02.GLAENT[NI0GWDX4] == " "
         || NI0GW02.GLARCID[NI0GWDX4] == " "
         || NI0GW02.GLANTAC[NI0GWDX4] == " "
         || NI0GW02.GLASUB[NI0GWDX4] == " ")
          NLXREC.NLXERRF = "Y";
          converseLib.validationFailed(432);
          return;
        end
      end
    end
  end
  ;
end // end NI0GS-EDIT-GL2

// Edit for items for active
Function NI0GS-EDIT-ITEMS()
  ;
  NLXREC.NLXCPROC = "NI0GS-EDIT-ITEMS"; /* set current proc name*/
  ;
  if (VMIHDR01.XPTCD == "NC") /* if a no charge*/
    NI0GS-NO-CHARGE(); /* make invoice correct*/
  else /* good mi invoice must have dollars*/
    if (VMIHDR01.NIAIVAMT == 0) /* if no dollars on invoice*/
      set NI0GM100.ZISCD cursor, modified, bold;
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(403);
    end
  end
  ;
end // end NI0GS-EDIT-ITEMS

// fetch row from vgcoa001
Function NI0GS-F-VGCOA001()
  ;
  NLXREC.NLXCPROC = "NI0GS-F-VGCOA001"; /* set current proc name*/
  ;
  VGCOA001.GA-GLBL-ACCT-ID = VINTGL02.GA-GLBL-ACCT-ID[1];
  ;
  if (VGCOA001.GA-FIN-PRD-CLS-CD == "XX")
    if (VINTGL02.XGPCD == "02")
      VGCOA001.GA-FIN-PRD-CLS-CD = "FW";
    else
      if (VINTGL02.XGPCD == "03")
        VGCOA001.GA-FIN-PRD-CLS-CD = "AP";
      else
        VGCOA001.GA-FIN-PRD-CLS-CD = "OT";
      end
    end
  else
     /* continue*/
  end
  ;
  if (VGCOA001.GA-BUS-UNT-CD == "XX")
    VGCOA001.GA-BUS-UNT-CD = OP1REC.XBCCD;
  end
  ;
   /* open a cursor on VGCOA001 using GA-GLBL-ACCT-ID*/
  ;
  call "VGCOA001" ("S3", SQLCA, VGCOA001) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* CONTINUE*/
  else
    TA1REC.TA1LOCAT[2] = "S3     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "VGCOA001 "; /* io module*/
    TA1REC.TA1DBASE = "DGENLD"; /* database*/
    TA1REC.TA1TBLVU = "VGCOA001"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
   /* FETCH THE FIRST ROW FROM VGCOA001*/
  ;
  call "VGCOA001" ("N3", SQLCA, VGCOA001) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* CONTINUE*/
  else
    TA1REC.TA1LOCAT[2] = "N3     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "VGCOA001 "; /* io module*/
    TA1REC.TA1DBASE = "DGENLD"; /* database*/
    TA1REC.TA1TBLVU = "VGCOA001"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
    /* move the old style gl-gen-led-acct to glarec*/
  ;
  GLAREC.GLAENT = VGCOA001.GL-ENTITY-ID;
  GLAREC.GLARCID = VGCOA001.GL-RSP-CTR-ID;
  GLAREC.GLANTAC = VGCOA001.GL-NATRL-ACCT-ID;
  GLAREC.GLASUB = VGCOA001.GL-SUB-ACCT-ID;
  GLAREC.GLAPRJ = VGCOA001.GL-PROJ-ID;
  ;
   /* close the vgcoa001 cursor*/
  ;
  call "VGCOA001" ("C3", SQLCA, VGCOA001) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* CONTINUE*/
  else
    TA1REC.TA1LOCAT[2] = "C3     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "VGCOA001 "; /* io module*/
    TA1REC.TA1DBASE = "DGENLD"; /* database*/
    TA1REC.TA1TBLVU = "VGCOA001"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
end // end NI0GS-F-VGCOA001

// fetch rows from NIBREC
Function NI0GS-FETCH-VMIITM()
  ;
  NLXREC.NLXCPROC = "NI0GS-FETCH-VMIITM"; /* set current proc name*/
  ;
  call "IO4450" ("S1", SQLCA, VMIITM01) {isNoRefresh = yes, isExternal = yes}; /* open cursor*/
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "S1     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4450 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VMIITM01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
  call "IO4450" ("N1", SQLCA, VMIITM01) {isNoRefresh = yes, isExternal = yes}; /* fetch first*/
  if (SQLCA.VAGen_SQLCODE == 0)
    NI0GW01.NI0GWONE = "N";
    NI0GW01.NI0GWDX1 = 0;
    set NI0GW02 empty;
    NI0GW01.NI0GWDX1 = VMIITM01.NIBLINBR;
    NI0GW02.NIBGROUP[NI0GWDX1] = VMIITM01.NIBGROUP;
    sysVar.arrayIndex = 1;
    if (VMIITM01.ZCHCD in ZCHTBL.ZCHCD) /* save rcvbl typ*/
      NI0GW02.ZRTCD[NI0GWDX1] = ZCHTBL.ZRTCD[sysVar.arrayIndex];
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      call "IO4450" ("C1", SQLCA, VMIITM01) {isNoRefresh = yes, isExternal = yes}; /* Close cursor*/
      VMIITM01.NIDIVCID = VNLIVX01.NIDREFID;
      NI0GS-NEW-VMIITM();
    else
      TA1REC.TA1LOCAT[2] = "N1     "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO4450 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VMIITM01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end
  ;
end // end NI0GS-FETCH-VMIITM

// fetch rows from NIBREC
Function NI0GS-NEW-VMIITM()
  ;
  NLXREC.NLXCPROC = "NI0GS-NEW-VMIITM"; /* set current proc name*/
  ;
  call "IO4450" ("S1", SQLCA, VMIITM01) {isNoRefresh = yes, isExternal = yes}; /* open cursor*/
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "S1     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4450 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VMIITM01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
  call "IO4450" ("N1", SQLCA, VMIITM01) {isNoRefresh = yes, isExternal = yes}; /* fetch first*/
  if (SQLCA.VAGen_SQLCODE == 0)
    NI0GW01.NI0GWONE = "N";
    NI0GW01.NI0GWDX1 = 0;
    set NI0GW02 empty;
    NI0GW01.NI0GWDX1 = VMIITM01.NIBLINBR;
    NI0GW02.NIBGROUP[NI0GWDX1] = VMIITM01.NIBGROUP;
    sysVar.arrayIndex = 1;
    if (VMIITM01.ZCHCD in ZCHTBL.ZCHCD) /* save rcvbl typ*/
      NI0GW02.ZRTCD[NI0GWDX1] = ZCHTBL.ZRTCD[sysVar.arrayIndex];
    end
    NI0GW01.NI0GWKCH = "Y";
    VMIHDR01.NIDIVCID = VMIITM01.NIDIVCID;
    call "IO4440" ("S ", SQLCA, VMIHDR01) {isNoRefresh = yes, isExternal = yes}; /* Select unique*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      call "IO4450" ("C1", SQLCA, VMIITM01) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/
      NI0GW01.NI0GWEND = "Y";
    else
      TA1REC.TA1LOCAT[2] = "N1     "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO4450 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VMIITM01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end
  ;
end // end NI0GS-NEW-VMIITM

// set dollars to zero for NC
Function NI0GS-NO-CHARGE()
  ;
  NLXREC.NLXCPROC = "NI0GS-NO-CHARGE"; /* set current proc name*/
  ;
  VMIHDR01.NIAIVAMT = 0;
  ;
  NI0GS05(); /* Get first record*/
  ;
  while (NI0GW01.NI0GWEND != "Y")
    NI0GW01.NI0GWDX1 = NI0GW01.NI0GWDX1 + 1;
    NI0GS06();
  end
  if (NI0GW01.NI0GWONE == "N")
    NI0GWDX4 = 0;
    while (NI0GWDX4 < NI0GWDX1)
      NI0GWDX4 = NI0GWDX4 + 1;
      if (NI0GW02.NIBLIAMT[NI0GWDX4] > 0)
        NI0GW02.NIBLIAMT[NI0GWDX4] = 0;
        NI0GW02.NIBLFCUR[NI0GWDX4] = 0;
        NI0GS19();
      end
    end
  end
  ;
end // end NI0GS-NO-CHARGE

// select unique from vgcoa001
Function NI0GS-S-VGCOA001()
  ;
  NLXREC.NLXCPROC = "NI0GS-S-VGCOA001"; /* set current proc name*/
  ;
  VGCOA001.GA-GLBL-ACCT-ID = VINTGL02.GA-GLBL-ACCT-ID[1];
  ;
  if (VGCOA001.GA-FIN-PRD-CLS-CD == "XX")
    if (VINTGL02.XGPCD == "02")
      VGCOA001.GA-FIN-PRD-CLS-CD = "FW";
    else
      if (VINTGL02.XGPCD == "03")
        VGCOA001.GA-FIN-PRD-CLS-CD = "AP";
      else
        VGCOA001.GA-FIN-PRD-CLS-CD = "OT";
      end
    end
  else
     /* continue*/
  end
  ;
  if (VGCOA001.GA-BUS-UNT-CD == "XX")
    VGCOA001.GA-BUS-UNT-CD = OP1REC.XBCCD;
  end
  ;
  call "VGCOA001" ("S1", SQLCA, VGCOA001) {isNoRefresh = yes, isExternal = yes};
  ;
  NI0GM100.XXXMSG = " ";
  NI0GM200.XXXMSG = " ";
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    GLAREC.GLAENT = VGCOA001.GL-ENTITY-ID;
    GLAREC.GLARCID = VGCOA001.GL-RSP-CTR-ID;
    GLAREC.GLANTAC = VGCOA001.GL-NATRL-ACCT-ID;
    GLAREC.GLASUB = VGCOA001.GL-SUB-ACCT-ID;
    GLAREC.GLAPRJ = VGCOA001.GL-PROJ-ID;
    NI0GW-GCOA-MESSAGE = " ";
    NI0GW01.NI0GW-GCOA-ERR-FLG = "N";
  else
    if (SQLCA.VAGen_SQLCODE == -811)
      /* MOVE 434 TO EZEMNO;          /* send message non unique row found*/
      NI0GW01.NI0GW-GCOA-ERR-FLG = "U"; /* set error flag for*/
                                  /* duplicate rows returned*/
      NI0GW-GCOA-TEXT = "DPROFT.VINTGL02 - ";
      NI0GW-GCOA-KEY = VINTGL02.GA-GLBL-ACCT-ID[1];
      NI0GS-F-VGCOA001();
    else
      if (SQLCA.VAGen_SQLCODE == +100)
        converseLib.validationFailed(433); /* send message row not found*/
        NLXREC.NLXERRF = "Y"; /* set error flag*/
        NI0GW01.NI0GW-GCOA-ERR-FLG = "Y"; /* set gcoa not found flag*/
        NI0GW-GCOA-TEXT = "DPROFT.VINTGL02 - ";
        NI0GW-GCOA-KEY = VINTGL02.GA-GLBL-ACCT-ID[1];
        NI0GM100.XXXMSG = NI0GW-GCOA-MESSAGE;
        NI0GM200.XXXMSG = NI0GW-GCOA-MESSAGE;
      else
        TA1REC.TA1LOCAT[2] = "S1     "; /* database action*/
        TA1REC.TA1LOCAT[3] = "VGCOA001 "; /* io module*/
        TA1REC.TA1DBASE = "DGENLD"; /* database*/
        TA1REC.TA1TBLVU = "VGCOA001"; /* table view*/
        XPNL005(); /* abend routine*/
      end
    end
  end
  ;
end // end NI0GS-S-VGCOA001

// Select Unique from NLAREC
Function NI0GS-S-VLADDR01()
  NLXREC.NLXCPROC = "NI0GS-S-VLADDR01";
  ;
   /* NLAREC - Select Unique and DO NOT abend if row not found*/
  ;
  call "IO4410" ("S ", SQLCA, VLADDR01) {isNoRefresh = yes, isExternal = yes}; /* Read Long Address*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4410 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VLADDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NI0GS-S-VLADDR01

// fetch next nicrec
Function NI0GS01()
  NLXREC.NLXCPROC = "NI0GS01"; /* set current proc name*/
  ;
   /* fetch from cursor*/
  call "IO4420" ("N1", SQLCA, VMISCI01) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    if (NI0GW01.NI0GWONE == "Y")
      NI0GW01.NI0GWONE = "N";
      NI0GW01.NI0GWDX1 = 0;
      set NI0GW02 empty;
    end
    NI0GW01.NI0GWDX1 = VMISCI01.NIBLINBR;
    NI0GW02.NIBLINBR[NI0GWDX1] = VMISCI01.NIBLINBR;
    NI0GW02.NIBLITXT[NI0GWDX1] = VMISCI01.NIBLITXT;
    NI0GW02.ZCHCD[NI0GWDX1] = VMISCI01.ZCHCD;
    sysVar.arrayIndex = 1;
    if (VMISCI01.ZCHCD in ZCHTBL.ZCHCD) /* save rcvbl typ*/
      NI0GW02.ZRTCD[NI0GWDX1] = ZCHTBL.ZRTCD[sysVar.arrayIndex];
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      call "IO4420" ("C1", SQLCA, VMISCI01) {isNoRefresh = yes, isExternal = yes};
      NI0GW01.NI0GWEND = "Y";
    else
      TA1REC.TA1LOCAT[2] = "N1     "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO4420 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VMISCI01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end
  ;
end // end NI0GS01

// move ws array to screen
Function NI0GS02()
  ;
  NLXREC.NLXCPROC = "NI0GS02";
  ;
   /* move ws array to screen*/
  ;
  if (NI0GW01.NI0GWDX2 <= NI0GW01.NI0GWDX1)
    NI0GM200.NIBLITXT[NI0GWDX3] = NI0GW02.NIBLITXT[NI0GWDX2];
    NI0GM200.NIBLIAMT[NI0GWDX3] = NI0GW02.NIBLIAMT[NI0GWDX2];
    NI0GM200.ZCHCD[NI0GWDX3] = NI0GW02.ZCHCD[NI0GWDX2];
    if (NI0GM100.XPTCD == "NC")
      NI0GM200.NIBLIAMT[NI0GWDX3] = 0;
    end
    if (NI0GW02.ZCHCD[NI0GWDX2] in ZCHTBL.ZCHCD)
      NI0GM200.ZCHDESC[NI0GWDX3] = ZCHTBL.ZCHDESC[sysVar.arrayIndex];
      if (NI0GW01.NI0GWADD == "Y") /* add mode*/
        set VZCHGL01 empty; /* init before look up*/
        VZCHGL01.ZCHCD = NI0GW02.ZCHCD[NI0GWDX2];
        NI0GS14(); /* get nikrec*/
        if (VMIHDR01.OP1CMPNB != 0 /* comp nbr ivc*/
         && VZCHGL01.GLARCID == " ")
          NLXREC.GLAENT = NI0GW01.GLAENT;
          NLXREC.GLARCID = NI0GW01.GLARCID;
          NLXREC.GLANTAC = NI0GW01.GLANTAC;
          NLXREC.GLASUB = NI0GW01.GLASUB;
          NLXREC.GLAPRJ = NI0GW01.GLAPRJ;
          NI0GM200.GLAGRP[NI0GWDX3] = NLXREC.GLAGRP; /* move to scrn*/
          NI0GW02.GLAGRP[NI0GWDX2] = NLXREC.GLAGRP; /* save in ws*/
        else
           /* format gl acct*/
          if (VZCHGL01.GLAENT == " ")
            NLXREC.GLAENT = NI0GW01.GLAENT; /* use cust dflt*/
          else
            NLXREC.GLAENT = VZCHGL01.GLAENT;
          end
          NLXREC.GLARCID = VZCHGL01.GLARCID;
          NLXREC.GLANTAC = VZCHGL01.GLANTAC;
          NLXREC.GLASUB = VZCHGL01.GLASUB;
          NLXREC.GLAPRJ = VZCHGL01.GLAPRJ;
          NI0GM200.GLAGRP[NI0GWDX3] = NLXREC.GLAGRP; /* move to scrn*/
          NI0GW02.GLAGRP[NI0GWDX2] = NLXREC.GLAGRP; /* save in ws*/
        end
      else
        NI0GM200.GLAGRP[NI0GWDX3] = NI0GW02.GLAGRP[NI0GWDX2];
      end
    end
  end
  ;
  NI0GW01.NI0GWDX2 = NI0GW01.NI0GWDX2 + 1;
  NI0GW01.NI0GWDX3 = NI0GW01.NI0GWDX3 + 1;
  ;
end // end NI0GS02

// declare cursor for nicrec
Function NI0GS03()
  ;
  NLXREC.NLXCPROC = "NI0GS03";
  ;
   /* declare and read cursor - store line items to ws*/
  ;
  VMISCI01.ZIVCD = NI0GW01.ZIVCD;
  VMISCI01.KUCCOID = NI0GW01.KUCCOID;
  call "IO4420" ("S1", SQLCA, VMISCI01) {isNoRefresh = yes, isExternal = yes};
  ;
   /* fetch and move rows to ws array*/
  ;
  NI0GW01.NI0GWEND = "N";
  NI0GW01.NI0GWONE = "Y";
  while (NI0GW01.NI0GWEND == "N")
    NI0GS01(); /* fetch row from nicrec*/
  end
  ;
end // end NI0GS03

// select unique from nidrec
Function NI0GS04()
  NLXREC.NLXCPROC = "NI0IS04"; /* set current proc name*/
  ;
  call "IO4460" ("S ", SQLCA, VNLIVX01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    if (VNLIVX01.ZDTCD != "MI") /* not a misc ivc*/
      SQLCA.VAGen_SQLCODE = 100;
      return;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      return;
    else
      TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO4460 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VNLIVX01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end
  ;
end // end NI0GS04

// declare cursor for nibrec
Function NI0GS05()
  NLXREC.NLXCPROC = "NI0GS05";
  ;
   /* declare and read cursor - store line items to ws*/
  ;
  if (VNLIVX01.NIDREFID == 0)
    VMIITM01.NIDIVCID = VNLIVX01.NIDIVCID; /* key is key*/
  else
    VMIITM01.NIDIVCID = VNLIVX01.NIDREFID; /* key is reference key*/
  end
  ;
  VMIITM01.ZCHCD = "**"; /* zch-chg-typ-cd*/
  ;
  call "IO4450" ("S1", SQLCA, VMIITM01) {isNoRefresh = yes, isExternal = yes};
  ;
   /* fetch and move rows to ws array*/
  ;
  NI0GW01.NI0GWEND = "N";
  NI0GW01.NI0GWONE = "Y";
  while (NI0GW01.NI0GWEND == "N")
    NI0GS06(); /* fetch row from nibrec*/
  end
  ;
  if (NI0GW01.NI0GWONE == "Y") /* no line items in cursor*/
     /* abend since xref was found - line items should exist*/
    NLXREC.NLXCPROC = "NI0GS05";
    TA1REC.TA1LOCAT[2] = "S1     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4450 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VMIITM01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
end // end NI0GS05

// fetch rows from nibrec
Function NI0GS06()
  NLXREC.NLXCPROC = "NI0GS06"; /* set current proc name*/
  ;
   /* fetch from cursor*/
  call "IO4450" ("N1", SQLCA, VMIITM01) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
    if (NI0GW01.NI0GWONE == "Y")
      NI0GW01.NI0GWONE = "N";
      NI0GW01.NI0GWDX1 = 0;
      set NI0GW02 empty;
    end
    NI0GW01.NI0GWDX1 = VMIITM01.NIBLINBR;
    NI0GW02.NIBGROUP[NI0GWDX1] = VMIITM01.NIBGROUP;
    sysVar.arrayIndex = 1;
    if (VMIITM01.ZCHCD in ZCHTBL.ZCHCD) /* save rcvbl typ*/
      NI0GW02.ZRTCD[NI0GWDX1] = ZCHTBL.ZRTCD[sysVar.arrayIndex];
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      call "IO4450" ("C1", SQLCA, VMIITM01) {isNoRefresh = yes, isExternal = yes};
      if (NI0GW01.NI0GWONE == "Y")
        if (VNLIVX01.NIDIVCID > 100000) /* Misc Inv*/
          NI0GS-CHECK-VNLIVX(); /* Find Ref Id*/
          if (NI0GW01.NI0GWEND == "N")
            NI0GS-FETCH-VMIITM(); /* Find Charges*/
          end
        else
          NI0GW01.NI0GWEND = "Y";
        end
      else
        NI0GW01.NI0GWEND = "Y";
      end
    else
      TA1REC.TA1LOCAT[2] = "N1     "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO4450 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VMIITM01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end
  ;
end // end NI0GS06

// select unique from niarec
Function NI0GS07()
  NLXREC.NLXCPROC = "NI0GS07"; /* set current proc name*/
  ;
  if (VNLIVX01.NIDREFID == 0)
    VMIHDR01.NIDIVCID = VNLIVX01.NIDIVCID; /* key is key*/
  else
    VMIHDR01.NIDIVCID = VNLIVX01.NIDREFID; /* key is reference key*/
  end
  ;
  call "IO4440" ("S ", SQLCA, VMIHDR01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
     /* abend on 100 - since xref was found*/
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4440 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VMIHDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
end // end NI0GS07

// select unique from kucrec
Function NI0GS08()
  ;
  NLXREC.NLXCPROC = "NI0GS08"; /* set current proc name*/
  ;
  KUCREC.KUCCOID = NI0GW01.KUCCOID;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* intl customer's only*/
    if (KUCREC.XAUCD == "31"
     || KUCREC.XAUCD == "32"
     || KUCREC.XAUCD == "33")
      if (KUCREC.XXXSTAT == "A")
         /* next sentence*/
      else
        SQLCA.VAGen_SQLCODE = 100;
      end
    else
      SQLCA.VAGen_SQLCODE = 100;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      return;
    else
      TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO0240 "; /* io module*/
      TA1REC.TA1DBASE = "DCUST"; /* database*/
      TA1REC.TA1TBLVU = "VCMPNY01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end
  ;
end // end NI0GS08

// set up modified flags
Function NI0GS09()
  ;
  NLXREC.NLXCPROC = "NI0GS09"; /* set current proc name*/
  ;
   /* set modified flags for editing after windowing*/
  ;
  ;
  if (NI0GM100.KUCCOID is modified)
    NI0GW01.NI0GWMFK = "Y";
  else
    NI0GW01.NI0GWMFK = "N";
  end
  if (NI0GM100.KUMSTRID is modified)
    NI0GW01.NI0GWMF1 = "Y";
  else
    NI0GW01.NI0GWMF1 = "N";
  end
  ;
  if (NI0GM100.ZIVCD is modified)
    NI0GW01.NI0GWMFZ = "Y";
  else
    NI0GW01.NI0GWMFZ = "N";
  end
  ;
  if (NI0GM100.NI0GWIID is modified)
    NI0GW01.NI0GWMF2 = "Y";
  else
    NI0GW01.NI0GWMF2 = "N";
  end
  if (NI0GM100.NIDIVCID is modified)
    NI0GW01.NI0GWMFI = "Y";
  else
    NI0GW01.NI0GWMFI = "N";
  end
  ;
  if (NI0GM100.OP1CMPNB is modified)
    NI0GW01.NI0GWMFC = "Y";
  else
    NI0GW01.NI0GWMFC = "N";
  end
  if (NI0GM100.NIARCRFL is modified)
    NI0GW01.NI0GWMF3 = "Y";
  else
    NI0GW01.NI0GWMF3 = "N";
  end
  if (NI0GM100.ZISCD is modified)
    NI0GW01.NI0GWMF4 = "Y";
  else
    NI0GW01.NI0GWMF4 = "N";
  end
  ;
  if (NI0GM100.XPTCD is modified)
    NI0GW01.NI0GWMFX = "Y";
  else
    NI0GW01.NI0GWMFX = "N";
  end
  if (NI0GM100.NIAPTDDT is modified)
    NI0GW01.NI0GWMFD = "Y";
  else
    NI0GW01.NI0GWMFD = "N";
  end
  ;
  if (NI0GM100.XLBCD is modified)
    NI0GW01.NI0GWMFB = "Y";
  else
    NI0GW01.NI0GWMFB = "N";
  end
  ;
  if (NI0GM100.OP1CUOID is modified)
    NI0GW01.NI0GWMF5 = "Y";
  else
    NI0GW01.NI0GWMF5 = "N";
  end
  if (NI0GM100.OP1NORID is modified)
    NI0GW01.NI0GWMF6 = "Y";
  else
    NI0GW01.NI0GWMF6 = "N";
  end
  if (NI0GM100.SR1SHPDT is modified)
    NI0GW01.NI0GWMF7 = "Y";
  else
    NI0GW01.NI0GWMF7 = "N";
  end
  ;
  if (NI0GM100.OP1CUPO is modified)
    NI0GW01.NI0GWMF8 = "Y";
  else
    NI0GW01.NI0GWMF8 = "N";
  end
  ;
  if (NI0GM100.XXXUSRID is modified)
    NI0GW01.NI0GWMFU = "Y";
  else
    NI0GW01.NI0GWMFU = "N";
  end
  ;
end // end NI0GS09

// perform windowing
Function NI0GS10()
  NLXREC.NLXCPROC = "NI0GS10"; /* set current proc name*/
  ;
   /* perform windowing*/
  ;
   /* ivc type cd*/
  if (NI0GM100.ZIVCD == "?")
    XPXX001();
    while (XX0XW02.XX0XWEND == "N")
      XPZIV01();
    end
    set NI0GM100.ZIVCD cursor;
    if (XX0XW02.XX0XWPIX > 0)
      NI0GM100.ZIVCD = ZIVTBL.ZIVCD[XX0XWPIX];
      NI0GM100.ZIVDESC = ZIVTBL.ZIVDESC[XX0XWPIX];
    end
  end
  ;
   /* payment terms*/
  if (NI0GM100.XPTCD == "?")
    XPXX001();
    while (XX0XW02.XX0XWEND == "N")
      XPXPT01();
    end
    set NI0GM100.XPTCD cursor;
    if (XX0XW02.XX0XWPIX > 0)
      NI0GM100.XPTCD = XPTTBL.XPTCD[XX0XWPIX];
      NI0GM100.XPTDESC = XPTTBL.XPTDESC[XX0XWPIX];
    end
  end
  ;
   /* remit-to cd*/
  if (NI0GM100.XLBCD == "?")
    XPXX001();
    while (XX0XW02.XX0XWEND == "N")
      XPXLA01();
    end
    set NI0GM100.XLBCD cursor;
    if (XX0XW02.XX0XWPIX > 0)
      NI0GM100.XLBCD = XLATBL.XLBCD[XX0XWPIX];
      NI0GM100.XXXADDR1 = XLATBL.XXX-ADDR1[XX0XWPIX];
    end
  end
  ;
   /* pers resp cd*/
  if (NI0GM100.XXXUSRID == "?")
    XPXX001();
    while (XX0XW02.XX0XWEND == "N")
      XPZPR01();
    end
    set NI0GM100.XXXUSRID cursor;
    if (XX0XW02.XX0XWPIX > 0)
      NI0GM100.XXXUSRID = ZPRTBL.XXXUSRID[XX0XWPIX];
      NI0GM100.XXXUNTXT = ZPRTBL.XXXUNTXT[XX0XWPIX];
    end
  end
  ;
  converseLib.clearScreen();
  
end // end NI0GS10

// edit key selection
Function NI0GS11()
  ;
  NLXREC.NLXCPROC = "NI0GS11"; /* set current proc name*/
  ;
   /* key change edits*/
   /* - only perform if one of the key fields is modified*/
  ;
  if (NI0GW01.NI0GWMFZ == "Y" /* zivcd modified*/
   || NI0GW01.NI0GWMF2 == "Y" /* ni0gwiid modified*/
   || NI0GW01.NI0GWMFI == "Y" /* nidivcid modified*/
   || NI0GW01.NI0GWMFK == "Y") /* kuccoid modified*/
    NI0GW01.NI0GWKCH = "Y"; /* set key chg flag*/
    NI0GW01.NI0GWADD = "N"; /* init add mode to no*/
  else
    return;
  end
  ;
   /* logic below edits key combinations*/
  ;
  if (NI0GW01.NI0GWMF2 == "Y" /* ni0gwiid modified*/
   && NI0GM100.NI0GWIID != 0) /* and non-zero*/
    if (NI0GW01.NI0GWMFI == "Y" /* nidivcid modified*/
     && NI0GM100.NIDIVCID != 0) /* and non-zero*/
      set NI0GM100.NI0GWIID cursor, modified, bold;
      set NI0GM100.NIDIVCID modified, bold;
      converseLib.validationFailed(94);
      NLXREC.NLXERRF = "Y";
    end
  end
  ;
  if (NI0GW01.NI0GWMFZ == "Y" /* zivcd modified*/
   && NI0GM100.ZIVCD != " ")  /* and non blank*/
    if (NI0GM100.NIDIVCID != 0) /* cannot fill in more than one key*/
      set NI0GM100.NIDIVCID cursor, modified, bold;
      converseLib.validationFailed(95);
      NLXREC.NLXERRF = "Y";
    end
    if (NI0GM100.NI0GWIID != 0)
      set NI0GM100.NI0GWIID cursor, modified, bold;
      converseLib.validationFailed(95);
      NLXREC.NLXERRF = "Y";
    end
    if (NI0GM100.KUCCOID == 0) /* must have with ivc typ cd*/
      set NI0GM100.KUCCOID cursor, modified, bold;
      converseLib.validationFailed(97);
      NLXREC.NLXERRF = "Y";
    end
  end
  ;
  if (NI0GW01.NI0GWMFK == "Y" /* kuccoid modified*/
   && NI0GM100.KUCCOID != 0)  /* and non blank*/
    if (NI0GM100.NIDIVCID != 0) /* cannot fill in more than one key*/
      set NI0GM100.NIDIVCID cursor, modified, bold;
      converseLib.validationFailed(96);
      NLXREC.NLXERRF = "Y";
    end
    if (NI0GM100.NI0GWIID != 0)
      set NI0GM100.NI0GWIID cursor, modified, bold;
      converseLib.validationFailed(96);
      NLXREC.NLXERRF = "Y";
    end
    if (NI0GM100.ZIVCD == " ") /* must have with kuccoid*/
      set NI0GM100.ZIVCD cursor, modified, bold;
      converseLib.validationFailed(97);
      NLXREC.NLXERRF = "Y";
    end
  end
  ;
  if (NLXREC.NLXERRF == "Y")
    return;
  end
  ;
   /* must fill in one key field*/
  if (NI0GM100.NIDIVCID == 0
   && NI0GM100.NI0GWIID == 0
   && NI0GM100.ZIVCD == " "
   && NI0GM100.KUCCOID == 0)
    set NI0GM100.KUCCOID cursor, modified, bold;
    set NI0GM100.ZIVCD modified, bold;
    set NI0GM100.NI0GWIID modified, bold;
    set NI0GM100.NIDIVCID modified, bold;
    converseLib.validationFailed(3); /* invalid cd*/
    NLXREC.NLXERRF = "Y";
    return;
  end
  ;
end // end NI0GS11

// fill in hdr fields to ws
Function NI0GS13()
  NLXREC.NLXCPROC = "NI0GS13"; /* set current proc name*/
  ;
   /* fill in hdr fields in ws*/
  ;
  NI0GW01.KUCCOID = VMIHDR01.KUCCOID;
  NI0GW01.KUMSTRID = VMIHDR01.KUMSTRID;
  NI0GW01.ZIVCD = VMIHDR01.ZIVCD;
  NI0GS08(); /* select unique kucrec*/
  NI0GS49(); /* select unique distributor*/
  NI0GW01.KUCCONM = KUCREC.KUCCONM;
  if (KUCREC.XCTCD in XCTTBL.XCTCD)
    NI0GW01.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
  end
  ;
   /* look up store*/
  KUMREC.KUCCOID = VMIHDR01.KUCCOID;
  KUMREC.KUMSTRID = VMIHDR01.KUMSTRID;
  NI0GS30(); /* select unique kumrec*/
   /* CUST.VBLGRP01 HAS BEEN DEINSTALLED*/
   /* NI0GS12                         ; get kuarec*/
  if (NI0GW01.NI0GWADD == "Y") /* add mode*/
    VMIHDR01.XLBCD = KUCREC.XLBCD;
    if (VMIHDR01.OP1CMPNB == 0)
      /* IF KUAREC.XLBCD IN XLATBL.XLBCD;*/
      if (KUCREC.XLBCD in XLATBL.XLBCD)
        NI0GW01.GLAENT = XLATBL.GLAENT[sysVar.arrayIndex]; /* dflt gl entity*/
      else
        /* comp gl entity defaulted*/
        /* MOVE KUAREC.XLBCD TO NIAREC.XLBCD;*/
      end
    else
        /* comp gl entity defaulted*/
    end
  else
    if (VMIHDR01.OP1CMPNB == 0)
      NI0GW01.GLAENT = VMIHDR01.GLAENT; /* dflt gl entity*/
    else
      /* comp gl entity defaulted*/
    end
  end
  ;
   /* determine ivc id and misc ivc id*/
  if (NI0GW01.NI0GWADD == "Y") /* in add mode there is no ivc id*/
    NI0GW01.NIDIVCID = 0;
    NI0GW01.NI0GWIID = 0;
    NI0GW01.NI0GW-NEW-SA = 0; /* Overridden Shipto Id*/
  else
    if (VNLIVX01.NIDREFID != 0)
      NI0GW01.NIDIVCID = VNLIVX01.NIDREFID; /* save ivc id*/
      NI0GW01.NI0GWIID = VNLIVX01.NIDIVCID; /* save misc ivc id*/
    else
      if (VMIHDR01.NIARCRFL == "Y") /* recurring invoice base*/
        NI0GW01.NIDIVCID = 0;
        NI0GW01.NI0GWIID = VNLIVX01.NIDIVCID;
      else
        if (VMIHDR01.NIAACIND == "M") /* ivc not yet printed or voided*/
          NI0GW01.NIDIVCID = 0;
          NI0GW01.NI0GWIID = VNLIVX01.NIDIVCID;
        else
          NI0GW01.NIDIVCID = VNLIVX01.NIDIVCID;
          NI0GW01.NI0GWIID = 0;
        end
      end
    end
  end
  ;
end // end NI0GS13

// select first for nikrec
Function NI0GS14()
  NLXREC.NLXCPROC = "NI0GS14"; /* set current proc name*/
  ;
   /* zchcd filled in by calling module*/
   /* MOVE NI0GW02.ZCHCD(NI0GWDX3) TO NIKREC.ZCHCD;*/
  VZCHGL01.XAUCD = KUCREC.XAUCD;
  VZCHGL01.ZARCD = VDSTRB01.ZARCD;
  VZCHGL01.KUCCOID = VDSTRB01.KUCCOID;
  VZCHGL01.YMTCD = " ";
  call "IO4540" ("SF", SQLCA, VZCHGL01) {isNoRefresh = yes, isExternal = yes}; /* select first row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "SF     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4540 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VZCHGL01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
end // end NI0GS14

// set up modified flags
Function NI0GS15()
  NLXREC.NLXCPROC = "NI0GS15"; /* set current proc name*/
  ;
   /* set modified flags for editing after windowing*/
  ;
  NI0GW01.NI0GWMOD = "N"; /* init screen modified flag*/
  if (NI0GW01.NI0GWADD == "Y" /* add mode*/
   || NI0GM100.XPTCD == "NC")
    NI0GW01.NI0GWMOD = "Y"; /* do all edits on add*/
  end
  ;
  NI0GW01.NI0GWDX4 = 7;
  while (NI0GW01.NI0GWDX4 > 1)
    NI0GW01.NI0GWDX4 = NI0GW01.NI0GWDX4 - 1;
    if (NI0GM200.ZCHCD[NI0GWDX4] is modified)
      NI0GW01.NI0GWML1[NI0GWDX4] = "Y";
    else
      if (NI0GW01.NI0GWADD == "Y" /* in add mode*/
       && NI0GM200.ZCHCD[NI0GWDX4] != " ")
        NI0GW01.NI0GWML1[NI0GWDX4] = "Y";
      else
        if (NI0GM200.ZCHCD[NI0GWDX4] != " " /* if charge type not spaces*/
         && NI0GW01.NI0GWRMF == "Y")        /* and remit-to is modified*/
          NI0GW01.NI0GWML1[NI0GWDX4] = "Y";
        else
          NI0GW01.NI0GWML1[NI0GWDX4] = "N";
        end
      end
    end
    ;
    if (NI0GM200.NIBLITXT[NI0GWDX4] is modified)
      NI0GW01.NI0GWML2[NI0GWDX4] = "Y";
    else
      NI0GW01.NI0GWML2[NI0GWDX4] = "N";
    end
    if (NI0GM200.NIBLIAMT[NI0GWDX4] is modified)
      NI0GW01.NI0GWML3[NI0GWDX4] = "Y";
    else
      NI0GW01.NI0GWML3[NI0GWDX4] = "N";
    end
    ;
    if (NI0GM200.ZCHCD[NI0GWDX4] is modified
     || NI0GM200.NIBLITXT[NI0GWDX4] is modified
     || NI0GM200.NIBLIAMT[NI0GWDX4] is modified)
      if (NI0GW01.NI0GWMOD == "N")
        NI0GW01.NI0GWMOD = "Y"; /* screen modified flag*/
      end
    end
  end
  ;
end // end NI0GS15

// build ws-array from screen
Function NI0GS16()
  NLXREC.NLXCPROC = "NI0GS16"; /* set current proc name*/
  ;
   /* move fields from screen to array*/
  ;
  if (NI0GW01.NI0GWML2[NI0GWDX3] == "Y" /* niblitxt modified*/
   || NI0GW01.NI0GWML1[NI0GWDX3] == "Y" /* zchcd modified*/
   || NI0GW01.NI0GWML3[NI0GWDX3] == "Y") /* nibliamt modified*/
    NI0GS22(); /* perform general moves to array*/
  end
  ;
  if (NI0GW01.NI0GWML2[NI0GWDX3] == "Y") /* niblitxt modified*/
    NI0GW02.NIBLITXT[NI0GWDX4] = NI0GM200.NIBLITXT[NI0GWDX3];
  end
  if (NI0GW01.NI0GWML3[NI0GWDX3] == "Y") /* nibliamt modified*/
    NI0GW02.NIBLIAMT[NI0GWDX4] = NI0GM200.NIBLIAMT[NI0GWDX3];
  end
  ;
  if (NI0GW01.NI0GWML1[NI0GWDX3] == "Y") /* zchcd modified*/
    NI0GW02.ZCHCD[NI0GWDX4] = NI0GM200.ZCHCD[NI0GWDX3];
    sysVar.arrayIndex = 1;
    if (NI0GM200.ZCHCD[NI0GWDX3] in ZCHTBL.ZCHCD)
      NI0GW02.ZRTCD[NI0GWDX4] = ZCHTBL.ZRTCD[sysVar.arrayIndex];
      VZCHGL01.ZCHCD = NI0GM200.ZCHCD[NI0GWDX3];
      NI0GS14(); /* get nikrec*/
      if (SQLCA.VAGen_SQLCODE == 100)
        NI0GW02.GLAGRP[NI0GWDX4] = " ";
        NLXREC.NLXERRF = "Y";
        converseLib.validationFailed(102); /* gl cannot be determined*/
        set NI0GM200.ZCHCD[NI0GWDX3] cursor, modified, bold;
      else
         /* format gl acct*/
        if (VZCHGL01.GLAENT == " "
         && VZCHGL01.GLARCID == " "
         && VZCHGL01.GLANTAC == " "
         && VZCHGL01.GLASUB == " "
         && VZCHGL01.GLAPRJ == " ")
          if (VMIHDR01.OP1CMPNB == 0)
            NI0GW02.GLAGRP[NI0GWDX4] = " ";
            NLXREC.NLXERRF = "Y";
            converseLib.validationFailed(105); /* comp nbr required with chr typ*/
            set NI0GM200.ZCHCD[NI0GWDX3] cursor, modified, bold;
          else
            NLXREC.GLAENT = NI0GW01.GLAENT; /* use comp gl*/
            NLXREC.GLARCID = NI0GW01.GLARCID;
            NLXREC.GLANTAC = NI0GW01.GLANTAC;
            NLXREC.GLASUB = NI0GW01.GLASUB;
            NLXREC.GLAPRJ = NI0GW01.GLAPRJ;
            NI0GW02.GLAGRP[NI0GWDX4] = NLXREC.GLAGRP;
          end
        else
          /* IF VMIHDR01.OP1CMPNB = 0;*/
          if (VZCHGL01.GLAENT == " ")
            NLXREC.GLAENT = NI0GW01.GLAENT; /* use cust dflt*/
          else
            NLXREC.GLAENT = VZCHGL01.GLAENT;
          end
          NLXREC.GLARCID = VZCHGL01.GLARCID;
          NLXREC.GLANTAC = VZCHGL01.GLANTAC;
          NLXREC.GLASUB = VZCHGL01.GLASUB;
          NLXREC.GLAPRJ = VZCHGL01.GLAPRJ;
          NI0GW02.GLAGRP[NI0GWDX4] = NLXREC.GLAGRP;
          NI0GM200.GLAGRP[NI0GWDX3] = NLXREC.GLAGRP; /* upd scrn*/
          /* ELSE;*/
           /* MOVE ' ' TO NI0GW02.GLAGRP(NI0GWDX4);*/
           /* MOVE 'Y' TO NLXREC.NLXERRF;*/
           /* MOVE 106 TO EZEMNO;     /* chg typ not valid with comp*/
           /* SET NI0GM200.ZCHCD(NI0GWDX3) CURSOR,MODIFIED,BRIGHT;*/
          /* END;*/
        end
      end
    else
       /* invalid zchcd - init array look up values*/
      NI0GW02.ZRTCD[NI0GWDX4] = " ";
      NI0GW02.GLAGRP[NI0GWDX4] = " ";
    end
  end
  ;
  NI0GW01.NI0GWDX4 = NI0GW01.NI0GWDX4 + 1;
  NI0GW01.NI0GWDX3 = NI0GW01.NI0GWDX3 + 1;
end // end NI0GS16

// check recvbl typ codes
Function NI0GS17()
  NLXREC.NLXCPROC = "NI0GS17"; /* set current proc name*/
  ;
   /* edit recvbl typ cd to make sure all line items match*/
     /* will hilite all on screen if any are in error*/
  ;
  NI0GW01.NI0GWDX5 = 1;
  while (NI0GW01.NI0GWDX5 < 7)
    sysVar.arrayIndex = 1;
    if (NI0GM200.ZCHCD[NI0GWDX5] in ZCHTBL.ZCHCD)
      NI0GW01.ZRTCD = ZCHTBL.ZRTCD[sysVar.arrayIndex];
      if (NI0GW01.XAUCD != "31")
        NI0GW01.NI0GWDX4 = 1;
        while (NI0GW01.NI0GWDX4 <= NI0GW01.NI0GWDX1)
          if (NI0GW01.ZRTCD != NI0GW02.ZRTCD[NI0GWDX4]
           && NI0GW02.ZRTCD[NI0GWDX4] != " ")
            if (NI0GM200.ZCHCD[6] != " ")
              set NI0GM200.ZCHCD[6] cursor, modified, bold;
            end
            if (NI0GM200.ZCHCD[5] != " ")
              set NI0GM200.ZCHCD[5] cursor, modified, bold;
            end
            if (NI0GM200.ZCHCD[4] != " ")
              set NI0GM200.ZCHCD[4] cursor, modified, bold;
            end
            if (NI0GM200.ZCHCD[3] != " ")
              set NI0GM200.ZCHCD[3] cursor, modified, bold;
            end
            if (NI0GM200.ZCHCD[2] != " ")
              set NI0GM200.ZCHCD[2] cursor, modified, bold;
            end
            if (NI0GM200.ZCHCD[1] != " ")
              set NI0GM200.ZCHCD[1] cursor, modified, bold;
            end
            converseLib.validationFailed(43); /* invalid cd*/
            NLXREC.NLXERRF = "Y";
            NI0GW01.NI0GWDX5 = 9; /* end loop*/
            NI0GW01.NI0GWDX4 = 99; /* end loop*/
          else
            NI0GW01.NI0GWDX4 = NI0GW01.NI0GWDX4 + 1; /* stop loop*/
          end
        end
      end
    end
    NI0GW01.NI0GWDX5 = NI0GW01.NI0GWDX5 + 1;
  end
  ;
end // end NI0GS17

// add line items to nicrec
Function NI0GS18()
  NLXREC.NLXCPROC = "NI0GS18"; /* set current proc name*/
  ;
   /* determine if line item exists - then add or upd*/
  ;
  VMIITM01.NIDIVCID = NI0GW02.NIDIVCID[NI0GWDX4];
  VMIITM01.NIBLINBR = NI0GW02.NIBLINBR[NI0GWDX4];
  call "IO4450" ("S ", SQLCA, VMIITM01) {isNoRefresh = yes, isExternal = yes}; /* select unique nibrec*/
  if (SQLCA.VAGen_SQLCODE == 0)
    NI0GS19(); /* upd row in nibrec*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      NI0GS20(); /* add row to nibrec*/
    else
      TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO4450 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO "; /* database*/
      TA1REC.TA1TBLVU = "VMIITM01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end
  ;
end // end NI0GS18

// upd row in nibrec
Function NI0GS19()
  NLXREC.NLXCPROC = "NI0GS19"; /* set current proc name*/
  ;
   /* upd row in nibrec*/
  ;
  VMIITM01.NIBGROUP = NI0GW02.NIBGROUP[NI0GWDX4];
  call "IO4450" ("U ", SQLCA, VMIITM01) {isNoRefresh = yes, isExternal = yes}; /* upd row in nibrec*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
   /* EZERTN;*/
    NI0GW02.NIBGROUP[NI0GWDX4] = VMIITM01.NIBGROUP;
  else
    TA1REC.TA1LOCAT[2] = "U      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4450 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO "; /* database*/
    TA1REC.TA1TBLVU = "VMIITM01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
end // end NI0GS19

// add row to nibrec
Function NI0GS20()
  NLXREC.NLXCPROC = "NI0GS20"; /* set current proc name*/
  ;
   /* add line item to nibrec*/
  ;
  VMIITM01.NIBGROUP = NI0GW02.NIBGROUP[NI0GWDX4];
  XX0XS01();
  VMIITM01.ZZZSDT = XX0XW01.XX0XWDAT;
  VMIITM01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VMIITM01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  call "IO4450" ("A ", SQLCA, VMIITM01) {isNoRefresh = yes, isExternal = yes}; /* add row to nibrec*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    TA1REC.TA1LOCAT[2] = "A      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4450 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO "; /* database*/
    TA1REC.TA1TBLVU = "VMIITM01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
end // end NI0GS20

// delete row from nibrec
Function NI0GS21()
  NLXREC.NLXCPROC = "NI0GS21"; /* set current proc name*/
  ;
   /* delete a line item*/
  ;
  VMIITM01.NIDIVCID = NI0GW02.NIDIVCID[NI0GWDX4];
  VMIITM01.NIBLINBR = NI0GW02.NIBLINBR[NI0GWDX4];
  call "IO4450" ("D ", SQLCA, VMIITM01) {isNoRefresh = yes, isExternal = yes}; /* delete all line items*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "D      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4450 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO "; /* database*/
    TA1REC.TA1TBLVU = "VMIITM01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
end // end NI0GS21

// perform general moves to array
Function NI0GS22()
  NLXREC.NLXCPROC = "NI0GS22"; /* set current proc name*/
  ;
   /* perform general moves to array*/
  ;
  NI0GW02.NI0GWUPD[NI0GWDX4] = "Y";
  NI0GW02.NIBLINBR[NI0GWDX4] = NI0GW01.NI0GWDX4;
  ;
  if (NI0GW02.NIDIVCID[NI0GWDX4] == 0) /* no ivc id for line item*/
    if (NI0GW01.NI0GWADD != "Y") /* not in add mode*/
      if (NI0GW01.NIDIVCID == 0) /* ivc has only misc ivc id*/
        NI0GW02.NIDIVCID[NI0GWDX4] = NI0GW01.NI0GWIID;
      else
        NI0GW02.NIDIVCID[NI0GWDX4] = NI0GW01.NIDIVCID;
      end
    end
  end
  ;
  XX0XS01(); /* get formatted current date and time*/
  NI0GW02.ZZZCHGDT[NI0GWDX4] = XX0XW01.XX0XWDAT; /* set chg date*/
  NI0GW02.ZZZCHGTM[NI0GWDX4] = XX0XW01.XX0XWTIM; /* set chg time*/
  ;
  if (NI0GW01.NI0GWDX4 > NI0GW01.NI0GWDX1)
    NI0GW01.NI0GWDX1 = NI0GW01.NI0GWDX4; /* increase max in array*/
  end
  ;
  if (NI0GM200.NIBLITXT[NI0GWDX3] == " "
   && NI0GM200.ZCHCD[NI0GWDX3] == " "
   && NI0GM200.NIBLIAMT[NI0GWDX3] == 0)
    if (NI0GW01.NI0GWDX4 == NI0GW01.NI0GWDX1) /* delete of last line item*/
       /* reset dx1 to prev existing*/
      NI0GW01.NI0GWDX5 = NI0GW01.NI0GWDX4;
      while (NI0GW01.NI0GWDX5 > 0)
        if (NI0GW02.NIBLITXT[NI0GWDX5] == " "
         && NI0GW02.ZCHCD[NI0GWDX5] == " "
         && NI0GW02.NIBLIAMT[NI0GWDX5] == 0)
          /* next sentence*/
        else
          NI0GW01.NI0GWDX1 = NI0GW01.NI0GWDX5;
          NI0GW01.NI0GWDX5 = 0; /* stop loop*/
        end
        NI0GW01.NI0GWDX5 = NI0GW01.NI0GWDX5 - 1;
      end
    end
  end
  ;
end // end NI0GS22

// add new misc ivc
Function NI0GS23()
  NLXREC.NLXCPROC = "NI0GS23"; /* set current proc name*/
  ;
  NI0GS24(); /* read nil control table*/
  NI0GW01.NI0GWIID = VNLCTL01.NLBNXMID;
  ;
  NI0GS25(); /* add xref row*/
  ;
   /* add line items & calc total for hdr*/
  NI0GW01.NI0GWDX4 = 0;
  while (NI0GW01.NI0GWDX4 < NI0GW01.NI0GWDX1)
    NI0GW01.NI0GWDX4 = NI0GW01.NI0GWDX4 + 1;
    if (NI0GW02.NIBLITXT[NI0GWDX4] != " "
     || NI0GW02.ZCHCD[NI0GWDX4] != " ")
      NI0GW02.NIDIVCID[NI0GWDX4] = VNLCTL01.NLBNXMID; /* fill key*/
      NI0GS20(); /* add line item*/
    end
  end
  ;
  NI0GS26(); /* add niarec - misc ivc hdr*/
end // end NI0GS23

// read and upd ctl tbl
Function NI0GS24()
  NLXREC.NLXCPROC = "NI0GS24"; /* set current proc name*/
  ;
   /* read control table*/
  ;
  call "IO4300" ("U4", SQLCA, VNLCTL01) {isNoRefresh = yes, isExternal = yes}; /* read and upd ctl tbl*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "U4     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4300 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO "; /* database*/
    TA1REC.TA1TBLVU = "VNLCTL01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
end // end NI0GS24

// add row to nidrec
Function NI0GS25()
  NLXREC.NLXCPROC = "NI0GS21"; /* set current proc name*/
  ;
   /* add row to nidrec*/
  ;
  set VNLIVX01 empty;
  VNLIVX01.NIDIVCID = VNLCTL01.NLBNXMID;
  VNLIVX01.ZDTCD = "MI";
  VNLIVX01.NIDREFID = 0;
  VNLIVX01.ZZZSDT = XX0XW01.XX0XWDAT;
  VNLIVX01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VNLIVX01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  call "IO4460" ("A ", SQLCA, VNLIVX01) {isNoRefresh = yes, isExternal = yes}; /* add row to nidrec*/
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "A      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4460 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO "; /* database*/
    TA1REC.TA1TBLVU = "VNLIVX01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
end // end NI0GS25

// add row to niarec
Function NI0GS26()
  NLXREC.NLXCPROC = "NI0GS26"; /* set current proc name*/
  ;
   /* add row to niarec*/
  ;
  VMIHDR01.NIDIVCID = VNLCTL01.NLBNXMID;
  VMIHDR01.ZDTCD = "MI";
  VMIHDR01.NIAACIND = "M"; /* set act ind to m for maint*/
  ;
  if (VMIHDR01.NIAPTOVF == " ") /* user has not entered override*/
    VMIHDR01.NIAPTOVF = "N"; /* set xpt override to no*/
  end
  ;
   /* hta calculated in edit*/
  VMIHDR01.NIAIVAMT = NI0GW01.NI0GWHTA; /* ivc tot amt*/
  ;
  NI0GS47(); /* get zrt code and receivable gl account number*/
  ;
  VMIHDR01.ZZZSDT = XX0XW01.XX0XWDAT;
  VMIHDR01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VMIHDR01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  call "IO4440" ("A ", SQLCA, VMIHDR01) {isNoRefresh = yes, isExternal = yes}; /* add row to niarec*/
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "A      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4440 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO "; /* database*/
    TA1REC.TA1TBLVU = "VMIHDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
end // end NI0GS26

// prepare for add mode
Function NI0GS27()
  NLXREC.NLXCPROC = "NI0GS27"; /* set current proc name*/
  ;
   /* prepare for add mode*/
  ;
  NI0GW01.NI0GWADD = "Y"; /* set add mode to yes*/
  set VMIHDR01 empty; /* clear then set up defaults*/
  set VNLIVX01 empty; /* clear xref also*/
  VMIHDR01.KUCCOID = NI0GM100.KUCCOID;
  VMIHDR01.KUMSTRID = NI0GM100.KUMSTRID;
  VMIHDR01.ZIVCD = NI0GM100.ZIVCD;
  VMIHDR01.NIARCRFL = "N";
  VMIHDR01.ZISCD = "IN";
  VMIHDR01.XXXUSRID = COMMAREA.CAUSERID;
  ;
   /* calc dflt payment term cd*/
  NI0GS46();
  ;
  ;
  ;
end // end NI0GS27

// check the existence of RCV G/L
Function NI0GS28()
  ;
   /* **************************************/
   /* to check if this customer and this*/
   /* particular charge type has a valid*/
   /* Receivable G/L code.*/
   /* **************************************/
  ;
  VRCVGL01.ZARCD = VDSTRB01.ZARCD;
  if (KUCREC.KUCCOID == 694643)
    VRCVGL01.ZRTCD = "CO";
  else
    if (KUCREC.XAUCD == "31")
      VRCVGL01.ZRTCD = "IC";
    else
      VRCVGL01.ZRTCD = NI0GW01.ZRTCD;
    end
  end
  NI0GS39();
                                   /* select unique receivable G/L code;*/
  if (SQLCA.VAGen_SQLCODE == 100)
    set NI0GM200.ZCHCD[NI0GWDX6] cursor, modified, bold;
    NLXREC.NLXERRF = "Y";
    converseLib.validationFailed(230);
  end
  ;
  ;
end // end NI0GS28

// Select Unique from NLAREC
Function NI0GS29()
  NLXREC.NLXCPROC = "NI0GS29";
  ;
   /* NLAREC - Select Unique*/
  ;
  call "IO4410" ("S ", SQLCA, VLADDR01) {isNoRefresh = yes, isExternal = yes}; /* Read Long Address*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4410 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VLADDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NI0GS29

// Select Unique from KUMREC
Function NI0GS30()
  NLXREC.NLXCPROC = "NI0GS30";
  ;
   /* KUMREC - Select Unique*/
  ;
  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes}; /* Read store*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0340 "; /* io module*/
    TA1REC.TA1DBASE = "DCUST"; /* database*/
    TA1REC.TA1TBLVU = "VSTORE01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NI0GS30

// Select Unique from OP1REC
Function NI0GS31()
  NLXREC.NLXCPROC = "NI0GS31";
  ;
   /* OP1REC - Select Unique*/
  ;
  call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* Read Order record*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0430 "; /* io module*/
    TA1REC.TA1DBASE = "DORDER"; /* database*/
    TA1REC.TA1TBLVU = "VORHDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NI0GS31

// update Unique niarec
Function NI0GS32()
  NLXREC.NLXCPROC = "NI0GS32";
  ;
  if (VMIHDR01.NIAACIND != "V" /* if invoice activity is not 'void'*/
   && VMIHDR01.NIAACIND != "R") /* IF INVOICE ACTIVITY IS NOT reprint*/
    NI0GS47(); /* get zrt code and receivable gl account number*/
  end
  ;
   /* upd niarec*/
  ;
  XX0XS01(); /* get system date and time*/
  VMIHDR01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VMIHDR01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  call "IO4440" ("U ", SQLCA, VMIHDR01) {isNoRefresh = yes, isExternal = yes}; /* upd niarec*/
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "U      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4440 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO "; /* database*/
    TA1REC.TA1TBLVU = "VMIHDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
end // end NI0GS32

// delete xref, hdr, line items
Function NI0GS33()
  NLXREC.NLXCPROC = "NI0GS33";
  ;
   /* delete all rows related to invoice*/
     /* all keys should already be filled in*/
  ;
   /* delete xref*/
  call "IO4460" ("D ", SQLCA, VNLIVX01) {isNoRefresh = yes, isExternal = yes}; /* add row to nidrec*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "D      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4460 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO "; /* database*/
    TA1REC.TA1TBLVU = "VNLIVX01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
   /* delete ivc hdr*/
  call "IO4440" ("D ", SQLCA, VMIHDR01) {isNoRefresh = yes, isExternal = yes}; /* upd niarec*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "D      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4440 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO "; /* database*/
    TA1REC.TA1TBLVU = "VMIHDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
   /* delete line items*/
  VMIITM01.NIBLINBR = -1; /* delete all for ivc*/
  call "IO4450" ("D ", SQLCA, VMIITM01) {isNoRefresh = yes, isExternal = yes}; /* add row to nibrec*/
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    return;
  else
    TA1REC.TA1LOCAT[2] = "D      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4450 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO "; /* database*/
    TA1REC.TA1TBLVU = "VMIITM01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
end // end NI0GS33

// edit key for misc ivc
Function NI0GS34()
  NLXREC.NLXCPROC = "NI0GS34"; /* set current proc name*/
  ;
   /* edit for misc invoice id*/
  ;
  VNLIVX01.NIDIVCID = NI0GM100.NI0GWIID;
  NI0GW01.NI0GWIID = NI0GM100.NI0GWIID;
  NI0GS04(); /* read xref first*/
  if (SQLCA.VAGen_SQLCODE == 0)
    NI0GS07(); /* read misc hdr*/
  else
    set NI0GM100.NI0GWIID cursor, modified, bold;
    converseLib.validationFailed(47); /* invalid cd*/
    NLXREC.NLXERRF = "Y";
    return;
  end
  ;
end // end NI0GS34

// edit key for actual ivc
Function NI0GS35()
  ;
  NLXREC.NLXCPROC = "NI0GS35"; /* set current proc name*/
  ;
   /* edit for actual invoice id*/
  ;
  VNLIVX01.NIDIVCID = NI0GM100.NIDIVCID;
  NI0GW01.NIDIVCID = NI0GM100.NIDIVCID;
  NI0GS04(); /* read xref first*/
  if (SQLCA.VAGen_SQLCODE == 0)
    NI0GS07(); /* read misc hdr*/
  else
    set NI0GM100.NIDIVCID cursor, modified, bold;
    converseLib.validationFailed(47); /* invalid cd*/
    NLXREC.NLXERRF = "Y";
    return;
  end
  ;
end // end NI0GS35

// edit key for ivc typ
Function NI0GS36()
  NLXREC.NLXCPROC = "NI0GS36"; /* set current proc name*/
  ;
   /* edit ivc typ key chg*/
  ;
  NI0GW01.KUCCOID = NI0GM100.KUCCOID;
  NI0GW01.ZIVCD = NI0GM100.ZIVCD;
  NI0GS03(); /* build and read cursor*/
  if (NI0GW01.NI0GWONE == "Y") /* no line items in cursor*/
    NI0GW01.KUCCOID = 0; /* test for generic ivc typ*/
    NI0GS03(); /* build and read cursor*/
    if (NI0GW01.NI0GWONE == "Y") /* no line items in cursor*/
      set NI0GM100.ZIVCD cursor, modified, bold;
      set NI0GM100.KUCCOID modified, bold;
      converseLib.validationFailed(70); /* ivc typ does not exist*/
      NLXREC.NLXERRF = "Y";
      return;
    else
      NI0GS27(); /* prepare for add mode*/
    end
  else
    NI0GS27(); /* prepare for add mode*/
  end
  ;
end // end NI0GS36

// check for exit during add
Function NI0GS37()
  NLXREC.NLXCPROC = "NI0GS37"; /* set current proc name*/
  ;
   /* check for exit during add mode*/
  ;
  if (converseVar.eventKey is enter
   && NI0GM100.CATOAP != " ") /* fastpath exit*/
    if (NI0GW01.NI0GWEXT == 2) /* fastpath previously attempted*/
      return;
    else
      NI0GW01.NI0GWEXT = 2;
      converseLib.validationFailed(53); /* warning message*/
      NLXREC.NLXERRF = "Y";
      return;
    end
  end
  ;
  if (converseVar.eventKey is enter /* user has elected not to exit*/
   || converseVar.eventKey is pf7   
   || converseVar.eventKey is pf8) 
    NI0GW01.NI0GWEXT = 0;
    return;
  end
  ;
  if (converseVar.eventKey is pf1)
    if (NI0GW01.NI0GWEXT == 1) /* pf1 previously attempted*/
      return;
    else
      NI0GW01.NI0GWEXT = 1;
      converseLib.validationFailed(53); /* warning message*/
      NLXREC.NLXERRF = "Y";
      return;
    end
  end
  if (converseVar.eventKey is pf3)
    if (NI0GW01.NI0GWEXT == 3) /* pf3 previously attempted*/
      return;
    else
      NI0GW01.NI0GWEXT = 3;
      converseLib.validationFailed(53); /* warning message*/
      NLXREC.NLXERRF = "Y";
      return;
    end
  end
  if (converseVar.eventKey is pf4)
    if (NI0GW01.NI0GWEXT == 4) /* pf4 previously attempted*/
      return;
    else
      NI0GW01.NI0GWEXT = 4;
      converseLib.validationFailed(53); /* warning message*/
      NLXREC.NLXERRF = "Y";
      return;
    end
  end
  if (converseVar.eventKey is pf15)
    if (NI0GW01.NI0GWEXT == 15) /* pf15 previously attempted*/
      return;
    else
      NI0GW01.NI0GWEXT = 15;
      converseLib.validationFailed(53); /* warning message*/
      NLXREC.NLXERRF = "Y";
      return;
    end
  end
  if (converseVar.eventKey is pf17)
    if (NI0GW01.NI0GWEXT == 17) /* pf17 previously attempted*/
      return;
    else
      NI0GW01.NI0GWEXT = 17;
      converseLib.validationFailed(53); /* warning message*/
      NLXREC.NLXERRF = "Y";
      return;
    end
  end
  if (converseVar.eventKey is pf21)
    if (NI0GW01.NI0GWEXT == 21) /* pf21 previously attempted*/
      return;
    else
      NI0GW01.NI0GWEXT = 21;
      converseLib.validationFailed(53); /* warning message*/
      NLXREC.NLXERRF = "Y";
      return;
    end
  end
  ;
end // end NI0GS37

// select unique from nilrec
Function NI0GS38()
  NLXREC.NLXCPROC = "NI0GS38"; /* set current proc name*/
  ;
   /* look up deflt payment term for customer*/
  ;
  call "IO4490" ("S ", SQLCA, VNLXPT01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    TA1REC.TA1TBLKE = NI0GW01.NI0GWLKE; /* database key*/
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4490 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VNLXPT01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
end // end NI0GS38

// select unique from niirec
Function NI0GS39()
  NLXREC.NLXCPROC = "NI0GS39"; /* set current proc name*/
  ;
   /* select unique niirec  record*/
  ;
  call "IO4530" ("SF", SQLCA, VRCVGL01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    NI0GW01.NI0GWZRT = VRCVGL01.ZRTCD;
    NI0GW01.NI0GWZAR = VRCVGL01.ZARCD;
    TA1REC.TA1TBLKE = NI0GW01.NI0GWIKE; /* database key*/
    TA1REC.TA1LOCAT[2] = "SF     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4530 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VRCVGL01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
end // end NI0GS39

// select unique from pfhrec
Function NI0GS40()
  NLXREC.NLXCPROC = "NI0GS40"; /* set current proc name*/
  ;
   /* select unique vintgl02*/
  ;
  call "VINTGL02" ("SF", SQLCA, VINTGL02) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "SF     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "VINTGL02 "; /* io module*/
    TA1REC.TA1DBASE = "DPROFT"; /* database*/
    TA1REC.TA1TBLVU = "VINTGL02"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
end // end NI0GS40

// edit xpt term and date
Function NI0GS41()
  NLXREC.NLXCPROC = "NI0GS41"; /* set current proc name*/
  ;
   /* edit payment term and due date*/
  ;
  if (NI0GM100.XPTCD in XPTTBL.XPTCD)
    if (XPTTBL.XPTCTRLI[sysVar.arrayIndex] == "B" /* only nil terms are valid*/
     || XPTTBL.XPTCTRLI[sysVar.arrayIndex] == "N")
       /* next sentence*/
    else
      set NI0GM100.XPTCD cursor, modified, bold;
      converseLib.validationFailed(111); /* not a nil term*/
      NLXREC.NLXERRF = "Y";
      return;
    end
  else
    set NI0GM100.XPTCD cursor, modified, bold;
    converseLib.validationFailed(39); /* invalid cd*/
    NLXREC.NLXERRF = "Y";
    return;
  end
  ;
  if (NI0GW01.NI0GWMFX == "Y") /* xptcd modified*/
    NI0GM100.XPTDESC = XPTTBL.XPTDESC[sysVar.arrayIndex];
    set NI0GM100.XPTCD normal;
    VMIHDR01.XPTCD = NI0GM100.XPTCD;
    VMIHDR01.NIAPTOVF = "Y"; /* set override flag*/
  end
  ;
  if (XPTTBL.XPTDAYS[sysVar.arrayIndex] == 999) /* special term;*/
    if (NI0GM100.NIAPTDDT == " ")
      set NI0GM100.NIAPTDDT cursor, modified, bold;
      converseLib.validationFailed(88); /* due date required*/
      NLXREC.NLXERRF = "Y";
    else
      NLXREC.NLXVALDT = "Y";
      NLXREC.XXXED8C = NI0GM100.NIAPTDDT;
      XPNL001(); /* date edit routine*/
      if (NLXREC.NLXVALDT == "N")
        set NI0GM100.NIAPTDDT cursor, modified, bold;
        converseLib.validationFailed(5); /* invalid date*/
        NLXREC.NLXERRF = "Y";
      else
        set NI0GM100.NIAPTDDT normal;
        NI0GM100.NIAPTDDT = NLXREC.XXXFLDT;
        VMIHDR01.NIAPTDDT = NLXREC.XXXWCYMD;
      end
    end
  else
    if (NI0GM100.NIAPTDDT == " ")
      set NI0GM100.NIAPTDDT normal;
      VMIHDR01.NIAPTDDT = 0;
    else
      set NI0GM100.NIAPTDDT cursor, modified, bold;
      converseLib.validationFailed(87); /* invalid cd*/
      NLXREC.NLXERRF = "Y";
    end
  end
  ;
  if (XPTTBL.XPTSHDTI[sysVar.arrayIndex] == "S" /* ship date required with term*/
   && NI0GM100.SR1SHPDT == " ")                
    set NI0GM100.SR1SHPDT cursor, modified, bold;
    set NI0GM100.XPTCD modified;
    converseLib.validationFailed(137);
    NLXREC.NLXERRF = "Y";
  end
end // end NI0GS41

// select unique from xzcrec
Function NI0GS42()
  NLXREC.NLXCPROC = "NI0GS42"; /* set current proc name*/
  ;
   /* select unique xzcrec*/
  ;
  call "IO0900" ("S ", SQLCA, XZCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0900 "; /* io module*/
    TA1REC.TA1DBASE = "DCORP"; /* database*/
    TA1REC.TA1TBLVU = "VDAYS001"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
end // end NI0GS42

// format comp number results
Function NI0GS43()
  NLXREC.NLXCPROC = "NI0GS43"; /* set current proc name*/
  ;
   /* read profitability table*/
  VINTGL02.XAUCD = " ";
  VINTGL02.KUCCOID = NI0GM100.OP1CMPNB;
  VINTGL02.KUMSTRID = 0;
  VINTGL02.XNXCD = 0;
  NI0GS40(); /* select unique vintgl02*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    NI0GS-S-VGCOA001();
    if (SQLCA.VAGen_SQLCODE == 0)
      VMIHDR01.OP1CMPNB = NI0GM100.OP1CMPNB;
      GLAREC.GLAENT = VGCOA001.GL-ENTITY-ID;
      GLAREC.GLARCID = VGCOA001.GL-RSP-CTR-ID;
      GLAREC.GLANTAC = VGCOA001.GL-NATRL-ACCT-ID;
      GLAREC.GLASUB = VGCOA001.GL-SUB-ACCT-ID;
      GLAREC.GLAPRJ = VGCOA001.GL-PROJ-ID;
      NLXREC.GLACCT = GLAREC.GLAGRP;
      NLXREC.GLAGRP = NLXREC.NLXNLGL;
      NI0GW01.GLAENT = NLXREC.GLAENT; /* save line itm comp gl*/
      NI0GW01.GLARCID = NLXREC.GLARCID;
      NI0GW01.GLANTAC = NLXREC.GLANTAC;
      NI0GW01.GLASUB = NLXREC.GLASUB;
      if (NLXREC.GLAPRJ == "XX")
        NI0GW01.GLAPRJ = " ";
      else
        NI0GW01.GLAPRJ = NLXREC.GLAPRJ;
      end
      if ((NLXREC.GLAENT > "499"
       && NLXREC.GLAENT < "600")
       || NLXREC.GLAENT == "761"
       || NLXREC.GLAENT == "100"
       || NLXREC.GLAENT == "101")
           /* next sentence*/
      else
           /* this is nc payment term and comp nbr*/
        NI0GM100.XPTCD = "NC"; /* no charge comp nbr*/
        VMIHDR01.XPTCD = "NC";
        NI0GW01.GLAENT = " "; /* save comp gl to ws*/
        NI0GW01.GLARCID = " ";
        NI0GW01.GLANTAC = " ";
        NI0GW01.GLASUB = " ";
        NI0GW01.GLAPRJ = " ";
        VMIHDR01.GLAENT = " "; /* hdr gl will be blank on 'nc'*/
        VMIHDR01.GLARCID = " ";
        VMIHDR01.GLANTAC = " ";
        VMIHDR01.GLASUB = " ";
        VMIHDR01.GLAPRJ = " ";
        NI0GM100.XLBCD = "IN";
        VMIHDR01.XLBCD = "IN";
        set NI0GM100.NIAPTDDT modified; /* force check of due date entry*/
        set NI0GM100.XPTCD skip;
        converseLib.validationFailed(107); /* xptcd forced to no charge*/
        NLXREC.NLXERRF = "Y";
      end
    end
    if (VMIHDR01.XLBCD in XLATBL.XLBCD)
      set NI0GM100.OP1CMPNB normal;
      NI0GM100.XXXADDR1 = XLATBL.XXX-ADDR1[sysVar.arrayIndex];
      set NI0GM100.XLBCD skip;
    end
  else
     /* profitability row not found*/
    set NI0GM100.OP1CMPNB cursor, modified, bold;
    converseLib.validationFailed(176); /* invalid comp nbr.*/
    NLXREC.NLXERRF = "Y";
  end
  ;
end // end NI0GS43

// determine if void or credit
Function NI0GS44()
  NLXREC.NLXCPROC = "NI0GS44"; /* set current proc name*/
  ;
   /* determine if 'vd' or 'cr'*/
  ;
  XZCREC.XZCCLNDT = XX0XW01.XX0XWDAT;
  NI0GS42(); /* get today's business mth*/
  if (VMIHDR01.ZIVCD in ZIVTBL.ZIVCD)
    if (ZIVTBL.ZIVBMIND[sysVar.arrayIndex] == "1")
      if (VMIHDR01.NIAGLPMO != XZCREC.XZCGLPM1) /* bus mth has chgd*/
        if (COMMAREA.CACLVL[1] == "N") /* security not valid for cr*/
          set NI0GM100.ZISCD cursor, modified, bold;
          converseLib.validationFailed(73); /* user cannot credit*/
          NLXREC.NLXERRF = "Y";
          return;
        else
          VMIHDR01.ZISCD = "CR"; /* credit, instead of void*/
        end
      else
        VMIHDR01.ZISCD = "VD"; /* void*/
      end
    else
      if (VMIHDR01.NIAGLPMO != XZCREC.XZCGLPM2) /* bus mth has chgd*/
        if (COMMAREA.CACLVL[1] == "N") /* security not valid for cr*/
          set NI0GM100.ZISCD cursor, modified, bold;
          converseLib.validationFailed(73); /* user cannot credit*/
          NLXREC.NLXERRF = "Y";
          return;
        else
          VMIHDR01.ZISCD = "CR"; /* credit, instead of void*/
        end
      else
        VMIHDR01.ZISCD = "VD"; /* void*/
      end
    end
  end
  ;
  if (VMIHDR01.ZISCD == "CR")
    converseLib.validationFailed(139); /* invoice credited*/
  else
    converseLib.validationFailed(140); /* invoice voided*/
  end
  NI0GM100.ZISCD = VMIHDR01.ZISCD;
  if (VMIHDR01.ZISCD in ZISTBL.ZISCD)
    NI0GM100.ZISABRV = ZISTBL.ZISABRV[sysVar.arrayIndex];
  end
  VMIHDR01.NIAACIND = "V"; /* set activity ind*/
  set NI0GM100.ZISCD skip; /* can't change status again*/
  NI0GS32(); /* update header*/
  if (VMIHDR01.ZISCD == "CR"
   && VMIHDR01.XPTCD != "NC")
    COMMAREA.CATOAP = "NK0G"; /* Transfer to claims system*/
    NIWREC.KUCCOID = NI0GW01.KUCCOID;
    NIWREC.ZIVCD = NI0GW01.ZIVCD;
    NIWREC.NIWZDTCD = VMIHDR01.ZDTCD;
    NIWREC.NIDIVCID = NI0GW01.NIDIVCID;
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002();
  end
  ;
end // end NI0GS44

// edit for at least 1 line item
Function NI0GS45()
  NLXREC.NLXCPROC = "NI0GS45"; /* set current proc name*/
  ;
   /* edit that line items exist*/
  ;
  NI0GW01.NI0GWHTA = 0; /* ivc hdr total amt*/
  NI0GW01.NI0GWDX4 = 0;
  while (NI0GW01.NI0GWDX4 < NI0GW01.NI0GWDX1)
    NI0GW01.NI0GWDX4 = NI0GW01.NI0GWDX4 + 1;
    NI0GW01.NI0GWHTA = NI0GW01.NI0GWHTA + NI0GW02.NIBLIAMT[NI0GWDX4];
  end
  ;
  if (NI0GW01.NI0GWHTA == 0
   && VMIHDR01.XPTCD != "NC") /* no charge ivc*/
    set NI0GM200.NIBLIAMT[1] cursor, modified, bold;
    converseLib.validationFailed(141); /* line item required*/
    NLXREC.NLXERRF = "Y";
  else
     /* only set to normal if chgs are possible*/
    if (NI0GW01.NI0GWINQ == "Y"  /* on invoice inquiry list*/
     || NI0GW01.NI0GWBIQ == "Y"  /* inquiry only user*/
     || VMIHDR01.NIAACIND == "P" /* ivc has been issued*/
     || VMIHDR01.NIAACIND == "R" 
     || VMIHDR01.NIAACIND == "V")
       /* next sentence*/
    else
      set NI0GM200.NIBLIAMT[1] normal;
    end
  end
  ;
end // end NI0GS45

// Get default payment terms code
Function NI0GS46()
  ;
  NLXREC.NLXCPROC = "NI0GS46"; /* set current proc name*/
  ;
   /* calc dflt payment term cd*/
  ;
   /* format table key*/
  VNLXPT01.KUCCOID = VMIHDR01.KUCCOID;
  VNLXPT01.YSMXOB = " ";
  VNLXPT01.XGPCD = " ";
  VNLXPT01.NILLOVAL = 0;
   /* format display key for error trap*/
  NI0GW01.NI0GWKUC = VNLXPT01.KUCCOID;
  NI0GW01.YSMXOB = VNLXPT01.YSMXOB;
  NI0GW01.XGPCD = VNLXPT01.XGPCD;
  NI0GW01.NI0GWVAL = VNLXPT01.NILLOVAL;
  NI0GS38(); /* select unique nilrec*/
  ;
  VMIHDR01.XPTCD = VNLXPT01.XPTCD;
  NI0GM100.XPTCD = VNLXPT01.XPTCD;
  if (VMIHDR01.XPTCD in XPTTBL.XPTCD)
    NI0GM100.XPTDESC = XPTTBL.XPTDESC[sysVar.arrayIndex];
  end
  ;
  ;
  ;
end // end NI0GS46

// assign zrt cd and rcvble gl cd
Function NI0GS47()
   /* override or get receivable type code from line items*/
  if (KUCREC.KUCCOID == 694643) /* if Japan commissions customer*/
    VMIHDR01.ZRTCD = "CO"; /* intercompany*/
  else
    if (KUCREC.XAUCD == "31") /* if company is nike owned*/
      VMIHDR01.ZRTCD = "IC"; /* intercompany*/
    else
      if (NI0GW01.ZRTCD != " ")
        VMIHDR01.ZRTCD = NI0GW01.ZRTCD; /* saved during edit process*/
      end
    end
  end
  ;
   /* get receivable gl account number*/
   /*  */
   /* Move GLAENT from customer all the time.  Do not use GLAENT from*/
   /* comp number per bug sheet 546 and Regina Gouverneur*/
   /*  */
   /* IF NIAREC.OP1CMPNB = 0;           /* non-comp ivc*/
  if (VMIHDR01.XLBCD in XLATBL.XLBCD)
    VMIHDR01.GLAENT = XLATBL.GLAENT[sysVar.arrayIndex]; /* use remit-to entity*/
  end
  VRCVGL01.ZARCD = VDSTRB01.ZARCD; /* from distributor table*/
  VRCVGL01.ZRTCD = VMIHDR01.ZRTCD;
  NI0GS39(); /* select unique niirec*/
  VMIHDR01.GLARCID = VRCVGL01.GLARCID;
  VMIHDR01.GLANTAC = VRCVGL01.GLANTAC;
  VMIHDR01.GLASUB = VRCVGL01.GLASUB;
  VMIHDR01.GLAPRJ = VRCVGL01.GLAPRJ;
  ;
end // end NI0GS47

// ADD/UPDATE/DELETE LINE ITEMS
Function NI0GS48()
  ;
   /* **************************************/
   /* ADD, UPDATE, OR DELETE LINE ITEMS*/
   /* **************************************/
  ;
  NI0GW01.NI0GWDX4 = 0;
  while (NI0GW01.NI0GWDX4 < NI0GW01.NI0GWDX1)
    NI0GW01.NI0GWDX4 = NI0GW01.NI0GWDX4 + 1;
    if (NI0GW02.NI0GWUPD[NI0GWDX4] == "Y")
      NI0GW02.NI0GWUPD[NI0GWDX4] = "N";
      if (NI0GW02.NIBLITXT[NI0GWDX4] != " "
       || NI0GW02.ZCHCD[NI0GWDX4] != " ")
        NI0GS18(); /* perform add or upd*/
      else
        NI0GS21(); /* perform delete of line item*/
      end
    end
  end
  ;
end // end NI0GS48

// select unique from vdstrb01
Function NI0GS49()
  ;
  NLXREC.NLXCPROC = "NI0GS49"; /* set current proc name*/
  ;
  VDSTRB01.KUCCOID = NI0GW01.KUCCOID;
  call "IO4600" ("S ", SQLCA, VDSTRB01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    if (VDSTRB01.XXXSTAT == "A")
         /* next sentence*/
    else
      SQLCA.VAGen_SQLCODE = 100;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      return;
    else
      TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO4600 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VDSTRB01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end
  ;
end // end NI0GS49

// security for ni0gm100
Function NI0GSS1()
  NLXREC.NLXCPROC = "NI0GSS1";
  ;
   /* set security based on entry path and ivc in use*/
  ;
   /* entered from ivc inquiry application list*/
  if (NI0GW01.NI0GWINQ == "Y")
    set NI0GM100.ZIVCD skip;
    set NI0GM100.KUCCOID skip;
    set NI0GM100.NIDIVCID skip;
    set NI0GM100.NI0GWIID skip;
    set NI0GM100.OP1CMPNB skip;
    set NI0GM100.CATOAP skip;
    set NI0GM100.CAITEM skip;
    set NI0GM100.KUMSTRID skip;
    set NI0GM100.NIARCRFL skip;
    set NI0GM100.ZISCD skip;
    set NI0GM100.XPTCD skip;
    set NI0GM100.NIAPTDDT skip;
    set NI0GM100.XLBCD skip;
    set NI0GM100.OP1CUOID skip;
    set NI0GM100.OP1NORID skip;
    set NI0GM100.SR1SHPDT skip;
    set NI0GM100.OP1CUPO skip;
    set NI0GM100.XXXUSRID skip;
    set NI0GM100.NI0GM-100-PF6 skip, invisible; /* Delete*/
    set NI0GM100.NI0GM-100-PF9 skip, invisible; /* Reprint*/
    set NI0GM100.NI0GM-100-PF17 skip, invisible; /* Quick View*/
    set NI0GM100.NI0GM-100-PF24 skip, invisible; /* Print*/
    set NI0GM100.NI0GM-100-SA skip, invisible; /* Shipto Id Override*/
    return;
  end
  ;
   /* inquiry only user*/
  if (NI0GW01.NI0GWBIQ == "Y")
    set NI0GM100.ZIVCD skip;
    set NI0GM100.KUCCOID skip;
    set NI0GM100.KUMSTRID skip;
    set NI0GM100.NIARCRFL skip;
    set NI0GM100.OP1CMPNB skip;
    set NI0GM100.ZISCD skip;
    set NI0GM100.XPTCD skip;
    set NI0GM100.NIAPTDDT skip;
    set NI0GM100.XLBCD skip;
    set NI0GM100.OP1CUOID skip;
    set NI0GM100.OP1NORID skip;
    set NI0GM100.SR1SHPDT skip;
    set NI0GM100.OP1CUPO skip;
    set NI0GM100.XXXUSRID skip;
    set NI0GM100.NI0GM-100-PF6 skip, invisible; /* Delete*/
    set NI0GM100.NI0GM-100-PF9 skip, invisible; /* Reprint*/
    set NI0GM100.NI0GM-100-PF17 skip, invisible; /* Quick View*/
    set NI0GM100.NI0GM-100-PF24 skip, invisible; /* Print*/
    set NI0GM100.NI0GM-100-SA skip, invisible; /* Shipto Id Override*/
    return;
  end
  ;
  if (COMMAREA.CACLVL[2] != "Y") /* access denied to payment term cd*/
    set NI0GM100.XPTCD skip;
  end
  ;
   /* cannot chg an invoice already issued - except to void*/
   /* F NIAREC.NIAACIND = 'M';        /* ivc has not been issued*/
   /* OR NIAREC.NIAACIND = ' ';      /* ivc has not been created*/
   /* ; /* next sentence*/
  if (VMIHDR01.ZISCD == "IN")
     /* next sentence*/
  else
    set NI0GM100.KUMSTRID skip;
    set NI0GM100.NIARCRFL skip;
    set NI0GM100.OP1CMPNB skip;
    set NI0GM100.XPTCD skip;
    set NI0GM100.NIAPTDDT skip;
    set NI0GM100.XLBCD skip;
    set NI0GM100.OP1CUOID skip;
    set NI0GM100.OP1NORID skip;
    set NI0GM100.SR1SHPDT skip;
    set NI0GM100.OP1CUPO skip;
    set NI0GM100.XXXUSRID skip;
    set NI0GM100.NI0GM-100-SA skip, invisible; /* Shipto Id Override*/
  end
  if (VMIHDR01.NIAACIND == "V") /* ivc has been issued and voided*/
    set NI0GM100.ZISCD skip; /* cannot chg status*/
    set NI0GM100.KUMSTRID skip;
    set NI0GM100.NIARCRFL skip;
    set NI0GM100.OP1CMPNB skip;
    set NI0GM100.XPTCD skip;
    set NI0GM100.NIAPTDDT skip;
    set NI0GM100.XLBCD skip;
    set NI0GM100.OP1CUOID skip;
    set NI0GM100.OP1NORID skip;
    set NI0GM100.SR1SHPDT skip;
    set NI0GM100.OP1CUPO skip;
    set NI0GM100.XXXUSRID skip;
    set NI0GM100.NI0GM-100-PF6 skip, invisible; /* Delete*/
    set NI0GM100.NI0GM-100-PF9 skip, invisible; /* Reprint*/
    set NI0GM100.NI0GM-100-PF17 skip, invisible; /* Quick View*/
    set NI0GM100.NI0GM-100-PF24 skip, invisible; /* Print*/
    set NI0GM100.NI0GM-100-SA skip, invisible; /* Shipto Id Override*/
  end
  if (NI0GW01.NI0GWADD == "Y") /* in add mode*/
     /* next sentence*/
  else
    set NI0GM100.OP1CMPNB skip; /* cannot chg comp nbr after add*/
    /* The following commented 4/18/90 per Tom Pender,John Kemp*/
     /* SET NI0GM100.XLBCD AUTOSKIP ; cannot chg remit-to after add*/
  end
  ;
  if (VMIHDR01.OP1CMPNB != 0 /* comp nbr ivc*/
   && VMIHDR01.XPTCD == "NC" /* no charge payment term*/
   && VMIHDR01.NIAPTOVF != "Y") /* user did not override*/
    set NI0GM100.XPTCD skip;
  end
   /* The following if commented 4/18/90 per TPENDER,John Kemp*/
   /* IF KUCREC.XAUCD = '31' ; only nike owned can chg remit-to*/
   /* next sentence*/
   /* ELSE ;*/
    /* SET NI0GM100.XLBCD AUTOSKIP;*/
   /* END ;*/
  ;
end // end NI0GSS1

// security for ni0gm200
Function NI0GSS2()
   /* set security based on entry path and ivc in use*/
  ;
  NLXREC.NLXCPROC = "NI0GSS2";
  ;
   /* entered from ivc inquiry application list*/
  if (NI0GW01.NI0GWINQ == "Y")
    set NI0GM200.CATOAP skip;
    set NI0GM200.CAITEM skip;
    set NI0GM200.NIBLITXT[1] skip;
    set NI0GM200.NIBLIAMT[1] skip;
    set NI0GM200.ZCHCD[1] skip;
    set NI0GM200.NIBLITXT[2] skip;
    set NI0GM200.NIBLIAMT[2] skip;
    set NI0GM200.ZCHCD[2] skip;
    set NI0GM200.NIBLITXT[3] skip;
    set NI0GM200.NIBLIAMT[3] skip;
    set NI0GM200.ZCHCD[3] skip;
    set NI0GM200.NIBLITXT[4] skip;
    set NI0GM200.NIBLIAMT[4] skip;
    set NI0GM200.ZCHCD[4] skip;
    set NI0GM200.NIBLITXT[5] skip;
    set NI0GM200.NIBLIAMT[5] skip;
    set NI0GM200.ZCHCD[5] skip;
    set NI0GM200.NIBLITXT[6] skip;
    set NI0GM200.NIBLIAMT[6] skip;
    set NI0GM200.ZCHCD[6] skip;
    set NI0GM200.NI0GM-200-PF17 skip, invisible;
    return;
  end
  ;
   /* inquiry only user*/
  if (NI0GW01.NI0GWBIQ == "Y")
    set NI0GM200.NIBLITXT[1] skip;
    set NI0GM200.NIBLIAMT[1] skip;
    set NI0GM200.ZCHCD[1] skip;
    set NI0GM200.NIBLITXT[2] skip;
    set NI0GM200.NIBLIAMT[2] skip;
    set NI0GM200.ZCHCD[2] skip;
    set NI0GM200.NIBLITXT[3] skip;
    set NI0GM200.NIBLIAMT[3] skip;
    set NI0GM200.ZCHCD[3] skip;
    set NI0GM200.NIBLITXT[4] skip;
    set NI0GM200.NIBLIAMT[4] skip;
    set NI0GM200.ZCHCD[4] skip;
    set NI0GM200.NIBLITXT[5] skip;
    set NI0GM200.NIBLIAMT[5] skip;
    set NI0GM200.ZCHCD[5] skip;
    set NI0GM200.NIBLITXT[6] skip;
    set NI0GM200.NIBLIAMT[6] skip;
    set NI0GM200.ZCHCD[6] skip;
    set NI0GM200.NI0GM-200-PF17 skip, invisible;
    return;
  end
  ;
   /* cannot chg ivc in an active status*/
  ;
  if (VMIHDR01.ZISCD == "IN")
   /* F NIAREC.NIAACIND = 'M';        /* ivc has not been issued*/
   /* OR NIAREC.NIAACIND = ' ';      /* ivc has not been created*/
   /* ; /* next sentence*/
  else
    set NI0GM200.NIBLITXT[1] skip;
    set NI0GM200.NIBLIAMT[1] skip;
    set NI0GM200.ZCHCD[1] skip;
    set NI0GM200.NIBLITXT[2] skip;
    set NI0GM200.NIBLIAMT[2] skip;
    set NI0GM200.ZCHCD[2] skip;
    set NI0GM200.NIBLITXT[3] skip;
    set NI0GM200.NIBLIAMT[3] skip;
    set NI0GM200.ZCHCD[3] skip;
    set NI0GM200.NIBLITXT[4] skip;
    set NI0GM200.NIBLIAMT[4] skip;
    set NI0GM200.ZCHCD[4] skip;
    set NI0GM200.NIBLITXT[5] skip;
    set NI0GM200.NIBLIAMT[5] skip;
    set NI0GM200.ZCHCD[5] skip;
    set NI0GM200.NIBLITXT[6] skip;
    set NI0GM200.NIBLIAMT[6] skip;
    set NI0GM200.ZCHCD[6] skip;
  end
  if (NI0GM100.XPTCD == "NC")
    set NI0GM200.NIBLIAMT[1] skip;
    set NI0GM200.NIBLIAMT[2] skip;
    set NI0GM200.NIBLIAMT[3] skip;
    set NI0GM200.NIBLIAMT[4] skip;
    set NI0GM200.NIBLIAMT[5] skip;
    set NI0GM200.NIBLIAMT[6] skip;
    set NI0GM200.NI0GM-200-PF17 skip, invisible;
  end
end // end NI0GSS2

//*** RECORD=NI0GW01 ****
// this is the main working storage record for NI0G.
// ***********************
Record NI0GW01 type basicRecord
  10 KUCCOID KUCCOID ; 
  10 KUMSTRID KUMSTRID ; 
  10 ZIVCD ZIVCD ; 
  10 ZIVDESC ZIVDESC ; 
  10 KUCCONM KUCCONM ; 
  10 XCTDESC XCTDESC ; 
  10 NIDIVCID NIDIVCID ; 
  10 NI0GWIID NI0GWIID ; 
  10 ZRTCD ZRTCD ; 
  10 XAUCD XAUCD ; 
  10 ZIVSHPTO ZIVSHPTO ; 
  10 NI0GWINK NI0GWINK ; 
  10 NI0GWDX1 NI0GWDX1 ; 
  10 NI0GWDX2 NI0GWDX2 ; 
  10 NI0GWDX3 NI0GWDX3 ; 
  10 NI0GWDX4 NI0GWDX4 ; 
  10 NI0GWDX5 NI0GWDX5 ; 
  10 NI0GWDX6 NI0GWDX6 ; 
  10 NI0GWRMF NI0GWRMF ; 
  10 NI0GWARN NI0GWARN ; 
  10 NI0GWEXT NI0GWEXT ; 
  10 GLAENT GLAENT ; 
  10 GLARCID GLARCID ; 
  10 GLANTAC GLANTAC ; 
  10 GLASUB GLASUB ; 
  10 GLAPRJ GLAPRJ ; 
  10 ZZZSDT ZZZSDT ; 
  10 NI0GWHTA NI0GWHTA ; 
  10 NI0GWADD NI0GWADD ; 
  10 NI0GWKCH NI0GWKCH ; 
  10 NI0GWKER NI0GWKER ; 
  10 NI0GWINQ NI0GWINQ ; 
  10 NI0GWBIQ NI0GWBIQ ; 
  10 NI0GWEND NI0GWEND ; 
  10 NI0GWONE NI0GWONE ; 
  10 NI0GWIER NI0GWIER ; 
  10 NI0GWMTH NI0GWMTH ; 
    15 * num(5) ; 
    15 NI0GWBYY NI0GWBYY ; 
    15 NI0GWBMM NI0GWBMM ; 
  10 NI0GWCIT NI0GWCIT ; 
    15 NI0GWCIV NI0GWCIV ; 
    15 NI0GWCFF NI0GWCFF ; 
  10 NI0GWORD NI0GWORD ; 
    15 NI0GWOOO NI0GWOOO ; 
    15 NI0GWPTN NI0GWPTN ; 
  10 NI0GWDIS NI0GWDIS ; 
    15 NI0GWDMM NI0GWDMM ; 
    15 NI0GWDSS NI0GWDSS ; 
    15 NI0GWDYY NI0GWDYY ; 
  10 NI0GWMOD NI0GWMOD ; 
  10 NI0GWMF1 NI0GWMF1 ; 
  10 NI0GWMF2 NI0GWMF2 ; 
  10 NI0GWMF3 NI0GWMF3 ; 
  10 NI0GWMF4 NI0GWMF4 ; 
  10 NI0GWMF5 NI0GWMF5 ; 
  10 NI0GWMF6 NI0GWMF6 ; 
  10 NI0GWMF7 NI0GWMF7 ; 
  10 NI0GWMF8 NI0GWMF8 ; 
  10 NI0GWMFB NI0GWMFB ; 
  10 NI0GWMFC NI0GWMFC ; 
  10 NI0GWMFD NI0GWMFD ; 
  10 NI0GWMFI NI0GWMFI ; 
  10 NI0GWMFK NI0GWMFK ; 
  10 NI0GWMFU NI0GWMFU ; 
  10 NI0GWMFX NI0GWMFX ; 
  10 NI0GWMFZ NI0GWMFZ ; 
  10 NI0GWML1 NI0GWML1 [6] ; 
  10 NI0GWML2 NI0GWML2 [6] ; 
  10 NI0GWML3 NI0GWML3 [6] ; 
  10 NI0GWLKE NI0GWLKE ; 
    15 NI0GWKUC NI0GWKUC ; 
    15 YSMXOB YSMXOB ; 
    15 XGPCD XGPCD ; 
    15 NI0GWVAL NI0GWVAL ; 
  10 NI0GWIKE NI0GWIKE ; 
    15 NI0GWZAR NI0GWZAR ; 
    15 NI0GWZRT NI0GWZRT ; 
  10 NI0GW-OLD-SA NI0GW-OLD-SA ; 
  10 NI0GW-NEW-SA NI0GW-NEW-SA ; 
  10 NI0GW-GCOA-MESSAGE NI0GW-GCOA-MESSAGE ; 
    15 NI0GW-GCOA-TEXT NI0GW-GCOA-TEXT ; 
    15 NI0GW-GCOA-KEY NI0GW-GCOA-KEY ; 
  10 NI0GW-GCOA-ERR-FLG NI0GW-GCOA-ERR-FLG ; 
end // end NI0GW01

//*** RECORD=NI0GW02 ****
// this is the line item array for ni0h
// ***********************
Record NI0GW02 type basicRecord
  5 NIBGROUP NIBGROUP [100] ; 
    10 NIDIVCID NIDIVCID ; 
    10 NIBLINBR NIBLINBR ; 
    10 NIBLITXT NIBLITXT ; 
    10 NIBLIAMT NIBLIAMT ; 
    10 NIBLFCUR NIBLFCUR ; 
    10 ZCHCD ZCHCD ; 
    10 GLAGRP GLAGRP ; 
      15 GLAENT GLAENT ; 
      15 GLARCID GLARCID ; 
      15 GLANTAC GLANTAC ; 
      15 GLASUB GLASUB ; 
      15 GLAPRJ GLAPRJ ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
  5 ZRTCD ZRTCD [100] ; 
  5 NI0GWUPD NI0GWUPD [100] ; 
end // end NI0GW02

// ga-glbl-acct-id not found flag
DataItem NI0GW-GCOA-ERR-FLG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ga-glbl-acct-id key
DataItem NI0GW-GCOA-KEY char(42)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// key error on vgcoa001 table
DataItem NI0GW-GCOA-MESSAGE char(60)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table name description
DataItem NI0GW-GCOA-TEXT char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// New Shipto Addr Id
DataItem NI0GW-NEW-SA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Original Shipto Addr Id
DataItem NI0GW-OLD-SA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// add mode flag
DataItem NI0GWADD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warning edit flag
DataItem NI0GWARN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// basic inquiry only user flag
DataItem NI0GWBIQ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work mm
DataItem NI0GWBMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work yy
DataItem NI0GWBYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// filler
DataItem NI0GWCFF num(11)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fastpath item
DataItem NI0GWCIT char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ivc id from fastpath
DataItem NI0GWCIV num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date ccyymm
DataItem NI0GWDIS char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work mm
DataItem NI0GWDMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// filler
DataItem NI0GWDSS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max in ws array index
DataItem NI0GWDX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last row of array on scrn idx
DataItem NI0GWDX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen position index
DataItem NI0GWDX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work index
DataItem NI0GWDX4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work index
DataItem NI0GWDX5 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work index 6
DataItem NI0GWDX6 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work yy
DataItem NI0GWDYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quit flag
DataItem NI0GWEND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// exit warning indicator
DataItem NI0GWEXT smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ivc hdr total amt
DataItem NI0GWHTA decimal(11,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// init error flag
DataItem NI0GWIER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// misc ivc id
DataItem NI0GWIID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NIIREC display key
DataItem NI0GWIKE char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// incoming key flag
DataItem NI0GWINK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// inquiry list flag
DataItem NI0GWINQ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// key chg flag
DataItem NI0GWKCH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// key error flag
DataItem NI0GWKER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// company id
DataItem NI0GWKUC num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// nilrec display key
DataItem NI0GWLKE char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// kumstrid modified flag
DataItem NI0GWMF1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ni0gmiid modified flag
DataItem NI0GWMF2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// niarcrfl modified flag
DataItem NI0GWMF3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ziscd modified flag
DataItem NI0GWMF4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op1cuoid modified flag
DataItem NI0GWMF5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op1norid modified flag
DataItem NI0GWMF6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sr1shpdt modified flag
DataItem NI0GWMF7 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op1cupo modified flag
DataItem NI0GWMF8 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xlbcd modified flag
DataItem NI0GWMFB char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op1cmpnb modified flag
DataItem NI0GWMFC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// niaptddt modified flag
DataItem NI0GWMFD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nidivcid modified flag
DataItem NI0GWMFI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// kuccoid modified flag
DataItem NI0GWMFK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xxxusrid modified flag
DataItem NI0GWMFU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xptcd modified flag
DataItem NI0GWMFX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// zivcd modified flag
DataItem NI0GWMFZ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// zchcd modified flags
DataItem NI0GWML1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// niblitxt modified flags
DataItem NI0GWML2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nibliamt modified flags
DataItem NI0GWML3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen m200 modified flag
DataItem NI0GWMOD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work date ccyymm
DataItem NI0GWMTH num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// first time flag
DataItem NI0GWONE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work order filler
DataItem NI0GWOOO num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work order nbr
DataItem NI0GWORD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work partn nbr
DataItem NI0GWPTN num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// remit-to chgd flag
DataItem NI0GWRMF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// upd flag
DataItem NI0GWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NL-ORD-LO-VAL
DataItem NI0GWVAL num(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// zar-acct-reg-cd
DataItem NI0GWZAR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ZRT-RCV-TYP-CD
DataItem NI0GWZRT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

