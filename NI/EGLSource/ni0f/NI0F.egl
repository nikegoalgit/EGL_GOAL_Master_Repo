package ni0f;

import corpcom3.XPNI001;
import corpcom3.XPNL002;
import corpcom3.XPNL004;
import corpcom3.XPNL005;
import corpcom4.XSENTRY;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XCTTBL;
import corpx1.XLATBL;
import corpz3.ZCHTBL;
import corpz3.ZDTTBL;
import corpz3.ZISTBL;
import ku.common.KUCREC;
import ni.common.NIWREC;
import nl.common.NLXREC;
import ta.common.TA1REC;
import vv.common.VNLGLA01;
import vv.common.VPIADJ01;
import vv.common.VPIHDR01;
import vv.common.VZFC0001;
//*** PROGRAM=NI0F ****
// Invoice Inquiry - Miscellaneous Charges
// .
//      This application displays any Miscellaneous charges
// as well as non-netted discounts that may be associated
// with a product invoice.  If no miscellaneous charges are
// present, a message to that effect is given.
// 
// .
// Maintenance
//    Date       Who     Remarks
// -----------  ------   -------
//   11-06-89   tgriff   Moved to Production.
//   04-04-90   jjohns   Changed GL fields to match GLAREC.
//                       Made foreign amount a decimal.
//   10-14-92   JJUDKI   OCT DB CHGS.
//   11-18-92   JJUDKI   Remove zfctbl from table list. Use io
//                       mod dc0060 for zfcdesc in xpni001.
// *********************
Program NI0F type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "NL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  NI0FW01 NI0FW01; // record
  NI0FW02 NI0FW02; // record
  NIWREC NIWREC; // record
  NLXREC NLXREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  VNLGLA01 VNLGLA01; // record
  VPIADJ01 VPIADJ01; // record
  VPIHDR01 VPIHDR01; // record
  VZFC0001 VZFC0001; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCTTBL; // table
  use XLATBL {deleteAfterUse = yes}; // table
  use ZCHTBL {deleteAfterUse = yes}; // table
  use ZISTBL {deleteAfterUse = yes}; // table
  use ZDTTBL {deleteAfterUse = yes}; // table
  use NI0FM.NI0FM100,  // forms
      NI0FM.NI0FM200
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    NI0F000: NI0F000();
    ;
    ;
    exit program;
    ;
    ;
    ;
  end // end main
end // end NI0F

// application main logic
Function NI0F000()
  ;
   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   xsentry checks to ensure that this application was    **/
   /* *         entered from another csp application.           **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  ;
  NI0F001(); /* initilize the application*/
  ;
  NI0FM100.XXXRVNBR = "00"; /* application maint. revision nbr.*/
  ;
  ;
  NLXREC.NLXEOAF = "N"; /* set end-of-application flag to 'no'*/
  ;
  while (NLXREC.NLXEOAF == "N") /* while not end-of-aplication*/
    NI0F050(); /* screen branch control*/
  end
  ;
  XSPF4();
  ;
  ;
end // end NI0F000

// initialize application
Function NI0F001()
   /* -----------------------------------------------------------*/
         /* initialize the application working storage*/
   /* -----------------------------------------------------------*/
  ;
  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen converse*/
  VGVar.handleHardIOErrors = 1; /* return control to program if hard db2 error*/
  ;
  ;
  XSENTRY(); /* check entered thru main menu*/
  XSSEGTR(); /* set segmented transaction id*/
  ;
  set SQLCA empty; /* clear out the "common" working*/
                                   /* storage*/
  set ERRSQLCA empty; /* clear out the "common" working*/
                                   /* storage*/
  set TA1REC empty; /* clear out the "common" working*/
                                   /* storage*/
  set NLXREC empty; /* clear out the "common" working*/
                                   /* storage*/
  set NI0FW01 empty; /* ; clear application working storage*/
  set NI0FW02 empty; /* ; clear application working storage*/
  set VPIHDR01 empty;
  set VPIADJ01 empty;
  set VNLGLA01 empty;
  set KUCREC empty;
  ;
  ;
  NLXREC.NLXEOAF = "N"; /* set application-done-switch to 'no'*/
  NLXREC.NLXERRF = "N"; /* set error-switch to 'no'*/
  NI0FW01.NI0FWARS = "N"; /* set 'adjustments read' switch off*/
  ;
  if (COMMAREA.CAFRMSYS != "NI")
    COMMAREA.CAUSERA = " ";
  end
  ;
  NIWREC.NIWGROUP = COMMAREA.CAUSERA;
  ;
   /* ------------------------------------------------------*/
    /* Set up working-storage array of screen names*/
   /* ------------------------------------------------------*/
  ;
  NLXREC.NLXCSCRN = "NI0FM100"; /* first screen of applic.*/
  ;
  NLXREC.NLXSNAME[1] = "NI0FM100";
                                   /* init screens used in this applic.*/
  NLXREC.NLXSNAME[2] = "NI0FM200";
                                   /* init screens used in this applic.*/
  ;
  ;
   /* **********************************************/
   /* Was this application entered via 'fastpath'?*/
   /* **********************************************/
  if (COMMAREA.CAITEM != " ") /* 'Item' will be non-blank if fastpath*/
    ;
    XPNL004(); /* Validate caitem numeric*/
    ;
    if (NLXREC.NLXERRF == "Y") /* If error in 'item'*/
      NIWREC.NIWMSGNR = 32;
      COMMAREA.CATOAP = "NI0A";
      COMMAREA.CAUSERA = NIWREC.NIWGROUP;
      XPNL002();
    else /* Item is numeric*/
      NIWREC.NIWIAIDX = 1;
      NIWREC.NIWIAIVC[NIWIAIDX] = NLXREC.NLXNUM8A;
      VPIHDR01.NIDIVCID = NLXREC.NLXNUM8A;
      XPNI001();
    end
    ;
    COMMAREA.CATOAP = " "; /* Clear commarea*/
    COMMAREA.CAITEM = " ";
    ;
  else /* Normal function key transfer in*/
    if (COMMAREA.CAUSERA != " ")
      NIWREC.NIWGROUP = COMMAREA.CAUSERA;
      ;
      if (NIWREC.NIWIAIDX < 1
       || NIWREC.NIWIAIDX > 100)
        NIWREC.NIWMSGNR = 32; /* Clear work area for key*/
        COMMAREA.CATOAP = "NI0A";
        COMMAREA.CAUSERA = NIWREC.NIWGROUP;
        XPNL002();
      end
    else
      NIWREC.NIWMSGNR = 32; /* Clear work area for key*/
      COMMAREA.CATOAP = "NI0A";
      COMMAREA.CAUSERA = NIWREC.NIWGROUP;
      XPNL002();
    end
  end
end // end NI0F001

// screen branch control
Function NI0F050()
  ;
   /* ************************************************************/
   /* *   control process the application screen(s)             **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/
  ;
   /* MOVE 'ni0f050' TO nLXREC.nLXCPROC; set current process name*/
  ;
  ;
  sysVar.arrayIndex = 0;
  NLXREC.NLXSCRNX = 0;
  ;
  if (NLXREC.NLXCSCRN in NLXREC.NLXSNAME)
     /* if current-screen-name is in the screen-array, then set*/
     /* the screen-index*/
    NLXREC.NLXSCRNX = sysVar.arrayIndex;
  end
  ;
  ;
  NLXREC.NLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
  NLXREC.NLXBLDSC = "Y"; /* set build screen flag to 'yes'*/
  NLXREC.NLXERRF = "N"; /* clear error flag*/
  converseLib.validationFailed(0);
  ;
  if (NLXREC.NLXSCRNX == 1) /* if screen ni0fm100*/
    while (NLXREC.NLXEOSF == "N") /* while not end-of-screen*/
      NI0F100(); /* process screen ni0fm100*/
    end
  else
    if (NLXREC.NLXSCRNX == 2) /* if screen NI0Cm200*/
      while (NLXREC.NLXEOSF == "N") /* while not end-of-screen*/
        NI0F200();
      end
    end
  end
  ;
  ;
   /* at this point;*/
       /* if the end-of-application flag (nlxeoaf ) = 'n'*/
         /* the perform will return to the top of ni0%050...*/
       /* else*/
         /* THE PERFORM WILL AUTO RETURN TO NI0%000.*/
  ;
  ;
  ;
end // end NI0F050

// miscellaneous charges screen
Function NI0F100()
  ;
   /* -----------------------------------------------------------*/
       /* process screen ni0fm100*/
  ;
     /* note - this process is being performed in a*/
        /* "while loop" from ni0f050 until the end-of-screen*/
        /* flag (nlxeosfl) is set to 'y'.*/
  ;
   /* -----------------------------------------------------------*/
  ;
  NLXREC.NLXCPROC = "NI0F100";
  ;
  if (NLXREC.NLXBLDSC == "Y")
    NI0F101();
    NLXREC.NLXBLDSC = "N";
  end
  ;
  converse NI0FM100 ;
  ;
   /* -----------------------------------------------------------*/
       /* process screen ni0fm100*/
  ;
     /* note - this process is being performed in a*/
        /* "while loop" from ni0f050 until the end-of-screen*/
        /* flag (nlxeosfl) is set to 'y'.*/
  ;
   /* -----------------------------------------------------------*/
  ;
  ;
  NI0FM100.VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";
  ;
  NI0F110(); /* check attention identifier*/
  ;
  if (NLXREC.NLXERRF == "N") /* check for error*/
    NI0F120(); /* process entered option*/
  end
  ;
  ;
  ;
end // end NI0F100

// build screen
Function NI0F101()
   /* **************************************/
   /* Build NI0FM100 map*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NI0F101";
  ;
  converseLib.clearScreen();
  set NI0FM100 empty;
  ;
  NI0FM100.XXXRVNBR = "00"; /* revision nbr*/
  NI0FM100.XXXPRCNM = "NI0F100"; /* process name*/
  NI0FM100.XXXMAPNM = "NI0FM100"; /* map name*/
  NI0FM100.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  ;
   /* ***********************************/
   /* Load out current invoice number...*/
   /* ***********************************/
  ;
  VPIHDR01.NIDIVCID = NIWREC.NIWIAIVC[NIWIAIDX];
  ;
  NI0FM100.NIDIVCID = NIWREC.NIWIAIVC[NIWIAIDX];
  NI0FW01.NI0FWCUO = NIWREC.OP1CUOID; /* Load map fields*/
  NI0FW01.NI0FWNOR = NIWREC.OP1NORID;
  NI0FM100.NI0FMORD = NI0FW01.NI0FWORD;
  ;
  NI0FW01.NI0FWKUC = NIWREC.KUCCOID;
  NI0FW01.NI0FWKUM = NIWREC.KUMSTRID;
  NI0FM100.NI0FMCST = NI0FW01.NI0FWCST;
  ;
  NI0FM100.KUCCONM = NIWREC.KUCCONM;
  NI0FM100.XCTDESC = NIWREC.XCTDESC;
  NI0FM100.NIWSTAB = NIWREC.NIWSTAB;
   /* MOVE NIWREC.ZFCABRV TO NI0FM100.ZFCABRV;*/
  NI0FM100.ZFCABRV = "US$";
   /* MOVE NIWREC.NL-EXCHG-RATE TO NI0FM100.ZFCXRATE;*/
  if (NIWREC.NIWZDTCD in ZDTTBL.ZDTCD)
    NI0FM100.ZDTABRV = ZDTTBL.ZDTABRV[sysVar.arrayIndex];
  end
  NI0FM100.XXXADR1 = NIWREC.XXXADR1;
  ;
   /* ************************/
   /* Load adjustments array*/
   /* ************************/
  ;
  if (NI0FW01.NI0FWARS == "N")
    ;
    NI0FS01(); /* Load adjustments array*/
    ;
  end
  ;
   /* Clear any previous error indication*/
  ;
  NI0FW01.NI0FWSCX = 1; /* Set screen index*/
  ;
  while (NI0FW01.NI0FWSCX < 9)
    set NI0FM100.NLXGLC[NI0FWSCX] normal;
    NI0FW01.NI0FWSCX = NI0FW01.NI0FWSCX + 1;
    ;
  end
   /* ************************************/
   /* Load screen from adjustments array*/
   /* ************************************/
  ;
  NI0FW01.NI0FWSCX = 1; /* Set screen index*/
  ;
  while (NI0FW01.NI0FWSCX < 9
   && NI0FW02.NI0FWCAB[NI0FWSCX] != " ")
    ;
    NI0FM100.ZCHABRV[NI0FWSCX] = NI0FW02.NI0FWCAB[NI0FWSCX];
    NI0FM100.NLXAMT[NI0FWSCX] = NI0FW02.NI0FWAMT[NI0FWSCX];
    NI0FM100.NLXNBF[NI0FWSCX] = NI0FW02.NI0FWNBF[NI0FWSCX];
    NI0FM100.NLXGLC[NI0FWSCX] = NI0FW02.NI0FWGLC[NI0FWSCX];
    NI0FM100.NLXGLDES[NI0FWSCX] = NI0FW02.NI0FWGLD[NI0FWSCX];
    ;
    if (NI0FW02.NI0FWGLD == " INVALID G/L CODE")
      converseLib.validationFailed(71);
      set NI0FM100.NLXGLC[NI0FWSCX] cursor, modified, bold;
    end
    ;
    NI0FW01.NI0FWSCX = NI0FW01.NI0FWSCX + 1;
    ;
  end
end // end NI0F101

// validate PF keys; act on some
Function NI0F110()
  ;
   /* -----------------------------------------------------------*/
     /* validate pf keys*/
  ;
     /* The only keys acted upon at this time are pf 1, 3, and 4.*/
  ;
  ;
   /* -----------------------------------------------------------*/
  ;
  ;
  set NI0FM100.CATOAP initialAttributes;
  set NI0FM100.CAITEM initialAttributes;
  ;
  ;
      /* check for fastpath option/item*/
  ;
  if (converseVar.eventKey is enter)
    if (NI0FM100.CATOAP != " ") /* if fastpath option entered,*/
      COMMAREA.CATOAP = NI0FM100.CATOAP;
      COMMAREA.CAITEM = NI0FM100.CAITEM;
      COMMAREA.CAUSERA = " ";
      XPNL002(); /* exit application*/
    else
      COMMAREA.CATOAP = "NI0D";
      COMMAREA.CAUSERA = NIWREC.NIWGROUP;
      XPNL002();
    end
  end
  ;
  ;
  ;
  if (converseVar.eventKey is pf1) /* skip edit/updt, go to 'help'*/
    XSPF1();
  end
  ;
  ;
  ;
  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "NI0A"; /* go to sel menu*/
    COMMAREA.CAUSERA = " ";
    XPNL002(); /* exit*/
  end
  ;
  ;
  if (converseVar.eventKey is pf4) /* go to master menu*/
    COMMAREA.CAUSERA = " ";
    XSPF4();
  end
  ;
  if (converseVar.eventKey is pf13)
    COMMAREA.CATOAP = "NI0C"; /* go to header*/
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002(); /* exit*/
  end
  ;
  if (converseVar.eventKey is pf14)
    COMMAREA.CATOAP = "NI0E"; /* go to address*/
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002(); /* exit*/
  end
  ;
  if (converseVar.eventKey is pf16)
    NLXREC.NLXEOSF = "Y";
    NLXREC.NLXCSCRN = "NI0FM200";
    return;
  end
  ;
  if (converseVar.eventKey is pf20)
    COMMAREA.CATOAP = "NI0J"; /* go to nil menu*/
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002(); /* exit*/
  end
  ;
      /* pf key not valid*/
  ;
  converseLib.validationFailed(2); /* pf key not valid*/
  NLXREC.NLXERRF = "Y"; /* mark with error*/
  ;
  ;
end // end NI0F110

// process entered option
Function NI0F120()
   /* -----------------------------------------------------------*/
         /* process the entered option*/
   /* -----------------------------------------------------------*/
  ;
  NLXREC.NLXCPROC = "NI0F120";
  ;
  if (NLXREC.NLXEOSF == "Y")
    return;
  end
  ;
  COMMAREA.CATOAP = "NI0D"; /* go to sel menu*/
  COMMAREA.CAUSERA = NIWREC.NIWGROUP;
  XPNL002(); /* exit*/
  ;
  ;
end // end NI0F120

// miscellaneous charges screen
Function NI0F200()
  ;
   /* -----------------------------------------------------------*/
       /* process screen ni0FM200*/
  ;
     /* note - this process is being performed in a*/
        /* "while loop" from ni0f050 until the end-of-screen*/
        /* flag (nlxeosfl) is set to 'y'.*/
  ;
   /* -----------------------------------------------------------*/
  ;
  NLXREC.NLXCPROC = "NI0F200";
  ;
  if (NLXREC.NLXBLDSC == "Y")
    NI0F201();
    NLXREC.NLXBLDSC = "N";
  end
  ;
  converse NI0FM200 ;
  ;
  ;
  NI0FM100.VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";
  ;
  NI0F210(); /* check attention identifier*/
  ;
  if (NLXREC.NLXERRF == "N") /* check for error*/
    NI0F220(); /* process entered option*/
  else
    NLXREC.NLXEOSF = "Y";
    NLXREC.NLXEOAF = "Y";
  end
  ;
  ;
  ;
end // end NI0F200

// build screen
Function NI0F201()
   /* **************************************/
   /* build screen*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NI0F201";
  ;
  converseLib.clearScreen();
  set NI0FM200 initial;
  ;
  NI0FM100.XXXRVNBR = "00"; /* revision nbr*/
  NI0FM200.XXXPRCNM = "NI0F200"; /* process name*/
  NI0FM200.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  ;
   /* ***********************************/
   /* Load out current invoice number...*/
   /* ***********************************/
  ;
  VPIHDR01.NIDIVCID = NIWREC.NIWIAIVC[NIWIAIDX];
  ;
  NI0FM200.NIDIVCID = NIWREC.NIWIAIVC[NIWIAIDX];
  NI0FW01.NI0FWCUO = NIWREC.OP1CUOID; /* Load map fields*/
  NI0FW01.NI0FWNOR = NIWREC.OP1NORID;
  NI0FM200.NI0FMORD = NI0FW01.NI0FWORD;
  ;
  NI0FW01.NI0FWKUC = NIWREC.KUCCOID;
  NI0FW01.NI0FWKUM = NIWREC.KUMSTRID;
  NI0FM200.NI0FMCST = NI0FW01.NI0FWCST;
  ;
  NI0FM200.KUCCONM = NIWREC.KUCCONM;
  NI0FM200.XCTDESC = NIWREC.XCTDESC;
  NI0FM200.NIWSTAB = NIWREC.NIWSTAB;
   /* MOVE NIWREC.ZFCABRV TO NI0FM200.ZFCABRV;*/
  NI0FM200.ZFCABRV = "US$";
   /* MOVE NIWREC.NL-EXCHG-RATE TO NI0FM200.ZFCXRATE;*/
  ;
  if (NIWREC.NIWZDTCD in ZDTTBL.ZDTCD)
    NI0FM200.ZDTABRV = ZDTTBL.ZDTABRV[sysVar.arrayIndex];
  end
  NI0FM200.XXXADR1 = NIWREC.XXXADR1;
  ;
   /* ************************************/
   /* Load screen from adjustments array*/
   /* ************************************/
  ;
  NI0FW01.NI0FWSCX = 1; /* Set screen index*/
  ;
  while (NI0FW01.NI0FWSCX < 9
   && NI0FW02.NI0FWCAB[NI0FWSCX] != " ")
    ;
    NI0FM200.ZCHABRV[NI0FWSCX] = NI0FW02.NI0FWCAB[NI0FWSCX];
    NI0FM200.NLXAMT[NI0FWSCX] = NI0FW02.NI0FWAMT[NI0FWSCX];
    NI0FM200.NLXNBF[NI0FWSCX] = NI0FW02.NI0FWNBF[NI0FWSCX];
    NI0FM200.NLXFAMT[NI0FWSCX] = NI0FW02.NI0FWFAM[NI0FWSCX];
    NI0FM200.NLXGLDES[NI0FWSCX] = NI0FW02.NI0FWGLD[NI0FWSCX];
    ;
    NI0FW01.NI0FWSCX = NI0FW01.NI0FWSCX + 1;
    ;
  end
end // end NI0F201

// validate PF keys; act on some
Function NI0F210()
  ;
   /* -----------------------------------------------------------*/
     /* validate pf keys*/
  ;
     /* The only keys acted upon at this time are pf 1, 3, and 4.*/
  ;
  ;
   /* -----------------------------------------------------------*/
  ;
  ;
  set NI0FM200.CATOAP initialAttributes;
  set NI0FM200.CAITEM initialAttributes;
  ;
  ;
      /* check for fastpath option/item*/
  ;
  if (converseVar.eventKey is enter)
    if (NI0FM200.CATOAP != " ") /* if fastpath option entered,*/
      COMMAREA.CATOAP = NI0FM200.CATOAP;
      COMMAREA.CAITEM = NI0FM200.CAITEM;
      COMMAREA.CAUSERA = " ";
      XPNL002(); /* exit application*/
    end
  end
  ;
  ;
  if (converseVar.eventKey is enter) /* normal 'enter'*/
    return;
  end
  ;
  ;
  if (converseVar.eventKey is pf1) /* skip edit/updt, go to 'help'*/
    XSPF1();
  end
  ;
  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "NI0A"; /* go to sel menu*/
    COMMAREA.CAUSERA = " ";
    XPNL002(); /* exit*/
  end
  ;
  if (converseVar.eventKey is pf4) /* go to master menu*/
    COMMAREA.CAUSERA = " ";
    XSPF4();
  end
  ;
  if (converseVar.eventKey is pf13)
    COMMAREA.CATOAP = "NI0C"; /* go to header*/
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002(); /* exit*/
  end
  ;
  if (converseVar.eventKey is pf14)
    COMMAREA.CATOAP = "NI0C"; /* go to misc chgs*/
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002(); /* exit*/
  end
  ;
  if (converseVar.eventKey is pf16)
    NLXREC.NLXEOSF = "Y";
    NLXREC.NLXCSCRN = "NI0FM100";
    return;
  end
  ;
  if (converseVar.eventKey is pf20)
    COMMAREA.CATOAP = "NI0J"; /* go to nil menu*/
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002(); /* exit*/
  end
  ;
      /* pf key not valid*/
  ;
  converseLib.validationFailed(2); /* pf key not valid*/
  NLXREC.NLXERRF = "Y"; /* mark with error*/
  ;
  ;
end // end NI0F210

// process entered option
Function NI0F220()
  ;
  ;
  ;
   /* -----------------------------------------------------------*/
         /* process the entered option*/
   /* -----------------------------------------------------------*/
  ;
  ;
  if (NLXREC.NLXEOSF == "Y")
    return;
  end
  ;
  COMMAREA.CATOAP = "NI0D"; /* go to sel menu*/
  COMMAREA.CAUSERA = NIWREC.NIWGROUP;
  XPNL002(); /* exit*/
  ;
  ;
end // end NI0F220

// Load P/I Adjustments array
Function NI0FS01()
   /* ****************************/
   /* P/I Adjustments array load*/
   /* ****************************/
  ;
  VPIADJ01.NIDIVCID = NIWREC.NIWIAIVC[NIWIAIDX]; /* Load key*/
  VPIADJ01.OP2LNINB = -1; /* Wildcard line #*/
  ;
  NI0FS02(); /* Open P/I Adjustments cursor*/
  ;
  NI0FW01.NI0FWCOG = "Y"; /* Set 'cursor open' flag on*/
  NLXREC.NLXERRF = "N"; /* Set error flag off*/
  NI0FW01.NI0FWFCT = 0; /* Set 'fetch count' to 0*/
  ;
  while (NI0FW01.NI0FWCOG == "Y") /* While 'cursor open' flag on*/
    ;
    NI0FS03(); /* Load / Close P/I Adj cursor*/
    ;
    if (NI0FW01.NI0FWCOG == "Y") /* Cursor still open after fetch*/
      NI0FW01.NI0FWFCT = NI0FW01.NI0FWFCT + 1; /* Increment fetch count*/
      ;
      if (VPIADJ01.ZCHCD in ZCHTBL.ZCHCD)
        if (ZCHTBL.ZCHDCIND[sysVar.arrayIndex] == "C")
          ;
          NI0FS05(); /* Accumulate amounts*/
          ;
        end
        ;
        if (ZCHTBL.ZCHDCIND[sysVar.arrayIndex] == "D")
          if (VPIADJ01.NIGNETFL == "N")
            ;
            NI0FS05(); /* Accumulate amounts*/
            ;
            if (SQLCA.VAGen_SQLCODE == 0)
              NI0FW02.NI0FWGLD[NI0FWSCX] = VNLGLA01.NIJGLDES;
            else
              NI0FW02.NI0FWGLD[NI0FWSCX] = "INVALID G/L CODE";
            end
            ;
            NI0FW01.NI0FWZCH = VPIADJ01.ZCHCD;
            ;
          end
        end
      else
         /* Charge type not found in table*/
      end
    else
      ;
      if (NI0FW01.NI0FWFCT == 0) /* No records fetched...*/
        ;
        converseLib.validationFailed(151);
        ;
      end
    end
    NI0FW01.NI0FWARS = "Y"; /* Set 'Adjustments read' on*/
  end
end // end NI0FS01

// Open cursor 1 - NIGREC
Function NI0FS02()
   /* ************************/
   /* NIGREC - Open cursor 1*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NI0FS02";
  ;
  call "IO4510" ("S1", SQLCA, VPIADJ01) {isNoRefresh = yes, isExternal = yes}; /* Open P/I adj cursor*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "S1     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4510 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VPIADJ01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NI0FS02

// Load/Close cursor - NIGREC
Function NI0FS03()
   /* ************************/
   /* NIGREC - Load Cursor 1*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NI0FS03";
  ;
  call "IO4510" ("N1", SQLCA, VPIADJ01) {isNoRefresh = yes, isExternal = yes}; /* Load P/I adj cursor*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    if (SQLCA.VAGen_SQLCODE != 100)
      TA1REC.TA1LOCAT[2] = "N1     "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO4510 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VPIADJ01"; /* table view*/
      XPNL005(); /* abend routine*/
    else
      NI0FW01.NI0FWCOG = "N"; /* Set cursor switch off*/
      /* ************************/
       /* NIGREC - Close cursor 1*/
      /* ************************/
      ;
      call "IO4510" ("C1", SQLCA, VPIADJ01) {isNoRefresh = yes, isExternal = yes};
                                                    /* Close P/I adj cursor*/
      ;
      if (SQLCA.VAGen_SQLCODE != 0)
        TA1REC.TA1LOCAT[2] = "C1     "; /* database action*/
        TA1REC.TA1LOCAT[3] = "IO4510 "; /* io module*/
        TA1REC.TA1DBASE = "DNILO"; /* database*/
        TA1REC.TA1TBLVU = "VPIITM01"; /* table view*/
        XPNL005(); /* abend routine*/
      end
    end
  end
end // end NI0FS03

// Select Unique from NIJREC
Function NI0FS04()
   /* ************************/
   /* NIJREC - Select Unique*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NI0FS04";
  ;
  call "IO4610" ("S ", SQLCA, VNLGLA01) {isNoRefresh = yes, isExternal = yes}; /* Read G/L codes*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4610 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VNLGLA01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NI0FS04

// Load P/I Adjustments array
Function NI0FS05()
   /* ****************************/
   /* P/I Adjustments array load*/
   /* ****************************/
  ;
  if (VPIADJ01.ZCHCD != NI0FW01.NI0FWZCH)
    ;
    NI0FW01.NI0FWSCX = NI0FW01.NI0FWSCX + 1;
    ;
    NI0FW01.NI0FWZCH = VPIADJ01.ZCHCD; /* Save charge type*/
    if (VPIADJ01.ZCHCD in ZCHTBL.ZCHCD)
      NI0FW02.NI0FWCAB[NI0FWSCX] = ZCHTBL.ZCHABRV[sysVar.arrayIndex];
    end
    NI0FW02.NI0FWAMT[NI0FWSCX] = VPIADJ01.NIGUSAMT; /* Load*/
    NI0FW02.NI0FWNBF[NI0FWSCX] = VPIADJ01.NIGNETFL; /* array*/
    ;
    NLXREC.GLAENT = VPIADJ01.GLAENT;
    NLXREC.GLARCID = VPIADJ01.GLARCID;
    NLXREC.GLANTAC = VPIADJ01.GLANTAC;
    NLXREC.GLASUB = VPIADJ01.GLASUB;
    NLXREC.GLAPRJ = VPIADJ01.GLAPRJ;
    NI0FW02.NI0FWGLC[NI0FWSCX] = NLXREC.GLAGRP; /* fields*/
    VNLGLA01.GLAENT = VPIADJ01.GLAENT;
    VNLGLA01.GLARCID = VPIADJ01.GLARCID;
    VNLGLA01.GLANTAC = VPIADJ01.GLANTAC;
    VNLGLA01.GLASUB = VPIADJ01.GLASUB;
    VNLGLA01.GLAPRJ = VPIADJ01.GLAPRJ;
    ;
    NI0FW02.NI0FWFAM[NI0FWSCX] = VPIADJ01.NIGFCAMT;
    ;
    NI0FS04(); /* Select unique G/L Verification*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      NI0FW02.NI0FWGLD[NI0FWSCX] = VNLGLA01.NIJGLDES;
    else
      NI0FW02.NI0FWGLD[NI0FWSCX] = "INVALID G/L CODE";
    end
    ;
  else /* Same charge type*/
    ;
    NI0FW02.NI0FWAMT[NI0FWSCX] = NI0FWAMT[NI0FWSCX] + VPIADJ01.NIGUSAMT;
    NI0FW02.NI0FWFAM[NI0FWSCX] = NI0FWFAM[NI0FWSCX] + VPIADJ01.NIGFCAMT;
    ;
  end
end // end NI0FS05

Record NI0FW01 type basicRecord
  5 NI0FWORD NI0FWORD ; 
    10 NI0FWCUO NI0FWCUO ; 
    10 NI0FWNOR NI0FWNOR ; 
  5 NI0FWCST NI0FWCST ; 
    10 NI0FWKUC NI0FWKUC ; 
    10 NI0FWKUM NI0FWKUM ; 
  5 NI0FWARS NI0FWARS ; 
  5 NI0FWSCX NI0FWSCX ; 
  5 NI0FWFCT NI0FWFCT ; 
  5 NI0FWCOG NI0FWCOG ; 
  5 NI0FWZCH NI0FWZCH ; 
end // end NI0FW01

Record NI0FW02 type basicRecord
  10 NI0FWCAB NI0FWCAB [8] ; 
  10 NI0FWAMT NI0FWAMT [8] ; 
  10 NI0FWNBF NI0FWNBF [8] ; 
  10 NI0FWGLC NI0FWGLC [8] ; 
  10 NI0FWGLD NI0FWGLD [8] ; 
  10 NI0FWFAM NI0FWFAM [8] ; 
end // end NI0FW02

// US $ Amount
DataItem NI0FWAMT num(12,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Adjustments read switch
DataItem NI0FWARS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Charge type abbreviation
DataItem NI0FWCAB char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor open flag - NIGREC
DataItem NI0FWCOG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Customer.Store
DataItem NI0FWCST num(11,4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Order # portion
DataItem NI0FWCUO num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Foreign Currency Amount
DataItem NI0FWFAM num(14,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Rows fetched count
DataItem NI0FWFCT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// G/L Code
DataItem NI0FWGLC char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// G/L Account description
DataItem NI0FWGLD char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Customer number
DataItem NI0FWKUC num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Store number
DataItem NI0FWKUM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Net Billing flag
DataItem NI0FWNBF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sub-Order # portion
DataItem NI0FWNOR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Display Order/Suborder #
DataItem NI0FWORD num(10,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// W/S Screen array index
DataItem NI0FWSCX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hold area for charge type
DataItem NI0FWZCH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

