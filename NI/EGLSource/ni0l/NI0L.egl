package ni0l;

import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPNL001;
import corpcom3.XPNL002;
import corpcom3.XPNL003;
import corpcom3.XPNL005;
import corpcom3.XPXCT01;
import corpcom3.XPXLA01;
import corpcom3.XPXPT01;
import corpcom3.XPXX001;
import corpcom3.XPZCH01;
import corpcom3.XPZPR01;
import corpcom4.XSENTRY;
import corpcom4.XSNLS01;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom5.GLAREC;
import corpcom6.SQLCA;
import corpcom7.XXXADDR1;
import corpx1.XATCD;
import corpx1.XAUCD;
import corpx1.XAUTBL;
import corpx1.XCTCD;
import corpx1.XCTTBL;
import corpx1.XGPCD;
import corpx1.XLATBL;
import corpx1.XLBCD;
import corpx1.XPTTBL;
import corpx2.XPTCD;
import corpx2.XPTCTRLI;
import corpx2.XPTDAYS;
import corpx2.XPTDESC;
import corpx2.XPTLCFL;
import corpx2.XXXUSRID;
import corpy2.XXXUNTXT;
import corpz3.ZARCD;
import corpz3.ZCHCD;
import corpz3.ZCHDESC;
import corpz3.ZCHTBL;
import corpz3.ZFCABRV;
import corpz3.ZFCCD;
import corpz3.ZPRTBL;
import ku.common.KUCCOID;
import ku.common.KUCREC;
import nc.common.NCALCIID;
import nc.common.NCALCRID;
import ni.common.NIAPTDDT;
import ni.common.NIGUSAMT;
import ni.common.NIOLBOVR;
import ni.common.NIWREC;
import nl.common.*;
import op.common.OP1CMPNB;
import op.common.OP1PTOF;
import op.common.OP1REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ts.common.TSFSHPID;
import ts.common.TSUREC;
import ts.common.TSVPLNBR;
import ts.common.TSVREC;
import vv.common.VCPATH01;
import vv.common.VDSTRB01;
import vv.common.VGCOA001;
import vv.common.VINTGL02;
import vv.common.VLCHDR01;
import vv.common.VLCORD01;
import vv.common.VRQTHD01;
import vv.common.VRQTXT01;
import vv.common.VZCHGL01;
//*** PROGRAM=NI0L ****
// ************************************************************
// 
//          ni0l - nil invoice request overrides/charges
//          ---------------------------------------------
// 
// This application allows the user to override the userid,
// the remit to, and payment terms.  Miscellaneous charges
// can also be entered using a valid charge type.
// 
// NOTE:  This program uses an internal remit to table which
//        is initialized in process 001.  It is used to edit
//        for NIL-only remit to codes.
// 
// 
// Maintenance History:
//   Date   Who    Remarks
// -------- ------ --------------------------------------------
// 09-27-89 jjohns Creation
// 12-20-89 jjohns Delete comp nbr gl logic in s31.
// 01-10-90 jjohns Check change count before update in s28.
// 01-23-90 jjohns Put load of pl nbrs in s37.
//                 Added scrolling for multiple LCs on order.
// 03-14-90 jjohns Chg European Apparel remit-to in s10 and
//                 add comp nbr edit in s02.
// 03-21-90 jjohns Restore revised comp gl logic in s31.
// 03-23-90 jjohns Add European Apparel remit-to in s10.
// 04-10-90 jjohns Allow remit-to overrides for EU apparel
//                 and modify the logic for looking up the
//                 invoice request LC id.  Allow foreign
//                 currency decimals when needed and edit
//                 multiple LCs.  Modify logic for setting
//                 the xptcd override flag.
// 06-06-90 jjohns Add payment terms/ship date edit. (#58)
// 09-17-90 jshann Chg set all active requests to inactive
// 10-29-90 jshann Correct problem where final invoices were
//                 being set to inactive allowing reinvoicing.
// 10-29-90 jshann Add logic to create a comment record type A
//                 if Allen street address is Remit to addr.
// 12-26-90 JSHANN REMOVED CONFIRM LOGIC FOR REMIT TO ADDRESS
// 02-11-91 JSHANN DB2 CHANGE USE BILL TO ADDR ID FORM CMPNY
// 05-02-91 JSHANN ADD XPT 'NY' TO PAST DUE EDIT.
// 06-18-91 LNGO   Remove the logic which allows the user to
// 10-14-91 LNGO   Add the ultimate country field to NI0L;
//                 default value to country code on the cust-
//                 omer header  and provide a pop-up windows
//                 of valid values  and leave initial cursor
//                 position as is.
// 11-06-91 jshann corrected ultimate country logic, to move
//                 from customer and not comp customer
// 01-13-92 jshann Made changes for the new remit-to code bv
// 02-06-92 jjudki Task#491. Changes for distributor table.
// 04-14-92 jshann Task#613. Move Distrb lookup into S03.
// 05-27-92 jjudki Add Africa Acct Reg Code: s40,s41.
// 07-08-92 jjudki Init. pymt terms 'NO' days to 20 in niol001.
// 10-14-92 jjudki OCT DB CHANGES.
// 11-18-92 jjudki Remove zfctbl from table list.
// 11-09-93 jjudki nov db changes.
// 12-15-93 jshann do not override payment terms for comp num
//                 824292
// 03-22-94 ahowar added error 425 edit comp-nbr/whse code
// 04-08-94 jshann added remit-to address over-ride for lc's
// 06-01-94 jshann Allow 65 XAU for comp-numbers
// 09-12-94 ahowar ni0ls31 skip glent 100 code added
// 06-20-95 ahowar ni0l120 edit for exceed of 5 pack lists
// 08-11-95 ahowar ni0l120,ni0ls08,ni0ls06 pmt-cd security
// 02/28/96 bbasha modifications for ga-glbl-acct-id.
//                 added ni0ls-vgcoa001-f, ni0ls-vgcoa001-s
//                 to translate ga-glbl-acct-id to
//                 gl-gen-led-acct.
//                 added xxxmsg to map niolm niolm100.
//                 changed all pfhrec references to vintgl02.
//                 changed all vintgl01 references to
//                 vintgl02.
//                 added vgc0a001, glarec, vintgl02.
//                 deleted pfhrec (vintgl01).
//                 added messages 433, 434 to nl00enu.
// 10-27-98 pmonag added if statement in S31 for entity id 104
//                 invoice will no longer default to 'NC'.
// 11-16-98 PMONAG CHANGED MAP DF-3 TO MS-4.
// 01-18-00 JNARAS CHANGED THE STATEMENT GROUPS NI0LS02,NI0LS10
//                 AND NI0L120 TO PROTECT THE FIELD KUCCOID.
// 07-26-01 LTANIK Changed SGROUP NI0LS31 TO ACCPET GL-ENTITY
//                 '105' AS VALID.
// 08-03-01 LTANIK Changed Code in NI0LS-OP1CMPNB-EDT to
//                 remove the comp nbr req. for WHSE 9.
// *********************
Program NI0L type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "NL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  GLAREC GLAREC; // record
  KUCREC KUCREC; // record
  NI0LW01 NI0LW01; // record
  NIWREC NIWREC; // record
  NLXREC NLXREC; // record
  OP1REC OP1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TSUREC TSUREC; // record
  TSVREC TSVREC; // record
  VCPATH01 VCPATH01; // record
  VDSTRB01 VDSTRB01; // record
  VGCOA001 VGCOA001; // record
  VINTGL02 VINTGL02; // record
  VLCHDR01 VLCHDR01; // record
  VLCORD01 VLCORD01; // record
  VRQTHD01 VRQTHD01; // record
  VRQTXT01 VRQTXT01; // record
  VZCHGL01 VZCHGL01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use ZPRTBL {deleteAfterUse = yes}; // table
  use ZCHTBL {deleteAfterUse = yes}; // table
  use XLATBL {deleteAfterUse = yes}; // table
  use XPTTBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use XAUTBL {deleteAfterUse = yes}; // table
  use NI0LM.NI0LM100, // form
  		NI0LM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    NI0L000: NI0L000();
    exit program;
  end // end main
end // end NI0L

// main flow
Function NI0L000()
  ;
   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   perform initialization, set application revision nbrs,**/
   /* *   then do main perform until done with application      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0L000";
  COMMAREA.CACURRAP = "NI0L";
  ;
  NI0L001(); /* initilize the application*/
  ;
  NLXREC.NLXEOAF = "N"; /* set end-of-application flag to 'no'*/
  ;
  while (NLXREC.NLXEOAF == "N") /* while not end-of-aplication*/
    NI0L050(); /* process the application screen(s)*/
  end
  ;
  COMMAREA.CACURRAP = "NL0A";
  XPNL002();
  exit program;
end // end NI0L000

// initialize application
Function NI0L001()
  ;
  ;
   /* -----------------------------------------------------------*/
         /* initialize the application working storage*/
  ;
   /* -----------------------------------------------------------*/
  ;
  ;
  NLXREC.NLXCPROC = "NI0L001";
  ;
  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen*/
                                   /* converse*/
  VGVar.handleHardIOErrors = 1; /* return control to appl if hard db2*/
                                   /* error*/
  ;
  set NI0LW01 empty; /* clear working storage rec1*/
  set VLCHDR01 empty; /* clear lc header record*/
  set VLCORD01 empty; /* clear lc order xref*/
  set VRQTHD01 empty; /* clear inv req header record*/
  set VRQTXT01 empty; /* clear inv text record*/
   /* SET KUAREC EMPTY                ; clear cust bill grp record*/
  set KUCREC empty; /* clear cust comp record*/
  set VDSTRB01 empty; /* clear distributor record*/
  set OP1REC empty; /* clear order header record*/
  set VINTGL02 empty; /* clear proft int gl record*/
  set TSUREC empty; /* clear shipment hdr record*/
  set TSVREC empty; /* clear packing list hdr record*/
  set VCPATH01 empty;
  set TA1REC empty;
  set TA2REC empty;
  set SQLCA empty;
  set ERRSQLCA empty;
  ;
  XSENTRY(); /* appl entry security*/
  XSSEGTR(); /* set segmented transaction id*/
  ;
  set NIWREC empty; /* clear common working storage*/
  ;
  set NLXREC empty; /* clear common working storage*/
  NLXREC.NLXPF3 = "N"; /* pf3 confirm flag*/
  NLXREC.NLXPF4 = "N"; /* pf4 confirm flag*/
  NLXREC.NLXPF20 = "N"; /* pf20 confirm flag*/
  ;
  NI0LW01.NI0LWOFL = "N"; /* niorec found flag*/
  NI0LW01.NI0LWPTF = "N"; /* payment term valid flag*/
  NI0LW01.NI0LWERF = "N"; /* xpt/lc warning flag*/
  NI0LW01.NI0LWSCG = "N"; /* screen changed flag*/
  NI0LW01.NI0LWUFK = "N"; /* kuccoid unprotected flag*/
  NI0LW01.NI0LWUFB = "N"; /* xlbcd unprotected flag*/
  NI0LW01.NI0LWPFX = "N"; /* xptcd protected flag*/
  NI0LW01.NI0LWGNF = "N"; /* internal gl not found*/
  NI0LW01.NI0LW-GCOA-ERR-FLG = "N"; /* vgcoa001 not found*/
  NI0LW01.NI0LWCMP = "N"; /* cmp-nbr reqd with whse 03/09/12*/
  NI0LW01.NI0LWENT = "N"; /* enter key flag*/
  NI0LW01.NI0LWF15 = "N"; /* pf15 confirm flag*/
  NI0LW01.NI0LW-ENTER-CONFIRM = "N"; /* pf20 confirm flag*/
  ;
  if (COMMAREA.CAFRMSYS != "NI")
    COMMAREA.CAUSERA = " ";
  end
  ;
  NIWREC.NIWGROUP = COMMAREA.CAUSERA;
  ;
  if (COMMAREA.CAFROMAP == "NI0Q" /* fastpath entry not allowed*/
   || COMMAREA.CAFROMAP == "NI0M" /* fastpath entry not allowed*/
   || NIWREC.NIWFRMAP == "NI0N")  /* pf3 from address*/
    /* next sentence*/
  else
    COMMAREA.CATOAP = "NI0K";
    XPNL002();
  end
  ;
  NI0LS01(); /* select unique on inv req hdr*/
  NI0LW01.NI0LWCT1 = VRQTHD01.ZZZCHGCT; /* save change count*/
  ;
   /* Set up working storage lock box array*/
   /* The purpose of this table is to limit the values in the*/
   /* corporate xlatbl to just those used by NIL.*/
  ;
  NI0LW01.NI0LWXLB[1] = "IN"; /* Inc*/
  NI0LW01.NI0LWXLB[2] = "NL"; /* Nil*/
  NI0LW01.NI0LWXLB[3] = "IR"; /* Ireland*/
  NI0LW01.NI0LWXLB[4] = "GM"; /* European Apparel*/
  NI0LW01.NI0LWXLB[5] = "BV"; /* European Apparel*/
  NI0LW01.NI0LWXLB[6] = "NO"; /* European Apparel*/
  NI0LW01.NI0LWXLB[7] = "EO"; /* European Apparel*/
  ;
  ;
   /* ------------------------------------------------------*/
    /* Set up working-storage array of screen names*/
   /* ------------------------------------------------------*/
  ;
  NLXREC.NLXSNAME[1] = "NI0LM100"; /* init screens used in this appl*/
  ;
  NLXREC.NLXCSCRN = "NI0LM100"; /* set first screen to display*/
  ;
  ;
   /* ------------------------------------------------------*/
    /* Set up working-storage payment terms array*/
   /* ------------------------------------------------------*/
  ;
  NI0LW01.NI0LWXPT[1] = "NP"; /* init payment terms*/
  NI0LW01.NI0LWXPT[2] = "NQ";
  NI0LW01.NI0LWXPT[3] = "NR";
  NI0LW01.NI0LWXPT[4] = "NS";
  NI0LW01.NI0LWXPT[5] = "NY";
  NI0LW01.NI0LWXPT[6] = "NO";
  ;
  NI0LW01.NI0LWDAY[1] = 20; /* init do not invoice after days*/
  NI0LW01.NI0LWDAY[2] = 35;
  NI0LW01.NI0LWDAY[3] = 50;
  NI0LW01.NI0LWDAY[4] = 80;
  NI0LW01.NI0LWDAY[5] = 20;
  NI0LW01.NI0LWDAY[6] = 20;
  ;
  ;
  ;
end // end NI0L001

// decide which map to display
Function NI0L050()
  ;
   /* ************************************************************/
   /* *   control process the application screen(s)             **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0L050"; /* set current process name*/
  ;
  sysVar.arrayIndex = 0;
  NLXREC.NLXSCRNX = 0;
  ;
  if (NLXREC.NLXCSCRN in NLXREC.NLXSNAME) /* if current-screen-name is*/
    NLXREC.NLXSCRNX = sysVar.arrayIndex; /* in the screen-array, then set*/
  end /* the screen-index*/
  ;
  set TA1REC empty;
  TA1REC.TA1MAP = NLXREC.NLXCSCRN; /* prepare for abend*/
  ;
  NLXREC.NLXBLDSC = "Y"; /* set build screen flag to 'yes'*/
  NLXREC.NLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
  NLXREC.NLXERRF = "N"; /* clear error flag*/
  ;
  if (NLXREC.NLXSCRNX == 1) /* if screen ni0lm100*/
    while (NLXREC.NLXEOSF == "N") /* show until user is done*/
      NI0L100();
    end
    TA1REC.TA1MAP = NLXREC.NLXCSCRN;
    TA1REC.TA1TBLKE = "UNKNOWN SCREEN NAME";
    TA1REC.TA1LOCAT[2] = NLXREC.NLXCSCRN;
    XPNL005(); /* abend*/
  end
  ;
   /* at this point;*/
       /* if the end-of-application flag (NLXeoaf ) = 'n'*/
         /* the perform will return to the top of ni0l050...*/
       /* else*/
         /* the perform will auto return to ni0l000.*/
  ;
end // end NI0L050

// converse map m100
Function NI0L100()
  ;
   /* ************************************************************/
       /* process screen NI0Lm100*/
  ;
     /* note that this process is being performed in a*/
        /* "while loop" from nl0k050 until the end-of-screen*/
        /* flag (nlxeosf) is set to 'y'.*/
  ;
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0L100";
  ;
  if (NLXREC.NLXBLDSC == "Y")
    NI0L101();
    NLXREC.NLXBLDSC = "N";
  end
  ;
  if (converseVar.validationMsgNum == 433)
    NI0LM100.XXXMSG = NI0LW-GCOA-MESSAGE;
    /* continue;*/
  else
    if (converseVar.validationMsgNum == 434)
      NI0LM100.XXXMSG = NI0LW-GCOA-MESSAGE;
    else
      NI0LM100.XXXMSG = " ";
    end
  end
  ;
   /* ***********************************************************/
  converse NI0LM100 ;
  ;
   /* ***********************************************************/
  ;
  VAGen_EZEMSG = " ";
  ;
  if (NI0LW01.NI0LWGNF == "Y") /* internal gl not found on s02 or s10*/
    NLXREC.NLXERRF = "Y";
    converseLib.validationFailed(154);
  else
    if (NI0LW01.NI0LW-GCOA-ERR-FLG == "Y") /* vgcoa001 row not found*/
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(433);
      NI0LM100.XXXMSG = NI0LW-GCOA-MESSAGE;
    else
      NLXREC.NLXERRF = "N";
    end
  end
  ;
  if (NI0LM100 is modified) /* set screen modified flag*/
    NI0LW01.NI0LWSCG = "Y";
  end
  ;
  NI0L110(); /* validate pfkeys*/
  ;
  NI0L115(); /* check for scrolling*/
  ;
  NI0LW01.NI0LWPOP = "N"; /* window flag*/
  if (NLXREC.NLXERRF == "N")
    NI0L120(); /* edit entries and update*/
  end
  ;
  if (NLXREC.NLXERRF == "N")
    NI0L130(); /* determine next action*/
  end
  ;
   /* at this point;*/
     /* if the end-of-screen flag (nlxeosf) is 'n'*/
        /* we go back to top of process NI0L100.*/
     /* if the end-of-screen flag (nlxeosf) is 'y'*/
        /* we return to NI0L050.*/
end // end NI0L100

// build screen
Function NI0L101()
  ;
   /* fill in all screen fields*/
  ;
   /* **************************************/
   /* build screen*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NI0L101";
  ;
  converseLib.clearScreen();
  set NI0LM100 initial;
  ;
  NI0LM100.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  NI0LM100.XXXRVNBR = "00"; /* revision nbr*/
  NI0LM100.XXXPRCNM = "NI0L100"; /* process name*/
  ;
  if (COMMAREA.CACLVL[1] == "N")
     /* do not allow user to chg payment term*/
    set NI0LM100.XPTCD skip;
    NI0LW01.NI0LWPFX = "Y"; /* xptcd protected flag*/
  end
  ;
  if (NI0LW01.NI0LWOFL == "Y") /* niorec found*/
    NI0LS02(); /* get niorec fields for m100*/
    ;
  else
    NI0LS10(); /* get default fields for m100*/
  end
  ;
  if (NI0LM100.XCTCD > " ") /* ultimate country on map*/
    NI0LS24(); /* validate the country code*/
  end
  ;
  NI0LS17(); /* format screen header fields*/
  ;
  NI0LS18(); /* format screen fields*/
  ;
  NI0LS-OP1CMPNB-EDT();
  ;
  if (NI0LW01.NI0LWIER == "Y") /* error on init*/
    NI0LW01.NI0LWIER = "N";
    return;
  end
  ;
  ;
end // end NI0L101

// edit pfkeys
Function NI0L110()
  ;
   /* **************************************/
   /* edit pk keys*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NI0L110";
  ;
  if (NI0LM100.CATOAP != " ") /* if any fastpath data entered*/
    COMMAREA.CATOAP = NI0LM100.CATOAP;
    COMMAREA.CAITEM = NI0LM100.CAITEM;
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002();
    return;
  end
  ;
  if (converseVar.eventKey not enter) /* Enter confirm flag*/
    NI0LW-ENTER-CONFIRM = "N";
  end
  ;
  if (NLXREC.NLXPF3 == "Y" /* pf3 confirm flag*/
   && converseVar.eventKey not pf3)
    NLXREC.NLXPF3 = "N";
  end
  ;
  if (NLXREC.NLXPF4 == "Y" /* pf4 confirm flag*/
   && converseVar.eventKey not pf4)
    NLXREC.NLXPF4 = "N";
  end
  ;
  if (converseVar.eventKey not pf15)
    NI0LW01.NI0LWF15 = "N"; /* pf15 confirm flag*/
    NI0LW01.NI0LWENT = "N"; /* enter key flag*/
  end
  ;
  if (NLXREC.NLXPF20 == "Y" /* pf20 confirm flag*/
   && converseVar.eventKey not pf20)
    NLXREC.NLXPF20 = "N";
  end
  ;
  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    /* next sentence*/
  else
    if (converseVar.eventKey is enter)
      NI0LW01.NI0LWENT = "Y"; /* enter pressed flag*/
    else
      if (converseVar.eventKey is pa1
       || converseVar.eventKey is pa2
       || converseVar.eventKey is pa3)
        converseLib.clearScreen();
        
         /* pa/pf key pressed is not valid*/
        converseLib.validationFailed(2);
         /* set alterable fields modified*/
        NLXREC.NLXERRF = "Y";
      else
        if (converseVar.eventKey is pf1)
          XSNLS01(); /* nil help routine - exit to gd01*/
        else
          if (converseVar.eventKey is pf4)
            if (NLXREC.NLXPF4 == "N"
             && NI0LW01.NI0LWSCG == "Y") /* screen chgd flag*/
              NLXREC.NLXPF4 = "Y";
              converseLib.validationFailed(109); /* updates not saved - pf4 to confirm*/
              NLXREC.NLXERRF = "Y";
              return;
            end
            COMMAREA.CAUSERA = " ";
            XSPF4();
          else
            if (converseVar.eventKey is pf3)
              if (NLXREC.NLXPF3 == "N"
               && NI0LW01.NI0LWSCG == "Y") /* screen chgd flag*/
                NLXREC.NLXPF3 = "Y";
                converseLib.validationFailed(108); /* updates not saved - pf3 to confirm*/
                NLXREC.NLXERRF = "Y";
                /* MOVE ' ' TO NI0LW-GCOA-TEXT;*/
                /* MOVE ' ' TO NI0LW-GCOA-MESSAGE;*/
                return;
              end
              COMMAREA.CAUSERA = NIWREC.NIWGROUP;
              COMMAREA.CATOAP = "NI0Q"; /* exit to incoterms screen*/
              XPNL002();
              return;
            else
              if (converseVar.eventKey is pf15)
                if (NI0LW01.NI0LWENT == "Y")
                  NI0LW01.NI0LWF15 = "Y";
                else
                  converseLib.validationFailed(157); /* enter key must be pressed first*/
                  NLXREC.NLXERRF = "Y";
                end
              else
                if (converseVar.eventKey is pf20)
                  if (NLXREC.NLXPF20 == "N"
                   && NI0LW01.NI0LWSCG == "Y") /* screen chgd flag*/
                    NLXREC.NLXPF20 = "Y";
                     /* updates not saved - pf20 to confirm*/
                    converseLib.validationFailed(110);
                    NLXREC.NLXERRF = "Y";
                    return;
                  end
                  COMMAREA.CATOAP = "NI0J";
                  XPNL002();
                  return;
                else
                  COMMAREA.CATOAP = " ";
                  converseLib.validationFailed(2); /* INVALID FUNCTION KEY*/
                  NLXREC.NLXERRF = "Y";
                end
              end
            end
          end
        end
      end
    end
  end
end // end NI0L110

// perform pf7/pf8 scrolling
Function NI0L115()
  ;
   /* **************************************/
   /* scrolling for PF7 and PF8*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NI0L115";
  ;
  if (converseVar.eventKey is pf7) /* scroll up*/
    NI0LW01.NI0LWDX2 = NI0LW01.NI0LWDX2 - 1;
    if (NI0LW01.NI0LWDX2 < 1)
      NI0LW01.NI0LWDX2 = 1;
      converseLib.validationFailed(29);
    else
      NI0LM100.NCALCRID = NI0LW01.NI0LWLCR[NI0LWDX2];
      NI0LW01.NCALCRID = NI0LW01.NI0LWLCR[NI0LWDX2];
      NI0LW01.NCALCIID = NI0LW01.NI0LWLCI[NI0LWDX2];
      NI0LM100.NI0LMDX2 = NI0LW01.NI0LWDX2;
    end
  end
  ;
  if (converseVar.eventKey is pf8) /* scroll down*/
    NI0LW01.NI0LWDX2 = NI0LW01.NI0LWDX2 + 1;
    if (NI0LW01.NI0LWDX2 > NI0LW01.NI0LWMAX)
      NI0LW01.NI0LWDX2 = NI0LW01.NI0LWMAX;
      converseLib.validationFailed(30);
    else
      NI0LM100.NCALCRID = NI0LW01.NI0LWLCR[NI0LWDX2];
      NI0LW01.NCALCRID = NI0LW01.NI0LWLCR[NI0LWDX2];
      NI0LW01.NCALCIID = NI0LW01.NI0LWLCI[NI0LWDX2];
      NI0LM100.NI0LMDX2 = NI0LW01.NI0LWDX2;
    end
  end
  ;
  ;
  ;
end // end NI0L115

// edit entries and update niorec
Function NI0L120()
  ;
  NLXREC.NLXCPROC = "NI0L120";
  ;
   /* **************************************/
   /* edit entries and update*/
   /* **************************************/
  ;
  if (NI0LW01.NI0LWUFK == "N") /* customer  unprotect flag*/
    set NI0LM100.KUCCOID initialAttributes;
   /* TCS CHANGE BEGINS 01/18/00*/
   /* ELSE;*/
   /* SET NI0LM100.KUCCOID NORMAL;*/
   /* TCS CHANGE ENDS   01/18/00*/
  end
  ;
  set NI0LM100.XXXUSRID cursor, initialAttributes;
  ;
  set NI0LM100.XCTCD initialAttributes;
  ;
  if (NI0LW01.NI0LWUFB == "Y") /* xlbcd unprotect flag*/
    set NI0LM100.XLBCD normal;
  else
    set NI0LM100.XLBCD initialAttributes;
  end
  ;
  if (NI0LW01.NI0LWPFX == "N") /* xptcd protected flag*/
    set NI0LM100.XPTCD initialAttributes;
  end
  ;
  set NI0LM100.OP1CMPNB initialAttributes; /* comp nbr*/
  set NI0LM100.NIAPTDDT initialAttributes; /* payment due date*/
  set NI0LM100.NCALCRID initialAttributes; /* letter of credit*/
  ;
  if (NI0LM100.XLBCD == "GM" /* If GMBH hide address field*/
   || NI0LM100.XLBCD == "BV" /**/
   || NI0LM100.XLBCD == "NO" /**/
   || NI0LW01.XPTLCFL == "N") /* or not a lc payment term*/
    set NI0LM100.NI0LMADR skip, invisible;
    set NI0LM100.NI0LMAFL skip, invisible;
    NI0LM100.NI0LMAFL = "Y"; /* set to default address*/
  else
    set NI0LM100.NI0LMADR initialAttributes;
    set NI0LM100.NI0LMAFL initialAttributes;
  end
  ;
  NI0LW01.NI0LWDX1 = 1;
  while (NI0LW01.NI0LWDX1 < 4)
    set NI0LM100.ZCHCD[NI0LWDX1] initialAttributes;
    set NI0LM100.NIGUSAMT[NI0LWDX1] initialAttributes;
    NI0LW01.NI0LWDX1 = NI0LW01.NI0LWDX1 + 1;
  end
  ;
  NI0LS20(); /* set modified flags prior to windows*/
  ;
  NI0LS21(); /* perform window functions*/
  ;
   /* edit selections - perform edits FOR XCT COUNTRY CODE*/
   /* edit selections - perform edits in reverse sequence*/
  ;
   /* Note:  Customer is validated first because kucrec.zfccd*/
          /* is needed for the charge amounts at the bottom*/
          /* of the screen.*/
  ;
  if (NI0LW01.NI0LWMFK == "Y") /* customer modified because of comp nbr*/
    NI0LW01.NI0LWKUC = NI0LM100.KUCCOID;
    NI0LS03(); /* select unique on kucrec*/
    NI0LS52(); /* select unique on vdstrb01*/
    NIWREC.NIWKUID = NI0LM100.KUCCOID;
    NI0LW01.NI0LWKUC = NI0LW01.OP1CMPNB;
    if (SQLCA.VAGen_SQLCODE == 0)
      NI0LM100.KUCCONM = KUCREC.KUCCONM;
      if (KUCREC.XCTCD in XCTTBL.XCTCD)
        NI0LM100.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
      end
         /* MOVE NI0LM100.KUCCOID TO NIWREC.NIWKUID;*/
      NIWREC.NIWKUNM = NI0LM100.KUCCONM;
      NIWREC.NIWDESC = NI0LM100.XCTDESC;
      NI0LM100.XCTCD = KUCREC.XCTCD;
      NI0LW01.XAUCD = KUCREC.XAUCD;
      NI0LW01.ZARCD = VDSTRB01.ZARCD;
      NI0LW01.ZFCCD = VDSTRB01.ZFCCD;
         /* IF NI0LW01.XAUCD = '31';*/
           /* SET NI0LM100.XLBCD NORMAL;*/
           /* MOVE 'Y' TO NI0LW01.NI0LWUFB   ;remit to unprotect flag*/
         /* ELSE ;*/
           /* SET NI0LM100.XLBCD DEFINED;*/
           /* MOVE 'N' TO NI0LW01.NI0LWUFB   ;remit to unprotect flag*/
         /* END ;*/
      NI0LS15(); /* get zfcabrv*/
         /* NI0LS34                     ;get cust default xlbcd*/
      NI0LW01.XLBCD = KUCREC.XLBCD; /* LOCK BOX CODE IS ON CMPNY01*/
         /* MOVE NI0LW01.OP1CMPNB TO NI0LW01.NI0LWKUC;*/
      /* select unique on kucrec for comp nbr xaucd*/
      NI0LS03();
      /* select unique on vintgl02 to check for comp nbr*/
      NI0LS31();
    else
      set NI0LM100.KUCCOID cursor, modified, bold;
      converseLib.validationFailed(13); /* invalid cust nbr.*/
      NLXREC.NLXERRF = "Y";
    end
  else
    if (NI0LM100.KUCCOID == NIWREC.KUCCOID) /* not equal when there is a comp*/
      NIWREC.NIWKUID = 0;
    end
  end
  set NI0LM100.XCTCD normal;
  ;
  if (NI0LM100.XCTCD == "0000")
    converseLib.validationFailed(195); /* COUNTRY CODE ID INVALID*/
    NLXREC.NLXERRF = "Y";
    set NI0LM100.XCTCD cursor, modified, bold;
  else
    NI0LS24(); /* THEN VALIDATE THE COUNTRY CODE*/
  end
  ;
  ;
  if (NI0LW01.NI0LWMFB == "N") /* xlbcd modified flag*/
    NI0LS05(); /* get xlbcd address*/
    NI0LM100.XLBCD = NI0LW01.XLBCD;
    NI0LM100.XXXADDR1 = NI0LW01.XXXADDR1;
  end
  ;
   /* edit charge types and amts*/
  ;
  NI0LW01.NI0LWDX1 = 3;
  while (NI0LW01.NI0LWDX1 > 0)
    NI0LS22();
  end
  ;
  ;
   /* edit payment due date*/
  ;
  if (NI0LM100.NIAPTDDT > 0) /* edit due date every time*/
    NLXREC.XXXED8C = NI0LM100.NIAPTDDT;
    NLXREC.NLXVALDT = "Y"; /* valid date flag*/
    XPNL001();
    if (NLXREC.NLXVALDT == "Y")
      NI0LW01.NIAPTDDT = NLXREC.XXXWCYMD;
    else
      set NI0LM100.NIAPTDDT cursor, modified, bold;
      converseLib.validationFailed(128); /* invalid due date*/
      NLXREC.NLXERRF = "Y";
    end
  else
    NI0LW01.NIAPTDDT = 0;
  end
  ;
   /* edit payment terms*/
  ;
  NI0LW01.XPTCD = NI0LM100.XPTCD;
  NI0LS43(); /* check xptcd override flag*/
  NI0LS06(); /* edit payment terms*/
  NI0LM100.XPTDESC = NI0LW01.XPTDESC;
  ;
   /* IF NI0LW01.NI0LWMFX = 'Y'       ;xptcd modified flag*/
  if (NI0LW01.XPTLCFL == "N" /* from ni0ls06*/
   && NI0LM100.NCALCRID != " ") /* still attached to an LC*/
    NI0LW01.NCALCIID = 0; /* Do not carry on request if*/
    NI0LW01.NCALCRID = " "; /* changed to nonlc xptcd*/
  else
    if (NI0LW01.NI0LWMAX > 1) /* more than 1 LC for order*/
      NI0LS39(); /* set lc found/closed flag*/
    end
  end
   /* END ;*/
  ;
   /* Edit payment terms/due date even if xptcd not modified*/
   /* because there will be no due date the first time through*/
  ;
  if (NI0LW01.NI0LWPTF == "Y") /* xptcd valid flag*/
    if (NI0LW01.XPTCTRLI == "I") /* inc vs nil xpt indicator*/
      set NI0LM100.XPTCD cursor, modified, bold;
       /* payment terms not valid for NIL*/
      converseLib.validationFailed(134);
      NLXREC.NLXERRF = "Y";
      /* allen added 08/11/95 begin*/
      if (COMMAREA.CACLVL[1] == "N")
        set NI0LM100.XPTCD skip;
      end
      /* allen added 08/11/95 end*/
    else
      if (NI0LW01.XPTDAYS == 999) /* xpt days discount*/
        set NI0LM100.NIAPTDDT normal;
        if (NI0LM100.NIAPTDDT == 0) /* payment due date*/
          set NI0LM100.NIAPTDDT cursor, modified, bold;
           /* payment due date required*/
          converseLib.validationFailed(135);
          NLXREC.NLXERRF = "Y";
        end
      else
        if (NI0LM100.NIAPTDDT > 0) /* payment due date*/
          set NI0LM100.NIAPTDDT cursor, modified, bold;
           /* payment terms do not allow a due date*/
          converseLib.validationFailed(136);
          NLXREC.NLXERRF = "Y";
        end
      end
    end
    NI0LS08(); /* xpt/lc edit*/
  end
  ;
  NI0LS45(); /* edit payment terms shipdate*/
  ;
   /* edit remit-to address flag*/
  ;
  if (NI0LM100.XLBCD == "GM"
   || NI0LM100.XLBCD == "BV"
   || NI0LM100.XLBCD == "NO"
   || NI0LW01.XPTLCFL == "N")
    /* next sentence*/
  else
    if (NI0LM100.NI0LMAFL == "Y"
     || NI0LM100.NI0LMAFL == "N")
       /* next sentence*/
    else
      set NI0LM100.NI0LMAFL cursor, modified, bold;
      converseLib.validationFailed(167); /* invalid address indicator*/
      NLXREC.NLXERRF = "Y";
    end
  end
  ;
  ;
   /* edit remit-to*/
  ;
  if (NI0LM100.XLBCD == "GM"
   || NI0LM100.XLBCD == "BV"
   || NI0LM100.XLBCD == "NO")
    NI0LS40(); /* edit European Apparel criteria*/
  end
  ;
  if (NI0LW01.NI0LWMFB == "Y") /* xlbcd modified flag*/
    NI0LW01.XLBCD = NI0LM100.XLBCD;
    NI0LS05(); /* validate xlbcd*/
    NI0LM100.XLBCD = NI0LW01.XLBCD;
    NI0LM100.XXXADDR1 = NI0LW01.XXXADDR1;
    if (NI0LW01.XLBCD in NI0LWXLB) /* check ws array initialized in 001*/
      NI0LM100.NIOLBOVR = "Y"; /* lock box override flag*/
      NI0LM100.XXXADDR1 = NI0LW01.XXXADDR1; /* lock box desc*/
    else
      set NI0LM100.XLBCD cursor, modified, bold;
      NI0LM100.XXXADDR1 = " "; /* lock box desc*/
      converseLib.validationFailed(40); /* invalid remit-to cd*/
      NLXREC.NLXERRF = "Y";
    end
  end
  ;
   /* edit user id*/
  ;
  NI0LW01.XXXUSRID = NI0LM100.XXXUSRID;
  NI0LS04(); /* validate user id*/
  NI0LM100.XXXUNTXT = NI0LW01.XXXUNTXT;
  ;
   /* clear niorec packing list fields*/
  NI0LS32();
  ;
   /* declare cursor for tsvrec to get packing list numbers*/
  NI0LS25();
  ;
   /* fetch tsvrec rows*/
  ;
  NI0LW01.NI0LWEND = "N";
  NI0LW01.NI0LWONE = "Y";
  NI0LW01.NI0LWPLF = "N";
  ;
  while (NI0LW01.NI0LWEND == "N")
    NI0LS26(); /* fetch row from tsvrec*/
  end
  ;
  if (NI0LW01.NI0LWONE == "Y")
    set NI0LM100.NLXOID cursor;
    converseLib.validationFailed(138); /* no packing list found for order*/
    NLXREC.NLXERRF = "Y";
  else
    if (NI0LW01.NI0LWPLF == "Y")
      set NI0LM100.NLXOID cursor;
      converseLib.validationFailed(430); /* max of 5 pack lists exceeded*/
      NLXREC.NLXERRF = "Y";
    end
  end
  ;
  set NI0LM100.OP1CMPNB normal;
  ;
  if (NI0LWCMP == "Y") /* if cmp nbr is required*/
    if (NI0LM100.OP1CMPNB != 0) /* must be gt 0*/
      if (NI0LWCNB == "Y") /* must have changed to go thru edit*/
        KUCREC.KUCCOID = NI0LM100.OP1CMPNB;
        NI0LW01.XAUCD = KUCREC.XAUCD; /* save cust xaucd*/
        call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* check comp nbr*/
        if (SQLCA.VAGen_SQLCODE == 0
         && KUCREC.XXXSTAT == "A")
          if (KUCREC.XAUCD in XAUTBL.XAUCD)
            if (XAUTBL.XATCD[sysVar.arrayIndex] == "06") /* valid comp*/
              if (KUCREC.XAUCD == "60" || 
              KUCREC.XAUCD == "64" || 
              KUCREC.XAUCD == "65" || 
              KUCREC.XAUCD == "82" || 
              KUCREC.XAUCD == "89" || 
              KUCREC.XAUCD == "92")
                NI0LS31(); /* read profitability table*/
                NI0LS03(); /* read kucrec to refresh cust fields*/
                NI0LS52(); /* read distributor table to refresh*/
              else
                VCPATH01.XXXUSRID = COMMAREA.CAUSERID;
                VCPATH01.XAUCD = KUCREC.XAUCD;
                VCPATH01.KUCCOID = NI0LM100.OP1CMPNB;
                call "IO3420" ("SE", SQLCA, VCPATH01) {isNoRefresh = yes, isExternal = yes}; /**/
                if (SQLCA.VAGen_SQLCODE == 0 || 
                SQLCA.VAGen_SQLCODE == -811)
                  NI0LS31(); /* read profitability table*/
                  NI0LS03(); /* read kucrec to refresh cust fields*/
                  NI0LS52(); /* read distributor table to refresh*/
                else
                  set NI0LM100.OP1CMPNB cursor, modified, bold;
                  converseLib.validationFailed(427);
                  NLXREC.NLXERRF = "Y";
                end
              end
            else
              set NI0LM100.OP1CMPNB cursor, modified, bold;
              converseLib.validationFailed(104);
              NLXREC.NLXERRF = "Y";
            end
          end
        else
          if (SQLCA.VAGen_SQLCODE != 100
           && SQLCA.VAGen_SQLCODE != 0)
            TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
            TA1REC.TA1LOCAT[3] = "IO0240 "; /* io module*/
            TA1REC.TA1DBASE = "DCUST";
            TA1REC.TA1TBLVU = "VMPMNY01";
            XPNL005(); /* abend routine*/
          else
            set NI0LM100.OP1CMPNB cursor, modified, bold;
            converseLib.validationFailed(104);
            NLXREC.NLXERRF = "Y";
          end
        end
      end
    else
      if (NI0LW-ENTER-CONFIRM == "N")
        set NI0LM100.OP1CMPNB cursor, modified, bold;
        converseLib.validationFailed(425);
        if (NLXREC.NLXERRF == "N") /* this insures the user*/
          NI0LW-ENTER-CONFIRM = "Y"; /* sees the message!*/
        end
        NLXREC.NLXERRF = "Y";
      end
    end
  end
  ;
  if (NLXREC.NLXERRF == "Y"        
   || converseVar.eventKey is pf13 /* edit option*/
   || converseVar.eventKey is pf7  /* scroll up*/
   || converseVar.eventKey is pf8  /* scroll down*/
   || NI0LW01.NI0LWPOP == "Y")     /* treat window like pf13*/
    return;
  end
  ;
  if (NI0LW01.XPTLCFL == "Y")
    if (NI0LW01.NI0LWMAX > 1) /* more than 1 letter of credit*/
      if (NI0LW01.NI0LWF15 == "N") /* PF15 not pressed yet*/
        set NI0LM100.NCALCRID cursor, skip, bold;
        converseLib.validationFailed(156); /* PF15 to confirm which LC*/
        NLXREC.NLXERRF = "Y";
        return;
      end
    end
  end
  ;
  XX0XS01(); /* system date and time*/
  ;
  if (NI0LW01.NI0LWOFL == "Y")
    NI0LS28(); /* update niorec*/
  else
    NI0LS27(); /* add new record to niorec*/
  end
  ;
  NI0LS49(); /* add/update nicrec*/
  ;
end // end NI0L120

// determine next action
Function NI0L130()
  ;
   /* **************************************/
   /* determine next action*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NI0L130";
  ;
  if (converseVar.eventKey is pf13
   || NI0LW01.NI0LWPOP == "Y") /* treat window like pf13*/
    return;
  end
  ;
  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf15)
    if (TSUREC.YPYCD == "NI" /* nissho payment type*/
     && KUCREC.XAUCD == "31" /* nike-owned*/
     && NI0LM100.XLBCD == "IN") /* nike inc.*/
      COMMAREA.CATOAP = "NI0N"; /* skip incoterms to addresses*/
      NIWREC.NIWFRMAP = "NI0L";
       /* ELSE ;*/
         /* IF NI0LM100.XPTCD = 'NC'    ;no charge payment term*/
           /* MOVE 'NI0N' TO COMMAREA.CATOAP   ; skip incoterms to ad*/
           /* MOVE 'NI0L' TO NIWREC.NIWFRMAP;*/
    else
      COMMAREA.CATOAP = "NI0M"; /* incoterms*/
         /* END ;*/
    end
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002();
    return;
  end
  ;
  ;
  ;
end // end NI0L130

// validate whse/comp nbr
Function NI0LS-OP1CMPNB-EDT()
  ;
  NLXREC.NLXCPROC = "NI0LS-OP1CMPNB-EDT";
  ;
   /* validate the whse/comp nbr*/
  ;
  set NI0LM100.OP1CMPNB protect;
  ;
  if (NIWREC.NIW-XWH-WHSE-CD[NIWKQIDX] == "03" /* pro-tec*/
   || NIWREC.NIW-XWH-WHSE-CD[NIWKQIDX] == "09" /* promo*/
   || NIWREC.NIW-XWH-WHSE-CD[NIWKQIDX] == "12") /* intl*/
    if (OP1REC.OP1CMPNB == 0)
  /* TCS CHANGE BEGIN - 07/03/01 COMP NBR NOT REQ FOR WHSE 9*/
  /* MOVE 'Y' TO NI0LW01.NI0LWCMP;*/
  /* SET NI0LM100.OP1CMPNB DEFINED;*/
  /* TCS CHANGE END   - 07/03/01 COMP NBR NOT REQ FOR WHSE 9*/
    end
  end
  ;
end // end NI0LS-OP1CMPNB-EDT

// fetch row from vgcoa001
Function NI0LS-VGCOA001-F()
  ;
  NLXREC.NLXCPROC = "NI0LS-VGCOA001-F"; /* set current proc name*/
  ;
  VGCOA001.GA-GLBL-ACCT-ID = VINTGL02.GA-GLBL-ACCT-ID[1];
  ;
  if (VGCOA001.GA-FIN-PRD-CLS-CD == "XX")
    if (VINTGL02.XGPCD == "02")
      VGCOA001.GA-FIN-PRD-CLS-CD = "FW";
    else
      if (VINTGL02.XGPCD == "03")
        VGCOA001.GA-FIN-PRD-CLS-CD = "AP";
      else
        VGCOA001.GA-FIN-PRD-CLS-CD = "OT";
      end
    end
  else
      /* continue*/
  end
  ;
  if (VGCOA001.GA-BUS-UNT-CD == "XX")
    VGCOA001.GA-BUS-UNT-CD = OP1REC.XBCCD;
  end
  ;
   /* open a cursor on VGCOA001 using GA-GLBL-ACCT-ID*/
  ;
  call "VGCOA001" ("S3", SQLCA, VGCOA001) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* CONTINUE*/
  else
    TA1REC.TA1LOCAT[2] = "S3     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "VGCOA001 "; /* io module*/
    TA1REC.TA1DBASE = "DGENLD"; /* database*/
    TA1REC.TA1TBLVU = "VGCOA001"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
   /* FETCH THE FIRST ROW FROM VGCOA001*/
  ;
  call "VGCOA001" ("N3", SQLCA, VGCOA001) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* CONTINUE*/
  else
    TA1REC.TA1LOCAT[2] = "N3     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "VGCOA001 "; /* io module*/
    TA1REC.TA1DBASE = "DGENLD"; /* database*/
    TA1REC.TA1TBLVU = "VGCOA001"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
   /* *//* move the old style gl-gen-led-acct to glarec*/
  ;
  GLAREC.GLAENT = VGCOA001.GL-ENTITY-ID;
  GLAREC.GLARCID = VGCOA001.GL-RSP-CTR-ID;
  GLAREC.GLANTAC = VGCOA001.GL-NATRL-ACCT-ID;
  GLAREC.GLASUB = VGCOA001.GL-SUB-ACCT-ID;
  GLAREC.GLAPRJ = VGCOA001.GL-PROJ-ID;
  ;
   /* close the vgcoa001 cursor*/
  ;
  call "VGCOA001" ("C3", SQLCA, VGCOA001) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* CONTINUE*/
  else
    TA1REC.TA1LOCAT[2] = "C3     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "VGCOA001 "; /* io module*/
    TA1REC.TA1DBASE = "DGENLD"; /* database*/
    TA1REC.TA1TBLVU = "VGCOA001"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
end // end NI0LS-VGCOA001-F

// select unique from vgcoa001
Function NI0LS-VGCOA001-S()
  ;
  NLXREC.NLXCPROC = "NI0LS-VGCOA001-S"; /* set current proc name*/
  ;
  VGCOA001.GA-GLBL-ACCT-ID = VINTGL02.GA-GLBL-ACCT-ID[1];
  ;
  if (VGCOA001.GA-FIN-PRD-CLS-CD == "XX")
    if (VINTGL02.XGPCD == "02")
      VGCOA001.GA-FIN-PRD-CLS-CD = "FW";
    else
      if (VINTGL02.XGPCD == "03")
        VGCOA001.GA-FIN-PRD-CLS-CD = "AP";
      else
        VGCOA001.GA-FIN-PRD-CLS-CD = "OT";
      end
    end
  else
      /* continue*/
  end
  ;
  if (VGCOA001.GA-BUS-UNT-CD == "XX")
    VGCOA001.GA-BUS-UNT-CD = OP1REC.XBCCD;
  end
  ;
  call "VGCOA001" ("S1", SQLCA, VGCOA001) {isNoRefresh = yes, isExternal = yes};
  ;
  XXXMSG = " ";
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    GLAREC.GLAENT = VGCOA001.GL-ENTITY-ID;
    GLAREC.GLARCID = VGCOA001.GL-RSP-CTR-ID;
    GLAREC.GLANTAC = VGCOA001.GL-NATRL-ACCT-ID;
    GLAREC.GLASUB = VGCOA001.GL-SUB-ACCT-ID;
    GLAREC.GLAPRJ = VGCOA001.GL-PROJ-ID;
  else
    if (SQLCA.VAGen_SQLCODE == -811)
      NI0LW-GCOA-TEXT = "DGENLD.VGCOA001 - ";
      NI0LW-GCOA-KEY = VINTGL02.GA-GLBL-ACCT-ID[1];
      move NI0LW-GCOA-MESSAGE to XXXMSG withV60Compat;
      converseLib.validationFailed(434); /* send message non unique row found*/
      NI0LS-VGCOA001-F();
    else
      if (SQLCA.VAGen_SQLCODE == +100)
        NI0LW-GCOA-TEXT = "DGENLD.VGCOA001 - ";
        NI0LW-GCOA-KEY = VINTGL02.GA-GLBL-ACCT-ID[1];
        move NI0LW-GCOA-MESSAGE to XXXMSG withV60Compat;
        converseLib.validationFailed(433); /* send message row not found*/
        NLXREC.NLXERRF = "Y"; /* set error flag*/
        NI0LW-GCOA-ERR-FLG = "Y"; /* set gcoa error flag for ni0l100*/
      else
        TA1REC.TA1LOCAT[2] = "S1     "; /* database action*/
        TA1REC.TA1LOCAT[3] = "VGCOA001 "; /* io module*/
        TA1REC.TA1DBASE = "DGENLD"; /* database*/
        TA1REC.TA1TBLVU = "VGCOA001"; /* table view*/
        XPNL005(); /* abend routine*/
      end
    end
  end
  ;
end // end NI0LS-VGCOA001-S

// select unique from niorec
Function NI0LS01()
  ;
  NLXREC.NLXCPROC = "NI0LS01";
  ;
   /* format key for invoice request header table*/
  VRQTHD01.TSFSHPID = NIWREC.TSFSHPID;
  VRQTHD01.OP1CUOID = NIWREC.NIWOP1CU[NIWKQIDX];
  VRQTHD01.OP1NORID = NIWREC.NIWOP1NO[NIWKQIDX];
  ;
   /* select unique*/
  call "IO0600" ("S ", SQLCA, VRQTHD01) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    NI0LW01.NI0LWOFL = "Y"; /* niorec found*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      NI0LW01.NI0LWOFL = "N"; /* niorec not found*/
    else
      TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO0600 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VRQTHD01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end
  ;
  ;
  ;
end // end NI0LS01

// get niorec fields for m100
Function NI0LS02()
  ;
  NLXREC.NLXCPROC = "NI0LS02";
  ;
  NI0LS13(); /* select unique on op1rec*/
  ;
  NI0LW01.NI0LWKUC = VRQTHD01.KUCCOID; /* ws company id*/
  NI0LS03(); /* select unique on kucrec*/
  NI0LW01.NI0LWKNM = KUCREC.KUCCONM; /* ws company name*/
  if (KUCREC.XCTCD in XCTTBL.XCTCD)
    NI0LW01.NI0LWXCT = XCTTBL.XCTDESC[sysVar.arrayIndex];
  end
  NI0LW01.XCTCD = KUCREC.XCTCD;
  NI0LW01.ZFCCD = VDSTRB01.ZFCCD;
  NI0LW01.XAUCD = KUCREC.XAUCD;
  NI0LW01.ZARCD = VDSTRB01.ZARCD;
  if (VRQTHD01.XCTCD > " ") /* Ultimate country on request*/
    NI0LM100.XCTCD = VRQTHD01.XCTCD;
  else
    NI0LM100.XCTCD = KUCREC.XCTCD;
  end
  ;
  if (NI0LW01.XAUCD == "31") /* NIKE-OWNED*/
    set NI0LM100.XLBCD normal;
    NI0LWUFB = "Y"; /* xlbcd unprotected flag*/
  end
  ;
  NI0LS41(); /* check for EU apparel criteria*/
  ;
  if (VRQTHD01.OP1CMPNB > 0) /* comp cust nbr on inv req hdr*/
    NI0LW01.NI0LWKUC = VRQTHD01.OP1CMPNB; /* comp nbr from order*/
    NI0LS03(); /* select unique on cust co*/
    ;
    /* Get G/L entity from vintgl02 to see if xlbcd or xptcd on*/
    /* the screen need to be protected.*/
    NI0LS31();
    ;
    NI0LW01.OP1CMPNB = VRQTHD01.OP1CMPNB; /* save nbr as comp nbr*/
    NI0LW01.NI0LWCNM = KUCREC.KUCCONM; /* save name as comp name*/
   /* TCS CHANGE BEGINS 01/18/00*/
   /* SET NI0LM100.KUCCOID NORMAL;*/
   /* SET NI0LM100.KUCCOID MODIFIED;*/
   /* TCS CHANGE ENDS   01/18/00*/
    NI0LW01.NI0LWUFK = "Y"; /* unprotect kuccoid flag*/
    ;
    NI0LW01.NI0LWKUC = VRQTHD01.KUCCOID; /* ws company id*/
    /* Load alternate customer nbr, name, and country*/
    /* used by downstream applications when there is a comp nbr*/
    NIWREC.NIWKUID = NI0LW01.NI0LWKUC;
    NIWREC.NIWKUNM = NI0LW01.NI0LWKNM;
    NIWREC.NIWDESC = NI0LW01.NI0LWXCT;
  else
    NIWREC.NIWKUID = 0;
  end
  ;
  ;
  ;
  NI0LW01.XXXUSRID = VRQTHD01.XXXUSRID;
  NI0LS04(); /* get userid desc*/
  ;
  ;
  NI0LW01.NIOLBOVR = VRQTHD01.NIOLBOVR;
  NI0LW01.XLBCD = VRQTHD01.XLBCD;
  NI0LS05();
  ;
  if (NI0LW01.XLBCD == "GM" /* if not a GMBH invoice*/
   || NI0LW01.XLBCD == "BV" 
   || NI0LW01.XLBCD == "NO")
    NI0LW01.NI0LWAFL = "Y"; /* set to have default address*/
    NI0LW01.NI0LWCFL = "N"; /* set to have default address*/
  else
    NI0LS48(); /* get remit to addr text flags*/
  end
  ;
  NI0LW01.OP1PTOF = VRQTHD01.OP1PTOF;
  NI0LW01.XPTCD = VRQTHD01.XPTCD;
  NI0LS06(); /* get payment terms desc/flags*/
  ;
  NI0LS42(); /* edit lcs on order*/
  ;
  NI0LS08(); /* xpt/lc edit*/
  ;
  if (VRQTHD01.NIAPTDDT > 0)
    NLXREC.XXXWCYMD = VRQTHD01.NIAPTDDT;
    XPNL003(); /* convert db2 date to display format*/
    NI0LW01.NI0LWMM = NLXREC.XXXFLMM;
    NI0LW01.NI0LWDD = NLXREC.XXXFLDD;
    NI0LW01.NI0LWYY = NLXREC.XXXFLYY;
    NI0LW01.NIAPTDDT = NI0LW01.NI0LWFDT; /* get payment due date*/
  end
  ;
   /* unprotect due date so that date can be entered before edits*/
  set NI0LM100.NIAPTDDT normal;
  ;
   /* get foreign currency abrv*/
  NI0LS15();
  ;
   /* Get any miscellaneous charge, descriptions and amounts*/
  ;
  ;
  NI0LW01.NI0LWDX1 = 1;
  while (NI0LW01.NI0LWDX1 < 4)
    if (VRQTHD01.ZCHCD[NI0LWDX1] > " ")
      NI0LW01.ZCHCD[NI0LWDX1] = VRQTHD01.ZCHCD[NI0LWDX1];
      if (NI0LW01.ZCHCD[NI0LWDX1] in ZCHTBL.ZCHCD)
        NI0LW01.ZCHDESC[NI0LWDX1] = ZCHTBL.ZCHDESC[sysVar.arrayIndex];
      end
      NI0LW01.NIGUSAMT[NI0LWDX1] = VRQTHD01.NIGUSAMT[NI0LWDX1];
    end
    NI0LW01.NI0LWDX1 = NI0LW01.NI0LWDX1 + 1;
  end
  ;
  ;
  ;
end // end NI0LS02

// select unique from kucrec
Function NI0LS03()
  ;
  NLXREC.NLXCPROC = "NI0LS03"; /* set current proc name*/
  ;
  KUCREC.KUCCOID = NI0LW01.NI0LWKUC;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* nil customers only*/
    if (KUCREC.XAUCD == "31"
     || KUCREC.XAUCD == "32"
     || KUCREC.XAUCD == "33")
      if (KUCREC.XXXSTAT == "A") /* active nil customer*/
        NI0LS52(); /* get distributor row for nil customer*/
      else
        SQLCA.VAGen_SQLCODE = 100;
      end
    else
      SQLCA.VAGen_SQLCODE = 100;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      return;
    else
      TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO0240 "; /* io module*/
      TA1REC.TA1DBASE = "DCUST"; /* database*/
      TA1REC.TA1TBLVU = "VCMPNY01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end
  ;
end // end NI0LS03

// validate xxxusrid
Function NI0LS04()
  ;
  ;
  NLXREC.NLXCPROC = "NI0LS04";
  ;
  if (NI0LW01.XXXUSRID in ZPRTBL.XXXUSRID /* get user name*/
   && ZPRTBL.XXXUSRID[sysVar.arrayIndex] != "99999999") /* end of table*/
    NI0LW01.XXXUNTXT = ZPRTBL.XXXUNTXT[sysVar.arrayIndex];
  else
    set NI0LM100.XXXUSRID cursor, modified, bold;
    NI0LW01.XXXUNTXT = " ";
    converseLib.validationFailed(44); /* invalid id*/
    NLXREC.NLXERRF = "Y";
  end
  ;
  ;
  ;
end // end NI0LS04

// validate xlbcd
Function NI0LS05()
  ;
  ;
  NLXREC.NLXCPROC = "NI0LS05";
  ;
  if (NI0LW01.XLBCD in XLATBL.XLBCD /* get remit to*/
   && XLATBL.XLBCD[sysVar.arrayIndex] != "99") /* end of table*/
    NI0LW01.XXXADDR1 = XLATBL.XXX-ADDR1[sysVar.arrayIndex];
  else
    set NI0LM100.XLBCD cursor, modified, bold;
    NI0LW01.XXXADDR1 = " ";
    converseLib.validationFailed(40); /* invalid remit-to cd*/
    NLXREC.NLXERRF = "Y";
  end
  ;
  ;
  ;
end // end NI0LS05

// validate xptcd
Function NI0LS06()
  ;
  ;
  NLXREC.NLXCPROC = "NI0LS06";
  ;
  if (NI0LW01.XPTCD in XPTTBL.XPTCD /* get payment terms desc*/
   && XPTTBL.XPTCD[sysVar.arrayIndex] != "99") /* end of table*/
    NI0LW01.XPTDESC = XPTTBL.XPTDESC[sysVar.arrayIndex];
    NI0LW01.XPTLCFL = XPTTBL.XPTLCFL[sysVar.arrayIndex];
                                   /* payment term locr flag*/
    NI0LW01.XPTDAYS = XPTTBL.XPTDAYS[sysVar.arrayIndex]; /* days discount*/
    NI0LW01.XPTCTRLI = XPTTBL.XPTCTRLI[sysVar.arrayIndex]; /* Inc vs NIL ind*/
    NI0LW01.NI0LWPTF = "Y"; /* payment term valid flag*/
    ;
    if (NI0LW01.XPTCD == "NV") /* A valid code but is treated as an*/
                                   /* error*/
      set NI0LM100.XPTCD cursor, modified, bold;
      if (COMMAREA.CACLVL[1] == "N") /* xptcd change flag*/
        set NI0LM100.XPTCD skip; /* defined as unprotect*/
      end
      converseLib.validationFailed(144); /* see credit manager*/
      NLXREC.NLXERRF = "Y";
    end
  else
    set NI0LM100.XPTCD cursor, modified, bold;
    /* 08/11/95 allen added begin*/
    if (COMMAREA.CACLVL[1] == "N") /* xptcd change flag*/
      set NI0LM100.XPTCD skip; /* defined as unprotect*/
    end
    /* 08/11/95 allen added end*/
    NI0LW01.XPTDESC = " ";
    NI0LW01.NI0LWPTF = "N"; /* xptcd valid flag*/
    converseLib.validationFailed(39); /* invalid payment terms cd*/
    NLXREC.NLXERRF = "Y";
  end
  ;
  ;
  ;
end // end NI0LS06

// Select Unique from NCAREC
Function NI0LS07()
  ;
  NLXREC.NLXCPROC = "NI0LS07";
  ;
   /* set key for lc header*/
  ;
  VLCHDR01.KUCCOID = NI0LW01.KUCCOID;
  VLCHDR01.NCALCRID = NI0LW01.NCALCRID;
  NI0LW01.NI0LWCUS = VLCHDR01.KUCCOID;
  NI0LW01.NI0LWLOC = VLCHDR01.NCALCRID;
  ;
  call "IO4260" ("S ", SQLCA, VLCHDR01) {isNoRefresh = yes, isExternal = yes}; /* Read L/C Hdr*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1TBLKE = NI0LW01.NI0LWAKE; /* database key*/
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4260 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VLCHDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NI0LS07

// payment term/LC edit
Function NI0LS08()
  ;
  ;
  NLXREC.NLXCPROC = "NI0LS08";
  ;
  if (NI0LW01.XPTLCFL == "N")
    if (NI0LW01.NI0LWLCF == "Y")
      set NI0LM100.XPTCD cursor, modified, bold;
      /* 08/11/95 allen added begin*/
      if (COMMAREA.CACLVL[1] == "N")
        set NI0LM100.XPTCD skip;
      end
      /* 08/11/95 allen added end*/
      converseLib.validationFailed(113); /* invalid xpt - needs lc terms*/
      if (NI0LW01.NI0LWERF == "N")
        NLXREC.NLXERRF = "Y";
        NI0LW01.NI0LWERF = "Y"; /* xpt/lc warning flag*/
      else
        NLXREC.NLXERRF = "N";
      end
    else
      NI0LW01.NI0LWERF = "N"; /* xpt/lc warning flag*/
    end
  else /* (NI0LW01.XPTLCFL = 'Y')*/
    if (NI0LW01.NI0LWLCF == "N")
      set NI0LM100.XPTCD cursor, modified, bold;
      converseLib.validationFailed(114); /* xpt requires an lc*/
      NLXREC.NLXERRF = "Y";
      /* 08/11/95 allen added begin*/
      if (COMMAREA.CACLVL[1] == "N")
        set NI0LM100.XPTCD skip;
      end
      /* 08/11/95 allen added end*/
    else
      NI0LW01.NI0LWERF = "N"; /* xpt/lc warning flag*/
      if (VLCHDR01.NCALCCLF == "Y")
        set NI0LM100.NCALCRID cursor, skip, bold;
        converseLib.validationFailed(115); /* lc closed*/
        NLXREC.NLXERRF = "Y";
      end
    end
  end
  ;
  ;
  ;
end // end NI0LS08

// get default fields for m100
Function NI0LS10()
  ;
  NLXREC.NLXCPROC = "NI0LS10";
  ;
   /* set lock box override flag*/
  ;
  NI0LW01.NIOLBOVR = "N";
  ;
   /* get xptcd and op1ptof*/
  NI0LS13(); /* select unique on op1rec*/
  ;
   /* Get cust company record to check for comp nbr*/
   /* even when there is a comp nbr on the order.*/
  NI0LW01.NI0LWKUC = NIWREC.KUCCOID; /* ws company nbr*/
  NI0LW01.NI0LWKNM = NIWREC.KUCCONM;
  NI0LW01.NI0LWXCT = NIWREC.XCTDESC;
  NI0LS03(); /* select unique on kucrec*/
  ;
  NI0LW01.XAUCD = KUCREC.XAUCD; /* acct class*/
  ;
  if (KUCREC.XAUCD in XAUTBL.XAUCD)
    NI0LW01.XATCD = XAUTBL.XATCD[sysVar.arrayIndex];
  end
  ;
  NI0LS31(); /* select unique on vintgl02 to check*/
                                   /* for comp*/
  ;
  if (NI0LW01.XATCD == "06") /* 06 = comp nbr*/
    NI0LW01.NI0LWUFK = "Y"; /* customer unprotected flag*/
    NI0LW01.OP1CMPNB = NIWREC.KUCCOID;
    NI0LW01.NI0LWCNM = NIWREC.KUCCONM;
    NI0LW01.NI0LWKUC = 0; /* ws kuccoid; moved to map in s17*/
    NI0LW01.NI0LWKNM = " ";
    NI0LW01.NI0LWXCT = " ";
    set NI0LM100.KUCCOID cursor, normal;
    set NI0LM100.KUCCOID modified;
  else
    NI0LM100.XCTCD = KUCREC.XCTCD; /* Ultimate country*/
  end
  ;
   /* get userid and name*/
  NI0LW01.XXXUSRID = COMMAREA.CAUSERID;
  NI0LS04(); /* validate userid*/
  ;
   /* Cust nbr gt 0 only if nbr passed in niwrec is for the*/
   /* customer who will receive the order.*/
   /* Get xlbcd when kuccoid is not a comp nbr.*/
  if (NI0LW01.NI0LWKUC > 0)
    NI0LW01.ZFCCD = VDSTRB01.ZFCCD; /* foreign currency cd*/
    NI0LW01.ZARCD = VDSTRB01.ZARCD; /* acctg region*/
    ;
    NI0LW01.XLBCD = KUCREC.XLBCD;
     /* NI0LS34                       ;get cust default xlbcd*/
               /* Check for European Apparel default xlbcd*/
     /* IF NI0LW01.ZARCD = 'EU'       ; European Independent*/
       /* OR NI0LW01.ZARCD = 'ME'     ; Middle East Independent*/
       /* IF OP1REC.XGPCD = '03'      ; Apparel*/
         /* AND OP1REC.OP1CMPNB = 0   ;not a comp*/
         /* MOVE 'GM' TO NI0LW01.XLBCD       ; remit-to for GMBH*/
         /* MOVE 'Y' TO NI0LW01.NI0LWMFB     ; xlbcd modify allow*/
       /* END ;*/
     /* END ;*/
    NI0LS41(); /* check EU apparel criteria*/
    if (NI0LW01.NI0LWUFB == "Y" /* xlbcd unprotect from s41*/
     && OP1REC.OP1CMPNB == 0)   /* not a comp*/
      NI0LW01.XLBCD = "NO"; /* remit-to*/
    end
    ;
    if (KUCREC.XAUCD == "31") /* nike-owned*/
      set NI0LM100.XLBCD normal;
      NI0LW01.NI0LWUFB = "Y"; /* xlbcd unprotect flag*/
    end
  end
  ;
  if (OP1REC.OP1CMPNB > 0) /* comp nbr present on order*/
    NI0LW01.OP1CMPNB = OP1REC.OP1CMPNB;
    NI0LW01.NI0LWKUC = OP1REC.OP1CMPNB;
    /* select unique on kucrec for cust name and xaucd*/
    NI0LS03();
    NI0LW01.NI0LWCNM = KUCREC.KUCCONM;
    NI0LS31(); /* select unique on vintgl02 to check*/
                                   /* for comp*/
    NI0LW01.NI0LWKUC = NIWREC.KUCCOID; /* ws company nbr*/
   /* TCS CHANGE BEGINS 01/18/00*/
   /* SET NI0LM100.KUCCOID NORMAL;*/
   /* TCS CHANGE ENDS   01/18/00*/
  end
  ;
  if (NI0LW01.XATCD == "06") /* 06 = comp nbr*/
    /* next sentence*/
  else
    NI0LS05(); /* get xlbcd address*/
  end
  ;
  if (NI0LW01.XPTCD == "NC") /* no charge set in s31*/
     /* next sentence*/
  else
    if (OP1REC.OP1PTOF == "Y")
      NI0LW01.OP1PTOF = OP1REC.OP1PTOF;
    else
      NI0LW01.OP1PTOF = "N";
    end
  end
  ;
  if (NI0LW01.XPTCD == "NC") /* no charge set in s31*/
    /* next sentence*/
  else
    NI0LW01.XPTCD = OP1REC.XPTCD;
  end
  NI0LS06(); /* validate xptcd*/
  ;
  NI0LS42(); /* edit lcs on order*/
  ;
   /* check for lc on order*/
   /* NI0LS35                         ;*/
   /* IF NI0LW01.NI0LWONE = 'N';*/
    /* MOVE 1 TO NI0LW01.NI0LWDX2;*/
    /* NI0LS39                       ;set lc found/closed flags*/
   /* ELSE ;*/
    /* MOVE 'N' TO NI0LW01.NI0LWLCF  ;lc found flag*/
   /* END ;*/
  ;
   /* xpt/lc edit*/
  NI0LS08();
  ;
  if (NI0LW01.XLBCD == "GM" /* GMBH customer*/
   || NI0LW01.XLBCD == "BV" 
   || NI0LW01.XLBCD == "NO") /**/
    NI0LW01.NI0LWAFL = "N"; /* Default address flag*/
    NI0LW01.NI0LWCFL = "N"; /* Set addr text row flag*/
  else /* Not a GMBH customer*/
    NI0LW01.NI0LWAFL = "Y"; /* Default address flag*/
    NI0LW01.NI0LWCFL = "N"; /* Set addr text row flag*/
     /* 2 lines below are not needed*/
     /* Campus address default for remit-to*/
     /* MOVE 170 TO EZEMNO*/
  end
  ;
   /* check xpt days discount*/
  if (NI0LW01.NI0LWPTF == "Y") /* xpt cd valid flag*/
    if (NI0LW01.XPTDAYS == 999)
      set NI0LM100.NIAPTDDT modified, bold;
      converseLib.validationFailed(117); /* due date required*/
    else
      set NI0LM100.NIAPTDDT normal;
    end
  end
  ;
   /* get foreign currency abrv for amt column header*/
  NI0LS15();
  ;
  ;
  ;
end // end NI0LS10

// select unique from vintgl02
Function NI0LS11()
  NLXREC.NLXCPROC = "NI0LS11"; /* set current proc name*/
  ;
   /* format display key for error trap*/
  ;
  NI0LW01.NI0LWXAU = VINTGL02.XAUCD;
  NI0LW01.NI0LWKID = VINTGL02.KUCCOID;
  NI0LW01.NI0LWSID = VINTGL02.KUMSTRID;
  NI0LW01.NI0LWDID = VINTGL02.XNXCD;
  NI0LW01.XGPCD = VINTGL02.XGPCD;
  ;
   /* select unique vintgl02*/
  ;
  call "VINTGL02" ("SF", SQLCA, VINTGL02) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(154); /* contact acctg...comp nbr needs a gl*/
      NLXREC.NLXERRF = "Y";
      NI0LW01.NI0LWGNF = "Y"; /* internal gl not found*/
    else
      TA1REC.TA1TBLKE = NI0LW01.NI0LWPKE; /* database key*/
      TA1REC.TA1LOCAT[2] = "SF     "; /* database action*/
      TA1REC.TA1LOCAT[3] = "VINTGL02 "; /* io module*/
      TA1REC.TA1DBASE = "DPROFT"; /* database*/
      TA1REC.TA1TBLVU = "VINTGL02"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end
  ;
end // end NI0LS11

// Select Unique from OP1REC
Function NI0LS13()
  NLXREC.NLXCPROC = "NI0LS13";
  ;
   /* OP1REC - Select Unique*/
  ;
  OP1REC.OP1CUOID = NIWREC.NIWOP1CU[NIWKQIDX];
  OP1REC.OP1NORID = NIWREC.NIWOP1NO[NIWKQIDX];
  OP1REC.OP1PARTN = NIWREC.NIWOP1CH[NIWKQIDX];
  call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* Read Order record*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0430 "; /* io module*/
    TA1REC.TA1DBASE = "DORDER"; /* database*/
    TA1REC.TA1TBLVU = "VORHDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
  ;
end // end NI0LS13

// Select scan-1 on NCCREC
Function NI0LS14()
  ;
  NLXREC.NLXCPROC = "NI0LS14";
  ;
   /* NCCREC - Select Unique*/
  ;
      /* format nccrec key*/
  VLCORD01.OP1CUOID = NIWREC.NIWOP1CU[NIWKQIDX];
  VLCORD01.OP1NORID = NIWREC.NIWOP1NO[NIWKQIDX];
      /* format display key for error trap*/
  NI0LW01.NI0LWCUO = VLCORD01.OP1CUOID;
  NI0LW01.NI0LWNIO = VLCORD01.OP1NORID;
  call "IO4270" ("S1", SQLCA, VLCORD01) {isNoRefresh = yes, isExternal = yes}; /* Open xref cursor*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1TBLKE = NI0LW01.NI0LWCKE; /* database key*/
    TA1REC.TA1LOCAT[2] = "S1     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4270 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VLCORD01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
  ;
  ;
end // end NI0LS14

// get foreign currency abrv
Function NI0LS15()
  ;
  NLXREC.NLXCPROC = "NI0LS15";
  ;
   /* get foreign currency abrv for amt column hdr*/
  ;
  if (NI0LW01.ZFCCD == " ") /* zfccd is found on kucrec*/
    NI0LW01.ZFCABRV = "US$";
   /* ELSE;*/
     /* get foreign currency desc*/
     /* RETR NI0LW01.ZFCCD ZFCTBL NI0LW01.ZFCABRV ZFCABRV;*/
   /* commented out 10/14/92 because dcorp.vzfc0001 no longer used*/
   /* IF NI0LW01.ZFCCD IN ZFCTBL.ZFCCD;*/
     /* MOVE ZFCTBL.ZFCABRV(EZETST) TO NI0LW01.ZFCABRV;*/
     /* MOVE ZFCTBL.ZFCFMAT(EZETST) TO NI0LW01.ZFCFMAT;*/
   /* END;*/
  end
  ;
  ;
  ;
end // end NI0LS15

// format screen header fields
Function NI0LS17()
  ;
  ;
   /* **************************************/
   /* fill in all screen header fields*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NI0LS17";
  ;
   /* customer fields*/
  NI0LM100.KUCCOID = NI0LW01.NI0LWKUC;
  NI0LM100.KUCCONM = NI0LW01.NI0LWKNM;
  NI0LM100.XCTDESC = NI0LW01.NI0LWXCT;
  ;
   /* nike shipment id*/
  NI0LM100.TSFSHPID = NIWREC.TSFSHPID;
  ;
   /* format order number for screen display*/
  NLXREC.NLXOP1CU = NIWREC.NIWOP1CU[NIWKQIDX];
  NLXREC.NLXOP1NO = NIWREC.NIWOP1NO[NIWKQIDX];
  NI0LM100.NLXOID = NLXREC.NLXOID;
  ;
  ;
  ;
end // end NI0LS17

// format screen fields
Function NI0LS18()
  ;
  NLXREC.NLXCPROC = "NI0LS18";
  ;
   /* user id and name*/
  NI0LM100.XXXUSRID = NI0LW01.XXXUSRID;
  NI0LM100.XXXUNTXT = NI0LW01.XXXUNTXT;
  ;
   /* remit to code and remit to override*/
  NI0LM100.XLBCD = NI0LW01.XLBCD;
  NI0LM100.XXXADDR1 = NI0LW01.XXXADDR1;
  NI0LM100.NIOLBOVR = NI0LW01.NIOLBOVR;
  ;
   /* payment terms code and override*/
  NI0LM100.XPTCD = NI0LW01.XPTCD;
  NI0LM100.XPTDESC = NI0LW01.XPTDESC;
  NI0LM100.OP1PTOF = NI0LW01.OP1PTOF;
  ;
   /* payment terms due date*/
  NI0LM100.NIAPTDDT = NI0LW01.NIAPTDDT;
  ;
   /* comp co nbr and name*/
  NI0LM100.OP1CMPNB = NI0LW01.OP1CMPNB;
  NI0LM100.NI0LMCNM = NI0LW01.NI0LWCNM;
  ;
   /* letter of credit number*/
  NI0LM100.NCALCRID = NI0LW01.NCALCRID;
  NI0LM100.NI0LMDX2 = NI0LW01.NI0LWDX2;
  NI0LM100.NI0LMMAX = NI0LW01.NI0LWMAX;
  ;
   /* foreign currency abrv*/
   /* MOVE NI0LW01.ZFCABRV TO NI0LM100.ZFCABRV;*/
  NI0LM100.ZFCABRV = "US$";
  ;
   /* Set remit to address flag Y = campus, N = Allen*/
  ;
   /* If GMBH customer darken address select*/
  if (NI0LW01.XLBCD == "GM"
   || NI0LW01.XLBCD == "BV"
   || NI0LW01.XLBCD == "NO"
   || NI0LW01.XPTLCFL == "N")
    set NI0LM100.NI0LMADR skip, invisible; /* Darken address literal*/
    set NI0LM100.NI0LMAFL skip, invisible; /* Darken and askip input field*/
  else
    NI0LM100.NI0LMAFL = NI0LW01.NI0LWAFL; /* Move address flag*/
  end
  ;
   /* miscellaneous charges and amounts*/
  NI0LW01.NI0LWDX1 = 1;
  while (NI0LW01.NI0LWDX1 < 4)
    NI0LM100.ZCHCD[NI0LWDX1] = NI0LW01.ZCHCD[NI0LWDX1];
    NI0LM100.ZCHDESC[NI0LWDX1] = NI0LW01.ZCHDESC[NI0LWDX1];
    NI0LM100.NIGUSAMT[NI0LWDX1] = NI0LW01.NIGUSAMT[NI0LWDX1];
    NI0LW01.NI0LWDX1 = NI0LW01.NI0LWDX1 + 1;
  end
  ;
  ;
  ;
end // end NI0LS18

// set up modified flags
Function NI0LS20()
  ;
  NLXREC.NLXCPROC = "NI0LS20"; /* set current proc name*/
  ;
   /* set modified flags for editing after windowing*/
  ;
   /* cust co id*/
  if (NI0LM100.KUCCOID is modified
   && NI0LM100.KUCCOID != NIWREC.KUCCOID)
    NI0LW01.NI0LWMFK = "Y";
  else
    NI0LW01.NI0LWMFK = "N";
  end
  ;
   /* user id*/
  if (NI0LM100.XXXUSRID is modified)
    NI0LW01.NI0LWMFU = "Y";
  else
    NI0LW01.NI0LWMFU = "N";
  end
  ;
   /* comp nbr*/
  if (NI0LM100.OP1CMPNB is modified)
    NI0LW01.NI0LWCNB = "Y";
  else
    NI0LW01.NI0LWCNB = "N";
  end
  ;
   /* remit to*/
  if (NI0LM100.XLBCD is modified)
    NI0LW01.NI0LWMFB = "Y";
  else
    NI0LW01.NI0LWMFB = "N";
  end
  ;
   /* payment terms*/
  if (NI0LM100.XPTCD is modified)
    NI0LW01.NI0LWMFX = "Y";
  else
    NI0LW01.NI0LWMFX = "N";
  end
  ;
   /* Payment terms due date is edited whenever gt 0*/
   /* so no modified flag is needed*/
  ;
   /* charge types and amounts*/
  NI0LW01.NI0LWDX1 = 1;
  while (NI0LW01.NI0LWDX1 < 4)
    if (NI0LM100.ZCHCD[NI0LWDX1] is modified)
      NI0LW01.NI0LWMFC[NI0LWDX1] = "Y";
    else
      NI0LW01.NI0LWMFC[NI0LWDX1] = "N";
    end
    ;
    if (NI0LM100.NIGUSAMT[NI0LWDX1] is modified)
      NI0LW01.NI0LWMFA[NI0LWDX1] = "Y";
    else
      NI0LW01.NI0LWMFA[NI0LWDX1] = "N";
    end
    NI0LW01.NI0LWDX1 = NI0LW01.NI0LWDX1 + 1;
  end
  ;
  ;
  ;
  ;
end // end NI0LS20

// perform windowing
Function NI0LS21()
  ;
  NLXREC.NLXCPROC = "NI0LS10"; /* set current proc name*/
  ;
   /* perform windowing*/
  ;
   /* XCT country code*/
  if (NI0LM100.XCTCD == "?")
    NI0LW01.NI0LWPOP = "Y"; /* window flag*/
    XPXX001();
    while (XX0XW02.XX0XWEND == "N")
      XPXCT01();
    end
    set NI0LM100.XCTCD cursor;
    if (XX0XW02.XX0XWPIX > 0)
      NI0LM100.XCTCD = XCTTBL.XCTCD[XX0XWPIX];
      NI0LM100.XCTDESC1 = XCTTBL.XCTDESC[XX0XWPIX];
    else
      NI0LM100.XCTCD = " "; /* clear fields*/
      NI0LM100.XCTDESC1 = " ";
    end
  end
  ;
   /* payment terms*/
  if (NI0LM100.XPTCD == "?")
    NI0LW01.NI0LWPOP = "Y"; /* window flag*/
    XPXX001();
    while (XX0XW02.XX0XWEND == "N")
      XPXPT01();
    end
    set NI0LM100.XPTCD cursor;
    if (XX0XW02.XX0XWPIX > 0)
      NI0LM100.XPTCD = XPTTBL.XPTCD[XX0XWPIX];
      NI0LM100.XPTDESC = XPTTBL.XPTDESC[XX0XWPIX];
    else
      NI0LM100.XPTCD = " "; /* clear fields*/
      NI0LM100.XPTDESC = " ";
    end
  end
  ;
   /* remit-to cd*/
  if (NI0LM100.XLBCD == "?")
    NI0LW01.NI0LWPOP = "Y"; /* window flag*/
    XPXX001();
    while (XX0XW02.XX0XWEND == "N")
      XPXLA01();
    end
    set NI0LM100.XLBCD cursor;
    if (XX0XW02.XX0XWPIX > 0)
      NI0LM100.XLBCD = XLATBL.XLBCD[XX0XWPIX];
      NI0LM100.XXXADDR1 = XLATBL.XXX-ADDR1[XX0XWPIX];
    else
      NI0LM100.XLBCD = " "; /* clear fields*/
      NI0LM100.XXXADDR1 = " ";
    end
  end
  ;
   /* pers resp cd*/
  if (NI0LM100.XXXUSRID == "?")
    NI0LW01.NI0LWPOP = "Y"; /* window flag*/
    XPXX001();
    while (XX0XW02.XX0XWEND == "N")
      XPZPR01();
    end
    set NI0LM100.XXXUSRID cursor;
    if (XX0XW02.XX0XWPIX > 0)
      NI0LM100.XXXUSRID = ZPRTBL.XXXUSRID[XX0XWPIX];
      NI0LM100.XXXUNTXT = ZPRTBL.XXXUNTXT[XX0XWPIX];
    else
      NI0LM100.XXXUSRID = " "; /* clear fields*/
      NI0LM100.XXXUNTXT = " ";
    end
  end
  ;
   /* charge types*/
  ;
  NI0LW01.NI0LWDX1 = 1;
  while (NI0LW01.NI0LWDX1 < 4)
    if (NI0LM100.ZCHCD[NI0LWDX1] == "?")
      NI0LW01.NI0LWPOP = "Y"; /* window flag*/
      XPXX001();
      while (XX0XW02.XX0XWEND == "N")
        XPZCH01();
      end
      set NI0LM100.ZCHCD[NI0LWDX1] cursor;
      if (XX0XW02.XX0XWPIX > 0)
        NI0LM100.ZCHCD[NI0LWDX1] = ZCHTBL.ZCHCD[XX0XWPIX];
        NI0LM100.ZCHDESC[NI0LWDX1] = ZCHTBL.ZCHDESC[XX0XWPIX];
      end
    end
    NI0LW01.NI0LWDX1 = NI0LW01.NI0LWDX1 + 1;
  end
  ;
   /* restore original screen*/
  converseLib.clearScreen();
  
  ;
  ;
  ;
end // end NI0LS21

// validate charge type
Function NI0LS22()
  ;
  NLXREC.NLXCPROC = "NI0LS22";
  ;
   /* edit charge types and amts*/
  ;
  if (NI0LM100.ZCHCD[NI0LWDX1] > " ") /* charge type is optional*/
    if (NI0LW01.NI0LWMFC[NI0LWDX1] == "Y" /* zchcd modified flag*/
     || NI0LW01.NI0LWMFA[NI0LWDX1] == "Y") /* nigusamt modified flag*/
      NI0LS23(); /* validate nigusamt*/
      if (NI0LM100.ZCHCD[NI0LWDX1] in ZCHTBL.ZCHCD
       && ZCHTBL.ZCHCD[sysVar.arrayIndex] != "99") /* end of table*/
        NI0LM100.ZCHDESC[NI0LWDX1] = ZCHTBL.ZCHDESC[sysVar.arrayIndex];
        if (ZCHTBL.ZCHPIFL[sysVar.arrayIndex] == "Y")
          NI0LS33(); /* validate customer in charge type GL table*/
        else
          set NI0LM100.ZCHCD[NI0LWDX1] cursor, modified, bold;
          converseLib.validationFailed(118); /* charge type invalid for prod ivc*/
          NLXREC.NLXERRF = "Y";
        end
      else
        set NI0LM100.ZCHCD[NI0LWDX1] cursor, modified, bold;
        NI0LM100.ZCHDESC[NI0LWDX1] = " "; /* blank out desc*/
        NI0LM100.NIGUSAMT[NI0LWDX1] = 0; /* blank out amt*/
        converseLib.validationFailed(10); /* invalid charge type*/
        NLXREC.NLXERRF = "Y";
      end
    end
  else
    NI0LM100.ZCHDESC[NI0LWDX1] = " "; /* blank out desc*/
    NI0LM100.NIGUSAMT[NI0LWDX1] = 0; /* blank out amt*/
  end
  ;
  NI0LW01.NI0LWDX1 = NI0LW01.NI0LWDX1 - 1;
  ;
  ;
  ;
end // end NI0LS22

// validate charge amount
Function NI0LS23()
  ;
  NLXREC.NLXCPROC = "NI0LS23";
  ;
   /* validate charge type amt*/
  ;
  NI0LW01.NI0LWAMT = NI0LM100.NIGUSAMT[NI0LWDX1];
  if (NI0LW01.NI0LWAMT > 0) /* chg amt must be entered*/
    if (NI0LW01.ZFCCD > " ")
      if (NI0LW01.NI0LWCNT > 0
       && NI0LW01.ZFCFMAT == "I") /* integer format*/
        set NI0LM100.NIGUSAMT[NI0LWDX1] cursor, modified, bold;
        converseLib.validationFailed(119); /* decimal not allowed with foreign currency*/
        NLXREC.NLXERRF = "Y";
      end
    end
  else
    set NI0LM100.NIGUSAMT[NI0LWDX1] cursor, modified, bold;
    converseLib.validationFailed(127); /* please enter charge amount*/
    NLXREC.NLXERRF = "Y";
  end
  ;
  ;
  ;
end // end NI0LS23

// validate the country code
Function NI0LS24()
  ;
  NLXREC.NLXCPROC = "NI0LS24";
  ;
   /* MOVE 'N' TO NI0LW01.NI0LWCEX;      /* set xctcd code exist flag to no*/
   /* validate the country code*/
  ;
  if (NI0LM100.XCTCD in XCTTBL.XCTCD)
    NI0LM100.XCTDESC1 = XCTTBL.XCTDESC[sysVar.arrayIndex];
  end
  if (sysVar.arrayIndex > 0) /* that means this xctcd exists*/
    /* fill country description*/
    set NI0LM100.XCTCD normal;
    NI0LM100.XCTDESC1 = XCTTBL.XCTDESC[sysVar.arrayIndex];
   /* MOVE 'Y' TO NI0LW01.NI0LWCEX;     /* xctcd code exists in XCTTBL*/
  else
    set NI0LM100.XCTCD cursor, modified, bold; /* highlight xtry fld*/
    /* */
    NI0LM100.XCTDESC1 = " "; /* erase xct description.*/
    NLXREC.NLXERRF = "Y";
    converseLib.validationFailed(195); /* country code does not exist*/
    return;
  end
  ;
end // end NI0LS24

// declare cursor for TSVREC
Function NI0LS25()
  ;
  ;
  NLXREC.NLXCPROC = "NI0LS25";
  ;
   /* read packing list for specific order nbr*/
   /* build key here and cursor s2to select*/
   /* packing list header by order nbr*/
  TSVREC.OP1CUOID = NIWREC.NIWOP1CU[NIWKQIDX];
  TSVREC.OP1NORID = NIWREC.NIWOP1NO[NIWKQIDX];
  ;
   /* declare and read cursor*/
  call "IO4700" ("S2", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "S2     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4700 "; /* io module*/
    TA1REC.TA1DBASE = "DTRANS"; /* database*/
    TA1REC.TA1TBLVU = "VNLPLO01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
  ;
  ;
end // end NI0LS25

// fetch rows from tsvrec
Function NI0LS26()
  NLXREC.NLXCPROC = "NI0LS26"; /* set current proc name*/
  ;
   /* fetch from cursor*/
  call "IO4700" ("N2", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    if (NI0LW01.NI0LWONE == "Y")
      NI0LW01.NI0LWONE = "N";
      NI0LW01.TSFSHPID = NIWREC.TSFSHPID; /* init for break logic*/
      NI0LW01.TSVPLNBR = 0;
      NI0LW01.NI0LWDX1 = 1;
    end
     /* save pl nbr if new ship id*/
    if (TSVREC.TSFSHPID == NI0LW01.TSFSHPID) /* want same ship id*/
      if (TSVREC.TSVPLNBR != NI0LW01.TSVPLNBR) /* get all pl nbrs*/
        if (NI0LW01.NI0LWDX1 > 5)
          NI0LW01.NI0LWEND = "Y";
          NI0LW01.NI0LWPLF = "Y";
        else
          NI0LW01.TSVPLNBR = TSVREC.TSVPLNBR;
          NI0LW01.NI0LWPLN[NI0LWDX1] = TSVREC.TSVPLNBR;
          NI0LW01.NI0LWDX1 = NI0LW01.NI0LWDX1 + 1;
        end
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      call "IO4700" ("C2", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
      NI0LW01.NI0LWEND = "Y";
    else
      TA1REC.TA1LOCAT[2] = "N2     "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO4700 "; /* io module*/
      TA1REC.TA1DBASE = "DTRANS"; /* database*/
      TA1REC.TA1TBLVU = "VNLPLO01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end
  ;
end // end NI0LS26

// niorec add
Function NI0LS27()
  ;
  VRQTHD01.OP1PARTN = NIWREC.NIWOP1CH[NIWKQIDX];
  VRQTHD01.NIOIND = "D"; /* inv request type = draft*/
  VRQTHD01.NIOISTAT = "I"; /* inv request record status = inactive*/
  VRQTHD01.ZZZSDT = XX0XW01.XX0XWDAT; /* current date*/
  VRQTHD01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VRQTHD01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* current time*/
  ;
  NI0LS37(); /* load packing list numbers*/
  ;
  NI0LS29(); /* format remaining niorec fields*/
  ;
  NLXREC.NLXCPROC = "NI0LS27";
  ;
   /* add new invoice request header record*/
  call "IO0600" ("A ", SQLCA, VRQTHD01) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1TBLKE = NI0LW01.NI0LWOKE; /* table key*/
    TA1REC.TA1LOCAT[2] = "A      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0600 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VRQTHD01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
  ;
  ;
end // end NI0LS27

// update niorec
Function NI0LS28()
  ;
   /* select unique on niorec to verify change count*/
  NI0LS01();
  ;
  NI0LW01.NI0LWCT2 = VRQTHD01.ZZZCHGCT; /* save new change count*/
  ;
   /* compare new change count with old saved in process 001*/
  if (NI0LW01.NI0LWCT1 != NI0LW01.NI0LWCT2)
    converseLib.validationFailed(155); /* database change since last display*/
    NLXREC.NLXERRF = "Y";
    return;
  end
  ;
  NI0LS29(); /* format niorec common fields*/
  ;
  NLXREC.NLXCPROC = "NI0LS28";
  ;
  if (VRQTHD01.NIOIND == "D") /* reset draft invoices to incomplete*/
    VRQTHD01.NIOISTAT = "I"; /* set request to inactive*/
  end
  VRQTHD01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VRQTHD01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  NI0LS37(); /* format niorec packing list nbrs*/
  ;
   /* update request header*/
  call "IO0600" ("U ", SQLCA, VRQTHD01) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1TBLKE = NI0LW01.NI0LWOKE; /* table key*/
    TA1REC.TA1LOCAT[2] = "U      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0600 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VRQTHD01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
  ;
  ;
end // end NI0LS28

// format niorec fields
Function NI0LS29()
  ;
  NLXREC.NLXCPROC = "NI0LS29";
  ;
   /* format key for invoice request header table*/
  VRQTHD01.TSFSHPID = NIWREC.TSFSHPID;
  VRQTHD01.OP1CUOID = NIWREC.NIWOP1CU[NIWKQIDX];
  VRQTHD01.OP1NORID = NIWREC.NIWOP1NO[NIWKQIDX];
  ;
   /* format display key for error trap*/
  NI0LW01.NI0LWSHP = VRQTHD01.TSFSHPID;
  NI0LW01.NI0LWCID = VRQTHD01.OP1CUOID;
  NI0LW01.NI0LWNID = VRQTHD01.OP1NORID;
  ;
  if (NI0LW01.NI0LWCMP == "Y")
    VRQTHD01.OP1CMPNB = NI0LM100.OP1CMPNB;
  end
  ;
   /* format rest of record*/
  VRQTHD01.XCTCD = NI0LM100.XCTCD;
  VRQTHD01.KUCCOID = NI0LM100.KUCCOID;
  VRQTHD01.OP1CMPNB = NI0LM100.OP1CMPNB;
  VRQTHD01.XLBCD = NI0LM100.XLBCD;
  VRQTHD01.NIOLBOVR = NI0LM100.NIOLBOVR;
  VRQTHD01.XPTCD = NI0LM100.XPTCD;
  VRQTHD01.OP1PTOF = NI0LM100.OP1PTOF;
  VRQTHD01.NIAPTDDT = NI0LW01.NIAPTDDT;
  ;
  NI0LW01.NI0LWDX1 = 1;
  while (NI0LW01.NI0LWDX1 < 4)
    VRQTHD01.ZCHCD[NI0LWDX1] = NI0LM100.ZCHCD[NI0LWDX1];
    VRQTHD01.NIGUSAMT[NI0LWDX1] = NI0LM100.NIGUSAMT[NI0LWDX1];
    NI0LW01.NI0LWDX1 = NI0LW01.NI0LWDX1 + 1;
  end
  ;
  VRQTHD01.NCALCRID = NI0LW01.NCALCRID;
  VRQTHD01.NCALCIID = NI0LW01.NCALCIID;
  ;
  VRQTHD01.XXXUSRID = NI0LM100.XXXUSRID;
  ;
  ;
  ;
end // end NI0LS29

// select unique on tsurec
Function NI0LS30()
  ;
  NLXREC.NLXCPROC = "NI0LS30";
  ;
   /* ------------------------------------*/
   /* select unique on the shipment header*/
   /* ------------------------------------*/
  ;
   /* format tsurec key*/
  TSUREC.TSFSHPID = NIWREC.TSFSHPID;
  if (NIWREC.NIWKUID > 0) /* kuccoid is a comp nbr*/
    TSUREC.KUCCOID = NIWREC.KUCCOID;
  else
    TSUREC.KUCCOID = NI0LW01.NI0LWKUC;
  end
  call "IO4690" ("S ", SQLCA, TSUREC) {isNoRefresh = yes, isExternal = yes}; /* Read ship hdr*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    NI0LW01.NI0LWUKE = TSUREC.KUCCOID;
    TA1REC.TA1TBLKE = NI0LW01.NI0LWUKE; /* DATABASE key*/
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4690 "; /* io module*/
    TA1REC.TA1DBASE = "DTRANS"; /* database*/
    TA1REC.TA1TBLVU = "VNLSHP01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
  ;
  ;
end // end NI0LS30

// check for comp number
Function NI0LS31()
  ;
  NLXREC.NLXCPROC = "NI0LS31";
  ;
   /* check customer account class*/
  if (KUCREC.XAUCD in XAUTBL.XAUCD)
    NI0LW01.XATCD = XAUTBL.XATCD[sysVar.arrayIndex];
  end
  ;
   /* check customer account type*/
  if (NI0LW01.XATCD == "06")
    NI0LW01.NI0LWUFK = "Y"; /* customer unprotected flag*/
     /* check for comp nbr*/
     /* read profitability internal GL table for billing entity*/
    VINTGL02.XAUCD = " ";
    VINTGL02.KUCCOID = NI0LW01.NI0LWKUC;
    VINTGL02.KUMSTRID = 0;
    VINTGL02.XNXCD = 0;
    VINTGL02.XGPCD = NIWREC.NIWXGPCD[NIWKQIDX];
    NI0LS11(); /* select unique vintgl02*/
    if (NI0LW01.NI0LWGNF == "Y") /* internal gl not found*/
      return;
    end
    ;
    /* translate new ga-glbl-acct-id to old gl-gen-led-acct*/
    ;
    NI0LS-VGCOA001-S();
    ;
    NLXREC.GLACCT = GLAREC.GLAGRP;
    NLXREC.GLAGRP = NLXREC.NLXNLGL;
     /* IF NI0LW01.XAUCD = '32'  ;exports--xaucd from real cust nbr*/
    /* next sentence*/
     /* ELSE ;*/
    if (NLXREC.GLAENT == "100")
      /* next sentence*/
    else
      if (NLXREC.GLAENT == "104")
        /* next sentence*/
      else
        /* TCS CHANGES BEGIN 07/26/2001*/
        if (NLXREC.GLAENT == "105")
          /* next sentence*/
        else
          /* TCS CHANGES END   07/26/2001*/
          if (NLXREC.GLAENT > "499"
           && NLXREC.GLAENT < "600")
            /* next sentence*/
            /* MOVE 'NL' TO NI0LW01.XLBCD;*/
          else
            if (NLXREC.GLAENT == "761")
              /* next sentence*/
               /* MOVE 'IR' TO NI0LW01.XLBCD;*/
            else
              if (NLXREC.GLAENT == "101")
                /* next sentence*/
                   /* MOVE 'IN' TO NI0LW01.XLBCD;*/
              else
                /* this is nc payment term and comp nbr*/
                if (NI0LW01.NI0LWKUC == 824292)
                  /* next sentence*/
                else
                  NI0LW01.XPTCD = "NC"; /* no charge comp nbr*/
                  VRQTHD01.XPTCD = "NC";
                  VRQTHD01.OP1PTOF = "Y";
                  NI0LW01.OP1PTOF = "Y";
                  NI0LW01.XLBCD = "IN";
                  VRQTHD01.XLBCD = "IN";
                  VRQTHD01.NIOLBOVR = "Y";
                  NI0LW01.NIOLBOVR = "Y";
                  /* do not allow user to chg payment term*/
                  set NI0LM100.XPTCD skip;
                  NI0LW01.NI0LWPFX = "Y"; /* xptcd protected flag*/
                  /* do not allow user to chg remit to*/
                  set NI0LM100.XLBCD skip;
                  NI0LW01.NI0LWUFB = "N"; /* xlbcd unprotected flag*/
                end
              end
            end
          end
        end
      end
    end
    /* END ;*/
  end
  ;
  ;
  ;
  ;
end // end NI0LS31

// clear ws and niorec P/L fields
Function NI0LS32()
  ;
  NLXREC.NLXCPROC = "NI0LS32";
  ;
  NI0LW01.NI0LWDX1 = 1;
  ;
  while (NI0LW01.NI0LWDX1 < 6)
    VRQTHD01.TSVPLNBR[NI0LWDX1] = 0;
    NI0LW01.NI0LWPLN[NI0LWDX1] = 0;
    NI0LW01.NI0LWDX1 = NI0LW01.NI0LWDX1 + 1;
  end
  ;
  ;
  ;
end // end NI0LS32

// select first for nikrec
Function NI0LS33()
  NLXREC.NLXCPROC = "NI0LS33"; /* set current proc name*/
  ;
   /* format nikrec key*/
  VZCHGL01.ZCHCD = NI0LM100.ZCHCD[NI0LWDX1];
  VZCHGL01.XAUCD = NI0LW01.XAUCD;
  VZCHGL01.ZARCD = NI0LW01.ZARCD;
  VZCHGL01.KUCCOID = NI0LM100.KUCCOID; /* use real cust nbr*/
  VZCHGL01.YMTCD = " ";
  ;
  call "IO4540" ("SF", SQLCA, VZCHGL01) {isNoRefresh = yes, isExternal = yes}; /* select first row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      set NI0LM100.ZCHCD[NI0LWDX1] cursor, modified, bold;
      converseLib.validationFailed(145); /* chg typ invalid for customer*/
      NLXREC.NLXERRF = "Y";
    else
      TA1REC.TA1LOCAT[2] = "SF     "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO4540 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VZCHGL01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end
  ;
  ;
  ;
end // end NI0LS33

// get all l/cs attached to order
Function NI0LS35()
  ;
  NLXREC.NLXCPROC = "NI0LS35";
  ;
  ;
   /* check for lc on order*/
  NI0LS14(); /* select scan on lc/order xref*/
  ;
  ;
  NI0LW01.NI0LWEND = "N";
  NI0LW01.NI0LWONE = "Y";
  ;
   /* fetch nccrec rows*/
  while (NI0LW01.NI0LWEND == "N")
    NI0LS36(); /* fetch row from lc/order xref*/
  end
  ;
  ;
  ;
end // end NI0LS35

// fetch rows from NCCREC
Function NI0LS36()
  ;
  NLXREC.NLXCPROC = "NI0LS36"; /* set current proc name*/
  ;
   /* fetch cursor from lc/order xref table*/
  call "IO4270" ("N1", SQLCA, VLCORD01) {isNoRefresh = yes, isExternal = yes}; /* Load Xref cursor*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    if (NI0LW01.NI0LWONE == "Y")
      NI0LW01.NI0LWONE = "N";
      NI0LW01.NI0LWDX2 = 1;
    end
    /* load lc table*/
    NI0LW01.NI0LWLCI[NI0LWDX2] = VLCORD01.NCALCIID;
    NI0LW01.NI0LWLCR[NI0LWDX2] = VLCORD01.NCALCRID;
    NI0LW01.NI0LWMAX = NI0LW01.NI0LWDX2; /* save lc count*/
    NI0LW01.NI0LWDX2 = NI0LW01.NI0LWDX2 + 1;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      call "IO4270" ("C1", SQLCA, VLCORD01) {isNoRefresh = yes, isExternal = yes}; /* close Xref cursor*/
      NI0LW01.NI0LWEND = "Y";
    else
      TA1REC.TA1TBLKE = NI0LW01.NI0LWCKE; /* database key*/
      TA1REC.TA1LOCAT[2] = "N1     "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO4270 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VLCORD01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end
  ;
  ;
  ;
end // end NI0LS36

// move ws P/L fields to niorec
Function NI0LS37()
  ;
  NLXREC.NLXCPROC = "NI0LS37";
  ;
  NI0LW01.NI0LWDX1 = 1;
  ;
  while (NI0LW01.NI0LWDX1 < 6)
    VRQTHD01.TSVPLNBR[NI0LWDX1] = NI0LW01.NI0LWPLN[NI0LWDX1];
    NI0LW01.NI0LWDX1 = NI0LW01.NI0LWDX1 + 1;
  end
  ;
  ;
  ;
end // end NI0LS37

// set lc found/closed flags
Function NI0LS39()
  ;
  NLXREC.NLXCPROC = "NI0LS39";
  ;
  NI0LW01.NI0LWLCF = "Y"; /* lc found flag*/
  NI0LW01.NCALCIID = NI0LW01.NI0LWLCI[NI0LWDX2]; /* lc int id*/
  ;
  NI0LW01.NCALCRID = NI0LW01.NI0LWLCR[NI0LWDX2]; /* lc nbr*/
  NI0LW01.KUCCOID = NIWREC.KUCCOID;
   /* select unique on lc header for lc closed flag used in s08*/
  NI0LS07();
  ;
  ;
  ;
end // end NI0LS39

// edit Eur Apparel remit to
Function NI0LS40()
  ;
  ;
  NLXREC.NLXCPROC = "NI0LS40";
  ;
  if (NI0LW01.ZARCD == "EU" /* European Independent*/
   || NI0LW01.ZARCD == "ME" /* Middle East Indep.*/
   || NI0LW01.ZARCD == "AF") /* Africa Accounting region*/
    if (OP1REC.XGPCD == "03" /* Apparel*/
     && OP1REC.OP1CMPNB == 0) /* not a comp*/
      /* next sentence*/
    else
      set NI0LM100.XLBCD cursor, modified, bold;
      NI0LM100.XXXADDR1 = " ";
      converseLib.validationFailed(63); /* remit-to not valid for invoice*/
      NLXREC.NLXERRF = "Y";
    end
  else
    set NI0LM100.XLBCD cursor, modified, bold;
    NI0LM100.XXXADDR1 = " ";
    converseLib.validationFailed(63); /* remit-to not valid for invoice*/
    NLXREC.NLXERRF = "Y";
  end
  ;
  ;
  ;
end // end NI0LS40

// edit EU Apparel criteria
Function NI0LS41()
  ;
  ;
  NLXREC.NLXCPROC = "NI0LS41";
  ;
  if (NI0LW01.ZARCD == "EU" /* European Independent*/
   || NI0LW01.ZARCD == "ME" /* Middle East Indep.*/
   || NI0LW01.ZARCD == "AF") /* Africa Accounting Region*/
    if (OP1REC.XGPCD == "03") /* Apparel*/
      set NI0LM100.XLBCD normal; /* unprotect screen field*/
      NI0LW01.NI0LWUFB = "Y"; /* remit to modify allow*/
    end
  end
  ;
  ;
  ;
end // end NI0LS41

// Edit LCs attached to order
Function NI0LS42()
  ;
  NLXREC.NLXCPROC = "NI0LS42";
  ;
  ;
   /* check for lc on order*/
  NI0LS35(); /* get all lcs attached to order*/
  if (NI0LW01.NI0LWONE == "N")
    NI0LW01.NI0LWDX2 = 1;
    if (VRQTHD01.NCALCIID != 0
     && VRQTHD01.NCALCIID in NI0LW01.NI0LWLCI) /* get position in lc table*/
      NI0LW01.NI0LWDX2 = sysVar.arrayIndex;
    end
    NI0LS39(); /* set lc found/closed flags*/
  else
    NI0LW01.NI0LWLCF = "N"; /* lc found flag*/
  end
  ;
  ;
  ;
end // end NI0LS42

// Edit for XPTCD override
Function NI0LS43()
  ;
  NLXREC.NLXCPROC = "NI0LS43";
  ;
  ;
  if (NI0LM100.XPTCD == " ") /* refresh xptcd from order*/
    NI0LM100.XPTCD = OP1REC.XPTCD;
    NI0LW01.XPTCD = OP1REC.XPTCD;
    NI0LM100.OP1PTOF = OP1REC.OP1PTOF;
  else
    if (NI0LM100.XPTCD != OP1REC.XPTCD) /* xptcd overridden*/
      NI0LM100.OP1PTOF = "Y";
    else
      if (OP1REC.OP1PTOF == "Y")
        NI0LM100.OP1PTOF = "Y";
      end
    end
  end
  ;
  ;
  ;
end // end NI0LS43

// edit payment terms/ship date
Function NI0LS45()
  ;
  NLXREC.NLXCPROC = "NI0LS45";
  ;
  NI0LS30(); /* select unique on tsurec*/
  ;
  XX0XS01(); /* get date in ccyymmdd format*/
  ;
  NI0LW01.NI0LWDT2 = XX0XW01.XX0XWDAT; /* current dt = ivc dt*/
  ;
  if (NI0LW01.NI0LWDT2 > TSUREC.TSFDPRTA /* compare ivc/shp dates*/
   && NI0LM100.XPTCD in NI0LW01.NI0LWXPT) /* look up payment terms*/
    NI0LW01.NI0LWDIF = NI0LW01.NI0LWDAY[sysVar.arrayIndex];
    NI0LS46(); /* calculate days difference*/
    if (TA2REC.TA2DBDDN > NI0LW01.NI0LWDIF)
      if (NI0LW01.NI0LWPFX == "Y") /* xptcd protected flag*/
        set NI0LM100.XPTCD cursor, skip, bold;
      else
        set NI0LM100.XPTCD cursor, bold;
      end
      converseLib.validationFailed(144); /* override required - see cr mgr*/
      NLXREC.NLXERRF = "Y";
    end
  end
  ;
  ;
  ;
end // end NI0LS45

// calcuate days difference
Function NI0LS46()
  ;
  NLXREC.NLXCPROC = "NI0LS46";
  ;
  set TA2REC empty; /* initialize date record*/
  ;
  TA2REC.TA2DTOPT = "DAYSDIFF"; /* days difference*/
  ;
   /* daysdiff = invoice date - ship date*/
  TA2REC.TA2DBDTN = NI0LW01.NI0LWDT2; /* current (invoice) date*/
  TA2REC.TA2DBDFN = TSUREC.TSFDPRTA; /* ship date*/
  ;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* date conversion routine*/
  ;
  if (TA2REC.TA2RTNCD == 0)
    ;
    /* next sentence*/
    ;
  else
    ;
    NLXREC.NLXERRF = "Y"; /* exit to redisplay map*/
    converseLib.validationFailed(165); /* internal date error - call systems development*/
    NI0LS47(); /* process date error*/
  end
  ;
  ;
  ;
end // end NI0LS46

// Process date error
Function NI0LS47()
  ;
  NLXREC.NLXCPROC = "NI0LS47";
  ;
  ;
  TA1REC.TA1TYPE = "DATE"; /* type of error*/
  TA1REC.TA1PGMNM = "TA0040  "; /* date program*/
  TA1REC.TA1LOCAT = "CONVERT DATE ";
  TA1REC.TA1MAP = "NI0LM100"; /* map name*/
  TA1REC.TA1TBLKE = TA2REC.TA2RTNCD; /* table key*/
  TA1REC.TA1FUNC = "POST"; /* write to log*/
  set ERRSQLCA empty; /* clear area*/
  move SQLCA to ERRSQLCA withV60Compat; /* sql codes*/
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* synpoint rollback*/
  try
    call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes};
  end /* abend routine*/
  ;
  ;
  ;
end // end NI0LS47

// Get address text row
Function NI0LS48()
  ;
  NLXREC.NLXCPROC = "NI0LS48";
  ;
   /* Set key for remit to address text row*/
  ;
  VRQTXT01.TSFSHPID = VRQTHD01.TSFSHPID;
  VRQTXT01.OP1PARTN = VRQTHD01.OP1PARTN;
  VRQTXT01.OP1CUOID = VRQTHD01.OP1CUOID;
  VRQTXT01.OP1NORID = VRQTHD01.OP1NORID;
  VRQTXT01.NIFTXTYP = "A"; /* x*/
  VRQTXT01.NIFTXSEQ = 1;
  ;
  call "IO0610" ("S ", SQLCA, VRQTXT01) {isNoRefresh = yes, isExternal = yes}; /* Read Address text*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    NI0LW01.NI0LWAFL = "Y"; /* Set remit to address flag*/
    NI0LW01.NI0LWCFL = "Y"; /* Set address test flag*/
     /* MOVE 172 TO EZEMNO            ; Murry Blvd remit-to address*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      NI0LW01.NI0LWAFL = "N"; /* Set remit to address flag*/
      NI0LW01.NI0LWCFL = "N"; /* Set address test flag*/
         /* MOVE 171 TO EZEMNO          ; Allen Blvd remit-to address*/
    else
      TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO0610 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VRQTXT01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end
end // end NI0LS48

// Update address text row NIPREC
Function NI0LS49()
  ;
  NLXREC.NLXCPROC = "NI0LS49"; /* Set current proc name*/
  ;
   /* If a NIPREC exists use campus address as remit-to address*/
   /* otherwise use Allen address, campus address is the default*/
  ;
  if (NI0LM100.XLBCD == "GM" /* A GMBH customer*/
   || NI0LM100.XLBCD == "BV" 
   || NI0LM100.XLBCD == "NO")
    if (NI0LW01.NI0LWCFL == "Y") /* An address text row exists*/
      NI0LS50(); /* Delete address text row*/
    end
  else
    if (NI0LM100.NI0LMAFL == "Y") /* Use campus address*/
      if (NI0LW01.NI0LWCFL == "N") /* No NIPREC exists as address text*/
        NI0LS51(); /* Insert a NIPREC as address text*/
      end
    else /* Use Allen address*/
      if (NI0LW01.NI0LWCFL == "Y") /* A NIPCREC exists*/
        NI0LS50(); /* Delete address text row*/
      end
    end
  end
  ;
end // end NI0LS49

// Delete the NIPREC
Function NI0LS50()
  ;
  NLXREC.NLXCPROC = "NI0LS50";
  ;
   /* Set key for remit to address text row*/
  ;
  VRQTXT01.TSFSHPID = VRQTHD01.TSFSHPID;
  VRQTXT01.OP1CUOID = VRQTHD01.OP1CUOID;
  VRQTXT01.OP1NORID = VRQTHD01.OP1NORID;
  VRQTXT01.NIFTXTYP = "A";
  VRQTXT01.NIFTXSEQ = 1;
  ;
  call "IO0610" ("D ", SQLCA, VRQTXT01) {isNoRefresh = yes, isExternal = yes}; /* Delete Address text*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    if (SQLCA.VAGen_SQLCODE != 100)
      TA1REC.TA1LOCAT[2] = "D      "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO0610 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VRQTXT01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end
  ;
end // end NI0LS50

// Insert a NIPREC as an address
Function NI0LS51()
  ;
  NLXREC.NLXCPROC = "NI0LS51";
  ;
   /* Set key for remit to address text row*/
  ;
  VRQTXT01.TSFSHPID = VRQTHD01.TSFSHPID;
  VRQTXT01.OP1CUOID = VRQTHD01.OP1CUOID;
  VRQTXT01.OP1NORID = VRQTHD01.OP1NORID;
  VRQTXT01.NIFTXTYP = "A";
  VRQTXT01.NIFTXSEQ = 1;
  VRQTXT01.ZZZSDT = XX0XWDAT;
  VRQTXT01.ZZZCHGDT = XX0XWDAT;
  VRQTXT01.ZZZCHGTM = XX0XWTIM;
  ;
  call "IO0610" ("A ", SQLCA, VRQTXT01) {isNoRefresh = yes, isExternal = yes}; /* Add Address text*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "A      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0610 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VRQTXT01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
end // end NI0LS51

// select unique from vdstrb01
Function NI0LS52()
  ;
  NLXREC.NLXCPROC = "NI0LS52"; /* set current proc name*/
  ;
  VDSTRB01.KUCCOID = KUCREC.KUCCOID;
  call "IO4600" ("S ", SQLCA, VDSTRB01) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    if (VDSTRB01.XXXSTAT == "A") /* active nil customer*/
         /* next sentence*/
    else
      SQLCA.VAGen_SQLCODE = 100;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      return;
    else
      TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO4600 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VDSTRB01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end
  ;
end // end NI0LS52

//*** RECORD=NI0LW01 ****
// This is the main working storage record for NI0L.
// 
// Maintenance:
// 
// Date      Userid    Description of change
// ------------------------------------------------------------
// 10-39-90  JSHANN    Added NI0LWAFL & NI0LWCFL to accommodate
//                     NIL's move to the CAMPUS.
// 10-14-92  JJUDKI    OCT DB CHG.
// 02-01-95  ahowar    changed ni0lwxlb to 7 from 5 occurs.
//                     This was done to handle no ane eo new
//                     lock box codes. This was due to EAW
//                     coming on-line.
// ***********************
Record NI0LW01 type basicRecord
  10 TSFSHPID TSFSHPID ; 
  10 TSVPLNBR TSVPLNBR ; 
  10 XXXUSRID XXXUSRID ; 
  10 XXXUNTXT XXXUNTXT ; 
  10 XLBCD XLBCD ; 
  10 XXXADDR1 XXXADDR1 ; 
  10 NIOLBOVR NIOLBOVR ; 
  10 XPTCD XPTCD ; 
  10 XCTCD XCTCD ; 
  10 XPTDESC XPTDESC ; 
  10 OP1PTOF OP1PTOF ; 
  10 XPTLCFL XPTLCFL ; 
  10 XPTDAYS XPTDAYS ; 
  10 XPTCTRLI XPTCTRLI ; 
  10 NIAPTDDT NIAPTDDT ; 
  10 OP1CMPNB OP1CMPNB ; 
  10 NI0LWCNM NI0LWCNM ; 
  10 ZFCCD ZFCCD ; 
  10 ZFCABRV ZFCABRV ; 
  10 ZFCFMAT ZFCFMAT ; 
  10 NI0LWZGP NI0LWZGP [3] ; 
    15 ZCHCD ZCHCD ; 
    15 ZCHDESC ZCHDESC ; 
    15 NIGUSAMT NIGUSAMT ; 
  10 XAUCD XAUCD ; 
  10 ZARCD ZARCD ; 
  10 KUCCOID KUCCOID ; 
  10 NCALCRID NCALCRID ; 
  10 NCALCIID NCALCIID ; 
  10 XATCD XATCD ; 
  10 NI0LWXLB NI0LWXLB [7] ; 
  10 NI0LWAMT NI0LWAMT ; 
    15 NI0LWDLR NI0LWDLR ; 
    15 NI0LWCNT NI0LWCNT ; 
  10 NI0LWPTF NI0LWPTF ; 
  10 NI0LWLCF NI0LWLCF ; 
  10 NI0LWOFL NI0LWOFL ; 
  10 NI0LWERF NI0LWERF ; 
  10 NI0LWDX1 NI0LWDX1 ; 
  10 NI0LWIER NI0LWIER ; 
  10 NI0LWMFK NI0LWMFK ; 
  10 NI0LWMFU NI0LWMFU ; 
  10 NI0LWMFB NI0LWMFB ; 
  10 NI0LWMFX NI0LWMFX ; 
  10 NI0LWMFC NI0LWMFC [3] ; 
  10 NI0LWMFA NI0LWMFA [3] ; 
  10 NI0LWONE NI0LWONE ; 
  10 NI0LWFDT NI0LWFDT ; 
    15 NI0LWMM NI0LWMM ; 
    15 NI0LWDD NI0LWDD ; 
    15 NI0LWYY NI0LWYY ; 
  10 NI0LWEND NI0LWEND ; 
  10 NI0LWSCG NI0LWSCG ; 
  10 NI0LWPOP NI0LWPOP ; 
  10 NI0LWUFK NI0LWUFK ; 
  10 NI0LWUFB NI0LWUFB ; 
  10 NI0LWPFX NI0LWPFX ; 
  10 NI0LWGNF NI0LWGNF ; 
  10 NI0LWCMP NI0LWCMP ; 
  10 NI0LWCNB NI0LWCNB ; 
  10 NI0LWKUC NI0LWKUC ; 
  10 NI0LWKNM NI0LWKNM ; 
  10 NI0LWXCT NI0LWXCT ; 
  10 NI0LWOKE NI0LWOKE ; 
    15 NI0LWSHP NI0LWSHP ; 
    15 NI0LWCID NI0LWCID ; 
    15 NI0LWNID NI0LWNID ; 
  10 NI0LWPKE NI0LWPKE ; 
    15 NI0LWXAU NI0LWXAU ; 
    15 NI0LWKID NI0LWKID ; 
    15 NI0LWSID NI0LWSID ; 
    15 NI0LWDID NI0LWDID ; 
    15 XGPCD XGPCD ; 
  10 NI0LWCT1 NI0LWCT1 ; 
  10 NI0LWCT2 NI0LWCT2 ; 
  10 NI0LWMAX NI0LWMAX ; 
  10 NI0LWDX2 NI0LWDX2 ; 
  10 NI0LWLCR NI0LWLCR [10] ; 
  10 NI0LWLCI NI0LWLCI [10] ; 
  10 NI0LWF15 NI0LWF15 ; 
  10 NI0LWENT NI0LWENT ; 
  10 NI0LWPLN NI0LWPLN [5] ; 
  10 NI0LWCKE NI0LWCKE ; 
    15 NI0LWCUO NI0LWCUO ; 
    15 NI0LWNIO NI0LWNIO ; 
  10 NI0LWUKE NI0LWUKE ; 
  10 NI0LWAKE NI0LWAKE ; 
    15 NI0LWCUS NI0LWCUS ; 
    15 NI0LWLOC NI0LWLOC ; 
  10 NI0LWDT2 NI0LWDT2 ; 
  10 NI0LWTBL NI0LWTBL ; 
    15 NI0LWXPT NI0LWXPT [6] ; 
    15 NI0LWDAY NI0LWDAY [6] ; 
  10 NI0LWDIF NI0LWDIF ; 
  10 NI0LWAFL NI0LWAFL ; 
  10 NI0LWCFL NI0LWCFL ; 
  10 NI0LW-ENTER-CONFIRM NI0LW-ENTER-CONFIRM ; 
  10 NI0LWPLF NI0LWPLF ; 
  10 NI0LW-GCOA-MESSAGE NI0LW-GCOA-MESSAGE ; 
    15 NI0LW-GCOA-TEXT NI0LW-GCOA-TEXT ; 
    15 NI0LW-GCOA-KEY NI0LW-GCOA-KEY ; 
  10 NI0LW-GCOA-ERR-FLG NI0LW-GCOA-ERR-FLG ; 
end // end NI0LW01

// Confirm Enter hit twice
DataItem NI0LW-ENTER-CONFIRM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ga-glbl-acct-id error flag
DataItem NI0LW-GCOA-ERR-FLG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ga-glbl-acct-id key
DataItem NI0LW-GCOA-KEY char(42)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// key error on vgcoa001 table
DataItem NI0LW-GCOA-MESSAGE char(60)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table name description
DataItem NI0LW-GCOA-TEXT char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Address flag for remit to
DataItem NI0LWAFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ncarec display key
DataItem NI0LWAKE char(34)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-adj-amt
DataItem NI0LWAMT num(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Text row flag for remit addr
DataItem NI0LWCFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display op-cust-ord-id
DataItem NI0LWCID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nccrec display key
DataItem NI0LWCKE char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// internal gl not found flag
DataItem NI0LWCMP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// internal gl not found flag
DataItem NI0LWCNB char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// comp co name
DataItem NI0LWCNM char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cents
DataItem NI0LWCNT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// change count before
DataItem NI0LWCT1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// change count after
DataItem NI0LWCT2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display op-cust-ord-id
DataItem NI0LWCUO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display kuccoid
DataItem NI0LWCUS num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// do not invoice after days
DataItem NI0LWDAY num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// field day
DataItem NI0LWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display nike dept code
DataItem NI0LWDID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// do not invoice after days
DataItem NI0LWDIF num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dollars
DataItem NI0LWDLR num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date in ccyymmdd
DataItem NI0LWDT2 int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ws array index
DataItem NI0LWDX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// LC table index
DataItem NI0LWDX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quit flag
DataItem NI0LWEND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// enter key key flag
DataItem NI0LWENT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xpt/lc warning flag
DataItem NI0LWERF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pf15 flag
DataItem NI0LWF15 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// format mmddyy
DataItem NI0LWFDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// internal gl not found flag
DataItem NI0LWGNF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// init error flag
DataItem NI0LWIER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display company id
DataItem NI0LWKID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// company name
DataItem NI0LWKNM char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// company id
DataItem NI0LWKUC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// letter of credit found flag
DataItem NI0LWLCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-locr-intrn-id table
DataItem NI0LWLCI num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nl-locr-id table
DataItem NI0LWLCR char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-locr-id
DataItem NI0LWLOC char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// LC table max
DataItem NI0LWMAX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nigusamt modified flag
DataItem NI0LWMFA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xlbcd modified flag
DataItem NI0LWMFB char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// zchcd modified flag
DataItem NI0LWMFC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// kuccoid modified flag
DataItem NI0LWMFK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xxxusrid modified flag
DataItem NI0LWMFU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xptcd modified flag
DataItem NI0LWMFX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// field month
DataItem NI0LWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display op-nike-ord-id
DataItem NI0LWNID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display op-nike-ord-id
DataItem NI0LWNIO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// niorec found flag
DataItem NI0LWOFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// niorec key for error trap
DataItem NI0LWOKE char(22)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time flag
DataItem NI0LWONE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xptcd protected flag
DataItem NI0LWPFX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pfhrec key for error trap
DataItem NI0LWPKE char(21)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// pack list > 5
DataItem NI0LWPLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ts_nil_pl_nbr
DataItem NI0LWPLN int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// pop-up window flag
DataItem NI0LWPOP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// payment terms valid flag
DataItem NI0LWPTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen changed flag
DataItem NI0LWSCG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display TS_NIKE_SHP_ID
DataItem NI0LWSHP num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display store id
DataItem NI0LWSID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// payment term table
DataItem NI0LWTBL char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xlbcd unprotected flag
DataItem NI0LWUFB char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// kuccoid unprotected flag
DataItem NI0LWUFK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// tsurec display key (kuccoid)
DataItem NI0LWUKE num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// ws account class code
DataItem NI0LWXAU char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// foreign country description
DataItem NI0LWXCT char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// lock box code table
DataItem NI0LWXLB char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// payment term code
DataItem NI0LWXPT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// field year
DataItem NI0LWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// zch group level
DataItem NI0LWZGP char(37)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ZFC-CRCY-FMAT-IND
DataItem ZFCFMAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

