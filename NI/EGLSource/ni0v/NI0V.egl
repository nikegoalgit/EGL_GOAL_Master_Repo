package ni0v;

import corpcom1.CAMSG;
import corpcom1.CATOAP;
import corpcom2.XX0XW01;
import corpcom3.XPNL002;
import corpcom3.XPNL005;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSNLS01;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XSSM003;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XPTTBL;
import corpx2.XPTLCFL;
import corpx2.XXXZIP;
import ku.common.KUCCOID;
import ku.common.KUCCONM;
import ku.common.KUCREC;
import ku.common.KULAAID;
import ku.common.KULREC;
import ku.common.KUMREC;
import ni.common.NIWREC;
import nl.common.*;
import op.common.OP1CUOID;
import op.common.OP1REC;
import ta.common.TA1REC;
import vv.common.VLADDR01;
import vv.common.VPRHDR01;
//*** PROGRAM=NI0V ****
// ************************************************************
// 
//          NI0V - nil PROFORMA request address overrides
//          --------------------------------------------
// 
// This application allows the user to override the ship-to
// or bill-to address ids.  Override ids can only be valid
// customer address ids on the nil long address table.
// 
// 
// Maintenance History:
//   Date   Who    Remarks
// -------- ------ --------------------------------------------
// 04-15-91 LNGO   Creation (USE NI0N AS A MODEL)
// 08-05-91 jjudki Add map200 cust addresses scrolling.
// 11-21-91 jSHANN Corrected pf3 and scrolling logic.
// 10-14-92 jjudki Use expanded nlxrec.
// 11-09-93 jjudki NOV DB CHANGES.
// 02-23-98 TTHAN1 YEKFIX - REGEN FOR NEW XX0XS01 CHANGES.
// 02-17-99 RDHANU Increased Ship to address id from 2 to 4
// *********************
Program NI0V type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "NL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  KULREC KULREC; // record
  KUMREC KUMREC; // record
  NI0VW01 NI0VW01; // record
  NI0VW02 NI0VW02; // record
  NI0VW03 NI0VW03; // record
  NIWREC NIWREC; // record
  NLXREC NLXREC; // record
  OP1REC OP1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  VLADDR01 VLADDR01; // record
  VPRHDR01 VPRHDR01; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use NI0VT01 {deleteAfterUse = yes}; // table
  use XPTTBL; // table
  use NI0VM.NI0VM100,  // forms
      NI0VM.NI0VM200
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    NI0V000: NI0V000();
    exit program;
  end // end main
end // end NI0V

// main flow
Function NI0V000()
  ;
   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   perform initialization, set application revision nbrs,**/
   /* *   then do main perform until done with application      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0V000";
  COMMAREA.CACURRAP = "NI0V";
  ;
  NI0V001(); /* initilize the application*/
  ;
  NLXREC.NLXEOAF = "N"; /* set end-of-application flag to 'no'*/
  ;
  while (NLXREC.NLXEOAF == "N") /* while not end-of-aplication*/
    NI0V050(); /* process the application screen(s)*/
  end
  ;
  COMMAREA.CACURRAP = "NL0A";
  XPNL002();
  exit program;
end // end NI0V000

// initialize application
Function NI0V001()
  ;
  ;
   /* -----------------------------------------------------------*/
         /* initialize the application working storage*/
   /* -----------------------------------------------------------*/
  ;
  ;
  NLXREC.NLXCPROC = "NI0V001";
  ;
  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen converse*/
  VGVar.handleHardIOErrors = 1; /* return control to appl if hard db2 error*/
  ;
  set NI0VW01 empty; /* clear working storage rec1*/
  set VPRHDR01 empty; /* clear PRO.req HDR record*/
  set VLADDR01 empty; /* clear long addres record*/
  set TA1REC empty;
  set SQLCA empty;
  set ERRSQLCA empty;
  ;
  XSENTRY(); /* appl entry security*/
  XSSEGTR(); /* set segmented transaction id*/
  ;
  set NLXREC empty; /* clear common working storage*/
  NLXREC.NLXPF3 = "N"; /* pf3 confirm flag*/
  NLXREC.NLXPF4 = "N"; /* pf4 confirm flag*/
  NLXREC.NLXPF20 = "N"; /* pf20 confirm flag*/
  ;
  NI0VW01.NI0VWOVR = "N"; /* bill-to/ship-to override flag*/
  NI0VW01.NI0VWPFB = "N"; /* bill-to protect flag*/
  ;
  set NIWREC empty; /* clear common working storage*/
  ;
  if (COMMAREA.CAFRMSYS != "NI")
    COMMAREA.CAUSERA = " ";
  end
  ;
  NIWREC.NIWGROUP = COMMAREA.CAUSERA;
  ;
  if (COMMAREA.CAITEM > 0) /* fastpath entry not allowed*/
    COMMAREA.CATOAP = "NI0U";
    XPNL002();
  else
    if (COMMAREA.CAFROMAP == "NI0S"
     || COMMAREA.CAFROMAP == "NI0T"
     || COMMAREA.CAFROMAP == "NI0U"
     || COMMAREA.CAFROMAP == "NI0W"
     || COMMAREA.CAFROMAP == "NI0X")
      if (NIWREC.NIQPROID > 0)
        /* next sentence*/
      else
        if (NIWREC.NIWADDFL == "Y")
          COMMAREA.CATOAP = "NI0S";
          XPNL002();
        else
          COMMAREA.CATOAP = "NI0T";
          XPNL002();
        end
      end
    else
      COMMAREA.CATOAP = "NI0T";
      XPNL002();
    end
  end
  ;
  XX0XS01(); /* get current date and time*/
  ;
  ;
  NI0VS21(); /* select unique on pro request header*/
  ;
  NI0VW01.NI0VWKUC = NIWREC.KUCCOID; /* cust nbr from ni0s*/
  ;
  if (VPRHDR01.NLAADRID[1] > 0)
    NI0VW01.NI0VWBTA = VPRHDR01.NLAADRID[1]; /* ws bill-to addr*/
  end
  ;
  if (VPRHDR01.NLAADRID[2] > 0)
    NI0VW01.NI0VWSTA = VPRHDR01.NLAADRID[2]; /* ws ship-to addr*/
  end
  ;
   /* -----------------------------------------------------------*/
         /* determine the bill-to address*/
   /* -----------------------------------------------------------*/
  ;
  if (NI0VW01.NI0VWBTA > 0) /* bill-to addr*/
    NI0VS03(); /* format pro request large address*/
  else
    NIWREC.NIWKQIDX = 1; /* SET NIWREC.NIWKQIDX TO 1*/
    NI0VS06(); /* format default cust bill-to addr*/
  end
  ;
  ;
   /* -----------------------------------------------------------*/
         /* determine the ship-to address*/
   /* -----------------------------------------------------------*/
  ;
  if (NI0VW01.NI0VWSTA > 0) /* ship-to addr*/
    NI0VS07(); /* format inv request large address*/
  else
    NIWREC.NIWKQIDX = 1; /* SET NIWREC.NIWKQIDX TO 1*/
    NI0VS10(); /* format default cust ship-to addr*/
  end
  ;
   /* ------------------------------------------------------*/
    /* Set up working-storage array of screen names*/
   /* ------------------------------------------------------*/
  ;
  NLXREC.NLXSNAME[1] = "NI0VM100"; /* init screens used in this appl*/
  ;
  NLXREC.NLXCSCRN = "NI0VM100"; /* set first screen to display*/
  ;
  ;
  ;
end // end NI0V001

// cust address
Function NI0V010()
  ;
   /* initialize the screen variables*/
  ;
  if (converseVar.validationMsgNum == 0)
    if (NI0VW03.NI0VWBSW == "Y")
      NI0VS30(); /* build the ni0vm200 screen*/
    end
  end
  ;
  NI0VM200.XXXSCRDT = VGVar.currentShortGregorianDate;
  ;
  NI0VS32(); /* protect fields*/
  ;
  NI0VW01.NI0VW1SU = NI0VM200.NI0VW1ST; /* hold address id*/
  ;
  ;
  converse NI0VM200 ;
  ;
  NI0VS70(); /* handle special entry (fast-path, pf-keys)*/
  ;
end // end NI0V010

// decide which map to display
Function NI0V050()
  ;
   /* ************************************************************/
   /* *   control process the application screen(s)             **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0V050"; /* set current process name*/
  ;
  sysVar.arrayIndex = 0;
  NLXREC.NLXSCRNX = 0;
  ;
  if (NLXREC.NLXCSCRN in NLXREC.NLXSNAME) /* if current-screen-name is*/
    NLXREC.NLXSCRNX = sysVar.arrayIndex; /* in the screen-array, then set*/
  end /* the screen-index*/
  ;
  set TA1REC empty;
  TA1REC.TA1MAP = NLXREC.NLXCSCRN; /* prepare for abend*/
  ;
  NLXREC.NLXBLDSC = "Y"; /* set build screen flag to 'yes'*/
  NLXREC.NLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
  NLXREC.NLXERRF = "N"; /* clear error flag*/
  ;
  if (NLXREC.NLXSCRNX == 1) /* if screen NI0Vm100*/
    while (NLXREC.NLXEOSF == "N") /* show until user is done*/
      NI0V100();
    end
  else
    TA1REC.TA1MAP = NLXREC.NLXCSCRN;
    TA1REC.TA1TBLKE = "UNKNOWN SCREEN NAME";
    TA1REC.TA1LOCAT[2] = NLXREC.NLXCSCRN;
    XPNL005(); /* abend*/
  end
  ;
   /* at this point;*/
       /* if the end-of-application flag (NLXeoaf ) = 'n'*/
         /* the perform will return to the top of NI0V050...*/
       /* else*/
         /* the perform will auto return to NI0V000.*/
  ;
end // end NI0V050

// converse map m100
Function NI0V100()
  ;
   /* ************************************************************/
   /* *    process screen NI0Vm100                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from nl0k050 until the end-of-screen   **/
   /* *     flag (nlxeosf) is set to 'y'.                      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0V100";
  ;
  if (NLXREC.NLXBLDSC == "Y")
    NI0V101();
    NLXREC.NLXBLDSC = "N";
  end
  ;
   /* ***********************************************************/
  converse NI0VM100 ;
  ;
   /* ***********************************************************/
  ;
  VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";
  ;
  NI0V110(); /* validate pfkeys*/
  ;
  if (NLXREC.NLXERRF == "N")
    NI0V120(); /* edit entries and update*/
  end
  ;
  if (NLXREC.NLXERRF == "N")
    NI0V130(); /* determine next action*/
  end
  ;
   /* at this point;*/
     /* if the end-of-screen flag (nlxeosf) is 'n'*/
        /* we go back to top of process NI0V100.*/
     /* if the end-of-screen flag (nlxeosf) is 'y'*/
        /* we return to NI0V050.*/
end // end NI0V100

// build screen
Function NI0V101()
  ;
   /* fill in all screen fields*/
  ;
   /* **************************************/
   /* build screen*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NI0V101";
  ;
  converseLib.clearScreen();
  set NI0VM100 initial;
  ;
  NI0VM100.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  NI0VM100.XXXRVNBR = "00"; /* revision nbr*/
  NI0VM100.XXXPRCNM = "NI0V100"; /* process name*/
  ;
  NI0VS13(); /* format screen header fields*/
  ;
  if (NI0VW01.XPTLCFL == "Y") /* cannot override l/c address*/
    set NI0VM100.NI0VMADR[1] skip;
    NI0VW01.NI0VWPFB = "Y"; /* bill-to protected flag*/
  end
  ;
   /* format bill-to fields*/
  NI0VS14();
   /* format ship-to fields*/
  NI0VS15();
  ;
  if (NI0VW01.NI0VWIER == "Y") /* error on init*/
    NI0VW01.NI0VWIER = "N";
    return;
  end
  ;
  ;
  ;
  ;
end // end NI0V101

// edit pfkeys
Function NI0V110()
  ;
   /* **************************************/
   /* edit pk keys*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NI0V110";
  ;
  set NI0VM100.CATOAP normal;
  ;
  if (NI0VM100.CATOAP != " ") /* if any fastpath data entered*/
    COMMAREA.CATOAP = NI0VM100.CATOAP;
    COMMAREA.CAITEM = NI0VM100.CAITEM;
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002();
    ;
    if (NLXREC.NLXERRF == "Y")
      set NI0VM100.CATOAP cursor, modified, bold;
    end
    ;
    return;
  end
  ;
  if (NLXREC.NLXPF3 == "Y" /* pf3 confirm flag*/
   && converseVar.eventKey not pf3)
    NLXREC.NLXPF3 = "N";
  end
  ;
  if (NLXREC.NLXPF4 == "Y" /* pf4 confirm flag*/
   && converseVar.eventKey not pf4)
    NLXREC.NLXPF4 = "N";
  end
  ;
  if (NLXREC.NLXPF20 == "Y" /* pf20 confirm flag*/
   && converseVar.eventKey not pf20)
    NLXREC.NLXPF20 = "N";
  end
  ;
  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf12) /* edit option*/
     /* next sentence*/
  else
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa2
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      converseLib.validationFailed(36); /* pa1/2 cause loss of keyed data-rekey*/
                                   /* any change*/
       /* set alterable fields modified*/
      NLXREC.NLXERRF = "Y";
    else
      if (converseVar.eventKey is pf1)
        XSNLS01(); /* nil help routine - exit to gd01*/
      else
        if (converseVar.eventKey is pf4)
          if (NLXREC.NLXPF4 == "N"
           && NI0VM100 is modified)
            NLXREC.NLXPF4 = "Y";
            converseLib.validationFailed(109); /* updates not saved - pf4 to confirm*/
            NLXREC.NLXERRF = "Y";
            return;
          end
          COMMAREA.CAUSERA = " ";
          XSPF4();
        else
          if (converseVar.eventKey is pf3)
            if (NLXREC.NLXPF3 == "N"
             && NI0VM100 is modified)
              NLXREC.NLXPF3 = "Y";
              converseLib.validationFailed(108); /* updates not saved - pf3 to confirm*/
              NLXREC.NLXERRF = "Y";
              return;
            end
            COMMAREA.CATOAP = "NI0U"; /* exit to incoterms screen*/
            COMMAREA.CAUSERA = NIWREC.NIWGROUP;
            XPNL002();
            return;
          else
            if (converseVar.eventKey is pf20)
              if (NLXREC.NLXPF20 == "N"
               && NI0VM100 is modified)
                NLXREC.NLXPF20 = "Y";
                converseLib.validationFailed(110); /* updates not saved - pf20 to confirm*/
                NLXREC.NLXERRF = "Y";
                return;
              end
              COMMAREA.CATOAP = "NI0J";
              XPNL002();
              return;
            else
              COMMAREA.CATOAP = " ";
              converseLib.validationFailed(2); /* INVALID FUNCTION KEY*/
              NLXREC.NLXERRF = "Y";
            end
          end
        end
      end
    end
  end
end // end NI0V110

// edit entries and update
Function NI0V120()
  ;
   /* **************************************/
   /* edit entries and update*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NI0V120";
  ;
  NI0VW03.NI0VWBSW = "Y"; /* move rec to strg switch*/
  ;
   /* reset field intensity*/
  ;
  set NI0VM100.NI0VMADR[1] initialAttributes;
  set NI0VM100.NI0VMADR[2] cursor, initialAttributes;
  ;
   /* Set bill-to address change flag*/
  ;
  if (NI0VM100.NI0VMADR[1] > "0000")
    NI0VW01.NI0VWCHR = NI0VM100.NI0VMADR[1]; /* hold orig addr*/
    NI0VW01.NI0VWH1 = NI0VW01.NI0VWNBR;
    if (NI0VW01.NI0VWNBR != NI0VW01.NI0VWBTA)
      NI0VW01.NI0VWOVR = "Y"; /* ship-to override switch*/
      NI0VW01.NI0VWR1 = "Y"; /* sold-to addr switch*/
   /* TCS CHANGE BEGIN*/
  /* IF NI0VM100.NI0VMADR(1) IN NI0VT01.NI0VWCHR;*/
   /* TCS CHANGE END*/
      if (NI0VW01.NI0VWNBR in NI0VT01.NI0VWNBR
       && NI0VM100.NI0VMADR[1] != "?")
        NI0VW01.NI0VWH1 = NI0VT01.NI0VWNBR[sysVar.arrayIndex];
        NI0VW01.NLAADRID[1] = NI0VT01.NI0VWNBR[sysVar.arrayIndex];
      else
        NI0VW01.NLAADRID[1] = NI0VW01.NI0VWNBR;
      end
    else
      NI0VW01.NI0VWR1 = "N"; /* sold-to addr switch*/
    end
  end
  ;
   /* Set bill-to address change flag*/
  ;
  if (NI0VM100.NI0VMADR[2] > "0000")
    NI0VW01.NI0VWCHR = NI0VM100.NI0VMADR[2]; /* hold orig addr*/
    NI0VW01.NI0VWH2 = NI0VW01.NI0VWNBR;
    if (NI0VW01.NI0VWNBR != NI0VW01.NI0VWSTA) /* address changed*/
      NI0VW01.NI0VWR2 = "Y"; /* ship-to addr switch*/
      NI0VW01.NI0VWOVR = "Y"; /* ship-to override switch*/
  /* IF NI0VM100.NI0VMADR(2) IN NI0VT01.NI0VWCHR;*/
      if (NI0VW01.NI0VWNBR in NI0VT01.NI0VWNBR
       && NI0VM100.NI0VMADR[2] != "?")
        NI0VW01.NI0VWH2 = NI0VT01.NI0VWNBR[sysVar.arrayIndex];
        NI0VW01.NLAADRID[2] = NI0VT01.NI0VWNBR[sysVar.arrayIndex];
      else
        NI0VW01.NLAADRID[2] = NI0VW01.NI0VWNBR;
      end
    else
      NI0VW01.NI0VWR2 = "N"; /* ship-to addr switch*/
    end
  end
  ;
   /* pop-up window for sold-to*/
  ;
  if (NI0VM100.NI0VMADR[1] == "?")
    NI0VW01.NI0VWMSA = "SOLD-TO ADDR";
    NI0VW03.NI0VWBSW = "Y"; /* build screen switch*/
    NI0VW03.NI0VWIN3 = 1; /* index*/
    NI0VW03.NI0VWIN4 = 1; /* index*/
    NI0VW03.NI0VWFNO = 1; /* number of fields*/
    NI0VS90();
    while (NI0VW03.NI0VWBSW == "Y")
      NI0V010(); /* display cust addresses*/
    end
    if (NI0VM200.NLAADRID > 0)
      NI0VW01.NLAADRID[1] = NI0VM200.NLAADRID;
      NI0VW01.NI0VWNBR = NI0VM200.NLAADRID;
      NI0VM100.NI0VMADR[1] = NI0VW01.NI0VWCHR;
    end
    NI0VM200.NLAADRID = 0;
    NLXREC.NLXERRF = "Y"; /* error flag*/
  end
  ;
   /* pop-up window for ship to.*/
  ;
  if (NI0VM100.NI0VMADR[2] == "?")
    NI0VW01.NI0VWMSA = "SHIP-TO ADDR";
    NI0VW03.NI0VWBSW = "Y"; /* build screen switch*/
    NI0VW03.NI0VWIN3 = 1; /* index*/
    NI0VW03.NI0VWIN4 = 1; /* index*/
    NI0VW03.NI0VWFNO = 1; /* number of fields*/
    NI0VS90();
    while (NI0VW03.NI0VWBSW == "Y")
      NI0V010(); /* display cust addresses*/
    end
    if (NI0VM200.NLAADRID > 0)
      NI0VW01.NLAADRID[2] = NI0VM200.NLAADRID;
      NI0VW01.NI0VWNBR = NI0VM200.NLAADRID;
      NI0VM100.NI0VMADR[2] = NI0VW01.NI0VWCHR;
    end
    NI0VM200.NLAADRID = 0;
    NLXREC.NLXERRF = "Y"; /* error flag*/
  end
  ;
  if (NI0VM100.NI0VMADR[1] > "0000")
    if (NI0VW01.NI0VWR1 == "Y")
      NI0VS16(); /* format entered bill-to override*/
    end
  else
    set NI0VM100.NI0VMADR[1] cursor, modified, bold;
    converseLib.validationFailed(44);
    NLXREC.NLXERRF = "Y";
  end
  ;
  if (NI0VM100.NI0VMADR[2] > "0000")
    if (NI0VW01.NI0VWR2 == "Y")
      NI0VS17(); /* format entered sold-to override*/
    end
  else
    set NI0VM100.NI0VMADR[2] cursor, modified, bold;
    converseLib.validationFailed(44);
    NLXREC.NLXERRF = "Y";
  end
  ;
  if (NLXREC.NLXERRF == "Y"
   || converseVar.eventKey is pf12)
    return;
  end
  ;
   /* add new addr ids to inv req hdr*/
  ;
  NI0VW01.NI0VWUPF = "N"; /* update inv req hdr flag*/
  ;
  if (NI0VW01.NI0VWH1 == VPRHDR01.NLAADRID[1])
     /* next sentence*/
  else
    VPRHDR01.NLAADRID[1] = NI0VW01.NI0VWH1;
    NI0VW01.NI0VWUPF = "Y";
  end
  ;
  if (NI0VW01.NI0VWH2 == VPRHDR01.NLAADRID[2])
     /* next sentence*/
  else
    VPRHDR01.NLAADRID[2] = NI0VW01.NI0VWH2;
    NI0VW01.NI0VWUPF = "Y";
  end
  ;
  if (NI0VW01.NI0VWUPF == "Y") /* update only if addr ids have been*/
                                   /* chgd*/
    VPRHDR01.ZZZCHGDT = XX0XW01.XX0XWDAT;
    VPRHDR01.ZZZCHGTM = XX0XW01.XX0XWTIM;
    NI0VS22(); /* update inv req hdr*/
  end
  ;
  ;
  ;
end // end NI0V120

// determine next action
Function NI0V130()
  ;
   /* **************************************/
   /* determine next action*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NI0V130";
  ;
  if (converseVar.eventKey is pf12)
    /* next sentence*/
  else
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    COMMAREA.CATOAP = "NI0W";
    XPNL002();
    return;
  end
end // end NI0V130

// format inv request bill-to
Function NI0VS03()
  ;
  NLXREC.NLXCPROC = "NI0VS03";
  ;
   /* Set key for NLAREC*/
  VLADDR01.NLATYPIN = "C";
  VLADDR01.NLABSIND = " ";
  VLADDR01.NLAONECH = " ";
  VLADDR01.NLAINTGR = NI0VW01.NI0VWKUC; /* kuccoid*/
  VLADDR01.NLASINT1 = 0;
  VLADDR01.NLASINT2 = 0;
  VLADDR01.NLAADRID = NI0VW01.NI0VWBTA; /* bill-to addr*/
  ;
   /* select unique on large address*/
  NI0VS20();
  ;
   /* save bill-to address fields in working storage*/
  NI0VS11();
  ;
  ;
  ;
end // end NI0VS03

// format default cust bill-to
Function NI0VS06()
  ;
  NLXREC.NLXCPROC = "NI0VS06";
  ;
   /* Set key for NLAREC*/
  VLADDR01.NLATYPIN = "C";
  VLADDR01.NLABSIND = " ";
  VLADDR01.NLAONECH = " ";
  VLADDR01.NLAINTGR = NI0VW01.NI0VWKUC; /* kuccoid*/
  VLADDR01.NLASINT1 = 0;
  VLADDR01.NLASINT2 = 0;
   /* MOVE KUAREC.KUAADRID TO NLAREC.NLAADRID;*/
  VLADDR01.NLAADRID = NI0VW01.NI0VWBTA; /* store addr id*/
  ;
   /* select unique on large address*/
  NI0VS20();
  ;
   /* save bill-to address fields in working storage*/
  NI0VS11();
  ;
  ;
  ;
end // end NI0VS06

// format inv request ship-to
Function NI0VS07()
  ;
  NLXREC.NLXCPROC = "NI0VS07";
  ;
   /* Set key for NLAREC*/
  VLADDR01.NLATYPIN = "C";
  VLADDR01.NLABSIND = " ";
  VLADDR01.NLAONECH = " ";
  VLADDR01.NLAINTGR = NI0VW01.NI0VWKUC; /* kuccoid*/
  VLADDR01.NLASINT1 = 0;
  VLADDR01.NLASINT2 = 0;
  VLADDR01.NLAADRID = NI0VW01.NI0VWSTA; /* ship-to addr*/
  ;
   /* select unique on large address*/
  NI0VS20();
  ;
   /* save ship-to address fields*/
  NI0VS12();
  ;
  ;
  ;
end // end NI0VS07

// format default cust ship-to
Function NI0VS10()
  ;
  NLXREC.NLXCPROC = "NI0VS10";
  ;
   /* Set key for NLAREC*/
  VLADDR01.NLATYPIN = "C";
  VLADDR01.NLABSIND = " ";
  VLADDR01.NLAONECH = " ";
  VLADDR01.NLAINTGR = NI0VW01.NI0VWKUC;
  VLADDR01.NLASINT1 = 0;
  VLADDR01.NLASINT2 = 0;
  VLADDR01.NLAADRID = NI0VW01.NI0VWSTA;
  ;
   /* select unique on large address*/
  NI0VS20();
  ;
end // end NI0VS10

// save bill-to addr in ws
Function NI0VS11()
  NLXREC.NLXCPROC = "NI0VS11";
  ;
   /* save bill-to address*/
  NI0VW01.NLAADRID[1] = VLADDR01.NLAADRID;
  NI0VW01.NI0VWBA1 = VLADDR01.XXX-ADDR1;
  NI0VW01.NI0VWBA2 = VLADDR01.XXX-ADDR2;
  NI0VW01.NI0VWBA3 = VLADDR01.XXX-ADDR3;
  NI0VW01.NI0VWBA4 = VLADDR01.XXX-ADDR4;
  NI0VW01.NI0VWBA5 = VLADDR01.XXX-ADDR5;
  NI0VW01.NI0VWBA6 = VLADDR01.XXX-ADDR6;
  ;
  ;
  ;
end // end NI0VS11

// save ship-to addr in ws
Function NI0VS12()
  ;
  NLXREC.NLXCPROC = "NI0VS12";
  ;
   /* save ship-to address*/
  NI0VW01.NLAADRID[2] = VLADDR01.NLAADRID;
  NI0VW01.NI0VWSA1 = VLADDR01.XXX-ADDR1;
  NI0VW01.NI0VWSA2 = VLADDR01.XXX-ADDR2;
  NI0VW01.NI0VWSA3 = VLADDR01.XXX-ADDR3;
  NI0VW01.NI0VWSA4 = VLADDR01.XXX-ADDR4;
  NI0VW01.NI0VWSA5 = VLADDR01.XXX-ADDR5;
  NI0VW01.NI0VWSA6 = VLADDR01.XXX-ADDR6;
  ;
  ;
  ;
end // end NI0VS12

// format screen header fields
Function NI0VS13()
  ;
  ;
   /* **************************************/
   /* fill in all screen header fields*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NI0VS13";
  ;
   /* customer fields*/
   /* IF NIWREC.NIWKUID = 0           ; no comp number*/
  NI0VM100.KUCCOID = NIWREC.KUCCOID;
  NI0VM100.KUCCONM = NIWREC.KUCCONM;
  NI0VM100.NIQPROID = NIWREC.NIQPROID;
  NI0VM100.XCTDESC = NIWREC.XCTDESC;
   /* ELSE ;*/
   /* MOVE NIWREC.NIWKUID TO NI0VM100.KUCCOID;*/
   /* MOVE NIWREC.NIWKUNM TO NI0VM100.KUCCONM;*/
   /* MOVE NIWREC.NIWDESC TO NI0VM100.XCTDESC;*/
   /* END ;*/
  ;
  ;
end // end NI0VS13

// format bill-to screen fields
Function NI0VS14()
  NLXREC.NLXCPROC = "NI0VS14";
  ;
   /* F NIOREC.NCALCIID > 0          ;cannot override lc address*/
   /* SET ni0vM100.NLAADRID(1) AUTOSKIP;*/
   /* ND ;*/
  ;
   /* get bill-to address*/
  NI0VW01.NI0VWNBR = NI0VW01.NLAADRID[1];
  NI0VM100.NI0VMADR[1] = NI0VW01.NI0VWCHR;
  NI0VM100.NI0VMBA1 = NI0VW01.NI0VWBA1;
  NI0VM100.NI0VMBA2 = NI0VW01.NI0VWBA2;
  NI0VM100.NI0VMBA3 = NI0VW01.NI0VWBA3;
  NI0VM100.NI0VMBA4 = NI0VW01.NI0VWBA4;
  NI0VM100.NI0VMBA5 = NI0VW01.NI0VWBA5;
  NI0VM100.NI0VMBA6 = NI0VW01.NI0VWBA6;
  ;
  ;
  ;
end // end NI0VS14

// format ship-to screen fields
Function NI0VS15()
  NLXREC.NLXCPROC = "NI0VS15";
  ;
  ;
   /* get ship-to address*/
  NI0VW01.NI0VWNBR = NI0VW01.NLAADRID[2];
  NI0VM100.NI0VMADR[2] = NI0VW01.NI0VWCHR;
  NI0VM100.NI0VMSA1 = NI0VW01.NI0VWSA1;
  NI0VM100.NI0VMSA2 = NI0VW01.NI0VWSA2;
  NI0VM100.NI0VMSA3 = NI0VW01.NI0VWSA3;
  NI0VM100.NI0VMSA4 = NI0VW01.NI0VWSA4;
  NI0VM100.NI0VMSA5 = NI0VW01.NI0VWSA5;
  NI0VM100.NI0VMSA6 = NI0VW01.NI0VWSA6;
  ;
  ;
  ;
end // end NI0VS15

// format inv req bill-to ovrrid
Function NI0VS16()
  ;
  NLXREC.NLXCPROC = "NI0VS16";
  ;
   /* Set key for NLAREC*/
  VLADDR01.NLATYPIN = "C";
  VLADDR01.NLABSIND = " ";
  VLADDR01.NLAONECH = " ";
  VLADDR01.NLAINTGR = NI0VW01.NI0VWKUC;
  VLADDR01.NLASINT1 = 0;
  VLADDR01.NLASINT2 = 0;
  NI0VW01.NI0VWNBR = NI0VW01.NLAADRID[1];
  NI0VM100.NI0VMADR[1] = NI0VW01.NI0VWCHR; /* orig addr*/
  VLADDR01.NLAADRID = NI0VW01.NLAADRID[1];
  ;
   /* select unique on large address*/
  NI0VS20();
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* entered id found*/
    NI0VS11(); /* save bill-to address fields in working storage*/
    NI0VS14(); /* move ws address fields to screen*/
  else
    set NI0VM100.NI0VMADR[1] cursor, modified, bold;
    converseLib.validationFailed(44); /* invalid id*/
    NLXREC.NLXERRF = "Y";
    return;
  end
  ;
  ;
end // end NI0VS16

// format inv req ship-to ovrrid
Function NI0VS17()
  ;
  NLXREC.NLXCPROC = "NI0VS17";
  ;
   /* Set key for NLAREC*/
  VLADDR01.NLATYPIN = "C";
  VLADDR01.NLABSIND = " ";
  VLADDR01.NLAONECH = " ";
  VLADDR01.NLAINTGR = NI0VW01.NI0VWKUC;
  VLADDR01.NLASINT1 = 0;
  VLADDR01.NLASINT2 = 0;
  NI0VW01.NI0VWNBR = NI0VW01.NLAADRID[2];
  NI0VM100.NI0VMADR[2] = NI0VW01.NI0VWCHR; /* orig addr*/
  VLADDR01.NLAADRID = NI0VW01.NLAADRID[2];
  ;
   /* select unique on large address*/
  NI0VS20();
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* entered id found*/
    NI0VS12(); /* save ship-to address fields in working storage*/
    NI0VS15();
  else
    set NI0VM100.NI0VMADR[2] cursor, modified, bold;
    converseLib.validationFailed(44); /* invalid id*/
    NLXREC.NLXERRF = "Y";
  end
  ;
  ;
end // end NI0VS17

// Select Unique from NLAREC
Function NI0VS20()
  NLXREC.NLXCPROC = "NI0VS20";
  ;
   /* NLAREC - Select Unique*/
  ;
  call "IO4410" ("S ", SQLCA, VLADDR01) {isNoRefresh = yes, isExternal = yes}; /* Read Long Address*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100
     && NI0VW01.NI0VWOVR == "Y") /* override flag*/
      /* An address should be found unless it has been entered*/
      /* incorrectly.  The override flag means that a message*/
      /* should be displayed.*/
       /* next sentence*/
    else
      NI0VW01.NI0VWTYP = VLADDR01.NLATYPIN;
      NI0VW01.NI0VWBS = VLADDR01.NLABSIND;
      NI0VW01.NI0VWCHA = VLADDR01.NLAONECH;
      NI0VW01.NI0VWINT = VLADDR01.NLAINTGR;
      NI0VW01.NI0VWIN1 = VLADDR01.NLASINT1;
      NI0VW01.NI0VWIN2 = VLADDR01.NLASINT2;
      NI0VW01.NI0VWADI = VLADDR01.NLAADRID;
      TA1REC.TA1TBLKE = NI0VW01.NI0VWAKE; /* table key*/
      TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO4410 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VLADDR01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end
end // end NI0VS20

// Select Unique from NIQREC
Function NI0VS21()
  NLXREC.NLXCPROC = "NI0VS21";
  ;
   /* NIQREC - Select Unique*/
  ;
  VPRHDR01.NIQPROID = NIWREC.NIQPROID;
  ;
  call "IO5800" ("S ", SQLCA, VPRHDR01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO5800 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VPRHDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
  ;
  ;
end // end NI0VS21

// Update of NIQREC
Function NI0VS22()
  NLXREC.NLXCPROC = "NI0VS22";
  ;
   /* NIQREC - Update*/
  ;
   /* format request header display key*/
   /* MOVE NI0VM100.NI0VMADR(2) TO NIQREC.NLAADRID(2);*/
   /* MOVE NI0VM100.NI0VMADR(1) TO NIQREC.NLAADRID(1);*/
  NI0VW01.NI0VWCHR = NI0VM100.NI0VMADR[2];
  VPRHDR01.NLAADRID[2] = NI0VW01.NI0VWNBR;
  NI0VW01.NI0VWCHR = NI0VM100.NI0VMADR[1];
  VPRHDR01.NLAADRID[1] = NI0VW01.NI0VWNBR;
  ;
  VPRHDR01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPRHDR01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  call "IO5800" ("U ", SQLCA, VPRHDR01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1TBLKE = NI0VW01.NI0VWOKE; /* database key*/
    TA1REC.TA1LOCAT[2] = "U      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO5800 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VPRHDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
  ;
  ;
end // end NI0VS22

// build the ni0nm200 screen
Function NI0VS30()
  ;
  if (NI0VM200.NI0VW1ST != NI0VW01.NI0VW1SU)
    NI0VW03.NI0VWIN3 = NI0VM200.NI0VW1ST;
  end
  ;
  set NI0VM200 initial;
  ;
  NI0VM200.NI0VMSA = NI0VW01.NI0VWMSA;
  NI0VM200.KUCCOID = NI0VM100.KUCCOID;
  NI0VM200.KUCCONM = NI0VM100.KUCCONM;
  NI0VM200.XCTDESC = NI0VM100.XCTDESC;
  NI0VW03.NI0VWIN4 = 1;
  VLADDR01.NLATYPIN = "C";
  VLADDR01.NLABSIND = " ";
  VLADDR01.NLAONECH = " ";
  VLADDR01.NLAINTGR = NI0VW01.NI0VWKUC;
  VLADDR01.NLASINT1 = 0;
  VLADDR01.NLASINT2 = 0;
  ;
  if (NI0VW03.NI0VWIN3 <= 0)
    NI0VW03.NI0VWIN3 = 1;
  end
  ;
  while (NI0VW03.NI0VWIN4 <= 4                /* screen index*/
   && NI0VW03.NI0VWIN3 <= NI0VW03.NI0VWRCT /* table index le total recs*/
   && NI0VW03.NI0VWIN3 > 0                 
   && NI0VW02.NLAINTGR[NI0VWIN3] > 0)
    NI0VS31(); /* move addresses to screen*/
    NI0VW03.NI0VWIN3 = NI0VW03.NI0VWIN3 + 1; /* table index*/
    NI0VW03.NI0VWIN4 = NI0VW03.NI0VWIN4 + 1; /* screen index*/
  end
  ;
end // end NI0VS30

// get addr and move to screen
Function NI0VS31()
  ;
  NLXREC.NLXCPROC = "NI0VS31";
  ;
  VLADDR01.NLAINTGR = NI0VW02.NLAINTGR[NI0VWIN3];
  VLADDR01.NLAADRID = NI0VW02.NLAADRID[NI0VWIN3];
  ;
   /* select unique - NLAREC*/
  ;
  call "IO4410" ("S ", SQLCA, VLADDR01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VLADDR01";
    TA1REC.TA1PGMNM = "NI0VS31";
    TA1REC.TA1LOC = "SELECT ADDR";
    TA1REC.TA1TBLKE = NI0VW03.NI0VWCID;
    XSSM003(); /* abort routine*/
  end
  ;
  if (NI0VW03.NI0VWIN3 > 0)
    NI0VM200.NI0VW4TH = NI0VW03.NI0VWIN3;
  end
  NI0VW03.NI0VWIN5 = NI0VW03.NI0VWRCT;
  NI0VW03.NI0VWIN6 = NI0VW03.NI0VWRCT;
  NI0VW03.NI0VWIN5 = NI0VW03.NI0VWIN5 - NI0VW03.NI0VWIN3;
  if (NI0VW03.NI0VWIN5 > 4)
    NI0VW03.NI0VWIN6 = NI0VW03.NI0VWIN3 - 3;
  else
    if (NI0VW03.NI0VWIN4 == 4)
      NI0VW03.NI0VWIN6 = NI0VW03.NI0VWIN3 - 3;
    else
      if (NI0VW03.NI0VWIN4 == 3)
        NI0VW03.NI0VWIN6 = NI0VW03.NI0VWIN3 - 2;
      else
        if (NI0VW03.NI0VWIN4 == 2)
          NI0VW03.NI0VWIN6 = NI0VW03.NI0VWIN3 - 1;
        else
          if (NI0VW03.NI0VWIN4 == 1)
            NI0VW03.NI0VWIN6 = NI0VW03.NI0VWRCT;
          end
        end
      end
    end
  end
   /* IF ni0vW03.ni0vWIN5 EQ 0;*/
     /* MOVE ni0vW03.ni0vWRCT TO ni0vW03.ni0vWIN6;*/
   /* ELSE;*/
     /* ni0vW03.ni0vWIN6 = ni0vW03.ni0vWIN3 - 3;*/
   /* END;*/
  NI0VM200.NI0VW1ST = NI0VW03.NI0VWIN6;
  ;
   /* MOVE ni0vW03.ni0vWIN4 TO ni0vM200.ni0vW4TH;*/
  NI0VM200.NI0VWRCT = NI0VW03.NI0VWRCT; /* total records*/
  NI0VM200.KULAAID[NI0VWIN4] = VLADDR01.NLAADRID;
  NI0VM200.XXXADDR1[NI0VWIN4] = VLADDR01.XXX-ADDR1;
  NI0VM200.XXXADDR2[NI0VWIN4] = VLADDR01.XXX-ADDR2;
  NI0VM200.XXXADDR3[NI0VWIN4] = VLADDR01.XXX-ADDR3;
  NI0VM200.XXXADDR4[NI0VWIN4] = VLADDR01.XXX-ADDR4;
  NI0VM200.XXXCITY[NI0VWIN4] = VLADDR01.XXX-ADDR5;
  NI0VM200.XSTCD[NI0VWIN4] = VLADDR01.XSTCD;
  NI0VM200.XXXZIP[NI0VWIN4] = VLADDR01.XXXZIP;
  NI0VM200.XCTDESC[NI0VWIN4] = VLADDR01.XCTCD;
  ;
  ;
end // end NI0VS31

// protect fields
Function NI0VS32()
  set NI0VM200.KULAAID[1] skip;
  set NI0VM200.KULAAID[2] skip;
  set NI0VM200.KULAAID[3] skip;
  set NI0VM200.KULAAID[4] skip;
  set NI0VM200.XXXZIP[1] skip;
  set NI0VM200.XXXZIP[2] skip;
  set NI0VM200.XXXZIP[3] skip;
  set NI0VM200.XXXZIP[4] skip;
   /* SET ni0vM200.ni0vW1ST NORMAL;*/
end // end NI0VS32

// handle any special entries
Function NI0VS70()
  if (converseVar.eventKey is enter)
    if (NI0VM200.NLAADRID < 0
     || NI0VM200.NLAADRID > NI0VW03.NI0VWRCT)
      set NI0VM200.NLAADRID cursor, modified, bold;
      converseLib.validationFailed(231);
      NI0VW03.NI0VW1ST = 1;
      NI0VW03.NI0VWBSW = "Y";
    else
      if (NI0VM200.NI0VW1ST < 1
       || NI0VM200.NI0VW1ST > NI0VW03.NI0VWRCT)
        set NI0VM200.NI0VW1ST cursor, modified, bold;
        converseLib.validationFailed(231);
      else
        if (NI0VM200.NLAADRID == 0
         && NI0VM200.NI0VW1ST is modified)
            /* NEXT SENTENCE*/
        else
          NI0VW03.NI0VWBSW = "N";
        end
      end
    end
  else
    if (converseVar.eventKey is pa2)
      COMMAREA.CATOAP = "NI0V";
      XSEXIT();
    else
      NI0VS72(); /* handle cc0mm001 pf key entry*/
    end
  end
  ;
end // end NI0VS70

// handle any pf key entry
Function NI0VS72()
  ;
  if (converseVar.eventKey is pf7)
    NI0VS77();
  end
  if (converseVar.eventKey is pf8)
    NI0VS78();
  end
  ;
  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
     /* next sentence*/
  else
    converseLib.validationFailed(2); /* pfkey not supported*/
    NI0VW03.NI0VWBSW = "Y"; /* build screen switch*/
            /* MOVE 'Y' TO NLXREC.NLXERRF    ; error flag*/
  end
  ;
  ;
end // end NI0VS72

// handle pf7 entry
Function NI0VS77()
  ;
  if (NI0VM200.KULAAID[1] == 1)
    converseLib.validationFailed(29); /* no previous page*/
    NI0VW03.NI0VWBSW = "Y"; /* build screen switch*/
  else
   /* NI0VW03.NI0VWIN3 = NI0VM200.KULAAID(1) - 4;*/
    NI0VW03.NI0VWIN3 = NI0VW01.NI0VW1SU - 4;
    if (NI0VW03.NI0VWIN3 <= 0)
      NI0VW03.NI0VW1ST = 1;
    else
      NI0VW03.NI0VW1ST = NI0VW03.NI0VWIN3;
    end
    NI0VW03.NI0VWBSW = "Y";
  end
end // end NI0VS77

// handle pf8 entry
Function NI0VS78()
  ;
  NI0VW03.NI0VWIN3 = NI0VM200.KULAAID[4] + 1;
  if (NI0VW03.NI0VWIN3 > NI0VW03.NI0VWRCT)
    converseLib.validationFailed(39); /* last record displayed*/
  else
    NI0VW03.NI0VWBSW = "Y";
    NI0VW03.NI0VW1ST = NI0VW03.NI0VWIN3;
  end
  ;
  ;
end // end NI0VS78

// get and store company addr.'s
Function NI0VS90()
  ;
  NI0VW03.NI0VWIN3 = 0;
  ;
  set NI0VW02 empty;
  ;
  NI0VS91(); /* select all addresses for company*/
  ;
  if (converseVar.validationMsgNum == 0)
    NI0VW03.NI0VWASW = "Y";
    while (NI0VW03.NI0VWASW == "Y")
      NI0VS92(); /* build temporary storage*/
    end
    if (NI0VW03.NI0VWIN3 == 0)
      converseLib.validationFailed(145); /* no addresses meet criteria*/
    else
      NI0VW03.NI0VWRCT = NI0VW03.NI0VWIN3;
      NI0VW03.NI0VWIN3 = 1;
    end
  end
  ;
end // end NI0VS90

// build temp storage
Function NI0VS91()
  ;
  VLADDR01.NLATYPIN = "C";
  VLADDR01.NLABSIND = " ";
  VLADDR01.NLAONECH = " ";
  VLADDR01.NLAINTGR = NI0VW01.NI0VWKUC;
  VLADDR01.NLASINT1 = 0;
  VLADDR01.NLASINT2 = 0;
  VLADDR01.NLAADRID = -1;
  ;
  ;
  call "IO4410" ("S1", SQLCA, VLADDR01) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    call "IO4410" ("N1", SQLCA, VLADDR01) {isNoRefresh = yes, isExternal = yes}; /* get the 1st record*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if a good return (rec was found)*/
      return; /* go back to ni0vbld*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* if no records were selected*/
        call "IO4410" ("C1", SQLCA, VLADDR01) {isNoRefresh = yes, isExternal = yes};
        converseLib.validationFailed(145); /* no records for company msg*/
        return;
      else
        TA1REC.TA1DBASE = "DNILO";
        TA1REC.TA1TBLVU = "VLADDR01";
        TA1REC.TA1PGMNM = "NI0VS91";
        TA1REC.TA1LOC = "SELECT NEXT";
        NI0VW03.NI0VWCID = VLADDR01.NLAINTGR;
        TA1REC.TA1TBLKE = NI0VW03.NI0VWCID;
        XSSM003(); /* abort routine*/
      end
    end
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VLADDR01";
    TA1REC.TA1PGMNM = "NI0VS91";
    TA1REC.TA1LOC = "SELECT SET";
    NI0VW03.NI0VWCID = VLADDR01.NLAINTGR;
    TA1REC.TA1TBLKE = NI0VW03.NI0VWCID;
    XSSM003(); /* abort routine*/
  end
end // end NI0VS91

// move addresses to temp storage
Function NI0VS92()
  ;
   /* MOVE 'N' TO ni0vw03.ni0vWMST;      /* reset the record-move switch*/
  ;
   /* IF ni0vW03.ni0vWMST = 'Y';*/
  NI0VW03.NI0VWIN3 = NI0VW03.NI0VWIN3 + 1;
  VLADDR01.NLAINTGR = NI0VW01.NI0VWKUC;
  NI0VW02.NLAINTGR[NI0VWIN3] = VLADDR01.NLAINTGR;
  NI0VW02.NLAADRID[NI0VWIN3] = VLADDR01.NLAADRID;
   /* END;*/
  ;
  call "IO4410" ("N1", SQLCA, VLADDR01) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    return; /* go move this record to temp storage*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if no records were selected*/
      NI0VW03.NI0VWRCT = NI0VW03.NI0VWIN3; /* set the number of recs*/
      NI0VW03.NI0VWASW = "N";
      call "IO4410" ("C1", SQLCA, VLADDR01) {isNoRefresh = yes, isExternal = yes};
      return;
    else
      TA1REC.TA1DBASE = "DNILO";
      TA1REC.TA1TBLVU = "VLADDR01";
      TA1REC.TA1PGMNM = "NI0VS92";
      TA1REC.TA1LOC = "SELECT NEXT";
      NI0VW03.NI0VWCID = VLADDR01.NLAINTGR;
      TA1REC.TA1TBLKE = NI0VW03.NI0VWCID;
      XSSM003(); /* abort routine*/
    end
  end
end // end NI0VS92

//*** RECORD=NI0VW01 ****
// this is the main working storage record for ni0h.
// rdhanu 3/8/99   CHANGED NI0NWCHR AND NI0NWNBR FROM 2 TO 4
// ***********************
Record NI0VW01 type basicRecord
  10 NI0VWKUC NI0VWKUC ; 
  10 OP1CUOID OP1CUOID ; 
  10 NI0VWUPF NI0VWUPF ; 
  10 NI0VWOVR NI0VWOVR ; 
  10 NI0VWIER NI0VWIER ; 
  10 NLAADRID NLAADRID [2] ; 
  10 NI0VWBA1 NI0VWBA1 ; 
  10 NI0VWBA2 NI0VWBA2 ; 
  10 NI0VWBA3 NI0VWBA3 ; 
  10 NI0VWBA4 NI0VWBA4 ; 
  10 NI0VWBA5 NI0VWBA5 ; 
  10 NI0VWBA6 NI0VWBA6 ; 
  10 NI0VWSA1 NI0VWSA1 ; 
  10 NI0VWSA2 NI0VWSA2 ; 
  10 NI0VWSA3 NI0VWSA3 ; 
  10 NI0VWSA4 NI0VWSA4 ; 
  10 NI0VWSA5 NI0VWSA5 ; 
  10 NI0VWSA6 NI0VWSA6 ; 
  10 NI0VWAKE NI0VWAKE ; 
    15 NI0VWTYP NI0VWTYP ; 
    15 NI0VWBS NI0VWBS ; 
    15 NI0VWCHA NI0VWCHA ; 
    15 NI0VWINT NI0VWINT ; 
    15 NI0VWIN1 NI0VWIN1 ; 
    15 NI0VWIN2 NI0VWIN2 ; 
    15 NI0VWADI NI0VWADI ; 
  10 NI0VWBTA NI0VWBTA ; 
  10 NI0VW1SU NI0VW1SU ; 
  10 NI0VWSTA NI0VWSTA ; 
  10 NI0VWPFB NI0VWPFB ; 
  10 NI0VWOKE NI0VWOKE ; 
    15 NI0VWSID NI0VWSID ; 
    15 NI0VWOID NI0VWOID ; 
    15 NI0VWNID NI0VWNID ; 
  10 XPTLCFL XPTLCFL ; 
  10 NI0VWR1 NI0VWR1 ; 
  10 NI0VWR2 NI0VWR2 ; 
  10 NI0VWH1 NI0VWH1 ; 
  10 NI0VWH2 NI0VWH2 ; 
  10 NI0VWCHR NI0VWCHR ; 
    15 NI0VWNBR NI0VWNBR ; 
  10 NI0VWMSA NI0VWMSA ; 
end // end NI0VW01

//*** RECORD=NI0VW02 ****
// this record describes the layout of the db2 address table
// record.
// ***********************
Record NI0VW02 type basicRecord
  10 NLAADRID NLAADRID [2000] ; 
  10 NLAINTGR NLAINTGR [2000] ; 
end // end NI0VW02

Record NI0VW03 type basicRecord
  5 NI0VWGRP NI0VWGRP ; 
    10 NI0VWSGP NI0VWSGP ; 
    10 CAMSG CAMSG ; 
    10 NI0VWFNO NI0VWFNO ; 
    10 NI0VWBSW NI0VWBSW ; 
    10 NI0VWIN3 NI0VWIN3 ; 
    10 NI0VWIN4 NI0VWIN4 ; 
    10 NI0VWIN5 NI0VWIN5 ; 
    10 NI0VWIN6 NI0VWIN6 ; 
    10 NI0VWASW NI0VWASW ; 
    10 KULAAID KULAAID ; 
    10 XXXZIP XXXZIP ; 
    10 NI0VWZIP NI0VWZIP ; 
      15 NI0VWZLT NI0VWZLT [10] ; 
    10 KUCCOID KUCCOID ; 
    10 NI0VWCID NI0VWCID ; 
      15 NI0VWCLT NI0VWCLT [7] ; 
    10 NI0VWAID NI0VWAID ; 
      15 NI0VWALT NI0VWALT [4] ; 
    10 KUCCONM KUCCONM ; 
    10 NI0VWRCT NI0VWRCT ; 
    10 CATOAP CATOAP ; 
    10 NI0VW1ST NI0VW1ST ; 
    10 NI0VW4TH NI0VW4TH ; 
    10 NI0VWMSW NI0VWMSW ; 
end // end NI0VW03

// number of 1st addr on scrn
DataItem NI0VW1ST char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-addr-id1 (bill-to)
DataItem NI0VW1SU int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// number of 4th addr on scrn
DataItem NI0VW4TH char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-addr-id
DataItem NI0VWADI num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage number
DataItem NI0VWAID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// laddr display key
DataItem NI0VWAKE char(29)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// individual numbers
DataItem NI0VWALT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// address switch
DataItem NI0VWASW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-addr1 bill-to
DataItem NI0VWBA1 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-addr2
DataItem NI0VWBA2 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-addr3
DataItem NI0VWBA3 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-addr4
DataItem NI0VWBA4 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-addr5
DataItem NI0VWBA5 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-addr6
DataItem NI0VWBA6 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-bill-shp-ind
DataItem NI0VWBS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// build screen switch
DataItem NI0VWBSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-addr-id1 (bill-to)
DataItem NI0VWBTA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// nl-addr-one-char
DataItem NI0VWCHA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage number
DataItem NI0VWCID num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// individual numbers
DataItem NI0VWCLT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of fields
DataItem NI0VWFNO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// credit working storage
DataItem NI0VWGRP char(192)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold orig nlaadrid
DataItem NI0VWH1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// hold orig nlaadrid
DataItem NI0VWH2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// init error flag
DataItem NI0VWIER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-addr-sinteger1
DataItem NI0VWIN1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nl-addr-sinteger2
DataItem NI0VWIN2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem NI0VWIN3 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem NI0VWIN4 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem NI0VWIN5 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem NI0VWIN6 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nl-addr-integer
DataItem NI0VWINT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// company id
DataItem NI0VWKUC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// hold orig nlaadrid
DataItem NI0VWMSA char(15)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// move-record-to-strg switch
DataItem NI0VWMSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display op-nike-ord-id
DataItem NI0VWNID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display op-cust-ord-id
DataItem NI0VWOID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// niorec display table
DataItem NI0VWOKE char(22)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// bill/ship override flag
DataItem NI0VWOVR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// bill-to protected flag
DataItem NI0VWPFB char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// build cust addr screen switch
DataItem NI0VWR1 char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// build cust addr screen switch
DataItem NI0VWR2 char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// num of recs in temp strg
DataItem NI0VWRCT num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// nl-addr1 ship-to
DataItem NI0VWSA1 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-addr2
DataItem NI0VWSA2 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-addr3
DataItem NI0VWSA3 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-addr4
DataItem NI0VWSA4 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-addr5
DataItem NI0VWSA5 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-addr6
DataItem NI0VWSA6 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// statement group name
DataItem NI0VWSGP char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display TS_NIKE_SHP_ID
DataItem NI0VWSID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nl-addr-id2 (ship-to)
DataItem NI0VWSTA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// nl-addr-sys-ind
DataItem NI0VWTYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// inv req update flag
DataItem NI0VWUPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NI0VWZIP char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// individual zip-code letters
DataItem NI0VWZLT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

