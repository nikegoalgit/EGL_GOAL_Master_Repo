package ni0u;

import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPNL002;
import corpcom3.XPNL004;
import corpcom3.XPNL005;
import corpcom3.XPXLA01;
import corpcom3.XPXX001;
import corpcom3.XPZCH01;
import corpcom3.XPZPR01;
import corpcom4.XSENTRY;
import corpcom4.XSNLS01;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XCTTBL;
import corpx1.XGPCD;
import corpx1.XLATBL;
import corpx1.XLBCD;
import corpx1.XPTTBL;
import corpx2.XOBCD;
import corpx2.XOCCD;
import corpx2.XOSCD;
import corpx2.XXXUSRID;
import corpz3.ZCHCD;
import corpz3.ZCHTBL;
import corpz3.ZPRTBL;
import corpz3.ZZZCHGCT;
import ku.common.KUCREC;
import ku.common.KUMSTRID;
import nc.common.NCWREC;
import ni.common.NIGUSAMT;
import ni.common.NIWREC;
import nl.common.*;
import op.common.OP1CUPO;
import op.common.OP1PARTN;
import op.common.OP1REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ts.common.TSVPLNBR;
import ts.common.TSVREC;
import ts.common.TSZREC;
import vv.common.VDSTRB01;
import vv.common.VPRHDR01;
import vv.common.VPRORD01;
import vv.common.VPRTXT01;
import vv.common.VPRZIT01;
import vv.common.VZCHGL01;
//*** PROGRAM=NI0U ****
// ************************************************************
// 
//         NI0U - NIL PROFORMA REQUEST MAINTENANCE
//         ---------------------------------------
// 
// General program explanation and notes:
// 
// The purpose of this application is to allow the user to
// maintain a proforma.  They will be allowed to add orders,
// delete orders, delete the entire proforma, and change the
// miscellaneous charges, remit to and userid.
// The application will be used to print both draft and final
// proformas.
// ------------------------------------------------------------
// Maintenance History:
// --------------------
//   Date   Who    Remarks
// -------- ------ --------------------------------------------
// 05-09-91 SAZARE Set Up
// 08-01-91 JSHANN ADD EDIT FOR FINAL SUBMIT FOR ORDER TYPE F1
//                 ORD CLASS NI AND GPC 03 TO LOOK FOR PO S
// 12-09-91 JSHANN ADD EDIT to prevent final submit before
//                 a draft has been printed.
// 12-18-91 JJUDKI Avoid abend, and prevent printing when order
//                not found for a proforma.
// 01-02-92 JJUDKI Put proforma status on map100 header.
// 01-22-92 JSHANN Added PF10 L/C terms update.
// 02-07-92 jjudki Task#491. Changes for distributor table.
// 05-27-92 jjudki Add Africa Acct Region: ni0u120.
// 10-14-92 jjudki OCT DB CHGS.
// 11-18-92 jjudki Remove zfctbl from table list.
// 11-09-93 jjudki NOV DB CHANGES.
// 04-14-94 ahowar apr DB CHANGES.
// 02-21-1998 TTHAN1 Y2KFIX - REGEN TO PICK UP NEW XX0XS01 CODE
// *********************
Program NI0U type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "NL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  NCWREC NCWREC; // record
  NI0UW01 NI0UW01; // record
  NIWREC NIWREC; // record
  NLXREC NLXREC; // record
  OP1REC OP1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TSVREC TSVREC; // record
  TSZREC TSZREC; // record
  VDSTRB01 VDSTRB01; // record
  VPRHDR01 VPRHDR01; // record
  VPRORD01 VPRORD01; // record
  VPRTXT01 VPRTXT01; // record
  VPRZIT01 VPRZIT01; // record
  VZCHGL01 VZCHGL01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCTTBL {deleteAfterUse = yes}; // table
  use XLATBL {deleteAfterUse = yes}; // table
  use ZCHTBL {deleteAfterUse = yes}; // table
  use ZPRTBL {deleteAfterUse = yes}; // table
  use XPTTBL {deleteAfterUse = yes}; // table
  use NI0UM.NI0UM100, // form
  		NI0UM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    NI0U000: NI0U000();
    exit program;
  end // end main
end // end NI0U

// Main flow
Function NI0U000()
   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   perform initialization, set application revision nbrs,**/
   /* *   then do main perform until done with application      **/
   /* *                                                         **/
   /* ************************************************************/

  NLXREC.NLXCPROC = "NI0U000";

  NI0U001(); /* initialize the application*/

  NLXREC.NLXEOAF = "N"; /* set end-of-application flag to 'no'*/

  while (NLXREC.NLXEOAF == "N") /* while not end-of-aplication*/
    NI0U050(); /* process the application screen(s)*/
  end

  exit program;
end // end NI0U000

// Initialize Application
Function NI0U001()
   /* -----------------------------------------------------------*/
         /* Initialize the application working storage*/

   /* -----------------------------------------------------------*/

  NLXREC.NLXCPROC = "NI0U001";

  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen*/
                                   /* converse*/
  VGVar.handleHardIOErrors = 1; /* return control to program if hard db2*/
                                   /* error*/


  XSENTRY(); /* check entry thru main menu*/
  XSSEGTR(); /* set segmented transaction id*/

  set SQLCA empty; /* clear out the "common" working*/
                                   /* storage*/
  set ERRSQLCA empty; /* clear out the "common" working*/
                                   /* storage*/
  set TA1REC empty; /* clear out the "common" working*/
                                   /* storage*/
  set NLXREC empty; /* clear out the "common" working*/
                                   /* storage*/
  set NIWREC empty; /* clear out the "common" working*/
                                   /* storage*/
  set NI0UW01 empty; /* clear out NI0U's working storage*/
  NI0UW01.NI0UWDEL = "N"; /* init delete confirm flag*/
  NI0UW01.NI0UWUPD = "N"; /* init updated proforma header flag*/
  NLXREC.NLXBLDSC = "Y"; /* set build screen flag to 'yes'*/

  NI0USS1(); /* Security for NI0U*/

  XX0XS01(); /* Format date and time for adds (zz's)*/

   /* ------------------------------------------------------*/
    /* Set up working-storage array of screen names*/
   /* ------------------------------------------------------*/

  NLXREC.NLXCSCRN = "NI0UM100"; /* first header*/

  NLXREC.NLXSNAME[1] = "NI0UM100";
                                   /* init screens used in this applic.*/

   /* *******************/
   /* Check passed data*/
   /* *******************/

  if (COMMAREA.CAFROMAP == "NI0P" /* Returning from 'Print'?*/
   || COMMAREA.CAFROMAP == "NI0S") /* Returning from 'NI0S'?*/
    NIWREC.NIWGROUP = COMMAREA.CAUSERA;
    COMMAREA.CAUSERA = " ";
    if (NIWREC.NIQPROID != 0)
      if (NIWREC.NIWMSGNR == 0) /* Without error message*/
           /* **** Build and display print submitted message *****/
        NI0UW01.NI0UWPPF = "PROFORMA";
        NI0UW01.NI0UWPPR = NIWREC.NIQPROID;
        NI0UW01.NI0UWPSF = " HAS BEEN SUBMITTED TO PRINT";
      else
        if (NIWREC.NIWMSGNR == 9999)
          converseLib.validationFailed();
        else
          converseLib.validationFailed(NIWREC.NIWMSGNR);
        end /* Display passed error msg*/
      end
      return;
    end
  end

  if (COMMAREA.CAITEM <= " ") /* If no proforma number passed*/
    if (COMMAREA.CAFROMAP == "NI0T" /* If from prof maint selection*/
     || COMMAREA.CAFROMAP == "NI0U" /* or from proforma maintenance*/
     || COMMAREA.CAFROMAP == "NI0V" /* or from address override*/
     || COMMAREA.CAFROMAP == "NI0W" /* or from comments*/
     || COMMAREA.CAFROMAP == "NI0X") /* or from inco terms*/
      NIWREC.NIWGROUP = COMMAREA.CAUSERA;
      COMMAREA.CAUSERA = " ";
    else /* Fast path entry-no proforma*/
      if (COMMAREA.CAFROMAP == "NC0C") /* from proforma lc text maint.*/
        NI0US-LC-MAINT-TST(); /* determine how you got here from nc0c*/
      else
        NIWREC.NIWMSGNR = 0;
        COMMAREA.CAUSERA = NIWREC.NIWGROUP;
        COMMAREA.CATOAP = "NI0T"; /* Go to selection screen*/
        XPNL002();
      end
    end
  else /* Fast path entry WITH proforma*/
    COMMAREA.CAUSERA = " "; /* NIWREC will be built again*/
    XPNL004(); /* Validate caitem numeric*/
    if (NLXREC.NLXERRF == "Y") /* If error in 'item'*/
      COMMAREA.CAITEM = " ";
      NIWREC.NIWMSGNR = 199; /* Invalid proforma# - reenter*/
      COMMAREA.CAUSERA = NIWREC.NIWGROUP;
      COMMAREA.CATOAP = "NI0T"; /* Xfer to sel screen*/
      XPNL002();
    else
      VPRHDR01.NIQPROID = NLXREC.NLXNUM8A; /* Build key*/
      NI0USIH(); /* Select unique - NIQREC*/
      if (SQLCA.VAGen_SQLCODE == 0) /* Proforma valid!*/
        NIWREC.NIQPROID = VPRHDR01.NIQPROID; /* Proforma# to w/s*/
        NIWREC.KUCCOID = VPRHDR01.KUCCOID; /* Customer# to w/s*/
        COMMAREA.CAITEM = " ";
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          NIWREC.NIWMSGNR = 200; /* Proforma# not found*/
        else
          NIWREC.NIWMSGNR = converseVar.validationMsgNum; /* Database lock occurred*/
        end
        COMMAREA.CAUSERA = NIWREC.NIWGROUP;
        COMMAREA.CATOAP = "NI0T"; /* Xfer to sel screen*/
        XPNL002();
      end
    end
  end
end // end NI0U001

// Decide which map to display
Function NI0U050()
   /* ************************************************************/
   /* *   control process the application screen(s)             **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/

  NLXREC.NLXCPROC = "NI0U050"; /* set current process name*/


  sysVar.arrayIndex = 0;
  NLXREC.NLXSCRNX = 0;

  if (NLXREC.NLXCSCRN in NLXREC.NLXSNAME) /* if current-screen-name is*/
    NLXREC.NLXSCRNX = sysVar.arrayIndex; /* in the screen-array, then set*/
  end /* the screen-index*/

  set TA1REC empty;
  TA1REC.TA1MAP = NLXREC.NLXCSCRN; /* prepare for abend*/

  NLXREC.NLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
  NLXREC.NLXERRF = "N"; /* clear error flag*/
  NI0UW01.NI0UWPAG = "Y"; /* set flag to ind array page load*/
  NI0UW01.NI0UWLCK = "N"; /* init data base lock flag*/


  if (NLXREC.NLXSCRNX == 1) /* if screen xx0xm100*/
    NI0USLO(); /* load orders array*/
    if (SQLCA.VAGen_SQLCODE == -911) /* If data base lock occurred*/
      NI0UW01.NI0UWLCK = "Y"; /* indicate so*/
    end
    while (NLXREC.NLXEOSF == "N") /* show until user is done*/
      NI0U100();
    end
  else
    TA1REC.TA1MAP = NLXREC.NLXCSCRN;
    TA1REC.TA1TBLKE = "UNKNOWN SCREEN NAME";
    TA1REC.TA1LOCAT[2] = NLXREC.NLXCSCRN;
    XPNL005(); /* abend*/
  end


   /* at this point;*/
       /* if the end-of-application flag (NLXeoaf ) = 'n'*/
         /* the perform will return to the top of nl0%050...*/
       /* else*/
         /* the perform will auto return to nl0%000.*/

end // end NI0U050

// Converse map M100
Function NI0U100()
   /* ************************************************************/
   /* *    process screen NI0UM100                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from NI0U050 until the end-of-screen   **/
   /* *     flag (NLXEOSFL) is set to 'y'.                      **/
   /* *                                                         **/
   /* ************************************************************/

  NLXREC.NLXCPROC = "NI0U100";

  if (NLXREC.NLXBLDSC == "Y") /* Build screen?*/
    NI0U101(); /* Load map fields*/
    if (SQLCA.VAGen_SQLCODE == -911) /* If data base lock occurred*/
      NI0UW01.NI0UWLCK = "Y"; /* Indicate so*/
    else /* Else*/
      NLXREC.NLXBLDSC = "N"; /* Don't rebuild screen anymore*/
    end
  end

  if (NI0UW01.NI0UWPAG == "Y") /* Load a page of the order array?*/
    NI0U102(); /* Load map order lines*/
    NI0UW01.NI0UWPAG = "N";
  end

  if (NI0UW01.NI0UWINQ == "Y" /* If user is inquiry only, protect map*/
   || NI0UW01.NI0UWLCK == "Y")
                                   /* or data base lock occurred, protect:*/
    set NI0UM100.ZCHCD[1] skip; /* Misc charge code*/
    set NI0UM100.ZCHCD[2] skip; /* Misc charge code*/
    set NI0UM100.ZCHCD[3] skip; /* Misc charge code*/
    set NI0UM100.NIGUSAMT[1] skip; /* US $ amount*/
    set NI0UM100.NIGUSAMT[2] skip; /* US $ amount*/
    set NI0UM100.NIGUSAMT[3] skip; /* US $ amount*/
    set NI0UM100.XLBCD skip; /* Remit to code*/
    set NI0UM100.XXXUSRID skip; /* User id code*/
    NI0UW01.NI0UWW1X = 0; /* Protect map order lines*/
    while (NI0UW01.NI0UWW1X < 10)
      NI0UW01.NI0UWW1X = NI0UW01.NI0UWW1X + 1;
      set NI0UM100.NI0UMSEL[NI0UWW1X] skip; /* Select code*/
      set NI0UM100.OP1CUOID[NI0UWW1X] skip; /* Order number*/
      set NI0UM100.OP1NORID[NI0UWW1X] skip;
    end
    set NI0UM100.CATOAP cursor; /* Set cursor on option*/
  end

  if (NI0UM100.VAGen_EZEMSG == " ")
    NI0UM100.VAGen_EZEMSG = NI0UW01.NI0UWOMS;
                                   /* If no msg, dspl order count*/
  end
   /* ***********************************************************/
  converse NI0UM100 ;
   /* ***********************************************************/

  NI0UM100.VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";
  set NI0UM100.CATOAP normal;
  set NI0UM100.CAITEM normal;

  if (converseVar.eventKey not pf5 /* Reset delete confirm flag is pf5*/
   /* wasn't pressed*/
   || NI0UM100 is modified)        /* or if map was modified in any way*/
    NI0UW01.NI0UWDEL = "N";
  end

  NI0U110(); /* Check attention identifier*/

  if (NI0UW01.NI0UWLCK == "Y" /* If data base lock occurred*/
   && NLXREC.NLXERRF == "N")  /* and no errors*/
    NLXREC.NLXEOSF = "Y"; /* Try to build screen again*/
    return;
  end

  if (NLXREC.NLXERRF == "N"   /* If no errors*/
   && NI0UW01.NI0UWINQ == "N" /* and user is not inquiry only*/
   && NI0UW01.NI0UWDEL == "N") /* and not confirming delete*/
    NI0U120(); /* Edit entered option*/
  end

  if (NLXREC.NLXERRF == "N") /* If no errors*/
    NI0U130(); /* Determine next action...*/
  end

end // end NI0U100

// Load fields for map NI0UM100
Function NI0U101()
  NLXREC.NLXCPROC = "NI0U101";

  converseLib.clearScreen();
  set NI0UM100 initial;
  if (NI0UW01.NI0UWPPF != " ") /* if print submitted msg exists*/
    NI0UM100.VAGen_EZEMSG = NI0UW01.NI0UWPMS; /* move to screen*/
    NI0UW01.NI0UWPMS = " ";
  end

   /* ***************************/
   /* Load generic header fields*/
   /* ***************************/

  NI0UM100.XXXPRCNM = "NI0U100";
  NI0UM100.XXXMAPNM = "NI0UM100";
  NI0UM100.XXXRVNBR = "00"; /* revision nbr*/
  NI0UM100.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/

   /* **************************************************/
   /* Load customer header fields with passed cust info*/
   /* **************************************************/

  NI0UM100.KUCCOID = NIWREC.KUCCOID; /* Cust id*/
  NI0UM100.NIQPROID = NIWREC.NIQPROID; /* Proforma id*/

  if (NIWREC.KUCCONM == " ") /* If needed, obtain cust name and ctry*/
                                   /* desc*/
    KUCREC.KUCCOID = NIWREC.KUCCOID; /* Build key*/
    NI0USIC(); /* Inquire KUCREC (customer)*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If good return*/
      NIWREC.KUCCONM = KUCREC.KUCCONM; /* Cust name to w/s*/
      if (KUCREC.XCTCD in XCTTBL.XCTCD)
        NIWREC.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
      end
                                   /* Ctry nm->w/s*/
    else /* (data base lock)*/
      return;
    end
  end
  VDSTRB01.KUCCOID = NIWREC.KUCCOID; /* Build key*/
  NI0USID(); /* Inquire vdstrb01 (distributor)*/

  NI0UM100.KUCCONM = NIWREC.KUCCONM; /* Cust name to map*/
  NI0UM100.XCTDESC = NIWREC.XCTDESC; /* Country name to map*/

   /* ************************************************/
   /* Load proforma header fields on bottom of screen*/
   /* ************************************************/

  VPRHDR01.NIQPROID = NIWREC.NIQPROID; /* Build key*/
  NI0USIH();
  if (SQLCA.VAGen_SQLCODE == 0) /* If good return, move fields to map*/
    NI0UM100.XLBCD = VPRHDR01.XLBCD; /* Remit to cd and desc*/
    if (VPRHDR01.XLBCD in XLATBL.XLBCD)
      NI0UM100.XXXADDR1 = XLATBL.XXX-ADDR1[sysVar.arrayIndex];
    end
    NI0UM100.XXXUSRID = VPRHDR01.XXXUSRID; /* User id code and name*/
    if (VPRHDR01.XXXUSRID in ZPRTBL.XXXUSRID)
      NI0UM100.XXXUNTXT = ZPRTBL.XXXUNTXT[sysVar.arrayIndex];
    end
    NI0UM100.ZCHCD[1] = VPRHDR01.ZCHCD[1]; /* Misc charge codes/descs*/
    if (VPRHDR01.ZCHCD[1] in ZCHTBL.ZCHCD)
      NI0UM100.ZCHDESC[1] = ZCHTBL.ZCHDESC[sysVar.arrayIndex];
    end
    NI0UM100.ZCHCD[2] = VPRHDR01.ZCHCD[2];
    if (VPRHDR01.ZCHCD[2] in ZCHTBL.ZCHCD)
      NI0UM100.ZCHDESC[2] = ZCHTBL.ZCHDESC[sysVar.arrayIndex];
    end
    NI0UM100.ZCHCD[3] = VPRHDR01.ZCHCD[3];
    if (VPRHDR01.ZCHCD[3] in ZCHTBL.ZCHCD)
      NI0UM100.ZCHDESC[3] = ZCHTBL.ZCHDESC[sysVar.arrayIndex];
    end
    NI0UM100.NIGUSAMT[1] = VPRHDR01.NIGUSAMT[1]; /* Adj amounts*/
    NI0UM100.NIGUSAMT[2] = VPRHDR01.NIGUSAMT[2];
    NI0UM100.NIGUSAMT[3] = VPRHDR01.NIGUSAMT[3];
    NI0UM100.NIQPRORS = VPRHDR01.NIQPRORS; /* proforma status*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* If header not found*/
      NIWREC.NIWMSGNR = 211; /* Prof was deleted by other sesn*/
      COMMAREA.CAUSERA = NIWREC.NIWGROUP;
      COMMAREA.CATOAP = "NI0T"; /* Xfer to sel screen*/
      XPNL002();
    else /* Hard error*/
      TA1REC.TA1LOCAT[2] = "S      "; /* Database action*/
      TA1REC.TA1LOCAT[3] = "IO5800 "; /* IO module*/
      TA1REC.TA1DBASE = "DNILO"; /* Database*/
      TA1REC.TA1TBLVU = "VPRHDR01"; /* Table view*/
      XPNL005(); /* Abend routine*/
    end
  end
end // end NI0U101

// Load scrn of orders from array
Function NI0U102()

  NLXREC.NLXCPROC = "NI0U102";

  NI0UW01.NI0UWSCX = 0; /* Init screen index*/

  while (NI0UW01.NI0UWSCX < 10 /* Do until 10 screen lines are filled*/
   && NI0UW01.NI0UWARX <= NI0UW01.NI0UWACT) /* or no more array records*/
    NI0UW01.NI0UWSCX = NI0UW01.NI0UWSCX + 1; /* Accum screen index*/
    set NI0UM100.NI0UMSEL[NI0UWSCX] initialAttributes; /* Unprotect select cd*/
    set NI0UM100.OP1CUOID[NI0UWSCX] skip; /* Protect cust order*/
    set NI0UM100.OP1NORID[NI0UWSCX] skip; /* Protect nike order*/
    set NI0UM100.KUMSTRID[NI0UWSCX] initialAttributes; /* Store at normal intensity*/
    NI0UM100.NI0UMSEL[NI0UWSCX] = NI0UW01.NI0UWSEL[NI0UWARX]; /* Sel*/
    NI0UM100.OP1CUOID[NI0UWSCX] = NI0UW01.NI0UWCOR[NI0UWARX];
                                   /* Cu Or*/
    NI0UM100.OP1NORID[NI0UWSCX] = NI0UW01.NI0UWNOR[NI0UWARX];
                                   /* Nk Or*/
    NI0UM100.XGPCD[NI0UWSCX] = NI0UW01.XGPCD[NI0UWARX]; /* GPC*/
    NI0UM100.XOBCD[NI0UWSCX] = NI0UW01.XOBCD[NI0UWARX]; /* Type*/
    NI0UM100.OP1CUNDT[NI0UWSCX] = NI0UW01.NI0UWNDT[NI0UWARX];
                                   /* Nd dt*/
    NI0UM100.XOSCD[NI0UWSCX] = NI0UW01.XOSCD[NI0UWARX]; /* Stat*/
    NI0UM100.KUMSTRID[NI0UWSCX] = NI0UW01.KUMSTRID[NI0UWARX];
                                   /* Store*/
    NI0UM100.OP1CUPO[NI0UWSCX] = NI0UW01.OP1CUPO[NI0UWARX]; /* PO#*/
    /* order for proforma not found*/
    if (NI0UW01.NI0UWCOR[NI0UWARX] > 0 /* Cu Or*/
     && NI0UW01.XGPCD[NI0UWARX] == "  ") /* GPC*/
      set NI0UM100.OP1CUOID[NI0UWSCX] bold, skip;
      set NI0UM100.OP1NORID[NI0UWSCX] bold, skip;
      set NI0UM100.NI0UMSEL[NI0UWSCX] cursor;
      converseLib.validationFailed(244); /* this order has been purged*/
    end
    /*  */
    NI0UW01.NI0UWARX = NI0UW01.NI0UWARX + 1; /* Accum array index*/
  end

  if (NI0UW01.NI0UWARX > NI0UW01.NI0UWACT) /* No more order array recs*/
    NI0UW01.NI0UWW1X = NI0UW01.NI0UWSCX; /* Work idx = screen idx*/
    if (NI0UW01.NI0UWSCX == 0) /* If 1st line will be enterable*/
      set NI0UM100.OP1CUOID[1] cursor; /* cursor on blank order*/
    end
    while (NI0UW01.NI0UWW1X < 10) /* Do for remaining lines*/
      NI0UW01.NI0UWW1X = NI0UW01.NI0UWW1X + 1; /* Accum work index*/
      set NI0UM100.NI0UMSEL[NI0UWW1X] skip; /* Protect select field*/
      set NI0UM100.OP1CUOID[NI0UWW1X] initialAttributes; /* Unprotect cust order*/
      set NI0UM100.OP1NORID[NI0UWW1X] initialAttributes; /* Unprotect nike order*/
      set NI0UM100.KUMSTRID[NI0UWW1X] skip, invisible; /* Store not displayed*/
      NI0UM100.NI0UMSEL[NI0UWW1X] = " "; /* Select cd*/
      NI0UM100.OP1CUOID[NI0UWW1X] = NI0UW01.NI0UWNCO[NI0UWW1X];
      NI0UM100.OP1NORID[NI0UWW1X] = NI0UW01.NI0UWNNO[NI0UWW1X];
      NI0UM100.XGPCD[NI0UWW1X] = " "; /* GPC cd*/
      NI0UM100.XOBCD[NI0UWW1X] = " "; /* Type*/
      NI0UM100.OP1CUNDT[NI0UWW1X] = " "; /* Need dt*/
      NI0UM100.XOSCD[NI0UWW1X] = " "; /* Status*/
      NI0UM100.OP1CUPO[NI0UWW1X] = " "; /* PO#*/
    end
  end

   /* set array index to point to topmost record on screen*/
  NI0UW01.NI0UWARX = NI0UW01.NI0UWARX - NI0UW01.NI0UWSCX;
end // end NI0U102

// Edit PFkeys
Function NI0U110()

  NLXREC.NLXCPROC = "NI0U110";

   /* *************************/
   /* Check for fastpath data*/
   /* *************************/
  if (NI0UM100.CATOAP != " " /* if any fastpath data entered*/
   && converseVar.eventKey is enter)
    COMMAREA.CATOAP = NI0UM100.CATOAP;
    COMMAREA.CAITEM = NI0UM100.CAITEM;
    NIWREC.NIWMSGNR = 0;
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002();
    set NI0UM100.CATOAP cursor, bold;
    return;
  end
   /* ***************************************/
   /* Check for valid program function keys*/
   /* ***************************************/

  if (converseVar.eventKey is pf1)
    XSNLS01();
  else
    if (converseVar.eventKey is pf3)
      COMMAREA.CAUSERA = NIWREC.NIWGROUP;
      if (NIWREC.NIWADDFL == "Y") /* If in proforma add mode*/
        COMMAREA.CATOAP = "NI0S"; /* Go to proforma add*/
      else /* Else*/
        COMMAREA.CATOAP = "NI0T"; /* Go to prof maint select*/
      end
      XPNL002();
      return;
    else
      if (converseVar.eventKey is pf4)
        XSPF4(); /* Go to GOAL main menu*/
      else
        if (converseVar.eventKey is pf20)
          COMMAREA.CAUSERA = " ";
          COMMAREA.CATOAP = "NL0A"; /* Go to NIL main menu*/
          XPNL002();
          return;
        else
          if (NI0UW01.NI0UWLCK == "Y"
           && converseVar.eventKey not enter)
            converseLib.validationFailed(206); /* Press enter to retry access of data base*/
            NLXREC.NLXERRF = "Y";
          end
          if (NI0UW01.NI0UWUPD == "Y") /* If prof was updated by other sesn*/
            converseLib.validationFailed(155); /* Database updated since last display*/
            NLXREC.NLXERRF = "Y";
          end
          if (converseVar.eventKey is enter
           || converseVar.eventKey is pf5
           || converseVar.eventKey is pf6
           || converseVar.eventKey is pf7
           || converseVar.eventKey is pf8
           || converseVar.eventKey is pf9
           || converseVar.eventKey is pf12
           || converseVar.eventKey is pf13)
             /* next sentence*/
          else
            if (converseVar.eventKey is pf10) /* test pf10 to see if there is an lc*/
              NI0US-TEST-PF10();
            else
              if (converseVar.eventKey is pa1
               || converseVar.eventKey is pa2
               || converseVar.eventKey is pa3)
                converseLib.clearScreen();
                
                converseLib.validationFailed(36); /* caused loss of keyed data-rekey chgs*/
                NLXREC.NLXERRF = "Y";
              else
                COMMAREA.CATOAP = " ";
                converseLib.validationFailed(2); /* Invalid function key*/
                NLXREC.NLXERRF = "Y";
              end
            end
          end
        end
      end
    end
  end
end // end NI0U110

// Edit NI0UM100 fields
Function NI0U120()

  NLXREC.NLXCPROC = "NI0U120";

  NI0UW01.NI0UWPUW = "N"; /* Set 'pop-up window' flag off*/

   /* *********************************************************/
   /* Clear any previous error indication on enterable fields*/
   /* *********************************************************/

  if (NI0UW01.NI0UWSCX > 0) /* If 1st line is a display line*/
    set NI0UM100.NI0UMSEL[1] cursor; /* Set cursor on sel*/
  else /* If 1st line is an enterable line*/
    set NI0UM100.OP1CUOID[1] cursor; /* Set cursor on order*/
  end

  NI0UW01.NI0UWW1X = 1;

  while (NI0UW01.NI0UWW1X <= NI0UW01.NI0UWSCX) /* Do for each displayed line*/
    set NI0UM100.NI0UMSEL[NI0UWW1X] normal;
    NI0UW01.NI0UWW1X = NI0UW01.NI0UWW1X + 1; /* (NI0SWSCX = bottom line#)*/
  end

  while (NI0UW01.NI0UWW1X <= 10) /* Do for each enterable line*/
    set NI0UM100.OP1CUOID[NI0UWW1X] normal;
    set NI0UM100.OP1NORID[NI0UWW1X] normal;
    NI0UW01.NI0UWW1X = NI0UW01.NI0UWW1X + 1;
  end

  set NI0UM100.ZCHCD[1] normal;
  set NI0UM100.ZCHCD[2] normal;
  set NI0UM100.ZCHCD[3] normal;
  set NI0UM100.NIGUSAMT[1] normal;
  set NI0UM100.NIGUSAMT[2] normal;
  set NI0UM100.NIGUSAMT[3] normal;
  set NI0UM100.XLBCD normal;
  set NI0UM100.XXXUSRID normal;

  if (converseVar.eventKey is pf5) /* If requesting proforma delete*/
    return; /* bypass edit*/
  end

   /* search for purged order if proforma print requested*/

  if (converseVar.eventKey is pf6 /* draft print requested*/
   || converseVar.eventKey is pf9) /* final print requested*/
    NI0USCO(); /* check for purged orders*/
    if (NLXREC.NLXERRF == "Y") /* cannot print purged order*/
      return; /* bypass edit*/
    end
  end

   /* ***************************************************/
   /* Request for pop-up window for misc charge code 1?*/
   /* ***************************************************/

  if (NI0UM100.ZCHCD[1] >= "? "
   && NI0UM100.ZCHCD[1] <= "?9") /* Activated when 1st char='?'*/
    NI0UM100.ZCHDESC[1] = " ";
    NI0UW01.NI0UWPUW = "Y"; /* Set 'pop-up window' switch on*/
    XPXX001(); /* Initialization*/
    while (XX0XW02.XX0XWEND == "N")
      XPZCH01(); /* Display 'pop-up window'*/
    end
    if (XX0XW02.XX0XWPIX != 0)
      NI0UM100.ZCHCD[1] = ZCHTBL.ZCHCD[XX0XWPIX];
    else
      NI0UM100.ZCHCD[1] = " ";
    end
    set NI0UM100.ZCHCD[1] cursor;
  end

   /* ***************************************************/
   /* Request for pop-up window for misc charge code 2?*/
   /* ***************************************************/

  if (NI0UM100.ZCHCD[2] >= "? "
   && NI0UM100.ZCHCD[2] <= "?9") /* Activated when 1st char='?'*/
    NI0UM100.ZCHDESC[2] = " ";
    NI0UW01.NI0UWPUW = "Y"; /* Set 'pop-up window' switch on*/
    XPXX001(); /* Initialization*/
    while (XX0XW02.XX0XWEND == "N")
      XPZCH01(); /* Display 'pop-up window'*/
    end
    if (XX0XW02.XX0XWPIX != 0)
      NI0UM100.ZCHCD[2] = ZCHTBL.ZCHCD[XX0XWPIX];
    else
      NI0UM100.ZCHCD[2] = " ";
    end
    set NI0UM100.ZCHCD[2] cursor;
  end

   /* ***************************************************/
   /* Request for pop-up window for misc charge code 3?*/
   /* ***************************************************/

  if (NI0UM100.ZCHCD[3] >= "? "
   && NI0UM100.ZCHCD[3] <= "?9") /* Activated when 1st char='?'*/
    NI0UM100.ZCHDESC[3] = " ";
    NI0UW01.NI0UWPUW = "Y"; /* Set 'pop-up window' switch on*/
    XPXX001(); /* Initialization*/
    while (XX0XW02.XX0XWEND == "N")
      XPZCH01(); /* Display 'pop-up window'*/
    end
    if (XX0XW02.XX0XWPIX != 0)
      NI0UM100.ZCHCD[3] = ZCHTBL.ZCHCD[XX0XWPIX];
    else
      NI0UM100.ZCHCD[3] = " ";
    end
    set NI0UM100.ZCHCD[3] cursor;
  end

   /* *****************************************/
   /* Request for pop-up window for remit to?*/
   /* *****************************************/

  if (NI0UM100.XLBCD >= "? "
   && NI0UM100.XLBCD <= "?9") /* Activated when 1st char='?'*/
    NI0UM100.XXXADDR1 = " ";
    NI0UW01.NI0UWPUW = "Y"; /* Set 'pop-up window' switch on*/
    XPXX001(); /* Initialization*/
    while (XX0XW02.XX0XWEND == "N")
      XPXLA01(); /* Display 'pop-up window'*/
    end
    if (XX0XW02.XX0XWPIX != 0)
      NI0UM100.XLBCD = XLATBL.XLBCD[XX0XWPIX];
    else
      NI0UM100.XLBCD = " ";
    end
    set NI0UM100.XLBCD cursor;
  end

   /* ****************************************/
   /* Request for pop-up window for user id?*/
   /* ****************************************/

  if (NI0UM100.XXXUSRID >= "?       "
   && NI0UM100.XXXUSRID <= "?9999999") /* Activated when 1st char='?'*/
    NI0UM100.XXXUNTXT = " ";
    NI0UW01.NI0UWPUW = "Y"; /* Set 'pop-up window' switch on*/
    XPXX001(); /* Initialization*/
    while (XX0XW02.XX0XWEND == "N")
      XPZPR01(); /* Display 'pop-up window'*/
    end
    if (XX0XW02.XX0XWPIX != 0)
      NI0UM100.XXXUSRID = ZPRTBL.XXXUSRID[XX0XWPIX];
    else
      NI0UM100.XXXUSRID = " ";
    end
    set NI0UM100.XXXUSRID cursor;
  end

  if (NI0UW01.NI0UWPUW == "Y") /* If pop-up window activated*/
    converseLib.clearScreen();
     /* Erase floating map*/
  end

   /* ******************/
   /* Validate user id*/
   /* ******************/

  if (NI0UM100.XXXUSRID != VPRHDR01.XXXUSRID) /* If user id updated*/
    if (NI0UM100.XXXUSRID in ZPRTBL.XXXUSRID
     && ZPRTBL.XXXUSRID[sysVar.arrayIndex] != "99999999") /* If valid user id*/
      NI0UM100.XXXUNTXT = ZPRTBL.XXXUNTXT[sysVar.arrayIndex]; /* nm to map*/
    else
      converseLib.validationFailed(188); /* Invalid User id, enter '?'*/
      NLXREC.NLXERRF = "Y"; /* for valid values*/
      set NI0UM100.XXXUSRID cursor, bold;
    end
  end

   /* ************************/
   /* Validate remit to code*/
   /* ************************/

  if (NI0UM100.XLBCD != VPRHDR01.XLBCD) /* If remit to updated*/
    if (NI0UM100.XLBCD in XLATBL.XLBCD
     && XLATBL.XLBCD[sysVar.arrayIndex] != "99") /* If valid user id*/
      NI0UM100.XXXADDR1 = XLATBL.XXX-ADDR1[sysVar.arrayIndex]; /* nm to map*/
      if (NI0UM100.XLBCD == "BV"
       || NI0UM100.XLBCD == "GM")
        if (VPRHDR01.XGPCD == "03")
          if (VDSTRB01.ZARCD == "EU"
           || VDSTRB01.ZARCD == "ME"
           || VDSTRB01.ZARCD == "AF") /* Africa Acct Region Code*/
              /* next sentence*/
          else
            converseLib.validationFailed(248); /* Invalid remit to, enter '?'*/
            NLXREC.NLXERRF = "Y"; /* for valid values*/
            set NI0UM100.XLBCD cursor, bold;
          end
        else
          converseLib.validationFailed(248); /* Invalid remit to, enter '?'*/
          NLXREC.NLXERRF = "Y"; /* for valid values*/
          set NI0UM100.XLBCD cursor, bold;
        end
      end
    else
      converseLib.validationFailed(40); /* Invalid remit to, enter '?'*/
      NLXREC.NLXERRF = "Y"; /* for valid values*/
      set NI0UM100.XLBCD cursor, bold;
    end
  end

   /* *******************************/
   /* Edit misc charges and amounts*/
   /* *******************************/

  NI0USEC();
  if (SQLCA.VAGen_SQLCODE == -911) /* If data base lock occurred*/
    return;
  end

   /* *************************************/
   /* Edit new order numbers for proforma*/
   /* *************************************/

  NI0USEO(); /* Edit order numbers*/
  if (SQLCA.VAGen_SQLCODE == -911) /* If data base lock occurred*/
    return;
  end

   /* **********************/
   /* Edit selection entry*/
   /* **********************/

  NI0USES(); /* Edit select codes*/

end // end NI0U120

// Determine next action
Function NI0U130()

  NLXREC.NLXCPROC = "NI0U130";

  if (NI0UW01.NI0UWPUW == "Y") /* If pop-up window was activated*/
    return; /* Re-display screen*/
  end

  if (converseVar.eventKey is pf8) /* *Page Forward**/
     /* Calculate difference between current rec and last rec*/
    NI0UW01.NI0UWW1X = NI0UW01.NI0UWACT - NI0UW01.NI0UWARX;
    if (NI0UW01.NI0UWW1X >= 9) /* If at least 1 page to go*/
      /* *************************************************************/
      /* *  Note: If no enterable lines displayed & no more orders, **/
      /* *        a screen of enterable lines will be displayed     **/
      /* *************************************************************/
      NI0UW01.NI0UWPAG = "Y"; /* Load page of order array*/
      NI0UW01.NI0UWARX = NI0UW01.NI0UWARX + 10; /* Point to next page*/
    else
      converseLib.validationFailed(30);
                                   /* Bottom of file--no scrolling possible*/
    end
    return;
  end

  if (converseVar.eventKey is pf7) /* *Page Back**/
    if (NI0UW01.NI0UWARX > 1) /* If not at top of array*/
      NI0UW01.NI0UWPAG = "Y"; /* Load page of order array*/
      NI0UW01.NI0UWARX = NI0UW01.NI0UWARX - 10; /* Point to previous page*/
      if (NI0UW01.NI0UWARX < 1) /* Go to top of array if full page not*/
                                   /* avail*/
        NI0UW01.NI0UWARX = +1;
      end
    else
      converseLib.validationFailed(29); /* Top of file--no scrolling possible*/
    end
    return;
  end

  NI0USSH(); /* Save proforma header fields*/
  NI0USIH(); /* See if proforma header still exists*/
  NI0USRH(); /* Restore proforma header fields*/
  if (SQLCA.VAGen_SQLCODE == -911) /* If data base lock occurred*/
    return; /* get out*/
  end
  if (SQLCA.VAGen_SQLCODE == 100) /* If header not found*/
    NIWREC.NIWMSGNR = 211; /* Prof was deleted by other sesn*/
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    COMMAREA.CATOAP = "NI0T"; /* Xfer to sel screen*/
    XPNL002();
  end

  if (NI0UW01.NI0UWINQ == "Y") /* If inquiry only*/
    if (converseVar.eventKey is enter) /* ; If enter, go to address override*/
      COMMAREA.CATOAP = "NI0V";
    else
      if (converseVar.eventKey is pf13) /* If pf13, go to inco*/
        COMMAREA.CATOAP = "NI0X";
      else
        converseLib.validationFailed(191); /* User id set up for inquiry only*/
        return;
      end
    end
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002();
    return;
  end

  if (converseVar.eventKey is pf12) /* *Edit**/
    return; /* Re-display screen*/
  end

  if (converseVar.eventKey is enter /* *Invalid PF key**/
   || converseVar.eventKey is pf5   
   || converseVar.eventKey is pf6   
   || converseVar.eventKey is pf9   
   || converseVar.eventKey is pf10  
   || converseVar.eventKey is pf13)
    /* next sentence*/
  else
    converseLib.validationFailed(2); /* Invalid PA/PF key for this appl*/
    return;
  end

   /* *********************/
      /* Process Proforma*/
   /* *********************/


  if (converseVar.eventKey is pf5) /* If proforma delete requested*/
    if (NI0UW01.NI0UWDEL == "N") /* If delete not confirmed*/
      converseLib.validationFailed(214); /* Press pf5 to confirm del of prof*/
      NI0UW01.NI0UWDEL = "Y";
      return;
    end
    NI0USPD(); /* Proforma delete*/
    if (SQLCA.VAGen_SQLCODE == -911) /* If data base lock occurred*/
      return; /* get out*/
    end
    NIWREC.NIWMSGNR = 208; /* Proforma has been deleted*/
    COMMAREA.CAUSERA = NIWREC.NIWGROUP; /* Go to prof maint sel*/
    COMMAREA.CATOAP = "NI0T";
    XPNL002();
  end

    /* *** Delete Proforma Order ****/
  VPRORD01.NIQPROID = NIWREC.NIQPROID; /* Proforma number*/
  NI0UW01.NI0UWW1X = 0;

  while (NI0UW01.NI0UWW1X < NI0UW01.NI0UWACT)
    NI0UW01.NI0UWW1X = NI0UW01.NI0UWW1X + 1;
    if (NI0UW01.NI0UWSEL[NI0UWW1X] == "D") /* order selected for delete*/
      VPRORD01.OP1CUOID = NI0UW01.NI0UWCOR[NI0UWW1X]; /* Build key*/
      VPRORD01.OP1NORID = NI0UW01.NI0UWNOR[NI0UWW1X];
      NI0USDO(); /* Delete proforma order*/
      if (SQLCA.VAGen_SQLCODE == -911) /* If data base lock occurred*/
        return; /* get out*/
      end
    else
      if (NI0UW01.NI0UWSEL[NI0UWW1X] != " "
       && converseVar.eventKey not pf6 /* draft print*/
       && converseVar.eventKey not pf9 /* final print*/
       && converseVar.eventKey is enter)
        converseLib.validationFailed(246); /* enter 'd' to delete the order*/
        return; /* get out*/
      end
    end
  end

    /* *** Add Proforma Order ****/
  VPRORD01.ZZZSDT = XX0XW01.XX0XWDAT;
  VPRORD01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPRORD01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  NI0UW01.NI0UWW1X = 0;

  while (NI0UW01.NI0UWW1X < 10) /* For each possible enterable line*/
    NI0UW01.NI0UWW1X = NI0UW01.NI0UWW1X + 1;
    if (NI0UW01.NI0UWNCO[NI0UWW1X] != 0) /* If new order entered*/
      NI0USIP(); /* Sel unique Prof Ord - NIRREC*/
      if (SQLCA.VAGen_SQLCODE != 100) /* If problem occurred*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* Reset data base*/
        if (SQLCA.VAGen_SQLCODE == 0) /* If order used in other prof*/
          NI0UW01.NI0UWEPF = "ORDER"; /* Format error message*/
          NI0UW01.NI0UWECO = NI0UW01.NI0UWNCO[NI0UWW1X]; /* Cust ord*/
          NI0UW01.NI0UWEPE = ".";
          NI0UW01.NI0UWENO = NI0UW01.NI0UWNNO[NI0UWW1X]; /* Nike ord*/
          NI0UWESF = " ALREADY EXISTS IN EITHER THIS OR ANOTHER PROFORMA";
          NI0UM100.VAGen_EZEMSG = NI0UW01.NI0UWEMS;
        end
        return; /* Get out*/
      end
      NI0USAO(); /* Add Proforma Order - NIRREC*/
      if (SQLCA.VAGen_SQLCODE == -911) /* If data base lock occurred*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* reset data base*/
        return; /* get out*/
      end
    end
  end

  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit();
  NLXREC.NLXEOSF = "Y"; /* Refresh and redisplay orders*/

    /* ** Delete other proforma data if no orders for proforma ***/
  NI0USSP(); /* Select proforma orders - NIRREC*/
  if (SQLCA.VAGen_SQLCODE == -911) /* If data base lock occurred*/
    return; /* Get out*/
  end
  if (SQLCA.VAGen_SQLCODE == 100) /* If no orders found for proforma*/
    call "IO5810" ("C1", SQLCA, VPRORD01) {isNoRefresh = yes, isExternal = yes}; /* Close cursor*/
    return;
  end

    /* *** Update Proforma data if changed on screen ****/
  if (NI0UM100.ZCHCD[1] != VPRHDR01.ZCHCD[1] /* If any prof header changes*/
   || NI0UM100.ZCHCD[2] != VPRHDR01.ZCHCD[2] 
   || NI0UM100.ZCHCD[3] != VPRHDR01.ZCHCD[3] 
   || NI0UM100.NIGUSAMT[1] != VPRHDR01.NIGUSAMT[1]
   || NI0UM100.NIGUSAMT[2] != VPRHDR01.NIGUSAMT[2]
   || NI0UM100.NIGUSAMT[3] != VPRHDR01.NIGUSAMT[3]
   || NI0UM100.XLBCD != VPRHDR01.XLBCD       
   || NI0UM100.XXXUSRID != VPRHDR01.XXXUSRID)
    NI0USUH(); /* Update Proforma Header - NIQREC*/
    if (SQLCA.VAGen_SQLCODE == -911) /* If data base lock occurred*/
      VPRHDR01.XLBCD = " "; /* Force prof update next time*/
      return; /* Get out*/
    end
    if (SQLCA.VAGen_SQLCODE == 100) /* If header chged since display*/
      converseLib.validationFailed(155);
                                   /* Database updated since last display*/
      NI0UWUPD = "Y"; /* Indicate updated prof header*/
      return;
    end
  end

   /* *******************************/
      /* Determine where to go next*/
   /* *******************************/

  if (converseVar.eventKey is enter)
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    COMMAREA.CATOAP = "NI0V"; /* Go to address override*/
  end

  if (converseVar.eventKey is pf6) /* Print Draft*/
    NI0US-LOC-EDIT(); /* Check for default letter of credit*/
    if (NLXREC.NLXERRF == "Y") /* if error occured*/
      NLXREC.NLXEOSF = "N"; /* Return to ni0u130*/
      return;
    end
    NIWREC.NIWSBIND = "D";
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    COMMAREA.CATOAP = "NI0P";
  end

  if (converseVar.eventKey is pf9) /* Print Final*/
    NI0USPL(); /* Check packing list for prof orders*/
    if (NLXREC.NLXERRF == "Y") /* If error occurred*/
      return; /* Get out*/
    end
    NIWREC.NIWSBIND = "F";
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    COMMAREA.CATOAP = "NI0P";
  end

  if (converseVar.eventKey is pf10) /* Letter of credit terms*/
    NCWREC.NIQPROID = NIWREC.NIQPROID;
    NCWREC.KUCCOID = NIWREC.KUCCOID;
    COMMAREA.CAUSERA = NCWREC.NCWGROUP;
    COMMAREA.CATOAP = "NC0C";
  end

  if (converseVar.eventKey is pf13) /* INCO Terms*/
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    COMMAREA.CATOAP = "NI0X";
  end

   /* *****************/
      /* Exit program*/
   /* *****************/

  XPNL002();
   /* *************************************************************/
end // end NI0U130

// Test if return from lc terms
Function NI0US-LC-MAINT-TST()
   /* -----------------------------------------------------------*/
         /* test to see if return from LC terms maintenance*/

   /* -----------------------------------------------------------*/

  NLXREC.NLXCPROC = "NI0US-LC-MAINT-TST";

  NCWREC.NCWGROUP = COMMAREA.CAUSERA;
  COMMAREA.CAUSERA = " ";
  if (NCWREC.NIQPROID > 0)
    VPRHDR01.NIQPROID = NCWREC.NIQPROID;
    NI0USIH(); /* Select unique - NIQREC*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Proforma valid!*/
      NIWREC.NIQPROID = VPRHDR01.NIQPROID; /* Proforma# to w/s*/
      NIWREC.KUCCOID = VPRHDR01.KUCCOID; /* Customer# to w/s*/
      COMMAREA.CAITEM = " ";
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        NIWREC.NIWMSGNR = 200; /* Proforma# not found*/
      else
        NIWREC.NIWMSGNR = converseVar.validationMsgNum; /* Database lock occurred*/
      end
      COMMAREA.CAUSERA = NIWREC.NIWGROUP;
      COMMAREA.CATOAP = "NI0T"; /* Xfer to sel screen*/
      XPNL002();
    end
  else
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    COMMAREA.CATOAP = "NI0T"; /* Go to selection screen*/
    XPNL002();
  end
end // end NI0US-LC-MAINT-TST

// Inquire OP1REC
Function NI0US-LOC-EDIT()

   /* ** THIS CHUNK OF CODE WAS INSERTED ON 2/16/93.*/
   /* ** THE CODE IS INTENDED TO ELIMINATE THE PROGRAM FROM ABENDING*/
   /* ** WHEN NO DEFAULT PTERM TEXT IS FOUND.  INSTEAD OF ABENDING*/
   /* ** WHEN THE PROGRAM IS RAN ONLINE, IT SENDS AN ERROR MESSAGE*/
   /* ** TO THE SCREEN.*/

  NLXREC.NLXCPROC = "NI0US-LOC-EDIT";
                                 /* Get company xau_acct_cls_cd*/
  KUCREC.KUCCOID = NIWREC.KUCCOID; /* Build key*/
  NI0USIC();
  if (SQLCA.VAGen_SQLCODE == 0)
    if (KUCREC.XAUCD == "33")
                                  /* build key*/
      OP1REC.OP1PARTN = VPRORD01.OP1PARTN;
      OP1REC.OP1CUOID = VPRORD01.OP1CUOID;
      OP1REC.OP1NORID = VPRORD01.OP1NORID;

      NI0USIO(); /* get order header*/
      if (SQLCA.VAGen_SQLCODE == -911)
        return;
      end
      if (OP1REC.XPTCD in XPTTBL.XPTCD) /* search pterm table*/
        if (XPTTBL.XPTLCFL[sysVar.arrayIndex] == "Y") /* L.O.C. required*/
                      /* Declare cursor for pterm text table*/
          set VPRTXT01 empty;
                                  /* build ptext table key*/
          VPRTXT01.KUCCOID = OP1REC.KUCCOID;
          VPRTXT01.NIQPROID = 0;
          VPRTXT01.NISPTXTC = "L";
          call "IO5820" ("S1", SQLCA, VPRTXT01) {isNoRefresh = yes, isExternal = yes};
          if (SQLCA.VAGen_SQLCODE != 0)
            TA1REC.TA1LOCAT[2] = "S1";
            TA1REC.TA1LOCAT[3] = "NISREC";
            TA1REC.TA1DBASE = "DNILO";
            TA1REC.TA1TBLVU = "VPTXT01";
            XPNL005();
            return;
          end
                           /* Fetch cursor ptext table*/
          call "IO5820" ("N1", SQLCA, VPRTXT01) {isNoRefresh = yes, isExternal = yes};
          if (SQLCA.VAGen_SQLCODE == 0)
                           /* DO NOTHING*/
          else
            if (SQLCA.VAGen_SQLCODE == +100)
              converseLib.validationFailed(383);
              NLXREC.NLXERRF = "Y";
            else
              if (SQLCA.VAGen_SQLCODE != +100)
                TA1REC.TA1LOCAT[2] = "N1";
                TA1REC.TA1LOCAT[3] = "NISREC";
                TA1REC.TA1DBASE = "DNILO";
                TA1REC.TA1TBLVU = "VPTXT01";
                XPNL005();
                return;
              end /* END SQLCODE NE 100*/
            end /* END SQLCODE = 100*/
          end /* END SQLCODE = 0*/
                           /* Close cursor for ptext table*/
          call "IO5820" ("C1", SQLCA, VPRTXT01) {isNoRefresh = yes, isExternal = yes};
        end /* end if L.O.C. flag = Y.*/
      else /* if search has no hit.*/
        TA1REC.TA1LOCAT[2] = "IN";
        TA1REC.TA1LOCAT[3] = "XPTTBL";
        TA1REC.TA1DBASE = "DCORP";
        TA1REC.TA1TBLVU = "VXPT0001";
        XPNL005();
      end /* If op1rec.xptcd in xpttble.xptcd.*/
    end /* If xaucd = '33'.*/
  else /* If sqlcode not 0.*/
    return;
  end /* If sqlcode = 0*/
end // end NI0US-LOC-EDIT

// Test to see if there is a lc
Function NI0US-TEST-PF10()
  NLXREC.NLXCPROC = "NI0US-TEST-PF10";

   /* *****************************/
     /* Open Proforma Text cursor*/
   /* *****************************/

  set VPRTXT01 empty;
  VPRTXT01.KUCCOID = NIWREC.KUCCOID; /* Cust id (build key)*/
  VPRTXT01.NIQPROID = NIWREC.NIQPROID; /* Prof id*/
  VPRTXT01.NISPTXTC = "L"; /* Prof txt typ*/

  call "IO5820" ("S1", SQLCA, VPRTXT01) {isNoRefresh = yes, isExternal = yes}; /* Select l.o.c. text*/

  if (SQLCA.VAGen_SQLCODE != 0) /* If hard error*/
    TA1REC.TA1LOCAT[2] = "S1     "; /* Database action*/
    TA1REC.TA1LOCAT[3] = "IO5820 "; /* IO module*/
    TA1REC.TA1DBASE = "DNILO "; /* Database*/
    TA1REC.TA1TBLVU = "VPRTXT01"; /* Table view*/
    XPNL005(); /* Perform abend routine*/
    return;
  end

   /* **************************************/
     /* Read through Proforma Text records*/
   /* **************************************/

  call "IO5820" ("N1", SQLCA, VPRTXT01) {isNoRefresh = yes, isExternal = yes}; /* Fetch l.o.c. text rec*/
  if (SQLCA.VAGen_SQLCODE == 100)
    NLXREC.NLXERRF = "Y"; /* set error flag*/
    converseLib.validationFailed(247); /* no proforma lc text found for customer*/
  else
    if (SQLCA.VAGen_SQLCODE != 0)
      NLXREC.NLXERRF = "Y"; /* set error flag*/
      converseLib.validationFailed(4); /* no proforma lc text found for customer*/
    end
  end
  call "IO5820" ("C1", SQLCA, VPRTXT01) {isNoRefresh = yes, isExternal = yes}; /* Close cursor*/
end // end NI0US-TEST-PF10

// Add Proforma Request Order
Function NI0USAO()

  NLXREC.NLXCPROC = "NI0USAO";

   /* ****************************************/
     /* Format Proforma Request Order record*/
   /* ****************************************/

  VPRORD01.OP1PARTN = NI0UW01.OP1PARTN[NI0UWW1X]; /* Order part ch*/

  call "IO5810" ("A ", SQLCA, VPRORD01) {isNoRefresh = yes, isExternal = yes};
                                   /* Add Proforma Request Order*/

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "A      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO5810 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VPRORD01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NI0USAO

// Build Packing List Style Rec
Function NI0USBS()

  NLXREC.NLXCPROC = "NI0USBS";

  TSZREC.OP1CUOID = TSVREC.OP1CUOID;
  TSZREC.OP1NORID = TSVREC.OP1NORID;
  TSZREC.TSPCRTNB = -1;
  TSZREC.XGPCD = "**";
  TSZREC.SY1STNBR = "******";
  TSZREC.SY2CLRID = "***";
  TSZREC.XDMCD = "**";
  TSZREC.XQACD = "**";
  TSZREC.XOWCD = "**";
  TSZREC.PC2INSEG = "***";
  TSZREC.XPGCD = "**";
  TSZREC.XUMCD = "**";
  TSZREC.XCTCD = " ";
  TSZREC.SY5SZID = -1;
end // end NI0USBS

// Check for purged orders
Function NI0USCO()

  NLXREC.NLXCPROC = "NI0USCO";

  NI0UW01.NI0UWCOX = 1; /* Init array index*/

  while (NI0UW01.NI0UWCOX <= NI0UW01.NI0UWACT) /* while array records*/
    if (NI0UW01.NI0UWCOR[NI0UWCOX] > 0 /* Cu Or*/
     && NI0UW01.XGPCD[NI0UWCOX] != "  ") /* GPC*/
     /* next sentence*/
    else
      converseLib.validationFailed(245); /* cannot print if find purged order*/
      NLXREC.NLXERRF = "Y"; /* invalid value*/
    end
   /*  */
    NI0UW01.NI0UWCOX = NI0UW01.NI0UWCOX + 1; /* Accum array index*/
  end


end // end NI0USCO

// Delete NIQREC (Proforma Hdr)
Function NI0USDH()

  NLXREC.NLXCPROC = "NI0USDH";

  VPRHDR01.NIQPROID = NIWREC.NIQPROID; /* Current proforma*/

  call "IO5800" ("D ", SQLCA, VPRHDR01) {isNoRefresh = yes, isExternal = yes}; /* Delete Proforma Header*/

  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "D      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO5800 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VPRHDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NI0USDH

// Delete NITREC (Prof Inco Text)
Function NI0USDI()

  NLXREC.NLXCPROC = "NI0USDI";

  VPRZIT01.NIQPROID = NIWREC.NIQPROID; /* Current proforma#*/
  VPRZIT01.XCTCD = "****"; /* Specify ALL country codes*/
  VPRZIT01.NITLTXTS = -1; /* Specify ALL inco text sequences*/

  call "IO5830" ("D ", SQLCA, VPRZIT01) {isNoRefresh = yes, isExternal = yes};
                                   /* Delete all NITREC matching*/
                                                /* proforma*/
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "D      "; /* Database action*/
    TA1REC.TA1LOCAT[3] = "IO5830 "; /* IO module*/
    TA1REC.TA1DBASE = "DNILO"; /* Database*/
    TA1REC.TA1TBLVU = "VPRZIT01"; /* Table view*/
    XPNL005(); /* Abend routine*/
  end
end // end NI0USDI

// Delete NIRREC (Proforma Order)
Function NI0USDO()

  NLXREC.NLXCPROC = "NI0USDO";

  call "IO5810" ("D ", SQLCA, VPRORD01) {isNoRefresh = yes, isExternal = yes}; /* Delete NIRREC*/

  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "D      "; /* Database action*/
    TA1REC.TA1LOCAT[3] = "IO5810 "; /* IO module*/
    TA1REC.TA1DBASE = "DNILO"; /* Database*/
    TA1REC.TA1TBLVU = "VPRORD01"; /* Table view*/
    XPNL005(); /* Abend routine*/
  end
end // end NI0USDO

// Delete NISREC (Proforma Text)
Function NI0USDT()

  NLXREC.NLXCPROC = "NI0USDT";

  VPRTXT01.NIQPROID = NIWREC.NIQPROID; /* Current proforma#*/
  VPRTXT01.KUCCOID = NIWREC.KUCCOID; /* Proforma customer#*/
  VPRTXT01.NISPTXTC = "C"; /* Text type*/
  VPRTXT01.NISPTXRS = -1; /* Specify ALL rec sequences*/

  call "IO5820" ("D ", SQLCA, VPRTXT01) {isNoRefresh = yes, isExternal = yes};
                                   /* Delete all NISREC matching*/
                                                /* proforma*/
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "D      "; /* Database action*/
    TA1REC.TA1LOCAT[3] = "IO5820 "; /* IO module*/
    TA1REC.TA1DBASE = "DNILO"; /* Database*/
    TA1REC.TA1TBLVU = "VPRTXT01"; /* Table view*/
    XPNL005(); /* Abend routine*/
  end

   /* delete the proforma lc text*/

  VPRTXT01.NIQPROID = NIWREC.NIQPROID; /* Current proforma#*/
  VPRTXT01.KUCCOID = NIWREC.KUCCOID; /* Proforma customer#*/
  VPRTXT01.NISPTXTC = "L"; /* Text type*/
  VPRTXT01.NISPTXRS = -1; /* Specify ALL rec sequences*/
  VPRTXT01.NISLTXTC = "*"; /* Specify ALL rec sequences*/

  call "IO5820" ("D ", SQLCA, VPRTXT01) {isNoRefresh = yes, isExternal = yes};
                                   /* Delete all NISREC matching*/
                                                /* proforma*/
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "D      "; /* Database action*/
    TA1REC.TA1LOCAT[3] = "IO5820 "; /* IO module*/
    TA1REC.TA1DBASE = "DNILO"; /* Database*/
    TA1REC.TA1TBLVU = "VPRTXT01"; /* Table view*/
    XPNL005(); /* Abend routine*/
  end
end // end NI0USDT

// Edit Charge Type/Amount
Function NI0USEC()

  NLXREC.NLXCPROC = "NI0SSEC"; /* set current proc name*/

  NI0UW01.NI0UWW1X = 3;

  while (NI0UW01.NI0UWW1X > 0)
    if (NI0UM100.ZCHCD[NI0UWW1X] > " ") /* If charge type not blank*/
        /* ** Edit Charge Type Amount ***/
      if (NI0UM100.NIGUSAMT[NI0UWW1X] > 0) /* If amount entered*/
        if (NI0UM100.NIGUSAMT[NI0UWW1X] != VPRHDR01.NIGUSAMT[NI0UWW1X])
          NI0UW01.NI0UWAMT = NI0UM100.NIGUSAMT[NI0UWW1X];
          if (VDSTRB01.ZFCCD > " ") /* If currency cd assoc w/cust*/
           /* IF VDSTRB01.ZFCCD IN ZFCTBL.ZFCCD;*/
                                   /* If curr cd found in corp tbl*/
            if (NI0UW01.NI0UWCNT > 0) /* If cents are entered*/
                                  /* AND ZFCTBL.ZFCFMAT(EZETST) = 'I'; /**/
                                   /* & integer fmt required*/
              set NI0UM100.NIGUSAMT[NI0UWW1X] cursor, bold;
              converseLib.validationFailed(119);
                                   /* Decimal not allowed with foreign curr*/
              NLXREC.NLXERRF = "Y";
            end
           /* END;*/
          end
        end
      else
        set NI0UM100.NIGUSAMT[NI0UWW1X] cursor, bold;
        converseLib.validationFailed(127); /* Please enter charge amount*/
        NLXREC.NLXERRF = "Y";
      end
      if (NI0UM100.ZCHCD[NI0UWW1X] != VPRHDR01.ZCHCD[NI0UWW1X]) /* If cd chg*/
          /* ** Edit Charge Type Code ***/
        if (NI0UM100.ZCHCD[NI0UWW1X] in ZCHTBL.ZCHCD
         && ZCHTBL.ZCHCD[sysVar.arrayIndex] != "99") /* end of table*/
          NI0UM100.ZCHDESC[NI0UWW1X] = ZCHTBL.ZCHDESC[sysVar.arrayIndex];
          if (ZCHTBL.ZCHPIFL[sysVar.arrayIndex] == "Y")
             /* format nikrec key*/
            VZCHGL01.ZCHCD = NI0UM100.ZCHCD[NI0UWW1X];
            VZCHGL01.XAUCD = KUCREC.XAUCD;
            VZCHGL01.ZARCD = VDSTRB01.ZARCD;
            VZCHGL01.KUCCOID = VDSTRB01.KUCCOID;
            VZCHGL01.YMTCD = " ";

            call "IO4540" ("SF", SQLCA, VZCHGL01) {isNoRefresh = yes, isExternal = yes};
                                                          /* select 1st row*/

            if (SQLCA.VAGen_SQLCODE == 0)
              /* next sentence*/
            else
              NLXREC.NLXERRF = "Y";
              if (SQLCA.VAGen_SQLCODE == 100)
                set NI0UM100.ZCHCD[NI0UWW1X] cursor, bold;
                converseLib.validationFailed(145); /* chg typ invalid for customer*/
              else
                TA1REC.TA1LOCAT[2] = "SF     "; /* database action*/
                TA1REC.TA1LOCAT[3] = "IO4540 "; /* io module*/
                TA1REC.TA1DBASE = "DNILO"; /* database*/
                TA1REC.TA1TBLVU = "VZCHGL01"; /* table view*/
                XPNL005(); /* abend routine*/
                return;
              end
            end
          else
            set NI0UM100.ZCHCD[NI0UWW1X] cursor, bold;
            converseLib.validationFailed(118); /* charge type invalid for prod ivc*/
            NLXREC.NLXERRF = "Y";
          end
        else
          set NI0UM100.ZCHCD[NI0UWW1X] cursor, bold;
          NI0UM100.ZCHDESC[NI0UWW1X] = " "; /* blank out desc*/
          converseLib.validationFailed(10); /* invalid charge type*/
          NLXREC.NLXERRF = "Y";
        end
      end
    else
      NI0UM100.ZCHDESC[NI0UWW1X] = " "; /* blank out desc*/
      NI0UM100.NIGUSAMT[NI0UWW1X] = 0; /* blank out amt*/
    end

    NI0UW01.NI0UWW1X = NI0UW01.NI0UWW1X - 1;
  end
end // end NI0USEC

// Edit GPC in Order
Function NI0USEG()

  NLXREC.NLXCPROC = "NI0USEG";

  if (VPRHDR01.XGPCD == "02") /* If footwear proforma*/
    if (OP1REC.XGPCD != "02") /* If order not footwear*/
      converseLib.validationFailed(185); /* Not a footwear order*/
      NLXREC.NLXERRF = "Y";
      set NI0UM100.OP1CUOID[NI0UWW2X] cursor, bold;
      set NI0UM100.OP1NORID[NI0UWW2X] bold;
    end
  else
    if (VPRHDR01.XGPCD == "03") /* If apparel proforma*/
      if (OP1REC.XGPCD != "03") /* If order not apparel*/
        converseLib.validationFailed(186); /* Not an apparel order*/
        NLXREC.NLXERRF = "Y";
        set NI0UM100.OP1CUOID[NI0UWW2X] cursor, bold;
        set NI0UM100.OP1NORID[NI0UWW2X] bold;
      end
    else /* If other proforma*/
      if (OP1REC.XGPCD == "02" /* If order is footwear/apparel*/
       || OP1REC.XGPCD == "03")
        converseLib.validationFailed(187); /* Cant mix gpc 02/03 w/othr gpcs*/
        NLXREC.NLXERRF = "Y";
        set NI0UM100.OP1CUOID[NI0UWW2X] cursor, bold;
        set NI0UM100.OP1NORID[NI0UWW2X] bold;
      end
    end
  end
end // end NI0USEG

// Edit Order Numbers
Function NI0USEO()

  NLXREC.NLXCPROC = "NI0USEO";

  NI0UW01.NI0UWW2X = 10; /* Set work index 2 = last line*/

  while (NI0UW01.NI0UWW2X > NI0UW01.NI0UWSCX) /* For enterable order line*/
                                     /* (NI0UWSCX=last displ order)*/
    if (NI0UM100.OP1CUOID[NI0UWW2X] == 0 /* If no cust order number*/
     && NI0UM100.OP1NORID[NI0UWW2X] == 0) /* & no nike order num entered*/
      NI0UW01.NI0UWNOA[NI0UWW2X] = 0; /* Zero out order in array*/
    else /* Else*/
      NI0UW01.NI0UWNCO[NI0UWW2X] = NI0UM100.OP1CUOID[NI0UWW2X];
                                   /* Load*/
      NI0UW01.NI0UWNNO[NI0UWW2X] = NI0UM100.OP1NORID[NI0UWW2X];
                                   /* arry*/
      OP1REC.OP1CUOID = NI0UW01.NI0UWNCO[NI0UWW2X]; /* Build key*/
      OP1REC.OP1NORID = NI0UW01.NI0UWNNO[NI0UWW2X];
      OP1REC.OP1PARTN = NI0UW01.OP1PARTN[NI0UWW2X];
      NI0USIO(); /* Select order from OP1REC*/
      if (SQLCA.VAGen_SQLCODE == 0) /* If order found*/
        if (OP1REC.XOSCD == "IP" /* If in process*/
         || OP1REC.XOSCD == "XL") /* or cancelled*/
          SQLCA.VAGen_SQLCODE = 100; /* Order not valid*/
        end
      end
      if (SQLCA.VAGen_SQLCODE != 0)
        NLXREC.NLXERRF = "Y";
        if (SQLCA.VAGen_SQLCODE == 100) /* If not a valid order*/
          converseLib.validationFailed(14); /* Invalid order number*/
          set NI0UM100.OP1CUOID[NI0UWW2X] cursor, bold;
          set NI0UM100.OP1NORID[NI0UWW2X] bold;
        else
          return; /* Data base lock*/
        end
      else /* ** Order number found ***/
        NI0UW01.NI0UWNOB[NI0UWW2X] = OP1REC.XOBCD; /* Load xobcd*/
        NI0UW01.NI0UWNOC[NI0UWW2X] = OP1REC.XOCCD; /* Load xoCcd*/
        if (OP1REC.KUCCOID == NIWREC.KUCCOID)
          NI0USEG(); /* Edit gpc code*/
        else
          converseLib.validationFailed(35); /* Order cust# ne proforma cust#*/
          NLXREC.NLXERRF = "Y";
          set NI0UM100.OP1CUOID[NI0UWW2X] cursor, bold;
          set NI0UM100.OP1NORID[NI0UWW2X] bold;
        end
      end
    end
    NI0UW01.NI0UWW2X = NI0UW01.NI0UWW2X - 1;
  end
end // end NI0USEO

// Edit Packing List for Order
Function NI0USEP()

  NLXREC.NLXCPROC = "NI0USEP";

  call "IO4700" ("S2", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes}; /* Open PL cursor*/

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "S2     "; /* Database action*/
    TA1REC.TA1LOCAT[3] = "IO4700 "; /* IO module*/
    TA1REC.TA1DBASE = "DTRANS"; /* Database*/
    TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view*/
    XPNL005(); /* Abend routine*/
    NLXREC.NLXERRF = "Y"; /* Ind error (DB lock)*/
    return; /* Get out*/
  end

  call "IO4700" ("N2", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
                                   /* Get packing list for order*/

  if (SQLCA.VAGen_SQLCODE == 100) /* If no packing list found*/
    call "IO4700" ("C2", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes}; /* Close cursor*/
    NI0UW01.NI0UWLPF = "A PACKING LIST FOR ORDER"; /* Format err msg*/
    NI0UW01.NI0UWLCO = TSVREC.OP1CUOID; /* Cust order#*/
    NI0UW01.NI0UWLPE = ".";
    NI0UW01.NI0UWLNO = TSVREC.OP1NORID; /* Nike order#*/
    NI0UW01.NI0UWLSF = " DOES NOT EXIST";
    VAGen_EZEMSG = NI0UW01.NI0UWLMS;
    NLXREC.NLXERRF = "Y"; /* Indicate error*/
    return; /* Get out*/
  end

  NI0UW01.NI0UWW2X = 0; /* Init work index*/
  while (SQLCA.VAGen_SQLCODE == 0) /* For each packing list found*/
    NI0UW01.NI0UWW2X = NI0UW01.NI0UWW2X + 1;
    NI0UW01.TSVPLNBR[NI0UWW2X] = TSVREC.TSVPLNBR; /* Store pl#*/
    call "IO4700" ("N2", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes}; /* Get next packing list*/
  end

  if (SQLCA.VAGen_SQLCODE == 100) /* If all packing lists obtained*/
                                   /* normally*/
    call "IO4700" ("C2", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes}; /* Close cursor*/
    NI0USBS(); /* Build packing list style record*/
    while (NI0UW01.NI0UWW2X > 0) /* For each stored packing list*/
      NI0USOS(); /* Open packing list style (TSZREC)*/
      if (SQLCA.VAGen_SQLCODE == -911) /* If data base lock*/
        NLXREC.NLXERRF = "Y"; /* Indicate error*/
        return; /* Get out*/
      end
      NI0USFS(); /* Fetch pl style w/blank country*/
      if (SQLCA.VAGen_SQLCODE == -911) /* If data base lock*/
        NLXREC.NLXERRF = "Y"; /* Indicate error*/
        return; /* Get out*/
      end
      if (SQLCA.VAGen_SQLCODE == 0) /* If blank country found*/
        NI0UW01.NI0UWLPF = "A PACKING LIST FOR ORDER"; /* Fmt err msg*/
        NI0UW01.NI0UWLCO = TSVREC.OP1CUOID; /* Cust order#*/
        NI0UW01.NI0UWLPE = ".";
        NI0UW01.NI0UWLNO = TSVREC.OP1NORID; /* Nike order#*/
        NI0UW01.NI0UWLSF = " HAS A STYLE WITH NO COUNTRY OF ORIGIN";
        VAGen_EZEMSG = NI0UW01.NI0UWLMS;
        NLXREC.NLXERRF = "Y"; /* Indicate error*/
        call "IO4720" ("C1", SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes}; /* Close cursor*/
        return; /* Get out*/
      end
      call "IO4720" ("C1", SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes}; /* Close cursor*/
      NI0UW01.NI0UWW2X = NI0UW01.NI0UWW2X - 1;
    end
  else
    TA1REC.TA1LOCAT[2] = "N2     "; /* Database action*/
    TA1REC.TA1LOCAT[3] = "IO4700 "; /* IO module*/
    TA1REC.TA1DBASE = "DTRANS"; /* Database*/
    TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view*/
    XPNL005(); /* Abend routine*/
    NLXREC.NLXERRF = "Y"; /* Ind error (DB lock)*/
  end
end // end NI0USEP

// Edit Select Codes
Function NI0USES()

  NLXREC.NLXCPROC = "NI0USES";

  NI0UW01.NI0UWW2X = NI0UW01.NI0UWSCX;
                                   /* Set work index 2 = last displ ln*/
  NI0UW01.NI0UWW1X = NI0UW01.NI0UWARX + NI0UW01.NI0UWSCX;
  NI0UW01.NI0UWW1X = NI0UW01.NI0UWW1X - 1;
                                   /* Set work idx 1 = corres arry rec*/

  while (NI0UW01.NI0UWW2X > 0) /* For each displayed order line*/

    if (NI0UM100.NI0UMSEL[NI0UWW2X] == " ") /* If order not selected*/
      NI0UW01.NI0UWSEL[NI0UWW1X] = " "; /* Ind not selected in array*/
    else /* Else*/
      if (NI0UM100.NI0UMSEL[NI0UWW2X] == "D") /* If order selected*/
        NI0UW01.NI0UWSEL[NI0UWW1X] = "D"; /* Mark as sel in array*/
      else
        converseLib.validationFailed(246); /* enter 'd' to delete the order*/
        NLXREC.NLXERRF = "Y";
        set NI0UM100.NI0UMSEL[NI0UWW2X] cursor, bold;
      end
    end
    NI0UW01.NI0UWW1X = NI0UW01.NI0UWW1X - 1;
    NI0UW01.NI0UWW2X = NI0UW01.NI0UWW2X - 1;
  end
end // end NI0USES

// Fetch PL Style Record (TSZREC)
Function NI0USFS()
  NLXREC.NLXCPROC = "NI0USFS"; /* set current proc name*/

  call "IO4720" ("N1", SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "N1     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4720 "; /* io module*/
    TA1REC.TA1DBASE = "DTRANS"; /* database*/
    TA1REC.TA1TBLVU = "VNLPLS01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NI0USFS

// Inquire KUCREC
Function NI0USIC()

  NLXREC.NLXCPROC = "NI0USIC";

  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* Read Customer*/

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0240 "; /* io module*/
    TA1REC.TA1DBASE = "DCUST"; /* database*/
    TA1REC.TA1TBLVU = "VCMPNY01"; /* table view*/
    XPNL005(); /* abend routine*/
  end

end // end NI0USIC

// Inquire vdstrb01
Function NI0USID()

  NLXREC.NLXCPROC = "NI0USID";

  call "IO4600" ("S ", SQLCA, VDSTRB01) {isNoRefresh = yes, isExternal = yes}; /* Read vdstrb01*/

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4600 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VDSTRB01"; /* table view*/
    XPNL005(); /* abend routine*/
  end

end // end NI0USID

// Inquire NIQREC (Proforma Hdr)
Function NI0USIH()

  NLXREC.NLXCPROC = "NI0USIH";

  call "IO5800" ("S ", SQLCA, VPRHDR01) {isNoRefresh = yes, isExternal = yes}; /* Read Proforma Header*/

  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO5800 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VPRHDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NI0USIH

// Inquire OP1REC
Function NI0USIO()

  NLXREC.NLXCPROC = "NI0USIO";

  call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* Select unique OP1REC*/

  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "S      "; /* Database action*/
    TA1REC.TA1LOCAT[3] = "IO0430 "; /* IO module*/
    TA1REC.TA1DBASE = "DORDER"; /* Database*/
    TA1REC.TA1TBLVU = "VORHDR01"; /* Table view*/
    XPNL005(); /* Abend routine*/
  end
end // end NI0USIO

// Inquire NIRREC
Function NI0USIP()

  NLXREC.NLXCPROC = "NI0USIP";

  VPRORD01.OP1CUOID = NI0UW01.NI0UWNCO[NI0UWW1X]; /* Build key*/
  VPRORD01.OP1NORID = NI0UW01.NI0UWNNO[NI0UWW1X];

  call "IO5810" ("SA", SQLCA, VPRORD01) {isNoRefresh = yes, isExternal = yes}; /* Select unique NIRREC*/

  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "SA     "; /* Database action*/
    TA1REC.TA1LOCAT[3] = "IO5810 "; /* IO module*/
    TA1REC.TA1DBASE = "DNILO"; /* Database*/
    TA1REC.TA1TBLVU = "VPRORD01"; /* Table view*/
    XPNL005(); /* Abend routine*/
  end
end // end NI0USIP

// Load Orders Array
Function NI0USLO()

  NLXREC.NLXCPROC = "NI0USLO";

  NI0UW01.NI0UWARX = 1; /* Initialize array index*/
  NI0UW01.NI0UWACT = 0; /* Initialize array count*/
  move 0 to NI0UW01.NI0UWNOA[1] for all; /* Initialize new order array*/

  NI0UW01.NI0UWNM9 = NIWREC.NIQPROID;
                                   /* Load proforma# in case of abend*/
  TA1REC.TA1TBLKE = NI0UW01.NI0UWNM9;

   /* ****************************************/
     /* Open Proforma Order cursor*/
   /* ****************************************/

  set VPRORD01 empty;
  VPRORD01.NIQPROID = NIWREC.NIQPROID; /* Proforma# - key*/

  call "IO5810" ("S1", SQLCA, VPRORD01) {isNoRefresh = yes, isExternal = yes}; /* Select proforma orders*/

  if (SQLCA.VAGen_SQLCODE != 0) /* If hard error*/
    TA1REC.TA1LOCAT[2] = "S1     "; /* Database action*/
    TA1REC.TA1LOCAT[3] = "IO5810 "; /* IO module*/
    TA1REC.TA1DBASE = "DNILO "; /* Database*/
    TA1REC.TA1TBLVU = "VPRORD01"; /* Table view*/
    XPNL005(); /* Perform abend routine*/
    return;
  end

   /* ***************************************/
     /* Read through Proforma Order records*/
   /* ***************************************/

  NLXREC.NLXEOFF = "N"; /* init end of file flag*/

  while (NLXREC.NLXEOFF == "N") /* while more proforma order recs*/
    call "IO5810" ("N1", SQLCA, VPRORD01) {isNoRefresh = yes, isExternal = yes};
                                                  /* Fetch a proforma order*/
    if (SQLCA.VAGen_SQLCODE != 0)
      NLXREC.NLXEOFF = "Y"; /* end of file - get out of loop*/
    end

    if (NLXREC.NLXEOFF == "N") /* if not end of file*/
      NI0UW01.NI0UWACT = NI0UW01.NI0UWACT + 1; /* increment prof ord count*/
      /* *** Format array row ****/
      NI0UW01.NI0UWSEL[NI0UWACT] = " "; /* select cd*/
      NI0UW01.NI0UWCOR[NI0UWACT] = VPRORD01.OP1CUOID; /* cu ord#*/
      NI0UW01.NI0UWNOR[NI0UWACT] = VPRORD01.OP1NORID; /* nk ord#*/
      OP1REC.OP1PARTN = VPRORD01.OP1PARTN; /* build key*/
      OP1REC.OP1CUOID = VPRORD01.OP1CUOID;
      OP1REC.OP1NORID = VPRORD01.OP1NORID;
      NI0USIO(); /* Select unique - OP1REC*/
      if (SQLCA.VAGen_SQLCODE != 0)
        if (SQLCA.VAGen_SQLCODE != 100 /* If order not found*/
         && SQLCA.VAGen_SQLCODE != -911) /* Not deadlock nor timeout*/
          TA1REC.TA1LOCAT[2] = "S      "; /* Database action*/
          TA1REC.TA1LOCAT[3] = "IO0430 "; /* IO module*/
          TA1REC.TA1DBASE = "DORDER"; /* Database*/
          TA1REC.TA1TBLVU = "VORHDR01"; /* Table view*/
          XPNL005(); /* Abend routine*/
        else
          if (SQLCA.VAGen_SQLCODE == 100) /* Order not found*/
         /* order not found - blank out rest of array order line*/
            NI0UW01.XGPCD[NI0UWACT] = " "; /* gpc cd*/
            NI0UW01.XOBCD[NI0UWACT] = " "; /* type cd*/
            NI0UW01.XOCCD[NI0UWACT] = " "; /* ORDER TYPE*/
            NI0UW01.NI0UWYER[NI0UWACT] = " "; /* need dt*/
            NI0UW01.NI0UWSL1[NI0UWACT] = " ";
            NI0UW01.NI0UWMON[NI0UWACT] = " ";
            NI0UW01.NI0UWSL2[NI0UWACT] = " ";
            NI0UW01.NI0UWDAY[NI0UWACT] = " ";
            NI0UW01.XOSCD[NI0UWACT] = " "; /* status cd*/
            NI0UW01.KUMSTRID[NI0UWACT] = 0; /* store id*/
            NI0UW01.OP1CUPO[NI0UWACT] = " "; /* po#*/
          else
            if (SQLCA.VAGen_SQLCODE == -911) /* if deadlock or timeout*/
              return;
            end
          end
        end
      else
        NI0UW01.XGPCD[NI0UWACT] = OP1REC.XGPCD; /* gpc cd*/
        NI0UW01.XOBCD[NI0UWACT] = OP1REC.XOBCD; /* type cd*/
        NI0UW01.NI0UWDT9 = OP1REC.OP1CUNDT; /* need dt*/
        NI0UW01.NI0UWYER[NI0UWACT] = NI0UW01.NI0UWYR9;
        NI0UW01.NI0UWSL1[NI0UWACT] = "/";
        NI0UW01.NI0UWMON[NI0UWACT] = NI0UW01.NI0UWMN9;
        NI0UW01.NI0UWSL2[NI0UWACT] = "/";
        NI0UW01.NI0UWDAY[NI0UWACT] = NI0UW01.NI0UWDY9;
        NI0UW01.XOSCD[NI0UWACT] = OP1REC.XOSCD; /* status cd*/
        NI0UW01.XOCCD[NI0UWACT] = OP1REC.XOCCD; /* ORDER TYPE*/
        NI0UW01.KUMSTRID[NI0UWACT] = OP1REC.KUMSTRID; /* store id*/
        NI0UW01.OP1CUPO[NI0UWACT] = OP1REC.OP1CUPO; /* po#*/
      end
    end
  end

  if (SQLCA.VAGen_SQLCODE == 100) /* If end of file*/
    call "IO5810" ("C1", SQLCA, VPRORD01) {isNoRefresh = yes, isExternal = yes}; /* Close cursor*/
    if (NI0UW01.NI0UWACT > 0) /* Returned set is not empty*/
      NI0UW01.NI0UWOCT = NI0UW01.NI0UWACT;
      NI0UW01.NI0UWOSF = " ORDERS IN PROFORMA";
    else /* No orders found for proforma*/
      NI0UW01.NI0UWOMS = " "; /* Blank out order count msg*/
      if (SQLCA.VAGen_SQLCODE == 0) /* If proforma header found*/
        converseLib.validationFailed(210); /* Prof has no orders, and*/
      end /* will be deleted if none added*/
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "N1     "; /* Database action*/
  TA1REC.TA1LOCAT[3] = "IO5810 "; /* IO module*/
  TA1REC.TA1DBASE = "DNILO"; /* Database*/
  TA1REC.TA1TBLVU = "VPRORD01"; /* Table view*/
  XPNL005(); /* Abend routine for hard error*/
end // end NI0USLO

// Open PL Style Cursor (TSZREC)
Function NI0USOS()

  NLXREC.NLXCPROC = "NI0USOS";

  TSZREC.TSVPLNBR = NI0UW01.TSVPLNBR[NI0UWW2X]; /* PL style#*/

  call "IO4720" ("S1", SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "S1     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4720 "; /* io module*/
    TA1REC.TA1DBASE = "DTRANS"; /* database*/
    TA1REC.TA1TBLVU = "VNLPLS01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NI0USOS

// Process Proforma Delete
Function NI0USPD()
  NLXREC.NLXCPROC = "NI0USPD";

  NI0USDH(); /* Delete NIQREC (prof hdr)*/
  if (SQLCA.VAGen_SQLCODE == -911) /* If data base locked*/
    return; /* get out*/
  end

  VPRORD01.NIQPROID = NIWREC.NIQPROID; /* Proforma#*/
  VPRORD01.OP1CUOID = -1; /* All orders*/
  VPRORD01.OP1NORID = -1;
  NI0USDO(); /* Delete NIRREC (prof ord)*/
  if (SQLCA.VAGen_SQLCODE == -911) /* If data base locked*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* reset data base changes*/
    return; /* get out*/
  end

  NI0USDT(); /* Delete NISREC (prof txt)*/
  if (SQLCA.VAGen_SQLCODE == -911) /* If data base locked*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* reset data base changes*/
    return; /* get out*/
  end

  NI0USDI(); /* Delete NITREC (prof inco)*/
  if (SQLCA.VAGen_SQLCODE == -911) /* If data base locked*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* reset data base changes*/
    return; /* get out*/
  end
end // end NI0USPD

// Check PL for Proforma Orders
Function NI0USPL()

  NLXREC.NLXCPROC = "NI0USPL";

   /* *******************************************/
   /* ** Search orders existing before update ***/
   /* *******************************************/
  NI0UW01.NI0UWW1X = 0;
  if (VPRHDR01.NIQPRORS == "I")
    converseLib.validationFailed(243);
    NLXREC.NLXERRF = "Y";
    return;
  end
  while (NI0UW01.NI0UWW1X < NI0UW01.NI0UWACT)
                                   /* For each order in old array*/
    NI0UW01.NI0UWW1X = NI0UW01.NI0UWW1X + 1;
    if (NI0UW01.NI0UWSEL[NI0UWW1X] == " ") /* If order not deleted*/
      if (NI0UW01.XOBCD[NI0UWW1X] == "D1" /* If order req packing list*/
       || NI0UW01.XOBCD[NI0UWW1X] == "P1" 
       || NI0UW01.XOBCD[NI0UWW1X] == "P2" 
       || NI0UW01.XOBCD[NI0UWW1X] == "P3" 
       || NI0UW01.XOBCD[NI0UWW1X] == "P4" 
       || NI0UW01.XOBCD[NI0UWW1X] == "S1" 
       || NI0UW01.XOBCD[NI0UWW1X] == "B1")
        TSVREC.OP1CUOID = NI0UW01.NI0UWCOR[NI0UWW1X]; /* Build key*/
        TSVREC.OP1NORID = NI0UW01.NI0UWNOR[NI0UWW1X];
        NI0USEP(); /* Edit PL for order*/
        if (NLXREC.NLXERRF == "Y") /* If error occurred*/
          return; /* Get out*/
        end
      end
      if (NI0UW01.XOBCD[NI0UWW1X] == "F1" /* ORDER MUST HAVE PACKING LIST*/
       && NI0UW01.XGPCD[NI0UWW1X] == "03" 
       && NI0UW01.XOCCD[NI0UWW1X] == "IN")
        TSVREC.OP1CUOID = NI0UW01.NI0UWCOR[NI0UWW1X]; /* Build key*/
        TSVREC.OP1NORID = NI0UW01.NI0UWNOR[NI0UWW1X];
        NI0USEP(); /* Edit PL for order*/
        if (NLXREC.NLXERRF == "Y") /* If error occurred*/
          return; /* Get out*/
        end
      end
    end
  end

   /* *******************************/
   /* ** Search orders just added ***/
   /* *******************************/
  NI0UW01.NI0UWW1X = 0;
  while (NI0UW01.NI0UWW1X < 10)
                                   /* Up to 10 orders could have been added*/
    NI0UW01.NI0UWW1X = NI0UW01.NI0UWW1X + 1;
    if (NI0UW01.NI0UWNCO[NI0UWW1X] != 0) /* If new order exists*/
      if (NI0UW01.NI0UWNOB[NI0UWW1X] == "D1" /* If order req packing list*/
       || NI0UW01.NI0UWNOB[NI0UWW1X] == "P1" 
       || NI0UW01.NI0UWNOB[NI0UWW1X] == "P2" 
       || NI0UW01.NI0UWNOB[NI0UWW1X] == "P3" 
       || NI0UW01.NI0UWNOB[NI0UWW1X] == "P4" 
       || NI0UW01.NI0UWNOB[NI0UWW1X] == "S1" 
       || NI0UW01.NI0UWNOB[NI0UWW1X] == "B1")
        TSVREC.OP1CUOID = NI0UW01.NI0UWNCO[NI0UWW1X]; /* Build key*/
        TSVREC.OP1NORID = NI0UW01.NI0UWNNO[NI0UWW1X];
        NI0USEP(); /* Edit packing list for order*/
        if (NLXREC.NLXERRF == "Y") /* If error occurred*/
          return; /* Get out*/
        end
      end
      if (NI0UW01.NI0UWNOB[NI0UWW1X] == "F1" /* ORDER MUST HAVE Pl*/
       && VPRHDR01.XGPCD == "03"             
       && NI0UW01.NI0UWNOC[NI0UWW1X] == "IN")
        TSVREC.OP1CUOID = NI0UW01.NI0UWCOR[NI0UWW1X]; /* Build key*/
        TSVREC.OP1NORID = NI0UW01.NI0UWNOR[NI0UWW1X];
        NI0USEP(); /* Edit PL for order*/
        if (NLXREC.NLXERRF == "Y") /* If error occurred*/
          return; /* Get out*/
        end
      end
    end
  end
end // end NI0USPL

// Restore Proforma Header Fields
Function NI0USRH()
  NLXREC.NLXCPROC = "NI0USRH";

  VPRHDR01.ZCHCD[1] = NI0UW01.ZCHCD[1]; /* Misc charge codes*/
  VPRHDR01.ZCHCD[2] = NI0UW01.ZCHCD[2];
  VPRHDR01.ZCHCD[3] = NI0UW01.ZCHCD[3];
  VPRHDR01.NIGUSAMT[1] = NI0UW01.NIGUSAMT[1]; /* Misc charge amounts*/
  VPRHDR01.NIGUSAMT[2] = NI0UW01.NIGUSAMT[2];
  VPRHDR01.NIGUSAMT[3] = NI0UW01.NIGUSAMT[3];
  VPRHDR01.XLBCD = NI0UW01.XLBCD; /* Remit to*/
  VPRHDR01.XXXUSRID = NI0UW01.XXXUSRID; /* User id*/
  VPRHDR01.ZZZCHGCT = NI0UW01.ZZZCHGCT; /* Change count*/
end // end NI0USRH

// Security Level 1 - NI0U
Function NI0USS1()
   /* ****** this sets security for fields in group1*/

  NLXREC.NLXCPROC = "NI0USS1";

   /* ***************************************************/
   /* Determine if user is 'Inquiry only'...*/
   /* ***************************************************/

  NI0UW01.NI0UWINQ = "N"; /* Prepare for security check*/
  if (COMMAREA.CAADDFL == "N" /* If user can't add*/
   || COMMAREA.CACHGFL == "N" /* or user can't change*/
   || COMMAREA.CADELFL == "N") /* or user can't delete*/
    NI0UW01.NI0UWINQ = "Y"; /* User is inquiry only*/
  end
end // end NI0USS1

// Save Proforma Header Fields
Function NI0USSH()
  NLXREC.NLXCPROC = "NI0USSH";

  NI0UW01.ZCHCD[1] = VPRHDR01.ZCHCD[1]; /* Misc charge codes*/
  NI0UW01.ZCHCD[2] = VPRHDR01.ZCHCD[2];
  NI0UW01.ZCHCD[3] = VPRHDR01.ZCHCD[3];
  NI0UW01.NIGUSAMT[1] = VPRHDR01.NIGUSAMT[1]; /* Misc charge amounts*/
  NI0UW01.NIGUSAMT[2] = VPRHDR01.NIGUSAMT[2];
  NI0UW01.NIGUSAMT[3] = VPRHDR01.NIGUSAMT[3];
  NI0UW01.XLBCD = VPRHDR01.XLBCD; /* Remit to*/
  NI0UW01.XXXUSRID = VPRHDR01.XXXUSRID; /* User id*/
  NI0UW01.ZZZCHGCT = VPRHDR01.ZZZCHGCT; /* Change count*/
end // end NI0USSH

// Scan NIRREC for Prof Orders
Function NI0USSP()
  NLXREC.NLXCPROC = "NI0USIP";

  VPRORD01.OP1CUOID = NIWREC.NIQPROID; /* Build key*/

  call "IO5810" ("S1", SQLCA, VPRORD01) {isNoRefresh = yes, isExternal = yes}; /* Open NIRREC cursor*/

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "S1     "; /* Database action*/
    TA1REC.TA1LOCAT[3] = "IO5810 "; /* IO module*/
    TA1REC.TA1DBASE = "DNILO"; /* Database*/
    TA1REC.TA1TBLVU = "VPRORD01"; /* Table view*/
    XPNL005(); /* Abend routine*/
    return;
  end

  call "IO5810" ("N1", SQLCA, VPRORD01) {isNoRefresh = yes, isExternal = yes}; /* Get 1st NIRREC order*/

  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "N1     "; /* Database action*/
    TA1REC.TA1LOCAT[3] = "IO5810 "; /* IO module*/
    TA1REC.TA1DBASE = "DNILO"; /* Database*/
    TA1REC.TA1TBLVU = "VPRORD01"; /* Table view*/
    XPNL005(); /* Abend routine*/
    return;
  end

  if (SQLCA.VAGen_SQLCODE == 0)
    call "IO5810" ("C1", SQLCA, VPRORD01) {isNoRefresh = yes, isExternal = yes}; /* Close NIRREC cursor*/
  end
end // end NI0USSP

// Update Proforma Header
Function NI0USUH()
  NLXREC.NLXCPROC = "NI0USUH"; /* set current proc name*/

   /* load proforma header record with new values*/

  VPRHDR01.ZCHCD[1] = NI0UM100.ZCHCD[1];
  VPRHDR01.ZCHCD[2] = NI0UM100.ZCHCD[2];
  VPRHDR01.ZCHCD[3] = NI0UM100.ZCHCD[3];
  VPRHDR01.NIGUSAMT[1] = NI0UM100.NIGUSAMT[1];
  VPRHDR01.NIGUSAMT[2] = NI0UM100.NIGUSAMT[2];
  VPRHDR01.NIGUSAMT[3] = NI0UM100.NIGUSAMT[3];
  VPRHDR01.XLBCD = NI0UM100.XLBCD;
  VPRHDR01.XXXUSRID = NI0UM100.XXXUSRID;

   /* read control table*/

  call "IO5800" ("U ", SQLCA, VPRHDR01) {isNoRefresh = yes, isExternal = yes}; /* Update proforma header*/

  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "U      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4300 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO "; /* database*/
    TA1REC.TA1TBLVU = "VNLCTL01"; /* table view*/
    XPNL005(); /* abend routine*/
  end

end // end NI0USUH

//*** RECORD=NI0UW01 ****
// This is the main working storage record for NI0U
// ***********************
Record NI0UW01 type basicRecord
  5 NI0UWINQ NI0UWINQ ; 
  5 NI0UWPAG NI0UWPAG ; 
  5 NI0UWLCK NI0UWLCK ; 
  5 NI0UWDEL NI0UWDEL ; 
  5 NI0UWUPD NI0UWUPD ; 
  5 NI0UWACT NI0UWACT ; 
  5 NI0UWARX NI0UWARX ; 
  5 NI0UWCOX NI0UWCOX ; 
  5 NI0UWSCX NI0UWSCX ; 
  5 NI0UWW1X NI0UWW1X ; 
  5 NI0UWW2X NI0UWW2X ; 
  5 NI0UWPUW NI0UWPUW ; 
  5 NI0UWNM9 NI0UWNM9 ; 
  5 ZZZCHGCT ZZZCHGCT ; 
  5 * char(1) ; 
  5 NI0UWAMT NI0UWAMT ; 
    10 NI0UWDLR NI0UWDLR ; 
    10 NI0UWCNT NI0UWCNT ; 
  5 * char(1) ; 
  5 NI0UWDT9 NI0UWDT9 ; 
    10 NI0UWCEN NI0UWCEN ; 
    10 NI0UWYR9 NI0UWYR9 ; 
    10 NI0UWMN9 NI0UWMN9 ; 
    10 NI0UWDY9 NI0UWDY9 ; 
  5 * char(1) ; 
  5 NI0UWDTU NI0UWDTU ; 
    10 NI0UWMNU NI0UWMNU ; 
    10 NI0UWDYU NI0UWDYU ; 
    10 NI0UWYRU NI0UWYRU ; 
  5 * char(1) ; 
  5 TSVPLNBR TSVPLNBR [30] ; 
  5 * char(1) ; 
  5 NI0UWPHA NI0UWPHA ; 
    10 ZCHCD ZCHCD [3] ; 
    10 NIGUSAMT NIGUSAMT [3] ; 
    10 XLBCD XLBCD ; 
    10 XXXUSRID XXXUSRID ; 
  5 * char(3) ; 
  5 NI0UWNOA NI0UWNOA [10] ; 
    10 NI0UWNCO NI0UWNCO ; 
      15 * char(8) ; 
      15 OP1PARTN OP1PARTN ; 
    10 NI0UWNNO NI0UWNNO ; 
    10 NI0UWNOB NI0UWNOB ; 
    10 NI0UWNOC NI0UWNOC ; 
  5 * char(1) ; 
  5 NI0UWOAR NI0UWOAR [100] ; 
    10 NI0UWSEL NI0UWSEL ; 
    10 NI0UWCOR NI0UWCOR ; 
    10 NI0UWNOR NI0UWNOR ; 
    10 XGPCD XGPCD ; 
    10 XOBCD XOBCD ; 
    10 XOCCD XOCCD ; 
    10 NI0UWNDT NI0UWNDT ; 
      15 NI0UWMON NI0UWMON ; 
      15 NI0UWSL1 NI0UWSL1 ; 
      15 NI0UWDAY NI0UWDAY ; 
      15 NI0UWSL2 NI0UWSL2 ; 
      15 NI0UWYER NI0UWYER ; 
    10 XOSCD XOSCD ; 
    10 KUMSTRID KUMSTRID ; 
    10 OP1CUPO OP1CUPO ; 
  5 * char(1) ; 
  5 NI0UWPMS NI0UWPMS ; 
    10 NI0UWPPF NI0UWPPF ; 
    10 NI0UWPPR NI0UWPPR ; 
    10 NI0UWPSF NI0UWPSF ; 
  5 * char(1) ; 
  5 NI0UWOMS NI0UWOMS ; 
    10 NI0UWOCT NI0UWOCT ; 
    10 NI0UWOSF NI0UWOSF ; 
  5 * char(1) ; 
  5 NI0UWLMS NI0UWLMS ; 
    10 NI0UWLPF NI0UWLPF ; 
    10 NI0UWLCO NI0UWLCO ; 
    10 NI0UWLPE NI0UWLPE ; 
    10 NI0UWLNO NI0UWLNO ; 
    10 NI0UWLSF NI0UWLSF ; 
  5 * char(1) ; 
  5 NI0UWEMS NI0UWEMS ; 
    10 NI0UWEPF NI0UWEPF ; 
    10 NI0UWECO NI0UWECO ; 
    10 NI0UWEPE NI0UWEPE ; 
    10 NI0UWENO NI0UWENO ; 
    10 NI0UWESF NI0UWESF ; 
end // end NI0UW01

// Array count
DataItem NI0UWACT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nl-adj-amt
DataItem NI0UWAMT num(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Array index
DataItem NI0UWARX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// always '019'
DataItem NI0UWCEN char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cents
DataItem NI0UWCNT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-cust-ord-id
DataItem NI0UWCOR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// purged orders array index
DataItem NI0UWCOX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Day
DataItem NI0UWDAY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Delete confirmed (y/n)
DataItem NI0UWDEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dollars
DataItem NI0UWDLR num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// W/S version of cymd
DataItem NI0UWDT9 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date unformatted - MMDDYY
DataItem NI0UWDTU char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Day
DataItem NI0UWDY9 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Day
DataItem NI0UWDYU char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Order exists cust order number
DataItem NI0UWECO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Order exists message
DataItem NI0UWEMS char(68)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Order exists nike order number
DataItem NI0UWENO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Order exists error msg period
DataItem NI0UWEPE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Order exists error msg prefix
DataItem NI0UWEPF char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Order exists error msg suffix
DataItem NI0UWESF char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Inquiry only user(y/n)
DataItem NI0UWINQ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data base lock (y/n)
DataItem NI0UWLCK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PL error cust order number
DataItem NI0UWLCO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Packing List error msg
DataItem NI0UWLMS char(75)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PL error nike order number
DataItem NI0UWLNO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PL error msg period
DataItem NI0UWLPE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PL error msg prefix
DataItem NI0UWLPF char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PL error msg suffix
DataItem NI0UWLSF char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Month
DataItem NI0UWMN9 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Month
DataItem NI0UWMNU char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Month
DataItem NI0UWMON char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// New op-cust-ord-id
DataItem NI0UWNCO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Formatted need date
DataItem NI0UWNDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Numeric 9 work field
DataItem NI0UWNM9 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// New op-nike-ord-id
DataItem NI0UWNNO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// New Order Array
DataItem NI0UWNOA num(15)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// New xob_base_ot_cd
DataItem NI0UWNOB char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// New xoc-ord-cls-cd
DataItem NI0UWNOC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-nike-ord-id
DataItem NI0UWNOR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Order Array
DataItem NI0UWOAR char(55)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Order msg count amt
DataItem NI0UWOCT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Order count msg
DataItem NI0UWOMS char(27)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Order msg suffix
DataItem NI0UWOSF char(24)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Order array page load (y/n)
DataItem NI0UWPAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Proforma Header Array
DataItem NI0UWPHA char(31)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Print submitted msg
DataItem NI0UWPMS char(46)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Print msg prefix
DataItem NI0UWPPF char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Print msg performa#
DataItem NI0UWPPR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Print msg suffix
DataItem NI0UWPSF char(28)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Pop-up window switch
DataItem NI0UWPUW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Screen index
DataItem NI0UWSCX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Invoice Selected field
DataItem NI0UWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// / (slash)
DataItem NI0UWSL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// / (slash)
DataItem NI0UWSL2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Updated Proforma Header (y/n)
DataItem NI0UWUPD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Work index 1
DataItem NI0UWW1X smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work index 2
DataItem NI0UWW2X smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Year
DataItem NI0UWYER char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Year
DataItem NI0UWYR9 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Year
DataItem NI0UWYRU char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

