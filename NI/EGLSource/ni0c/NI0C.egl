package ni0c;

import corpcom2.XX0XW01;
import corpcom2.XZCREC;
import corpcom3.XPNI001;
import corpcom3.XPNL002;
import corpcom3.XPNL003;
import corpcom3.XPNL004;
import corpcom3.XPNL005;
import corpcom4.XSENTRY;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XATCD;
import corpx1.XAUTBL;
import corpx1.XCTTBL;
import corpx1.XDSTBL;
import corpx1.XGPTBL;
import corpx1.XLATBL;
import corpx1.XOBTBL;
import corpx1.XOCTBL;
import corpx1.XPTTBL;
import corpx1.XWHTBL;
import corpz3.ZDTTBL;
import corpz3.ZISCD;
import corpz3.ZISTBL;
import corpz3.ZPRTBL;
import corpz3.ZPSTBL;
import ku.common.KUCREC;
import ni.common.NIWREC;
import nl.common.NLXREC;
import op.common.OP1REC;
import ta.common.TA1REC;
import vv.common.VPIADJ01;
import vv.common.VPIHDR01;
import vv.common.VPITXT01;
import vv.common.VRQTHD01;
import vv.common.VRQTXT01;
import vv.common.VZFC0001;
//*** PROGRAM=NI0C ****
// Invoice Inquiry - Header Information
// ....
//      This is an Invoice Inquiry application that is specific
// to a given product invoice.  Additional screens for viewing
// Product Summary, Address and Miscellaneous charges can be
// accessed using either Program Function keys or the Enter key
// .
// Maintenance
//    Date      Who    Remarks
// -----------  ------ ------
// 11-06-89     tgriff Moved to Production.
// 01-03-90     jbaker Reset request header row for credit
//                     function same as void in ni0c001.
// 03-28-90     jjohns Change void logic to include future
//                     invoice dates in process 120.
// 08-13-90     jshann Added G/L receivable to NI0CM100
// 02-28-91     jshann Added CERTIFICATE OF ORIGIN PRINT PF10
// 02-28-91     LNGO   Added COMP NUM ON SCREEN
// 06-11-91     jshann installed certificate of origin
// 06-19-91     LNGO   Add three edits to prevent batch program
//                     from abending (request # 399 and 407).
// 10-29-91     LNGO   Add Ultimate Country description to
//                     NI0CM NI0CM100 screen.
// 12-05-91     jshann Fix status of invoice when order has
//                     been purged, now it makes it a void,opps
// 12-06-91     jshann Allow users with CACLVL(2) = 'y' to up-
//                     date invoice gl code and source code
// 12-23-91     jshann prevent update of userid1 when void
// 03-31-92     jshann RENAMED XXXUSER1 TO XXXUSID1 (STANDARDS)
// 05-08-92     jshann Added the logic for submitting a shipper
//                     export declaration.
// 10-05-92     jjudki Execute xx0xs01 before nierec.zzzchgdt
//                     update.
// 10-14-92     jjudki OCT DB changes.
// 11-18-92     jjudki Remove zfctbl from table list. Use io
//                     mod dc0060 for zfcdesc in xpni001.
// 02-23-93     dkingm corrected problem with ni/nk print.
// 03-01-93     jjudki Add PF16 exit to view invoice comments
//                     in NI0O map200.
// 05-04-93     jjudki Compare post date to corp. calender in
//                    in map100 and map200.
// 05-26-93     jjudki Prevent abend if request hdr not found
//                    in ni0cs10.
// 10-11-93     ahowar Added "RI" as valid ivc upd.
// 10-22-93     kshaw  added material of content print logic
// 07-26-94     ahowar added harmonized code for ftwr
// -----------  ------ ------
// 02-20-98     NGANGO Y2K MODIFICATION - RECOMPILED TO PICKUP
//                     THE CHANGES FOR XX0XS01.
// -----------  ------ ------
// *********************
Program NI0C type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "NL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  NI0CW01 NI0CW01; // record
  NIWREC NIWREC; // record
  NLXREC NLXREC; // record
  OP1REC OP1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  VPIADJ01 VPIADJ01; // record
  VPIHDR01 VPIHDR01; // record
  VPITXT01 VPITXT01; // record
  VRQTHD01 VRQTHD01; // record
  VRQTXT01 VRQTXT01; // record
  VZFC0001 VZFC0001; // record
  XX0XW01 XX0XW01; // record
  XZCREC XZCREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XAUTBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use XOBTBL {deleteAfterUse = yes}; // table
  use XOCTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XLATBL {deleteAfterUse = yes}; // table
  use XPTTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use XDSTBL {deleteAfterUse = yes}; // table
  use ZPRTBL {deleteAfterUse = yes}; // table
  use ZISTBL {deleteAfterUse = yes}; // table
  use ZPSTBL {deleteAfterUse = yes}; // table
  use ZDTTBL {deleteAfterUse = yes}; // table
  use NI0CM.NI0CM100,  // forms
      NI0CM.NI0CM200
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    NI0C000: NI0C000();
    ;
    ;
    exit program;
    ;
    ;
    ;
  end // end main
end // end NI0C

// application main logic
Function NI0C000()
  ;
   /* -----------------------------------------------------------*/
      /* this is the "main logic" for the application.*/
  ;
      /* xsentry checks to ensure that this application was*/
            /* entered from another csp application.*/
  ;
   /* -----------------------------------------------------------*/
  ;
  ;
  NI0C001(); /* initilize the application*/
  ;
  ;
  ;
  NLXREC.NLXEOAF = "N"; /* set end-of-application flag to 'no'*/
  ;
  while (NLXREC.NLXEOAF == "N") /* while not end-of-aplication*/
    NI0C050(); /* screen branch control*/
  end
  ;
  XSPF4();
  ;
  ;
end // end NI0C000

// initialize application
Function NI0C001()
   /* ----------------------------------------------------------*/
         /* Initialize the application working storage*/
  ;
   /* -----------------------------------------------------------*/
  ;
  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen converse*/
  VGVar.handleHardIOErrors = 1; /* return control to program if hard db2 error*/
  ;
  ;
  XSENTRY(); /* check entry thru main menu*/
  XSSEGTR(); /* set segmented transaction id*/
  ;
  set SQLCA empty; /* clear out the "common" working*/
                                   /* storage*/
  set ERRSQLCA empty; /* clear out the "common" working*/
                                   /* storage*/
  set TA1REC empty; /* clear out the "common" working*/
                                   /* storage*/
  set NLXREC empty; /* clear out the "common" working*/
                                   /* storage*/
  set NI0CW01 empty; /* clear application working storage*/
  set VPIHDR01 empty;
  set VPITXT01 empty;
  set VPIADJ01 empty;
  set VRQTHD01 empty;
  set NIWREC empty;
  set KUCREC empty;
  set XZCREC empty;
  ;
  NI0CW01.NI0CWPF5 = "N"; /* initialize pf5 flag*/
  if (COMMAREA.CAFRMSYS != "NI")
    COMMAREA.CAUSERA = " ";
  end
  ;
  NLXREC.NLXEOAF = "N"; /* set end-of-application flag 'no'*/
  NLXREC.NLXERRF = "N"; /* set error-flag to 'no'*/
  ;
   /* ------------------------------------------------------*/
    /* Set up working-storage array of screen names*/
   /* ------------------------------------------------------*/
  ;
  NLXREC.NLXCSCRN = "NI0CM100"; /* first header*/
  ;
  NLXREC.NLXSNAME[1] = "NI0CM100";
                                   /* init screens used in this applic.*/
  NLXREC.NLXSNAME[2] = "NI0CM200";
  ;
   /* **********************************************/
   /* Was this application entered via 'fastpath'?*/
   /* **********************************************/
  if (COMMAREA.CAITEM != " ") /* 'Item' will be non-blank if fastpath*/
    ;
    XPNL004(); /* Validate caitem numeric*/
    ;
    if (NLXREC.NLXERRF == "Y") /* If error in 'item'*/
      NIWREC.NIWMSGNR = 32; /* Clear work area for key*/
      COMMAREA.CATOAP = "NI0A";
      COMMAREA.CAUSERA = NIWREC.NIWGROUP;
      XPNL002();
    else
      NIWREC.NIWIAIDX = 1;
      NIWREC.NIWIAIVC[NIWIAIDX] = NLXREC.NLXNUM8A;
      VPIHDR01.NIDIVCID = NLXREC.NLXNUM8A; /* Load key*/
      XPNI001(); /* Load passed fields*/
      ;
    end
    ;
    COMMAREA.CATOAP = " "; /* Clear commarea*/
    COMMAREA.CAITEM = " ";
    ;
  else /* Normal function key transfer in*/
    if (COMMAREA.CAUSERA != " ")
      NIWREC.NIWGROUP = COMMAREA.CAUSERA;
      ;
      if (COMMAREA.CAFROMAP == "NI0O")
        NLXREC.NLXCSCRN = NIW-SENDING-MAP;
      end
      ;
      if (COMMAREA.CAFROMAP == "NI0P") /* Returning from 'Submit'?*/
        if (NIWREC.NIWMSGNR == 0) /* Without error message*/
          if (NIWREC.NIWSBIND == "R") /* During 'reprint'*/
            NLXREC.NLXERRF = "Y";
            converseLib.validationFailed(90); /* Invoice is 'REPRINTED'*/
            return;
          end
          if (NIWREC.NIWSBIND == "E") /* During 'reprint'*/
            NLXREC.NLXERRF = "Y";
            converseLib.validationFailed(254); /* Shipper's export declaration print*/
            return;
          end
          if (NIWREC.NIWSBIND == "O") /* During 'reprint'*/
            NLXREC.NLXERRF = "Y";
            converseLib.validationFailed(173); /* CERTIFICATE IS PRINTED*/
            return;
          else
            if (NIWREC.NIWSBIND == "V" /* 'Void' type process*/
             || NIWREC.NIWSBIND == "C") /* 'Credit' type process*/
              ;
              VPIHDR01.NIDIVCID = NIWREC.NIWIAIVC[NIWIAIDX];
              NI0CS01(); /* Select unique Invoice header*/
              XX0XS01(); /* Get current date in ccyymmdd*/
              /* format Inv Req key*/
              VRQTHD01.TSFSHPID = VPIHDR01.TSFSHPID;
              VRQTHD01.OP1CUOID = VPIHDR01.OP1CUOID;
              VRQTHD01.OP1NORID = VPIHDR01.OP1NORID;
              NI0CS10(); /* Select unique Inv Req table*/
              if (SQLCA.VAGen_SQLCODE == 0)
                VRQTHD01.TSFSHPID = VPIHDR01.TSFSHPID;
                VRQTHD01.OP1CUOID = VPIHDR01.OP1CUOID;
                VRQTHD01.OP1NORID = VPIHDR01.OP1NORID;
                VRQTHD01.NIOIND = "D"; /* Set inv prt status to draft*/
                 /* Set inv req status to in-process*/
                VRQTHD01.NIOISTAT = "I";
                VRQTHD01.ZZZCHGDT = XX0XW01.XX0XWDAT;
                VRQTHD01.ZZZCHGTM = XX0XW01.XX0XWTIM;
                ;
                NI0CS09(); /* Update Invoice req table*/
                ;
              end
                         /* IF NIEREC.ZISCD EQ 'CR';*/
              if (NIWREC.NIWSBIND == "C")
                ;
                NI0CW01.ZISCD = "CR"; /* Set Invoice status to credit*/
                NI0CS14(); /* Update Invoice Header record*/
                NLXREC.NLXERRF = "Y";
                converseLib.validationFailed(139); /* Invoice is 'CREDITED'*/
                return;
              else
                ;
                NI0CW01.ZISCD = "VD"; /* Set Invoice status to void*/
                NI0CS14(); /* Update Invoice Header record*/
                NLXREC.NLXERRF = "Y";
                converseLib.validationFailed(140); /* Invoice is 'VOIDED'*/
                return;
              end
            end
          end
        else
          NLXREC.NLXERRF = "Y";
          if (NIWREC.NIWMSGNR == 9999)
            converseLib.validationFailed();
          else
            converseLib.validationFailed(NIWREC.NIWMSGNR);
          end
          return;
        end
      end
      ;
      NI0CW01.NI0CWIIX = NIWREC.NIWIAIDX;
      ;
      if (NIWREC.NIWIAIDX < 1
       || NIWREC.NIWIAIDX > 100)
        NIWREC.NIWMSGNR = 32; /* Clear work area for key*/
        COMMAREA.CATOAP = "NI0A";
        COMMAREA.CAUSERA = NIWREC.NIWGROUP;
        XPNL002();
      end
    else
      NIWREC.NIWMSGNR = 32; /* Clear work area for key*/
      COMMAREA.CATOAP = "NI0A";
      COMMAREA.CAUSERA = NIWREC.NIWGROUP;
      XPNL002();
    end
  end
end // end NI0C001

// screen branch control
Function NI0C050()
  ;
   /* -----------------------------------------------------------*/
      /* control process the application screen(s)*/
  ;
     /* note that this process is being performed in a*/
     /* "while loop" until the end-of-application flag is set*/
     /* to 'y'.*/
  ;
   /* -----------------------------------------------------------*/
  ;
  NLXREC.NLXCPROC = "NI0C050"; /* set current process name*/
  ;
  ;
  sysVar.arrayIndex = 0;
  NLXREC.NLXSCRNX = 0;
  ;
  if (NLXREC.NLXCSCRN in NLXREC.NLXSNAME)
     /* if current-screen-name is in the screen-array, then set*/
     /* the screen-index*/
    NLXREC.NLXSCRNX = sysVar.arrayIndex;
  end
  ;
  ;
  NLXREC.NLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
  NLXREC.NLXBLDSC = "Y"; /* set build screen flag to 'yes'*/
  NLXREC.NLXERRF = "N"; /* clear error flag*/
  ;
  if (NLXREC.NLXSCRNX == 1) /* if screen NI0Cm100*/
    while (NLXREC.NLXEOSF == "N") /* while not end-of-screen*/
      NI0C100();
    end
  else
    if (NLXREC.NLXSCRNX == 2) /* if screen NI0Cm200*/
      while (NLXREC.NLXEOSF == "N") /* while not end-of-screen*/
        NI0C200();
      end
    end
  end
  ;
  ;
   /* at this point;*/
       /* if the end-of-application flag (nlxeoaf ) = 'n'*/
         /* the perform will return to the top of ni0%050...*/
       /* else*/
         /* the perform will auto return to ni0%000.*/
  ;
  ;
end // end NI0C050

// header screen 1
Function NI0C100()
  ;
   /* -----------------------------------------------------------*/
       /* process screen NI0Cm100*/
  ;
     /* note - this process is being performed in a*/
        /* "while loop" from NI0C050 until the end-of-screen*/
        /* flag (nlxeosfl) is set to 'y'.*/
  ;
   /* -----------------------------------------------------------*/
  ;
  NLXREC.NLXCPROC = "NI0C100";
  ;
  if (NLXREC.NLXBLDSC == "Y")
    NI0C101();
    NLXREC.NLXBLDSC = "N";
  end
  ;
  converse NI0CM100 ;
  ;
  NI0CM100.VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";
  ;
  ;
  NI0C110(); /* check attention identifier*/
  ;
  if (NLXREC.NLXERRF == "N") /* check for error*/
    NI0C120(); /* process entered option*/
  end
  ;
  if (NLXREC.NLXERRF == "N") /* check for error*/
    NI0C130(); /* determine next action...*/
  end
  ;
  ;
end // end NI0C100

// build screen
Function NI0C101()
   /* **************************************/
   /* Build MAP NI0CM100                 **/
   /* **************************************/
  ;
  ;
  NLXREC.NLXCPROC = "NI0C101";
  ;
  converseLib.clearScreen();
  set NI0CM100 initial;
  ;
  NI0CM100.XXXRVNBR = "00"; /* revision nbr*/
  NI0CM100.XXXMAPNM = "NI0CM100"; /* map name*/
  NI0CM100.XXXPRCNM = "NI0C100"; /* process name*/
  NI0CM100.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  ;
   /* Load out current invoice number...*/
  ;
  VPIHDR01.NIDIVCID = NIWREC.NIWIAIVC[NIWIAIDX];
  ;
  XPNI001(); /* Get all P/I info*/
  ;
   /* get the ultimate dest. (country) description.*/
  if (VPIHDR01.XCTCD in XCTTBL.XCTCD)
    NI0CW01.NI0CWXDC = XCTTBL.XCTDESC[sysVar.arrayIndex];
  end
  NI0CM100.XCTDESC1 = NI0CW01.NI0CWXDC;
  ;
  ;
  NI0CM100.NIDIVCID = NIWREC.NIWIAIVC[NIWIAIDX];
  NI0CW01.NI0CWCUO = NIWREC.OP1CUOID; /* Load map fields*/
  NI0CW01.NI0CWNOR = NIWREC.OP1NORID;
  NI0CM100.NI0CMORD = NI0CW01.NI0CWORD;
  ;
  NI0CW01.NI0CWKUC = NIWREC.KUCCOID;
  NI0CW01.NI0CWKUM = VPIHDR01.KUMSTRID;
  NI0CM100.NI0CMCST = NI0CW01.NI0CWCST;
  ;
  NI0CM100.XXXADR1 = NIWREC.XXXADR1;
  NI0CM100.OP1CMPNB = VPIHDR01.OP1CMPNB;
  ;
  NI0CM100.KUCCONM = NIWREC.KUCCONM;
  NI0CM100.XCTDESC = NIWREC.XCTDESC;
  NI0CM100.NIWSTAB = NIWREC.NIWSTAB;
   /* MOVE NIWREC.ZFCABRV TO NI0CM100.ZFCABRV;*/
  NI0CM100.ZFCABRV = "US$";
  NI0CM100.ZFCXRATE = VPIHDR01.NL-EXCHG-RATE;
  ;
  NI0CM100.NIAIVCDT = VPIHDR01.NIAIVCDT;
  NLXREC.XXXWCYMD = VPIHDR01.OP1CUNDT;
  ;
  XPNL003();
  ;
  NI0CM100.OP1CUNDT = NLXREC.XXXFLDT;
  ;
  NI0CM100.OP1CUPO = VPIHDR01.OP1CUPO;
  NI0CM100.OP1IPIND = VPIHDR01.OP1IPIND;
  ;
  NI0CW01.NI0CWPMO = VPIHDR01.NIAGLPMO;
  NI0CW01.NI0CWPYR = NI0CW01.NI0CWPYY;
  NI0CW01.NI0CWPMN = NI0CW01.NI0CWPMM;
  NI0CW01.NI0CWDSH = "-";
  NI0CM100.NIAGLPMO = NI0CW01.NI0CWPYM;
  ;
  NI0CM100.NIAIVAMT = VPIHDR01.NIAIVAMT;
  NI0CM100.NIETUNIT = VPIHDR01.NIETUNIT;
  NI0CM100.NIETITEM = VPIHDR01.NIETITEM;
  ;
   /* ************************************/
   /* Get International Account Rep name*/
   /* ************************************/
  ;
  if (VPIHDR01.XXXUSRID in ZPRTBL.XXXUSRID)
    NI0CM100.KUYREPNM = ZPRTBL.XXXUNTXT[sysVar.arrayIndex];
  end
  NI0CM100.SALEREPD = VPIHDR01.XXXUSRID;
  ;
   /* **********************/
   /* Get Document Type abbr*/
   /* **********************/
  ;
  NI0CM100.ZDTABRV = NIWREC.ZDTABRV;
   /* **********************************/
   /* Get Base Order type abbreviation*/
   /* **********************************/
  ;
  NI0CM100.XOBCD = VPIHDR01.XOBCD;
  if (VPIHDR01.XOBCD in XOBTBL.XOBCD)
    NI0CM100.XOBABRV = XOBTBL.XOBABRV[sysVar.arrayIndex];
  end
  ;
   /* ******************************/
   /* Get Order Class abbreviation*/
   /* ******************************/
  ;
  NI0CM100.XOCCD = VPIHDR01.XOCCD;
  if (VPIHDR01.XOCCD in XOCTBL.XOCCD)
    NI0CM100.XOCABRV = XOCTBL.XOCABRV[sysVar.arrayIndex];
  end
  ;
   /* *******************************/
   /* Get Freight Terms Description*/
   /* *******************************/
  ;
  if (VPIHDR01.OP1FTIND == "Y")
    NI0CM100.NI0CMFRT = "PREPAID";
  else
    if (VPIHDR01.OP1FTIND == "N")
      NI0CM100.NI0CMFRT = "COLLECT";
    end
  end
  ;
   /* ********************/
   /* Get G/L Receivable*/
   /* ********************/
  ;
  NLXREC.GLAENT = VPIHDR01.NIEENT1;
  NLXREC.GLARCID = VPIHDR01.NIERCID1;
  NLXREC.GLANTAC = VPIHDR01.NIENTAC1;
  NLXREC.GLASUB = VPIHDR01.NIESUB1;
  NLXREC.GLAPRJ = VPIHDR01.NIEPRJ1;
  NI0CM100.NIEMGLRE = NLXREC.GLAGRP;
  ;
   /* ***********************************************/
   /* set gl and comp number to allow updating*/
   /* compare header post month to corp calendar*/
   /* ***********************************************/
  ;
  if (COMMAREA.CACLVL[2] == "Y")
    set NI0CM100.NIEMGLRE initialAttributes;
    NI0CM100.NI0CM-PF6-KEY = "6:Update";
    XX0XS01(); /* Get current date and time*/
    XZCREC.XZCCLNDT = XX0XW01.XX0XWDAT;
    NI0CS03(); /* select unique corporate calendar*/
    if (VPIHDR01.NIAGLPMO >= XZCREC.XZCGLPM2) /* Compare to 2nd Post Month*/
      set NI0CM100.OP1CMPNB initialAttributes;
    else
      set NI0CM100.OP1CMPNB skip;
    end
  else
    set NI0CM100.NIEMGLRE skip;
    set NI0CM100.OP1CMPNB skip;
  end
   /* ******************************************/
   /* Get the user id and name of the person **/
   /* who previously voided/credited a part- **/
   /* icular invoice.                        **/
   /* ******************************************/
  ;
  if (VPIHDR01.ZISCD == "VD"
   || VPIHDR01.ZISCD == "CR")
    ;
    set NI0CM100.NI0CMVCT initialAttributes;
    set NI0CM100.NI0CMDVT initialAttributes;
    set NI0CM100.NIEUSR1 initialAttributes;
    set NI0CM100.ZPRUNTXT initialAttributes;
    set NI0CM100.NIEVOIDT initialAttributes;
    ;
    if (VPIHDR01.XXXUSID1 in ZPRTBL.XXXUSRID)
      NI0CM100.NIEUSR1 = ZPRTBL.XXXUNTXT[sysVar.arrayIndex];
    end
    if (sysVar.arrayIndex > 0)
      NI0CM100.ZPRUNTXT = ZPRTBL.XXXUNTXT[sysVar.arrayIndex];
      NI0CM100.NIEUSR1 = ZPRTBL.XXXUSRID[sysVar.arrayIndex];
    else
      NI0CM100.NIEUSR1 = VPIHDR01.XXXUSID1;
      NI0CM100.ZPRUNTXT = " ";
    end
    NI0CM100.NIEVOIDT = VPIHDR01.ZZZCHGDT;
  else
    set NI0CM100.NI0CMVCT skip, invisible;
    set NI0CM100.NI0CMDVT skip, invisible;
  end
  ;
end // end NI0C101

// validate PF keys; act on some
Function NI0C110()
   /* -----------------------------------------------------------*/
     /* Validate PF keys*/
  ;
   /* Active PF keys: 1, 3, 4, 5, 9, 10, 11, 14, 15, 16, 19, 20 and 24*/
   /* -----------------------------------------------------------*/
  ;
  ;
  set NI0CM100.CATOAP initialAttributes;
  set NI0CM100.CAITEM initialAttributes;
  if (NI0CM100.OP1CMPNB is modified
   && NI0CM100.OP1CMPNB != VPIHDR01.OP1CMPNB)
    set NI0CM100.OP1CMPNB modified;
  end
  ;
   /* ***********************************/
      /* check for fastpath option/item*/
   /* ***********************************/
  ;
  if (NI0CW01.NI0CWPF5 == "Y") /* reprint requested*/
    if (converseVar.eventKey is pf5
     || converseVar.eventKey is pf22)
      return;
    else
      NI0CW01.NI0CWPF5 = "N"; /* reset pf5 flag to off*/
    end
  end

  if (converseVar.eventKey is enter
   && NI0CM100.CATOAP == "NI0O")
    converseLib.validationFailed(387); /* Use pf16 to view invoice comments*/
    NLXREC.NLXERRF = "Y";
    set NI0CM100.CATOAP cursor, bold;
    return;
  end
  ;
  if (converseVar.eventKey is enter)
    if (NI0CM100.CATOAP != " " /* if fastpath option entered,*/
     && NI0CM100.CATOAP != "NI0O")
      COMMAREA.CATOAP = NI0CM100.CATOAP;
      COMMAREA.CAITEM = NI0CM100.CAITEM;
      COMMAREA.CAUSERA = " ";
      XPNL002(); /* exit application*/
    end
  end
  ;
  ;
  if (converseVar.eventKey is enter /* normal 'enter'*/
   || converseVar.eventKey is pf5   
   || converseVar.eventKey is pf9   
   || converseVar.eventKey is pf10  
   || converseVar.eventKey is pf11  
   || converseVar.eventKey is pf21)
    if (NI0CM100.OP1CMPNB is modified)
      converseLib.validationFailed(240);
      NLXREC.NLXERRF = "Y";
    end
    return;
  end
  ;
  if (converseVar.eventKey is pf2 /* skip edit/updt, go to 'help'*/
   || converseVar.eventKey is pf14
   || converseVar.eventKey is pf15)
    if (NI0CM100.OP1CMPNB is modified)
      converseLib.validationFailed(240);
      NLXREC.NLXERRF = "Y";
      return;
    end
  end
  if (converseVar.eventKey is pf1) /* skip edit/updt, go to 'help'*/
    XSPF1();
  end
  ;
  ;
  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "NI0A"; /* go to sel menu*/
    COMMAREA.CAUSERA = " ";
    XPNL002(); /* exit application*/
  end
  ;
  ;
  if (converseVar.eventKey is pf4) /* go to master menu*/
    COMMAREA.CAUSERA = " ";
    XSPF4();
  end
  ;
  if (converseVar.eventKey is pf14)
    COMMAREA.CATOAP = "NI0E"; /* go to address inquiry*/
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002(); /* exit application*/
  end
  ;
  if (converseVar.eventKey is pf15)
    /* MOVE 'Y' TO NLXREC.NLXERRF;*/
    /* MOVE 'APPLICATION NOT AVAILABLE' TO NI0CM100.EZEMSG;*/
    /* EZERTN;*/
    COMMAREA.CATOAP = "NI0F"; /* misc charges*/
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002(); /* exit*/
  end
  ;
  if (converseVar.eventKey is pf16)
    COMMAREA.CAFROMAP = "NI0C";
    COMMAREA.CATOAP = "NI0O"; /* go to view invoice comments*/
    NIW-SENDING-MAP = "NI0CM100";
    NIWREC.NIDIVCID = NI0CM100.NIDIVCID;
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002(); /* exit application*/
  end
  ;
  if (converseVar.eventKey is pf20)
    COMMAREA.CATOAP = "NI0J"; /* NIL menu*/
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002(); /* exit*/
  end
  ;
  if (converseVar.eventKey is pf2
   || converseVar.eventKey is pf18)
    if (NI0CW01.NI0CWPF9 == "Y")
      return;
    end
  end
  ;
  if (converseVar.eventKey is pf6
   && COMMAREA.CACLVL[2] == "Y")
    XX0XS01(); /* get date and time*/
    XZCREC.XZCCLNDT = XX0XW01.XX0XWDAT;
    NI0CS03(); /* Get 2nd post month for comparison to*/
                                   /* header post month*/
    if (VPIHDR01.NIAGLPMO >= XZCREC.XZCGLPM2)
      set NI0CM200.ZPSCD initialAttributes;
    else
      set NI0CM200.ZPSCD skip;
    end
    return;
  end
      /* pf key not valid*/
  ;
  converseLib.validationFailed(2); /* pf key not valid*/
  NLXREC.NLXERRF = "Y"; /* mark with error*/
  ;
  ;
end // end NI0C110

// Edit/Act on function keys
Function NI0C120()
   /* -----------------------------------------------------------*/
     /* Edit Pf key requests*/
  ;
     /* Active PF keys:  5, 9, 10, 19, 21 and 24 ---*/
   /* -----------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf5) /* Reprint requested*/
    if (VPIHDR01.ZISCD == "VD" /* Invoice is void*/
     || VPIHDR01.ZISCD == "CR") /* Invoice has been credited*/
      converseLib.validationFailed(51); /* Invoice may not be reprinted*/
      NLXREC.NLXERRF = "Y";
    else
      if (VPIHDR01.ZDTCD == "MC")
        if (NI0CW01.NI0CWPF5 == "N") /* first time through*/
          NI0CW01.NI0CWPF5 = "Y"; /* set pf5 flag to on*/
          converseLib.validationFailed(417); /* select pf5 or pf22*/
          NLXREC.NLXERRF = "Y"; /* process no further*/
          return; /* get the hell out of Dodge*/
        end /* end first time through*/
      else
        NI0CW01.NI0CWIND = "R"; /* reprint*/
        NI0CS15(); /* transfer to submitter*/
      end /* end if zdtcd = mc*/
    end /* end if void*/
  end /* edit pf5*/
  ;
  if (NI0CW01.NI0CWPF5 == "Y") /* first time through*/
    NI0CW01.NI0CWPF5 = "N"; /* second time through reset flag*/
                                  /* used by pf5 validated prompt*/
    ;
    if (converseVar.eventKey is pf5) /* green bar request*/
      NIWREC.NIWPRTREQ = "G"; /* set print request*/
    end
    if (converseVar.eventKey is pf22) /* form stock request*/
      NIWREC.NIWPRTREQ = "F"; /* set print request*/
    end
    NI0CW01.NI0CWIND = "R"; /* reprint*/
    NI0CS15(); /* transfer to submitter*/
  end
  ;
  ;
   /* ************************************/
   /* Process CERTIFICATE OF ORIGIN*/
   /* ************************************/
  ;
  if (converseVar.eventKey is pf10) /* CERTIFICATE PRINT requested*/
    if (VPIHDR01.ZISCD == "VD" /* Invoice is void*/
     || VPIHDR01.ZISCD == "CR") /* Invoice has been credited*/
      converseLib.validationFailed(174); /* CERTIFICATE may not be printed*/
      NLXREC.NLXERRF = "Y";
    else
      ;
      NI0CW01.NI0CWIND = "O"; /* print*/
      NI0CS15(); /* transfer to submitter*/
      ;
    end
  end
  if (converseVar.eventKey is pf11) /* SHIPPER'S EXPORT DECLARATION*/
    if (VPIHDR01.ZISCD == "VD" /* Invoice is void*/
     || VPIHDR01.ZISCD == "CR") /* Invoice has been credited*/
      converseLib.validationFailed(256); /* DECLERATION may not be printed*/
      NLXREC.NLXERRF = "Y";
    else
      NI0CS-EDIT-GPC(); /* declerations only for gpc 03 for now.*/
      if (NLXREC.NLXERRF == "N")
        NI0CW01.NI0CWIND = "E"; /* print*/
        NI0CS15(); /* transfer to submitter*/
      end
    end
  end
  ;
   /* ************************************/
   /* Process initial request for 'Void'*/
   /* ************************************/
  ;
  if (converseVar.eventKey is pf9) /* 'Void' request*/
    if (COMMAREA.CACHGFL == "Y") /* User has change capability*/
      if (VPIHDR01.ZISCD == "VD" /* Invoice is void*/
       || VPIHDR01.ZISCD == "CR") /* Invoice has been credited*/
        converseLib.validationFailed(112); /* Invoice may not be voided*/
        NLXREC.NLXERRF = "Y";
      else
        ;
        XX0XS01(); /* Get current date in cccyymmdd*/
        ;
        XZCREC.XZCCLNDT = XX0XW01.XX0XWDAT; /* Build key*/
        ;
        NI0CS03(); /* Select unique - XZCREC*/
        ;
        if (VPIHDR01.NIAGLPMO >= XZCREC.XZCGLPM1) /* Inv not in prev month?*/
          NI0CW01.NI0CWPF9 = "Y"; /* Set 'pf9' flag on*/
          converseLib.validationFailed(64); /* Press pf24 to confirm*/
          NLXREC.NLXERRF = "Y";
          return;
        else
          if (COMMAREA.CACLVL[1] == "Y")
            NI0CW01.NI0CWPF9 = "Y"; /* Set 'pf9' flag on*/
            converseLib.validationFailed(64); /* Press pf24 to confirm*/
            NLXREC.NLXERRF = "Y";
            return;
          else
            NI0CW01.NI0CWPF9 = "N"; /* Set pf9 flag off*/
            converseLib.validationFailed(73); /* Invoice can't be voided...*/
            NLXREC.NLXERRF = "Y";
            return;
          end
        end
      end
    else
      NI0CW01.NI0CWPF9 = "N"; /* Set 'pf9' flag off*/
      converseLib.validationFailed(65); /* Press pf24 to confirm*/
      NLXREC.NLXERRF = "Y";
    end
  end
   /* *************************************/
   /* Has 'Void' function been confirmed?*/
   /* *************************************/
  ;
  if (NI0CW01.NI0CWPF9 == "Y") /* 'Void' function requested*/
    if (converseVar.eventKey not pf2 /* Invoice in hand*/
     && converseVar.eventKey not pf18) /* Invoice NOT in hand*/
      NI0CW01.NI0CWPF9 = "N"; /* Clear 'Void' flag*/
      converseLib.validationFailed(74); /* 'Void' request concelled*/
      NLXREC.NLXERRF = "Y";
      return;
    else /* With confirmation*/
      if (converseVar.eventKey is pf2) /* Invoice in hand*/
        NI0CW01.NI0CWPF9 = "N"; /* Set PF9 flag off*/
        ;
        XX0XS01(); /* Get current date in cccyymmdd*/
        ;
        XZCREC.XZCCLNDT = XX0XW01.XX0XWDAT; /* Build key*/
        ;
        NI0CS03(); /* Select unique - XZCREC*/
        ;
        if (VPIHDR01.NIAGLPMO >= XZCREC.XZCGLPM1) /* Invoice in prev month?*/
          ;
          NI0CW01.NI0CWIND = "V"; /* void*/
          NI0CS15(); /* transfer to submitter*/
          ;
        else /* G/L Posting month NOT equal current*/
                                   /* month*/
          ;
          if (COMMAREA.CACLVL[1] == "N")
            NI0CW01.NI0CWPF9 = "N"; /* Clear 'Void' flag*/
            converseLib.validationFailed(73); /* Invoice cannot be voided*/
            NLXREC.NLXERRF = "Y";
            return;
          else
            ;
            NI0CW01.NI0CWIND = "C"; /* credit*/
            NI0CS15(); /* transfer to submitter*/
            ;
          end
        end
      else
        if (converseVar.eventKey is pf18)
          if (COMMAREA.CACLVL[1] == "Y")
            ;
            NI0CW01.NI0CWIND = "C"; /* credit*/
            NI0CS15(); /* transfer to submitter*/
            ;
          else
            NI0CW01.NI0CWPF9 = "N"; /* Clear 'Void' flag*/
            converseLib.validationFailed(73); /* Invoice cannot be voided*/
            NLXREC.NLXERRF = "Y";
            return;
          end
        end
      end
    end
  end
  ;
   /* ************************************************/
   /* Process request to update invoice header*/
   /* ************************************************/
  ;
  if (converseVar.eventKey is pf6
   && COMMAREA.CACLVL[2] == "Y")
    NI0CS-ACCOUNTING(); /* test and update invoice header*/
  end
  ;
   /* ************************************************/
   /* Process request for return to 'selection list'*/
   /* ************************************************/
  ;
  if (converseVar.eventKey is pf21)
    if (NIWREC.NIWFRMAP == "NI0B") /* Came from selection list*/
      COMMAREA.CATOAP = "NI0B";
      NIWREC.NIWQUIT = "Y";
      COMMAREA.CAUSERA = NIWREC.NIWGROUP;
      XPNL002();
    else
      converseLib.validationFailed(33); /* No Selection List available*/
      NLXREC.NLXERRF = "Y";
      return;
    end
  end
  ;
end // end NI0C120

// determine next action
Function NI0C130()
   /* **************************************/
   /* Determine next action from hdr 1*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NI0C130";
  ;
  if (converseVar.eventKey is enter)
    NLXREC.NLXEOSF = "Y";
    NLXREC.NLXCSCRN = "NI0CM200";
    return;
  else
    NLXREC.NLXBLDSC = "Y";
  end
end // end NI0C130

// header screen 2
Function NI0C200()
  ;
   /* -----------------------------------------------------------*/
       /* process screen NI0CM200*/
  ;
     /* note - this process is being performed in a*/
        /* "while loop" from NI0C050 until the end-of-screen*/
        /* flag (nlxeosfl) is set to 'y'.*/
  ;
   /* -----------------------------------------------------------*/
  ;
  NLXREC.NLXCPROC = "NI0C200";
  ;
  if (NLXREC.NLXBLDSC == "Y")
    NI0C201();
    NLXREC.NLXBLDSC = "N";
  end
  ;
  ;
  converse NI0CM200 ;
  ;
  NI0CM200.VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";
  ;
  ;
  NI0C210(); /* check attention identifier*/
  ;
  if (NLXREC.NLXERRF == "N") /* check for error*/
    NI0C220(); /* process entered option*/
  end
  ;
  ;
  if (NLXREC.NLXERRF == "N") /* check for error*/
    NI0C230(); /* determine next action*/
  end
  ;
end // end NI0C200

// Build map NI0CM200
Function NI0C201()
   /* **************************************/
   /* Build map NI0CM200*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NI0C201";
  ;
  converseLib.clearScreen();
  set NI0CM200 empty;
  ;
  NI0CM200.XXXRVNBR = "00"; /* revision nbr*/
  NI0CM200.XXXMAPNM = "NI0CM200"; /* map name*/
  NI0CM200.XXXPRCNM = "NI0C200"; /* process name*/
  NI0CM200.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  ;
   /* ******************************************/
   /* Load out next invoice number from array...*/
   /* ******************************************/
  ;
  VPIHDR01.NIDIVCID = NIWREC.NIWIAIVC[NIWIAIDX];
  XPNI001(); /* Get all P/I Info*/
  ;
  ;
  NI0CM200.NIDIVCID = NIWREC.NIWIAIVC[NIWIAIDX];
  ;
  NI0CW01.NI0CWCUO = NIWREC.OP1CUOID; /* Load map fields*/
  NI0CW01.NI0CWNOR = NIWREC.OP1NORID;
  NI0CM200.NI0CMORD = NI0CW01.NI0CWORD;
  ;
  NI0CW01.NI0CWKUC = NIWREC.KUCCOID;
  NI0CW01.NI0CWKUM = NIWREC.KUMSTRID;
  NI0CM200.NI0CMCST = NI0CW01.NI0CWCST;
  ;
  NI0CM200.NIWSTAB = NIWREC.NIWSTAB;
  NI0CM200.KUCCONM = NIWREC.KUCCONM;
  NI0CM200.XCTDESC = NIWREC.XCTDESC;
  NI0CM200.XXXADR1 = NIWREC.XXXADR1;
  NI0CM200.TSFSHPID = VPIHDR01.TSFSHPID;
  NI0CM200.XPTCD = VPIHDR01.XPTCD;
  ;
   /* **************************************************/
   /* Determine Payment Terms Override Source, If Any*/
   /* **************************************************/
  OP1REC.OP1PARTN = VPIHDR01.OP1PARTN;
  OP1REC.OP1CUOID = VPIHDR01.OP1CUOID;
  OP1REC.OP1NORID = VPIHDR01.OP1NORID;
  ;
  NI0CS17(); /* select unique on order header*/
  ;
  NI0CM200.NI0CM-200-NI0COVRSRC = "  ";
  if (OP1REC.OP1PTOF == "Y") /* payment terms overridden on order*/
    NI0CM200.NI0CM-200-NI0COVRSRC = "OVERRIDDEN ON ORDER";
  end
  if (OP1REC.XPTCD != VPIHDR01.XPTCD)
    NI0CM200.NI0CM-200-NI0COVRSRC = "OVERRIDDEN ON INVOICE";
  end
  ;
   /* ********************************/
   /* Get Payment Terms abbreviation*/
   /* ********************************/
  ;
  if (VPIHDR01.XPTCD in XPTTBL.XPTCD)
    NI0CM200.XPTDESC = XPTTBL.XPTDESC[sysVar.arrayIndex];
  end
  ;
  NI0CM200.NIAPTDDT = VPIHDR01.NIAPTDDT;
  ;
  VPIADJ01.NIDIVCID = VPIHDR01.NIDIVCID;
  ;
  NI0CS05(); /* Open cursor - NIGREC*/
  ;
  if (SQLCA.VAGen_SQLCODE == -911)
    NI0CW01.NI0CWCOG = "N";
  else
    NI0CW01.NI0CWCOG = "Y";
  end
  ;
  while (NI0CW01.NI0CWCOG == "Y")
    ;
    NI0CS12(); /* Load cursor, at end - close cursor*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      NI0CW01.NI0CWCOG = "N";
    end
    ;
    if (NI0CW01.NI0CWCOG == "Y")
      if (VPIADJ01.ZCHCD == "80")
        NI0CM200.NIGARATE = VPIADJ01.NIGARATE;
      end
    end
  end
  ;
  if (VPIHDR01.NIELCBDT != 0)
    NLXREC.XXXWCYMD = VPIHDR01.NIELCBDT;
    ;
    XPNL003();
    ;
    NI0CM200.NIELCBDT = NLXREC.XXXFLDT;
  end
  ;
  NI0CM200.NCALCRID = VPIHDR01.NCALCRID;
  ;
   /* *********************************/
   /* Get Product Source abbreviation*/
   /* *********************************/
  ;
  NI0CM200.ZPSCD = VPIHDR01.ZPSCD;
  if (VPIHDR01.ZPSCD in ZPSTBL.ZPSCD)
    NI0CM200.ZPSABRV = ZPSTBL.ZPSABRV[sysVar.arrayIndex];
  end
  if (COMMAREA.CACLVL[2] != "Y") /* user is allowed to update zpscd*/
    set NI0CM200.ZPSCD skip;
  else
    NI0CM200.NI0CM-PF6-KEY = "6:Update";
    XX0XS01(); /* Get date and time*/
    XZCREC.XZCCLNDT = XX0XW01.XX0XWDAT;
    NI0CS03(); /* Select unique corporate calendar*/
    if (VPIHDR01.NIAGLPMO >= XZCREC.XZCGLPM2)
      set NI0CM200.ZPSCD initialAttributes;
    else
      set NI0CM200.ZPSCD skip;
    end
  end
  ;
  NI0CM200.TSFDPRTA = VPIHDR01.TSFDPRTA;
  ;
   /* **********************************/
   /* Get Warehouse abbreviation*/
   /* **********************************/
  ;
  NI0CM200.XWHCD = VPIHDR01.XWHCD;
  if (VPIHDR01.XWHCD in XWHTBL.XWHCD)
    NI0CM200.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
  end
  ;
   /* ********************************/
   /* Get Document Type abbreviation*/
   /* ********************************/
  ;
  if (NIWREC.NIWZDTCD in ZDTTBL.ZDTCD)
    NI0CM200.ZDTABRV = ZDTTBL.ZDTABRV[sysVar.arrayIndex];
  end
  ;
  NI0CM200.TSICRTQT = VPIHDR01.NIESHPTC;
  ;
   /* Get Ultimate Destination Country*/
  ;
  if (VPIHDR01.XCTCD in XCTTBL.XCTCD)
    NI0CM200.NI0CMUCT = XCTTBL.XCTDESC[sysVar.arrayIndex];
  end
  ;
  NI0CM200.TSACARNM = VPIHDR01.TSACARNM;
  NI0CM200.TS5NAME = VPIHDR01.TS5NAME;
  NI0CM200.TSFBOL = VPIHDR01.TSUBOL;
  NI0CM200.TSUMAWB = VPIHDR01.TSUMAWB;
  ;
   /* ************************************/
   /* Get the proper Incoterms text line*/
   /* ************************************/
  ;
  VPITXT01.NIDIVCID = VPIHDR01.NIDIVCID;
  VPITXT01.NIFTXTYP = "I";
  ;
  NI0CS06(); /* Open cursor - NIFREC*/
  ;
  if (SQLCA.VAGen_SQLCODE == -911)
    NI0CW01.NI0CWCOF = "N";
  else
    NI0CW01.NI0CWCOF = "Y";
  end
  ;
  while (NI0CW01.NI0CWCOF == "Y")
    ;
    NI0CS13(); /* Load/close cursor - NIFREC*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911)
      NI0CW01.NI0CWCOF = "N";
    end
    ;
    if (NI0CW01.NI0CWCOF == "Y")
      if (VPITXT01.NIFTXSEQ == 1
       || VPITXT01.NIFTXSEQ == 4
       || VPITXT01.NIFTXSEQ == 7)
        NI0CM200.NIFTXT = VPITXT01.NIFTXT;
      end
    end
  end
end // end NI0C201

// validate PF keys; act on some
Function NI0C210()
   /* -----------------------------------------------------------*/
     /* Validate pf keys*/
  ;
   /* The PF keys acted upon are 1, 3, 4, 6, 13, 14, 15, 16 and 20*/
   /* -----------------------------------------------------------*/
  ;
  set NI0CM200.CATOAP initialAttributes;
  set NI0CM200.CAITEM initialAttributes;
  if (NI0CM200.ZPSCD is modified
   && NI0CM200.ZPSCD != VPIHDR01.ZPSCD)
    set NI0CM200.ZPSCD modified;
  end
      /* check for fastpath option/item*/
  ;
  if (converseVar.eventKey is enter
   && NI0CM200.CATOAP == "NI0O")
    converseLib.validationFailed(387);
    NLXERRF = "Y";
    set NI0CM200.CATOAP cursor, bold;
    return;
  end
  ;
  if (converseVar.eventKey is enter)
    if (NI0CM200.CATOAP != " ") /* if fastpath option entered,*/
      COMMAREA.CATOAP = NI0CM200.CATOAP;
      COMMAREA.CAITEM = NI0CM200.CAITEM;
      COMMAREA.CAUSERA = " ";
      XPNL002(); /* exit application*/
    end
  end
  ;
  ;
  if (converseVar.eventKey is enter) /* normal 'enter'*/
    if (NI0CM200.ZPSCD is modified) /* map was changed*/
      converseLib.validationFailed(240); /* use pf6 to update invoice*/
      NLXREC.NLXERRF = "Y";
      return;
    end
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    COMMAREA.CATOAP = "NI0D";
    XPNL002();
  end
  ;
  ;
  if (converseVar.eventKey is pf1) /* skip edit/updt, go to 'help'*/
    XSPF1();
  end
  ;
  if (converseVar.eventKey is pf13 /* normal 'enter'*/
   || converseVar.eventKey is pf15 
   || converseVar.eventKey is pf19 
   || converseVar.eventKey is pf20 
   || converseVar.eventKey is pf21)
    if (NI0CM200.ZPSCD is modified) /* map was changed*/
      converseLib.validationFailed(240); /* use pf6 to update invoice*/
      NLXREC.NLXERRF = "Y";
      return;
    end
  end
  ;
  if (converseVar.eventKey is pf21) /* Process 'abandon' key*/
    return;
  end
  ;
  ;
  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "NI0A"; /* go to sel menu*/
    COMMAREA.CAUSERA = " ";
    XPNL002(); /* exit*/
  end
  ;
  ;
  if (converseVar.eventKey is pf4) /* go to master menu*/
    COMMAREA.CAUSERA = " ";
    XSPF4();
  end
  ;
  if (converseVar.eventKey is pf13)
    NLXREC.NLXEOSF = "Y";
    NLXREC.NLXCSCRN = "NI0CM100";
    return;
  end
  ;
  ;
  if (converseVar.eventKey is pf14) /* Address appl requested*/
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    COMMAREA.CATOAP = "NI0E";
    XPNL002();
    return;
  end
  ;
  if (converseVar.eventKey is pf15)
    /* MOVE 'Y' TO NLXREC.NLXERRF;*/
    /* MOVE 'APPLICATION NOT AVAILABLE' TO NI0CM200.EZEMSG;*/
    /* EZERTN;*/
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    COMMAREA.CATOAP = "NI0F"; /* misc charges*/
    XPNL002(); /* exit*/
  end
  ;
  if (converseVar.eventKey is pf16) /* view invoice comments*/
    NIWREC.NIDIVCID = NI0CM200.NIDIVCID;
    NIW-SENDING-MAP = "NI0CM200";
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    COMMAREA.CAFROMAP = "NI0C";
    COMMAREA.CATOAP = "NI0O";
    XPNL002();
    return;
  end
  ;
  if (converseVar.eventKey is pf20)
    COMMAREA.CATOAP = "NI0J"; /* NIL menu*/
    XPNL002(); /* exit*/
  end
  ;
  if (converseVar.eventKey is pf21)
    if (NIWREC.NIWFRMAP == "NI0B")
      COMMAREA.CATOAP = "NI0B"; /* sel list*/
      XPNL002(); /* exit*/
    else
      converseLib.validationFailed(33); /* No selection list avail*/
      NLXREC.NLXERRF = "Y";
    end
  end
  ;
   /* ***********************************************************************/
   /* user request to update and has security*/
   /* ***********************************************************************/
  ;
  if (converseVar.eventKey is pf6
   && COMMAREA.CACLVL[2] == "Y")
    return;
  end
  ;
      /* pf key not valid*/
  ;
  if (NI0CM200 is modified) /* map was changed*/
    set NI0CM100.CAITEM modified;
  end
  converseLib.validationFailed(2); /* pf key not valid*/
  NLXREC.NLXERRF = "Y"; /* mark with error*/
  ;
  ;
end // end NI0C210

// validate PF keys; act on some
Function NI0C220()
   /* -----------------------------------------------------------*/
     /* Edit pf keys*/
  ;
     /* The PF keys acted upon are 6 & 21*/
   /* -----------------------------------------------------------*/
  ;
  ;
  if (converseVar.eventKey is pf21)
    if (NIWREC.NIWFRMAP == "NI0B")
      NIWREC.NIWQUIT = "Y";
      COMMAREA.CATOAP = "NI0B"; /* sel list*/
      COMMAREA.CAUSERA = NIWREC.NIWGROUP;
      XPNL002();
    else
      converseLib.validationFailed(33); /* No selection list avail*/
      NLXREC.NLXERRF = "Y";
      return;
    end
  end
  if (converseVar.eventKey is pf6
   && COMMAREA.CACLVL[2] == "Y") /* user has security to update invoice*/
    XX0XS01(); /* Get date and time*/
    XZCREC.XZCCLNDT = XX0XW01.XX0XWDAT;
    NI0CS03(); /* select unique xzcrec corporate calendar*/
    if (VPIHDR01.NIAGLPMO >= XZCREC.XZCCLNDT)
      set NI0CM200.ZPSCD initialAttributes;
    else
      set NI0CM200.ZPSCD skip;
    end
    if (NI0CM200.ZPSCD != VPIHDR01.ZPSCD)
      if (NI0CM200.ZPSCD in ZPSTBL.ZPSCD)
        if (NI0CM200.ZPSCD in ZPSTBL.ZPSCD)
          NI0CM200.ZPSABRV = ZPSTBL.ZPSABRV[sysVar.arrayIndex];
        end
        VPIHDR01.ZPSCD = NI0CM200.ZPSCD;
        NI0CS-ACCT-IVC-UPD();
      else
        converseLib.validationFailed(239);
        NLXREC.NLXERRF = "Y";
        set NI0CM200.ZPSCD cursor, modified, bold;
      end
    end
  end
end // end NI0C220

// validate PF keys; act on some
Function NI0C230()
   /* -----------------------------------------------------------*/
     /* Determine next action...*/
   /* -----------------------------------------------------------*/
  ;
   /* Nothing left to process*/
end // end NI0C230

// accounting update of gl & comp
Function NI0CS-ACCOUNTING()
  ;
   /* this statement group edits the comp number and gl code to see if*/
   /* accounting has updated them, if they have and it is a valid comp nbr*/
   /* the invoice will be update.  the user must have caclvl(2) = 'y' and*/
   /* have hit pf6 to get here.  No edit is done on the g/l code.*/
  ;
  NLXREC.NLXCPROC = "NI0CS-UP";
  ;
   /* edit the comp number.  it must be a valid comp number to allow*/
   /* the user to update.*/
  ;
  if (NI0CM100.OP1CMPNB != VPIHDR01.OP1CMPNB) /* comp number has changed*/
    set NI0CM100.OP1CMPNB modified;
    if (NI0CM100.OP1CMPNB > 0)
      KUCREC.KUCCOID = NI0CM100.OP1CMPNB; /* select unique kucrec*/
      call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
      if (SQLCA.VAGen_SQLCODE != 0
       && SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
        TA1REC.TA1LOCAT[3] = "IO0240 "; /* io mod*/
        TA1REC.TA1DBASE = "DCUST  "; /* database*/
        TA1REC.TA1TBLVU = "VCMPNY01 "; /* view*/
        XPNL005(); /* abend routine*/
      end
      if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
        converseLib.validationFailed(104); /* invalid comp number*/
        NLXREC.NLXERRF = "Y";
        set NI0CM100.OP1CMPNB cursor, modified, bold;
        return;
      end
      if (KUCREC.XAUCD in XAUTBL.XAUCD)
        NI0CW01.XATCD = XAUTBL.XATCD[sysVar.arrayIndex];
      end
      if (NI0CW01.XATCD != "06") /* 06=comp*/
        converseLib.validationFailed(104); /* invalid comp number*/
        NLXREC.NLXERRF = "Y";
        set NI0CM100.OP1CMPNB cursor, modified, bold;
        return;
      end
    end
  end
  ;
  if (NI0CM100.NIEMGLRE > " ")
                                  /* next sentence*/
  else
    converseLib.validationFailed(242);
    NLXREC.NLXERRF = "Y";
    set NI0CM100.NIEMGLRE cursor, modified, bold;
    return;
  end
  ;
  if (NLXREC.NLXERRF == "N")
    if (NI0CM100.NIEMGLRE != NLXREC.GLAGRP) /* Receivable gl CHANGED*/
      NLXREC.GLAGRP = NI0CM100.NIEMGLRE;
      VPIHDR01.NIEENT1 = NLXREC.GLAENT;
      VPIHDR01.NIERCID1 = NLXREC.GLARCID;
      VPIHDR01.NIENTAC1 = NLXREC.GLANTAC;
      VPIHDR01.NIESUB1 = NLXREC.GLASUB;
      VPIHDR01.NIEPRJ1 = NLXREC.GLAPRJ;
      if (NI0CM100.OP1CMPNB != VPIHDR01.OP1CMPNB) /* update comp number*/
        VPIHDR01.OP1CMPNB = NI0CM100.OP1CMPNB;
        NI0CS-ACCT-IVC-UPD(); /* perform accounting ivc hdr update/*/
      else
        NI0CS-ACCT-IVC-UPD(); /* perform accounting ivc hdr update/*/
      end
    else
      if (NI0CM100.OP1CMPNB != VPIHDR01.OP1CMPNB) /* update comp number*/
        VPIHDR01.OP1CMPNB = NI0CM100.OP1CMPNB;
        NI0CS-ACCT-IVC-UPD(); /* perform accounting ivc hdr update/*/
      else
        converseLib.validationFailed(241);
        NLXREC.NLXERRF = "Y";
      end
    end
  end
  ;
end // end NI0CS-ACCOUNTING

// accounting update of ivc hdr
Function NI0CS-ACCT-IVC-UPD()
   /* -----------------------------------------------------------*/
     /* Accounting update of invoice header*/
   /* -----------------------------------------------------------*/
  if (VPIHDR01.ZISCD == "AC" ||  /* change the change date only if not*/
  VPIHDR01.ZISCD == "RI")       
    XX0XS01(); /* Fetch current date and time*/
    VPIHDR01.ZZZCHGDT = XX0XW01.XX0XWDAT;
    VPIHDR01.ZZZCHGTM = XX0XW01.XX0XWTIM;
    VPIHDR01.XXXUSID1 = COMMAREA.CAUSERID;
  end
  NI0CS07(); /* update invoice header*/
  converseLib.validationFailed(238);
  ;
  ;
end // end NI0CS-ACCT-IVC-UPD

// set up transfer to submitter
Function NI0CS-EDIT-GPC()
  ;
  NLXREC.NLXCPROC = "NI0CS-EDIT-GPC";
   /* set up key to select a unique order record*/
  OP1REC.OP1PARTN = VPIHDR01.OP1PARTN;
  OP1REC.OP1CUOID = VPIHDR01.OP1CUOID;
  OP1REC.OP1NORID = VPIHDR01.OP1NORID;
  ;
  NI0CS17(); /* read order header database*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    if (OP1REC.XGPCD == "02"
     || OP1REC.XGPCD == "03")
      return;
    else
      converseLib.validationFailed(255); /* do not have authorized signature*/
      NLXREC.NLXERRF = "Y";
    end
  else
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0430 "; /* io module*/
    TA1REC.TA1DBASE = "DORDER"; /* database*/
    TA1REC.TA1TBLVU = "VORHDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
  ;
end // end NI0CS-EDIT-GPC

// Select unique - NIEREC
Function NI0CS01()
   /* ************************/
   /* NIEREC - Select Unique*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NI0CS01";
  ;
  call "IO4470" ("S ", SQLCA, VPIHDR01) {isNoRefresh = yes, isExternal = yes}; /* Load cursor*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    if (SQLCA.VAGen_SQLCODE != 100)
      TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO4470 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VPIHDR01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end
end // end NI0CS01

// Select Unique - XZCREC
Function NI0CS03()
   /* ************************/
   /* XZCREC - Select Unique*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NI0CS03";
  ;
  call "IO0900" ("S ", SQLCA, XZCREC) {isNoRefresh = yes, isExternal = yes}; /* Read Calendar*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0900 "; /* io module*/
    TA1REC.TA1DBASE = "DCORP"; /* database*/
    TA1REC.TA1TBLVU = "VDAYS001"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NI0CS03

// Open cursor - NIGREC
Function NI0CS05()
   /* ************************/
   /* NIGREC - Open cursor*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NI0CS05";
  ;
  call "IO4510" ("S1", SQLCA, VPIADJ01) {isNoRefresh = yes, isExternal = yes}; /* Open P/I Adjs*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "S1     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4510 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VPIADJ01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NI0CS05

// Open cursor - NIFREC
Function NI0CS06()
   /* ************************/
   /* NIFREC - Select Unique*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NI0CS06";
  ;
  call "IO4520" ("S1", SQLCA, VPITXT01) {isNoRefresh = yes, isExternal = yes}; /* Read P/I Text*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "S1     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4520 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VPITXT01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NI0CS06

// Update Unique on NCAREC
Function NI0CS07()
   /* ************************/
   /* NIEREC - Update Unique*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NI0CS07";
  ;
  call "IO4470" ("U ", SQLCA, VPIHDR01) {isNoRefresh = yes, isExternal = yes}; /* Update P/I Hdr*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "U      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4470 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VPIHDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NI0CS07

// Update Unique on NCAREC
Function NI0CS09()
   /* ************************/
   /* NIOREC - Update Unique*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NI0CS09";
  ;
  call "IO0600" ("U ", SQLCA, VRQTHD01) {isNoRefresh = yes, isExternal = yes}; /* Update Inv Req*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "U      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0600 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VRQTHD01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NI0CS09

// Select Unique on NIOREC
Function NI0CS10()
   /* ************************/
   /* NIOREC - Select Unique*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NI0CS10";
  ;
  call "IO0600" ("S ", SQLCA, VRQTHD01) {isNoRefresh = yes, isExternal = yes}; /* Select Inv Req*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    NI0CW-VRQTHD01-FL = "Y";
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      NI0CW-VRQTHD01-FL = "N";
    else
      TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO0600 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VRQTHD01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end
end // end NI0CS10

// Load/Close cursor - NIGREC
Function NI0CS12()
   /* ************************/
   /* NIGREC - Load Cursor 1*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NI0CS12";
  ;
  call "IO4510" ("N1", SQLCA, VPIADJ01) {isNoRefresh = yes, isExternal = yes}; /* Load P/I adj cursor*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    if (SQLCA.VAGen_SQLCODE != 100)
      TA1REC.TA1LOCAT[2] = "N1     "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO4510 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VPIADJ01"; /* table view*/
      XPNL005(); /* abend routine*/
    else
      NI0CW01.NI0CWCOG = "N"; /* Set cursor switch off*/
      /* ************************/
       /* NIGREC - Close cursor 1*/
      /* ************************/
      ;
      call "IO4510" ("C1", SQLCA, VPIADJ01) {isNoRefresh = yes, isExternal = yes};
                                                    /* Close P/I adj cursor*/
      ;
      if (SQLCA.VAGen_SQLCODE != 0)
        TA1REC.TA1LOCAT[2] = "C1     "; /* database action*/
        TA1REC.TA1LOCAT[3] = "IO4510 "; /* io module*/
        TA1REC.TA1DBASE = "DNILO"; /* database*/
        TA1REC.TA1TBLVU = "VPIITM01"; /* table view*/
        XPNL005(); /* abend routine*/
      end
    end
  end
end // end NI0CS12

// Load/Close cursor - NIFREC
Function NI0CS13()
   /* ************************/
   /* NIFREC - Load Cursor 1*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NI0CS13";
  ;
  call "IO4520" ("N1", SQLCA, VPITXT01) {isNoRefresh = yes, isExternal = yes}; /* Load P/I txt cursor*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    if (SQLCA.VAGen_SQLCODE != 100)
      TA1REC.TA1LOCAT[2] = "N1     "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO4520 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VPITXT01"; /* table view*/
      XPNL005(); /* abend routine*/
    else
      NI0CW01.NI0CWCOF = "N"; /* Set cursor switch off*/
      /* ************************/
       /* NIFREC - Close cursor 1*/
      /* ************************/
      ;
      call "IO4520" ("C1", SQLCA, VPITXT01) {isNoRefresh = yes, isExternal = yes};
                                                    /* Close P/I txt cursor*/
      ;
      if (SQLCA.VAGen_SQLCODE != 0)
        TA1REC.TA1LOCAT[2] = "C1     "; /* database action*/
        TA1REC.TA1LOCAT[3] = "IO4520 "; /* io module*/
        TA1REC.TA1DBASE = "DNILO"; /* database*/
        TA1REC.TA1TBLVU = "VPITXT01"; /* table view*/
        XPNL005(); /* abend routine*/
      end
    end
  end
end // end NI0CS13

// Update invoice header
Function NI0CS14()
  ;
  NLXREC.NLXCPROC = "NI0CS14";
  ;
  VPIHDR01.ZISCD = NI0CW01.ZISCD; /* Set Invoice status*/
  VPIHDR01.XXXUSID1 = COMMAREA.CAUSERID;
  XX0XS01(); /* fetch current date and time*/
  VPIHDR01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPIHDR01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  NI0CS07(); /* Update Invoice Header record*/
  ;
  ;
  ;
end // end NI0CS14

// set up transfer to submitter
Function NI0CS15()
  ;
  NLXREC.NLXCPROC = "NI0CS15";
  NIWREC.NIWSBIND = NI0CW01.NI0CWIND; /* set request type*/
  NIWREC.NIWMSGNR = 0;
  NIWREC.TSFSHPID = VPIHDR01.TSFSHPID;
  COMMAREA.CAUSERA = NIWREC.NIWGROUP;
  ;
  if (NI0CW01.NI0CWIND == "V" /* void*/
   || NI0CW01.NI0CWIND == "C") /* credit*/
     /* set up key to select a unique order record*/
    OP1REC.OP1PARTN = VPIHDR01.OP1PARTN;
    OP1REC.OP1CUOID = VPIHDR01.OP1CUOID;
    OP1REC.OP1NORID = VPIHDR01.OP1NORID;
    ;
    NI0CS17(); /* read order header database*/
    if (SQLCA.VAGen_SQLCODE == 100)
      NIWREC.NIW-ORDER-PURGE-FLAG = "Y";
      NI0CS16();
   /* EZERTN; (check flag intead)*/
    else
      NIWREC.NIW-ORDER-PURGE-FLAG = "N";
    end
    ;
  else
    if (NI0CW01.NI0CWIND == "R"
     || NI0CW01.NI0CWIND == "O"
     || NI0CW01.NI0CWIND == "E")
       /* check to see if the authorized signature still exists*/
      if (VPIHDR01.XXXUSRID in ZPRTBL.XXXUSRID)
        NI0CWTMP = ZPRTBL.XXXUNTXT[sysVar.arrayIndex];
      end
      if (sysVar.arrayIndex > 0)
        /* next sentence*/
      else
        converseLib.validationFailed(225); /* do not have authorized signature*/
        NLXREC.NLXERRF = "Y";
        return;
      end
    end
  end
  ;
  if (NIWREC.NIW-ORDER-PURGE-FLAG == "N")
    if (NIWREC.NIWSBIND == "V"
     || NIWREC.NIWSBIND == "C")
      VPIHDR01.NIDIVCID = NIWREC.NIWIAIVC[NIWIAIDX];
      NI0CS01(); /* Select unique Invoice header*/
      XX0XS01(); /* Get current date in ccyymmdd*/
          /* format Inv Req key*/
      VRQTHD01.TSFSHPID = VPIHDR01.TSFSHPID;
      VRQTHD01.OP1CUOID = VPIHDR01.OP1CUOID;
      VRQTHD01.OP1NORID = VPIHDR01.OP1NORID;
      NI0CS10(); /* Select unique Inv Req table*/
      if (SQLCA.VAGen_SQLCODE == 0)
        VRQTHD01.TSFSHPID = VPIHDR01.TSFSHPID;
        VRQTHD01.OP1CUOID = VPIHDR01.OP1CUOID;
        VRQTHD01.OP1NORID = VPIHDR01.OP1NORID;
        VRQTHD01.NIOIND = "D"; /* Set inv prt status to draft*/
             /* Set inv req status to in-process*/
        VRQTHD01.NIOISTAT = "I";
        VRQTHD01.ZZZCHGDT = XX0XW01.XX0XWDAT;
        VRQTHD01.ZZZCHGTM = XX0XW01.XX0XWTIM;
        ;
        NI0CS09(); /* Update Invoice req table*/
        ;
      end
      if (NIWREC.NIWSBIND == "C")
        NI0CW01.ZISCD = "CR"; /* Set Invoice status to credit*/
        NI0CS14(); /* Update Invoice Header record*/
      else
        NI0CW01.ZISCD = "VD"; /* Set Invoice status to void*/
        NI0CS14(); /* Update Invoice Header record*/
      end
    end
  end
   /* Here we transfer control 'Claims create' which in turn*/
   /* will transfer control to a 'job-submit' routine*/
  ;
  move NI0CW-VRQTHD01-FL to NIW-VRQTHD01-FL withV60Compat; /* Rqst Hdr Found Flag*/
  ;
  if (NI0CW01.NI0CWIND == "C") /* credit*/
    if (VPIHDR01.XPTCD != "NC")
      COMMAREA.CATOAP = "NK0G";
      NIWREC.NIDIVCID = NIWREC.NIWIAIVC[NIWIAIDX];
      COMMAREA.CAUSERA = NIWREC.NIWGROUP;
      XPNL002();
    else
      if (NIWREC.NIW-ORDER-PURGE-FLAG == "N")
        COMMAREA.CATOAP = "NI0P";
        XPNL002();
      end
    end
    ;
    /* Here we transfer control to a 'job-submit' routine*/
    ;
  else
    COMMAREA.CATOAP = "NI0P";
    XPNL002();
  end
  ;
  ;
end // end NI0CS15

// initialize application
Function NI0CS16()
   /* -----------------------------------------------------------*/
         /* Void/Credit invoice with purged order*/
  ;
   /* -----------------------------------------------------------*/
  ;
  if (NI0CW01.NI0CWIND == "V" /* 'Void' type process*/
   || NI0CW01.NI0CWIND == "C") /* 'Credit' type process*/
    ;
    VPIHDR01.NIDIVCID = NIWREC.NIWIAIVC[NIWIAIDX];
    ;
    NI0CS01(); /* Select unique Invoice header*/
    ;
    XX0XS01(); /* Get current date in ccyymmdd*/
    ;
               /* IF NIEREC.ZISCD EQ 'CR';*/
    ;
    if (NIWREC.NIWSBIND == "C")
      ;
      NI0CW01.ZISCD = "CR"; /* Set Invoice status to credit*/
      NI0CS14(); /* Update Invoice Header record*/
         /* MOVE 'Y' TO NLXREC.NLXERRF;*/
      converseLib.validationFailed(224); /* Invoice is 'CREDITED'*/
      return;
    else
      ;
      NI0CW01.ZISCD = "VD"; /* Set Invoice status to void*/
      NI0CS14(); /* Update Invoice Header record*/
         /* MOVE 'Y' TO NLXREC.NLXERRF;*/
      converseLib.validationFailed(223); /* Invoice is 'VOIDED'*/
      return;
    end
  end
end // end NI0CS16

// Select Unique from OP1REC
Function NI0CS17()
  NLXREC.NLXCPROC = "NI0LS13";
  ;
   /* OP1REC - Select Unique op1*/
  ;
  call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* Read Order record*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      /* next sentence*/
    else
      ;
      TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO0430 "; /* io module*/
      TA1REC.TA1DBASE = "DORDER"; /* database*/
      TA1REC.TA1TBLVU = "VORHDR01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end
  ;
  ;
end // end NI0CS17

Record NI0CW01 type basicRecord
  5 NI0CWORD NI0CWORD ; 
    10 NI0CWCUO NI0CWCUO ; 
    10 NI0CWNOR NI0CWNOR ; 
  5 NI0CWCST NI0CWCST ; 
    10 NI0CWKUC NI0CWKUC ; 
    10 NI0CWKUM NI0CWKUM ; 
  5 NI0CWIIX NI0CWIIX ; 
  5 NI0CWPF9 NI0CWPF9 ; 
  5 NI0CWPF5 NI0CWPF5 ; 
  5 NI0CWPMO NI0CWPMO ; 
    10 * num(5) ; 
    10 NI0CWPYY NI0CWPYY ; 
    10 NI0CWPMM NI0CWPMM ; 
  5 NI0CWTMP NI0CWTMP ; 
  5 NI0CWPYM NI0CWPYM ; 
    10 NI0CWPMN NI0CWPMN ; 
    10 NI0CWDSH NI0CWDSH ; 
    10 NI0CWPYR NI0CWPYR ; 
  5 NI0CWCOF NI0CWCOF ; 
  5 NI0CWCOG NI0CWCOG ; 
  5 NI0CWIND NI0CWIND ; 
  5 ZISCD ZISCD ; 
  5 NI0CWXDC NI0CWXDC ; 
  5 XATCD XATCD ; 
  5 NI0CW-VRQTHD01-FL NI0CW-VRQTHD01-FL ; 
end // end NI0CW01

// Request Header Found Flag
DataItem NI0CW-VRQTHD01-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor open flag - NIFREC
DataItem NI0CWCOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor open flag - NIGREC
DataItem NI0CWCOG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Customer.Store
DataItem NI0CWCST num(11,4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Order # portion
DataItem NI0CWCUO num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Always '-'
DataItem NI0CWDSH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// W/S Invoice array index
DataItem NI0CWIIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// submit indicator d,f,v,r,c
DataItem NI0CWIND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Customer number
DataItem NI0CWKUC num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Store number
DataItem NI0CWKUM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Sub-Order # portion
DataItem NI0CWNOR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Display Order/Suborder #
DataItem NI0CWORD num(10,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PF5 key pressed flag
DataItem NI0CWPF5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PF9 key pressed flag
DataItem NI0CWPF9 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// g/l posting month
DataItem NI0CWPMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// g/l posting month
DataItem NI0CWPMN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Full size posting month
DataItem NI0CWPMO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Formatted G/l posting mo
DataItem NI0CWPYM char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// g/l posting year
DataItem NI0CWPYR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// g/l posting year
DataItem NI0CWPYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp user id
DataItem NI0CWTMP char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ZIS-IVC-STAT-CD
DataItem NI0CWXDC char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

