package ni0e;

import corpcom3.XPNI001;
import corpcom3.XPNL002;
import corpcom3.XPNL004;
import corpcom3.XPNL005;
import corpcom4.XSENTRY;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XCTTBL;
import corpx1.XLATBL;
import corpz3.ZDTTBL;
import corpz3.ZISTBL;
import ku.common.KUCREC;
import ni.common.NIWREC;
import nl.common.*;
import ta.common.TA1REC;
import vv.common.VLADDR01;
import vv.common.VPIHDR01;
import vv.common.VZFC0001;
//*** PROGRAM=NI0E ****
// Invoice Inquiry - Addresses
// .
// This application shows the user the bill-to and ship-to
// addresses associated with a particular invoice.
// .
// Maintenance
//    Date      Who  Remarks
// -----------  ---  -------
//   11-06-89   tbg  Moved to Production.
//   10-14-92 jjudki oct 92 db chgs.
//   11-18-92 jjudki Remove zfctbl from table list. Use io mod
//                   dc0060 for zfcdesc in xpni001.
//    3-02-93 jjudki Add pf16 to view invoice comments in ni0o
//                   map 200.
//   11-09-93 jjudki NOV DB CHANGES.
// *********************
Program NI0E type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "NL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  NI0EW01 NI0EW01; // record
  NIWREC NIWREC; // record
  NLXREC NLXREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  VLADDR01 VLADDR01; // record
  VPIHDR01 VPIHDR01; // record
  VZFC0001 VZFC0001; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use ZDTTBL {deleteAfterUse = yes}; // table
  use ZISTBL {deleteAfterUse = yes}; // table
  use XLATBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use NI0EM.NI0EM100 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    NI0E000: NI0E000();
    ;
    ;
    exit program;
    ;
    ;
    ;
  end // end main
end // end NI0E

// application main logic
Function NI0E000()
  ;
   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   xsentry checks to ensure that this application was    **/
   /* *         entered from another csp application.           **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  ;
  NI0E001(); /* initilize the application*/
  ;
  NI0EM100.XXXRVNBR = "00"; /* application maint. revision nbr.*/
  ;
  ;
  NLXREC.NLXEOAF = "N"; /* set end-of-application flag to 'no'*/
  ;
  while (NLXREC.NLXEOAF == "N") /* while not end-of-aplication*/
    NI0E050(); /* screen branch control*/
  end
  ;
  XSPF4();
  ;
  ;
end // end NI0E000

// initialize application
Function NI0E001()
  ;
   /* -----------------------------------------------------------*/
         /* initialize the application working storage*/
  ;
   /* -----------------------------------------------------------*/
  ;
  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen converse*/
  VGVar.handleHardIOErrors = 1; /* return control to program if hard db2 error*/
  ;
  ;
  XSENTRY(); /* check entered thru main menu*/
  XSSEGTR(); /* set segmented transaction id*/
  ;
  set SQLCA empty; /* clear out the "common" working*/
                                   /* storage*/
  set ERRSQLCA empty; /* clear out the "common" working*/
                                   /* storage*/
  set TA1REC empty; /* clear out the "common" working*/
                                   /* storage*/
  set NLXREC empty; /* clear out the "common" working*/
                                   /* storage*/
  set NI0EW01 empty; /* ; clear application working storage*/
  ;
  if (COMMAREA.CAFRMSYS != "NI")
    COMMAREA.CAUSERA = " ";
  end
  ;
  NLXREC.NLXEOAF = "N"; /* set application-done-switch to 'no'*/
  NLXREC.NLXERRF = "N"; /* set error-switch to 'no'*/
  ;
  NIWREC.NIWGROUP = COMMAREA.CAUSERA;
  ;
   /* NI0ES00                         ; simulate passed data*/
  ;
  NI0EW01.NI0EWIIX = NIWREC.NIWIAIDX;
   /* ------------------------------------------------------*/
    /* Set up working-storage array of screen names*/
   /* ------------------------------------------------------*/
  ;
  NLXREC.NLXCSCRN = "NI0EM100"; /* first screen of applic.*/
  ;
  NLXREC.NLXSNAME[1] = "NI0EM100";
                                   /* init screens used in this applic.*/
  ;
   /* ------------------------------------------------------*/
    /* Set map-ids and map date*/
   /* ------------------------------------------------------*/
  ;
  NI0EM100.XXXPRCNM = "NI0E100"; /* map process name*/
  ;
  NI0EM100.XXXCURDT = VGVar.currentShortGregorianDate; /* current date*/
  ;
   /* **********************************************/
   /* Was this application entered via 'fastpath'?*/
   /* **********************************************/
  if (COMMAREA.CAITEM != " ") /* 'Item' will be non-blank if fastpath*/
    ;
    XPNL004(); /* Validate caitem numeric*/
    ;
    if (NLXREC.NLXERRF == "Y") /* If error in 'item'*/
      NIWREC.NIWMSGNR = 32;
      COMMAREA.CATOAP = "NI0A";
      XPNL002();
    else /* Item is numeric*/
      NIWREC.NIWIAIDX = 1;
      NIWREC.NIWIAIVC[NIWIAIDX] = NLXREC.NLXNUM8A;
      VPIHDR01.NIDIVCID = NLXREC.NLXNUM8A;
      XPNI001();
    end
    ;
    COMMAREA.CATOAP = " "; /* Clear commarea*/
    COMMAREA.CAITEM = " ";
    ;
  else /* Normal function key transfer in*/
    if (COMMAREA.CAUSERA != " ")
      NIWREC.NIWGROUP = COMMAREA.CAUSERA;
      ;
      if (COMMAREA.CAFROMAP == "NI0O"
       && NIW-SENDING-MAP == "NI0EM100")
        move NIW-SENDING-MAP to NLXCSCRN withV60Compat;
      end
      ;
      if (NIWREC.NIWIAIDX < 1
       || NIWREC.NIWIAIDX > 100)
        NIWREC.NIWMSGNR = 32; /* Clear work area for key*/
        COMMAREA.CATOAP = "NI0A";
        COMMAREA.CAUSERA = NIWREC.NIWGROUP;
        XPNL002();
      end
    else
      NIWREC.NIWMSGNR = 32; /* Clear work area for key*/
      COMMAREA.CATOAP = "NI0A";
      COMMAREA.CAUSERA = NIWREC.NIWGROUP;
      XPNL002();
    end
  end
end // end NI0E001

// screen branch control
Function NI0E050()
  ;
   /* ************************************************************/
   /* *   control process the application screen(s)             **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0E050"; /* set current process name*/
  ;
  ;
  sysVar.arrayIndex = 0;
  NLXREC.NLXSCRNX = 0;
  ;
  if (NLXREC.NLXCSCRN in NLXREC.NLXSNAME)
     /* if current-screen-name is in the screen-array, then set*/
     /* the screen-index*/
    NLXREC.NLXSCRNX = sysVar.arrayIndex;
  end
  ;
  ;
  NLXREC.NLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
  NLXREC.NLXBLDSC = "Y"; /* set build screen flag to 'yes'*/
  NLXREC.NLXERRF = "N"; /* clear error flag*/
  converseLib.validationFailed(0);
  ;
  if (NLXREC.NLXSCRNX == 1) /* if screen ni0em001*/
    while (NLXREC.NLXEOSF == "N") /* while not end-of-screen*/
      NI0E100(); /* process screen ni0em001*/
    end
  end
  ;
  ;
   /* at this point;*/
       /* if the end-of-application flag (nlxeoaf ) = 'n'*/
         /* the perform will return to the top of ni0%050...*/
       /* else*/
         /* the perform will auto return to ni0%000.*/
  ;
  ;
end // end NI0E050

// header screen 1
Function NI0E100()
  ;
   /* -----------------------------------------------------------*/
       /* process screen ni0em100*/
  ;
     /* note - this process is being performed in a*/
        /* "while loop" from ni0e050 until the end-of-screen*/
        /* flag (nlxeosfl) is set to 'y'.*/
  ;
   /* -----------------------------------------------------------*/
  ;
  NLXREC.NLXCPROC = "NI0E100";
  ;
  if (NLXREC.NLXBLDSC == "Y")
    NI0E101();
    NLXREC.NLXBLDSC = "N";
  end
  ;
  converse NI0EM100 ;
  ;
  NI0EM100.VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";
  ;
  ;
  NI0E110(); /* process function keys*/
  ;
end // end NI0E100

// build screen
Function NI0E101()
   /* **************************************/
   /* Build map NI0EM100*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NI0E101";
  ;
  converseLib.clearScreen();
  set NI0EM100 empty;
  ;
  NI0EM100.XXXRVNBR = "00"; /* revision nbr*/
  NI0EM100.XXXMAPNM = "NI0EM100"; /* map name*/
  NI0EM100.XXXPRCNM = "NI0E100"; /* process name*/
  NI0EM100.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  ;
   /* Load out next invoice number from array...*/
  ;
  NI0EM100.NIDIVCID = NIWREC.NIWIAIVC[NIWIAIDX];
  VPIHDR01.NIDIVCID = NIWREC.NIWIAIVC[NIWIAIDX];
  ;
  NI0EW01.NI0EWCUO = NIWREC.OP1CUOID; /* Load map fields*/
  NI0EW01.NI0EWNOR = NIWREC.OP1NORID;
  NI0EM100.NI0EMORD = NI0EW01.NI0EWORD;
  ;
  NI0EW01.NI0EWKUC = NIWREC.KUCCOID;
  NI0EW01.NI0EWKUM = NIWREC.KUMSTRID;
  NI0EM100.NI0EMCST = NI0EW01.NI0EWCST;
  ;
  NI0EM100.NIWSTAB = NIWREC.NIWSTAB;
  NI0EM100.KUCCONM = NIWREC.KUCCONM;
  NI0EM100.XCTDESC = NIWREC.XCTDESC;
  NI0EM100.XXXADR1 = NIWREC.XXXADR1;
  ;
  if (NIWREC.NIWZDTCD in ZDTTBL.ZDTCD)
    NI0EM100.ZDTABRV = ZDTTBL.ZDTABRV[sysVar.arrayIndex];
  end
  ;
   /* *********************************************/
   /* Get the Bill-to and Ship-to address records*/
   /* *********************************************/
  set VLADDR01 empty;
  VLADDR01.NLATYPIN = "I"; /* Build key for Long Address*/
  VLADDR01.NLABSIND = "B";
   /* MOVE 'C' TO NLAREC.NLAONECH;*/
  VLADDR01.NLAINTGR = NIWREC.NIWIAIVC[NIWIAIDX];
  VLADDR01.NLASINT1 = 0;
  VLADDR01.NLASINT2 = 0;
  VLADDR01.NLAADRID = 0;
  ;
  NI0ES01(); /* Read Long address*/
  ;
  NI0EM100.NLAADDR1 = VLADDR01.XXX-ADDR1; /* Load map fields*/
  NI0EM100.NLAADDR2 = VLADDR01.XXX-ADDR2;
  NI0EM100.NLAADDR3 = VLADDR01.XXX-ADDR3;
  NI0EM100.NLAADDR4 = VLADDR01.XXX-ADDR4;
  NI0EM100.NLAADDR5 = VLADDR01.XXX-ADDR5;
  NI0EM100.NLAADDR6 = VLADDR01.XXX-ADDR6;
   /* *********************/
   /* Lookup Long Address*/
   /* *********************/
  set VLADDR01 empty;
  VLADDR01.NLATYPIN = "I"; /* Build key for Long Address*/
  VLADDR01.NLABSIND = "S";
   /* MOVE 'C' TO NLAREC.NLAONECH;*/
  VLADDR01.NLAINTGR = NIWREC.NIWIAIVC[NIWIAIDX];
  VLADDR01.NLASINT1 = 0;
  VLADDR01.NLASINT2 = 0;
  VLADDR01.NLAADRID = 0;
  ;
  NI0ES01(); /* Read Long address*/
  ;
  NI0EM100.NI0EMAD1 = VLADDR01.XXX-ADDR1; /* Load map fields*/
  NI0EM100.NI0EMAD2 = VLADDR01.XXX-ADDR2;
  NI0EM100.NI0EMAD3 = VLADDR01.XXX-ADDR3;
  NI0EM100.NI0EMAD4 = VLADDR01.XXX-ADDR4;
  NI0EM100.NI0EMAD5 = VLADDR01.XXX-ADDR5;
  NI0EM100.NI0EMAD6 = VLADDR01.XXX-ADDR6;
end // end NI0E101

// validate PF keys; act on some
Function NI0E110()
  ;
   /* -----------------------------------------------------------*/
     /* validate pf keys*/
   /* The PF keys acted upon are pf 1, 3, 4, 13, 15, 16, and 20*/
   /* -----------------------------------------------------------*/
  ;
  set NI0EM100.CATOAP initialAttributes;
  set NI0EM100.CAITEM initialAttributes;
  ;
      /* check for fastpath option/item*/
  ;
  if (converseVar.eventKey is enter
   && NI0EM100.CATOAP == "NI0O")
    converseLib.validationFailed(387);
    NLXERRF = "Y";
    set NI0EM100.CATOAP cursor, bold;
    return;
  end
  ;
  if (converseVar.eventKey is enter)
    if (NI0EM100.CATOAP != " " /* if fastpath option entered,*/
     && NI0EM100.CATOAP != "NI0O")
      COMMAREA.CATOAP = NI0EM100.CATOAP;
      COMMAREA.CAITEM = NI0EM100.CAITEM;
      COMMAREA.CAUSERA = " ";
      XPNL002(); /* exit application*/
    end
  end
  ;
  if (converseVar.eventKey is enter) /* normal 'enter'*/
    COMMAREA.CATOAP = "NI0D"; /* go to header*/
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002(); /* exit*/
  end
  ;
  if (converseVar.eventKey is pf1) /* skip edit/updt, go to 'help'*/
    XSPF1();
  end
  ;
  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "NI0A"; /* go to sel menu*/
    COMMAREA.CAUSERA = " ";
    XPNL002(); /* exit*/
  end
  ;
  if (converseVar.eventKey is pf4) /* go to master menu*/
    COMMAREA.CAUSERA = " ";
    XSPF4();
  end
  ;
  if (converseVar.eventKey is pf13)
    COMMAREA.CATOAP = "NI0C"; /* go to header*/
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002(); /* exit*/
  end
  ;
  if (converseVar.eventKey is pf15)
    /* MOVE 'Y' TO NLXREC.NLXERRF;*/
    /* MOVE ' APPLICATION NOT AVAILABLE' TO NI0EM100.EZEMSG;*/
    /* EZERTN;*/
    COMMAREA.CATOAP = "NI0F"; /* go to misc chgs*/
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002(); /* exit*/
  end
  ;
  if (converseVar.eventKey is pf16)
    COMMAREA.CATOAP = "NI0O"; /* view invoice comments*/
    NIW-SENDING-MAP = "NI0EM100";
    NIWREC.NIDIVCID = NI0EM100.NIDIVCID;
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002(); /* exit*/
  end
  ;
  if (converseVar.eventKey is pf20)
    COMMAREA.CATOAP = "NI0J"; /* go to nil menu*/
    XPNL002(); /* exit*/
  end
  ;
      /* pf key not valid*/
  ;
  converseLib.validationFailed(2); /* pf key not valid*/
  NLXREC.NLXERRF = "Y"; /* mark with error*/
  ;
  ;
end // end NI0E110

// Select Unique from NLAREC
Function NI0ES01()
   /* ************************/
   /* NLAREC - Select Unique*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NI0ES01";
  ;
  call "IO4410" ("S ", SQLCA, VLADDR01) {isNoRefresh = yes, isExternal = yes}; /* Read Long Address*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4410 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VLADDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NI0ES01

//*** RECORD=NI0EW01 ****
// Working storage for Invoice Addresses Inquiry
// ***********************
Record NI0EW01 type basicRecord
  5 NI0EWORD NI0EWORD ; 
    10 NI0EWCUO NI0EWCUO ; 
    10 NI0EWNOR NI0EWNOR ; 
  5 NI0EWCST NI0EWCST ; 
    10 NI0EWKUC NI0EWKUC ; 
    10 NI0EWKUM NI0EWKUM ; 
  5 NI0EWIIX NI0EWIIX ; 
end // end NI0EW01

// Customer.Store
DataItem NI0EWCST num(11,4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Order # portion
DataItem NI0EWCUO num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// W/S Invoice array index
DataItem NI0EWIIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Customer number
DataItem NI0EWKUC num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Store number
DataItem NI0EWKUM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Sub-Order # portion
DataItem NI0EWNOR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Display Order/Suborder #
DataItem NI0EWORD num(10,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

