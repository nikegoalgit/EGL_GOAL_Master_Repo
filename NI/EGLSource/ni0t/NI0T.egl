package ni0t;

import corpcom3.XPNL002;
import corpcom3.XPNL004;
import corpcom3.XPNL005;
import corpcom4.XSENTRY;
import corpcom4.XSNLS01;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XCTTBL;
import corpx1.XGPCD;
import corpx1.XGPTBL;
import corpy2.YSMXOB;
import ku.common.KUCREC;
import ni.common.NIQPROID;
import ni.common.NIQPRORS;
import ni.common.NIWREC;
import nl.common.*;
import op.common.OP1REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import vv.common.VPRHDR01;
import vv.common.VPRORD01;
import vv.common.VPRTXT01;
import vv.common.VPRZIT01;
//*** PROGRAM=NI0T ****
// ************************************************************
// 
//         NI0T - NIL PROFORMA MAINTENANCE SELECTION
//         -----------------------------------------
// 
// General program explanation and notes:
// 
// The purpose of this application is to allow the user to
// select a proforma for maintenance.  Two screens will be
// used to accomplish the selection process.  The first screen,
// NI0TM100, is a selection menu.  It will allow the user to
// enter one of three selection criteria:  the proforma number,
// the customer number or an order number.  The entry of a
// proforma number or an order number will take the user
// directly to the maintenance application NI0U.  When a
// customer number is entered, the second screen, NI0TM200,
// will be presented with a list of proformas.  The proformas
// then can be selected to be maintained or deleted.
// ------------------------------------------------------------
// Maintenance History:
// --------------------
//   Date   Who    Remarks
// -------- ------ --------------------------------------------
// 05-03-91 SAZARE Set Up
// 12-17-91 JJUDKI Expand proforma status descrip on map200
// 01-02-92 JJUDKI Underscore SubOrderNumber on map100.
//                 Refresh Customer Name and Country for each
//                specific order on map 100 before NI0U xfer.
// 02-27-92 JJUDKI Delete with 'D' only.
// 10-15-92 JJUDKI Use expanded nlxrec.
// 10-11-93 ahowar Wrong performa brought up when selecting
//                 from other than first screen.
// *********************
Program NI0T type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "NL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  NI0TW01 NI0TW01; // record
  NIWREC NIWREC; // record
  NLXREC NLXREC; // record
  OP1REC OP1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  VPRHDR01 VPRHDR01; // record
  VPRORD01 VPRORD01; // record
  VPRTXT01 VPRTXT01; // record
  VPRZIT01 VPRZIT01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCTTBL; // table
  use XGPTBL; // table
  use NI0TM.NI0TM100,  // forms
      NI0TM.NI0TM200
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    NI0T000: NI0T000();
    exit program;
  end // end main
end // end NI0T

// Main flow
Function NI0T000()
   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   perform initialization, set application revision nbrs,**/
   /* *   then do main perform until done with application      **/
   /* *                                                         **/
   /* ************************************************************/

  NLXREC.NLXCPROC = "NI0T000";

  NI0T001(); /* Initialize the application*/

  NLXREC.NLXEOAF = "N"; /* Set end-of-application flag to 'no'*/

  while (NLXREC.NLXEOAF == "N") /* While not end-of-aplication*/
    NI0T050(); /* Process the application screen(s)*/
  end

  exit program;
end // end NI0T000

// Initialize Application
Function NI0T001()
   /* -----------------------------------------------------------*/
         /* Initialize the application working storage*/

   /* -----------------------------------------------------------*/

  NLXREC.NLXCPROC = "NI0T001";

  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen converse*/
  VGVar.handleHardIOErrors = 1; /* return control to program if hard db2 error*/


  XSENTRY(); /* check entry thru main menu*/
  XSSEGTR(); /* set segmented transaction id*/

  set SQLCA empty; /* clear out the "common" working*/
                                   /* storage*/
  set ERRSQLCA empty; /* clear out the "common" working*/
                                   /* storage*/
  set TA1REC empty; /* clear out the "common" working*/
                                   /* storage*/
  set NLXREC empty; /* clear out the "common" working*/
                                   /* storage*/

  NI0TSS1(); /* Security for NI0S*/

   /* ------------------------------------------------------*/
    /* Set up working-storage array of screen names*/
   /* ------------------------------------------------------*/

  NLXREC.NLXCSCRN = "NI0TM100"; /* first header*/

  NLXREC.NLXSNAME[1] = "NI0TM100";
                                   /* init screens used in this applic.*/
  NLXREC.NLXSNAME[2] = "NI0TM200";

   /* *******************/
   /* Check passed data*/
   /* *******************/

  if (COMMAREA.CAFROMAP == "NI0U") /* If from proforma maint*/
    NIWREC.NIWGROUP = COMMAREA.CAUSERA;
    if (NIWREC.NIWMSGNR != 0) /* If error msg sent*/
      if (NIWREC.NIWMSGNR == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(NIWREC.NIWMSGNR);
      end /* Display it*/
      NI0TM100.NIQPROID = COMMAREA.CAITEM;
                                   /* In this case,caitem=prof#*/
      set NI0TM100.NIQPROID bold;
      COMMAREA.CAITEM = " ";
      COMMAREA.CAUSERA = " ";
      set NIWREC empty;
      return;
    end
  end

  set NIWREC empty; /* Clear out the "common" working*/
                                   /* storage*/
  COMMAREA.CAUSERA = " ";

  if (COMMAREA.CAITEM <= " ") /* If no customer number passed*/
    converseLib.validationFailed(198); /* Enter proforma selection criteria*/
    return;
  end

  XPNL004(); /* Validate caitem (customer) numeric*/

  if (NLXREC.NLXERRF == "Y") /* If error in 'item'*/
    converseLib.validationFailed(197); /* Invalid item data--reenter customer*/
    set NI0TM100.KUCCOID cursor;
  else
    set KUCREC empty;
    KUCREC.KUCCOID = NLXREC.NLXNUM8A; /* Build key with customer#*/
    NI0TM100.KUCCOID = KUCREC.KUCCOID; /* Load map with customer#*/
    NI0TSIC(); /* Select unique - KUCREC*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If valid customer*/
      NIWREC.KUCCOID = KUCREC.KUCCOID; /* Move customer# to w/s*/
      NIWREC.KUCCONM = KUCREC.KUCCONM; /* Move customer nm to w/s*/
      if (KUCREC.XCTCD in XCTTBL.XCTCD)
        NIWREC.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
      end
                                   /* Ctry nm->w/s*/
      NLXREC.NLXCSCRN = "NI0TM200"; /* Display selection list*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(13); /* Invalid customer no*/
        set NI0TM100.KUCCOID cursor, bold;
      end
    end
  end

  COMMAREA.CAITEM = " ";
end // end NI0T001

// Decide which map to display
Function NI0T050()
   /* ************************************************************/
   /* *   control process the application screen(s)             **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/

  NLXREC.NLXCPROC = "NI0T050"; /* set current process name*/


  sysVar.arrayIndex = 0;
  NLXREC.NLXSCRNX = 0;

  if (NLXREC.NLXCSCRN in NLXREC.NLXSNAME) /* if current-screen-name is*/
    NLXREC.NLXSCRNX = sysVar.arrayIndex; /* in the screen-array, then set*/
  end /* the screen-index*/

  set TA1REC empty;
  TA1REC.TA1MAP = NLXREC.NLXCSCRN; /* prepare for abend*/

  NLXREC.NLXBLDSC = "Y"; /* set build screen flag to 'yes'*/
  NLXREC.NLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
  NLXREC.NLXERRF = "N"; /* clear error flag*/
  NI0TW01.NI0TWDEL = "N"; /* init delete confirm flag*/

  if (NLXREC.NLXSCRNX == 1) /* if screen xx0xm100*/
    while (NLXREC.NLXEOSF == "N") /* show until user is done*/
      NI0T100();
    end
  else

    if (NLXREC.NLXSCRNX == 2) /* if screen xx0xm200*/
      NI0TW01.NI0TWPAG = "Y"; /* init proforma array page load flag*/
      NI0TSLP(); /* load proforma array*/
      if (NLXREC.NLXERRF == "Y") /* if error, display screen 1*/
        NLXREC.NLXCSCRN = "NI0TM100";
        return;
      end
      while (NLXREC.NLXEOSF == "N") /* show until user is done*/
        NI0T200();
      end
    else
      TA1REC.TA1MAP = NLXREC.NLXCSCRN;
      TA1REC.TA1TBLKE = "UNKNOWN SCREEN NAME";
      TA1REC.TA1LOCAT[2] = NLXREC.NLXCSCRN;
      XPNL005(); /* abend*/
    end
  end


   /* at this point;*/
       /* if the end-of-application flag (NLXeoaf ) = 'n'*/
         /* the perform will return to the top of nl0%050...*/
       /* else*/
         /* the perform will auto return to nl0%000.*/

end // end NI0T050

// Converse map M100
Function NI0T100()
   /* ************************************************************/
   /* *    process screen ni0tm100                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from ni0t050 until the end-of-screen   **/
   /* *     flag (nlxeosfl) is set to 'y'.                      **/
   /* *                                                         **/
   /* ************************************************************/

  NLXREC.NLXCPROC = "NI0T100";

  if (NLXREC.NLXBLDSC == "Y")
    NI0T101(); /* Perform i/o, load map fields*/
    NLXREC.NLXBLDSC = "N";
  end

   /* ***********************************************************/
  converse NI0TM100 ;
   /* ***********************************************************/

  VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";
  set NI0TM100.CATOAP normal;
  set NI0TM100.CAITEM normal;

  NI0T110(); /* validate pfkeys*/
   /* **************************************************/
   /* If no pf key errors, edit and go to next screeen*/
   /* *************************************************\*/
  if (NLXREC.NLXERRF == "N")
    NI0T120(); /* edit entries and go to next screen*/
  end

   /* at this point;*/
     /* if the end-of-screen flag (nlxeosfl) is 'n'*/
        /* we go back to top of process ni0t100.*/
     /* if the end-of-screen flag (nlxeosfl) is 'y'*/
        /* we return to ni0t050.*/
end // end NI0T100

// Build Map NI0TM100
Function NI0T101()

  NLXREC.NLXCPROC = "NI0T101";

  NI0TM100.XXXPRCNM = "NI0T100";
  NI0TM100.XXXMAPNM = "NI0TM100";
  NI0TM100.XXXRVNBR = "00";
  NI0TM100.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/

end // end NI0T101

// Edit PFkeys
Function NI0T110()
   /* ************************************************/
   /* Check for fastpath data, program function keys*/
   /* ************************************************/

  NLXREC.NLXCPROC = "NI0T110";

   /* *************************/
   /* Check for fastpath data*/
   /* *************************/
  if (NI0TM100.CATOAP != " " /* if any fastpath data entered*/
   && converseVar.eventKey is enter)
    if (NI0TM100.CATOAP == "NI0U") /* if trying to go to maint directly*/
      converseLib.validationFailed(212); /* don't use fastpath to go to ni0u*/
      NLXREC.NLXERRF = "Y";
      NI0TM100.CATOAP = " ";
      NI0TM100.CAITEM = " ";
      return;
    end
    COMMAREA.CATOAP = NI0TM100.CATOAP;
    COMMAREA.CAITEM = NI0TM100.CAITEM;
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002();
    set NI0TM100.CATOAP cursor, bold;
    return;
  end
   /* ***************************************/
   /* Check for valid program function keys*/
   /* ***************************************/

  if (converseVar.eventKey is enter)
     /* next sentence*/
  else
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa2
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      converseLib.validationFailed(36); /* pa1/2 cause loss of keyed data-rekey*/
                                   /* any change*/
      NLXREC.NLXERRF = "Y";
    else
      if (converseVar.eventKey is pf1)
        XSNLS01();
      else
        if (converseVar.eventKey is pf4)
          XSPF4();
        else
          if (converseVar.eventKey is pf3)
            COMMAREA.CAUSERA = " ";
            COMMAREA.CATOAP = "NI0J"; /* Go to NIL invoicing menu*/
            XPNL002();
            return;
          else
            if (converseVar.eventKey is pf20)
              COMMAREA.CAUSERA = " ";
              COMMAREA.CATOAP = "NL0A"; /* Go to NIL main menu*/
              XPNL002();
              return;
            else
              COMMAREA.CATOAP = " ";
              converseLib.validationFailed(2); /* Invalid function key*/
              NLXREC.NLXERRF = "Y";
            end
          end
        end
      end
    end
  end
end // end NI0T110

// Edit NI0TM100 fields
Function NI0T120()

  NLXREC.NLXCPROC = "NI0T120";

   /* ***************************************************/
   /* Clear any previous error indication on key fields*/
   /* ***************************************************/

  set NI0TM100.NIQPROID cursor, normal;
  set NI0TM100.KUCCOID normal;
  set NI0TM100.OP1CUOID normal;
  set NI0TM100.OP1NORID normal;

   /* *****************************************/
   /* If the key fields are empty, don't edit*/
   /* *****************************************/

  if (NI0TM100.NIQPROID == 0 /* Proforma number is 0*/
   && NI0TM100.KUCCOID == 0  /* Customer number is 0*/
   && NI0TM100.OP1CUOID == 0 /* Order number is 0*/
   && NI0TM100.OP1NORID == 0)
    converseLib.validationFailed(198); /* Enter proforma selection criteria*/
    NLXREC.NLXERRF = "Y";
    return;
  end

   /* *****************************************/
   /* Validate Proforma Number if entered*/
   /* *****************************************/

  if (NI0TM100.NIQPROID != 0) /* Proforma number is entered*/
    if (NI0TM100.KUCCOID != 0 /* If cust or order numbers entered too*/
     || NI0TM100.OP1CUOID != 0
     || NI0TM100.OP1NORID != 0)
      converseLib.validationFailed(11); /* Only one option allowed*/
      NLXREC.NLXERRF = "Y"; /* Indicate error*/
      set NI0TM100.NIQPROID cursor, bold;
      set NI0TM100.KUCCOID bold;
      set NI0TM100.OP1CUOID bold;
      set NI0TM100.OP1NORID bold;
    else /* Only proforma number entered*/
      set VPRHDR01 empty;
      VPRHDR01.NIQPROID = NI0TM100.NIQPROID;
      NI0TSIH(); /* Select unique - NIQREC*/
      if (SQLCA.VAGen_SQLCODE == 0) /* If no errors*/
        NIWREC.NIQPROID = VPRHDR01.NIQPROID; /* Proforma number*/
        NIWREC.KUCCOID = VPRHDR01.KUCCOID; /* Customer number*/
        COMMAREA.CAUSERA = NIWREC.NIWGROUP; /* Transfer to Prof Maint*/
        COMMAREA.CATOAP = "NI0U";
        XPNL002();
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* If Cust number not found*/
          converseLib.validationFailed(200); /* Proforma number not found*/
          set NI0TM100.NIQPROID cursor, bold;
        end
      end
    end
    return;
  end

   /* *************************************/
   /* Validate Customer Number if entered*/
   /* *************************************/

  if (NI0TM100.KUCCOID != 0) /* Customer number is entered*/
    if (NI0TM100.OP1CUOID != 0 /* If order number entered too*/
     || NI0TM100.OP1NORID != 0)
      converseLib.validationFailed(11); /* Only one option allowed*/
      NLXREC.NLXERRF = "Y"; /* Indicate error occurred*/
      set NI0TM100.NIQPROID bold;
      set NI0TM100.KUCCOID cursor, bold;
      set NI0TM100.OP1CUOID bold;
      set NI0TM100.OP1NORID bold;
    else /* Only customer number entered*/
      set KUCREC empty;
      KUCREC.KUCCOID = NI0TM100.KUCCOID;
      NI0TSIC(); /* Select unique - KUCREC*/
      if (SQLCA.VAGen_SQLCODE == 0) /* If no errors*/
        NIWREC.KUCCOID = KUCREC.KUCCOID; /* Customer number*/
        NIWREC.KUCCONM = KUCREC.KUCCONM; /* Customer name*/
        if (KUCREC.XCTCD in XCTTBL.XCTCD)
          NIWREC.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
        end /* Ctry name*/
        NLXREC.NLXEOSF = "Y"; /* End of screen processing*/
        NLXREC.NLXCSCRN = "NI0TM200"; /* Display selection screen*/
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* If Cust number not found*/
          converseLib.validationFailed(13); /* Invalid customer number*/
          set NI0TM100.KUCCOID cursor, bold;
        end
      end
    end
    return;
  end

   /* **********************************/
   /* Validate Order Number if entered*/
   /* **********************************/

  if (NI0TM100.OP1CUOID != 0) /* If cust order id is entered*/
    if (NI0TM100.OP1NORID == 0) /* If nike order id is not entered*/
      NI0TM100.OP1NORID = 1; /* Default it to 1*/
    end
    set VPRORD01 empty;
    VPRORD01.OP1CUOID = NI0TM100.OP1CUOID;
    VPRORD01.OP1NORID = NI0TM100.OP1NORID;
    NI0TSIP(); /* Select unique - NIRREC*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If no errors*/
      NIWREC.NIQPROID = VPRORD01.NIQPROID; /* Proforma number*/
      set VPRHDR01 empty;
      VPRHDR01.NIQPROID = NIWREC.NIQPROID;
      NI0TSIH(); /* Select unique - NIQREC*/
      if (SQLCA.VAGen_SQLCODE == 0) /* If no errors*/
        NIWREC.KUCCOID = VPRHDR01.KUCCOID; /* Customer number*/
  /*  */
  /* GET CUSTOMER NAME AND COUNTRY DESC FOR SELECTED ORDER*/
  /*  */
        NI0T122();
  /*  */
        COMMAREA.CAUSERA = NIWREC.NIWGROUP; /* Transfer to Prof Maint*/
        COMMAREA.CATOAP = "NI0U";
        XPNL002();
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* If not found*/
          TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
          TA1REC.TA1LOCAT[3] = "IO5800 "; /* io module*/
          TA1REC.TA1DBASE = "DNILO "; /* database*/
          TA1REC.TA1TBLVU = "VPRHDR01"; /* table view*/
          XPNL005(); /* abend routine*/
        end
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(14); /* Order # not found*/
        set NI0TM100.OP1CUOID cursor, bold;
        set NI0TM100.OP1NORID bold;
      end
    end
  else
    converseLib.validationFailed(14); /* Order # not found*/
    set NI0TM100.OP1CUOID cursor, bold;
    set NI0TM100.OP1NORID bold;
  end
end // end NI0T120

// Get order cust name and ctry
Function NI0T122()

  NLXREC.NLXCPROC = "NI0T122";


  set KUCREC empty;
  KUCREC.KUCCOID = VPRHDR01.KUCCOID;
  NI0TSIC(); /* Select unique - KUCREC*/
  if (SQLCA.VAGen_SQLCODE == 0) /* If no errors*/
    NIWREC.KUCCOID = KUCREC.KUCCOID; /* Customer number*/
    NIWREC.KUCCONM = KUCREC.KUCCONM; /* Customer name*/
    if (KUCREC.XCTCD in XCTTBL.XCTCD)
      NIWREC.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
    end
                                      /* Ctry name*/
    NLXREC.NLXEOSF = "Y"; /* End of screen processing*/
    NLXREC.NLXCSCRN = "NI0TM200"; /* Display selection screen*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* If Cust number not found*/
      converseLib.validationFailed(13); /* Invalid customer number*/
      set NI0TM100.KUCCOID cursor, bold;
    end
  end

end // end NI0T122

// Converse map M200
Function NI0T200()
   /* ************************************************************/
   /* *    process screen NI0TM200                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from NI0T050 until the end-of-screen   **/
   /* *     flag (NLXEOSFL) is set to 'y'.                      **/
   /* *                                                         **/
   /* ************************************************************/

  NLXREC.NLXCPROC = "NI0T200";

  if (NLXREC.NLXBLDSC == "Y") /* Build screen?*/
    NI0T201(); /* Load map fields*/
    NLXREC.NLXBLDSC = "N";
  end

  if (NI0TW01.NI0TWPAG == "Y") /* Load a page of the proforma array?*/
    NI0T202(); /* Load map order lines*/
    NI0TW01.NI0TWPAG = "N";
  end

  if (NI0TM200.VAGen_EZEMSG == " ")
    NI0TM200.VAGen_EZEMSG = NI0TW01.NI0TWPMS; /* If no msg, dspl prof cnt*/
  end
   /* ***********************************************************/
  converse NI0TM200 ;
   /* ***********************************************************/

  NI0TM200.VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";
  set NI0TM200.CATOAP normal;
  set NI0TM200.CAITEM normal;

  if (converseVar.eventKey is pf3) /* If exit from screen requested*/
    NLXREC.NLXEOSF = "Y"; /* Indicate end of screen*/
    NLXREC.NLXCSCRN = "NI0TM100"; /* Go to selection screen*/
    return;
  end

  if (converseVar.eventKey not pf5 /* If pf5 was not pressed*/
   || NI0TM200 is modified)        /* or if map was modified in any way*/
    NI0TW01.NI0TWDEL = "N"; /* Reset delete confirm flag*/
    NI0T210(); /* Check attention identifier*/
  end

  if (NLXREC.NLXERRF == "N" /* If no errors*/
   && NI0TW01.NI0TWDEL == "N") /* and not confirming delete*/
    NI0T220(); /* Edit entered option*/
  end

  if (NLXREC.NLXERRF == "N") /* If no errors*/
    NI0T230(); /* Determine next action...*/
  end

end // end NI0T200

// Load fields for map NI0TM200
Function NI0T201()

  NLXREC.NLXCPROC = "NI0T201";

  NI0TW01.NI0TWMSG = NI0TM200.VAGen_EZEMSG; /* save msg*/
  converseLib.clearScreen();
  set NI0TM200 initial;
  NI0TM200.VAGen_EZEMSG = NI0TW01.NI0TWMSG; /* restore msg*/

   /* ***************************/
   /* Load generic header fields*/
   /* ***************************/

  NI0TM200.XXXPRCNM = "NI0T200";
  NI0TM200.XXXMAPNM = "NI0TM200";
  NI0TM200.XXXRVNBR = "00"; /* revision nbr*/
  NI0TM200.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/

   /* **************************************************/
   /* Load customer header fields with passed cust info*/
   /* **************************************************/

  NI0TM200.KUCCOID = NIWREC.KUCCOID; /* Cust id*/
  NI0TM200.KUCCONM = NIWREC.KUCCONM; /* Cust name*/
  NI0TM200.XCTDESC = NIWREC.XCTDESC; /* Cust country name*/
end // end NI0T201

// Load scrn of profrmas frm arry
Function NI0T202()

  NLXREC.NLXCPROC = "NI0T202";

  NI0TW01.NI0TWSCX = 0; /* Init screen index*/

  while (NI0TW01.NI0TWSCX < 14 /* Do until 14 screen lines are filled*/
   && NI0TW01.NI0TWARX <= NI0TW01.NI0TWACT) /* or no more array records*/
    NI0TW01.NI0TWSCX = NI0TW01.NI0TWSCX + 1; /* Accum screen index*/
    set NI0TM200.NI0TMSEL[NI0TWSCX] initialAttributes; /* Unprotect select cd*/
    NI0TM200.NI0TMSEL[NI0TWSCX] = NI0TW01.NI0TWSEL[NI0TWARX]; /* Sel*/
    NI0TM200.NIQPROID[NI0TWSCX] = NI0TW01.NIQPROID[NI0TWARX]; /* Prof*/
    NI0TM200.XGPCD[NI0TWSCX] = NI0TW01.XGPCD[NI0TWARX]; /* GPC*/
    NI0TM200.YSMXOB[NI0TWSCX] = NI0TW01.YSMXOB[NI0TWARX]; /* Type*/
    NI0TM200.OP1CUNDT[NI0TWSCX] = NI0TW01.NI0TWNDT[NI0TWARX];
                                   /* Nd dt*/
                                  /* MOVE NI0TW01.NIQPRORS(NI0TWARX) TO*/
                                   /* NI0TM200.NIQPRORS(NI0TWSCX); /* Stat*/
    NI0T203(); /* Stat*/
    NI0TM200.NIQSTATD[NI0TWSCX] = NI0TW01.NI0TWSDT[NI0TWARX]; /* " dt*/
    NI0TW01.NI0TWARX = NI0TW01.NI0TWARX + 1; /* Accum array index*/
  end

  if (NI0TW01.NI0TWARX > NI0TW01.NI0TWACT) /* No more proforma array recs*/
    NI0TW01.NI0TWW1X = NI0TW01.NI0TWSCX; /* Work idx = screen idx*/
    while (NI0TW01.NI0TWW1X < 14) /* Do for remaining lines*/
      NI0TW01.NI0TWW1X = NI0TW01.NI0TWW1X + 1; /* Accum work index*/
      set NI0TM200.NI0TMSEL[NI0TWW1X] skip; /* Protect select field*/
      NI0TM200.NI0TMSEL[NI0TWW1X] = " "; /* Select cd*/
      NI0TM200.NIQPROID[NI0TWW1X] = 0; /* Proforma*/
      NI0TM200.XGPCD[NI0TWW1X] = " "; /* GPC cd*/
      NI0TM200.YSMXOB[NI0TWW1X] = " "; /* Order Type*/
      NI0TM200.OP1CUNDT[NI0TWW1X] = " "; /* Need date*/
      NI0TM200.NIQPRORS[NI0TWW1X] = " "; /* Status*/
      NI0TM200.NIQSTATD[NI0TWW1X] = " "; /* Status date*/
    end
  end

   /* set array index to point to topmost record on screen*/
  NI0TW01.NI0TWARX = NI0TW01.NI0TWARX - NI0TW01.NI0TWSCX;
end // end NI0T202

// move correct status to map 200
Function NI0T203()

  NLXREC.NLXCPROC = "NI0T203";

  if (NI0TW01.NIQPRORS[NI0TWARX] == "D")
    NI0TM200.NIQPRORS[NI0TWSCX] = "DRAFT"; /* Stat*/
  else
    if (NI0TW01.NIQPRORS[NI0TWARX] == "F")
      NI0TM200.NIQPRORS[NI0TWSCX] = "FINAL"; /* Stat*/
    else
      if (NI0TW01.NIQPRORS[NI0TWARX] == "I")
        NI0TM200.NIQPRORS[NI0TWSCX] = "IN-PROCESS"; /* Stat*/
      else
        if (NI0TW01.NIQPRORS[NI0TWARX] == "R")
          NI0TM200.NIQPRORS[NI0TWSCX] = "REISSUE"; /* Stat*/
        end
      end
    end
  end


end // end NI0T203

// Edit PFkeys
Function NI0T210()

  NLXREC.NLXCPROC = "NI0T210";

   /* *************************/
   /* Check for fastpath data*/
   /* *************************/
  if (NI0TM200.CATOAP != " " /* If any fastpath data entered*/
   && converseVar.eventKey is enter)
    if (NI0TM200.CATOAP == "NI0U") /* If trying to go to maint directly*/
      converseLib.validationFailed(212); /* don't use fastpath to go to ni0u*/
      NLXREC.NLXERRF = "Y";
      NI0TM200.CATOAP = " ";
      NI0TM200.CAITEM = " ";
      return;
    end
    COMMAREA.CATOAP = NI0TM200.CATOAP;
    COMMAREA.CAITEM = NI0TM200.CAITEM;
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002();
    set NI0TM200.CATOAP cursor, bold;
    return;
  end

   /* ***************************************/
   /* Check for valid program function keys*/
   /* ***************************************/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf5
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
     /* next sentence*/
  else
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa2
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      converseLib.validationFailed(36); /* pa1/2 cause loss of keyed data-rekey*/
                                   /* any change*/
      NLXREC.NLXERRF = "Y";
    else
      if (converseVar.eventKey is pf1)
        XSNLS01();
      else
        if (converseVar.eventKey is pf4)
          XSPF4();
        else
          if (converseVar.eventKey is pf20)
            COMMAREA.CAUSERA = " ";
            COMMAREA.CATOAP = "NL0A"; /* Go to NIL main menu*/
            XPNL002();
          else
            COMMAREA.CATOAP = " ";
            converseLib.validationFailed(2); /* Invalid function key*/
            NLXREC.NLXERRF = "Y";
          end
        end
      end
    end
  end
end // end NI0T210

// Edit NI0TM200 fields
Function NI0T220()

  NLXREC.NLXCPROC = "NI0T220";

   /* *********************************************************/
   /* Clear any previous error indication on enterable fields*/
   /* *********************************************************/

  set NI0TM200.NI0TMSEL[1] cursor, normal;
  NI0TW01.NI0TWW1X = 1;
  while (NI0TW01.NI0TWW1X < NI0TW01.NI0TWSCX) /* Do for each displayed line*/
    NI0TW01.NI0TWW1X = NI0TW01.NI0TWW1X + 1; /* (NI0TWSCX = bottom line#)*/
    set NI0TM200.NI0TMSEL[NI0TWW1X] normal;
  end

   /* *****************************/
   /* Check for inquiry only user*/
   /* *****************************/

  if (NI0TW01.NI0TWINQ == "Y" /* If inquiry only user*/
   && converseVar.eventKey is pf5) /* and attempting to delete*/
    converseLib.validationFailed(191);
                                   /* This user id set up for inquiry only*/
    NLXREC.NLXERRF = "Y";
    return;
  end

   /* *****************************/
   /* Check/record selection code*/
   /* *****************************/

  NI0TW01.NI0TWW2X = NI0TW01.NI0TWSCX;
                                   /* Set work index 2 = last displ ln*/
  NI0TW01.NI0TWW1X = NI0TW01.NI0TWARX + NI0TW01.NI0TWSCX;
  NI0TW01.NI0TWW1X = NI0TW01.NI0TWW1X - 1;
                                   /* Set work idx 1 = corres arry rec*/

  while (NI0TW01.NI0TWW2X > 0) /* For each displayed proforma line*/
    if (NI0TM200.NI0TMSEL[NI0TWW2X] == " ") /* If proforma not selected*/
      NI0TW01.NI0TWSEL[NI0TWW1X] = " "; /* Ind not selected in array*/
    else /* Else*/
      if (NI0TM200.NI0TMSEL[NI0TWW2X] == "S" /* If select proforma*/
       || NI0TM200.NI0TMSEL[NI0TWW2X] == "D") /* If delete proforma*/
        NI0TW01.NI0TWSEL[NI0TWW1X] = NI0TM200.NI0TMSEL[NI0TWW2X];
      else
        converseLib.validationFailed(28);
        NLXREC.NLXERRF = "Y";
        set NI0TM200.NI0TMSEL[NI0TWW2X] cursor, bold;
      end
    end
    NI0TW01.NI0TWW1X = NI0TW01.NI0TWW1X - 1;
    NI0TW01.NI0TWW2X = NI0TW01.NI0TWW2X - 1;
  end

  if (NLXREC.NLXERRF == "Y") /* If error*/
    return; /* get out*/
  end

   /* ****************************/
   /* Check number of selections*/
   /* ****************************/

  NI0TW01.NI0TWSCT = 0; /* Init selected proforma count*/
  NI0TW01.NI0TWCTD = 0; /* Init deleted proforma count*/

  if (converseVar.eventKey not pf7 /* If user not paging*/
   && converseVar.eventKey not pf8)
    NI0TW01.NI0TWFPX = 0; /* Init first proforma index*/
    NI0TW01.NI0TWW1X = 0; /* Init work index 1*/
    NI0TW01.NI0TWW3X = 0; /* Init select error index*/
    NI0TW01.NI0TWW4X = 0; /* Init delete error index*/
    while (NI0TW01.NI0TWW1X < NI0TW01.NI0TWPCT)
                                   /* |Search selected proformas*/
      NI0TW01.NI0TWW1X = NI0TW01.NI0TWW1X + 1; /* | - record 1st prof*/
      if (NI0TW01.NI0TWSEL[NI0TWW1X] == "S")
        if (NI0TW01.NI0TWSCT == 0) /* If first selected record*/
          NI0TW01.NI0TWFPX = NI0TW01.NI0TWW1X; /* first sel prof*/
        end
        if (NI0TW01.NI0TWW3X == 0)
          NI0TW01.NI0TWW3X = NI0TW01.NI0TWW1X; /* Save 1st occurance*/
        end
        NI0TW01.NI0TWSCT = NI0TW01.NI0TWSCT + 1; /* Accum select count*/
      end
      if (NI0TW01.NI0TWSEL[NI0TWW1X] == "D")
        if (NI0TW01.NI0TWCTD == 0) /* If first selected record*/
          NI0TW01.NI0TWFPX = NI0TW01.NI0TWW1X; /* first sel prof*/
        end
        if (NI0TW01.NI0TWW4X == 0)
          NI0TW01.NI0TWW4X = NI0TW01.NI0TWW1X; /* Save 1st occurance*/
        end
        NI0TW01.NI0TWCTD = NI0TW01.NI0TWCTD + 1; /* Accum select count*/
      end
    end

    if (NI0TW01.NI0TWSCT != 0
     && NI0TW01.NI0TWCTD != 0) /* both 's' and 'd'*/
      converseLib.validationFailed(249); /* cannot mix 's' and 'd' selection*/
      NLXREC.NLXERRF = "Y";
    end

    if (NI0TW01.NI0TWSCT == 0 /* neither 'S' nor 'D' chosen*/
     && NI0TW01.NI0TWCTD == 0)
      NI0TW01.NI0TWFPX = 1;
    end

   /* alh  IF NI0TW01.NI0TWFPX > 14;*/
   /* alh     NI0TW01.NI0TWFPX = NI0TW01.NI0TWFPX - 14;*/
   /* alh  END;*/

    if (converseVar.eventKey not pf5 /* Delete pfkey not used*/
     && NI0TW01.NI0TWSCT == 0        /* If no proforma selected*/
     && converseVar.eventKey not pf7 /* If user not paging*/
     && converseVar.eventKey not pf8)
      NI0TW01.NI0TWFPX = 1;
      converseLib.validationFailed(250); /* Must enter 'S' to select*/
      set NI0TM200.NI0TMSEL[NI0TWFPX] cursor, bold;
      NLXREC.NLXERRF = "Y";
    end

    if (converseVar.eventKey is enter
     && NI0TWSCT > 1) /* If > 1 proforma selected*/
      converseLib.validationFailed(202); /* Can only select 1 proforma*/
     /* SET NI0TM200.NI0TMSEL(NI0TWFPX) CURSOR,BRIGHT;*/
      NLXREC.NLXERRF = "Y";
    end

    if (converseVar.eventKey is pf5 /* attempted deletion without*/
     && NI0TW01.NI0TWCTD == 0)      /* selecting with a 'D'*/
      converseLib.validationFailed(251); /* Must use 'D' to delete proforma*/
      NLXREC.NLXERRF = "Y";
    end

    if (converseVar.validationMsgNum > 0)
      NI0TW01.NI0TWW6X = NI0TW01.NI0TWARX + NI0TW01.NI0TWSCX;
      NI0TW01.NI0TWW6X = NI0TW01.NI0TWW6X - 1;
      NI0TW01.NI0TWW5X = NI0TW01.NI0TWSCX;
      while (NI0TW01.NI0TWW5X >= 1)
        if (NI0TW01.NI0TWSEL[NI0TWW6X] > " ")
          set NI0TM200.NI0TMSEL[NI0TWW5X] cursor, bold;
        end
        NI0TW01.NI0TWW5X = NI0TW01.NI0TWW5X - 1;
        NI0TW01.NI0TWW6X = NI0TW01.NI0TWW6X - 1;
      end
    end

  end
end // end NI0T220

// Determine next action
Function NI0T230()

  NLXREC.NLXCPROC = "NI0T230";

  if (converseVar.eventKey is pf8) /* *Page Forward**/
     /* Calculate difference between current rec and last rec*/
    NI0TW01.NI0TWW1X = NI0TW01.NI0TWPCT - NI0TW01.NI0TWARX;
    if (NI0TW01.NI0TWW1X >= 14) /* If at least 1 page to go*/
      NI0TW01.NI0TWPAG = "Y"; /* Load page of proforma array*/
      NI0TW01.NI0TWARX = NI0TW01.NI0TWARX + 14; /* Point to next page*/
    else
      converseLib.validationFailed(30);
                                   /* Bottom of file--no scrolling possible*/
    end
    return;
  end

  if (converseVar.eventKey is pf7) /* *Page Back**/
    if (NI0TW01.NI0TWARX > 1) /* If not at top of array*/
      NI0TW01.NI0TWPAG = "Y"; /* Load page of proforma array*/
      NI0TW01.NI0TWARX = NI0TW01.NI0TWARX - 14; /* Point to previous page*/
      if (NI0TW01.NI0TWARX < 1) /* Go to top of array if full page not*/
                                   /* avail*/
        NI0TW01.NI0TWARX = +1;
      end
    else
      converseLib.validationFailed(29); /* Top of file--no scrolling possible*/
    end
    return;
  end

  if (converseVar.eventKey is enter) /* *Select for Maintenance**/
    NIWREC.NIQPROID = NI0TW01.NIQPROID[NI0TWFPX]; /* Proforma# to w/s*/
    COMMAREA.CAUSERA = NIWREC.NIWGROUP; /* Go to proforma maint*/
    COMMAREA.CATOAP = "NI0U";
    XPNL002();
    return;
  end

  if (converseVar.eventKey is pf5) /* *Delete Proforma**/
    if (NI0TW01.NI0TWDEL == "N") /* If delete has not been confirmed*/
      NI0TW01.NI0TWDCT = NI0TW01.NI0TWCTD; /* Format del conf msg*/
      NI0TW01.NI0TWDM1 = " PROFORMAS ARE SELECTED FOR DELETE;";
      NI0TW01.NI0TWDM2 = " PRESS PF5 TO CONFIRM DELETE ACTION";
      NI0TM200.VAGen_EZEMSG = NI0TW01.NI0TWDMS;
      NI0TW01.NI0TWDEL = "Y"; /* Indicate confirmed*/
      return;
    end
    NI0TW01.NI0TWW1X = NI0TW01.NI0TWFPX;
                                   /* Work index 1 = 1st sel rec*/
    NI0TW01.NI0TWW2X = 0; /* Work index 2 = 0*/
    while (NI0TW01.NI0TWW2X < NI0TW01.NI0TWCTD) /* *Search proformas until*/
                                             /* * all sel recs found*/
      if (NI0TW01.NI0TWSEL[NI0TWW1X] == "D")
                                   /* If proforma sel for delete*/
        NI0TW01.NI0TWW2X = NI0TWW2X + 1; /* |*/
        NI0TSDH(); /* |Delete NIQREC (prof hdr)*/
        if (SQLCA.VAGen_SQLCODE == -911) /* |If data base locked*/
          return; /* | get out*/
        end /* |*/
        NI0TSDO(); /* |Delete NIRREC (prof ord)*/
        if (SQLCA.VAGen_SQLCODE == -911) /* |If data base locked*/
          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback(); /* | reset data base changes*/
          return; /* | get out*/
        end /* |*/
        NI0TSDT(); /* |Delete NISREC (prof txt)*/
        if (SQLCA.VAGen_SQLCODE == -911) /* |If data base locked*/
          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback(); /* | reset data base changes*/
          return; /* | get out*/
        end /* |*/
        NI0TSDI();
                                   /* |Delete NITREC (prof inco)*/
        if (SQLCA.VAGen_SQLCODE == -911) /* |If data base locked*/
          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback(); /* | reset data base changes*/
          return; /* | get out*/
        end /* |*/
      end
      NI0TW01.NI0TWW1X = NI0TW01.NI0TWW1X + 1; /* Look at next proforma*/
    end

     /* Re-select proformas and display new updated list*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* Commit data base changes*/
    NLXREC.NLXEOSF = "Y"; /* Force reformat of NI0TM200*/

     /* Format del complete msg*/
    NI0TW01.NI0TWDM1 = " PROFORMAS HAVE BEEN DELETED";
    NI0TW01.NI0TWDM2 = " ";
    NI0TM200.VAGen_EZEMSG = NI0TW01.NI0TWDMS;
    return;
  end

  converseLib.validationFailed(2); /* Invalid PA/PF key for this appl*/
   /* *************************************************************/
end // end NI0T230

// Delete NIQREC (Proforma Hdr)
Function NI0TSDH()

  NLXREC.NLXCPROC = "NI0TSDH";

  VPRHDR01.NIQPROID = NI0TW01.NIQPROID[NI0TWW1X]; /* Current proforma*/

  call "IO5800" ("D ", SQLCA, VPRHDR01) {isNoRefresh = yes, isExternal = yes}; /* Delete Proforma Header*/

  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "D      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO5800 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VPRHDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NI0TSDH

// Delete NITREC (Prof Inco Text)
Function NI0TSDI()

  NLXREC.NLXCPROC = "NI0TSDI";

  VPRZIT01.NIQPROID = NI0TW01.NIQPROID[NI0TWW1X]; /* Current proforma#*/
  VPRZIT01.XCTCD = "****"; /* Specify ALL country codes*/
  VPRZIT01.NITLTXTS = -1; /* Specify ALL inco text sequences*/

  call "IO5830" ("D ", SQLCA, VPRZIT01) {isNoRefresh = yes, isExternal = yes};
                                   /* Delete all NITREC matching*/
                                                /* proforma*/
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "D      "; /* Database action*/
    TA1REC.TA1LOCAT[3] = "IO5830 "; /* IO module*/
    TA1REC.TA1DBASE = "DNILO"; /* Database*/
    TA1REC.TA1TBLVU = "VPRZIT01"; /* Table view*/
    XPNL005(); /* Abend routine*/
  end
end // end NI0TSDI

// Delete NIRREC (Proforma Order)
Function NI0TSDO()

  NLXREC.NLXCPROC = "NI0TSDO";

  VPRORD01.NIQPROID = NI0TW01.NIQPROID[NI0TWW1X]; /* Current proforma#*/
  VPRORD01.OP1CUOID = -1; /* Specify ALL cust orders*/
  VPRORD01.OP1NORID = -1; /* Specify ALL nike orders*/

  call "IO5810" ("D ", SQLCA, VPRORD01) {isNoRefresh = yes, isExternal = yes};
                                   /* Delete all NIRREC matching*/
                                                /* proforma*/
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "D      "; /* Database action*/
    TA1REC.TA1LOCAT[3] = "IO5810 "; /* IO module*/
    TA1REC.TA1DBASE = "DNILO"; /* Database*/
    TA1REC.TA1TBLVU = "VPRORD01"; /* Table view*/
    XPNL005(); /* Abend routine*/
  end
end // end NI0TSDO

// Delete NISREC (Proforma Text)
Function NI0TSDT()

  NLXREC.NLXCPROC = "NI0TSDT";

  VPRTXT01.NIQPROID = NI0TW01.NIQPROID[NI0TWW1X]; /* Current proforma#*/
  VPRTXT01.KUCCOID = NIWREC.KUCCOID; /* Proforma customer#*/
  VPRTXT01.NISPTXTC = "C"; /* Text type*/
  VPRTXT01.NISPTXRS = -1; /* Specify ALL rec sequences*/

  call "IO5820" ("D ", SQLCA, VPRTXT01) {isNoRefresh = yes, isExternal = yes};
                                   /* Delete all NISREC matching*/
                                                /* proforma*/
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "D      "; /* Database action*/
    TA1REC.TA1LOCAT[3] = "IO5820 "; /* IO module*/
    TA1REC.TA1DBASE = "DNILO"; /* Database*/
    TA1REC.TA1TBLVU = "VPRTXT01"; /* Table view*/
    XPNL005(); /* Abend routine*/
  end
end // end NI0TSDT

// Inquire KUCREC
Function NI0TSIC()

  NLXREC.NLXCPROC = "NI0TSIC";

  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* Read Customer*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* nil customers only*/
    if (KUCREC.XAUCD == "31"
     || KUCREC.XAUCD == "32"
     || KUCREC.XAUCD == "33")
      if (KUCREC.XXXSTAT == "A") /* active nil customer*/
         /* next sentence*/
      else
        SQLCA.VAGen_SQLCODE = 100;
      end
    else
      SQLCA.VAGen_SQLCODE = 100;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      return;
    else
      TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO0240 "; /* io module*/
      TA1REC.TA1DBASE = "DCUST"; /* database*/
      TA1REC.TA1TBLVU = "VCMPNY01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end

end // end NI0TSIC

// Inquire NIQREC (Proforma Hdr)
Function NI0TSIH()

  NLXREC.NLXCPROC = "NI0TSIH";

  call "IO5800" ("S ", SQLCA, VPRHDR01) {isNoRefresh = yes, isExternal = yes}; /* Read Proforma Header*/

  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO5800 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VPRHDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NI0TSIH

// Inquire NIRREC
Function NI0TSIP()

  NLXREC.NLXCPROC = "NI0TSIP";

  call "IO5810" ("SA", SQLCA, VPRORD01) {isNoRefresh = yes, isExternal = yes}; /* Select unique NIRREC*/

  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "SA     "; /* Database action*/
    TA1REC.TA1LOCAT[3] = "IO5810 "; /* IO module*/
    TA1REC.TA1DBASE = "DNILO"; /* Database*/
    TA1REC.TA1TBLVU = "VPRORD01"; /* Table view*/
    XPNL005(); /* Abend routine*/
  end
end // end NI0TSIP

// Load Proforma Array
Function NI0TSLP()

  NLXREC.NLXCPROC = "NI0TSLP";

  NI0TW01.NI0TWARX = 1; /* Initialize array index*/

   /* ****************************************/
     /* Initialize data base error fields*/
   /* ****************************************/

  TA1REC.TA1LOCAT[3] = "IO5800  ";
  TA1REC.TA1DBASE = "DNILO   ";
  TA1REC.TA1TBLVU = "VPRHDR01";
  NI0TW01.NI0TWNM9 = NI0TM100.KUCCOID;
  TA1REC.TA1TBLKE = NI0TW01.NI0TWNM9;

   /* *******************************/
     /* Open Proforma Header cursor*/
   /* *******************************/

  VPRHDR01.KUCCOID = NI0TM100.KUCCOID;

  call "IO5800" ("S1", SQLCA, VPRHDR01) {isNoRefresh = yes, isExternal = yes};
                                   /* Open proforma header cursor*/

  if (SQLCA.VAGen_SQLCODE != 0) /* If hard error*/
    TA1REC.TA1LOCAT[2] = "S1     ";
    XPNL005(); /* Perform abend routine*/
    NLXREC.NLXERRF = "Y";
    return;
  end

   /* ****************************************/
     /* Read through Proforma Header records*/
   /* ****************************************/

  NI0TW01.NI0TWACT = 0; /* Init array count*/
  set SQLCA empty;

  while (SQLCA.VAGen_SQLCODE == 0) /* While more proforma header recs*/
    call "IO5800" ("N1", SQLCA, VPRHDR01) {isNoRefresh = yes, isExternal = yes}; /* Fetch next proforma*/
    if (SQLCA.VAGen_SQLCODE == 0)
      NI0TW01.NI0TWACT = NI0TW01.NI0TWACT + 1; /* Increment array count*/
      if (NI0TW01.NI0TWACT > 98) /* Format msg--proformas > 98 not shown*/
        NI0TWPM1 = "OVER 98 PROFORMAS MATCHED SELECTION CRITERIA,";
        NI0TWPM2 = " BUT ONLY 98 CAN BE VIEWED";
        NI0TW01.NI0TWACT = +98; /* 98 records in array*/
        call "IO5800" ("C1", SQLCA, VPRHDR01) {isNoRefresh = yes, isExternal = yes}; /* Close prof cursor*/
        return;
      end
      /* *** Format array row ****/
      NI0TW01.NI0TWSEL[NI0TWACT] = " "; /* select cd*/
      NI0TW01.NIQPROID[NI0TWACT] = VPRHDR01.NIQPROID; /* proforma id*/
      NI0TW01.XGPCD[NI0TWACT] = VPRHDR01.XGPCD; /* gpc cd*/
      NI0TW01.YSMXOB[NI0TWACT] = VPRHDR01.YSMXOB; /* type cd*/
      NI0TW01.NI0TWDT9 = VPRHDR01.OP1CUNDT; /* need dt*/
      NI0TW01.NI0TWNYR[NI0TWACT] = NI0TW01.NI0TWYR9;
      NI0TW01.NI0TWNS1[NI0TWACT] = "/";
      NI0TW01.NI0TWNMN[NI0TWACT] = NI0TW01.NI0TWMN9;
      NI0TW01.NI0TWNS2[NI0TWACT] = "/";
      NI0TW01.NI0TWNDY[NI0TWACT] = NI0TW01.NI0TWDY9;
      NI0TW01.NIQPRORS[NI0TWACT] = VPRHDR01.NIQPRORS; /* status cd*/
      NI0TW01.NI0TWDT9 = VPRHDR01.NIQSTATD; /* stat dt*/
      NI0TW01.NI0TWSYR[NI0TWACT] = NI0TW01.NI0TWYR9;
      NI0TW01.NI0TWSS1[NI0TWACT] = "/";
      NI0TW01.NI0TWSMN[NI0TWACT] = NI0TW01.NI0TWMN9;
      NI0TW01.NI0TWSS2[NI0TWACT] = "/";
      NI0TW01.NI0TWSDY[NI0TWACT] = NI0TW01.NI0TWDY9;
    end
  end

  if (SQLCA.VAGen_SQLCODE == 100)
    call "IO5800" ("C1", SQLCA, VPRHDR01) {isNoRefresh = yes, isExternal = yes}; /* Close cursor*/
    if (NI0TW01.NI0TWACT <= 0) /* returned set is empty*/
      if (NI0TM200.VAGen_EZEMSG == " ") /* if no pending msg (e.g. del cmpl)*/
        converseLib.validationFailed(201); /* no proformas found for entered customer*/
      else
        NI0TM100.VAGen_EZEMSG = NI0TM200.VAGen_EZEMSG; /* dspl pending msg*/
        NI0TM200.VAGen_EZEMSG = " ";
      end
      NLXREC.NLXERRF = "Y"; /* set error flag (displ screen 1)*/
    else /* format message--nnn proformas displayed*/
      NI0TW01.NI0TWPCT = NI0TW01.NI0TWACT;
      NI0TW01.NI0TWPSF = " PROFORMAS MATCHING SELECTION CRITERIA";
      NI0TW01.NI0TWPM2 = " "; /* (not using message part 2)*/
    end
    return;
  end

  TA1REC.TA1LOCAT[2] = "N1     "; /* Database action*/
  XPNL005(); /* abend routine for hard error*/
  NLXREC.NLXERRF = "Y"; /* indicate error*/
end // end NI0TSLP

// Security Level 1 - NI0T
Function NI0TSS1()
   /* ****** this sets security for fields in group1*/

  NLXREC.NLXCPROC = "NI0TSS1";

   /* ***************************************************/
   /* Determine if user is 'Inquiry only'...*/
   /* ***************************************************/

  NI0TW01.NI0TWINQ = "N"; /* Prepare for security check*/
  if (COMMAREA.CADELFL == "N") /* If user can't delete*/
    NI0TW01.NI0TWINQ = "Y"; /* User is inquiry only*/
  end
end // end NI0TSS1

//*** RECORD=NI0TW01 ****
// This is the main working storage record for NI0T
// ***********************
Record NI0TW01 type basicRecord
  5 NI0TWINQ NI0TWINQ ; 
  5 NI0TWPAG NI0TWPAG ; 
  5 NI0TWDEL NI0TWDEL ; 
  5 NI0TWARX NI0TWARX ; 
  5 NI0TWSCX NI0TWSCX ; 
  5 NI0TWFPX NI0TWFPX ; 
  5 NI0TWW1X NI0TWW1X ; 
  5 NI0TWW2X NI0TWW2X ; 
  5 NI0TWW3X NI0TWW3X ; 
  5 NI0TWW4X NI0TWW4X ; 
  5 NI0TWW5X NI0TWW5X ; 
  5 NI0TWW6X NI0TWW6X ; 
  5 NI0TWACT NI0TWACT ; 
  5 NI0TWSCT NI0TWSCT ; 
  5 NI0TWCTD NI0TWCTD ; 
  5 NI0TWNM9 NI0TWNM9 ; 
  5 NI0TWMSG NI0TWMSG ; 
  5 * char(1) ; 
  5 NI0TWDT9 NI0TWDT9 ; 
    10 NI0TWCEN NI0TWCEN ; 
    10 NI0TWYR9 NI0TWYR9 ; 
    10 NI0TWMN9 NI0TWMN9 ; 
    10 NI0TWDY9 NI0TWDY9 ; 
  5 * char(1) ; 
  5 NI0TWDTU NI0TWDTU ; 
    10 NI0TWMNU NI0TWMNU ; 
    10 NI0TWDYU NI0TWDYU ; 
    10 NI0TWYRU NI0TWYRU ; 
  5 * char(1) ; 
  5 NI0TWPAR NI0TWPAR [98] ; 
    10 NI0TWSEL NI0TWSEL ; 
    10 NIQPROID NIQPROID ; 
    10 XGPCD XGPCD ; 
    10 YSMXOB YSMXOB ; 
    10 NI0TWNDT NI0TWNDT ; 
      15 NI0TWNMN NI0TWNMN ; 
      15 NI0TWNS1 NI0TWNS1 ; 
      15 NI0TWNDY NI0TWNDY ; 
      15 NI0TWNS2 NI0TWNS2 ; 
      15 NI0TWNYR NI0TWNYR ; 
    10 NIQPRORS NIQPRORS ; 
    10 NI0TWSDT NI0TWSDT ; 
      15 NI0TWSMN NI0TWSMN ; 
      15 NI0TWSS1 NI0TWSS1 ; 
      15 NI0TWSDY NI0TWSDY ; 
      15 NI0TWSS2 NI0TWSS2 ; 
      15 NI0TWSYR NI0TWSYR ; 
  5 * char(1) ; 
  5 NI0TWPMS NI0TWPMS ; 
    10 NI0TWPM1 NI0TWPM1 ; 
      15 NI0TWPCT NI0TWPCT ; 
      15 NI0TWPSF NI0TWPSF ; 
    10 NI0TWPM2 NI0TWPM2 ; 
  5 * char(1) ; 
  5 NI0TWDMS NI0TWDMS ; 
    10 NI0TWDCT NI0TWDCT ; 
    10 NI0TWDM1 NI0TWDM1 ; 
    10 NI0TWDM2 NI0TWDM2 ; 
end // end NI0TW01

// Array count
DataItem NI0TWACT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Array index
DataItem NI0TWARX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// always '019'
DataItem NI0TWCEN char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Delete count
DataItem NI0TWCTD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Delete msg count amt
DataItem NI0TWDCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Delete confirmed (y/n)
DataItem NI0TWDEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Delete msg part 1
DataItem NI0TWDM1 char(35)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Delete msg part 2
DataItem NI0TWDM2 char(35)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Delete msg
DataItem NI0TWDMS char(72)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// W/S version of cymd
DataItem NI0TWDT9 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Date unformatted - MMDDYY
DataItem NI0TWDTU char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Day
DataItem NI0TWDY9 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Day
DataItem NI0TWDYU char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// First proforma index
DataItem NI0TWFPX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Inquiry only user (y/n)
DataItem NI0TWINQ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Month
DataItem NI0TWMN9 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Month
DataItem NI0TWMNU char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// EZEMSG save area
DataItem NI0TWMSG char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Formatted need date
DataItem NI0TWNDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Day
DataItem NI0TWNDY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Numeric 9 work field
DataItem NI0TWNM9 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Month
DataItem NI0TWNMN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// / (slash)
DataItem NI0TWNS1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// / (slash)
DataItem NI0TWNS2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Year
DataItem NI0TWNYR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Order array page load (y/n)
DataItem NI0TWPAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Proforma Array
DataItem NI0TWPAR char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Proforma msg count amt
DataItem NI0TWPCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Proforma count msg part 1
DataItem NI0TWPM1 char(45)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Proforma count msg part 2
DataItem NI0TWPM2 char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Proforma count msg
DataItem NI0TWPMS char(71)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Proforma msg suffix
DataItem NI0TWPSF char(43)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Select count
DataItem NI0TWSCT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Screen index
DataItem NI0TWSCX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Formatted status date
DataItem NI0TWSDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Day
DataItem NI0TWSDY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Invoice Selected field
DataItem NI0TWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Month
DataItem NI0TWSMN char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// / (slash)
DataItem NI0TWSS1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// / (slash)
DataItem NI0TWSS2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Year
DataItem NI0TWSYR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Work index 1
DataItem NI0TWW1X smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work index 2
DataItem NI0TWW2X smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// First select error index
DataItem NI0TWW3X smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// First delete error index
DataItem NI0TWW4X smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Screen index for checking
DataItem NI0TWW5X smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Array index for checking
DataItem NI0TWW6X smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Year
DataItem NI0TWYR9 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Year
DataItem NI0TWYRU char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

