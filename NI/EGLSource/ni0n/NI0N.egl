package ni0n;

import corpcom1.CAMSG;
import corpcom1.CATOAP;
import corpcom2.XX0XW01;
import corpcom3.XPNL002;
import corpcom3.XPNL005;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSNLS01;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XSSM003;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XPTTBL;
import corpx2.XPTLCFL;
import corpx2.XXXZIP;
import ku.common.KUCCOID;
import ku.common.KUCCONM;
import ku.common.KUCREC;
import ku.common.KULAAID;
import ku.common.KULREC;
import ku.common.KUMREC;
import ni.common.NIWREC;
import nl.common.NLAADRID;
import nl.common.NLAINTGR;
import nl.common.NLXREC;
import op.common.OP1CUOID;
import op.common.OP1REC;
import ta.common.TA1REC;
import vv.common.VLADDR01;
import vv.common.VRQTHD01;
//*** PROGRAM=NI0N ****
// ************************************************************
// 
//          ni0n - nil invoice request address overrides
//          --------------------------------------------
// 
// This application allows the user to override the ship-to
// or bill-to address ids.  Override ids can only be valid
// customer address ids on the nil long address table.
// 
// 
// Maintenance History:
//   Date   Who    Remarks
// -------- ------ --------------------------------------------
// 09-22-89 jjohns Creation.
// 12-20-89 jjohns Check xptlcfl instead of the lc id on the
//                 request header (processes 001 and 101).
// 02-13-91 JSHANN DB2 CHANGE FEB 91 KUAREC GONE.
// 07-26-91 jjudki Add cust address map200.
// 11-21-91 jshann correct address error logic
// 12-02-91 jshann added underscore on map200 from field
// 10-15-92 jjudki Use new nlxrcec.
// 10-04-93 jjudki Interpret 1 digit with csp 4.1
// 10-18-93 ahowar Put in Temporary address logic.
// 11-09-93 JJUDKI NOV DB CHANGES.
// 07-26-94 ahowar added default shp-to addr to orig order
// 08-05-94 ahowar if shp-to 0 had to dflt back to customer
//                 07-26-94 change only works if shp-to not
//                 equal 0. Comments are in place to handle
// y2kfix 02-24-98 pharwo  regen for xx0xs01 changes.
// RDHANU 02-17-99 Increased Ship to address id from 2 to 4
// *********************
Program NI0N type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "NL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  KULREC KULREC; // record
  KUMREC KUMREC; // record
  NI0NW01 NI0NW01; // record
  NI0NW02 NI0NW02; // record
  NI0NW03 NI0NW03; // record
  NIWREC NIWREC; // record
  NLXREC NLXREC; // record
  OP1REC OP1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  VLADDR01 VLADDR01; // record
  VRQTHD01 VRQTHD01; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use NI0NT01 {deleteAfterUse = yes}; // table
  use XPTTBL; // table
  use NI0NM.NI0NM100,  // forms
      NI0NM.NI0NM200
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    NI0N000: NI0N000();
    exit program;
  end // end main
end // end NI0N

// main flow
Function NI0N000()
  ;
   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   perform initialization, set application revision nbrs,**/
   /* *   then do main perform until done with application      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0N000";
  COMMAREA.CACURRAP = "NI0N";
  ;
  NI0N001(); /* initilize the application*/
  ;
  NLXREC.NLXEOAF = "N"; /* set end-of-application flag to 'no'*/
  ;
  while (NLXREC.NLXEOAF == "N") /* while not end-of-aplication*/
    NI0N050(); /* process the application screen(s)*/
  end
  ;
  COMMAREA.CACURRAP = "NL0A";
  XPNL002();
  exit program;
end // end NI0N000

// initialize application
Function NI0N001()
  ;
  ;
   /* -----------------------------------------------------------*/
         /* initialize the application working storage*/
   /* -----------------------------------------------------------*/
  ;
  ;
  NLXREC.NLXCPROC = "NI0N001";
  ;
  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen*/
                                   /* converse*/
  VGVar.handleHardIOErrors = 1; /* return control to appl if hard db2*/
                                   /* error*/
  ;
  set NI0NW01 empty; /* clear working storage rec1*/
  set VRQTHD01 empty; /* clear inv req hdr record*/
  set VLADDR01 empty; /* clear long addres record*/
   /* SET KUAREC EMPTY   KUAREC DEINSTALLED FEB 91*/
  set KUCREC empty; /* clear cust comp record*/
  set KUMREC empty; /* clear cust store record*/
  set OP1REC empty; /* clear order header record*/
  set TA1REC empty;
  set SQLCA empty;
  set ERRSQLCA empty;
  ;
  XSENTRY(); /* appl entry security*/
  XSSEGTR(); /* set segmented transaction id*/
  ;
  set NLXREC empty; /* clear common working storage*/
  NLXREC.NLXPF3 = "N"; /* pf3 confirm flag*/
  NLXREC.NLXPF4 = "N"; /* pf4 confirm flag*/
  NLXREC.NLXPF20 = "N"; /* pf20 confirm flag*/
  ;
  NI0NW01.NI0NWSEL = "N"; /* used with pf5*/
  NI0NW01.NI0NWPF5 = "N"; /* pf5 temp addr*/
  NI0NW01.NI0NWOVR = "N"; /* bill-to/ship-to override flag*/
  NI0NW01.NI0NWPFB = "N"; /* bill-to protect flag*/
  ;
  set NIWREC empty; /* clear common working storage*/
  ;
   /* EMPN01;*/
  ;
  if (COMMAREA.CAFRMSYS != "NI")
    COMMAREA.CAUSERA = " ";
  end
  ;
  NIWREC.NIWGROUP = COMMAREA.CAUSERA;
  ;
  if (COMMAREA.CAFROMAP == "NI0M" /* fastpath entry not allowed*/
   || COMMAREA.CAFROMAP == "NI0O" 
   || NIWREC.NIWFRMAP == "NI0L")  /* have skipped ni0m*/
    /* next sentence*/
  else
    COMMAREA.CATOAP = "NI0K";
    XPNL002();
  end
  ;
  XX0XS01(); /* get current date and time*/
  ;
  ;
  NI0NS21(); /* select unique on inv request header*/
  ;
  if (NIWREC.NIWKUID == 0)
    NI0NW01.NI0NWKUC = NIWREC.KUCCOID; /* cust nbr from order*/
    NI0NW01.NI0NWBTA = VRQTHD01.NLAADRID[1]; /* ws bill-to addr*/
    NI0NW01.NI0NWSTA = VRQTHD01.NLAADRID[2]; /* ws ship-to addr*/
  else
    NI0NW01.NI0NWKUC = NIWREC.NIWKUID; /* cust nbr from ni0l*/
    ;
    if (VRQTHD01.NLAADRID[1] > 0)
      NI0NW01.NI0NWBTA = VRQTHD01.NLAADRID[1]; /* ws bill-to addr*/
    else
      NI0NW01.NI0NWBTA = 1; /* default bill-to for comp*/
    end
    ;
    if (VRQTHD01.NLAADRID[2] > 0)
      NI0NW01.NI0NWSTA = VRQTHD01.NLAADRID[2]; /* ws ship-to addr*/
    else
      NI0NW01.NI0NWSTA = 1; /* default ship-to for comp*/
    end
  end
  ;
   /* -----------------------------------------------------------*/
         /* determine the bill-to address*/
   /* -----------------------------------------------------------*/
  ;
  if (VRQTHD01.XPTCD in XPTTBL.XPTCD)
    NI0NW01.XPTLCFL = XPTTBL.XPTLCFL[sysVar.arrayIndex];
  end /* check l/c pterm*/
  ;
  if (NI0NW01.XPTLCFL == "Y") /* cannot override l/c address*/
    NI0NS02(); /* format lc large address*/
    NI0NW01.NI0NWBTA = VLADDR01.NLAADRID;
  else
    if (NI0NW01.NI0NWBTA > 0) /* bill-to addr*/
      NI0NS03(); /* format inv request large address*/
    else
      NI0NS08(); /* select unique on op1rec*/
      NI0NS09(); /* select unique on customer store*/
         /* NI0NS04                     ;get customer bill group id*/
         /* NI0NS05                ;get customer bill group addr id*/
      NI0NS06(); /* format default cust bill-to addr*/
      NI0NW01.NI0NWBTA = VLADDR01.NLAADRID;
    end
  end
  ;
  ;
   /* -----------------------------------------------------------*/
         /* determine the ship-to address*/
   /* -----------------------------------------------------------*/
  ;
  if (NI0NW01.NI0NWSTA > 0) /* ship-to addr*/
    if (NI0NW01.NI0NWSTA == 9999) /* ship-to addr*/
      NI0NS-TEMP-ADDR(); /* format inv request large addr temp*/
    else
      NI0NS07(); /* format inv request large address*/
    end
  else
    if (OP1REC.KUCCOID == 0)
      NI0NS08(); /* select unique on op1rec*/
      NI0NS09(); /* select unique on customer store*/
    end
    NI0NS10(); /* format default cust ship-to addr*/
    NI0NW01.NI0NWSTA = VLADDR01.NLAADRID;
  end
  ;
   /* ------------------------------------------------------*/
    /* Set up working-storage array of screen names*/
   /* ------------------------------------------------------*/
  ;
  NLXREC.NLXSNAME[1] = "NI0NM100"; /* init screens used in this appl*/
  ;
  NLXREC.NLXCSCRN = "NI0NM100"; /* set first screen to display*/
  ;
  ;
  ;
end // end NI0N001

// customer addresses
Function NI0N010()
  ;
   /* initialize the screen variables*/
  ;
  if (converseVar.validationMsgNum == 0)
    if (NI0NW03.NI0NWBSW == "Y")
      NI0NS30(); /* build the ni0nm200 screen*/
    else
      /* next sentence*/
    end
  end
  ;
  NI0NM200.XXXSCRDT = VGVar.currentShortGregorianDate;
  ;
  NI0NS32(); /* protect fields*/
  ;
  NI0NW01.NI0NW1SU = NI0NM200.NI0NW1ST; /* hold address id*/
  ;
  converse NI0NM200 ;
  ;
  NI0NS70(); /* handle special entry (fast-path, pf-keys)*/
  ;
end // end NI0N010

// decide which map to display
Function NI0N050()
  ;
   /* ************************************************************/
   /* *   control process the application screen(s)             **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0N050"; /* set current process name*/
  ;
  sysVar.arrayIndex = 0;
  NLXREC.NLXSCRNX = 0;
  ;
  if (NLXREC.NLXCSCRN in NLXREC.NLXSNAME) /* if current-screen-name is*/
    NLXREC.NLXSCRNX = sysVar.arrayIndex; /* in the screen-array, then set*/
  end /* the screen-index*/
  ;
  set TA1REC empty;
  TA1REC.TA1MAP = NLXREC.NLXCSCRN; /* prepare for abend*/
  ;
  NLXREC.NLXBLDSC = "Y"; /* set build screen flag to 'yes'*/
  NLXREC.NLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
  NLXREC.NLXERRF = "N"; /* clear error flag*/
  ;
  if (NLXREC.NLXSCRNX == 1) /* if screen ni0nm100*/
    while (NLXREC.NLXEOSF == "N") /* show until user is done*/
      NI0N100();
    end
    TA1REC.TA1MAP = NLXREC.NLXCSCRN;
    TA1REC.TA1TBLKE = "UNKNOWN SCREEN NAME";
    TA1REC.TA1LOCAT[2] = NLXREC.NLXCSCRN;
    XPNL005(); /* abend*/
  end
  ;
   /* at this point;*/
       /* if the end-of-application flag (NLXeoaf ) = 'n'*/
         /* the perform will return to the top of ni0n050...*/
       /* else*/
         /* the perform will auto return to ni0n000.*/
  ;
end // end NI0N050

// converse map m100
Function NI0N100()
  ;
   /* ************************************************************/
   /* *    process screen ni0nm100                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from nl0k050 until the end-of-screen   **/
   /* *     flag (nlxeosf) is set to 'y'.                      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0N100";
  ;
  if (NLXREC.NLXBLDSC == "Y")
    NI0N101();
    NLXREC.NLXBLDSC = "N";
  end
  ;
  if (converseVar.eventKey is pf5
   || NI0NW01.NI0NWPF5 == "Y")
    /* next sentence*/
  else
    set NI0NM100.NI0NMSA1 skip;
    set NI0NM100.NI0NMSA2 skip;
    set NI0NM100.NI0NMSA3 skip;
    set NI0NM100.NI0NMSA4 skip;
    set NI0NM100.NI0NMSA5 skip;
    set NI0NM100.NI0NMSA6 skip;
  end
  ;
   /* ***********************************************************/
  converse NI0NM100 ;
  ;
   /* ***********************************************************/
  ;
  VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";
  ;
  NI0N110(); /* validate pfkeys*/
  ;
  if (NLXREC.NLXERRF == "N")
    NI0N120(); /* edit entries and update*/
  end
  ;
  if (NLXREC.NLXERRF == "N")
    NI0N130(); /* determine next action*/
  end
  ;
   /* at this point;*/
     /* if the end-of-screen flag (nlxeosf) is 'n'*/
        /* we go back to top of process ni0n100.*/
     /* if the end-of-screen flag (nlxeosf) is 'y'*/
        /* we return to ni0n050.*/
end // end NI0N100

// build screen
Function NI0N101()
  ;
   /* fill in all screen fields*/
  ;
   /* **************************************/
   /* build screen*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NI0N101";
  ;
  converseLib.clearScreen();
  set NI0NM100 initial;
  ;
  NI0NM100.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  NI0NM100.XXXRVNBR = "00"; /* revision nbr*/
  NI0NM100.XXXPRCNM = "NI0N100"; /* process name*/
  ;
  NI0NS13(); /* format screen header fields*/
  ;
  if (NI0NW01.XPTLCFL == "Y") /* cannot override l/c address*/
    set NI0NM100.NI0NMADR[1] skip;
    NI0NW01.NI0NWPFB = "Y"; /* bill-to protected flag*/
  end
  ;
   /* format bill-to fields*/
  NI0NS14();
   /* format ship-to fields*/
  NI0NS15();
  ;
  if (NI0NW01.NI0NWIER == "Y") /* error on init*/
    NI0NW01.NI0NWIER = "N";
    return;
  end
  ;
  ;
  ;
  ;
end // end NI0N101

// edit pfkeys
Function NI0N110()
  ;
   /* **************************************/
   /* edit pk keys*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NI0N110";
  ;
  set NI0NM100.CATOAP initialAttributes;
  if (NI0NM100.CATOAP != " ") /* if any fastpath data entered*/
    COMMAREA.CATOAP = NI0NM100.CATOAP;
    COMMAREA.CAITEM = NI0NM100.CAITEM;
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002();
    if (converseVar.validationMsgNum == 150)
      set NI0NM100.CATOAP cursor, modified, bold;
    end
    return;
  end
  ;
  if (NLXREC.NLXPF3 == "Y" /* pf3 confirm flag*/
   && converseVar.eventKey not pf3)
    NLXREC.NLXPF3 = "N";
  end
  ;
  if (NLXREC.NLXPF4 == "Y" /* pf4 confirm flag*/
   && converseVar.eventKey not pf4)
    NLXREC.NLXPF4 = "N";
  end
  ;
  if (NLXREC.NLXPF20 == "Y" /* pf20 confirm flag*/
   && converseVar.eventKey not pf20)
    NLXREC.NLXPF20 = "N";
  end
  ;
  if (converseVar.eventKey is enter)
    if (NI0NM100.NI0NMADR[2] == " ")
      set NI0NM100.NI0NMADR[2] modified;
    end
  else
    if (converseVar.eventKey is pf13)
      /* next sentence*/
    else
      if (converseVar.eventKey is pf5)
        if (NI0NM100.NI0NMADR[2] is modified
         && NI0NM100.NI0NMADR[2] > " ")
          NLXREC.NLXERRF = "Y";
          converseLib.validationFailed(411); /* updates not saved - pf4 to confirm*/
          set NI0NM100.NI0NMADR[2] cursor, modified, bold;
        else
          NI0NW01.NI0NWPF5 = "Y";
        end
      else
        if (converseVar.eventKey is pa1
         || converseVar.eventKey is pa2
         || converseVar.eventKey is pa3)
          converseLib.clearScreen();
          
          converseLib.validationFailed(36); /* pa1/2 cause loss of keyed data-rekey*/
                                   /* any change*/
          /* set alterable fields modified*/
          NLXREC.NLXERRF = "Y";
        else
          if (converseVar.eventKey is pf1)
            XSNLS01(); /* nil help routine - exit to gd01*/
          else
            if (converseVar.eventKey is pf4)
              if (NLXREC.NLXPF4 == "N"
               && NI0NM100 is modified)
                NLXREC.NLXPF4 = "Y";
                converseLib.validationFailed(109); /* updates not saved - pf4 to confirm*/
                NLXREC.NLXERRF = "Y";
                return;
              end
              COMMAREA.CAUSERA = " ";
              XSPF4();
            else
              if (converseVar.eventKey is pf3)
                if (NLXREC.NLXPF3 == "N"
                 && NI0NM100 is modified)
                  NLXREC.NLXPF3 = "Y";
                  converseLib.validationFailed(108); /* updates not saved - pf3 to confirm*/
                  NLXREC.NLXERRF = "Y";
                  return;
                end
                if (NIWREC.NIWFRMAP == "NI0L")
                  COMMAREA.CATOAP = "NI0L";
                                   /* exit to incoterms screen*/
                  NIWREC.NIWFRMAP = "NI0N"; /* pf3 from addresses*/
                else
                  COMMAREA.CATOAP = "NI0M";
                                   /* exit to incoterms screen*/
                end
                COMMAREA.CAUSERA = NIWREC.NIWGROUP;
                XPNL002();
                return;
              else
                if (converseVar.eventKey is pf20)
                  if (NLXREC.NLXPF20 == "N"
                   && NI0NM100 is modified)
                    NLXREC.NLXPF20 = "Y";
                    converseLib.validationFailed(110);
                                   /* updates not saved - pf20 to confirm*/
                    NLXREC.NLXERRF = "Y";
                    return;
                  end
                  COMMAREA.CATOAP = "NI0J";
                  XPNL002();
                  return;
                else
                  COMMAREA.CATOAP = " ";
                  converseLib.validationFailed(2); /* INVALID FUNCTION KEY*/
                  NLXREC.NLXERRF = "Y";
                end
              end
            end
          end
        end
      end
    end
  end
end // end NI0N110

// edit entries and update
Function NI0N120()
  ;
   /* **************************************/
   /* edit entries and update*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NI0N120";
  ;
  NI0NW03.NI0NWBSW = "Y"; /* move rec to strg switch*/
  ;
   /* reset field intensity*/
  ;
  set NI0NM100.NI0NMADR[2] cursor, initialAttributes;
  ;
  if (NI0NW01.NI0NWPFB == "N")
    set NI0NM100.NI0NMADR[1] initialAttributes;
  end
  ;
  ;
  if (converseVar.eventKey is pf5)
    /* MOVE ' ' TO NI0NM100.NI0NMADR(2);*/
  else
    if (NI0NW01.NI0NWPF5 == "Y")
      if (NI0NM100.NI0NMADR[2] > " ")
        NLXREC.NLXERRF = "Y";
        converseLib.validationFailed(413);
      else
        if (NI0NM100.NI0NMSA1 == " "
         && NI0NM100.NI0NMSA2 == " "
         && NI0NM100.NI0NMSA3 == " "
         && NI0NM100.NI0NMSA4 == " "
         && NI0NM100.NI0NMSA5 == " "
         && NI0NM100.NI0NMSA6 == " ")
          set NI0NM100.NI0NMSA1 cursor, initialAttributes;
          NLXREC.NLXERRF = "Y";
          converseLib.validationFailed(414);
        end
      end
    end
  end
  ;
   /* set modify flag and save map value for sold to address*/
  ;
  if (NI0NW01.NI0NWPFB == "N")
    if (NI0NM100.NI0NMADR[1] > "  ")
      NI0NW01.NI0NWCHR = NI0NM100.NI0NMADR[1]; /* hold orig addr*/
   /* *TCS CHANGE BEGIN*/
   /* IF NI0NM100.NI0NMADR(1) IN NI0NT01.NI0NWCHR ;*/
   /* '*TCS CHANGE BEGIN*/
      if (NI0NW01.NI0NWNBR in NI0NT01.NI0NWNBR
       && NI0NM100.NI0NMADR[1] != "?")
        NI0NW01.NI0NWH1 = NI0NT01.NI0NWNBR[sysVar.arrayIndex];
        NI0NW01.NLAADRID[1] = NI0NT01.NI0NWNBR[sysVar.arrayIndex];
        NI0NW01.NI0NWNBR = NI0NT01.NI0NWNBR[sysVar.arrayIndex];
        if (NI0NW01.NI0NWNBR != NI0NW01.NI0NWBTA)
          NI0NW01.NI0NWR1 = "Y";
                                   /* set bill-to address override flag*/
          NI0NW01.NI0NWOVR = "Y"; /* set override flag*/
        else
          NI0NW01.NI0NWR1 = "N";
        end
                                   /* set bill-to address override flag*/
      else
        NI0NW01.NLAADRID[1] = NI0NW01.NI0NWNBR;
        if (NI0NW01.NI0NWNBR != NI0NW01.NI0NWBTA)
          NI0NW01.NI0NWR1 = "Y";
                                   /* set bill-to address override flag*/
          NI0NW01.NI0NWOVR = "Y"; /* set override flag*/
        else
          NI0NW01.NI0NWR1 = "N";
        end
                                   /* set bill-to address override flag*/
      end
    end
  end
  ;
   /* set modify flag and save map value*/
  ;
  if (converseVar.eventKey is pf5
   || NI0NW01.NI0NWPF5 == "Y")
  else
    if (NI0NM100.NI0NMADR[2] > "  "
     || NI0NW01.NI0NWSTA == 9999)
      if (NI0NM100.NI0NMADR[2] > "  ")
        NI0NW01.NI0NWCHR = NI0NM100.NI0NMADR[2]; /* hold orig addr*/
  /* IF NI0NM100.NI0NMADR(2) IN NI0NT01.NI0NWCHR*/
        if (NI0NW01.NI0NWNBR in NI0NT01.NI0NWNBR
         && NI0NM100.NI0NMADR[2] != "?")
          NI0NW01.NI0NWH2 = NI0NT01.NI0NWNBR[sysVar.arrayIndex];
          NI0NW01.NLAADRID[2] = NI0NT01.NI0NWNBR[sysVar.arrayIndex];
          NI0NW01.NI0NWNBR = NI0NT01.NI0NWNBR[sysVar.arrayIndex];
          if (NI0NW01.NI0NWNBR != NI0NW01.NI0NWSTA)
            NI0NW01.NI0NWR2 = "Y";
                                   /* set bill-to address override flag*/
            NI0NW01.NI0NWOVR = "Y"; /* set override flag*/
          else
            NI0NW01.NI0NWR2 = "N";
                                   /* set bill-to address override flag*/
          end
        else
          NI0NW01.NLAADRID[2] = NI0NW01.NI0NWNBR;
          if (NI0NW01.NI0NWNBR != NI0NW01.NI0NWSTA)
            NI0NW01.NI0NWR2 = "Y";
                                   /* set bill-to address override flag*/
            NI0NW01.NI0NWOVR = "Y"; /* set override flag*/
          else
            NI0NW01.NI0NWR2 = "N";
                                   /* set bill-to address override flag*/
          end
        end
      else
        NI0NW01.NI0NWR2 = "N"; /* set bill-to address override flag*/
      end
    end
  end
  ;
   /* set modify flag and save map value*/
  ;
  ;
   /* present pop up window for sold-to*/
  ;
  if (NI0NM100.NI0NMADR[1] == "?")
    NI0NW01.NI0NWMSA = "SOLD-TO ADDR";
    NI0NW03.NI0NWBSW = "Y"; /* build screen switch*/
    NI0NW01.NI0NWSEL = "Y"; /* used with ni0nwpf5*/
    NI0NW03.NI0NWIN3 = 1; /* index*/
    NI0NW03.NI0NWIN4 = 1; /* index*/
    NI0NW03.NI0NWFNO = 1; /* number of fields*/
    NI0NM200.KUCCOID = NI0NM100.KUCCOID;
    NI0NS90();
    while (NI0NW03.NI0NWBSW == "Y")
      NI0N010(); /* display cust addresses*/
    end
    if (NI0NM200.NLAADRID > 0)
      NI0NW01.NLAADRID[1] = NI0NM200.NLAADRID;
      NI0NW01.NI0NWNBR = NI0NM200.NLAADRID;
      NI0NM100.NI0NMADR[1] = NI0NW01.NI0NWCHR;
      NI0NW01.NI0NWR1 = "Y"; /* set billto addr ovrride*/
    else
      NI0NW01.NI0NWR1 = "N"; /* set billto addr ovrride*/
    end
    NI0NM200.NLAADRID = 0;
    NLXREC.NLXERRF = "Y"; /* error flag*/
  end
  ;
   /* present pop up window for ship-to*/
  ;
  if (converseVar.eventKey is pf5
   || NI0NW01.NI0NWPF5 == "Y")
  else
    if (NI0NM100.NI0NMADR[2] == "?")
      NI0NW01.NI0NWMSA = "SHIP-TO ADDR";
      NI0NW03.NI0NWBSW = "Y"; /* build screen switch*/
      NI0NW03.NI0NWIN3 = 1; /* index*/
      NI0NW03.NI0NWIN4 = 1; /* index*/
      NI0NW03.NI0NWFNO = 1; /* number of fields*/
      NI0NM200.KUCCOID = NI0NM100.KUCCOID;
      NI0NS90();
      while (NI0NW03.NI0NWBSW == "Y")
        NI0N010(); /* display cust addresses*/
      end
      if (NI0NM200.NLAADRID > 0)
        NI0NW01.NLAADRID[2] = NI0NM200.NLAADRID;
        NI0NW01.NI0NWNBR = NI0NM200.NLAADRID;
        NI0NM100.NI0NMADR[2] = NI0NW01.NI0NWCHR;
        NI0NW01.NI0NWR2 = "Y"; /* set billto addr ovrride*/
      else
        NI0NW01.NI0NWR2 = "N"; /* set billto addr ovrride*/
      end
      NI0NM200.NLAADRID = 0;
      NLXREC.NLXERRF = "Y"; /* error flag*/
    end
  end
  ;
   /* edit bill-to address and reformat screen*/
  ;
  if (NI0NW01.NI0NWPFB == "N")
    if (NI0NM100.NI0NMADR[1] > "0000")
      if (NI0NW01.NI0NWR1 == "Y")
        NI0NS16(); /* format entered bill-to override*/
      end
    else
      set NI0NM100.NI0NMADR[1] cursor, modified, bold;
      converseLib.validationFailed(44);
      NLXREC.NLXERRF = "Y";
    end
  end
  ;
   /* edit ship-to address and reformat screen*/
  ;
  if (converseVar.eventKey is pf5
   || NI0NW01.NI0NWPF5 == "Y")
  else
    if (NI0NM100.NI0NMADR[2] > "0000")
      if (NI0NW01.NI0NWR2 == "Y")
        NI0NS17(); /* format entered sold-to override*/
      end
    else
      if (NI0NW01.NI0NWSTA == 9999
       && NI0NM100.NI0NMADR[2] == " ")
                                  /* OR NI0NM100.NI0NMSA1 IS MODIFIED*/
        /* OR NI0NM100.NI0NMSA2 IS MODIFIED*/
        /* OR NI0NM100.NI0NMSA3 IS MODIFIED*/
        /* OR NI0NM100.NI0NMSA4 IS MODIFIED*/
        /* OR NI0NM100.NI0NMSA5 IS MODIFIED*/
        /* OR NI0NM100.NI0NMSA6 IS MODIFIED;*/
        /* ;  /* next sentence*/
      else
        set NI0NM100.NI0NMADR[2] cursor, modified, bold;
        converseLib.validationFailed(44);
        NLXREC.NLXERRF = "Y";
      end
    end
  end
  ;
  ;
  if (NLXREC.NLXERRF == "Y")
    if ((converseVar.eventKey is pf5)
     || (NI0NW01.NI0NWPF5 == "Y"
     && NI0NW01.NI0NWSEL == "Y"))
      NI0NM100.NI0NMADR[2] = " ";
      NI0NM100.NI0NMSA1 = " ";
      NI0NM100.NI0NMSA2 = " ";
      NI0NM100.NI0NMSA3 = " ";
      NI0NM100.NI0NMSA4 = " ";
      NI0NM100.NI0NMSA5 = " ";
      NI0NM100.NI0NMSA6 = " ";
      set NI0NM100.NI0NMSA1 cursor, initialAttributes;
      set NI0NM100.NI0NMSA2 initialAttributes;
      set NI0NM100.NI0NMSA3 initialAttributes;
      set NI0NM100.NI0NMSA4 initialAttributes;
      set NI0NM100.NI0NMSA5 initialAttributes;
      set NI0NM100.NI0NMSA6 initialAttributes;
      return;
    end
  else
    if ((converseVar.eventKey is pf5))
      NI0NM100.NI0NMADR[2] = " ";
      NI0NM100.NI0NMSA1 = " ";
      NI0NM100.NI0NMSA2 = " ";
      NI0NM100.NI0NMSA3 = " ";
      NI0NM100.NI0NMSA4 = " ";
      NI0NM100.NI0NMSA5 = " ";
      NI0NM100.NI0NMSA6 = " ";
      set NI0NM100.NI0NMSA1 cursor, initialAttributes;
      set NI0NM100.NI0NMSA2 initialAttributes;
      set NI0NM100.NI0NMSA3 initialAttributes;
      set NI0NM100.NI0NMSA4 initialAttributes;
      set NI0NM100.NI0NMSA5 initialAttributes;
      set NI0NM100.NI0NMSA6 initialAttributes;
    else
      if (converseVar.eventKey is pf13)
        return;
      end
    end
  end
  ;
   /* add new addr ids to inv req hdr*/
  ;
  NI0NW01.NI0NWUPF = "N"; /* update inv req hdr flag*/
  ;
  if (NI0NW01.NI0NWH1 == VRQTHD01.NLAADRID[1])
     /* next sentence*/
  else
    VRQTHD01.NLAADRID[1] = NI0NW01.NI0NWH1;
    NI0NW01.NI0NWUPF = "Y";
  end
  ;
  if (converseVar.eventKey is pf5)
  else
    if (NI0NW01.NI0NWPF5 == "Y")
      VRQTHD01.NLAADRID[2] = 9999;
      NI0NW01.NI0NWUPF = "Y";
    else
      if (NI0NW01.NI0NWH2 == VRQTHD01.NLAADRID[2]
       || NI0NW01.NI0NWH2 == 0)
        /* next sentence*/
      else
        NI0NW01.NI0NWUPF = "Y";
        VRQTHD01.NLAADRID[2] = NI0NW01.NI0NWH2;
      end
    end
  end
  ;
end // end NI0N120

// determine next action
Function NI0N130()
  ;
   /* **************************************/
   /* determine next action*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NI0N130";
  ;
  if (converseVar.eventKey is enter)
    if (NI0NW01.NI0NWUPF == "Y") /* update only if appropriate*/
      if (VRQTHD01.NLAADRID[2] == 9999)
        NI0NS-DEL-TEMP-ADR();
      end
      VRQTHD01.ZZZCHGDT = XX0XW01.XX0XWDAT;
      VRQTHD01.ZZZCHGTM = XX0XW01.XX0XWTIM;
      NI0NS22(); /* update inv req hdr*/
      if (VRQTHD01.NLAADRID[2] == 9999)
        VLADDR01.ZZZSDT = XX0XW01.XX0XWDAT;
        VLADDR01.ZZZCHGDT = XX0XW01.XX0XWDAT;
        VLADDR01.ZZZCHGTM = XX0XW01.XX0XWTIM;
        NI0NS-CRE-TEMP-ADR();
      end
    end
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    COMMAREA.CATOAP = "NI0O";
    XPNL002();
    return;
  end
  ;
end // end NI0N130

// format inv request ship-to
Function NI0NS-CRE-TEMP-ADR()
  ;
  NLXREC.NLXCPROC = "NI0NS-CRE-TEMP-ADR";
  ;
   /* Set key for NLAREC*/
  VLADDR01.NLATYPIN = "R";
  VLADDR01.NLABSIND = "S";
  VLADDR01.NLAONECH = " ";
  VLADDR01.NLAINTGR = VRQTHD01.TSFSHPID; /* ts-nike-shp-id*/
  VLADDR01.NLASINT1 = VRQTHD01.OP1NORID; /* op-nike-ord-id*/
  VLADDR01.NLASINT2 = 0;
  VLADDR01.NLAADRID = VRQTHD01.OP1CUOID; /* op-cust-ord-id*/
  VLADDR01.XXX-ADDR1 = NI0NM100.NI0NMSA1;
  VLADDR01.XXX-ADDR2 = NI0NM100.NI0NMSA2;
  VLADDR01.XXX-ADDR3 = NI0NM100.NI0NMSA3;
  VLADDR01.XXX-ADDR4 = NI0NM100.NI0NMSA4;
  VLADDR01.XXX-ADDR5 = NI0NM100.NI0NMSA5;
  VLADDR01.XXX-ADDR6 = NI0NM100.NI0NMSA6;
  VLADDR01.XSTCD = " ";
  VLADDR01.XXXZIP = " ";
  VLADDR01.XCTCD = " ";
  VLADDR01.ZZZCHGCT = 1;
  ;
  call "IO4410" ("A ", SQLCA, VLADDR01) {isNoRefresh = yes, isExternal = yes}; /* insert long address*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    NI0NW01.NI0NWTYP = VLADDR01.NLATYPIN;
    NI0NW01.NI0NWBS = VLADDR01.NLABSIND;
    NI0NW01.NI0NWCHA = VLADDR01.NLAONECH;
    NI0NW01.NI0NWINT = VLADDR01.NLAINTGR;
    NI0NW01.NI0NWIN1 = VLADDR01.NLASINT1;
    NI0NW01.NI0NWIN2 = VLADDR01.NLASINT2;
    NI0NW01.NI0NWADI = VLADDR01.NLAADRID;
    TA1REC.TA1TBLKE = NI0NW01.NI0NWAKE; /* table key*/
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4410 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VLADDR01"; /* database*/
    XPNL005();
  end
  ;
end // end NI0NS-CRE-TEMP-ADR

// format inv request ship-to
Function NI0NS-DEL-TEMP-ADR()
  ;
  NLXREC.NLXCPROC = "NI0NS-DEL-TEMP-ADR";
  ;
   /* Set key for NLAREC*/
  VLADDR01.NLATYPIN = "R";
  VLADDR01.NLABSIND = "S";
  VLADDR01.NLAONECH = " ";
  VLADDR01.NLAINTGR = VRQTHD01.TSFSHPID; /* ts-nike-shp-id*/
  VLADDR01.NLASINT1 = VRQTHD01.OP1NORID; /* op-nike-ord-id*/
  VLADDR01.NLASINT2 = 0;
  VLADDR01.NLAADRID = VRQTHD01.OP1CUOID; /* op-cust-ord-id*/
  ;
  call "IO4410" ("D ", SQLCA, VLADDR01) {isNoRefresh = yes, isExternal = yes}; /* delete loan address*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    NI0NW01.NI0NWTYP = VLADDR01.NLATYPIN;
    NI0NW01.NI0NWBS = VLADDR01.NLABSIND;
    NI0NW01.NI0NWCHA = VLADDR01.NLAONECH;
    NI0NW01.NI0NWINT = VLADDR01.NLAINTGR;
    NI0NW01.NI0NWIN1 = VLADDR01.NLASINT1;
    NI0NW01.NI0NWIN2 = VLADDR01.NLASINT2;
    NI0NW01.NI0NWADI = VLADDR01.NLAADRID;
    TA1REC.TA1TBLKE = NI0NW01.NI0NWAKE; /* table key*/
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4410 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VLADDR01"; /* database*/
    XPNL005();
  end
  ;
end // end NI0NS-DEL-TEMP-ADR

// format inv request ship-to
Function NI0NS-TEMP-ADDR()
  ;
  NLXREC.NLXCPROC = "NI0NS-TEMP-ADDR";
  ;
   /* Set key for NLAREC*/
  VLADDR01.NLATYPIN = "R";
  VLADDR01.NLABSIND = "S";
  VLADDR01.NLAONECH = " ";
  VLADDR01.NLAINTGR = VRQTHD01.TSFSHPID; /* ts-nike-shp-id*/
  VLADDR01.NLASINT1 = VRQTHD01.OP1NORID; /* op-nike-ord-id*/
  VLADDR01.NLASINT2 = 0;
  VLADDR01.NLAADRID = VRQTHD01.OP1CUOID; /* op-cust-ord-id*/
  ;
   /* select unique on large address (temp)*/
  NI0NS20();
  ;
   /* save ship-to address fields*/
  NI0NS12();
  ;
end // end NI0NS-TEMP-ADDR

// format LC bill-to address
Function NI0NS02()
  NLXREC.NLXCPROC = "NI0NS01";
  ;
   /* Set key for NLAREC*/
  VLADDR01.NLATYPIN = "L";
  VLADDR01.NLABSIND = "B";
  VLADDR01.NLAONECH = " ";
  VLADDR01.NLAINTGR = 0;
  VLADDR01.NLASINT1 = VRQTHD01.NCALCIID;
  VLADDR01.NLASINT2 = 0;
  VLADDR01.NLAADRID = 0;
  ;
   /* select unique on large address*/
  NI0NS20();
  ;
   /* save bill-to address in working storage*/
  NI0NS11();
  ;
  ;
  ;
end // end NI0NS02

// format inv request bill-to
Function NI0NS03()
  ;
  NLXREC.NLXCPROC = "NI0NS03";
  ;
   /* Set key for NLAREC*/
  VLADDR01.NLATYPIN = "C";
  VLADDR01.NLABSIND = " ";
  VLADDR01.NLAONECH = " ";
  VLADDR01.NLAINTGR = NI0NW01.NI0NWKUC; /* kuccoid*/
  VLADDR01.NLASINT1 = 0;
  VLADDR01.NLASINT2 = 0;
  VLADDR01.NLAADRID = NI0NW01.NI0NWBTA; /* bill-to addr*/
  ;
   /* select unique on large address*/
  NI0NS20();
  ;
   /* save bill-to address fields in working storage*/
  NI0NS11();
  ;
  ;
  ;
end // end NI0NS03

// format default cust bill-to
Function NI0NS06()
  ;
  NLXREC.NLXCPROC = "NI0NS06";
  ;
   /* Set key for NLAREC*/
  VLADDR01.NLATYPIN = "C";
  VLADDR01.NLABSIND = " ";
  VLADDR01.NLAONECH = " ";
  VLADDR01.NLAINTGR = NI0NW01.NI0NWKUC; /* kuccoid*/
  VLADDR01.NLASINT1 = 0;
  VLADDR01.NLASINT2 = 0;
   /* MOVE KUAREC.KUAADRID TO NLAREC.NLAADRID;*/
  VLADDR01.NLAADRID = KUMREC.KUMSTAID; /* store addr id*/
  ;
   /* select unique on large address*/
  NI0NS20();
  ;
   /* save bill-to address fields in working storage*/
  NI0NS11();
  ;
  ;
  ;
end // end NI0NS06

// format inv request ship-to
Function NI0NS07()
  ;
  NLXREC.NLXCPROC = "NI0NS07";
  ;
   /* Set key for NLAREC*/
  VLADDR01.NLATYPIN = "C";
  VLADDR01.NLABSIND = " ";
  VLADDR01.NLAONECH = " ";
  VLADDR01.NLAINTGR = NI0NW01.NI0NWKUC; /* kuccoid*/
  VLADDR01.NLASINT1 = 0;
  VLADDR01.NLASINT2 = 0;
  VLADDR01.NLAADRID = NI0NW01.NI0NWSTA; /* ship-to addr*/
  ;
   /* select unique on large address*/
  NI0NS20();
  ;
   /* save ship-to address fields*/
  NI0NS12();
  ;
  ;
  ;
end // end NI0NS07

// Select Unique from OP1REC
Function NI0NS08()
  NLXREC.NLXCPROC = "NI0NS08";
  ;
   /* OP1REC - Select Unique*/
  ;
  OP1REC.OP1CUOID = NIWREC.NIWOP1CU[NIWKQIDX];
  OP1REC.OP1NORID = NIWREC.NIWOP1NO[NIWKQIDX];
  OP1REC.OP1PARTN = NIWREC.NIWOP1CH[NIWKQIDX];
  call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* Read Order record*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0430 "; /* io module*/
    TA1REC.TA1DBASE = "DORDER"; /* database*/
    TA1REC.TA1TBLVU = "VORHDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
  ;
end // end NI0NS08

// Select Unique from KUMREC
Function NI0NS09()
  NLXREC.NLXCPROC = "NI0NS09";
  ;
   /* KUMREC - Select Unique*/
  ;
  KUMREC.KUCCOID = OP1REC.KUCCOID;
  KUMREC.KUMSTRID = OP1REC.KUMSTRID;
  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes}; /* Read store*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0340 "; /* io module*/
    TA1REC.TA1DBASE = "DCUST"; /* database*/
    TA1REC.TA1TBLVU = "VSTORE01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NI0NS09

// format default cust ship-to
Function NI0NS10()
  ;
  NLXREC.NLXCPROC = "NI0NS10";
  ;
   /* Set key for NLAREC*/
  VLADDR01.NLATYPIN = "C";
  VLADDR01.NLABSIND = " ";
  VLADDR01.NLAONECH = " ";
  VLADDR01.NLAINTGR = OP1REC.KUCCOID;
  VLADDR01.NLASINT1 = 0;
  VLADDR01.NLASINT2 = 0;
  if (OP1REC.OP1SHAID == 0)
  /* get dorder.voaddr01*/
  /* insert dnilo.vladdr01 with dorder.voaddr01 address*/
  /* need to add iomod for get dorder.voaddr01 to bind plan*/
  /* remove dflt from customer becuase they want it from the order*/
    VLADDR01.NLAADRID = KUMREC.KUMSHAID; /* dflt from customer*/
  else
    VLADDR01.NLAADRID = OP1REC.OP1SHAID; /* dflt from order*/
  end
  ;
   /* select unique on large address*/
  NI0NS20();
  ;
  NI0NS12(); /* SAVE SHIP-TO ADDRESS*/
  ;
end // end NI0NS10

// save bill-to addr in ws
Function NI0NS11()
  NLXREC.NLXCPROC = "NI0NS11";
  ;
   /* save bill-to address*/
  NI0NW01.NLAADRID[1] = VLADDR01.NLAADRID;
  NI0NW01.NI0NWBA1 = VLADDR01.XXX-ADDR1;
  NI0NW01.NI0NWBA2 = VLADDR01.XXX-ADDR2;
  NI0NW01.NI0NWBA3 = VLADDR01.XXX-ADDR3;
  NI0NW01.NI0NWBA4 = VLADDR01.XXX-ADDR4;
  NI0NW01.NI0NWBA5 = VLADDR01.XXX-ADDR5;
  NI0NW01.NI0NWBA6 = VLADDR01.XXX-ADDR6;
  ;
  ;
  ;
end // end NI0NS11

// save ship-to addr in ws
Function NI0NS12()
  ;
  NLXREC.NLXCPROC = "NI0NS12";
  ;
   /* save ship-to address*/
  if (VRQTHD01.NLAADRID[2] == 9999
   && NI0NM100.NI0NMADR[2] == "  ")
    NI0NW01.NLAADRID[2] = 9999;
  else
    NI0NW01.NLAADRID[2] = VLADDR01.NLAADRID;
  end
  ;
  NI0NW01.NI0NWSA1 = VLADDR01.XXX-ADDR1;
  NI0NW01.NI0NWSA2 = VLADDR01.XXX-ADDR2;
  NI0NW01.NI0NWSA3 = VLADDR01.XXX-ADDR3;
  NI0NW01.NI0NWSA4 = VLADDR01.XXX-ADDR4;
  NI0NW01.NI0NWSA5 = VLADDR01.XXX-ADDR5;
  NI0NW01.NI0NWSA6 = VLADDR01.XXX-ADDR6;
  ;
  ;
  ;
end // end NI0NS12

// format screen header fields
Function NI0NS13()
  ;
  ;
   /* **************************************/
   /* fill in all screen header fields*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NI0NS13";
  ;
   /* customer fields*/
  if (NIWREC.NIWKUID == 0) /* no comp number*/
    NI0NM100.KUCCOID = NIWREC.KUCCOID;
    NI0NM100.KUCCONM = NIWREC.KUCCONM;
    NI0NM100.XCTDESC = NIWREC.XCTDESC;
  else
    NI0NM100.KUCCOID = NIWREC.NIWKUID;
    NI0NM100.KUCCONM = NIWREC.NIWKUNM;
    NI0NM100.XCTDESC = NIWREC.NIWDESC;
  end
  ;
   /* nike shipment id*/
  NI0NM100.TSFSHPID = NIWREC.TSFSHPID;
  ;
   /* format order number for screen display*/
  NLXREC.NLXOP1CU = NIWREC.NIWOP1CU[NIWKQIDX];
  NLXREC.NLXOP1NO = NIWREC.NIWOP1NO[NIWKQIDX];
  NI0NM100.NLXOID = NLXREC.NLXOID;
  ;
  ;
  ;
end // end NI0NS13

// format bill-to screen fields
Function NI0NS14()
  NLXREC.NLXCPROC = "NI0NS14";
  ;
   /* F NIOREC.NCALCIID > 0          ;cannot override lc address*/
   /* SET NI0NM100.NLAADRID(1) AUTOSKIP;*/
   /* ND ;*/
  ;
   /* get bill-to address*/
  NI0NW01.NI0NWNBR = NI0NW01.NLAADRID[1];
  ;
  NI0NW01.NI0NWBTA = NI0NW01.NLAADRID[1];
  ;
  NI0NM100.NI0NMADR[1] = NI0NW01.NI0NWCHR;
  NI0NM100.NI0NMBA1 = NI0NW01.NI0NWBA1;
  NI0NM100.NI0NMBA2 = NI0NW01.NI0NWBA2;
  NI0NM100.NI0NMBA3 = NI0NW01.NI0NWBA3;
  NI0NM100.NI0NMBA4 = NI0NW01.NI0NWBA4;
  NI0NM100.NI0NMBA5 = NI0NW01.NI0NWBA5;
  NI0NM100.NI0NMBA6 = NI0NW01.NI0NWBA6;
  ;
  ;
  ;
end // end NI0NS14

// format ship-to screen fields
Function NI0NS15()
  NLXREC.NLXCPROC = "NI0NS15";
  ;
  ;
   /* get ship-to address*/
  NI0NW01.NI0NWNBR = NI0NW01.NLAADRID[2];
  ;
  NI0NW01.NI0NWSTA = NI0NW01.NLAADRID[2];
  ;
  if (NI0NW01.NLAADRID[2] == 9999)
    NI0NM100.NI0NMADR[2] = " ";
  else
    NI0NM100.NI0NMADR[2] = NI0NW01.NI0NWCHR;
  end
  ;
  NI0NM100.NI0NMSA1 = NI0NW01.NI0NWSA1;
  NI0NM100.NI0NMSA2 = NI0NW01.NI0NWSA2;
  NI0NM100.NI0NMSA3 = NI0NW01.NI0NWSA3;
  NI0NM100.NI0NMSA4 = NI0NW01.NI0NWSA4;
  NI0NM100.NI0NMSA5 = NI0NW01.NI0NWSA5;
  NI0NM100.NI0NMSA6 = NI0NW01.NI0NWSA6;
  ;
  ;
  ;
end // end NI0NS15

// format inv req bill-to ovrrid
Function NI0NS16()
  ;
  NLXREC.NLXCPROC = "NI0NS16";
  ;
   /* Set key for NLAREC*/
  VLADDR01.NLATYPIN = "C";
  VLADDR01.NLABSIND = " ";
  VLADDR01.NLAONECH = " ";
  VLADDR01.NLAINTGR = NI0NW01.NI0NWKUC;
  VLADDR01.NLASINT1 = 0;
  VLADDR01.NLASINT2 = 0;
  NI0NW01.NI0NWNBR = NI0NW01.NLAADRID[1];
  NI0NM100.NI0NMADR[1] = NI0NW01.NI0NWCHR; /* orig addr*/
  VLADDR01.NLAADRID = NI0NW01.NLAADRID[1];
  ;
   /* select unique on large address*/
  ;
  NI0NS20();
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* entered id found*/
    NI0NS11(); /* save bill-to address fields in working storage*/
    NI0NS14(); /* move ws address fields to screen*/
  else
    set NI0NM100.NI0NMADR[1] cursor, modified, bold;
    converseLib.validationFailed(44); /* invalid id*/
    NLXREC.NLXERRF = "Y";
  end
  ;
  ;
  ;
end // end NI0NS16

// format inv req ship-to ovrrid
Function NI0NS17()
  ;
  NLXREC.NLXCPROC = "NI0NS17";
  ;
   /* Set key for NLAREC*/
  VLADDR01.NLATYPIN = "C";
  VLADDR01.NLABSIND = " ";
  VLADDR01.NLAONECH = " ";
  VLADDR01.NLAINTGR = NI0NW01.NI0NWKUC;
  VLADDR01.NLASINT1 = 0;
  VLADDR01.NLASINT2 = 0;
  NI0NW01.NI0NWNBR = NI0NW01.NLAADRID[2];
  NI0NM100.NI0NMADR[2] = NI0NW01.NI0NWCHR; /* orig addr*/
  VLADDR01.NLAADRID = NI0NW01.NLAADRID[2];
  ;
   /* select unique on large address*/
  ;
  NI0NS20();
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* entered id found*/
    NI0NS12(); /* save ship-to address fields in working storage*/
    NI0NS15();
  else
    set NI0NM100.NI0NMADR[2] cursor, modified, bold;
    converseLib.validationFailed(44); /* invalid id*/
    NLXREC.NLXERRF = "Y";
  end
  ;
end // end NI0NS17

// Select Unique from NLAREC
Function NI0NS20()
  NLXREC.NLXCPROC = "NI0NS20";
  ;
   /* NLAREC - Select Unique*/
  ;
  call "IO4410" ("S ", SQLCA, VLADDR01) {isNoRefresh = yes, isExternal = yes}; /* Read Long Address*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100
     && NI0NW01.NI0NWOVR == "Y") /* override flag*/
      /* An address should be found unless it has been entered*/
      /* incorrectly.  The override flag means that a message*/
      /* should be displayed.*/
       /* next sentence*/
    else
      NI0NW01.NI0NWTYP = VLADDR01.NLATYPIN;
      NI0NW01.NI0NWBS = VLADDR01.NLABSIND;
      NI0NW01.NI0NWCHA = VLADDR01.NLAONECH;
      NI0NW01.NI0NWINT = VLADDR01.NLAINTGR;
      NI0NW01.NI0NWIN1 = VLADDR01.NLASINT1;
      NI0NW01.NI0NWIN2 = VLADDR01.NLASINT2;
      NI0NW01.NI0NWADI = VLADDR01.NLAADRID;
      TA1REC.TA1TBLKE = NI0NW01.NI0NWAKE; /* table key*/
      TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO4410 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VLADDR01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end
end // end NI0NS20

// Select Unique from NIOREC
Function NI0NS21()
  NLXREC.NLXCPROC = "NI0NS21";
  ;
   /* NIOREC - Select Unique*/
  ;
  VRQTHD01.TSFSHPID = NIWREC.TSFSHPID;
  VRQTHD01.OP1CUOID = NIWREC.NIWOP1CU[NIWKQIDX];
  VRQTHD01.OP1NORID = NIWREC.NIWOP1NO[NIWKQIDX];
  ;
  call "IO0600" ("S ", SQLCA, VRQTHD01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0600 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VRQTHD01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
  ;
  ;
end // end NI0NS21

// Update of NIOREC
Function NI0NS22()
  NLXREC.NLXCPROC = "NI0NS22";
  ;
   /* NIOREC - Update*/
  ;
   /* format request header key*/
  VRQTHD01.TSFSHPID = NIWREC.TSFSHPID;
  VRQTHD01.OP1CUOID = NIWREC.NIWOP1CU[NIWKQIDX];
  VRQTHD01.OP1NORID = NIWREC.NIWOP1NO[NIWKQIDX];
  ;
   /* format request header display key*/
  NI0NW01.NI0NWSID = VRQTHD01.TSFSHPID;
  NI0NW01.NI0NWOID = VRQTHD01.OP1CUOID;
  NI0NW01.NI0NWNID = VRQTHD01.OP1NORID;
  ;
  call "IO0600" ("U ", SQLCA, VRQTHD01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1TBLKE = NI0NW01.NI0NWOKE; /* database key*/
    TA1REC.TA1LOCAT[2] = "U      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0600 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VRQTHD01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
  ;
  ;
end // end NI0NS22

// build the ni0nm200 screen
Function NI0NS30()
  ;
  if (NI0NM200.NI0NW1ST != NI0NW01.NI0NW1SU)
    NI0NW03.NI0NWIN3 = NI0NM200.NI0NW1ST;
  end
  ;
  set NI0NM200 initial;
  ;
  NI0NM200.NI0NMSA = NI0NW01.NI0NWMSA;
  NI0NM200.KUCCOID = NI0NM100.KUCCOID;
  NI0NM200.KUCCONM = NI0NM100.KUCCONM;
  NI0NM200.XCTDESC = NI0NM100.XCTDESC;
  NI0NW03.NI0NWIN4 = 1;
  VLADDR01.NLATYPIN = "C";
  VLADDR01.NLABSIND = " ";
  VLADDR01.NLAONECH = " ";
  VLADDR01.NLAINTGR = NI0NW01.NI0NWKUC;
  VLADDR01.NLASINT1 = 0;
  VLADDR01.NLASINT2 = 0;
  ;
  if (NI0NW03.NI0NWIN3 <= 0)
    NI0NW03.NI0NWIN3 = 1;
  end
  ;
  while (NI0NW03.NI0NWIN4 <= 4                /* screen index*/
   && NI0NW03.NI0NWIN3 <= NI0NW03.NI0NWRCT /* table index le total recs*/
   && NI0NW03.NI0NWIN3 > 0                 
   && NI0NW02.NLAINTGR[NI0NWIN3] > 0)
    NI0NS31(); /* move addresses to screen*/
    NI0NW03.NI0NWIN3 = NI0NW03.NI0NWIN3 + 1; /* table index*/
    NI0NW03.NI0NWIN4 = NI0NW03.NI0NWIN4 + 1; /* screen index*/
  end
  ;
end // end NI0NS30

// get addr and move to screen
Function NI0NS31()
  ;
  NLXREC.NLXCPROC = "NI0NS31";
  ;
  VLADDR01.NLAINTGR = NI0NW02.NLAINTGR[NI0NWIN3];
  VLADDR01.NLAADRID = NI0NW02.NLAADRID[NI0NWIN3];
  ;
   /* select unique - NLAREC*/
  ;
  call "IO4410" ("S ", SQLCA, VLADDR01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VLADDR01";
    TA1REC.TA1PGMNM = "NI0NS31";
    TA1REC.TA1LOC = "SELECT ADDR";
    TA1REC.TA1TBLKE = NI0NW03.NI0NWCID;
    XSSM003(); /* abort routine*/
  end
  ;
  if (NI0NW03.NI0NWIN3 > 0)
    NI0NM200.NI0NW4TH = NI0NW03.NI0NWIN3;
  end
  NI0NW03.NI0NWIN5 = NI0NW03.NI0NWRCT;
  NI0NW03.NI0NWIN6 = NI0NW03.NI0NWRCT;
  NI0NW03.NI0NWIN5 = NI0NW03.NI0NWIN5 - NI0NW03.NI0NWIN3;
  if (NI0NW03.NI0NWIN5 > 4)
    NI0NW03.NI0NWIN6 = NI0NW03.NI0NWIN3 - 3;
  else
    if (NI0NW03.NI0NWIN4 == 4)
      NI0NW03.NI0NWIN6 = NI0NW03.NI0NWIN3 - 3;
    else
      if (NI0NW03.NI0NWIN4 == 3)
        NI0NW03.NI0NWIN6 = NI0NW03.NI0NWIN3 - 2;
      else
        if (NI0NW03.NI0NWIN4 == 2)
          NI0NW03.NI0NWIN6 = NI0NW03.NI0NWIN3 - 1;
        else
          if (NI0NW03.NI0NWIN4 == 1)
            NI0NW03.NI0NWIN6 = NI0NW03.NI0NWRCT;
          end
        end
      end
    end
  end
   /* IF NI0NW03.NI0NWIN5 EQ 0;*/
     /* MOVE NI0NW03.NI0NWRCT TO NI0NW03.NI0NWIN6;*/
   /* ELSE;*/
     /* NI0NW03.NI0NWIN6 = NI0NW03.NI0NWIN3 - 3;*/
   /* END;*/
  NI0NM200.NI0NW1ST = NI0NW03.NI0NWIN6;
  ;
   /* MOVE NI0NW03.NI0NWIN4 TO NI0NM200.NI0NW4TH;*/
  NI0NM200.NI0NWRCT = NI0NW03.NI0NWRCT; /* total records*/
  NI0NM200.KULAAID[NI0NWIN4] = VLADDR01.NLAADRID;
  NI0NM200.XXXADDR1[NI0NWIN4] = VLADDR01.XXX-ADDR1;
  NI0NM200.XXXADDR2[NI0NWIN4] = VLADDR01.XXX-ADDR2;
  NI0NM200.XXXADDR3[NI0NWIN4] = VLADDR01.XXX-ADDR3;
  NI0NM200.XXXADDR4[NI0NWIN4] = VLADDR01.XXX-ADDR4;
  NI0NM200.XXXCITY[NI0NWIN4] = VLADDR01.XXX-ADDR5;
  NI0NM200.XSTCD[NI0NWIN4] = VLADDR01.XSTCD;
  NI0NM200.XXXZIP[NI0NWIN4] = VLADDR01.XXXZIP;
  NI0NM200.XCTDESC[NI0NWIN4] = VLADDR01.XCTCD;
  ;
  ;
end // end NI0NS31

// protect fields
Function NI0NS32()
  set NI0NM200.KULAAID[1] skip;
  set NI0NM200.KULAAID[2] skip;
  set NI0NM200.KULAAID[3] skip;
  set NI0NM200.KULAAID[4] skip;
  set NI0NM200.XXXZIP[1] skip;
  set NI0NM200.XXXZIP[2] skip;
  set NI0NM200.XXXZIP[3] skip;
  set NI0NM200.XXXZIP[4] skip;
   /* SET NI0NM200.NI0NW1ST NORMAL;*/
end // end NI0NS32

// handle any special entries
Function NI0NS70()
  ;
  if (converseVar.eventKey is enter)
    if (NI0NM200.NLAADRID < 0
     || NI0NM200.NLAADRID > NI0NW03.NI0NWRCT)
      set NI0NM200.NLAADRID cursor, modified, bold;
      converseLib.validationFailed(231);
      NI0NW03.NI0NW1ST = 1;
      NI0NW03.NI0NWBSW = "Y";
    else
      if (NI0NM200.NI0NW1ST < 1
       || NI0NM200.NI0NW1ST > NI0NW03.NI0NWRCT)
        set NI0NM200.NI0NW1ST cursor, modified, bold;
        converseLib.validationFailed(231);
      else
        if (NI0NM200.NLAADRID == 0
         && NI0NM200.NI0NW1ST is modified)
            /* NEXT SENTENCE*/
        else
          NI0NW03.NI0NWBSW = "N";
        end
      end
    end
  else
    if (converseVar.eventKey is pa2)
      COMMAREA.CATOAP = "NI0N";
      XSEXIT();
    else
      NI0NS72(); /* handle cc0mm001 pf key entry*/
    end
  end
  ;
end // end NI0NS70

// handle any pf key entry
Function NI0NS72()
  ;
  if (converseVar.eventKey is pf7)
    NI0NS77();
  end
  if (converseVar.eventKey is pf8)
    NI0NS78();
  end
  ;
  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
     /* next sentence*/
  else
    converseLib.validationFailed(2); /* pfkey not supported*/
    NI0NW03.NI0NWBSW = "Y"; /* build screen switch*/
            /* MOVE 'Y' TO NLXREC.NLXERRF    ; error flag*/
  end
  ;
  ;
     /* EZEFLO;*/
end // end NI0NS72

// handle pf7 entry
Function NI0NS77()
  ;
  if (NI0NM200.KULAAID[1] == 1)
    converseLib.validationFailed(29); /* no previous page*/
    NI0NW03.NI0NWBSW = "Y"; /* BUILD SCREEN SWITCH*/
  else
   /* NI0NW03.NI0NWIN3 = NI0NM200.KULAAID(1) - 4;*/
    NI0NW03.NI0NWIN3 = NI0NW01.NI0NW1SU - 4;
    if (NI0NW03.NI0NWIN3 <= 0)
      NI0NW03.NI0NW1ST = 1;
    else
      NI0NW03.NI0NW1ST = NI0NW03.NI0NWIN3;
    end
    NI0NW03.NI0NWBSW = "Y";
  end
end // end NI0NS77

// handle pf8 entry
Function NI0NS78()
  ;
  NI0NW03.NI0NWIN3 = NI0NM200.KULAAID[4] + 1;
  if (NI0NW03.NI0NWIN3 > NI0NW03.NI0NWRCT)
    converseLib.validationFailed(30); /* last record displayed*/
    NI0NW03.NI0NWBSW = "Y";
  else
    NI0NW03.NI0NWBSW = "Y";
    NI0NW03.NI0NW1ST = NI0NW03.NI0NWIN3;
      /* EZEFLO;*/
  end
  ;
  ;
end // end NI0NS78

// get and store company addr.'s
Function NI0NS90()
  ;
  NI0NW03.NI0NWIN3 = 0;
  ;
  set NI0NW02 empty;
  ;
  NI0NS91(); /* select all addresses for company*/
  ;
  if (converseVar.validationMsgNum == 0)
    NI0NW03.NI0NWASW = "Y";
    while (NI0NW03.NI0NWASW == "Y")
      NI0NS92(); /* build temporary storage*/
    end
    if (NI0NW03.NI0NWIN3 == 0)
      converseLib.validationFailed(145); /* no addresses meet criteria*/
    else
      NI0NW03.NI0NWRCT = NI0NW03.NI0NWIN3;
      NI0NW03.NI0NWIN3 = 1;
    end
  end
  ;
end // end NI0NS90

// build temp storage
Function NI0NS91()
  ;
  VLADDR01.NLATYPIN = "C";
  VLADDR01.NLABSIND = " ";
  VLADDR01.NLAONECH = " ";
  VLADDR01.NLAINTGR = NI0NW01.NI0NWKUC;
  VLADDR01.NLASINT1 = 0;
  VLADDR01.NLASINT2 = 0;
  VLADDR01.NLAADRID = -1;
  ;
  ;
  call "IO4410" ("S1", SQLCA, VLADDR01) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    call "IO4410" ("N1", SQLCA, VLADDR01) {isNoRefresh = yes, isExternal = yes}; /* get the 1st record*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if a good return (rec was found)*/
      return; /* go back to ni0nbld*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* if no records were selected*/
        call "IO4410" ("C1", SQLCA, VLADDR01) {isNoRefresh = yes, isExternal = yes};
        converseLib.validationFailed(145); /* no records for company msg*/
        return;
      else
        TA1REC.TA1DBASE = "DNILO";
        TA1REC.TA1TBLVU = "VLADDR01";
        TA1REC.TA1PGMNM = "NI0NS91";
        TA1REC.TA1LOC = "SELECT NEXT";
        NI0NW03.NI0NWCID = VLADDR01.NLAINTGR;
        TA1REC.TA1TBLKE = NI0NW03.NI0NWCID;
        XSSM003(); /* abort routine*/
      end
    end
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VLADDR01";
    TA1REC.TA1PGMNM = "NI0NS91";
    TA1REC.TA1LOC = "SELECT SET";
    NI0NW03.NI0NWCID = VLADDR01.NLAINTGR;
    TA1REC.TA1TBLKE = NI0NW03.NI0NWCID;
    XSSM003(); /* abort routine*/
  end
end // end NI0NS91

// move addresses to temp storage
Function NI0NS92()
  ;
   /* MOVE 'N' TO ni0nw03.ni0nWMST;      /* reset the record-move switch*/
  ;
   /* IF NI0NW03.NI0NWMST = 'Y';*/
  NI0NW03.NI0NWIN3 = NI0NW03.NI0NWIN3 + 1;
  VLADDR01.NLAINTGR = NI0NW01.NI0NWKUC;
  NI0NW02.NLAINTGR[NI0NWIN3] = VLADDR01.NLAINTGR;
  NI0NW02.NLAADRID[NI0NWIN3] = VLADDR01.NLAADRID;
   /* END;*/
  ;
  call "IO4410" ("N1", SQLCA, VLADDR01) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    return; /* go move this record to temp storage*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if no records were selected*/
      NI0NW03.NI0NWRCT = NI0NW03.NI0NWIN3; /* set the number of recs*/
      NI0NW03.NI0NWASW = "N";
      call "IO4410" ("C1", SQLCA, VLADDR01) {isNoRefresh = yes, isExternal = yes};
      return;
    else
      TA1REC.TA1DBASE = "DNILO";
      TA1REC.TA1TBLVU = "VLADDR01";
      TA1REC.TA1PGMNM = "NI0NS92";
      TA1REC.TA1LOC = "SELECT NEXT";
      NI0NW03.NI0NWCID = VLADDR01.NLAINTGR;
      TA1REC.TA1TBLKE = NI0NW03.NI0NWCID;
      XSSM003(); /* abort routine*/
    end
  end
end // end NI0NS92

//*** RECORD=NI0NW01 ****
// this is the main working storage record for ni0h.
// RDHANU 03/8/99 CHANGED NI0NWCHR AND NI0NWNBR FROM 2 TO 4
// ***********************
Record NI0NW01 type basicRecord
  10 NI0NWKUC NI0NWKUC ; 
  10 OP1CUOID OP1CUOID ; 
  10 NI0NWUPF NI0NWUPF ; 
  10 NI0NWOVR NI0NWOVR ; 
  10 NI0NWIER NI0NWIER ; 
  10 NLAADRID NLAADRID [2] ; 
  10 NI0NWBA1 NI0NWBA1 ; 
  10 NI0NWBA2 NI0NWBA2 ; 
  10 NI0NWBA3 NI0NWBA3 ; 
  10 NI0NWBA4 NI0NWBA4 ; 
  10 NI0NWBA5 NI0NWBA5 ; 
  10 NI0NWBA6 NI0NWBA6 ; 
  10 NI0NWSA1 NI0NWSA1 ; 
  10 NI0NWSA2 NI0NWSA2 ; 
  10 NI0NWSA3 NI0NWSA3 ; 
  10 NI0NWSA4 NI0NWSA4 ; 
  10 NI0NWSA5 NI0NWSA5 ; 
  10 NI0NWSA6 NI0NWSA6 ; 
  10 NI0NWAKE NI0NWAKE ; 
    15 NI0NWTYP NI0NWTYP ; 
    15 NI0NWBS NI0NWBS ; 
    15 NI0NWCHA NI0NWCHA ; 
    15 NI0NWINT NI0NWINT ; 
    15 NI0NWIN1 NI0NWIN1 ; 
    15 NI0NWIN2 NI0NWIN2 ; 
    15 NI0NWADI NI0NWADI ; 
  10 NI0NWBTA NI0NWBTA ; 
  10 NI0NWSTA NI0NWSTA ; 
  10 NI0NW1SU NI0NW1SU ; 
  10 NI0NWPFB NI0NWPFB ; 
  10 NI0NWOKE NI0NWOKE ; 
    15 NI0NWSID NI0NWSID ; 
    15 NI0NWOID NI0NWOID ; 
    15 NI0NWNID NI0NWNID ; 
  10 XPTLCFL XPTLCFL ; 
  10 NI0NWR1 NI0NWR1 ; 
  10 NI0NWR2 NI0NWR2 ; 
  10 NI0NWH1 NI0NWH1 ; 
  10 NI0NWH2 NI0NWH2 ; 
  10 NI0NWCHR NI0NWCHR ; 
    15 NI0NWNBR NI0NWNBR ; 
  10 NI0NWMSA NI0NWMSA ; 
  10 NI0NWPF5 NI0NWPF5 ; 
  10 NI0NWSEL NI0NWSEL ; 
end // end NI0NW01

//*** RECORD=NI0NW02 ****
// this record describes the layout of the db2 address table
// record.
// ***********************
Record NI0NW02 type basicRecord
  10 NLAADRID NLAADRID [2000] ; 
  10 NLAINTGR NLAINTGR [2000] ; 
end // end NI0NW02

Record NI0NW03 type basicRecord
  5 NI0NWGRP NI0NWGRP ; 
    10 NI0NWSGP NI0NWSGP ; 
    10 CAMSG CAMSG ; 
    10 NI0NWFNO NI0NWFNO ; 
    10 NI0NWBSW NI0NWBSW ; 
    10 NI0NWIN3 NI0NWIN3 ; 
    10 NI0NWIN4 NI0NWIN4 ; 
    10 NI0NWIN5 NI0NWIN5 ; 
    10 NI0NWIN6 NI0NWIN6 ; 
    10 NI0NWASW NI0NWASW ; 
    10 KULAAID KULAAID ; 
    10 XXXZIP XXXZIP ; 
    10 NI0NWZIP NI0NWZIP ; 
      15 NI0NWZLT NI0NWZLT [10] ; 
    10 KUCCOID KUCCOID ; 
    10 NI0NWCID NI0NWCID ; 
      15 NI0NWCLT NI0NWCLT [7] ; 
    10 NI0NWAID NI0NWAID ; 
      15 NI0NWALT NI0NWALT [4] ; 
    10 KUCCONM KUCCONM ; 
    10 NI0NWRCT NI0NWRCT ; 
    10 CATOAP CATOAP ; 
    10 NI0NW1ST NI0NW1ST ; 
    10 NI0NW4TH NI0NW4TH ; 
    10 NI0NWMSW NI0NWMSW ; 
    10 NLAADRID NLAADRID ; 
end // end NI0NW03

// number of 1st addr on scrn
DataItem NI0NW1ST char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-addr-id hold
DataItem NI0NW1SU int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// number of 4th addr on scrn
DataItem NI0NW4TH char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-addr-id
DataItem NI0NWADI num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working storage number
DataItem NI0NWAID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// laddr display key
DataItem NI0NWAKE char(29)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// individual numbers
DataItem NI0NWALT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// address switch
DataItem NI0NWASW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-addr1 bill-to
DataItem NI0NWBA1 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-addr2
DataItem NI0NWBA2 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-addr3
DataItem NI0NWBA3 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-addr4
DataItem NI0NWBA4 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-addr5
DataItem NI0NWBA5 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-addr6
DataItem NI0NWBA6 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-bill-shp-ind
DataItem NI0NWBS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// build screen switch
DataItem NI0NWBSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-addr-id1 (bill-to)
DataItem NI0NWBTA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// nl-addr-one-char
DataItem NI0NWCHA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// working storage number
DataItem NI0NWCID num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// individual numbers
DataItem NI0NWCLT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of fields
DataItem NI0NWFNO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// credit working storage
DataItem NI0NWGRP char(196)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold orig nlaadrid
DataItem NI0NWH1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// hold orig nlaadrid
DataItem NI0NWH2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// init error flag
DataItem NI0NWIER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-addr-sinteger1
DataItem NI0NWIN1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nl-addr-sinteger2
DataItem NI0NWIN2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem NI0NWIN3 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem NI0NWIN4 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem NI0NWIN5 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem NI0NWIN6 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nl-addr-integer
DataItem NI0NWINT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// company id
DataItem NI0NWKUC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// character
DataItem NI0NWMSA char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// move-record-to-strg switch
DataItem NI0NWMSW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display op-nike-ord-id
DataItem NI0NWNID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display op-cust-ord-id
DataItem NI0NWOID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// niorec display table
DataItem NI0NWOKE char(22)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// bill/ship override flag
DataItem NI0NWOVR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// character
DataItem NI0NWPF5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// bill-to protected flag
DataItem NI0NWPFB char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// build cust addr screen switch
DataItem NI0NWR1 char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// build cust addr screen switch
DataItem NI0NWR2 char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// num of recs in temp strg
DataItem NI0NWRCT num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// nl-addr1 ship-to
DataItem NI0NWSA1 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-addr2
DataItem NI0NWSA2 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-addr3
DataItem NI0NWSA3 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-addr4
DataItem NI0NWSA4 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-addr5
DataItem NI0NWSA5 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-addr6
DataItem NI0NWSA6 char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// character
DataItem NI0NWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// statement group name
DataItem NI0NWSGP char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display TS_NIKE_SHP_ID
DataItem NI0NWSID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nl-addr-id2 (ship-to)
DataItem NI0NWSTA int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// nl-addr-sys-ind
DataItem NI0NWTYP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// inv req update flag
DataItem NI0NWUPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NI0NWZIP char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// individual zip-code letters
DataItem NI0NWZLT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

