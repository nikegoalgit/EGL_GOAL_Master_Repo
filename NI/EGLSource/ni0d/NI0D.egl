package ni0d;

import corpcom2.XX0XW01;
import corpcom2.XZCREC;
import corpcom3.XPNI001;
import corpcom3.XPNL002;
import corpcom3.XPNL004;
import corpcom3.XPNL005;
import corpcom4.XSENTRY;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXXSTAT;
import corpx1.XCTTBL;
import corpx1.XDMCD;
import corpx1.XDZ-DATA-DIST-CD;
import corpx1.XGPCD;
import corpx1.XLATBL;
import corpx1.XUMTBL;
import corpx2.XNXCD;
import corpx2.XQACD;
import corpy2.YLACD;
import corpz3.ZDTTBL;
import corpz3.ZISTBL;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import corpz3.ZZZSDT;
import ku.common.KUCREC;
import ku.common.KUIGRP;
import ku.common.KUIHAGPC;
import ku.common.KUIHASTY;
import ku.common.KUIPRDID;
import ku.common.KUIPRDNM;
import ku.common.KUISKUID;
import ni.common.NIWREC;
import nl.common.*;
import pw.common.PWRLBCD;
import sy.common.SY1REC;
import sy.common.SY1STNBR;
import sy.common.SY2CLRID;
import sy.common.SY5SZID;
import ta.common.TA1REC;
import vv.common.VPIHDR01;
import vv.common.VPIITM01;
import vv.common.VZFC0001;
import ww.common.WCU1710;

//*** PROGRAM=NI0D ****
// Invoice Inquiry - Product Summary
// .
//      This inquiry application displays invoice products at
// a summary level.  The size range is displayed on the second
// screen but no size detail will be shown.  A third Product
// summary screen is available thru a function key only.
// .
// Maintenance
//    Date        Who     Remarks
// -----------   ------   -------
//   11-06-89    tgriff   Moved to Production.
//   04-04-90    jjohns   Change GL fields to match GLAREC.
//   06-13-91    lngo     for DB2 table changes (in NI0DS04)
//   12-05-91    jshann   added feild level securty update for
//                        sales G/L code. change level fl 2 = y
//   12-23-91    JSHANN   prevent update of id1 when void
//   03-31-92    JSHANN   RENAMED XXXUSER1 TO XXXUSID1 STANDARD
//   10-14-92    JJUDKI   OCT DB CHG.
//   10-18-92    JJUDKI   Remove zfctbl from table list. Use io
//                       mod dc0060 for zfcdesc in xpni001.
//    3-02-93    JJUDKI   ADD PF16 TO TRANFER FROM EACH MAP TO
//                       NI0O MAP200 TO VIEW INVOICE COMMENTS.
//    5-04-93    JJUDKI   Compare post date to corp calendar in
//                       map100.
//   10-11-93    ahowar   Added "RI" as a valid ivc upd
//   08-13-97    PMONAG   DCUST table was removed.  Replaced
//                        dcust logic with cu1710.
// *********************
Program NI0D type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "NL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  KUIREC KUIREC; // record
  NI0DW01 NI0DW01; // record
  NI0DW02 NI0DW02; // record
  NIWREC NIWREC; // record
  NLXREC NLXREC; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  TA1REC TA1REC; // record
  VPIHDR01 VPIHDR01; // record
  VPIITM01 VPIITM01; // record
  VZFC0001 VZFC0001; // record
  WCU1710 WCU1710; // record
  XX0XW01 XX0XW01; // record
  XZCREC XZCREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCTTBL {deleteAfterUse = yes}; // table
  use XLATBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use ZISTBL {deleteAfterUse = yes}; // table
  use ZDTTBL {deleteAfterUse = yes}; // table
  use NI0DM.NI0DM100,  // forms
      NI0DM.NI0DM200, 
      NI0DM.NI0DM300
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    NI0D000: NI0D000();


    exit program;



  end // end main
end // end NI0D


// application main logic
Function NI0D000()

   /* -----------------------------------------------------------*/
      /* this is the "main logic" for the application.*/

      /* xsentry checks to ensure that this application was*/
            /* entered from another csp application.*/

   /* -----------------------------------------------------------*/


  NI0D001(); /* initilize the application*/

  NI0DM200.XXXRVNBR = "00"; /* application maint. revision nbr.*/
  NI0DM300.XXXRVNBR = "00"; /* application maint. revision nbr.*/


  NLXREC.NLXEOAF = "N"; /* set end-of-application flag to 'no'*/

  while (NLXREC.NLXEOAF == "N") /* while not end-of-aplication*/
    NI0D050(); /* screen branch control*/
  end

  XSPF4();


end // end NI0D000


// initialize application
Function NI0D001()

   /* -----------------------------------------------------------*/
         /* initialize the application working storage*/

   /* -----------------------------------------------------------*/

  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen converse*/
  VGVar.handleHardIOErrors = 1; /* return control to program if hard db2 error*/

  XSENTRY(); /* check entered thru main menu*/
  XSSEGTR(); /* set segmented transaction id*/

  set SQLCA empty; /* clear out the "common" working*/
                                   /* storage*/
  set ERRSQLCA empty; /* clear out the "common" working*/
                                   /* storage*/
  set TA1REC empty; /* clear out the "common" working*/
                                   /* storage*/
  set NLXREC empty; /* clear out the "common" working*/
                                   /* storage*/
  set VPIHDR01 empty;
  set KUCREC empty;
  set KUIREC empty;
  set VPIITM01 empty;
  set NIWREC empty; /* clear out the "common" working*/
                                   /* storage*/
  set SY1REC empty;
  set NI0DW01 empty; /* clear application working storage*/
  set NI0DW02 empty; /* clear application working storage*/

  if (COMMAREA.CAFRMSYS != "NI")
    COMMAREA.CAUSERA = " ";
  end

  NLXREC.NLXEOAF = "N"; /* set application-done-switch to 'no'*/
  NLXREC.NLXERRF = "N"; /* set error-switch to 'no'*/
  NI0DW01.NI0DWLRS = "N";
  NI0DW01.NI0DWLDX = 1;


   /* ------------------------------------------------------*/
    /* Set up working-storage array of screen names*/
   /* ------------------------------------------------------*/

  NLXREC.NLXCSCRN = "NI0DM100"; /* first screen of applic.*/

  NLXREC.NLXSNAME[1] = "NI0DM100";
                                   /* init screens used in this applic.*/
  NLXREC.NLXSNAME[2] = "NI0DM200";
  NLXREC.NLXSNAME[3] = "NI0DM300";

   /* **********************************************/
   /* Was this application entered via 'fastpath'?*/
   /* **********************************************/
  if (COMMAREA.CAITEM != " ") /* 'Item' will be non-blank if fastpath*/

    XPNL004(); /* Validate caitem numeric*/

    if (NLXREC.NLXERRF == "Y") /* If error in 'item'*/
      NIWREC.NIWMSGNR = 32; /* Clear work area for key*/
      COMMAREA.CATOAP = "NI0A";
      COMMAREA.CAUSERA = NIWREC.NIWGROUP;
      XPNL002();
    else
      NIWREC.NIWIAIDX = 1;
      NIWREC.NIWIAIVC[NIWIAIDX] = NLXREC.NLXNUM8A;
      VPIHDR01.NIDIVCID = NLXREC.NLXNUM8A; /* Load key*/
      XPNI001(); /* Load passed fields*/
      NI0DM100.GLAENT = NLXREC.GLAENT;
      NI0DM100.GLARCID = NLXREC.GLARCID;
      NI0DM100.GLANTAC = NLXREC.GLANTAC;
      NI0DM100.GLASUB = NLXREC.GLASUB;
      NI0DM100.GLAPRJ = NLXREC.GLAPRJ;

    end

    COMMAREA.CATOAP = " "; /* Clear commarea*/
    COMMAREA.CAITEM = " ";

  else /* Normal function key transfer in*/
    if (COMMAREA.CAUSERA != " ")
      NIWREC.NIWGROUP = COMMAREA.CAUSERA;

      if (COMMAREA.CAFROMAP == "NI0O")
        NLXREC.NLXCSCRN = NIW-SENDING-MAP;
      end

      if (NIWREC.NIWIAIDX < 1
       || NIWREC.NIWIAIDX > 100)
        NIWREC.NIWMSGNR = 32; /* Clear work area for key*/
        COMMAREA.CATOAP = "NI0A";
        COMMAREA.CAUSERA = NIWREC.NIWGROUP;
        XPNL002();
      end
    else
      NIWREC.NIWMSGNR = 32; /* Clear work area for key*/
      COMMAREA.CATOAP = "NI0A";
      COMMAREA.CAUSERA = NIWREC.NIWGROUP;
      XPNL002();
    end
  end
end // end NI0D001


// screen branch control
Function NI0D050()

   /* -----------------------------------------------------------*/
      /* control process the application screen(s)*/

     /* note that this process is being performed in a*/
     /* "while loop" until the end-of-application flag is set*/
     /* to 'y'.*/

   /* -----------------------------------------------------------*/

   /* MOVE 'CL02050' TO CLXREC.CLXCPROC; set current process name*/


  sysVar.arrayIndex = 0;
  NLXREC.NLXSCRNX = 0;

  if (NLXREC.NLXCSCRN in NLXREC.NLXSNAME)
     /* if current-screen-name is in the screen-array, then set*/
     /* the screen-index*/
    NLXREC.NLXSCRNX = sysVar.arrayIndex;
  end


  NLXREC.NLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
  NLXREC.NLXBLDSC = "Y"; /* set build screen flag to 'yes'*/
  NLXREC.NLXERRF = "N"; /* clear error flag*/
  converseLib.validationFailed(0);

  if (NLXREC.NLXSCRNX == 1) /* if screen ni0dm100*/
    while (NLXREC.NLXEOSF == "N") /* while not end-of-screen*/
      NI0D100(); /* process screen ni0dm001*/
    end
  else
    if (NLXREC.NLXSCRNX == 2) /* if screen ni0dm200*/
      while (NLXREC.NLXEOSF == "N") /* while not end-of-screen*/
        NI0D200(); /* process screen ni0dm002*/
      end
    else
      if (NLXREC.NLXSCRNX == 3) /* if screen ni0dm300*/
        while (NLXREC.NLXEOSF == "N") /* while not end-of-screen*/
          NI0D300(); /* process screen ni0dm300*/
        end
        /* ELSE ;*/
         /* MOVE 'CLAIMS UNKNOWN SCREEN NAME' TO TA1REC.TA1TBLKE;*/
         /* PERFORM XPCL010;*/
      end
    end
  end


   /* at this point;*/
       /* if the end-of-application flag (nlxeoaf ) = 'n'*/
         /* the perform will return to the top of ni0%050...*/
       /* else*/
         /* the perform will auto return to ni0%000.*/


end // end NI0D050


// product summary screen 1
Function NI0D100()

   /* -----------------------------------------------------------*/
       /* process screen ni0dm001*/

     /* note - this process is being performed in a*/
        /* "while loop" from ni0d050 until the end-of-screen*/
        /* flag (nlxeosfl) is set to 'y'.*/

   /* -----------------------------------------------------------*/

  NLXREC.NLXCPROC = "NI0D100";

  if (NLXREC.NLXBLDSC == "Y")
    NI0D101();
    NLXREC.NLXBLDSC = "N";
  end


  converse NI0DM100 ;

  NI0DM100.VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";

  NI0D110(); /* check attention identifier*/

  if (NLXREC.NLXERRF == "N") /* check for error*/
    NI0D120(); /* process entered option*/
  end


end // end NI0D100


// Build Product Summary map 1
Function NI0D101()
   /* **************************************/
   /* Build Product Summary screen 1*/
   /* **************************************/

  NLXREC.NLXCPROC = "NI0D101";

  converseLib.clearScreen();
  set NI0DM100 empty;

  NI0DM100.XXXRVNBR = "00"; /* revision nbr*/
  NI0DM100.XXXPRCNM = "NI0D100"; /* process name*/
  NI0DM100.XXXMAPNM = "NI0DM100"; /* map name*/
  NI0DW01.NI0DWLIT = " LINE ITEMS FOUND";
  NI0DM100.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/

   /* ***********************************/
   /* Load out current invoice number...*/
   /* ***********************************/

  VPIHDR01.NIDIVCID = NIWREC.NIWIAIVC[NIWIAIDX];

  NI0DM100.NIDIVCID = NIWREC.NIWIAIVC[NIWIAIDX];
  NI0DW01.NI0DWCUO = NIWREC.OP1CUOID; /* Load map fields*/
  NI0DW01.NI0DWNOR = NIWREC.OP1NORID;
  NI0DM100.NI0DMORD = NI0DW01.NI0DWORD;

  NI0DW01.NI0DWKUC = NIWREC.KUCCOID;
  NI0DW01.NI0DWKUM = NIWREC.KUMSTRID;
  NI0DM100.NI0DMCST = NI0DW01.NI0DWCST;

  NI0DM100.KUCCONM = NIWREC.KUCCONM;
  NI0DM100.XCTDESC = NIWREC.XCTDESC;
  NI0DM100.NIWSTAB = NIWREC.NIWSTAB;
  NLXREC.GLAGRP = NIWREC.NIWSLSGL;
  NI0DM100.GLAENT = NLXREC.GLAENT;
  NI0DM100.GLARCID = NLXREC.GLARCID;
  NI0DM100.GLANTAC = NLXREC.GLANTAC;
  NI0DM100.GLASUB = NLXREC.GLASUB;
  NI0DM100.GLAPRJ = NLXREC.GLAPRJ;
  if (COMMAREA.CACLVL[2] == "Y")
    NI0DM100.NI0DM-PF6-KEY = "6:Update";
    XX0XS01(); /* Get date and time*/
    XZCREC.XZCCLNDT = XX0XW01.XX0XWDAT;
    NI0DS-SEL-VDAYS01();
    VPIHDR01.NIDIVCID = NIWREC.NIWIAIVC[NIWIAIDX];
    NI0DS05(); /* Select unique invoice header*/
    if (VPIHDR01.NIAGLPMO >= XZCREC.XZCGLPM2)
      set NI0DM100.GLAENT initialAttributes;
      set NI0DM100.GLARCID initialAttributes;
      set NI0DM100.GLANTAC initialAttributes;
      set NI0DM100.GLASUB initialAttributes;
      set NI0DM100.GLAPRJ initialAttributes;
    else
      set NI0DM100.GLAENT skip;
      set NI0DM100.GLARCID skip;
      set NI0DM100.GLANTAC skip;
      set NI0DM100.GLASUB skip;
      set NI0DM100.GLAPRJ skip;
    end
  else
    set NI0DM100.GLAENT skip;
    set NI0DM100.GLARCID skip;
    set NI0DM100.GLANTAC skip;
    set NI0DM100.GLASUB skip;
    set NI0DM100.GLAPRJ skip;
  end

  if (NIWREC.NIWZDTCD in ZDTTBL.ZDTCD)
    NI0DM100.ZDTABRV = ZDTTBL.ZDTABRV[sysVar.arrayIndex];
  end
  NI0DM100.XXXADR1 = NIWREC.XXXADR1;

   /* Load invoice header and item data to internal array*/

  NI0D205();



  NI0DM100.VAGen_EZEMSG = NI0DW01.NI0DWNOT;

   /* *********************************/
   /* Load out a screen of line items*/
   /* *********************************/

  NI0DW01.NI0DWIDX = NI0DW01.NI0DWLDX;
  NI0DW01.NI0DWSCX = 1;
  while (NI0DW01.NI0DWSCX < 13
   && NI0DW02.NI0DWPRD[NI0DWIDX] != " ")
    NI0DM100.NI0DMPRD[NI0DWSCX] = NI0DW02.NI0DWPRD[NI0DWIDX];
    NI0DM100.NI0DMDSC[NI0DWSCX] = NI0DW02.NI0DWDSC[NI0DWIDX];
    NI0DM100.NI0DMNOQ[NI0DWSCX] = NI0DW02.NI0DWNOQ[NI0DWIDX];
    NI0DM100.NI0DMNSQ[NI0DWSCX] = NI0DW02.NI0DWNSQ[NI0DWIDX];
    NI0DM100.XUMABRV[NI0DWSCX] = NI0DW02.NI0DWUOM[NI0DWIDX];
    NI0DM100.NI0DMNUP[NI0DWSCX] = NI0DW02.NI0DWNUP[NI0DWIDX];
    NI0DM100.OP2PRCOF[NI0DWSCX] = NI0DW02.NI0DWPOF[NI0DWIDX];
    NI0DM100.NI0DMTAM[NI0DWSCX] = NI0DW02.NI0DWTAM[NI0DWIDX];

    NI0DW01.NI0DWSCX = NI0DW01.NI0DWSCX + 1;
    NI0DW01.NI0DWIDX = NI0DW01.NI0DWIDX + 1;
  end
end // end NI0D101


// validate PF keys; act on some
Function NI0D110()
   /* ************************************************************/
     /* validate pf keys*/

   /* The keys acted upon are pf 1, 3, 4, 6, 13, 14, 15, 16, 19 & 21*/
   /* ************************************************************/

  set NI0DM100.CATOAP initialAttributes;
  set NI0DM100.CAITEM initialAttributes;

   /* ***********************************/
      /* check for fastpath option/item*/
   /* ***********************************/

  if (converseVar.eventKey is enter
   && NI0DM100.CATOAP == "NI0O")
    converseLib.validationFailed(387);
    NLXERRF = "Y";
    set NI0DM100.CATOAP cursor, bold;
    return;
  end

  if (converseVar.eventKey is enter)
    if (NI0DM100.CATOAP != " " /* if fastpath option entered,*/
     && NI0DM100.CATOAP != "NI0O")
      COMMAREA.CATOAP = NI0DM100.CATOAP;
      COMMAREA.CAITEM = NI0DM100.CAITEM;
      COMMAREA.CAUSERA = " ";
      XPNL002(); /* exit application*/
      return;
    end
  end


  if (converseVar.eventKey is pf1) /* skip edit/updt, go to 'help'*/
    XSPF1();
  end

  if (converseVar.eventKey is pf3)
    if (NI0DM100 is modified)
      converseLib.validationFailed(108);
      NLXREC.NLXERRF = "Y";
      return;
    end
    COMMAREA.CATOAP = "NI0A"; /* Selection menu*/
    COMMAREA.CAUSERA = " ";
    XPNL002(); /* exit*/
  end

  if (converseVar.eventKey is pf4) /* go to master menu*/
    COMMAREA.CAUSERA = " ";
    XSPF4();
  end

  if (COMMAREA.CACLVL[2] == "Y")
    XX0XS01(); /* Get date and time*/
    XZCREC.XZCCLNDT = XX0XW01.XX0XWDAT;
    NI0DS-SEL-VDAYS01();
    VPIHDR01.NIDIVCID = NIWREC.NIWIAIVC[NIWIAIDX];
    NI0DS05(); /* Select unique on invoice header*/
    if (VPIHDR01.NIAGLPMO >= XZCREC.XZCGLPM2)
      set NI0DM100.GLAENT initialAttributes;
      set NI0DM100.GLARCID initialAttributes;
      set NI0DM100.GLANTAC initialAttributes;
      set NI0DM100.GLASUB initialAttributes;
      set NI0DM100.GLAPRJ initialAttributes;
    else
      set NI0DM100.GLAENT skip;
      set NI0DM100.GLARCID skip;
      set NI0DM100.GLANTAC skip;
      set NI0DM100.GLASUB skip;
      set NI0DM100.GLAPRJ skip;
    end
  end
  if (NI0DM100.GLAENT != VPIHDR01.NIEENT2)
    set NI0DM100.GLAENT modified;
  end
  if (NI0DM100.GLARCID != VPIHDR01.NIERCID2)
    set NI0DM100.GLARCID modified;
  end
  if (NI0DM100.GLANTAC != VPIHDR01.NIENTAC2)
    set NI0DM100.GLANTAC modified;
  end
  if (NI0DM100.GLASUB != VPIHDR01.NIESUB2)
    set NI0DM100.GLASUB modified;
  end
  if (NI0DM100.GLAPRJ != VPIHDR01.NIEPRJ2)
    set NI0DM100.GLAPRJ modified;
  end


  if (converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf6)
    /* NEXT SENTENCE*/
  else
    if (COMMAREA.CACLVL[2] == "Y")
      if (NI0DM100.GLAENT is modified
       || NI0DM100.GLARCID is modified
       || NI0DM100.GLANTAC is modified
       || NI0DM100.GLASUB is modified
       || NI0DM100.GLAPRJ is modified)
        converseLib.validationFailed(240);
        NLXREC.NLXERRF = "Y";
        return;
      end
    end
  end

  if (converseVar.eventKey is enter) /* normal 'enter'*/
    NLXREC.NLXEOSF = "Y";
    NLXREC.NLXCSCRN = "NI0DM200";
    return;
  end

   /* *****************************/
   /* Reverse scrolling requested*/
   /* *****************************/

  if (converseVar.eventKey is pf7) /* Reverse requested*/
    if (NI0DW01.NI0DWLDX == 1) /* From first screen*/

      converseLib.validationFailed(29); /* Top-of-file...*/
      NLXREC.NLXERRF = "Y";
      return;
    else
      NI0DW01.NI0DWLDX = NI0DW01.NI0DWLDX - 12; /* Reset array index*/
      NLXREC.NLXBLDSC = "Y"; /* Re-build screen*/
      return;
    end
  end
   /* *****************************/
   /* Forward scrolling requested*/
   /* *****************************/

  if (converseVar.eventKey is pf8) /* Forward scroll requested*/
    if (NI0DW01.NI0DWLDX == 193) /* From last screen*/

      converseLib.validationFailed(30); /* Bottom-of-file...*/
      NLXREC.NLXERRF = "Y";
      return;
    else
      NI0DW01.NI0DWIDX = NI0DW01.NI0DWLDX; /* Get current low index*/
      NI0DW01.NI0DWIDX = NI0DW01.NI0DWIDX + 12; /* Set to top of next scrn*/
      if (NI0DW02.NI0DWPRD[NI0DWIDX] == " ") /* Is a product present?*/
        converseLib.validationFailed(30); /* Bottom-of-file...*/
        NLXREC.NLXERRF = "Y";
        return;
      else
        NI0DW01.NI0DWLDX = NI0DW01.NI0DWLDX + 12; /* Reset array index*/
        NLXREC.NLXBLDSC = "Y"; /* Re-build screen*/
        return;
      end
    end
  end

  if (converseVar.eventKey is pf13) /* Invoice Header requested*/
    COMMAREA.CATOAP = "NI0C"; /* Invoice header*/
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002(); /* exit*/
  end

  if (converseVar.eventKey is pf14) /* Address inq requested*/
    COMMAREA.CATOAP = "NI0E"; /* addresses*/
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002(); /* exit*/
  end

  if (converseVar.eventKey is pf15) /* Misc adjustments req*/
    /* MOVE 'Y' TO NLXREC.NLXERRF;*/
    /* MOVE 'APPLICATION NOT AVAILABLE' TO NI0DM100.EZEMSG;*/
    /* EZERTN;*/
    COMMAREA.CATOAP = "NI0F"; /* misc charges*/
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002(); /* exit*/
  end

  if (converseVar.eventKey is pf16) /* View Invoice Comments*/
    COMMAREA.CATOAP = "NI0O"; /* addresses*/
    NIW-SENDING-MAP = "NI0DM100";
    NIWREC.NIDIVCID = NI0DM100.NIDIVCID;
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002(); /* exit*/
  end

  if (converseVar.eventKey is pf19) /* P/I Summary 3 req*/
    NLXREC.NLXEOSF = "Y";
    NLXREC.NLXCSCRN = "NI0DM300";
    return;
  end

   /* ************************************************/
   /* Process request for return to 'selection list'*/
   /* ************************************************/

  if (converseVar.eventKey is pf21)
    if (NIWREC.NIWFRMAP == "NI0B") /* Came from selection list*/
      NIWREC.NIWQUIT = "Y";
      COMMAREA.CATOAP = "NI0B"; /* misc charges*/
      COMMAREA.CAUSERA = NIWREC.NIWGROUP;
      XPNL002(); /* exit*/
    else
      converseLib.validationFailed(33); /* No Selection List available*/
      NLXREC.NLXERRF = "Y";
      return;
    end
  end

   /* *******************************************************************/
   /* user has request to update the sales gl and has security to do so*/
   /* *******************************************************************/

  if (converseVar.eventKey is pf6
   && COMMAREA.CACLVL[2] == "Y")
    return;
  end
      /* pf key not valid*/

  converseLib.validationFailed(2); /* pf key not valid*/
  NLXREC.NLXERRF = "Y"; /* mark with error*/


end // end NI0D110


// process entered option
Function NI0D120()

   /* -----------------------------------------------------------*/
         /* process the entered option*/
   /* -----------------------------------------------------------*/

  if (converseVar.eventKey is pf6) /* update invoice*/
    if (COMMAREA.CACLVL[2] == "Y") /* user is authorized to update*/
      if (NI0DM100.GLAENT != VPIHDR01.NIEENT2
       || NI0DM100.GLARCID != VPIHDR01.NIERCID2
       || NI0DM100.GLANTAC != VPIHDR01.NIENTAC2
       || NI0DM100.GLASUB != VPIHDR01.NIESUB2
       || NI0DM100.GLAPRJ != VPIHDR01.NIEPRJ2)
        if (NI0DM100.GLAENT > " "
         && NI0DM100.GLARCID > " "
         && NI0DM100.GLANTAC > " "
         && NI0DM100.GLASUB > " ")
          XX0XS01();
          XZCREC.XZCCLNDT = XX0XW01.XX0XWDAT;
          NI0DS-SEL-VDAYS01();
          VPIHDR01.NIDIVCID = NIWREC.NIWIAIVC[NIWIAIDX];
          NI0DS05(); /* Select unique on invoice header*/
          if (VPIHDR01.NIAGLPMO >= XZCREC.XZCGLPM2)
            NI0DS-ACCT-IVC-UPD(); /* update invoice*/
          end
        else
          converseLib.validationFailed(242);
          NLXREC.NLXERRF = "Y";
          if (NI0DM100.GLAENT == " ")
            set NI0DM100.GLAENT cursor, modified, bold;
          end
          if (NI0DM100.GLARCID == " ")
            set NI0DM100.GLARCID cursor, modified, bold;
          end
          if (NI0DM100.GLANTAC == " ")
            set NI0DM100.GLANTAC cursor, modified, bold;
          end
          if (NI0DM100.GLASUB == " ")
            set NI0DM100.GLASUB cursor, modified, bold;
          end
        end
      else
        converseLib.validationFailed(241);
        NLXREC.NLXERRF = "Y";
      end
    end
  end
  if (NLXREC.NLXEOSF == "N")
    return;
  end

end // end NI0D120


// product summary screen 2
Function NI0D200()

  if (NLXREC.NLXBLDSC == "Y")
    NI0D201();
    NLXREC.NLXBLDSC = "N";
  end


  converse NI0DM200 ;

  NI0DM200.VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";

  NI0D210(); /* check attention identifier*/

  if (NLXREC.NLXERRF == "N")
    NI0D220(); /* process entered option*/
  end



end // end NI0D200


// build screen
Function NI0D201()
   /* **************************************/
   /* Build screen NI0DM200*/
   /* **************************************/

  NLXREC.NLXCPROC = "NI0D201";

  converseLib.clearScreen();
  set NI0DM200 initial;

  NI0DM200.XXXRVNBR = "00"; /* revision nbr*/
  NI0DM200.XXXPRCNM = "NI0D200"; /* process name*/
  NI0DM200.XXXMAPNM = "NI0DM200"; /* process name*/
  NI0DM200.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/

   /* ***********************************/
   /* Load out current invoice number...*/
   /* ***********************************/

  VPIHDR01.NIDIVCID = NIWREC.NIWIAIVC[NIWIAIDX];

  NI0DM200.NIDIVCID = NIWREC.NIWIAIVC[NIWIAIDX];
  NI0DW01.NI0DWCUO = NIWREC.OP1CUOID; /* Load map fields*/
  NI0DW01.NI0DWNOR = NIWREC.OP1NORID;
  NI0DM200.NI0DMORD = NI0DW01.NI0DWORD;

  NI0DW01.NI0DWKUC = NIWREC.KUCCOID;
  NI0DW01.NI0DWKUM = NIWREC.KUMSTRID;
  NI0DM200.NI0DMCST = NI0DW01.NI0DWCST;

  NI0DM200.KUCCONM = NIWREC.KUCCONM;
  NI0DM200.XCTDESC = NIWREC.XCTDESC;
  NI0DM200.NIWSTAB = NIWREC.NIWSTAB;
  NI0DM200.NIWGLACC = NIWREC.NIWSLSGL;

  if (NIWREC.NIWZDTCD in ZDTTBL.ZDTCD)
    NI0DM200.ZDTABRV = ZDTTBL.ZDTABRV[sysVar.arrayIndex];
  end
  NI0DM200.XXXADR1 = NIWREC.XXXADR1;

   /* ****************************************/
   /* If Inquiry only, Darken certain fields*/
   /* ****************************************/

  if (COMMAREA.CAILVL[1] == "N")
    set NI0DM200.NI0DMHD1 invisible;
    set NI0DM200.NI0DMHD2 invisible;
    NI0DW01.NI0DWIDX = 1;

    while (NI0DW01.NI0DWIDX <= 12)
      set NI0DM200.NI0DMUNC[NI0DWIDX] invisible;
      set NI0DM200.NI0DMEXC[NI0DWIDX] invisible;
      NI0DW01.NI0DWIDX = NI0DW01.NI0DWIDX + 1;
    end

    NI0DW01.NI0DWIDX = 1;

  end


  if (COMMAREA.CAFROMAP == "NI0O")
    NI0D205();
  end
  NI0DWLIT = " LINE ITEMS FOUND ";
  NI0DM200.VAGen_EZEMSG = NI0DW01.NI0DWNOT;

   /* *********************************/
   /* Load out a screen of line items*/
   /* *********************************/

  NI0DW01.NI0DWIDX = NI0DW01.NI0DWLDX;
  NI0DW01.NI0DWSCX = 1;
  while (NI0DW01.NI0DWSCX < 13
   && NI0DW02.NI0DWPRD[NI0DWIDX] != " ")
    NI0DM200.NI0DMPRD[NI0DWSCX] = NI0DW02.NI0DWPRD[NI0DWIDX];
    NI0DM200.XQACD[NI0DWSCX] = NI0DW02.NI0DWQLT[NI0DWIDX];
    NI0DM200.NI0DMDSC[NI0DWSCX] = NI0DW02.NI0DWDSC[NI0DWIDX];
    NI0DM200.NI0DMPOI[NI0DWSCX] = NI0DW02.NI0DWPOI[NI0DWIDX];
    NI0DM200.NI0DMFY1[NI0DWSCX] = NI0DW02.NI0DWFY1[NI0DWIDX];
    NI0DM200.NI0DMSZL[NI0DWSCX] = NI0DW02.NI0DWID1[NI0DWIDX];
    NI0DM200.NI0DMSZH[NI0DWSCX] = NI0DW02.NI0DWID2[NI0DWIDX];
    NI0DM200.NI0DMUNC[NI0DWSCX] = NI0DW02.NI0DWUNC[NI0DWIDX];
    NI0DM200.NI0DMEXC[NI0DWSCX] = NI0DWUNC[NI0DWIDX] * NI0DWNSQ[NI0DWIDX];

    NI0DW01.NI0DWSCX = NI0DW01.NI0DWSCX + 1;
    NI0DW01.NI0DWIDX = NI0DW01.NI0DWIDX + 1;
  end
end // end NI0D201


// Build Product Summary map 1
Function NI0D205()
   /* ***********************************************/
   /* Load invoice array for screens 1, 2 and 3*/
   /* ***********************************************/
  NLXREC.NLXCPROC = "NI0D205;";

  VPIHDR01.NIDIVCID = NIWREC.NIWIAIVC[NIWIAIDX];

  NI0DS05();

   /* **************************************/
   /* Load Product Invoice Line Item array*/
   /* **************************************/

  NI0DW01.NI0DWDS1 = "-";
  NI0DW01.NI0DWDS2 = "-";

  VPIITM01.NIDIVCID = NIWREC.NIWIAIVC[NIWIAIDX];

  VPIITM01.XGPCD = "**"; /* Wildcard*/
  VPIITM01.SY1STNBR = "******"; /* ALL*/
  VPIITM01.SY2CLRID = "***"; /* key fields*/
  VPIITM01.XDMCD = "**"; /* except*/
  VPIITM01.XQACD = "**"; /* Invoice number*/

  NI0DS01(); /* Open cursor - NIHREC (P/I items)*/

   /* handle database busy*/
  if (SQLCA.VAGen_SQLCODE == -911)
    NI0DW01.NI0DWCOH = "N"; /* skip fetch loop*/
  else
    NI0DW01.NI0DWCOH = "Y"; /* init fetch loop flag*/
  end

  if (NI0DW01.NI0DWLRS == "N") /* If line-items-read switch off*/
    NI0DW01.NI0DWFCT = 0; /* Zero fetch-count*/

    NI0DW01.NI0DWIDX = 1; /* Load line items array*/
    while (NI0DW01.NI0DWIDX < 201 /* For 200 entries*/
     && NI0DW01.NI0DWCOH == "Y")

      NI0DS02(); /* Load/Close cursor - nihrec*/

      if (NI0DW01.NI0DWCOH == "Y") /* If cursor still open*/

        NI0DW01.NI0DWFCT = NI0DW01.NI0DWFCT + 1;

        set WCU1710 empty; /* Initialize CU1710*/

        if (VPIITM01.KUIPRDID != " ") /* If Cust product id NOT blank*/
          /* MOVE VPIITM01.KUIPRDID TO NI0DW02.NI0DWPRD(NI0DWIDX);*/
          /* MOVE VPIITM01.KUIPRDID TO KUIREC.KUIPRDID;*/
          /* MOVE NIWREC.KUCCOID TO KUIREC.KUISKUID;*/
          WCU1710-IN-CU-CUST-PROD-ID = VPIITM01.KUIPRDID;
          WCU1710-IN-CU-CO-ID = NIWREC.KUCCOID;
          /*  */
          NI0DS-CALL-CU1710();
          /* NI0DS04 ;/*   old cust call*/
          /* Select unique - KUIREC (Cust SKU)*/

          NI0DW02.NI0DWDSC[NI0DWIDX] = KUIREC.KUIPRDNM;

        else
          NI0DW01.NI0DWSTN = VPIITM01.SY1STNBR;
          NI0DW01.NI0DWCLR = VPIITM01.SY2CLRID;
          NI0DW01.NI0DWXDM = VPIITM01.XDMCD;
          NI0DW02.NI0DWPRD[NI0DWIDX] = NI0DW01.NI0DWPRD;

          SY1REC.SY1STNBR = VPIITM01.SY1STNBR;
          SY1REC.XGPCD = VPIITM01.XGPCD;

          NI0DS03(); /* Select unique - SY1REC (Style)*/

          NI0DW02.NI0DWDSC[NI0DWIDX] = SY1REC.SY1SSTNM;

        end

        NI0DW02.NI0DWNOQ[NI0DWIDX] = VPIITM01.NIHORDQT;
        NI0DW02.NI0DWNSQ[NI0DWIDX] = VPIITM01.NIHSHPQT;
        if (VPIITM01.XUMCD in XUMTBL.XUMCD)
          NI0DW02.NI0DWUOM[NI0DWIDX] = XUMTBL.XUMDESC[sysVar.arrayIndex];
        end
        NI0DW02.NI0DWNUP[NI0DWIDX] = VPIITM01.NIHNPRC;
        NI0DW02.NI0DWPOF[NI0DWIDX] = VPIITM01.OP2PRCOF;
        NI0DW02.NI0DWTAM[NI0DWIDX] = VPIITM01.NIHNMRC;
        NI0DW02.NI0DWQLT[NI0DWIDX] = VPIITM01.XQACD;
        NI0DW02.NI0DWPOI[NI0DWIDX] = VPIITM01.PC3POIDT;
        NI0DW02.NI0DWFY1[NI0DWIDX] = VPIITM01.FY1FCTYC;
        NI0DW02.NI0DWID1[NI0DWIDX] = VPIITM01.SY4IDD1;
        NI0DW02.NI0DWID2[NI0DWIDX] = VPIITM01.SY4IDD2;
        NI0DW02.NI0DWUNC[NI0DWIDX] = VPIITM01.SY6CSTUN;

        NI0DW01.NI0DWXDX = 1;
        NI0DW02.NI0DWXC1[NI0DWIDX] = VPIITM01.XCTCD[NI0DWXDX];
        NI0DW02.NI0DWQS1[NI0DWIDX] = VPIITM01.NIHSQTY[NI0DWXDX];

        NI0DW01.NI0DWXDX = 2;
        NI0DW02.NI0DWXC2[NI0DWIDX] = VPIITM01.XCTCD[NI0DWXDX];
        NI0DW02.NI0DWQS2[NI0DWIDX] = VPIITM01.NIHSQTY[NI0DWXDX];

        NI0DW01.NI0DWXDX = 3;
        NI0DW02.NI0DWXC3[NI0DWIDX] = VPIITM01.XCTCD[NI0DWXDX];
        NI0DW02.NI0DWQS3[NI0DWIDX] = VPIITM01.NIHSQTY[NI0DWXDX];

        NI0DW01.NI0DWXDX = 4;
        NI0DW02.NI0DWXC4[NI0DWIDX] = VPIITM01.XCTCD[NI0DWXDX];
        NI0DW02.NI0DWQS4[NI0DWIDX] = VPIITM01.NIHSQTY[NI0DWXDX];

        NI0DW01.NI0DWXDX = 5;
        NI0DW02.NI0DWXC5[NI0DWIDX] = VPIITM01.XCTCD[NI0DWXDX];
        NI0DW02.NI0DWQS5[NI0DWIDX] = VPIITM01.NIHSQTY[NI0DWXDX];

      end
      NI0DW01.NI0DWIDX = NI0DW01.NI0DWIDX + 1;
    end
    NI0DW01.NI0DWLRS = "Y"; /* Set Line-items-read switch on*/
  end


end // end NI0D205


// validate PF keys; act on some
Function NI0D210()
   /* ************************************************************/
     /* validate pf keys*/

   /* The keys acted upon are pf 1, 3, 4, 7, 8, 13,14,15,16,18,19*/
   /* ************************************************************/


  set NI0DM200.CATOAP initialAttributes;
  set NI0DM200.CAITEM initialAttributes;

   /* ***********************************/
      /* check for fastpath option/item*/
   /* ***********************************/

  if (converseVar.eventKey is enter
   && NI0DM200.CATOAP == "NI0O")
    converseLib.validationFailed(387);
    NLXERRF = "Y";
    set NI0DM200.CATOAP cursor, bold;
    return;
  end

  if (converseVar.eventKey is enter)
    if (NI0DM200.CATOAP != " " /* if fastpath option entered,*/
     && NI0DM200.CATOAP != "NI0O")
      COMMAREA.CATOAP = NI0DM200.CATOAP;
      COMMAREA.CAITEM = NI0DM200.CAITEM;
      COMMAREA.CAUSERA = " ";
      XPNL002(); /* exit application*/
    end
  end


  if (converseVar.eventKey is enter) /* normal 'enter'*/
    NLXREC.NLXEOSF = "Y";
    return;
  end


  if (converseVar.eventKey is pf1) /* skip edit/updt, go to 'help'*/
    XSPF1();
  end



  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "NI0A"; /* go to sel menu*/
    COMMAREA.CAUSERA = " ";
    XPNL002(); /* exit*/
  end


  if (converseVar.eventKey is pf4) /* go to master menu*/
    COMMAREA.CAUSERA = " ";
    XSPF4();
  end

   /* *****************************/
   /* Reverse scrolling requested*/
   /* *****************************/

  if (converseVar.eventKey is pf7) /* Reverse requested*/
    if (NI0DW01.NI0DWLDX == 1) /* From first screen*/

      converseLib.validationFailed(29); /* Top-of-file...*/
      NLXREC.NLXERRF = "Y";
      return;
    else
      NI0DW01.NI0DWLDX = NI0DW01.NI0DWLDX - 12; /* Reset array index*/
      NLXREC.NLXBLDSC = "Y"; /* Re-build screen*/
      return;
    end
  end
   /* *****************************/
   /* Forward scrolling requested*/
   /* *****************************/

  if (converseVar.eventKey is pf8) /* Forward scroll requested*/
    if (NI0DW01.NI0DWLDX == 193) /* From last screen*/

      converseLib.validationFailed(30); /* Bottom-of-file...*/
      NLXREC.NLXERRF = "Y";
      return;
    else
      NI0DW01.NI0DWIDX = NI0DW01.NI0DWLDX; /* Get current low index*/
      NI0DW01.NI0DWIDX = NI0DW01.NI0DWIDX + 12; /* Set to top of next scrn*/
      if (NI0DW02.NI0DWPRD[NI0DWIDX] == " ") /* Is a product present?*/
        converseLib.validationFailed(30); /* Bottom-of-file...*/
        NLXREC.NLXERRF = "Y";
        return;
      else
        NI0DW01.NI0DWLDX = NI0DW01.NI0DWLDX + 12; /* Reset array index*/
        NLXREC.NLXBLDSC = "Y"; /* Re-build screen*/
        return;
      end
    end
  end

  if (converseVar.eventKey is pf13)
    COMMAREA.CATOAP = "NI0C"; /* header*/
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002(); /* exit*/
  end


  if (converseVar.eventKey is pf14)
    COMMAREA.CATOAP = "NI0E"; /* addresses*/
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002(); /* exit*/
  end

  if (converseVar.eventKey is pf15)
    COMMAREA.CATOAP = "NI0F"; /* misc charges*/
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002(); /* exit*/
  end

  if (converseVar.eventKey is pf16)
    COMMAREA.CATOAP = "NI0O"; /* View Invoice Comments*/
    NIWREC.NIDIVCID = NI0DM200.NIDIVCID;
    NIW-SENDING-MAP = "NI0DM200";
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002(); /* exit*/
  end

  if (converseVar.eventKey is pf18)
    NLXREC.NLXEOSF = "Y";
    NLXREC.NLXCSCRN = "NI0DM100";
    return;
  end

  if (converseVar.eventKey is pf19)
    NLXREC.NLXEOSF = "Y";
    NLXREC.NLXCSCRN = "NI0DM300";
    return;
  end

   /* ************************************************/
   /* Process request for return to 'selection list'*/
   /* ************************************************/

  if (converseVar.eventKey is pf21)
    if (NIWREC.NIWFRMAP == "NI0B") /* Came from selection list*/
      COMMAREA.CATOAP = "NI0B"; /* misc charges*/
      NIWREC.NIWQUIT = "Y";
      COMMAREA.CAUSERA = NIWREC.NIWGROUP;
      XPNL002(); /* exit*/
    else
      converseLib.validationFailed(33); /* No Selection List available*/
      NLXREC.NLXERRF = "Y";
      return;
    end
  end

      /* pf key not valid*/

  converseLib.validationFailed(2); /* pf key not valid*/
  NLXREC.NLXERRF = "Y"; /* mark with error*/

  set NI0DM200.NI0DMHD1 initialAttributes;
  set NI0DM200.NI0DMHD1 initialAttributes;

end // end NI0D210


// process entered option
Function NI0D220()
   /* -----------------------------------------------------------*/
         /* process the entered option*/
   /* -----------------------------------------------------------*/


  if (NLXREC.NLXEOSF == "N")
    return;
  end

  if (converseVar.eventKey is pf21 /* sel list*/
   || converseVar.eventKey is enter)
    if (NIWREC.NIWFRMAP == "NI0B")
      COMMAREA.CATOAP = "NI0B"; /* go to sel list*/
      COMMAREA.CAUSERA = NIWREC.NIWGROUP;
      XPNL002(); /* exit*/
    else
      COMMAREA.CATOAP = "NI0A"; /* go to sel menu*/
      COMMAREA.CAUSERA = " ";
      XPNL002(); /* exit*/
    end
  end
end // end NI0D220


// product summary screen 3
Function NI0D300()

  if (NLXREC.NLXBLDSC == "Y")
    NI0D301();
    NLXREC.NLXBLDSC = "N";
  end


  converse NI0DM300 ;

  NI0DM300.VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";


  NI0D310(); /* check attention identifier*/

  if (NLXREC.NLXERRF == "N") /* check for error*/
    NI0D320(); /* process entered option*/
  end



end // end NI0D300


// build screen
Function NI0D301()
   /* **************************************/
   /* build screen*/
   /* **************************************/

  NLXREC.NLXCPROC = "NI0D301";

  converseLib.clearScreen();
  set NI0DM300 initial;

  NI0DM300.XXXRVNBR = "00"; /* revision nbr*/
  NI0DM300.XXXPRCNM = "NI0D300"; /* process name*/
  NI0DM300.XXXMAPNM = "NI0DM300"; /* map name*/
  NI0DM300.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/

   /* ***********************************/
   /* Load out current invoice number...*/
   /* ***********************************/

  VPIHDR01.NIDIVCID = NIWREC.NIWIAIVC[NIWIAIDX];

   /* PERFORM XPNI001                 ; Get all P/I info*/

  NI0DM300.NIDIVCID = NIWREC.NIWIAIVC[NIWIAIDX];
  NI0DW01.NI0DWCUO = NIWREC.OP1CUOID; /* Load map fields*/
  NI0DW01.NI0DWNOR = NIWREC.OP1NORID;
  NI0DM300.NI0DMORD = NI0DW01.NI0DWORD;

  NI0DW01.NI0DWKUC = NIWREC.KUCCOID;
  NI0DW01.NI0DWKUM = NIWREC.KUMSTRID;
  NI0DM300.NI0DMCST = NI0DW01.NI0DWCST;

  NI0DM300.KUCCONM = NIWREC.KUCCONM;
  NI0DM300.XCTDESC = NIWREC.XCTDESC;
  NI0DM300.NIWSTAB = NIWREC.NIWSTAB;
  if (NIWREC.NIWZDTCD in ZDTTBL.ZDTCD)
    NI0DM300.ZDTABRV = ZDTTBL.ZDTABRV[sysVar.arrayIndex];
  end
  NI0DM300.NIWGLACC = NIWREC.NIWSLSGL;
  NI0DM300.XXXADR1 = NIWREC.XXXADR1;


  if (COMMAREA.CAFROMAP == "NI0O")
    NI0D205();
  end
  NI0DWLIT = " LINE ITEMS FOUND ";
  NI0DM300.VAGen_EZEMSG = NI0DW01.NI0DWNOT;

   /* *********************************/
   /* Load out a screen of line items*/
   /* *********************************/

  NI0DW01.NI0DWIDX = NI0DW01.NI0DWLDX;
  NI0DW01.NI0DWSCX = 1;
  while (NI0DW01.NI0DWSCX < 13
   && NI0DW02.NI0DWPRD[NI0DWIDX] != " ")
    NI0DM300.NI0DMPRD[NI0DWSCX] = NI0DW02.NI0DWPRD[NI0DWIDX];
    NI0DM300.NI0DMCT1[NI0DWSCX] = NI0DW02.NI0DWXC1[NI0DWIDX];
    NI0DM300.NI0DMQT1[NI0DWSCX] = NI0DW02.NI0DWQS1[NI0DWIDX];
    NI0DM300.NI0DMCT2[NI0DWSCX] = NI0DW02.NI0DWXC2[NI0DWIDX];
    NI0DM300.NI0DMQT2[NI0DWSCX] = NI0DW02.NI0DWQS2[NI0DWIDX];
    NI0DM300.NI0DMCT3[NI0DWSCX] = NI0DW02.NI0DWXC3[NI0DWIDX];
    NI0DM300.NI0DMQT3[NI0DWSCX] = NI0DW02.NI0DWQS3[NI0DWIDX];
    NI0DM300.NI0DMCT4[NI0DWSCX] = NI0DW02.NI0DWXC4[NI0DWIDX];
    NI0DM300.NI0DMQT4[NI0DWSCX] = NI0DW02.NI0DWQS4[NI0DWIDX];
    NI0DM300.NI0DMCT5[NI0DWSCX] = NI0DW02.NI0DWXC5[NI0DWIDX];
    NI0DM300.NI0DMQT5[NI0DWSCX] = NI0DW02.NI0DWQS5[NI0DWIDX];

    NI0DW01.NI0DWSCX = NI0DW01.NI0DWSCX + 1;
    NI0DW01.NI0DWIDX = NI0DW01.NI0DWIDX + 1;
  end
end // end NI0D301


// validate PF keys; act on some
Function NI0D310()
   /* ************************************************************/
     /* validate pf keys*/

   /* The keys acted upon are pf 1, 3, 4, 7, 8, 13,14,15,16,17,21*/
   /* ************************************************************/


  set NI0DM300.CATOAP initialAttributes;
  set NI0DM300.CAITEM initialAttributes;

   /* ***********************************/
      /* check for fastpath option/item*/
   /* ***********************************/
  if (converseVar.eventKey is enter
   && NI0DM300.CATOAP == "NI0O")
    converseLib.validationFailed(387);
    NLXERRF = "Y";
    set NI0DM300.CATOAP cursor, bold;
    return;
  end

  if (converseVar.eventKey is enter)
    if (NI0DM300.CATOAP != " " /* if fastpath option entered,*/
     && NI0DM300.CATOAP != "NI0O")
      COMMAREA.CATOAP = NI0DM300.CATOAP;
      COMMAREA.CAITEM = NI0DM300.CAITEM;
      COMMAREA.CAUSERA = " ";
      XPNL002(); /* exit application*/
    end
  end


  if (converseVar.eventKey is enter) /* normal 'enter'*/
    NLXREC.NLXEOSF = "Y";
    NLXREC.NLXCSCRN = "NI0DM100";
    return;
  end


  if (converseVar.eventKey is pf1) /* skip edit/updt, go to 'help'*/
    XSPF1();
  end



  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "NI0A"; /* go to sel menu*/
    COMMAREA.CAUSERA = " ";
    XPNL002(); /* exit*/
  end


  if (converseVar.eventKey is pf4) /* go to master menu*/
    COMMAREA.CAUSERA = " ";
    XSPF4();
  end

   /* *****************************/
   /* Reverse scrolling requested*/
   /* *****************************/

  if (converseVar.eventKey is pf7) /* Reverse requested*/
    if (NI0DW01.NI0DWLDX == 1) /* From first screen*/

      converseLib.validationFailed(29); /* Top-of-file...*/
      NLXREC.NLXERRF = "Y";
      return;
    else
      NI0DW01.NI0DWLDX = NI0DW01.NI0DWLDX - 12; /* Reset array index*/
      NLXREC.NLXBLDSC = "Y"; /* Re-build screen*/
      return;
    end
  end
   /* *****************************/
   /* Forward scrolling requested*/
   /* *****************************/

  if (converseVar.eventKey is pf8) /* Forward scroll requested*/
    if (NI0DW01.NI0DWLDX == 193) /* From last screen*/

      converseLib.validationFailed(30); /* Bottom-of-file...*/
      NLXREC.NLXERRF = "Y";
      return;
    else
      NI0DW01.NI0DWIDX = NI0DW01.NI0DWLDX; /* Get current low index*/
      NI0DW01.NI0DWIDX = NI0DW01.NI0DWIDX + 12; /* Set to top of next scrn*/
      if (NI0DW02.NI0DWPRD[NI0DWIDX] == " ") /* Is a product present?*/
        converseLib.validationFailed(30); /* Bottom-of-file...*/
        NLXREC.NLXERRF = "Y";
        return;
      else
        NI0DW01.NI0DWLDX = NI0DW01.NI0DWLDX + 12; /* Reset array index*/
        NLXREC.NLXBLDSC = "Y"; /* Re-build screen*/
        return;
      end
    end
  end

  if (converseVar.eventKey is pf13)
    COMMAREA.CATOAP = "NI0C"; /* header*/
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002(); /* exit*/
  end

  if (converseVar.eventKey is pf14)
    COMMAREA.CATOAP = "NI0E"; /* addresses*/
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002(); /* exit*/
  end

  if (converseVar.eventKey is pf15)
    COMMAREA.CATOAP = "NI0F"; /* misc charges*/
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002(); /* exit*/
  end

  if (converseVar.eventKey is pf16)
    COMMAREA.CATOAP = "NI0O"; /* View Invoice Comments*/
    NIW-SENDING-MAP = "NI0DM300";
    NIWREC.NIDIVCID = NI0DM300.NIDIVCID;
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002(); /* exit*/
  end

  if (converseVar.eventKey is pf17)
    NLXREC.NLXEOSF = "Y";
    NLXREC.NLXCSCRN = "NI0DM200";
    return;
  end
   /* ************************************************/
   /* Process request for return to 'selection list'*/
   /* ************************************************/

  if (converseVar.eventKey is pf21)
    if (NIWREC.NIWFRMAP == "NI0B") /* Came from selection list*/
      COMMAREA.CATOAP = "NI0B"; /* misc charges*/
      NIWREC.NIWQUIT = "Y";
      COMMAREA.CAUSERA = NIWREC.NIWGROUP;
      XPNL002(); /* exit*/
    else
      converseLib.validationFailed(33); /* No Selection List available*/
      NLXREC.NLXERRF = "Y";
      return;
    end
  end

      /* pf key not valid*/

  converseLib.validationFailed(2); /* pf key not valid*/
  NLXREC.NLXERRF = "Y"; /* mark with error*/


end // end NI0D310


// process entered option
Function NI0D320()

   /* -----------------------------------------------------------*/
         /* process the entered option*/
   /* -----------------------------------------------------------*/

  if (NLXREC.NLXEOSF == "N")
    return;
  end

end // end NI0D320


// update the ivc header
Function NI0DS-ACCT-IVC-UPD()
  NLXREC.NLXCPROC = "NI0DS-AC";

  set NI0DM100.GLAENT initialAttributes;
  set NI0DM100.GLARCID initialAttributes;
  set NI0DM100.GLANTAC initialAttributes;
  set NI0DM100.GLASUB initialAttributes;
  set NI0DM100.GLAPRJ initialAttributes;
  NLXREC.GLAENT = NI0DM100.GLAENT;
  NLXREC.GLARCID = NI0DM100.GLARCID;
  NLXREC.GLANTAC = NI0DM100.GLANTAC;
  NLXREC.GLASUB = NI0DM100.GLASUB;
  NLXREC.GLAPRJ = NI0DM100.GLAPRJ;
  NIWREC.NIWSLSGL = NLXREC.GLAGRP;
  VPIHDR01.NIEENT2 = NLXREC.GLAENT;
  VPIHDR01.NIERCID2 = NLXREC.GLARCID;
  VPIHDR01.NIENTAC2 = NLXREC.GLANTAC;
  VPIHDR01.NIESUB2 = NLXREC.GLASUB;
  VPIHDR01.NIEPRJ2 = NLXREC.GLAPRJ;

   /* -----------------------------------------------------------*/
     /* Accounting update of invoice header*/
   /* -----------------------------------------------------------*/

  if (VPIHDR01.ZISCD == "AC" || 
  VPIHDR01.ZISCD == "RI") /* change the change date only if not*/
    XX0XS01(); /* get date and time*/
    VPIHDR01.ZZZCHGDT = XX0XW01.XX0XWDAT;
    VPIHDR01.ZZZCHGTM = XX0XW01.XX0XWTIM;
    VPIHDR01.XXXUSID1 = COMMAREA.CAUSERID;
  end

   /* ************************/
   /* NIEREC - Update Unique*/
   /* ************************/

  call "IO4470" ("U ", SQLCA, VPIHDR01) {isNoRefresh = yes, isExternal = yes}; /* Update P/I Hdr*/

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "U      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4470 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VPIHDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end

  converseLib.validationFailed(238);


end // end NI0DS-ACCT-IVC-UPD


// CALL CU1710
Function NI0DS-CALL-CU1710()

  set SQLCA empty;

  call "CU1710" (WCU1710) {isNoRefresh = yes, isExternal = yes}; /* To get cust prod id from vcucpx01*/
  if (WCU1710-RETURN-CODE != 0)

    if (WCU1710-RETURN-CODE == 3)
      converseLib.validationFailed(4); /* database is busy*/
      NLXREC.NLXERRF = "Y";
    else
      if (WCU1710-RETURN-CODE == 1 || 
      WCU1710-RETURN-CODE == 2 || 
      WCU1710-RETURN-CODE == 6 || 
      WCU1710-RETURN-CODE == 8 || 
      WCU1710-RETURN-CODE == 9)
            /* next sentence*/
      else
        TA1REC.TA1LOCAT[2] = "CL0M984"; /* location*/
        TA1REC.TA1LOCAT[3] = "CU1710"; /* location*/
        TA1REC.TA1LOCAT[4] = WCU1710-RETURN-CODE; /* cu1710 rtn code*/
        TA1REC.TA1DBASE = "CU1710"; /* program name*/
  /* PERFORM XPCL010;           /* error diagnosis routine*/
      end
    end
  end
end // end NI0DS-CALL-CU1710


// Select Unique - VDAYS01
Function NI0DS-SEL-VDAYS01()
   /* ************************/
   /* VDAYS01 - Select Unique*/
   /* ************************/

  NLXREC.NLXCPROC = "NI0DS-SEL-VDAYS01";

  call "IO0900" ("S ", SQLCA, XZCREC) {isNoRefresh = yes, isExternal = yes}; /* Read Calendar*/

  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0900 "; /* io module*/
    TA1REC.TA1DBASE = "DCORP"; /* database*/
    TA1REC.TA1TBLVU = "VDAYS001"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NI0DS-SEL-VDAYS01


// Open cursor 1 - NIHREC
Function NI0DS01()
   /* ************************/
   /* NIHREC - Open cursor 1*/
   /* ************************/

  NLXREC.NLXCPROC = "NI0DS01";

  call "IO4480" ("S1", SQLCA, VPIITM01) {isNoRefresh = yes, isExternal = yes}; /* Open P/I itm cursor*/

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "S1     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4480 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VPIITM01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NI0DS01


// Load/Close cursor - NIHREC
Function NI0DS02()
   /* ************************/
   /* NIHREC - Load Cursor 1*/
   /* ************************/

  NLXREC.NLXCPROC = "NI0DS02";

  call "IO4480" ("N1", SQLCA, VPIITM01) {isNoRefresh = yes, isExternal = yes}; /* Load P/I itm cursor*/

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    if (SQLCA.VAGen_SQLCODE != 100)
      TA1REC.TA1LOCAT[2] = "N1     "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO4480 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VPIITM01"; /* table view*/
      XPNL005(); /* abend routine*/
      if (SQLCA.VAGen_SQLCODE == -911)
        NI0DW01.NI0DWCOH = "N"; /* Stop fetch loop*/
      end
    else
      NI0DW01.NI0DWCOH = "N"; /* Set cursor switch off*/
      /* ************************/
       /* NIHREC - Close cursor 1*/
      /* ************************/

      call "IO4480" ("C1", SQLCA, VPIITM01) {isNoRefresh = yes, isExternal = yes};
                                                    /* Close P/I itm cursor*/

      if (SQLCA.VAGen_SQLCODE != 0)
        TA1REC.TA1LOCAT[2] = "C1     "; /* database action*/
        TA1REC.TA1LOCAT[3] = "IO4480 "; /* io module*/
        TA1REC.TA1DBASE = "DNILO"; /* database*/
        TA1REC.TA1TBLVU = "VPIITM01"; /* table view*/
        XPNL005(); /* abend routine*/
      end
    end
  end
end // end NI0DS02


// Select Unique on SY1REC
Function NI0DS03()
   /* ************************/
   /* SY1REC - Select Unique*/
   /* ************************/

  NLXREC.NLXCPROC = "NI0DS03";

  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes}; /* Select Style*/

  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0120 "; /* io module*/
    TA1REC.TA1DBASE = "DPROD"; /* database*/
    TA1REC.TA1TBLVU = "VSTYLE01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NI0DS03


// Select Unique on NIEREC
Function NI0DS05()
   /* ************************/
   /* NIEREC - Select Unique*/
   /* ************************/

  NLXREC.NLXCPROC = "NI0DS05";

  call "IO4470" ("S ", SQLCA, VPIHDR01) {isNoRefresh = yes, isExternal = yes}; /* Select Inv Hdr*/

  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4470 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VPIHDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NI0DS05


//*** RECORD=KUIREC ****
// this is the csp working storage format cross-reference
// product table.  the table is a cross reference of the
// company or parent product number to the nike number.
// 
// db2 table: vcusku01
// 
// dclgen:
// 
// i/o mod: io5790
// 
// key to table: kuccoid or kukpcoid
//               kuiskuid
//               kuisku
// 
// date created:  06/09/86
// 
// maintenance log:
//    who       when      why
// ---------- --------- ---------------------------------------
// 12/13/90   CHYDE     Change data item descrp to db2 name.
// 02/04/91   dsalzw    added: kuirtlpr,kuiprdsn,kuihasty,
//                             kuihagpc,ylccd,ylacd,xnxcd
// 03/04/91   dsalzw    added: kuihapcc
// 03/11/91   dsalzw    swapped hang style and gpc to match
//                      the 2/04 db2 changes
// 04/02/91   dsalzw    added:kuicmnt,kuirtlpd
// 06/04/91   dsalzw    delete: kuisku
//                      rename: ylbcd to pwrlbcd
// 10/02/91   CHELLM    Database changes.
//                      Added: xqacd, cu-dsct-prc
// 10/02/92   CHELLM    Database changes.
//                      Resized KUIPRDNM,KUIGRP
// 03/11/94   CHELLM    Database changes.
//                      Added: XDZ-DATA-DIST-CD
// **********************
Record KUIREC type basicRecord
  5 KUIGRP KUIGRP ; 
    10 KUISKUID KUISKUID ; 
    10 XNXCD XNXCD ; 
    10 KUIPRDID KUIPRDID ; 
    10 KUIPRDNM KUIPRDNM ; 
    10 KUIPRDSN KUIPRDSN ; 
    10 XGPCD XGPCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 SY5SZID SY5SZID ; 
    10 XQACD XQACD ; 
    10 KUIRTLPR KUIRTLPR [2] ; 
    10 KUIRTLPD KUIRTLPD ; 
    10 CU-DSCT-PRC CU-DSCT-PRC ; 
    10 KUIHAGPC KUIHAGPC ; 
    10 KUIHASTY KUIHASTY ; 
    10 PWRLBCD PWRLBCD [2] ; 
    10 YLACD YLACD [2] ; 
    10 KUIHAPCC KUIHAPCC ; 
    10 KUICMNT KUICMNT [3] ; 
    10 XDZ-DATA-DIST-CD XDZ-DATA-DIST-CD ; 
    10 XXXSTAT XXXSTAT ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end KUIREC


//*** RECORD=NI0DW01 ****
// Working storage for Invoice Addresses Inquiry
// ***********************
Record NI0DW01 type basicRecord
  5 NI0DWORD NI0DWORD ; 
    10 NI0DWCUO NI0DWCUO ; 
    10 NI0DWNOR NI0DWNOR ; 
  5 NI0DWCST NI0DWCST ; 
    10 NI0DWKUC NI0DWKUC ; 
    10 NI0DWKUM NI0DWKUM ; 
  5 NI0DWIDX NI0DWIDX ; 
  5 NI0DWSCX NI0DWSCX ; 
  5 NI0DWLDX NI0DWLDX ; 
  5 NI0DWXDX NI0DWXDX ; 
  5 NI0DWLRS NI0DWLRS ; 
  5 NI0DWCOH NI0DWCOH ; 
  5 NI0DWPRD NI0DWPRD ; 
    10 NI0DWSTN NI0DWSTN ; 
    10 NI0DWDS1 NI0DWDS1 ; 
    10 NI0DWCLR NI0DWCLR ; 
    10 NI0DWDS2 NI0DWDS2 ; 
    10 NI0DWXDM NI0DWXDM ; 
  5 NI0DWNOT NI0DWNOT ; 
    10 NI0DWFCT NI0DWFCT ; 
    10 NI0DWLIT NI0DWLIT ; 
end // end NI0DW01


//*** RECORD=NI0DW02 ****
// This is the Product Summary Working Storage for Line items.
// .
// Maintenance History
// -------------------
// .
// Maintenance
//    Date      Who  Remarks
// ----------   ---  -------
// 11-06-89     tbg  Included 2 decimal positions in 'total
//                   amount' field (NI0DWTAM)
// 10-14-92    JJUDKI OCT DB CHG. EXPAND NI0DWDSC TO 30 BYTES.
// ***********************
Record NI0DW02 type basicRecord
  10 NI0DWPRD NI0DWPRD [200] ; 
  10 NI0DWDSC NI0DWDSC [200] ; 
  10 NI0DWNOQ NI0DWNOQ [200] ; 
  10 NI0DWNSQ NI0DWNSQ [200] ; 
  10 NI0DWUOM NI0DWUOM [200] ; 
  10 NI0DWNUP NI0DWNUP [200] ; 
  10 NI0DWPOF NI0DWPOF [200] ; 
  10 NI0DWTAM NI0DWTAM [200] ; 
  10 NI0DWQLT NI0DWQLT [200] ; 
  10 NI0DWPOI NI0DWPOI [200] ; 
  10 NI0DWFY1 NI0DWFY1 [200] ; 
  10 NI0DWID1 NI0DWID1 [200] ; 
  10 NI0DWID2 NI0DWID2 [200] ; 
  10 NI0DWUNC NI0DWUNC [200] ; 
  10 NI0DWXC1 NI0DWXC1 [200] ; 
  10 NI0DWXC2 NI0DWXC2 [200] ; 
  10 NI0DWXC3 NI0DWXC3 [200] ; 
  10 NI0DWXC4 NI0DWXC4 [200] ; 
  10 NI0DWXC5 NI0DWXC5 [200] ; 
  10 NI0DWQS1 NI0DWQS1 [200] ; 
  10 NI0DWQS2 NI0DWQS2 [200] ; 
  10 NI0DWQS3 NI0DWQS3 [200] ; 
  10 NI0DWQS4 NI0DWQS4 [200] ; 
  10 NI0DWQS5 NI0DWQS5 [200] ; 
end // end NI0DW02


// CU_DSCT_PRC
DataItem CU-DSCT-PRC decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// cu_sku_comnt
DataItem KUICMNT char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// cu_hang_crtn_cls
DataItem KUIHAPCC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// cu-prod-snm
DataItem KUIPRDSN char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// cu_sugg_rtl_prc_dt
DataItem KUIRTLPD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// cu_sugg_rtl_prc
DataItem KUIRTLPR decimal(5,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// Color number
DataItem NI0DWCLR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Cursor open switch - NIHREC
DataItem NI0DWCOH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Display Customer.Store
DataItem NI0DWCST num(11,4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// Order # portion
DataItem NI0DWCUO num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// First dash
DataItem NI0DWDS1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Second dash
DataItem NI0DWDS2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Product Description
DataItem NI0DWDSC char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Line item fetch-count
DataItem NI0DWFCT num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// Factory code
DataItem NI0DWFY1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// From Size range
DataItem NI0DWID1 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// To Size range
DataItem NI0DWID2 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// W/S Invoice array index
DataItem NI0DWIDX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// Customer number
DataItem NI0DWKUC num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// Store number
DataItem NI0DWKUM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// Current low array index
DataItem NI0DWLDX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// Literal 'line items found'
DataItem NI0DWLIT char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Line Items read switch
DataItem NI0DWLRS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Quantity Ordered
DataItem NI0DWNOQ num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// Sub-Order # portion
DataItem NI0DWNOR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// Note: Line items found
DataItem NI0DWNOT char(22)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Quantity shipped
DataItem NI0DWNSQ num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// Unit Price
DataItem NI0DWNUP num(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// Display Order.Suborder #
DataItem NI0DWORD num(10,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// Price Override flag
DataItem NI0DWPOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Product PO Id
DataItem NI0DWPOI num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// Product number
DataItem NI0DWPRD char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Quality code
DataItem NI0DWQLT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Quantity shipped 1
DataItem NI0DWQS1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// Quantity shipped 2
DataItem NI0DWQS2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// Quantity shipped 3
DataItem NI0DWQS3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// Quantity shipped 4
DataItem NI0DWQS4 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// Quantity shipped 5
DataItem NI0DWQS5 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// Screen array index
DataItem NI0DWSCX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// Style number
DataItem NI0DWSTN char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Total Amount (line)
DataItem NI0DWTAM num(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// Unit cost
DataItem NI0DWUNC num(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


// Unit of measure
DataItem NI0DWUOM char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Country Code 1
DataItem NI0DWXC1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Country Code 2
DataItem NI0DWXC2 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Country Code 3
DataItem NI0DWXC3 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Country Code 4
DataItem NI0DWXC4 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Country Code 5
DataItem NI0DWXC5 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Dimension code
DataItem NI0DWXDM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


// Country code index
DataItem NI0DWXDX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end


