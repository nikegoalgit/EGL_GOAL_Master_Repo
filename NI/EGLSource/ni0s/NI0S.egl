package ni0s;

import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPNL001;
import corpcom3.XPNL002;
import corpcom3.XPNL004;
import corpcom3.XPNL005;
import corpcom3.XPXGP01;
import corpcom3.XPXLA01;
import corpcom3.XPXOB01;
import corpcom3.XPXX001;
import corpcom3.XPZCH01;
import corpcom3.XPZPR01;
import corpcom4.XSENTRY;
import corpcom4.XSNLS01;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XBDCD;
import corpx1.XCSCD;
import corpx1.XCTTBL;
import corpx1.XDMCD;
import corpx1.XDSCD;
import corpx1.XDVCD;
import corpx1.XGPCD;
import corpx1.XGPTBL;
import corpx1.XLATBL;
import corpx1.XOBTBL;
import corpx1.XPTTBL;
import corpx2.XNXCD;
import corpx2.XOBCD;
import corpx2.XOCCD;
import corpx2.XOSCD;
import corpx2.XPTCD;
import corpx2.XSOCD;
import corpx2.XWHCD;
import corpz3.ZCHTBL;
import corpz3.ZPRTBL;
import ku.common.KUCCOID;
import ku.common.KUCREC;
import ku.common.KUMSTRID;
import ni.common.NIWREC;
import nl.common.*;
import op.common.OP11TMSF;
import op.common.OP1BLKID;
import op.common.OP1CALDT;
import op.common.OP1CPODT;
import op.common.OP1CUNDT;
import op.common.OP1CUOID;
import op.common.OP1CUPO;
import op.common.OP1DSADT;
import op.common.OP1DSBDT;
import op.common.OP1NDRAW;
import op.common.OP1NORID;
import op.common.OP1OTUNT;
import op.common.OP1OVALU;
import op.common.OP1PARTN;
import op.common.OP1REC;
import op.common.OP1SWORD;
import sp.common.SP1ID;
import sy.common.SY1STNBR;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA5TSQIX;
import ts.common.TSVPLNBR;
import ts.common.TSVREC;
import ts.common.TSZREC;
import vv.common.VDSTRB01;
import vv.common.VNLCTL01;
import vv.common.VPRHDR01;
import vv.common.VPRORD01;
import vv.common.VPRTXT01;
import vv.common.VZCHGL01;
//*** PROGRAM=NI0S ****
// ************************************************************
// 
//         NI0S - NIL PROFORMA REQUEST
//         ---------------------------
// 
// General program explanation and notes:
// 
// The purpose of this application is to allow the user to
// select orders for the creation of a proforma invoice.  Two
// screens will be used to accomplish this task.  The first
// screen will allow the user to enter order selection
// criteria.  The selection criteria will be used to create
// a list of orders on the second screen.  The user will select
// the orders they wish to appear on the proforma from the
// orders list on the second screen.
// ------------------------------------------------------------
// Maintenance History:
// --------------------
//   Date   Who    Remarks
// -------- ------ --------------------------------------------
// 04-15-91 SAZARE Set Up
// 08-01-91 JSHANN Added XOB to selection and require order
//                 type 'F1' GPC '03' and Ord Cls 'in' have
//                 pack list for final proforma
// 12-09-91 JSHANN Don't let a final print before a draft has
//                 been printed.
// 01-13-92 JSHANN added logic for new gmbh remit-to 'bv'
// 02-07-92 jjudki Task#491. Changes for distributor table.
// 05-27-92 jjudki Add Africa Acct Region: s220,s230.
// 10-14-92 jjudki OCT DB CHG.
// 11-18-92 jjudki Remove zfctbl from table list.
// 02-18-93 kshaw  Produce error message for NO default text.
// 11-09-93 JJUDKI NOV DB CHANGES.
// 04-14-94 ahowar apr DB CHANGES.
// y2kfix 02-24-98 pharwo  y2k changes to ni0s120, ni0ssah.
// *********************
Program NI0S type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "NL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  NI0SW01 NI0SW01; // record
  NI0SW02 NI0SW02; // record
  NI0SW03 NI0SW03; // record
  NI0SW04 NI0SW04; // record
  NIWREC NIWREC; // record
  NLXREC NLXREC; // record
  OP1REC OP1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TSVREC TSVREC; // record
  TSZREC TSZREC; // record
  VDSTRB01 VDSTRB01; // record
  VNLCTL01 VNLCTL01; // record
  VPRHDR01 VPRHDR01; // record
  VPRORD01 VPRORD01; // record
  VPRTXT01 VPRTXT01; // record
  VZCHGL01 VZCHGL01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCTTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XLATBL {deleteAfterUse = yes}; // table
  use XOBTBL {deleteAfterUse = yes}; // table
  use ZCHTBL {deleteAfterUse = yes}; // table
  use ZPRTBL {deleteAfterUse = yes}; // table
  use XPTTBL {deleteAfterUse = yes}; // table
  use NI0SM.NI0SM100,  // forms
      NI0SM.NI0SM200,
      NI0SM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    NI0S000: NI0S000();
    exit program;
  end // end main
end // end NI0S

// Main flow
Function NI0S000()
   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   perform initialization, set application revision nbrs,**/
   /* *   then do main perform until done with application      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0S000";
  ;
  NI0S001(); /* initilize the application*/
  ;
  NLXREC.NLXEOAF = "N"; /* set end-of-application flag to 'no'*/
  ;
  while (NLXREC.NLXEOAF == "N") /* while not end-of-aplication*/
    NI0S050(); /* process the application screen(s)*/
  end
  ;
  exit program;
end // end NI0S000

// Initialize Application
Function NI0S001()
   /* -----------------------------------------------------------*/
         /* Initialize the application working storage*/
  ;
   /* -----------------------------------------------------------*/
  ;
  NLXREC.NLXCPROC = "NI0S001";
  ;
  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen converse*/
  VGVar.handleHardIOErrors = 1; /* return control to program if hard db2 error*/
  ;
  ;
  XSENTRY(); /* check entry thru main menu*/
  XSSEGTR(); /* set segmented transaction id*/
  ;
  set SQLCA empty; /* clear out the "common" working*/
                                   /* storage*/
  set ERRSQLCA empty; /* clear out the "common" working*/
                                   /* storage*/
  set TA1REC empty; /* clear out the "common" working*/
                                   /* storage*/
  set NLXREC empty; /* clear out the "common" working*/
                                   /* storage*/
  set NIWREC empty; /* clear out the "common" working*/
                                   /* storage*/
  set VDSTRB01 empty; /* clear out distributor table rec*/
  ;
  COMMAREA.CAUSERA = " "; /* clear out "common" w/s area*/
  ;
  NIWREC.NIWADDFL = "Y"; /* Set to add proforma mode*/
  ;
  NI0SSS1(); /* Security for NI0S*/
  ;
  XX0XS01(); /* Format date and time for adds (zz's)*/
  ;
   /* ------------------------------------------------------*/
    /* Set up working-storage array of screen names*/
   /* ------------------------------------------------------*/
  ;
  NLXREC.NLXCSCRN = "NI0SM100"; /* first header*/
  ;
  NLXREC.NLXSNAME[1] = "NI0SM100";
                                   /* init screens used in this applic.*/
  NLXREC.NLXSNAME[2] = "NI0SM200";
  ;
   /* *******************/
   /* Check passed data*/
   /* *******************/
  ;
  if (COMMAREA.CAITEM <= " ") /* If no customer number passed*/
    converseLib.validationFailed(181); /* Enter order selection criteria*/
    return;
  end
  ;
  XPNL004(); /* Validate caitem numeric*/
  ;
  if (NLXREC.NLXERRF == "Y") /* If error in 'item'*/
    converseLib.validationFailed(197); /* Invalid item data--reenter*/
  else
    NIWREC.KUCCOID = NLXREC.NLXNUM8A; /* Load w/s with cust#*/
    NI0SM100.KUCCOID = NIWREC.KUCCOID; /* Load map with cust#*/
    KUCREC.KUCCOID = NIWREC.KUCCOID; /* Build key*/
    VDSTRB01.KUCCOID = NIWREC.KUCCOID; /* Build key*/
    NI0SSIC(); /* Select unique - KUCREC*/
    NI0SSID(); /* Select unique - vdstrb01*/
    if (SQLCA.VAGen_SQLCODE == 0)
      converseLib.validationFailed(180); /* Enter any other sel crit*/
      set NI0SM100.XGPCD cursor;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(13); /* Invalid customer number*/
        set NI0SM100.KUCCOID bold;
      end
    end
  end
  ;
  COMMAREA.CAITEM = " ";
end // end NI0S001

// Decide which map to display
Function NI0S050()
   /* ************************************************************/
   /* *   control process the application screen(s)             **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0S050"; /* set current process name*/
  ;
  ;
  sysVar.arrayIndex = 0;
  NLXREC.NLXSCRNX = 0;
  ;
  if (NLXREC.NLXCSCRN in NLXREC.NLXSNAME) /* if current-screen-name is*/
    NLXREC.NLXSCRNX = sysVar.arrayIndex; /* in the screen-array, then set*/
  end /* the screen-index*/
  ;
  set TA1REC empty;
  TA1REC.TA1MAP = NLXREC.NLXCSCRN; /* prepare for abend*/
  ;
  NI0SW01.NI0SWPAG = "Y"; /* init order array page load flag*/
  NLXREC.NLXBLDSC = "Y"; /* set build screen flag to 'yes'*/
  NLXREC.NLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
  NLXREC.NLXERRF = "N"; /* clear error flag*/
  ;
  if (NLXREC.NLXSCRNX == 1) /* if screen xx0xm100*/
    while (NLXREC.NLXEOSF == "N") /* show until user is done*/
      NI0S100();
    end
  else
    ;
    if (NLXREC.NLXSCRNX == 2) /* if screen xx0xm200*/
      NI0SW04.NI0SWERR = "N"; /* init error flag*/
      NI0SSLO(); /* load orders array*/
      if (NI0SW04.NI0SWERR == "Y") /* if error, display screen 1*/
        NLXREC.NLXCSCRN = "NI0SM100";
        return;
      end
      while (NLXREC.NLXEOSF == "N") /* show until user is done*/
        NI0S200();
      end
    else
      TA1REC.TA1MAP = NLXREC.NLXCSCRN;
      TA1REC.TA1TBLKE = "UNKNOWN SCREEN NAME";
      TA1REC.TA1LOCAT[2] = NLXREC.NLXCSCRN;
      XPNL005(); /* abend*/
    end
  end
  ;
  ;
   /* at this point;*/
       /* if the end-of-application flag (NLXeoaf ) = 'n'*/
         /* the perform will return to the top of nl0%050...*/
       /* else*/
         /* the perform will auto return to nl0%000.*/
  ;
end // end NI0S050

// Converse map M100
Function NI0S100()
   /* ************************************************************/
   /* *    process screen ni0am100                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from ni0a050 until the end-of-screen   **/
   /* *     flag (nlxeosfl) is set to 'y'.                      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0S100";
  ;
  if (NLXREC.NLXBLDSC == "Y")
    NI0S101(); /* Perform i/o, load map fields*/
    NLXREC.NLXBLDSC = "N";
  end
  ;
   /* ***********************************************************/
  converse NI0SM100 ;
   /* ***********************************************************/
  ;
  VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";
  set NI0SM100.CATOAP normal;
  set NI0SM100.CAITEM normal;
  ;
  NI0S110(); /* validate pfkeys*/
   /* ********************************/
   /* If no pf key errors, edit...*/
   /* ********************************/
  if (NLXREC.NLXERRF == "N")
    NI0S120(); /* edit entries and perform i/o*/
  end
   /* **********************************************/
   /* Edits complete, decide what to do next...*/
   /* **********************************************/
  if (NLXREC.NLXERRF == "N")
    NI0S130(); /* determine next action*/
  end
  ;
   /* at this point;*/
     /* if the end-of-screen flag (nlxeosfl) is 'n'*/
        /* we go back to top of process ni0a100.*/
     /* if the end-of-screen flag (nlxeosfl) is 'y'*/
        /* we return to ni0a050.*/
end // end NI0S100

// Build Map NI0SM100
Function NI0S101()
   /* **************************************/
   /* Build screen NI0SM100*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NI0S101";
  ;
  NI0SM100.XXXPRCNM = "NI0S100";
  NI0SM100.XXXMAPNM = "NI0SM100";
  NI0SM100.XXXRVNBR = "00";
  NI0SM100.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  ;
end // end NI0S101

// Edit PFkeys
Function NI0S110()
   /* ************************************************/
   /* Check for fastpath data, program function keys*/
   /* ************************************************/
  ;
  NLXREC.NLXCPROC = "NI0S110";
  ;
   /* *************************/
   /* Check for fastpath data*/
   /* *************************/
  if (NI0SM100.CATOAP != " " /* if any fastpath data entered*/
   && converseVar.eventKey is enter)
    COMMAREA.CATOAP = NI0SM100.CATOAP;
    COMMAREA.CAITEM = NI0SM100.CAITEM;
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002();
    set NI0SM100.CATOAP cursor, bold;
    return;
  end
   /* ***************************************/
   /* Check for valid program function keys*/
   /* ***************************************/
  ;
  if (converseVar.eventKey is enter)
     /* next sentence*/
  else
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa2
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      converseLib.validationFailed(36); /* pa1/2 cause loss of keyed data-rekey*/
                                   /* any change*/
      NLXREC.NLXERRF = "Y";
    else
      if (converseVar.eventKey is pf1)
        XSNLS01();
      else
        if (converseVar.eventKey is pf4)
          XSPF4();
        else
          if (converseVar.eventKey is pf3)
            COMMAREA.CAUSERA = " ";
            COMMAREA.CATOAP = "NI0J"; /* Go to NIL invoicing menu*/
            XPNL002();
            return;
          else
            if (converseVar.eventKey is pf20)
              COMMAREA.CAUSERA = " ";
              COMMAREA.CATOAP = "NL0A"; /* Go to NIL main menu*/
              XPNL002();
              return;
            else
              COMMAREA.CATOAP = " ";
              converseLib.validationFailed(2); /* Invalid function key*/
              NLXREC.NLXERRF = "Y";
            end
          end
        end
      end
    end
  end
end // end NI0S110

// Edit NI0SM100 fields
Function NI0S120()
  ;
  NLXREC.NLXCPROC = "NI0S120";
  ;
  NI0SW01.NI0SWPUW = "N"; /* Set 'pop-up window' flag off*/
  NI0SW01.NI0SWNER = "N"; /* Set needed dates error flag off*/
  ;
   /* ***************************************************/
   /* Clear any previous error indication on key fields*/
   /* ***************************************************/
  ;
  set NI0SM100.KUCCOID cursor, normal;
  set NI0SM100.XGPCD normal;
  set NI0SM100.OP1CUNDT normal;
  set NI0SM100.NIWCUNDT normal;
  ;
   /* *****************************************/
   /* If the key fields are empty, don't edit*/
   /* *****************************************/
  ;
  if (NI0SM100.KUCCOID == 0  /* Customer number is 0*/
   && NI0SM100.XGPCD == " "  /* GPC is blank*/
   && NI0SM100.OP1CUNDT == 0 /* Cust need date is 0*/
   && NI0SM100.NIWCUNDT == 0) /* Cust to need date is 0*/
    converseLib.validationFailed(181); /* Enter order selection criteria*/
    NLXREC.NLXERRF = "Y";
    set NI0SM100.KUCCOID cursor;
    return;
  end
  ;
   /* ******************************************/
   /* Request for pop-up window for GPC codes?*/
   /* ******************************************/
  ;
  if (NI0SM100.XGPCD >= "? "
   && NI0SM100.XGPCD <= "?9") /* Activated when 1st char='?'*/
    NI0SW01.NI0SWPUW = "Y"; /* Set 'pop-up window' switch on*/
    XPXX001(); /* Initialization*/
    while (XX0XW02.XX0XWEND == "N")
      XPXGP01(); /* Display 'pop-up window'*/
    end
    converseLib.clearScreen();
    
    if (XX0XW02.XX0XWPIX != 0)
      NI0SM100.XGPCD = XGPTBL.XGPCD[XX0XWPIX];
    else
      NI0SM100.XGPCD = " ";
    end
    set NI0SM100.XGPCD cursor;
  end
  ;
  ;
   /* ******************************************/
   /* Request for pop-up window for xob codes?*/
   /* ******************************************/
  ;
  if (NI0SM100.XOBCD >= "? "
   && NI0SM100.XOBCD <= "?9") /* Activated when 1st char='?'*/
    NI0SW01.NI0SWPUW = "Y"; /* Set 'pop-up window' switch on*/
    XPXX001(); /* Initialization*/
    while (XX0XW02.XX0XWEND == "N")
      XPXOB01(); /* Display 'pop-up window'*/
    end
    converseLib.clearScreen();
    
    if (XX0XW02.XX0XWPIX != 0)
      NI0SM100.XOBCD = XOBTBL.XOBCD[XX0XWPIX];
    else
      NI0SM100.XOBCD = " ";
    end
    set NI0SM100.XOBCD cursor;
  end
  ;
  ;
   /* *****************************************/
   /* Validate xob Code*/
   /* *****************************************/
  ;
  if (NI0SM100.XOBCD != " ") /* GOB code entered*/
    if (NI0SM100.XOBCD in XOBTBL.XOBCD
     && XOBTBL.XOBCD[sysVar.arrayIndex] != "99") /* If valid XOB code*/
       /* next sentence*/
    else
      converseLib.validationFailed(231); /* Invalid XOB code, enter '?'*/
      NLXREC.NLXERRF = "Y"; /* for valid values*/
      set NI0SM100.XOBCD cursor, bold;
    end
  end
  ;
   /* ***********************************/
   /* Edit 'To' Need Date if present*/
   /* ***********************************/
  ;
  if (NI0SM100.NIWCUNDT == 0) /* 'To' need date not entered*/
    NI0SM100.NIWCUNDT = NI0SM100.OP1CUNDT; /* Use 'from' need date*/
  else /* 'To' need date entered*/
    NLXREC.NLXVALDT = "Y";
    NLXREC.XXXED8C = NI0SM100.NIWCUNDT;
    XPNL001(); /* Check date validity*/
    if (NLXREC.NLXVALDT == "N")
      converseLib.validationFailed(5); /* Invalid date*/
      NI0SW01.NI0SWNER = "Y";
      NLXREC.NLXERRF = "Y";
      set NI0SM100.NIWCUNDT cursor, bold;
    end
  end
  ;
   /* ************************************/
   /* Edit 'From' Need date if present*/
   /* ************************************/
  ;
  if (NI0SM100.OP1CUNDT == 0) /* 'From' need date is 0*/
    converseLib.validationFailed(183); /* Need date required*/
    NI0SW01.NI0SWNER = "Y";
    NLXREC.NLXERRF = "Y";
    set NI0SM100.OP1CUNDT cursor, bold;
  else /* 'From' need date entered*/
    NLXREC.NLXVALDT = "Y";
    NLXREC.XXXED8C = NI0SM100.OP1CUNDT;
    XPNL001(); /* Validate date*/
    if (NLXREC.NLXVALDT == "N")
      converseLib.validationFailed(5); /* Invalid date*/
      NI0SW01.NI0SWNER = "Y";
      NLXREC.NLXERRF = "Y";
      set NI0SM100.OP1CUNDT cursor, bold;
      NI0SM100.NIWCUNDT = " "; /* Do NOT use invalid dt for 'to' dt*/
    end
  end
  ;
   /* ****************************/
   /* Validate Need date range*/
   /* ****************************/
  ;
  NI0SW01.NI0SWDTU = NI0SM100.OP1CUNDT; /* Format from need date*/
  NI0SW01.NI0SWMN9 = NI0SW01.NI0SWMNU;
  NI0SW01.NI0SWDY9 = NI0SW01.NI0SWDYU;
  NI0SW01.NI0SWYR9 = NI0SW01.NI0SWYRU;
   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* MOVE '019' TO NI0SW01.NI0SWCEN;*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  if (NI0SW01.NI0SWYR9 > "60")
    NI0SW01.NI0SWCEN = "019";
  else
    NI0SW01.NI0SWCEN = "020";
  end
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/
  TA2REC.TA2DBDFN = NI0SW01.NI0SWDT9; /* From need date (cymd)*/
  ;
  NI0SW01.NI0SWDTU = NI0SM100.NIWCUNDT; /* Format to need date*/
  NI0SW01.NI0SWMN9 = NI0SW01.NI0SWMNU;
  NI0SW01.NI0SWDY9 = NI0SW01.NI0SWDYU;
  NI0SW01.NI0SWYR9 = NI0SW01.NI0SWYRU;
   /* -----------------------  Y2K OUT BEGIN  ------------------------*/
   /*  */
   /* MOVE '019' TO NI0SW01.NI0SWCEN;*/
   /*  */
   /* ------------------------  Y2K OUT END  -------------------------*/
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  if (NI0SW01.NI0SWYR9 > "60")
    NI0SW01.NI0SWCEN = "019";
  else
    NI0SW01.NI0SWCEN = "020";
  end
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/
  TA2REC.TA2DBDTN = NI0SW01.NI0SWDT9; /* To need date (cymd)*/
  ;
  if (NI0SW01.NI0SWNER == "N") /* No previous need dt error*/
    if (TA2REC.TA2DBDFN > TA2REC.TA2DBDTN) /* From Dt > To Dt*/
      converseLib.validationFailed(25); /* Invalid logical date seq*/
      NI0SW01.NI0SWNER = "Y";
      NLXREC.NLXERRF = "Y";
      set NI0SM100.OP1CUNDT cursor, bold;
      set NI0SM100.NIWCUNDT bold;
    end
  end
  ;
  if (NI0SW01.NI0SWNER == "N") /* No previous need dt error*/
    TA2REC.TA2DTOPT = "DAYSDIFF";
    TA2REC.TA2GRTYP = "A";
    TA2REC.TA2DYAOD = 0;
    ;
    call "TA0040" (TA2REC) {isNoRefresh = yes}; /* Compute difference in days between 2*/
                                   /* dts*/
    ;
    if (TA2REC.TA2DBDDN > 184) /* Date range > 6 months*/
      converseLib.validationFailed(184); /* Date range must not exceed 6 months*/
      NLXREC.NLXERRF = "Y";
      set NI0SM100.OP1CUNDT cursor, bold;
      set NI0SM100.NIWCUNDT bold;
    else /* Need dates are valid!*/
      NIWREC.OP1CUNDT = NI0SM100.OP1CUNDT;
      NIWREC.NIWCUNDT = NI0SM100.NIWCUNDT;
    end
  end
  ;
   /* *****************************************/
   /* Validate GPC Code*/
   /* *****************************************/
  ;
  if (NI0SM100.XGPCD != " ") /* GPC code entered*/
    if (NI0SM100.XGPCD in XGPTBL.XGPCD
     && XGPTBL.XGPCD[sysVar.arrayIndex] != "99") /* If valid GPC code*/
       /* next sentence*/
    else
      converseLib.validationFailed(17); /* Invalid GPC code, enter '?'*/
      NLXREC.NLXERRF = "Y"; /* for valid values*/
      set NI0SM100.XGPCD cursor, bold;
    end
  end
  ;
   /* *****************************************/
   /* Validate Customer Number*/
   /* *****************************************/
  ;
  if (NI0SM100.KUCCOID == 0) /* Customer number is 0*/
    converseLib.validationFailed(182); /* Cust number is required*/
    NLXREC.NLXERRF = "Y";
    set NI0SM100.KUCCOID cursor, bold;
  else
    set KUCREC empty;
    KUCREC.KUCCOID = NI0SM100.KUCCOID;
    set VDSTRB01 empty;
    VDSTRB01.KUCCOID = NI0SM100.KUCCOID;
    NI0SSIC(); /* Select unique - KUCREC*/
    NI0SSID(); /* Select unique - vdstrb01*/
    if (SQLCA.VAGen_SQLCODE == 0) /* If no errors*/
      NIWREC.KUCCOID = VDSTRB01.KUCCOID; /* Cust number*/
      NIWREC.KUCCONM = KUCREC.KUCCONM; /* Cust name*/
      if (KUCREC.XCTCD in XCTTBL.XCTCD)
        NIWREC.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
      end
                                   /* Country name*/
    else
      NLXREC.NLXERRF = "Y"; /* Indicate error occurred*/
      if (SQLCA.VAGen_SQLCODE == 100) /* If Cust number not found*/
        converseLib.validationFailed(13); /* Invalid cust number*/
        set NI0SM100.KUCCOID cursor, bold;
      end
    end
    ;
  end
end // end NI0S120

// Determine next action
Function NI0S130()
   /* **************************************/
   /* Determine next action from 1st screen*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NI0S130";
  ;
  if (NI0SW01.NI0SWPUW == "Y") /* If pop-up window was activated*/
    return; /* Re-display screen*/
  end
  ;
  NLXREC.NLXEOSF = "Y"; /* End of screen processing*/
  NLXREC.NLXCSCRN = "NI0SM200"; /* Display second screen*/
end // end NI0S130

// Converse map M200
Function NI0S200()
   /* ************************************************************/
   /* *    process screen NI0SM200                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from NI0S050 until the end-of-screen   **/
   /* *     flag (NLXEOSFL) is set to 'y'.                      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0S200";
  ;
  if (NLXREC.NLXBLDSC == "Y") /* Build screen?*/
    NI0S201(); /* Load map fields*/
    NLXREC.NLXBLDSC = "N";
    if (NI0SW01.NI0SWINQ == "Y") /* If user is inquiry only, protect map*/
      set NI0SM200.ZCHCD[1] skip; /* Misc charge code*/
      set NI0SM200.ZCHCD[2] skip; /* Misc charge code*/
      set NI0SM200.ZCHCD[3] skip; /* Misc charge code*/
      set NI0SM200.NIGUSAMT[1] skip; /* US $ amount*/
      set NI0SM200.NIGUSAMT[2] skip; /* US $ amount*/
      set NI0SM200.NIGUSAMT[3] skip; /* US $ amount*/
      set NI0SM200.XLBCD skip; /* Remit to code*/
      set NI0SM200.XXXUSRID skip; /* User id code*/
      set NI0SM200.CATOAP cursor; /* Set cursor on option*/
    end
  end
  ;
  if (NI0SW01.NI0SWPAG == "Y") /* Load a page of the order array?*/
    NI0S202(); /* Load map order lines*/
    NI0SW01.NI0SWPAG = "N";
    if (NI0SW01.NI0SWINQ == "Y") /* If user is inquiry only,*/
      NI0SW01.NI0SWW1X = 0; /* protect map order lines*/
      while (NI0SW01.NI0SWW1X < 10)
        NI0SW01.NI0SWW1X = NI0SW01.NI0SWW1X + 1;
        set NI0SM200.NI0SMSEL[NI0SWW1X] skip; /* Select code*/
      end
    end
  end
  ;
  if (NI0SM200.VAGen_EZEMSG == " ")
    NI0SM200.VAGen_EZEMSG = NI0SW01.NI0SWOMS;
                                   /* If no msg, dspl order count*/
  end
   /* ***********************************************************/
  converse NI0SM200 ;
   /* ***********************************************************/
  ;
  NI0SM200.VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";
  set NI0SM200.CATOAP normal;
  set NI0SM200.CAITEM normal;
  ;
  if (converseVar.eventKey is pf3) /* If exit from screen requested*/
    NLXREC.NLXEOSF = "Y"; /* Indicate end of screen*/
    NLXREC.NLXCSCRN = "NI0SM100"; /* Go to selection screen*/
    return;
  end
  ;
  NI0S210(); /* Check attention identifier*/
  ;
  if (NLXREC.NLXERRF == "N" /* If no errors*/
   && NI0SW01.NI0SWINQ == "N") /* and user is not inquiry only*/
    NI0S220(); /* Edit entered option*/
  end
  ;
  if (NLXREC.NLXERRF == "N") /* If no errors*/
    NI0S230(); /* Determine next action...*/
  end
  ;
end // end NI0S200

// Load fields for map NI0SM200
Function NI0S201()
  ;
  NLXREC.NLXCPROC = "NI0S201";
  ;
  converseLib.clearScreen();
  set NI0SM200 initial;
  ;
   /* ***************************/
   /* Load generic header fields*/
   /* ***************************/
  ;
  NI0SM200.XXXPRCNM = "NI0S200";
  NI0SM200.XXXMAPNM = "NI0SM200";
  NI0SM200.XXXRVNBR = "00"; /* revision nbr*/
  NI0SM200.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  ;
   /* **************************************************/
   /* Load customer header fields with passed cust info*/
   /* **************************************************/
  ;
  NI0SM200.KUCCOID = NIWREC.KUCCOID; /* Cust id*/
  NI0SM200.KUCCONM = NIWREC.KUCCONM; /* Cust name*/
  NI0SM200.XCTDESC = NIWREC.XCTDESC; /* Country name*/
  ;
   /* *************************************/
   /* Load default fields at bottom of map*/
   /* *************************************/
  ;
  NI0SM200.XLBCD = KUCREC.XLBCD; /* Remit to*/
  NI0SM200.XXXUSRID = COMMAREA.CAUSERID; /* User id*/
end // end NI0S201

// Load scrn of orders from array
Function NI0S202()
  ;
  NLXREC.NLXCPROC = "NI0S202";
  ;
  NI0SW01.NI0SWSCX = 0; /* Init screen index*/
  ;
  while (NI0SW01.NI0SWSCX < 10 /* Do until 10 screen lines are filled*/
   && NI0SW01.NI0SWARX <= NI0SW04.NI0SW-OCT) /* or no more array records*/
    NI0SW01.NI0SWSCX = NI0SW01.NI0SWSCX + 1; /* Accum screen index*/
    set NI0SM200.NI0SMSEL[NI0SWSCX] initialAttributes; /* Unprotect select cd*/
    set NI0SM200.KUMSTRID[NI0SWSCX] initialAttributes; /* Store to normal intensity*/
    set NI0SM200.OP1CUOID[NI0SWSCX] initialAttributes;
                                   /* Cust Order to norml intensty*/
    set NI0SM200.OP1NORID[NI0SWSCX] initialAttributes;
                                   /* Nike Order to norml intensty*/
    NI0SM200.NI0SMSEL[NI0SWSCX] = NI0SW01.NI0SWSEL[NI0SWARX]; /* Sel*/
    NI0SM200.OP1CUOID[NI0SWSCX] = NI0SW01.NI0SWCOR[NI0SWARX];
                                   /* CuOrd*/
    NI0SM200.OP1NORID[NI0SWSCX] = NI0SW01.NI0SWNOR[NI0SWARX];
                                   /* NkOrd*/
    NI0SM200.XGPCD[NI0SWSCX] = NI0SW01.XGPCD[NI0SWARX]; /* GPC*/
    NI0SM200.XOBCD[NI0SWSCX] = NI0SW01.XOBCD[NI0SWARX]; /* Type*/
    NI0SM200.OP1CUNDT[NI0SWSCX] = NI0SW01.NI0SWNDT[NI0SWARX];
                                   /* Nd dt*/
    NI0SM200.XOSCD[NI0SWSCX] = NI0SW01.XOSCD[NI0SWARX]; /* Stat*/
    NI0SM200.KUMSTRID[NI0SWSCX] = NI0SW01.KUMSTRID[NI0SWARX];
                                   /* Store*/
    NI0SM200.OP1CUPO[NI0SWSCX] = NI0SW01.OP1CUPO[NI0SWARX]; /* PO#*/
    NI0SW01.NI0SWARX = NI0SW01.NI0SWARX + 1; /* Accum array index*/
  end
  ;
  if (NI0SW01.NI0SWARX > NI0SW04.NI0SW-OCT) /* No more order array recs*/
    NI0SW01.NI0SWW1X = NI0SW01.NI0SWSCX; /* Work idx = screen idx*/
    while (NI0SW01.NI0SWW1X < 10) /* Do for remaining lines*/
      NI0SW01.NI0SWW1X = NI0SW01.NI0SWW1X + 1; /* Accum work index*/
      set NI0SM200.NI0SMSEL[NI0SWW1X] skip; /* Protect select field*/
      set NI0SM200.KUMSTRID[NI0SWW1X] skip, invisible; /* Store not displayed*/
      set NI0SM200.OP1CUOID[NI0SWW1X] skip, invisible;
                                   /* Cust Order not displ*/
      set NI0SM200.OP1NORID[NI0SWW1X] skip, invisible;
                                   /* Nike Order not displ*/
      NI0SM200.NI0SMSEL[NI0SWW1X] = " "; /* Select cd*/
      NI0SM200.XGPCD[NI0SWW1X] = " "; /* GPC cd*/
      NI0SM200.XOBCD[NI0SWW1X] = " "; /* Type*/
      NI0SM200.OP1CUNDT[NI0SWW1X] = " "; /* Need dt*/
      NI0SM200.XOSCD[NI0SWW1X] = " "; /* Status*/
      NI0SM200.OP1CUPO[NI0SWW1X] = " "; /* PO#*/
    end
  end
  ;
   /* set array index to point to topmost record on screen*/
  NI0SW01.NI0SWARX = NI0SW01.NI0SWARX - NI0SW01.NI0SWSCX;
end // end NI0S202

// Edit PFkeys
Function NI0S210()
  ;
  NLXREC.NLXCPROC = "NI0S210";
  ;
   /* *************************/
   /* Check for fastpath data*/
   /* *************************/
  if (NI0SM200.CATOAP != " " /* if any fastpath data entered*/
   && converseVar.eventKey is enter)
    COMMAREA.CATOAP = NI0SM200.CATOAP;
    COMMAREA.CAITEM = NI0SM200.CAITEM;
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002();
    set NI0SM200.CATOAP cursor, bold;
    return;
  end
   /* ***************************************/
   /* Check for valid program function keys*/
   /* ***************************************/
  ;
  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf6
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   /* OR EZEAID IS PF9;*/
   || converseVar.eventKey is pf12
   || converseVar.eventKey is pf13)
     /* next sentence*/
  else
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa2
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      converseLib.validationFailed(36); /* pa1/2 cause loss of keyed data-rekey*/
                                   /* any change*/
      NLXREC.NLXERRF = "Y";
    else
      if (converseVar.eventKey is pf1)
        XSNLS01();
      else
        if (converseVar.eventKey is pf4)
          XSPF4();
        else
          if (converseVar.eventKey is pf20)
            COMMAREA.CAUSERA = " ";
            COMMAREA.CATOAP = "NL0A"; /* Go to NIL main menu*/
            XPNL002();
            return;
          else
            COMMAREA.CATOAP = " ";
            converseLib.validationFailed(2); /* Invalid function key*/
            NLXREC.NLXERRF = "Y";
          end
        end
      end
    end
  end
end // end NI0S210

// Edit NI0SM200 fields
Function NI0S220()
  ;
  NLXREC.NLXCPROC = "NI0S220";
  ;
  NI0SW01.NI0SWPUW = "N"; /* Set 'pop-up window' flag off*/
  ;
   /* *********************************************************/
   /* Clear any previous error indication on enterable fields*/
   /* *********************************************************/
  ;
  set NI0SM200.NI0SMSEL[1] cursor, normal;
  NI0SW01.NI0SWW1X = 1;
  while (NI0SW01.NI0SWW1X < NI0SW01.NI0SWSCX) /* Do for each displayed line*/
    NI0SW01.NI0SWW1X = NI0SW01.NI0SWW1X + 1; /* (NI0SWSCX = bottom line#)*/
    set NI0SM200.NI0SMSEL[NI0SWW1X] normal;
  end
  set NI0SM200.ZCHCD[1] normal;
  set NI0SM200.ZCHCD[2] normal;
  set NI0SM200.ZCHCD[3] normal;
  set NI0SM200.NIGUSAMT[1] normal;
  set NI0SM200.NIGUSAMT[2] normal;
  set NI0SM200.NIGUSAMT[3] normal;
  set NI0SM200.XLBCD normal;
  set NI0SM200.XXXUSRID normal;
  ;
   /* ***************************************************/
   /* Request for pop-up window for misc charge code 1?*/
   /* ***************************************************/
  ;
  if (NI0SM200.ZCHCD[1] >= "? "
   && NI0SM200.ZCHCD[1] <= "?9") /* Activated when 1st char='?'*/
    NI0SM200.ZCHDESC[1] = " ";
    NI0SW01.NI0SWPUW = "Y"; /* Set 'pop-up window' switch on*/
    XPXX001(); /* Initialization*/
    while (XX0XW02.XX0XWEND == "N")
      XPZCH01(); /* Display 'pop-up window'*/
    end
    if (XX0XW02.XX0XWPIX != 0)
      NI0SM200.ZCHCD[1] = ZCHTBL.ZCHCD[XX0XWPIX];
    else
      NI0SM200.ZCHCD[1] = " ";
    end
    set NI0SM200.ZCHCD[1] cursor;
  end
  ;
   /* ***************************************************/
   /* Request for pop-up window for misc charge code 2?*/
   /* ***************************************************/
  ;
  if (NI0SM200.ZCHCD[2] >= "? "
   && NI0SM200.ZCHCD[2] <= "?9") /* Activated when 1st char='?'*/
    NI0SM200.ZCHDESC[2] = " ";
    NI0SW01.NI0SWPUW = "Y"; /* Set 'pop-up window' switch on*/
    XPXX001(); /* Initialization*/
    while (XX0XW02.XX0XWEND == "N")
      XPZCH01(); /* Display 'pop-up window'*/
    end
    if (XX0XW02.XX0XWPIX != 0)
      NI0SM200.ZCHCD[2] = ZCHTBL.ZCHCD[XX0XWPIX];
    else
      NI0SM200.ZCHCD[2] = " ";
    end
    set NI0SM200.ZCHCD[2] cursor;
  end
  ;
   /* ***************************************************/
   /* Request for pop-up window for misc charge code 3?*/
   /* ***************************************************/
  ;
  if (NI0SM200.ZCHCD[3] >= "? "
   && NI0SM200.ZCHCD[3] <= "?9") /* Activated when 1st char='?'*/
    NI0SM200.ZCHDESC[3] = " ";
    NI0SW01.NI0SWPUW = "Y"; /* Set 'pop-up window' switch on*/
    XPXX001(); /* Initialization*/
    while (XX0XW02.XX0XWEND == "N")
      XPZCH01(); /* Display 'pop-up window'*/
    end
    if (XX0XW02.XX0XWPIX != 0)
      NI0SM200.ZCHCD[3] = ZCHTBL.ZCHCD[XX0XWPIX];
    else
      NI0SM200.ZCHCD[3] = " ";
    end
    set NI0SM200.ZCHCD[3] cursor;
  end
  ;
   /* *****************************************/
   /* Request for pop-up window for remit to?*/
   /* *****************************************/
  ;
  if (NI0SM200.XLBCD >= "? "
   && NI0SM200.XLBCD <= "?9") /* Activated when 1st char='?'*/
    NI0SM200.XXXADDR1 = " ";
    NI0SW01.NI0SWPUW = "Y"; /* Set 'pop-up window' switch on*/
    XPXX001(); /* Initialization*/
    while (XX0XW02.XX0XWEND == "N")
      XPXLA01(); /* Display 'pop-up window'*/
    end
    if (XX0XW02.XX0XWPIX != 0)
      NI0SM200.XLBCD = XLATBL.XLBCD[XX0XWPIX];
    else
      NI0SM200.XLBCD = " ";
    end
    set NI0SM200.XLBCD cursor;
  end
  ;
   /* ****************************************/
   /* Request for pop-up window for user id?*/
   /* ****************************************/
  ;
  if (NI0SM200.XXXUSRID >= "?       "
   && NI0SM200.XXXUSRID <= "?9999999") /* Activated when 1st char='?'*/
    NI0SM200.XXXUNTXT = " ";
    NI0SW01.NI0SWPUW = "Y"; /* Set 'pop-up window' switch on*/
    XPXX001(); /* Initialization*/
    while (XX0XW02.XX0XWEND == "N")
      XPZPR01(); /* Display 'pop-up window'*/
    end
    if (XX0XW02.XX0XWPIX != 0)
      NI0SM200.XXXUSRID = ZPRTBL.XXXUSRID[XX0XWPIX];
    else
      NI0SM200.XXXUSRID = " ";
    end
    set NI0SM200.XXXUSRID cursor;
  end
  ;
  if (NI0SW01.NI0SWPUW == "Y") /* If pop-up window activated*/
    converseLib.clearScreen();
     /* Erase floating map*/
  end
  ;
   /* ******************/
   /* Validate user id*/
   /* ******************/
  ;
  if (NI0SM200.XXXUSRID in ZPRTBL.XXXUSRID
   && ZPRTBL.XXXUSRID[sysVar.arrayIndex] != "99999999") /* If valid user id*/
    NI0SM200.XXXUNTXT = ZPRTBL.XXXUNTXT[sysVar.arrayIndex]; /* nm to map*/
  else
    converseLib.validationFailed(188); /* Invalid User id, enter '?'*/
    NLXREC.NLXERRF = "Y"; /* for valid values*/
    set NI0SM200.XXXUSRID cursor, bold;
  end
  ;
   /* ************************/
   /* Validate remit to code*/
   /* ************************/
  ;
  if (NI0SM200.XLBCD in XLATBL.XLBCD
   && XLATBL.XLBCD[sysVar.arrayIndex] != "99") /* If valid user id*/
    NI0SM200.XXXADDR1 = XLATBL.XXX-ADDR1[sysVar.arrayIndex]; /* nm to map*/
  else
    converseLib.validationFailed(40); /* Invalid remit to, enter '?'*/
    NLXREC.NLXERRF = "Y"; /* for valid values*/
    set NI0SM200.XLBCD cursor, bold;
  end
  ;
   /* *******************************/
   /* Edit misc charges and amounts*/
   /* *******************************/
  ;
  NI0SW01.NI0SWW1X = 3;
  ;
  while (NI0SW01.NI0SWW1X > 0)
    if (NI0SM200.ZCHCD[NI0SWW1X] > " ") /* charge type is optional*/
      NI0SSEA(); /* edit charge amount*/
      if (NI0SM200.ZCHCD[NI0SWW1X] in ZCHTBL.ZCHCD
       && ZCHTBL.ZCHCD[sysVar.arrayIndex] != "99") /* end of table*/
        NI0SM200.ZCHDESC[NI0SWW1X] = ZCHTBL.ZCHDESC[sysVar.arrayIndex];
        if (ZCHTBL.ZCHPIFL[sysVar.arrayIndex] == "Y")
          NI0SSEC(); /* validate charge type for customer*/
          if (SQLCA.VAGen_SQLCODE == -911) /* if data base lock occurred*/
            return; /* get out*/
          end
        else
          set NI0SM200.ZCHCD[NI0SWW1X] cursor, bold;
          converseLib.validationFailed(118); /* charge type invalid for prod ivc*/
          NLXREC.NLXERRF = "Y";
        end
      else
        set NI0SM200.ZCHCD[NI0SWW1X] cursor, bold;
        NI0SM200.ZCHDESC[NI0SWW1X] = " "; /* blank out desc*/
        NI0SM200.NIGUSAMT[NI0SWW1X] = 0; /* blank out amt*/
        converseLib.validationFailed(10); /* invalid charge type*/
        NLXREC.NLXERRF = "Y";
      end
    else
      NI0SM200.ZCHDESC[NI0SWW1X] = " "; /* blank out desc*/
      NI0SM200.NIGUSAMT[NI0SWW1X] = 0; /* blank out amt*/
    end
    ;
    NI0SW01.NI0SWW1X = NI0SW01.NI0SWW1X - 1;
  end
  ;
   /* **********************/
   /* Edit selection entry*/
   /* **********************/
  ;
  NI0SSES(); /* Edit select codes*/
  ;
  if (NLXREC.NLXERRF == "N") /* If no errors*/
    NI0SW01.NI0SWFOX = 0; /* Init first order index*/
    NI0SW01.NI0SWW1X = 0; /* Init work index 1*/
    while (NI0SW01.NI0SWW1X < NI0SW04.NI0SW-OCT) /* find 1st ord*/
      NI0SW01.NI0SWW1X = NI0SW01.NI0SWW1X + 1;
      if (NI0SW01.NI0SWSEL[NI0SWW1X] == "S")
        NI0SW01.NI0SWFOX = NI0SW01.NI0SWW1X;
        NI0SW01.NI0SWW1X = +100;
      end
    end
    if (NI0SWFOX > 0)
      if (NI0SM200.XLBCD == "GM"
       || NI0SM200.XLBCD == "BV")
        if (NI0SW01.XGPCD[NI0SWFOX] != "03")
          converseLib.validationFailed(248); /* Invalid remit to, enter '?'*/
          NLXREC.NLXERRF = "Y"; /* for valid values*/
          set NI0SM200.XLBCD cursor, bold;
          NI0SW01.NI0SWW1X = 100;
        else
          if (VDSTRB01.ZARCD == "EU"
           || VDSTRB01.ZARCD == "ME"
           || VDSTRB01.ZARCD == "AF") /* Africa Accounting Region*/
            if (KUCREC.XAUCD != "33")
              converseLib.validationFailed(248);
              NLXREC.NLXERRF = "Y"; /* for valid values*/
              set NI0SM200.XLBCD cursor, bold;
            end
          else
            converseLib.validationFailed(248); /* Invalid remit to, enter '?'*/
            NLXREC.NLXERRF = "Y"; /* for valid values*/
            set NI0SM200.XLBCD cursor, bold;
          end
        end
      else
        if (NI0SW01.XGPCD[NI0SWFOX] == "03"
         && KUCREC.XAUCD == "33")
          if (VDSTRB01.ZARCD == "EU"
           || VDSTRB01.ZARCD == "ME"
           || VDSTRB01.ZARCD == "AF") /* Africa Accounting Region*/
            NI0SM200.XLBCD = "BV";
            if (NI0SM200.XLBCD in XLATBL.XLBCD)
              NI0SM200.XXXADDR1 = XLATBL.XXX-ADDR1[sysVar.arrayIndex];
            end
          end
        end
      end
    end
    if (NI0SW01.NI0SWFOX == 0        /* If no selected order found*/
     && NI0SW01.NI0SWPUW == "N"      /* and pop-up window not activated*/
     && converseVar.eventKey not pf7 /* and user not paging*/
     && converseVar.eventKey not pf8)
      converseLib.validationFailed(189); /* Must enter a selection to process*/
      NLXREC.NLXERRF = "Y";
    end
  end
end // end NI0S220

// Determine next action
Function NI0S230()
  ;
  NLXREC.NLXCPROC = "NI0S230";
  ;
  if (NI0SW01.NI0SWFOX > 0) /* If at last one order selected*/
    if (NI0SW01.XGPCD[NI0SWFOX] == "03")
      if (VDSTRB01.ZARCD == "EU" /* If acct regn cd is europe*/
       || VDSTRB01.ZARCD == "ME" /* or middle east, and...*/
       || VDSTRB01.ZARCD == "AF") /* or Africa Acct Region and...*/
        if (KUCREC.XAUCD == "33")
          NI0SM200.XLBCD = "BV"; /* Make remit to germany*/
          if (NI0SM200.XLBCD in XLATBL.XLBCD)
            NI0SM200.XXXADDR1 = XLATBL.XXX-ADDR1[sysVar.arrayIndex];
          end
        end
      end
    end
  end
  ;
  if (NI0SW01.NI0SWPUW == "Y") /* If pop-up window was activated*/
    return; /* Re-display screen*/
  end
  ;
  if (converseVar.eventKey is pf8) /* *Page Forward**/
     /* Calculate difference between current rec and last rec*/
    NI0SW01.NI0SWW1X = NI0SW04.NI0SW-OCT - NI0SW01.NI0SWARX;
    if (NI0SW01.NI0SWW1X >= 10) /* If at least 1 page to go*/
      NI0SW01.NI0SWPAG = "Y"; /* Load page of order array*/
      NI0SW01.NI0SWARX = NI0SW01.NI0SWARX + 10; /* Point to next page*/
    else
      converseLib.validationFailed(30);
                                   /* Bottom of file--no scrolling possible*/
    end
    return;
  end
  ;
  if (converseVar.eventKey is pf7) /* *Page Back**/
    if (NI0SW01.NI0SWARX > 1) /* If not at top of array*/
      NI0SW01.NI0SWPAG = "Y"; /* Load page of order array*/
      NI0SW01.NI0SWARX = NI0SW01.NI0SWARX - 10; /* Point to previous page*/
      if (NI0SW01.NI0SWARX < 1) /* Go to top of array if full page not*/
                                   /* avail*/
        NI0SW01.NI0SWARX = +1;
      end
    else
      converseLib.validationFailed(29); /* Top of file--no scrolling possible*/
    end
    return;
  end
  ;
  if (NI0SW01.NI0SWINQ == "Y") /* If inquiry only*/
    if (converseVar.eventKey is pf13) /* If pf13, go to inco*/
      COMMAREA.CAUSERA = NIWREC.NIWGROUP;
      COMMAREA.CATOAP = "NI0X";
      XPNL002();
    else
      converseLib.validationFailed(191);
                                   /* This user id set up for inquiry only*/
    end
    return;
  end
  ;
  if (converseVar.eventKey is pf12) /* *Edit**/
    return; /* Re-display screen*/
  end
  ;
  if (converseVar.eventKey is enter /* *Invalid PF key**/
   || converseVar.eventKey is pf6   
   /* OR EZEAID IS PF9;*/
   || converseVar.eventKey is pf13)
    /* next sentence*/
  else
    converseLib.validationFailed(2); /* Invalid PA/PF key for this appl*/
    return;
  end
  ;
   /* *********************/
      /* Process Proforma*/
   /* *********************/
  ;
  NI0SSUC(); /* Update control table with new*/
                                   /* proforma*/
  if (SQLCA.VAGen_SQLCODE == -911) /* If data base lock occurred*/
    return; /* get out*/
  end
  ;
  NIWREC.NIQPROID = VNLCTL01.NLBNXPID; /* Move new proforma# to w/s*/
  ;
                                  /* build key*/
  OP1REC.OP1PARTN = NI0SW01.OP1PARTN[NI0SWFOX];
  OP1REC.OP1CUOID = NI0SW01.NI0SWCOR[NI0SWFOX];
  OP1REC.OP1NORID = NI0SW01.NI0SWNOR[NI0SWFOX];
  ;
  NI0SSIO(); /* Inquire order header for addresses*/
  if (SQLCA.VAGen_SQLCODE == -911) /* If data base lock occurred*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* reset data base*/
    return; /* get out*/
  end
  ;
  NI0SSAH(); /* Add proforma request header*/
  if (SQLCA.VAGen_SQLCODE == -911) /* If data base lock occurred*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* reset data base*/
    return; /* get out*/
  end
  ;
  VPRORD01.NIQPROID = NIWREC.NIQPROID; /* Format proforma req order*/
  VPRORD01.ZZZSDT = XX0XW01.XX0XWDAT;
  VPRORD01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VPRORD01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  NI0SW01.NI0SWW1X = 0;
  ;
  while (NI0SW01.NI0SWW1X < NI0SW04.NI0SW-OCT)
    NI0SW01.NI0SWW1X = NI0SW01.NI0SWW1X + 1;
    if (NI0SW01.NI0SWSEL[NI0SWW1X] == "S") /* If order selected*/
      VPRORD01.OP1CUOID = NI0SW01.NI0SWCOR[NI0SWW1X]; /* Build key*/
      VPRORD01.OP1NORID = NI0SW01.NI0SWNOR[NI0SWW1X];
      VPRORD01.OP1PARTN = NI0SW01.OP1PARTN[NI0SWW1X];
      NI0SSIP(); /* Sel unique Prof Ord - NIRREC*/
      if (SQLCA.VAGen_SQLCODE != 100) /* If problem occurred*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* Reset data base*/
        if (SQLCA.VAGen_SQLCODE == 0) /* If order used in other prof*/
          NI0SW01.NI0SWEPF = "ORDER"; /* Format error msg*/
          NI0SW01.NI0SWECO = NI0SW01.NI0SWCOR[NI0SWW1X]; /* Cust ord*/
          NI0SW01.NI0SWEPE = ".";
          NI0SW01.NI0SWENO = NI0SW01.NI0SWNOR[NI0SWW1X]; /* Nike ord*/
          NI0SWESF = " HAS JUST BEEN INCLUDED IN ANOTHER PROFORMA";
          NI0SM200.VAGen_EZEMSG = NI0SW01.NI0SWEMS;
        end
        return; /* Get out*/
      end
      NI0SSAO(); /* Add proforma request order*/
      if (SQLCA.VAGen_SQLCODE == -911) /* If data base lock occurred*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* reset data base*/
        return; /* get out*/
      end
    end
  end
  ;
   /* *******************************/
      /* Determine where to go next*/
   /* *******************************/
  ;
  if (converseVar.eventKey is enter)
    if (NI0SM200.CATOAP == " ") /* if no fast path*/
      COMMAREA.CAUSERA = NIWREC.NIWGROUP;
      COMMAREA.CATOAP = "NI0V";
    else /* if fast path requested*/
      COMMAREA.CAUSERA = " ";
      COMMAREA.CATOAP = NI0SM200.CATOAP;
      COMMAREA.CAITEM = NI0SM200.CAITEM;
    end
  end
  ;
  if (converseVar.eventKey is pf6) /* Print Draft*/
    NI0SS-LOC-EDIT(); /* Check for default text*/
    if (NLXREC.NLXERRF == "Y") /* If error occurred*/
      NLXREC.NLXEOSF = "Y"; /* Indicate end of screen*/
      NLXREC.NLXERRF = "N"; /* reset error flag*/
      NIWREC.NIWMSGNR = 383; /* send error message to ni0u*/
      COMMAREA.CAUSERA = NIWREC.NIWGROUP;
      COMMAREA.CATOAP = "NI0U"; /* go to ni0u screen*/
    else
      NIWREC.NIWSBIND = "D";
      COMMAREA.CAUSERA = NIWREC.NIWGROUP;
      COMMAREA.CATOAP = "NI0P";
    end
  end
  ;
  if (converseVar.eventKey is pf9) /* Print Final*/
    NI0SSPL(); /* Check PL for proforma orders*/
    if (NLXREC.NLXERRF == "Y") /* If error occurred*/
      NLXREC.NLXEOSF = "Y"; /* Indicate end of screen*/
      NLXREC.NLXCSCRN = "NI0SM100"; /* Go back to screen 1*/
      return; /* Get out*/
    end
    NIWREC.NIWSBIND = "F";
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    COMMAREA.CATOAP = "NI0P";
  end
  ;
  if (converseVar.eventKey is pf13) /* INCO Terms*/
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    COMMAREA.CATOAP = "NI0X";
  end
  ;
   /* *****************/
      /* Exit program*/
   /* *****************/
  ;
  XPNL002();
   /* *************************************************************/
end // end NI0S230

// Inquire OP1REC
Function NI0SS-LOC-EDIT()
  ;
   /* ** THIS CHUNK OF CODE WAS INSERTED ON 2/16/93.*/
   /* ** THE CODE IS INTENDED TO ELIMINATE THE PROGRAM FROM ABENDING*/
   /* ** WHEN NO DEFAULT PTERM TEXT IS FOUND.  INSTEAD OF ABENDING*/
   /* ** WHEN THE PROGRAM IS RAN ONLINE, IT SENDS AN ERROR MESSAGE*/
   /* ** TO THE SCREEN.*/
  ;
  NLXREC.NLXCPROC = "NI0SS-LOC-EDIT";
   /* IF COMPY CODE NOT = 33*/
  if (KUCREC.XAUCD == "33")
                                  /* build key*/
    OP1REC.OP1PARTN = NI0SW01.OP1PARTN[1];
    OP1REC.OP1CUOID = NI0SW01.NI0SWCOR[1];
    OP1REC.OP1NORID = NI0SW01.NI0SWNOR[1];
    ;
    NI0SSIO(); /* GET ORDER HEADER*/
    if (SQLCA.VAGen_SQLCODE == -911)
      return;
    end
    if (OP1REC.XPTCD in XPTTBL.XPTCD) /* SEARCH PTERM TABLE*/
      if (XPTTBL.XPTLCFL[sysVar.arrayIndex] == "Y") /* L.O.C.*/
                 /* DECLARE CURSOR FOR PTERM TEXT TABLE*/
        set VPRTXT01 empty;
                                  /* BUILD PTEXT TABLE KEY*/
        VPRTXT01.KUCCOID = OP1REC.KUCCOID;
        VPRTXT01.NIQPROID = 0;
        VPRTXT01.NISPTXTC = "L";
        call "IO5820" ("S1", SQLCA, VPRTXT01) {isNoRefresh = yes, isExternal = yes};
        if (SQLCA.VAGen_SQLCODE != 0)
          TA1REC.TA1LOCAT[2] = "S1";
          TA1REC.TA1LOCAT[3] = "NISREC";
          TA1REC.TA1DBASE = "DNILO";
          TA1REC.TA1TBLVU = "VPTXT01";
          XPNL005();
          return;
        end
                      /* FETCH CURSOR  PTEXT TABLE*/
        call "IO5820" ("N1", SQLCA, VPRTXT01) {isNoRefresh = yes, isExternal = yes};
        if (SQLCA.VAGen_SQLCODE == 0)
                      /* DO NOTHING*/
        else
          if (SQLCA.VAGen_SQLCODE == +100)
            converseLib.validationFailed(383);
            NLXREC.NLXERRF = "Y";
          else
            if (SQLCA.VAGen_SQLCODE != +100)
              TA1REC.TA1LOCAT[2] = "N1";
              TA1REC.TA1LOCAT[3] = "NISREC";
              TA1REC.TA1DBASE = "DNILO";
              TA1REC.TA1TBLVU = "VPTXT01";
              XPNL005();
              return;
            end /* END SQLCODE NE 100*/
          end /* END SQLCODE = 100*/
        end /* END SQLCODE = 0*/
                      /* CLOSE CURSOR FOR PTEXT TABLE*/
        call "IO5820" ("C1", SQLCA, VPRTXT01) {isNoRefresh = yes, isExternal = yes};
      end /* END IF L.O.C. FLAG = Y.*/
    else /* IF SEARCH HAS NO HIT.*/
      TA1REC.TA1LOCAT[2] = "IN";
      TA1REC.TA1LOCAT[3] = "XPTTBL";
      TA1REC.TA1DBASE = "DCORP";
      TA1REC.TA1TBLVU = "VXPT0001";
      XPNL005();
    end /* IF OP1REC.XPTCD IN XPTTBLE.XPTCD.*/
  end /* IF XAUCD = '33'.*/
end // end NI0SS-LOC-EDIT

// Add Proforma Request Header
Function NI0SSAH()
  ;
  NLXREC.NLXCPROC = "NI0SSAH";
  ;
   /* ****************************************/
    /* Format Proforma Request Header record*/
   /* ****************************************/
  ;
  VPRHDR01.NIQPROID = NIWREC.NIQPROID; /* Proforma#*/
  VPRHDR01.KUCCOID = NI0SM200.KUCCOID; /* Cust id*/
  NI0SW01.NI0SWMN9 = NI0SW01.NI0SWMON[NI0SWFOX];
  NI0SW01.NI0SWDY9 = NI0SW01.NI0SWDAY[NI0SWFOX];
  NI0SW01.NI0SWYR9 = NI0SW01.NI0SWYER[NI0SWFOX];
   /* -----------------------  Y2K IN BEGIN  -------------------------*/
   /*  */
  if (NI0SW01.NI0SWYR9 > "60")
    NI0SW01.NI0SWCEN = "019";
  else
    NI0SW01.NI0SWCEN = "020";
  end
   /*  */
   /* ------------------------  Y2K IN END  --------------------------*/
  VPRHDR01.OP1CUNDT = NI0SW01.NI0SWDT9; /* Need date*/
  VPRHDR01.XLBCD = NI0SM200.XLBCD; /* Remit to*/
  VPRHDR01.XXXUSRID = NI0SM200.XXXUSRID; /* User id*/
  VPRHDR01.ZCHCD[1] = NI0SM200.ZCHCD[1]; /* Misc charge codes*/
  VPRHDR01.ZCHCD[2] = NI0SM200.ZCHCD[2];
  VPRHDR01.ZCHCD[3] = NI0SM200.ZCHCD[3];
  VPRHDR01.NIGUSAMT[1] = NI0SM200.NIGUSAMT[1]; /* Misc charge amounts*/
  VPRHDR01.NIGUSAMT[2] = NI0SM200.NIGUSAMT[2];
  VPRHDR01.NIGUSAMT[3] = NI0SM200.NIGUSAMT[3];
  VPRHDR01.NIQPRORS = "I"; /* Request status*/
  VPRHDR01.NLAADRID[1] = OP1REC.OP1BLAID; /* Bill to address*/
  VPRHDR01.NLAADRID[2] = OP1REC.OP1SHAID; /* Ship to address*/
  VPRHDR01.NIQSTATD = XX0XW01.XX0XWDAT; /* Status date*/
  VPRHDR01.XGPCD = NI0SW01.XGPCD[NI0SWFOX]; /* GPC*/
  VPRHDR01.YSMXOB = NI0SW01.XOBCD[NI0SWFOX]; /* Type*/
  VPRHDR01.ZZZSDT = XX0XW01.XX0XWDAT; /* ZZ Status date*/
  VPRHDR01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* ZZ Change date*/
  VPRHDR01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* ZZ Change time*/
  ;
   /* *************************************/
    /* Add Proforma Request Header Record*/
   /* *************************************/
  ;
  call "IO5800" ("A ", SQLCA, VPRHDR01) {isNoRefresh = yes, isExternal = yes};
                                   /* Add Proforma Request Header*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "A      "; /* Database action*/
    TA1REC.TA1LOCAT[3] = "IO5800 "; /* IO module*/
    TA1REC.TA1DBASE = "DNILO"; /* Database*/
    TA1REC.TA1TBLVU = "VPRHDR01"; /* Table view*/
    XPNL005(); /* Abend routine*/
  end
end // end NI0SSAH

// Add Proforma Request Order
Function NI0SSAO()
  ;
  NLXREC.NLXCPROC = "NI0SSAO";
  ;
  call "IO5810" ("A ", SQLCA, VPRORD01) {isNoRefresh = yes, isExternal = yes};
                                   /* Add Proforma Request Order*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "A      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO5810 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VPRORD01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
   /* *************************************************************/
end // end NI0SSAO

// Build Packing List Style Rec
Function NI0SSBS()
  ;
  NLXREC.NLXCPROC = "NI0SSBS";
  ;
  TSZREC.OP1CUOID = TSVREC.OP1CUOID;
  TSZREC.OP1NORID = TSVREC.OP1NORID;
  TSZREC.TSPCRTNB = -1;
  TSZREC.XGPCD = "**";
  TSZREC.SY1STNBR = "******";
  TSZREC.SY2CLRID = "***";
  TSZREC.XDMCD = "**";
  TSZREC.XQACD = "**";
  TSZREC.XOWCD = "**";
  TSZREC.PC2INSEG = "***";
  TSZREC.XPGCD = "**";
  TSZREC.XUMCD = "**";
  TSZREC.XCTCD = " ";
  TSZREC.SY5SZID = -1;
end // end NI0SSBS

// Edit Charge Type Amount
Function NI0SSEA()
  ;
  NLXREC.NLXCPROC = "NI0SSEA";
  ;
  NI0SW01.NI0SWAMT = NI0SM200.NIGUSAMT[NI0SWW1X];
  if (NI0SW01.NI0SWAMT > 0) /* If charge amount entered*/
    if (VDSTRB01.ZFCCD > " ") /* If currency cd assoc w/cust*/
                                  /* IF VDSTRB01.ZFCCD IN ZFCTBL.ZFCCD;*/
                                   /* /* If curr cd found in corp tbl*/
      if (NI0SW01.NI0SWCNT > 0) /* If cents are entered*/
                                  /* AND ZFCTBL.ZFCFMAT(EZETST) = 'I';  /**/
                                   /* and integer format required*/
        set NI0SM200.NIGUSAMT[NI0SWW1X] cursor, bold;
        converseLib.validationFailed(119); /* Decimal not allowed with foreign currency*/
        NLXREC.NLXERRF = "Y";
      end
     /* END;*/
    end
  else
    set NI0SM200.NIGUSAMT[NI0SWW1X] cursor, bold;
    converseLib.validationFailed(127); /* Please enter charge amount*/
    NLXREC.NLXERRF = "Y";
  end
end // end NI0SSEA

// Edit Charge Type
Function NI0SSEC()
  ;
  NLXREC.NLXCPROC = "NI0SSEC"; /* set current proc name*/
  ;
   /* format nikrec key*/
  VZCHGL01.ZCHCD = NI0SM200.ZCHCD[NI0SWW1X];
  VZCHGL01.XAUCD = KUCREC.XAUCD;
  VZCHGL01.ZARCD = VDSTRB01.ZARCD;
  VZCHGL01.KUCCOID = VDSTRB01.KUCCOID;
  VZCHGL01.YMTCD = " ";
  ;
  call "IO4540" ("SF", SQLCA, VZCHGL01) {isNoRefresh = yes, isExternal = yes}; /* select first row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    NLXREC.NLXERRF = "Y";
    if (SQLCA.VAGen_SQLCODE == 100)
      set NI0SM200.ZCHCD[NI0SWW1X] cursor, bold;
      converseLib.validationFailed(145); /* chg typ invalid for customer*/
    else
      TA1REC.TA1LOCAT[2] = "SF     "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO4540 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VZCHGL01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end
  ;
  ;
  ;
end // end NI0SSEC

// Edit Packing List for Order
Function NI0SSEP()
  ;
  NLXREC.NLXCPROC = "NI0SSEP";
  ;
  call "IO4700" ("S2", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes}; /* Open PL cursor*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "S2     "; /* Database action*/
    TA1REC.TA1LOCAT[3] = "IO4700 "; /* IO module*/
    TA1REC.TA1DBASE = "DTRANS"; /* Database*/
    TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view*/
    XPNL005(); /* Abend routine*/
    NLXREC.NLXERRF = "Y"; /* Ind error (DB lock)*/
    return; /* Get out*/
  end
  ;
  call "IO4700" ("N2", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
                                   /* Get packing list for order*/
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* If no packing list found*/
    call "IO4700" ("C2", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes}; /* Close cursor*/
    NI0SW01.NI0SWLPF = "A PACKING LIST FOR ORDER"; /* Format err msg*/
    NI0SW01.NI0SWLCO = TSVREC.OP1CUOID; /* Cust order#*/
    NI0SW01.NI0SWLPE = ".";
    NI0SW01.NI0SWLNO = TSVREC.OP1NORID; /* Nike order#*/
    NI0SW01.NI0SWLSF = " DOES NOT EXIST";
    NI0SM100.VAGen_EZEMSG = NI0SW01.NI0SWLMS;
    NLXREC.NLXERRF = "Y"; /* Indicate error*/
    return; /* Get out*/
  end
  ;
  NI0SW01.NI0SWW2X = 0; /* Init work index*/
  while (SQLCA.VAGen_SQLCODE == 0) /* For each packing list found*/
    NI0SW01.NI0SWW2X = NI0SW01.NI0SWW2X + 1;
    NI0SW01.TSVPLNBR[NI0SWW2X] = TSVREC.TSVPLNBR; /* Store pl#*/
    call "IO4700" ("N2", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes}; /* Get next packing list*/
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* If all packing lists obtained*/
                                   /* normally*/
    call "IO4700" ("C2", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes}; /* Close cursor*/
    NI0SSBS(); /* Build packing list style record*/
    while (NI0SW01.NI0SWW2X > 0) /* For each stored packing list*/
      NI0SSOS(); /* Open packing list style (TSZREC)*/
      if (SQLCA.VAGen_SQLCODE == -911) /* If data base lock*/
        NLXREC.NLXERRF = "Y"; /* Indicate error*/
        return; /* Get out*/
      end
      NI0SSFS(); /* Fetch pl style w/blank country*/
      if (SQLCA.VAGen_SQLCODE == -911) /* If data base lock*/
        NLXREC.NLXERRF = "Y"; /* Indicate error*/
        return; /* Get out*/
      end
      if (SQLCA.VAGen_SQLCODE == 0) /* If blank country found*/
        NI0SW01.NI0SWLPF = "A PACKING LIST FOR ORDER"; /* Fmt err msg*/
        NI0SW01.NI0SWLCO = TSVREC.OP1CUOID; /* Cust order#*/
        NI0SW01.NI0SWLPE = ".";
        NI0SW01.NI0SWLNO = TSVREC.OP1NORID; /* Nike order#*/
        NI0SW01.NI0SWLSF = " HAS A STYLE WITH NO COUNTRY OF ORIGIN";
        NI0SM100.VAGen_EZEMSG = NI0SW01.NI0SWLMS;
        NLXREC.NLXERRF = "Y"; /* Indicate error*/
        call "IO4720" ("C1", SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes}; /* Close cursor*/
        return; /* Get out*/
      end
      call "IO4720" ("C1", SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes}; /* Close cursor*/
      NI0SW01.NI0SWW2X = NI0SW01.NI0SWW2X - 1;
    end
  else
    TA1REC.TA1LOCAT[2] = "N2     "; /* Database action*/
    TA1REC.TA1LOCAT[3] = "IO4700 "; /* IO module*/
    TA1REC.TA1DBASE = "DTRANS"; /* Database*/
    TA1REC.TA1TBLVU = "VNLPLO01"; /* Table view*/
    XPNL005(); /* Abend routine*/
    NLXREC.NLXERRF = "Y"; /* Ind error (DB lock)*/
  end
end // end NI0SSEP

// Edit Select Codes
Function NI0SSES()
  ;
  NLXREC.NLXCPROC = "NI0SSES";
  ;
  NI0SW01.NI0SWW2X = NI0SW01.NI0SWSCX;
                                   /* Set work index 2 = last displ ln*/
  NI0SW01.NI0SWW1X = NI0SW01.NI0SWARX + NI0SW01.NI0SWSCX;
  NI0SW01.NI0SWW1X = NI0SW01.NI0SWW1X - 1;
                                   /* Set work idx 1 = corres arry rec*/
  ;
  NI0SW01.NI0SWW3X = NI0SW01.NI0SWW1X;
  while (NI0SW01.NI0SWW3X >= NI0SWARX) /* For each arry rec corres to map pg*/
    NI0SW01.NI0SWSEL[NI0SWW3X] = " "; /* Init as not selected*/
    NI0SW01.NI0SWW3X = NI0SW01.NI0SWW3X - 1;
  end
  ;
  NI0SW01.NI0SWSER = "N"; /* Init sel cd error flag*/
  ;
  while (NI0SW01.NI0SWW2X > 0) /* For each displayed order line*/
    ;
    if (NI0SM200.NI0SMSEL[NI0SWW2X] == "S") /* If order selected*/
      NI0SW01.NI0SWW3X = 0; /* Init work index 3*/
      while (NI0SW01.NI0SWW3X < NI0SW04.NI0SW-OCT) /* For each array rec*/
        NI0SW01.NI0SWW3X = NI0SW01.NI0SWW3X + 1;
        if (NI0SW01.NI0SWSEL[NI0SWW3X] != " ") /* If sel rec fnd in arry*/
          /* *** Edit selection GPC, to make sure it fits in group ****/
          if (NI0SW01.XGPCD[NI0SWW3X] == "02") /* If 02 gpc group*/
            if (NI0SM200.XGPCD[NI0SWW2X] != "02") /* rec sel not 02*/
              converseLib.validationFailed(185); /* Not a footwear order*/
              NLXREC.NLXERRF = "Y";
              NI0SW01.NI0SWSER = "Y";
              set NI0SM200.NI0SMSEL[NI0SWW2X] cursor, bold;
            end
          else
            if (NI0SW01.XGPCD[NI0SWW3X] == "03") /* If 03 gpc group*/
              if (NI0SM200.XGPCD[NI0SWW2X] != "03") /* rec sel not 03*/
                converseLib.validationFailed(186); /* Not an apparel order*/
                NLXREC.NLXERRF = "Y";
                NI0SW01.NI0SWSER = "Y";
                set NI0SM200.NI0SMSEL[NI0SWW2X] cursor, bold;
              end
            else /* Other gpc*/
              if (NI0SM200.XGPCD[NI0SWW2X] == 02 /* If 02 or 03 gpc*/
               || NI0SM200.XGPCD[NI0SWW2X] == 03)
                converseLib.validationFailed(187); /* Cant mix gpc 02/03 w/others*/
                NLXREC.NLXERRF = "Y";
                NI0SW01.NI0SWSER = "Y";
                set NI0SM200.NI0SMSEL[NI0SWW2X] cursor, bold;
              end
            end
          end
          NI0SW01.NI0SWW3X = 100; /* Force end of loop*/
        end
      end
      if (NI0SW01.NI0SWSER == "N") /* If valid select*/
        NI0SW01.NI0SWSEL[NI0SWW1X] = "S"; /* Mark as sel in array*/
      else
        NI0SW01.NI0SWSER = "N";
      end
    else
      if (NI0SM200.NI0SMSEL[NI0SWW2X] != " ") /* If order not sel, not blank*/
        converseLib.validationFailed(28); /* Invalid selection*/
        NLXREC.NLXERRF = "Y";
        set NI0SM200.NI0SMSEL[NI0SWW2X] cursor, bold;
      end
    end
    NI0SW01.NI0SWW1X = NI0SW01.NI0SWW1X - 1;
    NI0SW01.NI0SWW2X = NI0SW01.NI0SWW2X - 1;
  end
end // end NI0SSES

// Fetch PL Style Record (TSZREC)
Function NI0SSFS()
  NLXREC.NLXCPROC = "NI0SSFS"; /* set current proc name*/
  ;
  call "IO4720" ("N1", SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "N1     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4720 "; /* io module*/
    TA1REC.TA1DBASE = "DTRANS"; /* database*/
    TA1REC.TA1TBLVU = "VNLPLS01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NI0SSFS

// Inquire KUCREC
Function NI0SSIC()
  ;
  NLXREC.NLXCPROC = "NI0SSIC";
  ;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* Read Customer*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* nil customers only*/
    if (KUCREC.XAUCD == "31"
     || KUCREC.XAUCD == "32"
     || KUCREC.XAUCD == "33")
      if (KUCREC.XXXSTAT == "A") /* active nil customer*/
         /* next sentence*/
      else
        SQLCA.VAGen_SQLCODE = 100;
      end
    else
      SQLCA.VAGen_SQLCODE = 100;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      return;
    else
      TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO0240 "; /* io module*/
      TA1REC.TA1DBASE = "DCUST"; /* database*/
      TA1REC.TA1TBLVU = "VCMPNY01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end
  ;
end // end NI0SSIC

// Inquire vdstrb01
Function NI0SSID()
  ;
  NLXREC.NLXCPROC = "NI0SSID";
  ;
  call "IO4600" ("S ", SQLCA, VDSTRB01) {isNoRefresh = yes, isExternal = yes}; /* Read Customer*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    if (VDSTRB01.XXXSTAT == "A") /* active nil customer*/
         /* next sentence*/
    else
      SQLCA.VAGen_SQLCODE = 100;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      return;
    else
      TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO4600 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VDSTRB01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end
  ;
end // end NI0SSID

// Inquire OP1REC
Function NI0SSIO()
  ;
  NLXREC.NLXCPROC = "NI0SSIO";
  ;
  call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* Select unique OP1REC*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "S      "; /* Database action*/
    TA1REC.TA1LOCAT[3] = "IO0430 "; /* IO module*/
    TA1REC.TA1DBASE = "DORDER"; /* Database*/
    TA1REC.TA1TBLVU = "VORHDR01"; /* Table view*/
    XPNL005(); /* Abend routine*/
  end
end // end NI0SSIO

// Inquire NIRREC
Function NI0SSIP()
  ;
  NLXREC.NLXCPROC = "NI0SSIP";
  ;
  call "IO5810" ("SA", SQLCA, VPRORD01) {isNoRefresh = yes, isExternal = yes}; /* Select unique NIRREC*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "SA     "; /* Database action*/
    TA1REC.TA1LOCAT[3] = "IO5810 "; /* IO module*/
    TA1REC.TA1DBASE = "DNILO"; /* Database*/
    TA1REC.TA1TBLVU = "VPRORD01"; /* Table view*/
    XPNL005(); /* Abend routine*/
  end
end // end NI0SSIP

// Load Orders Array
Function NI0SSLO()
  ;
  NLXREC.NLXCPROC = "NI0SSLO";
  ;
  NI0SW01.NI0SWARX = 1; /* Initialize array index*/
  ;
   /* ****************************************/
     /* Initialize data base error fields*/
   /* ****************************************/
  ;
  TA1REC.TA1LOCAT[2] = "NI0SSLO ";
  TA1REC.TA1LOCAT[3] = "OP1700  ";
  TA1REC.TA1DBASE = "DORDER  ";
  TA1REC.TA1TBLVU = "VORHDR01";
  NI0SW04.NI0SW-KID = NI0SM100.KUCCOID;
  TA1REC.TA1TBLKE = NI0SW04.NI0SW-KID;
  ;
   /* ****************************************/
     /* Load record to call OP1700,*/
      /* which obtains Order Header records*/
   /* ****************************************/
  ;
  NI0SW02.KUCCOID = NI0SM100.KUCCOID;
  NI0SW02.KUMSTRID[1] = 0;
  NI0SW02.KUMSTRID[2] = 9999;
  NI0SW02.XNXCD[1] = 0;
  NI0SW02.XNXCD[2] = 9999;
  NI0SW02.OP1CUOID[1] = 0;
  NI0SW02.OP1CUOID[2] = 999999999;
  NI0SW02.OP1NORID[1] = 0;
  NI0SW02.OP1NORID[2] = 9999;
  if (NI0SM100.XGPCD > " ")
    NI0SW02.XGPCD[1] = NI0SM100.XGPCD;
    NI0SW02.XGPCD[2] = NI0SM100.XGPCD;
  else
    NI0SW02.XGPCD[1] = " ";
    NI0SW02.XGPCD[2] = "99";
  end
  NI0SW02.SY1STNBR = " ";
  NI0SW02.SY2CLRID[1] = " ";
  NI0SW02.SY2CLRID[2] = "999";
  NI0SW02.XDMCD[1] = " ";
  NI0SW02.XDMCD[2] = "99";
  if (NI0SM100.XOBCD > " ")
    NI0SW02.XOBCD[1] = NI0SM100.XOBCD;
    NI0SW02.XOBCD[2] = NI0SM100.XOBCD;
  else
    NI0SW02.XOBCD[1] = " ";
    NI0SW02.XOBCD[2] = "99";
  end
  NI0SW02.XOCCD[1] = " ";
  NI0SW02.XOCCD[2] = "99";
  NI0SW02.SP1ID[1] = " ";
  NI0SW02.SP1ID[2] = "9999";
  NI0SW02.XOSCD[1] = " ";
  NI0SW02.XOSCD[2] = "99";
  NI0SW02.XCSCD[1] = " ";
  NI0SW02.XCSCD[2] = "99";
  NI0SW02.XDVCD[1] = " ";
  NI0SW02.XDVCD[2] = "99";
  NI0SW02.XSOCD[1] = " ";
  NI0SW02.XSOCD[2] = "99";
  NI0SW02.XWHCD[1] = " ";
  NI0SW02.XWHCD[2] = "99";
  NI0SW02.OP1CUPO[1] = " ";
  NI0SW02.OP1CUPO[2] = "9999999999999999999999999";
  NI0SW02.OP1CUNDT[1] = TA2REC.TA2DBDFN;
  NI0SW02.OP1CUNDT[2] = TA2REC.TA2DBDTN;
  NI0SW02.OP1DSBDT[1] = 0;
  NI0SW02.OP1DSBDT[2] = 999999999;
  NI0SW02.OP1DSADT[1] = 0;
  NI0SW02.OP1DSADT[2] = 999999999;
  NI0SW02.OP1CALDT[1] = 0;
  NI0SW02.OP1CALDT[2] = 999999999;
  NI0SW02.XBDCD[1] = " ";
  NI0SW02.XBDCD[2] = "9";
  NI0SW02.OP1BLKID[1] = 0;
  NI0SW02.OP1BLKID[2] = 999999999;
  NI0SW02.OP1SWORD[1] = 0;
  NI0SW02.OP1SWORD[2] = 999999999;
  NI0SW02.OP1OVALU[1] = 0;
  NI0SW02.OP1OVALU[2] = 999999999.99;
  NI0SW02.OP1OTUNT[1] = 0;
  NI0SW02.OP1OTUNT[2] = 999999999;
  NI0SW02.XPTCD[1] = " ";
  NI0SW02.XPTCD[2] = "99";
  NI0SW02.OP1CPODT[1] = 0;
  NI0SW02.OP1CPODT[2] = 999999999;
  ;
   /* ****************************************/
     /* Open Order Header cursor*/
   /* ****************************************/
  ;
  NI0SW02.NI0SWTSK = "S2"; /* Open cursor*/
  ;
  call "OP1700" (NI0SW02, SQLCA, NI0SW03) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0) /* If hard error*/
    TA1REC.TA1LOCAT[2] = "S2     "; /* Database action*/
    TA1REC.TA1LOCAT[3] = "OP1700 "; /* IO module*/
    TA1REC.TA1DBASE = "DORDER"; /* Database*/
    TA1REC.TA1TBLVU = "VORHDR01"; /* Table view*/
    XPNL005(); /* Perform abend routine*/
    NI0SW04.NI0SWERR = "Y";
    return;
  end
  ;
       /* reset order count and reset the screen subscript and*/
       /* the internal table subscript*/
  ;
  set NI0SW03 empty;
  NI0SW04.NI0SW-OCT = 0; /* init order count*/
  ;
   /* ****************************************/
     /* Read through Order Header records*/
   /* ****************************************/
  ;
  NI0SW02.NI0SWTSK = "N2"; /* fetch cursor*/
  NI0SW01.NI0SWFND = "N"; /* init order found fitting crit flag*/
  NLXREC.NLXEOFF = "N"; /* init end of file flag*/
  ;
  while (NLXREC.NLXEOFF == "N") /* while more order header recs*/
    set SQLCA empty;
    call "OP1700" (NI0SW02, SQLCA, NI0SW03) {isNoRefresh = yes, isExternal = yes}; /* fetch next order*/
    if (SQLCA.VAGen_SQLCODE != 0)
      NLXREC.NLXEOFF = "Y"; /* end of file - get out of loop*/
    end
    ;
    if (NLXREC.NLXEOFF == "N" /* if not end of file*/
     && NI0SW03.XOSCD != "IP" /* skip 'in process' orders*/
     && NI0SW03.XOSCD != "XL") /* skip 'canceled' orders*/
      VPRORD01.OP1CUOID = NI0SW03.OP1CUOID; /* build key*/
      VPRORD01.OP1NORID = NI0SW03.OP1NORID;
      NI0SSIP(); /* inquire proforma order to see if it exists*/
      if (SQLCA.VAGen_SQLCODE == -911) /* if data base locked*/
        NI0SW04.NI0SWERR = "Y"; /* indicate error*/
        return; /* get out*/
      end
      NI0SW01.NI0SWFND = "Y"; /* ind order rec fitting crit found*/
      if (SQLCA.VAGen_SQLCODE == 100) /* if order doesn't exist in proforma*/
        NI0SW04.NI0SW-OCT = NI0SW04.NI0SW-OCT + 1; /* increment ord count*/
        if (NI0SW04.NI0SW-OCT > 100) /* Format msg--orders > 100 not shown*/
          NI0SWOM1 = "OVER 100 ORDERS MATCHED SELECTION CRITERIA,";
          NI0SWOM2 = " BUT ONLY 100 CAN BE VIEWED";
          NI0SW04.NI0SW-OCT = +100; /* 100 records in array*/
          NI0SW02.NI0SWTSK = "C2"; /* close cursor*/
          call "OP1700" (NI0SW02, SQLCA, NI0SW03) {isNoRefresh = yes, isExternal = yes};
          return;
        end
        /* *** Format array row ****/
        NI0SW01.NI0SWSEL[NI0SW-OCT] = " "; /* select cd*/
        NI0SW01.NI0SWCOR[NI0SW-OCT] = NI0SW03.OP1CUOID; /* cu ord#*/
        NI0SW01.NI0SWNOR[NI0SW-OCT] = NI0SW03.OP1NORID; /* nk ord#*/
        NI0SW01.XGPCD[NI0SW-OCT] = NI0SW03.XGPCD; /* gpc cd*/
        NI0SW01.XOBCD[NI0SW-OCT] = NI0SW03.XOBCD; /* type cd*/
        NI0SW01.XOCCD[NI0SW-OCT] = NI0SW03.XOCCD; /* ord class*/
        NI0SW01.NI0SWDT9 = NI0SW03.OP1CUNDT; /* need dt*/
        NI0SW01.NI0SWYER[NI0SW-OCT] = NI0SW01.NI0SWYR9;
        NI0SW01.NI0SWSL1[NI0SW-OCT] = "/";
        NI0SW01.NI0SWMON[NI0SW-OCT] = NI0SW01.NI0SWMN9;
        NI0SW01.NI0SWSL2[NI0SW-OCT] = "/";
        NI0SW01.NI0SWDAY[NI0SW-OCT] = NI0SW01.NI0SWDY9;
        NI0SW01.XOSCD[NI0SW-OCT] = NI0SW03.XOSCD; /* status cd*/
        NI0SW01.KUMSTRID[NI0SW-OCT] = NI0SW03.KUMSTRID; /* store*/
        NI0SW01.OP1CUPO[NI0SW-OCT] = NI0SW03.OP1CUPO; /* po#*/
      end
    end
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 100)
    NI0SW02.NI0SWTSK = "C2"; /* close cursor*/
    call "OP1700" (NI0SW02, SQLCA, NI0SW03) {isNoRefresh = yes, isExternal = yes};
    if (NI0SW04.NI0SW-OCT <= 0) /* returned set is empty*/
      if (NI0SW01.NI0SWFND == "N") /* if no orders found fitting crit*/
        converseLib.validationFailed(190); /* no orders found fitting entered criteria*/
      else /* if orders found, but belong to a proforma*/
        converseLib.validationFailed(215); /* all orders found fitting crit are in prof*/
      end
      NI0SW04.NI0SWERR = "Y"; /* set error flag*/
    else /* format message--nnn orders displayed*/
      NI0SW01.NI0SWOCT = NI0SW04.NI0SW-OCT;
      NI0SW01.NI0SWOSF = " ORDERS MATCHING SELECTION CRITERIA";
      NI0SW01.NI0SWOM2 = " "; /* (not using message part 2)*/
    end
    return;
  end
  ;
  TA1REC.TA1LOCAT[2] = "N2     "; /* Database action*/
  TA1REC.TA1LOCAT[3] = "OP1700 "; /* IO module*/
  TA1REC.TA1DBASE = "DORDER"; /* Database*/
  TA1REC.TA1TBLVU = "VORHDR01"; /* Table view*/
  XPNL005(); /* abend routine for hard error*/
  NI0SW04.NI0SWERR = "Y"; /* indicate error*/
end // end NI0SSLO

// Open PL Style Cursor (TSZREC)
Function NI0SSOS()
  ;
  NLXREC.NLXCPROC = "NI0SSOS";
  ;
  TSZREC.TSVPLNBR = NI0SW01.TSVPLNBR[NI0SWW2X]; /* PL style#*/
  ;
  call "IO4720" ("S1", SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "S1     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4720 "; /* io module*/
    TA1REC.TA1DBASE = "DTRANS"; /* database*/
    TA1REC.TA1TBLVU = "VNLPLS01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NI0SSOS

// Check PL for Proforma Orders
Function NI0SSPL()
  ;
  NLXREC.NLXCPROC = "NI0SSPL";
  ;
   /* ********************************************************/
   /* ** Search orders that were selected for new proforma ***/
   /* ********************************************************/
  NI0SW01.NI0SWW1X = 0;
  while (NI0SW01.NI0SWW1X < NI0SW04.NI0SW-OCT)
                                   /* For each order in old array*/
    NI0SW01.NI0SWW1X = NI0SW01.NI0SWW1X + 1;
    if (NI0SW01.NI0SWSEL[NI0SWW1X] == "S") /* If order selected*/
      if (NI0SW01.XOBCD[NI0SWW1X] == "D1" /* If order req packing list*/
       || NI0SW01.XOBCD[NI0SWW1X] == "P1" 
       || NI0SW01.XOBCD[NI0SWW1X] == "P2" 
       || NI0SW01.XOBCD[NI0SWW1X] == "P3" 
       || NI0SW01.XOBCD[NI0SWW1X] == "P4" 
       || NI0SW01.XOBCD[NI0SWW1X] == "S1" 
       || NI0SW01.XOBCD[NI0SWW1X] == "B1")
        TSVREC.OP1CUOID = NI0SW01.NI0SWCOR[NI0SWW1X]; /* Build key*/
        TSVREC.OP1NORID = NI0SW01.NI0SWNOR[NI0SWW1X];
        NI0SSEP(); /* Edit PL for order*/
        if (NLXREC.NLXERRF == "Y") /* If error occurred*/
          return; /* Get out*/
        end
      end
      if (NI0SW01.XOBCD[NI0SWW1X] == "F1" /* ORDER TYPE*/
       && NI0SW01.XOCCD[NI0SWW1X] == "IN" /* ORDER CLASS*/
       && NI0SW01.XGPCD[NI0SWW1X] == "03") /* GPC*/
        TSVREC.OP1CUOID = NI0SW01.NI0SWCOR[NI0SWW1X]; /* Build key*/
        TSVREC.OP1NORID = NI0SW01.NI0SWNOR[NI0SWW1X];
        NI0SSEP(); /* Edit PL for order*/
        if (NLXREC.NLXERRF == "Y") /* If error occurred*/
          return; /* Get out*/
        end
      end
    end
  end
end // end NI0SSPL

// Security Level 1 - NI0S
Function NI0SSS1()
   /* ****** this sets security for fields in group1*/
  ;
  NLXREC.NLXCPROC = "NI0SSS1";
  ;
   /* ***************************************************/
   /* Determine if user is 'Inquiry only'...*/
   /* ***************************************************/
  ;
  NI0SW01.NI0SWINQ = "N"; /* Prepare for security check*/
  if (COMMAREA.CAADDFL == "N") /* If user can't add*/
    NI0SW01.NI0SWINQ = "Y"; /* User is inquiry only*/
  end
end // end NI0SSS1

// Read and Update Control Table
Function NI0SSUC()
  NLXREC.NLXCPROC = "NI0SSUC"; /* set current proc name*/
  ;
   /* read control table*/
  ;
  call "IO4300" ("U2", SQLCA, VNLCTL01) {isNoRefresh = yes, isExternal = yes}; /* read and upd ctl tbl*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "U2     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4300 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO "; /* database*/
    TA1REC.TA1TBLVU = "VNLCTL01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
end // end NI0SSUC

//*** RECORD=NI0SW01 ****
// This is the main working storage record for NI0S
// ***********************
Record NI0SW01 type basicRecord
  5 NI0SWINQ NI0SWINQ ; 
  5 NI0SWPAG NI0SWPAG ; 
  5 NI0SWFND NI0SWFND ; 
  5 NI0SWARX NI0SWARX ; 
  5 NI0SWSCX NI0SWSCX ; 
  5 NI0SWFOX NI0SWFOX ; 
  5 NI0SWW1X NI0SWW1X ; 
  5 NI0SWW2X NI0SWW2X ; 
  5 NI0SWW3X NI0SWW3X ; 
  5 NI0SWNER NI0SWNER ; 
  5 NI0SWSER NI0SWSER ; 
  5 NI0SWPUW NI0SWPUW ; 
  5 * char(1) ; 
  5 NI0SWAMT NI0SWAMT ; 
    10 NI0SWDLR NI0SWDLR ; 
    10 NI0SWCNT NI0SWCNT ; 
  5 * char(1) ; 
  5 NI0SWDT9 NI0SWDT9 ; 
    10 NI0SWCEN NI0SWCEN ; 
    10 NI0SWYR9 NI0SWYR9 ; 
    10 NI0SWMN9 NI0SWMN9 ; 
    10 NI0SWDY9 NI0SWDY9 ; 
  5 * char(1) ; 
  5 NI0SWDTU NI0SWDTU ; 
    10 NI0SWMNU NI0SWMNU ; 
    10 NI0SWDYU NI0SWDYU ; 
    10 NI0SWYRU NI0SWYRU ; 
  5 * char(1) ; 
  5 TSVPLNBR TSVPLNBR [30] ; 
  5 * char(1) ; 
  5 NI0SWOAR NI0SWOAR [100] ; 
    10 NI0SWSEL NI0SWSEL ; 
    10 NI0SWCOR NI0SWCOR ; 
      15 * char(8) ; 
      15 OP1PARTN OP1PARTN ; 
    10 NI0SWNOR NI0SWNOR ; 
    10 XGPCD XGPCD ; 
    10 XOBCD XOBCD ; 
    10 XOCCD XOCCD ; 
    10 NI0SWNDT NI0SWNDT ; 
      15 NI0SWMON NI0SWMON ; 
      15 NI0SWSL1 NI0SWSL1 ; 
      15 NI0SWDAY NI0SWDAY ; 
      15 NI0SWSL2 NI0SWSL2 ; 
      15 NI0SWYER NI0SWYER ; 
    10 XOSCD XOSCD ; 
    10 KUMSTRID KUMSTRID ; 
    10 OP1CUPO OP1CUPO ; 
  5 * char(1) ; 
  5 NI0SWOMS NI0SWOMS ; 
    10 NI0SWOM1 NI0SWOM1 ; 
      15 NI0SWOCT NI0SWOCT ; 
      15 NI0SWOSF NI0SWOSF ; 
    10 NI0SWOM2 NI0SWOM2 ; 
  5 * char(1) ; 
  5 NI0SWLMS NI0SWLMS ; 
    10 NI0SWLPF NI0SWLPF ; 
    10 NI0SWLCO NI0SWLCO ; 
    10 NI0SWLPE NI0SWLPE ; 
    10 NI0SWLNO NI0SWLNO ; 
    10 NI0SWLSF NI0SWLSF ; 
  5 * char(1) ; 
  5 NI0SWEMS NI0SWEMS ; 
    10 NI0SWEPF NI0SWEPF ; 
    10 NI0SWECO NI0SWECO ; 
    10 NI0SWEPE NI0SWEPE ; 
    10 NI0SWENO NI0SWENO ; 
    10 NI0SWESF NI0SWESF ; 
end // end NI0SW01

//*** RECORD=NI0SW02 ****
// customer order inquiry common working storage area. These
// work areas are designated pass to the subroutine op1080 as
// keys for the search of the data base.
// ***********************
Record NI0SW02 type basicRecord
  15 NI0SWTSK NI0SWTSK ; 
  15 KUCCOID KUCCOID ; 
  15 KUMSTRID KUMSTRID [2] ; 
  15 XNXCD XNXCD [2] ; 
  15 OP1CUOID OP1CUOID [2] ; 
  15 OP1NORID OP1NORID [2] ; 
  15 XGPCD XGPCD [2] ; 
  15 SY1STNBR SY1STNBR ; 
  15 SY2CLRID SY2CLRID [2] ; 
  15 XDMCD XDMCD [2] ; 
  15 XOBCD XOBCD [2] ; 
  15 XOCCD XOCCD [2] ; 
  15 SP1ID SP1ID [2] ; 
  15 XOSCD XOSCD [2] ; 
  15 XCSCD XCSCD [2] ; 
  15 XDVCD XDVCD [2] ; 
  15 XSOCD XSOCD [2] ; 
  15 XWHCD XWHCD [2] ; 
  15 OP1CUPO OP1CUPO [2] ; 
  15 OP1CUNDT OP1CUNDT [2] ; 
  15 OP1DSBDT OP1DSBDT [2] ; 
  15 OP1DSADT OP1DSADT [2] ; 
  15 OP1CALDT OP1CALDT [2] ; 
  15 XBDCD XBDCD [2] ; 
  15 OP1BLKID OP1BLKID [2] ; 
  15 OP1SWORD OP1SWORD [2] ; 
  15 OP1OVALU OP1OVALU [2] ; 
  15 OP1OTUNT OP1OTUNT [2] ; 
  15 XPTCD XPTCD [2] ; 
  15 OP1CPODT OP1CPODT [2] ; 
end // end NI0SW02

//*** RECORD=NI0SW03 ****
// customer order inquiry common working storage area.  These
// work areas are designated for return data from the call to
// the subroutine op1700.
// ***********************
Record NI0SW03 type basicRecord
  15 OP1CUOID OP1CUOID ; 
  15 OP1NORID OP1NORID ; 
  15 XSOCD XSOCD ; 
  15 KUCCOID KUCCOID ; 
  15 KUMSTRID KUMSTRID ; 
  15 XNXCD XNXCD ; 
  15 OP1CUPO OP1CUPO ; 
  15 XOBCD XOBCD ; 
  15 XOCCD XOCCD ; 
  15 SP1ID SP1ID ; 
  15 XWHCD XWHCD ; 
  15 OP1CUNDT OP1CUNDT ; 
  15 XOSCD XOSCD ; 
  15 XDSCD XDSCD ; 
  15 XBDCD XBDCD ; 
  15 OP1BLKID OP1BLKID ; 
  15 OP1NDRAW OP1NDRAW ; 
  15 OP1DSBDT OP1DSBDT ; 
  15 OP1DSADT OP1DSADT ; 
  15 XCSCD XCSCD ; 
  15 OP1OVALU OP1OVALU ; 
  15 OP1OTUNT OP1OTUNT ; 
  15 OP11TMSF OP11TMSF ; 
  15 OP1CPODT OP1CPODT ; 
  15 XGPCD XGPCD ; 
end // end NI0SW03

//*** RECORD=NI0SW04 ****
// customer order inquiry common working storage area. These
// work areas are designated for internal application use only.
// ***********************
Record NI0SW04 type basicRecord
  10 NI0SWTSP NI0SWTSP ; 
  10 NI0SWSSP NI0SWSSP ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 NI0SWXUP NI0SWXUP ; 
  10 NI0SWSB1 NI0SWSB1 ; 
  10 NI0SWSB2 NI0SWSB2 ; 
  10 NI0SWSB3 NI0SWSB3 ; 
  10 NI0SWSB4 NI0SWSB4 ; 
  10 NI0SWFIX NI0SWFIX ; 
  10 NI0SWBIX NI0SWBIX ; 
  10 NI0SWINX NI0SWINX ; 
  10 NI0SWBLK NI0SWBLK ; 
  10 NI0SWQTY NI0SWQTY ; 
  10 NI0SWVAL NI0SWVAL ; 
  10 NI0SWBSD NI0SWBSD ; 
  10 NI0SWBED NI0SWBED ; 
  10 NI0SWBCD NI0SWBCD ; 
  10 NI0SWSDT NI0SWSDT ; 
    15 NI0SWSMM NI0SWSMM ; 
    15 NI0SWSDD NI0SWSDD ; 
    15 NI0SWSYY NI0SWSYY ; 
  10 NI0SWEDT NI0SWEDT ; 
    15 NI0SWEMM NI0SWEMM ; 
    15 NI0SWEDD NI0SWEDD ; 
    15 NI0SWEYY NI0SWEYY ; 
  10 NI0SWHDT NI0SWHDT ; 
    15 NI0SWHCC NI0SWHCC ; 
    15 NI0SWHYY NI0SWHYY ; 
    15 NI0SWHMM NI0SWHMM ; 
    15 NI0SWHDD NI0SWHDD ; 
  10 NI0SWCUR NI0SWCUR ; 
    15 NI0SWCCC NI0SWCCC ; 
    15 NI0SWCDT NI0SWCDT ; 
      20 NI0SWCYY NI0SWCYY ; 
      20 NI0SWCMM NI0SWCMM ; 
      20 NI0SWCDD NI0SWCDD ; 
  10 NI0SW-CEN NI0SW-CEN ; 
  10 NI0SWERR NI0SWERR ; 
  10 NI0SWDTE NI0SWDTE ; 
  10 NI0SW-SEL NI0SW-SEL ; 
  10 NI0SWNXT NI0SWNXT ; 
  10 NI0SWCLS NI0SWCLS ; 
  10 NI0SWCPO NI0SWCPO ; 
    15 NI0SWPOE NI0SWPOE [25] ; 
  10 NI0SWCOO NI0SWCOO ; 
    15 NI0SWEAR NI0SWEAR [25] ; 
  10 NI0SW-OCT NI0SW-OCT ; 
  10 NI0SWORC NI0SWORC ; 
  10 OP1CUOID OP1CUOID ; 
  10 OP1NORID OP1NORID ; 
  10 NI0SWORD NI0SWORD ; 
    15 * char(7) ; 
    15 OP1PARTN OP1PARTN ; 
  10 NI0SWMAX NI0SWMAX ; 
  10 NI0SWCUS NI0SWCUS ; 
    15 NI0SWSTR NI0SWSTR ; 
    15 NI0SWPT1 NI0SWPT1 ; 
    15 NI0SWDEP NI0SWDEP ; 
  10 NI0SWFOR NI0SWFOR ; 
    15 NI0SWFCO NI0SWFCO ; 
    15 NI0SWPT2 NI0SWPT2 ; 
    15 NI0SWFNO NI0SWFNO ; 
  10 NI0SWDAT NI0SWDAT ; 
  10 NI0SWTRS NI0SWTRS ; 
  10 NI0SWDT1 NI0SWDT1 ; 
    15 NI0SWWCC NI0SWWCC ; 
    15 NI0SWMYY NI0SWMYY ; 
    15 NI0SWWMM NI0SWWMM ; 
    15 NI0SWWDD NI0SWWDD ; 
  10 NI0SWDT2 NI0SWDT2 ; 
    15 NI0SWMMW NI0SWMMW ; 
    15 NI0SWDDW NI0SWDDW ; 
    15 NI0SWYYW NI0SWYYW ; 
  10 NI0SWST1 NI0SWST1 ; 
    15 NI0SWSTN NI0SWSTN ; 
  10 NI0SW-KID NI0SW-KID ; 
end // end NI0SW04

// generic century
DataItem NI0SW-CEN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formatted cust company
DataItem NI0SW-KID num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order count-- for select set
DataItem NI0SW-OCT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op1080 select set
DataItem NI0SW-SEL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-adj-amt
DataItem NI0SWAMT num(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Array index
DataItem NI0SWARX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// binary current date yyyymmdd
DataItem NI0SWBCD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// binary end date yyyymmdd
DataItem NI0SWBED int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// page backward index
DataItem NI0SWBIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// bulk order id number
DataItem NI0SWBLK num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// binary start date yyyymmdd
DataItem NI0SWBSD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current century
DataItem NI0SWCCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current days
DataItem NI0SWCDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current date system format
DataItem NI0SWCDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// always '019'
DataItem NI0SWCEN char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op1080 close scan
DataItem NI0SWCLS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current month
DataItem NI0SWCMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cents
DataItem NI0SWCNT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// company only in key indicator
DataItem NI0SWCOO char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-cust-ord-id
DataItem NI0SWCOR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws customer po #, for edits
DataItem NI0SWCPO char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current date db2 format
DataItem NI0SWCUR num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formatted cust #
DataItem NI0SWCUS char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current year
DataItem NI0SWCYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// numeric date
DataItem NI0SWDAT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Day
DataItem NI0SWDAY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dd
DataItem NI0SWDDW char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// department id
DataItem NI0SWDEP num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dollars
DataItem NI0SWDLR num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ccyymmdd group
DataItem NI0SWDT1 num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mmddyy group
DataItem NI0SWDT2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// W/S version of cymd
DataItem NI0SWDT9 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// date edit error flag
DataItem NI0SWDTE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Date unformatted - MMDDYY
DataItem NI0SWDTU char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Day
DataItem NI0SWDY9 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Day
DataItem NI0SWDYU char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// edit array senses other keys
DataItem NI0SWEAR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Order exists cust order number
DataItem NI0SWECO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end day
DataItem NI0SWEDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end date for edits
DataItem NI0SWEDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end month
DataItem NI0SWEMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Order exists message
DataItem NI0SWEMS char(61)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Order exists nike order number
DataItem NI0SWENO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Order exists error msg period
DataItem NI0SWEPE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Order exists error msg prefix
DataItem NI0SWEPF char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// internal error flag
DataItem NI0SWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Order exists error msg suffix
DataItem NI0SWESF char(43)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end year
DataItem NI0SWEYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cust order id
DataItem NI0SWFCO num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// page forward index
DataItem NI0SWFIX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Order found fitting crit (y/n)
DataItem NI0SWFND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nike order id
DataItem NI0SWFNO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// formatted order number
DataItem NI0SWFOR char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// First order index
DataItem NI0SWFOX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work century
DataItem NI0SWHCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work days
DataItem NI0SWHDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work area
DataItem NI0SWHDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work month
DataItem NI0SWHMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work year
DataItem NI0SWHYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Inquiry only user (y/n)
DataItem NI0SWINQ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nbr of lines displayed
DataItem NI0SWINX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PL error cust order number
DataItem NI0SWLCO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Packing List error msg
DataItem NI0SWLMS char(75)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PL error nike order number
DataItem NI0SWLNO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PL error msg period
DataItem NI0SWLPE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PL error msg prefix
DataItem NI0SWLPF char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PL error msg suffix
DataItem NI0SWLSF char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max orders returned flag
DataItem NI0SWMAX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// mm
DataItem NI0SWMMW char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Month
DataItem NI0SWMN9 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Month
DataItem NI0SWMNU char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Month
DataItem NI0SWMON char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// yy
DataItem NI0SWMYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Formatted need date
DataItem NI0SWNDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Needed Dates error
DataItem NI0SWNER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-nike-ord-id
DataItem NI0SWNOR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op1080 select next
DataItem NI0SWNXT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Order Array
DataItem NI0SWOAR char(55)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Order msg count amt
DataItem NI0SWOCT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Order count msg part 1
DataItem NI0SWOM1 char(43)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Order count msg part 2
DataItem NI0SWOM2 char(27)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Order count msg
DataItem NI0SWOMS char(70)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// order count -- to pass
DataItem NI0SWORC num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// order number
DataItem NI0SWORD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Order msg suffix
DataItem NI0SWOSF char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Order array page load (y/n)
DataItem NI0SWPAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer po elements
DataItem NI0SWPOE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// decimal point #1
DataItem NI0SWPT1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// decimal point #2
DataItem NI0SWPT2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Pop-up window switch
DataItem NI0SWPUW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ord total units - numeric
DataItem NI0SWQTY num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// subcript 1
DataItem NI0SWSB1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// subcript 2
DataItem NI0SWSB2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// subcript 3
DataItem NI0SWSB3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// subcript 4
DataItem NI0SWSB4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Screen index
DataItem NI0SWSCX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// start day
DataItem NI0SWSDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// start date for edits
DataItem NI0SWSDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Invoice Selected field
DataItem NI0SWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Selection Code error
DataItem NI0SWSER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// / (slash)
DataItem NI0SWSL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// / (slash)
DataItem NI0SWSL2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// start month
DataItem NI0SWSMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// saved storage page
DataItem NI0SWSSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NI0SWST1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NI0SWSTN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cust store
DataItem NI0SWSTR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// start year
DataItem NI0SWSYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// transient data flag
DataItem NI0SWTRS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// subrtn op1080 task path
DataItem NI0SWTSK char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp storage page
DataItem NI0SWTSP num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// total value of order
DataItem NI0SWVAL num(11)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work index 1
DataItem NI0SWW1X smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work index 2
DataItem NI0SWW2X smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Work index 3
DataItem NI0SWW3X smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NI0SWWCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// dd
DataItem NI0SWWDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// mm
DataItem NI0SWWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage update flag
DataItem NI0SWXUP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Year
DataItem NI0SWYER char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Year
DataItem NI0SWYR9 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Year
DataItem NI0SWYRU char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// yy
DataItem NI0SWYYW char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

