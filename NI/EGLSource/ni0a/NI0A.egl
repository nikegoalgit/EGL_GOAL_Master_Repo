package ni0a;

import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPNL001;
import corpcom3.XPNL002;
import corpcom3.XPNL004;
import corpcom3.XPNL005;
import corpcom3.XPXDM01;
import corpcom3.XPXGP01;
import corpcom3.XPXOB01;
import corpcom3.XPXQA01;
import corpcom3.XPXX001;
import corpcom4.XSENTRY;
import corpcom4.XSNLS01;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XCTTBL;
import corpx1.XDMTBL;
import corpx1.XGPTBL;
import corpx1.XOBTBL;
import corpx1.XOCTBL;
import corpx1.XQATBL;
import corpz3.ZDTTBL;
import corpz3.ZPSTBL;
import ku.common.KUCREC;
import ku.common.KUMREC;
import ni.common.NIWREC;
import nl.common.NLXREC;
import op.common.OP1REC;
import sy.common.SY2REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import vv.common.VLCHDR01;
import vv.common.VLCORD01;
import vv.common.VNLGLA01;
import vv.common.VNLIVX01;
import vv.common.VPIHDR01;
//*** PROGRAM=NI0A ****
// ************************************************************
// 
//         ni0a - Invoice Inquiry Selection Menus
//         ------------------------------------
// 
// General program explanation and notes:
// 
// This program is the entry point for the NIL Invoice
// Inquiry system.  There are two selection screens, the
// main selection menu and the customer sub-menu.  The
// selection menu allows the user to choose one of three
// paths for viewing an individual invoice.  The customer
// sub-menu provides selection criteria used to narrow
// the list of invoices for a specific customer.
// ------------------------------------------------------------
// Maintenance History:
// --------------------
//   Date   Who    Remarks
// -------- ------ --------------------------------------------
// 08-23-89 tgriff set up
// 01-03-90 jbaker Fix problem with need, post and invoice date
//                 range validation paragraphs in NI0A220.
// 03-14-90 jjohns Allow zero invoice dates for 'mi' doc typ.
// 04-04-90 jjohns Change GL fields to match GLAREC.
// -------- ------ --------------------------------------------
// 02-20-98 ngango Y2K Modifications to Process NI0A001 and
//                 NI0A220.
// -------- ------ --------------------------------------------
// 07-21-00 msing2 Added Invoice Inqiury Based On Nike Sub
//                 Order Id.
// *********************
Program NI0A type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "NL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  KUMREC KUMREC; // record
  NI0AW01 NI0AW01; // record
  NIWREC NIWREC; // record
  NLXREC NLXREC; // record
  OP1REC OP1REC; // record
  SQLCA SQLCA; // record
  SY2REC SY2REC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  VLCHDR01 VLCHDR01; // record
  VLCORD01 VLCORD01; // record
  VNLGLA01 VNLGLA01; // record
  VNLIVX01 VNLIVX01; // record
  VPIHDR01 VPIHDR01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCTTBL; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XOBTBL {deleteAfterUse = yes}; // table
  use XOCTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use ZDTTBL {deleteAfterUse = yes}; // table
  use ZPSTBL {deleteAfterUse = yes}; // table
  use NI0AM.NI0AM100,  // forms
      NI0AM.NI0AM200, 
      NI0AM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    NI0A000: NI0A000();
    exit program;
  end // end main
end // end NI0A

// Main flow
Function NI0A000()
   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   perform initialization, set application revision nbrs,**/
   /* *   then do main perform until done with application      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0A000";
  ;
  NI0A001(); /* initilize the application*/
  ;
  NLXREC.NLXEOAF = "N"; /* set end-of-application flag to 'no'*/
  ;
  while (NLXREC.NLXEOAF == "N") /* while not end-of-aplication*/
    NI0A050(); /* process the application screen(s)*/
  end
  ;
  COMMAREA.CACURRAP = "NL0A";
  XPNL002();
  exit program;
end // end NI0A000

// Initialize application
Function NI0A001()
  ;
  NLXREC.NLXCPROC = "NI0A001";
  ;
  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen*/
                                   /* converse*/
  VGVar.handleHardIOErrors = 1; /* return control to appl if hard db2*/
                                   /* error*/
  ;
  set NI0AW01 empty; /* clear working storage rec1*/
  set SQLCA empty;
  ;
  XSENTRY(); /* appl entry security*/
  XSSEGTR(); /* set segmented transaction id*/
  ;
  set NLXREC empty; /* clear common working storage*/
  ;
  set NIWREC empty;
  ;
  NI0ASS0(); /* check field level security*/
  ;
   /* ***********************************/
   /* Initialize all potential records.*/
   /* ***********************************/
  set KUCREC empty;
  set VLCHDR01 empty;
  set VNLIVX01 empty;
  ;
  NLXREC.NLXSNAME[1] = "NI0AM100"; /* init screen used in this appl*/
  NLXREC.NLXSNAME[2] = "NI0AM200";
  ;
  NLXREC.NLXCSCRN = "NI0AM100"; /* set first screen to display*/
  ;
   /* **********************************************/
   /* Was this application entered via 'fastpath'?*/
   /* **********************************************/
  if (COMMAREA.CAITEM != " ") /* 'Item' will be non-blank if fastpath*/
    XPNL004(); /* Validate caitem numeric*/
    if (NLXREC.NLXERRF == "Y") /* If error in 'item'*/
      NI0AW01.NI0AWINV = 0; /* Clear work area for key*/
    end
    COMMAREA.CATOAP = " "; /* Clear commarea*/
    COMMAREA.CAITEM = " ";
    NI0AS02(); /* Lookup Invoice #*/
  end
   /* **************************************************/
   /* Was this application entered via a function key?*/
   /* **************************************************/
  if (COMMAREA.CAFRMSYS != "NI") /* check if nil invoicing*/
    COMMAREA.CAUSERA = " ";
  end
  ;
  if (COMMAREA.CAUSERA != " ") /* Does user area contain dat*/
    NIWREC.NIWGROUP = COMMAREA.CAUSERA; /* Yes, load out*/
    ;
    if (NIWREC.NIWFRMAP == "NI0B") /* Successful rtn from 'ni0b'?*/
      if (NIWREC.NIWIVCDL != 0) /* Has invoice date been entered?*/
        NLXREC.NLXERRF = "Y";
        NLXREC.NLXCSCRN = "NI0AM200";
        return;
      else
        NLXREC.NLXERRF = "Y";
        NLXREC.NLXCSCRN = "NI0AM100";
      end
    end
    if (NIWREC.NIWMSGNR == 0) /* No error message?*/
      NLXREC.NLXERRF = "Y";
      NLXREC.NLXCSCRN = "NI0AM100";
      return;
    end
    ;
    if (NIWREC.NIWMSGNR == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(NIWREC.NIWMSGNR);
    end
    ;
    if (NIWREC.NIWIVCDL == 0) /* Low Invoice date present?*/
      NLXREC.NLXERRF = "Y";
      NLXREC.NLXCSCRN = "NI0AM100";
      return;
    else
      /*  */
      /* ------------ Y2K OUT BEGIN ---------------*/
      /*  */
      /* IF NIWREC.NIWIVCDL GT 19991231;*/
      /*  */
      /* ------------ Y2K OUT END -----------------*/
      /*  */
      /*  */
      /* ------------ Y2K IN  BEGIN ---------------*/
      /*  */
      if (NIWREC.NIWIVCDL > 20431231)
        /*  */
        /* ------------ Y2K IN END ------------------*/
        /*  */
        set NIWREC empty;
        NLXREC.NLXERRF = "Y";
        NLXREC.NLXCSCRN = "NI0AM100";
        return;
      else
        set NI0AM200.NI0AMIDL modified;
        set NI0AM200.NI0AMIDH modified;
        NLXREC.NLXERRF = "Y";
        NLXREC.NLXCSCRN = "NI0AM200";
        return;
      end
    end
  else
    if (COMMAREA.CATOAP == "NI0A")
      XPNL004();
      if (NLXREC.NLXERRF == "Y") /* If error in 'item'*/
        NI0AW01.NI0AWINV = 0; /* Clear work area for key*/
      else
        VNLIVX01.NIDIVCID = NLXREC.NLXNUM8A;
        NI0AS02(); /* Lookup Invoice number*/
      end
    end
  end
  set NIWREC empty;
end // end NI0A001

// decide which map to display
Function NI0A050()
   /* ************************************************************/
   /* *   control process the application screen(s)             **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0A050"; /* set current process name*/
  ;
  ;
  sysVar.arrayIndex = 0;
  NLXREC.NLXSCRNX = 0;
  ;
  if (NLXREC.NLXCSCRN in NLXREC.NLXSNAME) /* if current-screen-name is*/
    NLXREC.NLXSCRNX = sysVar.arrayIndex; /* in the screen-array, then set*/
  end /* the screen-index*/
  ;
  set TA1REC empty;
  TA1REC.TA1MAP = NLXREC.NLXCSCRN; /* prepare for abend*/
  ;
  NLXREC.NLXBLDSC = "Y"; /* set build screen flag to 'yes'*/
  NLXREC.NLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
  NLXREC.NLXERRF = "N"; /* clear error flag*/
  ;
  if (NLXREC.NLXSCRNX == 1) /* if screen xx0xm100*/
    while (NLXREC.NLXEOSF == "N") /* show until user is done*/
      NI0A100();
    end
  else
    ;
    if (NLXREC.NLXSCRNX == 2) /* if screen xx0xm200*/
      while (NLXREC.NLXEOSF == "N") /* show until user is done*/
        NI0A200();
      end
    else
      TA1REC.TA1MAP = NLXREC.NLXCSCRN;
      TA1REC.TA1TBLKE = "UNKNOWN SCREEN NAME";
      TA1REC.TA1LOCAT[2] = NLXREC.NLXCSCRN;
      XPNL005(); /* abend*/
    end
  end
  ;
  ;
   /* at this point;*/
       /* if the end-of-application flag (NLXeoaf ) = 'n'*/
         /* the perform will return to the top of nl0%050...*/
       /* else*/
         /* the perform will auto return to nl0%000.*/
  ;
end // end NI0A050

// Converse map m100
Function NI0A100()
   /* ************************************************************/
   /* *    process screen ni0am100                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from ni0a050 until the end-of-screen   **/
   /* *     flag (nlxeosfl) is set to 'y'.                      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0A100";
  ;
  if (NLXREC.NLXBLDSC == "Y")
    NI0A101(); /* Perform i/o, load map fields*/
    NLXREC.NLXBLDSC = "N";
  end
  ;
   /* ***********************************************************/
  converse NI0AM100 ;
   /* ***********************************************************/
  ;
  VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";
  ;
  NI0A110(); /* validate pfkeys*/
   /* **********************************************************/
   /* If no pf key errors and screen has been changed, edit...*/
   /* **********************************************************/
  if (NLXREC.NLXERRF == "N")
    NI0A120(); /* edit entries and perform i/o*/
  end
   /* **********************************************/
   /* Edits complete, decide what to do next...*/
   /* **********************************************/
  if (NLXREC.NLXERRF == "N")
    NI0A130(); /* determine next action*/
  end
  ;
   /* at this point;*/
     /* if the end-of-screen flag (nlxeosfl) is 'n'*/
        /* we go back to top of process ni0a100.*/
     /* if the end-of-screen flag (nlxeosfl) is 'y'*/
        /* we return to ni0a050.*/
end // end NI0A100

// Build map ni0am100
Function NI0A101()
   /* **************************************/
   /* Build screen ni0am100*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NI0A101";
  ;
  set NI0AM100 empty; /* Discard all screen variables*/
  ;
  NI0AM100.XXXPRCNM = "NI0A100";
  NI0AM100.XXXMAPNM = "NI0AM100";
  NI0AM100.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  set NI0AM100.NIDIVCID cursor, normal;
  set NI0AM100.KUCCOID normal;
  set NI0AM100.KUMSTRID normal;
  set NI0AM100.OP1CUOID normal;
  ;
   /* ***************************************/
   /* If this is the first pass, don't load*/
   /* ***************************************/
  if (NI0AM100.NIDIVCID == 0
   && NI0AM100.KUCCOID == 0
   && NI0AM100.OP1CUOID == 0)
    return;
  end
  ;
  NI0AW01.NI0AWFCT = 0; /* set fetch-count to zero*/
  ;
end // end NI0A101

// Edit pfkeys
Function NI0A110()
   /* ************************************************/
   /* Check for fastpath data, program function keys*/
   /* ************************************************/
  ;
  NLXREC.NLXCPROC = "NI0A110";
  ;
   /* *************************/
   /* Check for fastpath data*/
   /* *************************/
  if (NI0AM100.CATOAP != " " /* if any fastpath data entered*/
   && converseVar.eventKey is enter)
    COMMAREA.CATOAP = NI0AM100.CATOAP;
    COMMAREA.CAITEM = NI0AM100.CAITEM;
    COMMAREA.CAUSERA = " ";
    XPNL002();
    return;
  end
   /* ***************************************/
   /* Check for valid program function keys*/
   /* ***************************************/
  ;
  if (converseVar.eventKey is enter)
     /* next sentence*/
  else
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa2
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      converseLib.validationFailed(36); /* pa1/2 cause loss of keyed data-rekey*/
                                   /* any change*/
       /* set alterable fields modified*/
      NLXREC.NLXERRF = "Y";
    else
      if (converseVar.eventKey is pf1)
        XSNLS01();
      else
        if (converseVar.eventKey is pf4)
          XSPF4();
        else
          if (converseVar.eventKey is pf3)
            COMMAREA.CAUSERA = " ";
            COMMAREA.CATOAP = "NL0A";
            XPNL002();
            return;
          else
            COMMAREA.CATOAP = " ";
            converseLib.validationFailed(2); /* INVALID FUNCTION KEY*/
            NLXREC.NLXERRF = "Y";
          end
        end
      end
    end
  end
end // end NI0A110

// Edit ni0am100 fields
Function NI0A120()
   /* ***********************/
   /* Edit ni0am100 entries*/
   /* ***********************/
  ;
  NLXREC.NLXCPROC = "NI0A120";
  ;
   /* ***************************************************/
   /* Clear any previous error indication on key fields*/
   /* ***************************************************/
  ;
  set NI0AM100.NIDIVCID cursor, normal;
  set NI0AM100.KUCCOID normal;
  set NI0AM100.KUMSTRID normal;
  set NI0AM100.OP1CUOID normal;
  ;
   /* *****************************************/
   /* If the key fields are empty, don't edit*/
   /* *****************************************/
  ;
  if (NI0AM100.NIDIVCID == 0 /* Invoice number is 0*/
   && NI0AM100.KUCCOID == 0  /* Customer number is 0*/
   && NI0AM100.OP1CUOID == 0 /* Order number is 0*/
   && NI0AM100.OP1NORID == 0) /* Sub-order number is 0*/
    converseLib.validationFailed(3); /* Please enter an option*/
    NLXREC.NLXERRF = "Y";
    return;
  end
  ;
   /* *****************************************/
   /* Has one of the key fields been changed?*/
   /* *****************************************/
  ;
  if (NI0AM100.NIDIVCID != 0) /* Invoice number given*/
    if (NI0AM100.KUCCOID != 0  /* Customer number given*/
     || NI0AM100.OP1CUOID != 0 /* or Order number given*/
     || NI0AM100.OP1NORID != 0)
      ;
      converseLib.validationFailed(11); /* Only one option allowed*/
      NLXREC.NLXERRF = "Y";
      return;
    else
      ;
       /* Invoice number alone given...*/
      ;
      NI0AS04(); /* Invoice Inquiry by Invoice logic*/
      ;
      return;
    end
  else /* Invoice number is 0*/
    ;
    if (NI0AM100.OP1CUOID == 0 /* Order number is 0*/
     && NI0AM100.OP1NORID == 0) /* Sub-order number is 0*/
      ;
       /* Customer number alone given...*/
      ;
      NI0AS05(); /* Invoice Inquiry by Customer logic*/
      ;
      return;
    else /* Order number non-0*/
      if (NI0AM100.KUCCOID != 0) /* Customer number non-0*/
        converseLib.validationFailed(11); /* Only one option allowed*/
        NLXREC.NLXERRF = "Y";
        return;
      else
        ;
         /* Order number alone given...*/
        ;
        NI0AS06();
                                   /* Invoice Inquiry by Order number logic*/
        ;
        return;
      end
    end
  end
end // end NI0A120

// determine next action
Function NI0A130()
   /* **************************************/
   /* Determine next action from 1st screen*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NI0A130";
  ;
  if (COMMAREA.CATOAP != " " /* if any fastpath data entered*/
   && converseVar.eventKey is enter)
    COMMAREA.CAUSERA = " ";
    NIWREC.NIWFRMAP = "NI0A";
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002();
  end
end // end NI0A130

// Converse map m200
Function NI0A200()
   /* ************************************************************/
   /* *    process screen ni0am200                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from ni0a050 until the end-of-screen   **/
   /* *     flag (nlxeosfl) is set to 'y'.                      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0A200";
  ;
  if (NLXREC.NLXBLDSC == "Y")
    NI0A201(); /* Perform i/o, load map fields*/
    NLXREC.NLXBLDSC = "N";
  end
  ;
   /* ***********************************************************/
  converse NI0AM200 ;
   /* ***********************************************************/
  ;
  VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";
  ;
  NI0A210(); /* validate pfkeys*/
   /* **********************************************************/
   /* If no pf key errors and screen has been changed, edit...*/
   /* **********************************************************/
  if (NLXREC.NLXERRF == "N"
   && NI0AW01.NI0AWSMS == "Y"
   && converseVar.eventKey not pf3)
    NI0A220(); /* edit entries and perform i/o*/
  end
   /* **********************************************/
   /* Edits complete, decide what to do next...*/
   /* **********************************************/
  if (NLXREC.NLXERRF == "N"
   && converseVar.eventKey not pf3)
    NI0A230(); /* determine next action*/
  end
  ;
   /* at this point;*/
     /* if the end-of-screen flag (nlxeosfl) is 'n'*/
        /* we go back to top of process ni0a200.*/
     /* if the end-of-screen flag (nlxeosfl) is 'y'*/
        /* we return to ni0a050.*/
end // end NI0A200

// Build map ni0am200
Function NI0A201()
   /* **************************************/
   /* Build screen ni0am100*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NI0A201";
  ;
  set NI0AM200 empty; /* Discard all screen variables*/
  ;
  NI0AM200.XXXPRCNM = "NI0A200";
  NI0AM200.XXXMAPNM = "NI0AM200";
  NI0AM200.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  NI0AM200.KUCCOID = NIWREC.KUCCOID;
  NI0AM200.KUMSTRID = NIWREC.KUMSTRID;
  NI0AM200.KUCCONM = NIWREC.KUCCONM;
  NI0AM200.XCTDESC = NIWREC.XCTDESC;
  ;
  ;
  NI0AW01.NI0AWFCT = 0; /* set fetch-count to zero*/
  NIWREC.NIWIAIDX = 1;
  ;
  if (NIWREC.NIWIAIVC[NIWIAIDX] != 0
   || NIWREC.NIWMSGNR != 0)
    NIWREC.NIWMSGNR = 0;
    ;
    /* RE-BUILD CUSTOMER SUB-MENU*/
    ;
    NI0AW01.NI0AWDT9 = NIWREC.NIWIVCDL;
    NI0AW01.NI0AWYER = NI0AW01.NI0AWYR9;
    NI0AW01.NI0AWMON = NI0AW01.NI0AWMN9;
    NI0AW01.NI0AWDAY = NI0AW01.NI0AWDY9;
    NI0AM200.NI0AMIDL = NI0AW01.NI0AWDAT;
    ;
    NI0AW01.NI0AWDT9 = NIWREC.NIWIVCDH;
    NI0AW01.NI0AWYER = NI0AW01.NI0AWYR9;
    NI0AW01.NI0AWMON = NI0AW01.NI0AWMN9;
    NI0AW01.NI0AWDAY = NI0AW01.NI0AWDY9;
    NI0AM200.NI0AMIDH = NI0AW01.NI0AWDAT;
    ;
    if (NIWREC.OP1CUNDT != 0)
      NI0AW01.NI0AWDT9 = NIWREC.OP1CUNDT;
      NI0AW01.NI0AWYER = NI0AW01.NI0AWYR9;
      NI0AW01.NI0AWMON = NI0AW01.NI0AWMN9;
      NI0AW01.NI0AWDAY = NI0AW01.NI0AWDY9;
      NI0AM200.NI0AMNDL = NI0AW01.NI0AWDAT;
    end
    ;
    if (NIWREC.NIWCUNDT != 0)
      NI0AW01.NI0AWDT9 = NIWREC.NIWCUNDT;
      NI0AW01.NI0AWYER = NI0AW01.NI0AWYR9;
      NI0AW01.NI0AWMON = NI0AW01.NI0AWMN9;
      NI0AW01.NI0AWDAY = NI0AW01.NI0AWDY9;
      NI0AM200.NI0AMNDH = NI0AW01.NI0AWDAT;
    end
    ;
    if (NIWREC.NIWPDTL != 0)
      NI0AW01.NI0AWDT9 = NIWREC.NIWPDTL;
      NI0AW01.NI0AWPMO = NI0AW01.NI0AWMN9;
      NI0AW01.NI0AWPYR = NI0AW01.NI0AWDY9;
      NI0AM200.NI0AMPDL = NI0AW01.NI0AWPMY;
    end
    ;
    if (NIWREC.NIWPDTH != 0)
      NI0AW01.NI0AWDT9 = NIWREC.NIWPDTH;
      NI0AW01.NI0AWPMO = NI0AW01.NI0AWMN9;
      NI0AW01.NI0AWPYR = NI0AW01.NI0AWDY9;
      NI0AM200.NI0AMPDH = NI0AW01.NI0AWPMY;
    end
    ;
    NI0AM200.OP1CUPO = NIWREC.OP1CUPO;
    NI0AM200.XGPCD = NIWREC.XGPCD;
    NI0AM200.XOBCD = NIWREC.XOBCD;
    NI0AM200.XOCCD = NIWREC.XOCCD;
    NI0AM200.ZPSCD = NIWREC.ZPSCD;
    NI0AM200.GLAGRP = NIWREC.NIWGLACC;
    NI0AM200.ZDTCD = NIWREC.ZDTCD;
    NI0AM200.SY1STNBR = NIWREC.SY1STNBR;
    NI0AM200.SY2CLRID = NIWREC.SY2CLRID;
    NI0AM200.XDMCD = NIWREC.XDMCD;
    NI0AM200.XQACD = NIWREC.XQACD;
  end
end // end NI0A201

// Edit pfkeys
Function NI0A210()
   /* ************************************************/
   /* Check for fastpath data, program function keys*/
   /* ************************************************/
  ;
  NLXREC.NLXCPROC = "NI0A210";
  ;
  NI0AW01.NI0AWSMS = "N";
  ;
  if (NI0AM200 is modified
   || NIWREC.NIWFRMAP == "NI0B")
    NI0AW01.NI0AWSMS = "Y";
  end
  ;
   /* *************************/
   /* Check for fastpath data*/
   /* *************************/
  if (NI0AM200.CATOAP != " " /* if any fastpath data entered*/
   && converseVar.eventKey is enter)
    COMMAREA.CATOAP = NI0AM200.CATOAP;
    COMMAREA.CAITEM = NI0AM200.CAITEM;
    COMMAREA.CAUSERA = " ";
    XPNL002();
    return;
  end
   /* ***************************************/
   /* Check for valid program function keys*/
   /* ***************************************/
  ;
  if (converseVar.eventKey is enter)
     /* next sentence*/
  else
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa2
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      converseLib.validationFailed(36); /* pa1/2 cause loss of keyed data-rekey*/
                                   /* any change*/
       /* set alterable fields modified*/
      NLXREC.NLXERRF = "Y";
    else
      if (converseVar.eventKey is pf1)
        XSNLS01();
      else
        if (converseVar.eventKey is pf3)
          set NIWREC empty;
          NLXREC.NLXEOSF = "Y";
          NLXREC.NLXCSCRN = "NI0AM100";
          return;
        else
          if (converseVar.eventKey is pf4)
            XSPF4();
          else
            if (converseVar.eventKey is pf20)
              COMMAREA.CATOAP = "NI0J";
              XPNL002();
              return;
            else
              COMMAREA.CATOAP = " ";
              converseLib.validationFailed(2); /* INVALID FUNCTION KEY*/
              NLXREC.NLXERRF = "Y";
            end
          end
        end
      end
    end
  end
end // end NI0A210

// Edit ni0am200 fields
Function NI0A220()
   /* ***********************/
   /* Edit ni0am200 entries*/
   /* ***********************/
  ;
  NLXREC.NLXCPROC = "NI0A220";
  ;
   /* **************************************/
   /* Edit ni0am200 entries and perform i/o*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NI0A220";
  set NI0AM200.NI0AMIDL cursor;
  ;
  NI0AW01.NI0AWPUW = "N"; /* Set 'pop-up-window' switch off*/
  NI0AW01.NI0AWIER = "N"; /* Set Invoice dates error off*/
  NI0AW01.NI0AWNER = "N"; /* Set Needed dates error flag off*/
  NI0AW01.NI0AWPER = "N"; /* Set Posting dates error flag off*/
  ;
   /* ************************************************************/
   /* Request for pop-up window for general product class codes?*/
   /* ************************************************************/
  if (NI0AM200.XGPCD == "?")
    NI0AW01.NI0AWPUW = "Y"; /* Set 'pop-up window' switch on*/
    XPXX001();
    while (XX0XW02.XX0XWEND == "N")
      XPXGP01();
    end
    if (XX0XW02.XX0XWPIX != 0)
      NI0AM200.XGPCD = XGPTBL.XGPCD[XX0XWPIX];
    end
    set NI0AM200.XGPCD cursor;
  end
   /* ******************************************/
   /* Request for pop-up window on Order Types?*/
   /* ******************************************/
  if (NI0AM200.XOBCD == "?")
    NI0AW01.NI0AWPUW = "Y"; /* Set 'pop-up window' switch on*/
    XPXX001();
    while (XX0XW02.XX0XWEND == "N")
      XPXOB01();
    end
    if (XX0XW02.XX0XWPIX != 0)
      NI0AM200.XOBCD = XOBTBL.XOBCD[XX0XWPIX];
    end
    set NI0AM200.XOBCD cursor;
  end
   /* ********************************************/
   /* Request for pop-up window on Order Classes?*/
   /* ********************************************/
  if (NI0AM200.XOCCD == "?")
    NI0AW01.NI0AWPUW = "Y"; /* Set 'pop-up window' switch on*/
    XPXX001();
    while (XX0XW02.XX0XWEND == "N")
      XPXOC01();
    end
    if (XX0XW02.XX0XWPIX != 0)
      NI0AM200.XOCCD = XOCTBL.XOCCD[XX0XWPIX];
    end
    set NI0AM200.XOCCD cursor;
  end
  ;
   /* *******************************************/
   /* Request for pop-up window on Source Codes?*/
   /* *******************************************/
  if (NI0AM200.ZPSCD == "?")
    NI0AW01.NI0AWPUW = "Y"; /* Set 'pop-up window' switch on*/
    XPXX001();
    while (XX0XW02.XX0XWEND == "N")
      XPZPS01();
    end
    if (XX0XW02.XX0XWPIX != 0)
      NI0AM200.ZPSCD = ZPSTBL.ZPSCD[XX0XWPIX];
    end
    set NI0AM200.ZPSCD cursor;
  end
  ;
   /* ********************************************/
   /* Request for pop-up window on Document Type?*/
   /* ********************************************/
  if (NI0AM200.ZDTCD == "?")
    NI0AW01.NI0AWPUW = "Y"; /* Set 'pop-up window' switch on*/
    XPXX001();
    while (XX0XW02.XX0XWEND == "N")
      XPZDT01();
    end
    if (XX0XW02.XX0XWPIX != 0)
      NI0AM200.ZDTCD = ZDTTBL.ZDTCD[XX0XWPIX];
    end
    set NI0AM200.ZDTCD cursor;
  end
  ;
   /* *********************************************/
   /* Request for pop-up window on Dimension Code?*/
   /* *********************************************/
  if (NI0AM200.XDMCD == "?")
    NI0AW01.NI0AWPUW = "Y"; /* Set 'pop-up window' switch on*/
    XPXX001();
    while (XX0XW02.XX0XWEND == "N")
      XPXDM01();
    end
    if (XX0XW02.XX0XWPIX != 0)
      NI0AM200.XDMCD = XDMTBL.XDMCD[XX0XWPIX];
    end
    set NI0AM200.XDMCD cursor;
  end
  ;
   /* ********************************************/
   /* Request for pop-up window on Quality Codes?*/
   /* ********************************************/
  if (NI0AM200.XQACD == "?")
    NI0AW01.NI0AWPUW = "Y"; /* Set 'pop-up window' switch on*/
    XPXX001();
    while (XX0XW02.XX0XWEND == "N")
      XPXQA01();
    end
    if (XX0XW02.XX0XWPIX != 0)
      NI0AM200.XQACD = XQATBL.XQACD[XX0XWPIX];
    end
    set NI0AM200.XQACD cursor;
  end
  ;
  if (NI0AW01.NI0AWPUW == "Y") /* If 'pop-up-window' switch is on*/
    converseLib.clearScreen();
    
  end
   /* ******************************/
   /* Edit fields in reverse order*/
   /* ******************************/
  ;
   /* ******************************/
   /* Edit Quality Assurance Code*/
   /* ******************************/
  ;
  if (NI0AM200.XQACD != " ")
    if (NI0AM200.XQACD in XQATBL.XQACD
     && NI0AM200.XQACD != "99")
      set NI0AM200.XQACD normal;
      NIWREC.XQACD = NI0AM200.XQACD;
    else
      converseLib.validationFailed(15); /* Invalid Quality code*/
      set NI0AM200.XQACD cursor, modified, bold;
      NLXREC.NLXERRF = "Y";
    end
  else
    set NI0AM200.XQACD normal;
    NIWREC.XQACD = NI0AM200.XQACD;
  end
  ;
   /* *********************/
   /* Edit Dimension Code*/
   /* *********************/
  ;
  if (NI0AM200.XDMCD != " ")
    if (NI0AM200.XDMCD in XDMTBL.XDMCD
     && NI0AM200.XDMCD != "99")
      set NI0AM200.XDMCD normal;
      NIWREC.XDMCD = NI0AM200.XDMCD;
    else
      converseLib.validationFailed(16); /* Invalid Dimension code*/
      set NI0AM200.XDMCD cursor, modified, bold;
      NLXREC.NLXERRF = "Y";
    end
  else
    set NI0AM200.XDMCD normal;
    NIWREC.XDMCD = NI0AM200.XDMCD;
  end
  ;
   /* *********************/
   /* Edit Style Number*/
   /* *********************/
  ;
  NI0AW01.NI0AWCDM = "N"; /* Set color/dim match flag off*/
  ;
  if (NI0AM200.SY1STNBR != " ") /* Style number present*/
    if (NI0AM200.XGPCD != " ") /* General product code present*/
      ;
      NI0AW01.NI0AWCOS = "Y"; /* Set 'cursor open' on*/
      ;
      SY2REC.SY1STNBR = NI0AM200.SY1STNBR; /* Style number*/
      SY2REC.XGPCD = NI0AM200.XGPCD; /* General product code*/
      NI0AS10(); /* open cursor - sy2rec*/
      ;
      while (NI0AW01.NI0AWCOS == "Y") /* While 'cursor open' on*/
        if (NI0AW01.NI0AWCDM == "N") /* Color/dim don't match*/
          ;
          NI0AS11(); /* Load cursor - sy2rec*/
          ;
          if (NI0AW01.NI0AWCOS == "Y") /* Cursor still open*/
            ;
            if (NI0AM200.SY2CLRID != " " /* Color given*/
             && NI0AM200.XDMCD != " ")   /* Dimension given*/
              ;
              if (SY2REC.SY2CLRID == NI0AM200.SY2CLRID
               && SY2REC.XDMCD == NI0AM200.XDMCD)
                NIWREC.SY1STNBR = NI0AM200.SY1STNBR;
                NIWREC.SY2CLRID = NI0AM200.SY2CLRID;
                NIWREC.XDMCD = NI0AM200.XDMCD;
                NI0AW01.NI0AWCDM = "Y"; /* Set color/dim*/
                set NI0AM200.SY1STNBR normal;
                ;
                NI0AS12(); /* close cursor*/
                ;
              end
            else /* Color/dim not given*/
              ;
              if (SQLCA.VAGen_SQLCODE != 0) /* Style record not found*/
                set NI0AM200.SY1STNBR cursor, modified, bold;
                converseLib.validationFailed(27); /* Invalid style number*/
                NLXREC.NLXERRF = "Y";
              else
                ;
                NIWREC.SY1STNBR = NI0AM200.SY1STNBR;
                NIWREC.SY2CLRID = NI0AM200.SY2CLRID;
                NIWREC.XDMCD = NI0AM200.XDMCD;
                NI0AS12(); /* close cursor*/
                ;
              end
            end
          else /* Cursor closed after read*/
            if (NI0AW01.NI0AWCDM == "N") /* No color/dim match*/
              converseLib.validationFailed(19); /* Invalid color/dim combination*/
              NLXREC.NLXERRF = "Y";
              set NI0AM200.SY1STNBR cursor, modified, bold;
            end
          end
        end
      end
    else /* Blank GPC given...*/
      set NI0AM200.XGPCD cursor, modified, bold;
      converseLib.validationFailed(18); /* GPC required for style search*/
      NLXREC.NLXERRF = "Y";
    end
  else /* Blank Style given*/
    if (NI0AM200.SY2CLRID == " ")
      set NI0AM200.SY1STNBR normal;
      NIWREC.SY1STNBR = NI0AM200.SY1STNBR;
    else
      converseLib.validationFailed(27); /* Invalid style number*/
      NLXREC.NLXERRF = "Y";
      set NI0AM200.SY1STNBR cursor, modified, bold;
    end
  end
   /* *********************/
   /* Edit Document Type*/
   /* *********************/
  if (NI0AM200.ZDTCD != " ")
    if (NI0AM200.ZDTCD in ZDTTBL.ZDTCD
     && NI0AM200.ZDTCD != "99")
      set NI0AM200.ZDTCD normal;
      NIWREC.ZDTCD = NI0AM200.ZDTCD;
    else
      converseLib.validationFailed(20); /* Invalid Document type*/
      set NI0AM200.ZDTCD cursor, modified, bold;
      NLXREC.NLXERRF = "Y";
    end
  else
    set NI0AM200.ZDTCD normal;
    NIWREC.ZDTCD = NI0AM200.ZDTCD;
  end
  ;
   /* *********************/
   /* Edit G/L Code*/
   /* *********************/
  if (NI0AM200.GLAGRP != " ")
    NI0AW01.NI0AWGLA = NI0AM200.GLAGRP; /* Build key*/
    VNLGLA01.GLAENT = NI0AW01.NI0AWENT;
    VNLGLA01.GLARCID = NI0AW01.NI0AWRID;
    VNLGLA01.GLANTAC = NI0AW01.NI0AWTAC;
    VNLGLA01.GLASUB = NI0AW01.NI0AWSBA;
    VNLGLA01.GLAPRJ = NI0AW01.NI0AWPRJ;
    ;
    NI0AS14(); /* Select unique - NIJREC*/
    ;
    if (SQLCA.VAGen_SQLCODE != 0)
      set NI0AM200.GLAGRP cursor, modified, bold;
      converseLib.validationFailed(71); /* Invalid G/L Code*/
      NLXREC.NLXERRF = "Y";
    else
      set NI0AM200.GLAGRP normal;
      NIWREC.NIWGLACC = NI0AM200.GLAGRP;
    end
  else
    set NI0AM200.GLAGRP normal;
    NIWREC.NIWGLACC = NI0AM200.GLAGRP;
  end
   /* **************************/
   /* Edit Product Source code*/
   /* **************************/
  if (NI0AM200.ZPSCD != " ")
    if (NI0AM200.ZPSCD in ZPSTBL.ZPSCD
     && NI0AM200.ZPSCD != "99")
      set NI0AM200.ZPSCD normal;
      NIWREC.ZPSCD = NI0AM200.ZPSCD;
    else
      converseLib.validationFailed(21); /* Invalid Product source code*/
      set NI0AM200.ZPSCD cursor, modified, bold;
      NLXREC.NLXERRF = "Y";
    end
  else
    set NI0AM200.ZPSCD normal;
    NIWREC.ZPSCD = NI0AM200.ZPSCD;
  end
  ;
   /* **************************/
   /* Edit Order Class code*/
   /* **************************/
  if (NI0AM200.XOCCD != " ")
    if (NI0AM200.XOCCD in XOCTBL.XOCCD
     && NI0AM200.XOCCD != "99")
      set NI0AM200.XOCCD normal;
      NIWREC.XOCCD = NI0AM200.XOCCD;
    else
      converseLib.validationFailed(22); /* Invalid Order Class code*/
      set NI0AM200.XOCCD cursor, modified, bold;
      NLXREC.NLXERRF = "Y";
    end
  else
    set NI0AM200.XOCCD normal;
    NIWREC.XOCCD = NI0AM200.XOCCD;
  end
  ;
   /* **********************/
   /* Edit Order Type code*/
   /* **********************/
  if (NI0AM200.XOBCD != " ")
    if (NI0AM200.XOBCD in XOBTBL.XOBCD
     && NI0AM200.XOBCD != "99")
      set NI0AM200.XOBCD normal;
      NIWREC.XOBCD = NI0AM200.XOBCD;
    else
      converseLib.validationFailed(23); /* Invalid Order Type code*/
      set NI0AM200.XOBCD cursor, modified, bold;
      NLXREC.NLXERRF = "Y";
    end
  else
    set NI0AM200.XOBCD normal;
    NIWREC.XOBCD = NI0AM200.XOBCD;
  end
  ;
   /* ***************************/
   /* Edit General Product Code*/
   /* ***************************/
  if (NI0AM200.XGPCD != " ")
    if (NI0AM200.XGPCD in XGPTBL.XGPCD
     && NI0AM200.XGPCD != "99")
      set NI0AM200.XGPCD normal;
      NIWREC.XGPCD = NI0AM200.XGPCD;
    else
      converseLib.validationFailed(17); /* Invalid GPC code*/
      set NI0AM200.XGPCD cursor, modified, bold;
      NLXREC.NLXERRF = "Y";
    end
  else
    set NI0AM200.XGPCD normal;
    NIWREC.XGPCD = NI0AM200.XGPCD;
  end
   /* ************************************/
   /* No edit on Customer Purchase Order*/
   /* ************************************/
  if (NI0AM200.OP1CUPO != " ")
    NIWREC.OP1CUPO = NI0AM200.OP1CUPO;
  else
    NIWREC.OP1CUPO = " ";
  end
  ;
   /* *************************************/
   /* Edit Posting Month 'To' if present*/
   /* *************************************/
  if (NI0AM200.NI0AMPDH != 0)
    NI0AW01.NI0AWPMY = NI0AM200.NI0AMPDH;
    NI0AW01.NI0AWMON = NI0AW01.NI0AWPMO;
    NI0AW01.NI0AWYER = NI0AW01.NI0AWPYR;
    NI0AW01.NI0AWDAY = "01";
    NLXREC.NLXVALDT = "Y";
    NLXREC.XXXED8C = NI0AW01.NI0AWDAT;
    XPNL001();
    if (NLXREC.NLXVALDT == "N")
      set NI0AM200.NI0AMPDH cursor, modified, bold;
      NI0AW01.NI0AWPER = "Y";
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(5); /* Invalid date*/
    else
      NIWREC.NIWPDTH = NI0AM200.NI0AMPDH;
      set NI0AM200.NI0AMPDH normal;
    end
  else
    NIWREC.NIWPDTH = NI0AM200.NI0AMPDH;
    set NI0AM200.NI0AMPDH normal;
  end
  ;
   /* *************************************/
   /* Edit Posting Month 'From' if present*/
   /* *************************************/
  if (NI0AM200.NI0AMPDL != 0)
    NI0AW01.NI0AWPMY = NI0AM200.NI0AMPDL;
    NI0AW01.NI0AWMON = NI0AW01.NI0AWPMO;
    NI0AW01.NI0AWYER = NI0AW01.NI0AWPYR;
    NI0AW01.NI0AWDAY = "01";
    NLXREC.NLXVALDT = "Y";
    NLXREC.XXXED8C = NI0AW01.NI0AWDAT;
    XPNL001();
    if (NLXREC.NLXVALDT == "N")
      set NI0AM200.NI0AMPDL cursor, modified, bold;
      NI0AW01.NI0AWPER = "Y";
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(5); /* Invalid date*/
    else
      NIWREC.NIWPDTL = NI0AM200.NI0AMPDL;
      set NI0AM200.NI0AMPDL normal;
    end
  else
    NIWREC.NIWPDTL = NI0AM200.NI0AMPDL;
    set NI0AM200.NI0AMPDL normal;
  end
   /* ****************************************/
   /* Validate G/L posting month date ranges*/
   /* ****************************************/
  if (NI0AM200.NI0AMPDH != 0
   && NI0AW01.NI0AWPER != "Y") /* No previous error*/
    /*  */
    /* ------------- Y2K OUT BEGIN ----------*/
    /*  */
    /* IF NIWREC.NIWPDTL GT NIWREC.NIWPDTH;*/
    /*  */
    /* ------------- Y2K OUT END ------------*/
    /*  */
    /*  */
    /* ------------- Y2K IN BEGIN -----------*/
    /*  */
    NI0AW01.NI0AWPMY = NIWREC.NIWPDTL;
    NI0AW01.NI0AWCMP-MM1 = NI0AW01.NI0AWPMO;
    NI0AW01.NI0AWCMP-YY1 = NI0AW01.NI0AWPYR;
    if (NI0AW01.NI0AWCMP-YY1 > 60)
      NI0AW01.NI0AWCMP-CC1 = 19;
    else
      NI0AW01.NI0AWCMP-CC1 = 20;
    end
    NI0AW01.NI0AWPMY = NIWREC.NIWPDTH;
    NI0AW01.NI0AWCMP-MM2 = NI0AW01.NI0AWPMO;
    NI0AW01.NI0AWCMP-YY2 = NI0AW01.NI0AWPYR;
    if (NI0AW01.NI0AWCMP-YY2 > 60)
      NI0AW01.NI0AWCMP-CC2 = 19;
    else
      NI0AW01.NI0AWCMP-CC2 = 20;
    end
    if (NI0AW01.NI0AWCMP-CCYYMM1 > NI0AW01.NI0AWCMP-CCYYMM2)
   /*  */
   /* ------------- Y2K IN  END ------------*/
   /*  */
      set NI0AM200.NI0AMPDL cursor, modified, bold;
      NLXREC.NLXERRF = "Y";
      NI0AW01.NI0AWPER = "Y";
      converseLib.validationFailed(25); /* Invalid logical date seq*/
    else
      set NI0AM200.NI0AMPDL normal;
    end
  end
  ;
   /* ******************************/
   /* Validate Posting month range*/
   /* ******************************/
  ;
  if (NI0AM200.NI0AMPDL != 0
   && NI0AM200.NI0AMPDH != 0
   && NI0AW01.NI0AWPER != "Y")
    ;
    NI0AW01.NI0AWPMY = NI0AM200.NI0AMPDL;
    NI0AW01.NI0AWMN9 = NI0AW01.NI0AWPMO;
    NI0AW01.NI0AWYR9 = NI0AW01.NI0AWPYR;
    NI0AW01.NI0AWDY9 = "01";
    ;
    /*  */
    /* ------------- Y2K OUT BEGIN ----------*/
    /*  */
    /* MOVE '019' TO NI0AW01.NI0AWCEN;*/
    /*  */
    /* ------------- Y2K OUT END ------------*/
    /*  */
    /*  */
    /* ------------- Y2K IN BEGIN ---------*/
    /*  */
    if (NI0AW01.NI0AWPYR > 60)
      NI0AW01.NI0AWCEN = "019";
    else
      NI0AW01.NI0AWCEN = "020";
    end
    /*  */
    /* ------------- Y2K IN END -----------*/
    /*  */
    TA2REC.TA2DBDFN = NI0AW01.NI0AWDT9;
    ;
    NI0AW01.NI0AWPMY = NI0AM200.NI0AMPDH;
    NI0AW01.NI0AWMN9 = NI0AW01.NI0AWPMO;
    NI0AW01.NI0AWYR9 = NI0AW01.NI0AWPYR;
    NI0AW01.NI0AWDY9 = "01";
    ;
    /*  */
    /* ------------- Y2K OUT BEGIN --------*/
    /*  */
    /* MOVE '019' TO NI0AW01.NI0AWCEN;*/
    /*  */
    /* ------------- Y2K OUT END  ---------*/
    /*  */
    /*  */
    /* ------------- Y2K IN BEGIN ---------*/
    /*  */
    if (NI0AW01.NI0AWPYR > 60)
      NI0AW01.NI0AWCEN = "019";
    else
      NI0AW01.NI0AWCEN = "020";
    end
    /*  */
    /* ------------- Y2K IN END -----------*/
    /*  */
    TA2REC.TA2DBDTN = NI0AW01.NI0AWDT9;
    ;
    TA2REC.TA2DTOPT = "DAYSDIFF";
    TA2REC.TA2GRTYP = "A";
    TA2REC.TA2DYAOD = 0;
    ;
    call "TA0040" (TA2REC) {isNoRefresh = yes};
    ;
    if (TA2REC.TA2DBDDN > 92)
      set NI0AM200.NI0AMPDL cursor, modified, bold;
      converseLib.validationFailed(26);
      NLXREC.NLXERRF = "Y";
    else
      set NI0AM200.NI0AMPDL normal;
    end
  end
   /* ***********************************/
   /* Edit 'To' Need Date if present*/
   /* ***********************************/
  if (NI0AM200.NI0AMNDH != 0)
    NLXREC.NLXVALDT = "Y";
    NLXREC.XXXED8C = NI0AM200.NI0AMNDH;
    XPNL001();
    if (NLXREC.NLXVALDT == "N")
      set NI0AM200.NI0AMNDH cursor, modified, bold;
      NI0AW01.NI0AWNER = "Y";
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(5); /* Invalid date*/
    else
      NIWREC.NIWCUNDT = NLXREC.XXXWCYMD;
      set NI0AM200.NI0AMNDH normal;
    end
  else
    NIWREC.NIWCUNDT = NI0AM200.NI0AMNDH;
    set NI0AM200.NI0AMNDH normal;
  end
   /* ************************************/
   /* Edit 'From' Need date if present*/
   /* ************************************/
  if (NI0AM200.NI0AMNDL != 0)
    NLXREC.NLXVALDT = "Y";
    NLXREC.XXXED8C = NI0AM200.NI0AMNDL;
    XPNL001();
    if (NLXREC.NLXVALDT == "N")
      set NI0AM200.NI0AMNDL cursor, modified, bold;
      NI0AW01.NI0AWNER = "Y";
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(5); /* Invalid date*/
    else
      set NI0AM200.NI0AMNDL normal;
      NIWREC.OP1CUNDT = NLXREC.XXXWCYMD;
    end
  else
    set NI0AM200.NI0AMNDL normal;
    NIWREC.OP1CUNDT = NI0AM200.NI0AMNDL;
  end
   /* ****************************/
   /* Validate Need date range*/
   /* ****************************/
  if (NI0AM200.NI0AMNDH != 0
   && NI0AW01.NI0AWNER != "Y") /* No previous error*/
    if (NIWREC.OP1CUNDT > NIWREC.NIWCUNDT)
      set NI0AM200.NI0AMNDL cursor, modified, bold;
      NI0AW01.NI0AWNER = "Y";
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(25); /* Invalid logical date seq*/
    else
      set NI0AM200.NI0AMNDL normal;
    end
  end
  ;
   /* *****************************/
   /* Validate Need date range*/
   /* *****************************/
  ;
  if (NI0AM200.NI0AMNDL != 0
   && NI0AM200.NI0AMNDH != 0
   && NI0AW01.NI0AWNER != "Y") /* No previous error*/
    NI0AW01.NI0AWDAT = NI0AM200.NI0AMNDL;
    NI0AW01.NI0AWMN9 = NI0AW01.NI0AWMON;
    NI0AW01.NI0AWDY9 = NI0AW01.NI0AWDAY;
    NI0AW01.NI0AWYR9 = NI0AW01.NI0AWYER;
    /*  */
    /* ------------- Y2K OUT BEGIN --------*/
    /*  */
    /* MOVE '019' TO NI0AW01.NI0AWCEN;*/
    /*  */
    /* ------------- Y2K OUT END  ---------*/
    /*  */
    /*  */
    /* ------------- Y2K IN BEGIN ---------*/
    /*  */
    if (NI0AW01.NI0AWYER > 60)
      NI0AW01.NI0AWCEN = "019";
    else
      NI0AW01.NI0AWCEN = "020";
    end
    /*  */
    /* ------------- Y2K IN END -----------*/
    /*  */
    TA2REC.TA2DBDFN = NI0AW01.NI0AWDT9;
    ;
    NI0AW01.NI0AWDAT = NI0AM200.NI0AMNDH;
    NI0AW01.NI0AWMN9 = NI0AW01.NI0AWMON;
    NI0AW01.NI0AWDY9 = NI0AW01.NI0AWDAY;
    NI0AW01.NI0AWYR9 = NI0AW01.NI0AWYER;
    /*  */
    /* ------------- Y2K OUT BEGIN --------*/
    /*  */
    /* MOVE '019' TO NI0AW01.NI0AWCEN;*/
    /*  */
    /* ------------- Y2K OUT END  ---------*/
    /*  */
    /*  */
    /* ------------- Y2K IN BEGIN ---------*/
    /*  */
    if (NI0AW01.NI0AWYER > 60)
      NI0AW01.NI0AWCEN = "019";
    else
      NI0AW01.NI0AWCEN = "020";
    end
    /*  */
    /* ------------- Y2K IN END -----------*/
    /*  */
    TA2REC.TA2DBDTN = NI0AW01.NI0AWDT9;
    ;
    TA2REC.TA2DTOPT = "DAYSDIFF";
    TA2REC.TA2GRTYP = "A";
    TA2REC.TA2DYAOD = 0;
    ;
    call "TA0040" (TA2REC) {isNoRefresh = yes};
    ;
    if (TA2REC.TA2DBDDN > 92)
      set NI0AM200.NI0AMNDL cursor, modified, bold;
      converseLib.validationFailed(26);
      NLXREC.NLXERRF = "Y";
    else
      set NI0AM200.NI0AMNDL normal;
    end
  end
   /* ************************************/
   /* Edit Invoice Date for misc. document type.*/
   /* An invoice date of 0 will select INACTIVE*/
   /* misc. invoices in NI0B.*/
   /* ************************************/
  if (NIWREC.ZDTCD == "MI"
   && NI0AM200.NI0AMIDL == 0
   && NI0AM200.NI0AMIDH == 0)
    NIWREC.NIWIVCDL = NI0AM200.NI0AMIDL;
    NIWREC.NIWIVCDH = NI0AM200.NI0AMIDH;
    return;
  end
  ;
   /* ************************************/
   /* Edit 'To' Invoice Date if present*/
   /* ************************************/
  if (NI0AM200.NI0AMIDH != 0)
    NLXREC.NLXVALDT = "Y";
    NLXREC.XXXED8C = NI0AM200.NI0AMIDH;
    XPNL001();
    if (NLXREC.NLXVALDT == "N")
      set NI0AM200.NI0AMIDH cursor, modified, bold;
      NI0AW01.NI0AWIER = "Y";
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(5); /* Invalid date*/
    else
      set NI0AM200.NI0AMIDH normal;
      NIWREC.NIWIVCDH = NLXREC.XXXWCYMD;
    end
  end
  ;
   /* ************************************/
   /* Edit 'From' Invoice Date if present*/
   /* ************************************/
  if (NI0AM200.NI0AMIDL != 0)
    NLXREC.NLXVALDT = "Y";
    NLXREC.XXXED8C = NI0AM200.NI0AMIDL;
    XPNL001();
    if (NLXREC.NLXVALDT == "N")
      set NI0AM200.NI0AMIDL cursor, modified, bold;
      NI0AW01.NI0AWIER = "Y";
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(5); /* Invalid date*/
    else
      NIWREC.NIWIVCDL = NLXREC.XXXWCYMD;
      set NI0AM200.NI0AMIDL normal;
      if (NI0AM200.NI0AMIDH == 0)
        NI0AM200.NI0AMIDH = NI0AM200.NI0AMIDL;
        set NI0AM200.NI0AMIDH normal;
        NIWREC.NIWIVCDH = NLXREC.XXXWCYMD;
      end
    end
  else
    set NI0AM200.NI0AMIDL cursor, modified, bold;
    NLXREC.NLXERRF = "Y";
    converseLib.validationFailed(24); /* Date range required*/
  end
   /* ********************************/
   /* Validate Invoice date sequence*/
   /* ********************************/
  if (NI0AM200.NI0AMIDH != 0
   && NI0AW01.NI0AWIER != "Y") /* No previous error*/
    if (NIWREC.NIWIVCDL > NIWREC.NIWIVCDH)
      set NI0AM200.NI0AMIDL cursor, modified, bold;
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(25); /* Invalid logical date seq*/
    else
      set NI0AM200.NI0AMIDL normal;
    end
  end
  ;
   /* *****************************/
   /* Validate Invoice date range*/
   /* *****************************/
  ;
  if (NI0AM200.NI0AMIDL != 0
   && NI0AM200.NI0AMIDH != 0
   && NI0AW01.NI0AWIER != "Y") /* No previous error*/
    NI0AW01.NI0AWDAT = NI0AM200.NI0AMIDL;
    NI0AW01.NI0AWMN9 = NI0AW01.NI0AWMON;
    NI0AW01.NI0AWDY9 = NI0AW01.NI0AWDAY;
    NI0AW01.NI0AWYR9 = NI0AW01.NI0AWYER;
    /*  */
    /* ------------- Y2K OUT BEGIN ---------*/
    /*  */
    /* MOVE '019' TO NI0AW01.NI0AWCEN;*/
    /*  */
    /* ------------- Y2K OUT END  ---------*/
    /*  */
    /*  */
    /* ------------- Y2K IN BEGIN ---------*/
    /*  */
    if (NI0AW01.NI0AWYER > 60)
      NI0AW01.NI0AWCEN = "019";
    else
      NI0AW01.NI0AWCEN = "020";
    end
    /*  */
    /* ------------- Y2K IN END -----------*/
    /*  */
    TA2REC.TA2DBDFN = NI0AW01.NI0AWDT9;
    ;
    NI0AW01.NI0AWDAT = NI0AM200.NI0AMIDH;
    NI0AW01.NI0AWMN9 = NI0AW01.NI0AWMON;
    NI0AW01.NI0AWDY9 = NI0AW01.NI0AWDAY;
    NI0AW01.NI0AWYR9 = NI0AW01.NI0AWYER;
    /*  */
    /* ------------- Y2K OUT BEGIN ---------*/
    /*  */
    /* MOVE '019' TO NI0AW01.NI0AWCEN;*/
    /*  */
    /* ------------- Y2K OUT END  ---------*/
    /*  */
    /*  */
    /* ------------- Y2K IN BEGIN ---------*/
    /*  */
    if (NI0AW01.NI0AWYER > 60)
      NI0AW01.NI0AWCEN = "019";
    else
      NI0AW01.NI0AWCEN = "020";
    end
    /*  */
    /* ------------- Y2K IN END -----------*/
    /*  */
    TA2REC.TA2DBDTN = NI0AW01.NI0AWDT9;
    ;
    TA2REC.TA2DTOPT = "DAYSDIFF";
    TA2REC.TA2GRTYP = "A";
    TA2REC.TA2DYAOD = 0;
    ;
    call "TA0040" (TA2REC) {isNoRefresh = yes};
    ;
    if (TA2REC.TA2DBDDN > 92)
      set NI0AM200.NI0AMIDL cursor, modified, bold;
      converseLib.validationFailed(26);
      NLXREC.NLXERRF = "Y";
    else
      set NI0AM200.NI0AMIDL normal;
    end
  end
end // end NI0A220

// determine next action
Function NI0A230()
   /* **************************************/
   /* Determine next action from 2nd screen*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NI0A230";
  ;
   /* ****************************************/
   /* If screen is modified, exit to NI0B...*/
   /* ****************************************/
  ;
  if (NI0AW01.NI0AWSMS == "Y")
    NIWREC.OP1CUOID = 0;
    NIWREC.OP1NORID = 0;
    COMMAREA.CAFROMAP = "NI0A";
    COMMAREA.CATOAP = "NI0B";
    NIWREC.NIWFRMAP = "NI0A";
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002();
  end
end // end NI0A230

// Lookup L/C Header
Function NI0AS02()
   /* ***********************/
   /* Lookup Invoice Number*/
   /* ***********************/
  ;
  NLXREC.NLXCPROC = "NI0AS02";
  ;
  NI0AS03(); /* Select unique - nidrec*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
     /* next sentence*/
  else
    NI0AM100.NIDIVCID = VNLIVX01.NIDIVCID;
  end
end // end NI0AS02

// Select Unique from NIDREC
Function NI0AS03()
   /* ************************/
   /* NIDREC - Select Unique*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NI0AS03";
  ;
  call "IO4460" ("S ", SQLCA, VNLIVX01) {isNoRefresh = yes, isExternal = yes}; /* Read Invoice*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4460 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VNLIVX01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NI0AS03

// Invoice Inquiry Menu logic
Function NI0AS04()
   /* ****************************/
   /* Invoice Inquiry Menu Logic*/
   /* ****************************/
  ;
  VNLIVX01.NIDIVCID = NI0AM100.NIDIVCID; /* Load key*/
  ;
  NI0AS03(); /* Select unique - nidrec*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
    NIWREC.NIWFRMAP = "NI0A"; /* Save appl name*/
    NIWREC.NIWIAIDX = 1; /* Set invoice array index*/
    NIWREC.NIWIAIVC[NIWIAIDX] = NI0AM100.NIDIVCID; /* Save invoice*/
    ;
    if (VNLIVX01.ZDTCD == "PI" /* If Product Invoice*/
     || VNLIVX01.ZDTCD == "MC") /* or Material Content stmt*/
      COMMAREA.CATOAP = "NI0C";
    else
      ;
      if (VNLIVX01.ZDTCD == "MI") /* If Miscellaneous Invoice*/
        COMMAREA.CATOAP = "NI0G";
      else
        set NI0AM100.NIDIVCID cursor, modified, bold;
        /* move ?? to ezemno*/
        NI0AM100.VAGen_EZEMSG = "DOC TYPE INVALID FOR INV INQ";
        NLXREC.NLXERRF = "Y";
      end
    end
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* If not found*/
      set NI0AM100.NIDIVCID cursor, modified, bold;
      converseLib.validationFailed(12); /* Invoice number nrf*/
      NLXREC.NLXERRF = "Y";
      return;
    end
  end
end // end NI0AS04

// Invoice Inquiry by Customer
Function NI0AS05()
   /* ***********************************/
   /* Invoice Inquiry by Customer logic*/
   /* ***********************************/
  ;
  KUCREC.KUCCOID = NI0AM100.KUCCOID; /* Load key*/
  ;
  NI0AS07(); /* Select unique - kucrec*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
    if (KUCREC.XAUCD == "31" /* and acct class is NIL*/
     || KUCREC.XAUCD == "32" 
     || KUCREC.XAUCD == "33")
      NIWREC.KUCCOID = KUCREC.KUCCOID; /* Save cust nbr*/
      NIWREC.KUCCONM = KUCREC.KUCCONM; /* save customer name*/
      if (KUCREC.XCTCD in XCTTBL.XCTCD)
        NIWREC.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
      end
      if (KUCREC.XCTCD in XCTTBL.XCTCD)
        NIWREC.XCTABRV = XCTTBL.XCTABRV[sysVar.arrayIndex];
      end
      NIWREC.OP1CUOID = 0;
      NIWREC.OP1NORID = 0;
    else
      set NI0AM100.KUCCOID cursor, modified, bold;
      converseLib.validationFailed(13); /* Invoice number nrf*/
      NLXREC.NLXERRF = "Y";
    end
    ;
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* If not found*/
      set NI0AM100.KUCCOID cursor, modified, bold;
      converseLib.validationFailed(13); /* Invoice number nrf*/
      NLXREC.NLXERRF = "Y";
      return;
    end
  end
  ;
   /* ****************************************/
   /* If store number is present, look it up*/
   /* ****************************************/
  ;
  if (NLXREC.NLXERRF != "Y")
    if (NI0AM100.KUMSTRID != 0) /* Store number non-0*/
      ;
      KUMREC.KUCCOID = NI0AM100.KUCCOID; /* Load key*/
      KUMREC.KUMSTRID = NI0AM100.KUMSTRID; /* Load key*/
      ;
      NI0AS08(); /* Select unique - kumrec*/
      ;
      if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
        NIWREC.KUMSTRID = KUMREC.KUMSTRID; /* Save store number*/
        ;
      else
        if (SQLCA.VAGen_SQLCODE == 100) /* If not found*/
          set NI0AM100.KUMSTRID cursor, modified, bold;
          converseLib.validationFailed(13); /* Invoice number nrf*/
          NLXREC.NLXERRF = "Y";
          return;
        end
      end
    else
      NIWREC.KUMSTRID = NI0AM100.KUMSTRID; /* Save store number*/
    end
  end
  ;
   /* *****************************************************/
   /* If no errors, transfer control to customer sub-menu*/
   /* *****************************************************/
  ;
  if (NLXREC.NLXERRF != "Y") /* No errors detected*/
    NLXREC.NLXEOSF = "Y";
    NLXREC.NLXCSCRN = "NI0AM200";
  end
end // end NI0AS05

// Invoice Inquiry by Order #
Function NI0AS06()
   /* ***********************************/
   /* Invoice Inquiry by Order # logic*/
   /* ***********************************/
  ;
  OP1REC.OP1CUOID = NI0AM100.OP1CUOID; /* Load key*/
  ;
   /* TCS Change Begin 07/21/00*/
  ;
  NI0AW01.NI0AWORD = NI0AM100.OP1CUOID;
  VPIHDR01.OP1CUOID = NI0AM100.OP1CUOID;
  VPIHDR01.OP1PARTN = NI0AW01.NI0AWPTN;
  ;
  if (NI0AM100.OP1NORID == 0)
    VPIHDR01.OP1NORID = -1;
  else
    VPIHDR01.OP1NORID = NI0AM100.OP1NORID;
  end
  ;
  NI0AS15(); /* Declare cursor for VPIHDR01*/
  ;
  NI0AS16(); /* Fetch cursor for VPIHDR01*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
    NIWREC.OP1CUOID = VPIHDR01.OP1CUOID;
    NIWREC.OP1NORID = NI0AM100.OP1NORID; /* nike order id 0*/
    NIWREC.KUCCOID = VPIHDR01.KUCCOID; /* Save cust nbr*/
    NIWREC.KUMSTRID = VPIHDR01.KUMSTRID;
    KUCREC.KUCCOID = VPIHDR01.KUCCOID;
    ;
    NI0AS07(); /* Select unique - kucrec*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      NIWREC.KUCCONM = KUCREC.KUCCONM; /* save customer name*/
      if (KUCREC.XCTCD in XCTTBL.XCTCD)
        NIWREC.XCTABRV = XCTTBL.XCTABRV[sysVar.arrayIndex];
      end
    end
    ;
    COMMAREA.CATOAP = "NI0B";
    ;
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* If not found*/
      ;
      NI0AS17(); /* close cursor - VPIHDR01*/
      ;
      set NI0AM100.OP1CUOID cursor, modified, bold;
      converseLib.validationFailed(14); /* Order number nrf*/
      NLXREC.NLXERRF = "Y";
      return;
    end
  end
  ;
  NI0AS17(); /* Close Cursor On op1rec*/
  ;
   /* TCS CHANGE END 07/21/00*/
  ;
   /* **************************************************/
   /* If no errors, transfer to Invoice Selection List*/
   /* **************************************************/
  ;
  if (NLXREC.NLXERRF != "Y") /* No errors detected*/
    COMMAREA.CATOAP = "NI0B";
    NIWREC.NIWFRMAP = "NI0A";
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002();
  end
end // end NI0AS06

// Select Unique - KUCREC
Function NI0AS07()
   /* ************************/
   /* KUCREC - Select Unique*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NI0AS07";
  ;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* Read Customer*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0240 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VCMPNY01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NI0AS07

// Select unique - KUMREC
Function NI0AS08()
   /* ************************/
   /* KUMREC - Select Unique*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NI0AS08";
  ;
  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes}; /* Read Store*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0340 "; /* io module*/
    TA1REC.TA1DBASE = "DCUST"; /* database*/
    TA1REC.TA1TBLVU = "VSTORE01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NI0AS08

// Open cursor 1 - SY2REC
Function NI0AS10()
   /* ************************/
   /* SY2REC - Open cursor 1*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NI0AS10";
  ;
  call "IO0130" ("SS", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes}; /* Open color cursor*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "SS     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0130 "; /* io module*/
    TA1REC.TA1DBASE = "DPROD"; /* database*/
    TA1REC.TA1TBLVU = "VCOLOR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NI0AS10

// Load cursor 1 - SY2REC
Function NI0AS11()
   /* ************************/
   /* SY2REC - Load Cursor*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NI0AS11";
  ;
  call "IO0130" ("SN", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes}; /* Load Color cursor*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    if (SQLCA.VAGen_SQLCODE != 100)
      TA1REC.TA1LOCAT[2] = "SN     "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO0130 "; /* io module*/
      TA1REC.TA1DBASE = "DPROD"; /* database*/
      TA1REC.TA1TBLVU = "VCOLOR01"; /* table view*/
      XPNL005(); /* abend routine*/
    else
      NI0AW01.NI0AWCOS = "N"; /* Set cursor switch off*/
      /* ************************/
       /* SY2REC - Close cursor 1*/
      /* ************************/
      ;
      NI0AS12();
    end
  end
end // end NI0AS11

// Close Style cursor
Function NI0AS12()
   /* ************************/
   /* SY2REC - Close cursor*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NI0AS12";
  ;
  call "IO0130" ("CS", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes}; /* Close Color cursor*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    NI0AW01.NI0AWCOS = "N"; /* cursor open flag*/
  else
    TA1REC.TA1LOCAT[2] = "CS     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0130 "; /* io module*/
    TA1REC.TA1DBASE = "DPROD"; /* database*/
    TA1REC.TA1TBLVU = "VCOLOR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NI0AS12

// Select Unique from NIJREC
Function NI0AS14()
   /* ************************/
   /* NIJREC - Select Unique*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NI0AS14";
  ;
  call "IO4610" ("S ", SQLCA, VNLGLA01) {isNoRefresh = yes, isExternal = yes}; /* Read G/L codes*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4610 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VNLGLA01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NI0AS14

// Open Cursor On VORHDR01
Function NI0AS15()
   /* ****************************************/
   /* Open Cursor for VPIHDR01*/
   /* ****************************************/
  ;
  NLXREC.NLXCPROC = "NI0AS15";
  ;
   /* declare cursor for order header table*/
  call "IO4470" ("S1", SQLCA, VPIHDR01) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "S1     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4470 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VPIHDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
  ;
end // end NI0AS15

// Fetch cursor for op1rec
Function NI0AS16()
   /* ******************************/
   /* Fetch cursor for VPIHDR01*/
   /* ******************************/
  ;
  NLXREC.NLXCPROC = "NI0AS16"; /* set current proc name*/
  ;
   /* fetch from cursor*/
  call "IO4470" ("N1", SQLCA, VPIHDR01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "N1     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4470 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VPIHDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
end // end NI0AS16

// op1rec Close Cursor 1
Function NI0AS17()
   /* ******************************/
   /* VPIHDR01 Close Cursor 1*/
   /* ******************************/
  ;
  NLXREC.NLXCPROC = "NI0AS17";
  ;
  call "IO4470" ("C1", SQLCA, VPIHDR01) {isNoRefresh = yes, isExternal = yes}; /* Close ord hdr cursor*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "C1     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4470 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VPIHDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
  ;
end // end NI0AS17

// Security for ni0a
Function NI0ASS0()
   /* ********        check field security             *********/
  ;
  NLXREC.NLXCPROC = "NI0ASS0";
  ;
  if (COMMAREA.CACLVL[1] == "N")
    NI0ASS1(); /* group 1*/
  end
  ;
end // end NI0ASS0

// Security level 1 - ni0a
Function NI0ASS1()
   /* ****** this sets security for fields in group1*/
  ;
  NLXREC.NLXCPROC = "NI0ASS1";
  ;
   /* ***************************************************/
   /* Determine if user is 'Inquiry only'...*/
   /* ***************************************************/
  ;
  NI0AW01.NI0AWINQ = "N"; /* prepare for security check*/
  if (COMMAREA.CACHGFL == "N") /* user can't change*/
    if (COMMAREA.CAADDFL == "N") /* user can't add*/
      NI0AW01.NI0AWINQ = "Y"; /* user is inquiry only*/
    end
  end
   /* **********************************************/
   /* If user is inquiry only, autoskip all fields*/
   /* **********************************************/
  if (NI0AW01.NI0AWINQ == "Y")
  end
end // end NI0ASS1

// converse xoc pop up window
Function XPXOC01()
   /* ------------------------------------------------------------*/
  ;
         /* CONVERSE POP UP WINDOW FOR ORDER CLASS TYPES*/
  ;
      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/
  ;
   /* ------------------------------------------------------------*/
  ;
   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/
  ;
  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/
    ;
     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/
    ;
    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end
    ;
    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";
    ;
     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/
    ;
    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && XOCTBL.XOCCD[XX0XWCT1] != "99") /* Or end of data*/
        if (XOCTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XOCTBL.XOCCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XOCTBL.XOCDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end
    ;
     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/
    ;
    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (XOCTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = XOCTBL.XOCCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = XOCTBL.XOCDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end
  ;
  ;
  converse XX0XM001 ;
  ;
  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/
  ;
     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/
  ;
  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end
  ;
    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/
  ;
  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && XOCTBL.XOCCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/
        ;
         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/
        ;
        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end
  ;
  ;
end // end XPXOC01

// converse zdt pop up window
Function XPZDT01()
   /* ------------------------------------------------------------*/
  ;
         /* CONVERSE POP UP WINDOW FOR DOCUMENT TYPE*/
  ;
      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/
  ;
   /* ------------------------------------------------------------*/
  ;
   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/
  ;
  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/
    ;
     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/
    ;
    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end
    ;
    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";
    ;
     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/
    ;
    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && ZDTTBL.ZDTCD[XX0XWCT1] != "99") /* Or end of data*/
        if (ZDTTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = ZDTTBL.ZDTCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = ZDTTBL.ZDTDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end
    ;
     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/
    ;
    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (ZDTTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = ZDTTBL.ZDTCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = ZDTTBL.ZDTDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end
  ;
  ;
  converse XX0XM001 ;
  ;
  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/
  ;
     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/
  ;
  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end
  ;
    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/
  ;
  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && ZDTTBL.ZDTCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/
        ;
         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/
        ;
        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end
  ;
  ;
end // end XPZDT01

// converse zps pop up window
Function XPZPS01()
   /* ------------------------------------------------------------*/
  ;
         /* CONVERSE POP UP WINDOW FOR SOURCE CODES*/
  ;
      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/
  ;
   /* ------------------------------------------------------------*/
  ;
   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/
  ;
  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/
    ;
     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/
    ;
    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end
    ;
    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";
    ;
     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/
    ;
    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && ZPSTBL.ZPSCD[XX0XWCT1] != "99") /* Or end of data*/
        if (ZPSTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = ZPSTBL.ZPSCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = ZPSTBL.ZPSDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end
    ;
     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/
    ;
    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (ZPSTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = ZPSTBL.ZPSCD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = ZPSTBL.ZPSDESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end
  ;
  ;
  converse XX0XM001 ;
  ;
  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/
  ;
     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/
  ;
  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end
  ;
    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/
  ;
  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && ZPSTBL.ZPSCD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/
        ;
         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/
        ;
        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end
  ;
  ;
end // end XPZPS01

//*** RECORD=NI0AW01 ****
// This is the main working storage record for nc0a.
// ***********************
Record NI0AW01 type basicRecord
  5 NI0AWCMP-CCYYMM1 NI0AWCMP-CCYYMM1 ; 
    10 NI0AWCMP-CC1 NI0AWCMP-CC1 ; 
    10 NI0AWCMP-YY1 NI0AWCMP-YY1 ; 
    10 NI0AWCMP-MM1 NI0AWCMP-MM1 ; 
  5 NI0AWCMP-CCYYMM2 NI0AWCMP-CCYYMM2 ; 
    10 NI0AWCMP-CC2 NI0AWCMP-CC2 ; 
    10 NI0AWCMP-YY2 NI0AWCMP-YY2 ; 
    10 NI0AWCMP-MM2 NI0AWCMP-MM2 ; 
  5 NI0AWINQ NI0AWINQ ; 
  5 NI0AWFCT NI0AWFCT ; 
  5 NI0AWIDX NI0AWIDX ; 
  5 NI0AWCDM NI0AWCDM ; 
  5 NI0AWIER NI0AWIER ; 
  5 NI0AWNER NI0AWNER ; 
  5 NI0AWPER NI0AWPER ; 
  5 NI0AWORD NI0AWORD ; 
    10 NI0AWFIL NI0AWFIL ; 
    10 NI0AWPTN NI0AWPTN ; 
  5 NI0AWCOS NI0AWCOS ; 
  5 NI0AWSMS NI0AWSMS ; 
  5 NI0AWSCF NI0AWSCF ; 
  5 NI0AWPUW NI0AWPUW ; 
  5 NI0AWEXT NI0AWEXT ; 
  5 NI0AWINV NI0AWINV ; 
    10 NI0AWIBY NI0AWIBY [8] ; 
  5 NI0AWSUB NI0AWSUB ; 
  5 NI0AWISB NI0AWISB ; 
  5 NI0AWPMY NI0AWPMY ; 
    10 NI0AWPMO NI0AWPMO ; 
    10 NI0AWPYR NI0AWPYR ; 
  5 NI0AWDAT NI0AWDAT ; 
    10 NI0AWMON NI0AWMON ; 
    10 NI0AWDAY NI0AWDAY ; 
    10 NI0AWYER NI0AWYER ; 
  5 NI0AWDT9 NI0AWDT9 ; 
    10 NI0AWCEN NI0AWCEN ; 
    10 NI0AWYR9 NI0AWYR9 ; 
    10 NI0AWMN9 NI0AWMN9 ; 
    10 NI0AWDY9 NI0AWDY9 ; 
  5 NI0AWGLA NI0AWGLA ; 
    10 NI0AWENT NI0AWENT ; 
    10 NI0AWRID NI0AWRID ; 
    10 NI0AWTAC NI0AWTAC ; 
    10 NI0AWSBA NI0AWSBA ; 
    10 NI0AWPRJ NI0AWPRJ ; 
end // end NI0AW01

// Color/dimension match flag
DataItem NI0AWCDM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// always '019'
DataItem NI0AWCEN char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GL MONTH CC HIGH
DataItem NI0AWCMP-CC1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// GL MONTH CC LOW
DataItem NI0AWCMP-CC2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// GL MONTH CCYYMM HIGH
DataItem NI0AWCMP-CCYYMM1 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// GL MONTH CCYYMM LOW
DataItem NI0AWCMP-CCYYMM2 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// GL MONTH MM HIGH
DataItem NI0AWCMP-MM1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// GL MONTH MM LOW
DataItem NI0AWCMP-MM2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// GL MONTH YY HIGH
DataItem NI0AWCMP-YY1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// GL MONTH YY LOW
DataItem NI0AWCMP-YY2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 'Cursor' open switch
DataItem NI0AWCOS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// W/S version of date
DataItem NI0AWDAT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Day
DataItem NI0AWDAY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// W/S version of cymd
DataItem NI0AWDT9 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Day
DataItem NI0AWDY9 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// G/L Entity ID
DataItem NI0AWENT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PF exit switch(contains PFK#)
DataItem NI0AWEXT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Fetch count      (1-64)
DataItem NI0AWFCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Discard portion of Order #
DataItem NI0AWFIL num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// G/L Account number
DataItem NI0AWGLA char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Invoice number byte array
DataItem NI0AWIBY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// W/S Index
DataItem NI0AWIDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Invoice Dates error
DataItem NI0AWIER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Inquiry only user(y/n)
DataItem NI0AWINQ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Invoice number
DataItem NI0AWINV num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Order number subscript
DataItem NI0AWISB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Month
DataItem NI0AWMN9 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Month
DataItem NI0AWMON char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Needed Dates error
DataItem NI0AWNER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// W/S order number
DataItem NI0AWORD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Posting Dates error
DataItem NI0AWPER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// G/L Posting month
DataItem NI0AWPMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// G/L Posting month/year
DataItem NI0AWPMY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Project ID
DataItem NI0AWPRJ char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Order partition number
DataItem NI0AWPTN num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Pop-up window switch
DataItem NI0AWPUW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// G/l Posting year
DataItem NI0AWPYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Resp Ctr ID
DataItem NI0AWRID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sub-account ID
DataItem NI0AWSBA char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Screen filled      (y = yes)
DataItem NI0AWSCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Screen Modified Switch
DataItem NI0AWSMS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working subscript
DataItem NI0AWSUB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Natural account ID
DataItem NI0AWTAC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Year
DataItem NI0AWYER char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Year
DataItem NI0AWYR9 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

