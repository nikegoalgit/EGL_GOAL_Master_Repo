package ni0w;

import corpcom2.XX0XW01;
import corpcom3.XPNL002;
import corpcom3.XPNL005;
import corpcom4.XSENTRY;
import corpcom4.XSNLS01;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import ku.common.KUCCOID;
import ni.common.NIWREC;
import nl.common.NLXREC;
import op.common.OP1CUOID;
import ta.common.TA1REC;
import vv.common.VPRTXT01;
//*** PROGRAM=NI0W ****
// ************************************************************
// 
//          ni0W - nil PROFORMA REQUEST COMMENT maintenance
//          -----------------------------------------------
// 
// This application allows the user to add or change comments
// on a PROFORMA.  This is the last screen in the PROFORMA
// request process and once the screen has been processed for
// the first time, the PROFORMA REQUEST HEADER RECORD BECOMES
// active.
// 
// 
// Maintenance History:
//   Date   Who    Remarks
// -------- ------ --------------------------------------------
// 04-16-91 LNGO   creatES FOR PROFORMA PROJECT
// 10-15-92 jjudki Use expanded nlxrec.
// 02-23-98 TTHAN1 YKFIX - REGEN FOR NEW VERSION OF XX0XS01.
// 
// *********************
Program NI0W type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "NL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  NI0WW01 NI0WW01; // record
  NIWREC NIWREC; // record
  NLXREC NLXREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  VPRTXT01 VPRTXT01; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use NI0WM.NI0WM100 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    NI0W000: NI0W000();
    exit program;
  end // end main
end // end NI0W

// main flow
Function NI0W000()
  ;
   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   perform initialization, set application revision nbrs,**/
   /* *   then do main perform until done with application      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0W000";
  COMMAREA.CACURRAP = "NI0W";
  ;
  NI0W001(); /* initilize the application*/
  ;
  NLXREC.NLXEOAF = "N"; /* set end-of-application flag to 'no'*/
  ;
  while (NLXREC.NLXEOAF == "N") /* while not end-of-aplication*/
    NI0W050(); /* process the application screen(s)*/
  end
  ;
  COMMAREA.CACURRAP = "NL0A";
  XPNL002();
  exit program;
end // end NI0W000

// initialize application
Function NI0W001()
  ;
  ;
   /* -----------------------------------------------------------*/
         /* initialize the application working storage*/
  ;
   /* -----------------------------------------------------------*/
  ;
  ;
  NLXREC.NLXCPROC = "NI0W001";
  ;
  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen converse*/
  VGVar.handleHardIOErrors = 1; /* return control to appl if hard db2 error*/
  ;
  set NI0WW01 empty; /* clear working storage rec1*/
  set VPRTXT01 empty; /* clear PRO.req text record*/
  set TA1REC empty;
  set SQLCA empty;
  set ERRSQLCA empty;
  ;
  XSENTRY(); /* appl entry security*/
  XSSEGTR(); /* set segmented transaction id*/
  ;
  set NLXREC empty; /* clear common working storage*/
  NLXREC.NLXPF3 = "N"; /* pf3 confirm flag*/
  NLXREC.NLXPF4 = "N"; /* pf4 confirm flag*/
  NLXREC.NLXPF20 = "N"; /* pf20 confirm flag*/
  ;
  set NIWREC empty; /* clear common working storage*/
  ;
   /* EMP001;*/
  ;
  if (COMMAREA.CAFRMSYS != "NI")
    COMMAREA.CAUSERA = " ";
  end
  ;
  NIWREC.NIWGROUP = COMMAREA.CAUSERA;
  ;
  if (COMMAREA.CAITEM > 0)
    COMMAREA.CATOAP = "NI0U";
    XPNL002();
  else
    if (COMMAREA.CAFROMAP == "NI0S"
     || COMMAREA.CAFROMAP == "NI0T"
     || COMMAREA.CAFROMAP == "NI0U"
     || COMMAREA.CAFROMAP == "NI0V"
     || COMMAREA.CAFROMAP == "NI0X")
      if (NIWREC.NIQPROID > 0)
        /* next sentence*/
      else
        if (NIWREC.NIWADDFL == "Y")
          COMMAREA.CATOAP = "NI0S";
          XPNL002();
        else
          COMMAREA.CATOAP = "NI0T";
          XPNL002();
        end
      end
    else
      COMMAREA.CATOAP = "NI0T";
      XPNL002();
    end
  end
  ;
  XX0XS01(); /* get current date and time*/
  ;
   /* declare cursor for NISREC to check for any existing comments*/
  NI0WS01();
  ;
   /* fetch and move rows to screen*/
  ;
  NI0WW01.NI0WWEND = "N";
  NI0WW01.NI0WWONE = "Y";
  ;
  while (NI0WW01.NI0WWEND == "N")
    NI0WS02(); /* fetch rows from NISREC*/
  end
  ;
  ;
  ;
  ;
   /* ------------------------------------------------------*/
    /* Set up working-storage array of screen names*/
   /* ------------------------------------------------------*/
  ;
  NLXREC.NLXSNAME[1] = "NI0WM100"; /* init screens used in this appl*/
  ;
  NLXREC.NLXCSCRN = "NI0WM100"; /* set first screen to display*/
  ;
  ;
  ;
end // end NI0W001

// decide which map to display
Function NI0W050()
  ;
   /* ************************************************************/
   /* *   control process the application screen(s)             **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0W050"; /* set current process name*/
  ;
  sysVar.arrayIndex = 0;
  NLXREC.NLXSCRNX = 0;
  ;
  if (NLXREC.NLXCSCRN in NLXREC.NLXSNAME) /* if current-screen-name is*/
    NLXREC.NLXSCRNX = sysVar.arrayIndex; /* in the screen-array, then set*/
  end /* the screen-index*/
  ;
  set TA1REC empty;
  TA1REC.TA1MAP = NLXREC.NLXCSCRN; /* prepare for abend*/
  ;
  NLXREC.NLXBLDSC = "Y"; /* set build screen flag to 'yes'*/
  NLXREC.NLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
  NLXREC.NLXERRF = "N"; /* clear error flag*/
  ;
  if (NLXREC.NLXSCRNX == 1) /* if screen NI0Wm100*/
    while (NLXREC.NLXEOSF == "N") /* show until user is done*/
      NI0W100();
    end
    TA1REC.TA1MAP = NLXREC.NLXCSCRN;
    TA1REC.TA1TBLKE = "UNKNOWN SCREEN NAME";
    TA1REC.TA1LOCAT[2] = NLXREC.NLXCSCRN;
    XPNL005(); /* abend*/
  end
  ;
   /* at this point;*/
       /* if the end-of-application flag (NLXeoaf ) = 'n'*/
         /* the perform will return to the top of NI0W050...*/
       /* else*/
         /* the perform will auto return to NI0W000.*/
  ;
end // end NI0W050

// converse map m100
Function NI0W100()
  ;
   /* ************************************************************/
   /* *    process screen NI0Wm100                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from nl0k050 until the end-of-screen   **/
   /* *     flag (nlxeosf) is set to 'y'.                      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0W100";
  ;
  if (NLXREC.NLXBLDSC == "Y")
    NI0W101();
    NLXREC.NLXBLDSC = "N";
  end
  ;
   /* ***********************************************************/
  converse NI0WM100 ;
  ;
   /* ***********************************************************/
  ;
  VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";
  ;
  NI0W110(); /* validate pfkeys*/
  ;
  if (NLXREC.NLXERRF == "N")
    NI0W120(); /* edit entries and update*/
  end
  ;
  if (NLXREC.NLXERRF == "N")
    NI0W130(); /* determine next action*/
  end
  ;
   /* at this point;*/
     /* if the end-of-screen flag (nlxeosf) is 'n'*/
        /* we go back to top of process NI0W100.*/
     /* if the end-of-screen flag (nlxeosf) is 'y'*/
        /* we return to NI0W050.*/
end // end NI0W100

// build screen
Function NI0W101()
  ;
   /* fill in all screen fields*/
  ;
   /* **************************************/
   /* build screen*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NI0W101";
  ;
  converseLib.clearScreen();
  set NI0WM100 initial;
  ;
  NI0WM100.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  NI0WM100.XXXRVNBR = "00"; /* revision nbr*/
  NI0WM100.XXXPRCNM = "NI0W100"; /* process name*/
  ;
  NI0WS05(); /* format screen header fields*/
  ;
  ;
   /* move from ws array to screen if inv comments exist*/
  ;
  if (NI0WW01.NI0WWONE == "N")
    NI0WW01.NI0WWDX1 = 1; /* init array index*/
    NI0WW01.NI0WWDX2 = 1; /* init screen row index*/
    while (NI0WW01.NI0WWDX1 < 14)
      NI0WS06();
    end
  end
  ;
  if (NI0WW01.NI0WWIER == "Y") /* error on init*/
    NI0WW01.NI0WWIER = "N";
    return;
  end
  ;
  ;
  ;
end // end NI0W101

// edit pfkeys
Function NI0W110()
  ;
   /* **************************************/
   /* edit pk keys*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NI0W110";
  ;
  set NI0WM100.CATOAP normal;
  ;
  if (NI0WM100.CATOAP != " ") /* if any fastpath data entered*/
    COMMAREA.CATOAP = NI0WM100.CATOAP;
    COMMAREA.CAITEM = NI0WM100.CAITEM;
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002();
    if (NLXREC.NLXERRF == "Y")
      set NI0WM100.CATOAP cursor, modified, bold;
    end
    return;
  end
  ;
  if (NLXREC.NLXPF3 == "Y" /* pf3 confirm flag*/
   && converseVar.eventKey not pf3)
    NLXREC.NLXPF3 = "N";
  end
  ;
  if (NLXREC.NLXPF4 == "Y" /* pf4 confirm flag*/
   && converseVar.eventKey not pf4)
    NLXREC.NLXPF4 = "N";
  end
  ;
  if (NLXREC.NLXPF20 == "Y" /* pf20 confirm flag*/
   && converseVar.eventKey not pf20)
    NLXREC.NLXPF20 = "N";
  end
  ;
  if (converseVar.eventKey is enter)
     /* next sentence*/
  else
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa2
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      converseLib.validationFailed(36); /* pa1/2 cause loss of keyed data-rekey*/
                                   /* any change*/
       /* set alterable fields modified*/
      NLXREC.NLXERRF = "Y";
    else
      if (converseVar.eventKey is pf1)
        XSNLS01(); /* nil help routine - exit to gd01*/
      else
        if (converseVar.eventKey is pf4)
          if (NLXREC.NLXPF4 == "N"
           && NI0WM100 is modified)
            set NI0WM100.NIFTXT[1] modified; /* set mdt for edit in 120*/
            NLXREC.NLXPF4 = "Y";
            converseLib.validationFailed(109); /* updates not saved - pf4 to confirm*/
            NLXREC.NLXERRF = "Y";
            return;
          end
          COMMAREA.CAUSERA = " ";
          XSPF4();
        else
          if (converseVar.eventKey is pf3)
            if (NLXREC.NLXPF3 == "N"
             && NI0WM100 is modified)
              set NI0WM100.NIFTXT[1] modified; /* set mdt for edit in 120*/
              NLXREC.NLXPF3 = "Y";
              converseLib.validationFailed(108); /* updates not saved - pf3 to confirm*/
              NLXREC.NLXERRF = "Y";
              return;
            end
            COMMAREA.CAUSERA = NIWREC.NIWGROUP;
            COMMAREA.CATOAP = COMMAREA.CAFROMAP;
            XPNL002();
            return;
          else
            if (converseVar.eventKey is pf20)
              if (NLXREC.NLXPF20 == "N"
               && NI0WM100 is modified)
                set NI0WM100.NIFTXT[1] modified; /* set mdt for edit in 120*/
                NLXREC.NLXPF20 = "Y";
                converseLib.validationFailed(110); /* updates not saved - pf20 to confirm*/
                NLXREC.NLXERRF = "Y";
                return;
              end
              COMMAREA.CATOAP = "NI0J";
              XPNL002();
              return;
            else
              COMMAREA.CATOAP = " ";
              converseLib.validationFailed(2); /* INVALID FUNCTION KEY*/
              NLXREC.NLXERRF = "Y";
            end
          end
        end
      end
    end
  end
end // end NI0W110

// edit comments and update
Function NI0W120()
  ;
   /* **************************************************/
   /* edit comments to delete blank lines but maintain*/
   /* spacing using the sequence nbr.*/
   /* **************************************************/
  ;
  NLXREC.NLXCPROC = "NI0W120";
  ;
  ;
   /* edit invoice comments*/
  ;
  if (NI0WM100 is modified)
    if (NI0WW01.NI0WWONE == "N") /* check if old comments found*/
      NI0WW01.NI0WWDX1 = 1;
      while (NI0WW01.NI0WWDX1 < 14)
        NI0WS08(); /* delete existing comments*/
      end
    end
    NI0WW01.NI0WWDX1 = 1;
    while (NI0WW01.NI0WWDX1 < 14)
      NI0WS09(); /* add new comments*/
    end
  end
  ;
end // end NI0W120

// determine next action
Function NI0W130()
  ;
   /* **************************************/
   /* determine next action*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NI0W130";
  ;
  if (converseVar.eventKey is enter)
    COMMAREA.CAUSERA = NIWREC.NIWGROUP; /* save working storage*/
    COMMAREA.CATOAP = "NI0U"; /* exit to ship order list*/
    XPNL002();
    return;
  end
end // end NI0W130

// declare cursor for niSrec
Function NI0WS01()
  ;
  ;
  NLXREC.NLXCPROC = "NI0WS01";
  ;
   /* declare and read cursor - store invoice comments in w-s*/
  ;
   /* format key for PROFORMA REQUEST TEXT TABLE*/
  VPRTXT01.KUCCOID = NIWREC.KUCCOID;
  VPRTXT01.NIQPROID = NIWREC.NIQPROID;
  VPRTXT01.NISPTXTC = "C";
  ;
  ;
   /* delclare cursor for inv req text table*/
  call "IO5820" ("S1", SQLCA, VPRTXT01) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "S1     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO5820 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VPRTXT01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
  ;
  ;
end // end NI0WS01

// fetch rows from niSrec
Function NI0WS02()
  ;
  NLXREC.NLXCPROC = "NI0WS02"; /* set current proc name*/
  ;
   /* fetch from cursor*/
  call "IO5820" ("N1", SQLCA, VPRTXT01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    if (NI0WW01.NI0WWONE == "Y")
      NI0WW01.NI0WWONE = "N";
      NI0WW01.NI0WWDX1 = 1;
    end
    NI0WW01.NI0WWTXT[NI0WWDX1] = VPRTXT01.NIFTXT;
    NI0WW01.NI0WWSEQ[NI0WWDX1] = VPRTXT01.NISPTXRS;
    NI0WW01.NI0WWDX1 = NI0WW01.NI0WWDX1 + 1;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      call "IO5820" ("C1", SQLCA, VPRTXT01) {isNoRefresh = yes, isExternal = yes};
      NI0WW01.NI0WWEND = "Y";
    else
      TA1REC.TA1LOCAT[2] = "N1     "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO5820 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VPRTXT01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end
  ;
end // end NI0WS02

// format screen header fields
Function NI0WS05()
  ;
  ;
   /* **************************************/
   /* fill in all screen header fields*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NI0WS05";
  ;
   /* customer fields*/
  ;
   /* customer fields*/
  NI0WM100.KUCCOID = NIWREC.KUCCOID;
  NI0WM100.KUCCONM = NIWREC.KUCCONM;
  NI0WM100.XCTDESC = NIWREC.XCTDESC;
  NI0WM100.NIQPROID = NIWREC.NIQPROID;
  ;
end // end NI0WS05

// move comments to ni0Wm100
Function NI0WS06()
  ;
  NLXREC.NLXCPROC = "NI0WS06";
  ;
   /* match screen row with ws seq nbr to maintain*/
   /* original spacing*/
  if (NI0WW01.NI0WWDX1 < NI0WW01.NI0WWSEQ[NI0WWDX2])
    NI0WM100.NIFTXT[NI0WWDX1] = " ";
    NI0WW01.NI0WWDX1 = NI0WW01.NI0WWDX1 + 1;
    return;
  end
  ;
  if (NI0WW01.NI0WWSEQ[NI0WWDX2] == 0)
    NI0WW01.NI0WWDX1 = 14;
    return;
  end
  ;
   /* move ws text  to screen*/
  ;
  NI0WM100.NIFTXT[NI0WWDX1] = NI0WW01.NI0WWTXT[NI0WWDX2];
  ;
  NI0WW01.NI0WWDX1 = NI0WW01.NI0WWDX1 + 1;
  NI0WW01.NI0WWDX2 = NI0WW01.NI0WWDX2 + 1;
  ;
end // end NI0WS06

// delete existing comments
Function NI0WS08()
  ;
  NLXREC.NLXCPROC = "NI0WS08";
  ;
  if (NI0WW01.NI0WWTXT[NI0WWDX1] == " ")
    NI0WW01.NI0WWDX1 = NI0WW01.NI0WWDX1 + 1;
    return;
  end
  ;
   /* delete PROFORMA comments*/
  ;
   /* format key for PROFORMA REQUEST TEXT TABLE*/
  VPRTXT01.KUCCOID = NIWREC.KUCCOID;
  VPRTXT01.NIQPROID = NIWREC.NIQPROID;
  VPRTXT01.NISPTXTC = "C";
  VPRTXT01.NISPTXRS = NI0WW01.NI0WWSEQ[NI0WWDX1];
  ;
  ;
   /* delete PROFORMA comments*/
  call "IO5820" ("D ", SQLCA, VPRTXT01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "D      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO5820 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VPRTXT01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
  NI0WW01.NI0WWDX1 = NI0WW01.NI0WWDX1 + 1;
  ;
  ;
  ;
end // end NI0WS08

// add new PROFORMA COMMENTS
Function NI0WS09()
  ;
  NLXREC.NLXCPROC = "NI0WS09";
  ;
  if (NI0WM100.NIFTXT[NI0WWDX1] == " ")
    NI0WW01.NI0WWDX1 = NI0WWDX1 + 1;
    return;
  end
  ;
   /* format key for PROFORMA REQUEST TEXT TABLE*/
  ;
  VPRTXT01.KUCCOID = NIWREC.KUCCOID;
  VPRTXT01.NIQPROID = NIWREC.NIQPROID;
  VPRTXT01.NISPTXTC = "C";
  VPRTXT01.NISPTXRS = NI0WW01.NI0WWDX1;
  VPRTXT01.NIFTXT = NI0WM100.NIFTXT[NI0WWDX1];
  VPRTXT01.ZZZSDT = XX0XWDAT;
  VPRTXT01.ZZZCHGDT = XX0XWDAT;
  VPRTXT01.ZZZCHGTM = XX0XWTIM;
  ;
   /* add PROFORMA comments*/
  call "IO5820" ("A ", SQLCA, VPRTXT01) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "A      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO5820 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VPRTXT01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
  NI0WW01.NI0WWDX1 = NI0WWDX1 + 1;
  ;
  ;
  ;
end // end NI0WS09

//*** RECORD=NI0WW01 ****
// this is the main working storage record for ni0h.
// ***********************
Record NI0WW01 type basicRecord
  10 KUCCOID KUCCOID ; 
  10 OP1CUOID OP1CUOID ; 
  10 NI0WWEND NI0WWEND ; 
  10 NI0WWONE NI0WWONE ; 
  10 NI0WWIER NI0WWIER ; 
  10 NI0WWDX1 NI0WWDX1 ; 
  10 NI0WWDX2 NI0WWDX2 ; 
  10 NI0WWTXA NI0WWTXA [13] ; 
    15 NI0WWTXT NI0WWTXT ; 
    15 NI0WWSEQ NI0WWSEQ ; 
end // end NI0WW01

// ws array index
DataItem NI0WWDX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen position index
DataItem NI0WWDX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quit flag
DataItem NI0WWEND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// init error flag
DataItem NI0WWIER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time flag
DataItem NI0WWONE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-ivc-txt-rec-seq
DataItem NI0WWSEQ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// comments array
DataItem NI0WWTXA char(74)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-ivc-txt
DataItem NI0WWTXT char(72)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

