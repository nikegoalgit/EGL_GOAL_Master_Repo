package ni0o;

import corpcom2.XX0XW01;
import corpcom3.XPNL002;
import corpcom3.XPNL005;
import corpcom4.XSENTRY;
import corpcom4.XSNLS01;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XCTTBL;
import corpx1.XLATBL;
import corpz3.ZDTTBL;
import corpz3.ZISTBL;
import ku.common.KUCCOID;
import ku.common.KUCREC;
import ni.common.NIWREC;
import nl.common.*;
import op.common.OP1CUOID;
import ta.common.TA1REC;
import vv.common.VPIHDR01;
import vv.common.VPITXT01;
import vv.common.VRQTHD01;
import vv.common.VRQTXT01;
//*** PROGRAM=NI0O ****
// ************************************************************
//          ni0o - nil invoice request comments maintenance
//          -----------------------------------------------
// This application allows the user to add or change comments
// on an invoice.  This is the last screen in the invoice
// request process and once the screen has been processed for
// the first time, the invoice request header record becomes
// active.
// 
// Maintenance History:
//   Date   Who    Remarks
// -------- ------ --------------------------------------------
// 09-14-89 jjohns creation
// 10-14-92 jjudki Use expanded nlxrec.
// 02-17-93 jjudki Task# 730. Add map200 to display comments of
//                 final invoices.
// 11-15-93 jjudki RECOMPILE FOR DB CHANGES.
// y2kfix 02-24-98 pharwo regen for xx0xs01 changes.
// *********************
Program NI0O type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "NL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  NI0OW01 NI0OW01; // record
  NIWREC NIWREC; // record
  NLXREC NLXREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  VPIHDR01 VPIHDR01; // record
  VPITXT01 VPITXT01; // record
  VRQTHD01 VRQTHD01; // record
  VRQTXT01 VRQTXT01; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCTTBL; // table
  use XLATBL; // table
  use ZDTTBL; // table
  use ZISTBL; // table
  use NI0OM.NI0OM100,  // forms
      NI0OM.NI0OM200
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    NI0O000: NI0O000();
    exit program;
  end // end main
end // end NI0O

// Converse Map m200
Function NI0O-200()

   /* ************************************************************/
   /* *    process screen NI0OM200                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from NI0O050 until the end-of-screen   **/
   /* *     flag (nlxeosf) is set to 'y'.                      **/
   /* ************************************************************/
  NLXREC.NLXCPROC = "NI0O-200";

  if (NLXREC.NLXBLDSC == "Y")
    NI0O-201();
    NLXREC.NLXBLDSC = "N";
  end

   /* ***********************************************************/
  converse NI0OM200 ;
   /* ***********************************************************/

  VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";

  NI0O-210(); /* validate pfkeys*/

  if (NLXREC.NLXERRF == "N")
    NI0O-220(); /* edit entries and update*/
  end

  if (NLXREC.NLXERRF == "N")
    NI0O-230(); /* determine next action*/
  end

   /* at this point;*/
     /* if the end-of-screen flag (nlxeosf) is 'n'*/
        /* we go back to top of process NI0O200.*/
     /* if the end-of-screen flag (nlxeosf) is 'y'*/
        /* we return to NI0O050.*/
end // end NI0O-200

// build screen
Function NI0O-201()

   /* fill in all screen fields*/
   /* **************************************/
   /* build screen*/
   /* **************************************/
  NLXREC.NLXCPROC = "NI0O-201";

  converseLib.clearScreen();
  set NI0OM200 initial;

  NI0OM200.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  NI0OM200.XXXRVNBR = "00"; /* revision nbr*/
  NI0OM200.XXXPRCNM = "NI0O-201"; /* process name*/

   /* NI0OS-200-HEADER;                /* format screen header fields*/

  NI0OM200.NIDIVCID = NIWREC.NIDIVCID;
  NI0OW01.NI0OW-01-CUO = NIWREC.OP1CUOID;
  NI0OW01.NI0OW-01-NOR = NIWREC.OP1NORID;
  NI0OM-200-ORD = NI0OW01.NI0OW-01-ORD;

  NI0OW01.NI0OW-01-KUC = NIWREC.KUCCOID;
  NI0OW01.NI0OW-01-KUM = NIWREC.KUMSTRID;
  NI0OM-200-CST = NI0OW01.NI0OW-01-CST;

  NI0OM200.ZISABRV = NIWREC.NIWSTAB;
  NI0OM200.KUCCONM = NIWREC.KUCCONM;
  NI0OM200.XCTDESC = NIWREC.XCTDESC;
  NI0OM200.ZDTABRV = NIWREC.ZDTABRV;
  NI0OM200.XXXADR1 = NIWREC.XXXADR1;

   /* move from ws array to screen if inv comments exist*/

   /* IF NI0OW01.NI0OWONE = 'N';*/
  NI0OW01.NI0OWDX1 = 1; /* init array index*/
  NI0OW01.NI0OWDX2 = 1; /* init screen row index*/
  while (NI0OW01.NI0OWDX1 < 14)
    NI0OS-200-LOAD();
  end
   /* END;*/

  if (NI0OW01.NI0OWIER == "Y") /* error on init*/
    NI0OW01.NI0OWIER = "N";
    return;
  end


end // end NI0O-201

// edit pfkeys
Function NI0O-210()

   /* **************************************/
   /* edit pk keys*/
   /* **************************************/

  NLXREC.NLXCPROC = "NI0O210";

  if (converseVar.eventKey is enter
   && NI0OM200.CATOAP != " ") /* if any fastpath data entered*/
    COMMAREA.CATOAP = NI0OM200.CATOAP;
    COMMAREA.CAITEM = NI0OM200.CAITEM;
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002();
    return;
  end

  if (converseVar.eventKey is pf1)
    XSNLS01(); /* nil help routine - exit to gd01*/
  end

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf3)
    COMMAREA.CATOAP = COMMAREA.CAFROMAP;
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002();
    return;
  end

  if (converseVar.eventKey is pf4)
    COMMAREA.CAUSERA = " ";
    XSPF4();
  end

  if (converseVar.eventKey is pf20)
    COMMAREA.CATOAP = "NI0J";
    XPNL002();
    return;
  else
    COMMAREA.CATOAP = " ";
    converseLib.validationFailed(2); /* INVALID FUNCTION KEY*/
    NLXREC.NLXERRF = "Y";
  end


end // end NI0O-210

// edit comments and update
Function NI0O-220()

   /* **************************************************/
   /* edit comments to delete blank lines but maintain*/
   /* spacing using the sequence nbr.*/
   /* **************************************************/
  NLXREC.NLXCPROC = "NI0O220";



end // end NI0O-220

// determine next action
Function NI0O-230()

   /* **************************************/
   /* determine next action*/
   /* **************************************/
  NLXREC.NLXCPROC = "NI0O230";

  if (converseVar.eventKey is enter)
    COMMAREA.CAUSERA = NIWREC.NIWGROUP; /* save working storage*/
    XPNL002();
    return;
  end
end // end NI0O-230

// main flow
Function NI0O000()

   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   perform initialization, set application revision nbrs,**/
   /* *   then do main perform until done with application      **/
   /* *                                                         **/
   /* ************************************************************/

  NLXREC.NLXCPROC = "NI0O000";
  COMMAREA.CACURRAP = "NI0O";

  NI0O001(); /* initilize the application*/

  NLXREC.NLXEOAF = "N"; /* set end-of-application flag to 'no'*/

  while (NLXREC.NLXEOAF == "N") /* while not end-of-aplication*/
    NI0O050(); /* process the application screen(s)*/
  end

  COMMAREA.CACURRAP = "NL0A";
  XPNL002();
  exit program;
end // end NI0O000

// initialize application
Function NI0O001()

   /* -----------------------------------------------------------*/
         /* initialize the application working storage*/
   /* -----------------------------------------------------------*/

  NLXREC.NLXCPROC = "NI0O001";

  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen*/
                                   /* converse*/
  VGVar.handleHardIOErrors = 1; /* return control to appl if hard db2*/
                                   /* error*/

  set NI0OW01 empty; /* clear working storage rec1*/
  set VRQTHD01 empty; /* clear inv req hdr record*/
  set VRQTXT01 empty; /* clear inv req text record*/
  set TA1REC empty;
  set SQLCA empty;
  set ERRSQLCA empty;

  XSENTRY(); /* appl entry security*/
  XSSEGTR(); /* set segmented transaction id*/

  set NLXREC empty; /* clear common working storage*/
  NLXREC.NLXPF3 = "N"; /* pf3 confirm flag*/
  NLXREC.NLXPF4 = "N"; /* pf4 confirm flag*/
  NLXREC.NLXPF20 = "N"; /* pf20 confirm flag*/

  set NIWREC empty; /* clear common working storage*/

  if (COMMAREA.CAFRMSYS != "NI")
    COMMAREA.CAUSERA = " ";
  end

  NIWREC.NIWGROUP = COMMAREA.CAUSERA;

  if (COMMAREA.CAFROMAP != "NI0N" /* Invoice Address Maintenance*/
   && COMMAREA.CAFROMAP != "NI0C" /* Xfer From Invoice Inq Headers*/
   && COMMAREA.CAFROMAP != "NI0D" /* Xfer From Invoice Product Summary*/
   && COMMAREA.CAFROMAP != "NI0E") /* Xfer From Invoice Inq Address*/
    COMMAREA.CATOAP = "NI0K";
    XPNL002();
  end

  XX0XS01(); /* get current date and time*/

  if (COMMAREA.CAFROMAP == "NI0C" /* Xfer From Invoice Inq Headers*/
   || COMMAREA.CAFROMAP == "NI0D" /* Xfer From Invoice Product Summary*/
   || COMMAREA.CAFROMAP == "NI0E") /* Xfer From Invoice Inq Address*/

   /* declare cursor for NIFREC existing invoice comments*/
    VPITXT01.NIDIVCID = NIWREC.NIDIVCID; /* Passed Invoice Id*/
    VPITXT01.NIFTXTYP = "C"; /* Comment Record Indicator*/
    NI0OS-S1-VPITXT01();

    NI0OW01.NI0OWDX1 = 1;
    NI0OW01.NI0OWEND = "N";

    while (NI0OW01.NI0OWEND == "N")
      NI0OS-N1-VPITXT01();
    end

   /* ------------------------------------------------------*/
    /* Set up working-storage array of screen names*/
   /* ------------------------------------------------------*/
    NLXREC.NLXSNAME[2] = "NI0OM200"; /* init screens used in this appl*/
    NLXREC.NLXCSCRN = "NI0OM200"; /* set first screen to display*/

  else

   /* declare cursor for NIPREC existing request comments*/
    NI0OS01();

    /* fetch and move rows to screen*/

    NI0OW01.NI0OWEND = "N";
    NI0OW01.NI0OWONE = "Y";

    while (NI0OW01.NI0OWEND == "N")
      NI0OS02(); /* fetch rows from niprec*/
    end

   /* ------------------------------------------------------*/
    /* Set up working-storage array of screen names*/
   /* ------------------------------------------------------*/

    NLXREC.NLXSNAME[1] = "NI0OM100"; /* init screens used in this appl*/

    NLXREC.NLXCSCRN = "NI0OM100"; /* set first screen to display*/


  end

end // end NI0O001

// decide which map to display
Function NI0O050()

   /* ************************************************************/
   /* *   control process the application screen(s)             **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/

  NLXREC.NLXCPROC = "NI0O050"; /* set current process name*/

  sysVar.arrayIndex = 0;
  NLXREC.NLXSCRNX = 0;

  if (NLXREC.NLXCSCRN in NLXREC.NLXSNAME) /* if current-screen-name is*/
    NLXREC.NLXSCRNX = sysVar.arrayIndex; /* in the screen-array, then set*/
  end /* the screen-index*/

  set TA1REC empty;
  TA1REC.TA1MAP = NLXREC.NLXCSCRN; /* prepare for abend*/

  NLXREC.NLXBLDSC = "Y"; /* set build screen flag to 'yes'*/
  NLXREC.NLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
  NLXREC.NLXERRF = "N"; /* clear error flag*/

  if (NLXREC.NLXSCRNX == 1) /* Request Comments Text Screen*/
    while (NLXREC.NLXEOSF == "N") /* show until user is done*/
      NI0O100();
    end
  else
    if (NLXREC.NLXSCRNX == 2) /* Invoice Comments Text Screen*/
      while (NLXREC.NLXEOSF == "N") /* show until user is done*/
        NI0O-200();
      end
    else
      TA1REC.TA1MAP = NLXREC.NLXCSCRN;
      TA1REC.TA1TBLKE = "UNKNOWN SCREEN NAME";
      TA1REC.TA1LOCAT[2] = NLXREC.NLXCSCRN;
      XPNL005(); /* abend*/
    end
  end

   /* at this point;*/
       /* if the end-of-application flag (NLXeoaf ) = 'n'*/
         /* the perform will return to the top of ni0o050...*/
       /* else*/
         /* the perform will auto return to ni0o000.*/

end // end NI0O050

// converse map m100
Function NI0O100()

   /* ************************************************************/
   /* *    process screen ni0om100                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from nl0k050 until the end-of-screen   **/
   /* *     flag (nlxeosf) is set to 'y'.                      **/
   /* *                                                         **/
   /* ************************************************************/

  NLXREC.NLXCPROC = "NI0O100";

  if (NLXREC.NLXBLDSC == "Y")
    NI0O101();
    NLXREC.NLXBLDSC = "N";
  end

   /* ***********************************************************/
  converse NI0OM100 ;

   /* ***********************************************************/

  VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";

  NI0O110(); /* validate pfkeys*/

  if (NLXREC.NLXERRF == "N")
    NI0O120(); /* edit entries and update*/
  end

  if (NLXREC.NLXERRF == "N")
    NI0O130(); /* determine next action*/
  end

   /* at this point;*/
     /* if the end-of-screen flag (nlxeosf) is 'n'*/
        /* we go back to top of process ni0o100.*/
     /* if the end-of-screen flag (nlxeosf) is 'y'*/
        /* we return to ni0o050.*/
end // end NI0O100

// build screen
Function NI0O101()

   /* fill in all screen fields*/

   /* **************************************/
   /* build screen*/
   /* **************************************/

  NLXREC.NLXCPROC = "NI0O101";

  converseLib.clearScreen();
  set NI0OM100 initial;

  NI0OM100.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  NI0OM100.XXXRVNBR = "00"; /* revision nbr*/
  NI0OM100.XXXPRCNM = "NI0O100"; /* process name*/

  NI0OS05(); /* format screen header fields*/


   /* move from ws array to screen if inv comments exist*/

  if (NI0OW01.NI0OWONE == "N")
    NI0OW01.NI0OWDX1 = 1; /* init array index*/
    NI0OW01.NI0OWDX2 = 1; /* init screen row index*/
    while (NI0OW01.NI0OWDX1 < 14)
      NI0OS06();
    end
  end

  if (NI0OW01.NI0OWIER == "Y") /* error on init*/
    NI0OW01.NI0OWIER = "N";
    return;
  end



end // end NI0O101

// edit pfkeys
Function NI0O110()

   /* **************************************/
   /* edit pk keys*/
   /* **************************************/

  NLXREC.NLXCPROC = "NI0O110";

  if (NI0OM100.CATOAP != " ") /* if any fastpath data entered*/
    COMMAREA.CATOAP = NI0OM100.CATOAP;
    COMMAREA.CAITEM = NI0OM100.CAITEM;
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002();
    return;
  end

  if (NLXREC.NLXPF3 == "Y" /* pf3 confirm flag*/
   && converseVar.eventKey not pf3)
    NLXREC.NLXPF3 = "N";
  end

  if (NLXREC.NLXPF4 == "Y" /* pf4 confirm flag*/
   && converseVar.eventKey not pf4)
    NLXREC.NLXPF4 = "N";
  end

  if (NLXREC.NLXPF20 == "Y" /* pf20 confirm flag*/
   && converseVar.eventKey not pf20)
    NLXREC.NLXPF20 = "N";
  end

  if (converseVar.eventKey is enter)
     /* next sentence*/
  else
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa2
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      converseLib.validationFailed(36); /* pa1/2 cause loss of keyed data-rekey*/
                                   /* any change*/
       /* set alterable fields modified*/
      NLXREC.NLXERRF = "Y";
    else
      if (converseVar.eventKey is pf1)
        XSNLS01(); /* nil help routine - exit to gd01*/
      else
        if (converseVar.eventKey is pf4)
          if (NLXREC.NLXPF4 == "N"
           && NI0OM100 is modified)
            set NI0OM100.NIFTXT[1] modified; /* set mdt for edit in 120*/
            NLXREC.NLXPF4 = "Y";
            converseLib.validationFailed(109); /* updates not saved - pf4 to confirm*/
            NLXREC.NLXERRF = "Y";
            return;
          end
          COMMAREA.CAUSERA = " ";
          XSPF4();
        else
          if (converseVar.eventKey is pf3)
            if (NLXREC.NLXPF3 == "N"
             && NI0OM100 is modified)
              set NI0OM100.NIFTXT[1] modified; /* set mdt for edit in 120*/
              NLXREC.NLXPF3 = "Y";
              converseLib.validationFailed(108); /* updates not saved - pf3 to confirm*/
              NLXREC.NLXERRF = "Y";
              return;
            end
            COMMAREA.CAUSERA = NIWREC.NIWGROUP;
            COMMAREA.CATOAP = "NI0N";
            XPNL002();
            return;
          else
            if (converseVar.eventKey is pf20)
              if (NLXREC.NLXPF20 == "N"
               && NI0OM100 is modified)
                set NI0OM100.NIFTXT[1] modified; /* set mdt for edit in 120*/
                NLXREC.NLXPF20 = "Y";
                converseLib.validationFailed(110); /* updates not saved - pf20 to confirm*/
                NLXREC.NLXERRF = "Y";
                return;
              end
              COMMAREA.CATOAP = "NI0J";
              XPNL002();
              return;
            else
              COMMAREA.CATOAP = " ";
              converseLib.validationFailed(2); /* INVALID FUNCTION KEY*/
              NLXREC.NLXERRF = "Y";
            end
          end
        end
      end
    end
  end
end // end NI0O110

// edit comments and update
Function NI0O120()

   /* **************************************************/
   /* edit comments to delete blank lines but maintain*/
   /* spacing using the sequence nbr.*/
   /* **************************************************/

  NLXREC.NLXCPROC = "NI0O120";


   /* edit invoice comments*/

  if (NI0OM100 is modified)
    if (NI0OW01.NI0OWONE == "N") /* check if old comments found*/
      NI0OW01.NI0OWDX1 = 1;
      while (NI0OW01.NI0OWDX1 < 14)
        NI0OS08(); /* delete existing comments*/
      end
    end
    NI0OW01.NI0OWDX1 = 1;
    while (NI0OW01.NI0OWDX1 < 14)
      NI0OS09(); /* add new comments*/
    end
  end

  NI0OS10(); /* select unique on inv req hdr*/

  if (VRQTHD01.NIOISTAT == "I") /* only chg status the 1st time*/
    VRQTHD01.NIOISTAT = "A"; /* inv request record status = active*/
    NI0OS11(); /* update status on inv req hdr*/
  end



end // end NI0O120

// determine next action
Function NI0O130()

   /* **************************************/
   /* determine next action*/
   /* **************************************/

  NLXREC.NLXCPROC = "NI0O130";

  if (converseVar.eventKey is enter)
    COMMAREA.CAUSERA = NIWREC.NIWGROUP; /* save working storage*/
    COMMAREA.CATOAP = "NI0Q"; /* exit to ship order list*/
    XPNL002();
    return;
  end
end // end NI0O130

// move comments to ni0om100
Function NI0OS-200-LOAD()

  NLXREC.NLXCPROC = "NI0OS-200-LOAD";

   /* move ws text  to screen*/

  NI0OM-200-NIFTXT[NI0OWDX1] = NI0OW01.NI0OWTXT[NI0OWDX2];

  NI0OW01.NI0OWDX1 = NI0OW01.NI0OWDX1 + 1;
  NI0OW01.NI0OWDX2 = NI0OW01.NI0OWDX2 + 1;

end // end NI0OS-200-LOAD

// Fetch From/Close cursor NIFREC
Function NI0OS-N1-VPITXT01()
   /* ************************************/
   /* NIFREC - Fetch From/Close Cursor*/
   /* ************************************/
  NLXREC.NLXCPROC = "NI0OS-N1-VPITXT01";

  call "IO4520" ("N1", SQLCA, VPITXT01) {isNoRefresh = yes, isExternal = yes}; /* Load P/I txt cursor*/

  if (SQLCA.VAGen_SQLCODE == 0)
    NI0OW01.NI0OWTXT[NI0OWDX1] = VPITXT01.NIFTXT;
    NI0OW01.NI0OWDX1 = NI0OW01.NI0OWDX1 + 1;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      call "IO4520" ("C1", SQLCA, VPITXT01) {isNoRefresh = yes, isExternal = yes};
                                                    /* Close P/I txt cursor*/
      NI0OW01.NI0OWEND = "Y";
      if (SQLCA.VAGen_SQLCODE != 0)
        TA1REC.TA1LOCAT[2] = "C1     "; /* database action*/
        TA1REC.TA1LOCAT[3] = "IO4520 "; /* io module*/
        TA1REC.TA1DBASE = "DNILO"; /* database*/
        TA1REC.TA1TBLVU = "VPITXT01"; /* table view*/
        XPNL005(); /* abend routine*/
      end
    else
      if (SQLCA.VAGen_SQLCODE != 100)
        TA1REC.TA1LOCAT[2] = "N1     "; /* database action*/
        TA1REC.TA1LOCAT[3] = "IO4520 "; /* io module*/
        TA1REC.TA1DBASE = "DNILO"; /* database*/
        TA1REC.TA1TBLVU = "VPITXT01"; /* table view*/
        XPNL005(); /* abend routine*/
      end
    end
  end
end // end NI0OS-N1-VPITXT01

// Open cursor - NIFREC
Function NI0OS-S1-VPITXT01()
   /* ************************/
   /* NIFREC - Select Unique*/
   /* ************************/

  NLXREC.NLXCPROC = "NI0OS-S1-VPITXT01";

  call "IO4520" ("S1", SQLCA, VPITXT01) {isNoRefresh = yes, isExternal = yes}; /* Read P/I Text*/

  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "S1     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4520 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VPITXT01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NI0OS-S1-VPITXT01

// declare cursor for niprec
Function NI0OS01()


  NLXREC.NLXCPROC = "NI0OS01";

   /* declare and read cursor - store invoice comments in w-s*/

   /* format key for invoice request text table*/
  VRQTXT01.TSFSHPID = NIWREC.TSFSHPID;
  VRQTXT01.OP1CUOID = NIWREC.NIWOP1CU[NIWKQIDX];
  VRQTXT01.OP1NORID = NIWREC.NIWOP1NO[NIWKQIDX];
  VRQTXT01.NIFTXTYP = "C";


   /* delclare cursor for inv req text table*/
  call "IO0610" ("S1", SQLCA, VRQTXT01) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "S1     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0610 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VRQTXT01"; /* table view*/
    XPNL005(); /* abend routine*/
  end



end // end NI0OS01

// fetch rows from niprec
Function NI0OS02()

  NLXREC.NLXCPROC = "NI0OS02"; /* set current proc name*/

   /* fetch from cursor*/
  call "IO0610" ("N1", SQLCA, VRQTXT01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    if (NI0OW01.NI0OWONE == "Y")
      NI0OW01.NI0OWONE = "N";
      NI0OW01.NI0OWDX1 = 1;
    end
    NI0OW01.NI0OWTXT[NI0OWDX1] = VRQTXT01.NIFTXT;
    NI0OW01.NI0OWSEQ[NI0OWDX1] = VRQTXT01.NIFTXSEQ;
    NI0OW01.NI0OWDX1 = NI0OW01.NI0OWDX1 + 1;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      call "IO0610" ("C1", SQLCA, VRQTXT01) {isNoRefresh = yes, isExternal = yes};
      NI0OW01.NI0OWEND = "Y";
    else
      TA1REC.TA1LOCAT[2] = "N1     "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO0610 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VRQTXT01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end

end // end NI0OS02

// format screen header fields
Function NI0OS05()


   /* **************************************/
   /* fill in all screen header fields*/
   /* **************************************/

  NLXREC.NLXCPROC = "NI0OS05";

   /* customer fields*/

   /* customer fields*/
  if (NIWREC.NIWKUID == 0) /* no comp number*/
    NI0OM100.KUCCOID = NIWREC.KUCCOID;
    NI0OM100.KUCCONM = NIWREC.KUCCONM;
    NI0OM100.XCTDESC = NIWREC.XCTDESC;
  else
    NI0OM100.KUCCOID = NIWREC.NIWKUID;
    NI0OM100.KUCCONM = NIWREC.NIWKUNM;
    NI0OM100.XCTDESC = NIWREC.NIWDESC;
  end


   /* nike shipment id*/
  NI0OM100.TSFSHPID = NIWREC.TSFSHPID;

   /* format order number for screen display*/
  NLXREC.NLXOP1CU = NIWREC.NIWOP1CU[NIWKQIDX];
  NLXREC.NLXOP1NO = NIWREC.NIWOP1NO[NIWKQIDX];
  NI0OM100.NLXOID = NLXREC.NLXOID;



end // end NI0OS05

// move comments to ni0om100
Function NI0OS06()

  NLXREC.NLXCPROC = "NI0OS06";

   /* match screen row with ws seq nbr to maintain*/
   /* original spacing*/
  if (NI0OW01.NI0OWDX1 < NI0OW01.NI0OWSEQ[NI0OWDX2])
    NI0OM100.NIFTXT[NI0OWDX1] = " ";
    NI0OW01.NI0OWDX1 = NI0OW01.NI0OWDX1 + 1;
    return;
  end

  if (NI0OW01.NI0OWSEQ[NI0OWDX2] == 0)
    NI0OW01.NI0OWDX1 = 14;
    return;
  end

   /* move ws text  to screen*/

  NI0OM100.NIFTXT[NI0OWDX1] = NI0OW01.NI0OWTXT[NI0OWDX2];

  NI0OW01.NI0OWDX1 = NI0OW01.NI0OWDX1 + 1;
  NI0OW01.NI0OWDX2 = NI0OW01.NI0OWDX2 + 1;

end // end NI0OS06

// delete existing comments
Function NI0OS08()

  NLXREC.NLXCPROC = "NI0OS08";

  if (NI0OW01.NI0OWTXT[NI0OWDX1] == " ")
    NI0OW01.NI0OWDX1 = NI0OW01.NI0OWDX1 + 1;
    return;
  end

   /* delete invoice comments*/

   /* format key for invoice request text table*/
  VRQTXT01.TSFSHPID = NIWREC.TSFSHPID;
  VRQTXT01.OP1CUOID = NIWREC.NIWOP1CU[NIWKQIDX];
  VRQTXT01.OP1NORID = NIWREC.NIWOP1NO[NIWKQIDX];
  VRQTXT01.NIFTXTYP = "C";
  VRQTXT01.NIFTXSEQ = NI0OW01.NI0OWSEQ[NI0OWDX1];


   /* delete invoice comments*/
  call "IO0610" ("D ", SQLCA, VRQTXT01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "D      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0610 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VRQTXT01"; /* table view*/
    XPNL005(); /* abend routine*/
  end

  NI0OW01.NI0OWDX1 = NI0OW01.NI0OWDX1 + 1;



end // end NI0OS08

// add new invoice comments
Function NI0OS09()

  NLXREC.NLXCPROC = "NI0OS09";

  if (NI0OM100.NIFTXT[NI0OWDX1] == " ")
    NI0OW01.NI0OWDX1 = NI0OWDX1 + 1;
    return;
  end

   /* format key for invoice request text table*/
  VRQTXT01.TSFSHPID = NIWREC.TSFSHPID;
  VRQTXT01.OP1PARTN = NIWREC.NIWOP1CH[NIWKQIDX];
  VRQTXT01.OP1CUOID = NIWREC.NIWOP1CU[NIWKQIDX];
  VRQTXT01.OP1NORID = NIWREC.NIWOP1NO[NIWKQIDX];
  VRQTXT01.NIFTXTYP = "C";
  VRQTXT01.NIFTXSEQ = NI0OW01.NI0OWDX1;
  VRQTXT01.NIFTXT = NI0OM100.NIFTXT[NI0OWDX1];
  VRQTXT01.ZZZSDT = XX0XWDAT;
  VRQTXT01.ZZZCHGDT = XX0XWDAT;
  VRQTXT01.ZZZCHGTM = XX0XWTIM;

   /* add invoice comments*/
  call "IO0610" ("A ", SQLCA, VRQTXT01) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "A      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0610 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VRQTXT01"; /* table view*/
    XPNL005(); /* abend routine*/
  end

  NI0OW01.NI0OWDX1 = NI0OWDX1 + 1;



end // end NI0OS09

// Select Unique from NIOREC
Function NI0OS10()
  NLXREC.NLXCPROC = "NI0OS10";

   /* NIOREC - Select Unique*/

  VRQTHD01.TSFSHPID = NIWREC.TSFSHPID;
  VRQTHD01.OP1CUOID = NIWREC.NIWOP1CU[NIWKQIDX];
  VRQTHD01.OP1NORID = NIWREC.NIWOP1NO[NIWKQIDX];

  call "IO0600" ("S ", SQLCA, VRQTHD01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0600 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VRQTHD01"; /* table view*/
    XPNL005(); /* abend routine*/
  end



end // end NI0OS10

// update status on niorec
Function NI0OS11()

  NLXREC.NLXCPROC = "NI0OS10";

   /* format key for invoice request header table*/
  VRQTHD01.TSFSHPID = NIWREC.TSFSHPID;
  VRQTHD01.OP1CUOID = NIWREC.NIWOP1CU[NIWKQIDX];
  VRQTHD01.OP1NORID = NIWREC.NIWOP1NO[NIWKQIDX];
  VRQTHD01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VRQTHD01.ZZZCHGTM = XX0XW01.XX0XWTIM;


   /* update request status*/
  call "IO0600" ("U ", SQLCA, VRQTHD01) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "U      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0600 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VRQTHD01"; /* table view*/
    XPNL005(); /* abend routine*/
  end



end // end NI0OS11

//*** RECORD=NI0OW01 ****
// this is the main working storage record for NI0O.
// ***********************
Record NI0OW01 type basicRecord
  10 KUCCOID KUCCOID ; 
  10 OP1CUOID OP1CUOID ; 
  10 NI0OWEND NI0OWEND ; 
  10 NI0OWONE NI0OWONE ; 
  10 NI0OWIER NI0OWIER ; 
  10 NI0OWDX1 NI0OWDX1 ; 
  10 NI0OWDX2 NI0OWDX2 ; 
  10 NI0OWTXA NI0OWTXA [13] ; 
    15 NI0OWTXT NI0OWTXT ; 
    15 NI0OWSEQ NI0OWSEQ ; 
  10 NI0OW-01-ORD NI0OW-01-ORD ; 
    15 NI0OW-01-CUO NI0OW-01-CUO ; 
    15 NI0OW-01-NOR NI0OW-01-NOR ; 
  10 NI0OW-01-CST NI0OW-01-CST ; 
    15 NI0OW-01-KUC NI0OW-01-KUC ; 
    15 NI0OW-01-KUM NI0OW-01-KUM ; 
end // end NI0OW01

// Display Order/Suborder #
DataItem NI0OW-01-CST num(11,4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Order # Portion
DataItem NI0OW-01-CUO num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Order # Portion
DataItem NI0OW-01-KUC num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Suborder # Portion
DataItem NI0OW-01-KUM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Suborder # Portion
DataItem NI0OW-01-NOR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Display Order/Suborder #
DataItem NI0OW-01-ORD num(10,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws array index
DataItem NI0OWDX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen position index
DataItem NI0OWDX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quit flag
DataItem NI0OWEND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// init error flag
DataItem NI0OWIER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time flag
DataItem NI0OWONE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-ivc-txt-rec-seq
DataItem NI0OWSEQ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// comments array
DataItem NI0OWTXA char(74)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-ivc-txt
DataItem NI0OWTXT char(72)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

