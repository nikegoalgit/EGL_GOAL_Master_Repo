package ni0m;

import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPNL002;
import corpcom3.XPNL005;
import corpcom3.XPXX001;
import corpcom3.XPZIT01;
import corpcom4.XSENTRY;
import corpcom4.XSNLS01;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XCTTBL;
import corpx1.XSTTBL;
import corpx1.XWHTBL;
import corpz3.ZITTBL;
import ku.common.KUCREC;
import ni.common.NIOFRGTF;
import ni.common.NIWREC;
import nl.common.NLXREC;
import op.common.OP1REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ts.common.TSCREC;
import ts.common.TSUREC;
import vv.common.VDSTRB01;
import vv.common.VLCZIT01;
import vv.common.VRQTHD01;
import vv.common.VRQTXT01;
//*** PROGRAM=NI0M ****
// ************************************************************
// 
//          NI0M - NIL invoice request Incoterms screen
//          ---------------------------------------------
// 
// This application allows the user to enter the Incoterms
// 'block' that will appear on an invoice.  It edits entries
// against existing tables and can use previously defined
// table entries.
// 
// Maintenance History:
//   Date   Who    Remarks
// -------- ------ --------------------------------------------
// 09-25-89 tgriff Creation
// 12-12-89 tgriff Fix reassignment of freight charges for
//                 no charge orders.  Add display keys to
//                 error traps.
// 12-18-89 jjohns Fix NI0M101 to reposition key after trying
//                 to reassign freight charges
// 05-03-90 jbaker Rewrite! (crapolla exorcism).
// 08-06-90 jshann Changed NI0M001 and NI0M120 to not allow
//                 dup l/c over rides to be moved to work key
// 10-23-90 jshann Changed NI0M120 to allow allow override of
//                 to be same as default shipment code when L/C
//                 override is present.  Changed NI0M001 to use
//                 1st valid request to determine freight.
// 10-15-91 jshann Added pattern code for cxxwyyn inco term
// 11-25-91 jshann Added pattern code for cxfoyyn inco term
// 02-07-92 jjudki Task#491. Changes for distributor table.
// 06-15-92 jjudki Task#643. Change Spanish literal in NI0MS14.
// 08-03-92 jshann default "fo" for warehouse 15
// 06-17-93 jshann added new inco term CR
// 11-15-93 JJUDKI RECOMPILE FOR DB CHANGES.
// y2kfix 02-24-98 pharwo  regen for xx0xs01 changes.
// *********************
Program NI0M type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "NL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  NI0MW01 NI0MW01; // record
  NIWREC NIWREC; // record
  NLXREC NLXREC; // record
  OP1REC OP1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TSCREC TSCREC; // record
  TSUREC TSUREC; // record
  VDSTRB01 VDSTRB01; // record
  VLCZIT01 VLCZIT01; // record
  VRQTHD01 VRQTHD01; // record
  VRQTXT01 VRQTXT01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use NI0MT01 {deleteAfterUse = yes}; // table
  use NI0MT02 {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use XSTTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use ZITTBL {deleteAfterUse = yes}; // table
  use NI0MM.NI0MM100, // form
  	NI0MM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    NI0M000: NI0M000();
    exit program;
  end // end main
end // end NI0M

// main flow
Function NI0M000()
  ;
   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   perform initialization, set application revision nbrs,**/
   /* *   then do main perform until done with application      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0M000";
  COMMAREA.CACURRAP = "NI0M";
  ;
  NI0M001(); /* initilize the application*/
  ;
  NLXREC.NLXEOAF = "N"; /* set end-of-application flag to 'no'*/
  ;
  while (NLXREC.NLXEOAF == "N") /* while not end-of-aplication*/
    NI0M050(); /* process the application screen(s)*/
  end
  ;
  COMMAREA.CACURRAP = "NL0A";
  XPNL002();
  exit program;
end // end NI0M000

// Initialize application
Function NI0M001()
   /* *************************************************************/
         /* initialize the application working storage*/
   /* *************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0M001";
  ;
  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen converse*/
  VGVar.handleHardIOErrors = 1; /* return control to appl if hard db2 error*/
  ;
  set NI0MW01 empty; /* clear working storage rec1*/
  set NIWREC empty;
  set SQLCA empty;
  set VLCZIT01 empty;
  set TSUREC empty;
  set VRQTHD01 empty;
  set VRQTXT01 empty;
  set OP1REC empty;
  set TSCREC empty;
  set KUCREC empty;
  set VDSTRB01 empty;
  ;
  if (COMMAREA.CAFRMSYS != "NI")
    COMMAREA.CAUSERA = " ";
  end
  ;
  XSENTRY(); /* appl entry security*/
  XSSEGTR(); /* set segmented transaction id*/
  ;
  set NLXREC empty; /* clear common working storage*/
  ;
  if (COMMAREA.CAFROMAP == "NI0L"
   || COMMAREA.CAFROMAP == "NI0N")
    ;
    NIWREC.NIWGROUP = COMMAREA.CAUSERA;
    ;
  else
    ;
    COMMAREA.CATOAP = "NI0K"; /* return to ni0k*/
    XPNL002();
    XSPF4(); /* return to main menu*/
    ;
  end
  ;
   /* *************************************************************/
          /* Set up working-storage array of screen names*/
   /* *************************************************************/
  ;
  NLXREC.NLXSNAME[1] = "NI0MM100"; /* init screens used in this appl*/
  ;
  NLXREC.NLXCSCRN = "NI0MM100"; /* set first screen to display*/
  ;
   /* *************************************************************/
               /* Lookup the Invoice Request Header*/
   /* *************************************************************/
  ;
  VRQTHD01.TSFSHPID = NIWREC.TSFSHPID; /* Build NIOREC key*/
  ;
  if (NIWREC.NIWKQIDX > 0
   && NIWREC.NIWKQIDX < 11)
    VRQTHD01.OP1CUOID = NIWREC.NIWOP1CU[NIWKQIDX];
    VRQTHD01.OP1NORID = NIWREC.NIWOP1NO[NIWKQIDX];
    VRQTHD01.OP1PARTN = NIWREC.NIWOP1CH[NIWKQIDX];
    NI0MW01.NI0MWCUO = NIWREC.NIWOP1CU[NIWKQIDX];
    NI0MW01.NI0MWNOR = NIWREC.NIWOP1NO[NIWKQIDX];
    NI0MM100.NI0MMORD = NI0MW01.NI0MWORD;
  else
    NI0MM100.VAGen_EZEMSG = "INVALID SUBSCRIPT PASSED";
    NLXREC.NLXERRF = "Y";
    return;
  end
  ;
  NI0MS01(); /* Select unique - NIOREC*/
  ;
   /* *************************************************************/
                  /* Lookup the Order Header*/
   /* *************************************************************/
  ;
  OP1REC.OP1CUOID = NIWREC.NIWOP1CU[NIWKQIDX]; /* Build*/
  OP1REC.OP1NORID = NIWREC.NIWOP1NO[NIWKQIDX]; /* Order Header*/
  OP1REC.OP1PARTN = NIWREC.NIWOP1CH[NIWKQIDX];
  ;
  NI0MS02(); /* Select unique - OP1REC*/
  ;
  NI0MW01.NI0MWCUO = OP1REC.OP1CUOID; /* format order number*/
  NI0MW01.NI0MWNOR = OP1REC.OP1NORID; /* format sub order number*/
  ;
   /* *************************************************************/
                       /* Lookup Customer*/
   /* *************************************************************/
  ;
  KUCREC.KUCCOID = NIWREC.KUCCOID;
  ;
  NI0MS08(); /* Select unique - KUCREC*/
  ;
   /* *************************************************************/
                       /* Lookup Distributor Info*/
   /* *************************************************************/
  VDSTRB01.KUCCOID = NIWREC.KUCCOID;
  NI0MS34(); /* Select unique - Distributor*/
  ;
   /* *************************************************************/
           /* Lookup the Transportation Shipment Header*/
   /* *************************************************************/
  ;
  TSUREC.TSFSHPID = NIWREC.TSFSHPID;
  TSUREC.KUCCOID = OP1REC.KUCCOID;
  ;
  NI0MS03(); /* Select unique - TSUREC*/
  ;
  NI0MW01.NI0MWIPI = TSUREC.OP1IPIND; /* insurance prepaid indicator*/
  ;
   /* *************************************************************/
                       /* Get Locations*/
   /* *************************************************************/
  ;
  NI0MS18();
  ;
   /* *************************************************************/
            /* Identify Letter of Credit Incoterms*/
   /* *************************************************************/
  ;
  if (VRQTHD01.NCALCIID != 0)
    VLCZIT01.NCALCIID = VRQTHD01.NCALCIID; /* l/c internal id*/
    VLCZIT01.XCTCD = NI0MW01.NI0MWLXC; /* port of loading xctcd*/
    ;
    NI0MS17(); /* Select unique - NCBREC*/
    ;
  end
  ;
   /* *************************************************************/
        /* Search for Previously Assigned Freight Charges*/
   /* *************************************************************/
  ;
  NI0MW01.NI0MWEND = "N"; /* reset end of table flag*/
  NI0MW01.NI0MWFCF = "N"; /* reset frgt chg found flag*/
  ;
  if (NIWKQIDX > 1) /* search only after first request*/
    NI0MS30(); /* declare cursor for niorec*/
    ;
    while (NI0MW01.NI0MWEND == "N") /* while not end of table*/
      NI0MS31(); /* process next row from niorec*/
    end
  end
  ;
   /* *************************************************************/
               /* Reposition NIOREC to current row*/
   /* *************************************************************/
  ;
  VRQTHD01.TSFSHPID = NIWREC.TSFSHPID;
  VRQTHD01.OP1CUOID = NIWREC.NIWOP1CU[NIWKQIDX];
  VRQTHD01.OP1NORID = NIWREC.NIWOP1NO[NIWKQIDX];
  VRQTHD01.OP1PARTN = NIWREC.NIWOP1CH[NIWKQIDX];
  ;
  NI0MS01(); /* select unique - NIOREC*/
  ;
   /* *************************************************************/
   /* Format Freight Flags for Curr Request if charges were found*/
   /* *************************************************************/
  ;
  if (NI0MW01.NI0MWFCF == "Y") /* if frgt chgs found*/
    NI0MW01.NIOFRGTF = " "; /* set frgt chg flag*/
    NI0MW01.NI0MWFFF = "N"; /* inland freight flag*/
    NI0MW01.NI0MWIFF = "N"; /* freight flag*/
    ;
  else
    NI0MW01.NI0MWXPT = VRQTHD01.XPTCD; /* save xptcd for use in S16*/
    ;
    NI0MS16(); /* search all requests for freight flag = 'W'*/
    ;
    /* ***********************************************************/
              /* reposition NIOREC to current row*/
    /* ***********************************************************/
    ;
    VRQTHD01.TSFSHPID = NIWREC.TSFSHPID;
    VRQTHD01.OP1CUOID = NIWREC.NIWOP1CU[NIWKQIDX];
    VRQTHD01.OP1NORID = NIWREC.NIWOP1NO[NIWKQIDX];
    VRQTHD01.OP1PARTN = NIWREC.NIWOP1CH[NIWKQIDX];
    ;
    NI0MS01(); /* select unique - NIOREC*/
    ;
    /* *************************************************************/
     /* Format Frgt Chg Flag if Charges Were Not Assigned Elsewhere*/
    /* *************************************************************/
    ;
    if (VRQTHD01.XPTCD != "NC") /* payment term is not no-charge*/
      NI0MW01.NIOFRGTF = "Y"; /* set frgt chg flag*/
    else /* current order is no-charge*/
      if (NI0MW01.NI0MWFCF == "Y") /* charges found*/
        NI0MW01.NIOFRGTF = " "; /* set frgt chg flag*/
      else /* current order is no-charge*/
        NI0MW01.NIOFRGTF = "W"; /* set frgt chg flag*/
      end
    end
  end
  ;
   /* *************************************************************/
                 /* Format Freight Type Flags*/
   /* *************************************************************/
  ;
  if (NI0MW01.NIOFRGTF == "Y")
                                   /* if frgt chgs assigned to curr request*/
    ;
    if (TSUREC.TSFOINLD > 0) /* If inland frt amt present*/
      NI0MW01.NI0MWIFF = "Y";
    else
      NI0MW01.NI0MWIFF = "N";
    end
    ;
    if (TSUREC.TSFOFRGT > 0) /* If frt amt present*/
      NI0MW01.NI0MWFFF = "Y";
    else
      NI0MW01.NI0MWFFF = "N";
    end
    ;
  else /* freight charges were not assigned to this one*/
    NI0MW01.NI0MWFFF = "N"; /* inland freight flag*/
    NI0MW01.NI0MWIFF = "N"; /* freight flag*/
  end
  ;
   /* *************************************************************/
                 /* Determine Default Incoterms*/
   /* *************************************************************/
  ;
  if (OP1REC.XWHCD != " ") /* If warehouse shipment*/
    if (OP1REC.XWHCD == "15") /* If b-grade warehouse, korea*/
      NI0MW01.NI0MWZC2 = "FO"; /* default is 'F.O.B.'*/
    else
      NI0MW01.NI0MWZC2 = "XW"; /* default is 'EX WAREHOUSE'*/
    end
  else
    if (OP1REC.XGPCD == "03") /* If apparel order*/
      NI0MW01.NI0MWZC2 = "XW"; /* Default is 'EX warehouse'*/
    else /* Not an apparel order*/
      NI0MW01.NI0MWZC2 = "FO"; /* default is 'F.O.B.'*/
    end
  end
  ;
   /* *************************************************************/
               /* Determine Valid Override Code*/
   /* *************************************************************/
  ;
  if (VRQTHD01.ZITCD != " ") /* if a nonblank override exists*/
    NI0MW01.NI0MWZC1 = VRQTHD01.ZITCD; /* existing ovrd incoterm*/
    NI0MW01.NI0MWUIT = VRQTHD01.ZITCD; /* hold unedited override cd*/
  end
  ;
   /* *************************************************************/
    /* if override equals default, space out override per tom*/
   /* *************************************************************/
  ;
  if (NI0MW01.NI0MWZC1 == NI0MW01.NI0MWZC2) /* l/c override  = default*/
    NI0MW01.NI0MWZC1 = " "; /* existing ovrd incoterm*/
     /* MOVE ' ' TO NI0MW01.NI0MWUIT  ; hold unedited override cd*/
  end
  ;
   /* *************************************************************/
                  /* Edit Incoterm Criteria*/
   /* *************************************************************/
  ;
  NI0MW01.NI0MWPAT = 1; /* initialize saved pattern code*/
  NI0MW01.NI0MW1DX = 1; /* initialize T01 index*/
  ;
  if (NI0MW01.NI0MWZIT in NI0MT01.NI0MTZKE) /* if a match is found*/
    if (NI0MT01.NIOPATCD[sysVar.arrayIndex] != " ") /* pattern code not blank*/
      NI0MW01.NI0MW1DX = sysVar.arrayIndex;
                                   /* save beginning position in T01*/
      NI0MW01.NI0MWPAT = sysVar.arrayIndex; /* Save position of match*/
      ;
    else /* pattern code is blank*/
      converseLib.validationFailed(123); /* TERMS COMBINATION IS INVALID*/
      NLXREC.NLXERRF = "Y";
      return;
    end
    NI0MW01.NI0MW1DX = NI0MW01.NI0MW1DX + 1; /* go to next row in table*/
    ;
    /* *************************************************************/
       /* Search for Exact Match of Pattern Code Previously Saved*/
    /* *************************************************************/
    ;
    while (NI0MW01.NI0MWZIT == NI0MT01.NI0MTZKE[NI0MW1DX]) /* zit keys =*/
      if (NI0MT01.NIOPATCD[NI0MW1DX] == VRQTHD01.NIOPATCD)
        NI0MW01.NI0MWPAT = NI0MW01.NI0MW1DX; /* save T01 index*/
      end
      ;
      NI0MW01.NI0MW1DX = NI0MW01.NI0MW1DX + 1; /* go to next row in table*/
      ;
    end
    NI0MW01.NI0MW1DX = NI0MW01.NI0MWPAT; /* save curr pattern index*/
    ;
  else
                                   /* zit key match can't be found in table*/
    converseLib.validationFailed(123); /* TERMS COMBINATION IS INVALID*/
    NLXREC.NLXERRF = "Y";
    return;
  end
  ;
   /* *************************************************************/
         /* Validate Locations and Load Incoterm Text to W/S*/
   /* *************************************************************/
  ;
  NI0MS06();
  ;
  ;
   /* **********************  END NI0M001  ************************/
end // end NI0M001

// decide which map to display
Function NI0M050()
  ;
   /* ************************************************************/
   /* *   control process the application screen(s)             **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0M050"; /* set current process name*/
  ;
  sysVar.arrayIndex = 0;
  NLXREC.NLXSCRNX = 0;
  ;
  if (NLXREC.NLXCSCRN in NLXREC.NLXSNAME) /* if current-screen-name is*/
    NLXREC.NLXSCRNX = sysVar.arrayIndex; /* in the screen-array, then set*/
  end /* the screen-index*/
  ;
  set TA1REC empty;
  TA1REC.TA1MAP = NLXREC.NLXCSCRN; /* prepare for abend*/
  ;
  NLXREC.NLXBLDSC = "Y"; /* set build screen flag to 'yes'*/
  NLXREC.NLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
  ;
  if (NLXREC.NLXSCRNX == 1) /* if screen ni0mm100*/
    while (NLXREC.NLXEOSF == "N") /* show until user is done*/
      NI0M100();
    end
    TA1REC.TA1MAP = NLXREC.NLXCSCRN;
    TA1REC.TA1TBLKE = "UNKNOWN SCREEN NAME";
    TA1REC.TA1LOCAT[2] = NLXREC.NLXCSCRN;
    XPNL005(); /* abend*/
  end
  ;
   /* at this point;*/
       /* if the end-of-application flag (NLXeoaf ) = 'n'*/
         /* the perform will return to the top of ni0m050...*/
       /* else*/
         /* the perform will auto return to ni0m000.*/
  ;
end // end NI0M050

// converse map m100
Function NI0M100()
  ;
   /* ************************************************************/
   /* *    process screen ni0mm100                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from nl0k050 until the end-of-screen   **/
   /* *     flag (nlxeosf) is set to 'y'.                      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0M100";
  ;
  if (NLXREC.NLXBLDSC == "Y")
    NI0M101();
    NLXREC.NLXBLDSC = "Y";
  end
  ;
   /* ***********************************************************/
  converse NI0MM100 ;
  ;
   /* ***********************************************************/
  ;
  VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";
  ;
  NI0M110(); /* validate pfkeys*/
  ;
  if (NLXREC.NLXERRF == "N")
    NI0M120(); /* edit entries and update*/
  end
  ;
  if (NLXREC.NLXERRF == "N")
    NI0M130(); /* determine next action*/
  end
  ;
   /* at this point;*/
     /* if the end-of-screen flag (nlxeosf) is 'n'*/
        /* we go back to top of process ni0m100.*/
     /* if the end-of-screen flag (nlxeosf) is 'y'*/
        /* we return to ni0m050.*/
end // end NI0M100

// Build Incoterms map
Function NI0M101()
   /* *************************************************************/
                      /* BUILD INCOTERMS MAP*/
   /* *************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0M101";
  ;
  if (NLXREC.NLXERRF != "Y" /* if no errors*/
   && converseVar.validationMsgNum == 0) /* and no messages*/
    set NI0MM100 initial; /* reset map to defaults*/
    set NI0MM100.ZITCD cursor;
  end
  ;
  NI0MM100.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  NI0MM100.XXXPRCNM = "NI0M100"; /* process name*/
  ;
  NI0MM100.KUCCOID = NIWREC.KUCCOID; /* customer number*/
  NI0MM100.KUCCONM = NIWREC.KUCCONM; /* customer name*/
  NI0MM100.TSFSHPID = NIWREC.TSFSHPID; /* shipment id*/
  NI0MM100.XCTDESC = NIWREC.XCTDESC; /* country description*/
  NI0MM100.NI0MMORD = NI0MW01.NI0MWORD; /* formated order number*/
  if (NI0MW01.NI0MWZC2 in ZITTBL.ZITCD)
    NI0MM100.NI0MMZIT = ZITTBL.ZITDESC[sysVar.arrayIndex];
  end
  NI0MM100.NI0MMIPI = NI0MW01.NI0MWIPI;
                                   /* insurance prepaid indicator*/
  NI0MM100.NI0MMIFF = NI0MW01.NI0MWIFF; /* inland freight flag*/
  NI0MM100.NI0MMFFF = NI0MW01.NI0MWFFF; /* freight flag*/
  NI0MM100.NI0MMLCT = NI0MW01.NI0MWLCT; /* place of loading city*/
  NI0MM100.NI0MMDCT = NI0MW01.NI0MWDCT; /* place of departure city*/
  NI0MM100.NI0MMWCT = NI0MW01.NI0MWWCT; /* warehouse city*/
  NI0MM100.NI0MMCCT = NI0MW01.NI0MWCCT; /* consolidation place city*/
  NI0MM100.NI0MMFCT = NI0MW01.NI0MWFCT; /* factory city*/
  NI0MM100.NI0MMLXS = NI0MW01.NI0MWLXS; /* place of loading state*/
  NI0MM100.NI0MMDXS = NI0MW01.NI0MWDXS; /* place of departure state*/
  NI0MM100.NI0MMWXS = NI0MW01.NI0MWWXS; /* warehouse state*/
  NI0MM100.NI0MMCXS = NI0MW01.NI0MWCXS; /* consolidation place state*/
  NI0MM100.NI0MMFXS = NI0MW01.NI0MWFXS; /* factory state*/
  NI0MM100.NI0MMLXC = NI0MW01.NI0MWLXC; /* place of loading country*/
  NI0MM100.NI0MMDXC = NI0MW01.NI0MWDXC; /* place of departure country*/
  NI0MM100.NI0MMWXC = NI0MW01.NI0MWWXC; /* warehouse country*/
  NI0MM100.NI0MMCXC = NI0MW01.NI0MWCXC;
                                   /* consolidation place country*/
  NI0MM100.NI0MMFXC = NI0MW01.NI0MWFXC; /* factory country*/
  NI0MM100.NI0MMLCZ = NI0MW01.NI0MWLCZ; /* l/c incoterm code*/
  NI0MM100.NCBLCINL = NI0MW01.NI0MWINL; /* l/c incoterm location*/
  NI0MM100.ZITCD = NI0MW01.NI0MWUIT; /* hold override incoterm*/
  NI0MM100.ZITDESC = " "; /* clear descr in case of bad ovrd code*/
  if (NI0MW01.NI0MWUIT in ZITTBL.ZITCD)
    NI0MM100.ZITDESC = ZITTBL.ZITDESC[sysVar.arrayIndex];
  end
  ;
  NI0MW01.NI0MWIDX = 1;
  while (NI0MW01.NI0MWIDX < 8) /* move the text to the map.*/
    NI0MM100.NI0MMTXT[NI0MWIDX] = NI0MW01.NI0MWTXT[NI0MWIDX];
    NI0MW01.NI0MWIDX = NI0MW01.NI0MWIDX + 1;
  end
  ;
  ;
   /* **********************  END NI0M101  ************************/
end // end NI0M101

// edit pfkeys
Function NI0M110()
   /* *************************************************************/
                         /* Edit PF keys*/
   /* *************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0M110";
  ;
  if (NI0MM100.CATOAP != " ") /* if any fastpath data entered*/
    COMMAREA.CATOAP = NI0MM100.CATOAP;
    COMMAREA.CAITEM = NI0MM100.CAITEM;
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002();
    XSPF4(); /* go to main menu*/
  end
  ;
  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf15)
     /* next sentence*/
  else
    if (converseVar.eventKey is pf7)
      NI0MS32(); /* process bkwd scroll request*/
    else
      if (converseVar.eventKey is pf8)
        NI0MS33(); /* process fwd scroll request*/
      else
        if (converseVar.eventKey is pa1
         || converseVar.eventKey is pa2
         || converseVar.eventKey is pa3)
          converseLib.clearScreen();
          
          converseLib.validationFailed(36); /* loss of keyed data,rekey any change*/
           /* set alterable fields modified*/
          NLXREC.NLXERRF = "Y";
        else
          if (converseVar.eventKey is pf1)
            XSNLS01(); /* nil help routine - exit to gd01*/
          else
            if (converseVar.eventKey is pf4)
              COMMAREA.CAUSERA = " ";
              XSPF4();
            else
              if (converseVar.eventKey is pf3)
                COMMAREA.CATOAP = "NI0L";
                XPNL002();
                XSPF4(); /* go to main menu*/
              else
                if (converseVar.eventKey is pf20)
                  COMMAREA.CATOAP = "NI0J";
                  XPNL002();
                  XSPF4(); /* go to main menu*/
                else
                  COMMAREA.CATOAP = " ";
                  converseLib.validationFailed(2); /* INVALID FUNCTION KEY*/
                  NLXREC.NLXERRF = "Y";
                end
              end
            end
          end
        end
      end
    end
  end
  ;
  ;
   /* **********************  END NI0M110  ************************/
end // end NI0M110

// Edit Screen Entries
Function NI0M120()
   /* *************************************************************/
                    /* Edit Screen Entries*/
   /* *************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0M120";
  ;
  NI0MW01.NI0MWPOP = "N"; /* Set pop-up window flag off*/
  set NI0MM100.ZITCD normal;
  ;
   /* check for pop-up window request*/
  ;
  if (NI0MM100.ZITCD == "?") /* If pop-up window requested*/
    NI0MW01.NI0MWPOP = "Y"; /* Set pop-up window flag on*/
    XPXX001();
    while (XX0XW02.XX0XWEND != "Y")
      XPZIT01();
    end
    if (XX0XW02.XX0XWPIX != 0)
      NI0MM100.ZITCD = XX0XM001.XX0XMCD[XX0XWPIX];
    end
    converseLib.clearScreen();
    
    set NI0MM100.ZITCD cursor;
  end
  ;
   /* *************************************************************/
       /* move spaces to the incoterm text and description*/
   /* *************************************************************/
  ;
  NI0MW01.NI0MWIDX = 1;
  while (NI0MW01.NI0MWIDX < 8)
    NI0MW01.NI0MWTXT[NI0MWIDX] = " ";
    NI0MW01.NI0MWIDX = NI0MW01.NI0MWIDX + 1;
  end
  ;
  ;
   /* *************************************************************/
       /* make sure port of loading and discharge codes exist*/
   /* *************************************************************/
  ;
  ;
   /* *************************************************************/
                      /* edit location codes*/
   /* *************************************************************/
  ;
  if (NI0MM100.NI0MMLCT != NI0MW01.NI0MWLCT /* PORT OF LOADING city*/
   || NI0MW01.NI0MWLLF != "Y")              /* invalid location*/
    TSCREC.TSCLOCCD = NI0MM100.NI0MMLCT; /* format location code*/
    NI0MW01.NI0MWLCT = NI0MM100.NI0MMLCT; /* format w/s code*/
    NI0MS19(); /* get port of loading stuff*/
    if (NI0MW01.NI0MWLLF == "Y") /* if valid location*/
      NI0MW01.NI0MWLMF = "Y"; /* set loc cd mod flag*/
      TSUREC.TSEORIG = TSCREC.TSCLOCCD; /* format location code*/
    else
      return;
    end
  end
  ;
  if (NI0MM100.NI0MMDCT != NI0MW01.NI0MWDCT /* PORT OF DISCHARGE city*/
   || NI0MW01.NI0MWDLF != "Y")              /* invalid location*/
    TSCREC.TSCLOCCD = NI0MM100.NI0MMDCT; /* location code entered*/
    NI0MW01.NI0MWDCT = NI0MM100.NI0MMDCT; /* format w/s code*/
    NI0MS20(); /* get port of discharge stuff*/
    if (NI0MW01.NI0MWDLF == "Y") /* if valid location*/
      NI0MW01.NI0MWLMF = "Y"; /* set loc cd mod flag*/
      TSUREC.TSFDSCHG = TSCREC.TSCLOCCD; /* format location code*/
    else
      return;
    end
  end
  ;
  if (NI0MM100.NI0MMCCT != NI0MW01.NI0MWCCT) /* CONSOLIDATION city*/
    TSCREC.TSCLOCCD = NI0MM100.NI0MMCCT; /* location code entered*/
    NI0MW01.NI0MWCCT = NI0MM100.NI0MMCCT; /* format w/s code*/
    NI0MS22(); /* get consolidation stuff*/
    if (NI0MW01.NI0MWCLF == "Y" /* if valid location*/
     || NI0MM100.NI0MMCCT == " ") /* or consolidation location blank*/
      NI0MW01.NI0MWLMF = "Y"; /* set loc cd mod flag*/
      TSUREC.TSUCNSLD = TSCREC.TSCLOCCD; /* location code entered*/
    else
      return;
    end
  end
  ;
  if (NI0MM100.NI0MMFCT != NI0MW01.NI0MWFCT) /* FACTORY city*/
    TSCREC.TSCLOCCD = NI0MM100.NI0MMFCT; /* location code entered*/
    NI0MW01.NI0MWFCT = NI0MM100.NI0MMFCT; /* format w/s code*/
    NI0MS23(); /* get factory stuff*/
    if (NI0MW01.NI0MWFLF == "Y" /* if valid location*/
     || NI0MM100.NI0MMFCT == " ") /* or factory location blank*/
      NI0MW01.NI0MWLMF = "Y"; /* set loc cd mod flag*/
      TSUREC.TSUFCTY = TSCREC.TSCLOCCD; /* location code entered*/
    else
      return;
    end
  end
  ;
  ;
   /* *************************************************************/
                    /* Edit Override Code*/
   /* *************************************************************/
  ;
  NI0MW01.NI0MWLCO = "N"; /* l/c override flag*/
  NI0MW01.NI0MWZOF = "N"; /* default ovrd flag*/
  NI0MW01.NI0MWOER = "N"; /* override error flag*/
  ;
  NI0MW01.NI0MWUIT = NI0MM100.ZITCD; /* hold unedited ovrd cd*/
  ;
  if (NI0MW01.NI0MWUIT != " ") /* If override present*/
    ;
    if (NI0MW01.NI0MWUIT in ZITTBL.ZITCD /* If valid incoterm*/
     && NI0MW01.NI0MWUIT != "99")       
      ;
      /* *********************************************************/
       /* Check if override & L/C INCOterm equal*/
      /* *********************************************************/
      ;
      if (NI0MW01.NI0MWUIT == VLCZIT01.ZITCD) /* Same incoterm?*/
        ;
        if (VLCZIT01.ZITCD != NI0MW01.NI0MWZC2) /* move if not = to default code*/
          NI0MW01.NI0MWZC1 = VLCZIT01.ZITCD; /* t01 key*/
        end
         /* MOVE NCBREC.ZITCD TO NI0MW01.NI0MWZC1; reformat t01 key*/
        ;
        converseLib.validationFailed(142); /* override same as l/c, entry ignored*/
        NI0MW01.NI0MWOER = "Y"; /* override error flag*/
        ;
          /* check to see if this the first or second time through*/
        ;
        if (NI0MW01.NI0MWUIT == NI0MW01.NI0MWHIT) /* ovrd same as hold code*/
          NI0MW01.NI0MWFTF = "N"; /* move 'N' to first time flag*/
        else
          NI0MW01.NI0MWFTF = "Y"; /* move 'Y' to first time flag*/
          NI0MW01.NI0MWHIT = NI0MW01.NI0MWUIT; /* hold ovrd cd*/
        end
        if (NI0MW01.NI0MWFTF == "Y") /* if the first time*/
          set NI0MM100.ZITCD cursor, modified, bold;
          return;
        end
        ;
      else
        if (VLCZIT01.ZITCD == " ") /* L/C incoterm is blank*/
          ;
          /* *************************************************************/
           /* L/C term code is blank. check if default and ovrd are equal*/
          /* *************************************************************/
          ;
          if (NI0MW01.NI0MWUIT == NI0MW01.NI0MWZC2) /* ovrd same as default*/
            ;
            NI0MW01.NI0MWZC1 = " "; /* reformat t01 key*/
            ;
            NI0MW01.NI0MWOER = "Y"; /* override error flag*/
            converseLib.validationFailed(121); /* override same as default, entry ignored*/
            ;
            /* check to see if first or second time through*/
            ;
            if (NI0MW01.NI0MWUIT == NI0MW01.NI0MWHIT) /* same as before*/
              NI0MW01.NI0MWFTF = "N"; /* move 'N' to first time flag*/
            else
              NI0MW01.NI0MWFTF = "Y"; /* move 'Y' to first time flag*/
              NI0MW01.NI0MWHIT = NI0MW01.NI0MWUIT; /* hold field*/
            end
            if (NI0MW01.NI0MWFTF == "Y") /* if the first time*/
              set NI0MM100.ZITCD cursor, modified, bold;
              return;
            end
            ;
          else /* override isn't the same so move it to the key*/
            NI0MW01.NI0MWZC1 = NI0MW01.NI0MWUIT; /* format t01 key*/
            NI0MW01.NI0MWZOF = "Y"; /* default ovrd flag*/
          end
          ;
        else /* L/C INCOterm is being overriden*/
          ;
           /* if default shipment code is entered as override,*/
           /* set incoterms up with no override value*/
          ;
          if (NI0MW01.NI0MWUIT == NI0MW01.NI0MWZC2) /* override = default*/
            NI0MW01.NI0MWZC1 = " ";
            NI0MW01.NI0MWLCO = "Y"; /* l/c override flag*/
          else
            NI0MW01.NI0MWZC1 = NI0MW01.NI0MWUIT; /* format t01 key*/
            NI0MW01.NI0MWLCO = "Y"; /* l/c override flag*/
          end
          ;
          if (NI0MW01.NI0MWUIT == NI0MW01.NI0MWHIT)
                                   /* ovrd same as hold code*/
            NI0MW01.NI0MWFTF = "N"; /* move 'N' to first time flag*/
          else
            NI0MW01.NI0MWFTF = "Y"; /* move 'Y' to first time flag*/
            NI0MW01.NI0MWHIT = NI0MW01.NI0MWUIT;
                                   /* ovrd to hold field*/
          end
          if (NI0MW01.NI0MWFTF == "Y") /* if the first time*/
            set NI0MM100.ZITCD cursor, modified, bold;
          end
          ;
        end
        ;
      end
    else /* override incoterm code is invalid*/
      ;
      set NI0MM100.ZITCD cursor, modified, bold;
      converseLib.validationFailed(58); /* Invalid Incoterm*/
      NLXREC.NLXERRF = "Y";
      NI0MW01.NI0MWHIT = " "; /* initialze incoterm hold field*/
      return;
    end
  else /* override code is blank*/
    if (VLCZIT01.ZITCD == " ") /* l/c ovrd zitcd*/
      NI0MW01.NI0MWZC1 = NI0MW01.NI0MWUIT; /* t01 key*/
    else /* MOVE*/
      if (VLCZIT01.ZITCD != NI0MW01.NI0MWZC2)
                                           /* move if not = to default code*/
        NI0MW01.NI0MWZC1 = VLCZIT01.ZITCD; /* t01 key*/
      else
        NI0MW01.NI0MWZC1 = "  "; /* t01 key*/
      end
    end
  end
  ;
   /* *************************************************************/
      /* Edit Current ZIT Key with key of current index value*/
   /* *************************************************************/
  ;
  if (NI0MW01.NI0MWZIT == NI0MT01.NI0MTZKE[NI0MW1DX])
                                   /* if key hasn't changed*/
    if (NI0MT01.NIOPATCD[NI0MW1DX] != " ") /* if pattern code is not blank*/
      NI0MW01.NI0MWPAT = NI0MW01.NI0MW1DX; /* pattern is valid so save idx*/
    else
                                   /* key has changed so start from scratch*/
      converseLib.validationFailed(123); /* bad terms combo*/
      NLXREC.NLXERRF = "Y";
      NI0MW01.NI0MWHIT = " "; /* initialze incoterm hold field*/
      return;
    end
    ;
  else
                                   /* key has changed so start from scratch*/
    ;
    NI0MW01.NI0MWPAT = 1; /* initialize pattern code ;*/
    NI0MW01.NI0MW1DX = 1; /* initialize pattern code ;*/
    ;
    if (NI0MW01.NI0MWZIT in NI0MT01.NI0MTZKE)
      NI0MW01.NI0MW1DX = sysVar.arrayIndex; /* save the table position*/
      ;
      if (NI0MT01.NIOPATCD[NI0MW1DX] != " ") /* if pattern code not blank*/
        NI0MW01.NI0MWPAT = NI0MW01.NI0MW1DX; /* save pattern index*/
      else /* terms combo isn't in t01 table*/
        converseLib.validationFailed(123); /* bad terms combo*/
        NLXREC.NLXERRF = "Y";
        NI0MW01.NI0MWHIT = " "; /* initialze incoterm hold field*/
        return;
      end
      ;
    else /* terms combo isn't in t01 table*/
      converseLib.validationFailed(123); /* bad terms combo*/
      NLXREC.NLXERRF = "Y";
      NI0MW01.NI0MWHIT = " "; /* initialze incoterm hold field*/
      return;
    end
  end
  ;
   /* *************************************************************/
      /* Validate Locations and Load Incoterm Text to W/S*/
   /* *************************************************************/
  ;
  NI0MS06();
  ;
  ;
   /* ********************  END NI0M120 ***************************/
end // end NI0M120

// Determine Next Action and Updt
Function NI0M130()
   /* *************************************************************/
              /* Determine Next Action and Update*/
   /* *************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0M130";
  ;
  if (NI0MW01.NI0MWPOP == "Y" /* Pop-up window used*/
   && NI0MW01.NI0MWLCO != "Y")
    return;
    ;
  else
    if (NLXREC.NLXERRF == "Y") /* if there is an error*/
      return;
      ;
    else
      if (converseVar.eventKey is pf13) /* edit and view requested*/
        return;
        ;
      else
        if (NI0MW01.NI0MWLCO == "Y") /* L/C incoterm is being overriden*/
          if (converseVar.eventKey is pf15 /* if 'confirm' PF key is pressed*/
           && NI0MW01.NI0MWFTF != "Y")     /* not the first time*/
             /* next sentence*/
          else
            converseLib.validationFailed(143); /* l/c override, pf15 to confirm*/
            set NI0MM100.ZITCD cursor, bold;
            return;
          end
          ;
        else
          if (converseVar.eventKey is pf7 /* foreward scroll request*/
           || converseVar.eventKey is pf8 /* reverse scroll request*/
           || converseVar.eventKey is pf15) /* 'confirm' when not needed*/
            return;
            ;
          else
            if (NI0MW01.NI0MWOER == "Y" /* if incoterm override ignored*/
             && NI0MW01.NI0MWFTF == "Y") /* first time flag*/
              return;
              ;
            end
          end
        end
      end
    end
  end
  ;
   /* *************************************************************/
                         /* Update Tables*/
   /* *************************************************************/
  ;
  NI0MS15(); /* insert rows in niprec*/
  ;
   /* *************************************************************/
     /* check to see if override ZITCD needs to be reformatted*/
   /* *************************************************************/
  ;
  if (NI0MW01.NI0MWZOF == "Y" /* default zitcd overriden*/
   || NI0MW01.NI0MWLCO == "Y" /* L/C zitcd overridden*/
   || NI0MW01.NI0MWUIT == " ") /* no override*/
    VRQTHD01.ZITCD = NI0MW01.NI0MWUIT;
  end
  ;
   /* *************************************************************/
         /* format pattern code and freight charge flag*/
   /* *************************************************************/
  ;
  VRQTHD01.NIOPATCD = NI0MW01.NI0MWPCD;
                                   /* format current ovrd pattern cd*/
  VRQTHD01.NIOFRGTF = NI0MW01.NIOFRGTF; /* format freight charge flag*/
  ;
  NI0MS13(); /* update unique NIOREC*/
  ;
  if (NI0MW01.NI0MWLMF == "Y") /* if a location has been modified*/
    ;
    NI0MS29(); /* update TSUREC*/
    ;
  end
  ;
   /* *************************************************************/
        /* Exit to Invoice Request Comments Screen*/
   /* *************************************************************/
  COMMAREA.CATOAP = "NI0N";
  XPNL002();
  return;
  ;
  ;
   /* **********************  END NI0M130  ************************/
end // end NI0M130

// Select unique - NIOREC
Function NI0MS01()
   /* *************************************************************/
                    /* NIOREC - Select Unique*/
   /* *************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0MS01";
  ;
  call "IO0600" ("S ", SQLCA, VRQTHD01) {isNoRefresh = yes, isExternal = yes}; /* Read Invreq hd*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0600 "; /* io module*/
    NI0MW01.NI0MWSHP = VRQTHD01.TSFSHPID;
    NI0MW01.NI0MWCOR = VRQTHD01.OP1CUOID;
    NI0MW01.NI0MWSOR = VRQTHD01.OP1NORID;
    TA1REC.TA1TBLKE = NI0MW01.NI0MWKEO;
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VRQTHD01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
  ;
   /* *********************  END NI0MS01  *************************/
end // end NI0MS01

// Select Unique from OP1REC
Function NI0MS02()
   /* *************************************************************/
                      /* OP1REC - Select Unique*/
   /* *************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0MS02";
  ;
  call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0430 "; /* io module*/
    TA1REC.TA1DBASE = "DORDER"; /* database*/
    TA1REC.TA1TBLVU = "VORHDR01"; /* table view*/
    NI0MW01.NI0MWCOR = OP1REC.OP1CUOID; /* customer order number*/
    NI0MW01.NI0MWSOR = OP1REC.OP1NORID; /* nike order number*/
    TA1REC.TA1TBLKE = NI0MW01.NI0MWKOP; /* error key*/
    XPNL005(); /* abend routine*/
  end
  ;
   /* **********************  END NI0MS02  ************************/
end // end NI0MS02

// Select unique - TSUREC
Function NI0MS03()
   /* *************************************************************/
                     /* TSUREC - Select Unique*/
   /* *************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0MS03";
  ;
  call "IO4690" ("S ", SQLCA, TSUREC) {isNoRefresh = yes, isExternal = yes}; /* Read Shipmt Hdr*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4690 "; /* io module*/
    NI0MW01.NI0MWSHU = TSUREC.TSFSHPID; /* shipment id*/
    NI0MW01.NI0MWKUC = TSUREC.KUCCOID; /* customer nbr*/
    TA1REC.TA1TBLKE = NI0MW01.NI0MWKEU; /* error key*/
    TA1REC.TA1DBASE = "DTRANS"; /* database*/
    TA1REC.TA1TBLVU = "VNLSHP01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
   /* **********************  END NI0MS03  ************************/
end // end NI0MS03

// Select unique - TSCREC
Function NI0MS04()
   /* *************************************************************/
                     /* TSCREC - Select Unique*/
   /* *************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0MS04";
  ;
  call "IO2350" ("S ", SQLCA, TSCREC) {isNoRefresh = yes, isExternal = yes}; /* Read TS location*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO2350 "; /* io module*/
    TA1REC.TA1DBASE = "DTRANS"; /* database*/
    TA1REC.TA1TBLVU = "VTSLOC01"; /* table view*/
    TA1REC.TA1TBLKE = TSCREC.TSCLOCCD; /* format errdiag key*/
    XPNL005(); /* abend routine*/
  end
  ;
   /* **********************  END NI0MS04  ************************/
end // end NI0MS04

// Select Unique from NCBREC
Function NI0MS05()
   /* *************************************************************/
                   /* NCBREC - select Unique*/
   /* *************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0MS05";
  ;
  call "IO4290" ("S ", SQLCA, VLCZIT01) {isNoRefresh = yes, isExternal = yes}; /* Select unique Incoterms*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4290 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VLCZIT01"; /* table view*/
    NI0MW01.NI0MWLII = VLCZIT01.NCALCIID; /* l/c internal id*/
    NI0MW01.NI0MWXCT = VLCZIT01.XCTCD; /* country code*/
    TA1REC.TA1TBLKE = NI0MW01.NI0MWKEB; /* format error key*/
    XPNL005(); /* abend routine*/
  end
  ;
   /* **********************  END NI0MS05  ************************/
end // end NI0MS05

// Load Incoterm pattern to W/S
Function NI0MS06()
   /* *************************************************************/
             /* Load Incoterm Pattern To Working Storage*/
   /* *************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0MS06";
  ;
  NI0MW01.NI0MW2DX = 1; /* Search Pattern table*/
  ;
  if (NI0MT01.NIOPATCD[NI0MWPAT] in NI0MT02.NIOPATCD from NI0MW2DX)
    ;
    NI0MW01.NI0MWPCD = NI0MT02.NIOPATCD[sysVar.arrayIndex];
    NI0MW01.NI0MW2DX = sysVar.arrayIndex;
  end
  ;
  NI0MW01.NI0MWIDX = 1; /* Begin at line 1*/
  ;
  while (NI0MT02.NIOPATCD[NI0MW2DX] == NI0MT01.NIOPATCD[NI0MWPAT])
    ;
    if (NI0MT01.NIOPATCD[NI0MWPAT] in NI0MT02.NIOPATCD from NI0MW2DX)
      ;
      NI0MW01.NI0MW2DX = sysVar.arrayIndex;
      NI0MW01.NI0MWSEQ[NI0MWIDX] = NI0MT02.NI0MTSEQ[NI0MW2DX];
      ;
      if (NI0MT02.ZITCD[NI0MW2DX] != " ") /* If Incoterm non-blank*/
        ;
        if (NI0MT02.ZITCD[NI0MW2DX] in ZITTBL.ZITCD) /* If incoterm valid*/
          NI0MW01.NI0MWZDX = sysVar.arrayIndex;
          ;
          NI0MS07(); /* Format variable incoterm*/
          ;
          NI0MW01.NI0MWTXT[NI0MWIDX] = NI0MW01.NI0MWWTX;
          ;
        else /* Incoterm invalid*/
          ;
          converseLib.validationFailed(126); /* PATTERN TABLE HAS CORRUPT DATA*/
          NLXREC.NLXERRF = "Y";
          NLXREC.NLXEOAF = "Y";
          return;
          ;
        end
      else
        ;
        NI0MS14(); /* Seq nos w/literal values*/
        ;
      end
      NI0MW01.NI0MW2DX = NI0MW01.NI0MW2DX + 1;
      NI0MW01.NI0MWIDX = NI0MW01.NI0MWIDX + 1;
    end
  end
  ;
  NI0MW01.NI0MWEND = "Y";
  ;
   /* **********************  END NI0MS06  ************************/
end // end NI0MS06

// Format variable incoterms line
Function NI0MS07()
   /* *************************************************************/
               /* Format Variable Incoterms Line*/
   /* *************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0MS07";
  ;
  NI0MW01.NI0MWFDX = 1; /* Set 'from index' to 1*/
  ;
   /* *************************************************************/
       /* Load in Incoterms description (always first)*/
   /* *************************************************************/
  ;
  if (VDSTRB01.ZFLCD == " ")
    NI0MW01.NI0MWWTX = ZITTBL.ZITDESC[NI0MWZDX];
  else
    if (VDSTRB01.ZFLCD == "FR")
      NI0MW01.NI0MWWTX = ZITTBL.ZITFDESC[NI0MWZDX];
    else
      if (VDSTRB01.ZFLCD == "SP")
        NI0MW01.NI0MWWTX = ZITTBL.ZITSDESC[NI0MWZDX];
      end
    end
  end
  ;
   /* *************************************************************/
         /* Find Incoterm Desc end-of-text (variable)*/
   /* *************************************************************/
  ;
  NI0MW01.NI0MWSCT = 0; /* Set 'space count' to 0*/
  NI0MW01.NI0MWTDX = 1; /* Set 'To' index to 1*/
  while (NI0MW01.NI0MWSCT < 2) /* Until we hit 2 consec. spaces*/
    ;
    if (NI0MW01.NI0MWTBY[NI0MWTDX] == " ")
      NI0MW01.NI0MWSCT = NI0MW01.NI0MWSCT + 1;
    else
      NI0MW01.NI0MWSCT = 0;
    end
    NI0MW01.NI0MWTDX = NI0MW01.NI0MWTDX + 1;
  end
  ;
  NI0MW01.NI0MWTDX = NI0MW01.NI0MWTDX - 2;
  NI0MW01.NI0MWTBY[NI0MWTDX] = ",";
  NI0MW01.NI0MWTDX = NI0MW01.NI0MWTDX + 2;
  ;
   /* *************************************************************/
          /* Determine which location will be used...*/
   /* *************************************************************/
  ;
  if (NI0MM100.ZITCD == " " /* Shipment override incoterm is blank*/
   && VLCZIT01.ZITCD != " " /* and L/C Incoterm is not*/
   && NI0MT02.ZITCD[NI0MW2DX] == VLCZIT01.ZITCD)
    NI0MW01.NI0MWSCT = 0;
    NI0MW01.NI0MWFDX = 1;
    ;
    NI0MW01.NI0MWBUF = VLCZIT01.NCBLCINL; /* Use L/C incoterm location*/
    ;
    NI0MS09(); /* Byte-for-byte array move*/
    ;
  else /* Get location from pre-defined...*/
    ;
    NI0MS10(); /* Find location, load*/
    ;
  end
  ;
  ;
   /* **********************  END NI0MS07  ************************/
end // end NI0MS07

// Select Unique - KUCREC
Function NI0MS08()
   /* *************************************************************/
                    /* select unique - kucrec*/
   /* *************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0MS08"; /* set current proc name*/
  ;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0240 "; /* io module*/
    TA1REC.TA1DBASE = "DCUST"; /* database*/
    TA1REC.TA1TBLVU = "VCMPNY01"; /* table view*/
    NI0MW01.NI0MWKUC = KUCREC.KUCCOID; /* reformat key*/
    TA1REC.TA1TBLKE = NI0MW01.NI0MWKUC; /* display key*/
    XPNL005(); /* abend routine*/
  end
  ;
   /* **********************  END NI0MS08  ************************/
end // end NI0MS08

// Byte for byte array move
Function NI0MS09()
   /* *************************************************************/
                   /* Byte for byte array move*/
   /* *************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0MS09";
  ;
  while (NI0MW01.NI0MWSCT < 2) /* Load/Look for 2 consec. spaces*/
    if (NI0MW01.NI0MWBBY[NI0MWFDX] == " ")
      NI0MW01.NI0MWSCT = NI0MW01.NI0MWSCT + 1;
    else
      NI0MW01.NI0MWSCT = 0;
    end
    NI0MW01.NI0MWTBY[NI0MWTDX] = NI0MW01.NI0MWBBY[NI0MWFDX];
    NI0MW01.NI0MWFDX = NI0MW01.NI0MWFDX + 1;
    NI0MW01.NI0MWTDX = NI0MW01.NI0MWTDX + 1;
  end
  ;
  ;
   /* **********************  END NI0MS09  ************************/
end // end NI0MS09

// format incoterm location lines
Function NI0MS10()
   /* *************************************************************/
               /* Format incoterm location text lines*/
   /* *************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0MS10";
  ;
  NI0MW01.NI0MWTDX = NI0MW01.NI0MWTDX - 2;
  NI0MW01.NI0MWTBY[NI0MWTDX] = ",";
  NI0MW01.NI0MWTDX = NI0MW01.NI0MWTDX + 2;
  ;
   /* *************************************************************/
        /* Was the PORT OF LOADING location required?*/
   /* *************************************************************/
  ;
  NI0MW01.NI0MWFDX = 1; /* Set 'From' index to 1*/
  NI0MW01.NI0MWSCT = 0; /* Set 'space count' to 0*/
  ;
  if (ZITTBL.ZITPOLFL[NI0MWZDX] == "Y") /* is PORT OF LOADING rqrd*/
    if (NI0MW01.NI0MWLLF == "Y") /* and valid 'PORT OF LOADING' exists*/
      ;
      NI0MS24(); /* format 'PORT OF LOADING' city, state, country*/
      ;
    else
      converseLib.validationFailed(129); /* Port of loading location required*/
      set NI0MM100.NI0MMLCT cursor, bold; /* position cursor*/
      NLXREC.NLXERRF = "Y";
      return;
    end
  end
  ;
   /* *************************************************************/
        /* Was the PORT OF DISCHARGE location required?*/
   /* *************************************************************/
  ;
  NI0MW01.NI0MWFDX = 1; /* Set 'From' index to 1*/
  NI0MW01.NI0MWSCT = 0; /* Set 'space count' to 0*/
  ;
  if (ZITTBL.ZITPODFL[NI0MWZDX] == "Y") /* is PORT OF DISCHARGE reqd*/
    if (NI0MW01.NI0MWDLF == "Y") /* and valid 'PORT OF DISCHARGE' exists*/
      ;
      NI0MS25(); /* format 'PORT OF DISCHARGE' city,*/
                                   /* state, country*/
      ;
    else
      converseLib.validationFailed(130); /* Port of discharge location required*/
      set NI0MM100.NI0MMDCT cursor, bold; /* position cursor*/
      NLXREC.NLXERRF = "Y";
      return;
    end
  end
  ;
   /* *************************************************************/
          /* Was the WAREHOUSE LOCATION required?*/
   /* *************************************************************/
  NI0MW01.NI0MWFDX = 1; /* Set 'From' index to 1*/
  NI0MW01.NI0MWSCT = 0; /* Set 'space count' to 0*/
  ;
  if (ZITTBL.ZITWHSFL[NI0MWZDX] == "Y") /* If 'WAREHOUSE LOCATION' required*/
    ;
    NI0MS26(); /* format 'WAREHOUSE LOCATION' city,*/
                                   /* state, country*/
    ;
  end
  ;
   /* *************************************************************/
          /* Was the CONSOLIDATION LOCATION required?*/
   /* *************************************************************/
  NI0MW01.NI0MWFDX = 1; /* Set 'From' index to 1*/
  NI0MW01.NI0MWSCT = 0; /* Set 'space count' to 0*/
  ;
  if (ZITTBL.ZITCONFL[NI0MWZDX] == "Y")
                                   /* If 'CONSOLIDATION LOC' required*/
    if (NI0MW01.NI0MWCLF == "Y") /* and valid 'CONSOLIDATION LOC' exists*/
      ;
      NI0MS27(); /* format 'CONSOLIDATION LOCATION' city, state, country*/
      ;
    else
      converseLib.validationFailed(120); /* Consolidation location required*/
      set NI0MM100.NI0MMCCT cursor, bold; /* position cursor*/
      NLXREC.NLXERRF = "Y";
      return;
    end
  end
  ;
   /* *************************************************************/
            /* Was the Factory location required?*/
   /* *************************************************************/
  NI0MW01.NI0MWFDX = 1; /* Set 'From' index to 1*/
  NI0MW01.NI0MWSCT = 0; /* Set 'space count' to 0*/
  ;
  if (ZITTBL.ZITFACFL[NI0MWZDX] == "Y")
                                   /* If 'FACTORY LOCATION' required*/
    if (NI0MW01.NI0MWFLF == "Y") /* and valid 'FACTORY LOCATION' exists*/
      ;
      NI0MS28(); /* format 'FACTORY LOCATION' city, state, country*/
      ;
    else
      converseLib.validationFailed(132); /* Factory location required*/
      set NI0MM100.NI0MMFCT cursor, bold; /* position cursor*/
      NLXREC.NLXERRF = "Y";
      ;
    end
  end
  ;
  ;
   /* **********************  END NI0MS10  ************************/
end // end NI0MS10

// Delete Unique - NIPREC
Function NI0MS11()
   /* *************************************************************/
                   /* NIPREC - Delete Unique*/
   /* *************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0MS11";
  ;
  call "IO0610" ("D ", SQLCA, VRQTXT01) {isNoRefresh = yes, isExternal = yes}; /* Delete unique*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "D      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0610 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VRQTXT01"; /* table view*/
    NI0MW01.NI0MWSHP = VRQTXT01.TSFSHPID;
    NI0MW01.NI0MWCOR = VRQTXT01.OP1CUOID;
    NI0MW01.NI0MWSOR = VRQTXT01.OP1NORID;
    TA1REC.TA1TBLKE = NI0MW01.NI0MWKEO;
    XPNL005(); /* abend routine*/
  end
  ;
  ;
   /* **********************  END NI0MS11  ************************/
end // end NI0MS11

// Insert unique - NIPREC
Function NI0MS12()
   /* *************************************************************/
                   /* NIPREC - Insert Unique*/
   /* *************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0MS12";
  ;
  call "IO0610" ("A ", SQLCA, VRQTXT01) {isNoRefresh = yes, isExternal = yes}; /* Insert unique*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "A      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0610 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VRQTXT01"; /* table view*/
    NI0MW01.NI0MWSHP = VRQTXT01.TSFSHPID;
    NI0MW01.NI0MWCOR = VRQTXT01.OP1CUOID;
    NI0MW01.NI0MWSOR = VRQTXT01.OP1NORID;
    TA1REC.TA1TBLKE = NI0MW01.NI0MWKEO;
    XPNL005(); /* abend routine*/
  end
  ;
  ;
   /* **********************  END NI0MS12  ************************/
end // end NI0MS12

// Update - NIOREC
Function NI0MS13()
   /* *************************************************************/
                      /* NIOREC - Update Unique*/
   /* *************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0MS13";
  ;
  call "IO0600" ("U ", SQLCA, VRQTHD01) {isNoRefresh = yes, isExternal = yes}; /* Update Invreq hd*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "U      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0600 "; /* io module*/
    NI0MW01.NI0MWSHP = VRQTHD01.TSFSHPID;
    NI0MW01.NI0MWCOR = VRQTHD01.OP1CUOID;
    NI0MW01.NI0MWSOR = VRQTHD01.OP1NORID;
    TA1REC.TA1TBLKE = NI0MW01.NI0MWKEO;
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VRQTHD01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
  ;
   /* **********************  END NI0MS13  ************************/
end // end NI0MS13

// Format frght and ins literals
Function NI0MS14()
   /* *************************************************************/
   /* load insurance terms and freight terms literals to W/S.*/
   /* *************************************************************/
  ;
  if (NI0MT02.NI0MTSEQ[NI0MW2DX] == 2)
    if (VDSTRB01.ZFLCD == " ")
      NI0MW01.NI0MWLI2 = "INSURANCE PREPAID";
      NI0MW01.NI0MWTXT[NI0MWIDX] = NI0MW01.NI0MWLIT;
    else
      if (VDSTRB01.ZFLCD == "FR")
        NI0MW01.NI0MWLI2 = "ASSURANCE PAYEE D AVANCE";
        NI0MW01.NI0MWTXT[NI0MWIDX] = NI0MW01.NI0MWLIT;
      else
        if (VDSTRB01.ZFLCD == "SP")
          NI0MW01.NI0MWLI2 = "SEGURO PREPAGADO";
          NI0MW01.NI0MWTXT[NI0MWIDX] = NI0MW01.NI0MWLIT;
        end
      end
    end
  end
  ;
  if (NI0MT02.NI0MTSEQ[NI0MW2DX] == 3)
    if (VDSTRB01.ZFLCD == " ") /* Use English*/
      NI0MW01.NI0MWLI2 = "INLAND FREIGHT";
      NI0MW01.NI0MWTXT[NI0MWIDX] = NI0MW01.NI0MWLIT;
    else
      if (VDSTRB01.ZFLCD == "FR") /* Use French*/
        NI0MW01.NI0MWLI2 = "FRET INTERIEUR";
        NI0MW01.NI0MWTXT[NI0MWIDX] = NI0MW01.NI0MWLIT;
      else
        if (VDSTRB01.ZFLCD == "SP") /* Use Spanish*/
          NI0MW01.NI0MWLI2 = "FLETE TERRESTRE (INLAND FREIGHT)";
          NI0MW01.NI0MWTXT[NI0MWIDX] = NI0MW01.NI0MWLIT;
        end
      end
    end
  end
  ;
  if (NI0MT02.NI0MTSEQ[NI0MW2DX] == 5)
    if (VDSTRB01.ZFLCD == " ") /* Use English*/
      NI0MW01.NI0MWLI2 = "INSURANCE PREPAID";
      NI0MW01.NI0MWTXT[NI0MWIDX] = NI0MW01.NI0MWLIT;
    else
      if (VDSTRB01.ZFLCD == "FR")
        NI0MW01.NI0MWLI2 = "ASSURANCE PAYEE D AVANCE";
        NI0MW01.NI0MWTXT[NI0MWIDX] = NI0MW01.NI0MWLIT;
      else
        if (VDSTRB01.ZFLCD == "SP")
          NI0MW01.NI0MWLI2 = "SEGURO PREPAGADO";
          NI0MW01.NI0MWTXT[NI0MWIDX] = NI0MW01.NI0MWLIT;
        end
      end
    end
  end
  ;
  if (NI0MT02.NI0MTSEQ[NI0MW2DX] == 6)
    if (VDSTRB01.ZFLCD == " ") /* Use English*/
      NI0MW01.NI0MWLI2 = "FREIGHT";
      NI0MW01.NI0MWTXT[NI0MWIDX] = NI0MW01.NI0MWLIT;
    else
      if (VDSTRB01.ZFLCD == "FR") /* Use French*/
        NI0MW01.NI0MWLI2 = "FRET";
        NI0MW01.NI0MWTXT[NI0MWIDX] = NI0MW01.NI0MWLIT;
      else
        if (VDSTRB01.ZFLCD == "SP") /* Use Spanish*/
          NI0MW01.NI0MWLI2 = "FLETE (FREIGHT)";
          NI0MW01.NI0MWTXT[NI0MWIDX] = NI0MW01.NI0MWLIT;
        end
      end
    end
  end
  ;
  ;
   /* **********************  END NI0MS14  ************************/
end // end NI0MS14

// add NIPREC rows
Function NI0MS15()
   /* *************************************************************/
                       /* add NIPREC rows*/
   /* *************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0MS15";
  ;
  NI0MW01.NI0MWIDX = 1; /* From first entry*/
  while (NI0MW01.NI0MWIDX < 8) /* To last entry*/
    ;
    VRQTXT01.TSFSHPID = NIWREC.TSFSHPID; /* Build key*/
    VRQTXT01.OP1CUOID = NIWREC.NIWOP1CU[NIWKQIDX];
    VRQTXT01.OP1NORID = NIWREC.NIWOP1NO[NIWKQIDX];
    VRQTXT01.OP1PARTN = NIWREC.NIWOP1CH[NIWKQIDX];
    VRQTXT01.NIFTXTYP = "I";
    VRQTXT01.NIFTXSEQ = NI0MW01.NI0MWIDX;
    ;
    NI0MS11(); /* Delete unique - NIPREC*/
    ;
    NI0MW01.NI0MWIDX = NI0MW01.NI0MWIDX + 1;
  end
  ;
  XX0XS01();
  VRQTXT01.ZZZSDT = XX0XW01.XX0XWDAT;
  VRQTXT01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VRQTXT01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  NI0MW01.NI0MWIDX = 1; /* From first array entry*/
  ;
  while (NI0MW01.NI0MWIDX < 8) /* To last array entry*/
    ;
    if (NI0MW01.NI0MWTXT[NI0MWIDX] != " ") /* For non-space text*/
      ;
      VRQTXT01.NIFTXTYP = "I";
      VRQTXT01.NIFTXSEQ = NI0MW01.NI0MWSEQ[NI0MWIDX];
      VRQTXT01.NIFTXT = NI0MW01.NI0MWTXT[NI0MWIDX];
      ;
      NI0MS12(); /* Insert row - NIPREC*/
      ;
    end
    ;
    NI0MW01.NI0MWIDX = NI0MW01.NI0MWIDX + 1;
    ;
  end
  ;
  ;
   /* **********************  END NI0MS15  ************************/
end // end NI0MS15

// Scan Orders for Weight Assign
Function NI0MS16()
   /* *************************************************************/
         /* Scan Orders for Weight and Measures Assignment*/
   /* *************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0MS16";
  ;
  NI0MW01.NI0MWIDX = 1;
  NI0MW01.NI0MWFCF = "N"; /* Set 'frt chgs found' flag off*/
  VRQTHD01.TSFSHPID = NIWREC.TSFSHPID; /* Build key*/
  ;
  while (NI0MW01.NI0MWIDX < 11 /* For all array entries*/
   && NIWREC.NIWOP1CU[NI0MWIDX] != 0) /* where Order is present*/
    VRQTHD01.OP1CUOID = NIWREC.NIWOP1CU[NI0MWIDX];
    VRQTHD01.OP1NORID = NIWREC.NIWOP1NO[NI0MWIDX];
    VRQTHD01.OP1PARTN = NIWREC.NIWOP1CH[NI0MWIDX];
    ;
    NI0MS01(); /* Select unique - NIOREC*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0 /* If row is found*/
     && NIWREC.NIWKQIDX != NI0MW01.NI0MWIDX) /* not the same order*/
      ;
      if (VRQTHD01.NIOFRGTF == "W") /* weights and measures assigned*/
        ;
        if (NI0MW01.NI0MWXPT == "NC") /* pmt terms*/
          NI0MW01.NI0MWFCF = "Y"; /* charges found*/
          NI0MW01.NI0MWIDX = 10; /* get out of loop*/
        else
          VRQTHD01.NIOFRGTF = " "; /* frgt chg flag*/
          NI0MS13(); /* Update Invoice Request header*/
        end
        ;
      end
    end
    NI0MW01.NI0MWIDX = NI0MW01.NI0MWIDX + 1;
  end
  ;
   /* **********************  END NI0MS16  ************************/
end // end NI0MS16

// GET LETTER OF CREDIT INCOTERMS
Function NI0MS17()
   /* *************************************************************/
               /* Get Letter of Credit Incoterms*/
   /* *************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0MS17";
  ;
  NI0MS05(); /* Select unique - NCBREC*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* If found*/
    ;
    NI0MW01.NI0MWZC1 = VLCZIT01.ZITCD;
    if (VLCZIT01.ZITCD in ZITTBL.ZITCD)
      NI0MW01.NI0MWLCZ = ZITTBL.ZITDESC[sysVar.arrayIndex];
    end
                                   /* save l/c zit stuff*/
    NI0MW01.NI0MWINL = VLCZIT01.NCBLCINL;
    ;
  else /* NOT found*/
    ;
    NI0MW01.NI0MWLCZ = " ";
    NI0MW01.NI0MWINL = " ";
    ;
  end
  ;
  ;
   /* **********************  END NI0MS17  ************************/
end // end NI0MS17

// Load Locations
Function NI0MS18()
   /* *************************************************************/
                      /* Load Locations*/
   /* *************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0MS18";
  ;
  TSCREC.TSCLOCCD = TSUREC.TSEORIG; /* origin location code*/
  NI0MW01.NI0MWLCT = TSUREC.TSEORIG; /* format map*/
  NI0MS19(); /* get port of loading*/
  ;
  TSCREC.TSCLOCCD = TSUREC.TSFDSCHG; /* discharge location code*/
  NI0MW01.NI0MWDCT = TSUREC.TSFDSCHG; /* format map*/
  NI0MS20(); /* get port of discharge*/
  ;
  NI0MS21(); /* get warehouse data*/
  ;
  TSCREC.TSCLOCCD = TSUREC.TSUCNSLD; /* consolidation location code*/
  NI0MW01.NI0MWCCT = TSUREC.TSUCNSLD; /* format map*/
  NI0MS22(); /* get consolidation location*/
  ;
  TSCREC.TSCLOCCD = TSUREC.TSUFCTY; /* factory location code*/
  NI0MW01.NI0MWFCT = TSUREC.TSUFCTY; /* format map*/
  NI0MS23(); /* get factory location*/
  ;
  ;
   /* **********************  END NI0MS18  ************************/
end // end NI0MS18

// Get Port of Loading Data
Function NI0MS19()
   /* *************************************************************/
            /* Get Port of Loading Location Descriptions*/
   /* *************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0MS19";
  ;
  NI0MS04(); /* select unique - TSCREC*/
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* location code not found*/
    NI0MW01.NI0MWLXS = " "; /* initialize state code*/
    NI0MW01.NI0MWLXC = " "; /* initialize country code*/
    converseLib.validationFailed(162); /* location code missing or invalid*/
    NLXREC.NLXERRF = "Y"; /* error flag*/
    NI0MW01.NI0MWLLF = "N"; /* loading location found flag*/
    set NI0MM100.NI0MMLCT cursor, bold; /* position cursor and highlight*/
  else
    NI0MW01.NI0MWLCT = TSCREC.XXXCITY; /* format city*/
    NI0MW01.NI0MWLXS = TSCREC.XSTCD; /* format state code*/
    NI0MW01.NI0MWLXC = TSCREC.XCTCD; /* format country code*/
    NI0MW01.NI0MWWCT = TSCREC.XXXCITY; /* format warehoue default ct*/
    NI0MW01.NI0MWWXS = TSCREC.XSTCD; /* format warehouse default st*/
    NI0MW01.NI0MWWXC = TSCREC.XCTCD; /* format warehouse default ctry*/
    NI0MW01.NI0MWLLF = "Y"; /* loading location found flag*/
  end
  ;
  ;
   /* **********************  END NI0MS19  ************************/
end // end NI0MS19

// Get Port of Discharge
Function NI0MS20()
   /* *************************************************************/
            /* Get Port of Discharge Location Descriptions*/
   /* *************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0MS20";
  ;
  NI0MS04(); /* select unique - TSCREC*/
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* discharge code not found*/
    NI0MW01.NI0MWDXS = " "; /* initialize state code*/
    NI0MW01.NI0MWDXC = " "; /* initialize country code*/
    converseLib.validationFailed(162); /* location code missing or invalid*/
    NLXREC.NLXERRF = "Y"; /* error flag*/
    NI0MW01.NI0MWDLF = "N"; /* discharge location found flag*/
    set NI0MM100.NI0MMDCT cursor, bold; /* position cursor and highlight*/
  else
    NI0MW01.NI0MWDCT = TSCREC.XXXCITY; /* format city*/
    NI0MW01.NI0MWDXS = TSCREC.XSTCD; /* format state code*/
    NI0MW01.NI0MWDXC = TSCREC.XCTCD; /* format country code*/
    NI0MW01.NI0MWDLF = "Y"; /* discharge location found flag*/
  end
  ;
  ;
   /* **********************  END NI0MS20  ************************/
end // end NI0MS20

// Get Warehouse Location
Function NI0MS21()
   /* *************************************************************/
              /* Get Warehouse Location Descriptions*/
   /* *************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0MS21";
  ;
  if (OP1REC.XWHCD != " ") /* warehouse code not blank*/
    if (OP1REC.XWHCD in XWHTBL.XWHCD) /* search table*/
      NI0MW01.NI0MWWCT = XWHTBL.XXXCITY[sysVar.arrayIndex]; /* format city*/
      NI0MW01.NI0MWWXS = XWHTBL.XSTCD[sysVar.arrayIndex]; /* format state*/
      NI0MW01.NI0MWWXC = "USA"; /* format country*/
    end
  end
  ;
  ;
   /* **********************  END NI0MS21  ************************/
end // end NI0MS21

// Get Consolidation Location
Function NI0MS22()
   /* *************************************************************/
            /* Get Consolidation Point Location Descriptions*/
   /* *************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0MS22";
  ;
  if (TSCREC.TSCLOCCD != " ") /* consolidation code not blank*/
    NI0MS04(); /* select unique - TSCREC*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* location code not found*/
      NI0MW01.NI0MWCXS = " "; /* initialize state code*/
      NI0MW01.NI0MWCXC = " "; /* initialize country code*/
      converseLib.validationFailed(162); /* location code missing or invalid*/
      NLXREC.NLXERRF = "Y"; /* error flag*/
      NI0MW01.NI0MWCLF = "N"; /* cnsldtion location found flag*/
      set NI0MM100.NI0MMCCT cursor, bold; /* position cursor and highlight*/
    else
      NI0MW01.NI0MWCCT = TSCREC.XXXCITY; /* format city*/
      NI0MW01.NI0MWCXS = TSCREC.XSTCD; /* format state code*/
      NI0MW01.NI0MWCXC = TSCREC.XCTCD; /* format country code*/
      NI0MW01.NI0MWCLF = "Y"; /* cnsldtion location found flag*/
    end
  else
    NI0MW01.NI0MWCXS = " "; /* initialize state code*/
    NI0MW01.NI0MWCXC = " "; /* initialize country code*/
    NI0MW01.NI0MWCLF = "N"; /* cnsldtion location found flag*/
  end
  ;
  ;
   /* **********************  END NI0MS22  ************************/
end // end NI0MS22

// Get Factory Location
Function NI0MS23()
   /* *************************************************************/
               /* Get Factory Location Descriptions*/
   /* *************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0MS23";
  ;
  if (TSCREC.TSCLOCCD != " ") /* consolidation code not blank*/
    NI0MS04(); /* select unique - TSCREC*/
    ;
    if (SQLCA.VAGen_SQLCODE == 100) /* location code not found*/
      NI0MW01.NI0MWFXS = " "; /* initialize state code*/
      NI0MW01.NI0MWFXC = " "; /* initialize country code*/
      converseLib.validationFailed(162); /* location code missing or invalid*/
      NLXREC.NLXERRF = "Y"; /* error flag*/
      NI0MW01.NI0MWFLF = "N"; /* factory location found flag*/
      set NI0MM100.NI0MMFCT cursor, bold; /* position cursor and highlight*/
      NI0MW01.NI0MWFLF = " "; /* factory location found flag*/
    else
      NI0MW01.NI0MWFCT = TSCREC.XXXCITY; /* format city*/
      NI0MW01.NI0MWFXS = TSCREC.XSTCD; /* format state code*/
      NI0MW01.NI0MWFXC = TSCREC.XCTCD; /* format country code*/
      NI0MW01.NI0MWFLF = "Y"; /* factory location found flag*/
    end
  else
    NI0MW01.NI0MWFLF = "N"; /* factory location found flag*/
    NI0MW01.NI0MWFXS = " "; /* initialize state code*/
    NI0MW01.NI0MWFXC = " "; /* initialize country code*/
  end
  ;
  ;
   /* **********************  END NI0MS23  ************************/
end // end NI0MS23

// format PORT OF LOADING text
Function NI0MS24()
   /* *************************************************************/
          /* format 'PORT OF LOADING' city, state, country*/
   /* *************************************************************/
  ;
  if (NI0MW01.NI0MWLXC in XCTTBL.XCTCD)
    NI0MW01.NI0MWBUF = XCTTBL.XCTDESC[sysVar.arrayIndex];
  end
  if (NI0MW01.NI0MWLCT != NI0MW01.NI0MWBUF) /* City&country equal?*/
    ;
    NI0MW01.NI0MWBUF = NI0MW01.NI0MWLCT; /* No...*/
    ;
    NI0MS09(); /* Byte for byte array move*/
    ;
    NI0MW01.NI0MWTDX = NI0MW01.NI0MWTDX - 2;
    NI0MW01.NI0MWTBY[NI0MWTDX] = ",";
    NI0MW01.NI0MWTDX = NI0MW01.NI0MWTDX + 2;
    ;
  end
  ;
  if (NI0MW01.NI0MWLXS != " ")
    NI0MW01.NI0MWFDX = 1;
    NI0MW01.NI0MWSCT = 0;
    NI0MW01.NI0MWBUF = NI0MW01.NI0MWLXS;
    ;
    NI0MS09(); /* Byte for byte array move*/
    ;
  end
  if (NI0MW01.NI0MWLXC != " ")
    NI0MW01.NI0MWFDX = 1;
    NI0MW01.NI0MWSCT = 0;
    if (VDSTRB01.ZFLCD == " ")
      if (NI0MW01.NI0MWLXC in XCTTBL.XCTCD)
        NI0MW01.NI0MWBUF = XCTTBL.XCTDESC[sysVar.arrayIndex];
      end
    else
      if (VDSTRB01.ZFLCD == "FR")
        if (NI0MW01.NI0MWLXC in XCTTBL.XCTCD)
          NI0MW01.NI0MWBUF = XCTTBL.XCTFRND[sysVar.arrayIndex];
        end
      else
        if (VDSTRB01.ZFLCD == "SP")
          if (NI0MW01.NI0MWLXC in XCTTBL.XCTCD)
            NI0MW01.NI0MWBUF = XCTTBL.XCTSPND[sysVar.arrayIndex];
          end
        end
      end
    end
    ;
    NI0MS09(); /* Byte for byte array move*/
    ;
  end
  ;
  ;
   /* **********************  END NI0MS24  ************************/
end // end NI0MS24

// format DISCHARGE LOCATION text
Function NI0MS25()
   /* *************************************************************/
        /* format 'PORT OF DISCHARGE' city, state, country*/
   /* *************************************************************/
  ;
  if (NI0MW01.NI0MWDXC in XCTTBL.XCTCD)
    NI0MW01.NI0MWBUF = XCTTBL.XCTDESC[sysVar.arrayIndex];
  end
  if (NI0MW01.NI0MWDCT != NI0MW01.NI0MWBUF) /* City&country equal?*/
    ;
    NI0MW01.NI0MWBUF = NI0MW01.NI0MWDCT;
    ;
    NI0MS09(); /* Byte for byte array move*/
    ;
    NI0MW01.NI0MWTDX = NI0MW01.NI0MWTDX - 2;
    NI0MW01.NI0MWTBY[NI0MWTDX] = ",";
    NI0MW01.NI0MWTDX = NI0MW01.NI0MWTDX + 2;
    ;
  end
  ;
  if (NI0MW01.NI0MWDXS != " ")
    NI0MW01.NI0MWFDX = 1;
    NI0MW01.NI0MWSCT = 0;
    NI0MW01.NI0MWBUF = NI0MW01.NI0MWDXS;
    ;
    NI0MS09(); /* Byte for byte array move*/
    ;
  end
  if (NI0MW01.NI0MWDXC != " ")
    NI0MW01.NI0MWFDX = 1;
    NI0MW01.NI0MWSCT = 0;
    if (VDSTRB01.ZFLCD == " ")
      if (NI0MW01.NI0MWDXC in XCTTBL.XCTCD)
        NI0MW01.NI0MWBUF = XCTTBL.XCTDESC[sysVar.arrayIndex];
      end
    else
      if (VDSTRB01.ZFLCD == "FR")
        if (NI0MW01.NI0MWDXC in XCTTBL.XCTCD)
          NI0MW01.NI0MWBUF = XCTTBL.XCTFRND[sysVar.arrayIndex];
        end
      else
        if (VDSTRB01.ZFLCD == "SP")
          if (NI0MW01.NI0MWDXC in XCTTBL.XCTCD)
            NI0MW01.NI0MWBUF = XCTTBL.XCTSPND[sysVar.arrayIndex];
          end
        end
      end
    end
    ;
    NI0MS09(); /* Byte for byte array move*/
    ;
  end
  ;
   /* **********************  END NI0MS25  ************************/
end // end NI0MS25

// format WAREHOUSE LOCATION text
Function NI0MS26()
   /* *************************************************************/
        /* format 'WAREHOUSE LOCATION' city, state, country*/
   /* *************************************************************/
  ;
  if (NI0MW01.NI0MWWXC in XCTTBL.XCTCD)
    NI0MW01.NI0MWBUF = XCTTBL.XCTDESC[sysVar.arrayIndex];
  end
  if (NI0MW01.NI0MWWCT != NI0MW01.NI0MWBUF) /* City&country equal?*/
    ;
    NI0MW01.NI0MWBUF = NI0MW01.NI0MWWCT;
    ;
    NI0MS09(); /* Byte for byte array move*/
    ;
    NI0MW01.NI0MWTDX = NI0MW01.NI0MWTDX - 2;
    NI0MW01.NI0MWTBY[NI0MWTDX] = ",";
    NI0MW01.NI0MWTDX = NI0MW01.NI0MWTDX + 2;
    ;
  end
  ;
  if (NI0MW01.NI0MWWXS != " "
   && NI0MW01.NI0MWWXC == "USA")
    NI0MW01.NI0MWFDX = 1;
    NI0MW01.NI0MWSCT = 0;
    NI0MW01.NI0MWBUF = NI0MW01.NI0MWWXS;
    ;
    NI0MS09(); /* Byte for byte array move*/
    ;
  end
  if (NI0MW01.NI0MWWXC != " ")
    NI0MW01.NI0MWFDX = 1;
    NI0MW01.NI0MWSCT = 0;
    if (VDSTRB01.ZFLCD == " ")
      if (NI0MW01.NI0MWWXC in XCTTBL.XCTCD)
        NI0MW01.NI0MWBUF = XCTTBL.XCTDESC[sysVar.arrayIndex];
      end
    else
      if (VDSTRB01.ZFLCD == "FR")
        if (NI0MW01.NI0MWWXC in XCTTBL.XCTCD)
          NI0MW01.NI0MWBUF = XCTTBL.XCTFRND[sysVar.arrayIndex];
        end
      else
        if (VDSTRB01.ZFLCD == "SP")
          if (NI0MW01.NI0MWWXC in XCTTBL.XCTCD)
            NI0MW01.NI0MWBUF = XCTTBL.XCTSPND[sysVar.arrayIndex];
          end
        end
      end
    end
    ;
    NI0MS09(); /* Byte for byte array move*/
    ;
  end
   /* **********************  END NI0MS26  ************************/
end // end NI0MS26

// format CNSLDTN LOCATION text
Function NI0MS27()
   /* ***********************************************************/
     /* format 'CONSOLIDATION LOCATION' city, state, country*/
   /* ***********************************************************/
  ;
  if (NI0MW01.NI0MWCXC in XCTTBL.XCTCD)
    NI0MW01.NI0MWBUF = XCTTBL.XCTDESC[sysVar.arrayIndex];
  end
  if (NI0MW01.NI0MWCCT != NI0MW01.NI0MWBUF) /* City&country equal?*/
    ;
    NI0MW01.NI0MWBUF = NI0MW01.NI0MWCCT;
    ;
    NI0MS09(); /* Byte for byte array move*/
    ;
    NI0MW01.NI0MWTDX = NI0MW01.NI0MWTDX - 2;
    NI0MW01.NI0MWTBY[NI0MWTDX] = ",";
    NI0MW01.NI0MWTDX = NI0MW01.NI0MWTDX + 2;
    ;
  end
  ;
  if (NI0MW01.NI0MWCXS != " ")
    NI0MW01.NI0MWFDX = 1;
    NI0MW01.NI0MWSCT = 0;
    NI0MW01.NI0MWBUF = NI0MW01.NI0MWCXS;
    ;
    NI0MS09(); /* Byte for byte array move*/
    ;
  end
  if (NI0MW01.NI0MWCXC != " ")
    NI0MW01.NI0MWFDX = 1;
    NI0MW01.NI0MWSCT = 0;
    if (VDSTRB01.ZFLCD == " ")
      if (NI0MW01.NI0MWCXC in XCTTBL.XCTCD)
        NI0MW01.NI0MWBUF = XCTTBL.XCTDESC[sysVar.arrayIndex];
      end
    else
      if (VDSTRB01.ZFLCD == "FR")
        if (NI0MW01.NI0MWCXC in XCTTBL.XCTCD)
          NI0MW01.NI0MWBUF = XCTTBL.XCTFRND[sysVar.arrayIndex];
        end
      else
        if (VDSTRB01.ZFLCD == "SP")
          if (NI0MW01.NI0MWCXC in XCTTBL.XCTCD)
            NI0MW01.NI0MWBUF = XCTTBL.XCTSPND[sysVar.arrayIndex];
          end
        end
      end
    end
    ;
    NI0MS09(); /* Byte for byte array move*/
    ;
  end
  ;
   /* **********************  END NI0MS27  ************************/
end // end NI0MS27

// format FACTORY LOCATION text
Function NI0MS28()
   /* ***********************************************************/
         /* format 'FACTORY LOCATION' city, state, country*/
   /* ***********************************************************/
  ;
  if (NI0MW01.NI0MWFXC in XCTTBL.XCTCD)
    NI0MW01.NI0MWBUF = XCTTBL.XCTDESC[sysVar.arrayIndex];
  end
  if (NI0MW01.NI0MWFCT != NI0MW01.NI0MWBUF) /* City & country not equal?*/
    ;
    NI0MW01.NI0MWBUF = NI0MW01.NI0MWFCT;
    ;
    NI0MS09(); /* Byte for byte array move*/
    ;
    NI0MW01.NI0MWTDX = NI0MW01.NI0MWTDX - 2;
    NI0MW01.NI0MWTBY[NI0MWTDX] = ",";
    NI0MW01.NI0MWTDX = NI0MW01.NI0MWTDX + 2;
    ;
  end
  ;
  if (NI0MW01.NI0MWFXS != " ")
    NI0MW01.NI0MWFDX = 1;
    NI0MW01.NI0MWSCT = 0;
    NI0MW01.NI0MWBUF = NI0MW01.NI0MWFXS;
    ;
    NI0MS09(); /* Byte for byte array move*/
    ;
  end
  if (NI0MW01.NI0MWFXC != " ")
    NI0MW01.NI0MWFDX = 1;
    NI0MW01.NI0MWSCT = 0;
    if (VDSTRB01.ZFLCD == " ")
      if (NI0MW01.NI0MWFXC in XCTTBL.XCTCD)
        NI0MW01.NI0MWBUF = XCTTBL.XCTDESC[sysVar.arrayIndex];
      end
    else
      if (VDSTRB01.ZFLCD == "FR")
        if (NI0MW01.NI0MWFXC in XCTTBL.XCTCD)
          NI0MW01.NI0MWBUF = XCTTBL.XCTFRND[sysVar.arrayIndex];
        end
      else
        if (VDSTRB01.ZFLCD == "SP")
          if (NI0MW01.NI0MWFXC in XCTTBL.XCTCD)
            NI0MW01.NI0MWBUF = XCTTBL.XCTSPND[sysVar.arrayIndex];
          end
        end
      end
    end
    ;
    NI0MS09(); /* Byte for byte array move*/
    ;
  end
  ;
  ;
   /* **********************  END NI0MS28  ************************/
end // end NI0MS28

// update TSUREC
Function NI0MS29()
   /* *************************************************************/
                   /* TSUREC update unique*/
   /* *************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0MS29";
  ;
  XX0XS01(); /* Obtain date and time*/
  ;
  TSUREC.ZZZSDT = XX0XW01.XX0XWDAT; /* Set up date*/
  TSUREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  TSUREC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change time*/
  ;
  try
    call "IO4690" ("U ", SQLCA, TSUREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "U      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4690 "; /* io module*/
    NI0MW01.NI0MWSHU = TSUREC.TSFSHPID; /* shipment id*/
    NI0MW01.NI0MWKUC = TSUREC.KUCCOID; /* customer nbr*/
    TA1REC.TA1TBLKE = NI0MW01.NI0MWKEU; /* error key*/
    TA1REC.TA1DBASE = "DTRANS"; /* database*/
    TA1REC.TA1TBLVU = "VNLSHP01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
  ;
   /* **********************  END NI0MS29  ************************/
end // end NI0MS29

// open cursor for NIOREC
Function NI0MS30()
   /* *************************************************************/
                 /* open cursor for NIOREC*/
   /* *************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0MS30";
  ;
  VRQTHD01.TSFSHPID = NIWREC.TSFSHPID;
  ;
  call "IO0600" ("S1", SQLCA, VRQTHD01) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "S1     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0600 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VRQTHD01"; /* table view*/
    NI0MW01.NI0MWSHP = NIWREC.TSFSHPID; /* ship-id to display format*/
    TA1REC.TA1TBLKE = NI0MW01.NI0MWSHP; /* format error key*/
    XPNL005(); /* abend routine*/
  end
  ;
  ;
   /* **********************  END NI0MS30  ************************/
end // end NI0MS30

// fetch and check next NIOREC
Function NI0MS31()
   /* *************************************************************/
                 /* Fetch and Check Next NIOREC*/
   /* *************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0MS31"; /* set current proc name*/
  ;
  call "IO0600" ("N1", SQLCA, VRQTHD01) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 100) /* end of table*/
    NI0MW01.NI0MWEND = "Y"; /* format end of table flag*/
    call "IO0600" ("C1", SQLCA, VRQTHD01) {isNoRefresh = yes, isExternal = yes};
  else
    if (SQLCA.VAGen_SQLCODE == 0) /* row found*/
      if (VRQTHD01.OP1CUOID != NIWREC.NIWOP1CU[NIWKQIDX]
       /* if order different*/
       || VRQTHD01.OP1NORID != NIWREC.NIWOP1NO[NIWKQIDX])
                                   /* or suborder diff*/
        if (VRQTHD01.NIOFRGTF == "Y") /* order has frgt assigned*/
          NI0MW01.NI0MWFCF = "Y"; /* format frght chg found flag*/
          NI0MW01.NI0MWEND = "Y"; /* format end of table flag*/
          call "IO0600" ("C1", SQLCA, VRQTHD01) {isNoRefresh = yes, isExternal = yes};
        end
      end
    else
      TA1REC.TA1LOCAT[2] = "N1     "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO0600 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VRQTHD01"; /* table view*/
      NI0MW01.NI0MWSHP = NIWREC.TSFSHPID;
                                   /* ship-id to display format*/
      TA1REC.TA1TBLKE = NI0MW01.NI0MWSHP; /* format error key*/
      XPNL005(); /* abend routine*/
    end
  end
  ;
  ;
   /* **********************  END NI0MS31  ************************/
end // end NI0MS31

// process PF7 scroll request
Function NI0MS32()
   /* *************************************************************/
                  /* process PF7 scroll request*/
   /* *************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0MS32";
  ;
  if (NI0MW01.NI0MW1DX == 1) /* from first row*/
    ;
    converseLib.validationFailed(29); /* can't scroll backward anymore*/
    NLXREC.NLXERRF = "Y";
     /* MOVE 'N' TO NLXREC.NLXBLDSC;*/
    return;
    ;
  else
    ;
    NI0MW01.NI0MW1DX = NI0MW01.NI0MW1DX - 1; /* Reverse 1 table entry*/
    ;
     /* Same Criteria?*/
    ;
    if (NI0MT01.NI0MTZC1[NI0MW1DX] != NI0MW01.NI0MWZC1
     || NI0MT01.NI0MTZC2[NI0MW1DX] != NI0MW01.NI0MWZC2
     || NI0MT01.OP1IPIND[NI0MW1DX] != NI0MW01.NI0MWIPI
     || NI0MT01.NI0MTIFF[NI0MW1DX] != NI0MW01.NI0MWIFF
     || NI0MT01.NI0MTFF[NI0MW1DX] != NI0MW01.NI0MWFFF)
      ;
      NI0MW01.NI0MW1DX = NI0MW01.NI0MW1DX + 1; /* Reset table position*/
      converseLib.validationFailed(29); /* can't scroll backward anymore*/
      NLXREC.NLXERRF = "Y";
         /* MOVE 'N' TO NLXREC.NLXBLDSC;*/
      return;
      ;
    end
  end
  ;
  ;
   /* **********************  END NI0MS32  ************************/
end // end NI0MS32

// process PF8 scroll request
Function NI0MS33()
   /* *************************************************************/
                  /* process PF8 scroll request*/
   /* *************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0MS33";
  ;
  NI0MW01.NI0MW1DX = NI0MW01.NI0MW1DX + 1; /* forward 1 table entry*/
  ;
   /* Same Criteria?*/
  ;
  if (NI0MT01.NI0MTZC1[NI0MW1DX] != NI0MW01.NI0MWZC1
   || NI0MT01.NI0MTZC2[NI0MW1DX] != NI0MW01.NI0MWZC2
   || NI0MT01.OP1IPIND[NI0MW1DX] != NI0MW01.NI0MWIPI
   || NI0MT01.NI0MTIFF[NI0MW1DX] != NI0MW01.NI0MWIFF
   || NI0MT01.NI0MTFF[NI0MW1DX] != NI0MW01.NI0MWFFF)
    ;
    NI0MW01.NI0MW1DX = NI0MW01.NI0MW1DX - 1; /* Reset table position*/
    converseLib.validationFailed(30); /* can't scroll forward anymore*/
    NLXREC.NLXERRF = "Y";
     /* MOVE 'N' TO NLXREC.NLXBLDSC;*/
    return;
    ;
  end
  ;
  ;
   /* **********************  END NI0MS33  ***********************/
end // end NI0MS33

// Select Unique - vdstrb01
Function NI0MS34()
   /* *************************************************************/
                    /* select unique - vdstrb01*/
   /* *************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0MS34"; /* set current proc name*/
  ;
  call "IO4600" ("S ", SQLCA, VDSTRB01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4600 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VSTRB01"; /* table view*/
    NI0MW01.NI0MWKUC = VDSTRB01.KUCCOID; /* reformat key*/
    TA1REC.TA1TBLKE = NI0MW01.NI0MWKUC; /* display key*/
    XPNL005(); /* abend routine*/
  end
  ;
   /* **********************  END NI0MS08  ************************/
end // end NI0MS34

//*** RECORD=NI0MW01 ****
// this is the main working storage record for ni0m.
// ***********************
Record NI0MW01 type basicRecord
  10 NI0MWZIT NI0MWZIT ; 
    15 NI0MWZC1 NI0MWZC1 ; 
    15 NI0MWZC2 NI0MWZC2 ; 
    15 NI0MWIPI NI0MWIPI ; 
    15 NI0MWIFF NI0MWIFF ; 
    15 NI0MWFFF NI0MWFFF ; 
  10 NI0MWEND NI0MWEND ; 
  10 NIOFRGTF NIOFRGTF ; 
  10 NI0MWPOP NI0MWPOP ; 
  10 NI0MWOER NI0MWOER ; 
  10 NI0MWFCF NI0MWFCF ; 
  10 NI0MWLCO NI0MWLCO ; 
  10 NI0MWPAT NI0MWPAT ; 
  10 NI0MWPCD NI0MWPCD ; 
  10 NI0MWSEQ NI0MWSEQ [7] ; 
  10 NI0MWTXT NI0MWTXT [7] ; 
  10 NI0MWWTX NI0MWWTX ; 
    15 NI0MWTBY NI0MWTBY [72] ; 
  10 NI0MWIDX NI0MWIDX ; 
  10 NI0MWFDX NI0MWFDX ; 
  10 NI0MWTDX NI0MWTDX ; 
  10 NI0MW2DX NI0MW2DX ; 
  10 NI0MW1DX NI0MW1DX ; 
  10 NI0MWZDX NI0MWZDX ; 
  10 NI0MWBUF NI0MWBUF ; 
    15 NI0MWBBY NI0MWBBY [30] ; 
  10 NI0MWSCT NI0MWSCT ; 
  10 NI0MWORD NI0MWORD ; 
    15 NI0MWCUO NI0MWCUO ; 
    15 NI0MWNOR NI0MWNOR ; 
  10 NI0MWLIT NI0MWLIT ; 
    15 * char(2) ; 
    15 NI0MWLI2 NI0MWLI2 ; 
  10 NI0MWKEO NI0MWKEO ; 
    15 NI0MWSHP NI0MWSHP ; 
    15 NI0MWKOP NI0MWKOP ; 
      20 NI0MWCOR NI0MWCOR ; 
      20 NI0MWSOR NI0MWSOR ; 
  10 NI0MWKEU NI0MWKEU ; 
    15 NI0MWSHU NI0MWSHU ; 
    15 NI0MWKUC NI0MWKUC ; 
  10 NI0MWKEB NI0MWKEB ; 
    15 NI0MWLII NI0MWLII ; 
    15 NI0MWXCT NI0MWXCT ; 
  10 NI0MWLLF NI0MWLLF ; 
  10 NI0MWDLF NI0MWDLF ; 
  10 NI0MWCLF NI0MWCLF ; 
  10 NI0MWFLF NI0MWFLF ; 
  10 NI0MWLMF NI0MWLMF ; 
  10 NI0MWHIT NI0MWHIT ; 
  10 NI0MWUIT NI0MWUIT ; 
  10 NI0MWFTF NI0MWFTF ; 
  10 NI0MWXPT NI0MWXPT ; 
  10 NI0MWZOF NI0MWZOF ; 
  10 NI0MWLCT NI0MWLCT ; 
  10 NI0MWLXS NI0MWLXS ; 
  10 NI0MWLXC NI0MWLXC ; 
  10 NI0MWDCT NI0MWDCT ; 
  10 NI0MWDXS NI0MWDXS ; 
  10 NI0MWDXC NI0MWDXC ; 
  10 NI0MWWCT NI0MWWCT ; 
  10 NI0MWWXS NI0MWWXS ; 
  10 NI0MWWXC NI0MWWXC ; 
  10 NI0MWCCT NI0MWCCT ; 
  10 NI0MWCXS NI0MWCXS ; 
  10 NI0MWCXC NI0MWCXC ; 
  10 NI0MWFCT NI0MWFCT ; 
  10 NI0MWFXS NI0MWFXS ; 
  10 NI0MWFXC NI0MWFXC ; 
  10 NI0MWLCZ NI0MWLCZ ; 
  10 NI0MWINL NI0MWINL ; 
end // end NI0MW01

// Pattern lookup table index
DataItem NI0MW1DX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Pattern table index
DataItem NI0MW2DX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working field byte array
DataItem NI0MWBBY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working field line
DataItem NI0MWBUF char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// place of consolidation city
DataItem NI0MWCCT char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cnsldtion location found flag
DataItem NI0MWCLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// customer order number
DataItem NI0MWCOR num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// W/S version or Order #
DataItem NI0MWCUO num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// place of consolidation country
DataItem NI0MWCXC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// place of consolidation state
DataItem NI0MWCXS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// place of discharge city
DataItem NI0MWDCT char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dischg location found flag
DataItem NI0MWDLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// place of discharge country
DataItem NI0MWDXC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// place of discharge state
DataItem NI0MWDXS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End flag
DataItem NI0MWEND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Freight charges found flag
DataItem NI0MWFCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// factory city
DataItem NI0MWFCT char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 'From' index
DataItem NI0MWFDX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Other freight flag
DataItem NI0MWFFF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// factory location found flag
DataItem NI0MWFLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time flag
DataItem NI0MWFTF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// factory country
DataItem NI0MWFXC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// factory state
DataItem NI0MWFXS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold incoterm
DataItem NI0MWHIT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


DataItem NI0MWIDX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Inland freight flag
DataItem NI0MWIFF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// L/C incoterm location
DataItem NI0MWINL char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Insurance prepaid indicator
DataItem NI0MWIPI char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key for NCBREC
DataItem NI0MWKEB char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key for NIOREC
DataItem NI0MWKEO num(18)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Key for TSUREC
DataItem NI0MWKEU num(16)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// key for op1rec
DataItem NI0MWKOP char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end


DataItem NI0MWKUC num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// L/C Incoterms being overridden
DataItem NI0MWLCO char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// place of loading city
DataItem NI0MWLCT char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// L/C incoterm description
DataItem NI0MWLCZ char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// value
DataItem NI0MWLI2 char(70)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// L/C internal id
DataItem NI0MWLII num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Literal value
DataItem NI0MWLIT char(72)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// loading location found flag
DataItem NI0MWLLF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// location code modified flag
DataItem NI0MWLMF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// place of loading country
DataItem NI0MWLXC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// place of loading state
DataItem NI0MWLXS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sub-Order number
DataItem NI0MWNOR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Override error flag
DataItem NI0MWOER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Formatted Order number
DataItem NI0MWORD num(10,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index of first pattern fnd
DataItem NI0MWPAT num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Hold area for pattern code
DataItem NI0MWPCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Pop-up window used flag
DataItem NI0MWPOP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Space count
DataItem NI0MWSCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Sequence number array
DataItem NI0MWSEQ num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// shipment id
DataItem NI0MWSHP num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// shipment id
DataItem NI0MWSHU num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sub order number
DataItem NI0MWSOR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// working text line byte array
DataItem NI0MWTBY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 'To' index
DataItem NI0MWTDX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Incoterm text block array
DataItem NI0MWTXT char(72)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// unedited incoterm
DataItem NI0MWUIT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warehouse city
DataItem NI0MWWCT char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working text line
DataItem NI0MWWTX char(72)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warehouse country
DataItem NI0MWWXC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// warehouse state
DataItem NI0MWWXS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// country code
DataItem NI0MWXCT char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold payment term cd
DataItem NI0MWXPT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Incoterm 1
DataItem NI0MWZC1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Incoterm 2
DataItem NI0MWZC2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ZITTBL index
DataItem NI0MWZDX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// W/S area for t01 key
DataItem NI0MWZIT char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// default zit ovrd flag
DataItem NI0MWZOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

