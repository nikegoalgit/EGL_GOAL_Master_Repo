package ni0k;

import corpcom2.XX0XW01;
import corpcom3.XPNL002;
import corpcom3.XPNL003;
import corpcom3.XPNL005;
import corpcom4.XSENTRY;
import corpcom4.XSNLS01;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XCTABRV;
import corpx1.XCTTBL;
import corpx1.XGPCD;
import corpx2.XOBCD;
import ku.common.KUCREC;
import ni.common.NIWREC;
import nl.common.*;
import op.common.OP1CUNDT;
import op.common.OP1CUOID;
import op.common.OP1NORID;
import op.common.OP1PARTN;
import op.common.OP1REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ts.common.TSCREC;
import ts.common.TSFDPRTA;
import ts.common.TSFSHPID;
import ts.common.TSUREC;
import ts.common.TSVREC;
//*** PROGRAM=NI0K ****
// ************************************************************
// 
//          ni0k - nil invoice request shipment selection
//          ---------------------------------------------
// 
// This application allows the user to enter the selection
// criteria for requesting an invoice.  Customer is required
// and order is optional.
// 
// 
// Maintenance History:
//   Date   Who    Remarks
// -------- ------ --------------------------------------------
// 10-15-89 cross  Program creation.
// 01-06-90 jjohns Add op1rec display key to S05.
// 03-08-90 jjohns Protect select field on blank map rows.
// 03-13-90 jbaker change wdx2 to wdx3 in ni0ks01.
// 03-14-90 jbaker change s04 to screen ship#/ord# combos.
// 04-04-90 jjohns Change GL fields to match GLAREC.
// 08-21-90 jshann Changed to handle purged orders.
// 10-17-91 lngo   Changed to issue a message when number of
//                 orders exceeds ten (10).
// 04-10-92 jjudki  Put message to map100 when ShipId invalid
//                 for packing list. Do not abend application.
//                 Fix existing subcript initialization bug.
// 10-13-92 JSHANN Put fix in for the map when more than 100
//                 orders, to prevent sub script errors.
// 03-22-94 ahowar added niw-xwh-whse-cd(sub) to niwec for ni0l
// 03-24-95 ahowar changed ni0ks02 and ni0k120. now will accept
//                 only international customers. NI0L and NI0M
//                 would abend due to NI0K allowing non
//                 international customers.
// 03-18-96 ahowar changed ni0ks08. error message for bad
//                 Port Of Load.
// 08-09-96 KSHAW  CHG MOVE OF WS TO SCREEN FROM < 100 TO LE
// 12-13-96 KSHAW  changed ni0kwdx1 to ni0kwdx2 in ni0k201
//                 logic because ni0kwdx2 was referencing
//                 beyond table limits and abending. The cause
//                 index ni0kwdx2 is supposed to mirror
//                 ni0kwdx1.  However, in ni0k201 ni0kwdx1 is
//                 satic.  so at 100 rows the logic in
//                 ni0k201 which call ni0ks01 allows ni0kwdx2
//                 to reach 101
// *********************
Program NI0K type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "NL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  NI0KW01 NI0KW01; // record
  NI0KW02 NI0KW02; // record
  NIWREC NIWREC; // record
  NLXREC NLXREC; // record
  OP1REC OP1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TSCREC TSCREC; // record
  TSUREC TSUREC; // record
  TSVREC TSVREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCTTBL {deleteAfterUse = yes}; // table
  use NI0KM.NI0KM100,  // forms
      NI0KM.NI0KM200
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    NI0K000: NI0K000();
    exit program;
  end // end main
end // end NI0K

// main flow
Function NI0K000()

   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   perform initialization, set application revision nbrs,**/
   /* *   then do main perform until done with application      **/
   /* *                                                         **/
   /* ************************************************************/

  NLXREC.NLXCPROC = "NI0K000";
  COMMAREA.CACURRAP = "NI0K";

  NI0K001(); /* initilize the application*/

  NLXREC.NLXEOAF = "N"; /* set end-of-application flag to 'no'*/

  while (NLXREC.NLXEOAF == "N") /* while not end-of-aplication*/
    NI0K050(); /* process the application screen(s)*/
  end

  COMMAREA.CACURRAP = "NL0A";
  XPNL002();
  exit program;
end // end NI0K000

// initialize application
Function NI0K001()
  NLXREC.NLXCPROC = "NI0K001";

   /* -----------------------------------------------------------*/
         /* initialize the application working storage*/

   /* -----------------------------------------------------------*/

  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen converse*/
  VGVar.handleHardIOErrors = 1; /* return control to appl if hard db2 error*/

  set NI0KW01 empty; /* clear working storage rec1*/
  set NI0KW02 empty; /* clear working storage rec2*/
  set NIWREC empty;
  set TSVREC empty;
  set TSUREC empty;
  set TSCREC empty;
  set KUCREC empty;
  set OP1REC empty;
  set SQLCA empty;

  XSENTRY(); /* appl entry security*/
  XSSEGTR(); /* set segmented transaction id*/

   /* TEMP001;*/

  set NLXREC empty; /* clear common working storage*/
  NIWREC.NIWGROUP = COMMAREA.CAUSERA; /* get passed data*/

   /* ------------------------------------------------------*/
    /* Set up working-storage array of screen names*/
   /* ------------------------------------------------------*/

  NLXREC.NLXSNAME[1] = "NI0KM100"; /* init screens used in this appl*/
  NLXREC.NLXSNAME[2] = "NI0KM200"; /* init screens used in this appl*/

  if (COMMAREA.CAFROMAP == "NI0Q"
   && COMMAREA.CAUSERA != " ")
    NI0KS06(); /* fill ws array*/
    NLXREC.NLXCSCRN = "NI0KM200"; /* set first screen to display*/
  else
    NLXREC.NLXCSCRN = "NI0KM100"; /* set first screen to display*/
  end

end // end NI0K001

// decide which map to display
Function NI0K050()

   /* ************************************************************/
   /* *   control process the application screen(s)             **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/

  NLXREC.NLXCPROC = "NI0K050"; /* set current process name*/

  sysVar.arrayIndex = 0;
  NLXREC.NLXSCRNX = 0;

  if (NLXREC.NLXCSCRN in NLXREC.NLXSNAME) /* if current-screen-name is*/
    NLXREC.NLXSCRNX = sysVar.arrayIndex; /* in the screen-array, then set*/
  end /* the screen-index*/

  set TA1REC empty;
  TA1REC.TA1MAP = NLXREC.NLXCSCRN; /* prepare for abend*/

  NLXREC.NLXBLDSC = "Y"; /* set build screen flag to 'yes'*/
  NLXREC.NLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
  NLXREC.NLXERRF = "N"; /* clear error flag*/

  if (NLXREC.NLXSCRNX == 1) /* if screen ni0km100*/
    while (NLXREC.NLXEOSF == "N") /* show until user is done*/
      NI0K100();
    end
  else
    if (NLXREC.NLXSCRNX == 2) /* if screen ni0km100*/
      while (NLXREC.NLXEOSF == "N") /* show until user is done*/
        NI0K200();
      end
    else
      TA1REC.TA1MAP = NLXREC.NLXCSCRN;
      TA1REC.TA1TBLKE = "UNKNOWN SCREEN NAME";
      TA1REC.TA1LOCAT[2] = NLXREC.NLXCSCRN;
      XPNL005(); /* abend*/
    end
  end

   /* at this point;*/
       /* if the end-of-application flag (NLXeoaf ) = 'n'*/
         /* the perform will return to the top of ni0k050...*/
       /* else*/
         /* the perform will auto return to nl0%000.*/

end // end NI0K050

// converse map m100
Function NI0K100()

   /* ************************************************************/
   /* *    process screen ni0km100                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from nl0k050 until the end-of-screen   **/
   /* *     flag (nlxeosf) is set to 'y'.                      **/
   /* *                                                         **/
   /* ************************************************************/

  NLXREC.NLXCPROC = "NI0K100";

  if (NLXREC.NLXBLDSC == "Y")
    NI0K101();
    NLXREC.NLXBLDSC = "N";
  end

   /* ***********************************************************/
  converse NI0KM100 ;

   /* ***********************************************************/

  VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";

  NI0K110(); /* validate pfkeys*/

  if (NLXREC.NLXERRF == "N")
    NI0K120(); /* edit entries and update*/
  end

  if (NLXREC.NLXERRF == "N")
    NI0K130(); /* determine next action*/
  end

   /* at this point;*/
     /* if the end-of-screen flag (nlxeosf) is 'n'*/
        /* we go back to top of process ni0k100.*/
     /* if the end-of-screen flag (nlxeosf) is 'y'*/
        /* we return to ni0k050.*/
end // end NI0K100

// build screen
Function NI0K101()
  NLXREC.NLXCPROC = "NI0K101";

   /* **************************************/
   /* build screen*/
   /* **************************************/

  set NI0KM100 initial;
  NI0KM100.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/

  set NIWREC empty;
  NI0KM100.KUCCOID = NIWREC.KUCCOID; /* restore entered value*/

end // end NI0K101

// edit pfkeys
Function NI0K110()
  NLXREC.NLXCPROC = "NI0K110";

   /* **************************************/
   /* edit pk keys*/
   /* **************************************/

  if (NI0KM100.CATOAP != " ") /* if any fastpath data entered*/
    COMMAREA.CATOAP = NI0KM100.CATOAP;
    COMMAREA.CAITEM = NI0KM100.CAITEM;
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002();
    return;
  end

  if (converseVar.eventKey is enter)
     /* next sentence*/
  else
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa2
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      converseLib.validationFailed(36); /* pa1/2 cause loss of keyed data-rekey*/
                                   /* any change*/
       /* set alterable fields modified*/
      NLXREC.NLXERRF = "Y";
    else
      if (converseVar.eventKey is pf1)
        XSNLS01(); /* nil help routine - exit to gd01*/
      else
        if (converseVar.eventKey is pf4)
          XSPF4();
        else
          if (converseVar.eventKey is pf3)
            COMMAREA.CATOAP = "NI0J";
            XPNL002();
            return;
          else
            COMMAREA.CATOAP = " ";
            converseLib.validationFailed(2); /* INVALID FUNCTION KEY*/
            NLXREC.NLXERRF = "Y";
          end
        end
      end
    end
  end
end // end NI0K110

// edit entries
Function NI0K120()
  NLXREC.NLXCPROC = "NI0K120";

   /* **************************************/
   /* edit entries and update*/
   /* **************************************/

   /* edit selections - perform edits in reverse sequence*/

   /* edit order, sub order*/
  if (NI0KM100.OP1CUOID is modified
   || NI0KM100.OP1NORID is modified)
    if (NI0KM100.OP1CUOID != 0 /* A non-zero value is present*/
     || NI0KM100.OP1NORID != 0)
      OP1REC.OP1CUOID = NI0KM100.OP1CUOID; /* Load key*/
      OP1REC.OP1NORID = NI0KM100.OP1NORID;
      NI0KW01.NI0KWORD = NI0KM100.OP1CUOID;
      OP1REC.OP1PARTN = NI0KW01.NI0KWPTN;
      NI0KW01.NI0KWOID = OP1REC.OP1CUOID;
      NI0KW01.NI0KWNID = OP1REC.OP1NORID;
      NI0KW01.NI0KWPRT = OP1REC.OP1PARTN;
      NI0KS05(); /* Read Order file*/
      if (SQLCA.VAGen_SQLCODE != 0 /* Order not found*/
       || OP1REC.OP1NORID == 0)    /* sub-order 0 is invalid*/
        set NI0KM100.OP1CUOID cursor, modified, bold;
        set NI0KM100.OP1NORID modified, bold;
        converseLib.validationFailed(14); /* Order number nrf during 'add'*/
        NLXREC.NLXERRF = "Y";
      else /* Order was found*/
        set NI0KM100.OP1CUOID normal;
        set NI0KM100.OP1NORID normal;
        NIWREC.OP1CUOID = NI0KM100.OP1CUOID;
        NIWREC.OP1NORID = NI0KM100.OP1NORID;
      end
    end
  end

   /* edit a cmpny*/
  if (NI0KM100.KUCCOID is modified)
    KUCREC.KUCCOID = NI0KM100.KUCCOID;
    NI0KS02(); /* select unique kucrec*/
    if (SQLCA.VAGen_SQLCODE == 0)
      if (KUCREC.XAUCD == "31" || 
      KUCREC.XAUCD == "32" || 
      KUCREC.XAUCD == "33")
        if (KUCREC.XXXSTAT == "A")
          set NI0KM100.KUCCOID normal;
          NIWREC.KUCCOID = NI0KM100.KUCCOID;
          NIWREC.KUCCONM = KUCREC.KUCCONM;
          if (KUCREC.XCTCD in XCTTBL.XCTCD)
            NIWREC.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
          end
        else
          set NI0KM100.KUCCOID cursor, modified, bold;
          converseLib.validationFailed(429); /* inactive customer*/
          NLXREC.NLXERRF = "Y";
        end
      else
        set NI0KM100.KUCCOID cursor, modified, bold;
        converseLib.validationFailed(271); /* not an international customer*/
        NLXREC.NLXERRF = "Y";
      end
    else
      set NI0KM100.KUCCOID cursor, modified, bold;
      converseLib.validationFailed(13); /* invalid cd*/
      NLXREC.NLXERRF = "Y";
    end
  end

  if (NLXREC.NLXERRF == "Y")
    return;
  end

  if (NI0KM100.OP1CUOID == 0)
    NIWREC.NIWKQSEL = "C"; /* cust only flag*/
  else
    NIWREC.NIWKQSEL = "O";
  end

end // end NI0K120

// determine next action
Function NI0K130()
  NLXREC.NLXCPROC = "NI0K130";

   /* **************************************/
   /* determine next action*/
   /* **************************************/

  if (converseVar.eventKey is enter)
    set NI0KW02 empty;
    NI0KS06(); /* fill ws array*/
    if (NLXREC.NLXERRF == "Y")
      return;
    end
    NLXREC.NLXEOSF = "Y";
    NLXREC.NLXCSCRN = "NI0KM200";
    return;
  end

end // end NI0K130

// converse map m200
Function NI0K200()
  NLXREC.NLXCPROC = "NI0K200";

   /* ************************************************************/
   /* *    process screen ni0km200                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from nl0k050 until the end-of-screen   **/
   /* *     flag (nlxeosf) is set to 'y'.                       **/
   /* *                                                         **/
   /* ************************************************************/

  if (NLXREC.NLXBLDSC == "Y")
    NI0K201();
    NLXREC.NLXBLDSC = "N";
  end

   /* ***********************************************************/
  converse NI0KM200 ;

   /* ***********************************************************/

  VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";

  NI0K210(); /* validate pfkeys*/

  if (NLXREC.NLXERRF == "N"
   && converseVar.eventKey is enter)
     /* AND NI0KM200 IS MODIFIED;*/
    NI0K220(); /* edit entries and update*/
  end

  if (NLXREC.NLXERRF == "N")
    NI0K230(); /* determine next action*/
  end

   /* at this point;*/
     /* if the end-of-screen flag (nlxeosf) is 'n'*/
        /* we go back to top of process ni0k200.*/
     /* if the end-of-screen flag (nlxeosf) is 'y'*/
        /* we return to ni0k050.*/
end // end NI0K200

// build screen
Function NI0K201()
  NLXREC.NLXCPROC = "NI0K201";

   /* **************************************/
   /* build screen*/
   /* **************************************/

  set NI0KM200 initial;
  NI0KM200.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/

  NI0KM200.KUCCOID = NIWREC.KUCCOID;
  NI0KM200.KUCCONM = NIWREC.KUCCONM;
  NI0KM200.XCTDESC = NIWREC.XCTDESC;

  NI0KW01.NI0KWDX3 = 1;
  while (NI0KW01.NI0KWDX3 < 13)
    set NI0KM200.NI0KMSEL[NI0KWDX3] skip, invisible;
    NI0KW01.NI0KWDX3 = NI0KW01.NI0KWDX3 + 1;
  end

   /* move from ws array to screen*/

  NI0KW01.TSFSHPID = 0; /* init for break logic*/
  NI0KW01.NI0KWDX3 = 1;
  while (NI0KW01.NI0KWDX3 < 13
   && NI0KWDX2 <= 100)
    NI0KS01();
  end
  NI0KW01.NI0KWDX3 = 12;

  if (converseVar.validationMsgNum == 0) /* only use this msg if no others are in*/
                                   /* use*/
    if (NI0KW01.NI0KWDX1 >= NI0KW01.NI0KWDX2)
      converseLib.validationFailed(69);
    end
  end

end // end NI0K201

// edit pfkeys
Function NI0K210()
  NLXREC.NLXCPROC = "NI0K210";

   /* **************************************/
   /* edit pk keys*/
   /* **************************************/

  if (NI0KM200.CATOAP != " ") /* if any fastpath data entered*/
    COMMAREA.CATOAP = NI0KM200.CATOAP;
    COMMAREA.CAITEM = NI0KM200.CAITEM;
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    XPNL002();
    return;
  end

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
     /* next sentence*/
  else
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa2
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      converseLib.validationFailed(36); /* pa1/2 cause loss of keyed data-rekey*/
                                   /* any change*/
       /* set alterable fields modified*/
      NLXREC.NLXERRF = "Y";
    else
      if (converseVar.eventKey is pf1)
        XSNLS01(); /* nil help routine - exit to gd01*/
      else
        if (converseVar.eventKey is pf4)
          XSPF4();
        else
          if (converseVar.eventKey is pf20)
            COMMAREA.CATOAP = "NI0J";
            XPNL002();
            return;
          else
            COMMAREA.CATOAP = " ";
            converseLib.validationFailed(2); /* INVALID FUNCTION KEY*/
            NLXREC.NLXERRF = "Y";
          end
        end
      end
    end
  end


end // end NI0K210

// edit entries
Function NI0K220()
  NLXREC.NLXCPROC = "NI0K220";

   /* **************************************/
   /* edit entries and update*/
   /* **************************************/

   /* edit selections - perform edits in reverse sequence*/

  NI0KW01.NI0KWSON = "N"; /* init one select flag*/
  NI0KW01.NI0KWDX4 = 13;
  while (NI0KW01.NI0KWDX4 > 1)
    NI0KW01.NI0KWDX4 = NI0KW01.NI0KWDX4 - 1;
    if (NI0KM200.NI0KMSEL[NI0KWDX4] != " ")
      set NI0KM200.NI0KMSEL[NI0KWDX4] normal;
      if (NI0KM200.TSFSHPID[NI0KWDX4] == 0)
        if (NI0KM200.NI0KMSEL[NI0KWDX4] != " ")
          set NI0KM200.NI0KMSEL[NI0KWDX4] cursor, modified, bold;
          converseLib.validationFailed(1); /* invalid option*/
          NLXREC.NLXERRF = "Y";
        end
      else
        if (NI0KM200.NI0KMSEL[NI0KWDX4] != "S")
          if (NI0KM200.NI0KMSEL[NI0KWDX4] == "V")
             /* next sentence*/
          else
            set NI0KM200.NI0KMSEL[NI0KWDX4] cursor, modified, bold;
            converseLib.validationFailed(1); /* invalid option*/
            NLXREC.NLXERRF = "Y";
          end
        else
          if (NI0KW01.NI0KWSON == "N")
            NI0KW01.NI0KWSON = "Y";
          else
            set NI0KM200.NI0KMSEL[NI0KWDX4] cursor, modified, bold;
            converseLib.validationFailed(1); /* invalid option*/
            NLXREC.NLXERRF = "Y";
          end
        end
      end
    end
  end

  if (NI0KW01.NI0KWSON == "N")
    NI0KW01.NI0KWDX8 = NI0KW01.NI0KWDX2 - 12;
    NI0KW01.NI0KWDX3 = 0;
    while (NI0KW01.NI0KWDX8 < NI0KW01.NI0KWDX2)
      NI0KW01.NI0KWDX3 = NI0KW01.NI0KWDX3 + 1;
      if (NI0KW02.NI0KWPRG[NI0KWDX8] != "Y" /* VALID SHIPMENT*/
       && NI0KW02.TSFSHPID[NI0KWDX8] > 0)   /* shipment exisits*/
        set NI0KM200.NI0KMSEL[NI0KWDX3] cursor, modified, bold;
        NI0KW01.NI0KWDX8 = 202;
      end
      NI0KW01.NI0KWDX8 = NI0KW01.NI0KWDX8 + 1;
    end
    if (NI0KWDX8 == NI0KWDX2) /* no valid shipment on page*/
      set NI0KM200.CATOAP cursor;
    end
    converseLib.validationFailed(1); /* invalid option*/
    NLXREC.NLXERRF = "Y";
  end

  if (NLXREC.NLXERRF == "Y")
    return;
  end

   /* fill in array to pass to ni0q*/

   /* init array to pass*/
  NI0KW01.NI0KWDX4 = 1;
  while (NI0KW01.NI0KWDX4 < 11)
    NIWREC.NIWOP1CU[NI0KWDX4] = 0;
    NIWREC.NIWOP1NO[NI0KWDX4] = 0;
    NIWREC.NIWOP1CH[NI0KWDX4] = " ";
    NIWREC.NIWXGPCD[NI0KWDX4] = " ";
    NIWREC.NIWXOBCD[NI0KWDX4] = " ";
    NIWREC.NIW-XWH-WHSE-CD[NI0KWDX4] = " ";
    NIWREC.NIWOP1ND[NI0KWDX4] = 0;
    NI0KW01.NI0KWDX4 = NI0KW01.NI0KWDX4 + 1;
  end

   /* logic below checks screen for select - then moves from*/
   /* ws array - this will insure movement of all orders even if*/
   /* not on current screen*/

  NI0KW01.NI0KWDX3 = 0; /* screen index*/
  NI0KW01.NI0KWDX5 = 1; /* output array index*/
  NI0KW01.NI0KWDX2 = 1; /* ws array index*/
  while (NI0KW01.NI0KWDX3 < 12)
    NI0KW01.NI0KWDX3 = NI0KW01.NI0KWDX3 + 1;
    if (NI0KM200.NI0KMSEL[NI0KWDX3] == "S")
      NIWREC.TSFSHPID = NI0KM200.TSFSHPID[NI0KWDX3];
      while (NI0KW01.NI0KWDX2 <= NI0KW01.NI0KWDX1) /* check entire array*/
        if (NI0KW02.TSFSHPID[NI0KWDX2] == NIWREC.TSFSHPID)
          NIWREC.NIWOP1CU[NI0KWDX5] = NI0KW02.OP1CUOID[NI0KWDX2];
          NIWREC.NIWOP1NO[NI0KWDX5] = NI0KW02.OP1NORID[NI0KWDX2];
          NIWREC.NIWOP1CH[NI0KWDX5] = NI0KW02.OP1PARTN[NI0KWDX2];
          NIWREC.NIWXGPCD[NI0KWDX5] = NI0KW02.XGPCD[NI0KWDX2];
          NIWREC.NIWXOBCD[NI0KWDX5] = NI0KW02.XOBCD[NI0KWDX2];
          NIWREC.NIWOP1ND[NI0KWDX5] = NI0KW02.OP1CUNDT[NI0KWDX2];
          NIWREC.NIW-XWH-WHSE-CD[NI0KWDX5] = NI0KW02.NI0KW-02-XWH-WHSE-CD[NI0KWDX2];
          NI0KW01.NI0KWDX5 = NI0KW01.NI0KWDX5 + 1;
        end
        NI0KW01.NI0KWDX2 = NI0KW01.NI0KWDX2 + 1;
      end
      return;
    end
  end
end // end NI0K220

// determine next action
Function NI0K230()
  NLXREC.NLXCPROC = "NI0K230";

   /* **************************************/
   /* determine next action*/
   /* **************************************/

  if (converseVar.eventKey is enter)
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    COMMAREA.CATOAP = "NI0Q";
    XPNL002();
    return;
  end

  if (converseVar.eventKey is pf3)
    NLXREC.NLXEOSF = "Y";
    NLXREC.NLXCSCRN = "NI0KM100";
    return;
  end

  if (converseVar.eventKey is pf7)
    if (NI0KW01.NI0KWDX2 <= 13)
      converseLib.validationFailed(029); /* cannot scroll back*/
    else
      if (NI0KW01.NI0KWDX2 > 97) /* last page not full*/
        NI0KW01.NI0KWDX2 = 85; /* set to 85*/
      else
        NI0KW01.NI0KWDX2 = NI0KW01.NI0KWDX2 - 24;
      end
      if (NI0KW01.NI0KWDX2 < 1)
        NI0KW01.NI0KWDX2 = 1;
      end
      NLXREC.NLXBLDSC = "Y";
    end
    return;
  end

  if (converseVar.eventKey is pf8)
    if (NI0KW01.NI0KWDX2 > NI0KW01.NI0KWDX1)
      converseLib.validationFailed(030); /* cannot scroll forward*/
    else
      NLXREC.NLXBLDSC = "Y";
      return;
    end
  end

end // end NI0K230

// Close cursor for TSVREC
Function NI0KS-CLOSE-TSVREC()
  NLXREC.NLXCPROC = "NI0KS-CLOSE-TSVREC";

   /* CLOSE THE CURSOR*/


  if (NI0KW01.NI0KWDBA == "1")
    call "IO4700" ("C1", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  else
    call "IO4700" ("C2", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "N1     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4700 "; /* io module*/
    TA1REC.TA1DBASE = "DTRANS"; /* database*/
    TA1REC.TA1TBLVU = "VNLPLO01"; /* table view*/
    XPNL005(); /* abend routine*/
  end

end // end NI0KS-CLOSE-TSVREC

// move from array to screen
Function NI0KS01()
  NLXREC.NLXCPROC = "NI0KS01";

   /* move ws array to screen*/

   /* MOVE 0 TO NI0KW01.TSFSHPID      ; init hold ship id*/

  if (NI0KW01.NI0KWDX2 <= NI0KW01.NI0KWDX1)
    if (NI0KW02.TSFSHPID[NI0KWDX2] != NI0KW01.TSFSHPID) /* break on ship id*/
      NI0KW01.TSFSHPID = NI0KW02.TSFSHPID[NI0KWDX2]; /* hold ship id*/
      NI0KM200.TSFSHPID[NI0KWDX3] = NI0KW02.TSFSHPID[NI0KWDX2];
      if (NI0KW02.NI0KWPRG[NI0KWDX2] == "Y") /* purged order on shipment*/
        set NI0KM200.TSFSHPID[NI0KWDX3] skip, bold; /* shipment id*/
        converseLib.validationFailed(166); /* shipment contains a purged order*/
      else
        set NI0KM200.NI0KMSEL[NI0KWDX3] normal; /* no purged orders*/
      end

      if (NI0KW02.TSFDPRTA[NI0KWDX2] != 0)
        NLXREC.XXXWCYMD = NI0KW02.TSFDPRTA[NI0KWDX2];
        XPNL003();
        NI0KM200.TSFDPRTA[NI0KWDX3] = NLXREC.XXXFLDT;
      end
      NI0KM200.XCTABRV[NI0KWDX3] = NI0KW02.XCTABRV[NI0KWDX2];
      if (NI0KW02.TSFSHPID[NI0KWDX2] == NIWREC.TSFSHPID)
        NI0KM200.NI0KMSEL[NI0KWDX3] = "V"; /* request processed in ni0q*/
        set NI0KM200.NI0KMSEL[NI0KWDX3] cursor;
      end
    end
     /* format order nbr*/
    NLXREC.NLXOP1CU = NI0KW02.OP1CUOID[NI0KWDX2];
    NLXREC.NLXOP1NO = NI0KW02.OP1NORID[NI0KWDX2];
    NI0KM200.NI0KMOID[NI0KWDX3] = NLXREC.NLXOID;
    if (NI0KW02.XGPCD[NI0KWDX2] == " ")
                                   /* if spaces then order was not found*/
      set NI0KM200.NI0KMOID[NI0KWDX3] skip, bold; /* purged order*/
    end

    NI0KM200.XGPCD[NI0KWDX3] = NI0KW02.XGPCD[NI0KWDX2];
    NI0KM200.XOBCD[NI0KWDX3] = NI0KW02.XOBCD[NI0KWDX2];
     /* format need date*/
    if (NI0KW02.OP1CUNDT[NI0KWDX2] != 0)
      NLXREC.XXXWCYMD = NI0KW02.OP1CUNDT[NI0KWDX2];
      XPNL003();
      NI0KM200.OP1CUNDT[NI0KWDX3] = NLXREC.XXXFLDT;
    end
  end


  if (NI0KW02.NI0KWMOR[NI0KWDX2] == "Y") /* MORE than 10 orders?*/
    NI0KS11(); /* set fields to autoskip, bright.*/
    converseLib.validationFailed(235); /* on a shipment.*/
  end

  NI0KW01.NI0KWDX2 = NI0KW01.NI0KWDX2 + 1;
  NI0KW01.NI0KWDX3 = NI0KW01.NI0KWDX3 + 1;
  if (NI0KW01.NI0KWDX3 == 13) /* map is full*/
    NI0KW01.NI0KWDX8 = NI0KW01.NI0KWDX2 - 12; /* set purged order index*/
    NI0KW01.NI0KWDX3 = 1; /* set map line pointer*/
    while (NI0KW01.NI0KWDX8 < NI0KW01.NI0KWDX2)
      if (NI0KW02.NI0KWPRG[NI0KWDX8] == " " /* order not purged*/
       && NI0KW02.NI0KWMOR[NI0KWDX8] == " " /* not more than 10 orders*/
       && NI0KW02.TSFSHPID[NI0KWDX8] > 0)   /* valid shipment id*/
        set NI0KM200.NI0KMSEL[NI0KWDX3] cursor; /* set cursor here*/
        NI0KW01.NI0KWDX8 = NI0KW01.NI0KWDX2; /* get out of while*/
      end
      NI0KW01.NI0KWDX3 = NI0KW01.NI0KWDX3 + 1; /* cursor index*/
      NI0KW01.NI0KWDX8 = NI0KW01.NI0KWDX8 + 1; /* cursor index*/
    end
    if (NI0KW01.NI0KWDX3 == 13)
      set NI0KM200.CATOAP cursor; /* no valid shipment ids*/
    else
      NI0KW01.NI0KWDX3 = 13;
    end
  end

end // end NI0KS01

// select unique from kucrec
Function NI0KS02()
  NLXREC.NLXCPROC = "NI0KS02"; /* set current proc name*/

  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
  /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0240 "; /* io module*/
    TA1REC.TA1DBASE = "DCUST"; /* database*/
    TA1REC.TA1TBLVU = "VCMPNY01"; /* table view*/
    XPNL005(); /* abend routine*/
  end

end // end NI0KS02

// declare cursor for TSVREC
Function NI0KS03()
  NLXREC.NLXCPROC = "NI0KS05";

   /* declare and read cursor - store line items to ws*/

  if (NI0KW01.NI0KWDBA == "1")
    call "IO4700" ("S1", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  else
    call "IO4700" ("S2", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end

   /* handle database busy*/
  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1LOCAT[2] = "S1-S2  "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4700 "; /* io module*/
    TA1REC.TA1DBASE = "DTRANS"; /* database*/
    TA1REC.TA1TBLVU = "VNLPLO01"; /* table view*/
    XPNL005(); /* abend routine*/
    NI0KW01.NI0KWEND = "Y"; /* skip fetch loop*/
    NI0KW01.NI0KWONE = "N"; /* set as if rec found, so disp 911 msg*/
  else
    NI0KW01.NI0KWEND = "N";
    NI0KW01.NI0KWONE = "Y";
  end

   /* fetch and move rows to ws array*/

  while (NI0KW01.NI0KWEND == "N"
   && NI0KWDX1 < 100)
    NI0KS04(); /* fetch row from tsvrec*/
    if (NLXREC.NLXERRF == "Y")
      NI0KS-CLOSE-TSVREC();
      return;
    end
  end

  NI0KS-CLOSE-TSVREC();

  if (NI0KWDX1 > 99)
    converseLib.validationFailed(410);
  end

  NI0KS09(); /* Set flag to yes for shipment with*/
                                   /* more than 10 orders.*/

  NI0KW01.NI0KWDX2 = 1; /* initialize array row on screen index*/

  if (NI0KW01.NI0KWONE == "Y") /* no line items in cursor*/
    converseLib.validationFailed(33);
  end

end // end NI0KS03

// fetch rows from tsvrec
Function NI0KS04()
  NLXREC.NLXCPROC = "NI0KS04"; /* set current proc name*/

   /* fetch from cursor*/


  if (NI0KW01.NI0KWDBA == "1")
    call "IO4700" ("N1", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  else
    call "IO4700" ("N2", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  end
  if (SQLCA.VAGen_SQLCODE == 0)
    if (NI0KW01.NI0KWONE == "Y")
      NI0KW01.NI0KWONE = "N";
      NI0KW01.NI0KWDX1 = 0; /* maximum index allowed for array*/
      NI0KW01.TSFSHPID = 0; /* init for break logic*/
      NI0KW01.OP1CUOID = 0; /* init for break logic*/
      NI0KW01.OP1NORID = 0; /* init for break logic*/
      set NI0KW02 empty;
    end
     /* get shipment header on shipment id break*/
    if (TSVREC.TSFSHPID != NI0KW01.TSFSHPID) /* if ship number changes*/
      NI0KW01.NI0KWDX6 = NI0KW01.NI0KWDX1 + 1; /* curr ship# search start*/
      NI0KW01.TSFSHPID = TSVREC.TSFSHPID;
      TSUREC.TSFSHPID = TSVREC.TSFSHPID;
      TSUREC.KUCCOID = TSVREC.KUCCOID;
      NI0KS07(); /* get shipment hdr*/
      if (NLXREC.NLXERRF == "Y")
        return;
      end
      TSCREC.TSCLOCCD = TSUREC.TSEORIG;
      NI0KS08(); /* get location*/
    else /* ship# didn't change*/
       /* search array for order, starting at 1st occur of curr ship#*/
      NI0KW01.NI0KWDX7 = NI0KW01.NI0KWDX6; /* set up search start idx*/
      while (NI0KW01.NI0KWDX7 <= NI0KWDX1) /* until current end of array*/
         /* don't add order to array if already exists for curr ship#*/
        if (TSVREC.OP1CUOID == NI0KW02.OP1CUOID[NI0KWDX7]
         && TSVREC.OP1NORID == NI0KW02.OP1NORID[NI0KWDX7])
          return; /* get out and fetch next row*/
        else
          NI0KW01.NI0KWDX7 = NI0KW01.NI0KWDX7 + 1; /* increment search idx*/
        end
      end
    end
     /* test order and see if on a shipment with a purged order*/
    if (NI0KW01.NI0KWDX1 > 0) /* test only if index is greater than 0*/
      if (NI0KW02.NI0KWPRG[NI0KWDX1] == "Y" /* was last order flaged*/
       && NI0KW02.TSFSHPID[NI0KWDX1] == TSVREC.TSFSHPID)
                                   /* on same shipment*/
        NI0KW01.NI0KWDX1 = NI0KW01.NI0KWDX1 + 1; /* increment array index*/
        NI0KW02.NI0KWPRG[NI0KWDX1] = "Y"; /* flag order*/
      else
        NI0KW01.NI0KWDX1 = NI0KW01.NI0KWDX1 + 1; /* increment array index*/
      end
    else
      NI0KW01.NI0KWDX1 = NI0KW01.NI0KWDX1 + 1; /* increment array index*/
    end
    NI0KW02.TSFDPRTA[NI0KWDX1] = TSUREC.TSFDPRTA;
    NI0KW02.XCTABRV[NI0KWDX1] = TSCREC.XCTABRV;
    NI0KW02.TSFSHPID[NI0KWDX1] = TSVREC.TSFSHPID;
    NI0KW02.OP1CUOID[NI0KWDX1] = TSVREC.OP1CUOID;
    NI0KW02.OP1NORID[NI0KWDX1] = TSVREC.OP1NORID;
    NI0KW02.OP1PARTN[NI0KWDX1] = TSVREC.OP1PARTN;
     /* get order header and fill in for each entry on array*/
    OP1REC.OP1CUOID = TSVREC.OP1CUOID; /* Load key*/
    OP1REC.OP1NORID = TSVREC.OP1NORID;
    OP1REC.OP1PARTN = TSVREC.OP1PARTN;
    NI0KW01.NI0KWOID = OP1REC.OP1CUOID; /* display key*/
    NI0KW01.NI0KWNID = OP1REC.OP1NORID;
    NI0KW01.NI0KWPRT = OP1REC.OP1PARTN;
    NI0KS05(); /* Read Order file*/
    if (SQLCA.VAGen_SQLCODE == 100) /* Order not found, must have been*/
                                   /* purged*/
       /* changed not to abend if order not found.  will not*/
       /* allow selection of shipment for invoicing.*/
      NI0KW01.NI0KWDX8 = 0; /* set index*/
       /* flag all previous order on shipment*/
      while (NI0KW01.NI0KWDX1 > NI0KW01.NI0KWDX8)
        NI0KW01.NI0KWDX8 = NI0KW01.NI0KWDX8 + 1;
                                   /* increment purged order ind*/
        if (NI0KW02.TSFSHPID[NI0KWDX8] == TSVREC.TSFSHPID)
                                   /* shipments equal*/
          NI0KW02.NI0KWPRG[NI0KWDX8] = "Y"; /* flag order on shipment*/
        end
      end
    else
      if (SQLCA.VAGen_SQLCODE != 0) /* Order not found*/
         /* abend - since order in tsvrec*/
        TA1REC.TA1TBLKE = NI0KW01.NI0KWOKE; /* database key*/
        TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
        TA1REC.TA1LOCAT[3] = "IO0430 "; /* io module*/
        TA1REC.TA1DBASE = "DORDER"; /* database*/
        TA1REC.TA1TBLVU = "VORHDR01"; /* table view*/
        XPNL005(); /* abend routine*/
      else /* Order was found*/
        NI0KW02.XGPCD[NI0KWDX1] = OP1REC.XGPCD;
        NI0KW02.XOBCD[NI0KWDX1] = OP1REC.XOBCD;
        NI0KW02.OP1CUNDT[NI0KWDX1] = OP1REC.OP1CUNDT;
        NI0KW02.NI0KW-02-XWH-WHSE-CD[NI0KWDX1] = OP1REC.XWHCD;
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      NI0KW01.NI0KWEND = "Y";
    else
      TA1REC.TA1LOCAT[2] = "N1     "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO4700 "; /* io module*/
      TA1REC.TA1DBASE = "DTRANS"; /* database*/
      TA1REC.TA1TBLVU = "VNLPLO01"; /* table view*/
      XPNL005(); /* abend routine*/
      if (SQLCA.VAGen_SQLCODE == -911)
        NI0KW01.NI0KWEND = "Y"; /* end fetch loop*/
        NI0KW01.NI0KWONE = "N"; /* set as if rec found, so disp 911 msg*/
      end
    end
  end

end // end NI0KS04

// Select Unique from OP1REC
Function NI0KS05()
  NLXREC.NLXCPROC = "NI0KS05";

   /* OP1REC - Select Unique*/

  call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* Read Order record*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1TBLKE = NI0KW01.NI0KWOKE; /* database key*/
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0430 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VORHDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NI0KS05

// fill ws array
Function NI0KS06()
  NLXREC.NLXCPROC = "NI0KS06";

  NI0KW01.NI0KWDX1 = 0; /* max array index*/

   /* fill ws array*/

   /* even if from ni0q must rebuild array*/

  if (NIWREC.NIWKQSEL == "C")
    /* read packing list header by company*/
     /* build key here and cursor s1,n1,c1*/
    NI0KW01.NI0KWDBA = "1";
    TSVREC.KUCCOID = NIWREC.KUCCOID;
    TSVREC.TSFSHPID = -2;
    TSVREC.TSVPLNBR = -1;
    TSVREC.NIAIVCDT = 0;
    NI0KS03(); /* build cursor for tsvrec and move to array*/
    if (NLXREC.NLXERRF == "Y")
      return;
    end
  else
    /* read packing list for specific order nbr*/
     /* build key here and cursor s2,n2,c2*/
    NI0KW01.NI0KWDBA = "2";
    TSVREC.OP1CUOID = NIWREC.OP1CUOID;
    TSVREC.OP1NORID = NIWREC.OP1NORID;
    NI0KS03(); /* build cursor for tsvrec and move to array*/
    if (NLXREC.NLXERRF == "Y")
      return;
    end
    NIWREC.KUCCOID = TSVREC.KUCCOID; /* not filled in by m100*/
    KUCREC.KUCCOID = TSVREC.KUCCOID;
    NI0KS02(); /* select unique kucrec*/
    if (SQLCA.VAGen_SQLCODE == 0)
      NIWREC.KUCCONM = KUCREC.KUCCONM;
      if (KUCREC.XCTCD in XCTTBL.XCTCD)
        NIWREC.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
      end
    else
      TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO0240 "; /* io module*/
      TA1REC.TA1DBASE = "DCUST"; /* database*/
      TA1REC.TA1TBLVU = "VCMPNY01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end

end // end NI0KS06

// Select Unique from tsurec
Function NI0KS07()
  NLXREC.NLXCPROC = "NI0KS07";

   /* TSUREC - Select Unique*/

  call "IO4690" ("S ", SQLCA, TSUREC) {isNoRefresh = yes, isExternal = yes}; /* Read ship hdr*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      NI0KW01.NI0KWSID = TSUREC.TSFSHPID; /* Shipment Id*/
      NI0KS12(); /* Convert numeric shipid to alpha with leading spaces*/
      NI0KW01.NI0KWLP1 = "SHIPMENT ";
      NI0KW01.NI0KWIDA = NI0KW01.NI0KWSIA; /* Shipment Id Alpha*/
      NI0KW01.NI0KWLP2 = " IS INVALID. PLEASE DISASSOCIATE IT ";
      NI0KW01.NI0KWLP3 = "FROM ALL PACKING LISTS. ";
      NI0KM100.VAGen_EZEMSG = NI0KW01.NI0KWLMS;
      NLXREC.NLXERRF = "Y"; /* set error flag*/
    else
      TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO4690 "; /* io module*/
      TA1REC.TA1DBASE = "DTRANS"; /* database*/
      TA1REC.TA1TBLVU = "VNLSHP01"; /* table view*/
      NI0KW01.NI0KWSID = TSUREC.TSFSHPID; /* Shipment Id*/
      NI0KS12(); /* Convert numeric shipid to alpha with leading spaces*/
      NI0KW01.NI0KWLP1 = "SHIPMENT ";
      NI0KW01.NI0KWIDA = NI0KW01.NI0KWSIA; /* Shipment Id Alpha*/
      NI0KW01.NI0KWLP2 = " IS INVALID. PLEASE DISASSOCIATE IT.";
      TA1REC.TA1TBLKE = NI0KW01.NI0KWLMS; /* key*/
      XPNL005(); /* abend routine*/
    end
  end
end // end NI0KS07

// Select Unique from tscrec
Function NI0KS08()
  NLXREC.NLXCPROC = "NI0KS08";

   /* TSCREC - Select Unique*/

  call "IO2350" ("S ", SQLCA, TSCREC) {isNoRefresh = yes, isExternal = yes}; /* Read trans loc*/

  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      NI0KW01.NI0KWSID = TSUREC.TSFSHPID; /* Shipment Id*/
      NI0KS12(); /* Convert numeric shipid to alpha with*/
                                   /* leading spaces*/
      NI0KW01.NI0KWLP1 = "SHIPMENT ";
      NI0KW01.NI0KWIDA = NI0KW01.NI0KWSIA; /* Shipment Id Alpha*/
      NI0KW01.NI0KWLP2 = " IS INVALID. BAD POL. PLEASE DISASSO";
      NI0KW01.NI0KWLP3 = "CIATE FROM ALL PACK LISTS";
      NI0KM100.VAGen_EZEMSG = NI0KW01.NI0KWLMS;
      NLXREC.NLXERRF = "Y";
    else
      TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO2350 "; /* io module*/
      TA1REC.TA1DBASE = "DTRANS"; /* database*/
      TA1REC.TA1TBLVU = "VTSLOC01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end
end // end NI0KS08

// Determine #orders for shpmnt1
Function NI0KS09()
  NLXREC.NLXCPROC = "NI0KS09";

  NI0KW01.TSFSHPID = 0;
  NI0KW01.NI0KWDY1 = 1; /* counts orders on a shipment*/
  NI0KW01.NI0KWDY2 = 0; /* saves start of shipment in array*/
  NI0KW01.NI0KWDX9 = 1; /* pointer to starting point of new shipment*/

  while (NI0KW01.NI0KWDX9 <= NI0KW01.NI0KWDX1)
    if (NI0KW02.TSFSHPID[NI0KWDX9] != NI0KW01.TSFSHPID)
                                                      /* if shpmnt not same*/
      NI0KW01.TSFSHPID = NI0KW02.TSFSHPID[NI0KWDX9];

      NI0KS10(); /* set flag to yes (> 10 orders on a shipment).*/

      NI0KW01.NI0KWDY1 = 1;
      NI0KW01.NI0KWDY2 = NI0KW01.NI0KWDX9;
    else
      NI0KW01.NI0KWDY1 = NI0KW01.NI0KWDY1 + 1;
    end
    NI0KW01.NI0KWDX9 = NI0KW01.NI0KWDX9 + 1;
  end

  NI0KS10(); /* tests the last shipment in the array.*/

end // end NI0KS09

// Determine #orders for shpmnt1
Function NI0KS10()
  NLXREC.NLXCPROC = "NI0KS10";

  if (NI0KW01.NI0KWDY1 > 10) /* if orders are greater than 10*/
    while (NI0KW01.NI0KWDY2 < NI0KW01.NI0KWDX9
     && NI0KW01.NI0KWDY2 < 100)
      NI0KW02.NI0KWMOR[NI0KWDY2] = "Y"; /* set flag to yes*/
      NI0KW01.NI0KWDY2 = NI0KW01.NI0KWDY2 + 1;
    end
  end
end // end NI0KS10

// Set fields to skip and bright
Function NI0KS11()
  NLXREC.NLXCPROC = "NI0KS11";
   /* set screen fields to skip and bright.*/
  set NI0KM200.NI0KMSEL[NI0KWDX3] skip, invisible;
  set NI0KM200.TSFSHPID[NI0KWDX3] skip, bold;
  set NI0KM200.TSFDPRTA[NI0KWDX3] skip, bold;
  set NI0KM200.XCTABRV[NI0KWDX3] skip, bold;
  set NI0KM200.NI0KMOID[NI0KWDX3] skip, bold;
  set NI0KM200.XGPCD[NI0KWDX3] skip, bold;
  set NI0KM200.XOBCD[NI0KWDX3] skip, bold;
  set NI0KM200.OP1CUNDT[NI0KWDX3] skip, bold;

end // end NI0KS11

// Leading Spaces In ShipId Msg
Function NI0KS12()
  NLXREC.NLXCPROC = "NI0KS12";

   /* Leading Spaces In Ship Id In Error Message*/

  NI0KW01.NI0KWSIF = "N"; /* Previous Non Zero Found*/
  NI0KW01.NI0KWSIA = "         "; /* Alpha Ship Id*/

  NI0KW01.NI0KWSID = TSUREC.TSFSHPID; /* Numeric Shipment Id*/
  if (NI0KW01.NI0KWN1 != 0)
    NI0KW01.NI0KWA1 = NI0KW01.NI0KWN1;
    NI0KW01.NI0KWSIF = "Y";
  end
  if (NI0KW01.NI0KWN2 != 0)
    NI0KW01.NI0KWA2 = NI0KW01.NI0KWN2;
    NI0KW01.NI0KWSIF = "Y";
  else
    if (NI0KW01.NI0KWN2 == 0)
      if (NI0KW01.NI0KWSIF == "Y")
        NI0KW01.NI0KWA2 = NI0KW01.NI0KWN2;
        NI0KW01.NI0KWSIF = "Y";
      end
    end
  end
  if (NI0KW01.NI0KWN3 != 0)
    NI0KW01.NI0KWA3 = NI0KW01.NI0KWN3;
    NI0KW01.NI0KWSIF = "Y";
  else
    if (NI0KW01.NI0KWN3 == 0)
      if (NI0KW01.NI0KWSIF == "Y")
        NI0KW01.NI0KWA3 = NI0KW01.NI0KWN3;
        NI0KW01.NI0KWSIF = "Y";
      end
    end
  end
  if (NI0KW01.NI0KWN4 != 0)
    NI0KW01.NI0KWA4 = NI0KW01.NI0KWN4;
    NI0KW01.NI0KWSIF = "Y";
  else
    if (NI0KW01.NI0KWN4 == 0)
      if (NI0KW01.NI0KWSIF == "Y")
        NI0KW01.NI0KWA4 = NI0KW01.NI0KWN4;
        NI0KW01.NI0KWSIF = "Y";
      end
    end
  end
  if (NI0KW01.NI0KWN5 != 0)
    NI0KW01.NI0KWA5 = NI0KW01.NI0KWN5;
    NI0KW01.NI0KWSIF = "Y";
  else
    if (NI0KW01.NI0KWN5 == 0)
      if (NI0KW01.NI0KWSIF == "Y")
        NI0KW01.NI0KWA5 = NI0KW01.NI0KWN5;
        NI0KW01.NI0KWSIF = "Y";
      end
    end
  end
  if (NI0KW01.NI0KWN6 != 0)
    NI0KW01.NI0KWA6 = NI0KW01.NI0KWN6;
    NI0KW01.NI0KWSIF = "Y";
  else
    if (NI0KW01.NI0KWN6 == 0)
      if (NI0KW01.NI0KWSIF == "Y")
        NI0KW01.NI0KWA6 = NI0KW01.NI0KWN6;
        NI0KW01.NI0KWSIF = "Y";
      end
    end
  end
  if (NI0KW01.NI0KWN7 != 0)
    NI0KW01.NI0KWA7 = NI0KW01.NI0KWN7;
    NI0KW01.NI0KWSIF = "Y";
  else
    if (NI0KW01.NI0KWN7 == 0)
      if (NI0KW01.NI0KWSIF == "Y")
        NI0KW01.NI0KWA7 = NI0KW01.NI0KWN7;
        NI0KW01.NI0KWSIF = "Y";
      end
    end
  end
  if (NI0KW01.NI0KWN8 != 0)
    NI0KW01.NI0KWA8 = NI0KW01.NI0KWN8;
    NI0KW01.NI0KWSIF = "Y";
  else
    if (NI0KW01.NI0KWN8 == 0)
      if (NI0KW01.NI0KWSIF == "Y")
        NI0KW01.NI0KWA8 = NI0KW01.NI0KWN8;
        NI0KW01.NI0KWSIF = "Y";
      end
    end
  end
  if (NI0KW01.NI0KWN9 != 0)
    NI0KW01.NI0KWA9 = NI0KW01.NI0KWN9;
    NI0KW01.NI0KWSIF = "Y";
  else
    if (NI0KW01.NI0KWN9 == 0)
      if (NI0KW01.NI0KWSIF == "Y")
        NI0KW01.NI0KWA9 = NI0KW01.NI0KWN9;
        NI0KW01.NI0KWSIF = "Y";
      end
    end
  end

end // end NI0KS12

//*** RECORD=NI0KW01 ****
// ************************************************************
// this is the main working storage record for NI0K.
// 
// maintenance
//    date    name   description
//  -------- ------ -------------------------------------------
//  03/14/90 jbaker add ni0kwdx6 and ni0kwdx7.
//  08/21/90 jshann add ni0kwdx8
//  04/10/92 jjudki add ni0kwlms
// ************************************************************
// ***********************
Record NI0KW01 type basicRecord
  10 OP1CUOID OP1CUOID ; 
  10 OP1NORID OP1NORID ; 
  10 TSFSHPID TSFSHPID ; 
  10 NI0KWDX1 NI0KWDX1 ; 
  10 NI0KWDX2 NI0KWDX2 ; 
  10 NI0KWDX3 NI0KWDX3 ; 
  10 NI0KWDX4 NI0KWDX4 ; 
  10 NI0KWDX5 NI0KWDX5 ; 
  10 NI0KWDX6 NI0KWDX6 ; 
  10 NI0KWDX7 NI0KWDX7 ; 
  10 NI0KWDX8 NI0KWDX8 ; 
  10 NI0KWDX9 NI0KWDX9 ; 
  10 NI0KWDY1 NI0KWDY1 ; 
  10 NI0KWDY2 NI0KWDY2 ; 
  10 NI0KWSON NI0KWSON ; 
  10 NI0KWEND NI0KWEND ; 
  10 NI0KWONE NI0KWONE ; 
  10 NI0KWDBA NI0KWDBA ; 
  10 NI0KWORD NI0KWORD ; 
    15 * num(8) ; 
    15 NI0KWPTN NI0KWPTN ; 
  10 NI0KWOKE NI0KWOKE ; 
    15 NI0KWOID NI0KWOID ; 
    15 NI0KWNID NI0KWNID ; 
    15 NI0KWPRT NI0KWPRT ; 
  10 * char(1) ; // local
  10 NI0KWSIF NI0KWSIF ; 
  10 NI0KWSID NI0KWSID ; 
    15 NI0KWN1 NI0KWN1 ; 
    15 NI0KWN2 NI0KWN2 ; 
    15 NI0KWN3 NI0KWN3 ; 
    15 NI0KWN4 NI0KWN4 ; 
    15 NI0KWN5 NI0KWN5 ; 
    15 NI0KWN6 NI0KWN6 ; 
    15 NI0KWN7 NI0KWN7 ; 
    15 NI0KWN8 NI0KWN8 ; 
    15 NI0KWN9 NI0KWN9 ; 
  10 NI0KWSIA NI0KWSIA ; 
    15 NI0KWA1 NI0KWA1 ; 
    15 NI0KWA2 NI0KWA2 ; 
    15 NI0KWA3 NI0KWA3 ; 
    15 NI0KWA4 NI0KWA4 ; 
    15 NI0KWA5 NI0KWA5 ; 
    15 NI0KWA6 NI0KWA6 ; 
    15 NI0KWA7 NI0KWA7 ; 
    15 NI0KWA8 NI0KWA8 ; 
    15 NI0KWA9 NI0KWA9 ; 
  10 NI0KWLMS NI0KWLMS ; 
    15 NI0KWLP1 NI0KWLP1 ; 
    15 NI0KWIDA NI0KWIDA ; 
    15 NI0KWLP2 NI0KWLP2 ; 
    15 NI0KWLP3 NI0KWLP3 ; 
end // end NI0KW01

//*** RECORD=NI0KW02 ****
// This is the line item array for ni0k
// Maintenance:
// Date:     User ID    Comments.
// --------  --------   ---------------------------------------
// 08-21-90  jshann     Added oppurged as purged order flag
// ***********************
Record NI0KW02 type basicRecord
  10 TSFSHPID TSFSHPID [100] ; 
  10 TSFDPRTA TSFDPRTA [100] ; 
  10 XCTABRV XCTABRV [100] ; 
  10 OP1CUOID OP1CUOID [100] ; 
  10 OP1NORID OP1NORID [100] ; 
  10 OP1PARTN OP1PARTN [100] ; 
  10 XGPCD XGPCD [100] ; 
  10 XOBCD XOBCD [100] ; 
  10 OP1CUNDT OP1CUNDT [100] ; 
  10 NI0KWPRG NI0KWPRG [100] ; 
  10 NI0KWMOR NI0KWMOR [100] ; 
  10 NI0KW-02-XWH-WHSE-CD NI0KW-02-XWH-WHSE-CD [100] ; 
end // end NI0KW02

// purged order flag
DataItem NI0KW-02-XWH-WHSE-CD char(2)  {
  align = right, fillCharacter = " ", inputRequired = no
}
end

// Shipment Id Byte 1
DataItem NI0KWA1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Shipment Id Byte 2
DataItem NI0KWA2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Shipment Id Byte 3
DataItem NI0KWA3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Shipment Id Byte 4
DataItem NI0KWA4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Shipment Id Byte 5
DataItem NI0KWA5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Shipment Id Byte 6
DataItem NI0KWA6 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Shipment Id Byte 7
DataItem NI0KWA7 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Shipment Id Byte 8
DataItem NI0KWA8 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Shipment Id Byte 9
DataItem NI0KWA9 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// io mod action
DataItem NI0KWDBA char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max in ws array index
DataItem NI0KWDX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last row of array on scrn idx
DataItem NI0KWDX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen position index
DataItem NI0KWDX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work index
DataItem NI0KWDX4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work index
DataItem NI0KWDX5 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save new ship # index
DataItem NI0KWDX6 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work index
DataItem NI0KWDX7 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work index for purged orders
DataItem NI0KWDX8 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work index for purged orders
DataItem NI0KWDX9 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work index for purged orders
DataItem NI0KWDY1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work index for purged orders
DataItem NI0KWDY2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NI0KWEND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Shipment Id Alpha
DataItem NI0KWIDA char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Invalid shipment id msg line
DataItem NI0KWLMS char(79)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Text
DataItem NI0KWLP1 char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Text
DataItem NI0KWLP2 char(36)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Text
DataItem NI0KWLP3 char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// purged order flag
DataItem NI0KWMOR char(1)  {
  align = right, fillCharacter = " ", inputRequired = no
}
end

// Shipment Id Byte 1
DataItem NI0KWN1 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Shipment Id Byte 2
DataItem NI0KWN2 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Shipment Id Byte 3
DataItem NI0KWN3 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Shipment Id Byte 4
DataItem NI0KWN4 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Shipment Id Byte 5
DataItem NI0KWN5 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Shipment Id Byte 6
DataItem NI0KWN6 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Shipment Id Byte 7
DataItem NI0KWN7 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Shipment Id Byte 8
DataItem NI0KWN8 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Shipment Id Byte 9
DataItem NI0KWN9 num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-nike-ord-id
DataItem NI0KWNID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-cust-ord-id
DataItem NI0KWOID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op1rec display key
DataItem NI0KWOKE char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NI0KWONE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws order nbr
DataItem NI0KWORD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// purged order flag
DataItem NI0KWPRG char(1)  {
  align = right, fillCharacter = " ", inputRequired = no
}
end

// ws partn char
DataItem NI0KWPRT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws partn char
DataItem NI0KWPTN num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Shipment Id Alpha
DataItem NI0KWSIA char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Shipment Id
DataItem NI0KWSID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Previous Non Blank Found Flag
DataItem NI0KWSIF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// one select flag
DataItem NI0KWSON char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

