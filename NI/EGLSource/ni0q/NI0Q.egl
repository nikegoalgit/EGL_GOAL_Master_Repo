package ni0q;

import corpcom2.XX0XW01;
import corpcom2.XZCREC;
import corpcom2.YSMREC;
import corpcom3.XPNL002;
import corpcom3.XPNL003;
import corpcom3.XPNL005;
import corpcom4.XSENTRY;
import corpcom4.XSNLS01;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XCTCD;
import corpx1.XGPCD;
import corpx2.XOBCD;
import ku.common.KUCREC;
import nc.common.NCALCRID;
import ni.common.NIOFRGTF;
import ni.common.NIOIND;
import ni.common.NIOISTAT;
import ni.common.NIWREC;
import nl.common.NLXREC;
import op.common.OP1CUNDT;
import op.common.OP1CUOID;
import op.common.OP1NORID;
import op.common.OP1PARTN;
import op.common.OP1REC;
import op.common.OP2LNINB;
import op.common.OP2REC;
import sy.common.SY5REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ts.common.TSFSHPID;
import ts.common.TSUREC;
import ts.common.TSVREC;
import ts.common.TSZREC;
import vv.common.VDSTRB01;
import vv.common.VLCHDR01;
import vv.common.VNLXPY01;
import vv.common.VRQTHD01;
import vv.common.VZCHGL01;
//*** PROGRAM=NI0Q ****
// ************************************************************
// 
//          ni0q - nil invoice request shipment order list
//          ----------------------------------------------
// 
// This application allows the user to submit draft and final
// invoices.
// 
// 
// Maintenance History:
//   Date   Who    Remarks
// -------- ------ --------------------------------------------
// 10-17-89 cross  Creation.
// 03-08-90 jjohns Add comp nbr. edit in process 120.
// 05-09-90 jjohns Add edit to match shipment/request pl nbrs.
//                 Add edit for blank country of origin.
//                 Add edit for pl style zero price.
// 06-05-90 jjohns Initialize ni0qw01.op2lninb in s17.
// 09-17-90 jshann Add edit on shipment to see if it changed
// 10-03-90 jshann Add edit on comp num order in s12.
// 11-21-90 jshann Changed 120 to handle the 10th order.
// 02-11-91 jshann DB2 CHANGED SY5PRCFL TO XQACD
// 02-26-91 jshann Add edit for foreign currency prices.
// 03-26-91 jshann EXPANDED NI0QW02 PACKLIST FIELDS TO 9 BIN
// 04-05-91 jshann FIXED EDIT FOR ORDER PRICE CHECK
// 06-11-91 jshann installed certificate of origin
// 01-13-92 jshann added new remit-to for gmbh 'bv'
// 02-06-92 jjudki Task#491. Changes for distributor table.
// 03-20-92 jjudki Not allow p/l style qty = 0.
// 04-01-92 jshann changed edit on request of request status
//                 to consider 'p' as submitted.
// 04-02-92 jshann added edit for 'a' stat for finals
// 04-23-92 jshann added edit on EDT date on shipment, must be
//                 in the dcorp.vdays001 table.
// 05-08-92 jshann Added logic to submit the shipper's export
//                 declaration with final invoice request.
// 06-12-92 jjudki qualify zero price edit in ni0qs07.
// 07-29-92 jjudki Do not allow invoicing > 14 days of tsfdprta
//                (dtrans.vnlshp01.ts_actl_dprt_dt) in s130.
//                Only edit for final print/creates, do not
//                stop drafts per Judi Hudson.
// 05-08-92 jshann Added logic to submit the shipper's export
//                 declaration.
// 03-29-93 jjudki Put invoicing > 14 days of tsfdprta back in.
// 10-27-93 kshaw  added order status edit in NI0Q120.
// 11-15-93 JJUDKI INITIALIZE VRQTHD01 BEFORE CALLS.
// 01-12-94 jshann add edit to ship date edit in ni0q-120
// 03-25-94 ahowar add edit shipmnt must be in balance to invc.
// 07-26-94 ahowar add harmonized code for ftwr.
// y2kfix 02-24-98 pharwo  regen for xx0xs01 changes.
// *********************
Program NI0Q type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "NL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  NI0QW01 NI0QW01; // record
  NI0QW02 NI0QW02; // record
  NIWREC NIWREC; // record
  NLXREC NLXREC; // record
  OP1REC OP1REC; // record
  OP2REC OP2REC; // record
  SQLCA SQLCA; // record
  SY5REC SY5REC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TSUREC TSUREC; // record
  TSVREC TSVREC; // record
  TSZREC TSZREC; // record
  VDSTRB01 VDSTRB01; // record
  VLCHDR01 VLCHDR01; // record
  VNLXPY01 VNLXPY01; // record
  VRQTHD01 VRQTHD01; // record
  VZCHGL01 VZCHGL01; // record
  XX0XW01 XX0XW01; // record
  XZCREC XZCREC; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use NI0QM.NI0QM100 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    NI0Q000: NI0Q000();
    exit program;
  end // end main
end // end NI0Q

// main flow
Function NI0Q000()
  ;
   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   perform initialization, set application revision nbrs,**/
   /* *   then do main perform until done with application      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0Q000";
  COMMAREA.CACURRAP = "NI0Q";
  ;
  NI0Q001(); /* initilize the application*/
  ;
  NLXREC.NLXEOAF = "N"; /* set end-of-application flag to 'no'*/
  ;
  while (NLXREC.NLXEOAF == "N") /* while not end-of-aplication*/
    NI0Q050(); /* process the application screen(s)*/
  end
  ;
  COMMAREA.CACURRAP = "NL0A";
  XPNL002();
end // end NI0Q000

// initialize application
Function NI0Q001()
  NLXREC.NLXCPROC = "NI0Q001";
  ;
   /* -----------------------------------------------------------*/
         /* initialize the application working storage*/
  ;
   /* -----------------------------------------------------------*/
  ;
  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen*/
                                   /* converse*/
  VGVar.handleHardIOErrors = 1; /* return control to appl if hard db2*/
                                   /* error*/
  ;
  NI0QW01.NI0QWBAL = "N";
  ;
  ;
  NI0QS00(); /* init recs*/
  ;
  XSENTRY(); /* appl entry security*/
  XSSEGTR(); /* set segmented transaction id*/
  ;
   /* TEMP001;*/
  ;
  if (COMMAREA.CAFRMSYS != "NI")
    COMMAREA.CAUSERA = " ";
  end
  ;
  set NLXREC empty; /* clear common working storage*/
  NIWREC.NIWGROUP = COMMAREA.CAUSERA; /* get passed data*/
   /* array empty - invalid entry to appl*/
  if (NIWREC.NIWXGPCD[1] == " ")
    COMMAREA.CAUSERA = " ";
    COMMAREA.CATOAP = "NI0K";
    XPNL002();
    return;
  end
  ;
   /* ------------------------------------------------------*/
    /* Set up working-storage array of screen names*/
   /* ------------------------------------------------------*/
  ;
  NLXREC.NLXSNAME[1] = "NI0QM100"; /* init screens used in this appl*/
  NLXREC.NLXCSCRN = "NI0QM100"; /* set first screen to display*/
  ;
   /* read niwrec array and request record for each entry*/
   /* save in ws array*/
  NI0QW01.NI0QWDX4 = 1;
  while (NI0QW01.NI0QWDX4 <= 10)
    NI0QS02();
  end
  ;
  if (COMMAREA.CAFROMAP == "NI0P")
    if (NIWREC.NIWMSGNR != 0) /* error in ni0p submit*/
      if (NIWREC.NIWMSGNR == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(NIWREC.NIWMSGNR);
      end
    else
      if (NIWREC.NIWSBIND == "E")
        converseLib.validationFailed(116); /* give user msg - requests submitted*/
      else
        if (NIWREC.NIWSBIND == "D")
          NI0QS10(); /* set ivc status for drafts*/
        else
          NI0QS11(); /* set ivc status and final invoice*/
                                   /* indicator*/
        end
        /* check submit status of requests*/
        NIWREC.NIWKQIDX = NIWREC.NIWKQIDX + 1;
        if (NIWREC.NIWKQIDX > 10)
          /* give user msg - requests submitted*/
          converseLib.validationFailed(116); /* give user msg - requests submitted*/
        else
          if (NI0QW02.NIOISTAT[NIWKQIDX] == " ") /* no entries left to submit*/
            converseLib.validationFailed(116); /* give user msg - requests submitted*/
          else
            /* submit next request*/
            COMMAREA.CAUSERA = NIWREC.NIWGROUP;
            COMMAREA.CATOAP = "NI0P";
            XPNL002();
            return;
          end
        end
      end
    end
  end
  ;
  if (COMMAREA.CAFROMAP == "NI0O")
     /* check completion status of requests*/
     /* if some need completed - exit to ni0l*/
     /* else process normal - as if from ni0k or ni0l*/
    NIWREC.NIWKQIDX = NIWREC.NIWKQIDX + 1;
    if (NIWREC.NIWKQIDX <= NI0QW01.NI0QWDX1)
      COMMAREA.CAUSERA = NIWREC.NIWGROUP;
      COMMAREA.CATOAP = "NI0L";
      XPNL002();
      return;
    end
  end
  ;
end // end NI0Q001

// decide which map to display
Function NI0Q050()
  ;
   /* ************************************************************/
   /* *   control process the application screen(s)             **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0Q050"; /* set current process name*/
  ;
  sysVar.arrayIndex = 0;
  NLXREC.NLXSCRNX = 0;
  ;
  if (NLXREC.NLXCSCRN in NLXREC.NLXSNAME) /* if current-screen-name is*/
    NLXREC.NLXSCRNX = sysVar.arrayIndex; /* in the screen-array, then set*/
  end /* the screen-index*/
  ;
  set TA1REC empty;
  TA1REC.TA1MAP = NLXREC.NLXCSCRN; /* prepare for abend*/
  ;
  NLXREC.NLXBLDSC = "Y"; /* set build screen flag to 'yes'*/
  NLXREC.NLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
  NLXREC.NLXERRF = "N"; /* clear error flag*/
  ;
  if (NLXREC.NLXSCRNX == 1) /* if screen ni0qm100*/
    while (NLXREC.NLXEOSF == "N") /* show until user is done*/
      NI0Q100();
    end
  else
    TA1REC.TA1MAP = NLXREC.NLXCSCRN;
    TA1REC.TA1TBLKE = "UNKNOWN SCREEN NAME";
    TA1REC.TA1LOCAT[2] = NLXREC.NLXCSCRN;
    XPNL005(); /* abend*/
  end
  ;
   /* at this point;*/
       /* if the end-of-application flag (NLXeoaf ) = 'n'*/
         /* the perform will return to the top of ni0q050...*/
       /* else*/
         /* the perform will auto return to nl0%000.*/
  ;
end // end NI0Q050

// converse map m100
Function NI0Q100()
  ;
   /* ************************************************************/
   /* *    process screen ni0qm100                              **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *     "while loop" from nl0k050 until the end-of-screen   **/
   /* *     flag (nlxeosf) is set to 'y'.                      **/
   /* *                                                         **/
   /* ************************************************************/
  ;
  NLXREC.NLXCPROC = "NI0Q100";
  ;
  if (NLXREC.NLXBLDSC == "Y")
    NI0Q101();
    NLXREC.NLXBLDSC = "N";
  end
  ;
   /* ***********************************************************/
  converse NI0QM100 ;
  ;
   /* ***********************************************************/
  ;
  VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";
  ;
  NI0Q110(); /* validate pfkeys*/
  ;
  if (NLXREC.NLXERRF == "N")
    NI0Q120(); /* edit entries and update*/
  end
  ;
  if (NLXREC.NLXERRF == "N")
    NI0Q130(); /* determine next action*/
  end
  ;
   /* at this point;*/
     /* if the end-of-screen flag (nlxeosf) is 'n'*/
        /* we go back to top of process ni0q100.*/
     /* if the end-of-screen flag (nlxeosf) is 'y'*/
        /* we return to ni0q050.*/
end // end NI0Q100

// build screen
Function NI0Q101()
  NLXREC.NLXCPROC = "NI0Q101";
  ;
   /* **************************************/
   /* build screen*/
   /* **************************************/
  ;
  set NI0QM100 initial;
  NI0QM100.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  ;
  NI0QM100.KUCCOID = NIWREC.KUCCOID; /* restore entered value*/
  NI0QM100.KUCCONM = NIWREC.KUCCONM;
  NI0QM100.XCTDESC = NIWREC.XCTDESC;
  NI0QM100.TSFSHPID = NIWREC.TSFSHPID;
  ;
   /* move from ws array to screen*/
  ;
  NI0QW01.NI0QWDX3 = 1;
  NI0QW01.NI0QWDX2 = 1;
  while (NI0QW01.NI0QWDX3 <= 10)
    NI0QS01();
  end
  NI0QW01.NI0QWDX3 = 10;
  ;
end // end NI0Q101

// edit pfkeys
Function NI0Q110()
  ;
   /* **************************************/
   /* edit pk keys*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NI0Q110";
  ;
  if (NI0QM100.CATOAP != " ") /* if any fastpath data entered*/
    COMMAREA.CATOAP = NI0QM100.CATOAP;
    COMMAREA.CAITEM = NI0QM100.CAITEM;
    COMMAREA.CAUSERA = " ";
     /* MOVE NIWREC.NIWGROUP TO COMMAREA.CAUSERA;*/
    XPNL002();
    return;
  end
  ;
  if (converseVar.eventKey is pf6
   || converseVar.eventKey is pf9
   || converseVar.eventKey is pf10
   || converseVar.eventKey is pf11)
    if (converseVar.eventKey is pf9 || converseVar.eventKey is pf10)
      if (NI0QW01.NI0QWBAL == "Y")
        converseLib.validationFailed(426); /* shipment not in balance*/
        NLXREC.NLXERRF = "Y";
      end
    end
  else
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa2
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
      converseLib.validationFailed(36); /* pa1/2 cause loss of keyed data-rekey*/
                                   /* any change*/
       /* set alterable fields modified*/
      NLXREC.NLXERRF = "Y";
    else
      if (converseVar.eventKey is pf1)
        XSNLS01(); /* nil help routine - exit to gd01*/
      else
        if (converseVar.eventKey is pf4)
          COMMAREA.CAUSERA = " ";
          XSPF4();
        else
          if (converseVar.eventKey is pf3)
            COMMAREA.CATOAP = "NI0K";
            XPNL002();
            return;
          else
            if (converseVar.eventKey is pf20)
              COMMAREA.CATOAP = "NI0J";
              XPNL002();
              return;
            else
              if (converseVar.eventKey is enter)
                 /* pass array and set index*/
                NIWREC.NIWKQIDX = 1;
                COMMAREA.CAUSERA = NIWREC.NIWGROUP;
                COMMAREA.CATOAP = "NI0L";
                XPNL002();
                return;
              else
                COMMAREA.CATOAP = " ";
                converseLib.validationFailed(2); /* INVALID FUNCTION KEY*/
                NLXREC.NLXERRF = "Y";
              end
            end
          end
        end
      end
    end
  end
end // end NI0Q110

// edit entries
Function NI0Q120()
  NLXREC.NLXCPROC = "NI0Q120";
  ;
   /* **************************************/
   /* edit entries and update*/
   /* **************************************/
  ;
   /* edit selections - perform edits in reverse sequence*/
  ;
  TSUREC.TSFSHPID = NIWREC.TSFSHPID;
  TSUREC.KUCCOID = NIWREC.KUCCOID;
  NI0QS04(); /* get shipment hdr*/
  KUCREC.KUCCOID = NIWREC.KUCCOID;
  NI0QS22(); /* get customer*/
  NI0QS30(); /* get distributor table row*/
  NI0QW01.NI0QWDX4 = 1;
  while (NI0QWDX4 <= 10)
    if (NI0QW02.OP1CUOID[NI0QWDX4] != 0)
      NI0QM100.NI0QMMSG[NI0QWDX4] = " ";
      NI0QW02.NI0QWERR[NI0QWDX4] = "N";
    end
    NI0QW01.NI0QWDX4 = NI0QW01.NI0QWDX4 + 1;
  end
  ;
  NI0QW01.NI0QWDX4 = 1;
  while (NI0QWDX4 <= 10)
    if (NI0QW02.OP1CUOID[NI0QWDX4] != 0)
      ;
      ;
      if (NI0QW02.NIOIND[NI0QWDX4] == "D")
        if (NI0QW02.NIOISTAT[NI0QWDX4] == "S")
          NI0QM100.NI0QMMSG[NI0QWDX4] = "DRAFT INVOICE ALREADY SUBMITTED";
          NLXREC.NLXERRF = "Y";
          NI0QW02.NI0QWERR[NI0QWDX4] = "Y";
        end
      end
      if (NI0QW02.NIOIND[NI0QWDX4] == "F")
        if (NI0QW02.NIOISTAT[NI0QWDX4] == "P"
         || NI0QW02.NIOISTAT[NI0QWDX4] == "A"
         || NI0QW02.NIOISTAT[NI0QWDX4] == "S")
          NI0QM100.NI0QMMSG[NI0QWDX4] = "FINAL INVOICE ALREADY SUBMITTED";
          NLXREC.NLXERRF = "Y";
          NI0QW02.NI0QWERR[NI0QWDX4] = "Y";
        end
      end
   /* ;*/
                                  /* move the edits ni0qs12 and ni0qs21 to*/
                                   /* insure that the first edit is*/
   /* on the request status*/
   /* ;*/
      if (NI0QW02.NI0QWERR[NI0QWDX4] == "N")
        NI0QS12(); /* compare op1rec/niorec comp nbrs*/
        if (converseVar.eventKey is pf9)
          NI0QS31(); /* edit order status code*/
        end
        NI0QS21(); /* compare last change on shipment to*/
                                   /* req*/
        if (NI0QW02.NIOISTAT[NI0QWDX4] == "I")
          NI0QM100.NI0QMMSG[NI0QWDX4] = "REQUEST INCOMPLETE";
          NLXREC.NLXERRF = "Y";
          NI0QW02.NI0QWERR[NI0QWDX4] = "Y";
        end
      end
      ;
       /* eliminate edit below - 10/25/89*/
       /* IF NI0QW02.NIOFRGTF(NI0QWDX4) = 'Y';*/
         /* MOVE NIWREC.TSFSHPID TO TSUREC.TSFSHPID;*/
         /* MOVE NIWREC.KUCCOID TO TSUREC.KUCCOID;*/
         /* NI0QS04                     ; get shipment hdr*/
         /* IF TSUREC.TSFTCBM LE 0;*/
           /* MOVE 'MEASURE IS ZERO' TO NI0QM100.NI0QMMSG(NI0QWDX4);*/
           /* MOVE 'Y' TO NLXREC.NLXERRF;*/
         /* END ;*/
         /* IF TSUREC.TSFTKG LE 0;*/
           /* MOVE 'WEIGHT IS ZERO' TO NI0QM100.NI0QMMSG(NI0QWDX4);*/
           /* MOVE 'Y' TO NLXREC.NLXERRF;*/
         /* END ;*/
       /* END ;*/
      ;
       /* read all packing lists on request and edit*/
      /* IF NLXREC.NLXERRF = 'N';*/
      ;
      /* If foreign pricing required get xpycd to select price row*/
      ;
      if (NI0QW02.NI0QWERR[NI0QWDX4] == "N")
        if (VRQTHD01.XLBCD == "GM" /* GMBH ORDERS NEED FOREIGN PRICING*/
         || VRQTHD01.XLBCD == "BV") /* GMBH ORDERS NEED FOREIGN PRICING*/
          NI0QW01.NI0QWFPL = "Y"; /* SET FOREIGN PRICING FLAG*/
        else
          NI0QW01.NI0QWFPL = "N"; /* RESET FOREIGN PRICING FLAG*/
        end
        if (KUCREC.XAUCD == "33"   /* Customer requires foreign pricing*/
         || VRQTHD01.XLBCD == "GM" /* Request requires foreign pricing*/
         || VRQTHD01.XLBCD == "BV") /* Request requires foreign pricing*/
          NI0QS23(); /* Select sum code*/
          NI0QS24(); /* Select price type*/
        end
        if (NI0QW02.NI0QWPL1[NI0QWDX4] != 0) /* pl exists*/
          TSVREC.TSVPLNBR = NI0QW02.NI0QWPL1[NI0QWDX4];
          TSVREC.OP1CUOID = NI0QW02.OP1CUOID[NI0QWDX4];
          TSVREC.OP1NORID = NI0QW02.OP1NORID[NI0QWDX4];
          NI0QS09(); /* read tsvrec*/
          NI0QS19(); /* rqthd pl edits*/
          if (NI0QW01.NI0QWQFL == "N")
            NI0QM100.NI0QMMSG[NI0QWDX4] = "A P/L CONTAINS QTY OF ZERO";
            /* SET NI0QM100.NI0QMOID(NI0QWDX4) BRIGHT;*/
            /* MOVE 252 TO EZEMNO;*/
            NLXREC.NLXERRF = "Y";
          end
             /* IF TSVREC.TSIPLCBM LE 0;*/
               /* MOVE 'MEASURE IS ZERO' TO NI0QM100.NI0QMMSG(NI0QWDX4);*/
               /* MOVE 'Y' TO NLXREC.NLXERRF;*/
             /* END ;*/
             /* IF TSVREC.TSIPLTKG LE 0;*/
               /* MOVE 'WEIGHT IS ZERO' TO NI0QM100.NI0QMMSG(NI0QWDX4);*/
               /* MOVE 'Y' TO NLXREC.NLXERRF;*/
             /* END ;*/
        end
        if (NI0QW02.NI0QWPL2[NI0QWDX4] != 0) /* pl exists*/
          TSVREC.TSVPLNBR = NI0QW02.NI0QWPL2[NI0QWDX4];
          TSVREC.OP1CUOID = NI0QW02.OP1CUOID[NI0QWDX4];
          TSVREC.OP1NORID = NI0QW02.OP1NORID[NI0QWDX4];
          NI0QS09(); /* read tsvrec*/
          NI0QS19(); /* rqthd pl edits*/
          if (NI0QW01.NI0QWQFL == "N")
            NI0QM100.NI0QMMSG[NI0QWDX4] = "A P/L CONTAINS QTY OF ZERO";
            /* SET NI0QM100.NI0QMOID(NI0QWDX4) BRIGHT;*/
            /* MOVE 252 TO EZEMNO;*/
            NLXREC.NLXERRF = "Y";
          end
             /* IF TSVREC.TSIPLCBM LE 0;*/
               /* MOVE 'MEASURE IS ZERO' TO NI0QM100.NI0QMMSG(NI0QWDX4);*/
               /* MOVE 'Y' TO NLXREC.NLXERRF;*/
             /* END ;*/
             /* IF TSVREC.TSIPLTKG LE 0;*/
               /* MOVE 'WEIGHT IS ZERO' TO NI0QM100.NI0QMMSG(NI0QWDX4);*/
               /* MOVE 'Y' TO NLXREC.NLXERRF;*/
             /* END ;*/
        end
        if (NI0QW02.NI0QWPL3[NI0QWDX4] != 0) /* pl exists*/
          TSVREC.TSVPLNBR = NI0QW02.NI0QWPL3[NI0QWDX4];
          TSVREC.OP1CUOID = NI0QW02.OP1CUOID[NI0QWDX4];
          TSVREC.OP1NORID = NI0QW02.OP1NORID[NI0QWDX4];
          NI0QS09(); /* read tsvrec*/
          NI0QS19(); /* rqthd pl edits*/
          if (NI0QW01.NI0QWQFL == "N")
            NI0QM100.NI0QMMSG[NI0QWDX4] = "A P/L CONTAINS QTY OF ZERO";
            /* SET NI0QM100.NI0QMOID(NI0QWDX4) BRIGHT;*/
            /* MOVE 252 TO EZEMNO;*/
            NLXREC.NLXERRF = "Y";
          end
             /* IF TSVREC.TSIPLCBM LE 0;*/
               /* MOVE 'MEASURE IS ZERO' TO NI0QM100.NI0QMMSG(NI0QWDX4);*/
               /* MOVE 'Y' TO NLXREC.NLXERRF;*/
             /* END ;*/
             /* IF TSVREC.TSIPLTKG LE 0;*/
               /* MOVE 'WEIGHT IS ZERO' TO NI0QM100.NI0QMMSG(NI0QWDX4);*/
               /* MOVE 'Y' TO NLXREC.NLXERRF;*/
             /* END ;*/
        end
        if (NI0QW02.NI0QWPL4[NI0QWDX4] != 0) /* pl exists*/
          TSVREC.TSVPLNBR = NI0QW02.NI0QWPL4[NI0QWDX4];
          TSVREC.OP1CUOID = NI0QW02.OP1CUOID[NI0QWDX4];
          TSVREC.OP1NORID = NI0QW02.OP1NORID[NI0QWDX4];
          NI0QS09(); /* read tsvrec*/
          NI0QS19(); /* rqthd pl edits*/
          if (NI0QW01.NI0QWQFL == "N")
            NI0QM100.NI0QMMSG[NI0QWDX4] = "A P/L CONTAINS QTY OF ZERO";
            /* SET NI0QM100.NI0QMOID(NI0QWDX4) BRIGHT;*/
            /* MOVE 252 TO EZEMNO;*/
            NLXREC.NLXERRF = "Y";
          end
             /* IF TSVREC.TSIPLCBM LE 0;*/
               /* MOVE 'MEASURE IS ZERO' TO NI0QM100.NI0QMMSG(NI0QWDX4);*/
               /* MOVE 'Y' TO NLXREC.NLXERRF;*/
             /* END ;*/
             /* IF TSVREC.TSIPLTKG LE 0;*/
               /* MOVE 'WEIGHT IS ZERO' TO NI0QM100.NI0QMMSG(NI0QWDX4);*/
               /* MOVE 'Y' TO NLXREC.NLXERRF;*/
             /* END ;*/
        end
        if (NI0QW02.NI0QWPL5[NI0QWDX4] != 0) /* pl exists*/
          TSVREC.TSVPLNBR = NI0QW02.NI0QWPL5[NI0QWDX4];
          TSVREC.OP1CUOID = NI0QW02.OP1CUOID[NI0QWDX4];
          TSVREC.OP1NORID = NI0QW02.OP1NORID[NI0QWDX4];
          NI0QS09(); /* read tsvrec*/
          NI0QS19(); /* rqthd pl edits*/
          if (NI0QW01.NI0QWQFL == "N")
            NI0QM100.NI0QMMSG[NI0QWDX4] = "A P/L CONTAINS QTY OF ZERO";
            /* SET NI0QM100.NI0QMOID(NI0QWDX4) BRIGHT;*/
            /* MOVE 252 TO EZEMNO;*/
            NLXREC.NLXERRF = "Y";
          end
             /* IF TSVREC.TSIPLCBM LE 0;*/
               /* MOVE 'MEASURE IS ZERO' TO NI0QM100.NI0QMMSG(NI0QWDX4);*/
               /* MOVE 'Y' TO NLXREC.NLXERRF;*/
             /* END ;*/
             /* IF TSVREC.TSIPLTKG LE 0;*/
               /* MOVE 'WEIGHT IS ZERO' TO NI0QM100.NI0QMMSG(NI0QWDX4);*/
               /* MOVE 'Y' TO NLXREC.NLXERRF;*/
             /* END ;*/
        end
        ;
         /* declare cursor for tsvrec to get packing list numbers*/
        NI0QS14();
        ;
         /* fetch tsvrec rows*/
        ;
        NI0QW01.NI0QWEND = "N";
        NI0QW01.NI0QWONE = "Y";
        ;
        while (NI0QW01.NI0QWEND == "N")
          NI0QS15(); /* fetch row from tsvrec*/
        end
        ;
      end
       /* read all line items on order and edit*/
      /* NI0QS08;*/
      ;
      if (NI0QW02.NCALCRID[NI0QWDX4] != " ") /* lc applies to ivc*/
        VLCHDR01.NCALCRID = NI0QW02.NCALCRID[NI0QWDX4];
        VLCHDR01.KUCCOID = NIWREC.KUCCOID;
        NI0QS03(); /* read lc hdr*/
        if (VLCHDR01.NCAAIVCF == "N")
          NI0QM100.NI0QMMSG[NI0QWDX4] = "L/C NOT AUTHORIZED FOR INVOICING";
          NLXREC.NLXERRF = "Y";
        end
        if (VLCHDR01.NCALCCLF == "Y")
          NI0QM100.NI0QMMSG[NI0QWDX4] = "L/C IS CLOSED";
          NLXREC.NLXERRF = "Y";
        end
      end
      ;
    end
    NI0QW01.NI0QWDX4 = NI0QW01.NI0QWDX4 + 1;
  end
  if (TSUREC.TSFOFRGT > 0)
    VZCHGL01.ZCHCD = "15";
    NI0QS27();
  end
  if (TSUREC.TSFOINLD > 0)
    if (NLXREC.NLXERRF == "N")
      VZCHGL01.ZCHCD = "16";
      NI0QS27();
    end
  end
  ;
  NI0QS29(); /* edit order existance edit*/
  ;
  XX0XS01(); /* get current date*/
  if (TSUREC.TSFDPRTA > XX0XW01.XX0XWDAT) /* if depart date > today*/
    NI0QS-EDIT-EDT-DT(); /* edit the edt on the shipment header*/
  end
  ;
  if (converseVar.eventKey is pf11)
    NI0QS-EDIT-GPC(); /* edit the GPC for export declarations*/
  end
  ;
  ;
end // end NI0Q120

// determine next action
Function NI0Q130()
  NLXREC.NLXCPROC = "NI0Q130";
  ;
   /* **************************************/
   /* determine next action*/
   /* **************************************/
  ;
  if (converseVar.eventKey is pf6)
     /* set draft flag and initial index*/
    NIWREC.NIWSBIND = "D";
    NIWREC.NIWMSGNR = 0; /* init err msg*/
    NIWREC.NIWKQIDX = 1;
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    COMMAREA.CATOAP = "NI0P";
    XPNL002();
    return;
  end
  ;
  if (converseVar.eventKey is pf9)
     /* set final indicator and init index*/
    NI0QS-DAYS-SPAN(); /* check if current date > 14 of*/
                                   /* departure date*/
    ;
    if (TA2REC.TA2DBDDN <= 14)
      NIWREC.NIWSBIND = "F";
      NIWREC.NIWKQIDX = 1;
      NIWREC.NIWMSGNR = 0; /* init err msg*/
      COMMAREA.CAUSERA = NIWREC.NIWGROUP;
      COMMAREA.CATOAP = "NI0P";
      XPNL002();
    else
      converseLib.validationFailed(273); /* ship date > 14 days from today,*/
                        /* cannot invoice*/
      NLXREC.NLXERRF = "Y";
    end
    return;
  end
  ;
  if (converseVar.eventKey is pf10) /* PRINT BOTH CERTIFICATE AND INVOICE*/
     /* set final indicator and init index*/
    NIWREC.NIWSBIND = "B";
    NIWREC.NIWKQIDX = 1;
    NIWREC.NIWMSGNR = 0; /* init err msg*/
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    COMMAREA.CATOAP = "NI0P";
    XPNL002();
    return;
  end
  ;
  if (converseVar.eventKey is pf11) /* print shippers export declaration*/
     /* set indicator*/
    NIWREC.NIWSBIND = "E";
    NIWREC.NIW-CREATE-DECLARATION = "Y";
    NIWREC.NIWMSGNR = 0; /* init err msg*/
    COMMAREA.CAUSERA = NIWREC.NIWGROUP;
    COMMAREA.CATOAP = "NI0P";
    XPNL002();
    return;
  end
  ;
end // end NI0Q130

// Process date error
Function NI0QS-DATE-ERROR()
  ;
  NLXREC.NLXCPROC = "NI0QS-DATE-ERROR";
  ;
  TA1REC.TA1TYPE = "DATE"; /* type of error*/
  TA1REC.TA1PGMNM = "TA0040  "; /* date program*/
  TA1REC.TA1LOCAT = "CONVERT DATE ";
  TA1REC.TA1MAP = "NI0QM100"; /* map name*/
  TA1REC.TA1TBLKE = TA2REC.TA2RTNCD; /* table key*/
  TA1REC.TA1FUNC = "POST"; /* write to log*/
  set ERRSQLCA empty; /* clear area*/
  move SQLCA to ERRSQLCA withV60Compat; /* sql codes*/
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.rollback();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
   /* synpoint rollback*/
  try
    call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes};
  end /* abend routine*/
  ;
  ;
  ;
end // end NI0QS-DATE-ERROR

// calcuate days difference
Function NI0QS-DAYS-SPAN()
  NLXREC.NLXCPROC = "NI0QS-DAYS-SPAN";
  ;
  XX0XS01(); /* get date in ccyymmdd format*/
  ;
  set TA2REC empty; /* initialize date record*/
  ;
  TA2REC.TA2DTOPT = "DAYSDIFF"; /* days difference*/
  ;
  TA2REC.TA2DBDFN = XX0XW01.XX0XWDAT; /* current (invoice) date*/
  TA2REC.TA2DBDTN = TSUREC.TSFDPRTA; /* actual departure date*/
  ;
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* date conversion routine*/
  ;
  if (TA2REC.TA2RTNCD == 0)
    /* next sentence*/
  else
    NLXREC.NLXERRF = "Y"; /* exit to redisplay map*/
    converseLib.validationFailed(165); /* internal date error - call systems development*/
    NI0QS-DATE-ERROR(); /* process date error*/
  end
  ;
  ;
end // end NI0QS-DAYS-SPAN

// Edit the EDT date on shipment
Function NI0QS-EDIT-EDT-DT()
  NLXREC.NLXCPROC = "NI0QS-EDIT-EDT-DT"; /* set current proc name*/
  ;
  XZCREC.XZCCLNDT = TSUREC.TSFDPRTA;
  ;
  call "IO0900" ("S ", SQLCA, XZCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 100)
    NLXREC.NLXERRF = "Y"; /* date not in corp days table*/
    converseLib.validationFailed(253); /* let the user know thier shipdate is not*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* database busy*/
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(4); /* let the user know*/
    else
      if (SQLCA.VAGen_SQLCODE != 0)
        TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
        TA1REC.TA1LOCAT[3] = "IO0900 "; /* io module*/
        TA1REC.TA1DBASE = "DCORP"; /* database*/
        TA1REC.TA1TBLVU = "VDAYS001"; /* table view*/
        XPNL005(); /* abend routine*/
      end
    end
  end
end // end NI0QS-EDIT-EDT-DT

// Edit the EDT date on shipment
Function NI0QS-EDIT-GPC()
  ;
  NLXREC.NLXCPROC = "NI0QS-EDIT-GPC"; /* set current proc name*/
  ;
  NI0QW01.NI0QWDX4 = 1;
  while (NI0QW01.NI0QWDX4 <= 10)
    if (NIWXGPCD[NI0QWDX4] == "  ")
      NI0QW01.NI0QWDX4 = 10;
    else
      if (NIWXGPCD[NI0QWDX4] == "02"
       || NIWXGPCD[NI0QWDX4] == "03")
        /* next sentence*/
      else
        NLXREC.NLXERRF = "Y"; /**/
        converseLib.validationFailed(255); /* must be gpc 03 to create export decl*/
        NI0QW01.NI0QWDX4 = 10;
      end
    end
    NI0QWDX4 = NI0QWDX4 + 1;
  end
end // end NI0QS-EDIT-GPC

// init recs
Function NI0QS00()
  NLXREC.NLXCPROC = "NI0QS00";
  ;
  set NI0QW01 empty; /* clear working storage rec1*/
  set NI0QW02 empty; /* clear working storage rec2*/
  set NIWREC empty;
  set TSUREC empty;
  set TSVREC empty;
  set VRQTHD01 empty;
  set OP1REC empty;
  set OP2REC empty;
  set SQLCA empty;
  ;
end // end NI0QS00

// move ws array to screen
Function NI0QS01()
  NLXREC.NLXCPROC = "NI0QS01";
  ;
   /* move ws array to screen*/
  ;
  if (NI0QW01.NI0QWDX2 <= NI0QW01.NI0QWDX1)
     /* format order nbr*/
    NLXREC.NLXOP1CU = NI0QW02.OP1CUOID[NI0QWDX2];
    NLXREC.NLXOP1NO = NI0QW02.OP1NORID[NI0QWDX2];
    NI0QM100.NI0QMOID[NI0QWDX3] = NLXREC.NLXOID;
    NI0QM100.XGPCD[NI0QWDX3] = NI0QW02.XGPCD[NI0QWDX2];
    NI0QM100.XOBCD[NI0QWDX3] = NI0QW02.XOBCD[NI0QWDX2];
     /* format need date*/
    if (NI0QW02.OP1CUNDT[NI0QWDX2] != 0)
      NLXREC.XXXWCYMD = NI0QW02.OP1CUNDT[NI0QWDX2];
      XPNL003();
      NI0QM100.OP1CUNDT[NI0QWDX3] = NLXREC.XXXFLDT;
    end
  /* check for gpc=03 is balanced*/
    if (NI0QW02.XGPCD[NI0QWDX2] == "03")
      TSUREC.TSFSHPID = NIWREC.TSFSHPID;
      TSUREC.KUCCOID = NIWREC.KUCCOID;
      NI0QS04(); /* get shipment hdr*/
      if (TSUREC.YSTCD == "DZ")
        TSVREC.TSVPLNBR = NI0QW02.NI0QWPL1[NI0QWDX2];
        TSVREC.OP1CUOID = NI0QW02.OP1CUOID[NI0QWDX2];
        TSVREC.OP1NORID = NI0QW02.OP1NORID[NI0QWDX2];
        NI0QS09(); /* read tsvrec*/
        if (SQLCA.VAGen_SQLCODE == 0)
          if (TSVREC.PK2SCHNO == 0)
            NI0QW01.NI0QWBAL = "Y";
          end
        end
        if (NI0QW01.NI0QWBAL != "Y")
          TSVREC.TSVPLNBR = NI0QW02.NI0QWPL2[NI0QWDX2];
          TSVREC.OP1CUOID = NI0QW02.OP1CUOID[NI0QWDX2];
          TSVREC.OP1NORID = NI0QW02.OP1NORID[NI0QWDX2];
          NI0QS09(); /* read tsvrec*/
          if (SQLCA.VAGen_SQLCODE == 0)
            if (TSVREC.PK2SCHNO == 0)
              NI0QW01.NI0QWBAL = "Y";
            end
          end
        end
        if (NI0QW01.NI0QWBAL != "Y")
          TSVREC.TSVPLNBR = NI0QW02.NI0QWPL3[NI0QWDX2];
          TSVREC.OP1CUOID = NI0QW02.OP1CUOID[NI0QWDX2];
          TSVREC.OP1NORID = NI0QW02.OP1NORID[NI0QWDX2];
          NI0QS09(); /* read tsvrec*/
          if (SQLCA.VAGen_SQLCODE == 0)
            if (TSVREC.PK2SCHNO == 0)
              NI0QW01.NI0QWBAL = "Y";
            end
          end
        end
        if (NI0QW01.NI0QWBAL != "Y")
          TSVREC.TSVPLNBR = NI0QW02.NI0QWPL4[NI0QWDX2];
          TSVREC.OP1CUOID = NI0QW02.OP1CUOID[NI0QWDX2];
          TSVREC.OP1NORID = NI0QW02.OP1NORID[NI0QWDX2];
          NI0QS09(); /* read tsvrec*/
          if (SQLCA.VAGen_SQLCODE == 0)
            if (TSVREC.PK2SCHNO == 0)
              NI0QW01.NI0QWBAL = "Y";
            end
          end
        end
        if (NI0QW01.NI0QWBAL != "Y")
          TSVREC.TSVPLNBR = NI0QW02.NI0QWPL5[NI0QWDX2];
          TSVREC.OP1CUOID = NI0QW02.OP1CUOID[NI0QWDX2];
          TSVREC.OP1NORID = NI0QW02.OP1NORID[NI0QWDX2];
          NI0QS09(); /* read tsvrec*/
          if (SQLCA.VAGen_SQLCODE == 0)
            if (TSVREC.PK2SCHNO == 0)
              NI0QW01.NI0QWBAL = "Y";
            end
          end
        end
      end
    end
  end
  ;
  NI0QW01.NI0QWDX2 = NI0QW01.NI0QWDX2 + 1;
  NI0QW01.NI0QWDX3 = NI0QW01.NI0QWDX3 + 1;
  ;
end // end NI0QS01

// fill ws array from niwrec
Function NI0QS02()
  NLXREC.NLXCPROC = "NI0QS02"; /* set current proc name*/
  ;
   /* move from passed array to ws array*/
  ;
  if (NIWREC.NIWOP1CU[NI0QWDX4] != 0) /* order was passed*/
    NI0QW01.NI0QWDX1 = NI0QW01.NI0QWDX1 + 1;
    NI0QW02.OP1CUOID[NI0QWDX1] = NIWREC.NIWOP1CU[NI0QWDX4];
    NI0QW02.OP1NORID[NI0QWDX1] = NIWREC.NIWOP1NO[NI0QWDX4];
    NI0QW02.OP1PARTN[NI0QWDX1] = NIWREC.NIWOP1CH[NI0QWDX4];
    NI0QW02.XGPCD[NI0QWDX1] = NIWREC.NIWXGPCD[NI0QWDX4];
    NI0QW02.XOBCD[NI0QWDX1] = NIWREC.NIWXOBCD[NI0QWDX4];
    NI0QW02.OP1CUNDT[NI0QWDX1] = NIWREC.NIWOP1ND[NI0QWDX4];
     /* get request record*/
    set VRQTHD01 empty;
    VRQTHD01.OP1CUOID = NIWREC.NIWOP1CU[NI0QWDX4];
    VRQTHD01.OP1NORID = NIWREC.NIWOP1NO[NI0QWDX4];
    VRQTHD01.TSFSHPID = NIWREC.TSFSHPID;
    NI0QS05(); /* Read request table*/
    if (SQLCA.VAGen_SQLCODE != 0) /* request not found*/
      NI0QW02.NIOISTAT[NI0QWDX1] = "I";
      NI0QW02.NIOFRGTF[NI0QWDX1] = " ";
      NI0QW02.NCALCRID[NI0QWDX1] = " ";
      NI0QW02.NI0QWPL1[NI0QWDX1] = 0;
      NI0QW02.NI0QWPL2[NI0QWDX1] = 0;
      NI0QW02.NI0QWPL3[NI0QWDX1] = 0;
      NI0QW02.NI0QWPL4[NI0QWDX1] = 0;
      NI0QW02.NI0QWPL5[NI0QWDX1] = 0;
    else
      NI0QW02.NIOIND[NI0QWDX1] = VRQTHD01.NIOIND;
      NI0QW02.NIOISTAT[NI0QWDX1] = VRQTHD01.NIOISTAT;
      NI0QW02.NIOFRGTF[NI0QWDX1] = VRQTHD01.NIOFRGTF;
      NI0QW02.NCALCRID[NI0QWDX1] = VRQTHD01.NCALCRID;
      NI0QW02.NI0QWPL1[NI0QWDX1] = VRQTHD01.TSVPLNBR[1];
      NI0QW02.NI0QWPL2[NI0QWDX1] = VRQTHD01.TSVPLNBR[2];
      NI0QW02.NI0QWPL3[NI0QWDX1] = VRQTHD01.TSVPLNBR[3];
      NI0QW02.NI0QWPL4[NI0QWDX1] = VRQTHD01.TSVPLNBR[4];
      NI0QW02.NI0QWPL5[NI0QWDX1] = VRQTHD01.TSVPLNBR[5];
    end
  end
  NI0QW01.NI0QWDX4 = NI0QW01.NI0QWDX4 + 1;
  ;
end // end NI0QS02

// Select Unique from NCAREC
Function NI0QS03()
  NLXREC.NLXCPROC = "NI0QS03";
  ;
   /* ************************/
   /* NCAREC - Select Unique*/
   /* ************************/
  ;
  call "IO4260" ("S ", SQLCA, VLCHDR01) {isNoRefresh = yes, isExternal = yes}; /* Read L/C Hdr*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4260 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VLCHDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NI0QS03

// Select Unique from tsurec
Function NI0QS04()
  NLXREC.NLXCPROC = "NI0QS04";
  ;
   /* TSUREC - Select Unique*/
  ;
  call "IO4690" ("S ", SQLCA, TSUREC) {isNoRefresh = yes, isExternal = yes}; /* Read ship hdr*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4690 "; /* io module*/
    TA1REC.TA1DBASE = "DTRANS"; /* database*/
    TA1REC.TA1TBLVU = "VNLSHP01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NI0QS04

// Select Unique from NIOREC
Function NI0QS05()
  NLXREC.NLXCPROC = "NI0QS05";
  ;
   /* ************************/
   /* NIOREC - Select Unique*/
   /* ************************/
  ;
  call "IO0600" ("S ", SQLCA, VRQTHD01) {isNoRefresh = yes, isExternal = yes}; /* Read Request hdr*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    NI0QW01.NI0QWORI = VRQTHD01.OP1CUOID; /* format display key*/
    NI0QW01.NI0QWNKI = VRQTHD01.OP1NORID;
    NI0QW01.NI0QWSHP = VRQTHD01.TSFSHPID;
    TA1REC.TA1TBLKE = NI0QW01.NI0QWOKE; /* database key*/
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0600 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VRQTHD01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NI0QS05

// update Unique from NIOREC
Function NI0QS06()
  NLXREC.NLXCPROC = "NI0QS06";
  ;
   /* ************************/
   /* NIOREC - Update*/
   /* ************************/
  ;
  call "IO0600" ("U ", SQLCA, VRQTHD01) {isNoRefresh = yes, isExternal = yes}; /* Read Request hdr*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    NI0QW01.NI0QWORI = VRQTHD01.OP1CUOID; /* format display key*/
    NI0QW01.NI0QWNKI = VRQTHD01.OP1NORID;
    NI0QW01.NI0QWSHP = VRQTHD01.TSFSHPID;
    TA1REC.TA1TBLKE = NI0QW01.NI0QWOKE; /* database key*/
    TA1REC.TA1LOCAT[2] = "U      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0600 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VRQTHD01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NI0QS06

// fetch line items for op2rec
Function NI0QS07()
  NLXREC.NLXCPROC = "NI0QS07";
  ;
   /* select and edit order line items*/
  ;
  if (NI0QW02.NI0QWERR[NI0QWDX4] == "Y")
    return;
  end
  OP2REC.OP1CUOID = TSZREC.OP1CUOID;
  OP2REC.OP1NORID = TSZREC.OP1NORID;
  OP2REC.OP1PARTN = TSZREC.OP1PARTN;
  OP2REC.OP2LNINB = TSZREC.OP2LNINB;
  NI0QW01.NI0QWORD = TSZREC.OP1CUOID;
  NI0QW01.NI0QWNKD = TSZREC.OP1NORID;
  NI0QW01.NI0QWINB = TSZREC.OP2LNINB;
  call "IO0440" ("S ", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TBLKE = NI0QW01.NI0QW2KE; /* database key*/
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0440 "; /* io module*/
    TA1REC.TA1DBASE = "DORDER"; /* database*/
    TA1REC.TA1TBLVU = "VITEM001"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
   /* If foreign prices check prod price table for row*/
  ;
  if (OP1REC.XOBCD != "B1"
   && OP1REC.XOBCD != "B2")
    ;
    if (KUCREC.XAUCD == "33"
     || VRQTHD01.XLBCD == "GM"
     || VRQTHD01.XLBCD == "BV")
      if (NI0QW01.NI0QWFPL == "Y"
       || OP1REC.OP1ORCDT < 19891104)
        NI0QS25();
        return;
      else
        if (OP2REC.OP2AUPRC == 999.99)
          NI0QM100.NI0QMMSG[NI0QWDX4] = "ORDER HAS INVALID PRICE LINE ITEMS";
          NLXREC.NLXERRF = "Y";
        end
        if (OP2REC.OP2AUPRC == 0 /* price = 0*/
         && OP2REC.OP2TONOQ != 0) /* qty ne 0*/
          NI0QM100.NI0QMMSG[NI0QWDX4] = "ORDER HAS 0 PRICE LINE ITEMS";
          NLXREC.NLXERRF = "Y";
        end
      end
    else
      if (OP2REC.OP2AUPRC == 999.99)
        NI0QM100.NI0QMMSG[NI0QWDX4] = "ORDER HAS INVALID PRICE LINE ITEMS";
        NLXREC.NLXERRF = "Y";
      end
      if (OP2REC.OP2AUPRC == 0 /* price = 0*/
       && OP2REC.OP2TONOQ != 0) /* qty ne 0*/
        NI0QM100.NI0QMMSG[NI0QWDX4] = "ORDER HAS 0 PRICE LINE ITEMS";
        NLXREC.NLXERRF = "Y";
      end
    end
    ;
  end
  ;
end // end NI0QS07

// select unique from tsvrec
Function NI0QS09()
  NLXREC.NLXCPROC = "NI0QS09"; /* set current proc name*/
  ;
   /* select unique tsvrec*/
  ;
  call "IO4700" ("S ", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4700 "; /* io module*/
    TA1REC.TA1DBASE = "DTRANS"; /* database*/
    TA1REC.TA1TBLVU = "VNLPLO01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
end // end NI0QS09

// set ivc status for drafts
Function NI0QS10()
  ;
  NLXREC.NLXCPROC = "NI0QS10";
  ;
   /* update request to 's'*/
   /* get request record*/
  set VRQTHD01 empty;
  VRQTHD01.OP1CUOID = NIWREC.NIWOP1CU[NIWKQIDX];
  VRQTHD01.OP1NORID = NIWREC.NIWOP1NO[NIWKQIDX];
  VRQTHD01.TSFSHPID = NIWREC.TSFSHPID;
  NI0QS05(); /* Read request table*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* request found*/
    /* next sentence*/
  else
    converseLib.validationFailed(164); /* ivc rqt not found*/
    NLXREC.NLXERRF = "Y";
  end
  ;
  VRQTHD01.NIOISTAT = "S";
  NI0QS06(); /* update rqt hdr*/
  ;
   /* ivc status in working storage*/
  NI0QW02.NIOISTAT[NIWKQIDX] = "S";
  ;
  ;
  ;
end // end NI0QS10

// set ivc status/final indicator
Function NI0QS11()
  ;
  NLXREC.NLXCPROC = "NI0QS11";
  ;
   /* upd request to 'f' for final and 's' for submitted*/
   /* get request record*/
  set VRQTHD01 empty;
  VRQTHD01.OP1CUOID = NIWREC.NIWOP1CU[NIWKQIDX];
  VRQTHD01.OP1NORID = NIWREC.NIWOP1NO[NIWKQIDX];
  VRQTHD01.TSFSHPID = NIWREC.TSFSHPID;
  NI0QS05(); /* Read request table*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* request found*/
    /* next senctence*/
  else
    converseLib.validationFailed(164); /* ivc rqt not found*/
    NLXREC.NLXERRF = "Y";
  end
  ;
  VRQTHD01.NIOISTAT = "S";
  VRQTHD01.NIOIND = "F";
  NI0QS06(); /* update rqt hdr*/
  ;
   /* update working storage*/
  NI0QW02.NIOISTAT[NIWKQIDX] = "S"; /* upd ivc status*/
  NI0QW02.NIOIND[NIWKQIDX] = "F"; /* upd ivc typ indicator*/
  ;
  ;
  ;
end // end NI0QS11

// compare op1rec/niorec comp nbr
Function NI0QS12()
  ;
  NLXREC.NLXCPROC = "NI0QS12";
  ;
   /* get request record*/
  set VRQTHD01 empty;
  VRQTHD01.OP1CUOID = NI0QW02.OP1CUOID[NI0QWDX4];
  VRQTHD01.OP1NORID = NI0QW02.OP1NORID[NI0QWDX4];
  ;
   /* ***** ADD THESE FOLLOWING STATEMENTS FOR CHECKING ORDER*/
            /* HEADER DATABASE EXISTENCE IN NI0QS29  ********/
  OP1REC.OP1PARTN = NI0QW02.OP1PARTN[NI0QWDX4];
  OP1REC.OP1CUOID = NI0QW02.OP1CUOID[NI0QWDX4];
  OP1REC.OP1NORID = NI0QW02.OP1NORID[NI0QWDX4];
   /* ********************************************************/
  ;
  VRQTHD01.TSFSHPID = NIWREC.TSFSHPID;
  NI0QS05(); /* Read request table*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* request found*/
    NI0QW02.NIOISTAT[NI0QWDX4] = VRQTHD01.NIOISTAT;
  else
    converseLib.validationFailed(164); /* ivc rqt not found*/
    NLXREC.NLXERRF = "Y";
    return;
  end
  ;
  NI0QS13(); /* read order header*/
  ;
  ;
  if (OP1REC.OP1CMPNB == VRQTHD01.OP1CMPNB
   || OP1REC.KUCCOID == VRQTHD01.OP1CMPNB) /* Comp number order*/
    /* next sentence*/
  else
    if (NI0QW02.NIOISTAT[NI0QWDX4] == "I")
      /* next sentence*/
    else
      if (OP1REC.OP1CMPNB > 0)
        VRQTHD01.NIOISTAT = "I";
        NI0QS06(); /* update rqt hdr*/
        /* ivc status in working storage*/
        NI0QW02.NIOISTAT[NI0QWDX4] = "I";
      end
    end
  end
  ;
  ;
  ;
end // end NI0QS12

// Select Unique from OP1REC
Function NI0QS13()
  NLXREC.NLXCPROC = "NI0QS13";
  ;
   /* OP1REC - Select Unique*/
  ;
  OP1REC.OP1CUOID = NI0QW02.OP1CUOID[NI0QWDX4]; /* load key*/
  OP1REC.OP1NORID = NI0QW02.OP1NORID[NI0QWDX4];
  OP1REC.OP1PARTN = NI0QW02.OP1PARTN[NI0QWDX4];
  call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* Read Order record*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0430 "; /* io module*/
    TA1REC.TA1DBASE = "DORDER"; /* database*/
    TA1REC.TA1TBLVU = "VORHDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
  ;
end // end NI0QS13

// declare cursor - TSVREC scan-2
Function NI0QS14()
  ;
  ;
  NLXREC.NLXCPROC = "NI0QS14";
  ;
   /* read packing list for specific order nbr*/
   /* build key here and cursor s2to select*/
   /* packing list header by order nbr*/
  TSVREC.OP1CUOID = NI0QW02.OP1CUOID[NI0QWDX4];
  TSVREC.OP1NORID = NI0QW02.OP1NORID[NI0QWDX4];
  NI0QW01.NI0QWOID = TSVREC.OP1CUOID; /* display key*/
  NI0QW01.NI0QWNID = TSVREC.OP1NORID;
  ;
   /* declare and read cursor*/
  call "IO4700" ("S2", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TBLKE = NI0QW01.NI0QWVKE; /* database key*/
    TA1REC.TA1LOCAT[2] = "S2     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4700 "; /* io module*/
    TA1REC.TA1DBASE = "DTRANS"; /* database*/
    TA1REC.TA1TBLVU = "VNLPLO01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
  ;
  ;
end // end NI0QS14

// tsvrec fetch from scan-2
Function NI0QS15()
  NLXREC.NLXCPROC = "NI0QS15"; /* set current proc name*/
  ;
   /* fetch from cursor*/
  call "IO4700" ("N2", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    if (NI0QW01.NI0QWONE == "Y")
      NI0QW01.NI0QWONE = "N";
      NI0QW01.TSFSHPID = NIWREC.TSFSHPID; /* init for break logic*/
    end
     /* save pl nbr if new ship id*/
    if (TSVREC.TSFSHPID == NI0QW01.TSFSHPID) /* want same ship id*/
      if (TSVREC.TSVPLNBR == NI0QW02.NI0QWPL1[NI0QWDX4] /* pl fm rqthd*/
       || TSVREC.TSVPLNBR == NI0QW02.NI0QWPL2[NI0QWDX4] 
       || TSVREC.TSVPLNBR == NI0QW02.NI0QWPL3[NI0QWDX4] 
       || TSVREC.TSVPLNBR == NI0QW02.NI0QWPL4[NI0QWDX4] 
       || TSVREC.TSVPLNBR == NI0QW02.NI0QWPL5[NI0QWDX4])
        /* next sentence*/
      else
        NI0QM100.NI0QMMSG[NI0QWDX4] = "SHIPMENT/REQUEST PL NBRS DO NOT MATCH";
        NLXREC.NLXERRF = "Y";
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      call "IO4700" ("C2", SQLCA, TSVREC) {isNoRefresh = yes, isExternal = yes};
      NI0QW01.NI0QWEND = "Y";
    else
      TA1REC.TA1TBLKE = NI0QW01.NI0QWVKE; /* database key*/
      TA1REC.TA1LOCAT[2] = "N2     "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO4700 "; /* io module*/
      TA1REC.TA1DBASE = "DTRANS"; /* database*/
      TA1REC.TA1TBLVU = "VNLPLO01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end
  ;
end // end NI0QS15

// declare cursor - TSZREC scan-1
Function NI0QS16()
  ;
  ;
  NLXREC.NLXCPROC = "NI0QS16";
  ;
  TSZREC.TSVPLNBR = TSVREC.TSVPLNBR;
  TSZREC.OP1CUOID = TSVREC.OP1CUOID;
  TSZREC.OP1NORID = TSVREC.OP1NORID;
  TSZREC.TSPCRTNB = -1;
  TSZREC.XGPCD = "**";
  TSZREC.SY1STNBR = "******";
  TSZREC.SY2CLRID = "***";
  TSZREC.XDMCD = "**";
  TSZREC.XQACD = "**";
  TSZREC.XOWCD = "**";
  TSZREC.PC2INSEG = "***";
  TSZREC.XPGCD = "**";
  TSZREC.XUMCD = "**";
  TSZREC.XCTCD = NI0QW01.XCTCD;
  TSZREC.SY5SZID = -1;
  ;
   /* declare and read cursor*/
  call "IO4720" ("S1", SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "S1     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4720 "; /* io module*/
    TA1REC.TA1DBASE = "DTRANS"; /* database*/
    TA1REC.TA1TBLVU = "VNLPLS01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
  ;
  ;
end // end NI0QS16

// tszrec fetch from scan-1
Function NI0QS17()
  NLXREC.NLXCPROC = "NI0QS17"; /* set current proc name*/
  ;
   /* fetch from cursor*/
  call "IO4720" ("N1", SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* blank country found*/
    if (NI0QW01.NI0QWONE == "Y")
      NI0QW01.NI0QWONE = "N";
      NI0QW01.OP2LNINB = 0;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* all pl styles have a country*/
      call "IO4720" ("C1", SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};
      NI0QW01.NI0QWEND = "Y";
    else
      TA1REC.TA1LOCAT[2] = "N1     "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO4720 "; /* io module*/
      TA1REC.TA1DBASE = "DTRANS"; /* database*/
      TA1REC.TA1TBLVU = "VNLPLS01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end
  ;
end // end NI0QS17

// process country edit
Function NI0QS18()
  NLXREC.NLXCPROC = "NI0QS18"; /* set current proc name*/
  ;
  NI0QS16(); /* open tszrec cursor (pl style)*/
  ;
  NI0QW01.NI0QWEND = "N";
  NI0QW01.NI0QWONE = "Y";
  ;
  while (NI0QW01.NI0QWEND == "N")
    NI0QS17(); /* fetch row from tszrec*/
    if (NI0QW01.NI0QWONE == "N") /* blank country found*/
      NI0QM100.NI0QMMSG[NI0QWDX4] = "A PL STYLE HAS NO COUNTRY OF ORIGIN";
      NLXREC.NLXERRF = "Y";
      call "IO4720" ("C1", SQLCA, TSZREC) {isNoRefresh = yes, isExternal = yes};
      NI0QW01.NI0QWEND = "Y";
    end
  end
  ;
  ;
  ;
end // end NI0QS18

// process inv request PL edits
Function NI0QS19()
  NLXREC.NLXCPROC = "NI0QS19"; /* set current proc name*/
  ;
  if (SQLCA.VAGen_SQLCODE == 100)
    NI0QM100.NI0QMMSG[NI0QWDX4] = "A PACKING LIST DOES NOT EXIST";
    NLXREC.NLXERRF = "Y";
  else /* sqlcode = 0*/
    /* perform blank country of origin edit in pl style*/
    NI0QW01.XCTCD = " ";
    NI0QS18(); /* process country edit*/
    if (TSVREC.TSFSHPID == 0) /* rqt pl no longer associated to shpid*/
      NI0QM100.NI0QMMSG[NI0QWDX4] = "SHIPMENT/REQUEST PL NBRS DO NOT MATCH";
      NLXREC.NLXERRF = "Y";
    end
    NI0QW01.XCTCD = "****";
    NI0QS20(); /* process pl style edit*/
   /* IF NI0QW01.NI0QWQFL NE 'Y';     /* at least 1 with qty>0*/
    /* MOVE 252 TO EZEMNO;*/
    /* MOVE 'Y' TO NLXREC.NLXERRF;*/
   /* END;*/
  end
  ;
  ;
  ;
end // end NI0QS19

// process PL style edit
Function NI0QS20()
  NLXREC.NLXCPROC = "NI0QS20"; /* set current proc name*/
  ;
  NI0QS16(); /* open tszrec cursor (pl style)*/
  ;
  NI0QW01.NI0QWEND = "N";
  NI0QW01.NI0QWONE = "Y";
  NI0QW01.NI0QWQFL = "N"; /* qty > 0 flag*/
  ;
  while (NI0QW01.NI0QWEND == "N")
    NI0QS17(); /* fetch row from tszrec*/
    if (TSZREC.PK1QTY > 0) /* pk_aloc_pick_qty > 0*/
      NI0QW01.NI0QWQFL = "Y";
    end
    if (NI0QW01.NI0QWEND == "N"
     && TSZREC.OP2LNINB != NI0QW01.OP2LNINB) /* check for new style*/
      NI0QW01.OP2LNINB = TSZREC.OP2LNINB;
      NI0QS07(); /* select unique of order item (op2rec)*/
    end
  end
  ;
  ;
  ;
end // end NI0QS20

// Edit if shipment changed
Function NI0QS21()
  ;
  NLXREC.NLXCPROC = "NI0QS21"; /* set current proc name*/
  ;
  if (VRQTHD01.NIOIND == "F") /* if final inv printed no need to check*/
                                   /* shipment*/
    /* next sentence*/
  else
    if (TSUREC.ZZZCHGDT < VRQTHD01.ZZZCHGDT) /* request changed last*/
      /* next sentence*/
    else
      if (TSUREC.ZZZCHGDT == VRQTHD01.ZZZCHGDT /* changed same date*/
       && TSUREC.ZZZCHGTM < VRQTHD01.ZZZCHGTM) /* request changed last*/
        /* next sentence*/
      else /* shipment changed last*/
        if (NI0QW02.NIOISTAT[NI0QWDX4] == "I")
          /* next sentence*/
        else
          VRQTHD01.NIOISTAT = "I";
          NI0QS06();
          NI0QW02.NIOISTAT[NI0QWDX4] = "I";
        end
      end
    end
  end
end // end NI0QS21

// Select unique KUCREC
Function NI0QS22()
  NLXREC.NLXCPROC = "NI0QS22"; /* set current proc name*/
  ;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    NI0QW01.NI0QWCCU = NIWREC.KUCCOID; /* build display key*/
    TA1REC.TA1TBLKE = NI0QW01.NI0QWCKE; /* database key*/
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0240 "; /* io module*/
    TA1REC.TA1DBASE = "DCUST"; /* database*/
    TA1REC.TA1TBLVU = "VCMPNY01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NI0QS22

// Select unique VSMREC
Function NI0QS23()
  NLXREC.NLXCPROC = "NI0QS23"; /* Set current proc name*/
  ;
  YSMREC.YSMTBLPF = "XOB"; /* Sum code table prefix*/
  YSMREC.YSMSYSPF = "NL"; /* Sum code system prefix*/
  YSMREC.YSMSUMID = 1; /* Sum code id*/
  YSMREC.YSMSRCVL = OP1REC.XOBCD; /* Sum code sorce code value*/
  ;
  call "IO2640" ("S ", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "S      "; /* Database action*/
    TA1REC.TA1LOCAT[3] = "IO2640 "; /* IO module*/
    TA1REC.TA1DBASE = "DCORP"; /* Database*/
    TA1REC.TA1TBLVU = "VSUMCD01"; /* Table view*/
    XPNL005(); /* abend routine*/
  end
  ;
end // end NI0QS23

// Select price type code
Function NI0QS24()
  NLXREC.NLXCPROC = "NI0QS23"; /* Set current proc name*/
  ;
  VNLXPY01.XGPCD = OP1REC.XGPCD; /* GPC code*/
  VNLXPY01.YSMXOB = YSMREC.YSMSUMCD; /* Sum code*/
  VNLXPY01.ZARCD = VDSTRB01.ZARCD; /* Account region code*/
  VNLXPY01.KUCCOID = NIWREC.KUCCOID; /* Customer id*/
  VNLXPY01.ZFCCD = VDSTRB01.ZFCCD; /* ZFC currency code*/
  if (VRQTHD01.XLBCD == "GM")
    VNLXPY01.ZFCCD = "DM";
  else
    if (VRQTHD01.XLBCD == "BV")
      if (OP1REC.OP1CUNDT < 19940899)
        VNLXPY01.ZFCCD = "DM";
      else
        VNLXPY01.ZFCCD = "HF";
      end
    else
      VNLXPY01.ZFCCD = VDSTRB01.ZFCCD; /* ZFC currency code*/
    end
  end
  ;
  call "IO4500" ("SF", SQLCA, VNLXPY01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    if (VDSTRB01.ZFCCD != " ") /* Customer foreign currency flag*/
      NI0QW01.NI0QWFPL = "Y"; /* Set foreign price flag*/
    end
  else
    if (SQLCA.VAGen_SQLCODE != 0)
      TA1REC.TA1LOCAT[2] = "S      "; /* Database action*/
      TA1REC.TA1LOCAT[3] = "IO4500 "; /* IO module*/
      TA1REC.TA1DBASE = "DNILO"; /* Database*/
      TA1REC.TA1TBLVU = "VNLXPY01"; /* Table view*/
      XPNL005(); /* abend routine*/
    end
  end
  ;
end // end NI0QS24

// Foreign price edit
Function NI0QS25()
  NLXREC.NLXCPROC = "NI0QS25";
  ;
   /* Select price row, if not found send error message*/
  ;
  SY5REC.SY1STNBR = TSZREC.SY1STNBR;
  SY5REC.SY2CLRID = TSZREC.SY2CLRID;
  SY5REC.XDMCD = TSZREC.XDMCD;
   /* MOVE TSZREC.XQACD TO SY5REC.SY5PRCFL*/
  SY5REC.XQACD = TSZREC.XQACD;
  SY5REC.XGPCD = OP1REC.XGPCD;
  SY5REC.XPYCD = VNLXPY01.XPYCD;
  SY5REC.SY5SZID = 0;
  call "IO0380" ("S ", SQLCA, SY5REC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 100)
    SY5REC.SY2CLRID = "***";
    SY5REC.XDMCD = "**";
    call "IO0380" ("S ", SQLCA, SY5REC) {isNoRefresh = yes, isExternal = yes};
  end
  if (SQLCA.VAGen_SQLCODE == 0)
    NI0QS26(); /* test for price in row*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      NI0QW01.NI0QWER2 = "STYLE ";
      NI0QW01.NI0QWER3 = TSZREC.SY1STNBR;
      NI0QW01.NI0QWER4 = " PRICE = 0 FOR GM PRICE TYPE";
      NI0QM100.NI0QMMSG[NI0QWDX4] = NI0QW01.NI0QWER1;
      NLXREC.NLXERRF = "Y";
      NI0QW02.NI0QWERR[NI0QWDX4] = "Y";
    else
      TA1REC.TA1TBLKE = SY5REC.SY5KEY; /* database key*/
      TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO0380 "; /* io module*/
      TA1REC.TA1DBASE = "DPROD"; /* database*/
      TA1REC.TA1TBLVU = "VPRICE01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end
  ;
end // end NI0QS25

// Edit valid price date
Function NI0QS26()
  NLXREC.NLXCPROC = "NI0QS26";
  ;
   /* Determine pricing date*/
  ;
  if (YSMSUMCD == "F1") /* if a futures 1 order move cust need date*/
    NI0QW01.NI0QWPDT = OP1REC.OP1CUNDT;
  else /* else move ord-rdt*/
    NI0QW01.NI0QWPDT = OP1REC.OP1ORCDT;
  end
  ;
   /* Determine if valid price for pricing date*/
  ;
  if (SY5PCEDT[1] != 0 /* if price date-1 not 0*/
   && SY5PCEDT[1] <= NI0QWPDT) /* and not greater than order need date*/
    return; /* valid price exists*/
  end
  if (SY5PCEDT[2] != 0 /* if price date-2 not 0*/
   && SY5PCEDT[2] <= NI0QWPDT) /* and not greater than order need date*/
    return; /* valid price exists*/
  end
  if (SY5PCEDT[3] != 0 /* if price date-3 not 0*/
   && SY5PCEDT[3] <= NI0QWPDT) /* and not greater than order need date*/
    return; /* valid price exists*/
  end
  if (SY5PCEDT[4] != 0 /* if price date-4 not 0*/
   && SY5PCEDT[4] <= NI0QWPDT) /* and not greater than order need date*/
    return; /* valid price exists*/
  end
  if (SY5PCEDT[5] != 0 /* if price date-5 not 0*/
   && SY5PCEDT[5] <= NI0QWPDT) /* and not greater than order need date*/
    return; /* valid price exists*/
  end
  if (SY5PCEDT[6] != 0 /* if price date-6 not 0*/
   && SY5PCEDT[5] <= NI0QWPDT) /* and not greater than order need date*/
    return; /* valid price exists*/
  end
  ;
   /* Try for a future price if no current price exists*/
  ;
  if (SY5PCEDT[6] != 0 /* if price date-6 not 0*/
   && NI0QWPDT < SY5PCEDT[6]) /* and less than order need date*/
    return; /* valid future price exists*/
  end
  if (SY5PCEDT[5] != 0 /* if price date-5 not 0*/
   && NI0QWPDT < SY5PCEDT[5]) /* and less than order need date*/
    return; /* valid future price exists*/
  end
  if (SY5PCEDT[4] != 0 /* if price date-4 not 0*/
   && NI0QWPDT < SY5PCEDT[4]) /* and less than order need date*/
    return; /* valid future price exists*/
  end
  if (SY5PCEDT[3] != 0 /* if price date-3 not 0*/
   && NI0QWPDT < SY5PCEDT[3]) /* and less than order need date*/
    return; /* valid future price exists*/
  end
  if (SY5PCEDT[2] != 0 /* if price date-2 not 0*/
   && NI0QWPDT < SY5PCEDT[2]) /* and less than order need date*/
    return; /* valid future price exists*/
  end
  if (SY5PCEDT[1] != 0 /* if price date-1 not 0*/
   && NI0QWPDT < SY5PCEDT[1]) /* and less than order need date*/
    return; /* valid future price exists*/
  end
  ;
   /* No valid price, build error message*/
  ;
  NI0QW01.NI0QWER2 = "STYLE ";
  NI0QW01.NI0QWER3 = TSZREC.SY1STNBR;
  NI0QW01.NI0QWER4 = " PRICE = 0 FOR GM PRICE TYPE";
  NI0QM100.NI0QMMSG[NI0QWDX4] = NI0QW01.NI0QWER1;
  NLXREC.NLXERRF = "Y";
  NI0QW02.NI0QWERR[NI0QWDX4] = "Y";
  ;
end // end NI0QS26

// CHECK FOR VALID CHARGE TYPE
Function NI0QS27()
   /* **** CHECK FOR VALID CHARGE TYPE, FREIGHT OR INLAND ***/
  ;
  NLXREC.NLXCPROC = "NI0QS27";
  ;
  VZCHGL01.XAUCD = KUCREC.XAUCD;
  VZCHGL01.ZARCD = VDSTRB01.ZARCD;
  VZCHGL01.KUCCOID = TSUREC.KUCCOID;
  VZCHGL01.YMTCD = TSUREC.YMTCD;
  ;
  call "IO4540" ("SF", SQLCA, VZCHGL01) {isNoRefresh = yes, isExternal = yes}; /* SELECT FIRST*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
      /* NEXT SENTENCE*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      NI0QS28();
    else
      TA1REC.TA1LOCAT[2] = "SF     "; /* DATABASE ACTION*/
      TA1REC.TA1LOCAT[3] = "IO4540 "; /* IO MODULE*/
      TA1REC.TA1DBASE = "DNILO"; /* DATABASE*/
      TA1REC.TA1TBLVU = "VZCHGL01"; /* TABLE VIEW*/
      XPNL005(); /* ABEND ROUTINE*/
    end
  end
end // end NI0QS27

// MOVE MESSAGES TO SCREEN
Function NI0QS28()
   /* ***    MOVE MESSAGES TO THE SCREEN   *****/
  ;
  NLXREC.NLXCPROC = "NI0QS28";
  ;
  NLXREC.NLXERRF = "Y";
  ;
  if (VZCHGL01.ZCHCD == "15")
    converseLib.validationFailed(177); /* GL NOT FOUND FOR FREIGHT CHRG*/
    NLXREC.NLXERRF = "Y";
    return;
  end
  if (VZCHGL01.ZCHCD == "16")
    converseLib.validationFailed(178); /* GL NOT FOUND FOR INLAND  CHRG*/
    NLXREC.NLXERRF = "Y";
    return;
  end
end // end NI0QS28

// SELECT UNIQUE FROM OP1REC
Function NI0QS29()
   /* ***    SELECT UNIQUE FROM   OP1REC     LNGO *****/
  ;
  NLXREC.NLXCPROC = "NI0QS29";
  OP1REC.OP1PARTN = NI0QW02.OP1PARTN[1];
  OP1REC.OP1CUOID = NI0QW02.OP1CUOID[1];
  OP1REC.OP1NORID = NI0QW02.OP1NORID[1];
   /* ********************************************************/
  ;
  call "IO0430" ("SE", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* READ ORDER HEADER*/
                                  /* RECORD*/
  if (SQLCA.VAGen_SQLCODE == 0)
      /* NEXT SENTENCE*/
  else
    converseLib.validationFailed(179); /* ORDER DATABASE NOT AVAILABLE*/
    NLXREC.NLXERRF = "Y";
    return;
  end
end // end NI0QS29

// Select unique vdstrb01
Function NI0QS30()
  NLXREC.NLXCPROC = "NI0QS30"; /* set current proc name*/
  ;
  VDSTRB01.KUCCOID = NIWREC.KUCCOID;
  ;
  call "IO4600" ("S ", SQLCA, VDSTRB01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    NI0QW01.NI0QWCCU = NIWREC.KUCCOID; /* build display key*/
    TA1REC.TA1TBLKE = NI0QW01.NI0QWCKE; /* database key*/
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4600 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VDSTRB01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NI0QS30

// Select unique vdstrb01
Function NI0QS31()
  NLXREC.NLXCPROC = "NI0QS31"; /* set current proc name*/
  ;
  if (OP1REC.XCSCD == "20") /* order on hold status*/
    NI0QM100.NI0QMMSG[NI0QWDX4] = "ORDER ON HOLD STATUS";
    NLXREC.NLXERRF = "Y";
    NI0QW02.NI0QWERR[NI0QWDX4] = "Y";
  end
  ;
  ;
end // end NI0QS31

//*** RECORD=NI0QW01 ****
// this is the main working storage record for ni0h.
// ***********************
Record NI0QW01 type basicRecord
  10 OP1CUOID OP1CUOID ; 
  10 OP1NORID OP1NORID ; 
  10 TSFSHPID TSFSHPID ; 
  10 OP2LNINB OP2LNINB ; 
  10 XCTCD XCTCD ; 
  10 NI0QWVKE NI0QWVKE ; 
    15 NI0QWOID NI0QWOID ; 
    15 NI0QWNID NI0QWNID ; 
  10 NI0QW2KE NI0QW2KE ; 
    15 NI0QWORD NI0QWORD ; 
    15 NI0QWNKD NI0QWNKD ; 
    15 NI0QWINB NI0QWINB ; 
  10 NI0QWOKE NI0QWOKE ; 
    15 NI0QWORI NI0QWORI ; 
    15 NI0QWNKI NI0QWNKI ; 
    15 NI0QWSHP NI0QWSHP ; 
  10 NI0QWCKE NI0QWCKE ; 
    15 NI0QWCCU NI0QWCCU ; 
  10 NI0QWDX1 NI0QWDX1 ; 
  10 NI0QWDX2 NI0QWDX2 ; 
  10 NI0QWDX3 NI0QWDX3 ; 
  10 NI0QWDX4 NI0QWDX4 ; 
  10 NI0QWEND NI0QWEND ; 
  10 NI0QWONE NI0QWONE ; 
  10 NI0QWQFL NI0QWQFL ; 
  10 NI0QWFPL NI0QWFPL ; 
  10 NI0QWPDT NI0QWPDT ; 
  10 NI0QWER1 NI0QWER1 ; 
    15 NI0QWER2 NI0QWER2 ; 
    15 NI0QWER3 NI0QWER3 ; 
    15 NI0QWER4 NI0QWER4 ; 
  10 NI0QWBAL NI0QWBAL ; 
end // end NI0QW01

//*** RECORD=NI0QW02 ****
// this is the main working storage record for ni0h.
// ***********************
Record NI0QW02 type basicRecord
  10 OP1CUOID OP1CUOID [10] ; 
  10 OP1NORID OP1NORID [10] ; 
  10 OP1PARTN OP1PARTN [10] ; 
  10 XGPCD XGPCD [10] ; 
  10 XOBCD XOBCD [10] ; 
  10 OP1CUNDT OP1CUNDT [10] ; 
  10 NIOISTAT NIOISTAT [10] ; 
  10 NIOIND NIOIND [10] ; 
  10 NIOFRGTF NIOFRGTF [10] ; 
  10 NCALCRID NCALCRID [10] ; 
  10 NI0QWPL1 NI0QWPL1 [10] ; 
  10 NI0QWPL2 NI0QWPL2 [10] ; 
  10 NI0QWPL3 NI0QWPL3 [10] ; 
  10 NI0QWPL4 NI0QWPL4 [10] ; 
  10 NI0QWPL5 NI0QWPL5 [10] ; 
  10 NI0QWERR NI0QWERR [10] ; 
end // end NI0QW02

// op2rec display key
DataItem NI0QW2KE char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NI0QWBAL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display cu_co_id
DataItem NI0QWCCU num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// kucrec display key
DataItem NI0QWCKE char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max in ws array index
DataItem NI0QWDX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last row of array on scrn idx
DataItem NI0QWDX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen position index
DataItem NI0QWDX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work index
DataItem NI0QWDX4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// quit flag
DataItem NI0QWEND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error display fields
DataItem NI0QWER1 char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style message
DataItem NI0QWER2 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style in error
DataItem NI0QWER3 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error message
DataItem NI0QWER4 char(28)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// line error flag
DataItem NI0QWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// foreign price flag
DataItem NI0QWFPL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-line-item-nbr
DataItem NI0QWINB num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display op-nike-ord-id
DataItem NI0QWNID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display op-nike-ord-id
DataItem NI0QWNKD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display op-nike-ord-id
DataItem NI0QWNKI num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display op-cust-ord-id
DataItem NI0QWOID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// niorec display key
DataItem NI0QWOKE char(22)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time flag
DataItem NI0QWONE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display op-cust-ord-id
DataItem NI0QWORD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display op-cust-ord-id
DataItem NI0QWORI num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold order need date
DataItem NI0QWPDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// packing list nbr
DataItem NI0QWPL1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// packing list nbr
DataItem NI0QWPL2 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// packing list nbr
DataItem NI0QWPL3 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// packing list nbr
DataItem NI0QWPL4 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// packing list nbr
DataItem NI0QWPL5 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// qty > 0 flag
DataItem NI0QWQFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS_NIKE_SHP_ID
DataItem NI0QWSHP num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// tsvrec display key
DataItem NI0QWVKE char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

