package ni0r;

import corpcom2.XX0XW01;
import corpcom3.XPNL002;
import corpcom3.XPNL005;
import corpcom4.XSENTRY;
import corpcom4.XSNLS01;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import nl.common.*;
import ta.common.TA1REC;
import ta.common.TA2REC;
import vv.common.VRQTHD01;
//*** PROGRAM=NI0R ****
// ************************************************************
// 
//          ni0r - nil invoice request status maintenance
//          ---------------------------------------------
// 
// This application allows NIL data processing to reset the
// invoice request type indicator and the invoice request
// status flag.
// 
// 
// Maintenance History:
//   Date   Who    Remarks
// -------- ------ --------------------------------------------
// 02-13-90 jjohns Creation
// 10-15-92 jjudki Use expanded nlxrec.
// 11-15-93 JJUDKI RECOMPILE FOR DB CHANGES.
// Y2KFIX 02-24-98 PHARWO  REGEN FOR XX0XS01 CHANGES.
// *********************
Program NI0R type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "NL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  NI0RW01 NI0RW01; // record
  NLXREC NLXREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  VRQTHD01 VRQTHD01; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use NI0RM.NI0RM100 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    NI0R000: NI0R000();
    exit program;
  end // end main
end // end NI0R

// main flow
Function NI0R000()

   /* ************************************************************/
   /* *   this is the "main logic" for the application.         **/
   /* *                                                         **/
   /* *   perform initialization, set application revision nbrs,**/
   /* *   then do main perform until done with application      **/
   /* *                                                         **/
   /* ************************************************************/

  NLXREC.NLXCPROC = "NI0R000";
  COMMAREA.CACURRAP = "NI0R";

  NI0R001(); /* initilize the application*/

  NLXREC.NLXEOAF = "N"; /* set end-of-application flag to 'no'*/

  while (NLXREC.NLXEOAF == "N") /* while not end-of-aplication*/
    NI0R050(); /* process the application screen(s)*/
  end

  COMMAREA.CACURRAP = "NL0A";
  XPNL002();
  exit program;
end // end NI0R000

// initialize application
Function NI0R001()


   /* -----------------------------------------------------------*/
         /* initialize the application working storage*/

   /* -----------------------------------------------------------*/


  NLXREC.NLXCPROC = "NI0R001";

  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen converse*/
  VGVar.handleHardIOErrors = 1; /* return control to appl if hard db2 error*/

  set NI0RW01 empty; /* clear working storage rec1*/
  set TA1REC empty;
  set TA2REC empty;
  set SQLCA empty;
  set ERRSQLCA empty;

  XSENTRY(); /* appl entry security*/
  XSSEGTR(); /* set segmented transaction id*/

  set NLXREC empty; /* clear common working storage*/


  if (COMMAREA.CAFRMSYS != "NI")
    COMMAREA.CAUSERA = " ";
  end


   /* ------------------------------------------------------*/
    /* Set up working-storage array of screen names*/
   /* ------------------------------------------------------*/


  NLXREC.NLXSNAME[1] = "NI0RM100"; /* init screens used in this appl*/

  NLXREC.NLXCSCRN = "NI0RM100"; /* set first screen to display*/



end // end NI0R001

// decide which map to display
Function NI0R050()

   /* ************************************************************/
   /* *   control process the application screen(s)             **/
   /* *                                                         **/
   /* *  note that this process is being performed in a         **/
   /* *  "while loop" until the end-of-application flag is set  **/
   /* *  to 'y'.                                                **/
   /* *                                                         **/
   /* ************************************************************/

  NLXREC.NLXCPROC = "NI0R050"; /* set current process name*/

  sysVar.arrayIndex = 0;
  NLXREC.NLXSCRNX = 0;

  if (NLXREC.NLXCSCRN in NLXREC.NLXSNAME) /* if current-screen-name is*/
    NLXREC.NLXSCRNX = sysVar.arrayIndex; /* in the screen-array, then set*/
  end /* the screen-index*/

  set TA1REC empty;
  TA1REC.TA1MAP = NLXREC.NLXCSCRN; /* prepare for abend*/

  NLXREC.NLXBLDSC = "Y"; /* set build screen flag to 'yes'*/
  NLXREC.NLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
  NLXREC.NLXERRF = "N"; /* clear error flag*/

  if (NLXREC.NLXSCRNX == 1) /* if screen ni0rm100*/
    while (NLXREC.NLXEOSF == "N") /* show until user is done*/
      NI0R100();
    end
    TA1REC.TA1MAP = NLXREC.NLXCSCRN;
    TA1REC.TA1TBLKE = "UNKNOWN SCREEN NAME";
    TA1REC.TA1LOCAT[2] = NLXREC.NLXCSCRN;
    XPNL005(); /* abend*/
  end

   /* at this point;*/
       /* if the end-of-application flag (NLXeoaf ) = 'n'*/
         /* the perform will return to the top of ni0r050...*/
       /* else*/
         /* the perform will auto return to ni0r000.*/

end // end NI0R050

// converse map m100
Function NI0R100()

   /* ************************************************************/
       /* process screen ni0rm100*/

     /* note that this process is being performed in a*/
        /* "while loop" from nl0k050 until the end-of-screen*/
        /* flag (nlxeosf) is set to 'y'.*/

   /* ************************************************************/

  NLXREC.NLXCPROC = "NI0R100";

  if (NLXREC.NLXBLDSC == "Y")
    NI0R101();
    NLXREC.NLXBLDSC = "N";
  end

   /* ***********************************************************/
  converse NI0RM100 ;

   /* ***********************************************************/

  VAGen_EZEMSG = " ";

  NLXREC.NLXERRF = "N";

  NI0R110(); /* validate pfkeys*/

  if (NLXREC.NLXERRF == "N")
    NI0R120(); /* edit entries and update*/
  end

  if (NLXREC.NLXERRF == "N")
    NI0R130(); /* determine next action*/
  end

   /* at this point;*/
     /* if the end-of-screen flag (nlxeosf) is 'n'*/
        /* we go back to top of process ni0r100.*/
     /* if the end-of-screen flag (nlxeosf) is 'y'*/
        /* we return to ni0r050.*/
end // end NI0R100

// build screen
Function NI0R101()

   /* fill in all screen fields*/

   /* **************************************/
   /* build screen*/
   /* **************************************/

  NLXREC.NLXCPROC = "NI0R101";

  converseLib.clearScreen();
  set NI0RM100 initial;

  NI0RM100.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  NI0RM100.XXXRVNBR = "00"; /* revision nbr*/
  NI0RM100.XXXPRCNM = "NI0R100"; /* process name*/



end // end NI0R101

// edit pfkeys
Function NI0R110()

   /* **************************************/
   /* edit pk keys*/
   /* **************************************/

  NLXREC.NLXCPROC = "NI0R110";

  if (NI0RM100.CATOAP != " ") /* if any fastpath data entered*/
    COMMAREA.CATOAP = NI0RM100.CATOAP;
    COMMAREA.CAITEM = NI0RM100.CAITEM;
    COMMAREA.CAUSERA = " ";
    XPNL002();
    return;
  end

  if (converseVar.eventKey is enter)
    return;
  else
    if (converseVar.eventKey is pa1
     || converseVar.eventKey is pa2
     || converseVar.eventKey is pa3)
      converseLib.clearScreen();
      
       /* pa/pf key pressed is not valid*/
      converseLib.validationFailed(2);
       /* set alterable fields modified*/
      NLXREC.NLXERRF = "Y";
    else
      if (converseVar.eventKey is pf1)
        XSNLS01(); /* nil help routine - exit to gd01*/
      else
        if (converseVar.eventKey is pf4)
          COMMAREA.CAUSERA = " ";
          XSPF4();
        else
          if (converseVar.eventKey is pf3)
            COMMAREA.CAUSERA = " ";
            COMMAREA.CATOAP = "NL0A"; /* nil main menu*/
            XPNL002();
            return;
          else
            COMMAREA.CATOAP = " ";
            converseLib.validationFailed(2); /* INVALID FUNCTION KEY*/
            NLXREC.NLXERRF = "Y";
          end
        end
      end
    end
  end
end // end NI0R110

// edit entries and update niorec
Function NI0R120()

  NLXREC.NLXCPROC = "NI0R120";

   /* **************************************/
   /* edit entries and update*/
   /* **************************************/


  set NI0RM100.TSFSHPID initialAttributes; /* nike ship id*/
  set NI0RM100.OP1CUOID initialAttributes; /* customer order*/
  set NI0RM100.OP1NORID initialAttributes; /* nike order*/

  XX0XS01(); /* system date and time*/


   /* format key for invoice request header table*/
  VRQTHD01.TSFSHPID = NI0RM100.TSFSHPID;
  VRQTHD01.OP1CUOID = NI0RM100.OP1CUOID;

  if (NI0RM100.OP1NORID == 0)
    VRQTHD01.OP1NORID = 01;
  else
    VRQTHD01.OP1NORID = NI0RM100.OP1NORID;
  end

   /* format display key for invoice request header table*/
  NI0RW01.NI0RWSHP = VRQTHD01.TSFSHPID;
  NI0RW01.NI0RWCID = VRQTHD01.OP1CUOID;
  NI0RW01.NI0RWNID = VRQTHD01.OP1NORID;

  NI0RS01(); /* select unique on niorec*/

  if (NLXREC.NLXERRF == "N")
    VRQTHD01.NIOIND = "D"; /* request type*/
    VRQTHD01.NIOISTAT = "I"; /* request status*/
    VRQTHD01.ZZZCHGDT = XX0XW01.XX0XWDAT;
    VRQTHD01.ZZZCHGTM = XX0XW01.XX0XWTIM;
    NI0RS02(); /* update niorec*/
  end



end // end NI0R120

// determine next action
Function NI0R130()

   /* **************************************/
   /* determine next action*/
   /* **************************************/

  NLXREC.NLXCPROC = "NI0R130";

  if (converseVar.eventKey is enter)
    converseLib.validationFailed(159); /* request updated*/
    NLXREC.NLXBLDSC = "Y";
  end



end // end NI0R130

// select unique from niorec
Function NI0RS01()

  NLXREC.NLXCPROC = "NI0RS01";

   /* select unique*/
  call "IO0600" ("S ", SQLCA, VRQTHD01) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      NLXREC.NLXERRF = "Y"; /* niorec not found*/
      converseLib.validationFailed(158); /* no request found for entered*/
                                   /* ship/order*/
    else
      TA1REC.TA1TBLKE = NI0RW01.NI0RWOKE; /* database key*/
      TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO0600 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VRQTHD01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end



end // end NI0RS01

// update niorec
Function NI0RS02()

  NLXREC.NLXCPROC = "NI0RS02";

   /* update request header*/
  call "IO0600" ("U ", SQLCA, VRQTHD01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1TBLKE = NI0RW01.NI0RWOKE; /* table key*/
    TA1REC.TA1LOCAT[2] = "U      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0600 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VRQTHD01"; /* table view*/
    XPNL005(); /* abend routine*/
  end



end // end NI0RS02

//*** RECORD=NI0RW01 ****
// this is the main working storage record for ni0r.
// ***********************
Record NI0RW01 type basicRecord
  10 NI0RWOKE NI0RWOKE ; 
    15 NI0RWSHP NI0RWSHP ; 
    15 NI0RWCID NI0RWCID ; 
    15 NI0RWNID NI0RWNID ; 
end // end NI0RW01

// display op-cust-ord-id
DataItem NI0RWCID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// display op-nike-ord-id
DataItem NI0RWNID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// niorec key for error trap
DataItem NI0RWOKE char(22)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// display TS_NIKE_SHP_ID
DataItem NI0RWSHP num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

