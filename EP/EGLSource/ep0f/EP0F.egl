package ep0f;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import ep.common.*;
import fk.common.*;
import fy.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import pw.common.*;
import sy.common.*;
import ta.common.*;
import vv.common.*;
//*** PROGRAM=EP0F ****
// This application mainains the hanger style variables for
// DCMS vas. For vas orders, we use cross reference information
// to determine the 4 digit DCMS special handling code to use
// on the order.
// 
// This application mainains the hanger style variables for
// DCMS vas. For vas orders, we use cross reference information
// to derive a 4 digit DCMS special handling code from the
// special
// handling codes entered on the Nike order.
// 
// This application allows a user to inquire and maintain rows
// in a DB2 table.
// 
// There are two different screens that may be displayed.
// 
// The first screen displayed to the user allows specification
// of the search criteria to be used to list the rows in the
// table.  The list is displayed and the user may page backward
// and forward to view the information.
// 
// When a line is selected on the screen, the second screen is
// displayed, showing all information for that table row.
// 
// If the user has sufficient security to change the data, the
// modifiable fields remain unprotected.  Otherwise, they are
// protected from modification by the user.
// 
// If any data is modified, it is verified and, if complete and
// correct, the table row is updated with the changed data.
// The screen is redisplayed to the user, indicating that the
// update is completed.
// 
// If more that one line was selected on the first screen, the
// next selection is displayed when the user presses the ENTER
// key without making any change to the displayed data.
// 
// When the user exits the second screen (either via PF3 key or
// after all selections have been viewed) the first screen is
// redisplayed, indicating the selections that were viewed.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE    USERID  DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      05/13/98  Kheina  New application.
// multgpc  08/06/99  OENFIE  regenerate to pick up changes to
//                            XPEP-00000
// multgpc  08/09/99  OENFIE  changed EP0FS-EXIT to move the
//                            correct values to COMMAREA.
// *********************
Program EP0F type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "EP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  EP0FW00 EP0FW00; // record
  EP0FW01 EP0FW01; // record
  EP0FW02 EP0FW02; // record
  EP0FW03 EP0FW03; // record
  EPWREC EPWREC; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  SY2REC SY2REC; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VSPRCD01 VSPRCD01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGBTBL {deleteAfterUse = yes}; // table
  use XSUTBL {deleteAfterUse = yes}; // table
  use EP0FM.EP0FM001,  // forms
      EP0FM.EP0FM002, 
      EP0FM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPEP-00000: XPEP-00000();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set EP0FM001 initial; /* M001 input/output*/
    set EP0FM002 initial; /* M002 input/output*/
    set EP0FW00 empty; /* Work storage area*/
    set EP0FW01 empty; /* M001 display storage*/
    set EP0FW02 empty; /* M002 display storage*/
    set EP0FW03 empty; /* Internal style table*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time parms*/
    set XX0XW02 empty; /* Pop-up screen*/

    EP0FW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/
    EP0FW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    EP0FW00.XXX-TEMP-STG-LNTH = 1399; /* Temporary storage length*/
    EP0FW00.XXX-INX-LMT-NBR = 15; /* Number of lines on a page*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto EP0F-0000; /* Converse the main process*/


    EP0F-0000: EP0F-0000();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto EP0F-0000; /* Converse the main process*/


  end // end main
end // end EP0F

// Main process to display a map
Function EP0F-0000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  EP0F-1000(); /* Obtain the data to display*/

  EP0F-2000(); /* Format and display the map*/

  EP0F-3000(); /* Check attention identifier*/

  EP0F-4000(); /* Verify the entered data*/

  EP0F-5000(); /* Process valid input request*/


end // end EP0F-0000

// Obtain the data to display
Function EP0F-1000()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  if (EP0FW00.XXX-RQT-DATA-FL != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/
  if (EP0FW00.XXX-MSG-NBR == 0) /* No message to display*/
    EP0FW00.XXX-CURR-PAGE-NBR = 1; /* Page number to display*/
  end

   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/
  EP0FS-TA0050-P(); /* Purge any temporary storage*/

  EP0FW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/
  set VSPRCD01 empty; /* Clear row storage area*/

  VSPRCD01.PK-GSPRC-SRCE-CD = "HNGR"; /* Table key*/

  EP0FS-VSPRCD01-S1(); /* Select set and open cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/
  EP0FW00.XXX-INX-FLD-NBR = 1; /* Display line index*/

  EP0FW00.EP0FW-COLOR-EOF-FL = "N"; /* End of cursor flag*/

  while (EP0FW00.EP0FW-COLOR-EOF-FL == "N") /* Until end of cursor*/

    EP0FS-VSPRCD01-N1(); /* Fetch next row in cursor*/

    if (EP0FW00.EP0FW-COLOR-EOF-FL == "N") /* Not end of cursor*/

      /* ------------------------------------------------------------*/
      /* Save the data from the table row in display storage.*/
      /* ------------------------------------------------------------*/
      EP0FW01.PK-GOAL-SPRC-CD[XXX-INX-FLD-NBR] = VSPRCD01.PK-GOAL-SPRC-CD; /* Hanger style*/
      EP0FW01.PK-SPCL-PROC-VAR1[XXX-INX-FLD-NBR] = VSPRCD01.PK-SPCL-PROC-VAR1; /* Sil cd*/
      EP0FW01.PK-SPCL-PROC-VAR2[XXX-INX-FLD-NBR] = VSPRCD01.PK-SPCL-PROC-VAR2; /* Incl/excl cd*/
      EP0FW01.PK-SPCL-PROC-VAR3[XXX-INX-FLD-NBR] = VSPRCD01.PK-SPCL-PROC-VAR3; /* Text*/
      EP0FW01.PK-SPCL-PROC-VAR4[XXX-INX-FLD-NBR] = VSPRCD01.PK-SPCL-PROC-VAR4; /* Gender cd*/
      EP0FW01.PK-DCMS-SPRC-CD[XXX-INX-FLD-NBR] = VSPRCD01.PK-DCMS-SPRC-CD; /* Dcms cd*/
      EP0FW01.PK-DCMS-SINST-TXT[XXX-INX-FLD-NBR] = VSPRCD01.PK-DCMS-SINST-TXT; /* Instructions*/

      /* ------------------------------------------------------------*/
      /* Find goal style short name*/
      /* ------------------------------------------------------------*/
      EP0F-1100(); /* get goal source description*/

      /* ------------------------------------------------------------*/
      /* Increment the line index to the next row in display storage.*/
      /* ------------------------------------------------------------*/
      EP0FW00.XXX-INX-FLD-NBR = EP0FW00.XXX-INX-FLD-NBR + 1;
                                   /* Increment line index*/

      /* ------------------------------------------------------------*/
      /* If the page is full, add the page to the storage queue.*/
      /* ------------------------------------------------------------*/
      if (EP0FW00.XXX-INX-FLD-NBR > EP0FW00.XXX-INX-LMT-NBR) /* Page is full*/

        EP0FS-TA0050-A(); /* Add page to temporary storage*/

        EP0FW00.XXX-INX-FLD-NBR = 1; /* Display line index*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* (need empty lines for add's).*/
   /* ------------------------------------------------------------*/
  EP0FS-TA0050-A(); /* Add page to temporary storage*/

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/
  EP0FS-VSPRCD01-C1(); /* Close selected set cursor*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/
  if (EP0FW00.XXX-HI-PAGE-NBR == 0) /* No pages formatted*/
    EP0FW00.XXX-MSG-LOC-ID = "1000"; /* Message location*/
    converseLib.validationFailed(12); /* No data was found to display*/

    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/
  EP0FW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/


end // end EP0F-1000

// Get goal process desc
Function EP0F-1100()
   /* ------------------------------------------------------------*/
   /* Get goal special processing description*/
   /* ------------------------------------------------------------*/
  EP0FW01.SY-SHORT-STY-NM[XXX-INX-FLD-NBR] = " ";

  if (EP0FW01.PK-GOAL-SPRC-CD[XXX-INX-FLD-NBR] == "**")
    EP0FW01.SY-SHORT-STY-NM[XXX-INX-FLD-NBR] = "GENERIC MESSAGE";
  else
    if (EP0FW01.PK-GOAL-SPRC-CD[XXX-INX-FLD-NBR] == "******")
      EP0FW01.SY-SHORT-STY-NM[XXX-INX-FLD-NBR] = "GENERIC OVERRIDE";
    else
      set SY1REC empty;
      SY1REC.XGPCD = "04";
      SY1REC.SY1STNBR = EP0FW01.PK-GOAL-SPRC-CD[XXX-INX-FLD-NBR];

      EP0FS-IO0120-S(); /* get style01 row*/

      if (SY1REC.SY1SSTNM > " ")
        EP0FW01.SY-SHORT-STY-NM[XXX-INX-FLD-NBR] = SY1REC.SY1SSTNM;
      else
        EP0FW01.SY-SHORT-STY-NM[XXX-INX-FLD-NBR] = "UNKNOWN";
      end
    end
  end


end // end EP0F-1100

// Format and converse the map
Function EP0F-2000()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    EP0FW00.XXX-MSG-NBR = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If the map must be formatted, format the data in the map.*/
   /* ------------------------------------------------------------*/
  if (EP0FW00.XXX-MAP-FMAT-FL == "Y") /* Map must be formatted*/
    EP0F-2100(); /* Format the data in the map*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  EP0FM001.XXX-CURR-DT = VGVar.currentShortGregorianDate; /* Current date*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  if (EP0FW00.XXX-MSG-NBR != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ")   /* or message text*/

    if (EP0FW00.XXX-MSG-NBR != 0) /* Message to display*/
      if (EP0FW00.XXX-MSG-NBR == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(EP0FW00.XXX-MSG-NBR);
      end /* Message number*/
    else
      EP0FM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
    end

    EP0FM001.XXX-MSG-LOC-ID = EP0FW00.XXX-MSG-LOC-ID;
    set EP0FM001 alarm; /* Indicate sound alarm*/
  end

  converse EP0FM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  EP0FW00.XXX-MSG-LOC-ID = " "; /* Message location*/
  EP0FW00.XXX-MSG-NBR = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

   /* ------------------------------------------------------------*/
   /* Reset modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  EP0FW00.XXX-INX-FLD-NBR = 1; /* Initialize line index*/

  while (EP0FW00.XXX-INX-FLD-NBR <= EP0FW00.XXX-INX-LMT-NBR)
                                   /* Until end of screen*/
    if (EP0FM001.PK-GOAL-SPRC-CD[XXX-INX-FLD-NBR] > " "
     || EP0FM001.PK-DCMS-SPRC-CD[XXX-INX-FLD-NBR] > " ") /* data on line*/
      set EP0FM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] normal; /* Sel ind*/
      set EP0FM001.PK-GOAL-SPRC-CD[XXX-INX-FLD-NBR] normal;
      set EP0FM001.XSU-SILH-CD[XXX-INX-FLD-NBR] normal;
      set EP0FM001.EP0FM-INCL-EXCL-FL[XXX-INX-FLD-NBR] normal;
      set EP0FM001.EP0FM-EP-TEXT[XXX-INX-FLD-NBR] normal;
      set EP0FM001.XGC-GNDR-CD[XXX-INX-FLD-NBR] normal;
      set EP0FM001.PK-DCMS-SPRC-CD[XXX-INX-FLD-NBR] normal;
      set EP0FM001.PK-DCMS-SINST-TXT[XXX-INX-FLD-NBR] normal;
    end

    EP0FW00.XXX-INX-FLD-NBR = EP0FW00.XXX-INX-FLD-NBR + 1;
                                   /* Increment line index*/
  end


end // end EP0F-2000

// Format the data in the map
Function EP0F-2100()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set EP0FM001 initial; /* M001 input/output area*/

  EP0FW00.XXX-MAP-FMAT-FL = "N"; /* Format the map flag*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/
  if (EP0FW00.XXX-HI-PAGE-NBR > 0) /* Pages were formatted*/

    if (EP0FW00.XXX-CURR-PAGE-NBR != TA5REC.TA5TSQIX)
                                   /* Desired page not current*/
      /* ------------------------------------------------------------*/
      /* If the current page has been changed, update the page in*/
      /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/
      if (EP0FW00.XXX-PAGE-UPD-FL == "Y") /* Current page was changed*/

        EP0FS-TA0050-U(); /* Update temporary storage page*/

        EP0FW00.XXX-PAGE-UPD-FL = "N"; /* Page update flag*/
      end

      /* ------------------------------------------------------------*/
      /* If the desired page number is greater than the highest page*/
      /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/
      if (EP0FW00.XXX-CURR-PAGE-NBR > EP0FW00.XXX-HI-PAGE-NBR)
                                   /* Desired greater highest*/
        EP0FW00.XXX-CURR-PAGE-NBR = EP0FW00.XXX-HI-PAGE-NBR;
                                   /* Default to highest*/
      end

      EP0FS-TA0050-R(); /* Read temporary storage page*/
    end

    /* ------------------------------------------------------------*/
    /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/
    set EP0FM001.XXX-CURR-PAGE-DESC skip; /* "PAGE" literal*/
    EP0FM001.XXX-CURR-PAGE-NBR = EP0FW00.XXX-CURR-PAGE-NBR;
                                   /* Current page*/
    set EP0FM001.XXX-HI-PAGE-DESC skip; /* "OF" literal*/
    EP0FM001.XXX-HI-PAGE-NBR = EP0FW00.XXX-HI-PAGE-NBR;
                                   /* Highest page*/
  end

   /* ------------------------------------------------------------*/
   /* Format the map fields from the display storage area.*/
   /* ------------------------------------------------------------*/
  EP0FW00.XXX-INX-FLD-NBR = 1; /* Initialize line index*/

  while (EP0FW00.XXX-INX-FLD-NBR <= EP0FW00.XXX-INX-LMT-NBR)
                                   /* Until screen is full*/
    if (EP0FW01.PK-GOAL-SPRC-CD[XXX-INX-FLD-NBR] > " "
     || EP0FW01.PK-DCMS-SPRC-CD[XXX-INX-FLD-NBR] > " ")
      if (EP0FW00.XXX-INX-FLD-NBR == 1) /* First select field*/
        set EP0FM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] cursor, normal;
      else
        set EP0FM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] normal;
      end
    end

    EP0FM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] = EP0FW01.XXX-LN-SEL-IND[XXX-INX-FLD-NBR];
    EP0FM001.PK-GOAL-SPRC-CD[XXX-INX-FLD-NBR] = EP0FW01.PK-GOAL-SPRC-CD[XXX-INX-FLD-NBR]; /* Hanger style*/
    EP0FM001.SY-SHORT-STY-NM[XXX-INX-FLD-NBR] = EP0FW01.SY-SHORT-STY-NM[XXX-INX-FLD-NBR]; /* Style name*/
    EP0FM001.XSU-SILH-CD[XXX-INX-FLD-NBR] = EP0FW01.PK-SPCL-PROC-VAR1[XXX-INX-FLD-NBR]; /* Sil cd*/
    EP0FM001.EP0FM-INCL-EXCL-FL[XXX-INX-FLD-NBR] = EP0FW01.PK-SPCL-PROC-VAR2[XXX-INX-FLD-NBR]; /* Incl/excl cd*/
    EP0FM001.EP0FM-EP-TEXT[XXX-INX-FLD-NBR] = EP0FW01.PK-SPCL-PROC-VAR3[XXX-INX-FLD-NBR]; /* Text*/
    EP0FM001.XGC-GNDR-CD[XXX-INX-FLD-NBR] = EP0FW01.PK-SPCL-PROC-VAR4[XXX-INX-FLD-NBR]; /* Gender cd*/
    EP0FM001.PK-DCMS-SPRC-CD[XXX-INX-FLD-NBR] = EP0FW01.PK-DCMS-SPRC-CD[XXX-INX-FLD-NBR]; /* Dcms cd*/
    EP0FM001.PK-DCMS-SINST-TXT[XXX-INX-FLD-NBR] = EP0FW01.PK-DCMS-SINST-TXT[XXX-INX-FLD-NBR]; /* Instructions*/

    EP0FW00.XXX-INX-FLD-NBR = EP0FW00.XXX-INX-FLD-NBR + 1;
                                   /* Increment line index*/
  end


end // end EP0F-2100

// Check attention identifier
Function EP0F-3000()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pa2) /* Pa2 was pressed*/
    if (EP0FW00.XXX-RQT-DATA-FL == "Y") /* Request for data pending*/
      set EP0FW01 empty; /* M001 display storage*/
    end
    EP0FW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/
    EP0FW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If a PF key transfer requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf2 /* or PF2 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "EP0FM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf2) /* PF2 was pressed*/
      COMMAREA.CATOAP = "EP0C"; /* Update spec processing cd*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "EP0A"; /* System Menu*/
    end

    EP0FS-TA0050-P(); /* Purge any temporary storage*/

    EP0FS-EXIT(); /* Exit to another application*/

    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf9   /* and PF9 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf12) /* and PF12 was not pressed*/

    EP0FW00.XXX-MSG-LOC-ID = "3000"; /* Message location*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/
  end


end // end EP0F-3000

// Verify data that was entered
Function EP0F-4000()
   /* ------------------------------------------------------------*/
   /* If scroll requested, determine if any other field changed.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8 /* or scroll forward request*/
   || converseVar.eventKey is pf12) /* or delete request*/

    EP0F-4100(); /* Highlight other changed fields*/
  end

    /* ------------------------------------------------------------*/
    /* Determine whether a valid request to scroll was entered.*/
    /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    EP0F-4200(); /* Verify scroll request*/
  end

    /* ------------------------------------------------------------*/
    /* Determine if valid delete request*/
    /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf12) /* Delete request*/

    EP0F-4400(); /* Verify delete request*/
  end

      /* ------------------------------------------------------------*/
      /* Check for pop up window.*/
      /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf9) /* Pop-up request*/

    EP0F-4500(); /* Verify pop-up request*/
  end

      /* ------------------------------------------------------------*/
      /* <Enter>, verify any modifiable data that was changed.*/
      /* ------------------------------------------------------------*/
  if (converseVar.eventKey is enter) /* <Enter> - change request*/
    EP0FW00.XXX-INX-FLD-NBR = EP0FW00.XXX-INX-LMT-NBR;

    while (EP0FW00.XXX-INX-FLD-NBR > 0) /* Until end of lines*/

      EP0F-4600(); /* Verify data in the line*/

      EP0FW00.XXX-INX-FLD-NBR = EP0FW00.XXX-INX-FLD-NBR - 1;
    end
  end

   /* ------------------------------------------------------------*/
   /* If any error was found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end EP0F-4000

// Highlight other changed fields
Function EP0F-4100()
   /* ------------------------------------------------------------*/
   /* If a modifiable field was changed, indicate that field may*/
   /* not be changed when key is changed or a pf key is pressed.*/
   /* ------------------------------------------------------------*/
  EP0FW00.XXX-INX-FLD-NBR = EP0FW00.XXX-INX-LMT-NBR; /* Line index*/

  while (EP0FW00.XXX-INX-FLD-NBR > 0) /* Until end of lines*/

    if (EP0FM001.PK-GOAL-SPRC-CD[XXX-INX-FLD-NBR] != 
    EP0FW01.PK-GOAL-SPRC-CD[XXX-INX-FLD-NBR]) /* Goal code*/
      EP0FW00.XXX-MSG-LOC-ID = "4100"; /* Message location*/
      converseLib.validationFailed(61); /* Update valid only with <enter>*/
      set EP0FM001.PK-GOAL-SPRC-CD[XXX-INX-FLD-NBR] cursor, bold;
    end

    if (EP0FM001.XSU-SILH-CD[XXX-INX-FLD-NBR] != 
    EP0FW01.PK-SPCL-PROC-VAR1[XXX-INX-FLD-NBR]) /* Silhouette code*/
      EP0FW00.XXX-MSG-LOC-ID = "4100"; /* Message location*/
      converseLib.validationFailed(61); /* Update valid only with <enter>*/
      set EP0FM001.XSU-SILH-CD[XXX-INX-FLD-NBR] cursor, bold;
    end

    if (EP0FM001.EP0FM-INCL-EXCL-FL[XXX-INX-FLD-NBR] != 
    EP0FW01.PK-SPCL-PROC-VAR2[XXX-INX-FLD-NBR]) /* Inc/exc flag*/
      EP0FW00.XXX-MSG-LOC-ID = "4100"; /* Message location*/
      converseLib.validationFailed(61); /* Update valid only with <enter>*/
      set EP0FM001.EP0FM-INCL-EXCL-FL[XXX-INX-FLD-NBR] cursor, bold;
    end

    if (EP0FM001.EP0FM-EP-TEXT[XXX-INX-FLD-NBR] != 
    EP0FW01.PK-SPCL-PROC-VAR3[XXX-INX-FLD-NBR]) /* Text*/
      EP0FW00.XXX-MSG-LOC-ID = "4100"; /* Message location*/
      converseLib.validationFailed(61); /* Update valid only with <enter>*/
      set EP0FM001.EP0FM-EP-TEXT[XXX-INX-FLD-NBR] cursor, bold;
    end

    if (EP0FM001.XGC-GNDR-CD[XXX-INX-FLD-NBR] != 
    EP0FW01.PK-SPCL-PROC-VAR4[XXX-INX-FLD-NBR]) /* Gender code*/
      EP0FW00.XXX-MSG-LOC-ID = "4100"; /* Message location*/
      converseLib.validationFailed(61); /* Update valid only with <enter>*/
      set EP0FM001.XGC-GNDR-CD[XXX-INX-FLD-NBR] cursor, bold;
    end

    if (EP0FM001.PK-DCMS-SPRC-CD[XXX-INX-FLD-NBR] != 
    EP0FW01.PK-DCMS-SPRC-CD[XXX-INX-FLD-NBR]) /* Dcms spec hndl cd*/
      EP0FW00.XXX-MSG-LOC-ID = "4100"; /* Message location*/
      converseLib.validationFailed(61); /* Update valid only with <enter>*/
      set EP0FM001.PK-DCMS-SPRC-CD[XXX-INX-FLD-NBR] cursor, bold;
    end

    if (EP0FM001.PK-DCMS-SINST-TXT[XXX-INX-FLD-NBR] != 
    EP0FW01.PK-DCMS-SINST-TXT[XXX-INX-FLD-NBR]) /* Dcms spec inst*/
      EP0FW00.XXX-MSG-LOC-ID = "4100"; /* Message location*/
      converseLib.validationFailed(61); /* Update valid only with <enter>*/
      set EP0FM001.PK-DCMS-SINST-TXT[XXX-INX-FLD-NBR] cursor, bold;
    end

    if (EP0FM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] == " ")
      /* continue*/
    else
      if (EP0FM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] == "D"
       && converseVar.eventKey is pf12)
        /* continue*/
      else
        EP0FW00.XXX-MSG-LOC-ID = "4100"; /* Message location*/
        converseLib.validationFailed(11); /* Invalid data*/
        set EP0FM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] cursor, bold;
      end
    end


    EP0FW00.XXX-INX-FLD-NBR = EP0FW00.XXX-INX-FLD-NBR - 1;
                                   /* Decrement line number*/
  end


end // end EP0F-4100

// Verify scroll request
Function EP0F-4200()

   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && EP0FW00.XXX-CURR-PAGE-NBR < 2) /* and no previous pages*/

    EP0FW00.XXX-MSG-LOC-ID = "4200"; /* Message location*/
    converseLib.validationFailed(7); /* No previous page to display*/
  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && EP0FW00.XXX-CURR-PAGE-NBR >= EP0FW00.XXX-HI-PAGE-NBR)
                                   /* and no more pages*/

    EP0FW00.XXX-MSG-LOC-ID = "4200"; /* Message location*/
    converseLib.validationFailed(8); /* No more pages to display*/
  end


end // end EP0F-4200

Function EP0F-4400()
   /* ------------------------------------------------------------*/
   /* Determine if delete request is valid*/
   /* ------------------------------------------------------------*/
  EP0FW00.EP0FW-ENTRY-FOUND-FL = "N";
  EP0FW00.XXX-INX-FLD-NBR = EP0FW00.XXX-INX-LMT-NBR;

  while (EP0FW00.XXX-INX-FLD-NBR > 0) /* edit all lines on screen*/

    if (EP0FM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] != " ")
      if (EP0FM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] == "D")
        EP0FW00.EP0FW-ENTRY-FOUND-FL = "Y";
      else
        EP0FW00.XXX-MSG-LOC-ID = "4400"; /* Message location*/
        converseLib.validationFailed(39); /* must be 'd' for delete*/
        set EP0FM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] cursor, bold;
      end
    end

    EP0FW00.XXX-INX-FLD-NBR = EP0FW00.XXX-INX-FLD-NBR - 1; /* decr line indx*/
  end


  if (EP0FW00.EP0FW-ENTRY-FOUND-FL == "N")
    EP0FW00.XXX-MSG-LOC-ID = "4400"; /* Message location*/
    converseLib.validationFailed(39); /* must be 'd' for delete*/
  end


end // end EP0F-4400

// Display corporate table lists
Function EP0F-4500()
      /* ------------------------------------------------------------*/
      /* Check for pop up window.*/
      /* ------------------------------------------------------------*/

  EP0FW00.XXX-INX-FLD-NBR = 1; /* Line index*/
  while (EP0FW00.XXX-INX-FLD-NBR <= EP0FW00.XXX-INX-LMT-NBR)
    if (EP0FM001.PK-GOAL-SPRC-CD[XXX-INX-FLD-NBR] == "?")

      EP0F-4510(); /* Pop up window*/

      if (XX0XW02.XX0XWPIX > 0) /* A selection was made*/
        EP0FM001.PK-GOAL-SPRC-CD[XXX-INX-FLD-NBR] = EP0FW03.SY-STY-NBR[XX0XWPIX];
        EP0FM001.SY-SHORT-STY-NM[XXX-INX-FLD-NBR] = EP0FW03.SY-SHORT-STY-NM[XX0XWPIX];
        EPWREC.XXXERRID = "4500"; /* Message location*/
        converseLib.validationFailed(392); /* Request <enter> to porcess*/
      end
      EP0FW00.XXX-INX-FLD-NBR = EP0FW00.XXX-INX-LMT-NBR; /* max out*/
    else
      if (EP0FM001.XSU-SILH-CD[XXX-INX-FLD-NBR] == "?")

        EP0F-4520(); /* Pop up window*/

        if (XX0XW02.XX0XWPIX > 0) /* A selection was made*/
          EP0FM001.XSU-SILH-CD[XXX-INX-FLD-NBR] = XSUTBL.XSUCD[XX0XWPIX];
          EPWREC.XXXERRID = "4500"; /* Message location*/
          converseLib.validationFailed(392); /* Request <enter> to porcess*/
        end
        EP0FW00.XXX-INX-FLD-NBR = EP0FW00.XXX-INX-LMT-NBR; /* max out*/
      else
        if (EP0FM001.XGC-GNDR-CD[XXX-INX-FLD-NBR] == "?")

          EP0F-4530(); /* Pop up window*/

          if (XX0XW02.XX0XWPIX > 0) /* A selection was made*/
            EP0FM001.XGC-GNDR-CD[XXX-INX-FLD-NBR] = XGBTBL.XGBCD[XX0XWPIX];
            EPWREC.XXXERRID = "4500"; /* Message location*/
            converseLib.validationFailed(392); /* Request <enter> to porcess*/
          end
          EP0FW00.XXX-INX-FLD-NBR = EP0FW00.XXX-INX-LMT-NBR; /* max*/
        end
      end
    end

    EP0FW00.XXX-INX-FLD-NBR = EP0FW00.XXX-INX-FLD-NBR + 1;
  end

  converseLib.clearScreen();
   /* Clear screen before display*/


end // end EP0F-4500

// Display hanger styles lists
Function EP0F-4510()
   /* ------------------------------------------------------------*/
   /* display the list of hanger styles*/
   /* ------------------------------------------------------------*/
  if (EP0FW03.SY-STY-NBR[1] == " ")
    EP0F-4511(); /* Load style internal table*/
  end

  XPXX001(); /* Window initialization*/

  XX0XW02.XX0XWHDR = "HANGER STYLES"; /* Heading*/

  while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
    EP0F-4512(); /* Display the list*/
  end


end // end EP0F-4510

// Load style into working record
Function EP0F-4511()

   /* ------------------------------------------------------------*/
   /* Load DPROD.VSTYLE01 into ep0fw03 table*/
   /* ------------------------------------------------------------*/
  set EP0FW03 empty; /* Clear DB2 array record*/
  set SY1REC empty; /* Clear DB2 array record*/

   /* ------------------------------------------------------------*/
   /* declare cursor for VSTYLE01 Rows*/
   /* ------------------------------------------------------------*/
  EP0FS-IO0120-S1(); /* Select hanger styles*/

   /* ------------------------------------------------------------*/
   /* fetch and load rows into ep0fw03 array*/
   /* ------------------------------------------------------------*/
  EP0FS-IO0120-N1(); /* Fetch hanger styles*/

  EP0FW03.EP0FW-ARRAY-INDX = 1;

  while (SQLCA.VAGen_SQLCODE == 0
   && EP0FW03.EP0FW-ARRAY-INDX <= 200)

    EP0FW03.SY-STY-NBR[EP0FW-ARRAY-INDX] = SY1REC.SY1STNBR;
    EP0FW03.SY-SHORT-STY-NM[EP0FW-ARRAY-INDX] = SY1REC.SY1SSTNM;

    EP0FS-IO0120-N1(); /* Fetch hanger styles*/

    EP0FW03.EP0FW-ARRAY-INDX = EP0FW03.EP0FW-ARRAY-INDX + 1;
  end

   /* ------------------------------------------------------------*/
   /* close cursor for VSTYLE01*/
   /* ------------------------------------------------------------*/
  EP0FS-IO0120-C1(); /* Close hanger styles*/


end // end EP0F-4511

// converse HANGER style pop up
Function EP0F-4512()
   /* ------------------------------------------------------------*/

          /* CONVERSE POP UP WINDOW FOR HANGERS TABLE*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/
    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set EP0FM002 initial; /* Clear map output area*/
    EP0FM002.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    EP0FM002.XX0XMTR1 = "              SELECT & ENTER          ";
    EP0FM002.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";


     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/
    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/

      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && EP0FW03.SY-STY-NBR[XX0XWCT1] != " ") /* Or end of data*/

        EP0FM002.EP0FM-XX0XMCD[XX0XWCT2] = EP0FW03.SY-STY-NBR[XX0XWCT1];
        EP0FM002.XX0XMDES[XX0XWCT2] = EP0FW03.SY-SHORT-STY-NM[XX0XWCT1];

        XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* Save array*/
        if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
          XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
        end
        set EP0FM002.XX0XMSEL[XX0XWCT2] normal;
        XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1; /* Increment screen index*/
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end


     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/
    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/

        EP0FM002.EP0FM-XX0XMCD[XX0XWCT2] = EP0FW03.SY-STY-NBR[XX0XWCT1];
        EP0FM002.XX0XMDES[XX0XWCT2] = EP0FW03.SY-SHORT-STY-NM[XX0XWCT1];

        XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1; /* Save array*/
        set EP0FM002.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
        XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1; /* Decrement screen index*/
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1; /* to 0, set it up to 1 (valid value)*/
      end
    end
  end


  converse EP0FM002 ;


  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/
  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && EP0FM002.EP0FM-XX0XMCD[XX0XWCT2] != " ")
    set EP0FM002.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/
  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && EP0FW03.SY-STY-NBR[XX0XWCT1] == " ") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/
        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (EP0FM002.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end EP0F-4512

// Display silhoutte table lists
Function EP0F-4520()
   /* ------------------------------------------------------------*/
   /* display the list of silhouttes.*/
   /* ------------------------------------------------------------*/
  XPXX001(); /* Window initialization*/

  XX0XW02.XX0XWHDR = "SILHOUTTE CODES"; /* Heading*/
  XX0XW02.XGPCD = "03"; /* only apparel stuff*/

  while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
    XPXSU01(); /* Display the list*/
  end


end // end EP0F-4520

// Display base gender table list
Function EP0F-4530()
   /* ------------------------------------------------------------*/
   /* display the list of base gender codes*/
   /* ------------------------------------------------------------*/
  XPXX001(); /* Window initialization*/

  XX0XW02.XX0XWHDR = "BASE GENDER CODES"; /* Heading*/

  while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
    XPXGB01(); /* Display the list*/
  end


end // end EP0F-4530

// Verify data in the line
Function EP0F-4600()
   /* ------------------------------------------------------------*/
   /* Edit all enterable fields*/
   /* ------------------------------------------------------------*/
  if (EP0FM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] == " " /* Select ind*/
   && EP0FM001.PK-GOAL-SPRC-CD[XXX-INX-FLD-NBR] ==    
  EP0FW01.PK-GOAL-SPRC-CD[XXX-INX-FLD-NBR]            /* Selection entered*/
   && EP0FM001.XSU-SILH-CD[XXX-INX-FLD-NBR] ==        
  EP0FW01.PK-SPCL-PROC-VAR1[XXX-INX-FLD-NBR]          /* Silhouette code*/
   && EP0FM001.EP0FM-INCL-EXCL-FL[XXX-INX-FLD-NBR] == 
  EP0FW01.PK-SPCL-PROC-VAR2[XXX-INX-FLD-NBR]          /* Inc/exc flag*/
   && EP0FM001.EP0FM-EP-TEXT[XXX-INX-FLD-NBR] ==      
  EP0FW01.PK-SPCL-PROC-VAR3[XXX-INX-FLD-NBR]          /* Text*/
   && EP0FM001.XGC-GNDR-CD[XXX-INX-FLD-NBR] ==        
  EP0FW01.PK-SPCL-PROC-VAR4[XXX-INX-FLD-NBR]          /* Gender code*/
   && EP0FM001.PK-DCMS-SPRC-CD[XXX-INX-FLD-NBR] ==    
  EP0FW01.PK-DCMS-SPRC-CD[XXX-INX-FLD-NBR]            /* Dcms spec hndl code*/
   && EP0FM001.PK-DCMS-SINST-TXT[XXX-INX-FLD-NBR] ==  
  EP0FW01.PK-DCMS-SINST-TXT[XXX-INX-FLD-NBR])         /* Dcms spec instruc*/

    return; /* No changes on this line, go back*/
  end


  if (EP0FM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] != " ") /* Select ind*/
    EP0FW00.XXX-MSG-LOC-ID = "4600"; /* Message location*/
    converseLib.validationFailed(40); /* Must be blank*/
    set EP0FM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] cursor, bold;
  end


  if (EP0FM001.PK-GOAL-SPRC-CD[XXX-INX-FLD-NBR] != 
  EP0FW01.PK-GOAL-SPRC-CD[XXX-INX-FLD-NBR]) /* Selection entered*/

    if (EP0FM001.PK-GOAL-SPRC-CD[XXX-INX-FLD-NBR] == " ")
      EP0FW00.XXX-MSG-LOC-ID = "4600"; /* Message location*/
      converseLib.validationFailed(9); /* Required data*/
      set EP0FM001.PK-GOAL-SPRC-CD[XXX-INX-FLD-NBR] cursor, bold;
    else

      if (EP0FM001.PK-GOAL-SPRC-CD[XXX-INX-FLD-NBR] == "**"
       || EP0FM001.PK-GOAL-SPRC-CD[XXX-INX-FLD-NBR] == "******") /* Genric*/
         /* continue*/
      else
        EP0FW-STYLE-FND-FL = "N"; /* Style found flag*/
        set SY1REC empty;
        SY1REC.XGPCD = "04";
        SY1REC.SY1STNBR = EP0FM001.PK-GOAL-SPRC-CD[XXX-INX-FLD-NBR];

        EP0FS-IO0120-S(); /* Select style*/

        if (EP0FW00.EP0FW-STYLE-FND-FL == "N") /* Style not found*/
          EP0FW00.XXX-MSG-LOC-ID = "4600"; /* Message location*/
          converseLib.validationFailed(34); /* Invalid style*/
          set EP0FM001.PK-GOAL-SPRC-CD[XXX-INX-FLD-NBR] cursor, bold;
        end
      end
    end
  end


  if (EP0FM001.XSU-SILH-CD[XXX-INX-FLD-NBR] != 
  EP0FW01.PK-SPCL-PROC-VAR1[XXX-INX-FLD-NBR]) /* Silhouette code*/

    if (EP0FM001.XSU-SILH-CD[XXX-INX-FLD-NBR] > "  ")
      EP0FW00.XSUCD = EP0FM001.XSU-SILH-CD[XXX-INX-FLD-NBR];
      EP0FW00.XGPCD = "03";
      if (EP0FW00.XSUKEY in XSUTBL.XSUKEY)
         /* continue*/
      else
        EP0FW00.XXX-MSG-LOC-ID = "4600"; /* Message location*/
        converseLib.validationFailed(35); /* Invalid silhouette code*/
        set EP0FM001.XSU-SILH-CD[XXX-INX-FLD-NBR] cursor, bold;
      end
    end
  end


  if (EP0FM001.EP0FM-INCL-EXCL-FL[XXX-INX-FLD-NBR] != 
  EP0FW01.PK-SPCL-PROC-VAR2[XXX-INX-FLD-NBR]) /* Inc/exc flag*/

    if (EP0FM001.EP0FM-INCL-EXCL-FL[XXX-INX-FLD-NBR] == " ")
      if (EP0FM001.EP0FM-EP-TEXT[XXX-INX-FLD-NBR] != " ")
        EP0FW00.XXX-MSG-LOC-ID = "4600"; /* Message location*/
        converseLib.validationFailed(37); /* Flag required with text*/
        set EP0FM001.EP0FM-INCL-EXCL-FL[XXX-INX-FLD-NBR] cursor, bold;
      end
    else
      if (EP0FM001.EP0FM-INCL-EXCL-FL[XXX-INX-FLD-NBR] == "E"
       || EP0FM001.EP0FM-INCL-EXCL-FL[XXX-INX-FLD-NBR] == "I")

        if (EP0FM001.PK-GOAL-SPRC-CD[XXX-INX-FLD-NBR] == "******") /* Genr*/
          if (EP0FM001.EP0FM-INCL-EXCL-FL[XXX-INX-FLD-NBR] != "E")
            EP0FW00.XXX-MSG-LOC-ID = "4600"; /* Message location*/
            converseLib.validationFailed(49); /* Must be "e" for generic*/
            set EP0FM001.EP0FM-INCL-EXCL-FL[XXX-INX-FLD-NBR] cursor, bold;
          end

          if (EP0FM001.EP0FM-EP-TEXT[XXX-INX-FLD-NBR] == " ")
            EP0FW00.XXX-MSG-LOC-ID = "4600"; /* Message location*/
            converseLib.validationFailed(37); /* Text required with inc/exc*/
            set EP0FM001.EP0FM-INCL-EXCL-FL[XXX-INX-FLD-NBR] cursor, bold;
          end
        else
          if (EP0FM001.EP0FM-EP-TEXT[XXX-INX-FLD-NBR] == " ")
            EP0FW00.XXX-MSG-LOC-ID = "4600"; /* Message location*/
            converseLib.validationFailed(37); /* Text required with inc/exc*/
            set EP0FM001.EP0FM-INCL-EXCL-FL[XXX-INX-FLD-NBR] cursor, bold;
          end
        end
      else
        EP0FW00.XXX-MSG-LOC-ID = "4600"; /* Message location*/
        converseLib.validationFailed(36); /* Invalid inc/exc flag*/
        set EP0FM001.EP0FM-INCL-EXCL-FL[XXX-INX-FLD-NBR] cursor, bold;
      end
    end
  end


  if (EP0FM001.EP0FM-EP-TEXT[XXX-INX-FLD-NBR] != 
  EP0FW01.PK-SPCL-PROC-VAR3[XXX-INX-FLD-NBR]) /* Text*/

    if (EP0FM001.EP0FM-EP-TEXT[XXX-INX-FLD-NBR] != " "
     && EP0FM001.EP0FM-INCL-EXCL-FL[XXX-INX-FLD-NBR] == " ")
      EP0FW00.XXX-MSG-LOC-ID = "4600"; /* Message location*/
      converseLib.validationFailed(47); /* Text must be blank*/
      set EP0FM001.EP0FM-EP-TEXT[XXX-INX-FLD-NBR] cursor, bold;
    end
  end


  if (EP0FM001.XGC-GNDR-CD[XXX-INX-FLD-NBR] != 
  EP0FW01.PK-SPCL-PROC-VAR4[XXX-INX-FLD-NBR]) /* Gender code*/

    if (EP0FM001.XGC-GNDR-CD[XXX-INX-FLD-NBR] > "  ")
      if (EP0FM001.XGC-GNDR-CD[XXX-INX-FLD-NBR] in XGBTBL.XGBCD)
         /* continue*/
      else
        EP0FW00.XXX-MSG-LOC-ID = "4600"; /* Message location*/
        converseLib.validationFailed(41); /* Invalid gender code*/
        set EP0FM001.XGC-GNDR-CD[XXX-INX-FLD-NBR] cursor, bold;
      end
    end
  end


  if (EP0FM001.PK-DCMS-SPRC-CD[XXX-INX-FLD-NBR] != 
  EP0FW01.PK-DCMS-SPRC-CD[XXX-INX-FLD-NBR]) /* Dcms spec code*/

    if (EP0FM001.PK-DCMS-SPRC-CD[XXX-INX-FLD-NBR] == " ")
      EP0FW00.XXX-MSG-LOC-ID = "4600"; /* Message location*/
      converseLib.validationFailed(52); /* Dcms code cannot be blank*/
      set EP0FM001.PK-DCMS-SPRC-CD[XXX-INX-FLD-NBR] cursor, bold;
    else
      if (EP0FW01.PK-DCMS-SPRC-CD[XXX-INX-FLD-NBR] == " ")
        EP0FW-DCMS-CD-FND-FL = "N"; /* Dcms code found flag*/
        VSPRCD01.PK-DCMS-SPRC-CD = EP0FM001.PK-DCMS-SPRC-CD[XXX-INX-FLD-NBR]; /* Table key*/

        EP0FS-VSPRCD01-S(); /* Select dcms code*/

        if (EP0FW00.EP0FW-DCMS-CD-FND-FL == "Y") /* Dcms code found*/
          EP0FW00.XXX-MSG-LOC-ID = "4600"; /* Message location*/
          converseLib.validationFailed(42); /* Dcms code in use*/
          set EP0FM001.PK-DCMS-SPRC-CD[XXX-INX-FLD-NBR] cursor, bold;
        end
      else
        EP0FW00.XXX-MSG-LOC-ID = "4600"; /* Message location*/
        converseLib.validationFailed(393); /* Dcms code cannot be changed*/
        set EP0FM001.PK-DCMS-SPRC-CD[XXX-INX-FLD-NBR] cursor, bold;
      end
    end
  end


  if (EP0FM001.PK-DCMS-SINST-TXT[XXX-INX-FLD-NBR] != 
  EP0FW01.PK-DCMS-SINST-TXT[XXX-INX-FLD-NBR]) /* Dcms spec instruc*/

    if (EP0FM001.PK-DCMS-SINST-TXT[XXX-INX-FLD-NBR] == " ")
      EP0FW00.XXX-MSG-LOC-ID = "4600"; /* Message location*/
      converseLib.validationFailed(46); /* Dcms instruc cannot be blank*/
      set EP0FM001.PK-DCMS-SINST-TXT[XXX-INX-FLD-NBR] cursor, bold;
    end
  end


    /*  */
    /* XXX-LN-SEL-IND*/
    /* PK-GOAL-SPRC-CD*/
    /* PK-SPCL-PROC-VAR1*/
    /* PK-SPCL-PROC-VAR2*/
    /* PK-SPCL-PROC-VAR3*/
    /* PK-SPCL-PROC-VAR4*/
    /* PK-DCMS-SPRC-CD*/
    /* PK-DCMS-SINST-TXT*/
    /*  */
    /* Map fields*/
    /* name = PK-GOAL-SPRC-CD*/
    /* name = XSU-SILH-CD*/
    /* name = EP-INCL-EXCL-FL*/
    /* name = EP-TEXT*/
    /* name = XGC-GNDR-CD*/
    /* name = PK-DCMS-SPRC-CD*/
    /* name = PK-DCMS-SINST-TXT*/
    /*  */


end // end EP0F-4600

// Process valid input request
Function EP0F-5000()
   /* ------------------------------------------------------------*/
   /* If request for restore, set flags and return*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf11) /* Reset requested*/
    EP0FW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/
    EP0FW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    return; /* Return to previous process*/
  end


   /* ------------------------------------------------------------*/
   /* If scroll backward was requested, decrement the page number.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    EP0FW00.XXX-CURR-PAGE-NBR = EP0FW00.XXX-CURR-PAGE-NBR - 1;
    EP0FW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    return; /* Return to previous process*/
  end


   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, increment the page number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    EP0FW00.XXX-CURR-PAGE-NBR = EP0FW00.XXX-CURR-PAGE-NBR + 1;
    EP0FW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    return; /* Return to previous process*/
  end


   /* ------------------------------------------------------------*/
   /* Process delete requests*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf12) /* Delete*/
    EP0FW00.XXX-INX-FLD-NBR = 1; /* Initialize line index*/
    while (EP0FW00.XXX-INX-FLD-NBR <= EP0FW00.XXX-INX-LMT-NBR)

      if (EP0FM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] == "D") /* Delete*/
        EP0F-5300(); /* Process valid delete request*/
      end
      EP0FW00.XXX-INX-FLD-NBR = EP0FW00.XXX-INX-FLD-NBR + 1;
    end

    if (converseVar.validationMsgNum == 0) /* No errors found*/
      EP0FW00.XXX-INX-FLD-NBR = 1; /* Initialize line index*/
      while (EP0FW00.XXX-INX-FLD-NBR <= EP0FW00.XXX-INX-LMT-NBR)

        if (EP0FM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] == "D") /* Delete*/
          EP0FM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] = " ";
          EP0FM001.PK-GOAL-SPRC-CD[XXX-INX-FLD-NBR] = " ";
          EP0FM001.XSU-SILH-CD[XXX-INX-FLD-NBR] = " ";
          EP0FM001.EP0FM-INCL-EXCL-FL[XXX-INX-FLD-NBR] = " ";
          EP0FM001.EP0FM-EP-TEXT[XXX-INX-FLD-NBR] = " ";
          EP0FM001.XGC-GNDR-CD[XXX-INX-FLD-NBR] = " ";
          EP0FM001.PK-DCMS-SPRC-CD[XXX-INX-FLD-NBR] = " ";
          EP0FM001.PK-DCMS-SINST-TXT[XXX-INX-FLD-NBR] = " ";
        end
        EP0FW00.XXX-INX-FLD-NBR = EP0FW00.XXX-INX-FLD-NBR + 1;
      end
    end
  end


   /* ------------------------------------------------------------*/
   /* Do actual DB adds or updates requested.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is enter) /* change or add requested*/
    EP0FW00.XXX-INX-FLD-NBR = 1; /* Initialize line index*/
    while (EP0FW00.XXX-INX-FLD-NBR <= EP0FW00.XXX-INX-LMT-NBR)
                                   /* Until end of lines*/
      if (EP0FM001.PK-GOAL-SPRC-CD[XXX-INX-FLD-NBR] != 
      EP0FW01.PK-GOAL-SPRC-CD[XXX-INX-FLD-NBR]   /* Goal spec hndl cd*/
       || EP0FM001.XSU-SILH-CD[XXX-INX-FLD-NBR] != 
      EP0FW01.PK-SPCL-PROC-VAR1[XXX-INX-FLD-NBR] /* Silhouette code*/
       || EP0FM001.EP0FM-INCL-EXCL-FL[XXX-INX-FLD-NBR] != 
      EP0FW01.PK-SPCL-PROC-VAR2[XXX-INX-FLD-NBR] /* Inc/exc flag*/
       || EP0FM001.EP0FM-EP-TEXT[XXX-INX-FLD-NBR] != 
      EP0FW01.PK-SPCL-PROC-VAR3[XXX-INX-FLD-NBR] /* Text*/
       || EP0FM001.XGC-GNDR-CD[XXX-INX-FLD-NBR] != 
      EP0FW01.PK-SPCL-PROC-VAR4[XXX-INX-FLD-NBR] /* Gender code*/
       || EP0FM001.PK-DCMS-SPRC-CD[XXX-INX-FLD-NBR] != 
      EP0FW01.PK-DCMS-SPRC-CD[XXX-INX-FLD-NBR]   /* Dcms spec hndl code*/
       || EP0FM001.PK-DCMS-SINST-TXT[XXX-INX-FLD-NBR] != 
      EP0FW01.PK-DCMS-SINST-TXT[XXX-INX-FLD-NBR]) /* Dcms spec instruc*/

        if (EP0FW01.PK-GOAL-SPRC-CD[XXX-INX-FLD-NBR] == "  "
         && EP0FW01.PK-DCMS-SPRC-CD[XXX-INX-FLD-NBR] == "  ") /* Dcms cd*/

          EP0F-5100(); /* Process valid add request*/
        else

          EP0F-5200(); /* Process valid change request*/
        end
      end
      EP0FW00.XXX-INX-FLD-NBR = EP0FW00.XXX-INX-FLD-NBR + 1;
    end
  end


   /* -----------------------------------------*/
   /* Rollback if any errors found*/
   /* -----------------------------------------*/
  if (converseVar.validationMsgNum > 0) /* errors found*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back db changes on this page*/

    exit stack; /* Exit to display map*/
  end


   /* -----------------------------------------*/
   /* Update temporary storage*/
   /* -----------------------------------------*/
  EP0FW00.XXX-INX-FLD-NBR = 1; /* Initialize line index*/

  while (EP0FW00.XXX-INX-FLD-NBR <= EP0FW00.XXX-INX-LMT-NBR)
                                   /* Until end of lines*/
    if (EP0FM001.PK-GOAL-SPRC-CD[XXX-INX-FLD-NBR] != 
    EP0FW01.PK-GOAL-SPRC-CD[XXX-INX-FLD-NBR])
      EP0FW01.PK-GOAL-SPRC-CD[XXX-INX-FLD-NBR] = EP0FM001.PK-GOAL-SPRC-CD[XXX-INX-FLD-NBR]; /* Goal spec hndl cd*/
      if (EP0FM001.PK-GOAL-SPRC-CD[XXX-INX-FLD-NBR] != " ")
        EP0F-1100(); /* get new goal spec hndl cd description*/
        EP0FM001.SY-SHORT-STY-NM[XXX-INX-FLD-NBR] = EP0FW01.SY-SHORT-STY-NM[XXX-INX-FLD-NBR]; /* Style name*/
      else
        EP0FM001.SY-SHORT-STY-NM[XXX-INX-FLD-NBR] = " "; /* Style name*/
      end
    end
    EP0FW01.PK-SPCL-PROC-VAR1[XXX-INX-FLD-NBR] = EP0FM001.XSU-SILH-CD[XXX-INX-FLD-NBR]; /* Silhouette code*/
    EP0FW01.PK-SPCL-PROC-VAR2[XXX-INX-FLD-NBR] = EP0FM001.EP0FM-INCL-EXCL-FL[XXX-INX-FLD-NBR]; /* Inc/exc flag*/
    EP0FW01.PK-SPCL-PROC-VAR3[XXX-INX-FLD-NBR] = EP0FM001.EP0FM-EP-TEXT[XXX-INX-FLD-NBR]; /* Text*/
    EP0FW01.PK-SPCL-PROC-VAR4[XXX-INX-FLD-NBR] = EP0FM001.XGC-GNDR-CD[XXX-INX-FLD-NBR]; /* Gender code*/
    EP0FW01.PK-DCMS-SPRC-CD[XXX-INX-FLD-NBR] = EP0FM001.PK-DCMS-SPRC-CD[XXX-INX-FLD-NBR]; /* Dcms code*/
    EP0FW01.PK-DCMS-SINST-TXT[XXX-INX-FLD-NBR] = EP0FM001.PK-DCMS-SINST-TXT[XXX-INX-FLD-NBR]; /* Dcms spec instruc*/

    EP0FW00.XXX-INX-FLD-NBR = EP0FW00.XXX-INX-FLD-NBR + 1;
                                   /* Increment line index*/
  end

   /* -----------------------------------------*/
   /* Return to main process*/
   /* -----------------------------------------*/
  EP0FW00.XXX-PAGE-UPD-FL = "Y"; /* Page update flag*/
  converseLib.validationFailed(20); /* Transaction completed*/

  return; /* Return to previous process*/


end // end EP0F-5000

// Process valid add request
Function EP0F-5100()
   /* ------------------------------------------------------------*/
   /* Process valid add request*/
   /* ------------------------------------------------------------*/

  EP0FW-DCMS-CD-FND-FL = "N";

  set VSPRCD01 empty; /* Clear row storage area*/
  VSPRCD01.PK-DCMS-SPRC-CD = EP0FM001.PK-DCMS-SPRC-CD[XXX-INX-FLD-NBR]; /* Dcms code*/

  EP0FS-VSPRCD01-S(); /* See if already exists*/

  if (EP0FW-DCMS-CD-FND-FL == "N")
    VSPRCD01.PK-GSPRC-SRCE-CD = "HNGR"; /* Table key*/
    VSPRCD01.PK-DCMS-SPRC-CD = EP0FM001.PK-DCMS-SPRC-CD[XXX-INX-FLD-NBR]; /* Dcms code*/
    VSPRCD01.PK-GOAL-SPRC-CD = EP0FM001.PK-GOAL-SPRC-CD[XXX-INX-FLD-NBR]; /* Hanger style*/
    VSPRCD01.PK-SPCL-PROC-VAR1 = EP0FM001.XSU-SILH-CD[XXX-INX-FLD-NBR]; /* Sil cd*/
    VSPRCD01.PK-SPCL-PROC-VAR2 = EP0FM001.EP0FM-INCL-EXCL-FL[XXX-INX-FLD-NBR]; /* Incl/excl cd*/
    VSPRCD01.PK-SPCL-PROC-VAR3 = EP0FM001.EP0FM-EP-TEXT[XXX-INX-FLD-NBR]; /* Text*/
    VSPRCD01.PK-SPCL-PROC-VAR4 = EP0FM001.XGC-GNDR-CD[XXX-INX-FLD-NBR]; /* Gender cd*/
    VSPRCD01.PK-DCMS-SINST-TXT = EP0FM001.PK-DCMS-SINST-TXT[XXX-INX-FLD-NBR]; /* Instructions*/

    XX0XS01(); /* Obtain data and time*/

    VSPRCD01.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/
    VSPRCD01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
    VSPRCD01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Time*/
    VSPRCD01.ZZZCHGCT = +0; /* Count*/

    EP0FS-VSPRCD01-A(); /* Add dcms code*/
  else
    EP0FW00.XXX-MSG-LOC-ID = "5100";
    converseLib.validationFailed(45); /* record exists, cannot add*/
    set EP0FM001.PK-DCMS-SPRC-CD[XXX-INX-FLD-NBR] cursor, bold;
  end


end // end EP0F-5100

// Process valid change request
Function EP0F-5200()
   /* ------------------------------------------------------------*/
   /* Process valid change request*/
   /* ------------------------------------------------------------*/
  EP0FW-DCMS-CD-FND-FL = "N";

  set VSPRCD01 empty;
  VSPRCD01.PK-DCMS-SPRC-CD = EP0FM001.PK-DCMS-SPRC-CD[XXX-INX-FLD-NBR]; /* Table key*/

  EP0FS-VSPRCD01-S(); /* Select dcms code*/

  if (EP0FW-DCMS-CD-FND-FL == "Y")
    VSPRCD01.PK-DCMS-SPRC-CD = EP0FM001.PK-DCMS-SPRC-CD[XXX-INX-FLD-NBR]; /* Dcms code*/
    VSPRCD01.PK-GOAL-SPRC-CD = EP0FM001.PK-GOAL-SPRC-CD[XXX-INX-FLD-NBR]; /* Hanger style*/
    VSPRCD01.PK-SPCL-PROC-VAR1 = EP0FM001.XSU-SILH-CD[XXX-INX-FLD-NBR]; /* Sil cd*/
    VSPRCD01.PK-SPCL-PROC-VAR2 = EP0FM001.EP0FM-INCL-EXCL-FL[XXX-INX-FLD-NBR]; /* Incl/excl cd*/
    VSPRCD01.PK-SPCL-PROC-VAR3 = EP0FM001.EP0FM-EP-TEXT[XXX-INX-FLD-NBR]; /* Text*/
    VSPRCD01.PK-SPCL-PROC-VAR4 = EP0FM001.XGC-GNDR-CD[XXX-INX-FLD-NBR]; /* Gender cd*/
    VSPRCD01.PK-DCMS-SINST-TXT = EP0FM001.PK-DCMS-SINST-TXT[XXX-INX-FLD-NBR]; /* Instructions*/

    XX0XS01(); /* Obtain data and time*/

    VSPRCD01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Date*/
    VSPRCD01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Time*/

    EP0FS-VSPRCD01-U(); /* Update dcms code*/
  else
    EP0FW00.XXX-MSG-LOC-ID = "5200";
    converseLib.validationFailed(33); /* record not found (deleted?)*/
    set EP0FM001.PK-DCMS-SPRC-CD[XXX-INX-FLD-NBR] cursor, bold;
  end


end // end EP0F-5200

// Process valid delete request
Function EP0F-5300()
   /* ------------------------------------------------------------*/
   /* Process valid delete request*/
   /* ------------------------------------------------------------*/
  set VSPRCD01 empty;
  VSPRCD01.PK-DCMS-SPRC-CD = EP0FM001.PK-DCMS-SPRC-CD[XXX-INX-FLD-NBR]; /* Dcms code*/

  EP0FS-VSPRCD01-D(); /* Delete dcms code*/


end // end EP0F-5300

// Exit to another application
Function EP0FS-EXIT()
   /* ------------------------------------------------------------*/
   /* Set the application to be invoked for PF1 or PF4.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf1) /* PF1 was pressed*/
    COMMAREA.CATOAP = "GD01"; /* Goal Documentation*/
  end

  if (converseVar.eventKey is pf4) /* PF4 was pressed*/
    COMMAREA.CATOAP = "MN0M"; /* Master Menu*/
  end


   /* ------------------------------------------------------------*/
   /* Save the system work record in the COMMAREA user area.*/
   /* ------------------------------------------------------------*/
  if (COMMAREA.CATOSYS == COMMAREA.CACURSYS) /* Same system*/

    /* MOVE EPWREC.EPWUSERA TO COMMAREA.CAUSERA;/* Save work record*/
    COMMAREA.CAUSERA = EPWREC.EPW-GROUP; /* Save work record*/
  else
    COMMAREA.CAUSERA = " "; /* Clear user area*/
  end


   /* ------------------------------------------------------------*/
   /* Transfer control to the specified application.*/
   /* ------------------------------------------------------------*/
  XSEXIT(); /* Exit to another application*/

  EP0FW00.XXX-MSG-LOC-ID = "XSEXIT"; /* Message location*/


   /* ------------------------------------------------------------*/
   /* Reestablish the COMMAREA application and item fields.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CAEZSG3 = "0"; /* Force zero third character*/
  COMMAREA.CACURRAP = COMMAREA.CAEZSAP; /* Current application*/

  if (converseVar.eventKey is pfkey) /* PF key was pressed*/
    COMMAREA.CATOAP = " "; /* Clear TO application*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = " "; /* Clear map name from item*/
    end
  end


end // end EP0FS-EXIT

// close cursor for Vstyle01
Function EP0FS-IO0120-C1()
   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  try
    call "IO0120" ("C1", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Close cursor*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  EP0FW00.XXX-MSG-LOC-ID = "IO0120C1"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(1); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EP0FW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSTYLE01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end EP0FS-IO0120-C1

// fetch cursor for Vstyle01
Function EP0FS-IO0120-N1()
   /* ------------------------------------------------------------*/
   /* Fetch the next row that was selected from the table.*/
   /* ------------------------------------------------------------*/
  try
    call "IO0120" ("N1", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch nxt row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
    /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      set SY1REC empty;

      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  EP0FW00.XXX-MSG-LOC-ID = "IO0120N1"; /* Message location*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EP0FW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "FETCH NEXT ROW IN CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSTYLE01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end EP0FS-IO0120-N1

// Select style
Function EP0FS-IO0120-S()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes}; /* Sel dprod.vstyle01*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      EP0FW-STYLE-FND-FL = "Y"; /* Style found flag*/

      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Not found return code*/

        return; /* Return to previous process*/
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  EP0FW00.XXX-MSG-LOC-ID = "IO0120S"; /* Message location*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EP0FW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "SELECT STYLE"; /* Description*/
  TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSTYLE01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0FS-IO0120-S

// open cursor for Vstyle01
Function EP0FS-IO0120-S1()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  try
    call "IO0120" ("S1", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  EP0FW00.XXX-MSG-LOC-ID = "IO0120S1"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EP0FW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "SELECT SET AND OPEN CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSTYLE01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end EP0FS-IO0120-S1

// Add page to temporary storage
Function EP0FS-TA0050-A()
   /* ------------------------------------------------------------*/
   /* Add the next page to the temporary storage queue.*/
   /* ------------------------------------------------------------*/
  EP0FW01.XXX-TEMP-STG-LNTH = EP0FW00.XXX-TEMP-STG-LNTH;
                                   /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (EP0FW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Add page*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, initialize the storage area and*/
   /* indicators to be used and return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    set EP0FW01 empty; /* M001 display storage*/
    EP0FW00.XXX-HI-PAGE-NBR = TA5REC.TA5TSQIX; /* Highest page nbr*/

    TA5REC.TA5TSQIX = 0; /* Clear last page number*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/

  EP0FW00.XXX-MSG-LOC-ID = "TA0050A"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(1); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = EP0FW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0FS-TA0050-A

// Purge any temporary storage
Function EP0FS-TA0050-P()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  set EP0FW01 empty; /* M001 display storage*/

  EP0FW00.XXX-PAGE-UPD-FL = "N"; /* Page update flag*/

  TA5REC.TA5TSQIX = 0; /* Displayed page number*/
  EP0FW00.XXX-HI-PAGE-NBR = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (EP0FW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Purge storage*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/

  EP0FW00.XXX-MSG-LOC-ID = "TA0050P"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(1); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = EP0FW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end EP0FS-TA0050-P

// Read temporary storage page
Function EP0FS-TA0050-R()
   /* ------------------------------------------------------------*/
   /* Read the next page from the temporary storage queue.*/
   /* ------------------------------------------------------------*/
  EP0FW01.XXX-TEMP-STG-LNTH = EP0FW00.XXX-TEMP-STG-LNTH;
                                   /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = EP0FW00.XXX-CURR-PAGE-NBR; /* Page number*/

  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (EP0FW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Read page*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/

  EP0FW00.XXX-MSG-LOC-ID = "TA0050R"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(1); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = EP0FW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "READ TEMPORARY STORAGE PAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end EP0FS-TA0050-R

// Update temporary storage page
Function EP0FS-TA0050-U()
   /* ------------------------------------------------------------*/
   /* Update the page in the temporary storage queue.*/
   /* ------------------------------------------------------------*/
  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (EP0FW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update page*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/

  EP0FW00.XXX-MSG-LOC-ID = "TA0050U"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(1); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = EP0FW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "UPDATE TEMPORARY STORAGE PAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end EP0FS-TA0050-U

// add row to dpick.vsprcd01
Function EP0FS-VSPRCD01-A()
   /* ------------------------------------------------------------*/
   /* Add a row to the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VSPRCD01" ("A ", SQLCA, VSPRCD01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  EPWREC.XXXERRID = "VSPRCD01A "; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EPWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "ADD DCMS CODE"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPRCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSPRCD01.PK-DCMS-SPRC-CD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end EP0FS-VSPRCD01-A

// close crsr for dpick.vsprcd01
Function EP0FS-VSPRCD01-C1()
   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "VSPRCD01" ("C1", SQLCA, VSPRCD01) {isNoRefresh = yes, isExternal = yes};
  end /* Close cursor*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  EPWREC.XXXERRID = "VSPRCD01C1"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(1); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EPWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPRCD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end EP0FS-VSPRCD01-C1

// delete from dpick.vsprcd01
Function EP0FS-VSPRCD01-D()
   /* ------------------------------------------------------------*/
   /* Delete a row from the table*/
   /* ------------------------------------------------------------*/

  try
    call "VSPRCD01" ("D ", SQLCA, VSPRCD01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  EPWREC.XXXERRID = "VSPRCD01D "; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EPWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "DELETE DCMS CODE"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPRCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSPRCD01.PK-DCMS-SPRC-CD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end EP0FS-VSPRCD01-D

// fetch from dpick.vsprcd01
Function EP0FS-VSPRCD01-N1()
   /* ------------------------------------------------------------*/
   /* Fetch the next row that was selected from the table.*/
   /* ------------------------------------------------------------*/
  try
    call "VSPRCD01" ("N1", SQLCA, VSPRCD01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
    /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      EP0FW00.EP0FW-COLOR-EOF-FL = "Y"; /* End of cursor*/
      set VSPRCD01 empty;

      return; /* Return to previous process*/

    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  EPWREC.XXXERRID = "VSPRCD01N1"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EPWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "FETCH NEXT ROW IN CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPRCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSPRCD01.PK-GSPRC-SRCE-CD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0FS-VSPRCD01-N1

// select unique dpick.vsprcd01
Function EP0FS-VSPRCD01-S()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  try
    call "VSPRCD01" ("S ", SQLCA, VSPRCD01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -811) /* or multiple rows*/

      EP0FW-DCMS-CD-FND-FL = "Y"; /* Dcms code found flag*/

      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Not found return code*/

        return; /* Return to previous process*/
      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  EPWREC.XXXERRID = "VSPRCD01S "; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EPWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SELECT DCMS CODE"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPRCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSPRCD01.PK-DCMS-SPRC-CD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0FS-VSPRCD01-S

// open crsr for dpick.vsprcd01
Function EP0FS-VSPRCD01-S1()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VSPRCD01" ("S1", SQLCA, VSPRCD01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  EPWREC.XXXERRID = "VSPRCD01S1"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EPWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SELECT SET AND OPEN CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPRCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSPRCD01.PK-GSPRC-SRCE-CD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end EP0FS-VSPRCD01-S1

// update dpick.vsprcd01
Function EP0FS-VSPRCD01-U()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VSPRCD01" ("U ", SQLCA, VSPRCD01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  EPWREC.XXXERRID = "VSPRCD01U "; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EPWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "UPDATE DCMS CODE"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPRCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSPRCD01.PK-DCMS-SPRC-CD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0FS-VSPRCD01-U

//*** RECORD=EP0FW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record EP0FW00 type basicRecord
  10 XXX-RQT-DATA-FL XXX-RQT-DATA-FL ; 
  10 XXX-MAP-FMAT-FL XXX-MAP-FMAT-FL ; 
  10 XXX-MAP-DSP-CD XXX-MAP-DSP-CD ; 
  10 XXX-TEMP-STG-LNTH XXX-TEMP-STG-LNTH ; 
  10 XXX-INX-LMT-NBR XXX-INX-LMT-NBR ; 
  10 XXX-INX-FLD-NBR XXX-INX-FLD-NBR ; 
  10 XXX-CURR-PAGE-NBR XXX-CURR-PAGE-NBR ; 
  10 XXX-HI-PAGE-NBR XXX-HI-PAGE-NBR ; 
  10 XXX-PAGE-UPD-FL XXX-PAGE-UPD-FL ; 
  10 XXX-MSG-LOC-ID XXX-MSG-LOC-ID ; 
  10 XXX-MSG-NBR XXX-MSG-NBR ; 
  10 EP0FW-COLOR-EOF-FL EP0FW-COLOR-EOF-FL ; 
  10 EP0FW-STYLE-FND-FL EP0FW-STYLE-FND-FL ; 
  10 EP0FW-DCMS-CD-FND-FL EP0FW-DCMS-CD-FND-FL ; 
  10 EP0FW-ENTRY-FOUND-FL EP0FW-ENTRY-FOUND-FL ; 
  10 XSUKEY XSUKEY ; 
    15 XSUCD XSUCD ; 
    15 XGPCD XGPCD ; 
end // end EP0FW00

//*** RECORD=EP0FW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record EP0FW01 type basicRecord
  5 XXX-TEMP-STG-LNTH XXX-TEMP-STG-LNTH ; 
  5 * char(1395) ; 
    10 XXX-LN-SEL-IND XXX-LN-SEL-IND [15] ; 
    10 PK-GOAL-SPRC-CD PK-GOAL-SPRC-CD [15] ; 
    10 SY-SHORT-STY-NM SY-SHORT-STY-NM [15] ; 
    10 PK-SPCL-PROC-VAR1 PK-SPCL-PROC-VAR1 [15] ; 
    10 PK-SPCL-PROC-VAR2 PK-SPCL-PROC-VAR2 [15] ; 
    10 PK-SPCL-PROC-VAR3 PK-SPCL-PROC-VAR3 [15] ; 
    10 PK-SPCL-PROC-VAR4 PK-SPCL-PROC-VAR4 [15] ; 
    10 PK-DCMS-SPRC-CD PK-DCMS-SPRC-CD [15] ; 
    10 PK-DCMS-SINST-TXT PK-DCMS-SINST-TXT [15] ; 
end // end EP0FW01

//*** RECORD=EP0FW02 ****
// ------------------------
// Map 002 display storage.
// ------------------------
// ***********************
Record EP0FW02 type basicRecord
  10 XGP-GPC-CD XGP-GPC-CD ; 
  10 SY-STY-NBR SY-STY-NBR ; 
  10 SY-COLR-CD-ID SY-COLR-CD-ID ; 
  10 XDM-DIM-CD XDM-DIM-CD ; 
  10 SY-STY-COLR-DESC SY-STY-COLR-DESC ; 
  10 XPC-PROD-CAT-CD XPC-PROD-CAT-CD ; 
end // end EP0FW02

//*** RECORD=EP0FW03 ****
// ************************************************************
// 
//         ***** POP UP WINDOW WORKING RECORD *****
// 
// ************************************************************
// 
// Overview :
//            This record is the working record used by
//            the CSP pop up window process - EP0FX001-POP.
// 
//            NOTE: It is important that this record be set
//            empty in the initialize section of your program.
// 
// Maintenance History :
// 
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          05-27-98  KHEINA  Created
// ************************************************************
// ***********************
Record EP0FW03 type basicRecord
  10 EP0FW-ARRAY-INDX EP0FW-ARRAY-INDX ; 
  10 * char(5400) ; 
    15 EP0FW-ARRAY EP0FW-ARRAY [300] ; 
      20 SY-STY-NBR SY-STY-NBR ; 
      20 SY-SHORT-STY-NM SY-SHORT-STY-NM ; 
end // end EP0FW03

DataItem EP0FW-ARRAY char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EP0FW-ARRAY-INDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// End of file flag
DataItem EP0FW-COLOR-EOF-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DCMS code found flag
DataItem EP0FW-DCMS-CD-FND-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Entry found flag
DataItem EP0FW-ENTRY-FOUND-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style was found flag
DataItem EP0FW-STYLE-FND-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

