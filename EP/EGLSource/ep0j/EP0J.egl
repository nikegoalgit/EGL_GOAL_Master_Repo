package ep0j;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import ep.common.*;
import fk.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import op.common.*;
import pc.common.*;
import pg.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import vv.common.*;
//*** PROGRAM=EP0J ****
// This application allows a user to inquire order error rows
// in a DB2 table: DPICK.TMPOLH00, DPICK.TMPOLE00, DCUST.
// TSTORE00, and DPICK.TPMSGD00.
// 
// There are two different screens that may be displayed.
// 
// The first screen displayed allows the user to scroll through
// all error numbers and messages with the order number the
// user entered.  The list is displayed and the user may page
// backward and forward to view the information.
// 
// When a line is selected on the screen, the second screen is
// displayed, showing all the detail information for the
// selection.  The user may select more than one detail.  Each
// subsequent press of <ENTER> will bring in the next selected
// detail.  All viewed details will have the selection replaced
// by an "*".  For now, only error #2 selected will be
// displayed by the second screen.
// 
// The purge flag is modifiable when the detail is displayed.
// 
// When the user exits the second screen (either via PF3 key or
// after all selections have been viewed) the first screen is
// redisplayed, indicating the selections that were viewed.
// 
// The user may choose to add a new address by pressing PF9
// on the first menu.
// 
// The user may exit ONLY by returning the application they
// transferred from (COMMAREA.CAFROMAP).
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE    USERID  DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      07/07/98  schen   New application.
//          11/05/98  kdenne  adding moves for address map 2
// multgpc  08/06/99  OENFIE  regenerate to pick up changes to
//                            XPEP-00000
// *********************
Program EP0J type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "EP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  EP0JW00 EP0JW00; // record
  EP0JW01 EP0JW01; // record
  EP0JW02 EP0JW02; // record
  EP0JW03 EP0JW03; // record
  EPWREC EPWREC; // record
  KUMREC KUMREC; // record
  PWHREC PWHREC; // record
  SQLCA SQLCA; // record
  SYCREC SYCREC; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VMPOLE01 VMPOLE01; // record
  VMPOLH01 VMPOLH01; // record
  VPMSGD01 VPMSGD01; // record
  XCTREC XCTREC; // record
  XSTREC XSTREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use EP0JT1 {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use XSTTBL {deleteAfterUse = yes}; // table
  use EP0JM.EP0JM001,  // forms
      EP0JM.EP0JM002, 
      EP0JM.EP0JM003
   {
    helpKey = pf13,
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPEP-00000: XPEP-00000();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set EP0JM001 initial; /* M001 input/output*/
    set EP0JM002 initial; /* M002 input/output*/
    set EP0JM003 initial; /* M003 input/output*/

    set EP0JW00 empty; /* Working storage*/
    set EP0JW01 empty; /* M001 display storage*/
    set EP0JW02 empty; /* M002 display storage*/
    set EP0JW03 empty; /* M003 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set TAEREC empty; /* Error diagnosis information*/
    set VMPOLH01 empty; /* header table*/
    set VMPOLE01 empty; /* detail table*/
    set KUMREC empty; /* store table*/
    set SYCREC empty; /* style table*/
    set VPMSGD01 empty; /* err message text*/

    EP0JW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/
    EP0JW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    EP0JW00.XXX-MAP-DSP-CD = "1"; /* Map to be displayed*/

    EP0JW00.XXX-TEMP-STG-LNTH = 1512; /* Temporary storage length*/
    EP0JW00.XXX-INX-LMT-NBR = 14; /* Number of lines on a page*/



     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto EP0J-00000; /* Converse main process*/


    EP0J-00000: EP0J-00000();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto EP0J-00000; /* Converse the main process*/


  end // end main
end // end EP0J

// Determine which map to display
Function EP0J-00000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the map that was requested.*/
   /* 2) Otherwise, indicate error and exit to System Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


  if (EP0JW00.XXX-MAP-DSP-CD == "1") /* Map 1 was requested*/

    EP0J-10000(); /* Display map 1*/

    exit stack; /* Exit to display map*/

  end


  if (EP0JW00.XXX-MAP-DSP-CD == "2") /* Map 2 was requested*/

    EP0J-20000(); /* Display map 2*/

    exit stack; /* Exit to display map*/

  end


  if (EP0JW00.XXX-MAP-DSP-CD == "3") /* Map 3 was requested*/

    EP0J-30000(); /* Display map 3*/

    exit stack; /* Exit to display map*/

  end


   /* ------------------------------------------------------------*/
   /* Write the error to the Error Diagnosis Reporting Facility.*/
   /* ------------------------------------------------------------*/

  EP0JW00.XXX-MSG-LOC-ID = "00000"; /* Message location*/
  converseLib.validationFailed(01); /* Unexpected error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = EP0JW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "INVALID MAP NUMBER REQUESTED"; /* Description*/
  TA1REC.TA1MAPNO = EP0JW00.XXX-MAP-DSP-CD; /* Map requested*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Err diag routine*/


   /* ------------------------------------------------------------*/
   /* Exit to display the application system menu.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CATOAP = COMMAREA.CAFROMAP; /* Return to 'from' app*/

  XSEPS-EXIT(); /* Exit to another app*/


   /* ------------------------------------------------------------*/
   /* Abnormally terminate the transaction if the exit failed.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1FUNC = "ABND"; /* Termination function*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/


end // end EP0J-00000

// Main process to display a map
Function EP0J-10000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display MAP 1.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


  EP0J-11000(); /* Obtain the data to display*/

  EP0J-12000(); /* Format and display the map*/

  EP0J-13000(); /* Check attention identifier*/

  EP0J-14000(); /* Verify the entered data*/

  EP0J-15000(); /* Process valid input request*/


end // end EP0J-10000

// Obtain the data to display
Function EP0J-11000()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (EP0JW00.XXX-RQT-DATA-FL != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/

  if (EP0JW00.XXX-MSG-NBR == 0) /* No message to display*/

    EP0JW00.XXX-CURR-PAGE-NBR = 1; /* Page number to display*/

  end


   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/

  EP0JS-TA0050-P(); /* Purge temp storage*/

  EP0JW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

  EP0JW00.XWH-WHSE-CD = "51"; /* set keys*/
  EP0JW00.PK-ORD-STKTF-ID = EP0JM001.PK-ORD-STKTF-ID;
  EP0JW00.PK-NIKE-ORD-ID = EP0JM001.PK-NIKE-ORD-ID;
  EP0JW00.PK-NBR-TIMES-ALOC = EP0JM001.PK-NBR-TIMES-ALOC;

  VMPOLH01.XWH-WHSE-CD = EP0JW00.XWH-WHSE-CD; /* set keys*/
  VMPOLH01.PK-ORD-STKTF-ID = EP0JW00.PK-ORD-STKTF-ID;
  VMPOLH01.PK-NIKE-ORD-ID = EP0JW00.PK-NIKE-ORD-ID;
  VMPOLH01.PK-NBR-TIMES-ALOC = EP0JW00.PK-NBR-TIMES-ALOC;

  EP0JS-VMPOLH01-S(); /* get data from vmpolh01*/

  EP0JW00.CU-CO-ID = VMPOLH01.CU-CO-ID; /* co id*/
  EP0JW00.CU-STOR-ID = VMPOLH01.CU-STOR-ID; /* store id*/
  EP0JW00.XNX-DEPT-ID-XREF = VMPOLH01.XNX-DEPT-ID-XREF; /* dept id*/
  EP0JW00.OP-CUST-PO = VMPOLH01.OP-CUST-PO; /* cust po*/

  KUMREC.KUCCOID = VMPOLH01.CU-CO-ID;
  KUMREC.KUMSTRID = VMPOLH01.CU-STOR-ID;

  EP0JS-VSTORE01-S(); /* get store name from vstore01*/

  EP0JW00.CU-STOR-NM = KUMREC.KUMSTRNM; /* store name*/

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  set VMPOLE01 empty; /* Clear DB2 storage*/

  VMPOLE01.XWH-WHSE-CD = EP0JW00.XWH-WHSE-CD; /* set keys*/
  VMPOLE01.PK-ORD-STKTF-ID = EP0JW00.PK-ORD-STKTF-ID;
  VMPOLE01.PK-NIKE-ORD-ID = EP0JW00.PK-NIKE-ORD-ID;
  VMPOLE01.PK-NBR-TIMES-ALOC = EP0JW00.PK-NBR-TIMES-ALOC;

  EP0JS-VMPOLE01-S2(); /* Sel set, open csr*/


   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  EP0JW00.XXX-INX-FLD-NBR = 1; /* Display idx*/
  EP0JW00.EP0JW-VMPOLE-EOF-FL = "N"; /* Eof csr flag*/


  while (EP0JW00.EP0JW-VMPOLE-EOF-FL == "N") /* Until eof csr*/

    EP0JS-VMPOLE01-N2(); /* Fetch next row*/

    /* ------------------------------------------------------------*/
    /* If not end of cursor, save the data in display storage.*/
    /* ------------------------------------------------------------*/

    if (EP0JW00.EP0JW-VMPOLE-EOF-FL == "N") /* Not eof csr*/

      /* ------------------------------------------------------------*/
      /* Save the data from the table row in display storage.*/
      /* ------------------------------------------------------------*/

      VPMSGD01.PK-DCMS-MSG-NBR = VMPOLE01.PK-DCMS-MSG-NBR;

      EP0JS-VPMSGD01-S(); /* get error message*/

      EP0JW01.PK-DCMS-MSG-DESC[XXX-INX-FLD-NBR] = VPMSGD01.PK-DCMS-MSG-DESC; /* msg desc*/

      EP0JW01.PK-DCMS-MSG-NBR[XXX-INX-FLD-NBR] = VMPOLE01.PK-DCMS-MSG-NBR; /* msg nbr*/
      EP0JW01.PK-DCMS-ERROVRD-FL[XXX-INX-FLD-NBR] = VMPOLE01.PK-DCMS-ERROVRD-FL; /* errovrd*/
      EP0JW01.XGP-GPC-CD[XXX-INX-FLD-NBR] = VMPOLE01.XGP-GPC-CD; /* gpc cd*/
      EP0JW01.SY-STY-NBR[XXX-INX-FLD-NBR] = VMPOLE01.SY-STY-NBR; /* sty nbr*/
      EP0JW01.SY-COLR-CD-ID[XXX-INX-FLD-NBR] = VMPOLE01.SY-COLR-CD-ID; /* colr id*/
      EP0JW01.XDM-DIM-CD[XXX-INX-FLD-NBR] = VMPOLE01.XDM-DIM-CD; /* dim cd*/
      EP0JW01.SY-SZ-ID-DESC[XXX-INX-FLD-NBR] = VMPOLE01.SY-SZ-ID-DESC; /* sz id desc*/
      EP0JW01.PK-LINE-ITEM-NBR[XXX-INX-FLD-NBR] = VMPOLE01.PK-LINE-ITEM-NBR; /* line item*/

      /* ------------------------------------------------------------*/
      /* Increment the line index to the next row in display storage.*/
      /* ------------------------------------------------------------*/

      EP0JW00.XXX-INX-FLD-NBR = EP0JW00.XXX-INX-FLD-NBR + 1;
                                                          /* Increment idx*/

    end

    /* ------------------------------------------------------------*/
    /* If the page is full, add the page to the temporary storage queue.*/
    /* ------------------------------------------------------------*/

    if (EP0JW00.XXX-INX-FLD-NBR > EP0JW00.XXX-INX-LMT-NBR) /* Page full*/

      EP0JS-TA0050-A(); /* Add to TS*/

      EP0JW00.XXX-INX-FLD-NBR = 1; /* Line index*/

    end

  end


   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (EP0JW00.XXX-INX-FLD-NBR > 1) /* Page was formatted*/

    EP0JS-TA0050-A(); /* Add page to temp storage*/

  end


   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  EP0JS-VMPOLE01-C2(); /* Close selected set cursor*/


   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (EP0JW00.XXX-HI-PAGE-NBR == 0) /* No pages formatted*/
    EP0JW00.XXX-MSG-LOC-ID = "11000"; /* Message location*/

    if (COMMAREA.CAFROMAP == COMMAREA.CACURRAP)
      converseLib.validationFailed(90); /* Send initial screen*/
    else
      converseLib.validationFailed(91); /* No data found to display*/
    end

    exit stack; /* Exit to display map*/
  end


   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  EP0JW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/


end // end EP0J-11000

// Format and converse the map
Function EP0J-12000()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    EP0JW00.XXX-MSG-NBR = converseVar.validationMsgNum; /* Message number*/

  end


   /* ------------------------------------------------------------*/
   /* If the map must be formatted, format the data in the map.*/
   /* ------------------------------------------------------------*/

  if (EP0JW00.XXX-MAP-FMAT-FL == "Y") /* Map must be formatted*/

    EP0J-12100(); /* Format the data in the map*/

  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  EP0JM001.XXX-CURR-DT = VGVar.currentShortGregorianDate; /* Current date*/

  EP0JM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  EP0JM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (EP0JW00.XXX-MSG-NBR != 0 /* Msg display*/
   || COMMAREA.CAMSG != " ")   /* or msg text*/

    if (EP0JW00.XXX-MSG-NBR != 0) /* Msg display*/

      if (EP0JW00.XXX-MSG-NBR == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(EP0JW00.XXX-MSG-NBR);
      end /* Msg number*/
    else
      EP0JM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Msg text*/

    end

    EP0JM001.XXX-MSG-LOC-ID = EP0JW00.XXX-MSG-LOC-ID; /* Msg loc*/

    set EP0JM001 alarm; /* Sound alarm*/

  end


  converse EP0JM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  EP0JW00.XXX-MSG-LOC-ID = " "; /* Msg location*/
  EP0JW00.XXX-MSG-NBR = 0; /* Msg number*/
  COMMAREA.CAMSG = " "; /* Msg text*/

  COMMAREA.CATOAP = EP0JM001.CATOAP; /* TO app*/
  COMMAREA.CAITEM = EP0JM001.CAITEM; /* App data*/


   /* ------------------------------------------------------------*/
   /* Reset modifiable field attributes to normal intensity.*/
   /* Only selection indicator for EP0JM001.*/
   /* ------------------------------------------------------------*/

  EP0JW00.XXX-INX-FLD-NBR = 1; /* Init map idx*/

  while (EP0JW00.XXX-INX-FLD-NBR <= EP0JW00.XXX-INX-LMT-NBR /* Til eof map*/
   && EP0JM001.PK-DCMS-MSG-NBR[XXX-INX-FLD-NBR] > 0) /* or eof data*/

    set EP0JM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] normal; /* SEL indicator*/

    EP0JW00.XXX-INX-FLD-NBR = EP0JW00.XXX-INX-FLD-NBR + 1; /* Increment idx*/

  end


end // end EP0J-12000

// Format the data in the map
Function EP0J-12100()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set EP0JM001 initial; /* M001 i/o area*/

  EP0JW00.XXX-MAP-FMAT-FL = "N"; /* Format map flag*/


   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (EP0JW00.XXX-HI-PAGE-NBR > 0) /* Pages formatted*/

    if (EP0JW00.XXX-CURR-PAGE-NBR != TA5REC.TA5TSQIX) /* Pg not current*/

      /* ------------------------------------------------------------*/
      /* If the current page has been changed, update the page in*/
      /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (EP0JW00.XXX-PAGE-UPD-FL == "Y") /* Curr page changed*/

        EP0JS-TA0050-U(); /* Update temp stor pg*/

        EP0JW00.XXX-PAGE-UPD-FL = "N"; /* Page update flag*/

      end


      /* ------------------------------------------------------------*/
      /* If the desired page number is greater than the highest page*/
      /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (EP0JW00.XXX-CURR-PAGE-NBR > EP0JW00.XXX-HI-PAGE-NBR)
                                   /* Desired greater highest*/
        EP0JW00.XXX-CURR-PAGE-NBR = EP0JW00.XXX-HI-PAGE-NBR;
                                   /* Default to highest*/
      end

      EP0JS-TA0050-R(); /* Read temporary storage page*/

    end


    /* ------------------------------------------------------------*/
    /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    EP0JM001.XXX-CURR-PAGE-NBR = EP0JW00.XXX-CURR-PAGE-NBR;
                                   /* Current page*/
    EP0JM001.XXX-HI-PAGE-NBR = EP0JW00.XXX-HI-PAGE-NBR;
                                   /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the map fields from the display storage area.*/
   /* ------------------------------------------------------------*/

  EP0JM001.PK-ORD-STKTF-ID = EP0JW00.PK-ORD-STKTF-ID; /* ord id*/
  EP0JM001.PK-NIKE-ORD-ID = EP0JW00.PK-NIKE-ORD-ID; /* sub #*/
  EP0JM001.PK-NBR-TIMES-ALOC = EP0JW00.PK-NBR-TIMES-ALOC; /* Aloc#*/
  EP0JM001.CU-CO-ID = EP0JW00.CU-CO-ID;
  EP0JM001.CU-STOR-ID = EP0JW00.CU-STOR-ID;
  EP0JM001.XNX-DEPT-ID-XREF = EP0JW00.XNX-DEPT-ID-XREF;
  EP0JM001.OP-CUST-PO = EP0JW00.OP-CUST-PO;
  EP0JM001.CU-STOR-NM = EP0JW00.CU-STOR-NM;

  EP0JW00.XXX-INX-FLD-NBR = 1; /* Line idx*/

  while (EP0JW00.XXX-INX-FLD-NBR <= EP0JW00.XXX-INX-LMT-NBR) /* Til full*/

    /* Set attributes for selection indicator*/

    if (EP0JW01.PK-DCMS-MSG-NBR[XXX-INX-FLD-NBR] > 0) /* Data here*/
      set EP0JM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] normal;
      set EP0JM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] underline;
      if (EP0JW00.XXX-INX-FLD-NBR == 1) /* 1st line*/
        set EP0JM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] cursor;
      end
    else /* No data*/
      set EP0JM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] noHighLight;
      set EP0JM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] invisible, protect;
    end

    EP0JM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] = EP0JW01.XXX-LN-SEL-IND[XXX-INX-FLD-NBR];
    EP0JM001.PK-DCMS-MSG-NBR[XXX-INX-FLD-NBR] = EP0JW01.PK-DCMS-MSG-NBR[XXX-INX-FLD-NBR];
    EP0JM001.PK-DCMS-MSG-DESC[XXX-INX-FLD-NBR] = EP0JW01.PK-DCMS-MSG-DESC[XXX-INX-FLD-NBR];

    EP0JM001.PK-DCMS-ERROVRD-FL[XXX-INX-FLD-NBR] = EP0JW01.PK-DCMS-ERROVRD-FL[XXX-INX-FLD-NBR];

    EP0JW00.XXX-INX-FLD-NBR = EP0JW00.XXX-INX-FLD-NBR + 1; /* Increment idx*/

  end


end // end EP0J-12100

// Check attention identifier
Function EP0J-13000()
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (EP0JM001.CATOAP > " ") /* FAST PATH request*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      EP0JS-TA0050-P(); /* Purge temp storage*/

      XSEPS-EXIT(); /* Exit*/

      set EP0JM001.CATOAP cursor, bold; /* Highlight*/

    else

      EP0JW00.XXX-MSG-LOC-ID = "13000"; /* Message location*/
      converseLib.validationFailed(258); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end


   /* ------------------------------------------------------------*/
   /* If EXIT requested, return to system menu (EP0M).*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* Exit to from app*/

    COMMAREA.CATOAP = "EP0M"; /* System Menu*/

    EP0JS-TA0050-P(); /* Purge temp storage*/

    XSEPS-EXIT(); /* Exit to another app*/

    exit stack; /* Exit to display map*/

  end


   /* ------------------------------------------------------------*/
   /* If a PF key transfer requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf4) /* Exit to from app*/

    COMMAREA.CATOAP = "MN0M"; /* System Menu*/

    EP0JS-TA0050-P(); /* Purge temp storage*/

    XSEPS-EXIT(); /* Exit to another app*/

    exit stack; /* Exit to display map*/

  end


   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf3   /* and PF3 was not pressed*/
   && converseVar.eventKey not pf4   /* and PF4 was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    EP0JW00.XXX-MSG-LOC-ID = "13000"; /* Message location*/
    converseLib.validationFailed(04); /* PA/PF key pressed not valid*/

    exit stack; /* Exit to display map*/

  end


end // end EP0J-13000

// Verify data that was entered
Function EP0J-14000()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (EP0JM001.CAITEM > " ") /* Application data was entered*/

    EP0JW00.XXX-MSG-LOC-ID = "14000"; /* Message location*/
    converseLib.validationFailed(259); /* Enter only with FAST PATH*/
    set EP0JM001.CAITEM cursor, bold; /* Highlight*/

  end


   /* ------------------------------------------------------------*/
   /* If scroll requested, determine if any other field changed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    EP0J-14100(); /* Verify scroll request*/

  else

    /* ------------------------------------------------------------*/
    /* Otherwise, verify any modifiable data that was changed.*/
    /* ------------------------------------------------------------*/

    /* ------------------------------------------------------------*/
    /* Verify that at least stktf & other data have been entered*/
    /* ------------------------------------------------------------*/

    if (EP0JM001.PK-NBR-TIMES-ALOC <= 0) /* 0 times aloc*/

      EP0JW00.XXX-MSG-LOC-ID = "14000"; /* Msg loc*/
      converseLib.validationFailed(324); /* Missing*/
      set EP0JM001.PK-NBR-TIMES-ALOC cursor, bold; /* Highlight*/
    end

    if (EP0JM001.PK-NIKE-ORD-ID <= 0) /* 0 Nike ord*/

      EP0JW00.XXX-MSG-LOC-ID = "14000"; /* Msg loc*/
      converseLib.validationFailed(323); /* Missing*/
      set EP0JM001.PK-NIKE-ORD-ID cursor, bold; /* Highlight*/
    end

    if (EP0JM001.PK-ORD-STKTF-ID <= 0) /* 0 stktf*/

      EP0JW00.XXX-MSG-LOC-ID = "14000"; /* Msg loc*/
      converseLib.validationFailed(322); /* Missing*/
      set EP0JM001.PK-ORD-STKTF-ID cursor, bold; /* Highlight*/
    end


    if (EP0JW00.XXX-HI-PAGE-NBR > 0) /* Page*/

      EP0JW00.XXX-INX-FLD-NBR = EP0JW00.XXX-INX-LMT-NBR; /* Ln idx*/

      while (EP0JW00.XXX-INX-FLD-NBR > 0) /* Til eof*/

        EP0J-14200(); /* Val lns*/

        EP0JW00.XXX-INX-FLD-NBR = EP0JW00.XXX-INX-FLD-NBR - 1; /* Ln nbr*/

      end

    end

  end


   /* ------------------------------------------------------------*/
   /* If any error was found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    exit stack; /* Exit to display map*/

  end


end // end EP0J-14000

// Verify scroll request
Function EP0J-14100()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && EP0JW00.XXX-CURR-PAGE-NBR < 2) /* and no previous pages*/

    EP0JW00.XXX-MSG-LOC-ID = "14100"; /* Message location*/
    converseLib.validationFailed(07); /* No previous page to display*/

  end


   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && EP0JW00.XXX-CURR-PAGE-NBR   
   >= EP0JW00.XXX-HI-PAGE-NBR)    /* and no more pages*/

    EP0JW00.XXX-MSG-LOC-ID = "14100"; /* Message location*/
    converseLib.validationFailed(08); /* No more pages to display*/

  end


end // end EP0J-14100

// Verify data in the line
Function EP0J-14200()
   /* ------------------------------------------------------------*/
   /* If selection was entered and is not a "S", indicate that*/
   /* only "S" may be entered to select a line.*/
   /* ------------------------------------------------------------*/

  if (EP0JM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] != 
  EP0JW01.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] /* SEL*/
   && EP0JM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] != "S") /* not "S"*/

    EP0JW00.XXX-MSG-LOC-ID = "14200"; /* Msg loc*/
    converseLib.validationFailed(228); /* S Only*/
    set EP0JM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] cursor, bold; /* Hilite*/

  end


end // end EP0J-14200

// Process valid input request
Function EP0J-15000()
   /* ------------------------------------------------------------*/
   /* If the key fields changed, request the data to display.*/
   /* ------------------------------------------------------------*/

  if (EP0JM001.PK-ORD-STKTF-ID != EP0JW00.PK-ORD-STKTF-ID /* stktf*/
   || EP0JM001.PK-NIKE-ORD-ID != EP0JW00.PK-NIKE-ORD-ID   /* nike id*/
   || EP0JM001.PK-NBR-TIMES-ALOC != EP0JW00.PK-NBR-TIMES-ALOC) /* times*/

    EP0JW00.XXX-RQT-DATA-FL = "Y"; /* Request data fl*/

    if (EP0JM001.PK-ORD-STKTF-ID > 0
     && EP0JM001.PK-NIKE-ORD-ID > 0
     && EP0JM001.PK-NBR-TIMES-ALOC > 0)
         /* save new keys*/
      EP0JW00.PK-ORD-STKTF-ID = EP0JM001.PK-ORD-STKTF-ID;
      EP0JW00.PK-NIKE-ORD-ID = EP0JM001.PK-NIKE-ORD-ID;
      EP0JW00.PK-NBR-TIMES-ALOC = EP0JM001.PK-NBR-TIMES-ALOC;
      EP0JW00.XXX-INX-FLD-NBR = 0; /* Init line idx*/

    end

    return; /* Return*/

  end


   /* ------------------------------------------------------------*/
   /* If scroll backward was requested, decrement the page number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back*/

    EP0JW00.XXX-CURR-PAGE-NBR = EP0JW00.XXX-CURR-PAGE-NBR - 1;
                                                 /* Decrement page number*/

    EP0JW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    return; /* Return to prior process*/

  end


   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, increment the page number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward*/

    EP0JW00.XXX-CURR-PAGE-NBR = EP0JW00.XXX-CURR-PAGE-NBR + 1;
                                                 /* Increment page number*/

    EP0JW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    return; /* Return to prior process*/

  end


   /* ------------------------------------------------------------*/
   /* Save any field that was changed in the map display storage.*/
   /* ------------------------------------------------------------*/

  EP0JW00.PK-ORD-STKTF-ID = EP0JM001.PK-ORD-STKTF-ID;
  EP0JW00.PK-NIKE-ORD-ID = EP0JM001.PK-NIKE-ORD-ID;
  EP0JW00.PK-NBR-TIMES-ALOC = EP0JM001.PK-NBR-TIMES-ALOC;

  EP0JW00.XXX-INX-FLD-NBR = 1; /* Init line idx*/

  while (EP0JW00.XXX-INX-FLD-NBR <= EP0JW00.XXX-INX-LMT-NBR)
                                                           /* Til eof lines*/

    if (EP0JM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] != 
    EP0JW01.XXX-LN-SEL-IND[XXX-INX-FLD-NBR])

      EP0JW01.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] = EP0JM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR];

      EP0JW00.XXX-PAGE-UPD-FL = "Y"; /* Pg update fl*/

    end

    EP0JW00.XXX-INX-FLD-NBR = EP0JW00.XXX-INX-FLD-NBR + 1; /* Line idx*/

  end


   /* ------------------------------------------------------------*/
   /* If a line was selected, format the key fields and indicate*/
   /* that map 002 or 003 is to be displayed.*/
   /* Map 002 displays onetime ship-to error details*/
   /* Map 003 displays all other error details*/
   /* ------------------------------------------------------------*/

  if ("S" in EP0JW01.XXX-LN-SEL-IND) /* Line was selected*/

    EP0JW00.XXX-INX-FLD-NBR = sysVar.arrayIndex; /* Establish index value*/

    if (EP0JW01.PK-DCMS-MSG-NBR[XXX-INX-FLD-NBR] == 2)
      EP0JW00.XXX-MAP-DSP-CD = "2"; /* Map 2 displayed*/

    else
      EP0JW00.XXX-MAP-DSP-CD = "3"; /* Map 3 displayed*/

    end

    EP0JW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/
    exit stack;

  end


end // end EP0J-15000

// Main process to display a map
Function EP0J-20000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display MAP 2.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


  EP0J-21000(); /* Obtain the data to display*/

  EP0J-22000(); /* Format and display the map*/

  EP0J-23000(); /* Check attention identifier*/

  EP0J-24000(); /* Verify the entered data*/

  EP0J-25000(); /* Process valid input request*/


end // end EP0J-20000

// Obtain the data to display
Function EP0J-21000()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found,*/
   /* return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (EP0JW00.XXX-RQT-DATA-FL != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* Check for order number entered*/
   /* If not present, display message.*/
   /* ------------------------------------------------------------*/

  set EP0JW02 empty; /* M002 disp storage*/

  if (EP0JW00.PK-ORD-STKTF-ID == 0
   && EP0JW00.PK-NIKE-ORD-ID == 0
   && EP0JW00.PK-NBR-TIMES-ALOC == 0) /* Sel request*/

      /* Display map 2 with no data found message*/
    EP0JW00.XXX-RQT-DATA-FL = "N"; /* Data rqst fl*/
    EP0JW00.XXX-MAP-DSP-CD = "2"; /* Display map 2*/
    EP0JW00.XXX-MSG-LOC-ID = "21000"; /* Msg location*/
    converseLib.validationFailed(12); /* No data found*/
    set EP0JM002.PK-ORD-STKTF-ID cursor, bold; /* Hilite stktf*/
    set EP0JM002.PK-NIKE-ORD-ID bold; /* Hilite nike id*/
    set EP0JM002.PK-NBR-TIMES-ALOC bold; /* Hilite aloc*/

    exit stack;

  end

  VMPOLE01.XWH-WHSE-CD = EP0JW00.XWH-WHSE-CD;
  VMPOLE01.PK-ORD-STKTF-ID = EP0JW00.PK-ORD-STKTF-ID;
  VMPOLE01.PK-NIKE-ORD-ID = EP0JW00.PK-NIKE-ORD-ID;
  VMPOLE01.PK-NBR-TIMES-ALOC = EP0JW00.PK-NBR-TIMES-ALOC;

  VMPOLE01.PK-LINE-ITEM-NBR = EP0JW01.PK-LINE-ITEM-NBR[XXX-INX-FLD-NBR];
  VMPOLE01.PK-DCMS-MSG-NBR = EP0JW01.PK-DCMS-MSG-NBR[XXX-INX-FLD-NBR];
  VMPOLE01.XGP-GPC-CD = EP0JW01.XGP-GPC-CD[XXX-INX-FLD-NBR];
  VMPOLE01.SY-STY-NBR = EP0JW01.SY-STY-NBR[XXX-INX-FLD-NBR];
  VMPOLE01.SY-COLR-CD-ID = EP0JW01.SY-COLR-CD-ID[XXX-INX-FLD-NBR];
  VMPOLE01.XDM-DIM-CD = EP0JW01.XDM-DIM-CD[XXX-INX-FLD-NBR];
  VMPOLE01.SY-SZ-ID-DESC = EP0JW01.SY-SZ-ID-DESC[XXX-INX-FLD-NBR];

  EP0JS-VMPOLE01-S(); /* Select uniq row*/

  EP0JW02.PK-DCMS-MSG-NBR = VMPOLE01.PK-DCMS-MSG-NBR;
  EP0JW02.PK-DCMS-ERROVRD-FL = VMPOLE01.PK-DCMS-ERROVRD-FL;
  EP0JW02.PK-DCMS-ERR-TEXT = VMPOLE01.PK-DCMS-ERR-TEXT;

  VMPOLH01.XWH-WHSE-CD = EP0JW00.XWH-WHSE-CD;
  VMPOLH01.PK-ORD-STKTF-ID = EP0JW00.PK-ORD-STKTF-ID;
  VMPOLH01.PK-NIKE-ORD-ID = EP0JW00.PK-NIKE-ORD-ID;
  VMPOLH01.PK-NBR-TIMES-ALOC = EP0JW00.PK-NBR-TIMES-ALOC;

  EP0JS-VMPOLH01-S(); /* Select header for address info*/

  EP0JW02.CU-SHGRP-ADDR-ID = VMPOLH01.CU-SHGRP-ADDR-ID;
  EP0JW02.OP-ONETIME-SHIP-FL = VMPOLH01.OP-ONETIME-SHIP-FL;
  EP0JW02.OP-ALT-NM = VMPOLH01.OP-ALT-NM;
  EP0JW02.XXX-ADDR1 = VMPOLH01.XXX-ADDR1;
  EP0JW02.XXX-ADDR2 = VMPOLH01.XXX-ADDR2;
  EP0JW02.XXX-ADDR3 = VMPOLH01.XXX-ADDR3;
  EP0JW02.XXX-CITY = VMPOLH01.XXX-CITY;
  EP0JW02.XST-ST-CD = VMPOLH01.XST-ST-CD;
  EP0JW02.XXX-ZIP = VMPOLH01.XXX-ZIP;
  EP0JW02.XCT-CTRY-CD = VMPOLH01.XCT-CTRY-CD;

   /* ------------------------------------------------------------*/
   /* Check change authorization*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CACHGFL == "Y") /* authorized to update*/
    set EP0JM002.PK-DCMS-ERROVRD-FL initialAttributes;
  else
    set EP0JM002.PK-DCMS-ERROVRD-FL protect;
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  EP0JW00.XXX-RQT-DATA-FL = "N"; /* Data request*/

   /* ------------------------------------------------------------*/
   /* Indicate map format required*/
   /* ------------------------------------------------------------*/

  EP0JW00.XXX-MAP-FMAT-FL = "Y"; /* Format map*/


end // end EP0J-21000

// Format and converse the map
Function EP0J-22000()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    EP0JW00.XXX-MSG-NBR = converseVar.validationMsgNum; /* Message number*/

  end


   /* ------------------------------------------------------------*/
   /* If the map must be formatted, format the data in the map.*/
   /* ------------------------------------------------------------*/

  if (EP0JW00.XXX-MAP-FMAT-FL == "Y") /* Map must be formatted*/

    EP0J-22100(); /* Format data in the map*/

  end


   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  EP0JM002.XXX-CURR-DT = VGVar.currentShortGregorianDate; /* Current date*/

  EP0JM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  EP0JM002.CAITEM = COMMAREA.CAITEM; /* Application data*/


   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  EP0JW00.EP0JW-DATA-CHG-FL = "N"; /* initialize data chg flag*/

  if (EP0JW00.XXX-MSG-NBR != 0 /* Display msg*/
   || COMMAREA.CAMSG != " ")   /* or msg text*/

    if (EP0JW00.XXX-MSG-NBR != 0) /* Display msg*/

      if (EP0JW00.XXX-MSG-NBR == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(EP0JW00.XXX-MSG-NBR);
      end /* Msg number*/
    else
      EP0JM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Msg text*/

    end

    EP0JM002.XXX-MSG-LOC-ID = EP0JW00.XXX-MSG-LOC-ID; /* Msg location*/

    if (EP0JW00.XXX-MSG-NBR == 136)
      EP0JW00.EP0JW-DATA-CHG-FL = "Y"; /* data changed*/
    else
      set EP0JM002 alarm; /* Sound alarm*/
    end

  else

    set EP0JM002.PK-DCMS-ERROVRD-FL cursor; /* Place csr*/

  end


  converse EP0JM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  EP0JW00.XXX-MSG-LOC-ID = " "; /* Message location*/
  EP0JW00.XXX-MSG-NBR = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = EP0JM002.CATOAP; /* TO app*/
  COMMAREA.CAITEM = EP0JM002.CAITEM; /* App data*/


   /* ------------------------------------------------------------*/
   /* Reset modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set EP0JM002.CATOAP normal; /* "TO" Application*/
  set EP0JM002.CAITEM normal; /* ITEM data*/


end // end EP0J-22000

// Format the data in the map
Function EP0J-22100()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set EP0JM002 initial; /* M002 input/output area*/

  EP0JW00.XXX-MAP-FMAT-FL = "N"; /* Format the map flag*/


   /* ------------------------------------------------------------*/
   /* Format the map fields from the display storage area.*/
   /* ------------------------------------------------------------*/

  EP0JM002.PK-ORD-STKTF-ID = EP0JW00.PK-ORD-STKTF-ID; /* Stktf id*/
  EP0JM002.PK-NIKE-ORD-ID = EP0JW00.PK-NIKE-ORD-ID; /* Nike id*/
  EP0JM002.PK-NBR-TIMES-ALOC = EP0JW00.PK-NBR-TIMES-ALOC; /* times aloc*/
  EP0JM002.CU-CO-ID = EP0JW00.CU-CO-ID; /* Company id*/
  EP0JM002.CU-STOR-ID = EP0JW00.CU-STOR-ID; /* store id*/
  EP0JM002.CU-STOR-NM = EP0JW00.CU-STOR-NM; /* Store name*/
  EP0JM002.XNX-DEPT-ID-XREF = EP0JW00.XNX-DEPT-ID-XREF; /* Dept*/
  EP0JM002.OP-CUST-PO = EP0JW00.OP-CUST-PO; /* po*/

  if (EP0JW02.PK-DCMS-ERROVRD-FL == " ") /* ovrd fl = ' '*/
    EP0JW02.PK-DCMS-ERROVRD-FL = "N"; /* default 'N'*/
  end

  EP0JM002.PK-DCMS-ERROVRD-FL = EP0JW02.PK-DCMS-ERROVRD-FL;
  EP0JM002.CU-SHGRP-ADDR-ID = EP0JW02.CU-SHGRP-ADDR-ID; /* shgrp id*/
  EP0JM002.OP-ONETIME-SHIP-FL = EP0JW02.OP-ONETIME-SHIP-FL; /* Onetime ship fl*/
  EP0JM002.OP-ALT-NM = EP0JW02.OP-ALT-NM; /* Alt name*/
  EP0JM002.XXX-ADDR1 = EP0JW02.XXX-ADDR1; /* Addr1*/
  EP0JM002.XXX-ADDR2 = EP0JW02.XXX-ADDR2; /* Addr2*/
  EP0JM002.XXX-ADDR3 = EP0JW02.XXX-ADDR3; /* Addr3*/
  EP0JM002.XXX-CITY = EP0JW02.XXX-CITY; /* City*/
  EP0JM002.XST-ST-CD = EP0JW02.XST-ST-CD; /* State cd*/
  EP0JM002.XXX-ZIP = EP0JW02.XXX-ZIP; /* ZIP code*/
  EP0JM002.XCT-CTRY-CD = EP0JW02.XCT-CTRY-CD; /* Country cd*/
  EP0JM002.PK-DCMS-ERR-TEXT = EP0JW02.PK-DCMS-ERR-TEXT; /* err text*/


end // end EP0J-22100

// Check attention identifier
Function EP0J-23000()
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (EP0JM002.CATOAP > " ") /* FAST PATH request*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      EP0JS-TA0050-P(); /* Purge temp storage*/

      XSEPS-EXIT(); /* Exit*/

      set EP0JM002.CATOAP cursor, bold; /* Highlight*/

    else

      EP0JW00.XXX-MSG-LOC-ID = "23000"; /* Message location*/
      converseLib.validationFailed(258); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Default the select indicator to show the line was viewed*/
   /* ------------------------------------------------------------*/

  if (EP0JW00.EP0JW-DATA-CHG-FL == "N") /* viewed only*/
    EP0JW01.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] = "V";
  end

   /* ------------------------------------------------------------*/
   /* If ENTER key from map 2 is hit, check to update override fl*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)
    if (EP0JM002.PK-DCMS-ERROVRD-FL != EP0JW02.PK-DCMS-ERROVRD-FL)
      if (EP0JW02.PK-DCMS-MSG-NBR in EP0JT1.ERRNBR)

        EP0JW01.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] = "*";
        EP0JW01.PK-DCMS-ERROVRD-FL[XXX-INX-FLD-NBR] = EP0JM002.PK-DCMS-ERROVRD-FL;

        VMPOLE01.PK-DCMS-ERROVRD-FL = EP0JM002.PK-DCMS-ERROVRD-FL; /* move override fl*/
        EP0JW02.PK-DCMS-ERROVRD-FL = EP0JM002.PK-DCMS-ERROVRD-FL; /* move override fl*/
        XX0XS01(); /* convert sysdate*/
        VMPOLE01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
        VMPOLE01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;

        EP0JS-VMPOLE01-U();

        converseLib.validationFailed(136);
        exit stack;

      else
        EP0JM002.PK-DCMS-ERROVRD-FL = EP0JW02.PK-DCMS-ERROVRD-FL; /* reset override fl*/
        EP0JW00.XXX-MSG-LOC-ID = "23000";
        converseLib.validationFailed(62);
        exit stack;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If EXIT to map 1 requested.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    if (EP0JM001.PK-ORD-STKTF-ID > 0
     && EP0JM001.PK-NIKE-ORD-ID > 0
     && EP0JM001.PK-NBR-TIMES-ALOC > 0) /* Unique row request*/

      EP0JW00.XXX-RQT-DATA-FL = "N"; /* Data request flag*/

    end

    EP0JW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
    EP0JW00.XXX-MAP-DSP-CD = "1"; /* Map to be displayed*/

    exit stack; /* Exit to display map*/

  end


   /* ------------------------------------------------------------*/
   /* Transfer to Master Menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf4) /* EXIT to Master Menu*/

    COMMAREA.CATOAP = "MN0M"; /* Master Menu*/

    EP0JS-TA0050-P(); /* Purge temp storage*/

    XSEPS-EXIT(); /* Exit to another app*/

    exit stack; /* Exit to display map*/

  end


   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER not pressed*/

    EP0JW00.XXX-MSG-LOC-ID = "23000"; /* Message location*/
    converseLib.validationFailed(04); /* Invalid key*/

    exit stack; /* Display map*/

  end


end // end EP0J-23000

// Verify data that was entered
Function EP0J-24000()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (EP0JM002.PK-DCMS-ERROVRD-FL == "N" /* Valid value*/
   || EP0JM002.PK-DCMS-ERROVRD-FL == "Y")
                                           /* next sentence*/
  else /* Invalid value*/
    EP0JW00.XXX-MSG-LOC-ID = "24000"; /* Message location*/
    converseLib.validationFailed(309); /* Valid values 'Y' or 'N'*/
    set EP0JM002.PK-DCMS-ERROVRD-FL cursor, bold; /* Highlight*/

  end

  if (EP0JM002.CAITEM > " ") /* Application data was entered*/

    EP0JW00.XXX-MSG-LOC-ID = "24000"; /* Message location*/
    converseLib.validationFailed(259); /* Enter only with FAST PATH*/
    set EP0JM002.CAITEM cursor, bold; /* Highlight*/

  end


   /* ------------------------------------------------------------*/
   /* If any error was found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    exit stack; /* Exit to display map*/

  end


end // end EP0J-24000

// Process valid input request
Function EP0J-25000()
   /* ------------------------------------------------------------*/
   /* Determine if another line was selected for viewing.*/
   /* ------------------------------------------------------------*/

  if ("S" in EP0JW01.XXX-LN-SEL-IND from XXX-INX-FLD-NBR) /* Line was selected*/

    EP0JW00.XXX-INX-FLD-NBR = sysVar.arrayIndex; /* Map line index*/
    EP0JW00.XXX-RQT-DATA-FL = "Y"; /* Request for data*/
    if (EP0JW01.PK-DCMS-MSG-NBR[XXX-INX-FLD-NBR] == 2)
      EP0JW00.XXX-MAP-DSP-CD = "2"; /* Map 2 displayed*/
    else
      EP0JW00.XXX-MAP-DSP-CD = "3"; /* Map 3 displayed*/
    end

  else

    EP0JW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map*/
    EP0JW00.XXX-MAP-DSP-CD = "1"; /* Display map*/

  end


end // end EP0J-25000

// Main process to display map 3
Function EP0J-30000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display MAP 3.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


  EP0J-31000(); /* Obtain the data to display*/

  EP0J-32000(); /* Format and display the map*/

  EP0J-33000(); /* Check attention identifier*/

  EP0J-34000(); /* Verify the entered data*/

  EP0J-35000(); /* Process valid input request*/


end // end EP0J-30000

// Obtain the data to display
Function EP0J-31000()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found,*/
   /* return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (EP0JW00.XXX-RQT-DATA-FL != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* Check for order number entered*/
   /* If not present, display message.*/
   /* ------------------------------------------------------------*/

  set EP0JW03 empty; /* M003 disp storage*/

  if (EP0JW00.PK-ORD-STKTF-ID == 0
   && EP0JW00.PK-NIKE-ORD-ID == 0
   && EP0JW00.PK-NBR-TIMES-ALOC == 0) /* Sel request*/


      /* Display map 3 with no data found message*/
    EP0JW00.XXX-RQT-DATA-FL = "N"; /* Data rqst fl*/
    EP0JW00.XXX-MAP-DSP-CD = "3"; /* Display map 3*/
    EP0JW00.XXX-MSG-LOC-ID = "31000"; /* Msg location*/
    converseLib.validationFailed(12); /* No data found*/
    set EP0JM003.PK-ORD-STKTF-ID cursor, bold; /* Hilite stktf*/
    set EP0JM003.PK-NIKE-ORD-ID bold; /* Hilite nike id*/
    set EP0JM003.PK-NBR-TIMES-ALOC bold; /* Hilite aloc*/

    exit stack;

  end


  VMPOLE01.XWH-WHSE-CD = EP0JW00.XWH-WHSE-CD;
  VMPOLE01.PK-ORD-STKTF-ID = EP0JW00.PK-ORD-STKTF-ID;
  VMPOLE01.PK-NIKE-ORD-ID = EP0JW00.PK-NIKE-ORD-ID;
  VMPOLE01.PK-NBR-TIMES-ALOC = EP0JW00.PK-NBR-TIMES-ALOC;

  VMPOLE01.PK-LINE-ITEM-NBR = EP0JW01.PK-LINE-ITEM-NBR[XXX-INX-FLD-NBR];
  VMPOLE01.PK-DCMS-MSG-NBR = EP0JW01.PK-DCMS-MSG-NBR[XXX-INX-FLD-NBR];
  VMPOLE01.XGP-GPC-CD = EP0JW01.XGP-GPC-CD[XXX-INX-FLD-NBR];
  VMPOLE01.SY-STY-NBR = EP0JW01.SY-STY-NBR[XXX-INX-FLD-NBR];
  VMPOLE01.SY-COLR-CD-ID = EP0JW01.SY-COLR-CD-ID[XXX-INX-FLD-NBR];
  VMPOLE01.XDM-DIM-CD = EP0JW01.XDM-DIM-CD[XXX-INX-FLD-NBR];
  VMPOLE01.SY-SZ-ID-DESC = EP0JW01.SY-SZ-ID-DESC[XXX-INX-FLD-NBR];

  EP0JS-VMPOLE01-S(); /* Select uniq row*/


  EP0JW03.XGP-GPC-CD = VMPOLE01.XGP-GPC-CD;
  EP0JW03.PK-DCMS-MSG-NBR = VMPOLE01.PK-DCMS-MSG-NBR;
  EP0JW03.PK-DCMS-ERROVRD-FL = VMPOLE01.PK-DCMS-ERROVRD-FL;
  EP0JW00.SY-STY-NBR = VMPOLE01.SY-STY-NBR;
  EP0JW00.SY-COLR-CD-ID = VMPOLE01.SY-COLR-CD-ID;
  EP0JW00.XDM-DIM-CD = VMPOLE01.XDM-DIM-CD;
  EP0JW03.EP0JW-STYLE-ID = EP0JW00.EP0JW-STYLE-ID;
  EP0JW03.PK-DCMS-ERR-TEXT = VMPOLE01.PK-DCMS-ERR-TEXT;
  EP0JW03.SY-SZ-ID-DESC = VMPOLE01.SY-SZ-ID-DESC;

  EP0JW03.PK-DCMS-MSG-DESC = EP0JW01.PK-DCMS-MSG-DESC[XXX-INX-FLD-NBR];

   /* ------------------------------------------------------------*/
   /* Get data from dprod.vcolor02 table*/
   /* ------------------------------------------------------------*/

  if (VMPOLE01.SY-STY-NBR > " ") /* style is present*/

    SYCREC.XGPCD = VMPOLE01.XGP-GPC-CD;
    SYCREC.SY1STNBR = VMPOLE01.SY-STY-NBR;
    SYCREC.SY2CLRID = VMPOLE01.SY-COLR-CD-ID;
    SYCREC.XDMCD = VMPOLE01.XDM-DIM-CD;

    EP0JS-VCOLOR02-S(); /* Select uniq row*/

    EP0JW03.SY1SSTNM = SYCREC.SY1SSTNM;
    EP0JW03.SY2CLRAB = SYCREC.SY2CLRAB;

  end

   /* ------------------------------------------------------------*/
   /* Check change authorization*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CACLVL[1] == "Y") /* authorized to update*/
    set EP0JM003.PK-DCMS-ERROVRD-FL initialAttributes;
    set EP0JM003.EP0JM-ENTER-KEY3 normal;
  else
    set EP0JM003.PK-DCMS-ERROVRD-FL protect;
    set EP0JM003.EP0JM-ENTER-KEY3 initialAttributes;
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  EP0JW00.XXX-RQT-DATA-FL = "N"; /* Data request*/

   /* ------------------------------------------------------------*/
   /* Indicate map format required*/
   /* ------------------------------------------------------------*/

  EP0JW00.XXX-MAP-FMAT-FL = "Y"; /* Format map*/


end // end EP0J-31000

// Format and converse the map
Function EP0J-32000()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    EP0JW00.XXX-MSG-NBR = converseVar.validationMsgNum; /* Message number*/

  end


   /* ------------------------------------------------------------*/
   /* If the map must be formatted, format the data in the map.*/
   /* ------------------------------------------------------------*/

  if (EP0JW00.XXX-MAP-FMAT-FL == "Y") /* Map must be formatted*/

    EP0J-32100(); /* Format data in the map*/

  end


   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  EP0JM003.XXX-CURR-DT = VGVar.currentShortGregorianDate; /* Current date*/

  EP0JM003.CATOAP = COMMAREA.CATOAP; /* TO application*/
  EP0JM003.CAITEM = COMMAREA.CAITEM; /* Application data*/


   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  EP0JW00.EP0JW-DATA-CHG-FL = "N"; /* initialize data change flag*/

  if (EP0JW00.XXX-MSG-NBR != 0 /* Display msg*/
   || COMMAREA.CAMSG != " ")   /* or msg text*/

    if (EP0JW00.XXX-MSG-NBR != 0) /* Display msg*/

      if (EP0JW00.XXX-MSG-NBR == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(EP0JW00.XXX-MSG-NBR);
      end /* Msg number*/
    else
      EP0JM003.VAGen_EZEMSG = COMMAREA.CAMSG; /* Msg text*/

    end

    EP0JM003.XXX-MSG-LOC-ID = EP0JW00.XXX-MSG-LOC-ID; /* Msg location*/

    if (EP0JW00.XXX-MSG-NBR == 136)
      EP0JW00.EP0JW-DATA-CHG-FL = "Y"; /* data changed*/
    else
      set EP0JM003 alarm; /* Sound alarm*/
    end

  else

    if (EP0JW03.PK-DCMS-MSG-NBR in EP0JT1.ERRNBR)
      set EP0JM003.PK-DCMS-ERROVRD-FL cursor; /* Place csr*/
    else
      set EP0JM003.CATOAP cursor; /* Place csr*/
    end

  end


  converse EP0JM003 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  EP0JW00.XXX-MSG-LOC-ID = " "; /* Message location*/
  EP0JW00.XXX-MSG-NBR = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = EP0JM003.CATOAP; /* TO app*/
  COMMAREA.CAITEM = EP0JM003.CAITEM; /* App data*/


   /* ------------------------------------------------------------*/
   /* Reset modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set EP0JM003.CATOAP normal; /* "TO" Application*/
  set EP0JM003.CAITEM normal; /* ITEM data*/


end // end EP0J-32000

// Format the data in the map
Function EP0J-32100()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set EP0JM003 initial; /* M003 input/output area*/

  EP0JW00.XXX-MAP-FMAT-FL = "N"; /* Format the map flag*/


   /* ------------------------------------------------------------*/
   /* Format the map fields from the display storage area.*/
   /* ------------------------------------------------------------*/


  EP0JM003.PK-ORD-STKTF-ID = EP0JW00.PK-ORD-STKTF-ID; /* Stktf id*/
  EP0JM003.PK-NIKE-ORD-ID = EP0JW00.PK-NIKE-ORD-ID; /* Nike id*/
  EP0JM003.PK-NBR-TIMES-ALOC = EP0JW00.PK-NBR-TIMES-ALOC; /* times aloc*/
  EP0JM003.CU-CO-ID = EP0JW00.CU-CO-ID; /* Company id*/
  EP0JM003.CU-STOR-ID = EP0JW00.CU-STOR-ID; /* store id*/
  EP0JM003.CU-STOR-NM = EP0JW00.CU-STOR-NM; /* Store name*/
  EP0JM003.XNX-DEPT-ID-XREF = EP0JW00.XNX-DEPT-ID-XREF; /* Dept*/
  EP0JM003.OP-CUST-PO = EP0JW00.OP-CUST-PO; /* po*/
  if (EP0JW03.PK-DCMS-ERROVRD-FL == " ") /* ovrd fl = ' '*/
    EP0JW03.PK-DCMS-ERROVRD-FL = "N"; /* default 'N'*/
  end

  EP0JM003.PK-DCMS-ERROVRD-FL = EP0JW03.PK-DCMS-ERROVRD-FL;
  EP0JM003.XGP-GPC-CD = EP0JW03.XGP-GPC-CD; /* gpc code*/
  EP0JM003.EP0JW-STYLE-ID = EP0JW03.EP0JW-STYLE-ID; /* style id*/
  EP0JM003.SY1SSTNM = EP0JW03.SY1SSTNM; /* style name*/
  EP0JM003.SY2CLRAB = EP0JW03.SY2CLRAB; /* color abr*/
  EP0JM003.SY-SZ-ID-DESC = EP0JW03.SY-SZ-ID-DESC; /* size id desc*/
  EP0JM003.PK-DCMS-MSG-NBR = EP0JW03.PK-DCMS-MSG-NBR; /* dcms-msg-nbr*/
  EP0JM003.PK-DCMS-ERR-TEXT = EP0JW03.PK-DCMS-ERR-TEXT; /* err text*/
  EP0JM003.PK-DCMS-MSG-DESC = EP0JW03.PK-DCMS-MSG-DESC; /* err desc*/


end // end EP0J-32100

// Check attention identifier
Function EP0J-33000()
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (EP0JM003.CATOAP > " ") /* FAST PATH request*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      EP0JS-TA0050-P(); /* Purge temp storage*/

      XSEPS-EXIT(); /* Exit*/

      set EP0JM003.CATOAP cursor, bold; /* Highlight*/

    else

      EP0JW00.XXX-MSG-LOC-ID = "33000"; /* Message location*/
      converseLib.validationFailed(258); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Default the selection indicator to show the line was viewed*/
   /* ------------------------------------------------------------*/

  if (EP0JW00.EP0JW-DATA-CHG-FL == "N") /* viewed only*/
    EP0JW01.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] = "V";
  end

   /* ------------------------------------------------------------*/
   /* If ENTER key from map 3 is hit, check to update override fl*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)
    if (EP0JM003.PK-DCMS-ERROVRD-FL != EP0JW03.PK-DCMS-ERROVRD-FL)
      if (EP0JW03.PK-DCMS-MSG-NBR in EP0JT1.ERRNBR)

        EP0JW01.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] = "*";
        EP0JW01.PK-DCMS-ERROVRD-FL[XXX-INX-FLD-NBR] = EP0JM003.PK-DCMS-ERROVRD-FL;
        VMPOLE01.PK-DCMS-ERROVRD-FL = EP0JM003.PK-DCMS-ERROVRD-FL; /* move override fl*/

        XX0XS01(); /* convert sysdate*/
        VMPOLE01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
        VMPOLE01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;

        EP0JS-VMPOLE01-U();
        converseLib.validationFailed(136);
        exit stack;

      else
        EP0JM003.PK-DCMS-ERROVRD-FL = EP0JW03.PK-DCMS-ERROVRD-FL; /* reset override fl*/
        EP0JW00.XXX-MSG-LOC-ID = "33000";
        converseLib.validationFailed(62);
        exit stack;
      end
    end
  end

   /* ------------------------------------------------------------*/
   /* If EXIT to map 1 requested.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    if (EP0JM001.PK-ORD-STKTF-ID > 0
     && EP0JM001.PK-NIKE-ORD-ID > 0
     && EP0JM001.PK-NBR-TIMES-ALOC > 0) /* Unique row request*/

      EP0JW00.XXX-RQT-DATA-FL = "N"; /* Data request flag*/

    end

    EP0JW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
    EP0JW00.XXX-MAP-DSP-CD = "1"; /* Map to be displayed*/

    exit stack; /* Exit to display map*/

  end


   /* ------------------------------------------------------------*/
   /* Transfer to Master Menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf4) /* EXIT to Master Menu*/

    COMMAREA.CATOAP = "MN0M"; /* Master Menu*/

    EP0JS-TA0050-P(); /* Purge temp storage*/

    XSEPS-EXIT(); /* Exit to another app*/

    exit stack; /* Exit to display map*/

  end


   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER not pressed*/

    EP0JW00.XXX-MSG-LOC-ID = "33000"; /* Message location*/
    converseLib.validationFailed(04); /* Invalid key*/

    exit stack; /* Display map*/

  end


end // end EP0J-33000

// Verify data that was entered
Function EP0J-34000()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (EP0JM003.PK-DCMS-ERROVRD-FL == "N" /* Valid value*/
   || EP0JM003.PK-DCMS-ERROVRD-FL == "Y")
                                           /* Next sentence*/
  else /* Invalid value*/
    EP0JW00.XXX-MSG-LOC-ID = "34000"; /* Message location*/
    converseLib.validationFailed(309); /* Enter only with FAST PATH*/
    set EP0JM003.PK-DCMS-ERROVRD-FL cursor, bold; /* Highlight*/

  end

  if (EP0JM003.CAITEM > " ") /* Application data was entered*/

    EP0JW00.XXX-MSG-LOC-ID = "34000"; /* Message location*/
    converseLib.validationFailed(259); /* Enter only with FAST PATH*/
    set EP0JM003.CAITEM cursor, bold; /* Highlight*/

  end


   /* ------------------------------------------------------------*/
   /* If any error was found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    exit stack; /* Exit to display map*/

  end


end // end EP0J-34000

// Process valid input request
Function EP0J-35000()
   /* ------------------------------------------------------------*/
   /* Determine if another line was selected for viewing.*/
   /* ------------------------------------------------------------*/

  if ("S" in EP0JW01.XXX-LN-SEL-IND from XXX-INX-FLD-NBR) /* Line was selected*/

    EP0JW00.XXX-INX-FLD-NBR = sysVar.arrayIndex; /* Map line index*/
    EP0JW00.XXX-RQT-DATA-FL = "Y"; /* Request for data*/
    if (EP0JW01.PK-DCMS-MSG-NBR[XXX-INX-FLD-NBR] == 2)
      EP0JW00.XXX-MAP-DSP-CD = "2"; /* Map 2 displayed*/
    else
      EP0JW00.XXX-MAP-DSP-CD = "3"; /* Map 3 displayed*/
    end

  else

    EP0JW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map*/
    EP0JW00.XXX-MAP-DSP-CD = "1"; /* Display map*/

  end


end // end EP0J-35000

// Add page to temporary storage
Function EP0JS-TA0050-A()
   /* ------------------------------------------------------------*/
   /* Add the next page to the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  EP0JW01.XXX-TEMP-STG-LNTH = EP0JW00.XXX-TEMP-STG-LNTH; /* TS length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Appl ID*/

  TA5REC.TA5FNCCD = "A"; /* ADD funct*/

  try
    call "TA0050" (EP0JW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Add page*/


   /* ------------------------------------------------------------*/
   /* If the call was successful, initialize the storage area and*/
   /* indicators to be used and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* & normal return cd*/

    set EP0JW01 empty; /* M001 storage*/

    EP0JW00.XXX-HI-PAGE-NBR = TA5REC.TA5TSQIX; /* Highest page number*/

    TA5REC.TA5TSQIX = 0; /* Clear last page nbr*/

    return; /* Go to prior process*/

  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return cd*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutn parms*/

  EP0JW00.XXX-MSG-LOC-ID = "TA0050A"; /* Msg location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back chgs*/

  converseLib.validationFailed(01); /* Unexpected err*/
  TA1REC.TA1FUNC = "RETN"; /* Term function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = EP0JW00.XXX-MSG-LOC-ID; /* Msg location*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error routine*/

  exit stack; /* Exit to map*/


end // end EP0JS-TA0050-A

// Purge any temporary storage
Function EP0JS-TA0050-P()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set EP0JW01 empty; /* M001 display storage*/

  EP0JW00.XXX-PAGE-UPD-FL = "N"; /* Page update flag*/

  TA5REC.TA5TSQIX = 0; /* Displayed page number*/
  EP0JW00.XXX-HI-PAGE-NBR = 0; /* Highest page number*/


   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application id*/

  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (EP0JW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Purge storage*/


   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parms*/

  EP0JW00.XXX-MSG-LOC-ID = "TA0050P"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back*/

  converseLib.validationFailed(01); /* Unexpected error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = EP0JW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error routine*/

  exit stack; /* Exit to map*/


end // end EP0JS-TA0050-P

// Read temporary storage page
Function EP0JS-TA0050-R()
   /* ------------------------------------------------------------*/
   /* Read the next page from the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  EP0JW01.XXX-TEMP-STG-LNTH = EP0JW00.XXX-TEMP-STG-LNTH; /* TS length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Appl id*/
  TA5REC.TA5TSQIX = EP0JW00.XXX-CURR-PAGE-NBR; /* Pg nbr*/

  TA5REC.TA5FNCCD = "R"; /* READ func*/

  try
    call "TA0050" (EP0JW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Read page*/


   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parms*/

  EP0JW00.XXX-MSG-LOC-ID = "TA0050R"; /* Message*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back*/

  converseLib.validationFailed(01); /* Unexpected error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = EP0JW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "READ TEMPORARY STORAGE PAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error routine*/

  exit stack; /* Exit to map*/


end // end EP0JS-TA0050-R

// Update temporary storage page
Function EP0JS-TA0050-U()
   /* ------------------------------------------------------------*/
   /* Update the page in the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (EP0JW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update page*/


   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return cd*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutn parms*/

  EP0JW00.XXX-MSG-LOC-ID = "TA0050U"; /* Message loc*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back*/

  converseLib.validationFailed(01); /* Error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = EP0JW00.XXX-MSG-LOC-ID; /* Msg location*/
  TA1REC.TA1LOC = "UPDATE TEMPORARY STORAGE PAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error routine*/

  exit stack; /* Exit to map*/


end // end EP0JS-TA0050-U

// Select the table row
Function EP0JS-VCOLOR02-S()
   /* ------------------------------------------------------------*/
   /* Select the unique row in the table DPROD.VCOLOR02*/
   /* ------------------------------------------------------------*/

  try
    call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/


   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return; /* Return to previous process*/

    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  EP0JW00.XXX-MSG-LOC-ID = "VCOLOR02"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Contention*/

    converseLib.validationFailed(31); /* Contention*/
    TA1REC.TA1FUNC = "POST"; /* Function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back*/

    converseLib.validationFailed(01); /* Unexpected error*/
    TA1REC.TA1FUNC = "RETN"; /* Function*/

    converseLib.clearScreen();
     /* Clear screen*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EP0JW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW"; /* Description*/
  TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCOLOR02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  exit stack; /* Exit to map*/


end // end EP0JS-VCOLOR02-S

// Close selected set cursor
Function EP0JS-VMPOLE01-C2()
   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "VMPOLE01" ("C2", SQLCA, VMPOLE01) {isNoRefresh = yes, isExternal = yes};
  end /* Close cursor*/


   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  EP0JW00.XXX-MSG-LOC-ID = "VMPOLEC2"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back*/

  converseLib.validationFailed(01); /* Error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Function*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EP0JW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMPOLE01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error routine*/

  exit stack; /* Display map*/


end // end EP0JS-VMPOLE01-C2

// Fetch next row in cursor
Function EP0JS-VMPOLE01-N2()
   /* ------------------------------------------------------------*/
   /* Fetch the next row that was selected from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VMPOLE01" ("N2", SQLCA, VMPOLE01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/


   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
    /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      EP0JW00.EP0JW-VMPOLE-EOF-FL = "Y"; /* End of cursor*/

      return; /* Return to prior process*/

    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  EP0JW00.XXX-MSG-LOC-ID = "VMPOLEN1"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EP0JW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "FETCH NEXT ROW IN CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMPOLE01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  exit stack; /* Exit to map*/


end // end EP0JS-VMPOLE01-N2

// Select the table row
Function EP0JS-VMPOLE01-S()
   /* ------------------------------------------------------------*/
   /* Select the unique row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VMPOLE01" ("S ", SQLCA, VMPOLE01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/


   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return; /* Return to previous process*/

    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  EP0JW00.XXX-MSG-LOC-ID = "VMPOLE-S"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Contention*/

    converseLib.validationFailed(31); /* Contention*/
    TA1REC.TA1FUNC = "POST"; /* Function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back*/

    converseLib.validationFailed(01); /* Unexpected error*/
    TA1REC.TA1FUNC = "RETN"; /* Function*/

    converseLib.clearScreen();
     /* Clear screen*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EP0JW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMPOLE01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  exit stack; /* Exit to map*/


end // end EP0JS-VMPOLE01-S

// Select set and open cursor
Function EP0JS-VMPOLE01-S2()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VMPOLE01" ("S2", SQLCA, VMPOLE01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/


   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  EP0JW00.XXX-MSG-LOC-ID = "VMPOLES2"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EP0JW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "SELECT SET AND OPEN CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMPOLE01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  exit stack; /* Exit to map*/


end // end EP0JS-VMPOLE01-S2

// Select the table row
Function EP0JS-VMPOLE01-U()
   /* ------------------------------------------------------------*/
   /* Update the selected row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VMPOLE01" ("U ", SQLCA, VMPOLE01) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/


   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  EP0JW00.XXX-MSG-LOC-ID = "VMPOLE-U"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Contention*/

    converseLib.validationFailed(31); /* Contention*/
    TA1REC.TA1FUNC = "POST"; /* Function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back*/

    converseLib.validationFailed(01); /* Unexpected error*/
    TA1REC.TA1FUNC = "RETN"; /* Function*/

    converseLib.clearScreen();
     /* Clear screen*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EP0JW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMPOLE01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  exit stack; /* Exit to map*/


end // end EP0JS-VMPOLE01-U

// Select the table row
Function EP0JS-VMPOLH01-S()
   /* ------------------------------------------------------------*/
   /* Select the unique row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VMPOLH01" ("S ", SQLCA, VMPOLH01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/


   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return; /* Return to previous process*/

    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  EP0JW00.XXX-MSG-LOC-ID = "VMPOLH-S"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Contention*/

    converseLib.validationFailed(31); /* Contention*/
    TA1REC.TA1FUNC = "POST"; /* Function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back*/

    converseLib.validationFailed(01); /* Unexpected error*/
    TA1REC.TA1FUNC = "RETN"; /* Function*/

    converseLib.clearScreen();
     /* Clear screen*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EP0JW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMPOLH01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  exit stack; /* Exit to map*/


end // end EP0JS-VMPOLH01-S

// Select the table row
Function EP0JS-VPMSGD01-S()
   /* ------------------------------------------------------------*/
   /* Select the unique row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VPMSGD01" ("S ", SQLCA, VPMSGD01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/


   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return; /* Return to previous process*/

    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  EP0JW00.XXX-MSG-LOC-ID = "VPMSGD-S"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Contention*/

    converseLib.validationFailed(31); /* Contention*/
    TA1REC.TA1FUNC = "POST"; /* Function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back*/

    converseLib.validationFailed(01); /* Unexpected error*/
    TA1REC.TA1FUNC = "RETN"; /* Function*/

    converseLib.clearScreen();
     /* Clear screen*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EP0JW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VPMSGD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  exit stack; /* Exit to map*/


end // end EP0JS-VPMSGD01-S

// Select the table row
Function EP0JS-VSTORE01-S()
   /* ------------------------------------------------------------*/
   /* Select the unique row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/


   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return; /* Return to previous process*/

    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  EP0JW00.XXX-MSG-LOC-ID = "VSTORE-S"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Contention*/

    converseLib.validationFailed(31); /* Contention*/
    TA1REC.TA1FUNC = "POST"; /* Function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back*/

    converseLib.validationFailed(01); /* Unexpected error*/
    TA1REC.TA1FUNC = "RETN"; /* Function*/

    converseLib.clearScreen();
     /* Clear screen*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EP0JW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW"; /* Description*/
  TA1REC.TA1DBASE = "DCUST   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSTORE01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  exit stack; /* Exit to map*/


end // end EP0JS-VSTORE01-S

//*** RECORD=EP0JW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record EP0JW00 type basicRecord
  10 XXX-RQT-DATA-FL XXX-RQT-DATA-FL ; 
  10 XXX-MAP-FMAT-FL XXX-MAP-FMAT-FL ; 
  10 XXX-MAP-DSP-CD XXX-MAP-DSP-CD ; 
  10 XXX-TEMP-STG-LNTH XXX-TEMP-STG-LNTH ; 
  10 XXX-INX-LMT-NBR XXX-INX-LMT-NBR ; 
  10 XXX-INX-FLD-NBR XXX-INX-FLD-NBR ; 
  10 XXX-CURR-PAGE-NBR XXX-CURR-PAGE-NBR ; 
  10 XXX-HI-PAGE-NBR XXX-HI-PAGE-NBR ; 
  10 XXX-PAGE-UPD-FL XXX-PAGE-UPD-FL ; 
  10 XXX-MSG-LOC-ID XXX-MSG-LOC-ID ; 
  10 XXX-MSG-NBR XXX-MSG-NBR ; 
  10 XWH-WHSE-CD XWH-WHSE-CD ; 
  10 PK-ORD-STKTF-ID PK-ORD-STKTF-ID ; 
  10 PK-NIKE-ORD-ID PK-NIKE-ORD-ID ; 
  10 PK-NBR-TIMES-ALOC PK-NBR-TIMES-ALOC ; 
  10 CU-CO-ID CU-CO-ID ; 
  10 CU-STOR-ID CU-STOR-ID ; 
  10 XNX-DEPT-ID-XREF XNX-DEPT-ID-XREF ; 
  10 OP-CUST-PO OP-CUST-PO ; 
  10 CU-STOR-NM CU-STOR-NM ; 
  10 EP0JW-VMPOLH-EOF-FL EP0JW-VMPOLH-EOF-FL ; 
  10 EP0JW-VMPOLE-EOF-FL EP0JW-VMPOLE-EOF-FL ; 
  10 EP0JW-DATA-CHG-FL EP0JW-DATA-CHG-FL ; 
  10 EP0JW-STYLE-ID EP0JW-STYLE-ID ; 
    15 SY-STY-NBR SY-STY-NBR ; 
    15 * char(1) ; // SY_STY_NBR
    15 SY-COLR-CD-ID SY-COLR-CD-ID ; 
    15 * char(1) ; // SY_STY_NBR
    15 XDM-DIM-CD XDM-DIM-CD ; 
end // end EP0JW00

//*** RECORD=EP0JW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record EP0JW01 type basicRecord
  5 XXX-TEMP-STG-LNTH XXX-TEMP-STG-LNTH ; 
  5 * char(1512) ; 
    10 XXX-LN-SEL-IND XXX-LN-SEL-IND [14] ; 
    10 PK-DCMS-MSG-NBR PK-DCMS-MSG-NBR [14] ; 
    10 PK-DCMS-MSG-DESC PK-DCMS-MSG-DESC [14] ; 
    10 PK-DCMS-ERROVRD-FL PK-DCMS-ERROVRD-FL [14] ; 
    10 CU-SHGRP-ADDR-ID CU-SHGRP-ADDR-ID [14] ; 
    10 XGP-GPC-CD XGP-GPC-CD [14] ; 
    10 SY-STY-NBR SY-STY-NBR [14] ; 
    10 SY-COLR-CD-ID SY-COLR-CD-ID [14] ; 
    10 XDM-DIM-CD XDM-DIM-CD [14] ; 
    10 SY-SZ-ID-DESC SY-SZ-ID-DESC [14] ; 
    10 PK-LINE-ITEM-NBR PK-LINE-ITEM-NBR [14] ; 
end // end EP0JW01

//*** RECORD=EP0JW02 ****
// ------------------------
// Map 002 display storage.
// ------------------------
// ***********************
Record EP0JW02 type basicRecord
  10 XXX-MSG-NBR XXX-MSG-NBR ; 
  10 XNX-DEPT-ID-XREF XNX-DEPT-ID-XREF ; 
  10 PK-DCMS-ERROVRD-FL PK-DCMS-ERROVRD-FL ; 
  10 CU-SHGRP-ADDR-ID CU-SHGRP-ADDR-ID ; 
  10 OP-ONETIME-SHIP-FL OP-ONETIME-SHIP-FL ; 
  10 OP-ALT-NM OP-ALT-NM ; 
  10 XXX-ADDR1 XXX-ADDR1 ; 
  10 XXX-ADDR2 XXX-ADDR2 ; 
  10 XXX-ADDR3 XXX-ADDR3 ; 
  10 XXX-CITY XXX-CITY ; 
  10 XST-ST-CD XST-ST-CD ; 
  10 XXX-ZIP XXX-ZIP ; 
  10 XCT-CTRY-CD XCT-CTRY-CD ; 
  10 PK-DCMS-ERR-TEXT PK-DCMS-ERR-TEXT ; 
  10 PK-DCMS-MSG-NBR PK-DCMS-MSG-NBR ; 
  10 XGP-GPC-CD XGP-GPC-CD ; 
  10 SY-STY-NBR SY-STY-NBR ; 
  10 SY-COLR-CD-ID SY-COLR-CD-ID ; 
  10 XDM-DIM-CD XDM-DIM-CD ; 
  10 SY-SZ-ID-DESC SY-SZ-ID-DESC ; 
end // end EP0JW02

//*** RECORD=EP0JW03 ****
// ------------------------
// Map 003 display storage.
// ------------------------
// ***********************
Record EP0JW03 type basicRecord
  10 XXX-MSG-NBR XXX-MSG-NBR ; 
  10 XNX-DEPT-ID-XREF XNX-DEPT-ID-XREF ; 
  10 PK-DCMS-ERROVRD-FL PK-DCMS-ERROVRD-FL ; 
  10 PK-DCMS-ERR-TEXT PK-DCMS-ERR-TEXT ; 
  10 PK-DCMS-MSG-DESC PK-DCMS-MSG-DESC ; 
  10 PK-DCMS-MSG-NBR PK-DCMS-MSG-NBR ; 
  10 XGP-GPC-CD XGP-GPC-CD ; 
  10 SY-STY-NBR SY-STY-NBR ; 
  10 SY-COLR-CD-ID SY-COLR-CD-ID ; 
  10 XDM-DIM-CD XDM-DIM-CD ; 
  10 SY-SZ-ID-DESC SY-SZ-ID-DESC ; 
  10 EP0JW-STYLE-ID EP0JW-STYLE-ID ; 
  10 SY1SSTNM SY1SSTNM ; 
  10 SY2CLRAB SY2CLRAB ; 
end // end EP0JW03

//*** RECORD=VMPOLE01 ****
// ***************** Mirror Pool Error Table ******************
// 
// DB2 TABLE VIEW:       DPICK.VMPOLE01
// 
// COPYLIB MEMBER:       VMPOLE01
// 
// I/O MODULE:           VMPOLE01
// 
// KEY TO DB2 TABLE:     XWH-WHSE-CD
//                       PK-ORD-STKTF-ID
//                       PK-NIKE-ORD-ID
//                       PK-NBR-TIMES-ALOC
//                       PK-LINE-ITEM-NBR
// 
//                       PK-DCMS-MSG-NBR
//                       XGP-GPC-CD
//                       SY-STY-NBR
//                       SY-COLR-CD-ID
//                       XDM-DIM-CD
//                       SY-SZ-ID-DESC
// 
//   DATE      NAME    DESCRIPTION
// --------   ------   ----------------------------------------
// 02/09/98   kdenne   New Table
// ************************
Record VMPOLE01 type basicRecord
  5 VMPOLE01-GROUP VMPOLE01-GROUP ; 
    10 VMPOLE01-KEY VMPOLE01-KEY ; 
      15 XWH-WHSE-CD XWH-WHSE-CD ; 
      15 PK-ORD-STKTF-ID PK-ORD-STKTF-ID ; 
      15 PK-NIKE-ORD-ID PK-NIKE-ORD-ID ; 
      15 PK-NBR-TIMES-ALOC PK-NBR-TIMES-ALOC ; 
      15 PK-LINE-ITEM-NBR PK-LINE-ITEM-NBR ; 
      15 PK-DCMS-MSG-NBR PK-DCMS-MSG-NBR ; 
      15 XGP-GPC-CD XGP-GPC-CD ; 
      15 SY-STY-NBR SY-STY-NBR ; 
      15 SY-COLR-CD-ID SY-COLR-CD-ID ; 
      15 XDM-DIM-CD XDM-DIM-CD ; 
      15 SY-SZ-ID-DESC SY-SZ-ID-DESC ; 
    10 PK-DCMS-ERROVRD-FL PK-DCMS-ERROVRD-FL ; 
    10 PK-DCMS-MSG-TYP-CD PK-DCMS-MSG-TYP-CD ; 
    10 PK-DCMS-ERR-TEXT PK-DCMS-ERR-TEXT ; 
    10 XXX-PGM-NBR XXX-PGM-NBR ; 
    10 ZZ-SDT ZZ-SDT ; 
    10 ZZ-CHNG-DT ZZ-CHNG-DT ; 
    10 ZZ-CHNG-HHMM ZZ-CHNG-HHMM ; 
    10 ZZ-CHNG-CNT ZZ-CHNG-CNT ; 
end // end VMPOLE01

//*** RECORD=VPMSGD01 ****
// *********** Mirror Pool Message Description Table **********
// 
// DB2 TABLE VIEW:       DPICK.VPMSGD01
// 
// COPYLIB MEMBER:       DPMSGD01
// 
// I/O MODULE:           VPMSGD01
// 
// KEY TO DB2 TABLE:     PK-DCMS-MSG-NBR
// 
//   DATE      NAME    DESCRIPTION
// --------   ------   ----------------------------------------
// 07/06/98   kdenne   New Table
// ************************
Record VPMSGD01 type basicRecord
  5 VPMSGD01-GROUP VPMSGD01-GROUP ; 
    10 VPMSGD01-KEY VPMSGD01-KEY ; 
      15 PK-DCMS-MSG-NBR PK-DCMS-MSG-NBR ; 
    10 PK-DCMS-MSG-DESC PK-DCMS-MSG-DESC ; 
    10 PK-DCMS-MSG-TYP-CD PK-DCMS-MSG-TYP-CD ; 
    10 ZZ-SDT ZZ-SDT ; 
    10 ZZ-CHNG-DT ZZ-CHNG-DT ; 
    10 ZZ-CHNG-HHMM ZZ-CHNG-HHMM ; 
    10 ZZ-CHNG-CNT ZZ-CHNG-CNT ; 
end // end VPMSGD01

// Data change flag
DataItem EP0JW-DATA-CHG-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Style/Color/Dim
DataItem EP0JW-STYLE-ID char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// VSTADR01 EOF flag
DataItem EP0JW-VMPOLE-EOF-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// VSTADR01 EOF flag
DataItem EP0JW-VMPOLH-EOF-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DCMS Additional Error Text
DataItem PK-DCMS-ERR-TEXT char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DCMS Error Override flag
DataItem PK-DCMS-ERROVRD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Message Description
DataItem PK-DCMS-MSG-DESC char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DCMS Error Number
DataItem PK-DCMS-MSG-NBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Edit Error Code
DataItem PK-DCMS-MSG-TYP-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem VMPOLE01-GROUP char(133)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record Key level
DataItem VMPOLE01-KEY char(32)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem VPMSGD01-GROUP char(96)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record Key level
DataItem VPMSGD01-KEY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

