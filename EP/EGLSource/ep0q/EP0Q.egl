package ep0q;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import ep.common.*;
import ta.common.*;
//*** PROGRAM=EP0Q ****
// This application allows a user to inquire and maintain rows
// in a DB2 table.
// 
// There are two different screens that may be displayed.
// 
// The first screen displayed to the user allows specification
// of the search criteria to be used to list the rows in the
// table.  The list is displayed and the user may page backward
// and forward to view the information.
// 
// When a line is selected on the screen, the second screen is
// displayed, showing all information for that table row.
// 
// If the user has sufficient security to change the data, the
// modifiable fields remain unprotected.  Otherwise, they are
// protected from modification by the user.
// 
// If any data is modified, it is verified and, if complete and
// correct, the table row is updated with the changed data.
// The screen is redisplayed to the user, indicating that the
// update is completed.
// 
// If more that one line was selected on the first screen, the
// next selection is displayed when the user presses the ENTER
// key without making any change to the displayed data.
// 
// When the user exits the second screen (either via PF3 key or
// after all selections have been viewed) the first screen is
// redisplayed.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE    USERID  DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      06/01/98  PSHARM  New application.
// multgpc  08/06/99  OENFIE  regenerate to pick up changes to
//                            XPEP-00000
// *********************
Program EP0Q type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "EP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  EP0QW00 EP0QW00; // record
  EP0QW01 EP0QW01; // record
  EP0QW02 EP0QW02; // record
  EPWREC EPWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VMXPCT01 VMXPCT01; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use EP0QM.EP0QM001,  // forms
      EP0QM.EP0QM002
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPEP-00000: XPEP-00000();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set EP0QM001 initial; /* M001 input/output*/
    set EP0QM002 initial; /* M002 input/output*/
    set EP0QW00 empty; /* Working storage*/
    set EP0QW01 empty; /* M001 display storage*/
    set EP0QW02 empty; /* M002 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/

    /* fetch data at first screen  *****pks*/
    EP0QW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/
    EP0QW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    EP0QW00.XXX-MAP-DSP-CD = "1"; /* Map to be displayed*/

    EP0QW00.XXX-TEMP-STG-LNTH = 212; /* Temporary storage length*/
    EP0QW00.XXX-INX-LMT-NBR = 12; /* Number of lines on a page*/

     /* ------------------------------------------------------------*/
     /* Initialize any fields passed from another application.*/
     /* ------------------------------------------------------------*/
     /* this will get every thing on the first screen*/
    EP0QW01.EP0QM1-SRVR-TYP-CD-SRCH = "  ";
    EP0QW01.EP0QM1-SRVR-NM-SRCH = "        ";

    /* MOVE EPWREC.XWHCD TO EP0QW01.EP0QM1-WHSE-CD;/* whse code*/

    if (COMMAREA.CAITEM > " ") /* Data was passed*/

      /* cannot enter in this part of the code*/
      /* if it comes make sure that commarea should have all 4*/
      /* whse cd, area code, zone code and loc code because*/
      /* they are required  key fields. and in the first entry*/
      /* all the data will be displayed.*/

      /* MOVE EPWREC.XWHCD TO EP0QM001.EP0QM1-WHSE-CD;/* whse code*/
      /* MOVE COMMAREA.CAITEM TO EP0QM001.EP0QM1-AREA-CD; /* area code*/

      COMMAREA.CAITEM = " "; /* Clear passed data*/

      /* don't fetch data at the first screen.*/
      /* MOVE 'Y' TO EP0QW00.XXX-RQT-DATA-FL;/* Request for data flag*/

    end

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto EP0Q-00000; /* Converse the main process*/


    EP0Q-00000: EP0Q-00000();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto EP0Q-00000; /* Converse the main process*/


  end // end main
end // end EP0Q

// Determine which map to display
Function EP0Q-00000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the map that was requested.*/
   /* 2) Otherwise, indicate error and exit to System Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (EP0QW00.XXX-MAP-DSP-CD == "1") /* Map 1 was requested*/

    EP0Q-10000(); /* Display map 1*/

    exit stack; /* Exit to display map*/

  end

  if (EP0QW00.XXX-MAP-DSP-CD == "2") /* Map 2 was requested*/

    EP0Q-20000(); /* Display map 2*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Write the error to the Error Diagnosis Reporting Facility.*/
   /* ------------------------------------------------------------*/

  EPWREC.EPW-TA-LST-LOC = "00000"; /* Message location*/
  EPWREC.EPW-MSG-NO = 10; /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = EPWREC.EPW-TA-LST-LOC; /* Message location*/
  TA1REC.TA1LOC = "INVALID MAP NUMBER REQUESTED"; /* Description*/
  TA1REC.TA1MAPNO = EP0QW00.XXX-MAP-DSP-CD; /* Map requested*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

   /* ------------------------------------------------------------*/
   /* Exit to display the application system menu.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CATOAP = "MN0C"; /* System Menu*/

  XSEPS-EXIT(); /* Exit to another application*/

   /* ------------------------------------------------------------*/
   /* Abnormally terminate the transaction if the exit failed.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1FUNC = "ABND"; /* Termination function*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/


end // end EP0Q-00000

// Main process to display a map
Function EP0Q-10000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  EP0Q-11000(); /* Obtain the data to display*/

  EP0Q-12000(); /* Format and display the map*/

  EP0Q-13000(); /* Check attention identifier*/

  EP0Q-14000(); /* Verify the entered data*/

  EP0Q-15000(); /* Process valid input request*/


end // end EP0Q-10000

// Obtain the data to display
Function EP0Q-11000()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (EP0QW00.XXX-RQT-DATA-FL != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/

  if (EPWREC.EPW-MSG-NO == 0) /* No message to display*/
    EP0QW00.XXX-CURR-PAGE-NBR = 1; /* Page number to display*/
  end

   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/

  EP0QS-TA0050-P(); /* Purge any temporary storage*/

  EP0QW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

   /* ------------------------------------------------------------*/
   /* Select the information to display in the map heading.*/
   /* ------------------------------------------------------------*/

  EP0QW01.EP0QM1-SRVR-TYP-CD-SRCH = EP0QM001.EP0QM1-SRVR-TYP-CD-SRCH;
  EP0QW01.EP0QM1-SRVR-NM-SRCH = EP0QM001.EP0QM1-SRVR-NM-SRCH;

   /* ------------------------------------------------------------*/
   /* Select & open cursor for the detail data to be formatted*/
   /* ------------------------------------------------------------*/
  EP0Q-11100(); /* select cursor for detail lines*/

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  EP0QW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/


end // end EP0Q-11000

// Select VREPLC03 cursors
Function EP0Q-11100()
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  set VMXPCT01 empty; /* Clear row storage area*/

  EP0QW00.EP0QW-KEY1 = EP0QW01.EP0QM1-SRVR-TYP-CD-SRCH;
  EP0QW00.EP0QW-KEY2 = EP0QW01.EP0QM1-SRVR-NM-SRCH;
  EP0QW-DONE = "N";
  EP0QW-KEY-INDEX = 1;
  while (EP0QW-DONE == "N")
    if (EP0QW-KEY1-CHAR[EP0QW-KEY-INDEX] == " ")
      EP0QW-KEY1-CHAR[EP0QW-KEY-INDEX] = "_";
    else
      EP0QW-KEY-INDEX = EP0QW-KEY-INDEX + 1;
    end
    if (EP0QW-KEY-INDEX > 2)
      EP0QW-DONE = "Y";
    end
  end

  EP0QW-DONE = "N";
  EP0QW-KEY-INDEX = 1;
  while (EP0QW-DONE == "N")
    if (EP0QW-KEY2-CHAR[EP0QW-KEY-INDEX] == " ")
      EP0QW-KEY2-CHAR[EP0QW-KEY-INDEX] = "_";
    else
      EP0QW-KEY-INDEX = EP0QW-KEY-INDEX + 1;
    end
    if (EP0QW-KEY-INDEX > 8)
      EP0QW-DONE = "Y";
    end
  end

  VMXPCT01.MQS-SRVR-TYP-CD = EP0QW00.EP0QW-KEY1;
  VMXPCT01.MQS-JOB-ID = EP0QW00.EP0QW-KEY2;

  EP0Q-11110(); /* use cursor  1*/
end // end EP0Q-11100

// Select VREPLC03 cursor 1
Function EP0Q-11110()
   /* ------------------------------------------------------------*/
   /* Select and open cursor 1*/
   /* ------------------------------------------------------------*/
  EP0QS-VMXPCT01-S1(); /* Select set and open cursor*/

   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  EP0QW00.XXX-INX-FLD-NBR = 1; /* Display line index*/

  EP0QW00.EP0QW-MXPCT-EOF-FL = "N"; /* End of cursor flag*/

  while (EP0QW00.EP0QW-MXPCT-EOF-FL == "N") /* Until end of cursor*/

    EP0QS-VMXPCT01-N1(); /* Fetch next row in cursor*/

    /* ------------------------------------------------------------*/
    /* If not end of cursor, save the data in display storage.*/
    /* ------------------------------------------------------------*/

    if (EP0QW00.EP0QW-MXPCT-EOF-FL == "N") /* Not end of cursor*/

      /* ------------------------------------------------------------*/
      /* If first line on subsequent page, save heading information.*/
      /* ------------------------------------------------------------*/

      if (EP0QW00.XXX-HI-PAGE-NBR > 0 /* Not the first page*/
       && EP0QW00.XXX-INX-FLD-NBR == 1) /* and first line on page*/

        EP0QW01.EP0QM1-SRVR-TYP-CD-SRCH = EP0QM001.EP0QM1-SRVR-TYP-CD-SRCH;
        EP0QW01.EP0QM1-SRVR-NM-SRCH = EP0QM001.EP0QM1-SRVR-NM-SRCH;

      end

      /* ------------------------------------------------------------*/
      /* Save the data from the table row in display storage.*/
      /* ------------------------------------------------------------*/

      EP0QW01.EP0QM1-SRVR-TYP-CD[XXX-INX-FLD-NBR] = VMXPCT01.MQS-SRVR-TYP-CD;
      EP0QW01.EP0QM1-SRVR-NM[XXX-INX-FLD-NBR] = VMXPCT01.MQS-JOB-ID;

      /* ------------------------------------------------------------*/
      /* Increment the line index to the next row in display storage.*/
      /* ------------------------------------------------------------*/

      EP0QW00.XXX-INX-FLD-NBR = EP0QW00.XXX-INX-FLD-NBR + 1;
                                   /* Increment line index*/

    end

    /* ------------------------------------------------------------*/
    /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/

    if (EP0QW00.XXX-INX-FLD-NBR > EP0QW00.XXX-INX-LMT-NBR) /* Page is full*/

      EP0QS-TA0050-A(); /* Add page to temporary storage*/

      EP0QW00.XXX-INX-FLD-NBR = 1; /* Display line index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (EP0QW00.XXX-INX-FLD-NBR > 1) /* Page was formatted*/
    EP0QS-TA0050-A(); /* Add page to temporary storage*/
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  EP0QS-VMXPCT01-C1(); /* Close selected set cursor*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (EP0QW00.XXX-HI-PAGE-NBR == 0) /* No pages formatted*/

    EPWREC.EPW-TA-LST-LOC = "11110"; /* Message location*/
    converseLib.validationFailed(460); /* No data was found to display*/

    exit stack; /* Exit to display map*/

  end

end // end EP0Q-11110

// Format and converse the map
Function EP0Q-12000()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    EPWREC.EPW-MSG-NO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If the map must be formatted, format the data in the map.*/
   /* ------------------------------------------------------------*/

  if (EP0QW00.XXX-MAP-FMAT-FL == "Y") /* Map must be formatted*/
    EP0Q-12100(); /* Format the data in the map*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  EP0QM001.XXX-CURR-DT = VGVar.currentShortGregorianDate; /* Current date*/

  EP0QM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  EP0QM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (EPWREC.EPW-MSG-NO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (EPWREC.EPW-MSG-NO != 0) /* Message to display*/

      if (EPWREC.EPW-MSG-NO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(EPWREC.EPW-MSG-NO);
      end /* Message number*/
    else
      EP0QM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    EP0QM001.XXX-MSG-LOC-ID = EPWREC.EPW-TA-LST-LOC;
                                   /* Message location*/

    set EP0QM001 alarm; /* Indicate sound alarm*/

  end

  converse EP0QM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  EPWREC.EPW-TA-LST-LOC = " "; /* Message location*/
  EPWREC.EPW-MSG-NO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = EP0QM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = EP0QM001.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* Reset modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set EP0QM001.EP0QM1-SRVR-TYP-CD-SRCH normal; /* server type*/
  set EP0QM001.EP0QM1-SRVR-NM-SRCH normal; /* server name*/

  EP0QW00.XXX-INX-FLD-NBR = 1; /* Initialize line index*/

  while (EP0QW00.XXX-INX-FLD-NBR <= EP0QW00.XXX-INX-LMT-NBR
   /* Until end of screen*/
   && EP0QM001.EP0QM1-SRVR-TYP-CD[XXX-INX-FLD-NBR] > " ")
                                   /* or end of formatted lines*/

    set EP0QM001.EP0QM1-SEL-CD[XXX-INX-FLD-NBR] normal;
                                   /* Select indicator*/

    EP0QW00.XXX-INX-FLD-NBR = EP0QW00.XXX-INX-FLD-NBR + 1;
                                   /* Increment line index*/

  end

  set EP0QM001.CATOAP normal; /* TO application*/
  set EP0QM001.CAITEM normal; /* Application data*/


end // end EP0Q-12000

// Format the data in the map
Function EP0Q-12100()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set EP0QM001 initial; /* M001 input/output area*/

  EP0QW00.XXX-MAP-FMAT-FL = "N"; /* Format the map flag*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (EP0QW00.XXX-HI-PAGE-NBR > 0) /* Pages were formatted*/

    if (EP0QW00.XXX-CURR-PAGE-NBR != TA5REC.TA5TSQIX)
                                   /* Desired page not current*/

      /* ------------------------------------------------------------*/
      /* If the current page has been changed, update the page in*/
      /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (EP0QW00.XXX-PAGE-UPD-FL == "Y") /* Current page was changed*/

        EP0QS-TA0050-U(); /* Update temporary storage page*/

        EP0QW00.XXX-PAGE-UPD-FL = "N"; /* Page update flag*/

      end

      /* ------------------------------------------------------------*/
      /* If the desired page number is greater than the highest page*/
      /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (EP0QW00.XXX-CURR-PAGE-NBR > EP0QW00.XXX-HI-PAGE-NBR)
                                   /* Desired greater highest*/
        EP0QW00.XXX-CURR-PAGE-NBR = EP0QW00.XXX-HI-PAGE-NBR;
                                   /* Default to highest*/
      end

      EP0QS-TA0050-R(); /* Read temporary storage page*/

    end

    /* ------------------------------------------------------------*/
    /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set EP0QM001.XXX-CURR-PAGE-DESC skip; /* "PAGE" literal*/
    EP0QM001.XXX-CURR-PAGE-NBR = EP0QW00.XXX-CURR-PAGE-NBR;
                                   /* Current page*/
    set EP0QM001.XXX-HI-PAGE-DESC skip; /* "OF" literal*/
    EP0QM001.XXX-HI-PAGE-NBR = EP0QW00.XXX-HI-PAGE-NBR;
                                   /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* If srvr typ is missing, position the cursor on that field.*/
   /* ------------------------------------------------------------*/

  if (EP0QM001.EP0QM1-SRVR-TYP-CD-SRCH <= " ") /* srvr typ missing*/
    set EP0QM001.EP0QM1-SRVR-TYP-CD-SRCH cursor; /* Position cursor srvr ty*/
  else
    if (EP0QM001.EP0QM1-SRVR-NM-SRCH <= "        ") /* srvr nm missing*/
      set EP0QM001.EP0QM1-SRVR-NM-SRCH cursor; /* Position cursor on srvr nm*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Format the map fields from the display storage area.*/
   /* ------------------------------------------------------------*/

  EP0QM001.EP0QM1-SRVR-TYP-CD-SRCH = EP0QW01.EP0QM1-SRVR-TYP-CD-SRCH; /* srvr type*/
  EP0QM001.EP0QM1-SRVR-NM-SRCH = EP0QW01.EP0QM1-SRVR-NM-SRCH; /* srvr nm*/


  EP0QW00.XXX-INX-FLD-NBR = 1; /* Initialize line index*/

  while (EP0QW00.XXX-INX-FLD-NBR <= EP0QW00.XXX-INX-LMT-NBR
   /* Until screen is full*/
   && EP0QW01.EP0QM1-SRVR-TYP-CD[XXX-INX-FLD-NBR] > " ")
                                   /* or end of data*/

    if (EP0QW00.XXX-INX-FLD-NBR == 1) /* First select field*/

      set EP0QM001.EP0QM1-SEL-CD[XXX-INX-FLD-NBR] cursor, normal;
    else
      set EP0QM001.EP0QM1-SEL-CD[XXX-INX-FLD-NBR] normal;

    end

    EP0QM001.EP0QM1-SEL-CD[XXX-INX-FLD-NBR] = EP0QW01.XXX-LN-SEL-IND[XXX-INX-FLD-NBR]; /* Select code*/

    EP0QM001.EP0QM1-SRVR-TYP-CD[XXX-INX-FLD-NBR] = EP0QW01.EP0QM1-SRVR-TYP-CD[XXX-INX-FLD-NBR]; /* srvr typ*/

    EP0QM001.EP0QM1-SRVR-NM[XXX-INX-FLD-NBR] = EP0QW01.EP0QM1-SRVR-NM[XXX-INX-FLD-NBR]; /* srvr nm*/

    EP0QW00.XXX-INX-FLD-NBR = EP0QW00.XXX-INX-FLD-NBR + 1;
                                   /* Increment line index*/

  end

end // end EP0Q-12100

// Check attention identifier
Function EP0Q-13000()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (EP0QW00.XXX-RQT-DATA-FL == "Y") /* Request for data pending*/
      set EP0QW01 empty; /* M001 display storage*/
    end

    EP0QW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/
    EP0QW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (EP0QM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      EP0QS-TA0050-P(); /* Purge any temporary storage*/

      XSEPS-EXIT(); /* Exit to another application*/

      set EP0QM001.CATOAP cursor, bold; /* Highlight*/

    else

      EPWREC.EPW-TA-LST-LOC = "13000"; /* Message location*/
      converseLib.validationFailed(258); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If a PF key transfer requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* main menu*/
    end

    EP0QS-TA0050-P(); /* Purge any temporary storage*/

    XSEPS-EXIT(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf10) /* and PF10 was not pressed  PKS***/

    EPWREC.EPW-TA-LST-LOC = "13000"; /* Message location*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


   /* ------------------------------------------------------------*/
   /* Check if authorized to use pf10 key. Display an error*/
   /* message to theuser if the use of PF10 key is not authorized.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10 /* pf10 was pressed*/
   && COMMAREA.CACHGFL != "Y")     /* authorized to change*/

    EPWREC.EPW-TA-LST-LOC = "13000"; /* Message location*/
    converseLib.validationFailed(455); /* PA/PF key pressed is not valid*/

    exit stack; /* Exit to display map*/

  end


end // end EP0Q-13000

// Verify data that was entered
Function EP0Q-14000()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (EP0QM001.CAITEM > " ") /* Application data was entered*/

    EPWREC.EPW-TA-LST-LOC = "14000"; /* Message location*/
    converseLib.validationFailed(259); /* Enter only with FAST PATH*/
    set EP0QM001.CAITEM cursor, bold; /* Highlight*/

  end

   /* ------------------------------------------------------------*/
   /* if PF10 is pressed,  determine if any other field changed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* Scroll back request*/

    EP0Q-14100(); /* Highlight other changed fields*/

  end
   /* ------------------------------------------------------------*/
   /* If scroll requested, determine if any other field changed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    EP0Q-14100(); /* Highlight other changed fields*/

    /* ------------------------------------------------------------*/
    /* Determine whether a valid request to scroll was entered.*/
    /* ------------------------------------------------------------*/

    EP0Q-14200(); /* Verify scroll request*/

  else

    /* ------------------------------------------------------------*/
    /* If key field changed, determine if any other field changed.*/
    /* ------------------------------------------------------------*/

    if (EP0QM001.EP0QM1-SRVR-TYP-CD-SRCH != EP0QW01.EP0QM1-SRVR-TYP-CD-SRCH
     || EP0QM001.EP0QM1-SRVR-NM-SRCH != EP0QW01.EP0QM1-SRVR-NM-SRCH)

      EP0Q-14100(); /* Highlight other changed fields*/

      /* ------------------------------------------------------------*/
      /* Determine if all the required key fields were entered.*/
      /* ------------------------------------------------------------*/

      EP0Q-14300(); /* Check for required key fields*/

    else

      /* ------------------------------------------------------------*/
      /* Always check for required key fields.*/
      /* ------------------------------------------------------------*/
      EP0Q-14300(); /* Check for required key fields*/

      /* ------------------------------------------------------------*/
      /* Otherwise, verify any modifiable data that was changed.*/
      /* ------------------------------------------------------------*/

      if (EP0QW00.XXX-HI-PAGE-NBR > 0) /* Page was formatted*/

        EP0QW00.XXX-INX-FLD-NBR = EP0QW00.XXX-INX-LMT-NBR;
                                   /* Line index*/

        while (EP0QW00.XXX-INX-FLD-NBR > 0) /* Until end of lines*/

          EP0Q-14400(); /* Verify data in the line*/

          EP0QW00.XXX-INX-FLD-NBR = EP0QW00.XXX-INX-FLD-NBR - 1;
                                   /* Decrement line number*/

        end

      end

    end

  end

   /* ------------------------------------------------------------*/
   /* If any error was found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end EP0Q-14000

// Highlight other changed fields
Function EP0Q-14100()
   /* ------------------------------------------------------------*/
   /* If a modifiable field was changed, indicate that field may*/
   /* not be changed when key is changed or a pf key is pressed.*/
   /* ------------------------------------------------------------*/

  EP0QW00.XXX-INX-FLD-NBR = EP0QW00.XXX-INX-LMT-NBR; /* Line index*/

  while (EP0QW00.XXX-INX-FLD-NBR > 0) /* Until end of lines*/

    if (EP0QM001.EP0QM1-SEL-CD[XXX-INX-FLD-NBR] != 
    EP0QW01.XXX-LN-SEL-IND[XXX-INX-FLD-NBR])

      EPWREC.EPW-TA-LST-LOC = "14100"; /* Message location*/
      if (converseVar.eventKey is pf7 || converseVar.eventKey is pf8)
        converseLib.validationFailed(462); /* scrolling not allowed with*/
                                       /* selection criteria*/
      else
        if (converseVar.eventKey is pf10)
          converseLib.validationFailed(462); /* pf10      not allowed with*/
                                       /* selection criteria*/
        else
          converseLib.validationFailed(463); /* selection not valid with*/
                                       /* key field change*/
        end
      end
      set EP0QM001.EP0QM1-SEL-CD[XXX-INX-FLD-NBR] cursor, bold;
                                   /* Highlight*/

    end

    EP0QW00.XXX-INX-FLD-NBR = EP0QW00.XXX-INX-FLD-NBR - 1;
                                   /* Decrement line number*/

  end


end // end EP0Q-14100

// Verify scroll request
Function EP0Q-14200()
   /* ------------------------------------------------------------*/
   /* Indicate key fields may not change when scroll is requested.*/
   /* ------------------------------------------------------------*/

  if (EP0QM001.EP0QM1-SRVR-TYP-CD-SRCH != 
  EP0QW01.EP0QM1-SRVR-TYP-CD-SRCH) /* srvr type changed*/

    EPWREC.EPW-TA-LST-LOC = "14200"; /* Message location*/
    converseLib.validationFailed(464); /* Field may not change*/
                                    /* when scrolling is requested.*/
    set EP0QM001.EP0QM1-SRVR-TYP-CD-SRCH cursor, bold; /* Highlight*/

  end

  if (EP0QM001.EP0QM1-SRVR-NM-SRCH != 
  EP0QW01.EP0QM1-SRVR-NM-SRCH) /* srvr name changed*/

    EPWREC.EPW-TA-LST-LOC = "14200"; /* Message location*/
    converseLib.validationFailed(464); /* Field may not change*/
                                    /* when scrolling is requested.*/
    set EP0QM001.EP0QM1-SRVR-NM-SRCH cursor, bold; /* Highlight*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && EP0QW00.XXX-CURR-PAGE-NBR < 2) /* and no previous pages*/

    EPWREC.EPW-TA-LST-LOC = "14200"; /* Message location*/
    converseLib.validationFailed(7); /* No previous page to display*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && EP0QW00.XXX-CURR-PAGE-NBR >= EP0QW00.XXX-HI-PAGE-NBR)
                                   /* and no more pages*/

    EPWREC.EPW-TA-LST-LOC = "14200"; /* Message location*/
    converseLib.validationFailed(8); /* No more pages to display*/

  end


end // end EP0Q-14200

// Check for required key fields
Function EP0Q-14300()
   /* the required key fields are whse cd, area cd, zone cd, loc cd*/
   /* they must be entered. o.w display error*/
   /* ------------------------------------------------------------*/
   /* Verify that a whse code was entered.*/
   /* ------------------------------------------------------------*/

  /* IF EP0QM001.EP0QM1-WHSE-CD LE ' ';/* whse code not entered*/
  /* ;*/
  /* MOVE '14300' TO EPWREC.EPW-TA-LST-LOC;/* Message location*/
  /* MOVE 9 TO EZEMNO;              /* whse cd is missing or invalid*/
  /* SET EP0QM001.EP0QM1-WHSE-CD CURSOR,BRIGHT;/* Highlight*/
  /* EZERTN;*/
  /* ;*/
  /* END;*/
   /* check for valid whse cd in xwhtbl table*/
  /* IF EP0QM001.EP0QM1-WHSE-CD IN XWHTBL.XWHCD*/
  /* ;*/
  /* MOVE XWHTBL.XWHSABRV(EZETST) TO EP0QM001.EP0QM1-WHSE-SHT-ABRV;*/
  /* MOVE XWHTBL.XWHSABRV(EZETST) TO EP0QW01.EP0QM1-WHSE-SHT-ABRV;*/
  /* ;*/
  /* ELSE;*/
  /* MOVE '14300' TO EPWREC.EPW-TA-LST-LOC; /* message location*/
  /* MOVE 373 TO EZEMNO;                    /* invalid whse code*/
  /* SET EP0QM001.EP0QM1-WHSE-CD CURSOR,BRIGHT;/* Highlight*/
  /* EZERTN;*/
  /* END;*/

   /* ------------------------------------------------------------*/
   /* Verify that a area code was entered.*/
   /* ------------------------------------------------------------*/

  /* IF EP0QM001.EP0QM1-AREA-CD LE ' ';/* area code not entered*/
  /* ;*/
  /* MOVE '14300' TO EPWREC.EPW-TA-LST-LOC;/* Message location*/
  /* MOVE 9 TO EZEMNO;              /* area cd is missing or invalid*/
  /* SET EP0QM001.EP0QM1-AREA-CD CURSOR,BRIGHT; /* Highlight*/
  /* EZERTN;*/
  /* ;*/
  /* END;*/

   /* check for valid area cd in xartbl table*/
  /* MOVE EP0QM001.EP0QM1-WHSE-CD TO EP0QW00.EP0QW-WHSE-CD;*/
  /* MOVE EP0QM001.EP0QM1-AREA-CD TO EP0QW00.EP0QW-AREA-CD;*/
  /* IF EP0QW00.EP0QW-XARKEY IN XARTBL.XARKEY*/
  /* ; /* continue*/
  /* ELSE;*/
  /* MOVE '14300' TO EPWREC.EPW-TA-LST-LOC; /* message location*/
  /* MOVE 323 TO EZEMNO;                    /* invalid area code*/
  /* SET EP0QM001.EP0QM1-AREA-CD CURSOR,BRIGHT; /* Highlight*/
  /* EZERTN;*/
  /* END;*/
end // end EP0Q-14300

// Verify data in the line
Function EP0Q-14400()
   /* ------------------------------------------------------------*/
   /* If selection was entered and is not a "S", indicate that*/
   /* only "S" may be entered to select a line.*/
   /* ------------------------------------------------------------*/

  if (EP0QM001.EP0QM1-SEL-CD[XXX-INX-FLD-NBR] != 
  EP0QW01.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] /* Selection entered*/
   && EP0QM001.EP0QM1-SEL-CD[XXX-INX-FLD-NBR] != "S"
   && EP0QM001.EP0QM1-SEL-CD[XXX-INX-FLD-NBR] != "C"
   && EP0QM001.EP0QM1-SEL-CD[XXX-INX-FLD-NBR] != "A"
   && EP0QM001.EP0QM1-SEL-CD[XXX-INX-FLD-NBR] != "D")

    EPWREC.EPW-TA-LST-LOC = "14400"; /* Message location*/
    converseLib.validationFailed(461); /* Only "S,C,A,D" may be entered*/
    set EP0QM001.EP0QM1-SEL-CD[XXX-INX-FLD-NBR] cursor, bold;
                                   /* Highlight*/

  end


end // end EP0Q-14400

// Process valid input request
Function EP0Q-15000()
   /* ------------------------------------------------------------*/
   /* Save any work record fields that may have been modified.*/
   /* ------------------------------------------------------------*/

   /* MOVE EP0QM001.EP0QM1-WHSE-CD TO EPWREC.XWHCD;/* whse code*/
   /* MOVE EP0QM001.EP0QM1-WHSE-SHT-ABRV TO EPWREC.XWH-WHSE-SHT-ABRV;*/

   /* ------------------------------------------------------------*/
   /* If the key fields changed, request the data to display.*/
   /* ------------------------------------------------------------*/

  if (EP0QM001.EP0QM1-SRVR-TYP-CD-SRCH != EP0QW01.EP0QM1-SRVR-TYP-CD-SRCH
   || EP0QM001.EP0QM1-SRVR-NM-SRCH != EP0QW01.EP0QM1-SRVR-NM-SRCH
  )
    EP0QW01.EP0QM1-SRVR-TYP-CD-SRCH = EP0QM001.EP0QM1-SRVR-TYP-CD-SRCH;
    EP0QW01.EP0QM1-SRVR-NM-SRCH = EP0QM001.EP0QM1-SRVR-NM-SRCH;

    EP0QW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll backward was requested, decrement the page number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    EP0QW00.XXX-CURR-PAGE-NBR = EP0QW00.XXX-CURR-PAGE-NBR - 1;
                                   /* Decrement page number*/

    EP0QW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, increment the page number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    EP0QW00.XXX-CURR-PAGE-NBR = EP0QW00.XXX-CURR-PAGE-NBR + 1;
                                   /* Increment page number*/

    EP0QW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* If PF10 is pressed then display map2.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* PF10 pressed*/

    EP0QW00.XXX-INX-FLD-NBR = 1; /* initialize line-index*/
    EP0QW01.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] = "A";
    move EP0QW01.XXX-LN-SEL-IND to EP0QW00.EP0QW-LN-SEL-IND[1] for all;

    EP0QW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/
    EP0QW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
    EP0QW00.XXX-MAP-DSP-CD = "2"; /* Map to be displayed*/
    set EP0QW02 empty;
    EP0QW02.EP0QM2-SRVR-TYP-CD = "TI"; /* default*/
    EP0QW02.EP0QM2-SRVR-NM = "        ";
    EP0QW02.EP0QM2-JOB-STAT-CD = "A"; /* default*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Save any field that was changed in the map display storage.*/
   /* ------------------------------------------------------------*/

  EP0QW00.XXX-INX-FLD-NBR = 1; /* Initialize line index*/

  while (EP0QW00.XXX-INX-FLD-NBR <= EP0QW00.XXX-INX-LMT-NBR)
                                   /* Until end of lines*/

    if (EP0QM001.EP0QM1-SEL-CD[XXX-INX-FLD-NBR] != 
    EP0QW01.XXX-LN-SEL-IND[XXX-INX-FLD-NBR])

      EP0QW01.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] = EP0QM001.EP0QM1-SEL-CD[XXX-INX-FLD-NBR];

      EP0QW00.XXX-PAGE-UPD-FL = "Y"; /* Page update flag*/

    end

    EP0QW00.XXX-INX-FLD-NBR = EP0QW00.XXX-INX-FLD-NBR + 1;
                                   /* Increment line index*/

  end

   /* ------------------------------------------------------------*/
   /* If a line was selected, format the key fields and indicate*/
   /* that map 002 is to be displayed.*/
   /* ------------------------------------------------------------*/

  EP0QW00.XXX-INX-FLD-NBR = 1; /* initialize line-index*/
  EP0QW00.EP0QW-ROW-SEL-FL = "N"; /* row not selected*/
  while (EP0QW00.XXX-INX-FLD-NBR <= EP0QW00.XXX-INX-LMT-NBR
   /* until screen not full*/
   && EP0QW00.EP0QW-ROW-SEL-FL == "N")
                                  /* and 's' or 'c' not found*/

    if (EP0QW01.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] == "S"
     || EP0QW01.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] == "C"
     || EP0QW01.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] == "A"
     || EP0QW01.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] == "D")
      EP0QW00.EP0QW-ROW-SEL-FL = "Y";
    else
      EP0QW00.XXX-INX-FLD-NBR = EP0QW00.XXX-INX-FLD-NBR + 1;
    end
  end
  if (EP0QW00.EP0QW-ROW-SEL-FL == "Y") /* Line was selected*/

     /* save the sel fields in the working storage*/
    move EP0QW01.XXX-LN-SEL-IND to EP0QW00.EP0QW-LN-SEL-IND[1] for all;

    EP0QM002.EP0QM2-SRVR-TYP-CD = EP0QW01.EP0QM1-SRVR-TYP-CD[XXX-INX-FLD-NBR];

    EP0QM002.EP0QM2-SRVR-NM = EP0QW01.EP0QM1-SRVR-NM[XXX-INX-FLD-NBR];

    EP0QW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/
    EP0QW00.XXX-MAP-DSP-CD = "2"; /* Map to be displayed*/

  end


end // end EP0Q-15000

// Main process to display a map
Function EP0Q-20000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  EP0Q-21000(); /* Obtain the data to display*/

  EP0Q-22000(); /* Format and display the map*/

  EP0Q-23000(); /* Check attention identifier*/

  EP0Q-24000(); /* Verify the entered data*/

  EP0Q-25000(); /* Process valid input request*/


end // end EP0Q-20000

// Obtain the data to display
Function EP0Q-21000()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (EP0QW00.XXX-RQT-DATA-FL != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Clear the map display storage area and save the key fields.*/
   /* ------------------------------------------------------------*/

  set EP0QW02 empty; /* M002 display storage*/

  EP0QW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

  EP0QW02.EP0QM2-SRVR-NM = EP0QM002.EP0QM2-SRVR-NM;
  EP0QW02.EP0QM2-SRVR-TYP-CD = EP0QM002.EP0QM2-SRVR-TYP-CD;

   /* ------------------------------------------------------------*/
   /* Select the row to display from the table.*/
   /* ------------------------------------------------------------*/

  set VMXPCT01 empty; /* Clear row storage area*/

  VMXPCT01.MQS-SRVR-TYP-CD = EP0QW02.EP0QM2-SRVR-TYP-CD;
  VMXPCT01.MQS-JOB-ID = EP0QW02.EP0QM2-SRVR-NM;

  EP0QS-VMXPCT01-S(); /* Select the table row*/

   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

    EP0QW02.EP0QM2-SRVR-NM = VMXPCT01.MQS-JOB-ID;
    EP0QW02.EP0QM2-SRVR-TYP-CD = VMXPCT01.MQS-SRVR-TYP-CD;
    EP0QW02.EP0QM2-JOB-STAT-CD = VMXPCT01.MQS-JOB-STAT-CD;
    EP0QW02.EP0QM2-SHUTDOWN-FL = VMXPCT01.MQS-SHUTDOWN-FL;
    EP0QW02.EP0QM2-WAIT-TIME-NBR = VMXPCT01.MQS-WAIT-TIME-NBR;
    EP0QW02.EP0QM2-BTCHRECLMT-NBR = VMXPCT01.MQS-BTCHRECLMT-NBR;
    EP0QW02.EP0QM2-MSGBYTELMT-NBR = VMXPCT01.MQS-MSGBYTELMT-NBR;
    EP0QW02.EP0QM2-SYNCMSGLMT-NBR = VMXPCT01.MQS-SYNCMSGLMT-NBR;
    EP0QW02.EP0QM2-QMGR-NM = VMXPCT01.MQS-QMGR-NM;
    EP0QW02.EP0QM2-QUEUE1-NM = VMXPCT01.MQS-QUEUE1-NM;
    EP0QW02.EP0QM2-QUEUE2-NM = VMXPCT01.MQS-QUEUE2-NM;
    EP0QW02.EP0QM2-QUEUE3-NM = VMXPCT01.MQS-QUEUE3-NM;
    EP0QW02.EP0QM2-QUEUE4-NM = VMXPCT01.MQS-QUEUE4-NM;

  else

    EPWREC.EPW-TA-LST-LOC = "21000"; /* Message location*/
    converseLib.validationFailed(460); /* No data was found to display*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  EP0QW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/


end // end EP0Q-21000

// Format and converse the map
Function EP0Q-22000()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    EPWREC.EPW-MSG-NO = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If the map must be formatted, format the data in the map.*/
   /* ------------------------------------------------------------*/

  if (EP0QW00.XXX-MAP-FMAT-FL == "Y") /* Map must be formatted*/
    EP0Q-22100(); /* Format the data in the map*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether to protect any of the modifiable fields.*/
   /* ------------------------------------------------------------*/

  EP0Q-22200(); /* Check change authorization*/

   /* ------------------------------------------------------------*/
   /* Format any descriptions for codes that are displayed.*/
   /* ------------------------------------------------------------*/

  if (EP0QW02.EP0QM2-SRVR-TYP-CD == "TI")
    EP0QM002.EP0QM2-SRVR-TYP-CD-DESC = "TRANSFER IN ";
  else
    EP0QM002.EP0QM2-SRVR-TYP-CD-DESC = "TRANSFER OUT";
  end
  if (EP0QW02.EP0QM2-JOB-STAT-CD == "A")
    EP0QM002.EP0QM2-JOB-STAT-DESC = "ACTIVE  ";
  else
    EP0QM002.EP0QM2-JOB-STAT-DESC = "INACTIVE";
  end


   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  EP0QM002.XXX-CURR-DT = VGVar.currentShortGregorianDate; /* Current date*/

  EP0QM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  EP0QM002.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (EPWREC.EPW-MSG-NO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (EPWREC.EPW-MSG-NO != 0) /* Message to display*/

      if (EPWREC.EPW-MSG-NO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(EPWREC.EPW-MSG-NO);
      end /* Message number*/
    else
      EP0QM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    EP0QM002.XXX-MSG-LOC-ID = EPWREC.EPW-TA-LST-LOC;
                                   /* Message location*/

    set EP0QM002 alarm; /* Indicate sound alarm*/

  end

  converse EP0QM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  EPWREC.EPW-TA-LST-LOC = " "; /* Message location*/
  EPWREC.EPW-MSG-NO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = EP0QM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = EP0QM002.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* Reset modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set EP0QM002.CATOAP normal; /* TO application*/
  set EP0QM002.CAITEM normal; /* Application data*/

  set EP0QM002.EP0QM2-SRVR-NM initialAttributes;
  set EP0QM002.EP0QM2-SRVR-TYP-CD initialAttributes;
  set EP0QM002.EP0QM2-SRVR-TYP-CD-DESC skip, noHighLight;
  set EP0QM002.EP0QM2-JOB-STAT-CD initialAttributes;
  set EP0QM002.EP0QM2-JOB-STAT-DESC skip, noHighLight;
  set EP0QM002.EP0QM2-SHUTDOWN-FL initialAttributes;
  set EP0QM002.EP0QM2-WAIT-TIME-NBR initialAttributes;
  set EP0QM002.EP0QM2-BTCHRECLMT-NBR initialAttributes;
  set EP0QM002.EP0QM2-MSGBYTELMT-NBR initialAttributes;
  set EP0QM002.EP0QM2-SYNCMSGLMT-NBR initialAttributes;
  set EP0QM002.EP0QM2-QMGR-NM initialAttributes;
  set EP0QM002.EP0QM2-QUEUE1-NM initialAttributes;
  set EP0QM002.EP0QM2-QUEUE2-NM initialAttributes;
  set EP0QM002.EP0QM2-QUEUE3-NM initialAttributes;
  set EP0QM002.EP0QM2-QUEUE4-NM initialAttributes;

   /* ------------------------------------------------------------*/
   /* Change the selection indicator to show the line was viewed.*/
   /* ------------------------------------------------------------*/

  EP0QW01.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] = "*";
                                  /* viewed*/


end // end EP0Q-22000

// Format the data in the map
Function EP0Q-22100()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set EP0QM002 initial; /* M002 input/output area*/

  EP0QW00.XXX-MAP-FMAT-FL = "N"; /* Format the map flag*/

   /* ------------------------------------------------------------*/
   /* Format the map fields from the display storage area.*/
   /* ------------------------------------------------------------*/

  EP0QM002.EP0QM2-SRVR-NM = EP0QW02.EP0QM2-SRVR-NM;
  EP0QM002.EP0QM2-SRVR-TYP-CD = EP0QW02.EP0QM2-SRVR-TYP-CD;
  EP0QM002.EP0QM2-JOB-STAT-CD = EP0QW02.EP0QM2-JOB-STAT-CD;
  EP0QM002.EP0QM2-SHUTDOWN-FL = EP0QW02.EP0QM2-SHUTDOWN-FL;
  EP0QM002.EP0QM2-WAIT-TIME-NBR = EP0QW02.EP0QM2-WAIT-TIME-NBR;
  EP0QM002.EP0QM2-BTCHRECLMT-NBR = EP0QW02.EP0QM2-BTCHRECLMT-NBR;
  EP0QM002.EP0QM2-MSGBYTELMT-NBR = EP0QW02.EP0QM2-MSGBYTELMT-NBR;
  EP0QM002.EP0QM2-SYNCMSGLMT-NBR = EP0QW02.EP0QM2-SYNCMSGLMT-NBR;
  EP0QM002.EP0QM2-QMGR-NM = EP0QW02.EP0QM2-QMGR-NM;
  EP0QM002.EP0QM2-QUEUE1-NM = EP0QW02.EP0QM2-QUEUE1-NM;
  EP0QM002.EP0QM2-QUEUE2-NM = EP0QW02.EP0QM2-QUEUE2-NM;
  EP0QM002.EP0QM2-QUEUE3-NM = EP0QW02.EP0QM2-QUEUE3-NM;
  EP0QM002.EP0QM2-QUEUE4-NM = EP0QW02.EP0QM2-QUEUE4-NM;

end // end EP0Q-22100

// Check change authorization
Function EP0Q-22200()
   /* ------------------------------------------------------------*/
   /* If requested data was found and the user is authorized to*/
   /* change data on the screen, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (EP0QW00.XXX-RQT-DATA-FL == "N" /* Requested data was found*/
   && COMMAREA.CACHGFL == "Y"        /* and user authorized to change*/
   && (EP0QW00.EP0QW-LN-SEL-IND[XXX-INX-FLD-NBR] == "C" || 
  EP0QW00.EP0QW-LN-SEL-IND[XXX-INX-FLD-NBR] == "A"))
                  /* and user entered 'c','a' on the sel field of map1*/

    if (EP0QW00.EP0QW-LN-SEL-IND[XXX-INX-FLD-NBR] == "C")
      set EP0QM002.EP0QM2-SRVR-NM skip, noHighLight;
      if (converseVar.validationMsgNum == 0)
        set EP0QM002.EP0QM2-SRVR-TYP-CD cursor;
      end

    else
      if (EP0QW00.EP0QW-LN-SEL-IND[XXX-INX-FLD-NBR] == "A")
        if (converseVar.validationMsgNum == 0)
          set EP0QM002.EP0QM2-SRVR-NM cursor;
        end
      end
    end

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, protect the modifiable fields on the screen.*/
   /* ------------------------------------------------------------*/

  set EP0QM002.EP0QM2-SRVR-NM skip, noHighLight;
  set EP0QM002.EP0QM2-SRVR-TYP-CD skip, noHighLight;
  set EP0QM002.EP0QM2-SRVR-TYP-CD-DESC skip, noHighLight;
  set EP0QM002.EP0QM2-JOB-STAT-CD skip, noHighLight;
  set EP0QM002.EP0QM2-JOB-STAT-DESC skip, noHighLight;
  set EP0QM002.EP0QM2-SHUTDOWN-FL skip, noHighLight;
  set EP0QM002.EP0QM2-WAIT-TIME-NBR skip, noHighLight;
  set EP0QM002.EP0QM2-BTCHRECLMT-NBR skip, noHighLight;
  set EP0QM002.EP0QM2-MSGBYTELMT-NBR skip, noHighLight;
  set EP0QM002.EP0QM2-SYNCMSGLMT-NBR skip, noHighLight;
  set EP0QM002.EP0QM2-QMGR-NM skip, noHighLight;
  set EP0QM002.EP0QM2-QUEUE1-NM skip, noHighLight;
  set EP0QM002.EP0QM2-QUEUE2-NM skip, noHighLight;
  set EP0QM002.EP0QM2-QUEUE3-NM skip, noHighLight;
  set EP0QM002.EP0QM2-QUEUE4-NM skip, noHighLight;

  /* PKS START 12/13/96*/
  /* SET EP0QM002.EP0QM2-PF9 DARK,AUTOSKIP;*/
  /* SET EP0QM002.EP0QM2-PF12 DARK,AUTOSKIP;*/
  /* PKS END 12/13/96*/
end // end EP0Q-22200

// Check attention identifier
Function EP0Q-23000()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    if (EP0QW00.XXX-RQT-DATA-FL == "Y") /* Request for data pending*/
      set EP0QW02 empty; /* M002 display storage*/
    end

    EP0QW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/
    EP0QW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      EP0QS-TA0050-P(); /* Purge any temporary storage*/

      XSEPS-EXIT(); /* Exit to another application*/

      set EP0QM002.CATOAP cursor, bold; /* Highlight*/

      EP0QW00.XXX-MAP-DSP-CD = "1"; /* Map to be displayed*/

    else

      EPWREC.EPW-TA-LST-LOC = "23000"; /* Message location*/
      converseLib.validationFailed(258); /* PA/PF key not valid with fastpath*/

    end

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* If a PF key transfer requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "EP0QM002"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/

      EP0QW00.XXX-RQT-DATA-FL = "Y"; /* Format the map flag*/
      EP0QW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
      EP0QW00.XXX-MAP-DSP-CD = "1"; /* Map to be displayed*/

      exit stack; /* Exit to display map*/

    end

    EP0QS-TA0050-P(); /* Purge any temporary storage*/

    XSEPS-EXIT(); /* Exit to another application*/

    EP0QW00.XXX-MAP-DSP-CD = "1"; /* Map to be displayed*/

    exit stack; /* Exit to display map*/

  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/
    /* PKS START 12/13/96*/
    /* AND EZEAID NOT PF9             /* and PF9 was not pressed  12/13/96*/
    /* AND EZEAID NOT PF12;           /* and PF12 was not pressed 12/13/96*/
    /* PKS END 12/13/96*/

    EPWREC.EPW-TA-LST-LOC = "23000"; /* Message location*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end

  /* PKS START 12/13/96*/
  /* IF EZEAID IS PF9          /* set all not available*/
  /* OR EZEAID IS PF12;     /* set all available*/
  /* ;*/
  /* IF COMMAREA.CACHGFL NE 'Y'    /* user not authorized to update*/
  /* OR EP0QW00.EP0QW-LN-SEL-IND(XXX-INX-FLD-NBR) NE 'C';*/
  /* /* user entered for viewing*/
  /* MOVE '23000' TO EPWREC.EPW-TA-LST-LOC;/* Message location*/
  /* MOVE 4 TO EZEMNO;              /* PA/PF key pressed is not vali/**/
  /* ;*/
  /* EZEFLO;                 /* exit to display map*/
  /* ;*/
  /* END;*/
  /* END;*/
  /* ;*/
  /* PKS END 12/13/96*/
end // end EP0Q-23000

// Verify data that was entered
Function EP0Q-24000()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    EPWREC.EPW-TA-LST-LOC = "24000"; /* Message location*/
    converseLib.validationFailed(259); /* Enter only with FAST PATH*/
    set EP0QM002.CAITEM cursor, bold; /* Highlight*/

  end

  /* PKS START 12/13/96*/
  /* IF EZEAID IS PF9*/
  /* OR EZEAID IS PF12*/
  /* OR COMMAREA.CACHGFL NE 'Y';      /* user has no authority to update*/
  if (COMMAREA.CACHGFL != "Y") /* user has no authority to update*/
    return;
  end
  /* PKS END 12/13/96*/

   /* ------------------------------------------------------------*/
   /* Verify/Edit the 99 occurences of AVAL-FL and PLT-QTY*/
   /* ------------------------------------------------------------*/

  EP0QW00.EP0QW-DATA-CHG-FL = "N";

  EP0Q-24100(); /* Verify AVAL-FL and PLT-QTY*/

   /* ------------------------------------------------------------*/
   /* If any error was found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end EP0Q-24000

// Verify enterable fields
Function EP0Q-24100()
   /* -------------------------------------------------------------------*/
   /* verify the modifiable fields: AVAL-FL and PLT-QTY*/
   /* -------------------------------------------------------------------*/

  if (EP0QM002.EP0QM2-SRVR-NM == EP0QW02.EP0QM2-SRVR-NM && 
  EP0QM002.EP0QM2-SRVR-TYP-CD == EP0QW02.EP0QM2-SRVR-TYP-CD && 
  EP0QM002.EP0QM2-JOB-STAT-CD == EP0QW02.EP0QM2-JOB-STAT-CD && 
  EP0QM002.EP0QM2-SHUTDOWN-FL == EP0QW02.EP0QM2-SHUTDOWN-FL && 
  EP0QM002.EP0QM2-WAIT-TIME-NBR == EP0QW02.EP0QM2-WAIT-TIME-NBR && 
  EP0QM002.EP0QM2-BTCHRECLMT-NBR == EP0QW02.EP0QM2-BTCHRECLMT-NBR && 
  EP0QM002.EP0QM2-MSGBYTELMT-NBR == EP0QW02.EP0QM2-MSGBYTELMT-NBR && 
  EP0QM002.EP0QM2-SYNCMSGLMT-NBR == EP0QW02.EP0QM2-SYNCMSGLMT-NBR && 
  EP0QM002.EP0QM2-QMGR-NM == EP0QW02.EP0QM2-QMGR-NM && 
  EP0QM002.EP0QM2-QUEUE1-NM == EP0QW02.EP0QM2-QUEUE1-NM && 
  EP0QM002.EP0QM2-QUEUE2-NM == EP0QW02.EP0QM2-QUEUE2-NM && 
  EP0QM002.EP0QM2-QUEUE3-NM == EP0QW02.EP0QM2-QUEUE3-NM && 
  EP0QM002.EP0QM2-QUEUE4-NM == EP0QW02.EP0QM2-QUEUE4-NM)
       /* continue;*/
  else

    if (EP0QM002.EP0QM2-SRVR-NM <= " ")
      converseLib.validationFailed(9); /* cannot be blank*/
      set EP0QM002.EP0QM2-SRVR-NM bold, cursor;
      return;
    end

    if (EP0QM002.EP0QM2-SRVR-NM == EP0QW02.EP0QM2-SRVR-NM && 
    EP0QW00.EP0QW-LN-SEL-IND[XXX-INX-FLD-NBR] == "A")
      converseLib.validationFailed(468); /* duplicate key*/
      set EP0QM002.EP0QM2-SRVR-NM bold, cursor;
      return;
    end

    if (EP0QW02.EP0QM2-SRVR-TYP-CD == "TI")
      EP0QM002.EP0QM2-SRVR-TYP-CD-DESC = "TRANSFER IN ";
    else
      if (EP0QW02.EP0QM2-SRVR-TYP-CD == "TO")
        EP0QM002.EP0QM2-SRVR-TYP-CD-DESC = "TRANSFER OUT";
      else
        converseLib.validationFailed(457); /* "TI" or "TO"*/
        set EP0QM002.EP0QM2-SRVR-TYP-CD bold, cursor;
        return;
      end
    end

    if (EP0QM002.EP0QM2-JOB-STAT-CD == "A")
      EP0QM002.EP0QM2-JOB-STAT-DESC = "ACTIVE  ";
    else
      if (EP0QM002.EP0QM2-JOB-STAT-CD == "I")
        EP0QM002.EP0QM2-JOB-STAT-DESC = "INACTIVE";
      else
        converseLib.validationFailed(10); /* "A"ctive or "I"nactive*/
        set EP0QM002.EP0QM2-JOB-STAT-CD bold, cursor;
        return;
      end
    end

    if (EP0QM002.EP0QM2-SHUTDOWN-FL != "Y" && 
    EP0QM002.EP0QM2-SHUTDOWN-FL != "N")
      converseLib.validationFailed(465); /* "Y" or "N"*/
      set EP0QM002.EP0QM2-SHUTDOWN-FL bold, cursor;
      return;
    end

    if (EP0QM002.EP0QM2-SRVR-TYP-CD == "TI")
      if (EP0QM002.EP0QM2-BTCHRECLMT-NBR > 0)
        converseLib.validationFailed(466);
        set EP0QM002.EP0QM2-BTCHRECLMT-NBR bold, cursor;
        return;
      end
      if (EP0QM002.EP0QM2-MSGBYTELMT-NBR > 0)
        converseLib.validationFailed(466);
        set EP0QM002.EP0QM2-MSGBYTELMT-NBR bold, cursor;
        return;
      end
      if (EP0QM002.EP0QM2-SYNCMSGLMT-NBR == 0)
        converseLib.validationFailed(9);
        set EP0QM002.EP0QM2-SYNCMSGLMT-NBR bold, cursor;
        return;
      end
      if (EP0QM002.EP0QM2-WAIT-TIME-NBR == 0)
        converseLib.validationFailed(9);
        set EP0QM002.EP0QM2-WAIT-TIME-NBR bold, cursor;
        return;
      end
    else
      if (EP0QM002.EP0QM2-BTCHRECLMT-NBR == 0)
        converseLib.validationFailed(9);
        set EP0QM002.EP0QM2-BTCHRECLMT-NBR bold, cursor;
        return;
      end
      if (EP0QM002.EP0QM2-MSGBYTELMT-NBR == 0)
        converseLib.validationFailed(9);
        set EP0QM002.EP0QM2-MSGBYTELMT-NBR bold, cursor;
        return;
      end
      if (EP0QM002.EP0QM2-SYNCMSGLMT-NBR == 0)
        converseLib.validationFailed(9);
        set EP0QM002.EP0QM2-SYNCMSGLMT-NBR bold, cursor;
        return;
      end
      if (EP0QM002.EP0QM2-WAIT-TIME-NBR > 0)
        converseLib.validationFailed(467);
        set EP0QM002.EP0QM2-WAIT-TIME-NBR bold, cursor;
        return;
      end
    end

    if (EP0QM002.EP0QM2-QMGR-NM <= " ")
      converseLib.validationFailed(9);
      set EP0QM002.EP0QM2-QMGR-NM bold, cursor;
      return;
    end

    if (EP0QM002.EP0QM2-QUEUE1-NM <= " ")
      converseLib.validationFailed(9);
      set EP0QM002.EP0QM2-QUEUE1-NM bold, cursor;
      return;
    end


    if (converseVar.validationMsgNum == 0)
      EP0QW00.EP0QW-DATA-CHG-FL = "Y";
    end
  end

end // end EP0Q-24100

// Process valid input request
Function EP0Q-25000()

  if (EP0QW00.EP0QW-LN-SEL-IND[XXX-INX-FLD-NBR] == "D"
   && COMMAREA.CACHGFL == "Y")
    EP0QW00.EP0QW-DATA-CHG-FL = "Y";
  end
  if (EP0QW00.EP0QW-DATA-CHG-FL == "Y") /* data changed*/
    EP0Q-25300(); /* move data to vmxpct01*/
  else
    EP0Q-25400(); /* search for next selection*/
    return;
  end

   /* ------------------------------------------------------------*/
   /* Obtain the current date and time.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain date and time*/

  if (EP0QW00.EP0QW-LN-SEL-IND[XXX-INX-FLD-NBR] == "A")
    VMXPCT01.ZZ-SDT = XX0XW01.XX0XWDAT;
    VMXPCT01.ZZ-SETUP-HHMM = XX0XW01.XX0XWTIM;
    VMXPCT01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
    VMXPCT01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;
    VMXPCT01.ZZ-CHNG-CNT = 0;
    EP0QS-VMXPCT01-A(); /* INSERT the table row*/
  else
    if (EP0QW00.EP0QW-LN-SEL-IND[XXX-INX-FLD-NBR] == "C")
      VMXPCT01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
      VMXPCT01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;
      EP0QS-VMXPCT01-U(); /* Update the table row*/
    else
      EP0QS-VMXPCT01-D(); /* Delete the table row*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Commit all changes and refresh the data to be displayed.*/
   /* ------------------------------------------------------------*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit(); /* Commit all changes*/

  if (EP0QW00.EP0QW-LN-SEL-IND[XXX-INX-FLD-NBR] == "A")
    EPWREC.EPW-TA-LST-LOC = "25000"; /* Message location*/
    EPWREC.EPW-MSG-NO = 458; /* Table INSERT was completed*/
    EP0QW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/
    EP0QW00.EP0QW-LN-SEL-IND[XXX-INX-FLD-NBR] = "S";
  else
    if (EP0QW00.EP0QW-LN-SEL-IND[XXX-INX-FLD-NBR] == "C")
      EPWREC.EPW-TA-LST-LOC = "25000"; /* Message location*/
      EPWREC.EPW-MSG-NO = 459; /* Table update was completed*/
      EP0QW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/
    else
      EPWREC.EPW-TA-LST-LOC = "25000"; /* Message location*/
      EPWREC.EPW-MSG-NO = 456; /* Table Delete was completed*/
      EP0QW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/
      EP0QW00.EP0QW-LN-SEL-IND[XXX-INX-FLD-NBR] = "S";
    end
  end


end // end EP0Q-25000

// format VREPLC03 from map data
Function EP0Q-25300()

  VMXPCT01.MQS-JOB-ID = EP0QM002.EP0QM2-SRVR-NM;
  VMXPCT01.MQS-SRVR-TYP-CD = EP0QM002.EP0QM2-SRVR-TYP-CD;
  VMXPCT01.MQS-JOB-STAT-CD = EP0QM002.EP0QM2-JOB-STAT-CD;
  VMXPCT01.MQS-SHUTDOWN-FL = EP0QM002.EP0QM2-SHUTDOWN-FL;
  VMXPCT01.MQS-WAIT-TIME-NBR = EP0QM002.EP0QM2-WAIT-TIME-NBR;
  VMXPCT01.MQS-BTCHRECLMT-NBR = EP0QM002.EP0QM2-BTCHRECLMT-NBR;
  VMXPCT01.MQS-MSGBYTELMT-NBR = EP0QM002.EP0QM2-MSGBYTELMT-NBR;
  VMXPCT01.MQS-SYNCMSGLMT-NBR = EP0QM002.EP0QM2-SYNCMSGLMT-NBR;
  VMXPCT01.MQS-QMGR-NM = EP0QM002.EP0QM2-QMGR-NM;
  VMXPCT01.MQS-QUEUE1-NM = EP0QM002.EP0QM2-QUEUE1-NM;
  VMXPCT01.MQS-QUEUE2-NM = EP0QM002.EP0QM2-QUEUE2-NM;
  VMXPCT01.MQS-QUEUE3-NM = EP0QM002.EP0QM2-QUEUE3-NM;
  VMXPCT01.MQS-QUEUE4-NM = EP0QM002.EP0QM2-QUEUE4-NM;

end // end EP0Q-25300

// Search for next selection
Function EP0Q-25400()
   /* ------------------------------------------------------------*/
   /* Determine if another line was selected for viewing.*/
   /* ------------------------------------------------------------*/

  EP0QW00.XXX-INX-FLD-NBR = 1; /* initialize line-index*/
  EP0QW00.EP0QW-ROW-SEL-FL = "N"; /* row not selected*/
  while (EP0QW00.XXX-INX-FLD-NBR <= EP0QW00.XXX-INX-LMT-NBR
   /* until screen not full*/
   && EP0QW00.EP0QW-ROW-SEL-FL == "N")
                                  /* and 's' or 'c' not found*/

    if (EP0QW01.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] == "S"
     || EP0QW01.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] == "C"
     || EP0QW01.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] == "D"
     || EP0QW01.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] == "A")
      EP0QW00.EP0QW-ROW-SEL-FL = "Y";
    else
      EP0QW00.XXX-INX-FLD-NBR = EP0QW00.XXX-INX-FLD-NBR + 1;
    end
  end
  if (EP0QW00.EP0QW-ROW-SEL-FL == "Y") /* Line was selected*/

    EP0QM002.EP0QM2-SRVR-TYP-CD = EP0QW01.EP0QM1-SRVR-TYP-CD[XXX-INX-FLD-NBR];

    EP0QM002.EP0QM2-SRVR-NM = EP0QW01.EP0QM1-SRVR-NM[XXX-INX-FLD-NBR];

    EP0QW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/

  else

    EP0QW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/
    EP0QW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
    EP0QW00.XXX-MAP-DSP-CD = "1"; /* Map to be displayed*/

  end


end // end EP0Q-25400

// Add page to temporary storage
Function EP0QS-TA0050-A()
   /* ------------------------------------------------------------*/
   /* Add the next page to the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  EP0QW01.XXX-TEMP-STG-LNTH = EP0QW00.XXX-TEMP-STG-LNTH;
                                   /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (EP0QW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Add page*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, initialize the storage area and*/
   /* indicators to be used and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set EP0QW01 empty; /* M001 display storage*/

    EP0QW00.XXX-HI-PAGE-NBR = TA5REC.TA5TSQIX; /* Highest page number*/

    TA5REC.TA5TSQIX = 0; /* Clear last page number*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/

  EPWREC.EPW-TA-LST-LOC = "TA0050A"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(10); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = EPWREC.EPW-TA-LST-LOC; /* Message location*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0QS-TA0050-A

// Purge any temporary storage
Function EP0QS-TA0050-P()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set EP0QW01 empty; /* M001 display storage*/

  EP0QW00.XXX-PAGE-UPD-FL = "N"; /* Page update flag*/

  TA5REC.TA5TSQIX = 0; /* Displayed page number*/
  EP0QW00.XXX-HI-PAGE-NBR = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (EP0QW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Purge storage*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/

  EPWREC.EPW-TA-LST-LOC = "TA0050P"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(10); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = EPWREC.EPW-TA-LST-LOC; /* Message location*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0QS-TA0050-P

// Read temporary storage page
Function EP0QS-TA0050-R()
   /* ------------------------------------------------------------*/
   /* Read the next page from the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  EP0QW01.XXX-TEMP-STG-LNTH = EP0QW00.XXX-TEMP-STG-LNTH;
                                   /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = EP0QW00.XXX-CURR-PAGE-NBR; /* Page number*/

  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (EP0QW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Read page*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/

  EPWREC.EPW-TA-LST-LOC = "TA0050R"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(10); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = EPWREC.EPW-TA-LST-LOC; /* Message location*/
  TA1REC.TA1LOC = "READ TEMPORARY STORAGE PAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0QS-TA0050-R

// Update temporary storage page
Function EP0QS-TA0050-U()
   /* ------------------------------------------------------------*/
   /* Update the page in the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (EP0QW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update page*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/

  EPWREC.EPW-TA-LST-LOC = "TA0050U"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(10); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = EPWREC.EPW-TA-LST-LOC; /* Message location*/
  TA1REC.TA1LOC = "UPDATE TEMPORARY STORAGE PAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0QS-TA0050-U

// Update DSTLOC.VREPLC03
Function EP0QS-VMXPCT01-A()
   /* ------------------------------------------------------------*/
   /* Update the specified row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VMXPCT01" ("A ", SQLCA, VMXPCT01) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
    /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      EP0QW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/

      EPWREC.EPW-TA-LST-LOC = "VMXPCT01A"; /* Message location*/
      EPWREC.EPW-MSG-NO = 12; /* Data was updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  EPWREC.EPW-TA-LST-LOC = "VMXPCT01A"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EPWREC.EPW-TA-LST-LOC; /* Message location*/
  TA1REC.TA1LOC = "INSERT THE TABLE ROW"; /* Description*/
  TA1REC.TA1DBASE = "DTECH   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMXPCT01"; /* Table view name*/
   /* MOVE VMXPCT01.SY2KEY TO TA1REC.TA1TBLKE;/* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0QS-VMXPCT01-A

// Close cursor 1
Function EP0QS-VMXPCT01-C1()
   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "VMXPCT01" ("C1", SQLCA, VMXPCT01) {isNoRefresh = yes, isExternal = yes};
  end /* Close cursor*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  EPWREC.EPW-TA-LST-LOC = "MXPCT01C1"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(10); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EPWREC.EPW-TA-LST-LOC; /* Message location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DTECH   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMXPCT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0QS-VMXPCT01-C1

// Update DSTLOC.VREPLC03
Function EP0QS-VMXPCT01-D()
   /* ------------------------------------------------------------*/
   /* Update the specified row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VMXPCT01" ("D ", SQLCA, VMXPCT01) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
    /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      EP0QW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/

      EPWREC.EPW-TA-LST-LOC = "VMXPCT01D"; /* Message location*/
      EPWREC.EPW-MSG-NO = 12; /* Data was updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  EPWREC.EPW-TA-LST-LOC = "VMXPCT01D"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EPWREC.EPW-TA-LST-LOC; /* Message location*/
  TA1REC.TA1LOC = "DELETE THE TABLE ROW"; /* Description*/
  TA1REC.TA1DBASE = "DTECH   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMXPCT01"; /* Table view name*/
   /* MOVE VMXPCT01.SY2KEY TO TA1REC.TA1TBLKE;/* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0QS-VMXPCT01-D

// Fetch next row in cursor 1
Function EP0QS-VMXPCT01-N1()
   /* ------------------------------------------------------------*/
   /* Fetch the next row that was selected from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VMXPCT01" ("N1", SQLCA, VMXPCT01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
    /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      EP0QW00.EP0QW-MXPCT-EOF-FL = "Y"; /* End of cursor*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  EPWREC.EPW-TA-LST-LOC = "MXPCT01N1"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EPWREC.EPW-TA-LST-LOC; /* Message location*/
  TA1REC.TA1LOC = "FETCH NEXT ROW IN CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DTECH   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMXPCT01"; /* Table view name*/
   /* MOVE VMXPCT01.SY2KEY TO TA1REC.TA1TBLKE;/* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0QS-VMXPCT01-N1

// Select the table row
Function EP0QS-VMXPCT01-S()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VMXPCT01" ("S ", SQLCA, VMXPCT01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  EPWREC.EPW-TA-LST-LOC = "MXPCT01S"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EPWREC.EPW-TA-LST-LOC; /* Message location*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW"; /* Description*/
  TA1REC.TA1DBASE = "DTECH   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMXPCT01"; /* Table view name*/
   /* MOVE Vmxpct01.SY1KEY TO TA1REC.TA1TBLKE;/* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0QS-VMXPCT01-S

// Select table rowcursor 1
Function EP0QS-VMXPCT01-S1()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VMXPCT01" ("S1", SQLCA, VMXPCT01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/

  EPWREC.EPW-TA-LST-LOC = "MXPCT01S1"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EPWREC.EPW-TA-LST-LOC; /* Message location*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW"; /* Description*/
  TA1REC.TA1DBASE = "DTECH   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMXPCT01"; /* Table view name*/
   /* MOVE VMXPCT01.SY2KEY TO TA1REC.TA1TBLKE;/* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0QS-VMXPCT01-S1

// Update DSTLOC.VREPLC03
Function EP0QS-VMXPCT01-U()
   /* ------------------------------------------------------------*/
   /* Update the specified row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VMXPCT01" ("U ", SQLCA, VMXPCT01) {isNoRefresh = yes, isExternal = yes};
  end /* Update row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
    /* If row not found, indicate the data was updated by another.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback(); /* Roll back all changes*/

      EP0QW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/

      EPWREC.EPW-TA-LST-LOC = "VMXPCT01U"; /* Message location*/
      EPWREC.EPW-MSG-NO = 12; /* Data was updated by another*/

      exit stack; /* Exit to display map*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  EPWREC.EPW-TA-LST-LOC = "VMXPCT01U"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EPWREC.EPW-TA-LST-LOC; /* Message location*/
  TA1REC.TA1LOC = "UPDATE THE TABLE ROW"; /* Description*/
  TA1REC.TA1DBASE = "DTECH   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMXPCT01"; /* Table view name*/
   /* MOVE VMXPCT01.SY2KEY TO TA1REC.TA1TBLKE;/* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0QS-VMXPCT01-U

//*** RECORD=EP0QW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record EP0QW00 type basicRecord
  10 XXX-RQT-DATA-FL XXX-RQT-DATA-FL ; 
  10 XXX-MAP-FMAT-FL XXX-MAP-FMAT-FL ; 
  10 XXX-MAP-DSP-CD XXX-MAP-DSP-CD ; 
  10 XXX-TEMP-STG-LNTH XXX-TEMP-STG-LNTH ; 
  10 XXX-INX-LMT-NBR XXX-INX-LMT-NBR ; 
  10 XXX-INX-FLD-NBR XXX-INX-FLD-NBR ; 
  10 XXX-CURR-PAGE-NBR XXX-CURR-PAGE-NBR ; 
  10 XXX-HI-PAGE-NBR XXX-HI-PAGE-NBR ; 
  10 XXX-PAGE-UPD-FL XXX-PAGE-UPD-FL ; 
  10 EP0QW-MXPCT-EOF-FL EP0QW-MXPCT-EOF-FL ; 
  10 EP0QW-MXPCT-INX EP0QW-MXPCT-INX ; 
  10 EP0QW-DATA-CHG-FL EP0QW-DATA-CHG-FL ; 
  10 EP0QW-ROW-SEL-FL EP0QW-ROW-SEL-FL ; 
  10 EP0QW-LN-SEL-IND EP0QW-LN-SEL-IND [12] ; 
  10 EP0QW-KEY1 EP0QW-KEY1 ; 
    15 EP0QW-KEY1-CHAR EP0QW-KEY1-CHAR [2] ; 
  10 EP0QW-KEY2 EP0QW-KEY2 ; 
    15 EP0QW-KEY2-CHAR EP0QW-KEY2-CHAR [8] ; 
  10 EP0QW-DONE EP0QW-DONE ; 
  10 EP0QW-KEY-INDEX EP0QW-KEY-INDEX ; 
end // end EP0QW00

//*** RECORD=EP0QW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record EP0QW01 type basicRecord
  5 XXX-TEMP-STG-LNTH XXX-TEMP-STG-LNTH ; 
  5 * char(142) ; 
    10 EP0QM1-SRVR-TYP-CD-SRCH EP0QM1-SRVR-TYP-CD-SRCH ; 
    10 EP0QM1-SRVR-NM-SRCH EP0QM1-SRVR-NM-SRCH ; 
    10 XXX-LN-SEL-IND XXX-LN-SEL-IND [12] ; 
    10 EP0QM1-SRVR-TYP-CD EP0QM1-SRVR-TYP-CD [12] ; 
    10 EP0QM1-SRVR-NM EP0QM1-SRVR-NM [12] ; 
end // end EP0QW01

//*** RECORD=EP0QW02 ****
// ------------------------
// Map 002 display storage.
// ------------------------
// ***********************
Record EP0QW02 type basicRecord
  10 EP0QM2-SRVR-NM EP0QM2-SRVR-NM ; 
  10 EP0QM2-SRVR-TYP-CD EP0QM2-SRVR-TYP-CD ; 
  10 EP0QM2-SRVR-TYP-CD-DESC EP0QM2-SRVR-TYP-CD-DESC ; 
  10 EP0QM2-JOB-STAT-CD EP0QM2-JOB-STAT-CD ; 
  10 EP0QM2-JOB-STAT-DESC EP0QM2-JOB-STAT-DESC ; 
  10 EP0QM2-SHUTDOWN-FL EP0QM2-SHUTDOWN-FL ; 
  10 EP0QM2-BTCHRECLMT-NBR EP0QM2-BTCHRECLMT-NBR ; 
  10 EP0QM2-MSGBYTELMT-NBR EP0QM2-MSGBYTELMT-NBR ; 
  10 EP0QM2-SYNCMSGLMT-NBR EP0QM2-SYNCMSGLMT-NBR ; 
  10 EP0QM2-WAIT-TIME-NBR EP0QM2-WAIT-TIME-NBR ; 
  10 EP0QM2-QMGR-NM EP0QM2-QMGR-NM ; 
  10 EP0QM2-QUEUE1-NM EP0QM2-QUEUE1-NM ; 
  10 EP0QM2-QUEUE2-NM EP0QM2-QUEUE2-NM ; 
  10 EP0QM2-QUEUE3-NM EP0QM2-QUEUE3-NM ; 
  10 EP0QM2-QUEUE4-NM EP0QM2-QUEUE4-NM ; 
end // end EP0QW02

//*** RECORD=VMXPCT01 ****
// ****************  program control table ********************
// TABLE NAME:          PROGRAM CONTROL TABLE
// 
// DB2 TABLE:           DTECH.VMXPCT01
// 
// COPYLIB MEMBER:      DMXPCT01
// 
// KEY TO DB2 TABLE:    mqs_job_id
// 
// 
// 
//  MAINTENANCE LOG:
// 
//  DATE      NAME       COMMENTS
//  --------  ---------  ------------------------------------
//  05-13-98  psharm     created definition for new view
// ************************************************************
// ************************
Record VMXPCT01 type basicRecord
  10 MQS-JOB-ID MQS-JOB-ID ; 
  10 MQS-SRVR-TYP-CD MQS-SRVR-TYP-CD ; 
  10 MQS-JOB-STAT-CD MQS-JOB-STAT-CD ; 
  10 MQS-SHUTDOWN-FL MQS-SHUTDOWN-FL ; 
  10 MQS-QMGR-NM MQS-QMGR-NM ; 
  10 MQS-QUEUE1-NM MQS-QUEUE1-NM ; 
  10 MQS-QUEUE2-NM MQS-QUEUE2-NM ; 
  10 MQS-QUEUE3-NM MQS-QUEUE3-NM ; 
  10 MQS-QUEUE4-NM MQS-QUEUE4-NM ; 
  10 MQS-WAIT-TIME-NBR MQS-WAIT-TIME-NBR ; 
  10 MQS-BTCHRECLMT-NBR MQS-BTCHRECLMT-NBR ; 
  10 MQS-MSGBYTELMT-NBR MQS-MSGBYTELMT-NBR ; 
  10 MQS-SYNCMSGLMT-NBR MQS-SYNCMSGLMT-NBR ; 
  10 ZZ-SDT ZZ-SDT ; 
  10 ZZ-SETUP-HHMM ZZ-SETUP-HHMM ; 
  10 ZZ-CHNG-DT ZZ-CHNG-DT ; 
  10 ZZ-CHNG-HHMM ZZ-CHNG-HHMM ; 
  10 ZZ-CHNG-CNT ZZ-CHNG-CNT ; 
end // end VMXPCT01

DataItem EP0QM1-SRVR-NM char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EP0QM1-SRVR-NM-SRCH char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EP0QM1-SRVR-TYP-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EP0QM1-SRVR-TYP-CD-SRCH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EP0QM2-BTCHRECLMT-NBR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem EP0QM2-JOB-STAT-CD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EP0QM2-JOB-STAT-DESC char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EP0QM2-MSGBYTELMT-NBR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem EP0QM2-QMGR-NM char(48)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EP0QM2-QUEUE1-NM char(48)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EP0QM2-QUEUE2-NM char(48)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EP0QM2-QUEUE3-NM char(48)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EP0QM2-QUEUE4-NM char(48)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EP0QM2-SHUTDOWN-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EP0QM2-SRVR-NM char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EP0QM2-SRVR-TYP-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EP0QM2-SRVR-TYP-CD-DESC char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EP0QM2-SYNCMSGLMT-NBR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem EP0QM2-WAIT-TIME-NBR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem EP0QW-DATA-CHG-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EP0QW-DONE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EP0QW-KEY-INDEX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem EP0QW-KEY1 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EP0QW-KEY1-CHAR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EP0QW-KEY2 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EP0QW-KEY2-CHAR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EP0QW-LN-SEL-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EP0QW-MXPCT-EOF-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EP0QW-MXPCT-INX char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EP0QW-ROW-SEL-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem MQS-BTCHRECLMT-NBR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem MQS-JOB-ID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem MQS-JOB-STAT-CD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem MQS-MSGBYTELMT-NBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem MQS-QMGR-NM char(48)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem MQS-QUEUE1-NM char(48)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem MQS-QUEUE2-NM char(48)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem MQS-QUEUE3-NM char(48)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem MQS-QUEUE4-NM char(48)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem MQS-SHUTDOWN-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem MQS-SRVR-TYP-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem MQS-SYNCMSGLMT-NBR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem MQS-WAIT-TIME-NBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

