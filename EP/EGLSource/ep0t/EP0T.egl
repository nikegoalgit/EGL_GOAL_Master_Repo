package ep0t;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import ep.common.*;
import ta.common.*;
//*** PROGRAM=EP0T ****
// This application mainains the dcms order type transaltion
// table.
// 
// "**" on order-type and/or sales-office-id indicate wild
// card values.
// 
// The screen allows specification of search criteria to be
// used to list the rows in the table.
// The list is displayed and the user may page backward and
// forward to view the information.
// 
// If the user has sufficient security to change the data, the
// modifiable fields remain unprotected.  Otherwise, they are
// protected from modification by the user.
// 
// If any data is modified, it is verified and, if complete and
// correct, the table row is updated with the changed data.
// The screen is redisplayed to the user, indicating that the
// update is completed.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE    USERID  DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// AR2DCMS  07/16/99  OVAZQU  New application.
// *********************
Program EP0T type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "EP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  EP0TW00 EP0TW00; // record
  EP0TW01 EP0TW01; // record
  EPWREC EPWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VORDRT01 VORDRT01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XOBTBL {deleteAfterUse = yes}; // table
  use XGPTBL; // table
  use XOTTBL {deleteAfterUse = yes}; // table
  use XSOTBL {deleteAfterUse = yes}; // table
  use EP0TM.EP0TM001,  // forms
      EP0TM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPEP-00000: XPEP-00000();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set EP0TM001 initial; /* M001 input/output*/
    set EP0TW00 empty; /* Work storage area*/
    set EP0TW01 empty; /* M001 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set XX0XW01 empty; /* Date/time parms*/

    EP0TW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/
    EP0TW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    EP0TW00.XXX-TEMP-STG-LNTH = 550; /* Temporary storage length*/
    EP0TW00.XXX-INX-LMT-NBR = 13; /* Number of lines on a page*/


     /* ------------------------------------------------------------*/
     /* Initialize any fields passed from another application.*/
     /* ------------------------------------------------------------*/
    if (COMMAREA.CAITEM > " ") /* Data was passed*/
      EP0TM001.EP0TM-XOB-BASE-OT-CD = COMMAREA.CAITEM;
      COMMAREA.CAITEM = " "; /* Clear passed data*/
    end


     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto EP0T-0000; /* Converse the main process*/


    EP0T-0000: EP0T-0000();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto EP0T-0000; /* Converse the main process*/


  end // end main
end // end EP0T

// Main process to display a map
Function EP0T-0000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


  EP0T-1000(); /* Obtain the data to display*/

  EP0T-2000(); /* Format and display the map*/

  EP0T-3000(); /* Check attention identifier*/

  EP0T-4000(); /* Verify the entered data*/

  EP0T-5000(); /* Process valid input request*/


end // end EP0T-0000

// Obtain the data to display
Function EP0T-1000()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  if (EP0TW00.XXX-RQT-DATA-FL != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum > 0) /* or an error was found*/

    return; /* Return to previous process*/
  end


   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/
  if (EP0TW00.XXX-MSG-NBR == 0) /* No message to display*/
    EP0TW00.XXX-CURR-PAGE-NBR = 1; /* Page number to display*/
  end


   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/
  EP0TS-TA0050-P(); /* Purge any temporary storage*/

  EP0TW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
  EP0TW00.EP0TW-REC-NBR = 0; /* reset record counter*/


   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/
  set VORDRT01 empty; /* Clear row storage area*/
  VORDRT01.XOB-BASE-OT-CD = EP0TM001.EP0TM-XOB-BASE-OT-CD; /* Table key*/
  VORDRT01.XGP-GPC-CD = EP0TM001.EP0TM-XGP-GPC-CD;

  EP0TS-VORDRT01-S1(); /* Select set and open cursor*/


   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/
  set EP0TW01 empty; /* Clear ts page area*/
  EP0TW00.XXX-INX-FLD-NBR = 1; /* Display line index*/
  EP0TW00.EP0TW-ORDRT-EOF-FL = "N"; /* End of cursor flag*/

  while (EP0TW00.EP0TW-ORDRT-EOF-FL == "N") /* Until end of cursor*/

    EP0TS-VORDRT01-N1(); /* Fetch next row in cursor*/

    if (EP0TW00.EP0TW-ORDRT-EOF-FL == "N") /* Not end of cursor*/

      /* ------------------------------------------------------------*/
      /* Save the data from the table row in display storage.*/
      /* ------------------------------------------------------------*/
      EP0TW01.XOB-BASE-OT-CD[XXX-INX-FLD-NBR] = VORDRT01.XOB-BASE-OT-CD;
      EP0TW01.XGP-GPC-CD[XXX-INX-FLD-NBR] = VORDRT01.XGP-GPC-CD; /**/
      EP0TW01.XOT-ORD-TYP-CD[XXX-INX-FLD-NBR] = VORDRT01.XOT-ORD-TYP-CD;
      EP0TW01.XSO-SLS-OFC-ID[XXX-INX-FLD-NBR] = VORDRT01.XSO-SLS-OFC-ID;
      EP0TW01.DCMS-ORD-TYP-CD[XXX-INX-FLD-NBR] = VORDRT01.DCMS-ORD-TYP-CD;
      EP0TW01.DCMS-ORD-TYP-DESC[XXX-INX-FLD-NBR] = VORDRT01.DCMS-ORD-TYP-DESC;
      EP0TW01.XXX-STAT[XXX-INX-FLD-NBR] = VORDRT01.XXX-STAT;

      /* ------------------------------------------------------------*/
      /* Increment the line index to the next row in display storage.*/
      /* ------------------------------------------------------------*/
      EP0TW00.XXX-INX-FLD-NBR = EP0TW00.XXX-INX-FLD-NBR + 1;
                                   /* Increment line index*/
      EP0TW00.EP0TW-REC-NBR = EP0TW00.EP0TW-REC-NBR + 1;
                                   /* Increment record number*/

      /* ------------------------------------------------------------*/
      /* If the page is full, add the page to the storage queue.*/
      /* ------------------------------------------------------------*/
      if (EP0TW00.XXX-INX-FLD-NBR > EP0TW00.XXX-INX-LMT-NBR) /* Page is full*/

        EP0TS-TA0050-A(); /* Add page to temporary storage*/

        EP0TW00.XXX-INX-FLD-NBR = 1; /* Display line index*/
      end
    end
  end


   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* (need empty lines for add's).*/
   /* ------------------------------------------------------------*/
  EP0TS-TA0050-A(); /* Add page to temporary storage*/


   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/
  EP0TS-VORDRT01-C1(); /* Close selected set cursor*/


   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/
  if (EP0TW00.EP0TW-REC-NBR == 0) /* No data found*/
    EP0TW00.XXX-MSG-LOC-ID = "1000"; /* Message location*/
    set EP0TM001.EP0TM-XOB-BASE-OT-CD cursor, bold;
    set EP0TM001.EP0TM-XGP-GPC-CD bold;
    converseLib.validationFailed(44); /* No data was found to display*/

    exit stack; /* Exit to display map*/
  end


   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/
  EP0TW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/


end // end EP0T-1000

// Format and converse the map
Function EP0T-2000()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    EP0TW00.XXX-MSG-NBR = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If the map must be formatted, format the data in the map.*/
   /* ------------------------------------------------------------*/
  if (EP0TW00.XXX-MAP-FMAT-FL == "Y") /* Map must be formatted*/
    EP0T-2100(); /* Format the data in the map*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  EP0TM001.XXX-CURR-DT = VGVar.currentShortGregorianDate; /* Current date*/
  EP0TM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  EP0TM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  if (EP0TW00.XXX-MSG-NBR != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ")   /* or message text*/

    if (EP0TW00.XXX-MSG-NBR != 0) /* Message to display*/
      if (EP0TW00.XXX-MSG-NBR == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(EP0TW00.XXX-MSG-NBR);
      end /* Message number*/
    else
      EP0TM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
    end

    EP0TM001.XXX-MSG-LOC-ID = EP0TW00.XXX-MSG-LOC-ID;
    set EP0TM001 alarm; /* Indicate sound alarm*/
  end

  converse EP0TM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  EP0TW00.XXX-MSG-LOC-ID = " "; /* Message location*/
  EP0TW00.XXX-MSG-NBR = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = EP0TM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = EP0TM001.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* Reset modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  EP0TW00.XXX-INX-FLD-NBR = 1; /* Initialize line index*/

  while (EP0TW00.XXX-INX-FLD-NBR <= EP0TW00.XXX-INX-LMT-NBR)
                                   /* Until end of screen*/
    if (EP0TM001.XOB-BASE-OT-CD[XXX-INX-FLD-NBR] > " " /* data on line*/
     || EP0TM001.XGP-GPC-CD[XXX-INX-FLD-NBR] > " ")   
      set EP0TM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] normal; /* Sel ind*/
      set EP0TM001.XOB-BASE-OT-CD[XXX-INX-FLD-NBR] normal;
      set EP0TM001.XGP-GPC-CD[XXX-INX-FLD-NBR] normal;
      set EP0TM001.XOT-ORD-TYP-CD[XXX-INX-FLD-NBR] normal;
      set EP0TM001.XSO-SLS-OFC-ID[XXX-INX-FLD-NBR] normal;
      set EP0TM001.DCMS-ORD-TYP-CD[XXX-INX-FLD-NBR] normal;
      set EP0TM001.DCMS-ORD-TYP-DESC[XXX-INX-FLD-NBR] normal;
      set EP0TM001.XXX-STAT[XXX-INX-FLD-NBR] normal;
    end

    EP0TW00.XXX-INX-FLD-NBR = EP0TW00.XXX-INX-FLD-NBR + 1;
                                   /* Increment line index*/
  end

  set EP0TM001.CATOAP normal; /* TO application*/
  set EP0TM001.CAITEM normal; /* Application data*/


end // end EP0T-2000

// Format the data in the map
Function EP0T-2100()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set EP0TM001 initial; /* M001 input/output area*/

  EP0TW00.XXX-MAP-FMAT-FL = "N"; /* Format the map flag*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/
  if (EP0TW00.XXX-HI-PAGE-NBR > 0) /* Pages were formatted*/

    if (EP0TW00.XXX-CURR-PAGE-NBR != TA5REC.TA5TSQIX)
                                   /* Desired page not current*/
      /* ------------------------------------------------------------*/
      /* If the current page has been changed, update the page in*/
      /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/
      if (EP0TW00.XXX-PAGE-UPD-FL == "Y") /* Current page was changed*/

        EP0TS-TA0050-U(); /* Update temporary storage page*/

        EP0TW00.XXX-PAGE-UPD-FL = "N"; /* Page update flag*/
      end

      /* ------------------------------------------------------------*/
      /* If the desired page number is greater than the highest page*/
      /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/
      if (EP0TW00.XXX-CURR-PAGE-NBR > EP0TW00.XXX-HI-PAGE-NBR)
                                   /* Desired greater highest*/
        EP0TW00.XXX-CURR-PAGE-NBR = EP0TW00.XXX-HI-PAGE-NBR;
                                   /* Default to highest*/
      end

      EP0TS-TA0050-R(); /* Read temporary storage page*/
    end

    /* ------------------------------------------------------------*/
    /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/
    set EP0TM001.XXX-CURR-PAGE-DESC skip; /* "PAGE" literal*/
    EP0TM001.XXX-CURR-PAGE-NBR = EP0TW00.XXX-CURR-PAGE-NBR;
                                   /* Current page*/
    set EP0TM001.XXX-HI-PAGE-DESC skip; /* "OF" literal*/
    EP0TM001.XXX-HI-PAGE-NBR = EP0TW00.XXX-HI-PAGE-NBR;
                                   /* Highest page*/

  end

   /* ------------------------------------------------------------*/
   /* Format the map fields from the display storage area.*/
   /* ------------------------------------------------------------*/
  EP0TM001.EP0TM-XOB-BASE-OT-CD = EP0TW00.EP0TW-XOB-BASE-OT-CD;
  EP0TM001.EP0TM-XGP-GPC-CD = EP0TW00.EP0TW-XGP-GPC-CD;

  EP0TW00.XXX-INX-FLD-NBR = 1; /* Initialize line index*/

  while (EP0TW00.XXX-INX-FLD-NBR <= EP0TW00.XXX-INX-LMT-NBR)
                                   /* Until screen is full*/
    if (EP0TW01.XOB-BASE-OT-CD[XXX-INX-FLD-NBR] > " "
     || EP0TW01.XGP-GPC-CD[XXX-INX-FLD-NBR] > " ")
      if (EP0TW00.XXX-INX-FLD-NBR == 1) /* First select field*/
        set EP0TM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] cursor, normal;
      else
        set EP0TM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] normal;
      end
    end

    EP0TM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] = EP0TW01.XXX-LN-SEL-IND[XXX-INX-FLD-NBR];
    EP0TM001.XOB-BASE-OT-CD[XXX-INX-FLD-NBR] = EP0TW01.XOB-BASE-OT-CD[XXX-INX-FLD-NBR];
    EP0TM001.XGP-GPC-CD[XXX-INX-FLD-NBR] = EP0TW01.XGP-GPC-CD[XXX-INX-FLD-NBR];
    EP0TM001.XOT-ORD-TYP-CD[XXX-INX-FLD-NBR] = EP0TW01.XOT-ORD-TYP-CD[XXX-INX-FLD-NBR];
    EP0TM001.XSO-SLS-OFC-ID[XXX-INX-FLD-NBR] = EP0TW01.XSO-SLS-OFC-ID[XXX-INX-FLD-NBR];
    EP0TM001.DCMS-ORD-TYP-CD[XXX-INX-FLD-NBR] = EP0TW01.DCMS-ORD-TYP-CD[XXX-INX-FLD-NBR];
    EP0TM001.DCMS-ORD-TYP-DESC[XXX-INX-FLD-NBR] = EP0TW01.DCMS-ORD-TYP-DESC[XXX-INX-FLD-NBR];
    EP0TM001.XXX-STAT[XXX-INX-FLD-NBR] = EP0TW01.XXX-STAT[XXX-INX-FLD-NBR];

    EP0TW00.XXX-INX-FLD-NBR = EP0TW00.XXX-INX-FLD-NBR + 1;
                                   /* Increment line index*/
  end


end // end EP0T-2100

// Check attention identifier
Function EP0T-3000()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pa2) /* Pa2 was pressed*/
    if (EP0TW00.XXX-RQT-DATA-FL == "Y") /* Request for data pending*/
      set EP0TW01 empty; /* M001 display storage*/
    end
    EP0TW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/
    EP0TW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/
  end


   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  if (EP0TM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      EP0TS-TA0050-P(); /* Purge any temporary storage*/
      EP0TS-EXIT(); /* Exit to another application*/

      set EP0TM001.CATOAP cursor, bold; /* Highlight*/
    else
      EP0TW00.XXX-MSG-LOC-ID = "3000"; /* Message location*/
      converseLib.validationFailed(18); /* PA/PF key may not be used*/
    end

    exit stack; /* Exit to display map*/
  end


   /* ------------------------------------------------------------*/
   /* If a PF key transfer requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "EP0TM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "EP0A"; /* System Menu*/
    end

    EP0TS-TA0050-P(); /* Purge any temporary storage*/

    EP0TS-EXIT(); /* Exit to another application*/

    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf9   /* and PF9 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf12) /* and PF12 was not pressed*/

    EP0TW00.XXX-MSG-LOC-ID = "3000"; /* Message location*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/
  end


end // end EP0T-3000

// Verify data that was entered
Function EP0T-4000()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  if (EP0TM001.CAITEM > " ") /* Application data was entered*/
    EP0TW00.XXX-MSG-LOC-ID = "14000"; /* Message location*/
    converseLib.validationFailed(9); /* Enter only with FAST PATH*/
    set EP0TM001.CATOAP cursor, bold; /* Highlight*/
  end


   /* ------------------------------------------------------------*/
   /* If scroll requested, determine if any other field changed.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8 /* or scroll forward request*/
   || converseVar.eventKey is pf12) /* or delete request*/

    EP0T-4100(); /* Highlight other changed fields*/
  end


    /* ------------------------------------------------------------*/
    /* Determine whether a valid request to scroll was entered.*/
    /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    EP0T-4200(); /* Verify scroll request*/
  end


      /* ------------------------------------------------------------*/
      /* Check for new argument data entered,*/
      /* if so no other data is allowed*/
      /* ------------------------------------------------------------*/
  if (EP0TM001.EP0TM-XOB-BASE-OT-CD == 
  EP0TW00.EP0TW-XOB-BASE-OT-CD
   && EP0TM001.EP0TM-XGP-GPC-CD == 
  EP0TW00.EP0TW-XGP-GPC-CD)
     /* continue*/
  else

    EP0T-4300(); /* Verify no other changes*/
  end


   /* ------------------------------------------------------------*/
   /* If any error was found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum > 0) /* Error was found*/

    exit stack; /* Exit to display map*/
  end


    /* ------------------------------------------------------------*/
    /* Determine if valid delete request*/
    /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf12) /* Delete request*/

    EP0T-4400(); /* Verify delete request*/
  end


      /* ------------------------------------------------------------*/
      /* Check for pop up window.*/
      /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf9) /* Pop-up request*/

    EP0T-4600(); /* Verify pop-up request*/

    exit stack; /* Exit to display map*/
  end


      /* ------------------------------------------------------------*/
      /* <Enter>, verify any modifiable data that was changed.*/
      /* ------------------------------------------------------------*/
  if (converseVar.eventKey is enter) /* <Enter> - change request*/

    if (EP0TM001.EP0TM-XOB-BASE-OT-CD == 
    EP0TW00.EP0TW-XOB-BASE-OT-CD
     && EP0TM001.EP0TM-XGP-GPC-CD == 
    EP0TW00.EP0TW-XGP-GPC-CD) /* no new data requested*/

      EP0TW00.XXX-INX-FLD-NBR = EP0TW00.XXX-INX-LMT-NBR;
      while (EP0TW00.XXX-INX-FLD-NBR > 0) /* Until end of lines*/

        EP0T-4800(); /* Verify data in the line*/

        EP0TW00.XXX-INX-FLD-NBR = EP0TW00.XXX-INX-FLD-NBR - 1;
      end
    else

      EP0T-4900(); /* Verify new argument key data*/
    end
  end


   /* ------------------------------------------------------------*/
   /* If any error was found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum > 0) /* Error was found*/

    exit stack; /* Exit to display map*/
  end


end // end EP0T-4000

// Highlight other changed fields
Function EP0T-4100()
   /* ------------------------------------------------------------*/
   /* If a modifiable field was changed, indicate that field may*/
   /* not be changed when key is changed or a pf key is pressed.*/
   /* ------------------------------------------------------------*/
  EP0TW00.XXX-INX-FLD-NBR = EP0TW00.XXX-INX-LMT-NBR; /* Line index*/

  while (EP0TW00.XXX-INX-FLD-NBR > 0) /* Until end of lines*/

    if (EP0TM001.XOB-BASE-OT-CD[XXX-INX-FLD-NBR] != 
    EP0TW01.XOB-BASE-OT-CD[XXX-INX-FLD-NBR])
      EP0TW00.XXX-MSG-LOC-ID = "4100"; /* Message location*/
      converseLib.validationFailed(61); /* Update valid only with <enter>*/
      set EP0TM001.XOB-BASE-OT-CD[XXX-INX-FLD-NBR] cursor, bold;
    end

    if (EP0TM001.XGP-GPC-CD[XXX-INX-FLD-NBR] != 
    EP0TW01.XGP-GPC-CD[XXX-INX-FLD-NBR])
      EP0TW00.XXX-MSG-LOC-ID = "4100"; /* Message location*/
      converseLib.validationFailed(61); /* Update valid only with <enter>*/
      set EP0TM001.XGP-GPC-CD[XXX-INX-FLD-NBR] cursor, bold;
    end

    if (EP0TM001.XOT-ORD-TYP-CD[XXX-INX-FLD-NBR] != 
    EP0TW01.XOT-ORD-TYP-CD[XXX-INX-FLD-NBR])
      EP0TW00.XXX-MSG-LOC-ID = "4100"; /* Message location*/
      converseLib.validationFailed(61); /* Update valid only with <enter>*/
      set EP0TM001.XOT-ORD-TYP-CD[XXX-INX-FLD-NBR] cursor, bold;
    end

    if (EP0TM001.XSO-SLS-OFC-ID[XXX-INX-FLD-NBR] != 
    EP0TW01.XSO-SLS-OFC-ID[XXX-INX-FLD-NBR])
      EP0TW00.XXX-MSG-LOC-ID = "4100"; /* Message location*/
      converseLib.validationFailed(61); /* Update valid only with <enter>*/
      set EP0TM001.XSO-SLS-OFC-ID[XXX-INX-FLD-NBR] cursor, bold;
    end

    if (EP0TM001.DCMS-ORD-TYP-CD[XXX-INX-FLD-NBR] != 
    EP0TW01.DCMS-ORD-TYP-CD[XXX-INX-FLD-NBR])
      EP0TW00.XXX-MSG-LOC-ID = "4100"; /* Message location*/
      converseLib.validationFailed(61); /* Update valid only with <enter>*/
      set EP0TM001.DCMS-ORD-TYP-CD[XXX-INX-FLD-NBR] cursor, bold;
    end

    if (EP0TM001.DCMS-ORD-TYP-DESC[XXX-INX-FLD-NBR] != 
    EP0TW01.DCMS-ORD-TYP-DESC[XXX-INX-FLD-NBR])
      EP0TW00.XXX-MSG-LOC-ID = "4100"; /* Message location*/
      converseLib.validationFailed(61); /* Update valid only with <enter>*/
      set EP0TM001.DCMS-ORD-TYP-DESC[XXX-INX-FLD-NBR] cursor, bold;
    end

    if (EP0TM001.XXX-STAT[XXX-INX-FLD-NBR] != 
    EP0TW01.XXX-STAT[XXX-INX-FLD-NBR])
      EP0TW00.XXX-MSG-LOC-ID = "4100"; /* Message location*/
      converseLib.validationFailed(61); /* Update valid only with <enter>*/
      set EP0TM001.XXX-STAT[XXX-INX-FLD-NBR] cursor, bold;
    end

    if (EP0TM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] == " ")
      /* continue*/
    else
      if (EP0TM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] == "D"
       && converseVar.eventKey is pf12)
        /* continue*/
      else
        EP0TW00.XXX-MSG-LOC-ID = "4100"; /* Message location*/
        converseLib.validationFailed(11); /* Invalid data*/
        set EP0TM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] cursor, bold;
      end
    end

    EP0TW00.XXX-INX-FLD-NBR = EP0TW00.XXX-INX-FLD-NBR - 1;
  end

  if (EP0TM001.EP0TM-XOB-BASE-OT-CD != 
  EP0TW00.EP0TW-XOB-BASE-OT-CD)
    EP0TW00.XXX-MSG-LOC-ID = "4100"; /* Message location*/
    converseLib.validationFailed(61); /* Update valid only with <enter>*/
    set EP0TM001.EP0TM-XOB-BASE-OT-CD cursor, bold;
  end

  if (EP0TM001.EP0TM-XGP-GPC-CD != 
  EP0TW00.EP0TW-XGP-GPC-CD)
    EP0TW00.XXX-MSG-LOC-ID = "4100"; /* Message location*/
    converseLib.validationFailed(61); /* Update valid only with <enter>*/
    set EP0TM001.EP0TM-XGP-GPC-CD cursor, bold;
  end


end // end EP0T-4100

// Verify scroll request
Function EP0T-4200()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && EP0TW00.XXX-CURR-PAGE-NBR < 2) /* and no previous pages*/

    EP0TW00.XXX-MSG-LOC-ID = "4200"; /* Message location*/
    converseLib.validationFailed(7); /* No previous page to display*/
  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && EP0TW00.XXX-CURR-PAGE-NBR >= EP0TW00.XXX-HI-PAGE-NBR)
                                   /* and no more pages*/

    EP0TW00.XXX-MSG-LOC-ID = "4200"; /* Message location*/
    converseLib.validationFailed(8); /* No more pages to display*/
  end


end // end EP0T-4200

Function EP0T-4300()
   /* ------------------------------------------------------------*/
   /* No data should have been entered on screen's body*/
   /* ------------------------------------------------------------*/
  EP0TW00.EP0TW-ENTRY-FOUND-FL = "N";
  EP0TW00.XXX-INX-FLD-NBR = EP0TW00.XXX-INX-LMT-NBR;

  while (EP0TW00.XXX-INX-FLD-NBR > 0) /* Until end of lines*/

    if (EP0TM001.XXX-STAT[XXX-INX-FLD-NBR] != 
    EP0TW01.XXX-STAT[XXX-INX-FLD-NBR])
      EP0TW00.EP0TW-ENTRY-FOUND-FL = "Y";
      set EP0TM001.XXX-STAT[XXX-INX-FLD-NBR] cursor, bold;
    end

    if (EP0TM001.DCMS-ORD-TYP-DESC[XXX-INX-FLD-NBR] != 
    EP0TW01.DCMS-ORD-TYP-DESC[XXX-INX-FLD-NBR])
      EP0TW00.EP0TW-ENTRY-FOUND-FL = "Y";
      set EP0TM001.DCMS-ORD-TYP-DESC[XXX-INX-FLD-NBR] cursor, bold;
    end

    if (EP0TM001.DCMS-ORD-TYP-CD[XXX-INX-FLD-NBR] != 
    EP0TW01.DCMS-ORD-TYP-CD[XXX-INX-FLD-NBR])
      EP0TW00.EP0TW-ENTRY-FOUND-FL = "Y";
      set EP0TM001.DCMS-ORD-TYP-CD[XXX-INX-FLD-NBR] cursor, bold;
    end

    if (EP0TM001.XSO-SLS-OFC-ID[XXX-INX-FLD-NBR] != 
    EP0TW01.XSO-SLS-OFC-ID[XXX-INX-FLD-NBR])
      EP0TW00.EP0TW-ENTRY-FOUND-FL = "Y";
      set EP0TM001.XSO-SLS-OFC-ID[XXX-INX-FLD-NBR] cursor, bold;
    end

    if (EP0TM001.XOT-ORD-TYP-CD[XXX-INX-FLD-NBR] != 
    EP0TW01.XOT-ORD-TYP-CD[XXX-INX-FLD-NBR])
      EP0TW00.EP0TW-ENTRY-FOUND-FL = "Y";
      set EP0TM001.XOT-ORD-TYP-CD[XXX-INX-FLD-NBR] cursor, bold;
    end

    if (EP0TM001.XGP-GPC-CD[XXX-INX-FLD-NBR] != 
    EP0TW01.XGP-GPC-CD[XXX-INX-FLD-NBR])
      EP0TW00.EP0TW-ENTRY-FOUND-FL = "Y";
      set EP0TM001.XGP-GPC-CD[XXX-INX-FLD-NBR] cursor, bold;
    end

    if (EP0TM001.XOB-BASE-OT-CD[XXX-INX-FLD-NBR] != 
    EP0TW01.XOB-BASE-OT-CD[XXX-INX-FLD-NBR])
      EP0TW00.EP0TW-ENTRY-FOUND-FL = "Y";
      set EP0TM001.XOB-BASE-OT-CD[XXX-INX-FLD-NBR] cursor, bold;
    end

    if (EP0TM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] != " ")
      EP0TW00.EP0TW-ENTRY-FOUND-FL = "Y";
      set EP0TM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] cursor, bold;
    end

    EP0TW00.XXX-INX-FLD-NBR = EP0TW00.XXX-INX-FLD-NBR - 1;
  end

  if (EP0TW00.EP0TW-ENTRY-FOUND-FL == "Y")
    EP0TW00.XXX-MSG-LOC-ID = "4300"; /* Message location*/
    converseLib.validationFailed(79); /* no change allowed*/
  end


end // end EP0T-4300

Function EP0T-4400()
   /* ------------------------------------------------------------*/
   /* Determine if delete request is valid*/
   /* ------------------------------------------------------------*/

  EP0TW00.EP0TW-ENTRY-FOUND-FL = "N";
  EP0TW00.XXX-INX-FLD-NBR = EP0TW00.XXX-INX-LMT-NBR;

  while (EP0TW00.XXX-INX-FLD-NBR > 0) /* edit all lines on screen*/

    if (EP0TM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] != " ")
      if (EP0TM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] == "D")
        EP0TW00.EP0TW-ENTRY-FOUND-FL = "Y";
      else
        EP0TW00.XXX-MSG-LOC-ID = "4400"; /* Message location*/
        converseLib.validationFailed(39); /* must be 'd' for delete*/
        set EP0TM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] cursor, bold;
      end
    end

    EP0TW00.XXX-INX-FLD-NBR = EP0TW00.XXX-INX-FLD-NBR - 1; /* decr line indx*/
  end


  if (EP0TW00.EP0TW-ENTRY-FOUND-FL == "N")
    EP0TW00.XXX-MSG-LOC-ID = "4400"; /* Message location*/
    converseLib.validationFailed(39); /* must be 'd' for delete*/
  end


end // end EP0T-4400

// Display corporate table lists
Function EP0T-4600()
      /* ------------------------------------------------------------*/
      /* Check for pop up window.*/
      /* ------------------------------------------------------------*/
  EP0TW00.EP0TW-ENTRY-FOUND-FL = "N";

  if (EP0TM001.EP0TM-XOB-BASE-OT-CD == "?"
   || EP0TM001.EP0TM-XGP-GPC-CD == "?")

    EP0TW00.EP0TW-ENTRY-FOUND-FL = "Y";

    if (EP0TM001.EP0TM-XOB-BASE-OT-CD == "?")
      EP0T-4620(); /* Pop up window*/
      if (XX0XW02.XX0XWPIX > 0) /* A selection was made*/
        EP0TM001.EP0TM-XOB-BASE-OT-CD = XOBTBL.XOBCD[XX0XWPIX];
      end
    end

    if (EP0TM001.EP0TM-XGP-GPC-CD == "?")
      EP0T-4640(); /* Pop up window*/
      if (XX0XW02.XX0XWPIX > 0) /* A selection was made*/
        EP0TM001.EP0TM-XGP-GPC-CD = XGPTBL.XGPCD[XX0XWPIX];
      end
    end

  else

    EP0TW00.XXX-INX-FLD-NBR = 1; /* Line index*/
    while (EP0TW00.XXX-INX-FLD-NBR <= EP0TW00.XXX-INX-LMT-NBR)

      if (EP0TM001.XOB-BASE-OT-CD[XXX-INX-FLD-NBR] == "?"
       || EP0TM001.XGP-GPC-CD[XXX-INX-FLD-NBR] == "?"
       || EP0TM001.XOT-ORD-TYP-CD[XXX-INX-FLD-NBR] == "?"
       || EP0TM001.XSO-SLS-OFC-ID[XXX-INX-FLD-NBR] == "?")

        EP0TW00.EP0TW-ENTRY-FOUND-FL = "Y";

        if (EP0TM001.XOB-BASE-OT-CD[XXX-INX-FLD-NBR] == "?")
          EP0TW00.EP0TW-ENTRY-FOUND-FL = "Y";
          EP0T-4620(); /* Pop up window*/
          if (XX0XW02.XX0XWPIX > 0) /* A selection was made*/
            EP0TM001.XOB-BASE-OT-CD[XXX-INX-FLD-NBR] = XOBTBL.XOBCD[XX0XWPIX];
          end
        end

        if (EP0TM001.XGP-GPC-CD[XXX-INX-FLD-NBR] == "?")
          EP0TW00.EP0TW-ENTRY-FOUND-FL = "Y";
          EP0T-4640(); /* Pop up window*/
          if (XX0XW02.XX0XWPIX > 0) /* A selection was made*/
            EP0TM001.XGP-GPC-CD[XXX-INX-FLD-NBR] = XGPTBL.XGPCD[XX0XWPIX];
          end
        end

        if (EP0TM001.XOT-ORD-TYP-CD[XXX-INX-FLD-NBR] == "?")
          EP0TW00.EP0TW-ENTRY-FOUND-FL = "Y";
          EP0T-4660(); /* Pop up window*/
          if (XX0XW02.XX0XWPIX > 0) /* A selection was made*/
            EP0TM001.XOT-ORD-TYP-CD[XXX-INX-FLD-NBR] = XOTTBL.XOTCD[XX0XWPIX];
          end
        end

        if (EP0TM001.XSO-SLS-OFC-ID[XXX-INX-FLD-NBR] == "?")
          EP0TW00.EP0TW-ENTRY-FOUND-FL = "Y";
          EP0T-4680(); /* Pop up window*/
          if (XX0XW02.XX0XWPIX > 0) /* A selection was made*/
            EP0TM001.XSO-SLS-OFC-ID[XXX-INX-FLD-NBR] = XSOTBL.XSOCD[XX0XWPIX];
          end
        end
      end

      EP0TW00.XXX-INX-FLD-NBR = EP0TW00.XXX-INX-FLD-NBR + 1;
    end
  end

  if (EP0TW00.EP0TW-ENTRY-FOUND-FL == "Y")
    converseLib.clearScreen();
     /* Clear screen before display*/
    EPWREC.XXXERRID = "4600"; /* Message location*/
    converseLib.validationFailed(392); /* Request <enter> to process*/
  end


end // end EP0T-4600

// Display base order type codes
Function EP0T-4620()
   /* ------------------------------------------------------------*/
   /* display the list of base order type codes*/
   /* ------------------------------------------------------------*/
  XPXX001(); /* Window initialization*/

  XX0XW02.XX0XWHDR = "ORDER TYPE CODES"; /* Heading*/

  while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
    XPXOB01(); /* Display the list*/
  end


end // end EP0T-4620

// Display gpc codes
Function EP0T-4640()
   /* ------------------------------------------------------------*/
   /* display the gpc codes*/
   /* ------------------------------------------------------------*/
  XPXX001(); /* Window initialization*/

  XX0XW02.XX0XWHDR = "GPC CODES"; /* Heading*/

  while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
    XPXGP01(); /* Display the list*/
  end


end // end EP0T-4640

// Display system order type code
Function EP0T-4660()
   /* ------------------------------------------------------------*/
   /* display the list of system order type codes*/
   /* ------------------------------------------------------------*/
  XPXX001(); /* Window initialization*/

  XX0XW02.XX0XWHDR = "SYSTEM ORDER TYPE CODES"; /* Heading*/

  while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
    XPXOT01(); /* Display the list*/
  end


end // end EP0T-4660

// Display sales office id's
Function EP0T-4680()
   /* ------------------------------------------------------------*/
   /* display the list of sales office ID's*/
   /* ------------------------------------------------------------*/
  XPXX001(); /* Window initialization*/

  XX0XW02.XX0XWHDR = "SALES OFFICE IDS"; /* Heading*/

  while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
    XPXSO01(); /* Display the list*/
  end


end // end EP0T-4680

// Verify data in the line
Function EP0T-4800()
   /* ------------------------------------------------------------*/
   /* Edit all enterable fields*/
   /* ------------------------------------------------------------*/
  if (EP0TM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] == " " /* Select ind*/
   && EP0TM001.XOB-BASE-OT-CD[XXX-INX-FLD-NBR] ==     
  EP0TW01.XOB-BASE-OT-CD[XXX-INX-FLD-NBR]             
   && EP0TM001.XGP-GPC-CD[XXX-INX-FLD-NBR] ==         
  EP0TW01.XGP-GPC-CD[XXX-INX-FLD-NBR]                 
   && EP0TM001.XOT-ORD-TYP-CD[XXX-INX-FLD-NBR] ==     
  EP0TW01.XOT-ORD-TYP-CD[XXX-INX-FLD-NBR]             
   && EP0TM001.XSO-SLS-OFC-ID[XXX-INX-FLD-NBR] ==     
  EP0TW01.XSO-SLS-OFC-ID[XXX-INX-FLD-NBR]             
   && EP0TM001.DCMS-ORD-TYP-CD[XXX-INX-FLD-NBR] ==    
  EP0TW01.DCMS-ORD-TYP-CD[XXX-INX-FLD-NBR]            
   && EP0TM001.DCMS-ORD-TYP-DESC[XXX-INX-FLD-NBR] ==  
  EP0TW01.DCMS-ORD-TYP-DESC[XXX-INX-FLD-NBR]          
   && EP0TM001.XXX-STAT[XXX-INX-FLD-NBR] ==           
  EP0TW01.XXX-STAT[XXX-INX-FLD-NBR])                 

    return; /* No changes on this line, go back*/
  end


  if (EP0TM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] != " ") /* Select ind*/
    EP0TW00.XXX-MSG-LOC-ID = "4800"; /* Message location*/
    converseLib.validationFailed(40); /* Must be blank*/
    set EP0TM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] cursor, bold;
  end


  if (EP0TM001.XOB-BASE-OT-CD[XXX-INX-FLD-NBR] == 
  EP0TW01.XOB-BASE-OT-CD[XXX-INX-FLD-NBR]) /* no change*/
     /* continue*/
  else
    if (EP0TW01.XOB-BASE-OT-CD[XXX-INX-FLD-NBR] == " ") /* didn't exist*/
      if (EP0TM001.XOB-BASE-OT-CD[XXX-INX-FLD-NBR] == "**"
       || EP0TM001.XOB-BASE-OT-CD[XXX-INX-FLD-NBR] in XOBTBL.XOBCD)
         /* continue*/
      else
        EP0TW00.XXX-MSG-LOC-ID = "4800"; /* Message location*/
        converseLib.validationFailed(11); /* Invalid data*/
        set EP0TM001.XOB-BASE-OT-CD[XXX-INX-FLD-NBR] cursor, bold;
      end
    else
      EP0TW00.XXX-MSG-LOC-ID = "4800"; /* Message location*/
      converseLib.validationFailed(62); /* No update allowed on this field*/
      set EP0TM001.XOB-BASE-OT-CD[XXX-INX-FLD-NBR] cursor, bold;
    end
  end


  if (EP0TM001.XGP-GPC-CD[XXX-INX-FLD-NBR] == 
  EP0TW01.XGP-GPC-CD[XXX-INX-FLD-NBR]) /* no change*/
     /* continue*/
  else
    if (EP0TW01.XGP-GPC-CD[XXX-INX-FLD-NBR] == " ") /* didn't exist*/
      if (EP0TM001.XGP-GPC-CD[XXX-INX-FLD-NBR] in XGPTBL.XGPCD)
         /* continue*/
      else
        EP0TW00.XXX-MSG-LOC-ID = "4800"; /* Message location*/
        converseLib.validationFailed(11); /* Invalid data*/
        set EP0TM001.XGP-GPC-CD[XXX-INX-FLD-NBR] cursor, bold;
      end
    else
      EP0TW00.XXX-MSG-LOC-ID = "4800"; /* Message location*/
      converseLib.validationFailed(62); /* No update allowed on this field*/
      set EP0TM001.XGP-GPC-CD[XXX-INX-FLD-NBR] cursor, bold;
    end
  end


  if (EP0TM001.XOT-ORD-TYP-CD[XXX-INX-FLD-NBR] == 
  EP0TW01.XOT-ORD-TYP-CD[XXX-INX-FLD-NBR]) /* no change*/
     /* continue*/
  else
    if (EP0TW01.XOT-ORD-TYP-CD[XXX-INX-FLD-NBR] == " ") /* didn't exist*/
      if (EP0TM001.XOT-ORD-TYP-CD[XXX-INX-FLD-NBR] == "**"
       || EP0TM001.XOT-ORD-TYP-CD[XXX-INX-FLD-NBR] in XOTTBL.XOTCD)
         /* continue*/
      else
        EP0TW00.XXX-MSG-LOC-ID = "4800"; /* Message location*/
        converseLib.validationFailed(11); /* Invalid data*/
        set EP0TM001.XOT-ORD-TYP-CD[XXX-INX-FLD-NBR] cursor, bold;
      end
    else
      EP0TW00.XXX-MSG-LOC-ID = "4800"; /* Message location*/
      converseLib.validationFailed(62); /* No update allowed on this field*/
      set EP0TM001.XOT-ORD-TYP-CD[XXX-INX-FLD-NBR] cursor, bold;
    end
  end


  if (EP0TM001.XSO-SLS-OFC-ID[XXX-INX-FLD-NBR] == 
  EP0TW01.XSO-SLS-OFC-ID[XXX-INX-FLD-NBR]) /* no change*/
     /* continue*/
  else
    if (EP0TW01.XSO-SLS-OFC-ID[XXX-INX-FLD-NBR] == " ") /* didn't exist*/
      if (EP0TM001.XSO-SLS-OFC-ID[XXX-INX-FLD-NBR] == "**"
       || EP0TM001.XSO-SLS-OFC-ID[XXX-INX-FLD-NBR] in XSOTBL.XSOCD)
         /* continue*/
      else
        EP0TW00.XXX-MSG-LOC-ID = "4800"; /* Message location*/
        converseLib.validationFailed(11); /* Invalid*/
        set EP0TM001.XSO-SLS-OFC-ID[XXX-INX-FLD-NBR] cursor, bold;
      end
    else
      EP0TW00.XXX-MSG-LOC-ID = "4800"; /* Message location*/
      converseLib.validationFailed(62); /* No update allowed on this field*/
      set EP0TM001.XSO-SLS-OFC-ID[XXX-INX-FLD-NBR] cursor, bold;
    end
  end


  if (EP0TM001.DCMS-ORD-TYP-CD[XXX-INX-FLD-NBR] == "?"
   || EP0TM001.DCMS-ORD-TYP-CD[XXX-INX-FLD-NBR] == "**")
    EP0TW00.XXX-MSG-LOC-ID = "4800"; /* Message location*/
    converseLib.validationFailed(11); /* Invalid*/
    set EP0TM001.DCMS-ORD-TYP-CD[XXX-INX-FLD-NBR] cursor, bold;
  end


  if (EP0TM001.DCMS-ORD-TYP-DESC[XXX-INX-FLD-NBR] == "?"
   || EP0TM001.DCMS-ORD-TYP-DESC[XXX-INX-FLD-NBR] == "**")
    EP0TW00.XXX-MSG-LOC-ID = "4800"; /* Message location*/
    converseLib.validationFailed(11); /* Invalid*/
    set EP0TM001.DCMS-ORD-TYP-DESC[XXX-INX-FLD-NBR] cursor, bold;
  end


  if (EP0TM001.XXX-STAT[XXX-INX-FLD-NBR] == 
  EP0TW01.XXX-STAT[XXX-INX-FLD-NBR]) /* no change*/
     /* continue*/
  else
    if (EP0TM001.XXX-STAT[XXX-INX-FLD-NBR] == "A"
     || EP0TM001.XXX-STAT[XXX-INX-FLD-NBR] == "I")
       /* continue*/
    else
      EP0TW00.XXX-MSG-LOC-ID = "4800"; /* Message location*/
      converseLib.validationFailed(10); /* Invalid status cd*/
      set EP0TM001.XXX-STAT[XXX-INX-FLD-NBR] cursor, bold;
    end
  end


  if (EP0TM001.XOB-BASE-OT-CD[XXX-INX-FLD-NBR] == "**"
   && EP0TM001.XOT-ORD-TYP-CD[XXX-INX-FLD-NBR] == "**")
    EP0TW00.XXX-MSG-LOC-ID = "4800"; /* Message location*/
    converseLib.validationFailed(11); /* Invalid data*/
    set EP0TM001.XOB-BASE-OT-CD[XXX-INX-FLD-NBR] cursor, bold;
    set EP0TM001.XOT-ORD-TYP-CD[XXX-INX-FLD-NBR] bold;
  end


  if (EP0TM001.XOB-BASE-OT-CD[XXX-INX-FLD-NBR] > " ") /* data on line*/
    if (EP0TM001.XGP-GPC-CD[XXX-INX-FLD-NBR] == " ")
      EP0TW00.XXX-MSG-LOC-ID = "4800"; /* Message location*/
      converseLib.validationFailed(9); /* Required data*/
      set EP0TM001.XGP-GPC-CD[XXX-INX-FLD-NBR] cursor, bold;
    end
    if (EP0TM001.XOT-ORD-TYP-CD[XXX-INX-FLD-NBR] == "  ")
      EP0TW00.XXX-MSG-LOC-ID = "4800"; /* Message location*/
      converseLib.validationFailed(9); /* Required data*/
      set EP0TM001.XOT-ORD-TYP-CD[XXX-INX-FLD-NBR] cursor, bold;
    end
    if (EP0TM001.XSO-SLS-OFC-ID[XXX-INX-FLD-NBR] == " ")
      EP0TW00.XXX-MSG-LOC-ID = "4800"; /* Message location*/
      converseLib.validationFailed(9); /* Required data*/
      set EP0TM001.XSO-SLS-OFC-ID[XXX-INX-FLD-NBR] cursor, bold;
    end
    if (EP0TM001.DCMS-ORD-TYP-CD[XXX-INX-FLD-NBR] == " ")
      EP0TW00.XXX-MSG-LOC-ID = "4800"; /* Message location*/
      converseLib.validationFailed(9); /* cannot be blank*/
      set EP0TM001.DCMS-ORD-TYP-CD[XXX-INX-FLD-NBR] cursor, bold;
    end
    if (EP0TM001.DCMS-ORD-TYP-DESC[XXX-INX-FLD-NBR] == " ")
      EP0TW00.XXX-MSG-LOC-ID = "4800"; /* Message location*/
      converseLib.validationFailed(9); /* cannot be blank*/
      set EP0TM001.DCMS-ORD-TYP-DESC[XXX-INX-FLD-NBR] cursor, bold;
    end
    if (EP0TM001.XXX-STAT[XXX-INX-FLD-NBR] == " ")
      EP0TW00.XXX-MSG-LOC-ID = "4800"; /* Message location*/
      converseLib.validationFailed(9); /* cannot be blank*/
      set EP0TM001.XXX-STAT[XXX-INX-FLD-NBR] cursor, bold;
    end
  end


end // end EP0T-4800

// Edit new argument key data
Function EP0T-4900()
   /* ------------------------------------------------------------*/
   /* Edit argument key for new data to be displayed*/
   /* ------------------------------------------------------------*/
  if (EP0TM001.EP0TM-XOB-BASE-OT-CD == " "
   && EP0TM001.EP0TM-XGP-GPC-CD == " ")
    return; /* this is ok, return*/
  end


  if (EP0TM001.EP0TM-XOB-BASE-OT-CD == "  ")
    EP0TW00.XXX-MSG-LOC-ID = "4900"; /* Message location*/
    converseLib.validationFailed(9); /* Required data*/
    set EP0TM001.EP0TM-XOB-BASE-OT-CD cursor, bold;
  else
    if (EP0TM001.EP0TM-XOB-BASE-OT-CD == "**")
       /* continue*/
    else
      if (EP0TM001.EP0TM-XOB-BASE-OT-CD in XOBTBL.XOBCD)
          /* continue*/
      else
        EP0TW00.XXX-MSG-LOC-ID = "4900"; /* Message location*/
        converseLib.validationFailed(11); /* Invalid data*/
        set EP0TM001.EP0TM-XOB-BASE-OT-CD cursor, bold;
      end
    end
  end


  if (EP0TM001.EP0TM-XGP-GPC-CD == "  ")
    EP0TW00.XXX-MSG-LOC-ID = "4900"; /* Message location*/
    converseLib.validationFailed(9); /* Required data*/
    set EP0TM001.EP0TM-XGP-GPC-CD cursor, bold;
  else
    if (EP0TM001.EP0TM-XGP-GPC-CD in XGPTBL.XGPCD)
          /* continue*/
    else
      EP0TW00.XXX-MSG-LOC-ID = "4900"; /* Message location*/
      converseLib.validationFailed(11); /* Invalid data*/
      set EP0TM001.EP0TM-XGP-GPC-CD cursor, bold;
    end
  end


end // end EP0T-4900

// Process valid input request
Function EP0T-5000()
   /* ------------------------------------------------------------*/
   /* If request for restore, set flags and return*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf11) /* Reset requested*/
    EP0TW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/
    EP0TW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    return; /* Return to previous process*/
  end


   /* ------------------------------------------------------------*/
   /* If scroll backward was requested, decrement the page number.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    EP0TW00.XXX-CURR-PAGE-NBR = EP0TW00.XXX-CURR-PAGE-NBR - 1;
    EP0TW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    return; /* Return to previous process*/
  end


   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, increment the page number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    EP0TW00.XXX-CURR-PAGE-NBR = EP0TW00.XXX-CURR-PAGE-NBR + 1;
    EP0TW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    return; /* Return to previous process*/
  end


   /* ------------------------------------------------------------*/
   /* Process delete requests*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf12) /* Delete*/
    EP0TW00.XXX-INX-FLD-NBR = 1; /* Initialize line index*/
    while (EP0TW00.XXX-INX-FLD-NBR <= EP0TW00.XXX-INX-LMT-NBR)

      if (EP0TM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] == "D") /* Delete*/

        EP0T-5200(); /* Process valid delete request*/
      end
      EP0TW00.XXX-INX-FLD-NBR = EP0TW00.XXX-INX-FLD-NBR + 1;
    end

    if (converseVar.validationMsgNum == 0) /* No errors found*/
      EP0TW00.XXX-INX-FLD-NBR = 1; /* Initialize line index*/
      while (EP0TW00.XXX-INX-FLD-NBR <= EP0TW00.XXX-INX-LMT-NBR)

        if (EP0TM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] == "D") /* Delete*/
          EP0TM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] = " ";
          EP0TM001.XOB-BASE-OT-CD[XXX-INX-FLD-NBR] = " ";
          EP0TM001.XGP-GPC-CD[XXX-INX-FLD-NBR] = " ";
          EP0TM001.XOT-ORD-TYP-CD[XXX-INX-FLD-NBR] = " ";
          EP0TM001.XSO-SLS-OFC-ID[XXX-INX-FLD-NBR] = " ";
          EP0TM001.DCMS-ORD-TYP-CD[XXX-INX-FLD-NBR] = " ";
          EP0TM001.DCMS-ORD-TYP-DESC[XXX-INX-FLD-NBR] = " ";
          EP0TM001.XXX-STAT[XXX-INX-FLD-NBR] = " ";
        end
        EP0TW00.XXX-INX-FLD-NBR = EP0TW00.XXX-INX-FLD-NBR + 1;
      end
    end
  end


   /* ------------------------------------------------------------*/
   /* Do actual DB adds or updates requested.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is enter) /* change or add requested*/

    if (EP0TM001.EP0TM-XOB-BASE-OT-CD == 
    EP0TW00.EP0TW-XOB-BASE-OT-CD
     && EP0TM001.EP0TM-XGP-GPC-CD == 
    EP0TW00.EP0TW-XGP-GPC-CD) /* No new data requested*/

      EP0TW00.XXX-INX-FLD-NBR = 1; /* Initialize line index*/
      while (EP0TW00.XXX-INX-FLD-NBR <= EP0TW00.XXX-INX-LMT-NBR)
                                   /* Until end of lines*/
        if (EP0TM001.XOB-BASE-OT-CD[XXX-INX-FLD-NBR] != 
        EP0TW01.XOB-BASE-OT-CD[XXX-INX-FLD-NBR]
         || EP0TM001.XGP-GPC-CD[XXX-INX-FLD-NBR] != 
        EP0TW01.XGP-GPC-CD[XXX-INX-FLD-NBR]
         || EP0TM001.XOT-ORD-TYP-CD[XXX-INX-FLD-NBR] != 
        EP0TW01.XOT-ORD-TYP-CD[XXX-INX-FLD-NBR]
         || EP0TM001.XSO-SLS-OFC-ID[XXX-INX-FLD-NBR] != 
        EP0TW01.XSO-SLS-OFC-ID[XXX-INX-FLD-NBR]
         || EP0TM001.DCMS-ORD-TYP-CD[XXX-INX-FLD-NBR] != 
        EP0TW01.DCMS-ORD-TYP-CD[XXX-INX-FLD-NBR]
         || EP0TM001.DCMS-ORD-TYP-DESC[XXX-INX-FLD-NBR] != 
        EP0TW01.DCMS-ORD-TYP-DESC[XXX-INX-FLD-NBR]
         || EP0TM001.XXX-STAT[XXX-INX-FLD-NBR] != 
        EP0TW01.XXX-STAT[XXX-INX-FLD-NBR])

          if (EP0TW01.XOB-BASE-OT-CD[XXX-INX-FLD-NBR] == "  "
           && EP0TW01.XGP-GPC-CD[XXX-INX-FLD-NBR] == " ")

            EP0T-5400(); /* Process valid add request*/
          else

            EP0T-5600(); /* Process valid change request*/
          end
        end
        EP0TW00.XXX-INX-FLD-NBR = EP0TW00.XXX-INX-FLD-NBR + 1;
      end
    else /* New data was requested*/

      EP0TW00.EP0TW-XOB-BASE-OT-CD = EP0TM001.EP0TM-XOB-BASE-OT-CD;
      EP0TW00.EP0TW-XGP-GPC-CD = EP0TM001.EP0TM-XGP-GPC-CD;
      EP0TW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/
      EP0TW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

      return; /* Return to previous process*/
    end
  end


   /* -----------------------------------------*/
   /* Rollback if any errors found*/
   /* -----------------------------------------*/
  if (converseVar.validationMsgNum > 0) /* errors found*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back db changes on this page*/

    exit stack; /* Exit to display map*/
  end


   /* -----------------------------------------*/
   /* Update temporary storage*/
   /* -----------------------------------------*/
  EP0TW00.XXX-INX-FLD-NBR = 1; /* Initialize line index*/

  while (EP0TW00.XXX-INX-FLD-NBR <= EP0TW00.XXX-INX-LMT-NBR)
                                   /* Until end of lines*/
    EP0TW01.XOB-BASE-OT-CD[XXX-INX-FLD-NBR] = EP0TM001.XOB-BASE-OT-CD[XXX-INX-FLD-NBR];
    EP0TW01.XGP-GPC-CD[XXX-INX-FLD-NBR] = EP0TM001.XGP-GPC-CD[XXX-INX-FLD-NBR];
    EP0TW01.XOT-ORD-TYP-CD[XXX-INX-FLD-NBR] = EP0TM001.XOT-ORD-TYP-CD[XXX-INX-FLD-NBR];
    EP0TW01.XSO-SLS-OFC-ID[XXX-INX-FLD-NBR] = EP0TM001.XSO-SLS-OFC-ID[XXX-INX-FLD-NBR];
    EP0TW01.DCMS-ORD-TYP-CD[XXX-INX-FLD-NBR] = EP0TM001.DCMS-ORD-TYP-CD[XXX-INX-FLD-NBR];
    EP0TW01.DCMS-ORD-TYP-DESC[XXX-INX-FLD-NBR] = EP0TM001.DCMS-ORD-TYP-DESC[XXX-INX-FLD-NBR];
    EP0TW01.XXX-STAT[XXX-INX-FLD-NBR] = EP0TM001.XXX-STAT[XXX-INX-FLD-NBR];

    EP0TW00.XXX-INX-FLD-NBR = EP0TW00.XXX-INX-FLD-NBR + 1;
  end


   /* -----------------------------------------*/
   /* Return to main process*/
   /* -----------------------------------------*/
  EP0TW00.XXX-PAGE-UPD-FL = "Y"; /* Page update flag*/
  converseLib.validationFailed(20); /* Display msg "Transaction completed"*/


end // end EP0T-5000

// Process valid delete request
Function EP0T-5200()
   /* ------------------------------------------------------------*/
   /* Process valid delete request*/
   /* ------------------------------------------------------------*/
  set VORDRT01 empty;
  VORDRT01.XOB-BASE-OT-CD = EP0TM001.XOB-BASE-OT-CD[XXX-INX-FLD-NBR];
  VORDRT01.XGP-GPC-CD = EP0TM001.XGP-GPC-CD[XXX-INX-FLD-NBR];
  VORDRT01.XOT-ORD-TYP-CD = EP0TM001.XOT-ORD-TYP-CD[XXX-INX-FLD-NBR];
  VORDRT01.XSO-SLS-OFC-ID = EP0TM001.XSO-SLS-OFC-ID[XXX-INX-FLD-NBR];

  EP0TS-VORDRT01-D(); /* Delete dcms code*/


end // end EP0T-5200

// Process valid add request
Function EP0T-5400()
   /* ------------------------------------------------------------*/
   /* Process valid add request*/
   /* ------------------------------------------------------------*/

  EP0TW-ORDRT-FOUND-FL = "N";

  set VORDRT01 empty; /* Clear row storage area*/
  VORDRT01.XOB-BASE-OT-CD = EP0TM001.XOB-BASE-OT-CD[XXX-INX-FLD-NBR]; /* table key*/
  VORDRT01.XGP-GPC-CD = EP0TM001.XGP-GPC-CD[XXX-INX-FLD-NBR];
  VORDRT01.XOT-ORD-TYP-CD = EP0TM001.XOT-ORD-TYP-CD[XXX-INX-FLD-NBR];
  VORDRT01.XSO-SLS-OFC-ID = EP0TM001.XSO-SLS-OFC-ID[XXX-INX-FLD-NBR];

  EP0TS-VORDRT01-S(); /* See if already exists*/

  if (EP0TW-ORDRT-FOUND-FL == "N")
    VORDRT01.XOB-BASE-OT-CD = EP0TM001.XOB-BASE-OT-CD[XXX-INX-FLD-NBR];
    VORDRT01.XGP-GPC-CD = EP0TM001.XGP-GPC-CD[XXX-INX-FLD-NBR];
    VORDRT01.XOT-ORD-TYP-CD = EP0TM001.XOT-ORD-TYP-CD[XXX-INX-FLD-NBR];
    VORDRT01.XSO-SLS-OFC-ID = EP0TM001.XSO-SLS-OFC-ID[XXX-INX-FLD-NBR];
    VORDRT01.DCMS-ORD-TYP-CD = EP0TM001.DCMS-ORD-TYP-CD[XXX-INX-FLD-NBR];
    VORDRT01.DCMS-ORD-TYP-DESC = EP0TM001.DCMS-ORD-TYP-DESC[XXX-INX-FLD-NBR];
    VORDRT01.XXX-STAT = EP0TM001.XXX-STAT[XXX-INX-FLD-NBR];

    XX0XS01(); /* Obtain data and time*/

    VORDRT01.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/
    VORDRT01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
    VORDRT01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Time*/
    VORDRT01.ZZZCHGCT = +0; /* Count*/

    EP0TS-VORDRT01-A(); /* Add dcms code*/

  else
    EP0TW00.XXX-MSG-LOC-ID = "5400";
    converseLib.validationFailed(45); /* record exists, cannot add*/
    set EP0TM001.XOB-BASE-OT-CD[XXX-INX-FLD-NBR] cursor, bold;
    set EP0TM001.XGP-GPC-CD[XXX-INX-FLD-NBR] bold;
  end


end // end EP0T-5400

// Process valid change request
Function EP0T-5600()
   /* ------------------------------------------------------------*/
   /* Process valid change request*/
   /* ------------------------------------------------------------*/
  EP0TW-ORDRT-FOUND-FL = "N";

  set VORDRT01 empty;
  VORDRT01.XOB-BASE-OT-CD = EP0TW01.XOB-BASE-OT-CD[XXX-INX-FLD-NBR]; /* Table key*/
  VORDRT01.XGP-GPC-CD = EP0TW01.XGP-GPC-CD[XXX-INX-FLD-NBR];
  VORDRT01.XOT-ORD-TYP-CD = EP0TW01.XOT-ORD-TYP-CD[XXX-INX-FLD-NBR];
  VORDRT01.XSO-SLS-OFC-ID = EP0TW01.XSO-SLS-OFC-ID[XXX-INX-FLD-NBR];

  EP0TS-VORDRT01-S(); /* Select dcms code*/

  if (EP0TW-ORDRT-FOUND-FL == "Y")
    VORDRT01.XOB-BASE-OT-CD = EP0TM001.XOB-BASE-OT-CD[XXX-INX-FLD-NBR];
    VORDRT01.XGP-GPC-CD = EP0TM001.XGP-GPC-CD[XXX-INX-FLD-NBR];
    VORDRT01.XOT-ORD-TYP-CD = EP0TM001.XOT-ORD-TYP-CD[XXX-INX-FLD-NBR];
    VORDRT01.XSO-SLS-OFC-ID = EP0TM001.XSO-SLS-OFC-ID[XXX-INX-FLD-NBR];
    VORDRT01.DCMS-ORD-TYP-CD = EP0TM001.DCMS-ORD-TYP-CD[XXX-INX-FLD-NBR];
    VORDRT01.DCMS-ORD-TYP-DESC = EP0TM001.DCMS-ORD-TYP-DESC[XXX-INX-FLD-NBR];
    VORDRT01.XXX-STAT = EP0TM001.XXX-STAT[XXX-INX-FLD-NBR];

    XX0XS01(); /* Obtain data and time*/

    VORDRT01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Date*/
    VORDRT01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Time*/

    EP0TS-VORDRT01-U(); /* Update dcms code*/

  else
    EP0TW00.XXX-MSG-LOC-ID = "5600";
    converseLib.validationFailed(33); /* record not found (deleted?)*/
    set EP0TM001.XOB-BASE-OT-CD[XXX-INX-FLD-NBR] cursor, bold;
    set EP0TM001.XGP-GPC-CD[XXX-INX-FLD-NBR] bold;
  end


end // end EP0T-5600

// Exit to another application
Function EP0TS-EXIT()
   /* ------------------------------------------------------------*/
   /* Set the application to be invoked for PF1 or PF4.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf1) /* PF1 was pressed*/
    COMMAREA.CATOAP = "GD01"; /* Goal Documentation*/
  else
    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* Master Menu*/
    end
  end


   /* ------------------------------------------------------------*/
   /* Save the system work record in the COMMAREA user area.*/
   /* ------------------------------------------------------------*/
  if (COMMAREA.CATOSYS == COMMAREA.CACURSYS) /* Same system*/
    COMMAREA.CAUSERA = EPWREC.EPWUSERA; /* Save work record*/
  else
    COMMAREA.CAUSERA = " "; /* Clear user area*/
  end


   /* ------------------------------------------------------------*/
   /* Transfer control to the specified application.*/
   /* ------------------------------------------------------------*/
  XSEXIT(); /* Exit to another application*/

  EP0TW00.XXX-MSG-LOC-ID = "XSEXIT"; /* Message location*/


   /* ------------------------------------------------------------*/
   /* Reestablish the COMMAREA application and item fields.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CAEZSG3 = "0"; /* Force zero third character*/
  COMMAREA.CACURRAP = COMMAREA.CAEZSAP; /* Current application*/

  if (converseVar.eventKey is pfkey) /* PF key was pressed*/
    COMMAREA.CATOAP = " "; /* Clear TO application*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = " "; /* Clear map name from item*/
    end
  end


end // end EP0TS-EXIT

// Add page to temporary storage
Function EP0TS-TA0050-A()
   /* ------------------------------------------------------------*/
   /* Add the next page to the temporary storage queue.*/
   /* ------------------------------------------------------------*/
  EP0TW01.XXX-TEMP-STG-LNTH = EP0TW00.XXX-TEMP-STG-LNTH;
                                   /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (EP0TW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Add page*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, initialize the storage area and*/
   /* indicators to be used and return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    set EP0TW01 empty; /* M001 display storage*/
    EP0TW00.XXX-HI-PAGE-NBR = TA5REC.TA5TSQIX; /* Highest page nbr*/

    TA5REC.TA5TSQIX = 0; /* Clear last page number*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/

  EP0TW00.XXX-MSG-LOC-ID = "TA0050A"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(1); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = EP0TW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0TS-TA0050-A

// Purge any temporary storage
Function EP0TS-TA0050-P()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  set EP0TW01 empty; /* M001 display storage*/

  EP0TW00.XXX-PAGE-UPD-FL = "N"; /* Page update flag*/

  TA5REC.TA5TSQIX = 0; /* Displayed page number*/
  EP0TW00.XXX-HI-PAGE-NBR = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (EP0TW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Purge storage*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/

  EP0TW00.XXX-MSG-LOC-ID = "TA0050P"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(1); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = EP0TW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end EP0TS-TA0050-P

// Read temporary storage page
Function EP0TS-TA0050-R()
   /* ------------------------------------------------------------*/
   /* Read the next page from the temporary storage queue.*/
   /* ------------------------------------------------------------*/
  EP0TW01.XXX-TEMP-STG-LNTH = EP0TW00.XXX-TEMP-STG-LNTH;
                                   /* Temporary storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = EP0TW00.XXX-CURR-PAGE-NBR; /* Page number*/

  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (EP0TW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Read page*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/

  EP0TW00.XXX-MSG-LOC-ID = "TA0050R"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(1); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = EP0TW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "READ TEMPORARY STORAGE PAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end EP0TS-TA0050-R

// Update temporary storage page
Function EP0TS-TA0050-U()
   /* ------------------------------------------------------------*/
   /* Update the page in the temporary storage queue.*/
   /* ------------------------------------------------------------*/
  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (EP0TW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update page*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/

  EP0TW00.XXX-MSG-LOC-ID = "TA0050U"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(1); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = EP0TW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "UPDATE TEMPORARY STORAGE PAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/



end // end EP0TS-TA0050-U

// add row to dpick.vordrt01
Function EP0TS-VORDRT01-A()
   /* ------------------------------------------------------------*/
   /* Add a row to the table.*/
   /* ------------------------------------------------------------*/
  try
    call "VORDRT01" ("A ", SQLCA, VORDRT01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/


   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return; /* Return to previous process*/
  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  EPWREC.XXXERRID = "VORDRT01A "; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EPWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "ADD VORDRT01 ROW"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORDRT01"; /* Table view name*/
  TA1REC.TA1TBLKE = VORDRT01.XOB-BASE-OT-CD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0TS-VORDRT01-A

// close crsr for dpick.vordrt01
Function EP0TS-VORDRT01-C1()
   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  if (EP0TM001.EP0TM-XOB-BASE-OT-CD == " ") /* no specific data reqst'd*/
    try
      call "VORDRT01" ("C2", SQLCA, VORDRT01) {isNoRefresh = yes, isExternal = yes};
    end /* Close cursor*/
  else
    try
      call "VORDRT01" ("C1", SQLCA, VORDRT01) {isNoRefresh = yes, isExternal = yes};
    end /* Close cursor*/
  end


   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/
  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  EPWREC.XXXERRID = "VORDRT01C1"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(1); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EPWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORDRT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0TS-VORDRT01-C1

// delete from dpick.vordrt01
Function EP0TS-VORDRT01-D()
   /* ------------------------------------------------------------*/
   /* Delete a row from the table*/
   /* ------------------------------------------------------------*/
  try
    call "VORDRT01" ("D ", SQLCA, VORDRT01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/


   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return; /* Return to previous process*/
  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  EPWREC.XXXERRID = "VORDRT01D "; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EPWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "DELETE VORDRT01 ROW"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORDRT01"; /* Table view name*/
  TA1REC.TA1TBLKE = VORDRT01.XOB-BASE-OT-CD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0TS-VORDRT01-D

// fetch from dpick.vordrt01
Function EP0TS-VORDRT01-N1()
   /* ------------------------------------------------------------*/
   /* Fetch the next row that was selected from the table.*/
   /* ------------------------------------------------------------*/
  if (EP0TM001.EP0TM-XOB-BASE-OT-CD == " ") /* no specific data reqst'd*/
    try
      call "VORDRT01" ("N2", SQLCA, VORDRT01) {isNoRefresh = yes, isExternal = yes};
    end
                                   /* Fetch next row*/
  else
    try
      call "VORDRT01" ("N1", SQLCA, VORDRT01) {isNoRefresh = yes, isExternal = yes};
    end
                                   /* Fetch next row*/
  end


   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
    /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      EP0TW00.EP0TW-ORDRT-EOF-FL = "Y"; /* End of cursor*/
      set VORDRT01 empty;

      return; /* Return to previous process*/
    end
  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  EPWREC.XXXERRID = "VORDRT01N1"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EPWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "FETCH NEXT ROW IN CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORDRT01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0TS-VORDRT01-N1

// select unique dpick.vordrt01
Function EP0TS-VORDRT01-S()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  try
    call "VORDRT01" ("S ", SQLCA, VORDRT01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/


   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == -811) /* or multiple rows*/

      EP0TW-ORDRT-FOUND-FL = "Y"; /* Dcms code found flag*/

      return; /* Return to previous process*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Not found return code*/

        return; /* Return to previous process*/
      end
    end
  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  EPWREC.XXXERRID = "VORDRT01S "; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EPWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SELECT VORDRT01 ROW"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORDRT01"; /* Table view name*/
  TA1REC.TA1TBLKE = VORDRT01.XOB-BASE-OT-CD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0TS-VORDRT01-S

// open crsr for dpick.vordrt01
Function EP0TS-VORDRT01-S1()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  if (EP0TM001.EP0TM-XOB-BASE-OT-CD == " ") /* no specific data reqst'd*/
    try
      call "VORDRT01" ("S2", SQLCA, VORDRT01) {isNoRefresh = yes, isExternal = yes};
    end /* Select set*/
  else
    try
      call "VORDRT01" ("S1", SQLCA, VORDRT01) {isNoRefresh = yes, isExternal = yes};
    end /* Select set*/
  end


   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/
  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  EPWREC.XXXERRID = "VORDRT01S1"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EPWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "SELECT SET AND OPEN CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORDRT01"; /* Table view name*/
  TA1REC.TA1TBLKE = VORDRT01.XOB-BASE-OT-CD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0TS-VORDRT01-S1

// update dpick.vordrt01
Function EP0TS-VORDRT01-U()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  try
    call "VORDRT01" ("U ", SQLCA, VORDRT01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/


   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return; /* Return to previous process*/
  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  EPWREC.XXXERRID = "VORDRT01U "; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(11); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EPWREC.XXXERRID; /* Message location*/
  TA1REC.TA1LOC = "UPDATE VORDRT01 ROW"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORDRT01"; /* Table view name*/
  TA1REC.TA1TBLKE = VORDRT01.XOB-BASE-OT-CD; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0TS-VORDRT01-U

//*** RECORD=EP0TW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record EP0TW00 type basicRecord
  10 XXX-RQT-DATA-FL XXX-RQT-DATA-FL ; 
  10 XXX-MAP-FMAT-FL XXX-MAP-FMAT-FL ; 
  10 XXX-MAP-DSP-CD XXX-MAP-DSP-CD ; 
  10 XXX-TEMP-STG-LNTH XXX-TEMP-STG-LNTH ; 
  10 XXX-INX-LMT-NBR XXX-INX-LMT-NBR ; 
  10 XXX-INX-FLD-NBR XXX-INX-FLD-NBR ; 
  10 XXX-CURR-PAGE-NBR XXX-CURR-PAGE-NBR ; 
  10 XXX-HI-PAGE-NBR XXX-HI-PAGE-NBR ; 
  10 XXX-PAGE-UPD-FL XXX-PAGE-UPD-FL ; 
  10 XXX-MSG-LOC-ID XXX-MSG-LOC-ID ; 
  10 XXX-MSG-NBR XXX-MSG-NBR ; 
  10 EP0TW-XOB-BASE-OT-CD EP0TW-XOB-BASE-OT-CD ; 
  10 EP0TW-XGP-GPC-CD EP0TW-XGP-GPC-CD ; 
  10 EP0TW-REC-NBR EP0TW-REC-NBR ; 
  10 EP0TW-ORDRT-EOF-FL EP0TW-ORDRT-EOF-FL ; 
  10 EP0TW-ORDRT-FOUND-FL EP0TW-ORDRT-FOUND-FL ; 
  10 EP0TW-ENTRY-FOUND-FL EP0TW-ENTRY-FOUND-FL ; 
end // end EP0TW00

//*** RECORD=EP0TW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record EP0TW01 type basicRecord
  5 XXX-TEMP-STG-LNTH XXX-TEMP-STG-LNTH ; 
  5 * char(546) ; 
    10 * char(42) [13] ; 
      15 XXX-LN-SEL-IND XXX-LN-SEL-IND ; 
      15 XOB-BASE-OT-CD XOB-BASE-OT-CD ; 
      15 XGP-GPC-CD XGP-GPC-CD ; 
      15 XOT-ORD-TYP-CD XOT-ORD-TYP-CD ; 
      15 XSO-SLS-OFC-ID XSO-SLS-OFC-ID ; 
      15 DCMS-ORD-TYP-CD DCMS-ORD-TYP-CD ; 
      15 DCMS-ORD-TYP-DESC DCMS-ORD-TYP-DESC ; 
      15 XXX-STAT XXX-STAT ; 
end // end EP0TW01

Record VORDRT01 type basicRecord
  5 VORDRT01-GROUP VORDRT01-GROUP ; 
    10 VORDRT01-KEY VORDRT01-KEY ; 
      15 XOB-BASE-OT-CD XOB-BASE-OT-CD ; 
      15 XGP-GPC-CD XGP-GPC-CD ; 
    10 XOT-ORD-TYP-CD XOT-ORD-TYP-CD ; 
    10 XSO-SLS-OFC-ID XSO-SLS-OFC-ID ; 
    10 DCMS-ORD-TYP-CD DCMS-ORD-TYP-CD ; 
    10 DCMS-ORD-TYP-DESC DCMS-ORD-TYP-DESC ; 
    10 XXX-STAT XXX-STAT ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end VORDRT01

// DCMS_ORD_TYP_CD
DataItem DCMS-ORD-TYP-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DCMS_ORD_TYP_DESC
DataItem DCMS-ORD-TYP-DESC char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Data found flag
DataItem EP0TW-ENTRY-FOUND-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of Ordrt01 data flag
DataItem EP0TW-ORDRT-EOF-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Ordrt found flag
DataItem EP0TW-ORDRT-FOUND-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record number
DataItem EP0TW-REC-NBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XGP_GPC_CD
DataItem EP0TW-XGP-GPC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XOB_BASE_OT_CD
DataItem EP0TW-XOB-BASE-OT-CD char(2)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

DataItem VORDRT01-GROUP char(53)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem VORDRT01-KEY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

