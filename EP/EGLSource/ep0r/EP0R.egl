package ep0r;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import ep.common.*;
import in1.common.*;
import ta.common.*;
//*** PROGRAM=EP0R ****
// This application allows users to inquire, change, and add
// rows in the DC inventory adjustments reason table, TDCRSN00.
// 
// This TDCRSN00 table is used to integrate the DCMS inventory
// adjustment reason/type's with GOAL XIT/XIR/Setaside ID
// combinations.
// 
// This screen may be accessed by fastpath or from the EP DCMS
// Misc Functions menu, EP0M.  On entry, the screen defaults
// to INQUIRE mode.  The user may "toggle" between inquire,
// change, and add modes by using the designated PF keys.
// 
// NOTE: Modules named as EP0R-9nnnn are common modules that
//       are referenced from more than one process or statement
//       group.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      12/02/98  esmit2  New application.
// chg       2/04/99  esmit2  Return user to mn0m...not fromap
// multgpc  08/06/99  OENFIE  regenerate to pick up changes to
//                            XPEP-00000
// *********************
Program EP0R type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "EP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  EP0RW00 EP0RW00; // record
  EP0RW01 EP0RW01; // record
  EPWREC EPWREC; // record
  INAREC INAREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VDCRSN01 VDCRSN01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XIRTBL {deleteAfterUse = yes}; // table
  use XITTBL {deleteAfterUse = yes}; // table
  use EP0RM.EP0RM001,  // forms
      EP0RM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPEP-00000: XPEP-00000();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
     /* Note:*/
      /* If additional fields are added to the screen, be sure*/
      /* to move the correct work record length to the temp*/
      /* storage length (TF0MW00.XXXTSLEN).*/
     /* ------------------------------------------------------------*/

    set EP0RM001 initial; /* M001 input/output*/
    set XX0XM001 initial; /* Pop-up map*/
    set EP0RW00 empty; /* Application working storage*/
    set EP0RW01 empty; /* Map detail working storage*/
    set VDCRSN01 empty; /* DCMS Inv Adjustment Reasons*/
    set SQLCA empty; /* SQLCA record*/
    set INAREC empty; /* SAS Header*/
    set TAEREC empty; /**/
    set TA1REC empty; /**/
    set TA5REC empty; /**/
    set XX0XW01 empty; /**/
    set XX0XW02 empty; /**/


    EP0RW00.EP0RW-FORMAT-SW = "N"; /* Format the map switch*/
    EP0RW00.EP0RW-DATA-RQST-SW = "N"; /* Request for data switch*/
    EP0RW00.EP0RW-TS-PG-RTN-SW = "N"; /* PA2 logic switch*/
    EP0RW00.EP0RW-ADD-FL = "N"; /* ADD complete indicator*/
    EP0RW00.EP0RW-MAPHDR-CHG-FL = "Y"; /* new header data switch*/
    EP0RW-INIT-ENTRY-SW = "Y"; /* First time in*/
    EP0RW00.XXXTSLEN = 228; /* Temporary storage length*/


     /* ------------------------------------------------------------*/
     /* Default to INQUIRY mode on initial entry of screen.*/
     /* ------------------------------------------------------------*/

    EP0RW00.EP0RW-MODE = "I"; /* default to INQ mode*/


     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto EP0R-00000; /* Converse the main process*/

    EP0R-00000: EP0R-00000();
    goto EP0R-00000; /* Converse the main process*/
  end // end main
end // end EP0R

// Main process to display a map
Function EP0R-00000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


  EP0R-10000(); /* Obtain the data to display*/

  EP0R-20000(); /* Format and display the map*/

  EP0R-30000(); /* Check attention identifier*/

  EP0R-40000(); /* Reset fields to normal intensity*/

  EP0R-50000(); /* Verify the data that was entered*/

  EP0R-60000(); /* Process valid input request*/


end // end EP0R-00000

// Obtain the data to display
Function EP0R-10000()
   /* ------------------------------------------------------------*/
   /* 1 - Delete temp storage as a result of first time or PA2*/
   /* 2 - If a previous error (EZEMNO NE 0) then return*/
   /* 3 - EP0R-11000 - obtain data*/
   /* i. EP0R-11100 - select unique/wildcard*/
   /* ------*/
   /* Loop  | ii. EP0R-11200 - select next (n1)*/
   /* | iii. EP0R-11300 - move row to temp storage (IX)*/
   /* |    a. If page full, then EP0R-11400 write temp storage*/
   /* ------*/
   /* iv. EP0R-11500 - Close cursor*/
   /* v. EP0R-11600 - Read 1st page temp storage on MNT/INQ*/
   /* - Move rows to map on add*/
   /* - Move empty rows to map on add*/
   /* - Set attributes*/
   /* - Set cursor for add*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Delete temporary storage*/
   /* ------------------------------------------------------------*/

  if (EP0RW00.EP0RW-DATA-RQST-SW == "N") /* Data was not requested*/

    EP0RS-91000(); /* Delete temp storage*/
    EP0RW00.EP0RW-DATA-RQST-SW = "Y"; /* Data to be requested*/

    return; /* Return to display map*/
  end


  if (EP0RW00.EP0RW-INIT-ENTRY-SW == "Y") /* First time in*/

    /* ------------------------------------------------------------*/
    /* If first time into application, return user to from app if*/
    /* this is not an APPAREL user.*/
    /* ------------------------------------------------------------*/

    /* IF COMMAREA.XWHCD NE '51';                     /* Not APPAREL user*/
    /* MOVE 'MN0M' TO COMMAREA.CATOAP;              /* Return to from app*/
    /* XSEPS-EXIT;                                  /* Application exit*/
    /* END;*/


    EP0RS-91000(); /* Delete temp storage*/
    EP0RW00.EP0RW-DATA-RQST-SW = "Y"; /* Data to be requested*/
    EP0RW00.EP0RW-INIT-ENTRY-SW = "N";

  end


   /* ------------------------------------------------------------*/
   /* If an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* or an error was found*/

    if (converseVar.validationMsgNum == 20) /* Continue for "transaction complete'*/
       /* NEXT SENTENCE*/
    else

      return; /* Return to previous process*/
    end
  end


   /* ------------------------------------------------------------*/
   /* Retrieve database information, build temp storage & screens*/
   /* ------------------------------------------------------------*/

  if (EP0RW00.EP0RW-MAPHDR-CHG-FL == "Y") /* If new data to be built*/

    if (converseVar.eventKey is enter /* ENTER key*/
     || converseVar.eventKey is pf9   /* pf9 key - INQUIRE mode*/
     || converseVar.eventKey is pf11) /* pf11 key - CHANGE mode*/

      EP0R-11000(); /* Obtain data to display*/

      return; /* Return to converse map*/
    end
  end


  if (converseVar.eventKey is pf10) /* pf10 - ADD mode*/
    if (EP0RW00.EP0RW-MODE == "A") /* ADD mode*/

      EP0R-11600(); /* Move data to screen*/

      return; /* Return to converse map*/
    else /* Not ADD mode*/

      EP0R-11000(); /* Obtain data to display*/

      return; /* Return to converse map*/
    end
  end


end // end EP0R-10000

// Obtain DC Inv Adj Reasons data
Function EP0R-11000()
   /* ------------------------------------------------------------*/
   /* Select from DCMS Inventory Adjustment Reasons table*/
   /* ------------------------------------------------------------*/

  EP0RW00.XXX-MSG-LOC-ID = "1100"; /* Module loc*/

  EP0R-11100(); /* Select Inv Adj Reasons table*/

  EP0RW00.EP0RW-WORK-CTR = 0; /* Number of row into TS*/


   /* ------------------------------------------------------------*/
   /* Select set and open cursor*/
   /* Fetch and build temp storage until end of cursor*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE == 0) /* If data exists*/

    EP0RW00.EP0RW-IXM = 0; /* Initialize TS index*/
    EP0RW00.EP0RW-EOC-SW = "N"; /* End of cursor switch*/

    while (EP0RW00.EP0RW-EOC-SW == "N") /* Until end of cursor*/
      EP0R-11200(); /* Fetch next row*/
    end

    EP0R-11500(); /* Close the selected cursor*/

    if (EP0RW00.EP0RW-IXM > 0) /* Remaining data*/
      EP0R-11400(); /* Write remaining data to tempstor*/
    end
  end


   /* ------------------------------------------------------------*/
   /* Obtain data for page to be sent*/
   /* ------------------------------------------------------------*/

  if (EP0RW00.EP0RW-MODE == "A") /* If ADD mode*/
    EP0R-11600(); /* Obtain data for page*/

  else
    if (EP0RW00.EP0RW-WORK-CTR > 0) /* If records retrieved gt 0*/
      EP0R-11600(); /* Obtain data for page*/

    else /* maintain current screen*/
      converseLib.validationFailed(12); /* Record is not on database*/
      set EP0RM001.EP0RM-SEL-DC-RSN-TYP-CD cursor;

    end
  end


end // end EP0R-11000

// Open csr on DC Inv Adj Reasons
Function EP0R-11100()
   /* ------------------------------------------------------------*/
   /* Open the cursor on DCMS Inventory Adjustment Reasons table*/
   /* Allow for wildcard selection parameters*/
   /* ------------------------------------------------------------*/

  EP0RW00.XXX-MSG-LOC-ID = "1110"; /* Module loc*/

  set VDCRSN01 empty; /* Clear record*/


   /* * * DCMS REASON TYPE * * **/

  if (EP0RM001.EP0RM-SEL-DC-RSN-TYP-CD > " " /* Entry exists*/
   && EP0RW00.EP0RW-MODE != "A")             /* Not ADD mode*/
    VDCRSN01.DC-RSN-TYP-CD = EP0RM001.EP0RM-SEL-DC-RSN-TYP-CD; /* Specific sel*/
  else /* Not entered*/
    VDCRSN01.DC-RSN-TYP-CD = "*"; /* Wildcard*/
  end


   /* * * DCMS REASON CODE * * **/

  if (EP0RM001.EP0RM-SEL-DC-RSN-CD > " " /* Entry exists*/
   && EP0RW00.EP0RW-MODE != "A")         /* Not ADD mode*/
    VDCRSN01.DC-RSN-CD = EP0RM001.EP0RM-SEL-DC-RSN-CD; /* Specific sel*/
  else /* Not entered*/
    VDCRSN01.DC-RSN-CD = "*"; /* Wildcard*/
  end


   /* * * DCMS ADJUSTMENT TYPE * * **/

  if (EP0RM001.EP0RM-SEL-DC-ADJ-TYP-CD > " " /* Entry exists*/
   && EP0RW00.EP0RW-MODE != "A")             /* Not ADD mode*/
    VDCRSN01.DC-ADJ-TYP-CD = EP0RM001.EP0RM-SEL-DC-ADJ-TYP-CD; /* Specific sel*/
  else /* Not entered*/
    VDCRSN01.DC-ADJ-TYP-CD = "*"; /* Wildcard*/
  end


   /* * * XIT CODE * * **/

  if (EP0RM001.EP0RM-SEL-XIT-CD > " " /* Entry exists*/
   && EP0RW00.EP0RW-MODE != "A")      /* Not ADD mode*/
    VDCRSN01.XIT-TRN-TYP-CD = EP0RM001.EP0RM-SEL-XIT-CD; /* Specific sel*/
  else /* Not entered*/
    VDCRSN01.XIT-TRN-TYP-CD = "*"; /* Wildcard*/
  end


   /* * * XIR CODE * * **/

  if (EP0RM001.EP0RM-SEL-XIR-CD > " " /* Entry exists*/
   && EP0RW00.EP0RW-MODE != "A")      /* Not ADD mode*/
    VDCRSN01.XIR-TRN-RSN-CD = EP0RM001.EP0RM-SEL-XIR-CD; /* Specific sel*/
  else /* Not entered*/
    VDCRSN01.XIR-TRN-RSN-CD = "*"; /* Wildcard*/
  end


   /* * * SAS ID * * **/

  if (EP0RM001.EP0RM-SEL-INASAID > 0 /* Entry exists*/
   && EP0RW00.EP0RW-MODE != "A")     /* Not ADD mode*/
    VDCRSN01.INASAID = EP0RM001.EP0RM-SEL-INASAID; /* Specific sel*/
  else /* Not entered*/
    VDCRSN01.INASAID = -1; /* Wildcard*/
  end


   /* * * STATUS * * **/

  VDCRSN01.XXX-STAT = "*"; /* Wildcard*/

   /* * * REASON ADJUSTMENT TYPE * * **/
  VDCRSN01.INV-RSN-ADJ-TYP-CD = "*"; /* Wildcard*/


   /* ------------------------------------------------------------*/
   /* Select Inv Adj Reasons IO call*/
   /* ------------------------------------------------------------*/

  try
    call "VDCRSN01" ("S1", SQLCA, VDCRSN01) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Row not found*/

      return; /* Return to previous process*/
    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OBTAIN DCMS INV ADJ REASONS  ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program*/
  TA1REC.TA1PGMNO = EP0RW00.XXX-MSG-LOC-ID; /* Module*/
  TA1REC.TA1DBASE = "DINVNT  "; /* Data base*/
  TA1REC.TA1TBLVU = "VDCRSN01"; /* Table view*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  exit stack; /* Exit to map*/


end // end EP0R-11100

// Fetch next Inv Adj Reason
Function EP0R-11200()
   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted*/
   /* ------------------------------------------------------------*/

  EP0RW00.XXX-MSG-LOC-ID = "1120"; /* Module loc*/

  set VDCRSN01 empty; /* Clear DCLGEN layout*/

  try
    call "VDCRSN01" ("N1", SQLCA, VDCRSN01) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    EP0R-11300(); /* load into temporary storage*/

    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* If end of the selected set, indicate end of cursor*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 100)    /* End of selected set*/

    EP0RW00.EP0RW-EOC-SW = "Y"; /* Indicate end of cursor*/

    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "SELECT NEXT DC INV ADJ RSN   ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program*/
  TA1REC.TA1PGMNO = EP0RW00.XXX-MSG-LOC-ID; /* Module*/
  TA1REC.TA1DBASE = "DINVNT  "; /* Data base*/
  TA1REC.TA1TBLVU = "VDCRSN01"; /* Table view*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  exit stack; /* Exit*/


end // end EP0R-11200

// Load Inv Adj Rsn row into TS
Function EP0R-11300()
   /* ------------------------------------------------------------*/
   /* Load VDCRSN01 into EP0RW01 temp storage area*/
   /* ------------------------------------------------------------*/

  if (EP0RW00.EP0RW-IXM > 12) /* Temp Stor full*/
    EP0R-11400(); /* Write Temp Stor*/
  end

  EP0RW00.EP0RW-WORK-CTR = EP0RW00.EP0RW-WORK-CTR + 1; /* Increment rows*/

  EP0RW00.EP0RW-IXM = EP0RW00.EP0RW-IXM + 1; /* Increment TS idx*/


  EP0RW01.EP0RW-LN-USED-FL[EP0RW-IXM] = "Y"; /* Line has data*/


  EP0RW01.DC-RSN-TYP-CD[EP0RW-IXM] = VDCRSN01.DC-RSN-TYP-CD;
  EP0RW01.DC-RSN-CD[EP0RW-IXM] = VDCRSN01.DC-RSN-CD;
  EP0RW01.DC-ADJ-TYP-CD[EP0RW-IXM] = VDCRSN01.DC-ADJ-TYP-CD;
  EP0RW01.XIT-TRN-TYP-CD[EP0RW-IXM] = VDCRSN01.XIT-TRN-TYP-CD;
  EP0RW01.XIR-TRN-RSN-CD[EP0RW-IXM] = VDCRSN01.XIR-TRN-RSN-CD;
  EP0RW01.INASAID[EP0RW-IXM] = VDCRSN01.INASAID;
  EP0RW01.INV-RSN-ADJ-TYP-CD[EP0RW-IXM] = VDCRSN01.INV-RSN-ADJ-TYP-CD;
  EP0RW01.XXX-STAT[EP0RW-IXM] = VDCRSN01.XXX-STAT;
  EP0RW01.ZZZCHGCT[EP0RW-IXM] = VDCRSN01.ZZZCHGCT;


   /* ------------------------------------------------------------*/
   /* Test for full temp storage area*/
   /* ------------------------------------------------------------*/

  if (EP0RW00.EP0RW-IXM > 11) /* TS area full*/
    EP0R-11400(); /* Write Temp Storage*/
  end


end // end EP0R-11300

// Write Temporary Storage
Function EP0R-11400()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  EP0RW00.XXX-MSG-LOC-ID = "1140"; /* Module loc*/

  EP0RW01.XXXTSLEN = EP0RW00.XXXTSLEN; /* Temp storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application id*/
  TA5REC.TA5FNCCD = "A"; /* ADD Function code*/

  try
    call "TA0050" (EP0RW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/


   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set EP0RW01 empty; /* M001 display storage*/

    EP0RW00.EP0RW-IX3 = 1; /* Work index*/

    EP0RW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    EP0RW00.XXXTSPAG = TA5REC.TA5TSQIX; /* Current page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    EP0RW00.EP0RW-IXM = 0; /* Reset TS index*/

    return; /* Return*/

  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subrt parms*/

  converseLib.validationFailed(01); /* Unexpected error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program*/
  TA1REC.TA1PGMNO = EP0RW00.XXX-MSG-LOC-ID; /* Module*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map appl*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error routine*/

  exit stack; /* Exit*/


end // end EP0R-11400

// Close csr on DCMS Inv Adj Rsns
Function EP0R-11500()
   /* ------------------------------------------------------------*/
   /* Close selected cursor*/
   /* ------------------------------------------------------------*/

  EP0RW00.XXX-MSG-LOC-ID = "1150"; /* Module loc*/

  set VDCRSN01 empty; /* Clear DCLGEN record*/

  try
    call "VDCRSN01" ("C1", SQLCA, VDCRSN01) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* Normal return code*/

    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination*/

    converseLib.clearScreen();
     /* Clear screen*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE SELECTED CURSOR        ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program*/
  TA1REC.TA1PGMNO = EP0RW00.XXX-MSG-LOC-ID; /* Module*/
  TA1REC.TA1DBASE = "DINVNT  "; /* Data base*/
  TA1REC.TA1TBLVU = "VDCRSN01"; /* Table view*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  exit stack; /* Exit*/


end // end EP0R-11500

// Obtain rows for screen
Function EP0R-11600()
  EP0RW00.EP0RW-MAPHDR-CHG-FL = "N"; /* Data not new*/


   /* ------------------------------------------------------------*/
   /* If INQ or MNT functions*/
   /* If there is data (or temp storage)*/
   /* Read the first page*/
   /* Move current w-s pages to map*/
   /* else*/
   /* Move current w-s pages to map (equal zeros)*/
   /* Send 'Record not on database' message*/
   /* ------------------------------------------------------------*/

  if (EP0RW00.EP0RW-MODE == "I" /* If INQ request*/
   || EP0RW00.EP0RW-MODE == "C") /* Or MNT request*/

    if (EP0RW00.TA5TSQIX > 0) /* temp stor exists*/

      EP0RW00.XXXTSPAG = 1; /* Set page to 1*/

      EP0RS-92000(); /* Read temp stor pg*/

      EP0RM001.MAPLMPNO = EP0RW00.XXXTSPAG; /* curr page nbr*/
      EP0RM001.MAPLMPAG = EP0RW00.TA5TSQIX; /* max page nbr*/
    else

      EP0RM001.MAPLMPNO = EP0RW00.XXXTSPAG; /* curr page nbr*/
      EP0RM001.MAPLMPAG = EP0RW00.TA5TSQIX; /* max page nbr*/
    end
  end


   /* ------------------------------------------------------------*/
   /* Load temp storage into map area*/
   /* ------------------------------------------------------------*/


  EP0RW00.EP0RW-IXM = 1; /* Initialize map field index*/

  while (EP0RW00.EP0RW-IXM <= 12) /* while occur is 1 to 12*/

    EP0RS-93000(); /* move ts occur to map occur*/
  end


   /* ------------------------------------------------------------*/
   /* Reset attributes*/
   /* ------------------------------------------------------------*/

  EP0RS-94000(); /* Header attributes*/

  EP0RW00.EP0RW-IXM = 1; /* Initialize map field index*/

  while (EP0RW00.EP0RW-IXM <= 12) /* while occur is 1 to 12*/

    EP0RS-95000(); /* move attributes to map occur*/
  end


   /* ------------------------------------------------------------*/
   /* Set up cursor for ADD request*/
   /* ------------------------------------------------------------*/

  if (EP0RW00.EP0RW-MODE == "A") /* If ADD request*/

    set EP0RM001.DC-RSN-TYP-CD[1] cursor; /* Put csr on 1ST DETAIL*/
  end


end // end EP0R-11600

// Format and converse the map
Function EP0R-20000()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/
    EP0RW00.EP0RW-MSG-NBR = converseVar.validationMsgNum; /* Message number*/
  end


   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (EP0RW00.EP0RW-DATA-RQST-SW == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (EP0RW00.EP0RW-FORMAT-SW == "Y") /* Map must be formatted*/
      EP0R-21000(); /* Format the data on the map*/
    end

  end


   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  EP0RM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  EP0RM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  EP0RM001.CAITEM = COMMAREA.CAITEM; /* Application data*/


   /* ------------------------------------------------------------*/
   /* Format map options*/
   /* If add mode, initialize select fields except for warehouse*/
   /* ------------------------------------------------------------*/

  if (EP0RW00.EP0RW-MODE == "C") /* CHANGE  mode*/
    EP0RM001.EP0RM-MODE-LIT = "MODE: CHANGE "; /* Map sub title*/
    set EP0RM001.EP0RM-BACK-LIT initialAttributes; /* Suppress scroll*/
    set EP0RM001.EP0RM-FRWD-LIT initialAttributes;
  else
    if (EP0RW00.EP0RW-MODE == "A") /* ADD mode*/
      EP0RM001.EP0RM-MODE-LIT = "MODE: ADD    "; /* Map sub title*/
      EP0RM001.EP0RM-SEL-DC-RSN-TYP-CD = " ";
      EP0RM001.EP0RM-SEL-DC-RSN-CD = " ";
      EP0RM001.EP0RM-SEL-DC-ADJ-TYP-CD = " ";
      EP0RM001.EP0RM-SEL-XIT-CD = " ";
      EP0RM001.EP0RM-SEL-XIR-CD = " ";
      EP0RM001.EP0RM-SEL-INASAID = 0;
      set EP0RM001.EP0RM-BACK-LIT invisible; /* Suppress scroll*/
      set EP0RM001.EP0RM-FRWD-LIT invisible;
    else /* INQUIRY default*/
      EP0RM001.EP0RM-MODE-LIT = "MODE: INQUIRY"; /* Map sub title*/
      set EP0RM001.EP0RM-BACK-LIT initialAttributes; /* Suppress scroll*/
      set EP0RM001.EP0RM-FRWD-LIT initialAttributes;
    end
  end


   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (EP0RW00.EP0RW-MSG-NBR != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ")     /* or message text*/

    if (EP0RW00.EP0RW-MSG-NBR != 0) /* Message to display*/
      if (EP0RW00.EP0RW-MSG-NBR == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(EP0RW00.EP0RW-MSG-NBR);
      end /* Message number*/
    else
      EP0RM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
    end

    EP0RM001.XXXMODID = EP0RW00.XXX-MSG-LOC-ID; /* Module  id*/
    set EP0RM001 alarm; /* Alarm*/
  end


  if (EP0RW00.EP0RW-EDIT-PASS-SW == "Y" /* No edit errors*/
   && EP0RW00.EP0RW-MSG-NBR != 0)       /* Message to display*/

    if (EP0RW00.EP0RW-MODE == "A") /* ADD mode*/

      set EP0RM001.DC-RSN-TYP-CD[1] cursor; /* Csr at 1st entry*/

    else

      set EP0RM001.EP0RM-SEL-DC-RSN-TYP-CD cursor; /* Csr at reason type*/

    end
  end


  set EP0RM001.MAPLMPGL protect; /* "Page" literal*/
  set EP0RM001.MAPLMPNO protect; /* Current page nbr*/
  set EP0RM001.MAPLMPOL protect; /* "of" literal*/
  set EP0RM001.MAPLMPAG protect; /* Total pages*/

  if (EP0RW00.TA5TSQIX <= 1 /* One page only*/
   || EP0RW00.EP0RW-MODE == "A") /* or ADD mode*/

    set EP0RM001.MAPLMPGL invisible, protect; /* "Page" literal*/
    set EP0RM001.MAPLMPNO invisible, protect; /* Current page nbr*/
    set EP0RM001.MAPLMPOL invisible, protect; /* "of" literal*/
    set EP0RM001.MAPLMPAG invisible, protect; /* Total pages*/

  else

    EP0RM001.MAPLMPNO = EP0RW00.XXXTSPAG;
    EP0RM001.MAPLMPAG = EP0RW00.TA5TSQIX;

  end


  converse EP0RM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information*/
   /* ------------------------------------------------------------*/

  EP0RM001.XXXMODID = " "; /* Module identification*/
  EP0RW00.XXX-MSG-LOC-ID = " "; /* Module identification*/
  EP0RW00.EP0RW-MSG-NBR = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = EP0RM001.CATOAP; /* To application*/
  COMMAREA.CAITEM = EP0RM001.CAITEM; /* Application data*/


end // end EP0R-20000

// Format the display data
Function EP0R-21000()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set EP0RM001 initial; /* M001 input/output area*/

  EP0RW00.EP0RW-FORMAT-SW = "N"; /* Format the map switch*/
  EP0RW00.EP0RW-MAPHDR-CHG-FL = "N"; /* New data switch*/
  EP0RW00.EP0RW-DATA-RQST-SW = "Y"; /* Request for data*/


   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temp storage*/
   /* ------------------------------------------------------------*/

  if (EP0RW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (EP0RW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/

      /* ------------------------------------------------------------*/
      /* If the desired page number is greater than the highest*/
      /* page in storage, default to the highest page number*/
      /* ------------------------------------------------------------*/

      if (EP0RW00.XXXTSPAG > EP0RW00.TA5TSQIX) /* Desired page greater*/
        EP0RW00.XXXTSPAG = EP0RW00.TA5TSQIX; /* Default to highest*/
      end

      EP0RS-92000(); /* Obtain TS page*/

    end

    set EP0RM001.MAPLMPGL skip; /* Page literal*/
    EP0RM001.MAPLMPNO = EP0RW00.XXXTSPAG; /* Page number*/
    set EP0RM001.MAPLMPOL skip; /* Page literal*/
    EP0RM001.MAPLMPAG = EP0RW00.TA5TSQIX; /* Number pages*/

  end


   /* ------------------------------------------------------------*/
   /* Format the data on the map from temp storage*/
   /* ------------------------------------------------------------*/

  EP0RM001.EP0RM-SEL-DC-RSN-TYP-CD = EP0RW00.EP0RM-SEL-DC-RSN-TYP-CD;
  EP0RM001.EP0RM-SEL-DC-RSN-CD = EP0RW00.EP0RM-SEL-DC-RSN-CD;
  EP0RM001.EP0RM-SEL-DC-ADJ-TYP-CD = EP0RW00.EP0RM-SEL-DC-ADJ-TYP-CD;
  EP0RM001.EP0RM-SEL-XIT-CD = EP0RW00.EP0RM-SEL-XIT-CD;
  EP0RM001.EP0RM-SEL-XIR-CD = EP0RW00.EP0RM-SEL-XIR-CD;
  EP0RM001.EP0RM-SEL-INASAID = EP0RW00.EP0RM-SEL-INASAID;


  EP0RW00.EP0RW-IXM = 1; /* Init map field index*/

  while (EP0RW00.EP0RW-IXM <= 12) /* Until screen is full*/
    EP0RS-93000(); /* Move ts occur to map occur*/
  end

  EP0RS-94000(); /* Set hdr attrib, cursor*/

  EP0RW00.EP0RW-IXM = 1; /* Init map field index*/

  while (EP0RW00.EP0RW-IXM <= 12) /* Until screen is full*/
    EP0RS-95000(); /* Set line attributes*/
  end

  if (converseVar.eventKey is pf7)
    converseLib.validationFailed(14); /* Scroll backward successful*/

  else
    if (converseVar.eventKey is pf8)
      converseLib.validationFailed(13); /* Scroll forward successful*/
    end
  end


end // end EP0R-21000

// Check attention identifier
Function EP0R-30000()
   /* ------------------------------------------------------------*/
   /* Attention identifiers are processed in the following order:*/
   /* - PA2 cancel perform*/
   /* - Fast path with <enter> key*/
   /* - Transfers to other applications*/
   /* - PF7/8 perform for plausible/allowable scrolling*/
   /* - PF9  switch to INQ mode when valid/allowable*/
   /* - PF10 switch to ADD mode when valid/allowable*/
   /* - PF11 switch into CHG mode when allowable*/
   /* - If not <enter> , then invalid pf key message*/
   /* - <enter> key and*/
   /* ------------------------------------------------------------*/

  EP0RW00.XXX-MSG-LOC-ID = "3000"; /* Module loc*/

   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    EP0R-31000(); /* Clear or restore screen*/
    return; /* Exit to set attributes*/

  end


   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (EP0RM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      EP0RS-91000(); /* Delete temporary storage*/

      XSEPS-EXIT(); /* Exit to another application*/

      set EP0RM001.CATOAP cursor, bold; /* Highlight*/

    else

      set EP0RM001.CATOAP cursor, bold; /* Highlight*/

      converseLib.validationFailed(18); /* Only valid with ENTER*/

    end

    exit stack; /* Exit to display map*/

  end


   /* ------------------------------------------------------------*/
   /* Set up EXIT to another application if requested.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3 /* PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "EP0M"; /* TO application*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
    end


    EP0RS-91000(); /* Delete temp storage*/

    XSEPS-EXIT(); /* Exit to another appl*/

    exit stack; /* Exit to display map*/

  end


   /* ------------------------------------------------------------*/
   /* Scroll request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll backward*/
   || converseVar.eventKey is pf8) /* Scroll forward*/

    return; /* Exit*/

  end


   /* ------------------------------------------------------------*/
   /* PF10 - Request for ADD mode*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf10) /* ADD Mode*/
    if (COMMAREA.CACHGFL == "Y") /* MAINT authority*/

      EP0RW00.EP0RW-MODE = "A"; /* To ADD*/
      EP0RW00.EP0RW-MAPHDR-CHG-FL = "Y"; /* New data*/

      EP0RM001.EP0RM-SEL-DC-RSN-TYP-CD = " ";
      EP0RM001.EP0RM-SEL-DC-RSN-CD = " ";
      EP0RM001.EP0RM-SEL-DC-ADJ-TYP-CD = " ";
      EP0RM001.EP0RM-SEL-XIT-CD = " ";
      EP0RM001.EP0RM-SEL-XIR-CD = " ";
      EP0RM001.EP0RM-SEL-INASAID = 0;

      EP0RS-91000(); /* Purge temp storage*/

      return; /* Exit*/

    else

      converseLib.validationFailed(3); /* Maint access lacking*/
      exit stack; /* Return to display error*/
    end
  end


   /* ------------------------------------------------------------*/
   /* PF11 - Request for CHG mode*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf11) /* CHG mode request*/
    if (COMMAREA.CACHGFL != "Y") /* No MNT authority*/

      converseLib.validationFailed(3); /* Maint access lacking*/
      exit stack; /* Display error msg*/
    end
  end


  if (converseVar.eventKey is pf11) /* CHG mode request*/
    if (EP0RW00.EP0RW-TS-PG-RTN-SW == "N") /* No update in progress*/

      EP0RW00.EP0RW-MODE = "C"; /* Change mode*/
   /* keep data in place when going into change mode*/
   /* MOVE 'Y' TO EP0RW00.EP0RW-MAPHDR-CHG-FL;/* New data*/

      return; /* Exit*/

    else
      if (EP0RW00.EP0RW-TS-PG-RTN-SW == "Y") /* If update in session*/

        converseLib.validationFailed(18); /* Select valid w/ENTER*/
        exit stack; /* Exit to display map*/

      end
    end
  end


   /* ------------------------------------------------------------*/
   /* PF9  - Request for INQUIRY mode*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf9) /* Inquiry mode*/

    EP0RS-91000(); /* Purge temp storage*/

    EP0RW00.EP0RW-MODE = "I"; /* Change mode to INQ*/
    EP0RW00.EP0RW-MAPHDR-CHG-FL = "Y"; /* New data*/

    return; /* Exit*/
  end


   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    converseLib.validationFailed(4); /* PA/PF key is not valid*/
    exit stack; /* Exit to display map*/

  end


   /* ------------------------------------------------------------*/
   /* If ENTER key*/
   /* If CHG or ADD mode*/
   /* and update attempt has been made so set the switch*/
   /* that will restore the screen*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter) /* ENTER was pressed*/
    if (EP0RW00.EP0RW-MODE == "I") /* Mode is INQ*/

      EP0RW00.EP0RW-TS-PG-RTN-SW = "N"; /* Clear screen on PA2*/
    else

      if (EP0RW00.TA5TSQIX > 0) /* and no detail data*/
        EP0RW00.EP0RW-TS-PG-RTN-SW = "Y"; /* Restore screen*/
      end
    end
  end


end // end EP0R-30000

// PA2 Cancel Process
Function EP0R-31000()
   /* ------------------------------------------------------------*/
   /* If occur data not entered for update, clear screen, return*/
   /* If update attempt was made restore screen from temp storage*/
   /* ------------------------------------------------------------*/

  COMMAREA.CATOAP = " "; /* TO application*/
  COMMAREA.CAITEM = " "; /* Application data*/

  if (EP0RW00.EP0RW-TS-PG-RTN-SW == "N") /* Clear screen*/

    EP0RW00.EP0RW-FORMAT-SW = "Y"; /* Format the map switch*/
    EP0RW00.EP0RW-DATA-RQST-SW = "N"; /* Request for data switch*/

  else

    /* Reset map fields*/

    EP0RM001.EP0RM-SEL-DC-RSN-TYP-CD = EP0RW00.EP0RM-SEL-DC-RSN-TYP-CD;
    EP0RM001.EP0RM-SEL-DC-RSN-CD = EP0RW00.EP0RM-SEL-DC-RSN-CD;
    EP0RM001.EP0RM-SEL-DC-ADJ-TYP-CD = EP0RW00.EP0RM-SEL-DC-ADJ-TYP-CD;
    EP0RM001.EP0RM-SEL-XIT-CD = EP0RW00.EP0RM-SEL-XIT-CD;
    EP0RM001.EP0RM-SEL-XIR-CD = EP0RW00.EP0RM-SEL-XIR-CD;
    EP0RM001.EP0RM-SEL-INASAID = EP0RW00.EP0RM-SEL-INASAID;


    EP0RW00.EP0RW-IXM = 1; /* Initialize map field index*/

    while (EP0RW00.EP0RW-IXM <= 12) /* while occur is 1 to 12*/
      EP0RS-93000(); /* move ts occur to map occur*/
    end

    EP0RW00.EP0RW-TS-PG-RTN-SW = "N"; /* Update session cancelled*/

  end


end // end EP0R-31000

// Reset highlighted fields
Function EP0R-40000()
   /* ------------------------------------------------------------*/
   /* Reset header attributes*/
   /* Reset attributes for all 12 occurrences*/
   /* Pop-up window XIT CODE*/
   /* Pop-up window XIR CODE*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  EP0RS-94000(); /* Header/trailer attributes*/


   /* ------------------------------------------------------------*/
   /* Set attributes for all 12 occurrences.*/
   /* ------------------------------------------------------------*/

  EP0RW00.EP0RW-IXM = 1; /* Initialize work subscript*/

  while (EP0RW00.EP0RW-IXM <= 12) /* Until end of lines*/

    EP0RS-95000(); /* Set attributes for work sub occur*/
  end


   /* ------------------------------------------------------------*/
   /* Return for Cancel/Scroll*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* If cancel*/

    exit stack; /* exit to converse map*/
  end


   /* ------------------------------------------------------------*/
   /* Pop-up window to obtain XIT Code*/
   /* ------------------------------------------------------------*/

  if (EP0RM001.EP0RM-SEL-XIT-CD == "?") /* XIT Code*/

    EP0R-41000(); /* Pop-up XIT*/
  end


   /* ------------------------------------------------------------*/
   /* Pop-up window to obtain XIR Code*/
   /* ------------------------------------------------------------*/

  if (EP0RM001.EP0RM-SEL-XIR-CD == "?") /* XIR Code*/

    EP0R-42000(); /* Pop-up XIR*/
  end


end // end EP0R-40000

// Pop-up window - XIT Code
Function EP0R-41000()
   /* ------------------------------------------------------------*/
   /* If requested, display the list of XIT Code.*/
   /* ------------------------------------------------------------*/

  XPXX001(); /* Window init*/

  XX0XW02.XX0XWHDR = "XIT TRAN TYPE"; /* Heading*/

  while (XX0XW02.XX0XWEND == "N") /* Until end*/

    XPXIT01(); /* Display list*/
  end

  if (XX0XW02.XX0XWPIX == 0) /* No selection*/

    EP0RM001.EP0RM-SEL-XIT-CD = " "; /* Restore prior*/
  else

    EP0RM001.EP0RM-SEL-XIT-CD = XITTBL.XITCD[XX0XWPIX]; /* Selected value*/
  end


   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/


end // end EP0R-41000

// Pop-up window - XIR Code
Function EP0R-42000()
   /* ------------------------------------------------------------*/
   /* If requested, display the list of XIR Code.*/
   /* ------------------------------------------------------------*/

  XPXX001(); /* Window init*/

  XX0XW02.XX0XWHDR = "XIR TRAN RSN "; /* Heading*/

  while (XX0XW02.XX0XWEND == "N") /* Until end*/

    XPXIR01(); /* Display list*/
  end

  if (XX0XW02.XX0XWPIX == 0) /* No selection*/

    EP0RM001.EP0RM-SEL-XIR-CD = " "; /* Restore prior*/
  else

    EP0RM001.EP0RM-SEL-XIR-CD = XIRTBL.XIRCD[XX0XWPIX]; /* Selected value*/
  end


   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/

  converseLib.clearScreen();
   /* Clear screen before display*/


end // end EP0R-42000

// Verify/edit data
Function EP0R-50000()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* Compare header data for changes*/
   /* If change*/
   /* delete temporary storage*/
   /* ezeflo to EP0R100 to obtain data*/
   /* Preliminary edits of ADD/MNT requests*/
   /* ------------------------------------------------------------*/

  EP0RW00.XXX-MSG-LOC-ID = "5000"; /* Module loc*/

   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CAITEM > " ") /* Application data was entered*/

    set EP0RM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(11); /* Invalid value entered*/

    return;

  end


   /* ------------------------------------------------------------*/
   /* Reset Edit error switch*/
   /* ------------------------------------------------------------*/

  EP0RW00.EP0RW-EDIT-PASS-SW = "Y"; /* Assume edits will pass*/


   /* ------------------------------------------------------------*/
   /* Edit scroll request*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll backward*/
   || converseVar.eventKey is pf8) /* Scroll forward*/

    EP0R-54000(); /* Edit scroll request*/

    return;

  end


   /* ------------------------------------------------------------*/
   /* Compare current map header data with w-s for any changes*/
   /* If hdr data has been changed, set new data switch to 'y'*/
   /* ------------------------------------------------------------*/


   /* * * DCMS REASON TYPE * * **/

  if (EP0RM001.EP0RM-SEL-DC-RSN-TYP-CD <= " " /* Blank*/
   && EP0RW00.EP0RM-SEL-DC-RSN-TYP-CD <= " ") /* No previous*/
      /* next sentence*/
  else
    if (EP0RM001.EP0RM-SEL-DC-RSN-TYP-CD != 
    EP0RW00.EP0RM-SEL-DC-RSN-TYP-CD)

      EP0RW00.EP0RW-MAPHDR-CHG-FL = "Y"; /* New header data*/
    end
  end


   /* * * DCMS REASON CODE * * **/

  if (EP0RM001.EP0RM-SEL-DC-RSN-CD <= " " /* Blank*/
   && EP0RW00.EP0RM-SEL-DC-RSN-CD <= " ") /* No previous*/
      /* next sentence*/
  else
    if (EP0RM001.EP0RM-SEL-DC-RSN-CD != 
    EP0RW00.EP0RM-SEL-DC-RSN-CD)

      EP0RW00.EP0RW-MAPHDR-CHG-FL = "Y"; /* New header data*/
    end
  end


   /* * * DCMS ADJUSTMENT TYPE * * **/

  if (EP0RM001.EP0RM-SEL-DC-ADJ-TYP-CD <= " " /* Blank*/
   && EP0RW00.EP0RM-SEL-DC-ADJ-TYP-CD <= " ") /* No previous*/
      /* next sentence*/
  else
    if (EP0RM001.EP0RM-SEL-DC-ADJ-TYP-CD != 
    EP0RW00.EP0RM-SEL-DC-ADJ-TYP-CD)

      EP0RW00.EP0RW-MAPHDR-CHG-FL = "Y"; /* New header data*/
    end
  end


   /* * * XIT CODE * * **/

  if (EP0RM001.EP0RM-SEL-XIT-CD <= " " /* Blank*/
   && EP0RW00.EP0RM-SEL-XIT-CD <= " ") /* No previous*/
      /* next sentence*/
  else
    if (EP0RM001.EP0RM-SEL-XIT-CD != 
    EP0RW00.EP0RM-SEL-XIT-CD)

      EP0RW00.EP0RW-MAPHDR-CHG-FL = "Y"; /* New header data*/
    end
  end


   /* * * XIR CODE * * **/

  if (EP0RM001.EP0RM-SEL-XIR-CD <= " " /* Blank*/
   && EP0RW00.EP0RM-SEL-XIR-CD <= " ") /* No previous*/
      /* next sentence*/
  else
    if (EP0RM001.EP0RM-SEL-XIR-CD != 
    EP0RW00.EP0RM-SEL-XIR-CD)

      EP0RW00.EP0RW-MAPHDR-CHG-FL = "Y"; /* New header data*/
    end
  end


   /* * * SAS ID * * **/

  if (EP0RM001.EP0RM-SEL-INASAID <= 0 /* Blank*/
   && EP0RW00.EP0RM-SEL-INASAID <= 0) /* No previous*/
      /* next sentence*/
  else
    if (EP0RM001.EP0RM-SEL-INASAID != 
    EP0RW00.EP0RM-SEL-INASAID)

      EP0RW00.EP0RW-MAPHDR-CHG-FL = "Y"; /* New header data*/
    end
  end


   /* ------------------------------------------------------------*/
   /* If any changes or no warehouse entered, edit header data*/
   /* ------------------------------------------------------------*/

  if (EP0RW00.EP0RW-MAPHDR-CHG-FL == "Y") /* There is new data*/

    EP0RW00.EP0RW-TS-PG-RTN-SW = "N"; /* Clear screen on PA2*/
    EP0R-51000(); /* Edit header data*/

    exit stack; /* Return to Main Process*/
  end


   /* ------------------------------------------------------------*/
   /* ezeflo for pf9 request now that hdr change checked*/
   /* ezeflo for Inquiry mode*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf9 /* Hdr chg checked - return*/
   || EP0RW00.EP0RW-MODE == "I")  /* INQ mode - return*/

    exit stack; /* Return to Main Process*/
  end


   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Edit ADD entries from row 12 to row 1*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/

  if (EP0RW00.EP0RW-MODE == "A") /* If mode is ADD*/

    EP0RW00.EP0RW-WORK-CTR = 0; /* Initialize occurs added*/
    EP0RW00.EP0RW-IXM = 13; /* Initialize occur index*/

    while (EP0RW00.EP0RW-IXM > 1)

      EP0R-52000(); /* Edit ADD entries 12 times*/
    end

    if (EP0RW00.EP0RW-WORK-CTR == 0) /* If no entries were added*/

      set EP0RM001.DC-RSN-TYP-CD[1] cursor; /* Csr on 1st detail field*/
      converseLib.validationFailed(5); /* New input required*/
    end

    return; /* Return*/
  end


   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/
   /* Edit CHANGE entries from row 12 to row 1*/
   /* ------------------------------------------------------------*/
   /* ------------------------------------------------------------*/

  if (EP0RW00.EP0RW-MODE == "C") /* If mode is CHANGE*/

    EP0RW00.EP0RW-WORK-CTR = 0; /* Initialize occurs*/
    EP0RW00.EP0RW-IXM = 13; /* Initialize occur index*/

    while (EP0RW00.EP0RW-IXM > 1)

      EP0R-53000(); /* Edit MNT entries 12 times*/
    end

    if (EP0RW00.EP0RW-WORK-CTR == 0) /* If no entries maintained*/

      set EP0RM001.DC-RSN-TYP-CD[1] cursor; /* Csr on 1st detail field*/
      converseLib.validationFailed(5); /* New input required*/
    else
      /* NEXT SENTENCE*/
    end

    return; /* Return*/
  end


end // end EP0R-50000

// Edit Map header data
Function EP0R-51000()
   /* ------------------------------------------------------------*/
   /* EDIT MAP HEADER SELECTION DATA*/
   /* Verify that no detail line fields were changed*/
   /* Delete temp storage for the previous header*/
   /* Clear row and page fields on map*/
   /* Edit header fields*/
   /* NOTE - Selection fields are edited last to first so that*/
   /* the cursor is always placed on the first error.*/
   /* ------------------------------------------------------------*/

  EP0RW00.XXX-MSG-LOC-ID = "5100"; /* Module loc*/

  if (converseVar.validationMsgNum != 0) /* Msg nbr not equal to zero*/
    EP0RW00.EP0RW-EDIT-PASS-SW = "N"; /* Set edit switch to not pass*/

    return; /* Return to process*/
  end


   /* ------------------------------------------------------------*/
   /* Delete temp storage for the previous header*/
   /* Clear row and page fields on map*/
   /* ------------------------------------------------------------*/

  if (EP0RW00.TA5TSQIX > 0) /* If temporary storage exists*/

    EP0RS-91000(); /* Delete temp storage*/
  end

  EP0RM001.MAPLMPNO = 0; /* Current map page*/
  EP0RM001.MAPLMPAG = 0; /* Maximum map page*/

  EP0RW00.EP0RW-IXM = 1; /* Initialize index to 1*/

  while (EP0RW00.EP0RW-IXM <= 12) /* Loop 12 times*/

    EP0RS-93000(); /* Move (empty) temp storage to map*/
  end

  EP0RW00.EP0RW-IXM = 1; /* Initialize index to 1*/

  while (EP0RW00.EP0RW-IXM <= 12) /* Loop 12 times*/

    EP0RS-95000(); /* Reset attributes*/
  end


   /* ------------------------------------------------------------*/
   /* EDIT SETASIDE ID*/
   /* Must exist on DINVNT.VASHDR01*/
   /* ------------------------------------------------------------*/

  if (EP0RM001.EP0RM-SEL-INASAID > 0) /* Entered*/

    set INAREC empty;
    INAREC.INASAID = EP0RM001.EP0RM-SEL-INASAID;
    EP0R-97000(); /* Verify SAS ID*/

    if (SQLCA.VAGen_SQLCODE != 0)
      EP0RW00.EP0RW-EDIT-PASS-SW = "N"; /* Edit failed*/
      set EP0RM001.EP0RM-SEL-INASAID cursor, bold; /* Highligt*/
      converseLib.validationFailed(11); /* Invalid value*/
    end
  end


   /* ------------------------------------------------------------*/
   /* EDIT CORPORATE XIR TRANSACTION REASON CODE*/
   /* ------------------------------------------------------------*/

  if (EP0RM001.EP0RM-SEL-XIR-CD == "  ") /* blank XIR*/
    /* next sentence*/
  else
    if (EP0RM001.EP0RM-SEL-XIR-CD in XIRTBL.XIRCD /* In corp table*/
     && EP0RM001.EP0RM-SEL-XIR-CD > " "           /* Entry present*/
     && EP0RM001.EP0RM-SEL-XIR-CD != "999")       /* Not EOF table*/

      /* next sentence*/

    else
      EP0RW00.EP0RW-EDIT-PASS-SW = "N"; /* Set sw to not pass*/
      set EP0RM001.EP0RM-SEL-XIR-CD cursor, bold; /* highlight*/
      converseLib.validationFailed(11); /* Invalid value*/

    end

  end


   /* ------------------------------------------------------------*/
   /* EDIT CORPORATE XIT TRANSACTION REASON CODE*/
   /* ------------------------------------------------------------*/

  if (EP0RM001.EP0RM-SEL-XIT-CD == "  ") /* blank XIT*/
    /* next sentence*/
  else
    if (EP0RM001.EP0RM-SEL-XIT-CD in XITTBL.XITCD /* In corp table*/
     && EP0RM001.EP0RM-SEL-XIT-CD > " "           /* Entry present*/
     && EP0RM001.EP0RM-SEL-XIT-CD != "99")        /* Not EOF table*/

      /* next sentence*/

    else
      EP0RW00.EP0RW-EDIT-PASS-SW = "N"; /* Set sw to not pass*/
      set EP0RM001.EP0RM-SEL-XIT-CD cursor, bold; /* highlight*/
      converseLib.validationFailed(11); /* Invalid value*/

    end

  end


   /* ------------------------------------------------------------*/
   /* EDIT DC ADJUSTMENT TYPE CODE*/
   /* ------------------------------------------------------------*/

  if (EP0RM001.EP0RM-SEL-DC-ADJ-TYP-CD > " ") /* Not blank*/
    if (EP0RM001.EP0RM-SEL-DC-ADJ-TYP-CD == "I" /* Onhandadjustments*/
     || EP0RM001.EP0RM-SEL-DC-ADJ-TYP-CD == "L") /* Setaside adjustments*/
       /* Next sentence*/
    else
      EP0RW00.EP0RW-EDIT-PASS-SW = "N"; /* Edit failed*/
      set EP0RM001.EP0RM-SEL-DC-ADJ-TYP-CD cursor, bold; /* Highlight error*/
      converseLib.validationFailed(11); /* Invalid value entered*/
    end
  end


   /* ------------------------------------------------------------*/
   /* EDIT DC ADJUSTMENT REASON CODE*/
   /* ------------------------------------------------------------*/

   /* No edits at this time*/


   /* ------------------------------------------------------------*/
   /* EDIT DC ADJUSTMENT REASON TYPE CODE*/
   /* ------------------------------------------------------------*/

   /* No edits at this time*/


   /* ------------------------------------------------------------*/
   /* If header edits pass, then move map to working storage*/
   /* ------------------------------------------------------------*/

  if (EP0RW00.EP0RW-EDIT-PASS-SW == "Y") /* No header errors*/

    EP0RW00.EP0RM-SEL-DC-RSN-TYP-CD = EP0RM001.EP0RM-SEL-DC-RSN-TYP-CD;
    EP0RW00.EP0RM-SEL-DC-RSN-CD = EP0RM001.EP0RM-SEL-DC-RSN-CD;
    EP0RW00.EP0RM-SEL-DC-ADJ-TYP-CD = EP0RM001.EP0RM-SEL-DC-ADJ-TYP-CD;
    EP0RW00.EP0RM-SEL-XIT-CD = EP0RM001.EP0RM-SEL-XIT-CD;
    EP0RW00.EP0RM-SEL-XIR-CD = EP0RM001.EP0RM-SEL-XIR-CD;
    EP0RW00.EP0RM-SEL-INASAID = EP0RM001.EP0RM-SEL-INASAID;
  end


end // end EP0R-51000

// Edit occur detail data for ADD
Function EP0R-52000()
   /* ------------------------------------------------------------*/
   /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
   /* Edit detail entries for ADD function*/
   /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
   /* ------------------------------------------------------------*/

  EP0RW00.XXX-MSG-LOC-ID = "5200"; /* Module loc*/

  EP0RW00.EP0RW-IXM = EP0RW00.EP0RW-IXM - 1; /* Increment index*/


   /* ------------------------------------------------------------*/
   /* Edit for data entered on the line*/
   /* If row not entered then exit*/
   /* ------------------------------------------------------------*/

  if (EP0RM001.DC-RSN-TYP-CD[EP0RW-IXM] <= " "      /* No rsn typ*/
   && EP0RM001.DC-RSN-CD[EP0RW-IXM] <= " "          /* No rsn cd*/
   && EP0RM001.DC-ADJ-TYP-CD[EP0RW-IXM] <= " "      /* No adj typ*/
   && EP0RM001.XIT-TRN-TYP-CD[EP0RW-IXM] <= " "     /* No trn typ*/
   && EP0RM001.XIR-TRN-RSN-CD[EP0RW-IXM] <= " "     /* No rsn cd*/
   && EP0RM001.INASAID[EP0RW-IXM] <= 0              /* No sas id*/
   && EP0RM001.INV-RSN-ADJ-TYP-CD[EP0RW-IXM] <= " " /* No rsn adj typ*/
   && EP0RM001.XXX-STAT[EP0RW-IXM] <= " ")          /* No status*/

    return; /* DO NOT EDIT*/
  end


   /* ------------------------------------------------------------*/
   /* DATA HAS BEEN ENETERED SO INCREMENT COUNTER & BEGIN EDITS*/
   /* ------------------------------------------------------------*/

  EP0RW00.EP0RW-WORK-CTR = EP0RW00.EP0RW-WORK-CTR + 1;


   /* ------------------------------------------------------------*/
   /* Edit STATUS*/
   /* Valid values are 'A' active, 'I' inactive, blank*/
   /* NOTE - Blank status will default to 'A'*/
   /* ------------------------------------------------------------*/

  if (EP0RM001.XXX-STAT[EP0RW-IXM] == "I" /* Inactive*/
   || EP0RM001.XXX-STAT[EP0RW-IXM] == "A") /* Active*/

      /* NEXT SENTENCE*/
  else

    EP0RW00.EP0RW-EDIT-PASS-SW = "N"; /* Flag edit switch*/
    set EP0RM001.XXX-STAT[EP0RW-IXM] cursor, bold; /* Highlight*/
    converseLib.validationFailed(10); /* Invalid entry*/
  end


   /* ------------------------------------------------------------*/
   /* Edit INVENTORY REASON ADJUSTMENT TYPE CODE*/
   /* Valid values are 'M' misc, 'R' receiving, 'B' bypass*/
   /* ------------------------------------------------------------*/

  if (EP0RM001.INV-RSN-ADJ-TYP-CD[EP0RW-IXM] == "M" /* Miscellaneous*/
   || EP0RM001.INV-RSN-ADJ-TYP-CD[EP0RW-IXM] == "R" /* Receiving*/
   || EP0RM001.INV-RSN-ADJ-TYP-CD[EP0RW-IXM] == "B") /* Bypass*/

     /* NEXT SENTENCE*/

  else

    EP0RW00.EP0RW-EDIT-PASS-SW = "N"; /* flag edit sw*/
    set EP0RM001.INV-RSN-ADJ-TYP-CD[EP0RW-IXM] cursor, bold; /* posit & hi csr*/
    converseLib.validationFailed(290); /* invalid frgt bill*/
  end


   /* ------------------------------------------------------------*/
   /* Edit SETASIDE ID - Must exist on DINVNT.VASHDR01*/
   /* ------------------------------------------------------------*/

  if (EP0RM001.INASAID[EP0RW-IXM] > 0) /* Entered*/

    set INAREC empty;
    INAREC.INASAID = EP0RM001.INASAID[EP0RW-IXM]; /* SAS Id*/
    EP0R-97000();

    if (SQLCA.VAGen_SQLCODE != 0)

      EP0RW00.EP0RW-EDIT-PASS-SW = "N"; /* edit sw*/
      set EP0RM001.INASAID[EP0RW-IXM] cursor, bold; /* pos & hi csr*/
      converseLib.validationFailed(291); /* invalid*/

    end

    /* NOTE - DC-ADJ-TYP-CD will be defaulted based on presence of SAS Id*/
  end


   /* ------------------------------------------------------------*/
   /* EDIT CORPORATE XIR TRANSACTION REASON CODE*/
   /* ------------------------------------------------------------*/

  if (EP0RM001.XIR-TRN-RSN-CD[EP0RW-IXM] in XIRTBL.XIRCD /* In corp tbl*/
   && EP0RM001.XIR-TRN-RSN-CD[EP0RW-IXM] > " "           /* Exists*/
   && EP0RM001.XIR-TRN-RSN-CD[EP0RW-IXM] != "999")       /* Not EOF*/

    if (XIRTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* Inactive*/
      EP0RW00.EP0RW-EDIT-PASS-SW = "N"; /* Edit sw*/
      set EP0RM001.XIR-TRN-RSN-CD[EP0RW-IXM] cursor, bold; /* highlight*/
      converseLib.validationFailed(97); /* inactv stat*/
    end
                                                            /* valid XIR*/
  else
    if (EP0RM001.XIR-TRN-RSN-CD[EP0RW-IXM] == "  ") /* blank XIR*/

      EP0RW00.EP0RW-EDIT-PASS-SW = "N"; /* Edit sw*/
      set EP0RM001.XIR-TRN-RSN-CD[EP0RW-IXM] cursor, bold; /* highlight*/
      converseLib.validationFailed(09); /* Required*/

    else
      EP0RW00.EP0RW-EDIT-PASS-SW = "N"; /* Set sw to not pass*/
      set EP0RM001.XIR-TRN-RSN-CD[EP0RW-IXM] cursor, bold; /* highlight*/
      converseLib.validationFailed(292); /* Invalid*/

    end

  end


   /* ------------------------------------------------------------*/
   /* EDIT CORPORATE XIT TRANSACTION REASON CODE*/
   /* ------------------------------------------------------------*/

  if (EP0RM001.XIT-TRN-TYP-CD[EP0RW-IXM] in XITTBL.XITCD /* In corp tbl*/
   && EP0RM001.XIT-TRN-TYP-CD[EP0RW-IXM] > " "           /* Exists*/
   && EP0RM001.XIT-TRN-TYP-CD[EP0RW-IXM] != "99")        /* Not EOF*/

    if (XITTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* Inactive*/

      EP0RW00.EP0RW-EDIT-PASS-SW = "N"; /* Edit sw*/
      set EP0RM001.XIT-TRN-TYP-CD[EP0RW-IXM] cursor, bold; /* highlight*/
      converseLib.validationFailed(96); /* inactv stat*/

    end
                                                            /* valid XIR*/
  else
    if (EP0RM001.XIT-TRN-TYP-CD[EP0RW-IXM] == "  ") /* blank XIT*/

      EP0RW00.EP0RW-EDIT-PASS-SW = "N"; /* Edit sw*/
      set EP0RM001.XIT-TRN-TYP-CD[EP0RW-IXM] cursor, bold; /* highlight*/
      converseLib.validationFailed(09); /* Required*/

    else
      EP0RW00.EP0RW-EDIT-PASS-SW = "N"; /* Set sw to not pass*/
      set EP0RM001.XIT-TRN-TYP-CD[EP0RW-IXM] cursor, bold; /* highlight*/
      converseLib.validationFailed(293); /* Invalid value*/

    end

  end


   /* ------------------------------------------------------------*/
   /* EDIT DC ADJUSTMENT TYPE CODE - Default based on SAS ID*/
   /* !!!!IMPORTANT - THIS EDIT MUST ALWAYS OCCUR AFTER*/
   /* THE EDIT ON SAS ID*/
   /* ------------------------------------------------------------*/

  if (EP0RW00.EP0RW-MODE == "A") /* Add mode*/
    if (EP0RM001.INASAID[EP0RW-IXM] > 0) /* SAS Id present*/
      EP0RM001.DC-ADJ-TYP-CD[EP0RW-IXM] = "L"; /* Onhand adjust*/
    else
      EP0RM001.DC-ADJ-TYP-CD[EP0RW-IXM] = "I"; /* Setaside adjust*/
    end
  end


   /* ------------------------------------------------------------*/
   /* EDIT DC ADJUSTMENT REASON CODE*/
   /* Required key component - Must be present*/
   /* ------------------------------------------------------------*/

  if (EP0RM001.DC-RSN-CD[EP0RW-IXM] > " ") /* Entered*/
    /* next sentence*/
  else

    EP0RW00.EP0RW-EDIT-PASS-SW = "N"; /* Edit sw*/
    set EP0RM001.DC-RSN-CD[EP0RW-IXM] cursor, bold; /* highlight*/
    converseLib.validationFailed(09); /* Required*/

  end


   /* ------------------------------------------------------------*/
   /* EDIT DC ADJUSTMENT REASON TYPE CODE*/
   /* ------------------------------------------------------------*/

  if (EP0RM001.DC-RSN-TYP-CD[EP0RW-IXM] > " ") /* Entered*/
    /* next sentence*/
  else

    EP0RW00.EP0RW-EDIT-PASS-SW = "N"; /* Edit sw*/
    set EP0RM001.DC-RSN-TYP-CD[EP0RW-IXM] cursor, bold; /* highlight*/
    converseLib.validationFailed(09); /* Required*/

  end


end // end EP0R-52000

// Edit occur detail data for MNT
Function EP0R-53000()
   /* ------------------------------------------------------------*/
   /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
   /* Edit detail entries for MNT function*/
   /* NOTE - DC-RSN-TYP-CD, DC-RSN-CD, DC-ADJ-TYP-CD*/
   /* are key fields and cannot be changed.*/
   /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -*/
   /* ------------------------------------------------------------*/

  EP0RW00.XXX-MSG-LOC-ID = "5300"; /* Module loc*/

  EP0RW00.EP0RW-IXM = EP0RW00.EP0RW-IXM - 1; /* Increment occur index*/


   /* ------------------------------------------------------------*/
   /* Edit for data entered on the line*/
   /* ------------------------------------------------------------*/

  if (EP0RW01.EP0RW-LN-USED-FL[EP0RW-IXM] <= " ") /* No data on line*/

    return; /* Do not edit fields*/

  end


   /* ------------------------------------------------------------*/
   /* Compare data with temporary storage*/
   /* If different (or data was changed)*/
   /* add 1 to counter which shows data was changed*/
   /* else*/
   /* return*/
   /* ------------------------------------------------------------*/

  if (EP0RM001.XIT-TRN-TYP-CD[EP0RW-IXM]    
   == EP0RW01.XIT-TRN-TYP-CD[EP0RW-IXM]     /* Trans type*/
   && EP0RM001.XIR-TRN-RSN-CD[EP0RW-IXM]    
   == EP0RW01.XIR-TRN-RSN-CD[EP0RW-IXM]     /* Trans reason*/
   && EP0RM001.INASAID[EP0RW-IXM]           
   == EP0RW01.INASAID[EP0RW-IXM]            /* Setaside Id*/
   && EP0RM001.INV-RSN-ADJ-TYP-CD[EP0RW-IXM]
   == EP0RW01.INV-RSN-ADJ-TYP-CD[EP0RW-IXM] /* DC reason type*/
   && EP0RM001.XXX-STAT[EP0RW-IXM]          
   == EP0RW01.XXX-STAT[EP0RW-IXM])          /* Status*/

    return; /* No chg, return*/

  else

    EP0RW00.EP0RW-WORK-CTR = EP0RW00.EP0RW-WORK-CTR + 1; /* Change counter*/

  end


   /* ------------------------------------------------------------*/
   /* Edit STATUS*/
   /* Valid values are 'A' active, 'I' inactive, blank*/
   /* NOTE - Blank status will default to 'A'*/
   /* ------------------------------------------------------------*/

  if (EP0RM001.XXX-STAT[EP0RW-IXM] == "I" /* Inactive*/
   || EP0RM001.XXX-STAT[EP0RW-IXM] == "A") /* Active*/

      /* NEXT SENTENCE*/

  else

    EP0RW00.EP0RW-EDIT-PASS-SW = "N"; /* Flag edit switch*/
    set EP0RM001.XXX-STAT[EP0RW-IXM] cursor, bold; /* Highlight*/
    converseLib.validationFailed(10); /* Invalid entry*/
  end


   /* ------------------------------------------------------------*/
   /* Edit INVENTORY REASON ADJUSTMENT TYPE CODE*/
   /* Valid values are 'M' misc, 'R' receiving, 'B' bypass*/
   /* ------------------------------------------------------------*/

  if (EP0RM001.INV-RSN-ADJ-TYP-CD[EP0RW-IXM] == "M" /* Miscellaneous*/
   || EP0RM001.INV-RSN-ADJ-TYP-CD[EP0RW-IXM] == "R" /* Receiving*/
   || EP0RM001.INV-RSN-ADJ-TYP-CD[EP0RW-IXM] == "B") /* Bypass*/

     /* NEXT SENTENCE*/

  else

    EP0RW00.EP0RW-EDIT-PASS-SW = "N"; /* flag edit sw*/
    set EP0RM001.INV-RSN-ADJ-TYP-CD[EP0RW-IXM] cursor, bold; /* posit & hi csr*/
    converseLib.validationFailed(290); /* invalid frgt bill*/
  end


   /* ------------------------------------------------------------*/
   /* Edit SETASIDE ID - Must exist on DINVNT.VASHDR01*/
   /* ------------------------------------------------------------*/

  if (EP0RM001.INASAID[EP0RW-IXM] > 0) /* SAS Entered*/

    set INAREC empty;
    INAREC.INASAID = EP0RM001.INASAID[EP0RW-IXM]; /* SAS Id*/
    EP0R-97000();

    if (SQLCA.VAGen_SQLCODE != 0)

      EP0RW00.EP0RW-EDIT-PASS-SW = "N"; /* edit sw*/
      set EP0RM001.INASAID[EP0RW-IXM] cursor, bold; /* pos & hi csr*/
      converseLib.validationFailed(291); /* invalid*/

    end

    if (EP0RM001.DC-ADJ-TYP-CD[EP0RW-IXM] == "I") /* Onhand adj*/

      EP0RW00.EP0RW-EDIT-PASS-SW = "N"; /* Edit sw*/
      set EP0RM001.DC-ADJ-TYP-CD[EP0RW-IXM] bold; /* Highlight*/
      set EP0RM001.INASAID[EP0RW-IXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(294); /* Required*/

    end

  else /* SAS Id = 0*/

    if (EP0RM001.DC-ADJ-TYP-CD[EP0RW-IXM] == "L") /* Onhand adj*/

      EP0RW00.EP0RW-EDIT-PASS-SW = "N"; /* Edit sw*/
      set EP0RM001.DC-ADJ-TYP-CD[EP0RW-IXM] bold; /* Highlight*/
      set EP0RM001.INASAID[EP0RW-IXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(295); /* Can't be 0*/

    end

  end


   /* ------------------------------------------------------------*/
   /* EDIT CORPORATE XIR TRANSACTION REASON CODE*/
   /* ------------------------------------------------------------*/

  if (EP0RM001.XIR-TRN-RSN-CD[EP0RW-IXM] in XIRTBL.XIRCD /* In corp tbl*/
   && EP0RM001.XIR-TRN-RSN-CD[EP0RW-IXM] > " "           /* Exists*/
   && EP0RM001.XIR-TRN-RSN-CD[EP0RW-IXM] != "999")       /* Not EOF*/

    if (XIRTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* Inactive*/

      EP0RW00.EP0RW-EDIT-PASS-SW = "N"; /* Edit sw*/
      set EP0RM001.XIR-TRN-RSN-CD[EP0RW-IXM] cursor, bold; /* highlight*/
      converseLib.validationFailed(97); /* inactv stat*/

    end

  else
    if (EP0RM001.XIR-TRN-RSN-CD[EP0RW-IXM] == "  ") /* blank XIR*/

      EP0RW00.EP0RW-EDIT-PASS-SW = "N"; /* Edit sw*/
      set EP0RM001.XIR-TRN-RSN-CD[EP0RW-IXM] cursor, bold; /* highlight*/
      converseLib.validationFailed(09); /* Required*/

    else
      EP0RW00.EP0RW-EDIT-PASS-SW = "N"; /* Set sw to not pass*/
      set EP0RM001.XIR-TRN-RSN-CD[EP0RW-IXM] cursor, bold; /* highlight*/
      converseLib.validationFailed(292); /* Invalid value*/

    end

  end


   /* ------------------------------------------------------------*/
   /* EDIT CORPORATE XIT TRANSACTION REASON CODE*/
   /* ------------------------------------------------------------*/

  if (EP0RM001.XIT-TRN-TYP-CD[EP0RW-IXM] in XITTBL.XITCD /* In corp tbl*/
   && EP0RM001.XIT-TRN-TYP-CD[EP0RW-IXM] > " "           /* Exists*/
   && EP0RM001.XIT-TRN-TYP-CD[EP0RW-IXM] != "99")        /* Not EOF*/

    if (XITTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* Inactive*/

      EP0RW00.EP0RW-EDIT-PASS-SW = "N"; /* Edit sw*/
      set EP0RM001.XIT-TRN-TYP-CD[EP0RW-IXM] cursor, bold; /* highlight*/
      converseLib.validationFailed(96); /* inactv stat*/

    end

  else
    if (EP0RM001.XIT-TRN-TYP-CD[EP0RW-IXM] == "  ") /* blank XIT*/

      EP0RW00.EP0RW-EDIT-PASS-SW = "N"; /* Edit sw*/
      set EP0RM001.XIT-TRN-TYP-CD[EP0RW-IXM] cursor, bold; /* highlight*/
      converseLib.validationFailed(09); /* Required*/

    else
      EP0RW00.EP0RW-EDIT-PASS-SW = "N"; /* Set sw to not pass*/
      set EP0RM001.XIT-TRN-TYP-CD[EP0RW-IXM] cursor, bold; /* highlight*/
      converseLib.validationFailed(293); /* Invalid value*/

    end

  end


end // end EP0R-53000

// Verify scroll request
Function EP0R-54000()
   /* ------------------------------------------------------------*/
   /* Verify scroll request*/
   /* For backward request, test that prev page exists*/
   /* For forward request, test that next page exists*/
   /* Verify that no hdr or line flds were changed*/
   /* ------------------------------------------------------------*/

  EP0RW00.XXX-MSG-LOC-ID = "5400"; /* Module loc*/

   /* ------------------------------------------------------------*/
   /* Scrolling invalid on add screen*/
   /* ------------------------------------------------------------*/

  if (EP0RW00.EP0RW-MODE == "A") /* Add*/

    converseLib.validationFailed(394); /* Cannot scroll on add screen*/
    return; /* Return*/

  end


   /* ------------------------------------------------------------*/
   /* Backward scrolling*/
   /* Test that prev page exists*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* If scroll backward request*/

    if (EP0RW00.XXXTSPAG <= 1) /* If already on page one*/
      EP0RW00.XXXTSPAG = 1; /* Safety reset*/
      converseLib.validationFailed(07); /* Unable to scroll backward*/

      return; /* Return*/
    end

  end


   /* ------------------------------------------------------------*/
   /* Forward scrolling*/
   /* Test that next page exists*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward request*/

    if (EP0RW00.XXXTSPAG >= EP0RW00.TA5TSQIX) /* if on last page*/
      EP0RW00.XXXTSPAG = EP0RW00.TA5TSQIX; /* Safety reset*/
      converseLib.validationFailed(08); /* Can't scroll forward*/

      return; /* Return*/
    end

  end


   /* ------------------------------------------------------------*/
   /* Make sure that no hdr or line fields were changed*/
   /* ------------------------------------------------------------*/

  EP0R-54100(); /* Test for CHGS*/


   /* * * XIR CODE * * **/

  if (EP0RM001.EP0RM-SEL-XIR-CD != EP0RW00.EP0RM-SEL-XIR-CD)

    set EP0RM001.EP0RM-SEL-XIR-CD cursor, bold; /* Highlight*/
    converseLib.validationFailed(18); /* Only w/<ENTER>*/
  end


   /* * * XIT CODE * * **/

  if (EP0RM001.EP0RM-SEL-XIT-CD != EP0RW00.EP0RM-SEL-XIT-CD)

    set EP0RM001.EP0RM-SEL-XIT-CD cursor, bold; /* Highlight*/
    converseLib.validationFailed(18); /* Only w/<ENTER>*/
  end


   /* * * DC ADJUSTMENT TYPE CODE * * **/

  if (EP0RM001.EP0RM-SEL-DC-ADJ-TYP-CD != 
  EP0RW00.EP0RM-SEL-DC-ADJ-TYP-CD)

    set EP0RM001.EP0RM-SEL-DC-ADJ-TYP-CD cursor, bold; /* Highlight*/
    converseLib.validationFailed(18); /* Only w/<ENTER>*/
  end


   /* * * DC REASON CODE * * **/

  if (EP0RM001.EP0RM-SEL-DC-RSN-CD != EP0RW00.EP0RM-SEL-DC-RSN-CD)

    set EP0RM001.EP0RM-SEL-DC-RSN-CD cursor, bold; /* Highlight*/
    converseLib.validationFailed(18); /* Only w/<ENTER>*/
  end


   /* * * DC REASON TYPE CODE * * **/

  if (EP0RM001.EP0RM-SEL-DC-RSN-TYP-CD != EP0RW00.EP0RM-SEL-DC-RSN-TYP-CD)

    set EP0RM001.EP0RM-SEL-DC-RSN-TYP-CD cursor, bold; /* Highlight*/
    converseLib.validationFailed(18); /* Only w/<ENTER>*/
  end


end // end EP0R-54000

// Verify scroll request
Function EP0R-54100()
   /* ------------------------------------------------------------*/
   /* Verify that line fields were not changed*/
   /* Executed for:*/
   /* Paging request (PF7, PF8)*/
   /* Header fields changed (select rows for new screen)*/
   /* ------------------------------------------------------------*/

  EP0RW00.XXX-MSG-LOC-ID = "5410"; /* Module loc*/

  EP0RW00.EP0RW-IXM = 12; /* Line index*/

  while (EP0RW-IXM > 0)


     /* * * * STATUS CHANGED * * **/

    if (EP0RM001.XXX-STAT[EP0RW-IXM] != EP0RW01.XXX-STAT[EP0RW-IXM])

      set EP0RM001.XXX-STAT[EP0RW-IXM] cursor, bold;
      converseLib.validationFailed(264); /* Chg not ok*/
    end


     /* * * INVENTORY REASON ADJUSTMENT TYPE CODE * * **/

    if (EP0RM001.INV-RSN-ADJ-TYP-CD[EP0RW-IXM] != 
    EP0RW01.INV-RSN-ADJ-TYP-CD[EP0RW-IXM])

      set EP0RM001.INV-RSN-ADJ-TYP-CD[EP0RW-IXM] cursor, bold;
      converseLib.validationFailed(264); /* Chg not ok*/
    end


     /* * * SETASIDE ID * * **/

    if (EP0RM001.INASAID[EP0RW-IXM] != EP0RW01.INASAID[EP0RW-IXM])

      set EP0RM001.INASAID[EP0RW-IXM] cursor, bold;
      converseLib.validationFailed(264); /* Chg not ok*/
    end


     /* * * TRANSACTION REASON CODE * * **/

    if (EP0RM001.XIR-TRN-RSN-CD[EP0RW-IXM] != 
    EP0RW01.XIR-TRN-RSN-CD[EP0RW-IXM])

      set EP0RM001.XIR-TRN-RSN-CD[EP0RW-IXM] cursor, bold;
      converseLib.validationFailed(264); /* Chg not ok*/
    end


     /* * * TRANSACTION TYPE CODE * * **/

    if (EP0RM001.XIT-TRN-TYP-CD[EP0RW-IXM] != 
    EP0RW01.XIT-TRN-TYP-CD[EP0RW-IXM])

      set EP0RM001.XIT-TRN-TYP-CD[EP0RW-IXM] cursor, bold;
      converseLib.validationFailed(264); /* Chg not ok*/
    end


     /* * * DC REASON CODE * * **/

    if (EP0RM001.DC-RSN-CD[EP0RW-IXM] != EP0RW01.DC-RSN-CD[EP0RW-IXM])

      set EP0RM001.DC-RSN-CD[EP0RW-IXM] cursor, bold;
      converseLib.validationFailed(264); /* Chg not ok*/
    end


     /* * * DC REASON TYPE CODE * * **/

    if (EP0RM001.DC-RSN-TYP-CD[EP0RW-IXM] != 
    EP0RW01.DC-RSN-TYP-CD[EP0RW-IXM])

      set EP0RM001.DC-RSN-TYP-CD[EP0RW-IXM] cursor, bold;
      converseLib.validationFailed(264); /* Chg not ok*/
    end


    EP0RW00.EP0RW-IXM = EP0RW00.EP0RW-IXM - 1; /* Line index*/

  end


end // end EP0R-54100

// Process valid input request
Function EP0R-60000()
   /* ------------------------------------------------------------*/
   /* Apply database updates*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Test return conditions*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0 /* If error message or*/
   || EP0RW00.EP0RW-EDIT-PASS-SW == "N") /* Or edit error*/

    exit stack; /* Return*/
  end


   /* ------------------------------------------------------------*/
   /* Process valid scroll backward request*/
   /* Decrement page number and return to prev process*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll backward*/

    EP0RW00.EP0RW-FORMAT-SW = "Y"; /* Format map switch*/

    EP0RW00.XXXTSPAG = EP0RW00.XXXTSPAG - 1; /* Subtract 1 from page*/

    return; /* Return*/

  end


   /* ------------------------------------------------------------*/
   /* Process valid scroll forward request*/
   /* Increment page number and return to prev process*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward*/

    EP0RW00.EP0RW-FORMAT-SW = "Y"; /* Format map switch*/

    EP0RW00.XXXTSPAG = EP0RW00.XXXTSPAG + 1; /* Add 1 to page*/

    return; /* Return*/

  end


   /* ------------------------------------------------------------*/
   /* Apply ADD to DCMS Inv Adjustment Reasons Table*/
   /* ------------------------------------------------------------*/

  if (EP0RW00.EP0RW-MODE == "A") /* If ADD request*/

    EP0R-61000();

    return; /* Return*/

  end


   /* ------------------------------------------------------------*/
   /* Apply MNT to DCMS Inv Adjustment Reasons Table*/
   /* ------------------------------------------------------------*/

  if (EP0RW00.EP0RW-MODE == "C") /* If MNT request*/

    EP0R-62000();

    return; /* Return*/

  end


end // end EP0R-60000

// Process ADD request
Function EP0R-61000()
   /* ------------------------------------------------------------*/
   /* Process ADD request*/

   /* Add occurs to DCMS INV ADJ REASONS database (loop 12 times)*/
   /* If errors then rollback else commit each add*/
   /* Delete temp storage - it will be rebuilt in EP0R-1000*/
   /* Send 'transaction completed' message*/
   /* ------------------------------------------------------------*/

  EP0RW00.XXX-MSG-LOC-ID = "6100"; /* Module loc*/

  EP0RW00.EP0RW-IXM = 1; /* Initialize index*/

  while (EP0RW00.EP0RW-IXM < 13 /* Loop 12 times*/
   && EP0RW00.EP0RW-EDIT-PASS-SW == "Y") /* No ADD error*/

    EP0R-61100(); /* Add records to database*/

    EP0RW00.EP0RW-IXM = EP0RW00.EP0RW-IXM + 1; /* Increment index*/

  end


   /* -----------------------------------------------------------*/
   /* TEST SWITCH*/
   /* IF ERRORS, ROLLBACK THE ADDS, ELSE COMMIT*/
   /* ------------------------------------------------------------*/

  if (EP0RW00.EP0RW-EDIT-PASS-SW == "N") /* ADD error*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    exit stack; /* Return and send message*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* Commit all ADDs*/

  end


   /* -----------------------------------------------------------*/
   /* Delete temporary storage*/
   /* Move 'transaction complete' message*/
   /* ------------------------------------------------------------*/


  EP0RS-91000(); /* Delete temp storage*/

  converseLib.validationFailed(21); /* Entries added*/

  EP0RW00.EP0RW-TS-PG-RTN-SW = "N"; /* Update not pending*/
  EP0RW00.EP0RW-ADD-FL = "N"; /* Add complete*/


end // end EP0R-61000

// ADD record(s) to TDCRSN00
Function EP0R-61100()
   /* ------------------------------------------------------------*/
   /* Test for presence of entry*/
   /* ------------------------------------------------------------*/

  EP0RW00.XXX-MSG-LOC-ID = "6110"; /* Module loc*/

  if (EP0RM001.DC-RSN-TYP-CD[EP0RW-IXM] <= " ") /* If there is no entry*/

    return; /* Leave loop*/
  end


   /* ------------------------------------------------------------*/
   /* ADD to DCMS INVENTORY ADJUSTMENT REASONS table*/
   /* ------------------------------------------------------------*/

  set VDCRSN01 empty; /* Clear rec*/

  VDCRSN01.DC-RSN-TYP-CD = EP0RM001.DC-RSN-TYP-CD[EP0RW-IXM]; /* DC rsn typ*/
  VDCRSN01.DC-RSN-CD = EP0RM001.DC-RSN-CD[EP0RW-IXM]; /* DC rsn*/
  VDCRSN01.DC-ADJ-TYP-CD = EP0RM001.DC-ADJ-TYP-CD[EP0RW-IXM]; /* DC adj typ*/
  VDCRSN01.XIT-TRN-TYP-CD = EP0RM001.XIT-TRN-TYP-CD[EP0RW-IXM]; /* XIT trn typ*/
  VDCRSN01.XIR-TRN-RSN-CD = EP0RM001.XIR-TRN-RSN-CD[EP0RW-IXM]; /* XIR trn rsn*/
  VDCRSN01.INASAID = EP0RM001.INASAID[EP0RW-IXM]; /* SAS Id*/
  VDCRSN01.INV-RSN-ADJ-TYP-CD = EP0RM001.INV-RSN-ADJ-TYP-CD[EP0RW-IXM]; /* Inv rsn adj*/

  VDCRSN01.XXX-STAT = EP0RM001.XXX-STAT[EP0RW-IXM]; /* Status*/

  VDCRSN01.XXX-USER-ID = COMMAREA.CAUSERID; /* RACF User*/


   /* ------------------------------------------------------------*/
   /* Obtain and format date and time fields; change count*/
   /* ------------------------------------------------------------*/

  VDCRSN01.ZZZCHGCT = 0; /* Change cnt*/

  XX0XS01(); /* Obtain data and time*/

  VDCRSN01.ZZZSDT = XX0XW01.XX0XWDAT; /* Setup date*/
  VDCRSN01.ZZZSTM = XX0XW01.XX0XWTIM; /* Setup time*/
  VDCRSN01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change date*/
  VDCRSN01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Time*/


   /* ------------------------------------------------------------*/
   /* Add database record*/
   /* ------------------------------------------------------------*/

  try
    call "VDCRSN01" ("A ", SQLCA, VDCRSN01) {isNoRefresh = yes, isExternal = yes};
  end /* Add row*/


   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return*/

      return; /* Return*/

    else
      if (SQLCA.VAGen_SQLCODE == -803) /* Duplicate*/

        converseLib.validationFailed(45); /* Duplicate data*/
        EP0RW00.EP0RW-EDIT-PASS-SW = "N"; /* Edit switch*/

         /* Highlight the duplicate row*/

        set EP0RM001.DC-RSN-TYP-CD[EP0RW-IXM] cursor, bold;
        set EP0RM001.DC-RSN-CD[EP0RW-IXM] bold;
        set EP0RM001.DC-ADJ-TYP-CD[EP0RW-IXM] bold;

        return; /* Return to previous process*/
      end
    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen*/

  end


  TA1REC.TA1TYPE = "DB2 "; /* Error type*/
  TA1REC.TA1LOC = "ADD DCMS INV ADJ REASON      ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program*/
  TA1REC.TA1PGMNO = EP0RW00.XXX-MSG-LOC-ID; /* Module*/
  TA1REC.TA1DBASE = "DINVNT  "; /* Data base*/
  TA1REC.TA1TBLVU = "VDCRSN01"; /* Table view*/

  EP0RW00.DC-RSN-TYP-CD = EP0RM001.DC-RSN-TYP-CD[EP0RW-IXM];
  EP0RW00.DC-RSN-CD = EP0RM001.DC-RSN-CD[EP0RW-IXM];
  EP0RW00.DC-ADJ-TYP-CD = EP0RM001.DC-ADJ-TYP-CD[EP0RW-IXM];
  TA1REC.TA1TBLKE = EP0RW00.EP0RW-RSN-KEY-GROUP; /* Unique key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Err routine*/

  exit stack; /* Exit to map*/


end // end EP0R-61100

// Process MNT request
Function EP0R-62000()
   /* ------------------------------------------------------------*/
   /* Process MNT request*/
   /*  */
   /* Update the DCMS inventory adjustment reasons table (loop 12 times)*/
   /* if errors then rollback else commit updates*/
   /* Move map row to temporary storage work row (loop 12 times)*/
   /* Rewrite temporary storage*/
   /* Send 'transaction complete' message*/
   /* ------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* MNT occurs to DCMS Inventory Adjustment Reasons table*/
   /* ------------------------------------------------------------*/

  EP0RW00.EP0RW-IXM = 13; /* Initialize index*/

  while (EP0RW00.EP0RW-IXM > 1) /* Read current page*/

    EP0R-62100(); /* MNT records to database*/
  end


   /* ------------------------------------------------------------*/
   /* Test switch*/
   /* If errors, rollback the MNTs, else commit*/
   /* ------------------------------------------------------------*/

  if (EP0RW00.EP0RW-EDIT-PASS-SW == "N") /* MNT error*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/
    exit stack; /* Return and send message*/
  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.commit(); /* Commit all MNTs*/
  end


   /* ------------------------------------------------------------*/
   /* Update the temporary storage page*/
   /* ------------------------------------------------------------*/

  EP0RW00.EP0RW-IXM = 0; /* Set index*/

  while (EP0RW-IXM < 12) /* Loop 12 times*/

    EP0R-62200(); /* Prepare to update Temp storage*/
  end

  EP0R-62300(); /* rewrite temporary storage*/


   /* ------------------------------------------------------------*/
   /* Test switch*/
   /* If no errors, move 'Transaction completed' msg and send*/
   /* last page*/
   /* ------------------------------------------------------------*/

  if (EP0RW00.EP0RW-EDIT-PASS-SW == "N" /* MNT error*/
   || converseVar.validationMsgNum != 0) /* Error message*/

    exit stack; /* Return to send message*/
  end

  converseLib.validationFailed(20); /* Transaction completed*/

   /* MOVE ' ' TO EP0RW00.EP0RM-SEL-DC-RSN-TYP-CD;*/
   /* MOVE ' ' TO EP0RW00.EP0RM-SEL-DC-RSN-CD;*/
   /* MOVE ' ' TO EP0RW00.EP0RM-SEL-DC-ADJ-TYP-CD;*/
   /* MOVE ' ' TO EP0RW00.EP0RM-SEL-XIT-CD;*/
   /* MOVE ' ' TO EP0RW00.EP0RM-SEL-XIT-CD;*/
   /* MOVE ' ' TO EP0RW00.EP0RM-SEL-INASAID;*/

  EP0RW00.EP0RW-TS-PG-RTN-SW = "N"; /* PA2 cancel will clear screen*/


end // end EP0R-62000

// CHG record(s) on TDCRSN00
Function EP0R-62100()
   /* ------------------------------------------------------------*/
   /* Chg record(s) on DCSM Inv Adj Rsn table - performed 12 times*/
   /*  */
   /* Test row for entry or change - ezertn if no new data*/
   /*  */
   /* Read unique for zzzchgct compare*/
   /* if record not found, it has been deleted*/
   /* if zzzchgct not match, it has since been updated*/
   /*  */
   /* Move map row to VDCRSN01*/
   /* Obtain data and time*/
   /* Update VDCRSN01 table*/
   /*  */
   /* Increment temporary storage zzzchgct*/
   /*  */
   /* ------------------------------------------------------------*/

  EP0RW00.XXX-MSG-LOC-ID = "6210"; /* Module loc*/

  EP0RW00.EP0RW-IXM = EP0RW00.EP0RW-IXM - 1; /* Decrement counter*/


   /* ------------------------------------------------------------*/
   /* Test for entry - if row not entered then leave loop*/
   /* ------------------------------------------------------------*/

  if (EP0RW01.EP0RW-LN-USED-FL[EP0RW-IXM] <= " ") /* If no entry*/
    return; /* Leave loop*/
  end


   /* ------------------------------------------------------------*/
   /* Compare map with temp storage for change*/
   /* If no difference then leave loop*/
   /* ------------------------------------------------------------*/

  if (EP0RM001.DC-RSN-TYP-CD[EP0RW-IXM]
   == EP0RW01.DC-RSN-TYP-CD[EP0RW-IXM]
   && EP0RM001.DC-RSN-CD[EP0RW-IXM]
   == EP0RW01.DC-RSN-CD[EP0RW-IXM]
   && EP0RM001.DC-ADJ-TYP-CD[EP0RW-IXM]
   == EP0RW01.DC-ADJ-TYP-CD[EP0RW-IXM]
   && EP0RM001.XIT-TRN-TYP-CD[EP0RW-IXM]
   == EP0RW01.XIT-TRN-TYP-CD[EP0RW-IXM]
   && EP0RM001.XIR-TRN-RSN-CD[EP0RW-IXM]
   == EP0RW01.XIR-TRN-RSN-CD[EP0RW-IXM]
   && EP0RM001.INASAID[EP0RW-IXM]
   == EP0RW01.INASAID[EP0RW-IXM]
   && EP0RM001.INV-RSN-ADJ-TYP-CD[EP0RW-IXM]
   == EP0RW01.INV-RSN-ADJ-TYP-CD[EP0RW-IXM]
   && EP0RM001.XXX-STAT[EP0RW-IXM]
   == EP0RW01.XXX-STAT[EP0RW-IXM])

    return; /* No change, leave loop*/

  end


   /* ------------------------------------------------------------*/
   /* Maintenance to DCMS inventory adjustment reasons table*/
   /* ------------------------------------------------------------*/

  VDCRSN01.DC-RSN-TYP-CD = EP0RM001.DC-RSN-TYP-CD[EP0RW-IXM];
  VDCRSN01.DC-RSN-CD = EP0RM001.DC-RSN-CD[EP0RW-IXM];
  VDCRSN01.DC-ADJ-TYP-CD = EP0RM001.DC-ADJ-TYP-CD[EP0RW-IXM];
  VDCRSN01.XIT-TRN-TYP-CD = EP0RM001.XIT-TRN-TYP-CD[EP0RW-IXM];
  VDCRSN01.XIR-TRN-RSN-CD = EP0RM001.XIR-TRN-RSN-CD[EP0RW-IXM];
  VDCRSN01.INASAID = EP0RM001.INASAID[EP0RW-IXM];
  VDCRSN01.INV-RSN-ADJ-TYP-CD = EP0RM001.INV-RSN-ADJ-TYP-CD[EP0RW-IXM];

  if (EP0RM001.XXX-STAT[EP0RW-IXM] == " ") /* Active default*/
    EP0RM001.XXX-STAT[EP0RW-IXM] = "A";
  end
  VDCRSN01.XXX-STAT = EP0RM001.XXX-STAT[EP0RW-IXM];

  VDCRSN01.XXX-USER-ID = COMMAREA.CAUSERID;


   /* ------------------------------------------------------------*/
   /* Obtain the current data and time; move userid*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Obtain data and time*/

  VDCRSN01.ZZZCHGDT = XX0XW01.XX0XWDAT; /* Change Date*/
  VDCRSN01.ZZZCHGTM = XX0XW01.XX0XWTIM; /* Change Time*/


   /* ------------------------------------------------------------*/
   /* Set change count before update*/
   /* ------------------------------------------------------------*/
  VDCRSN01.ZZZCHGCT = EP0RW01.ZZZCHGCT[EP0RW-IXM]; /* Change count*/


   /* ------------------------------------------------------------*/
   /* Mnt database record*/
   /* ------------------------------------------------------------*/

  try
    call "VDCRSN01" ("U ", SQLCA, VDCRSN01) {isNoRefresh = yes, isExternal = yes};
  end /* Update*/


   /* ------------------------------------------------------------*/
   /* If successful, update temp storage zzzchgct and return*/
   /* ------------------------------------------------------------*/


  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      EP0RW01.ZZZCHGCT[EP0RW-IXM] = EP0RW01.ZZZCHGCT[EP0RW-IXM] + 1;

      return; /* Return to previous process*/
    end

  end


  converseLib.validationFailed(01); /* Unexpected error*/

  EP0RW00.EP0RW-EDIT-PASS-SW = "N"; /* Edit switch*/


  set EP0RM001.DC-RSN-TYP-CD[EP0RW-IXM] bold;
  set EP0RM001.DC-RSN-CD[EP0RW-IXM] bold;
  set EP0RM001.DC-ADJ-TYP-CD[EP0RW-IXM] bold;
  set EP0RM001.XIT-TRN-TYP-CD[EP0RW-IXM] bold;
  set EP0RM001.XIR-TRN-RSN-CD[EP0RW-IXM] bold;
  set EP0RM001.INASAID[EP0RW-IXM] bold;
  set EP0RM001.INV-RSN-ADJ-TYP-CD[EP0RW-IXM] bold;
  set EP0RM001.XXX-STAT[EP0RW-IXM] bold;


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen before display*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "MNT DCMS INV ADJ REASONS TBL ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program*/
  TA1REC.TA1PGMNO = EP0RW00.XXX-MSG-LOC-ID; /* Program number*/
  TA1REC.TA1DBASE = "DINVNT  "; /* Database*/
  TA1REC.TA1TBLVU = "VDCRSN01"; /* Table view*/

  EP0RW00.DC-RSN-TYP-CD = EP0RM001.DC-RSN-TYP-CD[EP0RW-IXM];
  EP0RW00.DC-RSN-CD = EP0RM001.DC-RSN-CD[EP0RW-IXM];
  EP0RW00.DC-ADJ-TYP-CD = EP0RM001.DC-ADJ-TYP-CD[EP0RW-IXM];
  TA1REC.TA1TBLKE = EP0RW00.EP0RW-RSN-KEY-GROUP; /* Unique key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  exit stack; /* Exit to map*/


end // end EP0R-62100

// Move rows to Temp storage
Function EP0R-62200()
   /* ------------------------------------------------------------*/
   /* Update temp storage*/
   /* ------------------------------------------------------------*/

  EP0RW00.EP0RW-IXM = EP0RW00.EP0RW-IXM + 1; /* Increment index*/


   /* ------------------------------------------------------------*/
   /* Test for entry*/
   /* ------------------------------------------------------------*/

  if (EP0RM001.DC-RSN-TYP-CD[EP0RW-IXM] == " ") /* If there is no entry*/

    return; /* Leave loop*/
  end


   /* ------------------------------------------------------------*/
   /* Move map fields to TS work area*/
   /* ------------------------------------------------------------*/

  EP0RW01.DC-RSN-TYP-CD[EP0RW-IXM] = EP0RM001.DC-RSN-TYP-CD[EP0RW-IXM];
  EP0RW01.DC-RSN-CD[EP0RW-IXM] = EP0RM001.DC-RSN-CD[EP0RW-IXM];
  EP0RW01.DC-ADJ-TYP-CD[EP0RW-IXM] = EP0RM001.DC-ADJ-TYP-CD[EP0RW-IXM];
  EP0RW01.XIT-TRN-TYP-CD[EP0RW-IXM] = EP0RM001.XIT-TRN-TYP-CD[EP0RW-IXM];
  EP0RW01.XIR-TRN-RSN-CD[EP0RW-IXM] = EP0RM001.XIR-TRN-RSN-CD[EP0RW-IXM];
  EP0RW01.INASAID[EP0RW-IXM] = EP0RM001.INASAID[EP0RW-IXM];
  EP0RW01.INV-RSN-ADJ-TYP-CD[EP0RW-IXM] = EP0RM001.INV-RSN-ADJ-TYP-CD[EP0RW-IXM];
  EP0RW01.XXX-STAT[EP0RW-IXM] = EP0RM001.XXX-STAT[EP0RW-IXM];


end // end EP0R-62200

// Rewrite temporary strorage
Function EP0R-62300()
   /* ------------------------------------------------------------*/
   /* Update the page in temporary storage.*/
   /* ------------------------------------------------------------*/

  EP0RW00.XXX-MSG-LOC-ID = "6230"; /* Module loc*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (EP0RW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/


   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parms*/

  converseLib.validationFailed(01); /* Unexpected error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "UPDATE PAGE IN TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program*/
  TA1REC.TA1PGMNO = EP0RW00.XXX-MSG-LOC-ID; /* Module number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error routine*/

  exit stack; /* Exit to map*/


end // end EP0R-62300

// Verify the SAS Id
Function EP0R-97000()
   /* ------------------------------------------------------------*/
   /* Verify the SAS Id against TASHDR00*/
   /* ------------------------------------------------------------*/

   /* Temporary line of code to*/
  VDCRSN01.XXX-STAT = "A";

  EP0RW00.XXX-MSG-LOC-ID = "97000"; /* Module loc*/

  try
    call "IO0940" ("S ", SQLCA, INAREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select tbl row*/

  if (sysVar.errorCode == "00000000") /* Good call*/

    if (SQLCA.VAGen_SQLCODE == 0 /* found*/
     || SQLCA.VAGen_SQLCODE == 100) /* or not found*/

      /* next sentence*/

    else

      converseLib.validationFailed(01); /* Error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination*/

      converseLib.clearScreen();
       /* Clear screen*/

      TA1REC.TA1TYPE = "DB2 "; /* Error type*/
      TA1REC.TA1LOC = "SELECT SETASIDE HEADER TBL ";
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program*/
      TA1REC.TA1PGMNO = EP0RW00.XXX-MSG-LOC-ID; /* Module loc*/
      TA1REC.TA1DBASE = "DINVNT  "; /* Database*/
      TA1REC.TA1TBLVU = "VASHDR01"; /* View*/
      TA1REC.TA1TBLKE = EP0RM001.EP0RM-SEL-INASAID; /* Table key*/

      call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Err routine*/

      exit stack;

    end
  else

    converseLib.validationFailed(01); /* Error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination*/

    converseLib.clearScreen();
     /* Clear screen*/

    TA1REC.TA1TYPE = "DB2 "; /* Error type*/
    TA1REC.TA1LOC = "BAD EZERT8 RETRUN EP0R97000";
    TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program*/
    TA1REC.TA1PGMNO = EP0RW00.XXX-MSG-LOC-ID; /* Module loc*/
    TA1REC.TA1DBASE = "DINVNT  "; /* Database*/
    TA1REC.TA1TBLVU = "VASHDR01"; /* Table view*/
    TA1REC.TA1TBLKE = EP0RM001.EP0RM-SEL-INASAID; /* Table key*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Err routine*/

    exit stack;

  end


end // end EP0R-97000

// Delete temporary storage
Function EP0RS-91000()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  EP0RW00.XXX-MSG-LOC-ID = "9100"; /* Module loc*/

  set EP0RW01 empty; /* M001 display storage*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  EP0RW00.XXXTSPAG = 0; /* Current page number*/
  EP0RW00.TA5TSQIX = 0; /* Highest page number*/

  EP0RM001.MAPLMPNO = 0; /* Current Map page*/
  EP0RM001.MAPLMPAG = 0; /* Maximum Map page*/


   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (EP0RW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temp storage*/


   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    EP0RW00.EP0RW-TS-PG-RTN-SW = "N";

    return; /* Return to prior process*/

  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/

  converseLib.validationFailed(01); /* Unexpected error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = EP0RW00.XXX-MSG-LOC-ID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error routine*/

  exit stack; /* Exit to map*/


end // end EP0RS-91000

// Read temporary storage page
Function EP0RS-92000()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  EP0RW00.XXX-MSG-LOC-ID = "9200"; /* Module loc*/

  EP0RW01.XXXTSLEN = EP0RW00.XXXTSLEN; /* Temp storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application id*/
  TA5REC.TA5TSQIX = EP0RW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (EP0RW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/


   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parms*/

  converseLib.validationFailed(01); /* Unexpected error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = EP0RW00.XXX-MSG-LOC-ID; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error routine*/

  exit stack; /* Exit to map*/


end // end EP0RS-92000

// Move temp storage to map area
Function EP0RS-93000()
   /* ------------------------------------------------------------*/
   /* Move temp storage occur into map occur.*/
   /* ------------------------------------------------------------*/

  EP0RM001.DC-RSN-TYP-CD[EP0RW-IXM] = EP0RW01.DC-RSN-TYP-CD[EP0RW-IXM];

  EP0RM001.DC-RSN-CD[EP0RW-IXM] = EP0RW01.DC-RSN-CD[EP0RW-IXM];

  EP0RM001.DC-ADJ-TYP-CD[EP0RW-IXM] = EP0RW01.DC-ADJ-TYP-CD[EP0RW-IXM];

  EP0RM001.XIT-TRN-TYP-CD[EP0RW-IXM] = EP0RW01.XIT-TRN-TYP-CD[EP0RW-IXM];

  EP0RM001.XIR-TRN-RSN-CD[EP0RW-IXM] = EP0RW01.XIR-TRN-RSN-CD[EP0RW-IXM];

  EP0RM001.INASAID[EP0RW-IXM] = EP0RW01.INASAID[EP0RW-IXM];

  EP0RM001.INV-RSN-ADJ-TYP-CD[EP0RW-IXM] = EP0RW01.INV-RSN-ADJ-TYP-CD[EP0RW-IXM];

  EP0RM001.XXX-STAT[EP0RW-IXM] = EP0RW01.XXX-STAT[EP0RW-IXM];

  EP0RW-IXM = EP0RW-IXM + 1; /* Increment work idx*/


end // end EP0RS-93000

// Set header attributes
Function EP0RS-94000()
   /* ------------------------------------------------------------*/
   /* Reset header attributes and cursor*/
   /* ------------------------------------------------------------*/

  set EP0RM001.EP0RM-SEL-DC-RSN-TYP-CD initialAttributes; /* DC reason type*/
  set EP0RM001.EP0RM-SEL-DC-RSN-CD initialAttributes; /* DC reason code*/
  set EP0RM001.EP0RM-SEL-DC-ADJ-TYP-CD initialAttributes; /* DC adjust type*/
  set EP0RM001.EP0RM-SEL-XIT-CD initialAttributes; /* XIT code*/
  set EP0RM001.EP0RM-SEL-XIR-CD initialAttributes; /* XIR code*/


   /* ------------------------------------------------------------*/
   /* Reset header attributes.*/
   /* ------------------------------------------------------------*/

  set EP0RM001.CATOAP initialAttributes; /* FAST PATH to application*/
  set EP0RM001.CAITEM initialAttributes; /* FAST PATH application data*/
  set EP0RM001.MAPLMPNO initialAttributes; /* Page number*/
  set EP0RM001.MAPLMPAG initialAttributes; /* Page of number*/


  if (EP0RW00.EP0RW-MODE == "A") /* In Add mode*/

    set EP0RM001.MAPLMPGL protect, invisible; /* Page literal dark protect*/
    set EP0RM001.MAPLMPOL protect, invisible; /* of literal dark protect*/
  else

    set EP0RM001.MAPLMPGL protect, bold; /* Page literal bright protect*/
    set EP0RM001.MAPLMPOL protect, bold; /* of literal bright protect*/
  end


end // end EP0RS-94000

// Set row(12) attributes
Function EP0RS-95000()
   /* ------------------------------------------------------------*/
   /* Reset field attributes in occur area.*/
   /* ------------------------------------------------------------*/

  if (EP0RW00.TA5TSQIX == 0) /* NO DETAIL DATA*/
    if (EP0RW00.EP0RW-MODE == "A") /* Add mode*/

      set EP0RM001.DC-RSN-TYP-CD[EP0RW-IXM] normal;
      set EP0RM001.DC-RSN-TYP-CD[EP0RW-IXM] underline;
      set EP0RM001.DC-RSN-CD[EP0RW-IXM] normal;
      set EP0RM001.DC-RSN-CD[EP0RW-IXM] underline;
      set EP0RM001.DC-ADJ-TYP-CD[EP0RW-IXM] initialAttributes; /* this is defaulted*/
      set EP0RM001.XIT-TRN-TYP-CD[EP0RW-IXM] normal;
      set EP0RM001.XIT-TRN-TYP-CD[EP0RW-IXM] underline;
      set EP0RM001.XIR-TRN-RSN-CD[EP0RW-IXM] normal;
      set EP0RM001.XIR-TRN-RSN-CD[EP0RW-IXM] underline;
      set EP0RM001.INASAID[EP0RW-IXM] normal;
      set EP0RM001.INASAID[EP0RW-IXM] underline;
      set EP0RM001.INV-RSN-ADJ-TYP-CD[EP0RW-IXM] normal;
      set EP0RM001.INV-RSN-ADJ-TYP-CD[EP0RW-IXM] underline;
      set EP0RM001.XXX-STAT[EP0RW-IXM] normal;
      set EP0RM001.XXX-STAT[EP0RW-IXM] underline;

    else

      set EP0RM001.DC-RSN-TYP-CD[EP0RW-IXM] initialAttributes;
      set EP0RM001.DC-RSN-CD[EP0RW-IXM] initialAttributes;
      set EP0RM001.DC-ADJ-TYP-CD[EP0RW-IXM] initialAttributes;
      set EP0RM001.XIT-TRN-TYP-CD[EP0RW-IXM] initialAttributes;
      set EP0RM001.XIR-TRN-RSN-CD[EP0RW-IXM] initialAttributes;
      set EP0RM001.INASAID[EP0RW-IXM] initialAttributes;
      if (EP0RW01.EP0RW-LN-USED-FL[EP0RW-IXM] != "Y") /* Line has data*/
        set EP0RM001.INASAID[EP0RW-IXM] invisible, protect;
      end
      set EP0RM001.INV-RSN-ADJ-TYP-CD[EP0RW-IXM] initialAttributes;
      set EP0RM001.XXX-STAT[EP0RW-IXM] initialAttributes;

    end
  end


   /* ------------------------------------------------------------*/
   /* if screen has DC Adjustment Reason data*/
   /* if inquiry mode then protect occur line*/
   /* if add mode then unprotect occur line*/
   /* if maintenance mode*/
   /* if occur has data then unprotect occur line*/
   /* else                     protect occur line*/
   /* ------------------------------------------------------------*/

  if (EP0RW00.TA5TSQIX > 0) /* DETAIL DATA EXISTS*/
    if (EP0RW00.EP0RW-MODE == "I") /* Inquiry mode*/

      set EP0RM001.DC-RSN-TYP-CD[EP0RW-IXM] initialAttributes;
      set EP0RM001.DC-RSN-CD[EP0RW-IXM] initialAttributes;
      set EP0RM001.DC-ADJ-TYP-CD[EP0RW-IXM] initialAttributes;
      set EP0RM001.XIT-TRN-TYP-CD[EP0RW-IXM] initialAttributes;
      set EP0RM001.XIR-TRN-RSN-CD[EP0RW-IXM] initialAttributes;

      set EP0RM001.INASAID[EP0RW-IXM] initialAttributes;
      if (EP0RW01.EP0RW-LN-USED-FL[EP0RW-IXM] != "Y") /* Line has NO DATA*/
        set EP0RM001.INASAID[EP0RW-IXM] invisible, protect;
      end

      set EP0RM001.INV-RSN-ADJ-TYP-CD[EP0RW-IXM] initialAttributes;
      set EP0RM001.XXX-STAT[EP0RW-IXM] initialAttributes;

    else
      if (EP0RW00.EP0RW-MODE == "A") /* Add mode*/

        set EP0RM001.DC-RSN-TYP-CD[EP0RW-IXM] normal;
        set EP0RM001.DC-RSN-TYP-CD[EP0RW-IXM] underline;
        set EP0RM001.DC-RSN-CD[EP0RW-IXM] normal;
        set EP0RM001.DC-RSN-CD[EP0RW-IXM] underline;
        set EP0RM001.DC-ADJ-TYP-CD[EP0RW-IXM] initialAttributes; /* this defaults*/
        set EP0RM001.XIT-TRN-TYP-CD[EP0RW-IXM] normal;
        set EP0RM001.XIT-TRN-TYP-CD[EP0RW-IXM] underline;
        set EP0RM001.XIR-TRN-RSN-CD[EP0RW-IXM] normal;
        set EP0RM001.XIR-TRN-RSN-CD[EP0RW-IXM] underline;
        set EP0RM001.INASAID[EP0RW-IXM] normal;
        set EP0RM001.INASAID[EP0RW-IXM] underline;
        set EP0RM001.INV-RSN-ADJ-TYP-CD[EP0RW-IXM] normal;
        set EP0RM001.INV-RSN-ADJ-TYP-CD[EP0RW-IXM] underline;
        set EP0RM001.XXX-STAT[EP0RW-IXM] normal;
        set EP0RM001.XXX-STAT[EP0RW-IXM] underline;

      else
        if (EP0RW00.EP0RW-MODE == "C") /* MNT mode*/
          if (EP0RW01.EP0RW-LN-USED-FL[EP0RW-IXM] == "Y") /* Line has data*/

             /* Disallow editing on the following 3 key fields*/
            set EP0RM001.DC-RSN-TYP-CD[EP0RW-IXM] initialAttributes;
            set EP0RM001.DC-RSN-CD[EP0RW-IXM] initialAttributes;
            set EP0RM001.DC-ADJ-TYP-CD[EP0RW-IXM] initialAttributes;

             /* Allow editing on XIT, XIR, SAS Id, Reason Adj typ, status*/
            set EP0RM001.XIT-TRN-TYP-CD[EP0RW-IXM] normal;
            set EP0RM001.XIT-TRN-TYP-CD[EP0RW-IXM] underline;
            set EP0RM001.XIR-TRN-RSN-CD[EP0RW-IXM] normal;
            set EP0RM001.XIR-TRN-RSN-CD[EP0RW-IXM] underline;
            set EP0RM001.INASAID[EP0RW-IXM] normal;
            set EP0RM001.INASAID[EP0RW-IXM] underline;
            set EP0RM001.INV-RSN-ADJ-TYP-CD[EP0RW-IXM] normal;
            set EP0RM001.INV-RSN-ADJ-TYP-CD[EP0RW-IXM] underline;
            set EP0RM001.XXX-STAT[EP0RW-IXM] normal;
            set EP0RM001.XXX-STAT[EP0RW-IXM] underline;

          else

            set EP0RM001.DC-RSN-TYP-CD[EP0RW-IXM] initialAttributes;
            set EP0RM001.DC-RSN-CD[EP0RW-IXM] initialAttributes;
            set EP0RM001.DC-ADJ-TYP-CD[EP0RW-IXM] initialAttributes;
            set EP0RM001.XIT-TRN-TYP-CD[EP0RW-IXM] initialAttributes;
            set EP0RM001.XIR-TRN-RSN-CD[EP0RW-IXM] initialAttributes;
            set EP0RM001.INASAID[EP0RW-IXM] invisible, protect;
            set EP0RM001.INV-RSN-ADJ-TYP-CD[EP0RW-IXM] initialAttributes;
            set EP0RM001.XXX-STAT[EP0RW-IXM] initialAttributes;

          end
        end
      end
    end
  end

  EP0RW-IXM = EP0RW-IXM + 1; /* increment work index*/


end // end EP0RS-95000

//*** RECORD=EP0RW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
//  Note:
//   XXXTSLEN contains the temp storage length.
//   The value of the field is set in the flow
//   for the XSPL001 process at the beginning
//   of the application.
// ----------------------------
// ***********************
Record EP0RW00 type basicRecord
  10 EP0RW-IXM EP0RW-IXM ; 
  10 EP0RW-IX1 EP0RW-IX1 ; 
  10 EP0RW-IX2 EP0RW-IX2 ; 
  10 EP0RW-IX3 EP0RW-IX3 ; 
  10 EP0RW-WORK-CTR EP0RW-WORK-CTR ; 
  10 EP0RW-MODE EP0RW-MODE ; 
  10 EP0RW-EOC-SW EP0RW-EOC-SW ; 
  10 EP0RW-DISP-MAP-SW EP0RW-DISP-MAP-SW ; 
  10 EP0RW-EDIT-PASS-SW EP0RW-EDIT-PASS-SW ; 
  10 EP0RW-FORMAT-SW EP0RW-FORMAT-SW ; 
  10 EP0RW-DATA-RQST-SW EP0RW-DATA-RQST-SW ; 
  10 EP0RW-ADD-FL EP0RW-ADD-FL ; 
  10 EP0RW-MAPHDR-CHG-FL EP0RW-MAPHDR-CHG-FL ; 
  10 EP0RW-TS-PG-RTN-SW EP0RW-TS-PG-RTN-SW ; 
  10 EP0RW-MSG-NBR EP0RW-MSG-NBR ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 XXX-MSG-LOC-ID XXX-MSG-LOC-ID ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 EP0RW-INIT-ENTRY-SW EP0RW-INIT-ENTRY-SW ; 
  10 EP0RW-VDCRSN-KEYS EP0RW-VDCRSN-KEYS ; 
    15 EP0RM-SEL-DC-RSN-TYP-CD EP0RM-SEL-DC-RSN-TYP-CD ; 
    15 EP0RM-SEL-DC-RSN-CD EP0RM-SEL-DC-RSN-CD ; 
    15 EP0RM-SEL-DC-ADJ-TYP-CD EP0RM-SEL-DC-ADJ-TYP-CD ; 
    15 EP0RM-SEL-XIT-CD EP0RM-SEL-XIT-CD ; 
    15 EP0RM-SEL-XIR-CD EP0RM-SEL-XIR-CD ; 
    15 EP0RM-SEL-INASAID EP0RM-SEL-INASAID ; 
  10 EP0RW-RSN-KEY-GROUP EP0RW-RSN-KEY-GROUP ; 
    15 DC-RSN-TYP-CD DC-RSN-TYP-CD ; 
    15 DC-RSN-CD DC-RSN-CD ; 
    15 DC-ADJ-TYP-CD DC-ADJ-TYP-CD ; 
end // end EP0RW00

//*** RECORD=EP0RW01 ****
// ------------------------
// TS 001 display storage.
// ------------------------
// Note:
//  If additional fields are
//  added to the screen, be
//  sure to move the correct
//  temp storage length to the
//  application work record in
//  the flow for XPSL001.
// ------------------------
// ***********************
Record EP0RW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 EP0RW-TS-GRP EP0RW-TS-GRP ; 
    10 EP0RW-LN-USED-FL EP0RW-LN-USED-FL [12] ; 
    10 DC-RSN-TYP-CD DC-RSN-TYP-CD [12] ; 
    10 DC-RSN-CD DC-RSN-CD [12] ; 
    10 DC-ADJ-TYP-CD DC-ADJ-TYP-CD [12] ; 
    10 XIT-TRN-TYP-CD XIT-TRN-TYP-CD [12] ; 
    10 XIR-TRN-RSN-CD XIR-TRN-RSN-CD [12] ; 
    10 INASAID INASAID [12] ; 
    10 INV-RSN-ADJ-TYP-CD INV-RSN-ADJ-TYP-CD [12] ; 
    10 XXX-STAT XXX-STAT [12] ; 
    10 ZZZCHGCT ZZZCHGCT [12] ; 
end // end EP0RW01

//*** RECORD=VDCRSN01 ****
// ********* DCMS INVENTORY ADJUSTMENT REASONS TABLE **********
// 
// DB2 TABLE VIEW:      DINVNT.VDCRSN01
// 
// COPYLIB MEMBER:      VDCRSN01
// 
// I/O MODULE:          VDCRSN01
// 
// KEY TO DB2 TABLE:    DC-RSN-TYP-CD
//                      DC-RSN-CD
//                      DC-ADJ-TYP-CD
// 
// DATE CREATED:        12/03/98
// 
// MAINTENANCE LOG:
// 
// DATE       NAME     COMMENT
// --------   ------   ---------------------------------------
// 12/03/98   ESMIT2   New view definition.
// ************************
Record VDCRSN01 type basicRecord
  5 VDCRSN01-GROUP VDCRSN01-GROUP ; 
    10 DC-RSN-TYP-CD DC-RSN-TYP-CD ; 
    10 DC-RSN-CD DC-RSN-CD ; 
    10 DC-ADJ-TYP-CD DC-ADJ-TYP-CD ; 
    10 XIT-TRN-TYP-CD XIT-TRN-TYP-CD ; 
    10 XIR-TRN-RSN-CD XIR-TRN-RSN-CD ; 
    10 INASAID INASAID ; 
    10 INV-RSN-ADJ-TYP-CD INV-RSN-ADJ-TYP-CD ; 
    10 XXX-STAT XXX-STAT ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZSTM ZZZSTM ; 
    10 XXX-USER-ID XXX-USER-ID ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end VDCRSN01

// DC_ADJ_TYP_CD
DataItem DC-ADJ-TYP-CD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DC_RSN_CD
DataItem DC-RSN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DC_RSN_TYP_CD
DataItem DC-RSN-TYP-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Selection DC_ADJ_TYP_CD
DataItem EP0RM-SEL-DC-ADJ-TYP-CD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Selection DC_RSN_CD
DataItem EP0RM-SEL-DC-RSN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Selection DC_RSN_TYP_CD
DataItem EP0RM-SEL-DC-RSN-TYP-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Selection INASAID
DataItem EP0RM-SEL-INASAID char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Selection XIR_TRN_RSN_CD
DataItem EP0RM-SEL-XIR-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Selection XIT_TRN_TYP_CD
DataItem EP0RM-SEL-XIT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ADD function completed (Y)
DataItem EP0RW-ADD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request for data switch
DataItem EP0RW-DATA-RQST-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed switch
DataItem EP0RW-DISP-MAP-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Edit pass switch (Y or N)
DataItem EP0RW-EDIT-PASS-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Cursor end of file switch
DataItem EP0RW-EOC-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem EP0RW-FORMAT-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Initial entry switch
DataItem EP0RW-INIT-ENTRY-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Variable work index
DataItem EP0RW-IX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Variable work index
DataItem EP0RW-IX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Variable work index
DataItem EP0RW-IX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem EP0RW-IXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Occurrence used('Y' or BLANK)
DataItem EP0RW-LN-USED-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map header change switch
DataItem EP0RW-MAPHDR-CHG-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Update mode (I or C or A)
DataItem EP0RW-MODE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// msg nbr save field
DataItem EP0RW-MSG-NBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// reason key group
DataItem EP0RW-RSN-KEY-GROUP char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Temp storage group level
DataItem EP0RW-TS-GRP char(228)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Return to TS page before updat
DataItem EP0RW-TS-PG-RTN-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map VWCARR01 select key
DataItem EP0RW-VDCRSN-KEYS char(19)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Variable work counter
DataItem EP0RW-WORK-CTR smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// INV_RSN_ADJ_TYP_CD
DataItem INV-RSN-ADJ-TYP-CD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem VDCRSN01-GROUP char(38)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

