package ep0s;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import ep.common.*;
import iv.common.*;
import ku.common.*;
import pw.common.*;
import ta.common.*;
import tf.common.*;
//*** PROGRAM=EP0S ****
// This application allows a user to inquire and maintain rows
// in a DB2 table: DSHIP.VDCSHP00, onetime ship-to addresses.
// 
// There are two different screens that may be displayed.
// 
// The first screen displayed allows the user to scroll through
// all addresses for the customer/store passed in from either
// OM0K or OM0P.  The list is displayed and the user may page
// backward and forward to view the information.
// 
// When a line is selected on the screen, the second screen is
// displayed, showing all the detail information for the
// selection.  The user may select more than one detail.  Each
// subsequent press of <ENTER> will bring in the next selected
// detail.  All viewed details will have the selection replaced
// by an "*".
// 
// The purge flag is modifiable when the detail is displayed.
// 
// When the user exits the second screen (either via PF3 key or
// after all selections have been viewed) the first screen is
// redisplayed, indicating the selections that were viewed.
// 
// The user may choose to add a new address by pressing PF9
// on the first menu.
// 
// The user may exit ONLY by returning the application they
// transferred from (COMMAREA.CAFROMAP).
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE    USERID  DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      06/02/98  esmit2  New application.
// multgpc  08/06/99  OENFIE  regenerate to pick up changes to
//                            XPEP-00000
// *********************
Program EP0S type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "EP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  EP0SW00 EP0SW00; // record
  EP0SW01 EP0SW01; // record
  EP0SW02 EP0SW02; // record
  EPWREC EPWREC; // record
  PWHREC PWHREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  TFWREC TFWREC; // record
  VDCSHP01 VDCSHP01; // record
  XCTREC XCTREC; // record
  XSTREC XSTREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCTTBL {deleteAfterUse = yes}; // table
  use XSTTBL {deleteAfterUse = yes}; // table
  use EP0SM.EP0SM001,  // forms
      EP0SM.EP0SM002
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPEP-00000: XPEP-00000();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/

    set EP0SM001 initial; /* M001 input/output*/
    set EP0SM002 initial; /* M002 input/output*/

    set EP0SW00 empty; /* Working storage*/
    set EP0SW01 empty; /* M001 display storage*/
    set EP0SW02 empty; /* M002 display storage*/
    set EPWREC empty; /* EP common record*/
    set SQLCA empty; /* SQL communication area*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set TAEREC empty; /* Error diagnosis information*/
    set VDCSHP01 empty; /* Onetime ship-to addresses*/

    EP0SW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/
    EP0SW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    EP0SW00.XXX-MAP-DSP-CD = "1"; /* Map to be displayed*/

    EP0SW00.XXX-TEMP-STG-LNTH = 3285; /* Temporary storage length*/
    EP0SW00.XXX-INX-LMT-NBR = 15; /* Number of lines on a page*/



     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto EP0S-00000; /* Converse main process*/


    EP0S-00000: EP0S-00000();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto EP0S-00000; /* Converse the main process*/


  end // end main
end // end EP0S

// Determine which map to display
Function EP0S-00000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) If specified, display the map that was requested.*/
   /* 2) Otherwise, indicate error and exit to System Menu.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


  if (EP0SW00.XXX-MAP-DSP-CD == "1") /* Map 1 was requested*/

    EP0S-10000(); /* Display map 1*/

    exit stack; /* Exit to display map*/

  end


  if (EP0SW00.XXX-MAP-DSP-CD == "2") /* Map 2 was requested*/

    EP0S-20000(); /* Display map 2*/

    exit stack; /* Exit to display map*/

  end


   /* ------------------------------------------------------------*/
   /* Write the error to the Error Diagnosis Reporting Facility.*/
   /* ------------------------------------------------------------*/

  EP0SW00.XXX-MSG-LOC-ID = "00000"; /* Message location*/
  converseLib.validationFailed(01); /* Unexpected error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = EP0SW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "INVALID MAP NUMBER REQUESTED"; /* Description*/
  TA1REC.TA1MAPNO = EP0SW00.XXX-MAP-DSP-CD; /* Map requested*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Err diag routine*/


   /* ------------------------------------------------------------*/
   /* Exit to display the application system menu.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CATOAP = COMMAREA.CAFROMAP; /* Return to 'from' app*/

  XSEPS-EXIT(); /* Exit to another app*/


   /* ------------------------------------------------------------*/
   /* Abnormally terminate the transaction if the exit failed.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1FUNC = "ABND"; /* Termination function*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/


end // end EP0S-00000

// Main process to display a map
Function EP0S-10000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display MAP 1.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


  EP0S-11000(); /* Obtain the data to display*/

  EP0S-12000(); /* Format and display the map*/

  EP0S-13000(); /* Check attention identifier*/

  EP0S-14000(); /* Verify the entered data*/

  EP0S-15000(); /* Process valid input request*/


end // end EP0S-10000

// Obtain the data to display
Function EP0S-11000()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/

  if (EP0SW00.XXX-RQT-DATA-FL != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/

  if (EP0SW00.XXX-MSG-NBR == 0) /* No message to display*/

    EP0SW00.XXX-CURR-PAGE-NBR = 1; /* Page number to display*/

  end


   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/

  EP0SS-TA0050-P(); /* Purge temp storage*/

  EP0SW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

  EP0SW00.CU-IVC-CO-ID = EP0SM001.CU-IVC-CO-ID;
  EP0SW00.CU-CO-ID = EP0SM001.CU-CO-ID;


   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/

  set VDCSHP01 empty; /* Clear DB2 storage*/

  VDCSHP01.CU-IVC-CO-ID = EP0SW00.CU-IVC-CO-ID; /* Customer ID*/
  VDCSHP01.CU-CO-ID = EP0SW00.CU-CO-ID; /* Store ID*/

  EP0SS-VDCSHP01-S1(); /* Sel set, open csr*/


   /* ------------------------------------------------------------*/
   /* Fetch and format the data into pages until end of cursor.*/
   /* ------------------------------------------------------------*/

  EP0SW00.XXX-INX-FLD-NBR = 1; /* Display idx*/
  EP0SW00.EP0SW-VDCSHP-EOF-FL = "N"; /* Eof csr flag*/


  while (EP0SW00.EP0SW-VDCSHP-EOF-FL == "N") /* Until eof csr*/

    EP0SS-VDCSHP01-N1(); /* Fetch next row*/

    /* ------------------------------------------------------------*/
    /* If not end of cursor, save the data in display storage.*/
    /* ------------------------------------------------------------*/

    if (EP0SW00.EP0SW-VDCSHP-EOF-FL == "N") /* Not eof csr*/

      /* ------------------------------------------------------------*/
      /* Save the data from the table row in display storage.*/
      /* ------------------------------------------------------------*/

      EP0SW01.CU-IVC-CO-ID[XXX-INX-FLD-NBR] = VDCSHP01.CU-IVC-CO-ID; /* Bill-to*/
      EP0SW01.CU-CO-ID[XXX-INX-FLD-NBR] = VDCSHP01.CU-CO-ID; /* Ship-to*/
      EP0SW01.RTL-LOC-TYP-IND[XXX-INX-FLD-NBR] = VDCSHP01.RTL-LOC-TYP-IND; /* Loc type ind*/

      EP0SW01.CU-CO-NM[XXX-INX-FLD-NBR] = VDCSHP01.CU-CO-NM; /* Co name*/
      EP0SW01.CU-CO-CONTACT[XXX-INX-FLD-NBR] = VDCSHP01.CU-CO-CONTACT; /* Contact*/

      EP0SW01.OC-ADDR-CD[XXX-INX-FLD-NBR] = VDCSHP01.OC-ADDR-CD; /* Addr code*/

      EP0SW01.IV-SHIPTO-ADDR1[XXX-INX-FLD-NBR] = VDCSHP01.IV-SHIPTO-ADDR1; /* Addr 1*/
      EP0SW01.IV-SHIPTO-ADDR2[XXX-INX-FLD-NBR] = VDCSHP01.IV-SHIPTO-ADDR2; /* Addr 2*/
      EP0SW01.IV-SHIPTO-ADDR3[XXX-INX-FLD-NBR] = VDCSHP01.IV-SHIPTO-ADDR3; /* Addr 3*/

      EP0SW01.IV-SHIPTO-CITY[XXX-INX-FLD-NBR] = VDCSHP01.IV-SHIPTO-CITY; /* City*/
      EP0SW01.IV-SHIPTO-ST-CD[XXX-INX-FLD-NBR] = VDCSHP01.IV-SHIPTO-ST-CD; /* State code*/
      EP0SW01.IV-SHIPTO-ZIP[XXX-INX-FLD-NBR] = VDCSHP01.IV-SHIPTO-ZIP; /* Zip code*/
      EP0SW01.XXX-INTL-PHONE-NBR[XXX-INX-FLD-NBR] = VDCSHP01.XXX-INTL-PHONE-NBR; /* Phone nbr*/

      /* ------------------------------------------------------------*/
      /* Increment the line index to the next row in display storage.*/
      /* ------------------------------------------------------------*/

      EP0SW00.XXX-INX-FLD-NBR = EP0SW00.XXX-INX-FLD-NBR + 1;
                                                          /* Increment idx*/

    end

    /* ------------------------------------------------------------*/
    /* If the page is full, add the page to the temporary storage queue.*/
    /* ------------------------------------------------------------*/

    if (EP0SW00.XXX-INX-FLD-NBR > EP0SW00.XXX-INX-LMT-NBR) /* Page full*/

      EP0SS-TA0050-A(); /* Add to TS*/

      EP0SW00.XXX-INX-FLD-NBR = 1; /* Line index*/

    end

  end


   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/

  if (EP0SW00.XXX-INX-FLD-NBR > 1) /* Page was formatted*/

    EP0SS-TA0050-A(); /* Add page to temp storage*/

  end


   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/

  EP0SS-VDCSHP01-C1(); /* Close selected set cursor*/


   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/

  if (EP0SW00.XXX-HI-PAGE-NBR == 0) /* No pages formatted*/

    EP0SW00.XXX-MSG-LOC-ID = "11000"; /* Message location*/
    converseLib.validationFailed(64); /* No data found to display*/

    exit stack; /* Exit to display map*/

  end


   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  EP0SW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/


end // end EP0S-11000

// Format and converse the map
Function EP0S-12000()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    EP0SW00.XXX-MSG-NBR = converseVar.validationMsgNum; /* Message number*/

  end


   /* ------------------------------------------------------------*/
   /* If the map must be formatted, format the data in the map.*/
   /* ------------------------------------------------------------*/

  if (EP0SW00.XXX-MAP-FMAT-FL == "Y") /* Map must be formatted*/

    EP0S-12100(); /* Format the data in the map*/

  end


   /* ------------------------------------------------------------*/
   /* Place the cursor on the map.*/
   /* ------------------------------------------------------------*/

  if (EP0SM001.EP0SM-SHIP-TO[1] > 0)
    set XXX-LN-SEL-IND[1] cursor;
  else
    set EP0SM001.CU-IVC-CO-ID cursor;
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  EP0SM001.XXX-CURR-DT = VGVar.currentShortGregorianDate; /* Current date*/

  EP0SM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  EP0SM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (EP0SW00.XXX-MSG-NBR != 0 /* Msg display*/
   || COMMAREA.CAMSG != " ")   /* or msg text*/

    if (EP0SW00.XXX-MSG-NBR != 0) /* Msg display*/

      if (EP0SW00.XXX-MSG-NBR == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(EP0SW00.XXX-MSG-NBR);
      end /* Msg number*/
    else
      EP0SM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Msg text*/

    end

    EP0SM001.XXX-MSG-LOC-ID = EP0SW00.XXX-MSG-LOC-ID; /* Msg loc*/

    set EP0SM001 alarm; /* Sound alarm*/

  end


  converse EP0SM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  EP0SW00.XXX-MSG-LOC-ID = " "; /* Msg location*/
  EP0SW00.XXX-MSG-NBR = 0; /* Msg number*/
  COMMAREA.CAMSG = " "; /* Msg text*/

  COMMAREA.CATOAP = EP0SM001.CATOAP; /* TO app*/
  COMMAREA.CAITEM = EP0SM001.CAITEM; /* App data*/


   /* ------------------------------------------------------------*/
   /* Reset modifiable field attributes to normal intensity.*/
   /* Only selection indicator for EP0KM001.*/
   /* ------------------------------------------------------------*/

  EP0SW00.XXX-INX-FLD-NBR = 1; /* Init map idx*/

  while (EP0SW00.XXX-INX-FLD-NBR <= EP0SW00.XXX-INX-LMT-NBR /* Til eof map*/
   && EP0SM001.EP0SM-SHIP-TO[XXX-INX-FLD-NBR] > 0) /* or eof data*/

    set EP0SM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] normal; /* SEL indicator*/

    EP0SW00.XXX-INX-FLD-NBR = EP0SW00.XXX-INX-FLD-NBR + 1; /* Increment idx*/

  end


end // end EP0S-12000

// Format the data in the map
Function EP0S-12100()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set EP0SM001 initial; /* M001 i/o area*/

  EP0SW00.XXX-MAP-FMAT-FL = "N"; /* Format map flag*/


   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (EP0SW00.XXX-HI-PAGE-NBR > 0) /* Pages formatted*/

    if (EP0SW00.XXX-CURR-PAGE-NBR != TA5REC.TA5TSQIX) /* Pg not current*/

      /* ------------------------------------------------------------*/
      /* If the current page has been changed, update the page in*/
      /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/

      if (EP0SW00.XXX-PAGE-UPD-FL == "Y") /* Curr page changed*/

        EP0SS-TA0050-U(); /* Update temp stor pg*/

        EP0SW00.XXX-PAGE-UPD-FL = "N"; /* Page update flag*/

      end


      /* ------------------------------------------------------------*/
      /* If the desired page number is greater than the highest page*/
      /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (EP0SW00.XXX-CURR-PAGE-NBR > EP0SW00.XXX-HI-PAGE-NBR)
                                            /* Desired greater highest*/
        EP0SW00.XXX-CURR-PAGE-NBR = EP0SW00.XXX-HI-PAGE-NBR;
                                            /* Default to highest*/
      end

      EP0SS-TA0050-R(); /* Read temporary storage page*/

    end


    /* ------------------------------------------------------------*/
    /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set EP0SM001.XXX-CURR-PAGE-DESC skip; /* "PAGE" literal*/
    EP0SM001.XXX-CURR-PAGE-NBR = EP0SW00.XXX-CURR-PAGE-NBR;
                                                    /* Current page*/
    set EP0SM001.XXX-HI-PAGE-DESC skip; /* "OF" literal*/
    EP0SM001.XXX-HI-PAGE-NBR = EP0SW00.XXX-HI-PAGE-NBR;
                                                    /* Highest page*/

  end


   /* ------------------------------------------------------------*/
   /* Position cursor on first selection field.*/
   /* ------------------------------------------------------------*/

  set EP0SM001.XXX-LN-SEL-IND[1] cursor; /* Position cursor*/


   /* ------------------------------------------------------------*/
   /* Format the map fields from the display storage area.*/
   /* ------------------------------------------------------------*/

  EP0SM001.CU-IVC-CO-ID = EP0SW00.CU-IVC-CO-ID; /* Co id*/
  EP0SM001.CU-CO-ID = EP0SW00.CU-CO-ID; /* Store id*/


  EP0SW00.XXX-INX-FLD-NBR = 1; /* Line idx*/

  while (EP0SW00.XXX-INX-FLD-NBR <= EP0SW00.XXX-INX-LMT-NBR) /* Til full*/

    /* Set attributes for selection indicator*/
    if (XXX-INX-FLD-NBR == 1) /* 1st line*/

      set EP0SM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] cursor;

      if (EP0SW01.CU-CO-ID[XXX-INX-FLD-NBR] > 0) /* Data here*/
        set EP0SM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] normal;
        set EP0SM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] underline;
      else /* No data*/
        set EP0SM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] invisible, protect;
      end

    else /* Not 1st*/

      if (EP0SW01.CU-CO-ID[XXX-INX-FLD-NBR] > 0) /* Data here*/
        set EP0SM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] normal;
        set EP0SM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] underline;
      else /* No data*/
        set EP0SM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] invisible, protect;
      end

    end

    EP0SM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] = EP0SW01.XXX-LN-SEL-IND[XXX-INX-FLD-NBR];
    EP0SM001.EP0SM-SHIP-TO[XXX-INX-FLD-NBR] = EP0SW01.CU-CO-ID[XXX-INX-FLD-NBR];
    EP0SM001.CU-CO-NM[XXX-INX-FLD-NBR] = EP0SW01.CU-CO-NM[XXX-INX-FLD-NBR];
    EP0SM001.IV-SHIPTO-ADDR1[XXX-INX-FLD-NBR] = EP0SW01.IV-SHIPTO-ADDR1[XXX-INX-FLD-NBR];

    EP0SW00.XXX-INX-FLD-NBR = EP0SW00.XXX-INX-FLD-NBR + 1; /* Increment idx*/

  end


end // end EP0S-12100

// Check attention identifier
Function EP0S-13000()
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (EP0SM001.CATOAP > " ") /* FAST PATH request*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      EP0SS-TA0050-P(); /* Purge temp storage*/

      XSEPS-EXIT(); /* Exit*/

      set EP0SM001.CATOAP cursor, bold; /* Highlight*/

    else

      EP0SW00.XXX-MSG-LOC-ID = "13000"; /* Message location*/
      converseLib.validationFailed(258); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end


   /* ------------------------------------------------------------*/
   /* If EXIT requested, return to system menu (EP0M).*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* Exit to from app*/

    COMMAREA.CATOAP = "EP0M"; /* System Menu*/

    EP0SS-TA0050-P(); /* Purge temp storage*/

    XSEPS-EXIT(); /* Exit to another app*/

    exit stack; /* Exit to display map*/

  end


   /* ------------------------------------------------------------*/
   /* If a PF key transfer requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf4) /* Exit to from app*/

    COMMAREA.CATOAP = "MN0M"; /* System Menu*/

    EP0SS-TA0050-P(); /* Purge temp storage*/

    XSEPS-EXIT(); /* Exit to another app*/

    exit stack; /* Exit to display map*/

  end


   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf3   /* and PF3 was not pressed*/
   && converseVar.eventKey not pf4   /* and PF4 was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    EP0SW00.XXX-MSG-LOC-ID = "13000"; /* Message location*/
    converseLib.validationFailed(04); /* PA/PF key pressed not valid*/

    exit stack; /* Exit to display map*/

  end


end // end EP0S-13000

// Verify data that was entered
Function EP0S-14000()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (EP0SM001.CAITEM > " ") /* Application data was entered*/

    EP0SW00.XXX-MSG-LOC-ID = "14000"; /* Message location*/
    converseLib.validationFailed(259); /* Enter only with FAST PATH*/
    set EP0SM001.CAITEM cursor, bold; /* Highlight*/

  end


   /* ------------------------------------------------------------*/
   /* If scroll requested, determine if any other field changed.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    EP0S-14100(); /* Verify scroll request*/

  else

    /* ------------------------------------------------------------*/
    /* Otherwise, verify any modifiable data that was changed.*/
    /* ------------------------------------------------------------*/

    /* ------------------------------------------------------------*/
    /* Verify that at least bill-to has been entered.*/
    /* ------------------------------------------------------------*/

    if (EP0SM001.CU-IVC-CO-ID <= 0) /* 0 bill to*/

      EP0SW00.XXX-MSG-LOC-ID = "14000"; /* Msg loc*/
      converseLib.validationFailed(313); /* Missing*/
      set EP0SM001.CU-IVC-CO-ID cursor, bold; /* Highlight*/

    end


    if (EP0SW00.XXX-HI-PAGE-NBR > 0) /* Page*/

      EP0SW00.XXX-INX-FLD-NBR = EP0SW00.XXX-INX-LMT-NBR; /* Ln idx*/

      while (EP0SW00.XXX-INX-FLD-NBR > 0) /* Til eof*/

        EP0S-14200(); /* Val lns*/

        EP0SW00.XXX-INX-FLD-NBR = EP0SW00.XXX-INX-FLD-NBR - 1; /* Ln nbr*/

      end

    end

  end


   /* ------------------------------------------------------------*/
   /* If any error was found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    exit stack; /* Exit to display map*/

  end


end // end EP0S-14000

// Verify scroll request
Function EP0S-14100()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && EP0SW00.XXX-CURR-PAGE-NBR < 2) /* and no previous pages*/

    EP0SW00.XXX-MSG-LOC-ID = "14100"; /* Message location*/
    converseLib.validationFailed(07); /* No previous page to display*/

  end


   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && EP0SW00.XXX-CURR-PAGE-NBR   
   >= EP0SW00.XXX-HI-PAGE-NBR)    /* and no more pages*/

    EP0SW00.XXX-MSG-LOC-ID = "14100"; /* Message location*/
    converseLib.validationFailed(08); /* No more pages to display*/

  end


end // end EP0S-14100

// Verify data in the line
Function EP0S-14200()
   /* ------------------------------------------------------------*/
   /* If selection was entered and is not a "S", indicate that*/
   /* only "S" may be entered to select a line.*/
   /* ------------------------------------------------------------*/

  if (EP0SM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] != 
  EP0SW01.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] /* SEL*/
   && EP0SM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] != "S") /* not "S"*/

    EP0SW00.XXX-MSG-LOC-ID = "14200"; /* Msg loc*/
    converseLib.validationFailed(228); /* S Only*/
    set EP0SM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] cursor, bold; /* Hilite*/

  end


end // end EP0S-14200

// Process valid input request
Function EP0S-15000()
   /* ------------------------------------------------------------*/
   /* If the key fields changed, request the data to display.*/
   /* ------------------------------------------------------------*/

  if (EP0SM001.CU-IVC-CO-ID != EP0SW00.CU-IVC-CO-ID /* Bill to changed*/
   || EP0SM001.CU-CO-ID != EP0SW00.CU-CO-ID)        /* Ship to changed*/

    EP0SW00.XXX-RQT-DATA-FL = "Y"; /* Request data fl*/

    if (EP0SM001.CU-IVC-CO-ID > 0
     && EP0SM001.CU-CO-ID > 0) /* Unique row rqst*/

      EP0SW00.CU-IVC-CO-ID = EP0SM001.CU-IVC-CO-ID; /* Save Bill to*/
      EP0SW00.CU-CO-ID = EP0SM001.CU-CO-ID; /* Save Ship to*/
      EP0SW00.XXX-MAP-DSP-CD = "2"; /* Display map 2*/
      EP0SW00.XXX-INX-FLD-NBR = 0; /* Init line idx*/
      /* note - This will be used to indicate a sel uniq on map 2*/

      exit stack;

    end

    return; /* Return*/

  end


   /* ------------------------------------------------------------*/
   /* If scroll backward was requested, decrement the page number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back*/

    EP0SW00.XXX-CURR-PAGE-NBR = EP0SW00.XXX-CURR-PAGE-NBR - 1;
                                                 /* Decrement page number*/

    EP0SW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    return; /* Return to prior process*/

  end


   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, increment the page number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward*/

    EP0SW00.XXX-CURR-PAGE-NBR = EP0SW00.XXX-CURR-PAGE-NBR + 1;
                                                 /* Increment page number*/

    EP0SW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    return; /* Return to prior process*/

  end


   /* ------------------------------------------------------------*/
   /* Save any field that was changed in the map display storage.*/
   /* ------------------------------------------------------------*/

  EP0SW00.CU-IVC-CO-ID = EP0SM001.CU-IVC-CO-ID; /* Bill to*/
  EP0SW00.CU-CO-ID = EP0SM001.CU-CO-ID; /* Ship to*/

  EP0SW00.XXX-INX-FLD-NBR = 1; /* Init line idx*/

  while (EP0SW00.XXX-INX-FLD-NBR <= EP0SW00.XXX-INX-LMT-NBR)
                                                           /* Til eof lines*/

    if (EP0SM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] != 
    EP0SW01.XXX-LN-SEL-IND[XXX-INX-FLD-NBR])

      EP0SW01.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] = EP0SM001.XXX-LN-SEL-IND[XXX-INX-FLD-NBR];

      EP0SW00.XXX-PAGE-UPD-FL = "Y"; /* Pg update fl*/

    end

    EP0SW00.XXX-INX-FLD-NBR = EP0SW00.XXX-INX-FLD-NBR + 1; /* Line idx*/

  end


   /* ------------------------------------------------------------*/
   /* If a line was selected, format the key fields and indicate*/
   /* that map 002 is to be displayed.*/
   /* ------------------------------------------------------------*/

  if ("S" in EP0SW01.XXX-LN-SEL-IND) /* Line was selected*/

    EP0SW00.XXX-INX-FLD-NBR = sysVar.arrayIndex; /* Establish index value*/

    EP0SW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/
    EP0SW00.XXX-MAP-DSP-CD = "2"; /* Map to be displayed*/

    exit stack;

  end


end // end EP0S-15000

// Main process to display a map
Function EP0S-20000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display MAP 2.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


  EP0S-21000(); /* Obtain the data to display*/

  EP0S-22000(); /* Format and display the map*/

  EP0S-23000(); /* Check attention identifier*/

  EP0S-24000(); /* Verify the entered data*/

  EP0S-25000(); /* Process valid input request*/


end // end EP0S-20000

// Obtain the data to display
Function EP0S-21000()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found,*/
   /* return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (EP0SW00.XXX-RQT-DATA-FL != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* If select unique indicated, get unique row and store in*/
   /* EP0SW01, map 1 storage.  If error or no data, return to map 1.*/
   /* ------------------------------------------------------------*/

  if (EP0SW00.CU-IVC-CO-ID > 0
   && EP0SW00.CU-CO-ID > 0
   && EP0SW00.XXX-INX-FLD-NBR == 0) /* Sel uniq request*/

    VDCSHP01.CU-IVC-CO-ID = EP0SM001.CU-IVC-CO-ID;
    VDCSHP01.CU-CO-ID = EP0SM001.CU-CO-ID;

    EP0SS-VDCSHP01-S(); /* Select uniq row*/

    if (SQLCA.VAGen_SQLCODE == 0)

      /* Store address in 1st occurrence of map 1 storage*/
      EP0SW01.CU-IVC-CO-ID[1] = VDCSHP01.CU-IVC-CO-ID;
      EP0SW01.CU-CO-ID[1] = VDCSHP01.CU-CO-ID;
      EP0SW01.RTL-LOC-TYP-IND[1] = VDCSHP01.RTL-LOC-TYP-IND;
      EP0SW01.CU-CO-NM[1] = VDCSHP01.CU-CO-NM;
      EP0SW01.CU-CO-CONTACT[1] = VDCSHP01.CU-CO-CONTACT;
      EP0SW01.OC-ADDR-CD[1] = VDCSHP01.OC-ADDR-CD;
      EP0SW01.IV-SHIPTO-ADDR1[1] = VDCSHP01.IV-SHIPTO-ADDR1;
      EP0SW01.IV-SHIPTO-ADDR2[1] = VDCSHP01.IV-SHIPTO-ADDR2;
      EP0SW01.IV-SHIPTO-ADDR3[1] = VDCSHP01.IV-SHIPTO-ADDR3;
      EP0SW01.IV-SHIPTO-CITY[1] = VDCSHP01.IV-SHIPTO-CITY;
      EP0SW01.IV-SHIPTO-ST-CD[1] = VDCSHP01.IV-SHIPTO-ST-CD;
      EP0SW01.IV-SHIPTO-ZIP[1] = VDCSHP01.IV-SHIPTO-ZIP;
      EP0SW01.XXX-INTL-PHONE-NBR[1] = VDCSHP01.XXX-INTL-PHONE-NBR;

      EP0SW00.XXX-INX-FLD-NBR = 1; /* Set index to 1st occurrence*/

    else

      /* Display map 1 with no data found message*/
      EP0SW00.XXX-RQT-DATA-FL = "N"; /* Data rqst fl*/
      EP0SW00.XXX-MAP-DSP-CD = "2"; /* Display map 2*/
      EP0SW00.XXX-MSG-LOC-ID = "14000"; /* Msg location*/
      converseLib.validationFailed(12); /* No data found*/
      set EP0SM001.CU-IVC-CO-ID cursor, bold; /* Hilite Bill to*/
      set EP0SM001.CU-CO-ID bold; /* Hilite Ship to*/

      exit stack;

    end

  end


   /* ------------------------------------------------------------*/
   /* Clear the map display storage area and save data to display*/
   /* ------------------------------------------------------------*/

  set EP0SW02 empty; /* M002 disp storage*/

  EP0SW00.XXX-MAP-FMAT-FL = "Y"; /* Format map*/

  EP0SW02.CU-IVC-CO-ID = EP0SW01.CU-IVC-CO-ID[XXX-INX-FLD-NBR]; /* Bill to*/
  EP0SW02.CU-CO-ID = EP0SW01.CU-CO-ID[XXX-INX-FLD-NBR]; /* Ship to*/
  EP0SW02.CU-CO-NM = EP0SW01.CU-CO-NM[XXX-INX-FLD-NBR]; /* Company name*/
  EP0SW02.CU-CO-CONTACT = EP0SW01.CU-CO-CONTACT[XXX-INX-FLD-NBR]; /* Contact*/

  EP0SW02.IV-SHIPTO-ADDR1 = EP0SW01.IV-SHIPTO-ADDR1[XXX-INX-FLD-NBR]; /* Address line 1*/
  EP0SW02.IV-SHIPTO-ADDR2 = EP0SW01.IV-SHIPTO-ADDR2[XXX-INX-FLD-NBR]; /* Address line 1*/
  EP0SW02.IV-SHIPTO-ADDR3 = EP0SW01.IV-SHIPTO-ADDR3[XXX-INX-FLD-NBR]; /* Address line 1*/

  EP0SW02.IV-SHIPTO-CITY = EP0SW01.IV-SHIPTO-CITY[XXX-INX-FLD-NBR]; /* City*/
  EP0SW02.IV-SHIPTO-ST-CD = EP0SW01.IV-SHIPTO-ST-CD[XXX-INX-FLD-NBR]; /* State*/
  EP0SW02.XXX-INTL-PHONE-NBR = EP0SW01.XXX-INTL-PHONE-NBR[XXX-INX-FLD-NBR]; /* Phone*/

   /* ------------------------------------------------------------*/
   /* Retrieve and format the description for the state code.*/
   /* ------------------------------------------------------------*/

   /* State description*/
  if (EP0SW02.IV-SHIPTO-ST-CD in XSTTBL.XSTCD /* Code in table*/
   && XSTTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* & active stat*/

    EP0SW02.XSTDESC = XSTTBL.XSTDESC[sysVar.arrayIndex]; /* Description*/
  else
    EP0SW02.XSTDESC = " "; /* No description*/

  end

  EP0SW02.IV-SHIPTO-ZIP = EP0SW01.IV-SHIPTO-ZIP[XXX-INX-FLD-NBR]; /* ZIP*/
  EP0SW02.XXX-INTL-PHONE-NBR = EP0SW01.XXX-INTL-PHONE-NBR[XXX-INX-FLD-NBR]; /* Phone nbr*/


   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  EP0SW00.XXX-RQT-DATA-FL = "N"; /* Data request*/


end // end EP0S-21000

// Format and converse the map
Function EP0S-22000()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    EP0SW00.XXX-MSG-NBR = converseVar.validationMsgNum; /* Message number*/

  end


   /* ------------------------------------------------------------*/
   /* If the map must be formatted, format the data in the map.*/
   /* ------------------------------------------------------------*/

  if (EP0SW00.XXX-MAP-FMAT-FL == "Y") /* Map must be formatted*/

    EP0S-22100(); /* Format data in the map*/

  end


   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  EP0SM002.XXX-CURR-DT = VGVar.currentShortGregorianDate; /* Current date*/

  EP0SM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  EP0SM002.CAITEM = COMMAREA.CAITEM; /* Application data*/


   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (EP0SW00.XXX-MSG-NBR != 0 /* Display msg*/
   || COMMAREA.CAMSG != " ")   /* or msg text*/

    if (EP0SW00.XXX-MSG-NBR != 0) /* Display msg*/

      if (EP0SW00.XXX-MSG-NBR == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(EP0SW00.XXX-MSG-NBR);
      end /* Msg number*/
    else
      EP0SM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Msg text*/

    end

    EP0SM002.XXX-MSG-LOC-ID = EP0SW00.XXX-MSG-LOC-ID; /* Msg location*/

    set EP0SM002 alarm; /* Sound alarm*/

  else

    set EP0SM002.CATOAP cursor; /* Place csr*/

  end


  converse EP0SM002 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  EP0SW00.XXX-MSG-LOC-ID = " "; /* Message location*/
  EP0SW00.XXX-MSG-NBR = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = EP0SM002.CATOAP; /* TO app*/
  COMMAREA.CAITEM = EP0SM002.CAITEM; /* App data*/


   /* ------------------------------------------------------------*/
   /* Reset modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set EP0SM002.CATOAP normal; /* "TO" Application*/
  set EP0SM002.CAITEM normal; /* ITEM data*/


   /* ------------------------------------------------------------*/
   /* Change the selection indicator to show the line was viewed.*/
   /* ------------------------------------------------------------*/

  EP0SW01.XXX-LN-SEL-IND[XXX-INX-FLD-NBR] = "*"; /* SEL indicator*/


end // end EP0S-22000

// Format the data in the map
Function EP0S-22100()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/

  set EP0SM002 initial; /* M002 input/output area*/

  EP0SW00.XXX-MAP-FMAT-FL = "N"; /* Format the map flag*/


   /* ------------------------------------------------------------*/
   /* Format the map fields from the display storage area.*/
   /* ------------------------------------------------------------*/


  EP0SM002.CU-IVC-CO-ID = EP0SW02.CU-IVC-CO-ID; /* Bill to*/
  EP0SM002.CU-CO-ID = EP0SW02.CU-CO-ID; /* Ship to*/
  EP0SM002.CU-CO-NM = EP0SW02.CU-CO-NM; /* Company name*/
  EP0SM002.CU-CO-CONTACT = EP0SW02.CU-CO-CONTACT; /* Contact*/
  EP0SM002.IV-SHIPTO-ADDR1 = EP0SW02.IV-SHIPTO-ADDR1; /* Address line 1*/
  EP0SM002.IV-SHIPTO-ADDR2 = EP0SW02.IV-SHIPTO-ADDR2; /* Address line 2*/
  EP0SM002.IV-SHIPTO-ADDR3 = EP0SW02.IV-SHIPTO-ADDR3; /* Address line 3*/
  EP0SM002.IV-SHIPTO-CITY = EP0SW02.IV-SHIPTO-CITY; /* City*/
  EP0SM002.IV-SHIPTO-ST-CD = EP0SW02.IV-SHIPTO-ST-CD; /* State code*/
  EP0SM002.XSTDESC = EP0SW02.XSTDESC; /* State description*/
  EP0SM002.IV-SHIPTO-ZIP = EP0SW02.IV-SHIPTO-ZIP; /* ZIP code*/
  EP0SM002.XXX-INTL-PHONE-NBR = EP0SW02.XXX-INTL-PHONE-NBR; /* Phone number*/


end // end EP0S-22100

// Check attention identifier
Function EP0S-23000()
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (EP0SM002.CATOAP > " ") /* FAST PATH request*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      EP0SS-TA0050-P(); /* Purge temp storage*/

      XSEPS-EXIT(); /* Exit*/

      set EP0SM002.CATOAP cursor, bold; /* Highlight*/

    else

      EP0SW00.XXX-MSG-LOC-ID = "13000"; /* Message location*/
      converseLib.validationFailed(258); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end


   /* ------------------------------------------------------------*/
   /* If EXIT to map 1 requested.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/

    if (EP0SM001.CU-IVC-CO-ID > 0
     && EP0SM001.CU-CO-ID > 0) /* Unique row request*/

      EP0SW00.XXX-RQT-DATA-FL = "N"; /* Data request flag*/

    end

    EP0SW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
    EP0SW00.XXX-MAP-DSP-CD = "1"; /* Map to be displayed*/

    exit stack; /* Exit to display map*/

  end


   /* ------------------------------------------------------------*/
   /* Transfer to Master Menu.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf4) /* EXIT to Master Menu*/

    COMMAREA.CATOAP = "MN0M"; /* Master Menu*/

    EP0SS-TA0050-P(); /* Purge temp storage*/

    XSEPS-EXIT(); /* Exit to another app*/

    exit stack; /* Exit to display map*/

  end


   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER not pressed*/

    EP0SW00.XXX-MSG-LOC-ID = "23000"; /* Message location*/
    converseLib.validationFailed(04); /* Invalid key*/

    exit stack; /* Display map*/

  end


end // end EP0S-23000

// Verify data that was entered
Function EP0S-24000()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/

  if (EP0SM002.CAITEM > " ") /* Application data was entered*/

    EP0SW00.XXX-MSG-LOC-ID = "24000"; /* Message location*/
    converseLib.validationFailed(259); /* Enter only with FAST PATH*/
    set EP0SM002.CAITEM cursor, bold; /* Highlight*/

  end


  EP0SW00.EP0SW-DATA-CHG-FL = "N"; /* No changed data*/


   /* ------------------------------------------------------------*/
   /* If any error was found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    exit stack; /* Exit to display map*/

  end


end // end EP0S-24000

// Process valid input request
Function EP0S-25000()
   /* ------------------------------------------------------------*/
   /* Determine if another line was selected for viewing.*/
   /* ------------------------------------------------------------*/

  if ("S" in EP0SW01.XXX-LN-SEL-IND from XXX-INX-FLD-NBR) /* Line was selected*/

    EP0SW00.XXX-INX-FLD-NBR = sysVar.arrayIndex; /* Map line index*/
    EP0SW00.XXX-RQT-DATA-FL = "Y"; /* Request for data*/

  else

    EP0SW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map*/
    EP0SW00.XXX-MAP-DSP-CD = "1"; /* Display map*/

  end


end // end EP0S-25000

// Add page to temporary storage
Function EP0SS-TA0050-A()
   /* ------------------------------------------------------------*/
   /* Add the next page to the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  EP0SW01.XXX-TEMP-STG-LNTH = EP0SW00.XXX-TEMP-STG-LNTH; /* TS length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Appl ID*/

  TA5REC.TA5FNCCD = "A"; /* ADD funct*/

  try
    call "TA0050" (EP0SW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Add page*/


   /* ------------------------------------------------------------*/
   /* If the call was successful, initialize the storage area and*/
   /* indicators to be used and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* & normal return cd*/

    set EP0SW01 empty; /* M001 storage*/

    EP0SW00.XXX-HI-PAGE-NBR = TA5REC.TA5TSQIX; /* Highest page number*/

    TA5REC.TA5TSQIX = 0; /* Clear last page nbr*/

    return; /* Go to prior process*/

  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return cd*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutn parms*/

  EP0SW00.XXX-MSG-LOC-ID = "TA0050A"; /* Msg location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back chgs*/

  converseLib.validationFailed(01); /* Unexpected err*/
  TA1REC.TA1FUNC = "RETN"; /* Term function*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = EP0SW00.XXX-MSG-LOC-ID; /* Msg location*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error routine*/

  exit stack; /* Exit to map*/


end // end EP0SS-TA0050-A

// Purge any temporary storage
Function EP0SS-TA0050-P()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/

  set EP0SW01 empty; /* M001 display storage*/

  EP0SW00.XXX-PAGE-UPD-FL = "N"; /* Page update flag*/

  TA5REC.TA5TSQIX = 0; /* Displayed page number*/
  EP0SW00.XXX-HI-PAGE-NBR = 0; /* Highest page number*/


   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application id*/

  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (EP0SW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Purge storage*/


   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parms*/

  EP0SW00.XXX-MSG-LOC-ID = "TA0050P"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back*/

  converseLib.validationFailed(01); /* Unexpected error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = EP0SW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error routine*/

  exit stack; /* Exit to map*/


end // end EP0SS-TA0050-P

// Read temporary storage page
Function EP0SS-TA0050-R()
   /* ------------------------------------------------------------*/
   /* Read the next page from the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  EP0SW01.XXX-TEMP-STG-LNTH = EP0SW00.XXX-TEMP-STG-LNTH; /* TS length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Appl id*/
  TA5REC.TA5TSQIX = EP0SW00.XXX-CURR-PAGE-NBR; /* Pg nbr*/

  TA5REC.TA5FNCCD = "R"; /* READ func*/

  try
    call "TA0050" (EP0SW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Read page*/


   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parms*/

  EP0SW00.XXX-MSG-LOC-ID = "TA0050R"; /* Message*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back*/

  converseLib.validationFailed(01); /* Unexpected error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = EP0SW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "READ TEMPORARY STORAGE PAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error routine*/

  exit stack; /* Exit to map*/


end // end EP0SS-TA0050-R

// Update temporary storage page
Function EP0SS-TA0050-U()
   /* ------------------------------------------------------------*/
   /* Update the page in the temporary storage queue.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (EP0SW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update page*/


   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return cd*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutn parms*/

  EP0SW00.XXX-MSG-LOC-ID = "TA0050U"; /* Message loc*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back*/

  converseLib.validationFailed(01); /* Error*/
  TA1REC.TA1FUNC = "RETN"; /* Termination*/

  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = EP0SW00.XXX-MSG-LOC-ID; /* Msg location*/
  TA1REC.TA1LOC = "UPDATE TEMPORARY STORAGE PAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error routine*/

  exit stack; /* Exit to map*/


end // end EP0SS-TA0050-U

// Close selected set cursor
Function EP0SS-VDCSHP01-C1()
   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set of table rows.*/
   /* ------------------------------------------------------------*/

  try
    call "VDCSHP01" ("C1", SQLCA, VDCSHP01) {isNoRefresh = yes, isExternal = yes};
  end /* Close cursor*/


   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  EP0SW00.XXX-MSG-LOC-ID = "VDCSHPC1"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back*/

  converseLib.validationFailed(01); /* Error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Function*/

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EP0SW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDCSHP01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error routine*/

  exit stack; /* Display map*/


end // end EP0SS-VDCSHP01-C1

// Fetch next row in cursor
Function EP0SS-VDCSHP01-N1()
   /* ------------------------------------------------------------*/
   /* Fetch the next row that was selected from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VDCSHP01" ("N1", SQLCA, VDCSHP01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/


   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
    /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      EP0SW00.EP0SW-VDCSHP-EOF-FL = "Y"; /* End of cursor*/

      return; /* Return to prior process*/

    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  EP0SW00.XXX-MSG-LOC-ID = "VDCSHPN1"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EP0SW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "FETCH NEXT ROW IN CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDCSHP01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  exit stack; /* Exit to map*/


end // end EP0SS-VDCSHP01-N1

// Select the table row
Function EP0SS-VDCSHP01-S()
   /* ------------------------------------------------------------*/
   /* Select the unique row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VDCSHP01" ("S ", SQLCA, VDCSHP01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/


   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      return; /* Return to previous process*/

    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  EP0SW00.XXX-MSG-LOC-ID = "VDCSHP-S"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* Contention*/

    converseLib.validationFailed(31); /* Contention*/
    TA1REC.TA1FUNC = "POST"; /* Function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back*/

    converseLib.validationFailed(01); /* Unexpected error*/
    TA1REC.TA1FUNC = "RETN"; /* Function*/

    converseLib.clearScreen();
     /* Clear screen*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EP0SW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "SELECT THE TABLE ROW"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDCSHP01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  exit stack; /* Exit to map*/


end // end EP0SS-VDCSHP01-S

// Select set and open cursor
Function EP0SS-VDCSHP01-S1()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VDCSHP01" ("S1", SQLCA, VDCSHP01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/


   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  EP0SW00.XXX-MSG-LOC-ID = "VDCSHPS1"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(01); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EP0SW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "SELECT SET AND OPEN CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VDCSHP01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  exit stack; /* Exit to map*/


end // end EP0SS-VDCSHP01-S1

//*** RECORD=EP0SW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record EP0SW00 type basicRecord
  10 XXX-RQT-DATA-FL XXX-RQT-DATA-FL ; 
  10 XXX-MAP-FMAT-FL XXX-MAP-FMAT-FL ; 
  10 XXX-MAP-DSP-CD XXX-MAP-DSP-CD ; 
  10 XXX-TEMP-STG-LNTH XXX-TEMP-STG-LNTH ; 
  10 XXX-INX-LMT-NBR XXX-INX-LMT-NBR ; 
  10 XXX-INX-FLD-NBR XXX-INX-FLD-NBR ; 
  10 XXX-CURR-PAGE-NBR XXX-CURR-PAGE-NBR ; 
  10 XXX-HI-PAGE-NBR XXX-HI-PAGE-NBR ; 
  10 XXX-PAGE-UPD-FL XXX-PAGE-UPD-FL ; 
  10 XXX-MSG-LOC-ID XXX-MSG-LOC-ID ; 
  10 XXX-MSG-NBR XXX-MSG-NBR ; 
  10 CU-IVC-CO-ID CU-IVC-CO-ID ; 
  10 CU-CO-ID CU-CO-ID ; 
  10 EP0SW-VDCSHP-EOF-FL EP0SW-VDCSHP-EOF-FL ; 
  10 EP0SW-DATA-CHG-FL EP0SW-DATA-CHG-FL ; 
end // end EP0SW00

//*** RECORD=EP0SW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record EP0SW01 type basicRecord
  5 XXX-TEMP-STG-LNTH XXX-TEMP-STG-LNTH ; 
  5 * char(3285) ; 
    10 XXX-LN-SEL-IND XXX-LN-SEL-IND [15] ; 
    10 CU-IVC-CO-ID CU-IVC-CO-ID [15] ; 
    10 CU-CO-ID CU-CO-ID [15] ; 
    10 RTL-LOC-TYP-IND RTL-LOC-TYP-IND [15] ; 
    10 CU-CO-NM CU-CO-NM [15] ; 
    10 OC-ADDR-CD OC-ADDR-CD [15] ; 
    10 IV-SHIPTO-ADDR1 IV-SHIPTO-ADDR1 [15] ; 
    10 IV-SHIPTO-ADDR2 IV-SHIPTO-ADDR2 [15] ; 
    10 IV-SHIPTO-ADDR3 IV-SHIPTO-ADDR3 [15] ; 
    10 IV-SHIPTO-CITY IV-SHIPTO-CITY [15] ; 
    10 IV-SHIPTO-ST-CD IV-SHIPTO-ST-CD [15] ; 
    10 IV-SHIPTO-ZIP IV-SHIPTO-ZIP [15] ; 
    10 XXX-INTL-PHONE-NBR XXX-INTL-PHONE-NBR [15] ; 
    10 CU-CO-CONTACT CU-CO-CONTACT [15] ; 
end // end EP0SW01

//*** RECORD=EP0SW02 ****
// ------------------------
// Map 002 display storage.
// ------------------------
// ***********************
Record EP0SW02 type basicRecord
  10 CU-IVC-CO-ID CU-IVC-CO-ID ; 
  10 CU-CO-ID CU-CO-ID ; 
  10 RTL-LOC-TYP-IND RTL-LOC-TYP-IND ; 
  10 CU-CO-NM CU-CO-NM ; 
  10 OC-ADDR-CD OC-ADDR-CD ; 
  10 IV-SHIPTO-ADDR1 IV-SHIPTO-ADDR1 ; 
  10 IV-SHIPTO-ADDR2 IV-SHIPTO-ADDR2 ; 
  10 IV-SHIPTO-ADDR3 IV-SHIPTO-ADDR3 ; 
  10 IV-SHIPTO-CITY IV-SHIPTO-CITY ; 
  10 IV-SHIPTO-ST-CD IV-SHIPTO-ST-CD ; 
  10 XSTDESC XSTDESC ; 
  10 IV-SHIPTO-ZIP IV-SHIPTO-ZIP ; 
  10 XXX-INTL-PHONE-NBR XXX-INTL-PHONE-NBR ; 
  10 CU-CO-CONTACT CU-CO-CONTACT ; 
end // end EP0SW02

//*** RECORD=VDCSHP01 ****
// ********* "DCMS" SHIP-TO OVERRIDE ADDRESSES TABLE **********
// 
// Special Note:  Usage of this table is restricted to Memphis
//                Apparel.  Population and maintenance of this
//                table is driven by an interface from the 3rd
//                party WMS package ("DCMS").
// 
// DB2 TABLE VIEW:       DPICK.VDCSHP01
// 
// COPYLIB MEMBER:       DDCSHP01
// 
// I/O MODULE:           VDCSHP01
// 
// KEY TO DB2 TABLE:     CU-IVC-CO-ID  (bill-to customer)
//                       CU-CO-ID      (ship-to "store")
// 
// DATE CREATED:         JULY 1, 1998
// 
// MAINTENANCE LOG:
// 
// DATE        NAME      COMMENT
// --------    ------    --------------------------------------
// 07/01/98    esmit2    New view definition.
// ************************
Record VDCSHP01 type basicRecord
  10 CU-IVC-CO-ID CU-IVC-CO-ID ; 
  10 CU-CO-ID CU-CO-ID ; 
  10 RTL-LOC-TYP-IND RTL-LOC-TYP-IND ; 
  10 CU-CO-NM CU-CO-NM ; 
  10 OC-ADDR-CD OC-ADDR-CD ; 
  10 IV-SHIPTO-ADDR1 IV-SHIPTO-ADDR1 ; 
  10 IV-SHIPTO-ADDR2 IV-SHIPTO-ADDR2 ; 
  10 IV-SHIPTO-ADDR3 IV-SHIPTO-ADDR3 ; 
  10 IV-SHIPTO-CITY IV-SHIPTO-CITY ; 
  10 IV-SHIPTO-ST-CD IV-SHIPTO-ST-CD ; 
  10 IV-SHIPTO-ZIP IV-SHIPTO-ZIP ; 
  10 XXX-INTL-PHONE-NBR XXX-INTL-PHONE-NBR ; 
  10 CU-CO-CONTACT CU-CO-CONTACT ; 
  10 ZZ-SDT ZZ-SDT ; 
  10 ZZ-SETUP-HHMM ZZ-SETUP-HHMM ; 
  10 XXX-USER-ID XXX-USER-ID ; 
  10 ZZ-CHNG-DT ZZ-CHNG-DT ; 
  10 ZZ-CHNG-HHMM ZZ-CHNG-HHMM ; 
  10 ZZ-CHNG-CNT ZZ-CHNG-CNT ; 
end // end VDCSHP01

DataItem CU-CO-CONTACT char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// invoice customer company id
DataItem CU-IVC-CO-ID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// Data change flag
DataItem EP0SW-DATA-CHG-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// VSTADR01 EOF flag
DataItem EP0SW-VDCSHP-EOF-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// OC_ADDR_CD
DataItem OC-ADDR-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// RTL_LOC_TYP_IND
DataItem RTL-LOC-TYP-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

