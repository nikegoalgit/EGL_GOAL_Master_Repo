package ep0g;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import ep.common.*;
import ku.common.*;
import pk.common.*;
import sp.common.*;
import ta.common.*;
import tf.common.*;
import vv.common.*;
//*** PROGRAM=EP0G ****
// Step instructions are instructions that are longer than 30
// characters.
// 
// Normally, we create dcms instructions by completing one of
// the other special processing code screens. For example
// EP0C, EP0D or EP0f. When an entry is made through those
// screens, the dcms code and it's instructions are later
// transmitted to DCMS. But the instruction ia always limited
// to 30 characters because DCMS is not set up to handle a
// longer field.
// 
// When the instruction is longer than 30 characters, Nike
// calls DCMS and gives them the code and instructions over
// the phone or an e-mail occurs. For now, the code is always
// a pre-existing dcms code, such as HG01. DCMS will print
// both the 30 character instruction we originally had
// associated with the code and the instructions that were
// given over the phone.
// 
// This screen was created to track or document the
// instructions that were given over the phone. No changes
// entered in the screen are ever sent to DCMS. So the user
// can do an add, change, or delete, but the values are only
// updated to the database and never sent to DCMS.
// 
// In ep0g you can:
//     1. delete a record
//     2. add a record
//     3. modify a dcms instruction or a dcms code
//     4. select special processing codes for a specific source
//     5. page forward/back
// 
// ep0g is a pagable screen. When first conversed, it looks to
// see if a specific record has been passed. If not, all
// values will be displayed.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE    USERID  DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      07/28/98  OVAZQU  New application.
// multgpc  08/06/99  OENFIE  regenerate to pick up changes to
//                            XPEP-00000
// multgpc  08/09/99  OENFIE  changed EP0GS-EXIT to move the
//                            correct values to COMMAREA.
// *********************
Program EP0G type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "EP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  EP0GW00 EP0GW00; // record
  EP0GW01 EP0GW01; // record
  EP0GW02 EP0GW02; // record
  EPWREC EPWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  TFWREC TFWREC; // record
  VSPRCD01 VSPRCD01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use SPRCTBL {deleteAfterUse = yes}; // table
  use EP0GM.EP0GM001,  // forms
      EP0GM.XX0XM001
   {
    helpKey = pf13,
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPEP-00000: XPEP-00000();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    set EP0GM001 initial; /* M001 input/output*/
    set EP0GW00 empty; /* Working storage*/
    set EP0GW01 empty; /* M001 display storage*/
    set EP0GW02 empty; /* Working user area*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set VSPRCD01 empty; /* Special Processing record layout*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    set XX0XW02 empty; /* Pop-up screen parameters*/

    EP0GW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/
    EP0GW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
    EP0GW00.XXX-TEMP-STG-LNTH = 709; /* Temporary storage length*/
    EP0GW00.XXX-INX-LMT-NBR = 13; /* Number of lines on a page*/


     /* ----------------------------------------------------------*/
     /* Initialize any fields passed from another application.*/
     /* ----------------------------------------------------------*/
    if (COMMAREA.CAITEM > " ") /* Data was passed*/
      EP0GM001.EP0GM-SPRC-SRCE-CD = COMMAREA.CAITEM;
      COMMAREA.CAITEM = " "; /* Clear passed data*/
    end


     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto EP0G-00000; /* Converse the main process*/


    EP0G-00000: EP0G-00000();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto EP0G-00000; /* Converse the main process*/


  end // end main
end // end EP0G

// Determine which map to display
Function EP0G-00000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) display the map.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Get date & time*/

  EP0G-10000(); /* Display map 1*/

  exit stack; /* Exit to display map*/


end // end EP0G-00000

// Main process to display a map
Function EP0G-10000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  EP0G-11000(); /* Obtain the data to display*/

  EP0G-12000(); /* Format and display the map*/

  EP0G-13000(); /* Check attention identifier*/

  EP0G-14000(); /* Verify the entered data*/

  EP0G-15000(); /* Process valid input request*/



end // end EP0G-10000

// Obtain the data to display
Function EP0G-11000()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  if (EP0GW00.XXX-RQT-DATA-FL != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/
  end


   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/
  if (EP0GW00.XXX-MSG-NBR == 0) /* No message to display*/
    EP0GW00.XXX-CURR-PAGE-NBR = 1; /* Page number to display*/
  end


   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/
  EP0GS-TA0050-P(); /* Purge any temporary storage*/

  EP0GW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
  EP0GW00.EP0GW-SPRC-SRCE-CD = EP0GM001.EP0GM-SPRC-SRCE-CD; /* source request from map*/
  EP0GW00.EP0GW-DCMS-SPRC-CD = EP0GM001.EP0GM-DCMS-SPRC-CD; /* dcms request from map*/


   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/
  set VSPRCD01 empty; /* Clear row storage area*/
  VSPRCD01.PK-GSPRC-SRCE-CD = "STEP";

  EP0GW02.EP0GW-IO-TASK = "S1";

  EP0GS-VSPRCD01-OPN(); /* Select set and open cursor*/

  EP0GW00.EP0GW-SRCE-EOF-FL = "N"; /* End of cursor flag*/
  EP0GW00.XXXNBRCY = 0; /* record counter*/
  EP0GW02.EP0GW-IO-TASK = "N1";

  EP0GS-VSPRCD01-FTC(); /* Fetch first row in cursor*/

   /* ------------------------------------------------------------*/
   /* Format the data into pages & fetch next until end of cursor.*/
   /* ------------------------------------------------------------*/
  EP0GW00.EP0GW-WINDX = 1; /* Display line index*/

  while (EP0GW00.EP0GW-SRCE-EOF-FL == "N") /* Until end of cursor*/

    if ((EP0GM001.EP0GM-SPRC-SRCE-CD == " "
     && EP0GM001.EP0GM-DCMS-SPRC-CD == " ")
     || (EP0GM001.EP0GM-SPRC-SRCE-CD == VSPRCD01.PK-SPCL-PROC-VAR1
     && EP0GM001.EP0GM-DCMS-SPRC-CD == VSPRCD01.PK-DCMS-SPRC-CD)
     || (EP0GM001.EP0GM-SPRC-SRCE-CD == VSPRCD01.PK-SPCL-PROC-VAR1
     && EP0GM001.EP0GM-DCMS-SPRC-CD == " ")
     || (EP0GM001.EP0GM-SPRC-SRCE-CD == " "
     && EP0GM001.EP0GM-DCMS-SPRC-CD == VSPRCD01.PK-DCMS-SPRC-CD))

      EP0GW01.PK-SPCL-PROC-VAR1[EP0GW-WINDX] = VSPRCD01.PK-SPCL-PROC-VAR1;
      EP0GW01.PK-DCMS-SPRC-CD[EP0GW-WINDX] = VSPRCD01.PK-DCMS-SPRC-CD;
      EP0GW01.PK-DCMS-SPRCSUB-CD[EP0GW-WINDX] = VSPRCD01.PK-DCMS-SPRCSUB-CD;
      EP0GW01.PK-DCMS-SINST-TXT[EP0GW-WINDX] = VSPRCD01.PK-DCMS-SINST-TXT;

      EP0GW00.EP0GW-WINDX = EP0GW00.EP0GW-WINDX + 1; /* incr line indx*/
      EP0GW00.XXXNBRCY = EP0GW00.XXXNBRCY + 1; /* incr record counter*/

      /* ------------------------------------------------------------*/
      /* If the page is full, add the page to the storage queue.*/
      /* ------------------------------------------------------------*/
      if (EP0GW00.EP0GW-WINDX > EP0GW00.XXX-INX-LMT-NBR) /* Page is full*/
        EP0GS-TA0050-A(); /* Add page to temporary storage*/
        EP0GW00.EP0GW-WINDX = 1; /* Display line index*/
      end
    end

    EP0GS-VSPRCD01-FTC(); /* Fetch next row in cursor*/
  end


   /* ------------------------------------------------------------*/
   /* Add any partially formatted or empty last page to the queue.*/
   /* (need to have empty lines for add's).*/
   /* ------------------------------------------------------------*/
  EP0GS-TA0050-A(); /* Add page to temporary storage*/


   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/
  EP0GW02.EP0GW-IO-TASK = "C1";

  EP0GS-VSPRCD01-CLS(); /* Close selected set cursor*/


   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/
  if (EP0GW00.XXXNBRCY == 0) /* no data found*/
    EP0GW00.XXX-MSG-LOC-ID = "11000"; /* Message location*/
    set EP0GM001.EP0GM-SPRC-SRCE-CD cursor, bold;
    converseLib.validationFailed(12); /* No data was found to display*/
    exit stack; /* Exit to display map*/
  end


   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/
  EP0GW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/


end // end EP0G-11000

// Format and converse the map
Function EP0G-12000()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    EP0GW00.XXX-MSG-NBR = converseVar.validationMsgNum; /* Message number*/
  end


   /* ------------------------------------------------------------*/
   /* If the map must be formatted, format the data in the map.*/
   /* ------------------------------------------------------------*/
  if (EP0GW00.XXX-MAP-FMAT-FL == "Y") /* Map must be formatted*/
    EP0G-12100(); /* Format the data in the map*/
  end


   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  EP0GM001.XXX-CURR-DT = VGVar.currentShortGregorianDate; /* Current date*/
  EP0GM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  EP0GM001.CAITEM = COMMAREA.CAITEM; /* Application data*/


   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  if (EP0GW00.XXX-MSG-NBR != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ")   /* or message text*/

    if (EP0GW00.XXX-MSG-NBR != 0) /* Message to display*/
      if (EP0GW00.XXX-MSG-NBR == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(EP0GW00.XXX-MSG-NBR);
      end /* Message number*/
    else
      EP0GM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
    end

    EP0GM001.XXX-MSG-LOC-ID = EP0GW00.XXX-MSG-LOC-ID;
    set EP0GM001 alarm; /* Indicate sound alarm*/
  end


  converse EP0GM001 ;


   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  EP0GW00.XXX-MSG-LOC-ID = " "; /* Message location*/
  EP0GW00.XXX-MSG-NBR = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = EP0GM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = EP0GM001.CAITEM; /* Application data*/


   /* ------------------------------------------------------------*/
   /* Reset modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  EP0GW00.EP0GW-WINDX = 1; /* Initialize line index*/

  set EP0GM001.EP0GM-SPRC-SRCE-CD normal;
  set EP0GM001.EP0GM-DCMS-SPRC-CD normal;

  while (EP0GW00.EP0GW-WINDX <= EP0GW00.XXX-INX-LMT-NBR) /* until e-o-scrn*/

    if (EP0GM001.PK-DCMS-SPRC-CD[EP0GW-WINDX] > " "
     || EP0GM001.PK-SPCL-PROC-VAR1[EP0GW-WINDX] > " ")
      set EP0GM001.XXX-LN-SEL-IND[EP0GW-WINDX] normal;
      set EP0GM001.PK-SPCL-PROC-VAR1[EP0GW-WINDX] normal;
      set EP0GM001.PK-DCMS-SPRC-CD[EP0GW-WINDX] normal;
      set EP0GM001.PK-DCMS-SINST-TXT[EP0GW-WINDX] normal;
    end

    EP0GW00.EP0GW-WINDX = EP0GW00.EP0GW-WINDX + 1;
  end

  set EP0GM001.CATOAP normal; /* TO application*/
  set EP0GM001.CAITEM normal; /* Application data*/


end // end EP0G-12000

// Format the data in the map
Function EP0G-12100()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  set EP0GM001 initial; /* M001 input/output area*/

  EP0GM001.EP0GM-SPRC-SRCE-CD = EP0GW00.EP0GW-SPRC-SRCE-CD;
  EP0GM001.EP0GM-DCMS-SPRC-CD = EP0GW00.EP0GW-DCMS-SPRC-CD;

  EP0GW00.XXX-MAP-FMAT-FL = "N"; /* Format the map flag*/


   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/
  if (EP0GW00.XXX-HI-PAGE-NBR > 0) /* Pages were formatted*/

    if (EP0GW00.XXX-CURR-PAGE-NBR != TA5REC.TA5TSQIX)
                                   /* Desired page not current*/
      /* ------------------------------------------------------------*/
      /* If the current page has been changed, update the page in*/
      /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/
      if (EP0GW00.XXX-PAGE-UPD-FL == "Y") /* Current page was changed*/

        EP0GS-TA0050-U(); /* Update temporary storage page*/
        EP0GW00.XXX-PAGE-UPD-FL = "N"; /* Page update flag*/
      end

      /* ------------------------------------------------------------*/
      /* If the desired page number is greater than the highest page*/
      /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/
      if (EP0GW00.XXX-CURR-PAGE-NBR > EP0GW00.XXX-HI-PAGE-NBR)
                                   /* Desired greater highest*/
        EP0GW00.XXX-CURR-PAGE-NBR = EP0GW00.XXX-HI-PAGE-NBR;
                                   /* Default to highest*/
      end

      EP0GS-TA0050-R(); /* Read temporary storage page*/
    end

    /* ------------------------------------------------------------*/
    /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/
    set EP0GM001.XXX-CURR-PAGE-DESC skip; /* "PAGE" literal*/
    EP0GM001.XXX-CURR-PAGE-NBR = EP0GW00.XXX-CURR-PAGE-NBR;
                                   /* Current page*/
    set EP0GM001.XXX-HI-PAGE-DESC skip; /* "OF" literal*/
    EP0GM001.XXX-HI-PAGE-NBR = EP0GW00.XXX-HI-PAGE-NBR;
                                   /* Highest page*/
  end


   /* ------------------------------------------------------------*/
   /* Format the map fields from the display storage area.*/
   /* ------------------------------------------------------------*/
  EP0GW00.EP0GW-WINDX = 1; /* Initialize line index*/

  while (EP0GW00.EP0GW-WINDX <= EP0GW00.XXX-INX-LMT-NBR) /* fill page*/

    if (EP0GW01.PK-DCMS-SPRC-CD[EP0GW-WINDX] > " ")
      if (EP0GW00.EP0GW-WINDX == 1) /* First select field*/
        set EP0GM001.XXX-LN-SEL-IND[EP0GW-WINDX] cursor, normal;
      else
        set EP0GM001.XXX-LN-SEL-IND[EP0GW-WINDX] normal;
      end
    end

    EP0GM001.XXX-LN-SEL-IND[EP0GW-WINDX] = EP0GW01.XXX-LN-SEL-IND[EP0GW-WINDX];
    EP0GM001.PK-SPCL-PROC-VAR1[EP0GW-WINDX] = EP0GW01.PK-SPCL-PROC-VAR1[EP0GW-WINDX];
    EP0GM001.PK-DCMS-SPRC-CD[EP0GW-WINDX] = EP0GW01.PK-DCMS-SPRC-CD[EP0GW-WINDX];
    EP0GM001.PK-DCMS-SPRCSUB-CD[EP0GW-WINDX] = EP0GW01.PK-DCMS-SPRCSUB-CD[EP0GW-WINDX];
    EP0GM001.PK-DCMS-SINST-TXT[EP0GW-WINDX] = EP0GW01.PK-DCMS-SINST-TXT[EP0GW-WINDX];

    EP0GW00.EP0GW-WINDX = EP0GW00.EP0GW-WINDX + 1; /* incr line indx*/
  end


end // end EP0G-12100

// Check attention identifier
Function EP0G-13000()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    if (EP0GW00.XXX-RQT-DATA-FL == "Y") /* Request for data pending*/
      set EP0GW01 empty; /* M001 display storage*/
    end

    EP0GW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/
    EP0GW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/
  end


   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  if (EP0GM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      EP0GS-TA0050-P(); /* Purge any temporary storage*/
      EP0GS-EXIT(); /* Exit to another application*/

      set EP0GM001.CATOAP cursor, bold; /* Highlight*/
    else
      EP0GW00.XXX-MSG-LOC-ID = "13000"; /* Message location*/
      converseLib.validationFailed(18); /* PA/PF key may not be used*/
    end

    exit stack; /* Exit to display map*/
  end


   /* ------------------------------------------------------------*/
   /* If a PF key transfer requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf2 /* or PF2 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "EP0GM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf2) /* PF2 was pressed*/
      COMMAREA.CATOAP = "EP0C"; /* special processing code list*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "EP0A"; /* System Menu*/
    end

    EP0GS-TA0050-P(); /* Purge any temporary storage*/
    EP0GS-EXIT(); /* Exit to another application*/

    exit stack; /* Exit to display map*/
  end


   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf9   /* and PF9 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf12) /* and PF12 was not pressed*/

    EP0GW00.XXX-MSG-LOC-ID = "13000"; /* Message location*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/
  end


end // end EP0G-13000

// Verify data that was entered
Function EP0G-14000()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  if (EP0GM001.CAITEM > " ") /* Application data was entered*/
    EP0GW00.XXX-MSG-LOC-ID = "14000"; /* Message location*/
    converseLib.validationFailed(9); /* Enter only with FAST PATH*/
    set EP0GM001.CATOAP cursor, bold; /* Highlight*/
  end


   /* ------------------------------------------------------------*/
   /* If pf key requested, determine if any other field changed.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7 /* if scroll back request*/
   || converseVar.eventKey is pf8 /* or scroll forward request*/
   || converseVar.eventKey is pf9 /* or pop-up screen request*/
   || converseVar.eventKey is pf12) /* or pop-up screen request*/

    EP0G-14100(); /* Highlight any changed fields*/
  end


    /* ------------------------------------------------------------*/
    /* Determine whether a valid request to scroll was entered.*/
    /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    EP0G-14200(); /* Verify scroll request*/
  end


    /* ------------------------------------------------------------*/
    /* if PF12 verify that data can be deleted*/
    /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf12) /* Delete request*/
    EP0G-14400(); /* Verify*/
  end


    /* ------------------------------------------------------------*/
    /* Validate <enter> key*/
    /* ------------------------------------------------------------*/
  if (converseVar.eventKey is enter) /* validate enter key*/
    if (EP0GM001.EP0GM-SPRC-SRCE-CD != EP0GW00.EP0GW-SPRC-SRCE-CD
     || EP0GM001.EP0GM-DCMS-SPRC-CD != EP0GW00.EP0GW-DCMS-SPRC-CD)
      EP0G-14500(); /* Highlight other changed fields*/
    else
      EP0G-14600(); /* Verify new data on the lines*/
    end
  end


   /* ------------------------------------------------------------*/
   /* If any error was found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end EP0G-14000

// Highlight any changed fields
Function EP0G-14100()
   /* ------------------------------------------------------------*/
   /* If a modifiable field was changed, indicate that field may*/
   /* not be changed when key is changed or a pf key is pressed.*/
   /* ------------------------------------------------------------*/
  EP0GW00.EP0GW-WINDX = EP0GW00.XXX-INX-LMT-NBR; /* Line index*/

  while (EP0GW00.EP0GW-WINDX > 0) /* Until end of lines*/

    if (EP0GM001.PK-DCMS-SINST-TXT[EP0GW-WINDX] != 
    EP0GW01.PK-DCMS-SINST-TXT[EP0GW-WINDX])
      EP0GW00.XXX-MSG-LOC-ID = "14100"; /* Message location*/
      converseLib.validationFailed(61); /* update valid only with <enter>*/
      set EP0GM001.PK-DCMS-SINST-TXT[EP0GW-WINDX] cursor, bold;
    end

    if (EP0GM001.PK-DCMS-SPRC-CD[EP0GW-WINDX] != 
    EP0GW01.PK-DCMS-SPRC-CD[EP0GW-WINDX])
      EP0GW00.XXX-MSG-LOC-ID = "14100"; /* Message location*/
      converseLib.validationFailed(61); /* update valid only with <enter>*/
      set EP0GM001.PK-DCMS-SPRC-CD[EP0GW-WINDX] cursor, bold;
    end

    if (EP0GM001.PK-SPCL-PROC-VAR1[EP0GW-WINDX] != 
    EP0GW01.PK-SPCL-PROC-VAR1[EP0GW-WINDX])
      EP0GW00.XXX-MSG-LOC-ID = "14100"; /* Message location*/
      converseLib.validationFailed(61); /* update valid only with <enter>*/
      set EP0GM001.PK-SPCL-PROC-VAR1[EP0GW-WINDX] cursor, bold;
    end

    if (EP0GM001.XXX-LN-SEL-IND[EP0GW-WINDX] == " ")
        /* continue*/
    else
      if (EP0GM001.XXX-LN-SEL-IND[EP0GW-WINDX] == "D"
       && converseVar.eventKey is pf12)
          /* continue*/
      else
        EP0GW00.XXX-MSG-LOC-ID = "14100"; /* Message location*/
        converseLib.validationFailed(11); /* Invalid data on field*/
        set EP0GM001.XXX-LN-SEL-IND[EP0GW-WINDX] cursor, bold;
      end
    end

    EP0GW00.EP0GW-WINDX = EP0GW00.EP0GW-WINDX - 1; /* decr line indx*/
  end


  if (EP0GM001.EP0GM-DCMS-SPRC-CD != EP0GW00.EP0GW-DCMS-SPRC-CD)
    EP0GW00.XXX-MSG-LOC-ID = "14100"; /* Message location*/
    converseLib.validationFailed(18); /* valid only with <enter>*/
    set EP0GM001.EP0GM-DCMS-SPRC-CD cursor, bold; /* Highlight*/
  end

  if (EP0GM001.EP0GM-SPRC-SRCE-CD != EP0GW00.EP0GW-SPRC-SRCE-CD)
    EP0GW00.XXX-MSG-LOC-ID = "14100"; /* Message location*/
    converseLib.validationFailed(18); /* valid only with <enter>*/
    set EP0GM001.EP0GM-SPRC-SRCE-CD cursor, bold; /* Highlight*/
  end


end // end EP0G-14100

// Verify scroll request
Function EP0G-14200()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && EP0GW00.XXX-CURR-PAGE-NBR < 2) /* and no previous pages*/

    EP0GW00.XXX-MSG-LOC-ID = "14200"; /* Message location*/
    converseLib.validationFailed(7); /* No previous page to display*/
  end


   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && EP0GW00.XXX-CURR-PAGE-NBR >= EP0GW00.XXX-HI-PAGE-NBR)
                                   /* and no more pages*/
    EP0GW00.XXX-MSG-LOC-ID = "14200"; /* Message location*/
    converseLib.validationFailed(8); /* No more pages to display*/
  end


end // end EP0G-14200

// Validate delete request
Function EP0G-14400()
   /* ------------------------------------------------------------*/
   /* Determine if delete request is valid*/
   /* ------------------------------------------------------------*/
  EP0GW00.EP0GW-ENTRY-FOUND-FL = "N";
  EP0GW00.EP0GW-WINDX = EP0GW00.XXX-INX-LMT-NBR;

  while (EP0GW00.EP0GW-WINDX > 0) /* edit all lines on screen*/

    if (EP0GM001.XXX-LN-SEL-IND[EP0GW-WINDX] != " ")
      if (EP0GM001.XXX-LN-SEL-IND[EP0GW-WINDX] == "D")
        EP0GW00.EP0GW-ENTRY-FOUND-FL = "Y";
      else
        EP0GW00.XXX-MSG-LOC-ID = "14400"; /* Message location*/
        converseLib.validationFailed(39); /* must be 'd' for delete*/
        set EP0GM001.XXX-LN-SEL-IND[EP0GW-WINDX] cursor, bold;
      end
    end

    EP0GW00.EP0GW-WINDX = EP0GW00.EP0GW-WINDX - 1; /* decr line indx*/
  end


  if (EP0GW00.EP0GW-ENTRY-FOUND-FL == "N")
    EP0GW00.XXX-MSG-LOC-ID = "14400"; /* Message location*/
    converseLib.validationFailed(39); /* must be 'd' for delete*/
  end


end // end EP0G-14400

// Validate <enter> key
Function EP0G-14500()
   /* ------------------------------------------------------------*/
   /* If a modifiable field was changed, indicate that field may*/
   /* not be changed when key is changed*/
   /* ------------------------------------------------------------*/
  EP0GW00.EP0GW-WINDX = EP0GW00.XXX-INX-LMT-NBR; /* Line index*/

  while (EP0GW00.EP0GW-WINDX > 0) /* Until end of lines*/

    if (EP0GM001.PK-DCMS-SINST-TXT[EP0GW-WINDX] != 
    EP0GW01.PK-DCMS-SINST-TXT[EP0GW-WINDX])
      EP0GW00.XXX-MSG-LOC-ID = "14500"; /* Message location*/
      converseLib.validationFailed(79); /* invalid change with new key*/
      set EP0GM001.PK-DCMS-SINST-TXT[EP0GW-WINDX] cursor, bold;
    end

    if (EP0GM001.PK-DCMS-SPRC-CD[EP0GW-WINDX] != 
    EP0GW01.PK-DCMS-SPRC-CD[EP0GW-WINDX])
      EP0GW00.XXX-MSG-LOC-ID = "14500"; /* Message location*/
      converseLib.validationFailed(79); /* invalid change with new key*/
      set EP0GM001.PK-DCMS-SPRC-CD[EP0GW-WINDX] cursor, bold;
    end

    if (EP0GM001.PK-SPCL-PROC-VAR1[EP0GW-WINDX] != 
    EP0GW01.PK-SPCL-PROC-VAR1[EP0GW-WINDX])
      EP0GW00.XXX-MSG-LOC-ID = "14500"; /* Message location*/
      converseLib.validationFailed(79); /* invalid change with new key*/
      set EP0GM001.PK-SPCL-PROC-VAR1[EP0GW-WINDX] cursor, bold;
    end

    if (EP0GM001.XXX-LN-SEL-IND[EP0GW-WINDX] != " ")
      EP0GW00.XXX-MSG-LOC-ID = "14500"; /* Message location*/
      converseLib.validationFailed(40); /* must be blank for changes*/
      set EP0GM001.XXX-LN-SEL-IND[EP0GW-WINDX] cursor, bold;
    end

    EP0GW00.EP0GW-WINDX = EP0GW00.EP0GW-WINDX - 1; /* decr line indx*/
  end


  if (EP0GM001.EP0GM-SPRC-SRCE-CD == "LEVL"
   || EP0GM001.EP0GM-SPRC-SRCE-CD == "STEP")
    EP0GW00.XXX-MSG-LOC-ID = "14500"; /* Message location*/
    converseLib.validationFailed(11); /* invalid data*/
    set EP0GM001.EP0GM-SPRC-SRCE-CD cursor, bold;
  end


end // end EP0G-14500

// verify modf'd fields on a line
Function EP0G-14600()
   /* -------------------------------------------------------------*/
   /* If any line field changed, check for valid data on all fields*/
   /* -------------------------------------------------------------*/
  EP0GW00.EP0GW-WINDX = EP0GW00.XXX-INX-LMT-NBR; /* Line index*/

  while (EP0GW00.EP0GW-WINDX > 0) /* Until end of lines*/

    if (EP0GM001.PK-SPCL-PROC-VAR1[EP0GW-WINDX] != 
    EP0GW01.PK-SPCL-PROC-VAR1[EP0GW-WINDX]
     || EP0GM001.PK-DCMS-SPRC-CD[EP0GW-WINDX] != 
    EP0GW01.PK-DCMS-SPRC-CD[EP0GW-WINDX]
     || EP0GM001.PK-DCMS-SINST-TXT[EP0GW-WINDX] != 
    EP0GW01.PK-DCMS-SINST-TXT[EP0GW-WINDX]) /* data changed*/

      if (EP0GM001.PK-DCMS-SINST-TXT[EP0GW-WINDX] == " ")
        EP0GW00.XXX-MSG-LOC-ID = "14600"; /* Message location*/
        converseLib.validationFailed(9); /* required field*/
        set EP0GM001.PK-DCMS-SINST-TXT[EP0GW-WINDX] cursor, bold;
      end

      if (EP0GM001.PK-DCMS-SPRC-CD[EP0GW-WINDX] == " ")
        EP0GW00.XXX-MSG-LOC-ID = "14600"; /* Message location*/
        converseLib.validationFailed(52); /* DCMS code cannot be blank*/
        set EP0GM001.PK-DCMS-SPRC-CD[EP0GW-WINDX] cursor, bold;
      else
        if (EP0GM001.PK-DCMS-SPRC-CD[EP0GW-WINDX] != 
        EP0GW01.PK-DCMS-SPRC-CD[EP0GW-WINDX]) /* dcms cd is changed*/
          if (EP0GW01.PK-DCMS-SPRC-CD[EP0GW-WINDX] == " ") /* new dcms cd*/
            if (EP0GM001.EP0GM-DCMS-SPRC-CD == " "
             || EP0GM001.EP0GM-DCMS-SPRC-CD == 
            EP0GM001.PK-DCMS-SPRC-CD[EP0GW-WINDX])
              EP0G-14610(); /* edit new DCMS spec proc cd*/
            else
              EP0GW00.XXX-MSG-LOC-ID = "14600"; /* Message location*/
              converseLib.validationFailed(393); /* DCMS code cannot be changed*/
              set EP0GM001.EP0GM-DCMS-SPRC-CD bold;
              set EP0GM001.PK-DCMS-SPRC-CD[EP0GW-WINDX] cursor, bold;
            end
          else
            EP0GW00.XXX-MSG-LOC-ID = "14600"; /* Message location*/
            converseLib.validationFailed(393); /* DCMS code cannot be changed*/
            set EP0GM001.PK-DCMS-SPRC-CD[EP0GW-WINDX] cursor, bold;
          end
        end
      end

      if (EP0GM001.PK-SPCL-PROC-VAR1[EP0GW-WINDX] == " ")
        EP0GW00.XXX-MSG-LOC-ID = "14600"; /* Message location*/
        converseLib.validationFailed(9); /* required field*/
        set EP0GM001.PK-SPCL-PROC-VAR1[EP0GW-WINDX] cursor, bold;
      else
        if (EP0GM001.PK-SPCL-PROC-VAR1[EP0GW-WINDX] != 
        EP0GW01.PK-SPCL-PROC-VAR1[EP0GW-WINDX]) /* assoc source is changed*/
          if (EP0GM001.EP0GM-SPRC-SRCE-CD == " "
           || EP0GM001.EP0GM-SPRC-SRCE-CD == 
          EP0GM001.PK-SPCL-PROC-VAR1[EP0GW-WINDX])
            EP0G-14620(); /* edit new source*/
          else
            EP0GW00.XXX-MSG-LOC-ID = "14600"; /* Message location*/
            converseLib.validationFailed(11); /* Invalid value*/
            set EP0GM001.EP0GM-SPRC-SRCE-CD bold;
            set EP0GM001.PK-SPCL-PROC-VAR1[EP0GW-WINDX] cursor, bold;
          end
        end
      end
    end

    if (EP0GM001.XXX-LN-SEL-IND[EP0GW-WINDX] != " ")
      EP0GW00.XXX-MSG-LOC-ID = "14600"; /* Message location*/
      converseLib.validationFailed(40); /* must be blank for changes*/
      set EP0GM001.XXX-LN-SEL-IND[EP0GW-WINDX] cursor, bold;
    end

    EP0GW00.EP0GW-WINDX = EP0GW00.EP0GW-WINDX - 1; /* decr line indx*/
  end


end // end EP0G-14600

// Verify dcms code
Function EP0G-14610()
   /* -------------------------------------------------------------*/
   /* Verify new DCMS code*/
   /* -------------------------------------------------------------*/

  set VSPRCD01 empty; /* Clear row storage area*/
  VSPRCD01.PK-DCMS-SPRC-CD = EP0GM001.PK-DCMS-SPRC-CD[EP0GW-WINDX];
  VSPRCD01.PK-DCMS-SPRCSUB-CD = 0;

  EP0GS-VSPRCD01-SEL(); /* Select set and open cursor*/

  if (SQLCA.VAGen_SQLCODE == 100) /* does not exist yet*/
    EP0GW00.XXX-MSG-LOC-ID = "14610"; /* Message location*/
    converseLib.validationFailed(11); /* invalid dcms code*/
    set EP0GM001.PK-DCMS-SPRC-CD[EP0GW-WINDX] cursor, bold;
  end


end // end EP0G-14610

// Edit Associated Source
Function EP0G-14620()
   /* ------------------------------------------------------------*/
   /* Edit associated source*/
   /* ------------------------------------------------------------*/

  if (EP0GM001.PK-SPCL-PROC-VAR1[EP0GW-WINDX]
   in SPRCTBL.PK-GSPRC-SRCE-CD)
                                  /* continue*/
  else
    EP0GW00.XXX-MSG-LOC-ID = "14620"; /* Message location*/
    converseLib.validationFailed(11); /* Invalid value*/
    set EP0GM001.PK-SPCL-PROC-VAR1[EP0GW-WINDX] cursor, bold;
  end


end // end EP0G-14620

// Process valid input request
Function EP0G-15000()
   /* ------------------------------------------------------------*/
   /* If request for restore, set flags and return*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf11) /* request for restore*/

    EP0GW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/
    EP0GW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    return; /* Return to previous process*/
  end


   /* ------------------------------------------------------------*/
   /* If the key fields changed, request the data to display.*/
   /* ------------------------------------------------------------*/
  if (EP0GM001.EP0GM-SPRC-SRCE-CD != EP0GW00.EP0GW-SPRC-SRCE-CD
   || EP0GM001.EP0GM-DCMS-SPRC-CD != EP0GW00.EP0GW-DCMS-SPRC-CD)

    EP0GW00.EP0GW-SPRC-SRCE-CD = EP0GM001.EP0GM-SPRC-SRCE-CD;
    EP0GW00.EP0GW-DCMS-SPRC-CD = EP0GM001.EP0GM-DCMS-SPRC-CD;
    EP0GW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/

    return; /* Return to previous process*/
  end


   /* ------------------------------------------------------------*/
   /* If scroll backward was requested, decrement the page number.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    EP0GW00.XXX-CURR-PAGE-NBR = EP0GW00.XXX-CURR-PAGE-NBR - 1;
                                   /* Decrement page number*/
    EP0GW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    return; /* Return to previous process*/
  end


   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, increment the page number.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    EP0GW00.XXX-CURR-PAGE-NBR = EP0GW00.XXX-CURR-PAGE-NBR + 1;
                                   /* Increment page number*/
    EP0GW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    return; /* Return to previous process*/
  end


   /* ------------------------------------------------------------*/
   /* Display pop-up screen for source*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf9) /* Sources pop-up screen requested*/
    EP0G-15200();

    return; /* Return to previous process*/
  end


   /* ------------------------------------------------------------*/
   /* If <enter> key, perform adds/updates*/
   /* If pf12, perform deletes*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is enter)
    EP0G-15400(); /* perform changes*/
  else
    if (converseVar.eventKey is pf12)
      EP0G-15300(); /* perform delete(s)*/
    end
  end


   /* ------------------------------------------------------------*/
   /* If errors found, get out now*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum > 0) /* ?* Errors found*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back db changes*/

    exit stack; /* exit to display map*/
  end


   /* ------------------------------------------------------------*/
   /* Save any field that was changed in the map display storage.*/
   /* ------------------------------------------------------------*/
  EP0GW00.EP0GW-WINDX = 1; /* Initialize line index*/

  while (EP0GW00.EP0GW-WINDX <= EP0GW00.XXX-INX-LMT-NBR)
                                   /* Until end of lines*/
    EP0G-15500(); /* save changes on TS page work area*/

    EP0GW00.EP0GW-WINDX = EP0GW00.EP0GW-WINDX + 1; /* incr line indx*/
  end


  if (EP0GW00.EP0GW-ENTRY-FOUND-FL == "Y")
    EP0GW00.XXX-MSG-LOC-ID = "15000"; /* Message location*/
    converseLib.validationFailed(20); /* transaction completed*/
  end


end // end EP0G-15000

// Display valid source list
Function EP0G-15200()
   /* ------------------------------------------------------------*/
   /* display the list of source codes.*/
   /* ------------------------------------------------------------*/
  XPXX001(); /* Window initialization*/

  XX0XW02.XX0XWHDR = "SPCL PROC SOURC"; /* Heading*/

  while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
    XPSPSRC(); /* Display the list*/
  end

  if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
    EP0GM001.EP0GM-SPRC-SRCE-CD = EP0GW00.EP0GW-SPRC-SRCE-CD; /* rstr*/
  else
    EP0GM001.EP0GM-SPRC-SRCE-CD = SPRCTBL.PK-GSPRC-SRCE-CD[XX0XWPIX]; /* selctd*/
  end

  set EP0GM001.EP0GM-SPRC-SRCE-CD cursor; /* Position cursor*/


   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/
  converseLib.clearScreen();
   /* Clear screen before display*/
  EP0GW00.XXX-MSG-LOC-ID = "15200"; /* Message location*/
  converseLib.validationFailed(392); /* Requested list(s) displayed*/

  exit stack; /* Exit to display map*/


end // end EP0G-15200

// Process delete request
Function EP0G-15300()
   /* ------------------------------------------------------------*/
   /* Perform delete request*/
   /* ------------------------------------------------------------*/
  EP0GW00.EP0GW-WINDX = 1;

  while (EP0GW00.EP0GW-WINDX <= EP0GW00.XXX-INX-LMT-NBR)

    if (EP0GM001.XXX-LN-SEL-IND[EP0GW-WINDX] == "D")
      EP0GW00.EP0GW-ENTRY-FOUND-FL = "Y";
      set VSPRCD01 empty;
      VSPRCD01.PK-DCMS-SPRC-CD = EP0GM001.PK-DCMS-SPRC-CD[EP0GW-WINDX];
      VSPRCD01.PK-DCMS-SPRCSUB-CD = EP0GM001.PK-DCMS-SPRCSUB-CD[EP0GW-WINDX];

      EP0GS-VSPRCD01-DEL(); /* delete row*/
    end

    EP0GW00.EP0GW-WINDX = EP0GW00.EP0GW-WINDX + 1; /* incr line indx*/
  end


   /* ------------------------------------------------------------*/
   /* If no errors found, apply changes to ts page work area*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum == 0) /* no errors found*/
    if (EP0GW00.EP0GW-ENTRY-FOUND-FL == "Y")
      EP0GW00.EP0GW-WINDX = 1;

      while (EP0GW00.EP0GW-WINDX <= EP0GW00.XXX-INX-LMT-NBR)

        if (EP0GM001.XXX-LN-SEL-IND[EP0GW-WINDX] == "D")
          EP0GM001.XXX-LN-SEL-IND[EP0GW-WINDX] = " ";
          EP0GM001.PK-SPCL-PROC-VAR1[EP0GW-WINDX] = " ";
          EP0GM001.PK-DCMS-SPRC-CD[EP0GW-WINDX] = " ";
          EP0GM001.PK-DCMS-SPRCSUB-CD[EP0GW-WINDX] = " ";
          EP0GM001.PK-DCMS-SINST-TXT[EP0GW-WINDX] = " ";
        end

        EP0GW00.EP0GW-WINDX = EP0GW00.EP0GW-WINDX + 1; /* incr line indx*/
      end
    end
  end


end // end EP0G-15300

// Process db changes
Function EP0G-15400()
   /* -------------------------------------------------------------*/
   /* If any line field changed, perform change or add request*/
   /* -------------------------------------------------------------*/
  EP0GW00.EP0GW-WINDX = 1; /* Line index*/

  while (EP0GW00.EP0GW-WINDX <= EP0GW00.XXX-INX-LMT-NBR)

    if (EP0GM001.PK-SPCL-PROC-VAR1[EP0GW-WINDX] != 
    EP0GW01.PK-SPCL-PROC-VAR1[EP0GW-WINDX]
     || EP0GM001.PK-DCMS-SPRC-CD[EP0GW-WINDX] != 
    EP0GW01.PK-DCMS-SPRC-CD[EP0GW-WINDX]
     || EP0GM001.PK-DCMS-SINST-TXT[EP0GW-WINDX] != 
    EP0GW01.PK-DCMS-SINST-TXT[EP0GW-WINDX]) /* data changed*/

      EP0GW00.EP0GW-ENTRY-FOUND-FL = "Y";


      if (EP0GW01.PK-SPCL-PROC-VAR1[EP0GW-WINDX] == " "
       && EP0GW01.PK-DCMS-SPRC-CD[EP0GW-WINDX] == " "
       && EP0GW01.PK-DCMS-SINST-TXT[EP0GW-WINDX] == " ") /* this is an add*/

        EP0G-15410(); /* Add to vsprcd01*/
      else
        EP0G-15420(); /* Update vsprcd01*/
      end
    end

    EP0GW00.EP0GW-WINDX = EP0GW00.EP0GW-WINDX + 1; /* incr line indx*/
  end


end // end EP0G-15400

// Add row to Vsprcd01
Function EP0G-15410()
   /* -------------------------------------------------------------*/
   /* Add a row to Vsprcd01*/
   /* -------------------------------------------------------------*/

  EP0GW00.PK-DCMS-SPRCSUB-CD = 0;

  EP0G-15411(); /* find highest sub nbr for dcms-cd*/

  EP0GW00.PK-DCMS-SPRCSUB-CD = EP0GW00.PK-DCMS-SPRCSUB-CD + 1;
  EP0GM001.PK-DCMS-SPRCSUB-CD[EP0GW-WINDX] = EP0GW00.PK-DCMS-SPRCSUB-CD;

  set VSPRCD01 empty;
  VSPRCD01.PK-DCMS-SPRC-CD = EP0GM001.PK-DCMS-SPRC-CD[EP0GW-WINDX];
  VSPRCD01.PK-DCMS-SPRCSUB-CD = EP0GM001.PK-DCMS-SPRCSUB-CD[EP0GW-WINDX];
  VSPRCD01.PK-GSPRC-SRCE-CD = "STEP";
  VSPRCD01.PK-SPCL-PROC-VAR1 = EP0GM001.PK-SPCL-PROC-VAR1[EP0GW-WINDX];
  VSPRCD01.PK-DCMS-SINST-TXT = EP0GM001.PK-DCMS-SINST-TXT[EP0GW-WINDX];
  VSPRCD01.ZZZSDT = XX0XW01.XX0XWDAT;
  VSPRCD01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VSPRCD01.ZZZCHGTM = XX0XW01.XX0XWTIM;

  EP0GS-VSPRCD01-ADD(); /* Add to vsprcd01*/


end // end EP0G-15410

// Get highest DCMS sub#
Function EP0G-15411()
   /* ------------------------------------------------------------*/
   /* Select and open the cursor looking for current DCMS code*/
   /* ------------------------------------------------------------*/
  set VSPRCD01 empty; /* Clear row storage area*/
  VSPRCD01.PK-GSPRC-SRCE-CD = "STEP";

  EP0GW02.EP0GW-IO-TASK = "S2";

  EP0GS-VSPRCD01-OPN(); /* Select set and open cursor*/

  EP0GW00.EP0GW-SRCE-EOF-FL = "N"; /* End of cursor flag*/
  EP0GW02.EP0GW-IO-TASK = "N2";

  EP0GS-VSPRCD01-FTC(); /* Fetch first row in cursor*/

   /* ------------------------------------------------------------*/
   /* Look for highest sub for current DCMS code.*/
   /* ------------------------------------------------------------*/
  while (EP0GW00.EP0GW-SRCE-EOF-FL == "N" /* Until end of cursor*/
   && VSPRCD01.PK-DCMS-SPRC-CD <=      
  EP0GM001.PK-DCMS-SPRC-CD[EP0GW-WINDX])

    if (VSPRCD01.PK-DCMS-SPRC-CD == 
    EP0GM001.PK-DCMS-SPRC-CD[EP0GW-WINDX]
     && VSPRCD01.PK-SPCL-PROC-VAR1 == 
    EP0GM001.PK-SPCL-PROC-VAR1[EP0GW-WINDX])
      if (VSPRCD01.PK-DCMS-SPRCSUB-CD > EP0GW00.PK-DCMS-SPRCSUB-CD)
        EP0GW00.PK-DCMS-SPRCSUB-CD = VSPRCD01.PK-DCMS-SPRCSUB-CD;
      end
    end

    EP0GS-VSPRCD01-FTC(); /* Fetch next row in cursor*/
  end


   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/
  EP0GW02.EP0GW-IO-TASK = "C2";

  EP0GS-VSPRCD01-CLS(); /* Close selected set cursor*/


end // end EP0G-15411

// Update row on Vsprcd01
Function EP0G-15420()
   /* -------------------------------------------------------------*/
   /* Update row on Vsprcd01*/
   /* -------------------------------------------------------------*/

  set VSPRCD01 empty; /* Clear row storage area*/
  VSPRCD01.PK-DCMS-SPRC-CD = EP0GM001.PK-DCMS-SPRC-CD[EP0GW-WINDX];
  VSPRCD01.PK-DCMS-SPRCSUB-CD = EP0GM001.PK-DCMS-SPRCSUB-CD[EP0GW-WINDX];

  EP0GS-VSPRCD01-SEL(); /* Select set and open cursor*/

  if (SQLCA.VAGen_SQLCODE == 0) /* record found*/
    VSPRCD01.PK-DCMS-SPRC-CD = EP0GM001.PK-DCMS-SPRC-CD[EP0GW-WINDX];
    VSPRCD01.PK-DCMS-SPRCSUB-CD = EP0GM001.PK-DCMS-SPRCSUB-CD[EP0GW-WINDX];
    VSPRCD01.PK-SPCL-PROC-VAR1 = EP0GM001.PK-SPCL-PROC-VAR1[EP0GW-WINDX];
    VSPRCD01.PK-DCMS-SINST-TXT = EP0GM001.PK-DCMS-SINST-TXT[EP0GW-WINDX];
    VSPRCD01.ZZZCHGDT = XX0XW01.XX0XWDAT;
    VSPRCD01.ZZZCHGTM = XX0XW01.XX0XWTIM;

    EP0GS-VSPRCD01-UPT(); /* Update vsprcd01*/

    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
      EP0GW00.XXX-MSG-LOC-ID = "15420"; /* Message location*/
      converseLib.validationFailed(32); /* record has been changed*/
      set EP0GM001.PK-DCMS-SPRC-CD[EP0GW-WINDX] cursor, bold;
    end
  else
    converseLib.validationFailed(33); /* record not found (deleted?)*/
    EP0GW00.XXX-MSG-LOC-ID = "15420"; /* Message location*/
    set EP0GM001.PK-DCMS-SPRC-CD[EP0GW-WINDX] cursor, bold;
  end


end // end EP0G-15420

Function EP0G-15500()
   /* ------------------------------------------------------------*/
   /* Save any field that was changed in the map display storage.*/
   /* ------------------------------------------------------------*/
  if (EP0GM001.XXX-LN-SEL-IND[EP0GW-WINDX] != 
  EP0GW01.XXX-LN-SEL-IND[EP0GW-WINDX])
    EP0GW01.XXX-LN-SEL-IND[EP0GW-WINDX] = EP0GM001.XXX-LN-SEL-IND[EP0GW-WINDX];
    EP0GW00.XXX-PAGE-UPD-FL = "Y"; /* Page update flag*/
  end


  if (EP0GM001.PK-SPCL-PROC-VAR1[EP0GW-WINDX] != 
  EP0GW01.PK-SPCL-PROC-VAR1[EP0GW-WINDX])
    EP0GW01.PK-SPCL-PROC-VAR1[EP0GW-WINDX] = EP0GM001.PK-SPCL-PROC-VAR1[EP0GW-WINDX];
    EP0GW00.XXX-PAGE-UPD-FL = "Y"; /* Page update flag*/
  end


  if (EP0GM001.PK-DCMS-SPRC-CD[EP0GW-WINDX] != 
  EP0GW01.PK-DCMS-SPRC-CD[EP0GW-WINDX])
    EP0GW01.PK-DCMS-SPRC-CD[EP0GW-WINDX] = EP0GM001.PK-DCMS-SPRC-CD[EP0GW-WINDX];
    EP0GW00.XXX-PAGE-UPD-FL = "Y"; /* Page update flag*/
  end


  if (EP0GM001.PK-DCMS-SPRCSUB-CD[EP0GW-WINDX] != 
  EP0GW01.PK-DCMS-SPRCSUB-CD[EP0GW-WINDX])
    EP0GW01.PK-DCMS-SPRCSUB-CD[EP0GW-WINDX] = EP0GM001.PK-DCMS-SPRCSUB-CD[EP0GW-WINDX];
    EP0GW00.XXX-PAGE-UPD-FL = "Y"; /* Page update flag*/
  end


  if (EP0GM001.PK-DCMS-SINST-TXT[EP0GW-WINDX] != 
  EP0GW01.PK-DCMS-SINST-TXT[EP0GW-WINDX])
    EP0GW01.PK-DCMS-SINST-TXT[EP0GW-WINDX] = EP0GM001.PK-DCMS-SINST-TXT[EP0GW-WINDX];
    EP0GW00.XXX-PAGE-UPD-FL = "Y"; /* Page update flag*/
  end


end // end EP0G-15500

// Exit to another application
Function EP0GS-EXIT()
   /* ------------------------------------------------------------*/
   /* Set the application to be invoked for PF1 or PF4.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf1) /* PF1 was pressed*/
    COMMAREA.CATOAP = "GD01"; /* Goal Documentation*/
  end

  if (converseVar.eventKey is pf4) /* PF4 was pressed*/
    COMMAREA.CATOAP = "MN0M"; /* Master Menu*/
  end


   /* ------------------------------------------------------------*/
   /* Save the system work record in the COMMAREA user area.*/
   /* ------------------------------------------------------------*/
  if (COMMAREA.CATOSYS == COMMAREA.CACURSYS) /* Same system*/

    /* MOVE EPWREC.EPWUSERA TO COMMAREA.CAUSERA;/* Save work record*/
    COMMAREA.CAUSERA = EPWREC.EPW-GROUP; /* multgpc changed*/
  else
    COMMAREA.CAUSERA = " "; /* Clear user area*/
  end


   /* ------------------------------------------------------------*/
   /* Transfer control to the specified application.*/
   /* ------------------------------------------------------------*/
  XSEXIT(); /* Exit to another application*/

  EP0GW00.XXX-MSG-LOC-ID = "XSEXIT"; /* Message location*/


   /* ------------------------------------------------------------*/
   /* Reestablish the COMMAREA application and item fields.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CAEZSG3 = "0"; /* Force zero third character*/
  COMMAREA.CACURRAP = COMMAREA.CAEZSAP; /* Current application*/

  if (converseVar.eventKey is pfkey) /* PF key was pressed*/
    COMMAREA.CATOAP = " "; /* Clear TO application*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = " "; /* Clear map name from item*/
    end
  end


end // end EP0GS-EXIT

// Add page to temporary storage
Function EP0GS-TA0050-A()
   /* ------------------------------------------------------------*/
   /* Add the next page to the temporary storage queue.*/
   /* ------------------------------------------------------------*/
  EP0GW01.XXX-TEMP-STG-LNTH = EP0GW00.XXX-TEMP-STG-LNTH;
                                   /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (EP0GW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Add page*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, initialize the storage area and*/
   /* indicators to be used and return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set EP0GW01 empty; /* M001 display storage*/
    EP0GW00.XXX-HI-PAGE-NBR = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Clear last page number*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/

  EP0GW00.XXX-MSG-LOC-ID = "TA0050A"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(109); /* Unexpected ts error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = EP0GW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0GS-TA0050-A

// Purge any temporary storage
Function EP0GS-TA0050-P()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  set EP0GW01 empty; /* M001 display storage*/

  EP0GW00.XXX-PAGE-UPD-FL = "N"; /* Page update flag*/
  TA5REC.TA5TSQIX = 0; /* Displayed page number*/
  EP0GW00.XXX-HI-PAGE-NBR = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (EP0GW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Purge storage*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/
  EP0GW00.XXX-MSG-LOC-ID = "TA0050P"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(109); /* Unexpected ts error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = EP0GW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0GS-TA0050-P

// Read temporary storage page
Function EP0GS-TA0050-R()
   /* ------------------------------------------------------------*/
   /* Read the next page from the temporary storage queue.*/
   /* ------------------------------------------------------------*/
  EP0GW01.XXX-TEMP-STG-LNTH = EP0GW00.XXX-TEMP-STG-LNTH;
                                   /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = EP0GW00.XXX-CURR-PAGE-NBR; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (EP0GW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Read page*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/
  EP0GW00.XXX-MSG-LOC-ID = "TA0050R"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(109); /* Unexpected ts error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = EP0GW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "READ TEMPORARY STORAGE PAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0GS-TA0050-R

// Update temporary storage page
Function EP0GS-TA0050-U()
   /* ------------------------------------------------------------*/
   /* Update the page in the temporary storage queue.*/
   /* ------------------------------------------------------------*/
  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (EP0GW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update page*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/
  EP0GW00.XXX-MSG-LOC-ID = "TA0050U"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(109); /* Unexpected ts error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = EP0GW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "UPDATE TEMPORARY STORAGE PAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0GS-TA0050-U

// add row to vsprcd01
Function EP0GS-VSPRCD01-ADD()
   /* ------------------------------------------------------------*/
   /* Delete the requested  row from the table.*/
   /* ------------------------------------------------------------*/
  EP0GW02.EP0GW-IO-TASK = "A ";

  try
    call "VSPRCD01" (EP0GW02, SQLCA, VSPRCD01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/


   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* normal return code*/

    return; /* Return to previous process*/
  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  EP0GW00.XXX-MSG-LOC-ID = "VSPRCD01AD"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EP0GW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "ADD ROW TO TABLE"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPRCD01"; /* Table view name*/
  EP0GW00.PK-DCMS-SPRC-CD = VSPRCD01.PK-DCMS-SPRC-CD;
  EP0GW00.PK-DCMS-SPRCSUB-CD = VSPRCD01.PK-DCMS-SPRCSUB-CD;
  TA1REC.TA1TBLKE = EP0GW00.EP0GW-TBL-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0GS-VSPRCD01-ADD

// Close selected set cursor
Function EP0GS-VSPRCD01-CLS()
   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  try
    call "VSPRCD01" (EP0GW02, SQLCA, VSPRCD01) {isNoRefresh = yes, isExternal = yes};
  end /* Close cursor*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  EP0GW00.XXX-MSG-LOC-ID = "VSPRCD01CS"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(1); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EP0GW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPRCD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0GS-VSPRCD01-CLS

// Delete row from vsprcd01
Function EP0GS-VSPRCD01-DEL()
   /* ------------------------------------------------------------*/
   /* Delete the requested  row from the table.*/
   /* ------------------------------------------------------------*/
  EP0GW02.EP0GW-IO-TASK = "D ";

  try
    call "VSPRCD01" (EP0GW02, SQLCA, VSPRCD01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/


   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or already deleted*/

      return; /* Return to previous process*/
    end
  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  EP0GW00.XXX-MSG-LOC-ID = "VSPRCD01DL"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EP0GW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "DELETE ROW FROM TABLE"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPRCD01"; /* Table view name*/
  EP0GW00.PK-DCMS-SPRC-CD = VSPRCD01.PK-DCMS-SPRC-CD;
  EP0GW00.PK-DCMS-SPRCSUB-CD = VSPRCD01.PK-DCMS-SPRCSUB-CD;
  TA1REC.TA1TBLKE = EP0GW00.EP0GW-TBL-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0GS-VSPRCD01-DEL

// Fetch next row in cursor
Function EP0GS-VSPRCD01-FTC()
   /* ------------------------------------------------------------*/
   /* Fetch the next row that was selected from the table.*/
   /* ------------------------------------------------------------*/
  try
    call "VSPRCD01" (EP0GW02, SQLCA, VSPRCD01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch nxt*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
    /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      EP0GW00.EP0GW-SRCE-EOF-FL = "Y"; /* End of cursor*/

      return; /* Return to previous process*/
    end
  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  EP0GW00.XXX-MSG-LOC-ID = "VSPRCD01FT"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EP0GW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "FETCH NEXT ROW IN CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPRCD01"; /* Table view name*/
  EP0GW00.PK-DCMS-SPRC-CD = VSPRCD01.PK-DCMS-SPRC-CD;
  EP0GW00.PK-DCMS-SPRCSUB-CD = VSPRCD01.PK-DCMS-SPRCSUB-CD;
  TA1REC.TA1TBLKE = EP0GW00.EP0GW-TBL-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0GS-VSPRCD01-FTC

// Select set and open cursor
Function EP0GS-VSPRCD01-OPN()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  try
    call "VSPRCD01" (EP0GW02, SQLCA, VSPRCD01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/


   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/
  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  EP0GW00.XXX-MSG-LOC-ID = "VSPRCD01OP"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EP0GW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "SELECT SET AND OPEN CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPRCD01"; /* Table view name*/
  EP0GW00.PK-DCMS-SPRC-CD = VSPRCD01.PK-DCMS-SPRC-CD;
  EP0GW00.PK-DCMS-SPRCSUB-CD = VSPRCD01.PK-DCMS-SPRCSUB-CD;
  TA1REC.TA1TBLKE = EP0GW00.EP0GW-TBL-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0GS-VSPRCD01-OPN

// Select unique from Vsprcd01
Function EP0GS-VSPRCD01-SEL()
   /* ------------------------------------------------------------*/
   /* Select a requested row from the table.*/
   /* ------------------------------------------------------------*/
  EP0GW02.EP0GW-IO-TASK = "S ";

  try
    call "VSPRCD01" (EP0GW02, SQLCA, VSPRCD01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/


   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* if normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/
    end
  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  EP0GW00.XXX-MSG-LOC-ID = "VSPRCD01S "; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EP0GW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "SELECT A SPECIFIC ROW"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPRCD01"; /* Table view name*/
  EP0GW00.PK-DCMS-SPRC-CD = VSPRCD01.PK-DCMS-SPRC-CD;
  EP0GW00.PK-DCMS-SPRCSUB-CD = VSPRCD01.PK-DCMS-SPRCSUB-CD;
  TA1REC.TA1TBLKE = EP0GW00.EP0GW-TBL-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0GS-VSPRCD01-SEL

// Update vsprcd01 row
Function EP0GS-VSPRCD01-UPT()
   /* ------------------------------------------------------------*/
   /* Delete the requested  row from the table.*/
   /* ------------------------------------------------------------*/
  EP0GW02.EP0GW-IO-TASK = "U ";

  try
    call "VSPRCD01" (EP0GW02, SQLCA, VSPRCD01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/


   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && (SQLCA.VAGen_SQLCODE == 0      /* normal return code*/
   || SQLCA.VAGen_SQLCODE == 100))   /* normal return code*/

    return; /* Return to previous process*/
  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  EP0GW00.XXX-MSG-LOC-ID = "VSPRCD01UP"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EP0GW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPRCD01"; /* Table view name*/
  EP0GW00.PK-DCMS-SPRC-CD = VSPRCD01.PK-DCMS-SPRC-CD;
  EP0GW00.PK-DCMS-SPRCSUB-CD = VSPRCD01.PK-DCMS-SPRCSUB-CD;
  TA1REC.TA1TBLKE = EP0GW00.EP0GW-TBL-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0GS-VSPRCD01-UPT

//*** RECORD=EP0GW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record EP0GW00 type basicRecord
  10 XXX-RQT-DATA-FL XXX-RQT-DATA-FL ; 
  10 XXX-MAP-FMAT-FL XXX-MAP-FMAT-FL ; 
  10 XXX-TEMP-STG-LNTH XXX-TEMP-STG-LNTH ; 
  10 XXX-INX-LMT-NBR XXX-INX-LMT-NBR ; 
  10 XXX-CURR-PAGE-NBR XXX-CURR-PAGE-NBR ; 
  10 XXX-HI-PAGE-NBR XXX-HI-PAGE-NBR ; 
  10 XXX-PAGE-UPD-FL XXX-PAGE-UPD-FL ; 
  10 XXX-MSG-NBR XXX-MSG-NBR ; 
  10 XXX-MSG-LOC-ID XXX-MSG-LOC-ID ; 
  10 XXXNBRCY XXXNBRCY ; 
  10 EP0GW-SPRC-SRCE-CD EP0GW-SPRC-SRCE-CD ; 
  10 EP0GW-DCMS-SPRC-CD EP0GW-DCMS-SPRC-CD ; 
  10 EP0GW-WINDX EP0GW-WINDX ; 
  10 EP0GW-SRCE-EOF-FL EP0GW-SRCE-EOF-FL ; 
  10 EP0GW-ENTRY-FOUND-FL EP0GW-ENTRY-FOUND-FL ; 
  10 EP0GW-TBL-KEY EP0GW-TBL-KEY ; 
    15 PK-DCMS-SPRC-CD PK-DCMS-SPRC-CD ; 
    15 PK-DCMS-SPRCSUB-CD PK-DCMS-SPRCSUB-CD ; 
end // end EP0GW00

//*** RECORD=EP0GW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record EP0GW01 type basicRecord
  5 XXX-TEMP-STG-LNTH XXX-TEMP-STG-LNTH ; 
  5 * char(705) ; 
    10 * char(47) [15] ; 
      15 XXX-LN-SEL-IND XXX-LN-SEL-IND ; 
      15 PK-SPCL-PROC-VAR1 PK-SPCL-PROC-VAR1 ; 
      15 PK-DCMS-SPRC-CD PK-DCMS-SPRC-CD ; 
      15 PK-DCMS-SPRCSUB-CD PK-DCMS-SPRCSUB-CD ; 
      15 PK-DCMS-SINST-TXT PK-DCMS-SINST-TXT ; 
end // end EP0GW01

//*** RECORD=EP0GW02 ****
// --------------------------------
// I/O Task working storage record.
// --------------------------------
// ***********************
Record EP0GW02 type basicRecord
  10 EP0GW-IO-TASK EP0GW-IO-TASK ; 
end // end EP0GW02

// Requested DCMS code
DataItem EP0GW-DCMS-SPRC-CD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Entry found flag
DataItem EP0GW-ENTRY-FOUND-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// IO task code
DataItem EP0GW-IO-TASK char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Requested source code
DataItem EP0GW-SPRC-SRCE-CD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of file flag
DataItem EP0GW-SRCE-EOF-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table key
DataItem EP0GW-TBL-KEY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem EP0GW-WINDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

