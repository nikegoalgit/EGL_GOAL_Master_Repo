package ep0e;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import ep.common.*;
import ku.common.*;
import pk.common.*;
import pw.common.*;
import ta.common.*;
import tf.common.*;
import vv.common.*;
//*** PROGRAM=EP0E ****
// Special processing codes are used to convey VAS (value
// added service) instructions to DCMS. The codes, or
// instructions, are grouped by "source". Each "source"
// represents a logical grouping of the instructions. For
// example, hanging, label attachement and label stock are
// each a unique source.
// 
// This screen, EP0E, is used to modify VAS level codes. It
// represents the level of VAS difficulty in that, in turn,
// determines who or where the work will be done within the
// warehouse. The assignment can be done by any combination of
// company and silhoutte code.
// 
// Because many companies and/or silhouttes codes can be
// assigned the same level, the new sub code field must be
// used to make the dcms code unique. The sub code field can
// be any value, as long as the combination of level code/sub
// code is unique. Since a code is always cahr 2, I recommend
// selecting all values for that level in descending order,
// reading the first value and adding 1 to the sub code.
// 
// The generic codes are not used with these assignments. Note
// that there is no goal code for this type of assignment.
// 
// In EP0E you can:
//     1. delete a record
//     2. add a record
//     3. modify a dcms instruction or a dcms code
//     4. select special processing codes for a specific source
//     5. page forward/back
// 
// EP0E is a pagable screen. When first conversed, it looks to
// see if a specific record has been passed. If not, all
// values will be displayed.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE    USERID  DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      06/09/98  OVAZQU  New application.
//          03/22/99  OVAZQU  Allow 'V00I' & 'V00C' as cust#
// multgpc  08/03/99  OENFIE  modify map to make the column
//                            heading literal for 'silh code'
//                            be a variable field.  Also added
//                            a variable field on the main
//                            heading to identify whether apprl
//                            or equipment.
//                            Also, modified logic to now
//                            Check the sel-num passed from
//                            EP0A before moving either 'LEVL'
//                            or 'LVEQ' to the PK-GSPRC-SRCE-CD
//                            OF VSPRCD01.
//                            changed EP0ES-EXIT also for the
//                            moving of the Commarea field.
// TT-#3678 01/25/00  LPATTN  Added code to validate new
//                            special processing codes for the
//                            Product Category code 'SP','EW',
//                            'FT','JH'.
// GOLFCR1 01/30/2000 SRAMA1  Added code to accept VCRS in the
//                            Company field for Golf Cresting.
// TT#6347 06/20/2000 LPATTN  Included V00F as Company name.
// TT10583 03/26/2001 snara2  Included V0LF as Company name.
// TT12248 06/25/2001 SVENKA  Included VINS AND VHNG as       
//                                company name.
// K-63577  07/03/2003 sgopal  added new OFL/VOFL codes
//                                                  changes to
//  11100, 14620
// K-94927  08/30/2004 rathal  added new Company name VEBX
//             for handling code 'EBX' and changed 11100,
//  14620, added 11200
// 
// C# 30827216-0911
//                09/12/2012   BDUTTA    Added code to accept
//  V0SM
// *********************
Program EP0E type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "EP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  EP0EW00 EP0EW00; // record
  EP0EW01 EP0EW01; // record
  EP0EW03 EP0EW03; // record
  EPWREC EPWREC; // record
  KUCREC KUCREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  TFWREC TFWREC; // record
  VSPRCD01 VSPRCD01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XSUTBL {deleteAfterUse = yes}; // table
  use XPCTBL; // table
  use EP0EM.EP0EM001,  // forms
      EP0EM.XX0XM001
   {
    helpKey = pf13,
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPEP-00000: XPEP-00000();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    set EP0EM001 initial; /* M001 input/output*/
    set EP0EW00 empty; /* Working storage*/
    set EP0EW01 empty; /* M001 display storage*/
    set EP0EW03 empty; /* Working user area*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set VSPRCD01 empty; /* Special Processing record layout*/
    set XX0XW01 empty; /* Date/time subroutine parameters*/
    set XX0XW02 empty; /* Pop-up screen parameters*/

    EP0EW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/
    EP0EW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
    EP0EW00.XXX-TEMP-STG-LNTH = 889; /* Temporary storage length*/
    EP0EW00.XXX-INX-LMT-NBR = 15; /* Number of lines on a page*/

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto EP0E-00000; /* Converse the main process*/

    EP0E-00000: EP0E-00000();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto EP0E-00000; /* Converse the main process*/

  end // end main
end // end EP0E

// Determine which map to display
Function EP0E-00000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) display the map.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* Get date & time*/

  EP0E-10000(); /* Display map 1*/

  exit stack; /* Exit to display map*/

end // end EP0E-00000

// Main process to display a map
Function EP0E-10000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  EP0E-11000(); /* Obtain the data to display*/

  EP0E-12000(); /* Format and display the map*/

  EP0E-13000(); /* Check attention identifier*/

  EP0E-14000(); /* Verify the entered data*/

  EP0E-15000(); /* Process valid input request*/

end // end EP0E-10000

// Obtain the data to display
Function EP0E-11000()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  if (EP0EW00.XXX-RQT-DATA-FL != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/
  if (EP0EW00.XXX-MSG-NBR == 0) /* No message to display*/
    EP0EW00.XXX-CURR-PAGE-NBR = 1; /* Page number to display*/
  end

   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/
  EP0ES-TA0050-P(); /* Purge any temporary storage*/

  EP0EW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/
  set VSPRCD01 empty; /* Clear row storage area*/

   /* ------------------------------------------------*/
   /* MULTGPC;   if select option is 5 from the EP0A*/
   /* menu screen, then move 'LEVL' else move 'LVEQ'*/
   /* ------------------------------------------------*/

  if (EPWREC.EPW-FROM-MAP-SEL-NUM == 5) /* Apparel*/
    VSPRCD01.PK-GSPRC-SRCE-CD = "LEVL";
  else /* Equipment*/
    VSPRCD01.PK-GSPRC-SRCE-CD = "LVEQ";
  end

  EP0EW03.EP0EW-IO-TASK = "S1";

  EP0ES-VSPRCD01-OPN(); /* Select set and open cursor*/

  EP0EW00.EP0EW-SRCE-EOF-FL = "N"; /* End of cursor flag*/
  EP0EW00.XXXNBRCY = 0; /* record counter*/
  EP0EW03.EP0EW-IO-TASK = "N1";

  EP0ES-VSPRCD01-FTC(); /* Fetch first row in cursor*/

   /* ------------------------------------------------------------*/
   /* Format the data into pages & fetch next until end of cursor.*/
   /* ------------------------------------------------------------*/
  EP0EW00.EP0EW-WINDX = 1; /* Display line index*/

  while (EP0EW00.EP0EW-SRCE-EOF-FL == "N") /* Until end of cursor*/

    EP0EW00.PK-SPCL-PROC-VAR1 = VSPRCD01.PK-SPCL-PROC-VAR1;
    EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] = EP0EW00.PK-SPCL-PROC-VAR1-3-10;

    /* ----------------------------------------------*/
    /* MULTGPC: if select option is 5 from the EP0A*/
    /* main menu, then move var2 to w/s field for XSU*/
    /* else move var2 to w/s field for XPC*/
    /* ----------------------------------------------*/

    if (EPWREC.EPW-FROM-MAP-SEL-NUM == 5) /* Apparel*/
      EP0EW01.XSUCD[EP0EW-WINDX] = VSPRCD01.PK-SPCL-PROC-VAR2;
    else
      EP0EW01.XPCCD[EP0EW-WINDX] = VSPRCD01.PK-SPCL-PROC-VAR2;
    end

    EP0EW01.PK-DCMS-SPRC-CD[EP0EW-WINDX] = VSPRCD01.PK-DCMS-SPRC-CD;
    EP0EW01.PK-DCMS-SPRCSUB-CD[EP0EW-WINDX] = VSPRCD01.PK-DCMS-SPRCSUB-CD;
    EP0EW01.PK-DCMS-SINST-TXT[EP0EW-WINDX] = VSPRCD01.PK-DCMS-SINST-TXT;

    EP0E-11100(); /* get company name*/

    EP0EW00.EP0EW-WINDX = EP0EW00.EP0EW-WINDX + 1; /* incr line indx*/
    EP0EW00.XXXNBRCY = EP0EW00.XXXNBRCY + 1; /* incr record counter*/

    /* ------------------------------------------------------------*/
    /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/
    if (EP0EW00.EP0EW-WINDX > EP0EW00.XXX-INX-LMT-NBR) /* Page is full*/
      EP0ES-TA0050-A(); /* Add page to temporary storage*/
      EP0EW00.EP0EW-WINDX = 1; /* Display line index*/
    end

    EP0ES-VSPRCD01-FTC(); /* Fetch next row in cursor*/
  end

   /* ------------------------------------------------------------*/
   /* Add any partially formatted or empty last page to the queue.*/
   /* (need to have empty lines for add's).*/
   /* ------------------------------------------------------------*/
  EP0ES-TA0050-A(); /* Add page to temporary storage*/

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/
  EP0EW03.EP0EW-IO-TASK = "C1";

  EP0ES-VSPRCD01-CLS(); /* Close selected set cursor*/

   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/
  if (EP0EW00.XXXNBRCY == 0) /* no data found*/
    EP0EW00.XXX-MSG-LOC-ID = "10000"; /* Message location*/
    converseLib.validationFailed(12); /* No data was found to display*/
    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/
  EP0EW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/

end // end EP0E-11000

// Get company name
Function EP0E-11100()
   /* ------------------------------------------------------------*/
   /* Get company name*/
   /* ------------------------------------------------------------*/

  if (EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "V00I"
   || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == " V00I"
   || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "  V00I"
   || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "   V00I"
   || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "    V00I")
    EP0EW01.CU-CO-SHORT-NM[EP0EW-WINDX] = "INPCK UNIT";
  else
    if (EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "V00C"
     || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == " V00C"
     || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "  V00C"
     || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "   V00C"
     || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "    V00C")
      EP0EW01.CU-CO-SHORT-NM[EP0EW-WINDX] = "CSELT UNIT";
      /* TT#3678 STARTS*/
    else
      if (EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "VNPB"
       || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == " VNPB"
       || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "  VNPB"
       || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "   VNPB"
       || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "    VNPB")
        EP0EW01.CU-CO-SHORT-NM[EP0EW-WINDX] = "DEFLATE W/O PKG";
      else
        if (EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "VPNB"
         || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == " VPNB"
         || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "  VPNB"
         || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "   VPNB"
         || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "    VPNB")
          EP0EW01.CU-CO-SHORT-NM[EP0EW-WINDX] = "DEFLATE W PKG";
        else
          if (EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "VNIB"
           || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == " VNIB"
           || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "  VNIB"
           || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "   VNIB"
           || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "    VNIB")
            EP0EW01.CU-CO-SHORT-NM[EP0EW-WINDX] = "INFL W/O PKG";
          else
            if (EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "VPIB"
             || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == " VPIB"
             || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "  VPIB"
             || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "   VPIB"
             || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "    VPIB")
              EP0EW01.CU-CO-SHORT-NM[EP0EW-WINDX] = "INFL W PKG";
            else
              /* TT#3678 ENDS*/
              /* GOLFCR1 STARTS*/
              if (EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "VCRS"
               || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == " VCRS"
               || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "  VCRS"
               || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "   VCRS"
               || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "    VCRS")
                EP0EW01.CU-CO-SHORT-NM[EP0EW-WINDX] = "GOLF CREST";
                /* GOLFCR1 ENDS*/
                /* TT#6347 changes starts*/
              else
                if (EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "V00F"
                 || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == " V00F"
                 || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "  V00F"
                 || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "   V00F"
                 || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "    V00F")
                  EP0EW01.CU-CO-SHORT-NM[EP0EW-WINDX] = "FOOT WEAR ";
                  /* TT#6347 changes ends*/
                  /* snara2 begins*/
                else
                  if (EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "V0LF"
                   || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == " V0LF"
                   || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "  V0LF"
                   || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "   V0LF"
                   || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "    V0LF")
                    EP0EW01.CU-CO-SHORT-NM[EP0EW-WINDX] = "GOLF GREEN";
                    /* snara2 ends*/
                    /* TT#12248 changes begin*/
                  else
                    if (EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "VINS"
                     || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == " VINS"
                     || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "  VINS"
                     || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "   VINS"
                     || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "    VINS")
                      EP0EW01.CU-CO-SHORT-NM[EP0EW-WINDX] = "INSRT FORM";
                    else
                      if (EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "VHNG"
                       || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == " VHNG"
                       || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "  VHNG"
                       || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "   VHNG"
                       || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "    VHNG")
                        EP0EW01.CU-CO-SHORT-NM[EP0EW-WINDX] = "HNG/INPACK";
                        /* TT#12248 changes end*/
                      else
                        if (EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "V0FL"
                         || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == " V0FL"
                         || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "  V0FL"
                         || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "   V0FL"
                         || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "    V0FL")
                          EP0EW01.CU-CO-SHORT-NM[EP0EW-WINDX] = "BAT REPLACE";
                        else
                          if (EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "VEBX"
                           || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == " VEBX"
                           || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "  VEBX"
                           || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "   VEBX"
                           || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "    VEBX")
                            EP0EW01.CU-CO-SHORT-NM[EP0EW-WINDX] = "EMPTY BOX";
                          else
                            if (EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "VPRN"
                             || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == " VPRN"
                             || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "  VPRN"
                             || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "   VPRN"
                             || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "    VPRN")
                              EP0EW01.CU-CO-SHORT-NM[EP0EW-WINDX] = "INPCK UNITS";
                            else
                              if (EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "VRRP"
                             || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == " VRRP"
                             || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "  VRRP"
                             || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "   VRRP"
                             || EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == "    VRRP")
                              EP0EW01.CU-CO-SHORT-NM[EP0EW-WINDX] = "REMOVE VAS";
                              else  
                                EP0E-11200(); /* Get company from table*/
                            end
                          end
                        /* TT#3678 STARTS*/
                        end
                      end
                    end
                  end
                end
              end
            /* TT#3678 ENDS*/
            /* GOLFCR1 STARTS*/
            end
          /* GOLFCR1 ENDS*/
          /* TT#6347 changes starts*/
          end
        /* TT#6347 changes ends*/
        end
      /* TT#12248 changes begin*/
      end
    end
  end
   /* TT#12248 changes end*/

end // end EP0E-11100
end

Function EP0E-11200()
  EP0EW01.CU-CO-SHORT-NM[EP0EW-WINDX] = " ";

  EP0EW00.EP0EW-KUCCOID = EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX];
  if (EP0EW00.EP0EW-KUCCOID-X1 <= " ")
    EP0EW00.EP0EW-KUCCOID-X1 = "0";
  end
  if (EP0EW00.EP0EW-KUCCOID-X2 <= " ")
    EP0EW00.EP0EW-KUCCOID-X2 = "0";
  end
  if (EP0EW00.EP0EW-KUCCOID-X3 <= " ")
    EP0EW00.EP0EW-KUCCOID-X3 = "0";
  end
  if (EP0EW00.EP0EW-KUCCOID-X4 <= " ")
    EP0EW00.EP0EW-KUCCOID-X4 = "0";
  end
  if (EP0EW00.EP0EW-KUCCOID-X5 <= " ")
    EP0EW00.EP0EW-KUCCOID-X5 = "0";
  end
  if (EP0EW00.EP0EW-KUCCOID-X6 <= " ")
    EP0EW00.EP0EW-KUCCOID-X6 = "0";
  end
  if (EP0EW00.EP0EW-KUCCOID-X7 <= " ")
    EP0EW00.EP0EW-KUCCOID-X7 = "0";
  end
  if (EP0EW00.EP0EW-KUCCOID-X8 <= " ")
    EP0EW00.EP0EW-KUCCOID-X8 = "0";
  end

  set KUCREC empty;
  if (EP0EW00.EP0EW-KUCCOID is numeric)
    EP0EW00.EP0EW-KUCCOID-NUM = EP0EW00.EP0EW-KUCCOID;
    KUCREC.KUCCOID = EP0EW00.EP0EW-KUCCOID-NUM;

    EP0ES-VCMPNY01-SEL(); /* get customer row*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Found*/
      if (KUCREC.CU-CO-SHORT-NM > " ")
        EP0EW01.CU-CO-SHORT-NM[EP0EW-WINDX] = KUCREC.CU-CO-SHORT-NM;
      else
        EP0EW01.CU-CO-SHORT-NM[EP0EW-WINDX] = "UNKNOWN";
      end
    else
      EPWREC.XXXERRID = "11200";
                                   /* Message location*/
      converseLib.validationFailed(11); /* Invalid data*/
      set EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] cursor, bold;
    end
  else
    EPWREC.XXXERRID = "11200";
                                   /* Message location*/
    converseLib.validationFailed(11); /* Invalid data*/
    set EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] cursor, bold;
  end
end // end EP0E-11200

// Format and converse the map
Function EP0E-12000()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    EP0EW00.XXX-MSG-NBR = converseVar.validationMsgNum; /* Message number*/
  end

   /* ------------------------------------------------------------*/
   /* If the map must be formatted, format the data in the map.*/
   /* ------------------------------------------------------------*/
  if (EP0EW00.XXX-MAP-FMAT-FL == "Y") /* Map must be formatted*/
    EP0E-12100(); /* Format the data in the map*/
  end

   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  EP0EM001.XXX-CURR-DT = VGVar.currentShortGregorianDate; /* Current date*/
  EP0EM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  EP0EM001.CAITEM = COMMAREA.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* Format the main heading & column headings*/
   /* ------------------------------------------------------------*/
  if (EPWREC.EPW-FROM-MAP-SEL-NUM == 5) /* Apparel*/
    EP0EM001.EP0EM-HEAD-VAR = "(APPAREL)";
    EP0EM001.EP0EM-COLM-HEAD-VAR1 = "SILH";
    EP0EM001.EP0EM-COLM-HEAD-VAR2 = "CODE;";
    EP0EM001.EP0EM-NOTE-VAR1 = "SILHOUETTE";
  else
    EP0EM001.EP0EM-HEAD-VAR = "(EQUIPMENT)";
    EP0EM001.EP0EM-COLM-HEAD-VAR1 = "PROD";
    EP0EM001.EP0EM-COLM-HEAD-VAR2 = "CAT; ";
    EP0EM001.EP0EM-NOTE-VAR1 = "PROD CAT  ";
  end

   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  if (EP0EW00.XXX-MSG-NBR != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ")   /* or message text*/

    if (EP0EW00.XXX-MSG-NBR != 0) /* Message to display*/
      if (EP0EW00.XXX-MSG-NBR == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(EP0EW00.XXX-MSG-NBR);
      end /* Message number*/
    else
      EP0EM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
    end

    EP0EM001.XXX-MSG-LOC-ID = EP0EW00.XXX-MSG-LOC-ID;
    set EP0EM001 alarm; /* Indicate sound alarm*/
  end

  converse EP0EM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  EP0EW00.XXX-MSG-LOC-ID = " "; /* Message location*/
  EP0EW00.XXX-MSG-NBR = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = EP0EM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = EP0EM001.CAITEM; /* Application data*/

   /* ------------------------------------------------------------*/
   /* Reset modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  EP0EW00.EP0EW-WINDX = 1; /* Initialize line index*/

  while (EP0EW00.EP0EW-WINDX <= EP0EW00.XXX-INX-LMT-NBR) /* until e-o-scrn*/

    if (EP0EM001.PK-DCMS-SPRC-CD[EP0EW-WINDX] > " "
     || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] > " ")
      set EP0EM001.XXX-LN-SEL-IND[EP0EW-WINDX] normal;
      set EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] normal;
      set EP0EM001.XSUCD[EP0EW-WINDX] normal;
      set EP0EM001.PK-DCMS-SPRC-CD[EP0EW-WINDX] normal;
      set EP0EM001.PK-DCMS-SINST-TXT[EP0EW-WINDX] normal;
    end

    EP0EW00.EP0EW-WINDX = EP0EW00.EP0EW-WINDX + 1;
  end

  set EP0EM001.CATOAP normal; /* TO application*/
  set EP0EM001.CAITEM normal; /* Application data*/

end // end EP0E-12000

// Format the data in the map
Function EP0E-12100()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  set EP0EM001 initial; /* M001 input/output area*/

  EP0EW00.XXX-MAP-FMAT-FL = "N"; /* Format the map flag*/

   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/
  if (EP0EW00.XXX-HI-PAGE-NBR > 0) /* Pages were formatted*/

    if (EP0EW00.XXX-CURR-PAGE-NBR != TA5REC.TA5TSQIX)
                                   /* Desired page not current*/
      /* ------------------------------------------------------------*/
      /* If the current page has been changed, update the page in*/
      /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/
      if (EP0EW00.XXX-PAGE-UPD-FL == "Y") /* Current page was changed*/

        EP0ES-TA0050-U(); /* Update temporary storage page*/
        EP0EW00.XXX-PAGE-UPD-FL = "N"; /* Page update flag*/
      end

      /* ------------------------------------------------------------*/
      /* If the desired page number is greater than the highest page*/
      /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/
      if (EP0EW00.XXX-CURR-PAGE-NBR > EP0EW00.XXX-HI-PAGE-NBR)
                                   /* Desired greater highest*/
        EP0EW00.XXX-CURR-PAGE-NBR = EP0EW00.XXX-HI-PAGE-NBR;
                                   /* Default to highest*/
      end

      EP0ES-TA0050-R(); /* Read temporary storage page*/
    end

    /* ------------------------------------------------------------*/
    /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/
    set EP0EM001.XXX-CURR-PAGE-DESC skip; /* "PAGE" literal*/
    EP0EM001.XXX-CURR-PAGE-NBR = EP0EW00.XXX-CURR-PAGE-NBR;
                                   /* Current page*/
    set EP0EM001.XXX-HI-PAGE-DESC skip; /* "OF" literal*/
    EP0EM001.XXX-HI-PAGE-NBR = EP0EW00.XXX-HI-PAGE-NBR;
                                   /* Highest page*/
  end

   /* ------------------------------------------------------------*/
   /* Format the map fields from the display storage area.*/
   /* ------------------------------------------------------------*/
  EP0EW00.EP0EW-WINDX = 1; /* Initialize line index*/

  while (EP0EW00.EP0EW-WINDX <= EP0EW00.XXX-INX-LMT-NBR) /* fill page*/

    if (EP0EW01.PK-DCMS-SPRC-CD[EP0EW-WINDX] > " ")
      if (EP0EW00.EP0EW-WINDX == 1) /* First select field*/
        set EP0EM001.XXX-LN-SEL-IND[EP0EW-WINDX] cursor, normal;
      else
        set EP0EM001.XXX-LN-SEL-IND[EP0EW-WINDX] normal;
      end
    end

    EP0EM001.XXX-LN-SEL-IND[EP0EW-WINDX] = EP0EW01.XXX-LN-SEL-IND[EP0EW-WINDX];
    EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] = EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX];
    EP0EM001.CU-CO-SHORT-NM[EP0EW-WINDX] = EP0EW01.CU-CO-SHORT-NM[EP0EW-WINDX];

    /* MULTGPC (BEGIN)*/
    if (EPWREC.EPW-FROM-MAP-SEL-NUM == 5) /* Apparel*/
      EP0EM001.XSUCD[EP0EW-WINDX] = EP0EW01.XSUCD[EP0EW-WINDX];
    else
      EP0EM001.XSUCD[EP0EW-WINDX] = EP0EW01.XPCCD[EP0EW-WINDX];
    end
    /* MULTGPC (END)*/

    EP0EM001.PK-DCMS-SPRC-CD[EP0EW-WINDX] = EP0EW01.PK-DCMS-SPRC-CD[EP0EW-WINDX];
    EP0EM001.PK-DCMS-SPRCSUB-CD[EP0EW-WINDX] = EP0EW01.PK-DCMS-SPRCSUB-CD[EP0EW-WINDX];
    EP0EM001.PK-DCMS-SINST-TXT[EP0EW-WINDX] = EP0EW01.PK-DCMS-SINST-TXT[EP0EW-WINDX];

    EP0EW00.EP0EW-WINDX = EP0EW00.EP0EW-WINDX + 1; /* incr line indx*/
  end

end // end EP0E-12100

// Check attention identifier
Function EP0E-13000()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    if (EP0EW00.XXX-RQT-DATA-FL == "Y") /* Request for data pending*/
      set EP0EW01 empty; /* M001 display storage*/
    end

    EP0EW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/
    EP0EW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  if (EP0EM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      EP0ES-TA0050-P(); /* Purge any temporary storage*/
      EP0ES-EXIT(); /* Exit to another application*/

      set EP0EM001.CATOAP cursor, bold; /* Highlight*/
    else
      EP0EW00.XXX-MSG-LOC-ID = "13000"; /* Message location*/
      converseLib.validationFailed(18); /* PA/PF key may not be used*/
    end

    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* If a PF key transfer requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf2 /* or PF2 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "EP0EM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf2) /* PF2 was pressed*/
      COMMAREA.CATOAP = "EP0C"; /* special processing code list*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "EP0A"; /* System Menu*/
    end

    EP0ES-TA0050-P(); /* Purge any temporary storage*/
    EP0ES-EXIT(); /* Exit to another application*/

    exit stack; /* Exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf9   /* and PF9 was not pressed*/
   && converseVar.eventKey not pf11  /* and PF11 was not pressed*/
   && converseVar.eventKey not pf12) /* and PF12 was not pressed*/

    EP0EW00.XXX-MSG-LOC-ID = "13000"; /* Message location*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/
  end

end // end EP0E-13000

// Verify data that was entered
Function EP0E-14000()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  if (EP0EM001.CAITEM > " ") /* Application data was entered*/
    EP0EW00.XXX-MSG-LOC-ID = "14000"; /* Message location*/
    converseLib.validationFailed(9); /* Enter only with FAST PATH*/
    set EP0EM001.CATOAP cursor, bold; /* Highlight*/
  end

   /* ------------------------------------------------------------*/
   /* If pf key requested, determine if any other field changed.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7 /* if scroll back request*/
   || converseVar.eventKey is pf8 /* or scroll forward request*/
   || converseVar.eventKey is pf12) /* or reset screen request*/

    EP0E-14100(); /* Highlight any changed fields*/
  end

    /* ------------------------------------------------------------*/
    /* Determine whether a valid request to scroll was entered.*/
    /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    EP0E-14200(); /* Verify scroll request*/
  end

    /* ------------------------------------------------------------*/
    /* if PF12 verify that data can be deleted*/
    /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf12) /* Delete request*/
    EP0E-14400(); /* Verify*/
  end

    /* ------------------------------------------------------------*/
    /* Validate <enter> key*/
    /* ------------------------------------------------------------*/
  if (converseVar.eventKey is enter) /* validate enter key*/
    EP0E-14600(); /* Verify new data on the lines*/
  end

   /* ------------------------------------------------------------*/
   /* If any error was found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end

end // end EP0E-14000

// Highlight any changed fields
Function EP0E-14100()
   /* ------------------------------------------------------------*/
   /* If a modifiable field was changed, indicate that field may*/
   /* not be changed when key is changed or a pf key is pressed.*/
   /* ------------------------------------------------------------*/
  EP0EW00.EP0EW-WINDX = EP0EW00.XXX-INX-LMT-NBR; /* Line index*/

  while (EP0EW00.EP0EW-WINDX > 0) /* Until end of lines*/

    if (EP0EM001.PK-DCMS-SINST-TXT[EP0EW-WINDX] != 
    EP0EW01.PK-DCMS-SINST-TXT[EP0EW-WINDX])
      EP0EW00.XXX-MSG-LOC-ID = "14100"; /* Message location*/
      converseLib.validationFailed(61); /* update valid only with <enter>*/
      set EP0EM001.PK-DCMS-SINST-TXT[EP0EW-WINDX] cursor, bold;
    end

    if (EP0EM001.PK-DCMS-SPRC-CD[EP0EW-WINDX] != 
    EP0EW01.PK-DCMS-SPRC-CD[EP0EW-WINDX])
      EP0EW00.XXX-MSG-LOC-ID = "14100"; /* Message location*/
      converseLib.validationFailed(61); /* update valid only with <enter>*/
      set EP0EM001.PK-DCMS-SPRC-CD[EP0EW-WINDX] cursor, bold;
    end

    if (EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] != 
    EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX])
      EP0EW00.XXX-MSG-LOC-ID = "14100"; /* Message location*/
      converseLib.validationFailed(61); /* update valid only with <enter>*/
      set EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] cursor, bold;
    end

    if (EPWREC.EPW-FROM-MAP-SEL-NUM == 5) /* Apparel*/
      if (EP0EM001.XSUCD[EP0EW-WINDX] != 
      EP0EW01.XSUCD[EP0EW-WINDX])
        EP0EW00.XXX-MSG-LOC-ID = "14100"; /* Message location*/
        converseLib.validationFailed(61); /* update valid only with <enter>*/
        set EP0EM001.XSUCD[EP0EW-WINDX] cursor, bold;
      end
    else /* sel num = 4*/
      if (EP0EM001.XSUCD[EP0EW-WINDX] != 
      EP0EW01.XPCCD[EP0EW-WINDX])
        EP0EW00.XXX-MSG-LOC-ID = "14100"; /* Message location*/
        converseLib.validationFailed(61); /* update valid only with <enter>*/
        set EP0EM001.XSUCD[EP0EW-WINDX] cursor, bold;
      end
    end

    if (EP0EM001.XXX-LN-SEL-IND[EP0EW-WINDX] == " ")
        /* continue*/
    else
      if (EP0EM001.XXX-LN-SEL-IND[EP0EW-WINDX] == "D"
       && converseVar.eventKey is pf12)
          /* continue*/
      else
        EP0EW00.XXX-MSG-LOC-ID = "14100"; /* Message location*/
        converseLib.validationFailed(11); /* Invalid data on field*/
        set EP0EM001.XXX-LN-SEL-IND[EP0EW-WINDX] cursor, bold;
      end
    end

    EP0EW00.EP0EW-WINDX = EP0EW00.EP0EW-WINDX - 1; /* decr line indx*/
  end

end // end EP0E-14100

// Verify scroll request
Function EP0E-14200()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && EP0EW00.XXX-CURR-PAGE-NBR < 2) /* and no previous pages*/

    EP0EW00.XXX-MSG-LOC-ID = "14200"; /* Message location*/
    converseLib.validationFailed(7); /* No previous page to display*/
  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && EP0EW00.XXX-CURR-PAGE-NBR >= EP0EW00.XXX-HI-PAGE-NBR)
                                   /* and no more pages*/
    EP0EW00.XXX-MSG-LOC-ID = "14200"; /* Message location*/
    converseLib.validationFailed(8); /* No more pages to display*/
  end

end // end EP0E-14200

// Validate delete request
Function EP0E-14400()
   /* ------------------------------------------------------------*/
   /* Determine if delete request is valid*/
   /* ------------------------------------------------------------*/
  EP0EW00.EP0EW-ENTRY-FOUND-FL = "N";
  EP0EW00.EP0EW-WINDX = EP0EW00.XXX-INX-LMT-NBR;

  while (EP0EW00.EP0EW-WINDX > 0) /* edit all lines on screen*/

    if (EP0EM001.XXX-LN-SEL-IND[EP0EW-WINDX] != " ")
      if (EP0EM001.XXX-LN-SEL-IND[EP0EW-WINDX] == "D")
        EP0EW00.EP0EW-ENTRY-FOUND-FL = "Y";
      else
        EP0EW00.XXX-MSG-LOC-ID = "14400"; /* Message location*/
        converseLib.validationFailed(39); /* must be 'd' for delete*/
        set EP0EM001.XXX-LN-SEL-IND[EP0EW-WINDX] cursor, bold;
      end
    end

    EP0EW00.EP0EW-WINDX = EP0EW00.EP0EW-WINDX - 1; /* decr line indx*/
  end

  if (EP0EW00.EP0EW-ENTRY-FOUND-FL == "N")
    EP0EW00.XXX-MSG-LOC-ID = "14400"; /* Message location*/
    converseLib.validationFailed(39); /* must be 'd' for delete*/
  end

end // end EP0E-14400

// verify modf'd fields on a line
Function EP0E-14600()
   /* -------------------------------------------------------------*/
   /* If any line field changed, check for valid data on all fields*/
   /* -------------------------------------------------------------*/
  EP0EW00.EP0EW-WINDX = EP0EW00.XXX-INX-LMT-NBR; /* Line index*/

  while (EP0EW00.EP0EW-WINDX > 0) /* Until end of lines*/

    if (EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] != 
    EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX]
     || EP0EM001.XSUCD[EP0EW-WINDX] != 
    EP0EW01.XSUCD[EP0EW-WINDX]
     || EP0EM001.PK-DCMS-SPRC-CD[EP0EW-WINDX] != 
    EP0EW01.PK-DCMS-SPRC-CD[EP0EW-WINDX]
     || EP0EM001.PK-DCMS-SINST-TXT[EP0EW-WINDX] != 
    EP0EW01.PK-DCMS-SINST-TXT[EP0EW-WINDX]) /* data changed*/

      if (EP0EM001.PK-DCMS-SINST-TXT[EP0EW-WINDX] == " ")
        EP0EW00.XXX-MSG-LOC-ID = "14600"; /* Message location*/
        converseLib.validationFailed(9); /* required field*/
        set EP0EM001.PK-DCMS-SINST-TXT[EP0EW-WINDX] cursor, bold;
      end

      if (EP0EM001.PK-DCMS-SPRC-CD[EP0EW-WINDX] == " ")
        EP0EW00.XXX-MSG-LOC-ID = "14600"; /* Message location*/
        converseLib.validationFailed(52); /* DCMS code cannot be blank*/
        set EP0EM001.PK-DCMS-SPRC-CD[EP0EW-WINDX] cursor, bold;
      else
        if (EP0EM001.PK-DCMS-SPRC-CD[EP0EW-WINDX] != 
        EP0EW01.PK-DCMS-SPRC-CD[EP0EW-WINDX])
          if (EP0EW01.PK-DCMS-SPRC-CD[EP0EW-WINDX] == " ")
            EP0E-14610(); /* edit new DCMS spec proc cd*/
          else
            EP0EW00.XXX-MSG-LOC-ID = "14600"; /* Message location*/
            converseLib.validationFailed(393); /* DCMS code cannot be changed*/
            set EP0EM001.PK-DCMS-SPRC-CD[EP0EW-WINDX] cursor, bold;
          end
        end
      end

      /* <---- MULTGPC (BEGIN)  ---->*/
      if (EPWREC.EPW-FROM-MAP-SEL-NUM == 5) /* Apparel*/

        if (EP0EM001.XSUCD[EP0EW-WINDX] > " "
         && EP0EM001.XSUCD[EP0EW-WINDX] != 
        EP0EW01.XSUCD[EP0EW-WINDX])
          if (EP0EM001.XSUCD[EP0EW-WINDX] in XSUTBL.XSUCD)
                                     /* continue*/
          else
            EP0EW00.XXX-MSG-LOC-ID = "14600"; /* Message location*/
            converseLib.validationFailed(11); /* invalid data*/
            set EP0EM001.XSUCD[EP0EW-WINDX] cursor, bold;
          end
        end
      else /* equipment*/
        if (EP0EM001.XSUCD[EP0EW-WINDX] > " "
         && EP0EM001.XSUCD[EP0EW-WINDX] != 
        EP0EW01.XPCCD[EP0EW-WINDX])
          if (EP0EM001.XSUCD[EP0EW-WINDX] in XPCTBL.XPCCD)
                                     /* continue*/
          else
            EP0EW00.XXX-MSG-LOC-ID = "14600"; /* Message location*/
            converseLib.validationFailed(11); /* invalid data*/
            set EP0EM001.XSUCD[EP0EW-WINDX] cursor, bold;
          end
        end
      end

      if (EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] > " "
       && EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] != 
      EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX])

        EP0E-14620(); /* edit customer*/
      end

      if (EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == " "
       && EP0EM001.XSUCD[EP0EW-WINDX] == " ")
        EP0EW00.XXX-MSG-LOC-ID = "14600"; /* Message location*/
        converseLib.validationFailed(9); /* required field*/
        set EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] bold;
        set EP0EM001.XSUCD[EP0EW-WINDX] bold;
      end
    end

    if (EP0EM001.XXX-LN-SEL-IND[EP0EW-WINDX] != " ")
      EP0EW00.XXX-MSG-LOC-ID = "14600"; /* Message location*/
      converseLib.validationFailed(40); /* must be blank for changes*/
      set EP0EM001.XXX-LN-SEL-IND[EP0EW-WINDX] cursor, bold;
    end

    EP0EW00.EP0EW-WINDX = EP0EW00.EP0EW-WINDX - 1; /* decr line indx*/
  end

end // end EP0E-14600

// Verify dcms code
Function EP0E-14610()
   /* -------------------------------------------------------------*/
   /* Verify new DCMS code*/
   /* -------------------------------------------------------------*/

  set VSPRCD01 empty; /* Clear row storage area*/
  VSPRCD01.PK-DCMS-SPRC-CD = EP0EM001.PK-DCMS-SPRC-CD[EP0EW-WINDX];
  VSPRCD01.PK-DCMS-SPRCSUB-CD = 0;

  EP0ES-VSPRCD01-SEL(); /* Select set and open cursor*/

  if (SQLCA.VAGen_SQLCODE == 100) /* does not exist yet*/
       /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 0)
      /* <---- MULTGPC (BEGIN)  ---->*/
      if (EPWREC.EPW-FROM-MAP-SEL-NUM == 5) /* Apparel*/

      /* <---- MULTGPC (END)  ---->*/
        if (VSPRCD01.PK-GSPRC-SRCE-CD == "LEVL")
           /* next sentence*/
        else
          EP0EW00.XXX-MSG-LOC-ID = "14610"; /* Message location*/
          converseLib.validationFailed(42); /* dcms code in use*/
          set EP0EM001.PK-DCMS-SPRC-CD[EP0EW-WINDX] cursor, bold;
        end
      /* <---- MULTGPC (BEGIN)  ---->*/
      else /* EQUIPMENT*/

        if (VSPRCD01.PK-GSPRC-SRCE-CD == "LVEQ")
           /* next sentence*/
        else
          EP0EW00.XXX-MSG-LOC-ID = "14610"; /* Message location*/
          converseLib.validationFailed(42); /* dcms code in use*/
          set EP0EM001.PK-DCMS-SPRC-CD[EP0EW-WINDX] cursor, bold;
        end
      /* <---- MULTGPC (END)  ---->*/
      end
    end
  end

end // end EP0E-14610

// Edit customer number
Function EP0E-14620()
   /* ------------------------------------------------------------*/
   /* Edit customer number*/
   /* ------------------------------------------------------------*/

  if (EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "V00I"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == " V00I"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "  V00I"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "   V00I"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "    V00I"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "V00C"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == " V00C"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "  V00C"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "   V00C"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "    V00C"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "VNPB"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == " VNPB"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "  VNPB"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "   VNPB"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "    VNPB"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "VNIB"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == " VNIB"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "  VNIB"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "   VNIB"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "    VNIB"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "VPNB"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == " VPNB"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "  VPNB"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "   VPNB"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "    VPNB"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "VPIB"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == " VPIB"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "  VPIB"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "   VPIB"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "    VPIB"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "VCRS"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == " VCRS"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "  VCRS"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "   VCRS"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "    VCRS"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "V00F"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == " V00F"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "  V00F"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "   V00F"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "    V00F"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "V0LF"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == " V0LF"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "  V0LF"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "   V0LF"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "    V0LF"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "VINS"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == " VINS"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "  VINS"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "   VINS"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "    VINS"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "VHNG"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == " VHNG"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "  VHNG"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "   VHNG"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "    VHNG"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "V0FL"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == " V0FL"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "  V0FL"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "   V0FL"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "    V0FL"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "VEBX"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == " VEBX"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "  VEBX"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "   VEBX"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "    VEBX"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "VPRN"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == " VPRN"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "  VPRN"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "   VPRN"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "    VPRN"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "VRRP"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == " VRRP"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "  VRRP"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "   VRRP"
   || EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] == "    VRRP")				
    /* next senetence*/
  else
    EP0EW00.EP0EW-KUCCOID = EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX];
    if (EP0EW00.EP0EW-KUCCOID-X1 <= " ")
      EP0EW00.EP0EW-KUCCOID-X1 = "0";
    end
    if (EP0EW00.EP0EW-KUCCOID-X2 <= " ")
      EP0EW00.EP0EW-KUCCOID-X2 = "0";
    end
    if (EP0EW00.EP0EW-KUCCOID-X3 <= " ")
      EP0EW00.EP0EW-KUCCOID-X3 = "0";
    end
    if (EP0EW00.EP0EW-KUCCOID-X4 <= " ")
      EP0EW00.EP0EW-KUCCOID-X4 = "0";
    end
    if (EP0EW00.EP0EW-KUCCOID-X5 <= " ")
      EP0EW00.EP0EW-KUCCOID-X5 = "0";
    end
    if (EP0EW00.EP0EW-KUCCOID-X6 <= " ")
      EP0EW00.EP0EW-KUCCOID-X6 = "0";
    end
    if (EP0EW00.EP0EW-KUCCOID-X7 <= " ")
      EP0EW00.EP0EW-KUCCOID-X7 = "0";
    end
    if (EP0EW00.EP0EW-KUCCOID-X8 <= " ")
      EP0EW00.EP0EW-KUCCOID-X8 = "0";
    end

    set KUCREC empty;
    if (EP0EW00.EP0EW-KUCCOID is numeric)
      EP0EW00.EP0EW-KUCCOID-NUM = EP0EW00.EP0EW-KUCCOID;
      KUCREC.KUCCOID = EP0EW00.EP0EW-KUCCOID-NUM;

      EP0ES-VCMPNY01-SEL(); /* get cmpny01 row*/

      if (SQLCA.VAGen_SQLCODE != 0) /* Not found*/
        EP0EW00.XXX-MSG-LOC-ID = "14620"; /* Message location*/
        converseLib.validationFailed(11); /* invalid field*/
        set EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] cursor, bold;
      end
    else
      EP0EW00.XXX-MSG-LOC-ID = "14620"; /* Message location*/
      converseLib.validationFailed(11); /* Invalid data*/
      set EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] cursor, bold;
    end
  end

end // end EP0E-14620

// Process valid input request
Function EP0E-15000()
   /* ------------------------------------------------------------*/
   /* If request for restore, set flags and return*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf11) /* request for restore*/

    EP0EW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/
    EP0EW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If scroll backward was requested, decrement the page number.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    EP0EW00.XXX-CURR-PAGE-NBR = EP0EW00.XXX-CURR-PAGE-NBR - 1;
                                   /* Decrement page number*/
    EP0EW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, increment the page number.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    EP0EW00.XXX-CURR-PAGE-NBR = EP0EW00.XXX-CURR-PAGE-NBR + 1;
                                   /* Increment page number*/
    EP0EW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Display pop-up screen for source*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf9) /* Sources pop-up screen requested*/
    if ("?" in EP0EM001.XSUCD)
      EP0EW00.EP0EW-WINDX = 1; /* Initialize line index*/
      while (EP0EW00.EP0EW-WINDX <= EP0EW00.XXX-INX-LMT-NBR)
        if (EP0EM001.XSUCD[EP0EW-WINDX] == "?")

          if (EPWREC.EPW-FROM-MAP-SEL-NUM == 5) /* Apparel*/

            EP0E-15200(); /* Display list silh code*/
            if (XX0XW02.XX0XWPIX > 0) /* A selection was made*/
              EP0EM001.XSUCD[EP0EW-WINDX] = XSUTBL.XSUCD[XX0XWPIX];
            end

          else
            EP0E-15250(); /* Display list xpc code*/
            if (XX0XW02.XX0XWPIX > 0) /* A selection was made*/
              EP0EM001.XSUCD[EP0EW-WINDX] = XPCTBL.XPCCD[XX0XWPIX];
            end

          end
          EP0EW00.EP0EW-WINDX = EP0EW00.XXX-INX-LMT-NBR;
        end
        EP0EW00.EP0EW-WINDX = EP0EW00.EP0EW-WINDX + 1; /* incr line indx*/
      end
      EP0EW00.XXX-MSG-LOC-ID = "15000"; /* Message location*/
      converseLib.validationFailed(392); /* requested list displayed*/
    else
      if (EPWREC.EPW-FROM-MAP-SEL-NUM == 5) /* Apparel*/
        EP0E-15200(); /* Display list - silh code*/
      else
        EP0E-15250(); /* Display list - XPC code*/
      end
    end
    converseLib.clearScreen();
     /* Clear screen before display*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If <enter> key, perform adds/updates*/
   /* If PF12, perform deletes*/
   /* ------------------------------------------------------------*/
  EP0EW00.EP0EW-ENTRY-FOUND-FL = "N";

  if (converseVar.eventKey is enter)
    EP0E-15400(); /* perform changes*/
  else
    if (converseVar.eventKey is pf12)
      EP0E-15300(); /* perform delete(s)*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If errors found, get out now*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum > 0) /* ?* Errors found*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* roll back db changes*/

    exit stack; /* exit to display map*/
  end

   /* ------------------------------------------------------------*/
   /* Save any field that was changed in the map display storage.*/
   /* ------------------------------------------------------------*/
  EP0EW00.EP0EW-WINDX = 1; /* Initialize line index*/

  while (EP0EW00.EP0EW-WINDX <= EP0EW00.XXX-INX-LMT-NBR)
                                   /* Until end of lines*/
    EP0E-15500(); /* save changes on TS page work area*/

    EP0EW00.EP0EW-WINDX = EP0EW00.EP0EW-WINDX + 1; /* incr line indx*/
  end

  if (EP0EW00.EP0EW-ENTRY-FOUND-FL == "Y")
    EP0EW00.XXX-MSG-LOC-ID = "15000"; /* Message location*/
    converseLib.validationFailed(20); /* transaction completed*/
  end

end // end EP0E-15000

// Display silhouttes list
Function EP0E-15200()
   /* ------------------------------------------------------------*/
   /* display the list of silhouttes.*/
   /* ------------------------------------------------------------*/
  XPXX001(); /* Window initialization*/

  XX0XW02.XX0XWHDR = "SILHOUTTE CODES"; /* Heading*/
  XX0XW02.XGPCD = "03"; /* only apparel stuff*/

  while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
    XPXSU01(); /* Display the list*/
  end

end // end EP0E-15200

// Pop up for XPC codes
Function EP0E-15250()
   /* ------------------------------------------------------------*/
   /* display the list of silhouttes.*/
   /* ------------------------------------------------------------*/
  XPXX001(); /* Window initialization*/

  XX0XW02.XX0XWHDR = "PRODUCT CATEGORY CODES"; /* Heading*/
  XX0XW02.XGPCD = "02"; /* only Footwear/equipment codes*/

  while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
    XPXPC01(); /* Display the list*/
  end

end // end EP0E-15250

// Process delete request
Function EP0E-15300()
   /* ------------------------------------------------------------*/
   /* Perform delete request*/
   /* ------------------------------------------------------------*/
  EP0EW00.EP0EW-WINDX = 1;

  while (EP0EW00.EP0EW-WINDX <= EP0EW00.XXX-INX-LMT-NBR)

    if (EP0EM001.XXX-LN-SEL-IND[EP0EW-WINDX] == "D")
      EP0EW00.EP0EW-ENTRY-FOUND-FL = "Y";
      set VSPRCD01 empty;
      VSPRCD01.PK-DCMS-SPRC-CD = EP0EM001.PK-DCMS-SPRC-CD[EP0EW-WINDX];
      VSPRCD01.PK-DCMS-SPRCSUB-CD = EP0EM001.PK-DCMS-SPRCSUB-CD[EP0EW-WINDX];

      EP0ES-VSPRCD01-DEL(); /* delete row*/
    end

    EP0EW00.EP0EW-WINDX = EP0EW00.EP0EW-WINDX + 1; /* incr line indx*/
  end

   /* ------------------------------------------------------------*/
   /* If no errors found, apply changes to ts page work area*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum == 0) /* no errors found*/
    if (EP0EW00.EP0EW-ENTRY-FOUND-FL == "Y")
      EP0EW00.EP0EW-WINDX = 1;

      while (EP0EW00.EP0EW-WINDX <= EP0EW00.XXX-INX-LMT-NBR)

        if (EP0EM001.XXX-LN-SEL-IND[EP0EW-WINDX] == "D")
          EP0EM001.XXX-LN-SEL-IND[EP0EW-WINDX] = " ";
          EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] = " ";
          EP0EM001.CU-CO-SHORT-NM[EP0EW-WINDX] = " ";
          EP0EM001.XSUCD[EP0EW-WINDX] = " ";
          EP0EM001.PK-DCMS-SPRC-CD[EP0EW-WINDX] = " ";
          EP0EM001.PK-DCMS-SPRCSUB-CD[EP0EW-WINDX] = " ";
          EP0EM001.PK-DCMS-SINST-TXT[EP0EW-WINDX] = " ";
        end

        EP0EW00.EP0EW-WINDX = EP0EW00.EP0EW-WINDX + 1; /* incr line indx*/
      end
    end
  end

end // end EP0E-15300

// Process db changes
Function EP0E-15400()
   /* -------------------------------------------------------------*/
   /* If any line field changed, perform change or add request*/
   /* -------------------------------------------------------------*/
  EP0EW00.EP0EW-WINDX = 1; /* Line index*/

  while (EP0EW00.EP0EW-WINDX <= EP0EW00.XXX-INX-LMT-NBR)

    if (EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] != 
    EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX]
     || EP0EM001.XSUCD[EP0EW-WINDX] != 
    EP0EW01.XSUCD[EP0EW-WINDX]
     || EP0EM001.PK-DCMS-SPRC-CD[EP0EW-WINDX] != 
    EP0EW01.PK-DCMS-SPRC-CD[EP0EW-WINDX]
     || EP0EM001.PK-DCMS-SINST-TXT[EP0EW-WINDX] != 
    EP0EW01.PK-DCMS-SINST-TXT[EP0EW-WINDX]) /* data changed*/

      EP0EW00.EP0EW-ENTRY-FOUND-FL = "Y";

      if (EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == " "
       && EP0EW01.XSUCD[EP0EW-WINDX] == " "
       && EP0EW01.PK-DCMS-SPRC-CD[EP0EW-WINDX] == " "
       && EP0EW01.PK-DCMS-SINST-TXT[EP0EW-WINDX] == " ") /* this is an add*/

        EP0E-15410(); /* Add to vsprcd01*/
      else
        EP0E-15420(); /* Update vsprcd01*/
      end
    end

    EP0EW00.EP0EW-WINDX = EP0EW00.EP0EW-WINDX + 1; /* incr line indx*/
  end

end // end EP0E-15400

// Add row to Vsprcd01
Function EP0E-15410()
   /* -------------------------------------------------------------*/
   /* Add a row to Vsprcd01*/
   /* -------------------------------------------------------------*/

  EP0EW00.PK-DCMS-SPRCSUB-CD = 0;

  EP0E-15411(); /* find highest sub nbr for dcms-cd*/

  EP0EW00.PK-DCMS-SPRCSUB-CD = EP0EW00.PK-DCMS-SPRCSUB-CD + 1;
  EP0EM001.PK-DCMS-SPRCSUB-CD[EP0EW-WINDX] = EP0EW00.PK-DCMS-SPRCSUB-CD;

  set VSPRCD01 empty;
  VSPRCD01.PK-DCMS-SPRC-CD = EP0EM001.PK-DCMS-SPRC-CD[EP0EW-WINDX];
  VSPRCD01.PK-DCMS-SPRCSUB-CD = EP0EM001.PK-DCMS-SPRCSUB-CD[EP0EW-WINDX];

   /* <---- MULTGPC (BEGIN)  ---->*/
  if (EPWREC.EPW-FROM-MAP-SEL-NUM == 5) /* Apparel*/
    VSPRCD01.PK-GSPRC-SRCE-CD = "LEVL";
  else
    VSPRCD01.PK-GSPRC-SRCE-CD = "LVEQ";
  end
   /* <---- MULTGPC (END)  ---->*/

  VSPRCD01.PK-GOAL-SPRC-CD = " ";
  EP0EW00.PK-SPCL-PROC-VAR1-1-2 = " ";
  EP0EW00.PK-SPCL-PROC-VAR1-3-10 = EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX];
  VSPRCD01.PK-SPCL-PROC-VAR1 = EP0EW00.PK-SPCL-PROC-VAR1;
  VSPRCD01.PK-SPCL-PROC-VAR2 = EP0EM001.XSUCD[EP0EW-WINDX];
  VSPRCD01.PK-DCMS-SINST-TXT = EP0EM001.PK-DCMS-SINST-TXT[EP0EW-WINDX];
  VSPRCD01.ZZZSDT = XX0XW01.XX0XWDAT;
  VSPRCD01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VSPRCD01.ZZZCHGTM = XX0XW01.XX0XWTIM;

  EP0ES-VSPRCD01-ADD(); /* Add to vsprcd01*/

end // end EP0E-15410

// Get highest DCMS sub#
Function EP0E-15411()
   /* ------------------------------------------------------------*/
   /* Select and open the cursor looking for current DCMS code*/
   /* ------------------------------------------------------------*/
  set VSPRCD01 empty; /* Clear row storage area*/
   /* <---- MULTGPC (BEGIN)  ---->*/
  if (EPWREC.EPW-FROM-MAP-SEL-NUM == 5) /* Apparel*/
    VSPRCD01.PK-GSPRC-SRCE-CD = "LEVL";
  else
    VSPRCD01.PK-GSPRC-SRCE-CD = "LVEQ";
  end

  EP0EW03.EP0EW-IO-TASK = "S2";

  EP0ES-VSPRCD01-OPN(); /* Select set and open cursor*/

  EP0EW00.EP0EW-SRCE-EOF-FL = "N"; /* End of cursor flag*/
  EP0EW03.EP0EW-IO-TASK = "N2";

  EP0ES-VSPRCD01-FTC(); /* Fetch first row in cursor*/

   /* ------------------------------------------------------------*/
   /* Look for highest sub for current DCMS code.*/
   /* ------------------------------------------------------------*/
  while (EP0EW00.EP0EW-SRCE-EOF-FL == "N" /* Until end of cursor*/
   && VSPRCD01.PK-DCMS-SPRC-CD <=      
  EP0EM001.PK-DCMS-SPRC-CD[EP0EW-WINDX])

    if (VSPRCD01.PK-DCMS-SPRC-CD == 
    EP0EM001.PK-DCMS-SPRC-CD[EP0EW-WINDX])
      if (VSPRCD01.PK-DCMS-SPRCSUB-CD > EP0EW00.PK-DCMS-SPRCSUB-CD)
        EP0EW00.PK-DCMS-SPRCSUB-CD = VSPRCD01.PK-DCMS-SPRCSUB-CD;
      end
    end

    EP0ES-VSPRCD01-FTC(); /* Fetch next row in cursor*/
  end

   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/
  EP0EW03.EP0EW-IO-TASK = "C2";

  EP0ES-VSPRCD01-CLS(); /* Close selected set cursor*/

end // end EP0E-15411

// Update row on Vsprcd01
Function EP0E-15420()
   /* -------------------------------------------------------------*/
   /* Update row on Vsprcd01*/
   /* -------------------------------------------------------------*/

  set VSPRCD01 empty; /* Clear row storage area*/
  VSPRCD01.PK-DCMS-SPRC-CD = EP0EM001.PK-DCMS-SPRC-CD[EP0EW-WINDX];
  VSPRCD01.PK-DCMS-SPRCSUB-CD = EP0EM001.PK-DCMS-SPRCSUB-CD[EP0EW-WINDX];

  EP0ES-VSPRCD01-SEL(); /* Select set and open cursor*/

  if (SQLCA.VAGen_SQLCODE == 0) /* record found*/
    EP0EW00.PK-SPCL-PROC-VAR1-1-2 = " ";
    EP0EW00.PK-SPCL-PROC-VAR1-3-10 = EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX];
    VSPRCD01.PK-SPCL-PROC-VAR1 = EP0EW00.PK-SPCL-PROC-VAR1;
    VSPRCD01.PK-SPCL-PROC-VAR2 = EP0EM001.XSUCD[EP0EW-WINDX];
    VSPRCD01.PK-DCMS-SPRC-CD = EP0EM001.PK-DCMS-SPRC-CD[EP0EW-WINDX];
    VSPRCD01.PK-DCMS-SPRCSUB-CD = EP0EM001.PK-DCMS-SPRCSUB-CD[EP0EW-WINDX];
    VSPRCD01.PK-DCMS-SINST-TXT = EP0EM001.PK-DCMS-SINST-TXT[EP0EW-WINDX];
    VSPRCD01.ZZZCHGDT = XX0XW01.XX0XWDAT;
    VSPRCD01.ZZZCHGTM = XX0XW01.XX0XWTIM;

    EP0ES-VSPRCD01-UPT(); /* Update vsprcd01*/

    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
      EP0EW00.XXX-MSG-LOC-ID = "15420"; /* Message location*/
      converseLib.validationFailed(32); /* record has been changed*/
      set EP0EM001.PK-DCMS-SPRC-CD[EP0EW-WINDX] cursor, bold;
    end
  else
    converseLib.validationFailed(33); /* record not found (deleted?)*/
    EP0EW00.XXX-MSG-LOC-ID = "15420"; /* Message location*/
    set EP0EM001.PK-DCMS-SPRC-CD[EP0EW-WINDX] cursor, bold;
  end

end // end EP0E-15420

Function EP0E-15500()
   /* ------------------------------------------------------------*/
   /* Save any field that was changed in the map display storage.*/
   /* ------------------------------------------------------------*/
  if (EP0EM001.XXX-LN-SEL-IND[EP0EW-WINDX] != 
  EP0EW01.XXX-LN-SEL-IND[EP0EW-WINDX])
    EP0EW01.XXX-LN-SEL-IND[EP0EW-WINDX] = EP0EM001.XXX-LN-SEL-IND[EP0EW-WINDX];
    EP0EW00.XXX-PAGE-UPD-FL = "Y"; /* Page update flag*/
  end

  if (EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX] != 
  EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX])
    EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] = EP0EM001.EP0EM-KUCCOID[EP0EW-WINDX];

    if (EP0EW01.EP0EW-KUCCOID[EP0EW-WINDX] == " ")
      EP0EW01.CU-CO-SHORT-NM[EP0EW-WINDX] = " ";
      EP0EM001.CU-CO-SHORT-NM[EP0EW-WINDX] = " ";
    else
      EP0E-11100(); /* get company name*/

      EP0EM001.CU-CO-SHORT-NM[EP0EW-WINDX] = EP0EW01.CU-CO-SHORT-NM[EP0EW-WINDX];
    end
    EP0EW00.XXX-PAGE-UPD-FL = "Y"; /* Page update flag*/
  end

  if (EP0EM001.XSUCD[EP0EW-WINDX] != 
  EP0EW01.XSUCD[EP0EW-WINDX])
    EP0EW01.XSUCD[EP0EW-WINDX] = EP0EM001.XSUCD[EP0EW-WINDX];
    EP0EW00.XXX-PAGE-UPD-FL = "Y"; /* Page update flag*/
  end

  if (EP0EM001.PK-DCMS-SPRC-CD[EP0EW-WINDX] != 
  EP0EW01.PK-DCMS-SPRC-CD[EP0EW-WINDX])
    EP0EW01.PK-DCMS-SPRC-CD[EP0EW-WINDX] = EP0EM001.PK-DCMS-SPRC-CD[EP0EW-WINDX];
    EP0EW01.PK-DCMS-SPRCSUB-CD[EP0EW-WINDX] = EP0EM001.PK-DCMS-SPRCSUB-CD[EP0EW-WINDX];
    EP0EW00.XXX-PAGE-UPD-FL = "Y"; /* Page update flag*/
  end

  if (EP0EM001.PK-DCMS-SINST-TXT[EP0EW-WINDX] != 
  EP0EW01.PK-DCMS-SINST-TXT[EP0EW-WINDX])
    EP0EW01.PK-DCMS-SINST-TXT[EP0EW-WINDX] = EP0EM001.PK-DCMS-SINST-TXT[EP0EW-WINDX];
    EP0EW00.XXX-PAGE-UPD-FL = "Y"; /* Page update flag*/
  end

end // end EP0E-15500

// Exit to another application
Function EP0ES-EXIT()
   /* ------------------------------------------------------------*/
   /* Set the application to be invoked for PF1 or PF4.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf1) /* PF1 was pressed*/
    COMMAREA.CATOAP = "GD01"; /* Goal Documentation*/
  end

  if (converseVar.eventKey is pf4) /* PF4 was pressed*/
    COMMAREA.CATOAP = "MN0M"; /* Master Menu*/
  end

   /* ------------------------------------------------------------*/
   /* Save the system work record in the COMMAREA user area.*/
   /* ------------------------------------------------------------*/
  if (COMMAREA.CATOSYS == COMMAREA.CACURSYS) /* Same system*/

    /* MOVE EPWREC.EPWUSERA TO COMMAREA.CAUSERA;/* Save work record*/
    COMMAREA.CAUSERA = EPWREC.EPW-GROUP; /* Save work record*/
  else
    COMMAREA.CAUSERA = " "; /* Clear user area*/
  end

   /* ------------------------------------------------------------*/
   /* Transfer control to the specified application.*/
   /* ------------------------------------------------------------*/
  XSEXIT(); /* Exit to another application*/

  EP0EW00.XXX-MSG-LOC-ID = "XSEXIT"; /* Message location*/

   /* ------------------------------------------------------------*/
   /* Reestablish the COMMAREA application and item fields.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CAEZSG3 = "0"; /* Force zero third character*/
  COMMAREA.CACURRAP = COMMAREA.CAEZSAP; /* Current application*/

  if (converseVar.eventKey is pfkey) /* PF key was pressed*/
    COMMAREA.CATOAP = " "; /* Clear TO application*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = " "; /* Clear map name from item*/
    end
  end

end // end EP0ES-EXIT

// Add page to temporary storage
Function EP0ES-TA0050-A()
   /* ------------------------------------------------------------*/
   /* Add the next page to the temporary storage queue.*/
   /* ------------------------------------------------------------*/
  EP0EW01.XXX-TEMP-STG-LNTH = EP0EW00.XXX-TEMP-STG-LNTH;
                                   /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (EP0EW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Add page*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, initialize the storage area and*/
   /* indicators to be used and return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set EP0EW01 empty; /* M001 display storage*/
    EP0EW00.XXX-HI-PAGE-NBR = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Clear last page number*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/

  EP0EW00.XXX-MSG-LOC-ID = "TA0050A"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(109); /* Unexpected ts error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = EP0EW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end EP0ES-TA0050-A

// Purge any temporary storage
Function EP0ES-TA0050-P()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  set EP0EW01 empty; /* M001 display storage*/

  EP0EW00.XXX-PAGE-UPD-FL = "N"; /* Page update flag*/
  TA5REC.TA5TSQIX = 0; /* Displayed page number*/
  EP0EW00.XXX-HI-PAGE-NBR = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (EP0EW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Purge storage*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/
  EP0EW00.XXX-MSG-LOC-ID = "TA0050P"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(109); /* Unexpected ts error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = EP0EW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end EP0ES-TA0050-P

// Read temporary storage page
Function EP0ES-TA0050-R()
   /* ------------------------------------------------------------*/
   /* Read the next page from the temporary storage queue.*/
   /* ------------------------------------------------------------*/
  EP0EW01.XXX-TEMP-STG-LNTH = EP0EW00.XXX-TEMP-STG-LNTH;
                                   /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = EP0EW00.XXX-CURR-PAGE-NBR; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (EP0EW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Read page*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/
  EP0EW00.XXX-MSG-LOC-ID = "TA0050R"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(109); /* Unexpected ts error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = EP0EW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "READ TEMPORARY STORAGE PAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end EP0ES-TA0050-R

// Update temporary storage page
Function EP0ES-TA0050-U()
   /* ------------------------------------------------------------*/
   /* Update the page in the temporary storage queue.*/
   /* ------------------------------------------------------------*/
  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (EP0EW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update page*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/
  EP0EW00.XXX-MSG-LOC-ID = "TA0050U"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(109); /* Unexpected ts error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = EP0EW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "UPDATE TEMPORARY STORAGE PAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end EP0ES-TA0050-U

// select unique dcust.vcmpny01
Function EP0ES-VCMPNY01-SEL()
      /* *********************************************************/
      /* * this statement group performs a select unique for    **/
      /* * the dcust.vcmpny01 table.                            **/
      /* *********************************************************/

  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100)
      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  EP0EW00.XXX-MSG-LOC-ID = "VCMPNY01-S"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(1); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EP0EW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "SELECT CMPNY TABLE"; /* Description*/
  TA1REC.TA1DBASE = "DCUST   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCMPNY01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end EP0ES-VCMPNY01-SEL

// add row to vsprcd01
Function EP0ES-VSPRCD01-ADD()
   /* ------------------------------------------------------------*/
   /* Delete the requested  row from the table.*/
   /* ------------------------------------------------------------*/
  EP0EW03.EP0EW-IO-TASK = "A ";

  try
    call "VSPRCD01" (EP0EW03, SQLCA, VSPRCD01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* normal return code*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  EP0EW00.XXX-MSG-LOC-ID = "VSPRCD01AD"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EP0EW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "ADD ROW TO TABLE"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPRCD01"; /* Table view name*/
  EP0EW00.PK-DCMS-SPRC-CD = VSPRCD01.PK-DCMS-SPRC-CD;
  EP0EW00.PK-DCMS-SPRCSUB-CD = VSPRCD01.PK-DCMS-SPRCSUB-CD;
  TA1REC.TA1TBLKE = EP0EW00.EP0EW-TBL-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end EP0ES-VSPRCD01-ADD

// Close selected set cursor
Function EP0ES-VSPRCD01-CLS()
   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  try
    call "VSPRCD01" (EP0EW03, SQLCA, VSPRCD01) {isNoRefresh = yes, isExternal = yes};
  end /* Close cursor*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  EP0EW00.XXX-MSG-LOC-ID = "VSPRCD01CS"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(1); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EP0EW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPRCD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end EP0ES-VSPRCD01-CLS

// Delete row from vsprcd01
Function EP0ES-VSPRCD01-DEL()
   /* ------------------------------------------------------------*/
   /* Delete the requested  row from the table.*/
   /* ------------------------------------------------------------*/
  EP0EW03.EP0EW-IO-TASK = "D ";

  try
    call "VSPRCD01" (EP0EW03, SQLCA, VSPRCD01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or already deleted*/

      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  EP0EW00.XXX-MSG-LOC-ID = "VSPRCD01DL"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EP0EW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "DELETE ROW FROM TABLE"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPRCD01"; /* Table view name*/
  EP0EW00.PK-DCMS-SPRC-CD = VSPRCD01.PK-DCMS-SPRC-CD;
  EP0EW00.PK-DCMS-SPRCSUB-CD = VSPRCD01.PK-DCMS-SPRCSUB-CD;
  TA1REC.TA1TBLKE = EP0EW00.EP0EW-TBL-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end EP0ES-VSPRCD01-DEL

// Fetch next row in cursor
Function EP0ES-VSPRCD01-FTC()
   /* ------------------------------------------------------------*/
   /* Fetch the next row that was selected from the table.*/
   /* ------------------------------------------------------------*/
  try
    call "VSPRCD01" (EP0EW03, SQLCA, VSPRCD01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch nxt*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
    /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      EP0EW00.EP0EW-SRCE-EOF-FL = "Y"; /* End of cursor*/

      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  EP0EW00.XXX-MSG-LOC-ID = "VSPRCD01FT"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EP0EW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "FETCH NEXT ROW IN CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPRCD01"; /* Table view name*/
  EP0EW00.PK-DCMS-SPRC-CD = VSPRCD01.PK-DCMS-SPRC-CD;
  EP0EW00.PK-DCMS-SPRCSUB-CD = VSPRCD01.PK-DCMS-SPRCSUB-CD;
  TA1REC.TA1TBLKE = EP0EW00.EP0EW-TBL-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end EP0ES-VSPRCD01-FTC

// Select set and open cursor
Function EP0ES-VSPRCD01-OPN()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  try
    call "VSPRCD01" (EP0EW03, SQLCA, VSPRCD01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  EP0EW00.XXX-MSG-LOC-ID = "VSPRCD01OP"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EP0EW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "SELECT SET AND OPEN CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPRCD01"; /* Table view name*/
  EP0EW00.PK-DCMS-SPRC-CD = VSPRCD01.PK-DCMS-SPRC-CD;
  EP0EW00.PK-DCMS-SPRCSUB-CD = VSPRCD01.PK-DCMS-SPRCSUB-CD;
  TA1REC.TA1TBLKE = EP0EW00.EP0EW-TBL-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end EP0ES-VSPRCD01-OPN

// Select unique from Vsprcd01
Function EP0ES-VSPRCD01-SEL()
   /* ------------------------------------------------------------*/
   /* Select a requested row from the table.*/
   /* ------------------------------------------------------------*/
  EP0EW03.EP0EW-IO-TASK = "S ";

  try
    call "VSPRCD01" (EP0EW03, SQLCA, VSPRCD01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0 /* if normal return code*/
     || SQLCA.VAGen_SQLCODE == 100) /* or row not found*/

      return; /* Return to previous process*/
    end
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  EP0EW00.XXX-MSG-LOC-ID = "VSPRCD01S "; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EP0EW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "SELECT A SPECIFIC ROW"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPRCD01"; /* Table view name*/
  EP0EW00.PK-DCMS-SPRC-CD = VSPRCD01.PK-DCMS-SPRC-CD;
  EP0EW00.PK-DCMS-SPRCSUB-CD = VSPRCD01.PK-DCMS-SPRCSUB-CD;
  TA1REC.TA1TBLKE = EP0EW00.EP0EW-TBL-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end EP0ES-VSPRCD01-SEL

// Update vsprcd01 row
Function EP0ES-VSPRCD01-UPT()
   /* ------------------------------------------------------------*/
   /* Delete the requested  row from the table.*/
   /* ------------------------------------------------------------*/
  EP0EW03.EP0EW-IO-TASK = "U ";

  try
    call "VSPRCD01" (EP0EW03, SQLCA, VSPRCD01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && (SQLCA.VAGen_SQLCODE == 0      /* normal return code*/
   || SQLCA.VAGen_SQLCODE == 100))   /* normal return code*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  EP0EW00.XXX-MSG-LOC-ID = "VSPRCD01UP"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EP0EW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "UPDATE TABLE ROW"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPRCD01"; /* Table view name*/
  EP0EW00.PK-DCMS-SPRC-CD = VSPRCD01.PK-DCMS-SPRC-CD;
  EP0EW00.PK-DCMS-SPRCSUB-CD = VSPRCD01.PK-DCMS-SPRCSUB-CD;
  TA1REC.TA1TBLKE = EP0EW00.EP0EW-TBL-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/

end // end EP0ES-VSPRCD01-UPT

//*** RECORD=EP0EW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record EP0EW00 type basicRecord
  10 XXX-RQT-DATA-FL XXX-RQT-DATA-FL ; 
  10 XXX-MAP-FMAT-FL XXX-MAP-FMAT-FL ; 
  10 XXX-TEMP-STG-LNTH XXX-TEMP-STG-LNTH ; 
  10 XXX-INX-LMT-NBR XXX-INX-LMT-NBR ; 
  10 XXX-CURR-PAGE-NBR XXX-CURR-PAGE-NBR ; 
  10 XXX-HI-PAGE-NBR XXX-HI-PAGE-NBR ; 
  10 XXX-PAGE-UPD-FL XXX-PAGE-UPD-FL ; 
  10 XXX-MSG-NBR XXX-MSG-NBR ; 
  10 XXX-MSG-LOC-ID XXX-MSG-LOC-ID ; 
  10 XXXNBRCY XXXNBRCY ; 
  10 EP0EW-WINDX EP0EW-WINDX ; 
  10 EP0EW-SRCE-EOF-FL EP0EW-SRCE-EOF-FL ; 
  10 EP0EW-ENTRY-FOUND-FL EP0EW-ENTRY-FOUND-FL ; 
  10 EP0EW-KUCCOID-NUM EP0EW-KUCCOID-NUM ; 
  10 * char(1) ; 
  10 PK-SPCL-PROC-VAR1 PK-SPCL-PROC-VAR1 ; 
    15 PK-SPCL-PROC-VAR1-1-2 PK-SPCL-PROC-VAR1-1-2 ; 
    15 PK-SPCL-PROC-VAR1-3-10 PK-SPCL-PROC-VAR1-3-10 ; 
  10 * char(1) ; 
  10 EP0EW-KUCCOID EP0EW-KUCCOID ; 
    15 EP0EW-KUCCOID-X1 EP0EW-KUCCOID-X1 ; 
    15 EP0EW-KUCCOID-X2 EP0EW-KUCCOID-X2 ; 
    15 EP0EW-KUCCOID-X3 EP0EW-KUCCOID-X3 ; 
    15 EP0EW-KUCCOID-X4 EP0EW-KUCCOID-X4 ; 
    15 EP0EW-KUCCOID-X5 EP0EW-KUCCOID-X5 ; 
    15 EP0EW-KUCCOID-X6 EP0EW-KUCCOID-X6 ; 
    15 EP0EW-KUCCOID-X7 EP0EW-KUCCOID-X7 ; 
    15 EP0EW-KUCCOID-X8 EP0EW-KUCCOID-X8 ; 
  10 * char(1) ; 
  10 EP0EW-TBL-KEY EP0EW-TBL-KEY ; 
    15 PK-DCMS-SPRC-CD PK-DCMS-SPRC-CD ; 
    15 PK-DCMS-SPRCSUB-CD PK-DCMS-SPRCSUB-CD ; 
end // end EP0EW00

//*** RECORD=EP0EW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record EP0EW01 type basicRecord
  5 XXX-TEMP-STG-LNTH XXX-TEMP-STG-LNTH ; 
  5 * char(885) ; 
    10 * char(59) [15] ; 
      15 XXX-LN-SEL-IND XXX-LN-SEL-IND ; 
      15 EP0EW-KUCCOID EP0EW-KUCCOID ; 
      15 CU-CO-SHORT-NM CU-CO-SHORT-NM ; 
      15 EP0EW-SHARED EP0EW-SHARED ; 
        20 XSUCD XSUCD ; 
        20 XPCCD XPCCD ; 
      15 PK-DCMS-SPRC-CD PK-DCMS-SPRC-CD ; 
      15 PK-DCMS-SPRCSUB-CD PK-DCMS-SPRCSUB-CD ; 
      15 PK-DCMS-SINST-TXT PK-DCMS-SINST-TXT ; 
end // end EP0EW01

//*** RECORD=EP0EW03 ****
// --------------------------------
// I/O Task working storage record.
// --------------------------------
// ***********************
Record EP0EW03 type basicRecord
  10 EP0EW-IO-TASK EP0EW-IO-TASK ; 
end // end EP0EW03

//*** RECORD=EPWREC ****
// ************************************************************
// 
//                "EP" Memphis Apparel
//            COMMON WORKING STORAGE FIELDS
//            =============================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are generally used
//           by all "EP" Apparel applications.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-22-98  esmit2       created
// ************************************************************
// ************************************************************
// **********************
Record EPWREC type basicRecord
  5 EPW-GROUP EPW-GROUP ; 
    10 EPW-ERR-SW EPW-ERR-SW ; 
    10 EPW-SAME-KEY-SW EPW-SAME-KEY-SW ; 
    10 EPW-FIRST-TM-SW EPW-FIRST-TM-SW ; 
    10 EPW-EOF-SW EPW-EOF-SW ; 
    10 EPW-SPCL-EXIT-SW EPW-SPCL-EXIT-SW ; 
    10 EPW-VAL-ERR-SW EPW-VAL-ERR-SW ; 
    10 EPW-LN-START-SW EPW-LN-START-SW ; 
    10 EPW-LAST-PF EPW-LAST-PF ; 
    10 EPW-LAST-RL-PF EPW-LAST-RL-PF ; 
    10 EPW-MSG-NO EPW-MSG-NO ; 
    10 EPW-LN-PER-PG EPW-LN-PER-PG ; 
    10 EPW-TSSUM-IDX EPW-TSSUM-IDX ; 
    10 EPW-TSDTL-IDX EPW-TSDTL-IDX ; 
    10 EPW-TSSUM-MAX-NBR EPW-TSSUM-MAX-NBR ; 
    10 EPW-TSDTL-MAX-NBR EPW-TSDTL-MAX-NBR ; 
    10 EPW-NXT-TSQ-SUM EPW-NXT-TSQ-SUM ; 
    10 EPW-NXT-TSQ-DTL EPW-NXT-TSQ-DTL ; 
    10 EPW-LN-LEFT-TSPG EPW-LN-LEFT-TSPG ; 
    10 EPW-LN-NEED-TSPG EPW-LN-NEED-TSPG ; 
    10 ELWBUFLX ELWBUFLX ; 
    10 EPW-LST-SUMPG-IDX EPW-LST-SUMPG-IDX ; 
    10 EPW-LAST-DTL-IDX EPW-LAST-DTL-IDX ; 
    10 EPW-IDX EPW-IDX ; 
    10 EPW-WORK-IDX1 EPW-WORK-IDX1 ; 
    10 EPW-WORK-IDX2 EPW-WORK-IDX2 ; 
    10 EPW-WORK-IDX3 EPW-WORK-IDX3 ; 
    10 EPW-WORK-IDX4 EPW-WORK-IDX4 ; 
    10 EPW-WORK-IDX5 EPW-WORK-IDX5 ; 
    10 EPW-WORK-IDX6 EPW-WORK-IDX6 ; 
    10 EPW-WORK-CTR1 EPW-WORK-CTR1 ; 
    10 EPW-WORK-REMNDR EPW-WORK-REMNDR ; 
    10 VAGen_SQLCODE VAGen_SQLCODE ; 
    10 XXXMAPNM XXXMAPNM ; 
    10 XXXTITLE XXXTITLE ; 
    10 XXXRVNBR XXXRVNBR ; 
    10 XXXERRID XXXERRID ; 
      15 XXXAPPID XXXAPPID ; 
      15 XXXLOCID XXXLOCID ; 
    10 EPW-TA-LST-LOC EPW-TA-LST-LOC ; 
    10 EPW-TA-LST-MAP EPW-TA-LST-MAP ; 
    10 * char(4) ; 
    10 CAITEM CAITEM ; 
      15 EPW-CA-SEL-NBR EPW-CA-SEL-NBR ; 
      15 * char(19) ; 
    10 EPW-SUM-TSQ-ID EPW-SUM-TSQ-ID ; 
    10 EPW-DTL-TSQ-ID EPW-DTL-TSQ-ID ; 
    10 * char(1) ; 
    10 EPW-WRKDT-CCYYMMDD EPW-WRKDT-CCYYMMDD ; 
      15 EPW-WRKDT-CC EPW-WRKDT-CC ; 
      15 EPW-SHORTDT-YYMMDD EPW-SHORTDT-YYMMDD ; 
        20 EPW-WRKDT-YY EPW-WRKDT-YY ; 
        20 EPW-WRKDT-MM EPW-WRKDT-MM ; 
        20 EPW-WRKDT-DD EPW-WRKDT-DD ; 
    10 EPW-IN-DATE-MMDDYY EPW-IN-DATE-MMDDYY ; 
      15 EPW-IN-DATE-MM EPW-IN-DATE-MM ; 
      15 EPW-IN-DATE-DD EPW-IN-DATE-DD ; 
      15 EPW-IN-DATE-YY EPW-IN-DATE-YY ; 
    10 * char(62) ; 
    10 EPW-FROM-MAP-SEL EPW-FROM-MAP-SEL ; 
      15 EPW-FROM-MAP-SEL-NUM EPW-FROM-MAP-SEL-NUM ; 
    10 * char(22) ; 
    10 EP-FILLER EP-FILLER ; 
    10 EPWUSERA EPWUSERA ; 
    10 EPWMSG EPWMSG ; 
end // end EPWREC

// buffer last used line index
DataItem ELWBUFLX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// filler
DataItem EP-FILLER char(1200)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Entry found flag
DataItem EP0EW-ENTRY-FOUND-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// IO task code
DataItem EP0EW-IO-TASK char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CU_CO_ID (display characters)
DataItem EP0EW-KUCCOID char(8)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// customer number - numeric
DataItem EP0EW-KUCCOID-NUM num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CU_CO_ID (display characters)
DataItem EP0EW-KUCCOID-X1 char(1)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// CU_CO_ID (display characters)
DataItem EP0EW-KUCCOID-X2 char(1)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// CU_CO_ID (display characters)
DataItem EP0EW-KUCCOID-X3 char(1)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// CU_CO_ID (display characters)
DataItem EP0EW-KUCCOID-X4 char(1)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// CU_CO_ID (display characters)
DataItem EP0EW-KUCCOID-X5 char(1)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// CU_CO_ID (display characters)
DataItem EP0EW-KUCCOID-X6 char(1)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// CU_CO_ID (display characters)
DataItem EP0EW-KUCCOID-X7 char(1)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// CU_CO_ID (display characters)
DataItem EP0EW-KUCCOID-X8 char(1)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

DataItem EP0EW-SHARED char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of file flag
DataItem EP0EW-SRCE-EOF-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table key
DataItem EP0EW-TBL-KEY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem EP0EW-WINDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ca selection number
DataItem EPW-CA-SEL-NBR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// detail tsq id
DataItem EPW-DTL-TSQ-ID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// EOF (=y) switch
DataItem EPW-EOF-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// general error switch
DataItem EPW-ERR-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time (=y) switch
DataItem EPW-FIRST-TM-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// from map selection
DataItem EPW-FROM-MAP-SEL char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// from map selection-num
DataItem EPW-FROM-MAP-SEL-NUM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group level for epwrec
DataItem EPW-GROUP char(1778)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// special short index
DataItem EPW-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// input date (dd)
DataItem EPW-IN-DATE-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// input date (mm)
DataItem EPW-IN-DATE-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// input date (mmddyy)
DataItem EPW-IN-DATE-MMDDYY num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// input date (yy)
DataItem EPW-IN-DATE-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last used det pg line index
DataItem EPW-LAST-DTL-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last pfkey (E or 6)
DataItem EPW-LAST-PF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last rt/lft pfkey(10or11)
DataItem EPW-LAST-RL-PF char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// lines left on det tsq pg
DataItem EPW-LN-LEFT-TSPG num(2)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// lines needed on det tsq pg
DataItem EPW-LN-NEED-TSPG num(2)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// lines per page
DataItem EPW-LN-PER-PG num(2)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// line started switch (Y/N)
DataItem EPW-LN-START-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// last used sum pg line index
DataItem EPW-LST-SUMPG-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// msg no. save field
DataItem EPW-MSG-NO smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// next det tsq record no.
DataItem EPW-NXT-TSQ-DTL num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// next sum tsq record no.
DataItem EPW-NXT-TSQ-SUM num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// same key (=y) switch
DataItem EPW-SAME-KEY-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work short date (yymmdd)
DataItem EPW-SHORTDT-YYMMDD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// special exit switch
DataItem EPW-SPCL-EXIT-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// summary tsq id
DataItem EPW-SUM-TSQ-ID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TA0020 last process/sgrp
DataItem EPW-TA-LST-LOC char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TA0020 last map
DataItem EPW-TA-LST-MAP char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// det tsq rel. rec. no.
DataItem EPW-TSDTL-IDX num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// max no. of det tsq rec.s
DataItem EPW-TSDTL-MAX-NBR num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// sum tsq rel. rec. no.
DataItem EPW-TSSUM-IDX num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// max no. of sum tsq rec.s
DataItem EPW-TSSUM-MAX-NBR num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// validation error (=y) switch
DataItem EPW-VAL-ERR-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work counter
DataItem EPW-WORK-CTR1 num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// 'while' counter/index #1
DataItem EPW-WORK-IDX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 'while' counter/index #2
DataItem EPW-WORK-IDX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 'while' counter/index #3
DataItem EPW-WORK-IDX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 'while' counter/index #4
DataItem EPW-WORK-IDX4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 'while' counter/index #5
DataItem EPW-WORK-IDX5 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// 'while' counter/index #6
DataItem EPW-WORK-IDX6 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work remainder field
DataItem EPW-WORK-REMNDR num(4)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = right, fillCharacter = "0", inputRequired = no, minimumInput = 1
}
end

// work date (cc)
DataItem EPW-WRKDT-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date (ccyymmdd)
DataItem EPW-WRKDT-CCYYMMDD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date (dd)
DataItem EPW-WRKDT-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date (mm)
DataItem EPW-WRKDT-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work date (yy)
DataItem EPW-WRKDT-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem EPWMSG char(78)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SLWREC special user area
DataItem EPWUSERA char(224)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Goal spec proc variable 1
DataItem PK-SPCL-PROC-VAR1-1-2 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Goal spec proc variable 1
DataItem PK-SPCL-PROC-VAR1-3-10 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end