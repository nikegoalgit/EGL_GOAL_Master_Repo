package ep0u;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import ep.common.*;
import in1.common.*;
import op.common.*;
import pk.common.*;
import pw.common.*;
import sm.common.*;
import sp.common.*;
import ta.common.*;
import tf.common.*;
import vv.common.*;
//*** PROGRAM=EP0U ****
// ************************************************************
// 
//       RESENDING ORDERS/POS/ASNS TO DCMS MAIN MENU
//       ===========================================
// 
// ************************************************************
// 
// OVERVIEW: This application displays a menu (or use PFkeys)
//           to choose the desired applications which support
//           the QMF-DCMS WMS package.
// 
// 
// MAINTENANCE HISTORY
// ===================
// RVN
// NBR   DATE     BY WHOM    OVERVIEW OF CHANGES:
// --- --------  ----------  ----------------------------------
// 00  11/06/00  svenka      created - TT#8760
// 01  02/14/01  VDASAR      Changed the record layout VMPOLC01
//                           dcms-userid chng from 06 to 08.
// 
// 
// STATEMENT GROUPS
// ================
// 
// NAME      DESCRIPTION
// -------   --------------------------------------------------
// 
// ep0u010 - converse menu map
// -------
// 
// 
// ep0m020 - converse
// -------
// 
// ep0u032 - check job execution
// -------
// 
// I/O Modules
// ===========
// VMPOLC01- created new
// 
// 
// Table View Names
// ================
// VMPOLH01
// VMPOLC01
// ************************************************************
// ************************************************************
// *********************
Program EP0U type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "EP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  EP0UXW1 EP0UXW1; // record
  EP0UXW2 EP0UXW2; // record
  EPWREC EPWREC; // record
  PWHREC PWHREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA3REC TA3REC; // record
  TA5REC TA5REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  VMPOLC01 VMPOLC01; // record
  VMPOLH01 VMPOLH01; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use EP0UT01 {deleteAfterUse = yes}; // table
  use EP0UT02 {deleteAfterUse = yes}; // table
  use EP0UM.EP0UM010,  // forms
      EP0UM.EP0UM020, 
      EP0UM.EP0UM030, 
      EP0UM.EP0UM040, 
      EP0UM.TA0PM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    EP0U010: EP0U010();

     /* ************************************************************/
     /* *** normal flow                                         ****/
     /* ************************************************************/

    goto EP0U020; /* <=== display menu screen*/

     /* ************************************************************/
     /* *** end of EXECUTE FLOW section                         ****/
     /* ************************************************************/

    EP0U020: EP0U020();

     /* ****************************************************************/
     /* *** IF OPTION 01 IS SELECTED THEN PERFORM EP0U030 TO VALIDATE**/
     /* ****************************************************************/

    if (EP0UXW1.EP0UBTCHSUB == "N") /* Flag to display*/
                                    /* job submitted/not sub*/
      EP0UXW1.EP0UBTCHSUB = "Y";
      goto EP0U020; /* message*/
    end

    if (EP0UXW1.EP0UCONFMJB == "N") /* Flag to confirm job submission*/
      goto EP0U020; /* message*/
    end

    if (EP0UXW1.EP0UFLAG == "Y") /* Flag to check if seltn is valid*/
      goto EP0U030;
    end

    if (EP0UM010.EP0UMSNO == "2") /* Flag to check if seltn is valid*/

      goto EP0U040;
    end

    if (EP0UM010.EP0UMSNO == "3") /* Flag to check if seltn is valid;*/
      goto EP0U050;
    end

    EP0UXW1.XXXMODID = "02F";

     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2)
      goto EP0U010; /* <=== re-start this function*/
    end

     /* ************************************************************/
     /* *** if error: (re-)display the screen                   ****/
     /* ************************************************************/

    if (EP0UXW1.EP0UWERS == "Y")
      goto EP0U020; /* <=== re-display this screen*/
    end

     /* ************************************************************/
     /* *** fall thru error - code shouldn't be executed        ****/
     /* ************************************************************/

    EP0UXW1.EP0UWERS = "Y";
    EP0UXW1.XXXUNQID = "A";
    converseLib.validationFailed(0001); /* <--- fall thru error msg*/
    goto EP0U020; /* <=== display order screen*/

     /* ************************************************************/
     /* *** end of CONVERSE FLOW section                        ****/
     /* ************************************************************/

    EP0U030: EP0U030();
     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2) /* if PA2 is pressed*/

      /* *************************************************************/
      /* ***************Clear the screen******************************/
      /* *************************************************************/

      EP0UM020.PK-ORD-STKTF-ID = 0;
      EP0UM020.PK-NIKE-ORD-ID = 0;
      EP0UM020.PK-NBR-TIMES-ALOC = 0;
      EP0UM020.EP0USEL = " ";

      goto EP0U030; /* display map*/
    end

    if (EP0UXW1.EP0UUPDTFL == "N") /* msg for update*/
      set EP0UM020.PK-ORD-STKTF-ID initialAttributes;
      set EP0UM020.PK-NIKE-ORD-ID initialAttributes;
      set EP0UM020.PK-NBR-TIMES-ALOC initialAttributes;
      set EP0UM020.EP0USEL initialAttributes;
      goto EP0U030; /* display map*/
    end

    if (EP0UXW1.EP0UORDERR == "N") /* msg for error ord stat flag*/
      set EP0UM020.PK-ORD-STKTF-ID initialAttributes;
      set EP0UM020.PK-NIKE-ORD-ID initialAttributes;
      set EP0UM020.PK-NBR-TIMES-ALOC initialAttributes;
      set EP0UM020.EP0USEL initialAttributes;
      goto EP0U030; /* display map*/
    end

    if (EP0UXW1.EP0USELNAC == "N") /* selection is invalid*/
      goto EP0U030; /* display map*/
    end

    if (EP0UXW1.EP0URECNFD == "N") /* if record not found*/
      set EP0UM020.PK-ORD-STKTF-ID initialAttributes;
      set EP0UM020.PK-NIKE-ORD-ID initialAttributes;
      set EP0UM020.PK-NBR-TIMES-ALOC initialAttributes;
      set EP0UM020.EP0USEL initialAttributes;
      goto EP0U030; /* display map*/
    end

    if (EP0UXW1.EP0UCONFUP == "N") /* msg to conf upd*/
      goto EP0U030; /* display map*/
    end

    if (EP0UXW1.EP0UWERS == "Y")
      goto EP0U030; /* <=== re-display this screen*/
    end

      /* ************************************************************/
      /* *** fall thru error - code shouldn't be executed        ****/
      /* ************************************************************/

    EP0UXW1.EP0UWERS = "Y";
    EP0UXW1.XXXUNQID = "A";
    converseLib.validationFailed(0001); /* <--- fall thru error msg*/
    goto EP0U030; /* <=== display the screen*/
    EP0U040: EP0U040();
     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2) /* if PA2 is pressed*/

      goto EP0U040; /* display map*/
    end

    if (EP0UXW1.EP0UWERS == "N")
      goto EP0U040; /* display map*/
    end

      /* ************************************************************/
      /* *** fall thru error - code shouldn't be executed        ****/
      /* ************************************************************/

    goto EP0U040; /* <=== display the screen*/

    EP0U050: EP0U050();
     /* ************************************************************/
     /* *** if one of these PF keys: go to related process      ****/
     /* ************************************************************/

    if (converseVar.eventKey is pa2) /* if PA2 is pressed*/

      goto EP0U050; /* display map*/
    end

    if (EP0UXW1.EP0UWERS == "N")
      goto EP0U050; /* display map*/
    end

      /* ************************************************************/
      /* *** fall thru error - code shouldn't be executed        ****/
      /* ************************************************************/

    goto EP0U050; /* <=== display the screen*/

  end // end main
end // end EP0U

// Build JCL for Prod submit
Function EP0U-PJOBSUB()
   /* -------------------------------------------------------------*/
   /* BUILD JCL FOR BACKGROUND JOB TO CREATE job to run in PROD*/
   /* -------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Til end of table*/

    /* ------------------------------------------------------------*/
    /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/

    TA6REC.TARJCL[TA6INDEX] = EP0UT01.TARJCL[TA6INDEX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = EP0UT01.TARTYPE[TA6INDEX]; /* Type*/

    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (EP0UT01.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  EPWREC.XXXLOCID = "51000"; /* Msg loc*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(401); /* Batch job was submitted*/

    return; /* Return*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(01); /* Unexpected error occurred*/

    return; /* Exit to display map*/

  end

end // end EP0U-PJOBSUB

// Build JCL for Test submit
Function EP0U-TJOBSUB()
   /* -------------------------------------------------------------*/
   /* BUILD JCL FOR BACKGROUND JOB TO CREATE jcl to run in TEST*/
   /* -------------------------------------------------------------*/

   /* ------------------------------------------------------------*/
   /* Initialize the work area and index to be used.*/
   /* ------------------------------------------------------------*/

  move " " to TA6REC.TA6ROW[1] for all; /* Clear JCL array rows*/

  TA6REC.TA6INDEX = 1; /* Initialize index*/

   /* ------------------------------------------------------------*/
   /* Format JCL and parameters into the subroutine work area.*/
   /* ------------------------------------------------------------*/

  while (TA6REC.TA6INDEX > 0) /* Til end of table*/

    /* ------------------------------------------------------------*/
    /* Format the Job Control Language statement from the table.*/
    /* ------------------------------------------------------------*/

    TA6REC.TARJCL[TA6INDEX] = EP0UT02.TARJCL[TA6INDEX]; /* JCL*/
    TA6REC.TARTYPE[TA6INDEX] = EP0UT02.TARTYPE[TA6INDEX]; /* Type*/

    /* ------------------------------------------------------------*/
    /* If not end of table, increment the table index.*/
    /* ------------------------------------------------------------*/

    if (EP0UT02.TARJCL[TA6INDEX] == "/*EOF") /* End of table*/

      TA6REC.TA6INDEX = 0; /* Indicate end of table*/
    else
      TA6REC.TA6INDEX = TA6REC.TA6INDEX + 1; /* Increment index*/

    end

  end

   /* ------------------------------------------------------------*/
   /* Submit the JCL and parameters for background execution.*/
   /* ------------------------------------------------------------*/

  TA6REC.TA6SUBSW = "S"; /* Tailor and submit the JCL*/
  TA6REC.TA6MSGSW = "Y"; /* EOJ online message switch*/

  XPTA0P(); /* Submit JCL for background job*/

   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  EPWREC.XXXLOCID = "51000"; /* Msg loc*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/

    converseLib.validationFailed(401); /* Batch job was submitted*/

    return; /* Return*/

  end

   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/

    converseLib.validationFailed(01); /* Unexpected error occurred*/

    return; /* Exit to display map*/

  end

end // end EP0U-TJOBSUB

// ep0u010 - init. for ep0u020
Function EP0U010()

   /* ************************************************************/
   /* *** maintenance information:                            ****/
   /* *** =======================                             ****/
   /* *** rvsn   date    update by:    description:           ****/
   /* *** ---- --------  ------------  ---------------------- ****/
   /* ***  00  11/12/00  SVENKA        created                ****/
   /* ***                                                     ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** standard security checking                          ****/
   /* ************************************************************/

  XSENTRY();

   /* ************************************************************/
   /* *** standard segmented trans id setting                 ****/
   /* ************************************************************/

  XSSEGTR();

   /* ************************************************************/
   /* *** initialize map, working storage & std switches      ****/
   /* ************************************************************/

  set EP0UM010 empty;
  set EP0UM020 empty;
  set EP0UXW1 empty;
  set EPWREC empty;
  set SQLCA empty;
  set TA1REC empty;
  set TA5REC empty;
  set TAEREC empty;
  set VMPOLH01 empty;
  set VMPOLC01 empty;
  set PWHREC empty;

  EP0UXW1.EP0UBTCHSUB = "Y";
  EP0UXW1.EP0UCONFMJB = "Y";
  EP0UXW1.EP0UORDERR = "Y";
  EP0UXW1.EP0UKEYCHK = "Y";
  EP0UXW1.EP0UCONFUP = "Y";
  EP0UXW1.EP0UINSRT = "Y";
  EP0UM010.XXXCURDT = VGVar.currentShortGregorianDate;
  EP0UXW1.EP0UWERS = "N";

  EP0UXW1.XXXAPPID = "EP0U";
  EP0UXW1.XXXMODID = "010";
  EP0UXW1.XXXRVNBR = "01";

   /* ************************************************************/
   /* *** check commarea fast path item to see if it should   ****/
   /* *** be used to setup working storage &/or map fields    ****/
   /* ************************************************************/

  if (COMMAREA.CAITEM > " ")
    EP0USY0(); /* <=== use commarea item*/
    EP0UXW1.XXXMODID = "010";
    COMMAREA.CAITEM = " ";
  end

   /* ************************************************************/
   /* *** if no selection from commarea: ezeflo immediately   ****/
   /* ************************************************************/

  if (EP0UM010.EP0UMSNO > " ")
    /* EP0US0A;                        /* <=== right justify single digit*/
  else
    exit stack;
  end

   /* ************************************************************/
   /* *** end of EXECUTE section                              ****/
   /* ************************************************************/

end // end EP0U010

// ep0m020 - converse & edits
Function EP0U020()

   /* ********To converse the Order screen acc. to the menu selctn******/

  converse EP0UM010 ;

  if (EP0UM010.EP0UMSNO == "4") /* If option is 4*/
    if (EP0UXW1.EP0UCONFMJB == "N") /* job submission is confirmed*/
      if (converseVar.eventKey is pf5) /* by pressing PF5*/
        EP0UXW1.EP0UCONFMJB = "Y"; /* job confirmation flag re-set*/

        /* Determine processing environment for the Job*/

        if (COMMAREA.XCTH-THEATER-RUNTYPE == "TEST")
          EP0U-TJOBSUB(); /* Format and submit test JCL using*/
                                   /* XPTAOP*/
        else
          EP0U-PJOBSUB(); /* Format and submit test JCL using*/
                                   /* XPTAOP*/
        end

        converseLib.validationFailed(0494); /* <--- MSG TO DISP JOB SUBMISSION*/
        EP0UM010.EP0UMSNO = " ";
        EP0UXW1.EP0UBTCHSUB = "N";

        exit stack;
      end
    end
  end

  EP0UXW1.XXXMODID = "020";

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (EP0UM010.CATOAP > " ")
    COMMAREA.CATOAP = EP0UM010.CATOAP;
    COMMAREA.CAITEM = EP0UM010.CAITEM;
    COMMAREA.CAUSERA = EPWREC.EPW-GROUP;
    XSEXIT();
    EP0UXW1.EP0UWERS = "Y";
    EP0UXW1.XXXUNQID = "A";
    /* MOVE EP0UXW1.XXXERRID TO EP0UM010.XXXERRID;*/
    EP0UM010.VAGen_EZEMSG = COMMAREA.CAMSG;
    set EP0UM010.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** reset error switch, std fields & cursor position    ****/
   /* ************************************************************/

  EP0UXW1.EP0UWERS = "N";
  EP0UM010.VAGen_EZEMSG = " ";
  set EP0UM010.CATOAP initialAttributes;
  set EP0UM010.CAITEM initialAttributes;
  set EP0UM010.EP0UMSNO cursor;

   /* ************************************************************/
   /* *** reset appl. input fld attr.s as orig.ly defined     ****/
   /* ************************************************************/

  set EP0UM010.EP0UMSNO initialAttributes;

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (EP0UM010.CAITEM > " ")
    EP0UXW1.EP0UWERS = "Y";
    EP0UXW1.XXXUNQID = "B";
    converseLib.validationFailed(0002); /* <--- option required msg*/
    set EP0UM010.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if ENTER: do edits & process                        ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    EP0UXW1.XXXMODID = "020";
      /*  */
    if (EP0UM010.EP0UMSNO == "1"
    ) /* check for other msno later*/
      if (EP0UM010.EP0UMSNO == "1") /* <--- If option 1 is selected*/
        EP0UM020.XXXCURDT = VGVar.currentShortGregorianDate;
        EP0UM020.EPTXTHDR = "RE-SENDING ORDER TO DCMS";
        EP0UM020.EPTXTPAS = "ORDER NUMBER:";
        EP0UXW1.EP0UFLAG = "Y";
        EP0UXW1.EP0UCONFMJB = "Y";
      end
      exit stack;
    else
      if (EP0UM010.EP0UMSNO == "2") /* <--- If option 2 is selected*/
        EP0US-PO-INITIATE();
  /*      MOVE 'Y' TO EP0UXW1.EP0UWERS;*/
  /*      MOVE 0087 TO EZEMNO;       /* <--- Not available now*/
        exit stack;
      end
      if (EP0UM010.EP0UMSNO == "3") /* <--- If option 3 is selected*/
        EP0US-ASN-INITIATE();
  /*      MOVE 'Y' TO EP0UXW1.EP0UWERS;*/
  /*      MOVE 0087 TO EZEMNO;       /* <--- Not available now*/
        exit stack;
      end
      if (EP0UM010.EP0UMSNO == "4") /* <--- If option 4 is selected*/
        EP0UXW1.EP0UWERS = "Y";
        converseLib.validationFailed(0493); /* <--- Press p5 to submit job*/
        EP0UXW1.EP0UCONFMJB = "N"; /* job confirmation flag set*/
        exit stack;
      end
    end

    EP0UXW1.EP0UWERS = "Y";
    EP0UXW1.XXXUNQID = "D";
    converseLib.validationFailed(0492); /* <--- invalid selection passed msg*/
    exit stack;
  end

   /* ************************************************************/
   /* *** flow decisions based on pfkey pressed               ****/
   /* ************************************************************/
   /*  */
   /* ************************************************************/
   /* *** if PF3: go to previous logical level = DCMS MTR MENU****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "EP0M";
    COMMAREA.CAUSERA = EPWREC.EPW-GROUP;
    XSEXIT();
    EP0UXW1.EP0UWERS = "Y";
    EP0UXW1.XXXUNQID = "E";
    EP0UM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    EP0UXW1.EP0UWERS = "Y";
    EP0UXW1.XXXUNQID = "F";
    EP0UM010.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack; /* flow bak to the screen*/
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  EP0UXW1.EP0UWERS = "Y";
  EP0UXW1.XXXUNQID = "T";
  converseLib.validationFailed(0004); /* <--- invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/

end // end EP0U020

// ep0um030 - converse & edit
Function EP0U030()

   /* *********************************************************/
   /* ******To converse the Order screen***********************/
   /* *********************************************************/

  converse EP0UM020 ;

  EP0UXW1.EP0UWERS = "N"; /* to initialize the flag again*/
  COMMAREA.CAUSERA = EPWREC.EPW-GROUP;
  COMMAREA.CAFROMAP = "EP0U";

  if (EP0UXW1.EP0UCONFUP == "N") /* flag set when upd is confmed*/
    if (EP0UM020.EP0USEL == "A") /* when option selectd is 'A'*/
      if (converseVar.eventKey is pf5)
        if (VMPOLH01.DCMS-ORD-STAT-CD == "A"
         && VMPOLH01.DCMS-ORD-CHANGE-FL == "N")
          VMPOLH01.DCMS-ORD-STAT-CD = " ";

          /* ***************************************************************/
          /* **PERFORM EP0U032 TO CHECK JOB RUNNING*************************/
          /* ***************************************************************/

          EP0UXW1.EP0UJOBFLG = "Y";

          EP0US032();

          if (EP0UXW1.EP0UJOBFLG == "N") /* when job is under execution*/
            converseLib.validationFailed(477); /* Throw error msg*/
            /* *********************************************************/
            /* ***********to clear the screen*****************/
            /* *********************************************************/
            EP0UM020.PK-ORD-STKTF-ID = 0;
            EP0UM020.PK-NIKE-ORD-ID = 0;
            EP0UM020.PK-NBR-TIMES-ALOC = 0;
            EP0UM020.EP0USEL = " ";

            EP0UXW1.EP0USELNAC = "N";
            exit stack; /* to flow back to screen*/
          end
          /* ***************************************************************/
          /* **PERFORM EP0U032-VMPOLH01 to update the table*****************/
          /* ***************************************************************/

          EP0US032-U();

          if (EP0UXW1.EP0UUPDTFL == "N") /* flag set when upd is success*/

            converseLib.validationFailed(480); /* throw msg that upd was success*/
            set EP0UM020.PK-ORD-STKTF-ID cursor;

            /* ************************************************/
            /* *****to clear the screen *********************/
            /* ************************************************/

            EP0UM020.PK-ORD-STKTF-ID = 0;
            EP0UM020.PK-NIKE-ORD-ID = 0;
            EP0UM020.PK-NBR-TIMES-ALOC = 0;
            EP0UM020.EP0USEL = " ";

            EP0UXW1.EP0USELNAC = "N";
            exit stack; /* Exit to map*/
          end

        else

          EP0UXW1.EP0UORDERR = "N"; /* if order status flg <> A*/

          if (VMPOLH01.DCMS-ORD-STAT-CD == "V") /* order voided*/
            converseLib.validationFailed(0486); /* error msg*/
            exit stack; /* Exit to map*/
          end

          if (VMPOLH01.DCMS-ORD-STAT-CD == "D") /* order de-alocated*/
            converseLib.validationFailed(0485); /* error msg*/
            exit stack; /* Exit to map*/
          end

          if (VMPOLH01.DCMS-ORD-STAT-CD == "H") /* order shipped*/
            converseLib.validationFailed(0484); /* error msg*/
            exit stack; /* Exit to map*/
          end

          if (VMPOLH01.DCMS-ORD-STAT-CD == "P") /* order pack and hold*/
            converseLib.validationFailed(0483); /* error msg*/
            exit stack; /* Exit to map*/
          end

          if (VMPOLH01.DCMS-ORD-STAT-CD == "R") /* order is released*/
            converseLib.validationFailed(0482); /* error msg*/
            exit stack; /* Exit to map*/
          end

          if (VMPOLH01.DCMS-ORD-STAT-CD == "S") /* order is shipped*/
            converseLib.validationFailed(0481); /* error msg*/
            exit stack; /* Exit to map*/
          end

          if (VMPOLH01.DCMS-ORD-STAT-CD == " ") /* order has already been sent*/

            /* ********************************************************/
            /* *****to clear the screen *********************/
            /* ********************************************************/

            EP0UM020.PK-ORD-STKTF-ID = 0;
            EP0UM020.PK-NIKE-ORD-ID = 0;
            EP0UM020.PK-NBR-TIMES-ALOC = 0;
            EP0UM020.EP0USEL = " ";
            converseLib.validationFailed(0487);

            exit stack; /* Exit to map*/
          end

          if (VMPOLH01.DCMS-ORD-CHANGE-FL == "Y") /* order resent*/
            converseLib.validationFailed(0490); /* throw msg*/
            exit stack; /* Exit to map*/
          end

        end

      end

    else
      if (EP0UM020.EP0USEL == "C") /* if the selection is 'change'*/

        if (converseVar.eventKey is pf5)

          if (VMPOLH01.DCMS-ORD-STAT-CD == "A"
           && VMPOLH01.DCMS-ORD-CHANGE-FL == "N")
            VMPOLH01.DCMS-ORD-CHANGE-FL = "Y";

            /* ***************************************************/
            /* **PERFORM EP0U032 TO CHECK JOB RUNNING*************/
            /* ***************************************************/

            EP0UXW1.EP0UJOBFLG = "Y";

            EP0US032();

            if (EP0UXW1.EP0UJOBFLG == "N")

              /* ********************************************************/
              /* *****to clear the screen *********************/
              /* ********************************************************/

              converseLib.validationFailed(477);
              EP0UM020.PK-ORD-STKTF-ID = 0;
              EP0UM020.PK-NIKE-ORD-ID = 0;
              EP0UM020.PK-NBR-TIMES-ALOC = 0;
              EP0UM020.EP0USEL = " ";

              EP0UXW1.EP0USELNAC = "N";
              exit stack;
            end

            /* ***********************************************************/
            /* *****To perform EP0U032-VMPOLH01-U to update***************/
            /* ***********************************************************/

            EP0US032-U();

            if (EP0UXW1.EP0UUPDTFL == "N") /* if update was success*/
              converseLib.validationFailed(488); /* throw message*/

              /* ********************************************************/
              /* *****to clear the screen *********************/
              /* ********************************************************/

              EP0UM020.PK-ORD-STKTF-ID = 0;
              EP0UM020.PK-NIKE-ORD-ID = 0;
              EP0UM020.PK-NBR-TIMES-ALOC = 0;
              EP0UM020.EP0USEL = " ";
              EP0UXW1.EP0USELNAC = "N";

              exit stack; /* Exit to map*/

            end

          else

            EP0UXW1.EP0UORDERR = "N";

            if (VMPOLH01.DCMS-ORD-STAT-CD == "V") /* order voided*/
              converseLib.validationFailed(0486); /* throw message*/
              exit stack; /* Exit to map*/
            end

            if (VMPOLH01.DCMS-ORD-STAT-CD == "D") /* order de-allocated*/
              converseLib.validationFailed(0485); /* throw msg*/
              exit stack; /* Exit to map*/
            end

            if (VMPOLH01.DCMS-ORD-STAT-CD == "H") /* order shipped*/
              converseLib.validationFailed(0484); /* throw msg*/
              exit stack; /* Exit to map*/
            end

            if (VMPOLH01.DCMS-ORD-STAT-CD == "P") /* order pack and hold*/
              converseLib.validationFailed(0483); /* throw msg*/
              exit stack; /* Exit to map*/
            end

            if (VMPOLH01.DCMS-ORD-STAT-CD == "R") /* order released*/
              converseLib.validationFailed(0482); /* throw msg*/
              exit stack; /* Exit to map*/
            end

            if (VMPOLH01.DCMS-ORD-STAT-CD == "S") /* order shipped*/
              converseLib.validationFailed(0481); /* throw msg*/
              exit stack; /* Exit to map*/
            end

            if (VMPOLH01.DCMS-ORD-STAT-CD == " ") /* order already resent*/
              converseLib.validationFailed(0487); /* throw msg*/
              exit stack; /* Exit to map*/
            end

            if (VMPOLH01.DCMS-ORD-CHANGE-FL == "Y") /* order resent*/
              converseLib.validationFailed(0489); /* throw msg*/
              exit stack; /* Exit to map*/
            end

          end

        end

      end

    end

  end

  EP0UXW1.XXXMODID = "020";

  set EP0UM020.EP0USEL initialAttributes;

   /* ************************************************************/
   /* *** if ENTER: do process                                ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)

    EP0UXW1.EP0USELNAC = "Y"; /* flag is re-set*/
    EP0UXW1.EP0URECNFD = "Y"; /* flag is re-set*/

    /* **********************************************************/
    /* **********To validate the orderno,sub no,alloc num********/
    /* **********************************************************/

    if (EP0UM020.PK-ORD-STKTF-ID == 0) /* if order no.is not entered*/
      converseLib.validationFailed(322); /* throw msg*/
      set EP0UM020.PK-ORD-STKTF-ID cursor, bold;
      EP0UXW1.EP0USELNAC = "N";
      exit stack;
    end

    if (EP0UM020.PK-NIKE-ORD-ID == 0) /* if sub-num not entered*/
      converseLib.validationFailed(323); /* throw msg*/
      set EP0UM020.PK-NIKE-ORD-ID cursor, bold;
      EP0UXW1.EP0USELNAC = "N";
      exit stack;
    end

    if (EP0UM020.PK-NBR-TIMES-ALOC == 0) /* if no.of tim alloc is not entered*/
      converseLib.validationFailed(324); /* throw msg*/
      set EP0UM020.PK-NBR-TIMES-ALOC cursor, bold;
      EP0UXW1.EP0USELNAC = "N";
      exit stack;
    end

    if (EP0UM020.EP0USEL != "A" && 
    EP0UM020.EP0USEL != "C")

      converseLib.validationFailed(0491);
      set EP0UM020.EP0USEL cursor, bold;
      EP0UXW1.EP0USELNAC = "N";
      exit stack;
    end

  end

  if (EP0UXW1.EP0USELNAC == "Y")

    EP0UXW1.XWH-WHSE-CD = "51"; /* set keys*/
    EP0UXW1.PK-ORD-STKTF-ID = EP0UM020.PK-ORD-STKTF-ID;
    EP0UXW1.PK-NIKE-ORD-ID = EP0UM020.PK-NIKE-ORD-ID;
    EP0UXW1.PK-NBR-TIMES-ALOC = EP0UM020.PK-NBR-TIMES-ALOC;

    VMPOLH01.XWH-WHSE-CD = EP0UXW1.XWH-WHSE-CD; /* set keys*/
    VMPOLH01.PK-ORD-STKTF-ID = EP0UXW1.PK-ORD-STKTF-ID;
    VMPOLH01.PK-NIKE-ORD-ID = EP0UXW1.PK-NIKE-ORD-ID;
    VMPOLH01.PK-NBR-TIMES-ALOC = EP0UXW1.PK-NBR-TIMES-ALOC;

    /* ***************************************************************/
    /* *******To validate if the valid entered values are in DB*******/
    /* ***************************************************************/

    EP0US032-S();

    if (EP0UXW1.EP0URECNFD == "N") /* if record not found*/
      exit stack; /* throw error msg*/
    end

  end
   /* ------------------------------------------------------------*/
   /* If PA2 was pressed, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    exit stack; /* Exit to display the map*/
  end

  if (converseVar.eventKey is pf4) /* PF4 was pressed*/
    COMMAREA.CATOAP = "EP0M"; /* Master Menu-dcms func main menu*/
    XSPF4();
    EP0UXW1.EP0UWERS = "Y";
    EP0UXW1.XXXUNQID = "W";
    EP0UM020.VAGen_EZEMSG = CAMSG;
    exit stack; /* exit to map*/
  end

   /* ------------------------------------------------------------*/
   /* Set the application to be invoked for SR defined keys.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    COMMAREA.CATOAP = "EP0U"; /* Resending orders main menu*/
    COMMAREA.CAUSERA = EPWREC.EPW-GROUP;
    XSEXIT();
    EP0UXW1.EP0UWERS = "Y";
    EP0UXW1.XXXUNQID = "V";
    EP0UM020.VAGen_EZEMSG = CAMSG;
    exit stack; /* exit to map*/
  end
   /* ************************************************************/
    /* *** if this code is executed (control drops thru),      ****/
    /* *** then use invalid pfkey was pressed msg              ****/
    /* ************************************************************/
    /* *** if this code is executed (control drops thru),      ****/
    /* *** then use invalid pfkey was pressed msg              ****/
    /* ************************************************************/

  EP0UXW1.EP0UWERS = "Y";
  EP0UXW1.XXXUNQID = "X";
  converseLib.validationFailed(0004); /* <--- invalid pfkey msg*/
  exit stack;
   /* ------------------------------------------------------------*/
    /* If TO application was not set, indicate invalid PA/PF key.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOAP == " ") /* TO application blank*/
    converseLib.validationFailed(0012); /* (PA/PF) key pressed is invalid*/
    exit stack; /* Return to previous process*/
  end
   /*  */
   /* ------------------------------------------------------------*/
    /* Save the application user area in the COMMAREA.*/
   /* ------------------------------------------------------------*/

  if (COMMAREA.CATOSYS == COMMAREA.CACURSYS) /* Same system*/

    COMMAREA.CAUSERA = EPWREC.EPWUSERA; /* Save user area*/
  else
    COMMAREA.CAUSERA = " "; /* Clear user area*/

  end

   /* ------------------------------------------------------------*/
    /* Transfer control to the specified application.*/
   /* ------------------------------------------------------------*/

  XSEXIT(); /* Exit to another application*/

   /* ****************************************************************/
   /* ************end of statement group******************************/
   /* ****************************************************************/

end // end EP0U030

Function EP0U040()

   /* ************************************************************/
   /* *** initialize map, working storage & std switches      ****/
   /* ************************************************************/
  EP0UM030.XXXERRID = EP0UXW1.XXXERRID;

  converse EP0UM030 ;

  EP0UXW1.EP0UWERS = "N";

  set EP0UM030.PONUM initialAttributes;
  set EP0UM030.RSPOTYP initialAttributes;
  EP0UM030.POTYPE = " ";
  EP0UM030.POSTAT = " ";

  EP0UM030.HDUPCNT = 0;
  EP0UM030.ITUPCNT = 0;

   /* ************************************************************/
   /* *** if PF3: go to previous logical level = DCMS MTR MENU****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "EP0U";
    XSEXIT();
    EP0UXW1.EP0UWERS = "Y";
    EP0UXW1.XXXMODID = "40A";
    EP0UM030.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    EP0UXW1.EP0UWERS = "Y";
    EP0UXW1.XXXMODID = "40B";
    EP0UM030.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack; /* flow bak to the screen*/
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (EP0UM030.CATOAP > " ")
    COMMAREA.CATOAP = EP0UM030.CATOAP;
    COMMAREA.CAITEM = EP0UM030.CAITEM;
    COMMAREA.CAUSERA = EPWREC.EPW-GROUP;
    XSEXIT();
    EP0UXW1.EP0UWERS = "Y";
    EP0UXW1.XXXMODID = "40C";
    EP0UM030.VAGen_EZEMSG = COMMAREA.CAMSG;
    set EP0UM030.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (EP0UM030.CAITEM > " ")
    EP0UXW1.EP0UWERS = "Y";
    EP0UXW1.XXXMODID = "40D";
    converseLib.validationFailed(0259); /* <--- option required msg*/
    set EP0UM030.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if Enter - retrive the PO status  ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    EP0US-GET-PO();
    exit stack;
  end

   /* ************************************************************/
   /* *** if pf5 - set the PO for resend****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    EP0US-RESET-PO();
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  EP0UXW1.EP0UWERS = "Y";
  EP0UXW1.XXXMODID = "40E";
  converseLib.validationFailed(0004); /* <--- invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/

end // end EP0U040

Function EP0U050()

   /* ************************************************************/
   /* *** initialize map, working storage & std switches      ****/
   /* ************************************************************/
  EP0UM040.XXXERRID = EP0UXW1.XXXERRID;

  converse EP0UM040 ;

  EP0UXW1.EP0UWERS = "N";

  set EP0UM040.ASNNUM initialAttributes;
  set EP0UM040.RSASNTYP initialAttributes;
  EP0UM040.ASNTYPE = " ";
  EP0UM040.ASNSTAT = " ";

  EP0UM040.HDUPCNT = 0;
  EP0UM040.ITUPCNT = 0;

   /* ************************************************************/
   /* *** if PF3: go to previous logical level = DCMS MTR MENU****/
   /* ************************************************************/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "EP0U";
    XSEXIT();
    EP0UXW1.EP0UWERS = "Y";
    EP0UXW1.XXXMODID = "50A";
    EP0UM040.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if PF4: go to system main menu                      ****/
   /* ************************************************************/

  if (converseVar.eventKey is pf4)
    XSPF4();
    EP0UXW1.EP0UWERS = "Y";
    EP0UXW1.XXXMODID = "50B";
    EP0UM040.VAGen_EZEMSG = CAMSG;
    exit stack;
  end

   /* ************************************************************/
   /* *** if pa2: regardless of status - restart application  ****/
   /* ************************************************************/

  if (converseVar.eventKey is pa2)
    exit stack; /* flow bak to the screen*/
  end

   /* ************************************************************/
   /* *** if fast path entered: exit immeditately             ****/
   /* ************************************************************/

  if (EP0UM040.CATOAP > " ")
    COMMAREA.CATOAP = EP0UM040.CATOAP;
    COMMAREA.CAITEM = EP0UM040.CAITEM;
    COMMAREA.CAUSERA = EPWREC.EPW-GROUP;
    XSEXIT();
    EP0UXW1.EP0UWERS = "Y";
    EP0UXW1.XXXMODID = "50C";
    EP0UM040.VAGen_EZEMSG = COMMAREA.CAMSG;
    set EP0UM040.CATOAP cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if item data entered: error (option not entered)    ****/
   /* ************************************************************/

  if (EP0UM040.CAITEM > " ")
    EP0UXW1.EP0UWERS = "Y";
    EP0UXW1.XXXMODID = "50D";
    converseLib.validationFailed(0259); /* <--- option required msg*/
    set EP0UM040.CAITEM cursor, bold;
    exit stack;
  end

   /* ************************************************************/
   /* *** if Enter - retrive the ASN status  ****/
   /* ************************************************************/

  if (converseVar.eventKey is enter)
    EP0US-GET-ASN();
    exit stack;
  end

   /* ************************************************************/
   /* *** if pf5 - set the ASN for resend****/
   /* ************************************************************/

  if (converseVar.eventKey is pf5)
    EP0US-RESET-ASN();
    exit stack;
  end

   /* ************************************************************/
   /* *** if this code is executed (control drops thru),      ****/
   /* *** then use invalid pfkey was pressed msg              ****/
   /* ************************************************************/

  EP0UXW1.EP0UWERS = "Y";
  EP0UXW1.XXXMODID = "50E";
  converseLib.validationFailed(0004); /* <--- invalid pfkey msg*/

   /* ************************************************************/
   /* *** end of CONVERSE AFTER section                       ****/
   /* ************************************************************/

end // end EP0U050

Function EP0US-ASN-INITIATE()

  set EP0UM040 empty;
  set EP0UXW2 empty;
  set SQLCA empty;
  set TA1REC empty;
  set TA5REC empty;
  set TAEREC empty;

  EP0UM040.XXXCURDT = VGVar.currentShortGregorianDate;
  EP0UXW1.XXXAPPID = "EP0U"; /* error id appl. name*/
  EP0UXW1.XXXMODID = "SIN"; /* error location*/
  EP0UXW1.EP0UWERS = "N";

  set EP0UM040.ASNNUM cursor;

  EP0UM040.HDUPCNT = 0;
  EP0UM040.ITUPCNT = 0;

end // end EP0US-ASN-INITIATE

Function EP0US-ASN-STAT()

   /* **************************************************************/
   /* ****to select ASN record from VRCAHD01*********/
   /* **************************************************************/

  set SQLCA empty;

  EP0UXW2.EP0UW-EP9350-FUNCT-CD = 3;
  EP0UXW2.EP0UW-EP9350-ASN-NBR = EP0UM040.ASNNUM;

   /* ------------------------------------------------------------*/
   /* Select the unique row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "EP9350" (SQLCA, EP0UXW2) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      EP0UXW1.EP0UWERS = "Y";
      EP0UXW1.XXXMODID = "AS1";
      converseLib.validationFailed(208); /* ASN not found*/
      set EP0UM040.ASNNUM cursor, bold;
      return; /* Return to previous process*/

    else

      if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

        set EP0UM040.RSASNTYP cursor;
        return; /* Return to previous process*/

      end

    end

  end

  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)

    /* ------------------------------------------------------------*/
    /* If data not available, return an error message to the user.*/
    /* Otherwise, indicate that an unexpected error has occurred.*/
    /* ------------------------------------------------------------*/

    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

    if (sysVar.errorCode == "00000000" && 
    SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(31); /* Data in use*/
    else
      converseLib.validationFailed(01); /*Unexpected error occured*/
    end
    EP0UXW1.XXXMODID = "AS2";
    TA1REC.TA1FUNC = "ASNST";
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT THE TABLE ROW"; /* Description*/
    TA1REC.TA1DBASE = "DSTLOC   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VRCAHD01"; /* Table view name*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/
    exit stack; /* Exit to map*/
  end

end // end EP0US-ASN-STAT

Function EP0US-GET-ASN()

   /* ************************************************************/
   /* *** validate the input*/
   /* ************************************************************/

  if (EP0UM040.ASNNUM is blanks)

    EP0UXW1.EP0UWERS = "Y";
    EP0UXW1.XXXMODID = "GA1";
    converseLib.validationFailed(0207); /* <--- inavlid ASN enter ASN*/
    set EP0UM040.ASNNUM cursor, bold;
    return;

  end

   /* ************************************************************/
   /* *** validate the ASN*/
   /* ************************************************************/

  EP0US-ASN-STAT();

  if (EP0UXW1.EP0UWERS == "Y")
    return;
  end

  if (EP0UXW2.EP0UW-EP9350-CURR-ASN-TYP == "N")
    EP0UM040.ASNTYPE = "ADD";
  else
    if (EP0UXW2.EP0UW-EP9350-CURR-ASN-TYP == "M")
      EP0UM040.ASNTYPE = "CHANGE";
    else
      if (EP0UXW2.EP0UW-EP9350-CURR-ASN-TYP == "C")
        EP0UM040.ASNTYPE = "CLOSED";
      else
        if (EP0UXW2.EP0UW-EP9350-CURR-ASN-TYP == "X")
          EP0UM040.ASNTYPE = "CANCELLED";
        else
          if (EP0UXW2.EP0UW-EP9350-CURR-ASN-TYP == "H")
            EP0UM040.ASNTYPE = "HOLD";
          end
        end
      end
    end
  end

  if (EP0UXW2.EP0UW-EP9350-CURR-ASN-STAT == "Y")
    EP0UM040.ASNSTAT = "YES";
  else
    if (EP0UXW2.EP0UW-EP9350-CURR-ASN-STAT == "N")
      EP0UM040.ASNSTAT = "NO";
    end
  end

   /* ************************************************************/
   /* *** validate the ASN*/
   /* ************************************************************/
  if (EP0UM040.RSASNTYP == "A"
   || EP0UM040.RSASNTYP == "C")
    EP0UXW1.EP0UWERS = "Y";
    EP0UXW1.XXXMODID = "GA2";
    converseLib.validationFailed(212); /* <--- valid ASN resend type and press PF5 to resend*/
    set EP0UM040.ASNNUM cursor, bold;
  else
    if (EP0UM040.RSASNTYP != "  ")
      EP0UXW1.EP0UWERS = "Y";
      EP0UXW1.XXXMODID = "GA3";
      converseLib.validationFailed(209); /* <--- Invalid ASN resend type*/
      set EP0UM040.RSASNTYP cursor, bold;
    end
  end

end // end EP0US-GET-ASN

Function EP0US-GET-PO()

   /* ************************************************************/
   /* *** validate the input*/
   /* ************************************************************/

  if (EP0UM030.PONUM is blanks)

    EP0UXW1.EP0UWERS = "Y";
    EP0UXW1.XXXMODID = "GP1";
    converseLib.validationFailed(0200); /* <--- inavlid PO enter PO*/
    set EP0UM030.PONUM cursor, bold;
    return;

  end

   /* ************************************************************/
   /* *** validate the PO*/
   /* ************************************************************/

  EP0US-PO-STAT();

  if (EP0UXW1.EP0UWERS == "Y")
    return;
  end

  if (EP0UXW2.EP0UW-EP9350-CURR-PO-TYP == "N")
    EP0UM030.POTYPE = "ADD";
  else
    if (EP0UXW2.EP0UW-EP9350-CURR-PO-TYP == "M")
      EP0UM030.POTYPE = "CHANGE";
    else
      if (EP0UXW2.EP0UW-EP9350-CURR-PO-TYP == "C")
        EP0UM030.POTYPE = "CLOSED";
      else
        if (EP0UXW2.EP0UW-EP9350-CURR-PO-TYP == "X")
          EP0UM030.POTYPE = "CANCELLED";
        else
          if (EP0UXW2.EP0UW-EP9350-CURR-PO-TYP == "H")
            EP0UM030.POTYPE = "HOLD";
          end
        end
      end
    end
  end

  if (EP0UXW2.EP0UW-EP9350-CURR-PO-STAT == "Y")
    EP0UM030.POSTAT = "YES";
  else
    if (EP0UXW2.EP0UW-EP9350-CURR-PO-STAT == "N")
      EP0UM030.POSTAT = "NO";
    end
  end

   /* ************************************************************/
   /* *** validate the PO*/
   /* ************************************************************/
  if (EP0UM030.RSPOTYP == "A"
   || EP0UM030.RSPOTYP == "C")
    EP0UXW1.EP0UWERS = "Y";
    EP0UXW1.XXXMODID = "GP2";
    converseLib.validationFailed(205); /* <--- valid PO resend type and press PF5 to resend*/
    set EP0UM030.PONUM cursor, bold;
  else
    if (EP0UM030.RSPOTYP != "  ")
      EP0UXW1.EP0UWERS = "Y";
      EP0UXW1.XXXMODID = "GP3";
      converseLib.validationFailed(202); /* <--- Invalid PO resend type*/
      set EP0UM030.RSPOTYP cursor, bold;
    end
  end

end // end EP0US-GET-PO

Function EP0US-PO-INITIATE()

  set EP0UM030 empty;
  set EP0UXW2 empty;
  set SQLCA empty;
  set TA1REC empty;
  set TA5REC empty;
  set TAEREC empty;

  EP0UM030.XXXCURDT = VGVar.currentShortGregorianDate;
  EP0UXW1.XXXAPPID = "EP0U"; /* error id appl. name*/
  EP0UXW1.XXXMODID = "SIN"; /* error location*/
  EP0UXW1.EP0UWERS = "N";

  set EP0UM030.PONUM cursor;

  EP0UM030.HDUPCNT = 0;
  EP0UM030.ITUPCNT = 0;

end // end EP0US-PO-INITIATE

Function EP0US-PO-STAT()

   /* **************************************************************/
   /* ****to select PO record from VRCAHD01*********/
   /* **************************************************************/

  set SQLCA empty;

  EP0UXW2.EP0UW-EP9350-FUNCT-CD = 1;
  EP0UXW2.EP0UW-EP9350-PO-NBR = EP0UM030.PONUM;

   /* ------------------------------------------------------------*/
   /* Select the unique row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "EP9350" (SQLCA, EP0UXW2) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      EP0UXW1.EP0UWERS = "Y";
      EP0UXW1.XXXMODID = "PS1";
      converseLib.validationFailed(201); /* PO not found*/
      set EP0UM030.PONUM cursor, bold;
      return; /* Return to previous process*/

    else

      if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

        set EP0UM030.RSPOTYP cursor;
        return; /* Return to previous process*/

      end

    end

  end

  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)

    /* ------------------------------------------------------------*/
    /* If data not available, return an error message to the user.*/
    /* Otherwise, indicate that an unexpected error has occurred.*/
    /* ------------------------------------------------------------*/

    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

    if (sysVar.errorCode == "00000000" && 
    SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(31); /* Data in use*/
    else
      converseLib.validationFailed(01); /*Unexpected error occured*/
    end
    EP0UXW1.XXXMODID = "PS2";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT THE TABLE ROW"; /* Description*/
    TA1REC.TA1DBASE = "DSTLOC   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VRCAHD01"; /* Table view name*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/
    exit stack; /* Exit to map*/
  end

end // end EP0US-PO-STAT

Function EP0US-RESET-ASN()

   /* ************************************************************/
   /* *** validate the input*/
   /* ************************************************************/

  if (EP0UM040.ASNNUM is blanks)

    EP0UXW1.EP0UWERS = "Y";
    EP0UXW1.XXXMODID = "RA1";
    converseLib.validationFailed(0207); /* <--- inavlid ASN enter ASN*/
    set EP0UM040.ASNNUM cursor, bold;
    return;

  end

   /* ************************************************************/
   /* *** validate the ASN*/
   /* ************************************************************/

  EP0US-ASN-STAT();

  if (EP0UXW1.EP0UWERS == "Y")
    return;
  end

  if (EP0UXW2.EP0UW-EP9350-CURR-ASN-TYP == "N")
    EP0UM040.ASNTYPE = "ADD";
  else
    if (EP0UXW2.EP0UW-EP9350-CURR-ASN-TYP == "M")
      EP0UM040.ASNTYPE = "CHANGE";
    else
      if (EP0UXW2.EP0UW-EP9350-CURR-ASN-TYP == "H")
        EP0UM040.ASNTYPE = "HOLD";
      end
    end
  end

  if (EP0UXW2.EP0UW-EP9350-CURR-ASN-STAT == "Y")
    EP0UM040.ASNSTAT = "YES";
  else
    if (EP0UXW2.EP0UW-EP9350-CURR-ASN-STAT == "N")
      EP0UM040.ASNSTAT = "NO";
    end
  end

  if (EP0UXW2.EP0UW-EP9350-CURR-ASN-TYP == "N"
   || EP0UXW2.EP0UW-EP9350-CURR-ASN-TYP == "M"
   || EP0UXW2.EP0UW-EP9350-CURR-ASN-TYP == "C"
   || EP0UXW2.EP0UW-EP9350-CURR-ASN-TYP == "X")
    /* next sentence*/
  else
    if (EP0UXW2.EP0UW-EP9350-CURR-ASN-TYP == "H")
      EP0UXW1.EP0UWERS = "Y";
      EP0UXW1.XXXMODID = "RA2";
      converseLib.validationFailed(0211); /* <--- ASN is Hold. cannot be resent*/
      EP0UM040.RSASNTYP = " "; /* Initialize the ASN resend type*/
      set EP0UM040.ASNNUM cursor, bold;
      return;
    end
  end

   /* ************************************************************/
   /* *** validate the ASN resend type*/
   /* ************************************************************/

  if (EP0UM040.RSASNTYP == "A")
    EP0UXW2.EP0UW-EP9350-ASN-RESND-TYP = "N";
  else
    if (EP0UM040.RSASNTYP == "C")
      EP0UXW2.EP0UW-EP9350-ASN-RESND-TYP = "M";
    else
      EP0UXW1.EP0UWERS = "Y";
      EP0UXW1.XXXMODID = "RA3";
      converseLib.validationFailed(0209); /* <--- inavlid ASN resend type entered*/
      set EP0UM040.RSASNTYP cursor, bold;
      return;
    end
  end

   /* ************************************************************/
   /* *** Update the ASN*/
   /* ************************************************************/

  EP0US-UPDATE-ASN();

  if (EP0UXW1.EP0UWERS == "Y")
    return;
  end

  if (EP0UXW2.EP0UW-EP9350-ASN-RESND-TYP == "N")
    EP0UM040.ASNTYPE = "ADD";
  else
    if (EP0UXW2.EP0UW-EP9350-ASN-RESND-TYP == "M")
      EP0UM040.ASNTYPE = "CHANGE";
    end
  end

  EP0UM040.ASNSTAT = "NO";
  EP0UM040.HDUPCNT = EP0UXW2.EP0UW-EP9350-ASNHD-CNT;
  EP0UM040.ITUPCNT = EP0UXW2.EP0UW-EP9350-ASNIT-CNT;
  EP0UM040.RSASNTYP = " "; /* Initialize the ASN resend type*/

end // end EP0US-RESET-ASN

Function EP0US-RESET-PO()

   /* ************************************************************/
   /* *** validate the input*/
   /* ************************************************************/

  if (EP0UM030.PONUM is blanks)

    EP0UXW1.EP0UWERS = "Y";
    EP0UXW1.XXXMODID = "RP1";
    converseLib.validationFailed(0200); /* <--- inavlid PO enter PO*/
    set EP0UM030.PONUM cursor, bold;
    return;

  end

   /* ************************************************************/
   /* *** validate the PO*/
   /* ************************************************************/

  EP0US-PO-STAT();

  if (EP0UXW1.EP0UWERS == "Y")
    return;
  end

  if (EP0UXW2.EP0UW-EP9350-CURR-PO-TYP == "N")
    EP0UM030.POTYPE = "ADD";
  else
    if (EP0UXW2.EP0UW-EP9350-CURR-PO-TYP == "M")
      EP0UM030.POTYPE = "CHANGE";
    else
      if (EP0UXW2.EP0UW-EP9350-CURR-PO-TYP == "C")
        EP0UM030.POTYPE = "CLOSED";
      else
        if (EP0UXW2.EP0UW-EP9350-CURR-PO-TYP == "X")
          EP0UM030.POTYPE = "CANCELLED";
        else
          if (EP0UXW2.EP0UW-EP9350-CURR-PO-TYP == "H")
            EP0UM030.POTYPE = "HOLD";
          end
        end
      end
    end
  end

  if (EP0UXW2.EP0UW-EP9350-CURR-PO-STAT == "Y")
    EP0UM030.POSTAT = "YES";
  else
    if (EP0UXW2.EP0UW-EP9350-CURR-PO-STAT == "N")
      EP0UM030.POSTAT = "NO";
    end
  end

  if (EP0UXW2.EP0UW-EP9350-CURR-PO-TYP == "N"
   || EP0UXW2.EP0UW-EP9350-CURR-PO-TYP == "M"
   || EP0UXW2.EP0UW-EP9350-CURR-PO-TYP == "C"
   || EP0UXW2.EP0UW-EP9350-CURR-PO-TYP == "X")
    /* next sentence*/
  else
    if (EP0UXW2.EP0UW-EP9350-CURR-PO-TYP == "H")
      EP0UXW1.EP0UWERS = "Y";
      EP0UXW1.XXXMODID = "RP2";
      converseLib.validationFailed(0204); /* <--- PO is Hold. cannot be resent*/
      EP0UM030.RSPOTYP = " "; /* Initialize the PO resend type*/
      set EP0UM030.PONUM cursor, bold;
      return;
    end
  end

   /* ************************************************************/
   /* *** validate the PO resend type*/
   /* ************************************************************/

  if (EP0UM030.RSPOTYP == "A")
    EP0UXW2.EP0UW-EP9350-PO-RESND-TYP = "N";
  else
    if (EP0UM030.RSPOTYP == "C")
      EP0UXW2.EP0UW-EP9350-PO-RESND-TYP = "M";
    else
      EP0UXW1.EP0UWERS = "Y";
      EP0UXW1.XXXMODID = "RP3";
      converseLib.validationFailed(0202); /* <--- inavlid PO resend type entered*/
      set EP0UM030.RSPOTYP cursor, bold;
      return;
    end
  end

   /* ************************************************************/
   /* *** Update the PO*/
   /* ************************************************************/

  EP0US-UPDATE-PO();

  if (EP0UXW1.EP0UWERS == "Y")
    return;
  end

  if (EP0UXW2.EP0UW-EP9350-PO-RESND-TYP == "N")
    EP0UM030.POTYPE = "ADD";
  else
    if (EP0UXW2.EP0UW-EP9350-PO-RESND-TYP == "M")
      EP0UM030.POTYPE = "CHANGE";
    end
  end

  EP0UM030.POSTAT = "NO";
  EP0UM030.HDUPCNT = EP0UXW2.EP0UW-EP9350-POHDR-CNT;
  EP0UM030.ITUPCNT = EP0UXW2.EP0UW-EP9350-POITM-CNT;
  EP0UM030.RSPOTYP = " "; /* Initialize the PO resend type*/

end // end EP0US-RESET-PO

Function EP0US-UPDATE-ASN()

   /* **************************************************************/
   /* ****to select ASN record from VRCAHD01*********/
   /* **************************************************************/

  set SQLCA empty;

  EP0UXW2.EP0UW-EP9350-FUNCT-CD = 4;
  EP0UXW2.EP0UW-EP9350-ASN-NBR = EP0UM040.ASNNUM;

  XX0XS01(); /* Get date and time*/

  EP0UXW2.EP0UW-EP9350-CHNG-DT = XX0XW01.XX0XWDAT; /* setup date*/
  EP0UXW2.EP0UW-EP9350-CHNG-TM = XX0XW01.XX0XWTIM; /* setup time*/

   /* ------------------------------------------------------------*/
   /* Select the unique row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "EP9350" (SQLCA, EP0UXW2) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    set EP0UM040.ASNNUM cursor;

    if (SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      EP0UXW1.EP0UWERS = "Y";
      if (EP0UW-EP9350-RETURN-CD == 11)
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* Reset any updates*/
        EP0UM040.RSASNTYP = " ";
        converseLib.validationFailed(0213); /* ASN item not found*/
      else
        if (EP0UW-EP9350-RETURN-CD == 10)
          converseLib.validationFailed(0208); /* ASN header not found*/
        end
      end
      return; /* Return to previous process*/

    else

      if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
        EP0UXW1.XXXMODID = "UA1";
        converseLib.validationFailed(0210); /* ASN update successful*/

        return; /* Return to previous process*/

      end

    end

  end

  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)

    /* ------------------------------------------------------------*/
    /* If data not available, return an error message to the user.*/
    /* Otherwise, indicate that an unexpected error has occurred.*/
    /* ------------------------------------------------------------*/

    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

    if (sysVar.errorCode == "00000000" && 
    SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(31); /* Data in use*/
    else
      converseLib.validationFailed(01); /*Unexpected error occured*/
    end
    EP0UXW1.XXXMODID = "UA2";
    TA1REC.TA1FUNC = "ASNST";
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT THE TABLE ROW"; /* Description*/
    TA1REC.TA1DBASE = "DSTLOC   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VRCAHD01"; /* Table view name*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/
    exit stack; /* Exit to map*/
  end

end // end EP0US-UPDATE-ASN

Function EP0US-UPDATE-PO()

   /* **************************************************************/
   /* ****to select PO record from VRCAHD01*********/
   /* **************************************************************/

  set SQLCA empty;

  EP0UXW2.EP0UW-EP9350-FUNCT-CD = 2;
  EP0UXW2.EP0UW-EP9350-PO-NBR = EP0UM030.PONUM;

  XX0XS01(); /* Get date and time*/

  EP0UXW2.EP0UW-EP9350-CHNG-DT = XX0XW01.XX0XWDAT; /* setup date*/
  EP0UXW2.EP0UW-EP9350-CHNG-TM = XX0XW01.XX0XWTIM; /* setup time*/

   /* ------------------------------------------------------------*/
   /* Select the unique row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "EP9350" (SQLCA, EP0UXW2) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    set EP0UM030.PONUM cursor;

    if (SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      EP0UXW1.EP0UWERS = "Y";
      if (EP0UW-EP9350-RETURN-CD == 11)
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* Reset any updates*/
        EP0UM030.RSPOTYP = " ";
        converseLib.validationFailed(0206); /* PO item not found*/
      else
        if (EP0UW-EP9350-RETURN-CD == 10)
          converseLib.validationFailed(0201); /* PO header not found*/
        end
      end
      return; /* Return to previous process*/

    else

      if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
        EP0UXW1.XXXMODID = "UP1";
        converseLib.validationFailed(0203); /* PO update successful*/

        return; /* Return to previous process*/

      end

    end

  end

  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)

    /* ------------------------------------------------------------*/
    /* If data not available, return an error message to the user.*/
    /* Otherwise, indicate that an unexpected error has occurred.*/
    /* ------------------------------------------------------------*/

    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

    if (sysVar.errorCode == "00000000" && 
    SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(31); /* Data in use*/
    else
      converseLib.validationFailed(01); /*Unexpected error occured*/
    end
    EP0UXW1.XXXMODID = "UP2";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT THE TABLE ROW"; /* Description*/
    TA1REC.TA1DBASE = "DSTLOC   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VRCAHD01"; /* Table view name*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/
    exit stack; /* Exit to map*/
  end

end // end EP0US-UPDATE-PO

// TO CHECK EP51XE FOR RUNNING
Function EP0US032()

   /* **********************************************************************/
   /* ****************to check if jobs are under execution******************/
   /* **********************************************************************/

  if (EP0UM020.EP0USEL == "A"
  ) /* --------------------------------------------------------------*/
    /* Select the unique row in the table.*/
    /* ------------------------------------------------------------*/

    PWHREC.XXXPGMNO = "EP121E"; /* move pgm name*/
    PWHREC.XWHCD = "51"; /* move whse cde*/

    try
      call "IO4240" ("S ", SQLCA, PWHREC) {isNoRefresh = yes, isExternal = yes};
    end /* Select row*/

    if (sysVar.errorCode == "00000000") /* Call successful*/

      /* ***********************************************************/
      /* *CHECKS FOR THE EP51XE JOB RUNNING************************/
      /* ***********************************************************/

      if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

        if (PWHREC.XXXCMTCT > 0) /* Job is running*/
          EP0UXW1.EP0UJOBFLG = "N"; /* Return error*/
          return; /* Return to previous process*/

        else

          return; /* Job not running*/

        end

      else

        if (SQLCA.VAGen_SQLCODE == 100)
          return; /* Job not running*/
        end
      end

      /* ------------------------------------------------------------*/
      /* If data not available, return an error message to the user.*/
      /* Otherwise, indicate that an unexpected error has occurred.*/
      /* ------------------------------------------------------------*/

      if (SQLCA.VAGen_SQLCODE != 100 /* Call successful*/
       && SQLCA.VAGen_SQLCODE != 0)  /* and resource not available*/
        converseLib.validationFailed(134); /* Data in use by another*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* Roll back all changes*/

        converseLib.validationFailed(124); /* Unexpected error occurred*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/

        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1LOC = "SELECT FROM VPKPGM01"; /* Description*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VPKPGM01"; /* Table view name*/
        TA1REC.TA1TBLKE = PWHREC.PWHKEY; /* Table key*/

        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

        exit stack; /* Exit to display map*/
      end

    end

  end

  if (EP0UM020.EP0USEL == "C"
  )
    PWHREC.XWHCD = "51";
    PWHREC.XXXPGMNO = "EP121C";
    try
      call "IO4240" ("S ", SQLCA, PWHREC) {isNoRefresh = yes, isExternal = yes};
    end

    if (sysVar.errorCode == "00000000") /* Call successful*/
      /* ***********************************************************/
      /* *CHECKS FOR THE EP51XC JOB RUNNING************************/
      /* ***********************************************************/
      if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
        if (PWHREC.XXXCMTCT != 0) /* Job is running*/
          EP0UXW1.EP0UJOBFLG = "N"; /* Return error*/
          return; /* Return to previous process*/
        else
          return; /* Job not running*/
        end
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          return; /* Job not running*/
        end
      end

      /* ------------------------------------------------------------*/
      /* If data not available, return an error message to the user.*/
      /* Otherwise, indicate that an unexpected error has occurred.*/
      /* ------------------------------------------------------------*/

      if (SQLCA.VAGen_SQLCODE != 100 /* Call successful*/
       && SQLCA.VAGen_SQLCODE != 0)  /* and resource not available*/
        converseLib.validationFailed(134); /* Data in use by another*/
        TA1REC.TA1FUNC = "POST"; /* Termination function*/
        VGVar.handleSysLibraryErrors = 0;
        sysLib.rollback(); /* Roll back all changes*/

        converseLib.validationFailed(124); /* Unexpected error occurred*/
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/

        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        /* MOVE SRWREC.XXXERRID TO TA1REC.TA1PGMNM;/* Message location*/
        TA1REC.TA1LOC = "SELECT FROM VPKPGM01"; /* Description*/
        TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
        TA1REC.TA1TBLVU = "VPKPGM01"; /* Table view name*/
        TA1REC.TA1TBLKE = PWHREC.PWHKEY; /* Table key*/

        call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

        exit stack; /* Exit to display map*/
      end

    end

  end

   /* ********************************************************************/
   /* ******************end of sgrp***************************************/
   /* ********************************************************************/

end // end EP0US032

Function EP0US032-A()

   /* ***************************************************************/
   /* ***********insert record to the mirror pool cntrl tble*********/
   /* ***************************************************************/

  VMPOLC01.XWHCD = "51";
  VMPOLC01.PK1CUOID = VMPOLH01.PK-ORD-STKTF-ID;
  VMPOLC01.PK1NORID = VMPOLH01.PK-NIKE-ORD-ID;
  VMPOLC01.PK1ALLNB = VMPOLH01.PK-NBR-TIMES-ALOC;
   /* MOVE 'EP0U' TO VMPOLC01.DCMS-USERID;*/

  EP0UXW1.USERID = COMMAREA.CAUSERID;
  VMPOLC01.DCMS-USERID = EP0UXW1.USERID;

   /* ********to move the date(yy-dd-mm) to csp-rec-VMPOLC01*********/

  EP0UXW1.EP0UMFDT = VGVar.currentGregorianDate;
  VMPOLC01.ZZZSDT = EP0UXW1.EP0UMFDT;
  VMPOLC01.ZZZCHGDT = EP0UXW1.EP0UMFDT;

  EP0UXW1.EP0UMTIM = VGVar.currentFormattedTime;
  EP0UXW1.EP0UMTHH = EP0UXW1.EP0UMHH;
  EP0UXW1.EP0UMTMM = EP0UXW1.EP0UMI;
  VMPOLC01.ZZZCHGTM = EP0UXW1.EP0UMTI;

  VMPOLC01.ZZZCHGCT = 0;

  if (EP0UM020.EP0USEL == "A")

    VMPOLC01.DCMS-COL-CHNG-NM = "DCMS_ORD_STAT_CD";
    VMPOLC01.DCMS-COL-BFR-VAL = "A";
    VMPOLC01.DCMS-COL-AFT-VAL = " ";

  else

    VMPOLC01.DCMS-COL-CHNG-NM = "DCMS-ORD-CHANGE-FL";
    VMPOLC01.DCMS-COL-BFR-VAL = "N";
    VMPOLC01.DCMS-COL-AFT-VAL = "Y";

  end

  try
    call "VMPOLC01" ("A ", SQLCA, VMPOLC01) {isNoRefresh = yes, isExternal = yes};
  end

  if (sysVar.errorCode == "00000000")

    if (SQLCA.VAGen_SQLCODE == 0)

      EP0UXW1.EP0UINSRT = "N";
      return; /* Return to previous process*/

    else

      if (SQLCA.VAGen_SQLCODE == 100) /* Not found*/

        VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
        VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
        sysLib.rollback();
        VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
        
        EP0UXW1.EP0URECNFD = "N";
        converseLib.validationFailed(478);
        return;

      end

    end

  end

    /* ------------------------------------------------------------*/
    /* If data not available, return an error message to the user.*/
    /* Otherwise, indicate that an unexpected error has occurred.*/
    /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE != 100
   || SQLCA.VAGen_SQLCODE != 0)
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back*/
    converseLib.validationFailed(01); /* Unexpected error*/
    TA1REC.TA1FUNC = "RETN"; /* Function*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT THE TABLE ROW"; /* Description*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VMPOLC01"; /* Table view name*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/
    exit stack; /* Exit to map*/
  end

   /* ***************************************************************/
   /* *****************end of statement grp**************************/
   /* ***************************************************************/

end // end EP0US032-A

// TO SELECT ROW FROM VMPOLH01
Function EP0US032-S()

   /* **************************************************************/
   /* *************to select an unique record from VMPOLH01*********/
   /* **************************************************************/

  set SQLCA empty;

   /* ------------------------------------------------------------*/
   /* Select the unique row in the table.*/
   /* ------------------------------------------------------------*/

  try
    call "VMPOLH01" ("S ", SQLCA, VMPOLH01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 100) /* Not found*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value

      EP0UXW1.EP0URECNFD = "N";
      converseLib.validationFailed(478);
      EP0UXW1.EP0USELNAC = "N";
      set EP0UM020.PK-ORD-STKTF-ID cursor;
      return; /* Return to previous process*/

    else

      if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

        EP0UXW1.EP0UCONFUP = "N";
        EP0UXW1.EP0USELNAC = "N";
        converseLib.validationFailed(479);
        set EP0UM020.PK-ORD-STKTF-ID protect;
        set EP0UM020.PK-NIKE-ORD-ID protect;
        set EP0UM020.PK-NBR-TIMES-ALOC protect;
        set EP0UM020.EP0USEL protect;
        exit stack;

      end

    end

  end

  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)

    /* ------------------------------------------------------------*/
    /* If data not available, return an error message to the user.*/
    /* Otherwise, indicate that an unexpected error has occurred.*/
    /* ------------------------------------------------------------*/

    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back*/
    converseLib.validationFailed(01); /* Unexpected error*/
    TA1REC.TA1FUNC = "RETN"; /* Function*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT THE TABLE ROW"; /* Description*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VMPOLH01"; /* Table view name*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/
    exit stack; /* Exit to map*/
  end

   /* **************************************************************/
   /* *************end of stgrp*************************************/
   /* **************************************************************/

end // end EP0US032-S

// TO A UPDATE ROW IN VMPOLH01
Function EP0US032-U()

   /* ********************************************************************/
   /* **************to update the record in VMPOLH01**********************/
   /* ********************************************************************/

  set SQLCA empty;

   /* ------------------------------------------------------------*/
   /* Select the unique row in the table.*/
   /* ------------------------------------------------------------*/

  EP0UXW1.EP0UUPDTFL = "Y";

  try
    call "VMPOLH01" ("U ", SQLCA, VMPOLH01) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.commit();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      EP0UXW1.EP0UUPDTFL = "N";

      /* ***************************************************************/
      /* ***********To insert the updated record in VMPOLC01************/
      /* ***************************************************************/

      EP0US032-A();

      if (EP0UXW1.EP0UINSRT == "N")

        if (EP0UXW1.EP0UUPDTFL == "N")
          return;
        end

      end

      if (EP0UXW1.EP0URECNFD == "N")
        return;
      end

    end

    if (SQLCA.VAGen_SQLCODE == 100) /* Not found*/

      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      EP0UXW1.EP0URECNFD = "N";
      converseLib.validationFailed(478);
      return; /* Return to the previous process*/

    end

  end

   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  if (SQLCA.VAGen_SQLCODE != 100
   || SQLCA.VAGen_SQLCODE != 0)
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
    TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back*/
    converseLib.validationFailed(01); /* Unexpected error*/
    TA1REC.TA1FUNC = "RETN"; /* Function*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1LOC = "SELECT THE TABLE ROW"; /* Description*/
    TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
    TA1REC.TA1TBLVU = "VMPOLH01"; /* Table view name*/

    call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/
    exit stack; /* Exit to map*/
  end

   /* *******************************************************************/
   /* ****************end of stgrp***************************************/
   /* *******************************************************************/

end // end EP0US032-U

// CAITEM processing
Function EP0USY0()

   /* MOVE 'SY0' TO EP0UXW1.XXXMODID;*/

   /* ************************************************************/
   /* *** if entered, use CAITEM data as the selection no.:   ****/
   /* *** valid values checked as part of flow decision(s)    ****/
   /* *** note: 'SNO' & CAITEM are character data             ****/
   /* ************************************************************/

  EP0UM010.EP0UMSNO = COMMAREA.CAITEM;

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/

end // end EP0USY0

//*** RECORD=EP0UXW1 ****
// ************************************************************
// 
//            COMMON WORKING STORAGE FIELDS
//            =============================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are generally used
//           by all applications within the "EP" system.
// 
//           The name of this record and its fields will still
//           require customization for application uniqueness.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 11-06-00  Sridevi      created
// 
// 
// ************************************************************
// ************************************************************
// ***********************
Record EP0UXW1 type basicRecord
  10 EP0UWERS EP0UWERS ; 
  10 XXXRVNBR XXXRVNBR ; 
  10 XXXERRID XXXERRID ; 
    15 XXXAPPID XXXAPPID ; 
    15 XXXMODID XXXMODID ; 
    15 XXXUNQID XXXUNQID ; 
  10 EP0UWSNO EP0UWSNO ; 
    15 EP0UWDG1 EP0UWDG1 ; 
    15 EP0UWDG2 EP0UWDG2 ; 
  10 EP0UFLAG EP0UFLAG ; 
  10 EP0USELNAC EP0USELNAC ; 
  10 EP0UUPDTFL EP0UUPDTFL ; 
  10 EP0UORDERR EP0UORDERR ; 
  10 EP0UJOBFLG EP0UJOBFLG ; 
  10 EP0URECNFD EP0URECNFD ; 
  10 EP0UCONFUP EP0UCONFUP ; 
  10 EP0UINSRT EP0UINSRT ; 
  10 EP0UKEYCHK EP0UKEYCHK ; 
  10 XWH-WHSE-CD XWH-WHSE-CD ; 
  10 PK-ORD-STKTF-ID PK-ORD-STKTF-ID ; 
  10 PK-NIKE-ORD-ID PK-NIKE-ORD-ID ; 
  10 PK-NBR-TIMES-ALOC PK-NBR-TIMES-ALOC ; 
  10 EP0UMTIM EP0UMTIM ; 
    15 EP0UMHH EP0UMHH ; 
    15 * char(1) ; 
    15 EP0UMI EP0UMI ; 
    15 * char(1) ; 
    15 EP0UMSS EP0UMSS ; 
  10 EP0UMTI EP0UMTI ; 
    15 EP0UMTHH EP0UMTHH ; 
    15 EP0UMTMM EP0UMTMM ; 
  10 EP0UMFDT EP0UMFDT ; 
    15 EP0UMFCT EP0UMFCT ; 
    15 EP0UMFDA EP0UMFDA ; 
      20 EP0UMFYY EP0UMFYY ; 
      20 EP0UMFMM EP0UMFMM ; 
      20 EP0UMFDD EP0UMFDD ; 
  10 USERID USERID ; 
  10 EP0UBTCHSUB char(1) ; 
  10 EP0UCONFMJB char(1) ; 
end // end EP0UXW1

//*** RECORD=EP0UXW2 ****
// DB2 TABLE VIEWS:
// 
// DSTLOC.VRCAHD01
// DSTLOC.VRCAIT01
// DSTLOC.VASNHD01
// DSTLOC.VASNIT01
// 
// INCLUDE MEMBER:      WEP9351
// 
// I/O MODULE:          EP9350
// 
//   DATE      NAME    DESCRIPTION
// --------   ------   ----------------------------------------
// 11/02/05   RATHAL  New record used in call for EP9350
//                     which is a special iomod for EP0U only.
// 
// ***********************
Record EP0UXW2 type basicRecord
  3 EP0UW02-GROUP char(68) ; // Record Group Level
    4 EP0UW-EP9350-FUNCT-CD char(1) ; // EP9350 Function code
    4 EP0UW-EP9350-PO-NBR char(9) ; // DCMS PO Number
    4 EP0UW-EP9350-CURR-PO-TYP char(1) ; // current PO type
    4 EP0UW-EP9350-CURR-PO-STAT char(1) ; // current PO status
    4 EP0UW-EP9350-PO-RESND-TYP char(1) ; // PO resend type
    4 EP0UW-EP9350-ASN-NBR int ; // ASN nbr
    4 EP0UW-EP9350-CURR-ASN-TYP char(1) ; // current ASN type
    4 EP0UW-EP9350-CURR-ASN-STAT char(1) ; // current ASN status
    4 EP0UW-EP9350-ASN-RESND-TYP char(1) ; // ASN resend type
    4 EP0UW-EP9350-CHNG-DT int ; // Current update date
    4 EP0UW-EP9350-CHNG-TM smallint ; // Current update time
    4 EP0UW-EP9350-POHDR-CNT num(9) ; // PO Hdr Upd Cnt
    4 EP0UW-EP9350-POITM-CNT num(9) ; // PO Itm Upd Cnt
    4 EP0UW-EP9350-ASNHD-CNT num(9) ; // ASN Hdr Upd Cnt
    4 EP0UW-EP9350-ASNIT-CNT num(9) ; // ASN Itm Upd Cnt
    4 EP0UW-EP9350-SQLCODE int ; // EP9350 Sqlcode
    4 EP0UW-EP9350-RETURN-CD num(2) ; // EP9350 return code
end // end EP0UXW2

//*** RECORD=EPWREC ****
// ************************************************************
// 
//                "EP" Memphis Apparel
//            COMMON WORKING STORAGE FIELDS
//            =============================
// 
// ************************************************************
// 
// OVERVIEW:
// ========
//           These working storage fields are generally used
//           by all "EP" Apparel applications.
// 
// 
// MAINTENANCE HISTORY:
// ===================
// 
//   Date     By Whom     Overview of Changes
// --------  -----------  -------------------------------------
// 01-22-98  esmit2       created
// ************************************************************
// ************************************************************
// **********************
Record EPWREC type basicRecord
  5 EPW-GROUP EPW-GROUP ; 
    10 EPW-ERR-SW EPW-ERR-SW ; 
    10 EPW-SAME-KEY-SW EPW-SAME-KEY-SW ; 
    10 EPW-FIRST-TM-SW EPW-FIRST-TM-SW ; 
    10 EPW-EOF-SW EPW-EOF-SW ; 
    10 EPW-SPCL-EXIT-SW EPW-SPCL-EXIT-SW ; 
    10 EPW-VAL-ERR-SW EPW-VAL-ERR-SW ; 
    10 EPW-LN-START-SW EPW-LN-START-SW ; 
    10 EPW-LAST-PF EPW-LAST-PF ; 
    10 EPW-LAST-RL-PF EPW-LAST-RL-PF ; 
    10 EPW-MSG-NO EPW-MSG-NO ; 
    10 EPW-LN-PER-PG EPW-LN-PER-PG ; 
    10 EPW-TSSUM-IDX EPW-TSSUM-IDX ; 
    10 EPW-TSDTL-IDX EPW-TSDTL-IDX ; 
    10 EPW-TSSUM-MAX-NBR EPW-TSSUM-MAX-NBR ; 
    10 EPW-TSDTL-MAX-NBR EPW-TSDTL-MAX-NBR ; 
    10 EPW-NXT-TSQ-SUM EPW-NXT-TSQ-SUM ; 
    10 EPW-NXT-TSQ-DTL EPW-NXT-TSQ-DTL ; 
    10 EPW-LN-LEFT-TSPG EPW-LN-LEFT-TSPG ; 
    10 EPW-LN-NEED-TSPG EPW-LN-NEED-TSPG ; 
    10 ELWBUFLX ELWBUFLX ; 
    10 EPW-LST-SUMPG-IDX EPW-LST-SUMPG-IDX ; 
    10 EPW-LAST-DTL-IDX EPW-LAST-DTL-IDX ; 
    10 EPW-IDX EPW-IDX ; 
    10 EPW-WORK-IDX1 EPW-WORK-IDX1 ; 
    10 EPW-WORK-IDX2 EPW-WORK-IDX2 ; 
    10 EPW-WORK-IDX3 EPW-WORK-IDX3 ; 
    10 EPW-WORK-IDX4 EPW-WORK-IDX4 ; 
    10 EPW-WORK-IDX5 EPW-WORK-IDX5 ; 
    10 EPW-WORK-IDX6 EPW-WORK-IDX6 ; 
    10 EPW-WORK-CTR1 EPW-WORK-CTR1 ; 
    10 EPW-WORK-REMNDR EPW-WORK-REMNDR ; 
    10 VAGen_SQLCODE VAGen_SQLCODE ; 
    10 XXXMAPNM XXXMAPNM ; 
    10 XXXTITLE XXXTITLE ; 
    10 XXXRVNBR XXXRVNBR ; 
    10 XXXERRID XXXERRID ; 
      15 XXXAPPID XXXAPPID ; 
      15 XXXLOCID XXXLOCID ; 
    10 EPW-TA-LST-LOC EPW-TA-LST-LOC ; 
    10 EPW-TA-LST-MAP EPW-TA-LST-MAP ; 
    10 * char(4) ; 
    10 CAITEM CAITEM ; 
      15 EPW-CA-SEL-NBR EPW-CA-SEL-NBR ; 
      15 * char(19) ; 
    10 EPW-SUM-TSQ-ID EPW-SUM-TSQ-ID ; 
    10 EPW-DTL-TSQ-ID EPW-DTL-TSQ-ID ; 
    10 * char(1) ; 
    10 EPW-WRKDT-CCYYMMDD EPW-WRKDT-CCYYMMDD ; 
      15 EPW-WRKDT-CC EPW-WRKDT-CC ; 
      15 EPW-SHORTDT-YYMMDD EPW-SHORTDT-YYMMDD ; 
        20 EPW-WRKDT-YY EPW-WRKDT-YY ; 
        20 EPW-WRKDT-MM EPW-WRKDT-MM ; 
        20 EPW-WRKDT-DD EPW-WRKDT-DD ; 
    10 EPW-IN-DATE-MMDDYY EPW-IN-DATE-MMDDYY ; 
      15 EPW-IN-DATE-MM EPW-IN-DATE-MM ; 
      15 EPW-IN-DATE-DD EPW-IN-DATE-DD ; 
      15 EPW-IN-DATE-YY EPW-IN-DATE-YY ; 
    10 * char(62) ; 
    10 EPW-FROM-MAP-SEL EPW-FROM-MAP-SEL ; 
      15 EPW-FROM-MAP-SEL-NUM EPW-FROM-MAP-SEL-NUM ; 
    10 * char(22) ; 
    10 EP-FILLER EP-FILLER ; 
    10 EPWUSERA EPWUSERA ; 
    10 EPWMSG EPWMSG ; 
end // end EPWREC

//*** RECORD=VMPOLC01 ****
// DB2 TABLE VIEW  :      DPICK.VMPOLC01
// 
// COPYLIB MEMBER  :      DMPOLC01
// 
// I/O MODULE      :      VMPOLC01
// 
// KEY TO DB2 TABLE:      whse-cd,ord-id,nike-id,col-nm
// 
// 
// MAINTENANCE LOG :
// 
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  --------------------------------
// TT#8760  11/06/00  SVENKA  New record definition.
// TT10486  02/14/01  VDASAR  Changed the DCMS-USERID length
//                            from 06 to 08.
// 
// ************************
Record VMPOLC01 type basicRecord
  5 VMPOLC01-GROUP VMPOLC01-GROUP ; 
    10 VMPOLC01-KEY VMPOLC01-KEY ; 
      15 XWHCD XWHCD ; 
      15 PK1CUOID PK1CUOID ; 
      15 PK1NORID PK1NORID ; 
      15 PK1ALLNB PK1ALLNB ; 
      15 DCMS-COL-CHNG-NM DCMS-COL-CHNG-NM ; 
    10 DCMS-COL-BFR-VAL DCMS-COL-BFR-VAL ; 
    10 DCMS-COL-AFT-VAL DCMS-COL-AFT-VAL ; 
    10 DCMS-USERID DCMS-USERID ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end VMPOLC01

DataItem DCMS-COL-AFT-VAL char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem DCMS-COL-BFR-VAL char(50)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem DCMS-COL-CHNG-NM char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xxx-user-id
DataItem DCMS-USERID char(8)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// menu sel. no. digit 2
DataItem EP0UCONFUP char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// menu sel. no. digit 2
DataItem EP0UFLAG char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EP0UINSRT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// menu sel. no. digit 2
DataItem EP0UJOBFLG char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// menu sel. no. digit 2
DataItem EP0UKEYCHK char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EP0UMFCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem EP0UMFDA char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EP0UMFDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem EP0UMFDT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem EP0UMFMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem EP0UMFYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem EP0UMHH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EP0UMI char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EP0UMSS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EP0UMTHH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem EP0UMTI num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem EP0UMTIM char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem EP0UMTMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// menu sel. no. digit 2
DataItem EP0UORDERR char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// menu sel. no. digit 2
DataItem EP0URECNFD char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// menu sel. no. digit 2
DataItem EP0USELNAC char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// menu sel. no. digit 2
DataItem EP0UUPDTFL char(1)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

// menu sel. no. digit 1
DataItem EP0UWDG1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// menu sel. no. digit 2
DataItem EP0UWDG2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error switch
DataItem EP0UWERS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// menu selection no.
DataItem EP0UWSNO char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xwh-whse-cd
DataItem VMPOLC01-GROUP char(150)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xwh-whse-cd
DataItem VMPOLC01-KEY char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

