package ep0p;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import ep.common.*;
import fy.common.*;
import in1.common.*;
import ku.common.*;
import pc.common.*;
import rd.common.*;
import sa.common.*;
import sl.common.*;
import sw.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import ts.common.*;
import vv.common.*;
//*** PROGRAM=EP0P ****
// This online application provides the users with the means
// to view and correlate DCMS ASNs and CONTAINERS.  It has
// no update functionality and is used for inquiry only.
// 
// This program consists of two (2) screens.
// 
// The first screen, EP0PM001, requires the user to enter the
// warehouse code (defaults from commarea) and up to 12
// containers OR a single DCMS ASN number.
// 
// The second screen, EP0PM002, shows DCMS ASN information
// for the requested containers.
// 
// This program uses the standard initialization routine,
// exit routine, date and time routine, temporary storage
// routine, error routines and PF keys
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      02/25/98  esmit2  New Application - Retrofit
// CHG      04/01/99  esmit2  Remove BOL and add P.O on map 2.
// CHG      04/05/99  esmit2  Remove Apparel user restriction
//                            from the flow logic.
// multgpc  08/06/99  OENFIE  regenerate to pick up changes to
//                            XPEP-00000
// NSC      04/11/01  marbuc  Modify to use new view of ASN HDR
//                             (VASNHD02).
//                            Modify EP0PM002 to display SAP
//                             Shipment Id and SAP Deliver Id.
//                             Remove Nike Ship ID from the
//                             display.
//                            Added iomod for Receiving Pack-
//                             list Header (VRCVHD01)
// tt#16087 01/18/02  svenka  Modify to display all the shipmnt
//                            delivery numbers for a container,
//                            sap shipement id,pc-po-nbr,
//                            sap-po-nbr.Added a new cursor in
//                            the io-mod VRCVPH01.
// *********************
Program EP0P type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "EP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  EP0PW00 EP0PW00; // record
  EP0PW01 EP0PW01; // record
  EP0PW02 EP0PW02; // record
  EP0PW03 EP0PW03; // record
  EPWREC EPWREC; // record
  ERRSQLCA ERRSQLCA; // record
  SQLCA SQLCA; // record
  SWXREC SWXREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  TFWREC TFWREC; // record
  VASNHD02 VASNHD02; // record
  VRCVPH01 VRCVPH01; // record
  VRCVPI01 VRCVPI01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL; // table
  use EP0PM.EP0PM001,  // forms
      EP0PM.EP0PM002
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPEP-00000: XPEP-00000();
     /* -----------------------------------------------------------*/
     /* Initialize working storage area and display storage areas.*/
     /* -----------------------------------------------------------*/

    set EP0PM001 initial; /* M001 i/o*/
    set EP0PM002 initial; /* M002 i/o*/
    set EP0PW00 empty; /* Working storage*/
    set EP0PW01 empty; /* M001 display storage*/
    set EP0PW02 empty; /* M002 display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis information*/
    set TA2REC empty; /* Error diagnosis information*/
    set TA5REC empty; /* Temporary Storage parameters*/

    EP0PW00.EP0PW-MAP-DISP-SW = "1"; /* Display MAP 1*/
    EP0PW00.EP0PW-MAP-FMAT-SW = "Y"; /* Format the map switch*/
    EP0PW00.EP0PW-FIRST-TM-SW = "Y"; /* First time switch*/
    EP0PW00.EP0PW-DATA-RQST-SW = "N"; /* Request for data switch*/


     /* ------------------------------------------------------------*/
     /* If data was passed in the commarea, use as the initial key.*/
     /* ------------------------------------------------------------*/

    if (COMMAREA.CAITEM > " ") /* data was passed*/

      EP0PM001.XWH-WHSE-CD = COMMAREA.XWHCD; /* warehouse code*/

      COMMAREA.CAITEM = " "; /* clear passed data*/

      EP0PW00.EP0PW-DATA-RQST-SW = "Y"; /* request for data switch*/

    else

      EP0PW01.XWH-WHSE-CD = COMMAREA.XWHCD; /* warehouse code*/
      EP0PM001.XWH-WHSE-CD = COMMAREA.XWHCD; /* warehouse code*/

    end


     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto EP0P-10000; /* converse the main process*/



    EP0P-10000: EP0P-10000();
     /* ---------------------------------------------------*/
     /* Flow to converse main process to display a map   -*/
     /* ---------------------------------------------------*/

    goto EP0P-10000; /* Converse main process*/



  end // end main
end // end EP0P

// MAIN PROCESS TO DISPLAY MAPS
Function EP0P-10000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
   /*  */
   /* 1) If specified, display the first map.*/
   /* 2) Otherwise, if specified, display the second map.*/
   /* 3) Otherwise, indicate error and exit to Application Menu.*/
   /*  */
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


  if (EP0PW00.EP0PW-MAP-DISP-SW == "1") /* Map 1 was requested*/

    EP0P-11000(); /* Display map 1*/

  else

    if (EP0PW00.EP0PW-MAP-DISP-SW == "2") /* Map 2 was requested*/

      EP0P-20000(); /* Display map 2*/

    else


      /* ------------------------------------------------------------*/
      /* Write the error to the Error Diagnosis Reporting Facility.*/
      /* ------------------------------------------------------------*/

      EPWREC.XXXLOCID = "0000"; /* Module id*/
      EPWREC.EPW-MSG-NO = 1; /* Unexpected*/

      TA1REC.TA1FUNC = "RETN"; /* Termination*/
      TA1REC.TA1TYPE = "APPL"; /* Error Type*/
      TA1REC.TA1LOC = "INVALID MAP NUMBER REQUESTED";
      TA1REC.TA1MAPNO = EP0PW00.EP0PW-MAP-DISP-SW; /* Map number*/
      TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program*/
      TA1REC.TA1PGMNO = EPWREC.XXXLOCID; /* Program loc*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error rtn*/


      /* ------------------------------------------------------------*/
      /* Exit to display the application system menu.*/
      /* ------------------------------------------------------------*/

      COMMAREA.CATOAP = "EP0M"; /* TO application*/

      XSEPS-EXIT(); /* Exit to another application*/


      /* ------------------------------------------------------------*/
      /* Abnormally terminate the transaction if the exit failed.*/
      /* ------------------------------------------------------------*/

      TA1REC.TA1FUNC = "ABND"; /* Termination function*/

      call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

    end

  end


end // end EP0P-10000

// DISPLAY MAP1 - CNTNR/ASN ENTRY
Function EP0P-11000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
   /*  */
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
   /*  */
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


  EP0P-11100(); /* Obtain the data to display*/

  EP0P-11200(); /* Format and display the map*/

  EP0P-11300(); /* Check attention identifier*/

  EP0P-11400(); /* Reset fields to normal intensity*/

  EP0P-11500(); /* Verify the entered data*/

  EP0P-11600(); /* Process valid input request*/


end // end EP0P-11000

// Obtain the data to display
Function EP0P-11100()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/


  if (EP0PW00.EP0PW-DATA-RQST-SW != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* clear the map storage area and save the key fields*/
   /* ------------------------------------------------------------*/

  set EP0PW01 empty; /* Map 1 storage*/

  EP0PW01.XWH-WHSE-CD = EP0PM001.XWH-WHSE-CD; /* WAREHOUSE code*/
  EP0PW01.SL-RCV-ASN-NBR = EP0PM001.SL-RCV-ASN-NBR; /* ASN number*/

  EP0PW00.EP0PW-MAP1-IX = 1; /* Initialize idx*/

  while (EP0PW00.EP0PW-MAP1-IX <= 12) /* Til end cntnrs*/

    EP0PW01.TS-CNTNR-NBR[EP0PW-MAP1-IX] = EP0PM001.TS-CNTNR-NBR[EP0PW-MAP1-IX]; /* CONTAINER*/

    EP0PW00.EP0PW-MAP1-IX = EP0PW00.EP0PW-MAP1-IX + 1; /* Increment indx*/

  end

  EP0PW01.SL-RCV-ASN-NBR = EP0PM001.SL-RCV-ASN-NBR; /* DCMS ASN nbr*/


   /* ------------------------------------------------------------*/
   /* Retrieve current date and time*/
   /* ------------------------------------------------------------*/

  XX0XS01(); /* obtain date and time*/

  EP0PM001.XXXCURDT = XX0XW01.XX0XWDAT; /* current date*/


   /* ------------------------------------------------------------*/
   /* If ezeaid is enter, normal processing*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter)

    EP0PW00.EP0PW-FIRST-TM-SW = "N"; /* first time switch*/

  end


   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete*/
   /* ------------------------------------------------------------*/

  EP0PW00.EP0PW-DATA-RQST-SW = "N"; /* request data switch*/


end // end EP0P-11100

// Format and converse MAP 1
Function EP0P-11200()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Error was found*/

    EPWREC.EPW-MSG-NO = converseVar.validationMsgNum; /* Message number*/

  else


    /* ------------------------------------------------------------*/
    /* if first time thru display map,else exit to next process*/
    /* ------------------------------------------------------------*/

    if (EP0PW00.EP0PW-FIRST-TM-SW == "N") /* first time switch*/

      return; /* return to next process*/

    end
  end


  if (EP0PW00.EP0PW-DATA-RQST-SW == "Y" /* request for data*/
   || converseVar.validationMsgNum == 0) /* no error*/

    if (EP0PW-MAP-FMAT-SW == "Y") /* format the map*/

      EP0P-11210(); /* format data on map*/

    end
  end


   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (EPWREC.EPW-MSG-NO != 0) /* Message to display*/

    if (EPWREC.EPW-MSG-NO == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(EPWREC.EPW-MSG-NO);
    end /* Message number*/

    EP0PM001.XXXMODID = EPWREC.XXXLOCID; /* Module identification*/

    set EP0PM001 alarm; /* Indicate sound alarm*/

  end


  converse EP0PM001 ;

   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  EPWREC.XXXLOCID = " "; /* Module id*/
  EPWREC.EPW-MSG-NO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = EP0PM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = EP0PM001.CAITEM; /* Application data*/


end // end EP0P-11200

// Format data on MAP 1
Function EP0P-11210()
   /* --------------------------------------------------------*/
   /* clear fields in the map storage area to be formated*/
   /* --------------------------------------------------------*/

  EP0PW01.XWH-WHSE-CD = COMMAREA.XWHCD; /* warehouse*/

  set EP0PM001 initial; /* Map 1*/

  EP0PW00.EP0PW-MAP-FMAT-SW = "N"; /* map format switch*/


   /* ---------------------------------------------------------*/
   /* format the data on the map.*/
   /* ---------------------------------------------------------*/

  EP0PM001.XWH-WHSE-CD = EP0PW01.XWH-WHSE-CD; /* WAREHOUSE CD*/

  move EP0PW01.TS-CNTNR-NBR to EP0PM001.TS-CNTNR-NBR[1] for all; /* CONTAINER*/

  EP0PM001.SL-RCV-ASN-NBR = EP0PW01.SL-RCV-ASN-NBR; /* DCMS ASN NBR*/


   /* ------------------------------------------------------*/
   /* position cursor - start at bottom of map, find*/
   /* first empty entry field*/
   /* ------------------------------------------------------*/

  if (converseVar.validationMsgNum == 0) /* no errors*/

    if (EP0PM001.SL-RCV-ASN-NBR == 0) /* empty ASN*/

      set EP0PM001.SL-RCV-ASN-NBR cursor;

    end

    if (" " in EP0PW01.TS-CNTNR-NBR) /* empty container*/

      EP0PW00.EP0PW-MAP1-IX = sysVar.arrayIndex; /* map index*/
      set EP0PM001.TS-CNTNR-NBR[EP0PW-MAP1-IX] cursor;

    end

    if (EP0PM001.XWH-WHSE-CD == " ") /* warehouse*/

      set EP0PM001.XWH-WHSE-CD cursor;

    end

  end


end // end EP0P-11210

// Check attention identifier
Function EP0P-11300()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is pa2) /* PA2 was pressed*/

    set EP0PW01 empty; /* Map 1 display storage*/

    EP0PW00.EP0PW-MAP-FMAT-SW = "Y"; /* Format the map switch*/
    EP0PW00.EP0PW-DATA-RQST-SW = "N"; /* Request for data switch*/
    EP0PW00.EP0PW-FIRST-TM-SW = "Y"; /* First time switch*/

    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/

  end


   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/

  if (EP0PM001.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      XSEPS-EXIT(); /* Exit to another application*/

      set EP0PM001.CATOAP cursor, bold; /* Highlight*/

    else

      EPWREC.XXXLOCID = "130"; /* Module identification*/
      converseLib.validationFailed(4); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end


   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf5) /* or PF6 was pressed*/

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "EP0M"; /* TO application*/
    end

    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
    end

    if (converseVar.eventKey is pf5) /* PF6 was pressed*/
      COMMAREA.CATOAP = "EP0M"; /* TO application*/
    end

    XSEPS-EXIT(); /* Exit to another application*/

    exit stack; /* Exit to display map*/

  end


   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction. Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter) /* ENTER was not pressed*/

    EPWREC.XXXLOCID = "130"; /* module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is invalid*/

    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* clear screen before display*/
    end

    exit stack; /* Exit to display map*/

  end


end // end EP0P-11300

// Reset highlighted fields MAP 1
Function EP0P-11400()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set EP0PM001.XWH-WHSE-CD initialAttributes; /* WAREHOUSE CD*/

  EP0PW00.EP0PW-MAP1-IX = 1; /* initialize index*/

  while (EP0PW00.EP0PW-MAP1-IX <= 12) /* until end*/

    set EP0PM001.TS-CNTNR-NBR[EP0PW-MAP1-IX] initialAttributes; /* CONTAINER*/

    EP0PW00.EP0PW-MAP1-IX = EP0PW00.EP0PW-MAP1-IX + 1; /* increment index*/

  end

  set EP0PM001.SL-RCV-ASN-NBR initialAttributes; /* DCMS ASN NBR*/

  set EP0PM001.CATOAP initialAttributes; /* TO application*/
  set EP0PM001.CAITEM initialAttributes; /* Application data*/


   /* ------------------------------------------------------------*/
   /* If no lists were requested. return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (EP0PM001.XWH-WHSE-CD == "?") /* Warehouse list requested*/

    if (converseVar.eventKey not enter) /* Enter was not pressed*/

      EPWREC.XXXLOCID = "140"; /* Module identification*/
      converseLib.validationFailed(4); /* PF key may not be used*/

      exit stack; /* Exit to display map*/

    end

  else

    return; /* ; Return to previous process*/

  end


end // end EP0P-11400

// Verify MAP 1 data entries
Function EP0P-11500()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/


  if (EP0PM001.CAITEM > " ") /* Application data was entered*/

    EPWREC.XXXLOCID = "1500"; /* Module identification*/
    set EP0PM001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(2); /* Enter only with FAST PATH*/

  end


   /* ------------------------------------------------------------*/
   /* Determine REQUEST type: by CONTAINER(S) or DCMS ASN NBR*/
   /* ------------------------------------------------------------*/

  EP0PW00.EP0PW-RQST-IND = " "; /* Rqst type ind*/
  EP0PW00.EP0PW-MAP1-IX = 12; /* Initialize index*/

  while (EP0PW00.EP0PW-MAP1-IX > 0) /* Until end*/

    if (EP0PM001.TS-CNTNR-NBR[EP0PW-MAP1-IX] != " ") /* Cntnrs requested*/

      EP0PW00.EP0PW-RQST-IND = "C"; /* Cntnr request*/

    end

    EP0PW00.EP0PW-MAP1-IX = EP0PW00.EP0PW-MAP1-IX - 1; /* Decrement line*/

  end


  if (EP0PW00.EP0PW-RQST-IND == "C")
    if (EP0PM001.SL-RCV-ASN-NBR > 0) /* CNTNRS & ASN*/

      converseLib.validationFailed(72); /* Not valid on C*/
      set EP0PM001.SL-RCV-ASN-NBR cursor, bold; /* Position cursor*/

      exit stack;

    end

  else
    if (EP0PM001.SL-RCV-ASN-NBR == 0) /* No entries*/

      converseLib.validationFailed(73); /* Cntnr or ASN rqd*/
      set EP0PM001.TS-CNTNR-NBR[1] cursor, bold;
      set EP0PM001.SL-RCV-ASN-NBR bold;

      exit stack;

    end
  end


   /* ------------------------------------------------------------*/
   /* If CONTAINER request, verify container(s) against ASN table.*/
   /* ------------------------------------------------------------*/

  if (EP0PW00.EP0PW-RQST-IND == "C") /* CONTAINER request*/

    EP0P-11510(); /* Verify cntnr entries*/

  end


   /* ------------------------------------------------------------*/
   /* If ASN request, verify ASN number against ASN table.*/
   /* ------------------------------------------------------------*/

  if (EP0PW00.EP0PW-RQST-IND == "A") /* DCMS ASN request*/

    EP0P-11520(); /* Verify ASN entry*/

  end


   /* ------------------------------------------------------------*/
   /* Verify the warehouse code and status.*/
   /* ------------------------------------------------------------*/

  if (EP0PM001.XWH-WHSE-CD in XWHTBL.XWHCD /* Code in table*/
   && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and active status*/

     /* NEXT SENTENCE*/

  else

    /* ------------------------------------------------------------*/
    /* If not found or inactive, indicate missing or invalid.*/
    /* ------------------------------------------------------------*/

    EPWREC.XXXLOCID = "1500"; /* Module identification*/
    set EP0PM001.XWH-WHSE-CD cursor, bold; /* Highlight*/
    converseLib.validationFailed(9); /* Field missing or invalid*/

  end


   /* ------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ------------------------------------------------------------*/

  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end

  EP0PW00.EP0PW-DATA-RQST-SW = "Y"; /* request for data switch*/


end // end EP0P-11500

// Validate CONTAINER list
Function EP0P-11510()
   /* --------------------------------------------------------*/
   /* Confirm and validate the entered list of containers.*/
   /* --------------------------------------------------------*/


  EP0PW00.EP0PW-MAP1-IX = 12; /* MAP1 cntnr idx*/

  while (EP0PW00.EP0PW-MAP1-IX > 0) /* Until end*/

    if (EP0PM001.TS-CNTNR-NBR[EP0PW-MAP1-IX] > " ") /* Cntnr entered*/

      EP0P-11511(); /* Open cntnr csr*/
      EP0P-11512(); /* Fetch & validate*/
      EP0P-11513(); /* Close cntnr csr*/

    end

    EP0PW00.EP0PW-MAP1-IX = EP0PW00.EP0PW-MAP1-IX - 1; /* Decrement index*/
  end


end // end EP0P-11510

// Declare csr on VASNHD02/cntnr
Function EP0P-11511()
   /* ------------------------------------------------------------*/
   /* Declare and open cursor on DSTLOC.VASNHD02*/
   /* ------------------------------------------------------------*/


  set VASNHD02 empty;

  VASNHD02.TS-CNTNR-NBR = EP0PM001.TS-CNTNR-NBR[EP0PW-MAP1-IX];
  VASNHD02.SL-RCV-ASN-NBR = -1;

  try
    call "VASNHD02" ("S2", SQLCA, VASNHD02) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  EPWREC.XXXLOCID = "1511"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* & resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination*/

  else

    converseLib.validationFailed(1); /* Unexpected error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination*/

    converseLib.clearScreen();
     /* Clear screen*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR         ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = EPWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VASNHD02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0P-11511

// Fetch csr on VASNHD02/cntnr
Function EP0P-11512()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/


  try
    call "VASNHD02" ("N2", SQLCA, VASNHD02) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Container with ASN*/

      return;

    else

      if (SQLCA.VAGen_SQLCODE == 100) /* Container with no ASN*/

        converseLib.validationFailed(70); /* No ASN for this container*/

        set EP0PM001.TS-CNTNR-NBR[EP0PW-MAP1-IX] cursor, bold;

        return; /* Return to previous process*/

      end
    end
  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  EPWREC.XXXLOCID = "1512"; /* Module*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* & resrce not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination*/

  else

    converseLib.validationFailed(1); /* Unexpected error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination*/

    converseLib.clearScreen();
     /* Clear screen*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = EPWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VASNHD02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  EP0P-11513(); /* Close csr VASNHD02*/

  exit stack; /* Exit to display map*/


end // end EP0P-11512

// Close csr on VASNHD02/cntnr
Function EP0P-11513()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/


  try
    call "VASNHD02" ("C2", SQLCA, VASNHD02) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  EPWREC.XXXLOCID = "1513"; /* MODULE ID*/
  converseLib.validationFailed(1); /* Error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination*/
  TA1REC.TA1TYPE = "DB2 "; /* Error type*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program*/
  TA1REC.TA1PGMNO = EPWREC.XXXLOCID; /* Module id*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base*/
  TA1REC.TA1TBLVU = "VASNHD02"; /* Table view*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Err routine*/

  exit stack; /* Exit*/


end // end EP0P-11513

// Validate DCMS ASN entry
Function EP0P-11520()
   /* --------------------------------------------------------*/
   /* Confirm and validate the entered DCMS ASN.*/
   /* --------------------------------------------------------*/


  EP0P-11521(); /* Open ASN csr*/
  EP0P-11522(); /* Fetch & validate*/
  EP0P-11523(); /* Close ASN csr*/

end // end EP0P-11520

// Declare csr on VASNHD02/asn
Function EP0P-11521()
   /* ------------------------------------------------------------*/
   /* Declare and open cursor on DSTLOC.VASNHD02*/
   /* ------------------------------------------------------------*/


  set VASNHD02 empty;

  VASNHD02.SL-RCV-ASN-NBR = EP0PM001.SL-RCV-ASN-NBR;
  VASNHD02.TS-CNTNR-NBR = "*";

  try
    call "VASNHD02" ("S2", SQLCA, VASNHD02) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  EPWREC.XXXLOCID = "1521"; /* Module identification*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* & resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination*/

  else

    converseLib.validationFailed(1); /* Unexpected error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination*/

    converseLib.clearScreen();
     /* Clear screen*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR         ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = EPWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VASNHD02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error routine*/

  exit stack; /* Exit to display map*/


end // end EP0P-11521

// Fetch csr on VASNHD02/asn
Function EP0P-11522()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/


  try
    call "VASNHD02" ("N2", SQLCA, VASNHD02) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Found valid ASN*/

      return; /* Return to previous process*/

    else

      if (SQLCA.VAGen_SQLCODE == 100) /* ASN not found*/

        converseLib.validationFailed(71); /* This ASN does not exist*/

        set EP0PM001.TS-CNTNR-NBR[EP0PW-MAP1-IX] cursor, bold;

        return; /* Return to previous process*/

      end
    end
  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  EPWREC.XXXLOCID = "1522"; /* Module*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* & resrce not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination*/

  else

    converseLib.validationFailed(1); /* Unexpected error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination*/

    converseLib.clearScreen();
     /* Clear screen*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = EPWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VASNHD02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  EP0P-11523(); /* Close csr VASNHD02*/

  exit stack; /* Exit to display map*/


end // end EP0P-11522

// Close csr on VASNHD02/asn
Function EP0P-11523()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* ------------------------------------------------------------*/


  try
    call "VASNHD02" ("C2", SQLCA, VASNHD02) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  EPWREC.XXXLOCID = "1523"; /* MODULE ID*/
  converseLib.validationFailed(1); /* Error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination*/
  TA1REC.TA1TYPE = "DB2 "; /* Error type*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program*/
  TA1REC.TA1PGMNO = EPWREC.XXXLOCID; /* Module id*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base*/
  TA1REC.TA1TBLVU = "VASNHD02"; /* Table view*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Err routine*/

  exit stack; /* Exit*/


end // end EP0P-11523

// PROCESS VALID INPUT REQUEST M1
Function EP0P-11600()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* update the commarea*/
   /* ------------------------------------------------------------*/


  EP0PW00.EP0PW-MAP-FMAT-SW = "Y"; /* Format map switch*/
  COMMAREA.XWHCD = EP0PM001.XWH-WHSE-CD; /* warehouse code*/


   /* --------------------------------------------------------*/
   /* Store validated list of containers.*/
   /* --------------------------------------------------------*/

  EP0PW00.EP0PW-MAP1-IX = 12; /* Set MAP1 index*/
  move " " to EP0PW01.TS-CNTNR-NBR[1] for all; /* Container array*/

  while (EP0PW00.EP0PW-MAP1-IX > 0) /* Until end*/

    if (EP0PM001.TS-CNTNR-NBR[EP0PW-MAP1-IX] > " ") /* Cntnr entered*/

      EP0PW01.TS-CNTNR-NBR[EP0PW-MAP1-IX] = EP0PM001.TS-CNTNR-NBR[EP0PW-MAP1-IX]; /* Store valid cntnr*/

    end

    EP0PW00.EP0PW-MAP1-IX = EP0PW00.EP0PW-MAP1-IX - 1; /* Decrement idx*/
  end

  EP0PW01.SL-RCV-ASN-NBR = EP0PM001.SL-RCV-ASN-NBR; /* Store ASN nbr*/


   /* --------------------------------------------------------*/
   /* Go to Map 2 to display ASN information requested by user.*/
   /* --------------------------------------------------------*/

  EP0PW00.EP0PW-MAP-DISP-SW = "2"; /* Display MAP 2*/
  EP0PW00.EP0PW-DATA-RQST-SW = "Y"; /* Request for data sw*/
  EP0PM002.XWH-WHSE-CD = EP0PW01.XWH-WHSE-CD; /* Default warehouse*/


end // end EP0P-11600

// DISPLAY MAP2 - ASN INQUIRY
Function EP0P-20000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
   /*  */
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
   /*  */
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/


  EP0P-21000(); /* Obtain the data to display*/

  EP0P-22000(); /* Format and display the map*/

  EP0P-23000(); /* Check attention identifier*/

  EP0P-24000(); /* Reset fields to normal intensity*/

  EP0P-25000(); /* Verify the entered data*/

  EP0P-26000(); /* Process valid input request*/


end // end EP0P-20000

// Obtain the data
Function EP0P-21000()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/


  if (EP0PW00.EP0PW-DATA-RQST-SW == "Y" /* Obtain data*/
   && converseVar.validationMsgNum == 0) /* or no error was found*/

    /* next sentence*/

  else

    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* Establish temporary storage length for MAP 2.*/
   /* ------------------------------------------------------------*/

  EP0PW00.XXXTSLEN = 686; /* Temp storage length*/


   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/

  if (EPWREC.EPW-MSG-NO == 0) /* No message to display*/

    EP0PW00.XXXTSPAG = 1; /* Page number to display*/

  end


   /* ------------------------------------------------------------*/
   /* Clear the map display storage area and save the key fields.*/
   /* ------------------------------------------------------------*/

  EP0P-23100(); /* Purge Temp Storage*/

  EP0PW02.XWH-WHSE-CD = EP0PM002.XWH-WHSE-CD; /* Warehouse code*/


   /* ------------------------------------------------------------*/
   /* Retrieve warehouse abbreviation.*/
   /* ------------------------------------------------------------*/

  if (EP0PW02.XWH-WHSE-CD in XWHTBL.XWHCD)
    EP0PW00.XWHABRV = XWHTBL.XWHABRV[sysVar.arrayIndex];
  end


   /* ------------------------------------------------------------*/
   /* Determine if request for ASN information is by ASN or by*/
   /* CONTAINER.  If by ASN, build cursor on ASN entered on Map 1*/
   /* if by CONTAINER pull in ASNs for each container entered on*/
   /* Map 1.*/
   /* ------------------------------------------------------------*/

  if (EP0PW-RQST-IND == "C") /* ASN info by container*/

    EP0P-21100(); /* Get ASNs by container(s)*/

  else /* ASN info by ASN number*/

    EP0P-21200(); /* Get ASNs by ASN number*/

  end


   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/

  EP0PW00.EP0PW-DATA-RQST-SW = "N"; /* Request for data switch*/
  EP0PW00.EP0PW-FIRST-TM-SW = "N"; /* First time flag*/


end // end EP0P-21000

// Get ASN data by CONTAINER
Function EP0P-21100()
   /* ------------------------------------------------------------*/
   /* Initialize indexes*/
   /* EP0PW-MAP1-IX:  Used to reference container array in EP0PW01*/
   /* EP0PW-MAP2-IX:  Used to reference detail array in EP0PW02*/
   /* ------------------------------------------------------------*/


  EP0PW00.EP0PW-MAP1-IX = 1; /* Container idx*/
  EP0PW00.EP0PW-MAP2-IX = 1; /* Map 2 detail idx*/


   /* ------------------------------------------------------------*/
   /* For each entered container obtain ASN information.*/
   /* ------------------------------------------------------------*/

  while (EP0PW00.EP0PW-MAP1-IX <= 12) /* Until GT 12*/

    if (EP0PW01.TS-CNTNR-NBR[EP0PW-MAP1-IX] != " ") /* At least 1 container*/


      /* --------------------------------------------------------*/
      /* Obtain all ASN headers for this container*/
      /* --------------------------------------------------------*/

      EP0PW00.EP0PW-ASNH-CSR-SW = "N"; /* Set ASN hdr csr sw*/

      EP0P-21110(); /* Open VASNHD02 csr*/
      EP0P-21120(); /* Fetch VASNHD02 row*/


      while (EP0PW00.EP0PW-ASNH-CSR-SW == "N") /* Until end of ASN hdrs*/


        /* --------------------------------------------------------*/
        /* Save data in display storage*/
        /* --------------------------------------------------------*/

        EP0PS-2000(); /* Display storage*/


        /* --------------------------------------------------------*/
        /* If page is full add it to temporary storage*/
        /* --------------------------------------------------------*/

   /* TT#16087 Changes begin*/
   /* IF EP0PW00.EP0PW-MAP2-IX GT 12;            /* page is full*/

   /* EP0PS-3000;                              /* Add page to temp stor*/
   /* MOVE 1 TO EP0PW00.EP0PW-MAP2-IX;         /* Display line index*/

   /* END;*/
   /* TT#16087 Changes end*/

        EP0P-21120(); /* Fetch VASNHD02 row*/

      end /* END OF ASN Hdr LOOP*/

      EP0P-21130(); /* Close VASNHD02 csr*/

    end

    EP0PW00.EP0PW-MAP1-IX = EP0PW00.EP0PW-MAP1-IX + 1;

  end


   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue*/
   /* ------------------------------------------------------------*/

  if (EP0PW00.EP0PW-MAP2-IX > 1) /* Page was formatted*/

    EP0PS-3000(); /* Add pg to temp store*/

  end


end // end EP0P-21100

// Open VASNHD02 csr - CONTAINER
Function EP0P-21110()
   /* ------------------------------------------------------------*/
   /* Declare and open cursor for DSTLOC.VASNHD02.*/
   /* ------------------------------------------------------------*/


  set VASNHD02 empty; /* Init record*/

  VASNHD02.TS-CNTNR-NBR = EP0PW01.TS-CNTNR-NBR[EP0PW-MAP1-IX]; /* Container*/
  VASNHD02.SL-RCV-ASN-NBR = -1; /* All ASNs*/


  try
    call "VASNHD02" ("S2", SQLCA, VASNHD02) {isNoRefresh = yes, isExternal = yes};
  end /* Open cursor*/


   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  EPWREC.XXXLOCID = "1110"; /* Module id*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* & resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR         ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = EPWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VASNHD02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0P-21110

// Fetch VASNHD02 csr - CONTAINER
Function EP0P-21120()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/


  try
    call "VASNHD02" ("N2", SQLCA, VASNHD02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/


   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end


    /* ------------------------------------------------------------*/
    /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      EP0PW00.EP0PW-ASNH-CSR-SW = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  EPWREC.XXXLOCID = "1120"; /* Module id*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* & resource not available*/

    converseLib.validationFailed(31); /* Contention*/
    TA1REC.TA1FUNC = "POST"; /* Termination*/

  else

    converseLib.validationFailed(1); /* Unexpected error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination*/

    converseLib.clearScreen();
     /* Clear screen*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program*/
  TA1REC.TA1PGMNO = EPWREC.XXXLOCID; /* Module*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VASNHD02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0P-21120

// Close VASNIT02 csr - CONTAINER
Function EP0P-21130()
   /* ------------------------------------------------------------*/
   /* Close cursor on DSTLOC.VASNHD02.*/
   /* ------------------------------------------------------------*/


  try
    call "VASNHD02" ("C2", SQLCA, VASNHD02) {isNoRefresh = yes, isExternal = yes};
  end /* Close cursor*/


   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL area*/

  EPWREC.XXXLOCID = "1160"; /* Module id*/
  converseLib.validationFailed(1); /* Unexpected*/

  TA1REC.TA1FUNC = "RETN"; /* Termination*/
  TA1REC.TA1TYPE = "DB2 "; /* Error type*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program*/
  TA1REC.TA1PGMNO = EPWREC.XXXLOCID; /* Module*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base*/
  TA1REC.TA1TBLVU = "VASNHD02"; /* Table view*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Err routine*/

  exit stack; /* Exit to map*/


end // end EP0P-21130

// Get ASN data by ASN number
Function EP0P-21200()
   /* ------------------------------------------------------------*/
   /* Initialize indexes*/
   /* EP0PW-MAP2-IX:  Used to reference detail array in EP0PW02*/
   /* ------------------------------------------------------------*/


  EP0PW00.EP0PW-MAP2-IX = 1; /* Map 2 detail idx*/


   /* ------------------------------------------------------------*/
   /* Obtain all containers for the entered ASN.*/
   /* ------------------------------------------------------------*/

  EP0PW00.EP0PW-ASNH-CSR-SW = "N"; /* Set ASN hdr csr sw*/

  EP0P-21210(); /* Open VASNHD02 csr*/
  EP0P-21220(); /* Fetch VASNHD02 row*/


  while (EP0PW00.EP0PW-ASNH-CSR-SW == "N") /* Until end of ASN hdrs*/


    /* --------------------------------------------------------*/
    /* Save data in display storage*/
    /* --------------------------------------------------------*/

    EP0PS-2000(); /* Display storage*/


    /* --------------------------------------------------------*/
    /* If page is full add it to temporary storage*/
    /* --------------------------------------------------------*/

    if (EP0PW00.EP0PW-MAP2-IX > 12) /* page is full*/

      EP0PS-3000(); /* Add page to temp stor*/
      EP0PW00.EP0PW-MAP2-IX = 1; /* Display line index*/

    end


    EP0P-21220(); /* Fetch VASNHD02 row*/

  end /* END OF ASN Hdr LOOP*/


  EP0P-21230(); /* Close VASNHD02 csr*/


   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue*/
   /* ------------------------------------------------------------*/

  if (EP0PW00.EP0PW-MAP2-IX > 1) /* Page was formatted*/

    EP0PS-3000(); /* Add pg to temp store*/

  end


end // end EP0P-21200

// Open VASNHD02 csr - ASN
Function EP0P-21210()
   /* ------------------------------------------------------------*/
   /* Declare and open cursor for DSTLOC.VASNHD02.*/
   /* ------------------------------------------------------------*/


  set VASNHD02 empty; /* Init record*/

  VASNHD02.SL-RCV-ASN-NBR = EP0PW01.SL-RCV-ASN-NBR; /* ASN number*/
  VASNHD02.TS-CNTNR-NBR = "*"; /* All cntnrs*/

  try
    call "VASNHD02" ("S2", SQLCA, VASNHD02) {isNoRefresh = yes, isExternal = yes};
  end /* Open cursor*/


   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  EPWREC.XXXLOCID = "1210"; /* Module id*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* & resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/

  else

    converseLib.validationFailed(1); /* Unexpected error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/

    converseLib.clearScreen();
     /* Clear screen*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OPEN CURSOR         ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = EPWREC.XXXLOCID; /* Program number*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VASNHD02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0P-21210

// Fetch VASNHD02 csr - ASN
Function EP0P-21220()
   /* ------------------------------------------------------------*/
   /* Fetch the next row to display from the table.*/
   /* ------------------------------------------------------------*/


  try
    call "VASNHD02" ("N2", SQLCA, VASNHD02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch next row*/


   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/

      return; /* Return to previous process*/

    end


    /* ------------------------------------------------------------*/
    /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/

    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/

      EP0PW00.EP0PW-ASNH-CSR-SW = "Y"; /* Indicate end of cursor*/

      return; /* Return to previous process*/

    end

  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/

  EPWREC.XXXLOCID = "1220"; /* Module id*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* & resource not available*/

    converseLib.validationFailed(31); /* Contention*/
    TA1REC.TA1FUNC = "POST"; /* Termination*/

  else

    converseLib.validationFailed(1); /* Unexpected error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination*/

    converseLib.clearScreen();
     /* Clear screen*/

  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH NEXT TABLE ROW";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program*/
  TA1REC.TA1PGMNO = EPWREC.XXXLOCID; /* Module*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VASNHD02"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0P-21220

// Close VASNHD02 csr - ASN
Function EP0P-21230()
   /* ------------------------------------------------------------*/
   /* Close cursor on DSTLOC.VASNHD02.*/
   /* ------------------------------------------------------------*/


  try
    call "VASNHD02" ("C2", SQLCA, VASNHD02) {isNoRefresh = yes, isExternal = yes};
  end /* Close cursor*/


   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL area*/

  EPWREC.XXXLOCID = "1260"; /* Module id*/
  converseLib.validationFailed(1); /* Unexpected*/

  TA1REC.TA1FUNC = "RETN"; /* Termination*/
  TA1REC.TA1TYPE = "DB2 "; /* Error type*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program*/
  TA1REC.TA1PGMNO = EPWREC.XXXLOCID; /* Module*/
  TA1REC.TA1DBASE = "DSTLOC  "; /* Data base*/
  TA1REC.TA1TBLVU = "VASNHD02"; /* Table view*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Err routine*/

  exit stack; /* Exit to map*/


end // end EP0P-21230

// Format and converse the map
Function EP0P-22000()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/


  if (converseVar.validationMsgNum != 0) /* Error was found*/

    EPWREC.EPW-MSG-NO = converseVar.validationMsgNum; /* Message number*/

  end


   /* ------------------------------------------------------------*/
   /* If obtain data failed or no error, format data to display.*/
   /* ------------------------------------------------------------*/

  if (EP0PW00.EP0PW-DATA-RQST-SW == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/

    if (EP0PW00.EP0PW-MAP-FMAT-SW == "Y") /* Must be formatted*/

      EP0P-22100(); /* Format data on map*/

    end
  end


   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/

  EP0PM002.XXX-CURR-DT = VGVar.currentShortGregorianDate; /* Current date*/

  EP0PM002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  EP0PM002.CAITEM = COMMAREA.CAITEM; /* Application data*/


   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/

  if (EPWREC.EPW-MSG-NO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/

    if (EPWREC.EPW-MSG-NO != 0) /* Message to display*/

      if (EPWREC.EPW-MSG-NO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(EPWREC.EPW-MSG-NO);
      end /* Message number*/

    else

      EP0PM002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/

    end

    EP0PM002.XXX-MSG-LOC-ID = EPWREC.XXXLOCID; /* Module id*/

    set EP0PM002 alarm; /* Sound alarm*/

  end


  converse EP0PM002 ;


   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/

  EPWREC.XXXLOCID = " "; /* Module id*/
  EPWREC.EPW-MSG-NO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = EP0PM002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = EP0PM002.CAITEM; /* Application data*/


end // end EP0P-22000

// Format the display data
Function EP0P-22100()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/


  EP0PW02.XWH-WHSE-CD = EP0PM002.XWH-WHSE-CD; /* warehouse code*/
  EP0PW02.XWHABRV = EP0PM002.XWHABRV; /* warehouse abrv*/

  set EP0PM002 initial; /* Map 2*/

  EP0PW00.EP0PW-MAP-FMAT-SW = "N"; /* Format the map*/


   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/

  if (EP0PW00.TA5TSQIX > 0) /* Pages were formatted*/

    if (EP0PW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Another page desired*/


      /* ------------------------------------------------------------*/
      /* If the desired page number is greater than the highest page*/
      /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/

      if (EP0PW00.XXXTSPAG > EP0PW00.TA5TSQIX) /* Desired > highest*/

        EP0PW00.XXXTSPAG = EP0PW00.TA5TSQIX; /* Default to highest*/

      end

      EP0PS-1000(); /* Obtain temp stor page*/

    end


    /* ------------------------------------------------------------*/
    /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/

    set EP0PM002.XXX-CURR-PAGE-DESC skip; /* "PAGE" literal*/
    EP0PM002.XXX-CURR-PAGE-NBR = EP0PW00.XXXTSPAG; /* Current page*/
    set EP0PM002.XXX-HI-PAGE-DESC skip; /* "OF" literal*/
    EP0PM002.XXX-HI-PAGE-NBR = EP0PW00.TA5TSQIX; /* Highest page*/

  end


   /* ------------------------------------------------------------*/
   /* Format the data in the map from the display storage.*/
   /* ------------------------------------------------------------*/

  set EP0PM002.CATOAP cursor; /* Position cursor*/

  EP0PM002.XWH-WHSE-CD = EP0PW02.XWH-WHSE-CD; /* Warehouse code*/
  EP0PM002.XWHABRV = EP0PW02.XWHABRV; /* Warehouse abrv*/

  EP0PW00.EP0PW-MAP2-IX = 1; /* Init line index*/


  while (EP0PW00.EP0PW-MAP2-IX <= 12) /* Til screen full*/


    EP0PM002.TS-CNTNR-NBR[EP0PW-MAP2-IX] = EP0PW02.TS-CNTNR-NBR[EP0PW-MAP2-IX]; /* Container*/
    EP0PM002.SL-RCV-ASN-NBR[EP0PW-MAP2-IX] = EP0PW02.SL-RCV-ASN-NBR[EP0PW-MAP2-IX]; /* ASN*/
    /* MOVE EP0PW02.TS-NIKE-SHP-ID(EP0PW-MAP2-IX)*/
        /* TO EP0PM002.TS-NIKE-SHP-ID(EP0PW-MAP2-IX); /* NIKE Ship Id*/
   /* sap shipment id*/
    EP0PM002.SL-SAP-SHP-ID[EP0PW-MAP2-IX] = EP0PW02.SL-SAP-SHP-ID[EP0PW-MAP2-IX];
   /* sap dlvr id*/
    EP0PM002.SL-SAP-DLVR-ID[EP0PW-MAP2-IX] = EP0PW02.SL-SAP-DLVR-ID[EP0PW-MAP2-IX];
    EP0PM002.PC-PO-NBR[EP0PW-MAP2-IX] = EP0PW02.PC-PO-NBR[EP0PW-MAP2-IX]; /* P.O. Number*/
    EP0PM002.TF-CARR-CD[EP0PW-MAP2-IX] = EP0PW02.TF-CARR-CD[EP0PW-MAP2-IX]; /* Carrier Code*/
    EP0PM002.FY-FCTY-XREF-NBR[EP0PW-MAP2-IX] = EP0PW02.FY-FCTY-XREF-NBR[EP0PW-MAP2-IX]; /* DCMS Fcty xref*/
    EP0PM002.SL-ASN-TOT-CRTNQTY[EP0PW-MAP2-IX] = EP0PW02.SL-ASN-TOT-CRTNQTY[EP0PW-MAP2-IX]; /* Total Cartons*/


    EP0PW00.EP0PW-MAP2-IX = EP0PW00.EP0PW-MAP2-IX + 1; /* Increment index*/

  end


end // end EP0P-22100

// Check attention identifier
Function EP0P-23000()
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/


  if (EP0PM002.CATOAP > " ") /* FAST PATH was requested*/

    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      EP0PS-4000(); /* Update EPWREC*/
      EP0P-23100(); /* Purge temporary storage*/

      XSEPS-EXIT(); /* Exit to another appl*/

      set EP0PM002.CATOAP cursor, bold; /* Highlight*/
      EP0PW00.EP0PW-MAP-DISP-SW = "1"; /* Display map 1*/

    else

      EPWREC.XXXLOCID = "3000"; /* Module id*/
      converseLib.validationFailed(4); /* PA/PF key may not be used*/

    end

    exit stack; /* Exit to display map*/

  end


   /* -----------------------------------------------------------*/
   /* Update the fields in the EPWREC*/
   /* -----------------------------------------------------------*/

  if (converseVar.eventKey is pf5)

    EP0PS-4000();

  end


   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf3 /* Exit to prior level*/
   || converseVar.eventKey is pf4 /* Exit to master menu*/
   || converseVar.eventKey is pf5) /* Exit to EP system menu*/


    if (converseVar.eventKey is pf3) /* PF3 was pressed*/

      move " " to EP0PW01.TS-CNTNR-NBR[1] for all; /* Ccontainer*/
      EP0PW01.SL-RCV-ASN-NBR = 0; /* ASN number*/

      EP0PW00.EP0PW-FIRST-TM-SW = "Y"; /* first time switch*/
      EP0PW00.EP0PW-DATA-RQST-SW = "N"; /* Request for data switch*/
      EP0PW00.EP0PW-MAP-DISP-SW = "1"; /* map to be displayed switch*/
      EP0PW00.EP0PW-MAP-FMAT-SW = "Y"; /* format the map switch*/

      exit stack;

    end

    if (converseVar.eventKey is pf4) /* Exit to master menu*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
    end

    if (converseVar.eventKey is pf5) /* Exit to EP system menu*/
      COMMAREA.CATOAP = "EP0M"; /* TO application*/
    end


    EP0P-23100(); /* Purge temp storage*/
    XSEPS-EXIT(); /* Exit to another appl*/
    EP0PW00.EP0PW-MAP-DISP-SW = "1"; /* Display Map 1*/

    exit stack; /* Exit to display map*/

  end


   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8)  /* and PF8 was not pressed*/

    EPWREC.XXXLOCID = "3000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/

    exit stack; /* Exit to display map*/

  end


end // end EP0P-23000

// Purge any temporary storage
Function EP0P-23100()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/


  set EP0PW02 empty; /* Map2 display storage*/

  EP0PW00.EP0PW-TSPAGE-UPDT-SW = "N"; /* Storage update sw*/

  TA5REC.TA5TSQIX = 0; /* Current page number*/
  EP0PW00.TA5TSQIX = 0; /* Highest page number*/


   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application id*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (EP0PW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/


   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* & normal return code*/

    return; /* Rtn to prior process*/

  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parms*/

  EPWREC.XXXLOCID = "3100"; /* Module id*/
  converseLib.validationFailed(1); /* Unexpected error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program*/
  TA1REC.TA1PGMNO = EPWREC.XXXLOCID; /* Module*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error routine*/

  exit stack; /* Exit to map*/


end // end EP0P-23100

// Reset highlighted fields
Function EP0P-24000()
   /* ------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set EP0PM002.CATOAP initialAttributes; /* TO application*/
  set EP0PM002.CAITEM initialAttributes; /* Application data*/

end // end EP0P-24000

// Verify data that was entered
Function EP0P-25000()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/


  if (EP0PM002.CAITEM > " ") /* Application data was entered*/

    EPWREC.XXXLOCID = "5000"; /* Module identification*/
    set EP0PM002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(2); /* Enter only with FAST PATH*/

  end


   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    EP0P-25100(); /* Verify scroll request*/

    if (converseVar.validationMsgNum != 0)

      exit stack; /* Exit to display Map 2*/

    else

      return; /* Return to prior module*/

    end

  end


  if (converseVar.validationMsgNum != 0) /* errors were found*/
    exit stack; /* exit to display map*/
  end


end // end EP0P-25000

// Verify scroll request
Function EP0P-25100()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && EP0PW00.XXXTSPAG < 2)       /* and no previous pages*/

    EPWREC.XXXLOCID = "5100"; /* Module id*/
    converseLib.validationFailed(7); /* No previous page*/

  end


   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && EP0PW00.XXXTSPAG >= EP0PW00.TA5TSQIX) /* and no more pages*/

    EPWREC.XXXLOCID = "5100"; /* Module identification*/
    converseLib.validationFailed(8); /* No more pages to display*/

  end


end // end EP0P-25100

// Process valid input request
Function EP0P-26000()
   /* ------------------------------------------------------------*/
   /* Indicate that the map must be formatted before display.*/
   /* ------------------------------------------------------------*/


  EP0PW00.EP0PW-MAP-FMAT-SW = "Y"; /* Format the map switch*/


   /* ------------------------------------------------------------*/
   /* If a scroll backward was requested, decrement the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf7) /* Scroll back requested*/

    EP0PW00.XXXTSPAG = EP0PW00.XXXTSPAG - 1; /* Decrement page number*/

    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* If a scroll forward was requested, increment the page*/
   /* number and return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is pf8) /* Scroll forward requested*/

    EP0PW00.XXXTSPAG = EP0PW00.XXXTSPAG + 1; /* Increment page number*/

    return; /* Return to previous process*/

  end


end // end EP0P-26000

// Read temporary storage page
Function EP0PS-1000()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/


  EP0PW02.XXXTSLEN = EP0PW00.XXXTSLEN; /* Temp storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application*/
  TA5REC.TA5TSQIX = EP0PW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (EP0PW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/


   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP rtn cd*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Sub parms*/

  EPWREC.XXXLOCID = "S02"; /* Module id*/
  converseLib.validationFailed(1); /* Error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination*/
  TA1REC.TA1TYPE = "APPL"; /* Error type*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program*/
  TA1REC.TA1PGMNO = EPWREC.XXXLOCID; /* Module*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Err routine*/

  exit stack; /* Exit*/


end // end EP0PS-1000

// Save data in display storage
Function EP0PS-2000()
   /* ------------------------------------------------------------*/
   /* Save the data from the table row in display storage.*/
   /* ------------------------------------------------------------*/


  if (EP0PW00.EP0PW-MAP2-IX == 1)

    EP0PW02.XWH-WHSE-CD = EP0PW01.XWH-WHSE-CD; /* Warehouse*/
    EP0PW02.XWHABRV = EP0PW00.XWHABRV; /* Warehouse abrv*/

  end


  EP0PW02.TS-CNTNR-NBR[EP0PW-MAP2-IX] = VASNHD02.TS-CNTNR-NBR; /* Container Nbr*/
  EP0PW02.SL-RCV-ASN-NBR[EP0PW-MAP2-IX] = VASNHD02.SL-RCV-ASN-NBR; /* DCMS ASN nbr*/

  EP0PW02.SL-SAP-SHP-ID[EP0PW-MAP2-IX] = VASNHD02.SL-SAP-SHP-ID; /* SAP Shipment Id*/
  EP0PW00.SAP-SHP-ID = VASNHD02.SL-SAP-SHP-ID;

   /* TT#16087 START*/
  EP0PW02.PC-PO-NBR[EP0PW-MAP2-IX] = VASNHD02.PC-PO-NBR; /* P.O. Number*/
  EP0PW02.TF-CARR-CD[EP0PW-MAP2-IX] = VASNHD02.TF-CARR-CD;
  EP0PW02.FY-FCTY-XREF-NBR[EP0PW-MAP2-IX] = VASNHD02.FY-FCTY-XREF-NBR; /* DCMS Fcty Xref*/
   /* TT#16087 END*/
   /* Get the delivery ID for the container/po/shipment id*/
  VRCVPH01.SL-SAP-SHP-ID = VASNHD02.SL-SAP-SHP-ID; /* SAP Shipment Id*/
  VRCVPH01.TS3CNTNR = VASNHD02.TS-CNTNR-NBR; /* Container Number*/
  VRCVPH01.PC-SAP-PO-NBR = VASNHD02.PC-SAP-PO-NBR; /* SAP PO Number*/
  VRCVPH01.PC3PONBR = VASNHD02.PC-PO-NBR; /* GOAL PO Number*/

   /* TT#16087 Changes begin*/
   /* XSSLS-SU-VRCVPH01;*/
  EP0PW00.EP0PW-VRCP-CSR-SW = "N";

  EP0PS-S3-VRCVPH01();

  while (EP0PW00.EP0PW-VRCP-CSR-SW == "N")

    if (EP0PW02.TS-CNTNR-NBR[EP0PW-MAP2-IX] != " ")

      EP0PW02.SL-ASN-TOT-CRTNQTY[EP0PW-MAP2-IX] = VASNHD02.SL-ASN-TOT-CRTNQTY;

      EP0PW00.EP0PW-MAP2-IX = EP0PW00.EP0PW-MAP2-IX + 1;

      if (EP0PW00.EP0PW-MAP2-IX > 12) /* page is full*/

        EP0PS-3000(); /* Add page to temp stor*/
        EP0PW00.EP0PW-MAP2-IX = 1; /* Display line index*/

      end

    else

      EP0PS-N3-VRCVPH01();

      if (SQLCA.VAGen_SQLCODE == 0)

        EP0PW02.SL-SAP-DLVR-ID[EP0PW-MAP2-IX] = VRCVPH01.SL-SAP-DLVR-ID; /* SAP Deliver Id*/

   /* TT#16087 changes begin*/

        set VRCVPI01 empty;

        VRCVPI01.SL-SAP-SHP-ID = EP0PW00.SAP-SHP-ID;
        VRCVPI01.SL-SAP-DLVR-ID = EP0PW02.SL-SAP-DLVR-ID[EP0PW-MAP2-IX];

        EP0PS-SC-VRCVPI01();

        EP0PW02.SL-ASN-TOT-CRTNQTY[EP0PW-MAP2-IX] = EP0PW03.EP0PW-EPWCOUNT; /* Total cartons*/

        EP0PW00.EP0PW-MAP2-IX = EP0PW00.EP0PW-MAP2-IX + 1; /* increment cntr*/

        if (EP0PW00.EP0PW-MAP2-IX > 12) /* page is full*/

          EP0PS-3000(); /* Add page to temp stor*/
          EP0PW00.EP0PW-MAP2-IX = 1; /* Display line index*/

        end
      end
    end
  end
  EP0PS-C3-VRCVPH01();
   /* TT#16087 Changes end*/


end // end EP0PS-2000

// Add page to temporary storage
Function EP0PS-3000()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/


  EP0PW02.XXXTSLEN = EP0PW00.XXXTSLEN; /* Temp storage length*/

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (EP0PW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/


   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* & normal return code*/

    set EP0PW02 empty; /* Map2 display storage*/

    EP0PW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/

    return; /* Return*/

  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/

  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return cd*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subrtn parms*/

  EPWREC.XXXLOCID = "S21"; /* Module id*/
  converseLib.validationFailed(1); /* Error*/

  TA1REC.TA1FUNC = "RETN"; /* Termination*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program*/
  TA1REC.TA1PGMNO = EPWREC.XXXLOCID; /* Module*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map*/
  TA1REC.TA1MAPNO = "M002"; /* Map number*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error routine*/

  exit stack; /* Exit*/


end // end EP0PS-3000

// update the slwrec
Function EP0PS-4000()

   /* ----------------------------------------------------*/
   /* Update EPWREC before leaving application.*/
   /* ----------------------------------------------------*/

   /* Note required at this time*/

end // end EP0PS-4000

// select : rcv pack hdr  : su
Function EP0PS-C3-VRCVPH01()


   /* ************************************************************/
   /* *** select unique row from:  product location           ****/
   /* *** using the std module:  VRCVPH01                     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -811 = duplicates found                           ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* ************************************************************/

  call "VRCVPH01" ("C3", SQLCA, VRCVPH01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911
   || SQLCA.VAGen_SQLCODE == -811)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSSLOCSU";
  TA1REC.TA1LOCAT[1] = "VRCVPH01";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VRCVPH01";
  TA1REC.TA1TBLKE = VRCVPH01.RCVPHKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end EP0PS-C3-VRCVPH01

// select : rcv pack hdr  : su
Function EP0PS-N3-VRCVPH01()


   /* ************************************************************/
   /* *** select unique row from:  product location           ****/
   /* *** using the std module:  VRCVPH01                     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -811 = duplicates found                           ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* ************************************************************/

  call "VRCVPH01" ("N3", SQLCA, VRCVPH01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end

  if (SQLCA.VAGen_SQLCODE == +100)
    EP0PW00.EP0PW-VRCP-CSR-SW = "Y";
    return;
  end

  if (SQLCA.VAGen_SQLCODE == -911
   || SQLCA.VAGen_SQLCODE == -811)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSSLOCSU";
  TA1REC.TA1LOCAT[1] = "VRCVPH01";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VRCVPH01";
  TA1REC.TA1TBLKE = VRCVPH01.RCVPHKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end EP0PS-N3-VRCVPH01

// select : rcv pack hdr  : su
Function EP0PS-S3-VRCVPH01()


   /* ************************************************************/
   /* *** select unique row from:  product location           ****/
   /* *** using the std module:  VRCVPH01                     ****/
   /* *** return codes:                                       ****/
   /* ***      0 = successful                                 ****/
   /* ***   +100 = not found                                  ****/
   /* ***   -811 = duplicates found                           ****/
   /* ***          note: do NOT clear screen                  ****/
   /* ***   -911 = deadlock - resource unavailable            ****/
   /* ***     <0 = db/severe error                            ****/
   /* ***          note: TA0020 will be executed              ****/
   /* ************************************************************/

   /* ************************************************************/
   /* *** select unique row                                   ****/
   /* ************************************************************/

  call "VRCVPH01" ("S3", SQLCA, VRCVPH01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  end


  if (SQLCA.VAGen_SQLCODE == -911
   || SQLCA.VAGen_SQLCODE == -811
   || SQLCA.VAGen_SQLCODE == 100)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end

  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "XSSLOCSU";
  TA1REC.TA1LOCAT[1] = "VRCVPH01";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "UNIQUE  ";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VRCVPH01";
  TA1REC.TA1TBLKE = VRCVPH01.RCVPHKEY;
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};

   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end EP0PS-S3-VRCVPH01

// Read temporary storage page
Function EP0PS-SC-VRCVPI01()
   /* ------------------------------------------------------------*/
   /* Obtain the Count for the total number of records in VRCVPI01*/
   /* ------------------------------------------------------------*/


  set SQLCA empty;

  EP0PW03.EP0PW-EPWCOUNT = 0; /* INIT THE COUNT*/
  EP0PW03.EP0PW-EPWTASK = "SC"; /* MOVE SC TO FUNCTION*/
   /* MOVE EP0PW00.SAP-SHP-ID(EP0PW-MAP2-IX) TO VRCVPI01.SL-SAP-SHP-ID;*/
   /* MOVE EP0PW02.SL-SAP-DLVR-ID(EP0PW-MAP2-IX) TO VRCVPI01.SL-SAP-DLVR-ID;*/


  try
    call "VRCVPI01" (EP0PW03, SQLCA, VRCVPI01) {isNoRefresh = yes, isExternal = yes};
  end


   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/

  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  if (SQLCA.VAGen_SQLCODE == -911
   || SQLCA.VAGen_SQLCODE == -811
   || SQLCA.VAGen_SQLCODE == 100)
    TA1REC.TA1FUNC = "POST";
  else
    TA1REC.TA1FUNC = "RETN";
  end
  TA1REC.TA1TYPE = "DB2 ";
  TA1REC.TA1PGMNM = "EP0PS-SC-VRCVPI01";
  TA1REC.TA1LOCAT[1] = "VRCVPI01";
  TA1REC.TA1LOCAT[3] = "SELECT  ";
  TA1REC.TA1LOCAT[4] = "COUNT(*)";
  TA1REC.TA1DBASE = "DSTLOC  ";
  TA1REC.TA1TBLVU = "VRCVPI01";
  move SQLCA to ERRSQLCA withV60Compat;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback();
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};


   /* ************************************************************/
   /* *** end of STATEMENT GROUP                              ****/
   /* ************************************************************/


end // end EP0PS-SC-VRCVPI01

//*** RECORD=EP0PW00 ****
// ---------------------------------
// EP0P application working storage.
// ---------------------------------
// ***********************
Record EP0PW00 type basicRecord
  10 EP0PW-MAP1-IX EP0PW-MAP1-IX ; 
  10 EP0PW-MAP2-IX EP0PW-MAP2-IX ; 
  10 EP0PW-CIX EP0PW-CIX ; 
  10 EP0PW-MAP-DISP-SW EP0PW-MAP-DISP-SW ; 
  10 EP0PW-CNTNR-RQST-FL EP0PW-CNTNR-RQST-FL ; 
  10 EP0PW-RQST-IND EP0PW-RQST-IND ; 
  10 EP0PW-MAP-FMAT-SW EP0PW-MAP-FMAT-SW ; 
  10 EP0PW-ASNH-CSR-SW EP0PW-ASNH-CSR-SW ; 
  10 EP0PW-VRCP-CSR-SW EP0PW-VRCP-CSR-SW ; 
  10 EP0PW-ASNI-CSR-SW EP0PW-ASNI-CSR-SW ; 
  10 EP0PW-FIRST-TM-SW EP0PW-FIRST-TM-SW ; 
  10 EP0PW-DATA-RQST-SW EP0PW-DATA-RQST-SW ; 
  10 EP0PW-FUNCTION-IND EP0PW-FUNCTION-IND ; 
  10 EP0PW-TSPAGE-UPDT-SW EP0PW-TSPAGE-UPDT-SW ; 
  10 XWH-WHSE-CD XWH-WHSE-CD ; 
  10 XWHABRV XWHABRV ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 EP0PW-TEMPSTOR-SUM EP0PW-TEMPSTOR-SUM ; 
  10 EP0PW-SEARCH-DONE-SW EP0PW-SEARCH-DONE-SW ; 
  10 SAP-SHP-ID char(10) ; // Search done flag
end // end EP0PW00

//*** RECORD=EP0PW01 ****
// -------------------------------
// Map 001 display storage record.
// -------------------------------
// ***********************
Record EP0PW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(174) ; 
    10 XWH-WHSE-CD XWH-WHSE-CD ; 
    10 TS-CNTNR-NBR TS-CNTNR-NBR [12] ; 
    10 SL-RCV-ASN-NBR SL-RCV-ASN-NBR ; 
end // end EP0PW01

//*** RECORD=EP0PW02 ****
// -------------------------------
// Map 002 display storage record.
// -------------------------------
// ***********************
Record EP0PW02 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(686) ; 
    10 XWH-WHSE-CD XWH-WHSE-CD ; 
    10 XWHABRV XWHABRV ; 
    10 TS-CNTNR-NBR TS-CNTNR-NBR [12] ; 
    10 SL-RCV-ASN-NBR SL-RCV-ASN-NBR [12] ; 
    10 TS-NIKE-SHP-ID TS-NIKE-SHP-ID [12] ; 
    10 PC-PO-NBR PC-PO-NBR [12] ; 
    10 TF-CARR-CD TF-CARR-CD [12] ; 
    10 FY-FCTY-XREF-NBR FY-FCTY-XREF-NBR [12] ; 
    10 SL-ASN-TOT-CRTNQTY SL-ASN-TOT-CRTNQTY [12] ; 
    10 SL-SAP-SHP-ID SL-SAP-SHP-ID [12] ; 
    10 SL-SAP-DLVR-ID SL-SAP-DLVR-ID [12] ; 
end // end EP0PW02

//*** RECORD=EP0PW03 ****
// -------------------------------
// Calling IO1470 working storage.
// -------------------------------
// 
// ***********************
Record EP0PW03 type basicRecord
  5 EP0PW-EPWGROUP EP0PW-EPWGROUP ; 
    10 EP0PW-EPWTASK EP0PW-EPWTASK ; 
    10 EP0PW-EPWCOUNT EP0PW-EPWCOUNT ; 
end // end EP0PW03

//*** RECORD=VASNHD02 ****
// ********************* ASN HEADER TABLE *********************
// 
// DB2 TABLE VIEW:      DSTLOC.VASNHD01
// 
// COPYLIB MEMBER:      dasnhd01
// 
// I/O MODULE:          vasnhd01
// 
// KEY TO DB2 TABLE:    sl-rcv-asn-nbr
// 
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ---------------------------------------
// 03/05/98   esmit2   new csp record
// ************************
Record VASNHD02 type basicRecord
  5 VASNHD02-GROUP VASNHD02-GROUP ; 
    10 VASNHD02-KEY VASNHD02-KEY ; 
      15 SL-RCV-ASN-NBR SL-RCV-ASN-NBR ; 
    10 TS-CNTNR-NBR TS-CNTNR-NBR ; 
    10 TS-NIKE-SHP-ID TS-NIKE-SHP-ID ; 
    10 SL-SAP-SHP-ID SL-SAP-SHP-ID ; 
    10 FY-FCTY-XREF-NBR FY-FCTY-XREF-NBR ; 
    10 TS-EST-DEST-DT TS-EST-DEST-DT ; 
    10 TF-CARR-CD TF-CARR-CD ; 
    10 TS-BOL TS-BOL ; 
    10 TS-SHP-TOT-KG TS-SHP-TOT-KG ; 
    10 SL-ASN-TOT-CRTNQTY SL-ASN-TOT-CRTNQTY ; 
    10 XGP-GPC-CD XGP-GPC-CD ; 
    10 PC-PO-NBR PC-PO-NBR ; 
    10 PC-SAP-PO-NBR PC-SAP-PO-NBR ; 
    10 SL-RCVAUTH-STATIND SL-RCVAUTH-STATIND ; 
    10 PK-SENT-TO-DCMS-FL PK-SENT-TO-DCMS-FL ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZ-SETUP-HHMM ZZ-SETUP-HHMM ; 
    10 XXX-USER-ID XXX-USER-ID ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end VASNHD02

// ASN Header Cursor SW
DataItem EP0PW-ASNH-CSR-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ASN item csr switch
DataItem EP0PW-ASNI-CSR-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// EP0P INDEX
DataItem EP0PW-CIX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Container Request Flag
DataItem EP0PW-CNTNR-RQST-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Request For Data Switch
DataItem EP0PW-DATA-RQST-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Call i/o request type
DataItem EP0PW-EPWCOUNT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem EP0PW-EPWGROUP char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Call i/o request type
DataItem EP0PW-EPWTASK char(2)  {
  align = none, fillCharacter = nullFill, inputRequired = no
}
end

// First Time Switch
DataItem EP0PW-FIRST-TM-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Function Flag
DataItem EP0PW-FUNCTION-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map to be displayed SW
DataItem EP0PW-MAP-DISP-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map SW
DataItem EP0PW-MAP-FMAT-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for Map 1 fields
DataItem EP0PW-MAP1-IX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for Map 2 fields
DataItem EP0PW-MAP2-IX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Rqst Ind: C ontainer or A SN
DataItem EP0PW-RQST-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Search done flag
DataItem EP0PW-SEARCH-DONE-SW char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Temp sum store
DataItem EP0PW-TEMPSTOR-SUM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Storage page update SW
DataItem EP0PW-TSPAGE-UPDT-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ASN Header Cursor SW
DataItem EP0PW-VRCP-CSR-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PK_SENT_DCMS_FL
DataItem PK-SENT-TO-DCMS-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SL_ASN_TOT_CRTNQTY
DataItem SL-ASN-TOT-CRTNQTY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SL_RCV_ASN_NBR
DataItem SL-RCV-ASN-NBR int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// SL_RCVAUTH_STATIND
DataItem SL-RCVAUTH-STATIND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS_CNTNR_NBR
DataItem TS-CNTNR-NBR char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Record group level
DataItem VASNHD02-GROUP char(107)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key group level
DataItem VASNHD02-KEY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

