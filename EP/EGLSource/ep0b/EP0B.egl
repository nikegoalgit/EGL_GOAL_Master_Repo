package ep0b;
import corpcom1.*;
import corpcom2.*;
import corpcom3.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import ep.common.*;
import fk.common.*;
import fy.common.*;
import ku.common.*;
import pg.common.*;
import pk.common.*;
import sp.common.*;
import sy.common.*;
import ta.common.*;
import tf.common.*;
import vv.common.*;
//*** PROGRAM=EP0B ****
// Special processing codes are used to convey VAS (value
// added service) instructions to DCMS. The codes, or
// instructions, are grouped by "source". Each "source"
// represents a logical grouping of the instructions. Foe
// example, hanging, label attachement and label stock are
// each a unique source.
// 
// This screen, EP0B, is used to display all of the special
// processing codes, or special processing codes associated
// with a single source. It is not an editing screen, but
// rather, an inquiry screen that can be used to select other
// screens.
// 
// EP0B is a pagable screen that assumes all special
// processing codes should be displayed when the screen is
// conversed. Once it is conversed, the user has the ability
// to:
//    1. select special processing codes for a specific source
//    2. re-sort the selection by DCMS code
//    3. page forward/back
//    4. select a specific record for use in the associated
// variable fields screen or use in the instruction screen.
// 
// The user may exit to any allowed application, via FAST PATH
// or PF key, at any time.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE    USERID  DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      05/18/98  OVAZQU  New application.
// multgpc  08/06/99  OENFIE  regenerate to pick up changes to
//                            XPEP-00000
// multgpc  08/09/99  OENFIE  changed EP0BS-EXIT to move the
//                            correct values to COMMAREA.
//                            changed EP0B-14300 & EP0B-15100
//                            to transfer to EP0D when the
//                            SRCE CD is 'ATEQ'.
// *********************
Program EP0B type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "EP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  EP0BW00 EP0BW00; // record
  EP0BW01 EP0BW01; // record
  EP0BW02 EP0BW02; // record
  EP0BW03 EP0BW03; // record
  EPWREC EPWREC; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  TFWREC TFWREC; // record
  VSPRCD01 VSPRCD01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use YLATBL {deleteAfterUse = yes}; // table
  use SPRCTBL {deleteAfterUse = yes}; // table
  use PLYBTBL {deleteAfterUse = yes}; // table
  use EP0BM.EP0BM001,  // forms
      EP0BM.XX0XM001
   {
    helpKey = pf13,
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPEP-00000: XPEP-00000();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    set EP0BM001 initial; /* M001 input/output*/
    set EP0BW00 empty; /* Working storage*/
    set EP0BW01 empty; /* M001 display storage*/
    set EP0BW02 empty; /* Working user area*/
    set EP0BW03 empty; /* Working user area*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Temporary storage parameters*/
    set VSPRCD01 empty; /* Special Processing record layout*/
    set SY1REC empty; /* Style record layout*/
    set XX0XW02 empty; /* Pop-up screen parameters*/

    EP0BW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/
    EP0BW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
    EP0BW00.XXX-TEMP-STG-LNTH = 862; /* Temporary storage length*/
    EP0BW00.XXX-INX-LMT-NBR = 13; /* Number of lines on a page*/


     /* ------------------------------------------------------------*/
     /* Initialize any fields passed from another application.*/
     /* ------------------------------------------------------------*/
    if (COMMAREA.CAITEM > " ") /* Data was passed*/
      EP0BM001.EP0BM-SPRC-SRCE-CD = COMMAREA.CAITEM;
      COMMAREA.CAITEM = " "; /* Clear passed data*/
    end

     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto EP0B-00000; /* Converse the main process*/


    EP0B-00000: EP0B-00000();
     /* ------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* ------------------------------------------------------------*/

    goto EP0B-00000; /* Converse the main process*/


  end // end main
end // end EP0B

// Determine which map to display
Function EP0B-00000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) display the map.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  EP0B-10000(); /* Display map 1*/

  exit stack; /* Exit to display map*/


end // end EP0B-00000

// Main process to display a map
Function EP0B-10000()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Verify the data that was entered.*/
   /* 5) Process a valid input request.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  EP0B-11000(); /* Obtain the data to display*/

  EP0B-12000(); /* Format and display the map*/

  EP0B-13000(); /* Check attention identifier*/

  EP0B-14000(); /* Verify the entered data*/

  EP0B-15000(); /* Process valid input request*/



end // end EP0B-10000

// Obtain the data to display
Function EP0B-11000()
   /* ------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* ------------------------------------------------------------*/
  if (EP0BW00.XXX-RQT-DATA-FL != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/

    return; /* Return to previous process*/
  end


   /* ------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* ------------------------------------------------------------*/
  if (EP0BW00.XXX-MSG-NBR == 0) /* No message to display*/
    EP0BW00.XXX-CURR-PAGE-NBR = 1; /* Page number to display*/
  end


   /* ------------------------------------------------------------*/
   /* Purge any pages from temporary storage and save key fields.*/
   /* ------------------------------------------------------------*/
  EP0BS-TA0050-P(); /* Purge any temporary storage*/

  EP0BW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
  EP0BW00.EP0BW-SPRC-SRCE-CD = EP0BM001.EP0BM-SPRC-SRCE-CD; /* source request from map*/


   /* ------------------------------------------------------------*/
   /* Select and open the cursor for the set to be formatted.*/
   /* ------------------------------------------------------------*/
  set VSPRCD01 empty; /* Clear row storage area*/
  VSPRCD01.PK-GSPRC-SRCE-CD = EP0BW00.EP0BW-SPRC-SRCE-CD;

  if (EP0BW00.EP0BW-DCMS-SORT-FL == "Y")
    if (EP0BW00.EP0BW-SPRC-SRCE-CD > " ") /* source on map?*/
      EP0BW03.EP0BW-IO-TASK = "S2";
    else
      EP0BW03.EP0BW-IO-TASK = "S4"; /* get all*/
    end
  else
    if (EP0BW00.EP0BW-SPRC-SRCE-CD > " ") /* source on map?*/
      EP0BW03.EP0BW-IO-TASK = "S1";
    else
      EP0BW03.EP0BW-IO-TASK = "S3"; /* get all*/
    end
  end

  EP0BS-VSPRCD01-OPN(); /* Select set and open cursor*/

  EP0BW00.EP0BW-SRCE-EOF-FL = "N"; /* End of cursor flag*/
  if (EP0BW03.EP0BW-IO-TASK == "S1")
    EP0BW03.EP0BW-IO-TASK = "N1";
  else
    if (EP0BW03.EP0BW-IO-TASK == "S2")
      EP0BW03.EP0BW-IO-TASK = "N2";
    else
      if (EP0BW03.EP0BW-IO-TASK == "S3")
        EP0BW03.EP0BW-IO-TASK = "N3";
      else
        EP0BW03.EP0BW-IO-TASK = "N4";
      end
    end
  end

  EP0BS-VSPRCD01-FTC(); /* Fetch first row in cursor*/

   /* ------------------------------------------------------------*/
   /* Format the data into pages & fetch next until end of cursor.*/
   /* ------------------------------------------------------------*/
  EP0BW00.EP0BW-WINDX = 1; /* Display line index*/

  while (EP0BW00.EP0BW-SRCE-EOF-FL == "N") /* Until end of cursor*/

    if (VSPRCD01.PK-GSPRC-SRCE-CD == "LEVL" /* skip levl for apparel*/
     || VSPRCD01.PK-GSPRC-SRCE-CD == "LVEQ" /* skip levl for equipment*/
     || VSPRCD01.PK-GSPRC-SRCE-CD == "STEP") /* skip step*/
      /* continue*/
    else
      EP0BW01.PK-GOAL-SPRC-CD[EP0BW-WINDX] = VSPRCD01.PK-GOAL-SPRC-CD;
      EP0BW01.PK-GSPRC-SRCE-CD[EP0BW-WINDX] = VSPRCD01.PK-GSPRC-SRCE-CD;
      EP0BW01.PK-DCMS-SPRC-CD[EP0BW-WINDX] = VSPRCD01.PK-DCMS-SPRC-CD;
      EP0BW01.PK-DCMS-SINST-TXT[EP0BW-WINDX] = VSPRCD01.PK-DCMS-SINST-TXT;
      if (PK-SPCL-PROC-VAR1 > " "
       || PK-SPCL-PROC-VAR2 > " "
       || PK-SPCL-PROC-VAR3 > " "
       || PK-SPCL-PROC-VAR4 > " "
       || PK-SPCL-PROC-VAR5 > " ")
        EP0BW01.EP0BW-ADDL-VAR-FL[EP0BW-WINDX] = "Y";
      else
        EP0BW01.EP0BW-ADDL-VAR-FL[EP0BW-WINDX] = "N";
      end

      EP0B-11100(); /* get goal spec proc desc*/

      EP0BW00.EP0BW-WINDX = EP0BW00.EP0BW-WINDX + 1; /* incr line indx*/

      /* ------------------------------------------------------------*/
      /* If the page is full, add the page to the storage queue.*/
      /* ------------------------------------------------------------*/
      if (EP0BW00.EP0BW-WINDX > EP0BW00.XXX-INX-LMT-NBR) /* Page is full*/
        EP0BS-TA0050-A(); /* Add page to temporary storage*/
        EP0BW00.EP0BW-WINDX = 1; /* Display line index*/
      end
    end

    EP0BS-VSPRCD01-FTC(); /* Fetch next row in cursor*/
  end


   /* ------------------------------------------------------------*/
   /* Add any partially formatted last page to the queue.*/
   /* ------------------------------------------------------------*/
  if (EP0BW00.EP0BW-WINDX > 1) /* Page was formatted*/
    EP0BS-TA0050-A(); /* Add page to temporary storage*/
  end


   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set.*/
   /* ------------------------------------------------------------*/
  if (EP0BW03.EP0BW-IO-TASK == "N1")
    EP0BW03.EP0BW-IO-TASK = "C1";
  else
    if (EP0BW03.EP0BW-IO-TASK == "N2")
      EP0BW03.EP0BW-IO-TASK = "C2";
    else
      if (EP0BW03.EP0BW-IO-TASK == "N3")
        EP0BW03.EP0BW-IO-TASK = "C3";
      else
        EP0BW03.EP0BW-IO-TASK = "C4";
      end
    end
  end

  EP0BS-VSPRCD01-CLS(); /* Close selected set cursor*/


   /* ------------------------------------------------------------*/
   /* If no pages were formatted, indicate no data to display.*/
   /* ------------------------------------------------------------*/
  if (EP0BW00.XXX-HI-PAGE-NBR == 0) /* No pages formatted*/
    EP0BW00.XXX-MSG-LOC-ID = "11000"; /* Message location*/
    set EP0BM001.EP0BM-SPRC-SRCE-CD cursor, bold;
    converseLib.validationFailed(12); /* No data was found to display*/
    exit stack; /* Exit to display map*/
  end


   /* ------------------------------------------------------------*/
   /* Indicate that the request for data is complete.*/
   /* ------------------------------------------------------------*/
  EP0BW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/


end // end EP0B-11000

// Get goal spec proc desc
Function EP0B-11100()
   /* ------------------------------------------------------------*/
   /* Get goal special processing description*/
   /* ------------------------------------------------------------*/
  EP0BW01.PK-GOAL-SPRC-DESC[EP0BW-WINDX] = " ";

  if (EP0BW01.PK-GOAL-SPRC-CD[EP0BW-WINDX] == "**")
    EP0BW01.PK-GOAL-SPRC-DESC[EP0BW-WINDX] = "GENERIC MESSAGE";
  else
    if (EP0BW01.PK-GOAL-SPRC-CD[EP0BW-WINDX] == "******")
      EP0BW01.PK-GOAL-SPRC-DESC[EP0BW-WINDX] = "GENERIC OVERRIDE";
    else
      if (EP0BW01.PK-GSPRC-SRCE-CD[EP0BW-WINDX] == "HNGR")
        set SY1REC empty;
        SY1REC.XGPCD = "04";
        SY1REC.SY1STNBR = EP0BW01.PK-GOAL-SPRC-CD[EP0BW-WINDX];
        EP0BS-VSTYLE01-SEL(); /* get style01 row*/
        if (SY1REC.SY1SSTNM > " ")
          EP0BW01.PK-GOAL-SPRC-DESC[EP0BW-WINDX] = SY1REC.SY1SSTNM;
        else
          EP0BW01.PK-GOAL-SPRC-DESC[EP0BW-WINDX] = "UNKNOWN";
        end
      else
        if (EP0BW01.PK-GSPRC-SRCE-CD[EP0BW-WINDX] == "ATCH")
          if (EP0BW01.PK-GOAL-SPRC-CD[EP0BW-WINDX] in YLATBL.YLACD)
            EP0BW01.PK-GOAL-SPRC-DESC[EP0BW-WINDX] = YLATBL.YLAABRV[sysVar.arrayIndex];
          else
            EP0BW01.PK-GOAL-SPRC-DESC[EP0BW-WINDX] = "UNKNOWN";
          end
        else
          if (EP0BW01.PK-GSPRC-SRCE-CD[EP0BW-WINDX] == "PLYB")
            if (EP0BW01.PK-GOAL-SPRC-CD[EP0BW-WINDX]
             in PLYBTBL.PK-GOAL-SPRC-CD)
              EP0BW01.PK-GOAL-SPRC-DESC[EP0BW-WINDX] = PLYBTBL.PK-GOAL-SPRC-DESC[sysVar.arrayIndex];
            else
              EP0BW01.PK-GOAL-SPRC-DESC[EP0BW-WINDX] = "UNKNOWN";
            end
          end
        end
      end
    end
  end


end // end EP0B-11100

// Format and converse the map
Function EP0B-12000()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    EP0BW00.XXX-MSG-NBR = converseVar.validationMsgNum; /* Message number*/
  end


   /* ------------------------------------------------------------*/
   /* If the map must be formatted, format the data in the map.*/
   /* ------------------------------------------------------------*/
  if (EP0BW00.XXX-MAP-FMAT-FL == "Y") /* Map must be formatted*/
    EP0B-12100(); /* Format the data in the map*/
  end


   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  EP0BM001.XXX-CURR-DT = VGVar.currentShortGregorianDate; /* Current date*/
  EP0BM001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  EP0BM001.CAITEM = COMMAREA.CAITEM; /* Application data*/


   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  if (EP0BW00.XXX-MSG-NBR != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ")   /* or message text*/

    if (EP0BW00.XXX-MSG-NBR != 0) /* Message to display*/
      if (EP0BW00.XXX-MSG-NBR == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(EP0BW00.XXX-MSG-NBR);
      end /* Message number*/
    else
      EP0BM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
    end

    EP0BM001.XXX-MSG-LOC-ID = EP0BW00.XXX-MSG-LOC-ID;
    set EP0BM001 alarm; /* Indicate sound alarm*/
  end


  converse EP0BM001 ;


   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  EP0BW00.XXX-MSG-LOC-ID = " "; /* Message location*/
  EP0BW00.XXX-MSG-NBR = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/

  COMMAREA.CATOAP = EP0BM001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = EP0BM001.CAITEM; /* Application data*/


   /* ------------------------------------------------------------*/
   /* Reset modifiable field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/
  set EP0BM001.EP0BM-SPRC-SRCE-CD normal; /* srce rqst*/

  EP0BW00.EP0BW-WINDX = 1; /* Initialize line index*/

  while (EP0BW00.EP0BW-WINDX <= EP0BW00.XXX-INX-LMT-NBR /* until e-o-scrn*/
   && EP0BM001.PK-GOAL-SPRC-CD[EP0BW-WINDX] > " ") /* or no more lines*/

    set EP0BM001.XXX-LN-SEL-IND[EP0BW-WINDX] normal;

    EP0BW00.EP0BW-WINDX = EP0BW00.EP0BW-WINDX + 1;
  end

  set EP0BM001.CATOAP normal; /* TO application*/
  set EP0BM001.CAITEM normal; /* Application data*/


end // end EP0B-12000

// Format the data in the map
Function EP0B-12100()
   /* ------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* ------------------------------------------------------------*/
  set EP0BM001 initial; /* M001 input/output area*/

  EP0BM001.EP0BM-SPRC-SRCE-CD = EP0BW00.EP0BW-SPRC-SRCE-CD;


  EP0BW00.XXX-MAP-FMAT-FL = "N"; /* Format the map flag*/


   /* ------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed,*/
   /* obtain the desired page from temporary storage.*/
   /* ------------------------------------------------------------*/
  if (EP0BW00.XXX-HI-PAGE-NBR > 0) /* Pages were formatted*/

    if (EP0BW00.XXX-CURR-PAGE-NBR != TA5REC.TA5TSQIX)
                                   /* Desired page not current*/
      /* ------------------------------------------------------------*/
      /* If the current page has been changed, update the page in*/
      /* storage before obtaining the next one to display.*/
      /* ------------------------------------------------------------*/
      if (EP0BW00.XXX-PAGE-UPD-FL == "Y") /* Current page was changed*/

        EP0BS-TA0050-U(); /* Update temporary storage page*/
        EP0BW00.XXX-PAGE-UPD-FL = "N"; /* Page update flag*/
      end

      /* ------------------------------------------------------------*/
      /* If the desired page number is greater than the highest page*/
      /* in storage, default to the highest page number.*/
      /* ------------------------------------------------------------*/
      if (EP0BW00.XXX-CURR-PAGE-NBR > EP0BW00.XXX-HI-PAGE-NBR)
                                   /* Desired greater highest*/
        EP0BW00.XXX-CURR-PAGE-NBR = EP0BW00.XXX-HI-PAGE-NBR;
                                   /* Default to highest*/
      end

      EP0BS-TA0050-R(); /* Read temporary storage page*/
    end

    /* ------------------------------------------------------------*/
    /* Display the page information on the screen.*/
    /* ------------------------------------------------------------*/
    set EP0BM001.XXX-CURR-PAGE-DESC skip; /* "PAGE" literal*/
    EP0BM001.XXX-CURR-PAGE-NBR = EP0BW00.XXX-CURR-PAGE-NBR;
                                   /* Current page*/
    set EP0BM001.XXX-HI-PAGE-DESC skip; /* "OF" literal*/
    EP0BM001.XXX-HI-PAGE-NBR = EP0BW00.XXX-HI-PAGE-NBR;
                                   /* Highest page*/
  end


   /* ------------------------------------------------------------*/
   /* Format the map fields from the display storage area.*/
   /* ------------------------------------------------------------*/
  EP0BW00.EP0BW-WINDX = 1; /* Initialize line index*/

  while (EP0BW00.EP0BW-WINDX <= EP0BW00.XXX-INX-LMT-NBR) /* fill page*/

    if (EP0BW01.PK-GOAL-SPRC-CD[EP0BW-WINDX] > " ")
      if (EP0BW00.EP0BW-WINDX == 1) /* First select field*/
        set EP0BM001.XXX-LN-SEL-IND[EP0BW-WINDX] cursor, normal;
      else
        set EP0BM001.XXX-LN-SEL-IND[EP0BW-WINDX] normal;
      end
    end

    EP0BM001.XXX-LN-SEL-IND[EP0BW-WINDX] = EP0BW01.XXX-LN-SEL-IND[EP0BW-WINDX];
    EP0BM001.PK-GOAL-SPRC-CD[EP0BW-WINDX] = EP0BW01.PK-GOAL-SPRC-CD[EP0BW-WINDX];
    EP0BM001.PK-GOAL-SPRC-DESC[EP0BW-WINDX] = EP0BW01.PK-GOAL-SPRC-DESC[EP0BW-WINDX];
    EP0BM001.PK-GSPRC-SRCE-CD[EP0BW-WINDX] = EP0BW01.PK-GSPRC-SRCE-CD[EP0BW-WINDX];
    EP0BM001.EP0BM-ADDL-VAR-FL[EP0BW-WINDX] = EP0BW01.EP0BW-ADDL-VAR-FL[EP0BW-WINDX];
    EP0BM001.PK-DCMS-SPRC-CD[EP0BW-WINDX] = EP0BW01.PK-DCMS-SPRC-CD[EP0BW-WINDX];
    EP0BM001.PK-DCMS-SINST-TXT[EP0BW-WINDX] = EP0BW01.PK-DCMS-SINST-TXT[EP0BW-WINDX];

    EP0BW00.EP0BW-WINDX = EP0BW00.EP0BW-WINDX + 1; /* incr line indx*/
  end


end // end EP0B-12100

// Check attention identifier
Function EP0B-13000()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, clear the map fields and exit.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    if (EP0BW00.XXX-RQT-DATA-FL == "Y") /* Request for data pending*/
      set EP0BW01 empty; /* M001 display storage*/
    end

    EP0BW00.XXX-RQT-DATA-FL = "N"; /* Request for data flag*/
    EP0BW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/
    COMMAREA.CATOAP = " "; /* TO application*/
    COMMAREA.CAITEM = " "; /* Application data*/

    exit stack; /* Exit to display map*/
  end


   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  if (EP0BM001.CATOAP > " ") /* FAST PATH was requested*/
    if (converseVar.eventKey is enter) /* ENTER was pressed*/

      EP0BS-TA0050-P(); /* Purge any temporary storage*/
      EP0BS-EXIT(); /* Exit to another application*/

      set EP0BM001.CATOAP cursor, bold; /* Highlight*/
    else
      EP0BW00.XXX-MSG-LOC-ID = "13000"; /* Message location*/
      converseLib.validationFailed(18); /* PA/PF key may not be used*/
    end

    exit stack; /* Exit to display map*/
  end


   /* ------------------------------------------------------------*/
   /* If a PF key transfer requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf2 /* or PF2 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "EP0BM001"; /* Application find code*/
    end

    if (converseVar.eventKey is pf2) /* PF2 was pressed*/
      EP0BW02.PK-GSPRC-SRCE-CD = EP0BM001.EP0BM-SPRC-SRCE-CD; /* srce*/
      COMMAREA.CATOAP = "EP0C"; /* Maint. special processing codes*/
    end

    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "EP0A"; /* System Menu*/
    end

    EP0BS-TA0050-P(); /* Purge any temporary storage*/
    EP0BS-EXIT(); /* Exit to another application*/

    exit stack; /* Exit to display map*/
  end


   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf5   /* and PF5 was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf9   /* and PF9 was not pressed*/
   && converseVar.eventKey not pf12) /* and PF12 was not pressed*/

    EP0BW00.XXX-MSG-LOC-ID = "13000"; /* Message location*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end

    exit stack; /* Exit to display map*/
  end


end // end EP0B-13000

// Verify data that was entered
Function EP0B-14000()
   /* ------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ------------------------------------------------------------*/
  if (EP0BM001.CAITEM > " ") /* Application data was entered*/
    EP0BW00.XXX-MSG-LOC-ID = "14000"; /* Message location*/
    converseLib.validationFailed(9); /* Enter only with FAST PATH*/
    set EP0BM001.CATOAP cursor, bold; /* Highlight*/
  end


   /* ------------------------------------------------------------*/
   /* If pf key requested, determine if any other field changed.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf5 /* or update variables request*/
   || converseVar.eventKey is pf7 /* or scroll back request*/
   || converseVar.eventKey is pf8 /* or scroll forward request*/
   || converseVar.eventKey is pf9 /* or pop-up screen request*/
   || converseVar.eventKey is pf12) /* or dcms codes sort request*/

    EP0B-14100(); /* Highlight any changed fields*/
  end


    /* ------------------------------------------------------------*/
    /* if PF5 verify that process can be transfered to a variables*/
    /* screen.*/
    /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf5) /* Update variables request*/
    EP0B-14300(); /* Verify variables scrn available*/
  end


    /* ------------------------------------------------------------*/
    /* Determine whether a valid request to scroll was entered.*/
    /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/

    EP0B-14200(); /* Verify scroll request*/
  end


    /* ------------------------------------------------------------*/
    /* If key field changed, determine if any other field changed.*/
    /* ------------------------------------------------------------*/
  if (converseVar.eventKey is enter)

    if (EP0BW00.XXX-HI-PAGE-NBR > 0) /* Page was formatted*/
      EP0BW00.EP0BW-WINDX = EP0BW00.XXX-INX-LMT-NBR;
                                   /* Line index*/
      while (EP0BW00.EP0BW-WINDX > 0) /* Until end of lines*/

        if (EP0BM001.XXX-LN-SEL-IND[EP0BW-WINDX] != " ")
          EP0BW00.XXX-MSG-LOC-ID = "14000"; /* Message location*/
          converseLib.validationFailed(11); /* invalid data (with enter)*/
          set EP0BM001.XXX-LN-SEL-IND[EP0BW-WINDX] cursor, bold;
        end

        EP0BW00.EP0BW-WINDX = EP0BW00.EP0BW-WINDX - 1; /* decr line indx*/
      end
    end

    if (EP0BM001.EP0BM-SPRC-SRCE-CD == "LEVL"
     || EP0BM001.EP0BM-SPRC-SRCE-CD == "STEP")
      EP0BW00.XXX-MSG-LOC-ID = "14000"; /* Message location*/
      converseLib.validationFailed(11); /* invalid data*/
      set EP0BM001.EP0BM-SPRC-SRCE-CD cursor, bold;
    end
  end


   /* ------------------------------------------------------------*/
   /* If any error was found, exit to display the map.*/
   /* ------------------------------------------------------------*/
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    exit stack; /* Exit to display map*/
  end


end // end EP0B-14000

// Highlight any changed fields
Function EP0B-14100()
   /* ------------------------------------------------------------*/
   /* If a modifiable field was changed, indicate that field may*/
   /* not be changed when key is changed or a pf key is pressed.*/
   /* ------------------------------------------------------------*/
  EP0BW00.EP0BW-WINDX = EP0BW00.XXX-INX-LMT-NBR; /* Line index*/

  while (EP0BW00.EP0BW-WINDX > 0) /* Until end of lines*/

    if (EP0BM001.XXX-LN-SEL-IND[EP0BW-WINDX] == " ")
       /* continue*/
    else
      if (EP0BM001.XXX-LN-SEL-IND[EP0BW-WINDX] == "S"
       && converseVar.eventKey is pf5)
         /* continue*/
      else
        EP0BW00.XXX-MSG-LOC-ID = "14100"; /* Message location*/
        converseLib.validationFailed(11); /* Invalid data on field*/
        set EP0BM001.XXX-LN-SEL-IND[EP0BW-WINDX] cursor, bold;
      end
    end

    EP0BW00.EP0BW-WINDX = EP0BW00.EP0BW-WINDX - 1; /* decr line indx*/
  end


  if (EP0BM001.EP0BM-SPRC-SRCE-CD != EP0BW00.EP0BW-SPRC-SRCE-CD)
    EP0BW00.XXX-MSG-LOC-ID = "14100"; /* Message location*/
    converseLib.validationFailed(18); /* valid only with <enter>*/
    set EP0BM001.EP0BM-SPRC-SRCE-CD cursor, bold; /* Highlight*/
  end


end // end EP0B-14100

// Verify scroll request
Function EP0B-14200()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && EP0BW00.XXX-CURR-PAGE-NBR < 2) /* and no previous pages*/

    EP0BW00.XXX-MSG-LOC-ID = "14200"; /* Message location*/
    converseLib.validationFailed(7); /* No previous page to display*/
  end


   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && EP0BW00.XXX-CURR-PAGE-NBR >= EP0BW00.XXX-HI-PAGE-NBR)
                                   /* and no more pages*/
    EP0BW00.XXX-MSG-LOC-ID = "14200"; /* Message location*/
    converseLib.validationFailed(8); /* No more pages to display*/
  end


end // end EP0B-14200

// Validate PF5
Function EP0B-14300()
   /* ------------------------------------------------------------*/
   /* Determine where to go when PF5 (variables maintenance) is*/
   /* requested.*/
   /* ------------------------------------------------------------*/
  EP0BW00.EP0BW-ENTRY-FOUND-FL = "N";
  EP0BW00.EP0BW-WINDX = EP0BW00.XXX-INX-LMT-NBR;

  while (EP0BW00.EP0BW-WINDX > 0)

    if (EP0BM001.XXX-LN-SEL-IND[EP0BW-WINDX] == "S")
      if (EP0BW01.PK-GSPRC-SRCE-CD[EP0BW-WINDX] == "ATCH" 
       || EP0BW01.PK-GSPRC-SRCE-CD[EP0BW-WINDX] == "ATEQ" /* MULTGPC*/
       || EP0BW01.PK-GSPRC-SRCE-CD[EP0BW-WINDX] == "HNGR")
        EP0BW00.EP0BW-ENTRY-FOUND-FL = "Y";
      else
        EP0BW00.XXX-MSG-LOC-ID = "14300"; /* Message location*/
        converseLib.validationFailed(389); /* no varaible screen avlble*/
        set EP0BM001.XXX-LN-SEL-IND[EP0BW-WINDX] cursor, bold;
      end
    end

    EP0BW00.EP0BW-WINDX = EP0BW00.EP0BW-WINDX - 1; /* decr line indx*/
  end


  if (converseVar.validationMsgNum == 0 /* no errors found yet*/
   && EP0BW00.EP0BW-ENTRY-FOUND-FL == "N") /* and no entry found yet*/

    if (EP0BM001.EP0BM-SPRC-SRCE-CD == " ")
      EP0BW00.XXX-MSG-LOC-ID = "14300"; /* Message location*/
      converseLib.validationFailed(5); /* select a rec or enter srce*/
      set EP0BM001.EP0BM-SPRC-SRCE-CD cursor, bold;
    else
      if (EP0BM001.EP0BM-SPRC-SRCE-CD == "ATCH" 
       || EP0BM001.EP0BM-SPRC-SRCE-CD == "ATEQ" /* changed by MULTGPC*/
       || EP0BM001.EP0BM-SPRC-SRCE-CD == "HNGR")
         /* continue*/
      else
        EP0BW00.XXX-MSG-LOC-ID = "14300"; /* Message location*/
        converseLib.validationFailed(389); /* no variable scrn avlble*/
        set EP0BM001.EP0BM-SPRC-SRCE-CD cursor, bold;
      end
    end
  end



end // end EP0B-14300

// Process valid input request
Function EP0B-15000()
   /* ------------------------------------------------------------*/
   /* If the key fields changed, request the data to display.*/
   /* ------------------------------------------------------------*/
  if (EP0BM001.EP0BM-SPRC-SRCE-CD != EP0BW00.EP0BW-SPRC-SRCE-CD)

    EP0BW00.EP0BW-SPRC-SRCE-CD = EP0BM001.EP0BM-SPRC-SRCE-CD;
    EP0BW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/

    return; /* Return to previous process*/
  end


   /* ------------------------------------------------------------*/
   /* If variables function requested*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf5) /* Go to appropriate variables screen*/
    EP0B-15100();

    return; /* Return to previous process*/
  end


   /* ------------------------------------------------------------*/
   /* If scroll backward was requested, decrement the page number.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    EP0BW00.XXX-CURR-PAGE-NBR = EP0BW00.XXX-CURR-PAGE-NBR - 1;
                                   /* Decrement page number*/
    EP0BW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    return; /* Return to previous process*/
  end


   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, increment the page number.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    EP0BW00.XXX-CURR-PAGE-NBR = EP0BW00.XXX-CURR-PAGE-NBR + 1;
                                   /* Increment page number*/
    EP0BW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    return; /* Return to previous process*/
  end


   /* ------------------------------------------------------------*/
   /* If pop-up screen for source was requested*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf9) /* Sources pop-up screen requested*/
    EP0B-15200();

    return; /* Return to previous process*/
  end


   /* ------------------------------------------------------------*/
   /* If DCMS code sort was requested, set indicators for it.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf12) /* DCMS code sort request*/
    if (EP0BW00.EP0BW-DCMS-SORT-FL == "Y")
      EP0BW00.EP0BW-DCMS-SORT-FL = "N";
    else
      EP0BW00.EP0BW-DCMS-SORT-FL = "Y";
    end
    EP0BW00.XXX-RQT-DATA-FL = "Y"; /* Request for data flag*/
    EP0BW00.XXX-MAP-FMAT-FL = "Y"; /* Format the map flag*/

    return; /* Return to previous process*/
  end


end // end EP0B-15000

// Go to Variables screen
Function EP0B-15100()
   /* ------------------------------------------------------------*/
   /* Determine where to go when PF5 (variables maintenance) is*/
   /* requested.*/
   /* ------------------------------------------------------------*/
  EP0BW00.EP0BW-ENTRY-FOUND-FL = "N";
  set EP0BW02 empty; /* reset user area to pass*/
  EP0BW00.EP0BW-WINDX = 1;

  while (EP0BW00.EP0BW-WINDX <= EP0BW00.XXX-INX-LMT-NBR
   && EP0BW00.EP0BW-ENTRY-FOUND-FL == "N")

    if (EP0BM001.XXX-LN-SEL-IND[EP0BW-WINDX] == "S")
      if (EP0BW01.PK-GSPRC-SRCE-CD[EP0BW-WINDX] == "ATCH"
       /* <----  MULTGPC (BEGIN)  ----->*/
       || EP0BW01.PK-GSPRC-SRCE-CD[EP0BW-WINDX] == "ATEQ"
       /* <----  MULTGPC (END)  ----->*/
       || EP0BW01.PK-GSPRC-SRCE-CD[EP0BW-WINDX] == "HNGR")

        EP0BW00.EP0BW-ENTRY-FOUND-FL = "Y";
        EP0BW02.PK-GSPRC-SRCE-CD = EP0BM001.PK-GSPRC-SRCE-CD[EP0BW-WINDX];
        EP0BW02.PK-GOAL-SPRC-CD = EP0BM001.PK-GOAL-SPRC-CD[EP0BW-WINDX];
        EP0BW02.PK-GOAL-SPRC-DESC = EP0BM001.PK-GOAL-SPRC-DESC[EP0BW-WINDX];
        EP0BW02.PK-DCMS-SPRC-CD = EP0BM001.PK-DCMS-SPRC-CD[EP0BW-WINDX];
        EP0BW02.PK-DCMS-SINST-TXT = EP0BM001.PK-DCMS-SINST-TXT[EP0BW-WINDX];
        if (EP0BW01.PK-GSPRC-SRCE-CD[EP0BW-WINDX] == "ATCH")
          COMMAREA.CATOAP = "EP0D"; /* Labal attachmnet variables*/
          EPWREC.EPW-FROM-MAP-SEL-NUM = 3;
        else
          if (EP0BW01.PK-GSPRC-SRCE-CD[EP0BW-WINDX] == "HNGR")
            COMMAREA.CATOAP = "EP0F"; /* Hanger style variables*/
          /* <----  MULTGPC (BEGIN)  ----->*/
          else
            if (EP0BW01.PK-GSPRC-SRCE-CD[EP0BW-WINDX] == "ATEQ")
              COMMAREA.CATOAP = "EP0D"; /* Label attachment var*/
              EPWREC.EPW-FROM-MAP-SEL-NUM = 4;
            end
          /* <----  MULTGPC (END)  ----->*/
          end
        end
      end
    end

    EP0BW00.EP0BW-WINDX = EP0BW00.EP0BW-WINDX + 1; /* incr line indx*/
  end


  if (EP0BW00.EP0BW-ENTRY-FOUND-FL == "N") /* No correct exit found yet*/
    if (EP0BM001.EP0BM-SPRC-SRCE-CD == "ATCH")
      COMMAREA.CATOAP = "EP0D"; /* Labal attachmnet variables*/
      EP0BW00.EP0BW-ENTRY-FOUND-FL = "Y";
    else
      if (EP0BM001.EP0BM-SPRC-SRCE-CD == "HNGR")
        COMMAREA.CATOAP = "EP0F"; /* Hanger style variables*/
        EP0BW00.EP0BW-ENTRY-FOUND-FL = "Y";
      /* <----  MULTGPC (BEGIN)  ----->*/
      else
        if (EP0BW01.PK-GSPRC-SRCE-CD[EP0BW-WINDX] == "ATEQ")
          COMMAREA.CATOAP = "EP0D"; /* Label attachment var*/
          EPWREC.EPW-FROM-MAP-SEL-NUM = 4;
        end
      /* <----  MULTGPC (END)  ----->*/
      end
    end
  end


  if (EP0BW00.EP0BW-ENTRY-FOUND-FL == "Y") /* OK to exit*/
    EP0BS-TA0050-P(); /* Purge TS queue*/

    EP0BS-EXIT(); /* exit to another application*/
  end


end // end EP0B-15100

// Display valid source list
Function EP0B-15200()
   /* ------------------------------------------------------------*/
   /* display the list of source codes.*/
   /* ------------------------------------------------------------*/
  XPXX001(); /* Window initialization*/

  XX0XW02.XX0XWHDR = "SPCL PROC SOURC"; /* Heading*/

  while (XX0XW02.XX0XWEND == "N") /* Until end of request*/
    XPSPSRC(); /* Display the list*/
  end

  if (XX0XW02.XX0XWPIX == 0) /* No selection made*/
    EP0BM001.EP0BM-SPRC-SRCE-CD = EP0BW00.EP0BW-SPRC-SRCE-CD; /* rstr*/
  else
    EP0BM001.EP0BM-SPRC-SRCE-CD = SPRCTBL.PK-GSPRC-SRCE-CD[XX0XWPIX]; /* selctd*/
  end

  set EP0BM001.EP0BM-SPRC-SRCE-CD cursor; /* Position cursor*/


   /* ------------------------------------------------------------*/
   /* Indicate that the requested lists have been displayed and*/
   /* that ENTER must be pressed to process any changes.*/
   /* ------------------------------------------------------------*/
  converseLib.clearScreen();
   /* Clear screen before display*/
  EP0BW00.XXX-MSG-LOC-ID = "15200"; /* Message location*/
  converseLib.validationFailed(392); /* Requested list(s) displayed*/
  exit stack; /* Exit to display map*/


end // end EP0B-15200

// Exit to another application
Function EP0BS-EXIT()
   /* ------------------------------------------------------------*/
   /* Set the application to be invoked for PF1 or PF4.*/
   /* ------------------------------------------------------------*/
  if (converseVar.eventKey is pf1) /* PF1 was pressed*/
    COMMAREA.CATOAP = "GD01"; /* Goal Documentation*/
  end

  if (converseVar.eventKey is pf4) /* PF4 was pressed*/
    COMMAREA.CATOAP = "MN0M"; /* Master Menu*/
  end


   /* ------------------------------------------------------------*/
   /* Save the system work record in the COMMAREA user area.*/
   /* ------------------------------------------------------------*/
  if (COMMAREA.CATOSYS == COMMAREA.CACURSYS) /* Same system*/

    /* MOVE EPWREC.EPWUSERA TO COMMAREA.CAUSERA;/* Save work record*/
    COMMAREA.CAUSERA = EPWREC.EPW-GROUP; /* Save work record*/
  else
    COMMAREA.CAUSERA = " "; /* Clear user area*/
  end


  CA-USER-WORKAREA-2K-B = EP0BW02.EP0BW-USER-AREA;

   /* ------------------------------------------------------------*/
   /* Transfer control to the specified application.*/
   /* ------------------------------------------------------------*/
  XSEXIT(); /* Exit to another application*/

  EP0BW00.XXX-MSG-LOC-ID = "XSEXIT"; /* Message location*/


   /* ------------------------------------------------------------*/
   /* Reestablish the COMMAREA application and item fields.*/
   /* ------------------------------------------------------------*/

  COMMAREA.CAEZSG3 = "0"; /* Force zero third character*/
  COMMAREA.CACURRAP = COMMAREA.CAEZSAP; /* Current application*/

  if (converseVar.eventKey is pfkey) /* PF key was pressed*/
    COMMAREA.CATOAP = " "; /* Clear TO application*/

    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = " "; /* Clear map name from item*/
    end
  end


end // end EP0BS-EXIT

// Add page to temporary storage
Function EP0BS-TA0050-A()
   /* ------------------------------------------------------------*/
   /* Add the next page to the temporary storage queue.*/
   /* ------------------------------------------------------------*/
  EP0BW01.XXX-TEMP-STG-LNTH = EP0BW00.XXX-TEMP-STG-LNTH;
                                   /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (EP0BW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Add page*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, initialize the storage area and*/
   /* indicators to be used and return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    set EP0BW01 empty; /* M001 display storage*/
    EP0BW00.XXX-HI-PAGE-NBR = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Clear last page number*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/

  EP0BW00.XXX-MSG-LOC-ID = "TA0050A"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(109); /* Unexpected ts error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = EP0BW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0BS-TA0050-A

// Purge any temporary storage
Function EP0BS-TA0050-P()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  set EP0BW01 empty; /* M001 display storage*/

  EP0BW00.XXX-PAGE-UPD-FL = "N"; /* Page update flag*/
  TA5REC.TA5TSQIX = 0; /* Displayed page number*/
  EP0BW00.XXX-HI-PAGE-NBR = 0; /* Highest page number*/

   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (EP0BW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Purge storage*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/
  EP0BW00.XXX-MSG-LOC-ID = "TA0050P"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(109); /* Unexpected ts error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = EP0BW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0BS-TA0050-P

// Read temporary storage page
Function EP0BS-TA0050-R()
   /* ------------------------------------------------------------*/
   /* Read the next page from the temporary storage queue.*/
   /* ------------------------------------------------------------*/
  EP0BW01.XXX-TEMP-STG-LNTH = EP0BW00.XXX-TEMP-STG-LNTH;
                                   /* Temporary storage length*/
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = EP0BW00.XXX-CURR-PAGE-NBR; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (EP0BW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Read page*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/
  EP0BW00.XXX-MSG-LOC-ID = "TA0050R"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(109); /* Unexpected ts error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = EP0BW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "READ TEMPORARY STORAGE PAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0BS-TA0050-R

// Update temporary storage page
Function EP0BS-TA0050-U()
   /* ------------------------------------------------------------*/
   /* Update the page in the temporary storage queue.*/
   /* ------------------------------------------------------------*/
  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (EP0BW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update page*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/
  EP0BW00.XXX-MSG-LOC-ID = "TA0050U"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(109); /* Unexpected ts error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1PGMNM = EP0BW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "UPDATE TEMPORARY STORAGE PAGE"; /* Description*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0BS-TA0050-U

// Close selected set cursor
Function EP0BS-VSPRCD01-CLS()
   /* ------------------------------------------------------------*/
   /* Close the cursor for the selected set of table rows.*/
   /* ------------------------------------------------------------*/
  try
    call "VSPRCD01" (EP0BW03, SQLCA, VSPRCD01) {isNoRefresh = yes, isExternal = yes};
  end /* Close cursor*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    return; /* Return to previous process*/
  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  EP0BW00.XXX-MSG-LOC-ID = "VSPRCD01CS"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(1); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EP0BW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "CLOSE SELECTED SET CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPRCD01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0BS-VSPRCD01-CLS

// Fetch next row in cursor
Function EP0BS-VSPRCD01-FTC()
   /* ------------------------------------------------------------*/
   /* Fetch the next row that was selected from the table.*/
   /* ------------------------------------------------------------*/
  try
    call "VSPRCD01" (EP0BW03, SQLCA, VSPRCD01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch nxt*/

   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/

    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      return; /* Return to previous process*/
    end

    /* ------------------------------------------------------------*/
    /* If end of the selected set, indicate end of cursor.*/
    /* ------------------------------------------------------------*/
    if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
      EP0BW00.EP0BW-SRCE-EOF-FL = "Y"; /* End of cursor*/
      set VSPRCD01 empty;

      return; /* Return to previous process*/
    end
  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  EP0BW00.XXX-MSG-LOC-ID = "VSPRCD01SN"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EP0BW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "FETCH NEXT ROW IN CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPRCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSPRCD01.VSPRCD01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0BS-VSPRCD01-FTC

// Select set and open cursor
Function EP0BS-VSPRCD01-OPN()
   /* ------------------------------------------------------------*/
   /* Select the requested set of rows from the table.*/
   /* ------------------------------------------------------------*/
  try
    call "VSPRCD01" (EP0BW03, SQLCA, VSPRCD01) {isNoRefresh = yes, isExternal = yes};
  end /* Select set*/


   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/

    return; /* Return to previous process*/
  end


   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  EP0BW00.XXX-MSG-LOC-ID = "VSPRCD01SS"; /* Message location*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

    converseLib.validationFailed(31); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
  else
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* Roll back all changes*/

    converseLib.validationFailed(1); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    converseLib.clearScreen();
     /* Clear screen before display*/
  end

  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EP0BW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "SELECT SET AND OPEN CURSOR"; /* Description*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPRCD01"; /* Table view name*/
  TA1REC.TA1TBLKE = VSPRCD01.VSPRCD01-KEY; /* Table key*/

  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0BS-VSPRCD01-OPN

// select unique dprod.vstyle01
Function EP0BS-VSTYLE01-SEL()
      /* *********************************************************/
      /* * this statement group performs a select unique for    **/
      /* * the dprod.vstyle01 table.                            **/
      /* *********************************************************/

  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};


   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000") /* Call successful*/
    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100)
      return; /* Return to previous process*/
    end
  end


   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  EP0BW00.XXX-MSG-LOC-ID = "VSTYLE01-S"; /* Message location*/

  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* Roll back all changes*/

  converseLib.validationFailed(1); /* Unexpected error occurred*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1PGMNM = EP0BW00.XXX-MSG-LOC-ID; /* Message location*/
  TA1REC.TA1LOC = "SELECT STYLE TABLE"; /* Description*/
  TA1REC.TA1DBASE = "DPROD   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSTYLE01"; /* Table view name*/

  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/

  exit stack; /* Exit to display map*/


end // end EP0BS-VSTYLE01-SEL

//*** RECORD=EP0BW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record EP0BW00 type basicRecord
  10 XXX-RQT-DATA-FL XXX-RQT-DATA-FL ; 
  10 XXX-MAP-FMAT-FL XXX-MAP-FMAT-FL ; 
  10 XXX-TEMP-STG-LNTH XXX-TEMP-STG-LNTH ; 
  10 XXX-INX-LMT-NBR XXX-INX-LMT-NBR ; 
  10 XXX-CURR-PAGE-NBR XXX-CURR-PAGE-NBR ; 
  10 XXX-HI-PAGE-NBR XXX-HI-PAGE-NBR ; 
  10 XXX-PAGE-UPD-FL XXX-PAGE-UPD-FL ; 
  10 XXX-MSG-NBR XXX-MSG-NBR ; 
  10 XXX-MSG-LOC-ID XXX-MSG-LOC-ID ; 
  10 EP0BW-WINDX EP0BW-WINDX ; 
  10 EP0BW-SPRC-SRCE-CD EP0BW-SPRC-SRCE-CD ; 
  10 EP0BW-SRCE-EOF-FL EP0BW-SRCE-EOF-FL ; 
  10 EP0BW-ENTRY-FOUND-FL EP0BW-ENTRY-FOUND-FL ; 
  10 EP0BW-DCMS-SORT-FL EP0BW-DCMS-SORT-FL ; 
end // end EP0BW00

//*** RECORD=EP0BW01 ****
// ------------------------
// Map 001 display storage.
// ------------------------
// ***********************
Record EP0BW01 type basicRecord
  5 XXX-TEMP-STG-LNTH XXX-TEMP-STG-LNTH ; 
  5 * char(858) ; 
    10 * char(66) [13] ; 
      15 XXX-LN-SEL-IND XXX-LN-SEL-IND ; 
      15 PK-GOAL-SPRC-CD PK-GOAL-SPRC-CD ; 
      15 PK-GOAL-SPRC-DESC PK-GOAL-SPRC-DESC ; 
      15 PK-GSPRC-SRCE-CD PK-GSPRC-SRCE-CD ; 
      15 EP0BW-ADDL-VAR-FL EP0BW-ADDL-VAR-FL ; 
      15 PK-DCMS-SPRC-CD PK-DCMS-SPRC-CD ; 
      15 PK-DCMS-SINST-TXT PK-DCMS-SINST-TXT ; 
end // end EP0BW01

//*** RECORD=EP0BW02 ****
// -----------------------------
// Common record - data to pass
// -----------------------------
// ***********************
Record EP0BW02 type basicRecord
  5 EP0BW-USER-AREA char(64) ; // EP0B user area to pass
    10 PK-GSPRC-SRCE-CD PK-GSPRC-SRCE-CD ; 
    10 PK-GOAL-SPRC-CD PK-GOAL-SPRC-CD ; 
    10 PK-GOAL-SPRC-DESC PK-GOAL-SPRC-DESC ; 
    10 PK-DCMS-SPRC-CD PK-DCMS-SPRC-CD ; 
    10 PK-DCMS-SINST-TXT PK-DCMS-SINST-TXT ; 
end // end EP0BW02

//*** RECORD=EP0BW03 ****
// --------------------------------
// I/O Task working storage record.
// --------------------------------
// ***********************
Record EP0BW03 type basicRecord
  10 EP0BW-IO-TASK EP0BW-IO-TASK ; 
end // end EP0BW03

// Additional variables flag
DataItem EP0BW-ADDL-VAR-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DCMS sort flag
DataItem EP0BW-DCMS-SORT-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Entry found flag
DataItem EP0BW-ENTRY-FOUND-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// IO task code
DataItem EP0BW-IO-TASK char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Special processing cd request
DataItem EP0BW-SPRC-SRCE-CD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// End of file flag
DataItem EP0BW-SRCE-EOF-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem EP0BW-WINDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

