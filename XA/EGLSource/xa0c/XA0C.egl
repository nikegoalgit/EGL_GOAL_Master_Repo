package xa0c;
import corpcom2.XX0XW01;
import corpcom4.XX0XS01;
import corpcom6.SQLCA;
import corpcom5.CU00ENU;
import corpx1.*;
import kl.common.KIZTBL;
import ku.common.KULREC;
import ku.common.KUWREC;
import ku.common.KUZREC;
import ta.common.TA1REC;
import vv.common.VLADDR01;
import xa.common.XA1REC;

//*** PROGRAM=XA0C ****
// ************************************************************
// *****    N I L   a d d r e s s    a p l i c a t i o n  *****
// *****                 p r o l o g u e                  *****
// ************************************************************
// 
// this application does  a l l  processing to the NIL address
// table. any application which needs to inquire, insert,
// update, or delete an address is required to go thru this
// appliction. this appliction is passed the ku0e0adr record
// which contains a function code(this tells this application
// what processing to do) space for the address, and an error
// code for each field in the address.
// 
//   error field                description
//   -----------                -----------
//   ku0eerr(1)               general error field
//   ku0eerr(2)               error with address line 1
//   ku0eerr(3)               error with address line 2
//   ku0eerr(4)               error with address line 3
//   ku0eerr(5)               error with address line 4
//   ku0eerr(6)               error with address line 5 - city
//   ku0eerr(7)               error with address line 6 - cntry
//   ku0eerr(8)               error with state
//   ku0eerr(9)               error with zip code
//   ku0eerr(10)              error with country code
// 
//  each error field contains the number of the error message
//  on the message file.
// 
// valid function codes are:
// 
//                 e..........edit data only
//                 i..........edit data and insert row
//                 d..........delete a row from table
//                 r..........edit data and replace row
//                 g.........."get" address from passed id #
//                 a..........add 1 to address use count
//                 s..........subtract 1 from address use count
// 
// ************************************************************
// 07/28/89   dsalzw   copied this application from xa0a and
//                     made change for the NIL Long addresses.
// 10/10/89   dsalzw   fixed bug, when writting audit records
//                     for customer, use vaddr001 instead of
//                     vladdr01 and the database table
//                     module: xa0cs35
// 09/10/90   dsalzw   added kiztbl for audit trail
// 09/17/90   dsalzw   bug: when updating use count - writing
//                     audit with no date,time or customer id
// 10/11/91   CHELLM   Deinstalled CUTAG (KUXREC) creation.
// 05/24/93   vcowan   chg msg file to cu00 for csp4.1
// 09/08/98   vcowan   re-gen to get Y2K version of xx0xs01
//                     to make load module Y2K compliant
// ************************************************************
// *********************
Program XA0C type basicProgram //VAGen Info - called batch program
  (
   XA1REC XA1REC // record
  )
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CU00"
  }

  // Data Declarations
  KULREC KULREC; // record
  KUWREC KUWREC; // record
  KUZREC KUZREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  VLADDR01 VLADDR01; // record
  XA0CW01 XA0CW01; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KIZTBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use XSTTBL {deleteAfterUse = yes}; // table

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XA0C010: XA0C010();
    goto XA0C020;
    XA0C020: XA0C020();


     /* *************************************************************/
     /* *****   determine the path of logic thru this          ******/
     /* *****   application based on the function code. if the ******/
     /* *****   function code is not a valid one. return an    ******/
     /* *****   error message indicating the problem.          ******/
     /* *****   valid functions are:                           ******/
     /* *****         e.......edit data only                   ******/
     /* *****         i.......edit data,insert row,use cnt = 1 ******/
     /* *****         o.......edit data,insert row,use cnt = 0 ******/
     /* *****         d.......delete a row from table          ******/
     /* *****         r.......edit data and replace row        ******/
     /* *****         g......."get" address from passed id #   ******/
     /* *****         a.......add 1 to address use count       ******/
     /* *****         s.......subtract 1 from address use count******/
     /* *************************************************************/



    if (XA1REC.XA1FUNCT == "E")
      goto XA0C030; /* edit only process*/
    else
      if (XA1REC.XA1FUNCT == "I"
       || XA1REC.XA1FUNCT == "O")
        goto XA0C040; /* insert process*/
      else
        if (XA1REC.XA1FUNCT == "R")
          goto XA0C050; /* replace process*/
        else
          if (XA1REC.XA1FUNCT == "G")
            goto XA0C080;
                                     /* "get" address of supplied id*/
          else
            if (XA1REC.XA1FUNCT == "D")
              goto XA0C090; /* delete address from table*/
            else
              if (XA1REC.XA1FUNCT == "A")
                goto XA0C100; /* add 1 to address use count*/
              else
                if (XA1REC.XA1FUNCT == "S")
                  goto XA0C110; /* subtract 1 from use count*/
                else
                  XA1REC.XA1ERIND[1] = 8;
                  goto XA0C999;
                end
              end
            end
          end
        end
      end
    end






    XA0C030: XA0C030();


    goto XA0C999; /* return ( goto end of this called application )*/





    XA0C040: XA0C040();


    goto XA0C999; /* return (goto end of application process)*/





    XA0C050: XA0C050();


    goto XA0C999; /* return (goto end of application process)*/





    XA0C080: XA0C080();


    goto XA0C999; /* return (goto end of application process)*/





    XA0C090: XA0C090();


    goto XA0C999; /* return (goto end of application process)*/





    XA0C100: XA0C100();


    goto XA0C999; /* return (goto end of application process)*/





    XA0C110: XA0C110();


    goto XA0C999; /* return (goto end of application process)*/






    XA0C999: XA0C999();


     /* *************************************************************/
     /* *****    no processing occurs in this flow secion      ******/
     /* *************************************************************/





  end // end main
end // end XA0C

// first time thru logic
Function XA0C010()


   /* *************************************************************/
   /* *****  f i r s t    t i m e    t h r u    l o g i c    ******/
   /* *************************************************************/


   /* *************************************************************/
   /* *****         initialize all error fields to 0         ******/
   /* *************************************************************/
  XA1REC.XA1ERIND[1] = 0; /* initailize error code to 0*/
  XA1REC.XA1ERIND[2] = 0; /* initailize error code to 0*/
  XA1REC.XA1ERIND[3] = 0; /* initailize error code to 0*/
  XA1REC.XA1ERIND[4] = 0; /* initailize error code to 0*/
  XA1REC.XA1ERIND[5] = 0; /* initailize error code to 0*/
  XA1REC.XA1ERIND[6] = 0; /* initailize error code to 0*/
  XA1REC.XA1ERIND[7] = 0; /* initailize error code to 0*/
  XA1REC.XA1ERIND[8] = 0; /* initailize error code to 0*/
  XA1REC.XA1ERIND[9] = 0; /* initailize error code to 0*/
  XA1REC.XA1ERIND[10] = 0; /* initailize error code to 0*/

  set KULREC empty; /* initialize record*/
  set VLADDR01 empty; /* initialize record*/
  set KUZREC empty; /* initialize record*/
  set XA0CW01 empty; /* initialize record*/
  set SQLCA empty; /* initialize record*/
  set TA1REC empty; /* initialize record*/
  set XX0XW01 empty; /* initialize record*/
  set KUWREC empty; /* initialize record*/





end // end XA0C010

// determine function
Function XA0C020()


   /* *************************************************************/
   /* *****      d e t e r m i n e    f u n c t i o n        ******/
   /* *************************************************************/


   /* *************************************************************/
   /* *****  no processing in this section (see flow stage)  ******/
   /* *************************************************************/





end // end XA0C020

// e edit only process
Function XA0C030()


   /* *************************************************************/
   /* *****       e d i t    a d d r e s s    o n l y        ******/
   /* *****                 p r o c r e s s                  ******/
   /* *************************************************************/


  XA0CS10(); /* edit address statement group*/





end // end XA0C030

// i insert process
Function XA0C040()


   /* *************************************************************/
   /* *****   i n s e r t   r o w    i n    a d d r e s s    ******/
   /* *****                   t a b l e                      ******/
   /* *************************************************************/


  XA0CS10(); /* edit address stmt group*/

  XA0CW01.XA0CWIDX = 1; /* initialize index*/
  while (XA0CW01.XA0CWIDX <= 10) /* loop thru error fields*/
    if (XA1REC.XA1ERIND[XA0CWIDX] != 0) /* check for validity of addr*/
      XA1REC.XA1ERIND[1] = 9; /* insert failed,invalid addr*/
      exit stack; /* goto flow*/
    else /* else*/

      XA0CW01.XA0CWIDX = XA0CW01.XA0CWIDX + 1;
                                          /* increment index*/

    end /* end of "if" statement*/
  end /* end of "while" loop*/


  XA0CS20(); /* insert NIL address*/

  if (SQLCA.VAGen_SQLCODE == 0)
    XA0CS25(); /* insert Cust address*/
  end



end // end XA0C040

// r replace process
Function XA0C050()


   /* *************************************************************/
   /* *****   r e p l a c e   r o w    i n    a d d r e s s  ******/
   /* *****                   t a b l e                      ******/
   /* *************************************************************/


  XA0CS10(); /* edit address stmt group*/

  if (XA1REC.XA1ERIND[1] != 0 /* check for validity of addr*/
   || XA1REC.XA1ERIND[2] != 0 /* |*/
   || XA1REC.XA1ERIND[3] != 0 /* |*/
   || XA1REC.XA1ERIND[4] != 0 /* |*/
   || XA1REC.XA1ERIND[5] != 0 /* |*/
   || XA1REC.XA1ERIND[6] != 0 /* |*/
   || XA1REC.XA1ERIND[7] != 0 /* |*/
   || XA1REC.XA1ERIND[8] != 0 /* |*/
   || XA1REC.XA1ERIND[9] != 0 /* |*/
   || XA1REC.XA1ERIND[10] != 0) /* |*/
    XA1REC.XA1ERIND[1] = 12; /* replace failed,invalid addr*/
    exit stack; /* goto flow*/
  else /* else*/
    /* next sentence                ;      okay*/
  end /* end of "if" statement*/


  XA0CS30(); /* replace NIL address*/

  if (SQLCA.VAGen_SQLCODE == 0)
    XA0CS85(); /* get "old"(before) address*/
    XA0CW01.XA0CWFIL = KULREC.KULGRP;
    XA0CS35(); /* replace customer address*/
  end



end // end XA0C050

// g get address of supplied id
Function XA0C080()


   /* *************************************************************/
   /* *****         g e t    a d d r e s s   f r o m         ******/
   /* *****            a d d r e s s    t a b l e            ******/
   /* *************************************************************/


  XA0CS80(); /* execute "get address" statement grp*/

  XA0CS16(); /* edit state code*/

  XA0CS18(); /* edit country code*/



end // end XA0C080

// d delete address from table
Function XA0C090()


   /* *************************************************************/
   /* *****      d e l e t e    a d d r e s s   f r o m      ******/
   /* *****            a d d r e s s    t a b l e            ******/
   /* *************************************************************/



  XA0CS40(); /* delete nil address*/

  if (SQLCA.VAGen_SQLCODE == 0)
    XA0CS85(); /* get address for audit report*/
    XA0CS45(); /* delete cust address*/
  end


end // end XA0C090

// add one to addr use cnt - cust
Function XA0C100()


   /* *************************************************************/
   /* *****   a d d    1    t o    a d d r e s s    u s e    ******/
   /* *****       c o u n t   o n   c u s t o m e r          ******/
   /* *************************************************************/


  XA0CS85(); /* get cust address record*/

  if (XA1REC.XA1ERIND[1] == 0) /* if address found*/
    XA0CW01.XA0CWFIL = KULREC.KULGRP;
    KULREC.KULUSCNT = KULREC.KULUSCNT + 1;
                                 /* ;  increment use count by +1*/
    XA0CS55(); /* replace cust address record*/
    if (XA1REC.XA1ERIND[1] != 0) /* if replace successful*/
      XA1REC.XA1ERIND[1] = 56; /* error "record updated since last"*/
    else /* else(replace okay)*/
      /* next sentence              ;    okay*/
    end /* end of "if" statement*/
  else /* else(address not found)*/
    /* next sentence                ;  return to calling module*/
  end /* end of "if" statement*/





end // end XA0C100

// subtract one from addr use cnt
Function XA0C110()


   /* *************************************************************/
   /* *****    s u b t r a c t    1    f r o m    u s e      ******/
   /* *****      c o u n t   o n   c u s t o m e r           ******/
   /* *************************************************************/


  XA0CS85(); /* get cust address record*/
  if (XA1REC.XA1ERIND[1] == 0) /* if address found*/
    if (KULREC.KULUSCNT <= 0) /* if use count already 0*/
      XA1REC.XA1ERIND[1] = 57; /* error "use cnt laready 0"*/
    else /* else(use count > 0)*/
      XA0CW01.XA0CWFIL = KULREC.KULGRP;
      KULREC.KULUSCNT = KULREC.KULUSCNT - 1;
                                 /* ;    decrement use count by 1*/
      XA0CS55(); /* replace address record*/
      if (XA1REC.XA1ERIND[1] != 0) /* if replace successful*/
        XA1REC.XA1ERIND[1] = 56;
                                   /* error "record updated since last"*/
      else /* else(replace okay)*/
        /* next sentence            ;      okay*/
      end /* end of "if" statement*/
    end /* end of "if" statement*/
  else /* else(address not found)*/
    /* next sentence                ;  return to calling module*/
  end /* end of "if" statement*/





end // end XA0C110

// exit address table application
Function XA0C999()


   /* *************************************************************/
   /* *****                  r e t u r n                     ******/
   /* *************************************************************/




  exit program; /* return to calling application*/





end // end XA0C999

// edit address
Function XA0CS10()


   /* *************************************************************/
   /* *****           e d i t    a d d r e s s               ******/
   /* *************************************************************/


  XA0CS11(); /* bottom justify address lines*/
  XA0CS12(); /* edit address line 1*/
  XA0CS13(); /* edit address line 2*/
  XA0CS14(); /* edit address line 3*/
  XA0CS1A(); /* edit address line 4*/
  XA0CS15(); /* edit address line 5 - city*/
  XA0CS1B(); /* edit address line 6 - country*/
  XA0CS16(); /* edit state*/
  XA0CS17(); /* edit zip code*/
  XA0CS18(); /* edit country code*/





end // end XA0CS10

// bottom justify addr lines
Function XA0CS11()


   /* *************************************************************/
   /* *****  b o t t o m    j u s t i f y   a d d r e s s    ******/
   /* *****                   l i n e s                      ******/
   /* *************************************************************/


  if (XA1REC.XXX-ADDR2 == " ") /* if addr line 2 blank*/
    XA1REC.XXX-ADDR2 = XA1REC.XXX-ADDR1; /* move addr1 to addr2*/
    XA1REC.XXX-ADDR1 = " "; /* blank out addr1*/
  end /* end of "if" statement*/
  if (XA1REC.XXX-ADDR3 == " ") /* if addr line 3 blank*/
    XA1REC.XXX-ADDR3 = XA1REC.XXX-ADDR2; /* move addr2 to addr3*/
    XA1REC.XXX-ADDR2 = XA1REC.XXX-ADDR1; /* move addr1 to addr2*/
    XA1REC.XXX-ADDR1 = " "; /* blank out addr1*/
  end /* end of "if" statement*/
  if (XA1REC.XXX-ADDR4 == " ") /* if addr line 4 blank*/
    XA1REC.XXX-ADDR4 = XA1REC.XXX-ADDR3; /* move addr3 to addr4*/
    XA1REC.XXX-ADDR3 = XA1REC.XXX-ADDR2; /* move addr2 to addr3*/
    XA1REC.XXX-ADDR2 = XA1REC.XXX-ADDR1; /* move addr1 to addr2*/
    XA1REC.XXX-ADDR1 = " "; /* blank out addr1*/
  end /* end of "if" statement*/





end // end XA0CS11

// edit address line 1
Function XA0CS12()


   /* *************************************************************/
   /* *****    e d i t    a d d r e s s   l i n e    1       ******/
   /* *****                                                  ******/
   /* *****  this field is free form, and optional, so no    ******/
   /* *****  editing is required at this time. however,      ******/
   /* *****  this statement group left here in case editing  ******/
   /* *****  for this field is ever needed.                  ******/
   /* *************************************************************/





end // end XA0CS12

// edit address line 2
Function XA0CS13()


   /* *************************************************************/
   /* *****    e d i t    a d d r e s s   l i n e    2       ******/
   /* *****                                                  ******/
   /* *****  this field is free form, and optional, so no    ******/
   /* *****  editing is required at this time. however,      ******/
   /* *****  this statement group left here in case editing  ******/
   /* *****  for this field is ever needed.                  ******/
   /* *************************************************************/





end // end XA0CS13

// edit address line 3
Function XA0CS14()


   /* *************************************************************/
   /* *****    e d i t    a d d r e s s   l i n e    3       ******/
   /* *****                                                  ******/
   /* *****  this field is free form, and optional, so no    ******/
   /* *****  editing is required at this time. however,      ******/
   /* *****  this statement group left here in case editing  ******/
   /* *****  for this field is ever needed.                  ******/
   /* *************************************************************/





end // end XA0CS14

// edit line 5 - city name
Function XA0CS15()


   /* *************************************************************/
   /* *****                e d i t   c i t y                 ******/
   /* *************************************************************/


  if (XA1REC.XXX-ADDR5 == " ") /* if city field is blank*/
    XA1REC.XA1ERIND[6] = 5; /* error "required field missing"*/
  end /* end of "if" statement*/





end // end XA0CS15

// edit state ( if within usa )
Function XA0CS16()


   /* *************************************************************/
   /* *****                e d i t   s t a t e               ******/
   /* *************************************************************/


  if (XA1REC.XCTCD == "USA") /* valid within the usa*/
    if (XA1REC.XSTCD == " ") /* if state field is blank*/
      XA1REC.XA1ERIND[8] = 5; /* error "required field missing"*/
      XA1REC.XSTDESC = " "; /* blank out state name*/
    else /* else (state field is not blank)*/

      if (XA1REC.XSTCD in XSTTBL.XSTCD)
        XA1REC.XSTDESC = XSTTBL.XSTDESC[sysVar.arrayIndex];
      end
                                      /* search table for valid state*/

      if (sysVar.arrayIndex == 0) /* if state code not found*/
        XA1REC.XA1ERIND[8] = 6; /* error "invalid state"*/
        XA1REC.XSTDESC = " "; /* blank out state name*/
      else /* else(state found on table)*/
        /* ***************  check status code of entry  ****************/
        if (XSTTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* if status is not active*/
          XA1REC.XA1ERIND[8] = 6; /* error "invalid state code"*/
          XA1REC.XSTDESC = " "; /* blank out state name*/
        else /* else(status is active)*/
          /* next sentence                ;  okay*/
        end /* end of "if" statement*/
        /* *************************************************************/
      end /* end of "if" statement*/
    end /* end of "if" statement*/
  else /* if foreign country*/
    if (XA1REC.XSTCD == " ") /* if no state entered*/
      XA1REC.XSTDESC = " "; /* blank out state name*/
    else /* if state entered for foreign cntry*/
      XA1REC.XA1ERIND[8] = 154; /* error "state code not allowed"*/
      XA1REC.XSTDESC = " "; /* blank out state name*/
    end
  end



end // end XA0CS16

// edit zip code
Function XA0CS17()


   /* *************************************************************/
   /* *****            e d i t   z i p   c o d e             ******/
   /* *************************************************************/


  if (XA1REC.XCTCD == "USA") /* is address within the*/
                                 /* ;  united states*/
    if (XA1REC.XXXZIP == " ") /* zip code blank ?*/
      XA1REC.XA1ERIND[9] = 5; /* error message*/
                                 /* ;    "required field missing"*/
    else /* else(address is not blank)*/
      XA0CW01.XA0CWZIP = XA1REC.XXXZIP;
                                 /* ;    move zip code to work field*/
      /* *************************************************************/
      /* *****  zip code only valid if it has exactly 5 or 9    ******/
      /* *****  consecutive numeric digits. if zip has 5 digits ******/
      /* *****  the remaining space must be blank.              ******/
      /* *************************************************************/
      if (XA0CW01.XA0CWDGT[1] >= "0" 
       /* if zip code is valid 5 digits*/
       && XA0CW01.XA0CWDGT[1] <= "9" /* |*/
       && XA0CW01.XA0CWDGT[2] >= "0" /* |*/
       && XA0CW01.XA0CWDGT[2] <= "9" /* |*/
       && XA0CW01.XA0CWDGT[3] >= "0" /* |*/
       && XA0CW01.XA0CWDGT[3] <= "9" /* |*/
       && XA0CW01.XA0CWDGT[4] >= "0" /* |*/
       && XA0CW01.XA0CWDGT[4] <= "9" /* |*/
       && XA0CW01.XA0CWDGT[5] >= "0" /* |*/
       && XA0CW01.XA0CWDGT[5] <= "9" /* |*/
       && XA0CW01.XA0CWDGT[6] == " " /* |*/
       && XA0CW01.XA0CWDGT[7] == " " /* |*/
       && XA0CW01.XA0CWDGT[8] == " " /* |*/
       && XA0CW01.XA0CWDGT[9] == " " /* |*/
       && XA0CW01.XA0CWDGT[10] == " ") /* |*/
        /* next sentence            ;      okay(has 5 valid digits)*/
      else /* else(zip is not valid 5 digits)*/
        if (XA0CW01.XA0CWDGT[1] >= "0" /* if zip is valid 9 digit zip*/
         && XA0CW01.XA0CWDGT[1] <= "9" /* |*/
         && XA0CW01.XA0CWDGT[2] >= "0" /* |*/
         && XA0CW01.XA0CWDGT[2] <= "9" /* |*/
         && XA0CW01.XA0CWDGT[3] >= "0" /* |*/
         && XA0CW01.XA0CWDGT[3] <= "9" /* |*/
         && XA0CW01.XA0CWDGT[4] >= "0" /* |*/
         && XA0CW01.XA0CWDGT[4] <= "9" /* |*/
         && XA0CW01.XA0CWDGT[5] >= "0" /* |*/
         && XA0CW01.XA0CWDGT[5] <= "9" /* |*/
         && XA0CW01.XA0CWDGT[6] >= "0" /* |*/
         && XA0CW01.XA0CWDGT[6] <= "9" /* |*/
         && XA0CW01.XA0CWDGT[7] >= "0" /* |*/
         && XA0CW01.XA0CWDGT[7] <= "9" /* |*/
         && XA0CW01.XA0CWDGT[8] >= "0" /* |*/
         && XA0CW01.XA0CWDGT[8] <= "9" /* |*/
         && XA0CW01.XA0CWDGT[9] >= "0" /* |*/
         && XA0CW01.XA0CWDGT[9] <= "9" /* |*/
         && XA0CW01.XA0CWDGT[10] == " ") /* |*/
          /* next sentence          ;        okay(zip is 9 valid digits)*/
        else /* else(zip code is invalid)*/
          if (XA0CW01.XA0CWDGT[1] >= "0"  /* if zip is valid 9 digit zip*/
           && XA0CW01.XA0CWDGT[1] <= "9"  /* with '-' in 6th digit*/
           && XA0CW01.XA0CWDGT[2] >= "0"  /* |*/
           && XA0CW01.XA0CWDGT[2] <= "9"  /* |*/
           && XA0CW01.XA0CWDGT[3] >= "0"  /* |*/
           && XA0CW01.XA0CWDGT[3] <= "9"  /* |*/
           && XA0CW01.XA0CWDGT[4] >= "0"  /* |*/
           && XA0CW01.XA0CWDGT[4] <= "9"  /* |*/
           && XA0CW01.XA0CWDGT[5] >= "0"  /* |*/
           && XA0CW01.XA0CWDGT[5] <= "9"  /* |*/
           && XA0CW01.XA0CWDGT[6] == "-"  /* |*/
           && XA0CW01.XA0CWDGT[7] >= "0"  /* |*/
           && XA0CW01.XA0CWDGT[7] <= "9"  /* |*/
           && XA0CW01.XA0CWDGT[8] >= "0"  /* |*/
           && XA0CW01.XA0CWDGT[8] <= "9"  /* |*/
           && XA0CW01.XA0CWDGT[9] >= "0"  /* |*/
           && XA0CW01.XA0CWDGT[9] <= "9"  /* |*/
           && XA0CW01.XA0CWDGT[10] >= "0" /* |*/
           && XA0CW01.XA0CWDGT[10] <= "9") /* |*/
            /* next sentence        ;          okay(zip is 9 valid digits)*/
          else /* else(zip code is invalid)*/
            XA1REC.XA1ERIND[9] = 89; /* error message*/
                                 /* ;          "invalid zip code"*/
          end /* end of "if" statement*/
        end /* end of "if" statement*/
      end /* end of "if" statement*/
    end /* end of "if" statement*/
  else /* else(zip code is not within usa)*/
    /* next sentence                ;  no validation on zip code*/
  end /* end of "if" statement*/





end // end XA0CS17

// edit country code
Function XA0CS18()


   /* *************************************************************/
   /* *****      e d i t   c o u n t r y   c o d e           ******/
   /* *************************************************************/


  XA1REC.XCTDESC = " "; /* initialize country decode*/

  if (XA1REC.XCTCD in XCTTBL.XCTCD)
                                 /* ;if country code in table*/
    /* ***************  check status code of entry  ****************/
    if (XCTTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* if status is not active*/
      XA1REC.XA1ERIND[10] = 7; /* error "invalid country cd"*/
    else /* else(status is active)*/
      XA1REC.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
                                 /* ;    move decode name to rec*/
    end /* end of "if" statement*/
    /* *************************************************************/
  else /* else( country code not in table)*/
    XA1REC.XA1ERIND[10] = 7; /* error "invalid country"*/
  end /* end of "if" statement*/





end // end XA0CS18

// edit address line 4
Function XA0CS1A()


   /* *************************************************************/
   /* *****    e d i t    a d d r e s s   l i n e    4       ******/
   /* *************************************************************/


  if (XA1REC.XXX-ADDR4 == " ") /* if fourth address line blank*/
    XA1REC.XA1ERIND[5] = 16; /* error "required missing"*/
  end /* end of "if" statement*/





end // end XA0CS1A

// edit line 6 - country name
Function XA0CS1B()


   /* *************************************************************/
   /* *****                e d i t   c o u n t r y           ******/
   /* *************************************************************/


  if (XA1REC.XXX-ADDR6 == " ") /* if country field is blank*/
    XA1REC.XA1ERIND[7] = 5; /* error "required field missing"*/
  end /* end of "if" statement*/





end // end XA0CS1B

// insert address - nil
Function XA0CS20()


   /* *************************************************************/
   /* *****      i n s e r t    a d d r e s s    i n t o     ******/
   /* *****             N I L   t a b l e                    ******/
   /* *************************************************************/


  XX0XS01(); /* get date and time*/
  XA1REC.ZZZSDT = XX0XW01.XX0XWDAT; /* move curr dt to setup dt*/
  XA1REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move curr dt to change dt*/
  XA1REC.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move curr time to chng time*/
  XA1REC.ZZZCHGCT = 0; /* initialize chng count to 0*/

  VLADDR01.NLAGRP = XA1REC.XA1GROUP; /* group move of address*/

  call "IO4410" ("A ", SQLCA, VLADDR01) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod to add*/
  if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
    if (SQLCA.VAGen_SQLCODE == -803) /* if duplicate insert*/
      XA1REC.XA1ERIND[1] = 10; /* error msg "duplicate*/
                                                 /* isrt,add failed"*/
    else /* else (return code*/
                                               /* ne -803)*/
      /* **********************  call error routine  *****************/
      TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
      TA1REC.TA1FUNC = "ABND"; /* move function to error record*/
      TA1REC.TA1PGMNM = "XA0CS20 "; /* move program name to error rec*/
      TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1MAP = "N/A     ";
                                   /* move map name to error record*/
      TA1REC.TA1DBASE = "DNIL0   "; /* move database name to error rec*/
      TA1REC.TA1TBLVU = "VLADDR01"; /* move table view to error record*/
      set KUWREC empty; /* initialize error work rec*/
      /* ************* move keys to error work record  ***************/
      KUWREC.KUCCOID = VLADDR01.NLAINTGR;
      /* *************************************************************/
      TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                     /* ;     move table key value*/
      KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* call db backout*/
      SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                     /* ;*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
      /* *************************************************************/
      /* ***** the following commented until retro-fitting of   ******/
      /* ***** the return from the error routine                ******/
      /* *************************************************************/
      /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                      /* ;     move appl global data*/
      /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
      /* XSEXIT                          ;     transfer to next appl*/
      /* ******************  end of error routine  *******************/
    end /* end of "if" statement*/
  end /* end of "if" statement*/




end // end XA0CS20

// insert address - cust
Function XA0CS25()


   /* *************************************************************/
   /* *****      i n s e r t    a d d r e s s    i n t o     ******/
   /* *****            c u s t o m e r   t a b l e           ******/
   /* *************************************************************/



   /* *********** set up customer address record ************/
  KULREC.KUCCOID = XA1REC.NLAINTGR; /* move cust id*/
  KULREC.KULAAID = XA1REC.NLAADRID; /* move address id*/
  if (XA1REC.XA1FUNCT == "I") /* if function code is i*/
    KULREC.KULUSCNT = 1;
                                   /* initialize use count to 1*/
  else
                                   /* else(function code equal o)*/
    KULREC.KULUSCNT = 0;
                                   /* initialize use count to 0*/
  end /* end of "if" statement*/
  if (XA1REC.XXX-ADDR1 == "  ")
    KULREC.XXX-ADDR1 = XA1REC.XXX-ADDR2; /* move addr1*/
    KULREC.XXX-ADDR2 = XA1REC.XXX-ADDR3; /* move addr2*/
    KULREC.XXX-ADDR3 = XA1REC.XXX-ADDR4; /* move addr3*/
  else
    KULREC.XXX-ADDR1 = XA1REC.XXX-ADDR1; /* move addr1*/
    KULREC.XXX-ADDR2 = XA1REC.XXX-ADDR2; /* move addr2*/
    KULREC.XXX-ADDR3 = XA1REC.XXX-ADDR3; /* move addr3*/
  end
  KULREC.XXXCITY = XA1REC.XXX-ADDR5; /* move city*/
  KULREC.XSTCD = XA1REC.XSTCD; /* move state code*/
  KULREC.XXXZIP = XA1REC.XXXZIP; /* move zip*/
  KULREC.XCYCD = "    "; /* move county code*/
  KULREC.XCTCD = XA1REC.XCTCD; /* move country code*/
  KULREC.ZZZSDT = XA1REC.ZZZSDT; /* set up date*/
  KULREC.ZZZCHGDT = XA1REC.ZZZCHGDT; /* change date*/
  KULREC.ZZZCHGTM = XA1REC.ZZZCHGTM; /* change time*/
  KULREC.ZZZCHGCT = 0; /* change count*/

  call "IO0170" ("A ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod to add*/
  if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
    if (SQLCA.VAGen_SQLCODE == -803) /* if duplicate insert*/
      XA1REC.XA1ERIND[1] = 10; /* error msg "duplicate*/
                                                 /* isrt,add failed"*/
    else /* else (return code*/
                                               /* ne -803)*/
      /* **********************  call error routine  *****************/
      TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
      TA1REC.TA1FUNC = "ABND"; /* move function to error record*/
      TA1REC.TA1PGMNM = "XA0CS25 "; /* move program name to error rec*/
      TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1MAP = "N/A     ";
                                   /* move map name to error record*/
      TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
      TA1REC.TA1TBLVU = "VADDR001"; /* move table view to error record*/
      set KUWREC empty; /* initialize error work rec*/
      /* ************* move keys to error work record  ***************/
      KUWREC.KUCCOID = KULREC.KUCCOID;
      /* *************************************************************/
      TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                     /* ;     move table key value*/
      KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* call db backout*/
      SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                     /* ;*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
      /* *************************************************************/
      /* ***** the following commented until retro-fitting of   ******/
      /* ***** the return from the error routine                ******/
      /* *************************************************************/
      /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                      /* ;     move appl global data*/
      /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
      /* XSEXIT                          ;     transfer to next appl*/
      /* ******************  end of error routine  *******************/
    end /* end of "if" statement*/
  else /* else(return code okay)*/
    /* ********** format and write audit report record ***********/
    KUZREC.KUZTYPE = "A"; /* assign type code value*/
    KUZREC.KUZBFCD = " "; /* assign "after" code*/
    KUZREC.XXXTBLNM = "VADDR001"; /* move tbl name to audit rec*/
    KUZREC.XXXUSER = XA1REC.XXXUSER; /* move user id to audit rec*/
    KUZREC.KUCCOID = KULREC.KUCCOID; /* move co id to audit rec*/
    KUZREC.ZZZSDT = KULREC.ZZZSDT; /* move set up date to audit rec*/
    KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS; /* move time to audit rec*/
    KUZREC.KUZDATA = KULREC.KULGRP; /* move data to audit record*/

    if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
      KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
      KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
    else
      KUZREC.KUZSSEQ = 0;
      KUZREC.KUZLEN = 0;
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1PGMNM = "XA0C   ";
      TA1REC.TA1LOCAT[1] = "XA0CS25  ";
      TA1REC.TA1LOCAT[2] = "KIZTBL   ";
      TA1REC.TA1LOCAT[3] = "VADDR001 ";
      TA1REC.TA1MAP = "        ";
      TA1REC.TA1DBASE = "DCUST.";
      TA1REC.TA1TBLVU = "VADDR001";
      TA1TBLKE = "TABLE NOT FOUND";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end

    call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};
                                   /* call i/o mod to add*/
    if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
                                               /* ne -803)*/
      /* **********************  call error routine  *****************/
      TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
      TA1REC.TA1FUNC = "ABND"; /* move function to error record*/
      TA1REC.TA1PGMNM = "XA0CS25 "; /* move program name to error rec*/
      TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1MAP = "N/A     ";
                                   /* move map name to error record*/
      TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
      TA1REC.TA1TBLVU = "VCUAUD01"; /* move table view to error record*/
      set KUWREC empty; /* initialize error work rec*/
      /* ************* move keys to error work record  ***************/
      KUWREC.KUCCOID = KUZREC.KUCCOID;
      /* *************************************************************/
      TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                     /* ;     move table key value*/
      KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* call db backout*/
      SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                     /* ;*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
      /* *************************************************************/
      /* ***** the following commented until retro-fitting of   ******/
      /* ***** the return from the error routine                ******/
      /* *************************************************************/
      /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                      /* ;     move appl global data*/
      /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
      /* XSEXIT                          ;     transfer to next appl*/
      /* ******************  end of error routine  *******************/
    end /* end of "if" statement*/
  end /* end of "if" statement*/





end // end XA0CS25

// replace address - nil
Function XA0CS30()


   /* *************************************************************/
   /* *****    r e p l a c e   N I L   a d d r e s s         ******/
   /* *************************************************************/


  XX0XS01(); /* get date and time*/
  XA1REC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move curr dt to change dt*/
  XA1REC.ZZZCHGTM = XX0XW01.XX0XWTIM;
                                   /* move curr time to chng time*/

  VLADDR01.NLAGRP = XA1REC.XA1GROUP; /* group move of address*/

  call "IO4410" ("U ", SQLCA, VLADDR01) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod to update*/
  if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
    if (SQLCA.VAGen_SQLCODE == 100) /* if bad return code*/
      XA1REC.XA1ERIND[1] = 13; /* error "addr not found"*/
    else /* else(error other*/
                                                /* than 100)*/
      /* **********************  call error routine  *****************/
      TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
      TA1REC.TA1FUNC = "ABND"; /* move function to error record*/
      TA1REC.TA1PGMNM = "XA0CS30 "; /* move program name to error rec*/
      TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1MAP = "N/A     ";
                                   /* move map name to error record*/
      TA1REC.TA1DBASE = "DNILO   "; /* move database name to error rec*/
      TA1REC.TA1TBLVU = "VLADDR01"; /* move table view to error record*/
      set KUWREC empty; /* initialize error work rec*/
      /* ************* move keys to error work record  ***************/
      KUWREC.KUCCOID = VLADDR01.NLAINTGR;
      /* *************************************************************/
      TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                     /* ;     move table key value*/
      KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* call db backout*/
      SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                     /* ;*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
      /* *************************************************************/
      /* ***** the following commented until retro-fitting of   ******/
      /* ***** the return from the error routine                ******/
      /* *************************************************************/
      /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                      /* ;     move appl global data*/
      /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
      /* XSEXIT                          ;     transfer to next appl*/
      /* ******************  end of error routine  *******************/
    end /* end of "if" statement*/
  end /* end of "if" statement*/





end // end XA0CS30

// replace address - cust
Function XA0CS35()


   /* *************************************************************/
   /* *****   r e p l a c e   C u s t   a d d r e s s        ******/
   /* *************************************************************/


   /* *********** set up customer address record ************/
  KULREC.KUCCOID = XA1REC.NLAINTGR; /* move cust id*/
  KULREC.KULAAID = XA1REC.NLAADRID; /* move address id*/
  if (XA1REC.XXX-ADDR1 == "  ")
    KULREC.XXX-ADDR1 = XA1REC.XXX-ADDR2; /* move addr1*/
    KULREC.XXX-ADDR2 = XA1REC.XXX-ADDR3; /* move addr2*/
    KULREC.XXX-ADDR3 = XA1REC.XXX-ADDR4; /* move addr3*/
  else
    KULREC.XXX-ADDR1 = XA1REC.XXX-ADDR1; /* move addr1*/
    KULREC.XXX-ADDR2 = XA1REC.XXX-ADDR2; /* move addr2*/
    KULREC.XXX-ADDR3 = XA1REC.XXX-ADDR3; /* move addr3*/
  end
  KULREC.XXXCITY = XA1REC.XXX-ADDR5; /* move city*/
  KULREC.XSTCD = XA1REC.XSTCD; /* move state code*/
  KULREC.XXXZIP = XA1REC.XXXZIP; /* move zip*/
  KULREC.XCYCD = "    "; /* move county code*/
  KULREC.XCTCD = XA1REC.XCTCD; /* move country code*/
  KULREC.ZZZSDT = XA1REC.ZZZSDT; /* set up date*/
  KULREC.ZZZCHGDT = XA1REC.ZZZCHGDT; /* change date*/
  KULREC.ZZZCHGTM = XA1REC.ZZZCHGTM; /* change time*/


  call "IO0170" ("U ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod to update*/
  if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
    if (SQLCA.VAGen_SQLCODE == 100) /* if bad return code*/
      XA1REC.XA1ERIND[1] = 13; /* error "addr not found"*/
    else /* else(error other*/
                                                /* than 100)*/
      /* **********************  call error routine  *****************/
      TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
      TA1REC.TA1FUNC = "ABND"; /* move function to error record*/
      TA1REC.TA1PGMNM = "XA0CS35 "; /* move program name to error rec*/
      TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1MAP = "N/A     ";
                                   /* move map name to error record*/
      TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
      TA1REC.TA1TBLVU = "VADDR001"; /* move table view to error record*/
      set KUWREC empty; /* initialize error work rec*/
      /* ************* move keys to error work record  ***************/
      KUWREC.KUCCOID = KULREC.KUCCOID;
      /* *************************************************************/
      TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                     /* ;     move table key value*/
      KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* call db backout*/
      SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                     /* ;*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
      /* *************************************************************/
      /* ***** the following commented until retro-fitting of   ******/
      /* ***** the return from the error routine                ******/
      /* *************************************************************/
      /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                      /* ;     move appl global data*/
      /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
      /* XSEXIT                          ;     transfer to next appl*/
      /* ******************  end of error routine  *******************/
    end /* end of "if" statement*/
  else /* if replace successful*/
                                 /* ;      only do audit if okay*/
    /* *** format and write audit report record for after image ****/
    KUZREC.KUZTYPE = "C"; /* assign type code value*/
    KUZREC.KUZBFCD = "A"; /* assign "after" code*/
    KUZREC.XXXTBLNM = "VADDR001"; /* move tbl name to audit rec*/
    KUZREC.XXXUSER = XA1REC.XXXUSER; /* move user id to audit rec*/
    KUZREC.KUCCOID = VLADDR01.NLAINTGR; /* move co id to audit rec*/

    /* note: chance time should be correct, xx0x was called just*/
          /* before update occured.*/

    KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
                                   /* move set up date to audit rec*/
    KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS; /* move time to audit rec*/
    KUZREC.KUZDATA = KULREC.KULGRP; /* move data to audit record*/

    if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
      KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
      KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
    else
      KUZREC.KUZSSEQ = 0;
      KUZREC.KUZLEN = 0;
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1PGMNM = "XA0C   ";
      TA1REC.TA1LOCAT[1] = "XA0CS35  ";
      TA1REC.TA1LOCAT[2] = "KIZTBL   ";
      TA1REC.TA1LOCAT[3] = "VADDR001 ";
      TA1REC.TA1MAP = "        ";
      TA1REC.TA1DBASE = "DCUST.";
      TA1REC.TA1TBLVU = "VADDR001";
      TA1TBLKE = "TABLE NOT FOUND";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end

    call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};
                                   /* call i/o mod to add*/
    if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
                                               /* ne -803)*/
      /* **********************  call error routine  *****************/
      TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
      TA1REC.TA1FUNC = "ABND"; /* move function to error record*/
      TA1REC.TA1PGMNM = "XA0AS20 "; /* move program name to error rec*/
      TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1MAP = "N/A     ";
                                   /* move map name to error record*/
      TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
      TA1REC.TA1TBLVU = "VCUAUD01"; /* move table view to error record*/
      set KUWREC empty; /* initialize error work rec*/
      /* ************* move keys to error work record  ***************/
      KUWREC.KUCCOID = KUZREC.KUCCOID;
      /* *************************************************************/
      TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                     /* ;     move table key value*/
      KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* call db backout*/
      SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                     /* ;*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
      /* *************************************************************/
      /* ***** the following commented until retro-fitting of   ******/
      /* ***** the return from the error routine                ******/
      /* *************************************************************/
      /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                      /* ;     move appl global data*/
      /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
      /* XSEXIT                          ;     transfer to next appl*/
      /* ******************  end of error routine  *******************/
    end /* end of "if" statement*/

    /* *** format and write audit report record for before image ***/
    KULREC.KULGRP = XA0CW01.XA0CWFIL; /* move before image to rec*/
    KUZREC.KUZTYPE = "C"; /* assign type code value*/
    KUZREC.KUZBFCD = "B"; /* assign "after" code*/
    KUZREC.XXXTBLNM = "VADDR001"; /* move tbl name to audit rec*/
    KUZREC.XXXUSER = XA1REC.XXXUSER; /* move user id to audit rec*/
    KUZREC.KUCCOID = KULREC.KUCCOID; /* move co id to audit rec*/

    /* note: chance time should be correct, xx0x was called just*/
          /* before update occured.*/

    KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
                                   /* move set up date to audit rec*/
    KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS; /* move time to audit rec*/
    KUZREC.KUZDATA = KULREC.KULGRP; /* move data to audit record*/

    if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
      KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
      KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
    else
      KUZREC.KUZSSEQ = 0;
      KUZREC.KUZLEN = 0;
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1PGMNM = "XA0C   ";
      TA1REC.TA1LOCAT[1] = "XA0CS35  ";
      TA1REC.TA1LOCAT[2] = "KIZTBL   ";
      TA1REC.TA1LOCAT[3] = "VADDR001 ";
      TA1REC.TA1MAP = "        ";
      TA1REC.TA1DBASE = "DCUST.";
      TA1REC.TA1TBLVU = "VADDR001";
      TA1TBLKE = "TABLE NOT FOUND";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end

    call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};
                                   /* call i/o mod to add*/
    if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
                                               /* ne -803)*/
      /* **********************  call error routine  *****************/
      TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
      TA1REC.TA1FUNC = "ABND"; /* move function to error record*/
      TA1REC.TA1PGMNM = "XA0AS20 "; /* move program name to error rec*/
      TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1MAP = "N/A     ";
                                   /* move map name to error record*/
      TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
      TA1REC.TA1TBLVU = "VCUAUD01"; /* move table view to error record*/
      set KUWREC empty; /* initialize error work rec*/
      /* ************* move keys to error work record  ***************/
      KUWREC.KUCCOID = KUZREC.KUCCOID;
      /* *************************************************************/
      TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                     /* ;     move table key value*/
      KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* call db backout*/
      SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                     /* ;*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
      /* *************************************************************/
      /* ***** the following commented until retro-fitting of   ******/
      /* ***** the return from the error routine                ******/
      /* *************************************************************/
      /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                      /* ;     move appl global data*/
      /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
      /* XSEXIT                          ;     transfer to next appl*/
      /* ******************  end of error routine  *******************/
    end /* end of "if" statement*/
  end


end // end XA0CS35

// replace address
Function XA0CS40()


   /* *************************************************************/
   /* *****      d e l e t e   N I L   a d d r e s s         ******/
   /* *************************************************************/


  VLADDR01.NLAINTGR = XA1REC.NLAINTGR;
  VLADDR01.NLAADRID = XA1REC.NLAADRID;
  call "IO4410" ("D ", SQLCA, VLADDR01) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod to delete*/
  if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
    if (SQLCA.VAGen_SQLCODE == 100) /* if not found*/
      XA1REC.XA1ERIND[1] = 15; /* ERROR "not found"*/
    else
                                   /* else(error other than 100)*/
      /* **********************  call error routine  *****************/
      TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
      TA1REC.TA1FUNC = "ABND"; /* move function to error record*/
      TA1REC.TA1PGMNM = "XA0A090 "; /* move program name to error rec*/
      TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1MAP = "N/A     ";
                                   /* move map name to error record*/
      TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
      TA1REC.TA1TBLVU = "VADDR001"; /* move table view to error record*/
      set KUWREC empty; /* initialize error work rec*/
      /* ************* move keys to error work record  ***************/
      KUWREC.KUCCOID = KULREC.KUCCOID;
      /* *************************************************************/
      TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                     /* ;     move table key value*/
      KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* call db backout*/
      SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                     /* ;*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
      /* *************************************************************/
      /* ***** the following commented until retro-fitting of   ******/
      /* ***** the return from the error routine                ******/
      /* *************************************************************/
      /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                      /* ;     move appl global data*/
      /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
      /* XSEXIT                          ;     transfer to next appl*/
      /* ******************  end of error routine  *******************/
    end /* END OF "if" STATEMENT*/
  end /* end of "if" statement*/





end // end XA0CS40

// replace address
Function XA0CS45()


   /* *************************************************************/
   /* *****      d e l e t e   c u s t   a d d r e s s       ******/
   /* *************************************************************/


  XA0CW01.XA0CWFIL = KULREC.KULGRP;
                                 /* ;save address for audit rpt*/

  KULREC.KUCCOID = XA1REC.NLAINTGR;
  KULREC.KULAAID = XA1REC.NLAADRID;

  call "IO0170" ("D ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod to delete*/
  if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
    if (SQLCA.VAGen_SQLCODE == 100) /* if not found*/
      XA1REC.XA1ERIND[1] = 15; /* ERROR "not found"*/
    else
                                   /* else(error other than 100)*/
      /* **********************  call error routine  *****************/
      TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
      TA1REC.TA1FUNC = "ABND"; /* move function to error record*/
      TA1REC.TA1PGMNM = "XA0A090 "; /* move program name to error rec*/
      TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1MAP = "N/A     ";
                                   /* move map name to error record*/
      TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
      TA1REC.TA1TBLVU = "VADDR001"; /* move table view to error record*/
      set KUWREC empty; /* initialize error work rec*/
      /* ************* move keys to error work record  ***************/
      KUWREC.KUCCOID = KULREC.KUCCOID;
      /* *************************************************************/
      TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                     /* ;     move table key value*/
      KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* call db backout*/
      SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                     /* ;*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
      /* *************************************************************/
      /* ***** the following commented until retro-fitting of   ******/
      /* ***** the return from the error routine                ******/
      /* *************************************************************/
      /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                      /* ;     move appl global data*/
      /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
      /* XSEXIT                          ;     transfer to next appl*/
      /* ******************  end of error routine  *******************/
    end /* END OF "if" STATEMENT*/
  else
    /* ********** format and write audit report record ***********/
    KULREC.KULGRP = XA0CW01.XA0CWFIL;
                                 /* ;          move addr back*/
    KUZREC.KUZTYPE = "D"; /* assign type code value*/
    KUZREC.KUZBFCD = "B"; /* assign "after" code*/
    KUZREC.XXXTBLNM = "VADDR001"; /* move tbl name to audit rec*/
    KUZREC.XXXUSER = XA1REC.XXXUSER; /* move user id to audit rec*/
    KUZREC.KUCCOID = KULREC.KUCCOID; /* move co id to audit rec*/
    KUZREC.ZZZSDT = KULREC.ZZZSDT; /* move set up date to audit rec*/
    XX0XS01(); /* get system time*/
    KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS; /* move time to audit rec*/
    KUZREC.KUZDATA = KULREC.KULGRP; /* move data to audit record*/

    if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
      KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
      KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
    else
      KUZREC.KUZSSEQ = 0;
      KUZREC.KUZLEN = 0;
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1PGMNM = "XA0C   ";
      TA1REC.TA1LOCAT[1] = "XA0CS45  ";
      TA1REC.TA1LOCAT[2] = "KIZTBL   ";
      TA1REC.TA1LOCAT[3] = "VADDR001 ";
      TA1REC.TA1MAP = "        ";
      TA1REC.TA1DBASE = "DCUST.";
      TA1REC.TA1TBLVU = "VADDR001";
      TA1TBLKE = "TABLE NOT FOUND";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end

    call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};
                                   /* call i/o mod to add*/
    if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
                                               /* ne -803)*/
      /* **********************  call error routine  *****************/
      TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
      TA1REC.TA1FUNC = "ABND"; /* move function to error record*/
      TA1REC.TA1PGMNM = "XA0AS20 "; /* move program name to error rec*/
      TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1MAP = "N/A     ";
                                   /* move map name to error record*/
      TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
      TA1REC.TA1TBLVU = "VCUAUD01"; /* move table view to error record*/
      set KUWREC empty; /* initialize error work rec*/
      /* ************* move keys to error work record  ***************/
      KUWREC.KUCCOID = KUZREC.KUCCOID;
      /* *************************************************************/
      TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                     /* ;     move table key value*/
      KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* call db backout*/
      SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                     /* ;*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
      /* *************************************************************/
      /* ***** the following commented until retro-fitting of   ******/
      /* ***** the return from the error routine                ******/
      /* *************************************************************/
      /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                      /* ;     move appl global data*/
      /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
      /* XSEXIT                          ;     transfer to next appl*/
      /* ******************  end of error routine  *******************/
    end /* end of "if" statement*/
                                 /* ;*/
  end /* end of "if" statement*/





end // end XA0CS45

// replace use count - cust
Function XA0CS55()


   /* *************************************************************/
   /* *****   r e p l a c e   u s e   c o u n t   - C u s t  ******/
   /* *************************************************************/


   /* *********** set up customer address record ************/

  XX0XS01(); /* get date and time*/
  KULREC.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move curr dt to change dt*/
  KULREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
                                   /* move curr time to chng time*/


  call "IO0170" ("U ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod to update*/
  if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
    if (SQLCA.VAGen_SQLCODE == 100) /* if bad return code*/
      XA1REC.XA1ERIND[1] = 13; /* error "addr not found"*/
    else /* else(error other*/
                                                /* than 100)*/
      /* **********************  call error routine  *****************/
      TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
      TA1REC.TA1FUNC = "ABND"; /* move function to error record*/
      TA1REC.TA1PGMNM = "XA0CS35 "; /* move program name to error rec*/
      TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1MAP = "N/A     ";
                                   /* move map name to error record*/
      TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
      TA1REC.TA1TBLVU = "VADDR001"; /* move table view to error record*/
      set KUWREC empty; /* initialize error work rec*/
      /* ************* move keys to error work record  ***************/
      KUWREC.KUCCOID = KULREC.KUCCOID;
      /* *************************************************************/
      TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                     /* ;     move table key value*/
      KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* call db backout*/
      SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                     /* ;*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
      /* *************************************************************/
      /* ***** the following commented until retro-fitting of   ******/
      /* ***** the return from the error routine                ******/
      /* *************************************************************/
      /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                      /* ;     move appl global data*/
      /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
      /* XSEXIT                          ;     transfer to next appl*/
      /* ******************  end of error routine  *******************/
    end /* end of "if" statement*/
  else /* if replace successful*/
                                 /* ;      only do audit if okay*/
    /* *** format and write audit report record for after image ****/
    KUZREC.KUZTYPE = "C"; /* assign type code value*/
    KUZREC.KUZBFCD = "A"; /* assign "after" code*/
    KUZREC.XXXTBLNM = "VADDR001"; /* move tbl name to audit rec*/
    KUZREC.XXXUSER = XA1REC.XXXUSER; /* move user id to audit rec*/
    KUZREC.KUCCOID = KULREC.KUCCOID; /* move co id to audit rec*/

    /* note: chance time should be correct, xx0x was called just*/
          /* before update occured.*/

    KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
                                   /* move set up date to audit rec*/
    KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS; /* move time to audit rec*/
    KUZREC.KUZDATA = KULREC.KULGRP; /* move data to audit record*/

    if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
      KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
      KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
    else
      KUZREC.KUZSSEQ = 0;
      KUZREC.KUZLEN = 0;
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1PGMNM = "XA0C   ";
      TA1REC.TA1LOCAT[1] = "XA0CS35  ";
      TA1REC.TA1LOCAT[2] = "KIZTBL   ";
      TA1REC.TA1LOCAT[3] = "VADDR001 ";
      TA1REC.TA1MAP = "        ";
      TA1REC.TA1DBASE = "DCUST.";
      TA1REC.TA1TBLVU = "VADDR001";
      TA1TBLKE = "TABLE NOT FOUND";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end

    call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};
                                   /* call i/o mod to add*/
    if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
                                               /* ne -803)*/
      /* **********************  call error routine  *****************/
      TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
      TA1REC.TA1FUNC = "ABND"; /* move function to error record*/
      TA1REC.TA1PGMNM = "XA0AS20 "; /* move program name to error rec*/
      TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1MAP = "N/A     ";
                                   /* move map name to error record*/
      TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
      TA1REC.TA1TBLVU = "VCUAUD01"; /* move table view to error record*/
      set KUWREC empty; /* initialize error work rec*/
      /* ************* move keys to error work record  ***************/
      KUWREC.KUCCOID = KUZREC.KUCCOID;
      /* *************************************************************/
      TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                     /* ;     move table key value*/
      KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* call db backout*/
      SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                     /* ;*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
      /* *************************************************************/
      /* ***** the following commented until retro-fitting of   ******/
      /* ***** the return from the error routine                ******/
      /* *************************************************************/
      /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                      /* ;     move appl global data*/
      /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
      /* XSEXIT                          ;     transfer to next appl*/
      /* ******************  end of error routine  *******************/
    end /* end of "if" statement*/

    /* *** format and write audit report record for before image ***/
    KULREC.KULGRP = XA0CW01.XA0CWFIL; /* move before image to rec*/
    KUZREC.KUZTYPE = "C"; /* assign type code value*/
    KUZREC.KUZBFCD = "B"; /* assign "after" code*/
    KUZREC.XXXTBLNM = "VADDR001"; /* move tbl name to audit rec*/
    KUZREC.XXXUSER = XA1REC.XXXUSER; /* move user id to audit rec*/
    KUZREC.KUCCOID = KULREC.KUCCOID; /* move co id to audit rec*/

    /* note: chance time should be correct, xx0x was called just*/
          /* before update occured.*/

    KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
                                   /* move set up date to audit rec*/
    KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS; /* move time to audit rec*/
    KUZREC.KUZDATA = KULREC.KULGRP; /* move data to audit record*/

    if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
      KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
      KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
    else
      KUZREC.KUZSSEQ = 0;
      KUZREC.KUZLEN = 0;
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1PGMNM = "XA0C   ";
      TA1REC.TA1LOCAT[1] = "XA0CS35  ";
      TA1REC.TA1LOCAT[2] = "KIZTBL   ";
      TA1REC.TA1LOCAT[3] = "VADDR001 ";
      TA1REC.TA1MAP = "        ";
      TA1REC.TA1DBASE = "DCUST.";
      TA1REC.TA1TBLVU = "VADDR001";
      TA1TBLKE = "TABLE NOT FOUND";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end

    call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};
                                   /* call i/o mod to add*/
    if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
                                               /* ne -803)*/
      /* **********************  call error routine  *****************/
      TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
      TA1REC.TA1FUNC = "ABND"; /* move function to error record*/
      TA1REC.TA1PGMNM = "XA0AS20 "; /* move program name to error rec*/
      TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1MAP = "N/A     ";
                                   /* move map name to error record*/
      TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
      TA1REC.TA1TBLVU = "VCUAUD01"; /* move table view to error record*/
      set KUWREC empty; /* initialize error work rec*/
      /* ************* move keys to error work record  ***************/
      KUWREC.KUCCOID = KUZREC.KUCCOID;
      /* *************************************************************/
      TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                     /* ;     move table key value*/
      KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* call db backout*/
      SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                     /* ;*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
      /* *************************************************************/
      /* ***** the following commented until retro-fitting of   ******/
      /* ***** the return from the error routine                ******/
      /* *************************************************************/
      /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                      /* ;     move appl global data*/
      /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
      /* XSEXIT                          ;     transfer to next appl*/
      /* ******************  end of error routine  *******************/
    end /* end of "if" statement*/
  end






end // end XA0CS55

// get address statement grp
Function XA0CS80()


   /* *************************************************************/
   /* *****         g e t    a d d r e s s   f r o m         ******/
   /* *****            a d d r e s s    t a b l e            ******/
   /* *************************************************************/


  VLADDR01.NLATYPIN = XA1REC.NLATYPIN;
  VLADDR01.NLABSIND = XA1REC.NLABSIND;
  VLADDR01.NLAONECH = XA1REC.NLAONECH;
  VLADDR01.NLAINTGR = XA1REC.NLAINTGR;
  VLADDR01.NLASINT1 = XA1REC.NLASINT1;
  VLADDR01.NLASINT2 = XA1REC.NLASINT2;
  VLADDR01.NLAADRID = XA1REC.NLAADRID;

  call "IO4410" ("S ", SQLCA, VLADDR01) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod to select*/
  if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
    if (SQLCA.VAGen_SQLCODE == 100) /* if not found*/
      XA1REC.XA1ERIND[1] = 14; /* ERROR "not found"*/
    else
                                   /* else(error other than 100)*/
      /* GET ERROR*/
      /* **********************  call error routine  *****************/
      TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
      TA1REC.TA1FUNC = "ABND"; /* move function to error record*/
      TA1REC.TA1PGMNM = "XA0C080 "; /* move program name to error rec*/
      TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1MAP = "N/A     ";
                                   /* move map name to error record*/
      TA1REC.TA1DBASE = "DNILO   "; /* move database name to error rec*/
      TA1REC.TA1TBLVU = "VLADDR01"; /* move table view to error record*/
      set KUWREC empty; /* initialize error work rec*/
      /* ************* move keys to error work record  ***************/
      KUWREC.KUCCOID = VLADDR01.NLAINTGR;
      /* *************************************************************/
      TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                     /* ;     move table key value*/
      KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* call db backout*/
      SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                     /* ;*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
      /* *************************************************************/
      /* ***** the following commented until retro-fitting of   ******/
      /* ***** the return from the error routine                ******/
      /* *************************************************************/
      /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                      /* ;     move appl global data*/
      /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
      /* XSEXIT                          ;     transfer to next appl*/
      /* ******************  end of error routine  *******************/
    end /* END OF "if" STATEMENT*/
  end /* end of "if" statement*/

  XA1REC.XA1GROUP = VLADDR01.NLAGRP; /* group move of address*/




end // end XA0CS80

// get address statement grp
Function XA0CS85()


   /* *************************************************************/
   /* *****         g e t    a d d r e s s   f r o m         ******/
   /* *****          C u s t o m e r    t a b l e            ******/
   /* *************************************************************/


  KULREC.KUCCOID = XA1REC.NLAINTGR;
  KULREC.KULAAID = XA1REC.NLAADRID;
  call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod to select*/
  if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
    if (SQLCA.VAGen_SQLCODE == 100) /* if not found*/
      XA1REC.XA1ERIND[1] = 14; /* ERROR "not found"*/
    else
                                   /* else(error other than 100)*/
      /* GET ERROR*/
      /* **********************  call error routine  *****************/
      TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
      TA1REC.TA1FUNC = "ABND"; /* move function to error record*/
      TA1REC.TA1PGMNM = "XA0CS85 "; /* move program name to error rec*/
      TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1MAP = "N/A     ";
                                   /* move map name to error record*/
      TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
      TA1REC.TA1TBLVU = "VADDR001"; /* move table view to error record*/
      set KUWREC empty; /* initialize error work rec*/
      /* ************* move keys to error work record  ***************/
      KUWREC.KUCCOID = KULREC.KUCCOID;
      /* *************************************************************/
      TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                     /* ;     move table key value*/
      KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* call db backout*/
      SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                     /* ;*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
      /* *************************************************************/
      /* ***** the following commented until retro-fitting of   ******/
      /* ***** the return from the error routine                ******/
      /* *************************************************************/
      /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                      /* ;     move appl global data*/
      /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
      /* XSEXIT                          ;     transfer to next appl*/
      /* ******************  end of error routine  *******************/
    end /* END OF "if" STATEMENT*/
  end /* end of "if" statement*/




end // end XA0CS85

//*** RECORD=XA0CW01 ****
// this is the "working storage" record for application xa0c
// ***********************
Record XA0CW01 type basicRecord
  5 XA0CWCNM XA0CWCNM ; 
  5 XA0CWIDX XA0CWIDX ; 
  5 XA0CWFIL XA0CWFIL ; 
  5 XA0CWZIP XA0CWZIP ; 
    10 XA0CWDGT XA0CWDGT [10] ; 
end // end XA0CW01

DataItem XA0CWCNM char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// each digit in zip code
DataItem XA0CWDGT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fill area from addr rec
DataItem XA0CWFIL char(156)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XA0CWIDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group zip code field
DataItem XA0CWZIP char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

