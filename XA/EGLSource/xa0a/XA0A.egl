package xa0a;
import corpcom2.XX0XW01;
import corpcom4.XX0XS01;
import corpcom6.SQLCA;
import kl.common.KIZTBL;
import ku.common.KULREC;
import ku.common.KUWREC;
import ku.common.KUZREC;
import ta.common.TA1REC;
import xa.common.XA0AW02;
import xx.common.*;
import xx02.*;
import xx02.XCTTBL;
import xx05.*;
import xx05.XSTTBL;
//*** PROGRAM=XA0A ****
// ************************************************************
// *****       a d d r e s s    a p l i c a t i o n       *****
// *****                 p r o l o g u e                  *****
// ************************************************************
// 
// this application does  a l l  processing to the address
// table. any application which needs to inquire, insert,
// update, or delete an address is required to go thru this
// appliction. this appliction is passed the ku0e0adr record
// which contains a function code(this tells this application
// what processing to do) space for the address, and an error
// code for each field in the address.
// 
//   error field                description
//   -----------                -----------
//   ku0eerr(1)                 general error field
//   ku0eerr(2)                 error with address line 1
//   ku0eerr(3)                 error with address line 2
//   ku0eerr(4)                 error with address line 3
//   ku0eerr(5)                 error with city
//   ku0eerr(6)                 error with state
//   ku0eerr(7)                 error with zip code
//   ku0eerr(8)                 error with country
// 
//  each error field contains the number of the error message
//  on the message file.
// 
// valid function codes are:
// 
//                 e..........edit data only
//                 i..........edit data and insert row
//                 d..........delete a row from table
//                 n..........get next availiable address id
//                 r..........edit data and replace row
//                 g.........."get" address from passed id #
//                 a.........."all"
//                                 edit address
//                                 assign next address id
//                                 inser row in table
// 
// 
// 
// ************************************************************
// 10/20/88    jwood   added call NONCSP option
// 09/10/90    dsalzw  added kiztbl for audit trail
// 05/24/93    vcowan  chg msgfile to cu00
// 11/12/93    chellm  DB2 changes. VADDR001
// 08/14/95    chellm  Added Canada to validate State/Prov CD's
// 09/08/98    vcowan  re-gen to get Y2k version of xx0xs01
//                     to make load module Y2K compliant
// *********************
Program XA0A type basicProgram //VAGen Info - called batch program
  (
   XA0AW02 XA0AW02 // record
  )
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "CU00"
  }

  // Data Declarations
  KULREC KULREC; // record
  KUWREC KUWREC; // record
  KUZREC KUZREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  XA0AW01 XA0AW01; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use KIZTBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use XSTTBL {deleteAfterUse = yes}; // table

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XA0A010: XA0A010();
    goto XA0A020;
    XA0A020: XA0A020();
    ;
    ;
     /* *************************************************************/
     /* *****   determine the path of logic thru this          ******/
     /* *****   application based on the function code. if the ******/
     /* *****   function code is not a valid one. return an    ******/
     /* *****   error message indicating the problem.          ******/
     /* *****   valid functions are:                           ******/
     /* *****         e.......edit data only                   ******/
     /* *****         i.......edit data,insert row,use cnt = 1 ******/
     /* *****         o.......edit data,insert row,use cnt = 0 ******/
     /* *****         d.......delete a row from table          ******/
     /* *****         r.......edit data and replace row        ******/
     /* *****         g......."get" address from passed id #   ******/
     /* *****         a.......add 1 to addess use count        ******/
     /* *****         s.......subtract 1 from address use count******/
     /* *************************************************************/
    ;
    ;
    ;
    ;
    ;
    if (XA0AW02.XA0AWFNC == "E")
      goto XA0A030; /* edit only process*/
    else
      if (XA0AW02.XA0AWFNC == "I"
       || XA0AW02.XA0AWFNC == "O")
        goto XA0A040; /* insert process*/
      else
        if (XA0AW02.XA0AWFNC == "R")
          goto XA0A050; /* replace process*/
        else
          if (XA0AW02.XA0AWFNC == "G")
            goto XA0A080;
                                     /* "get" address of supplied id*/
          else
            if (XA0AW02.XA0AWFNC == "D")
              goto XA0A090; /* delete address from table*/
            else
              if (XA0AW02.XA0AWFNC == "A")
                goto XA0A100; /* add 1 to address use count*/
              else
                if (XA0AW02.XA0AWFNC == "S")
                  goto XA0A110; /* subtract 1 from use count*/
                else
                  XA0AW02.XA0AWERR[1] = 8;
                  goto XA0A999;
                end
              end
            end
          end
        end
      end
    end
    ;
    ;
    ;
    ;
    ;
    ;
    XA0A030: XA0A030();
    ;
    ;
    goto XA0A999; /* return ( goto end of this called application )*/
    ;
    ;
    ;
    ;
    ;
    XA0A040: XA0A040();
    ;
    ;
    goto XA0A999; /* return (goto end of application process)*/
    ;
    ;
    ;
    ;
    ;
    XA0A050: XA0A050();
    ;
    ;
    goto XA0A999; /* return (goto end of application process)*/
    ;
    ;
    ;
    ;
    ;
    XA0A080: XA0A080();
    ;
    ;
    goto XA0A999; /* return (goto end of application process)*/
    ;
    ;
    ;
    ;
    ;
    XA0A090: XA0A090();
    ;
    ;
    goto XA0A999; /* return (goto end of application process)*/
    ;
    ;
    ;
    ;
    ;
    XA0A100: XA0A100();
    ;
    ;
    goto XA0A999; /* return (goto end of application process)*/
    ;
    ;
    ;
    ;
    ;
    XA0A110: XA0A110();
    ;
    ;
    goto XA0A999; /* return (goto end of application process)*/
    ;
    ;
    ;
    ;
    ;
    XA0A999: XA0A999();
    ;
    ;
     /* *************************************************************/
     /* *****    no processing occurs in this flow secion      ******/
     /* *************************************************************/
    ;
    ;
    ;
    ;
    ;
  end // end main
end // end XA0A

// first time thru logic
Function XA0A010()
  ;
  ;
   /* *************************************************************/
   /* *****  f i r s t    t i m e    t h r u    l o g i c    ******/
   /* *************************************************************/
  ;
  ;
   /* *************************************************************/
   /* *****         initialize all error fields to 0         ******/
   /* *************************************************************/
  XA0AW02.XA0AWERR[1] = 0; /* initailize error code to 0*/
  XA0AW02.XA0AWERR[2] = 0; /* initailize error code to 0*/
  XA0AW02.XA0AWERR[3] = 0; /* initailize error code to 0*/
  XA0AW02.XA0AWERR[4] = 0; /* initailize error code to 0*/
  XA0AW02.XA0AWERR[5] = 0; /* initailize error code to 0*/
  XA0AW02.XA0AWERR[6] = 0; /* initailize error code to 0*/
  XA0AW02.XA0AWERR[7] = 0; /* initailize error code to 0*/
  XA0AW02.XA0AWERR[8] = 0; /* initailize error code to 0*/
  ;
  set KULREC empty; /* initialize record*/
  set KUZREC empty; /* initialize record*/
  set XA0AW01 empty; /* initialize record*/
  set SQLCA empty; /* initialize record*/
  set TA1REC empty; /* initialize record*/
  set XX0XW01 empty; /* initialize record*/
  set KUWREC empty; /* initialize record*/
  ;
  ;
  ;
  ;
  ;
end // end XA0A010

// determine function
Function XA0A020()
  ;
  ;
   /* *************************************************************/
   /* *****      d e t e r m i n e    f u n c t i o n        ******/
   /* *************************************************************/
  ;
  ;
   /* *************************************************************/
   /* *****  no processing in this section (see flow stage)  ******/
   /* *************************************************************/
  ;
  ;
  ;
  ;
  ;
end // end XA0A020

// e edit only process
Function XA0A030()
  ;
  ;
   /* *************************************************************/
   /* *****       e d i t    a d d r e s s    o n l y        ******/
   /* *****                 p r o c r e s s                  ******/
   /* *************************************************************/
  ;
  ;
  XA0AS10(); /* edit address statement group*/
  ;
  ;
  ;
  ;
  ;
end // end XA0A030

// i insert process
Function XA0A040()
  ;
  ;
   /* *************************************************************/
   /* *****   i n s e r t   r o w    i n    a d d r e s s    ******/
   /* *****                   t a b l e                      ******/
   /* *************************************************************/
  ;
  ;
  XA0AS10(); /* edit address stmt group*/
  XA0AW01.XA0AWIDX = 1; /* initialize index*/
  while (XA0AW01.XA0AWIDX <= 8) /* loop thru error fields*/
    if (XA0AW02.XA0AWERR[XA0AWIDX] != 0) /* check for validity of addr*/
      XA0AW02.XA0AWERR[1] = 9; /* insert failed,invalid addr*/
      exit stack; /* goto flow*/
    else /* else*/
      ;
      XA0AW01.XA0AWIDX = XA0AW01.XA0AWIDX + 1;
                                          /* increment index*/
      ;
    end /* end of "if" statement*/
  end /* end of "while" loop*/
  XA0AS20(); /* insert address stmt group*/
  ;
  ;
  ;
  ;
  ;
end // end XA0A040

// r replace process
Function XA0A050()
  ;
  ;
   /* *************************************************************/
   /* *****   r e p l a c e   r o w    i n    a d d r e s s  ******/
   /* *****                   t a b l e                      ******/
   /* *************************************************************/
  ;
  ;
  XA0AS10(); /* edit address stmt group*/
  if (XA0AW02.XA0AWERR[1] != 0 /* check for validity of addr*/
   || XA0AW02.XA0AWERR[2] != 0 /* |*/
   || XA0AW02.XA0AWERR[3] != 0 /* |*/
   || XA0AW02.XA0AWERR[4] != 0 /* |*/
   || XA0AW02.XA0AWERR[5] != 0 /* |*/
   || XA0AW02.XA0AWERR[6] != 0 /* |*/
   || XA0AW02.XA0AWERR[7] != 0 /* |*/
   || XA0AW02.XA0AWERR[8] != 0) /* |*/
    XA0AW02.XA0AWERR[1] = 12; /* replace failed,invalid addr*/
    exit stack; /* goto flow*/
  else /* else*/
    /* next sentence                ;      okay*/
  end /* end of "if" statement*/
  KULREC.KULGRP = XA0AW02.XA0AWGRP;
                                 /* ;    move addr keys to addr*/
  XA0AW01.XA0AWFIL = XA0AW02.XA0AWGRP;
                                 /* ;    save new addr data*/
  XA0AS81(); /* get "old"(before) address*/
  XA0AW02.XA0AWGRP = XA0AW01.XA0AWFIL;
                                 /* ;    move new addr back*/
  XA0AW01.XA0AWFIL = KULREC.KULGRP;
                                 /* ;    move before copy to save*/
  XA0AS30(); /* replace address stmt group*/
  if (SQLCA.VAGen_SQLCODE == 0) /* if replace successful*/
                                 /* ;      only do audit if okay*/
    /* *** format and write audit report record for after image ****/
    KUZREC.KUZTYPE = "C"; /* assign type code value*/
    KUZREC.KUZBFCD = "A"; /* assign "after" code*/
    KUZREC.XXXTBLNM = "VADDR001"; /* move tbl name to audit rec*/
    KUZREC.XXXUSER = XA0AW02.XXXUSER; /* move user id to audit rec*/
    KUZREC.KUCCOID = KULREC.KUCCOID; /* move co id to audit rec*/
    ;
    /* note: chance time should be correct, xx0x was called just*/
          /* before update occured.*/
    ;
    KUZREC.ZZZSDT = XX0XW01.XX0XWDAT;
                                   /* move set up date to audit rec*/
    KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS; /* move time to audit rec*/
    KUZREC.KUZDATA = KULREC.KULGRP; /* move data to audit record*/
    ;
    if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
      KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
      KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
    else
      KUZREC.KUZSSEQ = 0;
      KUZREC.KUZLEN = 0;
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1PGMNM = "XA0A   ";
      TA1REC.TA1LOCAT[1] = "XA0A050  ";
      TA1REC.TA1LOCAT[2] = "KIZTBL   ";
      TA1REC.TA1LOCAT[3] = "VADDR001 ";
      TA1REC.TA1MAP = "        ";
      TA1REC.TA1DBASE = "DCUST.";
      TA1REC.TA1TBLVU = "VADDR001";
      TA1TBLKE = "TABLE NOT FOUND";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
    ;
    call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};
                                   /* call i/o mod to add*/
    if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
                                               /* ne -803)*/
      /* **********************  call error routine  *****************/
      TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
      TA1REC.TA1FUNC = "ABND"; /* move function to error record*/
      TA1REC.TA1PGMNM = "XA0AS20 "; /* move program name to error rec*/
      TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1MAP = "N/A     ";
                                   /* move map name to error record*/
      TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
      TA1REC.TA1TBLVU = "VCUAUD01"; /* move table view to error record*/
      set KUWREC empty; /* initialize error work rec*/
      /* ************* move keys to error work record  ***************/
      KUWREC.KUCCOID = KUZREC.KUCCOID;
      /* *************************************************************/
      TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                     /* ;     move table key value*/
      KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* call db backout*/
      SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                     /* ;*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
      /* *************************************************************/
      /* ***** the following commented until retro-fitting of   ******/
      /* ***** the return from the error routine                ******/
      /* *************************************************************/
      /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                      /* ;     move appl global data*/
      /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
      /* XSEXIT                          ;     transfer to next appl*/
      /* ******************  end of error routine  *******************/
    end /* end of "if" statement*/
    ;
    /* *** format and write audit report record for before image ***/
    KULREC.KULGRP = XA0AW01.XA0AWFIL; /* move before image to rec*/
    KUZREC.KUZTYPE = "C"; /* assign type code value*/
    KUZREC.KUZBFCD = "B"; /* assign "after" code*/
    KUZREC.XXXTBLNM = "VADDR001"; /* move tbl name to audit rec*/
    KUZREC.XXXUSER = XA0AW02.XXXUSER; /* move user id to audit rec*/
    KUZREC.KUCCOID = KULREC.KUCCOID; /* move co id to audit rec*/
    ;
    /* note: chance time should be correct, xx0x was called just*/
          /* before update occured.*/
    ;
    KUZREC.ZZZSDT = XX0XW01.XX0XWDAT; /* move date to audit rec*/
    KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS; /* move time to audit rec*/
    KUZREC.KUZDATA = KULREC.KULGRP; /* move data to audit record*/
    ;
    if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
      KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
      KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
    else
      KUZREC.KUZSSEQ = 0;
      KUZREC.KUZLEN = 0;
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1PGMNM = "XA0A   ";
      TA1REC.TA1LOCAT[1] = "XA0A050  ";
      TA1REC.TA1LOCAT[2] = "KIZTBL   ";
      TA1REC.TA1LOCAT[3] = "VADDR001 ";
      TA1REC.TA1MAP = "        ";
      TA1REC.TA1DBASE = "DCUST.";
      TA1REC.TA1TBLVU = "VADDR001";
      TA1TBLKE = "TABLE NOT FOUND";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
    ;
    call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};
                                   /* call i/o mod to add*/
    if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
                                               /* ne -803)*/
      /* **********************  call error routine  *****************/
      TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
      TA1REC.TA1FUNC = "ABND"; /* move function to error record*/
      TA1REC.TA1PGMNM = "XA0AS20 "; /* move program name to error rec*/
      TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1MAP = "N/A     ";
                                   /* move map name to error record*/
      TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
      TA1REC.TA1TBLVU = "VCUAUD01"; /* move table view to error record*/
      set KUWREC empty; /* initialize error work rec*/
      /* ************* move keys to error work record  ***************/
      KUWREC.KUCCOID = KUZREC.KUCCOID;
      /* *************************************************************/
      TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                     /* ;     move table key value*/
      KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* call db backout*/
      SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                     /* ;*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
      /* *************************************************************/
      /* ***** the following commented until retro-fitting of   ******/
      /* ***** the return from the error routine                ******/
      /* *************************************************************/
      /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                      /* ;     move appl global data*/
      /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
      /* XSEXIT                          ;     transfer to next appl*/
      /* ******************  end of error routine  *******************/
    end /* end of "if" statement*/
  end
  ;
  ;
  ;
  ;
end // end XA0A050

// g get address of supplied id
Function XA0A080()
  ;
  ;
   /* *************************************************************/
   /* *****         g e t    a d d r e s s   f r o m         ******/
   /* *****            a d d r e s s    t a b l e            ******/
   /* *************************************************************/
  ;
  ;
  XA0AS81(); /* execute "get address" statement grp*/
  XA0AS16(); /* edit state code*/
  XA0AS18(); /* edit country code*/
  ;
  ;
  ;
  ;
  ;
end // end XA0A080

// d delete address from table
Function XA0A090()
  ;
  ;
   /* *************************************************************/
   /* *****      d e l e t e    a d d r e s s   f r o m      ******/
   /* *****            a d d r e s s    t a b l e            ******/
   /* *************************************************************/
  ;
  ;
  XA0AS81(); /* get address for audit report*/
  XA0AW01.XA0AWFIL = KULREC.KULGRP;
                                 /* ;save address for audit rpt*/
  ;
  KULREC.KUCCOID = XA0AW02.KUCCOID;
  KULREC.KULAAID = XA0AW02.KULAAID;
  call "IO0170" ("D ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod to delete*/
  if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
    if (SQLCA.VAGen_SQLCODE == 100) /* if not found*/
      XA0AW02.XA0AWERR[1] = 15; /* ERROR "not found"*/
    else
                                   /* else(error other than 100)*/
      /* **********************  call error routine  *****************/
      TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
      TA1REC.TA1FUNC = "ABND"; /* move function to error record*/
      TA1REC.TA1PGMNM = "XA0A090 "; /* move program name to error rec*/
      TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1MAP = "N/A     ";
                                   /* move map name to error record*/
      TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
      TA1REC.TA1TBLVU = "VADDR001"; /* move table view to error record*/
      set KUWREC empty; /* initialize error work rec*/
      /* ************* move keys to error work record  ***************/
      KUWREC.KUCCOID = KULREC.KUCCOID;
      /* *************************************************************/
      TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                     /* ;     move table key value*/
      KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* call db backout*/
      SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                     /* ;*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
      /* *************************************************************/
      /* ***** the following commented until retro-fitting of   ******/
      /* ***** the return from the error routine                ******/
      /* *************************************************************/
      /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                      /* ;     move appl global data*/
      /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
      /* XSEXIT                          ;     transfer to next appl*/
      /* ******************  end of error routine  *******************/
    end /* END OF "if" STATEMENT*/
  else
    /* ********** format and write audit report record ***********/
    KULREC.KULGRP = XA0AW01.XA0AWFIL;
                                 /* ;          move addr back*/
    KUZREC.KUZTYPE = "D"; /* assign type code value*/
    KUZREC.KUZBFCD = "B"; /* assign "after" code*/
    KUZREC.XXXTBLNM = "VADDR001"; /* move tbl name to audit rec*/
    KUZREC.XXXUSER = XA0AW02.XXXUSER; /* move user id to audit rec*/
    KUZREC.KUCCOID = KULREC.KUCCOID; /* move co id to audit rec*/
    KUZREC.ZZZSDT = KULREC.ZZZSDT; /* move set up date to audit rec*/
    XX0XS01(); /* get system time*/
    KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS; /* move time to audit rec*/
    KUZREC.KUZDATA = KULREC.KULGRP; /* move data to audit record*/
    ;
    if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
      KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
      KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
    else
      KUZREC.KUZSSEQ = 0;
      KUZREC.KUZLEN = 0;
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1PGMNM = "XA0A   ";
      TA1REC.TA1LOCAT[1] = "XA0A090  ";
      TA1REC.TA1LOCAT[2] = "KIZTBL   ";
      TA1REC.TA1LOCAT[3] = "VADDR001 ";
      TA1REC.TA1MAP = "        ";
      TA1REC.TA1DBASE = "DCUST.";
      TA1REC.TA1TBLVU = "VADDR001";
      TA1TBLKE = "TABLE NOT FOUND";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
    ;
    call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};
                                   /* call i/o mod to add*/
    if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
                                               /* ne -803)*/
      /* **********************  call error routine  *****************/
      TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
      TA1REC.TA1FUNC = "ABND"; /* move function to error record*/
      TA1REC.TA1PGMNM = "XA0AS20 "; /* move program name to error rec*/
      TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1MAP = "N/A     ";
                                   /* move map name to error record*/
      TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
      TA1REC.TA1TBLVU = "VCUAUD01"; /* move table view to error record*/
      set KUWREC empty; /* initialize error work rec*/
      /* ************* move keys to error work record  ***************/
      KUWREC.KUCCOID = KUZREC.KUCCOID;
      /* *************************************************************/
      TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                     /* ;     move table key value*/
      KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* call db backout*/
      SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                     /* ;*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
      /* *************************************************************/
      /* ***** the following commented until retro-fitting of   ******/
      /* ***** the return from the error routine                ******/
      /* *************************************************************/
      /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                      /* ;     move appl global data*/
      /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
      /* XSEXIT                          ;     transfer to next appl*/
      /* ******************  end of error routine  *******************/
    end /* end of "if" statement*/
                                 /* ;*/
  end /* end of "if" statement*/
  ;
  ;
  ;
  ;
  ;
end // end XA0A090

// a add 1 to address use count
Function XA0A100()
  ;
  ;
   /* *************************************************************/
   /* *****   a d d    1    t o    a d d r e s s    u s e    ******/
   /* *****                     c o u n t                    ******/
   /* *************************************************************/
  ;
  ;
  XA0AS81(); /* get address record*/
  if (XA0AW02.XA0AWERR[1] == 0) /* if address found*/
    XA0AW02.KULUSCNT = XA0AW02.KULUSCNT + 1;
                                 /* ;  increment use count by +1*/
    XA0AS30(); /* replace address record*/
    if (XA0AW02.XA0AWERR[1] != 0) /* if replace successful*/
      XA0AW02.XA0AWERR[1] = 56; /* error "record updated since last"*/
    else /* else(replace okay)*/
      /* next sentence              ;    okay*/
    end /* end of "if" statement*/
  else /* else(address not found)*/
    /* next sentence                ;  return to calling module*/
  end /* end of "if" statement*/
  ;
  ;
  ;
  ;
  ;
end // end XA0A100

// s subtract 1 from use count
Function XA0A110()
  ;
  ;
   /* *************************************************************/
   /* *****    s u b t r a c t    1    f r o m    u s e      ******/
   /* *****                   c o u n t                      ******/
   /* *************************************************************/
  ;
  ;
  XA0AS81(); /* get address record*/
  if (XA0AW02.XA0AWERR[1] == 0) /* if address found*/
    if (XA0AW02.KULUSCNT <= 0) /* if use count already 0*/
      XA0AW02.XA0AWERR[1] = 57; /* error "use cnt laready 0"*/
    else /* else(use count > 0)*/
      XA0AW02.KULUSCNT = XA0AW02.KULUSCNT - 1;
                                 /* ;    decrement use count by 1*/
      XA0AS30(); /* replace address record*/
      if (XA0AW02.XA0AWERR[1] != 0) /* if replace successful*/
        XA0AW02.XA0AWERR[1] = 56; /* error "record updated since last"*/
      else /* else(replace okay)*/
        /* next sentence            ;      okay*/
      end /* end of "if" statement*/
    end /* end of "if" statement*/
  else /* else(address not found)*/
    /* next sentence                ;  return to calling module*/
  end /* end of "if" statement*/
  ;
  ;
  ;
  ;
  ;
end // end XA0A110

// exit address table application
Function XA0A999()
  ;
  ;
   /* *************************************************************/
   /* *****                  r e t u r n                     ******/
   /* *************************************************************/
  ;
  ;
  ;
  ;
  exit program; /* return to calling application*/
  ;
  ;
  ;
  ;
  ;
end // end XA0A999

// edit address
Function XA0AS10()
  ;
  ;
   /* *************************************************************/
   /* *****           e d i t    a d d r e s s               ******/
   /* *************************************************************/
  ;
  ;
  XA0AS11(); /* bottom justify address lines*/
  XA0AS12(); /* edit address line 1*/
  XA0AS13(); /* edit address line 2*/
  XA0AS14(); /* edit address line 3*/
  XA0AS15(); /* edit city*/
  XA0AS18(); /* edit country*/
  XA0AS16(); /* edit state*/
  XA0AS17(); /* edit zip code*/
  ;
  ;
  ;
  ;
  ;
end // end XA0AS10

// bottom justify addr lines
Function XA0AS11()
  ;
  ;
   /* *************************************************************/
   /* *****  b o t t o m    j u s t i f y   a d d r e s s    ******/
   /* *****                   l i n e s                      ******/
   /* *************************************************************/
  ;
  ;
  if (XA0AW02.XXX-ADDR2 == " ") /* if addr line 2 blank*/
    XA0AW02.XXX-ADDR2 = XA0AW02.XXX-ADDR1; /* move addr1 to addr2*/
    XA0AW02.XXX-ADDR1 = " "; /* blank out addr1*/
  end /* end of "if" statement*/
  if (XA0AW02.XXX-ADDR3 == " ") /* if addr line 3 blank*/
    XA0AW02.XXX-ADDR3 = XA0AW02.XXX-ADDR2; /* move addr2 to addr3*/
    XA0AW02.XXX-ADDR2 = XA0AW02.XXX-ADDR1; /* move addr1 to addr2*/
    XA0AW02.XXX-ADDR1 = " "; /* blank out addr1*/
  end /* end of "if" statement*/
  ;
  ;
  ;
  ;
  ;
end // end XA0AS11

// edit address line 1
Function XA0AS12()
  ;
  ;
   /* *************************************************************/
   /* *****    e d i t    a d d r e s s   l i n e    1       ******/
   /* *****                                                  ******/
   /* *****  this field is free form, and optional, so no    ******/
   /* *****  editing is required at this time. however,      ******/
   /* *****  this statement group left here in case editing  ******/
   /* *****  for this field is ever needed.                  ******/
   /* *************************************************************/
  ;
  ;
  ;
  ;
  ;
end // end XA0AS12

// edit address line 2
Function XA0AS13()
  ;
  ;
   /* *************************************************************/
   /* *****    e d i t    a d d r e s s   l i n e    2       ******/
   /* *****                                                  ******/
   /* *****  this field is free form, and optional, so no    ******/
   /* *****  editing is required at this time. however,      ******/
   /* *****  this statement group left here in case editing  ******/
   /* *****  for this field is ever needed.                  ******/
   /* *************************************************************/
  ;
  ;
  ;
  ;
  ;
end // end XA0AS13

// edit address line 3
Function XA0AS14()
  ;
  ;
   /* *************************************************************/
   /* *****    e d i t    a d d r e s s   l i n e    3       ******/
   /* *************************************************************/
  ;
  ;
  if (XA0AW02.XXX-ADDR3 == " ") /* if third address line blank*/
    XA0AW02.XA0AWERR[4] = 16; /* error "required missing"*/
  end /* end of "if" statement*/
  ;
  ;
  ;
  ;
  ;
end // end XA0AS14

// edit city name
Function XA0AS15()
  ;
  ;
   /* *************************************************************/
   /* *****                e d i t   c i t y                 ******/
   /* *************************************************************/
  ;
  ;
  if (XA0AW02.XXXCITY == " ") /* if city field is blank*/
    XA0AW02.XA0AWERR[5] = 5; /* error "required field missing"*/
  end /* end of "if" statement*/
  ;
  ;
  ;
  ;
  ;
end // end XA0AS15

// edit state ( if within usa )
Function XA0AS16()
  ;
  ;
   /* *************************************************************/
   /* *****                e d i t   s t a t e               ******/
   /* *************************************************************/
  ;
  ;
  if (XA0AW02.XCTCD == " "   /* state name validation only*/
   || XA0AW02.XCTCD == "USA" /* valid within the usa*/
   || XA0AW02.XCTCD == "CANA") /* valid within Canada*/
    if (XA0AW02.XSTCD == " ") /* if state field is blank*/
      XA0AW02.XA0AWERR[6] = 5; /* error "required field missing"*/
      XA0AW02.XSTDESC = " "; /* blank out state name*/
    else /* else (state field is not blank)*/
      ;
      if (XA0AW02.XSTCD in XSTTBL.XSTCD)
        XA0AW02.XSTDESC = XSTTBL.XSTDESC[sysVar.arrayIndex];
      end
                                      /* search table for valid state*/
      ;
      if (sysVar.arrayIndex == 0) /* if state code not found*/
        XA0AW02.XA0AWERR[6] = 6; /* error "invalid state"*/
        XA0AW02.XSTDESC = " "; /* blank out state name*/
      else /* else(state found on table)*/
        /* ***************  check status code of entry  ****************/
        if (XSTTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* if status is not active*/
          XA0AW02.XA0AWERR[6] = 6; /* error "invalid state code"*/
          XA0AW02.XSTDESC = " "; /* blank out state name*/
        else /* else(status is active)*/
          /* next sentence                ;  okay*/
        end /* end of "if" statement*/
        /* *************************************************************/
      end /* end of "if" statement*/
    end /* end of "if" statement*/
  else /* if foreign country*/
    if (XA0AW02.XSTCD == " ") /* if no state entered*/
      XA0AW02.XSTDESC = " "; /* blank out state name*/
    else /* if state entered for foreign cntry*/
      XA0AW02.XA0AWERR[6] = 154; /* error "state code not allowed"*/
      XA0AW02.XSTDESC = " "; /* blank out state name*/
    end
  end
  ;
  ;
  ;
end // end XA0AS16

// edit zip code
Function XA0AS17()
  ;
  ;
   /* *************************************************************/
   /* *****            e d i t   z i p   c o d e             ******/
   /* *************************************************************/
  ;
  ;
  if (XA0AW02.XCTCD == "USA" /* is address within the*/
   /* ;  united states*/
   || XA0AW02.XCTCD == " ")  /* (blanks default to usa)*/
    if (XA0AW02.XXXZIP == " ") /* zip code blank ?*/
      XA0AW02.XA0AWERR[7] = 5; /* error message*/
                                 /* ;    "required field missing"*/
    else /* else(address is not blank)*/
      XA0AW01.XA0AWZIP = XA0AW02.XXXZIP;
                                 /* ;    move zip code to work field*/
      /* *************************************************************/
      /* *****  zip code only valid if it has exactly 5 or 9    ******/
      /* *****  consecutive numeric digits. if zip has 5 digits ******/
      /* *****  the remaining space must be blank.              ******/
      /* *************************************************************/
      if (XA0AW01.XA0AWDGT[1] >= "0" 
       /* if zip code is valid 5 digits*/
       && XA0AW01.XA0AWDGT[1] <= "9" /* |*/
       && XA0AW01.XA0AWDGT[2] >= "0" /* |*/
       && XA0AW01.XA0AWDGT[2] <= "9" /* |*/
       && XA0AW01.XA0AWDGT[3] >= "0" /* |*/
       && XA0AW01.XA0AWDGT[3] <= "9" /* |*/
       && XA0AW01.XA0AWDGT[4] >= "0" /* |*/
       && XA0AW01.XA0AWDGT[4] <= "9" /* |*/
       && XA0AW01.XA0AWDGT[5] >= "0" /* |*/
       && XA0AW01.XA0AWDGT[5] <= "9" /* |*/
       && XA0AW01.XA0AWDGT[6] == " " /* |*/
       && XA0AW01.XA0AWDGT[7] == " " /* |*/
       && XA0AW01.XA0AWDGT[8] == " " /* |*/
       && XA0AW01.XA0AWDGT[9] == " " /* |*/
       && XA0AW01.XA0AWDGT[10] == " ") /* |*/
        /* next sentence            ;      okay(has 5 valid digits)*/
      else /* else(zip is not valid 5 digits)*/
        if (XA0AW01.XA0AWDGT[1] >= "0" /* if zip is valid 9 digit zip*/
         && XA0AW01.XA0AWDGT[1] <= "9" /* |*/
         && XA0AW01.XA0AWDGT[2] >= "0" /* |*/
         && XA0AW01.XA0AWDGT[2] <= "9" /* |*/
         && XA0AW01.XA0AWDGT[3] >= "0" /* |*/
         && XA0AW01.XA0AWDGT[3] <= "9" /* |*/
         && XA0AW01.XA0AWDGT[4] >= "0" /* |*/
         && XA0AW01.XA0AWDGT[4] <= "9" /* |*/
         && XA0AW01.XA0AWDGT[5] >= "0" /* |*/
         && XA0AW01.XA0AWDGT[5] <= "9" /* |*/
         && XA0AW01.XA0AWDGT[6] >= "0" /* |*/
         && XA0AW01.XA0AWDGT[6] <= "9" /* |*/
         && XA0AW01.XA0AWDGT[7] >= "0" /* |*/
         && XA0AW01.XA0AWDGT[7] <= "9" /* |*/
         && XA0AW01.XA0AWDGT[8] >= "0" /* |*/
         && XA0AW01.XA0AWDGT[8] <= "9" /* |*/
         && XA0AW01.XA0AWDGT[9] >= "0" /* |*/
         && XA0AW01.XA0AWDGT[9] <= "9" /* |*/
         && XA0AW01.XA0AWDGT[10] == " ") /* |*/
          /* next sentence          ;        okay(zip is 9 valid digits)*/
        else /* else(zip code is invalid)*/
          if (XA0AW01.XA0AWDGT[1] >= "0"  /* if zip is valid 9 digit zip*/
           && XA0AW01.XA0AWDGT[1] <= "9"  /* with '-' in 6th digit*/
           && XA0AW01.XA0AWDGT[2] >= "0"  /* |*/
           && XA0AW01.XA0AWDGT[2] <= "9"  /* |*/
           && XA0AW01.XA0AWDGT[3] >= "0"  /* |*/
           && XA0AW01.XA0AWDGT[3] <= "9"  /* |*/
           && XA0AW01.XA0AWDGT[4] >= "0"  /* |*/
           && XA0AW01.XA0AWDGT[4] <= "9"  /* |*/
           && XA0AW01.XA0AWDGT[5] >= "0"  /* |*/
           && XA0AW01.XA0AWDGT[5] <= "9"  /* |*/
           && XA0AW01.XA0AWDGT[6] == "-"  /* |*/
           && XA0AW01.XA0AWDGT[7] >= "0"  /* |*/
           && XA0AW01.XA0AWDGT[7] <= "9"  /* |*/
           && XA0AW01.XA0AWDGT[8] >= "0"  /* |*/
           && XA0AW01.XA0AWDGT[8] <= "9"  /* |*/
           && XA0AW01.XA0AWDGT[9] >= "0"  /* |*/
           && XA0AW01.XA0AWDGT[9] <= "9"  /* |*/
           && XA0AW01.XA0AWDGT[10] >= "0" /* |*/
           && XA0AW01.XA0AWDGT[10] <= "9") /* |*/
            /* next sentence        ;          okay(zip is 9 valid digits)*/
          else /* else(zip code is invalid)*/
            XA0AW02.XA0AWERR[7] = 89; /* error message*/
                                 /* ;          "invalid zip code"*/
          end /* end of "if" statement*/
        end /* end of "if" statement*/
      end /* end of "if" statement*/
    end /* end of "if" statement*/
  else /* else(zip code is not within usa)*/
    /* next sentence                ;  no validation on zip code*/
  end /* end of "if" statement*/
  ;
  ;
  ;
  ;
  ;
end // end XA0AS17

// edit country
Function XA0AS18()
  ;
  ;
   /* *************************************************************/
   /* *****            e d i t   c o u n t r y               ******/
   /* *************************************************************/
  ;
  ;
  XA0AW02.XCTDESC = " "; /* initialize country decode*/
  if (XA0AW02.XCTCD == " ") /* if country field blank*/
    XA0AW02.XCTCD = "USA "; /* force default to 'usa '*/
  end /* end of "if" statement*/
  if (XA0AW02.XCTCD in XCTTBL.XCTCD)
                                 /* ;if country code in table*/
    /* ***************  check status code of entry  ****************/
    if (XCTTBL.XXXSTAT[sysVar.arrayIndex] != "A") /* if status is not active*/
      XA0AW02.XA0AWERR[8] = 7; /* error "invalid country cd"*/
    else /* else(status is active)*/
      XA0AW02.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
                                 /* ;    move decode name to rec*/
    end /* end of "if" statement*/
    /* *************************************************************/
  else /* else( country code not in table)*/
    XA0AW02.XA0AWERR[8] = 7; /* error "invalid country"*/
  end /* end of "if" statement*/
  ;
  ;
  ;
  ;
  ;
end // end XA0AS18

// insert address
Function XA0AS20()
  ;
  ;
   /* *************************************************************/
   /* *****      i n s e r t    a d d r e s s    i n t o     ******/
   /* *****                      t a b l e                   ******/
   /* *************************************************************/
  ;
  ;
  XX0XS01(); /* get date and time*/
  XA0AW02.ZZZSDT = XX0XW01.XX0XWDAT; /* move curr dt to setup dt*/
  XA0AW02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move curr dt to change dt*/
  XA0AW02.ZZZCHGTM = XX0XW01.XX0XWTIM; /* move curr time to chng time*/
  XA0AW02.ZZZCHGCT = 0; /* initialize chng count to 0*/
  if (XA0AW02.XA0AWFNC == "I") /* if function code is i*/
    XA0AW02.KULUSCNT = 1;
                                   /* initialize use count to 1*/
  else
                                   /* else(function code equal o)*/
    XA0AW02.KULUSCNT = 0;
                                   /* initialize use count to 0*/
  end /* end of "if" statement*/
  ;
  KULREC.KULGRP = XA0AW02.XA0AWGRP; /* group move of address*/
  call "IO0170" ("A ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod to add*/
  if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
    if (SQLCA.VAGen_SQLCODE == -803) /* if duplicate insert*/
      XA0AW02.XA0AWERR[1] = 10; /* error msg "duplicate*/
                                                 /* isrt,add failed"*/
    else /* else (return code*/
                                               /* ne -803)*/
      /* **********************  call error routine  *****************/
      TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
      TA1REC.TA1FUNC = "ABND"; /* move function to error record*/
      TA1REC.TA1PGMNM = "XA0AS20 "; /* move program name to error rec*/
      TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1MAP = "N/A     ";
                                   /* move map name to error record*/
      TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
      TA1REC.TA1TBLVU = "VADDR001"; /* move table view to error record*/
      set KUWREC empty; /* initialize error work rec*/
      /* ************* move keys to error work record  ***************/
      KUWREC.KUCCOID = KULREC.KUCCOID;
      /* *************************************************************/
      TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                     /* ;     move table key value*/
      KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* call db backout*/
      SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                     /* ;*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
      /* *************************************************************/
      /* ***** the following commented until retro-fitting of   ******/
      /* ***** the return from the error routine                ******/
      /* *************************************************************/
      /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                      /* ;     move appl global data*/
      /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
      /* XSEXIT                          ;     transfer to next appl*/
      /* ******************  end of error routine  *******************/
    end /* end of "if" statement*/
  else /* else(return code okay)*/
    /* ********** format and write audit report record ***********/
    KUZREC.KUZTYPE = "A"; /* assign type code value*/
    KUZREC.KUZBFCD = " "; /* assign "after" code*/
    KUZREC.XXXTBLNM = "VADDR001"; /* move tbl name to audit rec*/
    KUZREC.XXXUSER = XA0AW02.XXXUSER; /* move user id to audit rec*/
    KUZREC.KUCCOID = KULREC.KUCCOID; /* move co id to audit rec*/
    KUZREC.ZZZSDT = KULREC.ZZZSDT; /* move date to audit rec*/
    KUZREC.ZZHHMMSS = XX0XW01.XX0XWHMS; /* move time to audit rec*/
    KUZREC.KUZDATA = KULREC.KULGRP; /* move data to audit record*/
    ;
    if (KUZREC.XXXTBLNM in KIZTBL.XXXTBLNM)
      KUZREC.KUZSSEQ = KIZTBL.KUZSSEQ[sysVar.arrayIndex];
      KUZREC.KUZLEN = KIZTBL.KUZLEN[sysVar.arrayIndex];
    else
      KUZREC.KUZSSEQ = 0;
      KUZREC.KUZLEN = 0;
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1PGMNM = "XA0A   ";
      TA1REC.TA1LOCAT[1] = "XA0AS20  ";
      TA1REC.TA1LOCAT[2] = "KIZTBL   ";
      TA1REC.TA1LOCAT[3] = "VADDR001 ";
      TA1REC.TA1MAP = "        ";
      TA1REC.TA1DBASE = "DCUST.";
      TA1REC.TA1TBLVU = "VADDR001";
      TA1TBLKE = "TABLE NOT FOUND";
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    end
    ;
    call "IO0500" ("A ", SQLCA, KUZREC) {isNoRefresh = yes, isExternal = yes};
                                   /* call i/o mod to add*/
    if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
                                               /* ne -803)*/
      /* **********************  call error routine  *****************/
      TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
      TA1REC.TA1FUNC = "ABND"; /* move function to error record*/
      TA1REC.TA1PGMNM = "XA0AS20 "; /* move program name to error rec*/
      TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1MAP = "N/A     ";
                                   /* move map name to error record*/
      TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
      TA1REC.TA1TBLVU = "VCUAUD01"; /* move table view to error record*/
      set KUWREC empty; /* initialize error work rec*/
      /* ************* move keys to error work record  ***************/
      KUWREC.KUCCOID = KUZREC.KUCCOID;
      /* *************************************************************/
      TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                     /* ;     move table key value*/
      KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* call db backout*/
      SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                     /* ;*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
      /* *************************************************************/
      /* ***** the following commented until retro-fitting of   ******/
      /* ***** the return from the error routine                ******/
      /* *************************************************************/
      /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                      /* ;     move appl global data*/
      /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
      /* XSEXIT                          ;     transfer to next appl*/
      /* ******************  end of error routine  *******************/
    end /* end of "if" statement*/
  end /* end of "if" statement*/
  ;
  ;
  ;
  ;
  ;
end // end XA0AS20

// replace address
Function XA0AS30()
  ;
  ;
   /* *************************************************************/
   /* *****         r e p l a c e   a d d r e s s            ******/
   /* *************************************************************/
  ;
  ;
  XX0XS01(); /* get date and time*/
  XA0AW02.ZZZCHGDT = XX0XW01.XX0XWDAT; /* move curr dt to change dt*/
  XA0AW02.ZZZCHGTM = XX0XW01.XX0XWTIM;
                                   /* move curr time to chng time*/
  ;
  KULREC.KULGRP = XA0AW02.XA0AWGRP; /* group move of address*/
  call "IO0170" ("U ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod to update*/
  if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
    if (SQLCA.VAGen_SQLCODE == 100) /* if bad return code*/
      XA0AW02.XA0AWERR[1] = 13;
                                   /* error "addr not found"*/
    else /* else(error other*/
                                                /* than 100)*/
      /* **********************  call error routine  *****************/
      TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
      TA1REC.TA1FUNC = "ABND"; /* move function to error record*/
      TA1REC.TA1PGMNM = "XA0AS30 "; /* move program name to error rec*/
      TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1MAP = "N/A     ";
                                   /* move map name to error record*/
      TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
      TA1REC.TA1TBLVU = "VADDR001"; /* move table view to error record*/
      set KUWREC empty; /* initialize error work rec*/
      /* ************* move keys to error work record  ***************/
      KUWREC.KUCCOID = KULREC.KUCCOID;
      /* *************************************************************/
      TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                     /* ;     move table key value*/
      KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* call db backout*/
      SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                     /* ;*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
      /* *************************************************************/
      /* ***** the following commented until retro-fitting of   ******/
      /* ***** the return from the error routine                ******/
      /* *************************************************************/
      /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                      /* ;     move appl global data*/
      /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
      /* XSEXIT                          ;     transfer to next appl*/
      /* ******************  end of error routine  *******************/
    end /* end of "if" statement*/
  end /* end of "if" statement*/
  ;
  ;
  ;
  ;
  ;
end // end XA0AS30

// get address statement grp
Function XA0AS81()
  ;
  ;
   /* *************************************************************/
   /* *****         g e t    a d d r e s s   f r o m         ******/
   /* *****            a d d r e s s    t a b l e            ******/
   /* *************************************************************/
  ;
  ;
  KULREC.KUCCOID = XA0AW02.KUCCOID;
  KULREC.KULAAID = XA0AW02.KULAAID;
  call "IO0170" ("S ", SQLCA, KULREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod to select*/
  if (SQLCA.VAGen_SQLCODE != 0) /* if bad return code*/
    if (SQLCA.VAGen_SQLCODE == 100) /* if not found*/
      XA0AW02.XA0AWERR[1] = 14; /* ERROR "not found"*/
    else
                                   /* else(error other than 100)*/
      /* GET ERROR*/
      /* **********************  call error routine  *****************/
      TA1REC.TA1TYPE = "DB2 "; /* move error type to error record*/
      TA1REC.TA1FUNC = "ABND"; /* move function to error record*/
      TA1REC.TA1PGMNM = "XA0A080 "; /* move program name to error rec*/
      TA1REC.TA1LOCAT[1] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[2] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[3] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1LOCAT[4] = "        ";
                                   /* move error location to error rec*/
      TA1REC.TA1MAP = "N/A     ";
                                   /* move map name to error record*/
      TA1REC.TA1DBASE = "DCUST   "; /* move database name to error rec*/
      TA1REC.TA1TBLVU = "VADDR001"; /* move table view to error record*/
      set KUWREC empty; /* initialize error work rec*/
      /* ************* move keys to error work record  ***************/
      KUWREC.KUCCOID = KULREC.KUCCOID;
      /* *************************************************************/
      TA1REC.TA1TBLKE = KUWREC.KUWOKEY;
                                     /* ;     move table key value*/
      KUWREC.KUWSQLCA = SQLCA.SQLCAREC; /* move sqlca to save area*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* call db backout*/
      SQLCA.SQLCAREC = KUWREC.KUWSQLCA; /* restore sqlca to original*/
                                     /* ;*/
      call "TA0020" (TA1REC, SQLCA) {isExternal = yes}; /* call error routine*/
      /* *************************************************************/
      /* ***** the following commented until retro-fitting of   ******/
      /* ***** the return from the error routine                ******/
      /* *************************************************************/
      /* MoVE KA0DWORK.KA0DWGRP TO COMMAREA.CAUSERA;*/
                                      /* ;     move appl global data*/
      /* MOVE 'KU0M' TO COMMAREA.CATOAP  ;     cust main menu is dest*/
      /* XSEXIT                          ;     transfer to next appl*/
      /* ******************  end of error routine  *******************/
    end /* END OF "if" STATEMENT*/
  end /* end of "if" statement*/
  XA0AW02.XA0AWGRP = KULREC.KULGRP; /* group move of address*/
  ;
  ;
  ;
  ;
  ;
end // end XA0AS81

//*** RECORD=XA0AW01 ****
// this is the "working storage" record for application ku0e
// ***********************
Record XA0AW01 type basicRecord
  5 XA0AWCNM XA0AWCNM ; 
  5 XA0AWIDX XA0AWIDX ; 
  5 XA0AWFIL XA0AWFIL ; 
  5 XA0AWZIP XA0AWZIP ; 
    10 XA0AWDGT XA0AWDGT [10] ; 
end // end XA0AW01

DataItem XA0AWCNM char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// each digit in zip code
DataItem XA0AWDGT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// fill area from addr rec
DataItem XA0AWFIL char(294)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem XA0AWIDX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group zip code field
DataItem XA0AWZIP char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

