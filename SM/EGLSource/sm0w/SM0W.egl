package sm0w;
import corpcom1.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpz3.*;
import sm.common.*;
import ta.common.*;
import vv.common.*;
//*** PROGRAM=SM0W ****
// SM0W displays a list of rep position ids along with related
// data and allows authorized personnel to update the existing
// ids and/or add new rep position ids.
// 
// ************************************************************
// *                    MAINTENANCE HISTORY                   *
// ************************************************************
// 
// Log #    Date     Name   Description
// -----  --------  ------  -----------------------------------
// 
//   001  12/02/92  DLIDDL  Created application.
//        05/25/93  RCORON  modified to check individually for
//                          Change and/or Add authority and
//                          protect the necessary fields.
// *********************
Program SM0W type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SM00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  SM0WW01 SM0WW01; // record
  SM0WW02 SM0WW02; // record
  SM0WW03 SM0WW03; // record
  SM0WW04 SM0WW04; // record
  SM0WW05 SM0WW05; // record
  SMWREC SMWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VREPOS01 VREPOS01; // record
  VSMAUD01 VSMAUD01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use SM0WM.SM0WM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    SM0W-00000: SM0W-00000();
    SM0W-10000: SM0W-10000();
    /* ***********************************************************************/
    /* Flow to sm0W-10000 which will display the map.                       **/
    /* ***********************************************************************/

    goto SM0W-10000; /* converse the map*/

  end // end main
end // end SM0W

// Initial Processing
Function SM0W-00000()
  /* ***********************************************************************/
  /* *  MODULE: INITIAL PROCESSING                                        **/
  /* * PURPOSE: Check security, set segmented transaction id and do       **/
  /* *          application initialization.                               **/
  /* ***********************************************************************/

  XSENTRY(); /* check goal security*/

  XSSEGTR(); /* set segmented transaction id*/

  SM0WS-INITIALIZE(); /* initialize*/

end // end SM0W-00000

// Converse SM0W map
Function SM0W-10000()
  /* ***********************************************************************/
  /* *  MODULE: CONVERSE MAP                                              **/
  /* * PURPOSE: Converse the map. Determine if a valid key has been       **/
  /* *          pressed and process accordingly.                          **/
  /* ***********************************************************************/

  /* ***********************************************************************/
  /* * Move the current date to the map heading date.                     **/
  /* ***********************************************************************/

  SM0WM001.SM0WM-DATE = VGVar.currentShortGregorianDate;

  /* ***********************************************************************/
  /* * If we have no data to display, darken and protect the page literals**/
  /* ***********************************************************************/

  if (SM0WW01.SM0WW-HIGHEST-PAGE <= 0) /* no data*/
    set SM0WM001.SM0WM-PAGE-LITERAL invisible, protect;
    set SM0WM001.SM0WM-CURR-PAGE invisible, protect;
    set SM0WM001.SM0WM-OF-LITERAL invisible, protect;
    set SM0WM001.SM0WM-HIGH-PAGE invisible, protect;
  end

  converse SM0WM001 ;

  SM0WW01.SM0WW-SEQ-CNTR = 0; /* reset sequence counter*/
  SM0WM001.CAMSG = " "; /* program message area*/

  /* ***********************************************************************/
  /* * Move the actual map values to the current map header and detail    **/
  /* * records.                                                           **/
  /* ***********************************************************************/

  SM0WS-MVE-MAP-CURR();

  /* ***********************************************************************/
  /* * Reset the attributes of the page literals so that they can be seen.**/
  /* ***********************************************************************/

  set SM0WM001.SM0WM-PAGE-LITERAL initialAttributes;
  set SM0WM001.SM0WM-CURR-PAGE initialAttributes;
  set SM0WM001.SM0WM-OF-LITERAL initialAttributes;
  set SM0WM001.SM0WM-HIGH-PAGE initialAttributes;

  /* ***********************************************************************/
  /* * Reset the attributes of the fastpath fields.                       **/
  /* ***********************************************************************/

  set SM0WM001.CATOAP initialAttributes;
  set SM0WM001.CAITEM initialAttributes;

  if (converseVar.eventKey is enter) /* user pressed enter*/
    SM0WS-PROC-ENTER();
  else
    if (converseVar.eventKey is pa2) /* user pressed PA2*/
      SM0WS-PROC-PA2();
    else
      if (converseVar.eventKey is pf7
       || converseVar.eventKey is pf8) /* user presses PF7 or PF8*/
        SM0WS-PROC-PF-SCRL();
      else
        if (converseVar.eventKey is pf1 /* user presses a valid*/
         || converseVar.eventKey is pf3 /* PF key*/
         || converseVar.eventKey is pf4)
          SM0WS-PROC-PF-KEYS();
        else
          if (converseVar.eventKey is pf12 /* user pressed PF12 and change allowed*/
           && COMMAREA.CACHGFL == "Y")    
            SM0WS-PROC-ENTER();
          else
            converseLib.validationFailed(2); /* invalid key pressed*/
          end
        end
      end
    end
  end

end // end SM0W-10000

// Add a rep pstn row to db
Function SM0WS-ADD-PSTN-ROW()
  /* ***********************************************************************/
  /* *  MODULE: ADD REP POSITION ROW                                      **/
  /* * PURPOSE: Add a new rep position row to db.                         **/
  /* ***********************************************************************/

  VREPOS01.ZZZSDT = TA2REC.TA2GRGGN;

  call "IO0660" ("A ", SQLCA, VREPOS01) {isNoRefresh = yes, isExternal = yes}; /* add rep pstn id*/

  if (SQLCA.VAGen_SQLCODE != 0) /* error occurred*/

    set ERRSQLCA empty;
    move SQLCA to ERRSQLCA withV60Compat;
    TA1REC.TA1TYPE = "DB2"; /* db2 error*/
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DSLSMN"; /* database name*/
    TA1REC.TA1TBLVU = "VREPOS01"; /* table view name*/
    TA1REC.TA1LOCAT[3] = "ADD PSTN"; /* error location*/
    TA1REC.TA1LOCAT[4] = "IO0660"; /* io module*/

    try
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    end /* message formatter*/

    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* rollback changes*/

    XSPF4(); /* pass control to menu*/

    SM0WM001.CAMSG = COMMAREA.CAMSG; /* system error*/

  else /* no errors occurred*/

  /* ***********************************************************************/
  /* * Row was added successfully, so store change count value in         **/
  /* * corresponding current map detail line.                             **/
  /* ***********************************************************************/

    SM0WW04.ZZZCHGCT[SM0WW-SCREEN-INDEX] = VREPOS01.ZZZCHGCT;

  end

end // end SM0WS-ADD-PSTN-ROW

// Add WS page to temp storage
Function SM0WS-ADD-TMP-STRG()
  /* ***********************************************************************/
  /* *  MODULE: ADD TEMPORARY STORAGE PAGE                                **/
  /* * PURPOSE: Adds a working storage detail record to the temporary     **/
  /* *          storage area.                                             **/
  /* ***********************************************************************/

  set TA5REC empty; /* clear ts parms*/

  TA5REC.TA5APPID = SM0WW01.TA5APPID; /* application ID*/
  SM0WW04.SM0WW-TEMP-STRG-LENGTH = SM0WW01.SM0WW-TSQ-REC-LENGTH; /* temp storage length*/

  if (SM0WW01.SM0WW-HIGHEST-PAGE == 0) /* we have no pages formatted*/
    TA5REC.TA5FNCCD = "N"; /* function is new (purge & add)*/
  else /* we have pages formatted*/
    TA5REC.TA5FNCCD = "A"; /* function is add*/
  end

  try
    call "TA0050" (SM0WW04, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* temp storage routine*/

  if (sysVar.errorCode == "00000000" /* call was successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return*/
    SM0WW01.SM0WW-HIGHEST-PAGE = TA5REC.TA5TSQIX; /* page # added*/
    SM0WM001.SM0WM-HIGH-PAGE = SM0WW01.SM0WW-HIGHEST-PAGE; /* move to map*/
    SM0WW01.SM0WW-SCREEN-INDEX = 0; /* 1st line*/
    set SM0WW04 empty; /* initialise current dtl record*/
  else /* bad call or abnormal return*/

    set TAEREC empty; /* initialise record*/
    TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return code*/
    TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* subroutine parameters*/
    TA1REC.TA1TYPE = "APPL"; /* application error*/
    TA1REC.TA1FUNC = "RETN"; /* post*/
    TA1REC.TA1LOCAT[1] = "ADD TS  "; /* location*/
    TA1REC.TA1LOCAT[2] = "TA0050  "; /* subroutine*/

    try
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
    end /* message formatter*/

    XSPF4(); /* pass control to menu*/

    converseLib.validationFailed(72); /* system error message*/

  end

end // end SM0WS-ADD-TMP-STRG

// Add an 'after' audit row to db
Function SM0WS-AFTR-AUD-ROW()
  /* ***********************************************************************/
  /* *  MODULE: ADD AN 'AFTER' AUDIT ROW                                  **/
  /* * PURPOSE: Add an 'after' audit image to db.                         **/
  /* ***********************************************************************/

  VSMAUD01.SM-BFR-AFT-IND = "A"; /* 'after' snapshot*/
  VSMAUD01.SM-AUDIT-FILLER-TEXT = VREPOS01.VREPOS01-GROUP; /* 'after' image*/

  call "IO0480" ("A ", SQLCA, VSMAUD01) {isNoRefresh = yes, isExternal = yes}; /* add rep pstn id*/

  if (SQLCA.VAGen_SQLCODE != 0) /* error occurred*/

    set ERRSQLCA empty;
    move SQLCA to ERRSQLCA withV60Compat;
    TA1REC.TA1TYPE = "DB2"; /* db2 error*/
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DSLSMN"; /* database name*/
    TA1REC.TA1TBLVU = "VSMAUD01"; /* table view name*/
    TA1REC.TA1LOCAT[3] = "ADD AFTR AUDIT"; /* error location*/
    TA1REC.TA1LOCAT[4] = "IO0480"; /* io module*/

    try
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    end /* message formatter*/

    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* rollback changes*/

    XSPF4(); /* pass control to menu*/

    SM0WM001.CAMSG = COMMAREA.CAMSG; /* system error*/

  end

end // end SM0WS-AFTR-AUD-ROW

// Add a 'before' audit row to db
Function SM0WS-BFRE-AUD-ROW()
  /* ***********************************************************************/
  /* *  MODULE: ADD A 'BEFORE' AUDIT ROW                                 **/
  /* * PURPOSE: Add an 'before' audit image to db.                        **/
  /* ***********************************************************************/

  VSMAUD01.SM-BFR-AFT-IND = "B"; /* 'before' snapshot*/
  VSMAUD01.SM-AUDIT-FILLER-TEXT = VREPOS01.VREPOS01-GROUP; /* 'before' image*/

  call "IO0480" ("A ", SQLCA, VSMAUD01) {isNoRefresh = yes, isExternal = yes}; /* add rep pstn id*/

  if (SQLCA.VAGen_SQLCODE != 0) /* error occurred*/

    set ERRSQLCA empty;
    move SQLCA to ERRSQLCA withV60Compat;
    TA1REC.TA1TYPE = "DB2"; /* db2 error*/
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DSLSMN"; /* database name*/
    TA1REC.TA1TBLVU = "VSMAUD01"; /* table view name*/
    TA1REC.TA1LOCAT[3] = "ADD BFRE AUDIT"; /* error location*/
    TA1REC.TA1LOCAT[4] = "IO0480"; /* io module*/

    try
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    end /* message formatter*/

    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* rollback changes*/

    XSPF4(); /* pass control to menu*/

    SM0WM001.CAMSG = COMMAREA.CAMSG; /* system error*/

  end

end // end SM0WS-BFRE-AUD-ROW

// Build temporary storage pages
Function SM0WS-BUILD-DTL()
  /* ***********************************************************************/
  /* MODULE: BUILD DETAIL                                                **/
  /* PURPOSE: Load the rep position data into a temporary storage area.   **/
  /* The temporary storage area is used for scrolling.           **/
  /* ***********************************************************************/

  SM0WS-OPEN-REP-CSR(); /* open rep position cursor*/

  SM0WW01.SM0WW-SCREEN-INDEX = 0; /* screen detail line index*/
  SM0WW01.SM0WW-MORE-PSTN-FLG = "Y"; /* initialise more reps flag*/

  while (SM0WW01.SM0WW-MORE-PSTN-FLG == "Y" /* while more rep position rows*/
   && converseVar.validationMsgNum == 0) /* and no errors*/

    SM0WS-FTCH-REP-ROW(); /* fetch a rep position row*/

    if (SM0WW01.SM0WW-MORE-PSTN-FLG == "Y" /* fetch ok*/
     && converseVar.validationMsgNum == 0) /* and no errors*/

      SM0WW01.SM0WW-SCREEN-INDEX = SM0WW01.SM0WW-SCREEN-INDEX + 1; /* increment screen index*/

  /* ***********************************************************************/
  /* * Move the rep position data to the current map detail record.       **/
  /* ***********************************************************************/

      SM0WW04.SM-SREP-PSTN-ID[SM0WW-SCREEN-INDEX] = VREPOS01.SM-SREP-PSTN-ID;
      SM0WW04.SM-SREP-PSTN-ABRV[SM0WW-SCREEN-INDEX] = VREPOS01.SM-SREP-PSTN-ABRV;
      SM0WW04.SM-SREP-PSTN-DESC[SM0WW-SCREEN-INDEX] = VREPOS01.SM-SREP-PSTN-DESC;
      SM0WW04.SM-SREP-MGR-IND[SM0WW-SCREEN-INDEX] = VREPOS01.SM-SREP-MGR-IND;
      SM0WW04.XXX-STAT[SM0WW-SCREEN-INDEX] = VREPOS01.XXXSTAT;
      SM0WW04.ZZZCHGCT[SM0WW-SCREEN-INDEX] = VREPOS01.ZZZCHGCT;

      if (SM0WW01.SM0WW-SCREEN-INDEX
       == SM0WW01.SM0WW-MAX-PER-PAGE) /* full page of data*/
        SM0WS-ADD-TMP-STRG(); /* add page to temp storage*/
      end

    else
      if (SM0WW01.SM0WW-MORE-PSTN-FLG == "N") /* no more rep position rows*/
        SM0WS-CLSE-REP-CSR(); /* close rep position cursor*/

        if (converseVar.validationMsgNum == 0) /* no errors*/
          if (SM0WW01.SM0WW-SCREEN-INDEX > 0) /* partial page of data*/
            SM0WS-ADD-TMP-STRG(); /* add page to temp storage*/
          end

          if (converseVar.validationMsgNum == 0) /* no errors*/

  /* ***********************************************************************/
  /* * If we have no data and the user has update authority, add a blank  **/
  /* * page to temp storage, so that the user may add new rep pstn ids.   **/
  /* ***********************************************************************/

            if (SM0WW01.SM0WW-HIGHEST-PAGE <= 0) /* we have no data*/
              if (COMMAREA.CACHGFL == "Y") /* user has update authority*/
                SM0WS-ADD-TMP-STRG(); /* add page to temp storage*/
              end
            else /* we have data*/
              SM0WM001.SM0WM-HIGH-PAGE = SM0WW01.SM0WW-HIGHEST-PAGE; /* move highest page to map*/
            end
          end
        end
      end
    end
  end

end // end SM0WS-BUILD-DTL

// Close rep positon id cursor
Function SM0WS-CLSE-REP-CSR()
  /* ***********************************************************************/
  /* *  MODULE: CLOSE REP POSITION ID CURSOR                              **/
  /* * PURPOSE: Closes the sales rep position id cursor.                  **/
  /* ***********************************************************************/

  call "IO0660" ("C1", SQLCA, VREPOS01) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/

  if (SQLCA.VAGen_SQLCODE != 0) /* error occurred*/

    set ERRSQLCA empty;
    move SQLCA to ERRSQLCA withV60Compat;
    TA1REC.TA1TYPE = "DB2"; /* db2 error*/
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DSLSMN"; /* data base name*/
    TA1REC.TA1TBLVU = "VREPOS01"; /* table view name*/
    TA1REC.TA1LOCAT[3] = "CLOSE C1"; /* error location*/
    TA1REC.TA1LOCAT[4] = "IO0660"; /* i/o mod*/

    try
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    end /* message formatter*/

    XSPF4(); /* pass control to menu*/

    converseLib.validationFailed(72); /* system error message*/

  end

end // end SM0WS-CLSE-REP-CSR

// Edit the map detail
Function SM0WS-EDIT-DTL()
  /* ***********************************************************************/
  /* *  MODULE: EDIT THE MAP DETAIL                                       **/
  /* * PURPOSE: Edits the map detail fields for validity. Edits are done  **/
  /* *          from the bottom of the map upwards and from the right of  **/
  /* *          the map to the left, so the cursor edits on the top left  **/
  /* *          field.*/
  /* ***********************************************************************/

  SM0WW01.SM0WW-SCREEN-INDEX = SM0WW01.SM0WW-MAX-PER-PAGE; /* set screen index to last map line*/

  while (SM0WW01.SM0WW-SCREEN-INDEX >= 1) /* while more map lines*/

    if (SM0WW04.SM0WW-CURR-DTL-LINE[SM0WW-SCREEN-INDEX] != " ") /* data*/

      SM0WS-VAL-STATUS(); /* edit position id status flag*/
      SM0WS-VAL-MGR-IND(); /* edit position id mgr indicator*/
      SM0WS-VAL-DESCRPTN(); /* edit position id description*/
      SM0WS-VAL-ABBREVTN(); /* edit position id abbreviation*/
      SM0WS-VAL-PSTN-ID(); /* edit position id*/

    end

    SM0WW01.SM0WW-SCREEN-INDEX = SM0WW01.SM0WW-SCREEN-INDEX - 1; /* previous map line*/

  end

end // end SM0WS-EDIT-DTL

// Edit the requested page
Function SM0WS-EDIT-PAGE()
  /* ***********************************************************************/
  /* *  MODULE: EDIT PAGE                                                 **/
  /* * PURPOSE: Edit the current page number.                             **/
  /* *   EDITS: 1. Must be between the first and the last page.           **/
  /* ***********************************************************************/

  /* ***********************************************************************/
  /* *  If the current page number is greater than the highest page number**/
  /* *  highlight the current page number and display an error message.   **/
  /* ***********************************************************************/

  if (SM0WW01.SM0WW-REQUESTED-PAGE > SM0WW01.SM0WW-HIGHEST-PAGE)
    set SM0WM001.SM0WM-CURR-PAGE cursor, bold;
    converseLib.validationFailed(67); /* invalid page requested msg*/
  else

  /* ***********************************************************************/
  /* *  If the current page number is less than the first page number     **/
  /* *  highlight the current page number and display an error message.   **/
  /* ***********************************************************************/

    if (SM0WW01.SM0WW-REQUESTED-PAGE < 1)
      set SM0WM001.SM0WM-CURR-PAGE cursor, bold;
      converseLib.validationFailed(67); /* invalid page requested msg*/
    else /* page number is valid*/
      SM0WW03.SM0WW-PREV-PAGE-NO = SM0WW02.SM0WW-CURR-PAGE-NO;
    end
  end

end // end SM0WS-EDIT-PAGE

// Format the audit row
Function SM0WS-FMT-AUD-ROW()
  /* ***********************************************************************/
  /* *  MODULE: FORMAT THE AUDIT ROW                                      **/
  /* * PURPOSE: Move the required data to the database row.               **/
  /* ***********************************************************************/

  set VSMAUD01 empty; /* initialise record*/

  VSMAUD01.SM-SREP-ID = 0;
  VSMAUD01.SM-SAGCY-ID = " ";
  VSMAUD01.SM-AUDIT-SRT-SEQ = SM0WW01.SM0WW-SEQ-CNTR;
  VSMAUD01.XXX-TBL-NM = "VREPOS01";
  VSMAUD01.XXX-USER-ID = COMMAREA.CAUSERID;
  VSMAUD01.ZZ-SDT = TA2REC.TA2GRGGN;
  VSMAUD01.ZZ-SETUP-HHMMSS = TA2REC.TA2TIMEN;
  VSMAUD01.SM-AUDIT-FILLER-LEN = SM0WW01.SM0WW-VREPOS01-LENGTH;

end // end SM0WS-FMT-AUD-ROW

// Format map for INQUIRY only
Function SM0WS-FMT-INQRY()
  /* ***********************************************************************/
  /* *  MODULE: FORMAT MAP FOR INQUIRY                                    **/
  /* * PURPOSE: Formats the map for INQUIRY only by protecting all the map**/
  /* *          detail fields.                                            **/
  /* ***********************************************************************/

  SM0WW01.SM0WW-SCREEN-INDEX = 1; /* 1st map line*/

  while (SM0WW01.SM0WW-SCREEN-INDEX
   <= SM0WW01.SM0WW-MAX-PER-PAGE) /* while more map lines*/

    set SM0WM001.SM-SREP-PSTN-ID[SM0WW-SCREEN-INDEX] skip;
    set SM0WM001.SM-SREP-PSTN-ABRV[SM0WW-SCREEN-INDEX] skip;
    set SM0WM001.SM-SREP-PSTN-DESC[SM0WW-SCREEN-INDEX] skip;
    set SM0WM001.SM-SREP-MGR-IND[SM0WW-SCREEN-INDEX] skip;
    set SM0WM001.XXX-STAT[SM0WW-SCREEN-INDEX] skip;

    SM0WW01.SM0WW-SCREEN-INDEX = SM0WW01.SM0WW-SCREEN-INDEX + 1; /* next map line*/

  end

end // end SM0WS-FMT-INQRY

// Format map detail
Function SM0WS-FMT-MAP-DTL()
  /* ***********************************************************************/
  /* *  MODULE: FORMAT MAP DETAIL                                         **/
  /* * PURPOSE: Moves the current map detail record values to the actual  **/
  /* *          map detail.                                               **/
  /* ***********************************************************************/

  SM0WW01.SM0WW-SCREEN-INDEX = 1; /* 1st map line*/

  while (SM0WW01.SM0WW-SCREEN-INDEX
   <= SM0WW01.SM0WW-MAX-PER-PAGE) /* while more map lines*/

  /* ***********************************************************************/
  /* * Move the current map detail record values to the actual map detail.**/
  /* ***********************************************************************/

    SM0WM001.SM-SREP-PSTN-ID[SM0WW-SCREEN-INDEX] = SM0WW04.SM-SREP-PSTN-ID[SM0WW-SCREEN-INDEX];

    SM0WM001.SM-SREP-PSTN-ABRV[SM0WW-SCREEN-INDEX] = SM0WW04.SM-SREP-PSTN-ABRV[SM0WW-SCREEN-INDEX];

    SM0WM001.SM-SREP-PSTN-DESC[SM0WW-SCREEN-INDEX] = SM0WW04.SM-SREP-PSTN-DESC[SM0WW-SCREEN-INDEX];

    SM0WM001.SM-SREP-MGR-IND[SM0WW-SCREEN-INDEX] = SM0WW04.SM-SREP-MGR-IND[SM0WW-SCREEN-INDEX];

    SM0WM001.XXX-STAT[SM0WW-SCREEN-INDEX] = SM0WW04.XXX-STAT[SM0WW-SCREEN-INDEX];

    SM0WW01.SM0WW-SCREEN-INDEX = SM0WW01.SM0WW-SCREEN-INDEX + 1; /* next map line*/

  end

end // end SM0WS-FMT-MAP-DTL

// Format the rep pstn row
Function SM0WS-FMT-PSTN-ROW()
  /* ***********************************************************************/
  /* *  MODULE: FORMAT THE REP POSITION ROW                               **/
  /* * PURPOSE: Move the rep position data to the database row.           **/
  /* ***********************************************************************/

  VREPOS01.SM-SREP-PSTN-ID = SM0WW04.SM-SREP-PSTN-ID[SM0WW-SCREEN-INDEX];
  VREPOS01.SM-SREP-PSTN-ABRV = SM0WW04.SM-SREP-PSTN-ABRV[SM0WW-SCREEN-INDEX];
  VREPOS01.SM-SREP-PSTN-DESC = SM0WW04.SM-SREP-PSTN-DESC[SM0WW-SCREEN-INDEX];
  VREPOS01.SM-SREP-MGR-IND = SM0WW04.SM-SREP-MGR-IND[SM0WW-SCREEN-INDEX];
  VREPOS01.XXXSTAT = SM0WW04.XXX-STAT[SM0WW-SCREEN-INDEX];
  VREPOS01.ZZZCHGDT = TA2REC.TA2GRGGN;
  VREPOS01.ZZZCHGTM = TA2REC.TA2TIMHM;

end // end SM0WS-FMT-PSTN-ROW

// Format map for UPDATE
Function SM0WS-FMT-UPDTE()
  /* ***********************************************************************/
  /* *  MODULE: FORMAT MAP FOR UPDATE                                     **/
  /* * PURPOSE: Formats the map to allow for UPDATE or ADD Rep position.  **/
  /* *          This routine is performed only if the CA update or the    **/
  /* *          Add flags are set to 'Y'.                                 **/
  /* ***********************************************************************/

  SM0WW01.SM0WW-SCREEN-INDEX = SM0WW01.SM0WW-MAX-PER-PAGE; /* start from the last line on map*/

  while (SM0WW01.SM0WW-SCREEN-INDEX
   >= 1) /* until detail line 1*/

  /* ***********************************************************************/
  /* * Existing position id cannot be changed -- therefore, protect it    **/
  /* * if not blanks regardless of authority level.                       **/
  /* ***********************************************************************/

    if (SM0WW05.SM-SREP-PSTN-ID[SM0WW-SCREEN-INDEX] == " ") /* blank line*/
      if (COMMAREA.CAADDFL == "Y") /* can add*/
        set SM0WM001.SM-SREP-PSTN-ID[SM0WW-SCREEN-INDEX] initialAttributes;
        set SM0WM001.SM-SREP-PSTN-ID[SM0WW-SCREEN-INDEX] cursor;
        set SM0WM001.SM-SREP-PSTN-ABRV[SM0WW-SCREEN-INDEX] initialAttributes;
        set SM0WM001.SM-SREP-PSTN-DESC[SM0WW-SCREEN-INDEX] initialAttributes;
        set SM0WM001.SM-SREP-MGR-IND[SM0WW-SCREEN-INDEX] initialAttributes;
        set SM0WM001.XXX-STAT[SM0WW-SCREEN-INDEX] initialAttributes;
      else /* cannot add*/
        set SM0WM001.SM-SREP-PSTN-ID[SM0WW-SCREEN-INDEX] skip;
        set SM0WM001.SM-SREP-PSTN-ABRV[SM0WW-SCREEN-INDEX] skip;
        set SM0WM001.SM-SREP-PSTN-DESC[SM0WW-SCREEN-INDEX] skip;
        set SM0WM001.SM-SREP-MGR-IND[SM0WW-SCREEN-INDEX] skip;
        set SM0WM001.XXX-STAT[SM0WW-SCREEN-INDEX] skip;
      end
    else /* not originally a blank detail line*/
      if (COMMAREA.CACHGFL == "Y") /* can change details*/
        set SM0WM001.SM-SREP-PSTN-ID[SM0WW-SCREEN-INDEX] skip;
        set SM0WM001.SM-SREP-PSTN-ABRV[SM0WW-SCREEN-INDEX] initialAttributes;
        set SM0WM001.SM-SREP-PSTN-ABRV[SM0WW-SCREEN-INDEX] cursor;
        set SM0WM001.SM-SREP-PSTN-DESC[SM0WW-SCREEN-INDEX] initialAttributes;
        set SM0WM001.SM-SREP-MGR-IND[SM0WW-SCREEN-INDEX] initialAttributes;
        set SM0WM001.XXX-STAT[SM0WW-SCREEN-INDEX] initialAttributes;
      else /* cannot chg*/
        set SM0WM001.SM-SREP-PSTN-ID[SM0WW-SCREEN-INDEX] skip;
        set SM0WM001.SM-SREP-PSTN-ABRV[SM0WW-SCREEN-INDEX] skip;
        set SM0WM001.SM-SREP-PSTN-DESC[SM0WW-SCREEN-INDEX] skip;
        set SM0WM001.SM-SREP-MGR-IND[SM0WW-SCREEN-INDEX] skip;
        set SM0WM001.XXX-STAT[SM0WW-SCREEN-INDEX] skip;
      end
    end

    SM0WW01.SM0WW-SCREEN-INDEX = SM0WW01.SM0WW-SCREEN-INDEX - 1; /* prev map line*/

  end

end // end SM0WS-FMT-UPDTE

// Fetch rep position id row
Function SM0WS-FTCH-REP-ROW()
  /* ***********************************************************************/
  /* *  MODULE: FETCH A REP POSITION ID ROW                               **/
  /* * PURPOSE: Fetches a rep position id row.                            **/
  /* ***********************************************************************/

  set VREPOS01 empty; /* initialise record*/

  call "IO0660" ("N1", SQLCA, VREPOS01) {isNoRefresh = yes, isExternal = yes}; /* fetch rep pstn dtls*/

  if (SQLCA.VAGen_SQLCODE == 100) /* no more rep position rows*/
    SM0WW01.SM0WW-MORE-PSTN-FLG = "N"; /* set flag to indicate this*/
  else

    if (SQLCA.VAGen_SQLCODE != 0) /* error occurred*/
      set ERRSQLCA empty;
      move SQLCA to ERRSQLCA withV60Compat;
      TA1REC.TA1TYPE = "DB2"; /* db2 error*/
      TA1REC.TA1FUNC = "RETN"; /* post*/
      TA1REC.TA1DBASE = "DSLSMN"; /* database name*/
      TA1REC.TA1TBLVU = "VREPOS01"; /* table view name*/
      TA1REC.TA1LOCAT[3] = "SELCT N1"; /* error location*/
      TA1REC.TA1LOCAT[4] = "IO0660"; /* io module*/

      try
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      end /* message formatter*/

      XSPF4(); /* pass control to menu*/

      converseLib.validationFailed(72); /* system error occurred*/

    end
  end

end // end SM0WS-FTCH-REP-ROW

// Get formatted date & time
Function SM0WS-GET-DATE()
  /* ***********************************************************************/
  /* *  MODULE: GET DATE                                                  **/
  /* * PURPOSE: Get the formatted current date and time.                  **/
  /* ***********************************************************************/

  set TA2REC empty; /* initialise record*/

  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD != 0) /* error occurred*/
    TA1REC.TA1TYPE = "APPL"; /* db2 error*/
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "TA0040"; /* error location*/

    try
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    end /* message formatter*/

    XSPF4(); /* pass control to menu*/

    converseLib.validationFailed(72); /* system error msg*/

  else /* no errors*/

    VREPOS01.ZZZCHGDT = TA2REC.TA2GRGGN;
    VREPOS01.ZZZCHGTM = TA2REC.TA2TIMHM;

  end

end // end SM0WS-GET-DATE

// Get rep position id
Function SM0WS-GET-REP-PSTN()
  /* ***********************************************************************/
  /* *  MODULE: GET REP POSITION ID                                       **/
  /* * PURPOSE: Selects a unique rep position id from database.           **/
  /* ***********************************************************************/

  set VREPOS01 empty; /* initialise record*/

  VREPOS01.SM-SREP-PSTN-ID = SM0WW04.SM-SREP-PSTN-ID[SM0WW-SCREEN-INDEX]; /* set up key*/

  call "IO0660" ("S ", SQLCA, VREPOS01) {isNoRefresh = yes, isExternal = yes}; /* get rep pstn id*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
  /* next sentence*/
  else

    set ERRSQLCA empty;
    move SQLCA to ERRSQLCA withV60Compat;
    TA1REC.TA1TYPE = "DB2"; /* db2 error*/
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1DBASE = "DSLSMN"; /* database name*/
    TA1REC.TA1TBLVU = "VREPOS01"; /* table view name*/
    TA1REC.TA1LOCAT[3] = "GET PSTN"; /* error location*/
    TA1REC.TA1LOCAT[4] = "IO0660"; /* io module*/

    try
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    end /* message formatter*/

    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* rollback changes*/

    XSPF4(); /* pass control to menu*/

    SM0WM001.CAMSG = COMMAREA.CAMSG; /* system error*/

  end

end // end SM0WS-GET-REP-PSTN

// Initialise screen fields
Function SM0WS-INIT-SCRN()
  /* ***********************************************************************/
  /* *  MODULE: INITIALISE SCREEN                                         **/
  /* * PURPOSE: Initliase screen variables and records.                   **/
  /* ***********************************************************************/

  set SM0WW02 empty; /* current map hdr record*/
  set SM0WW03 empty; /* previous map hdr record*/
  set SM0WW04 empty; /* current map dtl record*/
  set SM0WW05 empty; /* previous map dtl record*/

  SM0WW01.SM0WW-HIGHEST-PAGE = 0; /* initialise highest page*/

end // end SM0WS-INIT-SCRN

// Initialize
Function SM0WS-INITIALIZE()
  /* ***********************************************************************/
  /* *  MODULE: INITIALIZE                                                **/
  /* * PURPOSE: Performs all application initialization, builds the       **/
  /* *          temporary storage area and loads the 1st page to the map. **/
  /* ***********************************************************************/

  set SMWREC empty; /* subsystem record*/

  set SM0WM001 initial; /* clear map*/

  SM0WW01.SM0WW-MAX-PER-PAGE = 14; /* 14 detail lines per page*/
  SM0WW01.SM0WW-TSQ-REC-LENGTH = 644; /* detail page length*/
  SM0WW01.SM0WW-VREPOS01-LENGTH = 56; /* vrepos01 rec length*/
  SM0WW01.TA5APPID = "SM0W"; /* application name*/

  sysVar.errorCode = "00000000";
  converseVar.commitOnConverse = 1; /* commit on every converse*/

  if (COMMAREA.CAFRMSYS == "SM") /* from same system*/
    SMWREC.SMW-SUBSYSTEM-RECORD = COMMAREA.CAUSERA;
  end

  SM0WS-LOAD-DATA(); /* loads map data*/

end // end SM0WS-INITIALIZE

// Load map data
Function SM0WS-LOAD-DATA()
  /* ***********************************************************************/
  /* *  MODULE: LOAD MAP DATA                                             **/
  /* * PURPOSE: Builds the temporary storage work area and loads the 1st  **/
  /* *          page to the map.                                          **/
  /* ***********************************************************************/

  SM0WS-INIT-SCRN(); /* initialise screen fields*/

  SM0WS-BUILD-DTL(); /* build temp storage*/

  if (converseVar.validationMsgNum == 0) /* no errors*/

  /* ***********************************************************************/
  /* * If we are in INQUIRY mode and we have no data, display an          **/
  /* * appropriate message and protect the screen. If we are in INQUIRY   **/
  /* * mode and we have data, load the first page to the map.             **/
  /* ***********************************************************************/

    if (COMMAREA.CACHGFL == "N") /* inquiry only*/
      if (SM0WW01.SM0WW-HIGHEST-PAGE <= 0) /* no data*/
        converseLib.validationFailed(70); /* no data to display msg*/
        SM0WS-RESET-ATTR(); /* reset screen attributes*/
      else /* data*/
        SM0WW01.SM0WW-REQUESTED-PAGE = 1;
        SM0WS-LOAD-DTL(); /* load 1st page to map*/
      end
    else /* update allowed*/

  /* ***********************************************************************/
  /* * If we are in UPDATE mode, load the first page to the map. If we    **/
  /* * have no data the first page will be blank, so display an          **/
  /* * appropriate message BUT allow the user to enter new rep pstn ids. **/
  /* ***********************************************************************/

      SM0WW01.SM0WW-REQUESTED-PAGE = 1;
      SM0WS-LOAD-DTL(); /* load 1st page to map*/
      if (SM0WW04.SM-SREP-PSTN-ID[1] == " ")
        converseLib.validationFailed(70); /* no data to display msg*/
      end
    end
  end

end // end SM0WS-LOAD-DATA

// Load manager and status desc
Function SM0WS-LOAD-DESC()
  /* ***********************************************************************/
  /* *  MODULE: LOAD MANAGER AND STATUS DESCRIPTIONS                      **/
  /* * PURPOSE: Loads the manager and status descriptions to the map      **/
  /* *          depending on the corresponding values in the manager and  **/
  /* *          status indicator fields.                                  **/
  /* ***********************************************************************/

  SM0WW01.SM0WW-SCREEN-INDEX = 1; /* 1st map line*/

  while (SM0WW01.SM0WW-SCREEN-INDEX
   <= SM0WW01.SM0WW-MAX-PER-PAGE) /* while more map lines*/

    if (SM0WW04.SM-SREP-MGR-IND[SM0WW-SCREEN-INDEX] == "Y")
      SM0WM001.SM0WM-MGR-IND-DESC[SM0WW-SCREEN-INDEX] = "MANAGER";
    else
      SM0WM001.SM0WM-MGR-IND-DESC[SM0WW-SCREEN-INDEX] = " ";
    end

    if (SM0WW04.XXX-STAT[SM0WW-SCREEN-INDEX] == "A")
      SM0WM001.SM0WM-XXX-STAT-DESC[SM0WW-SCREEN-INDEX] = "ACTIVE";
    else
      if (SM0WW04.XXX-STAT[SM0WW-SCREEN-INDEX] == "I")
        SM0WM001.SM0WM-XXX-STAT-DESC[SM0WW-SCREEN-INDEX] = "INACTIVE";
      else
        SM0WM001.SM0WM-XXX-STAT-DESC[SM0WW-SCREEN-INDEX] = " ";
      end
    end

    SM0WW01.SM0WW-SCREEN-INDEX = SM0WW01.SM0WW-SCREEN-INDEX + 1; /* next map line*/

  end

end // end SM0WS-LOAD-DESC

// Load temp storage to map dtl
Function SM0WS-LOAD-DTL()
  /* ***********************************************************************/
  /* *  MODULE: LOAD DETAIL                                               **/
  /* * PURPOSE: Read requested page from temporary storage area and move  **/
  /* *          values to map and working storage areas.                  **/
  /* ***********************************************************************/

  TA5REC.TA5TSQIX = SM0WW01.SM0WW-REQUESTED-PAGE;

  SM0WS-RD-TMP-STRG(); /* read page from temp storage*/

  if (converseVar.validationMsgNum == 0) /* no errors*/

  /* ***********************************************************************/
  /* * Actual map data, previous and current map records should all match.**/
  /* ***********************************************************************/

    SM0WM001.SM0WM-CURR-PAGE = TA5REC.TA5TSQIX; /* actual map current page*/
    SM0WW02.SM0WW-CURR-PAGE-NO = TA5REC.TA5TSQIX; /* current map hdr record page*/
    SM0WW03.SM0WW-PREV-PAGE-NO = TA5REC.TA5TSQIX; /* previous map hdr record page*/

    SM0WS-FMT-MAP-DTL(); /* move current map dtl record*/
                                     /* to actual map*/
    SM0WW05.SM0WW-PREV-DTL-REC = SM0WW04.SM0WW-CURR-DTL-REC; /* move current map dtl record*/
                                     /* to previous map dtl record*/

    SM0WS-RESET-ATTR(); /* reset map attributes*/

  end

end // end SM0WS-LOAD-DTL

// Move current dtl to prev dtl
Function SM0WS-MVE-CUR-PREV()
  /* ***********************************************************************/
  /* *  MODULE: MOVE CURRENT MAP DETAIL TO PREVIOUS MAP DETAIL            **/
  /* * PURPOSE: Moves the current map detail record to the previous map   **/
  /* *          detail record, removing embedded blank lines as we        **/
  /* *          encounter them.                                           **/
  /* ***********************************************************************/

  SM0WW01.SM0WW-SCREEN-INDEX = 1; /* set curr dtl index to 1st map line*/
  SM0WW01.SM0WW-MAP-INDEX = 1; /* set prev dtl index to 1st map line*/

  while (SM0WW01.SM0WW-SCREEN-INDEX <= 
  SM0WW01.SM0WW-MAX-PER-PAGE) /* while more map lines*/

    if (SM0WW04.SM-SREP-PSTN-ID[SM0WW-SCREEN-INDEX] != " ") /* data*/

      SM0WW05.SM0WW-PREV-DTL-LINE[SM0WW-MAP-INDEX] = SM0WW04.SM0WW-CURR-DTL-LINE[SM0WW-SCREEN-INDEX]; /* curr to prev*/

      SM0WW01.SM0WW-MAP-INDEX = SM0WW01.SM0WW-MAP-INDEX + 1; /* next prev dtl map line*/
    end

    SM0WW01.SM0WW-SCREEN-INDEX = SM0WW01.SM0WW-SCREEN-INDEX + 1; /* next curr dtl map line*/

  end

  /* ************************************************************************/
  /* When all blank lines have been removed, reformat the map and the     **/
  /* current map detail record based on the previous map detail record.   **/
  /* ***********************************************************************/

  SM0WW04.SM0WW-CURR-DTL-REC = SM0WW05.SM0WW-PREV-DTL-REC; /* move prev map dtl to curr map dtl*/

  SM0WS-FMT-MAP-DTL(); /* move curr map dtl rec to actual map*/

end // end SM0WS-MVE-CUR-PREV

// Move map to current records
Function SM0WS-MVE-MAP-CURR()
  /* ***********************************************************************/
  /* *  MODULE: MOVE MAP TO CURRENT RECORDS                               **/
  /* * PURPOSE: Moves the actual map values to the current map header and **/
  /* *          detail records.*/
  /* ***********************************************************************/

  /* ***********************************************************************/
  /* * Move the actual map header values to the current map header record.**/
  /* ***********************************************************************/

  SM0WW02.SM0WW-CURR-PAGE-NO = SM0WM001.SM0WM-CURR-PAGE;

  /* ***********************************************************************/
  /* * Move the actual map detail values to the current map detail record.**/
  /* ***********************************************************************/

  SM0WW01.SM0WW-SCREEN-INDEX = 1; /* 1st map line*/

  while (SM0WW01.SM0WW-SCREEN-INDEX
   <= SM0WW01.SM0WW-MAX-PER-PAGE) /* while more map lines*/

    SM0WW04.SM-SREP-PSTN-ID[SM0WW-SCREEN-INDEX] = SM0WM001.SM-SREP-PSTN-ID[SM0WW-SCREEN-INDEX];

    SM0WW04.SM-SREP-PSTN-ABRV[SM0WW-SCREEN-INDEX] = SM0WM001.SM-SREP-PSTN-ABRV[SM0WW-SCREEN-INDEX];

    SM0WW04.SM-SREP-PSTN-DESC[SM0WW-SCREEN-INDEX] = SM0WM001.SM-SREP-PSTN-DESC[SM0WW-SCREEN-INDEX];

    SM0WW04.SM-SREP-MGR-IND[SM0WW-SCREEN-INDEX] = SM0WM001.SM-SREP-MGR-IND[SM0WW-SCREEN-INDEX];

    SM0WW04.XXX-STAT[SM0WW-SCREEN-INDEX] = SM0WM001.XXX-STAT[SM0WW-SCREEN-INDEX];

    SM0WW01.SM0WW-SCREEN-INDEX = SM0WW01.SM0WW-SCREEN-INDEX + 1; /* next map line*/

  end

end // end SM0WS-MVE-MAP-CURR

// New page processing
Function SM0WS-NEW-PAGE()
  /* ***********************************************************************/
  /* *  MODULE: NEW PAGE PROCESSING                                       **/
  /* * PURPOSE: Edit the new page number and if valid, load the requested **/
  /* *          page to the map.                                          **/
  /* ***********************************************************************/

  SM0WW01.SM0WW-REQUESTED-PAGE = SM0WW02.SM0WW-CURR-PAGE-NO;

  SM0WS-EDIT-PAGE(); /* check to see if new page is valid*/

  if (converseVar.validationMsgNum == 0) /* no errors*/
    SM0WS-LOAD-DTL(); /* load requested page to map detail*/
  end
end // end SM0WS-NEW-PAGE

// Open rep position id cursor
Function SM0WS-OPEN-REP-CSR()
  /* ***********************************************************************/
  /* *  MODULE: OPEN REP POSITION ID CURSOR                               **/
  /* * PURPOSE: Opens the rep position id cursor.                         **/
  /* ***********************************************************************/

  set VREPOS01 empty; /* initialise record*/

  call "IO0660" ("S1", SQLCA, VREPOS01) {isNoRefresh = yes, isExternal = yes}; /* open rep position csr*/

  if (SQLCA.VAGen_SQLCODE != 0) /* error occurred*/

    set ERRSQLCA empty;
    move SQLCA to ERRSQLCA withV60Compat;
    TA1REC.TA1TYPE = "DB2"; /* db2 error*/
    TA1REC.TA1FUNC = "RETN"; /* post*/
    TA1REC.TA1DBASE = "DSLSMN"; /* database name*/
    TA1REC.TA1TBLVU = "VREPOS01"; /* table view name*/
    TA1REC.TA1LOCAT[3] = "OPEN S1"; /* error location*/
    TA1REC.TA1LOCAT[4] = "IO0660"; /* io module*/

    try
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    end /* message formatter*/

    XSPF4(); /* pass control to menu*/

    converseLib.validationFailed(72); /* system error message*/

  end

end // end SM0WS-OPEN-REP-CSR

// Purge temp storage queue
Function SM0WS-PRG-TMP-STRG()
  /* ***********************************************************************/
  /* *  MODULE: PURGE TEMP STORAGE QUEUE                                  **/
  /* * PURPOSE: Purge the temporary storage queue.                        **/
  /* ***********************************************************************/

  set TA5REC empty; /* clear ts parms*/

  TA5REC.TA5FNCCD = "P"; /* purge queue*/
  TA5REC.TA5APPID = SM0WW01.TA5APPID; /* application ID*/

  try
    call "TA0050" (SM0WW04, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* temp storage*/

  if (sysVar.errorCode == "00000000" /* call was successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return*/
  else /* an error occurred*/

    set TAEREC empty;
    TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return code*/
    TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* subroutine parameters*/
    TA1REC.TA1TYPE = "APPL"; /* application error*/
    TA1REC.TA1FUNC = "RETN"; /* post, no abend*/
    TA1REC.TA1LOCAT[1] = "PURGE TS"; /* location*/
    TA1REC.TA1LOCAT[2] = "TA0050  "; /* subroutine*/

    try
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
    end /* message formatter*/

    XSPF4(); /* pass control to menu*/

    converseLib.validationFailed(72); /* system error*/

  end

end // end SM0WS-PRG-TMP-STRG

// Process the enter key
Function SM0WS-PROC-ENTER()
  /* ***********************************************************************/
  /* *  MODULE: PROCESS ENTER                                             **/
  /* * PURPOSE: Process the enter key.                                    **/
  /* ***********************************************************************/

  if (SM0WM001.CATOAP == " ") /* fastpath application and parms blank*/
    if (SM0WM001.CAITEM == " ")
    /* next sentence*/
    else
      SM0WM001.CAITEM = " "; /* parms entered without application*/
    end
  else
    SM0WS-PROC-FPATH(); /* process fpath*/
    if (converseVar.validationMsgNum != 0
     || SM0WM001.CAMSG != " ") /* error occurred*/
      return;
    end
  end

  /* ***********************************************************************/
  /* * If the map detail has changed and the current page number has also **/
  /* * been changed, ignore the change to the current page number by      **/
  /* * reloading the previous page number back to the map.               **/
  /* ***********************************************************************/

  if (SM0WW04.SM0WW-CURR-DTL-REC != 
  SM0WW05.SM0WW-PREV-DTL-REC) /* map dtl has change*/

    if (SM0WW02.SM0WW-CURR-PAGE-NO != 
    SM0WW03.SM0WW-PREV-PAGE-NO) /* current page has changed*/

      SM0WW02.SM0WW-CURR-PAGE-NO = SM0WW03.SM0WW-PREV-PAGE-NO;
      SM0WM001.SM0WM-CURR-PAGE = SM0WW03.SM0WW-PREV-PAGE-NO;
    end

    SM0WS-RESET-ATTR(); /* reset map attributes*/

  /* ***********************************************************************/
  /* * Only the map detail has changed so edit the changes. If all of the **/
  /* * changes are validated correctly, update the database.              **/
  /* ***********************************************************************/

    SM0WS-EDIT-DTL(); /* edit the map dtl*/
    if (converseVar.validationMsgNum == 0 /* no edit errors*/
     && SM0WM001.CAMSG == " ")            /* no xfer errors*/
      if (converseVar.eventKey is pf12) /* edit only (pf12 was pressed)*/
        converseLib.validationFailed(13); /* press again to accept change*/
      else /* enter was pressed*/
        SM0WS-PROCESS-DTL(); /* process the map dtl*/
        if (converseVar.validationMsgNum == 0
         && SM0WM001.CAMSG == " ") /* no errors*/
          converseLib.validationFailed(74); /* update successful msg*/
        end
      end
    end

  else /* map dtl the same*/

  /* ***********************************************************************/
  /* * Only the current page number has changed, so process the new page. **/
  /* ***********************************************************************/

    if (SM0WW02.SM0WW-CURR-PAGE-NO
     != SM0WW03.SM0WW-PREV-PAGE-NO) /* only the current page has changed*/
      SM0WS-NEW-PAGE(); /* process page change*/
    else /* no changes made*/

      SM0WS-RESET-ATTR(); /* reset map attributes*/

      converseLib.validationFailed(12); /* no changes entered message*/
    end

  end

end // end SM0WS-PROC-ENTER

// Process fast path
Function SM0WS-PROC-FPATH()
  /* ***********************************************************************/
  /* *  MODULE: PROCESS FASTPATH                                          **/
  /* * PURPOSE: Process the entered fastpath.                             **/
  /* ***********************************************************************/

  /* ***********************************************************************/
  /* * If the page number has changed and/or the map detail has changed,  **/
  /* * issue a message informing the user that they cannot fastpath with  **/
  /* * changes.                                                           **/
  /* ***********************************************************************/

  if (SM0WW02.SM0WW-CURR-HDR-INPUT-FLDS 
   != SM0WW03.SM0WW-PREV-HDR-INPUT-FLDS /* header change*/
   || SM0WW04.SM0WW-CURR-DTL-REC        
   != SM0WW05.SM0WW-PREV-DTL-REC)       /* detail change*/

    set SM0WM001.CATOAP cursor, bold;
    set SM0WM001.CAITEM bold;
    converseLib.validationFailed(69); /* fpath with changes msg*/

  else

    SM0WS-PRG-TMP-STRG(); /* purge temp storage queue*/
    if (converseVar.validationMsgNum != 0) /* error during purge*/
      return;
    end

    COMMAREA.CATOAP = SM0WM001.CATOAP; /* move to commarea*/
    COMMAREA.CAITEM = SM0WM001.CAITEM;
    COMMAREA.CAUSERA = " "; /* clear user area*/

    if (COMMAREA.CATOSYS == COMMAREA.CACURSYS) /* transfer in SM system*/
      COMMAREA.CAUSERA = SMWREC.SMW-SUBSYSTEM-RECORD;
    end

    XSEXIT(); /* transfer control*/

  /* ***********************************************************************/
  /* * Transfer failed so reload map data and indicate an error occurred. **/
  /* ***********************************************************************/

    SM0WS-LOAD-DATA(); /* reload map data*/
    set SM0WM001.CATOAP cursor, bold;
    set SM0WM001.CAITEM bold;

    SM0WM001.CAMSG = COMMAREA.CAMSG; /* transfer failed msg*/

  end

end // end SM0WS-PROC-FPATH

// Process PA2
Function SM0WS-PROC-PA2()
  /* ***********************************************************************/
  /* *  MODULE: PROCESS PA2                                               **/
  /* * PURPOSE: Cancels all updates and reloads the map from the database.**/
  /* ***********************************************************************/

  set SM0WM001 initial;
  SM0WS-LOAD-DATA(); /* load map data*/

end // end SM0WS-PROC-PA2

// Process PF keys
Function SM0WS-PROC-PF-KEYS()
  /* ***********************************************************************/
  /* *  MODULE: PROCESS PF KEYS                                           **/
  /* * PURPOSE: Process the PF1, PF3 and PF4 keys.                        **/
  /* ***********************************************************************/

  /* ***********************************************************************/
  /* * Check for PF key and data change.                                  **/
  /* ***********************************************************************/

  if (SM0WW02.SM0WW-CURR-HDR-INPUT-FLDS 
   != SM0WW03.SM0WW-PREV-HDR-INPUT-FLDS /* map header changed*/
   || SM0WW04.SM0WW-CURR-DTL-REC        
   != SM0WW05.SM0WW-PREV-DTL-REC)       /* map detail changed*/
    converseLib.validationFailed(68); /* cannot PF key with changes msg*/
  else /* no change in map header or detail*/

  /* ***********************************************************************/
  /* * Check for PF key and fastpath entry.                               **/
  /* ***********************************************************************/

    if (SM0WM001.CATOAP != " " /* fastpath application populated*/
     || SM0WM001.CAITEM != " ") /* fastpath item populated*/
      set SM0WM001.CATOAP cursor, bold;
      set SM0WM001.CAITEM bold;
      converseLib.validationFailed(4); /* cannot PF key with fast path msg*/
    end
  end

  /* ***********************************************************************/
  /* * Purge temporary storage queue before transferring.                 **/
  /* ***********************************************************************/

  if (converseVar.validationMsgNum == 0) /* no errors*/
    SM0WS-PRG-TMP-STRG(); /* purge temporary storage*/
    if (converseVar.validationMsgNum != 0) /* error in purging temp storage*/
      return;
    end

  /* ***********************************************************************/
  /* * Transfer to help system.                                           **/
  /* ***********************************************************************/

    if (converseVar.eventKey is pf1) /* help requested*/
      COMMAREA.CAUSERA = " ";
      XSPF1(); /* transfer to help system*/
      SM0WM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* error occurred*/
    end

  /* ***********************************************************************/
  /* * Transfer to GOAL menu.                                             **/
  /* ***********************************************************************/

    if (converseVar.eventKey is pf3)
      COMMAREA.CATOAP = "SM0H";
      COMMAREA.CAITEM = " ";
      COMMAREA.CAUSERA = " ";
      COMMAREA.CAUSERA = SMWREC.SMW-SUBSYSTEM-RECORD;
      XSEXIT(); /* pass control*/
      SM0WM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* error occurred*/
    end

  /* ***********************************************************************/
  /* * Transfer to master menu.                                           **/
  /* ***********************************************************************/

    if (converseVar.eventKey is pf4)
      COMMAREA.CAITEM = " ";
      COMMAREA.CAUSERA = " ";
      XSPF4(); /* pass control*/
      SM0WM001.VAGen_EZEMSG = COMMAREA.CAMSG; /* error occurred*/
    end
  end

end // end SM0WS-PROC-PF-KEYS

// Process scroll
Function SM0WS-PROC-PF-SCRL()
  /* ***********************************************************************/
  /* *  MODULE: PROCESS SCROLL                                            **/
  /* * PURPOSE: Process PF7 (scroll backwards) or PF8 (scroll forwards).  **/
  /* ***********************************************************************/

  /* ***********************************************************************/
  /* * If the current page number has been changed or the map detail has  **/
  /* * changed, issue a message informing the user that they cannot PF key**/
  /* * with changes.                                                      **/
  /* ***********************************************************************/

  if (SM0WW02.SM0WW-CURR-HDR-INPUT-FLDS 
   != SM0WW03.SM0WW-PREV-HDR-INPUT-FLDS /* page change*/
   || SM0WW04.SM0WW-CURR-DTL-REC        
   != SM0WW05.SM0WW-PREV-DTL-REC)       /* detail change*/
    converseLib.validationFailed(68); /* cannot pf key with changes msg*/
  else /* page and detail unchanged*/

  /* ***********************************************************************/
  /* * If the fastpath fields are not blank, issue a message informing the**/
  /* * user that they cannot PF key and fastpath at the same time.        **/
  /* ***********************************************************************/

    if (SM0WM001.CATOAP != " "
     || SM0WM001.CAITEM != " ") /* fpath not blank*/
      converseLib.validationFailed(4); /* cannot pf key with fast path msg*/
    end
  end

  if (converseVar.validationMsgNum == 0) /* no errors*/

    if (converseVar.eventKey is pf7) /* scroll backwards requested*/
      if (SM0WW02.SM0WW-CURR-PAGE-NO <= 1) /* no previous pages*/
        converseLib.validationFailed(3); /* cannot page up msg*/
      else
        SM0WW01.SM0WW-REQUESTED-PAGE = SM0WW02.SM0WW-CURR-PAGE-NO - 1; /* request load of previous page*/
      end
    end

    if (converseVar.eventKey is pf8) /* scroll forwards requested*/

  /* ***********************************************************************/
  /* * If we are currently looking at the last full detail page, PF8 has  **/
  /* * been pressed and the user has update authority, add an empty page  **/
  /* * to temp storage and display a blank map. This enables the user to  **/
  /* * add rep position ids on a new page if the previous page is full.   **/
  /* ***********************************************************************/

      if (SM0WW02.SM0WW-CURR-PAGE-NO ==                      
      SM0WW01.SM0WW-HIGHEST-PAGE                             /* last page*/
       && SM0WW04.SM-SREP-PSTN-ID[SM0WW-MAX-PER-PAGE] != " " /* full pg*/
       && COMMAREA.CAADDFL == "Y")                           /* add authority*/
        set SM0WW04 empty; /* initialise current map dtl rec*/
        SM0WS-ADD-TMP-STRG(); /* add a blank page to temp strg*/
        SM0WW01.SM0WW-REQUESTED-PAGE = SM0WW01.SM0WW-HIGHEST-PAGE; /* request load of blank page*/
      else /* normal scroll forwards*/
        if (SM0WW02.SM0WW-CURR-PAGE-NO >= 
        SM0WW01.SM0WW-HIGHEST-PAGE) /* last page*/
          converseLib.validationFailed(7); /* cannot page down msg*/
        else /* not last page*/
          SM0WW01.SM0WW-REQUESTED-PAGE = SM0WW02.SM0WW-CURR-PAGE-NO + 1; /* request load of next page*/
        end
      end
    end

    if (converseVar.validationMsgNum == 0) /* no errors*/
      SM0WS-LOAD-DTL(); /* load requested page to map dtl*/
    end

  end

end // end SM0WS-PROC-PF-SCRL

// Process the map detail
Function SM0WS-PROCESS-DTL()
  /* ***********************************************************************/
  /* *  MODULE: PROCESS DETAIL                                            **/
  /* * PURPOSE: When all edits are successful, the db is updated with the **/
  /* *          new and/or modified rep position ids.                     **/
  /* ***********************************************************************/

  /* ***********************************************************************/
  /* * First, get the current system date and time that will be used when **/
  /* * we add or update rep position rows.                                **/
  /* ***********************************************************************/

  SM0WS-GET-DATE(); /* get date and time*/

  SM0WW01.SM0WW-SCREEN-INDEX = 1; /* 1st map line*/

  /* ***********************************************************************/
  /* * For each map line, check to see if we need to do an update or an   **/
  /* * add and process accordingly.                                       **/
  /* ***********************************************************************/

  while (SM0WW01.SM0WW-SCREEN-INDEX <= 
  SM0WW01.SM0WW-MAX-PER-PAGE /* more map lines*/
   && converseVar.validationMsgNum == 0) /* and no errors*/

  /* ***********************************************************************/
  /* * Only process the line if it has changed.                           **/
  /* ***********************************************************************/

    if (SM0WW04.SM0WW-CURR-DTL-LINE[SM0WW-SCREEN-INDEX] != 
    SM0WW05.SM0WW-PREV-DTL-LINE[SM0WW-SCREEN-INDEX])

  /* ***********************************************************************/
  /* * A change in rep position id means we are ADDING a new rep position **/
  /* * id.....                                                            **/
  /* ***********************************************************************/

      if (SM0WW04.SM-SREP-PSTN-ID[SM0WW-SCREEN-INDEX] != 
      SM0WW05.SM-SREP-PSTN-ID[SM0WW-SCREEN-INDEX])
        SM0WS-FMT-PSTN-ROW(); /* format the rep pstn row*/
        SM0WS-ADD-PSTN-ROW(); /* add the rep pstn row*/
        SM0WS-FMT-AUD-ROW(); /* format the audit row*/
        VSMAUD01.SM-AUDIT-TYP-CD = "A"; /* update is an add*/
        SM0WS-AFTR-AUD-ROW(); /* add an audit 'after' image*/
      else /* data other than rep pstn*/
                                              /* id has changed*/

  /* ***********************************************************************/
  /* * else we must be updating an existing rep position id.              **/
  /* ***********************************************************************/

        SM0WS-GET-REP-PSTN(); /* get rep pstn 'before' image*/

  /* ***********************************************************************/
  /* * An sqlcode of 100 indicates the 'before' image has been deleted ie **/
  /* * the row we are trying to update no longer exists.                  **/
  /* * If the change count of the 'before' image doesn't match the change **/
  /* * count that was stored when we originally loaded the rep position   **/
  /* * data, the rep position must have already been updated. In either   **/
  /* * case, hilight the row and display an appropriate error message.    **/
  /* ***********************************************************************/

        if (SQLCA.VAGen_SQLCODE == 100 /* 'before' image has been deleted*/
         || SM0WW05.ZZZCHGCT[SM0WW-SCREEN-INDEX] != 
        VREPOS01.ZZZCHGCT)             /* change counts are different*/
          converseLib.validationFailed(73); /* data already updated msg*/
          set SM0WM001.SM-SREP-PSTN-ID[SM0WW-SCREEN-INDEX] bold, protect;
        else
          SM0WW01.SM0WW-SEQ-CNTR = SM0WW01.SM0WW-SEQ-CNTR + 1;
          SM0WS-FMT-AUD-ROW(); /* format the audit row*/
          VSMAUD01.SM-AUDIT-TYP-CD = "C"; /* update is a change*/
          SM0WS-BFRE-AUD-ROW(); /* add an audit 'before' image*/
          SM0WS-FMT-PSTN-ROW(); /* format the rep pstn row*/
          SM0WS-UPD-PSTN-ROW(); /* update the rep pstn row*/
          SM0WS-FMT-AUD-ROW(); /* format the audit row*/
          VSMAUD01.SM-AUDIT-TYP-CD = "C"; /* update is a change*/
          SM0WS-AFTR-AUD-ROW(); /* add an audit 'after' image*/
        end
      end
    end
    SM0WW01.SM0WW-SCREEN-INDEX = SM0WW01.SM0WW-SCREEN-INDEX + 1; /* next map line*/
  end

  if (converseVar.validationMsgNum != 0
   || SM0WM001.CAMSG != " ") /* errors occurred*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* rollback changes*/
  else /* no errors*/
    SM0WS-MVE-CUR-PREV(); /* move current dtl to prev dtl*/
    SM0WS-RESET-ATTR(); /* reset attributes*/
    SM0WS-UPD-TMP-STRG(); /* update temp storage page*/
  end
end // end SM0WS-PROCESS-DTL

// Read temp storage page
Function SM0WS-RD-TMP-STRG()
  /* ***********************************************************************/
  /* *  MODULE: READ TEMPORARY STORAGE PAGE                               **/
  /* * PURPOSE: Reads a page from the temporary storage area.             **/
  /* ***********************************************************************/

  TA5REC.TA5FNCCD = "R"; /* read temp storage*/
  TA5REC.TA5APPID = SM0WW01.TA5APPID; /* application ID*/
  SM0WW04.SM0WW-TEMP-STRG-LENGTH = SM0WW01.SM0WW-TSQ-REC-LENGTH; /* temp storage length*/

  try
    call "TA0050" (SM0WW04, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* temp storage routine*/

  if (sysVar.errorCode == "00000000" /* call was successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return*/
  /* next sentence*/
  else /* an error occurred*/

    set TAEREC empty;
    TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return code*/
    TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* subroutine parameters*/
    TA1REC.TA1TYPE = "APPL"; /* application error*/
    TA1REC.TA1FUNC = "RETN"; /* post*/
    TA1REC.TA1LOCAT[1] = "READ TS "; /* location*/
    TA1REC.TA1LOCAT[2] = "TA0050  "; /* subroutine*/

    try
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
    end /* message formatter*/

    XSPF4(); /* pass control to menu*/

    converseLib.validationFailed(72); /* system error message*/

  end

end // end SM0WS-RD-TMP-STRG

// Reset the map attributes
Function SM0WS-RESET-ATTR()
  /* ***********************************************************************/
  /* *  MODULE: RESET MAP ATTRIBUTES                                      **/
  /* * PURPOSE: Reset the map attributes. Format the map fields for       **/
  /* *          INQUIRY mode (protected) or UPDATE mode (defined),        **/
  /* *          depending on the users authority. This will also reset any**/
  /* *          map fields that have been highlighted to indicate an edit **/
  /* *          error. Also position the cursor to the 1st updateable map **/
  /* *          field and load the manager and status descriptions.       **/
  /* ***********************************************************************/

  set SM0WM001.SM0WM-CURR-PAGE cursor; /* cursor on curr-pg field*/

  if (COMMAREA.CACHGFL == "N" /* inquiry only*/
   && COMMAREA.CAADDFL == "N")
    SM0WS-FMT-INQRY();
    set SM0WM001.SM0WM-PF12-LIT invisible, skip; /* PF12 not allowed*/
  else /* updates/adds allowed*/
    SM0WS-FMT-UPDTE();
    set SM0WM001.SM0WM-PF12-LIT initialAttributes; /* PF12 allowed*/
  end


  SM0WS-LOAD-DESC(); /* load manager and status descriptions*/

end // end SM0WS-RESET-ATTR

// Update an existing rep pstn
Function SM0WS-UPD-PSTN-ROW()
  /* ***********************************************************************/
  /* *  MODULE: UPDATE REP POSITION ROW                                   **/
  /* * PURPOSE: Updates an existing rep position row.                     **/
  /* ***********************************************************************/

  call "IO0660" ("U ", SQLCA, VREPOS01) {isNoRefresh = yes, isExternal = yes}; /* update rep pstn id*/

  if (SQLCA.VAGen_SQLCODE != 0) /* error occurred*/
    if (SQLCA.VAGen_SQLCODE == 100) /* row doesnt exist*/
      converseLib.validationFailed(73); /* data already updated by another user*/
                                   /* msg*/
      set SM0WM001.SM-SREP-PSTN-ID[SM0WW-SCREEN-INDEX] bold, protect;
    else

      set ERRSQLCA empty;
      move SQLCA to ERRSQLCA withV60Compat;
      TA1REC.TA1TYPE = "DB2"; /* db2 error*/
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1DBASE = "DSLSMN"; /* database name*/
      TA1REC.TA1TBLVU = "VREPOS01"; /* table view name*/
      TA1REC.TA1LOCAT[3] = "UPD PSTN"; /* error location*/
      TA1REC.TA1LOCAT[4] = "IO0660"; /* io module*/

      try
        call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
      end /* message formatter*/

      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* rollback changes*/

      XSPF4(); /* pass control to menu*/

      SM0WM001.CAMSG = COMMAREA.CAMSG; /* system error*/

    end
  else /* no errors*/

  /* ***********************************************************************/
  /* * Row was updated successfully so store new change count value in    **/
  /* * corresponding current map detail line.                             **/
  /* ***********************************************************************/

    SM0WW04.ZZZCHGCT[SM0WW-SCREEN-INDEX] = VREPOS01.ZZZCHGCT;

  end

end // end SM0WS-UPD-PSTN-ROW

// Update temp storage page
Function SM0WS-UPD-TMP-STRG()
  /* ***********************************************************************/
  /* *  MODULE: UPDATE TEMP STORAGE PAGE                                  **/
  /* * PURPOSE: Updates the current temporary storage page.               **/
  /* ***********************************************************************/

  set TA5REC empty; /* clear ts parms*/

  TA5REC.TA5TSQIX = SM0WW02.SM0WW-CURR-PAGE-NO; /* page no*/
  TA5REC.TA5APPID = SM0WW01.TA5APPID; /* application ID*/
  SM0WW04.SM0WW-TEMP-STRG-LENGTH = SM0WW01.SM0WW-TSQ-REC-LENGTH; /* temp storage length*/

  TA5REC.TA5FNCCD = "U"; /* function is update*/

  try
    call "TA0050" (SM0WW04, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* temp storage routine*/

  if (sysVar.errorCode == "00000000" /* call was successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return*/
    /* ok*/
  else /* bad call or abnormal return*/

    set TAEREC empty; /* initialise record*/
    TAEREC.TAEDESC1 = sysVar.errorCode; /* csp return code*/
    TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* subroutine parameters*/
    TA1REC.TA1TYPE = "APPL"; /* application error*/
    TA1REC.TA1FUNC = "RETN"; /* post*/
    TA1REC.TA1LOCAT[1] = "UPD TS  "; /* location*/
    TA1REC.TA1LOCAT[2] = "TA0050  "; /* subroutine*/

    try
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
    end /* message formatter*/

    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
     /* rollback changes*/

    XSPF4(); /* pass control to menu*/

    SM0WM001.CAMSG = COMMAREA.CAMSG; /* system error message*/

  end

end // end SM0WS-UPD-TMP-STRG

// Validate rep pstn id abbrevtn
Function SM0WS-VAL-ABBREVTN()
  /* ***********************************************************************/
  /* *  MODULE: VALIDATE REP POSITION ID ABBREVIATION                     **/
  /* * PURPOSE: Edits the current rep position id abbreviation for        **/
  /* *          validity.                                                 **/
  /* *   EDITS: 1. Must not be blank if corresponding rep position id is  **/
  /* *             populated.                                             **/
  /* *          2. Must be blank if corresponding rep position id is blank**/
  /* ***********************************************************************/

  /* ***********************************************************************/
  /* * Only edit the abbreviation if we have a rep position id to add or  **/
  /* * update.                                                            **/
  /* ***********************************************************************/

  if (SM0WW04.SM-SREP-PSTN-ID[SM0WW-SCREEN-INDEX] != " ")

  /* ***********************************************************************/
  /* * A blank abbreviation is invalid.                                   **/
  /* ***********************************************************************/

    if (SM0WW04.SM-SREP-PSTN-ABRV[SM0WW-SCREEN-INDEX] == " ")
      set SM0WM001.SM-SREP-PSTN-ABRV[SM0WW-SCREEN-INDEX] cursor, bold;
      converseLib.validationFailed(65); /* cannot be blanks msg*/
    end

  else /* rep position id is blank*/

  /* ***********************************************************************/
  /* * Rep position id is blank - position abbreviation must be blank.    **/
  /* ***********************************************************************/

    if (SM0WW04.SM-SREP-PSTN-ABRV[SM0WW-SCREEN-INDEX] != " ")
      set SM0WM001.SM-SREP-PSTN-ABRV[SM0WW-SCREEN-INDEX] cursor, bold;
      converseLib.validationFailed(64); /* must be blank msg*/
    end
  end

end // end SM0WS-VAL-ABBREVTN

// Validate rep pstn id descrptn
Function SM0WS-VAL-DESCRPTN()
  /* ***********************************************************************/
  /* *  MODULE: VALIDATE REP POSITION ID DESCRIPTION                      **/
  /* * PURPOSE: Edits the current rep position id description for validity**/
  /* *   EDITS: 1. Must not be blank if corresponding rep position id is  **/
  /* *             populated.                                             **/
  /* *          2. Must be blank if corresponding rep position id is blank**/
  /* ***********************************************************************/

  /* ***********************************************************************/
  /* * Only edit the description if we have a rep position id to add or   **/
  /* * update.                                                            **/
  /* ***********************************************************************/

  if (SM0WW04.SM-SREP-PSTN-ID[SM0WW-SCREEN-INDEX] != " ")

  /* ***********************************************************************/
  /* * A blank description is invalid.                                    **/
  /* ***********************************************************************/

    if (SM0WW04.SM-SREP-PSTN-DESC[SM0WW-SCREEN-INDEX] == " ")
      set SM0WM001.SM-SREP-PSTN-DESC[SM0WW-SCREEN-INDEX] cursor, bold;
      converseLib.validationFailed(65); /* cannot be blanks msg*/
    end

  else /* rep position id is blank*/

  /* ***********************************************************************/
  /* * Rep position id is blank - position description must be blank.     **/
  /* ***********************************************************************/

    if (SM0WW04.SM-SREP-PSTN-DESC[SM0WW-SCREEN-INDEX] != " ")
      set SM0WM001.SM-SREP-PSTN-DESC[SM0WW-SCREEN-INDEX] cursor, bold;
      converseLib.validationFailed(64); /* must be blank msg*/
    end
  end

end // end SM0WS-VAL-DESCRPTN

// Validate rep pstn id mgr ind
Function SM0WS-VAL-MGR-IND()
  /* ***********************************************************************/
  /* *  MODULE: VALIDATE REP POSITION ID MANAGER INDICATOR                **/
  /* * PURPOSE: Edits the current rep position manager indicator for      **/
  /* *          validity. Moves the correct manager indicator description **/
  /* *          to the corresponding map field.                           **/
  /* *   EDITS: 1. Must be 'Y' or 'N' if the corresponding rep position id**/
  /* *             is populated.                                          **/
  /* *          2. Default to 'N' if left blank.                          **/
  /* *          3. Must be blank if corresponding rep position id is      **/
  /* *             blank.                                                 **/
  /* ***********************************************************************/

  /* ***********************************************************************/
  /* * Only edit the indicator if we have a rep position id to add or     **/
  /* * update.                                                            **/
  /* ***********************************************************************/

  if (SM0WW04.SM-SREP-PSTN-ID[SM0WW-SCREEN-INDEX] != " ")

  /* ***********************************************************************/
  /* * If the manager indicator is blank, default it to 'N'.              **/
  /* ***********************************************************************/

    if (SM0WW04.SM-SREP-MGR-IND[SM0WW-SCREEN-INDEX] == " ")
      SM0WM001.SM-SREP-MGR-IND[SM0WW-SCREEN-INDEX] = "N";
      SM0WW04.SM-SREP-MGR-IND[SM0WW-SCREEN-INDEX] = "N";
    else

  /* ***********************************************************************/
  /* * If the manager indicator is not 'Y' or 'N' we have an error.       **/
  /* ***********************************************************************/

      if (SM0WW04.SM-SREP-MGR-IND[SM0WW-SCREEN-INDEX] != "Y"
       && SM0WW04.SM-SREP-MGR-IND[SM0WW-SCREEN-INDEX] != "N")
        set SM0WM001.SM-SREP-MGR-IND[SM0WW-SCREEN-INDEX] cursor, bold;
        converseLib.validationFailed(66); /* must be 'Y' or 'N' msg*/
      end
    end
  else /* rep position id is blank*/

  /* ***********************************************************************/
  /* * Rep position id is blank - manager indicator must be blank.        **/
  /* ***********************************************************************/

    if (SM0WW04.SM-SREP-MGR-IND[SM0WW-SCREEN-INDEX] != " ")
      set SM0WM001.SM-SREP-MGR-IND[SM0WW-SCREEN-INDEX] cursor, bold;
      converseLib.validationFailed(64); /* must be blank msg*/
      SM0WM001.SM0WM-MGR-IND-DESC[SM0WW-SCREEN-INDEX] = " ";
    end
  end

end // end SM0WS-VAL-MGR-IND

// Validate rep pstn id
Function SM0WS-VAL-PSTN-ID()
  /* ***********************************************************************/
  /* *  MODULE: VALIDATE REP POSITION ID                                  **/
  /* * PURPOSE: Edits the current rep position id for                     **/
  /* *          validity.                                                 **/
  /* *   EDITS: 1. Rep position id must be unique.                        **/
  /* ***********************************************************************/

  /* ***********************************************************************/
  /* * Only edit the status if we have a rep position id to add or update.**/
  /* ***********************************************************************/

  if (SM0WW04.SM-SREP-PSTN-ID[SM0WW-SCREEN-INDEX] != " ")

  /* ***********************************************************************/
  /* * If the previous map detail rep position id is empty, we are trying **/
  /* * to add a new rep position id, so check for a duplicate.            **/
  /* ***********************************************************************/

    if (SM0WW05.SM-SREP-PSTN-ID[SM0WW-SCREEN-INDEX] == " ")

      SM0WW01.SM0WW-MAP-INDEX = 1;


  /* ***********************************************************************/
  /* * Edit all the map lines for a duplicate rep position id, (except    **/
  /* * the current one).                                                  **/
  /* ***********************************************************************/

      while (SM0WW01.SM0WW-MAP-INDEX <= SM0WW01.SM0WW-MAX-PER-PAGE)

        if (SM0WW01.SM0WW-MAP-INDEX == SM0WW01.SM0WW-SCREEN-INDEX)
  /* dont check the current line for a duplicate !*/
        else

  /* ***********************************************************************/
  /* * Check the next map line for a duplicate rep position id.           **/
  /* ***********************************************************************/

          if (SM0WW04.SM-SREP-PSTN-ID[SM0WW-MAP-INDEX] == 
          SM0WW04.SM-SREP-PSTN-ID[SM0WW-SCREEN-INDEX]) /* duplicate*/

            set SM0WM001.SM-SREP-PSTN-ID[SM0WW-SCREEN-INDEX] cursor, bold;
            converseLib.validationFailed(61); /* dup pstn id msg*/
            SM0WW01.SM0WW-MAP-INDEX = SM0WW01.SM0WW-MAX-PER-PAGE; /* force end while*/

          end
        end

        SM0WW01.SM0WW-MAP-INDEX = SM0WW01.SM0WW-MAP-INDEX + 1; /* next line*/
      end

  /* ***********************************************************************/
  /* * Check the database for a duplicate rep position id, if none found  **/
  /* * on map.                                                            **/
  /* ***********************************************************************/

      if (SM0WW01.SM0WW-MAP-INDEX == 99)
  /* duplicate found on map - no need to check db*/
      else
        SM0WS-GET-REP-PSTN(); /* check db for a duplicate*/

        if (SQLCA.VAGen_SQLCODE == 0) /* duplicate found*/
          set SM0WM001.SM-SREP-PSTN-ID[SM0WW-SCREEN-INDEX] cursor, bold;
          converseLib.validationFailed(61); /* dup pstn id msg*/
        end

      end
    end
  end

end // end SM0WS-VAL-PSTN-ID

// Validate rep pstn id status
Function SM0WS-VAL-STATUS()
  /* ***********************************************************************/
  /* *  MODULE: VALIDATE REP POSITION ID STATUS FLAG                      **/
  /* * PURPOSE: Edits the current rep position id status flag for         **/
  /* *          validity. Moves the correct status description to the     **/
  /* *          corresponding map field.                                  **/
  /* *   EDITS: 1. Must be 'A' or 'I' if the corresponding rep position id**/
  /* *             is populated.                                          **/
  /* *          2. Must be 'A' if the rep position id is being added.     **/
  /* *          3. Must be blank if the corresponding rep position id is  **/
  /* *             blank.                                                 **/
  /* ***********************************************************************/

  /* ***********************************************************************/
  /* * Only edit the status if we have a rep position id to add or update.**/
  /* ***********************************************************************/

  if (SM0WW04.SM-SREP-PSTN-ID[SM0WW-SCREEN-INDEX] != " ")

  /* ***********************************************************************/
  /* * If the previous map detail rep position id is empty, we are trying **/
  /* * to add a new rep position id.                                      **/
  /* ***********************************************************************/

    if (SM0WW05.SM-SREP-PSTN-ID[SM0WW-SCREEN-INDEX] == " ")

  /* ***********************************************************************/
  /* * And if we are adding a new rep position id, the status must be 'A'.**/
  /* ***********************************************************************/

      if (SM0WW04.XXX-STAT[SM0WW-SCREEN-INDEX] != "A")
        set SM0WM001.XXX-STAT[SM0WW-SCREEN-INDEX] cursor, bold;
        converseLib.validationFailed(63); /* status must be active msg*/
      end
    else /* updating an existing rep position id*/

  /* ***********************************************************************/
  /* * Status must be 'A' or 'I'.                                         **/
  /* ***********************************************************************/

      if (SM0WW04.XXX-STAT[SM0WW-SCREEN-INDEX] != "A"
       && SM0WW04.XXX-STAT[SM0WW-SCREEN-INDEX] != "I")
        set SM0WM001.XXX-STAT[SM0WW-SCREEN-INDEX] cursor, bold;
        converseLib.validationFailed(62); /* status must be 'I' or 'A' msg*/
      end
    end
  else /* rep pstn id is blank*/

  /* ***********************************************************************/
  /* * Rep position id is blank - the status must be blank.               **/
  /* ***********************************************************************/

    if (SM0WW04.XXX-STAT[SM0WW-SCREEN-INDEX] != " ")
      set SM0WM001.XXX-STAT[SM0WW-SCREEN-INDEX] cursor, bold;
      converseLib.validationFailed(64); /* must be blank msg*/
    end
  end

end // end SM0WS-VAL-STATUS

//*** RECORD=SM0WW01 ****
// Working storage record for application SM0W.
// 
// ************************************************************
// *                  Mainenance History                      *
// ************************************************************
// 
// Log #    Date      Name    Description
// _____  ________  ________  _________________________________
//  001   12/02/92  DLIDDL    Created record.
// 
// ***********************
Record SM0WW01 type basicRecord
  10 SM0WW-MAX-PER-PAGE SM0WW-MAX-PER-PAGE ; 
  10 SM0WW-HIGHEST-PAGE SM0WW-HIGHEST-PAGE ; 
  10 SM0WW-REQUESTED-PAGE SM0WW-REQUESTED-PAGE ; 
  10 SM0WW-SCREEN-INDEX SM0WW-SCREEN-INDEX ; 
  10 SM0WW-MAP-INDEX SM0WW-MAP-INDEX ; 
  10 TA5APPID TA5APPID ; 
  10 SM0WW-TSQ-REC-LENGTH SM0WW-TSQ-REC-LENGTH ; 
  10 SM0WW-VREPOS01-LENGTH SM0WW-VREPOS01-LENGTH ; 
  10 SM0WW-SEQ-CNTR SM0WW-SEQ-CNTR ; 
  10 SM0WW-MORE-PSTN-FLG SM0WW-MORE-PSTN-FLG ; 
end // end SM0WW01

//*** RECORD=SM0WW02 ****
// Current map header record.
// 
// ************************************************************
// *                  Mainenance History                      *
// ************************************************************
// 
// Log #    Date      Name    Description
// _____  ________  ________  _________________________________
//  001   12/02/92  DLIDDL    Created record.
// 
// ***********************
Record SM0WW02 type basicRecord
  5 SM0WW-CURR-HDR-REC SM0WW-CURR-HDR-REC ; 
    10 SM0WW-CURR-HDR-INPUT-FLDS SM0WW-CURR-HDR-INPUT-FLDS ; 
      15 SM0WW-CURR-PAGE-NO SM0WW-CURR-PAGE-NO ; 
end // end SM0WW02

//*** RECORD=SM0WW03 ****
// Previous map header record.
// 
// ************************************************************
// *                  Mainenance History                      *
// ************************************************************
// 
// Log #    Date      Name    Description
// _____  ________  ________  _________________________________
//  001   12/02/92  DLIDDL    Created record.
// 
// ***********************
Record SM0WW03 type basicRecord
  5 SM0WW-PREV-HDR-REC SM0WW-PREV-HDR-REC ; 
    10 SM0WW-PREV-HDR-INPUT-FLDS SM0WW-PREV-HDR-INPUT-FLDS ; 
      15 SM0WW-PREV-PAGE-NO SM0WW-PREV-PAGE-NO ; 
end // end SM0WW03

//*** RECORD=SM0WW04 ****
// Current map detail record.
// 
// ************************************************************
// *                  Mainenance History                      *
// ************************************************************
// 
// Log #    Date      Name    Description
// _____  ________  ________  _________________________________
//  001   12/02/92  DLIDDL    Created record.
// 
// ***********************
Record SM0WW04 type basicRecord
  5 SM0WW-TEMP-STRG-LENGTH SM0WW-TEMP-STRG-LENGTH ; 
  5 SM0WW-CURR-DTL-REC SM0WW-CURR-DTL-REC ; 
    10 SM0WW-CURR-DTL-LINE SM0WW-CURR-DTL-LINE [14] ; 
      15 SM-SREP-PSTN-ID SM-SREP-PSTN-ID ; 
      15 SM-SREP-PSTN-ABRV SM-SREP-PSTN-ABRV ; 
      15 SM-SREP-PSTN-DESC SM-SREP-PSTN-DESC ; 
      15 SM-SREP-MGR-IND SM-SREP-MGR-IND ; 
      15 XXX-STAT XXX-STAT ; 
      15 ZZZCHGCT ZZZCHGCT ; 
end // end SM0WW04

//*** RECORD=SM0WW05 ****
// Current map detail record.
// 
// ************************************************************
// *                  Mainenance History                      *
// ************************************************************
// 
// Log #    Date      Name    Description
// _____  ________  ________  _________________________________
//  001   12/02/92  DLIDDL    Created record.
// 
// ***********************
Record SM0WW05 type basicRecord
  5 SM0WW-TEMP-STRG-LENGTH SM0WW-TEMP-STRG-LENGTH ; 
  5 SM0WW-PREV-DTL-REC SM0WW-PREV-DTL-REC ; 
    10 SM0WW-PREV-DTL-LINE SM0WW-PREV-DTL-LINE [14] ; 
      15 SM-SREP-PSTN-ID SM-SREP-PSTN-ID ; 
      15 SM-SREP-PSTN-ABRV SM-SREP-PSTN-ABRV ; 
      15 SM-SREP-PSTN-DESC SM-SREP-PSTN-DESC ; 
      15 SM-SREP-MGR-IND SM-SREP-MGR-IND ; 
      15 XXX-STAT XXX-STAT ; 
      15 ZZZCHGCT ZZZCHGCT ; 
end // end SM0WW05

// current map detail line
DataItem SM0WW-CURR-DTL-LINE char(46)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current map detail record
DataItem SM0WW-CURR-DTL-REC char(644)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current map hdr input flds
DataItem SM0WW-CURR-HDR-INPUT-FLDS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// curremt map hdr record
DataItem SM0WW-CURR-HDR-REC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current map hdr page number
DataItem SM0WW-CURR-PAGE-NO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// highest page number
DataItem SM0WW-HIGHEST-PAGE num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen index
DataItem SM0WW-MAP-INDEX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max lines per page
DataItem SM0WW-MAX-PER-PAGE num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SM0WW-MORE-PSTN-FLG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// previous map detail line
DataItem SM0WW-PREV-DTL-LINE char(46)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// previous map detail record
DataItem SM0WW-PREV-DTL-REC char(644)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// previous map hdr input flds
DataItem SM0WW-PREV-HDR-INPUT-FLDS char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// previous map hdr record
DataItem SM0WW-PREV-HDR-REC char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// previous map hdr page number
DataItem SM0WW-PREV-PAGE-NO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// requested page number
DataItem SM0WW-REQUESTED-PAGE num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen index
DataItem SM0WW-SCREEN-INDEX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SM0WW-SEQ-CNTR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage record length
DataItem SM0WW-TEMP-STRG-LENGTH num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage rec length
DataItem SM0WW-TSQ-REC-LENGTH num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temp storage rec length
DataItem SM0WW-VREPOS01-LENGTH num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

