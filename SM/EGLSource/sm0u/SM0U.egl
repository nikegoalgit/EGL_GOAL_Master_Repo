package sm0u;
import corpcom1.*;
import corpcom2.*;
import corpcom4.*;
import corpcom5.*;
import corpcom6.*;
import corpcom7.*;
import corpx1.*;
import corpx2.*;
import corpy2.*;
import corpz3.*;
import ku.common.*;
import sm.common.*;
import ta.common.*;
import vv.common.*;
//*** PROGRAM=SM0U ****
// SM0U allows the user to enter a request for a Customer
// Master by Rep report.  The report will be created and
// printed during the nightly batch processing.
// 
// notes:
// 1.the maximum number of requests allowed is 10.
// ***********************************************************
//                        nike
//                   maintenance log
// 
//  date       name     change
// ____________________________________________________________
// 08/05/92  |aivers  | created
// 10/09/92  |aivers  | regen for database changes.
// 04/16/93  |gcalki  | add code to set subsystem rec & causera
//           |        | and to use them upon entry.
// 09/01/93  |dlegg   | Correct data exception for CSP v4.1.
//           |        | SM0U740, 746.
// *********************
Program SM0U type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "SM00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  SM0UW01 SM0UW01; // record
  SM0UW02 SM0UW02; // record
  SM0UW03 SM0UW03; // record
  SM1REC SM1REC; // record
  SM4REC SM4REC; // record
  SM5REC SM5REC; // record
  SMWREC SMWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  XZZREC XZZREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XROTBL {deleteAfterUse = yes}; // table
  use SM0UM.SM0UM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    SM0U000: SM0U000();


     /* ******************** sm0u000 flow **************************/


    goto SM0U100;


     /* ******************** end sm0u000 flow **********************/
    SM0U100: SM0U100();

    goto SM0U100;

  end // end main
end // end SM0U

// init rec & set up map
Function SM0U000()
   /* **************  process sm0u000 start  *******************/
   /* *  this process initializes records and map areas       **/
   /* **********************************************************/



  XSENTRY(); /* check entry security*/

  XSSEGTR(); /* set segmented transaction id*/

  converseLib.clearScreen();
  set SM0UM001 initial; /* initialize map*/
  set TA1REC empty; /* initialize records*/
  set TA2REC empty; /* initialize records*/
  set SMWREC empty; /* subsystem records*/
  set SQLCA empty;
  set SM0UW01 empty;
  SM0UW01.SM0UW-MAX-NBR = 10;
  SM0UW01.SM0UW-ERROR = "N";
  SM0UW01.SM0UW-AGCY-ERROR = "N";
  SM0UW01.SM0UW-XRO-ERROR = "N";


  if (COMMAREA.CAFRMSYS == COMMAREA.CACURSYS) /* from same system*/
    SMWREC.SMW-SUBSYSTEM-RECORD = COMMAREA.CAUSERA;
  end

  /* *********************************************************************/
  /* * Check to see if we are being fastpathed into. If so, load the    **/
  /* * rep and agency id to the map.                                    **/
  /* *********************************************************************/

  if (COMMAREA.CAITEM != " ")
    SM0UW01.CAITEM = COMMAREA.CAITEM; /* reformat agency & rep*/
  else

  /* *********************************************************************/
  /* * Check to see if we are being PF keyed into.  If so, load the     **/
  /* * rep and agency id to the map.                                    **/
  /* *********************************************************************/

    if (SMWREC.SM-SAGCY-ID != " "
     || SMWREC.SM-SREP-ID != 0)
      SMWREC.SMW-NUM-CHK-NBR = SMWREC.SM-SREP-ID;
      SMWREC.SMW-NUM-CHK-FUNC = "NUMTOCHR"; /* convert to char*/
      SMWREC.SMW-NUM-CHK-PAD = " "; /* supress lead 0's*/
      SMWREC.SMW-NUM-CHK-LEN = 4;
      XSSMS-NUM-CHK(); /* nbr conversion*/
      SM0UW01.SM0UW-SM-SREP-ID = SMWREC.SMW-NUM-CHK-WORD;
      SM0UW01.SM-SAGCY-ID = SMWREC.SM-SAGCY-ID; /* move to save*/
    end

  end


   /* ***************  process SM0U200 end  *********************/


  SM0U200(); /* BUILD MAP*/


   /* ***************  process SM0U000 end  *********************/
end // end SM0U000

// converse report request map
Function SM0U100()
   /* move map fields to working storage for compare later*/
   /*  */
  SM0UW01.SM0UW-REPID = SM0UM001.SM4REPID;
  SM0UW01.SM0UW-AGCYID = SM0UM001.SM1AGYID;
  SM0UW01.SM0UW-AS-OF-DT = SM0UM001.SM0UM-AS-OF-DATE;
  SM0UW01.SM0UW-WS-IDX = 0;

  while (SM0UW01.SM0UW-WS-IDX < 12)
    SM0UW01.SM0UW-WS-IDX = SM0UW01.SM0UW-WS-IDX + 1;
    SM0UW01.SM0UW-SEL[SM0UW-WS-IDX] = SM0UM001.SM0UM-SEL[SM0UW-WS-IDX];
  end




  converse SM0UM001 ;

  SM0UW01.SM0UW-ERROR = "N";
  SM0UW01.SM0UW-AGCY-ERROR = "N";

  SM0U500(); /* edit fast pathing*/

  if (SM0UW01.SM0UW-ERROR == "N")
    SM0U600(); /* edit pf keys*/
  end

end // end SM0U100

// build map
Function SM0U200()
   /* **************  process sm0u200 start  *******************/
   /* *  this process gets all the fields to build the map    **/
   /* **********************************************************/

  SM0UW01.SM0UW-TEMP-IDX = 0;
  SM0UW01.SM0UW-CURR-IDX = 0;
  SM0UW01.SM0UW-PREV-IDX = 0;
  SM0UW01.SM0UW-SCRN-IDX = 0;

  SM0U210(); /* get the number of available requests*/

  SM0UM001.SM0UM-DATE = VGVar.currentShortGregorianDate; /* set report DATE*/
  SM0UM001.SM0UM-AS-OF-DATE = VGVar.currentShortGregorianDate; /* set report as-of-date*/

  SM0U220(); /* load remote printer info into ws*/

  if (SM0UW01.SM0UW-ERROR == "N")
    SM0U230(); /* load first 12 printers to map*/
    SM0UW01.SM0UW-CURR-IDX = SM0UW01.SM0UW-TEMP-IDX;
  end

   /* ***************  move work areas to map  ******************/

  SM0UM001.SM1AGYID = SM0UW01.SM-SAGCY-ID; /* move to map*/
  SM0UM001.SM4REPID = SM0UW01.SM0UW-SM-SREP-ID; /* move to map*/


   /* ***************  process SM0U200 end  *********************/
end // end SM0U200

// get avail requests
Function SM0U210()
    /* ** check # of report requests already on que*/

  SM0UW01.SM0UW-EOF = "N";
  XZZREC.XZZQRYRN = -1;
  XZZREC.XZZQRYLN = 0;
  XZZREC.XZZQRYID = "SM0U"; /* find any agency parm entries*/
  SM0UW01.SM0UW-CTR = 0;

  call "IO1000" ("SS", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* request is found*/
    while (SM0UW01.SM0UW-EOF == "N")
      SM0U215(); /* count the request records*/
    end
    SM0U216(); /* CLOSE THE CURSOR*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1DBASE = "DCORP";
    TA1REC.TA1TBLVU = "VPARM101";
    TA1REC.TA1PGMNM = "SM0U";
    TA1REC.TA1LOC = "SM0U210";
    move SQLCA to ERRSQLCA withV60Compat;
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  end

end // end SM0U210

// get avail requests
Function SM0U215()
    /* ** check # of report requests already on que*/


  call "IO1000" ("SN", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* request is found*/
    SM0UW01.SM0UW-CTR = SM0UW01.SM0UW-CTR + 1; /* add 1 to counter*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      SM0UW01.SM0UW-EOF = "Y";
      if (SM0UW01.SM0UW-CTR == 0) /* NO requests have been made yet*/
        SM0UM001.SM0UM-AVAIL-RQSTS = 10;
      else
        SM0UM001.SM0UM-AVAIL-RQSTS = SM0UW01.SM0UW-MAX-NBR - SM0UW01.SM0UW-CTR;
      end
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "ABND";
      TA1REC.TA1DBASE = "DCORP";
      TA1REC.TA1TBLVU = "VPARM101";
      TA1REC.TA1PGMNM = "SM0U";
      TA1REC.TA1LOC = "SM0U215";
      move SQLCA to ERRSQLCA withV60Compat;
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    end
  end

end // end SM0U215

// close cursor
Function SM0U216()
    /* ** close request cursor*/

  call "IO1000" ("CS", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0) /* request is found*/
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1DBASE = "DCORP";
    TA1REC.TA1TBLVU = "VPARM101";
    TA1REC.TA1PGMNM = "SM0U";
    TA1REC.TA1LOC = "SM0U216";
    move SQLCA to ERRSQLCA withV60Compat;
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  end

end // end SM0U216

// GET XRO INFO
Function SM0U220()

  SM0UW01.SM0UW-XRO-IDX = 1;
  SM0UW01.SM0UW-WS-IDX = 0;

  while (XROTBL.XROCD[SM0UW-XRO-IDX] != "9999") /* not end of table*/

    if (XROTBL.XROSMFL[SM0UW-XRO-IDX] == "Y"
     && XROTBL.XXXSTAT[SM0UW-XRO-IDX] == "A")
      SM0UW01.SM0UW-WS-IDX = SM0UW01.SM0UW-WS-IDX + 1;
      SM0UW02.SM0UW-RMT-LIT[SM0UW-WS-IDX] = "RMT";
      SM0UW02.SM0UW-RMT-PRTR[SM0UW-WS-IDX] = XROTBL.XROCD[SM0UW-XRO-IDX];
      SM0UW02.SM0UW-LOC[SM0UW-WS-IDX] = XROTBL.XRODESC[SM0UW-XRO-IDX];
    end
    SM0UW01.SM0UW-XRO-IDX = SM0UW01.SM0UW-XRO-IDX + 1;
  end

  SM0UW01.SM0UW-BOT = SM0UW01.SM0UW-WS-IDX; /* bottom of ws_table*/

  if (SM0UW01.SM0UW-WS-IDX == 0) /* no sales force printers on file*/
    SM0U225(); /* set fields protected*/
    converseLib.validationFailed(51); /* no printers defined msg*/
    SM0UW01.SM0UW-XRO-ERROR = "Y";
  else
    SM0UW01.SM0UW-XRO-ERROR = "N";
  end

    /* ***************    end   sm0u220   *******************/
end // end SM0U220

// set fields autoskip dark
Function SM0U225()
  SM0UW01.SM0UW-WS-IDX = 0;

  set SM0UM001.SM4REPID protect, invisible;
  set SM0UM001.SM1AGYID protect, invisible;
  set SM0UM001.SM0UM-AS-OF-DATE protect, invisible;
  set SM0UM001.CATOAP cursor;

  while (SM0UW01.SM0UW-WS-IDX < 12) /* until end of map*/
    SM0UW01.SM0UW-WS-IDX = SM0UW01.SM0UW-WS-IDX + 1;
    set SM0UM001.SM0UM-SEL[SM0UW-WS-IDX] skip, invisible;
  end

    /* ***************    end   sm0u225   *******************/
end // end SM0U225

// set fields autoskip, dark
Function SM0U230()
    /* ***************    start sm0u230   *******************/
   /* ******************************/
   /* move ws data to screen*/
   /* ******************************/

  SM0UW01.SM0UW-SCRN-TOP = 0; /* init screen top*/

  while (SM0UW01.SM0UW-SCRN-TOP < 12
   && SM0UW01.SM0UW-TEMP-IDX < SM0UW01.SM0UW-BOT)
    SM0UW01.SM0UW-SCRN-TOP = SM0UW01.SM0UW-SCRN-TOP + 1;
    SM0UW01.SM0UW-TEMP-IDX = SM0UW01.SM0UW-TEMP-IDX + 1;

    SM0UM001.SM0UM-RMT-LIT[SM0UW-SCRN-TOP] = SM0UW02.SM0UW-RMT-LIT[SM0UW-TEMP-IDX];
    SM0UM001.SM0UM-RMT-PRTR[SM0UW-SCRN-TOP] = SM0UW02.SM0UW-RMT-PRTR[SM0UW-TEMP-IDX];
    SM0UM001.SM0UM-LOC[SM0UW-SCRN-TOP] = SM0UW02.SM0UW-LOC[SM0UW-TEMP-IDX];
  end

  SM0UW01.SM0UW-SCRN-IDX = SM0UW01.SM0UW-SCRN-TOP;


  while (SM0UW01.SM0UW-SCRN-TOP < 12) /* less than 12 displayed*/
    SM0UW01.SM0UW-SCRN-TOP = SM0UW01.SM0UW-SCRN-TOP + 1;
    set SM0UM001.SM0UM-RMT-LIT[SM0UW-SCRN-TOP] skip, invisible;
    set SM0UM001.SM0UM-RMT-PRTR[SM0UW-SCRN-TOP] skip, invisible;
    set SM0UM001.SM0UM-LOC[SM0UW-SCRN-TOP] skip, invisible;
    set SM0UM001.SM0UM-SEL[SM0UW-SCRN-TOP] skip, invisible;
  end



    /* ***************    end   sm0u230   *******************/
end // end SM0U230

// edit fast pathing
Function SM0U500()
      /* check for fast pathing*/

  if (SM0UM001.CATOAP > " ")
    if (converseVar.eventKey is enter)
      if (SM0UM001.SM4REPID == " "
       && SM0UM001.SM1AGYID == " ") /* no requests are pending*/
        COMMAREA.CATOAP = SM0UM001.CATOAP; /* fast path out*/
        COMMAREA.CAITEM = SM0UM001.CAITEM;
        COMMAREA.CAUSERA = " "; /* clear user area*/

        if (COMMAREA.CATOSYS == COMMAREA.CACURSYS) /* transfer in SM sys*/
          SM0US-SET-CAUSERA(); /* set subsystem rec & causera*/
        end
        XSEXIT();
        SM0UM001.VAGen_EZEMSG = COMMAREA.CAMSG;
        SM0UW01.SM0UW-ERROR = "Y";
        return;
      else
        converseLib.validationFailed(42); /* cannot fast path while a request is pending*/
        SM0UW01.SM0UW-ERROR = "Y";
      end
    else
       /* you may not fast path with pf keys*/
      converseLib.validationFailed(4);
      SM0UW01.SM0UW-ERROR = "Y";
    end
  end

end // end SM0U500

// pfkey processing for SM0UM001
Function SM0U600()
   /* ************************************************/
   /* edit pfkeys and special keys                **/
   /* ************************************************/


   /* ***********************************/
   /* enter edit*/
   /* ***********************************/
  if (converseVar.eventKey is enter)
    if (SM0UW01.SM0UW-XRO-ERROR == "N")
      SM0U700(); /* edit map*/
    end
    return;
  end

   /* ***********************************/
     /* pfkeys edit*/
   /* ***********************************/

   /* ***********************************/
     /* pf1 edit*/
   /* ***********************************/

  if (converseVar.eventKey is pf1) /* help screens*/
    COMMAREA.CACURRAP = "SM0U";
    XSPF1();
    SM0UM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    SM0UW01.SM0UW-ERROR = "Y";
    return;
  end

   /* ***********************************/
     /* pf3 edit*/
   /* ***********************************/

  if (converseVar.eventKey is pf3) /* back to sales force menu*/
    COMMAREA.CAITEM = " ";
    COMMAREA.CATOAP = "SM0H";
    COMMAREA.CAFROMAP = "SM0U";
    SM0US-SET-CAUSERA();
    XSEXIT();
    SM0UM001.VAGen_EZEMSG = COMMAREA.CAMSG;
    SM0UW01.SM0UW-ERROR = "Y";
    return;
  end


   /* ***********************************/
     /* pf4 edit*/
   /* ***********************************/

  if (converseVar.eventKey is pf4) /* back to goal menu*/
    COMMAREA.CAFROMAP = "SM0U";
    XSPF4();
  end


   /* ***********************************/
     /* pf7 edit*/
   /* ***********************************/

  if (converseVar.eventKey is pf7)
    if (SM0UW01.SM0UW-XRO-ERROR == "N")
      SM0U660(); /* scroll up*/
    end
    return;
  end


   /* ***********************************/
     /* pf8 edit*/
   /* ***********************************/

  if (converseVar.eventKey is pf8)
    if (SM0UW01.SM0UW-XRO-ERROR == "N")
      SM0U670(); /* scroll down*/
    end
    return;
  end

   /* ***********************************/
     /* PA2 edit*/
   /* ***********************************/

  if (converseVar.eventKey is pa2)
    if (SM0UW01.SM0UW-XRO-ERROR == "N")
      set SM0UM001 initial; /* refresh screen*/
      SM0U200();
      converseLib.validationFailed(47); /* request cancelled message*/
    end
    return;
  end


  SM0UW01.SM0UW-ERROR = "Y"; /* set error flag*/
  converseLib.validationFailed(2); /* invalid pf key*/


end // end SM0U600

// scroll up
Function SM0U660()
   /* *********************************************************/
          /* scrolling up takes place*/
   /* *********************************************************/


  if (SM0UW01.SM0UW-PREV-IDX == 0) /* at the top of the screen*/
    converseLib.validationFailed(3); /* cannot scroll up*/
    return;
  end

  SM0UW01.SM0UW-CURR-IDX = SM0UW01.SM0UW-PREV-IDX;
  SM0UW01.SM0UW-SCRN-TOP = 12;

  while (SM0UW01.SM0UW-SCRN-TOP >= 1 /* load the screen with the ws table*/
   && SM0UW01.SM0UW-PREV-IDX >= 1)
    SM0UM001.SM0UM-RMT-LIT[SM0UW-SCRN-TOP] = SM0UW02.SM0UW-RMT-LIT[SM0UW-PREV-IDX];
    SM0UM001.SM0UM-RMT-PRTR[SM0UW-SCRN-TOP] = SM0UW02.SM0UW-RMT-PRTR[SM0UW-PREV-IDX];
    SM0UM001.SM0UM-LOC[SM0UW-SCRN-TOP] = SM0UW02.SM0UW-LOC[SM0UW-PREV-IDX];

    SM0U665();

    SM0UW01.SM0UW-SCRN-TOP = SM0UW01.SM0UW-SCRN-TOP - 1;
    SM0UW01.SM0UW-PREV-IDX = SM0UW01.SM0UW-PREV-IDX - 1;
  end

  set SM0UM001.SM4REPID cursor; /* set cursor at first line*/

  if (SM0UW01.SM0UW-PREV-IDX < 1)
    SM0UW01.SM0UW-PREV-IDX = 0;
  end

  SM0UW01.SM0UW-SCRN-IDX = 12;


end // end SM0U660

// set fields defined
Function SM0U665()
   /* *********************************************************/
          /* set fields defined*/
   /* *********************************************************/


  set SM0UM001.SM0UM-SEL[SM0UW-SCRN-TOP] initialAttributes;
  set SM0UM001.SM0UM-RMT-LIT[SM0UW-SCRN-TOP] initialAttributes;
  set SM0UM001.SM0UM-RMT-PRTR[SM0UW-SCRN-TOP] initialAttributes;
  set SM0UM001.SM0UM-LOC[SM0UW-SCRN-TOP] initialAttributes;


end // end SM0U665

// scroll down
Function SM0U670()
   /* *********************************************************/
          /* scrolling down takes place*/
   /* *********************************************************/

  if (SM0UW01.SM0UW-CURR-IDX == SM0UW01.SM0UW-BOT) /* at bottom*/
    converseLib.validationFailed(7);
    return;
  end

  SM0UW01.SM0UW-SCRN-TOP = 0;
  SM0UW01.SM0UW-PREV-IDX = SM0UW01.SM0UW-CURR-IDX;

  while (SM0UW01.SM0UW-SCRN-TOP < 12 /* load the screen*/
   && SM0UW01.SM0UW-CURR-IDX < SM0UW01.SM0UW-BOT)
    SM0UW01.SM0UW-SCRN-TOP = SM0UW01.SM0UW-SCRN-TOP + 1;
    SM0UW01.SM0UW-CURR-IDX = SM0UW01.SM0UW-CURR-IDX + 1;

    SM0UM001.SM0UM-RMT-LIT[SM0UW-SCRN-TOP] = SM0UW02.SM0UW-RMT-LIT[SM0UW-CURR-IDX];
    SM0UM001.SM0UM-RMT-PRTR[SM0UW-SCRN-TOP] = SM0UW02.SM0UW-RMT-PRTR[SM0UW-CURR-IDX];
    SM0UM001.SM0UM-LOC[SM0UW-SCRN-TOP] = SM0UW02.SM0UW-LOC[SM0UW-CURR-IDX];

  end

  SM0UW01.SM0UW-SCRN-IDX = SM0UW01.SM0UW-SCRN-TOP;
                                   /* reset current screen index*/

  if (SM0UW01.SM0UW-CURR-IDX == SM0UW01.SM0UW-BOT)
    converseLib.validationFailed(7); /* at bottom cannot scroll down any further*/
  end

  SM0UW01.SM0UW-RCD = SM0UW01.SM0UW-CURR-IDX;
                                   /* record count set to last one*/
   /* *********************************************************/
          /* blank out rows on screen with no data to fill in*/
          /* and set autoskip, dark.*/
   /* *********************************************************/

  while (SM0UW01.SM0UW-SCRN-TOP < 12)
    SM0UW01.SM0UW-SCRN-TOP = SM0UW01.SM0UW-SCRN-TOP + 1;
    set SM0UM001.SM0UM-SEL[SM0UW-SCRN-TOP] skip, invisible;
    set SM0UM001.SM0UM-RMT-LIT[SM0UW-SCRN-TOP] skip, invisible;
    set SM0UM001.SM0UM-RMT-PRTR[SM0UW-SCRN-TOP] skip, invisible;
    set SM0UM001.SM0UM-LOC[SM0UW-SCRN-TOP] skip, invisible;
  end

  set SM0UM001.SM4REPID cursor; /* set cursor at first row.*/


end // end SM0U670

// edit map fields
Function SM0U700()
   /* *********************************************************/
          /* edit fields on the map*/
   /* *********************************************************/

  set XZZREC empty;
  SM0U725(); /* set fields defined*/

  if (SM0UM001.SM4REPID == " " /* nothing entered*/
   && SM0UM001.SM1AGYID == " ")
    return;
  else
    SM0U705(); /* edit changes*/
  end

end // end SM0U700

// edit map changes
Function SM0U705()
   /* ****************************************************************/
   /* edit map changes*/
   /* ******************************************************************/

  SM0U710(); /* edit request number*/

  if (SM0UW01.SM0UW-ERROR == "N")
    SM0U720(); /* edit printer location*/
    SM0U750(); /* edit agency id*/
  end

  if (SM0UW01.SM0UW-AGCY-ERROR == "N")
    SM0U740(); /* edit rep id*/
  end

  if (SM0UW01.SM0UW-ERROR == "N"
   && SM0UW01.SM0UW-AGCY-ERROR == "N")
    SM0U760(); /* update parm table*/
  end
end // end SM0U705

// edit request number
Function SM0U710()
   /* **************************************************************/
   /* edit request number*/
   /* **************************************************************/

  if (SM0UM001.SM0UM-AVAIL-RQSTS == 0)
    SM0UW01.SM0UW-ERROR = "Y";
    converseLib.validationFailed(44);
  else
    SM0UW01.SM0UW-COMPUTED-RQST = SM0UW01.SM0UW-MAX-NBR - SM0UM001.SM0UM-AVAIL-RQSTS + 1;
    XZZREC.XZZQRYRN = SM0UW01.SM0UW-COMPUTED-RQST;
  end
end // end SM0U710

// edit printer locations
Function SM0U720()
   /* ***********************************************************/
   /* EDIT PRINTER LOCATION*/
   /* ***********************************************************/

  SM0UW01.SM0UW-WS-IDX = 0;
  SM0UW01.SM0UW-ENTRY-CTR = 0;

  while (SM0UW01.SM0UW-WS-IDX < 12)
    SM0UW01.SM0UW-WS-IDX = SM0UW01.SM0UW-WS-IDX + 1;

    if (SM0UM001.SM0UM-SEL[SM0UW-WS-IDX] != " ") /* something selected*/
      SM0UW01.SM0UW-ENTRY-CTR = SM0UW01.SM0UW-ENTRY-CTR + 1;
      SM0UW01.SM0UW-XROCD = SM0UM001.SM0UM-RMT-PRTR[SM0UW-WS-IDX];
    end
  end

  if (SM0UW01.SM0UW-ENTRY-CTR == 0) /* nothing was selected*/
    SM0UW01.SM0UW-ERROR = "Y";
    converseLib.validationFailed(54); /* must select one*/

    SM0UW01.SM0UW-WS-IDX = 0;

    while (SM0UW01.SM0UW-WS-IDX < 12 /* set all sel fields bright*/
     && SM0UW01.SM0UW-WS-IDX < SM0UW01.SM0UW-SCRN-IDX)
      SM0UW01.SM0UW-WS-IDX = SM0UW01.SM0UW-WS-IDX + 1;
      set SM0UM001.SM0UM-SEL[SM0UW-WS-IDX] bold;
    end

    set SM0UM001.SM0UM-SEL[1] cursor;

  else

    if (SM0UW01.SM0UW-ENTRY-CTR > 1) /* more than one is selected*/
      SM0UW01.SM0UW-ERROR = "Y";
      converseLib.validationFailed(45);

      SM0UW01.SM0UW-WS-IDX = 12;

      while (SM0UW01.SM0UW-WS-IDX >= 1) /* set entered SEL fields bright*/
        if (SM0UM001.SM0UM-SEL[SM0UW-WS-IDX] != " ")
          set SM0UM001.SM0UM-SEL[SM0UW-WS-IDX] cursor, bold;
        end

        SM0UW01.SM0UW-WS-IDX = SM0UW01.SM0UW-WS-IDX - 1;
      end

    else
      XZZREC.XROCD = SM0UW01.SM0UW-XROCD; /* move prtr to output*/
    end
  end
end // end SM0U720

// set fields defined
Function SM0U725()
   /* ***********************************************************/
   /* SET FIELDS DEFINED*/
   /* ***********************************************************/

  set SM0UM001.SM4REPID initialAttributes;
  set SM0UM001.SM1AGYID initialAttributes;

  SM0UW01.SM0UW-WS-IDX = 0;

  while (SM0UW01.SM0UW-WS-IDX < 12
   && SM0UW01.SM0UW-WS-IDX < SM0UW01.SM0UW-SCRN-IDX)
    SM0UW01.SM0UW-WS-IDX = SM0UW01.SM0UW-WS-IDX + 1;

    set SM0UM001.SM0UM-SEL[SM0UW-WS-IDX] initialAttributes;
  end

end // end SM0U725

// edit repid field
Function SM0U740()
   /* ********************************************************************/
   /* edit rep id field*/
   /* ********************************************************************/


  if (SM0UM001.SM4REPID == " ALL") /* set parm fields for "all" condition*/
    XZZREC.XZZSINT1 = 0;
    XZZREC.XZZSINT2 = 9999;
  else
    if (SM0UM001.SM4REPID == " ")
      SM0UW01.SM0UW-ERROR = "Y";
      converseLib.validationFailed(53); /* rep id must be entered*/
      set SM0UM001.SM4REPID cursor, bold;
    else
      SMWREC.SMW-NUM-CHK-WORD = SM0UM001.SM4REPID;
      SMWREC.SMW-NUM-CHK-FUNC = "CHRTONUM";
      SMWREC.SMW-NUM-CHK-PAD = " ";
      SMWREC.SMW-NUM-CHK-LEN = 4;
      XSSMS-NUM-CHK(); /* validate & convert from char to num*/
      if (SMWREC.SMW-NUM-CHK-ERR == "Y")
        SM0UW01.SM0UW-ERROR = "Y";
        converseLib.validationFailed(36); /* rep must be numeric error*/
        set SM0UM001.SM4REPID cursor, bold;
      else
        SM0UM001.SM4REPID = SMWREC.SMW-NUM-CHK-WORD;
        SM0UW01.SM0UW-REPID-NUM = SMWREC.SMW-NUM-CHK-NBR;
        SM0U745(); /* edit rep id*/
      end
    end
  end
end // end SM0U740

// validate rep id
Function SM0U745()
   /* *********************************************************************/
   /* validate rep id*/
   /* *********************************************************************/

  SM4REC.SM4REPID = SM0UW01.SM0UW-REPID-NUM;

  call "IO0020" ("S ", SQLCA, SM4REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0) /* rep found*/
    if (SM0UM001.SM1AGYID == "ALL") /* all agencies were chosen*/
      XZZREC.XZZSINT1 = SM0UW01.SM0UW-REPID-NUM;
      XZZREC.XZZSINT2 = SM0UW01.SM0UW-REPID-NUM;
    else
      SM0U746();
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      set SM0UM001.SM4REPID cursor, bold;
      SM0UW01.SM0UW-ERROR = "Y";
      converseLib.validationFailed(9); /* rep not valid*/
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "ABND";
      TA1REC.TA1PGMNM = "SM0U";
      TA1REC.TA1LOCAT[2] = "SM0U745";
      TA1REC.TA1LOCAT[3] = "IO0020";
      TA1REC.TA1MAP = "SM0UM001";
      TA1REC.TA1DBASE = "DSLSMN";
      TA1REC.TA1TBLVU = "VREPS001";
      move SQLCA to ERRSQLCA withV60Compat;
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    end
  end

end // end SM0U745

// validate rep in ragcy
Function SM0U746()
   /* *******************************************************************/
   /* validate rep/agency in ragcy*/
   /* *******************************************************************/

  SM5REC.SM4REPID = SM0UW01.SM0UW-REPID-NUM;
  SM5REC.SM1AGYID = SM0UM001.SM1AGYID;

  call "IO0160" ("S3", SQLCA, SM5REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    call "IO0160" ("N3", SQLCA, SM5REC) {isNoRefresh = yes, isExternal = yes};

    if (SQLCA.VAGen_SQLCODE == +0)
      XZZREC.XZZSINT1 = SM0UW01.SM0UW-REPID-NUM;
      XZZREC.XZZSINT2 = SM0UW01.SM0UW-REPID-NUM;
    else
      TA1REC.TA1LOCAT[1] = "N3";
    end
  else
    TA1REC.TA1LOCAT[1] = "S3";
  end


  if (SQLCA.VAGen_SQLCODE == 100)
    set SM0UM001.SM4REPID cursor, bold;
    set SM0UM001.SM1AGYID bold;
    SM0UW01.SM0UW-ERROR = "Y";
    converseLib.validationFailed(48);
  else
    if (SQLCA.VAGen_SQLCODE != +0)
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "ABND";
      TA1REC.TA1PGMNM = "SM0U";
      TA1REC.TA1LOCAT[2] = "SM0U746";
      TA1REC.TA1LOCAT[3] = "IO0160";
      TA1REC.TA1MAP = "SM0UM001";
      TA1REC.TA1DBASE = "DSLSMN";
      TA1REC.TA1TBLVU = "VRAGCY01";
      move SQLCA to ERRSQLCA withV60Compat;
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    end
  end

  call "IO0160" ("C3", SQLCA, SM5REC) {isNoRefresh = yes, isExternal = yes}; /* close cursor when donE*/

end // end SM0U746

// edit agency id
Function SM0U750()
   /* ********************************************************************/
   /* edit agency id*/
   /* ********************************************************************/

  if (SM0UM001.SM1AGYID == "ALL") /* set parm fields for "all" condition*/
    XZZREC.XZZ4CHR1 = " ";
    XZZREC.XZZ4CHR2 = "ZZZZ";
  else
    if (SM0UM001.SM1AGYID == " ")
      SM0UW01.SM0UW-AGCY-ERROR = "Y";
      converseLib.validationFailed(52); /* agency id must be entered*/
      set SM0UM001.SM1AGYID cursor, bold;
    else
      SM0U755(); /* go edit agency id*/
    end
  end
end // end SM0U750

// validate agency id
Function SM0U755()
   /* ***************************************************************/
   /* validate agency id*/
   /* ***************************************************************/

  SM1REC.SM1AGYID = SM0UM001.SM1AGYID;

  call "IO0050" ("S ", SQLCA, SM1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    XZZREC.XZZ4CHR1 = SM0UM001.SM1AGYID;
    XZZREC.XZZ4CHR2 = SM0UM001.SM1AGYID;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      set SM0UM001.SM1AGYID cursor, bold;
      SM0UW01.SM0UW-AGCY-ERROR = "Y";
      converseLib.validationFailed(31); /* not a valid agency*/
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "ABND";
      TA1REC.TA1PGMNM = "SM0U";
      TA1REC.TA1LOCAT[2] = "SM0U755";
      TA1REC.TA1LOCAT[3] = "IO0050";
      TA1REC.TA1MAP = "SM0UM001";
      TA1REC.TA1DBASE = "DSLSMN";
      TA1REC.TA1TBLVU = "VSAGCY01";
      move SQLCA to ERRSQLCA withV60Compat;
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    end
  end



end // end SM0U755

// write record to parm file
Function SM0U760()
   /* ********************************************************************/
   /* write record to parm file*/
   /* ********************************************************************/

  SM0U765(); /* call date and time routine for setup date and time*/
  SM0U770(); /* figure as of date*/

  XZZREC.XZZQRYID = "SM0U";

  call "IO1000" ("A ", SQLCA, XZZREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == +0)
    set SM0UM001 initial;
    set SM0UM001 empty;
    SM0UW01.SM-SAGCY-ID = " "; /* set save area blank*/
    SM0UW01.SM0UW-SM-SREP-ID = " "; /* set save area blank*/
    SM0UM001.SM0UM-AS-OF-DATE = VGVar.currentShortGregorianDate;
    SM0U200(); /* get avail requests*/
    converseLib.validationFailed(46);
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      converseLib.validationFailed(49);
    else
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "ABND";
      TA1REC.TA1PGMNM = "SM0U";
      TA1REC.TA1LOCAT[1] = "A ";
      TA1REC.TA1LOCAT[2] = "SM0U760";
      TA1REC.TA1LOCAT[3] = "IO1000";
      TA1REC.TA1MAP = "SM0UM001";
      TA1REC.TA1DBASE = "DCORP";
      TA1REC.TA1TBLVU = "VPARM101";
      move SQLCA to ERRSQLCA withV60Compat;
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
    end
  end

end // end SM0U760

// get date
Function SM0U765()

  TA2REC.TA2DTOPT = "GETDATE";
  call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

  if (TA2REC.TA2RTNCD != 0222
   && TA2REC.TA2RTNCD != 0)
    TA1REC.TA1TYPE = "DB2 ";
    TA1REC.TA1FUNC = "ABND";
    TA1REC.TA1PGMNM = "SM0U765";
    call "TA0020" (TA1REC) {isExternal = yes};
  else
    if (TA2REC.TA2RTNCD == 0)
      XZZREC.ZZZSDT = TA2REC.TA2GRGGN;
      XZZREC.ZZZSTM = TA2REC.TA2TIMHM;
    end
  end



end // end SM0U765

// figure as-of date
Function SM0U770()
   /* ********************************************************************/
   /* figure as of date*/
   /* ********************************************************************/

  SM0UW01.SM0UW-DATE = SM0UM001.SM0UM-AS-OF-DATE;

  if (SM0UW01.SM0UW-YY < 75)
    SM0UW01.SM0UW-AS-OF-CC = 20;
  else
    SM0UW01.SM0UW-AS-OF-CC = 19;
  end

  SM0UW01.SM0UW-AS-OF-YY = SM0UW01.SM0UW-YY;
  SM0UW01.SM0UW-AS-OF-MM = SM0UW01.SM0UW-MM;
  SM0UW01.SM0UW-AS-OF-DD = SM0UW01.SM0UW-DD;

  XZZREC.XZZINT1 = SM0UW01.SM0UW-AS-OF-DT;

end // end SM0U770

// Set subsystem rec & causera
Function SM0US-SET-CAUSERA()
  /* ************************************************************************/
  /* This statement group moves the last valid Agency id and Rep id to the*/
  /* subsystem record so the next application will have a valid key to*/
  /* start with.  The subsystem record is then moved as a group to the*/
  /* causera field of the common data area.*/
  /* ************************************************************************/


  SMWREC.SMW-NUM-CHK-WORD = SM0UM001.SM4REPID;
  SMWREC.SMW-NUM-CHK-FUNC = "CHRTONUM";
  SMWREC.SMW-NUM-CHK-PAD = " ";
  SMWREC.SMW-NUM-CHK-LEN = 4;
  XSSMS-NUM-CHK(); /* validate & convert from char to num*/

  if (SMWREC.SMW-NUM-CHK-ERR == "Y") /* check if valid rep id*/
    SMWREC.SM-SREP-ID = 0;
  else
    SM4REC.SM4REPID = SMWREC.SMW-NUM-CHK-NBR;
    if (SM4REC.SM4REPID != SMWREC.SM-SREP-ID)
      SMWREC.SM-SREP-ID = SM4REC.SM4REPID;
    end
  end

  if (SM0UM001.SM1AGYID != SMWREC.SM-SAGCY-ID)
    if (SM0UM001.SM1AGYID == "ALL "
     || SM0UM001.SM1AGYID == " ")
      SMWREC.SM-SAGCY-ID = " ";
    else
      SMWREC.SM-SAGCY-ID = SM0UM001.SM1AGYID;
    end
  end


  COMMAREA.CAUSERA = SMWREC.SMW-SUBSYSTEM-RECORD;


end // end SM0US-SET-CAUSERA

//*** RECORD=SM0UW01 ****
// ;/*********************************************************
// ;/* working storage table for sm0u                        *
// ;/*
// ;/*  maintenance
// ;/*  date        userid     descritpion
// ;/*  --------    ------     -------------------------------
// ;/*  08/18/92    aivers     created.
// ;/*  04/16/93    gcalki     added fields to receive caitem
// ;/*********************************************************
// ***********************
Record SM0UW01 type basicRecord
  10 SM0UW-ERROR SM0UW-ERROR ; 
  10 SM0UW-XRO-ERROR SM0UW-XRO-ERROR ; 
  10 SM0UW-REP-ERROR SM0UW-REP-ERROR ; 
  10 SM0UW-AGCY-ERROR SM0UW-AGCY-ERROR ; 
  10 SM0UW-RCD-CHGD-FL SM0UW-RCD-CHGD-FL ; 
  10 SM0UW-EOF SM0UW-EOF ; 
  10 SM0UW-SCRN-TOP SM0UW-SCRN-TOP ; 
  10 SM0UW-SCRN-IDX SM0UW-SCRN-IDX ; 
  10 SM0UW-WS-IDX SM0UW-WS-IDX ; 
  10 SM0UW-TEMP-IDX SM0UW-TEMP-IDX ; 
  10 SM0UW-CURR-IDX SM0UW-CURR-IDX ; 
  10 SM0UW-RCD SM0UW-RCD ; 
  10 SM0UW-PREV-IDX SM0UW-PREV-IDX ; 
  10 SM0UW-BOT SM0UW-BOT ; 
  10 SM0UW-MAX-NBR SM0UW-MAX-NBR ; 
  10 SM0UW-XRO-IDX SM0UW-XRO-IDX ; 
  10 SM0UW-ENTRY-CTR SM0UW-ENTRY-CTR ; 
  10 SM0UW-CTR SM0UW-CTR ; 
  10 SM0UW-COMPUTED-RQST SM0UW-COMPUTED-RQST ; 
  10 SM0UW-AS-OF-DT SM0UW-AS-OF-DT ; 
    15 SM0UW-AS-OF-CC SM0UW-AS-OF-CC ; 
    15 SM0UW-AS-OF-YY SM0UW-AS-OF-YY ; 
    15 SM0UW-AS-OF-MM SM0UW-AS-OF-MM ; 
    15 SM0UW-AS-OF-DD SM0UW-AS-OF-DD ; 
  10 SM0UW-DATE SM0UW-DATE ; 
    15 SM0UW-YY SM0UW-YY ; 
    15 SM0UW-MM SM0UW-MM ; 
    15 SM0UW-DD SM0UW-DD ; 
  10 SM0UW-AGCYID SM0UW-AGCYID ; 
  10 SM0UW-SEL SM0UW-SEL [12] ; 
  10 SM0UW-XROCD SM0UW-XROCD ; 
  10 SM0UW-REPID SM0UW-REPID ; 
  10 SM0UW-REPID-CHA SM0UW-REPID-CHA ; 
    15 SM0UW-REPID-NUM SM0UW-REPID-NUM ; 
  10 * char(20) ; 
    15 CAITEM CAITEM ; 
      20 SM-SAGCY-ID SM-SAGCY-ID ; 
      20 * char(1) ; 
      20 SM0UW-SM-SREP-ID SM0UW-SM-SREP-ID ; 
      20 * char(11) ; 
end // end SM0UW01

//*** RECORD=SM0UW02 ****
// this is the working storage table for sm0u
// 
// maintenance:
// init     date     reason
// ------  --------  ------------------------------------------
// AIVERS  08/18/92  created
// ***********************
Record SM0UW02 type basicRecord
  10 SM0UW-GROUP SM0UW-GROUP [200] ; 
    15 SM0UW-RMT-LIT SM0UW-RMT-LIT ; 
    15 SM0UW-RMT-PRTR SM0UW-RMT-PRTR ; 
    15 SM0UW-LOC SM0UW-LOC ; 
end // end SM0UW02

//*** RECORD=SM0UW03 ****
// xp0aw01 is used in conjunction with xp0at01 and process
// xp0a001. xp0awfld is given a map field and xp0awefl is used
// to pass back the results of the field test.
// 
//           xp0awfld - holds map field to be checked
//           xp0awcha - is a redefinition of xp0awfld
//           xp0awsub - subscript for xp0awcha
//           xp0awefl - error flag if non numeric found
// ***********************
Record SM0UW03 type basicRecord
  10 SM0UW-FIELD SM0UW-FIELD ; 
    15 SM0UW-BYTE SM0UW-BYTE [9] ; 
  10 SM0UW-SUB SM0UW-SUB ; 
  10 SM0UW-NUM-FND-FL SM0UW-NUM-FND-FL ; 
  10 SM0UW-BLANK-FND-FL SM0UW-BLANK-FND-FL ; 
end // end SM0UW03

// error flag
DataItem SM0UW-AGCY-ERROR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SM0UW-AGCYID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SM0UW-AS-OF-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SM0UW-AS-OF-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SM0UW-AS-OF-DT num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SM0UW-AS-OF-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SM0UW-AS-OF-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error flg for non numeric flds
DataItem SM0UW-BLANK-FND-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SM0UW-BOT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// redefinition of xp0awfld
DataItem SM0UW-BYTE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen top
DataItem SM0UW-COMPUTED-RQST num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen top
DataItem SM0UW-CTR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SM0UW-CURR-IDX num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SM0UW-DATE num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SM0UW-DD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen top
DataItem SM0UW-ENTRY-CTR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error flag
DataItem SM0UW-EOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error flag
DataItem SM0UW-ERROR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// edit field for map field
DataItem SM0UW-FIELD char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SM0UW-GROUP char(27)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SM0UW-LOC char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen top
DataItem SM0UW-MAX-NBR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SM0UW-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error flg for non numeric flds
DataItem SM0UW-NUM-FND-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SM0UW-PREV-IDX num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SM0UW-RCD num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error flag
DataItem SM0UW-RCD-CHGD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SM0UW-REP-ERROR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SM0UW-REPID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SM0UW-REPID-CHA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SM0UW-REPID-NUM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SM0UW-RMT-LIT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SM0UW-RMT-PRTR char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen current index
DataItem SM0UW-SCRN-IDX num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen top
DataItem SM0UW-SCRN-TOP num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SM0UW-SEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SM0UW-SM-SREP-ID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// subscript for xp0awcha
DataItem SM0UW-SUB smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SM0UW-TEMP-IDX num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// screen current index
DataItem SM0UW-WS-IDX num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error flag
DataItem SM0UW-XRO-ERROR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen top
DataItem SM0UW-XRO-IDX num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem SM0UW-XROCD char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem SM0UW-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

