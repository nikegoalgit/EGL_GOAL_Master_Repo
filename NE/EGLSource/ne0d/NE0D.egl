package ne0d;

import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPNL-006;
import corpcom3.XPNL002;
import corpcom3.XPNL003;
import corpcom3.XPNL005;
import corpcom3.XPXGP01;
import corpcom3.XPXX001;
import corpcom4.XSENTRY;
import corpcom4.XSNLS01;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom5.GLAENT;
import corpcom5.GLANTAC;
import corpcom5.GLAPRJ;
import corpcom5.GLARCID;
import corpcom5.GLASUB;
import corpcom6.SQLCA;
import corpx1.XAUTBL;
import corpx1.XCTTBL;
import corpx1.XDMCD;
import corpx1.XGPCD;
import corpx1.XGPTBL;
import corpx1.XQATBL;
import corpx1.XUMTBL;
import corpx1.XWHTBL;
import corpx2.XQACD;
import corpx2.XUMCD;
import corpx2.XWHCD;
import corpz3.ZPSCD;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import corpz3.ZZZSDT;
import fy.common.FY1FCTYC;
import ku.common.KUCCOID;
import ku.common.KUCREC;
import ku.common.KUMSTRID;
import ku.common.KUNREC;
import ne.common.*;
import ni.common.NIDIVCID;
import nl.common.NL-PMT-MTHD-CD;
import nl.common.NLXREC;
import op.common.OP1CUOID;
import op.common.OP1NORID;
import op.common.OP1PARTN;
import op.common.OP1REC;
import op.common.OP2REC;
import pc.common.PC2CUXID;
import pc.common.PC2REC;
import pc.common.PC3PONBR;
import pc.common.PC3REC;
import pc.common.PC6REC;
import pg.common.PG2REC;
import sy.common.SY1REC;
import sy.common.SY1STNBR;
import sy.common.SY2CLRID;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
import ts.common.TSFSHPID;
import vv.common.VINTGL02;
import vv.common.VNEACR01;
import vv.common.VNESCO01;
import vv.common.VNLGLA01;
import vv.common.VPIHDR01;
import vv.common.VPIITM01;
//*** PROGRAM=NE0D ****
// ************************************************************
// 
//   NE0D - International Sales Cutoff Inventory Maintenence
//   -------------------------------------------------------
// This application will be used to maintain the VNEINV01
// table.  It will allow the client to add change or delete
// rows.
// 
// Maintenance
//   Date     User Id  Remarks
// --------   -------  ----------------------------------------
// 02/15/94   kshaw    Created.
// 05/15/94   kshaw    ALLOW TO DISPLAY ALL STAT CODES.
// 06/01/94   kshaw    UoM derive or validate
// 06/28/94   kshaw    modify reclass logic to allow same SO
//                     but different gl codes.
// 07-07-94   kshaw    get cust from so or invoice, if not
//                     entered.
// 12-07-94   ahowar   ne0ds-updt-vneinv used 99 a tsfshpid
//                     instead of working storage also
//                     ne-ivc-gl-post-mo
// 12-13-94   ahowar   fix 0 or wrong post month on reclass and
//                     write off logic.
// 01-13-95   ahowar   fix blank gl code when using pf20 to add
//                     an inventory record.
// 04-19-95   ahowar   ne0d-220 validate reclass customer.
//                     Added edit to verify that comp customer
//                     is setup for gpc. dproft.vintgl01
//                     ne0c had the same edit added. ne1060
//                     batch would abend becuase user was using
//                     a comp customer that was not setup in
//                     profitability to support the gpc of the
//                     product being reclassed.
// 06-13-95    kshaw   modified build-temp to wild card or
//                     limit cursor based on cust, so, or gpc
// --------   -------  ----------------------------------------
// 02-25-98    ngango  Y2K Modifications - Changed Statement gr
//                     oup NE0DS-FMAT-POST-MO, and Map NE0DM101
//                     NE0DM102,NE0DM103,NE0D200, and NE0D300
//                     to remove leading zero suppressions of
//                     date fields.
// 09/01/00   RGOMAT   Code has been modified for x-ref field
//                     Change in dprodc.vprdcu table
// 
// --------   -------  ----------------------------------------
// *********************
Program NE0D type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "NE00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  KUNREC KUNREC; // record
  NE0DW01 NE0DW01; // record
  NE0DW02 NE0DW02; // record
  NEWREC NEWREC; // record
  NLXREC NLXREC; // record
  OP1REC OP1REC; // record
  OP2REC OP2REC; // record
  PC2REC PC2REC; // record
  PC3REC PC3REC; // record
  PC6REC PC6REC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VINTGL02 VINTGL02; // record
  VNEACR01 VNEACR01; // record
  VNEINV01 VNEINV01; // record
  VNESCO01 VNESCO01; // record
  VNLGLA01 VNLGLA01; // record
  VPIHDR01 VPIHDR01; // record
  VPIITM01 VPIITM01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XAUTBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use NE0DM.NE0DM101,  // forms
      NE0DM.NE0DM102, 
      NE0DM.NE0DM103, 
      NE0DM.NE0DM200, 
      NE0DM.NE0DM300,
      NE0DM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    NE0D-000: NE0D-000();


    exit program;



  end // end main
end // end NE0D

// application main logic
Function NE0D-000()
   /* -----------------------------------------------------------*/
      /* This is the "main logic" for the application.*/

      /* xsentry checks to ensure that this application was*/
            /* entered from another csp application.*/

   /* -----------------------------------------------------------*/

  NLXREC.NLXCPROC = "NE0D-000";
  COMMAREA.CACURRAP = "NE0D";

  NE0D-001(); /* Initilize the application*/

  NLXREC.NLXEOAF = "N"; /* set end-of-application flag to 'no'*/

  while (NLXREC.NLXEOAF == "N") /* while not end-of-aplication*/
    NE0D-050(); /* screen branch control*/
  end

  XSPF4();

end // end NE0D-000

// Initialize application
Function NE0D-001()
   /* -----------------------------------------------------------*/
         /* Initialize the application working storage*/

   /* -----------------------------------------------------------*/

  NLXREC.NLXCPROC = "NE0D-001";

  converseVar.commitOnConverse = 1; /* Force db2 to commit on each screen*/
                                  /* converse*/
  VGVar.handleHardIOErrors = 1; /* Return control to program if hard db2*/
                                  /* error*/

  XSENTRY(); /* Check entry thru main menu*/
  XSSEGTR(); /* Set segmented transaction id*/

  set SQLCA empty; /* Clear out the SQL return record*/

  set ERRSQLCA empty; /* Clear out the "common" error record*/

  set TA1REC empty; /* Clear out the "common" abend record*/

  set NEWREC empty; /* Clear out the "common" working*/
                                  /* storage*/
  set NLXREC empty; /* Clear out the "common" working*/
                                  /* storage*/

  set OP1REC empty; /* Clear vorhdr01*/

  set OP2REC empty; /* Clear vitem0r1*/

  set VPIHDR01 empty; /* Clear vpihdr01*/

  set VPIITM01 empty; /* Clear vpiitm01*/

  set NE0DW01 empty; /* Clear application working storage*/
                                  /* for map 100*/

  set NE0DW02 empty; /* Clear application working storage*/

  if (COMMAREA.CAFRMSYS != "NE")
    COMMAREA.CAUSERA = " ";
  end

  NE0DW-02-ENTERFL = "N"; /* first time for map 200*/
  NE0DW-02-BUILD-TEMP-FL = "Y"; /* build temp storage*/
  NLXREC.NLXEOAF = "N"; /* set end-of-application flag 'no'*/
  NLXREC.NLXERRF = "N"; /* set error-flag to 'no'*/
                                  /* allow to go to map200*/
  NE0DW-02-SIZE = 2034; /* record length used by temp storage*/

   /* ------------------------------------------------------*/
    /* Set up working-storage array of screen names*/
   /* ------------------------------------------------------*/


  NLXREC.NLXSNAME[1] = "NE0DM101";
  NLXREC.NLXSNAME[2] = "NE0DM102";
  NLXREC.NLXSNAME[3] = "NE0DM103";
  NLXREC.NLXSNAME[4] = "NE0DM200";
  NLXREC.NLXSNAME[5] = "NE0DM300";

   /* **********************************************/
   /* Was this application entered via 'fastpath'?*/
   /* not allowed*/
   /* **********************************************/

  if (COMMAREA.CAFROMAP == "NE0G"
   || COMMAREA.CAFROMAP == "NE0D") /* reentering after processing 200 or*/
  /* CONTINUE                         300 logic*/
  else
    COMMAREA.CATOAP = "NE0G";
    COMMAREA.CAUSERA = " ";
    XPNL002(); /* EXIT*/
  end

  NEWREC.NEW-GROUP = COMMAREA.CAUSERA;

  if (NEWREC.NEW-FROM-SCREEN > " ") /* passed in from commarea*/
    NLXREC.NLXCSCRN = NEWREC.NEW-FROM-SCREEN;
    NEWREC.NEW-FROM-SCREEN = " ";
  else
    NLXREC.NLXCSCRN = "NE0DM101"; /* go to map 101 Left first*/
  end



  NEW-FROM-APP = COMMAREA.CAFROMAP;

  COMMAREA.CATOAP = " ";
  COMMAREA.CAITEM = " ";

   /* *******************************/
   /* Refresh temp storage*/
   /* *******************************/

  NE0DS-DEL-TMP-STG(); /* delete temp*/

  NE0DW-HIGH-PAGE-NBR = 0; /* show page one*/
  NE0DW-CURR-PAGE-NBR = 1; /* show page one*/
  NE0DW-MAP-PAGE-NBR = 1;

  NE0DS-BUILD-TEMP();


end // end NE0D-001

// Screen branch control
Function NE0D-050()
   /* -----------------------------------------------------------*/
      /* Control process the application screen(s)*/

     /* Note that this process is being performed in a*/
     /* "while loop" until the end-of-application flag is set*/
     /* to 'y'.*/

   /* -----------------------------------------------------------*/

  NLXREC.NLXCPROC = "NE0D-050"; /* set current process name*/

  sysVar.arrayIndex = 0;
  NLXREC.NLXSCRNX = 0;

  if (NLXREC.NLXCSCRN in NLXREC.NLXSNAME)
     /* if current-screen-name is in the screen-array, then set*/
     /* the screen-index*/
    NLXREC.NLXSCRNX = sysVar.arrayIndex;
  end

  NLXREC.NLXEOSF = "N"; /* Set end-of-screen flag to 'no'*/
  NLXREC.NLXBLDSC = "Y"; /* Set build screen flag to 'yes'*/
  NLXREC.NLXERRF = "N"; /* Clear error flag*/
  converseLib.validationFailed(0);

  if (NEWREC.NEW-MSG-NBR > 0) /* passed in from commarea*/
    if (NEWREC.NEW-MSG-NBR == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(NEWREC.NEW-MSG-NBR);
    end
    NEWREC.NEW-MSG-NBR = 0;
  end


  if (NLXREC.NLXSCRNX == 1) /* If screen ne0dM101 LEFT*/
    while (NLXREC.NLXEOSF == "N") /* While not end-of-screen*/
      NE0D-10001();
    end
  else
    if (NLXREC.NLXSCRNX == 2) /* If screen ne0dM102 MIDDLE*/
      while (NLXREC.NLXEOSF == "N") /* While not end-of-screen*/
        NE0D-10002();
      end
    else
      if (NLXREC.NLXSCRNX == 3) /* If screen ne0dM103 RIGHT*/
        while (NLXREC.NLXEOSF == "N") /* While not end-of-screen*/
          NE0D-10003();
        end
      else
        if (NLXREC.NLXSCRNX == 4) /* If screen ne0dM200*/
          while (NLXREC.NLXEOSF == "N") /* While not end-of-screen*/
            NE0D-200();
          end
        else
          if (NLXREC.NLXSCRNX == 5) /* If screen ne0dM300*/
            while (NLXREC.NLXEOSF == "N") /* While not end-of-screen*/
              NE0D-300();
            end
          end
        end
      end
    end
  end


   /* at this point;*/
       /* if the end-of-application flag (nlxeoaf ) = 'n'*/
         /* the perform will return to the top of ne0d050...*/
       /* else*/
         /* the perform will auto return to ne0d000.*/


end // end NE0D-050

// process map  101
Function NE0D-10001()
   /* -----------------------------------------------------------*/
       /* Process screen NE0DM101  LEFT*/

     /* note - this process is being performed in a*/
        /* "while loop" from NE0D-050 until the end-of-screen*/
        /* flag (nlxeosfl) is set to 'y'.*/

   /* -----------------------------------------------------------*/

  NLXREC.NLXCPROC = "NE0D-10001";

  if (NLXREC.NLXBLDSC == "Y")
    NE0D-10101();
    NLXREC.NLXBLDSC = "N";
  end

  converse NE0DM101 ;

  NE0DM101.VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";


  NE0D-11001(); /* validate pf keys*/

  if (NLXREC.NLXERRF == "N") /* check for error*/
    NE0D-12001(); /* process entered option*/
  end

  if (NLXREC.NLXERRF == "N") /* check for error*/
    NE0D-13001(); /* determine next action...*/
  end


end // end NE0D-10001

// process map  102
Function NE0D-10002()
   /* -----------------------------------------------------------*/
       /* Process screen NE0DM101  LEFT*/

     /* note - this process is being performed in a*/
        /* "while loop" from NE0D-050 until the end-of-screen*/
        /* flag (nlxeosfl) is set to 'y'.*/

   /* -----------------------------------------------------------*/

  NLXREC.NLXCPROC = "NE0D-10002";

  if (NLXREC.NLXBLDSC == "Y")
    NE0D-10102();
    NLXREC.NLXBLDSC = "N";
  end

  converse NE0DM102 ;

  NE0DM101.VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";


  NE0D-11002(); /* validate pf keys*/

  if (NLXREC.NLXERRF == "N") /* check for error*/
    NE0D-12002(); /* process entered option*/
  end

  if (NLXREC.NLXERRF == "N") /* check for error*/
    NE0D-13002(); /* determine next action...*/
  end


end // end NE0D-10002

// process map  103
Function NE0D-10003()
   /* -----------------------------------------------------------*/
       /* Process screen NE0DM101  LEFT*/

     /* note - this process is being performed in a*/
        /* "while loop" from NE0D-050 until the end-of-screen*/
        /* flag (nlxeosfl) is set to 'y'.*/

   /* -----------------------------------------------------------*/

  NLXREC.NLXCPROC = "NE0D-10003";

  if (NLXREC.NLXBLDSC == "Y")
    NE0D-10103();
    NLXREC.NLXBLDSC = "N";
  end

  converse NE0DM103 ;

  NE0DM101.VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";


  NE0D-11003(); /* validate pf keys*/

  if (NLXREC.NLXERRF == "N") /* check for error*/
    NE0D-12003(); /* process entered option*/
  end

  if (NLXREC.NLXERRF == "N") /* check for error*/
    NE0D-13003(); /* determine next action...*/
  end


end // end NE0D-10003

// Build screen 101
Function NE0D-10101()
   /* **********************************************************/
   /* Get header fields for ne0dM101 & initialize temp storage*/
   /* **********************************************************/


  NLXREC.NLXCPROC = "NE0D-101";

  converseLib.clearScreen();
  set NE0DM101 initial;

  NE0DM101.XXXRVNBR = "00"; /* revision nbr*/
  NE0DM101.XXXMAPNM = "NE0DM101"; /* map name*/
  NE0DM101.XXXPRCNM = "NE0D101"; /* process name*/
  NE0DM101.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/

   /* **************************************************************/
   /* Build header of MAP101 from passed fields in NEWREC*/
   /* **************************************************************/

  NE0DM-101-KUCCOID = NEWREC.NEW-KUCCOID;
  NE0DM-101-KUCCONM = NEWREC.NEW-KUCCONM;
  NE0DM-101-POSTING-MONTH = NEWREC.NEW-POSTING-MONTH;
      /* format order number*/
  NE0DW-OP1CUOID = NEWREC.NEW-CUST-ORDID;
  NE0DW-OP1NORID = NEWREC.NEW-NIKE-ORDID;

  move NE0DW-ORDER-NBR to NE0DM-101-ORDER-NUMBER withV60Compat;

  NE0DM-101-XGPCD = NEWREC.NEW-XGPCD;
      /* format style*/
  if (NEWREC.NEW-STYLE-CD == " ")
    NE0DW-STYLE = " ";
  else
    NE0DW-SY1STNBR = NEWREC.NEW-STYLE-CD;
    NE0DW-HYPHEN-1 = "-";
    NE0DW-SY2CLRID = NEWREC.NEW-COLOR-CD;
    NE0DW-HYPHEN-2 = "-";
    NE0DW-XDMCD = NEWREC.NEW-DIM-CD;
  end

  move NE0DW-STYLE to NE0DM-101-STYLE withV60Compat;

  NE0DM-101-QUALITY-CD = NEWREC.NEW-QUALITY-CD;

  NE0DS-BUILD-MAP101();


end // end NE0D-10101

// Build screen 102
Function NE0D-10102()
   /* ***************************************************/
   /* Get header fields for ne0dM102 & get temp storage*/
   /* ***************************************************/


  NLXREC.NLXCPROC = "NE0D-102";

  converseLib.clearScreen();
  set NE0DM102 initial;

  NE0DM102.XXXRVNBR = "00"; /* revision nbr*/
  NE0DM102.XXXMAPNM = "NE0DM102"; /* map name*/
  NE0DM102.XXXPRCNM = "NE0D102"; /* process name*/
  NE0DM102.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/

   /* **************************************************************/
   /* Build header of MAP102 from passed fields in NEWREC*/
   /* **************************************************************/

  NE0DM-102-KUCCOID = NEWREC.NEW-KUCCOID;
  NE0DM-102-KUCCONM = NEWREC.NEW-KUCCONM;
  NE0DM-102-POSTING-MONTH = NEWREC.NEW-POSTING-MONTH;
      /* format order number*/
  NE0DW-OP1CUOID = NEWREC.NEW-CUST-ORDID;
  NE0DW-OP1NORID = NEWREC.NEW-NIKE-ORDID;

  move NE0DW-ORDER-NBR to NE0DM-102-ORDER-NUMBER withV60Compat;

  NE0DM-102-XGPCD = NEWREC.NEW-XGPCD;
      /* format style*/
  if (NEWREC.NEW-STYLE-CD == " ")
    NE0DW-STYLE = " ";
  else
    NE0DW-SY1STNBR = NEWREC.NEW-STYLE-CD;
    NE0DW-HYPHEN-1 = "-";
    NE0DW-SY2CLRID = NEWREC.NEW-COLOR-CD;
    NE0DW-HYPHEN-2 = "-";
    NE0DW-XDMCD = NEWREC.NEW-DIM-CD;
  end
  move NE0DW-STYLE to NE0DM-102-STYLE withV60Compat;

  NE0DM-102-QUALITY-CD = NEWREC.NEW-QUALITY-CD;

  NE0DS-BUILD-MAP102();


end // end NE0D-10102

// Build screen 102
Function NE0D-10103()
   /* **************************************/
   /* Get header fields for ne0dM103     **/
   /* **************************************/


  NLXREC.NLXCPROC = "NE0D-103";

  converseLib.clearScreen();
  set NE0DM103 initial;

  NE0DM103.XXXRVNBR = "00"; /* revision nbr*/
  NE0DM103.XXXMAPNM = "NE0DM103"; /* map name*/
  NE0DM103.XXXPRCNM = "NE0D103"; /* process name*/
  NE0DM103.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/

   /* **************************************************************/
   /* Build header of MAP103 from passed fields in NEWREC*/
   /* **************************************************************/

  NE0DM-103-KUCCOID = NEWREC.NEW-KUCCOID;
  NE0DM-103-KUCCONM = NEWREC.NEW-KUCCONM;
  NE0DM-103-POSTING-MONTH = NEWREC.NEW-POSTING-MONTH;
      /* format order number*/
  NE0DW-OP1CUOID = NEWREC.NEW-CUST-ORDID;
  NE0DW-OP1NORID = NEWREC.NEW-NIKE-ORDID;

  move NE0DW-ORDER-NBR to NE0DM-103-ORDER-NUMBER withV60Compat;

  NE0DM-103-XGPCD = NEWREC.NEW-XGPCD;
      /* format style*/
  if (NEWREC.NEW-STYLE-CD == " ")
    NE0DW-STYLE = " ";
  else
    NE0DW-SY1STNBR = NEWREC.NEW-STYLE-CD;
    NE0DW-HYPHEN-1 = "-";
    NE0DW-SY2CLRID = NEWREC.NEW-COLOR-CD;
    NE0DW-HYPHEN-2 = "-";
    NE0DW-XDMCD = NEWREC.NEW-DIM-CD;
  end
  move NE0DW-STYLE to NE0DM-103-STYLE withV60Compat;

  NE0DM-103-QUALITY-CD = NEWREC.NEW-QUALITY-CD;

  NE0DS-BUILD-MAP103();


end // end NE0D-10103

// Validate PF keys act on some
Function NE0D-11001()
   /* -----------------------------------------------------------*/
     /* Validate PF keys; act on 1, 3, 4, 7, 8, 11, 12, 15, 18,*/
                                 /* 20.*/
     /* Active PF keys: all above and Enter*/
   /* -----------------------------------------------------------*/

  NLXREC.NLXCPROC = "NE0D-11001";

  set NE0DM101.CATOAP initialAttributes;
  set NE0DM101.CAITEM initialAttributes;

   /* ***********************************/
      /* check for security level*/
   /* ***********************************/

   /* IF COMMAREA.CACLVL(4) = 'Y';*/
    /* continue*/
   /* ELSE;*/
   /* IF EZEAID IS PF12*/
   /* OR EZEAID IS PF15*/
   /* OR EZEAID IS PF18*/
   /* OR EZEAID IS PF20;*/
   /* MOVE 17 TO EZEMNO;           /* not authorized*/
   /* MOVE 'Y' TO NLXREC.NLXERRF;*/
   /* EZERTN;*/
   /* END;*/
   /* END;*/

   /* ***********************************/
      /* check for fastpath option/item*/
   /* ***********************************/

  if (NE0DM101.CATOAP != " ") /* if fastpath option entered,*/
    if (converseVar.eventKey is enter)
      COMMAREA.CATOAP = NE0DM101.CATOAP;
      COMMAREA.CAITEM = NE0DM101.CAITEM;
      COMMAREA.CAUSERA = " ";
      XPNL002(); /* exit application*/
      set NE0DM101.CATOAP cursor, bold; /* exit failed*/
      return;
    end
  end

   /* ***********************************/
      /* check for help key option*/
   /* ***********************************/

  if (converseVar.eventKey is pf1) /* skip edit/updt, go to 'help'*/
    XSNLS01(); /* exit*/
  end

   /* ***********************************/
      /* check for previous level option*/
   /* ***********************************/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "NE0G";
    COMMAREA.CAUSERA = NEWREC.NEW-GROUP;
    XPNL002(); /* exit*/
  end

   /* ***********************************/
      /* check for previous master level option*/
   /* ***********************************/

  if (converseVar.eventKey is pf4) /* go to master menu*/
    COMMAREA.CAUSERA = " "; /* exit*/
    XSPF4();
  end


  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf11
   || converseVar.eventKey is pf12
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pf20
   || converseVar.eventKey is enter)
    return;
  end

  NLXREC.NLXERRF = "Y"; /* invalid Pf key*/
  converseLib.validationFailed(2);


end // end NE0D-11001

// Validate PF keys act on some
Function NE0D-11002()
   /* -----------------------------------------------------------*/
     /* Validate PF keys; act on 1, 3, 7, 8,10, 11, 12, 15, 18,*/
                                 /* 20.*/
     /* Active PF keys: all above and Enter*/
   /* -----------------------------------------------------------*/

  NLXREC.NLXCPROC = "NE0D-11002";

  set NE0DM102.CATOAP initialAttributes;
  set NE0DM102.CAITEM initialAttributes;

   /* ***********************************/
      /* check for security level*/
   /* ***********************************/

   /* IF COMMAREA.CACLVL(4) = 'Y';*/
    /* continue*/
   /* ELSE;*/
   /* IF EZEAID IS PF12*/
   /* OR EZEAID IS PF15*/
   /* OR EZEAID IS PF18*/
   /* OR EZEAID IS PF20;*/
   /* MOVE 17 TO EZEMNO;           /* not authorized*/
   /* MOVE 'Y' TO NLXREC.NLXERRF;*/
   /* EZERTN;*/
   /* END;*/
   /* END;*/

   /* ***********************************/
      /* check for fastpath option/item*/
   /* ***********************************/

  if (NE0DM102.CATOAP != " ") /* if fastpath option entered,*/
    if (converseVar.eventKey is enter)
      COMMAREA.CATOAP = NE0DM102.CATOAP;
      COMMAREA.CAITEM = NE0DM102.CAITEM;
      COMMAREA.CAUSERA = " ";
      XPNL002(); /* exit application*/
      set NE0DM102.CATOAP cursor, bold; /* exit failed*/
      return;
    end
  end

   /* ***********************************/
      /* check for help key option*/
   /* ***********************************/

  if (converseVar.eventKey is pf1) /* skip edit/updt, go to 'help'*/
    XSNLS01(); /* exit*/
  end

   /* ***********************************/
      /* check for previous level option*/
   /* ***********************************/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "NE0G";
    COMMAREA.CAUSERA = NEWREC.NEW-GROUP;
    XPNL002(); /* exit*/
  end

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf10
   || converseVar.eventKey is pf11
   || converseVar.eventKey is pf12
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pf20
   || converseVar.eventKey is enter)
    return;
  end

  NLXREC.NLXERRF = "Y"; /* invalid Pf key*/
  converseLib.validationFailed(2);


end // end NE0D-11002

// Validate PF keys act on some
Function NE0D-11003()
   /* -----------------------------------------------------------*/
     /* Validate PF keys; act on 1, 3, 7, 8, 10, 12, 15, 18,*/
                                 /* 20.*/
     /* Active PF keys: all above and Enter*/
   /* -----------------------------------------------------------*/

  NLXREC.NLXCPROC = "NE0D-11003";

  set NE0DM103.CATOAP initialAttributes;
  set NE0DM103.CAITEM initialAttributes;

   /* ***********************************/
      /* check for security level*/
   /* ***********************************/

   /* IF COMMAREA.CACLVL(4) = 'Y';*/
    /* continue*/
   /* ELSE;*/
   /* IF EZEAID IS PF12*/
   /* OR EZEAID IS PF15*/
   /* OR EZEAID IS PF18*/
   /* OR EZEAID IS PF20;*/
   /* MOVE 17 TO EZEMNO;           /* not authorized*/
   /* MOVE 'Y' TO NLXREC.NLXERRF;*/
   /* EZERTN;*/
   /* END;*/
   /* END;*/

   /* ***********************************/
      /* check for fastpath option/item*/
   /* ***********************************/

  if (NE0DM103.CATOAP != " ") /* if fastpath option entered,*/
    if (converseVar.eventKey is enter)
      COMMAREA.CATOAP = NE0DM103.CATOAP;
      COMMAREA.CAITEM = NE0DM103.CAITEM;
      COMMAREA.CAUSERA = " ";
      XPNL003(); /* exit application*/
      set NE0DM103.CATOAP cursor, bold; /* exit failed*/
      return;
    end
  end

   /* ***********************************/
      /* check for help key option*/
   /* ***********************************/

  if (converseVar.eventKey is pf1) /* skip edit/updt, go to 'help'*/
    XSNLS01(); /* exit*/
  end

   /* ***********************************/
      /* check for previous level option*/
   /* ***********************************/

  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "NE0G";
    COMMAREA.CAUSERA = NEWREC.NEW-GROUP;
    XPNL002(); /* exit*/
  end

  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf10
   || converseVar.eventKey is pf12
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pf20
   || converseVar.eventKey is enter)
    return;
  end

  NLXREC.NLXERRF = "Y"; /* invalid Pf key*/
  converseLib.validationFailed(2);


end // end NE0D-11003

// Edit Enterable fields
Function NE0D-12001()
   /* ************************************/
   /* Edit Screen Entries*/
   /* ************************************/

  NLXREC.NLXCPROC = "NE0D-12001";

  NE0DW-02-INDEX = 14; /* map index*/

   /* ********************************************************************/
   /* There are 14 occurances of items on each map.  The edits are per-*/
   /* formed in a while loop map the bottom up.*/
   /* ********************************************************************/

  while (NE0DW-02-INDEX > 0)

     /* Move select field to working storage, all other map fields*/
     /* are display only and are already in temp storage.*/

   /* ne0dm-101-select*/
    NE0DW-01-SEL[NE0DW-02-INDEX] = NE0DM101.NE0DM-101-SEL[NE0DW-02-INDEX];

    /* ***************************/
    /* Edit only enterable Field*/
    /* ***************************/

    if (NE0DM101.NE0DM-101-SEL[NE0DW-02-INDEX] == "S"
     || NE0DM101.NE0DM-101-SEL[NE0DW-02-INDEX] == " ")
      if (NE0DW-01-SY1STNBR[NE0DW-02-INDEX] > " ")
        if (NE0DW-01-NE-STAT-CD[NE0DW-02-INDEX] == "AC"
         || NE0DW-01-NE-STAT-CD[NE0DW-02-INDEX] == "RC")
          set NE0DM101.NE0DM-101-SEL[NE0DW-02-INDEX] initialAttributes;
        else
          set NE0DM101.NE0DM-101-SEL[NE0DW-02-INDEX] skip, invisible;
        end
      else
        set NE0DM101.NE0DM-101-SEL[NE0DW-02-INDEX] skip, invisible;
      end
    else
      set NE0DM101.NE0DM-101-SEL[NE0DW-02-INDEX] bold, modified, cursor;
      converseLib.validationFailed(18);
      NLXREC.NLXERRF = "Y";
    end

    NE0DW-02-INDEX = NE0DW-02-INDEX - 1;
  end /* END WHILE*/


    /* edit map page*/

  if (NE0DM101.NE0DM-FM-PAGE != NE0DW-CURR-PAGE-NBR) /* fm-page ^= temp-page*/
    NE0DW-MAP-PAGE-NBR = NE0DM101.NE0DM-FM-PAGE; /* move due to*/
    NE0DS-CK-PAGE-NBR(); /* this group called map three maps*/
    if (NLXREC.NLXERRF == "Y") /* maps 101, 102, 103*/
      set NE0DM101.NE0DM-FM-PAGE cursor, bold, modified;
    else
      set NE0DM101.NE0DM-FM-PAGE initialAttributes;
    end
  end


end // end NE0D-12001

// Edit Enterable fields
Function NE0D-12002()
   /* ************************************/
   /* Edit Screen Entries*/
   /* ************************************/

  NLXREC.NLXCPROC = "NE0D-12002";

  NE0DW-02-INDEX = 14; /* map index*/

   /* ********************************************************************/
   /* There are 14 occurances of items on each map.  The edits are per-*/
   /* formed in a while loop map the bottom up.*/
   /* ********************************************************************/

  while (NE0DW-02-INDEX > 0)

     /* Move select field to working storage, all other map fields*/
     /* are display only and are already in temp storage.*/

   /* ne0dm-102-select*/
    NE0DW-01-SEL[NE0DW-02-INDEX] = NE0DM102.NE0DM-102-SEL[NE0DW-02-INDEX];

    /* ***************************/
    /* Edit only enterable Field*/
    /* ***************************/

    if (NE0DM102.NE0DM-102-SEL[NE0DW-02-INDEX] == "S"
     || NE0DM102.NE0DM-102-SEL[NE0DW-02-INDEX] == " ")
      if (NE0DW-01-SY1STNBR[NE0DW-02-INDEX] > " ")
        if (NE0DW-01-NE-STAT-CD[NE0DW-02-INDEX] == "AC"
         || NE0DW-01-NE-STAT-CD[NE0DW-02-INDEX] == "RC")
          set NE0DM102.NE0DM-102-SEL[NE0DW-02-INDEX] initialAttributes;
        else
          set NE0DM102.NE0DM-102-SEL[NE0DW-02-INDEX] skip, invisible;
        end
      else
        set NE0DM102.NE0DM-102-SEL[NE0DW-02-INDEX] skip, invisible;
      end
    else
      set NE0DM102.NE0DM-102-SEL[NE0DW-02-INDEX] bold, modified, cursor;
      converseLib.validationFailed(18);
      NLXREC.NLXERRF = "Y";
    end

    NE0DW-02-INDEX = NE0DW-02-INDEX - 1;
  end /* END WHILE*/


   /* edit map page*/

  if (NE0DM102.NE0DM-FM-PAGE != NE0DW-CURR-PAGE-NBR)
    NE0DW-MAP-PAGE-NBR = NE0DM102.NE0DM-FM-PAGE; /* move due to*/
    NE0DS-CK-PAGE-NBR(); /* this group called map three maps*/
    if (NLXREC.NLXERRF == "Y") /* maps 101, 102, 103*/
      set NE0DM102.NE0DM-FM-PAGE cursor, bold, modified;
    else
      set NE0DM102.NE0DM-FM-PAGE initialAttributes;
    end
  end


end // end NE0D-12002

// Edit Enterable fields
Function NE0D-12003()
   /* ************************************/
   /* Edit Screen Entries*/
   /* ************************************/

  NLXREC.NLXCPROC = "NE0D-12003";

  NE0DW-02-INDEX = 14; /* map index*/

   /* ********************************************************************/
   /* There are 14 occurances of items on each map.  The edits are per-*/
   /* formed in a while loop map the bottom up.*/
   /* ********************************************************************/

  while (NE0DW-02-INDEX > 0)

     /* Move select field to working storage, all other map fields*/
     /* are display only and are already in temp storage.*/

   /* ne0dm-103-select*/
    NE0DW-01-SEL[NE0DW-02-INDEX] = NE0DM103.NE0DM-103-SEL[NE0DW-02-INDEX];

    /* ***************************/
    /* Edit only enterable Field*/
    /* ***************************/

    if (NE0DM103.NE0DM-103-SEL[NE0DW-02-INDEX] == "S"
     || NE0DM103.NE0DM-103-SEL[NE0DW-02-INDEX] == " ")
      if (NE0DW-01-SY1STNBR[NE0DW-02-INDEX] > " ")
        if (NE0DW-01-NE-STAT-CD[NE0DW-02-INDEX] == "AC"
         || NE0DW-01-NE-STAT-CD[NE0DW-02-INDEX] == "RC")
          set NE0DM103.NE0DM-103-SEL[NE0DW-02-INDEX] initialAttributes;
        else
          set NE0DM103.NE0DM-103-SEL[NE0DW-02-INDEX] skip, invisible;
        end
      else
        set NE0DM103.NE0DM-103-SEL[NE0DW-02-INDEX] skip, invisible;
      end
    else
      set NE0DM103.NE0DM-103-SEL[NE0DW-02-INDEX] bold, modified, cursor;
      converseLib.validationFailed(18);
      NLXREC.NLXERRF = "Y";
    end

    NE0DW-02-INDEX = NE0DW-02-INDEX - 1;
  end /* END WHILE*/


   /* edit map page*/

  if (NE0DM103.NE0DM-FM-PAGE != NE0DW-CURR-PAGE-NBR)
    NE0DW-MAP-PAGE-NBR = NE0DM103.NE0DM-FM-PAGE; /* move due to*/
    NE0DS-CK-PAGE-NBR(); /* this group called map three maps*/
    if (NLXREC.NLXERRF == "Y") /* maps 101, 103, 103*/
      set NE0DM103.NE0DM-FM-PAGE cursor, bold, modified;
    else
      set NE0DM103.NE0DM-FM-PAGE initialAttributes;
    end
  end


end // end NE0D-12003

// Determine next action M101
Function NE0D-13001()
  /* **********************************/
  /* Determine curr action from hdr 1*/
  /* **********************************/

  NLXREC.NLXCPROC = "NE0D-13001";

  if (converseVar.eventKey is pf12) /* edit screen, make no updates*/
    converseLib.validationFailed(77); /* edits performed*/
    NLXREC.NLXERRF = "Y";
    return;
  end

  /* ************************************************/
  /* Update current page to the temp storage*/
  /* ************************************************/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf11
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pf20)
    if (NE0DW-HIGH-PAGE-NBR > 0)
      NE0DS-UPDT-TMP-STG();
    end
  end

  /* ****************************************************************/
  /* Enter only valid when fast pathing or going to a specific page*/
  /* ****************************************************************/

  if (converseVar.eventKey is enter)
    if (NE0DM101.NE0DM-FM-PAGE != NE0DW-CURR-PAGE-NBR)
      NE0DW-CURR-PAGE-NBR = NE0DM101.NE0DM-FM-PAGE;
      NE0DS-BUILD-MAP101(); /* build new page*/
      set NE0DM-101-SEL[1] cursor; /* set cursor to first row*/
      return;
    else
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(27); /* select a pf key to update the*/
                                   /* database*/
      return;
    end
  end

  if (NE0DM101.NE0DM-FM-PAGE != NE0DW-CURR-PAGE-NBR)
    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8) /* enter key not pressed*/
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(22); /* must press enter to go*/
      return; /* to a specific page on same map*/
    end
  end

  /* ********************/
  /* PF7 - page forward*/
  /* ********************/

  if (converseVar.eventKey is pf7)
    NE0DW-MAP-PAGE-NBR = NE0DM101.NE0DM-FM-PAGE;
    NE0DS-MAP101-PF7();
    return;
  end

  /* *****************/
  /* PF8 - page back*/
  /* *****************/

  if (converseVar.eventKey is pf8)
    NE0DW-MAP-PAGE-NBR = NE0DM101.NE0DM-FM-PAGE;
    NE0DS-MAP101-PF8();
    return;
  end

  /* ****************************************/
  /* PF11 PAGE RIGHT go to map 102 (middle)*/
  /* ****************************************/

  if (converseVar.eventKey is pf11)
    NE0DW-MAP-PAGE-NBR = NE0DM101.NE0DM-FM-PAGE;
    NLXREC.NLXCSCRN = "NE0DM102";
    NLXREC.NLXEOSF = "Y"; /* done with map101*/
    return;
  end

  /* ****************************************************/
  /* Validate temp storage for remainning*/
  /* PF keys: Search for at least 1 'S' in select field*/
  /* ****************************************************/

  if (converseVar.eventKey is pf15
   || converseVar.eventKey is pf18)
    NE0DS-VAL-SELECT();
    if (NLXREC.NLXERRF == "Y")
      return;
    end
  end

  /* ***************************/
  /* PF15 Reclass Inventory*/
  /* go to map 200*/
  /* ***************************/

  if (converseVar.eventKey is pf15)
    NLXREC.NLXCSCRN = "NE0DM200";
    NE0DW-02-FROM-SCREEN = "NE0DM101"; /* come back to this screen*/
    NLXREC.NLXEOSF = "Y"; /* done with map101*/
    return;
  end

  /* ***************************/
  /* PF18 Writeoff Inventory*/
  /* ***************************/

  if (converseVar.eventKey is pf18)
    NE0DS-WRITE-OFF();
    NLXREC.NLXCSCRN = "NE0DM101";
    NLXREC.NLXEOSF = "Y"; /* redisplay map 101 with updated*/
    return; /* temp storage*/
  end

  /* ***************************/
  /* PF20 Add Inventory*/
  /* go to map 300*/
  /* ***************************/

  if (converseVar.eventKey is pf20)
    NLXREC.NLXCSCRN = "NE0DM300";
    NE0DW-02-FROM-SCREEN = "NE0DM101"; /* come back to this screen*/
    NLXREC.NLXEOSF = "Y"; /* done with map101*/
    return;
  end


end // end NE0D-13001

// Determine next action M102
Function NE0D-13002()
  /* **********************************/
  /* Determine curr action*/
  /* **********************************/

  NLXREC.NLXCPROC = "NE0D-13002";

  if (converseVar.eventKey is pf12) /* edit screen, make no updates*/
    converseLib.validationFailed(77); /* edits performed*/
    NLXREC.NLXERRF = "Y";
    return;
  end

  /* ************************************************/
  /* Update current page to the temp storage*/
  /* ************************************************/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf10
   || converseVar.eventKey is pf11
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pf20)
    if (NE0DW-HIGH-PAGE-NBR > 0)
      NE0DS-UPDT-TMP-STG();
    end
  end

  /* ****************************************************************/
  /* Enter only valid when fast pathing or going to a specific page*/
  /* ****************************************************************/

  if (converseVar.eventKey is enter)
    if (NE0DM102.NE0DM-FM-PAGE != NE0DW-CURR-PAGE-NBR)
      NE0DW-CURR-PAGE-NBR = NE0DM102.NE0DM-FM-PAGE;
      NE0DS-BUILD-MAP102(); /* build new page*/
      set NE0DM-102-SEL[1] cursor; /* set cursor to first row*/
      return;
    else
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(27); /* select a pf key to update the*/
                                   /* database*/
      return;
    end
  end

  if (NE0DM102.NE0DM-FM-PAGE != NE0DW-CURR-PAGE-NBR)
    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      NLXREC.NLXERRF = "Y"; /* enter key not pressed*/
      converseLib.validationFailed(22); /* must press enter to go*/
      return; /* to a specific page on same map*/
    end
  end

  /* ********************/
  /* PF7 - page forward*/
  /* ********************/

  if (converseVar.eventKey is pf7)
    NE0DW-MAP-PAGE-NBR = NE0DM102.NE0DM-FM-PAGE;
    NE0DS-MAP102-PF7();
    return;
  end

  /* *****************/
  /* PF8 - page back*/
  /* *****************/

  if (converseVar.eventKey is pf8)
    NE0DW-MAP-PAGE-NBR = NE0DM102.NE0DM-FM-PAGE;
    NE0DS-MAP102-PF8();
    return;
  end

  /* **************************************/
  /* PF10 PAGE Left go to map 101 (left)*/
  /* **************************************/

  if (converseVar.eventKey is pf10)
    NE0DW-MAP-PAGE-NBR = NE0DM102.NE0DM-FM-PAGE;
    NLXREC.NLXCSCRN = "NE0DM101";
    NLXREC.NLXEOSF = "Y"; /* done with map102*/
    return;
  end

  /* *********************************************/
  /* PF11 PAGE Right go to map 103 (right)*/
  /* *********************************************/

  if (converseVar.eventKey is pf11)
    NE0DW-MAP-PAGE-NBR = NE0DM102.NE0DM-FM-PAGE;
    NLXREC.NLXCSCRN = "NE0DM103";
    NLXREC.NLXEOSF = "Y"; /* done with map102*/
    return;
  end

  /* ****************************************************/
  /* Validate temp storage for remainning*/
  /* PF keys: Search for at least 1 'S' in select field*/
  /* ****************************************************/

  if (converseVar.eventKey is pf15
   || converseVar.eventKey is pf18)
    NE0DS-VAL-SELECT();
    if (NLXREC.NLXERRF == "Y")
      return;
    end
  end


  /* ***************************/
  /* PF15 Reclass Inventory*/
  /* go to map 200*/
  /* ***************************/

  if (converseVar.eventKey is pf15)
    NLXREC.NLXCSCRN = "NE0DM200";
    NE0DW-02-FROM-SCREEN = "NE0DM102"; /* come back to this screen*/
    NLXREC.NLXEOSF = "Y"; /* done with map101*/
    return;
  end


  /* ***************************/
  /* PF18 Writeoff Inventory*/
  /* ***************************/

  if (converseVar.eventKey is pf18)
    NE0DS-WRITE-OFF();
    NLXREC.NLXCSCRN = "NE0DM102";
    NLXREC.NLXEOSF = "Y"; /* redisplay map 101 with updated*/
    return; /* temp storage*/
  end


  /* ***************************/
  /* PF20 Add Inventory*/
  /* go to map 300*/
  /* ***************************/

  if (converseVar.eventKey is pf20)
    NLXREC.NLXCSCRN = "NE0DM300";
    NE0DW-02-FROM-SCREEN = "NE0DM102"; /* come back to this screen*/
    NLXREC.NLXEOSF = "Y"; /* done with map101*/
    return;
  end


end // end NE0D-13002

// Determine next action M103
Function NE0D-13003()
  /* **********************************/
  /* Determine curr action from hdr 1*/
  /* **********************************/

  NLXREC.NLXCPROC = "NE0D-13003";

  if (converseVar.eventKey is pf12) /* edit screen, make no updates*/
    converseLib.validationFailed(77); /* edits performed*/
    NLXREC.NLXERRF = "Y";
    return;
  end

  /* ************************************************/
  /* Update current page to the temp storage*/
  /* ************************************************/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf10
   || converseVar.eventKey is pf15
   || converseVar.eventKey is pf18
   || converseVar.eventKey is pf20)
    if (NE0DW-HIGH-PAGE-NBR > 0)
      NE0DS-UPDT-TMP-STG();
    end
  end

  /* ****************************************************************/
  /* Enter only valid when fast pathing or going to a specific page*/
  /* ****************************************************************/

  if (converseVar.eventKey is enter)
    if (NE0DM103.NE0DM-FM-PAGE != NE0DW-CURR-PAGE-NBR)
      NE0DW-CURR-PAGE-NBR = NE0DM103.NE0DM-FM-PAGE;
      NE0DS-BUILD-MAP103(); /* build new page*/
      set NE0DM-103-SEL[1] cursor; /* set cursor to first row*/
      return;
    else
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(27); /* select a pf key to update the*/
                                   /* database*/
      return;
    end
  end

  if (NE0DM103.NE0DM-FM-PAGE != NE0DW-CURR-PAGE-NBR)
    if (converseVar.eventKey is pf7
     || converseVar.eventKey is pf8) /* enter key not pressed*/
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(22); /* must press enter to go*/
      return; /* to a specific page on same map*/
    end
  end

  /* ********************/
  /* PF7 - page forward*/
  /* ********************/

  if (converseVar.eventKey is pf7)
    NE0DW-MAP-PAGE-NBR = NE0DM103.NE0DM-FM-PAGE;
    NE0DS-MAP103-PF7();
    return;
  end

  /* *****************/
  /* PF8 - page back*/
  /* *****************/

  if (converseVar.eventKey is pf8)
    NE0DW-MAP-PAGE-NBR = NE0DM103.NE0DM-FM-PAGE;
    NE0DS-MAP103-PF8();
    return;
  end

  /* **************************************/
  /* PF10 PAGE Left  go to map 102 (left)*/
  /* **************************************/

  if (converseVar.eventKey is pf10)
    NE0DW-MAP-PAGE-NBR = NE0DM103.NE0DM-FM-PAGE;
    NLXREC.NLXCSCRN = "NE0DM102";
    NLXREC.NLXEOSF = "Y"; /* done with map103*/
    return;
  end

  /* ****************************************************/
  /* Validate temp storage for remainning*/
  /* PF keys: Search for at least 1 'S' in select field*/
  /* ****************************************************/

  if (converseVar.eventKey is pf15
   || converseVar.eventKey is pf18)
    NE0DS-VAL-SELECT();
    if (NLXREC.NLXERRF == "Y")
      return;
    end
  end


  /* ***************************/
  /* PF15 Reclass Inventory*/
  /* go to map 200*/
  /* ***************************/

  if (converseVar.eventKey is pf15)
    NLXREC.NLXCSCRN = "NE0DM200";
    NE0DW-02-FROM-SCREEN = "NE0DM103"; /* come back to this screen*/
    NLXREC.NLXEOSF = "Y"; /* done with map101*/
    return;
  end


  /* ***************************/
  /* PF18 Writeoff Inventory*/
  /* ***************************/

  if (converseVar.eventKey is pf18)
    NE0DS-WRITE-OFF();
    NLXREC.NLXCSCRN = "NE0DM103";
    NLXREC.NLXEOSF = "Y"; /* redisplay map 101 with updated*/
    return; /* temp storage*/
  end

  /* ***************************/
  /* PF20 Add Inventory*/
  /* go to map 300*/
  /* ***************************/

  if (converseVar.eventKey is pf20)
    NLXREC.NLXCSCRN = "NE0DM300";
    NE0DW-02-FROM-SCREEN = "NE0DM103"; /* come back to this screen*/
    NLXREC.NLXEOSF = "Y"; /* done with map101*/
    return;
  end


end // end NE0D-13003

// process map  200
Function NE0D-200()
   /* -----------------------------------------------------------*/
       /* Process screen NE0dM200*/

     /* note - this process is being performed in a*/
        /* "while loop" from NE0d050 until the end-of-screen*/
        /* flag is set to 'y'.*/

   /* -----------------------------------------------------------*/

  NLXREC.NLXCPROC = "NE0D-200";
  NE0DW-CURR-PAGE-NBR = 1;
  set NE0DW01 empty;
  NE0DW-02-RECLASS-COUNT = 0;

  while (NE0DW-CURR-PAGE-NBR <= NE0DW-HIGH-PAGE-NBR)

    NE0DM200.VAGen_EZEMSG = " ";
    NLXREC.NLXERRF = "N";

    NE0DS-GET-TMP-STG();

    NE0DW-02-INDEX = 1;

      /* process each row of temp storage*/

    while (NE0DW-02-INDEX <= 14 /* 14 rows per temp page*/
    )
      if (NE0DW-01-SEL[NE0DW-02-INDEX] == "S") /* row selected*/
        if (NLXREC.NLXERRF == "N")
          NE0DS-BUILD-MAP200();
        end

        converse NE0DM200 ;

        NE0DM200.VAGen_EZEMSG = " ";
        NLXREC.NLXERRF = "N";


        NE0D-210(); /* validate pf keys*/

        if (NLXREC.NLXERRF == "N") /* check for error*/
          NE0D-220(); /* process entered option*/
        end

        if (NLXREC.NLXERRF == "N") /* check for error*/
          NE0D-230(); /* determine curr action...*/
        end

      end /* end if row selected*/

      if (NLXREC.NLXERRF == "N") /* check for error*/
        NE0DW-02-INDEX = NE0DW-02-INDEX + 1; /* get next row*/
      end /* 14 rows per temp storage*/

    end /* 14 rows per temp storage*/

    NE0DW-CURR-PAGE-NBR = NE0DW-CURR-PAGE-NBR + 1; /* get curr page of temp*/
  end /* end while curr page <= high page*/

  if (NE0DW-02-RECLASS-COUNT > 0)
    NEWREC.NEW-MSG-NBR = 97; /* inventory has been reclassed*/
  end /* DID'T USE EZEMNO BECAUSE*/
                                   /* LEAVING APPLICATION AND REENTERING*/
                                   /* TO REBUILD TEMP STORAGE, BUT STILL*/
                                   /* WANT TO DISPLAY A MESSAGE UPON RETURN*/
                                  /* SEE 001 AND 050 LOGIC*/
                                  /* storage*/
  NEWREC.NEW-FROM-SCREEN = NE0DW-02-FROM-SCREEN;
                                   /* ** go back to calling map*/
  COMMAREA.CATOAP = "NE0D";
  COMMAREA.CAUSERA = NEWREC.NEW-GROUP;
  XPNL002();


end // end NE0D-200

// Validate PF keys act on some
Function NE0D-210()
   /* -----------------------------------------------------------*/
     /* Validate PF keys; act on 1, 3, 4,12*/

     /* Active PF keys: all above and Enter*/
   /* -----------------------------------------------------------*/

  NLXREC.NLXCPROC = "NE0D-210";

  set NE0DM200.CATOAP initialAttributes;
  set NE0DM200.CAITEM initialAttributes;

   /* ***********************************/
      /* check for fastpath option/item*/
   /* ***********************************/

  if (NE0DM200.CATOAP != " ") /* if fastpath option entered,*/
    if (converseVar.eventKey is enter)
      COMMAREA.CATOAP = NE0DM200.CATOAP;
      COMMAREA.CAITEM = NE0DM200.CAITEM;
      COMMAREA.CAUSERA = " ";
      XPNL002(); /* exit application*/
      set NE0DM200.CATOAP cursor, bold; /* exit failed*/
      return;
    end
  end

   /* ***********************************/
      /* check for help key option*/
   /* ***********************************/

  if (converseVar.eventKey is pf1) /* skip edit/updt, go to 'help'*/
    XSNLS01(); /* exit*/
  end

   /* ***********************************/
      /* check for previous level option*/
   /* ***********************************/

  if (converseVar.eventKey is pf3)
    NEWREC.NEW-FROM-SCREEN = NE0DW-02-FROM-SCREEN;
                                   /* ** go back to calling map*/
    COMMAREA.CATOAP = "NE0D";
    COMMAREA.CAUSERA = NEWREC.NEW-GROUP;
    XPNL002();
  end

   /* ***********************************/
      /* check for previous master level option*/
   /* ***********************************/

  if (converseVar.eventKey is pf4) /* go to master menu*/
    COMMAREA.CAUSERA = " "; /* exit*/
    XSPF4();
  end

  if (converseVar.eventKey is enter) /* valid non exit keys*/
    if (NE0DM200.NE0DM-200-RECLASS-KUCCOID == 0
     && NE0DM200.NE0DM-200-RECLASS-SO-OP1CUOID == 0
     && NE0DM200.NE0DM-200-RECLASS-NIDIVCID == 0)
      if (NE0DW-02-ENTERFL == "N") /* first pass - reset in 230*/
        NE0DW-02-ENTERFL = "Y"; /* do second pass*/
        NLXREC.NLXERRF = "Y";
        converseLib.validationFailed(99);
        return;
      else
        NE0DW-02-ENTERFL = "N"; /* reset the flag*/
      end
    end
    return;
  end

  if (converseVar.eventKey is pf12)
    return;
  end

  NLXREC.NLXERRF = "Y"; /* invalid Pf key*/
  converseLib.validationFailed(2);


end // end NE0D-210

// Edit Screen Entries
Function NE0D-220()
   /* ************************************/
   /* Edit Screen Entries*/
   /* ************************************/

  NLXREC.NLXCPROC = "NE0D-220";

  set KUCREC empty;
  set OP1REC empty;
  set OP2REC empty;
  set VPIHDR01 empty;
  set VPIITM01 empty;

   /* ****************************************/
   /* Edit GL Codes*/
   /* ****************************************/

  set NE0DM-200-GL-PROJ-ID initialAttributes;

  if (NE0DM-200-GL-ENTITY-ID == " "
   && NE0DM-200-GL-RSP-CTR-ID == " "
   && NE0DM-200-GL-NATRL-ACCT-ID == " "
   && NE0DM-200-GL-SUB-ACCT-ID == " ")
    set NE0DM-200-GL-ENTITY-ID initialAttributes;
    set NE0DM-200-GL-RSP-CTR-ID initialAttributes;
    set NE0DM-200-GL-NATRL-ACCT-ID initialAttributes;
    set NE0DM-200-GL-SUB-ACCT-ID initialAttributes;
  else
    if (NE0DM-200-GL-SUB-ACCT-ID == " ")
      NLXREC.NLXERRF = "Y";
      set NE0DM-200-GL-SUB-ACCT-ID cursor, modified, bold;
      converseLib.validationFailed(170); /* must be filled in*/
      return;
    else
      set NE0DM-200-GL-SUB-ACCT-ID initialAttributes;
    end

    if (NE0DM-200-GL-NATRL-ACCT-ID == " ")
      NLXREC.NLXERRF = "Y";
      set NE0DM-200-GL-NATRL-ACCT-ID cursor, bold;
      converseLib.validationFailed(170); /* must be filled in*/
      return;
    else
      set NE0DM-200-GL-NATRL-ACCT-ID initialAttributes;
    end

    if (NE0DM-200-GL-RSP-CTR-ID == " ")
      NLXREC.NLXERRF = "Y";
      set NE0DM-200-GL-RSP-CTR-ID cursor, modified, bold;
      converseLib.validationFailed(170); /* must be filled in*/
      return;
    else
      set NE0DM-200-GL-RSP-CTR-ID initialAttributes;
    end

    if (NE0DM-200-GL-SUB-ACCT-ID > " "
     && NE0DM-200-GL-NATRL-ACCT-ID > " "
     && NE0DM-200-GL-RSP-CTR-ID > " ")
      NE0DS-CHECK-200-GL(); /* validate*/
      if (NLXREC.NLXERRF == "Y")
        return;
      end
    end

    if (NE0DM-200-GL-ENTITY-ID == "500"
     || NE0DM-200-GL-ENTITY-ID == "101")
      set NE0DM-200-GL-ENTITY-ID initialAttributes;
    else
      NLXREC.NLXERRF = "Y";
      set NE0DM-200-GL-ENTITY-ID cursor, modified, bold;
      converseLib.validationFailed(171); /* invalid gl entity*/
      return;
    end

  end

    /* **************************/
    /* Validate Reclass Invoice*/
    /* **************************/

  if (NE0DM200.NE0DM-200-RECLASS-NIDIVCID == 0) /* blanks accepted*/
    set NE0DM200.NE0DM-200-RECLASS-NIDIVCID initialAttributes;
  else
    VPIHDR01.NIDIVCID = NE0DM200.NE0DM-200-RECLASS-NIDIVCID;
    NE0DS-S-VPIHDR01();
    if (SQLCA.VAGen_SQLCODE == 0) /* invoice must be active or reissued*/
      if (VPIHDR01.ZISCD == "AC"
       || VPIHDR01.ZISCD == "RI")
        set NE0DM200.NE0DM-200-RECLASS-NIDIVCID initialAttributes;
        if (NE0DM200.NE0DM-200-RECLASS-KUCCOID == 0)
          NE0DS-GET-CUST-IVC(); /* get cust using invoice*/
          if (NLXREC.NLXERRF == "Y")
            return;
          end
        end
        if (NE0DM200.NE0DM-200-RECLASS-SO-OP1CUOID == 0)
          NE0DS-GET-SO-IVC(); /* get SO using invoice*/
          if (NLXREC.NLXERRF == "Y")
            return;
          end
        end
      else
        set NE0DM200.NE0DM-200-RECLASS-NIDIVCID modified, cursor, bold;
        NLXREC.NLXERRF = "Y";
        converseLib.validationFailed(149); /* invalid invoice not active or*/
                                   /* reissued*/
        return;
      end
    else
      set NE0DM200.NE0DM-200-RECLASS-NIDIVCID modified, cursor, bold;
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(96);
      return;
    end
  end

    /* ****************/
    /* Validate S.O.*/
    /* ****************/

  if (NE0DM200.NE0DM-200-RECLASS-SO-OP1CUOID == 0) /* blanks accepted*/
    set NE0DM200.NE0DM-200-RECLASS-SO-OP1CUOID initialAttributes;
  else
    if (NE0DW-01-OP1CUOID[NE0DW-02-INDEX] == 
    NE0DM-200-RECLASS-SO-OP1CUOID)
      if (NE0DM-200-GL-ENTITY-ID == NE0DW-01-GLAENT[NE0DW-02-INDEX]
       && NE0DM-200-GL-RSP-CTR-ID == NE0DW-01-GLARCID[NE0DW-02-INDEX]
       && NE0DM-200-GL-NATRL-ACCT-ID == NE0DW-01-GLANTAC[NE0DW-02-INDEX]
       && NE0DM-200-GL-SUB-ACCT-ID == NE0DW-01-GLASUB[NE0DW-02-INDEX])
        set NE0DM-200-GL-ENTITY-ID cursor, modified, bold;
        set NE0DM-200-GL-RSP-CTR-ID modified, bold;
        set NE0DM-200-GL-NATRL-ACCT-ID modified, bold;
        set NE0DM-200-GL-SUB-ACCT-ID modified, bold;
        NLXREC.NLXERRF = "Y";
        converseLib.validationFailed(182); /* gl codes same*/
        return;
      else
        set NE0DM-200-GL-ENTITY-ID initialAttributes;
        set NE0DM-200-GL-RSP-CTR-ID initialAttributes;
        set NE0DM-200-GL-NATRL-ACCT-ID initialAttributes;
        set NE0DM-200-GL-SUB-ACCT-ID initialAttributes;
        /* continue -  SO's can be =, so long as gl code changes*/
      end
    else
      NE0DS-V-RECLASS-SO();
      if (NLXREC.NLXERRF == "Y")
        return;
      else
        if (NE0DM200.NE0DM-200-RECLASS-KUCCOID == 0)
          NE0DS-GET-CUST-SO(); /* get cust using SO*/
          if (NLXREC.NLXERRF == "Y")
            return;
          end
        end
      end

      /* **************************************/
      /* /   Validate reclass item is on S.O.*/
      /* **************************************/

      OP2REC.OP1PARTN = OP1REC.OP1PARTN;
      OP2REC.OP1CUOID = OP1REC.OP1CUOID;
      OP2REC.OP1NORID = OP1REC.OP1NORID;
      OP2REC.XGPCD = NE0DW-01-XGPCD[NE0DW-02-INDEX];
      OP2REC.SY1STNBR = NE0DW-01-SY1STNBR[NE0DW-02-INDEX];
      OP2REC.SY2CLRID = NE0DW-01-SY2CLRID[NE0DW-02-INDEX];
      OP2REC.XDMCD = NE0DW-01-XDMCD[NE0DW-02-INDEX];
      OP2REC.XQACD = NE0DW-01-XQACD[NE0DW-02-INDEX];
      NE0DS-S2-OP2REC(); /* declare cursor*/
      NE0DS-N2-OP2REC(); /* only need one hit*/
      if (SQLCA.VAGen_SQLCODE == 0)
        set NE0DM-200-RECLASS-SO-OP1CUOID initialAttributes;
        set NE0DM-200-RECLASS-SO-OP1NORID initialAttributes;
      else
        NE0DS-C2-OP2REC(); /* close cursor*/
        set NE0DM-200-RECLASS-SO-OP1CUOID cursor, modified, bold;
        set NE0DM-200-RECLASS-SO-OP1NORID cursor, modified, bold;
        NLXREC.NLXERRF = "Y";
        converseLib.validationFailed(157); /* S.O. doesn't have inventory to*/
                                   /* reclass*/
        return;
      end
      NE0DS-C2-OP2REC(); /* close cursor*/
    end
  end

    /* ************************************/
    /* Validate Reclass Customer*/
    /* ************************************/


  if (NE0DM200.NE0DM-200-RECLASS-KUCCOID == 0) /* blanks accepted*/
    set NE0DM200.NE0DM-200-RECLASS-KUCCOID initialAttributes;
  else
    KUCREC.KUCCOID = NE0DM200.NE0DM-200-RECLASS-KUCCOID;
    NE0DS-S-VCMPNY01();
    if (SQLCA.VAGen_SQLCODE == 0
     && KUCREC.XXXSTAT == "A")
      if (KUCREC.KUCCOID <= 900000
       && KUCREC.KUCCOID >= 800000) /* comp number*/
        if (KUCREC.XAUCD in XAUTBL.XAUCD)
          if (XAUTBL.XATCD[sysVar.arrayIndex] == "06")
            if (NE0DM-200-RECLASS-SO-OP1CUOID > 0
             || NE0DM-200-RECLASS-NIDIVCID > 0)
              converseLib.validationFailed(136); /* comps can't have SO's or invoices*/
              NLXREC.NLXERRF = "Y";
              set NE0DM-200-RECLASS-KUCCOID cursor, bold, modified;
              return;
            else
              set VINTGL02 empty;
              VINTGL02.KUCCOID = NE0DM200.NE0DM-200-RECLASS-KUCCOID;
              VINTGL02.XGPCD = NE0DM200.NE0DM-200-XGPCD;
              NE0DS-SF-VINTGL02();
              if (SQLCA.VAGen_SQLCODE == 100)
                set NE0DM-200-RECLASS-KUCCOID cursor, bold, modified;
                converseLib.validationFailed(192); /* illegal to reclass comp to comp*/
                NLXREC.NLXERRF = "Y";
                return;
              else
                set NE0DM-200-RECLASS-KUCCOID initialAttributes;
              end
            end
          else
            set NE0DM-200-RECLASS-KUCCOID cursor, bold, modified;
            converseLib.validationFailed(151); /* invalid comp number/customer*/
            NLXREC.NLXERRF = "Y";
            return;
          end
        else
          set NE0DM-200-RECLASS-KUCCOID cursor, bold, modified;
          converseLib.validationFailed(135); /* invalid comp number/customer*/
          NLXREC.NLXERRF = "Y";
          return;
        end
      end
    else
      set NE0DM-200-RECLASS-KUCCOID cursor, bold, modified;
      converseLib.validationFailed(94); /* invalid reclass customer*/
      NLXREC.NLXERRF = "Y";
      return;
    end
  end

    /* International customers must have at least an SO*/

  if (NE0DM200.NE0DM-200-RECLASS-KUCCOID > 0
   && NE0DM200.NE0DM-200-RECLASS-SO-OP1CUOID == 0
   && NE0DM200.NE0DM-200-RECLASS-NIDIVCID == 0)
    if (KUCREC.XAUCD == "31" /* international*/
     || KUCREC.XAUCD == "32" /* international*/
     || KUCREC.XAUCD == "33") /* international*/
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(101);
      set NE0DM200.NE0DM-200-RECLASS-SO-OP1CUOID cursor, modified, bold;
      return;
    else
      set NE0DM200.NE0DM-200-RECLASS-SO-OP1CUOID initialAttributes;
    end
  end

  if (KUCREC.XAUCD == "31" /* international*/
   || KUCREC.XAUCD == "32" /* international*/
   || KUCREC.XAUCD == "33") /* international*/

    /* *******************************************************/
    /* verify item (screen header fields) on reclass invoice*/
    /* *******************************************************/

    if (NE0DM-200-RECLASS-NIDIVCID > 0)
      VPIITM01.NIDIVCID = NE0DM-200-RECLASS-NIDIVCID;
      VPIITM01.PC3PONBR = -1; /* wild card - not on screen*/
      VPIITM01.XGPCD = NE0DW-01-XGPCD[NE0DW-02-INDEX];
      VPIITM01.SY1STNBR = NE0DW-01-SY1STNBR[NE0DW-02-INDEX];
      VPIITM01.SY2CLRID = NE0DW-01-SY2CLRID[NE0DW-02-INDEX];
      VPIITM01.XDMCD = NE0DW-01-XDMCD[NE0DW-02-INDEX];
      VPIITM01.XQACD = NE0DW-01-XQACD[NE0DW-02-INDEX];
      NE0DS-S1-VPIITM01(); /* declare cursor*/
      NE0DS-N1-VPIITM01(); /* only need one hit*/
      if (SQLCA.VAGen_SQLCODE == 0)
        set NE0DM-200-RECLASS-NIDIVCID initialAttributes;
      else
        NE0DS-C1-VPIITM01(); /* close cursor*/
        set NE0DM-200-RECLASS-NIDIVCID cursor, modified, bold;
        NLXREC.NLXERRF = "Y";
        converseLib.validationFailed(155); /* invoice doesn't have inventory to*/
                                   /* reclass*/
        return;
      end
      NE0DS-C1-VPIITM01(); /* close cursor*/
    end
    NE0DS-RELATIONAL(); /* DO RELATIONAL EDITS*/
  end


end // end NE0D-220

// Determine next action M200
Function NE0D-230()
  /* **********************************/
  /* Determine next action from hdr 1*/
  /* **********************************/

  NLXREC.NLXCPROC = "NE0D-230";

  if (converseVar.eventKey is pf12) /* edit screen, make no updates*/
    if (NE0DM200.NE0DM-200-RECLASS-KUCCOID == 0
     && NE0DM200.NE0DM-200-RECLASS-SO-OP1CUOID == 0
     && NE0DM200.NE0DM-200-RECLASS-NIDIVCID == 0
     && NE0DM200.NE0DM-200-GL-ENTITY-ID == 0
     && NE0DM200.NE0DM-200-GL-RSP-CTR-ID == 0
     && NE0DM200.NE0DM-200-GL-NATRL-ACCT-ID == 0
     && NE0DM200.NE0DM-200-GL-SUB-ACCT-ID == 0)
      converseLib.validationFailed(144); /* nothing entered*/
    else
      converseLib.validationFailed(77); /* edits performed*/
    end
    NLXREC.NLXERRF = "Y";
    return;
  end

  /* ********************************************/
  /* Enter update existing and insert reclassed*/
  /* ********************************************/

  if (converseVar.eventKey is enter)
    if (NE0DM200.NE0DM-200-RECLASS-KUCCOID == 0
     && NE0DM200.NE0DM-200-RECLASS-SO-OP1CUOID == 0
     && NE0DM200.NE0DM-200-RECLASS-NIDIVCID == 0)
    /* continue   DO NO UPDATES*/
    else
      NE0DS-UPDT-VNEINV();
      if (NLXREC.NLXERRF == "N")
        NE0DW-02-RECLASS-COUNT = NE0DW-02-RECLASS-COUNT + 1;
        NE0DS-ADD-VNEINV();
      end
    end
  end


end // end NE0D-230

// Add Inventory screen
Function NE0D-300()
   /* -----------------------------------------------------------*/
       /* Process screen NE0DM300*/

     /* note - this process is being performed in a*/
        /* "while loop" from ne0d050 until the end-of-screen*/
        /* flag (nlxeosfl) is set to 'y'.*/

   /* -----------------------------------------------------------*/

  NLXREC.NLXCPROC = "NE0D-300";


  if (NLXREC.NLXBLDSC == "Y")
    NE0D-301();
    NLXREC.NLXBLDSC = "N";
  end

  converse NE0DM300 ;

  NE0DM300.VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";

  NE0D-310(); /* validate pf keys*/

  if (NLXREC.NLXERRF == "N") /* check for error*/
    NE0D-320(); /* process entered option*/
  end

  if (NLXREC.NLXERRF == "N") /* check for error*/
    NE0D-330(); /* determine next action...*/
  end


end // end NE0D-300

// Build screen
Function NE0D-301()
   /* **************************************/
   /* Build MAP ne0bM300                 **/
   /* **************************************/


  NLXREC.NLXCPROC = "NE0D301";

  converseLib.clearScreen();
  set NE0DM300 initial;

  NE0DM300.XXXRVNBR = "00"; /* revision nbr*/
  NE0DM300.XXXMAPNM = "NE0DM300"; /* map name*/
  NE0DM300.XXXPRCNM = "NE0D300"; /* process name*/
  NE0DM300.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  NE0DM300.NE0DM-300-XQACD = "01"; /* default quality code*/
  NE0DM300.NE0DM-300-XDMCD = "00"; /* default dimention code*/


end // end NE0D-301

// Validate PF keys act on some
Function NE0D-310()
   /* -----------------------------------------------------------*/
     /* Validate PF keys; act on 1, 3, 4, 12*/

     /* Active PF keys: all above and Enter*/
   /* -----------------------------------------------------------*/

  NLXREC.NLXCPROC = "NE0D-310";

  set NE0DM300.CATOAP initialAttributes;
  set NE0DM300.CAITEM initialAttributes;

   /* ***********************************/
      /* check for fastpath option/item*/
   /* ***********************************/

  if (NE0DM300.CATOAP != " ") /* if fastpath option entered,*/
    if (converseVar.eventKey is enter)
      COMMAREA.CATOAP = NE0DM300.CATOAP;
      COMMAREA.CAITEM = NE0DM300.CAITEM;
      COMMAREA.CAUSERA = " ";
      XPNL002(); /* exit application*/
      set NE0DM300.CATOAP cursor, bold; /* exit failed*/
      return;
    end
  end

   /* ***********************************/
      /* check for help key option*/
   /* ***********************************/

  if (converseVar.eventKey is pf1) /* skip edit/updt, go to 'help'*/
    XSNLS01(); /* exit*/
  end

   /* ***********************************/
      /* check for previous level option*/
   /* ***********************************/

  if (converseVar.eventKey is pf3)
    NEWREC.NEW-FROM-SCREEN = NE0DW-02-FROM-SCREEN;
                                   /* ** go back to calling map*/
    COMMAREA.CATOAP = "NE0D";
    COMMAREA.CAUSERA = NEWREC.NEW-GROUP;
    XPNL002();
  end

   /* ***********************************/
      /* check for previous master level option*/
   /* ***********************************/

  if (converseVar.eventKey is pf4) /* go to master menu*/
    COMMAREA.CAUSERA = " "; /* exit*/
    XSPF4();
  end

  if (converseVar.eventKey is enter /* valid non exit keys*/
   || converseVar.eventKey is pf12)
    return;
  end

  NLXREC.NLXERRF = "Y"; /* invalid Pf key*/
  converseLib.validationFailed(2);


end // end NE0D-310

// Edit Screen Entries
Function NE0D-320()
   /* ****************************************/
   /* Edit Screen Entries from the bottom up*/
   /* and build empty fields for map 300.*/
   /* (Not all will be filled)*/
   /* ****************************************/

  NLXREC.NLXCPROC = "NE0D-320";

  set KUCREC empty;
  set KUNREC empty;
  set OP1REC empty;
  set OP2REC empty;
  set PC2REC empty;
  set PC6REC empty;
  set PG2REC empty;
  set VPIHDR01 empty;
  set VPIITM01 empty;
  set VNLGLA01 empty;

   /* ****************************************/
   /* Edit Current standard unit cost*/
   /* ****************************************/

  if (NE0DM300.NE0DM-300-NE-CURR-STD-UNTCST == 0)
    NLXREC.NLXERRF = "Y";
    converseLib.validationFailed(112);
    set NE0DM300.NE0DM-300-NE-CURR-STD-UNTCST cursor, modified, bold;
    return;
  else
    if (NE0DM300.NE0DM-300-NE-CURR-STD-UNTCST > 100.00)
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(168);
      set NE0DM300.NE0DM-300-NE-CURR-STD-UNTCST cursor, modified, bold;
      return;
    else
      set NE0DM300.NE0DM-300-NE-CURR-STD-UNTCST initialAttributes;
    end
  end

   /* ****************************************/
   /* Edit inventory units-screen qty*/
   /* ****************************************/

  if (NE0DM-300-NE-IVC-UNT == 0)
    NLXREC.NLXERRF = "Y";
    converseLib.validationFailed(128); /* quantity required*/
    set NE0DM300.NE0DM-300-NE-IVC-UNT cursor, modified, bold;
    return;
  else
    set NE0DM300.NE0DM-300-NE-IVC-UNT initialAttributes;
  end

   /* ****************************************/
   /* Edit GL Codes*/
   /* ****************************************/

  set NE0DM-300-GL-PROJ-ID initialAttributes;

  if (NE0DM-300-GL-SUB-ACCT-ID == " ")
    NLXREC.NLXERRF = "Y";
    set NE0DM-300-GL-SUB-ACCT-ID cursor, modified, bold;
    converseLib.validationFailed(170); /* must be filled in*/
    return;
  else
    set NE0DM-300-GL-SUB-ACCT-ID initialAttributes;
  end

  if (NE0DM-300-GL-NATRL-ACCT-ID == " ")
    NLXREC.NLXERRF = "Y";
    set NE0DM-300-GL-NATRL-ACCT-ID cursor, bold;
    converseLib.validationFailed(170); /* must be filled in*/
    return;
  else
    set NE0DM-300-GL-NATRL-ACCT-ID initialAttributes;
  end

  if (NE0DM-300-GL-RSP-CTR-ID == " ")
    NLXREC.NLXERRF = "Y";
    set NE0DM-300-GL-RSP-CTR-ID cursor, modified, bold;
    converseLib.validationFailed(170); /* must be filled in*/
    return;
  else
    set NE0DM-300-GL-RSP-CTR-ID initialAttributes;
  end

  if (NE0DM-300-GL-SUB-ACCT-ID > " "
   && NE0DM-300-GL-NATRL-ACCT-ID > " "
   && NE0DM-300-GL-RSP-CTR-ID > " ")
    NE0DS-CHECK-300-GL(); /* validate*/
    if (NLXREC.NLXERRF == "Y")
      return;
    end
  end

  if (NE0DM-300-GL-ENTITY-ID == "500"
   || NE0DM-300-GL-ENTITY-ID == "101")
    set NE0DM-300-GL-ENTITY-ID initialAttributes;
  else
    NLXREC.NLXERRF = "Y";
    set NE0DM-300-GL-ENTITY-ID cursor, modified, bold;
    converseLib.validationFailed(171); /* invalid gl entity*/
    return;
  end

   /* *******************/
   /* Validate UoM*/
   /* *******************/

  if (NE0DM-300-XUMCD > " ")
    if (NE0DM-300-XUMCD in XUMTBL.XUMCD)
      set NE0DM-300-XUMCD initialAttributes;
    else
      NLXREC.NLXERRF = "Y";
      set NE0DM-300-XUMCD cursor, modified, bold;
      converseLib.validationFailed(178); /* invalid xumcd*/
      return;
    end
  end /* if ' ' get default from invoice po or*/
                                   /* so*/

   /* ****************************************/
   /* Process Pop up window and validate GPC*/
   /* ****************************************/

  if (NE0DM-300-XGPCD == "?") /* GPC POPUP REQUESTED*/
    NE0DS-POP-UP-GPC();
    converseLib.clearScreen();
    
  end

  NE0DS-VAL-GPC-CD();
  if (NLXREC.NLXERRF == "Y")
    return;
  end

   /* ****************************************/
   /* Edit Product code*/
   /* ****************************************/

  NE0DS-VAL-STYLE();
  if (NLXREC.NLXERRF == "Y")
    return;
  end

   /* ****************************************/
   /* Edit Customer Cross Refeence*/
   /* ****************************************/

  if (NE0DM-300-PC2CUXID == " ") /* acceptable*/
    /* continue*/
  else
    PC2REC.XGPCD = NE0DM-300-XGPCD;
    PC2REC.PC2CUXID = NE0DM-300-PC2CUXID;
    NE0DS-S-PC2REC();
    if (SQLCA.VAGen_SQLCODE == 0)
      set NE0DM-300-PC2CUXID initialAttributes;
      if (NE0DM-300-KUCCOID == 0)
        NE0DM-300-KUCCOID = PC2REC.KUCCOID;
        NE0DM-300-KUMSTRID = PC2REC.KUMSTRID;
      end
    else
      set NE0DM-300-PC2CUXID cursor, modified, bold;
      converseLib.validationFailed(173);
      NLXREC.NLXERRF = "Y";
      return;
    end
  end

   /* ****************************************/
   /* Edit Customer*/
   /* ****************************************/

  if (NE0DM-300-KUCCOID == 0)
    if (NE0DM-300-OP1CUOID > 0
     || NE0DM-300-NIDIVCID > 0)
  /* continue - get customer below in edit soor edit invoice*/
    else
      set NE0DM-300-KUCCOID cursor, bold, modified;
      converseLib.validationFailed(73); /* customer required*/
      NLXREC.NLXERRF = "Y";
      return;
    end
  else
    KUCREC.KUCCOID = NE0DM-300-KUCCOID;
    NE0DS-S-VCMPNY01();
    if (SQLCA.VAGen_SQLCODE == 100)
      set NE0DM-300-KUCCOID cursor, bold, modified;
      converseLib.validationFailed(74); /* invalid customer*/
      NLXREC.NLXERRF = "Y";
      return;
    else
      NE0DM-300-KUCCONM = KUCREC.KUCCONM;
      set NE0DM-300-KUCCOID initialAttributes;
    end

    /* *****************************************************/
    /* Edit Customer & Store combination*/
    /* *****************************************************/

    KUNREC.KUCCOID = NE0DM-300-KUCCOID;
    KUNREC.KUMSTRID = NE0DM-300-KUMSTRID;
    KUNREC.XGPCD = NE0DM-300-XGPCD;
    KUNREC.XNXCD = 0; /* default to 0*/
    NE0DS-S-VCUST001();
    if (SQLCA.VAGen_SQLCODE == 100)
      set NE0DM-300-KUCCOID cursor, bold, modified;
      set NE0DM-300-KUMSTRID cursor, bold, modified;
      converseLib.validationFailed(113); /* invalid customer store combination*/
      NLXREC.NLXERRF = "Y";
      return;
    else
      set NE0DM-300-KUCCOID initialAttributes;
      set NE0DM-300-KUMSTRID initialAttributes;
    end


    /* *****************************************/
    /* Derive Customer Cross Reference*/
    /* after a valid customer has been established*/
    /* if one was not entered*/
    /* *****************************************/

    if (NE0DM-300-PC2CUXID == " ")
      PC2REC.KUCCOID = KUNREC.KUCCOID;
      PC2REC.KUMSTRID = KUNREC.KUMSTRID;
      PC2REC.XGPCD = NE0DM-300-XGPCD;
      PC2REC.XNXCD = 0; /* default to 0*/

      NE0DS-SA-PC2REC();

      if (SQLCA.VAGen_SQLCODE == 0)
        NE0DM-300-PC2CUXID = PC2REC.PC2CUXID;
        set NE0DM-300-KUCCOID initialAttributes;
        set NE0DM-300-KUMSTRID initialAttributes;
        set NE0DM-300-XGPCD initialAttributes;
      else
        set NE0DM-300-KUCCOID cursor, modified, bold;
        set NE0DM-300-KUMSTRID modified, bold;
        set NE0DM-300-XGPCD modified, bold;
        NLXREC.NLXERRF = "Y";
        converseLib.validationFailed(174); /* pc2cuxid not found*/
        return;
      end
    end

  end /* end if customer = 0*/

   /* *****************************************************/
   /* Edit Cost Source*/
   /* *****************************************************/

  if (NE0DM-300-NE-CST-SRC-ID == " ")
    set NE0DM-300-NE-CST-SRC-ID cursor, bold, modified;
    converseLib.validationFailed(110); /* Cost source required*/
    NLXREC.NLXERRF = "Y";
    return;
  else
    set NE0DM-300-NE-CST-SRC-ID initialAttributes;
  end

   /* ****************************************/
   /* Edit Warehouse Code, if entered*/
   /* ****************************************/

  NE0DS-EDT-WH-CD();
  if (NLXREC.NLXERRF == "Y")
    return;
  end

   /* ************************************/
   /* Edit Invoice*/
   /* ************************************/

  if (NE0DM-300-NIDIVCID == 0) /* zero accepted*/
    set NE0DM-300-NIDIVCID initialAttributes;
  else
    VPIHDR01.NIDIVCID = NE0DM-300-NIDIVCID;
    NE0DS-S-VPIHDR01();
    if (SQLCA.VAGen_SQLCODE == 0) /* invoice must be active or reissued*/
      if (VPIHDR01.ZISCD == "AC"
       || VPIHDR01.ZISCD == "RI")
        set NE0DM-300-NIDIVCID initialAttributes;

        /* *********************************************/
        /* check if items on invoice*/
        /* *********************************************/

        if (NLXREC.NLXERRF == "N")
          if (NE0DM-300-NIDIVCID > 0)
            VPIITM01.NIDIVCID = NE0DM-300-NIDIVCID;
            VPIITM01.PC3PONBR = -1; /* wild card - not on screen*/
            VPIITM01.XGPCD = NE0DM-300-XGPCD;
            VPIITM01.SY1STNBR = NE0DM-300-SY1STNBR;
            VPIITM01.SY2CLRID = NE0DM-300-SY2CLRID;
            VPIITM01.XDMCD = NE0DM-300-XDMCD;
            VPIITM01.XQACD = NE0DM-300-XQACD;
            NE0DS-S1-VPIITM01(); /* declare cursor*/
            NE0DS-N1-VPIITM01(); /* only need one hit*/
            if (SQLCA.VAGen_SQLCODE == 0)
              set NE0DM-300-NIDIVCID initialAttributes;
              if (NE0DM-300-XUMCD == " ")
                NE0DM-300-XUMCD = VPIITM01.XUMCD;
              end
            else
              NE0DS-C1-VPIITM01(); /* close cursor*/
              set NE0DM-300-NIDIVCID cursor, modified, bold;
              NLXREC.NLXERRF = "Y";
              converseLib.validationFailed(155); /* invoice doesn't have inventory*/
                                 /* reclass*/
              return;
            end
            NE0DS-C1-VPIITM01(); /* close cursor*/
          end
        end

        if (NE0DM-300-PC2CUXID == " ") /* pc2cuxid not entered*/
          PC2REC.KUCCOID = VPIHDR01.KUCCOID; /* build key*/
          PC2REC.KUMSTRID = VPIHDR01.KUMSTRID;
          NE0DS-GET-PC2CUXID();
          if (NLXREC.NLXERRF == "Y")
            return;
          end
        end
        if (NE0DM-300-XWHCD == " ")
          NE0DM-300-XWHCD = VPIHDR01.XWHCD;
        end
        if (NE0DM-300-OP1CUOID == 0)
          NE0DM-300-OP1CUOID = VPIHDR01.OP1CUOID;
          NE0DM-300-OP1NORID = VPIHDR01.OP1NORID;
        end
        if (NE0DM-300-KUCCOID == 0)
          NE0DM-300-KUCCOID = VPIHDR01.KUCCOID;
          NE0DM-300-KUMSTRID = VPIHDR01.KUMSTRID;
          KUCREC.KUCCOID = VPIHDR01.KUCCOID;
        end
      else
        set NE0DM-300-NIDIVCID modified, cursor, bold;
        NLXREC.NLXERRF = "Y";
        converseLib.validationFailed(120); /* invalid invoice*/
        return;
      end
    else
      set NE0DM-300-NIDIVCID modified, cursor, bold;
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(108); /* invalid invoice?*/
      return;
    end
  end

   /* **********************/
   /* Validate and Edit PO*/
   /* **********************/

  if (NE0DM-300-PC3PONBR == 0) /* zero allowed*/
    set NE0DM-300-PC3PONBR initialAttributes;
    set NE0DM-300-XGPCD initialAttributes;
  else
    PC3REC.PC3PONBR = NE0DM-300-PC3PONBR;
    PC3REC.XGPCD = NE0DM-300-XGPCD;
    NE0DS-S-PC3REC();
    if (SQLCA.VAGen_SQLCODE == 0)
      set NE0DM-300-PC3PONBR initialAttributes;
      set NE0DM-300-XGPCD initialAttributes;
      if (NE0DM-300-OP1CUOID == 0)
        PC6REC.PC3PONBR = NE0DM-300-PC3PONBR;
        PC6REC.XGPCD = NE0DM-300-XGPCD;
        PC6REC.SY1STNBR = NE0DM-300-SY1STNBR;
        PC6REC.SY2CLRID = NE0DM-300-SY2CLRID;
        PC6REC.XDMCD = NE0DM-300-XDMCD;
        PC6REC.XQACD = NE0DM-300-XQACD;
        PC6REC.PC2CUXID = PC2REC.PC2CUXID;

        NE0DS-SC-PC6REC();

        if (SQLCA.VAGen_SQLCODE == 0
         || SQLCA.VAGen_SQLCODE == -811)
          set NE0DM-300-PC3PONBR initialAttributes;
          NE0DM-300-FY1FCTYC = PC6REC.FY1FCTYC;
          NE0DM-300-OP1CUOID = PC6REC.OP1CUOID;
          NE0DM-300-OP1NORID = PC6REC.OP1NORID;
          if (NE0DM-300-XUMCD == " ")
            NE0DM-300-XUMCD = PC6REC.XUMCD;
          end
          if (NE0DM-300-PC2CUXID == " ")
            NE0DM-300-PC2CUXID = PC6REC.PC2CUXID;
          end
        else
          set NE0DM-300-PC3PONBR cursor, bold, modified;
          NLXREC.NLXERRF = "Y";
          converseLib.validationFailed(133); /* Invalid PO entered*/
          return;
        end
      end
    else
      set NE0DM-300-PC3PONBR cursor, bold, modified;
      set NE0DM-300-XGPCD bold, modified;
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(123); /* Invalid PO entered*/
      return;
    end
  end

   /* *****************/
   /* Validate S.O.*/
   /* *****************/

  if (NE0DM-300-OP1CUOID == 0) /* blanks accepted*/
    set NE0DM-300-OP1CUOID initialAttributes;
  else
    NE0DS-VAL-ADD-SO();
    if (NLXREC.NLXERRF == "Y")
      return;
    else
      if (NE0DM-300-PC2CUXID == " ") /* pc2cuxid not entered*/
        PC2REC.KUCCOID = OP1REC.KUCCOID; /* build key*/
        PC2REC.KUMSTRID = OP1REC.KUMSTRID;
        NE0DS-GET-PC2CUXID();
        if (NLXREC.NLXERRF == "Y")
          return;
        end
      end
      if (NE0DM-300-KUCCOID == 0) /* customer not entered*/
        NE0DM-300-KUCCOID = OP1REC.KUCCOID;
        NE0DM-300-KUMSTRID = OP1REC.KUMSTRID;
        KUCREC.KUCCOID = OP1REC.KUCCOID;
      end

        /* **************************************/
        /* Validate reclass item is on S.O.*/
        /* **************************************/

      OP2REC.OP1PARTN = OP1REC.OP1PARTN;
      OP2REC.OP1CUOID = OP1REC.OP1CUOID;
      OP2REC.OP1NORID = OP1REC.OP1NORID;
      OP2REC.XGPCD = NE0DM-300-XGPCD;
      OP2REC.SY1STNBR = NE0DM-300-SY1STNBR;
      OP2REC.SY2CLRID = NE0DM-300-SY2CLRID;
      OP2REC.XDMCD = NE0DM-300-XDMCD;
      OP2REC.XQACD = NE0DM-300-XQACD;
      NE0DS-S2-OP2REC(); /* declare cursor*/
      NE0DS-N2-OP2REC(); /* only need one hit*/
      if (SQLCA.VAGen_SQLCODE == 0)
        set NE0DM-300-OP1CUOID initialAttributes;
        if (NE0DM-300-XUMCD == " ")
          NE0DM-300-XUMCD = OP2REC.XUMCD;
        end
      else
        NE0DS-C2-OP2REC(); /* close cursor*/
        set NE0DM-300-OP1CUOID cursor, modified, bold;
        NLXREC.NLXERRF = "Y";
        converseLib.validationFailed(157); /* so . doesn't have inventory*/
        return;
      end
      NE0DS-C2-OP2REC(); /* close cursor*/
      if (NE0DM-300-XWHCD == " ")
        NE0DM-300-XWHCD = OP1REC.XWHCD;
      end
      if (NE0DM-300-PC2CUXID == " ")
        PC2REC.KUCCOID = OP1REC.KUCCOID;
        PC2REC.KUMSTRID = OP1REC.KUMSTRID;
        NE0DS-GET-PC2CUXID();
        if (NLXREC.NLXERRF == "Y")
          return;
        end
      end
    end
  end

  XX0XS01();

  NE0DS-FMAT-POST-MO();

  move NE0DW-02-WS-FORMAT-CCYYMM to NE0DM-300-NE-IVC-GL-POST-MO withV60Compat;

   /* *******************************/
   /* get customer description*/
   /* *******************************/

   /* at this point kucrec shound not be blank.*/

  if (NE0DM-300-KUCCONM == " ") /* customer not entered, but derived*/
    NE0DS-GET-CUST-NM(); /* get customer description*/
  end /* program will only reach this point*/
                                  /* if SO or invoice entered and no cust*/
                                  /* customer.*/
   /* *******************************/
   /* verify international customer*/
   /* ******************************/


  if (NLXREC.NLXERRF == "N")
    if (KUCREC.XAUCD == "31"
     || KUCREC.XAUCD == "32"
     || KUCREC.XAUCD == "33")
      set NE0DM-300-KUCCOID initialAttributes;
      set NE0DM-300-OP1CUOID initialAttributes;
      set NE0DM-300-OP1NORID initialAttributes;
      set NE0DM-300-NIDIVCID initialAttributes;
    else
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(154);
      set NE0DM-300-KUCCOID cursor, bold, modified;
      set NE0DM-300-OP1CUOID bold, modified;
      set NE0DM-300-OP1NORID bold, modified;
      set NE0DM-300-NIDIVCID bold, modified;
      return;
    end
  end

  if (NE0DM-300-XUMCD == " ") /* if still blank derive it*/
    SY1REC.XGPCD = NE0DM-300-XGPCD;
    SY1REC.SY1STNBR = NE0DM-300-SY1STNBR;
    NE0DS-S-SY1REC();
    if (SQLCA.VAGen_SQLCODE == 0)
      NE0DM-300-XUMCD = SY1REC.XUMCD;
      set NE0DM-300-SY1STNBR initialAttributes;
    else
      set NE0DM-300-SY1STNBR cursor, modified, bold;
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(179); /* no default uom found for entered*/
                                   /* style*/
      return;
    end
  end

   /* *******************/
   /* Do Relational edits*/
   /* *******************/

  NE0DS-M300-RLTNS();



end // end NE0D-320

// Determine next action M300
Function NE0D-330()
  /* **********************************/
  /* Determine next action*/
  /* **********************************/

  NLXREC.NLXCPROC = "NE0D-330";

  if (converseVar.eventKey is pf12) /* edit screen, make no updates*/
    converseLib.validationFailed(77); /* edits performed*/
    NLXREC.NLXERRF = "Y";
    return;
  end

  /* *********************************/
  /* insert new row if enter was hit*/
  /* *********************************/

  if (converseVar.eventKey is enter)
    NE0DS-ADD-PF20-INV();
  end


end // end NE0D-330

// insert row on Vneinv01
Function NE0DS-A-VNEINV01()
   /* *****************************************************/
   /* Open cursor on VNEINV01*/
   /* *****************************************************/


  NLXREC.NLXCPROC = "NE0DS-A-VNEINV01";

   /* open cursor on - vneinv01*/

  call "IO6970" ("A ", SQLCA, VNEINV01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
   /* continue*/
  else
    TA1REC.TA1LOCAT[2] = "S1    ";
    TA1REC.TA1LOCAT[3] = "IO6970";
    TA1REC.TA1DBASE = "DNILO ";
    TA1REC.TA1TBLVU = "VNEINV01";

    NE0DW-02-ABEND-KEY = " ";

    NE0DW-02-ABEND-CUST = VNEINV01.KUCCOID;
    NE0DW-02-ABEND-FILLER-ORD = "SO:";
    NE0DW-02-ABEND-OP1CUOID = VNEINV01.OP1CUOID;
    NE0DW-02-ABEND-OP1NORID = VNEINV01.OP1NORID;
    NE0DW-02-ABEND-FILLER-STY = "STY";
    NE0DW-02-ABEND-SY1STNBR = VNEINV01.SY1STNBR;
    NE0DW-02-ABEND-HYPEN-1 = "-";
    NE0DW-02-ABEND-SY2CLRID = VNEINV01.SY2CLRID;
    NE0DW-02-ABEND-HYPHEN-2 = "-";
    NE0DW-02-ABEND-XDMCD = VNEINV01.XDMCD;

    move NE0DW-02-ABEND-KEY to TA1TBLKE withV60Compat;

    XPNL005(); /* abort routine*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
  end

end // end NE0DS-A-VNEINV01

// insert vneinv01 record
Function NE0DS-ADD-PF20-INV()
  /* ******************************************************************/
  /* This statement group is used to format the the VNEINV01 in order*/
  /* to Insert a VNEINV01 record with a ne-stat-cd of of 'CL'or 'AC'.*/
  /* ******************************************************************/

  NLXREC.NLXCPROC = "NE0DS-ADD-PF20-INV";

  set VNEINV01 empty;

   /* *******************/
   /* GET CURRENT DATE*/
   /* *******************/

  XX0XS01();

  NE0DS-FMAT-POST-MO();

   /* *******************/
   /* FORMAT ZZ FAMILY*/
   /* *******************/

  VNEINV01.ZZZSDT = XX0XW01.XX0XWDAT;
  VNEINV01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VNEINV01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  VNEINV01.ZZZCHGCT = 0;


   /* *******************/
   /* GET OP-ORD-PART-CHAR*/
   /* *******************/

  move NE0DM-300-OP1CUOID to NE0DW-02-WS-OP-CUST-ORD withV60Compat;

   /* ******************/
   /* BUILD NEW RECORD*/
   /* ******************/

  VNEINV01.OP1CUOID = NE0DM-300-OP1CUOID;
  VNEINV01.OP1NORID = NE0DM-300-OP1NORID;
  VNEINV01.NIDIVCID = NE0DM-300-NIDIVCID;

  VNEINV01.XGPCD = NE0DM-300-XGPCD;
  VNEINV01.SY1STNBR = NE0DM-300-SY1STNBR;
  VNEINV01.SY2CLRID = NE0DM-300-SY2CLRID;
  VNEINV01.XDMCD = NE0DM-300-XDMCD;
  if (NE0DM-300-XQACD == " ")
    VNEINV01.XQACD = "01";
  else
    VNEINV01.XQACD = NE0DM-300-XQACD;
  end
  VNEINV01.NE-CST-SRC-ID = NE0DM-300-NE-CST-SRC-ID;
  VNEINV01.NE-SRC-IVC-ID = COMMAREA.CAUSERID;
  VNEINV01.KUCCOID = NE0DM-300-KUCCOID;
  VNEINV01.KUMSTRID = NE0DM-300-KUMSTRID;
  VNEINV01.PC2CUXID = NE0DM-300-PC2CUXID;

  VNEINV01.OP1PARTN = NE0DW-02-WS-OP-PART-NUM;

  VNEINV01.PC3PONBR = NE0DM-300-PC3PONBR;

  if (NE0DM-300-NIDIVCID > 0)
    VNEINV01.NE-STAT-CD = "CL";
    VNEINV01.NE-IVC-CLEAR-MO = NE0DW-02-WS-FORMAT-CCYYMM;
  else
    VNEINV01.NE-STAT-CD = "AC";
    VNEINV01.NE-IVC-CLEAR-MO = 0;
  end

  VNEINV01.NE-IVC-UNT = NE0DM-300-NE-IVC-UNT;
  VNEINV01.NE-SHP-UNT = 0;
  VNEINV01.XUMCD = NE0DM-300-XUMCD;
  VNEINV01.NE-CURR-STD-UNTCST = NE0DM-300-NE-CURR-STD-UNTCST;

  VNEINV01.NE-LST-STD-UNT-CST = NE0DM-300-NE-CURR-STD-UNTCST;

  VNEINV01.NE-POST-UNT-CST = NE0DM-300-NE-CURR-STD-UNTCST;

  VNEINV01.GLAENT = NE0DM-300-GL-ENTITY-ID;
  VNEINV01.GLARCID = NE0DM-300-GL-RSP-CTR-ID;
  VNEINV01.GLANTAC = NE0DM-300-GL-NATRL-ACCT-ID;
  VNEINV01.GLASUB = NE0DM-300-GL-SUB-ACCT-ID;
  VNEINV01.GLAPRJ = NE0DM-300-GL-PROJ-ID;

  VNEINV01.NE-IVC-GL-POST-MO = NE0DW-02-WS-FORMAT-CCYYMM;
  VNEINV01.FY1FCTYC = NE0DM-300-FY1FCTYC;
  VNEINV01.XWHCD = NE0DM-300-XWHCD;

  NE0DS-S-VNEINV01();

  if (SQLCA.VAGen_SQLCODE == 0)

    NLXREC.NLXERRF = "Y";
    converseLib.validationFailed(122); /* row already exists*/
    return;
  else /* row not found OK to insert*/
    NE0DS-A-VNEINV01();

    if (SQLCA.VAGen_SQLCODE == 0)
      NE0D-301(); /* REBUILD BLANK SCREEN*/
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(134); /* add successful*/
      return;
    end
  end


end // end NE0DS-ADD-PF20-INV

// Add temp storage
Function NE0DS-ADD-TMP-STG()
   /* ***********************************************************************/
   /* Write temp storage*/
   /*  */
   /*  */
   /* ***********************************************************************/

  NLXREC.NLXCPROC = "NE0DS-ADD-TMP-STG";
  move NE0DW-02-SIZE to NE0DW-01-LENGTH withV60Compat;

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (NE0DW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    NE0DW-HIGH-PAGE-NBR = TA5REC.TA5TSQIX; /* Save high page Nbr*/
    return; /* Return to previous process*/

  else

   /* ------------------------------------------------------------*/
    /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

    converseLib.validationFailed(23); /* Indicate system error*/

    XPNL-006(); /* abend routine*/

  end

end // end NE0DS-ADD-TMP-STG

// insert vneinv01 record
Function NE0DS-ADD-VNEINV()
  /* ******************************************************************/
  /* This statement group is used to format the the VNEINV01 in order*/
  /* to Insert a VNEINV01 record with a ne-stat-cd of of 'CL'or 'AC'.*/
  /* NOTE: The map fields correspond to ne0dw-01-fields referenced by*/
  /* the subscript(ne0dw-02-index), because all 200 logic is in a*/
  /* loop of pages that consists of 14 rows each. Each subscript*/
  /* refers to one row on one page.*/
  /* The insert is nothing more than duplicating the inv rec with the*/
  /* new ne-stat-cd and a inserting map reclass Cust, S.O. and Invoice.*/
  /* ******************************************************************/

  NLXREC.NLXCPROC = "NE0DS-UPDT-VNEINV";

  set VNEINV01 empty;

   /* *******************/
   /* GET CURRENT DATE*/
   /* *******************/

  XX0XS01();

  NE0DS-FMAT-POST-MO();

   /* *******************/
   /* FORMAT ZZ FAMILY*/
   /* *******************/

  VNEINV01.ZZZSDT = XX0XW01.XX0XWDAT;
  VNEINV01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VNEINV01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  VNEINV01.ZZZCHGCT = 0;


   /* *******************/
   /* GET OP-ORD-PART-CHAR*/
   /* *******************/

  NE0DW-02-WS-OP-CUST-ORD = NE0DM200.NE0DM-200-RECLASS-SO-OP1CUOID;

   /* ***********************************/
   /* BUILD NEW RECORD FOR RECLASSED SO*/
   /* ***********************************/

  VNEINV01.OP1CUOID = NE0DM200.NE0DM-200-RECLASS-SO-OP1CUOID;
  VNEINV01.OP1NORID = NE0DM200.NE0DM-200-RECLASS-SO-OP1NORID;
  VNEINV01.NIDIVCID = NE0DM200.NE0DM-200-RECLASS-NIDIVCID;

  VNEINV01.XGPCD = NE0DW-01-XGPCD[NE0DW-02-INDEX];
  VNEINV01.SY1STNBR = NE0DW-01-SY1STNBR[NE0DW-02-INDEX];
  VNEINV01.SY2CLRID = NE0DW-01-SY2CLRID[NE0DW-02-INDEX];
  VNEINV01.XDMCD = NE0DW-01-XDMCD[NE0DW-02-INDEX];
  VNEINV01.XQACD = NE0DW-01-XQACD[NE0DW-02-INDEX];
  VNEINV01.NE-CST-SRC-ID = NE0DW-01-NE-CST-SRC-ID[NE0DW-02-INDEX];
  VNEINV01.NE-SRC-IVC-ID = NE0DW-01-NE-SRC-IVC-ID[NE0DW-02-INDEX];
  VNEINV01.KUCCOID = NE0DM200.NE0DM-200-RECLASS-KUCCOID;
  VNEINV01.KUMSTRID = 0;
  VNEINV01.PC2CUXID = NE0DW-01-PC2CUXID[NE0DW-02-INDEX];

  VNEINV01.OP1PARTN = NE0DW-02-WS-OP-PART-NUM;

  VNEINV01.TSFSHPID = NE0DW-01-TSFSHPID[NE0DW-02-INDEX];
  VNEINV01.PC3PONBR = NE0DW-01-PC3PONBR[NE0DW-02-INDEX];

  if (NE0DM200.NE0DM-200-RECLASS-NIDIVCID > 0)
    VNEINV01.NE-STAT-CD = "CL";
    VNEINV01.NE-IVC-CLEAR-MO = NE0DW-02-WS-FORMAT-CCYYMM;
  else
    VNEINV01.NE-STAT-CD = "RC";
    VNEINV01.NE-IVC-CLEAR-MO = 0;
  end

  VNEINV01.NE-IVC-UNT = NE0DW-01-NE-IVC-UNT[NE0DW-02-INDEX];
  VNEINV01.NE-SHP-UNT = NE0DW-01-NE-SHP-UNT[NE0DW-02-INDEX];
  VNEINV01.XUMCD = NE0DW-01-XUMCD[NE0DW-02-INDEX];
  VNEINV01.NE-CURR-STD-UNTCST = NE0DW-01-NE-CURR-STD-UNTCST[NE0DW-02-INDEX];
  VNEINV01.NE-ORIG-STD-UNTCST = NE0DW-01-NE-ORIG-STD-UNTCST[NE0DW-02-INDEX];
  VNEINV01.NE-LST-STD-UNT-CST = NE0DW-01-NE-LST-STD-UNT-CST[NE0DW-02-INDEX];
  VNEINV01.NE-POST-UNT-CST = NE0DW-01-NE-POST-UNT-CST[NE0DW-02-INDEX];
  VNEINV01.GLAENT = NE0DM-200-GL-ENTITY-ID;
  VNEINV01.GLARCID = NE0DM-200-GL-RSP-CTR-ID;
  VNEINV01.GLANTAC = NE0DM-200-GL-NATRL-ACCT-ID;
  VNEINV01.GLASUB = NE0DM-200-GL-SUB-ACCT-ID;
  VNEINV01.GLAPRJ = NE0DM-200-GL-PROJ-ID;
  VNEINV01.NE-IVC-GL-POST-MO = NE0DW-02-WS-FORMAT-CCYYMM;
  VNEINV01.FY1FCTYC = NE0DW-01-FY1FCTYC[NE0DW-02-INDEX];
  VNEINV01.XWHCD = NE0DW-01-XWHCD[NE0DW-02-INDEX];
  VNEINV01.ZPSCD = NE0DW-01-ZPSCD[NE0DW-02-INDEX];
  VNEINV01.NL-PMT-MTHD-CD = NE0DW-01-NL-PMT-MTHD-CD[NE0DW-02-INDEX];

  NE0DS-S-VNEINV01();

  if (SQLCA.VAGen_SQLCODE == 0)
    NLXREC.NLXERRF = "Y";
    converseLib.validationFailed(152); /* row already exists*/
    return;
  else /* row not found OK to insert*/
    NE0DS-A-VNEINV01();
  end


end // end NE0DS-ADD-VNEINV

// Build map from temp storage
Function NE0DS-BUILD-MAP101()
   /* *****************************************************/
   /* Build map from temp storage for Map 101*/
   /* *****************************************************/

  NLXREC.NLXCPROC = "NE0DS-BUILD-MAP101";

  if (NE0DW-CURR-PAGE-NBR == NE0DW-MAP-PAGE-NBR)
  /* continue*/
  else
    move NE0DW-MAP-PAGE-NBR to NE0DW-CURR-PAGE-NBR withV60Compat;
  end

  set NE0DW01 empty;

  if (NE0DW-HIGH-PAGE-NBR > 0 /* If temp storage is there*/
   && NE0DW-CURR-PAGE-NBR <= NE0DW-HIGH-PAGE-NBR)
    NE0DS-GET-TMP-STG(); /* Get current page*/
  end

  NE0DW-02-INDEX = 1;
  while (NE0DW-02-INDEX <= 14) /* 14 rows per screen*/

    NE0DM101.NE0DM-101-SEL[NE0DW-02-INDEX] = NE0DW-01-SEL[NE0DW-02-INDEX]; /* ne0dm-101-select*/

    NE0DM101.NE0DM-101-DTL-KUCCOID[NE0DW-02-INDEX] = NE0DW-01-KUCCOID[NE0DW-02-INDEX];

    NE0DM101.NE0DM-101-DTL-XGPCD[NE0DW-02-INDEX] = NE0DW-01-XGPCD[NE0DW-02-INDEX];

        /* format style*/

    if (NE0DW-01-SY1STNBR[NE0DW-02-INDEX] == " ")
      NE0DW-STYLE = " ";
    else
      NE0DW-SY1STNBR = NE0DW-01-SY1STNBR[NE0DW-02-INDEX];
      NE0DW-HYPHEN-1 = "-";
      NE0DW-SY2CLRID = NE0DW-01-SY2CLRID[NE0DW-02-INDEX];
      NE0DW-HYPHEN-2 = "-";
      NE0DW-XDMCD = NE0DW-01-XDMCD[NE0DW-02-INDEX];
    end
    NE0DM101.NE0DM-101-DTL-STYLE[NE0DW-02-INDEX] = NE0DW-STYLE;

    NE0DM101.NE0DM-101-DTL-XQACD[NE0DW-02-INDEX] = NE0DW-01-XQACD[NE0DW-02-INDEX];

    NE0DM101.NE0DM-101-DTL-XUMCD[NE0DW-02-INDEX] = NE0DW-01-XUMCD[NE0DW-02-INDEX];

    NE0DM101.NE0DM-101-DTL-NE-STAT-CD[NE0DW-02-INDEX] = NE0DW-01-NE-STAT-CD[NE0DW-02-INDEX];

        /* format order number*/

    NE0DW-OP1CUOID = NE0DW-01-OP1CUOID[NE0DW-02-INDEX];
    NE0DW-OP1NORID = NE0DW-01-OP1NORID[NE0DW-02-INDEX];
    NE0DM101.NE0DM-101-DTL-ORDER-NBR[NE0DW-02-INDEX] = NE0DW-ORDER-NBR;

    NE0DM101.NE0DM-101-DTL-NE-IVC-UNT[NE0DW-02-INDEX] = NE0DW-01-NE-IVC-UNT[NE0DW-02-INDEX];

    NE0DM101.NE0DM-101-DTL-NE-SHP-UNT[NE0DW-02-INDEX] = NE0DW-01-NE-SHP-UNT[NE0DW-02-INDEX];

    NE0DM101.NE0DM-101-DTL-NE-IVC-GL-POST-MO[NE0DW-02-INDEX] = NE0DW-01-NE-IVC-GL-POST-MO[NE0DW-02-INDEX];

    NE0DM101.NE0DM-101-DTL-NE-IVC-CLEAR-MO[NE0DW-02-INDEX] = NE0DW-01-NE-IVC-CLEAR-MO[NE0DW-02-INDEX];

    NE0DW-02-INDEX = NE0DW-02-INDEX + 1;

  end

  NE0DM101.NE0DM-FM-PAGE = NE0DW-CURR-PAGE-NBR;
  NE0DM101.NE0DM-TO-PAGE = NE0DW-HIGH-PAGE-NBR;
  if (NE0DM101.NE0DM-TO-PAGE == 0)
    NE0DM101.NE0DM-TO-PAGE = 1; /* show to page on map*/
  end

  NE0DS-MAP101-MODE();

end // end NE0DS-BUILD-MAP101

// Build map from temp storage
Function NE0DS-BUILD-MAP102()
   /* *****************************************************/
   /* Build map from temp storage for Map 102*/
   /* *****************************************************/

  NLXREC.NLXCPROC = "NE0DS-BUILD-MAP102";

  if (NE0DW-CURR-PAGE-NBR == NE0DW-MAP-PAGE-NBR)
  /* continue*/
  else
    move NE0DW-MAP-PAGE-NBR to NE0DW-CURR-PAGE-NBR withV60Compat;
  end

  set NE0DW01 empty;

  if (NE0DW-HIGH-PAGE-NBR > 0 /* If temp storage is there*/
   && NE0DW-CURR-PAGE-NBR <= NE0DW-HIGH-PAGE-NBR)
    NE0DS-GET-TMP-STG(); /* Get current page*/
  end

  NE0DW-02-INDEX = 1;
  while (NE0DW-02-INDEX <= 14) /* 14 rows per screen*/

    NE0DM102.NE0DM-102-SEL[NE0DW-02-INDEX] = NE0DW-01-SEL[NE0DW-02-INDEX]; /* ne0dm-102-select*/

    NE0DM102.NE0DM-102-DTL-KUCCOID[NE0DW-02-INDEX] = NE0DW-01-KUCCOID[NE0DW-02-INDEX];

    NE0DM102.NE0DM-102-DTL-XGPCD[NE0DW-02-INDEX] = NE0DW-01-XGPCD[NE0DW-02-INDEX];

        /* format style*/

    if (NE0DW-01-SY1STNBR[NE0DW-02-INDEX] == " ")
      NE0DW-STYLE = " ";
    else
      NE0DW-SY1STNBR = NE0DW-01-SY1STNBR[NE0DW-02-INDEX];
      NE0DW-HYPHEN-1 = "-";
      NE0DW-SY2CLRID = NE0DW-01-SY2CLRID[NE0DW-02-INDEX];
      NE0DW-HYPHEN-2 = "-";
      NE0DW-XDMCD = NE0DW-01-XDMCD[NE0DW-02-INDEX];
    end
    NE0DM102.NE0DM-102-DTL-STYLE[NE0DW-02-INDEX] = NE0DW-STYLE;

    NE0DM102.NE0DM-102-DTL-NE-CST-SRC-ID[NE0DW-02-INDEX] = NE0DW-01-NE-CST-SRC-ID[NE0DW-02-INDEX];

    NE0DM102.NE0DM-102-DTL-NE-SRC-IVC-ID[NE0DW-02-INDEX] = NE0DW-01-NE-SRC-IVC-ID[NE0DW-02-INDEX];

    NE0DM102.NE0DM-102-DTL-NE-CURR-STD-UNTCST[NE0DW-02-INDEX] = NE0DW-01-NE-CURR-STD-UNTCST[NE0DW-02-INDEX];

    NE0DM102.NE0DM-102-DTL-NE-LST-STD-UNT-CST[NE0DW-02-INDEX] = NE0DW-01-NE-LST-STD-UNT-CST[NE0DW-02-INDEX];

    NE0DM102.NE0DM-102-DTL-NE-POST-UNT-CST[NE0DW-02-INDEX] = NE0DW-01-NE-POST-UNT-CST[NE0DW-02-INDEX];

    NE0DW-02-INDEX = NE0DW-02-INDEX + 1;

  end

  NE0DM102.NE0DM-FM-PAGE = NE0DW-CURR-PAGE-NBR;
  NE0DM102.NE0DM-TO-PAGE = NE0DW-HIGH-PAGE-NBR;
  if (NE0DM102.NE0DM-TO-PAGE == 0)
    NE0DM101.NE0DM-TO-PAGE = 1; /* show to page on map*/
  end

  NE0DS-MAP102-MODE();

end // end NE0DS-BUILD-MAP102

// Build map from temp storage
Function NE0DS-BUILD-MAP103()
   /* *****************************************************/
   /* Build map from temp storage for Map 103*/
   /* *****************************************************/

  NLXREC.NLXCPROC = "NE0DS-BUILD-MAP103";

  if (NE0DW-CURR-PAGE-NBR == NE0DW-MAP-PAGE-NBR)
  /* continue*/
  else
    move NE0DW-MAP-PAGE-NBR to NE0DW-CURR-PAGE-NBR withV60Compat;
  end

  set NE0DW01 empty;

  if (NE0DW-HIGH-PAGE-NBR > 0 /* If temp storage is there*/
   && NE0DW-CURR-PAGE-NBR <= NE0DW-HIGH-PAGE-NBR)
    NE0DS-GET-TMP-STG(); /* Get current page*/
  end

  NE0DW-02-INDEX = 1;
  while (NE0DW-02-INDEX <= 14) /* 14 rows per screen*/

    NE0DM103.NE0DM-103-SEL[NE0DW-02-INDEX] = NE0DW-01-SEL[NE0DW-02-INDEX]; /* ne0dm-103-select*/

    NE0DM103.NE0DM-103-DTL-KUCCOID[NE0DW-02-INDEX] = NE0DW-01-KUCCOID[NE0DW-02-INDEX];

    NE0DM103.NE0DM-103-DTL-XGPCD[NE0DW-02-INDEX] = NE0DW-01-XGPCD[NE0DW-02-INDEX];

        /* format style*/

    if (NE0DW-01-SY1STNBR[NE0DW-02-INDEX] == " ")
      NE0DW-STYLE = " ";
    else
      NE0DW-SY1STNBR = NE0DW-01-SY1STNBR[NE0DW-02-INDEX];
      NE0DW-HYPHEN-1 = "-";
      NE0DW-SY2CLRID = NE0DW-01-SY2CLRID[NE0DW-02-INDEX];
      NE0DW-HYPHEN-2 = "-";
      NE0DW-XDMCD = NE0DW-01-XDMCD[NE0DW-02-INDEX];
    end
    NE0DM103.NE0DM-103-DTL-STYLE[NE0DW-02-INDEX] = NE0DW-STYLE;

         /* format G/L code*/

    if (NE0DW-01-GLAENT[NE0DW-02-INDEX] == " ") /* blank row*/
      NE0DW-GL-CODE = " ";
    else
      NE0DW-GLAENT = NE0DW-01-GLAENT[NE0DW-02-INDEX];
      NE0DW-GLARCID = NE0DW-01-GLARCID[NE0DW-02-INDEX];
      NE0DW-GLANTAC = NE0DW-01-GLANTAC[NE0DW-02-INDEX];
      NE0DW-GLASUB = NE0DW-01-GLASUB[NE0DW-02-INDEX];
      NE0DW-GLAPRJ = NE0DW-01-GLAPRJ[NE0DW-02-INDEX];
    end
    NE0DM103.NE0DM-103-DTL-GL-CODE[NE0DW-02-INDEX] = NE0DW-GL-CODE;

    NE0DM103.NE0DM-103-DTL-FY1FCTYC[NE0DW-02-INDEX] = NE0DW-01-FY1FCTYC[NE0DW-02-INDEX];

    NE0DM103.NE0DM-103-DTL-XWHCD[NE0DW-02-INDEX] = NE0DW-01-XWHCD[NE0DW-02-INDEX];

    NE0DW-02-INDEX = NE0DW-02-INDEX + 1;

  end

  NE0DM103.NE0DM-FM-PAGE = NE0DW-CURR-PAGE-NBR;
  NE0DM103.NE0DM-TO-PAGE = NE0DW-HIGH-PAGE-NBR;
  if (NE0DM103.NE0DM-TO-PAGE == 0)
    NE0DM101.NE0DM-TO-PAGE = 1; /* show to page on map*/
  end

  NE0DS-MAP103-MODE();

end // end NE0DS-BUILD-MAP103

// Build map from temp storage
Function NE0DS-BUILD-MAP200()
   /* *****************************************************/
   /* Build map from temp storage.*/
   /* *****************************************************/

  NLXREC.NLXCPROC = "NE0DS-BUILD-MAP200";

  converseLib.clearScreen();
  set NE0DM200 initial;

  NE0DM200.XXXRVNBR = "00"; /* revision nbr*/
  NE0DM200.XXXMAPNM = "NE0DM200"; /* map name*/
  NE0DM200.XXXPRCNM = "NE0D200"; /* process name*/
  NE0DM200.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/

   /* **************************************/
   /* Build header of MAP200*/
   /* **************************************/

  NE0DM200.NE0DM-200-NE-IVC-GL-POST-MO = NE0DW-01-NE-IVC-GL-POST-MO[NE0DW-02-INDEX];
  NE0DM200.NE0DM-200-KUCCOID = NE0DW-01-KUCCOID[NE0DW-02-INDEX];

       /* get customer name description*/

  KUCREC.KUCCOID = NE0DW-01-KUCCOID[NE0DW-02-INDEX];
  NE0DS-S-VCMPNY01();
  NE0DM200.NE0DM-200-KUCCONM = KUCREC.KUCCONM;

       /* format order number*/

  NE0DW-OP1CUOID = NE0DW-01-OP1CUOID[NE0DW-02-INDEX];
  NE0DW-OP1NORID = NE0DW-01-OP1NORID[NE0DW-02-INDEX];
  NE0DM200.NE0DM-200-ORDER-NBR = NE0DW-ORDER-NBR;

  NE0DM200.NE0DM-200-NIDIVCID = NE0DW-01-NIDIVCID[NE0DW-02-INDEX];

  NE0DM200.NE0DM-200-NE-CST-SRC-ID = NE0DW-01-NE-CST-SRC-ID[NE0DW-02-INDEX];
  NE0DM200.NE0DM-200-XGPCD = NE0DW-01-XGPCD[NE0DW-02-INDEX];

       /* format style*/

  NE0DW-SY1STNBR = NE0DW-01-SY1STNBR[NE0DW-02-INDEX];
  NE0DW-SY2CLRID = NE0DW-01-SY2CLRID[NE0DW-02-INDEX];
  NE0DW-XDMCD = NE0DW-01-XDMCD[NE0DW-02-INDEX];
  NE0DM200.NE0DM-200-STYLE = NE0DW-STYLE;

  NE0DM200.NE0DM-200-NE-IVC-UNT = NE0DW-01-NE-IVC-UNT[NE0DW-02-INDEX];
  NE0DM200.NE0DM-200-NE-CURR-STD-UNTCST = NE0DW-01-NE-CURR-STD-UNTCST[NE0DW-02-INDEX];
  NE0DM200.NE0DM-200-NE-LST-STD-UNT-CST = NE0DW-01-NE-LST-STD-UNT-CST[NE0DW-02-INDEX];
  NE0DM200.NE0DM-200-NE-POST-UNT-CST = NE0DW-01-NE-POST-UNT-CST[NE0DW-02-INDEX];


end // end NE0DS-BUILD-MAP200

// BUILD TEMP STRG FROM VNEINV01
Function NE0DS-BUILD-TEMP()
  /* ******************************************************************/
  /* This statement group build temp storage from the VNEINV01 table.*/
  /* ******************************************************************/

  NLXREC.NLXCPROC = "NE0DS-BUILD-TEMP";

  NE0DW-02-INDEX = 0; /* NE0DW01 AND MAP DETAIL INDEX*/
  set NE0DW01 empty;

   /* **************************************/
   /* Build VNEINV01 cursor key*/
   /* **************************************/

  set VNEINV01 empty;

  if (NEWREC.NEW-KUCCOID == 0)
    VNEINV01.KUCCOID = -1;
  else
    VNEINV01.KUCCOID = NEWREC.NEW-KUCCOID;
  end

  if (NEWREC.NEW-CUST-ORDID == 0)
    VNEINV01.OP1CUOID = -1;
  else
    VNEINV01.OP1CUOID = NEWREC.NEW-CUST-ORDID;
  end

  if (NEWREC.NEW-NIKE-ORDID == 0)
    VNEINV01.OP1NORID = -1;
  else
    VNEINV01.OP1NORID = NEWREC.NEW-NIKE-ORDID;
  end

  if (NEWREC.NEW-XGPCD == " ")
    VNEINV01.XGPCD = "*";
  else
    VNEINV01.XGPCD = NEWREC.NEW-XGPCD;
  end

  if (NEWREC.NEW-STYLE-CD == " ")
    VNEINV01.SY1STNBR = "*";
  else
    VNEINV01.SY1STNBR = NEWREC.NEW-STYLE-CD;
  end

  if (NEWREC.NEW-COLOR-CD == " ")
    VNEINV01.SY2CLRID = "*";
  else
    VNEINV01.SY2CLRID = NEWREC.NEW-COLOR-CD;
  end

  if (NEWREC.NEW-DIM-CD == " ")
    VNEINV01.XDMCD = "*";
  else
    VNEINV01.XDMCD = NEWREC.NEW-DIM-CD;
  end

  if (NEWREC.NEW-QUALITY-CD == " ")
    VNEINV01.XQACD = "*";
  else
    VNEINV01.XQACD = NEWREC.NEW-QUALITY-CD;
  end

  NE0DS-S1-VNEINV01(); /* Open INVENTORY cursor*/

   /* **************************************/
   /* Move Inv items to temp storage*/
   /* **************************************/

  NE0DS-N1-VNEINV01(); /* Priming Fetch (first item)*/

  if (SQLCA.VAGen_SQLCODE == 100) /* no items found*/
    NE0DS-C1-VNEINV01(); /* Close P.O. item cursor*/
    converseLib.validationFailed(92);
    NLXREC.NLXERRF = "Y";
    return;
  end

  while (SQLCA.VAGen_SQLCODE == 0)
    NE0DS-LOAD-TEMP(); /* Load item to temp storage*/
    NE0DS-N1-VNEINV01(); /* Fetch next item*/
  end

  NE0DS-C1-VNEINV01(); /* Close P.O. item cursor*/

  if (NE0DW-02-INDEX > 0)
    NE0DS-ADD-TMP-STG(); /* Add last page.*/
  end


end // end NE0DS-BUILD-TEMP

// Close C1 on VNEINV01
Function NE0DS-C1-VNEINV01()
   /* *****************************************************/
   /* Close cursor C1 on vneinv01*/
   /* *****************************************************/

  NLXREC.NLXCPROC = "NE0DS-C1-VNEINV01";

   /* close cursor on - vneinv01*/

  call "IO6970" ("C1", SQLCA, VNEINV01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "C1    ";
    TA1REC.TA1LOCAT[3] = "IO6970";
    TA1REC.TA1DBASE = "DNILO ";
    TA1REC.TA1TBLVU = "VNEINV01";

    NE0DW-02-ABEND-KEY = " ";

    NE0DW-02-ABEND-CUST = NEWREC.NEW-KUCCOID;
    NE0DW-02-ABEND-FILLER-ORD = "SO:";
    NE0DW-02-ABEND-OP1CUOID = NEWREC.NEW-CUST-ORDID;
    NE0DW-02-ABEND-OP1NORID = NEWREC.NEW-NIKE-ORDID;
    NE0DW-02-ABEND-FILLER-STY = "STY";
    NE0DW-02-ABEND-SY1STNBR = NEWREC.NEW-STYLE-CD;
    NE0DW-02-ABEND-HYPEN-1 = "-";
    NE0DW-02-ABEND-SY2CLRID = NEWREC.NEW-COLOR-CD;
    NE0DW-02-ABEND-HYPHEN-2 = "-";
    NE0DW-02-ABEND-XDMCD = NEWREC.NEW-DIM-CD;

    move NE0DW-02-ABEND-KEY to TA1TBLKE withV60Compat;

    XPNL005(); /* abort routine*/
  end

end // end NE0DS-C1-VNEINV01

// Close C1 on Vpiitm01
Function NE0DS-C1-VPIITM01()
   /* *****************************************************/
   /* Close cursor C1 on vpiitm01*/
   /* *****************************************************/

  NLXREC.NLXCPROC = "NE0DS-C1-VPIITM01";

   /* close cursor on - vpiitm01*/

  call "IO4480" ("C1", SQLCA, VPIITM01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "C1    ";
    TA1REC.TA1LOCAT[3] = "IO4480";
    TA1REC.TA1DBASE = "DNILO ";
    TA1REC.TA1TBLVU = "VPIITM01";

    NE0DW-02-ABEND-KEY = " ";

    NE0DW-02-ABEND-FILLER-STY = "STY";
    NE0DW-02-ABEND-SY1STNBR = VPIITM01.SY1STNBR;
    NE0DW-02-ABEND-HYPEN-1 = "-";
    NE0DW-02-ABEND-SY2CLRID = VPIITM01.SY2CLRID;
    NE0DW-02-ABEND-HYPHEN-2 = "-";
    NE0DW-02-ABEND-XDMCD = VPIITM01.XDMCD;

    move NE0DW-02-ABEND-KEY to TA1TBLKE withV60Compat;

    XPNL005(); /* abort routine*/
  end

end // end NE0DS-C1-VPIITM01

// Close C2 on op2rec
Function NE0DS-C2-OP2REC()
   /* *****************************************************/
   /* Close cursor c2 on op2rec*/
   /* *****************************************************/

  NLXREC.NLXCPROC = "NE0DS-C2-OP2REC";

   /* close cursor on - op2rec*/

  call "IO0440" ("C2", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "C2    ";
    TA1REC.TA1LOCAT[3] = "IO0440";
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "OP2REC";

    NE0DW-02-ABEND-KEY = " ";

    NE0DW-02-ABEND-FILLER-ORD = "SO:";
    NE0DW-02-ABEND-OP1CUOID = OP2REC.OP1CUOID;
    NE0DW-02-ABEND-OP1NORID = OP2REC.OP1NORID;
    NE0DW-02-ABEND-FILLER-STY = "STY";
    NE0DW-02-ABEND-SY1STNBR = OP2REC.SY1STNBR;
    NE0DW-02-ABEND-HYPEN-1 = "-";
    NE0DW-02-ABEND-SY2CLRID = OP2REC.SY2CLRID;
    NE0DW-02-ABEND-HYPHEN-2 = "-";
    NE0DW-02-ABEND-XDMCD = OP2REC.XDMCD;

    move NE0DW-02-ABEND-KEY to TA1TBLKE withV60Compat;

    XPNL005(); /* abort routine*/
  end

end // end NE0DS-C2-OP2REC

// verify GL resp, natrl, sub
Function NE0DS-CHECK-200-GL()

  NLXREC.NLXCPROC = "NE0DS-CHECK-200-GL";

  set VNLGLA01 empty;

  VNLGLA01.GLAENT = "*";
  VNLGLA01.GLARCID = NE0DM-200-GL-RSP-CTR-ID;
  VNLGLA01.GLANTAC = NE0DM-200-GL-NATRL-ACCT-ID;
  VNLGLA01.GLASUB = NE0DM-200-GL-SUB-ACCT-ID;

  call "IO4610" ("S1", SQLCA, VNLGLA01) {isNoRefresh = yes, isExternal = yes}; /* Declare Cursor*/

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "S1     "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "IO4610 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO "; /* data base*/
    TA1REC.TA1TBLVU = "VNLGLA01"; /* table view*/
    XPNL005(); /* abend routine*/
  end

  call "IO4610" ("N1", SQLCA, VNLGLA01) {isNoRefresh = yes, isExternal = yes}; /* Select row*/

  if (SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(4); /* data base busy*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 0) /* GL row found*/
     /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* GL row not found*/
        NLXREC.NLXERRF = "Y";
        set NE0DM-200-GL-RSP-CTR-ID cursor, bold;
        set NE0DM-200-GL-NATRL-ACCT-ID bold;
        set NE0DM-200-GL-SUB-ACCT-ID bold;
        converseLib.validationFailed(172); /* invalid GL code combination*/
      else
        if (SQLCA.VAGen_SQLCODE != 0
         && SQLCA.VAGen_SQLCODE != 100)
          TA1REC.TA1LOCAT[2] = "N1     "; /* data base action*/
          TA1REC.TA1LOCAT[3] = "IO4610 "; /* io module*/
          TA1REC.TA1DBASE = "DNILO "; /* data base*/
          TA1REC.TA1TBLVU = "VNLGLA01"; /* table view*/
          XPNL005(); /* abend routine*/
        end
      end
    end
  end

  call "IO4610" ("C1", SQLCA, VNLGLA01) {isNoRefresh = yes, isExternal = yes}; /* Close cursor*/

  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "C1     "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "IO4610 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO "; /* data base*/
    TA1REC.TA1TBLVU = "VNLGLA01"; /* table view*/
    XPNL005(); /* abend routine*/
  end

end // end NE0DS-CHECK-200-GL

// verify GL resp, natrl, sub
Function NE0DS-CHECK-300-GL()

  NLXREC.NLXCPROC = "NE0DS-CHECK-300-GL";

  set VNLGLA01 empty;

  VNLGLA01.GLAENT = "*";
  VNLGLA01.GLARCID = NE0DM-300-GL-RSP-CTR-ID;
  VNLGLA01.GLANTAC = NE0DM-300-GL-NATRL-ACCT-ID;
  VNLGLA01.GLASUB = NE0DM-300-GL-SUB-ACCT-ID;

  call "IO4610" ("S1", SQLCA, VNLGLA01) {isNoRefresh = yes, isExternal = yes}; /* Declare Cursor*/

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "S1     "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "IO4610 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO "; /* data base*/
    TA1REC.TA1TBLVU = "VNLGLA01"; /* table view*/
    XPNL005(); /* abend routine*/
  end

  call "IO4610" ("N1", SQLCA, VNLGLA01) {isNoRefresh = yes, isExternal = yes}; /* Select row*/

  if (SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(4); /* data base busy*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 0) /* GL row found*/
     /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* GL row not found*/
        NLXREC.NLXERRF = "Y";
        set NE0DM-300-GL-RSP-CTR-ID cursor, bold;
        set NE0DM-300-GL-NATRL-ACCT-ID bold;
        set NE0DM-300-GL-SUB-ACCT-ID bold;
        converseLib.validationFailed(172); /* invalid GL code combination*/
      else
        if (SQLCA.VAGen_SQLCODE != 0
         && SQLCA.VAGen_SQLCODE != 100)
          TA1REC.TA1LOCAT[2] = "N1     "; /* data base action*/
          TA1REC.TA1LOCAT[3] = "IO4610 "; /* io module*/
          TA1REC.TA1DBASE = "DNILO "; /* data base*/
          TA1REC.TA1TBLVU = "VNLGLA01"; /* table view*/
          XPNL005(); /* abend routine*/
        end
      end
    end
  end

  call "IO4610" ("C1", SQLCA, VNLGLA01) {isNoRefresh = yes, isExternal = yes}; /* Close cursor*/

  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "C1     "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "IO4610 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO "; /* data base*/
    TA1REC.TA1TBLVU = "VNLGLA01"; /* table view*/
    XPNL005(); /* abend routine*/
  end

end // end NE0DS-CHECK-300-GL

// update vneinv01 with wo
Function NE0DS-CHG-STAT-WO()
  /* ******************************************************************/
  /* This statement group is used to format the the VNEINV01 in order*/
  /* to UPDATE a VNEINV01 record with a ne-stat-cd of of 'WO'.*/
  /* ******************************************************************/

  NLXREC.NLXCPROC = "NE0DS-CHG-STAT-WO";

  set VNEINV01 empty;

   /* *****************************************/
   /* get current date and time for zz family*/
   /* *****************************************/

  XX0XS01();

  VNEINV01.ZZZSDT = NE0DW-01-ZZZSDT[NE0DW-02-INDEX];

  VNEINV01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VNEINV01.ZZZCHGTM = XX0XW01.XX0XWTIM;

  NE0DS-FMAT-POST-MO();

  VNEINV01.OP1CUOID = NE0DW-01-OP1CUOID[NE0DW-02-INDEX];
  VNEINV01.OP1NORID = NE0DW-01-OP1NORID[NE0DW-02-INDEX];
  VNEINV01.NIDIVCID = NE0DW-01-NIDIVCID[NE0DW-02-INDEX];
  VNEINV01.XGPCD = NE0DW-01-XGPCD[NE0DW-02-INDEX];
  VNEINV01.SY1STNBR = NE0DW-01-SY1STNBR[NE0DW-02-INDEX];
  VNEINV01.SY2CLRID = NE0DW-01-SY2CLRID[NE0DW-02-INDEX];
  VNEINV01.XDMCD = NE0DW-01-XDMCD[NE0DW-02-INDEX];
  VNEINV01.XQACD = NE0DW-01-XQACD[NE0DW-02-INDEX];
  VNEINV01.NE-CST-SRC-ID = NE0DW-01-NE-CST-SRC-ID[NE0DW-02-INDEX];
  VNEINV01.NE-SRC-IVC-ID = NE0DW-01-NE-SRC-IVC-ID[NE0DW-02-INDEX];
  VNEINV01.KUCCOID = NE0DW-01-KUCCOID[NE0DW-02-INDEX];
  VNEINV01.KUMSTRID = NE0DW-01-KUMSTRID[NE0DW-02-INDEX];
  VNEINV01.PC2CUXID = NE0DW-01-PC2CUXID[NE0DW-02-INDEX];
  VNEINV01.OP1PARTN = NE0DW-01-OP1PARTN[NE0DW-02-INDEX];
  VNEINV01.TSFSHPID = NE0DW-01-TSFSHPID[NE0DW-02-INDEX];
  VNEINV01.PC3PONBR = NE0DW-01-PC3PONBR[NE0DW-02-INDEX];
  VNEINV01.NE-STAT-CD = "WO";
  VNEINV01.NE-IVC-UNT = NE0DW-01-NE-IVC-UNT[NE0DW-02-INDEX];
  VNEINV01.NE-SHP-UNT = NE0DW-01-NE-SHP-UNT[NE0DW-02-INDEX];
  VNEINV01.XUMCD = NE0DW-01-XUMCD[NE0DW-02-INDEX];
  VNEINV01.NE-CURR-STD-UNTCST = NE0DW-01-NE-CURR-STD-UNTCST[NE0DW-02-INDEX];
  VNEINV01.NE-ORIG-STD-UNTCST = NE0DW-01-NE-ORIG-STD-UNTCST[NE0DW-02-INDEX];
  VNEINV01.NE-LST-STD-UNT-CST = NE0DW-01-NE-LST-STD-UNT-CST[NE0DW-02-INDEX];
  VNEINV01.NE-POST-UNT-CST = NE0DW-01-NE-POST-UNT-CST[NE0DW-02-INDEX];
  VNEINV01.GLAENT = NE0DW-01-GLAENT[NE0DW-02-INDEX];
  VNEINV01.GLARCID = NE0DW-01-GLARCID[NE0DW-02-INDEX];
  VNEINV01.GLANTAC = NE0DW-01-GLANTAC[NE0DW-02-INDEX];
  VNEINV01.GLASUB = NE0DW-01-GLASUB[NE0DW-02-INDEX];
  VNEINV01.GLAPRJ = NE0DW-01-GLAPRJ[NE0DW-02-INDEX];
  VNEINV01.NE-IVC-GL-POST-MO = NE0DW-02-WS-FORMAT-CCYYMM;
  VNEINV01.NE-IVC-CLEAR-MO = NE0DW-01-NE-IVC-CLEAR-MO[NE0DW-02-INDEX];
  VNEINV01.FY1FCTYC = NE0DW-01-FY1FCTYC[NE0DW-02-INDEX];
  VNEINV01.XWHCD = NE0DW-01-XWHCD[NE0DW-02-INDEX];
  VNEINV01.ZPSCD = NE0DW-01-ZPSCD[NE0DW-02-INDEX];
  VNEINV01.NL-PMT-MTHD-CD = NE0DW-01-NL-PMT-MTHD-CD[NE0DW-02-INDEX];
  VNEINV01.ZZZCHGCT = NE0DW-01-ZZZCHGCT[NE0DW-02-INDEX];

  NE0DS-U-VNEINV01();


end // end NE0DS-CHG-STAT-WO

// Edit the page number
Function NE0DS-CK-PAGE-NBR()
  /* ******************************************************************/
  /* This edit test the changing of the map page number to cause*/
  /* paging to a specific page.  this will only be done if enter was*/
  /* pressed*/
  /* ******************************************************************/

  NLXREC.NLXCPROC = "NE0DS-CK-PAGE-NBR";
  if (NE0DW-MAP-PAGE-NBR > NE0DW-HIGH-PAGE-NBR
   || NE0DW-MAP-PAGE-NBR == 0)
    converseLib.validationFailed(21);
    NLXREC.NLXERRF = "Y";
  else
    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf10
     || converseVar.eventKey is pf11)
      /* continue*/
    else
      if (NE0DW-MAP-PAGE-NBR != NE0DW-CURR-PAGE-NBR)
        converseLib.validationFailed(93); /* pf10,11 and enter only valid keys*/
        NLXREC.NLXERRF = "Y";
      end
    end
  end


end // end NE0DS-CK-PAGE-NBR

// PURGE TEMP STORAGE
Function NE0DS-DEL-TMP-STG()
   /* ***********************************************************************/
   /* PURGE temp storage*/
   /*  */
   /*  */
   /* ***********************************************************************/

  NLXREC.NLXCPROC = "NE0DS-DEL-TMP-STG";

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (NE0DW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(23); /* Indicate system error*/

  XPNL-006(); /* abend routine*/


end // end NE0DS-DEL-TMP-STG

// edit warehouse code
Function NE0DS-EDT-WH-CD()
   /* *****************************************************/
   /* Edit Warehouse code*/
   /* *****************************************************/

  NLXREC.NLXCPROC = "NE0DS-EDT-WH-CD";

  if (NE0DM-300-XWHCD == " ")
    set NE0DM-300-XWHCD initialAttributes;
   /* continue*/
  else
    if (NE0DM-300-XWHCD in XWHTBL.XWHCD
     && XWHTBL.XXXSTAT[sysVar.arrayIndex] == "A") /* warehouse row active*/
  /* continue*/
    else
      set NE0DM-300-XWHCD cursor, bold, modified;
      converseLib.validationFailed(109);
      NLXREC.NLXERRF = "Y";
      return;
    end
  end


end // end NE0DS-EDT-WH-CD

// update vneinv01 with wo
Function NE0DS-FMAT-POST-MO()
  /* ******************************************************************/
  /* This statement group formats the current gl-post-month*/
  /* ******************************************************************/

  NE0DW-02-WS-FORMAT-CC = XX0XW01.XX0XW19;
  NE0DW-02-WS-FORMAT-YY = XX0XW01.XX0XWYY;
  NE0DW-02-WS-FORMAT-MM = XX0XW01.XX0XWMM;

   /*  */
   /* ------------ y2k out begin ------------*/
   /*  */
   /* IF NE0DW-02-WS-FORMAT-MM = 01;*/
   /* NE0DW-02-WS-FORMAT-YY = NE0DW-02-WS-FORMAT-YY - 1;*/
   /* NE0DW-02-WS-FORMAT-MM = 12;*/
   /* ELSE;*/
   /* NE0DW-02-WS-FORMAT-MM = NE0DW-02-WS-FORMAT-MM - 1;*/
   /* END;*/
   /*  */
   /* ------------ y2k out end --------------*/
   /*  */

   /*  */
   /* ------------ y2k in  begin ------------*/
   /*  */
  if (NE0DW-02-WS-FORMAT-MM == 01)
    if (NE0DW-02-WS-FORMAT-YY == 0)
      NE0DW-02-WS-FORMAT-YY = 99;
      NE0DW-02-WS-FORMAT-CC = 19;
    else
      NE0DW-02-WS-FORMAT-YY = NE0DW-02-WS-FORMAT-YY - 1;
      if (NE0DW-02-WS-FORMAT-YY > 60)
        NE0DW-02-WS-FORMAT-CC = 19;
      else
        NE0DW-02-WS-FORMAT-CC = 20;
      end
    end
    NE0DW-02-WS-FORMAT-MM = 12;
  else
    NE0DW-02-WS-FORMAT-MM = NE0DW-02-WS-FORMAT-MM - 1;
  end
   /*  */
   /* ------------ y2k in  end --------------*/
   /*  */
end // end NE0DS-FMAT-POST-MO

// get cust info from invoice
Function NE0DS-GET-CUST-IVC()
   /* *****************************************************/
   /* Get customer using invoice info.*/
   /* *****************************************************/


  NLXREC.NLXCPROC = "NE0DS-GET-CUST-IVC";

  KUCREC.KUCCOID = VPIHDR01.KUCCOID;
  NE0DS-S-VCMPNY01(); /* use invoice to get customer*/
  if (SQLCA.VAGen_SQLCODE == 0
   && KUCREC.XXXSTAT == "A")
    NE0DM-200-RECLASS-KUCCOID = VPIHDR01.KUCCOID;
    set NE0DM200.NE0DM-200-RECLASS-NIDIVCID initialAttributes;
  else
    set NE0DM200.NE0DM-200-RECLASS-NIDIVCID modified, cursor, bold;
    NLXREC.NLXERRF = "Y";
    converseLib.validationFailed(147); /* no cust found for entered invoice*/
    return;
  end


end // end NE0DS-GET-CUST-IVC

// get customer name
Function NE0DS-GET-CUST-NM()
   /* *****************************************************/
   /* get customer name*/
   /* This statement group will only be executed when either*/
   /* an SO or Invoice is entered, because the customer information*/
   /* can be derived.                          .*/
   /* *****************************************************/


  NLXREC.NLXCPROC = "NE0DS-GET-CUST-NM";

  NE0DS-S-VCMPNY01();
  if (SQLCA.VAGen_SQLCODE == 100)
    set NE0DM-300-KUCCOID cursor, bold, modified;
    converseLib.validationFailed(74); /* invalid customer*/
    NLXREC.NLXERRF = "Y";
    return;
  else
    NE0DM-300-KUCCONM = KUCREC.KUCCONM;
    set NE0DM-300-KUCCOID initialAttributes;
  end


end // end NE0DS-GET-CUST-NM

// get cust info from SO
Function NE0DS-GET-CUST-SO()
   /* *****************************************************/
   /* Get Customer using op1rec.  S.O.*/
   /* *****************************************************/


  NLXREC.NLXCPROC = "NE0DS-GET-CUST-SO";

  KUCREC.KUCCOID = OP1REC.KUCCOID;
  NE0DS-S-VCMPNY01(); /* get customer using op1rec*/
  if (SQLCA.VAGen_SQLCODE == 0
   && KUCREC.XXXSTAT == "A")
    NE0DM-200-RECLASS-KUCCOID = OP1REC.KUCCOID;
    set NE0DM-200-RECLASS-SO-OP1CUOID initialAttributes;
  else
    set NE0DM-200-RECLASS-SO-OP1CUOID cursor, modified, bold;
    NLXREC.NLXERRF = "Y";
    converseLib.validationFailed(148);
    return;
  end


end // end NE0DS-GET-CUST-SO

// get prdcuxid
Function NE0DS-GET-PC2CUXID()
   /* *****************************************************/
   /* Get customer Cross Reference*/
   /* *****************************************************/


  NLXREC.NLXCPROC = "NE0DS-GET-PC2CUXID";

      /* *****************************************/
      /* Derive Customer Cross Reference*/
      /* after a valid customer has been established*/
      /* *****************************************/

  PC2REC.XGPCD = NE0DM-300-XGPCD;
  PC2REC.XNXCD = 0; /* default to 0*/

  NE0DS-SA-PC2REC();

  if (SQLCA.VAGen_SQLCODE == 0)
    /* TCS change begin 08/24/00*/
    if (PC2REC.PC2CUXID == "CNFTL" || 
    PC2REC.PC2CUXID == "CANFL" || 
    PC2REC.PC2CUXID == "CAFTL")
      NE0DM-300-PC2CUXID = "FT1SA";
    end
    if (PC2REC.PC2CUXID == "CMFTL")
      NE0DM-300-PC2CUXID = "FT2SA";
    end
    if (PC2REC.PC2CUXID == "CBATA")
      NE0DM-300-PC2CUXID = "BT1SA";
    end
    if (PC2REC.PC2CUXID == "CCHAM" || 
    PC2REC.PC2CUXID == "CANCH")
      NE0DM-300-PC2CUXID = "CH1SA";
    end
    if (PC2REC.PC2CUXID == "CANAW")
      NE0DM-300-PC2CUXID = "AW1SA";
    end
    if (PC2REC.PC2CUXID == "CAN06")
      NE0DM-300-PC2CUXID = "APLSS";
    end
    if (PC2REC.PC2CUXID == "CAN07")
      NE0DM-300-PC2CUXID = "EQPSS";
    end
    if (PC2REC.PC2CUXID == "CAN18" || 
    PC2REC.PC2CUXID == "CAN23")
      NE0DM-300-PC2CUXID = "FTWSS";
    end
    if (PC2REC.PC2CUXID == "NAT42")
      NE0DM-300-PC2CUXID = "CANRG";
    end
    if (PC2REC.PC2CUXID == "MIS90")
      NE0DM-300-PC2CUXID = "MISC1";
    end
    if (PC2REC.PC2CUXID == "MIS91")
      NE0DM-300-PC2CUXID = "MISC2";
    end
    /* TCS change end   08/24/00*/
    NE0DM-300-PC2CUXID = PC2REC.PC2CUXID;
    set NE0DM-300-KUCCOID initialAttributes;
    set NE0DM-300-KUMSTRID initialAttributes;
    set NE0DM-300-XGPCD initialAttributes;
  else
    set NE0DM-300-KUCCOID cursor, modified, bold;
    set NE0DM-300-KUMSTRID modified, bold;
    set NE0DM-300-XGPCD modified, bold;
    NLXREC.NLXERRF = "Y";
    converseLib.validationFailed(174); /* invalid combination*/
    return;
  end


end // end NE0DS-GET-PC2CUXID

// get SO info from invoice
Function NE0DS-GET-SO-IVC()
   /* *****************************************************/
   /* Get S.O. using invoice info.*/
   /* *****************************************************/

  NLXREC.NLXCPROC = "NE0DS-GET-SO-IVC";

  NE0DW-02-WS-OP-CUST-ORD = VPIHDR01.OP1CUOID;
                                  /* redefine ord id*/
  OP1REC.OP1PARTN = NE0DW-02-WS-OP-PART-NUM;
  OP1REC.OP1CUOID = VPIHDR01.OP1CUOID;
  OP1REC.OP1NORID = VPIHDR01.OP1NORID;
  NE0DS-S-OP1REC(); /* use invoice to get SO*/
  if (SQLCA.VAGen_SQLCODE == 0)
    NE0DM-200-RECLASS-SO-OP1CUOID = VPIHDR01.OP1CUOID;
    NE0DM-200-RECLASS-SO-OP1NORID = VPIHDR01.OP1NORID;
    set NE0DM200.NE0DM-200-RECLASS-NIDIVCID initialAttributes;

    /* **************************************/
    /* Validate reclass item is on S.O.*/
    /* **************************************/

    OP2REC.OP1PARTN = OP1REC.OP1PARTN;
    OP2REC.OP1CUOID = OP1REC.OP1CUOID;
    OP2REC.OP1NORID = OP1REC.OP1NORID;
    OP2REC.XGPCD = NE0DW-01-XGPCD[NE0DW-02-INDEX];
    OP2REC.SY1STNBR = NE0DW-01-SY1STNBR[NE0DW-02-INDEX];
    OP2REC.SY2CLRID = NE0DW-01-SY2CLRID[NE0DW-02-INDEX];
    OP2REC.XDMCD = NE0DW-01-XDMCD[NE0DW-02-INDEX];
    OP2REC.XQACD = NE0DW-01-XQACD[NE0DW-02-INDEX];
    NE0DS-S2-OP2REC(); /* declare cursor*/
    NE0DS-N2-OP2REC(); /* only need one hit*/
    if (SQLCA.VAGen_SQLCODE == 0)
      set NE0DM-200-RECLASS-NIDIVCID initialAttributes;
    else
      NE0DS-C2-OP2REC(); /* close cursor*/
      set NE0DM-200-RECLASS-NIDIVCID cursor, modified, bold;
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(155); /* ivc. doesn't have inventory to*/
                                 /* reclass*/
      return;
    end
    NE0DS-C2-OP2REC(); /* close cursor*/

  else
    set NE0DM200.NE0DM-200-RECLASS-NIDIVCID modified, cursor, bold;
    NLXREC.NLXERRF = "Y";
    converseLib.validationFailed(146); /* no SO found for entered invoice*/
    return;
  end


end // end NE0DS-GET-SO-IVC

// Get temp storage
Function NE0DS-GET-TMP-STG()
   /* ***********************************************************************/
   /*  */
   /* Get temp storage for current page*/
   /*  */
   /* ***********************************************************************/

  NLXREC.NLXCPROC = "NE0DS-GET-TMP-STG";
  TA1REC.TA1LOC = "NE0DS-GET-TMP-STG";

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  move NE0DW-02-SIZE to NE0DW-01-LENGTH withV60Compat;
  TA5REC.TA5TSQIX = NE0DW-CURR-PAGE-NBR; /* Page number to fetch*/

  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (NE0DW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  else

   /* ------------------------------------------------------------*/
    /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

    converseLib.validationFailed(23); /* Indicate system error*/

    XPNL-006(); /* abend routine*/

  end

end // end NE0DS-GET-TMP-STG

// Build temp storage from vneinv
Function NE0DS-LOAD-TEMP()
   /* *************************************************************/
   /* Build temp storage*/
   /*  */
   /* As items are fetched, they are moved to working storage*/
   /* ne0dW01 and then loaded into temp storage.*/
   /*  */
   /* *************************************************************/

  NLXREC.NLXCPROC = "NE0DS-LOAD-TEMP";

  NE0DW-02-INDEX = NE0DW-02-INDEX + 1; /* M101 display storage*/

  NE0DW-01-SEL[NE0DW-02-INDEX] = " "; /* select*/

  NE0DW-01-OP1CUOID[NE0DW-02-INDEX] = VNEINV01.OP1CUOID;

  NE0DW-01-OP1NORID[NE0DW-02-INDEX] = VNEINV01.OP1NORID;

  NE0DW-01-NIDIVCID[NE0DW-02-INDEX] = VNEINV01.NIDIVCID;

  NE0DW-01-XGPCD[NE0DW-02-INDEX] = VNEINV01.XGPCD;

  NE0DW-01-SY1STNBR[NE0DW-02-INDEX] = VNEINV01.SY1STNBR; /* STYLE*/

  NE0DW-01-SY2CLRID[NE0DW-02-INDEX] = VNEINV01.SY2CLRID; /* COLOR*/

  NE0DW-01-XDMCD[NE0DW-02-INDEX] = VNEINV01.XDMCD; /* DIM*/

  if (VNEINV01.XQACD == " ")
    NE0DW-01-XQACD[NE0DW-02-INDEX] = "01"; /* quality*/
  else
    NE0DW-01-XQACD[NE0DW-02-INDEX] = VNEINV01.XQACD; /* quality*/
  end

  NE0DW-01-NE-CST-SRC-ID[NE0DW-02-INDEX] = VNEINV01.NE-CST-SRC-ID;

  NE0DW-01-NE-SRC-IVC-ID[NE0DW-02-INDEX] = VNEINV01.NE-SRC-IVC-ID;

  NE0DW-01-KUCCOID[NE0DW-02-INDEX] = VNEINV01.KUCCOID;

  NE0DW-01-KUMSTRID[NE0DW-02-INDEX] = VNEINV01.KUMSTRID;

  NE0DW-01-PC2CUXID[NE0DW-02-INDEX] = VNEINV01.PC2CUXID;

  NE0DW-01-OP1PARTN[NE0DW-02-INDEX] = VNEINV01.OP1PARTN;

  NE0DW-01-TSFSHPID[NE0DW-02-INDEX] = VNEINV01.TSFSHPID;

  NE0DW-01-PC3PONBR[NE0DW-02-INDEX] = VNEINV01.PC3PONBR;

  NE0DW-01-NE-STAT-CD[NE0DW-02-INDEX] = VNEINV01.NE-STAT-CD;

  NE0DW-01-NE-IVC-UNT[NE0DW-02-INDEX] = VNEINV01.NE-IVC-UNT;

  NE0DW-01-NE-SHP-UNT[NE0DW-02-INDEX] = VNEINV01.NE-SHP-UNT;

  NE0DW-01-XUMCD[NE0DW-02-INDEX] = VNEINV01.XUMCD;

  NE0DW-01-NE-CURR-STD-UNTCST[NE0DW-02-INDEX] = VNEINV01.NE-CURR-STD-UNTCST;

  NE0DW-01-NE-ORIG-STD-UNTCST[NE0DW-02-INDEX] = VNEINV01.NE-ORIG-STD-UNTCST;

  NE0DW-01-NE-LST-STD-UNT-CST[NE0DW-02-INDEX] = VNEINV01.NE-LST-STD-UNT-CST;

  NE0DW-01-NE-POST-UNT-CST[NE0DW-02-INDEX] = VNEINV01.NE-POST-UNT-CST;

  NE0DW-01-GLAENT[NE0DW-02-INDEX] = VNEINV01.GLAENT;

  NE0DW-01-GLARCID[NE0DW-02-INDEX] = VNEINV01.GLARCID;

  NE0DW-01-GLANTAC[NE0DW-02-INDEX] = VNEINV01.GLANTAC;

  NE0DW-01-GLASUB[NE0DW-02-INDEX] = VNEINV01.GLASUB;

  NE0DW-01-GLAPRJ[NE0DW-02-INDEX] = VNEINV01.GLAPRJ;

  NE0DW-01-NE-IVC-GL-POST-MO[NE0DW-02-INDEX] = VNEINV01.NE-IVC-GL-POST-MO;

  NE0DW-01-NE-IVC-CLEAR-MO[NE0DW-02-INDEX] = VNEINV01.NE-IVC-CLEAR-MO;

  NE0DW-01-FY1FCTYC[NE0DW-02-INDEX] = VNEINV01.FY1FCTYC;

  NE0DW-01-XWHCD[NE0DW-02-INDEX] = VNEINV01.XWHCD;

  NE0DW-01-ZPSCD[NE0DW-02-INDEX] = VNEINV01.ZPSCD;

  NE0DW-01-NL-PMT-MTHD-CD[NE0DW-02-INDEX] = VNEINV01.NL-PMT-MTHD-CD;

  NE0DW-01-ZZZSDT[NE0DW-02-INDEX] = VNEINV01.ZZZSDT;

  NE0DW-01-ZZZCHGDT[NE0DW-02-INDEX] = VNEINV01.ZZZCHGDT;

  NE0DW-01-ZZZCHGTM[NE0DW-02-INDEX] = VNEINV01.ZZZCHGTM;

  NE0DW-01-ZZZCHGCT[NE0DW-02-INDEX] = VNEINV01.ZZZCHGCT;

  if (NE0DW-02-INDEX == 14) /* 14 rows per screen*/
    NE0DS-ADD-TMP-STG();
    set NE0DW01 empty;
    NE0DW-02-INDEX = 0;
  end


end // end NE0DS-LOAD-TEMP

// VALIDATE map300 relations
Function NE0DS-M300-RLTNS()
  /* ******************************************************************/
  /* This statement group is used to ensure that the added customer*/
  /* and the added S.O and the added invoice are related.*/
  /* If first checks that an invoice was entered and establishes*/
  /* relations.  In the event that no invoice was entered, but an*/
  /* SO and a Cust were it looks for a relation. ONLY KUCCOID IS REQUIRED*/
  /* ******************************************************************/

  NLXREC.NLXCPROC = "NE0DS-M300-RLTNS";

  if (VPIHDR01.NIDIVCID > 0) /* Invoice entered*/
    if (OP1REC.OP1CUOID > 0) /* SO entered*/
      if (VPIHDR01.OP1CUOID == OP1REC.OP1CUOID
       && VPIHDR01.OP1NORID == OP1REC.OP1NORID)
        /* relation established*/
        set NE0DM-300-OP1CUOID initialAttributes;
        set NE0DM-300-OP1NORID initialAttributes;
      else
        NLXREC.NLXERRF = "Y";
        converseLib.validationFailed(102); /* INVOICE WAS NOT ISSUED TO THIS SO*/
        set NE0DM-300-OP1CUOID modified, cursor, bold;
        set NE0DM-300-OP1NORID modified, cursor, bold;
        return;
      end
    else
      NE0DM-300-OP1CUOID = VPIHDR01.OP1CUOID;
      NE0DM-300-OP1NORID = VPIHDR01.OP1NORID;
    end

    if (PC6REC.PC3PONBR > 0) /* po entered and found in vpoitm01*/
      if (VPIHDR01.OP1CUOID == PC6REC.OP1CUOID
       && VPIHDR01.OP1NORID == PC6REC.OP1NORID)
        set NE0DM-300-PC3PONBR initialAttributes;
      else
        NLXREC.NLXERRF = "Y";
        converseLib.validationFailed(117);
        set NE0DM-300-PC3PONBR modified, cursor, bold;
        return;
      end

      if (PC6REC.XWHCD == XWHTBL.XWHCD) /* warehouse entered*/
        set NE0DM-300-XWHCD initialAttributes;
      else
        if (NE0DM-300-XWHCD == " ") /* warehouse not entered*/
          NE0DM-300-XWHCD = PC6REC.XWHCD;
        else
          NLXREC.NLXERRF = "Y";
          converseLib.validationFailed(153); /* warehouse code not issued to this PO*/
          set NE0DM-300-XWHCD modified, cursor, bold;
          return;
        end
      end
    end

    if (VPIITM01.XUMCD == NE0DM-300-XUMCD)
      set NE0DM-300-XUMCD initialAttributes;
    else
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(178); /* invalid xumcd*/
      set NE0DM-300-XUMCD modified, cursor, bold;
      return;
    end

    if (VPIHDR01.KUCCOID == KUCREC.KUCCOID)
      set NE0DM-300-NIDIVCID initialAttributes;
        /* relation established*/
    else
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(103); /* INVOICE WAS NOT ISSUED TO THIS cust*/
      set NE0DM-300-NIDIVCID modified, cursor, bold;
      return;
    end
    return; /* relations establihed exit*/
  end /* entered.*/

                                  /* check PO if no invoice entered*/
  if (PC6REC.PC3PONBR > 0) /* PO entered*/
    /* IF PC2REC.PC2CUXID > ' ';*/
    /* IF PC2REC.PC2CUXID = PC6REC.PC2CUXID;*/
    /* SET NE0DM-300-PC3PONBR DEFINED;/**/
    /* ELSE;*/
    /* MOVE 'Y' TO NLXREC.NLXERRF;*/
    /* MOVE 175 TO EZEMNO;        /* PO not issued to xref*/
    /* SET NE0DM-300-PC3PONBR MODIFIED,CURSOR,BRIGHT;*/
    /* EZERTN;*/
    /* END;*/
    /* END;*/
    if (PC6REC.XUMCD == NE0DM-300-XUMCD)
      set NE0DM-300-XUMCD initialAttributes;
    else
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(178); /* invalid xumcd*/
      set NE0DM-300-XUMCD modified, cursor, bold;
      return;
    end
    if (OP1REC.OP1CUOID > 0) /* SO entered also*/
      if (PC6REC.OP1CUOID == OP1REC.OP1CUOID
       && PC6REC.OP1NORID == OP1REC.OP1NORID)
        set NE0DM-300-PC3PONBR initialAttributes; /**/
      else
        NLXREC.NLXERRF = "Y";
        converseLib.validationFailed(119); /* PO not issued to SO*/
        set NE0DM-300-PC3PONBR modified, cursor, bold;
        return;
      end
    end

    if (PC6REC.XWHCD == XWHTBL.XWHCD) /* warehouse entered*/
      set NE0DM-300-XWHCD initialAttributes;
    else
      if (NE0DM-300-XWHCD == " ") /* warehouse not entered*/
        NE0DM-300-XWHCD = PC6REC.XWHCD;
      else
        NLXREC.NLXERRF = "Y";
        converseLib.validationFailed(153); /* warehouse code not issued to this PO*/
        set NE0DM-300-XWHCD modified, cursor, bold;
        return;
      end
    end

    /* / relation between pc6rec and kucrec was*/
    /* / established in above relational edit, since an SO can have only*/
    /* / one customer.*/

    return; /* relation established exit*/
  end


  if (OP1REC.OP1CUOID > 0) /* SO entered, but no invoice or PO*/
    if (OP2REC.XUMCD == NE0DM-300-XUMCD)
      set NE0DM-300-XUMCD initialAttributes;
    else
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(178); /* invalid xumcd*/
      set NE0DM-300-XUMCD modified, cursor, bold;
      return;
    end
    if (OP1REC.KUCCOID == KUCREC.KUCCOID)
      set NE0DM-300-OP1CUOID initialAttributes;
        /* relation established*/
    else
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(104); /* SO  WAS NOT ISSUED TO THIS CUST*/
      set NE0DM-300-OP1CUOID modified, cursor, bold;
      return;
    end
  end


end // end NE0DS-M300-RLTNS

// Set map to inquiry mode
Function NE0DS-MAP101-MODE()
  /* ************************************************************************/
  /* Set map to an inquiry mode*/
  /* ************************************************************************/

  NLXREC.NLXCPROC = "NE0DS-MAP101-MODE";
  NE0DW-02-INDEX = 14;
  set NE0DM101.NE0DM-FM-PAGE cursor;

  /* ************************************************************************/
  /* Level 4 only ones allowed to select or make changes.*/
  /* ************************************************************************/

   /* IF COMMAREA.CACLVL(4) EQ 'Y';    /* if level four = y*/
  while (NE0DW-02-INDEX > 0)
    if (NE0DW-01-SY1STNBR[NE0DW-02-INDEX] > " ")
      if (NE0DW-01-NE-STAT-CD[NE0DW-02-INDEX] == "AC"
       || NE0DW-01-NE-STAT-CD[NE0DW-02-INDEX] == "RC")
        set NE0DM101.NE0DM-101-SEL[NE0DW-02-INDEX] cursor, initialAttributes;
      else
        set NE0DM101.NE0DM-101-SEL[NE0DW-02-INDEX] skip, invisible;
      end
    else
      set NE0DM101.NE0DM-101-SEL[NE0DW-02-INDEX] skip, invisible;
    end
    NE0DW-02-INDEX = NE0DW-02-INDEX - 1;
  end
   /* ZERTN;*/
   /* ELSE;*/
   /* wHILE NE0DW-02-INDEX LE 14;*/
   /* SET NE0DM101.NE0DM-101-SEL(NE0DW-02-INDEX) AUTOSKIP,DARK;*/
   /* NE0DW-02-INDEX = NE0DW-02-INDEX + 1;*/
   /* END;*/
   /* EZERTN;*/
   /* END;*/
   /* E 'Y' TO NLXREC.NLXERRF;*/
   /* MOVE 17 TO EZEMNO;               /* user to authorized*/



end // end NE0DS-MAP101-MODE

// Page BACKWARD logic
Function NE0DS-MAP101-PF7()
   /* ***********************************************************************/
   /* Page BACKWARD logic*/
   /* ***********************************************************************/

  NLXREC.NLXCPROC = "NE0DS-MAP101-PF7";

  if (NE0DW-MAP-PAGE-NBR == 1)
    converseLib.validationFailed(20);
    return;
  else
    NE0DW-MAP-PAGE-NBR = NE0DW-MAP-PAGE-NBR - 1;
  end
  set NE0DW01 empty;
  NE0DS-BUILD-MAP101();


end // end NE0DS-MAP101-PF7

// Page forward logic
Function NE0DS-MAP101-PF8()
   /* *********************/
   /* Page forward logic*/
   /* *********************/

  NLXREC.NLXCPROC = "NE0DS-MAP101-PF8";

  if (NE0DW-MAP-PAGE-NBR >= NE0DW-HIGH-PAGE-NBR)
    converseLib.validationFailed(19);
    return;
  end
  set NE0DW01 empty;
  NE0DW-MAP-PAGE-NBR = NE0DW-MAP-PAGE-NBR + 1;
  NE0DS-BUILD-MAP101();


end // end NE0DS-MAP101-PF8

// Set map to inquiry mode
Function NE0DS-MAP102-MODE()
  /* ************************************************************************/
  /* Set map to an inquiry mode*/
  /* ************************************************************************/

  NLXREC.NLXCPROC = "NE0DS-MAP102-MODE";
  NE0DW-02-INDEX = 14;
  set NE0DM102.NE0DM-FM-PAGE cursor;

  /* ************************************************************************/
  /* Level 4 only ones allowed to select or make changes.*/
  /* ************************************************************************/

   /* IF COMMAREA.CACLVL(4) EQ 'Y';    /* if level four = y*/
  while (NE0DW-02-INDEX > 0)
    if (NE0DW-01-SY1STNBR[NE0DW-02-INDEX] > " ")
      if (NE0DW-01-NE-STAT-CD[NE0DW-02-INDEX] == "AC"
       || NE0DW-01-NE-STAT-CD[NE0DW-02-INDEX] == "RC")
        set NE0DM102.NE0DM-102-SEL[NE0DW-02-INDEX] cursor, initialAttributes;
      else
        set NE0DM102.NE0DM-102-SEL[NE0DW-02-INDEX] skip, invisible;
      end
    else
      set NE0DM102.NE0DM-102-SEL[NE0DW-02-INDEX] skip, invisible;
    end
    NE0DW-02-INDEX = NE0DW-02-INDEX - 1;
  end
   /* ZERTN;*/
   /* ELSE;*/
   /* WHILE NE0DW-02-INDEX LE 14;*/
   /* SET NE0DM102.NE0DM-102-SEL(NE0DW-02-INDEX) AUTOSKIP,DARK;*/
   /* NE0DW-02-INDEX = NE0DW-02-INDEX + 1;*/
   /* END;*/
   /* EZERTN;*/
   /* END;*/
   /* MOVE 'Y' TO NLXREC.NLXERRF;*/
   /* MOVE 17 TO EZEMNO;               /* user to authorized*/


end // end NE0DS-MAP102-MODE

// Page BACKWARD logic
Function NE0DS-MAP102-PF7()
   /* ***********************************************************************/
   /* Page BACKWARD logic*/
   /* ***********************************************************************/

  NLXREC.NLXCPROC = "NE0DS-MAP102-PF7";

  if (NE0DW-MAP-PAGE-NBR == 1)
    converseLib.validationFailed(20);
    return;
  else
    NE0DW-MAP-PAGE-NBR = NE0DW-MAP-PAGE-NBR - 1;
  end
  set NE0DW01 empty;
  NE0DS-BUILD-MAP102();


end // end NE0DS-MAP102-PF7

// Page forward logic
Function NE0DS-MAP102-PF8()
   /* *********************/
   /* Page forward logic*/
   /* *********************/

  NLXREC.NLXCPROC = "NE0DS-MAP102-PF8";

  if (NE0DW-MAP-PAGE-NBR >= NE0DW-HIGH-PAGE-NBR)
    converseLib.validationFailed(19);
    return;
  end
  set NE0DW01 empty;
  NE0DW-MAP-PAGE-NBR = NE0DW-MAP-PAGE-NBR + 1;
  NE0DS-BUILD-MAP102();


end // end NE0DS-MAP102-PF8

// Set map to inquiry mode
Function NE0DS-MAP103-MODE()
  /* ************************************************************************/
  /* Set map to an inquiry mode*/
  /* ************************************************************************/

  NLXREC.NLXCPROC = "NE0DS-MAP103-MODE";
  NE0DW-02-INDEX = 14;
  set NE0DM103.NE0DM-FM-PAGE cursor;

  /* ************************************************************************/
  /* Level 4 only ones allowed to select or make changes.*/
  /* ************************************************************************/

   /* IF COMMAREA.CACLVL(4) EQ 'Y';    /* if level four = y*/
  while (NE0DW-02-INDEX > 0)
    if (NE0DW-01-SY1STNBR[NE0DW-02-INDEX] > " ")
      if (NE0DW-01-NE-STAT-CD[NE0DW-02-INDEX] == "AC"
       || NE0DW-01-NE-STAT-CD[NE0DW-02-INDEX] == "RC")
        set NE0DM103.NE0DM-103-SEL[NE0DW-02-INDEX] cursor, initialAttributes;
      else
        set NE0DM103.NE0DM-103-SEL[NE0DW-02-INDEX] skip, invisible;
      end
    else
      set NE0DM103.NE0DM-103-SEL[NE0DW-02-INDEX] skip, invisible;
    end
    NE0DW-02-INDEX = NE0DW-02-INDEX - 1;
  end
   /* EZERTN;*/
   /* ELSE;*/
   /* WHILE NE0DW-02-INDEX LE 14;*/
   /* SET NE0DM103.NE0DM-103-SEL(NE0DW-02-INDEX) AUTOSKIP,DARK;*/
   /* IF NE0DW-01-SY1STNBR(NE0DW-02-INDEX) = ' ';*/
   /* SET NE0DM103.NE0DM-103-DTL-STYLE(NE0DW-02-INDEX) AUTOSKIP,DARK;*/
   /* SET NE0DM103.NE0DM-103-DTL-GL-CODE(NE0DW-02-INDEX) AUTOSKIP,DARK;*/
   /* END;*/
   /* NE0DW-02-INDEX = NE0DW-02-INDEX + 1;*/
   /* END;*/
   /* EZERTN;*/
   /* end;*/
   /* MOVE 'Y' TO NLXREC.NLXERRF;*/
   /* E 17 TO EZEMNO;               /* user to authorized*/


end // end NE0DS-MAP103-MODE

// Page BACKWARD logic
Function NE0DS-MAP103-PF7()
   /* ***********************************************************************/
   /* Page BACKWARD logic*/
   /* ***********************************************************************/

  NLXREC.NLXCPROC = "NE0DS-MAP103-PF7";

  if (NE0DW-MAP-PAGE-NBR == 1)
    converseLib.validationFailed(20);
    return;
  else
    NE0DW-MAP-PAGE-NBR = NE0DW-MAP-PAGE-NBR - 1;
  end
  set NE0DW01 empty;
  NE0DS-BUILD-MAP103();


end // end NE0DS-MAP103-PF7

// Page forward logic
Function NE0DS-MAP103-PF8()
   /* *********************/
   /* Page forward logic*/
   /* *********************/

  NLXREC.NLXCPROC = "NE0DS-MAP103-PF8";

  if (NE0DW-MAP-PAGE-NBR >= NE0DW-HIGH-PAGE-NBR)
    converseLib.validationFailed(19);
    return;
  end
  set NE0DW01 empty;
  NE0DW-MAP-PAGE-NBR = NE0DW-MAP-PAGE-NBR + 1;
  NE0DS-BUILD-MAP103();


end // end NE0DS-MAP103-PF8

// Fetch next Vneinv01 item
Function NE0DS-N1-VNEINV01()
   /* *****************************************************/
   /* Fetch next VNEINV01*/
   /* *****************************************************/


  NLXREC.NLXCPROC = "NE0DS-N1-VNEINV01";

   /* fetch cursor on - VNEINV01*/

  call "IO6970" ("N1", SQLCA, VNEINV01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "N1    ";
    TA1REC.TA1LOCAT[3] = "IO6970";
    TA1REC.TA1DBASE = "DNILO ";
    TA1REC.TA1TBLVU = "VNEINV01";

    NE0DW-02-ABEND-KEY = " ";

    NE0DW-02-ABEND-CUST = NEWREC.NEW-KUCCOID;
    NE0DW-02-ABEND-FILLER-ORD = "SO:";
    NE0DW-02-ABEND-OP1CUOID = NEWREC.NEW-CUST-ORDID;
    NE0DW-02-ABEND-OP1NORID = NEWREC.NEW-NIKE-ORDID;
    NE0DW-02-ABEND-FILLER-STY = "STY";
    NE0DW-02-ABEND-SY1STNBR = NEWREC.NEW-STYLE-CD;
    NE0DW-02-ABEND-HYPEN-1 = "-";
    NE0DW-02-ABEND-SY2CLRID = NEWREC.NEW-COLOR-CD;
    NE0DW-02-ABEND-HYPHEN-2 = "-";
    NE0DW-02-ABEND-XDMCD = NEWREC.NEW-DIM-CD;

    move NE0DW-02-ABEND-KEY to TA1TBLKE withV60Compat;

    XPNL005(); /* abort routine*/
  end

end // end NE0DS-N1-VNEINV01

// Fetch next Vpiitm01
Function NE0DS-N1-VPIITM01()
   /* *****************************************************/
   /* Fetch next vpiitm01*/
   /* *****************************************************/


  NLXREC.NLXCPROC = "NE0DS-N1-VPIITM01";

   /* fetch cursor on - vpiitm01*/

  call "IO4480" ("N1", SQLCA, VPIITM01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "N1    ";
    TA1REC.TA1LOCAT[3] = "IO4480";
    TA1REC.TA1DBASE = "DNILO ";
    TA1REC.TA1TBLVU = "VPIITM01";

    NE0DW-02-ABEND-KEY = " ";

    NE0DW-02-ABEND-FILLER-STY = "STY";
    NE0DW-02-ABEND-SY1STNBR = VPIITM01.SY1STNBR;
    NE0DW-02-ABEND-HYPEN-1 = "-";
    NE0DW-02-ABEND-SY2CLRID = VPIITM01.SY2CLRID;
    NE0DW-02-ABEND-HYPHEN-2 = "-";
    NE0DW-02-ABEND-XDMCD = VPIITM01.XDMCD;

    move NE0DW-02-ABEND-KEY to TA1TBLKE withV60Compat;

    XPNL005(); /* abort routine*/
  end

end // end NE0DS-N1-VPIITM01

// fetch n2 on op2rec
Function NE0DS-N2-OP2REC()
   /* *****************************************************/
   /* Close cursor n2 on op2rec*/
   /* *****************************************************/

  NLXREC.NLXCPROC = "NE0DS-N2-OP2REC";

   /* fetch cursor on - op2rec*/

  call "IO0440" ("N2", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "N2    ";
    TA1REC.TA1LOCAT[3] = "IO0440";
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "OP2REC";

    NE0DW-02-ABEND-KEY = " ";

    NE0DW-02-ABEND-FILLER-ORD = "SO:";
    NE0DW-02-ABEND-OP1CUOID = OP2REC.OP1CUOID;
    NE0DW-02-ABEND-OP1NORID = OP2REC.OP1NORID;
    NE0DW-02-ABEND-FILLER-STY = "STY";
    NE0DW-02-ABEND-SY1STNBR = OP2REC.SY1STNBR;
    NE0DW-02-ABEND-HYPEN-1 = "-";
    NE0DW-02-ABEND-SY2CLRID = OP2REC.SY2CLRID;
    NE0DW-02-ABEND-HYPHEN-2 = "-";
    NE0DW-02-ABEND-XDMCD = OP2REC.XDMCD;

    move NE0DW-02-ABEND-KEY to TA1TBLKE withV60Compat;

    XPNL005(); /* abort routine*/
  end

end // end NE0DS-N2-OP2REC

// display pop up for gpc
Function NE0DS-POP-UP-GPC()

   /* ************************************/
   /* Validate General Product Category*/
   /* ************************************/

  NLXREC.NLXCPROC = "NE0DS-POP-UP-GPC";

  XPXX001();
  XX0XW02.XX0XWHDR = " GPC CODE"; /* HEADING*/
  while (XX0XW02.XX0XWEND == "N") /* UNTIL END OF REQUEST*/
    XPXGP01(); /* DISPLAY THE LIST*/
  end
  if (XX0XW02.XX0XWPIX != 0) /* SELECTION MADE*/
    NE0DM-300-XGPCD = XGPTBL.XGPCD[XX0XWPIX];
  else
    NE0DM-300-XGPCD = " "; /* remove '?' for screen edits*/
  end


end // end NE0DS-POP-UP-GPC

// VALIDATE RECLASS INPUTS
Function NE0DS-RELATIONAL()
  /* ******************************************************************/
  /* This statement group is used to ensure that the reclass customer*/
  /* and the reclass S.O and the reclass invoice are related.*/
  /* If first checks that an invoice was entered and establishes*/
  /* relations.  In the event that no invoice was entered, but an*/
  /* SO and a Cust were it looks for a relation.*/
  /* ******************************************************************/

  NLXREC.NLXCPROC = "NE0DS-RELATIONAL";

  if (VPIHDR01.NIDIVCID > 0) /* Invoice entered*/
    if (OP1REC.OP1CUOID > 0) /* SO entered*/
      if (VPIHDR01.OP1CUOID == OP1REC.OP1CUOID)
        set NE0DM200.NE0DM-200-RECLASS-SO-OP1CUOID initialAttributes;
        /* relation established*/
      else
        NLXREC.NLXERRF = "Y";
        converseLib.validationFailed(102); /* INVOICE WAS NOT ISSUED TO THIS SO*/
        set NE0DM200.NE0DM-200-RECLASS-SO-OP1CUOID modified, cursor, bold;
        return;
      end
    else
      NE0DM200.NE0DM-200-RECLASS-SO-OP1CUOID = VPIHDR01.OP1CUOID;
      NE0DM200.NE0DM-200-RECLASS-SO-OP1NORID = VPIHDR01.OP1NORID;
    end
    if (KUCREC.KUCCOID > 0)
      if (VPIHDR01.KUCCOID == KUCREC.KUCCOID)
        set NE0DM200.NE0DM-200-RECLASS-KUCCOID initialAttributes;
        /* relation established*/
      else
        NLXREC.NLXERRF = "Y";
        converseLib.validationFailed(103); /* INVOICE WAS NOT ISSUED TO THIS cust*/
        set NE0DM200.NE0DM-200-RECLASS-KUCCOID modified, cursor, bold;
        return;
      end
    else
      NE0DM200.NE0DM-200-RECLASS-KUCCOID = VPIHDR01.KUCCOID;
      return;
    end
    return; /* relations establihed if invoice*/
  end /* entered.*/

  if (OP1REC.OP1CUOID > 0) /* SO entered, but no invoice*/
    if (KUCREC.KUCCOID > 0) /* Customer number entered*/
      if (OP1REC.KUCCOID == KUCREC.KUCCOID)
        set NE0DM200.NE0DM-200-RECLASS-SO-OP1CUOID initialAttributes;
        /* relation established*/
      else
        NLXREC.NLXERRF = "Y";
        converseLib.validationFailed(104); /* SO  WAS NOT ISSUED TO THIS CUST*/
        set NE0DM200.NE0DM-200-RECLASS-SO-OP1CUOID modified, cursor, bold;
        return;
      end
    else
      NE0DM200.NE0DM-200-RECLASS-KUCCOID = OP1REC.KUCCOID;
      return;
    end
  end


end // end NE0DS-RELATIONAL

// Select unique - OP1REC
Function NE0DS-S-OP1REC()
   /* ************************/
   /* OP1REC - Select unique*/
   /* ************************/

  NLXREC.NLXCPROC = "NE0BS-S-OP1REC";

  call "IO0430" ("S ", SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes}; /* Select unique OP1REC*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* continue*/
  else
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0430 "; /* io module*/
    TA1REC.TA1DBASE = "DORDER"; /* database*/
    TA1REC.TA1TBLVU = "VORHDR01"; /* table view*/
    NE0DW-02-ABEND-KEY = " ";
    NE0DW-02-ABEND-FILLER-ORD = "SO ";
    NE0DW-02-ABEND-OP1CUOID = OP1REC.OP1CUOID;
    NE0DW-02-ABEND-OP1NORID = OP1REC.OP1NORID;
    move NE0DW-02-ABEND-CUST to TA1TBLKE withV60Compat;
    XPNL005(); /* abend routine*/
  end
end // end NE0DS-S-OP1REC

// select unique pc2rec
Function NE0DS-S-PC2REC()
   /* *****************************************************/
   /* select unique pc2rec*/
   /* *****************************************************/


  NLXREC.NLXCPROC = "NE0DS-S-PC2REC";

  call "IO3340" ("S ", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "SA    ";
    TA1REC.TA1LOCAT[3] = "IO3340";
    TA1REC.TA1DBASE = "DNILO ";
    TA1REC.TA1TBLVU = "PC2REC";

    NE0DW-02-KEY02 = " ";

    NE0DW-02-KEY02-FILLER1 = "CUST: ";
    NE0DW-02-KEY02-CUST = PC2REC.KUCCOID;
    NE0DW-02-KEY02-FILLER2 = "STORE: ";
    NE0DW-02-KEY02-STORE = PC2REC.KUMSTRID;
    NE0DW-02-KEY02-FILLER3 = "GPC: ";
    NE0DW-02-KEY02-XGPCD = PC2REC.XGPCD;

    move NE0DW-02-ABEND-KEY to TA1TBLKE withV60Compat;

    XPNL005(); /* abort routine*/
  end

end // end NE0DS-S-PC2REC

// select unique pc3rec
Function NE0DS-S-PC3REC()
   /* *****************************************************/
   /* select unique pc3rec*/
   /* *****************************************************/


  NLXREC.NLXCPROC = "NE0DS-S-PC3REC";

  call "IO3270" ("S ", SQLCA, PC3REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "S     ";
    TA1REC.TA1LOCAT[3] = "IO3270";
    TA1REC.TA1DBASE = "DPRODC";
    TA1REC.TA1TBLVU = "PC3REC";

    NE0DW-02-KEY04 = " ";
    NE0DW-02-KEY04-FILLER1 = "PO: ";
    NE0DW-02-KEY04-PC3PONBR = PC3REC.PC3PONBR;
    NE0DW-02-KEY04-FILLER2 = "GPC: ";
    NE0DW-02-KEY04-XGPCD = PC3REC.XGPCD;

    move NE0DW-02-KEY04 to TA1TBLKE withV60Compat;

    XPNL005(); /* abort routine*/
  end

end // end NE0DS-S-PC3REC

// select unique pg2rec
Function NE0DS-S-PG2REC()
   /* *****************************************************/
   /* select unique pg2rec*/
   /* *****************************************************/


  NLXREC.NLXCPROC = "NE0DS-S-PG2REC";

  call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "S     ";
    TA1REC.TA1LOCAT[3] = "IO3120";
    TA1REC.TA1DBASE = "DNILO ";
    TA1REC.TA1TBLVU = "PG2REC";

    NE0DW-02-ABEND-KEY = " ";

    NE0DW-02-ABEND-FILLER-STY = "STY";
    NE0DW-02-ABEND-SY1STNBR = PG2REC.SY1STNBR;
    NE0DW-02-ABEND-HYPEN-1 = "-";
    NE0DW-02-ABEND-SY2CLRID = PG2REC.SY2CLRID;
    NE0DW-02-ABEND-HYPHEN-2 = "-";
    NE0DW-02-ABEND-XDMCD = PG2REC.XDMCD;

    move NE0DW-02-ABEND-KEY to TA1TBLKE withV60Compat;

    XPNL005(); /* abort routine*/
  end

end // end NE0DS-S-PG2REC

// select unique sy1rec
Function NE0DS-S-SY1REC()
   /* *****************************************************/
   /* select unique sy1rec*/
   /* *****************************************************/


  NLXREC.NLXCPROC = "NE0DS-S-SY1REC";

  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "S     ";
    TA1REC.TA1LOCAT[3] = "IO0120";
    TA1REC.TA1DBASE = "DPROD ";
    TA1REC.TA1TBLVU = "SY1REC";

    NE0DW-02-KEY04 = " ";

    NE0DW-02-KEY04-FILLER2 = "GPC: ";
    NE0DW-02-KEY04-XGPCD = SY1REC.XGPCD;
    NE0DW-02-KEY04-FILLER3 = "STY: ";
    NE0DW-02-KEY04-SY1STNBR = SY1REC.SY1STNBR;

    move NE0DW-02-KEY04 to TA1TBLKE withV60Compat;

    XPNL005(); /* abort routine*/
  end

end // end NE0DS-S-SY1REC

// select unique vcmpny01
Function NE0DS-S-VCMPNY01()
   /* *****************************************************/
   /* select unique VCMPNY01*/
   /* *****************************************************/


  NLXREC.NLXCPROC = "NE0DS-S-VCMPNY01";

  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "S     ";
    TA1REC.TA1LOCAT[3] = "IO0240";
    TA1REC.TA1DBASE = "DCUST ";
    TA1REC.TA1TBLVU = "VCMPNY01";

    NE0DW-02-KEY02 = " ";
    NE0DW-02-KEY02-FILLER1 = "CUST: ";
    NE0DW-02-KEY02-CUST = KUCREC.KUCCOID;

    move NE0DW-02-KEY02 to TA1TBLKE withV60Compat;



    XPNL005(); /* abort routine*/
  end

end // end NE0DS-S-VCMPNY01

// select unique vcust001
Function NE0DS-S-VCUST001()
   /* *****************************************************/
   /* select unique vcust001*/
   /* *****************************************************/


  NLXREC.NLXCPROC = "NE0DS-S-VCUST001";

  call "IO0280" ("S ", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "S     ";
    TA1REC.TA1LOCAT[3] = "IO0280";
    TA1REC.TA1DBASE = "DCUST ";
    TA1REC.TA1TBLVU = "VCUST001";

    NE0DW-02-KEY02 = " ";

    NE0DW-02-KEY02-FILLER1 = "CUST: ";
    NE0DW-02-KEY02-CUST = KUNREC.KUCCOID;

    move NE0DW-02-KEY02 to TA1TBLKE withV60Compat;

    XPNL005(); /* abort routine*/
  end

end // end NE0DS-S-VCUST001

// Select unique
Function NE0DS-S-VNEINV01()
   /* *****************************************************/
   /* Open cursor on VNEINV01*/
   /* *****************************************************/


  NLXREC.NLXCPROC = "NE0DS-S-VNEINV01";

   /* open cursor on - vneinv01*/

  call "IO6970" ("S ", SQLCA, VNEINV01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "S     ";
    TA1REC.TA1LOCAT[3] = "IO6970";
    TA1REC.TA1DBASE = "DNILO ";
    TA1REC.TA1TBLVU = "VNEINV01";

    NE0DW-02-ABEND-KEY = " ";

    NE0DW-02-ABEND-FILLER-CUST = "CU";
    NE0DW-02-ABEND-CUST = VNEINV01.KUCCOID;
    NE0DW-02-ABEND-FILLER-ORD = "ORD";
    NE0DW-02-ABEND-OP1CUOID = VNEINV01.OP1CUOID;
    NE0DW-02-ABEND-OP1NORID = VNEINV01.OP1NORID;
    NE0DW-02-ABEND-FILLER-STY = "STY";
    NE0DW-02-ABEND-SY1STNBR = VNEINV01.SY1STNBR;
    NE0DW-02-ABEND-HYPEN-1 = "-";
    NE0DW-02-ABEND-SY2CLRID = VNEINV01.SY2CLRID;
    NE0DW-02-ABEND-HYPHEN-2 = "-";
    NE0DW-02-ABEND-XDMCD = VNEINV01.XDMCD;

    move NE0DW-02-ABEND-KEY to TA1TBLKE withV60Compat;

    XPNL005(); /* abort routine*/
  end

end // end NE0DS-S-VNEINV01

// select unique vpihdr01
Function NE0DS-S-VPIHDR01()
   /* *****************************************************/
   /* select unique vpihdr01*/
   /* *****************************************************/


  NLXREC.NLXCPROC = "NE0DS-S-VPIHDR01";

  call "IO4470" ("S ", SQLCA, VPIHDR01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "S     ";
    TA1REC.TA1LOCAT[3] = "IO4470";
    TA1REC.TA1DBASE = "DNILO ";
    TA1REC.TA1TBLVU = "VPIHDR01";

    NE0DW-02-KEY03 = " ";

    NE0DW-02-KEY03-FILLER1 = "IVC: ";
    NE0DW-02-KEY03-NIDIVCID = VPIHDR01.NIDIVCID;

    move NE0DW-02-KEY03 to TA1TBLKE withV60Compat;

    XPNL005(); /* abort routine*/
  end

end // end NE0DS-S-VPIHDR01

// Open cursor on Vneinv01
Function NE0DS-S1-VNEINV01()
   /* *****************************************************/
   /* Open cursor on VNEINV01*/
   /* *****************************************************/


  NLXREC.NLXCPROC = "NE0DS-S1-VNEINV01";

   /* open cursor on - vneinv01*/

  call "IO6970" ("S1", SQLCA, VNEINV01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "S1    ";
    TA1REC.TA1LOCAT[3] = "IO6970";
    TA1REC.TA1DBASE = "DNILO ";
    TA1REC.TA1TBLVU = "VNEINV01";

    NE0DW-02-ABEND-KEY = " ";

    NE0DW-02-ABEND-FILLER-CUST = "CU";
    NE0DW-02-ABEND-CUST = NEWREC.NEW-KUCCOID;
    NE0DW-02-ABEND-FILLER-ORD = "ORD";
    NE0DW-02-ABEND-OP1CUOID = NEWREC.NEW-CUST-ORDID;
    NE0DW-02-ABEND-OP1NORID = NEWREC.NEW-NIKE-ORDID;
    NE0DW-02-ABEND-FILLER-STY = "STY";
    NE0DW-02-ABEND-SY1STNBR = NEWREC.NEW-STYLE-CD;
    NE0DW-02-ABEND-HYPEN-1 = "-";
    NE0DW-02-ABEND-SY2CLRID = NEWREC.NEW-COLOR-CD;
    NE0DW-02-ABEND-HYPHEN-2 = "-";
    NE0DW-02-ABEND-XDMCD = NEWREC.NEW-DIM-CD;

    move NE0DW-02-ABEND-KEY to TA1TBLKE withV60Compat;

    XPNL005(); /* abort routine*/
  end

end // end NE0DS-S1-VNEINV01

// Open cursor on Vneinv01
Function NE0DS-S1-VPIITM01()
   /* *****************************************************/
   /* Open cursor on vpiitm01*/
   /* *****************************************************/


  NLXREC.NLXCPROC = "NE0DS-S1-VPIITM01";

   /* open cursor on - vpiitm01*/

  call "IO4480" ("S1", SQLCA, VPIITM01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "S1    ";
    TA1REC.TA1LOCAT[3] = "IO4480";
    TA1REC.TA1DBASE = "DNILO ";
    TA1REC.TA1TBLVU = "VPIITM01";

    NE0DW-02-ABEND-KEY = " ";

    NE0DW-02-ABEND-FILLER-STY = "STY";
    NE0DW-02-ABEND-SY1STNBR = VPIITM01.SY1STNBR;
    NE0DW-02-ABEND-HYPEN-1 = "-";
    NE0DW-02-ABEND-SY2CLRID = VPIITM01.SY2CLRID;
    NE0DW-02-ABEND-HYPHEN-2 = "-";
    NE0DW-02-ABEND-XDMCD = VPIITM01.XDMCD;

    move NE0DW-02-ABEND-KEY to TA1TBLKE withV60Compat;

    XPNL005(); /* abort routine*/
  end

end // end NE0DS-S1-VPIITM01

// open cursor Vitem001
Function NE0DS-S2-OP2REC()
   /* *****************************************************/
   /* Close cursor s2 on op2rec*/
   /* *****************************************************/

  NLXREC.NLXCPROC = "NE0DS-S2-OP2REC";

   /* open  cursor on - op2rec*/

  call "IO0440" ("S2", SQLCA, OP2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "S2    ";
    TA1REC.TA1LOCAT[3] = "IO0440";
    TA1REC.TA1DBASE = "DORDER";
    TA1REC.TA1TBLVU = "OP2REC";

    NE0DW-02-ABEND-KEY = " ";

    NE0DW-02-ABEND-FILLER-ORD = "SO:";
    NE0DW-02-ABEND-OP1CUOID = OP2REC.OP1CUOID;
    NE0DW-02-ABEND-OP1NORID = OP2REC.OP1NORID;
    NE0DW-02-ABEND-FILLER-STY = "STY";
    NE0DW-02-ABEND-SY1STNBR = OP2REC.SY1STNBR;
    NE0DW-02-ABEND-HYPEN-1 = "-";
    NE0DW-02-ABEND-SY2CLRID = OP2REC.SY2CLRID;
    NE0DW-02-ABEND-HYPHEN-2 = "-";
    NE0DW-02-ABEND-XDMCD = OP2REC.XDMCD;

    move NE0DW-02-ABEND-KEY to TA1TBLKE withV60Compat;

    XPNL005(); /* abort routine*/
  end

end // end NE0DS-S2-OP2REC

// select unique pc2rec
Function NE0DS-SA-PC2REC()
   /* *****************************************************/
   /* select unique pc2rec*/
   /* *****************************************************/


  NLXREC.NLXCPROC = "NE0DS-S-PC2REC";

  call "IO3340" ("SA", SQLCA, PC2REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "SA    ";
    TA1REC.TA1LOCAT[3] = "IO3340";
    TA1REC.TA1DBASE = "DNILO ";
    TA1REC.TA1TBLVU = "PC2REC";

    NE0DW-02-KEY02 = " ";

    NE0DW-02-KEY02-FILLER1 = "CUST: ";
    NE0DW-02-KEY02-CUST = PC2REC.KUCCOID;
    NE0DW-02-KEY02-FILLER2 = "STORE: ";
    NE0DW-02-KEY02-STORE = PC2REC.KUMSTRID;
    NE0DW-02-KEY02-FILLER3 = "GPC: ";
    NE0DW-02-KEY02-XGPCD = PC2REC.XGPCD;

    move NE0DW-02-ABEND-KEY to TA1TBLKE withV60Compat;

    XPNL005(); /* abort routine*/
  end

end // end NE0DS-SA-PC2REC

// select unique pc6rec
Function NE0DS-SC-PC6REC()
   /* *****************************************************/
   /* select unique pc6rec*/
   /* *****************************************************/


  NLXREC.NLXCPROC = "NE0DS-S-PC6REC";

  call "IO3310" ("SC", SQLCA, PC6REC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0   /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == -811) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "SC    ";
    TA1REC.TA1LOCAT[3] = "IO3310";
    TA1REC.TA1DBASE = "DPRODC";
    TA1REC.TA1TBLVU = "PC6REC";

    NE0DW-02-KEY04 = " ";
    NE0DW-02-KEY04-FILLER1 = "PO: ";
    NE0DW-02-KEY04-PC3PONBR = PC6REC.PC3PONBR;
    NE0DW-02-KEY04-FILLER2 = "GPC: ";
    NE0DW-02-KEY04-XGPCD = PC6REC.XGPCD;
    NE0DW-02-KEY04-FILLER3 = "STY: ";
    NE0DW-02-KEY04-SY1STNBR = PC6REC.SY1STNBR;

    move NE0DW-02-KEY04 to TA1TBLKE withV60Compat;

    XPNL005(); /* abort routine*/
  end

end // end NE0DS-SC-PC6REC

// select unique from pfhrec
Function NE0DS-SF-VINTGL02()
  NLXREC.NLXCPROC = "NE0DS-SF-VINTGL02"; /* set current proc name*/

   /* select unique VINTGL02(VINTGL02)*/

  call "VINTGL02" ("SF", SQLCA, VINTGL02) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "SF     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "VINTGL02 "; /* io module*/
    TA1REC.TA1DBASE = "DPROFT"; /* database*/
    TA1REC.TA1TBLVU = "VINTGL02"; /* table view*/
    XPNL005(); /* abend routine*/
  end

end // end NE0DS-SF-VINTGL02

// Update row on Vneinv01
Function NE0DS-U-VNEINV01()
   /* *****************************************************/
   /* Open cursor on VNEINV01*/
   /* *****************************************************/


  NLXREC.NLXCPROC = "NE0DS-U-VNEINV01";

   /* open cursor on - vneinv01*/

  call "IO6970" ("U ", SQLCA, VNEINV01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "U     ";
    TA1REC.TA1LOCAT[3] = "IO6970";
    TA1REC.TA1DBASE = "DNILO ";
    TA1REC.TA1TBLVU = "VNEINV01";

    NE0DW-02-ABEND-KEY = " ";

    NE0DW-02-ABEND-CUST = VNEINV01.KUCCOID;
    NE0DW-02-ABEND-FILLER-ORD = "ORD";
    NE0DW-02-ABEND-OP1CUOID = VNEINV01.OP1CUOID;
    NE0DW-02-ABEND-OP1NORID = VNEINV01.OP1NORID;
    NE0DW-02-ABEND-FILLER-STY = "STY";
    NE0DW-02-ABEND-SY1STNBR = VNEINV01.SY1STNBR;
    NE0DW-02-ABEND-HYPEN-1 = "-";
    NE0DW-02-ABEND-SY2CLRID = VNEINV01.SY2CLRID;
    NE0DW-02-ABEND-HYPHEN-2 = "-";
    NE0DW-02-ABEND-XDMCD = VNEINV01.XDMCD;

    move NE0DW-02-ABEND-KEY to TA1TBLKE withV60Compat;

    XPNL005(); /* abort routine*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
  end

end // end NE0DS-U-VNEINV01

// Update temp storage
Function NE0DS-UPDT-TMP-STG()
   /* ***********************************************************************/
   /* Update temp storage*/
   /* ***********************************************************************/

  NLXREC.NLXCPROC = "NE0DS-UPTD-TMP-STG";
  TA1REC.TA1LOC = "NE0DS-UPTD-TMP-STG";
  TA5REC.TA5TSQIX = NE0DW-CURR-PAGE-NBR;
  move NE0DW-02-SIZE to NE0DW-01-LENGTH withV60Compat;

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (NE0DW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  else

   /* ------------------------------------------------------------*/
    /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

    converseLib.validationFailed(23); /* Indicate system error*/

    XPNL-006(); /* abend routine*/

  end

end // end NE0DS-UPDT-TMP-STG

// update vneinv01 record
Function NE0DS-UPDT-VNEINV()
  /* ******************************************************************/
  /* This statement group is used to format the the VNEINV01 in order*/
  /* to UPDATE a VNEINV01 record with a ne-stat-cd of of 'RC'.*/
  /* to UPDATE a VNEINV01 record with a ne-stat-cd of of 'RC'.*/
  /* NOTE: The map fields correspond to ne0dw-01-fields referenced by*/
  /* the subscript(ne0dw-02-index), because all 200 logic is in a*/
  /* loop of pages that consists of 14 rows each. Each subscript*/
  /* refers to one row on one page.*/
  /* The insert is nothing more than duplicating the inv rec with the*/
  /* new reclassed status code in ne-stat-cd.*/
  /* ******************************************************************/

  NLXREC.NLXCPROC = "NE0DS-UPDT-VNEINV";

  set VNEINV01 empty;

   /* *****************************************/
   /* get current date and time for zz family*/
   /* *****************************************/

  XX0XS01();

  VNEINV01.ZZZSDT = NE0DW-01-ZZZSDT[NE0DW-02-INDEX];

  VNEINV01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VNEINV01.ZZZCHGTM = XX0XW01.XX0XWTIM;

  NE0DS-FMAT-POST-MO();

  VNEINV01.OP1CUOID = NE0DW-01-OP1CUOID[NE0DW-02-INDEX];
  VNEINV01.OP1NORID = NE0DW-01-OP1NORID[NE0DW-02-INDEX];
  VNEINV01.NIDIVCID = NE0DW-01-NIDIVCID[NE0DW-02-INDEX];
  VNEINV01.XGPCD = NE0DW-01-XGPCD[NE0DW-02-INDEX];
  VNEINV01.SY1STNBR = NE0DW-01-SY1STNBR[NE0DW-02-INDEX];
  VNEINV01.SY2CLRID = NE0DW-01-SY2CLRID[NE0DW-02-INDEX];
  VNEINV01.XDMCD = NE0DW-01-XDMCD[NE0DW-02-INDEX];
  if (NE0DW-01-XQACD[NE0DW-02-INDEX] == " ")
    VNEINV01.XQACD = "01";
  else
    VNEINV01.XQACD = NE0DW-01-XQACD[NE0DW-02-INDEX];
  end
  VNEINV01.NE-CST-SRC-ID = NE0DW-01-NE-CST-SRC-ID[NE0DW-02-INDEX];
  VNEINV01.NE-SRC-IVC-ID = NE0DW-01-NE-SRC-IVC-ID[NE0DW-02-INDEX];
  VNEINV01.KUCCOID = NE0DW-01-KUCCOID[NE0DW-02-INDEX];
  VNEINV01.KUMSTRID = NE0DW-01-KUMSTRID[NE0DW-02-INDEX];
  VNEINV01.PC2CUXID = NE0DW-01-PC2CUXID[NE0DW-02-INDEX];
  VNEINV01.OP1PARTN = NE0DW-01-OP1PARTN[NE0DW-02-INDEX];
  VNEINV01.TSFSHPID = NE0DW-01-TSFSHPID[NE0DW-02-INDEX];
   /* MOVE 99 TO VNEINV01.TSFSHPID; /* 12/07/94 abends using 99*/
  VNEINV01.PC3PONBR = NE0DW-01-PC3PONBR[NE0DW-02-INDEX];
  VNEINV01.NE-STAT-CD = "WO";
  VNEINV01.NE-IVC-UNT = NE0DW-01-NE-IVC-UNT[NE0DW-02-INDEX];
  VNEINV01.NE-SHP-UNT = NE0DW-01-NE-SHP-UNT[NE0DW-02-INDEX];
  VNEINV01.XUMCD = NE0DW-01-XUMCD[NE0DW-02-INDEX];
  VNEINV01.NE-CURR-STD-UNTCST = NE0DW-01-NE-CURR-STD-UNTCST[NE0DW-02-INDEX];
  VNEINV01.NE-ORIG-STD-UNTCST = NE0DW-01-NE-ORIG-STD-UNTCST[NE0DW-02-INDEX];
  VNEINV01.NE-LST-STD-UNT-CST = NE0DW-01-NE-LST-STD-UNT-CST[NE0DW-02-INDEX];
  VNEINV01.NE-POST-UNT-CST = NE0DW-01-NE-POST-UNT-CST[NE0DW-02-INDEX];
  VNEINV01.GLAENT = NE0DW-01-GLAENT[NE0DW-02-INDEX];
  VNEINV01.GLARCID = NE0DW-01-GLARCID[NE0DW-02-INDEX];
  VNEINV01.GLANTAC = NE0DW-01-GLANTAC[NE0DW-02-INDEX];
  VNEINV01.GLASUB = NE0DW-01-GLASUB[NE0DW-02-INDEX];
  VNEINV01.GLAPRJ = NE0DW-01-GLAPRJ[NE0DW-02-INDEX];
  VNEINV01.NE-IVC-GL-POST-MO = NE0DW-01-NE-IVC-GL-POST-MO[NE0DW-02-INDEX];
  VNEINV01.NE-IVC-CLEAR-MO = NE0DW-01-NE-IVC-CLEAR-MO[NE0DW-02-INDEX];
  VNEINV01.FY1FCTYC = NE0DW-01-FY1FCTYC[NE0DW-02-INDEX];
  VNEINV01.XWHCD = NE0DW-01-XWHCD[NE0DW-02-INDEX];
  VNEINV01.ZPSCD = NE0DW-01-ZPSCD[NE0DW-02-INDEX];
  VNEINV01.NL-PMT-MTHD-CD = NE0DW-01-NL-PMT-MTHD-CD[NE0DW-02-INDEX];
  VNEINV01.ZZZCHGCT = NE0DW-01-ZZZCHGCT[NE0DW-02-INDEX];

  NE0DS-U-VNEINV01();


end // end NE0DS-UPDT-VNEINV

// Validate Sales Order Id
Function NE0DS-V-RECLASS-SO()
   /* *********************************************************/
   /* Validate sales order exists*/
   /* *********************************************************/
   /*  */
  NLXREC.NLXCPROC = "NE0DS-V-RECLASS-SO";
   /*  */
   /* get op-ord-part-char*/
   /*  */
  NE0DW-02-WS-OP-CUST-ORD = NE0DM200.NE0DM-200-RECLASS-SO-OP1CUOID; /* redefine ord id*/
   /*  */
   /* Build vorhdr01 key*/
   /*  */
  OP1REC.OP1PARTN = NE0DW-02-WS-OP-PART-NUM;
  OP1REC.OP1CUOID = NE0DM200.NE0DM-200-RECLASS-SO-OP1CUOID;
  if (NE0DM200.NE0DM-200-RECLASS-SO-OP1NORID == 0)
    NE0DM200.NE0DM-200-RECLASS-SO-OP1NORID = 01;
  end
  OP1REC.OP1NORID = NE0DM200.NE0DM-200-RECLASS-SO-OP1NORID;
   /*  */
   /* Select unique op1rec*/
   /*  */
  NE0DS-S-OP1REC(); /* select unique op1rec*/
  if (SQLCA.VAGen_SQLCODE == 0) /* save key, cust id, need dt, & stat*/
    set NE0DM200.NE0DM-200-RECLASS-SO-OP1CUOID initialAttributes;
    set NE0DM200.NE0DM-200-RECLASS-SO-OP1NORID initialAttributes;
    /* continue*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      set NE0DM200.NE0DM-200-RECLASS-SO-OP1CUOID modified, cursor, bold;
      set NE0DM200.NE0DM-200-RECLASS-SO-OP1NORID modified, bold;
      converseLib.validationFailed(95); /* invalid order id;*/
      NLXREC.NLXERRF = "Y"; /* error flag*/
      return; /* go back to calling routine*/
    end
  end


end // end NE0DS-V-RECLASS-SO

// Validate Sales Order Id
Function NE0DS-VAL-ADD-SO()
   /* *********************************************************/
   /* Validate sales order exists*/
   /* *********************************************************/
   /*  */
  NLXREC.NLXCPROC = "NE0DS-VAL-ADD-SO";
   /*  */
   /* get op-ord-part-char*/
   /*  */
  move NE0DM-300-OP1CUOID to NE0DW-02-WS-OP-CUST-ORD withV60Compat; /* redefine ord id*/
   /*  */
   /* Build vorhdr01 key*/
   /*  */
  OP1REC.OP1PARTN = NE0DW-02-WS-OP-PART-NUM;
  OP1REC.OP1CUOID = NE0DM-300-OP1CUOID;
  if (NE0DM-300-OP1NORID == 0)
    NE0DM-300-OP1NORID = 01;
  end
  OP1REC.OP1NORID = NE0DM-300-OP1NORID;
   /*  */
   /* Select unique op1rec*/

  NE0DS-S-OP1REC(); /* select unique op1rec*/

  if (SQLCA.VAGen_SQLCODE == 0) /* save key, cust id, need dt, & stat*/
    set NE0DM-300-OP1CUOID initialAttributes;
    set NE0DM-300-OP1NORID initialAttributes;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      set NE0DM-300-OP1CUOID modified, cursor, bold;
      set NE0DM-300-OP1NORID modified, bold;
      converseLib.validationFailed(106); /* invalid order id;*/
      NLXREC.NLXERRF = "Y"; /* error flag*/
      return; /* go back to calling routine*/
    end
  end


end // end NE0DS-VAL-ADD-SO

// validate gpc cd
Function NE0DS-VAL-GPC-CD()
   /* *****************************************************/
   /* Validate GPC*/
   /* *****************************************************/


  NLXREC.NLXCPROC = "NE0DS-VAL-GPC-CD";

  if (NE0DM-300-XGPCD == " ") /* validate gpc*/
    set NE0DM-300-XGPCD cursor, modified, bold;
    NLXREC.NLXERRF = "Y";
    converseLib.validationFailed(116); /* GPC required*/
    return;
  else
    set NE0DM-300-XGPCD initialAttributes;
  end

  if (NE0DM-300-XGPCD in XGPTBL.XGPCD)
    if (NE0DM-300-XGPCD == "02"
     || NE0DM-300-XGPCD == "03")
      set NE0DM-300-XGPCD initialAttributes;
    else
      converseLib.validationFailed(81); /* Not GPC 02 or 03*/
      NLXREC.NLXERRF = "Y";
      set NE0DM-300-XGPCD cursor, modified, bold;
      return;
    end
  else
    converseLib.validationFailed(47); /* Invalid GPC entered.*/
    NLXREC.NLXERRF = "Y";
    set NE0DM-300-XGPCD cursor, modified, bold;
    return;
  end


end // end NE0DS-VAL-GPC-CD

// Val tmp for at least one sel
Function NE0DS-VAL-SELECT()
   /* ******************************************************************/
   /* This statement group will process temp storage until it finds*/
   /* one 'S' in the select field, if none are found error*/
   /* ******************************************************************/

  NLXREC.NLXCPROC = "NE0DS-VAL-SELECT";
  move NE0DW-CURR-PAGE-NBR to NE0DW-HOLD-PAGE-NBR withV60Compat;
  NE0DW-CURR-PAGE-NBR = 1;

   /* Process each page in temp storage*/

  while (NE0DW-CURR-PAGE-NBR <= NE0DW-HIGH-PAGE-NBR)
    NE0DS-GET-TMP-STG();
    NE0DW-02-INDEX = 1;

     /* Process each row in NE0DW02*/

    while (NE0DW-02-INDEX <= 14) /* 14 rows per temp page*/

      if (NE0DW-01-SEL[NE0DW-02-INDEX] == "S")
        /* reset page and get the hell out of Dodge*/
        move NE0DW-HOLD-PAGE-NBR to NE0DW-CURR-PAGE-NBR withV60Compat;
        return;
      end

      NE0DW-02-INDEX = NE0DW-02-INDEX + 1; /* fetch curr row*/

    end /* end while on same page*/

    NE0DW-CURR-PAGE-NBR = NE0DW-CURR-PAGE-NBR + 1;

  end /* end while more pages*/

  converseLib.validationFailed(29); /* no items selected*/
  NLXREC.NLXERRF = "Y";
                                  /* reset curr page*/
  move NE0DW-HOLD-PAGE-NBR to NE0DW-CURR-PAGE-NBR withV60Compat;
  set NE0DW01 empty;
  NE0DS-GET-TMP-STG();


end // end NE0DS-VAL-SELECT

// Validate Add Style
Function NE0DS-VAL-STYLE()
   /* *********************************************************/
   /* Validate add screen style*/
   /* *********************************************************/
   /*  */
  NLXREC.NLXCPROC = "NE0DS-VAL-STYLE";

  PG2REC.XGPCD = NE0DM-300-XGPCD;
  PG2REC.SY1STNBR = NE0DM-300-SY1STNBR;
  PG2REC.SY2CLRID = NE0DM-300-SY2CLRID;
  PG2REC.XDMCD = NE0DM-300-XDMCD;

   /*  */
   /* Select unique pg2rec*/
   /*  */

  NE0DS-S-PG2REC(); /* select unique pg2rec*/

  if (SQLCA.VAGen_SQLCODE == 0)
    set NE0DM-300-SY1STNBR initialAttributes;
    set NE0DM-300-SY2CLRID initialAttributes;
    set NE0DM-300-XDMCD initialAttributes;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      set NE0DM-300-SY1STNBR modified, bold, cursor;
      set NE0DM-300-SY2CLRID modified, bold;
      set NE0DM-300-XDMCD modified, bold;
      converseLib.validationFailed(114); /* invalid product code*/
      NLXREC.NLXERRF = "Y"; /* error flag*/
      return; /* go back to calling routine*/
    end
  end
   /*  */
   /* validate quality code*/
   /*  */
  if (NE0DM-300-XQACD == "01")
    set NE0DM-300-XQACD initialAttributes;
  else
    if (NE0DM-300-XQACD in XQATBL.XQACD)
      set NE0DM-300-XQACD initialAttributes;
    else
      set NE0DM-300-XQACD cursor, modified, bold;
      converseLib.validationFailed(169); /* invalid quality code*/
      NLXREC.NLXERRF = "Y"; /* error flag*/
      return; /* go back to calling routine*/
    end
  end


end // end NE0DS-VAL-STYLE

// write off selected inventory
Function NE0DS-WRITE-OFF()
  /* ******************************************************************/
  /* This statement group is used to write off inventory, by updating*/
  /* each selected row with an ne-stat-cd of 'WO'.*/
  /* ******************************************************************/

  NLXREC.NLXCPROC = "NE0DS-WRITE-OFF";

  NE0DW-CURR-PAGE-NBR = 1;
  set NE0DW01 empty;

  while (NE0DW-CURR-PAGE-NBR <= NE0DW-HIGH-PAGE-NBR)

    NE0DS-GET-TMP-STG();

    NE0DW-02-INDEX = 1;

      /* process each row of temp storage*/

    while (NE0DW-02-INDEX <= 14 /* 14 rows per temp page*/
    )
      if (NE0DW-01-SEL[NE0DW-02-INDEX] == "S") /* row selected*/
        NE0DS-CHG-STAT-WO(); /* change stat to WO*/
        NE0DW-02-WRITE-OFF-COUNT = NE0DW-02-WRITE-OFF-COUNT + 1;
      end /**/
      NE0DW-02-INDEX = NE0DW-02-INDEX + 1; /* get next row*/

    end /* 14 rows per temp storage*/

    NE0DW-CURR-PAGE-NBR = NE0DW-CURR-PAGE-NBR + 1; /* get curr page of temp*/
  end /* end while curr page le high page*/


   /* *******************************/
   /* Refresh temp storage*/
   /* *******************************/

  NE0DS-DEL-TMP-STG(); /* delete temp*/

  NE0DW-HIGH-PAGE-NBR = 0;
  NE0DW-CURR-PAGE-NBR = 1; /* show page one*/
  NE0DW-MAP-PAGE-NBR = 1;

  NE0DS-BUILD-TEMP();

  if (NLXREC.NLXERRF == "Y")
  /* continue*/
  else
    if (NE0DW-02-WRITE-OFF-COUNT > 0)
      NLXREC.NLXERRF = "Y"; /* show message in returning map*/
      NEW-MSG-NBR = 121; /* inventory has been reclassed*/
    end /* DID'T USE EZEMNO BECAUSE*/
  end /* IT GETS WIPED OUT ON 050 LOGIC*/
                                  /* SEE 130 LOGIC, PF18 TAKES APPL*/
                                  /* ALL THE WAY BACK TO 050 LOGIC*/


end // end NE0DS-WRITE-OFF

//*** RECORD=NE0DW01 ****
// ***********************VNINVD01*****************************
// 
// 
// Maintenance Log:
// 
//   Date    Init.      Comment
// --------  ------     ---------------------------------------
// 11-17-93  kshaw      Initial record creation
// ***********************
Record NE0DW01 type basicRecord
  5 NE0DW-01-LENGTH NE0DW-01-LENGTH ; 
  5 NE0DW-01-GROUP NE0DW-01-GROUP ; 
    10 NE0DW-01-SEL NE0DW-01-SEL [14] ; 
    10 NE0DW-01-OP1CUOID NE0DW-01-OP1CUOID [14] ; 
    10 NE0DW-01-OP1NORID NE0DW-01-OP1NORID [14] ; 
    10 NE0DW-01-NIDIVCID NE0DW-01-NIDIVCID [14] ; 
    10 NE0DW-01-XGPCD NE0DW-01-XGPCD [14] ; 
    10 NE0DW-01-SY1STNBR NE0DW-01-SY1STNBR [14] ; 
    10 NE0DW-01-SY2CLRID NE0DW-01-SY2CLRID [14] ; 
    10 NE0DW-01-XDMCD NE0DW-01-XDMCD [14] ; 
    10 NE0DW-01-XQACD NE0DW-01-XQACD [14] ; 
    10 NE0DW-01-NE-CST-SRC-ID NE0DW-01-NE-CST-SRC-ID [14] ; 
    10 NE0DW-01-NE-SRC-IVC-ID NE0DW-01-NE-SRC-IVC-ID [14] ; 
    10 NE0DW-01-KUCCOID NE0DW-01-KUCCOID [14] ; 
    10 NE0DW-01-KUMSTRID NE0DW-01-KUMSTRID [14] ; 
    10 NE0DW-01-PC2CUXID NE0DW-01-PC2CUXID [14] ; 
    10 NE0DW-01-OP1PARTN NE0DW-01-OP1PARTN [14] ; 
    10 NE0DW-01-TSFSHPID NE0DW-01-TSFSHPID [14] ; 
    10 NE0DW-01-PC3PONBR NE0DW-01-PC3PONBR [14] ; 
    10 NE0DW-01-NE-STAT-CD NE0DW-01-NE-STAT-CD [14] ; 
    10 NE0DW-01-NE-IVC-UNT NE0DW-01-NE-IVC-UNT [14] ; 
    10 NE0DW-01-NE-SHP-UNT NE0DW-01-NE-SHP-UNT [14] ; 
    10 NE0DW-01-XUMCD NE0DW-01-XUMCD [14] ; 
    10 NE0DW-01-NE-CURR-STD-UNTCST NE0DW-01-NE-CURR-STD-UNTCST [14] ; 
    10 NE0DW-01-NE-ORIG-STD-UNTCST NE0DW-01-NE-ORIG-STD-UNTCST [14] ; 
    10 NE0DW-01-NE-LST-STD-UNT-CST NE0DW-01-NE-LST-STD-UNT-CST [14] ; 
    10 NE0DW-01-NE-POST-UNT-CST NE0DW-01-NE-POST-UNT-CST [14] ; 
    10 NE0DW-01-GLAENT NE0DW-01-GLAENT [14] ; 
    10 NE0DW-01-GLARCID NE0DW-01-GLARCID [14] ; 
    10 NE0DW-01-GLANTAC NE0DW-01-GLANTAC [14] ; 
    10 NE0DW-01-GLASUB NE0DW-01-GLASUB [14] ; 
    10 NE0DW-01-GLAPRJ NE0DW-01-GLAPRJ [14] ; 
    10 NE0DW-01-NE-IVC-GL-POST-MO NE0DW-01-NE-IVC-GL-POST-MO [14] ; 
    10 NE0DW-01-NE-IVC-CLEAR-MO NE0DW-01-NE-IVC-CLEAR-MO [14] ; 
    10 NE0DW-01-FY1FCTYC NE0DW-01-FY1FCTYC [14] ; 
    10 NE0DW-01-XWHCD NE0DW-01-XWHCD [14] ; 
    10 NE0DW-01-ZPSCD NE0DW-01-ZPSCD [14] ; 
    10 NE0DW-01-NL-PMT-MTHD-CD NE0DW-01-NL-PMT-MTHD-CD [14] ; 
    10 NE0DW-01-ZZZSDT NE0DW-01-ZZZSDT [14] ; 
    10 NE0DW-01-ZZZCHGDT NE0DW-01-ZZZCHGDT [14] ; 
    10 NE0DW-01-ZZZCHGTM NE0DW-01-ZZZCHGTM [14] ; 
    10 NE0DW-01-ZZZCHGCT NE0DW-01-ZZZCHGCT [14] ; 
end // end NE0DW01

//*** RECORD=NE0DW02 ****
// ********** NE0d APPLICATION WORKING STORAGE RECORD *********
// ***********************
Record NE0DW02 type basicRecord
  5 NE0DW-GROUP char(201) ; // ne0dw01 group item
    10 NE0DW-02-INDEX NE0DW-02-INDEX ; 
    10 NE0DW-HIGH-PAGE-NBR NE0DW-HIGH-PAGE-NBR ; 
    10 NE0DW-CURR-PAGE-NBR NE0DW-CURR-PAGE-NBR ; 
    10 NE0DW-MAP-PAGE-NBR NE0DW-MAP-PAGE-NBR ; 
    10 NE0DW-HOLD-PAGE-NBR NE0DW-HOLD-PAGE-NBR ; 
    10 NE0DW-02-SIZE NE0DW-02-SIZE ; 
    10 NE0DW-KEY NE0DW-KEY ; 
      15 NE0DW-LRG-NBR NE0DW-LRG-NBR ; 
      15 * char(1) ; 
      15 NE0DW-CHG-KEY NE0DW-CHG-KEY ; 
        20 NE0DW-IND NE0DW-IND ; 
    10 NE0DW-ORDER-NBR NE0DW-ORDER-NBR ; 
      15 NE0DW-OP1CUOID NE0DW-OP1CUOID ; 
      15 NE0DW-OP1NORID NE0DW-OP1NORID ; 
    10 NE0DW-STYLE NE0DW-STYLE ; 
      15 NE0DW-SY1STNBR NE0DW-SY1STNBR ; 
      15 NE0DW-HYPHEN-1 NE0DW-HYPHEN-1 ; 
      15 NE0DW-SY2CLRID NE0DW-SY2CLRID ; 
      15 NE0DW-HYPHEN-2 NE0DW-HYPHEN-2 ; 
      15 NE0DW-XDMCD NE0DW-XDMCD ; 
    10 NE0DW-GL-CODE NE0DW-GL-CODE ; 
      15 NE0DW-GLAENT NE0DW-GLAENT ; 
      15 NE0DW-GLARCID NE0DW-GLARCID ; 
      15 NE0DW-GLANTAC NE0DW-GLANTAC ; 
      15 NE0DW-GLASUB NE0DW-GLASUB ; 
      15 NE0DW-GLAPRJ NE0DW-GLAPRJ ; 
    10 NE0DW-02-FROM-SCREEN NE0DW-02-FROM-SCREEN ; 
    10 NE0DW-02-ABEND-KEY NE0DW-02-ABEND-KEY ; 
      15 NE0DW-02-ABEND-FILLER-CUST NE0DW-02-ABEND-FILLER-CUST ; 
      15 NE0DW-02-ABEND-CUST NE0DW-02-ABEND-CUST ; 
      15 NE0DW-02-ABEND-FILLER-ORD NE0DW-02-ABEND-FILLER-ORD ; 
      15 NE0DW-02-ABEND-ORDER-NBR NE0DW-02-ABEND-ORDER-NBR ; 
        20 NE0DW-02-ABEND-OP1CUOID NE0DW-02-ABEND-OP1CUOID ; 
        20 NE0DW-02-ABEND-OP1NORID NE0DW-02-ABEND-OP1NORID ; 
      15 NE0DW-02-ABEND-FILLER-STY NE0DW-02-ABEND-FILLER-STY ; 
      15 NE0DW-02-ABEND-STYLE NE0DW-02-ABEND-STYLE ; 
        20 NE0DW-02-ABEND-SY1STNBR NE0DW-02-ABEND-SY1STNBR ; 
        20 NE0DW-02-ABEND-HYPEN-1 NE0DW-02-ABEND-HYPEN-1 ; 
        20 NE0DW-02-ABEND-SY2CLRID NE0DW-02-ABEND-SY2CLRID ; 
        20 NE0DW-02-ABEND-HYPHEN-2 NE0DW-02-ABEND-HYPHEN-2 ; 
        20 NE0DW-02-ABEND-XDMCD NE0DW-02-ABEND-XDMCD ; 
    10 NE0DW-02-WS-OP-CUST-ORD NE0DW-02-WS-OP-CUST-ORD ; 
      15 NE0DW-02-WS-OP-CUST-FIL NE0DW-02-WS-OP-CUST-FIL ; 
      15 NE0DW-02-WS-OP-PART-NUM NE0DW-02-WS-OP-PART-NUM ; 
    10 NE0DW-02-WS-FORMAT-CCYYMM NE0DW-02-WS-FORMAT-CCYYMM ; 
      15 NE0DW-02-WS-FORMAT-CC NE0DW-02-WS-FORMAT-CC ; 
      15 NE0DW-02-WS-FORMAT-YY NE0DW-02-WS-FORMAT-YY ; 
      15 NE0DW-02-WS-FORMAT-MM NE0DW-02-WS-FORMAT-MM ; 
    10 NE0DW-02-ENTERFL NE0DW-02-ENTERFL ; 
    10 NE0DW-02-BUILD-TEMP-FL NE0DW-02-BUILD-TEMP-FL ; 
    10 NE0DW-02-RECLASS-COUNT NE0DW-02-RECLASS-COUNT ; 
    10 NE0DW-02-WRITE-OFF-COUNT NE0DW-02-WRITE-OFF-COUNT ; 
    10 NE0DW-02-KEY02 NE0DW-02-KEY02 ; 
      15 NE0DW-02-KEY02-FILLER1 NE0DW-02-KEY02-FILLER1 ; 
      15 NE0DW-02-KEY02-CUST NE0DW-02-KEY02-CUST ; 
      15 NE0DW-02-KEY02-FILLER2 NE0DW-02-KEY02-FILLER2 ; 
      15 NE0DW-02-KEY02-STORE NE0DW-02-KEY02-STORE ; 
      15 NE0DW-02-KEY02-FILLER3 NE0DW-02-KEY02-FILLER3 ; 
      15 NE0DW-02-KEY02-XGPCD NE0DW-02-KEY02-XGPCD ; 
    10 NE0DW-02-KEY03 NE0DW-02-KEY03 ; 
      15 NE0DW-02-KEY03-FILLER1 NE0DW-02-KEY03-FILLER1 ; 
      15 NE0DW-02-KEY03-NIDIVCID NE0DW-02-KEY03-NIDIVCID ; 
    10 NE0DW-02-KEY04 NE0DW-02-KEY04 ; 
      15 NE0DW-02-KEY04-FILLER1 NE0DW-02-KEY04-FILLER1 ; 
      15 NE0DW-02-KEY04-PC3PONBR NE0DW-02-KEY04-PC3PONBR ; 
      15 NE0DW-02-KEY04-FILLER2 NE0DW-02-KEY04-FILLER2 ; 
      15 NE0DW-02-KEY04-XGPCD NE0DW-02-KEY04-XGPCD ; 
      15 NE0DW-02-KEY04-FILLER3 NE0DW-02-KEY04-FILLER3 ; 
      15 NE0DW-02-KEY04-SY1STNBR NE0DW-02-KEY04-SY1STNBR ; 
end // end NE0DW02

//*** RECORD=VNEINV01 ****
// ***********************VNEHLD01*****************************
// 
// 
// Maintenance Log:
// 
//   Date    Init.      Comment
// --------  ------     ---------------------------------------
// 11-17-93  kshaw      Initial record creation
// 04-23-94  jdemar     Added ts_nike_shp_id, zps_prod_src_cd,
//                      and nl_pmt_mthd_cd per table changes.
// ************************
Record VNEINV01 type basicRecord
  5 VNEINV01-GROUP VNEINV01-GROUP ; 
    10 OP1CUOID OP1CUOID ; 
    10 OP1NORID OP1NORID ; 
    10 NIDIVCID NIDIVCID ; 
    10 XGPCD XGPCD ; 
    10 SY1STNBR SY1STNBR ; 
    10 SY2CLRID SY2CLRID ; 
    10 XDMCD XDMCD ; 
    10 XQACD XQACD ; 
    10 NE-CST-SRC-ID NE-CST-SRC-ID ; 
    10 NE-SRC-IVC-ID NE-SRC-IVC-ID ; 
    10 KUCCOID KUCCOID ; 
    10 KUMSTRID KUMSTRID ; 
    10 PC2CUXID PC2CUXID ; 
    10 OP1PARTN OP1PARTN ; 
    10 TSFSHPID TSFSHPID ; 
    10 PC3PONBR PC3PONBR ; 
    10 NE-STAT-CD NE-STAT-CD ; 
    10 NE-IVC-UNT NE-IVC-UNT ; 
    10 NE-SHP-UNT NE-SHP-UNT ; 
    10 XUMCD XUMCD ; 
    10 NE-CURR-STD-UNTCST NE-CURR-STD-UNTCST ; 
    10 NE-ORIG-STD-UNTCST NE-ORIG-STD-UNTCST ; 
    10 NE-LST-STD-UNT-CST NE-LST-STD-UNT-CST ; 
    10 NE-POST-UNT-CST NE-POST-UNT-CST ; 
    10 GLAENT GLAENT ; 
    10 GLARCID GLARCID ; 
    10 GLANTAC GLANTAC ; 
    10 GLASUB GLASUB ; 
    10 GLAPRJ GLAPRJ ; 
    10 NE-IVC-GL-POST-MO NE-IVC-GL-POST-MO ; 
    10 NE-IVC-CLEAR-MO NE-IVC-CLEAR-MO ; 
    10 FY1FCTYC FY1FCTYC ; 
    10 XWHCD XWHCD ; 
    10 ZPSCD ZPSCD ; 
    10 NL-PMT-MTHD-CD NL-PMT-MTHD-CD ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end VNEINV01

// current standard unit cost
DataItem NE-CURR-STD-UNTCST decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// inventory clearing month
DataItem NE-IVC-CLEAR-MO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// inventory gl posting month
DataItem NE-IVC-GL-POST-MO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// inventory units
DataItem NE-IVC-UNT decimal(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last standard unit cost
DataItem NE-LST-STD-UNT-CST decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// original standard unit cost
DataItem NE-ORIG-STD-UNTCST decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// posted unit cost
DataItem NE-POST-UNT-CST decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// shipped units
DataItem NE-SHP-UNT decimal(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FY_FCTY_CD
DataItem NE0DW-01-FY1FCTYC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GL-ENTITY-ID
DataItem NE0DW-01-GLAENT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GL-NATRL-ACCT-ID
DataItem NE0DW-01-GLANTAC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GL-PROJ-ID
DataItem NE0DW-01-GLAPRJ char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GL-RSP-CTR-ID
DataItem NE0DW-01-GLARCID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GL-SUB-ACCT-ID
DataItem NE0DW-01-GLASUB char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// group item
DataItem NE0DW-01-GROUP char(2030)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CU_CO_ID
DataItem NE0DW-01-KUCCOID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// CU_STOR_ID
DataItem NE0DW-01-KUMSTRID smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Length record
DataItem NE0DW-01-LENGTH num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cost source id
DataItem NE0DW-01-NE-CST-SRC-ID char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current standard unit cost
DataItem NE0DW-01-NE-CURR-STD-UNTCST decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// inventory clearing month
DataItem NE0DW-01-NE-IVC-CLEAR-MO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// inventory gl posting month
DataItem NE0DW-01-NE-IVC-GL-POST-MO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// inventory units
DataItem NE0DW-01-NE-IVC-UNT decimal(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last standard unit cost
DataItem NE0DW-01-NE-LST-STD-UNT-CST decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// original standard unit cost
DataItem NE0DW-01-NE-ORIG-STD-UNTCST decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// posted unit cost
DataItem NE0DW-01-NE-POST-UNT-CST decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// shipped units
DataItem NE0DW-01-NE-SHP-UNT decimal(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// source invoice number
DataItem NE0DW-01-NE-SRC-IVC-ID char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sales cutoff status code
DataItem NE0DW-01-NE-STAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-ivc-id
DataItem NE0DW-01-NIDIVCID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// nl-pmt-mthd-cd
DataItem NE0DW-01-NL-PMT-MTHD-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-cust-ord-id
DataItem NE0DW-01-OP1CUOID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-nike-ord-id
DataItem NE0DW-01-OP1NORID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op-ord-part-char
DataItem NE0DW-01-OP1PARTN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_PRDCU_ID
DataItem NE0DW-01-PC2CUXID char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PC_PO_NBR
DataItem NE0DW-01-PC3PONBR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Select
DataItem NE0DW-01-SEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_STY_NBR
DataItem NE0DW-01-SY1STNBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SY_COLR_CD_ID
DataItem NE0DW-01-SY2CLRID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ts-nike-shp-id
DataItem NE0DW-01-TSFSHPID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XDM_DIM_CD
DataItem NE0DW-01-XDMCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XGP_GPC_CD
DataItem NE0DW-01-XGPCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XQA_QUAL_CD
DataItem NE0DW-01-XQACD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XUM_UOM_CD
DataItem NE0DW-01-XUMCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XWH_WHSE_CD
DataItem NE0DW-01-XWHCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// zps-prod-src-cd
DataItem NE0DW-01-ZPSCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ZZ_CHNG_CNT
DataItem NE0DW-01-ZZZCHGCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ZZ_CHNG_DT
DataItem NE0DW-01-ZZZCHGDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ZZ_CHNG_HHMM
DataItem NE0DW-01-ZZZCHGTM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ZZ_SDT
DataItem NE0DW-01-ZZZSDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style number from vneinv01
DataItem NE0DW-02-ABEND-CUST num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NE0DW-02-ABEND-FILLER-CUST char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NE0DW-02-ABEND-FILLER-ORD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NE0DW-02-ABEND-FILLER-STY char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hyphen filler
DataItem NE0DW-02-ABEND-HYPEN-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hyphen filler
DataItem NE0DW-02-ABEND-HYPHEN-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NE0DW-02-ABEND-KEY char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op1cuoid from newrec
DataItem NE0DW-02-ABEND-OP1CUOID num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op1norid from newrec
DataItem NE0DW-02-ABEND-OP1NORID num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// composed order num
DataItem NE0DW-02-ABEND-ORDER-NBR num(10,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NE0DW-02-ABEND-STYLE char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style number from vneinv01
DataItem NE0DW-02-ABEND-SY1STNBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// color code   from vneinv01
DataItem NE0DW-02-ABEND-SY2CLRID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dimention    from vneinv01
DataItem NE0DW-02-ABEND-XDMCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// rebuild temp storage
DataItem NE0DW-02-BUILD-TEMP-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// SECOND TIME AROUND FLAG
DataItem NE0DW-02-ENTERFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// screen to go back to
DataItem NE0DW-02-FROM-SCREEN char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// INDEX FOR NE0DW01
DataItem NE0DW-02-INDEX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NE0DW-02-KEY02 char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NE0DW-02-KEY02-CUST int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NE0DW-02-KEY02-FILLER1 char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NE0DW-02-KEY02-FILLER2 char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NE0DW-02-KEY02-FILLER3 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NE0DW-02-KEY02-STORE smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NE0DW-02-KEY02-XGPCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NE0DW-02-KEY03 char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NE0DW-02-KEY03-FILLER1 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NE0DW-02-KEY03-NIDIVCID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NE0DW-02-KEY04 char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NE0DW-02-KEY04-FILLER1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NE0DW-02-KEY04-FILLER2 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NE0DW-02-KEY04-FILLER3 char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NE0DW-02-KEY04-PC3PONBR int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NE0DW-02-KEY04-SY1STNBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NE0DW-02-KEY04-XGPCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// number of records reclassed
DataItem NE0DW-02-RECLASS-COUNT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// RECORD LENTH OF NE0DW01
DataItem NE0DW-02-SIZE num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// number of records reclassed
DataItem NE0DW-02-WRITE-OFF-COUNT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CENTURY
DataItem NE0DW-02-WS-FORMAT-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CONVERT DATE TO CCYYMM
DataItem NE0DW-02-WS-FORMAT-CCYYMM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// MONTH
DataItem NE0DW-02-WS-FORMAT-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// YEAR
DataItem NE0DW-02-WS-FORMAT-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Discarded portion of order id
DataItem NE0DW-02-WS-OP-CUST-FIL num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// WS OP-CUST-ORD-ID
DataItem NE0DW-02-WS-OP-CUST-ORD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Order partition number
DataItem NE0DW-02-WS-OP-PART-NUM num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// char key part
DataItem NE0DW-CHG-KEY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current page number
DataItem NE0DW-CURR-PAGE-NBR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NE0DW-GL-CODE char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// gl-entity-id from vneinv01
DataItem NE0DW-GLAENT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// gl-natrl-acct-id from vneinv01
DataItem NE0DW-GLANTAC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// gl-proj-id
DataItem NE0DW-GLAPRJ char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// gl-rsp-ctr-id from vneinv01
DataItem NE0DW-GLARCID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// gl-sub-acct-id from vneinv01
DataItem NE0DW-GLASUB char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Highest page # in temp storage
DataItem NE0DW-HIGH-PAGE-NBR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Next page number to converse
DataItem NE0DW-HOLD-PAGE-NBR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hyphen filler
DataItem NE0DW-HYPHEN-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hyphen filler
DataItem NE0DW-HYPHEN-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// indicator
DataItem NE0DW-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Abend key fields
DataItem NE0DW-KEY char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Display large interger field
DataItem NE0DW-LRG-NBR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// new page number for map300
DataItem NE0DW-MAP-PAGE-NBR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op1cuoid from newrec
DataItem NE0DW-OP1CUOID num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// op1norid from newrec
DataItem NE0DW-OP1NORID num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// composed order num
DataItem NE0DW-ORDER-NBR num(10,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NE0DW-STYLE char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style number from vneinv01
DataItem NE0DW-SY1STNBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// color code   from vneinv01
DataItem NE0DW-SY2CLRID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dimention    from vneinv01
DataItem NE0DW-XDMCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// claims common working storage
DataItem VNEINV01-GROUP char(144)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

