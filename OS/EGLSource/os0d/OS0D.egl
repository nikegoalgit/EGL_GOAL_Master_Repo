package os0d;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF4;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import op.common.*;
import sy.common.SY2CLRID;
import sy.common.SY2REC;
import sy.common.SYCREC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
import vv.common.VOCROT01;
import xx.common.*;
import xx.common.XBK-BK-SESN-CD;
import xx.common.XGPCD;
import xx.common.XOTCD;
import xx.common.ZZZSDT;
import xx01.*;
import xx01.XBKTBL;
import xx02.*;
import xx02.XGACD;
import xx02.XGATBL;
import xx04.*;
import xx04.XOTDESC;
import xx04.XOTTBL;
import xx04.XPCCD;
import xx04.XPCTBL;
import xx05.*;
import xx05.XSNTBL;
import xx08.*;
import xx08.SY1STNBR;
//*** PROGRAM=OS0D ****
// This program allows users to inquire/maintain existing
// rows in the cutoff table.  The user will specify what order
// type is to be retreived.  The database will return 0 to n
// rows based upon the order type selected by the user.
// This program will format the screen with the order entry
// deadline information returned from the database for that
// order type.
// 
// This program allows adding, changing and deleting of table
// rows.
// 
//    The user may add change or delete (if authorized) a
//    table row by entering a, c or d in the selection option
//    and pressing enter.  the 'order entry deadline mainte-
//    nance' screen will be displayed with information from
//    The line selected.  user may change any date, style or
//    color.  user may delete entire table row.  user may add
//    entire table row.  on a change or an add, if style and
//    color are valid, product category and gender age will
//    be retreived and formatted to map.
// 
//    A user can select only one row at a time for maintenance.
// 
// Upon initial entry, the table is read and columns from the
// selected rows are formatted and saved in temporary storage,
// one display page per queue record.
// 
// The records are retrieved from temporary storage one at a
// time, for display to the user.  The user may page forward
// and backward, to view the rows that were selected.
// 
// The user may exit at any time via pf key.
// 
//   DATE      NAME    DESCRIPTION OF CHANGE
// --------   ------   ----------------------------------------
// 05/24/88   gwells   New application.
// 07/14/88   gwells   move cursor to next field when current
//                     field is filled.  changed constant
//                     fields from protect to askip - os0dm002.
// 10/18/88   dwalke   os0dwtix increased lngth by 3 bytes
// 01/09/89   dwalke   add segmented transaction id to appl.
// 03/17/89   jwood    added noncsp option to calls
// 04/06/89   gwells   remove xtvcd from prod appl - replaced
//                     xtvcd with xgpcd - 210,251.
// 05/10/89   jbecke   database changes to os0dw01.
// 02/15/91   dmeier   regen for database changes.
// 05/18/92   dlegg    Add booking season logic. Changes to
//                     OS0D104, 105, 111, 112, 142, 210, 211,
//                     230, 240, 244, 255, 256, 261, 264, 266,
//                     270. SR #774.
// 04/06/94   schase   Changed os0dm001 and os0d120 to inter-
//                     face with OP0Y Appl.
// 04/22/97   satyam   Changed os0d104, os0d110 and os0d142
//                     to display the select option when there
//                     are no rows for order type in
//                     dorder.vcutof01.
// 08/08/97   dsmit0   added os0d275 and os0d277  - called from
//                     os0d260 to add chg or delete the
//                     socd order type release table
//                     dordcd.vocrot01.
// 
// CONTROL   DATE    NAME  DESCRIPTION OF CHANGE
// ------- -------- ------ ------------------------------------
// Y2KFIX  02/17/98 WSQUIR Y2K MODIFICATIONS MADE TO OS0DM001 &
//                         OS0DM002.
// 
// BL2040  10/12/98 HBASKA icluded Y2K logic in OS0D142 as
//                         suggested by Carol Briney.
// BL2158  11/05/98 Udafon Fixed check for sqlcode -803 in
//                         OS0D275. Only insert rows    into
//                         dordcd.vocrot01 if product category,
//                         gender/age, style and color is in
//                         blank on the M002 screen. (OS0D260).
// BL2514  01/18/99 UANANT included Y2K logic in OS0D261.
// TT#4727 03/07/00 NKATHI Field name ORDER ENTRY DEADLINE is
//                         changed to ORDER ENTRY CUT-OFF DATE
//                         in the screens OS0DM001 and OS0DM002
// *********************
Program OS0D type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "OP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  OPJREC OPJREC; // record
  OPLREC OPLREC; // record
  OS0DW01 OS0DW01; // record
  OS0DW02 OS0DW02; // record
  SQLCA SQLCA; // record
  SY2REC SY2REC; // record
  SYCREC SYCREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VOCROT01 VOCROT01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XOTTBL {deleteAfterUse = yes}; // table
  use XGATBL {deleteAfterUse = yes}; // table
  use XPCTBL {deleteAfterUse = yes}; // table
  use XBKTBL; // table
  use XSNTBL; // table
  use OS0DM.OS0DM001,  // forms
      OS0DM.OS0DM002
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    OS0D000: OS0D000();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and map output areas.*/
     /* Flow to converse the Transportation Prototype process.*/
     /* ------------------------------------------------------------*/


    set OS0DW01 empty; /* Initialize working storage*/
    set ERRSQLCA empty;
    set TA5REC empty; /* initialize temp storage record*/
    set OS0DM001 initial; /* Initialize map1 output area*/
    set OS0DM002 initial; /* Initialize map2 output are*/

    OS0DW01.OS0DWERR = "N"; /* Iitialize error flag*/
    OS0DW01.OS0DWREQ = "N"; /* data is not requested*/


    OS0DW01.OS0DWYMD = VGVar.currentShortGregorianDate; /* current yymmdd*/
    if (OS0DW01.OS0DWYY <= 51)
      OS0DW01.OS0DWCEN = 20; /* current century*/
    else
      OS0DW01.OS0DWCEN = 19; /* current century*/
    end

    goto OS0D001; /* inq/maint master loop.*/


    OS0D001: OS0D001();
     /* ------------------------------------------------------------*/
     /* Flow to converse the deadline master loop process.*/
     /* ------------------------------------------------------------*/

    goto OS0D001; /* inq/maint master loop.*/


  end // end main
end // end OS0D

// application initialization
Function OS0D000()


     /* check security*/

  XSENTRY();

   /* GET ORDER*/

   /* ****************************************************/
   /* *** set segmented trans id                      ****/
   /* ****************************************************/

  COMMAREA.CAEZSAP = sysVar.transactionID;
  COMMAREA.CAEZSG12 = "OS";
  COMMAREA.CAEZSG4 = "D";
  sysVar.transactionID = COMMAREA.CAEZSAP;

   /* *************************************************************/
end // end OS0D000

// inq/maint master loop
Function OS0D001()

   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/

   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
   /* 7) process deadline maintenance.*/

   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/

  if (OS0DW01.OS0DWREQ == "Y") /* The request for data is yes*/
    OS0D100(); /* Obtain the data to display*/
  end

  OS0D110(); /* Format and display map1*/

  OS0D120(); /* Check inquiry pfkeys*/

  OS0D130(); /* Reset fields to normal intensity*/

  OS0D140(); /* process the service request*/

  if (OS0DW01.OS0DWSFL == "Y") /* valid selection - os0dm002*/
    OS0DW01.OS0DWFIR = "Y"; /* turnon first time thru flag*/
    OS0D200(); /* process deadline maintenance*/
  end


end // end OS0D001

// Obtain the data to display
Function OS0D100()
   /* ------------------------------------------------------------*/
   /* If data was requested, select order type and description.*/
   /* If order type does not exist, set error message.*/
   /* Purge any existing queue in temporary storage.*/
   /* Select and open the cursor for the set to be formatted*/
   /* (vcutof01).  Fetch and format the data in the page.*/
   /* If the page is full, add the page to the storage queue.*/
   /* At end of rows, add any partial page to the queue and close*/
   /* the selected set cursor.*/
   /* If no data found, display error message.*/

   /* ------------------------------------------------------------*/

  OS0DW01.XOTCD = OS0DM001.XOTCD; /* save key*/

  if (OS0DW01.XOTCD > " ") /* order type is entered*/
    if (OS0DW01.XOTCD in XOTTBL.XOTCD) /* ord type is valid*/
      if (XOTTBL.XOTFUTRF[sysVar.arrayIndex] == "Y") /* futures*/
        OS0DW01.XOTDESC = XOTTBL.XOTDESC[sysVar.arrayIndex]; /* save desc*/
        OS0DW01.XGPCD = XOTTBL.XGPCD[sysVar.arrayIndex]; /* save gpc*/

        OS0D102(); /* purge tsq*/

        OS0D103(); /* select set from cutoff table*/

      else
        converseLib.validationFailed(324); /* must be futures order type*/
        set OS0DM001 initial;
        OS0DM001.XOTCD = OS0DW01.XOTCD;
        OS0DM001.XXXPRCNM = "OS0D100";
        set OS0DM001.XOTCD cursor, modified, bold;
        OS0DW01.OS0DWREQ = "N";
        OS0DW01.OS0DWERR = "Y"; /* set error flag on*/

        OS0D102(); /* purge tsq*/
        return; /* redisplay map*/

      end
    else
      converseLib.validationFailed(17); /* order type is not valid*/
      set OS0DM001 initial;
      OS0DM001.XOTCD = OS0DW01.XOTCD;
      OS0DM001.XXXPRCNM = "OS0D100";
      set OS0DM001.XOTCD cursor, modified, bold;
      OS0DW01.OS0DWREQ = "N";
      OS0DW01.OS0DWERR = "Y"; /* set error flag on*/

      OS0D102(); /* purge tsq*/
      return; /* redisplay map*/

    end
  else
    converseLib.validationFailed(323); /* must enter order type*/
    set OS0DM001 initial;
    OS0DM001.XOTCD = OS0DW01.XOTCD;
    OS0DM001.XXXPRCNM = "OS0D100";
    set OS0DM001.XOTCD cursor, modified, bold;
    OS0DW01.OS0DWREQ = "N";
    OS0DW01.OS0DWERR = "Y"; /* set error flag on*/

    OS0D102(); /* purge tsq*/
    return; /* redisplay map*/

  end



end // end OS0D100

// Purge any temporary storage
Function OS0D102()
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/

  TA5REC.TA5APPID = "OS0D"; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/

  call "TA0050" (OS0DW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1PGMNM = "OS0D102"; /* Process name*/
    TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
    TA1REC.TA1MAP = "OS0DM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

  end

  OS0DW01.OS0DWTSP = 0; /* Reset current page number*/
  OS0DW01.TA5TSQIX = 0; /* Reset highest page number*/


end // end OS0D102

// Select set vcutof01
Function OS0D103()
   /* ------------------------------------------------------------*/
   /* Select the set of table rows.*/
   /* If not available, return an error message to the user.*/
   /* If any other, indicate system error.*/
   /* ------------------------------------------------------------*/

      /* setup key for call to cutoff table*/

  set TA1REC empty;
  set SQLCA empty;
  set OPJREC empty;
  set OPLREC empty;

  OPJREC.XOTCD = OS0DW01.XOTCD; /* move order type*/
  OPJREC.XPCCD = "*"; /* all prod categories*/
  OPJREC.XGACD = "*"; /* all gender ages*/
  OPJREC.SY1STNBR = "*"; /* all styles*/
  OPJREC.SY2CLRID = "*"; /* all colors*/
  OPLREC.OPJCNDTB = 99999999; /* all need dates for o.t.*/
  OPLREC.OPLSOP = "SS"; /* selection option*/

  call "IO2560" (OPLREC, SQLCA, OPJREC) {isNoRefresh = yes, isExternal = yes}; /* Select table set*/

  if (SQLCA.VAGen_SQLCODE == 0) /* a good return*/
    set OPJREC empty; /* Clear cutoff record*/
    set OS0DW02 empty; /* Clear temporary storage record*/
    OS0DW01.OS0DWIXM = 1; /* Initialize display line number*/
    OS0DW01.OS0DWEOF = "N"; /* Initialize end of file switch*/
    OS0DW01.OS0DWERR = "N"; /* Init error flag*/
    OS0DW01.OS0DWGAP = "N"; /* init gap exist flag*/
    OS0DW01.OS0DWFFF = "Y"; /* first fetch flag*/
    OS0DW01.OS0DWSND = 0; /* init save need date*/
    while (OS0DW01.OS0DWEOF == "N" /* Until end of set*/
     && OS0DW01.OS0DWERR == "N") /* or until an error is found*/
      OS0D104(); /* fetch data and format page*/
      if (OS0DW01.OS0DWIXM > 14) /* Page is full*/
        OS0D105(); /* Add page to temporary storage*/
      end
    end
    if (OS0DW01.OS0DWEOF == "Y") /* end of set was found*/
      if (OS0DW01.OS0DWIXM > 1) /* and some of the page was formatted*/
        OS0D105(); /* Add page to temporary storage*/
      end
      if (OS0DW01.TA5TSQIX >= 1)
        OS0DW01.OS0DWTSP = 1; /* Initialize page number*/
      else
        OS0DW01.OS0DWTSP = 0;
      end
      OS0DW01.OS0DWREQ = "N"; /* Request for data completed*/
      OS0D106(); /* Close the selected set cursor*/
    end
  else
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OS0D"; /* Process name*/
    TA1REC.TA1LOCAT[1] = "SS";
    TA1REC.TA1LOCAT[2] = "OS0D103";
    TA1REC.TA1LOCAT[3] = "IO2560";
    TA1REC.TA1LOCAT[4] = "  ";
    TA1REC.TA1MAP = "OS0DM001"; /* Map name*/
    TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCUTOF01"; /* Table view name*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    XSPF4();
    OS0DM001.VAGen_EZEMSG = COMMAREA.CAMSG;
  end


end // end OS0D103

// Fetch next row and format
Function OS0D104()
   /* ------------------------------------------------------------*/
   /* Fetch the next row from the selected set of rows.*/
   /* If end of file, set end of file switch.*/
   /* indicate any errors.*/
   /* Format the data in the temporary storage display line.*/
   /* ------------------------------------------------------------*/

  OPJREC.XOTCD = OS0DW01.XOTCD; /* order type*/
  OPLREC.OPLSOP = "SN"; /* selection option*/

  call "IO2560" (OPLREC, SQLCA, OPJREC) {isNoRefresh = yes, isExternal = yes}; /* Fetch the next row*/

  if (SQLCA.VAGen_SQLCODE == 100) /* End of selected set*/
    if (OS0DW01.OS0DWFFF == "Y") /* first fetch*/
      OS0DW01.OS0DWEOF = "Y"; /* end of file*/
      set OS0DM001 initial;
      OS0DM001.XOTCD = OS0DW01.XOTCD;
      OS0DM001.XOTDESC = OS0DW01.XOTDESC;
  /* MOVE 404 TO EZEMNO;           /* deadline not found for o.t.*/
      converseLib.validationFailed(937); /* deadline not found for o.t.*/
      OS0DM001.XXXPRCNM = "OS0D104";
      OS0DW01.OS0DWERR = "Y"; /* Indicate error*/
      set OS0DM001.XOTCD cursor, modified, bold;
      OS0DW01.OS0DWNDSFLG = "Y"; /* init of no data selection flag*/
      return;

    else
      OS0DW01.OS0DWEOF = "Y"; /* end of set found*/
    end
  else
    if (SQLCA.VAGen_SQLCODE != 0) /* unexpected return code*/
      OS0D102(); /* purge temp storage*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = "OS0D104"; /* Process name*/
      TA1REC.TA1LOC = "SN ";
      TA1REC.TA1MAP = "OS0DM001"; /* Map name*/
      TA1REC.TA1DBASE = "DTORDER "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCUTOF01"; /* Table view name*/

      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      XSPF4();

    else
      OS0DW01.OS0DWFFF = "N"; /* turnoff first fetch flag*/
      OS0DW02.OS0DMSEL = " ";
      OS0DW02.OPJCNDTB[OS0DWIXM] = OPJREC.OPJCNDTB; /* Save data*/
      OS0DW02.OPJCNDTX[OS0DWIXM] = OPJREC.OPJCNDTX;
      OS0DW02.OPJCUTDT[OS0DWIXM] = OPJREC.OPJCUTDT;
      OS0DW02.XPCCD[OS0DWIXM] = OPJREC.XPCCD;
      OS0DW02.XGACD[OS0DWIXM] = OPJREC.XGACD;
      OS0DW02.SY1STNBR[OS0DWIXM] = OPJREC.SY1STNBR;
      OS0DW02.SY2CLRID[OS0DWIXM] = OPJREC.SY2CLRID;
      OS0DW02.XBK-BK-SESN-CD[OS0DWIXM] = OPJREC.XBK-BK-SESN-CD;
      OS0DW02.OP-BK-YR[OS0DWIXM] = OPJREC.OP-BK-YR;
      OS0DW02.ZZZSDT[OS0DWIXM] = OPJREC.ZZZSDT;

      OS0D107(); /* check for gaps in need date*/

      OS0DW01.OS0DWIXM = OS0DW01.OS0DWIXM + 1; /* Increment line index*/
    end
  end



end // end OS0D104

// Add page to temporary storage
Function OS0D105()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/

  OS0DW02.OS0DWLEN = 490; /* Temporary storage length*/
  TA5REC.TA5APPID = "OS0D"; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/

  call "TA0050" (OS0DW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD == 0) /* everything is a-ok*/
    OS0DW01.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    OS0DW01.OS0DWIXM = 1; /* Reset display line number*/
    set OS0DW02 empty; /* Clear temporary storage record*/
  else /* error was found*/
    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "OS0D105"; /* Process name*/
    TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
    TA1REC.TA1MAP = "OS0DM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    COMMAREA.CAUSERA = " ";
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    XSPF4();
    exit program;

  end


end // end OS0D105

// Close selected set cursor
Function OS0D106()
   /* ------------------------------------------------------------*/
   /* Close the selected set of table rows.*/
   /* indicat any error.*/
   /* ------------------------------------------------------------*/

  OPLREC.OPLSOP = "CS"; /* selection option*/

  call "IO2560" (OPLREC, SQLCA, OPJREC) {isNoRefresh = yes, isExternal = yes}; /* Close table set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/

    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "OS0D106"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "OS0DM001"; /* Map name*/
    TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCUTOF01"; /* Table view name*/

    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    XSPF4();

  end


end // end OS0D106

// check for gap in need date
Function OS0D107()


      /* check for gaps in need date at order type level*/


  if (OS0DW02.XPCCD[OS0DWIXM] != " "    /* this is*/
   || OS0DW02.XGACD[OS0DWIXM] != " "    /* an*/
   || OS0DW02.SY1STNBR[OS0DWIXM] != " " /* exception*/
   || OS0DW02.SY2CLRID[OS0DWIXM] != " ") /* record*/
     /* next sentence - do not check for gaps*/
  else
    if (OS0DW01.OS0DWSND == 0) /* first time compared*/
      OS0DW01.OS0DWSND = OS0DW02.OPJCNDTX[OS0DWIXM];
    else
      set TA1REC empty;
      set TA2REC empty;
      TA2REC.TA2DTOPT = "GREGGREG";
      TA2REC.TA2GRGGN = OS0DW01.OS0DWSND;
      TA2REC.TA2GRTYP = "G";
      TA2REC.TA2DYAOD = 1;

      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};

      if (TA2REC.TA2RTNCD == 0)
        if (TA2REC.TA2GRGGN == OS0DW02.OPJCNDTB[OS0DWIXM]) /* no gap*/
          OS0DW02.OS0DWGAP[OS0DWIXM] = "N";
          OS0DW01.OS0DWSND = OS0DW02.OPJCNDTX[OS0DWIXM];
        else
          OS0DW01.OS0DWGAP = "Y";
          OS0DW02.OS0DWGAP[OS0DWIXM] = "Y";
          OS0DW01.OS0DWSND = OS0DW02.OPJCNDTX[OS0DWIXM];
        end
      else /* abend*/
        TA1REC.TA1DBASE = " ";
        TA1REC.TA1TBLVU = " ";
        TA1REC.TA1TBLKE = " ";
        TA1REC.TA1LOCAT[4] = "TA0040";
        TA1REC.TA1LOCAT[1] = "GETDATE";
        set SQLCA empty;
        XSPF4();
      end
    end
  end



end // end OS0D107

// Format and display the map
Function OS0D110()
   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* ------------------------------------------------------------*/

  if (OS0DW01.OS0DWERR == "N") /* No error message to display*/
    set OS0DM001 initial; /* Clear map output area*/
    OS0DM001.XXXPRCNM = "OS0D110"; /* process name*/
    OS0DM001.XOTCD = OS0DW01.XOTCD;
    OS0DM001.XOTDESC = OS0DW01.XOTDESC;

    OS0D111(); /* Format the selected data*/
  end

  OS0DW01.OS0DWIXM = 1; /* init index*/

  if (OS0DM001.OPJCNDTB[OS0DWIXM] == 0) /* If no data on page*/
    set OS0DM001.XOTCD cursor, modified, bold;
    set OS0DM001.XOTDESC invisible;
    set OS0DM001.OS0DMPGL invisible;
    set OS0DM001.OS0DMTSP invisible;
    set OS0DM001.OS0DMOFL invisible;
    set OS0DM001.OS0DMTSI invisible;
    while (OS0DW01.OS0DWIXM <= 14)
      if (OS0DW01.OS0DWNDSFLG == "Y" /* when no data*/
       && OS0DWIXM == 1)             /* and first line sel*/
        set OS0DM001.OS0DMSEL[OS0DWIXM] normal;
        if (OS0DW01.OS0DWNDSOPT == "Y") /* no data select option flag*/
          set OS0DM001.OS0DMSEL[OS0DWIXM] cursor, modified, bold;
        end
      else
        set OS0DM001.OS0DMSEL[OS0DWIXM] invisible; /* do not show*/

      end
      OS0DW01.OS0DWIXM = OS0DW01.OS0DWIXM + 1; /* increment index*/
    end
  end
  OS0DM001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/

  converse OS0DM001 ;

  OS0DW01.OS0DWERR = "N"; /* Reset error flag*/

end // end OS0D110

// Format the selected data
Function OS0D111()
   /* ------------------------------------------------------------*/
   /* Obtain the next page from temporary storage.*/
   /* Format the data in the map.*/
   /* ------------------------------------------------------------*/



  if (OS0DW01.TA5TSQIX == 0) /* if no data to display*/

    /* this will happen first time through*/
    /* Do not format page*/

  else

    OS0D112(); /* Obtain temporary storage page*/

    set OS0DM001.OS0DMPGL skip; /* Display "PAGE" literal*/
    set OS0DM001.OS0DMOFL skip; /* Display "OF" literal*/

    OS0DM001.OS0DMTSP = OS0DW01.OS0DWTSP; /* Current page number*/
    set OS0DM001.OS0DMTSP initialAttributes; /* Display number*/
    OS0DM001.OS0DMTSI = OS0DW01.TA5TSQIX; /* Highest page number*/
    set OS0DM001.OS0DMTSI skip; /* Display number*/

    OS0DW01.OS0DWIXM = 1; /* Initialize line index*/
    while (OS0DW01.OS0DWIXM <= 14 /* Until end of lines*/
     && OS0DW02.OPJCNDTB[OS0DWIXM] != 0) /* or last line of data*/
      if (COMMAREA.CACHGFL == "Y") /* authorized to maintenance*/
        set OS0DM001.OS0DMSEL[OS0DWIXM] normal; /* Display select flag*/
      else
        set OS0DM001.OS0DMSEL[OS0DWIXM] skip, invisible;
      end

      OS0DW01.OS0DWBEG = OS0DW02.OPJCNDTB[OS0DWIXM];
                                   /* move to num fld*/
      OS0DM001.OPJCNDTB[OS0DWIXM] = OS0DW01.OS0DWBGN; /* move to map*/
      OS0DW01.OS0DWEND = OS0DW02.OPJCNDTX[OS0DWIXM];
                                   /* move to num fld*/
      OS0DM001.OPJCNDTX[OS0DWIXM] = OS0DW01.OS0DWENN; /* move to map*/
      OS0DW01.OS0DWCUT = OS0DW02.OPJCUTDT[OS0DWIXM];
                                   /* move to num fld*/
      OS0DM001.OPJCUTDT[OS0DWIXM] = OS0DW01.OS0DWCTN; /* move to map*/
      OS0DM001.XPCCD[OS0DWIXM] = OS0DW02.XPCCD[OS0DWIXM];
      OS0DM001.XGACD[OS0DWIXM] = OS0DW02.XGACD[OS0DWIXM];
      OS0DM001.SY1STNBR[OS0DWIXM] = OS0DW02.SY1STNBR[OS0DWIXM];
      OS0DM001.SY2CLRID[OS0DWIXM] = OS0DW02.SY2CLRID[OS0DWIXM];

       /* Bookings Seasons fields*/
      OS0DM001.XBK-BK-SESN-CD[OS0DWIXM] = OS0DW02.XBK-BK-SESN-CD[OS0DWIXM];
      if (OS0DW02.OP-BK-YR[OS0DWIXM] != 0)
        OS0DW01.OS0DW-OP-BK-CCYY = OS0DW02.OP-BK-YR[OS0DWIXM];
        OS0DM001.OS0DM-OP-BK-YY[OS0DWIXM] = OS0DW01.OS0DW-OP-BK-YY;
      else
        OS0DM001.OS0DM-OP-BK-YY[OS0DWIXM] = " ";
      end

             /* highlight gap in need date*/

      if (OS0DW02.OS0DWGAP[OS0DWIXM] == "Y") /* gap exist in need dat*/
        set OS0DM001.OPJCNDTB[OS0DWIXM] bold;
      end

      OS0DW01.OS0DWIXM = OS0DW01.OS0DWIXM + 1; /* Increment line index*/

    end

     /* do not display map select if no more data to display*/

    while (OS0DW01.OS0DWIXM <= 14 /* Until end of lines*/
     && OS0DW02.OPJCNDTB[OS0DWIXM] == 0)
      set OS0DM001.OS0DMSEL[OS0DWIXM] skip, invisible;

      OS0DW01.OS0DWIXM = OS0DW01.OS0DWIXM + 1; /* Increment line index*/

    end
  end

  if (OS0DW01.OS0DWGAP == "Y") /* there is a gap in need dates*/
                                   /* somewhere*/
    converseLib.validationFailed(424); /* gap exist in need date*/
  end



end // end OS0D111

// Read temporary storage page
Function OS0D112()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/

  OS0DW02.OS0DWLEN = 490; /* Temporary storage length*/
  TA5REC.TA5APPID = "OS0D"; /* Application identification*/
  TA5REC.TA5TSQIX = OS0DW01.OS0DWTSP; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/

  call "TA0050" (OS0DW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
                                   /* Temporary storage subroutine*/

  if (TA5REC.TA5RTNCD != 0) /* Error was found*/

    TA1REC.TA1TYPE = "APPL"; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "OS0D   "; /* Process name*/
    TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
    TA1REC.TA1MAP = "OS0DM001"; /* Map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* Subroutine parameters*/

    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

    OS0DM001.XXXPRCNM = "OS0D112"; /* Process name*/
    OS0DW01.OS0DWERR = "Y"; /* Indicate error*/
    converseLib.validationFailed(10); /* database busy ; try again*/

    converseLib.clearScreen();
     /* Clear screen before redisplay*/

    exit stack; /* Exit to redisplay map*/

  end


end // end OS0D112

// Check inquiry pfkeys
Function OS0D120()
   /* ------------------------------------------------------------*/
   /* Check attention identifier for inquiry screen*/
   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf3 /* transfer to o/p menu*/
   || converseVar.eventKey is pf4 /* transfer to master menu*/
   || converseVar.eventKey is pf7 /* scroll forward*/
   || converseVar.eventKey is pf8) /* scrill backward*/
     /* continue - everything okay*/
  else
    converseLib.validationFailed(008); /* invalid pf key*/
    OS0DM001.XXXPRCNM = "OS0D120";
    OS0DW01.OS0DWERR = "Y";
    return;
  end

  if (converseVar.eventKey is pf3) /* PF3 was pressed*/
    OS0D102(); /* purge temp storage*/
    COMMAREA.CATOAP = "OP0Y"; /* o/p menu*/
    XSEXIT(); /* transfer to o/p menu*/
  end

  if (converseVar.eventKey is pf4) /* transfer to master menu*/
    OS0D102(); /* purge temp storage*/
    XSPF4(); /* transfer to o/p menu*/
  end


end // end OS0D120

// Reset highlighted fields
Function OS0D130()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/

  set OS0DM001.XOTCD initialAttributes; /* order type code*/

  OS0DW01.OS0DWIXM = 1; /* Initialize line index*/

  while (OS0DW01.OS0DWIXM <= 14 /* Until end of lines*/
   && OS0DM001.OPJCNDTB[OS0DWIXM] != 0) /* and need date exists*/
    if (COMMAREA.CACHGFL == "Y") /* authorized to maintenance*/
      set OS0DM001.OS0DMSEL[OS0DWIXM] normal; /* Reset select flag*/
    else
      set OS0DM001.OS0DMSEL[OS0DWIXM] skip, invisible; /* don't show*/
    end

    OS0DW01.OS0DWIXM = OS0DW01.OS0DWIXM + 1; /* Increment line index*/
  end



end // end OS0D130

// process the entered data
Function OS0D140()
   /* ------------------------------------------------------------*/
   /* Determine whether a valid request to scroll was entered.*/
   /* If not a scroll request, verify any changed data.*/
   /* If any errors were found, exit to redisplay the map.*/
   /* ------------------------------------------------------------*/

  if (OS0DW01.OS0DWERR != "Y") /* no errors*/
    if (converseVar.eventKey is pf7 /* Scroll back request*/
     || converseVar.eventKey is pf8) /* or scroll forward request*/
      OS0D141(); /* Verify scroll request*/
    else
      OS0D142(); /* Verify any changed data*/
    end
  else
    exit stack; /* Exit to redisplay map*/
  end


end // end OS0D140

// Verify scroll request
Function OS0D141()
   /* ------------------------------------------------------------*/
   /* Indicate an error for any data that was modified.*/
   /* Ensure that pages exist to scroll forward or back.*/
   /* ------------------------------------------------------------*/

  OS0DW01.OS0DWIXM = 14; /* Initialize line index*/

  while (OS0DW01.OS0DWIXM > 0 /* Until end of lines*/
   && OS0DW01.OS0DWERR == "N") /* no errors*/
    if (OS0DM001.OS0DMSEL[OS0DWIXM] != " ") /* a selection was made*/
      set OS0DM001.OS0DMSEL[OS0DWIXM] cursor, modified, bold; /* Highlight*/
      OS0DM001.XXXPRCNM = "OS0D141"; /* Process name*/
      converseLib.validationFailed(04); /* can't modify & scroll*/
      OS0DW01.OS0DWERR = "Y"; /* Indicate error*/
      OS0DW01.OS0DWREQ = "N"; /* no request for data*/
      return;
    end
    OS0DW01.OS0DWIXM = OS0DW01.OS0DWIXM - 1; /* Decrement line number*/
  end

  if (OS0DM001.OS0DMTSP != OS0DW01.OS0DWTSP) /* page modified*/
    OS0DM001.OS0DMTSP = OS0DW01.OS0DWTSP; /* move cur page back*/
    set OS0DM001.OS0DMTSP cursor, modified, bold; /* Highlight*/
    OS0DM001.XXXPRCNM = "OS0D141"; /* Process name*/
    converseLib.validationFailed(04); /* can't modify & scroll*/
    OS0DW01.OS0DWERR = "Y"; /* Indicate error*/
    OS0DW01.OS0DWREQ = "N"; /* no request for data*/
    return;
  else
    if (OS0DM001.XOTCD != OS0DW01.XOTCD) /* order type modified*/
      OS0DM001.XOTCD = OS0DW01.XOTCD; /* move cur xotcd back*/
      set OS0DM001.XOTCD cursor, modified, bold; /* Highlight*/
      OS0DM001.XXXPRCNM = "OS0D141"; /* Process name*/
      converseLib.validationFailed(04); /* can't modify & scroll*/
      OS0DW01.OS0DWERR = "Y"; /* Indicate error*/
      OS0DW01.OS0DWREQ = "N"; /* no request for data*/
      return;
    end
  end

  if (converseVar.eventKey is pf7) /* Scroll back request*/
    if (OS0DW01.OS0DWTSP < 2) /* and no previous pages*/
      OS0DM001.XXXPRCNM = "OS0D141"; /* Process name*/
      converseLib.validationFailed(192); /* end of page backward*/
      OS0DW01.OS0DWERR = "Y"; /* Indicate error*/

    else
                                   /* adjust temporary storage page number*/
      OS0DW01.OS0DWTSP = OS0DW01.OS0DWTSP - 1; /* Decrement page number*/
    end
  else
    if (converseVar.eventKey is pf8) /* Scroll forward requested*/
      if (OS0DW01.OS0DWTSP >= OS0DW01.TA5TSQIX) /* and no more pages*/
        OS0DM001.XXXPRCNM = "OS0D141"; /* Process name*/
        converseLib.validationFailed(191); /* end of page forward*/
        OS0DW01.OS0DWERR = "Y"; /* Indicate error*/
      else
        OS0DW01.OS0DWTSP = OS0DW01.OS0DWTSP + 1; /* Increment page number*/
      end
    end
  end


end // end OS0D141

// Verify any changed data
Function OS0D142()
   /* ------------------------------------------------------------*/
   /* Return to the previous process if no data was changed.*/
   /* Verify the data that was changed.*/
   /* ------------------------------------------------------------*/

  if (OS0DM001.XOTCD == " ") /* If key is blank*/
    if (OS0DM001.OPJCNDTB[1] != 0)
      OS0D102(); /* Purge temporary storage*/
      set OS0DM001 initial;
      converseLib.validationFailed(323); /* order type must be entered*/
      set OS0DM001.XOTCD cursor, modified, bold;
      OS0DW01.OS0DWERR = "Y";
      OS0DW01.OS0DWREQ = "N";
      OS0DM001.XXXPRCNM = "OS0D142";
      return;
    else
      OS0DW01.OS0DWREQ = "Y";
    end
  else
    if (OS0DM001.OS0DMTSP != OS0DW01.OS0DWTSP) /* page modified*/
      if (OS0DM001.OS0DMTSP > OS0DW01.TA5TSQIX)
        OS0DW01.OS0DWERR = "Y";
        converseLib.validationFailed(03); /* exceeds highest page*/
        set OS0DM001.OS0DMTSP cursor, bold;
        return;
      else
        OS0DW01.OS0DWTSP = OS0DM001.OS0DMTSP;
        OS0DW01.OS0DWREQ = "N";
        return; /* go display map*/
      end
    else
      OS0DW01.OS0DWREQ = "Y";
    end
  end

  OS0DW01.OS0DWSFL = "N"; /* Initialize selection flag*/
  OS0DW01.OS0DWIXM = 1; /* Initialize index*/

  while (OS0DW01.OS0DWIXM <= 14 /* Until end of lines*/
   && OS0DW01.OS0DWSFL == "N") /* no selection made*/
    if (OS0DM001.OS0DMSEL[OS0DWIXM] != " ") /* If selection is not blank*/
      if (OS0DW01.OS0DWNDSFLG == "Y")
        if (OS0DM001.OS0DMSEL[OS0DWIXM] == "A")
          OS0DW01.OS0DWSFL = "Y";
          OS0DW01.OS0DWNDSFLG = "N"; /* reset no data selection flag*/
          OS0DW01.OS0DWNDSOPT = "N"; /* reset no data select opt flag*/
        else
          converseLib.validationFailed(272); /* selection code invalid*/
          OS0DW01.OS0DWERR = "Y"; /* Indicate problem*/
          OS0DM001.XXXPRCNM = "OS0D142"; /* Process name*/
          set OS0DM001.OS0DMSEL[OS0DWIXM] cursor, modified, bold;
          OS0DW01.OS0DWREQ = "N"; /* Set request for data*/
          OS0DW01.OS0DWNDSOPT = "Y"; /* init no data select opt flag*/
        end
      else
        if (OS0DM001.OS0DMSEL[OS0DWIXM] == "A" /* request for add*/
         || OS0DM001.OS0DMSEL[OS0DWIXM] == "C" /* request for change*/
         || OS0DM001.OS0DMSEL[OS0DWIXM] == "D") /* request for delete*/
          OS0DW01.OS0DWSFL = "Y"; /* Initialize selection flag*/
        else
          converseLib.validationFailed(272); /* selection code invalid*/
          OS0DW01.OS0DWERR = "Y"; /* Indicate problem*/
          OS0DM001.XXXPRCNM = "OS0D142"; /* Process name*/
          set OS0DM001.OS0DMSEL[OS0DWIXM] cursor, modified, bold;
          OS0DW01.OS0DWREQ = "N"; /* Set request for data*/
        end
      end
    end
    OS0DW01.OS0DWIXM = OS0DW01.OS0DWIXM + 1; /* Increment line index*/
  end

  if (OS0DW01.OS0DWSFL == "Y") /* selection was made*/
    OS0DW01.OS0DWIXM = OS0DW01.OS0DWIXM - 1; /* decrement line index*/
    OS0DW01.XOTCD = OS0DM001.XOTCD;
    OS0DW01.XOTDESC = OS0DM001.XOTDESC;
    OS0DW01.OS0DWSEL = OS0DM001.OS0DMSEL[OS0DWIXM];
   /* -------------------- Y2K IN BEGIN ---------------------------*/
    OS0DW01.OS0DWBEG = OS0DW02.OPJCNDTB[OS0DWIXM]; /* format is*/
    OS0DW01.OS0DWEND = OS0DW02.OPJCNDTX[OS0DWIXM]; /* CCYYMMDD*/
    OS0DW01.OS0DWCUT = OS0DW02.OPJCUTDT[OS0DWIXM];
   /* -------------------- Y2K IN END -----------------------------*/
   /* -------------------- Y2K OUT BEGIN --------------------------*/
   /* MOVE OS0DM001.OPJCNDTB(OS0DWIXM) TO OS0DW01.OS0DWBGN; /* format is*/
   /* MOVE OS0DM001.OPJCNDTX(OS0DWIXM) TO OS0DW01.OS0DWENN; /* yymmdd*/
   /* MOVE OS0DM001.OPJCUTDT(OS0DWIXM) TO OS0DW01.OS0DWCTN;*/
   /* ------------------- Y2K OUT BEGIN --------------------------*/
    OS0DW01.XPCCD = OS0DM001.XPCCD[OS0DWIXM];
    OS0DW01.XGACD = OS0DM001.XGACD[OS0DWIXM];
    OS0DW01.SY1STNBR = OS0DM001.SY1STNBR[OS0DWIXM];
    OS0DW01.SY2CLRID = OS0DM001.SY2CLRID[OS0DWIXM];
    OS0DW01.XBK-BK-SESN-CD = OS0DM001.XBK-BK-SESN-CD[OS0DWIXM];
    if (OS0DM001.OS0DM-OP-BK-YY[OS0DWIXM] != " ")
      OS0DW01.OS0DW-OP-BK-YY = OS0DM001.OS0DM-OP-BK-YY[OS0DWIXM];
      if (OS0DW01.OS0DW-OP-BK-YY > 51)
        OS0DW01.OS0DW-OP-BK-CC = 19;
      else
        OS0DW01.OS0DW-OP-BK-CC = 20;
      end
      OS0DW01.OP-BK-YR = OS0DW01.OS0DW-OP-BK-CCYY; /* work field to*/
                                                        /* work rec field*/
    else
      OS0DW01.OS0DW-OP-BK-CCYY = 0;
      OS0DW01.OP-BK-YR = 0;
    end

    return;
  else
    return;
  end


end // end OS0D142

// process deadline maintenance
Function OS0D200()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display os0dm002.*/
   /* processing returns to this process if an error occurs (to*/
   /* redisplay os0dm002) or if selection is an 'add' (so user*/
   /* can add multiple records without going back to os0dm001.*/

   /* 1) Format the map output area and display the map.*/
   /* 2) Check the attention identifier used to respond.*/
   /* 3) Reset highlighted fields to normal intensity.*/
   /* 4) edit the selection data.*/
   /* 5) Process the selection data.*/

   /* ------------------------------------------------------------*/


  while (OS0DW01.OS0DWFIR == "Y"      /* first time thru*/
   || OS0DW01.OS0DWERR == "Y"      /* error found*/
   || OS0DW01.OS0DWSEL == "A"      /* add requested*/
   || converseVar.eventKey is pf12 /* edit only*/
   || converseVar.eventKey is pf19) /* refresh screen*/

    OS0DW01.OS0DWFIR = "N"; /* no longer first pass*/
    OS0DW01.OS0DWSFL = "N"; /* turnoff selection flag*/

    OS0D210(); /* Format and display map2*/

    OS0D220(); /* Check maintenance pfkeys*/

    OS0D230(); /* Reset fields to normal intensity*/

    OS0D240(); /* edit changed data*/

    OS0D260(); /* Process selection data*/

  end

  OS0DW01.OS0DWREQ = "Y"; /* data request flag*/



end // end OS0D200

// Format and display map2
Function OS0D210()
   /* ------------------------------------------------------------*/
   /* Format the map heading.*/
   /* If no error to display, format the selected data.*/
   /* ------------------------------------------------------------*/

  if (OS0DW01.OS0DWERR == "Y" /* errors found*/
   || converseVar.eventKey is pf12) /* edit only*/
     /* next sentence ;*/
  else
    set OS0DM002 initial; /* Clear map output area*/
    OS0DM002.XXXPRCNM = "OS0D210";

    if (OS0DW01.OS0DWSEL == "A") /* add selected*/
      OS0DM002.OS0DMFUN = "   ADD  ";
    else
      if (OS0DW01.OS0DWSEL == "C") /* change selected*/
        OS0DM002.OS0DMFUN = " CHANGE ";
      else
        if (OS0DW01.OS0DWSEL == "D") /* delete selected*/
          OS0DM002.OS0DMFUN = " DELETE ";
        end
      end
    end
    OS0DM002.XOTCD = OS0DW01.XOTCD;
    set OS0DM002.XOTCD protect;
    OS0DM002.XOTDESC = OS0DW01.XOTDESC;
    OS0DM002.OPJCNDTB = OS0DW01.OS0DWBGN; /* format is yymmdd*/
    OS0DM002.OPJCNDTX = OS0DW01.OS0DWENN;
    OS0DM002.OPJCUTDT = OS0DW01.OS0DWCTN;

          /* get map2 descriptions*/
          /* **********************/

    OS0D211(); /* get map2 descriptions*/

  end

    /* protect all fields if deleting*/

  if (OS0DW01.OS0DWSEL == "D")
    set OS0DM002.OPJCNDTB protect;
    set OS0DM002.OPJCNDTX protect;
    set OS0DM002.OPJCUTDT protect;
    set OS0DM002.XPCCD protect;
    set OS0DM002.XGACD protect;
    set OS0DM002.SY1STNBR protect;
    set OS0DM002.SY2CLRID protect;
    set OS0DM002.XBK-BK-SESN-CD protect;
    set OS0DM002.OS0DM-OP-BK-YY protect;
  end
  set OS0DM002.OS0DMFUN protect;


  OS0DM002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/


  converse OS0DM002 ;

  OS0DW01.OS0DWERR = "N"; /* Reset error switch*/

end // end OS0D210

// get map2 descriptions
Function OS0D211()
   /* ------------------------------------------------------------*/

                 /* get os0dm002 descriptions*/
   /* ------------------------------------------------------------*/


        /* get prod cat description*/
        /* *************************/
  OS0DM002.XPCCD = OS0DW01.XPCCD;

  if (OS0DM002.XPCCD != " ") /* prod cat entered*/
    OS0D251(); /* validate prod cat and get desc*/

    if (OS0DW01.OS0DWCAT == "N") /* prod cat not found*/
      OS0DM002.XPCDESC = " ";
    end
  else
    OS0DM002.XPCDESC = " ";
  end

           /* get gender age description*/
           /* ***************************/
  OS0DM002.XGACD = OS0DW01.XGACD;
  if (OS0DW01.XGACD in XGATBL.XGACD)
    OS0DM002.XGADESC = XGATBL.XGADESC[sysVar.arrayIndex];
  else
    OS0DM002.XGADESC = " ";
  end

           /* get style/color descriptions*/
           /* *****************************/
  OS0DM002.SY1STNBR = OS0DW01.SY1STNBR;
  OS0DM002.SY2CLRID = OS0DW01.SY2CLRID;

  if (OS0DM002.SY1STNBR != " ") /* style entered*/
    set SYCREC empty;
    if (OS0DM002.SY2CLRID != " ") /* color entered*/

      SYCREC.XGPCD = OS0DW01.XGPCD;
      SYCREC.SY1STNBR = OS0DM002.SY1STNBR;
      SYCREC.SY2CLRID = OS0DM002.SY2CLRID;
      SYCREC.XDMCD = "00";

      OS0D214(); /* get style/color desc*/

      if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
        OS0DM002.SY1STYNM = SYCREC.SY1STYNM;
        OS0DM002.SY2CLRDS = SYCREC.SY2CLRDS;
      else
        OS0DM002.SY1STYNM = " ";
        OS0DM002.SY2CLRDS = " ";
      end

    else
      OS0D212(); /* open/fetch color01 cursor*/

      if (SQLCA.VAGen_SQLCODE == 0) /* color found*/
        SYCREC.XGPCD = SY2REC.XGPCD;
        SYCREC.SY1STNBR = SY2REC.SY1STNBR;
        SYCREC.SY2CLRID = SY2REC.SY2CLRID;
        SYCREC.XDMCD = SY2REC.XDMCD;

        OS0D213(); /* close color01 cursor*/

        OS0D214(); /* get style/pc/ga*/

        if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
          OS0DM002.SY1STYNM = SYCREC.SY1STYNM;
          OS0DM002.SY2CLRDS = " ";
        else
          OS0DM002.SY1STYNM = " ";
          OS0DM002.SY2CLRDS = " ";
        end

      else
        OS0DM002.SY1STYNM = " ";
        OS0DM002.SY2CLRDS = " ";
      end
    end
  else
    OS0DM002.SY1STYNM = " ";
    OS0DM002.SY2CLRDS = " ";
  end

   /* Bookings Season Fields*/

  OS0DM002.XBK-BK-SESN-CD = OS0DW01.XBK-BK-SESN-CD;
  if (OS0DM002.XBK-BK-SESN-CD != " ")
    if (OS0DM002.XBK-BK-SESN-CD in XBKTBL.XBK-BK-SESN-CD)
      OS0DM002.XBK-BK-SESN-DESC = XBKTBL.XBK-BK-SESN-DESC[sysVar.arrayIndex];
    else
      OS0DM002.XBK-BK-SESN-DESC = "UNKNOWN SEASON";
    end
  else
    OS0DM002.XBK-BK-SESN-DESC = " ";
  end

  if (OS0DW01.OP-BK-YR != 0)
    OS0DW01.OS0DW-OP-BK-CCYY = OS0DW01.OP-BK-YR;
    OS0DM002.OS0DM-OP-BK-YY = OS0DW01.OS0DW-OP-BK-YY;
  else
    OS0DM002.OS0DM-OP-BK-YY = " ";
  end

end // end OS0D211

// open/fetch style cursor
Function OS0D212()


     /* get color id and dimension code*/

  set SQLCA empty;
  set SYCREC empty;
  set SY2REC empty;

  SY2REC.XGPCD = OS0DW01.XGPCD;
  SY2REC.SY1STNBR = OS0DM002.SY1STNBR;

  call "IO0130" ("SS", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes}; /* select set*/

  if (SQLCA.VAGen_SQLCODE == 0)

    call "IO0130" ("SN", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes}; /* fetch first record*/

    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100)
       /* everything's okay - next sentence*/
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OS0D";
      TA1REC.TA1LOCAT[1] = "SN";
      TA1REC.TA1LOCAT[2] = "OS0D211";
      TA1REC.TA1LOCAT[3] = "IO0130 ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1LOCAT[4] = "OS0DM002";
      TA1REC.TA1DBASE = "DPROD .";
      TA1REC.TA1TBLVU = "VCOLOR01";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      XSPF4();
      OS0DM002.VAGen_EZEMSG = COMMAREA.CAMSG;
    end
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OS0D";
    TA1REC.TA1LOCAT[1] = "SS";
    TA1REC.TA1LOCAT[2] = "OS0D211";
    TA1REC.TA1LOCAT[3] = "IO0130 ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1LOCAT[4] = "OS0DM002";
    TA1REC.TA1DBASE = "DPROD .";
    TA1REC.TA1TBLVU = "VCOLOR01";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    XSPF4();
    OS0DM002.VAGen_EZEMSG = COMMAREA.CAMSG;
  end



end // end OS0D212

// close style cursor
Function OS0D213()


                 /* close style cursor*/

  call "IO0130" ("CS", SQLCA, SY2REC) {isNoRefresh = yes, isExternal = yes}; /* close style cursor*/

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OS0D";
    TA1REC.TA1LOCAT[1] = "CS";
    TA1REC.TA1LOCAT[2] = "OS0D213";
    TA1REC.TA1LOCAT[3] = "IO0130 ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1LOCAT[4] = "OS0DM002";
    TA1REC.TA1DBASE = "DPROD .";
    TA1REC.TA1TBLVU = "VCOLOR01";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    XSPF4();
    OS0DM002.VAGen_EZEMSG = COMMAREA.CAMSG;
  end



end // end OS0D213

// get style/color desc
Function OS0D214()


            /* get style and color descriptions*/

  set SQLCA empty;


  call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes}; /* select unique*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
     /* everything's okay - next sentence*/
  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OS0D";
    TA1REC.TA1LOCAT[1] = "S ";
    TA1REC.TA1LOCAT[2] = "OS0D213";
    TA1REC.TA1LOCAT[3] = "IO0560 ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1LOCAT[4] = "OS0DM002";
    TA1REC.TA1DBASE = "DPROD .";
    TA1REC.TA1TBLVU = "VCOLOR02";
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    XSPF4();
    OS0DM002.VAGen_EZEMSG = COMMAREA.CAMSG;
  end



end // end OS0D214

// Check maintenance pfkeys
Function OS0D220()
   /* ------------------------------------------------------------*/
   /* Check attention identifier for maintenance screen*/
   /* ------------------------------------------------------------*/

  if (converseVar.eventKey is enter /* process*/
   || converseVar.eventKey is pa2   /* cancel*/
   || converseVar.eventKey is pf3   /* inquiry map*/
   || converseVar.eventKey is pf12  /* edit*/
   || converseVar.eventKey is pf19) /* refresh*/
     /* continue - everything's okay*/
  else
    converseLib.validationFailed(008); /* invalid pf key*/
    OS0DM002.XXXPRCNM = "OS0D220";
    OS0DW01.OS0DWERR = "Y";
    return; /* go display error*/
  end

  if (converseVar.eventKey is pa2 /* cancel*/
   || converseVar.eventKey is pf3) /* inquiry screen*/
    set OS0DM002 initial; /* Clear map2 fields*/
    exit stack; /* Exit to redisplay map1*/
  end

  if (converseVar.eventKey is pf12 /* edit only*/
   || converseVar.eventKey is pf19 /* refresh screen*/
   || converseVar.eventKey is enter) /* update database*/
    return;
  end




end // end OS0D220

// Reset highlighted fields
Function OS0D230()
   /* ------------------------------------------------------------*/
   /* Reset field attributes to normal intensity.*/
   /* ------------------------------------------------------------*/


  set OS0DM002.XOTCD protect;
  set OS0DM002.OPJCNDTB initialAttributes;
  set OS0DM002.OPJCNDTX initialAttributes;
  set OS0DM002.OPJCUTDT initialAttributes;
  set OS0DM002.XPCCD initialAttributes;
  set OS0DM002.XGACD initialAttributes;
  set OS0DM002.SY1STNBR initialAttributes;
  set OS0DM002.SY2CLRID initialAttributes;
  set OS0DM002.XBK-BK-SESN-CD initialAttributes;
  set OS0DM002.OS0DM-OP-BK-YY initialAttributes;


end // end OS0D230

// edit changed data
Function OS0D240()



   /* *************************************************************/
   /* *     edit changed data                                    **/
   /* *************************************************************/


              /* EDIT DATES*/

  if (converseVar.eventKey is pf19) /* refresh screen*/

     /* next sentence - do not edit data*/

  else
    if (OS0DW01.OS0DWERR == "N") /* no errors*/

         /* save dates are the original need dates from map1.*/
         /* they are used in the overlapp date compare - 264 .*/

      if (OS0DW01.OS0DWSEL == "C")
        OS0DW01.OS0DWSDB = OS0DW01.OS0DWBEG; /* format is cccyymmdd*/
        OS0DW01.OS0DWSDX = OS0DW01.OS0DWEND;
        OS0DW01.OS0DWSDC = OS0DW01.OS0DWCUT;
      else
        OS0DW01.OS0DWSDB = 0; /* format is cccyymmdd*/
        OS0DW01.OS0DWSDX = 0;
        OS0DW01.OS0DWSDC = 0;
      end

      if (OS0DW01.OS0DWSEL == "A" /* add row*/
       || OS0DW01.OS0DWSEL == "C") /* change row*/

        OS0D241(); /* validate begin need date*/

        OS0D242(); /* validate end need date*/

        OS0D243(); /* validate cutoff date*/
      end

      OS0D244(); /* combination date edits*/

      if (OS0DW01.OS0DWSEL == "A" /* add row*/
       || OS0DW01.OS0DWSEL == "C") /* change row*/
        OS0D250(); /* pc,ga,sty,clr edit*/
        if (OS0DW01.OS0DWERR == "N") /* No errors so far*/
          OS0D255(); /* edit bookings season fields*/
        end
      end

    else
      return; /* go redisplay map w/errors*/
    end
  end

end // end OS0D240

// validate begin date
Function OS0D241()


   /* *************************************************************/
   /* *     validate beginning need date                         **/
   /* *************************************************************/


  if (OS0DW01.OS0DWERR == "N") /* no errors*/
    if (OS0DM002.OPJCNDTB != OS0DW01.OS0DWBGN) /* format is yymmdd*/
      set TA2REC empty;
      TA2REC.TA2DTOPT = "GREGGREG";
      TA2REC.TA2GRGEN = OS0DM002.OPJCNDTB;
      TA2REC.TA2GRTYP = "E"; /* format is yymmdd*/

      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date module*/

      if (TA2REC.TA2RTNCD == 0) /* date is valid*/
         /* new begin date - used for compare '242'*/
        OS0DW01.OS0DWNDB = TA2REC.TA2GRGGN; /* format is cccyymmdd*/
      else
        converseLib.validationFailed(247); /* begin need date not valid*/
        set OS0DM002.OPJCNDTB cursor, modified, bold;
        OS0DM002.XXXPRCNM = "OS0D241";
        OS0DW01.OS0DWERR = "Y";
        return;
      end
    else
       /* original need date-use in compare if need date not changed*/
      OS0DW01.OS0DWNDB = OS0DW01.OS0DWBEG; /* format is cccyymmdd*/
    end
  else
    return; /* go display error*/
  end




end // end OS0D241

// validate end need date
Function OS0D242()


   /* *************************************************************/
   /* *     validate ending date                                 **/
   /* *************************************************************/


  if (OS0DW01.OS0DWERR == "N") /* no errors*/
    if (OS0DM002.OPJCNDTX != OS0DW01.OS0DWENN) /* format is yymmdd*/
      set TA2REC empty;
      TA2REC.TA2DTOPT = "GREGGREG";
      TA2REC.TA2GRGEN = OS0DM002.OPJCNDTX;
      TA2REC.TA2GRTYP = "E"; /* format is yymmdd*/

      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date module*/

      if (TA2REC.TA2RTNCD == 0) /* date is valid*/
         /* new end date - use for compare '242'*/
        OS0DW01.OS0DWNDX = TA2REC.TA2GRGGN; /* format is cccyymmdd*/
      else
        converseLib.validationFailed(246); /* end need date not valid*/
        set OS0DM002.OPJCNDTX cursor, modified, bold;
        OS0DM002.XXXPRCNM = "OS0D242";
        OS0DW01.OS0DWERR = "Y";
        return;
      end
    else
       /* original end date - use in compare if end date not changed*/
      OS0DW01.OS0DWNDX = OS0DW01.OS0DWEND; /* format is cccyymmdd*/
    end
  else
    return; /* go display error*/
  end




end // end OS0D242

// validate cutoff date
Function OS0D243()


   /* *************************************************************/
   /* *     validate cutoff date                                 **/
   /* *************************************************************/



  if (OS0DW01.OS0DWERR == "N") /* no errors*/
    if (OS0DM002.OPJCUTDT != OS0DW01.OS0DWCTN) /* format yymmdd*/
      set TA2REC empty;
      TA2REC.TA2DTOPT = "GREGGREG";
      TA2REC.TA2GRGEN = OS0DM002.OPJCUTDT;
      TA2REC.TA2GRTYP = "E"; /* format is yymmdd*/

      call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* call date module*/

      if (TA2REC.TA2RTNCD == 0) /* date is valid*/
         /* new cutoff date*/
        OS0DW01.OS0DWNDC = TA2REC.TA2GRGGN; /* format is cccyymmdd*/
      else
        converseLib.validationFailed(417); /* cutoff date is invalid*/
        set OS0DM002.OPJCUTDT cursor, modified, bold;
        OS0DM002.XXXPRCNM = "OS0D243";
        OS0DW01.OS0DWERR = "Y";
        return;
      end
    else
       /* original cutoff date*/
      OS0DW01.OS0DWNDC = OS0DW01.OS0DWCUT; /* format is cccyymmdd*/
    end
  else
    return; /* go display error*/
  end




end // end OS0D243

// combination date edits
Function OS0D244()



   /* *************************************************************/
   /* *          combination date edits                          **/
   /* *************************************************************/

     /* end date is less than begin date*/
     /* *********************************/
  if (OS0DW01.OS0DWERR == "N") /* no errors*/
    if (OS0DW01.OS0DWSEL == "A" /* add row*/
     || OS0DW01.OS0DWSEL == "C") /* change row*/
      if (OS0DW01.OS0DWNDX < OS0DW01.OS0DWNDB) /* format is cccyymmdd*/
        converseLib.validationFailed(255); /* begin must be before end*/
        set OS0DM002.OPJCNDTX cursor, modified, bold;
        OS0DM002.XXXPRCNM = "OS0D244";
        OS0DW01.OS0DWERR = "Y";
        return;
      else
         /* everything's okay - next sentence*/
      end

         /* cutoff date is greater than begin date*/
         /* ***************************************/
      if (OS0DW01.OS0DWNDC > OS0DW01.OS0DWNDB) /* format is cccyymmdd*/
        converseLib.validationFailed(412); /* cutoff must be lt begin*/
        set OS0DM002.OPJCUTDT cursor, modified, bold;
        OS0DM002.XXXPRCNM = "OS0D244";
        OS0DW01.OS0DWERR = "Y";
        return;
      else
         /* everything's okay - next sentence*/
      end

         /* current date is greater than cutoff date*/
         /* *****************************************/
      if (OS0DW01.OS0DWDTE > OS0DW01.OS0DWNDC) /* format is cccyymmdd*/
        converseLib.validationFailed(420); /* cutoff can not be greater than cur*/
        set OS0DM002.OPJCUTDT cursor, modified, bold;
        OS0DM002.XXXPRCNM = "OS0D244";
        OS0DW01.OS0DWERR = "Y";
        return;
      else
         /* no problem - next sentence*/
      end
    end
            /* validate against old cutoff date*/
            /* *********************************/
    if (OS0DW01.OS0DWSEL == "A") /* add*/
      OS0D245(); /* get old cutoff date*/

      if (OS0DW01.OS0DWERR == "N") /* no errors*/
         /* no problem - next sentence*/
      else
        return; /* go display error*/
      end
    end

    if (OS0DW01.OS0DWSEL == "C" /* change*/
     || OS0DW01.OS0DWSEL == "D") /* delete*/
      if (OS0DW01.OS0DWDTE > OS0DW01.OS0DWCUT) /* current > old cutoff*/

         /* move original values back to map and protect*/

        OS0DM002.OPJCNDTB = OS0DW01.OS0DWBGN;
        OS0DM002.OPJCNDTX = OS0DW01.OS0DWENN;
        OS0DM002.OPJCUTDT = OS0DW01.OS0DWCTN;
        OS0DM002.XPCCD = OS0DW01.XPCCD;
        OS0DM002.XGACD = OS0DW01.XGACD;
        OS0DM002.SY1STNBR = OS0DW01.SY1STNBR;
        OS0DM002.SY2CLRID = OS0DW01.SY2CLRID;
        OS0DM002.XBK-BK-SESN-CD = OS0DW01.XBK-BK-SESN-CD;
        if (OS0DW01.OP-BK-YR != 0)
          OS0DW01.OS0DW-OP-BK-CCYY = OS0DW01.OP-BK-YR;
          OS0DM002.OS0DM-OP-BK-YY = OS0DW01.OS0DW-OP-BK-YY;
        else
          OS0DM002.OS0DM-OP-BK-YY = " ";
        end
        set OS0DM002.OPJCNDTB protect;
        set OS0DM002.OPJCNDTX protect;
        set OS0DM002.OPJCUTDT cursor, protect, modified, bold;
        set OS0DM002.XPCCD protect;
        set OS0DM002.XGACD protect;
        set OS0DM002.SY1STNBR protect;
        set OS0DM002.SY2CLRID protect;
        set OS0DM002.XBK-BK-SESN-CD protect;
        set OS0DM002.OS0DM-OP-BK-YY protect;
        converseLib.validationFailed(422); /* original cutoff date is less than cur date*/
        OS0DM002.XXXPRCNM = "OS0D244";
        OS0DW01.OS0DWERR = "Y";
        return; /* go display error*/
      else
         /* no problem - next sentence*/
      end
    end
  else
    return;
  end



end // end OS0D244

// get old cutoff date
Function OS0D245()



       /* ******************************************************/
       /* **/
       /* *       on an add, get old cutoff date*/
       /* **/
       /* ******************************************************/


  set TA1REC empty;
  set OPJREC empty;
  set OPLREC empty;
  set SQLCA empty;

  OPJREC.XOTCD = OS0DM002.XOTCD; /* order type code*/
  OPJREC.XPCCD = OS0DM002.XPCCD; /* product cat*/
  OPJREC.XGACD = OS0DM002.XGACD; /* gender age*/
  OPJREC.SY1STNBR = OS0DM002.SY1STNBR; /* product style*/
  OPJREC.SY2CLRID = OS0DM002.SY2CLRID; /* product color*/
  OPLREC.OPJCNDTB = OS0DW01.OS0DWNDB; /* begin need date*/
  OPLREC.OPLSOP = "SF"; /* select first*/

  call "IO2560" (OPLREC, SQLCA, OPJREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0) /* record found*/
    if (OS0DW01.OS0DWDTE > OPJREC.OPJCUTDT) /* current > original cutoff*/
      converseLib.validationFailed(422); /* orig. cutoff > current date*/
      set OS0DM002.OPJCUTDT cursor, modified, bold;
      OS0DM002.XXXPRCNM = "OS0D244";
      OS0DW01.OS0DWERR = "Y";
      return;
    else
       /* no problem - next sentence*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* record not found*/
      OS0D246(); /* validate new o.t. season*/
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OS0D";
      TA1REC.TA1LOCAT[1] = "SF";
      TA1REC.TA1LOCAT[2] = "OS0D245";
      TA1REC.TA1LOCAT[3] = "IO2560 ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1LOCAT[4] = "OS0DM002";
      TA1REC.TA1DBASE = "DORDER.";
      TA1REC.TA1TBLVU = "VCUTOF01";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      XSPF4();
      OS0DM002.VAGen_EZEMSG = COMMAREA.CAMSG;
    end
  end




end // end OS0D245

// validate new o.t. season
Function OS0D246()



       /* ******************************************************/
       /* **/
       /* *       is this a new order type season*/
       /* **/
       /* ******************************************************/


  if (OS0DM002.XPCCD == " "    /* no*/
   && OS0DM002.XGACD == " "    /* exceptions*/
   && OS0DM002.SY1STNBR == " " /* entered*/
   && OS0DM002.SY2CLRID == " ")

        /* *  this is a new order type season    **/
    return; /* everything's okay - continue*/

  else
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1PGMNM = "OS0D";
    TA1REC.TA1LOCAT[1] = "SF";
    TA1REC.TA1LOCAT[2] = "OS0D255";
    TA1REC.TA1LOCAT[3] = "IO2560 ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "OS0DM002";
    TA1REC.TA1DBASE = "DORDER.";
    TA1REC.TA1TBLVU = "VCUTOF01";
    OS0DW01.OS0DWDXT = " ";
    OS0DW01.OS0DWDND = 0;
    OS0DW01.OS0DWDXT = OPJREC.XOTCD; /* display ord type key*/
    OS0DW01.OS0DWDND = OPLREC.OPJCNDTB; /* display need date key*/
    TA1REC.TA1TBLKE = OS0DW01.OS0DWDKY; /* error display key*/
    move SQLCA to ERRSQLCA withV60Compat;
    call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes};
    converseLib.validationFailed(423); /* o.t. default rec not found-can't add except*/
    OS0DW01.OS0DWERR = "Y"; /* error found*/
    set OS0DM002.XOTCD bold;
    set OS0DM002.OPJCNDTB cursor, bold;
    return;
  end




end // end OS0D246

// validate pc,ga,sty,clr
Function OS0D250()

        /* validate prod cat, gender age, style and color*/



             /* product category*/

  if (OS0DW01.OS0DWERR == "N")
    if (OS0DM002.XPCCD != " ") /* not blank*/
      OS0D251(); /* validate & get pc desc*/

      if (OS0DW01.OS0DWCAT == "N") /* prod cat not found*/
        converseLib.validationFailed(413); /* pc is invalid*/
        set OS0DM002.XPCCD cursor, modified, bold; /* highlite*/
        OS0DW01.OS0DWERR = "Y"; /* set error flag*/
        OS0DM002.XXXPRCNM = "OS0D247";
        return;
      end

    else
      OS0DM002.XPCDESC = " "; /* blank out old desc*/
    end

               /* gender age*/

    if (OS0DM002.XGACD != " ") /* not blank*/
      OS0D252(); /* validate & get ga desc*/

    else
      OS0DM002.XGADESC = " "; /* blank out old desc*/
    end

              /* validate style/color*/

    if (OS0DM002.SY1STNBR != " ") /* style not blank*/
      if (OS0DM002.SY2CLRID != " ") /* color not blank*/
        OS0D253(); /* validate style/color*/
      else
        OS0D254(); /* validate style*/
      end
    else
      OS0DM002.SY1STYNM = " ";
      OS0DM002.SY2CLRID = " ";
      OS0DM002.SY2CLRDS = " ";
    end
  else
     /* next sentence - error found*/
  end


end // end OS0D250

// validate prod cat & get desc
Function OS0D251()


        /* validate product category and get description*/


     /* check for spaces in product category*/

  OS0DW01.OS0DWPCT = OS0DM002.XPCCD;
  if (OS0DW01.OS0DWPC1 == " ")
    OS0DW01.OS0DWPC1 = "0";
    OS0DM002.XPCCD = OS0DW01.OS0DWPCT;
  else
    if (OS0DW01.OS0DWPC2 == " ")
      OS0DW01.OS0DWPC2 = OS0DW01.OS0DWPC1;
      OS0DW01.OS0DWPC1 = "0";
      OS0DM002.XPCCD = OS0DW01.OS0DWPCT;
    end
  end


  OS0DW01.OS0DWTIX = 1; /* table index*/
  OS0DW01.OS0DWCAT = "N"; /* product cat not found flag*/

  while (XPCTBL.XPCCD[OS0DWTIX] != "99" /* not eof and*/
   && OS0DW01.OS0DWCAT == "N") /* prod cat not found*/

    if (OS0DW01.OS0DWPCT == XPCTBL.XPCCD[OS0DWTIX] /* if p.c. is equal*/
     && OS0DW01.XGPCD == XPCTBL.XGPCD[OS0DWTIX]    /* & gpc value is eq*/
     && XPCTBL.XXXSTAT[OS0DWTIX] == "A")           /* and it's active*/

      OS0DW01.OS0DWCAT = "Y"; /* product cat found*/
      OS0DM002.XPCDESC = XPCTBL.XPCDESC[OS0DWTIX];
    end
    OS0DW01.OS0DWTIX = OS0DW01.OS0DWTIX + 1;
  end


end // end OS0D251

// validate gndr age & get desc
Function OS0D252()



        /* validate gender age and get description*/



  if (OS0DM002.XGACD in XGATBL.XGACD) /* ga is valid*/
    OS0DM002.XGADESC = XGATBL.XGADESC[sysVar.arrayIndex];
  else
    converseLib.validationFailed(414); /* ga is invalid*/
    set OS0DM002.XGACD cursor, modified, bold; /* highlite*/
    OS0DW01.OS0DWERR = "Y"; /* set error flag*/
    OS0DM002.XXXPRCNM = "OS0D248";
    return;
  end


end // end OS0D252

// validate style/color
Function OS0D253()

        /* validate style and color*/


  set SYCREC empty;

  SYCREC.XGPCD = OS0DW01.XGPCD;
  SYCREC.SY1STNBR = OS0DM002.SY1STNBR;
  SYCREC.SY2CLRID = OS0DM002.SY2CLRID;
  SYCREC.XDMCD = "00";

  OS0D214(); /* get style/color descs*/

  if (SQLCA.VAGen_SQLCODE == 0)
    OS0DM002.SY1STYNM = SYCREC.SY1STYNM;
    OS0DM002.SY2CLRDS = SYCREC.SY2CLRDS;
    if (OS0DM002.XPCCD == SYCREC.XPCCD /* no problem*/
     || OS0DM002.XPCCD == " ")         /* no problem*/

      if (OS0DM002.XGACD == SYCREC.XGACD /* no problem*/
       || OS0DM002.XGACD == " ")         /* no problem*/
         /* next sentence*/
      else
        converseLib.validationFailed(415); /* gender age invalid for style*/
        set OS0DM002.XGACD cursor, modified, bold;
        OS0DW01.OS0DWERR = "Y"; /* set error flag*/
        OS0DM002.XXXPRCNM = "OS0D249";
        return;
      end

    else
      converseLib.validationFailed(416); /* prod cat invalid for style*/
      set OS0DM002.XPCCD cursor, modified, bold;
      OS0DW01.OS0DWERR = "Y"; /* set error flag*/
      OS0DM002.XXXPRCNM = "OS0D249";
      return;
    end

    if (OS0DM002.XPCCD == " ")
      OS0DM002.XPCCD = SYCREC.XPCCD;
      OS0D251(); /* validate/get desc*/
    end

    if (OS0DM002.XGACD == " ")
      OS0DM002.XGACD = SYCREC.XGACD;
      OS0D252(); /* validate/get desc*/
    end

  else
    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
      converseLib.validationFailed(131); /* style/color invalid*/
      set OS0DM002.SY1STNBR cursor, modified, bold;
      set OS0DM002.SY2CLRID modified, bold;
      OS0DM002.XXXPRCNM = "OS0D249";
      OS0DW01.OS0DWERR = "Y";
      return;
    else
      TA1REC.TA1TYPE = "DB2";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OS0D";
      TA1REC.TA1LOCAT[1] = "S ";
      TA1REC.TA1LOCAT[2] = "OS0D249";
      TA1REC.TA1LOCAT[3] = "IO0560 ";
      TA1REC.TA1LOCAT[4] = " ";
      TA1REC.TA1LOCAT[4] = "OS0DM002";
      TA1REC.TA1DBASE = "DPROD .";
      TA1REC.TA1TBLVU = "VCOLOR02";
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
      XSPF4();
      OS0DM002.VAGen_EZEMSG = COMMAREA.CAMSG;
    end
  end



end // end OS0D253

// get style description
Function OS0D254()

                 /* get style description*/


  OS0D212(); /* open/fetch style cursor*/

  if (SQLCA.VAGen_SQLCODE == 0)
    SYCREC.XGPCD = SY2REC.XGPCD;
    SYCREC.SY1STNBR = SY2REC.SY1STNBR;
    SYCREC.SY2CLRID = SY2REC.SY2CLRID;
    SYCREC.XDMCD = "00";
  else
    OS0DW01.OS0DWERR = "Y"; /* error found*/
    converseLib.validationFailed(134); /* style invalid for gpc*/
    OS0DM002.XXXPRCNM = "OS0D261";
    set OS0DM002.SY1STNBR cursor, bold;
    return; /* go display error*/
  end

  OS0D213(); /* close style cursor*/

  OS0D214(); /* get stynm/pc/ga*/

  if (SQLCA.VAGen_SQLCODE == 0)
    OS0DM002.SY1STYNM = SYCREC.SY1STYNM;
    OS0DM002.SY2CLRDS = " ";

    if (OS0DM002.XPCCD == SYCREC.XPCCD /* no problem*/
     || OS0DM002.XPCCD == " ")         /* no problem*/

      if (OS0DM002.XGACD == SYCREC.XGACD /* no problem*/
       || OS0DM002.XGACD == " ")         /* no problem*/
         /* next sentence*/
      else
        converseLib.validationFailed(415); /* gender age invalid for style*/
        set OS0DM002.XGACD cursor, modified, bold;
        OS0DW01.OS0DWERR = "Y"; /* set error flag*/
        OS0DM002.XXXPRCNM = "OS0D249";
        return;
      end

    else
      converseLib.validationFailed(416); /* prod cat invalid for style*/
      set OS0DM002.XPCCD cursor, modified, bold;
      OS0DW01.OS0DWERR = "Y"; /* set error flag*/
      OS0DM002.XXXPRCNM = "OS0D249";
      return;
    end

    if (OS0DM002.XPCCD == " ")
      OS0DM002.XPCCD = SYCREC.XPCCD;
      OS0D251(); /* validate/get desc*/
    end

    if (OS0DM002.XGACD == " ")
      OS0DM002.XGACD = SYCREC.XGACD;
      OS0D252(); /* validate/get desc*/
    end

  else
    if (SQLCA.VAGen_SQLCODE == 100) /* not found*/
      converseLib.validationFailed(131); /* style/color invalid*/
      set OS0DM002.SY1STNBR cursor, modified, bold;
      set OS0DM002.SY2CLRID modified, bold;
      OS0DM002.XXXPRCNM = "OS0D261";
      OS0DW01.OS0DWERR = "Y";
      return;
    end
  end



end // end OS0D254

// Edit Booking Season Fields
Function OS0D255()

        /* Relational edits for bookings seasons fields*/

   /* Season code must be entered for apparel products. Entry is*/
   /* invalid for any other GPC, or if no style has been entered.*/
   /* Book year cannot be entered unless season code entered.*/

  if (OS0DM002.XBK-BK-SESN-CD != " ") /* bookings season entered*/
    if (OS0DM002.SY1STNBR != " ") /* style number entered*/
      if (SYCREC.XGPCD == "03") /* apparel product*/
        OS0D256(); /* OK so far - continue edit*/
      else
        converseLib.validationFailed(754); /* can't enter for non-apparel prods*/
        set OS0DM002.XBK-BK-SESN-CD cursor, modified, bold;
        set OS0DM002.OS0DM-OP-BK-YY modified, bold;
        OS0DW01.OS0DWERR = "Y"; /* set error flag*/
        return;
      end

    else /* style not entered*/
      converseLib.validationFailed(755); /* cannot enter without entering style*/
      set OS0DM002.XBK-BK-SESN-CD cursor, modified, bold;
      OS0DW01.OS0DWERR = "Y"; /* set error flag*/
      return;
    end
  else /* booking season not entered*/
    OS0DM002.XBK-BK-SESN-DESC = " "; /* Reinit description*/
    if (OS0DM002.SY1STNBR != " ") /* Apparel product was*/
      if (SYCREC.XGPCD == "03") /* entered*/
        converseLib.validationFailed(756); /* Must enter bk sesn on apparel prod*/
        set OS0DM002.XBK-BK-SESN-CD cursor, modified, bold;
        set OS0DM002.OS0DM-OP-BK-YY modified, bold;
        OS0DW01.OS0DWERR = "Y"; /* set error flag on*/
        return;
      else
         /* next sentence - OK*/
      end
    end
  end

  if (OS0DM002.XBK-BK-SESN-CD == " ") /* No season entered*/
    if (OS0DM002.OS0DM-OP-BK-YY != " ") /* book year entered*/
      converseLib.validationFailed(757); /* cannot enter year without sesn code*/
      set OS0DM002.OS0DM-OP-BK-YY cursor, modified, bold;
      OS0DW01.OS0DWERR = "Y"; /* turn on error flag*/
      return;
    else
     /* Initialize book year. This is the field that will be moved*/
     /* to the record (instead of reformatting the map field later).*/
      OS0DW01.OP-BK-YR = 0; /* Initialize book yr*/
    end
  end

end // end OS0D255

// Validate Booking Season Values
Function OS0D256()

        /* Validate bookings season field values*/

   /* Season code must be active entry in XBK Table.*/
   /* Book year must be numeric and within one year (plus or minus) of*/
   /* start need date.*/
   /* Season code/year combination must be an active entry in XSN table.*/


   /* Validate season code in XBK*/

  if (OS0DM002.XBK-BK-SESN-CD in XBKTBL.XBK-BK-SESN-CD)
    OS0DM002.XBK-BK-SESN-DESC = XBKTBL.XBK-BK-SESN-DESC[sysVar.arrayIndex]; /* move description to map*/
    if (XBKTBL.XXXSTAT[sysVar.arrayIndex] == "A" /* active entry*/
    )                                            /* next sentence - OK*/
    else
      converseLib.validationFailed(758); /* inactive season code*/
      set OS0DM002.XBK-BK-SESN-CD cursor, modified, bold;
      OS0DW01.OS0DWERR = "Y"; /* set error flag*/
      return;
    end
  else /* Not found on table*/
    converseLib.validationFailed(759); /* Season code not found on table*/
    set OS0DM002.XBK-BK-SESN-CD cursor, modified, bold;
    OS0DW01.OS0DWERR = "Y"; /* set error flag*/
    return;
  end

   /* Everything OK so far - check book year*/

  if (OS0DM002.OS0DM-OP-BK-YY != " ") /* Book year entered*/
    if (OS0DM002.OS0DM-OP-BK-YY >= "00"
     && OS0DM002.OS0DM-OP-BK-YY <= "99") /* Year between 00 and 99*/
      OS0DW01.OS0DW-OP-BK-YY = OS0DM002.OS0DM-OP-BK-YY;
      if (OS0DW01.OS0DW-OP-BK-YY > 51)
        OS0DW01.OS0DW-OP-BK-CC = 19;
      else
        OS0DW01.OS0DW-OP-BK-CC = 20;
      end
      OS0DW01.OS0DW-COMPARE-CCYY = OS0DW01.OS0DW-START-CCCYY + 1;
      if (OS0DW01.OS0DW-OP-BK-CCYY > OS0DW01.OS0DW-COMPARE-CCYY)
        set OS0DM002.OS0DM-OP-BK-YY cursor, modified, bold;
        converseLib.validationFailed(760); /* Not within year of start need date*/
        OS0DW01.OS0DWERR = "Y"; /* Turn on error flag*/
        return;
      end
      OS0DW01.OS0DW-COMPARE-CCYY = OS0DW01.OS0DW-START-CCCYY - 1;
      if (OS0DW01.OS0DW-OP-BK-CCYY < OS0DW01.OS0DW-COMPARE-CCYY)
        set OS0DM002.OS0DM-OP-BK-YY cursor, modified, bold;
        converseLib.validationFailed(760); /* Not within year of start need date*/
        OS0DW01.OS0DWERR = "Y"; /* Turn on error flag*/
        return;
      end
    else
      set OS0DM002.OS0DM-OP-BK-YY cursor, modified, bold;
      converseLib.validationFailed(761); /* Non-numeric year entered*/
      OS0DW01.OS0DWERR = "Y"; /* Turn on error flag*/
      return;
    end
  else
    set OS0DM002.OS0DM-OP-BK-YY cursor, modified, bold;
    converseLib.validationFailed(762); /* Must enter year for entered season*/
    OS0DW01.OS0DWERR = "Y"; /* Turn on error flag*/
    return;
  end

   /* OK so far - good season code and year entered.*/
   /* Check for season/year combination on XSN table.*/

  OS0DW01.OS0DWTIX = 1;
  OS0DW01.OS0DW-XSN-FND-FL = "N";
  OS0DW01.OP-BK-YR = OS0DW01.OS0DW-OP-BK-CCYY; /* Move to binary field*/

       /* Search XSN Table*/

  while (XSNTBL.XSECD[OS0DWTIX] != "99" /* not end of tbl*/
   && OS0DW01.OS0DW-XSN-FND-FL == "N") /* and sesn code/yr not found*/

    if (OS0DM002.XBK-BK-SESN-CD == XSNTBL.XSECD[OS0DWTIX]
     && OS0DW01.OP-BK-YR == XSNTBL.XSNYR[OS0DWTIX]
     && XSNTBL.XXXSTAT[OS0DWTIX] == "A")
      OS0DW01.OS0DW-XSN-FND-FL = "Y"; /* Valid, active combination*/
    end
    OS0DW01.OS0DWTIX = OS0DW01.OS0DWTIX + 1;

  end

  if (OS0DW01.OS0DW-XSN-FND-FL == "N") /* sesn code/yr combo not found*/
    set OS0DM002.XBK-BK-SESN-CD cursor, modified, bold;
    set OS0DM002.OS0DM-OP-BK-YY modified, bold;
    converseLib.validationFailed(763); /* Invalid sesn code/yr*/
    OS0DW01.OS0DWERR = "Y"; /* Turn on error flag*/
  else
    OS0DW01.OP-BK-YR = OS0DW01.OS0DW-OP-BK-CCYY; /* Move validated*/
                                        /* work field to rec work field*/
  end

end // end OS0D256

// process selection data
Function OS0D260()


   /* ------------------------------------------------------------*/

         /* process changed data.  update databases.*/

   /* ------------------------------------------------------------*/


  if (converseVar.eventKey is enter /* Enter was pressed*/
   && OS0DW01.OS0DWERR == "N")      /* and no errors found*/

    if (OS0DW01.OS0DWSEL == "A") /* add cutoff record*/
      OS0D261(); /* process add record*/
      if (OS0DW01.OS0DWNDF == "Y")
   /* ------  BL 2158 ---------------------- udafon*/
        if (OS0DM002.XPCCD == " " && 
        OS0DM002.XGACD == " " && 
        OS0DM002.SY1STNBR == " " && 
        OS0DM002.SY2CLRID == " ")
          OS0D275(); /* process add record to vocrot01*/
   /* ------  END BL 2158 ------------------ udafon*/
        else
           /* next sentence*/
        end
      end

    else
      if (OS0DW01.OS0DWSEL == "C") /* change cutoff record*/
        OS0D265(); /* process change record*/

      else
        if (OS0DW01.OS0DWSEL == "D") /* delete cutoff record*/
          OS0D266(); /* process delete record*/
          OS0D277(); /* process delete record for vocrot01*/

        end
      end
    end
  end



end // end OS0D260

// process add record
Function OS0D261()



   /* ------------------------------------------------------------*/

                   /* process add record*/

   /* ------------------------------------------------------------*/


  if (OS0DW01.OS0DWSEL == "A") /* add record*/
    OS0D262(); /* validate unique date range b4 add*/
  end
  if (OS0DW01.OS0DWNDF == "Y") /* date is unique*/
    set OPLREC empty;
    set TA1REC empty;
    OPLREC.OPLSOP = "A "; /* selection option*/
    TA1REC.TA1LOCAT[1] = "A ";

    OS0D270(); /* update database*/

      /* this is done so the previous add record will*/
      /* be displayed when screen is reconversed.*/

    /* ** TCS CHANGES BEGIN 01/18/99*/
    /* MOVE OS0DM002.OPJCNDTB TO OS0DW01.OS0DWBGN; /* move record to*/
    /* MOVE OS0DM002.OPJCNDTX TO OS0DW01.OS0DWENN; /* working storage*/
    /* MOVE OS0DM002.OPJCUTDT TO OS0DW01.OS0DWCTN; /* after adding*/
    OS0DW01.OS0DWBEG = OS0DW01.OS0DWNDB; /* move record to*/
    OS0DW01.OS0DWEND = OS0DW01.OS0DWNDX; /* working storage*/
    OS0DW01.OS0DWCUT = OS0DW01.OS0DWNDC; /* after addingto db*/
    /* ** TCS CHANGES END*/
    OS0DW01.XPCCD = OS0DM002.XPCCD;
    OS0DW01.XGACD = OS0DM002.XGACD; /* ** note ***/
    OS0DW01.SY1STNBR = OS0DM002.SY1STNBR; /* this is for an*/
    OS0DW01.SY2CLRID = OS0DM002.SY2CLRID; /* add only*/
    OS0DW01.XBK-BK-SESN-CD = OS0DM002.XBK-BK-SESN-CD;
    if (OS0DM002.OS0DM-OP-BK-YY != " ")
      OS0DW01.OS0DW-OP-BK-YY = OS0DM002.OS0DM-OP-BK-YY;
      if (OS0DW01.OS0DW-OP-BK-YY > 51)
        OS0DW01.OS0DW-OP-BK-CC = 19;
      else
        OS0DW01.OS0DW-OP-BK-CC = 20;
      end
      OS0DW01.OP-BK-YR = OS0DW01.OS0DW-OP-BK-CCYY;
    else
      OS0DW01.OP-BK-YR = 0;
    end

  else
    return;
                                   /* date is not unique - go display error*/
  end



end // end OS0D261

// validate unique date range
Function OS0D262()


   /* ------------------------------------------------------------*/

       /* validate unique date range for new cutoff record*/

   /* ------------------------------------------------------------*/


  set OPJREC empty;
  set OPLREC empty;

  OPLREC.OPLSOP = "SS"; /* selection option*/

     /* for comparison purposes, the end date is intentionally*/
     /* being moved to the oplrec begin date and begin date is*/
     /* intentionally being moved to oplrec end date.*/

  OPLREC.OPJCNDTB = OS0DW01.OS0DWNDX;
  OPLREC.OPJCNDTX = OS0DW01.OS0DWNDB;

  OS0D263(); /* select cutoff records*/

  if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
    OS0DW01.OS0DWNDF = "Y"; /* date range is unique*/
    OS0DW01.OS0DWFFF = "Y"; /* first fetch flag*/
    while (SQLCA.VAGen_SQLCODE == 0 /* there is a record*/
     && OS0DW01.OS0DWNDF == "Y") /* and date range is unique*/

      OS0D264(); /* validate next record*/

    end
  else
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "OS0D252"; /* Process name*/
    TA1REC.TA1LOC = "SS     "; /* select set*/
    TA1REC.TA1MAP = "OS0DM002"; /* Map name*/
    TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCUTOF01"; /* Table view name*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    XSPF4();
  end

     /* close selected set*/

  OPLREC.OPLSOP = "CS"; /* selection option*/

  call "IO2560" (OPLREC, SQLCA, OPJREC) {isNoRefresh = yes, isExternal = yes}; /* close set*/

  if (SQLCA.VAGen_SQLCODE != 0) /* Unexpected return code*/
    TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    TA1REC.TA1PGMNM = "OS0D251"; /* Process name*/
    TA1REC.TA1LOC = "CLOSE SELECTED SET OF TABLE ROWS";
    TA1REC.TA1MAP = "OS0DM002"; /* Map name*/
    TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
    TA1REC.TA1TBLVU = "VCUTOF01"; /* Table view name*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
    XSPF4();
  end


end // end OS0D262

// select cutoff records
Function OS0D263()

   /* ------------------------------------------------------------*/

             /* select cutoff records*/

   /* ------------------------------------------------------------*/


  set TA1REC empty;
  set SQLCA empty;

  OPJREC.XOTCD = OS0DM002.XOTCD; /* order type code*/
  OPJREC.XPCCD = OS0DM002.XPCCD; /* product cat*/
  OPJREC.XGACD = OS0DM002.XGACD; /* gender age*/
  OPJREC.SY1STNBR = OS0DM002.SY1STNBR; /* product style*/
  OPJREC.SY2CLRID = OS0DM002.SY2CLRID; /* product color*/

  call "IO2560" (OPLREC, SQLCA, OPJREC) {isNoRefresh = yes, isExternal = yes}; /* select set*/



end // end OS0D263

// validate next record
Function OS0D264()


   /* ------------------------------------------------------------*/

       /* fetch next record and validate unique date range*/

   /* ------------------------------------------------------------*/


  OPLREC.OPLSOP = "SN"; /* fetch next record*/

  call "IO2560" (OPLREC, SQLCA, OPJREC) {isNoRefresh = yes, isExternal = yes}; /* select next*/

  if (SQLCA.VAGen_SQLCODE == 0) /* at least 1 record exist*/

      /* is the record being edited the same record from map1 ??*/

    if (OS0DW01.OS0DWSDB == OPJREC.OPJCNDTB
     && OS0DW01.OS0DWSDX == OPJREC.OPJCNDTX
     && OS0DW01.XPCCD == OPJREC.XPCCD
     && OS0DW01.XGACD == OPJREC.XGACD
     && OS0DW01.SY1STNBR == OPJREC.SY1STNBR
     && OS0DW01.SY2CLRID == OPJREC.SY2CLRID)
      OS0DW01.OS0DWFFF = "N"; /* at least 1 record fetch*/
       /* next sentence - same record that's being edited*/
    else
      OS0DW01.OS0DWNDF = "N"; /* date range is not unique*/
      converseLib.validationFailed(421); /* overlapping date range*/
      OS0DM002.XXXPRCNM = "OS0D251";
      OS0DW01.OS0DWERR = "Y";
      set OS0DM002.XOTCD bold;
      set OS0DM002.OPJCNDTB cursor, bold;
      set OS0DM002.OPJCNDTX bold;
      set OS0DM002.OPJCUTDT bold;
      set OS0DM002.XPCCD bold;
      set OS0DM002.XGACD bold;
      set OS0DM002.SY1STNBR bold;
      set OS0DM002.SY2CLRID bold;
      set OS0DM002.XBK-BK-SESN-CD bold;
      set OS0DM002.OS0DM-OP-BK-YY bold;
      return; /* go display error*/
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* not found - date is unique*/
      return; /* continue processing*/
    else
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1PGMNM = "OS0D251"; /* Process name*/
      TA1REC.TA1LOC = "SN     "; /* select next*/
      TA1REC.TA1MAP = "OS0DM002"; /* Map name*/
      TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCUTOF01"; /* Table view name*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      XSPF4();
    end
  end


end // end OS0D264

// process change record
Function OS0D265()



   /* ------------------------------------------------------------*/

               /* process changed record*/

   /* ------------------------------------------------------------*/


  OS0D262(); /* validate unique date range b4 add*/

  if (OS0DW01.OS0DWERR == "Y") /* error found*/
     /* next sentence*/
  else
    if (OS0DW01.OS0DWNDF == "Y" /* date is unique*/
     && OS0DW01.OS0DWFFF == "Y") /* record is not already on database*/
      OS0D261(); /* process add record*/
      OS0D275(); /* add vocrot01*/
    else

            /* move new need dates to hold fields*/
            /* before deleting old record*/

      OS0DW01.OS0DWHDB = OS0DW01.OS0DWNDB; /* begin*/
      OS0DW01.OS0DWHDX = OS0DW01.OS0DWNDX; /* end*/
      OS0DW01.OS0DWHDC = OS0DW01.OS0DWNDC; /* cutoff*/

            /* now delete old record*/

      OS0D266(); /* process delete record*/
      OS0D277(); /* delete vocrot01*/

            /* move new need dates back to w.s. fields*/

      OS0DW01.OS0DWNDB = OS0DW01.OS0DWHDB; /* begin*/
      OS0DW01.OS0DWNDX = OS0DW01.OS0DWHDX; /* end*/
      OS0DW01.OS0DWNDC = OS0DW01.OS0DWHDC; /* cutoff*/

            /* now add new record*/

      OS0D261(); /* process add record*/
      OS0D275(); /* add vocrot01*/

    end
  end



end // end OS0D265

// process delete record
Function OS0D266()



   /* ------------------------------------------------------------*/

                 /* process delete record*/

   /* ------------------------------------------------------------*/


  set OPJREC empty;
  set OPLREC empty;

  OS0DW01.OS0DWNDB = OS0DW01.OS0DWBEG; /* converted original need*/
  OS0DW01.OS0DWNDX = OS0DW01.OS0DWEND; /* dates from os0dm001*/
  OS0DW01.OS0DWNDC = OS0DW01.OS0DWCUT; /* format is cccyymmdd*/
  OPJREC.OPJCNDTB = OS0DW01.OS0DWNDB;
  OPJREC.OPJCNDTX = OS0DW01.OS0DWNDX; /* format is cccyymmdd*/
  OPJREC.OPJCUTDT = OS0DW01.OS0DWNDC;

  OPLREC.OPLSOP = "S "; /* selection option*/

  OS0D263(); /* select cutoff records*/

  if (SQLCA.VAGen_SQLCODE == 0) /* record was found*/
    set OPLREC empty;
    set TA1REC empty;
    OPLREC.OPLSOP = "D "; /* delete option*/
    TA1REC.TA1LOCAT[1] = "D ";
    OS0D270(); /* update database*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* record not found*/
      OS0DW01.OS0DWERR = "Y";
      converseLib.validationFailed(419); /* record no longer exist*/
      OS0DM002.XXXPRCNM = "OS0D250";
      set OS0DM002.XOTCD bold;
      set OS0DM002.OPJCNDTB cursor, bold;
      set OS0DM002.OPJCNDTX bold;
      set OS0DM002.OPJCUTDT bold;
      set OS0DM002.XPCCD bold;
      set OS0DM002.XGACD bold;
      set OS0DM002.SY1STNBR bold;
      set OS0DM002.SY2CLRID bold;
      set OS0DM002.XBK-BK-SESN-CD bold;
      set OS0DM002.OS0DM-OP-BK-YY bold;
      return;
    else
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1PGMNM = "OS0D256"; /* Process name*/
      TA1REC.TA1MAP = "OS0DM002"; /* Map name*/
      TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
      TA1REC.TA1TBLVU = "VCUTOF01"; /* Table view name*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
      
      call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
      XSPF4();
    end
  end



end // end OS0D266

// update database
Function OS0D270()



       /* ******************************************************/
       /* **/
       /* * update the dorder.vcutof01 database*/
       /* **/
       /* ******************************************************/


  set TA1REC empty;
  set OPJREC empty;
  set SQLCA empty;

  OPJREC.XOTCD = OS0DM002.XOTCD; /* order type code*/
  OPJREC.XPCCD = OS0DM002.XPCCD; /* product cat*/
  OPJREC.XGACD = OS0DM002.XGACD; /* gender age*/
  OPJREC.SY1STNBR = OS0DM002.SY1STNBR; /* product style*/
  OPJREC.SY2CLRID = OS0DM002.SY2CLRID; /* product color*/
  OPJREC.XBK-BK-SESN-CD = OS0DM002.XBK-BK-SESN-CD; /* booking season*/
  OPJREC.OPJCNDTB = OS0DW01.OS0DWNDB; /* begin need date*/
  OPJREC.OPJCNDTX = OS0DW01.OS0DWNDX; /* end need date*/
  OPJREC.OPJCUTDT = OS0DW01.OS0DWNDC; /* cutoff date*/
  OPJREC.OP-BK-YR = OS0DW01.OP-BK-YR; /* booking season year*/
  OPJREC.ZZZSDT = OS0DW01.OS0DWDTE; /* setup date*/
  call "IO2560" (OPLREC, SQLCA, OPJREC) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE != 0) /* error*/
    TA1REC.TA1TYPE = "DB2";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = "OS0D";
    TA1REC.TA1LOCAT[2] = "OS0D254";
    TA1REC.TA1LOCAT[3] = "IO2560 ";
    TA1REC.TA1LOCAT[4] = " ";
    TA1REC.TA1MAP = "OS0DM002";
    TA1REC.TA1DBASE = "DORDER.";
    TA1REC.TA1TBLVU = "VCUTOF01";
    OS0DW01.OS0DWDXT = " ";
    OS0DW01.OS0DWDND = 0;
    OS0DW01.OS0DWDXT = OPJREC.XOTCD; /* display ord type key*/
    OS0DW01.OS0DWDND = OPLREC.OPJCNDTB; /* display need date key*/
    TA1REC.TA1TBLKE = OS0DW01.OS0DWDKY; /* error display key*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.rollback();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes};
    XSPF4();
  else /* good update*/
    VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
    VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
    sysLib.commit();
    VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
    
    converseLib.validationFailed(418); /* database update sucessful*/
    return;
  end


   /* *************************************************************/
end // end OS0D270

// Update the changed table row
Function OS0D275()
  OS0DW01.OS0DW-CTR = 02; /* add for gpc '02' & '03'*/

  while (OS0DW01.OS0DW-CTR < 04)

    set VOCROT01 empty;

    VOCROT01.XOTCD = OPJREC.XOTCD; /* order type code*/
    VOCROT01.XGPCD = OS0DW01.OS0DW-CTR; /* gpc*/
    VOCROT01.SOCD-CUST-NEED-BDT = OPJREC.OPJCNDTB; /* begin need date*/
    VOCROT01.SOCD-CUST-NEED-XDT = OPJREC.OPJCNDTX; /* end need date*/
    VOCROT01.ZZZSDT = OPJREC.ZZZSDT; /* setup date*/
    VOCROT01.ZZZCHGDT = OPJREC.ZZZSDT;
    VOCROT01.XXX-STAT = "A";
    VOCROT01.ZZZCHGCT = 0;

    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "G";
    TA2REC.TA2DYAOD = 30;
    TA2REC.TA2GRGGN = OPJREC.OPJCUTDT;

    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes}; /* valid date pgm*/

    if (TA2REC.TA2RTNCD == 0)
      VOCROT01.OCD-REL-DT = TA2REC.TA2GRGGN;
    end

    OS0DW01.OS0DW-TIME-BRK = VGVar.currentFormattedTime;
    OS0DW01.OS0DW-TM-HH = OS0DW01.OS0DW-TB-HH;
    OS0DW01.OS0DW-TM-MM = OS0DW01.OS0DW-TB-MM;
    VOCROT01.ZZZCHGTM = OS0DW01.OS0DW-TIME-MK;
    VOCROT01.ZZZSDTM = OS0DW01.OS0DW-TIME-MK;

  /* ------------------------------------------------------------*/
  /* Update the new row in the table.*/
  /* ------------------------------------------------------------*/

    try
      call "VOCROT01" ("A ", SQLCA, VOCROT01) {isNoRefresh = yes, isExternal = yes};
    end /* add row*/

  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000") /* Call successful*/

      if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
       || SQLCA.VAGen_SQLCODE == -803) /* there is the same key into vocrot01*/
     /* CONTINUE                  /* Return to previous process*/
      else
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

        TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/

        TA1REC.TA1PGMNM = "OS0D";
        TA1REC.TA1LOCAT[2] = "OS0D275";
        TA1REC.TA1LOCAT[3] = "VOCROT01";
        TA1REC.TA1LOCAT[4] = " ";

        if (sysVar.errorCode == "00000000" /* Call successful*/
         && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

          converseLib.validationFailed(11); /* Data in use by another*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/

        else

          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback(); /* Roll back all changes*/

          converseLib.validationFailed(10); /* Unexpected error occurred*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/

          converseLib.clearScreen();
           /* Clear screen before display*/

        end

        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1LOC = "UPDATE TABLE ROW";
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
        TA1REC.TA1DBASE = "DORDCD  "; /* Data base name*/
        TA1REC.TA1TBLVU = "VOCROT01"; /* Table view name*/
        TA1REC.TA1TBLKE = VOCROT01.XOTCD; /* Table key*/

        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

        exit stack; /* Exit to display map*/

      end
    end
    OS0DW01.OS0DW-CTR = OS0DW01.OS0DW-CTR + 1;
  end

end // end OS0D275

// delete the vocrot01 row
Function OS0D277()
  OS0DW01.OS0DW-CTR = 02; /* process for gpc '02' & '03'*/

  while (OS0DW01.OS0DW-CTR < 04)

  /* ------------------------------------------------------------*/
  /* Format the data from the map in the table row.*/
  /* ------------------------------------------------------------*/
    set VOCROT01 empty;

    VOCROT01.XOTCD = OPJREC.XOTCD; /* order type code*/
    VOCROT01.XGPCD = OS0DW01.OS0DW-CTR; /* gpc*/
    VOCROT01.SOCD-CUST-NEED-BDT = OPJREC.OPJCNDTB; /* begin need date*/

  /* ------------------------------------------------------------*/
  /* Update the new row in the table.*/
  /* ------------------------------------------------------------*/

    try
      call "VOCROT01" ("D ", SQLCA, VOCROT01) {isNoRefresh = yes, isExternal = yes};
    end /* add row*/

  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/

    if (sysVar.errorCode == "00000000") /* Call successful*/

      if (SQLCA.VAGen_SQLCODE == 0 /* Normal return code*/
       || SQLCA.VAGen_SQLCODE == +100) /* not found*/
  /* continue                      /* Return to previous process*/
      else


  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/

        TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/

        TA1REC.TA1PGMNM = "OS0D";
        TA1REC.TA1LOCAT[2] = "OS0D277";
        TA1REC.TA1LOCAT[3] = "VOCROT01";
        TA1REC.TA1LOCAT[4] = " ";

        if (sysVar.errorCode == "00000000" /* Call successful*/
         && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/

          converseLib.validationFailed(11); /* Data in use by another*/
          TA1REC.TA1FUNC = "POST"; /* Termination function*/

        else

          VGVar.handleSysLibraryErrors = 0;
          sysLib.rollback(); /* Roll back all changes*/

          converseLib.validationFailed(10); /* Unexpected error occurred*/
          TA1REC.TA1FUNC = "RETN"; /* Termination function*/

          converseLib.clearScreen();
           /* Clear screen before display*/

        end

        TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
        TA1REC.TA1LOC = "DELETE TABLE ROW";
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
        TA1REC.TA1DBASE = "DORDCD  "; /* Data base name*/
        TA1REC.TA1TBLVU = "VOCROT01"; /* Table view name*/
        TA1REC.TA1TBLKE = VOCROT01.XOTCD; /* Table key*/

        call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/

        exit stack; /* Exit to display map*/

      end
    end

    OS0DW01.OS0DW-CTR = OS0DW01.OS0DW-CTR + 1;

  end

end // end OS0D277

//*** RECORD=OS0DW01 ****
// Working storage for os0d - o.e. deadline inquiry/Maintenance
// ;***********************************************************
// ;                    maintenance
// ;***********************************************************
// ;10-18-88 dwalke increased to 3 bytes - os0dwtix
// ;05-15-92 DLEGG  Added field for bookings season
// ;04-22-97 SATYAM Added two flags os0dwndsflg and os0dwndsopt
// ;                if no rows for order type indorder.vcutof01
// ;
// 08-11-00 sbhara modified OS0DWTIX from 3 digits to 4 digits
// ***********************
Record OS0DW01 type basicRecord
  10 OS0DWCAT OS0DWCAT ; 
  10 OS0DWIXM OS0DWIXM ; 
  10 OS0DW-CTR OS0DW-CTR ; 
  10 OS0DWEOF OS0DWEOF ; 
  10 OS0DWERR OS0DWERR ; 
  10 OS0DWFFF OS0DWFFF ; 
  10 OS0DWGAP OS0DWGAP ; 
  10 OS0DWREQ OS0DWREQ ; 
  10 OS0DWSFL OS0DWSFL ; 
  10 OS0DWFIR OS0DWFIR ; 
  10 OS0DWTSP OS0DWTSP ; 
  10 OS0DWTIX OS0DWTIX ; 
  10 OS0DWHDB OS0DWHDB ; 
  10 OS0DWHDX OS0DWHDX ; 
  10 OS0DWHDC OS0DWHDC ; 
  10 OS0DWSDB OS0DWSDB ; 
  10 OS0DWSDX OS0DWSDX ; 
  10 OS0DWSDC OS0DWSDC ; 
  10 OS0DWSND OS0DWSND ; 
  10 OS0DWDKY OS0DWDKY ; 
    15 OS0DWDXT OS0DWDXT ; 
    15 OS0DWDND OS0DWDND ; 
  10 OS0DWNDF OS0DWNDF ; 
  10 XGPCD XGPCD ; 
  10 XOTCD XOTCD ; 
  10 XOTDESC XOTDESC ; 
  10 OS0DWSEL OS0DWSEL ; 
  10 OS0DWBEG OS0DWBEG ; 
    15 OS0DWBGC OS0DWBGC ; 
    15 OS0DWBGN OS0DWBGN ; 
  10 OS0DWEND OS0DWEND ; 
    15 OS0DWENC OS0DWENC ; 
    15 OS0DWENN OS0DWENN ; 
  10 OS0DWCUT OS0DWCUT ; 
    15 OS0DWCTC OS0DWCTC ; 
    15 OS0DWCTN OS0DWCTN ; 
  10 XPCCD XPCCD ; 
  10 XGACD XGACD ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XBK-BK-SESN-CD XBK-BK-SESN-CD ; 
  10 OP-BK-YR OP-BK-YR ; 
  10 OS0DWPCT OS0DWPCT ; 
    15 OS0DWPC1 OS0DWPC1 ; 
    15 OS0DWPC2 OS0DWPC2 ; 
  10 OS0DWNDB OS0DWNDB ; 
    15 OS0DW-START-CCCYY OS0DW-START-CCCYY ; 
    15 OS0DW-START-MMDD OS0DW-START-MMDD ; 
  10 OS0DW-COMPARE-CCYY OS0DW-COMPARE-CCYY ; 
  10 OS0DWNDX OS0DWNDX ; 
  10 OS0DWNDC OS0DWNDC ; 
  10 OS0DWDTE OS0DWDTE ; 
    15 OS0DWCEN OS0DWCEN ; 
    15 OS0DWYMD OS0DWYMD ; 
      20 OS0DWYY OS0DWYY ; 
      20 OS0DWMM OS0DWMM ; 
      20 OS0DWDD1 OS0DWDD1 ; 
  10 OS0DW-OP-BK-CCYY OS0DW-OP-BK-CCYY ; 
    15 OS0DW-OP-BK-CC OS0DW-OP-BK-CC ; 
    15 OS0DW-OP-BK-YY OS0DW-OP-BK-YY ; 
  10 OS0DW-XSN-FND-FL OS0DW-XSN-FND-FL ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 OS0DWNDSFLG OS0DWNDSFLG ; 
  10 OS0DWNDSOPT OS0DWNDSOPT ; 
  10 OS0DW-TIME-BRK OS0DW-TIME-BRK ; 
    15 OS0DW-TB-HH OS0DW-TB-HH ; 
    15 * char(1) ; 
    15 OS0DW-TB-MM OS0DW-TB-MM ; 
    15 * char(1) ; 
    15 OS0DW-TB-SS OS0DW-TB-SS ; 
  10 OS0DW-TIME-MK OS0DW-TIME-MK ; 
    15 OS0DW-TM-HH OS0DW-TM-HH ; 
    15 OS0DW-TM-MM OS0DW-TM-MM ; 
end // end OS0DW01

//*** RECORD=OS0DW02 ****
// Temp storage rec for os0d - order entry deadline maintenance
// 
//    05/15/92  DLEGG    Add XBK-BK-SESN-CD, OP-BK-YR to line
// ***********************
Record OS0DW02 type basicRecord
  10 OS0DWLEN OS0DWLEN ; 
  10 OS0DWLIN OS0DWLIN [14] ; 
    15 OS0DMSEL OS0DMSEL ; 
    15 OPJCNDTB OPJCNDTB ; 
    15 OPJCNDTX OPJCNDTX ; 
    15 OPJCUTDT OPJCUTDT ; 
    15 XBK-BK-SESN-CD XBK-BK-SESN-CD ; 
    15 OP-BK-YR OP-BK-YR ; 
    15 XPCCD XPCCD ; 
    15 XGACD XGACD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 ZZZSDT ZZZSDT ; 
    15 OS0DWGAP OS0DWGAP ; 
end // end OS0DW02

// Line selection tag
DataItem OS0DMSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Calculated compare CCYY date
DataItem OS0DW-COMPARE-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for map fields
DataItem OS0DW-CTR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// OP Book Year CC
DataItem OS0DW-OP-BK-CC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// OP Book Year  CCYY work field
DataItem OS0DW-OP-BK-CCYY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// OP Book Year YY
DataItem OS0DW-OP-BK-YY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Start Need Date CCYYY
DataItem OS0DW-START-CCCYY num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Start Need Date MMDD
DataItem OS0DW-START-MMDD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OS0DW-TB-HH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OS0DW-TB-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OS0DW-TB-SS num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OS0DW-TIME-BRK char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OS0DW-TIME-MK num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OS0DW-TM-HH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OS0DW-TM-MM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// XSN entry found flag
DataItem OS0DW-XSN-FND-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// beginning need date
DataItem OS0DWBEG num(9)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// begin need date century
DataItem OS0DWBGC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// begin need date numeric
DataItem OS0DWBGN num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prod cat not found fl
DataItem OS0DWCAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Working century
DataItem OS0DWCEN num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// o.e. cutoff date century
DataItem OS0DWCTC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// o.e. cutoff date numeric
DataItem OS0DWCTN num(6)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// order entry cutoff date
DataItem OS0DWCUT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work current day
DataItem OS0DWDD1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error display key
DataItem OS0DWDKY char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error display need date
DataItem OS0DWDND num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Working date
DataItem OS0DWDTE num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// error display o.t.
DataItem OS0DWDXT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end need date century
DataItem OS0DWENC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// ending need date
DataItem OS0DWEND num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// end need date numeric
DataItem OS0DWENN num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Cursor end of file
DataItem OS0DWEOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error flag
DataItem OS0DWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first fetch flag
DataItem OS0DWFFF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time thru flag
DataItem OS0DWFIR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// gap in need date
DataItem OS0DWGAP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// hold begin date
DataItem OS0DWHDB num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold cutoff date
DataItem OS0DWHDC num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// hold end date
DataItem OS0DWHDX num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for map fields
DataItem OS0DWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Temporary storage length
DataItem OS0DWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Data Display Line
DataItem OS0DWLIN char(35)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work current month
DataItem OS0DWMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// compare need date begin
DataItem OS0DWNDB num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cutoff date
DataItem OS0DWNDC num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// unique date flag
DataItem OS0DWNDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection flg when no data
DataItem OS0DWNDSFLG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// selection flg when no data
DataItem OS0DWNDSOPT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// compare need date end
DataItem OS0DWNDX num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// product cat first position
DataItem OS0DWPC1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product cat second position
DataItem OS0DWPC2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// prod cat - check for spaces
DataItem OS0DWPCT char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// work request
DataItem OS0DWREQ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save begin datefor overlap
DataItem OS0DWSDB num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save cutoff date
DataItem OS0DWSDC num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// save end date     check
DataItem OS0DWSDX num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// selection option
DataItem OS0DWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Selection flag
DataItem OS0DWSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save need date(gap compare)
DataItem OS0DWSND num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prod cat table index
DataItem OS0DWTIX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current temporary storage page
DataItem OS0DWTSP num(3)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Working year month day
DataItem OS0DWYMD num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// work current year
DataItem OS0DWYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

