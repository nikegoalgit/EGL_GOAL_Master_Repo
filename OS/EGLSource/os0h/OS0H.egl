package os0h;
import corpcom2.XX0XW01;
import corpcom4.XSENTRY;
import corpcom4.XSOMS01;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import ku.common.KUCREC;
import ku.common.KUCUNTCS;
import ku.common.KUFMIXBL;
import om.common.OMWREC;
import op.common.OP1PARTN;
import op.common.OP1REC;
import op.common.OP2CGPCD;
import op.common.OP2LNINB;
import op.common.OP3ONOQT;
import os.common.OSNPKGNB;
import os.common.OSNREC;
import os.common.OSNTIQTY;
import os.common.OSPDELET;
import os.common.OSPGROUP;
import os.common.OSPMORE;
import os.common.OSPORQ01;
import os.common.OSPORQ02;
import os.common.OSPORQ03;
import os.common.OSPORQ04;
import os.common.OSPORQ05;
import os.common.OSPORQ06;
import os.common.OSPORQ07;
import os.common.OSPORQ08;
import os.common.OSPORQ09;
import os.common.OSPORQ10;
import os.common.OSPORQ11;
import os.common.OSPORQ12;
import os.common.OSPORQ13;
import os.common.OSPORQ14;
import os.common.OSPORQ15;
import os.common.OSPORQ16;
import os.common.OSPORQ17;
import os.common.OSPORQ18;
import os.common.OSPORQ19;
import os.common.OSPORQ20;
import os.common.OSPPER1;
import os.common.OSPPER2;
import os.common.OSPPPQ01;
import os.common.OSPPPQ02;
import os.common.OSPPPQ03;
import os.common.OSPPPQ04;
import os.common.OSPPPQ05;
import os.common.OSPPPQ06;
import os.common.OSPPPQ07;
import os.common.OSPPPQ08;
import os.common.OSPPPQ09;
import os.common.OSPPPQ10;
import os.common.OSPPPQ11;
import os.common.OSPPPQ12;
import os.common.OSPPPQ13;
import os.common.OSPPPQ14;
import os.common.OSPPPQ15;
import os.common.OSPPPQ16;
import os.common.OSPPPQ17;
import os.common.OSPPPQ18;
import os.common.OSPPPQ19;
import os.common.OSPPPQ20;
import os.common.OSPREC;
import os.common.OSPSELTD;
import os.common.OSPSTYNB;
import os.common.OSPSZI01;
import os.common.OSPSZI02;
import os.common.OSPSZI03;
import os.common.OSPSZI04;
import os.common.OSPSZI05;
import os.common.OSPSZI06;
import os.common.OSPSZI07;
import os.common.OSPSZI08;
import os.common.OSPSZI09;
import os.common.OSPSZI10;
import os.common.OSPSZI11;
import os.common.OSPSZI12;
import os.common.OSPSZI13;
import os.common.OSPSZI14;
import os.common.OSPSZI15;
import os.common.OSPSZI16;
import os.common.OSPSZI17;
import os.common.OSPSZI18;
import os.common.OSPSZI19;
import os.common.OSPSZI20;
import os.common.OSPTSLEN;
import os.common.OSPTSROW;
import os.common.OSWREC;
import pk.common.PKTBACTI;
import pk.common.PKTPPQTY;
import pw.common.PWSREC;
import sy.common.SY1SSTNM;
import sy.common.SY2CLRAB;
import sy.common.SY2CLRID;
import sy.common.SY4REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA5APPID;
import ta.common.TA5REC;
import ta.common.TAEREC;
import xx.common.*;
import xx.common.XGPCD;
import xx.common.XWHCD;
import xx.common.ZZZCHGCT;
import xx02.*;
import xx02.XDMCD;
import xx04.*;
import xx04.XPACD;
import xx04.XPATBL;
import xx07.*;
import xx07.SY4IDDSC;
import xx07.SY4SZSCL;
import xx08.*;
import xx08.SY1STNBR;
import xx08.YNTCD;
//*** PROGRAM=OS0H ****
// OS0H -- ORDER PROCESSING -- CUSTOMER PREPACK BY PACKAGE
//      temp storage used:  add, read, update - OSPREC
//      IO4650 - DORDER.VCSPRP01 - Insert, Update, Delete
// ;
// This program consists of one screen:
//   1.  Display Package - Prepack item
// 
// This program uses the DORDER.VCSPRP01 database.  If
// anything is changed for an item, Temp Storage is Updated
// this is continued until the operator exits (PF3) or
// "Commits" (PF10).
// 
// Screen process one (1) Package at a time.  Attempts to
// change Package Number are errors.
// 
// PFkey Assignments:
// 
//    PF02 - Allow changes to screen
//    PF03 - Skip Update / Product
//    PF07 - Scroll Forward
//    PF08 - Scroll Backward
//    PF10 - Create Package (all items)
//    PF12 - Edit current display
//    PF24 - Delete Item from Prepack database
// 
// NOTE!!  ANY NEW CODE ADDED THAT CAUSES THE PROGRAM TO
// END (DXFER,XFER,ABEND ETC) MUST ALSO PURGE TEMP STORAGE
// BEFORE THE EXIT TAKES PLACE.
// USE OS0HS6A.
// ------------------------------------------------------------
//                    maintenance history
// ------------------------------------------------------------
// 
// 05/31/91   dpetti   Created program.
// 06/29/91   gwells   Menu of Services - Do not allow main-
//                     tenance of allocated or partially
//                     allocated prepack packages.  Also,
//                     major cleanup, almost to the point of
//                     a rewrite.  Statement groups not
//                     changed - s1a,s20,s40,s76,s8b,s8c.
//                     Statement groups removed - sb3,sxa,sxb,
//                     xsc,szd,s50,s6b,s7c,s7f,s7q,s70,s8d.
// 12/02/91   jhecke   695 - Prepack of footwear.  Major
//                     revision of this program to accomodate
//                     footwear and to fix several existing
//                     problems. s2a,sz2,s2b,s25,s6c,s60,s65,
//                     s7a,s7b,s75,s77,s8a,s81,s9b,s9d,s9f,s90
//                     w03,w00
// 01/23/92   jhecke   Program was not able to prepack orders
//                     with size scale of 13. S8A.
// 
// 10/08/92   sjob     #922-change os0hs7g to allow picking's
//                     specified box size < customer max size
// 06/28/93   bbake2   no log - changed value clause for error
//                     reported when pk4420 return code is 9.
//                     s78
// 02/28/93   dmeier   db2 changes - changed os0hs7g: renamed
//                     kucmxynt to cu-max-ftwr-ynt-cd
// 04/28/94   jather   log 1003. renamed causera to
//                     ca-user-workarea-4k to hold opwrec
//                     which has increased to 3072 bytes.
// 11/04/96   slarse   Musical Size Run -- do not allow mixed
//                     combinations with remainder > 0
// 01/20/97   wleong   added musical size run edits
// 06/15/97   wleong   do not call pk4420 to calculate carton
//                     type for musical orders(per sandi clark)
// 10/23/97   wleong   include cu orders for msr edits.
// 01/23/98   wleong   do not check for msr edits for apparel
//                     per pat joyner.
// 03/10/98   wleong   changed msr rule of min of 6 pack to min
//                     of 3 pack per sandi clark.
// 04/06/98   wleong   changed msr rule of min of 3 pack back
//                     to 6 per sandi clark.  os0hs8a.
// 04/09/98   wleong   removed delete function from screen.
//                     this is to prevent users from deleting
//                     the prepack record with the pack code
//                     still attached to the header.  Users
//                     would have to remove the pack code in
//                     OM0I to delete the prepack record.
// 09/02/98   sjohn6   remove carton calculation for whse 51
//                     os0hs75
// 01/25/99   sgopal   changed chek for carton ration from 6
//                     to 1 in OS0HSA8.Changed message number
//                     925 in OP00ENU table accordingly.
// 02/10/99   sgopal   Added scale code 39 to the existing
//                     hardcoded scale codes which had all
//                     the 40 size ranges.Chek for TCS change
//                     in OS0HS8A dated 02/10/1999.
// 12/14/00   Rshaik   OS0H screen displaying incorrect sub ord
// TT#9452             ID. Please refer OS0HW00.
// *********************
Program OS0H type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "OP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  OMWREC OMWREC; // record
  OP1REC OP1REC; // record
  OS0HW00 OS0HW00; // record
  OS0HW01 OS0HW01; // record
  OS0HW02 OS0HW02; // record
  OS0HW03 OS0HW03; // record
  OS0HW04 OS0HW04; // record
  OS0HW05 OS0HW05; // record
  OSNREC OSNREC; // record
  OSPREC OSPREC; // record
  OSWREC OSWREC; // record
  PWSREC PWSREC; // record
  SQLCA SQLCA; // record
  SY4REC SY4REC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL; // table
  use XPATBL; // table
  use OS0HM.OS0HM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    OS0H000: OS0H000();
    goto OS0H010;
    OS0H010: OS0H010();
    goto OS0H010; /* loop back to beginning*/
  end // end main
end // end OS0H

// INITIALIZE APPLICATION
Function OS0H000()
   /* ------------------------------------------------------------*/
   /* INITIALIZE AND READ*/
   /* ------------------------------------------------------------*/
  ;
  XSENTRY(); /* application entry validation*/
  ;
  XSOMS01(); /* o/m system security*/
  ;
  XSSEGTR(); /* set segmented trans id*/
  ;
  COMMAREA.CACURRAP = "OS0H";
  ;
  set OS0HW00 empty;
  set OS0HW01 empty;
  set OS0HW02 empty;
  ;
  set KUCREC empty;
  set OSWREC empty;
  set OSNREC empty;
  set OP1REC empty;
  set OMWREC empty;
  ;
  set TA1REC empty;
  set TA2REC empty;
  set TA5REC empty;
  ;
  set SQLCA empty;
  set ERRSQLCA empty;
  ;
  OSWREC.OSWSGRP = COMMAREA.CA-USER-WORKAREA-4K;
  OMWREC.OMWSGRP = OSWREC.OSWOMWGP;
  OP1REC.OP1GROUP = OMWREC.OP1GROUP;
  OS0HW00.XXXTSPAG = OSWREC.OSWTSF1P;
  ;
   /* set one time only values*/
  ;
  OS0HW00.XXXTSLEN = 3820; /* temporary storage length*/
  TA1REC.TA1PGMNM = "OS0H000"; /* program name*/
  OS0HW00.TA5APPID = "OS0G"; /* application identification*/
  ;
  ;
   /* OS0HW02 is a table that contains the ts queue page and*/
   /* item references for items that have been displayed.*/
   /* OS0HW2IX is the index for the OS0HW03 table.*/
  ;
  ;
  OS0HW02.OS0HWPAG[1] = OSWREC.OSWTSF1P; /* 1st page*/
  OS0HW00.OS0HWPRD = OSWREC.OSWTSF1S; /* 1st product*/
  OS0HW02.OS0HWSUB[1] = OSWREC.OSWTSF1S; /* setup product subscript*/
  OS0HW02.OS0HW2IX = 2;
  ;
  OS0HS05(); /* read first ts queue page*/
  ;
   /* populate os0hw00.ospseltd 'a' = all items for the package*/
                             /* 's' = specific items from package*/
  ;
  OS0HW00.OSPSELTD = OSPREC.OSPSELTD[OS0HWPRD]; /* select code*/
  ;
  OS0HM001.XXXCURDT = VGVar.currentShortGregorianDate; /* current date*/
  ;
  if (OSWREC.OSNPKGNB == 0) /* item not assigned to a package*/
    OS0HS15(); /* get next package number*/
  else
    OS0HW00.OSNPKGNB = OSWREC.OSNPKGNB; /* pkg# already assigned*/
  end
  ;
  OS0HS20(); /* move values to map*/
  ;
  OS0HW00.OS0HWERR = "N"; /* error message flag*/
  ;
  OMWREC.OMWPF2CH = "N"; /* temporary change mode*/
  ;
  ;
  ;
  ;
end // end OS0H000

// DISPLAY MAP
Function OS0H010()
  ;
                 /* Display Map*/
  ;
  ;
  converseVar.segmentedMode = 1;
  ;
  OS0HS25(); /* set display attributes*/
  ;
  if (OS0HW00.OS0HWERR == "Y") /* error exist*/
    /* next sentence*/
  else
    OS0HS1A(); /* move map values to hold record*/
    OS0HS2C(); /* calculate remainder qtys*/
  end
  ;
  OS0HM001.CAMSG = COMMAREA.CAMSG; /* move message to map*/
  ;
  converse OS0HM001 ;
  ;
  OS0HW00.OS0HWERR = "N"; /* reset error flag*/
  OS0HW00.OS0HWCHF = "N"; /* reset change flag*/
  COMMAREA.CAMSG = " "; /* reset message area*/
  ;
  OS0HS60(); /* build prepack packages*/
  ;
  ;
end // end OS0H010

// READS 1ST TS QUEUE PAGE
Function OS0HS05()
  ;
   /* READ 1ST TS QUEUE PAGE*/
  ;
  ;
  set OSPREC empty;
  ;
  OS0HM001.OS0HMPRC = "OS0HS05"; /* Module identification*/
  OSPREC.OSPTSLEN = OS0HW00.XXXTSLEN; /* Temporary storage length*/
  TA5REC.TA5APPID = OS0HW00.TA5APPID; /* Application identification*/
  TA5REC.TA5TSQIX = OSWREC.OSWTSF1P; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (OSPREC, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  if (TA5REC.TA5RTNCD == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "OS0HS05";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    OMWREC.OMWORDN = OP1REC.OP1CUOID; /* display cust ord id*/
    OMWREC.OMWSORDN = OP1REC.OP1NORID; /* display nike ord id*/
    TA1REC.TA1TBLKE = OMWREC.OMWORD; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TAEREC.TAEDESC2 = "PROBLEM READING TEMP STORAGE";
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = COMMAREA.CACURRAP; /* current application*/
    try
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
    end
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
    OS0HSZB(); /* force dxfr out*/
  end
  ;
  ;
end // end OS0HS05

// GET NEXT PACKAGE NBR
Function OS0HS15()
  ;
             /* Assign package number*/
        /* read last page from temp storage*/
  ;
  if (OSWREC.OSWTSF1M == OSWREC.OSWTSF1P) /* TS last page = 1st page w/sel*/
    OS0HW03.OSPGROUP = OSPREC.OSPGROUP; /* Ts rec to working storage*/
  else /* obtain last page of data*/
    set OS0HW03 empty;
    OS0HM001.OS0HMPRC = "OS0HS15"; /* Module identification*/
    OS0HW03.OSPTSLEN = OS0HW00.XXXTSLEN; /* Temporary storage length*/
    TA5REC.TA5APPID = OS0HW00.TA5APPID; /* Application identification*/
    TA5REC.TA5TSQIX = OSWREC.OSWTSF1M; /* max page number*/
    TA5REC.TA5FNCCD = "R"; /* Function code*/
    ;
    try
      call "TA0050" (OS0HW03, TA5REC) {isNoRefresh = yes, isExternal = yes};
    end /* Temporary storage*/
    ;
    if (TA5REC.TA5RTNCD == 0)
      /* next sentence*/
    else
      TA1REC.TA1LOCAT[1] = "OS0HS15";
      TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
      TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
      OMWREC.OMWORDN = OP1REC.OP1CUOID; /* display cust ord id*/
      OMWREC.OMWSORDN = OP1REC.OP1NORID; /* display nike ord id*/
      TA1REC.TA1TBLKE = OMWREC.OMWORD; /* first row, first rec*/
      TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
      TAEREC.TAEDESC2 = "PROBLEM READING TEMP STORAGE";
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = COMMAREA.CACURRAP; /* current application*/
      try
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
      end
      COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
      OS0HSZB(); /* force dxfr out*/
    end
  end
  ;
        /* last package number is on last page of TS queue*/
  ;
  OS0HW00.OS0HWPSX = 1; /* map index*/
  ;
  while (OS0HW00.OS0HWPSX <= 12)
    if (OS0HW03.OSNPKGNB[OS0HWPSX] == 0)
       /* next sentence*/
    else
      OS0HW00.OSNPKGNB = OS0HW03.OSNPKGNB[OS0HWPSX];
    end
    OS0HW00.OS0HWPSX = OS0HW00.OS0HWPSX + 1;
  end
  ;
  OS0HW00.OSNPKGNB = OS0HW00.OSNPKGNB + 1; /* add one to pkg#*/
  ;
  ;
  ;
end // end OS0HS15

// MOVE SCREEN VALUES TO HOLD REC
Function OS0HS1A()
   /* ------------------------------------------------------------*/
   /* MOVE SCREEN VALUES TO HOLD RECORD (OS0HW01)*/
   /* ------------------------------------------------------------*/
  ;
  OS0HW01.OSNPKGNB = OS0HM001.OSNPKGNB; /* PACKAGE #*/
  ;
  OS0HW01.KUFMIXBL = OS0HM001.KUFMIXBL; /* MIX BOX FLAG*/
  ;
   /* ------------------------------------------------------------*/
   /* PKTPPQTY IS THE PRE-PACK QUANTITY*/
   /* ------------------------------------------------------------*/
  ;
  OS0HW00.OS0HWIXM = 1;
  ;
  while (OS0HW00.OS0HWIXM <= 20)
    OS0HW01.PKTPPQTY[OS0HWIXM] = OS0HM001.PKTPPQTY[OS0HWIXM];
    OS0HW00.OS0HWIXM = OS0HW00.OS0HWIXM + 1;
  end
  ;
  ;
  ;
end // end OS0HS1A

// MOVE VALUES TO MAP
Function OS0HS20()
   /* ------------------------------------------------------------*/
   /* POPULATE SCREEN FIELDS FROM COMMAREA*/
   /* ------------------------------------------------------------*/
  ;
   /* ------------------------------------------------------------*/
   /* OS0HS2A MOVES MAP HEADER VALUES*/
   /* ------------------------------------------------------------*/
  ;
  OS0HS2A();
  ;
   /* ------------------------------------------------------------*/
   /* OS0HS2B MOVES MAP DETAIL VALUES*/
   /* ------------------------------------------------------------*/
  ;
  OS0HS2B();
  ;
  ;
  ;
end // end OS0HS20

// SETS DISPLAY ATTRIBUTES
Function OS0HS25()
  ;
       /* Display detail literals only if data is present*/
  ;
       /* if position 11 is blank, no other values exist*/
       /* on that map line*/
  if (OS0HM001.OP3ONOQT[11] == 0)
    set OS0HM001.OS0HMSZL[2] skip, invisible;
    set OS0HM001.OS0HMOQL[2] skip, invisible;
    set OS0HM001.OS0HMQTL[2] skip, invisible;
    set OS0HM001.OS0HMRML[2] skip, invisible;
  else
    set OS0HM001.OS0HMSZL[2] initialAttributes;
    set OS0HM001.OS0HMOQL[2] initialAttributes;
    set OS0HM001.OS0HMQTL[2] initialAttributes;
    set OS0HM001.OS0HMRML[2] initialAttributes;
  end
  ;
  OS0HW00.OS0HWIXM = 20; /* map index*/
  ;
  while (OS0HW00.OS0HWIXM > 0)
    if (OS0HM001.OP3IDDSC[OS0HWIXM] == " ")
      set OS0HM001.OP3ONOQT[OS0HWIXM] skip, invisible;
      set OS0HM001.PKTPPQTY[OS0HWIXM] skip, invisible;
      set OS0HM001.OS0HMRND[OS0HWIXM] skip, invisible;
    end
    OS0HW00.OS0HWIXM = OS0HW00.OS0HWIXM - 1;
  end
  ;
  if (OMWREC.OMWCHGFL == "Y" /* change mode*/
   || OMWREC.OMWPF2CH == "Y") /* temp change mode*/
    if (OSPREC.OSPDELET[OS0HWPRD] == "D" /* delete (os0h)*/
     || OSPREC.OSPDELET[OS0HWPRD] == "*" /* delete (os0g)*/
     || OSPREC.OSPDELET[OS0HWPRD] == "A" /* allocated*/
     || OSPREC.OSPDELET[OS0HWPRD] == "P") /* partially allocated*/
      OS0HS30(); /* protect enterable fields*/
    else
      OS0HS31(); /* set enterable fields defined*/
    end
  else
    OS0HS30(); /* protect enterable fields*/
  end
  ;
  ;
  ;
end // end OS0HS25

// MOVE MAP HEADER VALUES
Function OS0HS2A()
  ;
                 /* MOVE MAP HEADER VALUES*/
  ;
  OS0HW00.OS0HWF1 = "."; /* 1st period*/
  OS0HW00.OS0HWF2 = "."; /* 2nd period*/
  OS0HW00.OS0HWF3 = "."; /* 3rd period*/
  ;
  OS0HW00.OS0HWCID = OP1REC.OP1CUOID; /* cust ord id*/
  ;
  OS0HW00.OS0HWNID = OP1REC.OP1NORID; /* nike ord id*/
  ;
  OS0HM001.OS0HMORD = OS0HW00.OS0HMORD; /* formatted order #*/
  ;
  OS0HW00.OS0HWCOD = OP1REC.KUCCOID; /* company id*/
  ;
  OS0HW00.OS0HWSID = OP1REC.KUMSTRID; /* store id*/
  ;
  OS0HW00.OS0HWDID = OP1REC.XNXCD; /* dept id*/
  ;
  OS0HM001.OS0HMCUS = OS0HW00.OS0HMCUS; /* formatted customer*/
  ;
  OS0HM001.KUMSTRNM = OMWREC.KUMSTRNM; /* store name*/
  ;
  OS0HW00.XPACD = OP1REC.XPACD; /* cust pack code*/
  OS0HM001.XPACD = OP1REC.XPACD;
  OS0HS40(); /* pack code abrv*/
  ;
  OS0HW00.XWHCD = OP1REC.XWHCD; /* warehouse*/
  ;
  OS0HW00.XGPCD = OP1REC.XGPCD; /* gpc*/
  ;
            /* populate map from temp storage*/
    /* xxxtsitm is subscript on current ts page for selected item*/
  ;
  OS0HM001.KUFMIXBL = OSPREC.KUFMIXBL[OS0HWPRD]; /* mix box flag*/
  OS0HW00.KUFMIXBL = OSPREC.KUFMIXBL[OS0HWPRD];
  ;
  OS0HW00.XDMCD = OSPREC.XDMCD[OS0HWPRD]; /* dimension code*/
  ;
  OS0HM001.YNTCD = OSPREC.YNTCD[OS0HWPRD]; /* carton type code*/
  OS0HW00.YNTCD = OSPREC.YNTCD[OS0HWPRD];
  ;
  OS0HM001.KUCUNTCS = OSPREC.KUCUNTCS[OS0HWPRD]; /* units per carton*/
  OS0HW00.KUCUNTCS = OSPREC.KUCUNTCS[OS0HWPRD];
  ;
  ;
end // end OS0HS2A

// MOVE MAP DETAIL VALUES
Function OS0HS2B()
  ;
   /* OS0HS2B MOVES MAP DETAIL VALUES*/
  ;
  if (OSPREC.OSPMORE[OS0HWPRD] == "Y") /* more sizes?*/
    OS0HM001.OS0HWMOR = "MORE SIZES"; /* well, then say so*/
  else /* no*/
    OS0HM001.OS0HWMOR = " "; /* well, then dont say so*/
  end
  ;
  if (OSPREC.OSNPKGNB[OS0HWPRD] > 0) /* pkg# assigned*/
    OS0HM001.OSNPKGNB = OSPREC.OSNPKGNB[OS0HWPRD];
  else
    OS0HM001.OSNPKGNB = 0;
  end
  ;
  OS0HM001.OS0HMSTN = OSPREC.OSPSTYNB[OS0HWPRD];
  ;
  OS0HM001.SY1SSTNM = OSPREC.SY1SSTNM[OS0HWPRD];
  OS0HW00.SY1SSTNM = OSPREC.SY1SSTNM[OS0HWPRD];
  ;
  OS0HM001.SY2CLRAB = OSPREC.SY2CLRAB[OS0HWPRD];
  OS0HW00.SY2CLRAB = OSPREC.SY2CLRAB[OS0HWPRD];
  ;
  OS0HM001.OP2CGPCD = OSPREC.OP2CGPCD[OS0HWPRD];
  OS0HW00.OP2CGPCD = OSPREC.OP2CGPCD[OS0HWPRD];
  ;
   /* ------------------------------------------------------------*/
   /* FIRST FIVE SIZES AND QTYS*/
   /* ------------------------------------------------------------*/
  ;
  OS0HW00.OS0HWNUM = 0;
  ;
  OS0HM001.OP3IDDSC[1] = OSPREC.OSPSZI01[OS0HWPRD];
  ;
  OS0HW00.OS0HWNUM = OSPREC.OSPPPQ01[OS0HWPRD];
  OS0HM001.PKTPPQTY[1] = OS0HW00.OS0HWNUM;
  ;
  OS0HW00.OS0HWNUM = OSPREC.OSPORQ01[OS0HWPRD];
  OS0HM001.OP3ONOQT[1] = OS0HW00.OS0HWNUM;
  ;
  OS0HW00.OS0HWNUM = 0;
  ;
  OS0HM001.OP3IDDSC[2] = OSPREC.OSPSZI02[OS0HWPRD];
  ;
  OS0HW00.OS0HWNUM = OSPREC.OSPPPQ02[OS0HWPRD];
  OS0HM001.PKTPPQTY[2] = OS0HW00.OS0HWNUM;
  ;
  OS0HW00.OS0HWNUM = OSPREC.OSPORQ02[OS0HWPRD];
  OS0HM001.OP3ONOQT[2] = OS0HW00.OS0HWNUM;
  ;
  OS0HW00.OS0HWNUM = 0;
  ;
  OS0HM001.OP3IDDSC[3] = OSPREC.OSPSZI03[OS0HWPRD];
  ;
  OS0HW00.OS0HWNUM = OSPREC.OSPPPQ03[OS0HWPRD];
  OS0HM001.PKTPPQTY[3] = OS0HW00.OS0HWNUM;
  ;
  OS0HW00.OS0HWNUM = OSPREC.OSPORQ03[OS0HWPRD];
  OS0HM001.OP3ONOQT[3] = OS0HW00.OS0HWNUM;
  ;
  OS0HW00.OS0HWNUM = 0;
  ;
  OS0HM001.OP3IDDSC[4] = OSPREC.OSPSZI04[OS0HWPRD];
  ;
  OS0HW00.OS0HWNUM = OSPREC.OSPPPQ04[OS0HWPRD];
  OS0HM001.PKTPPQTY[4] = OS0HW00.OS0HWNUM;
  ;
  OS0HW00.OS0HWNUM = OSPREC.OSPORQ04[OS0HWPRD];
  OS0HM001.OP3ONOQT[4] = OS0HW00.OS0HWNUM;
  ;
  OS0HW00.OS0HWNUM = 0;
  ;
  OS0HM001.OP3IDDSC[5] = OSPREC.OSPSZI05[OS0HWPRD];
  ;
  OS0HW00.OS0HWNUM = OSPREC.OSPPPQ05[OS0HWPRD];
  OS0HM001.PKTPPQTY[5] = OS0HW00.OS0HWNUM;
  ;
  OS0HW00.OS0HWNUM = OSPREC.OSPORQ05[OS0HWPRD];
  OS0HM001.OP3ONOQT[5] = OS0HW00.OS0HWNUM;
  ;
   /* ------------------------------------------------------------*/
   /* SIX THRU TEN SIZES AND QTYS*/
   /* ------------------------------------------------------------*/
  ;
  OS0HW00.OS0HWNUM = 0;
  ;
  OS0HM001.OP3IDDSC[6] = OSPREC.OSPSZI06[OS0HWPRD];
  ;
  OS0HW00.OS0HWNUM = OSPREC.OSPPPQ06[OS0HWPRD];
  OS0HM001.PKTPPQTY[6] = OS0HW00.OS0HWNUM;
  ;
  OS0HW00.OS0HWNUM = OSPREC.OSPORQ06[OS0HWPRD];
  OS0HM001.OP3ONOQT[6] = OS0HW00.OS0HWNUM;
  ;
  OS0HW00.OS0HWNUM = 0;
  ;
  OS0HM001.OP3IDDSC[7] = OSPREC.OSPSZI07[OS0HWPRD];
  ;
  OS0HW00.OS0HWNUM = OSPREC.OSPPPQ07[OS0HWPRD];
  OS0HM001.PKTPPQTY[7] = OS0HW00.OS0HWNUM;
  ;
  OS0HW00.OS0HWNUM = OSPREC.OSPORQ07[OS0HWPRD];
  OS0HM001.OP3ONOQT[7] = OS0HW00.OS0HWNUM;
  ;
  OS0HW00.OS0HWNUM = 0;
  ;
  OS0HM001.OP3IDDSC[8] = OSPREC.OSPSZI08[OS0HWPRD];
  ;
  OS0HW00.OS0HWNUM = OSPREC.OSPPPQ08[OS0HWPRD];
  OS0HM001.PKTPPQTY[8] = OS0HW00.OS0HWNUM;
  ;
  OS0HW00.OS0HWNUM = OSPREC.OSPORQ08[OS0HWPRD];
  OS0HM001.OP3ONOQT[8] = OS0HW00.OS0HWNUM;
  ;
  OS0HW00.OS0HWNUM = 0;
  ;
  OS0HM001.OP3IDDSC[9] = OSPREC.OSPSZI09[OS0HWPRD];
  ;
  OS0HW00.OS0HWNUM = OSPREC.OSPPPQ09[OS0HWPRD];
  OS0HM001.PKTPPQTY[9] = OS0HW00.OS0HWNUM;
  ;
  OS0HW00.OS0HWNUM = OSPREC.OSPORQ09[OS0HWPRD];
  OS0HM001.OP3ONOQT[9] = OS0HW00.OS0HWNUM;
  ;
  OS0HW00.OS0HWNUM = 0;
  ;
  OS0HM001.OP3IDDSC[10] = OSPREC.OSPSZI10[OS0HWPRD];
  ;
  OS0HW00.OS0HWNUM = OSPREC.OSPPPQ10[OS0HWPRD];
  OS0HM001.PKTPPQTY[10] = OS0HW00.OS0HWNUM;
  ;
  OS0HW00.OS0HWNUM = OSPREC.OSPORQ10[OS0HWPRD];
  OS0HM001.OP3ONOQT[10] = OS0HW00.OS0HWNUM;
  ;
   /* ------------------------------------------------------------*/
   /* ELEVEN THRU FIFTEEN SIZES AND QTYS*/
   /* ------------------------------------------------------------*/
  ;
  OS0HW00.OS0HWNUM = 0;
  ;
  OS0HM001.OP3IDDSC[11] = OSPREC.OSPSZI11[OS0HWPRD];
  ;
  OS0HW00.OS0HWNUM = OSPREC.OSPPPQ11[OS0HWPRD];
  OS0HM001.PKTPPQTY[11] = OS0HW00.OS0HWNUM;
  ;
  OS0HW00.OS0HWNUM = OSPREC.OSPORQ11[OS0HWPRD];
  OS0HM001.OP3ONOQT[11] = OS0HW00.OS0HWNUM;
  ;
  OS0HW00.OS0HWNUM = 0;
  ;
  OS0HM001.OP3IDDSC[12] = OSPREC.OSPSZI12[OS0HWPRD];
  ;
  OS0HW00.OS0HWNUM = OSPREC.OSPPPQ12[OS0HWPRD];
  OS0HM001.PKTPPQTY[12] = OS0HW00.OS0HWNUM;
  ;
  OS0HW00.OS0HWNUM = OSPREC.OSPORQ12[OS0HWPRD];
  OS0HM001.OP3ONOQT[12] = OS0HW00.OS0HWNUM;
  ;
  OS0HW00.OS0HWNUM = 0;
  ;
  OS0HM001.OP3IDDSC[13] = OSPREC.OSPSZI13[OS0HWPRD];
  ;
  OS0HW00.OS0HWNUM = OSPREC.OSPPPQ13[OS0HWPRD];
  OS0HM001.PKTPPQTY[13] = OS0HW00.OS0HWNUM;
  ;
  OS0HW00.OS0HWNUM = OSPREC.OSPORQ13[OS0HWPRD];
  OS0HM001.OP3ONOQT[13] = OS0HW00.OS0HWNUM;
  ;
  OS0HW00.OS0HWNUM = 0;
  ;
  OS0HM001.OP3IDDSC[14] = OSPREC.OSPSZI14[OS0HWPRD];
  ;
  OS0HW00.OS0HWNUM = OSPREC.OSPPPQ14[OS0HWPRD];
  OS0HM001.PKTPPQTY[14] = OS0HW00.OS0HWNUM;
  ;
  OS0HW00.OS0HWNUM = OSPREC.OSPORQ14[OS0HWPRD];
  OS0HM001.OP3ONOQT[14] = OS0HW00.OS0HWNUM;
  ;
  OS0HW00.OS0HWNUM = 0;
  ;
  OS0HM001.OP3IDDSC[15] = OSPREC.OSPSZI15[OS0HWPRD];
  ;
  OS0HW00.OS0HWNUM = OSPREC.OSPPPQ15[OS0HWPRD];
  OS0HM001.PKTPPQTY[15] = OS0HW00.OS0HWNUM;
  ;
  OS0HW00.OS0HWNUM = OSPREC.OSPORQ15[OS0HWPRD];
  OS0HM001.OP3ONOQT[15] = OS0HW00.OS0HWNUM;
  ;
   /* ------------------------------------------------------------*/
   /* SIXTEEN THRU TWENTY SIZES AND QTYS*/
   /* ------------------------------------------------------------*/
  ;
  OS0HW00.OS0HWNUM = 0;
  ;
  OS0HM001.OP3IDDSC[16] = OSPREC.OSPSZI16[OS0HWPRD];
  ;
  OS0HW00.OS0HWNUM = OSPREC.OSPPPQ16[OS0HWPRD];
  OS0HM001.PKTPPQTY[16] = OS0HW00.OS0HWNUM;
  ;
  OS0HW00.OS0HWNUM = OSPREC.OSPORQ16[OS0HWPRD];
  OS0HM001.OP3ONOQT[16] = OS0HW00.OS0HWNUM;
  ;
  OS0HW00.OS0HWNUM = 0;
  ;
  OS0HM001.OP3IDDSC[17] = OSPREC.OSPSZI17[OS0HWPRD];
  ;
  OS0HW00.OS0HWNUM = OSPREC.OSPPPQ17[OS0HWPRD];
  OS0HM001.PKTPPQTY[17] = OS0HW00.OS0HWNUM;
  ;
  OS0HW00.OS0HWNUM = OSPREC.OSPORQ17[OS0HWPRD];
  OS0HM001.OP3ONOQT[17] = OS0HW00.OS0HWNUM;
  ;
  OS0HW00.OS0HWNUM = 0;
  ;
  OS0HM001.OP3IDDSC[18] = OSPREC.OSPSZI18[OS0HWPRD];
  ;
  OS0HW00.OS0HWNUM = OSPREC.OSPPPQ18[OS0HWPRD];
  OS0HM001.PKTPPQTY[18] = OS0HW00.OS0HWNUM;
  ;
  OS0HW00.OS0HWNUM = OSPREC.OSPORQ18[OS0HWPRD];
  OS0HM001.OP3ONOQT[18] = OS0HW00.OS0HWNUM;
  ;
  OS0HW00.OS0HWNUM = 0;
  ;
  OS0HM001.OP3IDDSC[19] = OSPREC.OSPSZI19[OS0HWPRD];
  ;
  OS0HW00.OS0HWNUM = OSPREC.OSPPPQ19[OS0HWPRD];
  OS0HM001.PKTPPQTY[19] = OS0HW00.OS0HWNUM;
  ;
  OS0HW00.OS0HWNUM = OSPREC.OSPORQ19[OS0HWPRD];
  OS0HM001.OP3ONOQT[19] = OS0HW00.OS0HWNUM;
  ;
  OS0HW00.OS0HWNUM = 0;
  ;
  OS0HM001.OP3IDDSC[20] = OSPREC.OSPSZI20[OS0HWPRD];
  ;
  OS0HW00.OS0HWNUM = OSPREC.OSPPPQ20[OS0HWPRD];
  OS0HM001.PKTPPQTY[20] = OS0HW00.OS0HWNUM;
  ;
  OS0HW00.OS0HWNUM = OSPREC.OSPORQ20[OS0HWPRD];
  OS0HM001.OP3ONOQT[20] = OS0HW00.OS0HWNUM;
  ;
  if (OSPREC.OSPMORE[OS0HWPRD] == "2")
   /* next sentence        /* POPULATE SCROLLING TABLE FROM CURRENT Dsply*/
  else /* populate the scrolling table*/
    OS0HS2D();
  end
  ;
  ;
end // end OS0HS2B

// CALCULATE REMAINDER
Function OS0HS2C()
  ;
   /* CALCULATE REMAINING PIECES OF ITEM THAT WILL NOT FIT IN*/
   /* PREPACK*/
  ;
  ;
  ;
   /* initialize all remainder fields*/
  ;
  ;
  OS0HW00.OS0HWIXM = 1;
  ;
  while (OS0HW00.OS0HWIXM <= 20)
    OS0HM001.OS0HMRND[OS0HWIXM] = 0;
    OS0HW00.OS0HWIXM = OS0HW00.OS0HWIXM + 1;
  end
  ;
   /* ------------------------------------------------------------*/
   /* REMAINDER(X) IS CALCULATED BY FINDING:*/
  ;
    /* 1). THE LOWEST NUMBER OF PACKAGES*/
  ;
         /* NBR OF PACKAGES = (ON ORDER QTY(X) / PREPACK QTY(X))*/
  ;
    /* 2). THE NUMBER OF UNITS PER PACKAGE*/
  ;
        /* UNITS PER PACK(X) = (PREPACK QTY(X) * NBR OF PACKAGES)*/
  ;
    /* 3). REMAINDER UNITS*/
  ;
        /* REMAINDER(X) = (UNITS PER PACK(X) - PREPACK QTY(X))*/
  ;
   /* ------------------------------------------------------------*/
  ;
  OS0HW00.OS0HWREM = 9999;
  ;
  OS0HW00.OS0HWIXM = 1;
  ;
  while (OS0HW00.OS0HWIXM <= 20)
    if (OS0HM001.OP3ONOQT[OS0HWIXM] == 0)
      /* NEXT SENTENCE*/
    else
      if (OS0HM001.PKTPPQTY[OS0HWIXM] == 0)
        /* NEXT SENTENCE*/
      else
        OS0HW00.OP3ONOQT = OS0HM001.OP3ONOQT[OS0HWIXM];
        OS0HW00.PKTPPQTY = OS0HM001.PKTPPQTY[OS0HWIXM];
        OS0HW00.OS0HWQOT = OS0HW00.OP3ONOQT / OS0HW00.PKTPPQTY;
        if (OS0HW00.OS0HWREM > OS0HW00.OS0HWQOT)
          OS0HW00.OS0HWREM = OS0HW00.OS0HWQOT;
        end
      end
    end
    OS0HW00.OS0HWIXM = OS0HW00.OS0HWIXM + 1;
  end
  ;
  if (OS0HW00.OS0HWREM == 0
   || OS0HW00.OS0HWREM == 9999)
    return;
  end
  ;
  OS0HW00.OS0HWIXM = 1;
  ;
  while (OS0HW00.OS0HWIXM <= 20)
    if (OS0HM001.OP3ONOQT[OS0HWIXM] == 0)
      /* NEXT SENTENCE*/
    else
      if (OS0HM001.PKTPPQTY[OS0HWIXM] == 0)
        /* NEXT SENTENCE*/
      else
        OS0HW00.OP3ONOQT = OS0HM001.OP3ONOQT[OS0HWIXM];
        OS0HW00.PKTPPQTY = OS0HM001.PKTPPQTY[OS0HWIXM];
        OS0HW00.OS0HWTRM = OS0HW00.PKTPPQTY * OS0HW00.OS0HWREM;
        OS0HM001.OS0HMRND[OS0HWIXM] = OS0HW00.OP3ONOQT - OS0HW00.OS0HWTRM;
        if (OS0HM001.OS0HMRND[OS0HWIXM] == 0)
          OS0HW00.OS0HWERR = "N"; /* error does not exist*/
        else
          OS0HW00.OS0HWERR = "Y"; /* error exist*/
          if (OS0HM001.KUFMIXBL == "N")
         /* *** slarse begin*/
            if (OP1REC.XPACD == "MS")
              COMMAREA.CAMSG = "REMAINDER NOT ALLOWED FOR MUSICAL SIZE RUN";
            else
              COMMAREA.CAMSG = "REMAINDER EXIST - SET ALLOW MIX BOX FLAG";
            end
         /* *** slarse begin*/
          end
        end
      end
    end
    OS0HW00.OS0HWIXM = OS0HW00.OS0HWIXM + 1;
  end
end // end OS0HS2C

// POPULATE SCROLLING TABLE
Function OS0HS2D()
  ;
   /* POPULATE SCROLLING TABLE WITH CURRENT TS QUEUE KEYS*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* os0hwitm is the concatenation of ts page and item sub*/
   /* ------------------------------------------------------------*/
  ;
  sysVar.arrayIndex = 1;
  ;
  if (OS0HW00.OS0HWITM in OS0HW02.OS0HWITM) /* ws item index*/
    /* NEXT SENTENCE                       ; index for scroll tbl*/
  end
  ;
  if (sysVar.arrayIndex == 0)
    OS0HW02.OS0HWITM[OS0HW2IX] = OS0HW00.OS0HWITM;
    OS0HW02.OS0HW2IX = OS0HW02.OS0HW2IX + 1;
  end
  ;
  ;
  ;
end // end OS0HS2D

// PROTECT ENTERABLE FIELDS
Function OS0HS30()
  ;
           /* protect enterable fields*/
  ;
  OS0HW00.OS0HWIXM = 20; /* map index*/
  ;
  while (OS0HW00.OS0HWIXM > 0)
    if (OS0HM001.OP3IDDSC[OS0HWIXM] == " ")
      /* next sentence*/
    else
      set OS0HM001.PKTPPQTY[OS0HWIXM] cursor, protect;
    end
    OS0HW00.OS0HWIXM = OS0HW00.OS0HWIXM - 1;
  end
  ;
  set OS0HM001.KUFMIXBL protect;
  ;
  ;
end // end OS0HS30

// SET FIELDS DEFINED
Function OS0HS31()
  ;
           /* SET ENTERABLE FIELDS DEFINED*/
  ;
  OS0HW00.OS0HWIXM = 20; /* map index*/
  ;
  while (OS0HW00.OS0HWIXM > 0)
    if (OS0HM001.OP3IDDSC[OS0HWIXM] == " ")
      /* next sentence*/
    else
      set OS0HM001.OP3ONOQT[OS0HWIXM] initialAttributes;
      set OS0HM001.PKTPPQTY[OS0HWIXM] initialAttributes;
      set OS0HM001.OS0HMRND[OS0HWIXM] initialAttributes;
    end
    OS0HW00.OS0HWIXM = OS0HW00.OS0HWIXM - 1;
  end
  ;
   /* *** slarse begin*/
  if (OP1REC.XPACD == "MS") /* cust pack code*/
    set OS0HM001.KUFMIXBL skip, invisible;
  else
    set OS0HM001.KUFMIXBL initialAttributes;
  end
   /* *** slarse end*/
  ;
  ;
end // end OS0HS31

// get pack code abrv
Function OS0HS40()
  ;
  ;
   /* this statement group gets the pack code abrv*/
  ;
  sysVar.arrayIndex = 1;
  if (OP1REC.XPACD in XPATBL.XPACD /* pack code exists*/
   && XPATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* and it's active*/
    OS0HM001.XPAABRV = XPATBL.XPAABRV[sysVar.arrayIndex];
     /* NEXT SENTENCE*/
  else
    OS0HM001.XPAABRV = " ";
  end
  ;
end // end OS0HS40

// BUILD PREPACK PACKAGES
Function OS0HS60()
  ;
       /* Valid PFkeys are enter, pf2, pf7, pf8, pf10, pf12, pf24*/
  ;
  ;
  if (converseVar.eventKey is pf2) /* change mode requested*/
    if (COMMAREA.CACHGFL > " ") /* id authorized to change*/
      if (OSPREC.OSPDELET == "*" /* delete*/
       || OSPREC.OSPDELET == "A" /* allocated*/
       || OSPREC.OSPDELET == "P") /* partially allocated*/
        OS0HW00.OS0HWERR = "Y";
        converseLib.validationFailed(701); /* item status does not allow chgs*/
        return;
      else
        OMWREC.OMWPF2CH = "Y"; /* temp change mode*/
        return;
      end
    else
      OS0HW00.OS0HWERR = "Y";
      converseLib.validationFailed(352); /* id not authorized to change order*/
      return;
    end
  end
  ;
  if (converseVar.eventKey is pf3) /* dxfer to OS0G*/
    OS0HS6A(); /* purge temp storage*/
    COMMAREA.CAFRMAPP = COMMAREA.CACURRAP;
    COMMAREA.CACURRAP = "OS0G";
    sysVar.transferName = COMMAREA.CACURRAP;
    transfer to program sysVar.transferName passing COMMAREA; /* Exit to OS0G*/
  end
  ;
  if (converseVar.eventKey is pf7) /* scroll backward*/
    OS0HS65(); /* get previous item*/
    return;
  end
  ;
  if (converseVar.eventKey is pf8) /* scroll forward*/
    OS0HW00.OS0HWCHF = "N"; /* change flag*/
    OS0HW00.OS0HWFND = "N"; /* item found flag*/
    OS0HW00.OS0HWSPG = OS0HW00.XXXTSPAG; /* save cur page id*/
    OS0HW00.OS0HWSTM = OS0HW00.OS0HWPRD; /* save cur item id*/
    if (OSPREC.OSPMORE[OS0HWPRD] == "2") /* are we on size 21-40 page*/
      converseLib.validationFailed(713);
      return;
    else
      OS0HS9B(); /* get next item for display*/
    end
    if (OS0HW00.OS0HWERR == "Y") /* error exists*/
      OS0HW00.XXXTSPAG = OS0HW00.OS0HWSPG; /* restore cur page id*/
      OS0HW00.OS0HWPRD = OS0HW00.OS0HWSTM; /* restore cur item id*/
    end
    return;
  end
  ;
  if (converseVar.eventKey is pf10) /* package items*/
    OS0HS75(); /* create package*/
    return;
  end
  ;
  if (converseVar.eventKey is pf12) /* edit only*/
    OS0HS80(); /* validate current map*/
    return;
  end
  ;
  if (converseVar.eventKey is pf21) /* display previous sizes*/
    if (OSPREC.OSPMORE[OS0HWPRD] == "2") /* are we on page 2*/
      OS0HW00.XXXTSPAG = OS0HW00.XXXTSPAG - 1; /* get back to prev page*/
      OS0HS6C(); /* read the ts queue page*/
      OS0HS2B(); /* rebuild the map*/
      OS0HS31(); /* set fields defined*/
      set OS0HM001.OS0HMSZL[2] initialAttributes;
      set OS0HM001.OS0HMOQL[2] initialAttributes;
      set OS0HM001.OS0HMQTL[2] initialAttributes;
      set OS0HM001.OS0HMRML[2] initialAttributes;
      return;
    else
      converseLib.validationFailed(712); /* not valid from this screen*/
      return;
    end
  end
  ;
   /* /removed delete function 03/24/98 wleong*/
   /* IF EZEAID IS PF24;                /* delete*/
   /* OS0HS85;                        /* delete item from prepack*/
   /* EZERTN;*/
   /* END;*/
  ;
  if (converseVar.eventKey is enter) /* validate and show next item*/
    OS0HW00.OS0HWSPG = OS0HW00.XXXTSPAG; /* save cur page id*/
    OS0HW00.OS0HWSTM = OS0HW00.OS0HWPRD; /* save cur item id*/
    OS0HS90(); /* edit map*/
    if (OS0HW00.OS0HWERR == "Y") /* error exists*/
      if (OS0HW00.OS0HWSPG == OS0HW00.XXXTSPAG) /* current page id*/
        /* NEXT SENTENCE*/
      else
        OS0HW00.XXXTSPAG = OS0HW00.OS0HWSPG; /* restore cur page id*/
        OS0HS6C(); /* read current ts page*/
      end
      OS0HW00.OS0HWPRD = OS0HW00.OS0HWSTM; /* restore cur item id*/
    end
    return;
  end
  ;
  converseLib.validationFailed(645); /* invalid pfkey*/
  OS0HW00.OS0HWERR = "Y";
  return;
  ;
  ;
  ;
end // end OS0HS60

// SCROLL BACKWARD
Function OS0HS65()
  ;
  ;
        /* Scroll Backwards ITEM*/
  ;
   /* os0hwitm is the concatenation of ts page and item sub*/
  ;
  ;
  OS0HW00.OS0HWIX3 = 0; /* map index*/
  ;
  sysVar.arrayIndex = 1;
  ;
  if (OS0HW00.OS0HWITM in OS0HW02.OS0HWITM) /* pg/itm in table*/
    /* NEXT SENTNECE*/
  end
  ;
  if (sysVar.arrayIndex == 0 /* item not in table*/
   || sysVar.arrayIndex == 1) /* or already at 1st page*/
    OS0HW00.OS0HWERR = "Y";
    converseLib.validationFailed(643); /* cannot scroll backward*/
    return;
  end
  ;
   /* IF OS0HW00.XXXTSPAG > OSWREC.OSWTSF1M;      /* exceeded max page*/
                                  /* OS0HW00.XXXTSPAG = OS0HW00.XXXTSPAG -*/
                                   /* 2; /* then fix paging problem*/
     /* OS0HW00.OS0HWIX3 = EZETST - 1;*/
   /* ELSE;*/
  OS0HW00.OS0HWIX3 = sysVar.arrayIndex - 1;
   /* END;*/
  ;
   /* current page in table equals current temp storage page*/
  ;
  if (OS0HW02.OS0HWPAG[OS0HWIX3] == OS0HW00.XXXTSPAG)
    /* NEXT SENTNECE*/
  else
     /* move current page in working storage table*/
     /* to temp storage page(xxxtspage) before read*/
    OS0HW00.XXXTSPAG = OS0HW02.OS0HWPAG[OS0HWIX3];
    OS0HS6C(); /* READ TS QUEUE PAGE*/
  end
  ;
     /* current page/item*/
  OS0HW00.OS0HWPRD = OS0HW02.OS0HWSUB[OS0HWIX3];
  ;
  OS0HS6C(); /* MOVE DETAIL TO MAP*/
  OS0HS2B(); /* MOVE DETAIL TO MAP*/
  OS0HS31(); /* reset attributes*/
  ;
  ;
  ;
end // end OS0HS65

// PURGE TS QUEUE
Function OS0HS6A()
  ;
    /* PURGE TEMPORARY STORAGE QUEUE*/
  ;
  ;
  TA5REC.TA5APPID = "OS0H"; /* applic id*/
  ;
  TA5REC.TA5FNCCD = "P"; /* function code 'p' = purge*/
  ;
  call "TA0050" (OSPREC, TA5REC) {isNoRefresh = yes, isExternal = yes};
  ;
   /* * * * * * * * * * * * * * * * * * * * * * * **/
  ;
    /* note: return code from TA0050 is not*/
          /* checked here in the purge routine*/
          /* 'coz it doesn't matter if the*/
          /* purging is ok or not.  Also, if*/
          /* it was unsuccessful, the error*/
          /* is posted in TA0050.*/
  ;
   /* * * * * * * * * * * * * * * * * * * * * * * **/
  ;
  ;
  ;
end // end OS0HS6A
// READ NEXT TS QUEUE RECORD
Function OS0HS6C()
  ;
   /* Obtain next page of data to display.*/
  ;
  ;
  set OSPREC empty;
  ;
  OS0HM001.OS0HMPRC = "OS0HS6C"; /* Module identification*/
  OSPREC.OSPTSLEN = OS0HW00.XXXTSLEN; /* Temporary storage length*/
  TA5REC.TA5APPID = OS0HW00.TA5APPID; /* Application identification*/
  TA5REC.TA5TSQIX = OS0HW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (OSPREC, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  if (TA5REC.TA5RTNCD == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "OS0HS6C";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    OMWREC.OMWORDN = OP1REC.OP1CUOID; /* display cust ord id*/
    OMWREC.OMWSORDN = OP1REC.OP1NORID; /* display nike ord id*/
    TA1REC.TA1TBLKE = OMWREC.OMWORD; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TAEREC.TAEDESC2 = "PROBLEM READING TEMP STORAGE";
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = COMMAREA.CACURRAP; /* current application*/
    try
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
    end
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
    OS0HSZB(); /* force dxfr out*/
  end
  ;
  if (OSPREC.OSPMORE[1] == "2"
   || OSPREC.OSPMORE[2] == "2"
   || OSPREC.OSPMORE[3] == "2"
   || OSPREC.OSPMORE[4] == "2"
   || OSPREC.OSPMORE[5] == "2"
   || OSPREC.OSPMORE[6] == "2"
   || OSPREC.OSPMORE[7] == "2"
   || OSPREC.OSPMORE[8] == "2"
   || OSPREC.OSPMORE[9] == "2"
   || OSPREC.OSPMORE[10] == "2"
   || OSPREC.OSPMORE[11] == "2"
   || OSPREC.OSPMORE[12] == "2")
    if (converseVar.eventKey is pf8)
      OS0HW00.XXXTSPAG = OS0HW00.XXXTSPAG + 1;
      if (OS0HW00.XXXTSPAG > OSWREC.OSWTSF1M)
        OS0HW00.XXXTSPAG = OS0HW00.XXXTSPAG - 2;
        converseLib.validationFailed(644);
        OS0HW00.OS0HWERR = "Y";
      end
    else
      if (converseVar.eventKey is pf7)
        OS0HW00.XXXTSPAG = OS0HW00.XXXTSPAG - 1;
        if (OS0HW00.XXXTSPAG < OSWREC.OSWTSF1M)
          converseLib.validationFailed(643);
          OS0HW00.OS0HWERR = "Y";
        end
      end
    end
    OS0HM001.OS0HMPRC = "OS0HS6C"; /* Module identification*/
    OSPREC.OSPTSLEN = OS0HW00.XXXTSLEN; /* Temporary storage length*/
    TA5REC.TA5APPID = OS0HW00.TA5APPID; /* Application id*/
    TA5REC.TA5TSQIX = OS0HW00.XXXTSPAG; /* Page number*/
    TA5REC.TA5FNCCD = "R"; /* Function code*/
    ;
    try
      call "TA0050" (OSPREC, TA5REC) {isNoRefresh = yes, isExternal = yes};
    end /* Temporary storage*/
    if (TA5REC.TA5RTNCD == 0)
       /* next sentence*/
    else
      TA1REC.TA1LOCAT[1] = "OS0HS6C";
      TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
      TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
      OMWREC.OMWORDN = OP1REC.OP1CUOID; /* display cust ord id*/
      OMWREC.OMWSORDN = OP1REC.OP1NORID; /* display nike ord id*/
      TA1REC.TA1TBLKE = OMWREC.OMWORD; /* first row, first rec*/
      TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
      TAEREC.TAEDESC2 = "PROBLEM READING TEMP STORAGE";
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = COMMAREA.CACURRAP; /* current application*/
      try
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
      end
      COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
      OS0HSZB(); /* force dxfr out*/
    end
  end
  ;
  ;
end // end OS0HS6C

// UPDATE TEMPORARY STORAGE
Function OS0HS6D()
  ;
   /* Update the page in temporary storage.*/
  ;
  ;
  OS0HM001.OS0HMPRC = "OS0HS6D"; /* Module identification*/
  OSPREC.OSPTSLEN = OS0HW00.XXXTSLEN; /* Temporary storage length*/
  TA5REC.TA5APPID = OS0HW00.TA5APPID; /* Application identification*/
  TA5REC.TA5TSQIX = OS0HW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "U"; /* Function code*/
  ;
  try
    call "TA0050" (OSPREC, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  if (TA5REC.TA5RTNCD == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[1] = "OS0HS6D";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    OMWREC.OMWORDN = OP1REC.OP1CUOID; /* display cust ord id*/
    OMWREC.OMWSORDN = OP1REC.OP1NORID; /* display nike ord id*/
    TA1REC.TA1TBLKE = OMWREC.OMWORD; /* first row, first rec*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    TAEREC.TAEDESC2 = "PROBLEM UPDATING TEMP STORAGE";
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1FUNC = "RETN";
    TA1REC.TA1PGMNM = COMMAREA.CACURRAP; /* current application*/
    try
      call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
    end
    COMMAREA.CA-USER-WORKAREA-4K = " "; /* clear user commarea*/
    OS0HSZB(); /* force dxfr out*/
  end
  ;
  ;
  ;
  ;
end // end OS0HS6D

// CREATE PACKAGE
Function OS0HS75()
  ;
         /* PF10 computes package size and updates database*/
  ;
  if (OMWREC.OMWCHGFL == "Y" /* change mode*/
   || OMWREC.OMWPF2CH == "Y") /* temp change mode*/
     /* next sentence*/
  else
    OS0HW00.OS0HWERR = "Y"; /* error exist*/
    converseLib.validationFailed(684); /* cannot update unless in change mode*/
    return;
  end
  ;
  ;
      /* build pwsrec for pk4420 (carton type calculation)*/
  ;
  OS0HW00.OS0HWITC = 0; /* item count*/
  ;
  OS0HS77(); /* build pwsrec*/
  ;
  if (OS0HW00.OS0HWERR == "Y") /* error exist*/
    return;
  end
  ;
  if (OP1REC.XPACD != "MS")
    if (OS0HW00.OS0HWITC > 0) /* item count*/
      if (OS0HW00.XWHCD == "51")
        PWSREC.YNTCD = "00"; /* default ynt code*/
      else
        OS0HS78(); /* compute carton type*/
        if (PWSREC.PWSRTNCD == 0)
          OS0HS7G(); /* test carton size*/
        else
          OS0HS6C(); /* get back to beginning*/
          return;
        end
      end
    end
  end
  ;
  if (OS0HW00.OS0HWERR == "Y")
    return;
  end
  ;
             /* update database*/
  ;
  XX0XS01(); /* get current date and time*/
  ;
  OS0HW00.XXXTSPAG = OSWREC.OSWTSF1P; /* begin 1st page*/
  OS0HW00.OS0HWIXM = OSWREC.OSWTSF1S; /* 1st item*/
  ;
  OS0HW00.OS0HWPSX = 1;
  ;
  OS0HS05(); /* get first ts page*/
  ;
  OS0HW00.OS0HWEOP = "N"; /* end of pages flag*/
  ;
  while (OS0HW00.OS0HWEOP == "N")
    if (OSPREC.OSNPKGNB[OS0HWIXM] == OSWREC.OSNPKGNB)
      OS0HS79(); /* update database*/
    end
    OS0HW00.OS0HWIXM = OS0HW00.OS0HWIXM + 1;
    if (OS0HW00.OS0HWIXM == 13)
      OS0HW00.OS0HWIXM = 1;
      OS0HW00.XXXTSPAG = OS0HW00.XXXTSPAG + 1;
      if (OS0HW00.XXXTSPAG >= OSWREC.OSWTSF1M)
        OS0HW00.OS0HWEOP = "Y"; /* end of pages flag*/
      else
        OS0HS6C(); /* read next ts page*/
        OS0HS81(); /* read next ts page*/
      end
    end
  end
  ;
  OS0HS6A(); /* purge temp storage*/
  ;
          /* transfer to os0g*/
  ;
  OMWREC.OMWPPEXF = "Y"; /* prepack exist flag*/
  OSWREC.OSWOMWGP = OMWREC.OMWSGRP;
  COMMAREA.CA-USER-WORKAREA-4K = OSWREC.OSWOMWGP;
  COMMAREA.CAMSG = "PACKAGE HAS BEEN CREATED";
  COMMAREA.CAFRMAPP = COMMAREA.CACURRAP;
  COMMAREA.CACURRAP = "OS0G";
  sysVar.transferName = COMMAREA.CACURRAP;
  transfer to program sysVar.transferName passing COMMAREA; /* dxfer to os0g*/
  ;
  ;
  ;
  ;
  ;
end // end OS0HS75

// BUILD PWSREC
Function OS0HS77()
  ;
        /* Build pwsrec for call to compute carton type*/
  ;
  ;
  set PWSREC empty;
  ;
  OS0HW00.OS0HWUPC = 0; /* tally for units p/ctn*/
  ;
  OS0HS05(); /* get 1st ts page for package*/
  ;
   /* Start populating pwsrec from first valid tsq item*/
   /* (not marked for deletion) until next package or*/
   /* end of ts queue*/
  ;
  OS0HW00.OS0HWSPG = OS0HW00.XXXTSPAG; /* save cur page*/
  OS0HW00.OS0HWSTM = OS0HW00.OS0HWPRD; /* save cur item*/
  ;
   /* move pwsrec record header information*/
  ;
  PWSREC.KUCCOID = OS0HW00.OS0HWCOD;
  ;
  PWSREC.OP1PARTN = OS0HW00.OP1PARTN;
  ;
  PWSREC.OP1CUOID = OS0HW00.OS0HWCID;
  ;
  PWSREC.OP1NORID = OS0HW00.OS0HWNID;
  ;
  PWSREC.XWHCD = OS0HW00.XWHCD;
  ;
  PWSREC.XGPCD = OS0HW00.XGPCD;
  ;
   /* osprec may not have been updated for first current if came*/
   /* from os0g with no package # and pressed pf10 to create new*/
   /* package.*/
  ;
   /* first item always qualifies as current package (from os0g)*/
  ;
  OS0HW00.XXXTSPAG = OSWREC.OSWTSF1P; /* cur ts page*/
  ;
  OS0HW00.OS0HWTIX = OSWREC.OSWTSF1S; /* cur ts item*/
  ;
  OS0HW00.OS0HWPSX = 0; /* pwsrec index*/
  ;
  OS0HW00.OS0HWEOP = "N"; /* end of page*/
  ;
  while (OS0HW00.OS0HWEOP == "N")
    if (OSPREC.OSNPKGNB[OS0HWTIX] == OSWREC.OSNPKGNB) /* ts pkg = pkg sel*/
      OS0HS7A(); /* test delete indicator*/
      if (OS0HW00.OS0HWERR == "Y") /* error exist*/
        return;
      end
    else
      if (OSPREC.OSNPKGNB[OS0HWTIX] < OSWREC.OSNPKGNB) /* ts pkg lt pkg sel*/
         /* next sentence*/
      else
        OS0HW00.OS0HWEOP = "Y"; /* end of page*/
      end
    end
    if (OS0HW00.OS0HWEOP == "N")
      OS0HW00.OS0HWTIX = OS0HW00.OS0HWTIX + 1;
      OS0HS7B(); /* test position on page/item*/
    end
  end
  ;
  OS0HW00.XXXTSPAG = OS0HW00.OS0HWSPG; /* current page*/
  OS0HW00.OS0HWPRD = OS0HW00.OS0HWSTM; /* current item*/
  ;
  ;
  ;
end // end OS0HS77

// COMPUTE CARTON TYPE
Function OS0HS78()
  ;
          /* Compute carton type*/
  ;
  ;
  try
    call "PK4420" (SQLCA, PWSREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (SQLCA.VAGen_SQLCODE == -911) /* db busy*/
    OS0HW00.OS0HWERR = "Y";
    converseLib.validationFailed(010); /* database busy try again*/
    return;
  end
  ;
   /* osrrec.osrrtncd is passed from call*/
  ;
   /* values:   0 - carton computed successfully*/
             /* 1 - COBOL table size error*/
             /* 2 - required database record not found*/
             /* 3 - no cartons large enough for packages*/
             /* 4 - products do not have matching carton types*/
             /* 5 - product/size not set up with a carton class*/
             /* 6 - product is not set up with carton class rec*/
             /* 7 - product needs to be set up with a hang cart*/
             /* 8 - no items passed to pk4420*/
             /* 9 - no prepack quantities entered for item*/
  ;
   /* ------------------------------------------------------------*/
  ;
  if (PWSREC.PWSRTNCD == 0) /* good return*/
    return;
  end
  ;
  sysVar.arrayIndex = 1;
  ;
  if (PWSREC.PWSERRLN in PWSREC.OP2LNINB)
     /* next sentence*/
  end
  ;
  OS0HW00.OS0HWF4 = "-"; /* filler*/
  OS0HW00.OS0HWF5 = "-"; /* filler*/
  ;
  if (sysVar.arrayIndex == 0
   || PWSREC.OP2LNINB[sysVar.arrayIndex] == 0)
    OS0HW00.OS0HWSCD = "ALL ITEMS  --- "; /* style-color-dim*/
  else
    OS0HW00.OS0HWSTL = "STYLE: "; /* style literal*/
    OS0HW00.OS0HWSTY = PWSREC.SY1STNBR[sysVar.arrayIndex];
    OS0HW00.OS0HWCLR = PWSREC.SY2CLRID[sysVar.arrayIndex];
    OS0HW00.OS0HWDIM = PWSREC.XDMCD[sysVar.arrayIndex];
  end
  ;
  ;
  if (PWSREC.PWSRTNCD == 3)
    OS0HW00.OS0HWTXT = " NO CARTONS LARGE ENOUGH - RETRY";
                                   /* msg text*/
    VAGen_EZEMSG = OS0HW00.OS0HWMSG;
    OS0HW00.OS0HWERR = "Y"; /* error exist*/
    return;
  end
  ;
  if (PWSREC.PWSRTNCD == 4)
    OS0HW00.OS0HWTXT = " PACKAGE REQUIRES MATCHING CARTON TYPES";
    VAGen_EZEMSG = OS0HW00.OS0HWMSG;
    OS0HW00.OS0HWERR = "Y"; /* error exist*/
    return;
  end
  ;
  if (PWSREC.PWSRTNCD == 5)
    OS0HW00.OS0HWTXT = " NOT SET UP WITH CARTON CLASS";
    VAGen_EZEMSG = OS0HW00.OS0HWMSG;
    OS0HW00.OS0HWERR = "Y"; /* error exist*/
    return;
  end
  ;
  if (PWSREC.PWSRTNCD == 6)
    OS0HW00.OS0HWTXT = " NOT SET UP WITH CARTON CLASS RECORD";
    VAGen_EZEMSG = OS0HW00.OS0HWMSG;
    OS0HW00.OS0HWERR = "Y"; /* error exist*/
    return;
  end
  ;
  if (PWSREC.PWSRTNCD == 7)
    OS0HW00.OS0HWTXT = " NEEDS HANGING CARTON CLASS"; /* msg text*/
    VAGen_EZEMSG = OS0HW00.OS0HWMSG;
    OS0HW00.OS0HWERR = "Y"; /* error exist*/
    return;
  end
  ;
  if (PWSREC.PWSRTNCD == 9)
    OS0HW00.OS0HWTXT = " NO PRE-PACK QTYS. PRESS ENTER BEFORE PF10";
    VAGen_EZEMSG = OS0HW00.OS0HWMSG;
    OS0HW00.OS0HWERR = "Y"; /* error exist*/
    return;
  end
  ;
  TA1REC.TA1LOC = "OS0HS78 - CALL PK4420";
  TA1REC.TA1DBASE = "DORDER  "; /* database*/
  TA1REC.TA1TBLVU = "VCSPRP01"; /* view*/
  TA1REC.TA1TBLKE = PWSREC.PWSKEY; /* table key*/
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  OS0HS6A(); /* purge ts queue*/
  ;
   /* Transfer back to OS0G*/
  ;
  COMMAREA.CAMSG = "UNABLE TO PROCESS REQUEST CONTACT USER ANALYST";
  COMMAREA.CAFRMAPP = COMMAREA.CACURRAP;
  COMMAREA.CACURRAP = "OS0G";
  sysVar.transferName = COMMAREA.CACURRAP;
  transfer to program sysVar.transferName passing COMMAREA; /* ; Exit to display map*/
  ;
  ;
  ;
end // end OS0HS78

// PROCESS UPDATES
Function OS0HS79()
  ;
            /* Update prepack database*/
  ;
  ;
  if (OSPREC.OSPDELET[OS0HWIXM] == "*") /* csr has not deleted*/
    return;
  end
  ;
    /* read item before update*/
  ;
  set OSNREC empty;
  ;
  OSNREC.XWHCD = OP1REC.XWHCD;
  OSNREC.OP1PARTN = OP1REC.OP1PARTN;
  OSNREC.OP1CUOID = OP1REC.OP1CUOID;
  OSNREC.OP1NORID = OP1REC.OP1NORID;
  OSNREC.OP2LNINB = OSPREC.OP2LNINB[OS0HWIXM];
  ;
  try
    call "IO5650" ("S ", SQLCA, OSNREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 0    /* Call successful*/
   || SQLCA.VAGen_SQLCODE == -811 /* Call successful/mult rows*/
   || SQLCA.VAGen_SQLCODE == 100) /* Call successful Rec not found*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* database busy*/
      converseLib.validationFailed(010); /* database busy*/
      OS0HW00.OS0HWERR = "Y";
      return;
    else
      TA1REC.TA1MAP = "OS0HM001"; /* MAP NAME*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1PGMNM = OS0HM001.OS0HMPRC; /* Program Name*/
      TA1REC.TA1LOC = "OS0HS79 - READ BEFORE UPDATE";
      TA1REC.TA1DBASE = "DORDER  "; /* DATABASE NAME*/
      TA1REC.TA1TBLVU = "VCSPRP01"; /* VIEW NAME*/
      OMWREC.OMWORDN = OP1REC.OP1CUOID; /* display cust ord id*/
      OMWREC.OMWSORDN = OP1REC.OP1NORID; /* display sub order id*/
      TA1REC.TA1TBLKE = OMWREC.OMWORD;
      ;
      OS0HSZA(); /* db2 err routine*/
      OS0HSZB(); /* force dxfr out*/
    end
  end
  ;
  if (OSPREC.OSPDELET[OS0HWIXM] == "D" /* delete status*/
   && SQLCA.VAGen_SQLCODE == 100)      /* and not found*/
    return;
  end
  ;
  if (OSPREC.OSPDELET[OS0HWIXM] == "D") /* delete status*/
     /* next sentence                  ; and found*/
  else
    OS0HS7R(); /* accum qtys for cur item*/
    ;
    OS0HS7D(); /* populate osnrec*/
    ;
    OS0HW00.OS0HWPSX = OS0HW00.OS0HWPSX + 1; /* incr pwsrec index*/
  end
  ;
  OS0HS7E(); /* update prepack database*/
  ;
  ;
  ;
  ;
end // end OS0HS79

// TEST DELETE INDICATOR
Function OS0HS7A()
  ;
       /* Test osprec item delete indicator*/
  ;
  ;
  if (OSPREC.OSPDELET[OS0HWTIX] == "A" /* allocated item*/
   || OSPREC.OSPDELET[OS0HWTIX] == "P") /* partially alloc item*/
    OS0HW00.OS0HWERR = "Y";
    converseLib.validationFailed(703);
                                   /* can't chg pkg with 'al' or 'pa' items*/
    return;
  end
  ;
  if (OSPREC.OSPDELET[OS0HWTIX] == "D" /* delete from os0h*/
   || OSPREC.OSPDELET[OS0HWTIX] == "*") /* delete from os0g*/
    /* NEXT SENTENCE*/
  else
    OS0HW00.OS0HWPSX = OS0HW00.OS0HWPSX + 1; /* pwsrec index*/
    if (OS0HW00.OS0HWPSX <= 180) /* max items for package*/
      OS0HS8A(); /* move values to pwsrec*/
      if (OSPREC.OSPMORE[OS0HWTIX] == "Y") /* do we have more than 20 sizes*/
        XXXTSPAG = XXXTSPAG + 1; /* add 1 to page*/
        OS0HS6C(); /* get next ts record*/
        OS0HS8A(); /* yes*/
        /* XXXTSPAG = XXXTSPAG - 1;        /* set page back*/
      end
     /* IF OS0HW00.OS0HWERR = 'Y';*/
       /* MOVE 822 TO EZEMNO;        /* prepack qty invalid*/
       /* EZERTN;*/
     /* END;*/
    else
      OS0HW00.OS0HWERR = "Y"; /* error exist*/
      converseLib.validationFailed(702); /* items exceed 180*/
      return;
    end
  end
  ;
  ;
  ;
end // end OS0HS7A

// TEST POSITION ON ITEM/PAGE
Function OS0HS7B()
  ;
   /* READ NEXT PAGE WHEN NECESSARY*/
  ;
  ;
  if (OS0HW00.OS0HWTIX > 12)
    OS0HW00.XXXTSPAG = OS0HW00.XXXTSPAG + 1;
    if (OS0HW00.XXXTSPAG < OSWREC.OSWTSF1M)
      OS0HS6C(); /* READ NEXT TS QUEUE PAGE*/
      OS0HW00.OS0HWTIX = 1;
    else
      OS0HW00.OS0HWEOP = "Y";
      return;
    end
  end
  ;
  if (OSPREC.OSNPKGNB[OS0HWTIX] == OSWREC.OSNPKGNB)
     /* next sentence*/
  end
  ;
  if (OSPREC.SY1STNBR[OS0HWTIX] == " ")
    OS0HW00.OS0HWEOP = "Y";
  end
  ;
  ;
  ;
end // end OS0HS7B

// POPULATE OSNREC
Function OS0HS7D()
  ;
   /* POPULATE CURRENT ITEM PRE-PACK QUANTITIES IN OSNREC*/
  ;
  ;
   /* record header*/
  ;
  OSNREC.XWHCD = OP1REC.XWHCD;
  ;
  OSNREC.OP1PARTN = OP1REC.OP1PARTN;
  ;
  OSNREC.OP1CUOID = OP1REC.OP1CUOID;
  ;
  OSNREC.OSNPKGNB = OSWREC.OSNPKGNB;
  ;
  OSNREC.XPACD = OP1REC.XPACD;
  ;
  OSNREC.KUFMIXBL = OS0HW00.KUFMIXBL;
  ;
  OSNREC.KUCUNTCS = OS0HW00.OS0HWUPC;
  ;
  OSNREC.OSNTIQTY = OS0HW00.OSNTIQTY;
  ;
  OSNREC.YNTCD = PWSREC.YNTCD;
  ;
  OSNREC.XGPCD = OP1REC.XGPCD;
  ;
  OSNREC.SY1STNBR = PWSREC.SY1STNBR[OS0HWPSX];
  ;
  OSNREC.SY2CLRID = PWSREC.SY2CLRID[OS0HWPSX];
  ;
  OSNREC.XDMCD = PWSREC.XDMCD[OS0HWPSX];
  ;
  OSNREC.PKTBACTI = OS0HW00.PKTBACTI;
  ;
   /* ------------------------------------------------------------*/
   /* RECORD DETAIL*/
   /* ------------------------------------------------------------*/
  ;
  OSNREC.PKTPPQTY[01] = PWSREC.PWSPPQ01[OS0HWPSX];
  OSNREC.PKTPPQTY[02] = PWSREC.PWSPPQ02[OS0HWPSX];
  OSNREC.PKTPPQTY[03] = PWSREC.PWSPPQ03[OS0HWPSX];
  OSNREC.PKTPPQTY[04] = PWSREC.PWSPPQ04[OS0HWPSX];
  OSNREC.PKTPPQTY[05] = PWSREC.PWSPPQ05[OS0HWPSX];
  ;
  OSNREC.PKTPPQTY[06] = PWSREC.PWSPPQ06[OS0HWPSX];
  OSNREC.PKTPPQTY[07] = PWSREC.PWSPPQ07[OS0HWPSX];
  OSNREC.PKTPPQTY[08] = PWSREC.PWSPPQ08[OS0HWPSX];
  OSNREC.PKTPPQTY[09] = PWSREC.PWSPPQ09[OS0HWPSX];
  OSNREC.PKTPPQTY[10] = PWSREC.PWSPPQ10[OS0HWPSX];
  ;
  OSNREC.PKTPPQTY[11] = PWSREC.PWSPPQ11[OS0HWPSX];
  OSNREC.PKTPPQTY[12] = PWSREC.PWSPPQ12[OS0HWPSX];
  OSNREC.PKTPPQTY[13] = PWSREC.PWSPPQ13[OS0HWPSX];
  OSNREC.PKTPPQTY[14] = PWSREC.PWSPPQ14[OS0HWPSX];
  OSNREC.PKTPPQTY[15] = PWSREC.PWSPPQ15[OS0HWPSX];
  ;
  OSNREC.PKTPPQTY[16] = PWSREC.PWSPPQ16[OS0HWPSX];
  OSNREC.PKTPPQTY[17] = PWSREC.PWSPPQ17[OS0HWPSX];
  OSNREC.PKTPPQTY[18] = PWSREC.PWSPPQ18[OS0HWPSX];
  OSNREC.PKTPPQTY[19] = PWSREC.PWSPPQ19[OS0HWPSX];
  OSNREC.PKTPPQTY[20] = PWSREC.PWSPPQ20[OS0HWPSX];
  ;
  OSNREC.PKTPPQTY[21] = PWSREC.PWSPPQ21[OS0HWPSX];
  OSNREC.PKTPPQTY[22] = PWSREC.PWSPPQ22[OS0HWPSX];
  OSNREC.PKTPPQTY[23] = PWSREC.PWSPPQ23[OS0HWPSX];
  OSNREC.PKTPPQTY[24] = PWSREC.PWSPPQ24[OS0HWPSX];
  OSNREC.PKTPPQTY[25] = PWSREC.PWSPPQ25[OS0HWPSX];
  ;
  OSNREC.PKTPPQTY[26] = PWSREC.PWSPPQ26[OS0HWPSX];
  OSNREC.PKTPPQTY[27] = PWSREC.PWSPPQ27[OS0HWPSX];
  OSNREC.PKTPPQTY[28] = PWSREC.PWSPPQ28[OS0HWPSX];
  OSNREC.PKTPPQTY[29] = PWSREC.PWSPPQ29[OS0HWPSX];
  OSNREC.PKTPPQTY[30] = PWSREC.PWSPPQ30[OS0HWPSX];
  ;
  OSNREC.PKTPPQTY[31] = PWSREC.PWSPPQ31[OS0HWPSX];
  OSNREC.PKTPPQTY[32] = PWSREC.PWSPPQ32[OS0HWPSX];
  OSNREC.PKTPPQTY[33] = PWSREC.PWSPPQ33[OS0HWPSX];
  OSNREC.PKTPPQTY[34] = PWSREC.PWSPPQ34[OS0HWPSX];
  OSNREC.PKTPPQTY[35] = PWSREC.PWSPPQ35[OS0HWPSX];
  ;
  OSNREC.PKTPPQTY[36] = PWSREC.PWSPPQ36[OS0HWPSX];
  OSNREC.PKTPPQTY[37] = PWSREC.PWSPPQ37[OS0HWPSX];
  OSNREC.PKTPPQTY[38] = PWSREC.PWSPPQ38[OS0HWPSX];
  OSNREC.PKTPPQTY[39] = PWSREC.PWSPPQ39[OS0HWPSX];
  OSNREC.PKTPPQTY[40] = PWSREC.PWSPPQ40[OS0HWPSX];
  ;
   /* ------------------------------------------------------------*/
    /* SET CHANGE DATE AND TIME*/
   /* ------------------------------------------------------------*/
  ;
  OSNREC.ZZZCHGDT = XX0XW01.XX0XWDAT;
  OSNREC.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  ;
  ;
  ;
end // end OS0HS7D

// UPDATE PRE-PACK DATABASE
Function OS0HS7E()
  ;
        /* UPDATE PREPACK DATABASE*/
  ;
  ;
  OSNREC.ZZZCHGCT = OSPREC.ZZZCHGCT[OS0HWIXM];
  ;
  if (OSPREC.OSPDELET[OS0HWIXM] == "D") /* DELETE FROM OS0H*/
    try
      call "IO5650" ("D ", SQLCA, OSNREC) {isNoRefresh = yes, isExternal = yes};
    end
  else
    if (SQLCA.VAGen_SQLCODE == 0) /* RECORD EXISTS*/
      try
        call "IO5650" ("U ", SQLCA, OSNREC) {isNoRefresh = yes, isExternal = yes};
      end
    else
      OSNREC.ZZZSDT = XX0XW01.XX0XWDAT;
      OSNREC.ZZZSTM = XX0XW01.XX0XWTIM;
      try
        call "IO5650" ("A ", SQLCA, OSNREC) {isNoRefresh = yes, isExternal = yes};
      end
    end
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* Call successful*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* database busy*/
      converseLib.validationFailed(010); /* database busy*/
      OS0HW00.OS0HWERR = "Y";
      return;
    else
      TA1REC.TA1MAP = "OS0HM001"; /* map name*/
      TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
      TA1REC.TA1FUNC = "RETN"; /* Termination function*/
      TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
      TA1REC.TA1LOC = "OS0HS7E";
      TA1REC.TA1DBASE = "DORDER  "; /* DATABASE NAME*/
      TA1REC.TA1TBLVU = "VCSPRP01"; /* VIEW NAME*/
      OMWREC.OMWORDN = OP1REC.OP1CUOID; /* display cust ord id*/
      OMWREC.OMWSORDN = OP1REC.OP1NORID; /* display sub order id*/
      TA1REC.TA1TBLKE = OMWREC.OMWORD;
      OS0HSZA(); /* db2 err routine*/
      OS0HSZB(); /* force dxfr out*/
    end
  end
  ;
  ;
  ;
  ;
end // end OS0HS7E

// TEST CARTON SIZE
Function OS0HS7G()
  ;
         /* Update prepack database*/
  ;
  ;
  set KUCREC empty;
  set SQLCA empty;
  ;
  KUCREC.KUCCOID = OP1REC.KUCCOID;
  ;
  try
    call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (SQLCA.VAGen_SQLCODE != 0) /* not a good hit*/
    return; /* do not compare carton types*/
  end
  ;
  if (KUCREC.CU-MAX-FTWR-YNT-CD == " ") /* no ctn type/do not compare*/
    return;
  end
  ;
  if (KUCREC.CU-MAX-FTWR-YNT-CD >= PWSREC.YNTCD) /* this is okay*/
    return;
  else
    converseLib.validationFailed(693); /* exceeds customer's ctn size*/
    OS0HW00.OS0HWERR = "Y"; /* error exist*/
    OS0HM001.YNTCD = OS0HM001.YNTCD;
    set OS0HM001.YNTCD bold;
  end
  ;
  ;
end // end OS0HS7G

// ACCUMULATE ON ORDER QTYS
Function OS0HS7R()
  ;
   /* OS0HS7R - ACCUMULATE ON ORDER QTYS*/
  ;
  ;
  OS0HW00.OSNTIQTY = 0;
  ;
  OS0HW00.OSNTIQTY = OS0HW00.OSNTIQTY + OSPREC.OSPPPQ01[OS0HWIXM];
  OS0HW00.OSNTIQTY = OS0HW00.OSNTIQTY + OSPREC.OSPPPQ02[OS0HWIXM];
  OS0HW00.OSNTIQTY = OS0HW00.OSNTIQTY + OSPREC.OSPPPQ03[OS0HWIXM];
  OS0HW00.OSNTIQTY = OS0HW00.OSNTIQTY + OSPREC.OSPPPQ04[OS0HWIXM];
  OS0HW00.OSNTIQTY = OS0HW00.OSNTIQTY + OSPREC.OSPPPQ05[OS0HWIXM];
  ;
  OS0HW00.OSNTIQTY = OS0HW00.OSNTIQTY + OSPREC.OSPPPQ06[OS0HWIXM];
  OS0HW00.OSNTIQTY = OS0HW00.OSNTIQTY + OSPREC.OSPPPQ07[OS0HWIXM];
  OS0HW00.OSNTIQTY = OS0HW00.OSNTIQTY + OSPREC.OSPPPQ08[OS0HWIXM];
  OS0HW00.OSNTIQTY = OS0HW00.OSNTIQTY + OSPREC.OSPPPQ09[OS0HWIXM];
  OS0HW00.OSNTIQTY = OS0HW00.OSNTIQTY + OSPREC.OSPPPQ10[OS0HWIXM];
  ;
  OS0HW00.OSNTIQTY = OS0HW00.OSNTIQTY + OSPREC.OSPPPQ11[OS0HWIXM];
  OS0HW00.OSNTIQTY = OS0HW00.OSNTIQTY + OSPREC.OSPPPQ12[OS0HWIXM];
  OS0HW00.OSNTIQTY = OS0HW00.OSNTIQTY + OSPREC.OSPPPQ13[OS0HWIXM];
  OS0HW00.OSNTIQTY = OS0HW00.OSNTIQTY + OSPREC.OSPPPQ14[OS0HWIXM];
  OS0HW00.OSNTIQTY = OS0HW00.OSNTIQTY + OSPREC.OSPPPQ15[OS0HWIXM];
  ;
  OS0HW00.OSNTIQTY = OS0HW00.OSNTIQTY + OSPREC.OSPPPQ16[OS0HWIXM];
  OS0HW00.OSNTIQTY = OS0HW00.OSNTIQTY + OSPREC.OSPPPQ17[OS0HWIXM];
  OS0HW00.OSNTIQTY = OS0HW00.OSNTIQTY + OSPREC.OSPPPQ18[OS0HWIXM];
  OS0HW00.OSNTIQTY = OS0HW00.OSNTIQTY + OSPREC.OSPPPQ19[OS0HWIXM];
  OS0HW00.OSNTIQTY = OS0HW00.OSNTIQTY + OSPREC.OSPPPQ20[OS0HWIXM];
  ;
  ;
  ;
end // end OS0HS7R

// PROCESS PF12 PRESSED
Function OS0HS80()
  ;
         /* PF12 VALIDATES CURRENT DISPLAY WITHOUT UPDATING*/
  ;
  ;
  if (OMWREC.OMWCHGFL == "Y" /* change mode*/
   || OMWREC.OMWPF2CH == "Y") /* temp change mode*/
    ;
    OS0HSB1(); /* validate quantities*/
    ;
    OS0HSB2(); /* validate mix box flag*/
    ;
  end
  ;
  ;
  ;
end // end OS0HS80

// check for page 2
Function OS0HS81()
  ;
         /* check for the page with sizes 21-40*/
  ;
  ;
  if (OSPREC.OSPMORE[1] == "2"
   || OSPREC.OSPMORE[2] == "2"
   || OSPREC.OSPMORE[3] == "2"
   || OSPREC.OSPMORE[4] == "2"
   || OSPREC.OSPMORE[5] == "2"
   || OSPREC.OSPMORE[6] == "2"
   || OSPREC.OSPMORE[7] == "2"
   || OSPREC.OSPMORE[8] == "2"
   || OSPREC.OSPMORE[9] == "2"
   || OSPREC.OSPMORE[10] == "2"
   || OSPREC.OSPMORE[11] == "2"
   || OSPREC.OSPMORE[12] == "2")
    OS0HW00.XXXTSPAG = OS0HW00.XXXTSPAG + 1;
  end
  ;
  ;
end // end OS0HS81

// MOVE VALUES TO PWSREC DETAILS
Function OS0HS8A()
  ;
         /* MOVE VALUES TO PWSREC*/
  ;
  ;
  OS0HW00.OS0HWITC = OS0HW00.OS0HWITC + 1; /* item count*/
  ;
   /* find size bucket locations*/
  ;
  OS0HSZ2(); /* read size scale db*/
  ;
   /* move values from osprec to pwsrec*/
  ;
  OS0HS8B(); /* move ospszi?? to work table*/
  ;
  OS0HS8C(); /* move ospppq?? to work table*/
  ;
  if (OSPREC.OSPMORE[OS0HWTIX] == "2")
    /* NEXT SENTENCE*/
  else
    set OS0HW05 empty;
  end
  ;
  OS0HW00.OS0HWIX3 = 1; /* map index*/
  ;
  while (OS0HW00.OS0HWIX3 <= 20)
    sysVar.arrayIndex = 1;
    if (OS0HW04.SY4IDDSC[OS0HWIX3] in SY4REC.SY4IDDSC)
       /* next sentence*/
    end
    if (sysVar.arrayIndex == 0) /* size not in sy4rec*/
      TA1REC.TA1LOCAT[1] = "OS0HS8A"; /* type of access*/
      TA1REC.TA1LOCAT[2] = "S "; /* i/o mod*/
      TA1REC.TA1LOCAT[3] = "IO0040"; /* i/o mod*/
      TA1REC.TA1DBASE = "DPROD"; /* data base name*/
      TA1REC.TA1TBLVU = "VSCALE01"; /* table view*/
      TA1REC.TA1TBLKE = SY4REC.SY4SZSCL; /* key value*/
      TA1REC.TA1FUNC = "RETN"; /* abend func*/
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* synpoint rollback*/
      OS0HSZA(); /* db2 err routine*/
      OS0HSZB(); /* force dxfr out*/
    else
      OS0HW05.PKTPPQTY[sysVar.arrayIndex] = OS0HW04.PKTPPQTY[OS0HWIX3];
     /* OS0HW00.OS0HWUPC = OS0HW00.OS0HWUPC + OS0HW04.PKTPPQTY(OS0HWIX3);*/
      OS0HW00.OS0HWUPC = OS0HW00.OS0HWUPC + OS0HM001.PKTPPQTY[OS0HWIX3];
    end
    OS0HW00.OS0HWIX3 = OS0HW00.OS0HWIX3 + 1;
    if (OS0HW00.OS0HWIX3 == 21)
      /* next sentence;*/
    else
      if (OS0HW04.SY4IDDSC[OS0HWIX3] == " ")
        if (SY4REC.SY4SZSCL == "01"
         || SY4REC.SY4SZSCL == "13"
         || SY4REC.SY4SZSCL == "39") /* tcs change 02/10/99*/
          OS0HW00.OS0HWIX3 = OS0HW00.OS0HWIX3 + 20;
        end
      end
    end
  end
  ;
  OS0HW00.OS0HWIX3 = 40;
  ;
  while (OS0HW00.OS0HWIX3 >= 1)
    if (OS0HW05.PKTPPQTY[OS0HWIX3] > 0)
      OS0HW00.PKTBACTI = OS0HW00.OS0HWIX3;
    end
    OS0HW00.OS0HWIX3 = OS0HW00.OS0HWIX3 - 1;
  end
  ;
  PWSREC.OP2LNINB[OS0HWPSX] = OSPREC.OP2LNINB[OS0HWTIX];
  ;
  PWSREC.XDMCD[OS0HWPSX] = OS0HW00.XDMCD;
  ;
  PWSREC.SY1STNBR[OS0HWPSX] = OSPREC.SY1STNBR[OS0HWTIX];
  ;
  PWSREC.SY2CLRID[OS0HWPSX] = OSPREC.SY2CLRID[OS0HWTIX];
  ;
  PWSREC.PWSPPQGP[OS0HWPSX] = OS0HW05.OS0HWPGP;
  ;
  if (OP1REC.XGPCD == "02") /* msr edits for footwear only  01/23/98*/
    if (OS0HW00.XPACD == "MS" || 
    OS0HW00.XPACD == "CU") /* include cu orders for msr edits 10/23/97*/
   /* * tcs change to decrease the carton ratio for eqmt*/
   /* * from 6 to 1 below dated 01/25/1999*/
      if (OS0HW00.OS0HWUPC < 1)
        OS0HW00.OS0HWERR = "Y";
        converseLib.validationFailed(925); /* crtn ratio must be >= 1*/
        return;
      else
        if (OSPREC.SY4SZSCL == "03") /* Infant shoes*/
          if (OS0HW00.OS0HWUPC > 36)
            OS0HW00.OS0HWERR = "Y";
            converseLib.validationFailed(927); /* infant prp must not > 36*/
            return;
          end
        else /* adult/toddler/etc*/
          if (OS0HW00.OS0HWUPC > 24)
            OS0HW00.OS0HWERR = "Y";
            converseLib.validationFailed(926); /* non-infant prp must not > 24*/
            return;
          end
        end
      end
    end
  end
  ;
end // end OS0HS8A

// MOVE OP3IDDSC TO WORK TABLE
Function OS0HS8B()
   /* ------------------------------------------------------------*/
   /* MOVE SCREEN VALUES TO OS0HW04.SY4IDDSC (SIZE DESCRIPTION)*/
   /* ------------------------------------------------------------*/
  ;
  OS0HW04.SY4IDDSC[1] = OSPREC.OSPSZI01[OS0HWTIX];
  OS0HW04.SY4IDDSC[2] = OSPREC.OSPSZI02[OS0HWTIX];
  OS0HW04.SY4IDDSC[3] = OSPREC.OSPSZI03[OS0HWTIX];
  OS0HW04.SY4IDDSC[4] = OSPREC.OSPSZI04[OS0HWTIX];
  OS0HW04.SY4IDDSC[5] = OSPREC.OSPSZI05[OS0HWTIX];
  ;
  OS0HW04.SY4IDDSC[6] = OSPREC.OSPSZI06[OS0HWTIX];
  OS0HW04.SY4IDDSC[7] = OSPREC.OSPSZI07[OS0HWTIX];
  OS0HW04.SY4IDDSC[8] = OSPREC.OSPSZI08[OS0HWTIX];
  OS0HW04.SY4IDDSC[9] = OSPREC.OSPSZI09[OS0HWTIX];
  OS0HW04.SY4IDDSC[10] = OSPREC.OSPSZI10[OS0HWTIX];
  ;
  OS0HW04.SY4IDDSC[11] = OSPREC.OSPSZI11[OS0HWTIX];
  OS0HW04.SY4IDDSC[12] = OSPREC.OSPSZI12[OS0HWTIX];
  OS0HW04.SY4IDDSC[13] = OSPREC.OSPSZI13[OS0HWTIX];
  OS0HW04.SY4IDDSC[14] = OSPREC.OSPSZI14[OS0HWTIX];
  OS0HW04.SY4IDDSC[15] = OSPREC.OSPSZI15[OS0HWTIX];
  ;
  OS0HW04.SY4IDDSC[16] = OSPREC.OSPSZI16[OS0HWTIX];
  OS0HW04.SY4IDDSC[17] = OSPREC.OSPSZI17[OS0HWTIX];
  OS0HW04.SY4IDDSC[18] = OSPREC.OSPSZI18[OS0HWTIX];
  OS0HW04.SY4IDDSC[19] = OSPREC.OSPSZI19[OS0HWTIX];
  OS0HW04.SY4IDDSC[20] = OSPREC.OSPSZI20[OS0HWTIX];
  ;
  ;
  ;
end // end OS0HS8B

// MOVE OSPPPQ?? TO WORK TABLE
Function OS0HS8C()
   /* ------------------------------------------------------------*/
   /* MOVE VALUES FROM OSPREC.OSPPPQTY TO OS0HW04.PKTPPQTY*/
   /* ------------------------------------------------------------*/
  ;
  OS0HW04.PKTPPQTY[01] = OSPREC.OSPPPQ01[OS0HWTIX];
  OS0HW04.PKTPPQTY[02] = OSPREC.OSPPPQ02[OS0HWTIX];
  OS0HW04.PKTPPQTY[03] = OSPREC.OSPPPQ03[OS0HWTIX];
  OS0HW04.PKTPPQTY[04] = OSPREC.OSPPPQ04[OS0HWTIX];
  OS0HW04.PKTPPQTY[05] = OSPREC.OSPPPQ05[OS0HWTIX];
  ;
  OS0HW04.PKTPPQTY[06] = OSPREC.OSPPPQ06[OS0HWTIX];
  OS0HW04.PKTPPQTY[07] = OSPREC.OSPPPQ07[OS0HWTIX];
  OS0HW04.PKTPPQTY[08] = OSPREC.OSPPPQ08[OS0HWTIX];
  OS0HW04.PKTPPQTY[09] = OSPREC.OSPPPQ09[OS0HWTIX];
  OS0HW04.PKTPPQTY[10] = OSPREC.OSPPPQ10[OS0HWTIX];
  ;
  OS0HW04.PKTPPQTY[11] = OSPREC.OSPPPQ11[OS0HWTIX];
  OS0HW04.PKTPPQTY[12] = OSPREC.OSPPPQ12[OS0HWTIX];
  OS0HW04.PKTPPQTY[13] = OSPREC.OSPPPQ13[OS0HWTIX];
  OS0HW04.PKTPPQTY[14] = OSPREC.OSPPPQ14[OS0HWTIX];
  OS0HW04.PKTPPQTY[15] = OSPREC.OSPPPQ15[OS0HWTIX];
  ;
  OS0HW04.PKTPPQTY[16] = OSPREC.OSPPPQ16[OS0HWTIX];
  OS0HW04.PKTPPQTY[17] = OSPREC.OSPPPQ17[OS0HWTIX];
  OS0HW04.PKTPPQTY[18] = OSPREC.OSPPPQ18[OS0HWTIX];
  OS0HW04.PKTPPQTY[19] = OSPREC.OSPPPQ19[OS0HWTIX];
  OS0HW04.PKTPPQTY[20] = OSPREC.OSPPPQ20[OS0HWTIX];
  ;
  ;
  ;
  ;
end // end OS0HS8C

// PROCESS ENTER PRESSED
Function OS0HS90()
  ;
       /* VALIDATE CHANGES WHEN PRESENT OR DISPLAYS NEXT ITEM*/
  ;
  ;
  OS0HW00.OS0HWCHF = "N"; /* reset change flag*/
  OS0HW00.OS0HWFND = "N"; /* reset item found*/
  ;
  if (OMWREC.OMWCHGFL == "Y" /* change mode*/
   || OMWREC.OMWPF2CH == "Y") /* temp change mode*/
    OS0HS9A(); /* compare map to work record*/
    if (OS0HW00.OS0HWCHF == "N") /* no changes made*/
      if (OSPREC.OSPMORE[OS0HWPRD] == "Y")
        OS0HW00.XXXTSPAG = OS0HW00.XXXTSPAG + 1;
        OS0HS6C(); /* get next item*/
        OS0HS2B(); /* get next item*/
      else
        if (OSPREC.OSPMORE[OS0HWPRD] == "2")
          converseLib.validationFailed(713);
          OS0HW00.OS0HWERR = "Y";
        else
          OS0HS9B(); /* get next item*/
        end
      end
    end
  else
    if (OSPREC.OSPMORE[OS0HWPRD] == "Y")
      OS0HW00.XXXTSPAG = OS0HW00.XXXTSPAG + 1;
      OS0HS6C(); /* get next item*/
      OS0HS2B(); /* get next item*/
    else
      if (OSPREC.OSPMORE[OS0HWPRD] == "2")
        converseLib.validationFailed(713);
        OS0HW00.OS0HWERR = "Y";
      else
        OS0HS9B(); /* get next item*/
      end
    end
  end
  ;
  if (OS0HW00.OS0HWERR == "N") /* no errors*/
    if (OS0HW00.OS0HWFND == "Y") /* item found*/
      converseLib.validationFailed(378); /* next product displayed*/
    end
  end
  ;
  OS0HW00.OS0HWCHF = "N"; /* reset change flag*/
  ;
  ;
  ;
end // end OS0HS90

// COMPARE ITEM TO OS0HW01
Function OS0HS9A()
  ;
        /* COMPARE SCREEN ITEM TO HOLD ITEM (OS0HW01)*/
  ;
  ;
  OS0HW00.OS0HWIXM = 1; /* map index*/
  ;
  while (OS0HW00.OS0HWIXM <= 20)
    if (OS0HW01.PKTPPQTY[OS0HWIXM] == OS0HM001.PKTPPQTY[OS0HWIXM])
      /* NEXT SENTENCE*/
    else
      OS0HW00.OS0HWCHF = "Y";
    end
    OS0HW00.OS0HWIXM = OS0HW00.OS0HWIXM + 1;
  end
  ;
  if (OS0HW00.OS0HWCHF == "Y") /* changes made*/
    OS0HSB1(); /* validate qtys*/
  end
  ;
  if (OS0HW01.KUFMIXBL == OS0HM001.KUFMIXBL)
    /* NEXT SENTENCE*/
  else
    OS0HW00.OS0HWCHF = "Y";
    OS0HSB2(); /* validate mix box flag*/
  end
  ;
  ;
     /* os0hs9c populates osprec.osptsrow*/
     /* os0hs6d updates temporary storage*/
  ;
  ;
  if (OS0HW00.OS0HWCHF == "N") /* no changes made*/
    return;
  else
    if (OS0HW00.OS0HWERR == "Y") /* error exists*/
      return;
    else
      OS0HM001.OSNPKGNB = OS0HW00.OSNPKGNB; /* move new pkg# on enter*/
      ;
      OS0HS9C(); /* populate temp storage row*/
      OS0HS6D(); /* update temp storage*/
    end
  end
  ;
  ;
  ;
end // end OS0HS9A

// GET NEXT ITEM FOR DISPLAY
Function OS0HS9B()
  ;
        /* GET NEXT ITEM FOR DISPLAY*/
  ;
  sysVar.arrayIndex = 1;
  ;
  if (OS0HW00.OS0HWITM in OS0HW02.OS0HWITM) /* itm/pg sub in ws tbl*/
   /* next sentence*/
  end
  ;
  OS0HS9F(); /* test key table (os0hw02)*/
  ;
  OS0HS9D(); /* get next item*/
  ;
  if (OS0HW00.OS0HWERR == "N") /* no errors*/
    OS0HS2B(); /* move item to detail*/
  end
  ;
  ;
  ;
end // end OS0HS9B

// POPULATE OSPTSROW
Function OS0HS9C()
  ;
   /* POPULATE CURRENT ITEM IN OSPREC*/
  ;
  ;
   /* record header*/
  ;
  OSPREC.OSPDELET[OS0HWPRD] = "U";
  ;
  OSPREC.KUFMIXBL[OS0HWPRD] = OS0HM001.KUFMIXBL;
  ;
  OSWREC.OSNPKGNB = OS0HM001.OSNPKGNB;
  OSPREC.OSNPKGNB[OS0HWPRD] = OS0HM001.OSNPKGNB;
  ;
   /* ------------------------------------------------------------*/
   /* RECORD DETAIL*/
   /* ------------------------------------------------------------*/
  ;
  OSPREC.OSPPPQ01[OS0HWPRD] = OS0HM001.PKTPPQTY[1];
  OSPREC.OSPPPQ02[OS0HWPRD] = OS0HM001.PKTPPQTY[2];
  OSPREC.OSPPPQ03[OS0HWPRD] = OS0HM001.PKTPPQTY[3];
  OSPREC.OSPPPQ04[OS0HWPRD] = OS0HM001.PKTPPQTY[4];
  OSPREC.OSPPPQ05[OS0HWPRD] = OS0HM001.PKTPPQTY[5];
  ;
  OSPREC.OSPPPQ06[OS0HWPRD] = OS0HM001.PKTPPQTY[6];
  OSPREC.OSPPPQ07[OS0HWPRD] = OS0HM001.PKTPPQTY[7];
  OSPREC.OSPPPQ08[OS0HWPRD] = OS0HM001.PKTPPQTY[8];
  OSPREC.OSPPPQ09[OS0HWPRD] = OS0HM001.PKTPPQTY[9];
  OSPREC.OSPPPQ10[OS0HWPRD] = OS0HM001.PKTPPQTY[10];
  ;
  OSPREC.OSPPPQ11[OS0HWPRD] = OS0HM001.PKTPPQTY[11];
  OSPREC.OSPPPQ12[OS0HWPRD] = OS0HM001.PKTPPQTY[12];
  OSPREC.OSPPPQ13[OS0HWPRD] = OS0HM001.PKTPPQTY[13];
  OSPREC.OSPPPQ14[OS0HWPRD] = OS0HM001.PKTPPQTY[14];
  OSPREC.OSPPPQ15[OS0HWPRD] = OS0HM001.PKTPPQTY[15];
  ;
  OSPREC.OSPPPQ16[OS0HWPRD] = OS0HM001.PKTPPQTY[16];
  OSPREC.OSPPPQ17[OS0HWPRD] = OS0HM001.PKTPPQTY[17];
  OSPREC.OSPPPQ18[OS0HWPRD] = OS0HM001.PKTPPQTY[18];
  OSPREC.OSPPPQ19[OS0HWPRD] = OS0HM001.PKTPPQTY[19];
  OSPREC.OSPPPQ20[OS0HWPRD] = OS0HM001.PKTPPQTY[20];
  ;
  ;
  ;
end // end OS0HS9C

// FIND NEXT ITEM FOR DISPLAY
Function OS0HS9D()
  ;
          /* FIND NEXT ITEM FOR DISPLAY*/
  ;
  ;
   /* Identifies if current ts queue page contains next item to*/
   /* test.  os0hw00.os0hwixm is carried from calling statement*/
   /* group.*/
  ;
  OS0HW00.OS0HWIXM = OS0HW00.OS0HWPRD; /* current item*/
  ;
  if (OS0HW00.OS0HWIXM == 13)
    OS0HW00.OS0HWIXM = 1;
    OS0HW00.XXXTSPAG = OS0HW00.XXXTSPAG + 1;
    if (OS0HW00.XXXTSPAG > OSWREC.OSWTSF1M) /* > max page*/
      OS0HW00.OS0HWERR = "Y";
      if (converseVar.eventKey is enter)
        converseLib.validationFailed(689); /* last item displayed*/
      else
        converseLib.validationFailed(644); /* can't scroll forward*/
      end
      return;
    else
      OS0HS6C(); /* read next ts queue page*/
    end
  end
  ;
  ;
      /* See if current item qualifies for display*/
  ;
  while (OS0HW00.OS0HWERR == "N"
   && OS0HW00.OS0HWFND == "N")
    OS0HW00.OS0HWIXM = OS0HW00.OS0HWIXM + 1;
    if (OS0HW00.OS0HWIXM > 12)
      OS0HW00.OS0HWIXM = 1;
      OS0HW00.XXXTSPAG = OS0HW00.XXXTSPAG + 1;
      if (OS0HW00.XXXTSPAG <= OSWREC.OSWTSF1M)
        OS0HS6C(); /* read next ts queue page*/
      else
        if (converseVar.eventKey is enter)
          converseLib.validationFailed(689); /* last item displayed*/
          OS0HW00.OS0HWERR = "Y";
          return;
        else
          converseLib.validationFailed(644); /* can't scroll forward*/
          OS0HW00.OS0HWERR = "Y";
          return;
        end
      end
    end
    OS0HS9E(); /* test next item*/
  end
  ;
  ;
  ;
end // end OS0HS9D

// TEST NEXT ITEM FOR DISPLAY
Function OS0HS9E()
  ;
         /* Test next item for dispaly*/
  ;
  if (OSPREC.OSNPKGNB[OS0HWIXM] == OSWREC.OSNPKGNB /* pkg match*/
   || OSPREC.OSNPKGNB[OS0HWIXM] < OSWREC.OSNPKGNB) /* or pkg < w/s pkg*/
    /* next sentence*/
  else
    OS0HW00.OS0HWERR = "Y"; /* error exist*/
    if (converseVar.eventKey is enter)
      converseLib.validationFailed(689); /* last item displayed*/
    else
      converseLib.validationFailed(644); /* can't scroll forward*/
    end
    return;
  end
  ;
  if (OSPREC.OSNPKGNB[OS0HWIXM] == OSWREC.OSNPKGNB
   || OSPREC.OSNPKGNB[OS0HWIXM] == 0)
    if (OS0HW00.OSPSELTD == "A") /* all items for package*/
      if (OSPREC.OSNPKGNB[OS0HWIXM] == OSWREC.OSNPKGNB)
        OS0HW00.OS0HWFND = "Y"; /* item found switch*/
        OS0HW00.OS0HWPRD = OS0HW00.OS0HWIXM; /* item ts queue ref*/
      else
         /* next sentence*/
      end
    else
      if (OS0HW00.OSPSELTD == OSPREC.OSPSELTD[OS0HWIXM])
        OS0HW00.OS0HWFND = "Y"; /* item found switch*/
        OS0HW00.OS0HWPRD = OS0HW00.OS0HWIXM; /* item ts queue ref*/
        return;
      end
    end
  end
  ;
  ;
  ;
end // end OS0HS9E

// TEST OS0HW02 FOR NEXT REC KEYS
Function OS0HS9F()
  ;
   /* GET TS QUEUE KEYS FROM OS0HW02 TABLE*/
  ;
   /* os0hwitm is the concatenation of ts page and item sub*/
  ;
  OS0HW00.OS0HWIXM = sysVar.arrayIndex + 1;
  ;
   /* when os0hwsub is 0 item has never been displayed*/
  ;
  if (converseVar.eventKey is enter
   && OSPREC.OSPMORE == "Y")
    /* next sentence*/
  else
    if (OS0HW02.OS0HWSUB[OS0HWIXM] == 0) /* map index cur pg/itm*/
        /* next sentence*/
    else
      OS0HW00.OS0HWFND = "Y";
      OS0HW00.OS0HWPRD = OS0HW02.OS0HWSUB[OS0HWIXM]; /* cur itm/pg*/
      if (OS0HW02.OS0HWPAG[OS0HWIXM] == OS0HW00.XXXTSPAG) /* cur pg = tspg*/
          /* next sentence;cur pg = t/s pg - no need to read*/
      else
        OS0HW00.XXXTSPAG = OS0HW02.OS0HWPAG[OS0HWIXM];
        OS0HS6C(); /* read next ts queue page*/
      end
    end
  end
  ;
  ;
  ;
  ;
end // end OS0HS9F

// VALIDATE DETAIL PREPACK QTY
Function OS0HSB1()
  ;
           /* VALIDATE DETAIL PREPACK QTY*/
  ;
  ;
  OS0HW00.OS0HWIXM = 20; /* map index*/
  ;
  while (OS0HW00.OS0HWIXM >= 1)
    if (OS0HM001.OP3ONOQT[OS0HWIXM] < OS0HM001.PKTPPQTY[OS0HWIXM])
      OS0HW00.OS0HWERR = "Y";
      converseLib.validationFailed(683); /* prepack qty exceed order qty*/
      set OS0HM001.PKTPPQTY[OS0HWIXM] cursor, bold;
      return;
    else
      if (OS0HM001.OP3ONOQT[OS0HWIXM] > 0
       && OS0HM001.PKTPPQTY[OS0HWIXM] == 0)
        OS0HW00.OS0HWERR = "Y";
        converseLib.validationFailed(686); /* no prepack qtys entered for item*/
        set OS0HM001.PKTPPQTY[OS0HWIXM] cursor, bold;
        return;
      end
    end
    if (OS0HM001.PKTPPQTY[OS0HWIXM] == OS0HW01.PKTPPQTY[OS0HWIXM])
      /* NEXT SENTENCE*/
    else
      if (converseVar.eventKey is pf12) /* edit only*/
         /* next sentence - skip update*/
      else
        OSPREC.OSPDELET[OS0HWPRD] = "U"; /* set for update*/
        OS0HW00.OS0HWCHF = "Y"; /* set change flag*/
      end
    end
    OS0HW00.OS0HWIXM = OS0HW00.OS0HWIXM - 1;
  end
  ;
  ;
  ;
end // end OS0HSB1

// VALIDATE MIX BOX FLAG
Function OS0HSB2()
  ;
           /* Validate MIX BOX FLAG*/
  ;
  ;
  if (OS0HM001.KUFMIXBL == "Y"
   || OS0HM001.KUFMIXBL == "N")
    if (converseVar.eventKey is pf12) /* edit ony*/
       /* next sentence - skip update*/
    else
      OS0HW00.KUFMIXBL = OS0HM001.KUFMIXBL;
      return;
    end
  else
    OS0HW00.OS0HWERR = "Y"; /* error msg flag*/
    converseLib.validationFailed(540); /* must be 'y' or 'no'*/
    set OS0HM001.KUFMIXBL cursor, bold;
  end
  ;
  ;
  ;
end // end OS0HSB2

// READ SIZE DESC TABLE
Function OS0HSZ2()
  ;
   /* READ DB2 FOR THE PRODUCT'S SIZE SCALE CODE*/
   /* RETURNS THE 40 SIZE DESCRIPTIONS*/
  ;
  ;
  set SQLCA empty;
  ;
  set SY4REC empty;
  ;
  set OS0HW04 empty;
  ;
  SY4REC.SY4SZSCL = OSPREC.SY4SZSCL[OS0HWTIX]; /* scale code*/
  ;
  try
    call "IO0040" ("S ", SQLCA, SY4REC) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
    return;
  else
    TA1REC.TA1LOCAT[1] = "OS0HSZ2"; /* type of access*/
    TA1REC.TA1LOCAT[2] = "S "; /* type of access*/
    TA1REC.TA1LOCAT[3] = "IO0040"; /* i/o mod*/
    TA1REC.TA1DBASE = "DPROD"; /* data base name*/
    TA1REC.TA1TBLVU = "VSCALE01"; /* table view*/
    TA1REC.TA1TBLKE = OSPREC.SY4SZSCL[OS0HWTIX]; /* record key*/
    ;
    if (SQLCA.VAGen_SQLCODE == -911) /* deadlock/timeout*/
      TA1REC.TA1FUNC = "POST"; /* post err*/
      call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes}; /* abend module*/
      converseLib.validationFailed(010); /* data base busy try again*/
      return; /* return to os0h*/
    else
      VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
      VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
      sysLib.rollback();
      VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
       /* synpoint rollback*/
      OS0HSZA(); /* db2 err routine*/
      OS0HSZB(); /* force dxfr out*/
    end
  end
  ;
  ;
  ;
end // end OS0HSZ2

// TEST CSP RETURN CODE
Function OS0HSZA()
  ;
  ;
  set ERRSQLCA empty;
  ;
  move SQLCA to ERRSQLCA withV60Compat;
  ;
  TA1REC.TA1TYPE = "DB2";
  ;
  TA1REC.TA1FUNC = "RETN";
  ;
  TA1REC.TA1PGMNM = COMMAREA.CACURRAP; /* currrent applic.*/
  ;
  try
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  end
  ;
  ;
end // end OS0HSZA

// FORCE DXFR OUT
Function OS0HSZB()
  ;
  ;
   /* ==================================================*/
  ;
   /* this statement group is performed when there*/
   /* are abnormal returns from the other modules*/
   /* like PK4420, TA0050.*/
   /* for the reason that there is no use to continue*/
   /* processing for these abnormal errors, the*/
   /* system forces user out to 'OM0M' and*/
   /* sending a msg thru commarea.*/
  ;
   /* ==================================================*/
  ;
  COMMAREA.CAMSG = " ";
  ;
  COMMAREA.CAMSG = "UNABLE TO PROCESS REQUEST-CONTACT USER ANALYST";
  ;
  COMMAREA.CATOAP = "OM0M";
  ;
  OS0HS6A(); /* purge temp storage*/
  ;
  OS0HSZC(); /* DXFR out*/
  ;
  ;
  ;
end // end OS0HSZB

// DXFR OUT
Function OS0HSZC()
  ;
   /* =================*/
       /* dxfr out*/
   /* =================*/
  ;
  ;
  COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
  ;
  sysVar.transferName = COMMAREA.CATOAP;
  ;
  COMMAREA.CATOAP = " ";
  ;
  transfer to program sysVar.transferName passing COMMAREA;
  ;
  ;
end // end OS0HSZC

//*** RECORD=OS0HW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// 12/14/00    Rshaik  OS0H screen displaying incorrect NIKE ID
// TT#9452             OS0HW00.OS0HMORD formated record length
//                     is 13 and receiving map variable length
//                     OS0HM001.OS0HMORD is 11. So last two
//                     chars of NIKE ID getting truncated.
//                     OS0HW00.OS0HMORD length reduced to 11.
// ***********************
Record OS0HW00 type basicRecord
  10 OS0HWIXM OS0HWIXM ; 
  10 OS0HWTIX OS0HWTIX ; 
  10 OS0HWPSX OS0HWPSX ; 
  10 OS0HWIX3 OS0HWIX3 ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 OS0HWPAG OS0HWPAG ; 
  10 OS0HWSPI OS0HWSPI ; 
    15 OS0HWSPG OS0HWSPG ; 
    15 OS0HWSTM OS0HWSTM ; 
  10 OS0HMIXM OS0HMIXM ; 
  10 OS0HWITC OS0HWITC ; 
  10 OS0HWUPC OS0HWUPC ; 
  10 OS0HWTIQ OS0HWTIQ ; 
  10 PKTPPQTY PKTPPQTY ; 
  10 OS0HWQOT OS0HWQOT ; 
  10 OS0HWREM OS0HWREM ; 
  10 OS0HWTRM OS0HWTRM ; 
  10 OP3ONOQT OP3ONOQT ; 
  10 OS0HWNUM OS0HWNUM ; 
  10 PKTBACTI PKTBACTI ; 
  10 OSNTIQTY OSNTIQTY [180] ; 
  10 OS0HWITM OS0HWITM ; 
    15 XXXTSPAG XXXTSPAG ; 
    15 OS0HWPRD OS0HWPRD ; 
  10 OSNPKGNB OSNPKGNB ; 
  10 OS0HWERR OS0HWERR ; 
  10 OS0HWCHF OS0HWCHF ; 
  10 OS0HWFND OS0HWFND ; 
  10 OS0HWEOP OS0HWEOP ; 
  10 OSPSELTD OSPSELTD ; 
  10 TA5APPID TA5APPID ; 
  10 OS0HMORD OS0HMORD ; 
    15 OS0HWCID OS0HWCID ; 
      20 * num(7) ; 
      20 OP1PARTN OP1PARTN ; 
    15 OS0HWF1 OS0HWF1 ; 
    15 OS0HWNID OS0HWNID ; 
  10 OS0HMCUS OS0HMCUS ; 
    15 OS0HWCOD OS0HWCOD ; 
    15 OS0HWF2 OS0HWF2 ; 
    15 OS0HWSID OS0HWSID ; 
    15 OS0HWF3 OS0HWF3 ; 
    15 OS0HWDID OS0HWDID ; 
  10 XPACD XPACD ; 
  10 YNTCD YNTCD ; 
  10 XWHCD XWHCD ; 
  10 XGPCD XGPCD ; 
  10 XDMCD XDMCD ; 
  10 KUFMIXBL KUFMIXBL ; 
  10 KUCUNTCS KUCUNTCS ; 
  10 SY1SSTNM SY1SSTNM ; 
  10 SY2CLRAB SY2CLRAB ; 
  10 OP2CGPCD OP2CGPCD ; 
  10 OS0HWMSG OS0HWMSG ; 
    15 OS0HWSTL OS0HWSTL ; 
    15 OS0HWSCD OS0HWSCD ; 
      20 OS0HWSTY OS0HWSTY ; 
      20 OS0HWF4 OS0HWF4 ; 
      20 OS0HWCLR OS0HWCLR ; 
      20 OS0HWF5 OS0HWF5 ; 
      20 OS0HWDIM OS0HWDIM ; 
    15 OS0HWTXT OS0HWTXT ; 
  10 OS0HWNRD OS0HWNRD ; 
end // end OS0HW00

//*** RECORD=OS0HW01 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record OS0HW01 type basicRecord
  10 OSNPKGNB OSNPKGNB ; 
  10 KUFMIXBL KUFMIXBL ; 
  10 PKTPPQTY PKTPPQTY [20] ; 
end // end OS0HW01

//*** RECORD=OS0HW02 ****
// ----------------------------
// Application working storage.
// ----------------------------
// 
// TABLE THAT CONTAINS THE TS-PAGE, TS-ITEM SUBSCRIPTS
// OF ALL ITEMS THAT HAVE BEEN DISPLAYED SO FAR.
// 
// ***********************
Record OS0HW02 type basicRecord
  5 OS0HW2IX OS0HW2IX ; 
  5 OS0HWITM OS0HWITM [50] ; 
    10 OS0HWPAG OS0HWPAG ; 
    10 OS0HWSUB OS0HWSUB ; 
end // end OS0HW02

//*** RECORD=OS0HW03 ****
// ************************************************************
// * Temporary storage record used to hold detail items for   *
// * a particular order no. for the OS0G application.         *
// *                                                          *
// * This is used for paging purpose.  1 page = 1 temporary   *
// * storage record.  There are 12 occurrences of detail item *
// * for 1 page/1 ts record.                                  *
// *                                                          *
// *==========================================================*
// *                                                          *
// * NOTE:  Since CSP does not allow 'OCCURS' within an       *
// *        'OCCURS', the 40 occurrences for prepack-qty,     *
// *        size-active-flag, on-order-qty and size-id-desc   *
// *        have to be defined with a unique name for each    *
// *        occurrence.                                       *
// *                                                          *
// *==========================================================*
// *                                                          *
// * CSP record:  OSPREC                                      *
// *                                                          *
// * File name :  OSF2 (?????)                                *
// *                                                          *
// * Data from :  OSNREC/OP2REC/OP3REC                        *
// ************************************************************
// 
// ***********************
Record OS0HW03 type basicRecord
  5 OSPGROUP OSPGROUP ; 
    10 OSPTSLEN OSPTSLEN ; 
    10 OSPTSROW OSPTSROW [12] ; 
      15 OSPDELET OSPDELET ; 
      15 OSPSELTD OSPSELTD ; 
      15 OSPMORE OSPMORE ; 
      15 OSNPKGNB OSNPKGNB ; 
      15 OSPSTYNB OSPSTYNB ; 
        20 SY1STNBR SY1STNBR ; 
        20 OSPPER1 OSPPER1 ; 
        20 SY2CLRID SY2CLRID ; 
        20 OSPPER2 OSPPER2 ; 
        20 XDMCD XDMCD ; 
      15 OP2CGPCD OP2CGPCD ; 
      15 SY1SSTNM SY1SSTNM ; 
      15 SY2CLRAB SY2CLRAB ; 
      15 OSPPPQ01 OSPPPQ01 ; 
      15 OSPPPQ02 OSPPPQ02 ; 
      15 OSPPPQ03 OSPPPQ03 ; 
      15 OSPPPQ04 OSPPPQ04 ; 
      15 OSPPPQ05 OSPPPQ05 ; 
      15 OSPPPQ06 OSPPPQ06 ; 
      15 OSPPPQ07 OSPPPQ07 ; 
      15 OSPPPQ08 OSPPPQ08 ; 
      15 OSPPPQ09 OSPPPQ09 ; 
      15 OSPPPQ10 OSPPPQ10 ; 
      15 OSPPPQ11 OSPPPQ11 ; 
      15 OSPPPQ12 OSPPPQ12 ; 
      15 OSPPPQ13 OSPPPQ13 ; 
      15 OSPPPQ14 OSPPPQ14 ; 
      15 OSPPPQ15 OSPPPQ15 ; 
      15 OSPPPQ16 OSPPPQ16 ; 
      15 OSPPPQ17 OSPPPQ17 ; 
      15 OSPPPQ18 OSPPPQ18 ; 
      15 OSPPPQ19 OSPPPQ19 ; 
      15 OSPPPQ20 OSPPPQ20 ; 
      15 OSPORQ01 OSPORQ01 ; 
      15 OSPORQ02 OSPORQ02 ; 
      15 OSPORQ03 OSPORQ03 ; 
      15 OSPORQ04 OSPORQ04 ; 
      15 OSPORQ05 OSPORQ05 ; 
      15 OSPORQ06 OSPORQ06 ; 
      15 OSPORQ07 OSPORQ07 ; 
      15 OSPORQ08 OSPORQ08 ; 
      15 OSPORQ09 OSPORQ09 ; 
      15 OSPORQ10 OSPORQ10 ; 
      15 OSPORQ11 OSPORQ11 ; 
      15 OSPORQ12 OSPORQ12 ; 
      15 OSPORQ13 OSPORQ13 ; 
      15 OSPORQ14 OSPORQ14 ; 
      15 OSPORQ15 OSPORQ15 ; 
      15 OSPORQ16 OSPORQ16 ; 
      15 OSPORQ17 OSPORQ17 ; 
      15 OSPORQ18 OSPORQ18 ; 
      15 OSPORQ19 OSPORQ19 ; 
      15 OSPORQ20 OSPORQ20 ; 
      15 PKTBACTI PKTBACTI ; 
      15 KUFMIXBL KUFMIXBL ; 
      15 KUCUNTCS KUCUNTCS ; 
      15 OP2LNINB OP2LNINB ; 
      15 SY4SZSCL SY4SZSCL ; 
      15 YNTCD YNTCD ; 
      15 OSPSZI01 OSPSZI01 ; 
      15 OSPSZI02 OSPSZI02 ; 
      15 OSPSZI03 OSPSZI03 ; 
      15 OSPSZI04 OSPSZI04 ; 
      15 OSPSZI05 OSPSZI05 ; 
      15 OSPSZI06 OSPSZI06 ; 
      15 OSPSZI07 OSPSZI07 ; 
      15 OSPSZI08 OSPSZI08 ; 
      15 OSPSZI09 OSPSZI09 ; 
      15 OSPSZI10 OSPSZI10 ; 
      15 OSPSZI11 OSPSZI11 ; 
      15 OSPSZI12 OSPSZI12 ; 
      15 OSPSZI13 OSPSZI13 ; 
      15 OSPSZI14 OSPSZI14 ; 
      15 OSPSZI15 OSPSZI15 ; 
      15 OSPSZI16 OSPSZI16 ; 
      15 OSPSZI17 OSPSZI17 ; 
      15 OSPSZI18 OSPSZI18 ; 
      15 OSPSZI19 OSPSZI19 ; 
      15 OSPSZI20 OSPSZI20 ; 
      15 ZZZCHGCT ZZZCHGCT ; 
end // end OS0HW03

//*** RECORD=OS0HW04 ****
// ************************************************************
// * A table to hold the 20 screen item Size Descriptions and *
// * the 20 Pre-Pack Quantities.                              *
// *                                                          *
// * Example:                                                 *
// *            Size Description(1): XL                       *
// *           Pre-Pack Quantity(1): 12                       *
// *                                                          *
// * This table is used to properly place the screen Pre-Pack *
// * Quantity (1 - 20) in the appropriate database Pre-Pack   *
// * Quantity (1 - 40).                                       *
// *                                                          *
// ************************************************************
// 
// ***********************
Record OS0HW04 type basicRecord
  5 SY4IDDSC SY4IDDSC [20] ; 
  5 PKTPPQTY PKTPPQTY [20] ; 
end // end OS0HW04

//*** RECORD=OS0HW05 ****
// ************************************************************
// * A table to hold the 40 Database Pre-Pack Quantities.     *
// *                                                          *
// * This table is used to properly place the screen Pre-Pack *
// * Quantity (1 - 20) in the appropriate database Pre-Pack   *
// * Quantity (1 - 40).                                       *
// *                                                          *
// ************************************************************
// 
// ***********************
Record OS0HW05 type basicRecord
  5 OS0HWPGP OS0HWPGP ; 
    10 PKTPPQTY PKTPPQTY [40] ; 
end // end OS0HW05

DataItem OS0HMCUS char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OS0HMIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OS0HMORD char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// DISPLAY ITEM INDEX
DataItem OS0HW2IX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FIELD MODIFIED FLAG
DataItem OS0HWCHF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-cust-ord-id
DataItem OS0HWCID num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// SY2CLRID
DataItem OS0HWCLR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CU_CO_ID
DataItem OS0HWCOD num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// XNX_DEPT_ID_XREF
DataItem OS0HWDID num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end


DataItem OS0HWDIM char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end
// END OF TS PAGES FLAG
DataItem OS0HWEOP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ERROR MESSAGE FLAG
DataItem OS0HWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FILLER '.'
DataItem OS0HWF1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FILLER '.'
DataItem OS0HWF2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FILLER '.'
DataItem OS0HWF3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FILLER '-'
DataItem OS0HWF4 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// FILLER '-'
DataItem OS0HWF5 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ITEM FOUND FLAG
DataItem OS0HWFND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ITEM COUNT
DataItem OS0HWITC smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TS QUEUE PAGE/ITEM
DataItem OS0HWITM num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for map fields
DataItem OS0HWIX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem OS0HWIXM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem OS0HWMSG char(79)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// op-nike-ord-id
DataItem OS0HWNID num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TS QUEUE PAGE/ITEM
DataItem OS0HWNRD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PACK TO DISPLAY CONVERT
DataItem OS0HWNUM num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// temporary storage page
DataItem OS0HWPAG num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem OS0HWPGP char(160)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS ITEM
DataItem OS0HWPRD num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Index for map fields
DataItem OS0HWPSX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// QUOTENT
DataItem OS0HWQOT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// REMAINDER
DataItem OS0HWREM int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// STYLE-COLOR-DIM
DataItem OS0HWSCD char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CU_STOR_ID
DataItem OS0HWSID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// CURRENT TS QUEUE PAGE
DataItem OS0HWSPG smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// SAVE CURRENT PAGE/ITEM
DataItem OS0HWSPI int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// FILLER 'STYLE: '
DataItem OS0HWSTL char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CURRENT TS QUEUE ITEM
DataItem OS0HWSTM smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// SY1STNBR
DataItem OS0HWSTY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// TS ITEM
DataItem OS0HWSUB num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// OP_PREPK_TOTITMQTY
DataItem OS0HWTIQ int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index for TS QUEUE ITEMS
DataItem OS0HWTIX smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// TEMPORARY REMAINDER
DataItem OS0HWTRM int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// MESSAGE TEXT
DataItem OS0HWTXT char(58)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CALC UNITS PER CARTON
DataItem OS0HWUPC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

