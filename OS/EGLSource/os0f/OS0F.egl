package os0f;
import corpcom2.XX0XW01;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import ku.common.KUMREC;
import ku.common.KUNREC;
import ku.common.KUYREC;
import op.common.*;
import sm.common.SM1AGYID;
import sy.common.SY1SSTNM;
import sy.common.SY2CLRAB;
import sy.common.SY2CLRID;
import sy.common.SY4REC;
import sy.common.SYCREC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA5REC;
import xx.common.*;
import xx.common.KUCCOID;
import xx.common.KUMSTRID;
import xx.common.XDVCD;
import xx.common.XGPCD;
import xx.common.XNXCD;
import xx.common.XOBCD;
import xx.common.XSOCD;
import xx.common.XWHCD;
import xx.common.XXXPHN;
import xx.common.ZZZCHGCT;
import xx.common.ZZZCHGDT;
import xx.common.ZZZCHGTM;
import xx.common.ZZZSDT;
import xx02.*;
import xx02.XDMCD;
import xx02.XGPTBL;
import xx03.*;
import xx03.XLCTBL;
import xx04.*;
import xx04.XOBTBL;
import xx05.*;
import xx05.XXXPHNA;
import xx05.XXXPHNN;
import xx05.XXXPHNP;
import xx06.*;
import xx06.XWHTBL;
import xx08.*;
import xx08.SY1STNBR;
//*** PROGRAM=OS0F ****
// nike order entry - lost demand inquiry *
// 
// used to inquire about, delete, and update lost demand.
//   inquiry - lost demand products are displayed by customer.
//             if individual products are selected, product
//             details are displayed. if product details
//             are selected, size detail information is
//             displayed.
//   delete  - lost demand can be deleted on the  product
//             level, the product detail level, and the product
//             size level.
//   update  - size detail quantities can be changed.
// 
// ************************************************************
// 
// subprograms called:
// 
//   io0280   i/o mod for dcust.vcust001
//   io0340   i/o mod for dcust.vstore01
//   io4910   i/o mod for dorder.vwait01
//   ta0020   online error diagnosis routine
//   ta0040   online date routine
//   ta0050   temp storage read write routine
// 
// ************************************************************
// maintenance history:
//   date   init    comments
// ------- ------- --------------------------------------
// 1/4/90  rdavis  program creation
//         ischmi  program creation
// 2/26/90 craine  sc2 - chg to set cursor on company if error
// 4/04/90 schase  database changes. kuncstat to xxxstat in scu
// 8/07/90 tfox    changed code to allow display and delete of
//                 waiting list records for inactive customers.
//                 os0fw01, os0fsc2, os0fsud
// 2/15/91 dmeier  regen for database changes
// 3/20/91 swatso  replaced source of product description in
//                 sycrec to short styl;e nbr + style color
//                 abbrev.  Modified sss and w01.
// 5/8/91  CRAINE  bypass vcust001 edit. allow any value for
//                 company, store and dept. dept chngs #592
// 5/16/91 craine  allow quatities to be changed even when the
//                 customer is inactive.
// 10/01/93 bbake2 initialized os0fwrc to prevent S0C7.  S01
// 10/02/93 bbake2 altered map description of phone number
//                 to prevent S0C7 when oscrec contains
//                 spaces.  m030.
// 04/06/94 schase Changed os0fm010, os0f110, and os0f210 to
//                 interface with OP0X Appl.
// CONTROL   DATE    NAME  DESCRIPTION OF CHANGE
// ------- -------- ------ ------------------------------------
// Y2KFIX  02/18/98 WSQUIR Y2K MODIFICATIONS MADE TO OS0FM020
//                         AND OS0FM030.
// *********************
Program OS0F type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "OP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUMREC KUMREC; // record
  KUNREC KUNREC; // record
  KUYREC KUYREC; // record
  OS0FW01 OS0FW01; // record
  OS0FW02 OS0FW02; // record
  OS0FW03 OS0FW03; // record
  OSCREC OSCREC; // record
  OSJREC OSJREC; // record
  SQLCA SQLCA; // record
  SY4REC SY4REC; // record
  SYCREC SYCREC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XWHTBL; // table
  use XOBTBL; // table
  use XGPTBL; // table
  use XLCTBL; // table
  use OS0FM.OS0FM010,  // forms
      OS0FM.OS0FM020, 
      OS0FM.OS0FM030
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    OS0F100: OS0F100();
    goto OS0F110; /* converse os0fm010 for selection criteria*/
    OS0F110: OS0F110();
    goto OS0F110;
  end // end main
end // end OS0F

// main process
Function OS0F100()
  ;
  ;
  ;
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
  
  ;
  XSENTRY();
  ;
  COMMAREA.CACURRAP = "OS0F"; /* init commarea*/
  ;
   /* set segmented trans id*/
  ;
  XSSEGTR();
  ;
  ;
  ;
   /* init appl working storage, flags*/
  ;
  OS0FS01(); /* initialize working storage*/
  ;
  ;
  ;
   /* initialize map*/
  ;
  set OS0FM010 empty; /* initialize map*/
  ;
  OS0FM010.OPMDT = VGVar.currentShortGregorianDate;
  OS0FM010.OPMRVN = 1; /* revision number*/
  OS0FM010.OPMPRC = "OS0F110";
  OS0FM010.OPMMAP = "OS0FM010"; /* map name*/
  OS0FM010.CAMSG = COMMAREA.CAMSG;
  COMMAREA.CAMSG = " ";
  ;
  ;
  ;
   /* darken pfkey options 7 and 8 - no scrolling*/
   /* until products are displayed*/
  ;
  set OS0FM010.OS0FMPF7 skip, invisible;
  set OS0FM010.OS0FMPF8 skip, invisible;
  ;
  ;
  ;
   /* darken 'from' and 'of' literals and pages*/
   /* until products are displayed*/
  ;
  set OS0FM010.OS0FMPGL skip, invisible; /* 'page' literal*/
  set OS0FM010.OS0FMOFL skip, invisible; /* 'of' literal*/
  set OS0FM010.OS0FMFPG skip, invisible; /* from page*/
  set OS0FM010.OS0FMLPG skip, invisible; /* last page*/
  ;
  ;
  ;
   /* autoskip, darken selection fields - no selections can be*/
   /* made until the products are displayed*/
  ;
  OS0FW01.OS0FWSUB = 1;
  ;
  while (OS0FW01.OS0FWSUB <= 20)
    set OS0FM010.OS0FMSEL[OS0FWSUB] skip, invisible;
    OS0FW01.OS0FWSUB = OS0FW01.OS0FWSUB + 1;
  end
  ;
  ;
  ;
   /* *******************************************************/
     /* last line of os0f000; end of application*/
  ;
end // end OS0F100

// for selection criteria
Function OS0F110()
  ;
  ;
  ;
   /* this converses the map for selection criteria*/
  ;
  converseLib.clearScreen();
  
  ;
  ;
  ;
  converse OS0FM010 ;
  ;
  ;
  ;
   /* reset all map fields to normal*/
  ;
  OS0FSA1(); /* reset all attributes for os0fm010 normal*/
  ;
  OS0FW01.OS0FWERR = "N"; /* initialize error flag*/
  converseLib.validationFailed(0); /* initialize error message*/
  OS0FM010.CAMSG = " "; /* initialize commarea message*/
  ;
   /* edit pfkeys*/
  ;
  if (converseVar.eventKey is pf3)
    COMMAREA.CATOAP = "OP0X"; /* return to op menu*/
    XSEXIT();
  end
  ;
  ;
  if (converseVar.eventKey is pf4) /* main menu*/
    XSPF4();
  end
  ;
  ;
  if (converseVar.eventKey is pf19)
    COMMAREA.CATOAP = "OS0F"; /* return to begin of this application*/
    XSEXIT();
  end
  ;
  ;
  if (converseVar.eventKey is pf12) /* edit only*/
    OS0FS10(); /* edit selection criteria*/
    if (OS0FW01.OS0FWERR == "N")
      converseLib.validationFailed(518); /* edit performed with no errors*/
    end
  else
    if (converseVar.eventKey is enter)
      OS0FS10(); /* edit selection criteria*/
      if (OS0FW01.OS0FWERR == "N") /* no errors*/
        OS0FS11(); /* get products to display*/
        if (OS0FW01.OS0FWERR == "N") /* no errors*/
          OS0FW01.OSJGROUP = OSJREC.OSJGROUP; /* save editted dates*/
          if (OS0FW01.OS0FWIAC == "Y") /* inactive customer*/
            converseLib.validationFailed(593);
          end
          OS0F200(); /* product selection processing*/
          OSJREC.OSJGROUP = OS0FW01.OSJGROUP;
                                   /* restore editted dates*/
        end
      end
    else
      converseLib.validationFailed(2); /* invalid pfkey*/
    end
  end
  ;
end // end OS0F110

// product selection processing
Function OS0F200()
  ;
  ;
  ;
   /* product selection processing*/
  ;
  ;
  OS0FW01.OS0FWPCF = "Y"; /* set product converse flag to yes*/
  OS0FW01.OS0FWDF1 = "N"; /* set confirm delete flag to no*/
  ;
  ;
   /* set darkened and askip scrolling fields defined*/
  ;
  OS0FSSD();
  ;
  ;
   /* protect selection criteria fields*/
  ;
  OS0FSPC(); /* protect selection criteria*/
  ;
  ;
  ;
   /* build map with products*/
  ;
  OS0FM010.OS0FMFPG = 1; /* 'from' page set to 1*/
  OS0FM010.OS0FMLPG = OS0FW01.OS0FWMX1; /* last page*/
  OS0FW01.OS0FWSP1 = 1; /* init ws save page for m010*/
  ;
  OS0FSR1(); /* read temp storage*/
  ;
  ;
  ;
   /* build the map*/
  ;
  ;
  OS0FSB1(); /* move products to map*/
  ;
  ;
  set OS0FM010.OS0FMFPG cursor, normal; /* position cursor*/
  ;
      /* ****************************************************/
      /* * product selection converse loop*/
      /* * performed until the application is left*/
      /* * by xfer or dxfer or pf19 (cancel/refresh),*/
      /* * which dxfers to the beginning of this application*/
      /* * note: the product converse flag is never set*/
      /* * to 'n'in this application.*/
      /* ***************************************************/
  ;
  while (OS0FW01.OS0FWPCF == "Y") /* converse flag - product*/
    OS0F210(); /* converse loop*/
  end
  ;
  ;
end // end OS0F200

// for product selection
Function OS0F210()
  ;
  ;
  ;
   /* this converses the map for product selection*/
  ;
  converseLib.clearScreen();
  
  ;
  OS0FM010.OPMPRC = "OS0F210"; /* process name*/
  ;
   /* ************************************************************/
  converse OS0FM010 ;
  ;
  ;
  ;
  OS0FW01.OS0FWERR = "N"; /* init error flag to no*/
  converseLib.validationFailed(0); /* INIT ERROR MESSAGE TO ZERO*/
  OS0FM010.CAMSG = " "; /* init commarea message*/
  ;
   /* set all enterable map fields to normal so*/
   /* corrected errors are not highlighted*/
  ;
  ;
  ;
   /* page number*/
  ;
  set OS0FM010.OS0FMFPG cursor, normal; /* position cursor*/
  ;
  ;
  ;
   /* selection fields*/
  ;
  OS0FW01.OS0FWSUB = 1;
  while (OS0FW01.OS0FWSUB <= 20)
    OS0FSS1(); /* check fields for previous entry*/
    OS0FW01.OS0FWSUB = OS0FW01.OS0FWSUB + 1;
  end
  ;
  ;
  ;
   /* edit pfkeys*/
  ;
  if (converseVar.eventKey is pf3)
    OS0FSX1(); /* purge temp storage 1*/
    COMMAREA.CATOAP = "OP0X"; /* return to op menu*/
    XSEXIT();
  end
  ;
  if (converseVar.eventKey is pf4) /* main menu*/
    OS0FSX1(); /* purge temp storage 1*/
    XSPF4();
  end
  ;
  if (converseVar.eventKey is pf19)
    OS0FSX1(); /* purge temp storage 1*/
    COMMAREA.CATOAP = "OS0F"; /* return to beginning of application*/
    XSEXIT();
  end
  ;
  ;
  ;
  ;
  if (converseVar.eventKey is enter)
    OS0FS20(); /* edit selections, page nbr*/
    ;
    if (OS0FW01.OS0FWERR == "N") /* no errors*/
      if (OS0FW01.OS0FWSL1 == "S") /* products selected*/
        OS0FW01.OS0FWPRS = "Y"; /* products selected flag*/
        OS0FSSM(); /* save map option in working storage*/
        while (OS0FW01.OS0FWPRS == "Y") /* there are products selected*/
          OS0F300(); /* product detail processing*/
        end
        OSJREC.OSJGROUP = OS0FW01.OSJGROUP; /* restore editted dates*/
        OS0FSU1(); /* update temp storage 1*/
        OS0FSB1(); /* rebuild map m010*/
      else
        if (OS0FW01.OS0FWSL1 == "D")
          converseLib.validationFailed(551); /* press pf24 to confirm delete*/
          OS0FW01.OS0FWDF1 = "N"; /* confirm delete flag*/
        else /* page number changed*/
          OS0FS24(); /* read ts1 and build map m010*/
        end
      end
    else /* if errors*/
      OS0FW01.OS0FWDF1 = "N"; /* confirm delete flag off*/
    end
  else
    if (converseVar.eventKey is pf7)
      OS0FS21(); /* scroll backwards*/
    else
      ;
      if (converseVar.eventKey is pf8)
        OS0FS22(); /* scroll forwards*/
      else
        ;
        if (converseVar.eventKey is pf24)
          OS0FS23(); /* delete products*/
          ;
        else
          if (converseVar.eventKey is pf12) /* edit only*/
            OS0FS20(); /* edit selection criteria*/
            if (OS0FW01.OS0FWERR == "N")
              converseLib.validationFailed(518); /* edit performed with no errors*/
            end
          else
            converseLib.validationFailed(2); /* invalid pfkey*/
          end
        end
      end
    end
  end
end // end OS0F210

// product detail processing
Function OS0F300()
  ;
  ;
  ;
   /* product detail processing*/
  ;
   /* initialization*/
  ;
  ;
   /* check value of all records deleted flag*/
   /* if yes move '*' to ws and map select option*/
   /* using subscript saved from os0fsps stmt group*/
  ;
  if (OS0FW01.OS0FWDEL == "Y")
    OS0FW02.OS0FWSEL[OS0FWSB9] = "*";
    OS0FM010.OS0FMSEL[OS0FWSB9] = "*";
    OS0FW01.OS0FWDEL = "N"; /* turn flag off*/
  end
  ;
  OS0FW01.OS0FWDCF = "N"; /* set prod detail converse flag eq 'n'*/
  OS0FW01.OS0FWDF2 = "N"; /* set delete confirm flag eq 'n'*/
  ;
  if (OS0FW01.OS0FWERR == "N")
    set OS0FM020 initial; /* initialize map*/
    OS0FM020.OPMDT = VGVar.currentShortGregorianDate; /* date*/
    OS0FM020.OPMPRC = "OS0F310"; /* process name*/
    OS0FM020.OPMMAP = "OS0FM020"; /* map name*/
    OS0FM020.OPMRVN = 1; /* revision number*/
    OS0FM020.CAMSG = COMMAREA.CAMSG;
    COMMAREA.CAMSG = " ";
  end
  ;
  OS0FM020.KUCCOID = OS0FM010.KUCCOID; /* company id*/
  OS0FM020.KUMSTRID = OS0FM010.KUMSTRID; /* store id*/
  OS0FM020.XNXCD = OS0FM010.XNXCD; /* nike dept code*/
  OS0FM020.KUMSTRNM = OS0FM010.KUMSTRNM; /* store name*/
  OS0FM020.XGPCD = OS0FM010.XGPCD; /* gpc*/
  ;
  ;
   /* find product selected and move description to map*/
  ;
  OS0FSPS();
  ;
  ;
  ;
  if (OS0FW01.OS0FWDCF == "Y") /* product found*/
    OS0FS12(); /* get records to display*/
    ;
     /* read ts2 and build map m020*/
    ;
    if (OS0FW01.OS0FWERR == "N")
      OS0FM020.OS0FMPG = 1; /* 'from' page set to 1*/
      OS0FM020.OS0FMPL = OS0FW01.OS0FWMX2; /* last page*/
      OS0FW01.OS0FWSP2 = 1; /* init ws save page for m020*/
    end
    OS0FS34(); /* read ts1 and build m020*/
  end
  ;
  ;
  ;
      /* ****************************************************/
      /* * product detail converse loop*/
      /* * performed until the application is left*/
      /* * by xfer or pf3, previous screen*/
      /* * if pf3, converse flag is set to 'n'*/
      /* ***************************************************/
  ;
  while (OS0FW01.OS0FWDCF == "Y") /* converse flag - product detail flag*/
    OS0F310(); /* converse loop*/
  end
  ;
end // end OS0F300

// for product detail processing
Function OS0F310()
  ;
  ;
  ;
   /* this converses the map for product detail selection*/
  ;
  converseLib.clearScreen();
  
  ;
  ;
  ;
  converse OS0FM020 ;
  ;
  ;
  ;
  OS0FW01.OS0FWERR = "N"; /* init error flag to no*/
  converseLib.validationFailed(0); /* init error msg to zero*/
  OS0FM020.CAMSG = " "; /* init commarea message*/
  ;
   /* set all enterable map fields to normal so*/
   /* corrected errors are not highlighted*/
  ;
  ;
   /* page number*/
  ;
  set OS0FM020.OS0FMPG cursor, normal;
  ;
  ;
  ;
   /* selection fields*/
  ;
  OS0FW01.OS0FWSUB = 1;
  OS0FW01.OS0FWDEL = "Y"; /* turn all records deleted flg on*/
  while (OS0FW01.OS0FWSUB <= 22)
    OS0FSS2(); /* check style option selected*/
    OS0FW01.OS0FWSUB = OS0FW01.OS0FWSUB + 1;
  end
  ;
  ;
  ;
   /* edit pfkeys*/
  ;
  if (converseVar.eventKey is pf3) /* return to previous screen*/
    OS0FSX2(); /* purge temp storage 2*/
    OS0FW01.OS0FWDCF = "N"; /* detail converse flag*/
    OS0FW01.OS0FWPRS = "N"; /* product converse flag*/
  else
    ;
    ;
    if (converseVar.eventKey is pf4) /* main menu*/
      OS0FSX1(); /* purge temp storage 1*/
      OS0FSX2(); /* purge temp storage 2*/
      XSPF4();
    else
      ;
      ;
      if (converseVar.eventKey is enter)
        OS0FS30(); /* edit selections, page nbr*/
        if (OS0FWERR == "N") /* no errors*/
          if (OS0FW01.OS0FWSL2 == "S") /* select option saved - detail*/
            OS0FW01.OS0FWSZF = "Y"; /* size selected flag*/
            OS0FSM2(); /* save map select option*/
            while (OS0FW01.OS0FWSZF == "Y") /* there are sizes selected*/
              OS0F400(); /* size detail processing*/
            end
            OS0FSU2(); /* update temp storage 2*/
            OS0FSB2(); /* REBUILD M020 MAP*/
          else
            if (OS0FW01.OS0FWSL2 == "D")
              converseLib.validationFailed(551); /* press pf24 to confirm delete*/
              OS0FW01.OS0FWDF2 = "N"; /* confirm delete flag*/
            else
              if (OS0FW01.OS0FWDCF == "Y")
                OS0FS32(); /* paging -  page number changed*/
   /* else no selection made and next product will be displayed*/
              end
            end
          end
        else /* if errors*/
          OS0FW01.OS0FWDF2 = "N"; /* turn confirm delete flag off*/
        end
      else
        if (converseVar.eventKey is pf7)
          OS0FS31(); /* scroll backwards*/
          ;
        else
          if (converseVar.eventKey is pf8)
            OS0FS32(); /* scroll forwards*/
            ;
          else
            if (converseVar.eventKey is pf24)
              OS0FS33(); /* delete products*/
            else
              ;
              if (converseVar.eventKey is pf12) /* edit only*/
                OS0FS30(); /* edit selection criteria*/
                if (OS0FW01.OS0FWERR == "N")
                  converseLib.validationFailed(518); /* edit performed with no errors*/
                end
              else
                converseLib.validationFailed(2); /* invalid pfkey*/
              end
            end
          end
        end
      end
    end
  end
  ;
end // end OS0F310

// size detail processing
Function OS0F400()
  ;
  ;
  ;
   /* size detail processing*/
  ;
   /* initialization*/
  ;
  OS0FW01.OS0FWSCF = "N"; /* set sz converse fl eq 'n'*/
  OS0FW01.OS0FWDF3 = "N"; /* set delete confirm flag eq 'n'*/
  OS0FW01.OS0FWWF = "N"; /* set warning qty 0 flag eq 'n'*/
  ;
  if (OS0FW01.OS0FWERR == "N")
    set OS0FM030 initial; /* initialize map*/
    OS0FM030.OPMDT = VGVar.currentShortGregorianDate; /* date*/
    OS0FM030.OPMPRC = "OS0F410"; /* process name*/
    OS0FM030.OPMMAP = "OS0FM030"; /* map name*/
    OS0FM030.OPMRVN = 1; /* revision number*/
    OS0FM030.CAMSG = COMMAREA.CAMSG;
    COMMAREA.CAMSG = " ";
  end
  ;
  ;
   /* move saved data from map m020 to map m030*/
  ;
  OS0FSMD();
  ;
   /* move selected wait list record details to map m030*/
  ;
  OS0FSP3();
  ;
   /* set all enterable map fields to normal*/
   /* so corrected errors are not hightlighted*/
  ;
  OS0FSA3();
  ;
  ;
      /* ****************************************************/
      /* * size detail converse loop peformed until*/
      /* * until the application is left*/
      /* * by xfer or pf3, previous screen*/
      /* * if pf3, converse flag is set to 'n'*/
      /* ***************************************************/
  ;
  while (OS0FW01.OS0FWSCF == "Y") /* converse flag - product detail flag*/
    OS0F410(); /* converse loop*/
  end
  ;
end // end OS0F400

// for size detail processing
Function OS0F410()
  ;
  ;
  ;
  ;
   /* this converses the map for size detail processing*/
  ;
  ;
  converseLib.clearScreen();
  
  ;
  ;
  ;
  converse OS0FM030 ;
  ;
  ;
  OS0FW01.OS0FWERR = "N"; /* init error flag to no*/
  converseLib.validationFailed(0);
  OS0FM030.CAMSG = " ";
  COMMAREA.CAMSG = " ";
  ;
   /* set all enterable map fields to normal so*/
   /* corrected errors are not highlighted*/
  ;
  OS0FSA3();
  ;
  ;
   /* edit pfkeys*/
  ;
  if (converseVar.eventKey is pf3) /* return to previous screen*/
    OS0FW01.OS0FWSCF = "N"; /* size converse flag*/
    OS0FW01.OS0FWSZF = "N"; /* size selected flag*/
  else
    ;
    if (converseVar.eventKey is pf4) /* main menu*/
      OS0FSX1(); /* purge temp storage 1*/
      OS0FSX2(); /* purge temp storage 2*/
      XSPF4();
    else
      ;
      ;
      if (converseVar.eventKey is enter)
        ;
        OS0FSCH(); /* compare m030 qty with oscrec qty*/
        ;
        if (OS0FW01.OS0FWCHG == "Y") /* qty change flag*/
          OS0FSUD(); /* update/del size qty on data base*/
        else /* no change , enter next product*/
          OS0FW01.OS0FWSCF = "N"; /* size selected flag*/
          COMMAREA.CAMSG = "NEXT WAITING LIST RECORD";
          OS0FW01.OS0FWUF2 = "Y"; /* turn update ts2 flag on*/
        end
      else
        ;
        if (converseVar.eventKey is pf24)
          OS0FS43(); /* delete products*/
        else
          converseLib.validationFailed(2); /* invalid pfkey*/
        end
      end
    end
  end
  ;
end // end OS0F410

// initialize application ws
Function OS0FS01()
  ;
  ;
  ;
   /* initialize working storage*/
  ;
   /* set application level recs empty where possible*/
  ;
  ;
  set OS0FW01 empty; /* working storage*/
  set OS0FW02 empty; /* working storage, temp storage*/
                                   /* os0fm010*/
  set OS0FW03 empty; /* working storage, temp storage*/
                                   /* os0fm020*/
  set OSCREC empty; /* dorder.vwait001*/
  set KUMREC empty; /* dcust.vcust001*/
  set KUNREC empty; /* dcust.vstore01*/
  set SYCREC empty; /* for calling io0560*/
  set OSJREC empty; /* for calling io4910*/
  set TA1REC empty; /* for calling ta0020 - error diag*/
  set TA2REC empty; /* for calling ta0040 - date routine*/
  set TA5REC empty; /* for calling ta0050 - temp storage*/
  set SQLCA empty; /* sql cummunication area*/
  set ERRSQLCA empty; /* sql cummunication area*/
  set XX0XW01 empty; /* ws for formatting dates*/
  ;
  ;
  ;
   /* initialize flags*/
  ;
  OS0FW01.OS0FWPCF = "Y"; /* converse flag - product*/
  OS0FW01.OS0FWDCF = "Y"; /* converse flag - product detail*/
  OS0FW01.OS0FWSCF = "Y"; /* converse flag - size detail*/
  OS0FW01.OS0FWERR = "N"; /* error flag*/
  OS0FW01.OS0FWEOF = "N"; /* end of file flag*/
  OS0FW01.OS0FWPRS = "N"; /* products selected flag*/
  OS0FW01.OS0FWDF1 = "N"; /* confirm delete flag for ts1*/
  OS0FW01.OS0FWDF2 = "N"; /* confirm delete flag for ts2*/
  ;
   /* move message to working storage for future reference*/
  ;
  OS0FW01.OS0FWMSG = "     WAITING LIST RECORD(S) DELETED";
  OS0FW01.OS0FWRC = 0; /* prevent S0C7*/
  ;
  ;
  XX0XS01(); /* get system date and time*/
  ;
end // end OS0FS01

// abort for db abends - no reset
Function OS0FS02()
  ;
  ;
  ;
      /* *********************************************************/
      /* * online abort routine for op system for db abends     **/
      /* *                                                      **/
      /* *   ****** W A R N I N G *******                       **/
      /* *                                                      **/
      /* * this abort routine does not call reset               **/
      /* * do not use if an update has been done                **/
      /* * use os0fs03 for call reset function                  **/
      /* *********************************************************/
  ;
  set ERRSQLCA empty; /* clear area*/
  move SQLCA to ERRSQLCA withV60Compat; /* save orig sqlca*/
  TA1REC.TA1PGMNM = "OS0F"; /* program name*/
  TA1REC.TA1TYPE = "DB2"; /* abend type*/
  TA1REC.TA1FUNC = "RETN"; /* abend func*/
  call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes}; /* abend module*/
  COMMAREA.CAUSERA = " "; /* clear user commarea*/
  XSPF4(); /* master menu*/
  exit program; /* master menu failure*/
  ;
  ;
  ;
   /* *************************************************************/
end // end OS0FS02

// edit selection criteria
Function OS0FS10()
  ;
  ;
  ;
   /* edit selection criteria - fields are edited from*/
   /* the bottom of the map to the top with one exception,*/
   /* gpc is edited before customer because can't find any*/
   /* customer without a gpc*/
  ;
  ;
  set OSJREC empty;
  ;
  ;
  OS0FSLD(); /* edit lost demand beg-end date*/
  ;
  ;
  OS0FSDT();
                                   /* lost demand type code - not required*/
  ;
  ;
  OS0FSOT(); /* base order type - not required, may*/
                                   /* be inactive*/
  ;
  ;
  OS0FSDD(); /* begin-end drop date*/
  ;
  ;
  OS0FSND(); /* begin-end need date*/
  ;
  ;
  OS0FSEG(); /* edit gpc - required*/
  ;
  ;
   /* verify customer only if gpc is okay*/
  ;
  ;
  if (OS0FM010.OS0FMGP > " ") /* gpc found - abbreviation exists*/
    OS0FSCU(); /* verify*/
  end
  ;
end // end OS0FS10

// get products to display
Function OS0FS11()
  ;
  ;
  ;
   /* get products to display - select all products for a*/
   /* customer and load into working storage. write a temporary*/
   /* storage record (temp storage 1) for each map full*/
   /* of products*/
  ;
  ;
   /* purge temporary storage 1*/
  ;
  OS0FSX1();
  ;
  ;
   /* build record to pass to select products*/
  ;
  OS0FSBR();
  ;
  ;
   /* get all the products for the customer*/
  ;
  set SQLCA empty;
  ;
  OSJREC.OSJTASK = "S1";
  ;
  call "IO4910" (OSJREC, SQLCA, OSCREC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod-select scan*/
  ;
  ;
   /* check db2 return code*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VWAIT001"; /* table view*/
    TA1REC.TA1MAP = "OS0FM010"; /* MAP NAME*/
    TA1REC.TA1TBLKE = " ";
    OS0FW01.OS0FWDI1 = OSCREC.KUCCOID;
    OS0FW01.OS0FWDI2 = OSCREC.KUMSTRID;
    OS0FW01.OS0FWDI3 = OSCREC.XNXCD;
    OS0FW01.OS0FWDI4 = OSCREC.XGPCD;
    TA1REC.TA1TBLKE = OS0FW01.OS0FWDIA; /* key value*/
    TA1REC.TA1LOCAT[2] = "S1      "; /* calling option*/
    TA1REC.TA1LOCAT[3] = "OS0FS11 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO4910  "; /* i/o mod name*/
    OS0FS02(); /* abort routine - no reset done*/
  end
  ;
  ;
  ;
  OS0FW01.OS0FWEOF = "N"; /* set end of file flag to no*/
  ;
  OS0FSN1(); /* select next for temp storage 1*/
  ;
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 100)
    converseLib.validationFailed(559); /* no products found for selection criteria*/
    OS0FW01.OS0FWERR = "Y";
  else
    while (OS0FW01.OS0FWEOF == "N") /* while there are lost demand rows*/
      OS0FSL1(); /* load and write temp storage 1*/
    end
  end
  ;
  ;
  ;
   /* close scan*/
  ;
  set SQLCA empty;
  ;
  OSJREC.OSJTASK = "C1";
  ;
  call "IO4910" (OSJREC, SQLCA, OSCREC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod-close  scan*/
  ;
  ;
      /* check db2 return code*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    OS0FSX1(); /* delete temp storage 1*/
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VWAIT001"; /* table view*/
    TA1REC.TA1MAP = "OS0FM010"; /* MAP NAME*/
    TA1REC.TA1TBLKE = " ";
    OS0FW01.OS0FWDI1 = OSCREC.KUCCOID;
    OS0FW01.OS0FWDI2 = OSCREC.KUMSTRID;
    OS0FW01.OS0FWDI3 = OSCREC.XNXCD;
    OS0FW01.OS0FWDI4 = OSCREC.XGPCD;
    TA1REC.TA1TBLKE = OS0FW01.OS0FWDIA; /* key value*/
    TA1REC.TA1LOCAT[2] = "C1      "; /* calling option*/
    TA1REC.TA1LOCAT[3] = "OS0FS11 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO4910  "; /* i/o mod name*/
    OS0FS02(); /* abort routine - no reset called*/
  end
  ;
  ;
  ;
   /* *************************************************************/
end // end OS0FS11

// get records to display
Function OS0FS12()
  ;
  ;
  ;
   /* get all records to display - select all records for*/
   /* the current selected product and load into working storage.*/
   /* write a temp storage record (temp storage 2) for each map*/
   /* full of waiting list records for the product*/
  ;
  ;
   /* purge temporary storage 2*/
  ;
  OS0FSX2();
  ;
  ;
   /* build record to pass to select product records*/
  ;
  OS0FSB4();
  ;
  ;
   /* get all the records for the product*/
  ;
  set SQLCA empty;
  ;
  OSJREC.OSJTASK = "S2";
  ;
  call "IO4910" (OSJREC, SQLCA, OSCREC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod-select scan*/
  ;
  ;
   /* check db2 return code*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    OS0FSX1(); /* purge temp storage 1*/
    OS0FSX2(); /* purge temp storage 2*/
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VWAIT001"; /* table view*/
    TA1REC.TA1PGMNM = "OS0F"; /* program name*/
    TA1REC.TA1MAP = "OS0FM020"; /* map name*/
    TA1REC.TA1TBLKE = " ";
    OS0FW01.OS0FWDI1 = OSCREC.KUCCOID;
    OS0FW01.OS0FWDI2 = OSCREC.KUMSTRID;
    OS0FW01.OS0FWDI3 = OSCREC.XNXCD;
    OS0FW01.OS0FWDI4 = OSCREC.XGPCD;
    TA1REC.TA1TBLKE = OS0FW01.OS0FWDIA; /* key value*/
    TA1REC.TA1LOCAT[2] = "S2      "; /* calling option*/
    TA1REC.TA1LOCAT[3] = "OS0FS12 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO4910  "; /* i/o mod name*/
    OS0FS02(); /* abort routine - no reset done*/
  end
  ;
  ;
  ;
  OS0FW01.OS0FWEOF = "N"; /* set end of file flag to no*/
  ;
  OS0FSN2(); /* select next for temp storage 2*/
  ;
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 100)
    converseLib.validationFailed(559); /* no products found for selection criteria*/
    OS0FW01.OS0FWERR = "Y";
  else
    while (OS0FW01.OS0FWEOF == "N") /* while there are lost demand rows*/
      OS0FSL2(); /* load and write temp storage 2*/
    end
  end
  ;
  ;
  ;
   /* close scan*/
  ;
  set SQLCA empty;
  ;
  OSJREC.OSJTASK = "C2";
  ;
  call "IO4910" (OSJREC, SQLCA, OSCREC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod-close  scan*/
  ;
  ;
      /* check db2 return code*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    OS0FSX2(); /* delete temp storage 2*/
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VWAIT001"; /* table view*/
    TA1REC.TA1PGMNM = "OS0F"; /* program name*/
    TA1REC.TA1MAP = "OS0FM020"; /* map name*/
    TA1REC.TA1TBLKE = " ";
    OS0FW01.OS0FWDI1 = OSCREC.KUCCOID;
    OS0FW01.OS0FWDI2 = OSCREC.KUMSTRID;
    OS0FW01.OS0FWDI3 = OSCREC.XNXCD;
    OS0FW01.OS0FWDI4 = OSCREC.XGPCD;
    TA1REC.TA1TBLKE = OS0FW01.OS0FWDIA; /* key value*/
    TA1REC.TA1LOCAT[2] = "C2      "; /* calling option*/
    TA1REC.TA1LOCAT[3] = "OS0FS12 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO4910  "; /* i/o mod name*/
    OS0FS02(); /* abort routine - no reset called*/
  end
  ;
end // end OS0FS12

// edit select critr. for product
Function OS0FS20()
  ;
  ;
  ;
   /* edit selection criteria for products*/
  ;
  ;
   /* edit selection field*/
  ;
  OS0FSEC();
  ;
  ;
   /* page number cannot be greater than maximum*/
   /* number of pages*/
  ;
  OS0FSEP();
  ;
  ;
        /* relational edit*/
   /* cannot change page number and select or delete products*/
   /* at the same time*/
  ;
  OS0FSRE();
  ;
  ;
  ;
   /* if page number not changed and no products selected*/
   /* or deleted, set error msg flag*/
  ;
  OS0FSNS();
  ;
  ;
   /* if no errors move map page to ws save page*/
   /* else restore it from ws save page*/
  ;
  if (OS0FW01.OS0FWERR == "N")
    OS0FW01.OS0FWSP1 = OS0FM010.OS0FMFPG;
  else
    OS0FM010.OS0FMFPG = OS0FW01.OS0FWSP1;
  end
  ;
end // end OS0FS20

// scroll os0fm010 backwards
Function OS0FS21()
  ;
  ;
  ;
   /* scroll map os0fm010 backwards*/
  ;
  if (OS0FM010.OS0FMFPG != OS0FW01.OS0FWSP1) /* page number changed*/
    converseLib.validationFailed(4); /* can't scroll and modify page*/
    OS0FW01.OS0FWERR = "Y";
    OS0FM010.OS0FMFPG = OS0FW01.OS0FWSP1; /* set map page to orig. number*/
  end
  ;
  ;
  if (OS0FM010.OS0FMFPG <= 1) /* top of page*/
    converseLib.validationFailed(192); /* end backward scroll*/
    OS0FW01.OS0FWERR = "Y";
    OS0FM010.OS0FMFPG = OS0FW01.OS0FWSP1; /* set map page to orig. number*/
  end
  ;
  ;
   /* if no errors subtract 1 from map page number,*/
   /* read temp storage 1 and build map os0fm010*/
  ;
  if (OS0FW01.OS0FWERR == "N")
    OS0FM010.OS0FMFPG = OS0FM010.OS0FMFPG - 1;
    OS0FW01.OS0FWSP1 = OS0FM010.OS0FMFPG; /* save current page number*/
    OS0FS24(); /* read temp storage 1 and build map*/
  end
  ;
  ;
  ;
   /* ***********************************************************/
end // end OS0FS21

// scroll os0fm010 forwards
Function OS0FS22()
  ;
  ;
  ;
   /* scroll map os0fm010 forward*/
  ;
  if (OS0FM010.OS0FMFPG != OS0FW01.OS0FWSP1) /* if page number changed*/
    converseLib.validationFailed(4); /* can't scroll and modify page*/
    OS0FW01.OS0FWERR = "Y";
    OS0FM010.OS0FMFPG = OS0FW01.OS0FWSP1; /* set map page to orig. number*/
  end
  ;
  if (OS0FM010.OS0FMFPG >= OS0FW01.OS0FWMX1) /* max pages*/
    converseLib.validationFailed(191); /* end page forward*/
    OS0FW01.OS0FWERR = "Y";
    OS0FM010.OS0FMFPG = OS0FW01.OS0FWSP1; /* set map page to orig. number*/
  end
  ;
   /* if no errors add 1 to map page number,*/
   /* read temp storage 1 and build map os0fm010*/
  ;
  if (OS0FW01.OS0FWERR == "N") /* no errors*/
    OS0FM010.OS0FMFPG = OS0FM010.OS0FMFPG + 1;
    OS0FW01.OS0FWSP1 = OS0FM010.OS0FMFPG; /* save current page number*/
    OS0FS24(); /* read temp storage 1 and build map*/
  end
  ;
end // end OS0FS22

// delete products
Function OS0FS23()
  ;
  ;
  ;
   /* delete products*/
  ;
  OS0FS20(); /* edit map*/
  ;
  if (OS0FW01.OS0FWERR == "N") /* if no errors*/
    if (OS0FW01.OS0FWSL1 == "D") /* if sel option is delete*/
      if (OS0FW01.OS0FWDF1 == "N") /* if first time for pf24 (delete)*/
        converseLib.validationFailed(551); /* press pf24 to confirm delete*/
        OS0FW01.OS0FWDF1 = "Y"; /* turn confirm delete flag on*/
      else /* if not first time for pf24*/
        OS0FW01.OS0FWUF1 = "N"; /* turn update ts1 flag off*/
        OS0FW01.OS0FWRC = 0; /* init record counter*/
        OS0FSSM(); /* save map option*/
        OS0FSDP(); /* delete products selected*/
        OS0FW01.OS0FWERR = "Y"; /* reconverse*/
        OS0FW01.OS0FWDF1 = "N"; /* turn confirm delete flag off*/
      end
    else
      OS0FM020.CAMSG = "ENTER D TO DELETE";
      OS0FW01.OS0FWERR = "Y";
      OS0FW01.OS0FWDF1 = "N"; /* turn confirm delete flag off*/
    end
  else
    OS0FW01.OS0FWDF1 = "N"; /* turn confirm delete flag off*/
  end
  ;
  ;
  ;
end // end OS0FS23

// read ts1 & build os0fm010
Function OS0FS24()
  ;
  ;
  ;
   /* read temp storage 1 and build os0fm010*/
  ;
  OS0FSR1(); /* read temporary storage 1*/
  ;
  OS0FSB1(); /* build map from temporary storage 1*/
  ;
  ;
  ;
  ;
   /* *******************************************************/
end // end OS0FS24

// edit selct criteria - m020
Function OS0FS30()
  ;
  ;
  ;
   /* edit selection criteria for products*/
  ;
  ;
   /* edit option  field*/
  ;
  OS0FSO2();
  ;
  ;
  ;
   /* page number cannot be greater than maximum*/
   /* number of pages*/
  ;
  OS0FSP2();
  ;
  ;
  ;
        /* relational edit*/
   /* cannot change page number and select or delete products*/
   /* at the same time*/
  ;
  OS0FSE2();
  ;
  ;
  ;
   /* if page number not changed and no products selected*/
   /* or deleted, set error msg flag*/
  ;
  OS0FSNP();
  ;
  ;
  ;
  if (OS0FW01.OS0FWERR == "N")
    OS0FW01.OS0FWSP2 = OS0FM020.OS0FMPG;
  else
    OS0FM020.OS0FMPG = OS0FW01.OS0FWSP2;
  end
end // end OS0FS30

// scroll os0fm020 backward
Function OS0FS31()
  ;
  ;
  ;
   /* scroll map os0fm020 backward*/
  ;
  if (OS0FM020.OS0FMPG != OS0FW01.OS0FWSP2) /* page number changed*/
    converseLib.validationFailed(4); /* can't scroll and modify page*/
    OS0FW01.OS0FWERR = "Y";
    OS0FM020.OS0FMPG = OS0FW01.OS0FWSP2; /* set pg back to orig. number*/
  end
  ;
  ;
  if (OS0FM020.OS0FMPG <= 1) /* top of page*/
    converseLib.validationFailed(192); /* end backward scroll*/
    OS0FW01.OS0FWERR = "Y";
    OS0FM020.OS0FMPG = OS0FW01.OS0FWSP2; /* set pg back to orig. number*/
  end
  ;
  ;
   /* if no errors subtract 1 from map page number,*/
   /* read temp storage 1 and build map os0fm010*/
  ;
  if (OS0FW01.OS0FWERR == "N")
    OS0FM020.OS0FMPG = OS0FM020.OS0FMPG - 1;
    OS0FW01.OS0FWSP2 = OS0FM020.OS0FMPG; /* save page number*/
    OS0FS34(); /* read temp storage 2 and build map*/
    OS0FM020.OS0FMPG = OS0FW01.OS0FWSP2; /* set pg back to orig. number*/
  end
  ;
  ;
  ;
   /* ***********************************************************/
end // end OS0FS31

// scroll os0fms020 forward
Function OS0FS32()
  ;
  ;
  ;
   /* scroll map os0fm020 forward*/
  ;
  if (OS0FM020.OS0FMPG != OS0FW01.OS0FWSP2) /* if page number changed*/
    converseLib.validationFailed(4); /* can't scroll and modify page*/
    OS0FW01.OS0FWERR = "Y";
    OS0FM020.OS0FMPG = OS0FW01.OS0FWSP2; /* set pg to original number*/
  end
  ;
  if (OS0FM020.OS0FMPG >= OS0FW01.OS0FWMX2) /* max pages*/
    converseLib.validationFailed(191); /* end page forward*/
    OS0FW01.OS0FWERR = "Y";
    OS0FM020.OS0FMPG = OS0FW01.OS0FWSP2; /* set pg to original number*/
  end
  ;
   /* if no errors add 1 to map page number,*/
   /* read temp storage 1 and build map os0fm020*/
  ;
  if (OS0FW01.OS0FWERR == "N") /* no errors*/
    OS0FM020.OS0FMPG = OS0FM020.OS0FMPG + 1;
    OS0FW01.OS0FWSP2 = OS0FM020.OS0FMPG; /* save current page number*/
    OS0FS34(); /* read temp storage 2 and build map*/
  end
end // end OS0FS32

// delete product details - m020
Function OS0FS33()
  ;
  ;
  ;
   /* delete product details*/
  ;
  OS0FS30(); /* edit map*/
  ;
  if (OS0FW01.OS0FWERR == "N") /* if no errors*/
    if (OS0FW01.OS0FWSL2 == "D") /* if sel option is delete*/
      if (OS0FW01.OS0FWDF2 == "N") /* if first time for pf24 (delete)*/
        converseLib.validationFailed(551); /* press pf24 to confirm delete*/
        OS0FW01.OS0FWDF2 = "Y"; /* turn confirm delete flag on*/
      else /* if not first time for pf24*/
        OS0FW01.OS0FWUF2 = "N"; /* turn update ts2 flag off*/
        OS0FW01.OS0FWRC = 0; /* init record counter*/
        OS0FSSO(); /* save map m020 option*/
        OS0FSD1(); /* delete products selected*/
        OS0FW01.OS0FWERR = "Y"; /* reconverse*/
        OS0FW01.OS0FWDF2 = "N"; /* turn confirm delete flag off*/
      end
    else
      OS0FM020.CAMSG = "ENTER D TO DELETE";
      OS0FW01.OS0FWERR = "Y";
      OS0FW01.OS0FWDF2 = "N"; /* turn confirm delete flag off*/
    end
  else
    OS0FW01.OS0FWDF2 = "N"; /* turn confirm delete flag off*/
  end
end // end OS0FS33

// read ts2 and build os0fm020
Function OS0FS34()
  ;
  ;
  ;
   /* read temp storage 2 and build os0fm020*/
  ;
  OS0FSR2(); /* read temporary storage 2*/
  ;
  OS0FSB2(); /* build map from temporary storage 2*/
  ;
end // end OS0FS34

// edit quantities
Function OS0FS40()
  ;
  ;
  ;
   /* edit quantities*/
  ;
   /* quantities must be positive and numeric*/
   /* if user hits 'eof' key quantity will be set to zero*/
   /* if total qty equals zero msg #557 will be displayed*/
  ;
  OS0FW01.OS0FWQTY = 0; /* init total qty field*/
  ;
  OS0FW01.OS0FWSB3 = 1; /* init map m030 counter*/
  ;
  while (OS0FW01.OS0FWSB3 <= 40)
    ;
    if (OS0FM030.OS0FMQTY[OS0FWSB3] >= 0
     && OS0FM030.OS0FMSZ[OS0FWSB3] != " ")
      ;
       /* add map quantity to ws total quantity*/
      ;
      OS0FW01.OS0FWQTY = OS0FW01.OS0FWQTY + OS0FM030.OS0FMQTY[OS0FWSB3];
    end
    OS0FW01.OS0FWSB3 = OS0FW01.OS0FWSB3 + 1;
  end
  ;
end // end OS0FS40

// update db2 with new qty
Function OS0FS41()
  ;
  ;
  ;
   /* update exsiting waiting list record*/
   /* and update temp storage 2*/
  ;
  ;
   /* if map size qty description equals the waiting list descrpt*/
   /* move the map qty to oscrec to update db2*/
   /* else there is no match so move 0 to oscrec qty field*/
  ;
  OS0FW01.OS0FWSB1 = 1; /* init oscrec/sy4rec counter*/
  OS0FW01.OS0FWSB3 = 1; /* init map m030 counter*/
  ;
  while (OS0FW01.OS0FWSB1 <= 40)
    if (SY4REC.SY4IDDSC[OS0FWSB1] == OS0FM030.OS0FMSZ[OS0FWSB3]
     && SY4REC.SY4IDDSC[OS0FWSB1] != " ")
      OSCREC.OPTDMDQT[OS0FWSB1] = OS0FM030.OS0FMQTY[OS0FWSB3];
      OS0FW01.OS0FWSB3 = OS0FW01.OS0FWSB3 + 1;
    else
      OSCREC.OPTDMDQT[OS0FWSB1] = 0; /* no match*/
    end
    OS0FW01.OS0FWSB1 = OS0FW01.OS0FWSB1 + 1;
  end
  ;
  OS0FSUR(); /* update rows on database*/
  ;
  OS0FM030.CAMSG = "WAITING LIST RECORD UPDATED";
end // end OS0FS41

// delete size details
Function OS0FS43()
  ;
  ;
  ;
  ;
   /* delete size details*/
  ;
  if (OS0FW01.OS0FWDF3 == "N") /* if first time for pf24 (delete)*/
    converseLib.validationFailed(551); /* press pf24 to confirm delete*/
    OS0FW01.OS0FWDF3 = "Y"; /* turn confirm delete flag on*/
    OS0FW01.OS0FWWF = "N"; /* turn 0 qty warning flag off*/
  else /* if not first time for pf24*/
    OS0FSD3(); /* delete waiting list selected*/
    COMMAREA.CAMSG = "RECORD DELETED - NEXT WAITING LIST RECORD";
    OS0FW01.OS0FWDF3 = "N"; /* turn confirm delete flag off*/
  end
  ;
  ;
end // end OS0FS43

// reset attrib,os0fm010,criteria
Function OS0FSA1()
  ;
  ;
  ;
   /* set all enterable map fields to normal so*/
   /* corrected errors are not highlighted*/
  ;
   /* customer*/
  ;
  set OS0FM010.KUCCOID normal;
  set OS0FM010.KUMSTRID normal;
  set OS0FM010.XNXCD normal;
  ;
   /* need date*/
  ;
  set OS0FM010.OSJNDTLO normal;
  set OS0FM010.OSJNDTHI normal;
  ;
   /* drop date*/
  ;
  set OS0FM010.OSJDDTLO normal;
  set OS0FM010.OSJDDTHI normal;
  ;
   /* lost demand date*/
  ;
  set OS0FM010.OSJLDTLO normal;
  set OS0FM010.OSJLDTHI normal;
  ;
   /* gpc*/
  ;
  set OS0FM010.XGPCD normal;
  ;
   /* base order type*/
  ;
  set OS0FM010.XOBCD normal;
  ;
   /* demand code*/
  ;
  set OS0FM010.OPTDMND normal;
  ;
   /* clear camsg field*/
  ;
  OS0FM010.CAMSG = " ";
end // end OS0FSA1

// reset qty field - m030
Function OS0FSA3()
  ;
  ;
  ;
   /* set all enterable fields to normal so*/
   /* corrected errors are not highlighted*/
  ;
  OS0FW01.OS0FWSB3 = 1; /* init map m030 counter*/
  ;
  while (OS0FW01.OS0FWSB3 <= 40)
    if (OS0FM030.OS0FMSZ[OS0FWSB3] > " ") /* IF SIZE IS SHOWN*/
      set OS0FM030.OS0FMQTY[OS0FWSB3] initialAttributes; /* unprotect quantity field*/
      set OS0FM030.OS0FMSZ[OS0FWSB3] initialAttributes; /* unprotect size field*/
    else
      set OS0FM030.OS0FMQTY[OS0FWSB3] skip, invisible; /* protect quantity field*/
      set OS0FM030.OS0FMSZ[OS0FWSB3] skip, invisible; /* protect size field*/
    end
    OS0FW01.OS0FWSB3 = OS0FW01.OS0FWSB3 + 1;
  end
end // end OS0FSA3

// build map os0fm010 from ts1
Function OS0FSB1()
  ;
  ;
  ;
   /* build the map from temporary storage 1*/
  ;
  OS0FW01.OS0FWSUB = 1;
  ;
  while (OS0FW01.OS0FWSUB <= 20)
    OS0FM010.SY1STNBR[OS0FWSUB] = OS0FW02.SY1STNBR[OS0FWSUB];
    OS0FM010.SY2CLRID[OS0FWSUB] = OS0FW02.SY2CLRID[OS0FWSUB];
    OS0FM010.XDMCD[OS0FWSUB] = OS0FW02.XDMCD[OS0FWSUB];
    OS0FM010.OS0FMSYN[OS0FWSUB] = OS0FW02.OS0FWSYN[OS0FWSUB];
    OS0FM010.OS0FMSEL[OS0FWSUB] = OS0FW02.OS0FWSEL[OS0FWSUB];
    ;
     /* check previously entered  fields to build map correctly*/
    ;
    OS0FSS1();
    ;
    OS0FW01.OS0FWSUB = OS0FW01.OS0FWSUB + 1;
  end
  ;
  ;
  ;
   /* *************************************************************/
end // end OS0FSB1

// build map os0fm020 from ts2
Function OS0FSB2()
  ;
  ;
  ;
   /* build the map os0fm020 from temporary storage 2*/
  ;
  OS0FW01.OS0FWSUB = 1;
  ;
  OS0FW01.OS0FWDEL = "Y"; /* turn all records deleted flag on*/
  ;
  ;
  while (OS0FW01.OS0FWSUB <= 22)
    OS0FM020.OS0FMSEL[OS0FWSUB] = OS0FW03.OS0FWSEL[OS0FWSUB];
    OS0FM020.OS0FMNDT[OS0FWSUB] = OS0FW03.OP1CUNDT[OS0FWSUB]; /* need dt*/
    OS0FM020.OS0FMLDT[OS0FWSUB] = OS0FW03.OSCLDMDT[OS0FWSUB]; /* lost dt*/
    OS0FM020.OS0FMDDT[OS0FWSUB] = OS0FW03.OPTDRPDT[OS0FWSUB]; /* drop dt*/
    OS0FM020.XOBCD[OS0FWSUB] = OS0FW03.XOBCD[OS0FWSUB]; /* order type cd*/
    OS0FM020.XWHCD[OS0FWSUB] = OS0FW03.XWHCD[OS0FWSUB]; /* whse*/
    OS0FM020.OPTDMND[OS0FWSUB] = OS0FW03.OPTDMND[OS0FWSUB]; /* demand tp*/
    OS0FM020.OS0FMQTY[OS0FWSUB] = OS0FW03.OS0FWQTY[OS0FWSUB]; /* qty*/
    ;
     /* check previously entered fields to build map correctly*/
    ;
    OS0FSS2();
    ;
    OS0FW01.OS0FWSUB = OS0FW01.OS0FWSUB + 1;
  end
  ;
  ;
  ;
   /* *************************************************************/
end // end OS0FSB2

// bld rec for db2 for detail rec
Function OS0FSB4()
  ;
  ;
  ;
   /* build key to select product records*/
  ;
  OS0FSBR();
  ;
  ;
   /* product fields*/
  ;
  OSCREC.SY1STNBR = OS0FM020.SY1STNBR;
  OSCREC.SY2CLRID = OS0FM020.SY2CLRID;
  OSCREC.XDMCD = OS0FM020.XDMCD;
  ;
  ;
   /* move saved dates to osjrec*/
  ;
  OSJREC.OSJGROUP = OS0FW01.OSJGROUP;
end // end OS0FSB4

// build record to pass to db2
Function OS0FSBR()
  ;
  ;
  ;
   /* build record to pass to select products*/
  ;
  ;
  ;
  set OSCREC empty;
  ;
   /* beginning/ending fields for*/
   /* lost demand, drop and need dates*/
   /* are all moved to osjrec when editted*/
  ;
  ;
  ;
   /* lost demand type code*/
  ;
  if (OS0FM010.OPTDMND == " ")
    OSCREC.OPTDMND = "**";
  else
    OSCREC.OPTDMND = OS0FM010.OPTDMND;
  end
  ;
  ;
  ;
   /* base order type*/
  ;
  if (OS0FM010.XOBCD == " ")
    OSCREC.XOBCD = "**";
  else
    OSCREC.XOBCD = OS0FM010.XOBCD;
  end
  ;
  ;
  ;
   /* customer  number*/
  ;
  OSCREC.KUCCOID = OS0FM010.KUCCOID; /* load key - company*/
  OSCREC.KUMSTRID = OS0FM010.KUMSTRID; /* load key - store*/
  OSCREC.XNXCD = OS0FM010.XNXCD; /* load key - dept*/
  ;
  ;
  ;
   /* gpc*/
  ;
  OSCREC.XGPCD = OS0FM010.XGPCD;
  ;
  ;
  ;
   /* *************************************************************/
end // end OS0FSBR

// cp oscrec qty with m030 qty
Function OS0FSCH()
  ;
  ;
   /* if map size description is equal to sy4rec description*/
     /* compare oscrec quantity with m030 quantity to*/
     /* see if map qty has been changed*/
  ;
  OS0FW01.OS0FWCHG = "N"; /* init qty change flag to no*/
  OS0FW01.OS0FWSB1 = 1; /* init oscrec/sy4rec counter*/
  OS0FW01.OS0FWSB3 = 1; /* init map m030 counter*/
  ;
  while (OS0FW01.OS0FWSB1 <= 40)
    if (OS0FM030.OS0FMSZ[OS0FWSB3] == SY4REC.SY4IDDSC[OS0FWSB1]
     && SY4REC.SY4IDDSC[OS0FWSB1] != " ")
      if (OS0FM030.OS0FMQTY[OS0FWSB3] == OSCREC.OPTDMDQT[OS0FWSB1])
        /* NEXT SENTENCE - no change*/
      else
        OS0FW01.OS0FWCHG = "Y"; /* qty change flag*/
      end
      OS0FW01.OS0FWSB3 = OS0FW01.OS0FWSB3 + 1; /* add 1 to map counter*/
    end
    OS0FW01.OS0FWSB1 = OS0FW01.OS0FWSB1 + 1; /* add 1 to oscrec/sy4rec ctr*/
  end
  ;
end // end OS0FSCH

// edit customer
Function OS0FSCU()
  ;
  ;
  ;
   /* edit customer*/
  ;
   /* get first gpc rec for customer*/
  ;
  KUNREC.KUCCOID = OS0FM010.KUCCOID; /* load key - company*/
  KUNREC.KUMSTRID = OS0FM010.KUMSTRID; /* load key - store*/
  KUNREC.XNXCD = OS0FM010.XNXCD; /* load key - dept*/
  ;
  if (OS0FM010.XGPCD == "02" /* footwear*/
   || OS0FM010.XGPCD == "03") /* apparel*/
    KUNREC.XGPCD = OS0FM010.XGPCD; /* load key - gpc*/
  else
    KUNREC.XGPCD = "**"; /* load key - gpc*/
  end
  ;
  OS0FSGS();
  ;
  ;
  ;
   /* read dcust.vcust001*/
  ;
   /* SET SQLCA EMPTY;*/
  ;
   /* CALL IO0280 'SS',SQLCA,KUNREC (NOMAPS,NONCSP; call i/o mod*/
  ;
  ;
      /* check db2 return code*/
  ;
   /* IF SQLCA.SQLCODE EQ 0           ; check for good rc*/
   /* next sentence*/
   /* ELSE ;*/
    /* SET ERRSQLCA EMPTY;*/
    /* MOVE SQLCA TO ERRSQLCA;*/
    /* MOVE 'DCUST   ' TO TA1REC.TA1DBASE   ; data base name*/
    /* MOVE 'VCUST001' TO TA1REC.TA1TBLVU   ; table view*/
    /* MOVE ' ' TO TA1REC.TA1TBLKE   ; key value*/
    /* MOVE 'OS0FM010' TO TA1REC.TA1MAP     ; map name*/
    /* MOVE KUNREC.KUCCOID TO OS0FW01.OS0FWDI1;*/
    /* MOVE KUNREC.KUMSTRID TO OS0FW01.OS0FWDI2;*/
    /* MOVE KUNREC.XNXCD TO OS0FW01.OS0FWDI3;*/
    /* MOVE KUNREC.XGPCD TO OS0FW01.OS0FWDI4;*/
    /* MOVE OS0FW01.OS0FWDIA TO TA1REC.TA1TBLKE; key value*/
    /* MOVE 'OS0FSCU ' TO TA1REC.TA1LOCAT(3); statement group*/
    /* MOVE 'IO0280  ' TO TA1REC.TA1LOCAT(4); i/o mod name*/
    /* OS0FS02                       ; abend routine - no reset*/
   /* END ;*/
  ;
  ;
   /* get first gpc rec for customer*/
  ;
   /* MOVE ' ' TO KUNREC.XXXSTAT      ; init status for first read*/
   /* MOVE 'N' TO OS0FW01.OS0FWIAC    ; init inactive cust flag*/
  ;
   /* WHILE KUNREC.XXXSTAT NE 'A' ; read until active record found*/
    /* AND SQLCA.SQLCODE EQ 0        ; still good return codes*/
    /* OS0FSC2                       ; selects records*/
   /* END ;*/
  ;
  ;
   /* CALL IO0280 'CS',SQLCA,KUNREC (NOMAPS,NONCSP; close cursor*/
  ;
  ;
  ;
   /* *************************************************************/
end // end OS0FSCU

// delete details sel - m020
Function OS0FSD1()
  ;
  ;
  ;
   /* build key, delete products from database,*/
   /* update temp storage 2*/
  ;
  OS0FW01.OS0FWSUB = 1;
  ;
  OS0FW01.OS0FWDEL = "Y"; /* set all records deleted flag on*/
  ;
  while (OS0FW01.OS0FWSUB <= 22)
    if (OS0FM020.OS0FMSEL[OS0FWSUB] == "D") /* if selection 'd' entered*/
      OS0FSK1(); /* build key*/
      OS0FSD2(); /* delete rows from db*/
      OS0FSS2(); /* reset field attribute*/
    end
    OS0FW01.OS0FWSUB = OS0FW01.OS0FWSUB + 1;
  end
  ;
  if (OS0FW01.OS0FWUF2 == "Y") /* if update ts2 flag on*/
    OS0FSU2(); /* update temp storage 2*/
  end
  ;
  OS0FM020.CAMSG = OS0FW01.OS0FWMSG;
  ;
end // end OS0FSD1

// delete rows from db - m020
Function OS0FSD2()
  ;
  ;
  ;
   /* delete rows from database*/
  ;
  set SQLCA empty;
  ;
  OSJREC.OSJTASK = "D ";
  ;
  call "IO4910" (OSJREC, SQLCA, OSCREC) {isNoRefresh = yes, isExternal = yes}; /* select next*/
  ;
  ;
      /* check db2 return code*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100)
    OS0FW01.OS0FWRC = OS0FW01.OS0FWRC + 1; /* add 1 to record count*/
    OS0FM020.OS0FMSEL[OS0FWSUB] = "*"; /* map option field*/
    OS0FW03.OS0FWSEL[OS0FWSUB] = "*"; /* ws option field*/
    OS0FW01.OS0FWUF2 = "Y"; /* turn update ts2 flag on*/
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VWAIT001"; /* table view*/
    TA1REC.TA1PGMNM = "OS0F"; /* program name*/
    TA1REC.TA1MAP = "OS0FM020"; /* map name*/
    TA1REC.TA1TBLKE = " ";
    OS0FW01.OS0FWDI1 = OSCREC.KUCCOID;
    OS0FW01.OS0FWDI2 = OSCREC.KUMSTRID;
    OS0FW01.OS0FWDI3 = OSCREC.XNXCD;
    OS0FW01.OS0FWDI4 = OSCREC.XGPCD;
    TA1REC.TA1TBLKE = OS0FW01.OS0FWDIA; /* key value*/
    TA1REC.TA1LOCAT[2] = "D "; /* statement group*/
    TA1REC.TA1LOCAT[3] = "OS0FSD2 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO4910  "; /* i/o mod name*/
    OS0FS02();
  end
  ;
end // end OS0FSD2

// delete sizes selected - m030
Function OS0FSD3()
  ;
  ;
  ;
   /* build key, delete products from database,*/
   /* update temp storage 2*/
  ;
  OS0FSK3(); /* build key*/
  OS0FSD5(); /* delete rows from db and update ts2*/
  ;
end // end OS0FSD3

// build rows to delete prod
Function OS0FSD4()
  ;
  ;
  ;
   /* build key to delete vwait001 records for a product*/
  ;
  OS0FSBR(); /* move customer, xobcd, gpc, type*/
  ;
  ;
   /* product fields*/
  ;
  OSCREC.SY1STNBR = OS0FW02.SY1STNBR[OS0FWSUB];
  OSCREC.SY2CLRID = OS0FW02.SY2CLRID[OS0FWSUB];
  OSCREC.XDMCD = OS0FW02.XDMCD[OS0FWSUB];
  ;
  ;
   /* move date parms to osjrec - the ones entered in os0fm010*/
   /* osjrec may contain dates used for select, delete or update*/
   /* of detail records in os0fm020 or os0fm030, so used the*/
   /* saved date parms*/
  ;
  OSJREC.OSJGROUP = OS0FW01.OSJGROUP;
  ;
end // end OS0FSD4

// delete rows from db - m030
Function OS0FSD5()
  ;
  ;
  ;
   /* delete rows from database - m030*/
  ;
  set SQLCA empty;
  ;
  OSJREC.OSJTASK = "D ";
  ;
  call "IO4910" (OSJREC, SQLCA, OSCREC) {isNoRefresh = yes, isExternal = yes}; /* select next*/
  ;
  ;
      /* check db2 return code*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100)
    OS0FW01.OS0FWRC = OS0FW01.OS0FWRC + 1; /* add 1 to record count*/
    OS0FM020.OS0FMSEL[OS0FWSB2] = "*"; /* map option field*/
    OS0FW03.OS0FWSEL[OS0FWSB2] = "*"; /* ws option field*/
    OS0FW01.OS0FWUF2 = "Y"; /* turn update ts2 flag on*/
    OS0FW01.OS0FWSCF = "N"; /* size selected flag*/
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VWAIT001"; /* table view*/
    TA1REC.TA1PGMNM = "OS0F"; /* program name*/
    TA1REC.TA1MAP = "OS0FM030"; /* map name*/
    TA1REC.TA1TBLKE = " ";
    OS0FW01.OS0FWDI1 = OSCREC.KUCCOID;
    OS0FW01.OS0FWDI2 = OSCREC.KUMSTRID;
    OS0FW01.OS0FWDI3 = OSCREC.XNXCD;
    OS0FW01.OS0FWDI4 = OSCREC.XGPCD;
    TA1REC.TA1TBLKE = OS0FW01.OS0FWDIA; /* key value*/
    TA1REC.TA1LOCAT[2] = "D "; /* statement group*/
    TA1REC.TA1LOCAT[3] = "OS0FSD5 "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO4910  "; /* i/o mod name*/
    OS0FS02();
  end
  ;
end // end OS0FSD5

// edit beg-end drop date
Function OS0FSDD()
  ;
  ;
  ;
   /* edit begin and end drop date*/
  ;
  ;
   /* drop date - if entered, it must be valid*/
   /* ending date must not be less than beginning date*/
  ;
   /* ending drop date*/
  ;
  if (OS0FM010.OSJDDTHI == " "
   || OS0FM010.OSJDDTHI == "MMDDYY")
    OSJREC.OSJDDTHI = 99999999; /* init to high value if blank*/
  else
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "A";
    TA2REC.TA2GRGA = OS0FM010.OSJDDTHI;
    ;
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    ;
    if (TA2REC.TA2RTNCD == 0)
      OSJREC.OSJDDTHI = TA2REC.TA2GRGGN;
    else
      converseLib.validationFailed(107); /* date is not valid - format is mmddyy*/
      set OS0FM010.OSJDDTHI cursor, bold;
      OS0FW01.OS0FWERR = "Y";
      OSJREC.OSJDDTHI = 99999999;
    end
  end
  ;
   /* beginning drop date*/
  ;
  if (OS0FM010.OSJDDTLO == " "
   || OS0FM010.OSJDDTLO == "MMDDYY")
    OSJREC.OSJDDTLO = 0; /* init to 0 if blank*/
  else
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "A";
    TA2REC.TA2GRGA = OS0FM010.OSJDDTLO;
    ;
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    ;
    if (TA2REC.TA2RTNCD == 0)
      OSJREC.OSJDDTLO = TA2REC.TA2GRGGN;
    else
      converseLib.validationFailed(107); /* date is not valid - format is mmddyy*/
      set OS0FM010.OSJDDTLO cursor, bold;
      OS0FW01.OS0FWERR = "Y";
      OSJREC.OSJDDTLO = 0;
    end
  end
  ;
   /* begin drop date cannot be gt than end drop date*/
  ;
  if (OSJREC.OSJDDTLO > OSJREC.OSJDDTHI)
    converseLib.validationFailed(106);
                                   /* begin date cannot be gt than end date*/
    OS0FW01.OS0FWERR = "Y";
    set OS0FM010.OSJDDTLO cursor, bold;
  end
  ;
end // end OS0FSDD

// delete prods selected - m010
Function OS0FSDP()
  ;
  ;
  ;
   /* build key, delete products from database*/
   /* and update temp storage 1*/
  ;
  OS0FW01.OS0FWSUB = 1;
  ;
  while (OS0FW01.OS0FWSUB <= 20)
    if (OS0FW02.OS0FWSEL[OS0FWSUB] == "D") /* if delete entered*/
      OS0FSD4(); /* build key*/
      OS0FSDR(); /* delete rows from db*/
      OS0FSS1(); /* reset field attribute*/
    end
    OS0FW01.OS0FWSUB = OS0FW01.OS0FWSUB + 1;
  end
  ;
  if (OS0FW01.OS0FWUF1 == "Y") /* update ts1 flag*/
    OS0FSU1(); /* update temp storage 1*/
  end
  ;
   /* move message deleted to map m010*/
  ;
  OS0FM010.CAMSG = OS0FW01.OS0FWMSG;
end // end OS0FSDP

// delete db rows - m010
Function OS0FSDR()
  ;
  ;
  ;
   /* delete rows from database*/
  ;
  set SQLCA empty;
  ;
  OSJREC.OSJTASK = "D ";
  ;
  call "IO4910" (OSJREC, SQLCA, OSCREC) {isNoRefresh = yes, isExternal = yes}; /* select next*/
  ;
  ;
      /* check db2 return code*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0 /* check for good rc*/
   || SQLCA.VAGen_SQLCODE == 100)
    OS0FW01.OS0FWRC = OS0FW01.OS0FWRC + 1;
                                   /* add 1 to prod rows del counter*/
    OS0FM010.OS0FMSEL[OS0FWSUB] = "*"; /* map option field*/
    OS0FW02.OS0FWSEL[OS0FWSUB] = "*"; /* ws option field*/
    OS0FW01.OS0FWUF1 = "Y"; /* turn update ts1 flag on*/
  else
    TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
    TA1REC.TA1TBLVU = "VWAIT001"; /* table view*/
    TA1REC.TA1PGMNM = "OS0F"; /* program name*/
    TA1REC.TA1MAP = "OS0FM010"; /* map name*/
    TA1REC.TA1TBLKE = " ";
    OS0FW01.OS0FWDI1 = OSCREC.KUCCOID;
    OS0FW01.OS0FWDI2 = OSCREC.KUMSTRID;
    OS0FW01.OS0FWDI3 = OSCREC.XNXCD;
    OS0FW01.OS0FWDI4 = OSCREC.XGPCD;
    TA1REC.TA1TBLKE = OS0FW01.OS0FWDIA; /* key value*/
    TA1REC.TA1LOCAT[2] = "D "; /* statement group*/
    TA1REC.TA1LOCAT[3] = "OS0FSDR "; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO4910  "; /* i/o mod name*/
    OS0FS02();
  end
  ;
  ;
  ;
   /* **********************************************************/
end // end OS0FSDR

// edit lost demand type code
Function OS0FSDT()
  ;
  ;
  ;
   /* edit lost demand type code - not required*/
  ;
  if (OS0FM010.OPTDMND == " "
   || OS0FM010.OPTDMND == "LD"
   || OS0FM010.OPTDMND == "PD"
   || OS0FM010.OPTDMND == "SD")
     /* next sentence*/
  else
    converseLib.validationFailed(554); /* invalid lost demand type*/
    OS0FW01.OS0FWERR = "Y";
    set OS0FM010.OPTDMND cursor, bold;
  end
  ;
end // end OS0FSDT

// edit page number and sel field
Function OS0FSE2()
  ;
  ;
  ;
   /* cannot change page number and select or delete products*/
   /* at the same time*/
  ;
  if (OS0FM020.OS0FMPG == OS0FW01.OS0FWSP2) /* map page eq saved page*/
     /* next sentence*/
  else /* page number changed*/
    if (OS0FW01.OS0FWSL2 != " ") /* a product is selected or deleted*/
      OS0FW01.OS0FWERR = "Y";
      converseLib.validationFailed(558); /* can't change page and sel products*/
      set OS0FM020.OS0FMPG cursor, bold;
    end
  end
end // end OS0FSE2

// edit selection field
Function OS0FSEC()
  ;
  ;
  ;
   /* edit selection field*/
  ;
  ;
   /* option must be 's'(select), 'd'(delete), 'v' (viewed),*/
           /* ' '(blank), or '*' (deleted)*/
  ;
  OS0FW01.OS0FWSUB = 20;
  ;
  while (OS0FW01.OS0FWSUB >= 1)
    if (OS0FM010.OS0FMSEL[OS0FWSUB] == "S"
     || OS0FM010.OS0FMSEL[OS0FWSUB] == "D"
     || OS0FM010.OS0FMSEL[OS0FWSUB] == "V"
     || OS0FM010.OS0FMSEL[OS0FWSUB] == " "
     || OS0FM010.OS0FMSEL[OS0FWSUB] == "*")
      ;
       /* check for USER entered 'v' or '*'*/
       /* these are invalid entries*/
      ;
      if (OS0FM010.OS0FMSEL[OS0FWSUB] == "V"
       || OS0FM010.OS0FMSEL[OS0FWSUB] == "*")
        if (OS0FM010.OS0FMSEL[OS0FWSUB] != OS0FW02.OS0FWSEL[OS0FWSUB])
          OS0FW01.OS0FWERR = "Y";
          converseLib.validationFailed(272); /* selection code not valid*/
          set OS0FM010.OS0FMSEL[OS0FWSUB] cursor, bold;
        end
      end
    else
      OS0FW01.OS0FWERR = "Y";
      converseLib.validationFailed(272); /* selection code not valid*/
      set OS0FM010.OS0FMSEL[OS0FWSUB] cursor, bold;
    end
    OS0FW01.OS0FWSUB = OS0FW01.OS0FWSUB - 1;
  end
  ;
  ;
  ;
   /* cannot select or delete at the same time*/
  ;
   /* init ws option field for comparison*/
   /* **  WARNING - DO NOT RESET THIS FIELD*/
                 /* USED FOR ALL EDITS !!*/
  ;
  OS0FW01.OS0FWSL1 = " ";
  ;
  OS0FW01.OS0FWSUB = 20;
  while (OS0FW01.OS0FWSUB >= 1)
    if (OS0FM010.OS0FMSEL[OS0FWSUB] == "S"
     || OS0FM010.OS0FMSEL[OS0FWSUB] == "D")
      if (OS0FW01.OS0FWSL1 > " ")
        if (OS0FW01.OS0FWSL1 == OS0FM010.OS0FMSEL[OS0FWSUB])
           /* next sentence - no error*/
        else
          OS0FW01.OS0FWERR = "Y";
          converseLib.validationFailed(556); /* can't select and delete at the same time*/
          set OS0FM010.OS0FMSEL[OS0FWSUB] cursor, bold;
        end
      else
        OS0FW01.OS0FWSL1 = OS0FM010.OS0FMSEL[OS0FWSUB];
      end
    end
    OS0FW01.OS0FWSUB = OS0FW01.OS0FWSUB - 1;
  end
  ;
  ;
  ;
   /* **********************************************************8*/
end // end OS0FSEC

// edit gpc
Function OS0FSEG()
  ;
  ;
  ;
   /* edit gpc -  required*/
  ;
  OS0FM010.OS0FMGP = " "; /* clear gpc abbreviation*/
  ;
  if (OS0FM010.XGPCD in XGPTBL.XGPCD)
    OS0FM010.OS0FMGP = XGPTBL.XGPABRV[sysVar.arrayIndex];
  else
    converseLib.validationFailed(138); /* gpc is not valid*/
    OS0FW01.OS0FWERR = "Y";
    set OS0FM010.XGPCD cursor, bold;
  end
  ;
  ;
  ;
   /* *************************************************************/
end // end OS0FSEG

// edit page number
Function OS0FSEP()
  ;
  ;
  ;
   /* page number cannot be greater than maximum*/
   /* number of pages or less than 1*/
  ;
  if (OS0FM010.OS0FMFPG > OS0FM010.OS0FMLPG)
    OS0FW01.OS0FWERR = "Y";
    converseLib.validationFailed(3); /* page requested exceeds total pages*/
    set OS0FM010.OS0FMFPG cursor, bold;
  end
  ;
  if (OS0FM010.OS0FMFPG < 1)
    OS0FW01.OS0FWERR = "Y";
    converseLib.validationFailed(5); /* page requested can't be less than 1*/
    set OS0FM010.OS0FMFPG cursor, bold;
  end
  ;
end // end OS0FSEP

// get wait list details
Function OS0FSGD()
  ;
  ;
  ;
   /* find selected waiting list details*/
  ;
  OS0FM030.OS0FMNDT = OS0FW03.OP1CUNDT[OS0FWSB2]; /* need date*/
  OS0FM030.OS0FMDDT = OS0FW03.OPTDRPDT[OS0FWSB2]; /* drop date*/
  OS0FM030.OS0FMLDT = OS0FW03.OSCLDMDT[OS0FWSB2]; /* lost date*/
  OS0FM030.OPTDMND = OS0FW03.OPTDMND[OS0FWSB2]; /* dmd type code*/
  OS0FM030.XWHCD = OS0FW03.XWHCD[OS0FWSB2]; /* warehouse*/
  ;
end // end OS0FSGD

// get store name
Function OS0FSGS()
  ;
  ;
  ;
    /* get store name*/
  ;
  KUMREC.KUCCOID = KUNREC.KUCCOID; /* load key - company*/
  KUMREC.KUMSTRID = KUNREC.KUMSTRID; /* load key - store*/
  KUMREC.XGPCD = OS0FM010.XGPCD; /* load key - gpc*/
  ;
   /* read dcust.vstore01*/
  ;
  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes}; /* call i/o mod for inquiry*/
  ;
   /* check db2 return code*/
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
    OS0FM010.KUMSTRNM = KUMREC.KUMSTRNM;
  else
    OS0FM010.KUMSTRNM = "UNKNOWN STORE";
  end
  ;
  ;
  ;
  ;
end // end OS0FSGS

// build key for db rows - m020
Function OS0FSK1()
  ;
  ;
  ;
   /* build key to delete database rows*/
  ;
  ;
  ;
  set OSCREC empty;
  ;
   /* lost demand type code*/
  ;
  OSCREC.OPTDMND = OS0FM020.OPTDMND[OS0FWSUB];
  ;
  ;
  ;
   /* base order type*/
  ;
  OSCREC.XOBCD = OS0FM020.XOBCD[OS0FWSUB];
  ;
  ;
  ;
   /* customer  number*/
  ;
  OSCREC.KUCCOID = OS0FM020.KUCCOID; /* load key - company*/
  OSCREC.KUMSTRID = OS0FM020.KUMSTRID; /* load key - store*/
  OSCREC.XNXCD = OS0FM020.XNXCD; /* load key - dept*/
  ;
  ;
  ;
   /* gpc*/
  ;
  OSCREC.XGPCD = OS0FM020.XGPCD;
  ;
  ;
   /* style, color and dimension*/
  ;
  OSCREC.SY1STNBR = OS0FM020.SY1STNBR;
  OSCREC.SY2CLRID = OS0FM020.SY2CLRID;
  OSCREC.XDMCD = OS0FM020.XDMCD;
  ;
  ;
  ;
   /* need, lost demand and drop dates*/
  ;
  set OSJREC empty;
  ;
  OSJREC.OSJNDTLO = OS0FW03.OP1CUNDT[OS0FWSUB]; /* low need date*/
  OSJREC.OSJNDTHI = OS0FW03.OP1CUNDT[OS0FWSUB]; /* high need date*/
  OSJREC.OSJLDTLO = OS0FW03.OSCLDMDT[OS0FWSUB]; /* low lost date*/
  OSJREC.OSJLDTHI = OS0FW03.OSCLDMDT[OS0FWSUB]; /* high lost date*/
  OSJREC.OSJDDTLO = OS0FW03.OPTDRPDT[OS0FWSUB]; /* low drop date*/
  OSJREC.OSJDDTHI = OS0FW03.OPTDRPDT[OS0FWSUB]; /* high drop date*/
  ;
end // end OS0FSK1

// build key for db2 rows - m030
Function OS0FSK2()
  ;
  ;
  ;
   /* build key to select database row*/
  ;
  ;
  ;
  set OSCREC empty;
  ;
   /* lost demand type code*/
  ;
  OSCREC.OPTDMND = OS0FW03.OPTDMND[OS0FWSB2];
  ;
  ;
  ;
   /* base order type*/
  ;
  OSCREC.XOBCD = OS0FW03.XOBCD[OS0FWSB2];
  ;
  ;
  ;
   /* customer  number*/
  ;
  OSCREC.KUCCOID = OS0FM030.KUCCOID; /* load key - company*/
  OSCREC.KUMSTRID = OS0FM030.KUMSTRID; /* load key - store*/
  OSCREC.XNXCD = OS0FM030.XNXCD; /* load key - dept*/
  ;
  ;
  ;
   /* gpc*/
  ;
  OSCREC.XGPCD = OS0FW03.XGPCD[OS0FWSB2];
  ;
   /* warehouse*/
  ;
  OSCREC.XWHCD = OS0FW03.XWHCD[OS0FWSB2];
  ;
  ;
   /* style, color and dimension*/
  ;
  OSCREC.SY1STNBR = OS0FW03.SY1STNBR[OS0FWSB2];
  OSCREC.SY2CLRID = OS0FW03.SY2CLRID[OS0FWSB2];
  OSCREC.XDMCD = OS0FW03.XDMCD[OS0FWSB2];
  ;
  ;
  ;
   /* need, lost demand and drop dates*/
  ;
  set OSJREC empty;
  ;
  OSCREC.OP1CUNDT = OS0FW03.OP1CUNDT[OS0FWSB2]; /* need date*/
  OSCREC.OSCLDMDT = OS0FW03.OSCLDMDT[OS0FWSB2]; /* lost date*/
  OSCREC.OPTDRPDT = OS0FW03.OPTDRPDT[OS0FWSB2]; /* drop date*/
  ;
end // end OS0FSK2

// build key for db rows - m030
Function OS0FSK3()
  ;
  ;
  ;
   /* build key to delete database rows*/
  ;
  ;
  set OSCREC empty;
  ;
   /* lost demand type code*/
  ;
  OSCREC.OPTDMND = OS0FM030.OPTDMND;
  ;
  ;
   /* customer  number*/
  ;
  OSCREC.KUCCOID = OS0FM030.KUCCOID; /* load key - company*/
  OSCREC.KUMSTRID = OS0FM030.KUMSTRID; /* load key - store*/
  OSCREC.XNXCD = OS0FM030.XNXCD; /* load key - dept*/
  ;
  ;
  ;
   /* style, color and dimension*/
  ;
  OSCREC.SY1STNBR = OS0FM030.SY1STNBR;
  OSCREC.SY2CLRID = OS0FM030.SY2CLRID;
  OSCREC.XDMCD = OS0FM030.XDMCD;
  ;
  ;
   /* base order type*/
  ;
  OSCREC.XOBCD = OS0FW03.XOBCD[OS0FWSB2];
  ;
   /* gpc*/
  ;
  OSCREC.XGPCD = OS0FW03.XGPCD[OS0FWSB2];
  ;
   /* need, lost demand and drop dates*/
  ;
  ;
  set OSJREC empty;
  ;
  OSJREC.OSJNDTLO = OS0FW03.OP1CUNDT[OS0FWSB2]; /* low need date*/
  OSJREC.OSJNDTHI = OS0FW03.OP1CUNDT[OS0FWSB2]; /* high need date*/
  OSJREC.OSJLDTLO = OS0FW03.OSCLDMDT[OS0FWSB2]; /* low lost date*/
  OSJREC.OSJLDTHI = OS0FW03.OSCLDMDT[OS0FWSB2]; /* high lost date*/
  OSJREC.OSJDDTLO = OS0FW03.OPTDRPDT[OS0FWSB2]; /* low drop date*/
  OSJREC.OSJDDTHI = OS0FW03.OPTDRPDT[OS0FWSB2]; /* high drop date*/
  ;
end // end OS0FSK3

// load & write temp storage 1
Function OS0FSL1()
  ;
  ;
  ;
   /* load and write temp storage 1*/
  ;
  set OS0FW02 empty; /* init work record*/
  ;
  OS0FW01.OS0FWSUB = 1;
  ;
  while (OS0FW01.OS0FWSUB <= 20
   && OS0FW01.OS0FWEOF == "N")
    OS0FW02.OS0FWSEL = " ";
    OS0FW02.SY1STNBR[OS0FWSUB] = OSCREC.SY1STNBR; /* style number*/
    OS0FW02.SY2CLRID[OS0FWSUB] = OSCREC.SY2CLRID; /* ident. color*/
    OS0FW02.XGPCD[OS0FWSUB] = OSCREC.XGPCD; /* gpc*/
    OS0FW02.XDMCD[OS0FWSUB] = OSCREC.XDMCD; /* dimension*/
    ;
    OS0FSSN(); /* read db2 for sytle and color abrev.*/
    ;
    OS0FW01.OS0FWSUB = OS0FW01.OS0FWSUB + 1;
    ;
    OS0FSN1(); /* select next product for customer*/
    ;
  end
  ;
  ;
  ;
   /* write temp storage 1*/
  ;
  OS0FSW1();
  ;
  ;
  ;
   /* *************************************************************/
end // end OS0FSL1

// load temp storage 2
Function OS0FSL2()
  ;
  ;
  ;
   /* load and write temp storage 2*/
  ;
  set OS0FW03 empty; /* init work record*/
  ;
  OS0FW01.OS0FWSUB = 1;
  ;
  while (OS0FW01.OS0FWSUB <= 22
   && OS0FW01.OS0FWEOF == "N")
    OS0FW03.OS0FWSEL = " ";
    OS0FW03.SY1STNBR[OS0FWSUB] = OSCREC.SY1STNBR; /* style number*/
    OS0FW03.SY2CLRID[OS0FWSUB] = OSCREC.SY2CLRID; /* ident. color*/
    OS0FW03.XGPCD[OS0FWSUB] = OSCREC.XGPCD; /* gpc*/
    OS0FW03.XDMCD[OS0FWSUB] = OSCREC.XDMCD; /* dimension*/
    OS0FW03.XOBCD[OS0FWSUB] = OSCREC.XOBCD; /* base order type code*/
    OS0FW03.OP1CUNDT[OS0FWSUB] = OSCREC.OP1CUNDT; /* need date*/
    OS0FW03.XWHCD[OS0FWSUB] = OSCREC.XWHCD; /* warehouse*/
    OS0FW03.OPTDMND[OS0FWSUB] = OSCREC.OPTDMND; /* demand type code*/
    OS0FW03.OSCLDMDT[OS0FWSUB] = OSCREC.OSCLDMDT; /* lost demand date*/
    OS0FW03.OPTDRPDT[OS0FWSUB] = OSCREC.OPTDRPDT; /* drop date*/
    ;
    OS0FSSQ(); /* get all size quantities*/
    ;
    OS0FW01.OS0FWSUB = OS0FW01.OS0FWSUB + 1;
    ;
    OS0FSN2(); /* select next product for customer*/
    ;
  end
  ;
  ;
  ;
   /* write temp storage 1*/
  ;
  OS0FSW2();
  ;
end // end OS0FSL2

// check life cycle of product
Function OS0FSLC()
  ;
  ;
  ;
   /* if life cycle equals '10' (product is current)*/
   /* move style and color abbreviation to ts1.*/
  ;
   /* if life cycle code is in the life cycle table*/
   /* move life cycle table abbreviation to ts1*/
  ;
  if (SYCREC.XLCCD1 == "10")
    OS0FW02.SY1SSTNM[OS0FWSUB] = SYCREC.SY1SSTNM; /* style abbrev*/
    OS0FW02.SY2CLRAB[OS0FWSUB] = SYCREC.SY2CLRAB; /* color abbrev*/
  else
    if (SYCREC.XLCCD1 in XLCTBL.XLCCD)
      OS0FW02.OS0FWSYN[OS0FWSUB] = XLCTBL.XLCDESC[sysVar.arrayIndex];
    end
  end
  ;
end // end OS0FSLC

// edit lost demand beg-end date
Function OS0FSLD()
  ;
  ;
  ;
   /* edit lost demand begin and end date*/
  ;
  ;
  ;
   /* lost demand date - if entered, must be valid,*/
   /* ending date must not be less than beginning date*/
  ;
   /* lost demand ending date*/
  ;
  if (OS0FM010.OSJLDTHI == " "
   || OS0FM010.OSJLDTHI == "MMDDYY")
    OSJREC.OSJLDTHI = 99999999;
  else
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "A";
    TA2REC.TA2GRGA = OS0FM010.OSJLDTHI;
    ;
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    ;
    if (TA2REC.TA2RTNCD == 0)
      OSJREC.OSJLDTHI = TA2REC.TA2GRGGN;
    else
      converseLib.validationFailed(107); /* date is not valid - format is mmddyy*/
      set OS0FM010.OSJLDTHI cursor, bold;
      OS0FW01.OS0FWERR = "Y";
      OSJREC.OSJLDTHI = 99999999;
    end
  end
  ;
   /* lost demand beginning date*/
  ;
  if (OS0FM010.OSJLDTLO == " "
   || OS0FM010.OSJLDTLO == "MMDDYY")
    OSJREC.OSJLDTLO = 0;
  else
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "A";
    TA2REC.TA2GRGA = OS0FM010.OSJLDTLO;
    ;
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    ;
    if (TA2REC.TA2RTNCD == 0)
      OSJREC.OSJLDTLO = TA2REC.TA2GRGGN;
    else
      converseLib.validationFailed(107); /* date is not valid - format is mmddyy*/
      set OS0FM010.OSJLDTLO cursor, bold;
      OS0FW01.OS0FWERR = "Y";
      OSJREC.OSJLDTLO = 0;
    end
  end
  ;
   /* begin lost demand date cannot be gt than end ld date*/
  ;
  if (OSJREC.OSJLDTLO > OSJREC.OSJLDTHI)
    converseLib.validationFailed(106);
                                   /* begin date cannot be gt than end date*/
    OS0FW01.OS0FWERR = "Y";
    set OS0FM010.OSJLDTLO cursor, bold;
  end
  ;
end // end OS0FSLD

// save m020 map option
Function OS0FSM2()
  ;
  ;
  ;
   /* save os0fm020 selection option in working storage*/
  ;
  OS0FW01.OS0FWSUB = 1;
  ;
  while (OS0FW01.OS0FWSUB <= 22)
    OS0FW03.OS0FWSEL[OS0FWSUB] = OS0FM020.OS0FMSEL[OS0FWSUB];
    OS0FW01.OS0FWSUB = OS0FW01.OS0FWSUB + 1;
  end
  ;
end // end OS0FSM2

// move data from m020 to m030
Function OS0FSMD()
  ;
  ;
  ;
   /* move saved data to map m030*/
  ;
  OS0FM030.KUCCOID = OS0FM020.KUCCOID; /* company id*/
  OS0FM030.KUMSTRID = OS0FM020.KUMSTRID; /* store id*/
  OS0FM030.XNXCD = OS0FM020.XNXCD; /* nike dept code*/
  OS0FM030.KUMSTRNM = OS0FM020.KUMSTRNM; /* store name*/
  OS0FM030.SY1STNBR = OS0FM020.SY1STNBR; /* style*/
  OS0FM030.SY2CLRID = OS0FM020.SY2CLRID; /* color*/
  OS0FM030.XDMCD = OS0FM020.XDMCD; /* dimension*/
  OS0FM030.OS0FMSYN = OS0FM020.OS0FMSYN; /* product description*/
  ;
end // end OS0FSMD

// select next for ts1
Function OS0FSN1()
  ;
  ;
  ;
   /* select next waiting list row for loading temp storage 1*/
  ;
  ;
  set SQLCA empty;
  ;
  OSJREC.OSJTASK = "N1";
  ;
  call "IO4910" (OSJREC, SQLCA, OSCREC) {isNoRefresh = yes, isExternal = yes}; /* select next*/
  ;
  ;
      /* check db2 return code*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OS0FWEOF = "Y";
    else
      OS0FSX1(); /* purge temp storage 1*/
      TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
      TA1REC.TA1TBLVU = "VWAIT001"; /* table view*/
      TA1REC.TA1TBLKE = " ";
      TA1REC.TA1MAP = "OS0FM010"; /* map name*/
      OS0FW01.OS0FWDI1 = OSCREC.KUCCOID;
      OS0FW01.OS0FWDI2 = OSCREC.KUMSTRID;
      OS0FW01.OS0FWDI3 = OSCREC.XNXCD;
      OS0FW01.OS0FWDI4 = OSCREC.XGPCD;
      TA1REC.TA1TBLKE = OS0FW01.OS0FWDIA; /* key value*/
      TA1REC.TA1LOCAT[2] = "N1 "; /* statement group*/
      TA1REC.TA1LOCAT[3] = "OS0FSN1 "; /* statement group*/
      TA1REC.TA1LOCAT[4] = "IO4910  "; /* i/o mod name*/
      OS0FS02(); /* abort routine - no reset done*/
    end
  end
  ;
  ;
  ;
  ;
  ;
   /* *************************************************************/
end // end OS0FSN1

// select next for temp storage 2
Function OS0FSN2()
  ;
  ;
  ;
   /* select next waiting list row for loading temp storage 2*/
  ;
  ;
  set SQLCA empty;
  ;
  OSJREC.OSJTASK = "N2";
  ;
  call "IO4910" (OSJREC, SQLCA, OSCREC) {isNoRefresh = yes, isExternal = yes}; /* select next*/
  ;
  ;
      /* check db2 return code*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OS0FWEOF = "Y";
    else
      OS0FSX1(); /* purge temp storage 1*/
      OS0FSX2(); /* purge temp storage 2*/
      TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
      TA1REC.TA1TBLVU = "VWAIT001"; /* table view*/
      TA1REC.TA1PGMNM = "OS0F"; /* program name*/
      TA1REC.TA1MAP = "OS0FM020"; /* map name*/
      TA1REC.TA1TBLKE = " ";
      OS0FW01.OS0FWDI1 = OSCREC.KUCCOID;
      OS0FW01.OS0FWDI2 = OSCREC.KUMSTRID;
      OS0FW01.OS0FWDI3 = OSCREC.XNXCD;
      OS0FW01.OS0FWDI4 = OSCREC.XGPCD;
      TA1REC.TA1TBLKE = OS0FW01.OS0FWDIA; /* key value*/
      TA1REC.TA1LOCAT[2] = "N2 "; /* statement group*/
      TA1REC.TA1LOCAT[3] = "OS0FSN2 "; /* statement group*/
      TA1REC.TA1LOCAT[4] = "IO4910  "; /* i/o mod name*/
      OS0FS02(); /* abort routine - no reset done*/
    end
  end
  ;
end // end OS0FSN2

// edit begin-end need date
Function OS0FSND()
  ;
  ;
  ;
   /* edit begin and end need dates*/
  ;
   /* need date - if entered, must be valid*/
   /* ending date must not be less than beginning date*/
   /* ending need date*/
  ;
  if (OS0FM010.OSJNDTHI == " "
   || OS0FM010.OSJNDTHI == "MMDDYY")
    OSJREC.OSJNDTHI = 99999999; /* init to high value if blank*/
  else
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "A";
    TA2REC.TA2GRGA = OS0FM010.OSJNDTHI;
    ;
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    ;
    if (TA2REC.TA2RTNCD == 0)
      OSJREC.OSJNDTHI = TA2REC.TA2GRGGN;
    else
      converseLib.validationFailed(246); /* ending need date is not valid*/
      set OS0FM010.OSJNDTHI cursor, bold;
      OS0FW01.OS0FWERR = "Y";
      OSJREC.OSJNDTHI = 99999999;
    end
  end
  ;
   /* beginning need date*/
  ;
  if (OS0FM010.OSJNDTLO == " "
   || OS0FM010.OSJNDTLO == "MMDDYY")
    OSJREC.OSJNDTLO = 0; /* init to 0 if blank*/
  else
    set TA2REC empty;
    TA2REC.TA2DTOPT = "GREGGREG";
    TA2REC.TA2GRTYP = "A";
    TA2REC.TA2GRGA = OS0FM010.OSJNDTLO;
    ;
    call "TA0040" (TA2REC) {isNoRefresh = yes, isExternal = yes};
    ;
    if (TA2REC.TA2RTNCD == 0)
      OSJREC.OSJNDTLO = TA2REC.TA2GRGGN;
    else
      converseLib.validationFailed(247); /* beginning need date is not valid*/
      set OS0FM010.OSJNDTLO cursor, bold;
      OS0FW01.OS0FWERR = "Y";
      OSJREC.OSJNDTLO = 0;
    end
  end
  ;
   /* begin need date cannot be gt than end need date*/
  ;
  if (OSJREC.OSJNDTLO > OSJREC.OSJNDTHI)
    converseLib.validationFailed(255);
                                   /* begin need date cannot be gt end date*/
    OS0FW01.OS0FWERR = "Y";
    set OS0FM010.OSJNDTLO cursor, bold;
  end
  ;
end // end OS0FSND

// no page or sel field change
Function OS0FSNP()
  ;
  ;
  ;
   /* if page number not changed and no products selected*/
   /* or deleted, display next product*/
  ;
  if (OS0FM020.OS0FMPG == OS0FW01.OS0FWSP2) /* map page eq saved page*/
    if (OS0FW01.OS0FWSL2 == " ") /* no option selected*/
      if (converseVar.eventKey is enter)
        if (OS0FW01.OS0FWERR == "N")
          OS0FW01.OS0FWDCF = "N"; /* detail converse flag*/
          COMMAREA.CAMSG = "NEXT PRODUCT DISPLAYED";
        end
      end
    end
  end
end // end OS0FSNP

// no page or sel field change
Function OS0FSNS()
  ;
  ;
  ;
   /* if page number not changed and no products selected*/
   /* or deleted, set error msg flag*/
  ;
  if (OS0FM010.OS0FMFPG == OS0FW01.OS0FWSP1) /* map page eq saved page*/
    if (OS0FW01.OS0FWSL1 == " ")
      OS0FW01.OS0FWERR = "Y";
    end
  end
  ;
end // end OS0FSNS

// edit option field
Function OS0FSO2()
  ;
  ;
  ;
   /* edit option field*/
  ;
  ;
   /* option must be 's'(select), 'd'(delete), 'v' (viewed),*/
           /* ' '(blank), 'u' (updated), or '*' (deleted)*/
  ;
  OS0FW01.OS0FWSUB = 22;
  ;
  while (OS0FW01.OS0FWSUB >= 1)
    if (OS0FM020.OS0FMSEL[OS0FWSUB] == "S"
     || OS0FM020.OS0FMSEL[OS0FWSUB] == "D"
     || OS0FM020.OS0FMSEL[OS0FWSUB] == "V"
     || OS0FM020.OS0FMSEL[OS0FWSUB] == " "
     || OS0FM020.OS0FMSEL[OS0FWSUB] == "*"
     || OS0FM020.OS0FMSEL[OS0FWSUB] == "U")
      ;
       /* check for USER entered 'v' or '*'*/
       /* these are invalid entries*/
      ;
      if (OS0FM020.OS0FMSEL[OS0FWSUB] == "V"
       || OS0FM020.OS0FMSEL[OS0FWSUB] == "*"
       || OS0FM020.OS0FMSEL[OS0FWSUB] == "U")
        if (OS0FM020.OS0FMSEL[OS0FWSUB] != OS0FW03.OS0FWSEL[OS0FWSUB])
          OS0FW01.OS0FWERR = "Y";
          converseLib.validationFailed(272); /* selection code not valid*/
          set OS0FM020.OS0FMSEL[OS0FWSUB] cursor, bold;
        end
      end
    else
      OS0FW01.OS0FWERR = "Y";
      converseLib.validationFailed(272); /* selection code not valid*/
      set OS0FM020.OS0FMSEL[OS0FWSUB] cursor, bold;
    end
    OS0FW01.OS0FWSUB = OS0FW01.OS0FWSUB - 1;
  end
  ;
  ;
  ;
   /* cannot select or delete at the same time*/
  ;
   /* init ws option field for comparison*/
   /* **  WARNING - DO NOT RESET THIS FIELD*/
                 /* USED FOR ALL EDITS !!*/
  ;
  OS0FW01.OS0FWSL2 = " ";
  ;
  OS0FW01.OS0FWSUB = 22;
  while (OS0FW01.OS0FWSUB >= 1)
    if (OS0FM020.OS0FMSEL[OS0FWSUB] == "S"
     || OS0FM020.OS0FMSEL[OS0FWSUB] == "D")
      if (OS0FW01.OS0FWSL2 > " ")
        if (OS0FW01.OS0FWSL2 == OS0FM020.OS0FMSEL[OS0FWSUB])
           /* next sentence - no error*/
        else
          OS0FW01.OS0FWERR = "Y";
          converseLib.validationFailed(556); /* can't select and delete at the same time*/
          set OS0FM020.OS0FMSEL[OS0FWSUB] cursor, bold;
        end
      else
        OS0FW01.OS0FWSL2 = OS0FM020.OS0FMSEL[OS0FWSUB];
      end
    end
    OS0FW01.OS0FWSUB = OS0FW01.OS0FWSUB - 1;
  end
end // end OS0FSO2

// edit base order type
Function OS0FSOT()
  ;
  ;
  ;
   /* edit base order type - not required, may be inactive*/
  ;
  OS0FM010.XOBABRV = " "; /* clear xob abbreviation*/
  ;
  if (OS0FM010.XOBCD != " ")
    if (OS0FM010.XOBCD in XOBTBL.XOBCD)
      OS0FM010.XOBABRV = XOBTBL.XOBABRV[sysVar.arrayIndex];
       /* next sentence*/
    else
      converseLib.validationFailed(17); /* order type is not valid*/
      OS0FW01.OS0FWERR = "Y";
      set OS0FM010.XOBCD cursor, bold;
    end
  end
  ;
end // end OS0FSOT

// edit page number
Function OS0FSP2()
  ;
  ;
  ;
   /* page number cannot be greater than maximum*/
   /* number of pages or less than 1*/
  ;
  if (OS0FM020.OS0FMPG > OS0FM020.OS0FMPL)
    OS0FW01.OS0FWERR = "Y";
    converseLib.validationFailed(3); /* page requested exceeds total pages*/
    set OS0FM020.OS0FMPG cursor, bold;
  end
  ;
  if (OS0FM020.OS0FMPG < 1)
    OS0FW01.OS0FWERR = "Y";
    converseLib.validationFailed(5); /* page requested can't be less than 1*/
    set OS0FM020.OS0FMPG cursor, bold;
  end
end // end OS0FSP2

// get wait list rec sel from ts2
Function OS0FSP3()
  ;
  ;
  ;
  ;
   /* find selected waiting list descriptions and move to m030*/
  ;
  OS0FW01.OS0FWSCF = "N"; /* turn size converse flag off*/
  OS0FW01.OS0FWSB5 = 1; /* init sub for loop*/
  ;
  while (OS0FW01.OS0FWSB5 <= 20)
    if (OS0FW03.OS0FWSEL[OS0FWSB5] == "S") /* record selected*/
       /* save subscript for future use with ts2 (os0fw03 rec)*/
      OS0FW01.OS0FWSB2 = OS0FW01.OS0FWSB5;
      OS0FW03.OS0FWSEL[OS0FWSB5] = "V"; /* mark 'viewed'*/
      OS0FM020.OS0FMSEL[OS0FWSB5] = "V"; /* mark 'viewed'*/
      ;
      OS0FSGD(); /* get details from ts2*/
      ;
      OS0FSWH(); /* get warehouse abbreviation*/
      ;
      OS0FSWL(); /* get oscrec*/
      ;
      OS0FSSZ(); /* get size descript and qty*/
      ;
      OS0FW01.OS0FWSCF = "Y"; /* turn size converse flag on*/
      OS0FW01.OS0FWSB5 = 21; /* get out of loop*/
    end
    ;
    OS0FW01.OS0FWSB5 = OS0FW01.OS0FWSB5 + 1;
  end
  ;
  ;
  if (OS0FW01.OS0FWSCF != "Y") /* no more records*/
    OS0FW01.OS0FWSZF = "N"; /* size select flag*/
    COMMAREA.CAMSG = " ";
  end
  ;
end // end OS0FSP3

// protect selection criteria
Function OS0FSPC()
  ;
  ;
  ;
   /* protect selection criteria fields*/
  ;
  ;
  ;
   /* customer*/
  ;
  set OS0FM010.KUCCOID skip;
  set OS0FM010.KUMSTRID skip;
  set OS0FM010.XNXCD skip;
  ;
  ;
  ;
   /* need date*/
  ;
  set OS0FM010.OSJNDTLO skip;
  set OS0FM010.OSJNDTHI skip;
  ;
  ;
  ;
   /* drop date*/
  ;
  set OS0FM010.OSJDDTLO skip;
  set OS0FM010.OSJDDTHI skip;
  ;
  ;
  ;
   /* lost demand date*/
  ;
  set OS0FM010.OSJLDTLO skip;
  set OS0FM010.OSJLDTHI skip;
  ;
  ;
  ;
   /* gpc*/
  ;
  set OS0FM010.XGPCD skip;
  ;
  ;
  ;
   /* base order type*/
  ;
  set OS0FM010.XOBCD skip;
  ;
  ;
  ;
   /* demand code*/
  ;
  set OS0FM010.OPTDMND skip;
  ;
  ;
  ;
   /* clear camsg field*/
  ;
  OS0FM010.CAMSG = " ";
  ;
  ;
   /* ************************************************************/
end // end OS0FSPC

// find sel prod and move to map
Function OS0FSPS()
  ;
  ;
   /* find products selected*/
  ;
  ;
  OS0FM020.SY1STNBR = " "; /* clear style field*/
  ;
  OS0FW01.OS0FWSUB = 1;
  ;
  while (OS0FW01.OS0FWSUB <= 20)
    if (OS0FW02.OS0FWSEL[OS0FWSUB] == "S") /* product found*/
      OS0FW02.OS0FWSEL[OS0FWSUB] = "V"; /* mark 'viewed'*/
       /* save subscript for future use in marking record 'deleted'*/
      OS0FW01.OS0FWSB9 = OS0FW01.OS0FWSUB;
      OS0FW01.OS0FWDEL = "N"; /* turn off delete all records flg*/
      ;
       /* move product and description to map*/
      ;
      OS0FM020.SY1STNBR = OS0FW02.SY1STNBR[OS0FWSUB]; /* color*/
      OS0FM020.SY2CLRID = OS0FW02.SY2CLRID[OS0FWSUB]; /* color*/
      OS0FM020.XDMCD = OS0FW02.XDMCD[OS0FWSUB]; /* dimension*/
      OS0FSSS(); /* get style and color description*/
      OS0FW01.OS0FWDCF = "Y"; /* product detail flag*/
      OS0FWSUB = 21;
    else
      OS0FW01.OS0FWSUB = OS0FW01.OS0FWSUB + 1;
    end
  end
  ;
  ;
  ;
  if (OS0FM020.SY1STNBR == " ") /* no more products selected*/
    OS0FW01.OS0FWPRS = "N"; /* products selected flag*/
  end
  ;
  ;
  ;
   /* *********************************************************/
end // end OS0FSPS

// read temp storage 1
Function OS0FSR1()
  ;
  ;
  ;
   /* read temp storage 1*/
  ;
  ;
  set OS0FW02 empty;
  ;
  OS0FW02.OS0FWLEN = 784; /* temp storage length*/
  TA5REC.TA5APPID = "OSF1"; /* appl identification*/
  TA5REC.TA5TSQIX = OS0FM010.OS0FMFPG; /* current page number*/
  TA5REC.TA5FNCCD = "R"; /* function code*/
  ;
  call "TA0050" (OS0FW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/
  ;
  if (TA5REC.TA5RTNCD == +0)
     /* next sentence*/
  else
    converseLib.validationFailed(10); /* database busy, please try again*/
    OS0FW01.OS0FWERR = "Y"; /* turn on error flag*/
    TA1REC.TA1TYPE = "APPL"; /* type of error*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/
    TA1REC.TA1PGMNM = "OS0F";
    TA1REC.TA1LOCAT[1] = "READ TS1";
    TA1REC.TA1LOCAT[2] = "TA0050 "; /* io mod*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1MAP = "OS0FM010"; /* map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* subroutine parms*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/
    ;
  end
end // end OS0FSR1

// read temp storage 2
Function OS0FSR2()
  ;
  ;
  ;
   /* read temp storage 2*/
  ;
  ;
  set OS0FW03 empty;
  ;
  OS0FW03.OS0FWLEN = 950; /* temp storage length*/
  TA5REC.TA5APPID = "OSF2"; /* appl identification*/
  TA5REC.TA5TSQIX = OS0FM020.OS0FMPG; /* page number*/
  TA5REC.TA5FNCCD = "R"; /* function code*/
  ;
  call "TA0050" (OS0FW03, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/
  ;
  if (TA5REC.TA5RTNCD == +0)
     /* next sentence*/
  else
    converseLib.validationFailed(10); /* database busy, please try again*/
    OS0FW01.OS0FWERR = "Y"; /* turn on error flag*/
    TA1REC.TA1TYPE = "APPL"; /* type of error*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/
    TA1REC.TA1PGMNM = "OS0F";
    TA1REC.TA1LOCAT[1] = "READ TS1";
    TA1REC.TA1LOCAT[2] = "TA0050 "; /* io mod*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1MAP = "OS0FM020"; /* map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* subroutine parms*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/
    ;
  end
end // end OS0FSR2

// edit page number and sel field
Function OS0FSRE()
  ;
  ;
  ;
   /* cannot change page number and select or delete products*/
   /* at the same time*/
  ;
  if (OS0FM010.OS0FMFPG == OS0FW01.OS0FWSP1) /* map page eq saved page*/
     /* next sentence*/
  else /* page number changed*/
    if (OS0FW01.OS0FWSL1 != " ") /* a product is selected or deleted*/
      OS0FW01.OS0FWERR = "Y";
      converseLib.validationFailed(558); /* can't change page and sel products*/
      set OS0FM010.OS0FMFPG cursor, bold;
    end
  end
  ;
end // end OS0FSRE

// check style option selected
Function OS0FSS1()
  ;
  ;
   /* check fields for previous entry to build map correctly*/
  ;
  ;
   /* if style field in work rec is blank - darken and autoskip*/
                                         /* option*/
   /* if option = '*' record has been deleted - autoskip option*/
   /* else all other entries ok - set option defined*/
  ;
  if (OS0FW02.SY1STNBR[OS0FWSUB] == " ") /* style record not found*/
    set OS0FM010.OS0FMSEL[OS0FWSUB] skip, invisible;
  else
    if (OS0FW02.OS0FWSEL[OS0FWSUB] == "*") /* RECORD deleted*/
      set OS0FM010.OS0FMSEL[OS0FWSUB] skip;
    else
      set OS0FM010.OS0FMSEL[OS0FWSUB] initialAttributes; /* unprotect option*/
    end
  end
  ;
  ;
  ;
end // end OS0FSS1

// check style option selected
Function OS0FSS2()
  ;
  ;
  ;
   /* check fields for previous entry to build map correctly*/
   /* if style field in work rec is blank - darken and autoskip*/
                                         /* option*/
   /* if option = '*' record has been deleted - autoskip option*/
     /* else all other entries ok - set option defined*/
     /* and turn all records deleted flag off*/
  ;
  ;
  if (OS0FW03.SY1STNBR[OS0FWSUB] == " ") /* style record not found*/
    set OS0FM020.OS0FMSEL[OS0FWSUB] skip, invisible;
  else
    if (OS0FW03.OS0FWSEL[OS0FWSUB] == "*") /* RECORD deleted*/
      set OS0FM020.OS0FMSEL[OS0FWSUB] skip;
    else
      set OS0FM020.OS0FMSEL[OS0FWSUB] initialAttributes; /* unprotect option*/
      OS0FW01.OS0FWDEL = "N"; /* set all records deleted flag off*/
    end
  end
  ;
  ;
  ;
   /* *************************************************************/
end // end OS0FSS2

// set map fields defined
Function OS0FSSD()
  ;
  ;
  ;
   /* set darkened and askip scrolling fields defined*/
  ;
  OS0FM010.OS0FMPF7 = "7:BACKWARD"; /* pf7*/
  OS0FM010.OS0FMPF8 = "8:FORWARD"; /* pf8*/
  OS0FM010.OS0FMPGL = "PAGE"; /* 'page' literal*/
  OS0FM010.OS0FMOFL = "OF"; /* 'of' literal*/
  set OS0FM010.OS0FMPF7 initialAttributes; /* pf7*/
  set OS0FM010.OS0FMPF8 initialAttributes; /* pf8*/
  set OS0FM010.OS0FMPGL initialAttributes; /* page literal*/
  set OS0FM010.OS0FMOFL initialAttributes; /* of literal*/
  set OS0FM010.OS0FMFPG initialAttributes; /* from page*/
  set OS0FM010.OS0FMLPG initialAttributes; /* last page*/
  ;
  OS0FM010.OPMPRC = "OS0F200";
  OS0FM010.OPMMAP = "OS0FM010";
  ;
  ;
  ;
end // end OS0FSSD

// save map option - m010
Function OS0FSSM()
  ;
  ;
  ;
   /* save os0fm010 selection option in working storage*/
  ;
  OS0FW01.OS0FWSUB = 1;
  ;
  while (OS0FW01.OS0FWSUB <= 20)
    OS0FW02.OS0FWSEL[OS0FWSUB] = OS0FM010.OS0FMSEL[OS0FWSUB];
    OS0FW01.OS0FWSUB = OS0FW01.OS0FWSUB + 1;
  end
  ;
end // end OS0FSSM

// get style description
Function OS0FSSN()
  ;
  ;
  ;
   /* get style description*/
  ;
  ;
   /* read db2 for style description*/
  ;
  set SQLCA empty;
  ;
   /* set up read key*/
  ;
  SYCREC.XGPCD = OSCREC.XGPCD; /* general product code*/
  SYCREC.SY1STNBR = OSCREC.SY1STNBR; /* style*/
  SYCREC.SY2CLRID = OSCREC.SY2CLRID; /* color*/
  SYCREC.XDMCD = OSCREC.XDMCD; /* dimension*/
  ;
  ;
   /* read db2 - dprod.vcolor02*/
  ;
  call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod for single select*/
  ;
  ;
      /* check db2 return code*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* check for good return*/
    OS0FSLC(); /* check for life cycle 10 products*/
  else
    OS0FW02.OS0FWSYN[OS0FWSUB] = "UNKNOWN STYLE";
  end
  ;
  ;
  ;
  ;
   /* *************************************************************/
end // end OS0FSSN

// save map option - m020
Function OS0FSSO()
  ;
  ;
  ;
   /* save os0fm020 selection option in working storage*/
  ;
  OS0FW01.OS0FWSUB = 1;
  ;
  while (OS0FW01.OS0FWSUB <= 22)
    OS0FW03.OS0FWSEL[OS0FWSUB] = OS0FM020.OS0FMSEL[OS0FWSUB];
    OS0FW01.OS0FWSUB = OS0FW01.OS0FWSUB + 1;
  end
  ;
end // end OS0FSSO

// load all size quantities
Function OS0FSSQ()
  ;
  ;
  ;
   /* GET ALL SIZE QUANTITIES AND ADD TO WS size QUANTITY*/
  ;
  OS0FW01.OS0FWQTY = 0;
                                   /* init size quantity accumulation field*/
  ;
  OS0FW01.OS0FWSB1 = 1;
  ;
  while (OS0FW01.OS0FWSB1 <= 40)
    if (OSCREC.OPTDMDQT[OS0FWSB1] != 0)
      OS0FW01.OS0FWQTY = OS0FW01.OS0FWQTY + OSCREC.OPTDMDQT[OS0FWSB1];
    end
    ;
    OS0FW01.OS0FWSB1 = OS0FW01.OS0FWSB1 + 1;
    ;
  end
  ;
   /* move accumulated quantities to work record 3 array*/
  ;
  OS0FW03.OS0FWQTY[OS0FWSUB] = OS0FW01.OS0FWQTY;
end // end OS0FSSQ

// get style & color abrev - m020
Function OS0FSSS()
  ;
  ;
  ;
   /* get style description*/
  ;
  ;
   /* read db2 for style description*/
  ;
  set SQLCA empty;
  ;
   /* set up read key*/
  ;
  SYCREC.XGPCD = OS0FM020.XGPCD; /* general product code*/
  SYCREC.SY1STNBR = OS0FM020.SY1STNBR; /* style*/
  SYCREC.SY2CLRID = OS0FM020.SY2CLRID; /* color*/
  SYCREC.XDMCD = OS0FM020.XDMCD; /* dimension*/
  ;
  ;
   /* read db2 - dprod.vcolor02*/
  ;
  call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod for single select*/
  ;
  ;
      /* check db2 return code*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* check for good return*/
    OS0FW01.OS0FWSSN = SYCREC.SY1SSTNM; /* short style number*/
    OS0FW01.OS0FWSPC = " ";
    OS0FW01.OS0FWSCA = SYCREC.SY2CLRAB; /* style color abbrev.*/
    OS0FM020.OS0FMSYN = OS0FW01.OS0FWPDS; /* move descrpt to map*/
  else
    OS0FM020.OS0FMSYN = "UNKNOWN STYLE";
  end
  ;
end // end OS0FSSS

// get size data
Function OS0FSSZ()
  ;
  ;
  ;
   /* GET size data*/
  ;
   /* read db2 for the product's sizes*/
   /* this is a combined view of 3 records.*/
  ;
  set SQLCA empty;
  ;
   /* set up read key*/
  ;
  SYCREC.XGPCD = OSCREC.XGPCD; /* general product class*/
  SYCREC.SY1STNBR = OSCREC.SY1STNBR; /* style*/
  if (OSCREC.SY2CLRID == " ")
    SYCREC.SY2CLRID = "00";
  else
    SYCREC.SY2CLRID = OSCREC.SY2CLRID; /* color*/
  end
  if (OSCREC.XDMCD == " ")
    SYCREC.XDMCD = "00";
  else
    SYCREC.XDMCD = OSCREC.XDMCD; /* dimension*/
  end
  ;
  ;
   /* read db2 - dprod.vcolor02*/
  ;
  call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod for single select*/
  ;
  ;
      /* check db2 return code*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* check for good return*/
    ;
    OS0FSZD(); /* get 40 size descriptions*/
    ;
    OS0FW01.OS0FWSB1 = 1; /* init counter for oscrec/sy4rec*/
    OS0FW01.OS0FWSB3 = 1; /* init counter for map m030*/
    ;
    while (OS0FW01.OS0FWSB1 <= 40)
      if (OSCREC.XDVCD == SYCREC.XDVCD[OS0FWSB1])
        OS0FM030.OS0FMSZ[OS0FWSB3] = SY4REC.SY4IDDSC[OS0FWSB1];
        OS0FM030.OS0FMQTY[OS0FWSB3] = OSCREC.OPTDMDQT[OS0FWSB1];
        OS0FWSB3 = OS0FWSB3 + 1;
      end
      OS0FWSB1 = OS0FWSB1 + 1;
    end
  else
    OS0FW01.OS0FWERR = "Y";
    set ERRSQLCA empty;
    move SQLCA to ERRSQLCA withV60Compat;
    TA1REC.TA1DBASE = "DCUST"; /* data base name*/
    TA1REC.TA1TBLVU = "VCOLOR02"; /* table view*/
    TA1REC.TA1TBLKE = SYCREC.SY4SZSCL; /* table key*/
    TA1REC.TA1LOCAT[3] = "OS0FSSZ"; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0040 "; /* i/o mod name*/
    OS0FS02(); /* abend routine - no reset done*/
    ;
    ;
  end
  ;
end // end OS0FSSZ

// update temp storage 1
Function OS0FSU1()
  ;
  ;
  ;
   /* update temp storage 1*/
  ;
  OS0FW02.OS0FWLEN = 784; /* temp storage length*/
  TA5REC.TA5APPID = "OSF1"; /* appl identification*/
  TA5REC.TA5TSQIX = OS0FM010.OS0FMFPG; /* page number*/
  TA5REC.TA5FNCCD = "U"; /* function code*/
  ;
  call "TA0050" (OS0FW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/
  ;
  if (TA5REC.TA5RTNCD == +0)
     /* next sentence*/
  else
    converseLib.validationFailed(10); /* database busy, please try again*/
    OS0FW01.OS0FWERR = "Y"; /* turn on error flag*/
    TA1REC.TA1TYPE = "APPL"; /* type of error*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/
    TA1REC.TA1PGMNM = "OS0F";
    TA1REC.TA1LOCAT[1] = "UPDTE PG";
    TA1REC.TA1LOCAT[2] = "TA0050 "; /* io mod*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1MAP = "OS0FM010"; /* map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* subroutine parms*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/
    ;
  end
end // end OS0FSU1

// update temp storage 2
Function OS0FSU2()
  ;
  ;
  ;
   /* update temp storage 2*/
  ;
  OS0FW03.OS0FWLEN = 950; /* temp storage length*/
  TA5REC.TA5APPID = "OSF2"; /* appl identification*/
  TA5REC.TA5TSQIX = OS0FM020.OS0FMPG; /* map page number*/
  TA5REC.TA5FNCCD = "U"; /* function code*/
  ;
  call "TA0050" (OS0FW03, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/
  ;
  if (TA5REC.TA5RTNCD == +0)
     /* next sentence*/
  else
    converseLib.validationFailed(10); /* database busy, please try again*/
    OS0FW01.OS0FWERR = "Y"; /* turn on error flag*/
    TA1REC.TA1TYPE = "APPL"; /* type of error*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/
    TA1REC.TA1PGMNM = "OS0F";
    TA1REC.TA1LOCAT[1] = "UPDTE PG";
    TA1REC.TA1LOCAT[2] = "TA0050 "; /* io mod*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1MAP = "OS0FM020"; /* map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* subroutine parms*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/
    ;
  end
  ;
end // end OS0FSU2

// update or delete quantities
Function OS0FSUD()
  ;
  ;
  ;
   /* update or delete quantities on database*/
  ;
  OS0FS40(); /* edit quantities*/
  if (OS0FWERR == "N") /* no errors*/
    if (OS0FW01.OS0FWQTY == 0)
      if (OS0FW01.OS0FWWF == "N") /* 0 qty warning flag*/
        converseLib.validationFailed(557); /* products will be deleted*/
        OS0FW01.OS0FWWF = "Y"; /* turn warning flag on*/
        OS0FW01.OS0FWDF3 = "N"; /* turn confirm delete flag off*/
      else
        OS0FS43(); /* delete products*/
        OS0FW01.OS0FWWF = "N"; /* turn warning flag off*/
      end
    else
      if (OS0FW01.OS0FWIAC != "Y") /* yes means inactive customer*/
        OS0FS41(); /* update m030, m020 and ts2 record*/
      else
        OS0FSSZ();
        converseLib.validationFailed(593); /* cannot change, inactive customer*/
      end
    end
     /* ELSE - error*/
  end
  ;
end // end OS0FSUD

// update rows in db2 - m030
Function OS0FSUR()
  ;
  ;
  ;
   /* update rows in database*/
  ;
  set SQLCA empty;
  ;
  OSJREC.OSJTASK = "U ";
  ;
  call "IO4910" (OSJREC, SQLCA, OSCREC) {isNoRefresh = yes, isExternal = yes}; /* select next*/
  ;
  ;
      /* check db2 return code*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
    ;
        /* update ts2*/
    ;
    OS0FM020.OS0FMSEL[OS0FWSB2] = "U"; /* map option field*/
    OS0FW03.OS0FWSEL[OS0FWSB2] = "U"; /* ws option field*/
    OS0FW01.OS0FWUF2 = "Y"; /* turn update ts2 flag on*/
    OS0FW03.OS0FWQTY[OS0FWSB2] = OS0FW01.OS0FWQTY;
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* check for good rc*/
      converseLib.validationFailed(560); /* record has been deleted - you're too late*/
    else
      TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
      TA1REC.TA1TBLVU = "VWAIT001"; /* table view*/
      TA1REC.TA1PGMNM = "OS0F"; /* program name*/
      TA1REC.TA1MAP = "OS0FM030"; /* map name*/
      TA1REC.TA1TBLKE = " ";
      OS0FW01.OS0FWDI1 = OSCREC.KUCCOID;
      OS0FW01.OS0FWDI2 = OSCREC.KUMSTRID;
      OS0FW01.OS0FWDI3 = OSCREC.XNXCD;
      OS0FW01.OS0FWDI4 = OSCREC.XGPCD;
      TA1REC.TA1TBLKE = OS0FW01.OS0FWDIA; /* key value*/
      TA1REC.TA1LOCAT[2] = "U "; /* statement group*/
      TA1REC.TA1LOCAT[3] = "OS0FSUR "; /* statement group*/
      TA1REC.TA1LOCAT[4] = "IO4910  "; /* i/o mod name*/
      OS0FS02();
    end
  end
  ;
end // end OS0FSUR

// write temp storage 1
Function OS0FSW1()
  ;
  ;
  ;
   /* add temporary storage 1*/
  ;
  ;
  ;
  OS0FW02.OS0FWLEN = 784; /* temp storage length*/
  TA5REC.TA5APPID = "OSF1"; /* appl identification*/
  TA5REC.TA5FNCCD = "A"; /* function code*/
  ;
  call "TA0050" (OS0FW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* add temp storage*/
  ;
  if (TA5REC.TA5RTNCD == +0)
    OS0FW01.OS0FWMX1 = TA5REC.TA5TSQIX; /* highest page number*/
  else
    converseLib.validationFailed(10); /* database busy, please try again*/
    OS0FW01.OS0FWERR = "Y"; /* turn on error flag*/
    TA1REC.TA1TYPE = "APPL"; /* type of error*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/
    TA1REC.TA1PGMNM = "OS0F";
    TA1REC.TA1LOCAT[1] = "ADD TS1";
    TA1REC.TA1LOCAT[2] = "TA0050";
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD;
    TA1REC.TA1MAP = "OS0FM010"; /* map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* subroutine parms*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/
    ;
  end
end // end OS0FSW1

// write temp storage 2
Function OS0FSW2()
  ;
  ;
  ;
   /* add temporary storage 2*/
  ;
  ;
  ;
  OS0FW03.OS0FWLEN = 950; /* temp storage length*/
  TA5REC.TA5APPID = "OSF2"; /* appl identification*/
  TA5REC.TA5FNCCD = "A"; /* function code*/
  ;
  call "TA0050" (OS0FW03, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* add temp storage*/
  ;
  if (TA5REC.TA5RTNCD == +0)
    OS0FW01.OS0FWMX2 = TA5REC.TA5TSQIX; /* highest page number*/
  else
    converseLib.validationFailed(10); /* database busy, please try again*/
    OS0FW01.OS0FWERR = "Y"; /* turn on error flag*/
    TA1REC.TA1TYPE = "APPL"; /* type of error*/
    TA1REC.TA1FUNC = "POST"; /* termination function*/
    TA1REC.TA1PGMNM = "OS0FSW2";
    TA1REC.TA1LOCAT[1] = "ADD TS1";
    TA1REC.TA1LOCAT[2] = "OS0FSW2";
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD;
    TA1REC.TA1MAP = "OS0FM020"; /* map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* subroutine parms*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/
    ;
  end
  ;
  ;
  ;
   /* *************************************************************/
end // end OS0FSW2

// get whse abbrev for m030
Function OS0FSWH()
  ;
  ;
  ;
   /* get warehouse abbreviation for map m030*/
  ;
  OS0FM030.XWHSABRV = " ";
  if (OS0FM030.XWHCD in XWHTBL.XWHCD)
    OS0FM030.XWHSABRV = XWHTBL.XWHSABRV[sysVar.arrayIndex];
  end
end // end OS0FSWH

// move data from oscrec to m030
Function OS0FSWL()
  ;
  ;
  ;
   /* build key to read waiting list record to get size data*/
  ;
  OS0FSK2();
  ;
  ;
   /* get all the size data for the detail record chosen*/
  ;
  set SQLCA empty;
  ;
  OSJREC.OSJTASK = "S ";
  ;
  call "IO4910" (OSJREC, SQLCA, OSCREC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod select unique*/
  ;
  ;
   /* check db2 return code*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* check for good rc*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* record not found*/
      converseLib.validationFailed(560); /* waiting list record has been deleted*/
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
      TA1REC.TA1TBLVU = "VWAIT001"; /* table view*/
      TA1REC.TA1MAP = "OS0FM030"; /* MAP NAME*/
      TA1REC.TA1TBLKE = " ";
      OS0FW01.OS0FWDI1 = OSCREC.KUCCOID;
      OS0FW01.OS0FWDI2 = OSCREC.KUMSTRID;
      OS0FW01.OS0FWDI3 = OSCREC.XNXCD;
      OS0FW01.OS0FWDI4 = OSCREC.XGPCD;
    else
      TA1REC.TA1DBASE = "DORDER  "; /* data base name*/
      TA1REC.TA1TBLVU = "VWAIT001"; /* table view*/
      TA1REC.TA1MAP = "OS0FM030"; /* MAP NAME*/
      TA1REC.TA1TBLKE = " ";
      OS0FW01.OS0FWDI1 = OSCREC.KUCCOID;
      OS0FW01.OS0FWDI2 = OSCREC.KUMSTRID;
      OS0FW01.OS0FWDI3 = OSCREC.XNXCD;
      OS0FW01.OS0FWDI4 = OSCREC.XGPCD;
      TA1REC.TA1TBLKE = OS0FW01.OS0FWDIA; /* key value*/
      TA1REC.TA1LOCAT[2] = "S       "; /* calling option*/
      TA1REC.TA1LOCAT[3] = "OS0FSWL "; /* statement group*/
      TA1REC.TA1LOCAT[4] = "IO4910  "; /* i/o mod name*/
      OS0FS02(); /* abort routine - no reset done*/
    end
  end
  ;
   /* phone number*/
  ;
  OS0FM030.XXXPHNA = OSCREC.XXXPHNA;
  OS0FM030.XXXPHNP = OSCREC.XXXPHNP;
  OS0FM030.XXXPHNN = OSCREC.XXXPHNN;
  ;
   /* ordered by*/
  ;
  OS0FM030.OP1ORDBY = OSCREC.OP1ORDBY;
  ;
  ;
   /* service rep id (from dcust.vsvrep01)*/
  ;
  KUYREC.KUYSVRID = OSCREC.OP1TBREP; /* load key*/
  ;
  call "IO0550" ("S ", SQLCA, KUYREC) {isNoRefresh = yes, isExternal = yes};
  ;
   /* check db2 return code*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    OS0FM030.OS0FMSVR = KUYREC.XXXUSRID;
  else
    TA1REC.TA1FUNC = "POST";
    TA1REC.TA1DBASE = "DCUST"; /* data base name*/
    TA1REC.TA1TBLVU = "VSVREP01"; /* table view*/
    OS0FW01.OS0FWDI2 = OSCREC.OP1TBREP; /* redefine key*/
    TA1REC.TA1TBLKE = OS0FW01.OS0FWDI2; /* key value*/
    TA1REC.TA1LOCAT[3] = "OS0FSWL"; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0550"; /* I/O MOD NAME*/
  end
  ;
end // end OS0FSWL

// purge temp storage 1
Function OS0FSX1()
  ;
  ;
  ;
   /* purge temporary storage 1*/
  ;
  TA5REC.TA5APPID = "OSF1"; /* appl identification*/
  TA5REC.TA5FNCCD = "P"; /* function code*/
  call "TA0050" (OS0FW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/
  ;
  if (TA5REC.TA5RTNCD == 0)
    /* next sentence*/
  else
    TA1REC.TA1FUNC = "POST"; /* termination function*/
    TA1REC.TA1TYPE = "APPL"; /* type of error*/
    TA1REC.TA1PGMNM = "OS0F";
    TA1REC.TA1LOCAT[1] = "PRGE TS1";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1MAP = "OS0FM010"; /* map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* subroutine parms*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/
    ;
  end
end // end OS0FSX1

// purge temp storage 2
Function OS0FSX2()
  ;
  ;
  ;
   /* purge temporary storage 2*/
  ;
  TA5REC.TA5APPID = "OSF2"; /* appl identification*/
  TA5REC.TA5FNCCD = "P"; /* function code*/
  call "TA0050" (OS0FW03, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/
  ;
  if (TA5REC.TA5RTNCD == 0)
    /* next sentence*/
  else
    TA1REC.TA1FUNC = "POST"; /* termination function*/
    TA1REC.TA1TYPE = "APPL"; /* type of error*/
    TA1REC.TA1PGMNM = "OS0F";
    TA1REC.TA1LOCAT[1] = "PRGE TS2";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TA1REC.TA1MAP = "OS0FM020"; /* map name*/
    SQLCA.SQLCAREC = TA5REC.TA5DATA; /* subroutine parms*/
    ;
    call "TA0020" (TA1REC, SQLCA) {isNoRefresh = yes, isExternal = yes}; /* error diag routine*/
    ;
  end
end // end OS0FSX2

// get 40 size descriptions
Function OS0FSZD()
  ;
  ;
  ;
   /* read db2 for the product's size scale code*/
   /* this gets us a record with 40 size descriptions*/
  ;
  set SY4REC empty;
  ;
      /* set up read key*/
  ;
  SY4REC.SY4SZSCL = SYCREC.SY4SZSCL; /* scale code*/
  ;
  ;
      /* read db2 - dprod.vscale01*/
  ;
  call "IO0040" ("S ", SQLCA, SY4REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod for single select*/
  ;
  ;
      /* check db2 return code*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* check for good return*/
     /* next sentence*/
  else
    OS0FW01.OS0FWERR = "Y";
    set ERRSQLCA empty;
    move SQLCA to ERRSQLCA withV60Compat;
    TA1REC.TA1DBASE = "DCUST"; /* data base name*/
    TA1REC.TA1TBLVU = "VSCALE01"; /* table view*/
    TA1REC.TA1TBLKE = SYCREC.SY4SZSCL; /* table key*/
    TA1REC.TA1LOCAT[3] = "OS0FSZD"; /* statement group*/
    TA1REC.TA1LOCAT[4] = "IO0040 "; /* i/o mod name*/
    OS0FS02(); /* abend routine - no reset done*/
    ;
    ;
  end
  ;
end // end OS0FSZD

//*** RECORD=OS0FW01 ****
// working strorage
// 
// 03/20/91  swatso  added product descrpt - os0fwpds
// ***********************
Record OS0FW01 type basicRecord
  10 OS0FWPCF OS0FWPCF ; 
  10 OS0FWDCF OS0FWDCF ; 
  10 OS0FWSCF OS0FWSCF ; 
  10 OS0FWERR OS0FWERR ; 
  10 OS0FWUF1 OS0FWUF1 ; 
  10 OS0FWUF2 OS0FWUF2 ; 
  10 OS0FWDF1 OS0FWDF1 ; 
  10 OS0FWDF2 OS0FWDF2 ; 
  10 OS0FWDF3 OS0FWDF3 ; 
  10 OS0FWEOF OS0FWEOF ; 
  10 OS0FWPRS OS0FWPRS ; 
  10 OS0FWSZF OS0FWSZF ; 
  10 OS0FWWF OS0FWWF ; 
  10 OS0FWDEL OS0FWDEL ; 
  10 OS0FWCHG OS0FWCHG ; 
  10 OS0FWSUB OS0FWSUB ; 
  10 OS0FWSB1 OS0FWSB1 ; 
  10 OS0FWSB2 OS0FWSB2 ; 
  10 OS0FWSB3 OS0FWSB3 ; 
  10 OS0FWSB5 OS0FWSB5 ; 
  10 OS0FWSB9 OS0FWSB9 ; 
  10 OS0FWMX1 OS0FWMX1 ; 
  10 OS0FWMX2 OS0FWMX2 ; 
  10 OS0FWSP1 OS0FWSP1 ; 
  10 OS0FWSP2 OS0FWSP2 ; 
  10 OS0FWDIA OS0FWDIA ; 
    15 OS0FWDI1 OS0FWDI1 ; 
    15 OS0FWDI2 OS0FWDI2 ; 
    15 OS0FWDI3 OS0FWDI3 ; 
    15 OS0FWDI4 OS0FWDI4 ; 
    15 OS0FWDI5 OS0FWDI5 ; 
  10 OS0FWSL1 OS0FWSL1 ; 
  10 OS0FWSL2 OS0FWSL2 ; 
  10 OS0FWMSG OS0FWMSG ; 
    15 OS0FWRC OS0FWRC ; 
      20 OS0FWRCA OS0FWRCA ; 
    15 OS0FWFIL OS0FWFIL ; 
    15 OS0FWMES OS0FWMES ; 
  10 OSJGROUP OSJGROUP ; 
  10 OS0FWQTY OS0FWQTY ; 
  10 OS0FWIAC OS0FWIAC ; 
  10 OS0FWPDS OS0FWPDS ; 
    15 OS0FWSSN OS0FWSSN ; 
    15 OS0FWSPC OS0FWSPC ; 
    15 OS0FWSCA OS0FWSCA ; 
end // end OS0FW01

//*** RECORD=OS0FW02 ****
// this is the working storage record used to load the data
// to temporary storage from os0fm010 - products for customer
// ***********************
Record OS0FW02 type basicRecord
  10 OS0FWLEN OS0FWLEN ; 
  10 OS0FWTS1 OS0FWTS1 [20] ; 
    15 OS0FWSEL OS0FWSEL ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XGPCD XGPCD ; 
    15 XDMCD XDMCD ; 
    15 OS0FWSYN OS0FWSYN ; 
      20 SY1SSTNM SY1SSTNM ; 
      20 SY2CLRAB SY2CLRAB ; 
end // end OS0FW02

//*** RECORD=OS0FW03 ****
// this is the working storage record used to load data to
// temporary storage from map os0fm020 - size detail
// ***********************
Record OS0FW03 type basicRecord
  10 OS0FWLEN OS0FWLEN ; 
  10 OS0FWTS2 OS0FWTS2 [22] ; 
    15 OS0FWSEL OS0FWSEL ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XGPCD XGPCD ; 
    15 OP1CUNDT OP1CUNDT ; 
    15 OSCLDMDT OSCLDMDT ; 
    15 OPTDRPDT OPTDRPDT ; 
    15 XDMCD XDMCD ; 
    15 XOBCD XOBCD ; 
    15 XWHCD XWHCD ; 
    15 OPTDMND OPTDMND ; 
    15 OS0FWQTY OS0FWQTY ; 
end // end OS0FW03

//*** RECORD=OSCREC ****
// ***********************  ITEM TABLE  ***********************
// 
// DB2 TABLE:           DORDER.Vwait001
// 
// COPYLIB MEMBER:      dcl00763
// 
// I/O MOD:             io4910
// 
// KEY TO DB2 TABLE:    ???
// 
// DATE CREATED:        09/06/89
// 
// ***      lost demand waiting list record     ******
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT.      COMMENT
// --------  -----      ---------------------------------------
// 09-05-89   lcr       INITIAL RECORD CREATION
// 01-04-90   lcr       added zzzchg fields
// 01/10/91  CHYDE      Chg oscldmdt data item desc to db name.
// 
// 
// **********************
Record OSCREC type basicRecord
  10 KUCCOID KUCCOID ; 
  10 KUMSTRID KUMSTRID ; 
  10 XNXCD XNXCD ; 
  10 XGPCD XGPCD ; 
  10 SY1STNBR SY1STNBR ; 
  10 SY2CLRID SY2CLRID ; 
  10 XDMCD XDMCD ; 
  10 XOBCD XOBCD ; 
  10 OP1PARTN OP1PARTN ; 
  10 OP1CUOID OP1CUOID ; 
  10 OP1CUNDT OP1CUNDT ; 
  10 XWHCD XWHCD ; 
  10 OPTDMND OPTDMND ; 
  10 XDVCD XDVCD ; 
  10 SM1AGYID SM1AGYID ; 
  10 XSOCD XSOCD ; 
  10 OP1TBREP OP1TBREP ; 
  10 OP1ORDBY OP1ORDBY ; 
  10 XXXPHN XXXPHN ; 
    15 XXXPHNA XXXPHNA ; 
    15 XXXPHNP XXXPHNP ; 
    15 XXXPHNN XXXPHNN ; 
  10 OSCLDMDT OSCLDMDT ; 
  10 OPTDRPDT OPTDRPDT ; 
  10 OPTDMDQT OPTDMDQT [40] ; 
  10 ZZZSDT ZZZSDT ; 
  10 ZZZCHGDT ZZZCHGDT ; 
  10 ZZZCHGTM ZZZCHGTM ; 
  10 ZZZCHGCT ZZZCHGCT ; 
end // end OSCREC

//*** RECORD=OSJREC ****
// *
// *   dorder.vwait001 passing parms to io4910 - this io mod
// *   can select a range of rows depending on hi/low values
// *   passed. this record contains the hi/low values for the
// *   dates used in the databaseand the io-task. the record
// *   is passed back to the calling appl with oscrec.
// *
// *   the call parms are:
// *
// *   call io4910 osjrec,sqlca,oscrec (nomaps,noncsp;
// *
// *
// **********************
Record OSJREC type basicRecord
  5 OSJGROUP OSJGROUP ; 
    10 OSJTASK OSJTASK ; 
    10 OSJNDTLO OSJNDTLO ; 
    10 OSJNDTHI OSJNDTHI ; 
    10 OSJLDTLO OSJLDTLO ; 
    10 OSJLDTHI OSJLDTHI ; 
    10 OSJDDTLO OSJDDTLO ; 
    10 OSJDDTHI OSJDDTHI ; 
end // end OSJREC

// qty change flag
DataItem OS0FWCHG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// detail converse flg
DataItem OS0FWDCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// all records deleted flag
DataItem OS0FWDEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// confirm delete flg - m010
DataItem OS0FWDF1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// confirm delete flg - m020
DataItem OS0FWDF2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// confifm delete flg - m030
DataItem OS0FWDF3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// field 1-company
DataItem OS0FWDI1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// field 2 - store
DataItem OS0FWDI2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// field 3 - department
DataItem OS0FWDI3 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// field 4 - gpc
DataItem OS0FWDI4 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// field  5
DataItem OS0FWDI5 char(23)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// err diag group-customer
DataItem OS0FWDIA char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// eof flg
DataItem OS0FWEOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error flg
DataItem OS0FWERR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// filler
DataItem OS0FWFIL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// inactive customer flag
DataItem OS0FWIAC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp storage lgth
DataItem OS0FWLEN num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// msg text
DataItem OS0FWMES char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// records deleted msg area
DataItem OS0FWMSG char(35)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// max page/rel rec nbr, ts1
DataItem OS0FWMX1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// max page/rel rec nbr, ts2
DataItem OS0FWMX2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// product converse flg
DataItem OS0FWPCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// product description
DataItem OS0FWPDS char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// products selected flg
DataItem OS0FWPRS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// total qty
DataItem OS0FWQTY num(5)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// rows deleted counter - numeric
DataItem OS0FWRC num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// rows deleted counter - alpha
DataItem OS0FWRCA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// oscrec/sy4rec subscript
DataItem OS0FWSB1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// os0fw03 saved subscript
DataItem OS0FWSB2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// map m030 subscript
DataItem OS0FWSB3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws loop subscript
DataItem OS0FWSB5 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// os0fw03 saved subscript
DataItem OS0FWSB9 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// style color abbreviation
DataItem OS0FWSCA char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// size converse flg
DataItem OS0FWSCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws option select field
DataItem OS0FWSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// select field  os0fm010
DataItem OS0FWSL1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// select field  os0fm020
DataItem OS0FWSL2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// save page nbr - m010
DataItem OS0FWSP1 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// save page nbr - m020
DataItem OS0FWSP2 num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// value ' '
DataItem OS0FWSPC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// short style number
DataItem OS0FWSSN char(12)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// map m020 subscript
DataItem OS0FWSUB smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// prod description
DataItem OS0FWSYN char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// sizes selected flag
DataItem OS0FWSZF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// temp storage lgth
DataItem OS0FWTS1 char(39)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// array group level
DataItem OS0FWTS2 char(37)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update temp storage 1 flag
DataItem OS0FWUF1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// update temp storage 2 flag
DataItem OS0FWUF2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// 0 qty warning flag
DataItem OS0FWWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// OP_LDMD_DT
DataItem OSCLDMDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// high-drop-date
DataItem OSJDDTHI int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// low-drop-date
DataItem OSJDDTLO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// group level
DataItem OSJGROUP char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// high-lost-date
DataItem OSJLDTHI int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// low-lost-date
DataItem OSJLDTLO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// high-need-date
DataItem OSJNDTHI int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// low-need-date
DataItem OSJNDTLO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// io-task
DataItem OSJTASK char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

