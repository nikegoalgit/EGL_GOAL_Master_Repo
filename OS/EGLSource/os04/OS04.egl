package os04;

import corpcom4.*;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import op.common.*;
import os.common.OSRREC;
import os.common.OSWWREC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
import vv.common.VBASGN01;
//*** PROGRAM=OS04 ****
// OVERVIEW:
// POSSIBLE STATEMENT GROUP MEANINGS:
//    OS04S-GET-   = SELECT RECORD
//    OS04S-FMT-   = FORMAT RECORD
//    OS04S-LOAD-  = LOAD RECORD
//    OS04S-BLD-   = BUILD RECORD
// 
// **  statement group naming is flexible and may not have
//     any meaning especially after several enhancements.
// 
// ********************************************************
// *     M A I N T E N A N C E     L O G                  *
// ********************************************************
// *
// * DATE        NAME          DESCRIPTION OF CHANGE
// *
// * 12/09/97   KLEE       Created.
// *********************
Program OS04 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "OP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  OS04W01 OS04W01; // record
  OSRREC OSRREC; // record
  OSWWREC OSWWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VBASGN01 VBASGN01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use OS04M.OS04M001,  // forms
      OS04M.OS04M002
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    OS04000: OS04000();
    if (VBASGN01.XGPCD == "03") /* ASSOCIATED APPRL BULK ASGNMN*/
      goto OS04020; /* flow to apparel map converse*/
    else
      goto OS04010; /* flow to ftwr map converse*/
    end

    OS04010: OS04010();
    goto OS04010;
    OS04020: OS04020();
    goto OS04020;
  end // end main
end // end OS04

// main execute process
Function OS04000()
     /* Check csp security*/

  XSENTRY();
  XSSEGTR(); /* set segmented trans id*/

     /* Initialize application*/

  OS04S-INIT-OS04();

     /* Build map for display*/

  OS04S-BLD-MAP();



end // end OS04000

// converse/ after process
Function OS04010()

  converseVar.segmentedMode = 1; /* force segmented converse mode*/

  converse OS04M001 ;

     /* Init error stuff*/

  OSWWREC.OSWWERFL = "N";
  converseLib.validationFailed(0);


     /* Reset field attributes*/

  OS04S-RESET-ATTR1();


  OS04S-TRNSFR-CNTL(); /* transfer to requested application.*/


end // end OS04010

// converse/ after process
Function OS04020()

  converseVar.segmentedMode = 1; /* force segmented converse mode*/

  converse OS04M002 ;

     /* Init error stuff*/

  OSWWREC.OSWWERFL = "N";
  converseLib.validationFailed(0);


     /* Reset field attributes*/

  OS04S-RESET-ATTR2();



  OS04S-TRNSFR-CNTL(); /* transfer to requested application.*/


end // end OS04020

// BUILD OS0O MAP
Function OS04S-BLD-MAP()

     /* build map headings*/

  OS04S-FMT-HEADINGS();

    /* display existing bulk assignment id*/

  OS04S-GET-VBASGN01(); /* select from vbasgn01*/

  if (VBASGN01.XGPCD == "03") /* associated aprl bulk asgnmnt*/
    OS04S-LOAD-MAP002(); /* load values to map 1*/
    OS04S-RESET-ATTR2(); /* reset field attrib*/
  else
    OS04S-LOAD-MAP001(); /* load values to map 2*/
    OS04S-RESET-ATTR1(); /* reset field attrib*/
  end


end // end OS04S-BLD-MAP

// FORMAT MAP HEADINGS
Function OS04S-FMT-HEADINGS()

  OS04M001.OS0OM-MAP-DTE = OSWWREC.OSWWCDAT; /* formatted current date*/
  OS04M002.OS0OM-MAP-DTE = OSWWREC.OSWWCDAT; /* formatted current date*/


end // end OS04S-FMT-HEADINGS

// Get VBASGN01 VIA IO7200
Function OS04S-GET-VBASGN01()


  set SQLCA empty;
  set VBASGN01 empty;

  VBASGN01.OB-BULK-ASGN-ID = OSWWREC.OB-BULK-ASGN-ID;
  OS04W01.OS04W-VBASGN01-POST = OSWWREC.OB-BULK-ASGN-ID;

  call "IO7200" ("S ", SQLCA, VBASGN01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* continue*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      OSWWREC.OSWWERFL = "Y";
      converseLib.validationFailed(010);
      set OS04M001.OB-ASGN-OLDEST-FL cursor;
    else
      if (OSWWREC.OSWWFRMAP == "OS0L") /* came from os0l appl*/
        OS04S-PRG-TMP-STOR(); /* purge os0l temp storage*/
      end
      TA1REC.TA1TYPE = "DB2 ";
      TA1REC.TA1FUNC = "RETN";
      TA1REC.TA1PGMNM = "OS04    ";
      TA1REC.TA1LOCAT[1] = "OS04S-GE";
      TA1REC.TA1LOCAT[2] = "T-VBASGN";
      TA1REC.TA1LOCAT[3] = "01 IO720";
      TA1REC.TA1LOCAT[4] = "0 S     ";
      TA1REC.TA1DBASE = "DORDB   ";
      TA1REC.TA1TBLVU = "VBASGN01";
      TA1REC.TA1TBLKE = OS04W01.OS04W-VBASGN01-POST;

      call "TA0020" (TA1REC, SQLCA) {isExternal = yes};

      COMMAREA.CAUSERA = " ";

      XSPF4();
      exit program;
    end
  end


end // end OS04S-GET-VBASGN01

// INITIALIZE OS0O APPLIC.
Function OS04S-INIT-OS04()

  set VBASGN01 empty; /* bulk assignment record*/
  set SQLCA empty; /* return code from DB2*/
  set ERRSQLCA empty; /* return code from non-db2*/
  set TAEREC empty; /* diags for non db2*/
  set TA1REC empty; /* diagnostic record*/
  set TA2REC empty; /* diagnostic record*/
  set TA5REC empty; /* diagnostic record*/
  set OS04W01 empty; /* working storage*/

  set OS04M001 empty; /* map*/
  set OS04M002 empty; /* map*/

  OSWWREC.OSWWGRP = COMMAREA.CAUSERA; /* COMMON WORKING STORAGE*/

    /* verify they came from os0k originally*/

  if (OSWWREC.OSWWINIT != "OS0K") /* originally didn't come from os0k*/
    transfer to program "OS0K" passing COMMAREA;
    exit program;
  end

  OSWWREC.OSWWCDAT = VGVar.currentShortGregorianDate;


end // end OS04S-INIT-OS04

// LOAD OS0O FTWR MAP
Function OS04S-LOAD-MAP001()


  OS04M001.OB-BULK-ASGN-ID = VBASGN01.OB-BULK-ASGN-ID;
  OSWWREC.OB-BULK-ASGN-ID = VBASGN01.OB-BULK-ASGN-ID;

  OS04M001.OB-BULK-ASGN-DESC = VBASGN01.OB-BULK-ASGN-DESC;

  OS04M001.OB-ASGN-OLDEST-FL = VBASGN01.OB-ASGN-OLDEST-FL;
  OS04M001.OB-ASGN-MO-ONLY-FL = VBASGN01.OB-ASGN-MO-ONLY-FL;
  OS04M001.OB-ASGN-MO-BWD-FL = VBASGN01.OB-ASGN-MO-BWD-FL;
  OS04M001.OB-ASGN-MO-FWD-FL = VBASGN01.OB-ASGN-MO-FWD-FL;

  OS04M001.OB-NEED-DRAW-BDT = OSWWREC.OB-NEED-BULK-BDT;
  OS04M001.OB-NEED-DRAW-XDT = OSWWREC.OB-NEED-BULK-XDT;

end // end OS04S-LOAD-MAP001

// LOAD OS0O APRL MAP
Function OS04S-LOAD-MAP002()


  OS04M002.OB-BULK-ASGN-ID = VBASGN01.OB-BULK-ASGN-ID;
  OSWWREC.OB-BULK-ASGN-ID = VBASGN01.OB-BULK-ASGN-ID;

  OS04M002.OB-BULK-ASGN-DESC = VBASGN01.OB-BULK-ASGN-DESC;

  OS04M002.OB-ASGN-OLDEST-FL = VBASGN01.OB-ASGN-OLDEST-FL;
  OS04M002.OB-ASGN-MO-ONLY-FL = VBASGN01.OB-ASGN-MO-ONLY-FL;
  OS04M002.OB-ASGN-MO-BWD-FL = VBASGN01.OB-ASGN-MO-BWD-FL;
  OS04M002.OB-ASGN-MO-FWD-FL = VBASGN01.OB-ASGN-MO-FWD-FL;
  OS04M002.OB-ASGN-IN-SESN-FL = VBASGN01.OB-ASGN-IN-SESN-FL;

  OS04M002.OB-NEED-DRAW-BDT = VBASGN01.OB-NEED-DRAW-BDT;
  OS04M002.OB-NEED-DRAW-XDT = VBASGN01.OB-NEED-DRAW-XDT;

end // end OS04S-LOAD-MAP002

// Non-DB2 Post Routine TA0020
Function OS04S-POST-NO-ROLL()
       /* Non-DB2 post routine*/

   /* the following fields will be filled in by the*/
   /* calling stmt group before entering this routine*/
     /* ta1locat(1) = transaction type  ie: 'ss' 'sn'*/
     /* ta1locat(2) = i/o mod name*/
     /* ta1locat(3) = calling stmt group name*/
     /* ta1locat(4) = programmers option(extra key data)*/
     /* taerec.taedesc1 = programmers opiton (additional key data*/
     /* taerec.taedesc2 = messages*/
     /* ta1map = appl's mapname and should be initilized*/
              /* in the programs init process.*/
   /* return code processing will also be handled by the*/
   /* calling stmt group.*/

  TA1REC.TA1TYPE = "APPL";
  TA1REC.TA1FUNC = "POST";
  TA1PGMNM = COMMAREA.CACURRAP; /* current application*/
  try
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
  end

end // end OS04S-POST-NO-ROLL

// Purge Bulk Asgnmnt Temp Storag
Function OS04S-PRG-TMP-STOR()



   /* purge temporary storage 1*/

  TA5REC.TA5APPID = "OSFL"; /* appl identification*/
  TA5REC.TA5FNCCD = "P"; /* function code*/
  call "TA0050" (OSRREC, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp storage subroutine*/

  if (TA5REC.TA5RTNCD == 0)
    OSWWREC.OSWWTF1P = 1;
    OSWWREC.OSWWTF1S = 1;
    OSWWREC.OSWWTF1M = 1;
  else
    TA1REC.TA1LOCAT[1] = "PRGE TS1";
    TA1REC.TA1LOCAT[2] = "TA0050"; /* io mod called*/
    TA1REC.TA1LOCAT[3] = TA5REC.TA5RTNCD; /* return code*/
    TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* subroutine parms*/
    OS04S-POST-NO-ROLL(); /* post,  no rollback, non db2*/


  end
end // end OS04S-PRG-TMP-STOR

// RESET FTWR MAP FIELD ATTRIB
Function OS04S-RESET-ATTR1()

     /* set heading attributes*/

  set OS04M001.OB-BULK-ASGN-ID initialAttributes;
  set OS04M001.OB-BULK-ASGN-DESC initialAttributes;

  set OS04M001.OB-ASGN-OLDEST-FL cursor, initialAttributes;
  set OS04M001.OB-ASGN-MO-ONLY-FL initialAttributes;
  set OS04M001.OB-ASGN-MO-BWD-FL initialAttributes;
  set OS04M001.OB-ASGN-MO-FWD-FL initialAttributes;


end // end OS04S-RESET-ATTR1

// RESET APRL MAP FIELD ATTRIB
Function OS04S-RESET-ATTR2()

     /* set heading attributes*/

  set OS04M002.OB-BULK-ASGN-ID initialAttributes;
  set OS04M002.OB-BULK-ASGN-DESC initialAttributes;

  set OS04M002.OB-ASGN-OLDEST-FL cursor, initialAttributes;
  set OS04M002.OB-ASGN-MO-ONLY-FL initialAttributes;
  set OS04M002.OB-ASGN-MO-BWD-FL initialAttributes;
  set OS04M002.OB-ASGN-MO-FWD-FL initialAttributes;
  set OS04M002.OB-ASGN-IN-SESN-FL initialAttributes;


end // end OS04S-RESET-ATTR2

// TRANSFER CONTROL TO OTHER APPL
Function OS04S-TRNSFR-CNTL()

  COMMAREA.CAUSERA = OSWWREC.OSWWGRP;

  if (converseVar.eventKey is pf3
   && OSWWREC.OSWWERFL == "N") /* no errors*/
    COMMAREA.CATOAP = "OS03"; /* Order Inquiry parms*/
    XSEXIT();

  end

  if (converseVar.eventKey is pf4
   && OSWWREC.OSWWERFL == "N") /* no errors*/
    if (OSWWREC.OSWWFRMAP == "OS01")
      OS04S-PRG-TMP-STOR();
    end
    COMMAREA.CAUSERA = " ";
    XSPF4();
  end

    /* transfer to OS0O Application*/

  if (converseVar.eventKey is pf9
   && OSWWREC.OSWWERFL == "N")
    COMMAREA.CATOAP = "OS0O";
    XSEXIT();
  end

    /* check for invalid pfkey*/

  if (converseVar.eventKey is pf10
   && OSWWREC.OSWWERFL == "N") /* no errors*/
    COMMAREA.CAFROMAP = "OS04";
    COMMAREA.CATOAP = "OS05"; /* draw order information*/
    XSEXIT();
  end

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf3
   || converseVar.eventKey is pf4
   || converseVar.eventKey is pf10
  ) /* next sentence - there may be errors*/
  else
    converseLib.validationFailed(1); /* invalid pf key*/
    OSWWREC.OSWWERFL = "Y"; /* set 'OB' error flag*/
  end

  if (converseVar.eventKey is enter)
    if (OSWWREC.OSWWERFL == "N") /* no errors*/
      if (OSWWREC.OSWWFRMAP == "OS03") /* no os0l loop for bulk asgnmnt ids*/
        COMMAREA.CATOAP = "OS0K"; /* Define Bulk Asgnmnts - Bulks*/
        XSEXIT();
      else
        OSWWREC.OSWWFRMAP = "OS04"; /* format from application*/
        COMMAREA.CAUSERA = OSWWREC.OSWWGRP;
        COMMAREA.CATOAP = "OS01"; /* go back to os0l for next blk asgn*/
        XSEXIT();
      end
    end
  end


end // end OS04S-TRNSFR-CNTL
//*** RECORD=OS04W01 ****
//     Working Storage Record for OS04.
// 
// ************************************************************
// *    MAINTENANCE LOG
// ************************************************************
// 
//   13/09/97    KLEE       initial creation
// ***********************
Record OS04W01 type basicRecord
  10 OS04W-CHG-FLAG OS04W-CHG-FLAG ; 
  10 OS04W-VBASGN01-POST OS04W-VBASGN01-POST ; 
end // end OS04W01

// Map Field Changed Flag
DataItem OS04W-CHG-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Bulk assignment id post key
DataItem OS04W-VBASGN01-POST char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

