package os0g;
import corpcom4.XSENTRY;
import corpcom4.XSOMS01;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import ku.common.KUCUNTCS;
import ku.common.KUFMIXBL;
import om.common.OMWREC;
import op.common.OP1PARTN;
import op.common.OP1REC;
import op.common.OP2CGPCD;
import op.common.OP2LNINB;
import op.common.OP2REC;
import op.common.OP3REC;
import op.common.OP8REC;
import op.common.OPBREC;
import os.common.OSNPKGNB;
import os.common.OSNREC;
import os.common.OSPDELET;
import os.common.OSPGROUP;
import os.common.OSPMORE;
import os.common.OSPORQ01;
import os.common.OSPORQ02;
import os.common.OSPORQ03;
import os.common.OSPORQ04;
import os.common.OSPORQ05;
import os.common.OSPORQ06;
import os.common.OSPORQ07;
import os.common.OSPORQ08;
import os.common.OSPORQ09;
import os.common.OSPORQ10;
import os.common.OSPORQ11;
import os.common.OSPORQ12;
import os.common.OSPORQ13;
import os.common.OSPORQ14;
import os.common.OSPORQ15;
import os.common.OSPORQ16;
import os.common.OSPORQ17;
import os.common.OSPORQ18;
import os.common.OSPORQ19;
import os.common.OSPORQ20;
import os.common.OSPPER1;
import os.common.OSPPER2;
import os.common.OSPPPQ01;
import os.common.OSPPPQ02;
import os.common.OSPPPQ03;
import os.common.OSPPPQ04;
import os.common.OSPPPQ05;
import os.common.OSPPPQ06;
import os.common.OSPPPQ07;
import os.common.OSPPPQ08;
import os.common.OSPPPQ09;
import os.common.OSPPPQ10;
import os.common.OSPPPQ11;
import os.common.OSPPPQ12;
import os.common.OSPPPQ13;
import os.common.OSPPPQ14;
import os.common.OSPPPQ15;
import os.common.OSPPPQ16;
import os.common.OSPPPQ17;
import os.common.OSPPPQ18;
import os.common.OSPPPQ19;
import os.common.OSPPPQ20;
import os.common.OSPREC;
import os.common.OSPSELTD;
import os.common.OSPSTYNB;
import os.common.OSPSZI01;
import os.common.OSPSZI02;
import os.common.OSPSZI03;
import os.common.OSPSZI04;
import os.common.OSPSZI05;
import os.common.OSPSZI06;
import os.common.OSPSZI07;
import os.common.OSPSZI08;
import os.common.OSPSZI09;
import os.common.OSPSZI10;
import os.common.OSPSZI11;
import os.common.OSPSZI12;
import os.common.OSPSZI13;
import os.common.OSPSZI14;
import os.common.OSPSZI15;
import os.common.OSPSZI16;
import os.common.OSPSZI17;
import os.common.OSPSZI18;
import os.common.OSPSZI19;
import os.common.OSPSZI20;
import os.common.OSPTSLEN;
import os.common.OSPTSROW;
import os.common.OSWREC;
import pk.common.PKTBACTI;
import sy.common.SY1SSTNM;
import sy.common.SY2CLRAB;
import sy.common.SY2CLRID;
import sy.common.SY4REC;
import sy.common.SYCREC;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
import xx.common.*;
import xx.common.XGPCD;
import xx.common.ZZZCHGCT;
import xx02.*;
import xx02.XDMCD;
import xx04.*;
import xx04.XPATBL;
import xx07.*;
import xx07.SY4SZSCL;
import xx08.*;
import xx08.SY1STNBR;
import xx08.YNTCD;
//*** PROGRAM=OS0G ****
// ************************************************************
// *  MENU OF SERVICES - CUSTOMER PREPACK BY PRODUCT          *
// ************************************************************
// *                                                          *
// *  OVERVIEW: This application will display all products    *
// *            and their package numbers (if assigned) for a *
// *            specified order, and allow the customer       *
// *            service rep to select a product or all        *
// *            products for packaging.                       *
// *                                                          *
// *            This application is called by the OM0M        *
// *            applications.                                 *
// *                                                          *
// ************************************************************
// *                                                          *
// *    IOMODS       DATABASE/FILENAME        CSP RECORDS     *
// *    ------       -----------------       -------------    *
// *    OP3730       DORDER.VCSPRP01         SQLCA,  OP2REC,  *
// *                                         OSNREC           *
// *                                                          *
// *    DB1000       DORDER.VITEM001         OP8REC, OP3REC,  *
// *                 DORDER.VOSIZE01         OPBREC           *
// *                                                          *
// *    IO0560       DPROD.VCOLOR02          SQLCA,  SYCREC   *
// *                                                          *
// *    IO0040       DPROD.VSCALE01          SQLCA,  SY4REC   *
// *                                                          *
// *    TA0020       Post DB2 errors         TA1REC, ERRSQLCA *
// *                                                          *
// *    TA0020       Post Non-DB2 errors     TA1REC, TAEREC   *
// *                                                          *
// *    TA0050       Temp Storage Routine    OSPREC, TA5REC   *
// *                                                          *
// ************************************************************
// *                                                          *
// * MAINTENANCE HISTORY:                                     *
// *   DATE     WHO                  COMMENTS                 *
// * --------  ------       --------------------------------- *
// * 03/26/91  OCO          Original Creation                 *
// * 06/17/91  GWELLS       Menu of Services - added logic    *
// *                        to set delete flag for allocated  *
// *                        and partially allocated line items*
// *                        s32,s40,s7a,s7f,s7n,000           *
// * 06/29/91  GWELLS       Menu of Services - Changed record *
// *                        definition and length of oswrec,  *
// *                        osprec.  map,s31,s32,s42,s51,s53, *
// *                        s54,s55,s7f,s7g,s7n,s71,s73,s74,  *
// *                        s75,w01                           *
// * 11/14/91  JHECKE       Menu of Services - Changed record *
// *                        definition and length of osprec.  *
// *                        Also included gpc=02 (footwear)   *
// *                        in s10. Also needed to change
// *                        almost every other statement
// *                        group to accomodate the additional
// *                        TS rrecord used for footwear sizes
// *                        21-40.
// *  04/28/94 jather       log 1003. renamed causera to
// *                        ca-user-workarea-4k to hold opwrec
// *                        which has increased to 3072 bytes.
// *  04/13/98 wleong       changed to keep prepack for XL'ed
// *                        line item.  this is for auditing
// *                        purposes for the POMS system.
// *                        os0gs42.
// *  08/27/98 udafon #178  Increased size of OMWREC to 3505
//                          bytes. Re-compiled application.
// ************************************************************
// 
// *********************
Program OS0G type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "OP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  OMWREC OMWREC; // record
  OP1REC OP1REC; // record
  OP2REC OP2REC; // record
  OP3REC OP3REC; // record
  OP8REC OP8REC; // record
  OPBREC OPBREC; // record
  OS0GW01 OS0GW01; // record
  OS0GW02 OS0GW02; // record
  OSNREC OSNREC; // record
  OSPREC OSPREC; // record
  OSWREC OSWREC; // record
  SQLCA SQLCA; // record
  SY4REC SY4REC; // record
  SYCREC SYCREC; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XPATBL; // table
  use OS0GM.OS0GM001 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    OS0G000: OS0G000();
    ;
     /* =======================*/
      /* flow to next process*/
     /* =======================*/
    ;
    goto OS0G010;
    ;
    OS0G010: OS0G010();
     /* ===================================================*/
      /* NOTE: flow is to this converse process*/
            /* if PF7 or PF8 is pressed and*/
            /* error/s is/are found in the*/
            /* edit/process PF keys stmt grp.*/
    ;
            /* for PF3, if there are no errors*/
                /* found during edit, it will*/
                /* branch to OM0M.*/
    ;
            /* for ENTER (continue), if there*/
                /* are no errors found during*/
                /* edit, it will branch to OS0H*/
     /* ===================================================*/
    ;
    goto OS0G010;
    ;
  end // end main
end // end OS0G

// init., load temp storage/map
Function OS0G000()
  ;
    /* ***********************************************************/
    /* *  This process re-checks the gpc and pack code on       **/
    /* *  order to see if it can have prepacks.  It initializes **/
    /* *  the work areas and load temp storage.                 **/
    /* ***********************************************************/
  ;
  ;
  ;
  VAGen_EZEREPLY = VGVar.handleSysLibraryErrors;	  // save value
  VGVar.handleSysLibraryErrors = 0;		// VAGEN (REPLY option omitted
  sysLib.commit();
  VGVar.handleSysLibraryErrors = VAGen_EZEREPLY;		//restore value
  
  ;
  XSENTRY(); /* application entry validation*/
  ;
  XSOMS01(); /* o/m system security*/
  ;
  OS0GS05(); /* extract op1rec from commarea*/
  ;
  XSSEGTR(); /* setting segmented trans id*/
  ;
  OS0GS10(); /* check gpc code*/
  ;
  OS0GS15(); /* check pack code in xpatbl*/
  ;
  OS0GS20(); /* initialize records*/
  ;
  OS0GS25(); /* load temp storage (osprec)*/
  ;
  OS0GS30(); /* load map from temp stor*/
  ;
end // end OS0G000

// converse, edit pf keys
Function OS0G010()
  ;
  converseVar.segmentedMode = 1; /* force segmented execution mode*/
  ;
  converse OS0GM001 ;
  ;
  OS0GS35(); /* reset field attributes*/
  ;
  OS0GS36(); /* edit/process pf keys*/
  ;
end // end OS0G010

// extract op1rec from commarea
Function OS0GS05()
  ;
  COMMAREA.CACURRAP = "OS0G"; /* current applic*/
  ;
   /* =========================================*/
    /* since this is the first time OSWREC is*/
    /* set up in this application, it is*/
    /* initialized here.  However, in all*/
    /* other cases where the 3rd character of*/
    /* the record is a 'W', these records*/
    /* should NOT be initialized..........*/
   /* =========================================*/
  ;
  set OSWREC empty;
  ;
   /* ==============================*/
    /* extract OMWREC from COMMAREA*/
   /* ==============================*/
  OMWREC.OMWSGRP = COMMAREA.CA-USER-WORKAREA-4K;
  ;
   /* ==============================*/
    /* extract OP1REC from OMWREC*/
   /* ==============================*/
  OP1REC.OP1GROUP = OMWREC.OP1GROUP;
  ;
   /* ==============================*/
    /* move OMWREC to OSWREC*/
   /* ==============================*/
  OSWREC.OSWOMWGP = OMWREC.OMWSGRP;
  ;
end // end OS0GS05

// check gpc code
Function OS0GS10()
    /* ==========================================================*/
      /* if gpc code = '03' (apparel)  or*/
      /* if gpc code = '02' (footwear) continue processing*/
      /* otherwise, exit from this application and return to*/
      /* calling application . . . . . .*/
    /* ==========================================================*/
  ;
  if (OP1REC.XGPCD == "03"
   || OP1REC.XGPCD == "02")
    return;
  else
    COMMAREA.CATOAP = "OM0M"; /* return to calling applic*/
    OS0GS11(); /* dxfr out*/
  end
  ;
end // end OS0GS10

// DXFR out
Function OS0GS11()
   /* =================*/
       /* dxfr out*/
   /* =================*/
  ;
  ;
  COMMAREA.CAFROMAP = COMMAREA.CACURRAP;
  ;
  sysVar.transferName = COMMAREA.CATOAP;
  ;
  COMMAREA.CATOAP = " ";
  ;
  transfer to program sysVar.transferName passing COMMAREA;
end // end OS0GS11

// check pack code in xpatbl
Function OS0GS15()
  ;
   /* =====================================================*/
        /* check if pack code in OP1REC exists in the*/
        /* table XPATBL.*/
  ;
        /* if it exists, the 'specified flag' for that*/
        /* specific pack code must be = 'Y' and the*/
        /* 'status' must be an 'A'.*/
   /* =====================================================*/
  ;
  sysVar.arrayIndex = 1;
  ;
  if (OP1REC.XPACD in XPATBL.XPACD              /* exists in Pack Code table*/
   && XPATBL.XPASPFFL[sysVar.arrayIndex] == "Y" /* Cust Specified Flag*/
   && XPATBL.XXXSTAT[sysVar.arrayIndex] == "A") /* Pack Code Active*/
    ;
    return;
    ;
  else
    ;
    COMMAREA.CATOAP = "OM0M";
    OS0GS11(); /* return to calling applic*/
    ;
  end
  ;
end // end OS0GS15

// initialize records
Function OS0GS20()
  ;
  set OS0GW01 empty;
  ;
  set OS0GW02 empty;
  ;
  set OSPREC empty;
  ;
  set OS0GM001 initial;
  ;
  OS0GS21(); /* reformat date (mm-dd-yy)*/
  ;
  OS0GS22(); /* reformat order & cust nos.*/
  ;
  ;
end // end OS0GS20

// reformat map date (mm-dd-yy)
Function OS0GS21()
  ;
  ;
  OS0GW01.OS0GWEDT = VGVar.currentShortGregorianDate; /* system date (yymmdd)*/
  ;
  OS0GW01.OS0GWCYY = OS0GW01.OS0GWEYY;
  ;
  OS0GW01.OS0GWCMM = OS0GW01.OS0GWEMM;
  ;
  OS0GW01.OS0GWCDD = OS0GW01.OS0GWEDD;
  ;
  OS0GW01.OS0GWDS1 = "-";
  ;
  OS0GW01.OS0GWDS2 = "-";
  ;
end // end OS0GS21

// reformat order & cust nos.
Function OS0GS22()
  ;
    /* ==========================*/
       /* reformat order no.*/
    /* ==========================*/
  ;
  OS0GW01.OS0GWCOI = OP1REC.OP1CUOID;
  ;
  OS0GW01.OS0GWPR1 = ".";
  ;
  OS0GW01.OS0GWNOI = OP1REC.OP1NORID;
  ;
  ;
    /* ==========================*/
       /* reformat customer no.*/
    /* ==========================*/
  ;
  OS0GW01.OS0GWCCI = OP1REC.KUCCOID;
  ;
  OS0GW01.OS0GWPR2 = ".";
  ;
  OS0GW01.OS0GWSTI = OP1REC.KUMSTRID;
  ;
  OS0GW01.OS0GWPR3 = ".";
  ;
  OS0GW01.OS0GWDEP = OP1REC.XNXCD;
  ;
end // end OS0GS22

// load temp stor (OSPREC)
Function OS0GS25()
  ;
   /* =================================*/
       /* initialize before loading*/
   /* =================================*/
  ;
  OS0GW01.OS0GWCPG = 0; /* init current page cntr*/
  ;
  OSWREC.OSWTSF1M = 0; /* init last page cntr*/
  ;
  OS0GW01.OS0GWPGC = 0; /* init page cntr*/
  ;
  OS0GW01.OS0GWEOF = "N"; /* init end-of-file*/
  ;
  OS0GW01.OS0GWSUB = 0; /* init w/s subscript*/
  ;
  set SQLCA empty;
  ;
  set TA5REC empty; /* init rec to be passed to TA0050*/
  ;
  set TA1REC empty;
  ;
  OS0GS26(); /* purge temp stor*/
  ;
  OS0GS27(); /* format/write temp stor*/
  ;
end // end OS0GS25

// purge temp storage
Function OS0GS26()
  ;
  ;
  ;
  TA5REC.TA5APPID = "OS0G"; /* applic id*/
  ;
  TA5REC.TA5FNCCD = "P"; /* function code 'p' = purge*/
  ;
  call "TA0050" (OSPREC, TA5REC) {isNoRefresh = yes, isExternal = yes};
  ;
   /* * * * * * * * * * * * * * * * * * * * * * * **/
  ;
    /* note: return code from TA0050 is not*/
          /* checked here in the purge routine*/
          /* 'coz it doesn't matter if the*/
          /* purging is ok or not.  Also, if*/
          /* it was unsuccessful, the error*/
          /* is posted in TA0050.*/
  ;
   /* * * * * * * * * * * * * * * * * * * * * * * **/
  ;
end // end OS0GS26

// format/write t/s (OSPREC)
Function OS0GS27()
  ;
   /* ===========================================*/
    /* EXISTS IN ITEM  AND  NOT EXISTS IN PREPACK*/
   /* ===========================================*/
  ;
  OS0GS7A(); /* DECLARE/OPEN ITEM*/
  ;
  OS0GS7B(); /* FETCH 1st ITEM*/
  ;
  ;
  while (OS0GW01.OS0GWEOF != "Y")
    ;
    OS0GW01.OS0GWSUB = OS0GW01.OS0GWSUB + 1;
    ;
    OS0GS7F(); /* MOVE TO TEMP STOR*/
    ;
    if (OS0GW01.OS0GWSUB == 12)
      OS0GS7G(); /* write temp storage*/
      ;
      OS0GW01.OS0GWSUB = 0;
    end
    ;
    ;
    OS0GS7B(); /* fetch next item*/
    ;
  end
  ;
  OS0GS7H(); /* close item cursor*/
  ;
  ;
   /* ======================================*/
    /* check if prepack-exist flag is 'on'.*/
    /* if 'on'*/
       /* do a join of both item & prepack*/
       /* databases*/
   /* ======================================*/
  ;
  if (OMWREC.OMWPPEXF == "Y") /* prepack exists, need to get join*/
    ;
    OS0GW01.OS0GWEOF = "N"; /* reset end-of-file*/
    ;
    OS0GS7I(); /* declare item/prepack*/
    ;
    OS0GS7J(); /* fetch 1st item/prepack*/
    ;
    while (OS0GW01.OS0GWEOF != "Y")
      ;
      OS0GW01.OS0GWSUB = OS0GW01.OS0GWSUB + 1;
      ;
      OS0GS7N(); /* MOVE TO TEMP STOR*/
      ;
      if (OS0GW01.OS0GWSUB == 12)
        OS0GS7G(); /* write temp stor*/
        ;
        OS0GW01.OS0GWSUB = 0;
        ;
      end
      ;
      OS0GS7J(); /* fetch next item/prepack*/
    end
    ;
    OS0GS7P(); /* close item/prepack cursor*/
    ;
  end
  ;
  if (OS0GW01.OS0GWSUB > 0)
    ;
    OS0GS7G(); /* write temp stor (for the last time)*/
    ;
  end
  ;
  ;
  if (OS0GW01.OS0GWPGC == 0)
    TA1REC.TA1LOCAT[1] = "OS0G000";
    TA1REC.TA1LOCAT[2] = "OS0GS27";
    TAEREC.TAEDESC1 = "NO RECORDS LOADED IN TEMP STOR";
    OS0GS98(); /* post non-db2 err*/
    OS0GS29(); /* force DXFR out*/
  else
    ;
    /* ======================================*/
     /* 1. pass the last record no. written*/
        /* into temp stor to OMWREC (this*/
        /* data is needed to be passed to*/
        /* OS0H later)*/
     /* 2. init current page cntr to 1*/
    /* ======================================*/
    OSWREC.OSWTSF1M = OS0GW01.OS0GWPGC;
    ;
    OS0GW01.OS0GWCPG = 1; /* set current page to 1*/
    ;
  end
  ;
end // end OS0GS27

// force DXFR out
Function OS0GS29()
  ;
   /* ==================================================*/
  ;
   /* this statement group is performed when there*/
   /* are abnormal returns from the other modules*/
   /* like OP3730, DB100, IO0560, IO0040, TA0050.*/
   /* for the reason that there is no use to continue*/
   /* processing for these abnormal errors, the*/
   /* system forces user out to 'OM0M' and*/
   /* sending a msg thru commarea.*/
  ;
   /* ==================================================*/
  ;
  COMMAREA.CAMSG = " ";
  ;
  OS0GW01.OS0GWEM1 = "UNABLE TO PROCESS REQUEST ";
  ;
  OS0GW01.OS0GWEM2 = "CONTACT USER ANALYST";
  ;
  COMMAREA.CAMSG = OS0GW01.OS0GWERM;
  ;
  COMMAREA.CATOAP = "OM0M";
  ;
  OS0GS26(); /* purge temp storage*/
  ;
  OS0GS11(); /* DXFR out*/
  ;
  ;
end // end OS0GS29

// load map from temp stor
Function OS0GS30()
  ;
   /* =====================================*/
      /* initialize maps & records*/
   /* =====================================*/
  ;
  set OS0GM001 initial;
  ;
  set OSPREC empty;
  ;
  set TA5REC empty;
  ;
  set TA1REC empty;
  ;
   /* =====================================*/
      /* format map top line*/
   /* =====================================*/
  ;
  OS0GM001.OS0GMPRC = "OS0G010"; /* process name*/
  ;
  OS0GM001.OS0GMRVN = "01"; /* revision no.*/
  ;
  OS0GM001.OS0GMCDT = OS0GW01.OS0GWCDT; /* current date*/
  ;
  OS0GM001.OS0GMORD = OS0GW01.OS0GWORD; /* reformatted order no.*/
  ;
  OS0GM001.OS0GMCUS = OS0GW01.OS0GWCUS; /* reformatted cust no.*/
  ;
  OS0GM001.KUMSTRNM = OMWREC.KUMSTRNM; /* cust store name*/
  ;
  OS0GM001.CAMSG = COMMAREA.CAMSG; /* commarea message*/
  ;
  OS0GM001.OS0GMAST = "(*)"; /* delete message legend*/
  ;
   /* =====================================*/
      /* read current page temp storage*/
   /* =====================================*/
  ;
  TA5REC.TA5TSQIX = OS0GW01.OS0GWCPG; /* set ts page no. to cur page*/
  ;
  OS0GS31(); /* read temp storage*/
  ;
   /* =====================================*/
      /* format map detail lines*/
   /* =====================================*/
  ;
  OS0GS32(); /* format map detail line*/
  ;
  ;
  ;
end // end OS0GS30

// read temp stor
Function OS0GS31()
  ;
  ;
  TA5REC.TA5APPID = "OS0G";
  ;
  TA5REC.TA5FNCCD = "R";
  ;
  OSPREC.OSPTSLEN = 3820; /* ts length of rec*/
  ;
  ;
  call "TA0050" (OSPREC, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp stor subrtn*/
  ;
   /* =============================================*/
    /* if ret code is non-zero*/
       /* force user out of this application*/
   /* =============================================*/
  if (TA5REC.TA5RTNCD == 0)
     /* next sentence*/
  else
    ;
    OS0GS29(); /* force DXFR out*/
    ;
  end
  if (OSPREC.OSPMORE[1] == "2"
   || OSPREC.OSPMORE[2] == "2"
   || OSPREC.OSPMORE[3] == "2"
   || OSPREC.OSPMORE[4] == "2"
   || OSPREC.OSPMORE[5] == "2"
   || OSPREC.OSPMORE[6] == "2"
   || OSPREC.OSPMORE[7] == "2"
   || OSPREC.OSPMORE[8] == "2"
   || OSPREC.OSPMORE[9] == "2"
   || OSPREC.OSPMORE[10] == "2"
   || OSPREC.OSPMORE[11] == "2"
   || OSPREC.OSPMORE[11] == "2")
    if (converseVar.eventKey is pf8)
      TA5REC.TA5TSQIX = TA5REC.TA5TSQIX + 1; /* get the next ts record*/
      OS0GW01.OS0GWCPG = OS0GW01.OS0GWCPG + 1; /* update current page*/
      if (OS0GW01.OS0GWCPG > OSWREC.OSWTSF1M)
        OS0GW01.OS0GWCPG = OS0GW01.OS0GWCPG - 2; /* update current page*/
        converseLib.validationFailed(644);
        return;
      end
    else
      if (converseVar.eventKey is pf7)
        TA5REC.TA5TSQIX = TA5REC.TA5TSQIX - 1; /* get the next ts record*/
        OS0GW01.OS0GWCPG = OS0GW01.OS0GWCPG - 1; /* update current page*/
        if (OS0GW01.OS0GWCPG <= 1)
          converseLib.validationFailed(643);
          return;
        end
      end
    end
    TA5REC.TA5APPID = "OS0G";
    TA5REC.TA5FNCCD = "R";
    OSPREC.OSPTSLEN = 3820; /* ts length of rec*/
    call "TA0050" (OSPREC, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp stor subrtn*/
   /* =============================================*/
    /* if ret code is non-zero*/
       /* force user out of this application*/
   /* =============================================*/
    if (TA5REC.TA5RTNCD == 0)
        /* next sentence*/
    else
      ;
      OS0GS29(); /* force DXFR out*/
      ;
    end
  end
  ;
  ;
end // end OS0GS31

// format map detl line
Function OS0GS32()
  ;
  ;
  OS0GW01.OS0GWSUB = 1; /* set subscript to 1*/
  ;
  while (OS0GW01.OS0GWSUB <= 12)
    if (OSPREC.OSPSTYNB[OS0GWSUB] == " ")
      set OS0GM001.OS0GMSEL[OS0GWSUB] skip, invisible;
    else
      set OS0GM001.OS0GMSEL[OS0GWSUB] initialAttributes;
      if (OSPREC.OSPDELET[OS0GWSUB] == "*") /* delete*/
        OS0GM001.OS0GMDEL[OS0GWSUB] = OSPREC.OSPDELET[OS0GWSUB];
      else /* do not want to display 'a'(allocated) or*/
        OS0GM001.OS0GMDEL[OS0GWSUB] = " "; /* 'p'(partially alloc)*/
      end
      OS0GM001.OS0GMSEL[OS0GWSUB] = OSPREC.OSPSELTD[OS0GWSUB];
      OS0GM001.OSNPKGNB[OS0GWSUB] = OSPREC.OSNPKGNB[OS0GWSUB];
      OS0GM001.OSPSTYNB[OS0GWSUB] = OSPREC.OSPSTYNB[OS0GWSUB];
      OS0GM001.OP2CGPCD[OS0GWSUB] = OSPREC.OP2CGPCD[OS0GWSUB];
      OS0GM001.SY1SSTNM[OS0GWSUB] = OSPREC.SY1SSTNM[OS0GWSUB];
      OS0GM001.SY2CLRAB[OS0GWSUB] = OSPREC.SY2CLRAB[OS0GWSUB];
    end
    OS0GW01.OS0GWSUB = OS0GW01.OS0GWSUB + 1;
  end
  ;
end // end OS0GS32

// reset field attributes
Function OS0GS35()
  ;
   /* =====================================================*/
    /* reset the only enterable field (select) to define*/
   /* =====================================================*/
  ;
  COMMAREA.CAMSG = " "; /* reset commarea msg*/
  ;
  OS0GW01.OS0GWSUB = 1; /* set subscript to 1*/
  ;
  while (OS0GW01.OS0GWSUB <= 12)
    if (OS0GM001.OSPSTYNB[OS0GWSUB] == " ")
      set OS0GM001.OS0GMSEL[OS0GWSUB] skip, invisible;
    else
      set OS0GM001.OS0GMSEL[OS0GWSUB] initialAttributes;
    end
    OS0GW01.OS0GWSUB = OS0GW01.OS0GWSUB + 1;
  end
  ;
end // end OS0GS35

// edit/process pf keys
Function OS0GS36()
  ;
  converseLib.validationFailed(0);
  ;
  if (converseVar.eventKey is pf3)
    OS0GS40(); /* return to OM0M*/
  else
    if (converseVar.eventKey is pf4)
      OS0GS80(); /* return to MN0M*/
    else
      if (converseVar.eventKey is pf7)
        OS0GS50(); /* scroll backward*/
      else
        if (converseVar.eventKey is pf8)
          OS0GS60(); /* scroll forward*/
        else
          if (converseVar.eventKey is enter)
            OS0GS70(); /* continue*/
          else
            converseLib.validationFailed(645); /* invalid PF key*/
          end
        end
      end
    end
  end
end // end OS0GS36

// PF3 edit - OM0M
Function OS0GS40()
  ;
   /* =================================================*/
   /* CHECK CHANGE LEVEL SECURITY*/
     /* Security is being checked so the CSR can exit*/
     /* application without packaging all items under*/
     /* certain security conditions*/
   /* ==================================================*/
  ;
   /* see if customer service rep*/
   /* is authorized to change order*/
  ;
  if (COMMAREA.CACHGFL == "Y") /* id authorized to chg ord*/
    if (OMWREC.OMWCHGFL == "N" /* inquiry mode (set in OM0M)*/
     && OMWREC.OMWPF2CH == "N") /* temp change mode*/
      OS0GS26(); /* purge temp stor*/
      COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
      COMMAREA.CATOAP = "OM0M";
      OS0GS11(); /* DXFR out*/
    else
       /* next sentence*/
    end
  else /* id not authorized to chg order*/
    OS0GS26(); /* purge temp stor*/
    COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
    COMMAREA.CATOAP = "OM0M";
    OS0GS11(); /* DXFR out*/
  end
  ;
   /* ============================*/
   /* initialize flags, records*/
   /* ============================*/
  ;
  OS0GW01.OS0GWNPF = "N"; /* init no-package-flag*/
  ;
  OS0GW01.OS0GWPEF = "N"; /* init package-exist-flag*/
  ;
  set OSPREC empty;
  ;
  set TA5REC empty;
  ;
  TA5REC.TA5TSQIX = 1; /* init temp stor index to 1*/
  ;
  ;
   /* =========================================================*/
    /* Read thru all records in the temp storage queue*/
    /* until the last record (which is equal to the last*/
    /* page no. stored in OSWTSF1M)*/
  ;
    /* For each record read*/
        /* edit the delete and package no. fields for each*/
        /* of the 12 occurrence (detail lines)*/
   /* =========================================================*/
  ;
  while (TA5REC.TA5TSQIX <= OSWREC.OSWTSF1M
   && converseVar.validationMsgNum == 0)
    ;
    OS0GS31(); /* read temp storage*/
    ;
    OS0GW01.OS0GWSUB = 1; /* init subscript to 1*/
    ;
    while (OS0GW01.OS0GWSUB <= 12
     && converseVar.validationMsgNum == 0)
      OS0GS42(); /* edit delete and pkg no. fields*/
    end
    ;
    if (converseVar.validationMsgNum == 0)
      TA5REC.TA5TSQIX = TA5REC.TA5TSQIX + 1;
    end
  end
  ;
  if (converseVar.validationMsgNum == 0)
    OS0GS26(); /* purge temp stor*/
    COMMAREA.CA-USER-WORKAREA-4K = OMWREC.OMWSGRP;
    COMMAREA.CATOAP = "OM0M";
    OS0GS11(); /* DXFR out*/
  end
  ;
end // end OS0GS40

// edit delete & pkg no. fields
Function OS0GS42()
   /* ===========================================================*/
     /* C H E C K     D E L E T E     F I E L D*/
  ;
     /* an '*' in delete field means that such item has an 'xl'*/
     /* code (cancel) in the VITEM001 record and needs to be  '*/
     /* deleted from VCSPRP01 database.The CSR has to get*/
     /* into OS0H and delete this item.*/
   /* ===========================================================*/
  ;
   /* removed the following code for auditing purposes 04/13/98*/
   /* IF OSPREC.OSPDELET(OS0GWSUB) EQ '*';*/
   /* MOVE 650 TO EZEMNO;   /* item with '*' must be deleted from prep*/
   /* EZERTN;*/
   /* END;*/
  ;
   /* ===========================================================*/
     /* C H E C K     P A C K A G E - N O.    F I E L D*/
  ;
     /* If an item has a package no., all other items must have*/
     /* a package no.  In other words, the system does not allow*/
     /* a partially prepacked order.  Every item has to be packed*/
     /* before the system lets the CSR exit.*/
   /* ===========================================================*/
  ;
  if (OSPREC.OSNPKGNB[OS0GWSUB] == 0) /* current item has no pkg no.*/
    if (OS0GW01.OS0GWPEF == "Y") /* prior item/s has/have pkg no/s.*/
      converseLib.validationFailed(658); /* all products must contain a pkg. no.*/
      return;
    else
      if (OS0GW01.OS0GWNPF == "N") /* the no-pkg-flag is off*/
        OS0GW01.OS0GWNPF = "Y"; /* put no-pkg-flag on*/
      end
    end
  else /* current item has a pkg no.*/
    if (OS0GW01.OS0GWNPF == "Y") /* prior item/s do not have pkg no/s.*/
      converseLib.validationFailed(658); /* all products must contain a pkg no.*/
      return;
    else
      if (OS0GW01.OS0GWPEF == "N") /* the pkg-exist-flag is off*/
        OS0GW01.OS0GWPEF = "Y"; /* put pkg-exist-flag on*/
      end
    end
  end
  ;
  OS0GS44();
                                   /* increment subs & check next style no.*/
  ;
  ;
end // end OS0GS42

// incr. subs & chk next TSQ sty
Function OS0GS44()
  ;
    /* increment subs*/
  ;
  OS0GW01.OS0GWSUB = OS0GW01.OS0GWSUB + 1;
  ;
  if (OS0GW01.OS0GWSUB == 13)
    return;
  else
    ;
      /* check next detail style no.*/
    ;
    if (OSPREC.OSPSTYNB[OS0GWSUB] == " ") /* no more detl data*/
      OS0GW01.OS0GWSUB = 13; /* force end to loop*/
    end
  end
  ;
  ;
end // end OS0GS44

// PF7 edit-scroll backward
Function OS0GS50()
  ;
   /* ===========================*/
     /* check the current page*/
   /* ===========================*/
  ;
  if (OS0GW01.OS0GWCPG == 1) /* first page*/
    converseLib.validationFailed(643); /* cannot scroll backward*/
    return;
  end
  ;
   /* ==========================*/
     /* current page > 1*/
   /* ==========================*/
  ;
  converseLib.validationFailed(0); /* init ezemno*/
  ;
  OS0GS51(); /* edit map current page*/
  ;
  if (converseVar.validationMsgNum == 0)
    /* ==========================*/
     /* do a rewrite whether or*/
     /* not there is/are update/s*/
    /* ==========================*/
    OS0GS53(); /* rewrite/update temp stor*/
    OS0GW01.OS0GWCPG = OS0GW01.OS0GWCPG - 1;
    OS0GS30(); /* load map*/
  end
end // end OS0GS50

// edit map current page
Function OS0GS51()
   /* ===================*/
   /* initialize data*/
   /* ===================*/
  converseLib.validationFailed(0); /* init ezemno*/
  ;
  OS0GW01.OS0GWALF = "N"; /* init all-flag*/
  ;
  OS0GW01.OS0GWSFL = "N"; /* init S-flag*/
  ;
  OS0GW01.OSNPKGNB = 0; /* init save-pkg-no*/
  ;
  set OSPREC empty;
  ;
  set TA5REC empty;
  ;
   /* ==================================*/
   /* read current page temp stor rec*/
   /* ==================================*/
  ;
  TA5REC.TA5TSQIX = OS0GW01.OS0GWCPG; /* set ts indx to curr page*/
  ;
  OS0GS31(); /* read temp storage*/
  ;
   /* =====================================================*/
   /* edit each select code in current page temp stor rec*/
   /* =====================================================*/
  ;
  OS0GW01.OS0GWSUB = 1; /* init subs to 1*/
  ;
  while (OS0GW01.OS0GWSUB <= 12
   && converseVar.validationMsgNum == 0)
    ;
    OS0GS52(); /* edit select code*/
    ;
  end
  ;
  if (converseVar.validationMsgNum == 0)
    if (OSWREC.OSWTSF1M == 1) /* only 1 page/record in T/S*/
      /* =====================================================*/
       /* CHECK THE S-FLAG:*/
       /* if S-flag is 'on' (meaning there is at least an item*/
                          /* on the current map with 'S' select*/
                          /* code)*/
          /* CHECK THE SAVE-PKG-NO:*/
          /* if save-pkg-no is blank (meaning there is one or more*/
                          /* items on the current map with 'S'*/
                          /* select code and blank pkg no.)*/
             /* move '000' to OSWREC.OSpPKGNB*/
          /* else*/
             /* move the save-pkg-no to OSWREC.OSNPKGNB*/
      ;
      /* * * * * * * * * * * * * * * * * * * * * * * * * * * **/
       /* NOTE: For the 'A' select code, the moving of data*/
             /* to OSWREC.OSNPKGNB is done at the end of*/
             /* stmt grp OS0GS54.*/
      ;
             /* For the 'S' select code (OS0GS55), this is*/
             /* not done coz it is impossible at that point*/
             /* to do this.*/
      /* =====================================================*/
      ;
      if (OS0GW01.OS0GWSFL == "Y")
        ;
        if (OS0GW01.OSNPKGNB == 0) /* blank save-pkg-no*/
           /* next sentence*/
        else /* non-blank save-pkg-no*/
          OSWREC.OSNPKGNB = OS0GW01.OSNPKGNB;
        end
        ;
      else /* no items selected*/
        if (OS0GW01.OS0GWALF == "Y") /* entire pkg selected*/
          return;
        else
          converseLib.validationFailed(659); /* select 'a' or 's'*/
          return;
        end
      end
      ;
    end
    ;
  end
  ;
end // end OS0GS51

// edit map select code
Function OS0GS52()
   /* ============================================*/
  ;
       /* check the select code;*/
       /* valid select codes: 'A', 'S' or ' '.*/
  ;
   /* ============================================*/
  ;
  if (OS0GM001.OS0GMSEL[OS0GWSUB] == "A")
    ;
    OS0GS54(); /* edit map 'A' select*/
    ;
  else
    if (OS0GM001.OS0GMSEL[OS0GWSUB] == "S")
      ;
      OS0GS55(); /* edit map 'S' select*/
      ;
    else
      if (OS0GM001.OS0GMSEL[OS0GWSUB] == " ")
        /* next sentence*/
        ;
      else
        ;
        converseLib.validationFailed(659); /* select option is not valid*/
        ;
        set OS0GM001.OS0GMSEL[OS0GWSUB] cursor, bold;
        ;
        return;
        ;
      end
      ;
    end
    ;
  end
  ;
  if (converseVar.validationMsgNum == 0)
    ;
    /* =========================================*/
        /* update the temp storage select-code*/
        /* field with the map select-code field*/
    /* =========================================*/
    ;
    OSPREC.OSPSELTD[OS0GWSUB] = OS0GM001.OS0GMSEL[OS0GWSUB];
    ;
    OS0GS56(); /* increment subs & check next map sty no.*/
  end
  ;
end // end OS0GS52

// rewrite/update temp stor
Function OS0GS53()
  ;
  ;
  ;
  TA5REC.TA5APPID = "OS0G";
  ;
  TA5REC.TA5FNCCD = "U"; /* update function*/
  ;
  OSPREC.OSPTSLEN = 3808; /* ts length of rec*/
  ;
  ;
  call "TA0050" (OSPREC, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp stor subrtn*/
  ;
  if (TA5REC.TA5RTNCD == 0)
     /* next sentence*/
  else
    /* =============================================*/
      /* if ret code is non-zero*/
         /* force to exit from this applic*/
         /* and transfer to 'OM0M'*/
    /* =============================================*/
    OS0GS29(); /* force DXFR out*/
    ;
  end
  ;
  ;
end // end OS0GS53

// edit map 'A' select
Function OS0GS54()
   /* ==================================================*/
  ;
   /* only 1 item on the screen can have*/
   /* an 'A' select code*/
  ;
   /* either an 'A' or a 'S' can be entered*/
   /* but not both.*/
  ;
   /* if both the All-flag and S-flag are 'n'*/
   /* it means the item is the first 'A'*/
   /* select and the first item that has a*/
   /* valid select code; therefore,*/
     /* a- set the All-flag 'on'*/
     /* b- updt the select code of OSPREC*/
        /* (temp stor) by moving the*/
        /* select code from map*/
  ;
  ;
   /* ==================================================*/
  ;
  if (OS0GW01.OS0GWALF == "N")
    ;
    if (OS0GW01.OS0GWSFL == "N")
      ;
      OS0GW01.OS0GWALF = "Y"; /* set all-flag 'on'*/
      ;
       /* next sentence*/
      ;
    else /* prior item/s has 'S' select code*/
      ;
      converseLib.validationFailed(660); /* select either 'A' or 'S' not both*/
      return;
      ;
    end
  else /* prior item/s has 'A' select code*/
    converseLib.validationFailed(661); /* multiple pkgs cannot be selected*/
    return;
  end
  ;
   /* ----------------------------------------*/
  ;
           /* FORMAT DATA FOR OSWREC*/
  ;
     /* (the following is done only once*/
      /* after setting the All-flag 'on')*/
   /* ----------------------------------------*/
    /* if the total pages / ts recs = 1*/
       /* initialize the data in OSWREC*/
       /* that needs to be passed on to*/
       /* OS0H:*/
          /* - 1st page no. w/ 'A' sel*/
            /* code*/
          /* - subscript or detail item*/
            /* no. in the 1st page w/*/
            /* 'A'; sel. code*/
   /* ----------------------------------------*/
  ;
  if (OSWREC.OSWTSF1M == 1)
    OSWREC.OSWTSF1P = TA5REC.TA5TSQIX;
    OSWREC.OSWTSF1S = OS0GW01.OS0GWSUB;
  end
  ;
   /* ----------------------------------------*/
    /* if pkg no. on map for the item*/
       /* selected w/ 'A' has a pkg no.*/
       /* then pass the pkg no. to OSWREC*/
   /* ----------------------------------------*/
  ;
  if (OS0GM001.OSNPKGNB[OS0GWSUB] == 0)
     /* next sentence*/
  else
    OSWREC.OSNPKGNB = OS0GM001.OSNPKGNB[OS0GWSUB];
  end
  ;
end // end OS0GS54

// edit map 'S' select
Function OS0GS55()
  ;
   /* ==================================================*/
  ;
   /* more than 1 item on the screen can be selected*/
   /* with 'S' code.  However, if these items have*/
   /* pkg nos. in them, these pkg nos. should be*/
   /* the same or 1 or more items w/ blank pkg nos.*/
   /* may be selected together with 1 or more items*/
   /* w/ the same pkg nos.*/
  ;
   /* either an 'A' or a 'S' can be entered*/
   /* but not both.*/
  ;
   /* ==================================================*/
  ;
  if (OS0GW01.OS0GWALF == "Y") /* prior item/s has an 'A' sel code*/
    converseLib.validationFailed(660); /* select either 'A' or 'S' not both*/
    return;
  else
    ;
    if (OS0GW01.OS0GWSFL == "N") /* first selected item*/
      /* ---------------------------------------*/
         /* FIRST SELECTED ITEM ON THE SCREEN*/
      /* ---------------------------------------*/
           /* set s-flag on*/
           /* if the selected item has pkg no.*/
              /* move pkg no. to save-pkg no.*/
           /* else*/
              /* go to FORMAT DATA FOR OSWREC*/
      /* ---------------------------------------*/
      ;
      OS0GW01.OS0GWSFL = "Y";
      ;
      /* ----------------------------------------*/
      ;
               /* FORMAT DATA FOR OSWREC*/
      ;
      /* ----------------------------------------*/
        /* if the total pages / ts recs = 1*/
           /* move data from map to  OSWREC*/
           /* that needs to be passed on to*/
           /* OS0H:*/
              /* - 1st page no. w/ 'S' sel*/
                /* code*/
              /* - subscript or detail item*/
                /* no. in the 1st page w/*/
                /* 'S'; sel. code*/
      /* ----------------------------------------*/
      ;
      if (OSWREC.OSWTSF1M == 1)
        OSWREC.OSWTSF1P = TA5REC.TA5TSQIX;
        OSWREC.OSWTSF1S = OS0GW01.OS0GWSUB;
      end
      ;
      if (OS0GM001.OSNPKGNB[OS0GWSUB] != 0)
        ;
        OS0GW01.OSNPKGNB = OS0GM001.OSNPKGNB[OS0GWSUB];
        ;
      else
         /* next sentence (go to FORMAT DATA FOR OSWREC)*/
      end
      ;
    else /* not the first selected item*/
      /* ---------------------------------------*/
         /* SUBSEQUENT SELECTED ITEM ON SCREEN*/
      /* ---------------------------------------*/
         /* if the selected item has pkg no.*/
            /* if the save-pkg-no is blank*/
               /* move pkg no. to save-pkg-no.*/
            /* else*/
               /* if pkg-no not = save-pkg-no.*/
                  /* send error msg*/
               /* else*/
                  /* exit from this stmt grp*/
         /* else (selected item has a blank pkg no.)*/
            /* exit from this stmt grp*/
      /* ---------------------------------------*/
      ;
      if (OS0GM001.OSNPKGNB[OS0GWSUB] != 0)
        if (OS0GW01.OSNPKGNB == 0)
          OS0GW01.OSNPKGNB = OS0GM001.OSNPKGNB[OS0GWSUB];
        else
          if (OS0GM001.OSNPKGNB[OS0GWSUB] != OS0GW01.OSNPKGNB)
            converseLib.validationFailed(661); /* multiple pkgs cannot be selected*/
            return;
          else
            return;
          end
        end
      else /* blank map pkg-no.*/
        return;
      end
      ;
    end
    ;
  end
  ;
  ;
  ;
end // end OS0GS55

// incr subs & check next map sty
Function OS0GS56()
  ;
    /* increment subs*/
  ;
  OS0GW01.OS0GWSUB = OS0GW01.OS0GWSUB + 1;
  ;
  if (OS0GW01.OS0GWSUB == 13)
    return;
  else
    ;
      /* check next map detl style no.*/
    ;
    if (OS0GM001.OSPSTYNB[OS0GWSUB] == " ") /* no more detl data*/
      OS0GW01.OS0GWSUB = 13; /* force end to loop*/
    end
  end
  ;
  ;
end // end OS0GS56

// PF8 edit-scroll forward
Function OS0GS60()
  ;
   /* ===========================*/
     /* check the current page*/
   /* ===========================*/
  ;
  if (OS0GW01.OS0GWCPG == OSWREC.OSWTSF1M) /* last page reached*/
    converseLib.validationFailed(644); /* cannot scroll forward*/
    return;
  end
  ;
   /* ============================*/
     /* current page < last page*/
   /* ============================*/
  ;
  converseLib.validationFailed(0); /* init ezemno*/
  ;
  OS0GS51(); /* edit map current page*/
  ;
  if (converseVar.validationMsgNum == 0)
    OS0GS53(); /* rewrite/update temp stor*/
    OS0GW01.OS0GWCPG = OS0GW01.OS0GWCPG + 1; /* incr page*/
    OS0GS30(); /* load map*/
  end
  ;
end // end OS0GS60

// ENTER edits/process
Function OS0GS70()
  ;
   /* ==================================================*/
     /* E D I T     M A P    C U R R E N T   P A G E*/
   /* ==================================================*/
  ;
  OS0GS51(); /* edit map current page*/
  ;
   /* ---------------------------*/
   /* If no errors in edit*/
      /* rewrite/update ts*/
   /* ELSE*/
      /* exit*/
   /* ---------------------------*/
  ;
  if (converseVar.validationMsgNum == 0)
    OS0GS53(); /* rewrite/update temp stor*/
  else
    return;
  end
  ;
  ;
   /* ==================================*/
     /* in addition to edit current map*/
     /* page, if last page-cntr > 1*/
     /* EDIT ALL RECORDS IN  TEMP STOR*/
   /* ==================================*/
  ;
  if (OSWREC.OSWTSF1M > 1)
    OS0GS71(); /* edit all recs in ts queue*/
  end
  ;
  if (converseVar.validationMsgNum != 0)
    return;
  end
  ;
   /* =================================*/
    /* format OSWREC to pass to OS0H*/
   /* =================================*/
  ;
  OSWREC.OSWOMWGP = OMWREC.OMWSGRP;
  ;
  COMMAREA.CA-USER-WORKAREA-4K = OSWREC.OSWSGRP;
  ;
   /* =================================*/
    /* DXFR out to OS0H*/
   /* =================================*/
  ;
  COMMAREA.CATOAP = "OS0H";
  ;
  OS0GS11(); /* DXFR out*/
  ;
  ;
end // end OS0GS70

// edit all recs in TSQ
Function OS0GS71()
  ;
   /* ============================*/
   /* initialize flags, records*/
   /* ============================*/
  ;
  converseLib.validationFailed(0); /* init ezemno*/
  ;
  OS0GW01.OS0GWALF = "N"; /* init all-flag*/
  ;
  OS0GW01.OS0GWSFL = "N"; /* init select-flag*/
  ;
  OS0GW01.OSNPKGNB = 0; /* init pkg#*/
  ;
  set OSPREC empty;
  ;
  set TA5REC empty;
  ;
  TA5REC.TA5TSQIX = 1; /* init temp stor index to 1*/
  ;
  OS0GW01.OS0GWSUB = 1; /* init subscript to 1*/
  ;
   /* =========================================================*/
    /* Read thru all records in the temp storage queue*/
    /* until the last record (which is equal to the last*/
    /* page no. stored in OSWTSF1M)*/
  ;
    /* For each record read*/
        /* edit the delete and package no. fields for each*/
        /* of the 12 occurrence (detail lines)*/
   /* =========================================================*/
  ;
  while (TA5REC.TA5TSQIX <= OSWREC.OSWTSF1M
   && converseVar.validationMsgNum == 0)
    ;
    OS0GS31(); /* read temp storage*/
    ;
    while (OS0GW01.OS0GWSUB <= 12
     && converseVar.validationMsgNum == 0)
      OS0GS72(); /* edit TSQ select codes*/
    end
    ;
    if (converseVar.validationMsgNum == 0)
      TA5REC.TA5TSQIX = TA5REC.TA5TSQIX + 1;
      OS0GW01.OS0GWSUB = 1; /* reset subscript to 1*/
    end
    ;
  end
  ;
  if (converseVar.validationMsgNum == 0)
    OS0GS75(); /* check for at least 1 'A' or 'S'*/
  end
  ;
end // end OS0GS71

// edit TSQ select codes
Function OS0GS72()
  ;
   /* ============================================*/
  ;
       /* check the select code;*/
       /* valid select codes: 'A', 'S' or ' '.*/
  ;
   /* ============================================*/
  ;
  if (OSPREC.OSPSELTD[OS0GWSUB] == "A")
    OS0GS73(); /* edit TSQ 'A' select*/
  else
    if (OSPREC.OSPSELTD[OS0GWSUB] == "S")
      OS0GS74(); /* edit TSQ 'S' select*/
    else
      if (OSPREC.OSPSELTD[OS0GWSUB] == " ")
         /* next sentence*/
      else
        converseLib.validationFailed(659); /* select option is not valid*/
        set OS0GM001.OS0GMSEL[OS0GWSUB] initialAttributes;
        OS0GM001.OS0GMSEL[OS0GWSUB] = "J";
        return;
      end
    end
  end
  ;
  if (converseVar.validationMsgNum == 0)
    OS0GS44(); /* increment subs & check TSQ sty no.*/
  end
  ;
  ;
  ;
end // end OS0GS72

// edit TSQ 'A' select
Function OS0GS73()
  ;
   /* ==================================================*/
  ;
   /* only 1 item on all TSQ recs can have*/
   /* an 'A' select code*/
  ;
   /* either an 'A' or a 'S' can be entered*/
   /* but not both.*/
  ;
   /* if both the All-flag and S-flag are 'n'*/
   /* it means the item is the first 'A'*/
   /* select and the first item that has a*/
   /* valid select code; therefore,*/
     /* a- set the All-flag 'on'*/
     /* b- updt the select code of OSPREC*/
        /* (temp stor) by moving the*/
        /* select code from map*/
  ;
  ;
   /* ==================================================*/
  ;
  if (OS0GW01.OS0GWALF == "N")
    ;
    if (OS0GW01.OS0GWSFL == "N")
      ;
      OS0GW01.OS0GWALF = "Y";
      ;
      /* ----------------------------------------*/
            /* FORMAT DATA FOR OSWREC*/
      /* ----------------------------------------*/
           /* initialize the data in OSWREC*/
           /* that needs to be passed on to*/
           /* OS0H:*/
              /* - 1st page no. w/ 'A' sel*/
                /* code*/
              /* - subscript or detail item*/
                /* no. in the 1st page w/*/
                /* 'A'; sel. code*/
      /* ----------------------------------------*/
      ;
      OSWREC.OSWTSF1P = TA5REC.TA5TSQIX;
      OSWREC.OSWTSF1S = OS0GW01.OS0GWSUB;
      ;
      /* ----------------------------------------*/
           /* if TSQ rec pkg no. for the item*/
              /* selected w/ 'A' has a pkg no.*/
              /* then pass the pkg no. to OSWREC*/
      /* ----------------------------------------*/
      ;
      if (OSPREC.OSNPKGNB[OS0GWSUB] == 0) /* blank pkg-no*/
        ;
         /* next sentence*/
        ;
      else /* non-blank pkg-no*/
        ;
        OSWREC.OSNPKGNB = OSPREC.OSNPKGNB[OS0GWSUB];
        ;
      end
      ;
    else /* prior item/s has 'S' select code*/
      ;
      converseLib.validationFailed(660); /* select either 'A' or 'S' not both*/
      ;
    end
    ;
  else /* prior item/s has 'A' select code*/
    ;
    converseLib.validationFailed(661); /* multiple pkgs cannot be selected*/
    ;
  end
  ;
  ;
end // end OS0GS73

// edit TSQ 'S' select
Function OS0GS74()
  ;
   /* ==================================================*/
  ;
   /* more than 1 item on all TSQ recs can be selected*/
   /* with 'S' code.  However, if these items have*/
   /* pkg nos. in them, these pkg nos. should be*/
   /* the same or 1 or more items w/ blank pkg nos.*/
   /* may be selected together with 1 or more items*/
   /* w/ the same pkg nos.*/
  ;
   /* either an 'A' or a 'S' can be entered*/
   /* but not both.*/
  ;
  ;
  ;
   /* ==================================================*/
  ;
  if (OS0GW01.OS0GWALF == "Y") /* prior item/s has an 'A' sel code*/
    ;
    converseLib.validationFailed(660); /* select either 'A'or 'S' not both*/
    ;
    return;
    ;
  else
    ;
    if (OS0GW01.OS0GWSFL == "N") /* first selected item*/
      /* ---------------------------------------*/
         /* FIRST SELECTED ITEM IN THE TSQ*/
      /* ---------------------------------------*/
           /* set s-flag on*/
           /* if the selected item has pkg no.*/
              /* move pkg no. to save-pkg no.*/
           /* else*/
              /* go to FORMAT DATA FOR OSWREC*/
      /* ---------------------------------------*/
      OS0GW01.OS0GWSFL = "Y";
      ;
      /* ----------------------------------------*/
      ;
               /* FORMAT DATA FOR OSWREC*/
      ;
      /* ----------------------------------------*/
           /* move data that need to be passed*/
           /* on to OS0H thru OWREC:*/
              /* - 1st page no. w/ 'S' sel*/
                /* code*/
              /* - subscript or detail item*/
                /* no. in the 1st page w/*/
                /* 'S'; sel. code*/
      /* ----------------------------------------*/
      ;
      OSWREC.OSWTSF1P = TA5REC.TA5TSQIX;
      OSWREC.OSWTSF1S = OS0GW01.OS0GWSUB;
      ;
      if (OSPREC.OSNPKGNB[OS0GWSUB] != 0)
        OS0GW01.OSNPKGNB = OSPREC.OSNPKGNB[OS0GWSUB];
      end
      ;
    else /* not the first selected item*/
      /* ---------------------------------------*/
         /* SUBSEQUENT SELECTED ITEM IN TSQ*/
      /* ---------------------------------------*/
         /* if the selected item has pkg no.*/
            /* if the save-pkg-no is blank*/
               /* move pkg no. to save-pkg-no.*/
            /* else*/
               /* if pkg-no not = save-pkg-no.*/
                  /* send error msg*/
               /* else*/
                  /* exit from this stmt grp*/
         /* else (selected item has a blank pkg no.)*/
            /* exit from this stmt grp*/
      /* ---------------------------------------*/
      ;
      if (OSPREC.OSNPKGNB[OS0GWSUB] != 0) /* item selt'd has pkg no.*/
        ;
        if (OS0GW01.OSNPKGNB == 0)
          OS0GW01.OSNPKGNB = OSPREC.OSNPKGNB[OS0GWSUB];
        else
          ;
          if (OSPREC.OSNPKGNB[OS0GWSUB] != OS0GW01.OSNPKGNB)
            converseLib.validationFailed(661); /* multiple pkgs cannot be selected*/
            return;
          else
            return;
          end
          ;
        end
        ;
      else /* blank map pkg-no.*/
        return;
      end
      ;
    end
    ;
  end
  ;
end // end OS0GS74

// check for at least 'A' or 'S'
Function OS0GS75()
  ;
   /* ==============================================*/
    /* At least 1 item must be selected with*/
    /* an 'A' or a 'S' (either the all-flag or the*/
    /* S-flag = 'y')*/
  ;
    /* If both the all-flag and the select-flag*/
    /* are 'N' it means nothing is selected.*/
    /* therefore, send an error message.*/
  ;
    /* For S-flag 'on', additional steps to be*/
    /* done:*/
      /* CHECK THE SAVE-PKG-NO:*/
      /* if save-pkg-no is blank (meaning there is one or more*/
                      /* items on the current map with 'S'*/
                      /* select code and blank pkg no.)*/
         /* move '000' to OSWREC.OSNPKGNB*/
      /* else*/
         /* move the save-pkg-no to OSWREC.OSNPKGNB*/
  ;
   /* * * * * * * * * * * * * * * * * * * * * * * * * * * **/
   /* NOTE: For the 'A' select code, the moving of data*/
         /* to OSWREC.OSNPKGNB was done in stmt grp OS0GS73*/
  ;
         /* For the 'S' select code in OS0GS74, this is*/
         /* not done coz it was impossible at that point*/
         /* to do this.*/
   /* ====================================================*/
  ;
  if (OS0GW01.OS0GWALF == "Y") /* All-flag 'on'*/
    ;
    return;
    ;
  else
    ;
    if (OS0GW01.OS0GWSFL == "Y") /* S-flag 'on'*/
      ;
      if (OS0GW01.OSNPKGNB == 0) /* blank save-pkg-no*/
         /* next sentence*/
      else /* non-blank save-pkg-no*/
        OSWREC.OSNPKGNB = OS0GW01.OSNPKGNB;
      end
      ;
    else
      ;
      converseLib.validationFailed(659); /* select option is not valid*/
      ;
    end
    ;
  end
  ;
end // end OS0GS75

// declare/open item
Function OS0GS7A()
  ;
  ;
  set SQLCA empty;
  set OP2REC empty;
  set OSNREC empty;
  ;
   /* ======================*/
   /* set up key to OP2REC*/
   /* ======================*/
  ;
  OP2REC.OP1PARTN = OP1REC.OP1PARTN;
  OP2REC.OP1CUOID = OP1REC.OP1CUOID;
  OP2REC.OP1NORID = OP1REC.OP1NORID;
  ;
  call "OP3730" ("S1", SQLCA, OP2REC, OSNREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      ;
         /* ---------------------*/
            /* D X F R  to self*/
         /* ---------------------*/
      ;
      sysVar.transferName = COMMAREA.CACURRAP;
      transfer to program sysVar.transferName passing COMMAREA;
      ;
    else
      ;
         /* ------------------------------------*/
            /* format data for db2 err posting*/
         /* ------------------------------------*/
      ;
      TA1REC.TA1DBASE = "DORDER  "; /* database name*/
      TA1REC.TA1TBLVU = "VITEM001"; /* table view*/
      TA1REC.TA1LOCAT[1] = "OS0G000 "; /* process name*/
      TA1REC.TA1LOCAT[2] = "OS0GS7A "; /* statement grp*/
      TA1REC.TA1LOCAT[3] = "OP3730  "; /* iomod*/
      ;
         /* --------------------------------*/
             /* format OP1REC db key in W/S*/
         /* --------------------------------*/
      ;
      TA1REC.TA1TBLKE = " ";
      OS0GW01.OP1PARTN = OP1REC.OP1PARTN;
      OS0GW01.OS0GWKCO = OP1REC.OP1CUOID;
      OS0GW01.OS0GWKNO = OP1REC.OP1NORID;
      TA1REC.TA1TBLKE = OS0GW01.OS0GWKY1;
      ;
      OS0GS99(); /* db2 err post routine*/
      OS0GS29(); /* force DXFR out*/
    end
  end
  ;
end // end OS0GS7A

// fetch item
Function OS0GS7B()
  ;
  ;
  call "OP3730" ("N1", SQLCA, OP2REC, OSNREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    OS0GS7C(); /* get size-run rec (OP3REC)*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OS0GW01.OS0GWEOF = "Y";
    else
      ;
         /* ------------------------------------*/
            /* format data for db2 err posting*/
         /* ------------------------------------*/
      ;
      TA1REC.TA1DBASE = "DORDER  "; /* database name*/
      TA1REC.TA1TBLVU = "VITEM001"; /* table view*/
      TA1REC.TA1LOCAT[1] = "OS0G000 "; /* process name*/
      TA1REC.TA1LOCAT[2] = "OS0GS7B "; /* statement grp*/
      TA1REC.TA1LOCAT[3] = "OP3730  "; /* iomod*/
      ;
         /* --------------------------------*/
             /* format OP1REC db key in W/S*/
         /* --------------------------------*/
      ;
      TA1REC.TA1TBLKE = " ";
      OS0GW01.OP1PARTN = OP1REC.OP1PARTN;
      OS0GW01.OS0GWKCO = OP1REC.OP1CUOID;
      OS0GW01.OS0GWKNO = OP1REC.OP1NORID;
      TA1REC.TA1TBLKE = OS0GW01.OS0GWKY1;
      ;
      OS0GS99(); /* db2 retn err routine*/
      OS0GS29(); /* force DXFR out*/
    end
  end
  ;
end // end OS0GS7B

// get size-run rec (OP3REC)
Function OS0GS7C()
  ;
  set OP3REC empty; /* init op3rec*/
  ;
   /* ==================================*/
      /* set up key to read db record*/
   /* ==================================*/
  ;
  OP3REC.OP1PARTN = OP2REC.OP1PARTN; /* partition*/
  OP3REC.OP1CUOID = OP2REC.OP1CUOID; /* cust. ord id*/
  OP3REC.OP1NORID = OP2REC.OP1NORID; /* nike ord id*/
  OP3REC.OP2LNINB = OP2REC.OP2LNINB; /* line item no.*/
  ;
  ;
   /* ===============================================*/
     /* SET UP PARM RECORD (OP8REC) TO BE PASSED TO*/
     /* DB1000*/
   /* ===============================================*/
  ;
  set OP8REC empty; /* initialize*/
  ;
  OP8REC.OP8TASK = "S "; /* select a record*/
  OP8REC.OP8LOCAT[1] = "OS0G000"; /* process name*/
  OP8REC.OP8LOCAT[2] = "OS0GS7C"; /* group name*/
  OP8REC.OP8LOCAT[3] = " "; /* filler*/
  OP8REC.OP8MAP = "OS0GM001"; /* map name*/
  OPBREC.OPBSZRC = +911; /* inform DB1000 not to abend*/
  ;
   /* ==============================*/
      /* call db1000 to read db2*/
   /* ==============================*/
  ;
  call "DB1000" (OP8REC, OP3REC, OPBREC) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (OPBREC.OPBSZRC == 0) /* good return*/
    OS0GS7D(); /* get desc-color (SYCREC)*/
  else
    if (OPBREC.OPBSZRC == +14) /* got a -911*/
      ;
         /* ---------------------*/
            /* D X F R  to self*/
         /* ---------------------*/
      ;
      sysVar.transferName = COMMAREA.CACURRAP;
      transfer to program sysVar.transferName passing COMMAREA;
      ;
    else
      ;
         /* ------------------------------------*/
            /* format data for db2 err posting*/
         /* ------------------------------------*/
      ;
      TA1REC.TA1DBASE = "DORDER  "; /* database name*/
      TA1REC.TA1TBLVU = "VOSIZE01"; /* table view*/
      TA1REC.TA1LOCAT[1] = "OS0G000 "; /* process name*/
      TA1REC.TA1LOCAT[2] = "OS0GS7C "; /* statement grp*/
      TA1REC.TA1LOCAT[3] = "DB1000  "; /* iomod*/
      ;
         /* -----------------------------------*/
             /* format db key in W/S*/
             /* before moving to ta1rec*/
          /* (coz some db key fields are binary)*/
         /* -----------------------------------*/
      ;
      TA1REC.TA1TBLKE = " ";
      OS0GW01.OS0GWKLI = OP2REC.OP2LNINB;
      TA1REC.TA1TBLKE = OS0GW01.OS0GWKY2;
      ;
      OS0GS99(); /* db2 retn err routine*/
      OS0GS29(); /* force DXFR out*/
    end
  end
  ;
end // end OS0GS7C

// get desc-color (SYCREC)
Function OS0GS7D()
  ;
   /* =========================*/
    /* initialize pass record*/
   /* =========================*/
  ;
  set SYCREC empty;
  set SQLCA empty;
  ;
   /* ===========================*/
    /* set up key to read sycrec*/
   /* ===========================*/
  ;
  SYCREC.XGPCD = OP3REC.XGPCD; /* gpc code*/
  SYCREC.SY1STNBR = OP3REC.SY1STNBR; /* style*/
  SYCREC.SY2CLRID = OP3REC.SY2CLRID; /* color*/
  SYCREC.XDMCD = OP3REC.XDMCD; /* dimension*/
  ;
  call "IO0560" ("S ", SQLCA, SYCREC) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* good return*/
    OS0GS7E(); /* get size-scale (SY4REC)*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* dbase busy*/
      ;
         /* ---------------------*/
            /* D X F R  to self*/
         /* ---------------------*/
      ;
      sysVar.transferName = COMMAREA.CACURRAP;
      transfer to program sysVar.transferName passing COMMAREA;
      ;
    else
      ;
         /* ------------------------------------*/
            /* format data for db2 err posting*/
         /* ------------------------------------*/
      ;
      TA1REC.TA1DBASE = "DPROD   "; /* database name*/
      TA1REC.TA1TBLVU = "VCOLOR02"; /* table view*/
      TA1REC.TA1LOCAT[1] = "OS0G000 "; /* process name*/
      TA1REC.TA1LOCAT[2] = "OS0GS7D "; /* statement grp*/
      TA1REC.TA1LOCAT[3] = "IO0560  "; /* iomod*/
      ;
         /* --------------------------------*/
             /* format db key in W/S*/
         /* --------------------------------*/
      ;
      TA1REC.TA1TBLKE = " ";
      OS0GW01.XGPCD = OP3REC.XGPCD; /* gpc code*/
      OS0GW01.SY1STNBR = OP3REC.SY1STNBR; /* style*/
      OS0GW01.SY2CLRID = OP3REC.SY2CLRID; /* color*/
      OS0GW01.XDMCD = OP3REC.XDMCD; /* dimension*/
      TA1REC.TA1TBLKE = OS0GW01.OS0GWKY3;
      ;
      OS0GS99(); /* db2 retn err routine*/
      OS0GS29(); /* force DXFR out*/
    end
  end
  ;
end // end OS0GS7D

// get size-scale (SY4REC)
Function OS0GS7E()
  ;
  set SY4REC empty; /* init sy4rec*/
  ;
      /* ********************************************************/
      /* * read db2 for the product's size scale code          **/
      /* * this give us a record with 40 size descriptions     **/
      /* ********************************************************/
  ;
   /* =======================================*/
      /* set up key to read dbase record*/
   /* =======================================*/
  ;
  SY4REC.SY4SZSCL = SYCREC.SY4SZSCL; /* scale code*/
  ;
   /* =================*/
      /* read db2*/
   /* =================*/
  ;
  call "IO0040" ("S ", SQLCA, SY4REC) {isNoRefresh = yes, isExternal = yes}; /* i/o mod for single select*/
  ;
   /* ===========================*/
      /* check db2 return code*/
   /* ===========================*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* check for good return*/
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911) /* dbase busy*/
      ;
         /* ---------------------*/
            /* D X F R  to self*/
         /* ---------------------*/
      ;
      sysVar.transferName = COMMAREA.CACURRAP;
      transfer to program sysVar.transferName passing COMMAREA;
      ;
    else
      ;
         /* ------------------------------------*/
            /* format data for db2 err posting*/
         /* ------------------------------------*/
      ;
      TA1REC.TA1DBASE = "DPROD   "; /* database name*/
      TA1REC.TA1TBLVU = "VSCALE01"; /* table view*/
      TA1REC.TA1LOCAT[1] = "OS0G000 "; /* process name*/
      TA1REC.TA1LOCAT[2] = "OS0GS7E "; /* statement grp*/
      TA1REC.TA1LOCAT[3] = "IO0040  "; /* iomod*/
      ;
         /* --------------------------------*/
             /* format  db key in W/S*/
         /* --------------------------------*/
      ;
      TA1REC.TA1TBLKE = " ";
      TA1REC.TA1TBLKE = SYCREC.SY4SZSCL;
      ;
      OS0GS99(); /* db2 retn err post*/
      OS0GS29(); /* force DXFR out*/
    end
  end
  ;
end // end OS0GS7E

// move to temp stor
Function OS0GS7F()
  ;
     /* move fields to temp storage*/
  ;
  ;
  ;
  ;
  if (OP2REC.OP2LNIST == "AL") /* item allocated*/
    OSPREC.OSPDELET[OS0GWSUB] = "A"; /* delete code*/
    OS0GW02.OSPDELET[OS0GWSUB] = "A"; /* delete code*/
  else
    if (OP2REC.OP2LNIST == "PA") /* item partially allocated*/
      OSPREC.OSPDELET[OS0GWSUB] = "P"; /* delete code*/
      OS0GW02.OSPDELET[OS0GWSUB] = "P"; /* delete code*/
    else /* xl orders are excluded*/
      OSPREC.OSPDELET[OS0GWSUB] = " "; /* delete code*/
      OS0GW02.OSPDELET[OS0GWSUB] = " "; /* delete code*/
    end
  end
  ;
  OSPREC.OSPSELTD[OS0GWSUB] = " "; /* select code*/
  OS0GW02.OSPSELTD[OS0GWSUB] = " "; /* select code*/
  ;
  OSPREC.OSNPKGNB[OS0GWSUB] = 0; /* pkg no.*/
  OS0GW02.OSNPKGNB[OS0GWSUB] = 0; /* pkg no.*/
  ;
  OSPREC.SY1STNBR[OS0GWSUB] = OP3REC.SY1STNBR; /* style no.*/
  OS0GW02.SY1STNBR[OS0GWSUB] = OP3REC.SY1STNBR; /* style no.*/
  ;
  OSPREC.OSPPER1[OS0GWSUB] = "-";
  OS0GW02.OSPPER1[OS0GWSUB] = "-";
  ;
  OSPREC.SY2CLRID[OS0GWSUB] = OP3REC.SY2CLRID; /* color code id*/
  OS0GW02.SY2CLRID[OS0GWSUB] = OP3REC.SY2CLRID; /* color code id*/
  ;
  OSPREC.OSPPER2[OS0GWSUB] = "-";
  OS0GW02.OSPPER2[OS0GWSUB] = "-";
  ;
  OSPREC.XDMCD[OS0GWSUB] = OP3REC.XDMCD; /* dimension code*/
  OS0GW02.XDMCD[OS0GWSUB] = OP3REC.XDMCD; /* dimension code*/
  ;
  OSPREC.OP2CGPCD[OS0GWSUB] = OP3REC.OP2CGPCD; /* group code*/
  OS0GW02.OP2CGPCD[OS0GWSUB] = OP3REC.OP2CGPCD; /* group code*/
  ;
  OSPREC.SY1SSTNM[OS0GWSUB] = SYCREC.SY1SSTNM; /* short style name*/
  OS0GW02.SY1SSTNM[OS0GWSUB] = SYCREC.SY1SSTNM; /* short style name*/
  ;
  OSPREC.SY2CLRAB[OS0GWSUB] = SYCREC.SY2CLRAB; /* color abbrev*/
  OS0GW02.SY2CLRAB[OS0GWSUB] = SYCREC.SY2CLRAB; /* color abbrev*/
  ;
  OSPREC.OP2LNINB[OS0GWSUB] = OP3REC.OP2LNINB; /* line item no.*/
  OS0GW02.OP2LNINB[OS0GWSUB] = OP3REC.OP2LNINB; /* line item no.*/
  ;
  OSPREC.KUFMIXBL[OS0GWSUB] = OP1REC.KUFMIXBL; /* alw mix box flag*/
  OS0GW02.KUFMIXBL[OS0GWSUB] = OP1REC.KUFMIXBL; /* alw mix box flag*/
  if (OSPREC.KUFMIXBL[OS0GWSUB] == " ")
    OSPREC.KUFMIXBL[OS0GWSUB] = "N"; /* init flag*/
    OS0GW02.KUFMIXBL[OS0GWSUB] = "N"; /* init flag*/
  end
  ;
  OSPREC.KUCUNTCS[OS0GWSUB] = OP1REC.KUCUNTCS; /* unit per crtn*/
  OS0GW02.KUCUNTCS[OS0GWSUB] = OP1REC.KUCUNTCS; /* unit per crtn*/
  ;
  OSPREC.SY4SZSCL[OS0GWSUB] = SYCREC.SY4SZSCL; /* size class code*/
  OS0GW02.SY4SZSCL[OS0GWSUB] = SYCREC.SY4SZSCL; /* size class code*/
  ;
  OSPREC.YNTCD[OS0GWSUB] = " "; /* carton type*/
  OS0GW02.YNTCD[OS0GWSUB] = " "; /* carton type*/
  ;
    /* this change count will be used in OS0H*/
  OSPREC.ZZZCHGCT[OS0GWSUB] = 0; /* change count*/
  OS0GW02.ZZZCHGCT[OS0GWSUB] = 0; /* change count*/
  ;
  OS0GS7X(); /* init. TS 20 occurrences w/ zeros*/
  ;
  OS0GS7Y(); /* load qty & desc (20 occurs)*/
  ;
end // end OS0GS7F

// write temp storage
Function OS0GS7G()
  ;
  ;
  TA5REC.TA5APPID = "OS0G"; /* appl identification*/
  ;
  TA5REC.TA5FNCCD = "A"; /* function code 'a' to add*/
  ;
  OSPREC.OSPTSLEN = 3820;
  ;
  call "TA0050" (OSPREC, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp stor routine*/
  ;
  if (TA5REC.TA5RTNCD == 0) /* successful addition to TS*/
    set OSPREC empty;
    OS0GW01.OS0GWPGC = OS0GW01.OS0GWPGC + 1;
  else
    OS0GS29(); /* force DXFR out*/
  end
  ;
  if (OS0GW02.OSPSZI01[1] > " "
   || OS0GW02.OSPSZI01[2] > " "
   || OS0GW02.OSPSZI01[3] > " "
   || OS0GW02.OSPSZI01[4] > " "
   || OS0GW02.OSPSZI01[5] > " "
   || OS0GW02.OSPSZI01[6] > " "
   || OS0GW02.OSPSZI01[7] > " "
   || OS0GW02.OSPSZI01[8] > " "
   || OS0GW02.OSPSZI01[9] > " "
   || OS0GW02.OSPSZI01[10] > " "
   || OS0GW02.OSPSZI01[11] > " "
   || OS0GW02.OSPSZI01[12] > " ")
    ;
    TA5REC.TA5APPID = "OS0G"; /* appl identification*/
    ;
    TA5REC.TA5FNCCD = "A"; /* function code 'a' to add*/
    ;
    OS0GW02.OSPTSLEN = 3820;
    call "TA0050" (OS0GW02, TA5REC) {isNoRefresh = yes, isExternal = yes}; /* temp stor routine*/
    ;
    if (TA5REC.TA5RTNCD == 0) /* successful addition to TS*/
      set OS0GW02 empty;
      OS0GW01.OS0GWPGC = OS0GW01.OS0GWPGC + 1;
    else
      OS0GS29(); /* force DXFR out*/
    end
    ;
  end
end // end OS0GS7G

// close item cursor
Function OS0GS7H()
  ;
  call "OP3730" ("C1", SQLCA, OP2REC, OSNREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    TA1REC.TA1LOCAT[1] = "OS0G000"; /* process name*/
    TA1REC.TA1LOCAT[2] = "OS0GS7H"; /* statement grp*/
    TA1REC.TA1LOCAT[3] = "OP3730 "; /* iomod*/
    OS0GS99(); /* db2 retn err routine*/
    OS0GS29(); /* force DXFR out*/
  end
  ;
end // end OS0GS7H

// declare item/prepack
Function OS0GS7I()
  ;
  ;
  set SQLCA empty;
  set OP2REC empty;
  set OSNREC empty;
  ;
   /* ======================*/
   /* set up key to OP2REC*/
   /* ======================*/
  ;
  OP2REC.OP1PARTN = OP1REC.OP1PARTN;
  OP2REC.OP1CUOID = OP1REC.OP1CUOID;
  OP2REC.OP1NORID = OP1REC.OP1NORID;
  ;
   /* ======================*/
   /* set up key to OSNREC*/
   /* ======================*/
  ;
  OSNREC.OP1PARTN = OP1REC.OP1PARTN;
  OSNREC.OP1CUOID = OP1REC.OP1CUOID;
  OSNREC.OP1NORID = OP1REC.OP1NORID;
  ;
   /* =====================================*/
   /* function code 'S2' will do a join*/
   /* =====================================*/
  ;
  call "OP3730" ("S2", SQLCA, OP2REC, OSNREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == -911)
      ;
         /* ---------------------*/
            /* D X F R  to self*/
         /* ---------------------*/
      ;
      sysVar.transferName = COMMAREA.CACURRAP;
      transfer to program sysVar.transferName passing COMMAREA;
      ;
    else
      ;
         /* ------------------------------------*/
            /* format data for db2 err posting*/
         /* ------------------------------------*/
      ;
      TA1REC.TA1DBASE = "DORDER  "; /* database name*/
      TA1REC.TA1TBLVU = "VITEM001"; /* table view*/
      TA1REC.TA1LOCAT[1] = "OS0G000 "; /* process name*/
      TA1REC.TA1LOCAT[2] = "OS0GS7I "; /* statement grp*/
      TA1REC.TA1LOCAT[3] = "OP3730  "; /* iomod*/
      ;
         /* --------------------------------*/
             /* format OP1REC db key in W/S*/
         /* --------------------------------*/
      ;
      TA1REC.TA1TBLKE = " ";
      OS0GW01.OP1PARTN = OP1REC.OP1PARTN;
      OS0GW01.OS0GWKCO = OP1REC.OP1CUOID;
      OS0GW01.OS0GWKNO = OP1REC.OP1NORID;
      TA1REC.TA1TBLKE = OS0GW01.OS0GWKY1;
      ;
      OS0GS99(); /* db2 err post routine*/
      OS0GS29(); /* force DXFR out*/
    end
  end
  ;
end // end OS0GS7I

// fetch item/prepack
Function OS0GS7J()
  ;
  ;
  call "OP3730" ("N2", SQLCA, OP2REC, OSNREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    OS0GS7C(); /* get size-run rec (OP3REC)*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      OS0GW01.OS0GWEOF = "Y";
    else
      ;
         /* ------------------------------------*/
            /* format data for db2 err posting*/
         /* ------------------------------------*/
      ;
      TA1REC.TA1DBASE = "DORDER  "; /* database name*/
      TA1REC.TA1TBLVU = "VITEM001"; /* table view*/
      TA1REC.TA1LOCAT[1] = "OS0G000 "; /* process name*/
      TA1REC.TA1LOCAT[2] = "OS0GS7J "; /* statement grp*/
      TA1REC.TA1LOCAT[3] = "OP3730  "; /* iomod*/
      ;
         /* --------------------------------*/
             /* format OP1REC db key in W/S*/
         /* --------------------------------*/
      ;
      TA1REC.TA1TBLKE = " ";
      OS0GW01.OP1PARTN = OP1REC.OP1PARTN;
      OS0GW01.OS0GWKCO = OP1REC.OP1CUOID;
      OS0GW01.OS0GWKNO = OP1REC.OP1NORID;
      TA1REC.TA1TBLKE = OS0GW01.OS0GWKY1;
      ;
      OS0GS99(); /* db2 err retn routine*/
      OS0GS29(); /* force DXFR out*/
    end
  end
  ;
end // end OS0GS7J

// move to temp stor
Function OS0GS7N()
  ;
  ;
  if (OP2REC.OP2LNIST == "XL")
    OSPREC.OSPDELET[OS0GWSUB] = "*"; /* delete code*/
    OS0GW02.OSPDELET[OS0GWSUB] = "*"; /* delete code*/
  else
    if (OP2REC.OP2LNIST == "AL") /* allocated*/
      OSPREC.OSPDELET[OS0GWSUB] = "A"; /* delete code*/
      OS0GW02.OSPDELET[OS0GWSUB] = "A"; /* delete code*/
    else
      if (OP2REC.OP2LNIST == "PA") /* partially allocated*/
        OSPREC.OSPDELET[OS0GWSUB] = "P"; /* delete code*/
        OS0GW02.OSPDELET[OS0GWSUB] = "P"; /* delete code*/
      else
        OSPREC.OSPDELET[OS0GWSUB] = " ";
        OS0GW02.OSPDELET[OS0GWSUB] = " ";
      end
    end
  end
  ;
  OSPREC.OSPSELTD[OS0GWSUB] = " "; /* select code*/
  OS0GW02.OSPSELTD[OS0GWSUB] = " "; /* select code*/
  ;
    /* ---------------------------------*/
    /* move the pkg no. to w/s first coz*/
    /* the pkg no. from OSNREC is binary*/
    /* and the receiving field in OSPREC*/
    /* is CHA.*/
    /* ---------------------------------*/
  ;
  OS0GW01.OSNPKGNB = OSNREC.OSNPKGNB;
  OSPREC.OSNPKGNB[OS0GWSUB] = OS0GW01.OSNPKGNB; /* pkg no.*/
  OS0GW02.OSNPKGNB[OS0GWSUB] = OS0GW01.OSNPKGNB; /* pkg no.*/
  ;
  OSPREC.SY1STNBR[OS0GWSUB] = OP3REC.SY1STNBR; /* style no.*/
  OS0GW02.SY1STNBR[OS0GWSUB] = OP3REC.SY1STNBR; /* style no.*/
  ;
  OSPREC.OSPPER1[OS0GWSUB] = "-";
  OS0GW02.OSPPER1[OS0GWSUB] = "-";
  ;
  OSPREC.SY2CLRID[OS0GWSUB] = OP3REC.SY2CLRID; /* color code id*/
  OS0GW02.SY2CLRID[OS0GWSUB] = OP3REC.SY2CLRID; /* color code id*/
  ;
  OSPREC.OSPPER2[OS0GWSUB] = "-";
  OS0GW02.OSPPER2[OS0GWSUB] = "-";
  ;
  OSPREC.XDMCD[OS0GWSUB] = OP3REC.XDMCD; /* dimension code*/
  OS0GW02.XDMCD[OS0GWSUB] = OP3REC.XDMCD; /* dimension code*/
  ;
  OSPREC.OP2CGPCD[OS0GWSUB] = OP3REC.OP2CGPCD; /* group code*/
  OS0GW02.OP2CGPCD[OS0GWSUB] = OP3REC.OP2CGPCD; /* group code*/
  ;
  OSPREC.SY1SSTNM[OS0GWSUB] = SYCREC.SY1SSTNM; /* short style name*/
  OS0GW02.SY1SSTNM[OS0GWSUB] = SYCREC.SY1SSTNM; /* short style name*/
  ;
  OSPREC.SY2CLRAB[OS0GWSUB] = SYCREC.SY2CLRAB; /* color abbrev*/
  OS0GW02.SY2CLRAB[OS0GWSUB] = SYCREC.SY2CLRAB; /* color abbrev*/
  ;
  OSPREC.OP2LNINB[OS0GWSUB] = OP3REC.OP2LNINB; /* line item no.*/
  OS0GW02.OP2LNINB[OS0GWSUB] = OP3REC.OP2LNINB; /* line item no.*/
  ;
  OSPREC.PKTBACTI[OS0GWSUB] = OSNREC.PKTBACTI; /* beg. active size id*/
  OS0GW02.PKTBACTI[OS0GWSUB] = OSNREC.PKTBACTI; /* beg. active sizeid*/
  ;
  OSPREC.KUFMIXBL[OS0GWSUB] = OSNREC.KUFMIXBL; /* alw. mix box flag*/
  OS0GW02.KUFMIXBL[OS0GWSUB] = OSNREC.KUFMIXBL; /* alw. mix box flag*/
  ;
  OSPREC.KUCUNTCS[OS0GWSUB] = OSNREC.KUCUNTCS; /* unit per crtn*/
  OS0GW02.KUCUNTCS[OS0GWSUB] = OSNREC.KUCUNTCS; /* unit per crtn*/
  ;
  OSPREC.SY4SZSCL[OS0GWSUB] = SYCREC.SY4SZSCL; /* size class code*/
  OS0GW02.SY4SZSCL[OS0GWSUB] = SYCREC.SY4SZSCL; /* size class code*/
  ;
  OSPREC.YNTCD[OS0GWSUB] = OSNREC.YNTCD; /* carton type*/
  OS0GW02.YNTCD[OS0GWSUB] = OSNREC.YNTCD; /* carton type*/
  ;
    /* this change count will be used in OS0H*/
  OSPREC.ZZZCHGCT[OS0GWSUB] = OSNREC.ZZZCHGCT; /* change count*/
  OS0GW02.ZZZCHGCT[OS0GWSUB] = OSNREC.ZZZCHGCT; /* change count*/
  ;
  OS0GS7X(); /* init. TS 20 occurrences w/ zeros*/
  ;
  OS0GS7Z(); /* load qty & desc (20 occurs)*/
  ;
end // end OS0GS7N

// close item/prepack cursor
Function OS0GS7P()
  ;
  call "OP3730" ("C2", SQLCA, OP2REC, OSNREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    return;
  else
    TA1REC.TA1LOCAT[1] = "OS0G000"; /* process name*/
    TA1REC.TA1LOCAT[2] = "OS0GS7P"; /* statement grp*/
    TA1REC.TA1LOCAT[3] = "OP3730 "; /* iomod*/
    OS0GS99(); /* db2 err retn routine*/
    OS0GS29(); /* force DXFR out*/
  end
  ;
end // end OS0GS7P

// load from W/S to T/S
Function OS0GS7W()
  ;
  ;
   /* =================================*/
    /* load prepack quantities*/
   /* =================================*/
  ;
  OSPREC.OSPPPQ01[OS0GWSUB] = OS0GW01.OS0GWPPQ[1];
  OSPREC.OSPPPQ02[OS0GWSUB] = OS0GW01.OS0GWPPQ[2];
  OSPREC.OSPPPQ03[OS0GWSUB] = OS0GW01.OS0GWPPQ[3];
  OSPREC.OSPPPQ04[OS0GWSUB] = OS0GW01.OS0GWPPQ[4];
  OSPREC.OSPPPQ05[OS0GWSUB] = OS0GW01.OS0GWPPQ[5];
  OSPREC.OSPPPQ06[OS0GWSUB] = OS0GW01.OS0GWPPQ[6];
  OSPREC.OSPPPQ07[OS0GWSUB] = OS0GW01.OS0GWPPQ[7];
  OSPREC.OSPPPQ08[OS0GWSUB] = OS0GW01.OS0GWPPQ[8];
  OSPREC.OSPPPQ09[OS0GWSUB] = OS0GW01.OS0GWPPQ[9];
  OSPREC.OSPPPQ10[OS0GWSUB] = OS0GW01.OS0GWPPQ[10];
  OSPREC.OSPPPQ11[OS0GWSUB] = OS0GW01.OS0GWPPQ[11];
  OSPREC.OSPPPQ12[OS0GWSUB] = OS0GW01.OS0GWPPQ[12];
  OSPREC.OSPPPQ13[OS0GWSUB] = OS0GW01.OS0GWPPQ[13];
  OSPREC.OSPPPQ14[OS0GWSUB] = OS0GW01.OS0GWPPQ[14];
  OSPREC.OSPPPQ15[OS0GWSUB] = OS0GW01.OS0GWPPQ[15];
  OSPREC.OSPPPQ16[OS0GWSUB] = OS0GW01.OS0GWPPQ[16];
  OSPREC.OSPPPQ17[OS0GWSUB] = OS0GW01.OS0GWPPQ[17];
  OSPREC.OSPPPQ18[OS0GWSUB] = OS0GW01.OS0GWPPQ[18];
  OSPREC.OSPPPQ19[OS0GWSUB] = OS0GW01.OS0GWPPQ[19];
  OSPREC.OSPPPQ20[OS0GWSUB] = OS0GW01.OS0GWPPQ[20];
  OS0GW02.OSPPPQ01[OS0GWSUB] = OS0GW01.OS0GWPPQ[21];
  OS0GW02.OSPPPQ02[OS0GWSUB] = OS0GW01.OS0GWPPQ[22];
  OS0GW02.OSPPPQ03[OS0GWSUB] = OS0GW01.OS0GWPPQ[23];
  OS0GW02.OSPPPQ04[OS0GWSUB] = OS0GW01.OS0GWPPQ[24];
  OS0GW02.OSPPPQ05[OS0GWSUB] = OS0GW01.OS0GWPPQ[25];
  OS0GW02.OSPPPQ06[OS0GWSUB] = OS0GW01.OS0GWPPQ[26];
  OS0GW02.OSPPPQ07[OS0GWSUB] = OS0GW01.OS0GWPPQ[27];
  OS0GW02.OSPPPQ08[OS0GWSUB] = OS0GW01.OS0GWPPQ[28];
  OS0GW02.OSPPPQ09[OS0GWSUB] = OS0GW01.OS0GWPPQ[29];
  OS0GW02.OSPPPQ10[OS0GWSUB] = OS0GW01.OS0GWPPQ[30];
  OS0GW02.OSPPPQ11[OS0GWSUB] = OS0GW01.OS0GWPPQ[31];
  OS0GW02.OSPPPQ12[OS0GWSUB] = OS0GW01.OS0GWPPQ[32];
  OS0GW02.OSPPPQ13[OS0GWSUB] = OS0GW01.OS0GWPPQ[33];
  OS0GW02.OSPPPQ14[OS0GWSUB] = OS0GW01.OS0GWPPQ[34];
  OS0GW02.OSPPPQ15[OS0GWSUB] = OS0GW01.OS0GWPPQ[35];
  OS0GW02.OSPPPQ16[OS0GWSUB] = OS0GW01.OS0GWPPQ[36];
  OS0GW02.OSPPPQ17[OS0GWSUB] = OS0GW01.OS0GWPPQ[37];
  OS0GW02.OSPPPQ18[OS0GWSUB] = OS0GW01.OS0GWPPQ[38];
  OS0GW02.OSPPPQ19[OS0GWSUB] = OS0GW01.OS0GWPPQ[39];
  OS0GW02.OSPPPQ20[OS0GWSUB] = OS0GW01.OS0GWPPQ[40];
  ;
   /* =================================*/
    /* load on-order quantities*/
   /* =================================*/
  ;
  OSPREC.OSPORQ01[OS0GWSUB] = OS0GW01.OS0GWORQ[1];
  OSPREC.OSPORQ02[OS0GWSUB] = OS0GW01.OS0GWORQ[2];
  OSPREC.OSPORQ03[OS0GWSUB] = OS0GW01.OS0GWORQ[3];
  OSPREC.OSPORQ04[OS0GWSUB] = OS0GW01.OS0GWORQ[4];
  OSPREC.OSPORQ05[OS0GWSUB] = OS0GW01.OS0GWORQ[5];
  OSPREC.OSPORQ06[OS0GWSUB] = OS0GW01.OS0GWORQ[6];
  OSPREC.OSPORQ07[OS0GWSUB] = OS0GW01.OS0GWORQ[7];
  OSPREC.OSPORQ08[OS0GWSUB] = OS0GW01.OS0GWORQ[8];
  OSPREC.OSPORQ09[OS0GWSUB] = OS0GW01.OS0GWORQ[9];
  OSPREC.OSPORQ10[OS0GWSUB] = OS0GW01.OS0GWORQ[10];
  OSPREC.OSPORQ11[OS0GWSUB] = OS0GW01.OS0GWORQ[11];
  OSPREC.OSPORQ12[OS0GWSUB] = OS0GW01.OS0GWORQ[12];
  OSPREC.OSPORQ13[OS0GWSUB] = OS0GW01.OS0GWORQ[13];
  OSPREC.OSPORQ14[OS0GWSUB] = OS0GW01.OS0GWORQ[14];
  OSPREC.OSPORQ15[OS0GWSUB] = OS0GW01.OS0GWORQ[15];
  OSPREC.OSPORQ16[OS0GWSUB] = OS0GW01.OS0GWORQ[16];
  OSPREC.OSPORQ17[OS0GWSUB] = OS0GW01.OS0GWORQ[17];
  OSPREC.OSPORQ18[OS0GWSUB] = OS0GW01.OS0GWORQ[18];
  OSPREC.OSPORQ19[OS0GWSUB] = OS0GW01.OS0GWORQ[19];
  OSPREC.OSPORQ20[OS0GWSUB] = OS0GW01.OS0GWORQ[20];
  OS0GW02.OSPORQ01[OS0GWSUB] = OS0GW01.OS0GWORQ[21];
  OS0GW02.OSPORQ02[OS0GWSUB] = OS0GW01.OS0GWORQ[22];
  OS0GW02.OSPORQ03[OS0GWSUB] = OS0GW01.OS0GWORQ[23];
  OS0GW02.OSPORQ04[OS0GWSUB] = OS0GW01.OS0GWORQ[24];
  OS0GW02.OSPORQ05[OS0GWSUB] = OS0GW01.OS0GWORQ[25];
  OS0GW02.OSPORQ06[OS0GWSUB] = OS0GW01.OS0GWORQ[26];
  OS0GW02.OSPORQ07[OS0GWSUB] = OS0GW01.OS0GWORQ[27];
  OS0GW02.OSPORQ08[OS0GWSUB] = OS0GW01.OS0GWORQ[28];
  OS0GW02.OSPORQ09[OS0GWSUB] = OS0GW01.OS0GWORQ[29];
  OS0GW02.OSPORQ10[OS0GWSUB] = OS0GW01.OS0GWORQ[30];
  OS0GW02.OSPORQ11[OS0GWSUB] = OS0GW01.OS0GWORQ[31];
  OS0GW02.OSPORQ12[OS0GWSUB] = OS0GW01.OS0GWORQ[32];
  OS0GW02.OSPORQ13[OS0GWSUB] = OS0GW01.OS0GWORQ[33];
  OS0GW02.OSPORQ14[OS0GWSUB] = OS0GW01.OS0GWORQ[34];
  OS0GW02.OSPORQ15[OS0GWSUB] = OS0GW01.OS0GWORQ[35];
  OS0GW02.OSPORQ16[OS0GWSUB] = OS0GW01.OS0GWORQ[36];
  OS0GW02.OSPORQ17[OS0GWSUB] = OS0GW01.OS0GWORQ[37];
  OS0GW02.OSPORQ18[OS0GWSUB] = OS0GW01.OS0GWORQ[38];
  OS0GW02.OSPORQ19[OS0GWSUB] = OS0GW01.OS0GWORQ[39];
  OS0GW02.OSPORQ20[OS0GWSUB] = OS0GW01.OS0GWORQ[40];
  ;
   /* =================================*/
    /* load size id desc*/
   /* =================================*/
  ;
  OSPREC.OSPSZI01[OS0GWSUB] = OS0GW01.OS0GWSZI[1];
  OSPREC.OSPSZI02[OS0GWSUB] = OS0GW01.OS0GWSZI[2];
  OSPREC.OSPSZI03[OS0GWSUB] = OS0GW01.OS0GWSZI[3];
  OSPREC.OSPSZI04[OS0GWSUB] = OS0GW01.OS0GWSZI[4];
  OSPREC.OSPSZI05[OS0GWSUB] = OS0GW01.OS0GWSZI[5];
  OSPREC.OSPSZI06[OS0GWSUB] = OS0GW01.OS0GWSZI[6];
  OSPREC.OSPSZI07[OS0GWSUB] = OS0GW01.OS0GWSZI[7];
  OSPREC.OSPSZI08[OS0GWSUB] = OS0GW01.OS0GWSZI[8];
  OSPREC.OSPSZI09[OS0GWSUB] = OS0GW01.OS0GWSZI[9];
  OSPREC.OSPSZI10[OS0GWSUB] = OS0GW01.OS0GWSZI[10];
  OSPREC.OSPSZI11[OS0GWSUB] = OS0GW01.OS0GWSZI[11];
  OSPREC.OSPSZI12[OS0GWSUB] = OS0GW01.OS0GWSZI[12];
  OSPREC.OSPSZI13[OS0GWSUB] = OS0GW01.OS0GWSZI[13];
  OSPREC.OSPSZI14[OS0GWSUB] = OS0GW01.OS0GWSZI[14];
  OSPREC.OSPSZI15[OS0GWSUB] = OS0GW01.OS0GWSZI[15];
  OSPREC.OSPSZI16[OS0GWSUB] = OS0GW01.OS0GWSZI[16];
  OSPREC.OSPSZI17[OS0GWSUB] = OS0GW01.OS0GWSZI[17];
  OSPREC.OSPSZI18[OS0GWSUB] = OS0GW01.OS0GWSZI[18];
  OSPREC.OSPSZI19[OS0GWSUB] = OS0GW01.OS0GWSZI[19];
  OSPREC.OSPSZI20[OS0GWSUB] = OS0GW01.OS0GWSZI[20];
  OS0GW02.OSPSZI01[OS0GWSUB] = OS0GW01.OS0GWSZI[21];
  OS0GW02.OSPSZI02[OS0GWSUB] = OS0GW01.OS0GWSZI[22];
  OS0GW02.OSPSZI03[OS0GWSUB] = OS0GW01.OS0GWSZI[23];
  OS0GW02.OSPSZI04[OS0GWSUB] = OS0GW01.OS0GWSZI[24];
  OS0GW02.OSPSZI05[OS0GWSUB] = OS0GW01.OS0GWSZI[25];
  OS0GW02.OSPSZI06[OS0GWSUB] = OS0GW01.OS0GWSZI[26];
  OS0GW02.OSPSZI07[OS0GWSUB] = OS0GW01.OS0GWSZI[27];
  OS0GW02.OSPSZI08[OS0GWSUB] = OS0GW01.OS0GWSZI[28];
  OS0GW02.OSPSZI09[OS0GWSUB] = OS0GW01.OS0GWSZI[29];
  OS0GW02.OSPSZI10[OS0GWSUB] = OS0GW01.OS0GWSZI[30];
  OS0GW02.OSPSZI11[OS0GWSUB] = OS0GW01.OS0GWSZI[31];
  OS0GW02.OSPSZI12[OS0GWSUB] = OS0GW01.OS0GWSZI[32];
  OS0GW02.OSPSZI13[OS0GWSUB] = OS0GW01.OS0GWSZI[33];
  OS0GW02.OSPSZI14[OS0GWSUB] = OS0GW01.OS0GWSZI[34];
  OS0GW02.OSPSZI15[OS0GWSUB] = OS0GW01.OS0GWSZI[35];
  OS0GW02.OSPSZI16[OS0GWSUB] = OS0GW01.OS0GWSZI[36];
  OS0GW02.OSPSZI17[OS0GWSUB] = OS0GW01.OS0GWSZI[37];
  OS0GW02.OSPSZI18[OS0GWSUB] = OS0GW01.OS0GWSZI[38];
  OS0GW02.OSPSZI19[OS0GWSUB] = OS0GW01.OS0GWSZI[39];
  OS0GW02.OSPSZI20[OS0GWSUB] = OS0GW01.OS0GWSZI[40];
  ;
  if (OS0GW02.OSPSZI01[OS0GWSUB] > " ") /* more that 20 sizes*/
    OSPREC.OSPMORE[OS0GWSUB] = "Y"; /* set more sizes indicator*/
    OS0GW02.OSPMORE[OS0GWSUB] = "2";
  else
    OSPREC.OSPMORE[OS0GWSUB] = "N"; /* set to no*/
    OS0GW02.OSPMORE[OS0GWSUB] = " ";
  end
  ;
end // end OS0GS7W

// init WS 20 occurs
Function OS0GS7X()
  ;
  ;
   /* =========================*/
    /* init  subscript*/
   /* =========================*/
  ;
  OS0GW01.OS0GWSB2 = 1;
  ;
  ;
   /* ===========================*/
    /* init W/S 40 occurrences*/
   /* ===========================*/
  ;
  while (OS0GW01.OS0GWSB2 <= 40)
    OS0GW01.OS0GWORQ[OS0GWSB2] = 0;
    OS0GW01.OS0GWPPQ[OS0GWSB2] = 0;
    OS0GW01.OS0GWSZI[OS0GWSB2] = " ";
    OS0GW01.OS0GWSB2 = OS0GW01.OS0GWSB2 + 1;
  end
  ;
  ;
end // end OS0GS7X

// load TS 20 occurs
Function OS0GS7Y()
  ;
  ;
   /* ===============================*/
    /* init subscripts*/
   /* ===============================*/
    /* OS0GWSB1 = subscript for the*/
               /* 40 occurrences in*/
               /* OP3REC*/
  ;
    /* OS0GWSB2 = subscript for the*/
               /* 40 occurrences in*/
               /* OSPREC*/
  ;
  OS0GW01.OS0GWSB1 = 1;
  OS0GW01.OS0GWSB2 = 0;
  ;
   /* =================================*/
    /* load on-order quantities,*/
         /* active size flags,*/
         /* size id-desc*/
    /* to   working storage record*/
   /* =================================*/
  ;
  while (OS0GW01.OS0GWSB1 <= 40)
    ;
    if (OP3REC.OP3SZAFL[OS0GWSB1] == "Y" /* size active*/
     && OP3REC.OP3ONOQT[OS0GWSB1] > 0)   /* non-zero on-ord qty*/
      ;
      OS0GW01.OS0GWSB2 = OS0GW01.OS0GWSB2 + 1;
      ;
      if (OS0GW01.OS0GWSB2 == 1) /* first active size*/
        OSPREC.PKTBACTI[OS0GWSUB] = OS0GW01.OS0GWSB1;
      end
      ;
      if (OS0GW01.OS0GWSB2 <= 41)
        OS0GW01.OS0GWORQ[OS0GWSB2] = OP3REC.OP3ONOQT[OS0GWSB1];
        OS0GW01.OS0GWSZI[OS0GWSB2] = SY4REC.SY4IDDSC[OS0GWSB1];
      else
        TA1REC.TA1LOCAT[1] = "OS0G000"; /* process name*/
        TA1REC.TA1LOCAT[2] = "OS0GS7Y"; /* statement grp*/
        TAEREC.TAEDESC1 = " OVERFLOW IN TS 40 OCCURRENCES ";
        OS0GS98(); /* post, non-db2 err*/
        OS0GS29(); /* force DXFR out*/
      end
      ;
    end
    ;
    OS0GW01.OS0GWSB1 = OS0GW01.OS0GWSB1 + 1;
    ;
  end
  ;
  ;
   /* =======================================*/
    /* L O A D   F R O M   W/S   T O   T/S*/
   /* =======================================*/
  ;
  OS0GS7W();
  ;
end // end OS0GS7Y

// load TS qty/desc (20 occurs)
Function OS0GS7Z()
  ;
  ;
   /* ===============================*/
    /* init subscripts*/
   /* ===============================*/
    /* OS0GWSB1 = subscript for the*/
               /* 40 occurrences in*/
               /* OP3REC*/
  ;
    /* OS0GWSB2 = subscript for the*/
               /* 40 occurrences in*/
               /* OSPREC*/
  ;
  OS0GW01.OS0GWSB1 = 1;
  OS0GW01.OS0GWSB2 = 0;
  ;
   /* =================================*/
    /* load on-order quantities,*/
         /* active size flags,*/
         /* size id-desc*/
    /* to   working storage record*/
   /* =================================*/
  ;
  while (OS0GW01.OS0GWSB1 <= 40)
    ;
    if (OP3REC.OP3SZAFL[OS0GWSB1] == "Y" /* size active*/
     && OP3REC.OP3ONOQT[OS0GWSB1] > 0)   /* non-zero on-ord qty*/
      ;
      OS0GW01.OS0GWSB2 = OS0GW01.OS0GWSB2 + 1;
      ;
      if (OS0GW01.OS0GWSB2 <= 41)
        OS0GW01.OS0GWORQ[OS0GWSB2] = OP3REC.OP3ONOQT[OS0GWSB1];
        OS0GW01.OS0GWPPQ[OS0GWSB2] = OSNREC.PKTPPQTY[OS0GWSB1];
        OS0GW01.OS0GWSZI[OS0GWSB2] = SY4REC.SY4IDDSC[OS0GWSB1];
      else
        TA1REC.TA1LOCAT[1] = "OS0G000"; /* process name*/
        TA1REC.TA1LOCAT[2] = "OS0GS7Z"; /* statement grp*/
        TAEREC.TAEDESC1 = " OVERFLOW IN TS 40 OCCURRENCES";
        OS0GS98(); /* post, non-db2 err*/
        OS0GS29(); /* force DXFR out*/
      end
      ;
    end
    ;
    OS0GW01.OS0GWSB1 = OS0GW01.OS0GWSB1 + 1;
    ;
  end
  ;
  ;
   /* =======================================*/
    /* L O A D   F R O M   W/S   T O   T/S*/
   /* =======================================*/
  ;
  OS0GS7W();
  ;
end // end OS0GS7Z

// pf4 edit - MN0M
Function OS0GS80()
  ;
  ;
   /* =============================*/
   /* pf4 edit - return to MN0M*/
   /* =============================*/
  ;
  OS0GS26(); /* purge temp stor*/
  XSPF4(); /* master menu (MN0M)*/
  ;
  ;
end // end OS0GS80

// post non-db2 err
Function OS0GS98()
  ;
  ;
  TA1REC.TA1TYPE = "APPL";
  ;
  TA1REC.TA1FUNC = "POST";
  ;
  TA1PGMNM = COMMAREA.CACURRAP;
  ;
  try
    call "TA0020" (TA1REC, TAEREC) {isExternal = yes};
  end
  ;
end // end OS0GS98

// db2 retn err routine
Function OS0GS99()
  ;
  ;
  set ERRSQLCA empty;
  ;
  move SQLCA to ERRSQLCA withV60Compat;
  ;
  TA1REC.TA1TYPE = "DB2";
  ;
  TA1REC.TA1FUNC = "RETN";
  ;
  TA1REC.TA1PGMNM = COMMAREA.CACURRAP; /* currrent applic.*/
  ;
  try
    call "TA0020" (TA1REC, ERRSQLCA) {isExternal = yes};
  end
  ;
end // end OS0GS99

//*** RECORD=OS0GW01 ****
// ; **********************************************************
// ;    This is the working storage record containing the
// ;    data fields for flags, subscripts, reformatted data
// ;    (e.g. order no., cust. no., date), current page
// ; **********************************************************
// ;
// ;  MAINTENANCE HISTORY
// ;
// ;  DATE      WHO   COMMENTS
// ; ------    -----  ----------------------------------------
// ; 03/25/91  OCO    Record creation.
// ; 06/29/91  GWELLS Changed pkg# from char to bin, deleted
// ;                  the redefines.
// ;
// ;
// ***********************
Record OS0GW01 type basicRecord
  10 OS0GWORD OS0GWORD ; 
    15 OS0GWCOI OS0GWCOI ; 
    15 OS0GWPR1 OS0GWPR1 ; 
    15 OS0GWNOI OS0GWNOI ; 
  10 OS0GWCUS OS0GWCUS ; 
    15 OS0GWCCI OS0GWCCI ; 
    15 OS0GWPR2 OS0GWPR2 ; 
    15 OS0GWSTI OS0GWSTI ; 
    15 OS0GWPR3 OS0GWPR3 ; 
    15 OS0GWDEP OS0GWDEP ; 
  10 OS0GWEDT OS0GWEDT ; 
    15 OS0GWEYY OS0GWEYY ; 
    15 OS0GWEMM OS0GWEMM ; 
    15 OS0GWEDD OS0GWEDD ; 
  10 OS0GWCDT OS0GWCDT ; 
    15 OS0GWCMM OS0GWCMM ; 
    15 OS0GWDS1 OS0GWDS1 ; 
    15 OS0GWCDD OS0GWCDD ; 
    15 OS0GWDS2 OS0GWDS2 ; 
    15 OS0GWCYY OS0GWCYY ; 
  10 OS0GWPGC OS0GWPGC ; 
  10 OS0GWCPG OS0GWCPG ; 
  10 OS0GWSUB OS0GWSUB ; 
  10 OS0GWSB1 OS0GWSB1 ; 
  10 OS0GWSB2 OS0GWSB2 ; 
  10 OS0GWNPF OS0GWNPF ; 
  10 OS0GWPEF OS0GWPEF ; 
  10 OS0GWALF OS0GWALF ; 
  10 OS0GWSFL OS0GWSFL ; 
  10 OS0GWEOF OS0GWEOF ; 
  10 OSNPKGNB OSNPKGNB ; 
  10 OS0GWERM OS0GWERM ; 
    15 OS0GWEM1 OS0GWEM1 ; 
    15 OS0GWEM2 OS0GWEM2 ; 
  10 OS0GWDXF OS0GWDXF ; 
  10 OS0GWORQ OS0GWORQ [40] ; 
  10 OS0GWSZI OS0GWSZI [40] ; 
  10 OS0GWPPQ OS0GWPPQ [40] ; 
  10 OS0GWKY2 OS0GWKY2 ; 
    15 OS0GWKY1 OS0GWKY1 ; 
      20 OP1PARTN OP1PARTN ; 
      20 OS0GWKCO OS0GWKCO ; 
      20 OS0GWKNO OS0GWKNO ; 
    15 OS0GWKLI OS0GWKLI ; 
  10 OS0GWKY3 OS0GWKY3 ; 
    15 XGPCD XGPCD ; 
    15 SY1STNBR SY1STNBR ; 
    15 SY2CLRID SY2CLRID ; 
    15 XDMCD XDMCD ; 
end // end OS0GW01

//*** RECORD=OS0GW02 ****
// ***** ORDER PROCESSING TEMP STORAGE RECORD FOR PREPACKS ****
// *                                                          *
// * Data from :  OSNREC/OP2REC/OP3REC                        *
// *
// * Temporary storage record used to hold detail items for   *
// * a particular order no. for the OS0G application.         *
// *                                                          *
// * This is used for paging purpose.  1 page = 1 temporary   *
// * storage record.  There are 12 occurrences of detail item *
// * for 1 page/1 ts record.                                  *
// *                                                          *
// *==========================================================*
// *                                                          *
// * NOTE:  Since CSP does not allow 'OCCURS' within an       *
// *        'OCCURS', the 40 occurrences for prepack-qty,     *
// *        size-active-flag, on-order-qty and size-id-desc   *
// *        have to be defined with a unique name for each    *
// *        occurrence.                                       *
// *                                                          *
// ************************************************************
// 
// DATE CREATED:          3/15/91
// 
// MAINTENANCE LOG:
// 
//   DATE    INIT    COMMENTS
// -------   ----    ------------------------------------------
// 3/15/91   OCO     New record definition.
// 6/29/91   GWELLS  Changed pkg# from char to bin and deleted
//                   the redefines.
// ***********************
Record OS0GW02 type basicRecord
  5 OSPGROUP OSPGROUP ; 
    10 OSPTSLEN OSPTSLEN ; 
    10 OSPTSROW OSPTSROW [12] ; 
      15 OSPDELET OSPDELET ; 
      15 OSPSELTD OSPSELTD ; 
      15 OSPMORE OSPMORE ; 
      15 OSNPKGNB OSNPKGNB ; 
      15 OSPSTYNB OSPSTYNB ; 
        20 SY1STNBR SY1STNBR ; 
        20 OSPPER1 OSPPER1 ; 
        20 SY2CLRID SY2CLRID ; 
        20 OSPPER2 OSPPER2 ; 
        20 XDMCD XDMCD ; 
      15 OP2CGPCD OP2CGPCD ; 
      15 SY1SSTNM SY1SSTNM ; 
      15 SY2CLRAB SY2CLRAB ; 
      15 OSPPPQ01 OSPPPQ01 ; 
      15 OSPPPQ02 OSPPPQ02 ; 
      15 OSPPPQ03 OSPPPQ03 ; 
      15 OSPPPQ04 OSPPPQ04 ; 
      15 OSPPPQ05 OSPPPQ05 ; 
      15 OSPPPQ06 OSPPPQ06 ; 
      15 OSPPPQ07 OSPPPQ07 ; 
      15 OSPPPQ08 OSPPPQ08 ; 
      15 OSPPPQ09 OSPPPQ09 ; 
      15 OSPPPQ10 OSPPPQ10 ; 
      15 OSPPPQ11 OSPPPQ11 ; 
      15 OSPPPQ12 OSPPPQ12 ; 
      15 OSPPPQ13 OSPPPQ13 ; 
      15 OSPPPQ14 OSPPPQ14 ; 
      15 OSPPPQ15 OSPPPQ15 ; 
      15 OSPPPQ16 OSPPPQ16 ; 
      15 OSPPPQ17 OSPPPQ17 ; 
      15 OSPPPQ18 OSPPPQ18 ; 
      15 OSPPPQ19 OSPPPQ19 ; 
      15 OSPPPQ20 OSPPPQ20 ; 
      15 OSPORQ01 OSPORQ01 ; 
      15 OSPORQ02 OSPORQ02 ; 
      15 OSPORQ03 OSPORQ03 ; 
      15 OSPORQ04 OSPORQ04 ; 
      15 OSPORQ05 OSPORQ05 ; 
      15 OSPORQ06 OSPORQ06 ; 
      15 OSPORQ07 OSPORQ07 ; 
      15 OSPORQ08 OSPORQ08 ; 
      15 OSPORQ09 OSPORQ09 ; 
      15 OSPORQ10 OSPORQ10 ; 
      15 OSPORQ11 OSPORQ11 ; 
      15 OSPORQ12 OSPORQ12 ; 
      15 OSPORQ13 OSPORQ13 ; 
      15 OSPORQ14 OSPORQ14 ; 
      15 OSPORQ15 OSPORQ15 ; 
      15 OSPORQ16 OSPORQ16 ; 
      15 OSPORQ17 OSPORQ17 ; 
      15 OSPORQ18 OSPORQ18 ; 
      15 OSPORQ19 OSPORQ19 ; 
      15 OSPORQ20 OSPORQ20 ; 
      15 PKTBACTI PKTBACTI ; 
      15 KUFMIXBL KUFMIXBL ; 
      15 KUCUNTCS KUCUNTCS ; 
      15 OP2LNINB OP2LNINB ; 
      15 SY4SZSCL SY4SZSCL ; 
      15 YNTCD YNTCD ; 
      15 OSPSZI01 OSPSZI01 ; 
      15 OSPSZI02 OSPSZI02 ; 
      15 OSPSZI03 OSPSZI03 ; 
      15 OSPSZI04 OSPSZI04 ; 
      15 OSPSZI05 OSPSZI05 ; 
      15 OSPSZI06 OSPSZI06 ; 
      15 OSPSZI07 OSPSZI07 ; 
      15 OSPSZI08 OSPSZI08 ; 
      15 OSPSZI09 OSPSZI09 ; 
      15 OSPSZI10 OSPSZI10 ; 
      15 OSPSZI11 OSPSZI11 ; 
      15 OSPSZI12 OSPSZI12 ; 
      15 OSPSZI13 OSPSZI13 ; 
      15 OSPSZI14 OSPSZI14 ; 
      15 OSPSZI15 OSPSZI15 ; 
      15 OSPSZI16 OSPSZI16 ; 
      15 OSPSZI17 OSPSZI17 ; 
      15 OSPSZI18 OSPSZI18 ; 
      15 OSPSZI19 OSPSZI19 ; 
      15 OSPSZI20 OSPSZI20 ; 
      15 ZZZCHGCT ZZZCHGCT ; 
end // end OS0GW02

// all flag
DataItem OS0GWALF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cust company id
DataItem OS0GWCCI num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// system date (dd)
DataItem OS0GWCDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// reformatted date (mm/dd/yy)
DataItem OS0GWCDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// reformatted date (mm)
DataItem OS0GWCMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cust order id
DataItem OS0GWCOI num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// current page
DataItem OS0GWCPG num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// CUSTOMER NO.
DataItem OS0GWCUS char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// system date (yy)
DataItem OS0GWCYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cust dept id
DataItem OS0GWDEP num(2)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// dash  (-)
DataItem OS0GWDS1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dash  (-)
DataItem OS0GWDS2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// dxfr-flag
DataItem OS0GWDXF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// system date (dd)
DataItem OS0GWEDD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// system date (yymmdd)
DataItem OS0GWEDT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// err-msg-1
DataItem OS0GWEM1 char(26)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// err-msg-2
DataItem OS0GWEM2 char(20)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// system date (mm)
DataItem OS0GWEMM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// end-of-file flag
DataItem OS0GWEOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GROUP ERR-MSG
DataItem OS0GWERM char(46)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// system date (yy)
DataItem OS0GWEYY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// num cust ord no
DataItem OS0GWKCO num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// num line no.
DataItem OS0GWKLI num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// num nike ord no
DataItem OS0GWKNO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// w/s OP1REC key
DataItem OS0GWKY1 char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w/s OP2REC key
DataItem OS0GWKY2 char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// w/s SYCREC key
DataItem OS0GWKY3 char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nike order id
DataItem OS0GWNOI num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// no package flag
DataItem OS0GWNPF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ORDER NO.
DataItem OS0GWORD char(11)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ws-on-ord-qty
DataItem OS0GWORQ decimal(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// package exist flag
DataItem OS0GWPEF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// page counter
DataItem OS0GWPGC num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws-prepack-qty
DataItem OS0GWPPQ int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// value '.'
DataItem OS0GWPR1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// value '.'
DataItem OS0GWPR2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// value '.'
DataItem OS0GWPR3 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// subscript1
DataItem OS0GWSB1 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// subscript2
DataItem OS0GWSB2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// select flag
DataItem OS0GWSFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cust store id
DataItem OS0GWSTI num(4)  {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// subscript
DataItem OS0GWSUB num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// ws-sz-id-desc
DataItem OS0GWSZI char(5)  {
  align = right, fillCharacter = nullFill, inputRequired = no
}
end

