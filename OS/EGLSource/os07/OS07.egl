package os07;
import corpcom2.XX0XW01;
import corpcom3.XPOS-00000;
import corpcom4.XSEXIT;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.CU-CO-ID;
import corpcom5.CU-STOR-ID;
import corpcom6.SQLCA;
import corpcom7.XXXMSGNO;
import corpcom7.XXXPRCNM;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpcom7.ZZ-CHNG-USER-ID;
import corpcom7.ZZ-SETUP-USER-ID;
import corpx1.XDS-DIR-SHIP-CD;
import corpx1.XHD-HNDL-CD1;
import corpx1.XHD-HNDL-CD2;
import corpx1.XHD-HNDL-CD3;
import corpx1.XHD-HNDL-CD4;
import corpx2.XNX-DEPT-ID-XREF;
import corpx2.XOB-BASE-OT-CD;
import corpx2.XOT-ORD-TYP-CD;
import ku.common.KUNREC;
import om.common.OMCREC;
import op.common.*;
import sp.common.SP-SPGM-ID;
import sp.common.SP1REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
import tf.common.TF-CARR-CD2;
import tf.common.TF7REC;
import vv.common.VRPLCI01;
import vv.common.VRPLIT02;
import vv.common.VXVO0001;
import xx.common.*;
import xx.common.XXX-STAT;
import xx.common.ZZ-CHNG-CNT;
import xx.common.ZZ-CHNG-DT;
import xx.common.ZZ-CHNG-HHMM;
import xx.common.ZZ-SDT;
import xx02.*;
import xx03.*;
import xx03.XWH-WHSE-CD;
import xx06.*;
import xx06.XWHTBL;
//*** PROGRAM=OS07 ****
// OS07 will provide full function maintenance for the Footwear
// Replenishment customer and customer/product tables.  This
// program uses three screens.  First, a screen will allow
// users to select replen customer rows by whse, customer,
// store.  Based on input, a scrollable screen will be
// populated.  From the select byte, Modify, Delete & Inquire
// can be performed.  For adding customer rows, PF13 must be
// pressed.
// 
// The second screen is the customer maintenance screen.  All
// data for one whse, customer, store, dept., will be
// displayed for processing based upon the option specified
// from map 1.
// 
// The third screen allows maintenance of customer/product via
// a scrollable product level screen
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
// NEW      11/20/98  TDAUGH  New application.
//          02/25/99  TDAUGH  Add third carrier
//          04/06/99  SGOPAL  Set the spgm and xot fields to
//                            protect.
//          05/06/99  SGOPAL  Set the xot fields protected
//                            even when adding a new customer.
//          09/27/99  MGOEL   Allow the carrier codes to be set
//                            to blank. All three carrier codes
//                            must either contain values or be
//                            set to blank. This indicates that
//                            the customer requires non-replen
//                            orders and replen orders to be
//                            consolidated into one shipment.
//          09/30/99  mgoel   allow the weight breaks to be
//                            zero when the carrier codes are
//                            set to blanks.
// TT#5230  04/05/00  NKATHI  OS07W00.XXXTSPAG(Temp variable
//                            for page number) is reset to 0 in
//                            the process OS07-33000 to avoid
//                            abend in TA0050.
// *********************
Program OS07 type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "OP00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  KUNREC KUNREC; // record
  OMCREC OMCREC; // record
  OP1REC OP1REC; // record
  OS07W00 OS07W00; // record
  OS07W01 OS07W01; // record
  OS07W02 OS07W02; // record
  OS07W03 OS07W03; // record
  SP1REC SP1REC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  TF7REC TF7REC; // record
  VRPLCI01 VRPLCI01; // record
  VRPLCU01 VRPLCU01; // record
  VRPLIT02 VRPLIT02; // record
  VXVO0001 VXVO0001; // record
  XX0XW01 XX0XW01; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XGPTBL {deleteAfterUse = yes}; // table
  use XWHTBL {deleteAfterUse = yes}; // table
  use OS07M.OS07M001,  // forms
      OS07M.OS07M002, 
      OS07M.OS07M003
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPOS-00000: XPOS-00000();
    /* ------------------------------------------------------------*/
    /* Flow to converse the main process used to display a map.*/
    /* ------------------------------------------------------------*/
    ;
    set OS07M001 empty;
    set OS07M002 empty;
    set OS07M003 empty;
    ;
    set OS07W00 empty;
    set OS07W01 empty;
    set OS07W02 empty;
    set OS07W03 empty;
    ;
    set VRPLCU01 empty;
    set VRPLCI01 empty;
    set VRPLIT02 empty;
    ;
    set SQLCA empty;
    set TAEREC empty;
    set TA1REC empty;
    set TA2REC empty;
    set TA5REC empty;
    set XX0XW01 empty;
    set TF7REC empty;
    set KUNREC empty;
    set SP1REC empty;
    set VXVO0001 empty;
    ;
    OS07W00.OS07W-SFN = " "; /* Function Code*/
    OS07W00.OS07W-SWR = "N"; /* Request for data switch*/
    OS07W00.OS07W-SWF = "N"; /* FORMAT SCREEN*/
    OS07W00.OS07W-SWD = "1"; /* Display Screen 1*/
    ;
    goto OS07-00000; /* Converse the main process*/
    ;
    ;
    OS07-00000: OS07-00000();
    goto OS07-00000;
  end // end main
end // end OS07

// Determine which map to display
Function OS07-00000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) If specified, display the first map.*/
  /* 2) Otherwise, if specified, display the second map, depending*/
  /* on function = add or change*/
  /* 3) Otherwise, indicate error and exit to Application Menu.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/
  ;
  if (OS07W00.OS07W-SWD == "1") /* Map 1 was requested*/
    ;
    OS07-10000(); /* Display map 1*/
    ;
  else
    ;
    if (OS07W00.OS07W-SWD == "2" /* Map 2 was requested*/
    )                           
      OS07-20000(); /* Display map 2*/
      ;
    else
      ;
      if (OS07W00.OS07W-SWD == "3" /* Map 3 was requested*/
      )                           
        OS07-30000(); /* Display map 3*/
        ;
      else
        ;
      /* ------------------------------------------------------------*/
      /* Write the error to the Error Diagnosis Reporting Facility.*/
      /* ------------------------------------------------------------*/
        ;
        OS07W00.XXXPRCNM = "00000"; /* Module identification*/
        OS07W00.XXXMSGNO = 973; /* Unexpected error occurred*/
        ;
        TA1REC.TA1FUNC = "RETN"; /* Termination function*/
        TA1REC.TA1TYPE = "APPL"; /* Type of error*/
        TA1REC.TA1LOC = "OS07-00000";
        TA1REC.TA1MAPNO = OS07W00.OS07W-SWD; /* Map number*/
        TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
        TA1REC.TA1PGMNO = OS07W00.XXXPRCNM; /* Program number*/
        ;
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
        ;
      /* ------------------------------------------------------------*/
      /* Exit to display the application system menu.*/
      /* ------------------------------------------------------------*/
        ;
        COMMAREA.CATOAP = "MN0M"; /* TO application*/
        ;
        XSEXIT(); /* Exit to another application*/
        ;
      /* ------------------------------------------------------------*/
      /* Abnormally terminate the transaction if the exit failed.*/
      /* ------------------------------------------------------------*/
        ;
        TA1REC.TA1FUNC = "ABND"; /* Termination function*/
        ;
        call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
        ;
      end
      ;
    end
    ;
  end
  ;
  ;
end // end OS07-00000

// Main Process to display a map
Function OS07-10000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Obtain the data to display.*/
  /* 2) Format the map output area and display the map.*/
  /* 3) Check the attention identifier used to respond.*/
  /* 4) Reset highlighted fields to normal intensity.*/
  /* 5) Verify the data that was entered.*/
  /* 6) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/
  ;
  OS07-11000(); /* Obtain the data to display*/
  ;
  OS07-12000(); /* Format and display the map*/
  ;
  OS07-13000(); /* Check attention identifier*/
  ;
  OS07-14000(); /* Reset fields to normal intensity*/
  ;
  OS07-15000(); /* Verify the entered data*/
  ;
  OS07-16000(); /* Process valid input request*/
  ;
  ;
end // end OS07-10000

// Obtain the data to display
Function OS07-11000()
  /* ------------------------------------------------------------*/
  /* If data was not requested or an error was found, return to*/
  /* the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (OS07W00.OS07W-SWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Establish the temporary storage queue page length.*/
  /* ------------------------------------------------------------*/
  ;
  OS07W00.XXXTSLEN = 1116; /* temp storage page length*/
  ;
  /* ------------------------------------------------------------*/
  /* If no message to display, reset the page number to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (OS07W00.XXXTSPAG == 0) /* no pages established*/
    ;
    OS07W00.XXXTSPAG = 1; /* Page number to display*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Purge any pages from temporary storage and save key fields.*/
  /* ------------------------------------------------------------*/
  ;
  OS07-11100(); /* Purge any temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* Select and open the cursor for the set to be formatted.*/
  /* ------------------------------------------------------------*/
  ;
  OS07-11200(); /* Select set and open cursor*/
  ;
  if (SQLCA.VAGen_SQLCODE == +100)
    ;
    OS07W00.OS07W-SWC = "Y"; /* End of cursor switch*/
    ;
  else
    ;
    OS07W00.OS07W-SWC = "N"; /* End of cursor switch*/
    ;
  end
  /* ------------------------------------------------------------*/
  /* Fetch and format the data into pages until end of cursor.*/
  /* ------------------------------------------------------------*/
  ;
  OS07W00.OS07W-IXM = 1; /* Display line index*/
  ;
  while (OS07W00.OS07W-SWC == "N") /* Until end of cursor*/
    ;
    OS07-11400(); /* Fetch next row in the cursor*/
    ;
    /* ------------------------------------------------------------*/
    /* If not end of cursor, save the data in display storage.*/
    /* ------------------------------------------------------------*/
    ;
    if (OS07W00.OS07W-SWC == "N") /* Not end of cursor*/
      OS07-11500(); /* Save data in display storage*/
    end
    ;
    /* ------------------------------------------------------------*/
    /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/
    ;
    if (OS07W00.OS07W-IXM > 12) /* Page is full*/
      ;
      OS07-11600(); /* Add page to temporary storage*/
      ;
      OS07W00.OS07W-IXM = 1; /* Display line index*/
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Add any partially formatted last page to the queue.*/
  /* ------------------------------------------------------------*/
  ;
  if (OS07W00.OS07W-IXM > 1) /* Page was formatted*/
    OS07-11600(); /* Add page to temporary storage*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Close the cursor for the selected set.*/
  /* ------------------------------------------------------------*/
  ;
  OS07-11700(); /* Close the selected set cursor*/
  ;
  /* ------------------------------------------------------------*/
  /* If no pages were formatted, indicate no data to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (OS07W00.TA5TSQIX == 0) /* No pages formatted*/
    ;
    OS07W00.XXXPRCNM = "11000"; /* Module identification*/
    converseLib.validationFailed(974); /* No data was found to display*/
    OS07W00.OS07W-SWR = "Y"; /* Request for data*/
    OS07W00.OS07W-SWF = "N"; /* Format the map*/
    set OS07M001.OS07M-SELECT-XWH-WHSE-CD bold; /* cursor*/
    ;
    return; /* Return to previous process*/
    ;
  else
    ;
  /* ------------------------------------------------------------*/
  /* Indicate that the request for data is complete.*/
  /* ------------------------------------------------------------*/
    ;
    OS07W00.OS07W-SWR = "N"; /* Request for data switch*/
    ;
  end
  ;
end // end OS07-11000

// Purge any temporary storage
Function OS07-11100()
  /* ------------------------------------------------------------*/
  /* Initialize the storage areas and indicators to be used.*/
  /* ------------------------------------------------------------*/
  ;
  set OS07W01 empty; /* M001 display storage*/
  ;
  OS07W00.OS07W-SWU = "N"; /* Storage update switch*/
  ;
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  OS07W00.TA5TSQIX = 0; /* Highest page number*/
  ;
  /* ------------------------------------------------------------*/
  /* Purge any temporary storage for this application.*/
  /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (OS07W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  OS07W00.XXXPRCNM = "11100"; /* Module identification*/
  converseLib.validationFailed(973); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "OS07-11100";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = OS07W00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end OS07-11100

// Select set and open cursor
Function OS07-11200()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/
  ;
  set VRPLCU01 empty; /* Clear row storage area*/
  ;
  /* Use values entered on map to select the data*/
  ;
  if (OS07M001.OS07M-SELECT-XWH-WHSE-CD == " "
   || OS07M001.OS07M-SELECT-XWH-WHSE-CD == "*")
    ;
    VRPLCU01.XWH-WHSE-CD = "*";
    ;
  else
    ;
    VRPLCU01.XWH-WHSE-CD = OS07M001.OS07M-SELECT-XWH-WHSE-CD;
    ;
  end
  ;
  if (OS07M001.OS07M-SELECT-CU-CO-ID == " "
   || OS07M001.OS07M-SELECT-CU-CO-ID == "*"
   || OS07M001.OS07M-SELECT-CU-CO-ID == 0)
    ;
    VRPLCU01.CU-CO-ID = -1;
    ;
  else
    ;
    VRPLCU01.CU-CO-ID = OS07M001.OS07M-SELECT-CU-CO-ID;
  end
  ;
  OS07S-VRPLCU01-S1(); /* Select Scan 1 DORDER.VRPLCU01*/
  ;
end // end OS07-11200

// Fetch next row in the cursor
Function OS07-11400()
  ;
  OS07S-VRPLCU01-N1(); /* Fetch Next Scan 1 DORDER.VRPLCU01*/
  ;
  if (SQLCA.VAGen_SQLCODE == +100)
    OS07W00.OS07W-SWC = "Y";
  end
  ;
end // end OS07-11400

// Save data in display storage
Function OS07-11500()
  ;
  /* ------------------------------------------------------------*/
  /* Save the data from the table row in display storage.*/
  /* ------------------------------------------------------------*/
  ;
  if (VRPLCU01.XWH-WHSE-CD != "93"
  )
    OS07W01.OS07W-XWH-WHSE-CD[OS07W-IXM] = VRPLCU01.XWH-WHSE-CD;
    ;
    OS07W01.OS07W-CU-CO-ID[OS07W-IXM] = VRPLCU01.CU-CO-ID;
    ;
    OS07W01.OS07W-CU-STOR-ID[OS07W-IXM] = VRPLCU01.CU-STOR-ID;
    ;
    OS07W01.OS07W-XNX-DEPT-ID-XREF[OS07W-IXM] = VRPLCU01.XNX-DEPT-ID-XREF;
    ;
    OS07W01.OS07W-TF-CARR-CD1[OS07W-IXM] = VRPLCU01.TF-CARR-CD1;
    ;
    OS07W01.OS07W-TF-WT-BRK1[OS07W-IXM] = VRPLCU01.TF-WT-BRK1;
    ;
    OS07W01.OS07W-TF-CARR-CD2[OS07W-IXM] = VRPLCU01.TF-CARR-CD2;
    ;
    OS07W01.OS07W-TF-WT-BRK2[OS07W-IXM] = VRPLCU01.TF-WT-BRK2;
    ;
    OS07W01.OS07W-TF-CARR-CD3[OS07W-IXM] = VRPLCU01.TF-CARR-CD3;
    ;
    OS07W01.OS07W-XXX-STAT[OS07W-IXM] = VRPLCU01.XXX-STAT;
    ;
    OS07W01.OS07W-ZZ-SETUP-USER-ID[OS07W-IXM] = VRPLCU01.ZZ-SETUP-USER-ID;
    ;
    OS07W01.OS07W-ZZ-CHNG-USER-ID[OS07W-IXM] = VRPLCU01.ZZ-CHNG-USER-ID;
    ;
    OS07W01.OS07W-ZZ-SDT[OS07W-IXM] = VRPLCU01.ZZ-SDT;
    ;
    OS07W01.OS07W-ZZ-CHNG-DT[OS07W-IXM] = VRPLCU01.ZZ-CHNG-DT;
    ;
    OS07W01.OS07W-ZZ-CHNG-HHMM[OS07W-IXM] = VRPLCU01.ZZ-CHNG-HHMM;
    ;
    OS07W01.OS07W-ZZ-CHNG-CNT[OS07W-IXM] = VRPLCU01.ZZ-CHNG-CNT;
    ;
    OS07W00.OS07W-IXM = OS07W00.OS07W-IXM + 1; /* Increment line index*/
    ;
  end
  ;
end // end OS07-11500

// Add page to temporary storage
Function OS07-11600()
  /* ------------------------------------------------------------*/
  /* Add the next page to temporary storage.*/
  /* ------------------------------------------------------------*/
  ;
  OS07W01.XXXTSLEN = OS07W00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  ;
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (OS07W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the storage area and indicators*/
  /* to be used.  Return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    set OS07W01 empty; /* M001 display storage*/
    ;
    OS07W00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  OS07W00.XXXPRCNM = "11600"; /* Module identification*/
  converseLib.validationFailed(973); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "OS07-11600";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = OS07W00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end OS07-11600

// Close selected set cursor
Function OS07-11700()
  ;
  OS07S-VRPLCU01-C1(); /* Close Scan 1 DORDER.VRPLCU01*/
  ;
end // end OS07-11700

// Format and converse the map
Function OS07-12000()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    OS07W00.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* If Request for data or no error, format data to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (OS07W00.OS07W-SWR == "Y" /* Request for Data*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    ;
    if (OS07W00.OS07W-SWF == "Y") /* Map must be formatted*/
      ;
      OS07W00.OS07W-SELECT-XWH-WHSE-CD = OS07M001.OS07M-SELECT-XWH-WHSE-CD;
      OS07W00.OS07W-SELECT-CU-CO-ID = OS07M001.OS07M-SELECT-CU-CO-ID;
      ;
      OS07-12100(); /* Format the data on the map*/
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Format the current date and any FAST PATH information.*/
  /* ------------------------------------------------------------*/
  ;
  OS07M001.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  OS07M001.CATOAP = COMMAREA.CATOAP; /* TO application*/
  OS07M001.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
  /* ------------------------------------------------------------*/
  /* Set attributes for add and change depending on authority*/
  /* ------------------------------------------------------------*/
  ;
  /* IF COMMAREA.CAADDFL = 'Y';               /* adds allowed*/
  /* SET OS07M001.OS07M-PF13 AUTOSKIP;      /* display option on map*/
  /* END;*/
  ;
  /* IF COMMAREA.CACHGFL = 'Y';               /* changes allowed*/
  /* SET OS07M001.OS07M-PF14 AUTOSKIP;      /* display option on map*/
  /* SET OS07M001.OS07M-PF19 AUTOSKIP;      /* display option on map*/
  /* END;*/
  ;
  /* IF COMMAREA.CAINQFL = 'Y';               /* changes allowed*/
  /* SET OS07M001.OS07M-PF16 AUTOSKIP;      /* display option on map*/
  /* END;*/
  ;
  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/
  ;
  if (OS07W00.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (OS07W00.XXXMSGNO != 0) /* Message to display*/
      ;
      if (OS07W00.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(OS07W00.XXXMSGNO);
      end /* Message number*/
    else
      OS07M001.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    OS07M001.XXXPRCNM = OS07W00.XXXPRCNM; /* Module identification*/
    ;
    set OS07M001 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse OS07M001 ;
  ;
  /* ------------------------------------------------------------*/
  /* Clear the message fields and save FAST PATH information.*/
  /* ------------------------------------------------------------*/
  ;
  OS07W00.XXXPRCNM = " "; /* Module identification*/
  OS07W00.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = OS07M001.CATOAP; /* TO application*/
  COMMAREA.CAITEM = OS07M001.CAITEM; /* Application data*/
end // end OS07-12000

// Format the display data
Function OS07-12100()
  /* ------------------------------------------------------------*/
  /* Clear the fields in the map storage area to be formatted.*/
  /* ------------------------------------------------------------*/
  ;
  set OS07M001 initial; /* M001 input/output area*/
  ;
  OS07W00.OS07W-SWF = "N"; /* Format the map switch*/
  ;
  OS07M001.XXXTSPAG = OS07W00.XXXTSPAG; /* Current page*/
  ;
  OS07M001.TA5TSQIX = OS07W00.TA5TSQIX; /* Highest page*/
  ;
  OS07M001.OS07M-SELECT-XWH-WHSE-CD = OS07W00.OS07W-SELECT-XWH-WHSE-CD;
  ;
  OS07M001.OS07M-SELECT-CU-CO-ID = OS07W00.OS07W-SELECT-CU-CO-ID;
  ;
  OS07-12110(); /* Obtain temporary storage page*/
  ;
  /* ------------------------------------------------------------*/
  /* Format the data in the map from the display storage.*/
  /* ------------------------------------------------------------*/
  ;
  OS07W00.OS07W-IXM = 1; /* Initialize map index*/
  ;
  while (OS07W00.OS07W-IXM <= 12 /* Until screen is full or*/
   && OS07W01.OS07W-XWH-WHSE-CD[OS07W-IXM] > " ") /* or end of data*/
    ;
    set OS07M001.OS07MSEL[OS07W-IXM] underline;

    OS07M001.OS07M-XWH-WHSE-CD[OS07W-IXM] = OS07W01.OS07W-XWH-WHSE-CD[OS07W-IXM];

    OS07M001.OS07M-CU-CO-ID[OS07W-IXM] = OS07W01.OS07W-CU-CO-ID[OS07W-IXM];

    if (OS07W01.OS07W-CU-STOR-ID[OS07W-IXM] == -1)
      ;
      OS07M001.OS07M-CU-STOR-ID[OS07W-IXM] = "*";
      ;
    else
      ;
      OS07M001.OS07M-CU-STOR-ID[OS07W-IXM] = OS07W01.OS07W-CU-STOR-ID[OS07W-IXM];
    end
    ;
    if (OS07W01.OS07W-XNX-DEPT-ID-XREF[OS07W-IXM] == -1)
      ;
      OS07M001.OS07M-XNX-DEPT-ID-XREF[OS07W-IXM] = "*";
      ;
    else
      ;
      OS07M001.OS07M-XNX-DEPT-ID-XREF[OS07W-IXM] = OS07W01.OS07W-XNX-DEPT-ID-XREF[OS07W-IXM];
      ;
    end
    ;
    OS07M001.OS07M-TF-CARR-CD1[OS07W-IXM] = OS07W01.OS07W-TF-CARR-CD1[OS07W-IXM];
    ;
    OS07M001.OS07M-TF-WT-BRK1[OS07W-IXM] = OS07W01.OS07W-TF-WT-BRK1[OS07W-IXM];
    ;
    OS07M001.OS07M-TF-CARR-CD2[OS07W-IXM] = OS07W01.OS07W-TF-CARR-CD2[OS07W-IXM];
    ;
    OS07M001.OS07M-TF-WT-BRK2[OS07W-IXM] = OS07W01.OS07W-TF-WT-BRK2[OS07W-IXM];
    ;
    OS07M001.OS07M-TF-CARR-CD3[OS07W-IXM] = OS07W01.OS07W-TF-CARR-CD3[OS07W-IXM];
    ;
    OS07M001.OS07M-XXX-STAT[OS07W-IXM] = OS07W01.OS07W-XXX-STAT[OS07W-IXM];
    ;
    OS07W00.OS07W-IXM = OS07W00.OS07W-IXM + 1; /* Increment map index*/
    ;
  end
  ;
end // end OS07-12100

// Read temporary storage page
Function OS07-12110()
  /* ------------------------------------------------------------*/
  /* Obtain the next page of data to display.*/
  /* ------------------------------------------------------------*/
  ;
  OS07W01.XXXTSLEN = OS07W00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = OS07W00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (OS07W01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  OS07W00.XXXPRCNM = "12110"; /* Module identification*/
  converseLib.validationFailed(973); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "OS07-12110";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = OS07W00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M001"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end OS07-12110

// Check attention identifier
Function OS07-13000()
  /* -------------------------------------------------------------*/
  /* If CANCEL was requested, clear the map fields and exit.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    OS07-11100(); /* Purge temporary storage*/
    ;
    set OS07W01 empty; /* M001 display storage*/
    ;
    set OS07M001 initial; /* M001 display storage*/
    ;
    exit stack;
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If FAST PATH was requested, transfer to the application.*/
  /* ------------------------------------------------------------*/
  ;
  if (OS07M001.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      OS07-11100(); /* Purge temporary storage*/
      ;
      XSEXIT(); /* Exit to another application*/
      ;
      set OS07M001.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      OS07W00.XXXPRCNM = "13000"; /* Module identification*/
      converseLib.validationFailed(2); /* PA/PF key may not be used*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If HELP, exit to the previous level or exit to the Master*/
   /* Menu was requested, exit to another application.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4 /* or PF4 was pressed*/
   || converseVar.eventKey is pf17) /* or PF17 was pressed*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CAITEM = "OS07M001"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3 ||  /* PF3 was pressed*/
    converseVar.eventKey is pf4)        /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
    end
    ;
    if (converseVar.eventKey is pf17) /* PF17 was pressed*/
      COMMAREA.CATOAP = "OS08"; /* TO application*/
    end
    ;
    OS07-11100(); /* Purge temporary storage*/
    ;
    XSEXIT(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf13  /* and PF13 was not pressed*/
   && converseVar.eventKey not pf15) /* and PF15 was not pressed*/
    ;
    OS07W00.XXXPRCNM = "13000"; /* Module identification*/
    converseLib.validationFailed(2); /* PA/PF key pressed is not valid*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  /* ----------------------------------------------------------------*/
  /* Check security on PF13*/
  /* ----------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf13) /* pf13 pressed*/
    ;
    if (COMMAREA.CACHGFL == "N") /* no change authority*/
      ;
      OS07W00.XXXPRCNM = "13000"; /* Module identification*/
      ;
      converseLib.validationFailed(995); /* Security violation*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  end
  ;
  /* ----------------------------------------------------------------*/
  /* Transfer to OS06 if PF15 pressed*/
  /* ----------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf15) /* PF15 was pressed*/
    COMMAREA.CATOAP = "OS06"; /* TO application*/
    ;
    OS07-11100(); /* Purge temporary storage*/
    ;
    XSEXIT(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
end // end OS07-13000

// Reset highlighted fields
Function OS07-14000()
  /* ------------------------------------------------------------*/
  /* Reset all modifiable field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/
  ;
  set OS07M001.OS07M-SELECT-XWH-WHSE-CD normal;
  set OS07M001.OS07M-SELECT-CU-CO-ID normal;
  ;
  OS07W00.OS07W-IXM = 1; /* Initialize line index*/
  ;
  while (OS07W00.OS07W-IXM <= 12 /* * Until end of lines*/
   && OS07M001.OS07M-XWH-WHSE-CD[OS07W-IXM] > " ") /* or end of display*/
    ;
    set OS07M001.OS07MSEL[OS07W-IXM] normal; /* Reset select flag*/
    ;
    OS07W00.OS07W-IXM = OS07W00.OS07W-IXM + 1; /* Increment line index*/
    ;
  end
  ;
  set OS07M001.CATOAP normal; /* TO application*/
  ;
  set OS07M001.CAITEM normal; /* Application data*/
  ;
end // end OS07-14000

// Verify data that was entered
Function OS07-15000()
  /* ------------------------------------------------------------*/
  /* Highlight any application data that was entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (OS07M001.CAITEM > " ") /* Application data was entered*/
    ;
    OS07W00.XXXPRCNM = "15000"; /* Module identification*/
    set OS07M001.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(975); /* Enter only with FAST PATH*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Determine whether a valid request to scroll was entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   || converseVar.eventKey is pf8) /* or scroll forward request*/
    ;
    OS07-15100(); /* Verify scroll request*/
    ;
  else
    ;
    /* ------------------------------------------------------------*/
    /* Otherwise, verify data in the line.*/
    /* ------------------------------------------------------------*/
    ;
    if (converseVar.eventKey is enter) /* Enter was pressed*/
      ;
      OS07-15200(); /* Verify "S" or "D"*/
      ;
      if (converseVar.validationMsgNum == 0)
        ;
        OS07-15300(); /* Verify only one select*/
        ;
      end
      ;
    else
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If any errors were found, exit to display the map.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
  ;
end // end OS07-15000

// Verify scroll request
Function OS07-15100()
  /* ------------------------------------------------------------*/
  /* If scroll back was requested, ensure that pages exist.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && OS07W00.XXXTSPAG < 2)       /* and no previous pages*/
    ;
    OS07W00.XXXPRCNM = "15100"; /* Module identification*/
    converseLib.validationFailed(192); /* No previous page to display*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If scroll forward was requested, ensure that pages exist.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && OS07W00.XXXTSPAG >= OS07W00.TA5TSQIX) /* and no more pages*/
    ;
    OS07W00.XXXPRCNM = "15100"; /* Module identification*/
    converseLib.validationFailed(191); /* No more pages to display*/
    ;
  end
  ;
end // end OS07-15100

// Verify data in the line
Function OS07-15200()
  /* ------------------------------------------------------------*/
  /* If selection was entered and is not an "S" or "D", indicate that*/
  /* only "S" or "D" may be entered to select a line.*/
  /* ------------------------------------------------------------*/
  ;
  OS07W00.OS07W-IXM = 12; /* initialize index*/
  ;
  while (OS07W00.OS07W-IXM > 0) /* until end of lines*/
    ;
    if (OS07M001.OS07MSEL[OS07W-IXM] != OS07W01.OS07W-MSEL[OS07W-IXM]
     && OS07M001.OS07MSEL[OS07W-IXM] != "S" /* and is not a "S"*/
     && OS07M001.OS07MSEL[OS07W-IXM] != "D") /* and is not a "D"*/
      ;
      OS07W00.XXXPRCNM = "15200"; /* Module identification*/
      set OS07M001.OS07MSEL[OS07W-IXM] cursor, bold; /* Highlight*/
      converseLib.validationFailed(976); /* Only "S" or "D" may be entered*/
      ;
    end
    ;
    if (OS07M001.OS07MSEL[OS07W-IXM] == "D")
      ;
      if (COMMAREA.CACHGFL == "N")
        ;
        OS07W00.XXXPRCNM = "15200"; /* Module identification*/
        set OS07M001.OS07MSEL[OS07W-IXM] cursor, bold; /* Highlight*/
        converseLib.validationFailed(995); /* Security violation*/
        ;
      end
      ;
    end
    ;
    OS07W00.OS07W-IXM = OS07W00.OS07W-IXM - 1; /* decrement line number*/
    ;
  end
  ;
end // end OS07-15200

// Verify data in the line
Function OS07-15300()
  /* ------------------------------------------------------------*/
  /* Ensure that only one select byte is filled, otherwise error*/
  /* ------------------------------------------------------------*/
  ;
  OS07W00.OS07W-SELECT-CTR = 0;
  ;
  OS07W00.OS07W-IXM = 12; /* initialize index*/
  ;
  while (OS07W00.OS07W-IXM > 0) /* until end of lines*/
    ;
    if (OS07M001.OS07MSEL[OS07W-IXM] != OS07W01.OS07W-MSEL[OS07W-IXM]
     && OS07M001.OS07MSEL[OS07W-IXM] == "S" /* and = "S"*/
     || OS07M001.OS07MSEL[OS07W-IXM] == "D") /* or  = "D"*/
      ;
      OS07W00.OS07W-SELECT-CTR = OS07W00.OS07W-SELECT-CTR + 1;
      if (OS07W00.OS07W-SELECT-CTR > 1)
        set OS07M001.OS07MSEL[OS07W-IXM] cursor, bold; /* Highlight*/
      end
      ;
    end
    ;
    OS07W00.OS07W-IXM = OS07W00.OS07W-IXM - 1; /* decrement line number*/
    ;
  end
  ;
  if (OS07W00.OS07W-SELECT-CTR > 1)
    ;
    OS07W00.XXXPRCNM = "15300"; /* Module identification*/
    converseLib.validationFailed(977); /* Only one selection can be made*/
    ;
  end
end // end OS07-15300

// Process valid input request
Function OS07-16000()
  /* ------------------------------------------------------------*/
  /* Indicate that the map must be formatted before display*/
  /* ------------------------------------------------------------*/
  ;
  OS07W00.OS07W-SWF = "Y"; /* format the map switch*/
  ;
  /* ------------------------------------------------------------*/
  /* If search key changed, get new data*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not pf13) /* ADD not requested*/
    ;
    if ((OS07W00.OS07W-SELECT-XWH-WHSE-CD != 
    OS07M001.OS07M-SELECT-XWH-WHSE-CD
     || OS07W00.OS07W-SELECT-CU-CO-ID != OS07M001.OS07M-SELECT-CU-CO-ID)
     || (OS07M001.OS07M-XWH-WHSE-CD == " "
     && OS07M001.OS07M-CU-CO-ID == 0))
      ;
      OS07W00.OS07W-SWR = "Y"; /* request for data switch*/
      OS07W00.XXXTSPAG = 0; /* zero out temp storage*/
      ;
  /* move map input to working storage*/
      ;
      OS07W00.OS07W-SELECT-XWH-WHSE-CD = OS07M001.OS07M-SELECT-XWH-WHSE-CD;
      ;
      OS07W00.OS07W-SELECT-CU-CO-ID = OS07M001.OS07M-SELECT-CU-CO-ID;
      ;
      return;
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If a scroll backward was requested, decrement the page*/
  /* number and return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    ;
    OS07W00.XXXTSPAG = OS07W00.XXXTSPAG - 1; /* Decrement page number*/
    ;
    OS07W00.OS07W-SWF = "Y"; /* Format Screen*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If a scroll forward was requested, increment the page*/
  /* number and return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    ;
    OS07W00.XXXTSPAG = OS07W00.XXXTSPAG + 1; /* Increment page number*/
    ;
    OS07W00.OS07W-SWF = "Y"; /* Format Screen*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Indicate that the map must be formatted before display.*/
  /* ------------------------------------------------------------*/
  if (converseVar.eventKey is enter) /* enter pressed*/
    ;
    OS07W00.OS07W-SWF = "Y"; /* Format the map switch*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Save the select fields and clear the map input/output area.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf13) /* pf13*/
    OS07W00.OS07W-SFN = "A"; /* 'add' function*/
    OS07W00.OS07W-SWD = "2"; /* Map to be displayed switch*/
    OS07W00.OS07W-SWF = "Y"; /* yes format map*/
    ;
  else
    ;
    OS07W00.OS07W-IXM = 1; /* Initialize line index*/
    OS07W00.OS07W-SWU = "N"; /* reset switch*/
    ;
    while (OS07W00.OS07W-IXM <= 12 /* Until end of lines*/
     && OS07W00.OS07W-SWU != "Y") /* or 'S' or 'D' is found*/
      ;
      if (OS07M001.OS07MSEL[OS07W-IXM] != OS07W01.OS07W-MSEL[OS07W-IXM])
        ;
        OS07W00.OS07W-SWU = "Y"; /* indicate 's' or 'd' was found*/
        ;
        if (OS07M001.OS07MSEL[OS07W-IXM] == "S")
          ;
          OS07W00.OS07W-SFN = "C"; /* 'change' function*/
          ;
          OS07W00.OS07W-ZZ-CHNG-CNT = OS07W01.OS07W-ZZ-CHNG-CNT[OS07W-IXM];
          ;
        else
          ;
          OS07W00.OS07W-SWR = "Y"; /* Request data*/
          OS07W00.OS07W-SWF = "Y"; /* Format screen*/
          OS07W00.OS07W-SFN = "D"; /* 'delete' function*/
          converseLib.validationFailed(987); /* Verify delete*/
          ;
        end
        ;
        OS07W00.OS07W-SWF = "Y"; /* yes format map*/
        OS07W00.OS07W-SWD = "2"; /* Map to be displayed switch*/
        ;
      end
      ;
      if (OS07W00.OS07W-SWU != "Y")
        ;
        OS07W00.OS07W-IXM = OS07W00.OS07W-IXM + 1; /* Increment line index*/
        ;
      end
      ;
    end
    ;
  end
  ;
end // end OS07-16000

// Process to add a new row
Function OS07-20000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Format the map output area and display the map.*/
  /* 2) Check the attention identifier used to respond.*/
  /* 3) Reset highlighted fields to normal intensity.*/
  /* 4) Verify the data that was entered.*/
  /* 5) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/
  ;
  OS07-21000(); /* Obtain the data to display*/
  ;
  OS07-22000(); /* Format and display the map*/
  ;
  OS07-23000(); /* Check attention identifier*/
  ;
  OS07-24000(); /* Reset fields to normal intensity*/
  ;
  OS07-25000(); /* Verify the entered data*/
  ;
  OS07-26000(); /* Process valid input request*/
  ;
  ;
end // end OS07-20000

// Obtain the data to display
Function OS07-21000()
  /* ***********************************************************************/
  /*  */
  /* Select Unique one row from DORDER.VRPLCU01 based on select from*/
  /* Screen 1*/
  /*  */
  /* ***********************************************************************/
  /*  */
  if (OS07W00.OS07W-SFN != "A") /* If not ADD Function*/
    ;
    set VRPLCU01 empty; /* Clear row storage area*/
    ;
    VRPLCU01.XWH-WHSE-CD = OS07W01.OS07W-XWH-WHSE-CD[OS07W-IXM];
    ;
    VRPLCU01.CU-CO-ID = OS07W01.OS07W-CU-CO-ID[OS07W-IXM];
    ;
    if (OS07W01.OS07W-CU-STOR-ID[OS07W-IXM] == "*"
     || OS07W01.OS07W-CU-STOR-ID[OS07W-IXM] == " ")
      ;
      VRPLCU01.CU-CO-ID = -1;
      ;
    else
      ;
      VRPLCU01.CU-STOR-ID = OS07W01.OS07W-CU-STOR-ID[OS07W-IXM];
      ;
    end
    ;
    if (OS07W01.OS07W-XNX-DEPT-ID-XREF[OS07W-IXM] == "*"
     || OS07W01.OS07W-XNX-DEPT-ID-XREF[OS07W-IXM] == " ")
      ;
      VRPLCU01.XNX-DEPT-ID-XREF = -1;
      ;
    else
      ;
      VRPLCU01.XNX-DEPT-ID-XREF = OS07W01.OS07W-XNX-DEPT-ID-XREF[OS07W-IXM];
      ;
    end
    ;
    OS07S-VRPLCU01-S(); /* Select Unique DORDER.VRPLCU01*/
    ;
    if (SQLCA.VAGen_SQLCODE == +0)
      ;
      OS07-21100(); /* Move data to working storage*/
      ;
    end
    ;
  end
  ;
end // end OS07-21000

// Move row to working storage
Function OS07-21100()
  ;
  /* ---------------------------------------------------------------------*/
  /* Move Customer selected row to Map 2 Working Storage*/
  /* ---------------------------------------------------------------------*/
  ;
  OS07W02.OS07W-XWH-WHSE-CD = VRPLCU01.XWH-WHSE-CD;
  OS07W02.OS07W-XXX-STAT = VRPLCU01.XXX-STAT;
  OS07W02.OS07W-CU-CO-ID = VRPLCU01.CU-CO-ID;
  OS07W02.OS07W-CU-STOR-ID = VRPLCU01.CU-STOR-ID;
  OS07W02.OS07W-XNX-DEPT-ID-XREF = VRPLCU01.XNX-DEPT-ID-XREF;
  OS07W02.OS07W-SP-SPGM-ID = VRPLCU01.SP-SPGM-ID;
  OS07W02.OS07W-XOB-BASE-OT-CD = VRPLCU01.XOB-BASE-OT-CD;
  OS07W02.OS07W-XOT-ORD-TYP-CD = VRPLCU01.XOT-ORD-TYP-CD;
  /* MOVE VRPLCU01.XHD-HNDL-CD1 TO OS07W02.OS07W-XHD-HNDL-CD1;*/
  /* MOVE VRPLCU01.XHD-HNDL-CD2 TO OS07W02.OS07W-XHD-HNDL-CD2;*/
  /* MOVE VRPLCU01.XHD-HNDL-CD3 TO OS07W02.OS07W-XHD-HNDL-CD3;*/
  /* MOVE VRPLCU01.XHD-HNDL-CD4 TO OS07W02.OS07W-XHD-HNDL-CD4;*/
  OS07W02.OS07W-XDS-DIR-SHIP-CD = VRPLCU01.XDS-DIR-SHIP-CD;
  OS07W02.OS07W-TF-CARR-CD1 = VRPLCU01.TF-CARR-CD1;
  OS07W02.OS07W-TF-CARR-CD2 = VRPLCU01.TF-CARR-CD2;
  OS07W02.OS07W-TF-CARR-CD3 = VRPLCU01.TF-CARR-CD3;
  OS07W02.OS07W-TF-WT-BRK1 = VRPLCU01.TF-WT-BRK1;
  OS07W02.OS07W-TF-WT-BRK2 = VRPLCU01.TF-WT-BRK2;
  OS07W02.OS07W-PK-BOL-STMP-TXT = VRPLCU01.PK-BOL-STMP-TXT;
  ;
end // end OS07-21100

// Format and converse the map
Function OS07-22000()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    OS07W00.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* If obtain data failed or no error, format data to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (OS07W00.OS07W-SWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    ;
    if (OS07W00.OS07W-SWF == "Y") /* Map must be formatted*/
      OS07-22100(); /* Format the data on the map*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Format the current date and any FAST PATH information.*/
  /* ------------------------------------------------------------*/
  ;
  OS07M002.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  OS07M002.CATOAP = COMMAREA.CATOAP; /* TO application*/
  OS07M002.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/
  ;
  if (OS07W00.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (OS07W00.XXXMSGNO != 0) /* Message to display*/
      ;
      if (OS07W00.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(OS07W00.XXXMSGNO);
      end /* Message number*/
    else
      OS07M002.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    OS07M002.XXXPRCNM = OS07W00.XXXPRCNM; /* Module identification*/
    ;
    set OS07M002 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse OS07M002 ;
  ;
  /* ------------------------------------------------------------*/
  /* Clear the message fields and save FAST PATH information.*/
  /* ------------------------------------------------------------*/
  ;
  OS07W00.XXXPRCNM = " "; /* Module identification*/
  OS07W00.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = OS07M002.CATOAP; /* TO application*/
  COMMAREA.CAITEM = OS07M002.CAITEM; /* Application data*/
  ;
end // end OS07-22000

// Format the display data
Function OS07-22100()
  /* ------------------------------------------------------------*/
  /* Clear the fields in the map storage area to be formatted.*/
  /* ------------------------------------------------------------*/
  ;
  set OS07M002 initial; /* M002 input/output area*/
  ;
  OS07W00.OS07W-SWF = "N"; /* Format the map switch*/
  ;
  /* ------------------------------------------------------------*/
  /* Obtain the current date and time*/
  /* ------------------------------------------------------------*/
  ;
  XX0XS01(); /* Current date*/
  ;
  /* ------------------------------------------------------------*/
  /* Format the data in the map from the display storage.*/
  /* ------------------------------------------------------------*/
  ;
  if (OS07W00.OS07W-SFN == "A") /* ADD Function*/
    set OS07M002.OS07M-XWH-WHSE-CD initialAttributes;
    set OS07M002.OS07M-XXX-STAT initialAttributes;
    set OS07M002.OS07M-CU-CO-ID initialAttributes;
    set OS07M002.OS07M-CU-STOR-ID initialAttributes;
    set OS07M002.OS07M-XNX-DEPT-ID-XREF initialAttributes;
    set OS07M002.OS07M-SP-SPGM-ID initialAttributes;
    set OS07M002.OS07M-XOB-BASE-OT-CD skip, noHighLight;
    set OS07M002.OS07M-XOT-ORD-TYP-CD protect; /* tcs change 05/06/99*/
  /* SET OS07M002.OS07M-XHD-HNDL-CD1 DEFINED;*/
  /* SET OS07M002.OS07M-XHD-HNDL-CD2 DEFINED;*/
  /* SET OS07M002.OS07M-XHD-HNDL-CD3 DEFINED;*/
  /* SET OS07M002.OS07M-XHD-HNDL-CD4 DEFINED;*/
    set OS07M002.OS07M-XDS-DIR-SHIP-CD initialAttributes;
    set OS07M002.OS07M-TF-CARR-CD1 initialAttributes;
    set OS07M002.OS07M-TF-WT-BRK1 initialAttributes;
    set OS07M002.OS07M-TF-CARR-CD2 initialAttributes;
    set OS07M002.OS07M-TF-WT-BRK2 initialAttributes;
    set OS07M002.OS07M-TF-CARR-CD3 initialAttributes;
    set OS07M002.OS07M-PK-BOL-STMP-TXT initialAttributes;
    OS07M002.OS07M-XOB-BASE-OT-CD = "R1";
  end
  ;
  if (OS07W00.OS07W-SFN == "C") /* CHG Function*/
    set OS07M002.OS07M-XWH-WHSE-CD skip, noHighLight;
    set OS07M002.OS07M-XXX-STAT initialAttributes, cursor;
    set OS07M002.OS07M-CU-CO-ID skip, noHighLight;
    set OS07M002.OS07M-CU-STOR-ID skip, noHighLight;
    set OS07M002.OS07M-XNX-DEPT-ID-XREF skip, noHighLight;
    set OS07M002.OS07M-SP-SPGM-ID protect; /* tcs change 04/06/99*/
    set OS07M002.OS07M-XOB-BASE-OT-CD skip, noHighLight;
    set OS07M002.OS07M-XOT-ORD-TYP-CD protect; /* tcs change 04/06/99*/
  /* SET OS07M002.OS07M-XHD-HNDL-CD1 DEFINED;*/
  /* SET OS07M002.OS07M-XHD-HNDL-CD2 DEFINED;*/
  /* SET OS07M002.OS07M-XHD-HNDL-CD3 DEFINED;*/
  /* SET OS07M002.OS07M-XHD-HNDL-CD4 DEFINED;*/
    set OS07M002.OS07M-XDS-DIR-SHIP-CD initialAttributes;
    set OS07M002.OS07M-TF-CARR-CD1 initialAttributes;
    set OS07M002.OS07M-TF-WT-BRK1 initialAttributes;
    set OS07M002.OS07M-TF-CARR-CD2 initialAttributes;
    set OS07M002.OS07M-TF-WT-BRK2 initialAttributes;
    set OS07M002.OS07M-TF-CARR-CD3 initialAttributes;
    set OS07M002.OS07M-PK-BOL-STMP-TXT initialAttributes;
    ;
    OS07M002.OS07M-XWH-WHSE-CD = OS07W02.OS07W-XWH-WHSE-CD;
    OS07M002.OS07M-XXX-STAT = OS07W02.OS07W-XXX-STAT;
    OS07M002.OS07M-CU-CO-ID = OS07W02.OS07W-CU-CO-ID;
    ;
    if (OS07W02.OS07W-CU-STOR-ID == -1)
      ;
      OS07M002.OS07M-CU-STOR-ID = "*";
      ;
    else
      ;
      OS07M002.OS07M-CU-STOR-ID = OS07W02.OS07W-CU-STOR-ID;
      ;
    end
    ;
    if (OS07W02.OS07W-XNX-DEPT-ID-XREF == -1)
      ;
      OS07M002.OS07M-XNX-DEPT-ID-XREF = "*";
      ;
    else
      ;
      OS07M002.OS07M-XNX-DEPT-ID-XREF = OS07W02.OS07W-XNX-DEPT-ID-XREF;
      ;
    end
    ;
    OS07M002.OS07M-SP-SPGM-ID = OS07W02.OS07W-SP-SPGM-ID;
    OS07M002.OS07M-XOB-BASE-OT-CD = "R1";
    OS07M002.OS07M-XOT-ORD-TYP-CD = OS07W02.OS07W-XOT-ORD-TYP-CD;
  /* MOVE OS07W02.OS07W-XHD-HNDL-CD1 TO OS07M002.OS07M-XHD-HNDL-CD1;*/
  /* MOVE OS07W02.OS07W-XHD-HNDL-CD2 TO OS07M002.OS07M-XHD-HNDL-CD2;*/
  /* MOVE OS07W02.OS07W-XHD-HNDL-CD3 TO OS07M002.OS07M-XHD-HNDL-CD3;*/
  /* MOVE OS07W02.OS07W-XHD-HNDL-CD4 TO OS07M002.OS07M-XHD-HNDL-CD4;*/
    OS07M002.OS07M-XDS-DIR-SHIP-CD = OS07W02.OS07W-XDS-DIR-SHIP-CD;
    OS07M002.OS07M-TF-CARR-CD1 = OS07W02.OS07W-TF-CARR-CD1;
    OS07M002.OS07M-TF-WT-BRK1 = OS07W02.OS07W-TF-WT-BRK1;
    OS07M002.OS07M-TF-CARR-CD2 = OS07W02.OS07W-TF-CARR-CD2;
    OS07M002.OS07M-TF-WT-BRK2 = OS07W02.OS07W-TF-WT-BRK2;
    OS07M002.OS07M-TF-CARR-CD3 = OS07W02.OS07W-TF-CARR-CD3;
    OS07M002.OS07M-PK-BOL-STMP-TXT = OS07W02.OS07W-PK-BOL-STMP-TXT;
  end
  ;
  if (OS07W00.OS07W-SFN == "D") /* DEL Function*/
    set OS07M002.OS07M-XWH-WHSE-CD skip, noHighLight;
    set OS07M002.OS07M-XXX-STAT skip, noHighLight;
    set OS07M002.OS07M-CU-CO-ID skip, noHighLight;
    set OS07M002.OS07M-CU-STOR-ID skip, noHighLight;
    set OS07M002.OS07M-XNX-DEPT-ID-XREF skip, noHighLight;
    set OS07M002.OS07M-SP-SPGM-ID skip, noHighLight;
    set OS07M002.OS07M-XOB-BASE-OT-CD skip, noHighLight;
    set OS07M002.OS07M-XOT-ORD-TYP-CD skip, noHighLight;
  /* SET OS07M002.OS07M-XHD-HNDL-CD1 AUTOSKIP,NOHILITE;*/
  /* SET OS07M002.OS07M-XHD-HNDL-CD2 AUTOSKIP,NOHILITE;*/
  /* SET OS07M002.OS07M-XHD-HNDL-CD3 AUTOSKIP,NOHILITE;*/
  /* SET OS07M002.OS07M-XHD-HNDL-CD4 AUTOSKIP,NOHILITE;*/
    set OS07M002.OS07M-XDS-DIR-SHIP-CD skip, noHighLight;
    set OS07M002.OS07M-TF-CARR-CD1 skip, noHighLight;
    set OS07M002.OS07M-TF-WT-BRK1 skip, noHighLight;
    set OS07M002.OS07M-TF-CARR-CD2 skip, noHighLight;
    set OS07M002.OS07M-TF-WT-BRK2 skip, noHighLight;
    set OS07M002.OS07M-TF-CARR-CD3 skip, noHighLight;
    set OS07M002.OS07M-PK-BOL-STMP-TXT skip, noHighLight;
    OS07M002.OS07M-XWH-WHSE-CD = OS07W02.OS07W-XWH-WHSE-CD;
    OS07M002.OS07M-XXX-STAT = OS07W02.OS07W-XXX-STAT;
    OS07M002.OS07M-CU-CO-ID = OS07W02.OS07W-CU-CO-ID;
    ;
    if (OS07W02.OS07W-CU-STOR-ID == -1)
      ;
      OS07M002.OS07M-CU-STOR-ID = "*";
      ;
    else
      ;
      OS07M002.OS07M-CU-STOR-ID = OS07W02.OS07W-CU-STOR-ID;
      ;
    end
    ;
    if (OS07W02.OS07W-XNX-DEPT-ID-XREF == -1)
      ;
      OS07M002.OS07M-XNX-DEPT-ID-XREF = "*";
      ;
    else
      ;
      OS07M002.OS07M-XNX-DEPT-ID-XREF = OS07W02.OS07W-XNX-DEPT-ID-XREF;
      ;
    end
    ;
    OS07M002.OS07M-SP-SPGM-ID = OS07W02.OS07W-SP-SPGM-ID;
    OS07M002.OS07M-XOB-BASE-OT-CD = OS07W02.OS07W-XOB-BASE-OT-CD;
    OS07M002.OS07M-XOT-ORD-TYP-CD = OS07W02.OS07W-XOT-ORD-TYP-CD;
  /* MOVE OS07W02.OS07W-XHD-HNDL-CD1 TO OS07M002.OS07M-XHD-HNDL-CD1;*/
  /* MOVE OS07W02.OS07W-XHD-HNDL-CD2 TO OS07M002.OS07M-XHD-HNDL-CD2;*/
  /* MOVE OS07W02.OS07W-XHD-HNDL-CD3 TO OS07M002.OS07M-XHD-HNDL-CD3;*/
  /* MOVE OS07W02.OS07W-XHD-HNDL-CD4 TO OS07M002.OS07M-XHD-HNDL-CD4;*/
    OS07M002.OS07M-XDS-DIR-SHIP-CD = OS07W02.OS07W-XDS-DIR-SHIP-CD;
    OS07M002.OS07M-TF-CARR-CD1 = OS07W02.OS07W-TF-CARR-CD1;
    OS07M002.OS07M-TF-WT-BRK1 = OS07W02.OS07W-TF-WT-BRK1;
    OS07M002.OS07M-TF-CARR-CD2 = OS07W02.OS07W-TF-CARR-CD2;
    OS07M002.OS07M-TF-WT-BRK2 = OS07W02.OS07W-TF-WT-BRK2;
    OS07M002.OS07M-TF-CARR-CD3 = OS07W02.OS07W-TF-CARR-CD3;
    OS07M002.OS07M-PK-BOL-STMP-TXT = OS07W02.OS07W-PK-BOL-STMP-TXT;
  end
end // end OS07-22100

// Check attention identifier
Function OS07-23000()
  /* ------------------------------------------------------------*/
  /* If CANCEL was requested, clear the map fields and exit.*/
  /* If a request for data is pending, reset that request.*/
  /* ------------------------------------------------------------*/
  ;
  /* IF EZEAID IS PA2;                /* PA2 was pressed*/
  /* ;*/
  /* IF OS07W00.OS07W-SWR EQ 'Y';   /* Request for data*/
  /* SET OS07W02 EMPTY;           /* M002 display storage*/
  /* END;*/
  /* ;*/
  /* MOVE 'Y' TO OS07W00.OS07W-SWF; /* Format the map switch*/
  /* MOVE 'N' TO OS07W00.OS07W-SWR; /* Request for data switch*/
  /* ;*/
  /* MOVE ' ' TO COMMAREA.CATOAP;   /* TO application*/
  /* MOVE ' ' TO COMMAREA.CAITEM;   /* Application data*/
  /* ;*/
  /* EZEFLO;                        /* Exit to display map*/
  /* ;*/
  /* END;*/
  ;
  /* ------------------------------------------------------------*/
  /* If FAST PATH was requested, transfer to the application.*/
  /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      OS07-11100(); /* Purge any temporary storage*/
      ;
      XSEXIT(); /* Exit to another application*/
      ;
    else
      ;
      OS07W00.XXXPRCNM = "23000"; /* Module identification*/
      converseLib.validationFailed(2); /* PA/PF key may not be used*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If HELP, exit to the previous level or exit to the Master*/
  /* Menu was requested, exit to another application.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
  /* IF EZEAID IS PF1;              /* PF1 was pressed*/
  /* MOVE 'OS07M002' TO COMMAREA.CAITEM;/* Application find code*/
  /* END;*/
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      ;
      OS07W00.OS07W-SWD = "1"; /* Map to be displayed switch*/
      OS07W00.OS07W-SWF = "Y"; /* Format the map switch*/
      OS07W00.OS07W-SWR = "Y"; /* request data*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
    OS07-11100(); /* Purge any temporary storage*/
    ;
    COMMAREA.CATOAP = "MN0M"; /* TO application*/
    ;
    XSEXIT(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Ensure that PF13 and PF15 isn't invoked for "ADD CUSTOMER"*/
  /* Function*/
  /* ------------------------------------------------------------*/
  ;
  if ((converseVar.eventKey is pf13
   || converseVar.eventKey is pf15)
   && OS07W00.OS07W-SFN == "A")
    ;
    converseLib.validationFailed(985); /* Display of customer product not valid*/
                                   /* for ADD Function*/
    exit stack;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Ensure that PF15 or ENTER isn't invoked without proper security*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf15 /* Add Product*/
   || converseVar.eventKey is enter) /* Modify Customer data*/
    ;
    if (COMMAREA.CACHGFL == "N")
      ;
      converseLib.validationFailed(995); /* Security Violation*/
      ;
      exit stack;
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Determine whether a valid attention identifier was used to*/
  /* invoke the transaction.  Display an error message to the*/
  /* user if the PF key used is not supported.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf13  /* and PF23 was not pressed*/
   && converseVar.eventKey not pf15) /* and PF23 was not pressed*/
    ;
    OS07W00.XXXPRCNM = "23000"; /* Module identification*/
    converseLib.validationFailed(2); /* PA/PF key pressed is not valid*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      converseLib.clearScreen();
       /* Clear screen before display*/
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end OS07-23000

// Reset highlighted fields
Function OS07-24000()
  /* -------------------------------------------------------------*/
  /* Reset all modifiable field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/
  ;
  set OS07M002.OS07M-XWH-WHSE-CD initialAttributes;
  set OS07M002.OS07M-XXX-STAT initialAttributes;
  set OS07M002.OS07M-CU-CO-ID initialAttributes;
  set OS07M002.OS07M-CU-STOR-ID initialAttributes;
  set OS07M002.OS07M-XNX-DEPT-ID-XREF initialAttributes;
  set OS07M002.OS07M-SP-SPGM-ID initialAttributes;
  set OS07M002.OS07M-XOB-BASE-OT-CD initialAttributes;
  set OS07M002.OS07M-XOT-ORD-TYP-CD protect;
  /* SET OS07M002.OS07M-XHD-HNDL-CD1 DEFINED;*/
  /* SET OS07M002.OS07M-XHD-HNDL-CD2 DEFINED;*/
  /* SET OS07M002.OS07M-XHD-HNDL-CD3 DEFINED;*/
  /* SET OS07M002.OS07M-XHD-HNDL-CD4 DEFINED;*/
  set OS07M002.OS07M-XDS-DIR-SHIP-CD initialAttributes;
  set OS07M002.OS07M-TF-CARR-CD1 initialAttributes;
  set OS07M002.OS07M-TF-WT-BRK1 initialAttributes;
  set OS07M002.OS07M-TF-CARR-CD2 initialAttributes;
  set OS07M002.OS07M-TF-WT-BRK2 initialAttributes;
  set OS07M002.OS07M-PK-BOL-STMP-TXT initialAttributes;
  ;
end // end OS07-24000

// Verify data that was entered
Function OS07-25000()
  /* ------------------------------------------------------------*/
  /* Highlight any application data that was entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    ;
    OS07W00.XXXPRCNM = "25000"; /* Module identification*/
    set OS07M002.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(975); /* Enter only with FAST PATH*/
    ;
  end
  ;
  /* -------------------------------------------------------------*/
  /* Edit for ADD and CHG functions only*/
  /* -------------------------------------------------------------*/
  ;
  if (OS07W00.OS07W-SFN == "A")
    OS07-25300();
  else
    if (OS07W00.OS07W-SFN == "C")
      OS07-25400();
    end
  end
  ;
  /* ------------------------------------------------------------*/
  /* If any errors were found, exit to display the map.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
end // end OS07-25000

// ADD function edit routine
Function OS07-25300()
  /* ---------------------------------------------------------------------*/
  /* ADD Function Edit Routine*/
  /* ---------------------------------------------------------------------*/
  ;
  if (OS07M002.OS07M-TF-CARR-CD3 != "0007")
    ;
    /* --- either all three carrier codes should be blank or all*/
    /* --- three should contain values*/
    ;
    if (OS07M002.OS07M-TF-CARR-CD3 == " ")
      ;
      /* --- check whether other carrier codes are blank ---*/
      OS07S-VAL-CARR-CD(); /* carrier code validation*/
      ;
    else
      ;
      set TF7REC empty;
      ;
      TF7REC.TF7CARCD = OS07M002.OS07M-TF-CARR-CD3; /* carrier code 3*/
      ;
      OS07S-VCARR002-S();
      ;
      if (SQLCA.VAGen_SQLCODE == +0)
        ;
      else
        ;
        OS07W00.XXXPRCNM = "25300"; /* Module identification*/
        set OS07M002.OS07M-TF-CARR-CD3 cursor, bold;
        converseLib.validationFailed(979); /* Invalid carrier*/
        ;
      end
      ;
    end
  else
    ;
    OS07W00.XXXPRCNM = "25300"; /* Module identification*/
    set OS07M002.OS07M-TF-CARR-CD3 cursor, bold;
    converseLib.validationFailed(979); /* Invalid carrier*/
    ;
  end
  ;
  if (OS07M002.OS07M-TF-WT-BRK2 == 0) /* Weight Break 2*/
    ;
    /* --- if the carrier code is blank then it is valid*/
    /* --- for the weight break to be blank. (nb. if one carrier*/
    /* --- code is made blank, all carrier codes must be blank)*/
    ;
    if (OS07M002.OS07M-TF-CARR-CD2 != " ")
      ;
      OS07W00.XXXPRCNM = "25300"; /* Module identification*/
      set OS07M002.OS07M-TF-WT-BRK2 cursor, bold;
      converseLib.validationFailed(978); /* Invalid Weight Break*/
      ;
    end
  else
    ;
    if (OS07M002.OS07M-TF-WT-BRK2 <= 0
     || OS07M002.OS07M-TF-WT-BRK2 > 999999999)
      ;
      OS07W00.XXXPRCNM = "25300"; /* Module identification*/
      set OS07M002.OS07M-TF-WT-BRK2 cursor, bold;
      converseLib.validationFailed(978); /* Invalid Weight Break*/
      ;
    end
    ;
  end
  ;
  if (OS07M002.OS07M-TF-CARR-CD2 != "0007")
    ;
    if (OS07M002.OS07M-TF-CARR-CD2 == " ")
      ;
      /* --- check whether other carrier codes are blank ---*/
      OS07S-VAL-CARR-CD(); /* carrier code validation*/
      ;
    else
      ;
      set TF7REC empty;
      ;
      TF7REC.TF7CARCD = OS07M002.OS07M-TF-CARR-CD2; /* carrier code 2*/
      ;
      OS07S-VCARR002-S();
      ;
      if (SQLCA.VAGen_SQLCODE == +0)
        ;
      else
        ;
        OS07W00.XXXPRCNM = "25300"; /* Module identification*/
        set OS07M002.OS07M-TF-CARR-CD2 cursor, bold;
        converseLib.validationFailed(979); /* Invalid carrier*/
        ;
      end
    end
    ;
  else
    ;
    OS07W00.XXXPRCNM = "25300"; /* Module identification*/
    set OS07M002.OS07M-TF-CARR-CD2 cursor, bold;
    converseLib.validationFailed(979); /* Invalid carrier*/
    ;
  end
  ;
  if (OS07M002.OS07M-TF-WT-BRK1 == 0) /* Weight Break 1*/
    ;
    /* --- if the carrier code is blank then it is valid*/
    /* --- for the weight break to be blank. (nb. if one carrier*/
    /* --- code is made blank, all carrier codes must be blank)*/
    ;
    if (OS07M002.OS07M-TF-CARR-CD1 != " ")
      ;
      OS07W00.XXXPRCNM = "25300"; /* Module identification*/
      set OS07M002.OS07M-TF-WT-BRK1 bold;
      ;
      if (converseVar.validationMsgNum != 999)
        set OS07M002.OS07M-TF-WT-BRK1 cursor, bold;
        converseLib.validationFailed(978); /* Invalid Weight Break*/
      end
      ;
    end
  else
    ;
    if (OS07M002.OS07M-TF-WT-BRK1 <= 0
     || OS07M002.OS07M-TF-WT-BRK1 > 999999999)
      ;
      OS07W00.XXXPRCNM = "25300"; /* Module identification*/
      set OS07M002.OS07M-TF-WT-BRK1 cursor, bold;
      converseLib.validationFailed(978); /* Invalid Weight Break*/
      ;
    end
    ;
  end
  ;
  if (OS07M002.OS07M-TF-CARR-CD1 != "0007")
    ;
    if (OS07M002.OS07M-TF-CARR-CD1 == " ")
      ;
      /* --- check whether other carrier codes are blank ---*/
      OS07S-VAL-CARR-CD(); /* carrier code validation*/
      ;
    else
      ;
      set TF7REC empty;
      ;
      TF7REC.TF7CARCD = OS07M002.OS07M-TF-CARR-CD1; /* carrier code 1*/
      ;
      OS07S-VCARR002-S();
      ;
      if (SQLCA.VAGen_SQLCODE == +0)
        ;
      else
        ;
        OS07W00.XXXPRCNM = "25300"; /* Module identification*/
        set OS07M002.OS07M-TF-CARR-CD1 cursor, bold;
        converseLib.validationFailed(979); /* Invalid carrier*/
        ;
      end
    end
    ;
  else
    ;
    OS07W00.XXXPRCNM = "25300"; /* Module identification*/
    set OS07M002.OS07M-TF-CARR-CD1 cursor, bold;
    converseLib.validationFailed(979); /* Invalid carrier*/
    ;
  end
  ;
  if (OS07M002.OS07M-XDS-DIR-SHIP-CD == "Y" /* store direct flag*/
   || OS07M002.OS07M-XDS-DIR-SHIP-CD == "N")
    ;
  else
    ;
    OS07W00.XXXPRCNM = "25300"; /* Module identification*/
    set OS07M002.OS07M-XDS-DIR-SHIP-CD cursor, bold;
    converseLib.validationFailed(980); /* Must be 'y' or 'n'*/
    ;
  end
  ;
   /* SET VXVO0001 EMPTY;*/
  ;
   /* MOVE OS07M002.OS07M-XOB-BASE-OT-CD TO VXVO0001.XOBCD;/*Base OT*/
  ;
   /* MOVE OS07M002.OS07M-XOT-ORD-TYP-CD TO VXVO0001.XOTCD;/*Sys OT*/
  ;
   /* MOVE 'A' TO VXVO0001.XXXSTAT;    /*Active status*/
  ;
   /* OS07S-VXVO0001-S9;*/
  ;
   /* OS07S-VXVO0001-N9;*/
  ;
   /* IF SQLCA.SQLCODE EQ +0;*/
  ;
   /* ELSE;*/
  ;
    /* MOVE '25300' TO OS07W00.XXXPRCNM;/* Module identification*/
    /* SET OS07M002.OS07M-XOT-ORD-TYP-CD PROTECT;*/
    /* MOVE 981 TO EZEMNO;            /*not valid w/base ot*/
  ;
   /* END;*/
  ;
   /* OS07S-VXVO0001-C9;               /*Close C9 cursor*/
  ;
  if (OS07M002.OS07M-SP-SPGM-ID > " ")
    ;
    set SP1REC empty;
    ;
    SP1REC.SP1ID = OS07M002.OS07M-SP-SPGM-ID; /* Sales program*/
    ;
    OS07S-VSPGM001-S(); /* Select unique DSPGM.VSPGM001*/
    ;
    if (SQLCA.VAGen_SQLCODE == +0)
      ;
      if (SP1REC.SP1STAT == "A"
       && SP1REC.XLCCD[1] == "10"
      )
      else
        ;
        OS07W00.XXXPRCNM = "25300"; /* Module identification*/
        set OS07M002.OS07M-SP-SPGM-ID cursor, bold;
        converseLib.validationFailed(991);
        ;
      end
      ;
    else
      ;
      OS07W00.XXXPRCNM = "25300"; /* Module identification*/
      set OS07M002.OS07M-SP-SPGM-ID cursor, bold;
      converseLib.validationFailed(991);
      ;
    end
    ;
  end
  ;
  set KUNREC empty;
  ;
  KUNREC.KUCCOID = OS07M002.OS07M-CU-CO-ID; /* cu-co-id*/
  ;
  if (OS07M002.OS07M-CU-STOR-ID == "   *" /* Look for any occurance of*/
   || OS07M002.OS07M-CU-STOR-ID == "*   " /* Customer*/
   || OS07M002.OS07M-CU-STOR-ID == "    ")
    ;
    KUNREC.KUMSTRID = -1; /* cu-stor-id*/
    ;
  else
    ;
    OS07W00.OS07W-CHA = OS07M002.OS07M-CU-STOR-ID;
    OS07W00.OS07W-NUM = OS07M002.OS07M-CU-STOR-ID;
    ;
    OS07S-FMT-STOR-DEP(); /* Convert alpha to numeric*/
                                  /* Result in OS07W00.OS07W-WK-NUM*/
    KUNREC.KUMSTRID = OS07W00.OS07W-WK-NUM;
    ;
  end
  ;
  if (OS07M002.OS07M-XNX-DEPT-ID-XREF == "   *" /* LOOK FOR ANY OCCURANCE OF*/
   || OS07M002.OS07M-XNX-DEPT-ID-XREF == "*   " /* Customer*/
   || OS07M002.OS07M-XNX-DEPT-ID-XREF == "    ")
    ;
    KUNREC.XNXCD = -1; /* xnx-dept-id-xref*/
    ;
  else
    ;
    OS07W00.OS07W-CHA = OS07M002.OS07M-XNX-DEPT-ID-XREF;
    OS07W00.OS07W-NUM = OS07M002.OS07M-XNX-DEPT-ID-XREF;
    ;
    OS07S-FMT-STOR-DEP();
    ;
    KUNREC.XNXCD = OS07W00.OS07W-WK-NUM;
    ;
  end
  ;
  KUNREC.XGPCD = "**"; /* gpc code*/
  ;
  OS07S-VCUST001-SS(); /* Select DCUST.VCUST001*/
  ;
  OS07S-VCUST001-SN(); /* Fetch DCUST.VCUST001*/
  ;
  if (SQLCA.VAGen_SQLCODE == +0) /* look for existance of customer*/
    ;
  else
    ;
    set OS07M002.OS07M-CU-CO-ID cursor, bold;
    set OS07M002.OS07M-CU-STOR-ID bold;
    set OS07M002.OS07M-XNX-DEPT-ID-XREF bold;
    converseLib.validationFailed(982); /* Invalid customer*/
    ;
  end
  ;
  OS07S-VCUST001-CS(); /* Close cursor from above scan*/
  ;
  if (OS07M002.OS07M-XXX-STAT == "A"
   || OS07M002.OS07M-XXX-STAT == "I")
    ;
  else
    ;
    OS07W00.XXXPRCNM = "25300"; /* Module identification*/
    set OS07M002.OS07M-XXX-STAT cursor, bold;
    converseLib.validationFailed(983);
  end
  ;
  if (OS07M002.OS07M-XWH-WHSE-CD in XWHTBL.XWHCD)
    ;
  else
    ;
    OS07W00.XXXPRCNM = "25300"; /* Module identification*/
    set OS07M002.OS07M-XWH-WHSE-CD cursor, bold;
    converseLib.validationFailed(984);
    ;
  end
  ;
end // end OS07-25300

// CHG function edit routine
Function OS07-25400()
  /* ---------------------------------------------------------------------*/
  /* CHG Function Edit Routine*/
  /* ---------------------------------------------------------------------*/
  ;
  if (OS07M002.OS07M-TF-CARR-CD3 != "0007")
    ;
    /* --- either all three carrier codes should be blank or all*/
    /* --- three should contain values*/
    ;
    if (OS07M002.OS07M-TF-CARR-CD3 == " ")
      ;
      /* --- check whether other carrier codes are blank ---*/
      OS07S-VAL-CARR-CD(); /* carrier code validation*/
      ;
    else
      ;
      set TF7REC empty;
      ;
      TF7REC.TF7CARCD = OS07M002.OS07M-TF-CARR-CD3; /* carrier code 3*/
      ;
      OS07S-VCARR002-S();
      ;
      if (SQLCA.VAGen_SQLCODE == +0)
        ;
      else
        ;
        OS07W00.XXXPRCNM = "25400"; /* Module identification*/
        set OS07M002.OS07M-TF-CARR-CD3 cursor, bold;
        converseLib.validationFailed(979); /* Invalid carrier*/
        ;
      end
    end
    ;
  else
    ;
    OS07W00.XXXPRCNM = "25400"; /* Module identification*/
    set OS07M002.OS07M-TF-CARR-CD3 cursor, bold;
    converseLib.validationFailed(979); /* Invalid carrier*/
    ;
  end
  ;
  if (OS07M002.OS07M-TF-WT-BRK2 == 0) /* Weight Break 2*/
    ;
    /* --- if the carrier code is blank then it is valid*/
    /* --- for the weight break to be blank. (nb. if one carrier*/
    /* --- code is made blank, all carrier codes must be blank)*/
    ;
    if (OS07M002.OS07M-TF-CARR-CD2 != " ")
      ;
      OS07W00.XXXPRCNM = "25400"; /* Module identification*/
      set OS07M002.OS07M-TF-WT-BRK2 cursor, bold;
      converseLib.validationFailed(978); /* Invalid Weight Break*/
      ;
    end
  else
    ;
    if (OS07M002.OS07M-TF-WT-BRK2 <= 0
     || OS07M002.OS07M-TF-WT-BRK2 > 999999999)
      ;
      OS07W00.XXXPRCNM = "25400"; /* Module identification*/
      set OS07M002.OS07M-TF-WT-BRK2 cursor, bold;
      converseLib.validationFailed(978); /* Invalid Weight Break*/
      ;
    end
    ;
  end
  ;
  if (OS07M002.OS07M-TF-CARR-CD2 != "0007")
    ;
    if (OS07M002.OS07M-TF-CARR-CD2 == " ")
      ;
      /* --- check whether other carrier codes are blank ---*/
      OS07S-VAL-CARR-CD(); /* carrier code validation*/
    else
      set TF7REC empty;
      ;
      TF7REC.TF7CARCD = OS07M002.OS07M-TF-CARR-CD2; /* carrier code 2*/
      ;
      OS07S-VCARR002-S();
      ;
      if (SQLCA.VAGen_SQLCODE == +0)
        ;
      else
        ;
        OS07W00.XXXPRCNM = "25400"; /* Module identification*/
        set OS07M002.OS07M-TF-CARR-CD2 cursor, bold;
        converseLib.validationFailed(979); /* Invalid carrier*/
        ;
      end
    end
    ;
  else
    ;
    OS07W00.XXXPRCNM = "25400"; /* Module identification*/
    set OS07M002.OS07M-TF-CARR-CD2 cursor, bold;
    converseLib.validationFailed(979); /* Invalid carrier*/
    ;
  end
  ;
  if (OS07M002.OS07M-TF-WT-BRK1 == 0) /* Weight Break 1*/
    ;
    /* --- if the carrier code is blank then it is valid*/
    /* --- for the weight break to be blank. (nb. if one carrier*/
    /* --- code is made blank, all carrier codes must be blank)*/
    ;
    if (OS07M002.OS07M-TF-CARR-CD1 != " ")
      ;
      OS07W00.XXXPRCNM = "25400"; /* Module identification*/
      set OS07M002.OS07M-TF-WT-BRK1 bold;
      ;
      if (converseVar.validationMsgNum != 999)
        set OS07M002.OS07M-TF-WT-BRK1 cursor, bold;
        converseLib.validationFailed(978); /* Invalid Weight Break*/
      end
      ;
    end
  else
    ;
    if (OS07M002.OS07M-TF-WT-BRK1 <= 0
     || OS07M002.OS07M-TF-WT-BRK1 > 999999999)
      ;
      OS07W00.XXXPRCNM = "25400"; /* Module identification*/
      set OS07M002.OS07M-TF-WT-BRK1 cursor, bold;
      converseLib.validationFailed(978); /* Invalid Weight Break*/
      ;
    end
    ;
  end
  ;
  if (OS07M002.OS07M-TF-CARR-CD1 != "0007")
    ;
    if (OS07M002.OS07M-TF-CARR-CD1 == " ")
      ;
      /* --- check whether other carrier codes are blank ---*/
      OS07S-VAL-CARR-CD(); /* carrier code validation*/
    else
      set TF7REC empty;
      ;
      TF7REC.TF7CARCD = OS07M002.OS07M-TF-CARR-CD1; /* carrier code 1*/
      ;
      OS07S-VCARR002-S();
      ;
      if (SQLCA.VAGen_SQLCODE == +0)
        ;
      else
        ;
        OS07W00.XXXPRCNM = "25400"; /* Module identification*/
        set OS07M002.OS07M-TF-CARR-CD1 cursor, bold;
        converseLib.validationFailed(979); /* Invalid carrier*/
        ;
      end
    end
    ;
  else
    ;
    OS07W00.XXXPRCNM = "25400"; /* Module identification*/
    set OS07M002.OS07M-TF-CARR-CD1 cursor, bold;
    converseLib.validationFailed(979); /* Invalid carrier*/
    ;
  end
  ;
  if (OS07M002.OS07M-XDS-DIR-SHIP-CD == "Y" /* store direct flag*/
   || OS07M002.OS07M-XDS-DIR-SHIP-CD == "N")
    ;
  else
    ;
    OS07W00.XXXPRCNM = "25400"; /* Module identification*/
    set OS07M002.OS07M-XDS-DIR-SHIP-CD cursor, bold;
    converseLib.validationFailed(980); /* Must be 'y' or 'n'*/
    ;
  end
  ;
   /* SET VXVO0001 EMPTY;*/
  ;
   /* MOVE OS07M002.OS07M-XOB-BASE-OT-CD TO VXVO0001.XOBCD;/*Base OT*/
  ;
   /* MOVE OS07M002.OS07M-XOT-ORD-TYP-CD TO VXVO0001.XOTCD;/*Sys OT*/
  ;
   /* MOVE 'A' TO VXVO0001.XXXSTAT;    /*Active status*/
  ;
   /* OS07S-VXVO0001-S9;*/
  ;
   /* OS07S-VXVO0001-N9;*/
  ;
   /* IF SQLCA.SQLCODE EQ +0;*/
  ;
   /* ELSE;*/
  ;
    /* MOVE '25400' TO OS07W00.XXXPRCNM;/* Module identification*/
    /* SET OS07M002.OS07M-XOT-ORD-TYP-CD CURSOR,BRIGHT;*/
    /* MOVE 981 TO EZEMNO;            /*not valid w/base ot*/
    /* ;*/
   /* END;*/
  ;
   /* OS07S-VXVO0001-C9;               /*Close C9 cursor*/
  ;
  if (OS07M002.OS07M-SP-SPGM-ID > " ")
    ;
    set SP1REC empty;
    ;
    SP1REC.SP1ID = OS07M002.OS07M-SP-SPGM-ID; /* Sales program*/
    ;
    OS07S-VSPGM001-S(); /* Select unique DSPGM.VSPGM001*/
    ;
    if (SQLCA.VAGen_SQLCODE == +0)
      ;
      if (SP1REC.SP1STAT == "A"
       && SP1REC.XLCCD[1] == "10"
      )
      else
        ;
        OS07W00.XXXPRCNM = "25400"; /* Module identification*/
        set OS07M002.OS07M-SP-SPGM-ID cursor, bold;
        converseLib.validationFailed(991);
        ;
      end
      ;
    else
      ;
      OS07W00.XXXPRCNM = "25400"; /* Module identification*/
      set OS07M002.OS07M-SP-SPGM-ID cursor, bold;
      converseLib.validationFailed(991);
      ;
    end
    ;
  end
  ;
  if (OS07M002.OS07M-XXX-STAT == "A"
   || OS07M002.OS07M-XXX-STAT == "I")
    ;
  else
    ;
    OS07W00.XXXPRCNM = "25400"; /* Module identification*/
    set OS07M002.OS07M-XXX-STAT cursor, bold;
    converseLib.validationFailed(983);
  end
  ;
end // end OS07-25400

// Process valid input request
Function OS07-26000()
  ;
  /* ------------------------------------------------------------------*/
  /* Process PF Keys*/
  /* ------------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf13
   || converseVar.eventKey is pf15)
    ;
    OS07W00.OS07W-SWD = "3"; /* Map to be displayed switch*/
    OS07W00.OS07W-SWF = "Y"; /* yes format map*/
    OS07W00.OS07W-SWR = "Y"; /* Obtain Data*/
    OS07W00.XXXTSPAG = 0; /* Reset page*/
    ;
    if (converseVar.eventKey is pf13) /* pf13 - Display/Change Product*/
      ;
      OS07W00.OS07W-SFN = "C"; /* 'CHG' function*/
      ;
    else
      ;
      if (converseVar.eventKey is pf15) /* pf15 - Add Product*/
        ;
        OS07W00.OS07W-SFN = "A"; /* 'ADD' function*/
        ;
      end
      ;
    end
    ;
    return;
    ;
  end
  ;
  /* ------------------------------------------------------------------*/
  /* Process ADD/CHG Functions*/
  /* ------------------------------------------------------------------*/
  ;
  if (OS07W00.OS07W-SFN == "A"  /* ADD Function*/
   /* Did anything modifiable change???*/
   || (OS07W00.OS07W-SFN == "C" /* CHG Function*/
   && OS07M002.OS07M-XXX-STAT != OS07W02.OS07W-XXX-STAT
   || OS07M002.OS07M-SP-SPGM-ID != OS07W02.OS07W-SP-SPGM-ID
   || OS07M002.OS07M-XOT-ORD-TYP-CD != OS07W02.OS07W-XOT-ORD-TYP-CD
   /* OR OS07M002.OS07M-XHD-HNDL-CD1 NE OS07W02.OS07W-XHD-HNDL-CD1*/
   /* OR OS07M002.OS07M-XHD-HNDL-CD2 NE OS07W02.OS07W-XHD-HNDL-CD2*/
   /* OR OS07M002.OS07M-XHD-HNDL-CD3 NE OS07W02.OS07W-XHD-HNDL-CD3*/
   /* OR OS07M002.OS07M-XHD-HNDL-CD4 NE OS07W02.OS07W-XHD-HNDL-CD4*/
   || OS07M002.OS07M-XDS-DIR-SHIP-CD != OS07W02.OS07W-XDS-DIR-SHIP-CD
   || OS07M002.OS07M-TF-CARR-CD1 != OS07W02.OS07W-TF-CARR-CD1
   || OS07M002.OS07M-TF-WT-BRK1 != OS07W02.OS07W-TF-WT-BRK1
   || OS07M002.OS07M-TF-CARR-CD2 != OS07W02.OS07W-TF-CARR-CD2
   || OS07M002.OS07M-TF-WT-BRK2 != OS07W02.OS07W-TF-WT-BRK2
   || OS07M002.OS07M-TF-CARR-CD3 != OS07W02.OS07W-TF-CARR-CD3
   || OS07M002.OS07M-PK-BOL-STMP-TXT != OS07W02.OS07W-PK-BOL-STMP-TXT))
    ;
    set VRPLCU01 empty;
    ;
    VRPLCU01.XWH-WHSE-CD = OS07M002.OS07M-XWH-WHSE-CD;
    VRPLCU01.XXX-STAT = OS07M002.OS07M-XXX-STAT;
    VRPLCU01.CU-CO-ID = OS07M002.OS07M-CU-CO-ID;
    ;
    if (OS07M002.OS07M-CU-STOR-ID == "*   "
     || OS07M002.OS07M-CU-STOR-ID == "   *"
     || OS07M002.OS07M-CU-STOR-ID == "    ")
      ;
      VRPLCU01.CU-STOR-ID = -1;
      ;
    else
      ;
      OS07W00.OS07W-CHA = OS07M002.OS07M-CU-STOR-ID;
      OS07W00.OS07W-NUM = OS07M002.OS07M-CU-STOR-ID;
      ;
      OS07S-FMT-STOR-DEP();
      ;
      VRPLCU01.CU-STOR-ID = OS07W00.OS07W-WK-NUM;
      ;
    end
    ;
    if (OS07M002.OS07M-XNX-DEPT-ID-XREF == "*   "
     || OS07M002.OS07M-XNX-DEPT-ID-XREF == "   *"
     || OS07M002.OS07M-XNX-DEPT-ID-XREF == "    ")
      ;
      VRPLCU01.XNX-DEPT-ID-XREF = -1;
      ;
    else
      ;
      OS07W00.OS07W-CHA = OS07M002.OS07M-XNX-DEPT-ID-XREF;
      OS07W00.OS07W-NUM = OS07M002.OS07M-XNX-DEPT-ID-XREF;
      ;
      OS07S-FMT-STOR-DEP();
      ;
      VRPLCU01.XNX-DEPT-ID-XREF = OS07W00.OS07W-WK-NUM;
      ;
    end
    ;
    VRPLCU01.SP-SPGM-ID = OS07M002.OS07M-SP-SPGM-ID;
    VRPLCU01.XOB-BASE-OT-CD = OS07M002.OS07M-XOB-BASE-OT-CD;
    VRPLCU01.XOT-ORD-TYP-CD = OS07M002.OS07M-XOT-ORD-TYP-CD;
  /* MOVE OS07M002.OS07M-XHD-HNDL-CD1 TO VRPLCU01.XHD-HNDL-CD1;*/
  /* MOVE OS07M002.OS07M-XHD-HNDL-CD2 TO VRPLCU01.XHD-HNDL-CD2;*/
  /* MOVE OS07M002.OS07M-XHD-HNDL-CD3 TO VRPLCU01.XHD-HNDL-CD3;*/
  /* MOVE OS07M002.OS07M-XHD-HNDL-CD4 TO VRPLCU01.XHD-HNDL-CD4;*/
    VRPLCU01.XDS-DIR-SHIP-CD = OS07M002.OS07M-XDS-DIR-SHIP-CD;
    VRPLCU01.TF-CARR-CD1 = OS07M002.OS07M-TF-CARR-CD1;
    VRPLCU01.TF-CARR-CD2 = OS07M002.OS07M-TF-CARR-CD2;
    VRPLCU01.TF-CARR-CD3 = OS07M002.OS07M-TF-CARR-CD3;
    VRPLCU01.TF-WT-BRK1 = OS07M002.OS07M-TF-WT-BRK1;
    VRPLCU01.TF-WT-BRK2 = OS07M002.OS07M-TF-WT-BRK2;
    VRPLCU01.PK-BOL-STMP-TXT = OS07M002.OS07M-PK-BOL-STMP-TXT;
    ;
    XX0XS01(); /* Get Date/Time*/
    ;
    VRPLCU01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
    VRPLCU01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;
    VRPLCU01.ZZ-CHNG-USER-ID = COMMAREA.CAUSERID;
    ;
    if (OS07W00.OS07W-SFN == "A") /* ADD Function*/
      ;
      VRPLCU01.ZZ-SETUP-USER-ID = COMMAREA.CAUSERID;
      ;
      VRPLCU01.ZZ-SDT = XX0XW01.XX0XWDAT;
      ;
      OS07S-VRPLCU01-A(); /* Insert row DORDER.VRPLCU01*/
      ;
    else
      ;
      if (OS07W00.OS07W-SFN == "C") /* CHG Function*/
        ;
        VRPLCU01.ZZ-CHNG-CNT = OS07W00.OS07W-ZZ-CHNG-CNT;
        ;
        OS07S-VRPLCU01-U(); /* Update row DORDER.VRPLCU01*/
        ;
        if (SQLCA.VAGen_SQLCODE == +0)
          ;
          OS07W00.OS07W-ZZ-CHNG-CNT = OS07W00.OS07W-ZZ-CHNG-CNT + 1;
          ;
        end
        ;
      end
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------------*/
  /* Process DEL Functions*/
  /* ------------------------------------------------------------------*/
  ;
  /* ------------------------------------------------------------------*/
  /* First, delete all rows from DORDER.VRPLCI01 for the*/
  /* Warehouse, Customer, Store, Dept.*/
  /* ------------------------------------------------------------------*/
  ;
  if (OS07W00.OS07W-SFN == "D") /* DEL Function*/
    ;
    set VRPLCI01 empty;
    ;
    VRPLCI01.XWH-WHSE-CD = OS07W02.OS07W-XWH-WHSE-CD;
    ;
    VRPLCI01.CU-CO-ID = OS07W02.OS07W-CU-CO-ID;
    ;
    VRPLCI01.CU-STOR-ID = OS07W02.OS07W-CU-STOR-ID;
    ;
    VRPLCI01.XNX-DEPT-ID-XREF = OS07W02.OS07W-XNX-DEPT-ID-XREF;
    ;
    OS07S-VRPLCI01-S2(); /* Selects cursor for all rows*/
    ;
    if (SQLCA.VAGen_SQLCODE == +100)
      ;
      OS07W00.OS07W-VRPLCI01-EOF = "Y";
      ;
    else
      ;
      OS07W00.OS07W-VRPLCI01-EOF = "N";
      ;
    end
    ;
    while (OS07W00.OS07W-VRPLCI01-EOF != "Y")
      ;
      OS07S-VRPLCI01-N2(); /* Fetch row DORDER.VRPLCI01*/
      ;
      OS07S-VRPLCI01-D(); /* Delete row DORDER.VRPLCI01*/
      ;
      if (SQLCA.VAGen_SQLCODE == +100)
        ;
        OS07W00.OS07W-VRPLCI01-EOF = "Y";
        ;
      end
      ;
    end
    ;
    OS07S-VRPLCI01-C2(); /* Close S2 Cursor*/
    ;
  /* ------------------------------------------------------------------*/
  /* Once all product is deleted for the Warehouse, Customer, Store*/
  /* Dept., delete the customer row from DORDER.VRPLCU01*/
  /* ------------------------------------------------------------------*/
    ;
    set VRPLCU01 empty;
    ;
    VRPLCU01.XWH-WHSE-CD = OS07W02.OS07W-XWH-WHSE-CD;
    ;
    VRPLCU01.CU-CO-ID = OS07W02.OS07W-CU-CO-ID;
    ;
    VRPLCU01.CU-STOR-ID = OS07W02.OS07W-CU-STOR-ID;
    ;
    VRPLCU01.XNX-DEPT-ID-XREF = OS07W02.OS07W-XNX-DEPT-ID-XREF;
    ;
    OS07S-VRPLCU01-D(); /* Deletes unique row DORDER.VRPLCU01*/
    ;
  end
  ;
  if (SQLCA.VAGen_SQLCODE == +0
   && converseVar.validationMsgNum == 0)
    ;
    if (OS07W00.OS07W-SFN == "A")
      ;
      OS07W00.OS07W-SWD = "3"; /* Display Screen 3*/
      ;
      OS07W00.OS07W-SWR = "Y"; /* Request Data*/
      ;
      OS07W00.OS07W-SWF = "Y"; /* Format Screen*/
      ;
      OS07W00.XXXTSPAG = 0;
      ;
    else
      ;
      if (OS07W00.OS07W-SFN == "C")
        ;
        OS07W00.OS07W-SWD = "2"; /* Display Screen 2*/
        ;
        OS07W00.OS07W-SWR = "Y"; /* Request Data*/
        ;
        OS07W00.OS07W-SWF = "Y"; /* Format Screen*/
        ;
      else
        ;
        if (OS07W00.OS07W-SFN == "D")
          ;
          OS07W00.OS07W-SWD = "1"; /* Display Screen 1*/
          ;
          OS07W00.OS07W-SWR = "Y"; /* Request Data*/
          ;
          OS07W00.OS07W-SWF = "Y"; /* Format Screen*/
          ;
        end
        ;
      end
      ;
    end
    ;
  end
  ;
end // end OS07-26000

// Main process to display a map
Function OS07-30000()
  /* ------------------------------------------------------------*/
  /* This is the main process used to display a map.  Processing*/
  /* always returns to the top of this process and falls through*/
  /* subordinate processes until an error is found or a valid*/
  /* request is processed.  Processing sequence is as follows:*/
  /*  */
  /* 1) Format the map output area and display the map.*/
  /* 2) Check the attention identifier used to respond.*/
  /* 3) Reset highlighted fields to normal intensity.*/
  /* 4) Verify the data that was entered.*/
  /* 5) Process a valid input request.*/
  /*  */
  /* In all subordinate processes, "EZEFLO" is used to exit to*/
  /* redisplay the map when an error is found.  This is done to*/
  /* minimize the coding effort required to skip subsequent*/
  /* processing under error conditions.*/
  /* ------------------------------------------------------------*/
  ;
  OS07-31000(); /* Obtain the data to display*/
  ;
  OS07-32000(); /* Format and display the map*/
  ;
  OS07-33000(); /* Check attention identifier*/
  ;
  OS07-34000(); /* Reset fields to normal intensity*/
  ;
  OS07-35000(); /* Verify the entered data*/
  ;
  OS07-36000(); /* Process valid input request*/
  ;
  ;
end // end OS07-30000

// Obtain the data to display
Function OS07-31000()
  /* ------------------------------------------------------------*/
  /* If data was not requested or an error was found, return to*/
  /* the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (OS07W00.OS07W-SWR != "Y" /* Data was not requested*/
   || converseVar.validationMsgNum != 0) /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Establish the temporary storage queue page length.*/
  /* ------------------------------------------------------------*/
  ;
  OS07W00.XXXTSLEN = 844; /* temp storage page length*/
  ;
  /* ------------------------------------------------------------*/
  /* If no message to display, reset the page number to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (OS07W00.XXXTSPAG == 0) /* no pages established*/
    OS07W00.XXXTSPAG = 1; /* Page number to display*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* Purge any pages from temporary storage and save key fields.*/
  /* ------------------------------------------------------------*/
  ;
  OS07-31100(); /* Purge any temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* Select and open the cursor for the set to be formatted.*/
  /* ------------------------------------------------------------*/
  ;
  OS07-31200(); /* Select set and open cursor*/
  ;
  /* ------------------------------------------------------------*/
  /* Fetch and format the data into pages until end of cursor.*/
  /* ------------------------------------------------------------*/
  ;
  OS07W00.OS07W-IXM = 1; /* Display line index*/
  OS07W00.OS07W-SWC = "N"; /* End of cursor switch*/
  ;
  while (OS07W00.OS07W-SWC == "N") /* Until end of cursor*/
    ;
    OS07-31400(); /* Fetch next row in the cursor*/
    ;
    /* ------------------------------------------------------------*/
    /* If not end of cursor, save the data in display storage.*/
    /* ------------------------------------------------------------*/
    ;
    if (OS07W00.OS07W-SWC == "N") /* Not end of cursor*/
      OS07-31500(); /* Save data in display storage*/
    end
    ;
    /* ------------------------------------------------------------*/
    /* If the page is full, add the page to the storage queue.*/
    /* ------------------------------------------------------------*/
    ;
    if (OS07W00.OS07W-IXM > 10) /* Page is full*/
      ;
      OS07-31600(); /* Add page to temporary storage*/
      ;
      OS07W00.OS07W-IXM = 1; /* Display line index*/
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Add any partially formatted last page to the queue.*/
  /* ------------------------------------------------------------*/
  ;
  if (OS07W00.OS07W-IXM > 1) /* Page was formatted*/
    ;
    OS07-31600(); /* Add page to temporary storage*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Close the cursor for the selected set.*/
  /* ------------------------------------------------------------*/
  ;
  OS07-31700(); /* Close the selected set cursor*/
  ;
  /* ------------------------------------------------------------*/
  /* If no pages were formatted, indicate no data to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (OS07W00.TA5TSQIX == 0) /* No pages formatted*/
    ;
    OS07W00.XXXPRCNM = "31000"; /* Module identification*/
    OS07W00.OS07W-SWD = "2"; /* Screen Display*/
    OS07W00.OS07W-SWR = "Y"; /* Request data*/
    OS07W00.OS07W-SWF = "N"; /* Format screen*/
    OS07W00.XXXMSGNO = 992; /* No data was found to display*/
    ;
    exit stack; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Indicate that the request for data is complete.*/
  /* ------------------------------------------------------------*/
  ;
  OS07W00.OS07W-SWR = "N"; /* Request for data switch*/
  ;
  ;
end // end OS07-31000

// Purge any temporary storage
Function OS07-31100()
  /* ------------------------------------------------------------*/
  /* Initialize the storage areas and indicators to be used.*/
  /* ------------------------------------------------------------*/
  ;
  set OS07W03 empty; /* M003 display storage*/
  ;
  OS07W00.OS07W-SWU = "N"; /* Storage update switch*/
  ;
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  OS07W00.TA5TSQIX = 0; /* Highest page number*/
  ;
  /* ------------------------------------------------------------*/
  /* Purge any temporary storage for this application.*/
  /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (OS07W03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  OS07W00.XXXPRCNM = "31100"; /* Module identification*/
  converseLib.validationFailed(973); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "OS07-31100";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = OS07W00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M003"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end OS07-31100

// Select set and open cursor
Function OS07-31200()
  /* ------------------------------------------------------------*/
  /* Select the requested set of rows from the table.*/
  /* ------------------------------------------------------------*/
  ;
  set VRPLCI01 empty; /* Clear row storage area*/
  set VRPLIT02 empty; /* Clear row storage area*/
  ;
  if (OS07W00.OS07W-SFN == "A") /* ADD Function*/
    ;
    OS07S-VRPLIT02-S1(); /* Select data from DORDER.VRPLIT02*/
    ;
  else
    ;
    VRPLCI01.XWH-WHSE-CD = OS07M002.OS07M-XWH-WHSE-CD;
    VRPLCI01.CU-CO-ID = OS07M002.OS07M-CU-CO-ID;
    ;
    if (OS07M002.OS07M-CU-STOR-ID == "*   "
     || OS07M002.OS07M-CU-STOR-ID == "   *"
     || OS07M002.OS07M-CU-STOR-ID == "    ")
      ;
      VRPLCI01.CU-STOR-ID = -1;
      ;
    else
      ;
      OS07W00.OS07W-CHA = OS07M002.OS07M-CU-STOR-ID;
      OS07W00.OS07W-NUM = OS07M002.OS07M-CU-STOR-ID;
      ;
      OS07S-FMT-STOR-DEP();
      ;
      VRPLCI01.CU-STOR-ID = OS07W00.OS07W-WK-NUM;
      ;
    end
    ;
    if (OS07M002.OS07M-XNX-DEPT-ID-XREF == "*   "
     || OS07M002.OS07M-XNX-DEPT-ID-XREF == "   *"
     || OS07M002.OS07M-XNX-DEPT-ID-XREF == "    ")
      ;
      VRPLCI01.XNX-DEPT-ID-XREF = -1;
      ;
    else
      ;
      OS07W00.OS07W-CHA = OS07M002.OS07M-XNX-DEPT-ID-XREF;
      OS07W00.OS07W-NUM = OS07M002.OS07M-XNX-DEPT-ID-XREF;
      ;
      OS07S-FMT-STOR-DEP();
      ;
      VRPLCI01.XNX-DEPT-ID-XREF = OS07W00.OS07W-WK-NUM;
      ;
    end
    ;
    OS07S-VRPLCI01-S2(); /* Select Scan 2 DORDER.VRPLCI01*/
    ;
  end
  ;
end // end OS07-31200

// Fetch next row in the cursor
Function OS07-31400()
  ;
  /* -------------------------------------------------------------------*/
  /* Fetch next row depending on function code*/
  /* -------------------------------------------------------------------*/
  ;
  if (OS07W00.OS07W-SFN == "A") /* ADD Function*/
    ;
    OS07S-VRPLIT02-N1(); /* Fetch DORDER.VRPLIT02*/
    ;
  else
    ;
    OS07S-VRPLCI01-N2(); /* Fetch DORDER.VRPLCI01*/
    ;
  end
  ;
  if (SQLCA.VAGen_SQLCODE == +100)
    OS07W00.OS07W-SWC = "Y";
  end
  ;
end // end OS07-31400

// Save data in display storage
Function OS07-31500()
  ;
  /* ------------------------------------------------------------*/
  /* Save the data from the table row in display storage.*/
  /* ------------------------------------------------------------*/
  ;
  if (OS07W00.OS07W-SFN == "A" /* ADD Product, DORDER.VRPLIT02*/
   && VRPLIT02.XWH-WHSE-CD == OS07M002.OS07M-XWH-WHSE-CD
   && VRPLIT02.SYS-PROC-CD != "O")
    ;
    OS07W03.OS07W-XGP-GPC-CD[OS07W-IXM] = VRPLIT02.XGP-GPC-CD;
    ;
    OS07W03.OS07W-SY-STY-NBR[OS07W-IXM] = VRPLIT02.SY-STY-NBR;
    ;
    OS07W03.OS07W-SY-COLR-CD-ID[OS07W-IXM] = VRPLIT02.SY-COLR-CD-ID;
    ;
    OS07W03.OS07W-XDM-DIM-CD[OS07W-IXM] = VRPLIT02.XDM-DIM-CD;
    ;
    OS07W03.OS07W-XQA-QUAL-CD[OS07W-IXM] = VRPLIT02.XQA-QUAL-CD;
    ;
    OS07W03.OS07W-PC-CU-IN-SEG-CD[OS07W-IXM] = VRPLIT02.PC-CU-IN-SEG-CD;
    ;
    OS07W03.OS07W-XOW-OWN-GRP-CD[OS07W-IXM] = VRPLIT02.XOW-OWN-GRP-CD;
    OS07W03.OS07W-XUM-UOM-CD[OS07W-IXM] = VRPLIT02.XUM-UOM-CD;
    ;
    OS07W03.OS07W-XXX-STAT[OS07W-IXM] = VRPLIT02.XXX-STAT;
    ;
    OS07W03.OS07W-ZZ-SETUP-USER-ID[OS07W-IXM] = VRPLIT02.ZZ-SETUP-USER-ID;
    ;
    OS07W03.OS07W-ZZ-CHNG-USER-ID[OS07W-IXM] = VRPLIT02.ZZ-CHNG-USER-ID;
    ;
    OS07W03.OS07W-ZZ-SDT[OS07W-IXM] = VRPLIT02.ZZ-SDT;
    ;
    OS07W03.OS07W-ZZ-CHNG-DT[OS07W-IXM] = VRPLIT02.ZZ-CHNG-DT;
    ;
    OS07W03.OS07W-ZZ-CHNG-HHMM[OS07W-IXM] = VRPLIT02.ZZ-CHNG-HHMM;
    ;
    OS07W03.OS07W-ZZ-CHNG-CNT[OS07W-IXM] = VRPLIT02.ZZ-CHNG-CNT;
    ;
    OS07W00.OS07W-IXM = OS07W00.OS07W-IXM + 1; /* Increment line index*/
    ;
  else
    ;
    if (OS07W00.OS07W-SFN == "C") /* CHG Product, Data From*/
                                   /* DORDER.VRPLCI01*/
      ;
      OS07W03.OS07W-XGP-GPC-CD[OS07W-IXM] = VRPLCI01.XGP-GPC-CD;
      ;
      OS07W03.OS07W-SY-STY-NBR[OS07W-IXM] = VRPLCI01.SY-STY-NBR;
      ;
      OS07W03.OS07W-SY-COLR-CD-ID[OS07W-IXM] = VRPLCI01.SY-COLR-CD-ID;
      OS07W03.OS07W-XDM-DIM-CD[OS07W-IXM] = VRPLCI01.XDM-DIM-CD;
      ;
      OS07W03.OS07W-XQA-QUAL-CD[OS07W-IXM] = VRPLCI01.XQA-QUAL-CD;
      ;
      OS07W03.OS07W-PC-CU-IN-SEG-CD[OS07W-IXM] = VRPLCI01.PC-CU-IN-SEG-CD;
      ;
      OS07W03.OS07W-XOW-OWN-GRP-CD[OS07W-IXM] = VRPLCI01.XOW-OWN-GRP-CD;
      ;
      OS07W03.OS07W-XUM-UOM-CD[OS07W-IXM] = VRPLCI01.XUM-UOM-CD;
      ;
      OS07W03.OS07W-OP-BULK-ORD-ID[OS07W-IXM] = VRPLCI01.OP-BULK-ORD-ID;
      ;
      OS07W03.OS07W-SL-MAX-REPL-QTY[OS07W-IXM] = VRPLCI01.SL-MAX-REPL-QTY;
      ;
      OS07W03.OS07W-XXX-STAT[OS07W-IXM] = VRPLCI01.XXX-STAT;
      ;
      OS07W03.OS07W-ZZ-SETUP-USER-ID[OS07W-IXM] = VRPLCI01.ZZ-SETUP-USER-ID;
      ;
      OS07W03.OS07W-ZZ-CHNG-USER-ID[OS07W-IXM] = VRPLCI01.ZZ-CHNG-USER-ID;
      ;
      OS07W03.OS07W-ZZ-SDT[OS07W-IXM] = VRPLCI01.ZZ-SDT;
      ;
      OS07W03.OS07W-ZZ-CHNG-DT[OS07W-IXM] = VRPLCI01.ZZ-CHNG-DT;
      ;
      OS07W03.OS07W-ZZ-CHNG-HHMM[OS07W-IXM] = VRPLCI01.ZZ-CHNG-HHMM;
      ;
      OS07W03.OS07W-ZZ-CHNG-CNT[OS07W-IXM] = VRPLCI01.ZZ-CHNG-CNT;
      ;
      OS07W00.OS07W-IXM = OS07W00.OS07W-IXM + 1; /* Increment line index*/
      ;
    end
    ;
  end
  ;
end // end OS07-31500

// Add page to temporary storage
Function OS07-31600()
  /* ------------------------------------------------------------*/
  /* Add the next page to temporary storage.*/
  /* ------------------------------------------------------------*/
  ;
  OS07W03.XXXTSLEN = OS07W00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (OS07W03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, initialize the storage area and indicators*/
  /* to be used.  Return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    set OS07W03 empty; /* M003 display storage*/
    ;
    OS07W00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  OS07W00.XXXPRCNM = "31600"; /* Module identification*/
  converseLib.validationFailed(973); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "OS07-31600";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = OS07W00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M003"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end OS07-31600

// Close selected set cursor
Function OS07-31700()
  ;
  /* ---------------------------------------------------------------*/
  /* Close selected cursor*/
  /* ---------------------------------------------------------------*/
  ;
  if (OS07W00.OS07W-SFN == "A")
    ;
    OS07S-VRPLIT02-C1();
    ;
  else
    ;
    OS07S-VRPLCI01-C2();
    ;
  end
  ;
end // end OS07-31700

// Format and converse the map
Function OS07-32000()
  /* ------------------------------------------------------------*/
  /* If an error was found, save the error message number.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Error was found*/
    OS07W00.XXXMSGNO = converseVar.validationMsgNum; /* Message number*/
  end
  ;
  /* ------------------------------------------------------------*/
  /* If obtain data failed or no error, format data to display.*/
  /* ------------------------------------------------------------*/
  ;
  if (OS07W00.OS07W-SWR == "Y" /* Obtain data failed*/
   || converseVar.validationMsgNum == 0) /* or no error found*/
    ;
    if (OS07W00.OS07W-SWF == "Y") /* Map must be formatted*/
      OS07-32100(); /* Format the data on the map*/
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Format the current date and any FAST PATH information.*/
  /* ------------------------------------------------------------*/
  ;
  OS07M003.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  OS07M003.CATOAP = COMMAREA.CATOAP; /* TO application*/
  OS07M003.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
  /* ------------------------------------------------------------*/
  /* If a message to display, indicate sound audible alarm.*/
  /* ------------------------------------------------------------*/
  ;
  if (OS07W00.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    if (OS07W00.XXXMSGNO != 0) /* Message to display*/
      ;
      if (OS07W00.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(OS07W00.XXXMSGNO);
      end /* Message number*/
    else
      OS07M003.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    OS07M003.XXXPRCNM = OS07W00.XXXPRCNM; /* Module identification*/
    ;
    set OS07M003 alarm; /* Indicate sound alarm*/
    ;
  end
  ;
  converse OS07M003 ;
  ;
  /* ------------------------------------------------------------*/
  /* Clear the message fields and save FAST PATH information.*/
  /* ------------------------------------------------------------*/
  ;
  OS07W00.XXXPRCNM = " "; /* Module identification*/
  OS07W00.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = OS07M003.CATOAP; /* TO application*/
  COMMAREA.CAITEM = OS07M003.CAITEM; /* Application data*/
  ;
end // end OS07-32000

// Format the display data
Function OS07-32100()
  /* ------------------------------------------------------------*/
  /* Clear the fields in the map storage area to be formatted.*/
  /* ------------------------------------------------------------*/
  ;
  set OS07M003 initial; /* M003 input/output area*/
  ;
  OS07W00.OS07W-SWF = "N"; /* Format the map switch*/
  ;
  if (OS07W00.OS07W-SFN == "A")
    ;
    OS07M003.OS07M-FUNCTION = "PRODUCT SELECTION";
    ;
  else
    ;
    OS07M003.OS07M-FUNCTION = "ASSIGNED PRODUCT";
    ;
  end
  ;
  OS07M003.XXXTSPAG = OS07W00.XXXTSPAG; /* Current page*/
  ;
  OS07M003.TA5TSQIX = OS07W00.TA5TSQIX; /* Highest page*/
  ;
  OS07M003.OS07M-XWH-WHSE-CD = OS07M002.OS07M-XWH-WHSE-CD;
  ;
  OS07M003.OS07M-CU-CO-ID = OS07M002.OS07M-CU-CO-ID;
  ;
  if (OS07M002.OS07M-CU-STOR-ID == "    ")
    ;
    OS07M003.OS07M-CU-STOR-ID = "   *";
    ;
  else
    ;
    OS07M003.OS07M-CU-STOR-ID = OS07M002.OS07M-CU-STOR-ID;
    ;
  end
  ;
  if (OS07M002.OS07M-XNX-DEPT-ID-XREF == "    ")
    ;
    OS07M003.OS07M-XNX-DEPT-ID-XREF = "   *";
    ;
  else
    ;
    OS07M003.OS07M-XNX-DEPT-ID-XREF = OS07M002.OS07M-XNX-DEPT-ID-XREF;
  end
  ;
  OS07-32110(); /* Obtain temporary storage page*/
  ;
  /* ------------------------------------------------------------*/
  /* Format the data in the map from the display storage.*/
  /* ------------------------------------------------------------*/
  ;
  OS07W00.OS07W-IXM = 1; /* Initialize map index*/
  ;
  while (OS07W00.OS07W-IXM <= 10 /* Until screen is full or*/
   && OS07W03.OS07W-SY-STY-NBR[OS07W-IXM] > " ") /* or end of data*/
    ;
    OS07M003.OS07MSEL[OS07W-IXM] = OS07W03.OS07W-MSEL[OS07W-IXM];
    ;
    OS07M003.OS07M-XGP-GPC-CD[OS07W-IXM] = OS07W03.OS07W-XGP-GPC-CD[OS07W-IXM];
    ;
    OS07M003.OS07M-SY-STY-NBR[OS07W-IXM] = OS07W03.OS07W-SY-STY-NBR[OS07W-IXM];
    ;
    OS07M003.OS07M-SY-COLR-CD-ID[OS07W-IXM] = OS07W03.OS07W-SY-COLR-CD-ID[OS07W-IXM];
    ;
    OS07M003.OS07M-XDM-DIM-CD[OS07W-IXM] = OS07W03.OS07W-XDM-DIM-CD[OS07W-IXM];
    ;
    OS07M003.OS07M-XQA-QUAL-CD[OS07W-IXM] = OS07W03.OS07W-XQA-QUAL-CD[OS07W-IXM];
    ;
    OS07M003.OS07M-PC-CU-IN-SEG-CD[OS07W-IXM] = OS07W03.OS07W-PC-CU-IN-SEG-CD[OS07W-IXM];
    ;
    OS07M003.OS07M-XOW-OWN-GRP-CD[OS07W-IXM] = OS07W03.OS07W-XOW-OWN-GRP-CD[OS07W-IXM];
    ;
    OS07M003.OS07M-XUM-UOM-CD[OS07W-IXM] = OS07W03.OS07W-XUM-UOM-CD[OS07W-IXM];
    ;
    OS07M003.OS07M-OP-BULK-ORD-ID[OS07W-IXM] = OS07W03.OS07W-OP-BULK-ORD-ID[OS07W-IXM];
    ;
    OS07M003.OS07M-SL-MAX-REPL-QTY[OS07W-IXM] = OS07W03.OS07W-SL-MAX-REPL-QTY[OS07W-IXM];
    ;
    OS07M003.OS07M-XXX-STAT[OS07W-IXM] = OS07W03.OS07W-XXX-STAT[OS07W-IXM];
    ;
    set OS07M003.OS07MSEL[OS07W-IXM] underline;
    ;
    set OS07M003.OS07M-OP-BULK-ORD-ID[OS07W-IXM] underline;
    ;
    set OS07M003.OS07M-SL-MAX-REPL-QTY[OS07W-IXM] underline;
    ;
    set OS07M003.OS07M-XXX-STAT[OS07W-IXM] underline;
    ;
    if (OS07W00.OS07W-SFN == "A")
      ;
      OS07-32200(); /* Determine if cust/item exists*/
                                  /* if so, rvideo & autoskip*/
      if (SQLCA.VAGen_SQLCODE == +0)
        ;
        set OS07M003.OS07MSEL[OS07W-IXM] noHighLight, skip;
        set OS07M003.OS07M-XGP-GPC-CD[OS07W-IXM] reverse;
        set OS07M003.OS07M-SY-STY-NBR[OS07W-IXM] reverse;
        set OS07M003.OS07M-SY-COLR-CD-ID[OS07W-IXM] reverse;
        set OS07M003.OS07M-OP-BULK-ORD-ID[OS07W-IXM] noHighLight, skip;
        set OS07M003.OS07M-SL-MAX-REPL-QTY[OS07W-IXM] noHighLight, skip;
        set OS07M003.OS07M-XXX-STAT[OS07W-IXM] noHighLight, skip;
        ;
        OS07M003.OS07M-SL-MAX-REPL-QTY[OS07W-IXM] = VRPLCI01.SL-MAX-REPL-QTY;
        ;
        OS07M003.OS07M-OP-BULK-ORD-ID[OS07W-IXM] = VRPLCI01.OP-BULK-ORD-ID;
        ;
        OS07M003.OS07M-XXX-STAT[OS07W-IXM] = VRPLCI01.XXX-STAT;
        ;
      end
      ;
    end
    ;
    OS07W00.OS07W-IXM = OS07W00.OS07W-IXM + 1; /* Increment map index*/
    ;
  end
  ;
end // end OS07-32100

// Read temporary storage page
Function OS07-32110()
  /* ------------------------------------------------------------*/
  /* Obtain the next page of data to display.*/
  /* ------------------------------------------------------------*/
  ;
  OS07W03.XXXTSLEN = OS07W00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = OS07W00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (OS07W03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
  /* ------------------------------------------------------------*/
  /* If successful, return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  OS07W00.XXXPRCNM = "32110"; /* Module identification*/
  converseLib.validationFailed(973); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "OS07-32110";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNO = OS07W00.XXXPRCNM; /* Program number*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M003"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end OS07-32110

Function OS07-32200()
  /* --------------------------------------------------------------*/
  /* Determine if product on DORDER.VRPLIT02 is on file for current*/
  /* customer - DORDER.VRPLCI01*/
  /* --------------------------------------------------------------*/
  ;
  set VRPLCI01 empty;
  ;
  VRPLCI01.XWH-WHSE-CD = OS07M002.OS07M-XWH-WHSE-CD;
  ;
  VRPLCI01.CU-CO-ID = OS07M002.OS07M-CU-CO-ID;
  ;
  if (OS07M002.OS07M-CU-STOR-ID == "*   "
   || OS07M002.OS07M-CU-STOR-ID == "   *"
   || OS07M002.OS07M-CU-STOR-ID == "    ")
    ;
    VRPLCI01.CU-STOR-ID = -1;
    ;
  else
    ;
    OS07W00.OS07W-CHA = OS07M002.OS07M-CU-STOR-ID;
    OS07W00.OS07W-NUM = OS07M002.OS07M-CU-STOR-ID;
    ;
    OS07S-FMT-STOR-DEP();
    ;
    VRPLCI01.CU-STOR-ID = OS07W00.OS07W-WK-NUM;
    ;
  end
  ;
  if (OS07M002.OS07M-XNX-DEPT-ID-XREF == "*   "
   || OS07M002.OS07M-XNX-DEPT-ID-XREF == "   *"
   || OS07M002.OS07M-XNX-DEPT-ID-XREF == "    ")
    ;
    VRPLCI01.XNX-DEPT-ID-XREF = -1;
    ;
  else
    ;
    OS07W00.OS07W-CHA = OS07M002.OS07M-XNX-DEPT-ID-XREF;
    OS07W00.OS07W-NUM = OS07M002.OS07M-XNX-DEPT-ID-XREF;
    ;
    OS07S-FMT-STOR-DEP();
    ;
    VRPLCI01.XNX-DEPT-ID-XREF = OS07W00.OS07W-WK-NUM;
    ;
  end
  ;
  VRPLCI01.XGP-GPC-CD = OS07W03.OS07W-XGP-GPC-CD[OS07W-IXM];
  ;
  VRPLCI01.SY-STY-NBR = OS07W03.OS07W-SY-STY-NBR[OS07W-IXM];
  ;
  VRPLCI01.SY-COLR-CD-ID = OS07W03.OS07W-SY-COLR-CD-ID[OS07W-IXM];
  ;
  VRPLCI01.XDM-DIM-CD = OS07W03.OS07W-XDM-DIM-CD[OS07W-IXM];
  ;
  VRPLCI01.XQA-QUAL-CD = OS07W03.OS07W-XQA-QUAL-CD[OS07W-IXM];
  ;
  VRPLCI01.PC-CU-IN-SEG-CD = OS07W03.OS07W-PC-CU-IN-SEG-CD[OS07W-IXM];
  ;
  VRPLCI01.XOW-OWN-GRP-CD = OS07W03.OS07W-XOW-OWN-GRP-CD[OS07W-IXM];
  ;
  VRPLCI01.XUM-UOM-CD = OS07W03.OS07W-XUM-UOM-CD[OS07W-IXM];
  ;
  OS07S-VRPLCI01-S(); /* Select Unique - DORDER.VRPLCI01*/
  ;
  ;
end // end OS07-32200

// Check attention identifier
Function OS07-33000()
  /* ------------------------------------------------------------*/
  /* If CANCEL was requested, clear the map fields and exit.*/
  /* If a request for data is pending, reset that request.*/
  /* ------------------------------------------------------------*/
  ;
  /* IF EZEAID IS PA2;                /* PA2 was pressed*/
  /* ;*/
  /* IF OS07W00.OS07W-SWR EQ 'Y';   /* Request for data*/
  /* ;*/
  /* SET OS07W03 EMPTY;           /* M003 display storage*/
  /* ;*/
  /* END;*/
  /* ;*/
  /* MOVE 'Y' TO OS07W00.OS07W-SWF; /* Format the map switch*/
  /* ;*/
  /* MOVE 'N' TO OS07W00.OS07W-SWR; /* Request for data switch*/
  /* ;*/
  /* MOVE ' ' TO COMMAREA.CATOAP;   /* TO application*/
  /* ;*/
  /* MOVE ' ' TO COMMAREA.CAITEM;   /* Application data*/
  /* ;*/
  /* EZEFLO;                        /* Exit to display map*/
  /* ;*/
  /* END;*/
  ;
  /* ------------------------------------------------------------*/
  /* If FAST PATH was requested, transfer to the application.*/
  /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      OS07-31100(); /* Purge any temporary storage*/
      ;
      XSEXIT(); /* Exit to another application*/
      ;
      set OS07M003.CATOAP cursor, bold; /* Highlight*/
      ;
      OS07W00.OS07W-SWD = "1"; /* Map to be displayed switch*/
      ;
    else
      ;
      OS07W00.XXXPRCNM = "33000"; /* Module identification*/
      ;
      converseLib.validationFailed(2); /* PA/PF key may not be used*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If HELP, exit to the previous level or exit to the Master*/
  /* Menu was requested, exit to another application.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* PF1 was pressed*/
   || converseVar.eventKey is pf3 /* or PF3 was pressed*/
   || converseVar.eventKey is pf4) /* or PF4 was pressed*/
    ;
  /* IF EZEAID IS PF1;              /* PF1 was pressed*/
  /* MOVE 'OS07M003' TO COMMAREA.CAITEM;/* Application find code*/
  /* END;*/
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      ;
      OS07W01.OS07W-XWH-WHSE-CD[OS07W-IXM] = OS07M003.OS07M-XWH-WHSE-CD;
      ;
      OS07W01.OS07W-CU-CO-ID[OS07W-IXM] = OS07M003.OS07M-CU-CO-ID;
      ;
      if (OS07M003.OS07M-CU-STOR-ID == "*   "
       || OS07M003.OS07M-CU-STOR-ID == "   *"
       || OS07M003.OS07M-CU-STOR-ID == "    ")
        ;
        OS07W01.OS07W-CU-STOR-ID[OS07W-IXM] = -1;
        ;
      else
        ;
        OS07W00.OS07W-CHA = OS07M003.OS07M-CU-STOR-ID;
        OS07W00.OS07W-NUM = OS07M003.OS07M-CU-STOR-ID;
        ;
        OS07S-FMT-STOR-DEP(); /* Convert alpha to numeric*/
                                  /* Result in OS07W00.OS07W-WK-NUM*/
        OS07W01.OS07W-CU-STOR-ID[OS07W-IXM] = OS07W00.OS07W-WK-NUM;
        ;
      end
      ;
      if (OS07M003.OS07M-XNX-DEPT-ID-XREF == "*   "
       || OS07M003.OS07M-XNX-DEPT-ID-XREF == "   *"
       || OS07M003.OS07M-XNX-DEPT-ID-XREF == "    ")
        ;
        OS07W01.OS07W-XNX-DEPT-ID-XREF[OS07W-IXM] = -1;
        ;
      else
        ;
        OS07W00.OS07W-CHA = OS07M003.OS07M-XNX-DEPT-ID-XREF;
        OS07W00.OS07W-NUM = OS07M003.OS07M-XNX-DEPT-ID-XREF;
        ;
        OS07S-FMT-STOR-DEP();
        ;
        OS07W01.OS07W-XNX-DEPT-ID-XREF[OS07W-IXM] = OS07W00.OS07W-WK-NUM;
        ;
      end
      ;
      OS07W00.OS07W-SWD = "2"; /* Map to be displayed switch*/
      ;
      OS07W00.OS07W-SWF = "Y"; /* Format the map switch*/
      ;
      OS07W00.OS07W-SWR = "Y"; /* Request data*/
      ;
      OS07W00.OS07W-SFN = "C"; /* Function Code*/
      /* TT#5230  WIPRO Change Begin  ************/
      ;
      OS07W00.XXXTSPAG = 0; /* Reset page number to 0*/
      /* TT#5230  WIPRO Change End    *********** 04/05/00*/

      exit stack; /* Exit to display map*/
      ;
    end
    ;
    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      ;
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
      ;
      OS07-31100(); /* Purge temporary storage*/
      ;
      XSEXIT(); /* Exit to another application*/
      ;
      exit stack; /* Exit to display map*/
      ;
    end
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* Determine whether a valid attention identifier was used to*/
  /* invoke the transaction.  Display an error message to the*/
  /* user if the PF key used is not supported.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* and PF7 was not pressed*/
   && converseVar.eventKey not pf8   /* and PF8 was not pressed*/
   && converseVar.eventKey not pf15) /* and PF15 was not pressed*/
    ;
    OS07W00.XXXPRCNM = "33000"; /* Module identification*/
    ;
    converseLib.validationFailed(2); /* PA/PF key pressed is not valid*/
    ;
    if (converseVar.eventKey is pakey) /* PA key was pressed*/
      ;
      converseLib.clearScreen();
       /* Clear screen before display*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
end // end OS07-33000

// Reset highlighted fields
Function OS07-34000()
  /* ------------------------------------------------------------*/
  /* Reset all modifiable field attributes to normal intensity.*/
  /* ------------------------------------------------------------*/
  ;
  OS07W00.OS07W-IXM = 1; /* Initialize line index*/
  ;
  while (OS07W00.OS07W-IXM <= 10 /* * Until end of lines*/
   && OS07M003.OS07M-SY-STY-NBR[OS07W-IXM] > " ") /* or end of display*/
    ;
    set OS07M003.OS07MSEL[OS07W-IXM] normal;
    ;
    set OS07M003.OS07M-OP-BULK-ORD-ID[OS07W-IXM] normal;
    ;
    set OS07M003.OS07M-SL-MAX-REPL-QTY[OS07W-IXM] normal;
    ;
    OS07W00.OS07W-IXM = OS07W00.OS07W-IXM + 1; /* Increment line index*/
    ;
  end
  ;
  set OS07M003.CATOAP normal; /* TO application*/
  ;
  set OS07M003.CAITEM normal; /* Application data*/
  ;
  ;
end // end OS07-34000

// Verify data that was entered
Function OS07-35000()
  /* ------------------------------------------------------------*/
  /* Highlight any application data that was entered.*/
  /* ------------------------------------------------------------*/
  ;
  if (COMMAREA.CAITEM > " ") /* Application data was entered*/
    ;
    OS07W00.XXXPRCNM = "35000"; /* Module identification*/
    set OS07M003.CAITEM cursor, bold; /* Highlight*/
    converseLib.validationFailed(975); /* Enter only with FAST PATH*/
    ;
  end
  ;
  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    ;
    OS07-35100(); /* Validate forward/backward paging*/
    ;
    OS07-35200(); /* Edit current page for changes*/
    ;
  else
    ;
    if (converseVar.eventKey is enter)
      ;
      OS07-35200(); /* Edit current page for changes*/
      ;
    end
    ;
  end
  ;
  if (converseVar.validationMsgNum == 0
   && OS07W00.OS07W-PAGE-UPD-FL == "Y")
    ;
    OS07-35300(); /* Update TSQ Page*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If any errors were found, exit to display the map.*/
  /* Otherwise, verify the data.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack; /* Exit to display map*/
  end
  ;
end // end OS07-35000

// Validate function keys
Function OS07-35100()
  /* ------------------------------------------------------------*/
  /* If scroll back was requested, ensure that pages exist.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && OS07W00.XXXTSPAG < 2)       /* and no previous pages*/
    ;
    OS07W00.XXXPRCNM = "35100"; /* Module identification*/
    converseLib.validationFailed(192); /* No previous page to display*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If scroll forward was requested, ensure that pages exist.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && OS07W00.XXXTSPAG >= OS07W00.TA5TSQIX) /* and no more pages*/
    ;
    OS07W00.XXXPRCNM = "35100"; /* Module identification*/
    converseLib.validationFailed(191); /* No more pages to display*/
    ;
  end
  ;
end // end OS07-35100

// Check for changes to TSQ
Function OS07-35200()
  ;
  /* --------------------------------------------------------------*/
  /* This process searches the current TSQ page for changes.*/
  /* If changes are found, the page is edited.  If edit passed, the*/
  /* TSQ page is updated in order to key on entire TSQ in process*/
  /* OS07-36000 where the select byte will be used to add or change*/
  /* data.*/
  /* --------------------------------------------------------------*/
  ;
  OS07W00.OS07W-PAGE-UPD-FL = "N"; /* Set Page Update Flag*/
  ;
  OS07W00.OS07W-IXM = 1; /* Set index*/
  ;
  while (OS07W00.OS07W-IXM <= 10
   && OS07M003.OS07M-SY-STY-NBR > " ")
    ;
    if (OS07M003.OS07MSEL[OS07W-IXM] !=  /* Select byte changed*/
    OS07W03.OS07W-MSEL[OS07W-IXM])      
      ;
      if (OS07W00.OS07W-SFN == "C") /* CHG Function*/
        ;
        if (COMMAREA.CACHGFL == "N")
          ;
          OS07W00.XXXPRCNM = "35200"; /* Message location*/
          ;
          converseLib.validationFailed(995); /* Security Violation*/
          ;
          OS07W00.OS07W-PAGE-UPD-FL = "N";
          ;
        else
          ;
          if (OS07M003.OS07MSEL[OS07W-IXM] != "S" /* Must be 'S' or 'D'*/
           && OS07M003.OS07MSEL[OS07W-IXM] != "D")
            ;
            OS07W00.XXXPRCNM = "35200"; /* Message location*/
            ;
            converseLib.validationFailed(976);
            ;
            set OS07M003.OS07MSEL[OS07W-IXM] cursor, bold;
            ;
            OS07W00.OS07W-PAGE-UPD-FL = "N";
            ;
          else
            ;
            OS07W00.OS07W-PAGE-UPD-FL = "Y";
            ;
            OS07W03.OS07W-MSEL[OS07W-IXM] = OS07M003.OS07MSEL[OS07W-IXM];
          end
          ;
        end
        ;
      else
        ;
        if (OS07M003.OS07MSEL[OS07W-IXM] != "S")
          ;
          OS07W00.XXXPRCNM = "35200"; /* Message location*/
          ;
          converseLib.validationFailed(990); /* Only 'S' valid*/
          ;
          set OS07M003.OS07MSEL[OS07W-IXM] cursor, bold;
          ;
          OS07W00.OS07W-PAGE-UPD-FL = "N";
          ;
        else
          ;
          OS07W00.OS07W-PAGE-UPD-FL = "Y";
          ;
          OS07W03.OS07W-MSEL[OS07W-IXM] = OS07M003.OS07MSEL[OS07W-IXM];
          ;
        end
        ;
      end
      ;
    end
    ;
    if (OS07M003.OS07MSEL[OS07W-IXM] == "S")
      ;
      set OP1REC empty;
      ;
      set OMCREC empty;
      ;
      OP1REC.OP1CUOID = OS07M003.OS07M-OP-BULK-ORD-ID[OS07W-IXM];
      ;
      OMCREC.OMCFUNCT = "SC"; /* select count function*/
      ;
      OS07S-VORHDR01-SC();
      ;
      if (SQLCA.VAGen_SQLCODE == 0
       && OMCREC.OMCCOUNT > 0)
        ;
        OS07W00.OS07W-PAGE-UPD-FL = "Y";
        ;
        OS07W03.OS07W-MSEL[OS07W-IXM] = OS07M003.OS07MSEL[OS07W-IXM];
        ;
        OS07W03.OS07W-OP-BULK-ORD-ID[OS07W-IXM] = OS07M003.OS07M-OP-BULK-ORD-ID[OS07W-IXM];
      else
        ;
        OS07W00.XXXPRCNM = "35200"; /* Message location*/
        ;
        converseLib.validationFailed(988); /* Bulk Order ID Invalid*/
        ;
        set OS07M003.OS07M-OP-BULK-ORD-ID[OS07W-IXM] cursor, bold;
        ;
        OS07W00.OS07W-PAGE-UPD-FL = "N";
        ;
      end
      ;
      if (OS07M003.OS07M-SL-MAX-REPL-QTY[OS07W-IXM] != 
      OS07W03.OS07W-SL-MAX-REPL-QTY[OS07W-IXM]
       && OS07M003.OS07MSEL[OS07W-IXM] == "S")
        ;
        if (OS07M003.OS07M-SL-MAX-REPL-QTY < 0
         || OS07M003.OS07M-SL-MAX-REPL-QTY > 999999999)
          ;
          OS07W00.XXXPRCNM = "35200"; /* Message location*/
          ;
          converseLib.validationFailed(989); /* Max Replen Qty Invalid*/
          ;
          set OS07M003.OS07M-SL-MAX-REPL-QTY[OS07W-IXM] cursor, bold;
          ;
          OS07W00.OS07W-PAGE-UPD-FL = "N";
          ;
        else
          ;
          OS07W00.OS07W-PAGE-UPD-FL = "Y";
          ;
          OS07W03.OS07W-SL-MAX-REPL-QTY[OS07W-IXM] = OS07M003.OS07M-SL-MAX-REPL-QTY[OS07W-IXM];
          ;
        end
        ;
      end
      ;
      if (OS07M003.OS07M-XXX-STAT[OS07W-IXM] != 
      OS07W03.OS07W-XXX-STAT[OS07W-IXM]
       && OS07M003.OS07MSEL[OS07W-IXM] == "S")
        ;
        if (OS07M003.OS07M-XXX-STAT != "A"
         && OS07M003.OS07M-XXX-STAT != "I"
        )
          OS07W00.XXXPRCNM = "35200"; /* Message location*/
          ;
          converseLib.validationFailed(983); /* Invalid Status, must be 'I' or 'A'*/
          ;
          OS07W00.OS07W-PAGE-UPD-FL = "N";
          ;
          set OS07M003.OS07M-XXX-STAT[OS07W-IXM] cursor, bold;
          ;
        else
          ;
          OS07W00.OS07W-PAGE-UPD-FL = "Y";
          ;
          OS07W03.OS07W-XXX-STAT[OS07W-IXM] = OS07M003.OS07M-XXX-STAT[OS07W-IXM];
          ;
        end
        ;
      end
      ;
    else
      ;
    end
    ;
    OS07W00.OS07W-IXM = OS07W00.OS07W-IXM + 1;
    ;
  end
  ;
end // end OS07-35200

// Update OS07W03 TSQ
Function OS07-35300()
   /* ------------------------------------------------------------*/
   /* Update current TSQ Page*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  ;
  TA5REC.TA5TSQIX = OS07W00.XXXTSPAG;
  ;
  TA5REC.TA5FNCCD = "U"; /* Function code*/
  ;
  OS07W00.XXXTSLEN = 844;
  ;
  try
    call "TA0050" (OS07W03, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Update page*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, initialize the storage area and*/
   /* indicators to be used and return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  ;
  TAEREC.TAEDESC1 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  OS07W00.XXXPRCNM = "35300"; /* Message location*/
  ;
  converseLib.validationFailed(973); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  ;
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  ;
  TA1REC.TA1PGMNM = OS07W00.XXXPRCNM; /* Message location*/
  ;
  TA1REC.TA1LOC = "OS07-35300"; /* Description*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
end // end OS07-35300

// Process valid input request
Function OS07-36000()
  ;
  /* ------------------------------------------------------------*/
  /* If a scroll backward was requested, decrement the page*/
  /* number and return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* Scroll back requested*/
    ;
    OS07W00.XXXTSPAG = OS07W00.XXXTSPAG - 1; /* Decrement page number*/
    ;
    OS07W00.OS07W-SWF = "Y"; /* Format screen*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If a scroll forward was requested, increment the page*/
  /* number and return to the previous process.*/
  /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8) /* Scroll forward requested*/
    ;
    OS07W00.XXXTSPAG = OS07W00.XXXTSPAG + 1; /* Increment page number*/
    ;
    OS07W00.OS07W-SWF = "Y"; /* Format screen*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------------*/
  /* Process PF15 Key*/
  /* ------------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf15)
    ;
    OS07W00.OS07W-SWD = "3"; /* Map to be displayed switch*/
    OS07W00.OS07W-SWF = "Y"; /* yes format map*/
    OS07W00.OS07W-SWR = "Y"; /* Obtain Data*/
    OS07W00.XXXTSPAG = 0; /* Reset page*/
    OS07W00.OS07W-SFN = "A"; /* 'ADD' function*/
    ;
    return;
    ;
  end
  ;
  if (converseVar.eventKey is enter) /* ENTER Pressed*/
    ;
    OS07-36200(); /* Update DORDER.VRPLCI01*/
    ;
    if (SQLCA.VAGen_SQLCODE == +0
     && converseVar.validationMsgNum == 0)
      ;
      OS07W00.OS07W-SWF = "Y"; /* Format the map switch*/
      ;
      OS07W00.OS07W-SWR = "Y"; /* Select data switch*/
      ;
      OS07W00.OS07W-SFN = "C"; /* CHG Function Code*/
      ;
      OS07W00.OS07W-SWD = "3"; /* Map Display*/
      ;
    end
    ;
  end
  ;
end // end OS07-36000

// Update DORDER.VRPLCI01
Function OS07-36200()
  ;
  /* ---------------------------------------------------------------------*/
  /* Update the DORDER.VRPLCI01 row depending on delete or update function*/
  /* ---------------------------------------------------------------------*/
  ;
  OS07W00.XXXTSPAG = 1; /* Current Page*/
  ;
  if (OS07M003.OS07M-CU-STOR-ID == "*   "
   || OS07M003.OS07M-CU-STOR-ID == "   *"
   || OS07M003.OS07M-CU-STOR-ID == "    ")
    ;
    OS07W00.OS07W-SELECT-CU-STOR-ID = -1;
    ;
  else
    ;
    OS07W00.OS07W-CHA = OS07M003.OS07M-CU-STOR-ID;
    OS07W00.OS07W-NUM = OS07M003.OS07M-CU-STOR-ID;
    ;
    OS07S-FMT-STOR-DEP();
    ;
    OS07W00.OS07W-SELECT-CU-STOR-ID = OS07W00.OS07W-WK-NUM;
    ;
  end
  ;
  if (OS07M003.OS07M-XNX-DEPT-ID-XREF == "*   "
   || OS07M003.OS07M-XNX-DEPT-ID-XREF == "   *"
   || OS07M003.OS07M-XNX-DEPT-ID-XREF == "    ")
    ;
    OS07W00.OS07W-SELECT-XNX-DEPT-ID-XREF = -1;
    ;
  else
    ;
    OS07W00.OS07W-CHA = OS07M003.OS07M-XNX-DEPT-ID-XREF;
    OS07W00.OS07W-NUM = OS07M003.OS07M-XNX-DEPT-ID-XREF;
    ;
    OS07S-FMT-STOR-DEP();
    ;
    OS07W00.OS07W-SELECT-XNX-DEPT-ID-XREF = OS07W00.OS07W-WK-NUM;
    ;
  end
  ;
  while (OS07W00.XXXTSPAG <= OS07W00.TA5TSQIX) /* Process all TSQ Pages*/
    ;
    OS07W00.OS07W-IXM = 1; /* Initialize line index*/
    ;
    OS07-32110(); /* Read TSQ Page*/
    ;
    while (OS07W00.OS07W-IXM <= 10) /* Until end of lines*/
      ;
      if (OS07W03.OS07W-MSEL[OS07W-IXM] != " ")
        ;
        set VRPLCI01 empty;
        ;
        VRPLCI01.XWH-WHSE-CD = OS07M003.OS07M-XWH-WHSE-CD;
        ;
        VRPLCI01.CU-CO-ID = OS07M003.OS07M-CU-CO-ID;
        ;
        VRPLCI01.CU-STOR-ID = OS07W00.OS07W-SELECT-CU-STOR-ID;
        ;
        VRPLCI01.XNX-DEPT-ID-XREF = OS07W00.OS07W-SELECT-XNX-DEPT-ID-XREF;
        ;
        VRPLCI01.XGP-GPC-CD = OS07W03.OS07W-XGP-GPC-CD[OS07W-IXM];
        ;
        VRPLCI01.SY-STY-NBR = OS07W03.OS07W-SY-STY-NBR[OS07W-IXM];
        ;
        VRPLCI01.SY-COLR-CD-ID = OS07W03.OS07W-SY-COLR-CD-ID[OS07W-IXM];
        ;
        VRPLCI01.XDM-DIM-CD = OS07W03.OS07W-XDM-DIM-CD[OS07W-IXM];
        ;
        VRPLCI01.XQA-QUAL-CD = OS07W03.OS07W-XQA-QUAL-CD[OS07W-IXM];
        ;
        VRPLCI01.PC-CU-IN-SEG-CD = OS07W03.OS07W-PC-CU-IN-SEG-CD[OS07W-IXM];
        ;
        VRPLCI01.XOW-OWN-GRP-CD = OS07W03.OS07W-XOW-OWN-GRP-CD[OS07W-IXM];
        ;
        VRPLCI01.XUM-UOM-CD = OS07W03.OS07W-XUM-UOM-CD[OS07W-IXM];
        ;
        OS07S-VRPLCI01-S(); /* Select Unique row DORDER.VRPLCI01*/
        ;
  /* ------------------------------------------------------------------*/
  /* Move following map fields after key select fields for updates*/
  /* ------------------------------------------------------------------*/
        ;
        VRPLCI01.OP-BULK-ORD-ID = OS07W03.OS07W-OP-BULK-ORD-ID[OS07W-IXM];
        ;
        VRPLCI01.SL-MAX-REPL-QTY = OS07W03.OS07W-SL-MAX-REPL-QTY[OS07W-IXM];
        ;
        VRPLCI01.XXX-STAT = OS07W03.OS07W-XXX-STAT[OS07W-IXM];
        ;
        VRPLCI01.ZZ-CHNG-DT = XX0XW01.XX0XWDAT;
        ;
        VRPLCI01.ZZ-CHNG-HHMM = XX0XW01.XX0XWTIM;
        ;
        VRPLCI01.ZZ-CHNG-USER-ID = COMMAREA.CAUSERID;
        ;
        if (SQLCA.VAGen_SQLCODE == +0
         && OS07W00.OS07W-SFN == "C") /* CHG Function*/
          ;
          if (OS07W03.OS07W-MSEL[OS07W-IXM] == "S")
            ;
            OS07S-VRPLCI01-U(); /* Update DORDER.VRPLCI01*/
            ;
          else
            ;
            if (OS07W03.OS07W-MSEL[OS07W-IXM] == "D")
                                   /* Delete DORDER.VRPLCI01*/
              ;
              OS07S-VRPLCI01-D();
              ;
            end
            ;
          end
          ;
        else
          ;
          if (SQLCA.VAGen_SQLCODE == +100
           && OS07W00.OS07W-SFN == "A")
            ;
            VRPLCI01.ZZ-SDT = XX0XW01.XX0XWDAT;
            ;
            VRPLCI01.ZZ-SETUP-USER-ID = COMMAREA.CAUSERID;
            ;
            OS07S-VRPLCI01-A(); /* Insert row on ADD Function*/
            ;
          end
          ;
        end
        ;
      end
      ;
      OS07W00.OS07W-IXM = OS07W00.OS07W-IXM + 1; /* Increment line index*/
      ;
    end
    ;
    OS07W00.XXXTSPAG = OS07W00.XXXTSPAG + 1; /* Increment page index*/
    ;
  end
  ;
  OS07W00.XXXTSPAG = 1; /* Current Page*/
  ;
end // end OS07-36200

// Convert Screen Alph to Num
Function OS07S-FMT-STOR-DEP()
  ;
   /* -----------------------------------------------------------------*/
   /* **/
   /* Convert alpha screen field to numeric (4 bytes)                **/
   /* **/
   /* Move Map Field to OS07W00.OS07W-CHA & OS07W00.OS07W-NUM        **/
   /* **/
   /* End Result will be in OS07W00.OS07W-WK-NUM                     **/
   /* **/
   /* -----------------------------------------------------------------*/
  ;
  OS07W00.OS07W-WORK-IDX = 1;
  ;
  while ((OS07W-WORK-IDX <= 4))
    ;
    if (OS07W00.OS07W-CBYT[OS07W-WORK-IDX] not numeric)
      ;
      OS07W00.OS07W-WK-BYTE[OS07W-WORK-IDX] = 0;
      ;
    else
      ;
      OS07W00.OS07W-WK-BYTE[OS07W-WORK-IDX] = OS07W00.OS07W-NBYT[OS07W-WORK-IDX];
      ;
    end
    ;
    OS07W00.OS07W-WORK-IDX = OS07W00.OS07W-WORK-IDX + 1;
    ;
  end
  ;
end // end OS07S-FMT-STOR-DEP

// Validate for Blank Carrier Cds
Function OS07S-VAL-CARR-CD()
  ;
   /* -----------------------------------------------------------------*/
   /* Replenishment Customers may now request the consolidation of    **/
   /* Ftwr/Equip Replen Orders and Non-Replen Orders. To identify such**/
   /* Customers, the carrier codes on the customer replen table will  **/
   /* be set to spaces. This statement group validates that all three **/
   /* carrier codes have been set to spaces; either all three carrier **/
   /* codes must be blank or all three must contain values.           **/
   /* -----------------------------------------------------------------*/
  ;
  if (OS07M002.OS07M-TF-CARR-CD3 == " ") /* carrier code 3 is spaces*/
    ;
    /* --- check other carrier codes ---*/
    if (OS07M002.OS07M-TF-CARR-CD1 != " "
     || OS07M002.OS07M-TF-CARR-CD2 != " ")
      ;
      /* --- display error message ---*/
      set OS07M002.OS07M-TF-CARR-CD3 bold;
      set OS07M002.OS07M-TF-CARR-CD2 bold;
      set OS07M002.OS07M-TF-CARR-CD1 cursor, bold;
      converseLib.validationFailed(999); /* either all or no carr cds must be spaces*/
    end
  else
    ;
    if (OS07M002.OS07M-TF-CARR-CD2 == " ") /* carrier code 2 is spaces*/
      ;
      /* --- check other carrier codes for spaces ---*/
      if (OS07M002.OS07M-TF-CARR-CD1 != " "
       || OS07M002.OS07M-TF-CARR-CD3 != " ")
        ;
        /* --- display error message---*/
        set OS07M002.OS07M-TF-CARR-CD3 bold;
        set OS07M002.OS07M-TF-CARR-CD2 bold;
        set OS07M002.OS07M-TF-CARR-CD1 cursor, bold;
        converseLib.validationFailed(999); /* either all or no carr cds must be spaces*/
      end
    else
      ;
      if (OS07M002.OS07M-TF-CARR-CD1 == " ") /* carrier code 1 is spaces*/
        ;
        /* --- carrier codes 2 and 3 have values so error ---*/
        set OS07M002.OS07M-TF-CARR-CD3 bold;
        set OS07M002.OS07M-TF-CARR-CD2 bold;
        set OS07M002.OS07M-TF-CARR-CD1 cursor, bold;
        converseLib.validationFailed(999); /* either all or no carr cds must be spaces*/
      end
    end
  end
  ;
end // end OS07S-VAL-CARR-CD

// Call to VCARR002 - 'S '
Function OS07S-VCARR002-S()
  ;
  set SQLCA empty;
  ;
  /* ------------------------------------------------------------*/
  /* Select Unique from DPICK.VCARR002*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "VCARR002" ("S ", SQLCA, TF7REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0       /* and normal return code*/
   || SQLCA.VAGen_SQLCODE == +100)  
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  OS07W00.XXXPRCNM = "VCARR002"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(10); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(973); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OS07S-VCARR002-S";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DPICK   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCARR002"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end OS07S-VCARR002-S

// Call to VCUST001 - 'CS'
Function OS07S-VCUST001-CS()
  ;
  set SQLCA empty;
  ;
  /* ------------------------------------------------------------*/
  /* Close Scan DCUST.VCUST001*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO0280" ("CS", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  OS07W00.XXXPRCNM = "VCUST001"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(10); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(973); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OS07S-VCUST001-CS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DCUST   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUST001"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end OS07S-VCUST001-CS

// Call to VCUST001 - 'SN'
Function OS07S-VCUST001-SN()
  ;
  set SQLCA empty;
  ;
  /* ------------------------------------------------------------*/
  /* Fetch Next from DCUST.VCUST001*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO0280" ("SN", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0       /* and normal return code*/
   || SQLCA.VAGen_SQLCODE == +100    
   || SQLCA.VAGen_SQLCODE == -811)  
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  OS07W00.XXXPRCNM = "VCUST001"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(10); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(973); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OS07S-VCUST001-SN";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DCUST   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUST001"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end OS07S-VCUST001-SN

// Call to VCUST001 - 'SS'
Function OS07S-VCUST001-SS()
  ;
  set SQLCA empty;
  ;
  /* ------------------------------------------------------------*/
  /* Select Scan from DCUST.VCUST001*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO0280" ("SS", SQLCA, KUNREC) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0       /* and normal return code*/
   || SQLCA.VAGen_SQLCODE == +100)  
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  OS07W00.XXXPRCNM = "VCUST001"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(10); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(973); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OS07S-VCUST001-SS";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DCUST   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VCUST001"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end OS07S-VCUST001-SS

Function OS07S-VORHDR01-SC()
  ;
  set SQLCA empty;
  ;
  /* ------------------------------------------------------------*/
  /* Select Count    DORDER.VORHDR01*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO0430" (OMCREC, SQLCA, OP1REC) {isNoRefresh = yes, isExternal = yes};
  end
  /* ------------------------------------------------------------*/
  /* If successful, return*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  OS07W00.XXXPRCNM = "VORHDR01"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(10); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(973); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OS07S-VORHDR01-SC";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VORHDR01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end OS07S-VORHDR01-SC

// Call to VRPLCI01 - 'A '
Function OS07S-VRPLCI01-A()
  ;
  set SQLCA empty;
  ;
  try
    call "VRPLCI01" ("A ", SQLCA, VRPLCI01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call Successful*/
   && SQLCA.VAGen_SQLCODE == 0       /* and normal return code*/
   || SQLCA.VAGen_SQLCODE == -311)   /* or detect dup on insert*/
    ;
    return;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(10); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(973); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OS07S-VRPLCI01-A  "; /* Description*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program Application*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRPLCI01"; /* Table view name*/
  TA1REC.TA1TBLKE = VRPLCI01.VRPLCI01-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
end // end OS07S-VRPLCI01-A

// Call to VRPLCI01 - 'C2'
Function OS07S-VRPLCI01-C2()
  ;
  set SQLCA empty;
  ;
  /* ------------------------------------------------------------*/
  /* Close S2 Cursor DORDER.VRPLCI01*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "VRPLCI01" ("C2", SQLCA, VRPLCI01) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  OS07W00.XXXPRCNM = "VRPLCI01"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(10); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(973); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OS07S-VRPLCU01-C2";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRPLCI01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end OS07S-VRPLCI01-C2

// Call to VRPLCI01 - 'D '
Function OS07S-VRPLCI01-D()
  ;
  set SQLCA empty;
  ;
  try
    call "VRPLCI01" ("D ", SQLCA, VRPLCI01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call Successful*/
   && SQLCA.VAGen_SQLCODE == 0       /* and normal return code*/
   || SQLCA.VAGen_SQLCODE == +100)   /* and normal return code*/
    ;
    return;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(10); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(973); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OS07S-VRPLCI01-D  "; /* Description*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program Application*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRPLCI01"; /* Table view name*/
  TA1REC.TA1TBLKE = VRPLCI01.VRPLCI01-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
end // end OS07S-VRPLCI01-D

// Call to VRPLCI01 - 'N2'
Function OS07S-VRPLCI01-N2()
  ;
  set SQLCA empty;
  ;
  /* ------------------------------------------------------------*/
  /* Fetch Next from DORDER.VRPLCI01*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "VRPLCI01" ("N2", SQLCA, VRPLCI01) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0       /* and normal return code*/
   || SQLCA.VAGen_SQLCODE == +100)  
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  OS07W00.XXXPRCNM = "VRPLCI01"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(10); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(973); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OS07S-VRPLCI01-N2 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRPLCI01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end OS07S-VRPLCI01-N2

// Call to VRPLCI01 - 'S '
Function OS07S-VRPLCI01-S()
  ;
  set SQLCA empty;
  ;
  try
    call "VRPLCI01" ("S ", SQLCA, VRPLCI01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call Successful*/
   && SQLCA.VAGen_SQLCODE == +0      /* and normal return code*/
   || SQLCA.VAGen_SQLCODE == +100)   /* and normal return code*/
    ;
    return;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  OS07W00.XXXMSGNO = "VRPLCI01"; /* Message location*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(10); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(973); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OS07S-VRPLCI01-S  "; /* Description*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program Application*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRPLCI01"; /* Table view name*/
  TA1REC.TA1TBLKE = VRPLCI01.VRPLCI01-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
end // end OS07S-VRPLCI01-S

// Call to VRPLCI01 - 'S2'
Function OS07S-VRPLCI01-S2()
  ;
  set SQLCA empty;
  ;
  /* ------------------------------------------------------------*/
  /* Select Scan from DORDER.VRPLCI01*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "VRPLCI01" ("S2", SQLCA, VRPLCI01) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0       /* and normal return code*/
   || SQLCA.VAGen_SQLCODE == +100)  
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  OS07W00.XXXPRCNM = "VRPLCI01"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(10); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(973); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OS07S-VRPLCI01-S2 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRPLCI01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end OS07S-VRPLCI01-S2

// Call to VRPLCI01 - 'U '
Function OS07S-VRPLCI01-U()
  ;
  set SQLCA empty;
  ;
  try
    call "VRPLCI01" ("U ", SQLCA, VRPLCI01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call Successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(10); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(973); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OS07S-VRPLCI01-U  "; /* Description*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program Application*/
  TA1REC.TA1PGMNM = OS07W00.XXXPRCNM; /* Message location*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRPLCI01"; /* Table view name*/
  TA1REC.TA1TBLKE = VRPLCI01.VRPLCI01-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
end // end OS07S-VRPLCI01-U

// Call to VRPLCU01 - 'A '
Function OS07S-VRPLCU01-A()
  ;
  set SQLCA empty;
  ;
  try
    call "VRPLCU01" ("A ", SQLCA, VRPLCU01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call Successful*/
   && SQLCA.VAGen_SQLCODE == 0       /* and normal return code*/
   || SQLCA.VAGen_SQLCODE == -803)  
    ;
    return;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(10); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(973); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OS07S-VRPLCU01-A  "; /* Description*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program Application*/
  TA1REC.TA1PGMNM = OS07W00.XXXPRCNM; /* Message location*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRPLCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = VRPLCU01.VRPLCU01-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
end // end OS07S-VRPLCU01-A

// Call to VRPLCU01 - 'C1'
Function OS07S-VRPLCU01-C1()
  ;
  set SQLCA empty;
  ;
  /* ------------------------------------------------------------*/
  /* Close Scan 1 from DORDER.VRPLCU01*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "VRPLCU01" ("C1", SQLCA, VRPLCU01) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == +0)     /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  OS07W00.XXXPRCNM = "VRPLCU01"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(10); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(973); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OS07S-VRPLCU01-C1";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = OS07W00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRPLCU01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end OS07S-VRPLCU01-C1

// Call to VRPLCU01 - 'D '
Function OS07S-VRPLCU01-D()
  ;
  set SQLCA empty;
  ;
  try
    call "VRPLCU01" ("D ", SQLCA, VRPLCU01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call Successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  OS07W00.XXXMSGNO = "VRPLCU01"; /* Message location*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(10); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(973); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OS07S-VRPLCU01-D  "; /* Description*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program Application*/
  TA1REC.TA1PGMNM = OS07W00.XXXPRCNM; /* Message location*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRPLCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = VRPLCU01.VRPLCU01-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
end // end OS07S-VRPLCU01-D

// Call to VRPLCU01 - 'N1'
Function OS07S-VRPLCU01-N1()
  ;
  set SQLCA empty;
  ;
  /* ------------------------------------------------------------*/
  /* Fetch Next Scan 1 from DORDER.VRPLCU01*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "VRPLCU01" ("N1", SQLCA, VRPLCU01) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == +0      /* and normal return code*/
   || SQLCA.VAGen_SQLCODE == +100)  
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  OS07W00.XXXPRCNM = "VRPLCU01"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(10); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(973); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OS07S-VRPLCU01-N1";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = OS07W00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRPLCU01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end OS07S-VRPLCU01-N1

// Call to VRPLCU01 - 'S '
Function OS07S-VRPLCU01-S()
  ;
  set SQLCA empty;
  ;
  /* ------------------------------------------------------------*/
  /* Select Unique from DORDER.VRPLCU01*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "VRPLCU01" ("S ", SQLCA, VRPLCU01) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0       /* and normal return code*/
   || SQLCA.VAGen_SQLCODE == +100)  
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  OS07W00.XXXPRCNM = "VRPLCU01"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(10); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(973); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OS07S-VRPLCU01-S";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = OS07W00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRPLCU01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end OS07S-VRPLCU01-S

// Call to VRPLCU01 - 'S1'
Function OS07S-VRPLCU01-S1()
  ;
  set SQLCA empty;
  ;
  /* ------------------------------------------------------------*/
  /* Select Scan 1 from DORDER.VRPLCU01*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "VRPLCU01" ("S1", SQLCA, VRPLCU01) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == +0      /* and normal return code*/
   || SQLCA.VAGen_SQLCODE == +100)  
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  OS07W00.XXXPRCNM = "VRPLCU01"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(10); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(973); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OS07S-VRPLCU01-S1";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = OS07W00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRPLCU01"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end OS07S-VRPLCU01-S1

// Call to VRPLCU01 - 'U '
Function OS07S-VRPLCU01-U()
  ;
  set SQLCA empty;
  ;
  try
    call "VRPLCU01" ("U ", SQLCA, VRPLCU01) {isNoRefresh = yes, isExternal = yes};
  end
  ;
  if (sysVar.errorCode == "00000000" /* Call Successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return;
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(10); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(973); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OS07S-VRPLCU01-U  "; /* Description*/
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program Application*/
  TA1REC.TA1PGMNM = OS07W00.XXXPRCNM; /* Message location*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRPLCU01"; /* Table view name*/
  TA1REC.TA1TBLKE = VRPLCU01.VRPLCU01-KEY; /* Table key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to redisplay map*/
  ;
  ;
end // end OS07S-VRPLCU01-U

// Call to VRPLIT02 - 'C1'
Function OS07S-VRPLIT02-C1()
  ;
  set SQLCA empty;
  ;
  /* ------------------------------------------------------------*/
  /* Close S1 Cursor DORDER.VRPLIT02*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "VRPLIT02" ("C1", SQLCA, VRPLIT02) {isNoRefresh = yes, isExternal = yes};
  end /* Close*/
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0)      /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  OS07W00.XXXPRCNM = "VRPLIT02"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(10); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(973); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OS07S-VRPLIT02-C1";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = OS07W00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRPLIT02"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end OS07S-VRPLIT02-C1

// Call to VRPLIT02 - 'N1'
Function OS07S-VRPLIT02-N1()
  ;
  set SQLCA empty;
  ;
  /* ------------------------------------------------------------*/
  /* Fetch Next from DORDER.VRPLIT02*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "VRPLIT02" ("N1", SQLCA, VRPLIT02) {isNoRefresh = yes, isExternal = yes};
  end /* Fetch*/
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0       /* and normal return code*/
   || SQLCA.VAGen_SQLCODE == +100)  
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  OS07W00.XXXPRCNM = "VRPLIT02"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(10); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(973); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OS07S-VRPLIT02-N1 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = OS07W00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRPLIT02"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end OS07S-VRPLIT02-N1

// Call to VRPLIT02 - 'S1'
Function OS07S-VRPLIT02-S1()
  ;
  set SQLCA empty;
  ;
  /* ------------------------------------------------------------*/
  /* Select Scan from DORDER.VRPLIT02*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "VRPLIT02" ("S1", SQLCA, VRPLIT02) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0       /* and normal return code*/
   || SQLCA.VAGen_SQLCODE == +100)  
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  OS07W00.XXXPRCNM = "VRPLIT02"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(10); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(973); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OS07S-VRPLIT02-S1 ";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = OS07W00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DORDER  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VRPLIT02"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end OS07S-VRPLIT02-S1

// Call to VSPGM001 - 'S '
Function OS07S-VSPGM001-S()
  ;
  set SQLCA empty;
  ;
  /* ------------------------------------------------------------*/
  /* Select Unique from DSPGM.VSPGM001*/
  /* ------------------------------------------------------------*/
  ;
  try
    call "IO0070" ("S ", SQLCA, SP1REC) {isNoRefresh = yes, isExternal = yes};
  end /* Select*/
  /* ------------------------------------------------------------*/
  /* If successful, initialize the line index and cursor switch.*/
  /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == 0       /* and normal return code*/
   || SQLCA.VAGen_SQLCODE == +100)  
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  /* ------------------------------------------------------------*/
  /* If data not available, return an error message to the user.*/
  /* Otherwise, indicate that an unexpected error has occurred.*/
  /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL commarea*/
  ;
  OS07W00.XXXPRCNM = "VSPGM001"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(10); /* Data in use by another*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(973); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "OS07S-VSPGM001-S";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = OS07W00.XXXPRCNM; /* Program number*/
  TA1REC.TA1DBASE = "DSPGM   "; /* Data base name*/
  TA1REC.TA1TBLVU = "VSPGM001"; /* Table view name*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end OS07S-VSPGM001-S

//*** RECORD=OS07W00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record OS07W00 type basicRecord
  10 OS07W-SWC OS07W-SWC ; 
  10 OS07W-SWR OS07W-SWR ; 
  10 OS07W-SWU OS07W-SWU ; 
  10 OS07W-SFN OS07W-SFN ; 
  10 OS07W-SWD OS07W-SWD ; 
  10 OS07W-SWF OS07W-SWF ; 
  10 OS07W-PAGE-UPD-FL OS07W-PAGE-UPD-FL ; 
  10 XXXPRCNM XXXPRCNM ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 XXXMSGNO XXXMSGNO ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 OS07W-IXM OS07W-IXM ; 
  10 OS07W-WORK-IDX OS07W-WORK-IDX ; 
  10 OS07W-SELECT-CTR OS07W-SELECT-CTR ; 
  10 OS07W-SELECT-XWH-WHSE-CD OS07W-SELECT-XWH-WHSE-CD ; 
  10 OS07W-SELECT-CU-CO-ID OS07W-SELECT-CU-CO-ID ; 
  10 OS07W-SELECT-CU-STOR-ID OS07W-SELECT-CU-STOR-ID ; 
  10 OS07W-SELECT-XNX-DEPT-ID-XREF OS07W-SELECT-XNX-DEPT-ID-XREF ; 
  10 OS07W-VRPLCI01-EOF OS07W-VRPLCI01-EOF ; 
  10 OS07W-CHA OS07W-CHA ; 
    15 OS07W-CBYT OS07W-CBYT [4] ; 
  10 OS07W-NUM OS07W-NUM ; 
    15 OS07W-NBYT OS07W-NBYT [4] ; 
  10 OS07W-WK-NUM OS07W-WK-NUM ; 
    15 OS07W-WK-BYTE OS07W-WK-BYTE [4] ; 
  10 OS07W-ZZ-CHNG-CNT OS07W-ZZ-CHNG-CNT ; 
end // end OS07W00

//*** RECORD=OS07W01 ****
// /*
// /*      application working storage for map1
// /*
// ***********************
Record OS07W01 type basicRecord
  10 XXXTSLEN XXXTSLEN ; 
  10 OS07W01-GROUP OS07W01-GROUP [12] ; 
    15 OS07W-MSEL OS07W-MSEL ; 
    15 OS07W-XWH-WHSE-CD OS07W-XWH-WHSE-CD ; 
    15 OS07W-CU-CO-ID OS07W-CU-CO-ID ; 
    15 OS07W-CU-STOR-ID OS07W-CU-STOR-ID ; 
    15 OS07W-XNX-DEPT-ID-XREF OS07W-XNX-DEPT-ID-XREF ; 
    15 OS07W-TF-CARR-CD1 OS07W-TF-CARR-CD1 ; 
    15 OS07W-TF-WT-BRK1 OS07W-TF-WT-BRK1 ; 
    15 OS07W-TF-CARR-CD2 OS07W-TF-CARR-CD2 ; 
    15 OS07W-TF-WT-BRK2 OS07W-TF-WT-BRK2 ; 
    15 OS07W-TF-CARR-CD3 OS07W-TF-CARR-CD3 ; 
    15 OS07W-XXX-STAT OS07W-XXX-STAT ; 
    15 OS07W-ZZ-SETUP-USER-ID OS07W-ZZ-SETUP-USER-ID ; 
    15 OS07W-ZZ-CHNG-USER-ID OS07W-ZZ-CHNG-USER-ID ; 
    15 OS07W-ZZ-SDT OS07W-ZZ-SDT ; 
    15 OS07W-ZZ-CHNG-DT OS07W-ZZ-CHNG-DT ; 
    15 OS07W-ZZ-CHNG-HHMM OS07W-ZZ-CHNG-HHMM ; 
    15 OS07W-ZZ-CHNG-CNT OS07W-ZZ-CHNG-CNT ; 
end // end OS07W01

//*** RECORD=OS07W02 ****
// /*
// /*      application working storage for map 2
// /*
// ***********************
Record OS07W02 type basicRecord
  10 OS07W02-GROUP OS07W02-GROUP ; 
    15 OS07W-XWH-WHSE-CD OS07W-XWH-WHSE-CD ; 
    15 OS07W-CU-CO-ID OS07W-CU-CO-ID ; 
    15 OS07W-CU-STOR-ID OS07W-CU-STOR-ID ; 
    15 OS07W-XNX-DEPT-ID-XREF OS07W-XNX-DEPT-ID-XREF ; 
    15 OS07W-SP-SPGM-ID OS07W-SP-SPGM-ID ; 
    15 OS07W-XOB-BASE-OT-CD OS07W-XOB-BASE-OT-CD ; 
    15 OS07W-XOT-ORD-TYP-CD OS07W-XOT-ORD-TYP-CD ; 
    15 OS07W-XDS-DIR-SHIP-CD OS07W-XDS-DIR-SHIP-CD ; 
    15 OS07W-TF-CARR-CD1 OS07W-TF-CARR-CD1 ; 
    15 OS07W-TF-CARR-CD2 OS07W-TF-CARR-CD2 ; 
    15 OS07W-TF-CARR-CD3 OS07W-TF-CARR-CD3 ; 
    15 OS07W-TF-WT-BRK1 OS07W-TF-WT-BRK1 ; 
    15 OS07W-TF-WT-BRK2 OS07W-TF-WT-BRK2 ; 
    15 OS07W-XXX-STAT OS07W-XXX-STAT ; 
    15 OS07W-PK-BOL-STMP-TXT OS07W-PK-BOL-STMP-TXT ; 
    15 OS07W-ZZ-SETUP-USER-ID OS07W-ZZ-SETUP-USER-ID ; 
    15 OS07W-ZZ-CHNG-USER-ID OS07W-ZZ-CHNG-USER-ID ; 
    15 OS07W-ZZ-SDT OS07W-ZZ-SDT ; 
    15 OS07W-ZZ-CHNG-DT OS07W-ZZ-CHNG-DT ; 
    15 OS07W-ZZ-CHNG-HHMM OS07W-ZZ-CHNG-HHMM ; 
    15 OS07W-ZZ-CHNG-CNT OS07W-ZZ-CHNG-CNT ; 
end // end OS07W02

//*** RECORD=OS07W03 ****
// /*
// /*      application working storage for map1
// /*
// ***********************
Record OS07W03 type basicRecord
  10 XXXTSLEN XXXTSLEN ; 
  10 OS07W03-GROUP OS07W03-GROUP [10] ; 
    15 OS07W-MSEL OS07W-MSEL ; 
    15 OS07W-XGP-GPC-CD OS07W-XGP-GPC-CD ; 
    15 OS07W-SY-STY-NBR OS07W-SY-STY-NBR ; 
    15 OS07W-SY-COLR-CD-ID OS07W-SY-COLR-CD-ID ; 
    15 OS07W-XDM-DIM-CD OS07W-XDM-DIM-CD ; 
    15 OS07W-XQA-QUAL-CD OS07W-XQA-QUAL-CD ; 
    15 OS07W-PC-CU-IN-SEG-CD OS07W-PC-CU-IN-SEG-CD ; 
    15 OS07W-XOW-OWN-GRP-CD OS07W-XOW-OWN-GRP-CD ; 
    15 OS07W-XUM-UOM-CD OS07W-XUM-UOM-CD ; 
    15 OS07W-OP-BULK-ORD-ID OS07W-OP-BULK-ORD-ID ; 
    15 OS07W-SL-MAX-REPL-QTY OS07W-SL-MAX-REPL-QTY ; 
    15 OS07W-XXX-STAT OS07W-XXX-STAT ; 
    15 OS07W-ZZ-SETUP-USER-ID OS07W-ZZ-SETUP-USER-ID ; 
    15 OS07W-ZZ-CHNG-USER-ID OS07W-ZZ-CHNG-USER-ID ; 
    15 OS07W-ZZ-SDT OS07W-ZZ-SDT ; 
    15 OS07W-ZZ-CHNG-DT OS07W-ZZ-CHNG-DT ; 
    15 OS07W-ZZ-CHNG-HHMM OS07W-ZZ-CHNG-HHMM ; 
    15 OS07W-ZZ-CHNG-CNT OS07W-ZZ-CHNG-CNT ; 
end // end OS07W03

//*** RECORD=VRPLCU01 ****
// *********** Auto-Replen Customer Table ***********
// 
// DB2 TABLE:               DORDER.VRPLCU01
// 
// COPYLIB MEMBER:          DRPLCU01
// 
// I/O MOD:                 VRPLCU01
// 
// KEY TO DB2 TABLE:        XWH-WHSE-CD
//                          CU-CO-ID
//                          CU-STOR-ID
//                          XNX-DEPT-ID-XREF
// 
// DATE CREATED:            09/21/98
// 
// MAINTENANCE LOG:
// 
//   DATE     INIT          COMMENT
//   ----     ----          -------
// 
// 09/21/98   TDAUGH        INITIAL RECORD CREATION
// ************************
Record VRPLCU01 type basicRecord
  3 VRPLCU01-REC VRPLCU01-REC ; 
    5 VRPLCU01-GROUP VRPLCU01-GROUP ; 
      10 VRPLCU01-KEY VRPLCU01-KEY ; 
        15 XWH-WHSE-CD XWH-WHSE-CD ; 
        15 CU-CO-ID CU-CO-ID ; 
        15 CU-STOR-ID CU-STOR-ID ; 
        15 XNX-DEPT-ID-XREF XNX-DEPT-ID-XREF ; 
      10 SP-SPGM-ID SP-SPGM-ID ; 
      10 XOB-BASE-OT-CD XOB-BASE-OT-CD ; 
      10 XOT-ORD-TYP-CD XOT-ORD-TYP-CD ; 
      10 XHD-HNDL-CD1 XHD-HNDL-CD1 ; 
      10 XHD-HNDL-CD2 XHD-HNDL-CD2 ; 
      10 XHD-HNDL-CD3 XHD-HNDL-CD3 ; 
      10 XHD-HNDL-CD4 XHD-HNDL-CD4 ; 
      10 XDS-DIR-SHIP-CD XDS-DIR-SHIP-CD ; 
      10 TF-CARR-CD1 TF-CARR-CD1 ; 
      10 TF-CARR-CD2 TF-CARR-CD2 ; 
      10 TF-CARR-CD3 TF-CARR-CD3 ; 
      10 TF-WT-BRK1 TF-WT-BRK1 ; 
      10 TF-WT-BRK2 TF-WT-BRK2 ; 
      10 XXX-STAT XXX-STAT ; 
      10 PK-BOL-STMP-TXT PK-BOL-STMP-TXT ; 
      10 ZZ-SETUP-USER-ID ZZ-SETUP-USER-ID ; 
      10 ZZ-CHNG-USER-ID ZZ-CHNG-USER-ID ; 
      10 ZZ-SDT ZZ-SDT ; 
      10 ZZ-CHNG-DT ZZ-CHNG-DT ; 
      10 ZZ-CHNG-HHMM ZZ-CHNG-HHMM ; 
      10 ZZ-CHNG-CNT ZZ-CHNG-CNT ; 
end // end VRPLCU01

DataItem OS07W-CBYT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OS07W-CHA char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OS07W-CU-CO-ID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OS07W-CU-STOR-ID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OS07W-IXM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OS07W-MSEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OS07W-NBYT num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OS07W-NUM char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OS07W-OP-BULK-ORD-ID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OS07W-PAGE-UPD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OS07W-PC-CU-IN-SEG-CD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OS07W-PK-BOL-STMP-TXT char(75)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OS07W-SELECT-CTR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OS07W-SELECT-CU-CO-ID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OS07W-SELECT-CU-STOR-ID num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OS07W-SELECT-XNX-DEPT-ID-XREF num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OS07W-SELECT-XWH-WHSE-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OS07W-SFN char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OS07W-SL-MAX-REPL-QTY num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OS07W-SP-SPGM-ID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OS07W-SWC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OS07W-SWD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OS07W-SWF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OS07W-SWR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OS07W-SWU char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OS07W-SY-COLR-CD-ID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OS07W-SY-STY-NBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OS07W-TF-CARR-CD1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OS07W-TF-CARR-CD2 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OS07W-TF-CARR-CD3 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OS07W-TF-WT-BRK1 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OS07W-TF-WT-BRK2 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OS07W-VRPLCI01-EOF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OS07W-WK-BYTE num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OS07W-WK-NUM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OS07W-WORK-IDX num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OS07W-XDM-DIM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OS07W-XDS-DIR-SHIP-CD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OS07W-XGP-GPC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OS07W-XNX-DEPT-ID-XREF num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OS07W-XOB-BASE-OT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OS07W-XOT-ORD-TYP-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OS07W-XOW-OWN-GRP-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OS07W-XQA-QUAL-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OS07W-XUM-UOM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OS07W-XWH-WHSE-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OS07W-XXX-STAT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OS07W-ZZ-CHNG-CNT num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OS07W-ZZ-CHNG-DT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OS07W-ZZ-CHNG-HHMM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OS07W-ZZ-CHNG-USER-ID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OS07W-ZZ-SDT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem OS07W-ZZ-SETUP-USER-ID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OS07W01-GROUP char(93)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OS07W02-GROUP char(176)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem OS07W03-GROUP char(84)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem PK-BOL-STMP-TXT char(75)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TF-CARR-CD1 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TF-CARR-CD3 char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem TF-WT-BRK1 int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem TF-WT-BRK2 int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem VRPLCU01-GROUP char(155)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem VRPLCU01-KEY char(10)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem VRPLCU01-REC char(155)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

