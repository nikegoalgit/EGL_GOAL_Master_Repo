package nk0e;

import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom2.YSMREC;
import corpcom3.XPNK-001;
import corpcom3.XPNL-006;
import corpcom3.XPNL002;
import corpcom3.XPNL004;
import corpcom3.XPNL005;
import corpcom3.XPXX001;
import corpcom3.XPZCH01;
import corpcom4.XSENTRY;
import corpcom4.XSNKS-MAP-MODE;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom5.GLAREC;
import corpcom6.SQLCA;
import corpx1.XCTTBL;
import corpx1.XLATBL;
import corpx1.XSNTBL;
import corpz3.ZCHTBL;
import corpz3.ZCRTBL;
import corpz3.ZCSTBL;
import corpz3.ZDTTBL;
import fy.common.FY1REC;
import ku.common.KUCREC;
import ku.common.KUMREC;
import nk.common.NK1TBL;
import nk.common.NKWREC;
import nl.common.*;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
import vv.common.VDSTRB01;
import vv.common.VGCOA001;
import vv.common.VINTGL02;
import vv.common.VLADDR01;
import vv.common.VMIHDR01;
import vv.common.VMIITM01;
import vv.common.VNCADJ01;
import vv.common.VNCHDR01;
import vv.common.VNCIVX01;
import vv.common.VNCSTY01;
import vv.common.VNLGLA01;
import vv.common.VNLIVX01;
import vv.common.VPIADJ01;
import vv.common.VPIHDR01;
import vv.common.VPIITM01;
import vv.common.VRCVGL01;
import vv.common.VZCHGL01;
//*** PROGRAM=NK0E ****
// Internation Claims Adjustment Items
// 
//      This is an International claims processing application.
// It will be used to create, maintain and inquiry on claim
// adjustments.  It will be used for PR and MI claims.  The
// PR claims will used the DNILO.VPIADJ01 database for its
// adjustments and the MI claim may be invoice related, if they
// are, it will use the DNILO.VMIITM01 database for its items.
// 
// 
// Maintenance
//   Date     User Id  Remarks
// --------   -------  ----------------------------------------
// 11/10/92   JSHANN   Created.
// 02/26/93   DKINGM   Corrected display of "NL" in GLAPRJ
// 03/01/93   JSHANN   Use 'IC' to look-up RCV G/L codes for
//                     Nike owned.
// 03/05/93   DKINGM   Exclude voided claims form invoice bal.
// 05/03/93   KSHAW    ADDED NK0ES-PROCESS-PR                .
//                     ADDED NK0ES-S2-VNCIVX01               .
//                     ADDED NK0ES-N2-VNCIVX01               .
//                     ADDED NK0ES-C2-VNCIVX01               .
//                     TO PROCESS PR CLAIMS IN IP STAT BY
//                     AVOIDING NK0E-100 SCREEN AND GOING
//                     DIRECTLY TO NK0E-200.
// 05/13/93   DKINGM   fixed bug allowing 0 amt on hdr
// 05/17/93   DKINGM   REPLACED IO MOD 4540  function 'SF'
//                     with 'F2' which determines suspense GL
//                     by GL code instead of charge type.
// 06/10/93   JJUDKI   June DB changes. Removed reference to
//                     FY2REC in tables and records list.
// 06/24/93   KSHAW    Added op1cmpnb to claim hdr when a
//                     new claim is created.
// 10/18/93   JJUDKI   Task#800. Exclude inactive claims when
//                    accumulating invoice quantity.
// 11/22/93   ahowar   added nk0es-s-vnchdr01-a to handle a not
//                    found condition.
// 03/09/94   KSHAW    March db changes.
// 06/14/94   jshann   allow upto 10,000,000.00 on claims.
// 11/29/94   ahowar   nk0es-get-rcv-gl force 'co' for 694643
// 02/26/96   BBASHA   Deleted PFHREC from Records and Tables.
//                     Added GLAREC, VGCOA001, VINTGL02 to
//                     Records and Tables.
//                     Changed all PFHREC to VINTGL02.
//                     Changed all VINTGL01 to VINTGL02.
// 03/01/96   BBASHA   Completed changes to return old
//                     gl-gen-led-acct from ga-glbl-acct-id.
// ------------------------------------------------------------
// 02/19/98   NGANGO   Y2K modifications - recompiled to pickup
//                     the changes of XX0XS01.
// ------------------------------------------------------------
// *********************
Program NK0E type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "NL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  GLAREC GLAREC; // record
  KUCREC KUCREC; // record
  KUMREC KUMREC; // record
  NK0EW01 NK0EW01; // record
  NK0EW02 NK0EW02; // record
  NK0EW03 NK0EW03; // record
  NK0EW04 NK0EW04; // record
  NK0EW05 NK0EW05; // record
  NKWREC NKWREC; // record
  NLXREC NLXREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VDSTRB01 VDSTRB01; // record
  VGCOA001 VGCOA001; // record
  VINTGL02 VINTGL02; // record
  VLADDR01 VLADDR01; // record
  VMIHDR01 VMIHDR01; // record
  VMIITM01 VMIITM01; // record
  VNCADJ01 VNCADJ01; // record
  VNCHDR01 VNCHDR01; // record
  VNCIVX01 VNCIVX01; // record
  VNCSTY01 VNCSTY01; // record
  VNLGLA01 VNLGLA01; // record
  VNLIVX01 VNLIVX01; // record
  VPIADJ01 VPIADJ01; // record
  VPIHDR01 VPIHDR01; // record
  VPIITM01 VPIITM01; // record
  VRCVGL01 VRCVGL01; // record
  VZCHGL01 VZCHGL01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use NK1TBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use XLATBL {deleteAfterUse = yes}; // table
  use XSNTBL {deleteAfterUse = yes}; // table
  use ZCHTBL {deleteAfterUse = yes}; // table
  use ZCRTBL {deleteAfterUse = yes}; // table
  use ZCSTBL {deleteAfterUse = yes}; // table
  use ZDTTBL {deleteAfterUse = yes}; // table
  use NK0EM.NK0EM100,  // forms
      NK0EM.NK0EM200,
      NK0EM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    NK0E-000: NK0E-000();


    exit program;



  end // end main
end // end NK0E

// application main logic
Function NK0E-000()
   /* -----------------------------------------------------------*/
      /* This is the "main logic" for the application.*/

      /* xsentry checks to ensure that this application was*/
            /* entered from another csp application.*/

   /* -----------------------------------------------------------*/

  NLXREC.NLXCPROC = "NK0E-000";

  NK0E-001(); /* Initilize the application*/

  NLXREC.NLXEOAF = "N"; /* set end-of-application flag to 'no'*/
  NLXREC.NLXBLDSC = "Y"; /* set build screen flag to 'yes'*/

  while (NLXREC.NLXEOAF == "N") /* while not end-of-aplication*/
    NK0E-050(); /* screen branch control*/
  end

  XSPF4();

end // end NK0E-000

// Initialize application
Function NK0E-001()
   /* -----------------------------------------------------------*/
         /* Initialize the application working storage*/

   /* -----------------------------------------------------------*/

  NLXREC.NLXCPROC = "NK0E-001";

  converseVar.commitOnConverse = 1; /* Force db2 to commit on each screen*/
                                  /* converse*/
  VGVar.handleHardIOErrors = 1; /* Return control to program if hard db2*/
                                  /* error*/

  XSENTRY(); /* Check entry thru main menu*/
  XSSEGTR(); /* Set segmented transaction id*/

  set SQLCA empty; /* Clear out the "common" working*/
                                  /* storage*/
  set ERRSQLCA empty; /* Clear out the "common" working*/
                                  /* storage*/
  set TA1REC empty; /* Clear out the "common" working*/
                                  /* storage*/
  set NLXREC empty; /* Clear out the "common" working*/
                                  /* storage*/
  set NKWREC empty; /* Clear out the "common" working*/
                                  /* storage*/
  set NK0EW01 empty; /* Clear application working storage*/
  set NK0EW02 empty; /* Clear map100 working storage*/
  set NK0EW03 empty; /* Clear map300 working storage*/

  set VNCADJ01 empty; /* Clear claim ajustment*/

  set VNCHDR01 empty; /* Clear claim header*/

  set VNCSTY01 empty; /* Clear style items*/

  set KUCREC empty; /* Clear company header*/

  set KUMREC empty; /* Clear company store record*/

  set VINTGL02 empty; /* Clear profitability record*/

  NLXREC.NLXPF3 = "N"; /* pf3 confirm flag*/
  NLXREC.NLXPF4 = "N"; /* pf4 confirm flag*/
  NLXREC.NLXPF20 = "N"; /* pf20 confirm flag*/
  NK0EW-ENTER-CNFM-FL = "N"; /* Enter confirm flag*/


  if (COMMAREA.CAFRMSYS != "NK")
    COMMAREA.CAUSERA = " ";
  end

  NLXREC.NLXEOAF = "N"; /* set end-of-application flag 'no'*/
  NLXREC.NLXERRF = "N"; /* set error-flag to 'no'*/
  NK0EW-W02-SIZE = 286; /* temp storage size for map100*/
  NK0EW-NEXT-PAGE-NBR = 1;

   /* ------------------------------------------------------*/
    /* Set up working-storage array of screen names*/
   /* ------------------------------------------------------*/

  NLXREC.NLXSNAME[1] = "NK0EM100";
  NLXREC.NLXSNAME[2] = "NK0EM200";

   /* **********************************************/
   /* Was this application entered via 'fastpath'?*/
   /* Yes if the item is non-blank.*/
   /* **********************************************/

  if (COMMAREA.CAITEM != " ") /* 'Item' will be non-blank if fastpath*/
    XPNL004(); /* Validate caitem numeric*/
    if (NLXREC.NLXERRF == "Y") /* If error in 'item'*/
      NKWREC.NKW-MSG-NBR = 289; /* Not a valid claim item*/
      COMMAREA.CATOAP = "NK0A";
      COMMAREA.CAUSERA = NKWREC.NKW-GROUP;
      XPNL002();
    else
      NKWREC.NL-CLM-ID = NLXREC.NLXNUM8A;
      XPNK-001(); /* Load passed fields*/
    end
    COMMAREA.CATOAP = " "; /* Clear commarea*/
    COMMAREA.CAITEM = " ";
  else
    if (COMMAREA.CAUSERA != " ") /* Normal function key transfer*/
      NKWREC.NKW-GROUP = COMMAREA.CAUSERA;
      XPNK-001();
    else
      NKWREC.NKW-MSG-NBR = 289; /* Clear work area for key*/
      COMMAREA.CATOAP = "NK0A";
      COMMAREA.CAUSERA = NKWREC.NKW-GROUP;
      XPNL002();
    end
  end

  if (NKW-SLS-GLAENT == " "
   && NKW-SLS-GLARCID == " "
   && NKW-SLS-GLANTAC == " "
   && NKW-SLS-GLASUB == " "
   && NKW-SLS-GLAPRJ == " "
   && VNCHDR01.OP1CMPNB > 0)
    NK0ES-SEL-VPFHDR01();
  else
    NK0EW-VGCOA001-STATUS = "9"; /* didn't get vintgl02 row*/
  end

  NK0EW-ZZZCHGCT = VNCHDR01.ZZZCHGCT; /* Used to see if claim changed.*/

  NLXLINEX = 0;
  if (NKWREC.XXX-SUM-ZCR-CD == "PR"
   && NKWREC.ZCS-CLM-STAT-CD == "IP")
    NK0ES-PROCESS-PR();
  end
  if (NLXLINEX > 0)
    NLXREC.NLXCSCRN = "NK0EM200"; /* second header*/
  else
    NLXREC.NLXCSCRN = "NK0EM100"; /* first header*/
  end

end // end NK0E-001

// Screen branch control
Function NK0E-050()
   /* -----------------------------------------------------------*/
      /* Control process the application screen(s)*/

     /* Note that this process is being performed in a*/
     /* "while loop" until the end-of-application flag is set*/
     /* to 'y'.*/

   /* -----------------------------------------------------------*/


  NLXREC.NLXCPROC = "NK0E-050"; /* set current process name*/

  sysVar.arrayIndex = 0;
  NLXREC.NLXSCRNX = 0;

  if (NLXREC.NLXCSCRN in NLXREC.NLXSNAME)
     /* if current-screen-name is in the screen-array, then set*/
     /* the screen-index*/
    NLXREC.NLXSCRNX = sysVar.arrayIndex;
  end
  XSNKS-MAP-MODE(); /* Get map mode flag*/
  NLXREC.NLXEOSF = "N"; /* Set end-of-screen flag to 'no'*/
   /* OVE 'Y' TO NLXREC.NLXBLDSC;     /* Set build screen flag to 'yes'*/
  NLXREC.NLXERRF = "N"; /* Clear error flag*/

  if (NLXREC.NLXSCRNX == 1) /* If screen nk0eM100*/
    while (NLXREC.NLXEOSF == "N") /* While not end-of-screen*/
      NK0E-100();
    end
  else
    if (NLXREC.NLXSCRNX == 2) /* If screen nk0eM200*/
      NLXCSCRN = "NK0EM200";
      NK0E-101(); /* Initializes map 100 for return*/
      while (NLXREC.NLXEOSF == "N") /* While not end-of-screen*/
        NK0E-200();
      end
      NLXCSCRN = "NK0EM100";
      if (NK0EW-HIGH-PAGE-NBR > 0)
        NK0EW-NEXT-PAGE-NBR = 1;
        /* NK0EW-HIGH-PAGE-NBR = NK0EW-HIGH-PAGE-NBR - 1;*/
        NK0ES-BUILD-MAP100();
        NK0E-100();
      end
    end
  end


   /* at this point;*/
       /* if the end-of-application flag (nlxeoaf ) = 'n'*/
         /* the perform will return to the top of nk0e050...*/
       /* else*/
         /* the perform will auto return to nk0e000.*/


end // end NK0E-050

// header screen 1
Function NK0E-100()
   /* -----------------------------------------------------------*/
       /* Process screen nk0eM100*/

        /* note - this process is being performed in a*/
        /* "while loop" from nk0e050 until the end-of-screen*/
        /* flag (nlxeosfl) is set to 'y'.*/

   /* -----------------------------------------------------------*/

  NLXREC.NLXCPROC = "NK0E-100";

  if (NLXREC.NLXBLDSC == "Y")
    NK0E-101();
    NLXREC.NLXBLDSC = "N";
  end

  /* ************************************************************************/
  /* Edit for active claims.  do not display this map if there are not*/
  /* items to display.  This will only happen for PR claim types.*/
  /* Also edit claims from invoicing.  if no items, do not display this map*/
  /* ************************************************************************/

  if (NKWREC.XXX-SUM-ZCR-CD == "PR") /* product related claim*/
    if (NKWREC.ZCS-CLM-STAT-CD == "AC" /* claim is active*/
     || NKWREC.ZCS-CLM-STAT-CD == "RP" /* claim is active reprint*/
     || NKWREC.ZCS-CLM-STAT-CD == "VD" /* claim is void*/
     || NKW-FROM-APP == "NK0G")        /* from invoicing*/
      if (NK0EW-HIGH-PAGE-NBR == 0) /* no items found on claim*/
        NKWREC.NKW-EZEMNO = 363; /* no adjustment msg*/
        COMMAREA.CATOAP = "NK0B";
        COMMAREA.CAUSERA = NKWREC.NKW-GROUP;
        XPNL002();
      end
    end
  end
  if (NK0EW-ENTER-CNFM-FL == "R")
    NK0EW-ENTER-CNFM-FL = "Y";
    converseLib.validationFailed(394);
    return;
  end

  converse NK0EM100 ;

  NK0EM100.VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";


  NK0E-110(); /* check attention identifier*/

  if (NLXREC.NLXERRF == "N") /* check for error*/
    NK0E-120(); /* process entered option*/
  end

  if (NLXREC.NLXERRF == "N") /* check for error*/
    NK0E-130(); /* determine next action...*/
  end

end // end NK0E-100

// Build screen
Function NK0E-101()
   /* **************************************/
   /* Build MAP NK0EM100                 **/
   /* **************************************/

  NLXREC.NLXCPROC = "NK0E-101";

   /* Get customer and distributor records*/

  set KUCREC empty;
  set VDSTRB01 empty;
  KUCREC.KUCCOID = NKWREC.KUCCOID;
  VDSTRB01.KUCCOID = NKWREC.KUCCOID;
  NK0ES-S-VCMPNY01();
  NK0ES-S-VDSTRB01();

  NK0ES-DEL-TMP-STG(); /* Delete temp storage prior to writting*/
                                  /* to it*/
  NK0EW-INX = 0;
  VNCADJ01.NL-CLM-ID = NKWREC.NL-CLM-ID;

  NK0ES-S1-VNCADJ01(); /* Open cursor on claim style items.*/
                                  /* to it*/
  while (SQLCA.VAGen_SQLCODE == 0)
    NK0ES-N1-VNCADJ01(); /* Fetch next on claim style items.*/
    if (SQLCA.VAGen_SQLCODE == 0)
      NK0ES-BLD-TMP-STG(); /* Load all items to temp storage one*/
    end
  end

  NK0ES-C1-VNCADJ01(); /* Close cursor on claim style items.*/

  if (NK0EW-INX > 0)
    NK0ES-ADD-TMP-STG(); /* Add last page.*/
  end

  NK0EW-NEXT-PAGE-NBR = 1;

  if (NKWREC.ZCR-CLM-RSN-CD == "MI" /* DISPLAY INVOICE & PF17 MESSAGE*/
   && NKWREC.ZCS-CLM-STAT-CD != "AC"
   && NKWREC.ZCS-CLM-STAT-CD != "RP"
   && NKWREC.ZCS-CLM-STAT-CD != "VD")
    converseLib.validationFailed(380);
  end
  NK0ES-BUILD-MAP100(); /* Build the map*/


end // end NK0E-101

// Validate PF keys; act on some
Function NK0E-110()
   /* -----------------------------------------------------------*/
     /* Validate PF keys*/

     /* Active PF keys: 1, 3, 4, 7, 8, 12, 17, and 20*/
   /* -----------------------------------------------------------*/

  NLXREC.NLXCPROC = "NK0E-110";

  set NK0EM100.CATOAP initialAttributes;
  set NK0EM100.CAITEM initialAttributes;

  NK0ES-MOVE-MOD-FL(); /* set mod flags for pop-ups*/
  if (NK0EW-MOD-FLAGS == " ")
    NK0EW-ENTER-CNFM-FL = "Y";
  end

  /* ************************************************************************/
  /* if accessed from crediting of an invoice, do not allow other than*/
  /* pf3, 7, 8, 12 and enter*/
  /* ************************************************************************/

  if (NKW-FROM-APP == "NK0G") /* Invoice credit path*/
    if (converseVar.eventKey is enter) /* If enter*/
      if (NK0EM100.CATOAP > " ") /* Try to fast path*/
        converseLib.validationFailed(353); /* Fast path not allowed now*/
        NLXREC.NLXERRF = "Y"; /* Mark with error*/
        return;
      else
        return;
      end
    end
    if (converseVar.eventKey is pf7 /* Page forward*/
     || converseVar.eventKey is pf8) /* Page backward*/
      return;
    end
    if (converseVar.eventKey is pf1
     || converseVar.eventKey is pf4
     || converseVar.eventKey is pf20)
      converseLib.validationFailed(343); /* PF key not valid during IVC crediting*/
      NLXREC.NLXERRF = "Y"; /* Mark with error*/
      return;
    end
    if (converseVar.eventKey is pf3 /* All other PF keys except PF3 & 17*/
     || converseVar.eventKey is pf17
     || converseVar.eventKey is pf12)
      /* NEXT SENTENCE*/
    else
      converseLib.validationFailed(2); /* Fast path not allowed now*/
      NLXREC.NLXERRF = "Y"; /* Mark with error*/
      return;
    end
  end

   /* ***********************************/
      /* check for fastpath option/item*/
   /* ***********************************/

  if (NK0EM100.CATOAP != " ") /* If fastpath option entered,*/
    if (converseVar.eventKey is enter)
      NK0ES-DEL-TMP-STG(); /* Purge storage before exit.*/
      COMMAREA.CATOAP = NK0EM100.CATOAP;
      COMMAREA.CAITEM = NK0EM100.CAITEM;
      COMMAREA.CAUSERA = " ";
      XPNL002(); /* Exit application*/
      set NK0EM100.CAITEM cursor, bold; /* Exit failed*/
      return;
    end
  end

  if (NLXREC.NLXPF3 == "Y" /* pf3 confirm flag*/
   && converseVar.eventKey not pf3)
    NLXREC.NLXPF3 = "N";
  end

  if (NLXREC.NLXPF4 == "Y" /* pf4 confirm flag*/
   && converseVar.eventKey not pf4)
    NLXREC.NLXPF4 = "N";
  end

  if (NLXREC.NLXPF20 == "Y" /* pf20 confirm flag*/
   && converseVar.eventKey not pf20)
    NLXREC.NLXPF20 = "N";
  end


  if (converseVar.eventKey is pf1) /* Skip edit/updt, go to 'help'*/
    NK0ES-DEL-TMP-STG();
    XSPF1(); /* Exit*/
  end

  if (converseVar.eventKey is pf3)
    if (NLXREC.NLXPF3 == "N"
     && NKWREC.NKW-MAP-MODE != "I")
      NLXREC.NLXPF3 = "Y";
      converseLib.validationFailed(108); /* updates not saved - pf3 to confirm*/
      NLXREC.NLXERRF = "Y";
      return;
    end
    NK0ES-DEL-TMP-STG();
    if (NKWREC.XXX-SUM-ZCR-CD == "MI") /* If MISC goto comment*/
      COMMAREA.CATOAP = "NK0C"; /* Go to previous level*/
    else /* Else goto styles*/
      COMMAREA.CATOAP = "NK0D"; /* Go to previous level*/
    end
    COMMAREA.CAUSERA = NKW-GROUP;
    XPNL002(); /* Exit*/
  end

  if (converseVar.eventKey is pf4) /* Go to master menu*/
    if (NLXREC.NLXPF4 == "N"
     && NKWREC.NKW-MAP-MODE != "I")
      NLXREC.NLXPF4 = "Y";
      converseLib.validationFailed(109); /* updates not saved - pf4 to confirm*/
      NLXREC.NLXERRF = "Y";
      return;
    end
    NK0ES-DEL-TMP-STG();
    COMMAREA.CAUSERA = " "; /* Exit*/
    XSPF4();
  end

  if (converseVar.eventKey is pf20)
    if (NLXREC.NLXPF20 == "N"
     && NKWREC.NKW-MAP-MODE != "I")
      NLXREC.NLXPF20 = "Y";
      converseLib.validationFailed(110); /* updates not saved - pf20 to confirm*/
      NLXREC.NLXERRF = "Y";
      return;
    end
    NK0ES-DEL-TMP-STG();
    COMMAREA.CATOAP = "NL0A"; /* NIL menu*/
    COMMAREA.CAUSERA = NKWREC.NKW-GROUP;
    XPNL002(); /* Exit*/
  end

  /* ************************************************************************/
  /* Action key edit for Active claims*/
  /* ************************************************************************/

  if (NKWREC.ZCS-CLM-STAT-CD == "AC"
   || NKWREC.ZCS-CLM-STAT-CD == "RP"
   || NKWREC.ZCS-CLM-STAT-CD == "VD")
    if (converseVar.eventKey is pf12
     || converseVar.eventKey is pf17)
      converseLib.validationFailed(362);
      NLXREC.NLXERRF = "Y";
    end
  end

  if (converseVar.eventKey is enter /* Valid non-exit pf keys*/
   || converseVar.eventKey is pf7   
   || converseVar.eventKey is pf8   
   || converseVar.eventKey is pf12  
   || converseVar.eventKey is pf17)
    return;
  end

      /* pf key not valid*/

  converseLib.validationFailed(2); /* PF key not valid*/
  NLXREC.NLXERRF = "Y"; /* Mark with error*/

end // end NK0E-110

// Edit/Act on function keys
Function NK0E-120()
  /* ************************************************************************/
  /* Edit Claims Screen Entries*/
  /* ************************************************************************/

  NLXREC.NLXCPROC = "NK0E-120";

  XXXMSG = " ";

  if (NK0EW-VGCOA001-STATUS == "0")
    NK0EW-GCOA-MESSAGE = " ";
  else
    if (NK0EW-VGCOA001-STATUS == "1")
      converseLib.validationFailed(434); /* send message non unique row found*/
      move NK0EW-GCOA-MESSAGE to XXXMSG withV60Compat;
      NK0EW-VGCOA001-STATUS = "0";
    else
      if (NK0EW-VGCOA001-STATUS == "9")
        NK0EW-GCOA-MESSAGE = " ";
      else
        converseLib.validationFailed(433); /* send message row not found*/
        move NK0EW-GCOA-MESSAGE to XXXMSG withV60Compat;
        NLXREC.NLXERRF = "Y";
      end
    end
  end



  if (NKWREC.ZCS-CLM-STAT-CD == "AC"
   || NKWREC.ZCS-CLM-STAT-CD == "VD"
   || NKWREC.ZCS-CLM-STAT-CD == "RP")
    NK0ES-CK-M100-NBR();
    return;
  end

  /* ************************************************************************/
  /* Reset the receivable type for the claim*/
  /* ************************************************************************/

  NK0EW-INX = 1;
  while (NK0EW-INX <= 6)
    if (NK0EW-NEXT-PAGE-NBR == 1)
      if (NK0EM100.NK0EM-ZCHCD[NK0EW-INX] > " "
       && NK0EM100.NK0EM-ZCHCD[NK0EW-INX] in ZCHTBL.ZCHCD
       && NK0EM100.NK0EM-CLM-AMT[NK0EW-INX] > 0)
        NKWREC.ZRTCD = ZCHTBL.ZRTCD[sysVar.arrayIndex];
        NK0ES-GET-RCV-GL();
        if (NK0EM100.NK0EM-IVC[NK0EW-INX] > 0)
          NK0ES-GET-OP1CMPNB(); /* get comp number*/
        end
        NK0EW-INX = 7;
      else
        NK0EW-INX = NK0EW-INX + 1;
      end
    else
      NK0EW-INX = 7;
    end
  end

  NK0ES-M100-POP-UPS(); /* Pop-up window logic*/

  converseLib.clearScreen();
  
  set NK0EM100.NK0EM-FM-PAGE initialAttributes;

  NK0EW-INX = 6; /* map inx*/

  /* ************************************************************************/
  /* There are 6 occurances of charges on each map.  The edits are per-*/
  /* formed in a while loop from the bottom up.*/
  /* ************************************************************************/

  while (NK0EW-INX > 0)
    NK0EW-IVC-ARRAY[NK0EW-INX] = 0;
    NK0EW-ERR-FLAG = "N";
    /*  */
    /* **********************************************************************/
    /*  */
    /* Test the charge type code to make sure it is valid.*/
    /*  */
    /* **********************************************************************/
    /*  */
    if (NK0EW-02-CLM-QTY[NK0EW-INX] == 0) /* new item (not on claim)*/
      if (NK0EM100.NK0EM-ZCHCD[NK0EW-INX] > " ")
        if (NK0EM100.NK0EM-ZCHCD[NK0EW-INX] in ZCHTBL.ZCHCD) /* Valid ZCHCD ?*/
          NK0EM100.NK0EM-ZCHDESC[NK0EW-INX] = ZCHTBL.ZCHDESC[sysVar.arrayIndex];
        else
          NK0EW-ERR-FLAG = "Y";
          NK0EM100.NK0EM-ZCHDESC[NK0EW-INX] = " ";
          set NK0EM100.NK0EM-ZCHCD[NK0EW-INX] bold, modified, cursor;
          converseLib.validationFailed(10);
        end
      else
        NK0EM100.NK0EM-ZCHDESC[NK0EW-INX] = " ";
      end
    end
    /*  */
    /* **********************************************************************/
    /* Edit the Invoice, if entered.*/
    /* Edit the invoice to insure it is of the same type as the claim*/
    /*  */
    /* Edit the Receivable GL code to make sure is matches that of the*/
    /* claim.*/
    /* **********************************************************************/
    /*  */
    NK0EW-IVC-ERR-FL = "N";
    if (NK0EW-02-CLM-QTY[NK0EW-INX] == 0 /* new item (not on claim)*/
     && NK0EM-IVC[NK0EW-INX] > 0)        /* invoice id entered*/
      NK0ES-EDIT-INVOICE();
      if (NK0EW-IVC-ERR-FL == "Y")
        NLXREC.NLXERRF = "Y";
      end
    end
    /*  */
    /* **********************************************************************/
    /*  */
    /* If the charge type is valid, the invoice will be edited, if an*/
    /* invoice id was entered.*/
    /*  */
    /* Edit the invoice to insure charge is on the invoice.*/
    /*  */
    /* Edit invoice balance to insure they did not drive the balance*/
    /* negative*/
    /* **********************************************************************/
    /*  */
    if (NK0EM100.NK0EM-ZCHCD[NK0EW-INX] in ZCHTBL.ZCHCD) /* Valid ZCHCD ?*/
      if (NK0EM100.NK0EM-CLM-AMT[NK0EW-INX] > 0)
        if (NK0EM100.NK0EM-IVC[NK0EW-INX] > 0)
          if (NK0EW-IVC-ERR-FL == "N")
            NK0ES-EDIT-IVC-BAL();
          end
        else
          NK0ES-EDIT-RCV-TYP();
        end
      end
    end
    /*  */
    /* **********************************************************************/
    /*  */
    /* Edit new item to insure a charge type was entered*/
    /* **********************************************************************/
    /*  */
    if (NK0EW-02-CLM-QTY[NK0EW-INX] == 0) /* new item (not on claim)*/
      if (NK0EM100.NK0EM-CLM-AMT[NK0EW-INX] > 0
       || NK0EM100.GLAENT[NK0EW-INX] > " "
       || NK0EM100.GLARCID[NK0EW-INX] > " "
       || NK0EM100.GLANTAC[NK0EW-INX] > " "
       || NK0EM100.GLASUB[NK0EW-INX] > " "
       || NK0EM100.GLAPRJ[NK0EW-INX] > " ")
        if (NK0EM100.NK0EM-ZCHCD[NK0EW-INX] == "  ")
          NK0EW-ERR-FLAG = "Y";
          set NK0EM100.NK0EM-ZCHCD[NK0EW-INX] bold, modified, cursor;
          set NK0EM100.NK0EM-CLM-AMT[NK0EW-INX] modified, bold;
          set NK0EM100.GLAENT[NK0EW-INX] modified, bold;
          set NK0EM100.GLARCID[NK0EW-INX] modified, bold;
          set NK0EM100.GLANTAC[NK0EW-INX] modified, bold;
          set NK0EM100.GLASUB[NK0EW-INX] modified, bold;
          set NK0EM100.GLAPRJ[NK0EW-INX] modified, bold;
          converseLib.validationFailed(213);
          NK0EM100.NK0EM-ZCHDESC[NK0EW-INX] = " ";
        end
      end
    end
    /*  */
    /* **********************************************************************/
    /* Edit the GL code*/
    /* **********************************************************************/
    /*  */
    if (NK0EW-ERR-FLAG == "N"
     && NK0EM100.NK0EM-CLM-AMT[NK0EW-INX] > 0)
      if (NK0EW-MOD-ZCHCD[NK0EW-INX] == "Y"
       || NK0EW-SLS-GL-MOD-FL[NK0EW-INX] == "Y")
        NK0ES-EDIT-GL-CODE();
      end
    end
    /*  */
    /* **********************************************************************/
    /* Edit Amount, may not exceed 10,000,000.00*/
    /* **********************************************************************/
    /*  */
    if (NK0EM100.NK0EM-CLM-AMT[NK0EW-INX] > 9999999.99)
      set NK0EM100.NK0EM-ZCHCD[NK0EW-INX] bold, modified;
      set NK0EM100.NK0EM-CLM-AMT[NK0EW-INX] modified, bold, cursor;
      NK0EW-ERR-FLAG = "Y";
      converseLib.validationFailed(367);
    end
    /*  */
    /* **********************************************************************/
    /* Amount must be gt 0 to add item*/
    /* **********************************************************************/
    /*  */
    if (NK0EW-02-CLM-QTY[NK0EW-INX] == 0
     && NK0EM100.NK0EM-CLM-AMT[NK0EW-INX] == 0)
      if (NK0EM100.NK0EM-ZCHCD[NK0EW-INX] > " "
       || NK0EM100.GLAENT[NK0EW-INX] > " "
       || NK0EM100.GLARCID[NK0EW-INX] > " "
       || NK0EM100.GLANTAC[NK0EW-INX] > " "
       || NK0EM100.GLASUB[NK0EW-INX] > " "
       || NK0EM100.GLAPRJ[NK0EW-INX] > " ")
        set NK0EM100.NK0EM-ZCHCD[NK0EW-INX] bold, modified;
        set NK0EM100.NK0EM-CLM-AMT[NK0EW-INX] modified, bold, cursor;
        NK0EW-ERR-FLAG = "Y";
        converseLib.validationFailed(371);
      end
    end
    /*  */
    /* **********************************************************************/
    /* Set inx down one*/
    /* **********************************************************************/
    /*  */
    NK0EW-INX = NK0EW-INX - 1;
  /*  */
  /* **********************************************************************/
  /* The NK0EW-ERR-FLAG is used to process each item and control the*/
  /* edits which are performed.  It is not used to set the application*/
  /* error flag.*/
  /* **********************************************************************/
  /*  */
    if (NK0EW-ERR-FLAG == "Y")
      NLXREC.NLXERRF = "Y";
    end

  end
  VNCHDR01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  NK0ES-S-VNCHDR01();

  /*  */
  /* **********************************************************************/
  /* Update the new adjustment array.  At this point if a line was changed*/
  /* and all edits passed, the values need to be move to the array to*/
  /* test for dup adjustments.*/
  /* **********************************************************************/
  /*  */
  if (NLXREC.NLXERRF == "N")
    NK0EW-INX = 1;
    NK0ES-MOVE-NEW-CHG();
    NK0EW-INX = 1;
    while (NK0EW-INX <= 6)
    /*  */
    /* **********************************************************************/
    /* Edit for dup adjustments - down to GL code level, from top down*/
    /* **********************************************************************/
    /*  */
      if (NK0EW-02-CLM-QTY[NK0EW-INX] == 0
       && NK0EM100.NK0EM-ZCHCD[NK0EW-INX] > " ")
        NK0ES-EDIT-DUP-CHG();
      end
      NK0EW-INX = NK0EW-INX + 1;
    end
  end
  /*  */
  /* ************************************************************************/
  /* This edit will prevent a suscript error while new charges are*/
  /* being added to a claim.  If the subscript is within 6 of its*/
  /* max value, the user will be required to update the claim before*/
  /* adding any more new styles.  The max value is 100.*/
  /* ************************************************************************/
  /*  */
  if (NK0EW-INX3 > 198 /* dup table would overflow unless*/
   /* updates done*/
   && NLXREC.NLXERRF == "N")
    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf7
     || converseVar.eventKey is pf12
     || converseVar.eventKey is pf13)
      /* NEXT SENTENCE*/
    else
      converseLib.validationFailed(316);
      NLXREC.NLXERRF = "Y";
    end
  end

  /*  */
  /* ************************************************************************/
  /* This edit test the changing of the from page number to cause*/
  /* paging to a specific page.  this will only be done if enter was*/
  /* pressed*/
  /* ************************************************************************/
  /*  */
  NK0ES-CK-M100-NBR();

end // end NK0E-120

// Determine next action M100
Function NK0E-130()
  /* ************************************************************************/
  /* Determine next action from hdr 1*/
  /* ************************************************************************/

  NLXREC.NLXCPROC = "NK0E-130";

  /* ************************************************************************/
  /* Update or add current page to the temp storage*/
  /* ************************************************************************/

  if (NKWREC.ZCS-CLM-STAT-CD == "AC"
   || NKWREC.ZCS-CLM-STAT-CD == "RP"
   || NKWREC.ZCS-CLM-STAT-CD == "VD")
     /* next sentence*/
  else
    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf7
     || converseVar.eventKey is pf8
     || converseVar.eventKey is pf17)
      NK0ES-UPDT-NK0EW02();
      if (NK0EW-NEXT-PAGE-NBR > NK0EW-HIGH-PAGE-NBR)
        NK0ES-ADD-TMP-STG();
      else
        if (NK0EW-HIGH-PAGE-NBR > 0)
          NK0ES-UPDT-TMP-STG();
        end
      end
    end
  end

  /* ************************************************************************/
  /* Enter - update the claim header and transfer to NK0B*/
  /* ************************************************************************/



  if (converseVar.eventKey is enter)
    if (NK0EW-HOLD-PAGE-NBR != NK0EM100.NK0EM-FM-PAGE)
      NK0EW-NEXT-PAGE-NBR = NK0EM100.NK0EM-FM-PAGE;
      NK0ES-BUILD-MAP100();
    else
      if (NKWREC.ZCS-CLM-STAT-CD == "AC"
       || NKWREC.ZCS-CLM-STAT-CD == "RP"
       || NKWREC.ZCS-CLM-STAT-CD == "VD")
        NK0EW-ENTER-CNFM-FL = "Y";
      else
        if (NK0EW-ENTER-CNFM-FL == "Y")
          NK0ES-UPDATE-ADJ();
        else
          if (NK0EW-ENTER-CNFM-FL != "Y")
            NK0EW-ENTER-CNFM-FL = "Y";
            converseLib.validationFailed(394);
            return;
          end
        end
      end
      if (NLXREC.NLXERRF == "N"
       && NK0EW-ENTER-CNFM-FL == "Y")
        COMMAREA.CAUSERA = NKWREC.NKW-GROUP;
        COMMAREA.CATOAP = "NK0B";
        XPNL002();
        return;
      end
    end
  end

  /* ************************************************************************/
  /* PF7 - page forward*/
  /* ************************************************************************/

  if (converseVar.eventKey is pf7)
    NK0ES-MAP100-PF7();
    return;
  end

  /* ************************************************************************/
  /* PF8 - page back*/
  /* ************************************************************************/

  if (converseVar.eventKey is pf8)
    NK0ES-MAP100-PF8();
    return;
  end

  /* ************************************************************************/
  /* PF12 - re-display the screen*/
  /* ************************************************************************/

  if (converseVar.eventKey is pf12)
    converseLib.validationFailed(372);
    return;
  end

  /* ************************************************************************/
  /* PF17 - display map 200 and then rebuild map 100*/
  /* ************************************************************************/

  if (converseVar.eventKey is pf17)
    NLXCSCRN = "NK0EM200";
    move NK0EW-NEXT-PAGE-NBR to NK0EW-HOLD-PAGE-NBR withV60Compat;
    NK0E-200();
    NLXCSCRN = "NK0EM100";
    move NK0EW-HOLD-PAGE-NBR to NK0EW-NEXT-PAGE-NBR withV60Compat;
    NK0ES-GET-TMP-STG();
    NK0ES-BUILD-MAP100();
    return;
  end

end // end NK0E-130

// Ivc Items Select screen
Function NK0E-200()
  /* ************************************************************************/
  /* Process screen NK0EM200*/
  /* This process is accessed from NK0E-130*/
  /* note - this process will process will process ivc array*/
  /* "nk0ew01" record.  For each invoice entered with no*/
  /* charge will be presented on the map 200 for the user to*/
  /* select charges for the claim.  The user will have to enter*/
  /* the claim amount for the item to be selected*/
  /* ************************************************************************/


  NLXREC.NLXCPROC = "NK0E-200";

  /* ************************************************************************/
  /* Move invoice to the array to be processed.  This is done beacuse we*/
  /* fill the page with the items selected and would overlay invoices.*/
  /* ************************************************************************/
  if (converseVar.eventKey is pf17)
    NK0EW-INX = 1;
    while (NK0EW-INX <= 10)
      NK0EW-IVC-ARRAY[NK0EW-INX] = 0; /* init each array item*/
      NK0EW-INX = NK0EW-INX + 1;
    end
    NLXLINEX = 1;
    NK0EW-INX = 1;
    while (NK0EW-INX <= 6)
      if (NK0EM100.NK0EM-ZCHCD[NK0EW-INX] == " "
       && NK0EM100.NK0EM-IVC[NK0EW-INX] > 0)
        NK0EW-IVC-ARRAY[NLXLINEX] = NK0EM100.NK0EM-IVC[NK0EW-INX];
        NLXLINEX = NLXLINEX + 1;
      end
      NK0EW-INX = NK0EW-INX + 1;
    end
  end
  NLXLINEX = 1;
  while (NLXLINEX <= 10)
    if (NK0EW-IVC-ARRAY[NLXLINEX] > 0)
      NLXBLDSC = "Y";
      NLXEOSF = "N";
      set NK0EW04 empty;
      while (NLXEOSF == "N")
        NK0E-20010();
      end
    end
    NLXLINEX = NLXLINEX + 1;
  end
  if (NLXREC.NLXCSCRN == "NK0EM100")
    NLXEOSF = "N";
  end

end // end NK0E-200

// Ivc Adj Select screen
Function NK0E-20010()
   /* -----------------------------------------------------------*/
       /* Process screen NK0EM200*/

     /* note - this process is being performed from NK0E-200.*/
     /* This process will display all adjs on an invoice, unless it*/
     /* is already on the current claim.  The user will be allowed to*/
     /* page foreward and backward, and to a specific page.  They will*/
     /* have to hit the enter key or pf3 to continue to the next invoice.*/
     /* The program's temp CICS storage will be updated with the new*/
     /* claim items, that is this process will not update the database.*/

   /* -----------------------------------------------------------*/

  NLXREC.NLXCPROC = "NK0E-201";

  if (NLXREC.NLXBLDSC == "Y")
    NK0E-201();
    NLXREC.NLXBLDSC = "N";
  end

  converse NK0EM200 ;

  NK0EM200.VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";


  NK0E-210(); /* check attention identifier*/

  if (NLXREC.NLXERRF == "N") /* check for error*/
    NK0E-220(); /* process entered option*/
  end

  if (NLXREC.NLXERRF == "N") /* check for error*/
    NK0E-230(); /* determine next action...*/
  end

end // end NK0E-20010

// Build screen
Function NK0E-201()
   /* **************************************/
   /* Build MAP NK0EM200                 **/
   /* **************************************/


  NLXREC.NLXCPROC = "NK0E-201";

  converseLib.clearScreen();
  set NK0EM200 initial;

  NK0EM200.XXXRVNBR = "00"; /* revision nbr*/
  NK0EM200.XXXMAPNM = "NK0EM200"; /* map name*/
  NK0EM200.XXXPRCNM = "NK0E-200"; /* process name*/
  NK0EM200.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/

   /* Build header of map.................*/

  NK0EM200.KUCCOID = NKWREC.KUCCOID;
  NK0EM200.KUMSTRID = NKWREC.KUMSTRID;
  NK0EM200.KUCCONM = NKWREC.KUCCONM;
  NK0EM200.XCTDESC = NKWREC.XCTDESC;
  NK0EM200.NL-CLM-ID = NKWREC.NL-CLM-ID;
  NK0EM200.NIDIVCID = NK0EW-IVC-ARRAY[NLXLINEX];
  move NK0EW-NEXT-PAGE-NBR to NK0EW-NEW-PAGE-NBR withV60Compat;


   /* build key to cursor for invoice items*/

  NK0EW-INX4 = 0;
  if (NKWREC.XXX-SUM-ZCR-CD == "MI")
    set VMIITM01 empty;
    VMIITM01.NIDIVCID = NK0EW-IVC-ARRAY[NLXLINEX];
    VMIITM01.ZCHCD = "**";
    NK0ES-S1-VMIITM01(); /* Open cursor on Misc Ivc Items.*/

    while (SQLCA.VAGen_SQLCODE == 0) /* Process until end of invoice.*/
      NK0ES-N1-VMIITM01(); /* Fetch next on claim style items.*/
      if (SQLCA.VAGen_SQLCODE == 0)
        if (VMIITM01.ZCHCD > " ")
          NK0ES-BLD-MI-STG(); /* Load all items to NK0EW04*/
        end
      end
    end

    NK0ES-C1-VMIITM01(); /* Close cursor on Misc Ivc Iems.*/
  else
    set VPIADJ01 empty;
    VPIADJ01.NIDIVCID = NK0EW-IVC-ARRAY[NLXLINEX];
    VPIADJ01.ZCHCD = "**";
    NK0ES-S2-VPIADJ01(); /* Open cursor on Prod Ivc Adj.*/

    while (SQLCA.VAGen_SQLCODE == 0) /* Process until end of invoice.*/
      NK0ES-N2-VPIADJ01(); /* Fetch next on adjustments items.*/
      if (SQLCA.VAGen_SQLCODE == 0)
        if (NK0EW-INX4 == 0) /* First item Fetched*/
          NK0ES-BLD-PI-STG(); /* Load all items to NK0EW04*/
        else
          if (VPIADJ01.ZCHCD != NK0EW-04-ZCHCD[NK0EW-INX4])
                                                         /* new charge type*/
            NK0ES-BLD-PI-STG(); /* Load all items to NK0EW04*/
          end
        end
      end
    end

    NK0ES-C2-VPIADJ01(); /* Close cursor on adjustment.*/
  end

  /* ************************************************************************/
  /* determine the to map page number.  we will divide the index for the*/
  /* working storage by twelve.  Then we will multiply the number by*/
  /* twelve to see if it is equal to the index.  if not we will add 1 to*/
  /* the to page page count. we will aslo set NK0Ew-inx4 to 12 for 1st page*/
  /* ************************************************************************/
  NK0EW-MAP200-TO-PAGE = NK0EW-INX4 / 12;
  NK0EW-ARRAY-CNT = NK0EW-MAP200-TO-PAGE * 12;
  if (NK0EW-ARRAY-CNT == NK0EW-INX4)
  /* next sentence*/
  else
    NK0EW-MAP200-TO-PAGE = NK0EW-MAP200-TO-PAGE + 1;
  end
  NK0EW-INX4 = 12;
  NK0EM200.NK0EM-FM-PAGE = 1;
  NK0EW-MAP200-FM-PAGE = 1;
  NK0EM200.NK0EM-TO-PAGE = NK0EW-MAP200-TO-PAGE;

  NK0ES-BUILD-MAP200(); /* Build the map*/
end // end NK0E-201

// Validate PF keys; act on some
Function NK0E-210()
   /* -----------------------------------------------------------*/
     /* Validate PF keys*/

     /* Active PF keys: 3, 7, 8, and Enter*/
   /* -----------------------------------------------------------*/

  NLXREC.NLXCPROC = "NK0E-210";


  if (converseVar.eventKey is pf3)
    NLXEOSF = "Y";
    NLXERRF = "Y";
  end

  if (converseVar.eventKey is enter /* Valid non-exit pf keys*/
   || converseVar.eventKey is pf7   
   || converseVar.eventKey is pf8) 
    return;
  end

      /* pf key not valid*/

  converseLib.validationFailed(2); /* PF key not valid*/
  NLXREC.NLXERRF = "Y"; /* Mark with error*/

end // end NK0E-210

// Edit/Act on function keys
Function NK0E-220()
   /* ************************************/
   /* Edit item select screen*/
   /* ************************************/

  NLXREC.NLXCPROC = "NK0E-220";

  set NK0EM200.NK0EM-FM-PAGE initialAttributes;

   /* There are 12 occurances of styles on each map.  The edits are per-*/
   /* formed in a while loop from the bottom up.*/

  NK0EW-INX = 12;
  NK0EW-INX4 = NK0EW-INX4 + 12;
  /* ************************************************************************/
  /* Edit the entered claim quanties.  First get the invoice balance*/
  /* to see if the claim quantity enter is greater than the current*/
  /* balance.  Always determine the balance prior to the edit.*/
  /* ************************************************************************/
  while (NK0EW-INX >= 1)
    NK0EW-ERR-FLAG = "N";
    NK0EW-IVC-BAL = 0;
    /* **********************************************************************/
    /* If the adjustment is greater than spaces in the array, then get*/
    /* **********************************************************************/
    if (NK0EM200.NK0EM-ZCHCD[NK0EW-INX] > " ")
      set NK0EM200.NK0EM-CLM-QTY[NK0EW-INX] initialAttributes;
      if (NK0EM200.NK0EM-CLM-QTY[NK0EW-INX] > 0)
        NK0EW-IVC-BAL = 0;
        if (NKWREC.XXX-SUM-ZCR-CD == "MI")
          set VMIITM01 empty;
          VMIITM01.NIDIVCID = NK0EW-04-NIDIVCID[NK0EW-INX4];
          VMIITM01.ZCHCD = NK0EW-04-ZCHCD[NK0EW-INX4];
          NK0EW-NIBLINBR = NK0EW-04-NIBLINBR[NK0EW-INX4];
          NK0ES-SEL-VMIITM01(); /* get invoice quantity;*/
        else
          set VPIADJ01 empty;
          VPIADJ01.NIDIVCID = NK0EW-04-NIDIVCID[NK0EW-INX4];
          VPIADJ01.ZCHCD = NK0EW-04-ZCHCD[NK0EW-INX4];
          NK0ES-SEL-VPIADJ01(); /* get invoice quantity;*/
        end
        VNCADJ01.NIDIVCID = NK0EW-04-NIDIVCID[NK0EW-INX4];
        VNCADJ01.ZCHCD = NK0EW-04-ZCHCD[NK0EW-INX4];
        NK0EW-NIBLINBR = NK0EW-04-NIBLINBR[NK0EW-INX4];
        NK0ES-SEL-VNCADJ01(); /* get claims quantities;*/
        if (NK0EW-IVC-BAL < NK0EM200.NK0EM-CLM-QTY[NK0EW-INX])
          converseLib.validationFailed(308);
          NLXREC.NLXERRF = "Y";
          set NK0EM200.NK0EM-CLM-QTY[NK0EW-INX] bold, modified, cursor;
        else
          NK0EW-04-NL-CLM-QTY[NK0EW-INX4] = NK0EM200.NK0EM-CLM-QTY[NK0EW-INX];
        end
      end
    end
    NK0EW-INX = NK0EW-INX - 1;
    NK0EW-INX4 = NK0EW-INX4 - 1;
  end
  VNCHDR01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  NK0ES-S-VNCHDR01();

     /* This edit test the changing of the from page number to cause*/
     /* paging to a specific page.  this will only be done if enter was*/
     /* pressed*/

  if (NK0EM200.NK0EM-FM-PAGE is modified)
    if (NK0EM200.NK0EM-FM-PAGE == 1)
         /* next sentence*/
    else
      if (NK0EM200.NK0EM-FM-PAGE > NK0EW-MAP200-TO-PAGE
       || NK0EM200.NK0EM-FM-PAGE == 0)
        converseLib.validationFailed(319);
        NLXREC.NLXERRF = "Y";
        set NK0EM200.NK0EM-FM-PAGE bold, cursor, modified;
      else
        if (converseVar.eventKey not enter
         && NK0EM200.NK0EM-FM-PAGE != NK0EW-MAP200-FM-PAGE)
          converseLib.validationFailed(320);
          NLXREC.NLXERRF = "Y";
          set NK0EM200.NK0EM-FM-PAGE bold, cursor, modified;
        end
      end
    end
  end
end // end NK0E-220

// Determine next action
Function NK0E-230()
   /* **************************************/
   /* Determine next action from hdr 1*/
   /* **************************************/

  NLXREC.NLXCPROC = "NK0E-230";

   /*  */
   /* Enter - update the claim header and transfer to NK0C*/
   /*  */

  if (converseVar.eventKey is enter)
    if (NK0EW-MAP200-FM-PAGE != NK0EM200.NK0EM-FM-PAGE)
      NK0EW-MAP200-FM-PAGE = NK0EM200.NK0EM-FM-PAGE;
      NK0ES-BUILD-MAP200();
    else
      NK0ES-PROCESS-IVC();
      NLXEOSF = "Y";
    end
  end

   /*  */
   /* PF7 - page forward*/
   /*  */

  if (converseVar.eventKey is pf7)
    NK0ES-MAP200-PF7();
  end

   /*  */
   /* PF8 - page back*/
   /*  */

  if (converseVar.eventKey is pf8)
    NK0ES-MAP200-PF8();
  end

end // end NK0E-230

// Add a VNCDEF01 item
Function NK0ES-A-VNCADJ01()
  /* ************************************************************************/
  /* This will add an item to the VNCADJ01 database*/
  /* ************************************************************************/

  NLXREC.NLXCPROC = "NK0ES-A-VNCADJ01";

  /* ************************************************************************/
  /* Determine if the charge has suspence GL code, if yes, set flag.  The*/
  /* flag will be used to update the Accounting ID on the header.*/
  /* ************************************************************************/

  set VZCHGL01 empty;
  VZCHGL01.GLAENT = NK0EW-02-GLAENT[NK0EW-INX];
  VZCHGL01.GLARCID = NK0EW-02-GLARCID[NK0EW-INX];
  VZCHGL01.GLANTAC = NK0EW-02-GLANTAC[NK0EW-INX];
  VZCHGL01.GLASUB = NK0EW-02-GLASUB[NK0EW-INX];
  VZCHGL01.GLAPRJ = NK0EW-02-GLAPRJ[NK0EW-INX];
  NK0ES-F2-VZCHGL01();
  if (SQLCA.VAGen_SQLCODE == 0)
    NK0EW-GL-SUSP-FL = VZCHGL01.NL-GEN-LED-SUSP-FL;
  end

  set VNCADJ01 empty;

  VNCADJ01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  VNCADJ01.ZCHCD = NK0EW-02-ZCHCD[NK0EW-INX];
  VNCADJ01.NIDIVCID = NK0EW-02-IVC[NK0EW-INX];
  VNCADJ01.NIBLINBR = NK0EW-02-NIBLINBR[NK0EW-INX];
  VNCADJ01.GLAENT = NK0EW-02-GLAENT[NK0EW-INX];
  VNCADJ01.GLARCID = NK0EW-02-GLARCID[NK0EW-INX];
  VNCADJ01.GLANTAC = NK0EW-02-GLANTAC[NK0EW-INX];
  VNCADJ01.GLASUB = NK0EW-02-GLASUB[NK0EW-INX];
  VNCADJ01.GLAPRJ = NK0EW-02-GLAPRJ[NK0EW-INX];
  VNCADJ01.NIGUSAMT = NK0EW-02-MAP-QTY[NK0EW-INX];
  VNCADJ01.NIGNETFL = NK0EW-02-NIGNETFL[NK0EW-INX];
  if (VNCADJ01.NIGNETFL == " ")
    VNCADJ01.NIGNETFL = "N";
  end

  XX0XS01(); /* get current date and time for*/
                                  /* zz-change-faimly*/
  VNCADJ01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VNCADJ01.ZZZSDT = XX0XW01.XX0XWDAT;
  VNCADJ01.ZZZCHGTM = XX0XW01.XX0XWTIM;

  call "IO6490" ("A ", SQLCA, VNCADJ01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCADJ01";
    NK0EW-LRG-NBR = VNCADJ01.NL-CLM-ID;
    NK0EW-CHR-IND = VNCADJ01.ZCHCD;
    NK0EW-SML-NBR = VNCADJ01.NIDIVCID;
    TA1REC.TA1TBLKE = NK0EW01.NK0EW-KEY;
    XPNL005(); /* abort routine*/
  end

end // end NK0ES-A-VNCADJ01

// Add a VNCIVX01 item
Function NK0ES-A-VNCIVX01()
  /* ************************************************************************/
  /* This will test the add x-ref records, if they need to be.*/
  /* ************************************************************************/

  NLXREC.NLXCPROC = "NK0ES-A-VNCIVX01";
  NK0EW-INVOICE-FOUND = "N";

  set VNCIVX01 empty;

  VNCIVX01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  VNCIVX01.NIDIVCID = NK0EW-02-IVC[NK0EW-INX];

  call "IO6510" ("S ", SQLCA, VNCIVX01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if a good return,*/
    /* next sentence*/
    else
      TA1REC.TA1DBASE = "DNILO";
      TA1REC.TA1TBLVU = "VNCIVX01";
      NK0EW-LRG-NBR = VNCIVX01.NL-CLM-ID;
      TA1REC.TA1TBLKE = NK0EW01.NK0EW-KEY;
      XPNL005(); /* abort routine*/
    end
  end

  VNCIVX01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  VNCIVX01.NIDIVCID = NK0EW-02-IVC[NK0EW-INX];

  if (NKWREC.XXX-SUM-ZCR-CD == "PR")
    VNCIVX01.ZDTCD = "PI";
  else
    VNCIVX01.ZDTCD = "MI";
  end

  XX0XS01(); /* get current date and time for*/
                                  /* zz-change-faimly*/
  VNCIVX01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VNCIVX01.ZZZSDT = XX0XW01.XX0XWDAT;
  VNCIVX01.ZZZCHGTM = XX0XW01.XX0XWTIM;

  call "IO6510" ("A ", SQLCA, VNCIVX01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCIVX01";
    NK0EW-LRG-NBR = VNCIVX01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0EW01.NK0EW-KEY;
    XPNL005(); /* abort routine*/
  end

end // end NK0ES-A-VNCIVX01

// Add temp storage
Function NK0ES-ADD-TMP-STG()
  /* ***********************************************************************/
  /* Write temp storage*/
  /* ***********************************************************************/

  NLXREC.NLXCPROC = "NK0ES-ADD-TMP-STG";

  move NK0EW-W02-SIZE to NK0EW-02-LENGTH withV60Compat;

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application id*/

  TA5REC.TA5FNCCD = "A"; /* Function code*/

  try
    call "TA0050" (NK0EW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

  /* ***********************************************************************/
  /* If successful, return to previous process.*/
  /* ***********************************************************************/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* normal return code*/
    NK0EW-HIGH-PAGE-NBR = TA5REC.TA5TSQIX; /* Save high page Nbr*/
    return; /* Return*/
  else

    /* *********************************************************************/
    /* Otherwise, indicate that a system error occurred.*/
    /* *********************************************************************/

    converseLib.validationFailed(299); /* Indicate system error*/

    XPNL-006(); /* abend routine*/

  end

end // end NK0ES-ADD-TMP-STG

// Build VPIITM stroage in W03
Function NK0ES-BLD-MI-STG()
   /* ***********************************************************************/
   /*  */
   /* Build array in nk0eW04 for all items on an invoice which are not*/
   /* already on this claim.  The invoice item will be used to build a key*/
   /* to the VNCadj01 data base to see if it is already on the claim.*/
   /* If the item is on the claim it will not be written to storage.  The*/
   /* new claim item array will aslo be searched to see if style was added*/
   /* to the claim during maintenance.*/
   /* ***********************************************************************/

  NLXREC.NLXCPROC = "NK0ES-BLD-MI-STG";

   /* Build current claim style item key.*/

  VNCADJ01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  VNCADJ01.NIDIVCID = VMIITM01.NIDIVCID;
  VNCADJ01.NIBLINBR = VMIITM01.NIBLINBR;
  VNCADJ01.ZCHCD = VMIITM01.ZCHCD;
  VNCADJ01.GLAENT = VMIITM01.GLAENT;
  VNCADJ01.GLANTAC = VMIITM01.GLANTAC;
  VNCADJ01.GLARCID = VMIITM01.GLARCID;
  VNCADJ01.GLASUB = VMIITM01.GLASUB;
  VNCADJ01.GLAPRJ = VMIITM01.GLAPRJ;

  NK0ES-S-VNCADJ01(); /* select unique on vncsty01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Item on found, return without saving*/
    return;
  end

  SQLCA.VAGen_SQLCODE = 0; /* reset sqlcode*/

  NK0EW-MAP-IVC = VMIITM01.NIDIVCID;
  NK0EW-MAP-NIBLINBR = VMIITM01.NIBLINBR;
  NK0EW-MAP-ZCHCD = VMIITM01.ZCHCD;
  NK0EW-MAP-GLAENT = VMIITM01.GLAENT;
  NK0EW-MAP-GLANTAC = VMIITM01.GLANTAC;
  NK0EW-MAP-GLARCID = VMIITM01.GLARCID;
  NK0EW-MAP-GLASUB = VMIITM01.GLASUB;
  NK0EW-MAP-GLAPRJ = VMIITM01.GLAPRJ;
  NK0EW-INX2 = 1;
  while (NK0EW-INX2 <= 204)
    if (NK0EW-03-NEW-MISC[NK0EW-INX2] == NK0EW-MAP-MISC)
      return; /* adjust already added to claim*/
    end
    NK0EW-INX2 = NK0EW-INX2 + 1;
  end

   /* At this point the item may be added to the internal array*/

  NK0EW-INX4 = NK0EW-INX4 + 1;
  NK0EW-04-NIDIVCID[NK0EW-INX4] = VMIITM01.NIDIVCID;
  NK0EW-04-NIBLINBR[NK0EW-INX4] = VMIITM01.NIBLINBR;
  NK0EW-04-ZCHCD[NK0EW-INX4] = VMIITM01.ZCHCD;
  NK0EW-04-GLAENT[NK0EW-INX4] = VMIITM01.GLAENT;
  NK0EW-04-GLANTAC[NK0EW-INX4] = VMIITM01.GLANTAC;
  NK0EW-04-GLARCID[NK0EW-INX4] = VMIITM01.GLARCID;
  NK0EW-04-GLASUB[NK0EW-INX4] = VMIITM01.GLASUB;
  NK0EW-04-GLAPRJ[NK0EW-INX4] = VMIITM01.GLAPRJ;

end // end NK0ES-BLD-MI-STG

// Build VPIITM stroage in W03
Function NK0ES-BLD-PI-STG()
   /* ***********************************************************************/
   /*  */
   /* Build array in nk0eW04 for all items on an invoice which are not*/
   /* already on this claim.  The invoice item will be used to build a key*/
   /* to the VNCadj01 data base to see if it is already on the claim.*/
   /* If the item is on the claim it will not be written to storage.  The*/
   /* new claim item array will aslo be searched to see if style was added*/
   /* to the claim during maintenance.*/
   /* ***********************************************************************/

  NLXREC.NLXCPROC = "NK0ES-BLD-PI-STG";

   /* Build current claim style item key.*/

  VNCADJ01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  VNCADJ01.NIDIVCID = VPIADJ01.NIDIVCID;
  VNCADJ01.NIBLINBR = 0;
  VNCADJ01.ZCHCD = VPIADJ01.ZCHCD;
  VNCADJ01.GLAENT = VPIADJ01.GLAENT;
  VNCADJ01.GLANTAC = VPIADJ01.GLANTAC;
  VNCADJ01.GLARCID = VPIADJ01.GLARCID;
  VNCADJ01.GLASUB = VPIADJ01.GLASUB;
  VNCADJ01.GLAPRJ = VPIADJ01.GLAPRJ;

  NK0ES-S-VNCADJ01(); /* select unique on vncadj01*/

  if (SQLCA.VAGen_SQLCODE == 0) /* Item on found, return without saving*/
    return;
  end

  SQLCA.VAGen_SQLCODE = 0; /* reset sqlcode*/

  NK0EW-MAP-IVC = VPIADJ01.NIDIVCID;
  NK0EW-MAP-NIBLINBR = 0;
  NK0EW-MAP-ZCHCD = VPIADJ01.ZCHCD;
  NK0EW-MAP-GLAENT = VPIADJ01.GLAENT;
  NK0EW-MAP-GLANTAC = VPIADJ01.GLANTAC;
  NK0EW-MAP-GLARCID = VPIADJ01.GLARCID;
  NK0EW-MAP-GLASUB = VPIADJ01.GLASUB;
  NK0EW-MAP-GLAPRJ = VPIADJ01.GLAPRJ;
  NK0EW-INX2 = 1;
  while (NK0EW-INX2 <= 204)
    if (NK0EW-03-NEW-MISC[NK0EW-INX2] == NK0EW-MAP-MISC)
      return; /* adjust already added to claim*/
    end
    NK0EW-INX2 = NK0EW-INX2 + 1;
  end

   /* At this point the item may be added to the internal array*/

  NK0EW-INX4 = NK0EW-INX4 + 1;
  NK0EW-04-NIDIVCID[NK0EW-INX4] = VPIADJ01.NIDIVCID;
  NK0EW-04-NIBLINBR[NK0EW-INX4] = 0;
  NK0EW-04-ZCHCD[NK0EW-INX4] = VPIADJ01.ZCHCD;
  NK0EW-04-GLAENT[NK0EW-INX4] = VPIADJ01.GLAENT;
  NK0EW-04-GLANTAC[NK0EW-INX4] = VPIADJ01.GLANTAC;
  NK0EW-04-GLARCID[NK0EW-INX4] = VPIADJ01.GLARCID;
  NK0EW-04-GLASUB[NK0EW-INX4] = VPIADJ01.GLASUB;
  NK0EW-04-GLAPRJ[NK0EW-INX4] = VPIADJ01.GLAPRJ;

end // end NK0ES-BLD-PI-STG

// Build VNCADJ temp storage
Function NK0ES-BLD-TMP-STG()
   /* ***********************************************************************/
   /* Build temp storage*/
   /*  */
   /* As charges are fetched, they are move to map working storage*/
   /* NK0EW02.  Six occurances of charges appear on the screen*/
   /* thus six rows will be moved to the map working storage.  Once*/
   /* 6 occurances have been moved to working storage, the record will*/
   /* written to temp storage one page at a time.*/
   /*  */
   /* ***********************************************************************/

  NLXREC.NLXCPROC = "NK0ES-BLD-TMP-STG";

  NK0EW-INX = NK0EW-INX + 1; /* M100 display storage*/

  NK0EW-02-CLM-QTY[NK0EW-INX] = VNCADJ01.NIGUSAMT;
  NK0EW-02-MAP-QTY[NK0EW-INX] = VNCADJ01.NIGUSAMT;
  NK0EW-02-ZCHCD[NK0EW-INX] = VNCADJ01.ZCHCD;
  NK0EW-02-IVC[NK0EW-INX] = VNCADJ01.NIDIVCID;
  NK0EW-02-NIBLINBR[NK0EW-INX] = VNCADJ01.NIBLINBR;
  NK0EW-02-GLAENT[NK0EW-INX] = VNCADJ01.GLAENT;
  NK0EW-02-GLARCID[NK0EW-INX] = VNCADJ01.GLARCID;
  NK0EW-02-GLANTAC[NK0EW-INX] = VNCADJ01.GLANTAC;
  NK0EW-02-GLASUB[NK0EW-INX] = VNCADJ01.GLASUB;
  NK0EW-02-GLAPRJ[NK0EW-INX] = VNCADJ01.GLAPRJ;
  NK0EW-02-NIGNETFL[NK0EW-INX] = VNCADJ01.NIGNETFL;
  NK0EW-02-ZZZCHGCT[NK0EW-INX] = VNCADJ01.ZZZCHGCT;

  /* ***********************************************************************/
  /* Set receivalbe type for misc claims*/
  /* ***********************************************************************/

  if (NKWREC.XXX-SUM-ZCR-CD == "MI"
   && NK0EW-ZRTCD == " ")
    if (VNCADJ01.ZCHCD in ZCHTBL.ZCHCD)
      NK0EW-ZRTCD = ZCHTBL.ZRTCD[sysVar.arrayIndex];
    end
  end
  if (NK0EW-INX == 6)
    NK0ES-ADD-TMP-STG();
    set NK0EW02 empty;
    NK0EW-INX = 0;
  end

end // end NK0ES-BLD-TMP-STG

// Build map from temp storage
Function NK0ES-BUILD-MAP100()
   /* *****************************************************/
   /* Build map from temp storage.*/
   /* *****************************************************/

  NLXREC.NLXCPROC = "NK0ES-BUILD-MAP100";

  set NK0EW02 empty;

  converseLib.clearScreen();
  set NK0EM100 initial;

  NK0EM100.XXXRVNBR = "00"; /* revision nbr*/
  NK0EM100.XXXMAPNM = "NK0EM100"; /* map name*/
  NK0EM100.XXXPRCNM = "NK0E-100"; /* process name*/
  NK0EM100.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/

   /* Build header of map.................*/

  NK0EM100.KUCCOID = NKWREC.KUCCOID;
  NK0EM100.KUMSTRID = NKWREC.KUMSTRID;
  NK0EM100.KUCCONM = NKWREC.KUCCONM;
  NK0EM100.XXX-SUM-ZCR-CD = NKWREC.XXX-SUM-ZCR-CD;
  NK0EM100.XXX-SUM-ZCR-DESC = NKWREC.XXX-SUM-ZCR-DESC;
  NK0EM100.XCTDESC = NKWREC.XCTDESC;
  NK0EM100.NL-CLM-ID = NKWREC.NL-CLM-ID;

  if (NK0EW-HIGH-PAGE-NBR > 0 /* If temp storage is there*/
   && NK0EW-NEXT-PAGE-NBR <= NK0EW-HIGH-PAGE-NBR)
    NK0ES-GET-TMP-STG(); /* Get current page*/
  end

  NK0EW-INX = 1;
  while (NK0EW-INX <= 6)

    NK0EM100.NK0EM-IVC[NK0EW-INX] = NK0EW-02-IVC[NK0EW-INX]; /* Invoice Id*/
    NK0EM100.NK0EM-ZCHCD[NK0EW-INX] = NK0EW-02-ZCHCD[NK0EW-INX]; /* Charge type code*/
    NK0EM100.NK0EM-CLM-AMT[NK0EW-INX] = NK0EW-02-MAP-QTY[NK0EW-INX]; /* Claim amount*/
    NK0EM100.GLAENT[NK0EW-INX] = NK0EW-02-GLAENT[NK0EW-INX]; /* GL entity id*/
    NK0EM100.GLARCID[NK0EW-INX] = NK0EW-02-GLARCID[NK0EW-INX]; /* GL receivable id*/
    NK0EM100.GLANTAC[NK0EW-INX] = NK0EW-02-GLANTAC[NK0EW-INX]; /* GL natural id*/
    NK0EM100.GLASUB[NK0EW-INX] = NK0EW-02-GLASUB[NK0EW-INX]; /* GL sub id*/
    NK0EM100.GLAPRJ[NK0EW-INX] = NK0EW-02-GLAPRJ[NK0EW-INX]; /* GL project id*/

    if (NK0EW-02-ZCHCD[NK0EW-INX] == " ") /* Get ZCH description*/
      NK0EM100.NK0EM-ZCHDESC[NK0EW-INX] = " ";
    else
      if (NK0EW-02-ZCHCD[NK0EW-INX] in ZCHTBL.ZCHCD)
        NK0EM100.NK0EM-ZCHDESC[NK0EW-INX] = ZCHTBL.ZCHDESC[sysVar.arrayIndex];
      end
    end


  /* ************************************************************************/
  /* Determine the invoice balances and invoice data.  If no charge on the*/
  /* the map working storage, there will be no invoice.*/
  /* ************************************************************************/

    if (NK0EW-02-ZCHCD[NK0EW-INX] > " "
     && NK0EW-02-IVC[NK0EW-INX] > 0)
      NK0EW-IVC-BAL = 0;
      if (NKWREC.XXX-SUM-ZCR-CD == "MI") /* Misc invoice*/
        set VMIITM01 empty;
        VMIITM01.NIDIVCID = NK0EW-02-IVC[NK0EW-INX];
        VMIITM01.ZCHCD = NK0EW-02-ZCHCD[NK0EW-INX];
        NK0EW-NIBLINBR = NK0EW-02-NIBLINBR[NK0EW-INX];
        NK0ES-SEL-VMIITM01(); /* Get invoiced amount from MIITM*/
      else /* Product invoice*/
        set VPIADJ01 empty;
        VPIADJ01.NIDIVCID = NK0EW-02-IVC[NK0EW-INX];
        VPIADJ01.ZCHCD = NK0EW-02-ZCHCD[NK0EW-INX];
        NK0ES-SEL-VPIADJ01(); /* Get invoiced amount from PIADJ*/
      end
      set VNCSTY01 empty;
      VNCADJ01.NIDIVCID = NK0EW-02-IVC[NK0EW-INX];
      VNCADJ01.ZCHCD = NK0EW-02-ZCHCD[NK0EW-INX];
      NK0EW-NIBLINBR = NK0EW-02-NIBLINBR[NK0EW-INX];
      NK0ES-SEL-VNCADJ01(); /* get claims quantities*/
      /* ********************************************************************/
      /* make adjustments to the invoice balcance for items which*/
      /* have had amounts changed.*/
      /* ********************************************************************/
      NK0EW-IVC-BAL = NK0EW-IVC-BAL + NK0EW-02-CLM-QTY[NK0EW-INX];
      NK0EW-IVC-BAL = NK0EW-IVC-BAL - NK0EW-02-MAP-QTY[NK0EW-INX];
      NK0EW-02-MULTI-CLM-ITM[NK0EW-INX] = NK0EW-MULTI-CLM-ITM;
      NK0EM100.NK0EM-IVC-BAL[NK0EW-INX] = NK0EW-IVC-BAL;
    else
      NK0EM100.NK0EM-IVC-BAL[NK0EW-INX] = 0;
    end
    NK0EW-INX = NK0EW-INX + 1;
  end
  VNCHDR01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  NK0ES-S-VNCHDR01();

  NK0EM100.NK0EM-FM-PAGE = NK0EW-NEXT-PAGE-NBR;
  NK0EM100.NK0EM-TO-PAGE = NK0EW-HIGH-PAGE-NBR;
  NK0ES-MAP100-MODE();

end // end NK0ES-BUILD-MAP100

// Build map from working stg
Function NK0ES-BUILD-MAP200()
   /* Build map 200 from working storage.*/
   /* *****************************************************/

  NLXREC.NLXCPROC = "NK0ES-BUILD-MAP200";

  NK0EW-INX = 12;
  NK0EW-INX4 = NK0EW-MAP200-FM-PAGE * 12;
  NK0EM200.NK0EM-FM-PAGE = NK0EW-MAP200-FM-PAGE;
  set NK0EM200.NK0EM-FM-PAGE cursor;

  while (NK0EW-INX >= 1)
    set NK0EM200.NK0EM-ZCHDESC[NK0EW-INX] initialAttributes;
    set NK0EM200.NK0EM-ZCHCD[NK0EW-INX] initialAttributes;
    set NK0EM200.NK0EM-CLM-QTY[NK0EW-INX] initialAttributes;
    NK0EM200.NK0EM-CLM-QTY[NK0EW-INX] = NK0EW-04-NL-CLM-QTY[NK0EW-INX4];
    if (NK0EW-04-ZCHCD[NK0EW-INX4] > " ")
      NK0EM200.NK0EM-ZCHCD[NK0EW-INX] = NK0EW-04-ZCHCD[NK0EW-INX4];
      if (NK0EW-04-ZCHCD[NK0EW-INX4] in ZCHTBL.ZCHCD)
        NK0EM200.NK0EM-ZCHDESC[NK0EW-INX] = ZCHTBL.ZCHDESC[sysVar.arrayIndex];
      end
      NK0EW-IVC-BAL = 0; /* set balance to zero*/
      if (NKWREC.XXX-SUM-ZCR-CD == "MI")
        set VMIITM01 empty;
        VMIITM01.NIDIVCID = NK0EW-04-NIDIVCID[NK0EW-INX4];
        VMIITM01.ZCHCD = NK0EW-04-ZCHCD[NK0EW-INX4];
        NK0EW-NIBLINBR = NK0EW-04-NIBLINBR[NK0EW-INX4];
        NK0ES-SEL-VMIITM01(); /* get MIITM amount*/
        NK0EM200.NK0EM-CLM-AMT[NK0EW-INX] = VMIITM01.NIBLIAMT;
      else
        set VPIADJ01 empty;
        VPIADJ01.NIDIVCID = NK0EW-04-NIDIVCID[NK0EW-INX4];
        VPIADJ01.ZCHCD = NK0EW-04-ZCHCD[NK0EW-INX4];
        NK0ES-SEL-VPIADJ01(); /* get PIADJ amount*/
        NK0EM200.NK0EM-CLM-AMT[NK0EW-INX] = VPIADJ01.NIGUSAMT;
      end
      VNCADJ01.NIDIVCID = NK0EW-04-NIDIVCID[NK0EW-INX4];
      VNCADJ01.ZCHCD = NK0EW-04-ZCHCD[NK0EW-INX4];
      NK0EW-NIBLINBR = NK0EW-04-NIBLINBR[NK0EW-INX4];
      NK0ES-SEL-VNCADJ01(); /* get claims quantities*/
      NK0EW-IVC-BAL = NK0EW-IVC-BAL - NK0EW-04-NL-CLM-QTY[NK0EW-INX4];
      NK0EM200.NK0EM-IVC-BAL[NK0EW-INX] = NK0EW-IVC-BAL;
      if (NK0EW-IVC-BAL == 0)
        set NK0EM200.NK0EM-CLM-QTY[NK0EW-INX] skip;
      else
        set NK0EM200.NK0EM-CLM-QTY[NK0EW-INX] initialAttributes, cursor;
      end
      if (NK0EW-MULTI-CLM-ITM == "Y")
        set NK0EM200.NK0EM-ZCHDESC[NK0EW-INX] bold;
        set NK0EM200.NK0EM-ZCHCD[NK0EW-INX] bold;
        converseLib.validationFailed(393);
      end
    else
      NK0EM200.NK0EM-CLM-QTY[NK0EW-INX] = 0;
      NK0EM200.NK0EM-ZCHCD[NK0EW-INX] = " ";
      NK0EM200.NK0EM-ZCHDESC[NK0EW-INX] = " ";
      NK0EM200.NK0EM-IVC-BAL[NK0EW-INX] = 0;
      set NK0EM200.NK0EM-CLM-QTY[NK0EW-INX] skip;
    end
    NK0EW-INX = NK0EW-INX - 1;
    NK0EW-INX4 = NK0EW-INX4 - 1;
  end
  VNCHDR01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  NK0ES-S-VNCHDR01();
  if (NK0EW-04-ZCHCD[1] == " ")
    converseLib.validationFailed(326);
  end

end // end NK0ES-BUILD-MAP200

// Close cursor 1 on VMIITM01
Function NK0ES-C1-VMIITM01()
   /* *****************************************************/
   /* Close cursor on VMIITM01*/
   /* *****************************************************/

  NLXREC.NLXCPROC = "NK0ES-C1-VMIITM01";

   /* Close cursor on - VMIITM01*/

  call "IO4450" ("C1", SQLCA, VMIITM01) {isNoRefresh = yes, isExternal = yes}; /* close cursor 1 MIITM*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VMIITM01";
    NK0EW-LRG-NBR = VMIITM01.NIDIVCID;
    NK0EW-CHR-IND = VMIITM01.ZCHCD;
    TA1REC.TA1TBLKE = NK0EW01.NK0EW-KEY;
    XPNL005(); /* abort routine*/
  end

end // end NK0ES-C1-VMIITM01

// Close C1 on VNCSTY01
Function NK0ES-C1-VNCADJ01()
   /* *****************************************************/
   /* Close cursor C1 on VNCADJ01*/
   /* *****************************************************/

  NLXREC.NLXCPROC = "NK0ES-C1-VNCADJ01";

   /* close cursor on - VNCADJ01*/

  call "IO6490" ("C1", SQLCA, VNCADJ01) {isNoRefresh = yes, isExternal = yes}; /* close C1 on VNCADJ*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCADJ01";
    NK0EW-LRG-NBR = VNCADJ01.NL-CLM-ID;
    NK0EW-CHR-IND = VNCADJ01.ZCHCD;
    NK0EW-SML-NBR = VNCADJ01.NIDIVCID;
    TA1REC.TA1TBLKE = NK0EW01.NK0EW-KEY;
    XPNL005(); /* abort routine*/
  end

end // end NK0ES-C1-VNCADJ01

// Get sum of VNCSTY01
Function NK0ES-C1-VNCSTY01()
   /* *****************************************************************/
   /* Close item cursor*/
   /* *****************************************************************/

  NLXREC.NLXCPROC = "NK0ES-C1-VNCSTY01";

  call "IO6470" ("C1", SQLCA, VNCSTY01) {isNoRefresh = yes, isExternal = yes}; /* close item cursor*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCHDR01";
    NK0EW-LRG-NBR = VNCHDR01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0EW01.NK0EW-KEY;
    XPNL005(); /* abort routine*/
  end

end // end NK0ES-C1-VNCSTY01

// close cursor
Function NK0ES-C2-VNCIVX01()
  NLXREC.NLXCPROC = "NK0ES-C2-VNCIVX01";
  call "IO6510" ("C2", SQLCA, VNCIVX01) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
   /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCIVX01";
    NK0EW-LRG-NBR = VNCIVX01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0EW01.NK0EW-KEY;
    XPNL005();
  end
end // end NK0ES-C2-VNCIVX01

// Close cursor 2 on VPIADJ01
Function NK0ES-C2-VPIADJ01()
   /* *****************************************************/
   /* Close cursor on VPIADJ01*/
   /* *****************************************************/

  NLXREC.NLXCPROC = "NK0ES-C2-VPIADJ01";

   /* Close cursor on - VPIADJ01*/

  call "IO4510" ("C2", SQLCA, VPIADJ01) {isNoRefresh = yes, isExternal = yes}; /* close cursor 1 PIADJ*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VPIAJD01";
    NK0EW-LRG-NBR = VPIADJ01.NIDIVCID;
    NK0EW-CHR-IND = VPIADJ01.ZCHCD;
    TA1REC.TA1TBLKE = NK0EW01.NK0EW-KEY;
    XPNL005(); /* abort routine*/
  end

end // end NK0ES-C2-VPIADJ01

// Edit the page number m100
Function NK0ES-CK-M100-NBR()
  /* ************************************************************************/
  /* This edit test the changing of the from page number to cause*/
  /* paging to a specific page.  this will only be done if enter was*/
  /* pressed*/
  /* ************************************************************************/
  /*  */

  NLXREC.NLXCPROC = "NK0ES-CK-M100-NBR";

  move NK0EW-NEXT-PAGE-NBR to NK0EW-HOLD-PAGE-NBR withV60Compat;
  if (NK0EW-PAGE-MOD-FL == "Y")
    if (NK0EM100.NK0EM-FM-PAGE == 1)
       /* next sentence*/
    else
      if (NK0EM100.NK0EM-FM-PAGE > NK0EW-HIGH-PAGE-NBR
       || NK0EM100.NK0EM-FM-PAGE == 0)
        converseLib.validationFailed(319);
        NLXREC.NLXERRF = "Y";
        set NK0EM100.NK0EM-FM-PAGE bold, cursor, modified;
      else
        if (converseVar.eventKey not enter
         && NK0EM100.NK0EM-FM-PAGE != NK0EW-NEXT-PAGE-NBR)
          converseLib.validationFailed(320);
          NLXREC.NLXERRF = "Y";
          set NK0EM100.NK0EM-FM-PAGE bold, cursor, modified;
        end
      end
    end
  end
end // end NK0ES-CK-M100-NBR

// Delete a VNCADJ01 item
Function NK0ES-D-VNCADJ01()
   /* *****************************************************************/
   /* This will delete a claim item if the map value was zero for the*/
   /* item.*/
   /* *****************************************************************/

  NLXREC.NLXCPROC = "NK0ES-D-VNCADJ01";

  set VNCADJ01 empty;

  VNCADJ01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  VNCADJ01.ZCHCD = NK0EW-02-ZCHCD[NK0EW-INX];
  VNCADJ01.NIDIVCID = NK0EW-02-IVC[NK0EW-INX];
  VNCADJ01.NIBLINBR = NK0EW-02-NIBLINBR[NK0EW-INX];
  VNCADJ01.GLAENT = NK0EW-02-GLAENT[NK0EW-INX];
  VNCADJ01.GLARCID = NK0EW-02-GLARCID[NK0EW-INX];
  VNCADJ01.GLANTAC = NK0EW-02-GLANTAC[NK0EW-INX];
  VNCADJ01.GLASUB = NK0EW-02-GLASUB[NK0EW-INX];
  VNCADJ01.GLAPRJ = NK0EW-02-GLAPRJ[NK0EW-INX];

  call "IO6490" ("D ", SQLCA, VNCADJ01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCADJ01";
    NK0EW-LRG-NBR = VNCADJ01.NL-CLM-ID;
    NK0EW-CHR-IND = VNCADJ01.ZCHCD;
    NK0EW-SML-NBR = VNCADJ01.NIDIVCID;
    TA1REC.TA1TBLKE = NK0EW01.NK0EW-KEY;
    XPNL005(); /* abort routine*/
  end

end // end NK0ES-D-VNCADJ01

// Delete a VNCIVX01 item
Function NK0ES-D-VNCIVX01()
  /* ************************************************************************/
  /* This will test the claims style and adjustment database to see if*/
  /* an invoice number exsits on the claim.  If it does not, it will*/
  /* delete the x-ref item for the claim/invoice combo.*/
  /* ************************************************************************/

  NLXREC.NLXCPROC = "NK0ES-D-VNCIVX01";
  NK0EW-INVOICE-FOUND = "N";

  if (NKWREC.XXX-SUM-ZCR-CD == "PR")
    set VNCSTY01 empty;

    VNCSTY01.NL-CLM-ID = NKWREC.NL-CLM-ID;
    VNCSTY01.NIDIVCID = NK0EW-02-IVC[NK0EW-INX];

    call "IO6470" ("S3", SQLCA, VNCSTY01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/

    if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
     /* next sentence*/
    else
      TA1REC.TA1DBASE = "DNILO";
      TA1REC.TA1TBLVU = "VNCSTY01";
      NK0EW-LRG-NBR = VNCSTY01.NL-CLM-ID;
      NK0EW-SML-NBR = VNCSTY01.NIDIVCID;
      TA1REC.TA1TBLKE = NK0EW01.NK0EW-KEY;
      XPNL005(); /* abort routine*/
    end

    call "IO6470" ("N3", SQLCA, VNCSTY01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/

    if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
      NK0EW-INVOICE-FOUND = "Y";
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* not found, okay*/
     /* next sentence*/
      else
        TA1REC.TA1DBASE = "DNILO";
        TA1REC.TA1TBLVU = "VNCSTY01";
        NK0EW-LRG-NBR = VNCSTY01.NL-CLM-ID;
        NK0EW-SML-NBR = VNCSTY01.NIDIVCID;
        TA1REC.TA1TBLKE = NK0EW01.NK0EW-KEY;
        XPNL005(); /* abort routine*/
      end
    end

    call "IO6470" ("C3", SQLCA, VNCSTY01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/

    if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
     /* next sentence*/
    else
      TA1REC.TA1DBASE = "DNILO";
      TA1REC.TA1TBLVU = "VNCSTY01";
      NK0EW-LRG-NBR = VNCSTY01.NL-CLM-ID;
      NK0EW-SML-NBR = VNCSTY01.NIDIVCID;
      TA1REC.TA1TBLKE = NK0EW01.NK0EW-KEY;
      XPNL005(); /* abort routine*/
    end
  end

  set VNCADJ01 empty;

  VNCADJ01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  VNCADJ01.NIDIVCID = NK0EW-02-IVC[NK0EW-INX];

  call "IO6490" ("S3", SQLCA, VNCADJ01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCADJ01";
    NK0EW-LRG-NBR = VNCADJ01.NL-CLM-ID;
    NK0EW-SML-NBR = VNCADJ01.NIDIVCID;
    TA1REC.TA1TBLKE = NK0EW01.NK0EW-KEY;
    XPNL005(); /* abort routine*/
  end

  call "IO6490" ("N3", SQLCA, VNCADJ01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    NK0EW-INVOICE-FOUND = "Y";
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* not found, okay*/
     /* next sentence*/
    else
      TA1REC.TA1DBASE = "DNILO";
      TA1REC.TA1TBLVU = "VNCADJ01";
      NK0EW-LRG-NBR = VNCADJ01.NL-CLM-ID;
      NK0EW-SML-NBR = VNCADJ01.NIDIVCID;
      TA1REC.TA1TBLKE = NK0EW01.NK0EW-KEY;
      XPNL005(); /* abort routine*/
    end
  end

  call "IO6490" ("C3", SQLCA, VNCADJ01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCADJ01";
    NK0EW-LRG-NBR = VNCADJ01.NL-CLM-ID;
    NK0EW-SML-NBR = VNCADJ01.NIDIVCID;
    TA1REC.TA1TBLKE = NK0EW01.NK0EW-KEY;
    XPNL005(); /* abort routine*/
  end

  if (NK0EW-INVOICE-FOUND == "Y") /* no adjustment to delete*/
    return;
  end

  VNCIVX01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  VNCIVX01.NIDIVCID = NK0EW-02-IVC[NK0EW-INX];

  call "IO6510" ("D ", SQLCA, VNCIVX01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCIVX01";
    NK0EW-LRG-NBR = VNCIVX01.NL-CLM-ID;
    NK0EW-SML-NBR = VNCIVX01.NIDIVCID;
    TA1REC.TA1TBLKE = NK0EW01.NK0EW-KEY;
    XPNL005(); /* abort routine*/
  end

end // end NK0ES-D-VNCIVX01

// PURGE TEMP STORAGE
Function NK0ES-DEL-TMP-STG()
   /* ***********************************************************************/
   /* PURGE temp storage*/
   /*  */
   /*  */
   /* ***********************************************************************/

  NLXREC.NLXCPROC = "NK0ES-DEL-TMP-STG";

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  TA5REC.TA5FNCCD = "P"; /* Function code*/

  try
    call "TA0050" (NK0EW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return; /* Return to previous process*/
  end

   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

  converseLib.validationFailed(299); /* Indicate system error*/

  XPNL-006(); /* abend routine*/


end // end NK0ES-DEL-TMP-STG

// Edit for duplicate charges
Function NK0ES-EDIT-DUP-CHG()
   /* *****************************************************/
   /* Edit for duplicate charges on claim*/
   /* *****************************************************/

  NLXREC.NLXCPROC = "NK0ES-EDIT-DUP-STY";


  set VNCADJ01 empty;
  VNCADJ01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  VNCADJ01.NIDIVCID = NK0EM100.NK0EM-IVC[NK0EW-INX];
  VNCADJ01.ZCHCD = NK0EM100.NK0EM-ZCHCD[NK0EW-INX];
  VNCADJ01.GLAENT = NK0EM100.GLAENT[NK0EW-INX];
  VNCADJ01.GLARCID = NK0EM100.GLARCID[NK0EW-INX];
  VNCADJ01.GLANTAC = NK0EM100.GLANTAC[NK0EW-INX];
  VNCADJ01.GLASUB = NK0EM100.GLASUB[NK0EW-INX];
  VNCADJ01.GLAPRJ = NK0EM100.GLAPRJ[NK0EW-INX];
  VNCADJ01.NIBLINBR = 0;
  if (NKWREC.XXX-SUM-ZCR-CD == "MI"
   && NK0EM100.NK0EM-IVC > 0)
    VNCADJ01.NIBLINBR = NK0EW-02-NIBLINBR[NK0EW-INX];
  end

  call "IO6490" ("S ", SQLCA, VNCADJ01) {isNoRefresh = yes, isExternal = yes}; /* select clm adj*/


  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    converseLib.validationFailed(351);
    set NK0EM100.NK0EM-ZCHCD[NK0EW-INX] bold, cursor, modified;
    set NK0EM100.NK0EM-IVC[NK0EW-INX] bold, modified;
    set NK0EM100.NK0EM-CLM-AMT[NK0EW-INX] bold, modified;
    NLXREC.NLXERRF = "Y";
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
    /* NEXT SENTENCE*/
    else
      TA1REC.TA1DBASE = "DNILO";
      TA1REC.TA1TBLVU = "VNCAJD01";
      NK0EW-LRG-NBR = VNCADJ01.NIDIVCID;
      NK0EW-CHR-IND = VNCADJ01.ZCHCD;
      move NK0EW-KEY to TA1TBLKE withV60Compat;
      XPNL005(); /* abort routine*/
      return;
    end
  end

   /* The following will check all newly entered CHARGES to insure the*/
   /* CHG/invoice/GL Comb does not already exsits. It will not fail if the*/
   /* charge from the page and row on the page are in the table.*/

  NK0EW-MAP-IVC = NK0EM100.NK0EM-IVC[NK0EW-INX];
  NK0EW-MAP-ZCHCD = NK0EM100.NK0EM-ZCHCD[NK0EW-INX];
  NK0EW-MAP-GLAENT = NK0EM100.GLAENT[NK0EW-INX];
  NK0EW-MAP-GLARCID = NK0EM100.GLARCID[NK0EW-INX];
  NK0EW-MAP-GLANTAC = NK0EM100.GLANTAC[NK0EW-INX];
  NK0EW-MAP-GLASUB = NK0EM100.GLASUB[NK0EW-INX];
  NK0EW-MAP-GLAPRJ = NK0EM100.GLAPRJ[NK0EW-INX];
  NK0EW-MAP-NIBLINBR = VNCADJ01.NIBLINBR;
  NK0EW-INX2 = 1;
  while (NK0EW-INX2 <= 204)
    if (NK0EW-03-ROW[NK0EW-INX2] == 0)
      NK0EW-INX2 = 300;
    else
      if (NK0EW-03-NEW-MISC[NK0EW-INX2] == NK0EW-MAP-MISC)
        if (NK0EW-INX == NK0EW-03-ROW[NK0EW-INX2]
         && NK0EW-NEXT-PAGE-NBR == NK0EW-03-PAGE[NK0EW-INX2])
            /* next sentence*/
        else
          converseLib.validationFailed(351);
          set NK0EM100.NK0EM-ZCHCD[NK0EW-INX] bold, cursor, modified;
          set NK0EM100.NK0EM-IVC[NK0EW-INX] bold, modified;
          set NK0EM100.NK0EM-CLM-AMT[NK0EW-INX] bold, modified;
          NLXREC.NLXERRF = "Y";
          return;
        end
      end
      NK0EW-INX2 = NK0EW-INX2 + 1;
    end
  end

   /* At this point the charge will be added to the new charge arrary.*/
   /* The chrg/invoice comb have passed alls edit except for the amount.*/

  NK0EW-INX3 = NK0EW-INX3 + 1;
  NK0EW-03-IVC[NK0EW-INX3] = NK0EM100.NK0EM-IVC[NK0EW-INX];
  NK0EW-03-ZCHCD[NK0EW-INX3] = NK0EM100.NK0EM-ZCHCD[NK0EW-INX];
  NK0EW-03-NIBLINBR[NK0EW-INX3] = VNCADJ01.NIBLINBR;
  NK0EW-03-GLAENT[NK0EW-INX3] = NK0EM100.GLAENT[NK0EW-INX];
  NK0EW-03-GLARCID[NK0EW-INX3] = NK0EM100.GLARCID[NK0EW-INX];
  NK0EW-03-GLANTAC[NK0EW-INX3] = NK0EM100.GLANTAC[NK0EW-INX];
  NK0EW-03-GLASUB[NK0EW-INX3] = NK0EM100.GLASUB[NK0EW-INX];
  NK0EW-03-GLAPRJ[NK0EW-INX3] = NK0EM100.GLAPRJ[NK0EW-INX];
  NK0EW-03-PAGE[NK0EW-INX3] = NK0EW-NEXT-PAGE-NBR;
  NK0EW-03-ROW[NK0EW-INX3] = NK0EW-INX;
end // end NK0ES-EDIT-DUP-CHG

// Edit the MISC charge GL code
Function NK0ES-EDIT-GL-CODE()
  /* ***********************************************************************/
  /* Edit the GL code*/
  /*  */
  /* If there is a charge type, there must be a GL code.  If a GL code*/
  /* was changed, it must be on the DNILO.VNLGLA01 table.*/
  /*  */
  /* ***********************************************************************/

  NLXREC.NLXCPROC = "NK0ES-EDIT-GL-CODE";

  if (NK0EM100.GLAENT[NK0EW-INX] == " "
   && NK0EM100.GLARCID[NK0EW-INX] == " "
   && NK0EM100.GLANTAC[NK0EW-INX] == " "
   && NK0EM100.GLASUB[NK0EW-INX] == " "
   && NK0EM100.GLAPRJ[NK0EW-INX] == " ")
    if (NK0EM100.NK0EM-ZCHCD > " ")
      NK0ES-GET-GL-CODE();
   /* MOVE 'Y' TO NK0EW-ERR-FLAG;*/
   /* MOVE 242 TO EZEMNO;*/
   /* SET NK0EM100.GLAENT(NK0EW-INX) CURSOR,MODIFIED,BRIGHT;*/
   /* SET NK0EM100.GLARCID(NK0EW-INX) MODIFIED,BRIGHT;*/
   /* SET NK0EM100.GLANTAC(NK0EW-INX) MODIFIED,BRIGHT;*/
   /* SET NK0EM100.GLASUB(NK0EW-INX) MODIFIED,BRIGHT;*/
   /* SET NK0EM100.GLAPRJ(NK0EW-INX) MODIFIED,BRIGHT;*/
    else
      set NK0EM100.GLAENT[NK0EW-INX] initialAttributes;
      set NK0EM100.GLARCID[NK0EW-INX] initialAttributes;
      set NK0EM100.GLANTAC[NK0EW-INX] initialAttributes;
      set NK0EM100.GLASUB[NK0EW-INX] initialAttributes;
      set NK0EM100.GLAPRJ[NK0EW-INX] initialAttributes;
    end
  else
    if (NK0EW-SLS-GL-MOD-FL[NK0EW-INX] == "Y")
      set VNLGLA01 empty;
      VNLGLA01.GLAENT = NK0EM100.GLAENT[NK0EW-INX];
      VNLGLA01.GLARCID = NK0EM100.GLARCID[NK0EW-INX];
      VNLGLA01.GLANTAC = NK0EM100.GLANTAC[NK0EW-INX];
      VNLGLA01.GLASUB = NK0EM100.GLASUB[NK0EW-INX];
      if (NK0EM100.GLAPRJ[NK0EW-INX] > " ")
        VNLGLA01.GLAPRJ = "TT";
      end
    /*  */
    /* ********************************************************************/
    /* validate the entered gl code*/
    /* ********************************************************************/
    /*  */
      NK0ES-S-VNLGLA01();
      if (SQLCA.VAGen_SQLCODE == 0)
        set NK0EM100.GLAENT[NK0EW-INX] initialAttributes;
        set NK0EM100.GLARCID[NK0EW-INX] initialAttributes;
        set NK0EM100.GLANTAC[NK0EW-INX] initialAttributes;
        set NK0EM100.GLASUB[NK0EW-INX] initialAttributes;
        set NK0EM100.GLAPRJ[NK0EW-INX] initialAttributes;
      else
        VNLGLA01.GLAPRJ = NK0EM100.GLAPRJ[NK0EW-INX];
        NK0ES-S-VNLGLA01();
        if (SQLCA.VAGen_SQLCODE == 0)
          set NK0EM100.GLAENT[NK0EW-INX] initialAttributes;
          set NK0EM100.GLARCID[NK0EW-INX] initialAttributes;
          set NK0EM100.GLANTAC[NK0EW-INX] initialAttributes;
          set NK0EM100.GLASUB[NK0EW-INX] initialAttributes;
          set NK0EM100.GLAPRJ[NK0EW-INX] initialAttributes;
        else
          set NK0EM100.GLAENT[NK0EW-INX] cursor, modified, bold;
          set NK0EM100.GLARCID[NK0EW-INX] modified, bold;
          set NK0EM100.GLANTAC[NK0EW-INX] modified, bold;
          set NK0EM100.GLASUB[NK0EW-INX] modified, bold;
          set NK0EM100.GLAPRJ[NK0EW-INX] modified, bold;
          NK0EW-ERR-FLAG = "Y";
          converseLib.validationFailed(71);
        end
      end
    end
  end
end // end NK0ES-EDIT-GL-CODE

// Edit the Invoice entered
Function NK0ES-EDIT-INVOICE()
  /* ***********************************************************************/
  /* Edit the Invoice.*/
  /*  */
  /* First retreive the invoce header to insure the receivable GL code is*/
  /* the same as that of the claim.*/
  /*  */
  /* Next fetch the item record to see if the charge is on the invoice.*/
  /*  */
  /* Edit the claim amount against the invoice balance to insure they are*/
  /* not trying to give more credit than was invoiced.*/
  /*  */
  /* ***********************************************************************/

  NLXREC.NLXCPROC = "NK0DS-EDIT-INVOICE";

  NK0EW-IVC-ERR-FL = "N";
  /*  */
  /* ***********************************************************************/
  /* Select the invoice cross reference record to know the invoice type*/
  /* ***********************************************************************/
  /*  */
  if (NK0EM100.NK0EM-IVC[NK0EW-INX] > 99999) /* out of invoice id range*/
    set NK0EM100.NK0EM-IVC[NK0EW-INX] bold, cursor, modified;
    converseLib.validationFailed(369);
    NK0EW-IVC-ERR-FL = "Y";
    return;
  end
  /*  */
  set VNLIVX01 empty;
  VNLIVX01.NIDIVCID = NK0EM100.NK0EM-IVC[NK0EW-INX];
  NK0ES-S-VNLIVX01();
  if (SQLCA.VAGen_SQLCODE == 100) /* not a valid invoice id*/
    set NK0EM100.NK0EM-IVC[NK0EW-INX] bold, cursor, modified;
    converseLib.validationFailed(345);
    NK0EW-IVC-ERR-FL = "Y";
    return;
  end
  /*  */
  /* ***********************************************************************/
  /* See if the invoice type matches the claim type*/
  /* ***********************************************************************/
  /*  */
  if (VNLIVX01.ZDTCD == "PI") /* product invoice*/
    if (NKWREC.XXX-SUM-ZCR-CD != "PR") /* not product claim*/
      set NK0EM100.NK0EM-IVC[NK0EW-INX] bold, modified, cursor;
      converseLib.validationFailed(346);
      NK0EW-IVC-ERR-FL = "Y";
      return;
    end
  else
    if (VNLIVX01.ZDTCD == "MI") /* misc invoice*/
      if (NKWREC.XXX-SUM-ZCR-CD != "MI") /* not misc claim*/
        set NK0EM100.NK0EM-IVC[NK0EW-INX] bold, modified, cursor;
        converseLib.validationFailed(346);
        NK0EW-IVC-ERR-FL = "Y";
        return;
      end
    else /* invoice type not valid for claims*/
      set NK0EM100.NK0EM-IVC[NK0EW-INX] bold, modified, cursor;
      converseLib.validationFailed(346);
      NK0EW-IVC-ERR-FL = "Y";
    end
  end
  /*  */
  /* ***********************************************************************/
  /* Select invoice header and test the receivable GL code*/
  /* ***********************************************************************/
  /*  */
  if (VNLIVX01.ZDTCD == "MI") /* misc invoice*/
    set VMIHDR01 empty;
    VMIHDR01.NIDIVCID = NK0EM100.NK0EM-IVC[NK0EW-INX];
    NK0ES-S-VMIHDR01(); /* select Misc header*/
    /*  */
    /* **********************************************************************/
    /* Edit the invoice customer to insure it is the same as the claim's*/
    /* customer.  Also edit the invoice to insure it is not a voided in-*/
    /* voice.  No credit may be issued to a voided invoice.*/
    /*  */
    /* **********************************************************************/
    /*  */
    if (VMIHDR01.KUCCOID != NKWREC.KUCCOID)
      set NK0EM100.NK0EM-IVC[NK0EW-INX] bold, cursor, modified;
      converseLib.validationFailed(283); /* Invoice not for this customer*/
      NK0EW-IVC-ERR-FL = "Y";
      return;
    end
    /*  */
    if (VMIHDR01.ZISCD == "VD")
      set NK0EM100.NK0EM-IVC[NK0EW-INX] bold, cursor, modified;
      converseLib.validationFailed(350); /* Invoice is in a void status*/
      NK0EW-IVC-ERR-FL = "Y";
      return;
    end
    if (VMIHDR01.XPTCD == "NC") /* can not credit a no charge ivc*/
      set NK0EM100.NK0EM-IVC[NK0EW-INX] bold, cursor, modified;
      converseLib.validationFailed(355); /* No charge ivc no credit allowed*/
      NK0EW-IVC-ERR-FL = "Y";
      return;
    end
    NK0EW-REC-GLAENT = VMIHDR01.GLAENT;
    NK0EW-REC-GLARCID = VMIHDR01.GLARCID;
    NK0EW-REC-GLANTAC = VMIHDR01.GLANTAC;
    NK0EW-REC-GLASUB = VMIHDR01.GLASUB;
    NK0EW-REC-GLAPRJ = VMIHDR01.GLAPRJ;
    if (NKWREC.NKW-REC-GL-CD == " ")
      NKW-REC-GLAENT = VMIHDR01.GLAENT;
      NKW-REC-GLARCID = VMIHDR01.GLARCID;
      NKW-REC-GLANTAC = VMIHDR01.GLANTAC;
      NKW-REC-GLASUB = VMIHDR01.GLASUB;
      NKW-REC-GLAPRJ = VMIHDR01.GLAPRJ;
      if (VNCHDR01.OP1CMPNB == 0)
        NKWREC.OP1CMPNB = VMIHDR01.OP1CMPNB;
      end
    end
    if (VMIHDR01.OP1CMPNB != NKWREC.OP1CMPNB) /* if no match;*/
      set NK0EM100.NK0EM-IVC[NK0EW-INX] bold, cursor, modified;
      set NK0EM100.NK0EM-ZCHCD[NK0EW-INX] bold, modified;
      set NK0EM100.NK0EM-IVC-BAL[NK0EW-INX] bold, modified;
      converseLib.validationFailed(412);
      NK0EW-IVC-ERR-FL = "Y";
      return;
    end
  else
    set VPIHDR01 empty;
    VPIHDR01.NIDIVCID = NK0EM100.NK0EM-IVC[NK0EW-INX];
    NK0ES-S-VPIHDR01(); /* select Prod invoice header*/
    /*  */
    /* **********************************************************************/
    /* Edit the invoice customer to insure it is the same as the claim's*/
    /* customer.  Also edit the invoice to insure it is not a voided in-*/
    /* voice.  No credit may be issued to a voided invoice.*/
    /* **********************************************************************/
    /*  */
    if (VPIHDR01.KUCCOID != NKWREC.KUCCOID)
      set NK0EM100.NK0EM-IVC[NK0EW-INX] bold, cursor, modified;
      converseLib.validationFailed(283); /* Invoice not for this customer*/
      NK0EW-IVC-ERR-FL = "Y";
      return;
    end
    /*  */
    if (VPIHDR01.ZISCD == "VD")
      set NK0EM100.NK0EM-IVC[NK0EW-INX] bold, cursor, modified;
      converseLib.validationFailed(350); /* Invoice is in a void status*/
      NK0EW-IVC-ERR-FL = "Y";
      return;
    end
    if (VPIHDR01.XPTCD == "NC") /* can not credit a no charge ivc*/
      set NK0EM100.NK0EM-IVC[NK0EW-INX] bold, cursor, modified;
      converseLib.validationFailed(355); /* No charge ivc credit not allowed*/
      NK0EW-IVC-ERR-FL = "Y";
      return;
    end
    NK0EW-REC-GLAENT = VPIHDR01.NIEENT1;
    NK0EW-REC-GLARCID = VPIHDR01.NIERCID1;
    NK0EW-REC-GLANTAC = VPIHDR01.NIENTAC1;
    NK0EW-REC-GLASUB = VPIHDR01.NIESUB1;
    NK0EW-REC-GLAPRJ = VPIHDR01.NIEPRJ1;
    if (NKWREC.NKW-REC-GL-CD == " ")
      NKW-REC-GLAENT = VPIHDR01.NIEENT1;
      NKW-REC-GLARCID = VPIHDR01.NIERCID1;
      NKW-REC-GLANTAC = VPIHDR01.NIENTAC1;
      NKW-REC-GLASUB = VPIHDR01.NIESUB1;
      NKW-REC-GLAPRJ = VPIHDR01.NIEPRJ1;
      if (VNCHDR01.OP1CMPNB == 0)
        NKWREC.OP1CMPNB = VMIHDR01.OP1CMPNB;
      end
    end
    if (VPIHDR01.OP1CMPNB != NKWREC.OP1CMPNB) /* if no match;*/
      set NK0EM100.NK0EM-IVC[NK0EW-INX] bold, cursor, modified;
      set NK0EM100.NK0EM-ZCHCD[NK0EW-INX] bold, modified;
      set NK0EM100.NK0EM-IVC-BAL[NK0EW-INX] bold, modified;
      converseLib.validationFailed(412);
      NK0EW-IVC-ERR-FL = "Y";
      return;
    end
  end

  if (NK0EW-RECEIVABLE-GL != NKW-REC-GL-CD)
    set NK0EM100.NK0EM-IVC[NK0EW-INX] bold, cursor, modified;
    converseLib.validationFailed(304);
    NK0EW-IVC-ERR-FL = "Y";
    return;
  end

  if (NK0EM100.NK0EM-ZCHCD[NK0EW-INX] == " "
   && NK0EM100.NK0EM-IVC-BAL[NK0EW-INX] == 0
   && NK0EM100.GLAENT[NK0EW-INX] == " "
   && NK0EM100.GLARCID[NK0EW-INX] == " "
   && NK0EM100.GLANTAC[NK0EW-INX] == " "
   && NK0EM100.GLASUB[NK0EW-INX] == " "
   && NK0EM100.GLAPRJ[NK0EW-INX] == " ")
    if (converseVar.eventKey is pf17)
      /* next sentence*/
    else
      set NK0EM100.NK0EM-IVC[NK0EW-INX] bold, cursor, modified;
      converseLib.validationFailed(315);
      NK0EW-IVC-ERR-FL = "Y";
      return;
    end
  end
end // end NK0ES-EDIT-INVOICE

// Edit Ivc balance and zchcd
Function NK0ES-EDIT-IVC-BAL()
  /* ***********************************************************************/
  /* Edit the Invoice balance*/
  /*  */
  /* The invoice balance is determined by summing all invoice items with*/
  /* the same charge type code.  If the balance from the summing of the*/
  /* invoice items is equal to zero, then the item was not on the invoice*/
  /* and that is an edit error.  Next the invoice balance has all claim*/
  /* items with the same charge type code subtracted from the balance.*/
  /* Then the working storage claim amount is added back to the balance to*/
  /* adjust for the claim item.  If the map quantity is greater than the*/
  /* invoice balance that is an edit error.*/
  /*  */
  /* ***********************************************************************/
  /*  */
  NLXREC.NLXCPROC = "NK0DS-EDIT-IVC-BAL";
  /*  */
  /* ***********************************************************************/
  /* Sum up the invoice charge type amount.*/
  /* ***********************************************************************/
  /*  */
  NK0EW-IVC-BAL = 0;
  /*  */
  if (NKWREC.XXX-SUM-ZCR-CD == "MI") /* misc claim*/
    set VMIITM01 empty;
    VMIITM01.NIDIVCID = NK0EM100.NK0EM-IVC[NK0EW-INX];
    VMIITM01.ZCHCD = NK0EM100.NK0EM-ZCHCD[NK0EW-INX];
    NK0EW-NIBLINBR = NK0EW-02-NIBLINBR[NK0EW-INX];
    NK0ES-SEL-VMIITM01(); /* get invoice balance*/
    if (NK0EW-ERR-FLAG == "Y") /* there was a problem go back*/
      return;
    end
    if (NK0EW-IVC-BAL == 0) /* no matching items found;*/
      set NK0EM100.NK0EM-IVC[NK0EW-INX] bold, cursor, modified;
      set NK0EM100.NK0EM-ZCHCD[NK0EW-INX] bold, modified;
      NK0EM100.NK0EM-IVC-BAL[NK0EW-INX] = 0;
      converseLib.validationFailed(347);
      NK0EW-ERR-FLAG = "Y";
      return;
    end
    if (NK0EM100.GLAENT[NK0EW-INX] == " ")
      NK0EM100.GLAENT[NK0EW-INX] = VMIITM01.GLAENT;
      NK0EM100.GLARCID[NK0EW-INX] = VMIITM01.GLARCID;
      NK0EM100.GLANTAC[NK0EW-INX] = VMIITM01.GLANTAC;
      NK0EM100.GLASUB[NK0EW-INX] = VMIITM01.GLASUB;
      NK0EM100.GLAPRJ[NK0EW-INX] = VMIITM01.GLAPRJ;
    end
    NK0EW-02-NIGNETFL = "N";
  else /* else a product invoice*/
    set VPIADJ01 empty;
    VPIADJ01.NIDIVCID = NK0EM100.NK0EM-IVC[NK0EW-INX];
    VPIADJ01.ZCHCD = NK0EM100.NK0EM-ZCHCD[NK0EW-INX];
    NK0ES-SEL-VPIADJ01(); /* get invoice balance*/
    if (NK0EW-IVC-BAL == 0) /* no matching items found;*/
      set NK0EM100.NK0EM-IVC[NK0EW-INX] bold, modified, cursor;
      set NK0EM100.NK0EM-ZCHCD[NK0EW-INX] bold, modified;
      NK0EM100.NK0EM-IVC-BAL[NK0EW-INX] = 0;
      converseLib.validationFailed(347);
      NK0EW-ERR-FLAG = "Y";
      return;
    end
    if (NK0EM100.GLAENT[NK0EW-INX] == " ")
      NK0EM100.GLAENT[NK0EW-INX] = VPIADJ01.GLAENT;
      NK0EM100.GLARCID[NK0EW-INX] = VPIADJ01.GLARCID;
      NK0EM100.GLANTAC[NK0EW-INX] = VPIADJ01.GLANTAC;
      NK0EM100.GLASUB[NK0EW-INX] = VPIADJ01.GLASUB;
      NK0EM100.GLAPRJ[NK0EW-INX] = VPIADJ01.GLAPRJ;
    end
    NK0EW-02-NIGNETFL[NK0EW-INX] = VPIADJ01.NIGNETFL;
  end
  /*  */
  /* ***********************************************************************/
  /* Subtact all claim items for same invoice nbr and charge type*/
  /* ***********************************************************************/
  /*  */
  VNCADJ01.NIDIVCID = NK0EM100.NK0EM-IVC[NK0EW-INX];
  VNCADJ01.ZCHCD = NK0EM100.NK0EM-ZCHCD[NK0EW-INX];
  NK0EW-NIBLINBR = NK0EW-02-NIBLINBR[NK0EW-INX];

  NK0ES-SEL-VNCADJ01(); /* subtacts all matching claim adjs*/
                                  /* add current ivc item back*/
  NK0EW-IVC-BAL = NK0EW-IVC-BAL + NK0EW-02-CLM-QTY[NK0EW-INX];
                                  /* subtract new clam quantity*/
  NK0EW-IVC-BAL = NK0EW-IVC-BAL - NK0EM100.NK0EM-CLM-AMT[NK0EW-INX];

  NK0EM100.NK0EM-IVC-BAL[NK0EW-INX] = NK0EW-IVC-BAL;

  set NK0EM100.NK0EM-IVC-BAL[NK0EW-INX] initialAttributes;

  if (NK0EW-IVC-BAL < 0)
    set NK0EM100.NK0EM-CLM-AMT[NK0EW-INX] bold, cursor, modified;
    converseLib.validationFailed(352);
    NK0EW-ERR-FLAG = "Y";
  end
end // end NK0ES-EDIT-IVC-BAL

// Edit the Receivable type
Function NK0ES-EDIT-RCV-TYP()
  /* ***********************************************************************/
  /* Edit the receivable type.*/
  /*  */
  /* ***********************************************************************/

  NLXREC.NLXCPROC = "NK0DS-EDIT-RCV-TYP";

  /* ***********************************************************************/
  /* Edit the receivable type.*/
  /*  */
  /* All charges must have be allowed for the receivable entity*/
  /*  */
  /* ***********************************************************************/

  if (NKWREC.XLBCD == ZCHTBL.XLBCD1[sysVar.arrayIndex]
   || NKWREC.XLBCD == ZCHTBL.XLBCD2[sysVar.arrayIndex]
   || NKWREC.XLBCD == ZCHTBL.XLBCD3[sysVar.arrayIndex]
   || NKWREC.XLBCD == ZCHTBL.XLBCD4[sysVar.arrayIndex])
    /* next sentence*/
  else
    NK0EW-ERR-FLAG = "Y";
    set NK0EM100.NK0EM-ZCHCD[NK0EW-INX] bold, modified, cursor;
    converseLib.validationFailed(385);
    return;
  end

  /* ***********************************************************************/
  /* All charges which have GL codes default must be of the same receivable*/
  /* type.*/
  /*  */
  /* ***********************************************************************/

  if (NKWREC.XXX-SUM-ZCR-CD == "MI")
    if (ZCHTBL.ZRTCD[sysVar.arrayIndex] == NKWREC.ZRTCD) /* Valid rcve type*/
      if (NK0EW-MOD-ZCHCD[NK0EW-INX] == "Y" /* Charge type changed*/
       && NK0EW-SLS-GL-MOD-FL[NK0EW-INX] != "Y ") /* No Charge gl entered*/
        NK0ES-GET-GL-CODE(); /* Get charge type gl code*/
      end
    else
      NK0EW-ERR-FLAG = "Y";
      set NK0EM100.NK0EM-ZCHCD[NK0EW-INX] bold, modified, cursor;
      converseLib.validationFailed(43);
    end
  else /* edit not valid for 'PR' claims*/
    NK0EW-ERR-FLAG = "Y";
    set NK0EM100.NK0EM-ZCHCD[NK0EW-INX] bold, modified, cursor;
    converseLib.validationFailed(348);
  end
end // end NK0ES-EDIT-RCV-TYP

// select first for nikrec
Function NK0ES-F2-VZCHGL01()
  NLXREC.NLXCPROC = "NI0ES-F2-VZCHGL01"; /* set current proc name*/

  call "IO4540" ("F2", SQLCA, VZCHGL01) {isNoRefresh = yes, isExternal = yes}; /* select first row*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "F2     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4540 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VZCHGL01"; /* table view*/
    XPNL005(); /* abend routine*/
  end

end // end NK0ES-F2-VZCHGL01

// Get GL code for a item
Function NK0ES-GET-GL-CODE()
  /* ***********************************************************************/
  /* It will use the lockbox code on the customer record to assign the*/
  /* entity id if one is not on the VZCHGL table.  The IO mod IO4540 will*/
  /* be used to select the zch gl code.*/
  /* ***********************************************************************/

  NLXREC.NLXCPROC = "NK0ES-GET-GL-CODE";

  set VZCHGL01 empty;

  VZCHGL01.ZCHCD = NK0EM100.NK0EM-ZCHCD[NK0EW-INX];

  NK0ES-SF-VZCHGL01(); /* select first from zchgl tbl*/

  if (SQLCA.VAGen_SQLCODE == 100) /* charge type not valid for customer*/
    NK0EW-ERR-FLAG = "Y";
    converseLib.validationFailed(102);
    set NK0EM100.NK0EM-ZCHCD[NK0EW-INX] modified, cursor, bold;
    return;
  end

  /* ************************************************************************/
  /* Edit the Charge type GL code.  If it is spaces, it is valid for*/
  /* comp numbers only.*/
  /* ************************************************************************/

  if (VZCHGL01.GLAENT == " "
   && VZCHGL01.GLARCID == " "
   && VZCHGL01.GLANTAC == " "
   && VZCHGL01.GLASUB == " "
   && VZCHGL01.GLAPRJ == " ")
    if (NKWREC.OP1CMPNB == 0)
      converseLib.validationFailed(105);
      NLXREC.NLXERRF = "Y";
      set NK0EM100.NK0EM-ZCHCD[NK0EW-INX] modified, bold, cursor;
    else
      NK0EM100.GLAENT[NK0EW-INX] = NKW-SLS-GLAENT;
      NK0EM100.GLARCID[NK0EW-INX] = NKW-SLS-GLARCID;
      NK0EM100.GLANTAC[NK0EW-INX] = NKW-SLS-GLANTAC;
      NK0EM100.GLASUB[NK0EW-INX] = NKW-SLS-GLASUB;
      NK0EM100.GLAPRJ[NK0EW-INX] = NKW-SLS-GLAPRJ;
      if (NKW-SLS-GLAPRJ == "XX")
        if (NKWREC.XXX-SUM-ZCR-CD == "PR")
          NK0EM100.GLAPRJ[NK0EW-INX] = NKWREC.XGPCD;
        else
          NK0EM100.GLAPRJ[NK0EW-INX] = "  ";
        end
      end
    end
  else
    if (NKWREC.OP1CMPNB > 0)
      converseLib.validationFailed(106); /* charge type not valid with comp*/
                                   /* number*/
      NLXREC.NLXERRF = "Y";
      set NK0EM100.NK0EM-ZCHCD[NK0EW-INX] modified, bold, cursor;
    else
      NK0EM100.GLARCID[NK0EW-INX] = VZCHGL01.GLARCID;
      NK0EM100.GLANTAC[NK0EW-INX] = VZCHGL01.GLANTAC;
      NK0EM100.GLASUB[NK0EW-INX] = VZCHGL01.GLASUB;
      NK0EM100.GLAPRJ[NK0EW-INX] = VZCHGL01.GLAPRJ;
      if (VZCHGL01.GLAENT > " ")
        NK0EM100.GLAENT[NK0EW-INX] = VZCHGL01.GLAENT;
      else
        if (NKWREC.XLBCD in XLATBL.XLBCD)
          NK0EM100.GLAENT[NK0EW-INX] = XLATBL.GLAENT[sysVar.arrayIndex];
        end
      end
    end
  end
end // end NK0ES-GET-GL-CODE

// This process gets comp-id
Function NK0ES-GET-OP1CMPNB()
  if (NKWREC.XXX-SUM-ZCR-CD == "MI")
    set VMIHDR01 empty;
    VMIHDR01.NIDIVCID = NK0EM100.NK0EM-IVC[NK0EW-INX];
    NK0ES-S-VMIHDR01(); /* get invoice co-comp-cu-id*/
    if (VNCHDR01.OP1CMPNB == 0)
      NKWREC.OP1CMPNB = VMIHDR01.OP1CMPNB;
    end
  end
                    /* move invoice comp to ws-comp because new claim*/
  if (NKWREC.XXX-SUM-ZCR-CD == "PR")
    set VNCSTY01 empty;
    VNCSTY01.NIDIVCID = NKWREC.NL-CLM-ID;
    NK0ES-S1-VNCSTY01();
    NK0ES-N1-VNCSTY01();
    if (SQLCA.VAGen_SQLCODE == 100) /* no items found*/
      set VPIHDR01 empty;
      VPIHDR01.NIDIVCID = NK0EM100.NK0EM-IVC[NK0EW-INX];
      NK0ES-S-VPIHDR01(); /* get invoice co-comp-cu-id*/
      if (VNCHDR01.OP1CMPNB == 0)
        NKWREC.OP1CMPNB = VPIHDR01.OP1CMPNB;
      end
    end
    NK0ES-C1-VNCSTY01();
  end
end // end NK0ES-GET-OP1CMPNB

// Get GL code for a CLAIM
Function NK0ES-GET-RCV-GL()
  /* ***********************************************************************/
  /* This will get the RECEIVABLE GL code*/
  /* ***********************************************************************/

  NLXREC.NLXCPROC = "NK0ES-GET-RCV-GL";

  set VRCVGL01 empty;

  VRCVGL01.ZARCD = VDSTRB01.ZARCD;

  if (KUCREC.KUCCOID == 694643)
    VRCVGL01.ZRTCD = "CO";
  else
    if (KUCREC.XAUCD == "31")
      VRCVGL01.ZRTCD = "IC";
    else
      VRCVGL01.ZRTCD = NKWREC.ZRTCD;
    end
  end

   /* select unique niirec record*/

  call "IO4530" ("SF", SQLCA, VRCVGL01) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    if (VRCVGL01.ZARCD == " ") /* default receivable gl*/
      if (KUCREC.XAUCD == "33") /* defautl valid for independents only*/
      /* next sentence*/
      else
        set NK0EM100.NK0EM-ZCHCD[NK0EW-INX] bold, modified;
        converseLib.validationFailed(386);
        NLXREC.NLXERRF = "Y";
        return;
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      set NK0EM100.NK0EM-ZCHCD[NK0EW-INX] bold, modified;
      converseLib.validationFailed(386);
      NLXREC.NLXERRF = "Y";
      return;
    else
      TA1REC.TA1TBLKE = NIIGROUP; /* database key*/
      TA1REC.TA1LOCAT[2] = "SF     "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO4530 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VRCVGL01"; /* table view*/
      XPNL005(); /* abend routine*/
      return;
    end
  end

  NKW-REC-GLARCID = VRCVGL01.GLARCID;
  NKW-REC-GLANTAC = VRCVGL01.GLANTAC;
  NKW-REC-GLASUB = VRCVGL01.GLASUB;
  NKW-REC-GLAPRJ = VRCVGL01.GLAPRJ;
  /*  */
  /* ************************************************************************/
  /* assign entity id based on lock box code of the company*/
  /* ************************************************************************/
  /*  */
  if (NKWREC.XLBCD in XLATBL.XLBCD)
    NKW-REC-GLAENT = XLATBL.GLAENT[sysVar.arrayIndex];
  end
end // end NK0ES-GET-RCV-GL

// Get m100 temp storage
Function NK0ES-GET-TMP-STG()
   /* ***********************************************************************/
   /*  */
   /* Get temp storage for current page*/
   /*  */
   /* ***********************************************************************/

  NLXREC.NLXCPROC = "NK0ES-GET-TMP-STG";
  TA1REC.TA1LOC = "NK0ES-GET-TMP-STG";

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  move NK0EW-W02-SIZE to NK0EW-02-LENGTH withV60Compat;
  TA5REC.TA5TSQIX = NK0EW-NEXT-PAGE-NBR; /* Page number to fetch*/

  TA5REC.TA5FNCCD = "R"; /* Function code*/

  try
    call "TA0050" (NK0EW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  else

   /* ------------------------------------------------------------*/
    /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

    converseLib.validationFailed(299); /* Indicate system error*/

    XPNL-006(); /* abend routine*/

  end

end // end NK0ES-GET-TMP-STG

// Display pop-up windows MAP100
Function NK0ES-M100-POP-UPS()
   /* *****************************************************/
   /* Process all POP-UP window requests*/
   /* *****************************************************/

  NLXREC.NLXCPROC = "NK0E-M100-POP-UPS";
  NK0EW-INX = 6;

   /* *****************************************************/
   /* Process all GPC code pop-up request*/
   /* *****************************************************/

  while (NK0EW-INX >= 1)
    if (NK0EM100.NK0EM-ZCHCD[NK0EW-INX] == "?")
      NLXREC.NLXERRF = "Y";
      XPXX001();
      while (XX0XW02.XX0XWEND == "N")
        XPZCH01();
      end
      set NK0EM100.NK0EM-ZCHCD[NK0EW-INX] cursor, modified;
      if (XX0XW02.XX0XWPIX > 0)
        NK0EM100.NK0EM-ZCHDESC[NK0EW-INX] = ZCHTBL.ZCHDESC[XX0XWPIX];
        NK0EM100.NK0EM-ZCHCD[NK0EW-INX] = ZCHTBL.ZCHCD[XX0XWPIX];
      else
        NK0EM100.NK0EM-ZCHDESC[NK0EW-INX] = "     ";
      end
    end

    NK0EW-INX = NK0EW-INX - 1;
  end

end // end NK0ES-M100-POP-UPS

// Set map to inquiry mode
Function NK0ES-MAP100-MODE()
  /* ************************************************************************/
  /* Set map to an inquiry mode*/
  /* ************************************************************************/

  NLXREC.NLXCPROC = "NK0ES-SET-INQ-MODE";
  NK0EW-INX = 1;

  /* ************************************************************************/
  /* If from invoicing, set the map to inquiry only.*/
  /* ************************************************************************/

  if (NKW-FROM-APP == "NK0G")
    NKW-MAP-MODE = "I";
  end

  set NK0EM100.CATOAP normal, cursor;
  set NK0EM100.CAITEM normal;
  if (NKW-MAP-MODE == "I") /* Inquiry only*/
    while (NK0EW-INX <= 6)
      set NK0EM100.NK0EM-IVC[NK0EW-INX] skip;
      set NK0EM100.NK0EM-ZCHCD[NK0EW-INX] skip;
      set NK0EM100.NK0EM-CLM-AMT[NK0EW-INX] skip;
      set NK0EM100.GLAENT[NK0EW-INX] skip;
      set NK0EM100.GLARCID[NK0EW-INX] skip;
      set NK0EM100.GLANTAC[NK0EW-INX] skip;
      set NK0EM100.GLASUB[NK0EW-INX] skip;
      set NK0EM100.GLAPRJ[NK0EW-INX] skip;
      NK0EW-INX = NK0EW-INX + 1;
    end
    return; /* map set, get out*/
  end

   /* Protect G/L code, it is part of the key*/

  NK0EW-INX = 1;
  while (NK0EW-INX <= 6)
    if (NK0EW-02-CLM-QTY[NK0EW-INX] > 0)
      set NK0EM100.GLAENT[NK0EW-INX] skip;
      set NK0EM100.GLARCID[NK0EW-INX] skip;
      set NK0EM100.GLANTAC[NK0EW-INX] skip;
      set NK0EM100.GLASUB[NK0EW-INX] skip;
      set NK0EM100.GLAPRJ[NK0EW-INX] skip;
    end
    NK0EW-INX = NK0EW-INX + 1;
  end

  NK0EW-INX = 6;
  while (NK0EW-INX > 0)
    if (NK0EW-02-CLM-QTY[NK0EW-INX] > 0)
      if (NK0EW-02-MULTI-CLM-ITM[NK0EW-INX] == "Y")
        set NK0EM100.NK0EM-CLM-AMT[NK0EW-INX] bold, cursor;
        set NK0EM100.NK0EM-IVC[NK0EW-INX] skip, bold;
        set NK0EM100.NK0EM-ZCHCD[NK0EW-INX] skip, bold;
        set NK0EM100.NK0EM-ZCHDESC[NK0EW-INX] skip, bold;
        converseLib.validationFailed(393);
      else
        set NK0EM100.NK0EM-CLM-AMT[NK0EW-INX] normal, cursor;
        set NK0EM100.NK0EM-IVC[NK0EW-INX] skip;
        set NK0EM100.NK0EM-ZCHCD[NK0EW-INX] skip;
        set NK0EM100.NK0EM-ZCHDESC[NK0EW-INX] skip;
      end
    else
      if (NK0EM100.NK0EM-ZCHCD[NK0EW-INX] > "  ")
        set NK0EM100.NK0EM-TO-PAGE skip, modified;
      end
      if (NK0EW-02-MULTI-CLM-ITM[NK0EW-INX] == "Y")
        set NK0EM100.NK0EM-CLM-AMT[NK0EW-INX] bold, cursor;
        if (NKWREC.ZCR-CLM-RSN-CD == "UM" /* un-invoiced claim*/
         || NKWREC.ZCR-CLM-RSN-CD == "IN") /* un-invoiced claim*/
          set NK0EM100.NK0EM-IVC[NK0EW-INX] skip, invisible;
        else
          set NK0EM100.NK0EM-IVC[NK0EW-INX] bold, cursor;
        end
        set NK0EM100.NK0EM-ZCHCD[NK0EW-INX] bold;
        set NK0EM100.NK0EM-ZCHDESC[NK0EW-INX] skip, bold;
        converseLib.validationFailed(393);
      else
        set NK0EM100.NK0EM-CLM-AMT[NK0EW-INX] initialAttributes;
        if (NKWREC.ZCR-CLM-RSN-CD == "UM" /* un-invoiced claim*/
         || NKWREC.ZCR-CLM-RSN-CD == "IN") /* un-invoiced claim*/
          set NK0EM100.NK0EM-IVC[NK0EW-INX] skip, invisible;
          set NK0EM100.NK0EM-ZCHCD[NK0EW-INX] initialAttributes, cursor;
        else
          set NK0EM100.NK0EM-IVC[NK0EW-INX] initialAttributes, cursor;
          set NK0EM100.NK0EM-ZCHCD[NK0EW-INX] initialAttributes;
        end
        set NK0EM100.NK0EM-ZCHDESC[NK0EW-INX] initialAttributes;
      end
    end
    NK0EW-INX = NK0EW-INX - 1;
  end

end // end NK0ES-MAP100-MODE

// Page BACKWARD logic
Function NK0ES-MAP100-PF7()
   /* ***********************************************************************/
   /* Page BACKWARD logic*/
   /* ***********************************************************************/

  NLXREC.NLXCPROC = "NK0ES-MAP100-PF7";

  if (NK0EW-NEXT-PAGE-NBR == 1)
    converseLib.validationFailed(318);
    return;
  else
    NK0EW-NEXT-PAGE-NBR = NK0EW-NEXT-PAGE-NBR - 1;
  end
  NK0ES-BUILD-MAP100();
end // end NK0ES-MAP100-PF7

// Page forward logic
Function NK0ES-MAP100-PF8()
   /* ***********************************************************************/
   /* Page forward logic*/
   /* ***********************************************************************/

  NLXREC.NLXCPROC = "NK0ES-MAP100-PF8";

   /* F NK0EW-NEXT-PAGE-NBR GE NK0EW-HIGH-PAGE-NBR;*/
  if (NK0EW-02-ZCHCD[1] == " "
   || NK0EW-02-ZCHCD[2] == " "
   || NK0EW-02-ZCHCD[3] == " "
   || NK0EW-02-ZCHCD[4] == " "
   || NK0EW-02-ZCHCD[5] == " "
   || NK0EW-02-ZCHCD[6] == " ")
    converseLib.validationFailed(317);
    return;
  end
  set NK0EW02 empty;
  NK0EW-NEXT-PAGE-NBR = NK0EW-NEXT-PAGE-NBR + 1;
  NK0ES-BUILD-MAP100();
end // end NK0ES-MAP100-PF8

// Page BACKWARD logic
Function NK0ES-MAP200-PF7()
   /* ***********************************************************************/
   /* Page BACKWARD logic*/
   /* ***********************************************************************/

  NLXREC.NLXCPROC = "NK0ES-MAP200-PF7";

  if (NK0EW-MAP200-FM-PAGE == 1)
    converseLib.validationFailed(318);
    return;
  else
    NK0EW-MAP200-FM-PAGE = NK0EW-MAP200-FM-PAGE - 1;
  end
  NK0ES-BUILD-MAP200();
end // end NK0ES-MAP200-PF7

// Page forward logic
Function NK0ES-MAP200-PF8()
   /* ***********************************************************************/
   /* Page forward logic*/
   /* ***********************************************************************/

  NLXREC.NLXCPROC = "NK0ES-MAP200-PF8";

  if (NK0EW-MAP200-FM-PAGE == NK0EW-MAP200-TO-PAGE)
    converseLib.validationFailed(30);
    return;
  end
  NK0EW-MAP200-FM-PAGE = NK0EW-MAP200-FM-PAGE + 1;
  NK0ES-BUILD-MAP200();
end // end NK0ES-MAP200-PF8

// Move mod flags for M100
Function NK0ES-MOVE-MOD-FL()
  /* ************************************************************************/
  /* Set field mod flags for Map100 incase pop-up window was asked for*/
  /* ************************************************************************/

  NLXREC.NLXCPROC = "NK0ES-MOVE-MOD-FL";

  NK0EW-INX = 1; /* Set processing index*/

  if (NK0EM100.NK0EM-FM-PAGE is modified)
    NK0EW-PAGE-MOD-FL = "Y";
    set NK0EM100.NK0EM-FM-PAGE initialAttributes;
  end

  while (NK0EW-INX <= 6)
    if (NK0EM100.NK0EM-IVC[NK0EW-INX] is modified)
      NK0EW-MOD-IVC[NK0EW-INX] = "Y";
      NK0EW-ENTER-CNFM-FL = "N";
      set NK0EM100.NK0EM-IVC[NK0EW-INX] initialAttributes;
    end
    if (NK0EM100.NK0EM-ZCHCD[NK0EW-INX] is modified)
      NK0EW-MOD-ZCHCD[NK0EW-INX] = "Y";
      NK0EW-ENTER-CNFM-FL = "N";
      set NK0EM100.NK0EM-ZCHCD[NK0EW-INX] initialAttributes;
    end
    if (NK0EM100.NK0EM-CLM-AMT[NK0EW-INX] is modified)
      NK0EW-MOD-CLM-AMT[NK0EW-INX] = "Y";
      NK0EW-ENTER-CNFM-FL = "N";
      set NK0EM100.NK0EM-CLM-AMT[NK0EW-INX] initialAttributes;
    end
    if (NK0EM100.GLAENT[NK0EW-INX] is modified
     || NK0EM100.GLARCID[NK0EW-INX] is modified
     || NK0EM100.GLANTAC[NK0EW-INX] is modified
     || NK0EM100.GLASUB[NK0EW-INX] is modified
     || NK0EM100.GLAPRJ[NK0EW-INX] is modified)
      NK0EW-SLS-GL-MOD-FL[NK0EW-INX] = "Y";
      NK0EW-ENTER-CNFM-FL = "N";
      set NK0EM100.GLAENT[NK0EW-INX] initialAttributes;
      set NK0EM100.GLARCID[NK0EW-INX] initialAttributes;
      set NK0EM100.GLANTAC[NK0EW-INX] initialAttributes;
      set NK0EM100.GLASUB[NK0EW-INX] initialAttributes;
      set NK0EM100.GLAPRJ[NK0EW-INX] initialAttributes;
    end
    NK0EW-INX = NK0EW-INX + 1;
  end
end // end NK0ES-MOVE-MOD-FL

// Update new charge arrary
Function NK0ES-MOVE-NEW-CHG()
   /* *****************************************************/
   /* Update the new charge array*/
   /* *****************************************************/

  NLXREC.NLXCPROC = "NK0ES-MOVE-NEW-CHG";


   /* This statement group will update the new charge array if a charge*/
   /* have changed since they were first put into the array.*/

  NK0EW-INX = 1;
  while (NK0EW-INX <= 6)
    if (NK0EW-02-CLM-QTY[NK0EW-INX] == 0)
      NK0EW-INX2 = 1;
      while (NK0EW-INX2 < 204)
        if (NK0EW-03-ROW[NK0EW-INX2] == 0) /* LAST ENTRY IN TABLE*/
          NK0EW-INX2 = 300;
        else
          if (NK0EW-INX == NK0EW-03-ROW[NK0EW-INX2]
           && NK0EW-NEXT-PAGE-NBR == NK0EW-03-PAGE[NK0EW-INX2])
            NK0EW-03-IVC[NK0EW-INX2] = NK0EM100.NK0EM-IVC[NK0EW-INX];
            NK0EW-03-ZCHCD[NK0EW-INX2] = NK0EM100.NK0EM-ZCHCD[NK0EW-INX];
            NK0EW-03-NIBLINBR[NK0EW-INX2] = NK0EW-02-NIBLINBR[NK0EW-INX];
            NK0EW-03-GLAENT[NK0EW-INX2] = NK0EM100.GLAENT[NK0EW-INX];
            NK0EW-03-GLARCID[NK0EW-INX2] = NK0EM100.GLARCID[NK0EW-INX];
            NK0EW-03-GLANTAC[NK0EW-INX2] = NK0EM100.GLANTAC[NK0EW-INX];
            NK0EW-03-GLAPRJ[NK0EW-INX2] = NK0EM100.GLAPRJ[NK0EW-INX];
            NK0EW-03-GLASUB[NK0EW-INX2] = NK0EM100.GLASUB[NK0EW-INX];
            NK0EW-INX2 = 301;
          else
            NK0EW-INX2 = NK0EW-INX2 + 1;
          end
        end
      end
    end
    NK0EW-INX = NK0EW-INX + 1;
  end
end // end NK0ES-MOVE-NEW-CHG

// Fetch cursor 1 on VMIITM01
Function NK0ES-N1-VMIITM01()
   /* *****************************************************/
   /* Fetch cursor on VMIITM01*/
   /* *****************************************************/

  NLXREC.NLXCPROC = "NK0ES-N1-VMIITM01";

   /* Fetch cursor on - VMIITM01*/

  call "IO4450" ("N1", SQLCA, VMIITM01) {isNoRefresh = yes, isExternal = yes}; /* fetch next miitm*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100) /* or not end of cursor*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VMIITM01";
    NK0EW-LRG-NBR = VMIITM01.NIDIVCID;
    TA1REC.TA1TBLKE = NK0EW01.NK0EW-KEY;
    XPNL005(); /* abort routine*/
  end

end // end NK0ES-N1-VMIITM01

// Fetch cursor 1 on VNCADJ01
Function NK0ES-N1-VNCADJ01()
  /* ************************************************************************/
  /* Fetch cursor on VNCADJ01*/
  /* ************************************************************************/

  NLXREC.NLXCPROC = "NK0ES-N1-VNCADJ01";

   /* Fetch cursor on - VNCADJ01*/

  call "IO6490" ("N1", SQLCA, VNCADJ01) {isNoRefresh = yes, isExternal = yes}; /* fetch next VNCADJ01*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100) /* or a not found condtion*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCADJ01";
    NK0EW-LRG-NBR = VNCADJ01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0EW01.NK0EW-KEY;
    XPNL005(); /* abort routine*/
  end

end // end NK0ES-N1-VNCADJ01

// Get sum of VNCSTY01
Function NK0ES-N1-VNCSTY01()
   /* *****************************************************************/
   /* fetch item cursor*/
   /* *****************************************************************/

  NLXREC.NLXCPROC = "NK0ES-N1-VNCSTY01";

  call "IO6470" ("N1", SQLCA, VNCSTY01) {isNoRefresh = yes, isExternal = yes}; /* fetch next item*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100) /* or not end of cursor*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCHDR01";
    NK0EW-LRG-NBR = VNCHDR01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0EW01.NK0EW-KEY;
    XPNL005(); /* abort routine*/
  end

end // end NK0ES-N1-VNCSTY01

// fetch using nl-clm-id
Function NK0ES-N2-VNCIVX01()
  NLXREC.NLXCPROC = "NK0ES-N2-VNCIVX01";
  call "IO6510" ("N2", SQLCA, VNCIVX01) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0 /* if hit*/
   || SQLCA.VAGen_SQLCODE == 100) /* no hit*/
   /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCIVX01";
    NK0EW-LRG-NBR = VNCIVX01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0EW01.NK0EW-KEY;
    XPNL005();
  end
end // end NK0ES-N2-VNCIVX01

// Fetch cursor 2 on VPIADJ01
Function NK0ES-N2-VPIADJ01()
   /* *****************************************************/
   /* Fetch cursor on VPIADJ01*/
   /* *****************************************************/

  NLXREC.NLXCPROC = "NK0ES-N2-VPIADJ01";

   /* fetch cursor on - VPIADJ01*/

  call "IO4510" ("N2", SQLCA, VPIADJ01) {isNoRefresh = yes, isExternal = yes}; /* fetch next piadj*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100) /* or end of cursor*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VPIAJD01";
    NK0EW-LRG-NBR = VPIADJ01.NIDIVCID;
    NK0EW-CHR-IND = VPIADJ01.ZCHCD;
    TA1REC.TA1TBLKE = NK0EW01.NK0EW-KEY;
    XPNL005(); /* abort routine*/
  end

end // end NK0ES-N2-VPIADJ01

// update temp storage for ivc
Function NK0ES-PROCESS-IVC()
   /* **********************************************************************/
   /* This statement group will update the temp storage for the items*/
   /* selected during the invoice select process.*/
   /* **********************************************************************/

  NLXREC.NLXCPROC = "NK0ES-PROCESS-IVC";

  NK0EW-INX = 1;
  NK0EW-INX4 = 1;
  NK0EW-ARRAY-CNT = 1;

  /* ************************************************************************/
  /* Move the selected CHARGES to the current map100 working storage.*/
  /* Will move items to rows with no CHARGE and invoice id.  if the index*/
  /* NK0EW-INX is equal to 6, then the working storage NK0EW02 needs to*/
  /* be updated.  This logic will update the current map working storage.*/
  /* and update the temp storage.  Next, the last page will be retreived*/
  /* from temp storage and all empty lines filled and then updated in temp*/
  /* storage.  After that we will add new pages to temp storage for the*/
  /* balance of the invoice items.*/
  /* ************************************************************************/

  NK0EW-INX = 1;
  while (NK0EW-INX4 <= 204)
    if (NK0EW-04-ZCHCD[NK0EW-INX4] == " ") /* no more charges to process*/
      NK0EW-INX4 = 300;
    else
      if (NK0EW-04-NL-CLM-QTY[NK0EW-INX4] > 0)
        if (NK0EW-02-ZCHCD[NK0EW-INX] == " ")
          NK0EW-ENTER-CNFM-FL = "R";
          NK0EW-02-ZCHCD[NK0EW-INX] = NK0EW-04-ZCHCD[NK0EW-INX4];
          NK0EW-02-MAP-QTY[NK0EW-INX] = NK0EW-04-NL-CLM-QTY[NK0EW-INX4];
          NK0EW-02-IVC[NK0EW-INX] = NK0EW-04-NIDIVCID[NK0EW-INX4];
          NK0EW-02-NIBLINBR[NK0EW-INX] = NK0EW-04-NIBLINBR[NK0EW-INX4];
          NK0EW-02-GLAENT[NK0EW-INX] = NK0EW-04-GLAENT[NK0EW-INX4];
          NK0EW-02-GLARCID[NK0EW-INX] = NK0EW-04-GLARCID[NK0EW-INX4];
          NK0EW-02-GLANTAC[NK0EW-INX] = NK0EW-04-GLANTAC[NK0EW-INX4];
          NK0EW-02-GLASUB[NK0EW-INX] = NK0EW-04-GLASUB[NK0EW-INX4];
          NK0EW-02-GLAPRJ[NK0EW-INX] = NK0EW-04-GLAPRJ[NK0EW-INX4];
        /* ******************************************************************/
        /* move the style to the dup style array*/
        /* ******************************************************************/
          NK0EW-INX3 = NK0EW-INX3 + 1;
          NK0EW-03-ZCHCD[NK0EW-INX3] = NK0EW-04-ZCHCD[NK0EW-INX4];
          NK0EW-03-IVC[NK0EW-INX3] = NK0EW-04-NIDIVCID[NK0EW-INX4];
          NK0EW-03-NIBLINBR[NK0EW-INX3] = NK0EW-04-NIBLINBR[NK0EW-INX4];
          NK0EW-03-GLAENT[NK0EW-INX3] = NK0EW-04-GLAENT[NK0EW-INX4];
          NK0EW-03-GLARCID[NK0EW-INX3] = NK0EW-04-GLARCID[NK0EW-INX4];
          NK0EW-03-GLANTAC[NK0EW-INX3] = NK0EW-04-GLANTAC[NK0EW-INX4];
          NK0EW-03-GLASUB[NK0EW-INX3] = NK0EW-04-GLASUB[NK0EW-INX4];
          NK0EW-03-GLAPRJ[NK0EW-INX3] = NK0EW-04-GLAPRJ[NK0EW-INX4];
          NK0EW-03-ROW[NK0EW-INX3] = NK0EW-INX;
          NK0EW-03-PAGE[NK0EW-INX3] = NK0EW-NEXT-PAGE-NBR;
          NK0EW-INX4 = NK0EW-INX4 + 1;
        end
        NK0EW-INX = NK0EW-INX + 1;
      else
        NK0EW-INX4 = NK0EW-INX4 + 1;
      end
    end
    /*  */
    if (NK0EW-INX == 7)
      NK0ES-STORAGE-UPDT(); /* update the current temp storage*/
      NK0EW-INX = 1;
    end
  end

  if (NK0EW-02-ZCHCD[1] > " ")
    NK0ES-STORAGE-UPDT(); /* update the current temp storage*/
  end

  /* ************************************************************************/
  /* Test the new charge array index, if it is greater than 204, it will*/
  /* cause a subscript error, so force the user to update the claim before*/
  /* going on.*/
  /* ************************************************************************/
  if (NK0EW-INX3 > 204)
    NLXLINEX = 13;
    converseLib.validationFailed(316);
    NLXREC.NLXERRF = "Y";
  end
end // end NK0ES-PROCESS-IVC

// PRODUCT  CLAIMS WITH IP STAT
Function NK0ES-PROCESS-PR()
  VNCADJ01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  VNCIVX01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  NK0ES-S1-VNCADJ01(); /* DECLARE CURSOR*/
  NLXVITMF = "N"; /* adj flag*/
  NK0ES-N1-VNCADJ01(); /* FETCH*/
  if (SQLCA.VAGen_SQLCODE == 0)
    NLXVITMF = "Y"; /* ADJ FOUND*/
  end /* END IF*/
  NK0ES-C1-VNCADJ01(); /* CLOSE CURSOR*/
  if (NLXVITMF == "N")
    NK0ES-S2-VNCIVX01(); /* DECLARE CURSOR*/
    while (SQLCA.VAGen_SQLCODE == 0
     && NLXLINEX <= 9)
      NK0ES-N2-VNCIVX01(); /* FETCH CURSOR*/
      if (SQLCA.VAGen_SQLCODE == 0)
        NLXLINEX = NLXLINEX + 1;
        NK0EW-IVC-ARRAY[NLXLINEX] = VNCIVX01.NIDIVCID;
        if (NLXLINEX == 10)
          converseLib.validationFailed(401);
        end /* END IF SQL*/
      end /* END IF SQL*/
    end /* END WHILE*/
    NK0ES-C2-VNCIVX01(); /* CLOSE CURSOR*/
  end /* END IF ADJ-FLAG*/
end // end NK0ES-PROCESS-PR

// Select company row
Function NK0ES-S-VCMPNY01()
   /* *****************************************************/
   /* Select company*/
   /* *****************************************************/

  NLXREC.NLXCPROC = "NK0ES-SEL-VCMPN01";

   /* Open cursor for VNCDEF01*/

  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* select customer*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100) /* if a not found,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCMPNY01";
    NK0EW-LRG-NBR = KUCREC.KUCCOID;
    TA1REC.TA1TBLKE = NK0EW01.NK0EW-KEY;
    XPNL005(); /* abort routine*/
  end

end // end NK0ES-S-VCMPNY01

// Select distributor row
Function NK0ES-S-VDSTRB01()
  /* ************************************************************************/
  /* Select distributor*/
  /* ************************************************************************/

  NLXREC.NLXCPROC = "NK0ES-SEL-VDSTRB01";

   /* Open cursor for Vdstrb01*/

  VDSTRB01.KUCCOID = NKWREC.KUCCOID;
  call "IO4600" ("S ", SQLCA, VDSTRB01) {isNoRefresh = yes, isExternal = yes}; /* select distributor*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VDSTRB01";
    NK0EW-LRG-NBR = NKWREC.KUCCOID;
    TA1REC.TA1TBLKE = NK0EW01.NK0EW-KEY;
    XPNL005(); /* abort routine*/
  end

end // end NK0ES-S-VDSTRB01

// Select unique VMIHDR01
Function NK0ES-S-VMIHDR01()
   /* *****************************************************************/
   /* This will select a unique row from DNILO.VMIHDR01*/
   /* *****************************************************************/

  NLXREC.NLXCPROC = "NK0ES-S-VMIHDR01";

  call "IO4440" ("S ", SQLCA, VMIHDR01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100) /* or a not found*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VMIHDR01";
    NK0EW-LRG-NBR = VMIHDR01.NIDIVCID;
    TA1REC.TA1TBLKE = NK0EW-KEY;
    XPNL005(); /* abort routine*/
  end


end // end NK0ES-S-VMIHDR01

// Select unique VNCSTY01
Function NK0ES-S-VNCADJ01()
   /* *****************************************************************/
   /* This will select a unique row from DNILO.VNCADJ01*/
   /* *****************************************************************/

  NLXREC.NLXCPROC = "NK0ES-S-VNCADJ01";

  call "IO6490" ("S ", SQLCA, VNCADJ01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100) /* or a not found condition;*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCADJ01";
    NK0EW-LRG-NBR = VNCADJ01.NL-CLM-ID;
    NK0EW-CHR-IND = VNCADJ01.ZCHCD;
    TA1REC.TA1TBLKE = NK0EW01.NK0EW-KEY;
    XPNL005(); /* abort routine*/
  end


end // end NK0ES-S-VNCADJ01

// Select claim header
Function NK0ES-S-VNCHDR01()
   /* *****************************************************************/
   /* This will update the claim header with the new claim balance.*/
   /* *****************************************************************/

  NLXREC.NLXCPROC = "NK0ES-S-VNCHDR01";

   /* select on - VNCHDR01*/

  call "IO6460" ("S ", SQLCA, VNCHDR01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCHDR01";
    NK0EW-LRG-NBR = VNCHDR01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0EW01.NK0EW-KEY;
    XPNL005(); /* abort routine*/
  end

end // end NK0ES-S-VNCHDR01

// Select claim header
Function NK0ES-S-VNCHDR01-A()
   /* *****************************************************************/
   /* This will update the claim header with the new claim balance.*/
   /* *****************************************************************/

  NLXREC.NLXCPROC = "NK0ES-S-VNCHDR01-A";

   /* select on - VNCHDR01*/

  call "IO6460" ("S ", SQLCA, VNCHDR01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100) /* if not found return*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCHDR01";
    NK0EW-LRG-NBR = VNCHDR01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0EW01.NK0EW-KEY;
    XPNL005(); /* abort routine*/
  end

end // end NK0ES-S-VNCHDR01-A

// Select unique VNLGLA01
Function NK0ES-S-VNLGLA01()
   /* *****************************************************************/
   /* This will select a unique row from DNILO.VNLGLA01*/
   /* *****************************************************************/

  NLXREC.NLXCPROC = "NK0ES-S-VNLGLA01";

  call "IO4610" ("S ", SQLCA, VNLGLA01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNLGLA01";
    TA1REC.TA1TBLKE = VNLGLA01.NIJGROUP;
    XPNL005(); /* abort routine*/
  end


end // end NK0ES-S-VNLGLA01

// Select unique VNLIVX01
Function NK0ES-S-VNLIVX01()
   /* *****************************************************************/
   /* This will select a unique row from DNILO.VNLIVX01*/
   /* *****************************************************************/

  NLXREC.NLXCPROC = "NK0ES-S-VNLIVX01";

  call "IO4460" ("S ", SQLCA, VNLIVX01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100) /* or a not fount condition*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNLIVX01";
    NK0EW-LRG-NBR = VNLIVX01.NIDIVCID;
    TA1REC.TA1TBLKE = NK0EW-KEY;
    XPNL005(); /* abort routine*/
  end


end // end NK0ES-S-VNLIVX01

// Select unique VPIHDR01
Function NK0ES-S-VPIHDR01()
   /* *****************************************************************/
   /* This will select a unique row from DNILO.VPIHDR01*/
   /* *****************************************************************/

  NLXREC.NLXCPROC = "NK0ES-S-VPIHDR01";

  call "IO4470" ("S ", SQLCA, VPIHDR01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/

  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100) /* or a not fount condition*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VPIHDR01";
    NK0EW-LRG-NBR = VPIHDR01.NIDIVCID;
    TA1REC.TA1TBLKE = NK0EW-KEY;
    XPNL005(); /* abort routine*/
  end


end // end NK0ES-S-VPIHDR01

// Open cursor 1 on VMIITM01
Function NK0ES-S1-VMIITM01()
   /* *****************************************************/
   /* Open cursor on VMIITM01*/
   /* *****************************************************/

  NLXREC.NLXCPROC = "NK0ES-S1-VMIITM01";

   /* Open cursor on - VMIITM01*/

  call "IO4450" ("S1", SQLCA, VMIITM01) {isNoRefresh = yes, isExternal = yes}; /* Open cursor1 on VIITM*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VMIITM01";
    NK0EW-LRG-NBR = VMIITM01.NIDIVCID;
    TA1REC.TA1TBLKE = NK0EW01.NK0EW-KEY;
    XPNL005(); /* abort routine*/
  end

end // end NK0ES-S1-VMIITM01

// Open cursor 1 on VNCADJ01
Function NK0ES-S1-VNCADJ01()
  /* ************************************************************************/
  /* Open cursor on VNCADJ01*/
  /* ************************************************************************/

  NLXREC.NLXCPROC = "NK0ES-S1-VNCADJ01";

   /* Open cursor on - VNCADJ01*/

  call "IO6490" ("S1", SQLCA, VNCADJ01) {isNoRefresh = yes, isExternal = yes}; /* open cursor 1 on NCADJ*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCADJ01";
    NK0EW-LRG-NBR = VNCADJ01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0EW01.NK0EW-KEY;
    XPNL005(); /* abort routine*/
  end

end // end NK0ES-S1-VNCADJ01

// Get sum of VNCSTY01
Function NK0ES-S1-VNCSTY01()
   /* *****************************************************************/
   /* Declare item cursor*/
   /* *****************************************************************/

  NLXREC.NLXCPROC = "NK0ES-S1-VNCSTY01";

  call "IO6470" ("S1", SQLCA, VNCSTY01) {isNoRefresh = yes, isExternal = yes}; /* open crsr on items*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCHDR01";
    NK0EW-LRG-NBR = VNCHDR01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0EW01.NK0EW-KEY;
    XPNL005(); /* abort routine*/
  end

end // end NK0ES-S1-VNCSTY01

// declare cursor using nl-clm-id
Function NK0ES-S2-VNCIVX01()
  NLXREC.NLXCPROC = "NK0ES-S2-VNCIVX01";
  call "IO6510" ("S2", SQLCA, VNCIVX01) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 0)
   /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCIVX01";
    NK0EW-LRG-NBR = VNCIVX01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0EW01.NK0EW-KEY;
    XPNL005();
  end
end // end NK0ES-S2-VNCIVX01

// Open  cursor 2 on VPIADJ01
Function NK0ES-S2-VPIADJ01()
   /* *****************************************************/
   /* Open  cursor on VPIADJ01*/
   /* *****************************************************/

  NLXREC.NLXCPROC = "NK0ES-S2-VPIADJ01";

   /* Open cursor on - VPIADJ01*/

  call "IO4510" ("S2", SQLCA, VPIADJ01) {isNoRefresh = yes, isExternal = yes}; /* OPEN cursor2 on PIADJ*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VPIAJD01";
    NK0EW-LRG-NBR = VPIADJ01.NIDIVCID;
    NK0EW-CHR-IND = VPIADJ01.ZCHCD;
    TA1REC.TA1TBLKE = NK0EW01.NK0EW-KEY;
    XPNL005(); /* abort routine*/
  end

end // end NK0ES-S2-VPIADJ01

// Select MIITM quantities
Function NK0ES-SEL-VMIITM01()
  /* ************************************************************************/
  /* Select VMIITM  amounts*/
  /* ************************************************************************/

  NLXREC.NLXCPROC = "NK0ES-SEL-VMIITM01";

   /* open cursor on - VMIITM01*/

  call "IO4450" ("S1", SQLCA, VMIITM01) {isNoRefresh = yes, isExternal = yes}; /* open cursor 1 on MIITM*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VMIITM01";
    NK0EW-LRG-NBR = VMIITM01.NIDIVCID;
    NK0EW-CHR-IND = VMIITM01.ZCHCD;
    move NK0EW-KEY to TA1TBLKE withV60Compat;
    XPNL005(); /* abort routine*/
  end

  NK0EW-MULTI-CLM-ITM = "N";
  while (SQLCA.VAGen_SQLCODE == 0)
    call "IO4450" ("N1", SQLCA, VMIITM01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
      if (NK0EW-NIBLINBR == 0
       && NK0EW-02-CLM-QTY[NK0EW-INX] == 0)
        NK0EW-NIBLINBR = VMIITM01.NIBLINBR;
      end
      if (VMIITM01.NIBLINBR == NK0EW-NIBLINBR)
        NK0EW-IVC-BAL = NK0EW-IVC-BAL + VMIITM01.NIBLIAMT;
      else
        if (NLXREC.NLXCSCRN == "NK0EM100")
          if (NK0EW-02-CLM-QTY[NK0EW-INX] == 0 /* charge on ivc more than 1*/
           && NK0EW-02-NIBLINBR[NK0EW-INX] == 0)
            NK0EW-02-NIBLINBR[NK0EW-INX] = VMIITM01.NIBLINBR;
            NK0EW-ERR-FLAG = "Y";
            converseLib.validationFailed(377);
            set NK0EM100.NK0EM-ZCHCD[NK0EW-INX] bold, cursor, modified;
            set NK0EM100.NK0EM-IVC[NK0EW-INX] bold, modified;
          end
        end
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* if a good return,*/
        /* next sentence*/
      else
        TA1REC.TA1DBASE = "DNILO";
        TA1REC.TA1TBLVU = "VMIITM01";
        NK0EW-LRG-NBR = VMIITM01.NIDIVCID;
        NK0EW-CHR-IND = VMIITM01.ZCHCD;
        move NK0EW-KEY to TA1TBLKE withV60Compat;
        XPNL005(); /* abort routine*/
      end
    end
  end

  call "IO4450" ("C1", SQLCA, VMIITM01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VMIITM01";
    NK0EW-LRG-NBR = VMIITM01.NIDIVCID;
    NK0EW-CHR-IND = VMIITM01.ZCHCD;
    move NK0EW-KEY to TA1TBLKE withV60Compat;
    XPNL005(); /* abort routine*/
  end
end // end NK0ES-SEL-VMIITM01

// Select Claim quantities
Function NK0ES-SEL-VNCADJ01()
  /* ************************************************************************/
  /* Select claim adjustment amounts*/
  /* ************************************************************************/

  NLXREC.NLXCPROC = "NK0ES-SEL-VNCADJ01";

   /* open cursor on - VNCadj01*/

  call "IO6490" ("S2", SQLCA, VNCADJ01) {isNoRefresh = yes, isExternal = yes}; /* open cursor 2 on NCADJ*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCADJ01";
    NK0EW-LRG-NBR = VNCADJ01.NL-CLM-ID;
    NK0EW-CHR-IND = VNCADJ01.ZCHCD;
    move NK0EW-KEY to TA1TBLKE withV60Compat;
    XPNL005(); /* abort routine*/
  end

  NK0EW-MULTI-CLM-ITM = "N";
  while (SQLCA.VAGen_SQLCODE == 0)
    call "IO6490" ("N2", SQLCA, VNCADJ01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
      VNCHDR01.NL-CLM-ID = VNCADJ01.NL-CLM-ID;
      NK0ES-S-VNCHDR01-A();
      if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
        if (VNCHDR01.ZCS-CLM-STAT-CD != "VD"
         && VNCADJ01.NIBLINBR == NK0EW-NIBLINBR)
          NK0EW-IVC-BAL = NK0EW-IVC-BAL - VNCADJ01.NIGUSAMT;
          if (VNCADJ01.NL-CLM-ID != NKWREC.NL-CLM-ID)
            NK0EW-MULTI-CLM-ITM = "Y";
          end
        end
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* if a good return,*/
        /* next sentence*/
      else
        TA1REC.TA1DBASE = "DNILO";
        TA1REC.TA1TBLVU = "VNCADJ01";
        NK0EW-LRG-NBR = VNCADJ01.NL-CLM-ID;
        NK0EW-CHR-IND = VNCADJ01.ZCHCD;
        move NK0EW-KEY to TA1TBLKE withV60Compat;
        XPNL005(); /* abort routine*/
      end
    end
  end

  call "IO6490" ("C2", SQLCA, VNCADJ01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCADJ01";
    NK0EW-LRG-NBR = VNCADJ01.NL-CLM-ID;
    NK0EW-CHR-IND = VNCADJ01.ZCHCD;
    move NK0EW-KEY to TA1TBLKE withV60Compat;
    XPNL005(); /* abort routine*/
  end
end // end NK0ES-SEL-VNCADJ01

// Select profitablility table
Function NK0ES-SEL-VPFHDR01()
  /* ************************************************************************/
  /* Select from the profitability table*/
  /* ************************************************************************/

  NLXREC.NLXCPROC = "NK0ES-SEL-VPFHDR01";

   /* select first on dprof.vpfhdr01*/

  VINTGL02.XAUCD = " ";
  VINTGL02.KUCCOID = VNCHDR01.OP1CMPNB;
  VINTGL02.KUMSTRID = 0;
  VINTGL02.XNXCD = 0;

   /* select unique vintgl02*/

  call "VINTGL02" ("SF", SQLCA, VINTGL02) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    NK0ES-VGCOA001-S();
    NLXREC.GLACCT = GLAREC.GLAGRP;
    NLXREC.GLAGRP = NLXREC.NLXNLGL;
    NKW-SLS-GLAENT = NLXREC.GLAENT; /* save line itm comp gl*/
    NKW-SLS-GLARCID = NLXREC.GLARCID;
    NKW-SLS-GLANTAC = NLXREC.GLANTAC;
    NKW-SLS-GLASUB = NLXREC.GLASUB;
    NKW-SLS-GLAPRJ = NLXREC.GLAPRJ;
  else
    TA1REC.TA1LOCAT[2] = "SF     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "VINTGL02 "; /* io module*/
    TA1REC.TA1DBASE = "DPROFT"; /* database*/
    TA1REC.TA1TBLVU = "VINTGL02"; /* table view*/
    NK0EW-LRG-NBR = VINTGL02.KUCCOID;
    TA1REC.TA1TBLKE = NK0EW-KEY;
    XPNL005(); /* abort routine*/
  end

end // end NK0ES-SEL-VPFHDR01

// Select PIADJ quantities
Function NK0ES-SEL-VPIADJ01()
  /* ************************************************************************/
  /* Select VPIADJ  amounts*/
  /* ************************************************************************/

  NLXREC.NLXCPROC = "NK0ES-SEL-VPIADJ01";

   /* open cursor on - VPIADJ01*/

  call "IO4510" ("S2", SQLCA, VPIADJ01) {isNoRefresh = yes, isExternal = yes}; /* open cursor2 on PIADJ*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VPIADJ01";
    NK0EW-LRG-NBR = VPIADJ01.NIDIVCID;
    NK0EW-CHR-IND = VPIADJ01.ZCHCD;
    move NK0EW-KEY to TA1TBLKE withV60Compat;
    XPNL005(); /* abort routine*/
  end

  while (SQLCA.VAGen_SQLCODE == 0)
    call "IO4510" ("N2", SQLCA, VPIADJ01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
      NK0EW-IVC-BAL = NK0EW-IVC-BAL + VPIADJ01.NIGUSAMT;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* if a good return,*/
        /* next sentence*/
      else
        TA1REC.TA1DBASE = "DNILO";
        TA1REC.TA1TBLVU = "VPIADJ01";
        NK0EW-LRG-NBR = VPIADJ01.NIDIVCID;
        NK0EW-CHR-IND = VPIADJ01.ZCHCD;
        move NK0EW-KEY to TA1TBLKE withV60Compat;
        XPNL005(); /* abort routine*/
      end
    end
  end

  call "IO4510" ("C2", SQLCA, VPIADJ01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VPIADJ01";
    NK0EW-LRG-NBR = VPIADJ01.NIDIVCID;
    NK0EW-CHR-IND = VPIADJ01.ZCHCD;
    move NK0EW-KEY to TA1TBLKE withV60Compat;
    XPNL005(); /* abort routine*/
  end
end // end NK0ES-SEL-VPIADJ01

// select first for nikrec
Function NK0ES-SF-VZCHGL01()
  NLXREC.NLXCPROC = "NI0ES-SF-VZCHGL01"; /* set current proc name*/

  VZCHGL01.XAUCD = KUCREC.XAUCD;
  VZCHGL01.ZARCD = VDSTRB01.ZARCD;
  VZCHGL01.KUCCOID = VDSTRB01.KUCCOID;
  VZCHGL01.YMTCD = " ";
  call "IO4540" ("SF", SQLCA, VZCHGL01) {isNoRefresh = yes, isExternal = yes}; /* select first row*/

  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "SF     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4540 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VZCHGL01"; /* table view*/
    XPNL005(); /* abend routine*/
  end

end // end NK0ES-SF-VZCHGL01

// Get sum of VNCadj01
Function NK0ES-SM-VNCADJ01()
   /* *****************************************************************/
   /* This will select the sum of all the claim adjustments*/
   /* *****************************************************************/

  NLXREC.NLXCPROC = "NK0ES-SM-VNCADJ01";

  set VNCADJ01 empty;
  set NK0EW05 empty;
  VNCADJ01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  VNCADJ01.NIGNETFL = "N";
  NK0EW-05-IO-TASK = "SM";

  call "IO6490" (NK0EW05, SQLCA, VNCADJ01) {isNoRefresh = yes, isExternal = yes}; /* sum claim NCADJ*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    VNCHDR01.NL-CLM-AMT = VNCHDR01.NL-CLM-AMT + NK0EW-05-IO-NET-AMT;
    if (VNCHDR01.XXX-SUM-ZCR-CD == "MI")
      if (NK0EW-05-IO-NET-AMT > 9999999.99)
        converseLib.validationFailed(366);
        NLXREC.NLXERRF = "Y";
      end
    else
      if (NK0EW-05-IO-NET-AMT > 9999999.99)
        converseLib.validationFailed(366);
        NLXREC.NLXERRF = "Y";
      end
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if a good return,*/
      converseLib.validationFailed(313);
      NLXREC.NLXERRF = "Y";
    else
      TA1REC.TA1DBASE = "DNILO";
      TA1REC.TA1TBLVU = "VNCADJ01";
      NK0EW-LRG-NBR = VNCADJ01.NL-CLM-ID;
      TA1REC.TA1TBLKE = NK0EW01.NK0EW-KEY;
      XPNL005(); /* abort routine*/
    end
  end

end // end NK0ES-SM-VNCADJ01

// Get sum of VNCSTY01
Function NK0ES-SM-VNCSTY01()
   /* *****************************************************************/
   /* This will select the sum of all the claim style items*/
   /* *****************************************************************/

  NLXREC.NLXCPROC = "NK0ES-SM-VNCSTY01";

  set VNCSTY01 empty;
  set NK0EW05 empty;
  NK0EW-05-IO-TASK = "SM";
  VNCSTY01.NL-CLM-ID = NKWREC.NL-CLM-ID;

  call "IO6470" (NK0EW05, SQLCA, VNCSTY01) {isNoRefresh = yes, isExternal = yes}; /* sum claim NCSTY*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    VNCHDR01.NL-CLM-AMT = VNCHDR01.NL-CLM-AMT + NK0EW-05-IO-NET-AMT;
    if (NK0EW-05-IO-NET-AMT > 9999999.99)
      converseLib.validationFailed(366);
      NLXREC.NLXERRF = "Y";
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if a good return,*/
      converseLib.validationFailed(313);
      NLXREC.NLXERRF = "Y";
    else
      TA1REC.TA1DBASE = "DNILO";
      TA1REC.TA1TBLVU = "VNCHDR01";
      NK0EW-LRG-NBR = VNCHDR01.NL-CLM-ID;
      TA1REC.TA1TBLKE = NK0EW01.NK0EW-KEY;
      XPNL005(); /* abort routine*/
    end
  end

end // end NK0ES-SM-VNCSTY01

// Update temp stg from m300
Function NK0ES-STORAGE-UPDT()
  /* ************************************************************************/
  /* This statement group will update the temp storage records from the*/
  /* imput of map300.  It will update the current page first, then it*/
  /* will fetch the last page to be loaded and updated, then it will insert*/
  /* new pages as needed.*/
  /* ************************************************************************/


  NLXREC.NLXCPROC = "NK0ES-STORAGE-UPDT";

  /* ************************************************************************/
  /* if the next page nbr is equal to the hold page nbr, update the temp*/
  /* storage.  If the next page number is equal to the high page number,*/
  /* then it was the last page, set the working storage empty and add 2*/
  /* next page number in order to tell that we have a page to add to temp*/
  /* storage.  All pages refer to map 100 pages.  If the next page number*/
  /* is less than the high page number we must get the last page to update*/
  /* ************************************************************************/

  if (NK0EW-NEXT-PAGE-NBR == NK0EW-HOLD-PAGE-NBR) /* First page to update*/
    NK0ES-UPDT-TMP-STG();
    if (NK0EW-NEXT-PAGE-NBR == NK0EW-HIGH-PAGE-NBR /* Last page*/
     && NK0EW-02-ZCHCD[6] > " ")                  
      set NK0EW02 empty;
      NK0EW-NEXT-PAGE-NBR = NK0EW-NEXT-PAGE-NBR + 1;
    else
      if (NK0EW-02-ZCHCD[6] > " ")
        move NK0EW-HIGH-PAGE-NBR to NK0EW-NEXT-PAGE-NBR withV60Compat;
        NK0ES-GET-TMP-STG();
      end
    end
    return;
  end

  /* ************************************************************************/
  /* if the next page nbr is equal to the high page nbr, update the last*/
  /* page in temp storage and set the work record empty.*/
  /* ************************************************************************/

  if (NK0EW-NEXT-PAGE-NBR == NK0EW-HIGH-PAGE-NBR)
    NK0ES-UPDT-TMP-STG();
    if (NK0EW-02-ZCHCD[6] > " ")
      set NK0EW02 empty;
      NK0EW-NEXT-PAGE-NBR = NK0EW-NEXT-PAGE-NBR + 1;
    end
    return;
  end

  NK0ES-ADD-TMP-STG(); /* Add new page*/
  if (NK0EW-NEXT-PAGE-NBR == 1
   && NK0EW-HOLD-PAGE-NBR == 0)
    NK0EW-HOLD-PAGE-NBR = 1;
  end
   /* K0EW-HIGH-PAGE-NBR = NK0EW-HIGH-PAGE-NBR + 1;*/
  if (NK0EW-02-ZCHCD[6] > " ")
    set NK0EW02 empty;
    NK0EW-NEXT-PAGE-NBR = NK0EW-NEXT-PAGE-NBR + 1;
  end

end // end NK0ES-STORAGE-UPDT

// Add a VNCDEF01 item
Function NK0ES-U-VNCADJ01()
   /* *****************************************************************/
   /* This will update an item to the VNCADJ01 database*/
   /* *****************************************************************/

  NLXREC.NLXCPROC = "NK0ES-U-VNCADJ01";

  set VNCADJ01 empty;

  VNCADJ01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  VNCADJ01.ZCHCD = NK0EW-02-ZCHCD[NK0EW-INX];
  VNCADJ01.NIDIVCID = NK0EW-02-IVC[NK0EW-INX];
  VNCADJ01.NIBLINBR = NK0EW-02-NIBLINBR[NK0EW-INX];
  VNCADJ01.GLAENT = NK0EW-02-GLAENT[NK0EW-INX];
  VNCADJ01.GLARCID = NK0EW-02-GLARCID[NK0EW-INX];
  VNCADJ01.GLANTAC = NK0EW-02-GLANTAC[NK0EW-INX];
  VNCADJ01.GLASUB = NK0EW-02-GLASUB[NK0EW-INX];
  VNCADJ01.GLAPRJ = NK0EW-02-GLAPRJ[NK0EW-INX];

  call "IO6490" ("S ", SQLCA, VNCADJ01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    if (VNCADJ01.ZZZCHGCT != NK0EW-02-ZZZCHGCT[NK0EW-INX]) /* CLAIM CHANGED*/
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(313);
      return;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* not found, database was updated*/
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(313);
      return;
    else
      TA1REC.TA1DBASE = "DNILO";
      TA1REC.TA1TBLVU = "VNCADJ01";
      NK0EW-LRG-NBR = VNCADJ01.NL-CLM-ID;
      NK0EW-CHR-IND = VNCADJ01.ZCHCD;
      NK0EW-SML-NBR = VNCADJ01.NIDIVCID;
      TA1REC.TA1TBLKE = NK0EW01.NK0EW-KEY;
      XPNL005(); /* abort routine*/
    end
  end

  VNCADJ01.NIGUSAMT = NK0EW-02-MAP-QTY[NK0EW-INX];
  VNCADJ01.NIGNETFL = NK0EW-02-NIGNETFL[NK0EW-INX];

  XX0XS01(); /* get current date and time for*/
                                  /* zz-change-faimly*/
  VNCADJ01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VNCADJ01.ZZZCHGTM = XX0XW01.XX0XWTIM;

  call "IO6490" ("U ", SQLCA, VNCADJ01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
     /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCADJ01";
    NK0EW-LRG-NBR = VNCADJ01.NL-CLM-ID;
    NK0EW-CHR-IND = VNCADJ01.ZCHCD;
    NK0EW-SML-NBR = VNCADJ01.NIDIVCID;
    TA1REC.TA1TBLKE = NK0EW01.NK0EW-KEY;
    XPNL005(); /* abort routine*/
  end
end // end NK0ES-U-VNCADJ01

// Process VNCADJ01 updates
Function NK0ES-UPDATE-ADJ()
   /* *****************************************************************/
   /* This will controll the updating and inserting of adjustment*/
   /* items.  It uses the claim quantity field in NK0EW02 to*/
   /* determine if a claim item needs to be changed or inserted.  If*/
   /* the quantity is equal to zero, then insert.  If the quantity is*/
   /* different than the map quantity, then change.*/
   /* *****************************************************************/

  NLXREC.NLXCPROC = "NK0ES-UPDATE-ADJ";
  NLXUPDTF = "N";
  NK0EW-NEXT-PAGE-NBR = 1;
  converseLib.validationFailed(0);

   /* Process each page in temp storage, nk0ew-high-page-nbr times.*/

  while (NK0EW-NEXT-PAGE-NBR <= NK0EW-HIGH-PAGE-NBR)
    NK0ES-GET-TMP-STG();
    NK0EW-INX = 1;

     /* Process each row in NK0EW02*/

    while (NK0EW-INX <= 6)
      if (NK0EW-02-CLM-QTY[NK0EW-INX] == 0) /* New item to the claim*/
        if (NK0EW-02-MAP-QTY[NK0EW-INX] > 0) /* Claim item amount*/
          NLXUPDTF = "Y";
          NK0ES-A-VNCADJ01(); /* Add an item*/
          if (VNCADJ01.NIDIVCID > 0)
            NK0ES-A-VNCIVX01(); /* Update claim cross x-ref*/
            converseLib.validationFailed(373);
          end
        end
      else /* Item qantity changed*/
        if (NK0EW-02-MAP-QTY[NK0EW-INX] == 0)
          NLXUPDTF = "Y";
          NK0ES-D-VNCADJ01(); /* Delete the item*/
          converseLib.validationFailed(373);
          if (VNCADJ01.NIDIVCID > 0)
            NLXUPDTF = "Y";
            NK0ES-D-VNCIVX01(); /* Update claim cross x-ref*/
          end
        else
          if (NK0EW-02-CLM-QTY[NK0EW-INX] != 
          NK0EW-02-MAP-QTY[NK0EW-INX])
            NLXUPDTF = "Y";
            NK0ES-U-VNCADJ01(); /* Update the item*/
            converseLib.validationFailed(373);
          end
        end
      end
      NK0EW-INX = NK0EW-INX + 1;
    end
   /* ;*/
   /* if there was trouble updating the database, stop processing*/
   /* ;*/
    if (NLXREC.NLXERRF == "Y")
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      return;
    end
    NK0EW-NEXT-PAGE-NBR = NK0EW-NEXT-PAGE-NBR + 1;
  end
  NK0EW-NEXT-PAGE-NBR = NK0EM100.NK0EM-FM-PAGE;
  /* ;*/
  /* Update the header with the new claim balance*/
  /* ;*/
  if (NLXUPDTF == "Y")
    NK0ES-UPDATE-HDR();
  end
  /* ;*/
end // end NK0ES-UPDATE-ADJ

// Update the claim header
Function NK0ES-UPDATE-HDR()
   /* ****************************************************************/
   /* This will update the claim header with the new claim balance.*/
   /* *****************************************************************/

  NLXREC.NLXCPROC = "NK0ES-UPDATE-HDR";

  set VNCSTY01 empty;

  VNCHDR01.NL-CLM-ID = NKWREC.NL-CLM-ID;

   /* select on - VNCHDR01*/

  call "IO6460" ("S ", SQLCA, VNCHDR01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCHDR01";
    NK0EW-LRG-NBR = VNCHDR01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0EW01.NK0EW-KEY;
    XPNL005(); /* abort routine*/
  end

  VNCHDR01.NL-CLM-AMT = 0;
  VNCHDR01.NL-CLM-FCUR-AMT = 0;

  if (VNCHDR01.XXX-SUM-ZCR-CD == "PR")
    NK0ES-SM-VNCSTY01(); /* Get sum of all items*/
  end

  NK0ES-SM-VNCADJ01(); /* Get sum of all adjustments*/

  if (NLXREC.NLXERRF == "Y") /* Claim value is to great*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    return;
  end

  if (NKWREC.OP1CMPNB > 0
   && VNCHDR01.OP1CMPNB == 0)
    VNCHDR01.OP1CMPNB = NKWREC.OP1CMPNB;
  end

  if (VNCHDR01.NL-CLM-AMT == 0)
    VNCHDR01.GLAENT = " ";
    VNCHDR01.GLARCID = " ";
    VNCHDR01.GLANTAC = " ";
    VNCHDR01.GLASUB = " ";
    VNCHDR01.GLAPRJ = " ";
    if (VNCHDR01.XXX-SUM-ZCR-CD == "PR")
      VNCHDR01.OP1CMPNB = 0;
    end
  else
    if (VNCHDR01.GLAENT == " ") /* new claim, update receivable gl*/
      VNCHDR01.GLAENT = NKW-REC-GLAENT;
      VNCHDR01.GLARCID = NKW-REC-GLARCID;
      VNCHDR01.GLANTAC = NKW-REC-GLANTAC;
      VNCHDR01.GLASUB = NKW-REC-GLASUB;
      VNCHDR01.GLAPRJ = NKW-REC-GLAPRJ;
      VNCHDR01.OP1CMPNB = NKWREC.OP1CMPNB;
    end
  end

  /* ************************************************************************/
  /* The following will assign the user id to the accounting user id.  If*/
  /* there is a suspence gl code on the claim, it will move spaces to the*/
  /* id while in process.  If the claim  is not inprocess, it will move*/
  /* space to the accounting id if the user is not from accounting.*/
  /* ************************************************************************/

  if (NK0EW-GL-SUSP-FL == "Y")
    VNCHDR01.XXX-USER-ID4 = "      ";
  else
    if (VNCHDR01.ZCS-CLM-STAT-CD == "IP")
      VNCHDR01.XXX-USER-ID4 = "SYSTEM";
    end
  end

  XX0XS01(); /* get current date and time for*/
                                  /* zz-change-faimly*/
  VNCHDR01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VNCHDR01.ZZZCHGTM = XX0XW01.XX0XWTIM;

  call "IO6460" ("U ", SQLCA, VNCHDR01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    NK0EW-ZZZCHGCT = VNCHDR01.ZZZCHGCT; /* Used to see if claim changed*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if a table changed;*/
      converseLib.validationFailed(313);
      NLXREC.NLXERRF = "Y";
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      return;
    else
      TA1REC.TA1DBASE = "DNILO";
      TA1REC.TA1TBLVU = "VNCHDR01";
      NK0EW-LRG-NBR = VNCHDR01.NL-CLM-ID;
      TA1REC.TA1TBLKE = NK0EW01.NK0EW-KEY;
      XPNL005(); /* abort routine*/
    end
  end


end // end NK0ES-UPDATE-HDR

// Add a VNCDEF01 item
Function NK0ES-UPDT-NK0EW02()
  /* ************************************************************************/
  /* This will move the map updates to the working storage record.*/
  /* ************************************************************************/

  NLXREC.NLXCPROC = "NK0ES-UPDT-NK0EW02";

  NK0EW-INX = 1;

  while (NK0EW-INX <= 6)
    NK0EW-02-IVC[NK0EW-INX] = NK0EM100.NK0EM-IVC[NK0EW-INX];
    NK0EW-02-ZCHCD[NK0EW-INX] = NK0EM100.NK0EM-ZCHCD[NK0EW-INX];
    NK0EW-02-GLAENT[NK0EW-INX] = NK0EM100.GLAENT[NK0EW-INX];
    NK0EW-02-GLARCID[NK0EW-INX] = NK0EM100.GLARCID[NK0EW-INX];
    NK0EW-02-GLANTAC[NK0EW-INX] = NK0EM100.GLANTAC[NK0EW-INX];
    NK0EW-02-GLASUB[NK0EW-INX] = NK0EM100.GLASUB[NK0EW-INX];
    NK0EW-02-GLAPRJ[NK0EW-INX] = NK0EM100.GLAPRJ[NK0EW-INX];
    NK0EW-02-MAP-QTY[NK0EW-INX] = NK0EM100.NK0EM-CLM-AMT[NK0EW-INX];
    NK0EW-INX = NK0EW-INX + 1;
  end

end // end NK0ES-UPDT-NK0EW02

// Update temp storage
Function NK0ES-UPDT-TMP-STG()
   /* ***********************************************************************/
   /* Update temp storage*/
   /* ***********************************************************************/

  NLXREC.NLXCPROC = "NK0ES-UPTD-TMP-STG";
  TA1REC.TA1LOC = "NK0ES-UPTD-TMP-STG";
  TA5REC.TA5TSQIX = NK0EW-NEXT-PAGE-NBR;
  move NK0EW-W02-SIZE to NK0EW-02-LENGTH withV60Compat;

  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/

  TA5REC.TA5FNCCD = "U"; /* Function code*/

  try
    call "TA0050" (NK0EW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/

   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/

  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/

    return; /* Return to previous process*/

  else

   /* ------------------------------------------------------------*/
    /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/

    converseLib.validationFailed(299); /* Indicate system error*/

    XPNL-006(); /* abend routine*/

  end

end // end NK0ES-UPDT-TMP-STG

// fetch row from vgcoa001
Function NK0ES-VGCOA001-F()

  NLXREC.NLXCPROC = "NK0ES-VGCOA001-F"; /* set current proc name*/

  VGCOA001.GA-GLBL-ACCT-ID = VINTGL02.GA-GLBL-ACCT-ID[1];

  if (VGCOA001.GA-FIN-PRD-CLS-CD == "XX")
    if (VINTGL02.XGPCD == "02")
      VGCOA001.GA-FIN-PRD-CLS-CD = "FW";
    else
      if (VINTGL02.XGPCD == "03")
        VGCOA001.GA-FIN-PRD-CLS-CD = "AP";
      else
        VGCOA001.GA-FIN-PRD-CLS-CD = "OT";
      end
    end
  else
      /* continue*/
  end

   /* open a cursor on VGCOA001 using GA-GLBL-ACCT-ID*/

  call "VGCOA001" ("S3", SQLCA, VGCOA001) {isNoRefresh = yes, isExternal = yes};


  if (SQLCA.VAGen_SQLCODE == 0)
    /* CONTINUE*/
  else
    TA1REC.TA1LOCAT[2] = "S3     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "VGCOA001 "; /* io module*/
    TA1REC.TA1DBASE = "DGENLD"; /* database*/
    TA1REC.TA1TBLVU = "VGCOA001"; /* table view*/
    XPNL005(); /* abend routine*/
  end

   /* FETCH THE FIRST ROW FROM VGCOA001*/

  call "VGCOA001" ("N3", SQLCA, VGCOA001) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* CONTINUE*/
  else
    TA1REC.TA1LOCAT[2] = "N3     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "VGCOA001 "; /* io module*/
    TA1REC.TA1DBASE = "DGENLD"; /* database*/
    TA1REC.TA1TBLVU = "VGCOA001"; /* table view*/
    XPNL005(); /* abend routine*/
  end

   /* *//* move the old style gl-gen-led-acct to glarec*/

  GLAREC.GLAENT = VGCOA001.GL-ENTITY-ID;
  GLAREC.GLARCID = VGCOA001.GL-RSP-CTR-ID;
  GLAREC.GLANTAC = VGCOA001.GL-NATRL-ACCT-ID;
  GLAREC.GLASUB = VGCOA001.GL-SUB-ACCT-ID;
  GLAREC.GLAPRJ = VGCOA001.GL-PROJ-ID;

   /* close the vgcoa001 cursor*/

  call "VGCOA001" ("C3", SQLCA, VGCOA001) {isNoRefresh = yes, isExternal = yes};

  if (SQLCA.VAGen_SQLCODE == 0)
    /* CONTINUE*/
  else
    TA1REC.TA1LOCAT[2] = "C3     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "VGCOA001 "; /* io module*/
    TA1REC.TA1DBASE = "DGENLD"; /* database*/
    TA1REC.TA1TBLVU = "VGCOA001"; /* table view*/
    XPNL005(); /* abend routine*/
  end

end // end NK0ES-VGCOA001-F

// select unique from vgcoa001
Function NK0ES-VGCOA001-S()

  NLXREC.NLXCPROC = "NK0ES-VGCOA001-S"; /* set current proc name*/

  VGCOA001.GA-GLBL-ACCT-ID = VINTGL02.GA-GLBL-ACCT-ID[1];

  if (VGCOA001.GA-FIN-PRD-CLS-CD == "XX")
    if (VINTGL02.XGPCD == "02")
      VGCOA001.GA-FIN-PRD-CLS-CD = "FW";
    else
      if (VINTGL02.XGPCD == "03")
        VGCOA001.GA-FIN-PRD-CLS-CD = "AP";
      else
        VGCOA001.GA-FIN-PRD-CLS-CD = "OT";
      end
    end
  else
     /* continue*/
  end

  call "VGCOA001" ("S1", SQLCA, VGCOA001) {isNoRefresh = yes, isExternal = yes};

  XXXMSG = " ";

  if (SQLCA.VAGen_SQLCODE == 0)
    NK0EW-VGCOA001-STATUS = 0;
    GLAREC.GLAENT = VGCOA001.GL-ENTITY-ID;
    GLAREC.GLARCID = VGCOA001.GL-RSP-CTR-ID;
    GLAREC.GLANTAC = VGCOA001.GL-NATRL-ACCT-ID;
    GLAREC.GLASUB = VGCOA001.GL-SUB-ACCT-ID;
    GLAREC.GLAPRJ = VGCOA001.GL-PROJ-ID;
  else
    if (SQLCA.VAGen_SQLCODE == -811)
      NK0EW-VGCOA001-STATUS = "1";
      NK0EW-GCOA-TEXT2 = "INFORMATIONAL MULTIPLE GL CODES - ";
      NK0EW-GCOA-KEY2 = VINTGL02.GA-GLBL-ACCT-ID[1];
      move NK0EW-GCOA-MESSAGE2 to NK0EW-GCOA-MESSAGE withV60Compat;
      /* MOVE NK0EW-GCOA-MESSAGE TO XXXMSG*/
      /* MOVE 434 TO EZEMNO     /* send message non unique row found*/
      NK0ES-VGCOA001-F();
    else
      if (SQLCA.VAGen_SQLCODE == +100)
        NK0EW-VGCOA001-STATUS = "2";
        NK0EW-GCOA-TEXT = "DPROFT.VINTGL02 - ";
        NK0EW-GCOA-KEY = VINTGL02.GA-GLBL-ACCT-ID[1];
        /* MOVE NK0EW-GCOA-MESSAGE TO XXXMSG;*/
        /* MOVE 433 TO EZEMNO         /* send message row not found*/
        /* MOVE 'Y' TO NLXREC.NLXERRF /* set error flag*/
      else
        TA1REC.TA1LOCAT[2] = "S1     "; /* database action*/
        TA1REC.TA1LOCAT[3] = "VGCOA001 "; /* io module*/
        TA1REC.TA1DBASE = "DGENLD"; /* database*/
        TA1REC.TA1TBLVU = "VGCOA001"; /* table view*/
        XPNL005(); /* abend routine*/
      end
    end
  end

end // end NK0ES-VGCOA001-S

//*** RECORD=NK0EW01 ****
// ********** NK0E APPLICATION WORKING STORAGE RECORD *********
// Maintenance
// 05-06-93    KSHAW Expanded Ivc-array from 6 to 10 occurances
// ***********************
Record NK0EW01 type basicRecord
  5 NK0EW-GROUP char(359) ; // NK0EW01 group item
    10 NK0EW-ZZZCHGCT NK0EW-ZZZCHGCT ; 
    10 NK0EW-NIBLINBR NK0EW-NIBLINBR ; 
    10 NK0EW-INX NK0EW-INX ; 
    10 NK0EW-INX2 NK0EW-INX2 ; 
    10 NK0EW-INX3 NK0EW-INX3 ; 
    10 NK0EW-INX4 NK0EW-INX4 ; 
    10 NK0EW-ARRAY-CNT NK0EW-ARRAY-CNT ; 
    10 NK0EW-HIGH-PAGE-NBR NK0EW-HIGH-PAGE-NBR ; 
    10 NK0EW-NEW-PAGE-NBR NK0EW-NEW-PAGE-NBR ; 
    10 NK0EW-NEXT-PAGE-NBR NK0EW-NEXT-PAGE-NBR ; 
    10 NK0EW-MAP200-TO-PAGE NK0EW-MAP200-TO-PAGE ; 
    10 NK0EW-MAP200-FM-PAGE NK0EW-MAP200-FM-PAGE ; 
    10 NK0EW-HOLD-PAGE-NBR NK0EW-HOLD-PAGE-NBR ; 
    10 NK0EW-INVOICE-FOUND NK0EW-INVOICE-FOUND ; 
    10 NK0EW-GL-SUSP-FL NK0EW-GL-SUSP-FL ; 
    10 NK0EW-MULTI-CLM-ITM NK0EW-MULTI-CLM-ITM ; 
    10 NK0EW-ERR-FLAG NK0EW-ERR-FLAG ; 
    10 NK0EW-IVC-ERR-FL NK0EW-IVC-ERR-FL ; 
    10 NK0EW-SUSPENCE-GL-FL NK0EW-SUSPENCE-GL-FL ; 
    10 NK0EW-KEY NK0EW-KEY ; 
      15 NK0EW-LRG-NBR NK0EW-LRG-NBR ; 
      15 * char(1) ; // Filler
      15 NK0EW-CHR-IND NK0EW-CHR-IND ; 
      15 * char(1) ; // Filler
      15 NK0EW-SML-NBR NK0EW-SML-NBR ; 
    10 NK0EW-W02-SIZE NK0EW-W02-SIZE ; 
    10 NK0EW-ZRTCD NK0EW-ZRTCD ; 
    10 NK0EW-IVC-BAL NK0EW-IVC-BAL ; 
    10 NK0EW-IVC-ARRAY NK0EW-IVC-ARRAY [10] ; 
    10 NK0EW-EDIT-KEY NK0EW-EDIT-KEY ; 
      15 NK0EW-EDIT-ZCHCD NK0EW-EDIT-ZCHCD ; 
      15 NK0EW-EDIT-IVC NK0EW-EDIT-IVC ; 
      15 NK0EW-EDIT-NIBLINBR NK0EW-EDIT-NIBLINBR ; 
      15 NK0EW-EDIT-GLAENT NK0EW-EDIT-GLAENT ; 
      15 NK0EW-EDIT-GLARCID NK0EW-EDIT-GLARCID ; 
      15 NK0EW-EDIT-GLANTAC NK0EW-EDIT-GLANTAC ; 
      15 NK0EW-EDIT-GLASUB NK0EW-EDIT-GLASUB ; 
      15 NK0EW-EDIT-GLAPRJ NK0EW-EDIT-GLAPRJ ; 
    10 NK0EW-RECEIVABLE-GL NK0EW-RECEIVABLE-GL ; 
      15 NK0EW-REC-GLAENT NK0EW-REC-GLAENT ; 
      15 NK0EW-REC-GLARCID NK0EW-REC-GLARCID ; 
      15 NK0EW-REC-GLANTAC NK0EW-REC-GLANTAC ; 
      15 NK0EW-REC-GLASUB NK0EW-REC-GLASUB ; 
      15 NK0EW-REC-GLAPRJ NK0EW-REC-GLAPRJ ; 
    10 NK0EW-MOD-FLAGS NK0EW-MOD-FLAGS ; 
      15 NK0EW-PAGE-MOD-FL NK0EW-PAGE-MOD-FL ; 
      15 NK0EW-MOD-ARRAY NK0EW-MOD-ARRAY [6] ; 
        20 NK0EW-MOD-IVC NK0EW-MOD-IVC ; 
        20 NK0EW-MOD-ZCHCD NK0EW-MOD-ZCHCD ; 
        20 NK0EW-MOD-CLM-AMT NK0EW-MOD-CLM-AMT ; 
        20 NK0EW-SLS-GL-MOD-FL NK0EW-SLS-GL-MOD-FL ; 
    10 NK0EW-MAP-MISC NK0EW-MAP-MISC ; 
      15 NK0EW-MAP-ZCHCD NK0EW-MAP-ZCHCD ; 
      15 NK0EW-MAP-IVC NK0EW-MAP-IVC ; 
      15 NK0EW-MAP-NIBLINBR NK0EW-MAP-NIBLINBR ; 
      15 NK0EW-MAP-GLAENT NK0EW-MAP-GLAENT ; 
      15 NK0EW-MAP-GLARCID NK0EW-MAP-GLARCID ; 
      15 NK0EW-MAP-GLANTAC NK0EW-MAP-GLANTAC ; 
      15 NK0EW-MAP-GLASUB NK0EW-MAP-GLASUB ; 
      15 NK0EW-MAP-GLAPRJ NK0EW-MAP-GLAPRJ ; 
    10 NK0EW-ENTER-CNFM-FL NK0EW-ENTER-CNFM-FL ; 
    10 NK0EW-GCOA-MESSAGE NK0EW-GCOA-MESSAGE ; 
      15 NK0EW-GCOA-TEXT NK0EW-GCOA-TEXT ; 
      15 NK0EW-GCOA-KEY NK0EW-GCOA-KEY ; 
      15 NK0EW-GCOA-FILLER NK0EW-GCOA-FILLER ; 
    10 NK0EW-GCOA-MESSAGE2 NK0EW-GCOA-MESSAGE2 ; 
      15 NK0EW-GCOA-TEXT2 NK0EW-GCOA-TEXT2 ; 
      15 NK0EW-GCOA-KEY2 NK0EW-GCOA-KEY2 ; 
    10 NK0EW-VGCOA001-STATUS NK0EW-VGCOA001-STATUS ; 
end // end NK0EW01

//*** RECORD=NK0EW02 ****
// ************  MAP100 temp storage record  *****************
// ***********************
Record NK0EW02 type basicRecord
  5 NK0EW-02-LENGTH NK0EW-02-LENGTH ; 
  5 NK0EW-02-GROUP NK0EW-02-GROUP ; 
    10 NK0EW-02-CLM-QTY NK0EW-02-CLM-QTY [6] ; 
    10 NK0EW-02-MAP-QTY NK0EW-02-MAP-QTY [6] ; 
    10 NK0EW-02-ZCHCD NK0EW-02-ZCHCD [6] ; 
    10 NK0EW-02-IVC NK0EW-02-IVC [6] ; 
    10 NK0EW-02-NIBLINBR NK0EW-02-NIBLINBR [6] ; 
    10 NK0EW-02-GLAENT NK0EW-02-GLAENT [6] ; 
    10 NK0EW-02-GLARCID NK0EW-02-GLARCID [6] ; 
    10 NK0EW-02-GLANTAC NK0EW-02-GLANTAC [6] ; 
    10 NK0EW-02-GLASUB NK0EW-02-GLASUB [6] ; 
    10 NK0EW-02-GLAPRJ NK0EW-02-GLAPRJ [6] ; 
    10 NK0EW-02-NIGNETFL NK0EW-02-NIGNETFL [6] ; 
    10 NK0EW-02-ZZZCHGCT NK0EW-02-ZZZCHGCT [6] ; 
    10 NK0EW-02-MULTI-CLM-ITM NK0EW-02-MULTI-CLM-ITM [6] ; 
end // end NK0EW02

//*** RECORD=NK0EW03 ****
// ********* Array of new charge types, to check for dups ****
// ***********************
Record NK0EW03 type basicRecord
  5 NK0EW-03-NEW-MISC NK0EW-03-NEW-MISC [204] ; 
    10 NK0EW-03-ZCHCD NK0EW-03-ZCHCD ; 
    10 NK0EW-03-IVC NK0EW-03-IVC ; 
    10 NK0EW-03-NIBLINBR NK0EW-03-NIBLINBR ; 
    10 NK0EW-03-GLAENT NK0EW-03-GLAENT ; 
    10 NK0EW-03-GLARCID NK0EW-03-GLARCID ; 
    10 NK0EW-03-GLANTAC NK0EW-03-GLANTAC ; 
    10 NK0EW-03-GLASUB NK0EW-03-GLASUB ; 
    10 NK0EW-03-GLAPRJ NK0EW-03-GLAPRJ ; 
  5 NK0EW-03-ROW NK0EW-03-ROW [204] ; 
  5 NK0EW-03-PAGE NK0EW-03-PAGE [204] ; 
end // end NK0EW03

//*** RECORD=NK0EW04 ****
// ********* Array of Map200 adjustment items ****************
// ***********************
Record NK0EW04 type basicRecord
  5 NK0EW-04-GROUP NK0EW-04-GROUP [204] ; 
    10 NK0EW-04-NL-CLM-QTY NK0EW-04-NL-CLM-QTY ; 
    10 NK0EW-04-ZCHCD NK0EW-04-ZCHCD ; 
    10 NK0EW-04-NIDIVCID NK0EW-04-NIDIVCID ; 
    10 NK0EW-04-NIBLINBR NK0EW-04-NIBLINBR ; 
    10 NK0EW-04-GLAENT NK0EW-04-GLAENT ; 
    10 NK0EW-04-GLARCID NK0EW-04-GLARCID ; 
    10 NK0EW-04-GLANTAC NK0EW-04-GLANTAC ; 
    10 NK0EW-04-GLASUB NK0EW-04-GLASUB ; 
    10 NK0EW-04-GLAPRJ NK0EW-04-GLAPRJ ; 
end // end NK0EW04

//*** RECORD=NK0EW05 ****
// ********** NK0E APPLICATION WORKING STORAGE RECORD *********
// ***********************
Record NK0EW05 type basicRecord
  10 NK0EW-05-IO-TASK NK0EW-05-IO-TASK ; 
  10 NK0EW-05-IO-NET-AMT NK0EW-05-IO-NET-AMT ; 
  10 NK0EW-05-IO-NET-FCUR NK0EW-05-IO-NET-FCUR ; 
  10 NK0EW-05-IO-IND1 NK0EW-05-IO-IND1 ; 
    15 NK0EW-05-IO-IND2 int ; // Arrary color of new items
end // end NK0EW05

// NK0EW02 Claim quantity
DataItem NK0EW-02-CLM-QTY num(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0EW02 Charge Entity Id
DataItem NK0EW-02-GLAENT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0EW02 Charge Natural Account
DataItem NK0EW-02-GLANTAC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0EW02 Charge Project Id
DataItem NK0EW-02-GLAPRJ char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0EW02 Charge Resp Center Id
DataItem NK0EW-02-GLARCID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0EW02 Charge Sub account
DataItem NK0EW-02-GLASUB char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0EW02 group item
DataItem NK0EW-02-GROUP char(282)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0EW02 Invoice id
DataItem NK0EW-02-IVC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0EW02 Length record
DataItem NK0EW-02-LENGTH num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0EW02 Map Quantity
DataItem NK0EW-02-MAP-QTY num(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0EW02 Flag, itm on multi clm
DataItem NK0EW-02-MULTI-CLM-ITM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0EW02 Adustment line number
DataItem NK0EW-02-NIBLINBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0EW02 Adjustment net bill fl
DataItem NK0EW-02-NIGNETFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0EW02 Zch charge type
DataItem NK0EW-02-ZCHCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0EW02 Claim item last change
DataItem NK0EW-02-ZZZCHGCT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0EW03 Charge Entity Id
DataItem NK0EW-03-GLAENT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0EW03 Charge Natural Account
DataItem NK0EW-03-GLANTAC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0EW03 Charge Project Id
DataItem NK0EW-03-GLAPRJ char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0EW03 Charge Resp Center Id
DataItem NK0EW-03-GLARCID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0EW03 Charge Sub account
DataItem NK0EW-03-GLASUB char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0EW03 Invoice id
DataItem NK0EW-03-IVC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0EW03 New charge type
DataItem NK0EW-03-NEW-MISC char(23)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0EW02 Adustment line number
DataItem NK0EW-03-NIBLINBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0EW03 Page of new item
DataItem NK0EW-03-PAGE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0EW03 Row of new itm on page
DataItem NK0EW-03-ROW num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0EW03 Zch charge type
DataItem NK0EW-03-ZCHCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0EW04 Charge Entity Id
DataItem NK0EW-04-GLAENT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0EW04 Charge Natural Account
DataItem NK0EW-04-GLANTAC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0EW04 Charge Project Id
DataItem NK0EW-04-GLAPRJ char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0EW04 Charge Resp Center Id
DataItem NK0EW-04-GLARCID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0EW04 Charge Sub account
DataItem NK0EW-04-GLASUB char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0EW04 New charge type
DataItem NK0EW-04-GROUP char(32)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0EW04 Adustment line number
DataItem NK0EW-04-NIBLINBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0EW04 Invoice id
DataItem NK0EW-04-NIDIVCID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0EW04 Claim quantity
DataItem NK0EW-04-NL-CLM-QTY num(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0EW04 Zch charge type
DataItem NK0EW-04-ZCHCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Arrary style of new items
DataItem NK0EW-05-IO-IND1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Arrary of new claim items
DataItem NK0EW-05-IO-NET-AMT decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Arrary ivc id of new items
DataItem NK0EW-05-IO-NET-FCUR decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0EW group item
DataItem NK0EW-05-IO-TASK char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0EW01 array size count
DataItem NK0EW-ARRAY-CNT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0EW01 Error key indicator
DataItem NK0EW-CHR-IND char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Dup Adj edit GL entity
DataItem NK0EW-EDIT-GLAENT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Dup Adj edit GL Natural id
DataItem NK0EW-EDIT-GLANTAC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Dup Adj edit GL project id
DataItem NK0EW-EDIT-GLAPRJ char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Dup Adj edit GL responsable id
DataItem NK0EW-EDIT-GLARCID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Dup Adj edit GL sub id
DataItem NK0EW-EDIT-GLASUB char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Dup Adj edit Invoice id
DataItem NK0EW-EDIT-IVC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Dup Adj edit key
DataItem NK0EW-EDIT-KEY char(23)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Dup Adj edit line number
DataItem NK0EW-EDIT-NIBLINBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Dup Adj edit ZCHCD
DataItem NK0EW-EDIT-ZCHCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0EW01 Item error flag
DataItem NK0EW-ENTER-CNFM-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0EW01 Item error flag
DataItem NK0EW-ERR-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Filler
DataItem NK0EW-GCOA-FILLER char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ga-glbl-acct-id key
DataItem NK0EW-GCOA-KEY char(42)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ga-glbl-acct-id key 2
DataItem NK0EW-GCOA-KEY2 char(42)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// key error on vgcoa001 table
DataItem NK0EW-GCOA-MESSAGE char(76)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// key error on vgcoa001 table 2
DataItem NK0EW-GCOA-MESSAGE2 char(76)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table name description
DataItem NK0EW-GCOA-TEXT char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// description
DataItem NK0EW-GCOA-TEXT2 char(34)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Suspence GL code flag
DataItem NK0EW-GL-SUSP-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Highest page # in temp storage
DataItem NK0EW-HIGH-PAGE-NBR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Next page number to converse
DataItem NK0EW-HOLD-PAGE-NBR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0EW01 Invoice found in ivx
DataItem NK0EW-INVOICE-FOUND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0EW01 Screen index
DataItem NK0EW-INX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0EW01 work index
DataItem NK0EW-INX2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0EW01 index for NK0EW04
DataItem NK0EW-INX3 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0EW01 index for NK0EW04
DataItem NK0EW-INX4 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Invoice array used by M200
DataItem NK0EW-IVC-ARRAY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Balance of invoice item
DataItem NK0EW-IVC-BAL num(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0EW01 Item error flag
DataItem NK0EW-IVC-ERR-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0EW01 Error Key
DataItem NK0EW-KEY char(22)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0EW01 Error key Lrg number
DataItem NK0EW-LRG-NBR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Dup Adj edit GL entity
DataItem NK0EW-MAP-GLAENT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Dup Adj edit GL Natural id
DataItem NK0EW-MAP-GLANTAC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Dup Adj edit GL project id
DataItem NK0EW-MAP-GLAPRJ char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Dup Adj edit GL responsable id
DataItem NK0EW-MAP-GLARCID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Dup Adj edit GL sub id
DataItem NK0EW-MAP-GLASUB char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Dup Adj edit Invoice id
DataItem NK0EW-MAP-IVC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Dup Adj edit key
DataItem NK0EW-MAP-MISC char(23)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-ln-itm-seq-nbr
DataItem NK0EW-MAP-NIBLINBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Dup Adj edit ZCHCD
DataItem NK0EW-MAP-ZCHCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Map200 from page number
DataItem NK0EW-MAP200-FM-PAGE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map200 to page number
DataItem NK0EW-MAP200-TO-PAGE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0EW01 Map 200 mod flag array
DataItem NK0EW-MOD-ARRAY char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0EW01 XDM mod flag
DataItem NK0EW-MOD-CLM-AMT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0EW01 Group level for mod fl
DataItem NK0EW-MOD-FLAGS char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0EW01 Style mod flag
DataItem NK0EW-MOD-IVC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0EW01 Color mod flag
DataItem NK0EW-MOD-ZCHCD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0EW01 Multi claim itm flag
DataItem NK0EW-MULTI-CLM-ITM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new page number for map300
DataItem NK0EW-NEW-PAGE-NBR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Next page number to converse
DataItem NK0EW-NEXT-PAGE-NBR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0EW01 current line number
DataItem NK0EW-NIBLINBR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0EW01 Page number mod flag
DataItem NK0EW-PAGE-MOD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Receivable GLAENT
DataItem NK0EW-REC-GLAENT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Receivable GLANTAC
DataItem NK0EW-REC-GLANTAC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Receivable GLAPRJ
DataItem NK0EW-REC-GLAPRJ char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Receivable GLARCID
DataItem NK0EW-REC-GLARCID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Receivable GLASUB
DataItem NK0EW-REC-GLASUB char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Receivable GL code
DataItem NK0EW-RECEIVABLE-GL char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0EW01 Sales GL mod flag
DataItem NK0EW-SLS-GL-MOD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0EW01 Error key small number
DataItem NK0EW-SML-NBR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0EW01 suspence gl code flag
DataItem NK0EW-SUSPENCE-GL-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// vgcoa001 status
DataItem NK0EW-VGCOA001-STATUS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size of work 02 for temp stg
DataItem NK0EW-W02-SIZE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0EW01 Receivalbe code
DataItem NK0EW-ZRTCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Change count of claim header o
DataItem NK0EW-ZZZCHGCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

