package nk0b;

import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom2.XZCREC;
import corpcom2.YSMREC;
import corpcom3.XPNK-001;
import corpcom3.XPNK-002;
import corpcom3.XPNL002;
import corpcom3.XPNL003;
import corpcom3.XPNL004;
import corpcom3.XPNL005;
import corpcom3.XPXGP01;
import corpcom3.XPXLA01;
import corpcom3.XPXX001;
import corpcom3.XPZCR01;
import corpcom4.XSENTRY;
import corpcom4.XSNKS-MAP-MODE;
import corpcom4.XSNKS-SET-XGPCD;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom5.GLAREC;
import corpcom6.SQLCA;
import corpx1.XATCD;
import corpx1.XAUTBL;
import corpx1.XCTTBL;
import corpx1.XDSTBL;
import corpx1.XGPTBL;
import corpx1.XLATBL;
import corpx1.XOCTBL;
import corpx1.XPTTBL;
import corpz3.ZCHTBL;
import corpz3.ZCRTBL;
import corpz3.ZCSTBL;
import corpz3.ZDTTBL;
import corpz3.ZPRTBL;
import corpz3.ZRTTBL;
import ku.common.KUCREC;
import ku.common.KUMREC;
import nk.common.NK1TBL;
import nk.common.NKWREC;
import nl.common.NLXREC;
import ta.common.TA1REC;
import vv.common.VDSTRB01;
import vv.common.VGCOA001;
import vv.common.VINTGL02;
import vv.common.VLADDR01;
import vv.common.VNCADJ01;
import vv.common.VNCCOM01;
import vv.common.VNCDEF01;
import vv.common.VNCHDR01;
import vv.common.VNCIVX01;
import vv.common.VNCSTY01;
import vv.common.VNLCTL01;
import vv.common.VNLGLA01;
import vv.common.VPIITM01;
import vv.common.VRCVGL01;
//*** PROGRAM=NK0B ****
// Internation Claims Header
// 
//      This is an International claims processing application.
// It will be used to create, maintain and inquiry a claims
// header.  The normal processing flow will be NK0C - Claims
// comments.
// 
// Maintenance
//   Date     User Id  Remarks
// --------   -------  ----------------------------------------
// 08/26/92   JSHANN   Created.
// 02/23/93   JSHANN   Regen for change in XPNK-001
// 03/24/93   DKINGM   Added void logic
// 05/11/93   DKINGM   Added XZCTBL (CORP CALENDAR) for change
//                     to XPNK-002
// 10/04/93   JSHANN   Change address number check for 4.1
// 10/12/93   JJUDKI   Inactivate, not delete (for audit
//                    purposes).
// 11/09/93   JJUDKI   NOV DB CHANGES.
// 12/28/93   JSHANN   Add edit for XX reason code.
// 01/12/94   JSHANN   Recompled to pick up change to xpnk-002
// 03/12/94   kshaw    march db changes
// 02/26/96   BBASHA   Deleted PFHREC from Records and Tables.
//                     Added GLAREC, VGCOA001, VINTGL02 to
//                     Records and Tables.
//                     Changed all PFHREC to VINTGL02.
//                     Changed all VINTGL01 to VINTGL02.
// 02/21/1998 TTHAN1   Y2KFIX - REGEN TO PICK UP NEW XX0XS01.
// *********************
Program NK0B type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "NL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  GLAREC GLAREC; // record
  KUCREC KUCREC; // record
  KUMREC KUMREC; // record
  NK0BW01 NK0BW01; // record
  NKWREC NKWREC; // record
  NLXREC NLXREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  VDSTRB01 VDSTRB01; // record
  VGCOA001 VGCOA001; // record
  VINTGL02 VINTGL02; // record
  VLADDR01 VLADDR01; // record
  VNCADJ01 VNCADJ01; // record
  VNCCOM01 VNCCOM01; // record
  VNCDEF01 VNCDEF01; // record
  VNCHDR01 VNCHDR01; // record
  VNCIVX01 VNCIVX01; // record
  VNCSTY01 VNCSTY01; // record
  VNLCTL01 VNLCTL01; // record
  VNLGLA01 VNLGLA01; // record
  VPIITM01 VPIITM01; // record
  VRCVGL01 VRCVGL01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  XZCREC XZCREC; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XAUTBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use XOCTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XLATBL {deleteAfterUse = yes}; // table
  use XPTTBL {deleteAfterUse = yes}; // table
  use XDSTBL {deleteAfterUse = yes}; // table
  use NK1TBL {deleteAfterUse = yes}; // table
  use ZCHTBL {deleteAfterUse = yes}; // table
  use ZRTTBL {deleteAfterUse = yes}; // table
  use ZCRTBL {deleteAfterUse = yes}; // table
  use ZCSTBL {deleteAfterUse = yes}; // table
  use ZDTTBL {deleteAfterUse = yes}; // table
  use ZPRTBL {deleteAfterUse = yes}; // table
  use NK0BM.NK0BM100,  // forms
      NK0BM.XPNLM100
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    NK0B-000: NK0B-000();
    ;
    ;
    exit program;
    ;
    ;
    ;
  end // end main
end // end NK0B

// application main logic
Function NK0B-000()
   /* -----------------------------------------------------------*/
      /* This is the "main logic" for the application.*/
  ;
      /* xsentry checks to ensure that this application was*/
            /* entered from another csp application.*/
  ;
   /* -----------------------------------------------------------*/
  ;
  NLXREC.NLXCPROC = "NK0B-000";
  COMMAREA.CACURRAP = "NK0B";
  ;
  NK0B-001(); /* Initilize the application*/
  ;
  NLXREC.NLXEOAF = "N"; /* set end-of-application flag to 'no'*/
  NK0BW-GCOA-FLAG = "N"; /* initialize the gcoa flag*/
  ;
  while (NLXREC.NLXEOAF == "N") /* while not end-of-aplication*/
    NK0B-050(); /* screen branch control*/
  end
  ;
  XSPF4();
  ;
end // end NK0B-000

// Initialize application
Function NK0B-001()
   /* -----------------------------------------------------------*/
         /* Initialize the application working storage*/
  ;
   /* -----------------------------------------------------------*/
  ;
  NLXREC.NLXCPROC = "NK0B-001";
  ;
  converseVar.commitOnConverse = 1; /* Force db2 to commit on each screen*/
                                  /* converse*/
  VGVar.handleHardIOErrors = 1; /* Return control to program if hard db2*/
                                  /* error*/
  ;
  XSENTRY(); /* Check entry thru main menu*/
  XSSEGTR(); /* Set segmented transaction id*/
  ;
  set SQLCA empty; /* Clear out the SQL return record*/
  ;
  set ERRSQLCA empty; /* Clear out the "common" error record*/
  ;
  set TA1REC empty; /* Clear out the "common" abend record*/
  ;
  set VRCVGL01 empty; /* Clear out the Receivable G/L rec*/
  ;
  set VNLGLA01 empty; /* Clear out the Control Record*/
  ;
  set NKWREC empty; /* Clear out the "common" working*/
                                  /* storage*/
  set NK0BW01 empty; /* Clear application working storage*/
  ;
  set VNCADJ01 empty; /* Clear adjustments*/
  ;
  set VNCCOM01 empty; /* Clear comments*/
  ;
  set VNCHDR01 empty; /* Clear claim header*/
  ;
  set VNCDEF01 empty; /* Clear defective itmes*/
  ;
  set VNCSTY01 empty; /* Clear style items*/
  ;
  set KUCREC empty; /* Clear company header*/
  ;
  set KUMREC empty; /* Clear company store record*/
  ;
  NK0BW-PF9-CNFM-FLAG = "N";
  if (COMMAREA.CAFRMSYS != "NK")
    COMMAREA.CAUSERA = " ";
  end
  ;
  NLXREC.NLXEOAF = "N"; /* set end-of-application flag 'no'*/
  NLXREC.NLXERRF = "N"; /* set error-flag to 'no'*/
  ;
   /* ------------------------------------------------------*/
    /* Set up working-storage array of screen names*/
   /* ------------------------------------------------------*/
  ;
  NLXREC.NLXCSCRN = "NK0BM100"; /* first header*/
  ;
  NLXREC.NLXSNAME[1] = "NK0BM100";
  ;
   /* **********************************************/
   /* Was this application entered via 'fastpath'?*/
   /* Yes if the item is non-blank.*/
   /* **********************************************/
  ;
  if (COMMAREA.CAITEM != " ") /* 'Item' will be non-blank if fastpath*/
    XPNL004(); /* Validate caitem numeric*/
    if (NLXREC.NLXERRF == "Y") /* If error in 'item'*/
      NKWREC.NKW-MSG-NBR = 289; /* Not a valid claim item*/
      COMMAREA.CATOAP = "NK0A";
      COMMAREA.CAUSERA = NKWREC.NKW-GROUP;
      XPNL002();
    else
      NKWREC.NL-CLM-ID = NLXREC.NLXNUM8A;
      XPNK-001(); /* Load passed fields*/
    end
    COMMAREA.CATOAP = " "; /* Clear commarea*/
    COMMAREA.CAITEM = " ";
  else
    if (COMMAREA.CAUSERA != " ") /* Normal function key transfer*/
      NKWREC.NKW-GROUP = COMMAREA.CAUSERA;
      if (COMMAREA.CAFROMAP == "NK0F")
        NKWREC.XGPCD = "  ";
      end
      XPNK-001();
    else
      NKWREC.NKW-MSG-NBR = 289; /* Clear work area for key*/
      COMMAREA.CATOAP = "NK0A";
      COMMAREA.CAUSERA = NKWREC.NKW-GROUP;
      XPNL002();
    end
  end
  ;
  /* ************************************************************************/
  /* Save path from application id.  It will be used to control how the*/
  /* to exit from the claim program.*/
  /* ************************************************************************/
  ;
  if (COMMAREA.CAFROMAP == "NK0A"
   || COMMAREA.CAFROMAP == "NK0G"
   || COMMAREA.CAFROMAP == "NK0F")
    NKW-FROM-APP = COMMAREA.CAFROMAP;
  end
  ;
  NK0BS-SEL-VDSTRB01();
end // end NK0B-001

// Screen branch control
Function NK0B-050()
   /* -----------------------------------------------------------*/
      /* Control process the application screen(s)*/
  ;
     /* Note that this process is being performed in a*/
     /* "while loop" until the end-of-application flag is set*/
     /* to 'y'.*/
  ;
   /* -----------------------------------------------------------*/
  ;
  NLXREC.NLXCPROC = "NK0B-050"; /* set current process name*/
  ;
  sysVar.arrayIndex = 0;
  NLXREC.NLXSCRNX = 0;
  ;
  if (NLXREC.NLXCSCRN in NLXREC.NLXSNAME)
     /* if current-screen-name is in the screen-array, then set*/
     /* the screen-index*/
    NLXREC.NLXSCRNX = sysVar.arrayIndex;
  end
  XSNKS-MAP-MODE(); /* Get map mode flag*/
  NLXREC.NLXEOSF = "N"; /* Set end-of-screen flag to 'no'*/
  NLXREC.NLXBLDSC = "Y"; /* Set build screen flag to 'yes'*/
  NLXREC.NLXERRF = "N"; /* Clear error flag*/
  ;
  if (NLXREC.NLXSCRNX == 1) /* If screen NK0_M100*/
    while (NLXREC.NLXEOSF == "N") /* While not end-of-screen*/
      NK0B-100();
    end
  end
  ;
  ;
   /* at this point;*/
       /* if the end-of-application flag (nlxeoaf ) = 'n'*/
         /* the perform will return to the top of NK0B050...*/
       /* else*/
         /* the perform will auto return to NK0B000.*/
  ;
  ;
end // end NK0B-050

// header screen 1
Function NK0B-100()
   /* -----------------------------------------------------------*/
       /* Process screen NK0BM100*/
  ;
     /* note - this process is being performed in a*/
        /* "while loop" from NK0B050 until the end-of-screen*/
        /* flag (nlxeosfl) is set to 'y'.*/
  ;
   /* -----------------------------------------------------------*/
  ;
  NLXREC.NLXCPROC = "NK0B-100";
  ;
  if (NLXREC.NLXBLDSC == "Y")
    NK0B-101();
    NLXREC.NLXBLDSC = "N";
  end
  ;
  /* ************************************************************************/
  /* reset map mode, since NI0B-120 must reset all of the map for edits*/
  /* ************************************************************************/
  ;
  if (NKW-MAP-MODE == "I")
    NK0BS-SET-INQ-MODE();
  end
  ;
  converse NK0BM100 ;
  ;
  NK0BM100.VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";
  ;
  ;
  NK0B-110(); /* check attention identifier*/
  ;
  if (NLXREC.NLXERRF == "N") /* check for error*/
    NK0B-120(); /* process entered option*/
  end
  ;
  if (NLXREC.NLXERRF == "N") /* check for error*/
    NK0B-130(); /* determine next action...*/
  end
  ;
  ;
end // end NK0B-100

// Build screen
Function NK0B-101()
   /* **************************************/
   /* Build MAP NK0BM100                 **/
   /* **************************************/
  ;
  ;
  NLXREC.NLXCPROC = "NK0B101";
  ;
  converseLib.clearScreen();
  set NK0BM100 initial;
  ;
  if (NKW-EZEMNO == 9999)
    converseLib.validationFailed();
  else
    converseLib.validationFailed(NKW-EZEMNO);
  end
  NKW-EZEMNO = 0;
  NK0BM100.XXXRVNBR = "00"; /* revision nbr*/
  NK0BM100.XXXMAPNM = "NK0BM100"; /* map name*/
  NK0BM100.XXXPRCNM = "NK0B-100"; /* process name*/
  NK0BM100.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  ;
   /* Build balance of map.................*/
  ;
  NK0BS-SEL-VSTORE01(); /* GET STORE*/
  NK0BM100.KUCCOID = NKWREC.KUCCOID;
  NK0BM100.KUMSTRID = NKWREC.KUMSTRID;
  NK0BM100.KUCCONM = NKWREC.KUCCONM;
  NK0BM100.XXX-SUM-ZCR-CD = NKWREC.XXX-SUM-ZCR-CD;
  NK0BM100.XXX-SUM-ZCR-DESC = NKWREC.XXX-SUM-ZCR-DESC;
  NK0BM100.XCTDESC = NKWREC.XCTDESC;
  ;
  /* ************************************************************************/
  /* If the claim id is equal to zero, then new claim and must default*/
  /* from the customer.  Otherwise, use claim to build screen.*/
  /* ************************************************************************/
  ;
  if (VNCHDR01.NL-CLM-ID > 0)
    NK0BS-MAP-FM-CLAIM();
  else
    NK0BS-MAP-DEFAULTS();
  end
  ;
  if (NKW-FROM-APP == "NK0G")
    set NK0G-HIDE-1 skip, invisible;
    set NK0G-HIDE-2 skip, invisible;
  else
    set NK0G-HIDE-1 initialAttributes;
    set NK0G-HIDE-2 initialAttributes;
  end
end // end NK0B-101

// Validate PF keys; act on some
Function NK0B-110()
   /* -----------------------------------------------------------*/
     /* Validate PF keys*/
  ;
     /* Active PF keys: 1, 3, 4, 5, 6, 12, 13, 17, 19, 20, and 21*/
   /* -----------------------------------------------------------*/
  ;
  NLXREC.NLXCPROC = "NK0B-110";
  ;
  set NK0BM100.CATOAP initialAttributes;
  set NK0BM100.CAITEM initialAttributes;
  ;
  /* ************************************************************************/
  /* If from invoicing, the only valid options are enter and PF3*/
  /* ************************************************************************/
  ;
  if (NKW-FROM-APP == "NK0G")
    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf3
     || converseVar.eventKey is pf12
     || converseVar.eventKey is pf13)
      return; /* this will force the update to the clm*/
    else
      if (converseVar.eventKey is pf6 /* allow draft print after updates*/
       && CAFROMAP != "NK0G")        
        return;
      else
        NLXREC.NLXERRF = "Y";
        converseLib.validationFailed(343); /* exit*/
        return;
      end
    end
  end
  ;
   /* ***********************************/
      /* check for fastpath option/item*/
   /* ***********************************/
  ;
  if (NK0BM100.CATOAP != " " /* if fastpath option entered,*/
   || NK0BM100.NL-CLM-ID is modified)
    if (converseVar.eventKey is enter)
      if (NK0BM100.NL-CLM-ID is modified)
        NKWREC.NL-CLM-ID = NK0BM100.NL-CLM-ID;
        COMMAREA.CATOAP = "NK0B";
        COMMAREA.CAUSERA = NKWREC.NKW-GROUP;
        XPNL002(); /* exit application*/
        set NK0BM100.NL-CLM-ID cursor, bold; /* exit failed*/
        return;
      else
        COMMAREA.CATOAP = NK0BM100.CATOAP;
        COMMAREA.CAITEM = NK0BM100.CAITEM;
        COMMAREA.CAUSERA = " ";
        XPNL002(); /* exit application*/
        set NK0BM100.CAITEM cursor, bold; /* exit failed*/
        return;
      end
    end
  end
  ;
  if (converseVar.eventKey not pf19)
    NK0BW-PF19-FLAG = "N";
  end
  ;
  if (NKWREC.ZCS-CLM-STAT-CD == "VD")
    if (converseVar.eventKey is enter /* Valid exit pf keys*/
     || converseVar.eventKey is pf1   
     || converseVar.eventKey is pf3   
     || converseVar.eventKey is pf4   
     || converseVar.eventKey is pf20)
      /* next sentence *********************/
    else
      converseLib.validationFailed(390);
      NLXREC.NLXERRF = "Y";
      return;
    end
  end
  ;
  if (converseVar.eventKey not pf9)
    NK0BW-PF9-CNFM-FLAG = "N";
  end
  ;
  if (converseVar.eventKey is pf1) /* skip edit/updt, go to 'help'*/
    XSPF1(); /* exit*/
  end
  ;
  ;
  if (converseVar.eventKey is pf3)
    if (NKW-FROM-APP > " ")
      COMMAREA.CATOAP = NKW-FROM-APP;
      COMMAREA.CAUSERA = NKW-GROUP;
      XPNL002(); /* exit*/
    else
      COMMAREA.CATOAP = "NK0A";
      COMMAREA.CAUSERA = NKWREC.NKW-GROUP;
      XPNL002(); /* exit*/
    end
  end
  ;
  ;
  if (converseVar.eventKey is pf4) /* go to master menu*/
    COMMAREA.CAUSERA = " "; /* exit*/
    XSPF4();
  end
  ;
  if (converseVar.eventKey is pf20)
    COMMAREA.CATOAP = "NL0A"; /* NIL menu*/
    COMMAREA.CAUSERA = NKWREC.NKW-GROUP;
    XPNL002(); /* exit*/
  end
  ;
  if (converseVar.eventKey is pf9) /* void claim after conformation*/
    if (NKWREC.ZCS-CLM-STAT-CD == "AC"
     || NKWREC.ZCS-CLM-STAT-CD == "RP")
      /* next sentence *********************/
    else
      converseLib.validationFailed(391);
      NLXREC.NLXERRF = "Y";
      NK0BW-PF9-CNFM-FLAG = "N";
      return;
    end
  end
  ;
  if (converseVar.eventKey is pf9) /* void claim after conformation*/
    if (NK0BW-PF9-CNFM-FLAG == "Y") /* PF9 press twice in a row, void*/
      NK0BS-VOID-CLAIM();
      converseLib.validationFailed(389);
      return;
    else
      if (COMMAREA.CACLVL[3] == "Y"
       || COMMAREA.CACLVL[4] == "Y")
        XX0XS01();
        if (NK0BW-FULL-POST-DATE > 0
         && NK0BW-POST-YEAR == XX0XW01.XX0XWYY
         && NK0BW-POST-MONTH == XX0XW01.XX0XWMM)
          NK0BW-PF9-CNFM-FLAG = "Y";
          converseLib.validationFailed(388);
          NLXREC.NLXERRF = "Y";
          return;
        else
          converseLib.validationFailed(392);
          NLXREC.NLXERRF = "Y";
          return;
        end
      else
        converseLib.validationFailed(65);
        NLXREC.NLXERRF = "Y";
        return;
      end
    end
  end
  ;
  /* ************************************************************************/
  /* if the claim is in an active or reprint status the only valid pf key*/
  /* actions is enter and pf21 at this point;*/
  /* ************************************************************************/
  ;
  if (NKWREC.ZCS-CLM-STAT-CD == "AC"
   || NKWREC.ZCS-CLM-STAT-CD == "RP")
    if (converseVar.eventKey is enter)
      return;
    else
      if (converseVar.eventKey not pf21)
        converseLib.validationFailed(362);
        NLXREC.NLXERRF = "Y";
        return;
      end
    end
  end
  NK0BS-SET-MOD-FLAG(); /* set field modified flags*/
  ;
  if (converseVar.eventKey is enter /* Valid non-exit pf keys*/
   || converseVar.eventKey is pf5   
   || converseVar.eventKey is pf6   
   || converseVar.eventKey is pf9   
   || converseVar.eventKey is pf12  
   || converseVar.eventKey is pf13  
   || converseVar.eventKey is pf17  
   || converseVar.eventKey is pf21)
    return;
  end
  ;
  if (converseVar.eventKey is pf19) /* Inactivate claim after confirm*/
    if (NK0BW-PF19-FLAG == "Y") /* PF19 press twice in a row*/
      /* NK0BS-DELETE-CLAIM;/*Task#800 10/12/93 no longer used*/
      NK0BS-SEL-VNCHDR01();
      VNCHDR01.ZCS-CLM-STAT-CD = "IN"; /* Inactivate*/
      VNCHDR01.XXX-USER-ID4 = CAUSERID;
      NK0BS-SET-VNCHDR01();
      COMMAREA.CATOAP = "NK0A"; /* NIL menu*/
      NKW-EZEMNO = 297; /* Claim was deleted*/
      NKW-MSG-NBR = 297;
      COMMAREA.CAUSERA = NKWREC.NKW-GROUP;
      XPNL002(); /* exit*/
      return;
    else
      NK0BS-SEL-VNCHDR01();
      if (VNCHDR01.ZCS-CLM-STAT-CD == "IN")
        converseLib.validationFailed(416); /* claim is already inactive*/
        NLXERRF = "Y";
        return;
      end
      NK0BW-PF19-FLAG = "Y";
      converseLib.validationFailed(99);
      NLXREC.NLXERRF = "Y";
      return;
    end
  end
  ;
      /* pf key not valid*/
  ;
  converseLib.validationFailed(2); /* pf key not valid*/
  NLXREC.NLXERRF = "Y"; /* mark with error*/
  ;
  ;
end // end NK0B-110

// Edit/Act on function keys
Function NK0B-120()
   /* ************************************/
   /* Edit Claims Screen Entries*/
   /* ************************************/
  ;
  NLXREC.NLXCPROC = "NK0B-120";
  ;
  if (NKWREC.ZCS-CLM-STAT-CD == "AC"
   || NKWREC.ZCS-CLM-STAT-CD == "VD"
   || NKWREC.ZCS-CLM-STAT-CD == "RP")
    if (NK0BM-DIS-NIAGLPMO is modified)
      NK0BS-EDIT-POSTMO(); /* Edit date*/
    end
    return;
  end
   /* *****************************************************/
   /* Set all mod flags and then do pop-ups*/
   /* *****************************************************/
  ;
  NK0BS-SET-MOD-FLAG();
  NK0BS-DO-POP-UPS();
  ;
  converseLib.clearScreen();
  
   /* *****************************************************/
   /* Reference text comments must be greater than spaces*/
   /* *****************************************************/
  ;
  if (NK0BM100.NL-CLM-COMNT == " ")
    set NK0BM100.NL-CLM-COMNT cursor, modified, bold;
    NLXREC.NLXERRF = "Y";
    converseLib.validationFailed(290);
  else
    set NK0BM100.NL-CLM-COMNT normal;
  end
  ;
   /* *****************************************************/
   /* Invoice/order  comments must be greater than spaces*/
   /* *****************************************************/
  ;
  if (NK0BM100.IVC-ORD-REF-NUM == " ")
    set NK0BM100.IVC-ORD-REF-NUM cursor, modified, bold;
    NLXREC.NLXERRF = "Y";
    converseLib.validationFailed(396);
  else
    set NK0BM100.IVC-ORD-REF-NUM normal;
  end
  ;
   /* ************************************************************/
   /* Sold-to address is required and must be valid for customer*/
   /* ************************************************************/
  ;
  if (NK0BM-NLAADRID == " ")
    set NK0BM-NLAADRID cursor, modified, bold;
    converseLib.validationFailed(44);
    NLXREC.NLXERRF = "Y";
  else
    move NK0BM-NLAADRID to NK0BW-CHR-NLAADRID withV60Compat;
    if (NK0BW-ADD-MOD-FLAG == "Y")
      NK0BS-NUMERIC-CHK();
    end
  end
   /* ************************************************************/
   /* The GPC code is required for a defective & product claims*/
   /* ************************************************************/
  if (NK0BW-GLPMO-MOD-FLAG == "Y")
    NK0BS-EDIT-POSTMO(); /* Edit date*/
  end
  ;
  ;
   /* ************************************************************/
   /* The GPC code is required for a defective & product claims*/
   /* ************************************************************/
  ;
  if (NKWREC.XXX-SUM-ZCR-CD != "MI")
    if (NK0BW-XGP-MOD-FLAG == "Y")
      if (NK0BM100.XGPCD in XGPTBL.XGPCD
       && NK0BM100.XGPCD != "99"
       && NK0BM100.XGPCD != "00")
        NK0BM100.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
        NKWREC.XGPCD = NK0BM100.XGPCD;
        set NK0BM100.XGPCD normal;
        NK0BW-XGP-MOD-FLAG = "N";
        if (NKWREC.XXX-SUM-ZCR-CD == "DF")
          if (NK0BM100.XGPCD == "02"
           || NK0BM100.XGPCD == "03")
          /* NEXT SENTENCE*/
          else
            set NK0BM100.XGPCD cursor, modified, bold;
            converseLib.validationFailed(360);
            NLXREC.NLXERRF = "Y";
          end
        end
      else
        set NK0BM100.XGPCD cursor, modified, bold;
        converseLib.validationFailed(17);
        NLXREC.NLXERRF = "Y";
      end
    else
      if (NK0BM100.XGPCD == "  ")
        set NK0BM100.XGPCD cursor, modified, bold;
        converseLib.validationFailed(17);
        NLXREC.NLXERRF = "Y";
      end
    end
  else
    if (NK0BW-XGP-MOD-FLAG == "Y")
      if (NK0BM100.XGPCD in XLATBL.XLBCD
       && NK0BM100.XGPCD != "99"
       && NK0BM100.XGPCD != "00")
        if (XLATBL.GLAENT[sysVar.arrayIndex] == 100)
          set NK0BM100.XGPCD cursor, modified, bold;
          converseLib.validationFailed(40);
          NLXREC.NLXERRF = "Y";
        else
          NK0BM100.XGPDESC = XLATBL.XXX-ADDR1[sysVar.arrayIndex];
          NKWREC.XLBCD = NK0BM100.XGPCD;
          set NK0BM100.XGPCD normal;
          NK0BW-XGP-MOD-FLAG = "N";
          if (NK0BM100.GLAENT > " ")
            NK0BM100.GLAENT = XLATBL.GLAENT[sysVar.arrayIndex];
          end
        end
      else
        set NK0BM100.XGPCD cursor, modified, bold;
        converseLib.validationFailed(40);
        NLXREC.NLXERRF = "Y";
      end
    else
      if (NK0BM100.XGPCD == "  ")
        set NK0BM100.XGPCD cursor, modified, bold;
        converseLib.validationFailed(40);
        NLXREC.NLXERRF = "Y";
      end
    end
  end
  ;
   /* ************************************************************/
   /* Edit the GL code if changed.  Must be in VNLGLA01*/
   /* ************************************************************/
  ;
  if (NK0BW-GL-MOD-FLAG == "Y")
    NK0BS-SEL-VNLGLA01();
  else
    if (NK0BM100.ZCS-CLM-STAT-CD != "IP")
      NK0BS-SEL-VNLGLA01();
    end
  end
  ;
   /* ************************************************************/
   /* Edit the comp number, must be on the customer table and*/
   /* a comp gl code must be valid*/
   /* ************************************************************/
  ;
  if (NK0BW-OP1-MOD-FLAG == "Y")
    if (NK0BM100.OP1CMPNB > 0)
      KUCREC.KUCCOID = NK0BM100.OP1CMPNB;
      NK0BS-SEL-VCMPNY01();
      if (SQLCA.VAGen_SQLCODE == 0)
        if (KUCREC.XAUCD in XAUTBL.XAUCD)
          NK0BW01.XATCD = XAUTBL.XATCD[sysVar.arrayIndex];
        end
        if (NK0BW01.XATCD == "06") /* Valid comp number*/
          /* MOVE 'N' TO NK0BW-OP1-MOD-FLAG;*/
          NK0BS-SEL-VPFHDR01(); /* Edit comp's GL code*/
        else
          converseLib.validationFailed(104);
          NLXREC.NLXERRF = "Y";
          set NK0BM100.OP1CMPNB bold, modified, cursor;
        end
      else
        converseLib.validationFailed(104);
        NLXREC.NLXERRF = "Y";
        set NK0BM100.OP1CMPNB bold, modified, cursor;
      end
      KUCREC.KUCCOID = NKWREC.KUCCOID; /* Refresh the customer*/
      NK0BS-SEL-VCMPNY01();
    else
      set NK0BM100.OP1CMPNB initialAttributes;
    end
  end
  ;
   /* ************************************************************/
   /* Edit the claim reason.  It must be a valid claim reason*/
   /* code, as well as, a valid reason for the claim type.*/
   /* ************************************************************/
  ;
  if (NK0BW-ZCR-MOD-FLAG == "Y"
   || NK0BM100.ZCR-CLM-RSN-CD == " ")
    if (NK0BM100.ZCR-CLM-RSN-CD in ZCRTBL.ZCR-CLM-RSN-CD
     && NK0BM100.ZCR-CLM-RSN-CD != "99")
      NK0BM100.ZCR-CLM-RSN-DESC = ZCRTBL.ZCR-CLM-RSN-DESC[sysVar.arrayIndex];
      NKWREC.ZCR-CLM-RSN-DESC = ZCRTBL.ZCR-CLM-RSN-DESC[sysVar.arrayIndex];
      set YSMREC empty;
      YSMREC.YSMTBLPF = "ZCR";
      YSMREC.YSMSYSPF = "NL";
      YSMREC.YSMSUMID = 1;
      YSMREC.YSMSUMCD = NKWREC.XXX-SUM-ZCR-CD;
      YSMSRCVL = NK0BM100.ZCR-CLM-RSN-CD;
      NK0BS-SEL-VSUMCD01();
      if (YSMREC.YSMSUMCD == NKWREC.XXX-SUM-ZCR-CD)
        set NK0BM100.ZCR-CLM-RSN-CD normal;
        NK0BW-ZCR-MOD-FLAG = "N";
      else
        converseLib.validationFailed(291);
        NLXREC.NLXERRF = "Y";
        set NK0BM100.ZCR-CLM-RSN-CD bold, modified, cursor;
      end
      if (NK0BM100.ZCR-CLM-RSN-CD == "XX"
       && CACLVL[4] == "N") /* must be accting to use xx*/
        converseLib.validationFailed(424); /* NOT must be accounting to use xx*/
        NLXREC.NLXERRF = "Y";
        set NK0BM100.ZCR-CLM-RSN-CD bold, modified, cursor;
      end
    else
      converseLib.validationFailed(284);
      NLXREC.NLXERRF = "Y";
      set NK0BM100.ZCR-CLM-RSN-CD bold, modified, cursor;
    end
  end
end // end NK0B-120

// Address Pop-up logic
Function NK0B-121()
   /* ********************************************************************/
   /*  */
   /* This process statement will display the address pop-up window until*/
   /* a valid address is selected or the enter key with no address.*/
   /*  */
   /* ********************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0B-121";
  ;
   /* Load 4 address to the map, if no errors*/
  ;
  if (converseVar.validationMsgNum == 0)
    NK0BW-MAP-INX = 0;
    converseLib.clearScreen();
    set XPNLM100 initial;
    XPNLM100.XXXSCRDT = VGVar.currentShortGregorianDate;
    move NK0BW-LAST-PAGE to XPNLM-TO-PAGE withV60Compat;
    move NK0BW-CUR-PAGE to XPNLM-FM-PAGE withV60Compat;
    while (NK0BW-MAP-INX < 4)
      NK0BS-BLD-ADDR-MAP();
    end
  end
  ;
  converse XPNLM100 ;
  ;
  NK0BS-EDIT-ADDR-UP();
end // end NK0B-121

// Determine next action
Function NK0B-130()
   /* **************************************/
   /* Determine next action from hdr 1*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NK0B-130";
  ;
   /*  */
   /* Enter - update the claim header and transfer to NK0C*/
   /*  */
  ;
  NK0BS-MOVE-NKWREC();
  if (converseVar.eventKey is enter)
    if (NKWREC.NL-CLM-ID == 0)
      NK0BS-INSERT-CLAIM();
    else
      NK0BS-UPDATE-CLAIM();
    end
    NKW-CLM-UPDATE-FL = "Y";
    COMMAREA.CATOAP = "NK0C";
    COMMAREA.CAUSERA = NKWREC.NKW-GROUP;
    XPNL002();
    return;
  end
  if (NKW-FROM-APP == "NK0G"
   && converseVar.eventKey is pf3)
    if (NKW-CLM-UPDATE-FL == "Y")
      COMMAREA.CATOAP = "NK0G";
      XPNL002();
      return;
    else
      converseLib.validationFailed(353);
      return;
    end
  end
  NK0BW-MOD-FLAGS = " ";
  ;
   /*  */
   /* PF12 - re-display the screen*/
   /*  */
  ;
  if (converseVar.eventKey is pf12)
    converseLib.validationFailed(372);
    return;
  end
  ;
   /*  */
   /* PF13 - update the claim header and re-display the screen*/
   /*  */
  ;
  if (converseVar.eventKey is pf13)
    if (NKWREC.NL-CLM-ID == 0)
      NK0BS-INSERT-CLAIM();
    else
      NK0BS-UPDATE-CLAIM();
    end
    NKW-CLM-UPDATE-FL = "Y";
    converseLib.validationFailed(373);
    return;
  end
  ;
   /*  */
   /* If the NKWREC.NL-CLM-Id is zero then there is not claim yet.*/
   /*  */
  ;
  if (NKWREC.NL-CLM-ID == 0)
    converseLib.validationFailed(358);
    NLXREC.NLXERRF = "Y";
  else
    ;
   /*  */
    /* PF5 & pf17 restatus claim and redisplay*/
   /*  */
    ;
    if (converseVar.eventKey is pf5
     || converseVar.eventKey is pf17)
      if (CACLVL[2] == "Y"
       || CACLVL[3] == "Y"
       || CACLVL[4] == "Y")
        XPNK-002(); /* common restatus process*/
        if (converseVar.validationMsgNum == 294)
          NKWREC.ZCS-CLM-STAT-CD = VNCHDR01.ZCS-CLM-STAT-CD;
          NK0BM100.ZCS-CLM-STAT-CD = VNCHDR01.ZCS-CLM-STAT-CD;
          if (VNCHDR01.ZCS-CLM-STAT-CD in ZCSTBL.ZCS-CLM-STAT-CD)
            NK0BM100.ZCS-CLM-STAT-DESC = ZCSTBL.ZCS-CLM-STAT-DESC[sysVar.arrayIndex];
          end
          NKWREC.ZCS-CLM-STAT-DESC = NK0BM100.ZCS-CLM-STAT-DESC;
          NK0BM100.XXXUSID2 = VNCHDR01.XXXUSID2;
          NK0BM100.XXX-USER-ID3 = VNCHDR01.XXX-USER-ID3;
          NK0BM100.XXX-USER-ID4 = VNCHDR01.XXX-USER-ID4;
          XSNKS-MAP-MODE();
        end
      else
        converseLib.validationFailed(280);
      end
    end
    ;
   /*  */
    /* PF6 submit draft to print, can be any status.*/
   /*  */
    ;
    if (converseVar.eventKey is pf6)
      NK0BS-EDIT-CLAIM();
      if (NLXREC.NLXERRF == "N")
        COMMAREA.CAUSERA = NKW-GROUP;
        COMMAREA.CATOAP = "NK0P";
        XPNL002();
        return;
      end
    end
    ;
   /*  */
    /* PF21 restats claim to print in batch.*/
   /*  */
    ;
    if (converseVar.eventKey is pf21)
      if (NK0BM100.ZCS-CLM-STAT-CD == "AC")
        NK0BS-SEL-VNCHDR01();
        VNCHDR01.ZCS-CLM-STAT-CD = "RP";
        NK0BS-SET-VNCHDR01();
        converseLib.validationFailed(294);
        NKWREC.ZCS-CLM-STAT-CD = VNCHDR01.ZCS-CLM-STAT-CD;
        NK0BM100.ZCS-CLM-STAT-CD = VNCHDR01.ZCS-CLM-STAT-CD;
        if (VNCHDR01.ZCS-CLM-STAT-CD in ZCSTBL.ZCS-CLM-STAT-CD)
          NK0BM100.ZCS-CLM-STAT-DESC = ZCSTBL.ZCS-CLM-STAT-DESC[sysVar.arrayIndex];
        end
        NKWREC.ZCS-CLM-STAT-DESC = NK0BM100.ZCS-CLM-STAT-DESC;
        return;
      else
        converseLib.validationFailed(295);
        return;
      end
    end
  end
end // end NK0B-130

// Insert International claim hdr
Function NK0BS-ADD-VNCCOM01()
   /* *****************************************************/
   /* Insert claim reference comment*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0BS-INS-VNCCOM01";
  ;
   /* select unique - VNCcom01*/
  ;
  call "IO6500" ("A ", SQLCA, VNCCOM01) {isNoRefresh = yes, isExternal = yes}; /* insert claim comment*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCCOM01";
    NK0BW-LRG-NBR = VNCCOM01.NL-CLM-ID;
    NK0BW-IND = VNCCOM01.NL-CLM-COMNT-IND;
    NK0BW-SML-NBR = VNCCOM01.NL-CLM-COMNT-NBR;
    TA1REC.TA1TBLKE = NK0BW01.NK0BW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
end // end NK0BS-ADD-VNCCOM01

// Insert International claim hdr
Function NK0BS-ADD-VNCHDR01()
   /* *****************************************************/
   /* Insert claim header*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0BS-INS-VNCHDR01";
  ;
   /* select unique - VNCHDR01*/
  ;
  call "IO6460" ("A ", SQLCA, VNCHDR01) {isNoRefresh = yes, isExternal = yes}; /* insert claim hdr*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCHDR01";
    NK0BW-LRG-NBR = VNCHDR01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0BW01.NK0BW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
end // end NK0BS-ADD-VNCHDR01

// Load address id to WS
Function NK0BS-BLD-ADDR-MAP()
   /* ***********************************************************************/
   /*  */
   /* This select address and load them to the address map.*/
   /*  */
   /* ***********************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0BS-BLD-ADDR-MAP";
  ;
  VLADDR01.NLAADRID = NK0BW-ADDR-ID[NK0BW-ADDR-INX];
  ;
  call "IO4410" ("S ", SQLCA, VLADDR01) {isNoRefresh = yes, isExternal = yes};
  ;
  NK0BW-ADDR-INX = NK0BW-ADDR-INX + 1;
  NK0BW-MAP-INX = NK0BW-MAP-INX + 1;
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return*/
    XPNLM-NLAADRID[NK0BW-MAP-INX] = VLADDR01.NLAADRID;
    XPNLM100.NLAADDR1[NK0BW-MAP-INX] = VLADDR01.XXX-ADDR1;
    XPNLM100.NLAADDR2[NK0BW-MAP-INX] = VLADDR01.XXX-ADDR2;
    XPNLM100.NLAADDR3[NK0BW-MAP-INX] = VLADDR01.XXX-ADDR3;
    XPNLM100.NLAADDR4[NK0BW-MAP-INX] = VLADDR01.XXX-ADDR4;
    XPNLM100.NLAADDR5[NK0BW-MAP-INX] = VLADDR01.XXX-ADDR5;
    XPNLM100.NLAADDR6[NK0BW-MAP-INX] = VLADDR01.XXX-ADDR6;
  else /* if not found*/
    NK0BW-MAP-INX = 5;
  end
  ;
end // end NK0BS-BLD-ADDR-MAP

// Create new Ref comment
Function NK0BS-BLD-IVCORD()
   /* *****************************************************/
   /* Build and insert invoice/order reference number*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0BS-BLD-VNCCOM01";
  VNCCOM01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  VNCCOM01.NL-CLM-COMNT-IND = "O";
  VNCCOM01.NL-CLM-COMNT-NBR = 10;
  VNCCOM01.NL-CLM-COMNT = NK0BM100.IVC-ORD-REF-NUM;
  VNCCOM01.ZZZSDT = XX0XW01.XX0XWDAT;
  VNCCOM01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VNCCOM01.ZZZCHGCT = XX0XW01.XX0XWTIM;
  VNCCOM01.ZZZCHGCT = 0;
  ;
  NK0BS-ADD-VNCCOM01(); /* insert new claim comment*/
  ;
end // end NK0BS-BLD-IVCORD

// Create new Ref comment
Function NK0BS-BLD-VNCCOM01()
   /* *****************************************************/
   /* Build and insert ref comment from NK0G*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0BS-BLD-VNCCOM01";
  VNCCOM01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  VNCCOM01.NL-CLM-COMNT-IND = "R";
  VNCCOM01.NL-CLM-COMNT-NBR = 10;
  VNCCOM01.NL-CLM-COMNT = NK0BM100.NL-CLM-COMNT;
  VNCCOM01.ZZZSDT = XX0XW01.XX0XWDAT;
  VNCCOM01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VNCCOM01.ZZZCHGCT = XX0XW01.XX0XWTIM;
  VNCCOM01.ZZZCHGCT = 0;
  ;
  NK0BS-ADD-VNCCOM01(); /* insert new claim comment*/
  ;
end // end NK0BS-BLD-VNCCOM01

// Load address id to WS
Function NK0BS-CNT-ADDRESS()
   /* ***********************************************************************/
   /*  */
   /* This will open, fetch and close the addresses to load to an arrary*/
   /* to be used in the address pop-up window processing.*/
   /*  */
   /* ***********************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0BS-CNT-ADDRESS";
  ;
  VLADDR01.NLATYPIN = "C";
  VLADDR01.NLABSIND = " ";
  VLADDR01.NLAONECH = " ";
  VLADDR01.NLAINTGR = NKWREC.KUCCOID;
  VLADDR01.NLASINT1 = 0;
  VLADDR01.NLASINT2 = 0;
  VLADDR01.NLAADRID = -1;
  ;
  call "IO4410" ("S1", SQLCA, VLADDR01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0) /* if not a good return*/
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VLADDR01";
    NK0BW-LRG-NBR = NKWREC.KUCCOID;
    TA1REC.TA1TBLKE = NK0BW-KEY;
    XPNL005(); /* abort routine*/
    return;
  end
  ;
   /* fetch and load address id to working storage*/
  ;
  ;
  while (SQLCA.VAGen_SQLCODE == 0)
    call "IO4410" ("N1", SQLCA, VLADDR01) {isNoRefresh = yes, isExternal = yes}; /* get the 1st record*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if a good return (rec was found)*/
      NK0BW-ADDR-INX = NK0BW-ADDR-INX + 1;
      NK0BW-ADDR-CNT = NK0BW-ADDR-CNT + 1;
      NK0BW-ADDR-ID[NK0BW-ADDR-INX] = VLADDR01.NLAADRID;
    else
      if (SQLCA.VAGen_SQLCODE != 100) /* if no records were selected*/
        TA1REC.TA1DBASE = "DNILO";
        TA1REC.TA1TBLVU = "VLADDR01";
        NK0BW-LRG-NBR = NKWREC.KUCCOID;
        TA1REC.TA1TBLKE = NK0BW-KEY;
        XPNL005(); /* abort routine*/
        return;
      end
    end
  end
  ;
   /* close the address cursor*/
  ;
  call "IO4410" ("C1", SQLCA, VLADDR01) {isNoRefresh = yes, isExternal = yes}; /* get the 1st record*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
     /* Next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VLADDR01";
    NK0BW-LRG-NBR = NKWREC.KUCCOID;
    TA1REC.TA1TBLKE = NK0BW-KEY;
    XPNL005(); /* abort routine*/
    return;
  end
  ;
  NK0BW-ADDR-INX = 1;
  NK0BW-CUR-PAGE = 1;
  NK0BW-LAST-PAGE = NK0BW-ADDR-CNT / 4;
end // end NK0BS-CNT-ADDRESS

// Display pop-up windows map100
Function NK0BS-DO-POP-UPS()
   /* *****************************************************/
   /* Process all POP-UP window requests*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0B-DO-POP-UPS";
  ;
   /* ***********************************************************************/
   /* Process all GPC code pop-up request.  If the a misc claim, the remit*/
   /* to will be in the gpc field*/
   /* ***********************************************************************/
  ;
  if (NK0BM100.XGPCD == "?")
    if (NKWREC.XXX-SUM-ZCR-CD == "MI")
      NLXREC.NLXERRF = "Y";
      XPXX001();
      while (XX0XW02.XX0XWEND == "N")
        XPXLA01();
      end
      set NK0BM100.XGPCD cursor;
      if (XX0XW02.XX0XWPIX > 0)
        NK0BM100.XGPCD = XLATBL.XLBCD[XX0XWPIX];
        NK0BM100.XGPDESC = XLATBL.XXX-ADDR1[XX0XWPIX];
        NK0BM100.GLAENT = XLATBL.GLAENT[XX0XWPIX];
      else
        NK0BM100.GLAENT = "  ";
        NK0BM100.XGPCD = "  ";
        NK0BM100.XGPDESC = "  ";
      end
    else
      NLXREC.NLXERRF = "Y";
      XPXX001();
      while (XX0XW02.XX0XWEND == "N")
        XPXGP01();
      end
      set NK0BM100.XGPCD cursor;
      if (XX0XW02.XX0XWPIX > 0)
        NK0BM100.XGPCD = XGPTBL.XGPCD[XX0XWPIX];
        NK0BM100.XGPDESC = XGPTBL.XGPDESC[XX0XWPIX];
      else
        NK0BM100.XGPCD = "  ";
        NK0BM100.XGPDESC = "  ";
      end
    end
  end
  ;
   /* *****************************************************/
   /* Process all Claim reason pop-up request*/
   /* *****************************************************/
  ;
  if (NK0BM100.ZCR-CLM-RSN-CD == "?")
    XPXX001();
    NLXREC.NLXERRF = "Y";
    while (XX0XW02.XX0XWEND == "N")
      XPZCR01();
    end
    set NK0BM100.ZCR-CLM-RSN-CD cursor;
    if (XX0XW02.XX0XWPIX > 0)
      NK0BM100.ZCR-CLM-RSN-CD = ZCRTBL.ZCR-CLM-RSN-CD[XX0XWPIX];
      NK0BM100.ZCR-CLM-RSN-DESC = ZCRTBL.ZCR-CLM-RSN-DESC[XX0XWPIX];
    else
      NK0BM100.ZCR-CLM-RSN-CD = "  ";
      NK0BM100.ZCR-CLM-RSN-DESC = "  ";
    end
  end
  ;
   /* *****************************************************/
   /* Address pop-up requested*/
   /* *****************************************************/
  ;
  if (NK0BM-NLAADRID == "  ?"
   || NK0BM-NLAADRID == " ? "
   || NK0BM-NLAADRID == "?  ")
    NLXREC.NLXERRF = "Y";
    NK0BS-CNT-ADDRESS();
    NK0BW-ADDR-POP-UP-DONE = "N";
    while (NK0BW-ADDR-POP-UP-DONE == "N")
      NK0B-121();
    end
  end
end // end NK0BS-DO-POP-UPS

// Edit addr pop-up window
Function NK0BS-EDIT-ADDR-UP()
   /* ***********************************************************************/
   /*  */
   /* This statement group will edit the address pop-up window.*/
   /*  */
   /* ***********************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0BS-EDIT-ADDR-UP";
  ;
  if (converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is enter)
   /* next sentence*/
  else
    converseLib.validationFailed(2);
    return;
  end
  ;
  if (XPNLM-FM-PAGE is modified)
    if (XPNLM-FM-PAGE > 0
     && XPNLM-FM-PAGE <= NK0BW-LAST-PAGE)
      move XPNLM-FM-PAGE to NK0BW-CUR-PAGE withV60Compat;
      NK0BW-ADDR-INX = XPNLM-FM-PAGE * 4 - 3;
      return;
    else
      set XPNLM-FM-PAGE bold, cursor, modified;
      converseLib.validationFailed(296);
      return;
    end
  end
  ;
  if (converseVar.eventKey is pf7)
    if (XPNLM-FM-PAGE == 1)
      converseLib.validationFailed(29);
      return;
    else
      NK0BW-CUR-PAGE = XPNLM-FM-PAGE - 1;
      XPNLM-FM-PAGE = XPNLM-FM-PAGE - 1;
      NK0BW-ADDR-INX = XPNLM-FM-PAGE * 4 - 3;
    end
  end
  if (converseVar.eventKey is pf8)
    if (XPNLM-FM-PAGE == NK0BW-LAST-PAGE)
      converseLib.validationFailed(30);
      return;
    else
      NK0BW-CUR-PAGE = XPNLM-FM-PAGE + 1;
      XPNLM-FM-PAGE = XPNLM-FM-PAGE + 1;
      NK0BW-ADDR-INX = XPNLM-FM-PAGE * 4 - 3;
    end
  end
  if (converseVar.eventKey is enter)
    if (XPNLM-NLAADRID-PICKED > 0)
      VLADDR01.NLAADRID = XPNLM-NLAADRID-PICKED;
      NK0BS-SEL-VLADDR01();
      if (SQLCA.VAGen_SQLCODE == 0)
        move XPNLM-NLAADRID-PICKED to NK0BW-NUM-NLAADRID withV60Compat;
        move NK0BW-CHR-NLAADRID to NK0BM-NLAADRID withV60Compat;
      else
        converseLib.validationFailed(44);
        set XPNLM-NLAADRID-PICKED bold, cursor, modified;
        return;
      end
    end
    NK0BW-ADDR-POP-UP-DONE = "Y";
  end
  ;
end // end NK0BS-EDIT-ADDR-UP

// Edit claim for print errors
Function NK0BS-EDIT-CLAIM()
   /* ***********************************************************************/
   /*  */
   /* This statement group will edit inprocess claims for errors prior to*/
   /* print submission.  If no errors are found the claim will be set to an*/
   /* pending approval status*/
   /*  */
   /* ***********************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0BS-EDIT-CLAIM";
  set VNCHDR01 empty;
  NK0BS-SEL-VNCHDR01();
  ;
  if (VNCHDR01.NL-CLM-AMT == 0) /* No items on the claim*/
    converseLib.validationFailed(359);
    NLXREC.NLXERRF = "Y";
  else
    if (NKWREC.XXX-SUM-ZCR-CD == "DF") /* Defective claim type*/
      NK0BS-EDIT-DF-CLM();
    end
  end
  ;
  NK0BS-EDIT-COMNT(); /* See if print comments exist*/
  ;
  if (NLXREC.NLXERRF == "Y")
    return;
  end
  ;
  /* ************************************************************************/
  /* Restatus claim to pending approval if the claim is in a IP status*/
  /* ************************************************************************/
  ;
  if (VNCHDR01.ZCS-CLM-STAT-CD == "IP")
    VNCHDR01.ZCS-CLM-STAT-CD = "PA";
    NK0BS-SET-VNCHDR01();
  end
end // end NK0BS-EDIT-CLAIM

// Edit printable comments
Function NK0BS-EDIT-COMNT()
  /* ************************************************************************/
  /* Select address row for claim*/
  /* ************************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0BS-SEL-COMNT";
  ;
  set VNCCOM01 empty;
  VNCCOM01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  VNCCOM01.NL-CLM-COMNT-IND = "P";
  ;
   /* open cursor on VNCCOM01*/
  ;
  call "IO6500" ("S1", SQLCA, VNCCOM01) {isNoRefresh = yes, isExternal = yes}; /* read claim commons*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
     /* NEXT SENTENCE*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCCOM01";
    NK0BW-LRG-NBR = VNCCOM01.NL-CLM-ID;
    NK0BW-IND = VNCCOM01.NL-CLM-COMNT-IND;
    NK0BW-SML-NBR = VNCCOM01.NL-CLM-COMNT-NBR;
    TA1REC.TA1TBLKE = NK0BW01.NK0BW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
   /* select next  VNCCOM01*/
  ;
  call "IO6500" ("N1", SQLCA, VNCCOM01) {isNoRefresh = yes, isExternal = yes}; /* select next comment*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
     /* NEXT SENTENCE*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(365);
      NLXREC.NLXERRF = "Y";
    else
      TA1REC.TA1DBASE = "DNILO";
      TA1REC.TA1TBLVU = "VNCCOM01";
      NK0BW-LRG-NBR = VNCCOM01.NL-CLM-ID;
      NK0BW-IND = VNCCOM01.NL-CLM-COMNT-IND;
      NK0BW-SML-NBR = VNCCOM01.NL-CLM-COMNT-NBR;
      TA1REC.TA1TBLKE = NK0BW01.NK0BW-KEY;
      XPNL005(); /* abort routine*/
    end
  end
  ;
   /* close  VNCCOM01*/
  ;
  call "IO6500" ("C1", SQLCA, VNCCOM01) {isNoRefresh = yes, isExternal = yes}; /* close comment csr*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
     /* NEXT SENTENCE*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCCOM01";
    NK0BW-LRG-NBR = VNCCOM01.NL-CLM-ID;
    NK0BW-IND = VNCCOM01.NL-CLM-COMNT-IND;
    NK0BW-SML-NBR = VNCCOM01.NL-CLM-COMNT-NBR;
    TA1REC.TA1TBLKE = NK0BW01.NK0BW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
end // end NK0BS-EDIT-COMNT

// Edit DF clm for print errors
Function NK0BS-EDIT-DF-CLM()
   /* ***********************************************************************/
   /*  */
   /* This statement group will edit defective claims for zero prices.*/
   /*  */
   /* ***********************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0BS-EDIT-DF-CLM";
  ;
  set VNCDEF01 empty;
  VNCDEF01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  ;
   /* Open cursor for vncdef01*/
  ;
  call "IO6480" ("S1", SQLCA, VNCDEF01) {isNoRefresh = yes, isExternal = yes}; /* open cursor on vncdef01*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCDEF01";
    NK0BW-LRG-NBR = VNCDEF01.NL-CLM-ID;
    NK0BW-IND = " ";
    NK0BW-SML-NBR = 0;
    TA1REC.TA1TBLKE = NK0BW01.NK0BW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
  /* ************************************************************************/
  /* Fetch cursor for vncdef01 and see if a zero price exists.  If zero*/
  /* priced item found, set error flag and send message.*/
  /* ************************************************************************/
  ;
  while (SQLCA.VAGen_SQLCODE == 0)
    ;
    call "IO6480" ("N1", SQLCA, VNCDEF01) {isNoRefresh = yes, isExternal = yes};
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* If a good return,*/
      if (VNCDEF01.NIHNPRC == 0) /* Zero price?*/
        converseLib.validationFailed(357);
        NLXREC.NLXERRF = "Y";
        SQLCA.VAGen_SQLCODE = 100;
      end
    else
      if (SQLCA.VAGen_SQLCODE != 100) /* Bad SQLCODE*/
        TA1REC.TA1DBASE = "DNILO";
        TA1REC.TA1TBLVU = "VNCDEF01";
        NK0BW-LRG-NBR = VNCDEF01.NL-CLM-ID;
        NK0BW-IND = " ";
        NK0BW-SML-NBR = 0;
        TA1REC.TA1TBLKE = NK0BW01.NK0BW-KEY;
        XPNL005(); /* abort routine*/
      end
    end
  end
  ;
  /* ************************************************************************/
  /* Close the cursor for VNCDEF01*/
  /* ************************************************************************/
  ;
  call "IO6480" ("C1", SQLCA, VNCDEF01) {isNoRefresh = yes, isExternal = yes}; /* open cursor on vncdef01*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCDEF01";
    NK0BW-LRG-NBR = VNCDEF01.NL-CLM-ID;
    NK0BW-IND = " ";
    NK0BW-SML-NBR = 0;
    TA1REC.TA1TBLKE = NK0BW01.NK0BW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
end // end NK0BS-EDIT-DF-CLM

// Edit printable comments
Function NK0BS-EDIT-POSTMO()
  /* ************************************************************************/
  /* Manipulate date and check against current date*/
  /* ************************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0BS-EDIT-POSTMO";
  ;
  move NK0BM-DIS-NIAGLPMO to NK0BW-CHAR-POST-DATE withV60Compat;
  if (NK0BW-CHAR-POST-DATE == NK0BW-DISPLAY-POST-DATE)
    NK0BW-GLPMO-MOD-FLAG = "N";
    return;
  else
    NK0BW-GLPMO-MOD-FLAG = "Y";
  end
  if (NK0BW-CHAR-DASH == "-"
   && NK0BW-CHAR-POST-YEAR >= "00"
   && NK0BW-CHAR-POST-YEAR <= "99"
   && NK0BW-CHAR-POST-MONTH >= "01"
   && NK0BW-CHAR-POST-MONTH <= "12")
  else
    set NK0BM-DIS-NIAGLPMO cursor, modified, bold;
    converseLib.validationFailed(395);
    NLXREC.NLXERRF = "Y";
    return;
  end
end // end NK0BS-EDIT-POSTMO

// fetch row from vgcoa001
Function NK0BS-F-VGCOA001()
  ;
  NLXREC.NLXCPROC = "NK0BS-F-VGCOA001"; /* set current proc name*/
  ;
  VGCOA001.GA-GLBL-ACCT-ID = VINTGL02.GA-GLBL-ACCT-ID[1];
  ;
  if (VGCOA001.GA-FIN-PRD-CLS-CD == "XX")
    if (VINTGL02.XGPCD == "02")
      VGCOA001.GA-FIN-PRD-CLS-CD = "FW";
    else
      if (VINTGL02.XGPCD == "03")
        VGCOA001.GA-FIN-PRD-CLS-CD = "AP";
      else
        VGCOA001.GA-FIN-PRD-CLS-CD = "OT";
      end
    end
  else
     /* continue*/
  end
  ;
  if (VGCOA001.GA-BUS-UNT-CD == "XX")
    VGCOA001.GA-BUS-UNT-CD = "01";
  end
  ;
   /* open a cursor on VGCOA001 using GA-GLBL-ACCT-ID*/
  ;
  call "VGCOA001" ("S3", SQLCA, VGCOA001) {isNoRefresh = yes, isExternal = yes};
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* CONTINUE*/
  else
    TA1REC.TA1LOCAT[2] = "S3     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "VGCOA001 "; /* io module*/
    TA1REC.TA1DBASE = "DGENLD"; /* database*/
    TA1REC.TA1TBLVU = "VGCOA001"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
   /* FETCH THE FIRST ROW FROM VGCOA001*/
  ;
  call "VGCOA001" ("N3", SQLCA, VGCOA001) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* CONTINUE*/
  else
    TA1REC.TA1LOCAT[2] = "N3     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "VGCOA001 "; /* io module*/
    TA1REC.TA1DBASE = "DGENLD"; /* database*/
    TA1REC.TA1TBLVU = "VGCOA001"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
    /* move the old style gl-gen-led-acct to glarec*/
  ;
  GLAREC.GLAENT = VGCOA001.GL-ENTITY-ID;
  GLAREC.GLARCID = VGCOA001.GL-RSP-CTR-ID;
  GLAREC.GLANTAC = VGCOA001.GL-NATRL-ACCT-ID;
  GLAREC.GLASUB = VGCOA001.GL-SUB-ACCT-ID;
  GLAREC.GLAPRJ = VGCOA001.GL-PROJ-ID;
  ;
   /* close the vgcoa001 cursor*/
  ;
  call "VGCOA001" ("C3", SQLCA, VGCOA001) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    /* CONTINUE*/
  else
    TA1REC.TA1LOCAT[2] = "C3     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "VGCOA001 "; /* io module*/
    TA1REC.TA1DBASE = "DGENLD"; /* database*/
    TA1REC.TA1TBLVU = "VGCOA001"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
end // end NK0BS-F-VGCOA001

// Insert new claim header
Function NK0BS-INSERT-CLAIM()
   /* *****************************************************/
   /* Build and insert new claim header*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0BS-INSERT-CLAIM";
  ;
   /* Get claim number*/
  ;
  NK0BS-SEL-VNLCTL01();
  ;
  NK0BM100.NL-CLM-ID = VNLCTL01.NL-NXT-CLM-ID;
  NKWREC.NL-CLM-ID = VNLCTL01.NL-NXT-CLM-ID;
  VNCHDR01.NL-CLM-ID = VNLCTL01.NL-NXT-CLM-ID;
  VNCHDR01.KUCCOID = NKWREC.KUCCOID;
  VNCHDR01.KUMSTRID = NKWREC.KUMSTRID;
  VNCHDR01.ZDTCD = "CM";
  VNCHDR01.OP1CMPNB = NK0BM100.OP1CMPNB;
  move NK0BM-NLAADRID to NK0BW-CHR-NLAADRID withV60Compat;
  VNCHDR01.NLAADRID = NK0BW-NUM-NLAADRID;
  VNCHDR01.XXX-SUM-ZCR-CD = NK0BM100.XXX-SUM-ZCR-CD;
  VNCHDR01.ZCS-CLM-STAT-CD = NK0BM100.ZCS-CLM-STAT-CD;
  VNCHDR01.ZCR-CLM-RSN-CD = NK0BM100.ZCR-CLM-RSN-CD;
  VNCHDR01.ZFCCD = " ";
  VNCHDR01.NL-EXCHG-RATE = 0;
  VNCHDR01.NL-CLM-AMT = 0;
  VNCHDR01.NL-CLM-FCUR-AMT = 0;
  VNCHDR01.GLAENT = NK0BM100.GLAENT;
  VNCHDR01.GLARCID = NK0BM100.GLARCID;
  VNCHDR01.GLANTAC = NK0BM100.GLANTAC;
  VNCHDR01.GLASUB = NK0BM100.GLASUB;
  VNCHDR01.GLAPRJ = NK0BM100.GLAPRJ;
  VNCHDR01.NIAGLPMO = 0;
  VNCHDR01.NL-CLM-PRT-DT = 0;
  VNCHDR01.XXXUSID1 = CAUSERID;
  VNCHDR01.XXXUSID2 = " ";
  VNCHDR01.XXX-USER-ID3 = " ";
  VNCHDR01.XXX-USER-ID4 = " ";
  XX0XS01();
  VNCHDR01.ZZZSDT = XX0XW01.XX0XWDAT;
  VNCHDR01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VNCHDR01.ZZZCHGCT = XX0XW01.XX0XWTIM;
  VNCHDR01.ZZZCHGCT = 0;
  ;
  NK0BS-ADD-VNCHDR01(); /* insert new claim header*/
  ;
  /* ************************************************************************/
  /* Must add a row for the reference text comment*/
  /* ************************************************************************/
  ;
  VNCCOM01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  VNCCOM01.NL-CLM-COMNT-IND = "R";
  VNCCOM01.NL-CLM-COMNT-NBR = 10;
  VNCCOM01.NL-CLM-COMNT = NK0BM100.NL-CLM-COMNT;
  VNCCOM01.ZZZSDT = XX0XW01.XX0XWDAT;
  VNCCOM01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VNCCOM01.ZZZCHGCT = XX0XW01.XX0XWTIM;
  VNCCOM01.ZZZCHGCT = 0;
  ;
  NK0BS-ADD-VNCCOM01(); /* insert new claim comment*/
  ;
  XX0XS01();
  VNCCOM01.NL-CLM-COMNT = NK0BM100.IVC-ORD-REF-NUM;
  VNCCOM01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VNCCOM01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  NK0BS-SET-IVCORD(); /* update claim comment*/
end // end NK0BS-INSERT-CLAIM

// Move map fields from customer
Function NK0BS-MAP-DEFAULTS()
   /* *****************************************************/
   /* Build map from customer*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0BS-MAP-DEFAULTS";
  set NK0BM-INC-CLM-LIT skip, invisible; /* not needed if creating claim*/
  NK0BM100.ZCS-CLM-STAT-CD = NKWREC.ZCS-CLM-STAT-CD;
  NK0BM100.ZCS-CLM-STAT-DESC = NKWREC.ZCS-CLM-STAT-DESC;
  NK0BM100.NL-CLM-ID = NKWREC.NL-CLM-ID;
  NK0BM100.XXX-SUM-ZCR-DESC = NKWREC.XXX-SUM-ZCR-DESC;
  NK0BM100.KUMSTRID = NKWREC.KUMSTRID;
  XX0XS01();
  NLXREC.XXXWCYMD = XX0XW01.XX0XWDAT;
  XPNL003();
  NK0BM100.NK0BM-ZZSDT = XXXFLDT;
  NK0BM-NL-CLM-PRT-DT = " ";
  NK0BM100.OP1CMPNB = 0;
  VNCHDR01.XXXUSID1 = COMMAREA.CAUSERID;
  NK0BM100.XXXUSID1 = VNCHDR01.XXXUSID1;
  if (VNCHDR01.XXXUSID1 in ZPRTBL.XXXUSRID)
    NK0BM100.XXXUNTXT = ZPRTBL.XXXUNTXT[sysVar.arrayIndex];
  end
  if (NKWREC.XXX-SUM-ZCR-CD == "DF")
    set NK0BM-COMP-NBR-LIT skip, invisible;
    set NK0BM100.OP1CMPNB skip, invisible;
    NK0BS-SEL-VRCVGL01();
    if (KUCREC.XLBCD in XLATBL.XLBCD)
      NK0BM100.GLAENT = XLATBL.GLAENT[sysVar.arrayIndex];
      NKW-REC-GLAENT = XLATBL.GLAENT[sysVar.arrayIndex];
    end
    NK0BM100.GLARCID = VRCVGL01.GLARCID;
    NK0BM100.GLANTAC = VRCVGL01.GLANTAC;
    NK0BM100.GLASUB = VRCVGL01.GLASUB;
    NK0BM100.GLAPRJ = VRCVGL01.GLAPRJ;
    NKW-REC-GLARCID = VRCVGL01.GLARCID;
    NKW-REC-GLANTAC = VRCVGL01.GLANTAC;
    NKW-REC-GLASUB = VRCVGL01.GLASUB;
    NKW-REC-GLAPRJ = VRCVGL01.GLAPRJ;
  else
    NK0BM100.GLAENT = " ";
    NK0BM100.GLARCID = " ";
    NK0BM100.GLANTAC = " ";
    NK0BM100.GLASUB = " ";
    NK0BM100.GLAPRJ = " ";
  end
  NK0BM-DIS-NIAGLPMO = " ";
  NK0BM100.NL-CLM-AMT = 0;
  NK0BM100.XXXUSID2 = " ";
  NK0BM100.XXX-USER-ID3 = " ";
  NK0BM100.XXX-USER-ID4 = " ";
  ;
  if (NKWREC.XXX-SUM-ZCR-CD != "MI") /* use bill to addr for non misc clms*/
    VLADDR01.NLAADRID = KUCREC.KUCBLAID;
  else
    VLADDR01.NLAADRID = KUMREC.KUMSTAID;
  end
  ;
  NK0BS-SEL-VLADDR01();
  NK0BW-NUM-NLAADRID = VLADDR01.NLAADRID;
  move NK0BW-CHR-NLAADRID to NK0BM-NLAADRID withV60Compat;
  NK0BM100.NLAADDR1 = VLADDR01.XXX-ADDR1;
  NK0BM100.NLAADDR2 = VLADDR01.XXX-ADDR2;
  NK0BM100.NLAADDR3 = VLADDR01.XXX-ADDR3;
  NK0BM100.NLAADDR4 = VLADDR01.XXX-ADDR4;
  NK0BM100.NLAADDR5 = VLADDR01.XXX-ADDR5;
  NK0BM100.NLAADDR6 = VLADDR01.XXX-ADDR6;
  NK0BM100.NL-CLM-COMNT = " ";
  NK0BM100.IVC-ORD-REF-NUM = " ";
  if (NKWREC.XXX-SUM-ZCR-CD != "MI")
    NK0BM-XGPCD-LIT = "        GPC;";
    set NK0BM100.XGPCD modified;
    set NK0BM100.OP1CMPNB skip;
    set NK0BM-RCV-TYP-LIT skip, invisible;
  else
    set NK0BM100.OP1CMPNB initialAttributes;
    NK0BM100.XGPCD = KUCREC.XLBCD; /* using xgpcd for both codes*/
    if (KUCREC.XLBCD in XLATBL.XLBCD)
      NK0BM100.XGPDESC = XLATBL.XXX-ADDR1[sysVar.arrayIndex];
    end
  end
  set NK0BM100.ZCR-CLM-RSN-CD modified;
  ;
   /* when the users are ready un-comment if statement*/
   /* IF COMMAREA.CACLVL(4) = 'N';     /* accounting user*/
  set NK0BM100.NK0BM-DIS-NIAGLPMO skip;
   /* END;*/
end // end NK0BS-MAP-DEFAULTS

// Move map fields from claim
Function NK0BS-MAP-FM-CLAIM()
   /* *****************************************************/
   /* Build map from defaults*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0BS-MAP-FM-CLAIM";
  ;
  if (VNCHDR01.ZCS-CLM-STAT-CD == "AC"
   || VNCHDR01.ZCS-CLM-STAT-CD == "RP"
   || VNCHDR01.ZCS-CLM-STAT-CD == "VD"
   || NKWREC.NKW-MAP-MODE == "I")
    set NK0BM100.CATOAP cursor;
  else
    set NK0BM100.NL-CLM-COMNT cursor;
  end
  NK0BM100.ZCR-CLM-RSN-CD = VNCHDR01.ZCR-CLM-RSN-CD;
  if (VNCHDR01.ZCR-CLM-RSN-CD in ZCRTBL.ZCR-CLM-RSN-CD)
    NK0BM100.ZCR-CLM-RSN-DESC = ZCRTBL.ZCR-CLM-RSN-DESC[sysVar.arrayIndex];
  end
  NK0BM100.ZCS-CLM-STAT-CD = VNCHDR01.ZCS-CLM-STAT-CD;
  if (VNCHDR01.ZCS-CLM-STAT-CD in ZCSTBL.ZCS-CLM-STAT-CD)
    NK0BM100.ZCS-CLM-STAT-DESC = ZCSTBL.ZCS-CLM-STAT-DESC[sysVar.arrayIndex];
  end
  NK0BM100.NL-CLM-ID = NKWREC.NL-CLM-ID;
  NLXREC.XXXWCYMD = VNCHDR01.ZZZSDT;
  XPNL003();
  NK0BM100.NK0BM-ZZSDT = XXXFLDT;
  if (VNCHDR01.NL-CLM-PRT-DT > 0)
    NLXREC.XXXWCYMD = VNCHDR01.NL-CLM-PRT-DT;
    XPNL003();
    NK0BM100.NK0BM-NL-CLM-PRT-DT = XXXFLDT;
  else
    NK0BM100.NK0BM-NL-CLM-PRT-DT = " ";
  end
  NK0BM100.OP1CMPNB = VNCHDR01.OP1CMPNB;
  NK0BM100.XXXUSID1 = VNCHDR01.XXXUSID1;
  if (VNCHDR01.XXXUSID1 in ZPRTBL.XXXUSRID)
    NK0BM100.XXXUNTXT = ZPRTBL.XXXUNTXT[sysVar.arrayIndex];
  end
  if (VNCHDR01.NIAGLPMO > 0)
    NK0BW-FULL-POST-DATE = VNCHDR01.NIAGLPMO;
    move NK0BW-POST-YEAR to NK0BW-DISPLAY-POST-YEAR withV60Compat;
    NK0BW-DISPLAY-DASH = "-";
    move NK0BW-POST-MONTH to NK0BW-DISPLAY-POST-MONTH withV60Compat;
    move NK0BW-DISPLAY-POST-DATE to NK0BM-DIS-NIAGLPMO withV60Compat;
  else
    NK0BM-DIS-NIAGLPMO = " ";
  end
  NK0BM100.GLAENT = VNCHDR01.GLAENT;
  NK0BM100.GLARCID = VNCHDR01.GLARCID;
  NK0BM100.GLANTAC = VNCHDR01.GLANTAC;
  NK0BM100.GLASUB = VNCHDR01.GLASUB;
  NK0BM100.GLAPRJ = VNCHDR01.GLAPRJ;
  NK0BM100.NL-CLM-AMT = VNCHDR01.NL-CLM-AMT;
  NK0BM100.XXXUSID2 = VNCHDR01.XXXUSID2;
  NK0BM100.XXX-USER-ID3 = VNCHDR01.XXX-USER-ID3;
  NK0BM100.XXX-USER-ID4 = VNCHDR01.XXX-USER-ID4;
  NK0BW-NUM-NLAADRID = VNCHDR01.NLAADRID;
  if (NK0BM100.ZCR-CLM-RSN-CD > " ")
    set NK0BM100.ZCR-CLM-RSN-CD skip;
  else
    set NK0BM100.ZCR-CLM-RSN-CD cursor;
  end
  VLADDR01.NLAADRID = VNCHDR01.NLAADRID;
  if (VNCHDR01.ZCS-CLM-STAT-CD == "VD")
    NLXREC.XXXWCYMD = VNCHDR01.ZZZCHGDT;
    XPNL003();
    move XXXFLDT to NK0BW-CLM-STAT-CHG-DT withV60Compat;
    NK0BW-CLM-STAT-DESC = NK0BM100.ZCS-CLM-STAT-DESC;
    NK0BW-CLM-STAT-SEP = ": ";
    NK0BM100.ZCS-CLM-STAT-DESC = NK0BW-CLM-STAT-DESC-DT;
  end
  NK0BS-SEL-VLADDR01();
  move NK0BW-CHR-NLAADRID to NK0BM-NLAADRID withV60Compat;
  NK0BM100.NLAADDR1 = VLADDR01.XXX-ADDR1;
  NK0BM100.NLAADDR2 = VLADDR01.XXX-ADDR2;
  NK0BM100.NLAADDR3 = VLADDR01.XXX-ADDR3;
  NK0BM100.NLAADDR4 = VLADDR01.XXX-ADDR4;
  NK0BM100.NLAADDR5 = VLADDR01.XXX-ADDR5;
  NK0BM100.NLAADDR6 = VLADDR01.XXX-ADDR6;
  NK0BS-SEL-VNCCOM01();
  NK0BS-SEL-IVCORD();
  ;
  if (VNCHDR01.XXX-SUM-ZCR-CD == "MI")
    if (NKWREC.XLBCD in XLATBL.XLBCD)
      NK0BM100.XGPCD = XLATBL.XLBCD[sysVar.arrayIndex];
      NK0BM100.XGPDESC = XLATBL.XXX-ADDR1[sysVar.arrayIndex];
    end
    NK0BS-SEL-VNCADJ01(); /* get the receivable type from first*/
                                   /* charge*/
    if (NKWREC.ZRTCD in ZRTTBL.ZRTCD)
      NK0BM100.ZRTDESC = ZRTTBL.ZRTDESC[sysVar.arrayIndex];
    end
    if (NKWREC.ZRTCD == " ")
      set NK0BM100.OP1CMPNB initialAttributes;
    else
      set NK0BM100.OP1CMPNB skip;
    end
  else
    set NK0BM100.OP1CMPNB skip;
    set NK0BM-RCV-TYP-LIT skip, invisible;
    NK0BM-XGPCD-LIT = "GPC;";
    if (NKWREC.XGPCD == " ")
      if (NKWREC.XXX-SUM-ZCR-CD == "PR")
        XSNKS-SET-XGPCD();
        NKWREC.XGPCD = VPIITM01.XGPCD;
      else
        NK0BS-SEL-VXGP0001(); /* get first item to get gpc for claim*/
      end
    end
    NK0BM100.XGPCD = NKWREC.XGPCD;
    if (NKWREC.XGPCD in XGPTBL.XGPCD)
      NK0BM100.XGPDESC = XGPTBL.XGPDESC[sysVar.arrayIndex];
    end
    if (NK0BM100.XGPCD > " ")
      set NK0BM100.XGPCD skip;
    else
      set NK0BM100.XGPCD initialAttributes, cursor;
    end
  end
  if (NKWREC.XXX-SUM-ZCR-CD == "DF")
    set NK0BM-COMP-NBR-LIT skip, invisible;
    set VNCIVX01 empty;
    VNCIVX01.NL-CLM-ID = VNCHDR01.NL-CLM-ID;
    NK0BS-SEL-VNCIVX01();
    if (VNCIVX01.NIDIVCID > 0)
      NK0BM100.NK0BM-INC-CLM-ID = VNCIVX01.NIDIVCID;
    else
      set NK0BM-INC-CLM-LIT invisible, skip;
    end
  else
    set NK0BM-INC-CLM-LIT invisible, skip;
  end
   /* when the users are ready uncomment if below*/
   /* IF COMMAREA.CACLVL(4) EQ 'N';    /* not a Accounting user*/
  set NK0BM-DIS-NIAGLPMO skip;
   /* END;*/
end // end NK0BS-MAP-FM-CLAIM

// Move address to map
Function NK0BS-MOVE-ADDRESS()
   /* *****************************************************/
   /* Move address lines to the map*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0BS-MOVE-ADDRESS";
  ;
  move NK0BW-CHR-NLAADRID to NK0BM-NLAADRID withV60Compat;
  NK0BM100.NLAADDR1 = VLADDR01.XXX-ADDR1;
  NK0BM100.NLAADDR2 = VLADDR01.XXX-ADDR2;
  NK0BM100.NLAADDR3 = VLADDR01.XXX-ADDR3;
  NK0BM100.NLAADDR4 = VLADDR01.XXX-ADDR4;
  NK0BM100.NLAADDR5 = VLADDR01.XXX-ADDR5;
  NK0BM100.NLAADDR6 = VLADDR01.XXX-ADDR6;
  ;
  set NK0BM-NLAADRID normal;
  ;
end // end NK0BS-MOVE-ADDRESS

// Move map fields to NKWREC
Function NK0BS-MOVE-NKWREC()
   /* *****************************************************/
   /* Move map fields to the NKWREC*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0BS-MOVE-NKWREC";
  ;
  NKWREC.XGPCD = NK0BM100.XGPCD;
  NKWREC.ZCR-CLM-RSN-CD = NK0BM100.ZCR-CLM-RSN-CD;
  if (NK0BM100.ZCR-CLM-RSN-CD in ZCRTBL.ZCR-CLM-RSN-CD)
    NKWREC.ZCR-CLM-RSN-DESC = ZCRTBL.ZCR-CLM-RSN-DESC[sysVar.arrayIndex];
  end
  NKWREC.ZCS-CLM-STAT-CD = NK0BM100.ZCS-CLM-STAT-CD;
  if (NK0BM100.ZCS-CLM-STAT-CD in ZCSTBL.ZCS-CLM-STAT-CD)
    NKWREC.ZCS-CLM-STAT-DESC = ZCSTBL.ZCS-CLM-STAT-DESC[sysVar.arrayIndex];
  end
  ;
  ;
end // end NK0BS-MOVE-NKWREC

// Numeric check on address
Function NK0BS-NUMERIC-CHK()
   /* ***********************************************************************/
   /*  */
   /* This will do a numeric check on the map address.  It will convert*/
   /* the character map address id in to a numberic address id.*/
   /*  */
   /* ***********************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0BS-NUMERIC-CHK";
  ;
  NLXREC.NLXNUM8A = 0;
  NLXREC.NLXITMX = 8;
  NLXREC.NLXLTRX1 = 3;
  /*  */
  /* ************************************************************************/
  /* Set nlxltrx1 to first field greater than spaces*/
  /* ************************************************************************/
  /*  */
  while (NLXREC.NLXLTRX1 > 0
   && NK0BW-CHR-PARTS[NLXLTRX1] == " ")
    NLXREC.NLXLTRX1 = NLXREC.NLXLTRX1 - 1;
  end
  /*  */
  /* ************************************************************************/
  /* If the nlxltrx1 is equal to zero then no value was entered and it is*/
  /* an error*/
  /* ************************************************************************/
  /*  */
  if (NLXREC.NLXLTRX1 == 0)
    converseLib.validationFailed(44);
    NLXREC.NLXERRF = "Y";
    set NK0BM-NLAADRID cursor, modified, bold;
    return;
  end
  /*  */
  /* ************************************************************************/
  /* move the numbers starting from right to left to the number format*/
  /* field*/
  /* ************************************************************************/
  /*  */
  while (NLXREC.NLXLTRX1 > 0)
    if (NK0BW-CHR-PARTS[NLXLTRX1] >= "0"
     && NK0BW-CHR-PARTS[NLXLTRX1] <= "9")
      NLXREC.NLXBYTE[NLXITMX] = NK0BW-CHR-PARTS[NLXLTRX1];
      NLXREC.NLXITMX = NLXREC.NLXITMX - 1;
    else
      converseLib.validationFailed(44);
      NLXREC.NLXERRF = "Y";
      set NK0BM-NLAADRID cursor, modified, bold;
      return;
    end
    NLXREC.NLXLTRX1 = NLXREC.NLXLTRX1 - 1;
  end
  /*  */
  /* ************************************************************************/
  /* Now we have formated the numberic field to use in the address look up*/
  /* ************************************************************************/
  /*  */
  VLADDR01.NLAADRID = NLXREC.NLXNUM8A;
  NK0BW-NUM-NLAADRID = NLXREC.NLXNUM8A;
  move NK0BW-CHR-NLAADRID to NK0BM-NLAADRID withV60Compat;
  NK0BS-SEL-VLADDR01();
  /*  */
  /* ************************************************************************/
  /* If address is not found it an error.  Else reformat the address*/
  /* ************************************************************************/
  /*  */
  if (SQLCA.VAGen_SQLCODE == 100)
    converseLib.validationFailed(44);
    NLXREC.NLXERRF = "Y";
    set NK0BM-NLAADRID cursor, modified, bold;
  else
    NK0BW-ADD-MOD-FLAG = "N";
    NK0BS-MOVE-ADDRESS();
  end
end // end NK0BS-NUMERIC-CHK

// select unique from vgcoa001
Function NK0BS-S-VGCOA001()
  ;
  NLXREC.NLXCPROC = "NK0BS-S-VGCOA001"; /* set current proc name*/
  ;
  VGCOA001.GA-GLBL-ACCT-ID = VINTGL02.GA-GLBL-ACCT-ID[1];
  ;
  if (VGCOA001.GA-FIN-PRD-CLS-CD == "XX")
    if (VINTGL02.XGPCD == "02")
      VGCOA001.GA-FIN-PRD-CLS-CD = "FW";
    else
      if (VINTGL02.XGPCD == "03")
        VGCOA001.GA-FIN-PRD-CLS-CD = "AP";
      else
        VGCOA001.GA-FIN-PRD-CLS-CD = "OT";
      end
    end
  else
    /* continue*/
  end
  ;
  if (VGCOA001.GA-BUS-UNT-CD == "XX")
    VGCOA001.GA-BUS-UNT-CD = "01";
  end
  ;
  call "VGCOA001" ("S1", SQLCA, VGCOA001) {isNoRefresh = yes, isExternal = yes};
  ;
  XXXMSG = " ";
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    GLAREC.GLAENT = VGCOA001.GL-ENTITY-ID;
    GLAREC.GLARCID = VGCOA001.GL-RSP-CTR-ID;
    GLAREC.GLANTAC = VGCOA001.GL-NATRL-ACCT-ID;
    GLAREC.GLASUB = VGCOA001.GL-SUB-ACCT-ID;
    GLAREC.GLAPRJ = VGCOA001.GL-PROJ-ID;
  else
    if (SQLCA.VAGen_SQLCODE == -811)
      if (NK0BW-GCOA-FLAG == "N") /* set the multiple rows message to*/
                                   /* print if the first time thru*/
        converseLib.validationFailed(434); /* send message non unique row found*/
        NK0BW-GCOA-TEXT = "DPROFT.VINTGL02 - ";
        NK0BW-GCOA-KEY = VINTGL02.GA-GLBL-ACCT-ID[1];
        move NK0BW-GCOA-MESSAGE to XXXMSG withV60Compat;
        NK0BW-GCOA-FLAG = "S";
      else
        XXXMSG = " ";
      end
      NK0BS-F-VGCOA001();
    else
      if (SQLCA.VAGen_SQLCODE == +100)
        converseLib.validationFailed(433); /* send message row not found*/
        NLXREC.NLXERRF = "Y"; /* set error flag*/
        NK0BW-GCOA-TEXT = "DPROFT.VINTGL02 - ";
        NK0BW-GCOA-KEY = VINTGL02.GA-GLBL-ACCT-ID[1];
        move NK0BW-GCOA-MESSAGE to XXXMSG withV60Compat;
      else
        TA1REC.TA1LOCAT[2] = "S1     "; /* database action*/
        TA1REC.TA1LOCAT[3] = "VGCOA001 "; /* io module*/
        TA1REC.TA1DBASE = "DGENLD"; /* database*/
        TA1REC.TA1TBLVU = "VGCOA001"; /* table view*/
        XPNL005(); /* abend routine*/
      end
    end
  end
  ;
end // end NK0BS-S-VGCOA001

// Read large address table
Function NK0BS-SEL-IVCORD()
   /* *****************************************************/
   /* Select invoice order reference number*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0BS-SEL-IVCORD";
  ;
  VNCCOM01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  VNCCOM01.NL-CLM-COMNT-IND = "O";
  NL-CLM-COMNT-NBR = 10;
  ;
   /* select unique - NLAREC*/
  ;
  call "IO6500" ("S ", SQLCA, VNCCOM01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    NK0BM100.IVC-ORD-REF-NUM = VNCCOM01.NL-CLM-COMNT;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
   /* AND VNCHDR01.ZCS-CLM-STAT-CD = 'IP';*/
      /* NEXT SENTENC*/
    else
      TA1REC.TA1DBASE = "DNILO";
      TA1REC.TA1TBLVU = "VNCCOM01";
      NK0BW-LRG-NBR = VNCCOM01.NL-CLM-ID;
      NK0BW-IND = VNCCOM01.NL-CLM-COMNT-IND;
      NK0BW-SML-NBR = VNCCOM01.NL-CLM-COMNT-NBR;
      TA1REC.TA1TBLKE = NK0BW01.NK0BW-KEY;
      XPNL005(); /* abort routine*/
    end
  end
  ;
end // end NK0BS-SEL-IVCORD

// Select company row
Function NK0BS-SEL-VCMPNY01()
   /* *****************************************************/
   /* Select company*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0BS-SEL-VCMPN01";
  ;
   /* Open cursor for VNCDEF01*/
  ;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* open cursor on defect*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100) /* if a not found,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VCMPNY01";
    NK0BW-LRG-NBR = KUCREC.KUCCOID;
    TA1REC.TA1TBLKE = NK0BW01.NK0BW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
end // end NK0BS-SEL-VCMPNY01

// Select distributor row
Function NK0BS-SEL-VDSTRB01()
  /* ************************************************************************/
  /* Select distributor*/
  /* ************************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0BS-SEL-VDSTRB01";
  ;
   /* Open cursor for Vdstrb01*/
  ;
  VDSTRB01.KUCCOID = NKWREC.KUCCOID;
  call "IO4600" ("S ", SQLCA, VDSTRB01) {isNoRefresh = yes, isExternal = yes}; /* open cursor on defect*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VDSTRB01";
    NK0BW-LRG-NBR = NKWREC.KUCCOID;
    TA1REC.TA1TBLKE = NK0BW01.NK0BW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
end // end NK0BS-SEL-VDSTRB01

// Read large address table
Function NK0BS-SEL-VLADDR01()
   /* *****************************************************/
   /* Select address row for claim*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0B-SEL-VLADDR01";
  ;
  if (VNCHDR01.ZCS-CLM-STAT-CD == "AC"
   || VNCHDR01.ZCS-CLM-STAT-CD == "RP")
    VLADDR01.NLAINTGR = VNCHDR01.NL-CLM-ID;
    VLADDR01.NLATYPIN = "K";
    VLADDR01.NLABSIND = "B";
  else
    VLADDR01.NLAINTGR = NKWREC.KUCCOID;
    VLADDR01.NLATYPIN = "C";
    VLADDR01.NLABSIND = " ";
  end
  VLADDR01.NLASINT1 = 0;
  VLADDR01.NLASINT2 = 0;
  VLADDR01.NLAONECH = " ";
  ;
   /* select unique - NLAREC*/
  ;
  call "IO4410" ("S ", SQLCA, VLADDR01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VLADDR01";
    NK0BW-LRG-NBR = VLADDR01.NLAINTGR; /* build abend key*/
    NK0BW-SML-NBR = VLADDR01.NLAADRID;
    NK0BW-IND = VLADDR01.NLABSIND;
    TA1REC.TA1TBLKE = NK0BW01.NK0BW-KEY;
    XPNL005(); /* Intnational abend routine*/
  end
  ;
end // end NK0BS-SEL-VLADDR01

// Select first from VNCADJ01
Function NK0BS-SEL-VNCADJ01()
   /* *****************************************************/
   /* Select first adjustment for the receivable type*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0BS-SEL-VNCADJ01";
  set VNCADJ01 empty;
  VNCADJ01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  ;
   /* Open cursor for vncadj01*/
  ;
  call "IO6490" ("S1", SQLCA, VNCADJ01) {isNoRefresh = yes, isExternal = yes}; /* open cursor on vncadj01*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCADJ01";
    NK0BW-LRG-NBR = VNCADJ01.NL-CLM-ID;
    NK0BW-IND = " ";
    NK0BW-SML-NBR = 0;
    TA1REC.TA1TBLKE = NK0BW01.NK0BW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
   /* Fetch cursor for vncdef01*/
  ;
  call "IO6490" ("N1", SQLCA, VNCADJ01) {isNoRefresh = yes, isExternal = yes}; /* fetch cursor on vncadj*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0   /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100 /* or none found,*/
  )                              /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCADJ01";
    NK0BW-LRG-NBR = VNCADJ01.NL-CLM-ID;
    NK0BW-IND = " ";
    NK0BW-SML-NBR = 0;
    TA1REC.TA1TBLKE = NK0BW01.NK0BW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
  ;
   /* close cursor for vncadj01*/
  ;
  call "IO6490" ("C1", SQLCA, VNCADJ01) {isNoRefresh = yes, isExternal = yes}; /* open cursor on vncadj01*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCADJ01";
    NK0BW-LRG-NBR = VNCADJ01.NL-CLM-ID;
    NK0BW-IND = " ";
    NK0BW-SML-NBR = 0;
    TA1REC.TA1TBLKE = NK0BW01.NK0BW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
  if (VNCADJ01.ZCHCD > " ")
    if (VNCADJ01.ZCHCD in ZCHTBL.ZCHCD)
      NKWREC.ZRTCD = ZCHTBL.ZRTCD[sysVar.arrayIndex];
    end
  else
    NKWREC.ZRTCD = " ";
  end
end // end NK0BS-SEL-VNCADJ01

// Read large address table
Function NK0BS-SEL-VNCCOM01()
   /* *****************************************************/
   /* Select address row for claim*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0BS-SEL-COMNT";
  ;
  VNCCOM01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  VNCCOM01.NL-CLM-COMNT-IND = "R";
  NL-CLM-COMNT-NBR = 10;
  ;
   /* select unique - NLAREC*/
  ;
  call "IO6500" ("S ", SQLCA, VNCCOM01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    NK0BM100.NL-CLM-COMNT = VNCCOM01.NL-CLM-COMNT;
     /* NEXT SENTENCE*/
  else
    if (SQLCA.VAGen_SQLCODE == 100
     && VNCHDR01.ZCS-CLM-STAT-CD == "IP")
      /* NEXT SENTENC*/
    else
      TA1REC.TA1DBASE = "DNILO";
      TA1REC.TA1TBLVU = "VNCCOM01";
      NK0BW-LRG-NBR = VNCCOM01.NL-CLM-ID;
      NK0BW-IND = VNCCOM01.NL-CLM-COMNT-IND;
      NK0BW-SML-NBR = VNCCOM01.NL-CLM-COMNT-NBR;
      TA1REC.TA1TBLKE = NK0BW01.NK0BW-KEY;
      XPNL005(); /* abort routine*/
    end
  end
  ;
end // end NK0BS-SEL-VNCCOM01

// Select first from VNCDEF01
Function NK0BS-SEL-VNCDEF01()
   /* *****************************************************/
   /* Select first style for gpc*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0BS-SEL-VNCDEF01";
  ;
   /* Open cursor for vncdef01*/
  ;
  call "IO6480" ("S1", SQLCA, VNCDEF01) {isNoRefresh = yes, isExternal = yes}; /* open cursor on vncdef01*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCDEF01";
    NK0BW-LRG-NBR = VNCDEF01.NL-CLM-ID;
    NK0BW-IND = " ";
    NK0BW-SML-NBR = 0;
    TA1REC.TA1TBLKE = NK0BW01.NK0BW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
   /* Fetch cursor for vncdef01*/
  ;
  call "IO6480" ("N1", SQLCA, VNCDEF01) {isNoRefresh = yes, isExternal = yes}; /* open cursor on vncdef01*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0   /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100 /* or none found,*/
  )                              /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCDEF01";
    NK0BW-LRG-NBR = VNCDEF01.NL-CLM-ID;
    NK0BW-IND = " ";
    NK0BW-SML-NBR = 0;
    TA1REC.TA1TBLKE = NK0BW01.NK0BW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
  ;
   /* Open cursor for vncdef01*/
  ;
  call "IO6480" ("C1", SQLCA, VNCDEF01) {isNoRefresh = yes, isExternal = yes}; /* open cursor on vncdef01*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCDEF01";
    NK0BW-LRG-NBR = VNCDEF01.NL-CLM-ID;
    NK0BW-IND = " ";
    NK0BW-SML-NBR = 0;
    TA1REC.TA1TBLKE = NK0BW01.NK0BW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
  NKWREC.XGPCD = VNCDEF01.XGPCD;
end // end NK0BS-SEL-VNCDEF01

// Select International claim hdr
Function NK0BS-SEL-VNCHDR01()
   /* *****************************************************/
   /* Select claim header*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0BS-SEL-VNCHDR01";
  ;
  VNCHDR01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  ;
   /* select unique - VNCHDR01*/
  ;
  call "IO6460" ("S ", SQLCA, VNCHDR01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCHDR01";
    NK0BW-LRG-NBR = VNCHDR01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0BW01.NK0BW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
end // end NK0BS-SEL-VNCHDR01

// Select Intnl clm crossref
Function NK0BS-SEL-VNCIVX01()
   /* *****************************************************/
   /* Select claim cross reference*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0BS-SEL-VNCIVX01";
  ;
  ;
   /* open cursor on  VNCIVX01 with claim id*/
  ;
  call "IO6510" ("S2", SQLCA, VNCIVX01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCIVX01";
    NK0BW-LRG-NBR = VNCIVX01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0BW01.NK0BW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
   /* fetch cursor on  VNCIVX01 with claim id*/
  ;
  call "IO6510" ("N2", SQLCA, VNCIVX01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100) /* Not found is okay;*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCIVX01";
    NK0BW-LRG-NBR = VNCIVX01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0BW01.NK0BW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
   /* close cursor on VNCIVX01 with claim id*/
  ;
  call "IO6510" ("C2", SQLCA, VNCIVX01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCIVX01";
    NK0BW-LRG-NBR = VNCIVX01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0BW01.NK0BW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
end // end NK0BS-SEL-VNCIVX01

// Select first from VNCSTY01
Function NK0BS-SEL-VNCSTY01()
   /* *****************************************************/
   /* Select first style for gpc*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0BS-SEL-VNCSTY01";
  ;
   /* Open cursor for Vncsty01*/
  ;
  call "IO6470" ("S1", SQLCA, VNCSTY01) {isNoRefresh = yes, isExternal = yes}; /* open cursor on VNCSTY01*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCSTY01";
    NK0BW-LRG-NBR = VNCSTY01.NL-CLM-ID;
    NK0BW-IND = " ";
    NK0BW-SML-NBR = 0;
    TA1REC.TA1TBLKE = NK0BW01.NK0BW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
   /* Fetch cursor for Vncsty01*/
  ;
  call "IO6470" ("N1", SQLCA, VNCSTY01) {isNoRefresh = yes, isExternal = yes}; /* open cursor on VNCSTY01*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0   /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100 /* or none found,*/
  )                              /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCSTY01";
    NK0BW-LRG-NBR = VNCSTY01.NL-CLM-ID;
    NK0BW-IND = " ";
    NK0BW-SML-NBR = 0;
    TA1REC.TA1TBLKE = NK0BW01.NK0BW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
  ;
   /* Open cursor for Vncsty01*/
  ;
  call "IO6470" ("C1", SQLCA, VNCSTY01) {isNoRefresh = yes, isExternal = yes}; /* open cursor on VNCSTY01*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCSTY01";
    NK0BW-LRG-NBR = VNCSTY01.NL-CLM-ID;
    NK0BW-IND = " ";
    NK0BW-SML-NBR = 0;
    TA1REC.TA1TBLKE = NK0BW01.NK0BW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
  NKWREC.XGPCD = VNCSTY01.XGPCD;
end // end NK0BS-SEL-VNCSTY01

// Get next claim id
Function NK0BS-SEL-VNLCTL01()
   /* *****************************************************/
   /* Get the next claim id and update control record*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0BS-GET-VNLCTL01";
  ;
   /* Get claim number*/
  ;
  call "IO4300" ("U6", SQLCA, VNLCTL01) {isNoRefresh = yes, isExternal = yes}; /* open cursor on defect*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0) /* if a good return,*/
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNLCTL01";
    XPNL005(); /* abort routine*/
  end
  ;
end // end NK0BS-SEL-VNLCTL01

// Select from the VNLGLA01 table
Function NK0BS-SEL-VNLGLA01()
   /* *****************************************************/
   /* Select GL code from gl table*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0B-SEL-VNLGLA01";
  ;
  VNLGLA01.GLAENT = NK0BM100.GLAENT;
  VNLGLA01.GLARCID = NK0BM100.GLARCID;
  VNLGLA01.GLANTAC = NK0BM100.GLANTAC;
  VNLGLA01.GLASUB = NK0BM100.GLASUB;
  VNLGLA01.GLAPRJ = NK0BM100.GLAPRJ;
  ;
   /* select unique - vnlgla01 - International GL account validation tbl*/
  ;
  call "IO4610" ("S ", SQLCA, VNLGLA01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if a good return,*/
      set NK0BM100.XGPCD bold, modified, cursor;
      converseLib.validationFailed(384);
      NLXREC.NLXERRF = "Y";
    else
      TA1REC.TA1DBASE = "DNILO";
      TA1REC.TA1TBLVU = "VNLGLA01";
      TA1REC.TA1TBLKE = NIJGROUP;
      XPNL005(); /* Intnational abend routine*/
    end
  end
  ;
end // end NK0BS-SEL-VNLGLA01

// Select profitablility table
Function NK0BS-SEL-VPFHDR01()
  /* ************************************************************************/
  /* Select from the profitability table*/
  /* ************************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0BS-SEL-VPFHDR01";
  ;
   /* select first on dprof.vpfhdr01*/
  ;
  VINTGL02.XAUCD = " ";
  VINTGL02.KUCCOID = NK0BM100.OP1CMPNB;
  VINTGL02.KUMSTRID = 0;
  VINTGL02.XNXCD = 0;
  ;
   /* select unique vintgl02*/
  ;
  call "VINTGL02" ("SF", SQLCA, VINTGL02) {isNoRefresh = yes, isExternal = yes};
  ;
  XXXMSG = " ";
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    NK0BS-S-VGCOA001(); /* get the old gl-accont-id*/
    GLAREC.GLAENT = VGCOA001.GL-ENTITY-ID;
    GLAREC.GLARCID = VGCOA001.GL-RSP-CTR-ID;
    GLAREC.GLANTAC = VGCOA001.GL-NATRL-ACCT-ID;
    GLAREC.GLASUB = VGCOA001.GL-SUB-ACCT-ID;
    GLAREC.GLAPRJ = VGCOA001.GL-PROJ-ID;
    NLXREC.GLACCT = GLAREC.GLAGRP;
    NLXREC.GLAGRP = NLXREC.NLXNLGL;
    NKW-SLS-GLAENT = NLXREC.GLAENT; /* save line itm comp gl*/
    NKW-SLS-GLARCID = NLXREC.GLARCID;
    NKW-SLS-GLANTAC = NLXREC.GLANTAC;
    NKW-SLS-GLASUB = NLXREC.GLASUB;
    NKW-SLS-GLAPRJ = NLXREC.GLAPRJ;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      /* profitability row not found*/
      set NK0BM100.OP1CMPNB cursor, modified, bold;
      converseLib.validationFailed(176); /* invalid comp nbr.*/
      NLXREC.NLXERRF = "Y";
    else
      TA1REC.TA1LOCAT[2] = "SF     "; /* database action*/
      TA1REC.TA1LOCAT[3] = "VINTGL02 "; /* io module*/
      TA1REC.TA1DBASE = "DPROFT"; /* database*/
      TA1REC.TA1TBLVU = "VINTGL02"; /* table view*/
      NK0BW-LRG-NBR = VINTGL02.KUCCOID;
      TA1REC.TA1TBLKE = NK0BW-KEY;
      XPNL005(); /* abort routine*/
    end
  end
  ;
end // end NK0BS-SEL-VPFHDR01

// Select company row
Function NK0BS-SEL-VRCVGL01()
   /* *****************************************************/
   /* Select receivable G/L code*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0BS-SEL-VRCVGL01";
  ;
   /* select first on DNILO.VRCVGL01*/
  ;
  VRCVGL01.ZARCD = VDSTRB01.ZARCD;
  if (KUCREC.XAUCD == "31")
    VRCVGL01.ZRTCD = "IC";
  else
    VRCVGL01.ZRTCD = "TR";
  end
  ;
  call "IO4530" ("SF", SQLCA, VRCVGL01) {isNoRefresh = yes, isExternal = yes}; /* open cursor on defect*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VRCVGL01";
    TA1REC.TA1TBLKE = NIIGROUP;
    XPNL005(); /* abort routine*/
  end
  ;
end // end NK0BS-SEL-VRCVGL01

// Select store row
Function NK0BS-SEL-VSTORE01()
   /* *****************************************************/
   /* Select store*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0BS-SEL-VSTORE1";
  ;
   /* select for VSTORE01*/
  ;
  KUMREC.KUCCOID = NKWREC.KUCCOID;
  KUMREC.KUMSTRID = NKWREC.KUMSTRID;
  ;
  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes}; /* Read store*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    NKWREC.KUCCONM = KUMREC.KUMSTRNM;
  else
    TA1REC.TA1DBASE = "DCUST";
    TA1REC.TA1TBLVU = "VSTORE01";
    NK0BW-LRG-NBR = KUMREC.KUCCOID;
    NK0BW-SML-NBR = KUMREC.KUMSTRID;
    TA1REC.TA1TBLKE = NK0BW01.NK0BW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
end // end NK0BS-SEL-VSTORE01

// Select unique on VSUMCD01
Function NK0BS-SEL-VSUMCD01()
   /* *****************************************************/
   /* Select unique on the sumcd table*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0BS-SEL-VSUMCD01";
  ;
   /* Select VSUMCD01*/
  ;
  call "IO2640" ("S ", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes}; /* select on sumcode*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCORP";
    TA1REC.TA1TBLVU = "VSUMCD01";
    TA1REC.TA1TBLKE = YSMGRP;
    XPNL005(); /* abort routine*/
  end
  ;
end // end NK0BS-SEL-VSUMCD01

// Read large address table
Function NK0BS-SEL-VXGP0001()
   /* *****************************************************/
   /* Select first defect row to get gpc*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0BS-SEL-XGPCD";
  ;
  if (VNCHDR01.XXX-SUM-ZCR-CD == "DF")
    VNCDEF01.NL-CLM-ID = NKWREC.NL-CLM-ID;
    NK0BS-SEL-VNCDEF01();
  else
    VNCSTY01.NL-CLM-ID = NKWREC.NL-CLM-ID;
    NK0BS-SEL-VNCSTY01();
  end
  ;
   /* Open cursor for VNCDEF01*/
  ;
  call "IO6480" ("S1", SQLCA, VNCDEF01) {isNoRefresh = yes, isExternal = yes}; /* open cursor on defect*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCDEF01";
    NK0BW-LRG-NBR = VNCDEF01.NL-CLM-ID;
    NK0BW-IND = " ";
    NK0BW-SML-NBR = 0;
    TA1REC.TA1TBLKE = NK0BW01.NK0BW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
end // end NK0BS-SEL-VXGP0001

// Set map to inquiry mode
Function NK0BS-SET-INQ-MODE()
   /* *****************************************************/
   /* Set map to an inquiry mode*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0BS-SET-INQ-MODE";
  ;
  set NK0BM100.ZCR-CLM-RSN-CD skip;
  set NK0BM100.OP1CMPNB skip;
  set NK0BM100.XGPCD skip;
  set NK0BM100.NK0BM-NLAADRID skip;
  set NK0BM100.NL-CLM-COMNT skip;
  set NK0BM100.IVC-ORD-REF-NUM skip;
  set NK0BM100.CATOAP cursor;
  set NK0BM100.XGPCD skip;
  if (CACLVL[4] == "N")
    set NK0BM100.NK0BM-DIS-NIAGLPMO skip;
  end
  ;
  ;
end // end NK0BS-SET-INQ-MODE

// Update claim comment
Function NK0BS-SET-IVCORD()
   /* *****************************************************/
   /* Update claim reference comment*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0BS-SET-IVCORD";
  ;
   /* update - VNCCOM01*/
  ;
  VNCCOM01.NL-CLM-COMNT-IND = "O";
  NL-CLM-COMNT-NBR = 10;
  ;
   /* select unique - NLAREC*/
  ;
  call "IO6500" ("S ", SQLCA, VNCCOM01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    VNCCOM01.ZZZCHGDT = XX0XW01.XX0XWDAT;
    VNCCOM01.ZZZCHGTM = XX0XW01.XX0XWTIM;
    VNCCOM01.NL-CLM-COMNT = NK0BM100.IVC-ORD-REF-NUM;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      NK0BS-BLD-IVCORD();
      return;
    else
      TA1REC.TA1DBASE = "DNILO";
      TA1REC.TA1TBLVU = "VNCCOM01";
      NK0BW-LRG-NBR = VNCCOM01.NL-CLM-ID;
      NK0BW-IND = VNCCOM01.NL-CLM-COMNT-IND;
      NK0BW-SML-NBR = VNCCOM01.NL-CLM-COMNT-NBR;
      TA1REC.TA1TBLKE = NK0BW01.NK0BW-KEY;
      XPNL005(); /* abort routine*/
    end
  end
  ;
  call "IO6500" ("U ", SQLCA, VNCCOM01) {isNoRefresh = yes, isExternal = yes}; /* update claim comment*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCCOM01";
    NK0BW-LRG-NBR = VNCCOM01.NL-CLM-ID;
    NK0BW-IND = VNCCOM01.NL-CLM-COMNT-IND;
    NK0BW-SML-NBR = VNCCOM01.NL-CLM-COMNT-NBR;
    TA1REC.TA1TBLKE = NK0BW01.NK0BW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
end // end NK0BS-SET-IVCORD

// Set map modify field flags
Function NK0BS-SET-MOD-FLAG()
   /* *****************************************************/
   /* Set map modify field flags*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0B-SET-MOD-FLAG";
  ;
  if (NK0BM100.IVC-ORD-REF-NUM is modified)
    NK0BW-IVCORD-MOD-FLAG = "Y";
  end
  if (NK0BM100.NL-CLM-COMNT is modified)
    NK0BW-COM-MOD-FLAG = "Y";
  end
  if (NK0BM100.ZCR-CLM-RSN-CD is modified)
    NK0BW-ZCR-MOD-FLAG = "Y";
  end
  if (NK0BM100.NK0BM-NLAADRID is modified)
    NK0BW-ADD-MOD-FLAG = "Y";
  end
  if (NK0BM100.XGPCD is modified)
    NK0BW-XGP-MOD-FLAG = "Y";
    if (NKWREC.XXX-SUM-ZCR-CD == "MI"
     && NK0BM100.GLAENT > " ")
      NK0BW-GL-MOD-FLAG = "Y";
    end
  end
  if (NK0BM100.OP1CMPNB is modified)
    set NK0BM100.OP1CMPNB initialAttributes;
    NK0BW-OP1-MOD-FLAG = "Y";
  end
  if (NK0BM100.NK0BM-DIS-NIAGLPMO is modified)
    set NK0BM100.NK0BM-DIS-NIAGLPMO initialAttributes;
    NK0BW-GLPMO-MOD-FLAG = "Y";
  end
  ;
end // end NK0BS-SET-MOD-FLAG

// Update claim comment
Function NK0BS-SET-VNCCOM01()
   /* *****************************************************/
   /* Update claim reference comment*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0BS-SET-VNCCOM01";
  ;
   /* update - VNCCOM01*/
  ;
  VNCCOM01.NL-CLM-COMNT-IND = "R";
  NL-CLM-COMNT-NBR = 10;
  ;
   /* select unique - NLAREC*/
  ;
  call "IO6500" ("S ", SQLCA, VNCCOM01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    VNCCOM01.ZZZCHGDT = XX0XW01.XX0XWDAT;
    VNCCOM01.ZZZCHGTM = XX0XW01.XX0XWTIM;
    VNCCOM01.NL-CLM-COMNT = NK0BM100.NL-CLM-COMNT;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      NK0BS-BLD-VNCCOM01();
      return;
    else
      TA1REC.TA1DBASE = "DNILO";
      TA1REC.TA1TBLVU = "VNCCOM01";
      NK0BW-LRG-NBR = VNCCOM01.NL-CLM-ID;
      NK0BW-IND = VNCCOM01.NL-CLM-COMNT-IND;
      NK0BW-SML-NBR = VNCCOM01.NL-CLM-COMNT-NBR;
      TA1REC.TA1TBLKE = NK0BW01.NK0BW-KEY;
      XPNL005(); /* abort routine*/
    end
  end
  ;
  call "IO6500" ("U ", SQLCA, VNCCOM01) {isNoRefresh = yes, isExternal = yes}; /* update claim comment*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCCOM01";
    NK0BW-LRG-NBR = VNCCOM01.NL-CLM-ID;
    NK0BW-IND = VNCCOM01.NL-CLM-COMNT-IND;
    NK0BW-SML-NBR = VNCCOM01.NL-CLM-COMNT-NBR;
    TA1REC.TA1TBLKE = NK0BW01.NK0BW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
end // end NK0BS-SET-VNCCOM01

// Update International claim hdr
Function NK0BS-SET-VNCHDR01()
   /* *****************************************************/
   /* update claim header*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0BS-SET-VNCHDR01";
  ;
   /* update unique - VNCHDR01*/
  ;
  call "IO6460" ("U ", SQLCA, VNCHDR01) {isNoRefresh = yes, isExternal = yes}; /* update claim hdr*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    converseLib.validationFailed(294);
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCHDR01";
    NK0BW-LRG-NBR = VNCHDR01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0BW01.NK0BW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
end // end NK0BS-SET-VNCHDR01

// Select company row
Function NK0BS-UPDATE-CLAIM()
   /* *****************************************************/
   /* Update the claim.*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0BS-UPDATE-CLAIM";
  ;
  move NK0BM-NLAADRID to NK0BW-CHR-NLAADRID withV60Compat;
  ;
   /* If header field changed, update the database.*/
  ;
  if (VNCHDR01.NLAADRID != NK0BW-NUM-NLAADRID
   || NK0BM100.ZCR-CLM-RSN-CD != VNCHDR01.ZCR-CLM-RSN-CD
   || NK0BM100.ZCS-CLM-STAT-CD != VNCHDR01.ZCS-CLM-STAT-CD
   /* *OR NK0BW-CHAR-POST-DATE NE NK0BW-DISPLAY-POST-DATE;*/
   || NK0BM100.GLAENT != VNCHDR01.GLAENT
   || NK0BM100.GLARCID != VNCHDR01.GLARCID
   || NK0BM100.GLANTAC != VNCHDR01.GLANTAC
   || NK0BM100.GLASUB != VNCHDR01.GLASUB
   || NK0BM100.GLAPRJ != VNCHDR01.GLAPRJ
   || NK0BM100.OP1CMPNB != VNCHDR01.OP1CMPNB)
    XX0XS01();
    if (NK0BW-GLPMO-MOD-FLAG == "Y")
      NK0BW-FULL-POST-DATE = XX0XW01.XX0XWDAT;
      move NK0BM-DIS-NIAGLPMO to NK0BW-DISPLAY-POST-DATE withV60Compat;
      move NK0BW-DISPLAY-POST-MONTH to NK0BW-POST-MONTH withV60Compat;
      move NK0BW-DISPLAY-POST-YEAR to NK0BW-POST-YEAR withV60Compat;
      VNCHDR01.NIAGLPMO = NK0BW-FULL-POST-DATE;
    end
    if (NK0BW-OP1-MOD-FLAG == "Y")
      VNCHDR01.OP1CMPNB = NK0BM100.OP1CMPNB;
    end
    VNCHDR01.NLAADRID = NK0BW-NUM-NLAADRID;
    VNCHDR01.NLAADRID = NK0BW-NUM-NLAADRID;
    VNCHDR01.ZCR-CLM-RSN-CD = NK0BM100.ZCR-CLM-RSN-CD;
    VNCHDR01.ZCS-CLM-STAT-CD = NK0BM100.ZCS-CLM-STAT-CD;
    VNCHDR01.GLAENT = NK0BM100.GLAENT;
    VNCHDR01.GLARCID = NK0BM100.GLARCID;
    VNCHDR01.GLANTAC = NK0BM100.GLANTAC;
    VNCHDR01.GLASUB = NK0BM100.GLASUB;
    VNCHDR01.GLAPRJ = NK0BM100.GLAPRJ;
    VNCHDR01.ZZZCHGDT = XX0XW01.XX0XWDAT;
    VNCHDR01.ZZZCHGTM = XX0XW01.XX0XWTIM;
    NK0BS-SET-VNCHDR01();
  end
  ;
   /* If reference comment changed, update the database.*/
  ;
  if (NK0BW-COM-MOD-FLAG == "Y")
    XX0XS01();
    VNCCOM01.NL-CLM-COMNT = NK0BM100.NL-CLM-COMNT;
    VNCCOM01.ZZZCHGDT = XX0XW01.XX0XWDAT;
    VNCCOM01.ZZZCHGTM = XX0XW01.XX0XWTIM;
    NK0BS-SET-VNCCOM01(); /* update claim comment*/
  end
  ;
  if (NK0BW-IVCORD-MOD-FLAG == "Y")
    XX0XS01();
    VNCCOM01.NL-CLM-COMNT = NK0BM100.IVC-ORD-REF-NUM;
    VNCCOM01.ZZZCHGDT = XX0XW01.XX0XWDAT;
    VNCCOM01.ZZZCHGTM = XX0XW01.XX0XWTIM;
    NK0BS-SET-IVCORD(); /* update claim comment*/
  end
  ;
end // end NK0BS-UPDATE-CLAIM

// Update the claim header
Function NK0BS-VOID-CLAIM()
   /* *****************************************************************/
   /* This will update the claim header with the new claim balance.*/
   /* *****************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0BS-VOID-CLAIM";
  ;
  VNCHDR01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  ;
   /* select on - VNCHDR01*/
  ;
  call "IO6460" ("S ", SQLCA, VNCHDR01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCHDR01";
    NK0BW-LRG-NBR = VNCHDR01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0BW01.NK0BW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
  VNCHDR01.ZCS-CLM-STAT-CD = "VD"; /* Move void to status code*/
  VNCHDR01.XXX-USER-ID4 = COMMAREA.CAUSERID;
  ;
  XX0XS01(); /* get current date and time for*/
                                  /* zz-change-faimly*/
  VNCHDR01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VNCHDR01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  call "IO6460" ("U ", SQLCA, VNCHDR01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    NKWREC.ZCS-CLM-STAT-CD = VNCHDR01.ZCS-CLM-STAT-CD;
    NK0BM100.ZCS-CLM-STAT-CD = VNCHDR01.ZCS-CLM-STAT-CD;
    if (VNCHDR01.ZCS-CLM-STAT-CD in ZCSTBL.ZCS-CLM-STAT-CD)
      NK0BM100.ZCS-CLM-STAT-DESC = ZCSTBL.ZCS-CLM-STAT-DESC[sysVar.arrayIndex];
    end
    NKWREC.ZCS-CLM-STAT-DESC = NK0BM100.ZCS-CLM-STAT-DESC;
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if a table changed;*/
      converseLib.validationFailed(313);
      NLXREC.NLXERRF = "Y";
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      return;
    else
      TA1REC.TA1DBASE = "DNILO";
      TA1REC.TA1TBLVU = "VNCHDR01";
      NK0BW-LRG-NBR = VNCHDR01.NL-CLM-ID;
      TA1REC.TA1TBLKE = NK0BW01.NK0BW-KEY;
      XPNL005(); /* abort routine*/
    end
  end
  ;
  ;
end // end NK0BS-VOID-CLAIM

//*** RECORD=NK0BW01 ****
// ********** NK0B APPLICATION WORKING STORAGE RECORD *********
// Maintenence log.
// Kshaw     05/10/93  Added clm-stat-desc-dt
//                     Added clm-stat-desc
//                     Added clm-stat-dt
// ***********************
Record NK0BW01 type basicRecord
  5 NK0BW-GROUP NK0BW-GROUP ; 
    10 NK0BW-FULL-POST-DATE NK0BW-FULL-POST-DATE ; 
      15 * num(3) ; // Filler
      15 NK0BW-POST-YEAR NK0BW-POST-YEAR ; 
      15 NK0BW-POST-MONTH NK0BW-POST-MONTH ; 
      15 * num(2) ; // Filler
    10 NK0BW-DISPLAY-POST-DATE NK0BW-DISPLAY-POST-DATE ; 
      15 NK0BW-DISPLAY-POST-MONTH NK0BW-DISPLAY-POST-MONTH ; 
      15 NK0BW-DISPLAY-DASH NK0BW-DISPLAY-DASH ; 
      15 NK0BW-DISPLAY-POST-YEAR NK0BW-DISPLAY-POST-YEAR ; 
    10 XATCD XATCD ; 
    10 NK0BW-KEY NK0BW-KEY ; 
      15 NK0BW-LRG-NBR NK0BW-LRG-NBR ; 
      15 * char(1) ; // Filler
      15 NK0BW-IND NK0BW-IND ; 
      15 * char(1) ; // Filler
      15 NK0BW-SML-NBR NK0BW-SML-NBR ; 
    10 NK0BW-ADDR-POP-UP-DONE NK0BW-ADDR-POP-UP-DONE ; 
    10 NK0BW-ADDR-CNT NK0BW-ADDR-CNT ; 
    10 NK0BW-ADDR-INX NK0BW-ADDR-INX ; 
    10 NK0BW-ADDR-ID NK0BW-ADDR-ID [200] ; 
    10 NK0BW-LAST-PAGE NK0BW-LAST-PAGE ; 
    10 NK0BW-MAP-INX NK0BW-MAP-INX ; 
    10 NK0BW-NUM-NLAADRID NK0BW-NUM-NLAADRID ; 
      15 NK0BW-CHR-NLAADRID NK0BW-CHR-NLAADRID ; 
        20 NK0BW-CHR-PARTS NK0BW-CHR-PARTS [3] ; 
    10 NK0BW-MAX-PAGE NK0BW-MAX-PAGE ; 
    10 NK0BW-CUR-PAGE NK0BW-CUR-PAGE ; 
    10 NK0BW-MOD-FLAGS NK0BW-MOD-FLAGS ; 
      15 NK0BW-ZCR-MOD-FLAG NK0BW-ZCR-MOD-FLAG ; 
      15 NK0BW-COM-MOD-FLAG NK0BW-COM-MOD-FLAG ; 
      15 NK0BW-XGP-MOD-FLAG NK0BW-XGP-MOD-FLAG ; 
      15 NK0BW-ADD-MOD-FLAG NK0BW-ADD-MOD-FLAG ; 
      15 NK0BW-OP1-MOD-FLAG NK0BW-OP1-MOD-FLAG ; 
      15 NK0BW-GL-MOD-FLAG NK0BW-GL-MOD-FLAG ; 
      15 NK0BW-GLPMO-MOD-FLAG NK0BW-GLPMO-MOD-FLAG ; 
      15 NK0BW-IVCORD-MOD-FLAG NK0BW-IVCORD-MOD-FLAG ; 
    10 NK0BW-PF19-FLAG NK0BW-PF19-FLAG ; 
    10 NK0BW-IVC-BAL NK0BW-IVC-BAL ; 
    10 NK0BW-PF9-CNFM-FLAG NK0BW-PF9-CNFM-FLAG ; 
    10 NK0BW-CHAR-POST-DATE NK0BW-CHAR-POST-DATE ; 
      15 NK0BW-CHAR-POST-MONTH NK0BW-CHAR-POST-MONTH ; 
      15 NK0BW-CHAR-DASH NK0BW-CHAR-DASH ; 
      15 NK0BW-CHAR-POST-YEAR NK0BW-CHAR-POST-YEAR ; 
    10 NK0BW-CLM-STAT-DESC-DT char(16) ; 
      15 NK0BW-CLM-STAT-DESC NK0BW-CLM-STAT-DESC ; 
      15 NK0BW-CLM-STAT-SEP NK0BW-CLM-STAT-SEP ; 
      15 NK0BW-CLM-STAT-CHG-DT NK0BW-CLM-STAT-CHG-DT ; 
  5 NK0BW-GCOA-MESSAGE NK0BW-GCOA-MESSAGE ; 
    10 NK0BW-GCOA-TEXT NK0BW-GCOA-TEXT ; 
    10 NK0BW-GCOA-KEY NK0BW-GCOA-KEY ; 
  5 NK0BW-GCOA-FLAG NK0BW-GCOA-FLAG ; 
end // end NK0BW01

// nl-addr-id modified flag
DataItem NK0BW-ADD-MOD-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Count of address ids in arrary
DataItem NK0BW-ADDR-CNT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Address indicator
DataItem NK0BW-ADDR-ID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Address arrary index
DataItem NK0BW-ADDR-INX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Flag showes address popup done
DataItem NK0BW-ADDR-POP-UP-DONE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Always '-'
DataItem NK0BW-CHAR-DASH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Character only post date
DataItem NK0BW-CHAR-POST-DATE char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Character only GL post month
DataItem NK0BW-CHAR-POST-MONTH char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Character only GL post year
DataItem NK0BW-CHAR-POST-YEAR char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Address id character 3 bytes
DataItem NK0BW-CHR-NLAADRID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Address id parts
DataItem NK0BW-CHR-PARTS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NK0BW-CLM-STAT-CHG-DT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NK0BW-CLM-STAT-DESC char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NK0BW-CLM-STAT-SEP char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nl-clm-comnt modified flag
DataItem NK0BW-COM-MOD-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// current page number
DataItem NK0BW-CUR-PAGE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Always '-'
DataItem NK0BW-DISPLAY-DASH char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Display GL post date
DataItem NK0BW-DISPLAY-POST-DATE char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Display GL post month
DataItem NK0BW-DISPLAY-POST-MONTH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Display GL post year
DataItem NK0BW-DISPLAY-POST-YEAR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Full size GL post monthe date
DataItem NK0BW-FULL-POST-DATE num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// gcoa flag
DataItem NK0BW-GCOA-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// ga-glbl-acct-id key
DataItem NK0BW-GCOA-KEY char(42)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Key error on vgcoa001 table
DataItem NK0BW-GCOA-MESSAGE char(60)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// table name description
DataItem NK0BW-GCOA-TEXT char(18)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// gl code    modified flag
DataItem NK0BW-GL-MOD-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// gl po mo mod flag
DataItem NK0BW-GLPMO-MOD-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NK0BW-GROUP char(894)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Comment type indicator
DataItem NK0BW-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Balance of invoice item
DataItem NK0BW-IVC-BAL num(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Ivcoice/Order # Mod flag
DataItem NK0BW-IVCORD-MOD-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Comment Error Key
DataItem NK0BW-KEY char(16)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Max address id in arrary
DataItem NK0BW-LAST-PAGE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Comment claim number
DataItem NK0BW-LRG-NBR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Map index
DataItem NK0BW-MAP-INX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// last page number
DataItem NK0BW-MAX-PAGE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NK0BW-MOD-FLAGS char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Address id numberic 3 bytes
DataItem NK0BW-NUM-NLAADRID num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// comp num   modified flag
DataItem NK0BW-OP1-MOD-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PF19 last key pressed
DataItem NK0BW-PF19-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// PF19 last key pressed
DataItem NK0BW-PF9-CNFM-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Posting month
DataItem NK0BW-POST-MONTH num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Posting year
DataItem NK0BW-POST-YEAR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Comment sequence number
DataItem NK0BW-SML-NBR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// xgp-gpc-cd modified flag
DataItem NK0BW-XGP-MOD-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// zcr-clm-rsn-cd modified flag
DataItem NK0BW-ZCR-MOD-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

