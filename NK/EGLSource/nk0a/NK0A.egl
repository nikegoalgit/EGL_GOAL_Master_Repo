package nk0a;

import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom2.YSMREC;
import corpcom3.XPNL001;
import corpcom3.XPNL002;
import corpcom3.XPNL004;
import corpcom3.XPNL005;
import corpcom3.XPXGP01;
import corpcom3.XPXX001;
import corpcom3.XPZCR01;
import corpcom4.XSENTRY;
import corpcom4.XSNKS-MAP-MODE;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XCLTBL;
import corpx1.XCTTBL;
import corpx1.XDMTBL;
import corpx1.XGPTBL;
import corpx1.XLATBL;
import corpx1.XOBTBL;
import corpx1.XOCTBL;
import corpx1.XQATBL;
import corpz3.ZCRTBL;
import corpz3.ZCSTBL;
import corpz3.ZDTTBL;
import corpz3.ZPSTBL;
import ku.common.KUCREC;
import ku.common.KUMREC;
import nk.common.NK1TBL;
import nk.common.NKWREC;
import nl.common.*;
import op.common.OP1REC;
import pg.common.PG2REC;
import sy.common.SY1REC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import vv.common.VMIHDR01;
import vv.common.VNCHDR01;
import vv.common.VNCIVX01;
import vv.common.VNLIVX01;
import vv.common.VPIHDR01;
//*** PROGRAM=NK0A ****
// ************************************************************
// 
//   NK0A - International Claims Create/Inquiry/Maintenance
//   ------------------------------------------------------
// 
// General program explanation and notes:
// 
// 
//   This application allows the users to start the claims
// create process, identity a claim for inquiry or maintenance,
// enter selection criteria for a claims selection list, or
// start the approval list create process. The application will
// have two screens. The first screen will be used to enter a
// claim id for inquiry and maintenance, enter a customer id
// and claim type to create a claim, or process a PF key
// function. The second screen will be used for the entry of
// claims selection criteria to be used to create a claims
// selection list.
// ------------------------------------------------------------
// Maintenance History:
// --------------------
//   Date   Who    Remarks
// -------- ------ --------------------------------------------
// 08-31-92 jjudki new application.
// 04-12-93 dkingm Return to calling screen a100 or a200
//                 And allow selection criteria for approval
//                 function pf17.
// 05-28-93 dkingm Fix problem of fast path to NK0A Abend
// 07-28-93 KSHAW  Changed invoice edit to use vncivx01.
// 10-15-93 JJUDKI Change nk0a-001 to check cafrmsys eq 'nk'.
// 11-15-93 JJUDKI recompile for db changes.
// 03-08-94 KSHAW  March database changes
// 02-17-97 TTHAN1 Y2KFIX - CHANGE NK0A-220 TO REMOVE HARD CODE
//                 MOVE '019'.
// *********************
Program NK0A type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "NL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  KUMREC KUMREC; // record
  NK0AW01 NK0AW01; // record
  NKWREC NKWREC; // record
  NLXREC NLXREC; // record
  OP1REC OP1REC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  VMIHDR01 VMIHDR01; // record
  VNCHDR01 VNCHDR01; // record
  VNCIVX01 VNCIVX01; // record
  VNLIVX01 VNLIVX01; // record
  VPIHDR01 VPIHDR01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCLTBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use XDMTBL {deleteAfterUse = yes}; // table
  use XGPTBL {deleteAfterUse = yes}; // table
  use XLATBL {deleteAfterUse = yes}; // table
  use XOCTBL {deleteAfterUse = yes}; // table
  use XOBTBL {deleteAfterUse = yes}; // table
  use NK1TBL {deleteAfterUse = yes}; // table
  use XQATBL {deleteAfterUse = yes}; // table
  use ZCRTBL {deleteAfterUse = yes}; // table
  use ZCSTBL {deleteAfterUse = yes}; // table
  use ZDTTBL {deleteAfterUse = yes}; // table
  use ZPSTBL {deleteAfterUse = yes}; // table
  use NK0AM.NK0AM100,  // forms
      NK0AM.NK0AM200, 
      NK0AM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    NK0A-000: NK0A-000();
    exit program;
  end // end main
end // end NK0A

// Application main logic
Function NK0A-000()
   /* -----------------------------------------------------------*/
      /* This is the "main logic" for the application.*/

      /* xsentry checks to ensure that this application was*/
            /* entered from another csp application.*/

   /* -----------------------------------------------------------*/

  NLXREC.NLXCPROC = "NK0A-000";

  NK0A-001(); /* Initialize the application*/

  NLXREC.NLXEOAF = "N"; /* set end-of-application flag to 'no'*/

  while (NLXREC.NLXEOAF == "N") /* while not end-of-aplication*/
    NK0A-050(); /* screen branch control*/
  end

  XSPF4();

end // end NK0A-000

// Initialize application
Function NK0A-001()
   /* -----------------------------------------------------------*/
         /* Initialize the application working storage*/

   /* -----------------------------------------------------------*/

  NLXREC.NLXCPROC = "NK0A-001";

  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen*/
                                   /* converse*/
  VGVar.handleHardIOErrors = 1; /* return control to program if hard db2*/
                                   /* error*/

  XSENTRY(); /* check entry thru main menu*/
  XSSEGTR(); /* set segmented transaction id*/

  set SQLCA empty; /* clear out the "common" working*/
                                   /* storage*/
  set ERRSQLCA empty; /* clear out the "common" working*/
                                   /* storage*/
  set TA1REC empty; /* clear out the "common" working*/
                                   /* storage*/
  set NLXREC empty; /* clear out the "common" working*/
                                   /* storage*/
  set NK0AW01 empty;
  set KUCREC empty;
  set KUMREC empty;
  set VNLIVX01 empty;
  set PG2REC empty;
  set SY1REC empty;
  set YSMREC empty;
  set VNCHDR01 empty;


  if (COMMAREA.CAFRMSYS != "NK")
    COMMAREA.CAUSERA = " ";
  end

  NLXREC.NLXEOAF = "N"; /* set end-of-application flag 'no'*/
  NLXREC.NLXERRF = "N"; /* set error-flag to 'no'*/

   /* ------------------------------------------------------*/
    /* Set up working-storage array of screen names*/
   /* ------------------------------------------------------*/

  NLXREC.NLXCSCRN = "NK0AM100"; /* first header*/

  NLXREC.NLXSNAME[1] = "NK0AM100";
                                   /* init screens used in this applic.*/
  NLXREC.NLXSNAME[2] = "NK0AM200";
  NLXREC.NLXSNAME[3] = "NK0AM300";

   /* **********************************************/
   /* Was this application entered via 'fastpath'?*/
   /* **********************************************/

  if (COMMAREA.CAITEM != " ") /* 'Item' will be non-blank if fastpath*/

    XPNL004(); /* Validate caitem numeric*/

    if (NLXREC.NLXERRF == "Y") /* If error in 'item'*/
      set NKWREC empty;
      NKWREC.NKW-MSG-NBR = 98; /* Invalid Data Item Sent*/
      converseLib.validationFailed(98);
      NLXREC.NLXCSCRN = "NK0AM200"; /* Display Edit Error*/
    else
      if (COMMAREA.CAFROMAP == "NK0F"
       && NKW-FROM-APP != "A100")
        KUCREC.KUCCOID = NLXREC.NLXNUM8A;
        NK0AS-SEL-CUST();
        if (SQLCA.VAGen_SQLCODE == 0)
          set NKWREC empty;
          NKWREC.NKW-SEL-KUCCOID = KUCREC.KUCCOID;
          NLXREC.NLXCSCRN = "NK0AM200"; /* Go To Map 200*/
        else
          set NKWREC empty;
          NKWREC.NKW-MSG-NBR = 98; /* Invalid Data In Item*/
          converseLib.validationFailed(98);
          NLXREC.NLXCSCRN = "NK0AM200"; /* Go To Map 200*/
        end
      else
        VNCHDR01.NL-CLM-ID = NLXREC.NLXNUM8A;
        NK0AS-SEL-VNCHDR01(); /* Select unique Claim Id*/
        if (SQLCA.VAGen_SQLCODE == 100)
          NLXREC.NLXERRF = "Y";
          NKWREC.NKW-MSG-NBR = 289; /* Claim Id Not Found*/
        end
        NKWREC.NL-CLM-ID = NLXREC.NLXNUM8A;
        if (SQLCA.VAGen_SQLCODE == 0)
          COMMAREA.CAUSERA = " ";
          COMMAREA.CATOAP = "NK0B"; /* Claim Header Information*/
          XPNL002();
          return;
        end
      end

    end

    COMMAREA.CATOAP = " "; /* Clear commarea*/
    COMMAREA.CAITEM = " ";

  else /* Normal function key transfer in*/
    if (COMMAREA.CAUSERA != " ")
      NKWREC.NKW-GROUP = COMMAREA.CAUSERA;

      if (NKWREC.NKW-MSG-NBR > 0
       && COMMAREA.CAFRMSYS == "NK")
        NLXREC.NLXERRF = "Y";
        NLXREC.NLXCSCRN = "NK0AM100";
        return;
      end

    end
  end

  if (COMMAREA.CAFROMAP == "NK0F"
   && NKW-FROM-APP == "A200")
    NLXREC.NLXCSCRN = "NK0AM200";
  else
    set NKWREC empty;
  end


end // end NK0A-001

// Screen branch control
Function NK0A-050()
   /* -----------------------------------------------------------*/
      /* Control process the application screen(s)*/

     /* Note that this process is being performed in a*/
     /* "while loop" until the end-of-application flag is set*/
     /* to 'y'.*/

   /* -----------------------------------------------------------*/

  NLXREC.NLXCPROC = "NK0A-050"; /* set current process name*/

  sysVar.arrayIndex = 0;
  NLXREC.NLXSCRNX = 0;

  if (NLXREC.NLXCSCRN in NLXREC.NLXSNAME)
     /* if current-screen-name is in the screen-array, then set*/
     /* the screen-index*/
    NLXREC.NLXSCRNX = sysVar.arrayIndex;
  end
  XSNKS-MAP-MODE(); /* Common routine to set map mode*/

  NLXREC.NLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
  NLXREC.NLXBLDSC = "Y"; /* set build screen flag to 'yes'*/
  NLXREC.NLXERRF = "N"; /* clear error flag*/

  if (NKW-MSG-NBR > 0)
    if (NKW-MSG-NBR == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(NKW-MSG-NBR);
    end
  else
    converseLib.validationFailed(0);
  end

  if (NLXREC.NLXSCRNX == 1) /* if screen NK0AM100*/
    while (NLXREC.NLXEOSF == "N") /* while not end-of-screen*/
      NK0A-100();
    end
  else
    if (NLXREC.NLXSCRNX == 2) /* if screen NK0AM200*/
      while (NLXREC.NLXEOSF == "N") /* while not end-of-screen*/
        NK0A-200();
      end
    end
  end


   /* at this point;*/
       /* if the end-of-application flag (nlxeoaf ) = 'n'*/
         /* the perform will return to the top of NK0%050...*/
       /* else*/
         /* the perform will auto return to NK0%000.*/


end // end NK0A-050

// header screen 1
Function NK0A-100()
   /* -----------------------------------------------------------*/
       /* Process screen NK0AM100*/

     /* note - this process is being performed in a*/
        /* "while loop" from NK0A-050 until the end-of-screen*/
        /* flag (nlxeosfl) is set to 'y'.*/

   /* -----------------------------------------------------------*/

  NLXREC.NLXCPROC = "NK0A-100";

  if (NLXREC.NLXBLDSC == "Y")
    NK0A-101();
    NLXREC.NLXBLDSC = "N";
  end

  converse NK0AM100 ;

  NK0AM100.VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";


  NK0A-110(); /* check attention identifier*/

  if (NLXREC.NLXERRF == "N") /* check for error*/
    NK0A-120(); /* process entered option*/
  end

  if (NLXREC.NLXERRF == "N") /* check for error*/
    NK0A-130(); /* determine next action...*/
  end


end // end NK0A-100

// Build screen
Function NK0A-101()
   /* **************************************/
   /* Build MAP NK0AM100                 **/
   /* **************************************/

  NLXREC.NLXCPROC = "NK0A-101";

  converseLib.clearScreen();
  set NK0AM100 initial;

  NK0AM100.XXXRVNBR = "00"; /* revision nbr*/
  NK0AM100.XXXMAPNM = "NK0AM100"; /* map name*/
  NK0AM100.XXXPRCNM = "NK0A-100"; /* process name*/
  NK0AM100.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/

  set NK0AM100.NL-CLM-ID cursor, normal; /* Claim Id*/
  set NK0AM100.KUCCOID normal; /* Customer Id*/
  set NK0AM100.KUMSTRID normal; /* Customer Store Id*/
  set NK0AM100.XXX-SUM-ZCR-CD normal; /* Claim Type*/

end // end NK0A-101

// Validate PF keys; act on some
Function NK0A-110()
   /* -----------------------------------------------------------*/
     /* Validate PF keys*/

     /* Active PF keys: 1, 3, 4, 5, 12, 17*/
   /* -----------------------------------------------------------*/

  NLXREC.NLXCPROC = "NK0A-110";

  set NK0AM100.CATOAP initialAttributes;
  set NK0AM100.CAITEM initialAttributes;

   /* ***********************************/
      /* check for fastpath option/item*/
   /* ***********************************/

  if (converseVar.eventKey is enter /* Xfer To NK0B*/
   || converseVar.eventKey is pf1   /* Help*/
   || converseVar.eventKey is pf3   /* Return To NL0A*/
   || converseVar.eventKey is pf4   /* Return To MN0M*/
   || converseVar.eventKey is pf5   /* Xfer to Map200*/
   || converseVar.eventKey is pf12  /* Edit Map Data*/
   || converseVar.eventKey is pf17) /* Check User Security, Xfer To NK0F*/
    /* next sentence*/
  else
    NLXREC.NLXERRF = "Y"; /* Set Error Flag*/
    converseLib.validationFailed(2); /* Invalid PF Key Used*/
    return;
  end

  if (NK0AM100.CATOAP != " ") /* if fastpath option entered,*/
    if (converseVar.eventKey is enter)
      COMMAREA.CATOAP = NK0AM100.CATOAP;
      COMMAREA.CAITEM = NK0AM100.CAITEM;
      COMMAREA.CAUSERA = " ";
      XPNL002(); /* exit application*/
      set NK0AM100.CATOAP cursor, bold; /* exit failed*/
      return;
    end
  end

  if (converseVar.eventKey is enter /* Valid Non-transfer PF Keys*/
   || converseVar.eventKey is pf5   /* Claim Select*/
   || converseVar.eventKey is pf12  /* Edit Only*/
   || converseVar.eventKey is pf17) /* Approval List Request*/
    return;
  end

  if (converseVar.eventKey is pf1) /* skip edit/updt, go to 'help'*/
    XSPF1();
  end

  if (converseVar.eventKey is pf3)
    NLXREC.NLXEOSF = "Y";
    COMMAREA.CATOAP = "NL0A"; /* go to previous level*/
    COMMAREA.CAUSERA = " ";
    XPNL002(); /* exit*/
  end

  if (converseVar.eventKey is pf4) /* go to master menu*/
    NLXREC.NLXEOSF = "Y";
    COMMAREA.CAUSERA = " "; /* exit*/
    XSPF4();
  end

      /* pf key not valid*/

  converseLib.validationFailed(2); /* pf key not valid*/
  NLXREC.NLXERRF = "Y"; /* mark with error*/


end // end NK0A-110

// Edit/Act on function keys
Function NK0A-120()

   /* *****************************************************/
   /* Edit Claims Screen Entries*/
   /* *****************************************************/

  NLXREC.NLXCPROC = "NK0A-120";

   /* *****************************************************/
   /* Clear Any Previous Error Indication On Key Fields*/
   /* *****************************************************/
  set NK0AM100.NL-CLM-ID cursor, normal; /* Claim Id*/
  set NK0AM100.KUCCOID normal; /* Customer Id*/
  set NK0AM100.KUMSTRID normal; /* Customer Store Id*/
  set NK0AM100.XXX-SUM-ZCR-CD normal; /* Claim Type*/

   /* Make Sure Correct Combination Was Entered*/

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf12)
    if (NK0AM100.XXX-SUM-ZCR-CD == "  " /* Claim Type Not Entered*/
     && NK0AM100.KUCCOID == "  "        /* Customer Id Not Entered*/
     && NK0AM100.NL-CLM-ID == 0)        /* Claim Id Not Entered*/
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(3); /* Please Enter An Option*/
    end
  end

  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf5
   || converseVar.eventKey is pf12)
    if (NK0AM100.XXX-SUM-ZCR-CD != "  " /* Claim Type Entered*/
     && NK0AM100.KUCCOID != "  "        /* Customer Id Entered*/
     && NK0AM100.NL-CLM-ID != 0)        /* Claim Id Entered*/
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(277); /* Enter Claim Id or Cust with Claim*/
                                   /* Type*/
      set NK0AM100.NL-CLM-ID cursor, bold;
      set NK0AM100.KUCCOID bold;
      set NK0AM100.KUMSTRID bold;
      set NK0AM100.XXX-SUM-ZCR-CD bold;
      return;
    else
      if (NK0AM100.XXX-SUM-ZCR-CD != "  " /* Claim Type Entered*/
       && NK0AM100.KUCCOID == " "         /* Customer Id*/
       && NK0AM100.NL-CLM-ID != 0)        /* Claim Id Entered*/
        NLXREC.NLXERRF = "Y";
        converseLib.validationFailed(277); /* Enter Claim Id or Cust with Claim*/
                                   /* Type*/
        set NK0AM100.NL-CLM-ID cursor, bold;
        set NK0AM100.KUCCOID bold;
        set NK0AM100.KUMSTRID bold;
        set NK0AM100.XXX-SUM-ZCR-CD bold;
        return;
      else
        if (NK0AM100.XXX-SUM-ZCR-CD == "  " /* Claim Type Entered*/
         && NK0AM100.KUCCOID != "  "        /* Customer Id*/
         && NK0AM100.NL-CLM-ID != 0)        /* Claim Id Entered*/
          NLXREC.NLXERRF = "Y";
          converseLib.validationFailed(277); /* Enter Claim Id or Cust with Claim*/
                                   /* Type*/
          set NK0AM100.NL-CLM-ID cursor, bold;
          set NK0AM100.KUCCOID bold;
          set NK0AM100.KUMSTRID bold;
          set NK0AM100.XXX-SUM-ZCR-CD bold;
          return;
        end
      end
    end

    if (NK0AM100.XXX-SUM-ZCR-CD == "  " /* Claim Type Not Entered*/
     && NK0AM100.KUCCOID != "  ")       /* Customer Id Entered*/
      if (converseVar.eventKey is enter
       || converseVar.eventKey is pf12)
        NLXREC.NLXERRF = "Y";
        converseLib.validationFailed(278); /* Claim Type Is Required*/
        set NK0AM100.XXX-SUM-ZCR-CD cursor, bold;
        set NK0AM100.KUCCOID bold;
      end
    end

    if (NK0AM100.XXX-SUM-ZCR-CD != "  " /* Claim Type Entered*/
     && NK0AM100.KUCCOID == "  ")       /* Customer Id Not Entered*/
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(277); /* Enter Claim Id or Cust Id with Claim*/
                                   /* Type*/
      set NK0AM100.KUCCOID cursor, bold;
      set NK0AM100.XXX-SUM-ZCR-CD bold;
    end
    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf12)
      if (converseVar.validationMsgNum == 0)
        converseLib.validationFailed(269);
      end
    end
  end


   /* Validate Claim Type*/

  if (NK0AM100.XXX-SUM-ZCR-CD == "  ")
    /* next sentence*/
  else
    if (NK0AM100.XXX-SUM-ZCR-CD != "DF"
     && NK0AM100.XXX-SUM-ZCR-CD != "PR"
     && NK0AM100.XXX-SUM-ZCR-CD != "MI")
      set NK0AM100.XXX-SUM-ZCR-CD cursor, modified, bold;
      converseLib.validationFailed(275);
      NLXREC.NLXERRF = "Y";
    end
  end

   /* Validate Customer And Store Id*/

  if (NK0AM100.KUCCOID == "  " /* Customer Id*/
   && NK0AM100.KUMSTRID != "  ") /* Store Id*/
    NLXREC.NLXERRF = "Y";
    converseLib.validationFailed(274); /* Need Valid Customer Id Also*/
    set NK0AM100.KUCCOID cursor, bold;
    set NK0AM100.KUMSTRID bold;
  end
  if (NK0AM100.KUMSTRID != "  ") /* Store Id*/
    NK0AW-01-CUST-ALPHA = NK0AM100.KUCCOID;
    NK0AW-01-STOR-ALPHA = NK0AM100.KUMSTRID;
    KUMREC.KUCCOID = NK0AW-01-CUST-NUM;
    KUMREC.KUMSTRID = NK0AW-01-STOR-NUM;
    NK0AS-SEL-STORE();
    if (SQLCA.VAGen_SQLCODE == 100)
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(84);
      set NK0AM100.KUMSTRID cursor, bold;
    end
  end
  if (NK0AM100.KUCCOID != "  ") /* Customer Id*/
    NK0AW-01-CUST-ALPHA = NK0AM100.KUCCOID;
    KUCREC.KUCCOID = NK0AW-01-CUST-NUM;
    NK0AS-SEL-CUST();
    if (SQLCA.VAGen_SQLCODE == 100)
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(13);
      set NK0AM100.KUCCOID cursor, bold;
    else
      if (SQLCA.VAGen_SQLCODE == 0)
        if (KUCREC.XAUCD == "31"
         || KUCREC.XAUCD == "32"
         || KUCREC.XAUCD == "33")
      /* next sentence*/
        else
          NLXREC.NLXERRF = "Y";
          converseLib.validationFailed(271);
          set NK0AM100.KUCCOID cursor, bold;
        end
      end
    end
  end

   /* Validate Claim Id*/

  if (NK0AM100.NL-CLM-ID == 0) /* Claim Id*/
    /* next sentence*/
  else
    VNCHDR01.NL-CLM-ID = NK0AM100.NL-CLM-ID;
    NK0AS-SEL-VNCHDR01();
    if (SQLCA.VAGen_SQLCODE == 100)
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(276);
      set NK0AM100.NL-CLM-ID cursor, bold;
    end
  end

  if (converseVar.eventKey is pf5
   || converseVar.eventKey is pf17)
    if (NK0AM100.NL-CLM-ID != 0) /* Claim Id Entered*/
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(281); /* Function Key Not Valid With A Claim*/
                                   /* ID*/
      set NK0AM100.NL-CLM-ID cursor, bold;
      return;
    end
  end

  if (converseVar.eventKey is pf17
   && COMMAREA.CACLVL[1] != "Y") /* User Does Not Have Security*/
    NLXREC.NLXERRF = "Y";
    set NK0AM100.NL-CLM-ID cursor, bold;
    if (NK0AM100.NL-CLM-ID == 0) /* Claim Id Not Entered*/
      converseLib.validationFailed(280);
    else /* Claim Id Entered*/
      converseLib.validationFailed(281);
    end
    return;
  end


end // end NK0A-120

// Determine next action
Function NK0A-130()
   /* **************************************/
   /* Determine next action*/
   /* **************************************/

  NLXREC.NLXCPROC = "NK0A-130";

  if (converseVar.eventKey is pf3) /* Xfer to NL0A*/
    NLXREC.NLXEOSF = "Y";
    COMMAREA.CATOAP = "NL0A";
    COMMAREA.CAUSERA = " ";
    XPNL002();
  end

  if (converseVar.eventKey is pf4) /* Xfer to MN0M*/
    NLXREC.NLXEOSF = "Y";
    COMMAREA.CATOAP = "MN0M";
    COMMAREA.CAUSERA = " ";
    XPNL002();
  end

  if (converseVar.eventKey is pf12) /* Edit Only*/
    return;
  end

  set NKWREC empty; /* Prepare For Transfer*/

  if (converseVar.eventKey is pf5) /* Claim Select*/
    if (NK0AM100.KUCCOID != "  ")
      NK0AW-01-CUST-ALPHA = NK0AM100.KUCCOID;
      NKWREC.NKW-SEL-KUCCOID = NK0AW-01-CUST-NUM;
      KUCREC.KUCCOID = NK0AW-01-CUST-NUM;
      NK0AS-SEL-CUST();
      if (SQLCA.VAGen_SQLCODE == 0)
        NKWREC.KUCCONM = KUCREC.KUCCONM;
        if (KUCREC.XCTCD in XCTTBL.XCTCD)
          NKWREC.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
        else
          set NK0AM100.KUCCOID cursor, bold;
          converseLib.validationFailed(57);
          NLXREC.NLXERRF = "Y";
          /* EZERTN;*/
        end
      end
    end
    NK0AW-01-STOR-ALPHA = NK0AM100.KUMSTRID;
    NKWREC.NKW-SEL-KUMSTRID = NK0AW-01-STOR-NUM;
    NKWREC.XXX-SUM-ZCR-CD = NK0AM100.XXX-SUM-ZCR-CD;
    NLXREC.NLXEOSF = "Y";
    NLXREC.NLXCSCRN = "NK0AM200";
    return;
  else
    NLXREC.NLXBLDSC = "Y";
  end

  if (converseVar.eventKey is pf17)
    NK0AW-01-CUST-ALPHA = NK0AM100.KUCCOID;
    NKWREC.NKW-SEL-KUCCOID = NK0AW-01-CUST-NUM;
    NK0AW-01-STOR-ALPHA = NK0AM100.KUMSTRID;
    NKWREC.NKW-SEL-KUMSTRID = NK0AW-01-STOR-NUM;
    NKWREC.XXX-SUM-ZCR-CD = NK0AM100.XXX-SUM-ZCR-CD;
    NKWREC.NKW-SEL-XXX-SUM-ZCR-CD = NK0AM100.XXX-SUM-ZCR-CD;
    NKWREC.NKW-PROCESS-FL = "A"; /* Build Approval List*/
    NLXREC.NLXEOSF = "Y";
    NKW-FROM-APP = "A100";
    COMMAREA.CATOAP = "NK0F"; /* Claims Selection List*/
    COMMAREA.CAUSERA = NKWREC.NKW-GROUP;
    XPNL002();
    return;
  end

  if (converseVar.eventKey is enter)
    if (NK0AM100.KUCCOID != "  "
     && NK0AM100.XXX-SUM-ZCR-CD != "  ")
      NK0AW-01-CUST-ALPHA = NK0AM100.KUCCOID;
      NKWREC.KUCCOID = NK0AW-01-CUST-NUM;
      NKWREC.KUCCONM = KUCREC.KUCCONM;
      if (NK0AM100.KUMSTRID != 0)
        NK0AW-01-STOR-ALPHA = NK0AM100.KUMSTRID;
        NKWREC.KUMSTRID = NK0AW-01-STOR-NUM;
        NKWREC.NKW-SEL-KUMSTRID = NK0AW-01-STOR-NUM;
      end
      if (KUCREC.XCTCD in XCTTBL.XCTCD)
        NKWREC.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
      else
        set NK0AM100.KUCCOID cursor, bold;
        converseLib.validationFailed(57);
        NLXREC.NLXERRF = "Y";
        /* EZERTN;*/
      end
      NKWREC.XXX-SUM-ZCR-CD = NK0AM100.XXX-SUM-ZCR-CD;
      /* ysmrec fetch first to get xxx-sum-zcr-desc*/
      set YSMREC empty;
      YSMREC.YSMTBLPF = "ZCR";
      YSMREC.YSMSYSPF = "NL";
      YSMREC.YSMSUMID = 1;
      YSMREC.YSMSUMCD = NK0AM100.XXX-SUM-ZCR-CD;
      YSMREC.YSMSRCVL = "****";
      NK0AS-CHECK-ZCR();
      /* IF EZEMNO EQ 275;*/
      if (converseVar.validationMsgNum != 275
       || converseVar.validationMsgNum != 0
       || converseVar.validationMsgNum != 100)
        NLXREC.NLXERRF = "Y";
        /* EZERTN;*/
      else
        NKWREC.XXX-SUM-ZCR-DESC = YSMREC.YSMSMDSC;
      end
    else
      if (NK0AM100.NL-CLM-ID != 0)
        NKWREC.NL-CLM-ID = NK0AM100.NL-CLM-ID;
        NKWREC.KUCCOID = VNCHDR01.KUCCOID;
        NKWREC.KUMSTRID = VNCHDR01.KUMSTRID;
        KUCREC.KUCCOID = VNCHDR01.KUCCOID;
        NK0AS-SEL-CUST();
        if (KUCREC.XCTCD in XCTTBL.XCTCD)
          NKWREC.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
        else
          set NK0AM100.KUCCOID cursor, bold;
          converseLib.validationFailed(57);
          NLXREC.NLXERRF = "Y";
          /* EZERTN;*/
        end
        NKWREC.NLAADRID = VNCHDR01.NLAADRID;
        NKWREC.XXX-SUM-ZCR-CD = VNCHDR01.XXX-SUM-ZCR-CD;
      /* ysmrec fetch first to get xxx-sum-zcr-desc*/
        set YSMREC empty;
        YSMREC.YSMTBLPF = "ZCR";
        YSMREC.YSMSYSPF = "NL";
        YSMREC.YSMSUMID = 1;
        YSMREC.YSMSUMCD = VNCHDR01.XXX-SUM-ZCR-CD;
        YSMREC.YSMSRCVL = "****";
        NK0AS-CHECK-ZCR();
        /* IF EZEMNO EQ 275;*/
        if (converseVar.validationMsgNum != 275
         || converseVar.validationMsgNum != 0
         || converseVar.validationMsgNum != 100)
          NLXREC.NLXERRF = "Y";
          /* EZERTN;*/
        else
          NKWREC.XXX-SUM-ZCR-DESC = YSMREC.YSMSMDSC;
        end
        NKWREC.ZCR-CLM-RSN-CD = VNCHDR01.ZCR-CLM-RSN-CD;
      /* fetch claim reason desc*/
        if (VNCHDR01.ZCR-CLM-RSN-CD in ZCRTBL.ZCR-CLM-RSN-CD)
          NKWREC.ZCR-CLM-RSN-DESC = ZCRTBL.ZCR-CLM-RSN-DESC[sysVar.arrayIndex];
        end
        NKWREC.ZCS-CLM-STAT-CD = VNCHDR01.ZCS-CLM-STAT-CD;
      /* fetch claim stat desc*/
        if (VNCHDR01.ZCS-CLM-STAT-CD in ZCSTBL.ZCS-CLM-STAT-CD)
          NKWREC.ZCS-CLM-STAT-DESC = ZCSTBL.ZCS-CLM-STAT-DESC[sysVar.arrayIndex];
        end
        NKWREC.NL-CLM-AMT = VNCHDR01.NL-CLM-AMT;
        NKWREC.NKW-CRT-IVC-FLAG = "N";
        NKWREC.NKW-REC-GLAENT = VNCHDR01.GLAENT;
        NKWREC.NKW-REC-GLARCID = VNCHDR01.GLARCID;
        NKWREC.NKW-REC-GLANTAC = VNCHDR01.GLANTAC;
        NKWREC.NKW-REC-GLASUB = VNCHDR01.GLASUB;
        NKWREC.NKW-REC-GLAPRJ = VNCHDR01.GLAPRJ;
      end
    end
    NLXREC.NLXEOSF = "Y";
    COMMAREA.CATOAP = "NK0B"; /* Claims Header Information*/
    COMMAREA.CAUSERA = NKWREC.NKW-GROUP;
    XPNL002();
    return;
  end

  NLXREC.NLXERRF = "Y";
  converseLib.validationFailed(2);


end // end NK0A-130

// Select criteria screen 2
Function NK0A-200()
   /* -----------------------------------------------------------*/
       /* Process screen NK0AM200*/

     /* note - this process is being performed in a*/
        /* "while loop" from NK0A050 until the end-of-screen*/
        /* flag (nlxeosfl) is set to 'y'.*/

   /* -----------------------------------------------------------*/

  NLXREC.NLXCPROC = "NK0A-200";

  if (NLXREC.NLXBLDSC == "Y")
    NK0A-201();
    NLXREC.NLXBLDSC = "N";
  end

  converse NK0AM200 ;

  NK0AM200.VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";

  NK0A-210(); /* check attention identifier*/

  if (NLXREC.NLXERRF == "N") /* check for error*/
    NK0A-220(); /* process entered option*/
  end

  if (NLXREC.NLXERRF == "N") /* check for error*/
    NK0A-230(); /* determine next action...*/
  end


end // end NK0A-200

// Build screen
Function NK0A-201()
   /* **************************************/
   /* Build MAP NK0AM200                 **/
   /* **************************************/

  NLXREC.NLXCPROC = "NK0A-201";

  converseLib.clearScreen();
  set NK0AM200 initial;

  NK0AM200.XXXRVNBR = "00"; /* revision nbr*/
  NK0AM200.XXXMAPNM = "NK0AM200"; /* map name*/
  NK0AM200.XXXPRCNM = "NK0A-200"; /* process name*/
  NK0AM200.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/

  set NK0AM200.KUCCOID cursor, normal;
  set NK0AM200.KUMSTRID normal;
  set NK0AM200.KUCCONM protect;
  set NK0AM200.XCTDESC protect;
  set NK0AM200.NIDIVCID normal;
  set NK0AM200.XXX-SUM-ZCR-CD normal;
  set NK0AM200.ZCR-CLM-RSN-CD normal;
  set NK0AM200.ZCS-CLM-STAT-CD normal;
  set NK0AM200.NK0AM-200-FROM-CMDY normal;
  set NK0AM200.NK0AM-200-TO-CMDY normal;
  set NK0AM200.NK0AM-200-FROM-PMDY normal;
  set NK0AM200.NK0AM-200-TO-PMDY normal;
  set NK0AM200.NK0AM-200-FROM-GMDY normal;
  set NK0AM200.NK0AM-200-TO-GMDY normal;
  set NK0AM200.SY1STNBR normal;
  set NK0AM200.SY2CLRID normal;
  set NK0AM200.XDMCD normal;

  if (NKWREC.NKW-MSG-NBR != 0)
    if (NKW-MSG-NBR == 9999)
      converseLib.validationFailed();
    else
      converseLib.validationFailed(NKW-MSG-NBR);
    end
    NLXERRF = "Y";
  end

  NK0AM200.KUCCOID = NKWREC.NKW-SEL-KUCCOID;
  NK0AM200.KUMSTRID = NKWREC.NKW-SEL-KUMSTRID;
  NK0AM200.KUCCONM = NKWREC.KUCCONM;
  NK0AM200.XCTDESC = NKWREC.XCTDESC;
  NK0AM200.NIDIVCID = NKWREC.NKW-SEL-NIDIVCID;
  NK0AM200.XXX-SUM-ZCR-CD = NKWREC.NKW-SEL-XXX-SUM-ZCR-CD;
  NK0AM200.ZCR-CLM-RSN-CD = NKWREC.NKW-SEL-ZCR-CLM-RSN-CD;
  NK0AM200.ZCS-CLM-STAT-CD = NKWREC.NKW-SEL-ZCS-CLM-STAT-CD;

  NK0AW-01-DT9 = NKWREC.NKW-SEL-FM-ZZZSDT;
  move NK0AW-01-MN9 to NK0AW-01-MON withV60Compat;
  move NK0AW-01-DY9 to NK0AW-01-DAY withV60Compat;
  move NK0AW-01-YR9 to NK0AW-01-YER withV60Compat;
  move NK0AW-01-DAT to NK0AM-200-FROM-CMDY withV60Compat;

  NK0AW-01-DT9 = NKWREC.NKW-SEL-TO-ZZZSDT;
  move NK0AW-01-MN9 to NK0AW-01-MON withV60Compat;
  move NK0AW-01-DY9 to NK0AW-01-DAY withV60Compat;
  move NK0AW-01-YR9 to NK0AW-01-YER withV60Compat;
  move NK0AW-01-DAT to NK0AM-200-TO-CMDY withV60Compat;

  NK0AW-01-DT9 = NKWREC.NKW-SEL-FM-NL-CLM-PRT-DT;
  move NK0AW-01-MN9 to NK0AW-01-MON withV60Compat;
  move NK0AW-01-DY9 to NK0AW-01-DAY withV60Compat;
  move NK0AW-01-YR9 to NK0AW-01-YER withV60Compat;
  move NK0AW-01-DAT to NK0AM-200-FROM-PMDY withV60Compat;

  NK0AW-01-DT9 = NKWREC.NKW-SEL-TO-NL-CLM-PRT-DT;
  move NK0AW-01-MN9 to NK0AW-01-MON withV60Compat;
  move NK0AW-01-DY9 to NK0AW-01-DAY withV60Compat;
  move NK0AW-01-YR9 to NK0AW-01-YER withV60Compat;
  move NK0AW-01-DAT to NK0AM-200-TO-PMDY withV60Compat;

  NK0AW-01-DT9 = NKWREC.NKW-SEL-FM-NIAGLPMO;
  move NK0AW-01-MN9 to NK0AW-01-PMO withV60Compat;
  move NK0AW-01-YR9 to NK0AW-01-PYR withV60Compat;
  move NK0AW-01-PMY to NK0AM-200-FROM-GMDY withV60Compat;

  NK0AW-01-DT9 = NKWREC.NKW-SEL-FM-NIAGLPMO;
  move NK0AW-01-MN9 to NK0AW-01-PMO withV60Compat;
  move NK0AW-01-YR9 to NK0AW-01-PYR withV60Compat;
  move NK0AW-01-PMY to NK0AM-200-TO-GMDY withV60Compat;

  NK0AM200.XGPCD = NKWREC.NKW-SEL-XGPCD;
  NK0AM200.SY1STNBR = NKWREC.NKW-SEL-SY-STY-NBR;
  NK0AM200.SY2CLRID = NKWREC.NKW-SEL-SY-COLR-CD-ID;
  NK0AM200.XDMCD = NKWREC.NKW-SEL-XDM-DIM-CD;

  set NK0AM200.KUCCOID cursor, normal;
   /* SET NK0AM200.KUMSTRID PROTECT;*/
  set NK0AM200.KUCCONM protect;
  set NK0AM200.XCTDESC protect;
  NKW-FROM-APP = "A200";



end // end NK0A-201

// Validate PF keys; act on some
Function NK0A-210()
   /* -----------------------------------------------------------*/
     /* Validate PF keys*/

     /* Active PF keys: 1, 3, 4, 12, 20*/
   /* -----------------------------------------------------------*/

  NLXREC.NLXCPROC = "NK0A-210";

  set NK0AM200.CATOAP initialAttributes;
  set NK0AM200.CAITEM initialAttributes;

  if (converseVar.eventKey is enter /* Xfer To NK0F*/
   || converseVar.eventKey is pf1   /* Help Menu*/
   || converseVar.eventKey is pf3   /* Xfer To Map100*/
   || converseVar.eventKey is pf4   /* Xfer To MN0M*/
   || converseVar.eventKey is pf12  /* Edit Map Entries Only*/
   || converseVar.eventKey is pf20) /* Xfer To NL0A*/
    /* next sentence*/
  else
    NLXREC.NLXERRF = "Y";
    converseLib.validationFailed(2);
    return;
  end

   /* ***********************************/
      /* check for fastpath option/item*/
   /* ***********************************/

  if (NK0AM200.CATOAP != " ") /* if fastpath option entered,*/
    if (converseVar.eventKey is enter)
      COMMAREA.CATOAP = NK0AM200.CATOAP;
      COMMAREA.CAITEM = NK0AM200.CAITEM;
      COMMAREA.CAUSERA = " ";
      XPNL002(); /* exit application*/
      set NK0AM200.CATOAP cursor, bold; /* exit failed*/
      return;
    end
  end

  if (converseVar.eventKey is enter /* Valid non-exit pf keys*/
   || converseVar.eventKey is pf12)
    return;
  end

  if (converseVar.eventKey is pf1) /* skip edit/updt, go to 'help'*/
    XSPF1();
  end

  if (converseVar.eventKey is pf3)
    NLXREC.NLXSCRNX = 1; /* Return To Map 100*/
    NLXREC.NLXCSCRN = "NK0AM100";
    NLXREC.NLXEOSF = "Y";
    NLXREC.NLXERRF = "N"; /* Clear Error Message*/
    COMMAREA.CAUSERA = " ";
    return; /* exit*/
  end

  if (converseVar.eventKey is pf4) /* go to master menu*/
    NLXREC.NLXEOSF = "Y";
    COMMAREA.CAUSERA = " "; /* exit*/
    XSPF4();
  end

  if (converseVar.eventKey is pf20)
    NLXREC.NLXEOSF = "Y";
    COMMAREA.CATOAP = "NL0A"; /* NIL Menu*/
    COMMAREA.CAUSERA = NKWREC.NKW-GROUP;
    XPNL002(); /* exit*/
    return;
  end

      /* pf key not valid*/

  converseLib.validationFailed(2); /* pf key not valid*/
  NLXREC.NLXERRF = "Y"; /* mark with error*/


end // end NK0A-210

// Edit/Act on function keys
Function NK0A-220()
   /* ************************************/
   /* Edit Claims Screen Entries*/
   /* ************************************/

  NLXREC.NLXCPROC = "NK0A-220";

  set NK0AM200.KUCCOID cursor;

   /* At Least One Field Must Have Been Entered*/

  if (NK0AM200.SY1STNBR == "  "         
   && NK0AM200.XGPCD == "  "            /* GPC Code*/
   && NK0AM200.NK0AM-200-FROM-GMDY == 0 /* GL From Post YYMM*/
   && NK0AM200.NK0AM-200-TO-GMDY == 0   /* GL To Post YYMM*/
   && NK0AM200.NK0AM-200-FROM-PMDY == 0 /* Print From MMDDYY*/
   && NK0AM200.NK0AM-200-TO-PMDY == 0   /* Print To MMDDYY*/
   && NK0AM200.NK0AM-200-FROM-CMDY == 0 /* Claim Date From MMDDYY*/
   && NK0AM200.NK0AM-200-TO-CMDY == 0   /* Claim Date To MMDDYY*/
   && NK0AM200.ZCS-CLM-STAT-CD == "  "  /* Claim Status*/
   && NK0AM200.ZCR-CLM-RSN-CD == "  "   /* Claim Reason*/
   && NK0AM200.XXX-SUM-ZCR-CD == "  "   /* Claim Type*/
   && NK0AM200.NIDIVCID == 0            /* Invoice Id*/
   && NK0AM200.KUMSTRID == 0            /* Store Id*/
   && NK0AM200.KUCCOID == 0)            /* Customer Id*/
    NLXREC.NLXERRF = "Y";
    converseLib.validationFailed(287);
  end

   /* Request For Pop-up Window For GPC*/

  if (NK0AM200.XGPCD == "?")
    XPXX001();
    while (XX0XW02.XX0XWEND == "N")
      XPXGP01();
    end
    set NK0AM200.XGPCD cursor;
    if (XX0XW02.XX0XWPIX != 0)
      NK0AM200.XGPCD = XGPTBL.XGPCD[XX0XWPIX];
    else
      NK0AM200.ZCR-CLM-RSN-CD = "  ";
    end
    NLXREC.NLXERRF = "Y";
  end

   /* Request For Pop-up Window For Claim Reason*/

  if (NK0AM200.ZCR-CLM-RSN-CD == "?")
    XPXX001();
    while (XX0XW02.XX0XWEND == "N")
      XPZCR01();
    end
    set NK0AM200.ZCR-CLM-RSN-CD cursor;
    if (XX0XW02.XX0XWPIX > 0)
      NK0AM200.ZCR-CLM-RSN-CD = ZCRTBL.ZCR-CLM-RSN-CD[XX0XWPIX];
    else
      NK0AM200.ZCR-CLM-RSN-CD = "  ";
    end
    NLXREC.NLXERRF = "Y";
  end

   /* Request For Pop-up Window For Claim Status*/

  if (NK0AM200.ZCS-CLM-STAT-CD == "?")
    XPXX001();
    while (XX0XW02.XX0XWEND == "N")
      XPZCS01();
    end
    set NK0AM200.ZCS-CLM-STAT-CD cursor;
    if (XX0XW02.XX0XWPIX > 0)
      NK0AM200.ZCS-CLM-STAT-CD = ZCSTBL.ZCS-CLM-STAT-CD[XX0XWPIX];
    else
      NK0AM200.ZCS-CLM-STAT-CD = "  ";
    end
    NLXREC.NLXERRF = "Y";
  end

  converseLib.clearScreen();

  if (converseVar.eventKey is enter /* Xfer To NK0F*/
   || converseVar.eventKey is pf12) /* Edit Only*/

    /* Check If Gpc Style/Color/Dimension Were Entered*/

    if (NK0AM200.XGPCD > "  "
     && NK0AM200.SY1STNBR > "  "
     && NK0AM200.SY2CLRID > "  "
     && NK0AM200.XDMCD > "  ")
      set NK0AM200.XGPCD normal;
      set NK0AM200.SY1STNBR normal;
      set NK0AM200.SY2CLRID normal;
      set NK0AM200.XDMCD normal;

    /* Edit Style/Color/Dimension If Gpc Entered*/

      PG2REC.XGPCD = NK0AM200.XGPCD;
      PG2REC.SY1STNBR = NK0AM200.SY1STNBR;
      PG2REC.SY2CLRID = NK0AM200.SY2CLRID;
      PG2REC.XDMCD = NK0AM200.XDMCD;
      NK0AS-SEL-STYLE();
      if (SQLCA.VAGen_SQLCODE == 100)
        NLXREC.NLXERRF = "Y";
        converseLib.validationFailed(300); /* This Combination Is Not Correct*/
        set NK0AM200.XGPCD cursor, bold;
        set NK0AM200.SY1STNBR bold;
        set NK0AM200.SY2CLRID bold;
        set NK0AM200.XDMCD bold;
      end
    else
      if (NK0AM200.SY1STNBR == "  "
       && NK0AM200.SY2CLRID == "  "
       && NK0AM200.XDMCD == "  ")
        set NK0AM200.SY1STNBR normal;
        set NK0AM200.SY2CLRID normal;
        set NK0AM200.XDMCD normal;
    /* next sentence*/
      else
        NLXREC.NLXERRF = "Y";
        converseLib.validationFailed(268);
        if (NK0AM200.XDMCD == "  ")
          set NK0AM200.XDMCD cursor, bold;
        end
        if (NK0AM200.SY2CLRID == "  ")
          set NK0AM200.SY2CLRID cursor, bold;
        end
        if (NK0AM200.SY1STNBR == "  ")
          set NK0AM200.SY1STNBR cursor, bold;
        end
        if (NK0AM200.XGPCD == "  ")
          set NK0AM200.XGPCD cursor, bold;
        end
      end

    end

    /* Edit GPC Code*/

    if (NK0AM200.XGPCD == "  ")
      /* next sentence*/
    else
      if (NK0AM200.XGPCD in XGPTBL.XGPCD
       && XGPTBL.XXXSTAT[sysVar.arrayIndex] == "A")
      /* next sentence*/
      else
        set NK0AM200.XGPCD cursor, modified, bold;
        converseLib.validationFailed(17); /* Invalid GPC, Use '?' For List*/
        NLXREC.NLXERRF = "Y";
      end
    end

    set NK0AW01 empty;

   /* *************************************/
    /* Edit Posting Month 'To' if present*/
   /* *************************************/
    if (NK0AM200.NK0AM-200-TO-GMDY == 0
     && NK0AM200.NK0AM-200-FROM-GMDY != 0)
      NK0AM200.NK0AM-200-TO-GMDY = NK0AM200.NK0AM-200-FROM-GMDY;
    end
    if (NK0AM200.NK0AM-200-TO-GMDY != 0)
      NK0AW01.NK0AW-01-PMY = NK0AM200.NK0AM-200-TO-GMDY;
      NK0AW01.NK0AW-01-MON = NK0AW01.NK0AW-01-PMO;
      NK0AW01.NK0AW-01-YER = NK0AW01.NK0AW-01-PYR;
      NK0AW01.NK0AW-01-DAY = "01";
      NLXREC.NLXVALDT = "Y";
      NLXREC.XXXED8C = NK0AW01.NK0AW-01-DAT;
      XPNL001();
      if (NLXREC.NLXVALDT == "N")
        set NK0AM200.NK0AM-200-TO-GMDY cursor, modified, bold;
        NK0AW01.NK0AW-01-PER = "Y";
        NLXREC.NLXERRF = "Y";
        converseLib.validationFailed(5); /* Invalid date*/
      else
        NKWREC.NKW-SEL-TO-NIAGLPMO = NK0AM200.NK0AM-200-TO-GMDY;
        set NK0AM200.NK0AM-200-TO-GMDY normal;
      end
    else
      set NK0AM200.NK0AM-200-TO-GMDY normal;
    end

   /* *************************************/
    /* Edit Posting Month 'From' if present*/
   /* *************************************/
    if (NK0AM200.NK0AM-200-FROM-GMDY != 0)
      NK0AW01.NK0AW-01-PMY = NK0AM200.NK0AM-200-FROM-GMDY;
      NK0AW01.NK0AW-01-MON = NK0AW01.NK0AW-01-PMO;
      NK0AW01.NK0AW-01-YER = NK0AW01.NK0AW-01-PYR;
      NK0AW01.NK0AW-01-DAY = "01";
      NLXREC.NLXVALDT = "Y";
      NLXREC.XXXED8C = NK0AW01.NK0AW-01-DAT;
      XPNL001();
      if (NLXREC.NLXVALDT == "N")
        set NK0AM200.NK0AM-200-FROM-GMDY cursor, modified, bold;
        NK0AW01.NK0AW-01-PER = "Y";
        NLXREC.NLXERRF = "Y";
        converseLib.validationFailed(5); /* Invalid date*/
      else
        NKWREC.NKW-SEL-FM-NIAGLPMO = NK0AM200.NK0AM-200-FROM-GMDY;
        set NK0AM200.NK0AM-200-FROM-GMDY normal;
      end
    else
      set NK0AM200.NK0AM-200-FROM-GMDY normal;
    end

   /* ****************************************/
    /* Validate G/L posting month date ranges*/
   /* ****************************************/
    if (NK0AM200.NK0AM-200-TO-GMDY != 0
     && NK0AW01.NK0AW-01-PER != "Y") /* No previous error*/
      move NK0AM-200-FROM-GMDY to NK0AW-01-PMY withV60Compat;
      move NK0AW-01-PYR to NK0AW-01-FYY withV60Compat;
      move NK0AW-01-PMO to NK0AW-01-FMM withV60Compat;
      move NK0AM-200-TO-GMDY to NK0AW-01-PMY withV60Compat;
      move NK0AW-01-PYR to NK0AW-01-TYY withV60Compat;
      move NK0AW-01-PMO to NK0AW-01-TMM withV60Compat;
      /* IF NKWREC.NKW-SEL-FM-NIAGLPMO GT NKWREC.NKW-SEL-TO-NIAGLPMO;*/
      if (NK0AW-01-FYYMM > NK0AW-01-TYYMM
       || NKWREC.NKW-SEL-FM-NIAGLPMO == 0)
        set NK0AM200.NK0AM-200-FROM-GMDY cursor, modified, bold;
        NLXREC.NLXERRF = "Y";
        NK0AW01.NK0AW-01-PER = "Y";
        converseLib.validationFailed(25); /* Invalid logical date seq*/
      else
        set NK0AM200.NK0AM-200-FROM-GMDY normal;
      end
    end

    NK0AW-01-PMY = 0;

   /* ******************************/
    /* Validate Posting month range*/
   /* ******************************/
    if (NK0AM200.NK0AM-200-FROM-GMDY != 0
     && NK0AM200.NK0AM-200-TO-GMDY != 0
     && NK0AW01.NK0AW-01-PER != "Y")

      set TA2REC empty;

      NK0AW01.NK0AW-01-PMY = NK0AM200.NK0AM-200-FROM-GMDY;
      NK0AW01.NK0AW-01-MN9 = NK0AW01.NK0AW-01-PMO;
      NK0AW01.NK0AW-01-YR9 = NK0AW01.NK0AW-01-PYR;
      NK0AW01.NK0AW-01-DY9 = "01";

  /* ***********************Y2K IN BEGIN**************************/
      if (NK0AW01.NK0AW-01-YR9 > 60)
        NK0AW01.NK0AW-01-CEN = "019";
      else
        NK0AW01.NK0AW-01-CEN = "020";
      end
  /* ***********************Y2K IN END****************************/
  /* ***********************Y2K OUT BEGIN*************************/
  /* **MOVE '019' TO NK0AW01.NK0AW-01-CEN;*/
  /* ***********************Y2K OUT END***************************/
      TA2REC.TA2DBDFN = NK0AW01.NK0AW-01-DT9;
      NK0AW-01-GMDYF = NK0AW01.NK0AW-01-DT9;

      NK0AW01.NK0AW-01-PMY = NK0AM200.NK0AM-200-TO-GMDY;
      NK0AW01.NK0AW-01-MN9 = NK0AW01.NK0AW-01-PMO;
      NK0AW01.NK0AW-01-YR9 = NK0AW01.NK0AW-01-PYR;
      NK0AW01.NK0AW-01-DY9 = "31";

  /* ***********************Y2K IN BEGIN**************************/
      if (NK0AW01.NK0AW-01-YR9 > 60)
        NK0AW01.NK0AW-01-CEN = "019";
      else
        NK0AW01.NK0AW-01-CEN = "020";
      end
  /* ***********************Y2K IN END****************************/
  /* ***********************Y2K OUT BEGIN*************************/
  /* **MOVE '019' TO NK0AW01.NK0AW-01-CEN;*/
  /* ***********************Y2K OUT END***************************/
      TA2REC.TA2DBDTN = NK0AW01.NK0AW-01-DT9;
      NK0AW-01-GMDYT = NK0AW01.NK0AW-01-DT9;

      TA2REC.TA2DTOPT = "DAYSDIFF";
      TA2REC.TA2GRTYP = "A";
      TA2REC.TA2DYAOD = 0;

      call "TA0040" (TA2REC) {isNoRefresh = yes};

      if (TA2REC.TA2DBDDN > 92)
        set NK0AM200.NK0AM-200-FROM-GMDY cursor, modified, bold;
        converseLib.validationFailed(26);
        NLXREC.NLXERRF = "Y";
      else
        set NK0AM200.NK0AM-200-FROM-GMDY normal;
      end
    end

   /* ***********************************/
    /* Edit 'To' Print Date if present*/
   /* ***********************************/
    if (NK0AM200.NK0AM-200-TO-PMDY == 0
     && NK0AM200.NK0AM-200-FROM-PMDY != 0)
      NK0AM200.NK0AM-200-TO-PMDY = NK0AM200.NK0AM-200-FROM-PMDY;
    end
    if (NK0AM200.NK0AM-200-TO-PMDY != 0)
      NLXREC.NLXVALDT = "Y";
      NLXREC.XXXED8C = NK0AM200.NK0AM-200-TO-PMDY;
      XPNL001();
      if (NLXREC.NLXVALDT == "N")
        set NK0AM200.NK0AM-200-TO-PMDY cursor, modified, bold;
        NK0AW01.NK0AW-01-NER = "Y";
        NLXREC.NLXERRF = "Y";
        converseLib.validationFailed(5); /* Invalid date*/
      else
        NKWREC.NKW-SEL-TO-NL-CLM-PRT-DT = NLXREC.XXXWCYMD;
        set NK0AM200.NK0AM-200-TO-PMDY normal;
      end
    else
      set NK0AM200.NK0AM-200-TO-PMDY normal;
    end

   /* ************************************/
    /* Edit 'From' Print date if present*/
   /* ************************************/
    if (NK0AM200.NK0AM-200-FROM-PMDY != 0)
      NLXREC.NLXVALDT = "Y";
      NLXREC.XXXED8C = NK0AM200.NK0AM-200-FROM-PMDY;
      XPNL001();
      if (NLXREC.NLXVALDT == "N")
        set NK0AM200.NK0AM-200-FROM-PMDY cursor, modified, bold;
        NK0AW01.NK0AW-01-NER = "Y";
        NLXREC.NLXERRF = "Y";
        converseLib.validationFailed(5); /* Invalid date*/
      else
        set NK0AM200.NK0AM-200-FROM-PMDY normal;
        NKWREC.NKW-SEL-FM-NL-CLM-PRT-DT = NLXREC.XXXWCYMD;
      end
    else
      set NK0AM200.NK0AM-200-FROM-PMDY normal;
    end

   /* ****************************/
    /* Validate Print date range*/
   /* ****************************/
    if (NK0AM200.NK0AM-200-TO-PMDY != 0
     && NK0AW01.NK0AW-01-NER != "Y") /* No previous error*/
      if (NKWREC.NKW-SEL-FM-NL-CLM-PRT-DT > NKWREC.NKW-SEL-TO-NL-CLM-PRT-DT
      
       || NKWREC.NKW-SEL-FM-NL-CLM-PRT-DT == 0)
        set NK0AM200.NK0AM-200-FROM-PMDY cursor, modified, bold;
        NK0AW01.NK0AW-01-NER = "Y";
        NLXREC.NLXERRF = "Y";
        converseLib.validationFailed(25); /* Invalid logical date seq*/
      else
        set NK0AM200.NK0AM-200-FROM-PMDY normal;
      end
    end

   /* *****************************/
    /* Validate Print date range*/
   /* *****************************/
    if (NK0AM200.NK0AM-200-FROM-PMDY != 0
     && NK0AM200.NK0AM-200-TO-PMDY != 0
     && NK0AW01.NK0AW-01-NER != "Y") /* No previous error*/
      NK0AW01.NK0AW-01-DAT = NK0AM200.NK0AM-200-FROM-PMDY;
      NK0AW01.NK0AW-01-MN9 = NK0AW01.NK0AW-01-MON;
      NK0AW01.NK0AW-01-DY9 = NK0AW01.NK0AW-01-DAY;
      NK0AW01.NK0AW-01-YR9 = NK0AW01.NK0AW-01-YER;
  /* ***********************Y2K IN BEGIN**************************/
      if (NK0AW01.NK0AW-01-YR9 > 60)
        NK0AW01.NK0AW-01-CEN = "019";
      else
        NK0AW01.NK0AW-01-CEN = "020";
      end
  /* ***********************Y2K IN END****************************/
  /* ***********************Y2K OUT BEGIN*************************/
  /* **MOVE '019' TO NK0AW01.NK0AW-01-CEN;*/
  /* ***********************Y2K OUT END***************************/
      TA2REC.TA2DBDFN = NK0AW01.NK0AW-01-DT9;
      NK0AW-01-PMDYF = NK0AW01.NK0AW-01-DT9;

      NK0AW01.NK0AW-01-DAT = NK0AM200.NK0AM-200-TO-PMDY;
      NK0AW01.NK0AW-01-MN9 = NK0AW01.NK0AW-01-MON;
      NK0AW01.NK0AW-01-DY9 = NK0AW01.NK0AW-01-DAY;
      NK0AW01.NK0AW-01-YR9 = NK0AW01.NK0AW-01-YER;
  /* ***********************Y2K IN BEGIN**************************/
      if (NK0AW01.NK0AW-01-YR9 > 60)
        NK0AW01.NK0AW-01-CEN = "019";
      else
        NK0AW01.NK0AW-01-CEN = "020";
      end
  /* ***********************Y2K IN END****************************/
  /* ***********************Y2K OUT BEGIN*************************/
  /* **MOVE '019' TO NK0AW01.NK0AW-01-CEN;*/
  /* ***********************Y2K OUT END***************************/
      TA2REC.TA2DBDTN = NK0AW01.NK0AW-01-DT9;
      NK0AW-01-PMDYT = NK0AW01.NK0AW-01-DT9;

      TA2REC.TA2DTOPT = "DAYSDIFF";
      TA2REC.TA2GRTYP = "A";
      TA2REC.TA2DYAOD = 0;

      call "TA0040" (TA2REC) {isNoRefresh = yes};

      if (TA2REC.TA2DBDDN > 92)
        set NK0AM200.NK0AM-200-FROM-PMDY cursor, modified, bold;
        converseLib.validationFailed(26);
        NLXREC.NLXERRF = "Y";
      else
        set NK0AM200.NK0AM-200-FROM-PMDY normal;
      end
    end

   /* ***********************************/
    /* Edit 'To' Claim Date if present*/
   /* ***********************************/
    if (NK0AM200.NK0AM-200-TO-CMDY == 0
     && NK0AM200.NK0AM-200-FROM-CMDY != 0)
      NK0AM200.NK0AM-200-TO-CMDY = NK0AM200.NK0AM-200-FROM-CMDY;
    end
    if (NK0AM200.NK0AM-200-TO-CMDY != 0)
      NLXREC.NLXVALDT = "Y";
      NLXREC.XXXED8C = NK0AM200.NK0AM-200-TO-CMDY;
      XPNL001();
      if (NLXREC.NLXVALDT == "N")
        set NK0AM200.NK0AM-200-TO-CMDY cursor, modified, bold;
        NK0AW01.NK0AW-01-IER = "Y";
        NLXREC.NLXERRF = "Y";
        converseLib.validationFailed(5); /* Invalid date*/
      else
        NKWREC.NKW-SEL-TO-ZZZSDT = NLXREC.XXXWCYMD;
        set NK0AM200.NK0AM-200-TO-CMDY normal;
      end
    else
      set NK0AM200.NK0AM-200-TO-CMDY normal;
    end
   /* ************************************/
    /* Edit 'From' Claim date if present*/
   /* ************************************/
    if (NK0AM200.NK0AM-200-FROM-CMDY != 0)
      NLXREC.NLXVALDT = "Y";
      NLXREC.XXXED8C = NK0AM200.NK0AM-200-FROM-CMDY;
      XPNL001();
      if (NLXREC.NLXVALDT == "N")
        set NK0AM200.NK0AM-200-FROM-CMDY cursor, modified, bold;
        NK0AW01.NK0AW-01-IER = "Y";
        NLXREC.NLXERRF = "Y";
        converseLib.validationFailed(5); /* Invalid date*/
      else
        set NK0AM200.NK0AM-200-FROM-CMDY normal;
        NKWREC.NKW-SEL-FM-ZZZSDT = NLXREC.XXXWCYMD;
      end
    else
      set NK0AM200.NK0AM-200-FROM-CMDY normal;
    end

   /* ****************************/
    /* Validate Claim date range*/
   /* ****************************/
    if (NK0AM200.NK0AM-200-TO-CMDY != 0
     && NK0AW01.NK0AW-01-IER != "Y") /* No previous error*/
      if (NKWREC.NKW-SEL-FM-ZZZSDT > NKWREC.NKW-SEL-TO-ZZZSDT
       || NKWREC.NKW-SEL-FM-ZZZSDT == 0)
        set NK0AM200.NK0AM-200-FROM-CMDY cursor, modified, bold;
        NK0AW01.NK0AW-01-IER = "Y";
        NLXREC.NLXERRF = "Y";
        converseLib.validationFailed(25); /* Invalid logical date seq*/
      else
        set NK0AM200.NK0AM-200-FROM-CMDY normal;
      end
    end

   /* *****************************/
    /* Validate Claim date range*/
   /* *****************************/
    if (NK0AM200.NK0AM-200-FROM-CMDY != 0
     && NK0AM200.NK0AM-200-TO-CMDY != 0
     && NK0AW01.NK0AW-01-IER != "Y") /* No previous error*/
      NK0AW01.NK0AW-01-DAT = NK0AM200.NK0AM-200-FROM-CMDY;
      NK0AW01.NK0AW-01-MN9 = NK0AW01.NK0AW-01-MON;
      NK0AW01.NK0AW-01-DY9 = NK0AW01.NK0AW-01-DAY;
      NK0AW01.NK0AW-01-YR9 = NK0AW01.NK0AW-01-YER;
  /* ***********************Y2K IN BEGIN**************************/
      if (NK0AW01.NK0AW-01-YR9 > 60)
        NK0AW01.NK0AW-01-CEN = "019";
      else
        NK0AW01.NK0AW-01-CEN = "020";
      end
  /* ***********************Y2K IN END****************************/
  /* ***********************Y2K OUT BEGIN*************************/
  /* **MOVE '019' TO NK0AW01.NK0AW-01-CEN;*/
  /* ***********************Y2K OUT END***************************/
      TA2REC.TA2DBDFN = NK0AW01.NK0AW-01-DT9;
      NK0AW-01-CMDYF = NK0AW01.NK0AW-01-DT9;

      NK0AW01.NK0AW-01-DAT = NK0AM200.NK0AM-200-TO-CMDY;
      NK0AW01.NK0AW-01-MN9 = NK0AW01.NK0AW-01-MON;
      NK0AW01.NK0AW-01-DY9 = NK0AW01.NK0AW-01-DAY;
      NK0AW01.NK0AW-01-YR9 = NK0AW01.NK0AW-01-YER;
  /* ***********************Y2K IN BEGIN**************************/
      if (NK0AW01.NK0AW-01-YR9 > 60)
        NK0AW01.NK0AW-01-CEN = "019";
      else
        NK0AW01.NK0AW-01-CEN = "020";
      end
  /* ***********************Y2K IN END****************************/
  /* ***********************Y2K OUT BEGIN*************************/
  /* **MOVE '019' TO NK0AW01.NK0AW-01-CEN;*/
  /* ***********************Y2K OUT END***************************/
      TA2REC.TA2DBDTN = NK0AW01.NK0AW-01-DT9;
      NK0AW-01-CMDYT = NK0AW01.NK0AW-01-DT9;

      TA2REC.TA2DTOPT = "DAYSDIFF";
      TA2REC.TA2GRTYP = "A";
      TA2REC.TA2DYAOD = 0;

      call "TA0040" (TA2REC) {isNoRefresh = yes};

      if (TA2REC.TA2DBDDN > 92)
        set NK0AM200.NK0AM-200-FROM-CMDY cursor, modified, bold;
        converseLib.validationFailed(26);
        NLXREC.NLXERRF = "Y";
      else
        set NK0AM200.NK0AM-200-FROM-CMDY normal;
      end
    end

    /* Edit Claim Status*/

    if (NK0AM200.ZCS-CLM-STAT-CD == "  ")
      /* next sentence*/
    else
      if (NK0AM200.ZCS-CLM-STAT-CD in ZCSTBL.ZCS-CLM-STAT-CD
       && ZCSTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        set NK0AM200.ZCS-CLM-STAT-CD normal;
      else
        set NK0AM200.ZCS-CLM-STAT-CD cursor, modified, bold;
        converseLib.validationFailed(285); /* Invalid Claim Status Code*/
        NLXREC.NLXERRF = "Y";
      end
    end

    /* Edit Claim Reason*/

    set NK0AM200.ZCR-CLM-RSN-CD normal;
    if (NK0AM200.ZCR-CLM-RSN-CD == "  ")
      /* next sentence*/
    else
      if (NK0AM200.ZCR-CLM-RSN-CD in ZCRTBL.ZCR-CLM-RSN-CD
       && ZCRTBL.XXXSTAT[sysVar.arrayIndex] == "A")
        set NK0AM200.ZCR-CLM-RSN-CD normal;
        if (NK0AM200.XXX-SUM-ZCR-CD != "  ")
          set YSMREC empty;
          YSMTBLPF = "ZCR";
          YSMSYSPF = "NL";
          YSMSUMID = 1;
          YSMSUMCD = NK0AM200.XXX-SUM-ZCR-CD;
          YSMSRCVL = NK0AM200.ZCR-CLM-RSN-CD;
          NK0AS-SEL-VSUMCD01();
          if (YSMREC.YSMSUMCD == NK0AM200.XXX-SUM-ZCR-CD)
            set NK0AM200.ZCR-CLM-RSN-CD normal;
          else
            set NK0AM200.ZCR-CLM-RSN-CD cursor, modified, bold;
            converseLib.validationFailed(291); /* Wrong Reason For Claim Type*/
            NLXREC.NLXERRF = "Y";
          end
        end
      else
        set NK0AM200.ZCR-CLM-RSN-CD cursor, modified, bold;
        converseLib.validationFailed(284); /* Invalid Claim Reason Code*/
        NLXREC.NLXERRF = "Y";
      end
    end

    /* Edit Claim Type*/

    if (NK0AM200.XXX-SUM-ZCR-CD == "  ")
    /* next sentence*/
    else
      if (NK0AM200.XXX-SUM-ZCR-CD != "DF"
       && NK0AM200.XXX-SUM-ZCR-CD != "PR"
       && NK0AM200.XXX-SUM-ZCR-CD != "MI")
        set NK0AM200.XXX-SUM-ZCR-CD cursor, modified, bold;
        converseLib.validationFailed(275);
        NLXREC.NLXERRF = "Y";
      else
        set NK0AM200.XXX-SUM-ZCR-CD normal;
      end
    end

    /* Edit Invoice Id If Present*/

    if (NK0AM200.NIDIVCID == 0)
    /* next sentence*/
    else
      VNCIVX01.NIDIVCID = NK0AM200.NIDIVCID;
      NK0AS-S1-VNCIVX01();
      NK0AS-N1-VNCIVX01();
      if (SQLCA.VAGen_SQLCODE == 0)
        set NK0AM200.NIDIVCID normal;
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          NLXREC.NLXERRF = "Y";
          converseLib.validationFailed(415); /* Invoice not found for claim*/
          set NK0AM200.NIDIVCID cursor, bold;
        else
          if (VNCIVX01.ZDTCD == "MC")
            NLXREC.NLXERRF = "Y";
            converseLib.validationFailed(282); /* Material Content Stmt*/
            set NK0AM200.NIDIVCID cursor, bold;
          end
        end
      end
      NK0AS-C1-VNCIVX01();
    end

   /* Validate Customer And Store Id*/

    if (NK0AM200.KUCCOID == 0 /* Customer Id*/
     && NK0AM200.KUMSTRID != 0) /* Store Id*/
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(274); /* Need Valid Customer Id Also*/
      set NK0AM200.KUCCOID cursor, bold;
      set NK0AM200.KUMSTRID bold;
    else
      set NK0AM200.KUCCOID normal;
      set NK0AM200.KUMSTRID normal;
    end
    if (NK0AM200.KUMSTRID != 0) /* Store Id*/
      KUMREC.KUCCOID = NK0AM200.KUCCOID;
      KUMREC.KUMSTRID = NK0AM200.KUMSTRID;
      NK0AS-SEL-STORE();
      if (SQLCA.VAGen_SQLCODE == 0)
        set NK0AM200.KUMSTRID normal;
      else
        if (SQLCA.VAGen_SQLCODE == 100)
          NLXREC.NLXERRF = "Y";
          converseLib.validationFailed(84);
          set NK0AM200.KUMSTRID cursor, bold;
        end
      end
    else
      set NK0AM200.KUMSTRID normal;
    end
    if (NK0AM200.KUCCOID != 0) /* Customer Id*/
      KUCREC.KUCCOID = NK0AM200.KUCCOID;
      NK0AS-SEL-CUST();
      if (SQLCA.VAGen_SQLCODE != 0)
        NLXREC.NLXERRF = "Y";
        converseLib.validationFailed(13);
        set NK0AM200.KUCCOID cursor, bold;
      else
        if (SQLCA.VAGen_SQLCODE == 0)
          if (KUCREC.XAUCD == "31"
           || KUCREC.XAUCD == "32"
           || KUCREC.XAUCD == "33")
            set NK0AM200.KUCCOID normal;
            NK0AM200.KUCCONM = KUCREC.KUCCONM;
            if (KUCREC.XCTCD in XCTTBL.XCTCD)
              NK0AM200.XCTDESC = XCTTBL.XCTDESC[sysVar.arrayIndex];
            else
              set NK0AM200.XCTDESC cursor, bold;
              converseLib.validationFailed(57);
              NLXREC.NLXERRF = "Y";
            end
          else
            NLXREC.NLXERRF = "Y";
            converseLib.validationFailed(271);
            set NK0AM200.KUCCOID cursor, bold;
          end
        end
      end
    else
      set NK0AM200.KUCCOID normal;
    end

   /* Invoice Customer Id Match The Customer Id Entered On Map?*/

    if (NK0AM200.NIDIVCID != 0
     && NK0AM200.KUCCOID != 0)
      if (VNLIVX01.ZDTCD == "PI")
        set VPIHDR01 empty;
        VPIHDR01.NIDIVCID = NK0AM200.NIDIVCID;
        NK0AS-SEL-VPIHDR01();
        if (SQLCA.VAGen_SQLCODE == 0
         && VPIHDR01.KUCCOID == NK0AM200.KUCCOID)
          /* AND NIEREC.KUMSTRID EQ NK0AM200.KUMSTRID;*/
        /* next sentence*/
        else
          NLXREC.NLXERRF = "Y";
          converseLib.validationFailed(283);
          set NK0AM200.KUCCOID cursor, bold;
          /* SET NK0AM200.KUMSTRID CURSOR,BRIGHT;*/
          set NK0AM200.NIDIVCID bold;
        end
      else
        if (VNLIVX01.ZDTCD == "MI")
          set VMIHDR01 empty;
          VMIHDR01.NIDIVCID = NK0AM200.NIDIVCID;
          NK0AS-SEL-VMIHDR01();
          if (SQLCA.VAGen_SQLCODE == 0
           && VMIHDR01.KUCCOID == NK0AM200.KUCCOID)
            /* AND NIAREC.KUMSTRID EQ NK0AM200.KUMSTRID;*/
        /* next sentence*/
          else
            NLXREC.NLXERRF = "Y";
            converseLib.validationFailed(283);
            set NK0AM200.KUCCOID cursor, bold;
            /* SET NK0AM200.KUMSTRID BRIGHT;*/
            set NK0AM200.NIDIVCID bold;
          end
        end
      end
    end

    if (converseVar.validationMsgNum == 0)
      converseLib.validationFailed(269);
    end
  end
  /* Relational Edit To Make Sure IO Mod Key Is Present*/

  if (NK0AM200.XGPCD != "  "
   && NK0AM200.SY1STNBR != "  "
   && NK0AM200.SY2CLRID != "  "
   && NK0AM200.XDMCD != "  "
   && NK0AM200.XXX-SUM-ZCR-CD != "  ")
    return;
  else
    if (NK0AM200.NIDIVCID != 0)
      return;
    else
      if (NK0AM200.KUCCOID != 0)
        return;
      else
        set NK0AM200.KUCCOID cursor, bold;
        set NK0AM200.NIDIVCID bold;
        set NK0AM200.XGPCD bold;
        set NK0AM200.SY1STNBR bold;
        set NK0AM200.SY2CLRID bold;
        set NK0AM200.XDMCD bold;
        set NK0AM200.XXX-SUM-ZCR-CD bold;
        converseLib.validationFailed(325); /* Must enter at least one of 3 keys*/
        NLXREC.NLXERRF = "Y";
      end
    end
  end
end // end NK0A-220

// Determine next action
Function NK0A-230()
   /* **************************************/
   /* Determine next action from hdr 1*/
   /* **************************************/

  NLXREC.NLXCPROC = "NK0A-230";

  set NKWREC empty; /* Prepare For Transfer*/

  if (converseVar.eventKey is pf3) /* Return To Map 100*/
    NLXREC.NLXSCRNX = 1;
    NLXREC.NLXCSCRN = "NK0AM100";
    NLXREC.NLXEOSF = "Y";
    NLXREC.NLXERRF = "N"; /* Clear Error Message*/
    COMMAREA.CAUSERA = " ";
    return;
  end

  if (converseVar.eventKey is pf4) /* Xfer to MN0M*/
    NLXREC.NLXEOSF = "Y";
    COMMAREA.CATOAP = "MN0M";
    COMMAREA.CAUSERA = " ";
    XPNL002();
    return;
  end

  if (converseVar.eventKey is pf12) /* Edit Only*/
    return;
  end

  if (converseVar.eventKey is pf20) /* Xfer to NL0A*/
    NLXREC.NLXEOSF = "Y";
    COMMAREA.CATOAP = "NL0A";
    COMMAREA.CAUSERA = " ";
    XPNL002();
    return;
  end

  if (converseVar.eventKey is enter) /* Claim Selection List*/
    if (NK0AM200.KUCCOID != 0)
      NKWREC.KUCCOID = NK0AM200.KUCCOID;
      NKWREC.NKW-SEL-KUCCOID = NK0AM200.KUCCOID;

      if (NK0AM200.KUMSTRID != 0)
        NKWREC.KUMSTRID = NK0AM200.KUMSTRID;
        NKWREC.NKW-SEL-KUMSTRID = NK0AM200.KUMSTRID;
      end

      if (NK0AM200.KUCCONM != " ")
        NKWREC.KUCCONM = NK0AM200.KUCCONM;
      end

      if (NK0AM200.XCTDESC != " ")
        NKWREC.XCTDESC = NK0AM200.XCTDESC;
      end

    end

    if (NK0AM200.NIDIVCID != 0)
      NKWREC.NKW-SEL-NIDIVCID = NK0AM200.NIDIVCID;
    end

    if (NK0AM200.XXX-SUM-ZCR-CD != "  ")
      NKWREC.XXX-SUM-ZCR-CD = NK0AM200.XXX-SUM-ZCR-CD;
      NKWREC.NKW-SEL-XXX-SUM-ZCR-CD = NK0AM200.XXX-SUM-ZCR-CD;
    end

    if (NK0AM200.ZCR-CLM-RSN-CD != "  ")
      NKWREC.ZCR-CLM-RSN-CD = NK0AM200.ZCR-CLM-RSN-CD;
      NKWREC.NKW-SEL-ZCR-CLM-RSN-CD = NK0AM200.ZCR-CLM-RSN-CD;
    end

    if (NK0AM200.ZCS-CLM-STAT-CD != "  ")
      NKWREC.ZCS-CLM-STAT-CD = NK0AM200.ZCS-CLM-STAT-CD;
      NKWREC.NKW-SEL-ZCS-CLM-STAT-CD = NK0AM200.ZCS-CLM-STAT-CD;
    end

    if (NK0AM200.NK0AM-200-FROM-CMDY != 0)
      /* MOVE NK0AM200.NK0AM-200-FROM-CMDY TO*/
      NKWREC.NKW-SEL-FM-ZZZSDT = NK0AW-01-CMDYF;
    end

    if (NK0AM200.NK0AM-200-TO-CMDY != 0)
      /* MOVE NK0AM200.NK0AM-200-TO-CMDY TO*/
      NKWREC.NKW-SEL-TO-ZZZSDT = NK0AW-01-CMDYT;
    end

    if (NK0AM200.NK0AM-200-FROM-PMDY != 0)
      /* MOVE NK0AM200.NK0AM-200-FROM-PMDY TO*/
      NKWREC.NKW-SEL-FM-NL-CLM-PRT-DT = NK0AW-01-PMDYF;
    end

    if (NK0AM200.NK0AM-200-TO-PMDY != 0)
      /* MOVE NK0AM200.NK0AM-200-TO-PMDY TO*/
      NKWREC.NKW-SEL-TO-NL-CLM-PRT-DT = NK0AW-01-PMDYT;
    end

    if (NK0AM200.NK0AM-200-FROM-GMDY != 0)
      /* MOVE NK0AM200.NK0AM-200-FROM-GMDY TO*/
      NKWREC.NKW-SEL-FM-NIAGLPMO = NK0AW-01-GMDYF;
    end

    if (NK0AM200.NK0AM-200-TO-GMDY != 0)
      /* MOVE NK0AM200.NK0AM-200-TO-GMDY TO*/
      NKWREC.NKW-SEL-TO-NIAGLPMO = NK0AW-01-GMDYT;
    end

    if (NK0AM200.XGPCD != "  ")
      NKWREC.NKW-SEL-XGPCD = NK0AM200.XGPCD;
    end

    if (NK0AM200.SY1STNBR != "  ")
      NKWREC.NKW-SEL-SY-STY-NBR = NK0AM200.SY1STNBR;
    end

    if (NK0AM200.SY2CLRID != "  ")
      NKWREC.NKW-SEL-SY-COLR-CD-ID = NK0AM200.SY2CLRID;
    end

    if (NK0AM200.XDMCD != "  ")
      NKWREC.NKW-SEL-XDM-DIM-CD = NK0AM200.XDMCD;
    end

    NLXREC.NLXEOSF = "Y";
    COMMAREA.CATOAP = "NK0F";
    NKW-FROM-APP = "A200";
    NKWREC.NKW-PROCESS-FL = "S"; /* Build Selection List*/
    COMMAREA.CAUSERA = NKWREC.NKW-GROUP;
    XPNL002();
    return;
  end

  NLXREC.NLXERRF = "Y";
  converseLib.validationFailed(2);


end // end NK0A-230

// Select NIDREC Row
Function NK0AS-C1-VNCIVX01()

  NLXREC.NLXCPROC = "NK0AS-C1-VNCIVX01";

  call "IO6510" ("C1", SQLCA, VNCIVX01) {isNoRefresh = yes, isExternal = yes}; /* close cursor*/

  if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = "C1     "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "IO6510 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO "; /* data base*/
    TA1REC.TA1TBLVU = "VNCIVX01"; /* table view*/
    XPNL005(); /* abend routine*/
  end

end // end NK0AS-C1-VNCIVX01

// Validate Claim Type
Function NK0AS-CHECK-ZCR()

  NLXREC.NLXCPROC = "NK0AS-CHECK-ZCR";

  call "IO2640" ("S1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes}; /* Declare Cursor*/

  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "S1     "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "IO2640 "; /* io module*/
    TA1REC.TA1DBASE = "DCORP "; /* data base*/
    TA1REC.TA1TBLVU = "VSUMCD01"; /* table view*/
    XPNL005(); /* abend routine*/
  end

  call "IO2640" ("N1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes}; /* Select row*/

  if (SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(4); /* data base busy*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 0) /* Claim Type Found*/
     /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* Claim Type Not Found*/
        NLXREC.NLXERRF = "Y";
        converseLib.validationFailed(275);
      else
        if (SQLCA.VAGen_SQLCODE != 0
         && SQLCA.VAGen_SQLCODE != 100)
          TA1REC.TA1LOCAT[2] = "N1     "; /* data base action*/
          TA1REC.TA1LOCAT[3] = "IO2640 "; /* io module*/
          TA1REC.TA1DBASE = "DCORP "; /* data base*/
          TA1REC.TA1TBLVU = "VSUMCD01"; /* table view*/
          XPNL005(); /* abend routine*/
        end
      end
    end
  end

  call "IO2640" ("C1", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes}; /* Close cursor*/

  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "C1     "; /* data base action*/
    TA1REC.TA1LOCAT[3] = "IO2640 "; /* io module*/
    TA1REC.TA1DBASE = "DCORP "; /* data base*/
    TA1REC.TA1TBLVU = "VSUMCD01"; /* table view*/
    XPNL005(); /* abend routine*/
  end

end // end NK0AS-CHECK-ZCR

// Select NIDREC Row
Function NK0AS-N1-VNCIVX01()

  NLXREC.NLXCPROC = "NK0AS-N1-VNCIVX01";

  call "IO6510" ("N1", SQLCA, VNCIVX01) {isNoRefresh = yes, isExternal = yes}; /* fetch cursor*/

  if (SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(4); /* data base busy*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 0
     || SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
    else
      TA1REC.TA1LOCAT[2] = "N1     "; /* data base action*/
      TA1REC.TA1LOCAT[3] = "IO6510 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO "; /* data base*/
      TA1REC.TA1TBLVU = "VNCIVX01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end

end // end NK0AS-N1-VNCIVX01

// Select NIDREC Row
Function NK0AS-S1-VNCIVX01()

  NLXREC.NLXCPROC = "NK0AS-S1-VNCIVX01";

  call "IO6510" ("S1", SQLCA, VNCIVX01) {isNoRefresh = yes, isExternal = yes}; /* declare cursor*/

  if (SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(4); /* data base busy*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
    else
      TA1REC.TA1LOCAT[2] = "S1     "; /* data base action*/
      TA1REC.TA1LOCAT[3] = "IO4460 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO "; /* data base*/
      TA1REC.TA1TBLVU = "VNLIVX01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end

end // end NK0AS-S1-VNCIVX01

// Select Unique - KUCREC
Function NK0AS-SEL-CUST()
   /* ************************/
   /* KUCREC - Select Unique*/
   /* ************************/

  NLXREC.NLXCPROC = "NK0AS-SEL-CUST";

  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* Read Customer*/

  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0240 "; /* io module*/
    TA1REC.TA1DBASE = "DCUST"; /* database*/
    TA1REC.TA1TBLVU = "VCMPNY01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NK0AS-SEL-CUST

// Select Unique - KUMREC
Function NK0AS-SEL-STORE()
   /* ************************/
   /* KUMREC - Select Unique*/
   /* ************************/

  NLXREC.NLXCPROC = "NK0AS-SEL-STORE";

  call "IO0340" ("S ", SQLCA, KUMREC) {isNoRefresh = yes, isExternal = yes}; /* Read Store*/

  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0340 "; /* io module*/
    TA1REC.TA1DBASE = "DCUST"; /* database*/
    TA1REC.TA1TBLVU = "VSTORE01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NK0AS-SEL-STORE

// Select Unique - PG2REC
Function NK0AS-SEL-STYLE()
   /* ************************/
   /* PG2REC - Select Unique*/
   /* ************************/

  NLXREC.NLXCPROC = "NK0AS-SEL-STYLE";

  call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes}; /* Read Style*/

  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO3120 "; /* io module*/
    TA1REC.TA1DBASE = "DPRODG"; /* database*/
    TA1REC.TA1TBLVU = "VSYCLR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NK0AS-SEL-STYLE

// Select NIDREC Row
Function NK0AS-SEL-VMIHDR01()

  NLXREC.NLXCPROC = "NK0AS-SEL-VMIHDR01";

  call "IO4440" ("S ", SQLCA, VMIHDR01) {isNoRefresh = yes, isExternal = yes}; /* Select unique*/

  if (SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(4); /* data base busy*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(12); /* Invoice Not Found*/
      else
        TA1REC.TA1LOCAT[2] = "S      "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "IO4440 "; /* io module*/
        TA1REC.TA1DBASE = "DNILO "; /* data base*/
        TA1REC.TA1TBLVU = "VMIHDR01"; /* table view*/
        XPNL005(); /* abend routine*/
      end
    end
  end

end // end NK0AS-SEL-VMIHDR01

// Select VRCVGL01 Row
Function NK0AS-SEL-VNCHDR01()

  NLXREC.NLXCPROC = "NK0AS-SEL-VNCHDR01";

  call "IO6460" ("S ", SQLCA, VNCHDR01) {isNoRefresh = yes, isExternal = yes}; /* Select unique*/

  if (SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(4); /* data base busy*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(276); /* Not Valid Claim Id*/
      else
        TA1REC.TA1LOCAT[2] = "S      "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "IO6460 "; /* io module*/
        TA1REC.TA1DBASE = "DNILO "; /* data base*/
        TA1REC.TA1TBLVU = "VNCHDR01"; /* table view*/
        XPNL005(); /* abend routine*/
      end
    end
  end

end // end NK0AS-SEL-VNCHDR01

// Select NIDREC Row
Function NK0AS-SEL-VPIHDR01()

  NLXREC.NLXCPROC = "NK0AS-SEL-VPIHDR01";

  call "IO4470" ("S ", SQLCA, VPIHDR01) {isNoRefresh = yes, isExternal = yes}; /* Select unique*/

  if (SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(4); /* data base busy*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(12); /* Invoice Not Found*/
      else
        TA1REC.TA1LOCAT[2] = "S      "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "IO4470 "; /* io module*/
        TA1REC.TA1DBASE = "DNILO "; /* data base*/
        TA1REC.TA1TBLVU = "VPIHDR01"; /* table view*/
        XPNL005(); /* abend routine*/
      end
    end
  end

end // end NK0AS-SEL-VPIHDR01

// Select unique on VSUMCD01
Function NK0AS-SEL-VSUMCD01()
   /* *****************************************************/
   /* Select unique on the sumcd table*/
   /* *****************************************************/

  NLXREC.NLXCPROC = "NK0AS-SEL-VSUMCD01";

   /* Select VSUMCD01*/

  call "IO2640" ("S ", SQLCA, YSMREC) {isNoRefresh = yes, isExternal = yes}; /* select on sumcode*/

  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DCORP";
    TA1REC.TA1TBLVU = "VSUMCD01";
    TA1REC.TA1TBLKE = YSMGRP;
    XPNL005(); /* abort routine*/
  end

end // end NK0AS-SEL-VSUMCD01

// converse zcs pop up window
Function XPZCS01()
   /* ------------------------------------------------------------*/

         /* CONVERSE POP UP WINDOW FOR BASE ORDER TYPE*/

      /* 1) If no errors, clear the map and set up for*/
         /* scrolling.  If PF7, PF8, or first time through,*/
         /* scroll the table.*/
      /* 2) Converse the map.*/
      /* 3) Reset selection fields to normal after converse.*/
      /* 4) Check for PFkey and scroll errors.*/
      /* 5) If ENTER pressed, check for any user selections.*/

   /* ------------------------------------------------------------*/

   /* **********************************************************/
   /* ***  If no errors clear page and set up for scrolling ****/
   /* **********************************************************/

  if (XX0XW02.XX0XWERR == "N") /* If error flag not yes*/

     /* **********************************************************/
     /* *** Make sure table count is set for next page.       ****/
     /* *** Clear map and set up header for new scroll screen.****/
     /* **********************************************************/

    if (XX0XW02.XX0XWFFL == "N") /* if not the first time through*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[10] + 1; /* set up scroll pf8*/
    end

    set XX0XM001 initial; /* Clear map output area*/
    XX0XM001.XX0XMHDR = XX0XW02.XX0XWHDR; /* Place heading on map*/
    XX0XM001.XX0XMTR1 = "              SELECT & ENTER          ";
    XX0XM001.XX0XMTR2 = "   PF7:BACK                   PF8:FRWD";

     /* *********************************************************/
     /* ***      If PF8 was pressed then scroll forward      ****/
     /* *********************************************************/

    if (converseVar.eventKey is pf8 /* If PF8 pressed*/
     || XX0XW02.XX0XWFFL == "Y")    /* Or it is the first time thru*/
      XX0XW02.XX0XWCT2 = 1; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 <= 10 /* Until end of screen lines*/
       && ZCSTBL.ZCS-CLM-STAT-CD[XX0XWCT1] != "99") /* Or end of data*/
        if (ZCSTBL.XXXSTAT[XX0XWCT1] == "A") /* If active status on code*/
          XX0XM001.XX0XMCD[XX0XWCT2] = ZCSTBL.ZCS-CLM-STAT-CD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = ZCSTBL.ZCS-CLM-STAT-DESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          if (XX0XW02.XX0XWFFL == "Y") /* If first time thru*/
            XX0XW02.XX0XWSIX = XX0XW02.XX0XWCT1; /* Save last index*/
          end
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set selects to normal*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
                                   /* Increment screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 + 1; /* Increment table index*/
      end
      XX0XW02.XX0XWFFL = "N"; /* Set first time flag to no*/
    end

     /* ******************************************************/
     /* ***    If PF7 was pressed then scroll backward    ****/
     /* ******************************************************/

    if (converseVar.eventKey is pf7) /* If PF7 pressed*/
      XX0XW02.XX0XWCT1 = XX0XW02.XX0XWINX[1] - 1; /* Set up table index*/
      XX0XW02.XX0XWCT2 = 10; /* Set up screen index*/
      while (XX0XW02.XX0XWCT2 >= 1) /* Load from the bottom up*/
        if (ZCSTBL.XXXSTAT[XX0XWCT1] == "A") /* If the status is active*/
          XX0XM001.XX0XMCD[XX0XWCT2] = ZCSTBL.ZCS-CLM-STAT-CD[XX0XWCT1];
          XX0XM001.XX0XMDES[XX0XWCT2] = ZCSTBL.ZCS-CLM-STAT-DESC[XX0XWCT1];
          XX0XW02.XX0XWINX[XX0XWCT2] = XX0XW02.XX0XWCT1;
                                   /* Save array*/
          set XX0XM001.XX0XMSEL[XX0XWCT2] normal; /* Set select visible*/
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 - 1;
                                   /* Decrement screen index*/
        end
        XX0XW02.XX0XWCT1 = XX0XW02.XX0XWCT1 - 1; /* Decrement table index*/
      end
      if (XX0XW02.XX0XWCT1 < 1) /* If the table index was decremented*/
        XX0XW02.XX0XWCT1 = 1;
                                   /* to zero, set it up to 1 (valid value)*/
      end
    end
  end


  converse XX0XM001 ;

  XX0XW02.XX0XWERR = "N"; /* Reset error flag*/

     /* *********************************************************/
     /* ******  Reset selection fields after converse     *******/
     /* *********************************************************/

  XX0XW02.XX0XWCT2 = 1; /* Screen index*/
  while (XX0XW02.XX0XWCT2 <= 10 /* Set all fields with data to normal*/
   && XX0XM001.XX0XMCD[XX0XWCT2] != " ")
    set XX0XM001.XX0XMSEL[XX0XWCT2] normal;
    XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
  end

    /* *********************************************************/
    /* ******  Check for PFkey errors and scroll errors  *******/
    /* *********************************************************/

  if (converseVar.eventKey is pf8 /* If PF8 pressed*/
   && ZCSTBL.ZCS-CLM-STAT-CD[XX0XWCT1] == "99") /* And end of table*/
    XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
  else
    if (converseVar.eventKey is pf7 /* If PF7 pressed*/
     && XX0XW02.XX0XWINX[1] <= XX0XW02.XX0XWSIX)
      XX0XW02.XX0XWERR = "Y"; /* Set error flag*/
    else
      if (converseVar.eventKey is enter) /* If enter pressed*/
        XX0XW02.XX0XWEND = "Y"; /* Set end flag*/

         /* *********************************************************/
         /* ******          Check for user selection          *******/
         /* *********************************************************/

        XX0XW02.XX0XWCT2 = 1; /* Screen index*/
        while (XX0XW02.XX0XWCT2 <= 10) /* Until end of screen data*/
          if (XX0XM001.XX0XMSEL[XX0XWCT2] == "S") /* Check for selection*/
            XX0XW02.XX0XWPIX = XX0XW02.XX0XWINX[XX0XWCT2];
            XX0XW02.XX0XWCT2 = 11; /* End loop*/
          end
          XX0XW02.XX0XWCT2 = XX0XW02.XX0XWCT2 + 1;
        end
      else
        if (converseVar.eventKey not pf7 /* invalid pf key*/
         && converseVar.eventKey not pf8 
         && converseVar.eventKey not enter)
          XX0XW02.XX0XWERR = "Y"; /* set error flag*/
        end
      end
    end
  end


end // end XPZCS01

//*** RECORD=NK0AW01 ****
// This is the main working storage record for NK0A.
// ***********************
Record NK0AW01 type basicRecord
  5 NK0AW-01-IER NK0AW-01-IER ; 
  5 NK0AW-01-NER NK0AW-01-NER ; 
  5 NK0AW-01-PER NK0AW-01-PER ; 
  5 NK0AW-01-PMY NK0AW-01-PMY ; 
    10 NK0AW-01-PMO NK0AW-01-PMO ; 
    10 NK0AW-01-PYR NK0AW-01-PYR ; 
  5 NK0AW-01-DAT NK0AW-01-DAT ; 
    10 NK0AW-01-MON NK0AW-01-MON ; 
    10 NK0AW-01-DAY NK0AW-01-DAY ; 
    10 NK0AW-01-YER NK0AW-01-YER ; 
  5 NK0AW-01-DT9 NK0AW-01-DT9 ; 
    10 NK0AW-01-CEN NK0AW-01-CEN ; 
    10 NK0AW-01-YR9 NK0AW-01-YR9 ; 
    10 NK0AW-01-MN9 NK0AW-01-MN9 ; 
    10 NK0AW-01-DY9 NK0AW-01-DY9 ; 
  5 NK0AW-01-CMDYF NK0AW-01-CMDYF ; 
  5 NK0AW-01-CMDYT NK0AW-01-CMDYT ; 
  5 NK0AW-01-PMDYF NK0AW-01-PMDYF ; 
  5 NK0AW-01-PMDYT NK0AW-01-PMDYT ; 
  5 NK0AW-01-GMDYF NK0AW-01-GMDYF ; 
  5 NK0AW-01-GMDYT NK0AW-01-GMDYT ; 
  5 NK0AW-01-FYYMM NK0AW-01-FYYMM ; 
    10 NK0AW-01-FYY NK0AW-01-FYY ; 
    10 NK0AW-01-FMM NK0AW-01-FMM ; 
  5 NK0AW-01-TYYMM NK0AW-01-TYYMM ; 
    10 NK0AW-01-TYY NK0AW-01-TYY ; 
    10 NK0AW-01-TMM NK0AW-01-TMM ; 
  5 NK0AW-01-CUST-ALPHA NK0AW-01-CUST-ALPHA ; 
    10 NK0AW-01-CUST-NUM NK0AW-01-CUST-NUM ; 
  5 NK0AW-01-STOR-ALPHA NK0AW-01-STOR-ALPHA ; 
    10 NK0AW-01-STOR-NUM NK0AW-01-STOR-NUM ; 
end // end NK0AW01

// always '019'
DataItem NK0AW-01-CEN char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Claim from date
DataItem NK0AW-01-CMDYF num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Claim to date
DataItem NK0AW-01-CMDYT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Customer alphanumeric
DataItem NK0AW-01-CUST-ALPHA num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Customer numeric
DataItem NK0AW-01-CUST-NUM num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// W/S version of date
DataItem NK0AW-01-DAT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Day
DataItem NK0AW-01-DAY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// W/S version of cymd
DataItem NK0AW-01-DT9 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Day
DataItem NK0AW-01-DY9 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Month
DataItem NK0AW-01-FMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Year
DataItem NK0AW-01-FYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// From year month
DataItem NK0AW-01-FYYMM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// post from date
DataItem NK0AW-01-GMDYF num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// post to date
DataItem NK0AW-01-GMDYT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Claims Dates error
DataItem NK0AW-01-IER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Month
DataItem NK0AW-01-MN9 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Month
DataItem NK0AW-01-MON char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Print Dates error
DataItem NK0AW-01-NER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Posting Dates error
DataItem NK0AW-01-PER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// print from date
DataItem NK0AW-01-PMDYF num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// print to date
DataItem NK0AW-01-PMDYT num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// G/L Posting month
DataItem NK0AW-01-PMO num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// G/L Posting month/year
DataItem NK0AW-01-PMY num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// G/l Posting year
DataItem NK0AW-01-PYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Store alphanumeric
DataItem NK0AW-01-STOR-ALPHA num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Store numeric
DataItem NK0AW-01-STOR-NUM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Month
DataItem NK0AW-01-TMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Year
DataItem NK0AW-01-TYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// To year month
DataItem NK0AW-01-TYYMM num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Year
DataItem NK0AW-01-YER char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Year
DataItem NK0AW-01-YR9 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

