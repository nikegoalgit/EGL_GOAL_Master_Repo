package nk0f;

import corpcom2.XX0XW01;
import corpcom2.XZCREC;
import corpcom3.XPNK-002;
import corpcom3.XPNL-006;
import corpcom3.XPNL002;
import corpcom3.XPNL004;
import corpcom3.XPNL005;
import corpcom4.XSENTRY;
import corpcom4.XSNKS-MAP-MODE;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XCLTBL;
import corpx1.XCTTBL;
import corpx1.XLATBL;
import corpz3.ZCSTBL;
import ku.common.KUCREC;
import nk.common.NK1TBL;
import nk.common.NKWREC;
import nl.common.*;
import ta.common.TA1REC;
import ta.common.TA2REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
import vv.common.VNCADJ01;
import vv.common.VNCDEF01;
import vv.common.VNCHDR01;
import vv.common.VNCIVX01;
import vv.common.VNCSTY01;
//*** PROGRAM=NK0F ****
// ************************************************************
// 
//   NK0F - International Claims Selection List Screen
//   -------------------------------------------------
// General program explanation and notes:
// 
//   This application will be used to select claims to be
// maintained or approved. Three access paths lead to this
// screen:
//   NK0AM100 with a list of claims awaiting approval for the
//  security level of the current user.
//   NK0AM200 with selection criteria to create a list.
//   Fast Path entry with a valid customer number.
// 
//    The approval list will be created from the user's
// security level and the claim status. Claims will be
// selected for the list if the approval identification
// for the current user's security level on the claims header
// is spaces and the claim status on the claims header is
// PA, SD, SA, CD, CA.
// ------------------------------------------------------------
// Maintenance History:
// --------------------
//   Date   Who    Remarks
// -------- ------ --------------------------------------------
// 09-21-92 jjudki New application.
// 03-29-93 KSHAW  Changed approval display from V to A.
// 04-12-93 dkingm set file to send to nk1070.
// 04-26-93 KSHAW  Added claim amt to screen.
// 05-11-93 DKINGM added XZCTBL (corp calendar) to change
//                 XPNK-002.
// 01-12-94 JSHANN Recompiled to pick up change to XPNK-002
// 03-08-94 kshaw  Recompiled for march db changes.
// *********************
Program NK0F type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "NL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  NK0FW02 NK0FW02; // record
  NK0FW03 NK0FW03; // record
  NK0FW04 NK0FW04; // record
  NK0FW05 NK0FW05; // record
  NKWREC NKWREC; // record
  NLXREC NLXREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VNCADJ01 VNCADJ01; // record
  VNCDEF01 VNCDEF01; // record
  VNCHDR01 VNCHDR01; // record
  VNCIVX01 VNCIVX01; // record
  VNCSTY01 VNCSTY01; // record
  XX0XW01 XX0XW01; // record
  XZCREC XZCREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use NK1TBL {deleteAfterUse = yes}; // table
  use XCLTBL {deleteAfterUse = yes}; // table
  use XLATBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use ZCSTBL {deleteAfterUse = yes}; // table
  use NK0FM.NK0FM100 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    NK0F-000: NK0F-000();
    exit program;
  end // end main
end // end NK0F

// Application main logic
Function NK0F-000()
   /* -----------------------------------------------------------*/
      /* This is the "main logic" for the application.*/
  ;
      /* xsentry checks to ensure that this application was*/
            /* entered from another csp application.*/
  ;
   /* -----------------------------------------------------------*/
  ;
  NLXREC.NLXCPROC = "NK0F-000";
  ;
  NK0F-001(); /* Initialize the application*/
  ;
  NLXREC.NLXEOAF = "N"; /* set end-of-application flag to 'no'*/
  ;
  while (NLXREC.NLXEOAF == "N") /* while not end-of-aplication*/
    NK0F-050(); /* screen branch control*/
  end
  ;
  XSPF4();
  ;
end // end NK0F-000

// Initialize application
Function NK0F-001()
   /* -----------------------------------------------------------*/
         /* Initialize the application working storage*/
  ;
   /* -----------------------------------------------------------*/
  NLXREC.NLXCPROC = "NK0F-001";
  ;
  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen*/
                                   /* converse*/
  VGVar.handleHardIOErrors = 1; /* return control to program if hard db2*/
                                   /* error*/
  ;
  XSENTRY(); /* check entry thru main menu*/
  XSSEGTR(); /* set segmented transaction id*/
  ;
  set SQLCA empty; /* clear out the "common" working*/
                                   /* storage*/
  set ERRSQLCA empty; /* clear out the "common" working*/
                                   /* storage*/
  set TA1REC empty; /* clear out the "common" working*/
                                   /* storage*/
  set NLXREC empty; /* clear out the "common" working*/
                                   /* storage*/
  set NK0FW02 empty;
  set NK0FW03 empty;
  set NK0FW04 empty;
  set NK0FW05 empty;
  set KUCREC empty;
  set NKWREC empty;
  set VNCADJ01 empty;
  set VNCDEF01 empty;
  set VNCHDR01 empty;
  set VNCIVX01 empty;
  set VNCSTY01 empty;
  ;
  if (COMMAREA.CAFRMSYS != "NK")
    COMMAREA.CAUSERA = " ";
    if (COMMAREA.CAITEM == " ") /**/
      NKWREC.NKW-MSG-NBR = 32; /* Clear work area for key*/
      COMMAREA.CATOAP = "NK0A";
      COMMAREA.CAUSERA = NKWREC.NKW-GROUP;
      XPNL002();
    end
  end
  ;
  NLXREC.NLXEOAF = "N"; /* set end-of-application flag 'no'*/
  NLXREC.NLXERRF = "N"; /* set error-flag to 'no'*/
  ;
  NK0FS-SEC-LVL(); /* Check Security Level For User Id*/
  ;
   /* ------------------------------------------------------*/
    /* Set up working-storage array of screen names*/
   /* ------------------------------------------------------*/
  ;
  NLXREC.NLXCSCRN = "NK0FM100"; /* first header*/
  ;
  NLXREC.NLXSNAME[1] = "NK0FM100";
                                   /* init screens used in this applic.*/
  ;
   /* **********************************************/
   /* Was this application entered via 'fastpath'?*/
   /* **********************************************/
  ;
  if (COMMAREA.CAITEM != " ") /* 'Item' will be non-blank if fastpath*/
    NKW-PROCESS-FL = "S"; /* Prepare For Selection List Build*/
    XPNL004(); /* Validate caitem numeric*/
    if (NLXREC.NLXERRF == "Y") /* If error in 'item'*/
      NKWREC.NKW-MSG-NBR = 32; /* Clear work area for key*/
      COMMAREA.CATOAP = "NK0A";
      COMMAREA.CAUSERA = NKWREC.NKW-GROUP;
      XPNL002();
    else
      NK0FW02.NK0FW-02-KUCCOID-NUM = COMMAREA.CAITEM;
      KUCREC.KUCCOID = NK0FW02.NK0FW-02-KUCCOID-NUM;
      NK0FS-SEL-CUST(); /* Validate Customer Id*/
      if (SQLCA.VAGen_SQLCODE == 100)
        NLXREC.NLXERRF = "Y";
        NKWREC.NKW-MSG-NBR = 98;
        COMMAREA.CAUSERA = " ";
        COMMAREA.CATOAP = "NK0A"; /* Claim Create/Inquiry/Maint.*/
        XPNL002();
        return;
      else
        NKWREC.NKW-SEL-KUCCOID = KUCREC.KUCCOID;
        NKWREC.KUCCOID = KUCREC.KUCCOID;
      end
      ;
    end
    ;
    COMMAREA.CATOAP = " "; /* Clear commarea*/
    COMMAREA.CAITEM = " ";
    ;
  else /* Normal function key transfer in*/
    if (COMMAREA.CAUSERA != " ")
      NKWREC.NKW-GROUP = COMMAREA.CAUSERA;
      ;
      if (NKWREC.NKW-MSG-NBR > 0
       && COMMAREA.CAFRMSYS == "NF")
        NLXREC.NLXERRF = "Y";
        NLXREC.NLXCSCRN = "NK0FM100";
        return;
      end
    else
      NKWREC.NKW-MSG-NBR = 32; /* Clear work area for key*/
      COMMAREA.CATOAP = "NK0A";
      COMMAREA.CAUSERA = NKWREC.NKW-GROUP;
      XPNL002();
      ;
    end
  end
end // end NK0F-001

// Screen branch control
Function NK0F-050()
   /* -----------------------------------------------------------*/
      /* Control process the application screen(s)*/
  ;
     /* Note that this process is being performed in a*/
     /* "while loop" until the end-of-application flag is set*/
     /* to 'y'.*/
  ;
   /* -----------------------------------------------------------*/
  ;
  NLXREC.NLXCPROC = "NK0F-050"; /* set current process name*/
  ;
  sysVar.arrayIndex = 0;
  NLXREC.NLXSCRNX = 0;
  ;
  if (NLXREC.NLXCSCRN in NLXREC.NLXSNAME)
     /* if current-screen-name is in the screen-array, then set*/
     /* the screen-index*/
    NLXREC.NLXSCRNX = sysVar.arrayIndex;
  end
  ;
  NLXREC.NLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
  NLXREC.NLXBLDSC = "Y"; /* set build screen flag to 'yes'*/
  NLXREC.NLXERRF = "N"; /* clear error flag*/
  ;
  if (NLXREC.NLXSCRNX == 1) /* if screen NK0FM100*/
    while (NLXREC.NLXEOSF == "N") /* while not end-of-screen*/
      NK0F-100();
    end
  end
  ;
   /* at this point;*/
       /* if the end-of-application flag (nlxeoaf ) = 'n'*/
         /* the perform will return to the top of NK0%050...*/
       /* else*/
         /* the perform will auto return to NK0%000.*/
  ;
  ;
end // end NK0F-050

// Claims Selection List
Function NK0F-100()
   /* -----------------------------------------------------------*/
       /* Process screen NK0FM100*/
  ;
     /* note - this process is being performed in a*/
        /* "while loop" from NK0F050 until the end-of-screen*/
        /* flag (nlxeosfl) is set to 'y'.*/
  ;
   /* -----------------------------------------------------------*/
  ;
  NLXREC.NLXCPROC = "NK0F-100";
  ;
  if (NLXREC.NLXBLDSC == "Y")
    NK0F-101();
    NLXREC.NLXBLDSC = "N";
  end
  ;
  converse NK0FM100 ;
  ;
  NK0FM100.VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";
  ;
  ;
  NK0F-110(); /* check attention identifier*/
  ;
  if (NLXREC.NLXERRF == "N") /* check for error*/
    NK0F-120(); /* process entered option*/
  end
  ;
  if (NLXREC.NLXERRF == "N") /* check for error*/
    NK0F-130(); /* determine next action...*/
  end
  ;
  ;
end // end NK0F-100

// Build screen
Function NK0F-101()
   /* **************************************/
   /* Build MAP NK0FM100                 **/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NK0F-101";
  ;
  converseLib.clearScreen();
  set NK0FM100 initial;
  ;
  NK0FM100.XXXRVNBR = "00"; /* revision nbr*/
  NK0FM100.XXXMAPNM = "NK0FM100"; /* map name*/
  NK0FM100.XXXPRCNM = "NK0F-100"; /* process name*/
  NK0FM100.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  ;
  XSNKS-MAP-MODE(); /* Common Routine To Set Map Mode*/
  ;
  NK0FW02.NK0FW-02-NL-CLM-ID-HLD = 0; /* Previous Claim Id*/
  NK0FW02.NK0FW-02-LCNT = 0; /* Screen Line Count*/
  NK0FW02.NK0FW-02-CCNT = 0; /* Total Claim Count*/
  NK0FW02.NK0FW-02-NL-CLM-ID = 0; /* Previous Claim Id*/
  NK0FW02.NK0FW-02-PCNT = 1; /* Screen Page Count*/
  NK0FW02.NK0FW-02-DX1 = 1;
  ;
  NK0FW-02-W05SIZE = 788; /* Temp Storage Size For Map100*/
  NK0FW-02-NEXT-PAGE-NBR = 1; /* Current Page Number*/
  NK0FW-02-INDEX = 0;
  ;
  if (COMMAREA.CAFROMAP == "NK0B")
    move NKW-HIGH-PAGE-NBR to NK0FW-02-HIGH-PAGE-NBR withV60Compat;
    move NKW-CURRENT-PAGE-NBR to NK0FW-02-NEXT-PAGE-NBR withV60Compat;
    set VNCHDR01 empty;
    VNCHDR01.NL-CLM-ID = NKWREC.NL-CLM-ID;
    NK0FS-S-VNCHDR01();
    NK0FS-LOAD-MAP();
    ;
  else
    ;
    NK0FS-DEL-TMP-STG(); /* Delete temp storage prior to writing*/
    ;
    NK0FS-OPEN-VNCHDR(); /* Select Correct Cursor*/
    ;
    if (NLXERRF != "Y")
      while (SQLCA.VAGen_SQLCODE == 0)
        NK0FS-NEXT-VNCHDR(); /* Fetch All Claims Into Temp Storage*/
        if (SQLCA.VAGen_SQLCODE == 0)
          NK0FS-BLD-TMP-STG(); /* Load Claim Hdr Info Temp Storage*/
        end
      end
      ;
      NK0FS-CLOSE-VNCHDR(); /* Close Claims Header Cursor*/
    end
    ;
    if (NK0FW-02-INDEX > 0)
      NK0FS-ADD-TMP-STG();
    end
    ;
    NK0FM100.NK0FM-TO-PAGE = NK0FW-02-HIGH-PAGE-NBR;
    ;
   /* Load Screen Of Claims*/
    set NK0FW05 empty;
    if (NK0FW-02-HIGH-PAGE-NBR > 0
     && NK0FW-02-NEXT-PAGE-NBR <= NK0FW-02-HIGH-PAGE-NBR)
      NK0FS-GET-TMP-STG();
    end
    ;
    NK0FS-LOAD-MAP();
    ;
    NK0FW02.NK0FW-02-NOT = "NOTE: ";
    NK0FW02.NK0FW-02-REM = " CLAIMS HAVE BEEN SELECTED ";
    NK0FM100.VAGen_EZEMSG = NK0FW02.NK0FW-02-MSG;
    ;
  end
  ;
  NK0FM100.NK0FM-FM-PAGE = NK0FW-02-NEXT-PAGE-NBR;
  NK0FM100.NK0FM-TO-PAGE = NK0FW-02-HIGH-PAGE-NBR;
  ;
  ;
end // end NK0F-101

// Validate PF keys; act on some
Function NK0F-110()
   /* -----------------------------------------------------------*/
     /* Validate PF keys*/
  ;
     /* Active PF keys: 1, 3, 4, 5, 20*/
   /* -----------------------------------------------------------*/
  NLXREC.NLXCPROC = "NK0F-110";
  ;
  set NK0FM100.CATOAP initialAttributes;
  set NK0FM100.CAITEM initialAttributes;
  ;
   /* ***********************************/
      /* check for fastpath option/item*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is enter /* Xfer To NK0B*/
   || converseVar.eventKey is pf1   /* Help*/
   || converseVar.eventKey is pf3   /* Return To NK0A*/
   || converseVar.eventKey is pf4   /* Xfer To MN0M*/
   || converseVar.eventKey is pf5   /* Approval Of The Selected Claims*/
   || converseVar.eventKey is pf7   /* Page Back*/
   || converseVar.eventKey is pf8   /* Page Forward*/
   || converseVar.eventKey is pf20) /* Xfer to NL0A*/
    /* next sentence*/
  else
    NLXREC.NLXERRF = "Y"; /* Set Error Flag*/
    converseLib.validationFailed(2); /* Invalid PF Key Used*/
    return;
  end
  ;
  if (NK0FM100.CATOAP != " ") /* if fastpath option entered,*/
    if (converseVar.eventKey is enter)
      NK0FS-DEL-TMP-STG(); /* Purge Temp Storage Before Exit*/
      COMMAREA.CATOAP = NK0FM100.CATOAP;
      COMMAREA.CAITEM = NK0FM100.CAITEM;
      COMMAREA.CAUSERA = " ";
      XPNL002(); /* exit application*/
      NLXREC.NLXEOSF = "Y";
      COMMAREA.CATOAP = "NL0A"; /* go to previous level*/
      COMMAREA.CAUSERA = " ";
      XPNL002(); /* exit*/
      return;
    end
  end
  ;
  if (converseVar.eventKey is enter /* Valid Non-transfer PF Keys*/
   || converseVar.eventKey is pf5   /* Approval Of Selected Claims*/
   || converseVar.eventKey is pf7   /* Page Back*/
   || converseVar.eventKey is pf8)  /* Page Forward*/
    return;
  end
  ;
  if (converseVar.eventKey is pf1 /* Help*/
   || converseVar.eventKey is pf3 /* Return To NK0A*/
   || converseVar.eventKey is pf4 /* Xfer To MN0M*/
   || converseVar.eventKey is pf20) /* Xfer to NL0A*/
    NK0FS-DEL-TMP-STG(); /* Purge Temp Storage Before Exit*/
  end
  ;
  if (converseVar.eventKey is pf1) /* skip edit/updt, go to 'help'*/
    XSPF1(); /* exit*/
  end
  ;
  if (converseVar.eventKey is pf3)
    NLXREC.NLXEOSF = "Y";
    COMMAREA.CATOAP = COMMAREA.CAFROMAP; /* go to previous appl*/
    COMMAREA.CATOAP = "NK0A"; /* go to previous level*/
    COMMAREA.CAFROMAP = "NK0F"; /* Go To NK0A Map200 Selection List*/
    /* MOVE ' ' TO COMMAREA.CAUSERA;*/
    COMMAREA.CAUSERA = NKWREC.NKW-GROUP;
    XPNL002(); /* exit*/
  end
  ;
  if (converseVar.eventKey is pf4) /* go to master menu*/
    NLXREC.NLXEOSF = "Y";
    COMMAREA.CAUSERA = " "; /* exit*/
    XSPF4();
  end
  ;
  if (converseVar.eventKey is pf20)
    NLXREC.NLXEOSF = "Y";
    COMMAREA.CATOAP = "NL0A"; /* go to previous level*/
    COMMAREA.CAUSERA = " ";
    XPNL002(); /* exit*/
  end
  ;
      /* pf key not valid*/
  ;
  converseLib.validationFailed(2); /* pf key not valid*/
  NLXREC.NLXERRF = "Y"; /* mark with error*/
  ;
  ;
end // end NK0F-110

// Edit/Act on function keys
Function NK0F-120()
   /* *****************************************************/
   /* Edit Claims Screen Entries*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0F-120";
  ;
  NK0FW-02-HSF = "  ";
  converseLib.validationFailed(0);
  ;
  NK0FW02.NK0FW-02-INDEX = 14; /* Initialize screen*/
  while (NK0FW02.NK0FW-02-INDEX > 0)
    if (NK0FM100.NL-CLM-ID[NK0FW-02-INDEX] == 0)
      set NK0FM100.NK0FM-100-SEL[NK0FW-02-INDEX] skip, invisible;
    else
      set NK0FM100.NK0FM-100-SEL[NK0FW-02-INDEX] normal;
    end
    NK0FW02.NK0FW-02-INDEX = NK0FW02.NK0FW-02-INDEX - 1;
  end
  if (NK0FW-05-NL-CLM-ID[1] == 
  NK0FW-05-PREV-NL-CLM-ID[1])
    set NK0FM100.NK0FM-100-SEL[1] skip, invisible;
  end
  set NK0FM100.NK0FM-FM-PAGE normal;
  set NK0FM100.NK0FM-100-SEL[1] cursor;
  ;
  NK0FW-02-INDEX = 14; /* Edit screen in reverse order...*/
  while (NK0FW02.NK0FW-02-INDEX > 0) /* For all screen entries*/
    if (NK0FM100.NK0FM-100-SEL[NK0FW-02-INDEX] == " ") /* Not selected*/
      NK0FW-05-SEL[NK0FW-02-INDEX] = NK0FM100.NK0FM-100-SEL[NK0FW-02-INDEX];
      NK0FW-05-EZEMNO[NK0FW-02-INDEX] = 0;
    else /* Make sure 'A' and 'S' not mixed*/
      if (NK0FM100.NK0FM-100-SEL[NK0FW-02-INDEX] == "A"
       || NK0FM100.NK0FM-100-SEL[NK0FW-02-INDEX] == "S"
       || NK0FM100.NK0FM-100-SEL[NK0FW-02-INDEX] == "V")
        if (NK0FM100.NK0FM-100-SEL[NK0FW-02-INDEX] == "S") /* Change Status*/
          if (converseVar.eventKey is pf5)
              /* next command*/
          end
          if (NK0FW02.NK0FW-02-SL == "Y")
            if (NK0FW-02-HSF != "S"
             && NK0FW-05-EZEMNO[NK0FW-02-INDEX] == 0)
              NK0FW-02-HSF = NK0FM-100-SEL[NK0FW-02-INDEX];
            end
          end
        else
              /* claim either already viewed or row not modified*/
          if (NK0FM100.NK0FM-100-SEL[NK0FW-02-INDEX] == "V"
           || NK0FM100.NK0FM-100-SEL[NK0FW-02-INDEX] == "A")
            if (NK0FM100.NK0FM-100-SEL[NK0FW-02-INDEX] is modified)
              set NK0FM100.NK0FM-100-SEL[NK0FW-02-INDEX] cursor, bold, modified;
              converseLib.validationFailed(342); /* Must Be 'S'*/
              NLXREC.NLXERRF = "Y";
            end
              /* next sentence*/
          else
            if (NK0FM100.NK0FM-100-SEL[NK0FW-02-INDEX] == "S")
                                   /* Selected*/
              NK0FW-02-HSF = NK0FM-100-SEL[NK0FW-02-INDEX];
            else
              converseLib.validationFailed(342); /* Must Be 'S'*/
              NLXREC.NLXERRF = "Y";
              set NK0FM100.NK0FM-100-SEL[NK0FW-02-INDEX] cursor, bold, modified;
            end
          end
        end
      else
        NLXREC.NLXERRF = "Y";
        converseLib.validationFailed(342); /* Must Be 'S'*/
        NK0FW-05-EZEMNO[NK0FW-02-INDEX] = 342;
        set NK0FM100.NK0FM-100-SEL[NK0FW-02-INDEX] cursor, bold, modified;
      end
    end
    NK0FW02.NK0FW-02-INDEX = NK0FW02.NK0FW-02-INDEX - 1; /* Decrement*/
  end
  ;
  if (NK0FW02.NK0FW-02-HSF == "A"
   || NK0FW02.NK0FW-02-HSF == "V")
    if (converseVar.eventKey is pf5
     || converseVar.eventKey is pf7
     || converseVar.eventKey is pf8
     || converseVar.eventKey is enter)
  /* next sentence*/
    else
      converseLib.validationFailed(2); /* Invalid PF key*/
      NLXREC.NLXERRF = "Y";
    end
  end
  ;
   /* Make Sure User Entered Page Is Within Correct Range*/
  if (NK0FM100.NK0FM-FM-PAGE < 1
   || NK0FM100.NK0FM-FM-PAGE > NK0FW-02-HIGH-PAGE-NBR)
    converseLib.validationFailed(296); /* Page Number Out Of Range*/
    set NK0FM100.NK0FM-FM-PAGE cursor, bold;
    NLXREC.NLXERRF = "Y";
  end
  ;
end // end NK0F-120

// Determine next action
Function NK0F-130()
  ;
  NLXREC.NLXCPROC = "NK0F-130";
  ;
  converseLib.validationFailed(0);
  ;
   /* Move Current Map Fields To TEMP STORAGE*/
  NK0FW02.NK0FW-02-INDEX = 1;
  while (NK0FW02.NK0FW-02-INDEX < 15)
    NK0FW-05-SEL[NK0FW-02-INDEX] = NK0FM100.NK0FM-100-SEL[NK0FW-02-INDEX];
    if (NK0FM100.NK0FM-100-SEL[NK0FW-02-INDEX] == " ")
      NK0FW-05-EZEMNO[NK0FW-02-INDEX] = 0;
    end
    NK0FW-05-NL-CLM-ID[NK0FW-02-INDEX] = NK0FM100.NL-CLM-ID[NK0FW-02-INDEX];
    NK0FW-05-KUCCOID[NK0FW-02-INDEX] = NK0FM100.KUCCOID[NK0FW-02-INDEX];
    NK0FW-05-NIDIVCID[NK0FW-02-INDEX] = NK0FM100.NIDIVCID[NK0FW-02-INDEX];
    NK0FW-05-ZDTCD[NK0FW-02-INDEX] = NK0FM100.ZDTCD[NK0FW-02-INDEX];
    NK0FW-05-ZCS-CLM-STAT-CD[NK0FW-02-INDEX] = NK0FM100.ZCS-CLM-STAT-CD[NK0FW-02-INDEX];
    NK0FW-05-SUP-AFL[NK0FW-02-INDEX] = NK0FM100.NK0FM-100-SUP-AFL[NK0FW-02-INDEX];
    NK0FW-05-CRD-AFL[NK0FW-02-INDEX] = NK0FM100.NK0FM-100-CRD-AFL[NK0FW-02-INDEX];
    NK0FW-05-ACC-AFL[NK0FW-02-INDEX] = NK0FM100.NK0FM-100-ACC-AFL[NK0FW-02-INDEX];
    NK0FW-05-CMDY[NK0FW-02-INDEX] = NK0FM100.NK0FM-100-CMDY[NK0FW-02-INDEX];
    NK0FW-05-PMY[NK0FW-02-INDEX] = NK0FM100.NK0FM-100-PMY[NK0FW-02-INDEX];
    ;
    if (NK0FW-05-NL-CLM-ID[NK0FW-02-INDEX] != 0)
      NK0FW-02-NL-CLM-ID-HLD = NK0FW-05-NL-CLM-ID[NK0FW-02-INDEX];
    end
    ;
    NK0FW02.NK0FW-02-INDEX = NK0FW02.NK0FW-02-INDEX + 1;
    ;
  end
  ;
  NK0FS-UPDT-TMP-STG(); /* Update Temp Storage With Map Changes*/
  ;
  if (NLXERRF != "Y"
   && converseVar.eventKey is pf5)
    COMMAREA.CAFROMAP = "  ";
    NK0FW02.NK0FW-02-EPG = 0; /* Initialize Error Page Pointer*/
    NK0FS-APPROVALS();
    NK0FS-LOAD-MAP();
  end
  ;
  ;
  if (converseVar.eventKey is pf7) /* Page Backward*/
    if (NK0FW-02-NEXT-PAGE-NBR == 1)
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(29); /* Already At Top*/
    else
      NK0FW-02-NEXT-PAGE-NBR = NK0FW-02-NEXT-PAGE-NBR - 1;
      NK0FS-LOAD-MAP();
    end
  end
  ;
  if (converseVar.eventKey is pf8) /* Page Forward*/
    set NK0FW05 empty;
    NK0FW-02-PPG = NK0FW-02-NEXT-PAGE-NBR + 1;
    if (NK0FW-02-PPG > NK0FW-02-HIGH-PAGE-NBR)
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(30); /* Already At Bottom*/
    else
      NK0FW-02-NEXT-PAGE-NBR = NK0FW-02-NEXT-PAGE-NBR + 1;
      NK0FS-LOAD-MAP();
    end
  end
  ;
  if (converseVar.eventKey is enter)
    if (NK0FM100.NK0FM-FM-PAGE is modified)
      if (NK0FM100.NK0FM-FM-PAGE < 1
       || NK0FM100.NK0FM-FM-PAGE > NK0FM100.NK0FM-TO-PAGE)
        NLXREC.NLXERRF = "Y";
        set NK0FM100.NK0FM-FM-PAGE cursor, bold;
        converseLib.validationFailed(296); /* Entered Page Is Out Of Range*/
        return;
      else
        NK0FW-02-NEXT-PAGE-NBR = NK0FM100.NK0FM-FM-PAGE;
        NK0FS-LOAD-MAP();
      end
    else
      NK0FS-SELECTED(); /* Find First Selected Non-Viewed Claim*/
   /* Prepare For Transfer*/
      if (NK0FW-02-END == "Y")
        NKWREC.NKW-CURRENT-PAGE-NBR = NK0FW-02-NEXT-PAGE-NBR;
        NKWREC.NKW-HIGH-PAGE-NBR = NK0FW-02-HIGH-PAGE-NBR;
        COMMAREA.CAUSERA = NKWREC.NKW-GROUP;
        NLXREC.NLXEOSF = "Y";
        COMMAREA.CATOAP = "NK0B";
        XPNL002();
      else
        NLXREC.NLXERRF = "Y";
        converseLib.validationFailed(349); /* No Claims Were Selected*/
      end
    end
  end
  ;
  ;
end // end NK0F-130

// Add temp storage
Function NK0FS-ADD-TMP-STG()
   /* ***********************************************************************/
   /* Write temp storage*/
   /*  */
   /*  */
   /* ***********************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0FS-ADD-TMP-STG";
  ;
  move NK0FW-02-W05SIZE to NK0FW-05-LENGTH withV60Compat;
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  ;
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (NK0FW05, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    NK0FW-02-HIGH-PAGE-NBR = TA5REC.TA5TSQIX; /* Save high page Nbr*/
    return; /* Return to previous process*/
    ;
  else
    ;
   /* ------------------------------------------------------------*/
    /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
    ;
    converseLib.validationFailed(299); /* Indicate system error*/
    ;
    XPNL-006(); /* abend routine*/
    ;
  end
  ;
end // end NK0FS-ADD-TMP-STG

// Update Status Per Approval Lvl
Function NK0FS-APPROVALS()
  ;
  ;
  NLXREC.NLXCPROC = "NK0FS-APPROVALS";
  ;
   /* Edit All Claims Temp Storage Rows From Last Page Up To First*/
   /* Looking For First Page With Update Approval Errors*/
  ;
  NK0FW-02-UFL = "N"; /* Initialize Update Flag*/
  ;
  NK0FW-02-NL-CLM-ID = 0;
  move NK0FW-02-NEXT-PAGE-NBR to NK0FW-02-SUB withV60Compat; /* Save Current Page Number*/
  move NK0FW-02-HIGH-PAGE-NBR to NK0FW-02-NEXT-PAGE-NBR withV60Compat; /* Start At Last*/
  while (NK0FW-02-NEXT-PAGE-NBR > 0)
    set NK0FW05 empty;
    NK0FS-GET-TMP-STG();
    NK0FW-02-INDEX = 14;
    while (NK0FW02.NK0FW-02-INDEX > 0)
      if (NK0FW-05-SEL[NK0FW-02-INDEX] == "S"
       && NK0FW-05-NL-CLM-ID[NK0FW-02-INDEX] != 0)
        NK0FS-CHK-STAT();
        if (NK0FW-05-EZEMNO[NK0FW-02-INDEX] == 294)
          NK0FW-05-SEL[NK0FW-02-INDEX] = "A";
        end
      end
      NK0FW02.NK0FW-02-INDEX = NK0FW02.NK0FW-02-INDEX - 1;
    end
    NK0FS-UPDT-TMP-STG();
    NK0FW-02-NEXT-PAGE-NBR = NK0FW-02-NEXT-PAGE-NBR - 1;
  end
  ;
  if (NK0FW-02-UFL == "N") /* No Update Errors*/
    NK0FW-02-HSF = "  "; /* Reset W/S Previous Screen Function*/
  end
  ;
  move NK0FW-02-SUB to NK0FW-02-NEXT-PAGE-NBR withV60Compat; /* Restore Current Page Number*/
  ;
end // end NK0FS-APPROVALS

// Build VNCSTY temp storage
Function NK0FS-BLD-TMP-STG()
   /* ***********************************************************************/
   /* Build temp storage*/
   /*  */
   /* ***********************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0FS-BLD-TMP-STG";
  ;
  NK0FW-02-INDEX = NK0FW-02-INDEX + 1; /* M100 display storage*/
  ;
  NK0FW-05-NIDIVCID[NK0FW-02-INDEX] = NK0FW-04-NIDIVCID;
  ;
  ;
  NK0FW-05-UPD-FL[NK0FW-02-INDEX] = "N";
  ;
  if (NK0FW-04-NL-CLM-ID == NK0FW-02-NL-CLM-ID)
    /* next sentence*/
  else
    NK0FW-05-KUCCOID[NK0FW-02-INDEX] = NK0FW-04-KUCCOID;
    NK0FW-05-NL-CLM-ID[NK0FW-02-INDEX] = NK0FW-04-NL-CLM-ID;
    NK0FW-05-ZDTCD[NK0FW-02-INDEX] = NK0FW-04-XXX-SUM-ZCR-CD;
    NK0FW-05-ZCS-CLM-STAT-CD[NK0FW-02-INDEX] = NK0FW-04-ZCS-CLM-STAT-CD;
    if (NK0FW-04-XXXUSID2 != "        ")
      NK0FW-05-SUP-AFL[NK0FW-02-INDEX] = "Y";
    else
      NK0FW-05-SUP-AFL[NK0FW-02-INDEX] = "N";
    end
    if (NK0FW-04-XXX-USER-ID3 != "        ")
      NK0FW-05-CRD-AFL[NK0FW-02-INDEX] = "Y";
    else
      NK0FW-05-CRD-AFL[NK0FW-02-INDEX] = "N";
    end
    if (NK0FW-04-XXX-USER-ID4 != "        ")
      NK0FW-05-ACC-AFL[NK0FW-02-INDEX] = "Y";
    else
      NK0FW-05-ACC-AFL[NK0FW-02-INDEX] = "N";
    end
    ;
    NK0FW-02-PDA = 0;
    NK0FW-02-PDT = "         ";
    ;
    if (NK0FW-04-ZZZSDT > 0)
      NK0FW02.NK0FW-02-PDA = NK0FW-04-ZZZSDT;
      NK0FW02.NK0FW-02-PRY = NK0FW02.NK0FW-02-PYY;
      NK0FW02.NK0FW-02-PRM = NK0FW02.NK0FW-02-PMM;
      NK0FW02.NK0FW-02-PRD = NK0FW02.NK0FW-02-PDD;
      NK0FW02.NK0FW-02-PS1 = "-";
      NK0FW02.NK0FW-02-PS2 = "-";
      NK0FW-05-CMDY[NK0FW-02-INDEX] = NK0FW02.NK0FW-02-PDT;
    end
    ;
    NK0FW-02-PDA = 0;
    NK0FW-02-PDT = "         ";
    ;
    if (NK0FW-04-NIAGLPMO > 0)
      NK0FW02.NK0FW-02-PDA = NK0FW-04-NIAGLPMO;
      NK0FW02.NK0FW-02-PRY = NK0FW02.NK0FW-02-PDD;
      NK0FW02.NK0FW-02-PRM = NK0FW02.NK0FW-02-PMM;
      NK0FW02.NK0FW-02-PRD = NK0FW02.NK0FW-02-PYY;
      NK0FW02.NK0FW-02-PS1 = "-";
      NK0FW02.NK0FW-02-PS2 = "-";
      NK0FW-05-PMY[NK0FW-02-INDEX] = NK0FW02.NK0FW-02-PDT;
    end
    NK0FW-05-NL-CLM-AMT[NK0FW-02-INDEX] = NK0FW-04-NL-CLM-AMT;
    ;
    NK0FW-02-PDA = 0;
    NK0FW-02-PDT = "         ";
    ;
    NK0FW-05-PAGE[NK0FW-02-INDEX] = NK0FW-02-NEXT-PAGE-NBR;
    ;
    NK0FW-05-PREV-NL-CLM-ID[NK0FW-02-INDEX] = NK0FW-04-NL-CLM-ID;
    ;
    move NK0FW-04-NL-CLM-ID to NK0FW-02-NL-CLM-ID withV60Compat;
    NK0FW-02-CCNT = NK0FW-02-CCNT + 1;
  end
  ;
  NK0FW-05-PREV-NL-CLM-ID[NK0FW-02-INDEX] = NK0FW-02-NL-CLM-ID-HLD;
  ;
  if (NK0FW-02-INDEX == 14)
    move NK0FW-04-NL-CLM-ID to NK0FW-02-NL-CLM-ID-HLD withV60Compat;
    NK0FS-ADD-TMP-STG();
    set NK0FW05 empty;
    NK0FW-02-INDEX = 0;
    NK0FW-02-NL-CLM-ID = 0;
  end
  ;
  ;
end // end NK0FS-BLD-TMP-STG

// Check Status Update Authority
Function NK0FS-CHK-STAT()
   /* *****************************************************/
   /* Edit Claims Screen Entries*/
   /* *****************************************************/
  NLXREC.NLXCPROC = "NK0FS-CHK-STAT ";
  ;
  VNCHDR01.NL-CLM-ID = NK0FW-05-NL-CLM-ID[NK0FW-02-INDEX];
  XPNK-002();
  NK0FW-05-EZEMNO[NK0FW-02-INDEX] = converseVar.validationMsgNum;
  if (converseVar.validationMsgNum != 294)
    NK0FW02.NK0FW-02-EPG = NK0FW-05-PAGE[NK0FW-02-INDEX];
    NLXREC.NLXERRF = "Y";
    set NK0FM-100-SEL[NK0FW-02-INDEX] cursor, bold;
  end
  if (VNCHDR01.ZCS-CLM-STAT-CD != 
  NK0FW-05-ZCS-CLM-STAT-CD[NK0FW-02-INDEX])
    NK0FW-05-SEL[NK0FW-02-INDEX] = "V";
    if (VNCHDR01.XXXUSID2 > "  ")
      NK0FW-05-SUP-AFL[NK0FW-02-INDEX] = "Y";
    else
      NK0FW-05-SUP-AFL[NK0FW-02-INDEX] = "N";
    end
    if (VNCHDR01.XXX-USER-ID3 > "  ")
      NK0FW-05-CRD-AFL[NK0FW-02-INDEX] = "Y";
    else
      NK0FW-05-CRD-AFL[NK0FW-02-INDEX] = "N";
    end
    if (VNCHDR01.XXX-USER-ID4 > "  ")
      NK0FW-05-ACC-AFL[NK0FW-02-INDEX] = "Y";
    else
      NK0FW-05-ACC-AFL[NK0FW-02-INDEX] = "N";
    end
  end
  NK0FW-05-ZCS-CLM-STAT-CD[NK0FW-02-INDEX] = VNCHDR01.ZCS-CLM-STAT-CD;
  ;
end // end NK0FS-CHK-STAT

// Close VNCHDR01 cursor
Function NK0FS-CLOSE-VNCHDR()
  ;
  NLXREC.NLXCPROC = "NK0FS-CLOSE-VNCHDR";
  ;
  NK0FW03.NK0FW-03-IO-TASK = NK0FW-02-IO-CLOSE;
  ;
   /* Close cursor for CLAIM header*/
  call "NK1070" (NK0FW03, SQLCA, NK0FW04) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = NK0FW-02-CLOSE-ACTION; /* database action*/
    TA1REC.TA1LOCAT[3] = "NK1070 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VNCHDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
  ;
end // end NK0FS-CLOSE-VNCHDR

// PURGE TEMP STORAGE
Function NK0FS-DEL-TMP-STG()
   /* ***********************************************************************/
   /* PURGE temp storage*/
   /*  */
   /*  */
   /* ***********************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0FS-DEL-TMP-STG";
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  ;
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (NK0FW05, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.validationFailed(299); /* Indicate system error*/
  ;
  XPNL-006(); /* abend routine*/
  ;
  ;
end // end NK0FS-DEL-TMP-STG

// Get m100 temp storage
Function NK0FS-GET-TMP-STG()
   /* ***********************************************************************/
   /*  */
   /* Get temp storage for current page*/
   /*  */
   /* ***********************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0FS-GET-TMP-STG";
  TA1REC.TA1LOC = "NK0FS-GET-TMP-STG";
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  ;
  move NK0FW-02-W05SIZE to NK0FW-05-LENGTH withV60Compat;
  TA5REC.TA5TSQIX = NK0FW-02-NEXT-PAGE-NBR; /* Page number to fetch*/
  ;
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (NK0FW05, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  else
    ;
   /* ------------------------------------------------------------*/
    /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
    ;
    converseLib.validationFailed(299); /* Indicate system error*/
    ;
    XPNL-006(); /* abend routine*/
    ;
  end
  ;
end // end NK0FS-GET-TMP-STG

// Load Map From Array
Function NK0FS-LOAD-MAP()
  ;
  NLXREC.NLXCPROC = "NK0FS-LOAD-MAP";
  ;
  set NK0FW05 empty;
  converseLib.validationFailed(0);
  ;
  if (NK0FW-02-HIGH-PAGE-NBR > 0
   && NK0FW-02-NEXT-PAGE-NBR <= NK0FW-02-HIGH-PAGE-NBR)
    NK0FS-GET-TMP-STG();
  end
  ;
  NK0FW-02-INDEX = 1;
  while (NK0FW-02-INDEX < 15)
    set NK0FM100.NK0FM-100-SEL[NK0FW-02-INDEX] normal;
    NK0FW02.NK0FW-02-INDEX = NK0FW02.NK0FW-02-INDEX + 1;
  end
  set NK0FM100.CAITEM normal;
  set NK0FM100.CATOAP cursor, normal;
  ;
  NK0FW-02-INDEX = 14;
  while (NK0FW02.NK0FW-02-INDEX > 0)
    NK0FM100.NK0FM-100-SEL[NK0FW-02-INDEX] = NK0FW-05-SEL[NK0FW-02-INDEX];
    if (NK0FW-05-NL-CLM-ID[NK0FW-02-INDEX] == 0
     || NK0FW-05-NL-CLM-ID[NK0FW-02-INDEX] == 
    NK0FW-05-PREV-NL-CLM-ID[NK0FW-02-INDEX])
      set NK0FM100.NK0FM-100-SEL[NK0FW-02-INDEX] skip, invisible;
    else
      set NK0FM100.NK0FM-100-SEL[NK0FW-02-INDEX] cursor;
    end
    NK0FM100.NL-CLM-ID[NK0FW-02-INDEX] = NK0FW-05-NL-CLM-ID[NK0FW-02-INDEX];
    NK0FM100.KUCCOID[NK0FW-02-INDEX] = NK0FW-05-KUCCOID[NK0FW-02-INDEX];
    NK0FM100.NIDIVCID[NK0FW-02-INDEX] = NK0FW-05-NIDIVCID[NK0FW-02-INDEX];
    NK0FM100.NK0FM-100-CMDY[NK0FW-02-INDEX] = NK0FW-05-CMDY[NK0FW-02-INDEX];
    NK0FM100.NK0FM-100-PMY[NK0FW-02-INDEX] = NK0FW-05-PMY[NK0FW-02-INDEX];
    NK0FM100.NL-CLM-AMT[NK0FW-02-INDEX] = NK0FW-05-NL-CLM-AMT[NK0FW-02-INDEX];
    ;
    if (VNCHDR01.NL-CLM-ID == NK0FW-05-NL-CLM-ID[NK0FW-02-INDEX]
     && VNCHDR01.NL-CLM-ID != 0)
      /* MOVE VNCHDR01.ZDTCD TO*/
      NK0FM100.ZDTCD[NK0FW-02-INDEX] = VNCHDR01.XXX-SUM-ZCR-CD;
      NK0FM100.ZCS-CLM-STAT-CD[NK0FW-02-INDEX] = VNCHDR01.ZCS-CLM-STAT-CD;
      if (VNCHDR01.XXXUSID2 > "  ")
        NK0FM100.NK0FM-100-SUP-AFL[NK0FW-02-INDEX] = "Y";
      else
        NK0FM100.NK0FM-100-SUP-AFL[NK0FW-02-INDEX] = "N";
      end
      if (VNCHDR01.XXX-USER-ID3 > "  ")
        NK0FM100.NK0FM-100-CRD-AFL[NK0FW-02-INDEX] = "Y";
      else
        NK0FM100.NK0FM-100-CRD-AFL[NK0FW-02-INDEX] = "N";
      end
      if (VNCHDR01.XXX-USER-ID4 > "  ")
        NK0FM100.NK0FM-100-ACC-AFL[NK0FW-02-INDEX] = "Y";
      else
        NK0FM100.NK0FM-100-ACC-AFL[NK0FW-02-INDEX] = "N";
      end
    else
      /* MOVE NK0FW-05-XXX-SUM-ZCR-CD(NK0FW-02-INDEX) TO*/
      NK0FM100.ZDTCD[NK0FW-02-INDEX] = NK0FW-05-ZDTCD[NK0FW-02-INDEX];
      NK0FM100.ZCS-CLM-STAT-CD[NK0FW-02-INDEX] = NK0FW-05-ZCS-CLM-STAT-CD[NK0FW-02-INDEX];
      NK0FM100.NK0FM-100-SUP-AFL[NK0FW-02-INDEX] = NK0FW-05-SUP-AFL[NK0FW-02-INDEX];
      NK0FM100.NK0FM-100-CRD-AFL[NK0FW-02-INDEX] = NK0FW-05-CRD-AFL[NK0FW-02-INDEX];
      NK0FM100.NK0FM-100-ACC-AFL[NK0FW-02-INDEX] = NK0FW-05-ACC-AFL[NK0FW-02-INDEX];
    end
    ;
    NK0FW02.NK0FW-02-INDEX = NK0FW02.NK0FW-02-INDEX - 1;
  end
  ;
  NK0FW-02-INDEX = 14;
  while (NK0FW02.NK0FW-02-INDEX > 0)
    if (COMMAREA.CAFROMAP == "NK0B")
      if (NK0FM100.NK0FM-100-SEL[NK0FW-02-INDEX] == "A")
        NK0FW-05-EZEMNO[NK0FW-02-INDEX] = 0;
      end
    end
    if (NK0FW-05-EZEMNO[NK0FW-02-INDEX] != 0)
      if (NK0FW-05-EZEMNO[NK0FW-02-INDEX] == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(NK0FW-05-EZEMNO[NK0FW-02-INDEX]);
      end
      NLXREC.NLXERRF = "Y";
      if (NK0FW-05-EZEMNO[NK0FW-02-INDEX] == 310)
        set NK0FM100.NK0FM-100-SEL[NK0FW-02-INDEX] cursor;
      else
        set NK0FM100.NK0FM-100-SEL[NK0FW-02-INDEX] cursor, bold;
      end
    end
    NK0FW02.NK0FW-02-INDEX = NK0FW02.NK0FW-02-INDEX - 1;
  end
  ;
  NK0FM100.NK0FM-FM-PAGE = NK0FW-02-NEXT-PAGE-NBR;
  ;
  ;
end // end NK0FS-LOAD-MAP

// Fetch next VNCHDR01 row
Function NK0FS-NEXT-VNCHDR()
  ;
  NLXREC.NLXCPROC = "NK0FS-N1-VNCHDR01";
  ;
   /* read cursor -*/
  ;
  set NK0FW04 empty;
  ;
   /* format key for invoice header table*/
  NK0FW03.NK0FW-03-IO-TASK = NK0FW-02-IO-FETCH;
  ;
   /* Read cursor for CLAIM header*/
  call "NK1070" (NK0FW03, SQLCA, NK0FW04) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE == 0
   || SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    TA1REC.TA1LOCAT[2] = NK0FW-02-FETCH-ACTION; /* database action*/
    TA1REC.TA1LOCAT[3] = "NK1070 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VNCHDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
  ;
end // end NK0FS-NEXT-VNCHDR

// declare VNCHDR01 cursor
Function NK0FS-OPEN-VNCHDR()
   /*  */
  NLXREC.NLXCPROC = "NK0FS-OPEN-VNCHDR";
  ;
   /* declare and read cursor -*/
  ;
  set NK0FW03 empty;
  set NK0FW04 empty;
  ;
   /* format key for Claims Header table*/
  if (NKW-PROCESS-FL == "S")
    NK0FW-02-IO-CURSOR = "S1"; /* Build Claims Selection List*/
    NK0FW-02-IO-FETCH = "N1";
    NK0FW-02-IO-CLOSE = "C1";
    NK0FW-02-OPEN-ACTION = "OPEN SELECTION LIST ";
    NK0FW-02-FETCH-ACTION = "FETCH SELECTION LIST ";
    NK0FW-02-CLOSE-ACTION = "CLOSE SELECTION LIST ";
    ;
    if (NKWREC.NKW-SEL-KUCCOID > 0)
      NK0FW03.NK0FW-03-KUCCOID = NKWREC.NKW-SEL-KUCCOID;
    else
      NK0FW03.NK0FW-03-KUCCOID = 0;
    end
    ;
    if (NKWREC.NKW-SEL-KUMSTRID > 0)
      NK0FW03.NK0FW-03-KUMSTRID = NKWREC.NKW-SEL-KUMSTRID;
    else
      NK0FW03.NK0FW-03-KUMSTRID = 0;
    end
    ;
    if (NKWREC.NKW-SEL-NIDIVCID > 0)
      NK0FW03.NK0FW-03-NIDIVCID = NKWREC.NKW-SEL-NIDIVCID;
    else
      NK0FW03.NK0FW-03-NIDIVCID = 0;
    end
    ;
    if (NKWREC.NKW-SEL-XXX-SUM-ZCR-CD > "   ")
      NK0FW03.NK0FW-03-XXX-SUM-ZCR-CD = NKWREC.NKW-SEL-XXX-SUM-ZCR-CD;
    else
      NK0FW03.NK0FW-03-XXX-SUM-ZCR-CD = "  ";
    end
    ;
    if (NKWREC.NKW-SEL-ZCR-CLM-RSN-CD > "  ")
      NK0FW03.NK0FW-03-ZCR-CLM-RSN-CD = NKWREC.NKW-SEL-ZCR-CLM-RSN-CD;
    else
      NK0FW03.NK0FW-03-ZCR-CLM-RSN-CD = "  ";
    end
    ;
    if (NKWREC.NKW-SEL-ZCS-CLM-STAT-CD > "  ")
      NK0FW03.NK0FW-03-ZCS-CLM-STAT-CD = NKWREC.NKW-SEL-ZCS-CLM-STAT-CD;
    else
      NK0FW03.NK0FW-03-ZCS-CLM-STAT-CD = "  ";
    end
    ;
    if (NKWREC.NKW-SEL-FM-ZZZSDT > 0)
      NK0FW03.NK0FW-03-FM-ZZZSDT = NKWREC.NKW-SEL-FM-ZZZSDT;
    else
      NK0FW03.NK0FW-03-FM-ZZZSDT = 0;
    end
    ;
    if (NKWREC.NKW-SEL-TO-ZZZSDT > 0)
      NK0FW03.NK0FW-03-TO-ZZZSDT = NKWREC.NKW-SEL-TO-ZZZSDT;
    else
      NK0FW03.NK0FW-03-TO-ZZZSDT = 99999999;
    end
    ;
    if (NKWREC.NKW-SEL-FM-NL-CLM-PRT-DT > 0)
      NK0FW03.NK0FW-03-FM-NL-CLM-PRT-DT = NKWREC.NKW-SEL-FM-NL-CLM-PRT-DT;
    else
      NK0FW03.NK0FW-03-FM-NL-CLM-PRT-DT = 0;
    end
    ;
    if (NKWREC.NKW-SEL-TO-NL-CLM-PRT-DT > 0)
      NK0FW03.NK0FW-03-TO-NL-CLM-PRT-DT = NKWREC.NKW-SEL-TO-NL-CLM-PRT-DT;
    else
      NK0FW03.NK0FW-03-TO-NL-CLM-PRT-DT = 99999999;
    end
    ;
    if (NKWREC.NKW-SEL-FM-NIAGLPMO > 0)
      NK0FW03.NK0FW-03-FM-NIAGLPMO = NKWREC.NKW-SEL-FM-NIAGLPMO;
    else
      NK0FW03.NK0FW-03-FM-NIAGLPMO = 0;
    end
    ;
    if (NKWREC.NKW-SEL-TO-NIAGLPMO > 0)
      NK0FW03.NK0FW-03-TO-NIAGLPMO = NKWREC.NKW-SEL-TO-NIAGLPMO;
    else
      NK0FW03.NK0FW-03-TO-NIAGLPMO = 99999999;
    end
    ;
    if (NKWREC.NKW-SEL-XGPCD > "   ")
      NK0FW03.NK0FW-03-XGP-GPC-CD = NKWREC.NKW-SEL-XGPCD;
    else
      NK0FW03.NK0FW-03-XGP-GPC-CD = "      ";
    end
    ;
    if (NKWREC.NKW-SEL-SY-STY-NBR > "   ")
      NK0FW03.NK0FW-03-SY-STY-NBR = NKWREC.NKW-SEL-SY-STY-NBR;
    else
      NK0FW03.NK0FW-03-SY-STY-NBR = "      ";
    end
    ;
    if (NKWREC.NKW-SEL-SY-COLR-CD-ID > "  ")
      NK0FW03.NK0FW-03-SY-COLR-CD-ID = NKWREC.NKW-SEL-SY-COLR-CD-ID;
    else
      NK0FW03.NK0FW-03-SY-COLR-CD-ID = "   ";
    end
    ;
    if (NKWREC.NKW-SEL-XDM-DIM-CD > "  ")
      NK0FW03.NK0FW-03-XDM-DIM-CD = NKWREC.NKW-SEL-XDM-DIM-CD;
    else
      NK0FW03.NK0FW-03-XDM-DIM-CD = "  ";
    end
    ;
    if (NKWREC.NKW-SEL-GLAENT > "  ")
      NK0FW03.NK0FW-03-GLAENT = NKWREC.NKW-SEL-GLAENT;
    else
      NK0FW03.NK0FW-03-GLAENT = "   ";
    end
    ;
    if (NKWREC.NKW-SEL-GLARCID > "  ")
      NK0FW03.NK0FW-03-GLARCID = NKWREC.NKW-SEL-GLARCID;
    else
      NK0FW03.NK0FW-03-GLARCID = "    ";
    end
    ;
    if (NKWREC.NKW-SEL-GLANTAC > "  ")
      NK0FW03.NK0FW-03-GLANTAC = NKWREC.NKW-SEL-GLANTAC;
    else
      NK0FW03.NK0FW-03-GLANTAC = "   ";
    end
    ;
    if (NKWREC.NKW-SEL-GLASUB > "  ")
      NK0FW03.NK0FW-03-GLASUB = NKWREC.NKW-SEL-GLASUB;
    else
      NK0FW03.NK0FW-03-GLASUB = "   ";
    end
    ;
    if (NKWREC.NKW-SEL-GLAPRJ > "  ")
      NK0FW03.NK0FW-03-GLAPRJ = NKWREC.NKW-SEL-GLAPRJ;
    else
      NK0FW03.NK0FW-03-GLAPRJ = "  ";
    end
    ;
  else
    if (NKWREC.NKW-SEL-KUCCOID > 0)
      NK0FW03.NK0FW-03-KUCCOID = NKWREC.NKW-SEL-KUCCOID;
    else
      NK0FW03.NK0FW-03-KUCCOID = 0;
    end
    ;
    if (NKWREC.NKW-SEL-KUMSTRID > 0)
      NK0FW03.NK0FW-03-KUMSTRID = NKWREC.NKW-SEL-KUMSTRID;
    else
      NK0FW03.NK0FW-03-KUMSTRID = 0;
    end
    if (NKWREC.NKW-SEL-XXX-SUM-ZCR-CD > "   ")
      NK0FW03.NK0FW-03-XXX-SUM-ZCR-CD = NKWREC.NKW-SEL-XXX-SUM-ZCR-CD;
    else
      NK0FW03.NK0FW-03-XXX-SUM-ZCR-CD = "  ";
    end
    ;
    if (COMMAREA.CACLVL[4] == "Y") /* Accounting Dept. Authorized*/
      NK0FW-02-IO-CURSOR = "S4"; /* Build Claims Selection List*/
      NK0FW-02-IO-FETCH = "N4";
      NK0FW-02-IO-CLOSE = "C4";
      NK0FW-02-OPEN-ACTION = "OPEN ACCTNG APPROVAL";
      NK0FW-02-FETCH-ACTION = "FETCH ACCTNG APPROVAL";
      NK0FW-02-CLOSE-ACTION = "CLOSE ACCTNG APPROVAL";
    else
      if (COMMAREA.CACLVL[3] == "Y") /* Credit Dept. Authorized*/
        NK0FW-02-IO-CURSOR = "S3"; /* Build Claims Selection List*/
        NK0FW-02-IO-FETCH = "N3";
        NK0FW-02-IO-CLOSE = "C3";
        NK0FW-02-OPEN-ACTION = "OPEN CREDIT APPROVAL";
        NK0FW-02-FETCH-ACTION = "FETCH CREDIT APPROVAL";
        NK0FW-02-CLOSE-ACTION = "CLOSE CREDIT APPROVAL";
        ;
      else
        if (COMMAREA.CACLVL[2] == "Y") /* Supervisor Authorized*/
          NK0FW-02-IO-CURSOR = "S2"; /* Build Claims Selection List*/
          NK0FW-02-IO-FETCH = "N2";
          NK0FW-02-IO-CLOSE = "C2";
          NK0FW-02-OPEN-ACTION = "OPEN SUPERV APPROVAL";
          NK0FW-02-FETCH-ACTION = "FETCH SUPERV APPROVAL";
          NK0FW-02-CLOSE-ACTION = "CLOSE SUPERV APPROVAL";
          ;
        else
          converseLib.validationFailed(280); /* Not authorized to approve claims*/
          NLXERRF = "Y";
          return;
        end
      end
    end
  end
  ;
   /* declare cursor for CLAIM header*/
  NK0FW03.NK0FW-03-IO-TASK = NK0FW-02-IO-CURSOR;
  ;
  call "NK1070" (NK0FW03, SQLCA, NK0FW04) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = NK0FW-02-OPEN-ACTION; /* database action*/
    TA1REC.TA1LOCAT[3] = "NK1070 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VNCHDR01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
  ;
end // end NK0FS-OPEN-VNCHDR

// Select VRCVGL01 Row
Function NK0FS-S-VNCHDR01()
  ;
  NLXREC.NLXCPROC = "NK0FS-S-VNCHDR01";
  ;
  call "IO6460" ("S ", SQLCA, VNCHDR01) {isNoRefresh = yes, isExternal = yes}; /* Select unique*/
  ;
  if (SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(4); /* data base busy*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(276); /* Not Valid Claim Id*/
      else
        TA1REC.TA1LOCAT[2] = "S      "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "IO6460 "; /* io module*/
        TA1REC.TA1DBASE = "DNILO "; /* data base*/
        TA1REC.TA1TBLVU = "VNCHDR01"; /* table view*/
        XPNL005(); /* abend routine*/
      end
    end
  end
  ;
end // end NK0FS-S-VNCHDR01

// Check Security Lvl For User Id
Function NK0FS-SEC-LVL()
  ;
  NLXREC.NLXCPROC = "NK0FS-SEC-LVL";
  ;
  if (COMMAREA.CACLVL[2] == "Y"
   || COMMAREA.CACLVL[3] == "Y"
   || COMMAREA.CACLVL[4] == "Y")
    NK0FW02.NK0FW-02-SL = "Y";
  else
    NK0FW02.NK0FW-02-SL = "N";
  end
  ;
  ;
end // end NK0FS-SEC-LVL

// Select Unique - KUCREC
Function NK0FS-SEL-CUST()
   /* ************************/
   /* KUCREC - Select Unique*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NK0FS-SEL-CUST";
  ;
  call "IO0240" ("S ", SQLCA, KUCREC) {isNoRefresh = yes, isExternal = yes}; /* Read Customer*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO0240 "; /* io module*/
    TA1REC.TA1DBASE = "DCUST"; /* database*/
    TA1REC.TA1TBLVU = "VCMPNY01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
end // end NK0FS-SEL-CUST

// View Selected Claims
Function NK0FS-SELECTED()
  ;
  NLXREC.NLXCPROC = "NK0FS-SELECTED";
  ;
   /* Edit All Claims Temp Storage Rows From First Page Down To Last*/
   /* Looking For First Selected Claim For Transfer To NK0B*/
  ;
  NK0FW-02-END = "N"; /* Selected Claim Found Switch*/
  move NK0FW-02-NEXT-PAGE-NBR to NK0FW-02-SUB withV60Compat; /* Save Current Page Number*/
  NK0FW-02-NEXT-PAGE-NBR = 1; /* Start At First Page For Search*/
  while (NK0FW-02-NEXT-PAGE-NBR <= NK0FW-02-HIGH-PAGE-NBR)
    set NK0FW05 empty;
    NK0FS-GET-TMP-STG();
    NK0FW-02-INDEX = 1;
    while (NK0FW02.NK0FW-02-INDEX <= 14)
      if (NK0FW-05-SEL[NK0FW-02-INDEX] == "S"
       && NK0FW-02-END == "N") /* Have Not Found Selected Claim Yet*/
        NKWREC.NL-CLM-ID = NK0FW-05-NL-CLM-ID[NK0FW-02-INDEX];
        NK0FW-05-SEL[NK0FW-02-INDEX] = "V";
        NK0FW-05-EZEMNO[NK0FW-02-INDEX] = 0;
        converseLib.validationFailed(0);
        NK0FW-02-END = "Y"; /* Selected Claim Found Switch*/
      end
      NK0FW02.NK0FW-02-INDEX = NK0FW02.NK0FW-02-INDEX + 1;
    end
    NK0FS-UPDT-TMP-STG();
    NK0FW-02-NEXT-PAGE-NBR = NK0FW-02-NEXT-PAGE-NBR + 1;
  end
  ;
  move NK0FW-02-SUB to NK0FW-02-NEXT-PAGE-NBR withV60Compat; /* Restore Current Page Number*/
  ;
  if (NK0FW-02-END == "N")
    NLXERRF = "Y";
    converseLib.validationFailed(349);
  end
  ;
  ;
end // end NK0FS-SELECTED

// UPDATE TEMP STORAGE
Function NK0FS-UPDT-TMP-STG()
   /* ***********************************************************************/
   /* Update Temp Storage*/
   /* ***********************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0FS-UPDT-TMP-STG";
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  move NK0FW-02-W05SIZE to NK0FW-05-LENGTH withV60Compat;
  TA5REC.TA5TSQIX = NK0FW-02-NEXT-PAGE-NBR;
  ;
  TA5REC.TA5FNCCD = "U"; /* Function code*/
  ;
  try
    call "TA0050" (NK0FW05, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.validationFailed(299); /* Indicate system error*/
  ;
  XPNL-006(); /* abend routine*/
  ;
  ;
end // end NK0FS-UPDT-TMP-STG

//*** RECORD=NK0FW02 ****
// This is the main working storage record for NK0F.
// ***********************
Record NK0FW02 type basicRecord
  5 NK0FW-02-INDEX NK0FW-02-INDEX ; 
  5 NK0FW-02-LENGTH NK0FW-02-LENGTH ; 
  5 NK0FW-02-W05SIZE NK0FW-02-W05SIZE ; 
  5 NK0FW-02-NEXT-PAGE-NBR NK0FW-02-NEXT-PAGE-NBR ; 
  5 NK0FW-02-HIGH-PAGE-NBR NK0FW-02-HIGH-PAGE-NBR ; 
  5 NK0FW-02-INQ NK0FW-02-INQ ; 
  5 NK0FW-02-PCT NK0FW-02-PCT ; 
  5 NK0FW-02-ICT NK0FW-02-ICT ; 
  5 NK0FW-02-LCNT NK0FW-02-LCNT ; 
  5 NK0FW-02-PCNT NK0FW-02-PCNT ; 
  5 NK0FW-02-PHLD NK0FW-02-PHLD ; 
  5 NK0FW-02-EPG NK0FW-02-EPG ; 
  5 NK0FW-02-IDX NK0FW-02-IDX ; 
  5 NK0FW-02-LDX NK0FW-02-LDX ; 
  5 NK0FW-02-SCX NK0FW-02-SCX ; 
  5 NK0FW-02-PPG NK0FW-02-PPG ; 
  5 NK0FW-02-IO-CURSOR NK0FW-02-IO-CURSOR ; 
  5 NK0FW-02-IO-FETCH NK0FW-02-IO-FETCH ; 
  5 NK0FW-02-IO-CLOSE NK0FW-02-IO-CLOSE ; 
  5 NK0FW-02-OPEN-ACTION NK0FW-02-OPEN-ACTION ; 
  5 NK0FW-02-FETCH-ACTION NK0FW-02-FETCH-ACTION ; 
  5 NK0FW-02-CLOSE-ACTION NK0FW-02-CLOSE-ACTION ; 
  5 NK0FW-02-KUCCOID-ALPHA NK0FW-02-KUCCOID-ALPHA ; 
    10 NK0FW-02-KUCCOID-NUM NK0FW-02-KUCCOID-NUM ; 
  5 NK0FW-02-NL-CLM-ID NK0FW-02-NL-CLM-ID ; 
  5 NK0FW-02-NL-CLM-ID-HLD NK0FW-02-NL-CLM-ID-HLD ; 
  5 NK0FW-02-SL NK0FW-02-SL ; 
  5 NK0FW-02-HSF NK0FW-02-HSF ; 
  5 NK0FW-02-UFL NK0FW-02-UFL ; 
  5 NK0FW-02-PDF NK0FW-02-PDF ; 
  5 NK0FW-02-IPG NK0FW-02-IPG ; 
  5 NK0FW-02-IDF NK0FW-02-IDF ; 
  5 NK0FW-02-IER NK0FW-02-IER ; 
  5 NK0FW-02-NER NK0FW-02-NER ; 
  5 NK0FW-02-PER NK0FW-02-PER ; 
  5 NK0FW-02-ORD NK0FW-02-ORD ; 
    10 NK0FW-02-FIL NK0FW-02-FIL ; 
    10 NK0FW-02-PTN NK0FW-02-PTN ; 
  5 NK0FW-02-COS NK0FW-02-COS ; 
  5 NK0FW-02-SMS NK0FW-02-SMS ; 
  5 NK0FW-02-SCF NK0FW-02-SCF ; 
  5 NK0FW-02-PUW NK0FW-02-PUW ; 
  5 NK0FW-02-EXT NK0FW-02-EXT ; 
  5 NK0FW-02-SUB NK0FW-02-SUB ; 
  5 NK0FW-02-DAT NK0FW-02-DAT ; 
    10 NK0FW-02-MON NK0FW-02-MON ; 
    10 NK0FW-02-DAY NK0FW-02-DAY ; 
    10 NK0FW-02-YER NK0FW-02-YER ; 
  5 NK0FW-02-DT9 NK0FW-02-DT9 ; 
    10 NK0FW-02-CEN NK0FW-02-CEN ; 
    10 NK0FW-02-YR9 NK0FW-02-YR9 ; 
    10 NK0FW-02-MN9 NK0FW-02-MN9 ; 
    10 NK0FW-02-DY9 NK0FW-02-DY9 ; 
  5 NK0FW-02-END NK0FW-02-END ; 
  5 NK0FW-02-ONE NK0FW-02-ONE ; 
  5 NK0FW-02-SQCE NK0FW-02-SQCE ; 
  5 NK0FW-02-W1X NK0FW-02-W1X ; 
  5 NK0FW-02-DX1 NK0FW-02-DX1 ; 
  5 NK0FW-02-DX2 NK0FW-02-DX2 ; 
  5 NK0FW-02-DX3 NK0FW-02-DX3 ; 
  5 NK0FW-02-MSG NK0FW-02-MSG ; 
    10 NK0FW-02-NOT NK0FW-02-NOT ; 
    10 NK0FW-02-CCNT NK0FW-02-CCNT ; 
    10 NK0FW-02-REM NK0FW-02-REM ; 
  5 NK0FW-02-PDA NK0FW-02-PDA ; 
    10 NK0FW-02-PCC NK0FW-02-PCC ; 
    10 NK0FW-02-PYY NK0FW-02-PYY ; 
    10 NK0FW-02-PMM NK0FW-02-PMM ; 
    10 NK0FW-02-PDD NK0FW-02-PDD ; 
  5 NK0FW-02-PDT NK0FW-02-PDT ; 
    10 NK0FW-02-PRM NK0FW-02-PRM ; 
    10 NK0FW-02-PS1 NK0FW-02-PS1 ; 
    10 NK0FW-02-PRD NK0FW-02-PRD ; 
    10 NK0FW-02-PS2 NK0FW-02-PS2 ; 
    10 NK0FW-02-PRY NK0FW-02-PRY ; 
end // end NK0FW02

//*** RECORD=NK0FW03 ****
// ******  International Claims Global Working Storage  *******
// 
// This record will be used by IO Mod NK1070 to pass the I-O
// task, and the key ranges.
// 
// Maintenance Log:
//   Date    Init.      Comment
// --------  ------     ---------------------------------------
// 10-28-92  jjudki     Initial Creation.
// ***********************
Record NK0FW03 type basicRecord
  5 NK0FW-03-GROUP NK0FW-03-GROUP ; 
    10 NK0FW-03-IO-TASK NK0FW-03-IO-TASK ; 
    10 NK0FW-03-KUCCOID NK0FW-03-KUCCOID ; 
    10 NK0FW-03-KUMSTRID NK0FW-03-KUMSTRID ; 
    10 NK0FW-03-NIDIVCID NK0FW-03-NIDIVCID ; 
    10 NK0FW-03-XXX-SUM-ZCR-CD NK0FW-03-XXX-SUM-ZCR-CD ; 
    10 NK0FW-03-ZCR-CLM-RSN-CD NK0FW-03-ZCR-CLM-RSN-CD ; 
    10 NK0FW-03-ZCS-CLM-STAT-CD NK0FW-03-ZCS-CLM-STAT-CD ; 
    10 NK0FW-03-FM-ZZZSDT NK0FW-03-FM-ZZZSDT ; 
    10 NK0FW-03-TO-ZZZSDT NK0FW-03-TO-ZZZSDT ; 
    10 NK0FW-03-FM-NL-CLM-PRT-DT NK0FW-03-FM-NL-CLM-PRT-DT ; 
    10 NK0FW-03-TO-NL-CLM-PRT-DT NK0FW-03-TO-NL-CLM-PRT-DT ; 
    10 NK0FW-03-FM-NIAGLPMO NK0FW-03-FM-NIAGLPMO ; 
    10 NK0FW-03-TO-NIAGLPMO NK0FW-03-TO-NIAGLPMO ; 
    10 NK0FW-03-XGP-GPC-CD NK0FW-03-XGP-GPC-CD ; 
    10 NK0FW-03-SY-STY-NBR NK0FW-03-SY-STY-NBR ; 
    10 NK0FW-03-SY-COLR-CD-ID NK0FW-03-SY-COLR-CD-ID ; 
    10 NK0FW-03-XDM-DIM-CD NK0FW-03-XDM-DIM-CD ; 
    10 NK0FW-03-GLAENT NK0FW-03-GLAENT ; 
    10 NK0FW-03-GLARCID NK0FW-03-GLARCID ; 
    10 NK0FW-03-GLANTAC NK0FW-03-GLANTAC ; 
    10 NK0FW-03-GLASUB NK0FW-03-GLASUB ; 
    10 NK0FW-03-GLAPRJ NK0FW-03-GLAPRJ ; 
end // end NK0FW03

//*** RECORD=NK0FW04 ****
// ******  International Claims Global Working Storage  *******
// 
// This record will be used by IO Mod NK1070 to return the data
// base record.
// 
// Maintenance Log:
//   Date    Init.      Comment
// --------  ------     ---------------------------------------
// 10-28-92  jjudki     Initial Creation.
// 04-31-93  Kshaw      Added nl_clm_amt.
// ***********************
Record NK0FW04 type basicRecord
  5 NK0FW-04-GROUP NK0FW-04-GROUP ; 
    10 NK0FW-04-NL-CLM-ID NK0FW-04-NL-CLM-ID ; 
    10 NK0FW-04-KUCCOID NK0FW-04-KUCCOID ; 
    10 NK0FW-04-NIDIVCID NK0FW-04-NIDIVCID ; 
    10 NK0FW-04-XXX-SUM-ZCR-CD NK0FW-04-XXX-SUM-ZCR-CD ; 
    10 NK0FW-04-ZCS-CLM-STAT-CD NK0FW-04-ZCS-CLM-STAT-CD ; 
    10 NK0FW-04-XXXUSID2 NK0FW-04-XXXUSID2 ; 
    10 NK0FW-04-XXX-USER-ID3 NK0FW-04-XXX-USER-ID3 ; 
    10 NK0FW-04-XXX-USER-ID4 NK0FW-04-XXX-USER-ID4 ; 
    10 NK0FW-04-ZZZSDT NK0FW-04-ZZZSDT ; 
    10 NK0FW-04-NIAGLPMO NK0FW-04-NIAGLPMO ; 
    10 NK0FW-04-NL-CLM-AMT NK0FW-04-NL-CLM-AMT ; 
end // end NK0FW04

//*** RECORD=NK0FW05 ****
// ***           MAP100 temp storage record  *****************
// Maintenance Log:
//   Date    Init.       Comment
// -------   ------      -------------------------------------
// 04/23/93  KShaw       Added nl-clm-amt.
// ***********************
Record NK0FW05 type basicRecord
  5 NK0FW-05-LENGTH NK0FW-05-LENGTH ; 
  5 NK0FW-05-GROUP NK0FW-05-GROUP ; 
    10 NK0FW-05-SEL NK0FW-05-SEL [14] ; 
    10 NK0FW-05-NL-CLM-ID NK0FW-05-NL-CLM-ID [14] ; 
    10 NK0FW-05-KUCCOID NK0FW-05-KUCCOID [14] ; 
    10 NK0FW-05-NIDIVCID NK0FW-05-NIDIVCID [14] ; 
    10 NK0FW-05-ZDTCD NK0FW-05-ZDTCD [14] ; 
    10 NK0FW-05-ZCS-CLM-STAT-CD NK0FW-05-ZCS-CLM-STAT-CD [14] ; 
    10 NK0FW-05-SUP-AFL NK0FW-05-SUP-AFL [14] ; 
    10 NK0FW-05-CRD-AFL NK0FW-05-CRD-AFL [14] ; 
    10 NK0FW-05-ACC-AFL NK0FW-05-ACC-AFL [14] ; 
    10 NK0FW-05-CMDY NK0FW-05-CMDY [14] ; 
    10 NK0FW-05-PMY NK0FW-05-PMY [14] ; 
    10 NK0FW-05-NL-CLM-AMT NK0FW-05-NL-CLM-AMT [14] ; 
    10 NK0FW-05-PAGE NK0FW-05-PAGE [14] ; 
    10 NK0FW-05-EZEMNO NK0FW-05-EZEMNO [14] ; 
    10 NK0FW-05-XXXUSERID NK0FW-05-XXXUSERID [14] ; 
    10 NK0FW-05-ZZZCHGCT NK0FW-05-ZZZCHGCT [14] ; 
    10 NK0FW-05-PREV-NL-CLM-ID NK0FW-05-PREV-NL-CLM-ID [14] ; 
    10 NK0FW-05-UPD-FL NK0FW-05-UPD-FL [14] ; 
end // end NK0FW05

// Claims Count
DataItem NK0FW-02-CCNT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// always '019'
DataItem NK0FW-02-CEN char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Identify Type of close
DataItem NK0FW-02-CLOSE-ACTION char(2)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// 'Cursor' open switch
DataItem NK0FW-02-COS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// W/S version of date
DataItem NK0FW-02-DAT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Day
DataItem NK0FW-02-DAY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// W/S version of cymd
DataItem NK0FW-02-DT9 num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NK0FW-02-DX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NK0FW-02-DX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NK0FW-02-DX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Day
DataItem NK0FW-02-DY9 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// First Time Flag
DataItem NK0FW-02-END char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Error Page Pointer
DataItem NK0FW-02-EPG smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// PF exit switch(contains PFK#)
DataItem NK0FW-02-EXT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Identify Type of fetch
DataItem NK0FW-02-FETCH-ACTION char(2)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// Discard portion of Order #
DataItem NK0FW-02-FIL num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NK0FW-02-HIGH-PAGE-NBR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Held Selection Flag
DataItem NK0FW-02-HSF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Internal Comment Fetch Count
DataItem NK0FW-02-ICT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Internal Page Down Error Flag
DataItem NK0FW-02-IDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// W/S Index
DataItem NK0FW-02-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Invoice Dates error
DataItem NK0FW-02-IER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Screen Index
DataItem NK0FW-02-INDEX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Inquiry only user(y/n)
DataItem NK0FW-02-INQ char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Type of cursor close
DataItem NK0FW-02-IO-CLOSE char(2)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// Type of cursor declare
DataItem NK0FW-02-IO-CURSOR char(2)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// Type of cursor fetch
DataItem NK0FW-02-IO-FETCH char(2)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// Internal Comment Page Flag
DataItem NK0FW-02-IPG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// CU_CO_ID
DataItem NK0FW-02-KUCCOID-ALPHA char(7)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// CU_CO_ID
DataItem NK0FW-02-KUCCOID-NUM num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = "0", inputRequired = no
}
end

// Screen Line Count
DataItem NK0FW-02-LCNT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Index For Top Of Screeen
DataItem NK0FW-02-LDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0FW02 Length record
DataItem NK0FW-02-LENGTH num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Month
DataItem NK0FW-02-MN9 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Month
DataItem NK0FW-02-MON char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// # Claims Selected Message
DataItem NK0FW-02-MSG char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Needed Dates error
DataItem NK0FW-02-NER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NK0FW-02-NEXT-PAGE-NBR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NK0FW-02-NL-CLM-ID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

DataItem NK0FW-02-NL-CLM-ID-HLD int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// Literal 'Note: '
DataItem NK0FW-02-NOT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time flag
DataItem NK0FW-02-ONE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Identify Type of open
DataItem NK0FW-02-OPEN-ACTION char(2)  {
  align = right, fillCharacter = "0", inputRequired = no
}
end

// W/S order number
DataItem NK0FW-02-ORD num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NK0FW-02-PCC num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Screen Page Count
DataItem NK0FW-02-PCNT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Print Comment Fetch Count
DataItem NK0FW-02-PCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NK0FW-02-PDA num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NK0FW-02-PDD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Print Page Down Error Flag
DataItem NK0FW-02-PDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NK0FW-02-PDT char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Posting Dates error
DataItem NK0FW-02-PER char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Held Screen Page Count
DataItem NK0FW-02-PHLD num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NK0FW-02-PMM num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Page Counter
DataItem NK0FW-02-PPG int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NK0FW-02-PRD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NK0FW-02-PRM char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NK0FW-02-PRY char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NK0FW-02-PS1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NK0FW-02-PS2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Order partition number
DataItem NK0FW-02-PTN num(1)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Pop-up window switch
DataItem NK0FW-02-PUW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NK0FW-02-PYY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Remainder Of Message
DataItem NK0FW-02-REM char(31)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Screen filled      (y = yes)
DataItem NK0FW-02-SCF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Screen Index
DataItem NK0FW-02-SCX num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Valid User Security Level Flag
DataItem NK0FW-02-SL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Screen Modified Switch
DataItem NK0FW-02-SMS char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Row Sequence
DataItem NK0FW-02-SQCE smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Working subscript
DataItem NK0FW-02-SUB int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Update Error Flag
DataItem NK0FW-02-UFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NK0FW-02-W05SIZE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NK0FW-02-W1X smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Year
DataItem NK0FW-02-YER char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Year
DataItem NK0FW-02-YR9 char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// from GL posting date
DataItem NK0FW-03-FM-NIAGLPMO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// from claim print date
DataItem NK0FW-03-FM-NL-CLM-PRT-DT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// from claim create date
DataItem NK0FW-03-FM-ZZZSDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// GL-ENTITY-ID
DataItem NK0FW-03-GLAENT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GL-NATRL-ACCT-ID
DataItem NK0FW-03-GLANTAC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GL-PROJ-ID
DataItem NK0FW-03-GLAPRJ char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GL-RSP-CTR-ID
DataItem NK0FW-03-GLARCID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// GL-SUB-ACCT-ID
DataItem NK0FW-03-GLASUB char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// claims common working storage
DataItem NK0FW-03-GROUP char(70)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nk1070-task
DataItem NK0FW-03-IO-TASK char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu-co-id
DataItem NK0FW-03-KUCCOID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// cu-stor-id
DataItem NK0FW-03-KUMSTRID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nl-ivc-id
DataItem NK0FW-03-NIDIVCID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// color
DataItem NK0FW-03-SY-COLR-CD-ID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style
DataItem NK0FW-03-SY-STY-NBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// to GL posting date
DataItem NK0FW-03-TO-NIAGLPMO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// to claim print date
DataItem NK0FW-03-TO-NL-CLM-PRT-DT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// to claim create date
DataItem NK0FW-03-TO-ZZZSDT int {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// dim
DataItem NK0FW-03-XDM-DIM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// gpc code
DataItem NK0FW-03-XGP-GPC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xxx-sum-zcr-cd
DataItem NK0FW-03-XXX-SUM-ZCR-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// zcr-clm-rsn-cd
DataItem NK0FW-03-ZCR-CLM-RSN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// zcr-clm-stat-cd
DataItem NK0FW-03-ZCS-CLM-STAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// claims common working storage
DataItem NK0FW-04-GROUP char(53)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cu-co-id
DataItem NK0FW-04-KUCCOID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// GL posting date
DataItem NK0FW-04-NIAGLPMO int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nl-ivc-id
DataItem NK0FW-04-NIDIVCID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NL_CLM_AMT
DataItem NK0FW-04-NL-CLM-AMT decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// claim id
DataItem NK0FW-04-NL-CLM-ID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// xxx-sum-zcr-cd
DataItem NK0FW-04-XXX-SUM-ZCR-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XXX_USER_ID3
DataItem NK0FW-04-XXX-USER-ID3 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// XXX_USER_ID4
DataItem NK0FW-04-XXX-USER-ID4 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// xxx-user-id2
DataItem NK0FW-04-XXXUSID2 char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// zcr-clm-stat-cd
DataItem NK0FW-04-ZCS-CLM-STAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// claim create date
DataItem NK0FW-04-ZZZSDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Acctng Dept Approval Flag
DataItem NK0FW-05-ACC-AFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Claim Credit Date
DataItem NK0FW-05-CMDY char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Credit Dept Approval Flag
DataItem NK0FW-05-CRD-AFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Error Message For Claim
DataItem NK0FW-05-EZEMNO num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0FW02 group item
DataItem NK0FW-05-GROUP char(910)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Customer Id
DataItem NK0FW-05-KUCCOID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0FW02 Length record
DataItem NK0FW-05-LENGTH num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Invoice Id
DataItem NK0FW-05-NIDIVCID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Claim Amount
DataItem NK0FW-05-NL-CLM-AMT num(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Claim Id
DataItem NK0FW-05-NL-CLM-ID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Error Page
DataItem NK0FW-05-PAGE smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Claim Print Date
DataItem NK0FW-05-PMY char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Claim Id From Previous Page
DataItem NK0FW-05-PREV-NL-CLM-ID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Select Flag
DataItem NK0FW-05-SEL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Supervisor Approval Flag
DataItem NK0FW-05-SUP-AFL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Updated Claim Flag
DataItem NK0FW-05-UPD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Approval Level User Id
DataItem NK0FW-05-XXXUSERID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Claim Status
DataItem NK0FW-05-ZCS-CLM-STAT-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Claim Type
DataItem NK0FW-05-ZDTCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// zz_chng_cnt
DataItem NK0FW-05-ZZZCHGCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

