package nk0g;

import corpcom2.XX0XW01;
import corpcom2.YSMREC;
import corpcom3.XPNK-001;
import corpcom3.XPNL-006;
import corpcom3.XPNL002;
import corpcom3.XPNL005;
import corpcom4.XSENTRY;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom5.GLAENT;
import corpcom5.GLANTAC;
import corpcom5.GLAPRJ;
import corpcom5.GLARCID;
import corpcom5.GLASUB;
import corpcom6.SQLCA;
import corpx1.XCTTBL;
import corpx1.XLATBL;
import corpz3.ZCHCD;
import corpz3.ZCRTBL;
import corpz3.ZCSTBL;
import corpz3.ZZZCHGCT;
import corpz3.ZZZCHGDT;
import corpz3.ZZZCHGTM;
import corpz3.ZZZSDT;
import ku.common.KUCREC;
import ku.common.KUMREC;
import ni.common.NIDIVCID;
import ni.common.NIGARATE;
import ni.common.NIGFCAMT;
import ni.common.NIGGROUP;
import ni.common.NIGNETFL;
import ni.common.NIGOVRD;
import ni.common.NIGSRCCD;
import ni.common.NIGUSAMT;
import ni.common.NIWREC;
import nk.common.NKWREC;
import nl.common.*;
import op.common.OP2LNINB;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
import vv.common.VMIHDR01;
import vv.common.VMIITM01;
import vv.common.VNCADJ01;
import vv.common.VNCHDR01;
import vv.common.VNCIVX01;
import vv.common.VNCSTY01;
import vv.common.VNLCTL01;
import vv.common.VNLIVX01;
import vv.common.VPIADJ01;
import vv.common.VPIHDR01;
import vv.common.VPIITM01;
//*** PROGRAM=NK0G ****
// International Claims Background Claims Create
// 
// This application will create claims in a background mode
// and transfer the user to the Claims Header screen.  The
// application will be entered from either Miscellaneous,
// Product invoice inquiry or the claims system. It will create
// a claim of all open balances on an invoice.
// 
// Maintenance
//    Date       Who     Remarks
// -----------   ------  -------
//   11/01/93    DKINGM  New Application.
//    5/27/93    JJUDKI  Add use of request header flag to NOT
//                      call NI0P in nk0g-001 if ni0c could not
//                      find the request header for the invoice
//                      to be credited.
//   03/08/94    kshaw   March db changes
// -----------   ------  -------
//   02/19/98    NGANGO  Y2K modifications .. recompiled to get
//                      the changes for XX0XS01.
// -----------   ------  -------
//   11/17/98    PMONAG  MODIFIED NK0G-001 FOR NEW INVOICE NBRS
//   03/27/01    LTANIK  MODIFIED NK0G-130 TO ALLOW  CLAIMS
//                       TO PICK UP ALL THE LINE ITEMS FROM
//                       INVOICE .  CHANGED NK0GS-N2-VNCSTY
//                       NK0GS-S2-VNCSTY01 TO HAVE FLAGS SET
//                       FOR SQLCODE 0 AND SQLCODE 100. ADDED
//                       NEW SGROUP NK0GS-SEL-VNCHDR01.
// *********************
Program NK0G type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "NL00", inputRecord = COMMAREA, segmented = no
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  KUMREC KUMREC; // record
  NIWREC NIWREC; // record
  NK0GW01 NK0GW01; // record
  NK0GW02 NK0GW02; // record
  NK0GW03 NK0GW03; // record
  NK0GW05 NK0GW05; // record
  NKWREC NKWREC; // record
  NLXREC NLXREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VMIHDR01 VMIHDR01; // record
  VMIITM01 VMIITM01; // record
  VNCADJ01 VNCADJ01; // record
  VNCHDR01 VNCHDR01; // record
  VNCIVX01 VNCIVX01; // record
  VNCSTY01 VNCSTY01; // record
  VNLCTL01 VNLCTL01; // record
  VNLIVX01 VNLIVX01; // record
  VPIADJ01 VPIADJ01; // record
  VPIHDR01 VPIHDR01; // record
  VPIITM01 VPIITM01; // record
  XX0XW01 XX0XW01; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCTTBL {deleteAfterUse = yes}; // table
  use ZCRTBL {deleteAfterUse = yes}; // table
  use ZCSTBL {deleteAfterUse = yes}; // table
  use XLATBL {deleteAfterUse = yes}; // table
  //  use  NK0GM // VAGen Info - unused formGroup    {
  //    pfKeyEquate = no
  //  };
  

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    NK0G-000: NK0G-000();
  end // end main
end // end NK0G

// Application main logic
Function NK0G-000()
   /* -----------------------------------------------------------*/
      /* This is the "main logic" for the application.*/
  ;
      /* xsentry checks to ensure that this application was*/
            /* entered from another csp application.*/
  ;
   /* -----------------------------------------------------------*/
  ;
  NLXREC.NLXCPROC = "NK0G-000";
  ;
  NK0G-001(); /* Initilize the application*/
  ;
  NK0G-050(); /* Claims creation control*/
  ;
  XSPF4();
  ;
end // end NK0G-000

// Initialize application
Function NK0G-001()
   /* -----------------------------------------------------------*/
         /* Initialize the application working storage*/
  ;
   /* -----------------------------------------------------------*/
  ;
  NLXREC.NLXCPROC = "NK0G-001";
  ;
  VGVar.handleHardIOErrors = 1; /* return control to program if hard db2*/
                                  /* error*/
  ;
  XSENTRY(); /* check entry thru main menu*/
  XSSEGTR(); /* set segmented transaction id*/
  ;
  set SQLCA empty; /* clear out the "common" working*/
                                   /* storage*/
  set ERRSQLCA empty; /* clear out the "common" working*/
                                   /* storage*/
  set TA1REC empty; /* clear out the "common" working*/
                                   /* storage*/
  set TA5REC empty; /* clear out the "common" working*/
                                   /* storage*/
  set TAEREC empty; /* clear out the "common" working*/
                                   /* storage*/
  set NLXREC empty; /* clear out the "common" working*/
                                   /* storage*/
  set KUCREC empty; /* clear out the "common" working*/
                                   /* storage*/
  set KUMREC empty; /* clear out the "common" working*/
                                   /* storage*/
  set NIWREC empty; /* clear out the "common" working*/
                                   /* storage*/
  set NKWREC empty; /* clear out the "common" working*/
                                   /* storage*/
  set VMIHDR01 empty; /* clear out the "common" working*/
                                   /* storage*/
  set VMIITM01 empty; /* clear out the "common" working*/
                                   /* storage*/
  set VPIHDR01 empty; /* clear out the "common" working*/
                                   /* storage*/
  set VPIADJ01 empty; /* clear out the "common" working*/
                                   /* storage*/
  set VPIITM01 empty; /* clear out the "common" working*/
                                   /* storage*/
  set VNLCTL01 empty; /* clear out the "common" working*/
                                   /* storage*/
  set NK0GW01 empty; /* clear application working storage*/
  ;
  set NK0GW02 empty; /* clear application working storage*/
  ;
  set NK0GW03 empty; /* clear application working storage*/
  ;
  set NK0GW05 empty; /* clear application working storage*/
  ;
  set VNCIVX01 empty; /* clear claims/invoice X-ref*/
  ;
  set VNCADJ01 empty; /* clear claims adjustment*/
  ;
  set VNCHDR01 empty; /* clear claims header*/
  ;
  set VNCSTY01 empty; /* clear claims style items*/
  ;
  NK0GW-W02-SIZE = 1700;
  NK0GW-NEXT-PAGE-NBR = 1;
  ;
  if (COMMAREA.CAFRMSYS == "NK") /* comming back from claims*/
    NKWREC.NKW-GROUP = COMMAREA.CAUSERA;
    NK0GS-GET-TMP-STG(); /* get saved NI info*/
    COMMAREA.CAUSERA = NK0GW-02-USERA; /* move "niwrec" to commarea*/
    NIWREC.NIWGROUP = NK0GW-02-USERA; /* move "niwrec" to commarea*/
    NK0GS-DEL-TMP-STG(); /* get rid of temp storage*/
    if (NKWREC.XXX-SUM-ZCR-CD == "PR") /* 'is originated from NI0C'*/
      COMMAREA.CATOAP = "NI0C"; /* NI0C executed it.*/
      if (NIWREC.NIW-ORDER-PURGE-FLAG == "N")
        COMMAREA.CACURRAP = "NI0P"; /* NI0P WAS RUN*/
      end
    else
      if (NKWREC.XXX-SUM-ZCR-CD == "MI") /* 'this originated from NI0G'*/
        COMMAREA.CATOAP = "NI0G"; /* faking out SYSTEM so it*/
      else
        COMMAREA.CATOAP = "NI0A"; /* somthing happened to*/
      end /* NIWREC.*/
    end
    XPNL002();
  else
    if (COMMAREA.CAFRMSYS == "NI")
      NIWREC.NIWGROUP = COMMAREA.CAUSERA;
      if (COMMAREA.CAFROMAP == "NI0C"
       && NIWREC.NIW-ORDER-PURGE-FLAG == "N"
       && NIWREC.NIW-VRQTHD01-FL == "Y") /* Invoice Rqst Hdr Was Found*/
        COMMAREA.CATOAP = "NI0P"; /* faking out NI0P to think*/
        XPNL002();
      else
        if (NIWREC.NIDIVCID > 100000
         && NIWREC.NIDIVCID < 800000) /* Not a product invoice*/
          if (COMMAREA.CAFROMAP == "NI0P"
           || COMMAREA.CAFROMAP == "NI0C")
            COMMAREA.CACURRAP = "NI0P";
            COMMAREA.CATOAP = "NI0C";
            XPNL002();
          else
            COMMAREA.CATOAP = "NI0G";
            XPNL002();
          end
        end
      end
    end
  end
  NK0GW-02-USERA = COMMAREA.CAUSERA;
  NK0GS-ADD-TMP-STG(); /* save invoice commarea info for return*/
  NIWREC.NIWGROUP = COMMAREA.CAUSERA;
  NKWREC.KUCCOID = NIWREC.KUCCOID;
  NKWREC.ZDTCD = "CM";
  XPNK-001(); /* Load passed fields*/
  COMMAREA.CAITEM = " ";
  ;
  NLXREC.NLXEOAF = "N"; /* set end-of-application flag 'no'*/
  NLXREC.NLXERRF = "N"; /* set error-flag to 'no'*/
  NK0GS-NXT-CLM-NBR(); /* get next claim number*/
  ;
  ;
end // end NK0G-001

// custom abend routine
Function NK0G-005()
  ;
       /* abend with negative sqlcode*/
  ;
  TA1REC.TA1TYPE = "DB2";
  TA1REC.TA1PGMNM = COMMAREA.CACURRAP; /* appl name*/
  TA1REC.TA1LOC = NLXREC.NLXCPROC; /* aborting process*/
  ;
  if (SQLCA.VAGen_SQLCODE == -911)
    TA1REC.TA1FUNC = "POST";
    set ERRSQLCA empty; /* clear area*/
    move SQLCA to ERRSQLCA withV60Compat; /* save orig sqlca*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* synpoint rollback*/
    call "TA0020" (TA1REC, SQLCA) {isExternal = yes};
    converseLib.validationFailed(4);
    COMMAREA.CATOAP = COMMAREA.CAFROMAP; /* Mods made to XPNL005*/
    XPNL002(); /* to return to caller if busy*/
  else
    TA1REC.TA1FUNC = "RETN";
    set ERRSQLCA empty; /* clear area*/
    move SQLCA to ERRSQLCA withV60Compat; /* save orig sqlca*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback(); /* synpoint rollback*/
    try
      call "TA0020" (TA1REC, ERRSQLCA) {isNoRefresh = yes, isExternal = yes};
    end /* abend module*/
    XSPF4(); /* master menu*/
    exit program; /* master menu failure*/
  end
  ;
end // end NK0G-005

// High level flow control
Function NK0G-050()
   /* -----------------------------------------------------------*/
      /* Control process the application*/
  ;
   /* -----------------------------------------------------------*/
  ;
  NLXREC.NLXCPROC = "NK0G-050"; /* set current process name*/
  ;
  if (NIWREC.NIWZDTCD == "PI")
    NK0G-130(); /* Process Invoice*/
  else
    if (NIWREC.NIWZDTCD == "MI")
      NK0G-230(); /* Process Misc Invoice*/
    end
  end
  ;
  NK0GS-A-VNCIVX01(); /* Create Invoice/Claim Xref*/
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.commit();
  ;
  COMMAREA.CAFROMAP = "NK0G";
  COMMAREA.CATOAP = "NK0B";
  ;
  NK0GS-LOAD-NKWREC();
  COMMAREA.CAUSERA = NKWREC.NKW-GROUP;
  XPNL002();
end // end NK0G-050

// Invoice flow control
Function NK0G-130()
   /* -----------------------------------------------------------*/
      /* Control process for invoice processing*/
  ;
   /* -----------------------------------------------------------*/
  ;
  NLXREC.NLXCPROC = "NK0G-130"; /* set current process name*/
  ;
  set VPIITM01 empty;
  set VPIHDR01 empty;
  NK0GS-SEL-VPIHDR01();
  if (SQLCA.VAGen_SQLCODE == 0)
    NIWREC.NIWZDTCD = VPIHDR01.ZDTCD;
  end
  ;
  NK0GW-END-OF-LOOP = "N";
  ;
   /* build key to cursor for invoice items*/
  ;
  VPIITM01.NIDIVCID = NIWREC.NIDIVCID;
  VPIITM01.XGPCD = "**";
  VPIITM01.SY1STNBR = "******";
  VPIITM01.SY2CLRID = "***";
  VPIITM01.XDMCD = "**";
  VPIITM01.XQACD = "**";
  NK0GS-S1-VPIITM01(); /* Open cursor on invoice items*/
  NK0GS-N1-VPIITM01(); /* Get next item row*/
  if (SQLCA.VAGen_SQLCODE == 0)
    while (NK0GW-END-OF-LOOP == "N")
      set VNCSTY01 empty;
      VNCSTY01.NIDIVCID = VPIITM01.NIDIVCID;
      VNCSTY01.SY1STNBR = VPIITM01.SY1STNBR;
      VNCSTY01.SY2CLRID = VPIITM01.SY2CLRID;
      VNCSTY01.XDMCD = VPIITM01.XDMCD;
      VNCSTY01.XGPCD = VPIITM01.XGPCD;
      NK0GS-S2-VNCSTY01(); /* Open cursor on claim style items*/
  /* TCS CHANGE BEGIN  03/27/01*/
  /* WHILE SQLCA.SQLCODE EQ 0;*/
      while (NK0GW-END-OF-VNCSTY01 == "N")
        NK0GS-N2-VNCSTY01(); /* get next claim style row*/
        if (SQLCA.VAGen_SQLCODE == 0)
  /* VPIITM01.NIHSHPQT = VPIITM01.NIHSHPQT - VNCSTY01.NL-CLM-LN-QTY;*/
  /* END;*/
          if (VNCSTY01.NL-CLM-ID != VNLCTL01.NL-NXT-CLM-ID)
            VNCHDR01.NL-CLM-ID = VNCSTY01.NL-CLM-ID;
            NK0GS-SEL-VNCHDR01();
            if (SQLCA.VAGen_SQLCODE == 0)
              if (VNCHDR01.ZCS-CLM-STAT-CD == "VD") /* voided allow*/
                NK0GW-VNCSTY-FOUND-FL = "N"; /* item to be  picked*/
              else /* by the claim*/
                NK0GW-VNCSTY-FOUND-FL = "Y";
              end
            else
              if (SQLCA.VAGen_SQLCODE == 100)
                NK0GW-VNCSTY-FOUND-FL = "N";
              end
            end
          else
            NK0GW-VNCSTY-FOUND-FL = "Y";
          end

          if (NK0GW-VNCSTY-FOUND-FL == "Y")
            if (VNCSTY01.OP2LNINB == VPIITM01.OP2LNINB)
              VPIITM01.NIHSHPQT = VPIITM01.NIHSHPQT - VNCSTY01.NL-CLM-LN-QTY;
            end
          end
  /* TCS CHANGE END   03/27/01*/
        end
      end
      NK0GS-C2-VNCSTY01(); /* Close cursor on claim style items*/
      if (VPIITM01.NIHSHPQT > 0)
        NK0GS-A-VNCSTY01(); /* Add Claim style row*/
      end
      NK0GS-N1-VPIITM01(); /* Get next item row*/
    end
  end
  NK0GS-C1-VPIITM01(); /* Close cursor on invoice items*/
   /* *************************/
   /* Adjustment processing*/
   /* *************************/
  NK0GW-END-OF-LOOP = "N";
  NK0GS-S1-VPIADJ01(); /* Set cursor on invoice adjustments*/
  NK0GS-N1-VPIADJ01(); /* Get First invoice adjustment*/
  if (SQLCA.VAGen_SQLCODE == 0)
    while (NK0GW-END-OF-LOOP == "N")
      NK0GW03.NIGGROUP = VPIADJ01.NIGGROUP;
      VNCADJ01.ZCHCD = VPIADJ01.ZCHCD;
      VNCADJ01.NIDIVCID = VPIADJ01.NIDIVCID;
      while (VPIADJ01.ZCHCD == NK0GW03.ZCHCD
       && NK0GW-END-OF-LOOP == "N")
        NK0GS-N1-VPIADJ01(); /* Get NEXT invoice adjustment*/
        if (VPIADJ01.ZCHCD == NK0GW03.ZCHCD
         && SQLCA.VAGen_SQLCODE == 0)
          NK0GW03.NIGFCAMT = NK0GW03.NIGFCAMT + VPIADJ01.NIGFCAMT;
          NK0GW03.NIGUSAMT = NK0GW03.NIGUSAMT + VPIADJ01.NIGUSAMT;
        end
      end
      NK0GS-S2-VNCADJ01(); /* Set cursor on claims adjustments*/
      NK0GS-N2-VNCADJ01(); /* Get next claims adjustments*/
      while (SQLCA.VAGen_SQLCODE == 0)
        NK0GW03.NIGFCAMT = NK0GW03.NIGFCAMT - VNCADJ01.NIGFCAMT;
        NK0GW03.NIGUSAMT = NK0GW03.NIGUSAMT - VNCADJ01.NIGUSAMT;
        NK0GS-N2-VNCADJ01(); /* Get next claims adjusments*/
      end
      NK0GS-C2-VNCADJ01(); /* Close cursor on claims adj*/
      if (NK0GW03.NIGUSAMT > 0)
        NK0GS-A-VNCADJ01(); /* Add Claims adjustment*/
        set VNCADJ01 empty;
      end
    end
  end
  NK0GS-C1-VPIADJ01(); /* Close cursor on invoice adjustments*/
  NK0GS-A-VNCHDR01(); /* Add claims header*/
end // end NK0G-130

// Misc invoice flow control
Function NK0G-230()
   /* -----------------------------------------------------------*/
      /* Control process for invoice processing*/
  ;
   /* -----------------------------------------------------------*/
  ;
  NLXREC.NLXCPROC = "NK0G-230"; /* set current process name*/
  ;
  set VMIHDR01 empty;
  set VMIITM01 empty;
  NK0GS-SEL-VMIHDR01();
  if (SQLCA.VAGen_SQLCODE == 0)
    NIWREC.NIWZDTCD = VMIHDR01.ZDTCD;
  end
  ;
  NK0GW-END-OF-LOOP = "N";
  NK0GS-S1-VMIITM01(); /* Open cursor on misc items*/
  NK0GS-N1-VMIITM01(); /* Get next misc item row*/
  if (SQLCA.VAGen_SQLCODE == 0)
    while (NK0GW-END-OF-LOOP == "N")
      VNCADJ01.ZCHCD = VMIITM01.ZCHCD;
      VNCADJ01.NIDIVCID = VMIITM01.NIDIVCID;
      NK0GW03.NIGFCAMT = VMIITM01.NIBLFCUR;
      NK0GW03.NIGUSAMT = VMIITM01.NIBLIAMT;
      NK0GS-S2-VNCADJ01(); /* Set cursor on claims adjustments*/
      NK0GS-N2-VNCADJ01(); /* Get next claims adjustments*/
      while (SQLCA.VAGen_SQLCODE == 0)
        if (VMIITM01.NIBLINBR == VNCADJ01.NIBLINBR)
          NK0GW03.NIGFCAMT = NK0GW03.NIGFCAMT - VNCADJ01.NIGFCAMT;
          NK0GW03.NIGUSAMT = NK0GW03.NIGUSAMT - VNCADJ01.NIGUSAMT;
        end
        NK0GS-N2-VNCADJ01(); /* Get next claims adjusments*/
      end
      NK0GS-C2-VNCADJ01(); /* Close cursor on claims adj*/
      if (NK0GW03.NIGUSAMT > 0)
        NK0GS-AMI-VNCADJ01(); /* Add Claims adjustment for misc items*/
        set VNCADJ01 empty;
      end
      NK0GS-N1-VMIITM01(); /* Get next misc item row*/
    end
  end
  NK0GS-C1-VMIITM01(); /* Close cursor on misc items*/
  NK0GS-A-VNCHDR01(); /* Add claims header*/
end // end NK0G-230

// Add a VNCADJ01 item
Function NK0GS-A-VNCADJ01()
   /* *****************************************************************/
   /* This will add an item to the VNCSTY01 database*/
   /* *****************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0GS-A-VNCADJ01";
  ;
  VNCADJ01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  VNCADJ01.NIDIVCID = NK0GW03.NIDIVCID;
  VNCADJ01.ZCHCD = NK0GW03.ZCHCD;
  VNCADJ01.NIGFCAMT = NK0GW03.NIGFCAMT;
  VNCADJ01.NIGUSAMT = NK0GW03.NIGUSAMT;
  VNCADJ01.NIGNETFL = NK0GW03.NIGNETFL;
  VNCADJ01.GLAENT = NK0GW03.GLAENT;
  VNCADJ01.GLARCID = NK0GW03.GLARCID;
  VNCADJ01.GLANTAC = NK0GW03.GLANTAC;
  VNCADJ01.GLASUB = NK0GW03.GLASUB;
  VNCADJ01.GLAPRJ = NK0GW03.GLAPRJ;
  VNCADJ01.NIBLINBR = 0;
  XX0XS01(); /* get current date and time for*/
                                  /* zz-change-faimly*/
  VNCADJ01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VNCADJ01.ZZZSDT = XX0XW01.XX0XWDAT;
  VNCADJ01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  call "IO6490" ("A ", SQLCA, VNCADJ01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCADJ01";
    NK0GW-LRG-NBR = VNCADJ01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0GW01.NK0GW-KEY;
    NK0G-005(); /* custom abort routine*/
  end
end // end NK0GS-A-VNCADJ01

// Add a claim header
Function NK0GS-A-VNCHDR01()
   /* *****************************************************************/
   /* This will add the claim header with the claim balance.*/
   /* *****************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0GS-A-VNCHDR01";
  ;
  VNCHDR01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  VNCHDR01.ZDTCD = "CM";
  VNCHDR01.NLAADRID = KUCREC.KUCBLAID;
  VNCHDR01.XXXUSID1 = COMMAREA.CAUSERID;
  ;
  VNCHDR01.NL-CLM-AMT = 0;
  VNCHDR01.NL-CLM-FCUR-AMT = 0;
  ;
  NK0GS-SM-VNCSTY01(); /* Get sum of all items*/
  NK0GS-SM-VNCADJ01(); /* Get sum of all adjustments*/
  ;
  if (VNCHDR01.NL-CLM-AMT <= 0)
    NIWREC.NIWMSGNR = 378; /* INVOICE CREDITED, BUT BALANCE IS ZERO*/
    NK0GS-DNPG(); /* This claim is no good - ROLLBACK and*/
  end /* get out.*/
  ;
  VNCHDR01.ZCS-CLM-STAT-CD = "IP";
  VNCHDR01.XXX-USER-ID4 = "SYSTEM";
  VNCHDR01.NLAADRID = KUCREC.KUCBLAID;
  if (NIWREC.NIWZDTCD == "PI")
    VNCHDR01.XXX-SUM-ZCR-CD = "PR";
    VNCHDR01.KUCCOID = VPIHDR01.KUCCOID;
    VNCHDR01.KUMSTRID = VPIHDR01.KUMSTRID;
    VNCHDR01.GLAENT = VPIHDR01.NIEENT1;
    VNCHDR01.GLARCID = VPIHDR01.NIERCID1;
    VNCHDR01.GLANTAC = VPIHDR01.NIENTAC1;
    VNCHDR01.GLASUB = VPIHDR01.NIESUB1;
    VNCHDR01.GLAPRJ = VPIHDR01.NIEPRJ1;
    VNCHDR01.ZFCCD = VPIHDR01.ZFCCD;
    VNCHDR01.NL-EXCHG-RATE = VPIHDR01.NL-EXCHG-RATE;
    VNCHDR01.OP1CMPNB = VPIHDR01.OP1CMPNB;
  else
    if (NIWREC.NIWZDTCD == "MI")
      VNCHDR01.XXX-SUM-ZCR-CD = "MI";
      VNCHDR01.KUCCOID = VMIHDR01.KUCCOID;
      VNCHDR01.KUMSTRID = VMIHDR01.KUMSTRID;
      VNCHDR01.GLAENT = VMIHDR01.GLAENT;
      VNCHDR01.GLARCID = VMIHDR01.GLARCID;
      VNCHDR01.GLANTAC = VMIHDR01.GLANTAC;
      VNCHDR01.GLASUB = VMIHDR01.GLASUB;
      VNCHDR01.GLAPRJ = VMIHDR01.GLAPRJ;
      VNCHDR01.NL-EXCHG-RATE = VMIHDR01.NL-EXCHG-RATE;
      VNCHDR01.ZFCCD = VMIHDR01.ZFCCD;
      VNCHDR01.OP1CMPNB = VMIHDR01.OP1CMPNB;
    end
  end
  ;
  XX0XS01(); /* get current date and time for*/
                                  /* zz-change-faimly*/
  VNCHDR01.ZZZSDT = XX0XW01.XX0XWDAT;
  VNCHDR01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VNCHDR01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  call "IO6460" ("A ", SQLCA, VNCHDR01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0) /* if a good return,*/
    NIWREC.NIWMSGNR = 0;
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCHDR01";
    NK0GW-LRG-NBR = VNCSTY01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0GW01.NK0GW-KEY;
    NK0G-005(); /* abort routine*/
  end
end // end NK0GS-A-VNCHDR01

// Add a VNCIVX01 cross reference
Function NK0GS-A-VNCIVX01()
   /* *****************************************************************/
   /* This will add an item to the VNCIVX01 database*/
   /* *****************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0GS-A-VNCIVX01";
  ;
  VNCIVX01.NL-CLM-ID = VNLCTL01.NL-NXT-CLM-ID;
  VNCIVX01.NIDIVCID = NIWREC.NIDIVCID;
  VNCIVX01.ZDTCD = NIWREC.NIWZDTCD;
  ;
  XX0XS01(); /* get current date and time for*/
                                  /* zz-change-faimly*/
  VNCIVX01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VNCIVX01.ZZZSDT = XX0XW01.XX0XWDAT;
  VNCIVX01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  call "IO6510" ("A ", SQLCA, VNCIVX01) {isNoRefresh = yes, isExternal = yes}; /* Add row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCIVX01";
    NK0GW-LRG-NBR = VNCIVX01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0GW01.NK0GW-KEY;
    NK0G-005(); /* abort routine*/
  end
end // end NK0GS-A-VNCIVX01

// Add a VNCSTY01 item
Function NK0GS-A-VNCSTY01()
   /* *****************************************************************/
   /* This will add an item to the VNCSTY01 database*/
   /* *****************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0GS-A-VNCSTY01";
  ;
  set VNCSTY01 empty;
  VNCSTY01.NL-CLM-ID = VNLCTL01.NL-NXT-CLM-ID;
  VNCSTY01.NIDIVCID = VPIITM01.NIDIVCID;
  VNCSTY01.OP2LNINB = VPIITM01.OP2LNINB;
  VNCSTY01.XGPCD = VPIITM01.XGPCD;
  VNCSTY01.SY1STNBR = VPIITM01.SY1STNBR;
  VNCSTY01.SY2CLRID = VPIITM01.SY2CLRID;
  VNCSTY01.XDMCD = VPIITM01.XDMCD;
  VNCSTY01.KUIPRDID = VPIITM01.KUIPRDID;
  VNCSTY01.XQACD = VPIITM01.XQACD;
  VNCSTY01.XUMCD = VPIITM01.XUMCD;
  VNCSTY01.NIHGPRC = VPIITM01.NIHGPRC;
  VNCSTY01.NIHGPRCF = VPIITM01.NIHGPRCF;
  VNCSTY01.NIHNPRC = VPIITM01.NIHNPRC;
  VNCSTY01.NIHNPRCF = VPIITM01.NIHNPRCF;
  VNCSTY01.NL-CLM-LN-QTY = VPIITM01.NIHSHPQT;
  VNCSTY01.NIHGMRC = VNCSTY01.NL-CLM-LN-QTY * VNCSTY01.NIHGPRC;
  VNCSTY01.NIHGMRCF = VNCSTY01.NL-CLM-LN-QTY * VNCSTY01.NIHGPRCF;
  VNCSTY01.NIHNMRC = VNCSTY01.NL-CLM-LN-QTY * VNCSTY01.NIHNPRC;
  VNCSTY01.NIHNMRCF = VNCSTY01.NL-CLM-LN-QTY * VNCSTY01.NIHNPRCF;
  VNCSTY01.GLAENT = NK0GW-SLS-GLAENT;
  VNCSTY01.GLARCID = NK0GW-SLS-GLARCID;
  VNCSTY01.GLANTAC = NK0GW-SLS-GLANTAC;
  VNCSTY01.GLASUB = NK0GW-SLS-GLASUB;
  VNCSTY01.GLAPRJ = NK0GW-SLS-GLAPRJ;
  ;
  XX0XS01(); /* get current date and time for*/
                                  /* zz-change-faimly*/
  VNCSTY01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VNCSTY01.ZZZSDT = XX0XW01.XX0XWDAT;
  VNCSTY01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  call "IO6470" ("A ", SQLCA, VNCSTY01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCSTY01";
    NK0GW-LRG-NBR = VNCSTY01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0GW01.NK0GW-KEY;
    NK0G-005(); /* abort routine*/
  end
end // end NK0GS-A-VNCSTY01

// Add temp storage
Function NK0GS-ADD-TMP-STG()
   /* ***********************************************************************/
   /* Write temp storage*/
   /*  */
   /*  */
   /* ***********************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0GS-ADD-TMP-STG";
  NK0GW-02-LENGTH = 1700;
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  ;
  TA5REC.TA5FNCCD = "N"; /* Function code*/
  ;
  try
    call "TA0050" (NK0GW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
   /* MOVE TA5REC.TA5TSQIX TO NK0GW-HIGH-PAGE-NBR;/* Save high page Nbr*/
    return; /* Return to previous process*/
    ;
  else
    ;
   /* ------------------------------------------------------------*/
    /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
    ;
    converseLib.validationFailed(299); /* Indicate system error*/
    ;
    XPNL-006(); /* abend routine*/
    ;
  end
  ;
end // end NK0GS-ADD-TMP-STG

// Add a VNCADJ01 for Misc ivc
Function NK0GS-AMI-VNCADJ01()
   /* *****************************************************************/
   /* This will add an item to the VNCSTY01 database*/
   /* *****************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0GS-AMI-VNCADJ01";
  ;
  VNCADJ01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  VNCADJ01.NIDIVCID = VMIITM01.NIDIVCID;
  VNCADJ01.NIBLINBR = VMIITM01.NIBLINBR;
  VNCADJ01.ZCHCD = VMIITM01.ZCHCD;
  VNCADJ01.NIGFCAMT = NK0GW03.NIGFCAMT;
  VNCADJ01.NIGUSAMT = NK0GW03.NIGUSAMT;
  VNCADJ01.NIGNETFL = "N";
  VNCADJ01.GLAENT = VMIITM01.GLAENT;
  VNCADJ01.GLARCID = VMIITM01.GLARCID;
  VNCADJ01.GLANTAC = VMIITM01.GLANTAC;
  VNCADJ01.GLASUB = VMIITM01.GLASUB;
  VNCADJ01.GLAPRJ = VMIITM01.GLAPRJ;
  XX0XS01(); /* get current date and time for*/
                                  /* zz-change-faimly*/
  VNCADJ01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VNCADJ01.ZZZSDT = XX0XW01.XX0XWDAT;
  VNCADJ01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  call "IO6490" ("A ", SQLCA, VNCADJ01) {isNoRefresh = yes, isExternal = yes}; /* add Claims adjustment*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCADJ01";
    NK0GW-LRG-NBR = VNCADJ01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0GW01.NK0GW-KEY;
    NK0G-005(); /* abort routine*/
  end
end // end NK0GS-AMI-VNCADJ01

// Close cursor on NIBREC
Function NK0GS-C1-VMIITM01()
  NLXREC.NLXCPROC = "NK0GS-C1-VMIITM01"; /* Close cursor*/
  ;
  call "IO4450" ("C1", SQLCA, VMIITM01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "C1     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4450 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VMIITM01"; /* table view*/
    NK0G-005(); /* abend routine*/
  end
  ;
end // end NK0GS-C1-VMIITM01

// Close cursor - NIGREC
Function NK0GS-C1-VPIADJ01()
   /* ***********************/
   /* CLOSE CURSOR VPIADJ01*/
   /* ***********************/
  NLXREC.NLXCPROC = "NK0GS-C1-VPIADJ01";
  ;
  call "IO4510" ("C1", SQLCA, VPIADJ01) {isNoRefresh = yes, isExternal = yes}; /* Close P/I adj cursor*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "C1     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4510 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VPIADJ01"; /* table view*/
    NK0G-005(); /* abend routine*/
  end
end // end NK0GS-C1-VPIADJ01

// Close cursor on NIHREC
Function NK0GS-C1-VPIITM01()
   /* *****************************************************/
   /* Close cursor on VPIITM01*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0GS-C1-VPIITM01";
  ;
   /* fetch cursor on - VPIITM01*/
  ;
  call "IO4480" ("C1", SQLCA, VPIITM01) {isNoRefresh = yes, isExternal = yes}; /* fetch next piitm*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VPIITM01";
    NK0GW-LRG-NBR = VPIITM01.NIDIVCID;
    TA1REC.TA1TBLKE = NK0GW01.NK0GW-KEY;
    NK0G-005(); /* abort routine*/
  end
  ;
end // end NK0GS-C1-VPIITM01

// Close cursor on VNCADJ01
Function NK0GS-C2-VNCADJ01()
   /* ***********************/
   /* CLOSE CURSOR VNCADJ01*/
   /* ***********************/
  NLXREC.NLXCPROC = "NK0GS-C2-VNCADJ01";
  ;
  call "IO6490" ("C2", SQLCA, VNCADJ01) {isNoRefresh = yes, isExternal = yes}; /* Close clm adj cursor*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "C2     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO6490 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VPIADJ01"; /* table view*/
    NK0G-005(); /* abend routine*/
  end
end // end NK0GS-C2-VNCADJ01

// Close C2 on VNCSTY01
Function NK0GS-C2-VNCSTY01()
   /* *****************************************************/
   /* Close cursor C2 on VNCSTY01*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0GS-C2-VNCSTY01";
  ;
   /* close cursor on - VNCSTY01*/
  ;
  call "IO6470" ("C2", SQLCA, VNCSTY01) {isNoRefresh = yes, isExternal = yes}; /* close C2 on VNCSTY*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCSTY01";
    NK0GW-LRG-NBR = VNCSTY01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0GW01.NK0GW-KEY;
    NK0G-005(); /* abort routine*/
  end
  ;
end // end NK0GS-C2-VNCSTY01

// PURGE TEMP STORAGE
Function NK0GS-DEL-TMP-STG()
   /* ***********************************************************************/
   /* PURGE temp storage*/
   /*  */
   /*  */
   /* ***********************************************************************/
  ;
  NLXREC.NLXCPROC = "NKOGS-DEL-TMP-STG";
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  ;
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (NK0GW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.validationFailed(299); /* Indicate system error*/
  ;
  XPNL-006(); /* abend routine*/
  ;
  ;
end // end NK0GS-DEL-TMP-STG

// Returns to NI0C 'soft error'
Function NK0GS-DNPG()
   /* *****************************************************************/
   /* This will rollback and return to the 'calling program',*/
   /* no questions asked - this should only execute when*/
   /* the decision NOT to go to NK0B has been made. (sb a 0 sqlcode)*/
   /* *****************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0GS-DNPG"; /* Soft error, rollback and return*/
  ;
  VGVar.handleSysLibraryErrors = 0;
  sysLib.rollback(); /* synpoint rollback*/
  if (COMMAREA.CAFRMSYS == "NI")
    NK0GS-DEL-TMP-STG();
  end
  if (COMMAREA.CAFROMAP == "NI0P")
    COMMAREA.CATOAP = "NI0C";
    COMMAREA.CACURRAP = "NI0P";
  else
    COMMAREA.CATOAP = COMMAREA.CAFROMAP;
    COMMAREA.CAFROMAP = "NK0G";
  end
  COMMAREA.CAUSERA = NIWREC.NIWGROUP; /* This will only be fr NI appls*/
  XPNL002(); /* to return to caller*/
  ;
end // end NK0GS-DNPG

// Get temp storage
Function NK0GS-GET-TMP-STG()
   /* ***********************************************************************/
   /*  */
   /* Get temp storage for current page*/
   /*  */
   /* ***********************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0GS-GET-TMP-STG";
  TA1REC.TA1LOC = "NK0GS-GET-TMP-STG";
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  ;
  NK0GW-02-LENGTH = 1700;
   /* MOVE NK0GW-NEXT-PAGE-NBR TO TA5REC.TA5TSQIX;  /* Page number to fetch*/
  TA5REC.TA5TSQIX = 1; /* Page number to fetch*/
  ;
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (NK0GW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  else
    ;
   /* ------------------------------------------------------------*/
    /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
    ;
    converseLib.validationFailed(299); /* Indicate system error*/
    ;
    XPNL-006(); /* abend routine*/
    ;
  end
  ;
end // end NK0GS-GET-TMP-STG

// Load data into NKWREC
Function NK0GS-LOAD-NKWREC()
   /* *****************************************************************/
   /* This will load all possible fields into nkwrec before*/
   /* exiting nk0g*/
   /* *****************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0GS-LOAD-NKWREC";
  NKWREC.NL-CLM-ID = VNLCTL01.NL-NXT-CLM-ID;
  NKWREC.KUCCOID = VNCHDR01.KUCCOID;
  NKWREC.KUMSTRID = VNCHDR01.KUMSTRID;
  NKWREC.KUCCONM = KUCREC.KUCCONM;
  NKWREC.ZDTCD = VNCHDR01.ZDTCD;
   /* ZDTDESC*/
  NKWREC.XCTCD = KUCREC.XCTCD;
   /* XCTDESC*/
  VNCHDR01.NLAADRID = KUCREC.KUCBLAID;
  NKWREC.XXX-SUM-ZCR-CD = VNCHDR01.XXX-SUM-ZCR-CD;
   /* XXX-SUM-ZCR-DESC*/
   /* XGPCD*/
  NKWREC.NL-CLM-AMT = VNCHDR01.NL-CLM-AMT;
end // end NK0GS-LOAD-NKWREC

// Fetch rows from NIBREC
Function NK0GS-N1-VMIITM01()
  NLXREC.NLXCPROC = "NK0GS-N1-VMIITM01";
  ;
  call "IO4450" ("N1", SQLCA, VMIITM01) {isNoRefresh = yes, isExternal = yes};
  if (SQLCA.VAGen_SQLCODE == 100)
    NK0GW-END-OF-LOOP = "Y";
  else
    if (SQLCA.VAGen_SQLCODE != 0)
      TA1REC.TA1LOCAT[2] = "N1     "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO4450 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VMIITM01"; /* table view*/
      NK0G-005(); /* abend routine*/
    end
  end
  ;
end // end NK0GS-N1-VMIITM01

// Fetch next row for  NIGREC
Function NK0GS-N1-VPIADJ01()
   /* ************************/
   /* GET NEXT VPIADJ01*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NK0GS-N1-VPIADJ01";
  ;
  call "IO4510" ("N1", SQLCA, VPIADJ01) {isNoRefresh = yes, isExternal = yes}; /* Load P/I adj cursor*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "N1     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4510 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VPIADJ01"; /* table view*/
    NK0G-005(); /* abend routine*/
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* if a good return,*/
    NK0GW-END-OF-LOOP = "Y";
  end
  ;
end // end NK0GS-N1-VPIADJ01

// Fetch next row for NIHREC
Function NK0GS-N1-VPIITM01()
   /* *****************************************************/
   /* Fetch cursor on VPIITM01*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0GS-N1-VPIITM01";
  ;
   /* fetch cursor on - VPIITM01*/
  ;
  call "IO4480" ("N1", SQLCA, VPIITM01) {isNoRefresh = yes, isExternal = yes}; /* fetch next piitm*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VPIITM01";
    NK0GW-LRG-NBR = VPIITM01.NIDIVCID;
    TA1REC.TA1TBLKE = NK0GW01.NK0GW-KEY;
    NK0G-005(); /* abort routine*/
  end
  ;
  if (SQLCA.VAGen_SQLCODE == 100) /* if a good return,*/
    NK0GW-END-OF-LOOP = "Y";
  end
  ;
end // end NK0GS-N1-VPIITM01

// Fetch next row for VNCADJ01
Function NK0GS-N2-VNCADJ01()
   /* *****************************************************/
   /* Fetch next cursor on VNCSTY01*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0GS-N2-VNCADJ01";
  ;
   /* fetch cursor on - VNCADJ01*/
  ;
  call "IO6490" ("N2", SQLCA, VNCADJ01) {isNoRefresh = yes, isExternal = yes}; /* fetch next VNCADJ01*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCADJ01";
    NK0GW-LRG-NBR = VNCADJ01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0GW01.NK0GW-KEY;
    NK0G-005(); /* abort routine*/
  end
  ;
end // end NK0GS-N2-VNCADJ01

// Fetch next row for VNCSTY01
Function NK0GS-N2-VNCSTY01()
   /* *****************************************************/
   /* Fetch next cursor on VNCSTY01*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0GS-N2-VNCSTY01";
  ;
   /* fetch cursor on - VNCSTY01*/
  ;
  call "IO6470" ("N2", SQLCA, VNCSTY01) {isNoRefresh = yes, isExternal = yes}; /* fetch next C2 on VNCSTY*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCSTY01";
    NK0GW-LRG-NBR = VNCSTY01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0GW01.NK0GW-KEY;
    NK0G-005(); /* abort routine*/
  end
  ;
   /* TCS CHANGE 03/27/01 BEGIN*/
  if (SQLCA.VAGen_SQLCODE == 100)
    NK0GW-END-OF-VNCSTY01 = "Y";
  end
   /* TCS CHANGE 03/27/01 END*/
  ;
end // end NK0GS-N2-VNCSTY01

// Update Unique on NLBREC
Function NK0GS-NXT-CLM-NBR()
   /* ************************/
   /* NLBREC - Update Unique*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NK0G-NXT-CLM-NBR";
  ;
  call "IO4300" ("U6", SQLCA, VNLCTL01) {isNoRefresh = yes, isExternal = yes}; /* Update nxt Claim number*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "U6     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4300 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VNLCTL01"; /* table view*/
    NK0G-005(); /* abend routine*/
  end
  NKWREC.NL-CLM-ID = VNLCTL01.NL-NXT-CLM-ID;
end // end NK0GS-NXT-CLM-NBR

// Set cursor for NIBREC
Function NK0GS-S1-VMIITM01()
  NLXREC.NLXCPROC = "NK0GS-S1-VMIITM01";
  VMIITM01.NIDIVCID = NIWREC.NIDIVCID;
  VMIITM01.ZCHCD = "**";
  ;
  call "IO4450" ("S1", SQLCA, VMIITM01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "S1     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4450 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VMIITM01"; /* table view*/
    NK0G-005(); /* abend routine*/
  end
  ;
end // end NK0GS-S1-VMIITM01

// Set cursor for NIGREC
Function NK0GS-S1-VPIADJ01()
   /* ************************/
   /* Open cursor for VPIADJ01*/
   /* ************************/
  ;
  NLXREC.NLXCPROC = "NI0CS05";
  ;
  VPIADJ01.NIDIVCID = NIWREC.NIDIVCID;
  VPIADJ01.OP2LNINB = -1;
  ;
  call "IO4510" ("S1", SQLCA, VPIADJ01) {isNoRefresh = yes, isExternal = yes}; /* Open P/I Adjs*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "S1     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4510 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VPIADJ01"; /* table view*/
    NK0G-005(); /* abend routine*/
  end
  if (SQLCA.VAGen_SQLCODE == 100)
    NK0GW-END-OF-LOOP = "Y";
  end
end // end NK0GS-S1-VPIADJ01

// Set cursor for NIHREC
Function NK0GS-S1-VPIITM01()
   /* *****************************************************/
   /* Open cursor on VPIITM01*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0GS-S1-VPIITM01";
  ;
   /* open cursor on - VPIITM01*/
  ;
  call "IO4480" ("S1", SQLCA, VPIITM01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/
  ;
  if (SQLCA.VAGen_SQLCODE != 0 /* if a good return,*/
   && SQLCA.VAGen_SQLCODE != 100) /* if a good return,*/
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VPIITM01";
    NK0GW-LRG-NBR = VPIITM01.NIDIVCID;
    TA1REC.TA1TBLKE = NK0GW01.NK0GW-KEY;
    NK0G-005(); /* abort routine*/
  end
  if (SQLCA.VAGen_SQLCODE == 100) /* if a good return,*/
    NK0GW-END-OF-LOOP = "Y";
  end
  ;
end // end NK0GS-S1-VPIITM01

// Set cursor for VNCADJ01
Function NK0GS-S2-VNCADJ01()
   /* *****************************************************/
   /* Open cursor on VNCADJ01*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0GS-S2-VNCADJ01";
  ;
   /* open cursor on - VNCADJ01*/
  ;
  call "IO6490" ("S2", SQLCA, VNCADJ01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCADJ01";
    NK0GW-LRG-NBR = VNCADJ01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0GW01.NK0GW-KEY;
    NK0G-005(); /* abort routine*/
  end
  ;
end // end NK0GS-S2-VNCADJ01

// Set cursor for VNCSTY01
Function NK0GS-S2-VNCSTY01()
   /* *****************************************************/
   /* Open cursor on VNCSTY01*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0GS-S2-VNCSTY01";
  ;
   /* open cursor on - VNCSTY01*/
  ;
  call "IO6470" ("S2", SQLCA, VNCSTY01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
    /* /TCS CHANGE BEGIN 03/27/01*/
    NK0GW-END-OF-VNCSTY01 = "N";
    /* /TCS CHANGE END   03/27/01*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCSTY01";
    NK0GW-LRG-NBR = VNCSTY01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0GW01.NK0GW-KEY;
    NK0G-005(); /* abort routine*/
  end
  ;
end // end NK0GS-S2-VNCSTY01

// Select unique NIAREC
Function NK0GS-SEL-VMIHDR01()
   /* *****************************************************/
   /* Edit Invoice*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0GS-SEL-VMIHDR01";
  ;
  VMIHDR01.NIDIVCID = NIWREC.NIDIVCID;
  ;
  call "IO4440" ("S ", SQLCA, VMIHDR01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "S      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO4440 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VMIHDR01"; /* table view*/
    NK0G-005(); /* abend routine*/
  end
  ;
end // end NK0GS-SEL-VMIHDR01

// SELECT UNIQUE VNCHDR01
Function NK0GS-SEL-VNCHDR01()
  call "IO6460" ("S ", SQLCA, VNCHDR01) {isNoRefresh = yes, isExternal = yes}; /* Select unique*/
  if (SQLCA.VAGen_SQLCODE == 0) /* Not found*/
    ;
  else
    if (SQLCA.VAGen_SQLCODE != 100 /* Not found*/
     && SQLCA.VAGen_SQLCODE != -911) /* Database busy*/
      TA1REC.TA1LOCAT[2] = "S      "; /* Database action*/
      TA1REC.TA1LOCAT[3] = "IO6460 "; /* IO module*/
      TA1REC.TA1DBASE = "DNILO"; /* Database*/
      TA1REC.TA1TBLVU = "VNCHDR01"; /* Table view*/
      XPNL005(); /* Abend routine*/
    end
  end
end // end NK0GS-SEL-VNCHDR01

// Select Unique NIEREC
Function NK0GS-SEL-VPIHDR01()
   /* *****************************************************/
   /* Edit Invoice*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0GS-SEL-IVC";
  ;
  set VPIHDR01 empty;
  VPIHDR01.NIDIVCID = NIWREC.NIDIVCID;
  ;
  call "IO4470" ("S ", SQLCA, VPIHDR01) {isNoRefresh = yes, isExternal = yes}; /* select ivc hdr*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* NEXT SENTENCE*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(303);
      NK0GW-ERR-FLAG = "Y";
      return;
    else
      TA1REC.TA1DBASE = "DNILO";
      TA1REC.TA1TBLVU = "VPIHDR01";
      NK0GW-LRG-NBR = VPIHDR01.NIDIVCID;
      move NK0GW-KEY to TA1TBLKE withV60Compat;
      NK0G-005(); /* abort routine*/
      return;
    end
  end
  NK0GW-REC-GLAENT = VPIHDR01.NIEENT1;
  NK0GW-REC-GLARCID = VPIHDR01.NIERCID1;
  NK0GW-REC-GLANTAC = VPIHDR01.NIENTAC1;
  NK0GW-REC-GLASUB = VPIHDR01.NIESUB1;
  NK0GW-REC-GLAPRJ = VPIHDR01.NIEPRJ1;
  NK0GW-SLS-GLAENT = VPIHDR01.NIEENT2;
  NK0GW-SLS-GLARCID = VPIHDR01.NIERCID2;
  NK0GW-SLS-GLANTAC = VPIHDR01.NIENTAC2;
  NK0GW-SLS-GLASUB = VPIHDR01.NIESUB2;
  NK0GW-SLS-GLAPRJ = VPIHDR01.NIEPRJ2;
  ;
end // end NK0GS-SEL-VPIHDR01

// Get sum of VNCADJ01
Function NK0GS-SM-VNCADJ01()
   /* *****************************************************************/
   /* This will select the sum of all the claim adjustments*/
   /* *****************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0GS-SM-VNCADJ01";
  ;
  set VNCADJ01 empty;
  set NK0GW05 empty;
  VNCADJ01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  VNCADJ01.NIGNETFL = "N";
  NK0GW-05-IO-TASK = "SM";
  ;
  call "IO6490" (NK0GW05, SQLCA, VNCADJ01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    VNCHDR01.NL-CLM-AMT = VNCHDR01.NL-CLM-AMT + NK0GW-05-IO-NET-AMT;
  else
    if (SQLCA.VAGen_SQLCODE != 100) /* if a good return,*/
      TA1REC.TA1DBASE = "DNILO";
      TA1REC.TA1TBLVU = "VNCADJ01";
      NK0GW-LRG-NBR = VNCADJ01.NL-CLM-ID;
      TA1REC.TA1TBLKE = NK0GW01.NK0GW-KEY;
      NK0G-005(); /* abort routine*/
    end
  end
  ;
end // end NK0GS-SM-VNCADJ01

// Get sum of VNCSTY01
Function NK0GS-SM-VNCSTY01()
   /* *****************************************************************/
   /* This will select the sum of all the claim style items*/
   /* *****************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0GS-SM-VNCSTY01";
  ;
  set VNCSTY01 empty;
  set NK0GW05 empty;
  NK0GW-05-IO-TASK = "SM";
  VNCSTY01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  ;
  call "IO6470" (NK0GW05, SQLCA, VNCSTY01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    VNCHDR01.NL-CLM-AMT = VNCHDR01.NL-CLM-AMT + NK0GW-05-IO-NET-AMT;
  else
    if (SQLCA.VAGen_SQLCODE != 100) /* if a good return,*/
      TA1REC.TA1DBASE = "DNILO";
      TA1REC.TA1TBLVU = "VNCHDR01";
      NK0GW-LRG-NBR = VNCHDR01.NL-CLM-ID;
      TA1REC.TA1TBLKE = NK0GW01.NK0GW-KEY;
      NK0G-005(); /* abort routine*/
    end
  end
  ;
end // end NK0GS-SM-VNCSTY01

//*** RECORD=NK0GW01 ****
// ********** NK0G APPLICATION WORKING STORAGE RECORD *********
// 03-29-01  ltanik     Added flags NK0GW-END-OF-VNCSTY01
//                                  NK0GW-VNCSTY-FOUND-FL
// ***********************
Record NK0GW01 type basicRecord
  5 NK0GW-GROUP char(183) ; // NK0GW01 group item
    10 NK0GW-ZZZCHGCT NK0GW-ZZZCHGCT ; 
    10 NK0GW-INDEX NK0GW-INDEX ; 
    10 NK0GW-INX4 NK0GW-INX4 ; 
    10 NK0GW-STYLE-FOUND NK0GW-STYLE-FOUND ; 
    10 NK0GW-ERR-FLAG NK0GW-ERR-FLAG ; 
    10 NK0GW-W02-SIZE NK0GW-W02-SIZE ; 
    10 NK0GW-NEXT-PAGE-NBR NK0GW-NEXT-PAGE-NBR ; 
    10 NK0GW-IVC-BAL NK0GW-IVC-BAL ; 
    10 NK0GW-ADJ-CHG-TYP-BAL NK0GW-ADJ-CHG-TYP-BAL ; 
    10 NK0GW-RECEIVABLE-GL NK0GW-RECEIVABLE-GL ; 
      15 NK0GW-REC-GLAENT NK0GW-REC-GLAENT ; 
      15 NK0GW-REC-GLARCID NK0GW-REC-GLARCID ; 
      15 NK0GW-REC-GLANTAC NK0GW-REC-GLANTAC ; 
      15 NK0GW-REC-GLASUB NK0GW-REC-GLASUB ; 
      15 NK0GW-REC-GLAPRJ NK0GW-REC-GLAPRJ ; 
    10 NK0GW-SALES-GL NK0GW-SALES-GL ; 
      15 NK0GW-SLS-GLAENT NK0GW-SLS-GLAENT ; 
      15 NK0GW-SLS-GLARCID NK0GW-SLS-GLARCID ; 
      15 NK0GW-SLS-GLANTAC NK0GW-SLS-GLANTAC ; 
      15 NK0GW-SLS-GLASUB NK0GW-SLS-GLASUB ; 
      15 NK0GW-SLS-GLAPRJ NK0GW-SLS-GLAPRJ ; 
    10 NK0GW-KEY NK0GW-KEY ; 
      15 NK0GW-LRG-NBR NK0GW-LRG-NBR ; 
      15 * char(1) ; 
      15 NK0GW-CHR-KEY NK0GW-CHR-KEY ; 
        20 NK0GW-IND NK0GW-IND ; 
        20 * char(1) ; // display small integer field
        20 NK0GW-SML-NBR NK0GW-SML-NBR ; 
    10 NK0GW-SLS-GL-CHG NK0GW-SLS-GL-CHG ; 
    10 NK0GW-IVC-ARRAY NK0GW-IVC-ARRAY [12] ; 
    10 NK0GW-INV-SEL-FLAG NK0GW-INV-SEL-FLAG ; 
    10 NK0GW-MULTI-CLM-ITM NK0GW-MULTI-CLM-ITM ; 
    10 NK0GW-END-OF-LOOP NK0GW-END-OF-LOOP ; 
    10 NK0GW-PRODUCT NK0GW-PRODUCT ; 
      15 NK0GW-SY1STNBR NK0GW-SY1STNBR ; 
      15 NK0GW-HYPHEN-1 NK0GW-HYPHEN-1 ; 
      15 NK0GW-SY2CLRID NK0GW-SY2CLRID ; 
      15 NK0GW-HYPHEN-2 NK0GW-HYPHEN-2 ; 
      15 NK0GW-XDMCD NK0GW-XDMCD ; 
    10 NK0GW-MAP-DEF NK0GW-MAP-DEF ; 
      15 NK0GW-DEF-XGPCD NK0GW-DEF-XGPCD ; 
      15 NK0GW-DEF-SY1STNBR NK0GW-DEF-SY1STNBR ; 
      15 NK0GW-DEF-SY2CLRID NK0GW-DEF-SY2CLRID ; 
      15 NK0GW-DEF-XDMCD NK0GW-DEF-XDMCD ; 
      15 NK0GW-DEF-FY1FCTYC NK0GW-DEF-FY1FCTYC ; 
      15 NK0GW-DEF-PC3POIDT NK0GW-DEF-PC3POIDT ; 
      15 NK0GW-DEF-XSECD NK0GW-DEF-XSECD ; 
      15 NK0GW-DEF-XSNYR NK0GW-DEF-XSNYR ; 
    10 NK0GW-SEASON NK0GW-SEASON ; 
      15 NK0GW-XSECD NK0GW-XSECD ; 
      15 NK0GW-XSNYR NK0GW-XSNYR ; 
    10 NK0GW-SEASON-YEAR NK0GW-SEASON-YEAR ; 
      15 NK0GW-CENTURY NK0GW-CENTURY ; 
      15 NK0GW-YEAR NK0GW-YEAR ; 
    10 NK0GW-PC3POIDT NK0GW-PC3POIDT ; 
    10 NK0GW-END-OF-VNCSTY01 NK0GW-END-OF-VNCSTY01 ; 
    10 NK0GW-VNCSTY-FOUND-FL NK0GW-VNCSTY-FOUND-FL ; 
end // end NK0GW01

//*** RECORD=NK0GW02 ****
// *********** CAUSERA temp storage record  *****************
// ***********************
Record NK0GW02 type basicRecord
  5 NK0GW-02-LENGTH NK0GW-02-LENGTH ; 
  5 NK0GW-02-USERA NK0GW-02-USERA ; 
end // end NK0GW02

//*** RECORD=NK0GW03 ****
// ************* NK0G - HOLD RECORD FOR INVOICE ADJUSTMENTS ***
// ***********************
Record NK0GW03 type basicRecord
  5 NIGGROUP NIGGROUP ; 
    10 NIDIVCID NIDIVCID ; 
    10 OP2LNINB OP2LNINB ; 
    10 ZCHCD ZCHCD ; 
    10 * char(3) ; // xxx_tbl_pfx
    10 NIGSRCCD NIGSRCCD ; 
    10 NIGUSAMT NIGUSAMT ; 
    10 NIGFCAMT NIGFCAMT ; 
    10 NIGARATE NIGARATE ; 
    10 GLAENT GLAENT ; 
    10 GLARCID GLARCID ; 
    10 GLANTAC GLANTAC ; 
    10 GLASUB GLASUB ; 
    10 GLAPRJ GLAPRJ ; 
    10 NIGOVRD NIGOVRD ; 
    10 NIGNETFL NIGNETFL ; 
    10 ZZZSDT ZZZSDT ; 
    10 ZZZCHGDT ZZZCHGDT ; 
    10 ZZZCHGTM ZZZCHGTM ; 
    10 ZZZCHGCT ZZZCHGCT ; 
end // end NK0GW03

//*** RECORD=NK0GW05 ****
// ********** NK0G APPLICATION WORKING STORAGE RECORD *********
// ***********************
Record NK0GW05 type basicRecord
  10 NK0GW-05-IO-TASK NK0GW-05-IO-TASK ; 
  10 NK0GW-05-IO-NET-AMT NK0GW-05-IO-NET-AMT ; 
  10 NK0GW-05-IO-NET-FCUR NK0GW-05-IO-NET-FCUR ; 
  10 NK0GW-05-IO-IND1 NK0GW-05-IO-IND1 ; 
    15 NK0GW-05-IO-IND2 int ; // Arrary color of new items
end // end NK0GW05

// NK0DW02 Length record
DataItem NK0GW-02-LENGTH num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0DW02 group item
DataItem NK0GW-02-USERA char(1700)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Arrary style of new items
DataItem NK0GW-05-IO-IND1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Arrary of new claim items
DataItem NK0GW-05-IO-NET-AMT decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Arrary ivc id of new items
DataItem NK0GW-05-IO-NET-FCUR decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0GW group item
DataItem NK0GW-05-IO-TASK char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Balance of invoice item
DataItem NK0GW-ADJ-CHG-TYP-BAL num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0GW01 Season century value
DataItem NK0GW-CENTURY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// char key part
DataItem NK0GW-CHR-KEY char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0GW01 Def factory
DataItem NK0GW-DEF-FY1FCTYC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0GW01 Def PO Month Id
DataItem NK0GW-DEF-PC3POIDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0GW01 Def style
DataItem NK0GW-DEF-SY1STNBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0GW01 Def color
DataItem NK0GW-DEF-SY2CLRID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0GW01 Def dim
DataItem NK0GW-DEF-XDMCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0GW01 Def gpc
DataItem NK0GW-DEF-XGPCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0GW01 Def season code
DataItem NK0GW-DEF-XSECD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0GW01 Def season year
DataItem NK0GW-DEF-XSNYR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0GW01 item on multi claims
DataItem NK0GW-END-OF-LOOP char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0GW01 PO ID month range
DataItem NK0GW-END-OF-VNCSTY01 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0GW01 Item error flag
DataItem NK0GW-ERR-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0GW01 first hyphen in prod s
DataItem NK0GW-HYPHEN-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0GW01 second hyphen in prod
DataItem NK0GW-HYPHEN-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// indicator
DataItem NK0GW-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0GW01 Screen index
DataItem NK0GW-INDEX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0GW01 invoice select flag
DataItem NK0GW-INV-SEL-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0GW01 index for NK0GW03
DataItem NK0GW-INX4 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0GW01 inv arrary for MAP300
DataItem NK0GW-IVC-ARRAY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Balance of invoice item
DataItem NK0GW-IVC-BAL num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Abend key fields
DataItem NK0GW-KEY char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Display large interger field
DataItem NK0GW-LRG-NBR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0GW01 Group level of Def itm
DataItem NK0GW-MAP-DEF char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0GW01 item on multi claims
DataItem NK0GW-MULTI-CLM-ITM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Next page number to converse
DataItem NK0GW-NEXT-PAGE-NBR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0GW01 PO ID month range
DataItem NK0GW-PC3POIDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0GW01 Product display string
DataItem NK0GW-PRODUCT char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Receivable GLAENT
DataItem NK0GW-REC-GLAENT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Receivable GLANTAC
DataItem NK0GW-REC-GLANTAC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Receivable GLAPRJ
DataItem NK0GW-REC-GLAPRJ char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Receivable GLARCID
DataItem NK0GW-REC-GLARCID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Receivable GLASUB
DataItem NK0GW-REC-GLASUB char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Receivable GL code
DataItem NK0GW-RECEIVABLE-GL char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sales GL code
DataItem NK0GW-SALES-GL char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0GW01 Season string
DataItem NK0GW-SEASON char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0GW01 Season year
DataItem NK0GW-SEASON-YEAR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Sales GL changed flag
DataItem NK0GW-SLS-GL-CHG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sales GLAENT
DataItem NK0GW-SLS-GLAENT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sales GLANTAC
DataItem NK0GW-SLS-GLANTAC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sales GLAPRJ
DataItem NK0GW-SLS-GLAPRJ char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sales GLARCID
DataItem NK0GW-SLS-GLARCID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sales GLASUB
DataItem NK0GW-SLS-GLASUB char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Small integer of key
DataItem NK0GW-SML-NBR num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0GW01 Style found in dup arr
DataItem NK0GW-STYLE-FOUND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0GW01 product style
DataItem NK0GW-SY1STNBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0GW01 product color
DataItem NK0GW-SY2CLRID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0GW01 PO ID month range
DataItem NK0GW-VNCSTY-FOUND-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size of work 02 for temp stg
DataItem NK0GW-W02-SIZE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0GW01 product xdmcd
DataItem NK0GW-XDMCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0GW01 Season string code
DataItem NK0GW-XSECD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0GW01 Season string year
DataItem NK0GW-XSNYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0GW01 Season year, last two
DataItem NK0GW-YEAR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Change count of claim header o
DataItem NK0GW-ZZZCHGCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

