package nk0c;

import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom3.XPNL002;
import corpcom3.XPNL004;
import corpcom3.XPNL005;
import corpcom4.XSENTRY;
import corpcom4.XSNKS-MAP-MODE;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XCLTBL;
import corpx1.XCTTBL;
import corpx1.XLATBL;
import corpz3.ZPSTBL;
import ku.common.KUCREC;
import nk.common.NK1TBL;
import nk.common.NKWREC;
import nl.common.NLXREC;
import ta.common.TA1REC;
import ta.common.TA2REC;
import vv.common.VNCCOM01;
import vv.common.VNCHDR01;
//*** PROGRAM=NK0C ****
// ************************************************************
// 
//   NK0C - International Claims Comments Sceen
//   ------------------------------------------
// 
// General program explanation and notes:
// 
//   This application will be used to enter claim related
// comments. Two types of comments may be entered: print
// comments (will print on claim) and internal comments
// (display only). This screen will be the second screen in
// the claims processing flow. It will be accessed from the
// Claim Header Information screen (NK0B) or via fast path
// with a valid International claim identification as the
// fast path item.
//   This screen will be used for claims creation, maintenance
// and inquiry. The screen mode will be determined by the used
// international claims screen mode table.
//   This application will determine the next screen in the
// claims process. It will use the claim type to determine
// the next application. If the claim is a defective, the
// it will flow to the defective items screen (NK0DM200). If
// the claim is a product related claim type, the application
// will flow to the product items screen (NK0DM100). If the
// claim is a miscellaneous type, the application will flow
// to the miscellaneous charge items screen (NK0E).
// ------------------------------------------------------------
// Maintenance History:
// --------------------
//   Date   Who    Remarks
// -------- ------ --------------------------------------------
// 09-14-92 jjudki new application.
// 03-14-94 kshaw  march db changes.
// *********************
Program NK0C type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "NL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  KUCREC KUCREC; // record
  NK0CW01 NK0CW01; // record
  NKWREC NKWREC; // record
  NLXREC NLXREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA2REC TA2REC; // record
  VNCCOM01 VNCCOM01; // record
  VNCHDR01 VNCHDR01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCLTBL {deleteAfterUse = yes}; // table
  use XLATBL {deleteAfterUse = yes}; // table
  use XCTTBL {deleteAfterUse = yes}; // table
  use NK1TBL {deleteAfterUse = yes}; // table
  use ZPSTBL {deleteAfterUse = yes}; // table
  use NK0CT; // table
  use NK0CM.NK0CM100 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    NK0C-000: NK0C-000();
    exit program;
  end // end main
end // end NK0C

// Application main logic
Function NK0C-000()
   /* -----------------------------------------------------------*/
      /* This is the "main logic" for the application.*/
  ;
      /* xsentry checks to ensure that this application was*/
            /* entered from another csp application.*/
  ;
   /* -----------------------------------------------------------*/
  ;
  NLXREC.NLXCPROC = "NK0C-000";
  ;
  NK0C-001(); /* Initialize the application*/
  ;
  NLXREC.NLXEOAF = "N"; /* set end-of-application flag to 'no'*/
  ;
  while (NLXREC.NLXEOAF == "N") /* while not end-of-aplication*/
    NK0C-050(); /* screen branch control*/
  end
  ;
  XSPF4();
  ;
end // end NK0C-000

// Initialize application
Function NK0C-001()
   /* -----------------------------------------------------------*/
         /* Initialize the application working storage*/
  ;
   /* -----------------------------------------------------------*/
  ;
  NLXREC.NLXCPROC = "NK0C-001";
  ;
  converseVar.commitOnConverse = 1; /* force db2 to commit on each screen*/
                                   /* converse*/
  VGVar.handleHardIOErrors = 1; /* return control to program if hard db2*/
                                   /* error*/
  ;
  XSENTRY(); /* check entry thru main menu*/
  XSSEGTR(); /* set segmented transaction id*/
  ;
  set SQLCA empty; /* clear out the "common" working*/
                                   /* storage*/
  set ERRSQLCA empty; /* clear out the "common" working*/
                                   /* storage*/
  set TA1REC empty; /* clear out the "common" working*/
                                   /* storage*/
  set NLXREC empty; /* clear out the "common" working*/
                                   /* storage*/
  set NK0CW01 empty;
  set KUCREC empty;
  set NKWREC empty;
  set VNCHDR01 empty;
  ;
  if (COMMAREA.CAFRMSYS != "NK")
    COMMAREA.CAUSERA = " ";
  end
  ;
  NLXREC.NLXEOAF = "N"; /* set end-of-application flag 'no'*/
  NLXREC.NLXERRF = "N"; /* set error-flag to 'no'*/
  ;
   /* ------------------------------------------------------*/
    /* Set up working-storage array of screen names*/
   /* ------------------------------------------------------*/
  ;
  NLXREC.NLXCSCRN = "NK0CM100"; /* first header*/
  ;
  NLXREC.NLXSNAME[1] = "NK0CM100";
                                   /* init screens used in this applic.*/
  NLXREC.NLXSNAME[2] = "NK0CM200";
  NLXREC.NLXSNAME[3] = "NK0CM300";
  ;
   /* **********************************************/
   /* Was this application entered via 'fastpath'?*/
   /* **********************************************/
  ;
  if (COMMAREA.CAITEM != " ") /* 'Item' will be non-blank if fastpath*/
    ;
    XPNL004(); /* Validate caitem numeric*/
    ;
    if (NLXREC.NLXERRF == "Y") /* If error in 'item'*/
      NKWREC.NKW-MSG-NBR = 32; /* Clear work area for key*/
      COMMAREA.CATOAP = "NK0A";
      COMMAREA.CAUSERA = NKWREC.NKW-GROUP;
      XPNL002();
    else
      VNCHDR01.NL-CLM-ID = NLXREC.NLXNUM8A;
      NK0CS-SEL-VNCHDR01(); /* Select unique Claim Id*/
      if (SQLCA.VAGen_SQLCODE == 100)
        NLXREC.NLXERRF = "Y";
        NKWREC.NKW-MSG-NBR = 289; /* Claim Id Not Found*/
        COMMAREA.CATOAP = "NK0A"; /* Claim Selection Criteria*/
        XPNL002();
        return;
      end
      NKWREC.NL-CLM-ID = NLXREC.NLXNUM8A;
      if (SQLCA.VAGen_SQLCODE == 0)
        COMMAREA.CAUSERA = " ";
        COMMAREA.CATOAP = "NK0B"; /* Claim Header Information*/
        XPNL002();
        return;
      end
      ;
    end
    ;
    COMMAREA.CATOAP = " "; /* Clear commarea*/
    COMMAREA.CAITEM = " ";
    ;
  else /* Must Be Transfer From NK0B*/
    if (COMMAREA.CAFROMAP == "NK0B"
     || COMMAREA.CAFROMAP == "NK0D"
     || COMMAREA.CAFROMAP == "NK0E")
      /* next sentence*/
    else
      COMMAREA.CAUSERA = " ";
      COMMAREA.CATOAP = "NK0A"; /* Claim Selection Criteria*/
      XPNL002();
      return;
    end
    if (COMMAREA.CAUSERA != " ")
      NKWREC.NKW-GROUP = COMMAREA.CAUSERA;
      ;
      if (NKWREC.NKW-MSG-NBR > 0
       && COMMAREA.CAFRMSYS == "NF")
        NLXREC.NLXERRF = "Y";
        NLXREC.NLXCSCRN = "NK0CM100";
        return;
      end
      ;
    end
  end
end // end NK0C-001

// Screen branch control
Function NK0C-050()
   /* -----------------------------------------------------------*/
      /* Control process the application screen(s)*/
  ;
     /* Note that this process is being performed in a*/
     /* "while loop" until the end-of-application flag is set*/
     /* to 'y'.*/
  ;
   /* -----------------------------------------------------------*/
  ;
  NLXREC.NLXCPROC = "NK0C-050"; /* set current process name*/
  ;
  sysVar.arrayIndex = 0;
  NLXREC.NLXSCRNX = 0;
  ;
  if (NLXREC.NLXCSCRN in NLXREC.NLXSNAME)
     /* if current-screen-name is in the screen-array, then set*/
     /* the screen-index*/
    NLXREC.NLXSCRNX = sysVar.arrayIndex;
  end
  ;
  NLXREC.NLXEOSF = "N"; /* set end-of-screen flag to 'no'*/
  NLXREC.NLXBLDSC = "Y"; /* set build screen flag to 'yes'*/
  NLXREC.NLXERRF = "N"; /* clear error flag*/
  ;
  if (NLXREC.NLXSCRNX == 1) /* if screen NK0CM100*/
    while (NLXREC.NLXEOSF == "N") /* while not end-of-screen*/
      NK0C-100();
    end
  end
  ;
   /* at this point;*/
       /* if the end-of-application flag (nlxeoaf ) = 'n'*/
         /* the perform will return to the top of NK0%050...*/
       /* else*/
         /* the perform will auto return to NK0%000.*/
  ;
  ;
end // end NK0C-050

// Claims Comments
Function NK0C-100()
   /* -----------------------------------------------------------*/
       /* Process screen NK0CM100*/
  ;
     /* note - this process is being performed in a*/
        /* "while loop" from NK0C050 until the end-of-screen*/
        /* flag (nlxeosfl) is set to 'y'.*/
  ;
   /* -----------------------------------------------------------*/
  ;
  NLXREC.NLXCPROC = "NK0C-100";
  ;
  if (NLXREC.NLXBLDSC == "Y")
    NK0C-101();
    NLXREC.NLXBLDSC = "N";
  end
  ;
  converse NK0CM100 ;
  ;
  NK0CM100.VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";
  ;
  ;
  NK0C-110(); /* check attention identifier*/
  ;
  if (NLXREC.NLXERRF == "N") /* check for error*/
    NK0C-120(); /* process entered option*/
  end
  ;
  if (NLXREC.NLXERRF == "N") /* check for error*/
    NK0C-130(); /* determine next action...*/
  end
  ;
  ;
end // end NK0C-100

// Build screen
Function NK0C-101()
   /* **************************************/
   /* Build MAP NK0CM100                 **/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NK0C-101";
  ;
  converseLib.clearScreen();
  set NK0CM100 initial;
  ;
  if (NKW-FROM-APP == "NK0G")
    set NK0CM100.NK0CM-PF1 skip, invisible;
    set NK0CM100.NK0CM-PF4 skip, invisible;
    set NK0CM100.NK0CM-PF20 skip, invisible;
  end
  ;
  set VNCCOM01 empty;
  VNCCOM01.NL-CLM-ID = NKWREC.NL-CLM-ID; /* Claim Id*/
  VNCCOM01.NL-CLM-COMNT-IND = "P";
  ;
  NK0C-102(); /* Declare Claims Print Comments Cursor*/
  ;
  NK0CW01.NK0CW-01-END = "N";
  NK0CW01.NK0CW-01-ONE = "Y";
  NK0CW01.NK0CW-01-PCT = 0; /* Print Comment Fetch Count*/
  ;
  while (NK0CW01.NK0CW-01-END == "N")
    NK0C-103(); /* Fetch Claims Print Comments Rows*/
  end
  if (NK0CW-01-PCT == 0)
    NK0CS-GET-DEFAULTS();
  end
  ;
  if (NK0CW01.NK0CW-01-ONE == "N") /* First Time*/
    NK0CW01.NK0CW-01-DX1 = 1; /* Init Array Index*/
    NK0CW01.NK0CW-01-DX2 = 1; /* Init Screen Row Index*/
    while (NK0CW01.NK0CW-01-DX1 < 5)
      NK0CS-LOAD-PCOMNTS(); /* Load First Page Of Map Comments*/
    end
    NK0CW01.NK0CW-01-DX7 = NK0CW01.NK0CW-01-DX1;
                                                  /* Save Last Screen Index*/
  end
  ;
  set VNCCOM01 empty;
  VNCCOM01.NL-CLM-ID = NKWREC.NL-CLM-ID; /* Claim Id*/
  VNCCOM01.NL-CLM-COMNT-IND = "I";
  ;
  NK0C-102(); /* Declare Claims Comments Cursor*/
  ;
  NK0CW01.NK0CW-01-END = "N";
  NK0CW01.NK0CW-01-ONE = "Y";
  NK0CW01.NK0CW-01-ICT = 0; /* Internal Comment Fetch Count*/
  ;
  while (NK0CW01.NK0CW-01-END == "N")
    NK0C-104(); /* Fetch Claims Internal Comments Rows*/
  end
  ;
  if (NK0CW01.NK0CW-01-ONE == "N") /* First Time*/
    NK0CW01.NK0CW-01-DX3 = 1; /* Init Array Index*/
    NK0CW01.NK0CW-01-DX4 = 1; /* Init Screen Row Index*/
    while (NK0CW01.NK0CW-01-DX3 < 8)
      NK0CS-LOAD-ICOMNTS(); /* Load First Page Of Map Comments*/
    end
    NK0CW01.NK0CW-01-DX8 = NK0CW01.NK0CW-01-DX3;
                                                  /* Save Last Screen Index*/
  end
  ;
  NK0CM100.XXXRVNBR = "00"; /* revision nbr*/
  NK0CM100.XXXMAPNM = "NK0CM100"; /* map name*/
  NK0CM100.XXXPRCNM = "NK0C-100"; /* process name*/
  NK0CM100.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  ;
  set NK0CM100.KUCCOID protect; /* Customer Id*/
  set NK0CM100.KUCCONM protect; /* Customer Name*/
  set NK0CM100.XCTDESC protect; /* Country Description*/
  set NK0CM100.XXX-SUM-ZCR-CD protect; /* Claim Type*/
  set NK0CM100.XXX-SUM-ZCR-DESC protect; /* Claim Description*/
  set NK0CM100.NL-CLM-ID protect; /* Claim Id*/
  ;
  NK0CM100.KUCCOID = NKWREC.KUCCOID;
  NK0CM100.KUCCONM = NKWREC.KUCCONM;
  NK0CM100.XCTDESC = NKWREC.XCTDESC;
  NK0CM100.XXX-SUM-ZCR-CD = NKWREC.XXX-SUM-ZCR-CD;
  NK0CM100.XXX-SUM-ZCR-DESC = NKWREC.XXX-SUM-ZCR-DESC;
  NK0CM100.NL-CLM-ID = NKWREC.NL-CLM-ID;
  ;
  XSNKS-MAP-MODE(); /* Common Routine To Set Map Mode*/
  ;
  if (NKWREC.NKW-MAP-MODE == "I")
    set NK0CM100.NK0CM-100-PC[1] skip;
    set NK0CM100.NK0CM-100-PC[2] skip;
    set NK0CM100.NK0CM-100-PC[3] skip;
    set NK0CM100.NK0CM-100-PC[4] skip;
   /* SET NK0CM100.NK0CM-100-IC(1) PROTECT;*/
   /* SET NK0CM100.NK0CM-100-IC(2) PROTECT;*/
   /* SET NK0CM100.NK0CM-100-IC(3) PROTECT;*/
   /* SET NK0CM100.NK0CM-100-IC(4) PROTECT;*/
   /* SET NK0CM100.NK0CM-100-IC(5) AUTOSKIP;*/
   /* SET NK0CM100.NK0CM-100-IC(6) AUTOSKIP;*/
   /* SET NK0CM100.NK0CM-100-IC(7) AUTOSKIP;*/
    set NK0CM100.NK0CM-100-IC[1] cursor;
  end
  ;
end // end NK0C-101

// declare cursor for VNCC0M01
Function NK0C-102()
  ;
  NLXREC.NLXCPROC = "NK0C-102";
  ;
   /* declare cursor - Claim Print Comments in w-s*/
  ;
  call "IO6500" ("S1", SQLCA, VNCCOM01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "S1     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO6500 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VNCCOM01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
  ;
  ;
end // end NK0C-102

// fetch rows from VNCCOM01
Function NK0C-103()
  ;
  NLXREC.NLXCPROC = "NK0C-103"; /* set current proc name*/
  ;
   /* fetch from cursor*/
  call "IO6500" ("N1", SQLCA, VNCCOM01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (NK0CW01.NK0CW-01-PCT > 98
   || SQLCA.VAGen_SQLCODE == 100)
    call "IO6500" ("C1", SQLCA, VNCCOM01) {isNoRefresh = yes, isExternal = yes};
    NK0CW01.NK0CW-01-END = "Y";
  else
    if (SQLCA.VAGen_SQLCODE == 0)
      if (NK0CW01.NK0CW-01-ONE == "Y")
        NK0CW01.NK0CW-01-ONE = "N";
        NK0CW01.NK0CW-01-DX1 = 1;
      end
      NK0CW01.NK0CW-01-PTXT[NK0CW-01-DX1] = VNCCOM01.NL-CLM-COMNT;
      NK0CW01.NK0CW-01-PSEQ[NK0CW-01-DX1] = VNCCOM01.NL-CLM-COMNT-NBR;
      NK0CW01.NK0CW-01-PS[NK0CW-01-DX1] = NK0CW01.NK0CW-01-DX1;
      NK0CW01.NK0CW-01-DX1 = NK0CW01.NK0CW-01-DX1 + 1;
      NK0CW01.NK0CW-01-PCT = NK0CW01.NK0CW-01-PCT + 1;
    else
      TA1REC.TA1LOCAT[2] = "N1     "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO6500 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VNCCOM01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end
  ;
end // end NK0C-103

// fetch rows from VNCCOM01
Function NK0C-104()
  ;
  NLXREC.NLXCPROC = "NK0C-104"; /* set current proc name*/
  ;
   /* fetch from cursor*/
  call "IO6500" ("N1", SQLCA, VNCCOM01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (NK0CW01.NK0CW-01-ICT > 100
   || SQLCA.VAGen_SQLCODE == 100)
    call "IO6500" ("C1", SQLCA, VNCCOM01) {isNoRefresh = yes, isExternal = yes};
    NK0CW01.NK0CW-01-END = "Y";
  else
    if (SQLCA.VAGen_SQLCODE == 0)
      if (NK0CW01.NK0CW-01-ONE == "Y")
        NK0CW01.NK0CW-01-ONE = "N";
        NK0CW01.NK0CW-01-DX3 = 1;
      end
      NK0CW01.NK0CW-01-ITXT[NK0CW-01-DX3] = VNCCOM01.NL-CLM-COMNT;
      NK0CW01.NK0CW-01-ISEQ[NK0CW-01-DX3] = VNCCOM01.NL-CLM-COMNT-NBR;
      NK0CW01.NK0CW-01-IS[NK0CW-01-DX3] = NK0CW01.NK0CW-01-DX3;
      NK0CW01.NK0CW-01-DX3 = NK0CW01.NK0CW-01-DX3 + 1;
      NK0CW01.NK0CW-01-ICT = NK0CW01.NK0CW-01-ICT + 1;
    else
      TA1REC.TA1LOCAT[2] = "N1     "; /* database action*/
      TA1REC.TA1LOCAT[3] = "IO6500 "; /* io module*/
      TA1REC.TA1DBASE = "DNILO"; /* database*/
      TA1REC.TA1TBLVU = "VNCCOM01"; /* table view*/
      XPNL005(); /* abend routine*/
    end
  end
  ;
end // end NK0C-104

// Validate PF keys; act on some
Function NK0C-110()
   /* -----------------------------------------------------------*/
     /* Validate PF keys*/
  ;
     /* Active PF keys: 1, 3, 4, 7, 8, 20*/
   /* -----------------------------------------------------------*/
  ;
  NLXREC.NLXCPROC = "NK0C-110";
  ;
  set NK0CM100.CATOAP initialAttributes;
  set NK0CM100.CAITEM initialAttributes;
  ;
   /* ***********************************/
      /* If from invoicing allow updates, paging and back to NK0B only*/
   /* ***********************************/
  ;
  if (NKW-FROM-APP == "NK0G")
    if (converseVar.eventKey is enter)
      if (NK0CM100.CATOAP > " ")
        NLXREC.NLXERRF = "Y"; /* Set Error Flag*/
        converseLib.validationFailed(353); /* Invalid PF Key Used*/
        return;
      end
      return;
    end
    if (converseVar.eventKey is pf3 /* Return To Previous Application*/
     || converseVar.eventKey is pf7 /* Page Back*/
     || converseVar.eventKey is pf8) /* Page Forward*/
        /* NEXT SENTENCE*/
    else /* pf keys not allow during ivc credit*/
      if (converseVar.eventKey is pf1 /* Return To Previous Application*/
       || converseVar.eventKey is pf4 /* Page Back*/
       || converseVar.eventKey is pf20) /* Page Forward*/
        NLXREC.NLXERRF = "Y"; /* Set Error Flag*/
        converseLib.validationFailed(343); /* Invalid PF Key Used*/
        return;
      else
        NLXREC.NLXERRF = "Y"; /* Set Error Flag*/
        converseLib.validationFailed(2); /* Invalid PF Key Used*/
        return;
      end
    end
  end
  ;
   /* ***********************************/
      /* check for fastpath option/item*/
   /* ***********************************/
  ;
  if (converseVar.eventKey is enter /* Xfer To NK0B*/
   || converseVar.eventKey is pf1   /* Help*/
   || converseVar.eventKey is pf3   /* Return To Previous Application*/
   || converseVar.eventKey is pf4   /* Return To MN0M*/
   || converseVar.eventKey is pf7   /* Page Back*/
   || converseVar.eventKey is pf8   /* Page Forward*/
   || converseVar.eventKey is pf20) /* Xfer to NL0A*/
    /* next sentence*/
  else
    NLXREC.NLXERRF = "Y"; /* Set Error Flag*/
    converseLib.validationFailed(2); /* Invalid PF Key Used*/
    return;
  end
  ;
  if (NK0CM100.CATOAP != " ") /* if fastpath option entered,*/
    if (converseVar.eventKey is enter)
      COMMAREA.CATOAP = NK0CM100.CATOAP;
      COMMAREA.CAITEM = NK0CM100.CAITEM;
      COMMAREA.CAUSERA = " ";
      XPNL002(); /* exit application*/
      set NK0CM100.CATOAP cursor, bold; /* exit failed*/
      return;
    end
  end
  ;
  if (converseVar.eventKey is enter /* Valid Non-transfer PF Keys*/
   || converseVar.eventKey is pf7   /* Page Back*/
   || converseVar.eventKey is pf8)  /* Page Forward*/
    return;
  end
  ;
  if (converseVar.eventKey is pf1) /* skip edit/updt, go to 'help'*/
    XSPF1(); /* exit*/
  end
  ;
  if (converseVar.eventKey is pf3)
    NLXREC.NLXEOSF = "Y";
    /* MOVE COMMAREA.CAFROMAP TO COMMAREA.CATOAP;/* go to previous appl*/
    COMMAREA.CAUSERA = NKWREC.NKW-GROUP;
    COMMAREA.CATOAP = "NK0B"; /* go to previous level*/
    COMMAREA.CACURSYS = "NK";
    XPNL002(); /* exit*/
  end
  ;
  if (converseVar.eventKey is pf4) /* go to master menu*/
    NLXREC.NLXEOSF = "Y";
    COMMAREA.CAUSERA = " "; /* exit*/
    XSPF4();
  end
  ;
  if (converseVar.eventKey is pf20)
    NLXREC.NLXEOSF = "Y";
    COMMAREA.CATOAP = "NL0A"; /* go to previous level*/
    COMMAREA.CAUSERA = " ";
    XPNL002(); /* exit*/
  end
  ;
      /* pf key not valid*/
  ;
  converseLib.validationFailed(2); /* pf key not valid*/
  NLXREC.NLXERRF = "Y"; /* mark with error*/
  ;
  ;
end // end NK0C-110

// Edit/Act on function keys
Function NK0C-120()
   /* *****************************************************/
   /* Edit Claims Screen Entries*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0C-120";
  ;
  if (NKW-MAP-MODE != "I")
    set NK0CM100.NK0CM-100-PC[1] cursor, normal;
  end
  NK0CW01.NK0CW-01-DX7 = NK0CW01.NK0CW-01-DX7 - 4;
  NK0CW01.NK0CW-01-DX8 = NK0CW01.NK0CW-01-DX8 - 7;
  ;
  if (NK0CW01.NK0CW-01-DX7 < 1)
    NK0CW01.NK0CW-01-DX7 = 1;
  end
  if (NK0CW01.NK0CW-01-DX8 < 1)
    NK0CW01.NK0CW-01-DX8 = 1;
  end
  ;
   /* IF NK0CW01.NK0CWONE = 'N';*/
  NK0CW01.NK0CW-01-DX2 = 1;
  while (NK0CW01.NK0CW-01-DX2 < 5)
    NK0C-121(); /* Change Print Comments W/S*/
  end
  ;
  NK0CW01.NK0CW-01-DX4 = 1;
  while (NK0CW01.NK0CW-01-DX4 < 8)
    NK0C-123(); /* Change Internal Comments W/S*/
  end
  ;
   /* Make Sure At Least One Print Comment Was Entered*/
  ;
  if (converseVar.eventKey not pf7)
    if (NK0CM100.NK0CM-100-PC[1] > "  "
     || NK0CW01.NK0CW-01-PTXT[1] > "  "
     || NK0CW01.NK0CW-01-PTXT[2] > "  "
     || NK0CW01.NK0CW-01-PTXT[3] > "  "
     || NK0CW01.NK0CW-01-PTXT[4] > "  ")
  /* next sentence*/
    else
      set NK0CM100.NK0CM-100-PC[1] cursor, bold;
      converseLib.validationFailed(324);
      NLXREC.NLXERRF = "Y";
    end
  end
  ;
  ;
end // end NK0C-120

// delete existing comments
Function NK0C-121()
  ;
  NLXREC.NLXCPROC = "NK0C-121";
  ;
   /* IF NK0CM100.NK0CM-100-PC(NK0CWDX2) IS MODIFIED;*/
    /* IF NK0CM100.NK0CM-100-PC(NK0CWDX2) EQ '  ';*/
    /* next sentence*/
    /* ELSE;*/
    /* Change Claims Print W/S*/
  NK0CW01.NK0CW-01-PTXT[NK0CW-01-DX7] = NK0CM100.NK0CM-100-PC[NK0CW-01-DX2];
  NK0CW01.NK0CW-01-DX7 = NK0CW01.NK0CW-01-DX7 + 1;
    /* END;*/
   /* END;*/
  ;
  NK0CW01.NK0CW-01-DX2 = NK0CW01.NK0CW-01-DX2 + 1;
  ;
end // end NK0C-121

// delete existing comments
Function NK0C-123()
  ;
  NLXREC.NLXCPROC = "NK0C-123";
  ;
   /* IF NK0CM100.NK0CM-100-IC(NK0CWDX4) IS MODIFIED;*/
   /* IF NK0CM100.NK0CM-100-IC(NK0CWDX4) EQ '  ';*/
    /* next sentence*/
   /* ELSE;*/
     /* Change working storage*/
  NK0CW01.NK0CW-01-ITXT[NK0CW-01-DX8] = NK0CM100.NK0CM-100-IC[NK0CW-01-DX4];
  NK0CW01.NK0CW-01-DX8 = NK0CW01.NK0CW-01-DX8 + 1;
   /* END;*/
   /* END;*/
  ;
  NK0CW01.NK0CW-01-DX4 = NK0CW01.NK0CW-01-DX4 + 1;
  ;
end // end NK0C-123

// Determine next action
Function NK0C-130()
  ;
  NLXREC.NLXCPROC = "NK0C-130";
  ;
  NK0CW01.NK0CW-01-PDF = "N";
  NK0CW01.NK0CW-01-IDF = "N";
  ;
  if (converseVar.eventKey is pf8) /* *Page Forward**/
    ;
    if (NK0CW01.NK0CW-01-DX7 <= 98 /* If at least 7 rows left to show*/
     && NK0CM100.NK0CM-100-PC[4] > "  ")
      NK0CW01.NK0CW-01-PPG = "Y"; /* Load page of text array*/
      NK0CW01.NK0CW-01-DX2 = 1; /* Init screen index*/
      while (NK0CW01.NK0CW-01-DX2 <= 4) /* Do until screen lines are filled*/
        NK0CM100.NK0CM-100-PC[NK0CW-01-DX2] = " ";
        NK0CW01.NK0CW-01-DX2 = NK0CW01.NK0CW-01-DX2 + 1;
                                                      /* Accum screen index*/
      end
      NK0CW01.NK0CW-01-DX2 = 1; /* Init screen index*/
      NK0CW01.NK0CW-01-DX1 = NK0CW01.NK0CW-01-DX7;
      while (NK0CW01.NK0CW-01-DX2 <= 4) /* Do until screen lines are filled*/
        NK0CM100.NK0CM-100-PC[NK0CW-01-DX2] = NK0CW01.NK0CW-01-PTXT[NK0CW-01-DX1];
        NK0CW01.NK0CW-01-DX5 = NK0CW01.NK0CW-01-DX2;
        if (NKWREC.NKW-MAP-MODE == "I")
          set NK0CM100.NK0CM-100-PC[NK0CW-01-DX2] protect;
        end
        NK0CW01.NK0CW-01-DX2 = NK0CW01.NK0CW-01-DX2 + 1;
                                                      /* Accum screen index*/
        NK0CW01.NK0CW-01-DX1 = NK0CW01.NK0CW-01-DX1 + 1;
                                                       /* Accum Array Index*/
      end
      NK0CW01.NK0CW-01-DX7 = NK0CW01.NK0CW-01-DX7 + NK0CW01.NK0CW-01-DX2;
      NK0CW01.NK0CW-01-DX7 = NK0CW01.NK0CW-01-DX7 - 1;
    else
      NK0CW01.NK0CW-01-PDF = "Y";
      ;
    end
    ;
     /* Process Internal Comments*/
    ;
    if (NK0CW01.NK0CW-01-DX8 <= 100 /* If at least 4 rows left to show*/
     && NK0CM100.NK0CM-100-IC[7] > "  ")
      NK0CW01.NK0CW-01-IPG = "Y"; /* Load page of text array*/
      NK0CW01.NK0CW-01-DX4 = 1; /* Init screen index*/
      while (NK0CW01.NK0CW-01-DX4 <= 7) /* Do until screen lines are filled*/
        NK0CM100.NK0CM-100-IC[NK0CW-01-DX4] = " ";
        NK0CW01.NK0CW-01-DX4 = NK0CW01.NK0CW-01-DX4 + 1;
                                                      /* Accum screen index*/
      end
      NK0CW01.NK0CW-01-DX4 = 1; /* Init screen index*/
      NK0CW01.NK0CW-01-DX3 = NK0CW01.NK0CW-01-DX8;
      while (NK0CW01.NK0CW-01-DX4 <= 7) /* Do until screen lines are filled*/
        NK0CM100.NK0CM-100-IC[NK0CW-01-DX4] = NK0CW01.NK0CW-01-ITXT[NK0CW-01-DX3];
        NK0CW01.NK0CW-01-DX6 = NK0CW01.NK0CW-01-DX4;
        if (NKWREC.NKW-MAP-MODE == "I")
         /* SET NK0CM100.NK0CM-100-IC(NK0CWDX4) PROTECT;*/
          set NK0CM100.NK0CM-100-IC[1] cursor;
        end
        NK0CW01.NK0CW-01-DX4 = NK0CW01.NK0CW-01-DX4 + 1;
                                                      /* Accum screen index*/
        NK0CW01.NK0CW-01-DX3 = NK0CW01.NK0CW-01-DX3 + 1;
                                                       /* Accum Array Index*/
      end
      NK0CW01.NK0CW-01-DX8 = NK0CW01.NK0CW-01-DX8 + NK0CW01.NK0CW-01-DX4;
      NK0CW01.NK0CW-01-DX8 = NK0CW01.NK0CW-01-DX8 - 1;
    else
      NK0CW01.NK0CW-01-IDF = "Y";
      ;
    end
    ;
    if (NK0CW01.NK0CW-01-PDF == "Y"
     && NK0CW01.NK0CW-01-IDF == "Y")
      converseLib.validationFailed(30); /* Bottom of File, No Scrolling Possible*/
    end
    ;
    return;
  end
  ;
  ;
  if (converseVar.eventKey is pf7) /* *Page Back**/
    NK0CW01.NK0CW-01-WW1X = NK0CW01.NK0CW-01-DX7 - 8;
    if (NK0CW01.NK0CW-01-WW1X >= 1) /**/
      NK0CW01.NK0CW-01-PPG = "Y"; /* Load page of text array*/
      NK0CW01.NK0CW-01-DX2 = 1; /* Init screen index*/
      while (NK0CW01.NK0CW-01-DX2 <= 4) /* Initialize Screen Lines*/
        NK0CM100.NK0CM-100-PC[NK0CW-01-DX2] = " ";
        NK0CW01.NK0CW-01-DX2 = NK0CW01.NK0CW-01-DX2 + 1;
      end
      NK0CW01.NK0CW-01-DX2 = 1; /* Init screen index*/
      NK0CW01.NK0CW-01-DX1 = NK0CW01.NK0CW-01-WW1X;
                                                        /* Init array index*/
      while (NK0CW01.NK0CW-01-DX2 <= 4) /* Do until screen lines are filled*/
        NK0CM100.NK0CM-100-PC[NK0CW-01-DX2] = NK0CW01.NK0CW-01-PTXT[NK0CW-01-DX1];
        NK0CW01.NK0CW-01-DX1 = NK0CW01.NK0CW-01-DX1 + 1;
                                                       /* Accum array index*/
        NK0CW01.NK0CW-01-DX5 = NK0CW01.NK0CW-01-DX2;
        if (NKWREC.NKW-MAP-MODE == "I")
          set NK0CM100.NK0CM-100-PC[NK0CW-01-DX2] protect;
        end
        NK0CW01.NK0CW-01-DX2 = NK0CW01.NK0CW-01-DX2 + 1;
                                                       /* Accum array index*/
      end
      NK0CW01.NK0CW-01-WW1X = NK0CW01.NK0CW-01-DX1 - 4;
      NK0CW01.NK0CW-01-DX7 = NK0CW01.NK0CW-01-DX7 - NK0CW01.NK0CW-01-DX5;
    else
      NK0CW01.NK0CW-01-PDF = "Y";
    end
    ;
     /* Process Internal Comments*/
    ;
    NK0CW01.NK0CW-01-WW2X = NK0CW01.NK0CW-01-DX8 - 14;
    if (NK0CW01.NK0CW-01-WW2X >= 1) /**/
      NK0CW01.NK0CW-01-IPG = "Y"; /* Load page of text array*/
      NK0CW01.NK0CW-01-DX4 = 1; /* Init screen index*/
      while (NK0CW01.NK0CW-01-DX4 <= 7) /* Initialize Screen Lines*/
        NK0CM100.NK0CM-100-IC[NK0CW-01-DX4] = " ";
        NK0CW01.NK0CW-01-DX4 = NK0CW01.NK0CW-01-DX4 + 1;
      end
      NK0CW01.NK0CW-01-DX4 = 1; /* Init screen index*/
      NK0CW01.NK0CW-01-DX3 = NK0CW01.NK0CW-01-WW2X;
                                                        /* Init array index*/
      while (NK0CW01.NK0CW-01-DX4 <= 7) /* Do until screen lines are filled*/
        NK0CM100.NK0CM-100-IC[NK0CW-01-DX4] = NK0CW01.NK0CW-01-ITXT[NK0CW-01-DX3];
        NK0CW01.NK0CW-01-DX3 = NK0CW01.NK0CW-01-DX3 + 1;
                                                      /* Accum screen index*/
        NK0CW01.NK0CW-01-DX6 = NK0CW01.NK0CW-01-DX4;
        if (NKWREC.NKW-MAP-MODE == "I")
         /* SET NK0CM100.NK0CM-100-IC(NK0CWDX4) PROTECT;*/
          set NK0CM100.NK0CM-100-IC[1] cursor;
        end
        NK0CW01.NK0CW-01-DX4 = NK0CW01.NK0CW-01-DX4 + 1;
                                                       /* Accum array index*/
      end
      NK0CW01.NK0CW-01-WW2X = NK0CW01.NK0CW-01-DX3 - 7;
      NK0CW01.NK0CW-01-DX8 = NK0CW01.NK0CW-01-DX8 - NK0CW01.NK0CW-01-DX6;
    else
      NK0CW01.NK0CW-01-IDF = "Y";
    end
    ;
    if (NK0CW01.NK0CW-01-PDF == "Y"
     && NK0CW01.NK0CW-01-IDF == "Y")
      converseLib.validationFailed(29); /* Top of File, No Scrolling Possible*/
    end
    ;
    return;
  end
  ;
  ;
  if (converseVar.eventKey is enter) /* Transfer To NK0D or NK0E*/
    ;
    NK0C-131(); /* Delete Existing Print Comments*/
    ;
    NK0CW01.NK0CW-01-DX1 = 1;
    NK0CW01.NK0CW-01-SQCE = 0;
    while (NK0CW01.NK0CW-01-DX1 < 99)
      NK0C-132(); /* Add All Comments From W/S*/
    end
    ;
    NK0C-133(); /* Delete Existing Internal Comments*/
    ;
    NK0CW01.NK0CW-01-DX3 = 1;
    NK0CW01.NK0CW-01-SQCE = 0;
    while (NK0CW01.NK0CW-01-DX3 < 101)
      NK0C-134(); /* Add All Comments From W/S*/
    end
    ;
    if (NKWREC.XXX-SUM-ZCR-CD == "MI")
      NLXREC.NLXEOSF = "Y";
      COMMAREA.CATOAP = "NK0E"; /* Xfer To Claims Misc Charge*/
      COMMAREA.CAUSERA = NKWREC.NKW-GROUP;
      XPNL002(); /* exit*/
    else
      NLXREC.NLXEOSF = "Y";
      COMMAREA.CATOAP = "NK0D"; /* Xfer To Claims Defective Items*/
      COMMAREA.CAUSERA = NKWREC.NKW-GROUP;
      XPNL002(); /* exit*/
    end
    return;
  end
  ;
  ;
  converseLib.validationFailed(2); /* pf key not valid*/
  NLXREC.NLXERRF = "Y"; /* mark with error*/
  ;
  ;
end // end NK0C-130

// delete existing comments
Function NK0C-131()
  ;
  NLXREC.NLXCPROC = "NK0C-131";
  ;
   /* delete Claims Print Comments*/
  ;
   /* format key for table*/
  VNCCOM01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  VNCCOM01.NL-CLM-COMNT-IND = "P";
  ;
   /* delete print comment row*/
  call "IO6500" ("D1", SQLCA, VNCCOM01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "D1     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO6500 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VNCCOM01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
  ;
end // end NK0C-131

// Add New Print Comments
Function NK0C-132()
  ;
  NLXREC.NLXCPROC = "NK0C-132";
  ;
  if (NK0CW01.NK0CW-01-PTXT[NK0CW-01-DX1] == " ")
    NK0CW01.NK0CW-01-DX1 = NK0CW01.NK0CW-01-DX1 + 1;
    return;
  end
  ;
   /* format key for table*/
  ;
  NK0CW01.NK0CW-01-SQCE = NK0CW01.NK0CW-01-SQCE + 10;
  VNCCOM01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  VNCCOM01.NL-CLM-COMNT-IND = "P";
  VNCCOM01.NL-CLM-COMNT-NBR = NK0CW01.NK0CW-01-SQCE;
  VNCCOM01.NL-CLM-COMNT = NK0CW01.NK0CW-01-PTXT[NK0CW-01-DX1];
  VNCCOM01.ZZZSDT = XX0XWDAT;
  VNCCOM01.ZZZCHGDT = XX0XWDAT;
  VNCCOM01.ZZZCHGTM = XX0XWTIM;
  ;
   /* add PRINT comments*/
  call "IO6500" ("A ", SQLCA, VNCCOM01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "A      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO6500 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VNCCOM01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
  NK0CW01.NK0CW-01-DX1 = NK0CW01.NK0CW-01-DX1 + 1;
  ;
  ;
end // end NK0C-132

// delete existing comments
Function NK0C-133()
  ;
  NLXREC.NLXCPROC = "NK0C-133";
  ;
   /* delete Claims Internal Comments*/
  ;
   /* format key for table*/
  VNCCOM01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  VNCCOM01.NL-CLM-COMNT-IND = "I";
  ;
   /* delete print comment row*/
  call "IO6500" ("D1", SQLCA, VNCCOM01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0
   && SQLCA.VAGen_SQLCODE != 100)
    TA1REC.TA1LOCAT[2] = "D1     "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO6500 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VNCCOM01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
  ;
end // end NK0C-133

// Add New Internal Comments
Function NK0C-134()
  ;
  NLXREC.NLXCPROC = "NK0C-134";
  ;
  if (NK0CW01.NK0CW-01-ITXT[NK0CW-01-DX3] == " ")
    NK0CW01.NK0CW-01-DX3 = NK0CW01.NK0CW-01-DX3 + 1;
    return;
  end
  ;
   /* format key for table*/
  ;
  NK0CW01.NK0CW-01-SQCE = NK0CW01.NK0CW-01-SQCE + 10;
  VNCCOM01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  VNCCOM01.NL-CLM-COMNT-IND = "I";
  VNCCOM01.NL-CLM-COMNT-NBR = NK0CW01.NK0CW-01-SQCE;
  VNCCOM01.NL-CLM-COMNT = NK0CW01.NK0CW-01-ITXT[NK0CW-01-DX3];
  VNCCOM01.ZZZSDT = XX0XWDAT;
  VNCCOM01.ZZZCHGDT = XX0XWDAT;
  VNCCOM01.ZZZCHGTM = XX0XWTIM;
  ;
   /* add INTERNAL comments*/
  call "IO6500" ("A ", SQLCA, VNCCOM01) {isNoRefresh = yes, isExternal = yes};
  ;
  if (SQLCA.VAGen_SQLCODE != 0)
    TA1REC.TA1LOCAT[2] = "A      "; /* database action*/
    TA1REC.TA1LOCAT[3] = "IO6500 "; /* io module*/
    TA1REC.TA1DBASE = "DNILO"; /* database*/
    TA1REC.TA1TBLVU = "VNCCOM01"; /* table view*/
    XPNL005(); /* abend routine*/
  end
  ;
  NK0CW01.NK0CW-01-DX3 = NK0CW01.NK0CW-01-DX3 + 1;
  ;
  ;
end // end NK0C-134

// fetch rows from VNCCOM01
Function NK0CS-GET-DEFAULTS()
  ;
  NLXREC.NLXCPROC = "NK0CS-GET-DEFAULTS"; /* set current proc name*/
  ;
  NK0CW01.NK0CW-01-CMNT-KEY = "      ";
  if (NKWREC.ZCR-CLM-RSN-CD == "IN")
    NK0CW01.NK0CW-01-CLM-RSN-CD = "IN";
  end
  if (NKWREC.XXX-SUM-ZCR-CD == "DF")
    NK0CW01.NK0CW-01-SUM-ZCR-CD = "DF";
    NK0CW01.NK0CW-01-XGPCD = NKWREC.XGPCD;
  end
  sysVar.arrayIndex = 9;
  NK0CW01.NK0CW-01-DX1 = 1;
  NK0CW01.NK0CW-01-COMNT-NBR = 1;
  ;
  while (sysVar.arrayIndex != 0)
    ;
    if (NK0CW01.NK0CW-01-CMNT-KEY in NK0CT.NK0CT-KEY)
      NK0CW01.NK0CW-01-PTXT[NK0CW-01-DX1] = NK0CT.NK0CT-CLM-COMNT[sysVar.arrayIndex];
    end
    ;
    if (sysVar.arrayIndex == 0)
      NK0CW01.NK0CW-01-PTXT[NK0CW-01-DX1] = " ";
    else
      NK0CW01.NK0CW-01-ONE = "N";
      NK0CW01.NK0CW-01-PSEQ[NK0CW-01-DX1] = NK0CT.NK0CT-NL-CLM-COMNT-NBR[sysVar.arrayIndex];
      NK0CW01.NK0CW-01-PS[NK0CW-01-DX1] = NK0CW01.NK0CW-01-DX1;
      NK0CW01.NK0CW-01-DX1 = NK0CW01.NK0CW-01-DX1 + 1;
      NK0CW01.NK0CW-01-PCT = NK0CW01.NK0CW-01-PCT + 1;
    end
    NK0CW01.NK0CW-01-COMNT-NBR = NK0CW01.NK0CW-01-COMNT-NBR + 1;
  end
end // end NK0CS-GET-DEFAULTS

// move comments to ni0om100
Function NK0CS-LOAD-ICOMNTS()
  ;
  NLXREC.NLXCPROC = "NK0C-LOAD-ICOMNTS";
  ;
   /* match screen row with ws seq nbr to maintain*/
   /* original spacing*/
  if (NK0CW01.NK0CW-01-DX3 < NK0CW01.NK0CW-01-IS[NK0CW-01-DX4]
   || NK0CW01.NK0CW-01-IS[NK0CW-01-DX4] == 0)
    NK0CM100.NK0CM-100-IC[NK0CW-01-DX3] = " ";
    NK0CW01.NK0CW-01-DX3 = NK0CW01.NK0CW-01-DX3 + 1;
    return;
  end
  ;
  if (NK0CW01.NK0CW-01-IS[NK0CW-01-DX4] == 0)
    NK0CW01.NK0CW-01-DX3 = 7;
    return;
  end
  ;
   /* move ws text  to screen*/
  ;
  NK0CM100.NK0CM-100-IC[NK0CW-01-DX3] = NK0CW01.NK0CW-01-ITXT[NK0CW-01-DX4];
  ;
  NK0CW01.NK0CW-01-DX3 = NK0CW01.NK0CW-01-DX3 + 1;
  NK0CW01.NK0CW-01-DX4 = NK0CW01.NK0CW-01-DX4 + 1;
  ;
end // end NK0CS-LOAD-ICOMNTS

// move comments to ni0om100
Function NK0CS-LOAD-PCOMNTS()
  ;
  NLXREC.NLXCPROC = "NK0C-LOAD-PCOMNTS";
  ;
   /* match screen row with ws seq nbr to maintain*/
   /* original spacing*/
  if (NK0CW01.NK0CW-01-DX1 < NK0CW01.NK0CW-01-PS[NK0CW-01-DX2]
   || NK0CW01.NK0CW-01-PS[NK0CW-01-DX2] == 0)
    NK0CM100.NK0CM-100-PC[NK0CW-01-DX1] = " ";
    NK0CW01.NK0CW-01-DX1 = NK0CW01.NK0CW-01-DX1 + 1;
    return;
  end
  ;
  if (NK0CW01.NK0CW-01-PS[NK0CW-01-DX2] == 0)
    NK0CW01.NK0CW-01-DX1 = 4;
    return;
  end
  ;
   /* move ws text  to screen*/
  ;
  NK0CM100.NK0CM-100-PC[NK0CW-01-DX1] = NK0CW01.NK0CW-01-PTXT[NK0CW-01-DX2];
  ;
  NK0CW01.NK0CW-01-DX1 = NK0CW01.NK0CW-01-DX1 + 1;
  NK0CW01.NK0CW-01-DX2 = NK0CW01.NK0CW-01-DX2 + 1;
  ;
end // end NK0CS-LOAD-PCOMNTS

// Select VRCVGL01 Row
Function NK0CS-SEL-VNCHDR01()
  ;
  NLXREC.NLXCPROC = "NK0CS-SEL-VNCHDR01";
  ;
  call "IO6460" ("S ", SQLCA, VNCHDR01) {isNoRefresh = yes, isExternal = yes}; /* Select unique*/
  ;
  if (SQLCA.VAGen_SQLCODE == -911)
    converseLib.validationFailed(4); /* data base busy*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 0)
    /* next sentence*/
    else
      if (SQLCA.VAGen_SQLCODE == 100)
        converseLib.validationFailed(276); /* Not Valid Claim Id*/
      else
        TA1REC.TA1LOCAT[2] = "S      "; /* data base action*/
        TA1REC.TA1LOCAT[3] = "IO6460 "; /* io module*/
        TA1REC.TA1DBASE = "DNILO "; /* data base*/
        TA1REC.TA1TBLVU = "VNCHDR01"; /* table view*/
        XPNL005(); /* abend routine*/
      end
    end
  end
  ;
end // end NK0CS-SEL-VNCHDR01

//*** RECORD=NK0CW01 ****
// This is the main working storage record for NK0C.
// ***********************
Record NK0CW01 type basicRecord
  5 NK0CW-01-PCT NK0CW-01-PCT ; 
  5 NK0CW-01-ICT NK0CW-01-ICT ; 
  5 NK0CW-01-PPG NK0CW-01-PPG ; 
  5 NK0CW-01-PDF NK0CW-01-PDF ; 
  5 NK0CW-01-IPG NK0CW-01-IPG ; 
  5 NK0CW-01-IDF NK0CW-01-IDF ; 
  5 NK0CW-01-END NK0CW-01-END ; 
  5 NK0CW-01-ONE NK0CW-01-ONE ; 
  5 NK0CW-01-SQCE NK0CW-01-SQCE ; 
  5 NK0CW-01-DX1 NK0CW-01-DX1 ; 
  5 NK0CW-01-DX2 NK0CW-01-DX2 ; 
  5 NK0CW-01-WW1X NK0CW-01-WW1X ; 
  5 NK0CW-01-DX3 NK0CW-01-DX3 ; 
  5 NK0CW-01-DX4 NK0CW-01-DX4 ; 
  5 NK0CW-01-WW2X NK0CW-01-WW2X ; 
  5 NK0CW-01-DX5 NK0CW-01-DX5 ; 
  5 NK0CW-01-DX6 NK0CW-01-DX6 ; 
  5 NK0CW-01-DX7 NK0CW-01-DX7 ; 
  5 NK0CW-01-DX8 NK0CW-01-DX8 ; 
  5 NK0CW-01-PTXTA NK0CW-01-PTXTA [98] ; 
    10 NK0CW-01-PTXT NK0CW-01-PTXT ; 
    10 NK0CW-01-PSEQ NK0CW-01-PSEQ ; 
    10 NK0CW-01-PS NK0CW-01-PS ; 
  5 NK0CW-01-ITXTA NK0CW-01-ITXTA [100] ; 
    10 NK0CW-01-ITXT NK0CW-01-ITXT ; 
    10 NK0CW-01-ISEQ NK0CW-01-ISEQ ; 
    10 NK0CW-01-IS NK0CW-01-IS ; 
  5 NK0CW-01-CMNT-KEY NK0CW-01-CMNT-KEY ; 
    10 NK0CW-01-XGPCD NK0CW-01-XGPCD ; 
    10 NK0CW-01-SUM-ZCR-CD NK0CW-01-SUM-ZCR-CD ; 
    10 NK0CW-01-CLM-RSN-CD NK0CW-01-CLM-RSN-CD ; 
    10 NK0CW-01-COMNT-NBR NK0CW-01-COMNT-NBR ; 
end // end NK0CW01

// Claim reason
DataItem NK0CW-01-CLM-RSN-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Search for default comments
DataItem NK0CW-01-CMNT-KEY char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Row Sequence
DataItem NK0CW-01-COMNT-NBR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Print comments array index
DataItem NK0CW-01-DX1 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Print comments screen index
DataItem NK0CW-01-DX2 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Internal comments array index
DataItem NK0CW-01-DX3 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Internal comments screen index
DataItem NK0CW-01-DX4 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Print comments array index
DataItem NK0CW-01-DX5 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Internal comments array index
DataItem NK0CW-01-DX6 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Print comments screen index
DataItem NK0CW-01-DX7 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Internal comments screen index
DataItem NK0CW-01-DX8 smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// First Time Flag
DataItem NK0CW-01-END char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Internal Comment Fetch Count
DataItem NK0CW-01-ICT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Internal Page Down Error Flag
DataItem NK0CW-01-IDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Internal Comment Page Flag
DataItem NK0CW-01-IPG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Claims Internal Text Index
DataItem NK0CW-01-IS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Claims Internal Text Rec Seq
DataItem NK0CW-01-ISEQ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Claims Internal Text
DataItem NK0CW-01-ITXT char(72)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Claims Print Text
DataItem NK0CW-01-ITXTA char(76)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first time flag
DataItem NK0CW-01-ONE char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Print Comment Fetch Count
DataItem NK0CW-01-PCT num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Print Page Down Error Flag
DataItem NK0CW-01-PDF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Print Comment Page Flag
DataItem NK0CW-01-PPG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Claims Print Text Index
DataItem NK0CW-01-PS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Claims Print Text Rec Sequence
DataItem NK0CW-01-PSEQ smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Claims Print Text
DataItem NK0CW-01-PTXT char(72)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Claims Print Text
DataItem NK0CW-01-PTXTA char(76)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Row Sequence
DataItem NK0CW-01-SQCE smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Claim type
DataItem NK0CW-01-SUM-ZCR-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Print comments work index
DataItem NK0CW-01-WW1X smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Internal comments work index
DataItem NK0CW-01-WW2X smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Product group
DataItem NK0CW-01-XGPCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

