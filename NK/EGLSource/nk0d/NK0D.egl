package nk0d;

import corpcom2.XX0XW01;
import corpcom2.XX0XW02;
import corpcom2.YSMREC;
import corpcom3.XPNK-001;
import corpcom3.XPNL-006;
import corpcom3.XPNL002;
import corpcom3.XPNL004;
import corpcom3.XPNL005;
import corpcom3.XPXSN01;
import corpcom3.XPXUM01;
import corpcom3.XPXX001;
import corpcom4.XSENTRY;
import corpcom4.XSNKS-MAP-MODE;
import corpcom4.XSNKS-SET-XGPCD;
import corpcom4.XSPF1;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom4.XX0XS01;
import corpcom5.COMMAREA;
import corpcom5.ERRSQLCA;
import corpcom6.SQLCA;
import corpx1.XCTTBL;
import corpx1.XLATBL;
import corpx1.XSNTBL;
import corpx1.XUMTBL;
import corpz3.ZCRTBL;
import corpz3.ZCSTBL;
import corpz3.ZDTTBL;
import fy.common.FY1REC;
import fy.common.FY2REC;
import ku.common.KUCREC;
import ku.common.KUMREC;
import nk.common.NK1TBL;
import nk.common.NKWREC;
import nl.common.*;
import pg.common.PG2REC;
import sy.common.SY1REC;
import sy.common.SY5REC;
import sy.common.SY6REC;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TAEREC;
import vv.common.VDSTRB01;
import vv.common.VLADDR01;
import vv.common.VNCADJ01;
import vv.common.VNCDEF01;
import vv.common.VNCHDR01;
import vv.common.VNCIVX01;
import vv.common.VNCSTY01;
import vv.common.VNLGLA01;
import vv.common.VNLXPY01;
import vv.common.VPIHDR01;
import vv.common.VPIITM01;
import vv.common.VSTYGL01;
//*** PROGRAM=NK0D ****
// Internation Claims Product items
// 
//      This is an International claims processing application.
// It will be used to create, maintain and inquiry on claim
// style items.  It will be used for defective and product
// related claims.  The product related claims screen will
// allow the pop-up window for selecting items from an invoice.
// 
// Maintenance
//   Date     User Id  Remarks
// --------   -------  ----------------------------------------
// 09/08/92   JSHANN   Created.
// 03/01/93   JSHANN   Added NIGNETFL value to ADJ sum select
// 03/02/93   DKINGM   SWAP FACTORY CODE & PO MO ON MAP 200
// 03/05/93   DKINGM   EXCLUDE VOIDED CLAIMS FORM IVC BALANCE.
// 03/31/93   DKINGM   KEEP FROM ALWAYS UPDATING ON AC & RP
//                     STATUS',ONLY WHEN SALES GL CHANGED
// 04/05/93   DKINGM   INIT NK0DW SUSP GL FLAG TO NO
// 04/06/93   DKINGM   hide pf1.4&20 when comming from nk0g
// 04/29/93   DKINGM   fix problem with change date
// 05/20/93   DKINGM   fix problem with paging.
// 06/10/93   JJUDKI   Regen for June DB changes (FY2REC).
// 07/28/93   KSHAW
// 10/18/93   JJUDKI   Task#800. Exclude inactive claims when
//                    accumulating invoice quantity.
// 11/22/93   ahowar   added nk0ds-s-vnchdr01-a to handle a not
//                    found condition.
// 03/08/94   KSHAW   march db changes
// 06/15/94   jshann  allow 1000000.00 dollar claims
// 02/21/1998 TTHAN1  Y2KFIX - REGEN FOR NEW XX0XS01 CHANGES.
// 11/19/98   PMONAG   ADDED CODE TO ACCEPT PRODUCT INVOICE
//                     NUMBERS OVER 800000.
// 03/27/01   LTANIK   INCREASED THE SIZE OF NK0DW03 FROM 209
//                     TO 999.
// *********************
Program NK0D type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "NL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  ERRSQLCA ERRSQLCA; // record
  FY1REC FY1REC; // record
  FY2REC FY2REC; // record
  KUCREC KUCREC; // record
  KUMREC KUMREC; // record
  NK0DW01 NK0DW01; // record
  NK0DW02 NK0DW02; // record
  NK0DW03 NK0DW03; // record
  NK0DW04 NK0DW04; // record
  NK0DW05 NK0DW05; // record
  NK0DW06 NK0DW06; // record
  NK0DW07 NK0DW07; // record
  NK0DW08 NK0DW08; // record
  NKWREC NKWREC; // record
  NLXREC NLXREC; // record
  PG2REC PG2REC; // record
  SQLCA SQLCA; // record
  SY1REC SY1REC; // record
  SY5REC SY5REC; // record
  SY6REC SY6REC; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VDSTRB01 VDSTRB01; // record
  VLADDR01 VLADDR01; // record
  VNCADJ01 VNCADJ01; // record
  VNCDEF01 VNCDEF01; // record
  VNCHDR01 VNCHDR01; // record
  VNCIVX01 VNCIVX01; // record
  VNCSTY01 VNCSTY01; // record
  VNLGLA01 VNLGLA01; // record
  VNLXPY01 VNLXPY01; // record
  VPIHDR01 VPIHDR01; // record
  VPIITM01 VPIITM01; // record
  VSTYGL01 VSTYGL01; // record
  XX0XW01 XX0XW01; // record
  XX0XW02 XX0XW02; // record
  YSMREC YSMREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XCTTBL {deleteAfterUse = yes}; // table
  use XLATBL {deleteAfterUse = yes}; // table
  use XSNTBL {deleteAfterUse = yes}; // table
  use XUMTBL {deleteAfterUse = yes}; // table
  use NK1TBL {deleteAfterUse = yes}; // table
  use ZCRTBL {deleteAfterUse = yes}; // table
  use ZCSTBL {deleteAfterUse = yes}; // table
  use ZDTTBL {deleteAfterUse = yes}; // table
  use NK0DM.NK0DM100,  // forms
      NK0DM.NK0DM200, 
      NK0DM.NK0DM300,
      NK0DM.XX0XM001
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    NK0D-000: NK0D-000();
    ;
    ;
    exit program;
    ;
    ;
    ;
  end // end main
end // end NK0D

// application main logic
Function NK0D-000()
   /* -----------------------------------------------------------*/
      /* This is the "main logic" for the application.*/
  ;
      /* xsentry checks to ensure that this application was*/
            /* entered from another csp application.*/
  ;
   /* -----------------------------------------------------------*/
  ;
  NLXREC.NLXCPROC = "NK0D-000";
  ;
  NK0D-001(); /* Initilize the application*/
  ;
  NLXREC.NLXEOAF = "N"; /* set end-of-application flag to 'no'*/
  ;
  while (NLXREC.NLXEOAF == "N") /* while not end-of-aplication*/
    NK0D-050(); /* screen branch control*/
  end
  ;
  XSPF4();
  ;
end // end NK0D-000

// Initialize application
Function NK0D-001()
   /* -----------------------------------------------------------*/
         /* Initialize the application working storage*/
  ;
   /* -----------------------------------------------------------*/
  ;
  NLXREC.NLXCPROC = "NK0D-001";
  ;
  converseVar.commitOnConverse = 1; /* Force db2 to commit on each screen*/
                                  /* converse*/
  VGVar.handleHardIOErrors = 1; /* Return control to program if hard db2*/
                                  /* error*/
  ;
  XSENTRY(); /* Check entry thru main menu*/
  XSSEGTR(); /* Set segmented transaction id*/
  ;
  set SQLCA empty; /* Clear out the "common" working*/
                                  /* storage*/
  set ERRSQLCA empty; /* Clear out the "common" working*/
                                  /* storage*/
  set TA1REC empty; /* Clear out the "common" working*/
                                  /* storage*/
  set NLXREC empty; /* Clear out the "common" working*/
                                  /* storage*/
  set NKWREC empty; /* Clear out the "common" working*/
                                  /* storage*/
  set NK0DW01 empty; /* Clear application working storage*/
  set NK0DW02 empty; /* Clear map100 working storage*/
  set NK0DW03 empty; /* Clear map300 working storage*/
  set NK0DW04 empty; /* Clear*/
  set NK0DW05 empty; /* Clear FUNCTION REC FOR IO MODS*/
  set NK0DW06 empty; /* Clear map200 working storage*/
  ;
  set VNCHDR01 empty; /* Clear claim header*/
  ;
  set VNCDEF01 empty; /* Clear defective itmes*/
  ;
  set VNCSTY01 empty; /* Clear style items*/
  ;
  set KUCREC empty; /* Clear company header*/
  ;
  set KUMREC empty; /* Clear company store record*/
  ;
  NLXREC.NLXPF3 = "N"; /* pf3 confirm flag*/
  NLXREC.NLXPF4 = "N"; /* pf4 confirm flag*/
  NLXREC.NLXPF20 = "N"; /* pf20 confirm flag*/
  ;
  if (COMMAREA.CAFRMSYS != "NK")
    COMMAREA.CAUSERA = " ";
  end
  NK0DW-GL-SUSP-FL = "N";
  NLXREC.NLXEOAF = "N"; /* set end-of-application flag 'no'*/
  NLXREC.NLXERRF = "N"; /* set error-flag to 'no'*/
  NK0DW-W02-SIZE = 784; /* temp storage size for map100*/
  NK0DW-W03-SIZE = 844; /* temp storage size for map200*/
  NK0DW-NEXT-PAGE-NBR = 1;
  ;
   /* ------------------------------------------------------*/
    /* Set up working-storage array of screen names*/
   /* ------------------------------------------------------*/
  ;
  NLXREC.NLXSNAME[1] = "NK0DM100";
  NLXREC.NLXSNAME[2] = "NK0DM200";
  NLXREC.NLXSNAME[3] = "NK0DM300";
  ;
   /* **********************************************/
   /* Was this application entered via 'fastpath'?*/
   /* Yes if the item is non-blank.*/
   /* **********************************************/
  ;
  if (COMMAREA.CAITEM != " ") /* 'Item' will be non-blank if fastpath*/
    XPNL004(); /* Validate caitem numeric*/
    if (NLXREC.NLXERRF == "Y") /* If error in 'item'*/
      NKWREC.NKW-MSG-NBR = 289; /* Not a valid claim item*/
      COMMAREA.CATOAP = "NK0A";
      COMMAREA.CAUSERA = NKWREC.NKW-GROUP;
      XPNL002();
    else
      NKWREC.NL-CLM-ID = NLXREC.NLXNUM8A;
      XPNK-001(); /* Load passed fields*/
    end
    COMMAREA.CATOAP = " "; /* Clear commarea*/
    COMMAREA.CAITEM = " ";
  else
    if (COMMAREA.CAUSERA != " ") /* Normal function key transfer*/
      NKWREC.NKW-GROUP = COMMAREA.CAUSERA;
      XPNK-001();
    else
      NKWREC.NKW-MSG-NBR = 289; /* Clear work area for key*/
      COMMAREA.CATOAP = "NK0A";
      COMMAREA.CAUSERA = NKWREC.NKW-GROUP;
      XPNL002();
    end
  end
  ;
  NK0DW-ZZZCHGCT = VNCHDR01.ZZZCHGCT; /* Used to see if claim changed.*/
  ;
  NK0DS-GET-NKW-GPC(); /* Get gpc from first item*/
  if (NKWREC.XXX-SUM-ZCR-CD == "DF")
    NLXREC.NLXCSCRN = "NK0DM200"; /* first header*/
    NK0DS-S-VDSTRB01();
  else
    NLXREC.NLXCSCRN = "NK0DM100"; /* first header*/
  end
  ;
end // end NK0D-001

// Screen branch control
Function NK0D-050()
   /* -----------------------------------------------------------*/
      /* Control process the application screen(s)*/
  ;
     /* Note that this process is being performed in a*/
     /* "while loop" until the end-of-application flag is set*/
     /* to 'y'.*/
  ;
   /* -----------------------------------------------------------*/
  ;
  NLXREC.NLXCPROC = "NK0D-050"; /* set current process name*/
  ;
  sysVar.arrayIndex = 0;
  NLXREC.NLXSCRNX = 0;
  ;
  if (NLXREC.NLXCSCRN in NLXREC.NLXSNAME)
     /* if current-screen-name is in the screen-array, then set*/
     /* the screen-index*/
    NLXREC.NLXSCRNX = sysVar.arrayIndex;
  end
  XSNKS-MAP-MODE(); /* Get map mode flag*/
  NLXREC.NLXEOSF = "N"; /* Set end-of-screen flag to 'no'*/
  NLXREC.NLXBLDSC = "Y"; /* Set build screen flag to 'yes'*/
  NLXREC.NLXERRF = "N"; /* Clear error flag*/
  ;
  if (NLXREC.NLXSCRNX == 1) /* If screen NK0DM100*/
    while (NLXREC.NLXEOSF == "N") /* While not end-of-screen*/
      NK0D-100();
    end
  else
    if (NLXREC.NLXSCRNX == 2) /* If screen NK0DM200*/
      while (NLXREC.NLXEOSF == "N") /* While not end-of-screen*/
        NK0D-200();
      end
    end
  end
  ;
  ;
   /* at this point;*/
       /* if the end-of-application flag (nlxeoaf ) = 'n'*/
         /* the perform will return to the top of nk0d050...*/
       /* else*/
         /* the perform will auto return to nk0d000.*/
  ;
  ;
end // end NK0D-050

// header screen 1
Function NK0D-100()
   /* -----------------------------------------------------------*/
       /* Process screen NK0DM100*/
  ;
        /* note - this process is being performed in a*/
        /* "while loop" from NK0D050 until the end-of-screen*/
        /* flag (nlxeosfl) is set to 'y'.*/
  ;
   /* -----------------------------------------------------------*/
  ;
  NLXREC.NLXCPROC = "NK0D-100";
  ;
  if (NLXREC.NLXBLDSC == "Y")
    NLXREC.NLXBLDSC = "N";
    if (NKWREC.ZCS-CLM-STAT-CD != "AC"
     && NKWREC.ZCS-CLM-STAT-CD != "RP"
     && NKWREC.ZCS-CLM-STAT-CD != "VD")
      converseLib.validationFailed(380);
    end
    NK0D-101();
  end
  ;
  converse NK0DM100 ;
  ;
  NK0DM100.VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";
  ;
  ;
  NK0D-110(); /* check attention identifier*/
  ;
  if (NLXREC.NLXERRF == "N") /* check for error*/
    NK0D-120(); /* process entered option*/
  end
  ;
  if (NLXREC.NLXERRF == "N") /* check for error*/
    NK0D-130(); /* determine next action...*/
  end
  ;
end // end NK0D-100

// Build screen
Function NK0D-101()
   /* **************************************/
   /* Get fields for NK0DM100            **/
   /* **************************************/
  ;
  ;
  NLXREC.NLXCPROC = "NK0D-101";
  ;
  converseLib.clearScreen();
  set NK0DM100 initial;
  ;
  NK0DM100.XXXRVNBR = "00"; /* revision nbr*/
  NK0DM100.XXXMAPNM = "NK0DM100"; /* map name*/
  NK0DM100.XXXPRCNM = "NK0D-100"; /* process name*/
  NK0DM100.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  ;
   /* Build header of map.................*/
  ;
  NK0DM100.KUCCOID = NKWREC.KUCCOID;
  NK0DM100.KUMSTRID = NKWREC.KUMSTRID;
  NK0DM100.KUCCONM = NKWREC.KUCCONM;
  NK0DM100.XXX-SUM-ZCR-CD = NKWREC.XXX-SUM-ZCR-CD;
  NK0DM100.XXX-SUM-ZCR-DESC = NKWREC.XXX-SUM-ZCR-DESC;
  NK0DM100.XCTDESC = NKWREC.XCTDESC;
  NK0DM100.NL-CLM-ID = NKWREC.NL-CLM-ID;
  NK0DM100.GLAENT = NKW-SLS-GLAENT;
  NK0DM100.GLARCID = NKW-SLS-GLARCID;
  NK0DM100.GLANTAC = NKW-SLS-GLANTAC;
  NK0DM100.GLASUB = NKW-SLS-GLASUB;
  NK0DM100.GLAPRJ = NKW-SLS-GLAPRJ;
  ;
  NK0DS-DEL-TMP-STG(); /* Delete temp storage prior to writting*/
                                  /* to it*/
  NK0DW-INDEX = 0;
  ;
  NK0DS-S1-VNCSTY01(); /* Open cursor on claim style items.*/
                                  /* to it*/
  while (SQLCA.VAGen_SQLCODE == 0)
    NK0DS-N1-VNCSTY01(); /* Fetch next on claim style items.*/
    if (SQLCA.VAGen_SQLCODE == 0)
      NK0DS-BLD-TMP-STG(); /* Load all items to temp storage one*/
    end
  end
  ;
  NK0DS-C1-VNCSTY01(); /* Close cursor on claim style items.*/
  ;
  if (NK0DW-INDEX > 0)
    NK0DS-ADD-TMP-STG(); /* Add last page.*/
  end
  ;
  if (NKW-SLS-GL-CD == " ") /* Format NKWREC sales gl code*/
    NKW-SLS-GLAENT = VNCSTY01.GLAENT;
    NKW-SLS-GLARCID = VNCSTY01.GLARCID;
    NKW-SLS-GLANTAC = VNCSTY01.GLANTAC;
    NKW-SLS-GLASUB = VNCSTY01.GLASUB;
    NKW-SLS-GLAPRJ = VNCSTY01.GLAPRJ;
  end
  ;
  NK0DW-NEXT-PAGE-NBR = 1;
  ;
  NK0DS-BUILD-MAP100(); /* Build the map*/
  ;
  NK0DM100.GLAENT = NKW-SLS-GLAENT;
  NK0DM100.GLARCID = NKW-SLS-GLARCID;
  NK0DM100.GLANTAC = NKW-SLS-GLANTAC;
  NK0DM100.GLASUB = NKW-SLS-GLASUB;
  NK0DM100.GLAPRJ = NKW-SLS-GLAPRJ;
  ;
  if (NKW-FROM-APP == "NK0G")
    set NK0D-HIDE-1 skip, invisible;
    set NK0D-HIDE-2 skip, invisible;
  else
    set NK0D-HIDE-1 initialAttributes;
    set NK0D-HIDE-2 initialAttributes;
  end
  ;
end // end NK0D-101

// Validate PF keys; act on some
Function NK0D-110()
   /* -----------------------------------------------------------*/
     /* Validate PF keys*/
  ;
     /* Active PF keys: 1, 3, 4, 7, 8, 12, 13, 17, and 20*/
   /* -----------------------------------------------------------*/
  ;
  NLXREC.NLXCPROC = "NK0D-110";
  ;
  set NK0DM100.CATOAP initialAttributes;
  set NK0DM100.CAITEM initialAttributes;
  ;
  if (NLXREC.NLXPF3 == "Y" /* pf3 confirm flag*/
   && converseVar.eventKey not pf3)
    NLXREC.NLXPF3 = "N";
  end
  ;
  if (NLXREC.NLXPF4 == "Y" /* pf4 confirm flag*/
   && converseVar.eventKey not pf4)
    NLXREC.NLXPF4 = "N";
  end
  ;
  if (NLXREC.NLXPF20 == "Y" /* pf20 confirm flag*/
   && converseVar.eventKey not pf20)
    NLXREC.NLXPF20 = "N";
  end
  ;
   /* ***********************************/
      /* check for invoice credit path*/
   /* ***********************************/
  ;
  if (NKW-FROM-APP == "NK0G")
    if (converseVar.eventKey is enter) /**/
      if (NK0DM100.CATOAP > " ") /* Tried to fast path exit, not allowed*/
        converseLib.validationFailed(353); /* while crediting an invoice*/
        NLXREC.NLXERRF = "Y"; /* Mark with error*/
        return;
      else
        return;
      end
    end
    if (converseVar.eventKey is pf7 /* Valid PF keys while crediting an IVC*/
     || converseVar.eventKey is pf8 
     || converseVar.eventKey is pf12
     || converseVar.eventKey is pf13
     || converseVar.eventKey is pf17)
      return;
    end
    if (converseVar.eventKey is pf3) /* Go back to NK0C*/
      NK0DS-DEL-TMP-STG(); /* Purge storage before exit.*/
      COMMAREA.CATOAP = "NK0C"; /* Go to previous level*/
      COMMAREA.CAUSERA = NKW-GROUP;
      XPNL002(); /* Exit*/
    end
    if (converseVar.eventKey is pf1
     || converseVar.eventKey is pf4
     || converseVar.eventKey is pf20)
      converseLib.validationFailed(343); /* PF key allowed during IVC credit*/
      NLXREC.NLXERRF = "Y"; /* Mark with error*/
    else
      converseLib.validationFailed(2); /* PF key not valid*/
      NLXREC.NLXERRF = "Y"; /* Mark with error*/
    end
    return;
  end
  ;
   /* ***********************************/
      /* check for fastpath option/item*/
   /* ***********************************/
  ;
  if (NK0DM100.CATOAP != " ") /* If fastpath option entered,*/
    if (converseVar.eventKey is enter)
      NK0DS-DEL-TMP-STG(); /* Purge storage before exit.*/
      COMMAREA.CATOAP = NK0DM100.CATOAP;
      COMMAREA.CAITEM = NK0DM100.CAITEM;
      COMMAREA.CAUSERA = " ";
      XPNL002(); /* Exit application*/
      set NK0DM100.CAITEM cursor, bold; /* Exit failed*/
      return;
    end
  end
  ;
  ;
  if (converseVar.eventKey is pf1) /* Skip edit/updt, go to 'help'*/
    NK0DS-DEL-TMP-STG();
    XSPF1(); /* Exit*/
  end
  ;
  if (converseVar.eventKey is pf3)
    if (NLXREC.NLXPF3 == "N"
     && NKWREC.NKW-MAP-MODE != "I")
      NLXREC.NLXPF3 = "Y";
      converseLib.validationFailed(108); /* updates not saved - pf3 to confirm*/
      NLXREC.NLXERRF = "Y";
      return;
    end
    NK0DS-DEL-TMP-STG();
    COMMAREA.CATOAP = "NK0C"; /* Go to previous level*/
    COMMAREA.CAUSERA = NKW-GROUP;
    XPNL002(); /* Exit*/
  end
  ;
  ;
  if (converseVar.eventKey is pf4) /* Go to master menu*/
    if (NLXREC.NLXPF4 == "N"
     && NKWREC.NKW-MAP-MODE != "I")
      NLXREC.NLXPF4 = "Y";
      converseLib.validationFailed(109); /* updates not saved - pf4 to confirm*/
      NLXREC.NLXERRF = "Y";
      return;
    end
    NK0DS-DEL-TMP-STG();
    COMMAREA.CAUSERA = " "; /* Exit*/
    XSPF4();
  end
  ;
  if (converseVar.eventKey is pf20)
    if (NLXREC.NLXPF20 == "N"
     && NKWREC.NKW-MAP-MODE != "I")
      NLXREC.NLXPF20 = "Y";
      converseLib.validationFailed(110); /* updates not saved - pf20 to confirm*/
      NLXREC.NLXERRF = "Y";
      return;
    end
    NK0DS-DEL-TMP-STG();
    COMMAREA.CATOAP = "NL0A"; /* NIL menu*/
    COMMAREA.CAUSERA = NKWREC.NKW-GROUP;
    XPNL002(); /* Exit*/
  end
  ;
  /* ************************************************************************/
  /* Edit for valid action keys for active claims*/
  /* ************************************************************************/
  ;
  if (NKWREC.ZCS-CLM-STAT-CD == "AC"
   || NKWREC.ZCS-CLM-STAT-CD == "RP"
   || NKWREC.ZCS-CLM-STAT-CD == "VD")
    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf7
     || converseVar.eventKey is pf8)
      return;
    else
      converseLib.validationFailed(362);
      NLXREC.NLXERRF = "Y";
    end
  end
  ;
  if (converseVar.eventKey is enter /* Valid non-exit pf keys*/
   || converseVar.eventKey is pf7   
   || converseVar.eventKey is pf8   
   || converseVar.eventKey is pf12  
   || converseVar.eventKey is pf13  
   || converseVar.eventKey is pf17)
    return;
  end
  ;
      /* pf key not valid*/
  ;
  converseLib.validationFailed(2); /* PF key not valid*/
  NLXREC.NLXERRF = "Y"; /* Mark with error*/
  ;
end // end NK0D-110

// Edit/Act on function keys
Function NK0D-120()
   /* ************************************/
   /* Edit Claims Screen Entries*/
   /* ************************************/
  ;
  NLXREC.NLXCPROC = "NK0D-120";
  if (NK0DM100.NK0DM-FM-PAGE is modified)
    NK0DW-PAGE-MOD-FL = "Y";
    set NK0DM100.NK0DM-FM-PAGE initialAttributes;
  end
  if (NKWREC.ZCS-CLM-STAT-CD == "VD")
    NK0DS-CK-M100-NBR();
    return;
  end
  ;
   /* update new product array*/
  ;
  NK0DS-NEW-STYLES();
  ;
  set NK0DM100.NK0DM-FM-PAGE initialAttributes;
  NK0DW-INDEX = 12; /* map index*/
  NK0DW-INX4 = 12; /* invoice array index, loads bottom up*/
  NK0DW-INV-SEL-FLAG = "N";
  ;
  NK0DW-FIRST-IVC-FL = "Y"; /* find first invoice on page flag*/
  ;
   /* There are 12 occurances of styles on each map.  The edits are per-*/
   /* formed in a while loop from the bottom up.*/
  ;
  while (NK0DW-INDEX > 0)
    NK0DW-IVC-ARRAY[NK0DW-INX4] = 0;
    NK0DW-ERR-FLAG = "N";
    ;
     /* Move all new styles or changes to working storage.*/
    ;
    if (NK0DW-02-NL-CLM-QTY[NK0DW-INDEX] == 0)
      NK0DW-02-MAP-QTY[NK0DW-INDEX] = NK0DM100.NK0DM-CLM-QTY[NK0DW-INDEX];
      NK0DW-02-SY1STNBR[NK0DW-INDEX] = NK0DM100.SY1STNBR[NK0DW-INDEX];
      NK0DW-02-SY2CLRID[NK0DW-INDEX] = NK0DM100.SY2CLRID[NK0DW-INDEX];
      NK0DW-02-XDMCD[NK0DW-INDEX] = NK0DM100.XDMCD[NK0DW-INDEX];
      NK0DW-02-NIDIVCID[NK0DW-INDEX] = NK0DM100.NIDIVCID[NK0DW-INDEX];
      if (NK0DM100.NK0DM-CLM-QTY[NK0DW-INDEX] == 0
       && NLXREC.NLXERRF == "N")
        set NK0DM100.NK0DM-CLM-QTY[NK0DW-INDEX] initialAttributes, cursor;
      else
        set NK0DM100.NK0DM-CLM-QTY[NK0DW-INDEX] initialAttributes;
      end
      set NK0DM100.NIDIVCID[NK0DW-INDEX] initialAttributes;
      set NK0DM100.SY1STNBR[NK0DW-INDEX] initialAttributes;
      set NK0DM100.SY2CLRID[NK0DW-INDEX] initialAttributes;
      set NK0DM100.XDMCD[NK0DW-INDEX] initialAttributes;
      if (NK0DM100.NIDIVCID[NK0DW-INDEX] == 0)
        NK0DM-IVC-XUMDESC[NK0DW-INDEX] = " ";
        NK0DW-02-CLM-XUMDESC[NK0DW-INDEX] = " ";
        NK0DM100.NK0DM-IVC-QTY[NK0DW-INDEX] = 0;
        NK0DW-02-NIHNPRC[NK0DW-INDEX] = 0;
        NK0DM100.NK0DM-IVC-PRICE[NK0DW-INDEX] = 0;
        NK0DM-CLM-AMT[NK0DW-INDEX] = 0;
      end
    else
      NK0DW-02-MAP-QTY[NK0DW-INDEX] = NK0DM100.NK0DM-CLM-QTY[NK0DW-INDEX];
      set NK0DM100.SY1STNBR[NK0DW-INDEX] skip;
      set NK0DM100.SY2CLRID[NK0DW-INDEX] skip;
      set NK0DM100.XDMCD[NK0DW-INDEX] skip;
    end
    ;
     /* The first edit will test the entry of a new invoice id.  The edit*/
     /* test for a valid product invoice id.*/
    ;
    if (NK0DM100.NIDIVCID[NK0DW-INDEX] > 0 /* and greater than 0*/
     && NK0DW-02-NL-CLM-QTY[NK0DW-INDEX] == 0) /* NEW CLAIM ITEM*/
      if (NK0DW-FIRST-IVC-FL == "Y")
        NK0DW-FIRST-IVC-FL = "N";
        NK0DS-GET-OP1CMPNB();
      end
      NK0DS-EDIT-IVC(); /* Select ivc and do edits*/
    end
    ;
     /* This edit will test the new styles.  It will see if it is a valid*/
     /* style.*/
    ;
    if (NK0DW-02-NL-CLM-QTY[NK0DW-INDEX] == 0) /* NEW CLAIM ITEM*/
      if (NK0DM100.SY1STNBR[NK0DW-INDEX] > " " /* Style entered*/
       || NK0DM100.SY2CLRID[NK0DW-INDEX] > " " 
       || NK0DM100.XDMCD[NK0DW-INDEX] > " ")  
        NK0DS-EDIT-STYLE(); /* select style*/
      end
    end
    ;
     /* This edit will test the new styles and make sure they are on the*/
     /* invoice which was entered.*/
    ;
    if (NK0DW-ERR-FLAG == "N")
      if (NK0DW-02-NL-CLM-QTY[NK0DW-INDEX] == 0) /* New style*/
        if (NK0DM100.NIDIVCID[NK0DW-INDEX] > 0)
          if (NK0DM100.SY1STNBR[NK0DW-INDEX] > " ")
            NK0DS-STY-IVC-EDIT();
          else
            if (converseVar.eventKey not pf17)
              set NK0DM100.NIDIVCID[NK0DW-INDEX] bold, modified, cursor;
              converseLib.validationFailed(315);
              NK0DW-ERR-FLAG = "Y";
            else
              NK0DW-IVC-ARRAY[NK0DW-INX4] = NK0DM100.NIDIVCID[NK0DW-INDEX];
              NK0DW-INX4 = NK0DW-INX4 - 1;
              NK0DW-INV-SEL-FLAG = "Y";
            end
          end
        else
          if (NK0DM100.SY1STNBR[NK0DW-INDEX] > " " /* Style entered*/
           || NK0DM100.SY2CLRID[NK0DW-INDEX] > " " 
           || NK0DM100.XDMCD[NK0DW-INDEX] > " "    
           || NK0DM100.NK0DM-CLM-QTY[NK0DW-INDEX] > 0)
            set NK0DM100.NIDIVCID[NK0DW-INDEX] bold, modified, cursor;
            converseLib.validationFailed(302);
            NK0DW-ERR-FLAG = "Y";
          end
        end
      end
    end
    ;
     /* Edit the new style to see if it is already on the claim.  We must*/
     /* allow for the entry of just an invoice id which will be used to*/
     /* create a selection list invoice items, in this case there will be*/
     /* no style to edit.*/
    ;
    if (NK0DW-ERR-FLAG == "N")
      if (NK0DW-02-NL-CLM-QTY[NK0DW-INDEX] == 0
       && NK0DM100.SY1STNBR[NK0DW-INDEX] > " ")
        NK0DS-EDIT-DUP-STY();
      end
    end
    ;
     /* This edit will test claim quantity to make sure that it does not*/
     /* exceed the balance on the invoice.*/
    ;
    if (NKWREC.ZCS-CLM-STAT-CD == "AC"
     || NKWREC.ZCS-CLM-STAT-CD == "RP")
    else
      if (NK0DW-ERR-FLAG == "N"
       && NK0DM100.SY1STNBR[NK0DW-INDEX] > " ") /* Style entered*/
        NK0DS-EDIT-CLM-QTY();
      end
    end
    /* END;*/
    NK0DW-INDEX = NK0DW-INDEX - 1;
    ;
     /* The nk0dw-err-flag is used to process each item and control the*/
     /* edits which are performed.  It is not used to set the application*/
     /* error flag.*/
    ;
    if (NK0DW-ERR-FLAG == "Y")
      NLXREC.NLXERRF = "Y";
    end
  end
  VNCHDR01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  NK0DS-S-VNCHDR01();
  ;
     /* Edit the sales gl code only to see if it is a valid gl code.*/
  ;
  if (NK0DM100.GLAENT == NK0DW-SLS-GLAENT
   && NK0DM100.GLARCID == NK0DW-SLS-GLARCID
   && NK0DM100.GLANTAC == NK0DW-SLS-GLANTAC
   && NK0DM100.GLASUB == NK0DW-SLS-GLASUB
   && NK0DM100.GLAPRJ == NK0DW-SLS-GLAPRJ)
    /* next sentence*/
  else
    VSTYGL01.NIEENT1 = NK0DM100.GLAENT;
    VSTYGL01.NIERCID1 = NK0DM100.GLARCID;
    VSTYGL01.NIENTAC1 = NK0DM100.GLANTAC;
    VSTYGL01.NIESUB1 = NK0DM100.GLASUB;
    VSTYGL01.NIEPRJ1 = NK0DM100.GLAPRJ;
    NK0DW-SLS-GLAENT = NK0DM100.GLAENT;
    NK0DW-SLS-GLARCID = NK0DM100.GLARCID;
    NK0DW-SLS-GLANTAC = NK0DM100.GLANTAC;
    NK0DW-SLS-GLASUB = NK0DM100.GLASUB;
    NK0DW-SLS-GLAPRJ = NK0DM100.GLAPRJ;
    if (NK0DW-SALES-GL == NKW-SLS-GL-CD)
      set NK0DM100.GLAENT initialAttributes;
      set NK0DM100.GLARCID initialAttributes;
      set NK0DM100.GLANTAC initialAttributes;
      set NK0DM100.GLASUB initialAttributes;
      set NK0DM100.GLAPRJ initialAttributes;
    else
      NK0DS-EDIT-SLS-GL();
    end
  end
  ;
     /* This edit will prevent a suscript error while new styles are*/
     /* being added to a claim.  If the subscript is within 12 of its*/
     /* max value, the user will be required to update the claim before*/
     /* adding any more new styles.  The max value is 100.*/
  ;
  if (NK0DW-INDEX-3 > 288
   && NLXREC.NLXERRF == "N")
    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf7
     || converseVar.eventKey is pf12
     || converseVar.eventKey is pf13)
      /* NEXT SENTENCE*/
    else
      converseLib.validationFailed(316);
      NLXREC.NLXERRF = "Y";
    end
  end
  ;
     /* This edit test the changing of the from page number to cause*/
     /* paging to a specific page.  this will only be done if enter was*/
     /* pressed*/
  ;
  NK0DS-CK-M100-NBR();
end // end NK0D-120

// Determine next action M100
Function NK0D-130()
  /* ************************************************************************/
  /* Determine next action from hdr 1*/
  /* ************************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0D-130";
  ;
  /* ************************************************************************/
  /* Update or add current page to the temp storage*/
  /* ************************************************************************/
  ;
  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8
   || converseVar.eventKey is pf13
   || converseVar.eventKey is pf17)
    if (NKWREC.ZCS-CLM-STAT-CD == "AC"
     || NKWREC.ZCS-CLM-STAT-CD == "RP"
     || NKWREC.ZCS-CLM-STAT-CD == "VD")
      /* next sentence*/
    else
      if (NK0DW-NEXT-PAGE-NBR > NK0DW-HIGH-PAGE-NBR)
        NK0DS-ADD-TMP-STG();
      else
        if (NK0DW-HIGH-PAGE-NBR > 0)
          NK0DS-UPDT-TMP-STG();
        end
      end
    end
  end
  ;
  /* ************************************************************************/
  /* Enter - update the claim header and transfer to NK0C*/
  /* ************************************************************************/
  ;
  if (converseVar.eventKey is enter)
    if (NK0DW-HOLD-PAGE-NBR != NK0DM100.NK0DM-FM-PAGE)
      NK0DW-NEXT-PAGE-NBR = NK0DM100.NK0DM-FM-PAGE;
      NK0DS-BUILD-MAP100();
    else
      if (NKWREC.ZCS-CLM-STAT-CD == "VD")
           /* next sentence*/
      else
        if (NKWREC.ZCS-CLM-STAT-CD == "AC"
         || NKWREC.ZCS-CLM-STAT-CD == "RP")
          if (NK0DW-SLS-GL-CHG == "Y")
            NK0DS-UPDATE-STY();
          end
        else
          NK0DS-UPDATE-STY();
        end
      end
      COMMAREA.CAUSERA = NKWREC.NKW-GROUP;
      if (NLXREC.NLXERRF == "N")
        if (NKWREC.XXX-SUM-ZCR-CD == "DF")
          COMMAREA.CATOAP = "NK0B";
        else
          COMMAREA.CATOAP = "NK0E";
        end
        XPNL002();
      end
      return;
    end
  end
  ;
  /* ************************************************************************/
  /* PF7 - page forward*/
  /* ************************************************************************/
  ;
  if (converseVar.eventKey is pf7)
    NK0DS-MAP100-PF7();
    return;
  end
  ;
  /* ************************************************************************/
  /* PF8 - page back*/
  /* ************************************************************************/
  ;
  if (converseVar.eventKey is pf8)
    NK0DS-MAP100-PF8();
    return;
  end
  ;
  /* ************************************************************************/
  /* PF12 - re-display the screen*/
  /* ************************************************************************/
  ;
  if (converseVar.eventKey is pf12)
    converseLib.validationFailed(372);
    return;
  end
  ;
  /* ************************************************************************/
  /* PF13 - up-date and re-display the screen*/
  /* ************************************************************************/
  /*  */
  if (converseVar.eventKey is pf13)
    NK0DS-UPDATE-STY();
    NK0DS-RELOAD-STG();
    NK0DW-NEXT-PAGE-NBR = 1;
    NK0DS-BUILD-MAP100();
    if (NLXREC.NLXERRF == "N")
      converseLib.validationFailed(373);
    end
    return;
  end
  ;
  /* ************************************************************************/
  /* PF17 - display map 300 and then rebuild map 100*/
  /* ************************************************************************/
  ;
  if (converseVar.eventKey is pf17)
    NK0D-300();
    move NK0DW-HOLD-PAGE-NBR to NK0DW-NEXT-PAGE-NBR withV60Compat;
    NK0DS-GET-TMP-STG();
    NK0DS-BUILD-MAP100();
    if (NK0DW-INV-SEL-FLAG == "N")
      converseLib.validationFailed(375);
    end
    return;
  end
end // end NK0D-130

// Defective screen
Function NK0D-200()
   /* -----------------------------------------------------------*/
       /* Process screen NK0DM200*/
  ;
        /* note - this process is being performed in a*/
        /* "while loop" from NK0D050 until the end-of-screen*/
        /* flag (nlxeosfl) is set to 'y'.*/
  ;
   /* -----------------------------------------------------------*/
  ;
  NLXREC.NLXCPROC = "NK0D-200";
  ;
  if (NLXREC.NLXBLDSC == "Y")
    NK0D-201();
    NLXREC.NLXBLDSC = "N";
  end
  ;
  converse NK0DM200 ;
  ;
  NK0DM200.VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";
  ;
  ;
  NK0D-210(); /* check attention identifier*/
  ;
  if (NLXREC.NLXERRF == "N") /* check for error*/
    NK0D-220(); /* process entered option*/
  end
  ;
  if (NLXREC.NLXERRF == "N") /* check for error*/
    NK0D-230(); /* determine next action...*/
  end
  ;
end // end NK0D-200

// Build screen
Function NK0D-201()
   /* **************************************/
   /* Build MAP NK0Dm200                 **/
   /* **************************************/
  ;
  ;
  NLXREC.NLXCPROC = "NK0D-201";
  ;
  converseLib.clearScreen();
  set NK0DM200 initial;
  ;
  NK0DM200.XXXRVNBR = "00"; /* revision nbr*/
  NK0DM200.XXXMAPNM = "NK0DM200"; /* map name*/
  NK0DM200.XXXPRCNM = "NK0D-200"; /* process name*/
  NK0DM200.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  ;
   /* Build header of map.................*/
  ;
  NK0DM200.KUCCOID = NKWREC.KUCCOID;
  NK0DM200.KUMSTRID = NKWREC.KUMSTRID;
  NK0DM200.KUCCONM = NKWREC.KUCCONM;
  NK0DM200.XXX-SUM-ZCR-CD = NKWREC.XXX-SUM-ZCR-CD;
  NK0DM200.XXX-SUM-ZCR-DESC = NKWREC.XXX-SUM-ZCR-DESC;
  NK0DM200.XCTDESC = NKWREC.XCTDESC;
  NK0DM200.NL-CLM-ID = NKWREC.NL-CLM-ID;
  ;
  NK0DS-DEL-TMP-DEF(); /* Delete temp storage prior to writting*/
                                  /* to it*/
  NK0DW-INDEX = 0;
  ;
  NK0DS-S1-VNCDEF01(); /* Open cursor on claim style items.*/
                                  /* to it*/
  NK0DS-N1-VNCDEF01(); /* Fetch next on claim style items.*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    NKW-SLS-GLAENT = VNCDEF01.GLAENT;
    NKW-SLS-GLARCID = VNCDEF01.GLARCID;
    NKW-SLS-GLANTAC = VNCDEF01.GLANTAC;
    NKW-SLS-GLASUB = VNCDEF01.GLASUB;
    NKW-SLS-GLAPRJ = VNCDEF01.GLAPRJ;
  else
    NK0DS-S-VSTYGL01(); /* Get defective sales gl code*/
    NKW-SLS-GLAENT = VSTYGL01.NIEENT1;
    if (VSTYGL01.NIEENT1 == " ")
      move NKW-REC-GLAENT to NKW-SLS-GLAENT withV60Compat;
    end
    NKW-SLS-GLARCID = VSTYGL01.NIERCID1;
    NKW-SLS-GLANTAC = VSTYGL01.NIENTAC1;
    NKW-SLS-GLASUB = VSTYGL01.NIESUB1;
    NKW-SLS-GLAPRJ = VSTYGL01.NIEPRJ1;
    SQLCA.VAGen_SQLCODE = 100; /* Reset SQLCODE*/
  end
  ;
  /* ************************************************************************/
  /* Move Sales GL code to map*/
  /* ************************************************************************/
  ;
  NK0DM200.GLAENT = NKW-SLS-GLAENT;
  NK0DM200.GLARCID = NKW-SLS-GLARCID;
  NK0DM200.GLANTAC = NKW-SLS-GLANTAC;
  NK0DM200.GLASUB = NKW-SLS-GLASUB;
  NK0DM200.GLAPRJ = NKW-SLS-GLAPRJ;
  ;
  while (SQLCA.VAGen_SQLCODE == 0)
    NK0DS-BLD-TMP-DEF(); /* Load all items to temp storage one*/
    NK0DS-N1-VNCDEF01(); /* Fetch next on claim style items.*/
  end
  ;
  NK0DS-C1-VNCDEF01(); /* Close cursor on claim style items.*/
  ;
  if (NK0DW-INDEX > 0)
    NK0DS-ADD-TMP-DEF(); /* Add last page.*/
  end
  ;
  NK0DW-NEXT-PAGE-NBR = 1;
  ;
  XX0XS01(); /* Get current date and time*/
  NK0DS-BUILD-MAP200(); /* Build the map*/
end // end NK0D-201

// Validate PF keys; act on some
Function NK0D-210()
   /* -----------------------------------------------------------*/
     /* Validate PF keys*/
  ;
     /* Active PF keys: 1, 3, 4, 7, 8, 12, and 20*/
   /* -----------------------------------------------------------*/
  ;
  NLXREC.NLXCPROC = "NK0D-210";
  ;
  set NK0DM200.CATOAP initialAttributes;
  set NK0DM200.CAITEM initialAttributes;
  ;
  if (NLXREC.NLXPF3 == "Y" /* pf3 confirm flag*/
   && converseVar.eventKey not pf3)
    NLXREC.NLXPF3 = "N";
  end
  ;
  if (NLXREC.NLXPF4 == "Y" /* pf4 confirm flag*/
   && converseVar.eventKey not pf4)
    NLXREC.NLXPF4 = "N";
  end
  ;
  if (NLXREC.NLXPF20 == "Y" /* pf20 confirm flag*/
   && converseVar.eventKey not pf20)
    NLXREC.NLXPF20 = "N";
  end
  ;
   /* ***********************************/
      /* check for fastpath option/item*/
   /* ***********************************/
  ;
  if (NK0DM200.CATOAP != " ") /* If fastpath option entered,*/
    if (converseVar.eventKey is enter)
      NK0DS-DEL-TMP-DEF(); /* Purge storage before exit.*/
      COMMAREA.CATOAP = NK0DM200.CATOAP;
      COMMAREA.CAITEM = NK0DM200.CAITEM;
      COMMAREA.CAUSERA = " ";
      XPNL002(); /* Exit application*/
      set NK0DM200.CAITEM cursor, bold; /* Exit failed*/
      return;
    end
  end
  ;
  ;
  if (converseVar.eventKey is pf1) /* Skip edit/updt, go to 'help'*/
    NK0DS-DEL-TMP-STG();
    XSPF1(); /* Exit*/
  end
  ;
  if (converseVar.eventKey is pf3)
    if (NLXREC.NLXPF3 == "N"
     && NKWREC.NKW-MAP-MODE != "I")
      NLXREC.NLXPF3 = "Y";
      converseLib.validationFailed(108); /* updates not saved - pf3 to confirm*/
      NLXREC.NLXERRF = "Y";
      return;
    end
    NK0DS-DEL-TMP-STG();
    COMMAREA.CATOAP = "NK0C"; /* Go to previous level*/
    COMMAREA.CAUSERA = NKW-GROUP;
    XPNL002(); /* Exit*/
  end
  ;
  ;
  if (converseVar.eventKey is pf4) /* Go to master menu*/
    if (NLXREC.NLXPF4 == "N"
     && NKWREC.NKW-MAP-MODE != "I")
      NLXREC.NLXPF4 = "Y";
      converseLib.validationFailed(109); /* updates not saved - pf4 to confirm*/
      NLXREC.NLXERRF = "Y";
      return;
    end
    NK0DS-DEL-TMP-STG();
    COMMAREA.CAUSERA = " "; /* Exit*/
    XSPF4();
  end
  ;
  if (converseVar.eventKey is pf20)
    if (NLXREC.NLXPF20 == "N"
     && NKWREC.NKW-MAP-MODE != "I")
      NLXREC.NLXPF20 = "Y";
      converseLib.validationFailed(110); /* updates not saved - pf20 to confirm*/
      NLXREC.NLXERRF = "Y";
      return;
    end
    NK0DS-DEL-TMP-STG();
    COMMAREA.CATOAP = "NL0A"; /* NIL menu*/
    COMMAREA.CAUSERA = NKWREC.NKW-GROUP;
    XPNL002(); /* Exit*/
  end
  ;
  if (NKWREC.ZCS-CLM-STAT-CD == "AC" /* active claim pf key edit*/
   || NKWREC.ZCS-CLM-STAT-CD == "RP" 
   || NKWREC.ZCS-CLM-STAT-CD == "VD")
    if (converseVar.eventKey is pf12)
      converseLib.validationFailed(362);
      NLXREC.NLXERRF = "Y";
    end
  end
  ;
  if (converseVar.eventKey is enter /* Valid non-exit pf keys*/
   || converseVar.eventKey is pf7   
   || converseVar.eventKey is pf8   
   || converseVar.eventKey is pf12)
    return;
  end
  ;
      /* pf key not valid*/
  ;
  converseLib.validationFailed(2); /* PF key not valid*/
  NLXREC.NLXERRF = "Y"; /* Mark with error*/
  ;
end // end NK0D-210

// Edit/Act on function keys
Function NK0D-220()
  /* ************************************************************************/
  /* Edit Claims Screen Entries*/
  /* ************************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0D-220";
  if (NKWREC.ZCS-CLM-STAT-CD == "VD")
    if (NK0DM200.NK0DM-FM-PAGE is modified)
      NK0DW-PAGE-MOD-FL = "Y";
      set NK0DM200.NK0DM-FM-PAGE initialAttributes;
    end
    NK0DS-CK-M200-NBR(); /* edit page number*/
    return;
  end
  ;
  NK0DS-M200-MOD-FLS(); /* Set mod flags*/
  ;
  NK0DS-M200-POP-UPS(); /* Present pop up windows*/
  ;
  NLXREC.NLXCPROC = "NK0D-220";
  ;
  converseLib.clearScreen();
  
  set NK0DM200.NK0DM-FM-PAGE initialAttributes;
  ;
  NK0DS-NEW-DEFCTS(); /* Move changes to new defective arrary*/
  ;
  NLXREC.NLXCPROC = "NK0D-220";
  NK0DW-INDEX = 12; /* map index*/
  ;
  /* ************************************************************************/
  /* This edit will prevent a suscript error while new styles are*/
  /* being added to a claim.  If the subscript is within 12 of its*/
  /* max value, the user will be required to update the claim before*/
  /* adding any more new styles.  The max value is 300.*/
  /* ************************************************************************/
  ;
  if (NK0DW-INDEX-3 > 288)
    if (converseVar.eventKey is enter
     || converseVar.eventKey is pf12)
    /* NEXT SENTENCE*/
    else
      converseLib.validationFailed(316);
      NLXREC.NLXERRF = "Y";
      return;
    end
  end
  ;
   /* There are 12 occurances of styles on each map.  The edits are per-*/
   /* formed in a while loop from the bottom up.*/
  ;
  while (NK0DW-INDEX > 0)
    NK0DW-ERR-FLAG = "N";
    ;
    /* **********************************************************************/
    /* Reset value*/
    /* **********************************************************************/
    ;
    if (NK0DM-200-QTY[NK0DW-INDEX] > 0)
      NK0DM-200-AMT[NK0DW-INDEX] = NK0DM-200-PRC[NK0DW-INDEX] *       NK0DM-200-QTY[NK0DW-INDEX];
    end
    ;
    /* **********************************************************************/
    /* Edit the price and no style*/
    /* **********************************************************************/
    ;
    if (NK0DW-MOD-PRC[NK0DW-INDEX] == "Y")
      if (NK0DM-200-PRC[NK0DW-INDEX] > 0)
        if (NK0DM200.SY1STNBR[NK0DW-INDEX] > " ")
          set NK0DM-200-PRC[NK0DW-INDEX] initialAttributes;
        else
          set NK0DM-200-PRC[NK0DW-INDEX] cursor, bold, modified;
          NK0DW-ERR-FLAG = "Y";
          converseLib.validationFailed(329);
        end
      else
        set NK0DM-200-PRC[NK0DW-INDEX] initialAttributes;
      end
    end
    ;
    /* **********************************************************************/
    /* Edit the UNIT OF MEASURE*/
    /* **********************************************************************/
    ;
    if (NK0DW-MOD-XUMDESC[NK0DW-INDEX] == "Y")
      if (NK0DM200.XUMDESC[NK0DW-INDEX] > " ")
        if (NK0DM200.SY1STNBR[NK0DW-INDEX] > " ")
          if (NK0DM200.XUMDESC[NK0DW-INDEX] in XUMTBL.XUMDESC)
            set NK0DM200.XUMDESC[NK0DW-INDEX] initialAttributes;
          else
            set NK0DM200.XUMDESC[NK0DW-INDEX] cursor, bold, modified;
            NK0DW-ERR-FLAG = "Y";
            converseLib.validationFailed(332);
          end
        else
          set NK0DM200.XUMDESC[NK0DW-INDEX] cursor, bold, modified;
          NK0DW-ERR-FLAG = "Y";
          converseLib.validationFailed(333);
        end
      else
        if (NK0DM200.SY1STNBR[NK0DW-INDEX] > " ")
          set NK0DM200.XUMDESC[NK0DW-INDEX] cursor, bold, modified;
          NK0DM200.XUMDESC[NK0DW-INDEX] = "EACH";
          converseLib.validationFailed(334);
        else
          set NK0DM200.XUMDESC[NK0DW-INDEX] initialAttributes;
        end
      end
    end
    ;
    /* **********************************************************************/
    /* Edit the PO id month range*/
    /* **********************************************************************/
    ;
    if (NK0DW-MOD-PC3POIDT[NK0DW-INDEX] == "Y")
      if (NK0DM200.PC3POIDT[NK0DW-INDEX] > 0)
        NK0DW-PC3POIDT = NK0DM200.PC3POIDT[NK0DW-INDEX];
        if (NK0DW-PO-YEAR < 10
         || NK0DW-PO-YEAR > 88)
          if (NK0DW-PO-MONTH1 > 0
           && NK0DW-PO-MONTH1 <= 12)
            if (NK0DW-PO-MONTH2 > 0
             && NK0DW-PO-MONTH2 <= 12)
              set NK0DM200.PC3POIDT[NK0DW-INDEX] initialAttributes;
            else
              set NK0DM200.PC3POIDT[NK0DW-INDEX] bold, cursor, modified;
              NK0DW-ERR-FLAG = "Y";
              converseLib.validationFailed(335);
            end
          else
            set NK0DM200.PC3POIDT[NK0DW-INDEX] bold, cursor, modified;
            NK0DW-ERR-FLAG = "Y";
            converseLib.validationFailed(335);
          end
        else
          set NK0DM200.PC3POIDT[NK0DW-INDEX] bold, cursor, modified;
          NK0DW-ERR-FLAG = "Y";
          converseLib.validationFailed(335);
        end
      else
        set NK0DM200.PC3POIDT[NK0DW-INDEX] initialAttributes;
      end
    end
    ;
    /* **********************************************************************/
    /* Edit the FACTORY and FACTORY/STYLE*/
    /* **********************************************************************/
    ;
    if (NK0DW-MOD-FY1FCTYC[NK0DW-INDEX] == "Y"
     || NK0DW-MOD-SY1STNBR[NK0DW-INDEX] == "Y")
      if (NK0DM200.FY1FCTYC[NK0DW-INDEX] == "99")
        set NK0DM200.FY1FCTYC[NK0DW-INDEX] initialAttributes;
      else
        if (NK0DW-MOD-FY1FCTYC[NK0DW-INDEX] == "Y")
          FY1REC.XGPCD = NKWREC.XGPCD;
          FY1REC.FY1FCTYC = NK0DM200.FY1FCTYC[NK0DW-INDEX];
          NK0DS-S-VFCTY001();
          if (SQLCA.VAGen_SQLCODE == 100)
            set NK0DM200.FY1FCTYC[NK0DW-INDEX] modified, bold, cursor;
            NK0DW-ERR-FLAG = "Y";
            converseLib.validationFailed(330);
          else
            if (NK0DM200.SY1STNBR[NK0DW-INDEX] > " ")
              FY2REC.XGPCD = NKWREC.XGPCD;
              FY2REC.FY1FCTYC = NK0DM200.FY1FCTYC[NK0DW-INDEX];
              FY2REC.SY1STNBR = NK0DM200.SY1STNBR[NK0DW-INDEX];
              FY2REC.XSECD = "*";
              FY2REC.XSNYR = -1;
              FY2REC.XXXSTAT = "*";
              NK0DS-S1-VFYSTY01();
              NK0DS-N1-VFYSTY01();
              if (SQLCA.VAGen_SQLCODE == 100)
                set NK0DM200.FY1FCTYC[NK0DW-INDEX] modified, bold, cursor;
                NK0DW-ERR-FLAG = "Y";
                converseLib.validationFailed(331);
              else
                set NK0DM200.FY1FCTYC[NK0DW-INDEX] initialAttributes;
              end
              NK0DS-C1-VFYSTY01();
            end
          end
        end
      end
    end
    ;
    /* **********************************************************************/
    /* Edit the season*/
    /* **********************************************************************/
    ;
    NK0DS-EDIT-SEASON();
    ;
    /* **********************************************************************/
    /* Edit the style*/
    /* **********************************************************************/
    ;
    if (NK0DW-MOD-SY1STNBR[NK0DW-INDEX] == "Y"
     || NK0DW-MOD-SY2CLRID[NK0DW-INDEX] == "Y"
     || NK0DW-MOD-XDMCD[NK0DW-INDEX] == "Y")
      if (NK0DM200.SY1STNBR[NK0DW-INDEX] > " "
       || NK0DM200.SY2CLRID[NK0DW-INDEX] > " "
       || NK0DM200.XDMCD[NK0DW-INDEX] > " ")
        NK0DS-EDIT-STYLE();
      else
        set NK0DM200.SY1STNBR[NK0DW-INDEX] initialAttributes;
        set NK0DM200.SY2CLRID[NK0DW-INDEX] initialAttributes;
        set NK0DM200.XDMCD[NK0DW-INDEX] initialAttributes;
      end
    end
    ;
    /* **********************************************************************/
    /* RELATIONAL EDITS*/
    /* **********************************************************************/
    ;
    ;
    /* **********************************************************************/
    /* The style is reqired if any other field entered*/
    /* **********************************************************************/
    ;
    if (NK0DM200.NK0DM-200-QTY[NK0DW-INDEX] > 0
     || NK0DM200.XSNABRV[NK0DW-INDEX] > " "
     || NK0DM200.FY1FCTYC[NK0DW-INDEX] > " "
     || NK0DM200.PC3POIDT[NK0DW-INDEX] > 0
     || NK0DM200.NK0DM-200-PRC[NK0DW-INDEX] > 0)
      if (NK0DM200.SY1STNBR[NK0DW-INDEX] == " ")
        set NK0DM200.SY1STNBR[NK0DW-INDEX] modified, cursor, bold;
        set NK0DM200.SY2CLRID[NK0DW-INDEX] modified, bold;
        set NK0DM200.XDMCD[NK0DW-INDEX] modified, bold;
        NK0DW-ERR-FLAG = "Y";
        converseLib.validationFailed(336);
      end
    end
    ;
    /* **********************************************************************/
    /* The require a unit of measure if a style was entered*/
    /* Assign default value of each*/
    /* **********************************************************************/
    ;
    if (NK0DM200.SY1STNBR[NK0DW-INDEX] > " "
     && NK0DM200.XUMDESC[NK0DW-INDEX] == " ")
      set NK0DM200.XUMDESC[NK0DW-INDEX] cursor, bold, modified;
      converseLib.validationFailed(334);
      NK0DM200.XUMDESC[NK0DW-INDEX] = "EACH";
    end
    ;
    /* **********************************************************************/
    /* The require a PRICE if a style was entered*/
    /* **********************************************************************/
    ;
    if (NK0DM-200-PRC[NK0DW-INDEX] == 0
     && NK0DM200.SY1STNBR[NK0DW-INDEX] > " "
     && NK0DW-ERR-FLAG == "N")
      NK0DS-DF-PRICING();
    end
    NK0DM-200-AMT[NK0DW-INDEX] = NK0DM-200-PRC[NK0DW-INDEX] *     NK0DM-200-QTY[NK0DW-INDEX];
    if (NK0DM-200-AMT[NK0DW-INDEX] > 1000000.00)
      NK0DW-ERR-FLAG = "Y";
      converseLib.validationFailed(367);
      set NK0DM200.SY1STNBR[NK0DW-INDEX] modified, cursor, bold;
      set NK0DM200.SY2CLRID[NK0DW-INDEX] modified, bold;
      set NK0DM200.XDMCD[NK0DW-INDEX] modified, bold;
    end
    ;
    /* **********************************************************************/
    /* The require a factory code if a style was entered*/
    /* **********************************************************************/
    ;
    if (NK0DM200.SY1STNBR[NK0DW-INDEX] > " "
     && NK0DM200.FY1FCTYC[NK0DW-INDEX] == " ")
      set NK0DM200.FY1FCTYC[NK0DW-INDEX] cursor, bold, modified;
      NK0DW-ERR-FLAG = "Y";
      converseLib.validationFailed(338);
    end
    ;
    /* **********************************************************************/
    /* Edit the item to see if it is already on the claim*/
    /* **********************************************************************/
    ;
    if (NK0DW-06-NL-CLM-QTY[NK0DW-INDEX] == 0
     && NK0DW-ERR-FLAG == "N"
     && NK0DM200.SY1STNBR[NK0DW-INDEX] > " "
     && NK0DM200.SY2CLRID[NK0DW-INDEX] > " ")
      NK0DS-EDIT-DUP-DEF();
    end
    ;
    /* **********************************************************************/
    /* The nk0dw-err-flag is used to process each item and control the*/
    /* edits which are performed.  It is not used to set the application*/
    /* error flag.*/
    /* **********************************************************************/
    ;
    if (NK0DW-ERR-FLAG == "Y")
      NLXREC.NLXERRF = "Y";
    end
    NK0DW-INDEX = NK0DW-INDEX - 1;
  end
  ;
  /* ************************************************************************/
  /* Edit the sales gl code only to see if it is a valid gl code.*/
  /* ************************************************************************/
  ;
  if (NK0DW-SLS-GL-MOD-FL == "Y")
    set VSTYGL01 empty;
    VSTYGL01.NIEENT1 = NK0DM200.GLAENT;
    VSTYGL01.NIERCID1 = NK0DM200.GLARCID;
    VSTYGL01.NIENTAC1 = NK0DM200.GLANTAC;
    VSTYGL01.NIESUB1 = NK0DM200.GLASUB;
    VSTYGL01.NIEPRJ1 = NK0DM200.GLAPRJ;
    NK0DW-SLS-GLAENT = NK0DM200.GLAENT;
    NK0DW-SLS-GLARCID = NK0DM200.GLARCID;
    NK0DW-SLS-GLANTAC = NK0DM200.GLANTAC;
    NK0DW-SLS-GLASUB = NK0DM200.GLASUB;
    NK0DW-SLS-GLAPRJ = NK0DM200.GLAPRJ;
    if (NK0DW-SALES-GL == NKW-SLS-GL-CD)
      set NK0DM200.GLAENT initialAttributes;
      set NK0DM200.GLARCID initialAttributes;
      set NK0DM200.GLANTAC initialAttributes;
      set NK0DM200.GLASUB initialAttributes;
      set NK0DM200.GLAPRJ initialAttributes;
    else
      NK0DS-EDIT-SLS-GL();
    end
  end
  ;
  /* ************************************************************************/
  /* Edit Sales GL code to insure one has been assigned*/
  /* ************************************************************************/
  ;
  ;
  if (NK0DM200.GLAENT == " "
   || NK0DM200.GLARCID == " "
   || NK0DM200.GLANTAC == " "
   || NK0DM200.GLASUB == " ")
    NLXREC.NLXERRF = "Y";
    converseLib.validationFailed(341);
    set NK0DM200.GLAENT modified, bold, cursor;
    set NK0DM200.GLARCID modified, bold;
    set NK0DM200.GLANTAC modified, bold;
    set NK0DM200.GLASUB modified, bold;
    set NK0DM200.GLAPRJ modified, bold;
  end
  ;
  /* ************************************************************************/
  /* This edit test the changing of the from page number to cause paging*/
  /* to a specific page.  this will only be done if enter was pressed*/
  /* ************************************************************************/
  ;
  NK0DS-CK-M200-NBR();
end // end NK0D-220

// Determine next action M200
Function NK0D-230()
   /* **************************************/
   /* Determine next action from hdr 1*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NK0D-230";
  ;
   /*  */
   /* Update or add current page to the temp storage*/
   /*  */
  ;
  if (converseVar.eventKey is enter
   || converseVar.eventKey is pf7
   || converseVar.eventKey is pf8)
    if (NKWREC.ZCS-CLM-STAT-CD == "AC"
     || NKWREC.ZCS-CLM-STAT-CD == "RP"
     || NKWREC.ZCS-CLM-STAT-CD == "VD")
       /* next sentence*/
    else
      NK0DS-UPDT-NK0DW06();
      if (NK0DW-NEXT-PAGE-NBR > NK0DW-HIGH-PAGE-NBR)
        NK0DS-ADD-TMP-DEF();
      else
        if (NK0DW-HIGH-PAGE-NBR > 0)
          NK0DS-UPDT-TMP-DEF();
        end
      end
    end
  end
  ;
   /*  */
   /* Enter - update the claim header and transfer to NK0C*/
   /*  */
  ;
  NK0DW-MOD-FLAGS = " ";
  if (converseVar.eventKey is enter)
    if (NK0DW-HOLD-PAGE-NBR != NK0DM200.NK0DM-FM-PAGE)
      NK0DW-NEXT-PAGE-NBR = NK0DM200.NK0DM-FM-PAGE;
      NK0DS-BUILD-MAP200();
    else
      if (NKWREC.ZCS-CLM-STAT-CD == "VD")
         /* next sentence;*/
      else
        if (NKWREC.ZCS-CLM-STAT-CD == "AC"
         || NKWREC.ZCS-CLM-STAT-CD == "RP")
          if (NK0DW-SLS-GL-CHG == "Y")
            NK0DS-UPDATE-DEF();
          end
        else
          NK0DS-UPDATE-DEF();
        end
      end
      if (NLXREC.NLXERRF == "N")
        COMMAREA.CAUSERA = NKWREC.NKW-GROUP;
        COMMAREA.CATOAP = "NK0B";
        XPNL002();
        return;
      end
    end
  end
  ;
   /*  */
   /* PF7 - page forward*/
   /*  */
  ;
  if (converseVar.eventKey is pf7)
    NK0DS-MAP200-PF7();
    return;
  end
  ;
   /*  */
   /* PF8 - page back*/
   /*  */
  ;
  if (converseVar.eventKey is pf8)
    NK0DS-MAP200-PF8();
    return;
  end
  ;
   /*  */
   /* PF12 - re-display the screen*/
   /*  */
  ;
  if (converseVar.eventKey is pf12)
    converseLib.validationFailed(372);
    return;
  end
  ;
end // end NK0D-230

// Ivc Items Select screen
Function NK0D-300()
   /* -----------------------------------------------------------*/
       /* Process screen NK0DM300*/
        /* This process is accessed from NK0D-130*/
        /* note - this process will process will process map array*/
        /* "NK0DW02" record.  For each invoice entered with no*/
        /* style will be present on the map 300 for the user to*/
        /* select styles for the claim.  The user will have to enter*/
        /* the claim quantity for the item to be selected*/
  ;
   /* -----------------------------------------------------------*/
  ;
  NLXREC.NLXCPROC = "NK0D-300";
  ;
  NLXLINEX = 1;
  while (NLXLINEX <= 12)
    if (NK0DW-IVC-ARRAY[NLXLINEX] > 0)
      NLXBLDSC = "Y";
      NLXEOSF = "N";
      set NK0DW03 empty;
      while (NLXEOSF == "N")
        NK0D-30010();
      end
    end
    NLXLINEX = NLXLINEX + 1;
  end
  NLXEOSF = "N";
  ;
end // end NK0D-300

// Ivc Items Select screen
Function NK0D-30010()
   /* -----------------------------------------------------------*/
       /* Process screen NK0DM300*/
  ;
        /* note - this process is being performed from NK0D-300.*/
        /* This process will display all items on an invoice, unless it*/
        /* is already on the current claim.  The user will be allowed to*/
        /* page foreward and backward, and to a specific page.  They will*/
        /* have to hit the enter key to continue to the next invoice.*/
        /* The program's temp CICS storage will be updated with the new*/
        /* claim items, that is this process will not update the database.*/
  ;
   /* -----------------------------------------------------------*/
  ;
  NLXREC.NLXCPROC = "NK0D-301";
  ;
  if (NLXREC.NLXBLDSC == "Y")
    NK0D-301();
    NLXREC.NLXBLDSC = "N";
  end
  ;
  converse NK0DM300 ;
  ;
  NK0DM300.VAGen_EZEMSG = " ";
  NLXREC.NLXERRF = "N";
  ;
  ;
  NK0D-310(); /* check attention identifier*/
  ;
  if (NLXREC.NLXERRF == "N") /* check for error*/
    NK0D-320(); /* process entered option*/
  end
  ;
  if (NLXREC.NLXERRF == "N") /* check for error*/
    NK0D-330(); /* determine next action...*/
  end
  ;
end // end NK0D-30010

// Build screen
Function NK0D-301()
   /* **************************************/
   /* Build MAP NK0DM300                 **/
   /* **************************************/
  ;
  ;
  NLXREC.NLXCPROC = "NK0D-301";
  ;
  converseLib.clearScreen();
  set NK0DM300 initial;
  ;
  NK0DM100.XXXRVNBR = "00"; /* revision nbr*/
  NK0DM300.XXXMAPNM = "NK0DM300"; /* map name*/
  NK0DM300.XXXPRCNM = "NK0D-300"; /* process name*/
  NK0DM100.XXXCURDT = VGVar.currentShortGregorianDate; /* system date*/
  ;
   /* Build header of map.................*/
  ;
  NK0DM300.KUCCOID = NKWREC.KUCCOID;
  NK0DM300.KUMSTRID = NKWREC.KUMSTRID;
  NK0DM300.KUCCONM = NKWREC.KUCCONM;
  NK0DM300.XCTDESC = NKWREC.XCTDESC;
  NK0DM300.NL-CLM-ID = NKWREC.NL-CLM-ID;
  NK0DM300.NIDIVCID = NK0DW-IVC-ARRAY[NLXLINEX];
  move NK0DW-NEXT-PAGE-NBR to NK0DW-NEW-PAGE-NBR withV60Compat;
  ;
  set VPIITM01 empty;
  ;
   /* build key to cursor for invoice items*/
  ;
  NK0DW-INX4 = 0;
  VPIITM01.NIDIVCID = NK0DW-IVC-ARRAY[NLXLINEX];
  VPIITM01.XGPCD = "**";
  VPIITM01.SY1STNBR = "******";
  VPIITM01.SY2CLRID = "***";
  VPIITM01.XDMCD = "**";
  VPIITM01.XQACD = "**";
  NK0DS-S1-VPIITM01(); /* Open cursor on claim style items.*/
                                  /* to it*/
  while (SQLCA.VAGen_SQLCODE == 0)
    NK0DS-N1-VPIITM01(); /* Fetch next on claim style items.*/
    if (SQLCA.VAGen_SQLCODE == 0)
      NK0DS-BLD-IVC-STG(); /* Load all items to temp storage one*/
    end
  end
  ;
  NK0DS-C1-VPIITM01(); /* Close cursor on claim style items.*/
  /* ************************************************************************/
  /* determine the to map page number.  we will divide the index for the*/
  /* working storage by twelve.  Then we will multipul the number by*/
  /* twelve to see if it is equal to the index.  if not we will add 1 to*/
  /* the to page page count. we will aslo set nk0dw-inx4 to 12 for 1st page*/
  /* ************************************************************************/
  NK0DW-MAP300-TO-PAGE = NK0DW-INX4 / 12;
  NK0DW-W03-ARRAY-CNT = NK0DW-MAP300-TO-PAGE * 12;
  if (NK0DW-W03-ARRAY-CNT == NK0DW-INX4)
  /* next sentence*/
  else
    NK0DW-MAP300-TO-PAGE = NK0DW-MAP300-TO-PAGE + 1;
  end
  NK0DW-INX4 = 12;
  NK0DM300.NK0DM-FM-PAGE = 1;
  NK0DW-MAP300-FM-PAGE = 1;
  NK0DM300.NK0DM-TO-PAGE = NK0DW-MAP300-TO-PAGE;
  ;
  NK0DS-BUILD-MAP300(); /* Build the map*/
end // end NK0D-301

// Validate PF keys; act on some
Function NK0D-310()
  /* ************************************************************************/
  /* Validate PF keys*/
  /* Active PF keys: 7, 8, and Enter & 3*/
  /* ************************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0D-310";
  ;
  if (converseVar.eventKey is enter /* Valid pf keys*/
   || converseVar.eventKey is pf7   
   || converseVar.eventKey is pf8) 
    return;
  end
  ;
  /* ************************************************************************/
  /* Validate PF3 return to map 100*/
  /* ************************************************************************/
  ;
  if (converseVar.eventKey is pf3)
    NLXEOSF = "Y";
    NLXERRF = "Y";
    return;
  end
  ;
  ;
      /* pf key not valid*/
  ;
  converseLib.validationFailed(2); /* PF key not valid*/
  NLXREC.NLXERRF = "Y"; /* Mark with error*/
  ;
end // end NK0D-310

// Edit/Act on function keys
Function NK0D-320()
   /* ************************************/
   /* Edit item select screen*/
   /* ************************************/
  ;
  NLXREC.NLXCPROC = "NK0D-320";
  ;
  set NK0DM300.NK0DM-FM-PAGE initialAttributes;
  ;
   /* There are 12 occurances of styles on each map.  The edits are per-*/
   /* formed in a while loop from the bottom up.*/
  ;
  NK0DW-INDEX = 12;
  NK0DW-INX4 = NK0DW-INX4 + 12;
  /* ************************************************************************/
  /* Edit the entered claim quanties.  First get the invoice balance*/
  /* to see if the claim quantity enter is greater than the current*/
  /* balance.  Always determine the balance prior to the edit.*/
  /* ************************************************************************/
  while (NK0DW-INDEX > 0)
    NK0DW-ERR-FLAG = "N";
    NK0DW-IVC-BAL = 0;
    /* **********************************************************************/
    /* If the style number is greater than spaces in the array, then get*/
    /* **********************************************************************/
    if (NK0DW-03-SY1STNBR[NK0DW-INX4] > " ")
      set NK0DM300.NK0DM-CLM-QTY[NK0DW-INDEX] initialAttributes;
      if (NK0DM300.NK0DM-CLM-QTY[NK0DW-INDEX] > 0)
        VPIITM01.NIDIVCID = NK0DW-03-NIDIVCID[NK0DW-INX4];
        VPIITM01.XGPCD = NK0DW-03-XGPCD[NK0DW-INX4];
        VPIITM01.SY1STNBR = NK0DW-03-SY1STNBR[NK0DW-INX4];
        VPIITM01.SY2CLRID = NK0DW-03-SY2CLRID[NK0DW-INX4];
        VPIITM01.XDMCD = NK0DW-03-XDMCD[NK0DW-INX4];
        VNCSTY01.NIDIVCID = NK0DW-03-NIDIVCID[NK0DW-INX4];
        VNCSTY01.SY1STNBR = NK0DW-03-SY1STNBR[NK0DW-INX4];
        VNCSTY01.SY2CLRID = NK0DW-03-SY2CLRID[NK0DW-INX4];
        VNCSTY01.XDMCD = NK0DW-03-XDMCD[NK0DW-INX4];
        VNCSTY01.XQACD = NK0DW-03-XQACD[NK0DW-INX4];
        VNCSTY01.PC3PONBR = 0;
        NK0DS-SEL-VPIITM01(); /* get invoice quantity;*/
        NK0DS-SEL-VNCSTY01(); /* get claims quantities;*/
        if (NK0DW-IVC-BAL < NK0DM300.NK0DM-CLM-QTY[NK0DW-INDEX])
          converseLib.validationFailed(308);
          NLXREC.NLXERRF = "Y";
          set NK0DM300.NK0DM-CLM-QTY[NK0DW-INDEX] bold, modified, cursor;
        else
          NK0DW-03-NL-CLM-QTY[NK0DW-INX4] = NK0DM300.NK0DM-CLM-QTY[NK0DW-INDEX];
        end
      end
    end
    NK0DW-INDEX = NK0DW-INDEX - 1;
    NK0DW-INX4 = NK0DW-INX4 - 1;
  end
  VNCHDR01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  NK0DS-S-VNCHDR01();
  ;
     /* This edit test the changing of the from page number to cause*/
     /* paging to a specific page.  this will only be done if enter was*/
     /* pressed*/
  ;
  NK0DW-MAP300-HD-PAGE = NK0DM300.NK0DM-FM-PAGE;
  if (NK0DM300.NK0DM-FM-PAGE == 1)
         /* next sentence*/
  else
    if (NK0DM300.NK0DM-FM-PAGE > NK0DW-MAP300-TO-PAGE
     || NK0DM300.NK0DM-FM-PAGE == 0)
      converseLib.validationFailed(319);
      NLXREC.NLXERRF = "Y";
      set NK0DM300.NK0DM-FM-PAGE bold, cursor, modified;
    else
      if (converseVar.eventKey not enter
       && NK0DM300.NK0DM-FM-PAGE != NK0DW-MAP300-FM-PAGE)
        converseLib.validationFailed(320);
        NLXREC.NLXERRF = "Y";
        set NK0DM300.NK0DM-FM-PAGE bold, cursor, modified;
      end
    end
  end
end // end NK0D-320

// Determine next action
Function NK0D-330()
   /* **************************************/
   /* Determine next action from hdr 1*/
   /* **************************************/
  ;
  NLXREC.NLXCPROC = "NK0D-330";
  ;
   /*  */
   /* Enter - update the claim header and transfer to NK0C*/
   /*  */
  ;
  if (converseVar.eventKey is enter)
    if (NK0DW-MAP300-FM-PAGE != NK0DM300.NK0DM-FM-PAGE)
      NK0DW-MAP300-FM-PAGE = NK0DM300.NK0DM-FM-PAGE;
      NK0DS-BUILD-MAP300();
    else
      NK0DS-PROCESS-IVC();
      NLXEOSF = "Y";
    end
  end
  ;
   /*  */
   /* PF7 - page forward*/
   /*  */
  ;
  if (converseVar.eventKey is pf7)
    NK0DS-MAP300-PF7();
  end
  ;
   /*  */
   /* PF8 - page back*/
   /*  */
  ;
  if (converseVar.eventKey is pf8)
    NK0DS-MAP300-PF8();
  end
  ;
end // end NK0D-330

// Add a VNCDEF01 item
Function NK0DS-A-VNCDEF01()
   /* *****************************************************************/
   /* This will add an item to the VNCDEF01 database*/
   /* *****************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-A-VNCDEF01";
  ;
  set VNCDEF01 empty;
  ;
  VNCDEF01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  VNCDEF01.NL-CLM-LN-QTY = NK0DW-06-MAP-QTY[NK0DW-INDEX];
  VNCDEF01.XGPCD = NKWREC.XGPCD;
  VNCDEF01.SY1STNBR = NK0DW-06-SY1STNBR[NK0DW-INDEX];
  VNCDEF01.SY2CLRID = NK0DW-06-SY2CLRID[NK0DW-INDEX];
  VNCDEF01.XDMCD = NK0DW-06-XDMCD[NK0DW-INDEX];
  VNCDEF01.KUIPRDID = " ";
  VNCDEF01.XQACD = NK0DW-06-XQACD[NK0DW-INDEX];
  if (NK0DW-06-CLM-XUMDESC[NK0DW-INDEX] in XUMTBL.XUMDESC)
    VNCDEF01.XUMCD = XUMTBL.XUMCD[sysVar.arrayIndex];
  end
  VNCDEF01.PC3POIDT = NK0DW-06-PC3POIDT[NK0DW-INDEX];
  VNCDEF01.FY1FCTYC = NK0DW-06-FY1FCTYC[NK0DW-INDEX];
  VNCDEF01.XSECD = NK0DW-06-XSECD[NK0DW-INDEX];
  VNCDEF01.XSNYR = NK0DW-06-XSNYR[NK0DW-INDEX];
  VNCDEF01.NIHNPRC = NK0DW-06-NIHNPRC[NK0DW-INDEX];
  VNCDEF01.NIHNPRCF = 0;
  VNCDEF01.NL-CLM-LN-QTY = NK0DW-06-MAP-QTY[NK0DW-INDEX];
  VNCDEF01.NIHNMRC = VNCDEF01.NL-CLM-LN-QTY * VNCDEF01.NIHNPRC;
  VNCDEF01.NIHNMRCF = VNCDEF01.NL-CLM-LN-QTY * VNCDEF01.NIHNPRCF;
  VNCDEF01.GLAENT = NKW-SLS-GLAENT;
  VNCDEF01.GLARCID = NKW-SLS-GLARCID;
  VNCDEF01.GLANTAC = NKW-SLS-GLANTAC;
  VNCDEF01.GLASUB = NKW-SLS-GLASUB;
  VNCDEF01.GLAPRJ = NKW-SLS-GLAPRJ;
  ;
  XX0XS01(); /* get current date and time for*/
                                  /* zz-change-faimly*/
  VNCDEF01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VNCDEF01.ZZZSDT = XX0XW01.XX0XWDAT;
  VNCDEF01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  call "IO6480" ("A ", SQLCA, VNCDEF01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCDEF01";
    NK0DW-LRG-NBR = VNCDEF01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0DW01.NK0DW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
end // end NK0DS-A-VNCDEF01

// Add a VNCIVX01 item
Function NK0DS-A-VNCIVX01()
  /* ************************************************************************/
  /* This will test the add x-ref records, if they need to be.*/
  /* ************************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-A-VNCIVX01";
  NK0DW-INVOICE-FOUND = "N";
  ;
  set VNCIVX01 empty;
  ;
  VNCIVX01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  VNCIVX01.NIDIVCID = NK0DW-02-NIDIVCID[NK0DW-INDEX];
  ;
  call "IO6510" ("S ", SQLCA, VNCIVX01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if a good return,*/
    /* next sentence*/
    else
      TA1REC.TA1DBASE = "DNILO";
      TA1REC.TA1TBLVU = "VNCIVX01";
      NK0DW-LRG-NBR = VNCIVX01.NL-CLM-ID;
      TA1REC.TA1TBLKE = NK0DW01.NK0DW-KEY;
      XPNL005(); /* abort routine*/
    end
  end
  ;
  VNCIVX01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  VNCIVX01.NIDIVCID = NK0DW-02-NIDIVCID[NK0DW-INDEX];
  VNCIVX01.ZDTCD = "PI";
  XX0XS01(); /* get current date and time for*/
                                  /* zz-change-faimly*/
  VNCIVX01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VNCIVX01.ZZZSDT = XX0XW01.XX0XWDAT;
  VNCIVX01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  call "IO6510" ("A ", SQLCA, VNCIVX01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCIVX01";
    NK0DW-LRG-NBR = VNCIVX01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0DW01.NK0DW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
end // end NK0DS-A-VNCIVX01

// Add a VNCSTY01 item
Function NK0DS-A-VNCSTY01()
   /* *****************************************************************/
   /* This will add an item to the VNCSTY01 database*/
   /* *****************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-A-VNCSTY01";
  ;
  set VNCSTY01 empty;
  set VPIITM01 empty;
  VPIITM01.NIDIVCID = NK0DW-02-NIDIVCID[NK0DW-INDEX];
  VPIITM01.SY1STNBR = NK0DW-02-SY1STNBR[NK0DW-INDEX];
  VPIITM01.SY2CLRID = NK0DW-02-SY2CLRID[NK0DW-INDEX];
  VPIITM01.XDMCD = NK0DW-02-XDMCD[NK0DW-INDEX];
  ;
  NK0DS-SEL-VPIITM01(); /* GET INVOICE ITEM FOR CLAIM*/
  ;
  NK0DW-02-NL-CLM-QTY[NK0DW-INDEX] = NK0DW-02-MAP-QTY[NK0DW-INDEX];
  VNCSTY01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  VNCSTY01.NIDIVCID = NK0DW-02-NIDIVCID[NK0DW-INDEX];
  VNCSTY01.OP2LNINB = VPIITM01.OP2LNINB;
  VNCSTY01.NL-CLM-LN-QTY = NK0DW-02-MAP-QTY[NK0DW-INDEX];
  VNCSTY01.XGPCD = NKWREC.XGPCD;
  VNCSTY01.SY1STNBR = VPIITM01.SY1STNBR;
  VNCSTY01.SY2CLRID = VPIITM01.SY2CLRID;
  VNCSTY01.XDMCD = VPIITM01.XDMCD;
  VNCSTY01.KUIPRDID = VPIITM01.KUIPRDID;
  VNCSTY01.XQACD = VPIITM01.XQACD;
  VNCSTY01.XUMCD = VPIITM01.XUMCD;
  VNCSTY01.NIHGPRC = VPIITM01.NIHGPRC;
  VNCSTY01.NIHGPRCF = VPIITM01.NIHGPRCF;
  VNCSTY01.NIHNPRC = VPIITM01.NIHNPRC;
  VNCSTY01.NIHNPRCF = VPIITM01.NIHNPRCF;
  VNCSTY01.NL-CLM-LN-QTY = NK0DW-02-MAP-QTY[NK0DW-INDEX];
  VNCSTY01.NIHGMRC = VNCSTY01.NL-CLM-LN-QTY * VNCSTY01.NIHGPRC;
  VNCSTY01.NIHGMRCF = VNCSTY01.NL-CLM-LN-QTY * VNCSTY01.NIHGPRCF;
  VNCSTY01.NIHNMRC = VNCSTY01.NL-CLM-LN-QTY * VNCSTY01.NIHNPRC;
  VNCSTY01.NIHNMRCF = VNCSTY01.NL-CLM-LN-QTY * VNCSTY01.NIHNPRCF;
  VNCSTY01.GLAENT = NKW-SLS-GLAENT;
  VNCSTY01.GLARCID = NKW-SLS-GLARCID;
  VNCSTY01.GLANTAC = NKW-SLS-GLANTAC;
  VNCSTY01.GLASUB = NKW-SLS-GLASUB;
  VNCSTY01.GLAPRJ = NKW-SLS-GLAPRJ;
  ;
  XX0XS01(); /* get current date and time for*/
                                  /* zz-change-faimly*/
  VNCSTY01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VNCSTY01.ZZZSDT = XX0XW01.XX0XWDAT;
  VNCSTY01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  call "IO6470" ("A ", SQLCA, VNCSTY01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCSTY01";
    NK0DW-LRG-NBR = VNCSTY01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0DW01.NK0DW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
end // end NK0DS-A-VNCSTY01

// Add defective temp storage
Function NK0DS-ADD-TMP-DEF()
   /* ***********************************************************************/
   /* Write temp storage for defectives*/
   /* ***********************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-ADD-TMP-DEF";
  ;
  move NK0DW-W03-SIZE to NK0DW-06-LENGTH withV60Compat;
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  ;
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (NK0DW06, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    NK0DW-HIGH-PAGE-NBR = TA5REC.TA5TSQIX; /* Save high page Nbr*/
    return; /* Return to previous process*/
    ;
  else
    ;
   /* ------------------------------------------------------------*/
    /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
    ;
    converseLib.validationFailed(299); /* Indicate system error*/
    ;
    XPNL-006(); /* abend routine*/
    ;
  end
  ;
end // end NK0DS-ADD-TMP-DEF

// Add temp storage
Function NK0DS-ADD-TMP-STG()
   /* ***********************************************************************/
   /* Write temp storage*/
   /*  */
   /*  */
   /* ***********************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-ADD-TMP-STG";
  move NK0DW-W02-SIZE to NK0DW-02-LENGTH withV60Compat;
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  ;
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (NK0DW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    NK0DW-HIGH-PAGE-NBR = TA5REC.TA5TSQIX; /* Save high page Nbr*/
    return; /* Return to previous process*/
    ;
  else
    ;
   /* ------------------------------------------------------------*/
    /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
    ;
    converseLib.validationFailed(299); /* Indicate system error*/
    ;
    XPNL-006(); /* abend routine*/
    ;
  end
  ;
end // end NK0DS-ADD-TMP-STG

// Build VPIITM stroage in W03
Function NK0DS-BLD-IVC-STG()
   /* ***********************************************************************/
   /*  */
   /* Build array in NK0DW03 for all items on an invoice which are not*/
   /* already on this claim.  The invoice item will be used to build a key*/
   /* to the VNCSTY01 data base to see if it is already on the claim.*/
   /* If the item is on the claim it will not be written to storage.  The*/
   /* new claim item array will aslo be searched to see if style was added*/
   /* to the claim during maintenance.*/
   /* ***********************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-BLD-IVC-STG";
  ;
   /* Build current claim style item key.*/
  ;
  VNCSTY01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  VNCSTY01.NIDIVCID = VPIITM01.NIDIVCID;
  VNCSTY01.OP2LNINB = VPIITM01.OP2LNINB;
  VNCSTY01.XGPCD = VPIITM01.XGPCD;
  VNCSTY01.SY1STNBR = VPIITM01.SY1STNBR;
  VNCSTY01.SY2CLRID = VPIITM01.SY2CLRID;
  VNCSTY01.XDMCD = VPIITM01.XDMCD;
  VNCSTY01.XQACD = VPIITM01.XQACD;
  VNCSTY01.PC3PONBR = 0;
  ;
  NK0DS-S-VNCSTY01(); /* select unique on vncsty01*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* Item on found, return without saving*/
    return;
  end
  SQLCA.VAGen_SQLCODE = 0;
  NK0DW-MAP-IVC = VPIITM01.NIDIVCID;
  NK0DW-MAP-STY = VPIITM01.SY1STNBR;
  NK0DW-MAP-CLR = VPIITM01.SY2CLRID;
  NK0DW-MAP-DIM = VPIITM01.XDMCD;
  NK0DW-INDEX-2 = 1;
  while (NK0DW-INDEX-2 <= 300)
    if (NK0DW-NEW-PRODS[NK0DW-INDEX-2] == NK0DW-MAP-PROD) /* style on claim*/
      return;
    end
    NK0DW-INDEX-2 = NK0DW-INDEX-2 + 1;
  end
  ;
   /* At this point the item may be added to the internal array*/
  ;
  NK0DW-INX4 = NK0DW-INX4 + 1;
  NK0DW-03-NIDIVCID[NK0DW-INX4] = VPIITM01.NIDIVCID;
  NK0DW-03-NIHSHPQTY[NK0DW-INX4] = VPIITM01.NIHSHPQT;
  NK0DW-03-SY1STNBR[NK0DW-INX4] = VPIITM01.SY1STNBR;
  NK0DW-03-SY2CLRID[NK0DW-INX4] = VPIITM01.SY2CLRID;
  NK0DW-03-XDMCD[NK0DW-INX4] = VPIITM01.XDMCD;
  NK0DW-03-XQACD[NK0DW-INX4] = VPIITM01.XQACD;
  NK0DW-03-NIHNPRC[NK0DW-INX4] = VPIITM01.NIHNPRC;
  if (VPIITM01.XUMCD in XUMTBL.XUMCD)
    NK0DW-03-XUMDESC[NK0DW-INX4] = XUMTBL.XUMDESC[sysVar.arrayIndex];
  end
  NK0DW-03-OP2LNINB[NK0DW-INX4] = VPIITM01.OP2LNINB;
  ;
   /* get product description*/
  ;
  SY1REC.SY1STNBR = VPIITM01.SY1STNBR;
  SY1REC.XGPCD = VPIITM01.XGPCD;
  ;
  NK0DS-S-VSTYLE01(); /* select unique on sytle*/
  ;
  NK0DW-03-PRD-DESC[NK0DW-INX4] = SY1REC.SY1SSTNM;
  ;
end // end NK0DS-BLD-IVC-STG

// Build VNCDEF temp storage
Function NK0DS-BLD-TMP-DEF()
   /* ***********************************************************************/
   /* Build temp storage*/
   /*  */
   /* As styles are fetched, they are move to map working storage*/
   /* NK0DW06.  Twelve occurances of styles appear on the screen*/
   /* thus 12 rows will be moved to the map working storage.  Once 12*/
   /* occurances have been moved to working storage, the record will*/
   /* witten to temp storage one page at a time.*/
   /*  */
   /* ***********************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-BLD-TMP-DEF";
  ;
  NK0DW-INDEX = NK0DW-INDEX + 1; /* M100 display storage*/
  ;
  NK0DW-06-XGPCD[NK0DW-INDEX] = VNCDEF01.XGPCD;
  NK0DW-06-SY1STNBR[NK0DW-INDEX] = VNCDEF01.SY1STNBR; /* STYLE*/
  NK0DW-06-SY2CLRID[NK0DW-INDEX] = VNCDEF01.SY2CLRID; /* COLOR*/
  NK0DW-06-XDMCD[NK0DW-INDEX] = VNCDEF01.XDMCD; /* DIM*/
  NK0DW-06-NL-CLM-QTY[NK0DW-INDEX] = VNCDEF01.NL-CLM-LN-QTY;
  NK0DW-06-MAP-QTY[NK0DW-INDEX] = VNCDEF01.NL-CLM-LN-QTY;
  NK0DW-06-XSECD[NK0DW-INDEX] = VNCDEF01.XSECD;
  NK0DW-06-XSNYR[NK0DW-INDEX] = VNCDEF01.XSNYR;
  if (VNCDEF01.XUMCD in XUMTBL.XUMCD)
    NK0DW-06-CLM-XUMDESC[NK0DW-INDEX] = XUMTBL.XUMDESC[sysVar.arrayIndex];
  end
  NK0DW-06-FY1FCTYC[NK0DW-INDEX] = VNCDEF01.FY1FCTYC;
  NK0DW-06-PC3POIDT[NK0DW-INDEX] = VNCDEF01.PC3POIDT;
  NK0DW-06-NIHNPRC[NK0DW-INDEX] = VNCDEF01.NIHNPRC; /* Price*/
  NK0DW-06-NIHNMRC[NK0DW-INDEX] = VNCDEF01.NL-CLM-LN-QTY *   VNCDEF01.NIHNPRC;
  NK0DW-06-ZZZCHGCT[NK0DW-INDEX] = VNCDEF01.ZZZCHGCT;
  ;
  if (NK0DW-INDEX == 12)
    NK0DS-ADD-TMP-DEF();
    set NK0DW06 empty;
    NK0DW-INDEX = 0;
  end
  ;
end // end NK0DS-BLD-TMP-DEF

// Build VNCSTY temp storage
Function NK0DS-BLD-TMP-STG()
   /* ***********************************************************************/
   /* Build temp storage*/
   /*  */
   /* As styles are fetched, they are move to map working storage*/
   /* NK0DW02.  Four occurances of styles appear on the screen*/
   /* thus four rows will be moved to the map working storage.  Once*/
   /* 4 occurances have been moved to working storage, the record will*/
   /* witten to temp storage one page at a time.*/
   /*  */
   /* ***********************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-BLD-TMP-STG";
  ;
  NK0DW-INDEX = NK0DW-INDEX + 1; /* M100 display storage*/
  ;
  NK0DW-02-XGPCD[NK0DW-INDEX] = VNCSTY01.XGPCD;
  NK0DW-02-SY1STNBR[NK0DW-INDEX] = VNCSTY01.SY1STNBR; /* STYLE*/
  NK0DW-02-SY2CLRID[NK0DW-INDEX] = VNCSTY01.SY2CLRID; /* COLOR*/
  NK0DW-02-XDMCD[NK0DW-INDEX] = VNCSTY01.XDMCD; /* DIM*/
  NK0DW-02-XQACD[NK0DW-INDEX] = VNCSTY01.XQACD; /* XQA*/
  NK0DW-02-NL-CLM-QTY[NK0DW-INDEX] = VNCSTY01.NL-CLM-LN-QTY;
  NK0DW-02-MAP-QTY[NK0DW-INDEX] = VNCSTY01.NL-CLM-LN-QTY;
  NK0DW-02-OP2LNINB[NK0DW-INDEX] = VNCSTY01.OP2LNINB;
  if (VNCSTY01.XUMCD in XUMTBL.XUMCD)
    NK0DW-02-CLM-XUMDESC[NK0DW-INDEX] = XUMTBL.XUMDESC[sysVar.arrayIndex];
  end
  NK0DW-02-NIHNPRC[NK0DW-INDEX] = VNCSTY01.NIHNPRC; /* Price*/
  NK0DW-02-NIHNMRC[NK0DW-INDEX] = VNCSTY01.NL-CLM-LN-QTY *   VNCSTY01.NIHNPRC;
  NK0DW-02-NIDIVCID[NK0DW-INDEX] = VNCSTY01.NIDIVCID; /* Invoice Id*/
  NK0DW-02-ZZZCHGCT[NK0DW-INDEX] = VNCSTY01.ZZZCHGCT;
  ;
  if (NK0DW-INDEX == 12)
    NK0DS-ADD-TMP-STG();
    set NK0DW02 empty;
    NK0DW-INDEX = 0;
  end
  ;
end // end NK0DS-BLD-TMP-STG

// Build map from temp storage
Function NK0DS-BUILD-MAP100()
   /* *****************************************************/
   /* Build map from temp storage.*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-BUILD-MAP100";
  ;
  ;
  set NK0DW02 empty;
  ;
  if (NK0DW-HIGH-PAGE-NBR > 0 /* If temp storage is there*/
   && NK0DW-NEXT-PAGE-NBR <= NK0DW-HIGH-PAGE-NBR)
    NK0DS-GET-TMP-STG(); /* Get current page*/
  end
  ;
  NK0DW-INDEX = 1;
  while (NK0DW-INDEX <= 12)
    ;
    NK0DM100.SY1STNBR[NK0DW-INDEX] = NK0DW-02-SY1STNBR[NK0DW-INDEX]; /* Style*/
    NK0DM100.SY2CLRID[NK0DW-INDEX] = NK0DW-02-SY2CLRID[NK0DW-INDEX]; /* Color*/
    NK0DM100.XDMCD[NK0DW-INDEX] = NK0DW-02-XDMCD[NK0DW-INDEX]; /* Dim*/
    NK0DM100.NK0DM-CLM-QTY[NK0DW-INDEX] = NK0DW-02-MAP-QTY[NK0DW-INDEX]; /* Claim Qty*/
    NK0DM100.NK0DM-IVC-XUMDESC[NK0DW-INDEX] = NK0DW-02-CLM-XUMDESC[NK0DW-INDEX]; /* UOM desc*/
    NK0DM100.NK0DM-IVC-PRICE[NK0DW-INDEX] = NK0DW-02-NIHNPRC[NK0DW-INDEX]; /* Price*/
    NK0DM100.NK0DM-CLM-AMT[NK0DW-INDEX] = NK0DW-02-NIHNMRC[NK0DW-INDEX]; /* Net Amount*/
    NK0DM100.NIDIVCID[NK0DW-INDEX] = NK0DW-02-NIDIVCID[NK0DW-INDEX]; /* Invoice Id*/
    ;
    NK0DW-INDEX = NK0DW-INDEX + 1;
    ;
  end
  ;
  NK0DW-INDEX = 1; /* set index to 1*/
   /* Determine the invoice balances and invoice data.  If no style in the*/
   /* the map working storage, there will be no invoice.*/
  ;
  while (NK0DW-INDEX <= 12) /* for each style, get invoice quantity*/
    if (NK0DW-02-SY1STNBR[NK0DW-INDEX] > " ")
      set VPIITM01 empty;
      set VNCSTY01 empty;
      VPIITM01.NIDIVCID = NK0DW-02-NIDIVCID[NK0DW-INDEX];
      VPIITM01.XGPCD = NK0DW-02-XGPCD[NK0DW-INDEX];
      VPIITM01.SY1STNBR = NK0DW-02-SY1STNBR[NK0DW-INDEX];
      VPIITM01.SY2CLRID = NK0DW-02-SY2CLRID[NK0DW-INDEX];
      VPIITM01.XDMCD = NK0DW-02-XDMCD[NK0DW-INDEX];
      VNCSTY01.NIDIVCID = NK0DW-02-NIDIVCID[NK0DW-INDEX];
      VNCSTY01.SY1STNBR = NK0DW-02-SY1STNBR[NK0DW-INDEX];
      VNCSTY01.SY2CLRID = NK0DW-02-SY2CLRID[NK0DW-INDEX];
      VNCSTY01.XDMCD = NK0DW-02-XDMCD[NK0DW-INDEX];
      NK0DS-SEL-VPIITM01(); /* get invoice quantity*/
      NK0DS-SEL-VNCSTY01(); /* get claims quantities*/
      if (NK0DW-02-NL-CLM-QTY[NK0DW-INDEX] == 0) /* new item to claim,*/
        NK0DW-IVC-BAL = NK0DW-IVC-BAL - NK0DW-02-MAP-QTY[NK0DW-INDEX];
      end
      NK0DW-02-MULTI-CLM-ITM[NK0DW-INDEX] = NK0DW-MULTI-CLM-ITM;
      NK0DM100.NK0DM-IVC-QTY[NK0DW-INDEX] = NK0DW-IVC-BAL;
    else
      NK0DM100.NK0DM-IVC-QTY[NK0DW-INDEX] = 0;
    end
    NK0DW-INDEX = NK0DW-INDEX + 1;
  end
  VNCHDR01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  NK0DS-S-VNCHDR01();
  ;
  NK0DM100.NK0DM-FM-PAGE = NK0DW-NEXT-PAGE-NBR;
  NK0DM100.NK0DM-TO-PAGE = NK0DW-HIGH-PAGE-NBR;
  NK0DS-MAP100-MODE();
  ;
end // end NK0DS-BUILD-MAP100

// Build map from temp storage
Function NK0DS-BUILD-MAP200()
   /* *****************************************************/
   /* Build map200 from temp storage.*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-BUILD-MAP200";
  ;
  ;
  set NK0DW06 empty;
  ;
  if (NK0DW-HIGH-PAGE-NBR > 0 /* If temp storage is there*/
   && NK0DW-NEXT-PAGE-NBR <= NK0DW-HIGH-PAGE-NBR)
    NK0DS-GET-TMP-DEF(); /* Get current page*/
  end
  ;
  NK0DW-INDEX = 1;
  while (NK0DW-INDEX <= 12)
    ;
    NK0DM200.SY1STNBR[NK0DW-INDEX] = NK0DW-06-SY1STNBR[NK0DW-INDEX]; /* Style*/
    NK0DM200.SY2CLRID[NK0DW-INDEX] = NK0DW-06-SY2CLRID[NK0DW-INDEX]; /* Color*/
    NK0DM200.XDMCD[NK0DW-INDEX] = NK0DW-06-XDMCD[NK0DW-INDEX]; /* Dim*/
    NK0DM200.NK0DM-200-QTY[NK0DW-INDEX] = NK0DW-06-MAP-QTY[NK0DW-INDEX]; /* Claim Qty*/
    NK0DM200.XUMDESC[NK0DW-INDEX] = NK0DW-06-CLM-XUMDESC[NK0DW-INDEX]; /* UOM desc*/
    NK0DM200.FY1FCTYC[NK0DW-INDEX] = NK0DW-06-FY1FCTYC[NK0DW-INDEX];
    NK0DM200.PC3POIDT[NK0DW-INDEX] = NK0DW-06-PC3POIDT[NK0DW-INDEX];
    if (NK0DW-06-XSECD[NK0DW-INDEX] > " ")
      NK0DW-XSECD = NK0DW-06-XSECD[NK0DW-INDEX];
      NK0DW-SEASON-YEAR = NK0DW-06-XSNYR[NK0DW-INDEX];
      move NK0DW-YEAR to NK0DW-XSNYR withV60Compat;
      NK0DM200.XSNABRV[NK0DW-INDEX] = NK0DW-SEASON;
    else
      NK0DM200.XSNABRV[NK0DW-INDEX] = " ";
    end
    NK0DM200.NK0DM-200-PRC[NK0DW-INDEX] = NK0DW-06-NIHNPRC[NK0DW-INDEX]; /* Price*/
    NK0DM200.NK0DM-200-AMT[NK0DW-INDEX] = NK0DW-06-MAP-QTY[NK0DW-INDEX]     * NK0DW-06-NIHNPRC[NK0DW-INDEX];
    NK0DW-INDEX = NK0DW-INDEX + 1;
  end
  ;
  NK0DW-INDEX = 1; /* set index to 1*/
  ;
  NK0DM200.NK0DM-FM-PAGE = NK0DW-NEXT-PAGE-NBR;
  if (NK0DW-HIGH-PAGE-NBR == 0)
    NK0DM200.NK0DM-TO-PAGE = 1;
  else
    NK0DM200.NK0DM-TO-PAGE = NK0DW-HIGH-PAGE-NBR;
  end
  NK0DS-MAP200-MODE();
  ;
end // end NK0DS-BUILD-MAP200

// Build map from working stg
Function NK0DS-BUILD-MAP300()
   /* Build map 300 from working storage.*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-BUILD-MAP300";
  ;
  NK0DW-INDEX = 12;
  NK0DW-INX4 = NK0DW-MAP300-FM-PAGE * 12;
  NK0DM300.NK0DM-FM-PAGE = NK0DW-MAP300-FM-PAGE;
  ;
  while (NK0DW-INDEX >= 1)
    set NK0DM300.NK0DM-CLM-QTY[NK0DW-INDEX] initialAttributes;
    set NK0DM300.NK0DM-PRODUCT[NK0DW-INDEX] initialAttributes;
    NK0DM300.NK0DM-CLM-QTY[NK0DW-INDEX] = NK0DW-03-NL-CLM-QTY[NK0DW-INX4];
    NK0DM300.NK0DM-NIHSHPQTY[NK0DW-INDEX] = NK0DW-03-NIHSHPQTY[NK0DW-INX4];
    if (NK0DW-03-SY1STNBR[NK0DW-INX4] > " ")
      NK0DW-SY1STNBR = NK0DW-03-SY1STNBR[NK0DW-INX4]; /* Style*/
      NK0DW-SY2CLRID = NK0DW-03-SY2CLRID[NK0DW-INX4]; /* Color*/
      NK0DW-XDMCD = NK0DW-03-XDMCD[NK0DW-INX4]; /* Dim*/
      NK0DW-HYPHEN-1 = "-";
      NK0DW-HYPHEN-2 = "-";
      NK0DM300.NK0DM-PRODUCT[NK0DW-INDEX] = NK0DW-PRODUCT;
      set VPIITM01 empty;
      VPIITM01.NIDIVCID = NK0DW-03-NIDIVCID[NK0DW-INX4];
      VPIITM01.XGPCD = NK0DW-03-XGPCD[NK0DW-INX4];
      VPIITM01.SY1STNBR = NK0DW-03-SY1STNBR[NK0DW-INX4];
      VPIITM01.SY2CLRID = NK0DW-03-SY2CLRID[NK0DW-INX4];
      VPIITM01.XDMCD = NK0DW-03-XDMCD[NK0DW-INX4];
      VNCSTY01.NIDIVCID = NK0DW-03-NIDIVCID[NK0DW-INX4];
      VNCSTY01.SY1STNBR = NK0DW-03-SY1STNBR[NK0DW-INX4];
      VNCSTY01.SY2CLRID = NK0DW-03-SY2CLRID[NK0DW-INX4];
      VNCSTY01.XDMCD = NK0DW-03-XDMCD[NK0DW-INX4];
      NK0DS-SEL-VPIITM01(); /* get invoice quantity*/
      NK0DS-SEL-VNCSTY01(); /* get claims quantities*/
      NK0DW-IVC-BAL = NK0DW-IVC-BAL - NK0DW-03-NL-CLM-QTY[NK0DW-INX4];
      NK0DM300.NK0DM-IVC-QTY[NK0DW-INDEX] = NK0DW-IVC-BAL;
      if (NK0DW-IVC-BAL == 0)
        set NK0DM300.NK0DM-CLM-QTY[NK0DW-INDEX] skip;
      else
        set NK0DM300.NK0DM-CLM-QTY[NK0DW-INDEX] initialAttributes, cursor;
      end
      NK0DW-03-MULTI-CLM-ITM[NK0DW-INX4] = NK0DW-MULTI-CLM-ITM;
      NK0DM300.NK0DM-IVC-AMT[NK0DW-INDEX] = NK0DW-IVC-BAL *       NK0DW-03-NIHNPRC[NK0DW-INX4];
      if (NK0DW-MULTI-CLM-ITM == "Y")
        set NK0DM-PRODUCT[NK0DW-INDEX] bold, skip;
        converseLib.validationFailed(321);
      end
    else
      NK0DM300.NK0DM-PRODUCT[NK0DW-INDEX] = " ";
      NK0DM300.NK0DM-IVC-AMT[NK0DW-INDEX] = 0;
      NK0DM300.NK0DM-IVC-QTY[NK0DW-INDEX] = 0;
      set NK0DM300.NK0DM-CLM-QTY[NK0DW-INDEX] skip;
    end
    NK0DM300.NK0DM-PRD-DESC[NK0DW-INDEX] = NK0DW-03-PRD-DESC[NK0DW-INX4];
    NK0DM300.XUMDESC[NK0DW-INDEX] = NK0DW-03-XUMDESC[NK0DW-INX4];
    NK0DM300.NK0DM-IVC-PRICE[NK0DW-INDEX] = NK0DW-03-NIHNPRC[NK0DW-INX4]; /* Price*/
    NK0DW-INDEX = NK0DW-INDEX - 1;
    NK0DW-INX4 = NK0DW-INX4 - 1;
  end
  VNCHDR01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  NK0DS-S-VNCHDR01();
  if (NK0DW-03-SY1STNBR[1] == " ")
    converseLib.validationFailed(326);
  end
  ;
end // end NK0DS-BUILD-MAP300

// Close the cursor for VFYSTY01
Function NK0DS-C1-VFYSTY01()
   /* *****************************************************************/
   /* This will CLOSE THE cursor for VFYSTY01*/
   /* *****************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-C1-VFYSTY01";
  ;
  call "IO2980" ("C1", SQLCA, FY2REC) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DFCTY";
    TA1REC.TA1TBLVU = "VFYSTY01";
    TA1REC.TA1TBLKE = FY2REC.FY2KEY;
    XPNL005(); /* abort routine*/
  end
  ;
  ;
end // end NK0DS-C1-VFYSTY01

// Close C1 on VNCDEF01
Function NK0DS-C1-VNCDEF01()
   /* *****************************************************/
   /* Close cursor C1 on VNCDEF01*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-C1-VNCDEF01";
  ;
   /* close cursor on - Vncdef01*/
  ;
  call "IO6480" ("C1", SQLCA, VNCDEF01) {isNoRefresh = yes, isExternal = yes}; /* close C1 on Vncdef*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCDEF01";
    NK0DW-LRG-NBR = VNCDEF01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0DW01.NK0DW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
end // end NK0DS-C1-VNCDEF01

// Close C1 on VNCSTY01
Function NK0DS-C1-VNCSTY01()
   /* *****************************************************/
   /* Close cursor C1 on VNCSTY01*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-C1-VNCSTY01";
  ;
   /* close cursor on - VNCSTY01*/
  ;
  call "IO6470" ("C1", SQLCA, VNCSTY01) {isNoRefresh = yes, isExternal = yes}; /* close C1 on VNCSTY*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCSTY01";
    NK0DW-LRG-NBR = VNCSTY01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0DW01.NK0DW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
end // end NK0DS-C1-VNCSTY01

// Close cursor 1 on VPIITM01
Function NK0DS-C1-VPIITM01()
   /* *****************************************************/
   /* Close cursor on VPIITM01*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-C1-VPIITM01";
  ;
   /* fetch cursor on - VPIITM01*/
  ;
  call "IO4480" ("C1", SQLCA, VPIITM01) {isNoRefresh = yes, isExternal = yes}; /* fetch next piitm*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VPIITM01";
    NK0DW-LRG-NBR = VPIITM01.NIDIVCID;
    TA1REC.TA1TBLKE = NK0DW01.NK0DW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
end // end NK0DS-C1-VPIITM01

// Edit the page number on M100
Function NK0DS-CK-M100-NBR()
  /* ******************************************************************/
  /* This edit test the changing of the from page number to cause*/
  /* paging to a specific page.  this will only be done if enter was*/
  /* pressed*/
  /* ******************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-CK-M100-NBR";
  move NK0DW-NEXT-PAGE-NBR to NK0DW-HOLD-PAGE-NBR withV60Compat;
  if (NK0DW-PAGE-MOD-FL == "Y")
    if (NK0DM100.NK0DM-FM-PAGE == 1)
       /* next sentence*/
    else
      if (NK0DM100.NK0DM-FM-PAGE > NK0DW-HIGH-PAGE-NBR
       || NK0DM100.NK0DM-FM-PAGE == 0)
        converseLib.validationFailed(319);
        NLXREC.NLXERRF = "Y";
        set NK0DM100.NK0DM-FM-PAGE bold, cursor, modified;
      else
        if (converseVar.eventKey not enter
         && NK0DM100.NK0DM-FM-PAGE != NK0DW-NEXT-PAGE-NBR)
          converseLib.validationFailed(320);
          NLXREC.NLXERRF = "Y";
          set NK0DM100.NK0DM-FM-PAGE bold, cursor, modified;
        end
      end
    end
  end
  NK0DW-PAGE-MOD-FL = "N";
end // end NK0DS-CK-M100-NBR

// Edit the page number on M200
Function NK0DS-CK-M200-NBR()
  /* ******************************************************************/
  /* This edit test the changing of the from page number to cause*/
  /* paging to a specific page.  this will only be done if enter was*/
  /* pressed*/
  /* ******************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-CK-M200-NBR";
  move NK0DW-NEXT-PAGE-NBR to NK0DW-HOLD-PAGE-NBR withV60Compat;
  if (NK0DW-PAGE-MOD-FL == "Y")
    if (NK0DM200.NK0DM-FM-PAGE == 1)
    /* next sentence*/
    else
      if (NK0DM200.NK0DM-FM-PAGE > NK0DW-HIGH-PAGE-NBR
       || NK0DM200.NK0DM-FM-PAGE == 0)
        converseLib.validationFailed(319);
        NLXREC.NLXERRF = "Y";
        set NK0DM200.NK0DM-FM-PAGE bold, cursor, modified;
      else
        if (converseVar.eventKey not enter
         && NK0DM200.NK0DM-FM-PAGE != NK0DW-NEXT-PAGE-NBR)
          converseLib.validationFailed(320);
          NLXREC.NLXERRF = "Y";
          set NK0DM200.NK0DM-FM-PAGE bold, cursor, modified;
        end
      end
    end
  end
end // end NK0DS-CK-M200-NBR

// Delete a VNCDEF01 item
Function NK0DS-D-VNCDEF01()
   /* *****************************************************************/
   /* This will delete a claim item if the map value was zero for the*/
   /* item.*/
   /* *****************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-D-VNCDEF01";
  ;
  set VNCDEF01 empty;
  ;
  VNCDEF01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  VNCDEF01.XGPCD = NK0DW-06-XGPCD[NK0DW-INDEX];
  VNCDEF01.SY1STNBR = NK0DW-06-SY1STNBR[NK0DW-INDEX];
  VNCDEF01.SY2CLRID = NK0DW-06-SY2CLRID[NK0DW-INDEX];
  VNCDEF01.XDMCD = NK0DW-06-XDMCD[NK0DW-INDEX];
  VNCDEF01.PC3POIDT = NK0DW-06-PC3POIDT[NK0DW-INDEX];
  VNCDEF01.FY1FCTYC = NK0DW-06-FY1FCTYC[NK0DW-INDEX];
  VNCDEF01.XSECD = NK0DW-06-XSECD[NK0DW-INDEX];
  VNCDEF01.XSNYR = NK0DW-06-XSNYR[NK0DW-INDEX];
  ;
  call "IO6480" ("D ", SQLCA, VNCDEF01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCDEF01";
    NK0DW-LRG-NBR = VNCDEF01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0DW01.NK0DW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
end // end NK0DS-D-VNCDEF01

// Delete a VNCIVX01 item
Function NK0DS-D-VNCIVX01()
  /* ************************************************************************/
  /* This will test the claims style and adjustment database to see if*/
  /* an invoice number exsits on the claim.  If it does not, it will*/
  /* delete the x-ref item for the claim/invoice combo.*/
  /* ************************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-D-VNCIVX01";
  NK0DW-INVOICE-FOUND = "N";
  ;
  set VNCSTY01 empty;
  ;
  VNCSTY01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  VNCSTY01.NIDIVCID = NK0DW-02-NIDIVCID[NK0DW-INDEX];
  ;
  call "IO6470" ("S3", SQLCA, VNCSTY01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCSTY01";
    NK0DW-LRG-NBR = VNCSTY01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0DW01.NK0DW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
  call "IO6470" ("N3", SQLCA, VNCSTY01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    NK0DW-INVOICE-FOUND = "Y";
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* not found, okay*/
     /* next sentence*/
    else
      TA1REC.TA1DBASE = "DNILO";
      TA1REC.TA1TBLVU = "VNCSTY01";
      NK0DW-LRG-NBR = VNCSTY01.NL-CLM-ID;
      TA1REC.TA1TBLKE = NK0DW01.NK0DW-KEY;
      XPNL005(); /* abort routine*/
    end
  end
  ;
  call "IO6470" ("C3", SQLCA, VNCSTY01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCSTY01";
    NK0DW-LRG-NBR = VNCSTY01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0DW01.NK0DW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
  set VNCADJ01 empty;
  ;
  VNCADJ01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  VNCADJ01.NIDIVCID = NK0DW-02-NIDIVCID[NK0DW-INDEX];
  ;
  call "IO6490" ("S3", SQLCA, VNCADJ01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCADJ01";
    NK0DW-LRG-NBR = VNCADJ01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0DW01.NK0DW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
  call "IO6490" ("N3", SQLCA, VNCADJ01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    NK0DW-INVOICE-FOUND = "Y";
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* not found, okay*/
     /* next sentence*/
    else
      TA1REC.TA1DBASE = "DNILO";
      TA1REC.TA1TBLVU = "VNCADJ01";
      NK0DW-LRG-NBR = VNCADJ01.NL-CLM-ID;
      TA1REC.TA1TBLKE = NK0DW01.NK0DW-KEY;
      XPNL005(); /* abort routine*/
    end
  end
  ;
  call "IO6490" ("C3", SQLCA, VNCADJ01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCADJ01";
    NK0DW-LRG-NBR = VNCADJ01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0DW01.NK0DW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
  if (NK0DW-INVOICE-FOUND == "Y") /* no adjustment to delete*/
    return;
  end
  ;
  VNCIVX01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  VNCIVX01.NIDIVCID = NK0DW-02-NIDIVCID[NK0DW-INDEX];
  ;
  call "IO6510" ("D ", SQLCA, VNCIVX01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCIVX01";
    NK0DW-LRG-NBR = VNCIVX01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0DW01.NK0DW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
end // end NK0DS-D-VNCIVX01

// Delete a VNCSTY01 item
Function NK0DS-D-VNCSTY01()
   /* *****************************************************************/
   /* This will delete a claim item if the map value was zero for the*/
   /* item.*/
   /* *****************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-D-VNCSTY01";
  ;
  set VNCSTY01 empty;
  ;
  VNCSTY01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  VNCSTY01.NIDIVCID = NK0DW-02-NIDIVCID[NK0DW-INDEX];
  VNCSTY01.OP2LNINB = NK0DW-02-OP2LNINB[NK0DW-INDEX];
  VNCSTY01.XGPCD = NKWREC.XGPCD;
  VNCSTY01.SY1STNBR = NK0DW-02-SY1STNBR[NK0DW-INDEX];
  VNCSTY01.SY2CLRID = NK0DW-02-SY2CLRID[NK0DW-INDEX];
  VNCSTY01.XDMCD = NK0DW-02-XDMCD[NK0DW-INDEX];
  VNCSTY01.XQACD = NK0DW-02-XQACD[NK0DW-INDEX];
  VNCSTY01.PC3PONBR = 0;
  ;
  call "IO6470" ("D ", SQLCA, VNCSTY01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCSTY01";
    NK0DW-LRG-NBR = VNCSTY01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0DW01.NK0DW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
  ;
end // end NK0DS-D-VNCSTY01

// PURGE TEMP STORAGE for VNCDEF
Function NK0DS-DEL-TMP-DEF()
   /* ***********************************************************************/
   /* PURGE temp storage*/
   /*  */
   /*  */
   /* ***********************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-DEL-TMP-DEF";
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  ;
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (NK0DW06, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.validationFailed(299); /* Indicate system error*/
  ;
  XPNL-006(); /* abend routine*/
  ;
  ;
end // end NK0DS-DEL-TMP-DEF

// PURGE TEMP STORAGE
Function NK0DS-DEL-TMP-STG()
   /* ***********************************************************************/
   /* PURGE temp storage*/
   /*  */
   /*  */
   /* ***********************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-DEL-TMP-STG";
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  ;
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (NK0DW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
  ;
  converseLib.validationFailed(299); /* Indicate system error*/
  ;
  XPNL-006(); /* abend routine*/
  ;
  ;
end // end NK0DS-DEL-TMP-STG

// Defective pricing logic
Function NK0DS-DF-PRICING()
  /* ***********************************************************************/
  /* This statement group will determine which pricing logic to use for*/
  /* defective claims.*/
  /* ***********************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-DF-PRICING";
  ;
  NK0DW-08-CU-CO-ID = NKWREC.KUCCOID;
  NK0DW-08-CU-STOR-ID = 0;
  NK0DW-08-XAU-ACCT-CLS-CD = KUCREC.XAUCD;
  NK0DW-08-ZAR-ACCT-REG-CD = VDSTRB01.ZARCD;
  NK0DW-08-ZFC-CRCY-CD = VDSTRB01.ZFCCD;
  NK0DW-08-PC-PO-MO-RNG = NK0DM200.PC3POIDT[NK0DW-INDEX];
  NK0DW-08-CURRENT-DATE = XX0XW01.XX0XWDAT;
  NK0DW-08-XSN-APPL-SESN-BDT = 0;
  if (NK0DM200.XSNABRV[NK0DW-INDEX] in XSNTBL.XSNABRV)
    if (XSNTBL.XSN-NIL-APRL-BDT[sysVar.arrayIndex] > 0)
      NK0DW-08-XSN-APPL-SESN-BDT = XSNTBL.XSN-NIL-APRL-BDT[sysVar.arrayIndex];
    else
      NK0DW-08-XSN-APPL-SESN-BDT = XSNTBL.XSNBDT[sysVar.arrayIndex];
    end
  end
  NK0DW-08-XGP-GPC-CD = NKWREC.XGPCD;
  if (NK0DM200.XUMDESC[NK0DW-INDEX] in XUMTBL.XUMDESC)
    NK0DW-08-XUM-UOM-CD = XUMTBL.XUMCD[sysVar.arrayIndex];
  end
  NK0DW-08-SY-STY-NBR = NK0DM200.SY1STNBR[NK0DW-INDEX];
  NK0DW-08-SY-COLR-CD-ID = NK0DM200.SY2CLRID[NK0DW-INDEX];
  NK0DW-08-XDM-DIM-CD = NK0DM200.XDMCD[NK0DW-INDEX];
  NK0DW-08-PRICE = 0;
  NK0DW-08-RETURN-CODE = "00";
  ;
  call "NK1080" (NK0DW08) {isNoRefresh = yes, isExternal = yes}; /* International defective prices*/
  ;
  if (NK0DW-08-RETURN-CODE == "00"
   || NK0DW-08-PRICE > 0)
    NK0DM-200-PRC[NK0DW-INDEX] = NK0DW-08-PRICE;
  else
    if (NK0DW-08-RETURN-CODE == "01")
      converseLib.validationFailed(364);
      NK0DW-ERR-FLAG = "Y";
      set NK0DM-200-PRC[NK0DW-INDEX] modified, bold, cursor;
      return;
    else
      if (NK0DW-08-RETURN-CODE == "03")
        converseLib.validationFailed(382);
        NK0DW-ERR-FLAG = "Y";
        set NK0DM-200-PRC[NK0DW-INDEX] modified, bold, cursor;
        return;
      else
        TA1REC.TA1DBASE = NK0DW-08-RETURN-TABLE;
        TA1REC.TA1TBLVU = NK0DW-08-RETURN-VIEW;
        TA1REC.TA1TBLKE = NK0DW-08-RETURN-KEY;
        XPNL005();
      end
    end
  end
  ;
end // end NK0DS-DF-PRICING

// Edit clm quantity with IVC bal
Function NK0DS-EDIT-CLM-QTY()
   /* *****************************************************/
   /* Edit claim quantity;*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-EDIT-CLM-QTY";
  ;
   /* *****************************************************/
   /* Quantity must be greater than zero to add a claim item*/
   /* *****************************************************/
  ;
  if (NK0DW-02-NL-CLM-QTY[NK0DW-INDEX] == 0
   && NK0DM100.NK0DM-CLM-QTY[NK0DW-INDEX] == 0)
    set NK0DM100.NK0DM-CLM-QTY[NK0DW-INDEX] bold, modified, cursor;
    converseLib.validationFailed(370);
    NK0DW-ERR-FLAG = "Y";
    return;
  end
  ;
  set VPIITM01 empty;
  set VNCSTY01 empty;
  VPIITM01.NIDIVCID = NK0DW-02-NIDIVCID[NK0DW-INDEX];
  VPIITM01.XGPCD = NK0DW-02-XGPCD[NK0DW-INDEX];
  VPIITM01.SY1STNBR = NK0DW-02-SY1STNBR[NK0DW-INDEX];
  VPIITM01.SY2CLRID = NK0DW-02-SY2CLRID[NK0DW-INDEX];
  VPIITM01.XDMCD = NK0DW-02-XDMCD[NK0DW-INDEX];
  VNCSTY01.NIDIVCID = NK0DW-02-NIDIVCID[NK0DW-INDEX];
  VNCSTY01.SY1STNBR = NK0DW-02-SY1STNBR[NK0DW-INDEX];
  VNCSTY01.SY2CLRID = NK0DW-02-SY2CLRID[NK0DW-INDEX];
  VNCSTY01.XDMCD = NK0DW-02-XDMCD[NK0DW-INDEX];
  NK0DS-SEL-VPIITM01();
  NK0DS-SEL-VNCSTY01();
  NK0DW-02-MULTI-CLM-ITM[NK0DW-INDEX] = NK0DW-MULTI-CLM-ITM;
  ;
  NK0DW-IVC-BAL = NK0DW-IVC-BAL + NK0DW-02-NL-CLM-QTY[NK0DW-INDEX];
  ;
  if (NK0DM100.NK0DM-CLM-QTY[NK0DW-INDEX] > NK0DW-IVC-BAL)
    set NK0DM100.NK0DM-CLM-QTY[NK0DW-INDEX] bold, modified, cursor;
    converseLib.validationFailed(308);
    NK0DW-ERR-FLAG = "Y";
    return;
  end
  ;
  set NK0DM100.NK0DM-CLM-QTY[NK0DW-INDEX] initialAttributes;
  ;
  if (NK0DW-02-NL-CLM-QTY[NK0DW-INDEX] == 0)
    NK0DW-02-NIHNPRC = VPIITM01.NIHNPRC;
    NK0DW-02-OP2LNINB = VPIITM01.OP2LNINB;
    NK0DW-02-XGPCD = NKWREC.XGPCD;
  end
  ;
  NK0DM100.NK0DM-IVC-QTY[NK0DW-INDEX] = NK0DW-IVC-BAL -   NK0DM100.NK0DM-CLM-QTY[NK0DW-INDEX];
  if (VPIITM01.XUMCD in XUMTBL.XUMCD)
    NK0DW-02-CLM-XUMDESC[NK0DW-INDEX] = XUMTBL.XUMDESC[sysVar.arrayIndex];
  end
  NK0DM-IVC-XUMDESC[NK0DW-INDEX] = NK0DW-02-CLM-XUMDESC[NK0DW-INDEX];
  NK0DW-02-NIHNPRC[NK0DW-INDEX] = VPIITM01.NIHNPRC;
  NK0DM100.NK0DM-IVC-PRICE[NK0DW-INDEX] = VPIITM01.NIHNPRC;
  NK0DW-02-NIHNMRC[NK0DW-INDEX] = NK0DW-02-NIHNPRC[NK0DW-INDEX] *   NK0DM100.NK0DM-CLM-QTY[NK0DW-INDEX];
  NK0DM-CLM-AMT[NK0DW-INDEX] = NK0DW-02-NIHNMRC[NK0DW-INDEX];
  ;
end // end NK0DS-EDIT-CLM-QTY

// Edit for duplicate defective
Function NK0DS-EDIT-DUP-DEF()
   /* *****************************************************/
   /* Edit for duplicate defective claim item*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-EDIT-DUP-DEF";
  ;
  set VNCDEF01 empty;
  ;
  if (NK0DM200.SY1STNBR[NK0DW-INDEX] > " ")
    VNCDEF01.NL-CLM-ID = NKWREC.NL-CLM-ID;
    VNCDEF01.XGPCD = NKWREC.XGPCD;
    VNCDEF01.SY1STNBR = NK0DM200.SY1STNBR[NK0DW-INDEX];
    VNCDEF01.SY2CLRID = NK0DM200.SY2CLRID[NK0DW-INDEX];
    VNCDEF01.XDMCD = NK0DM200.XDMCD[NK0DW-INDEX];
    VNCDEF01.FY1FCTYC = NK0DM200.FY1FCTYC[NK0DW-INDEX];
    VNCDEF01.PC3POIDT = NK0DM200.PC3POIDT[NK0DW-INDEX];
    if (NK0DM200.XSNABRV[NK0DW-INDEX] in XSNTBL.XSNABRV)
      VNCDEF01.XSECD = XSNTBL.XSECD[sysVar.arrayIndex];
      VNCDEF01.XSNYR = XSNTBL.XSNYR[sysVar.arrayIndex];
    else
      VNCDEF01.XSECD = " ";
      VNCDEF01.XSNYR = 0;
    end
    ;
    call "IO6480" ("S ", SQLCA, VNCDEF01) {isNoRefresh = yes, isExternal = yes}; /* select clm sty*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
      converseLib.validationFailed(356);
      set NK0DM200.SY1STNBR[NK0DW-INDEX] bold, cursor, modified;
      set NK0DM200.SY2CLRID[NK0DW-INDEX] bold, modified;
      set NK0DM200.XDMCD[NK0DW-INDEX] bold, modified;
      NK0DW-ERR-FLAG = "Y";
      return;
    else
      if (SQLCA.VAGen_SQLCODE == 100)
    /* NEXT SENTENCE*/
      else
        TA1REC.TA1DBASE = "DNILO";
        TA1REC.TA1TBLVU = "VNCDEF01";
        XPNL005(); /* abort routine*/
        return;
      end
    end
  end
  ;
  /* ************************************************************************/
  /* The following will check all newly entered styles to insure the*/
  /* style/invoice comb does not already exsits.  It will not fail if the*/
  /* style from the page and row on the page are in the table.*/
  /* ************************************************************************/
  ;
  /* ************************************************************************/
  /* move style to compare field*/
  /* ************************************************************************/
  ;
  NK0DW-DEF-XGPCD = NKWREC.XGPCD;
  NK0DW-DEF-SY1STNBR = NK0DM200.SY1STNBR[NK0DW-INDEX];
  NK0DW-DEF-SY2CLRID = NK0DM200.SY2CLRID[NK0DW-INDEX];
  NK0DW-DEF-XDMCD = NK0DM200.XDMCD[NK0DW-INDEX];
  NK0DW-DEF-FY1FCTYC = NK0DM200.FY1FCTYC[NK0DW-INDEX];
  NK0DW-DEF-PC3POIDT = NK0DM200.PC3POIDT[NK0DW-INDEX];
  if (NK0DM200.XSNABRV[NK0DW-INDEX] in XSNTBL.XSNABRV)
    NK0DW-DEF-XSECD = XSNTBL.XSECD[sysVar.arrayIndex];
    NK0DW-DEF-XSNYR = XSNTBL.XSNYR[sysVar.arrayIndex];
  else
    NK0DW-DEF-XSECD = " ";
    NK0DW-DEF-XSNYR = 0;
  end
  ;
  /* ************************************************************************/
  /* search array for style*/
  /* ************************************************************************/
  ;
  NK0DW-INDEX-2 = 1;
  NK0DW-STYLE-FOUND = "N";
  ;
  while (NK0DW-INDEX-2 <= 300)
    if (NK0DW-NEW-DEFS[NK0DW-INDEX-2] == NK0DW-MAP-DEF)
      if (NK0DW-INDEX == NK0DW-07-ROW[NK0DW-INDEX-2]
       && NK0DW-NEXT-PAGE-NBR == NK0DW-07-PAGE[NK0DW-INDEX-2])
        NK0DW-STYLE-FOUND = "Y";
      else
        converseLib.validationFailed(356);
        set NK0DM200.SY1STNBR[NK0DW-INDEX] bold, cursor, modified;
        set NK0DM200.SY2CLRID[NK0DW-INDEX] bold, modified;
        set NK0DM200.XDMCD[NK0DW-INDEX] bold, modified;
        NK0DW-ERR-FLAG = "Y";
        return;
      end
    end
    NK0DW-INDEX-2 = NK0DW-INDEX-2 + 1;
    if (NK0DW-INDEX-2 > NK0DW-INDEX-3) /* end of products in array*/
      NK0DW-INDEX-2 = 301;
    end
  end
  ;
  if (NK0DW-STYLE-FOUND == "Y") /* style already in array*/
    return;
  end
  ;
   /* At this point the style will be added to the new style arrary.*/
   /* The style/invoice comb have passed all edit except for the quantity.*/
  ;
  NK0DW-INDEX-3 = NK0DW-INDEX-3 + 1;
  NK0DW-07-XGPCD[NK0DW-INDEX-3] = NKWREC.XGPCD;
  NK0DW-07-SY1STNBR[NK0DW-INDEX-3] = NK0DM200.SY1STNBR[NK0DW-INDEX];
  NK0DW-07-SY2CLRID[NK0DW-INDEX-3] = NK0DM200.SY2CLRID[NK0DW-INDEX];
  NK0DW-07-XDMCD[NK0DW-INDEX-3] = NK0DM200.XDMCD[NK0DW-INDEX];
  NK0DW-07-FY1FCTYC[NK0DW-INDEX-3] = NK0DM200.FY1FCTYC[NK0DW-INDEX];
  NK0DW-07-PC3POIDT[NK0DW-INDEX-3] = NK0DM200.PC3POIDT[NK0DW-INDEX];
  if (NK0DM200.XSNABRV[NK0DW-INDEX] in XSNTBL.XSNABRV)
    NK0DW-07-XSECD[NK0DW-INDEX-3] = XSNTBL.XSECD[sysVar.arrayIndex];
    NK0DW-07-XSNYR[NK0DW-INDEX-3] = XSNTBL.XSNYR[sysVar.arrayIndex];
  else
    NK0DW-07-XSECD[NK0DW-INDEX-3] = " ";
    NK0DW-07-XSNYR[NK0DW-INDEX-3] = 0;
  end
  NK0DW-07-PAGE[NK0DW-INDEX-3] = NK0DW-NEXT-PAGE-NBR;
  NK0DW-07-ROW[NK0DW-INDEX-3] = NK0DW-INDEX;
end // end NK0DS-EDIT-DUP-DEF

// Edit for duplicate style
Function NK0DS-EDIT-DUP-STY()
   /* *****************************************************/
   /* Edit for duplicate style on claim*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-EDIT-DUP-STY";
  ;
  ;
  VNCSTY01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  VNCSTY01.NIDIVCID = NK0DM100.NIDIVCID[NK0DW-INDEX];
  VNCSTY01.OP2LNINB = VPIITM01.OP2LNINB;
  VNCSTY01.XGPCD = VPIITM01.XGPCD;
  VNCSTY01.SY1STNBR = VPIITM01.SY1STNBR;
  VNCSTY01.SY2CLRID = VPIITM01.SY2CLRID;
  VNCSTY01.XDMCD = VPIITM01.XDMCD;
  VNCSTY01.XQACD = VPIITM01.XQACD;
  VNCSTY01.PC3PONBR = 0;

  ;
  call "IO6470" ("S ", SQLCA, VNCSTY01) {isNoRefresh = yes, isExternal = yes}; /* select clm sty*/
  ;
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    converseLib.validationFailed(307);
    set NK0DM100.SY1STNBR[NK0DW-INDEX] bold, cursor, modified;
    set NK0DM100.SY2CLRID[NK0DW-INDEX] bold, modified;
    set NK0DM100.XDMCD[NK0DW-INDEX] bold, modified;
    NK0DW-ERR-FLAG = "Y";
    return;
  else
    if (SQLCA.VAGen_SQLCODE == 100)
    /* NEXT SENTENCE*/
    else
      TA1REC.TA1DBASE = "DNILO";
      TA1REC.TA1TBLVU = "VNCSTY01";
      NK0DW-LRG-NBR = VNCSTY01.NIDIVCID;
      NK0DW-CHR-KEY = VNCSTY01.SY1STNBR;
      move NK0DW-KEY to TA1TBLKE withV60Compat;
      XPNL005(); /* abort routine*/
      return;
    end
  end
  ;
   /* The following will check all newly entered styles to insure the*/
   /* style/invoice comb does not already exsits.  It will not fail if the*/
   /* style from the page and row on the page are in the table.*/
  ;
  NK0DW-MAP-IVC = NK0DM100.NIDIVCID[NK0DW-INDEX];
  NK0DW-MAP-STY = NK0DM100.SY1STNBR[NK0DW-INDEX];
  NK0DW-MAP-CLR = NK0DM100.SY2CLRID[NK0DW-INDEX];
  NK0DW-MAP-DIM = NK0DM100.XDMCD[NK0DW-INDEX];
  NK0DW-INDEX-2 = 1;
  while (NK0DW-INDEX-2 <= 300)
    if (NK0DW-NEW-PRODS[NK0DW-INDEX-2] == NK0DW-MAP-PROD)
      if (NK0DW-INDEX == NK0DW-ROW[NK0DW-INDEX-2]
       && NK0DW-NEXT-PAGE-NBR == NK0DW-PAGE[NK0DW-INDEX-2])
        /* NEXT SENTENCE*/
      else
        converseLib.validationFailed(307);
        set NK0DM100.SY1STNBR[NK0DW-INDEX] bold, cursor, modified;
        set NK0DM100.SY2CLRID[NK0DW-INDEX] bold, modified;
        set NK0DM100.XDMCD[NK0DW-INDEX] bold, modified;
        NK0DW-ERR-FLAG = "Y";
      end
      return;
    end
    NK0DW-INDEX-2 = NK0DW-INDEX-2 + 1;
  end
  ;
   /* At this point the style will be added to the new style arrary.*/
   /* The style/invoice comb have passed all edit except for the quantity.*/
  ;
  NK0DW-INDEX-3 = NK0DW-INDEX-3 + 1;
  NK0DW-INVOICE[NK0DW-INDEX-3] = NK0DM100.NIDIVCID[NK0DW-INDEX];
  NK0DW-STYLE[NK0DW-INDEX-3] = NK0DM100.SY1STNBR[NK0DW-INDEX];
  NK0DW-COLOR[NK0DW-INDEX-3] = NK0DM100.SY2CLRID[NK0DW-INDEX];
  NK0DW-DIM[NK0DW-INDEX-3] = NK0DM100.XDMCD[NK0DW-INDEX];
  NK0DW-PAGE[NK0DW-INDEX-3] = NK0DW-NEXT-PAGE-NBR;
  NK0DW-ROW[NK0DW-INDEX-3] = NK0DW-INDEX;
end // end NK0DS-EDIT-DUP-STY

// Edit entered invoice id
Function NK0DS-EDIT-IVC()
   /* *****************************************************/
   /* Edit Invoice*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-EDIT-IVC";
  ;
  set VPIHDR01 empty;
  VPIHDR01.NIDIVCID = NK0DM100.NIDIVCID[NK0DW-INDEX];
  ;
  if (NK0DM100.NIDIVCID[NK0DW-INDEX] > 199999
   && NK0DM100.NIDIVCID[NK0DW-INDEX] < 800000) /* not a commr ivc*/
    converseLib.validationFailed(368);
    set NK0DM100.NIDIVCID[NK0DW-INDEX] bold, cursor, modified;
    NK0DW-ERR-FLAG = "Y";
    return;
  end
  call "IO4470" ("S ", SQLCA, VPIHDR01) {isNoRefresh = yes, isExternal = yes}; /* select ivc hdr*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* NEXT SENTENCE*/
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(303);
      set NK0DM100.NIDIVCID[NK0DW-INDEX] bold, cursor, modified;
      NK0DW-ERR-FLAG = "Y";
      return;
    else
      TA1REC.TA1DBASE = "DNILO";
      TA1REC.TA1TBLVU = "VPIHDR01";
      NK0DW-LRG-NBR = VPIHDR01.NIDIVCID;
      move NK0DW-KEY to TA1TBLKE withV60Compat;
      XPNL005(); /* abort routine*/
      return;
    end
  end
  ;
  /* ************************************************************************/
  /* Edit the customer id make sure the invoice was issued to the claim*/
  /* customer.  Also edit the invoice status, no credit may be issued to*/
  /* voided invoices*/
  /* ************************************************************************/
  ;
  if (VPIHDR01.KUCCOID != NKWREC.KUCCOID)
    converseLib.validationFailed(283);
    set NK0DM100.NIDIVCID[NK0DW-INDEX] bold, cursor, modified;
    NK0DW-ERR-FLAG = "Y";
    return;
  end
  ;
  if (VPIHDR01.ZISCD == "VD")
    converseLib.validationFailed(350);
    set NK0DM100.NIDIVCID[NK0DW-INDEX] bold, cursor, modified;
    NK0DW-ERR-FLAG = "Y";
    return;
  end
  /* ************************************************************************/
  /* Edit the GPC of the invoice, must be the same as on the claim*/
  /* ************************************************************************/
  ;
  VPIITM01.NIDIVCID = NK0DM100.NIDIVCID[NK0DW-INDEX];
  VPIITM01.SY1STNBR = "******";
  VPIITM01.SY2CLRID = "***";
  VPIITM01.XDMCD = "**";
  VPIITM01.XGPCD = "**";
  VPIITM01.XQACD = "**";
  ;
   /* open cursor on - VNCSTY01*/
  ;
  call "IO4480" ("S1", SQLCA, VPIITM01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VPIITM01";
    NK0DW-LRG-NBR = VNCSTY01.NIDIVCID;
    NK0DW-CHR-KEY = VNCSTY01.SY1STNBR;
    move NK0DW-KEY to TA1TBLKE withV60Compat;
    XPNL005(); /* abort routine*/
  end
  ;
  call "IO4480" ("N1", SQLCA, VPIITM01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/
  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100) /* if a good return,*/
        /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VPIITM01";
    NK0DW-LRG-NBR = VNCSTY01.NIDIVCID;
    NK0DW-CHR-KEY = VNCSTY01.SY1STNBR;
    move NK0DW-KEY to TA1TBLKE withV60Compat;
    XPNL005(); /* abort routine*/
  end
  ;
  call "IO4480" ("C1", SQLCA, VPIITM01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VPIITM01";
    NK0DW-LRG-NBR = VNCSTY01.NIDIVCID;
    NK0DW-CHR-KEY = VNCSTY01.SY1STNBR;
    move NK0DW-KEY to TA1TBLKE withV60Compat;
    XPNL005(); /* abort routine*/
  end
  if (VPIITM01.XGPCD == NKWREC.XGPCD)
    /* next sentence*/
  else
    converseLib.validationFailed(327);
    set NK0DM100.NIDIVCID[NK0DW-INDEX] bold, cursor, modified;
    NK0DW-ERR-FLAG = "Y";
    return;
  end
  ;
  NK0DW-REC-GLAENT = VPIHDR01.NIEENT1;
  NK0DW-REC-GLARCID = VPIHDR01.NIERCID1;
  NK0DW-REC-GLANTAC = VPIHDR01.NIENTAC1;
  NK0DW-REC-GLASUB = VPIHDR01.NIESUB1;
  NK0DW-REC-GLAPRJ = VPIHDR01.NIEPRJ1;
  NK0DW-SLS-GLAENT = VPIHDR01.NIEENT2;
  NK0DW-SLS-GLARCID = VPIHDR01.NIERCID2;
  NK0DW-SLS-GLANTAC = VPIHDR01.NIENTAC2;
  NK0DW-SLS-GLASUB = VPIHDR01.NIESUB2;
  NK0DW-SLS-GLAPRJ = VPIHDR01.NIEPRJ2;
  ;
    /* move the gl codes of the first style of a new claim to working*/
    /* storage*/
  ;
  if (NKW-REC-GLAENT == " ")
    NKW-REC-GLAENT = VPIHDR01.NIEENT1;
    NKW-REC-GLARCID = VPIHDR01.NIERCID1;
    NKW-REC-GLANTAC = VPIHDR01.NIENTAC1;
    NKW-REC-GLASUB = VPIHDR01.NIESUB1;
    NKW-REC-GLAPRJ = VPIHDR01.NIEPRJ1;
    if (VNCHDR01.OP1CMPNB == 0)
      NKWREC.OP1CMPNB = VPIHDR01.OP1CMPNB;
    end
  end
  if (VPIHDR01.OP1CMPNB != NKWREC.OP1CMPNB) /* if no match;*/
    set NK0DM100.NIDIVCID[NK0DW-INDEX] bold, cursor, modified;
    converseLib.validationFailed(412);
    NK0DW-ERR-FLAG = "Y";
    return;
  end
  if (NKW-SLS-GLAENT == " ")
    NKW-SLS-GLAENT = VPIHDR01.NIEENT2;
    NK0DM100.GLAENT = VPIHDR01.NIEENT2;
    NKW-SLS-GLARCID = VPIHDR01.NIERCID2;
    NK0DM100.GLARCID = VPIHDR01.NIERCID2;
    NKW-SLS-GLANTAC = VPIHDR01.NIENTAC2;
    NK0DM100.GLANTAC = VPIHDR01.NIENTAC2;
    NKW-SLS-GLASUB = VPIHDR01.NIESUB2;
    NK0DM100.GLASUB = VPIHDR01.NIESUB2;
    NKW-SLS-GLAPRJ = VPIHDR01.NIEPRJ2;
    NK0DM100.GLAPRJ = VPIHDR01.NIEPRJ2;
  end
  ;
  if (NK0DW-RECEIVABLE-GL != NKW-REC-GL-CD)
    converseLib.validationFailed(304);
    set NK0DM100.NIDIVCID[NK0DW-INDEX] bold, cursor, modified;
    NK0DW-ERR-FLAG = "Y";
    return;
  end
  ;
  if (NK0DW-SALES-GL != NKW-SLS-GL-CD)
    converseLib.validationFailed(305);
    set NK0DM100.NIDIVCID[NK0DW-INDEX] bold, cursor, modified;
    NK0DW-ERR-FLAG = "Y";
    return;
  end
  ;
  set NK0DM100.NIDIVCID[NK0DW-INDEX] initialAttributes;
  NK0DW-02-NIDIVCID[NK0DW-INDEX] = NK0DM100.NIDIVCID[NK0DW-INDEX];
end // end NK0DS-EDIT-IVC

// Edit the season
Function NK0DS-EDIT-SEASON()
  /* ************************************************************************/
  /* Edit STYLE*/
  /* ************************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-EDIT-SEASON";
  ;
  if (NK0DW-MOD-XSNABRV[NK0DW-INDEX] == "Y")
    if (NK0DM200.XSNABRV[NK0DW-INDEX] > " ")
      if (NK0DM200.XSNABRV[NK0DW-INDEX] in XSNTBL.XSNABRV)
        set NK0DM200.XSNABRV[NK0DW-INDEX] initialAttributes;
        NK0DW-06-XSECD[NK0DW-INDEX] = XSNTBL.XSECD[sysVar.arrayIndex];
        NK0DW-06-XSNYR[NK0DW-INDEX] = XSNTBL.XSNYR[sysVar.arrayIndex];
        if (NKWREC.XGPCD == "02") /* DATE EDIT NOT NEEDED ON 02*/
          return;
        end
      else
        set NK0DM200.XSNABRV[NK0DW-INDEX] modified, bold, cursor;
        NK0DW-ERR-FLAG = "Y";
        converseLib.validationFailed(328);
        return;
      end
    else
      set NK0DM200.XSNABRV[NK0DW-INDEX] initialAttributes;
      return;
    end
  /* ************************************************************************/
  /* Edit the season date for pricing*/
  /* ************************************************************************/
    ;
    if (XSNTBL.XSNBDT[sysVar.arrayIndex] > 0
     || XSNTBL.XSN-NIL-APRL-BDT > 0)
     /* next sentence*/
    else
      set NK0DM200.XSNABRV[NK0DW-INDEX] modified, bold, cursor;
      NK0DW-ERR-FLAG = "Y";
      converseLib.validationFailed(381);
    end
  end
end // end NK0DS-EDIT-SEASON

// Edit Sales GL code
Function NK0DS-EDIT-SLS-GL()
   /* *****************************************************/
   /* Edit the sales gl code if changed*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-EDIT-SLS-GL";
  ;
  /* ************************************************************************/
  /* set flag for if sales gl code changed nk0dw-sls-gl-chg*/
  /* ************************************************************************/
  ;
  call "IO1610" ("S2", SQLCA, VSTYGL01) {isNoRefresh = yes, isExternal = yes}; /* open cursor*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VSTYGL01";
    TA1REC.TA1TBLKE = NK0DW-SALES-GL;
    XPNL005(); /* abort routine*/
  end
  ;
  call "IO1610" ("N2", SQLCA, VSTYGL01) {isNoRefresh = yes, isExternal = yes}; /* open cursor*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0)
    NK0DW-SLS-GL-CHG = "Y";
    NKW-SLS-GLAENT = VSTYGL01.NIEENT1;
    NKW-SLS-GLARCID = VSTYGL01.NIERCID1;
    NKW-SLS-GLANTAC = VSTYGL01.NIENTAC1;
    NKW-SLS-GLASUB = VSTYGL01.NIESUB1;
    NKW-SLS-GLAPRJ = VSTYGL01.NIEPRJ1;
    if (NKWREC.XXX-SUM-ZCR-CD == "DF")
      set NK0DM200.GLAENT initialAttributes;
      set NK0DM200.GLARCID initialAttributes;
      set NK0DM200.GLANTAC initialAttributes;
      set NK0DM200.GLASUB initialAttributes;
      set NK0DM200.GLAPRJ initialAttributes;
    else
      set NK0DM100.GLAENT initialAttributes;
      set NK0DM100.GLARCID initialAttributes;
      set NK0DM100.GLANTAC initialAttributes;
      set NK0DM100.GLASUB initialAttributes;
      set NK0DM100.GLAPRJ initialAttributes;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      ;
      /* ******************************************************************/
      /* try with out the entity id*/
      /* ********************************************************************/
      ;
      call "IO1610" ("C2", SQLCA, VSTYGL01) {isNoRefresh = yes, isExternal = yes}; /* open cursor*/
      ;
      if (SQLCA.VAGen_SQLCODE == 0)
       /* next sentence*/
      else
        TA1REC.TA1DBASE = "DNILO";
        TA1REC.TA1TBLVU = "VSTYGL01";
        TA1REC.TA1TBLKE = NK0DW-SALES-GL;
        XPNL005(); /* abort routine*/
      end
      ;
      if (NKWREC.XXX-SUM-ZCR-CD == "DF")
        NKW-SLS-GLAENT = NK0DM200.GLAENT;
      else
        NKW-SLS-GLAENT = NK0DM100.GLAENT;
      end
      ;
       /* try the GLA table, if found it is okay to use the gl code*/
      ;
      set VNLGLA01 empty;
      if (NKWREC.XXX-SUM-ZCR-CD == "DF")
        VNLGLA01.GLAENT = NK0DM200.GLAENT;
        VNLGLA01.GLARCID = NK0DM200.GLARCID;
        VNLGLA01.GLANTAC = NK0DM200.GLANTAC;
        VNLGLA01.GLASUB = NK0DM200.GLASUB;
        VNLGLA01.GLAPRJ = NK0DM200.GLAPRJ;
      else
        VNLGLA01.GLAENT = NK0DM100.GLAENT;
        VNLGLA01.GLARCID = NK0DM100.GLARCID;
        VNLGLA01.GLANTAC = NK0DM100.GLANTAC;
        VNLGLA01.GLASUB = NK0DM100.GLASUB;
        VNLGLA01.GLAPRJ = NK0DM100.GLAPRJ;
      end
      NK0DS-S-VNLGLA01();
      if (SQLCA.VAGen_SQLCODE == 0)
        NK0DW-SLS-GL-CHG = "Y";
        NKW-SLS-GLARCID = VSTYGL01.NIERCID1;
        NKW-SLS-GLANTAC = VSTYGL01.NIENTAC1;
        NKW-SLS-GLASUB = VSTYGL01.NIESUB1;
        NKW-SLS-GLAPRJ = VSTYGL01.NIEPRJ1;
        if (NKWREC.XXX-SUM-ZCR-CD == "DF")
          set NK0DM200.GLAENT initialAttributes;
          set NK0DM200.GLARCID initialAttributes;
          set NK0DM200.GLANTAC initialAttributes;
          set NK0DM200.GLASUB initialAttributes;
          set NK0DM200.GLAPRJ initialAttributes;
        else
          set NK0DM100.GLAENT initialAttributes;
          set NK0DM100.GLARCID initialAttributes;
          set NK0DM100.GLANTAC initialAttributes;
          set NK0DM100.GLASUB initialAttributes;
          set NK0DM100.GLAPRJ initialAttributes;
        end
      else
        if (NKWREC.XXX-SUM-ZCR-CD == "DF")
          set NK0DM200.GLAENT cursor, bold, modified;
          set NK0DM200.GLARCID bold, modified;
          set NK0DM200.GLANTAC bold, modified;
          set NK0DM200.GLASUB bold, modified;
          set NK0DM200.GLAPRJ bold, modified;
        else
          set NK0DM100.GLAENT cursor, bold, modified;
          set NK0DM100.GLARCID bold, modified;
          set NK0DM100.GLANTAC bold, modified;
          set NK0DM100.GLASUB bold, modified;
          set NK0DM100.GLAPRJ bold, modified;
        end
        converseLib.validationFailed(339);
        NLXREC.NLXERRF = "Y";
      end
      return;
    end
    ;
    call "IO1610" ("C2", SQLCA, VSTYGL01) {isNoRefresh = yes, isExternal = yes}; /* open cursor*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0)
      /* next sentence*/
    else
      TA1REC.TA1DBASE = "DNILO";
      TA1REC.TA1TBLVU = "VSTYGL01";
      TA1REC.TA1TBLKE = NK0DW-SALES-GL;
      XPNL005(); /* abort routine*/
    end
  end
  ;
end // end NK0DS-EDIT-SLS-GL

// Edit entered STYLE
Function NK0DS-EDIT-STYLE()
   /* *****************************************************/
   /* Edit STYLE*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-EDIT-STYLE";
  ;
  set PG2REC empty;
  ;
  PG2REC.XGPCD = NKWREC.XGPCD;
  if (NKWREC.XXX-SUM-ZCR-CD == "PR")
    PG2REC.SY1STNBR = NK0DM100.SY1STNBR[NK0DW-INDEX];
    PG2REC.SY2CLRID = NK0DM100.SY2CLRID[NK0DW-INDEX];
    PG2REC.XDMCD = NK0DM100.XDMCD[NK0DW-INDEX];
  else
    PG2REC.SY1STNBR = NK0DM200.SY1STNBR[NK0DW-INDEX];
    PG2REC.SY2CLRID = NK0DM200.SY2CLRID[NK0DW-INDEX];
    PG2REC.XDMCD = NK0DM200.XDMCD[NK0DW-INDEX];
  end
  ;
  call "IO3120" ("S ", SQLCA, PG2REC) {isNoRefresh = yes, isExternal = yes}; /* select ivc hdr*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    if (NKWREC.XXX-SUM-ZCR-CD == "PR")
      set NK0DM100.SY1STNBR[NK0DW-INDEX] initialAttributes;
      set NK0DM100.SY2CLRID[NK0DW-INDEX] initialAttributes;
      set NK0DM100.XDMCD[NK0DW-INDEX] initialAttributes;
    else
      set NK0DM200.SY1STNBR[NK0DW-INDEX] initialAttributes;
      set NK0DM200.SY2CLRID[NK0DW-INDEX] initialAttributes;
      set NK0DM200.XDMCD[NK0DW-INDEX] initialAttributes;
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100)
      converseLib.validationFailed(27);
      if (NKWREC.XXX-SUM-ZCR-CD == "PR")
        set NK0DM100.SY1STNBR[NK0DW-INDEX] bold, cursor, modified;
        set NK0DM100.SY2CLRID[NK0DW-INDEX] bold, modified;
        set NK0DM100.XDMCD[NK0DW-INDEX] bold, modified;
      else
        set NK0DM200.SY1STNBR[NK0DW-INDEX] bold, cursor, modified;
        set NK0DM200.SY2CLRID[NK0DW-INDEX] bold, modified;
        set NK0DM200.XDMCD[NK0DW-INDEX] bold, modified;
      end
      NK0DW-ERR-FLAG = "Y";
      return;
    else
      TA1REC.TA1DBASE = "DPRODG";
      TA1REC.TA1TBLVU = "VSYCLR01";
      move PG2KEY to TA1TBLKE withV60Compat;
      XPNL005(); /* abort routine*/
      return;
    end
  end
end // end NK0DS-EDIT-STYLE

// Get claims gpc for fast path
Function NK0DS-GET-NKW-GPC()
   /* *****************************************************/
   /* Select invoice item*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-GET-NKW-GPC";
  ;
  if (NKWREC.XXX-SUM-ZCR-CD == "PR")
    XSNKS-SET-XGPCD();
  else
    NK0DS-S1-VNCDEF01();
    NK0DS-N1-VNCDEF01();
    if (SQLCA.VAGen_SQLCODE == 0)
      NKWREC.XGPCD = VNCDEF01.XGPCD;
    end
    NK0DS-C1-VNCDEF01();
  end
  if (NKWREC.XGPCD == " ") /* no items found;*/
    NKWREC.NKW-MSG-NBR = 303;
    COMMAREA.CATOAP = "NK0B";
    COMMAREA.CAUSERA = NKWREC.NKW-GROUP;
    XPNL002();
    return;
  end
  ;
   /* open cursor on - VNCSTY01*/
  ;
  call "IO4480" ("S1", SQLCA, VPIITM01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VPIITM01";
    NK0DW-LRG-NBR = VNCSTY01.NIDIVCID;
    NK0DW-CHR-KEY = VNCSTY01.SY1STNBR;
    move NK0DW-KEY to TA1TBLKE withV60Compat;
    XPNL005(); /* abort routine*/
  end
  ;
  while (SQLCA.VAGen_SQLCODE == 0)
    call "IO4480" ("N1", SQLCA, VPIITM01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
      NK0DW-IVC-BAL = NK0DW-IVC-BAL + NIHSHPQT;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* if a good return,*/
        /* next sentence*/
      else
        TA1REC.TA1DBASE = "DNILO";
        TA1REC.TA1TBLVU = "VPIITM01";
        NK0DW-LRG-NBR = VNCSTY01.NIDIVCID;
        NK0DW-CHR-KEY = VNCSTY01.SY1STNBR;
        move NK0DW-KEY to TA1TBLKE withV60Compat;
        XPNL005(); /* abort routine*/
      end
    end
  end
  ;
  call "IO4480" ("C1", SQLCA, VPIITM01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VPIITM01";
    NK0DW-LRG-NBR = VNCSTY01.NIDIVCID;
    NK0DW-CHR-KEY = VNCSTY01.SY1STNBR;
    move NK0DW-KEY to TA1TBLKE withV60Compat;
    XPNL005(); /* abort routine*/
  end
end // end NK0DS-GET-NKW-GPC

// This process gets comp-id
Function NK0DS-GET-OP1CMPNB()
  if (NKWREC.XXX-SUM-ZCR-CD == "PR")
    NK0DS-S1-VNCSTY01();
    NK0DS-N1-VNCSTY01();
    if (SQLCA.VAGen_SQLCODE == 100) /* no items found*/
      set VPIHDR01 empty;
      VPIHDR01.NIDIVCID = NK0DM100.NIDIVCID[NK0DW-INDEX];
      NK0DS-S-VPIHDR01(); /* get invoice co-comp-cu-id*/
      if (VNCHDR01.OP1CMPNB == 0)
        NKWREC.OP1CMPNB = VPIHDR01.OP1CMPNB;
      end
    end
    NK0DS-C1-VNCSTY01();
  end
end // end NK0DS-GET-OP1CMPNB

// Get m200 temp storage
Function NK0DS-GET-TMP-DEF()
   /* ***********************************************************************/
   /*  */
   /* Get temp storage for current page*/
   /*  */
   /* ***********************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-GET-TMP-STG";
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  ;
  move NK0DW-W03-SIZE to NK0DW-06-LENGTH withV60Compat;
  TA5REC.TA5TSQIX = NK0DW-NEXT-PAGE-NBR; /* Page number to fetch*/
  ;
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (NK0DW06, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  else
    ;
   /* ------------------------------------------------------------*/
    /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
    ;
    converseLib.validationFailed(299); /* Indicate system error*/
    ;
    XPNL-006(); /* abend routine*/
    ;
  end
  ;
end // end NK0DS-GET-TMP-DEF

// Get m100 temp storage
Function NK0DS-GET-TMP-STG()
   /* ***********************************************************************/
   /*  */
   /* Get temp storage for current page*/
   /*  */
   /* ***********************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-GET-TMP-STG";
  TA1REC.TA1LOC = "NK0DS-GET-TMP-STG";
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  ;
  move NK0DW-W02-SIZE to NK0DW-02-LENGTH withV60Compat;
  TA5REC.TA5TSQIX = NK0DW-NEXT-PAGE-NBR; /* Page number to fetch*/
  ;
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (NK0DW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  else
    ;
   /* ------------------------------------------------------------*/
    /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
    ;
    converseLib.validationFailed(299); /* Indicate system error*/
    ;
    XPNL-006(); /* abend routine*/
    ;
  end
  ;
end // end NK0DS-GET-TMP-STG

// Set mod flags for Map 200
Function NK0DS-M200-MOD-FLS()
  /* ************************************************************************/
  /* Set map modified flags for fields where pop map is conversed*/
  /* ************************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-M200-MOD-FLS";
  ;
  if (NK0DM200.NK0DM-FM-PAGE is modified)
    NK0DW-PAGE-MOD-FL = "Y";
  end
  ;
  if (NK0DM200.GLAENT is modified
   || NK0DM200.GLARCID is modified
   || NK0DM200.GLANTAC is modified
   || NK0DM200.GLASUB is modified
   || NK0DM200.GLAPRJ is modified)
    set NK0DM200.GLAENT initialAttributes;
    set NK0DM200.GLARCID initialAttributes;
    set NK0DM200.GLANTAC initialAttributes;
    set NK0DM200.GLASUB initialAttributes;
    set NK0DM200.GLAPRJ initialAttributes;
    NK0DW-SLS-GL-MOD-FL = "Y";
  end
  ;
  NK0DW-INDEX = 1;
  while (NK0DW-INDEX <= 12)
    if (NK0DM200.SY1STNBR[NK0DW-INDEX] is modified)
      NK0DW-MOD-SY1STNBR[NK0DW-INDEX] = "Y";
      set NK0DM200.SY1STNBR[NK0DW-INDEX] initialAttributes;
    end
    if (NK0DM200.SY2CLRID[NK0DW-INDEX] is modified)
      NK0DW-MOD-SY2CLRID[NK0DW-INDEX] = "Y";
      set NK0DM200.SY2CLRID[NK0DW-INDEX] initialAttributes;
    end
    if (NK0DM200.XDMCD[NK0DW-INDEX] is modified)
      NK0DW-MOD-XDMCD[NK0DW-INDEX] = "Y";
      set NK0DM200.XDMCD[NK0DW-INDEX] initialAttributes;
    end
    if (NK0DM200.NK0DM-200-QTY[NK0DW-INDEX] is modified)
      NK0DW-MOD-QTY[NK0DW-INDEX] = "Y";
      set NK0DM200.NK0DM-200-QTY[NK0DW-INDEX] initialAttributes;
    end
    if (NK0DM200.XSNABRV[NK0DW-INDEX] is modified)
      NK0DW-MOD-XSNABRV[NK0DW-INDEX] = "Y";
      set NK0DM200.XSNABRV[NK0DW-INDEX] initialAttributes;
    end
    if (NK0DM200.FY1FCTYC[NK0DW-INDEX] is modified)
      NK0DW-MOD-FY1FCTYC[NK0DW-INDEX] = "Y";
      set NK0DM200.FY1FCTYC[NK0DW-INDEX] initialAttributes;
    end
    if (NK0DM200.PC3POIDT[NK0DW-INDEX] is modified)
      NK0DW-MOD-PC3POIDT[NK0DW-INDEX] = "Y";
      set NK0DM200.PC3POIDT[NK0DW-INDEX] initialAttributes;
    end
    if (NK0DM200.XUMDESC[NK0DW-INDEX] is modified)
      NK0DW-MOD-XUMDESC[NK0DW-INDEX] = "Y";
      set NK0DM200.XUMDESC[NK0DW-INDEX] initialAttributes;
    end
    if (NK0DM200.NK0DM-200-PRC[NK0DW-INDEX] is modified)
      NK0DW-MOD-PRC[NK0DW-INDEX] = "Y";
      set NK0DM200.NK0DM-200-PRC[NK0DW-INDEX] initialAttributes;
    end
    NK0DW-INDEX = NK0DW-INDEX + 1;
  end
  ;
end // end NK0DS-M200-MOD-FLS

// Display pop-up windows map200
Function NK0DS-M200-POP-UPS()
   /* *****************************************************/
   /* Process all POP-UP window requests*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0D-M200-POP-UPS";
  NK0DW-INDEX = 12;
  ;
   /* *****************************************************/
   /* Process all GPC code pop-up request*/
   /* *****************************************************/
  ;
  while (NK0DW-INDEX >= 1)
    if (NK0DM200.XSNABRV[NK0DW-INDEX] == "?")
      NLXREC.NLXERRF = "Y";
      XPXX001();
      while (XX0XW02.XX0XWEND == "N")
        XPXSN01();
      end
      set NK0DM200.XSNABRV[NK0DW-INDEX] cursor, modified;
      if (XX0XW02.XX0XWPIX > 0)
        NK0DM200.XSNABRV[NK0DW-INDEX] = XSNTBL.XSNABRV[XX0XWPIX];
      else
        NK0DM200.XSNABRV[NK0DW-INDEX] = "     ";
      end
    end
    ;
    if (NK0DM200.XUMDESC[NK0DW-INDEX] == "?")
      NLXREC.NLXERRF = "Y";
      XPXX001();
      while (XX0XW02.XX0XWEND == "N")
        XPXUM01();
      end
      set NK0DM200.XUMDESC[NK0DW-INDEX] cursor, modified;
      if (XX0XW02.XX0XWPIX > 0)
        NK0DM200.XUMDESC[NK0DW-INDEX] = XUMTBL.XUMDESC[XX0XWPIX];
      else
        NK0DM200.XUMDESC[NK0DW-INDEX] = "     ";
      end
    end
    NK0DW-INDEX = NK0DW-INDEX - 1;
  end
  ;
end // end NK0DS-M200-POP-UPS

// Set map to inquiry mode
Function NK0DS-MAP100-MODE()
  /* ************************************************************************/
  /* Set map to an inquiry mode*/
  /* ************************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-SET-INQ-MODE";
  NK0DW-INDEX = 1;
  ;
  /* ************************************************************************/
  /* If from invoicing, set map to inquiry only*/
  /* ************************************************************************/
  ;
  if (NKW-FROM-APP == "NK0G")
    NKW-MAP-MODE = "I";
  end
  if (NKW-MAP-MODE == "I") /* Inquiry only*/
    while (NK0DW-INDEX < 13)
      set NK0DM100.SY1STNBR[NK0DW-INDEX] skip;
      set NK0DM100.SY2CLRID[NK0DW-INDEX] skip;
      set NK0DM100.XDMCD[NK0DW-INDEX] skip;
      set NK0DM100.NK0DM-CLM-QTY[NK0DW-INDEX] skip;
      set NK0DM100.NIDIVCID[NK0DW-INDEX] skip;
      NK0DW-INDEX = NK0DW-INDEX + 1;
    end
  end
  ;
   /* Protect G/L code, except for accounting and credit.  Account is*/
   /* CACLVL(4) and credit is CACLVL(3). GL codes are changable until*/
   /* the final has printed. *** Alow accounting "unlimited" update,*/
   /* except for voids, and limit credit to NON-active/void statuses.*/
  ;
  if (CACLVL[4] == "Y")
    if (VNCHDR01.ZCS-CLM-STAT-CD == "VD")
      set NK0DM100.GLAENT skip;
      set NK0DM100.GLARCID skip;
      set NK0DM100.GLANTAC skip;
      set NK0DM100.GLASUB skip;
      set NK0DM100.GLAPRJ skip;
    end
  else
    if (CACLVL[3] == "Y")
      if (VNCHDR01.ZCS-CLM-STAT-CD == "AC"
       || VNCHDR01.ZCS-CLM-STAT-CD == "RP"
       || VNCHDR01.ZCS-CLM-STAT-CD == "VD")
        set NK0DM100.GLAENT skip;
        set NK0DM100.GLARCID skip;
        set NK0DM100.GLANTAC skip;
        set NK0DM100.GLASUB skip;
        set NK0DM100.GLAPRJ skip;
      end
    else
      set NK0DM100.GLAENT skip;
      set NK0DM100.GLARCID skip;
      set NK0DM100.GLANTAC skip;
      set NK0DM100.GLASUB skip;
      set NK0DM100.GLAPRJ skip;
    end
  end
  ;
   /* screen is now set for inquiry users*/
  ;
  if (NKW-MAP-MODE == "I") /* Inquiry only*/
    set NK0DM100.CATOAP cursor;
    return;
  end
  ;
  NK0DW-INDEX = 12;
  while (NK0DW-INDEX > 0)
    if (NK0DW-02-NL-CLM-QTY[NK0DW-INDEX] > 0)
      set NK0DM100.NK0DM-CLM-QTY[NK0DW-INDEX] cursor;
      set NK0DM100.NIDIVCID[NK0DW-INDEX] skip;
      if (NK0DW-02-MULTI-CLM-ITM[NK0DW-INDEX] == "Y")
        set NK0DM100.SY1STNBR[NK0DW-INDEX] skip, bold;
        set NK0DM100.SY2CLRID[NK0DW-INDEX] skip, bold;
        set NK0DM100.XDMCD[NK0DW-INDEX] skip, bold;
        converseLib.validationFailed(321);
      else
        set NK0DM100.SY1STNBR[NK0DW-INDEX] skip;
        set NK0DM100.SY2CLRID[NK0DW-INDEX] skip;
        set NK0DM100.XDMCD[NK0DW-INDEX] skip;
      end
    else
      set NK0DM100.NK0DM-CLM-QTY[NK0DW-INDEX] initialAttributes;
      set NK0DM100.NIDIVCID[NK0DW-INDEX] initialAttributes;
      if (NK0DW-02-MULTI-CLM-ITM[NK0DW-INDEX] == "Y")
        set NK0DM100.SY1STNBR[NK0DW-INDEX] modified, bold;
        set NK0DM100.SY2CLRID[NK0DW-INDEX] modified, bold;
        set NK0DM100.XDMCD[NK0DW-INDEX] modified, bold;
        converseLib.validationFailed(321);
      else
        set NK0DM100.SY1STNBR[NK0DW-INDEX] initialAttributes;
        set NK0DM100.SY2CLRID[NK0DW-INDEX] initialAttributes;
        set NK0DM100.XDMCD[NK0DW-INDEX] initialAttributes;
      end
      if (NK0DM100.SY1STNBR[NK0DW-INDEX] > " ")
        set NK0DM100.NK0DM-TO-PAGE skip, modified;
      end
    end
    NK0DW-INDEX = NK0DW-INDEX - 1;
  end
  if (NKWREC.ZCS-CLM-STAT-CD == "AC"
   || NKWREC.ZCS-CLM-STAT-CD == "RP"
   || NKWREC.ZCS-CLM-STAT-CD == "VD")
    set NK0DM100.NK0DM-CLM-QTY[1] skip;
  else
    set NK0DM100.NK0DM-CLM-QTY[1] cursor;
  end
  ;
end // end NK0DS-MAP100-MODE

// Page BACKWARD logic
Function NK0DS-MAP100-PF7()
   /* ***********************************************************************/
   /* Page BACKWARD logic*/
   /* ***********************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-MAP100-PF7";
  ;
  if (NK0DW-NEXT-PAGE-NBR == 1)
    converseLib.validationFailed(318);
    return;
  else
    NK0DW-NEXT-PAGE-NBR = NK0DW-NEXT-PAGE-NBR - 1;
  end
  NK0DS-BUILD-MAP100();
end // end NK0DS-MAP100-PF7

// Page forward logic
Function NK0DS-MAP100-PF8()
   /* ***********************************************************************/
   /* Page forward logic*/
   /* ***********************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-MAP100-PF8";
  ;
   /* F NK0DW-NEXT-PAGE-NBR GE NK0DW-HIGH-PAGE-NBR;*/
  if (NK0DW-02-SY1STNBR[1] == " "
   || NK0DW-02-SY1STNBR[2] == " "
   || NK0DW-02-SY1STNBR[3] == " "
   || NK0DW-02-SY1STNBR[4] == " "
   || NK0DW-02-SY1STNBR[5] == " "
   || NK0DW-02-SY1STNBR[6] == " "
   || NK0DW-02-SY1STNBR[7] == " "
   || NK0DW-02-SY1STNBR[8] == " "
   || NK0DW-02-SY1STNBR[9] == " "
   || NK0DW-02-SY1STNBR[10] == " "
   || NK0DW-02-SY1STNBR[11] == " "
   || NK0DW-02-SY1STNBR[12] == " ")
    converseLib.validationFailed(317);
    return;
  end
  set NK0DW02 empty;
  NK0DW-NEXT-PAGE-NBR = NK0DW-NEXT-PAGE-NBR + 1;
  NK0DS-BUILD-MAP100();
end // end NK0DS-MAP100-PF8

// Set map to inquiry mode
Function NK0DS-MAP200-MODE()
   /* *****************************************************/
   /* Set map to an inquiry mode*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-SET-INQ-MODE";
  NK0DW-INDEX = 1;
  if (NKW-MAP-MODE == "I") /* Inquiry only*/
    while (NK0DW-INDEX < 13)
      set NK0DM200.NK0DM-200-QTY[NK0DW-INDEX] skip;
      set NK0DM200.SY1STNBR[NK0DW-INDEX] skip;
      set NK0DM200.SY2CLRID[NK0DW-INDEX] skip;
      set NK0DM200.XDMCD[NK0DW-INDEX] skip;
      set NK0DM200.XSNABRV[NK0DW-INDEX] skip;
      set NK0DM200.FY1FCTYC[NK0DW-INDEX] skip;
      set NK0DM200.PC3POIDT[NK0DW-INDEX] skip;
      set NK0DM200.XUMDESC[NK0DW-INDEX] skip;
      set NK0DM200.NK0DM-200-PRC[NK0DW-INDEX] skip;
      NK0DW-INDEX = NK0DW-INDEX + 1;
    end
  end
  ;
   /* Protect G/L code, except for accounting and credit.  Account is*/
   /* CACLVL(4) and credit is CACLVL(3). GL codes are changable until*/
   /* the final has printed for credit.*/
  ;
  if (CACLVL[4] == "Y")
    if (VNCHDR01.ZCS-CLM-STAT-CD == "VD")
      set NK0DM200.GLAENT skip;
      set NK0DM200.GLARCID skip;
      set NK0DM200.GLANTAC skip;
      set NK0DM200.GLASUB skip;
      set NK0DM200.GLAPRJ skip;
    end
  else
    if (CACLVL[3] == "Y")
      if (VNCHDR01.ZCS-CLM-STAT-CD == "AC"
       || VNCHDR01.ZCS-CLM-STAT-CD == "VD"
       || VNCHDR01.ZCS-CLM-STAT-CD == "RP")
        set NK0DM200.GLAENT skip;
        set NK0DM200.GLARCID skip;
        set NK0DM200.GLANTAC skip;
        set NK0DM200.GLASUB skip;
        set NK0DM200.GLAPRJ skip;
      end
    else
      set NK0DM200.GLAENT skip;
      set NK0DM200.GLARCID skip;
      set NK0DM200.GLANTAC skip;
      set NK0DM200.GLASUB skip;
      set NK0DM200.GLAPRJ skip;
    end
  end
  ;
   /* screen is now set for inquiry users*/
  ;
  if (NKW-MAP-MODE == "I") /* Inquiry only*/
    set NK0DM200.CATOAP cursor;
    return;
  end
  ;
  NK0DW-INDEX = 12;
  while (NK0DW-INDEX > 0)
    if (NK0DW-06-NL-CLM-QTY[NK0DW-INDEX] > 0)
      set NK0DM200.NK0DM-200-QTY[NK0DW-INDEX] cursor;
      set NK0DM200.SY1STNBR[NK0DW-INDEX] skip;
      set NK0DM200.SY2CLRID[NK0DW-INDEX] skip;
      set NK0DM200.XDMCD[NK0DW-INDEX] skip;
      set NK0DM200.XSNABRV[NK0DW-INDEX] skip;
      set NK0DM200.FY1FCTYC[NK0DW-INDEX] skip;
      set NK0DM200.PC3POIDT[NK0DW-INDEX] skip;
      set NK0DM200.XUMDESC[NK0DW-INDEX] skip;
    else
      set NK0DM200.NK0DM-200-QTY[NK0DW-INDEX] initialAttributes;
      set NK0DM200.SY1STNBR[NK0DW-INDEX] initialAttributes, cursor;
      set NK0DM200.SY2CLRID[NK0DW-INDEX] initialAttributes;
      set NK0DM200.XDMCD[NK0DW-INDEX] initialAttributes;
      set NK0DM200.XSNABRV[NK0DW-INDEX] initialAttributes;
      set NK0DM200.FY1FCTYC[NK0DW-INDEX] initialAttributes;
      set NK0DM200.PC3POIDT[NK0DW-INDEX] initialAttributes;
      set NK0DM200.XUMDESC[NK0DW-INDEX] initialAttributes;
    end
    if (NK0DW-02-NL-CLM-QTY[NK0DW-INDEX] == 0 /* new item to claim,*/
     && NK0DM200.SY1STNBR[NK0DW-INDEX] > "  ")
      set NK0DM200.NK0DM-TO-PAGE skip, modified;
    end
    NK0DW-INDEX = NK0DW-INDEX - 1;
  end
  ;
end // end NK0DS-MAP200-MODE

// Page BACKWARD logic
Function NK0DS-MAP200-PF7()
   /* ***********************************************************************/
   /* Page BACKWARD logic*/
   /* ***********************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-MAP200-PF7";
  ;
  if (NK0DW-NEXT-PAGE-NBR == 1)
    converseLib.validationFailed(318);
    return;
  else
    NK0DW-NEXT-PAGE-NBR = NK0DW-NEXT-PAGE-NBR - 1;
  end
  NK0DS-BUILD-MAP200();
end // end NK0DS-MAP200-PF7

// Page forward logic
Function NK0DS-MAP200-PF8()
   /* ***********************************************************************/
   /* Page forward logic*/
   /* ***********************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-MAP200-PF8";
  ;
  if (NK0DW-06-SY1STNBR[1] == " "
   || NK0DW-06-SY1STNBR[2] == " "
   || NK0DW-06-SY1STNBR[3] == " "
   || NK0DW-06-SY1STNBR[4] == " "
   || NK0DW-06-SY1STNBR[5] == " "
   || NK0DW-06-SY1STNBR[6] == " "
   || NK0DW-06-SY1STNBR[7] == " "
   || NK0DW-06-SY1STNBR[8] == " "
   || NK0DW-06-SY1STNBR[9] == " "
   || NK0DW-06-SY1STNBR[10] == " "
   || NK0DW-06-SY1STNBR[11] == " "
   || NK0DW-06-SY1STNBR[12] == " ")
    converseLib.validationFailed(317);
    return;
  end
  set NK0DW06 empty;
  NK0DW-NEXT-PAGE-NBR = NK0DW-NEXT-PAGE-NBR + 1;
  NK0DS-BUILD-MAP200();
end // end NK0DS-MAP200-PF8

// Page BACKWARD logic
Function NK0DS-MAP300-PF7()
   /* ***********************************************************************/
   /* Page BACKWARD logic*/
   /* ***********************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-MAP300-PF7";
  ;
  if (NK0DW-MAP300-FM-PAGE == 1)
    converseLib.validationFailed(318);
    return;
  else
    NK0DW-MAP300-FM-PAGE = NK0DW-MAP300-FM-PAGE - 1;
  end
  NK0DS-BUILD-MAP300();
end // end NK0DS-MAP300-PF7

// Page forward logic
Function NK0DS-MAP300-PF8()
   /* ***********************************************************************/
   /* Page forward logic*/
   /* ***********************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-MAP300-PF8";
  ;
  if (NK0DW-MAP300-FM-PAGE == NK0DW-MAP300-TO-PAGE)
    converseLib.validationFailed(30);
    return;
  end
  NK0DW-MAP300-FM-PAGE = NK0DW-MAP300-FM-PAGE + 1;
  NK0DS-BUILD-MAP300();
end // end NK0DS-MAP300-PF8

// Fetch the cursor for VFYSTY01
Function NK0DS-N1-VFYSTY01()
   /* *****************************************************************/
   /* This will fetch the cursor for VFYSTY01*/
   /* *****************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-N1-VFYSTY01";
  ;
  call "IO2980" ("N1", SQLCA, FY2REC) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DFCTY";
    TA1REC.TA1TBLVU = "VFYSTY01";
    TA1REC.TA1TBLKE = FY2REC.FY2KEY;
    XPNL005(); /* abort routine*/
  end
  ;
  ;
end // end NK0DS-N1-VFYSTY01

// Fetch next C1 on VNCDEF01
Function NK0DS-N1-VNCDEF01()
   /* *****************************************************/
   /* Fetch next cursor on VNCDEF01*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-N1-VNCDEF01";
  ;
   /* fetch cursor on - VNCDEF01*/
  ;
  call "IO6480" ("N1", SQLCA, VNCDEF01) {isNoRefresh = yes, isExternal = yes}; /* fetch next C1 on VNCDEF*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCDEF01";
    NK0DW-LRG-NBR = VNCDEF01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0DW01.NK0DW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
end // end NK0DS-N1-VNCDEF01

// Fetch next C1 on VNCSTY01
Function NK0DS-N1-VNCSTY01()
   /* *****************************************************/
   /* Fetch next cursor on VNCSTY01*/
   /* *****************************************************/
  ;
  ;
  NLXREC.NLXCPROC = "NK0DS-N1-VNCSTY01";
  ;
   /* fetch cursor on - VNCSTY01*/
  ;
  call "IO6470" ("N1", SQLCA, VNCSTY01) {isNoRefresh = yes, isExternal = yes}; /* fetch next C1 on VNCSTY*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100)
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCSTY01";
    NK0DW-LRG-NBR = VNCSTY01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0DW01.NK0DW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
end // end NK0DS-N1-VNCSTY01

// Fetch cursor 1 on VPIITM01
Function NK0DS-N1-VPIITM01()
   /* *****************************************************/
   /* Fetch cursor on VPIITM01*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-N1-VPIITM01";
  ;
   /* fetch cursor on - VPIITM01*/
  ;
  call "IO4480" ("N1", SQLCA, VPIITM01) {isNoRefresh = yes, isExternal = yes}; /* fetch next piitm*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VPIITM01";
    NK0DW-LRG-NBR = VPIITM01.NIDIVCID;
    TA1REC.TA1TBLKE = NK0DW01.NK0DW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
end // end NK0DS-N1-VPIITM01

// Move new defectives to array
Function NK0DS-NEW-DEFCTS()
  ;
  /* ************************************************************************/
  /* move style changes to the array;*/
  /* ************************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-NEW-DEFCTS";
  ;
  NK0DW-INDEX = 1;
  ;
  while (NK0DW-INDEX <= 12)
    NK0DW-INDEX-2 = 1;
    while (NK0DW-INDEX-2 <= 300)
      if (NK0DW-INDEX == NK0DW-07-ROW[NK0DW-INDEX-2]
       && NK0DW-NEXT-PAGE-NBR == NK0DW-07-PAGE[NK0DW-INDEX-2])
        NK0DW-07-XGPCD[NK0DW-INDEX-2] = NKWREC.XGPCD;
        NK0DW-07-SY1STNBR[NK0DW-INDEX-2] = NK0DM200.SY1STNBR[NK0DW-INDEX];
        NK0DW-07-SY2CLRID[NK0DW-INDEX-2] = NK0DM200.SY2CLRID[NK0DW-INDEX];
        NK0DW-07-XDMCD[NK0DW-INDEX-2] = NK0DM200.XDMCD[NK0DW-INDEX];
        NK0DW-07-FY1FCTYC[NK0DW-INDEX-2] = NK0DM200.FY1FCTYC[NK0DW-INDEX];
        NK0DW-07-PC3POIDT[NK0DW-INDEX-2] = NK0DM200.PC3POIDT[NK0DW-INDEX];
        if (NK0DM200.XSNABRV[NK0DW-INDEX] in XSNTBL.XSNABRV)
          NK0DW-07-XSECD[NK0DW-INDEX-2] = XSNTBL.XSECD[sysVar.arrayIndex];
          NK0DW-07-XSNYR[NK0DW-INDEX-2] = XSNTBL.XSNYR[sysVar.arrayIndex];
        else
          NK0DW-07-XSECD[NK0DW-INDEX-2] = " ";
          NK0DW-07-XSNYR[NK0DW-INDEX-2] = 0;
        end
      end
      NK0DW-INDEX-2 = NK0DW-INDEX-2 + 1;
      if (NK0DW-INDEX-2 > NK0DW-INDEX-3) /* index-3 is last entry in tbl*/
        NK0DW-INDEX-2 = 301;
      end
    end
    NK0DW-INDEX = NK0DW-INDEX + 1;
  end
  ;
end // end NK0DS-NEW-DEFCTS

// Update new style array
Function NK0DS-NEW-STYLES()
   /* *****************************************************/
   /* Update the new style array*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-NEW-STYLES";
  ;
  ;
   /* This statement group will update the new product array if styles*/
   /* have changed since they were first put into the array.*/
  ;
  NK0DW-INDEX = 1;
  while (NK0DW-INDEX <= 12)
    if (NK0DW-02-NL-CLM-QTY[NK0DW-INDEX] == 0)
      NK0DW-INDEX-2 = 1;
      while (NK0DW-INDEX-2 < 101)
        if (NK0DW-INDEX == NK0DW-ROW[NK0DW-INDEX-2]
         && NK0DW-NEXT-PAGE-NBR == NK0DW-PAGE[NK0DW-INDEX-2])
          NK0DW-INVOICE[NK0DW-INDEX-2] = NK0DM100.NIDIVCID[NK0DW-INDEX];
          NK0DW-STYLE[NK0DW-INDEX-2] = NK0DM100.SY1STNBR[NK0DW-INDEX];
          NK0DW-COLOR[NK0DW-INDEX-2] = NK0DM100.SY2CLRID[NK0DW-INDEX];
          NK0DW-DIM[NK0DW-INDEX-2] = NK0DM100.XDMCD[NK0DW-INDEX];
          NK0DW-INDEX-2 = 101;
        else
          NK0DW-INDEX-2 = NK0DW-INDEX-2 + 1;
        end
      end
    end
    NK0DW-INDEX = NK0DW-INDEX + 1;
  end
end // end NK0DS-NEW-STYLES

// update temp storage for ivc
Function NK0DS-PROCESS-IVC()
   /* **********************************************************************/
   /* This statement group will update the temp storage for the items*/
   /* selected during the invoice select process.*/
   /* **********************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-PROCESS-IVC";
  ;
  NK0DW-INDEX = 1;
  NK0DW-INX4 = 1;
  NK0DW-W03-ARRAY-CNT = 1;
  ;
  /* ************************************************************************/
  /* Move the selected products to the current map100 working storage.*/
  /* Will move items to rows with no style and invoice id.  if the index*/
  /* NK0DW-INDEX is equal to 12, then the working storage NK0DW02 needs to*/
  /* be updated.  This logic will update the current map working storage.*/
  /* and update the temp storage.  Next, the last page will be retreived*/
  /* from temp storage and all empty lines filled and then updated in temp*/
  /* storage.  After that we will add new pages to temp storage for the*/
  /* balance of the invoice items.*/
  /* ************************************************************************/
  ;
  NK0DW-INDEX = 1;
  while (NK0DW-INX4 <= 204)
    if (NK0DW-03-SY1STNBR[NK0DW-INX4] == " ") /* no more styles*/
      NK0DW-INX4 = 300;
    else
      if (NK0DW-03-NL-CLM-QTY[NK0DW-INX4] > 0)
        if (NK0DW-02-SY1STNBR[NK0DW-INDEX] == " ")
          NK0DW-02-MAP-QTY[NK0DW-INDEX] = NK0DW-03-NL-CLM-QTY[NK0DW-INX4];
          NK0DW-02-NIDIVCID[NK0DW-INDEX] = NK0DW-03-NIDIVCID[NK0DW-INX4];
          NK0DW-02-XGPCD[NK0DW-INDEX] = NK0DW-03-XGPCD[NK0DW-INX4];
          NK0DW-02-SY1STNBR[NK0DW-INDEX] = NK0DW-03-SY1STNBR[NK0DW-INX4];
          NK0DW-02-SY2CLRID[NK0DW-INDEX] = NK0DW-03-SY2CLRID[NK0DW-INX4];
          NK0DW-02-XDMCD[NK0DW-INDEX] = NK0DW-03-XDMCD[NK0DW-INX4];
          NK0DW-02-XQACD[NK0DW-INDEX] = NK0DW-03-XQACD[NK0DW-INX4];
          NK0DW-02-CLM-XUMDESC[NK0DW-INDEX] = NK0DW-03-XUMDESC[NK0DW-INX4];
          NK0DW-02-NIHNPRC[NK0DW-INDEX] = NK0DW-03-NIHNPRC[NK0DW-INX4];
          NK0DW-02-OP2LNINB[NK0DW-INDEX] = NK0DW-03-OP2LNINB[NK0DW-INX4];
          NK0DW-02-NIHNMRC[NK0DW-INDEX] = NK0DW-03-NL-CLM-QTY[NK0DW-INX4] *           NK0DW-03-NIHNPRC[NK0DW-INX4];
          NK0DW-02-MULTI-CLM-ITM[NK0DW-INDEX] = NK0DW-03-MULTI-CLM-ITM[NK0DW-INX4];
        /* ******************************************************************/
        /* move the style to the dup style array*/
        /* ******************************************************************/
          NK0DW-INDEX-3 = NK0DW-INDEX-3 + 1;
          NK0DW-STYLE[NK0DW-INDEX-3] = NK0DW-03-SY1STNBR[NK0DW-INX4];
          NK0DW-COLOR[NK0DW-INDEX-3] = NK0DW-03-SY2CLRID[NK0DW-INX4];
          NK0DW-DIM[NK0DW-INDEX-3] = NK0DW-03-XDMCD[NK0DW-INX4];
          NK0DW-ROW[NK0DW-INDEX-3] = NK0DW-INDEX;
          NK0DW-PAGE[NK0DW-INDEX-3] = NK0DW-NEW-PAGE-NBR;
          NK0DW-INVOICE[NK0DW-INDEX-3] = NK0DW-03-NIDIVCID[NK0DW-INX4];
          NK0DW-INX4 = NK0DW-INX4 + 1;
        end
        NK0DW-INDEX = NK0DW-INDEX + 1;
      else
        NK0DW-INX4 = NK0DW-INX4 + 1;
      end
    end
    /*  */
    if (NK0DW-INDEX == 13)
      NK0DS-STORAGE-UPDT(); /* update the current temp storage*/
      NK0DW-INDEX = 1;
    end
  end
  ;
  NK0DS-STORAGE-UPDT(); /* update the current temp storage*/
  /* ************************************************************************/
  /* Test the new style array index, if it is greater than 288, it will*/
  /* cause a subscript error, so force the user to update the claim before*/
  /* going on.*/
  /* ************************************************************************/
  if (NK0DW-INDEX-3 > 288)
    NLXLINEX = 13;
    converseLib.validationFailed(316);
    NLXREC.NLXERRF = "Y";
  end
end // end NK0DS-PROCESS-IVC

// Reload the temp storage
Function NK0DS-RELOAD-STG()
   /* *****************************************************/
   /* Reload temp storage after claims update*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-RELOAD-STG";
  ;
  NK0DS-DEL-TMP-STG(); /* Delete temp storage prior to writting*/
                                  /* to it*/
  NK0DW-INDEX = 0;
  NK0DW-INDEX-3 = 0;
  set NK0DW02 empty;
  set NK0DW04 empty;
  NK0DW-NEXT-PAGE-NBR = 0;
  NK0DW-HIGH-PAGE-NBR = 0;
  NK0DW-HOLD-PAGE-NBR = 0;
  NK0DS-S1-VNCSTY01(); /* Open cursor on claim style items.*/
                                  /* to it*/
  while (SQLCA.VAGen_SQLCODE == 0)
    NK0DS-N1-VNCSTY01(); /* Fetch next on claim style items.*/
    if (SQLCA.VAGen_SQLCODE == 0)
      NK0DS-BLD-TMP-STG(); /* Load all items to temp storage one*/
    end
  end
  ;
  NK0DS-C1-VNCSTY01(); /* Close cursor on claim style items.*/
  ;
  if (NK0DW-INDEX > 0)
    NK0DS-ADD-TMP-STG(); /* Add last page.*/
  end
  ;
  move NK0DW-HOLD-PAGE-NBR to NK0DW-NEXT-PAGE-NBR withV60Compat;
  if (NK0DW-NEXT-PAGE-NBR > NK0DW-HIGH-PAGE-NBR)
    move NK0DW-HIGH-PAGE-NBR to NK0DW-NEXT-PAGE-NBR withV60Compat;
  end
  ;
end // end NK0DS-RELOAD-STG

// Select unique VDSTRB01
Function NK0DS-S-VDSTRB01()
   /* *****************************************************************/
   /* This will select a unique row from DFCTY.VDSTRB01*/
   /* *****************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-S-VDSTRB01";
  ;
  VDSTRB01.KUCCOID = NKWREC.KUCCOID;
  call "IO4600" ("S ", SQLCA, VDSTRB01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VDSTRB01";
    NK0DW-LRG-NBR = NKWREC.KUCCOID;
    TA1REC.TA1TBLKE = NK0DW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
  ;
end // end NK0DS-S-VDSTRB01

// Select unique VFYSTY01
Function NK0DS-S-VFCTY001()
   /* *****************************************************************/
   /* This will select a unique row from DFCTY.VFCTY001*/
   /* *****************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-S-VFCTY001";
  ;
  call "IO2810" ("S ", SQLCA, FY1REC) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DFCTY";
    TA1REC.TA1TBLVU = "VFCTY001";
    TA1REC.TA1TBLKE = FY1REC.FY1KEY;
    XPNL005(); /* abort routine*/
  end
  ;
  ;
end // end NK0DS-S-VFCTY001

// Select claim header
Function NK0DS-S-VNCHDR01()
   /* *****************************************************************/
   /* This will update the claim header with the new claim balance.*/
   /* *****************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-S-VNCHDR01";
  ;
   /* select on - VNCHDR01*/
  ;
  call "IO6460" ("S ", SQLCA, VNCHDR01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCHDR01";
    NK0DW-LRG-NBR = VNCHDR01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0DW01.NK0DW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
end // end NK0DS-S-VNCHDR01

// Select claim header
Function NK0DS-S-VNCHDR01-A()
   /* *****************************************************************/
   /* This will update the claim header with the new claim balance.*/
   /* *****************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-S-VNCHDR01-A";
  ;
   /* select on - VNCHDR01*/
  ;
  call "IO6460" ("S ", SQLCA, VNCHDR01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100) /* or not found return*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCHDR01";
    NK0DW-LRG-NBR = VNCHDR01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0DW01.NK0DW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
end // end NK0DS-S-VNCHDR01-A

// Select unique VNCSTY01
Function NK0DS-S-VNCSTY01()
   /* *****************************************************************/
   /* This will select a unique row from DNILO.VNCSTY01*/
   /* *****************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-S-VNCSTY01";
  ;
  call "IO6470" ("S ", SQLCA, VNCSTY01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCSTY01";
    NK0DW-LRG-NBR = VNCSTY01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0DW01.NK0DW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
  ;
end // end NK0DS-S-VNCSTY01

// Select from valid GL table
Function NK0DS-S-VNLGLA01()
  /* ******************************************************************/
  /* This will select from the VNLGLA table.  If the return code is 100*/
  /* it is not a vaild gl code.*/
  /* ******************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-S-VNLGLA01";
  ;
   /* select on - VNLGLA01*/
  ;
  call "IO4610" ("S ", SQLCA, VNLGLA01) {isNoRefresh = yes, isExternal = yes}; /* read GLA TABLE*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100) /* NOT found is a good return code*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNLGLA01";
    TA1REC.TA1TBLKE = NIJGROUP;
    XPNL005(); /* abort routine*/
  end
  ;
end // end NK0DS-S-VNLGLA01

// Select unique VPIHDR01
Function NK0DS-S-VPIHDR01()
   /* *****************************************************************/
   /* This will select a unique row from DNILO.VPIHDR01*/
   /* *****************************************************************/
  ;
  ;
  NLXREC.NLXCPROC = "NK0DS-S-VPIHDR01";
  ;
  call "IO4470" ("S ", SQLCA, VPIHDR01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100) /* or a not fount condition*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VPIHDR01";
    NK0DW-LRG-NBR = VPIHDR01.NIDIVCID;
    TA1REC.TA1TBLKE = NK0DW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
  ;
end // end NK0DS-S-VPIHDR01

// Select unique VSTYGL01
Function NK0DS-S-VSTYGL01()
   /* *****************************************************************/
   /* This will select a unique row from DNILO.VSTYGL01*/
   /* *****************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-S-VSTYGL01";
  ;
  set VSTYGL01 empty;
  ;
  VSTYGL01.ZARCD = VDSTRB01.ZARCD;
  VSTYGL01.ZPSCD = "DF";
  VSTYGL01.XGPCD = NKWREC.XGPCD;
  ;
  call "IO1610" ("SF", SQLCA, VSTYGL01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 100) /* if a good return,*/
    NK0DW-GL-SUSP-FL = VSTYGL01.NL-GEN-LED-SUSP-FL;
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VSTYGL01";
    NK0DW-LRG-NBR = NKWREC.KUCCOID;
    TA1REC.TA1TBLKE = NK0DW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
  ;
end // end NK0DS-S-VSTYGL01

// Select unique VSTYLE01
Function NK0DS-S-VSTYLE01()
   /* *****************************************************************/
   /* This will select a unique row from DPROD.VSTYLE01*/
   /* *****************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-S-VSTYLE01";
  ;
  call "IO0120" ("S ", SQLCA, SY1REC) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0 /* if a good return,*/
   || SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "PROD";
    TA1REC.TA1TBLVU = "VSTYLE01";
    TA1REC.TA1TBLKE = SY1REC.SY1KEY;
    XPNL005(); /* abort routine*/
  end
  ;
end // end NK0DS-S-VSTYLE01

// Select delcare cursor VFYSTY01
Function NK0DS-S1-VFYSTY01()
   /* *****************************************************************/
   /* This will select a set cursor for VFYSTY01*/
   /* *****************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-S1-VFYSTY01";
  ;
  call "IO2980" ("S1", SQLCA, FY2REC) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DFCTY";
    TA1REC.TA1TBLVU = "VFYSTY01";
    TA1REC.TA1TBLKE = FY2REC.FY2KEY;
    XPNL005(); /* abort routine*/
  end
  ;
  ;
end // end NK0DS-S1-VFYSTY01

// Open cursor 1 on VNCDEF01
Function NK0DS-S1-VNCDEF01()
   /* *****************************************************/
   /* Open cursor on VNCDEF01*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-S1-VNCDEF01";
  ;
  set VNCSTY01 empty;
  ;
  VNCDEF01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  ;
   /* open cursor on - VNCDEF01*/
  ;
  call "IO6480" ("S1", SQLCA, VNCDEF01) {isNoRefresh = yes, isExternal = yes}; /* read defective items*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCDEF01";
    NK0DW-LRG-NBR = VNCDEF01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0DW01.NK0DW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
end // end NK0DS-S1-VNCDEF01

// Open cursor 1 on VNCSTY01
Function NK0DS-S1-VNCSTY01()
   /* *****************************************************/
   /* Open cursor on VNCSTY01*/
   /* *****************************************************/
  ;
  ;
  NLXREC.NLXCPROC = "NK0DS-S1-VNCSTY01";
  ;
  set VNCSTY01 empty;
  ;
  VNCSTY01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  ;
   /* open cursor on - VNCSTY01*/
  ;
  call "IO6470" ("S1", SQLCA, VNCSTY01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCSTY01";
    NK0DW-LRG-NBR = VNCSTY01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0DW01.NK0DW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
end // end NK0DS-S1-VNCSTY01

// Open cursor 1 on VPIITM01
Function NK0DS-S1-VPIITM01()
   /* *****************************************************/
   /* Open cursor on VPIITM01*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-S1-VPIITM01";
  ;
   /* open cursor on - VPIITM01*/
  ;
  call "IO4480" ("S1", SQLCA, VPIITM01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VPIITM01";
    NK0DW-LRG-NBR = VPIITM01.NIDIVCID;
    TA1REC.TA1TBLKE = NK0DW01.NK0DW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
end // end NK0DS-S1-VPIITM01

// Select Claim quantities
Function NK0DS-SEL-VNCSTY01()
   /* *****************************************************/
   /* Select invoice item*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-SEL-VPIITM01";
  ;
  VNCSTY01.XGPCD = NKWREC.XGPCD;
  ;
   /* open cursor on - VNCSTY01*/
  ;
  call "IO6470" ("S2", SQLCA, VNCSTY01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCSTY01";
    NK0DW-LRG-NBR = VNCSTY01.NL-CLM-ID;
    NK0DW-CHR-KEY = VNCSTY01.SY1STNBR;
    move NK0DW-KEY to TA1TBLKE withV60Compat;
    XPNL005(); /* abort routine*/
  end
  ;
  NK0DW-MULTI-CLM-ITM = "N";
  while (SQLCA.VAGen_SQLCODE == 0)
    call "IO6470" ("N2", SQLCA, VNCSTY01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
      VNCHDR01.NL-CLM-ID = VNCSTY01.NL-CLM-ID;
      NK0DS-S-VNCHDR01-A(); /* go up to see status*/
      if (SQLCA.VAGen_SQLCODE == 0)
        if (VNCHDR01.ZCS-CLM-STAT-CD != "VD")
          NK0DW-IVC-BAL = NK0DW-IVC-BAL - VNCSTY01.NL-CLM-LN-QTY;
        end
        if (VNCSTY01.NL-CLM-ID != NKWREC.NL-CLM-ID)
          NK0DW-MULTI-CLM-ITM = "Y";
        end
      end
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* if a good return,*/
        /* next sentence*/
      else
        TA1REC.TA1DBASE = "DNILO";
        TA1REC.TA1TBLVU = "VNCSTY01";
        NK0DW-LRG-NBR = VNCSTY01.NL-CLM-ID;
        NK0DW-CHR-KEY = VNCSTY01.SY1STNBR;
        move NK0DW-KEY to TA1TBLKE withV60Compat;
        XPNL005(); /* abort routine*/
      end
    end
  end
  ;
  call "IO6470" ("C2", SQLCA, VNCSTY01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCSTY01";
    NK0DW-LRG-NBR = VNCSTY01.NL-CLM-ID;
    NK0DW-CHR-KEY = VNCSTY01.SY1STNBR;
    move NK0DW-KEY to TA1TBLKE withV60Compat;
    XPNL005(); /* abort routine*/
  end
end // end NK0DS-SEL-VNCSTY01

// Select Invoice Item balances
Function NK0DS-SEL-VPIITM01()
   /* *****************************************************/
   /* Select invoice item*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-SEL-VPIITM01";
  ;
  NK0DW-IVC-BAL = 0;
  VPIITM01.XGPCD = NKWREC.XGPCD;
  VPIITM01.XQACD = "**";
  ;
   /* open cursor on - VNCSTY01*/
  ;
  call "IO4480" ("S1", SQLCA, VPIITM01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VPIITM01";
    NK0DW-LRG-NBR = VNCSTY01.NIDIVCID;
    NK0DW-CHR-KEY = VNCSTY01.SY1STNBR;
    move NK0DW-KEY to TA1TBLKE withV60Compat;
    XPNL005(); /* abort routine*/
  end
  ;
  while (SQLCA.VAGen_SQLCODE == 0)
    call "IO4480" ("N1", SQLCA, VPIITM01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/
    if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
      NK0DW-IVC-BAL = NK0DW-IVC-BAL + NIHSHPQT;
    else
      if (SQLCA.VAGen_SQLCODE == 100) /* if a good return,*/
        /* next sentence*/
      else
        TA1REC.TA1DBASE = "DNILO";
        TA1REC.TA1TBLVU = "VPIITM01";
        NK0DW-LRG-NBR = VNCSTY01.NIDIVCID;
        NK0DW-CHR-KEY = VNCSTY01.SY1STNBR;
        move NK0DW-KEY to TA1TBLKE withV60Compat;
        XPNL005(); /* abort routine*/
      end
    end
  end
  ;
  call "IO4480" ("C1", SQLCA, VPIITM01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VPIITM01";
    NK0DW-LRG-NBR = VNCSTY01.NIDIVCID;
    NK0DW-CHR-KEY = VNCSTY01.SY1STNBR;
    move NK0DW-KEY to TA1TBLKE withV60Compat;
    XPNL005(); /* abort routine*/
  end
end // end NK0DS-SEL-VPIITM01

// Get sum of VNCadj01
Function NK0DS-SM-VNCADJ01()
   /* *****************************************************************/
   /* This will select the sum of all the claim adjustments*/
   /* *****************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-SM-VNCADJ01";
  ;
  set VNCADJ01 empty;
  set NK0DW05 empty;
  VNCADJ01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  VNCADJ01.NIGNETFL = "N";
  NK0DW-05-IO-TASK = "SM";
  ;
  call "IO6490" (NK0DW05, SQLCA, VNCADJ01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    VNCHDR01.NL-CLM-AMT = VNCHDR01.NL-CLM-AMT + NK0DW-05-IO-NET-AMT;
    if (NK0DW-05-IO-NET-AMT > 9999999.99)
      NLXREC.NLXERRF = "Y";
      converseLib.validationFailed(366);
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if a good return,*/
      converseLib.validationFailed(313);
      NLXREC.NLXERRF = "Y";
    else
      TA1REC.TA1DBASE = "DNILO";
      TA1REC.TA1TBLVU = "VNCADJ01";
      NK0DW-LRG-NBR = VNCADJ01.NL-CLM-ID;
      TA1REC.TA1TBLKE = NK0DW01.NK0DW-KEY;
      XPNL005(); /* abort routine*/
    end
  end
  ;
end // end NK0DS-SM-VNCADJ01

// Get sum of VNCDEF01
Function NK0DS-SM-VNCDEF01()
   /* *****************************************************************/
   /* This will select the sum of all the claim defective items*/
   /* *****************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-SM-VNCDEF01";
  ;
  set VNCDEF01 empty;
  set NK0DW05 empty;
  NK0DW-05-IO-TASK = "SM";
  VNCDEF01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  ;
  call "IO6480" (NK0DW05, SQLCA, VNCDEF01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    VNCHDR01.NL-CLM-AMT = VNCHDR01.NL-CLM-AMT + NK0DW-05-IO-NET-AMT;
    if (NK0DW-05-IO-NET-AMT > 9999999.99)
      converseLib.validationFailed(366);
      NLXREC.NLXERRF = "Y";
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if a good return,*/
      converseLib.validationFailed(313);
      NLXREC.NLXERRF = "Y";
    else
      TA1REC.TA1DBASE = "DNILO";
      TA1REC.TA1TBLVU = "VNCDEF01";
      NK0DW-LRG-NBR = VNCDEF01.NL-CLM-ID;
      TA1REC.TA1TBLKE = NK0DW01.NK0DW-KEY;
      XPNL005(); /* abort routine*/
    end
  end
  ;
end // end NK0DS-SM-VNCDEF01

// Get sum of VNCSTY01
Function NK0DS-SM-VNCSTY01()
   /* *****************************************************************/
   /* This will select the sum of all the claim style items*/
   /* *****************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-SM-VNCSTY01";
  ;
  set VNCSTY01 empty;
  set NK0DW05 empty;
  NK0DW-05-IO-TASK = "SM";
  VNCSTY01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  ;
  call "IO6470" (NK0DW05, SQLCA, VNCSTY01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    VNCHDR01.NL-CLM-AMT = VNCHDR01.NL-CLM-AMT + NK0DW-05-IO-NET-AMT;
    if (NK0DW-05-IO-NET-AMT > 9999999.99)
      converseLib.validationFailed(366);
      NLXREC.NLXERRF = "Y";
    end
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if a good return,*/
      converseLib.validationFailed(313);
      NLXREC.NLXERRF = "Y";
    else
      TA1REC.TA1DBASE = "DNILO";
      TA1REC.TA1TBLVU = "VNCHDR01";
      NK0DW-LRG-NBR = VNCHDR01.NL-CLM-ID;
      TA1REC.TA1TBLKE = NK0DW01.NK0DW-KEY;
      XPNL005(); /* abort routine*/
    end
  end
  ;
end // end NK0DS-SM-VNCSTY01

// Update temp stg from m300
Function NK0DS-STORAGE-UPDT()
  /* ************************************************************************/
  /* This statement group will update the temp storage records from the*/
  /* imput of map300.  It will update the current page first, then it*/
  /* will fetch the last page to be loaded and updated, then it will insert*/
  /* new pages as needed.*/
  /* ************************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-STORAGE-UPDT";
  ;
  /* ************************************************************************/
  /* if the next page nbr is equal to the hold page nbr, update the temp*/
  /* storage.  If the next page number is equal to the high page number,*/
  /* then it was the last page, set the working storage empty and add 2*/
  /* next page number in order to tell that we have a page to add to temp*/
  /* storage.  All pages refer to map 100 pages.  If the next page number*/
  /* is less than the high page number we must get the last page to update*/
  /* ************************************************************************/
  ;
  if (NK0DW-NEXT-PAGE-NBR == NK0DW-HOLD-PAGE-NBR)
    NK0DS-UPDT-TMP-STG();
    if (NK0DW-NEXT-PAGE-NBR == NK0DW-HIGH-PAGE-NBR
     && NK0DW-02-SY1STNBR[12] > " ")
      set NK0DW02 empty;
      NK0DW-NEW-PAGE-NBR = NK0DW-HIGH-PAGE-NBR + 1;
      NK0DW-NEXT-PAGE-NBR = NK0DW-NEXT-PAGE-NBR + 2;
    else
      if (NK0DW-02-SY1STNBR[12] > " ")
        move NK0DW-HIGH-PAGE-NBR to NK0DW-NEXT-PAGE-NBR withV60Compat;
        move NK0DW-HIGH-PAGE-NBR to NK0DW-NEW-PAGE-NBR withV60Compat;
        NK0DS-GET-TMP-STG();
      end
    end
    return;
  end
  ;
  /* ************************************************************************/
  /* if the next page nbr is equal to the high page nbr, update the last*/
  /* page in temp storage and set the work record empty.*/
  /* ************************************************************************/
  ;
  if (NK0DW-NEXT-PAGE-NBR == NK0DW-HIGH-PAGE-NBR)
    NK0DS-UPDT-TMP-STG();
    if (NK0DW-02-SY1STNBR[12] > " ")
      NK0DW-NEW-PAGE-NBR = NK0DW-HIGH-PAGE-NBR + 1;
      set NK0DW02 empty;
      NK0DW-NEXT-PAGE-NBR = NK0DW-NEXT-PAGE-NBR + 2;
    end
    return;
  end
  ;
  NK0DS-ADD-TMP-STG(); /* Add new page*/
  move NK0DW-HIGH-PAGE-NBR to NK0DW-NEXT-PAGE-NBR withV60Compat;
  if (NK0DW-02-SY1STNBR[12] > " ")
    set NK0DW02 empty;
    NK0DW-NEXT-PAGE-NBR = NK0DW-NEXT-PAGE-NBR + 2;
  end
  ;
end // end NK0DS-STORAGE-UPDT

// Edit invoice for style
Function NK0DS-STY-IVC-EDIT()
   /* *****************************************************/
   /* Edit Invoice & style*/
   /* *****************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-STY-IVC-EDIT";
  ;
  set VPIITM01 empty;
  ;
   /* Build invoice item key*/
  ;
  VPIITM01.NIDIVCID = NK0DW-02-NIDIVCID[NK0DW-INDEX];
  VPIITM01.SY1STNBR = NK0DW-02-SY1STNBR[NK0DW-INDEX];
  VPIITM01.SY2CLRID = NK0DW-02-SY2CLRID[NK0DW-INDEX];
  VPIITM01.XDMCD = NK0DW-02-XDMCD[NK0DW-INDEX];
  ;
  NK0DS-SEL-VPIITM01(); /* Select invoice items*/
  ;
  if (NK0DW-IVC-BAL == 0) /* No items found*/
    set NK0DM100.NIDIVCID[NK0DW-INDEX] bold, modified;
    set NK0DM100.SY1STNBR[NK0DW-INDEX] bold, modified, cursor;
    set NK0DM100.SY2CLRID[NK0DW-INDEX] bold, modified;
    set NK0DM100.XDMCD[NK0DW-INDEX] bold, modified;
    converseLib.validationFailed(314);
    NK0DW-ERR-FLAG = "Y";
    return;
  end
end // end NK0DS-STY-IVC-EDIT

// Update the VNCDEF01
Function NK0DS-U-VNCDEF01()
   /* *****************************************************************/
   /* This will update all items on the claim which have been changed*/
   /* and it will insert the new items.*/
   /* *****************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-UPDATE-DEF";
  ;
  set VNCDEF01 empty;
  ;
  VNCDEF01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  VNCDEF01.XGPCD = NK0DW-06-XGPCD[NK0DW-INDEX];
  VNCDEF01.SY1STNBR = NK0DW-06-SY1STNBR[NK0DW-INDEX];
  VNCDEF01.SY2CLRID = NK0DW-06-SY2CLRID[NK0DW-INDEX];
  VNCDEF01.XDMCD = NK0DW-06-XDMCD[NK0DW-INDEX];
  VNCDEF01.FY1FCTYC = NK0DW-06-FY1FCTYC[NK0DW-INDEX];
  VNCDEF01.PC3POIDT = NK0DW-06-PC3POIDT[NK0DW-INDEX];
  VNCDEF01.XSECD = NK0DW-06-XSECD[NK0DW-INDEX];
  VNCDEF01.XSNYR = NK0DW-06-XSNYR[NK0DW-INDEX];
  ;
  call "IO6480" ("S ", SQLCA, VNCDEF01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if not found, it is an error*/
      converseLib.validationFailed(313);
      NLXREC.NLXERRF = "Y";
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      return;
    else
      TA1REC.TA1DBASE = "DNILO";
      TA1REC.TA1TBLVU = "VNCDEF01";
      NK0DW-LRG-NBR = VNCDEF01.NL-CLM-ID;
      TA1REC.TA1TBLKE = NK0DW01.NK0DW-KEY;
      XPNL005(); /* abort routine*/
    end
  end
  ;
  if (VNCDEF01.ZZZCHGCT != NK0DW-06-ZZZCHGCT[NK0DW-INDEX])
    converseLib.validationFailed(313);
    NLXREC.NLXERRF = "Y";
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    return;
  end
  ;
  /* ************************************************************************/
  /* UPDATE CLAIM IF SLS GL, QUANTITY OR PRICE CHANGED*/
  /* ************************************************************************/
  if (NK0DW-SLS-GL-CHG == "Y"
   || VNCDEF01.NIHNPRC != NK0DW-06-NIHNPRC[NK0DW-INDEX]
   || VNCDEF01.NL-CLM-LN-QTY != NK0DW-06-MAP-QTY[NK0DW-INDEX])
    VNCDEF01.NIHNPRC = NK0DW-06-NIHNPRC[NK0DW-INDEX];
    VNCDEF01.NL-CLM-LN-QTY = NK0DW-06-MAP-QTY[NK0DW-INDEX];
    VNCDEF01.NIHNMRC = VNCDEF01.NIHNPRC * VNCDEF01.NL-CLM-LN-QTY;
    VNCDEF01.NIHNMRCF = VNCDEF01.NIHNPRCF * VNCDEF01.NL-CLM-LN-QTY;
    if (NK0DW-06-CLM-XUMDESC[NK0DW-INDEX] in XUMTBL.XUMDESC)
      VNCDEF01.XUMCD = XUMTBL.XUMCD[sysVar.arrayIndex];
    end
    VNCDEF01.GLAENT = NKW-SLS-GLAENT;
    VNCDEF01.GLARCID = NKW-SLS-GLARCID;
    VNCDEF01.GLANTAC = NKW-SLS-GLANTAC;
    VNCDEF01.GLASUB = NKW-SLS-GLASUB;
    VNCDEF01.GLAPRJ = NKW-SLS-GLAPRJ;
    ;
    XX0XS01(); /* get current date and time for*/
                                  /* zz-change-faimly*/
    VNCDEF01.ZZZCHGDT = XX0XW01.XX0XWDAT;
    VNCDEF01.ZZZCHGTM = XX0XW01.XX0XWTIM;
    ;
    call "IO6480" ("U ", SQLCA, VNCDEF01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
      NLXUPDTF = "Y";
    else
      TA1REC.TA1DBASE = "DNILO";
      TA1REC.TA1TBLVU = "VNCDEF01";
      NK0DW-LRG-NBR = VNCDEF01.NL-CLM-ID;
      TA1REC.TA1TBLKE = NK0DW01.NK0DW-KEY;
      XPNL005(); /* abort routine*/
    end
  end
  ;
end // end NK0DS-U-VNCDEF01

// Update the VNCSTY01
Function NK0DS-U-VNCSTY01()
   /* *****************************************************************/
   /* This will update all items on the claim which have been changed*/
   /* and it will insert the new items.*/
   /* *****************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-UPDATE-STY";
  ;
  set VNCSTY01 empty;
  ;
  VNCSTY01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  VNCSTY01.NIDIVCID = NK0DW-02-NIDIVCID[NK0DW-INDEX];
  VNCSTY01.OP2LNINB = NK0DW-02-OP2LNINB[NK0DW-INDEX];
  VNCSTY01.XGPCD = NKWREC.XGPCD;
  VNCSTY01.SY1STNBR = NK0DW-02-SY1STNBR[NK0DW-INDEX];
  VNCSTY01.SY2CLRID = NK0DW-02-SY2CLRID[NK0DW-INDEX];
  VNCSTY01.XDMCD = NK0DW-02-XDMCD[NK0DW-INDEX];
  VNCSTY01.XQACD = NK0DW-02-XQACD[NK0DW-INDEX];
  VNCSTY01.PC3PONBR = 0;
  ;
  call "IO6470" ("S ", SQLCA, VNCSTY01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if a good return,*/
      converseLib.validationFailed(313);
      NLXREC.NLXERRF = "Y";
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      return;
    else
      TA1REC.TA1DBASE = "DNILO";
      TA1REC.TA1TBLVU = "VNCSTY01";
      NK0DW-LRG-NBR = VNCSTY01.NL-CLM-ID;
      TA1REC.TA1TBLKE = NK0DW01.NK0DW-KEY;
      XPNL005(); /* abort routine*/
    end
  end
  ;
  if (VNCSTY01.ZZZCHGCT != NK0DW-02-ZZZCHGCT[NK0DW-INDEX])
    converseLib.validationFailed(313);
    NLXREC.NLXERRF = "Y";
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    return;
  end
  ;
  VNCSTY01.NL-CLM-LN-QTY = NK0DW-02-MAP-QTY[NK0DW-INDEX];
  VNCSTY01.NIHGMRC = VNCSTY01.NL-CLM-LN-QTY * VNCSTY01.NIHGPRC;
  VNCSTY01.NIHGMRCF = VNCSTY01.NL-CLM-LN-QTY * VNCSTY01.NIHGPRCF;
  VNCSTY01.NIHNMRC = VNCSTY01.NL-CLM-LN-QTY * VNCSTY01.NIHNPRC;
  VNCSTY01.NIHNMRCF = VNCSTY01.NL-CLM-LN-QTY * VNCSTY01.NIHNPRCF;
  VNCSTY01.GLAENT = NKW-SLS-GLAENT;
  VNCSTY01.GLARCID = NKW-SLS-GLARCID;
  VNCSTY01.GLANTAC = NKW-SLS-GLANTAC;
  VNCSTY01.GLASUB = NKW-SLS-GLASUB;
  VNCSTY01.GLAPRJ = NKW-SLS-GLAPRJ;
  ;
  XX0XS01(); /* get current date and time for*/
                                  /* zz-change-faimly*/
  VNCSTY01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VNCSTY01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  call "IO6470" ("U ", SQLCA, VNCSTY01) {isNoRefresh = yes, isExternal = yes}; /* select unique*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCSTY01";
    NK0DW-LRG-NBR = VNCSTY01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0DW01.NK0DW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
end // end NK0DS-U-VNCSTY01

// Process VNCDEF01 updates
Function NK0DS-UPDATE-DEF()
   /* *****************************************************************/
   /* This will controll the updating and inserting of defective*/
   /* claim items.  It uses the claim quantity field in NK0DW06 to*/
   /* determine if a claim item needs to be changed or inserted.  If*/
   /* the quantity is equal to zero, then insert.  If the quantity is*/
   /* different than the map quantity, then change.  All items will be*/
   /* updated if the sales gl code was changed.*/
   /* *****************************************************************/
  ;
  ;
  NLXREC.NLXCPROC = "NK0DS-UPDATE-DEF";
  NLXUPDTF = "N";
  move NK0DW-NEXT-PAGE-NBR to NK0DW-HOLD-PAGE-NBR withV60Compat;
  NK0DW-NEXT-PAGE-NBR = 1;
  ;
   /* Process each page in temp storage, nk-dw-high-page-nbr times.*/
  ;
  while (NK0DW-NEXT-PAGE-NBR <= NK0DW-HIGH-PAGE-NBR)
    NK0DS-GET-TMP-DEF();
    NK0DW-INDEX = 1;
    ;
     /* Process each row in NK0DW02*/
    ;
    while (NK0DW-INDEX <= 12)
      if (NK0DW-SLS-GL-CHG == "Y") /* Sales GL changed, update all itms*/
        if (NK0DW-06-MAP-QTY[NK0DW-INDEX] == 0 /* delete item*/
         && NK0DW-06-NL-CLM-QTY[NK0DW-INDEX] > 0) /* existing item*/
          NLXUPDTF = "Y";
          NK0DS-D-VNCDEF01();
        else
          if (NK0DW-06-NL-CLM-QTY[NK0DW-INDEX] == 0) /* New item to the claim*/
            if (NK0DW-06-SY1STNBR[NK0DW-INDEX] > " ")
              NLXUPDTF = "Y";
              NK0DS-A-VNCDEF01(); /* Add an item*/
            end
          else
            NK0DS-U-VNCDEF01(); /* Update the item*/
          end
        end
      else
        if (NK0DW-06-NL-CLM-QTY[NK0DW-INDEX] == 0) /* New item to the claim*/
          if (NK0DW-06-SY1STNBR[NK0DW-INDEX] > " "
           && NK0DW-06-MAP-QTY[NK0DW-INDEX] > 0)
            NLXUPDTF = "Y";
            NK0DS-A-VNCDEF01(); /* Add an item*/
          end
        else /* Item qantity changed*/
          if (NK0DW-06-MAP-QTY[NK0DW-INDEX] == 0)
            NLXUPDTF = "Y";
            NK0DS-D-VNCDEF01(); /* Delete the item*/
          else
            NK0DS-U-VNCDEF01(); /* Update the item*/
          end
        end
      end
      NK0DW-INDEX = NK0DW-INDEX + 1;
   /* ;*/
   /* if there was trouble updating the database, stop processing*/
   /* ;*/
      if (NLXREC.NLXERRF == "Y")
        return;
      end
    end
    NK0DW-NEXT-PAGE-NBR = NK0DW-NEXT-PAGE-NBR + 1;
  end
   /* ;*/
   /* Update the header with the new claim balance*/
   /* ;*/
  if (NLXUPDTF == "Y")
    NK0DS-UPDATE-HDR();
  end
end // end NK0DS-UPDATE-DEF

// Update the claim header
Function NK0DS-UPDATE-HDR()
   /* *****************************************************************/
   /* This will update the claim header with the new claim balance.*/
   /* *****************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-UPDATE-HDR";
  ;
  set VNCSTY01 empty;
  ;
  VNCHDR01.NL-CLM-ID = NKWREC.NL-CLM-ID;
  ;
   /* select on - VNCHDR01*/
  ;
  call "IO6460" ("S ", SQLCA, VNCHDR01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    TA1REC.TA1DBASE = "DNILO";
    TA1REC.TA1TBLVU = "VNCHDR01";
    NK0DW-LRG-NBR = VNCSTY01.NL-CLM-ID;
    TA1REC.TA1TBLKE = NK0DW01.NK0DW-KEY;
    XPNL005(); /* abort routine*/
  end
  ;
  VNCHDR01.NL-CLM-AMT = 0;
  VNCHDR01.NL-CLM-FCUR-AMT = 0;
  ;
  if (VNCHDR01.XXX-SUM-ZCR-CD == "PR")
    NK0DS-SM-VNCSTY01(); /* Get sum of all items*/
    NK0DS-SM-VNCADJ01(); /* Get sum oa all adjustments*/
  else
    NK0DS-SM-VNCDEF01(); /* get sum of all defective items*/
  end
  if (NLXREC.NLXERRF == "Y") /* summing error*/
    VGVar.handleSysLibraryErrors = 0;
    sysLib.rollback();
    move NK0DW-HOLD-PAGE-NBR to NK0DW-NEXT-PAGE-NBR withV60Compat;
    return;
  end
  if (VNCHDR01.NL-CLM-AMT == 0
   && VNCHDR01.XXX-SUM-ZCR-CD != "DF")
    VNCHDR01.GLAENT = " ";
    VNCHDR01.GLARCID = " ";
    VNCHDR01.GLANTAC = " ";
    VNCHDR01.GLASUB = " ";
    VNCHDR01.GLAPRJ = " ";
    VNCHDR01.OP1CMPNB = 0;
  else
    if (VNCHDR01.GLAENT == " ") /* new claim, update receivable gl*/
      VNCHDR01.GLAENT = NKW-REC-GLAENT;
      VNCHDR01.GLARCID = NKW-REC-GLARCID;
      VNCHDR01.GLANTAC = NKW-REC-GLANTAC;
      VNCHDR01.GLASUB = NKW-REC-GLASUB;
      VNCHDR01.GLAPRJ = NKW-REC-GLAPRJ;
      VNCHDR01.OP1CMPNB = NKWREC.OP1CMPNB;
    end
  end
  ;
  if (VNCHDR01.ZCS-CLM-STAT-CD == "IP")
    if (NK0DW-GL-SUSP-FL == "N")
      VNCHDR01.XXX-USER-ID4 = "SYSTEM";
    end
  else
    if (NK0DW-SLS-GL-CHG == "Y")
      if (NK0DW-GL-SUSP-FL == "Y")
        if (CACLVL[4] == "Y")
          VNCHDR01.XXX-USER-ID4 = COMMAREA.CAUSERID;
          if (VNCHDR01.ZCS-CLM-STAT-CD == "CA")
            VNCHDR01.ZCS-CLM-STAT-CD = "AP";
          end
        end
      else
        VNCHDR01.XXX-USER-ID4 = "SYSTEM";
      end
    end
  end
  ;
  XX0XS01(); /* get current date and time for*/
                                  /* zz-change-faimly*/
  VNCHDR01.ZZZCHGDT = XX0XW01.XX0XWDAT;
  VNCHDR01.ZZZCHGTM = XX0XW01.XX0XWTIM;
  ;
  call "IO6460" ("U ", SQLCA, VNCHDR01) {isNoRefresh = yes, isExternal = yes}; /* read long address*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* if a good return,*/
    /* next sentence*/
  else
    if (SQLCA.VAGen_SQLCODE == 100) /* if a table changed;*/
      converseLib.validationFailed(313);
      NLXREC.NLXERRF = "Y";
      VGVar.handleSysLibraryErrors = 0;
      sysLib.rollback();
      return;
    else
      TA1REC.TA1DBASE = "DNILO";
      TA1REC.TA1TBLVU = "VNCHDR01";
      NK0DW-LRG-NBR = VNCSTY01.NL-CLM-ID;
      TA1REC.TA1TBLKE = NK0DW01.NK0DW-KEY;
      XPNL005(); /* abort routine*/
    end
  end
end // end NK0DS-UPDATE-HDR

// Process VNCSTY01 updates
Function NK0DS-UPDATE-STY()
   /* *****************************************************************/
   /* This will controll the updating and inserting of product related*/
   /* claim items.  It uses the claim quantity field in NK0DW02 to*/
   /* determine if a claim item needs to be changed or inserted.  If*/
   /* the quantity is equal to zero, then insert.  If the quantity is*/
   /* different than the map quantity, then change.  All items will be*/
   /* updated if the sales gl code was changed.*/
   /* *****************************************************************/
  ;
  NLXUPDTF = "N";
  NLXREC.NLXCPROC = "NK0DS-UPDATE-STY";
  move NK0DW-NEXT-PAGE-NBR to NK0DW-HOLD-PAGE-NBR withV60Compat;
  NK0DW-NEXT-PAGE-NBR = 1;
  ;
   /* Process each page in temp storage, nk-dw-high-page-nbr times.*/
  ;
  while (NK0DW-NEXT-PAGE-NBR <= NK0DW-HIGH-PAGE-NBR)
    NK0DS-GET-TMP-STG();
    NK0DW-INDEX = 1;
    ;
     /* Process each row in NK0DW02*/
    ;
    while (NK0DW-INDEX <= 12)
      if (NK0DW-SLS-GL-CHG == "Y") /* Sales GL changed, update all itms*/
        if (NK0DW-02-MAP-QTY[NK0DW-INDEX] == 0 /* delete item*/
         && NK0DW-02-NL-CLM-QTY[NK0DW-INDEX] > 0) /* existing item*/
          NLXUPDTF = "Y";
          NK0DS-D-VNCSTY01(); /* Delete claim item*/
          NK0DS-D-VNCIVX01(); /* Update claim cross x-ref*/
        else
          if (NK0DW-02-NL-CLM-QTY[NK0DW-INDEX] == 0) /* New item to the claim*/
            if (NK0DW-02-SY1STNBR[NK0DW-INDEX] > " ")
              NLXUPDTF = "Y";
              NK0DS-A-VNCSTY01(); /* Add an item*/
              NK0DS-A-VNCIVX01(); /* Update claim cross x-ref*/
            end
          else
            NLXUPDTF = "Y";
            NK0DS-U-VNCSTY01(); /* Update the item*/
          end
        end
      else
        if (NK0DW-02-NL-CLM-QTY[NK0DW-INDEX] == 0) /* New item to the claim*/
          if (NK0DW-02-SY1STNBR[NK0DW-INDEX] > " ")
            NLXUPDTF = "Y";
            NK0DS-A-VNCSTY01(); /* Add an item*/
            NK0DS-A-VNCIVX01(); /* Update claim cross x-ref*/
          end
        else /* Item qantity changed*/
          if (NK0DW-02-MAP-QTY[NK0DW-INDEX] == 0)
            NLXUPDTF = "Y";
            NK0DS-D-VNCSTY01(); /* Delete the item*/
            NK0DS-D-VNCIVX01(); /* Update claim cross x-ref*/
          else
            if (NK0DW-02-NL-CLM-QTY[NK0DW-INDEX] != 
            NK0DW-02-MAP-QTY[NK0DW-INDEX])
              NK0DS-U-VNCSTY01(); /* Update the item*/
              NLXUPDTF = "Y";
            end
          end
        end
      end
      NK0DW-INDEX = NK0DW-INDEX + 1;
   /* ;*/
   /* if there was trouble updating the database, stop processing*/
   /* ;*/
      if (NLXREC.NLXERRF == "Y")
        return;
      end
    end
    NK0DW-NEXT-PAGE-NBR = NK0DW-NEXT-PAGE-NBR + 1;
  end
   /* ;*/
   /* Update the header with the new claim balance*/
   /* ;*/
  if (NLXUPDTF == "Y")
    NK0DS-UPDATE-HDR();
  end
end // end NK0DS-UPDATE-STY

// Update NK0DW06 wrk stg
Function NK0DS-UPDT-NK0DW06()
   /* ***********************************************************************/
   /* Update NK0DW06 working storage with map data*/
   /* ***********************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-UPTD-NK0DW06";
  ;
  NK0DW-INDEX = 1;
  ;
  while (NK0DW-INDEX <= 12)
    ;
    NK0DW-06-XGPCD[NK0DW-INDEX] = NKWREC.XGPCD;
    NK0DW-06-SY1STNBR[NK0DW-INDEX] = NK0DM200.SY1STNBR[NK0DW-INDEX];
    NK0DW-06-SY2CLRID[NK0DW-INDEX] = NK0DM200.SY2CLRID[NK0DW-INDEX];
    NK0DW-06-XDMCD[NK0DW-INDEX] = NK0DM200.XDMCD[NK0DW-INDEX];
    NK0DW-06-MAP-QTY[NK0DW-INDEX] = NK0DM200.NK0DM-200-QTY[NK0DW-INDEX];
    NK0DW-06-XQACD[NK0DW-INDEX] = "01";
    NK0DW-06-CLM-XUMDESC[NK0DW-INDEX] = NK0DM200.XUMDESC[NK0DW-INDEX];
    if (NK0DM200.XSNABRV[NK0DW-INDEX] > " ")
      if (NK0DM200.XSNABRV[NK0DW-INDEX] in XSNTBL.XSNABRV)
        NK0DW-06-XSECD[NK0DW-INDEX] = XSNTBL.XSECD[sysVar.arrayIndex];
        NK0DW-06-XSNYR[NK0DW-INDEX] = XSNTBL.XSNYR[sysVar.arrayIndex];
      end
    end
    NK0DW-06-FY1FCTYC[NK0DW-INDEX] = NK0DM200.FY1FCTYC[NK0DW-INDEX];
    NK0DW-06-PC3POIDT[NK0DW-INDEX] = NK0DM200.PC3POIDT[NK0DW-INDEX];
    NK0DW-06-NIHNPRC[NK0DW-INDEX] = NK0DM200.NK0DM-200-PRC[NK0DW-INDEX];
    NK0DW-06-NIHNMRC[NK0DW-INDEX] = NK0DM-200-PRC[NK0DW-INDEX] *     NK0DM-200-QTY[NK0DW-INDEX];
    NK0DW-INDEX = NK0DW-INDEX + 1;
  end
  ;
end // end NK0DS-UPDT-NK0DW06

// Update VNCDEF TEMP STORAGE
Function NK0DS-UPDT-TMP-DEF()
   /* ***********************************************************************/
   /* Update temp storage*/
   /* ***********************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-UPTD-TMP-DEF";
  TA1REC.TA1LOC = "NK0DS-UPTD-TMP-DEF";
  TA5REC.TA5TSQIX = NK0DW-NEXT-PAGE-NBR;
  move NK0DW-W03-SIZE to NK0DW-06-LENGTH withV60Compat;
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  ;
  TA5REC.TA5FNCCD = "U"; /* Function code*/
  ;
  try
    call "TA0050" (NK0DW06, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  else
    ;
   /* ------------------------------------------------------------*/
    /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
    ;
    converseLib.validationFailed(299); /* Indicate system error*/
    ;
    XPNL-006(); /* abend routine*/
    ;
  end
  ;
end // end NK0DS-UPDT-TMP-DEF

// Update temp storage
Function NK0DS-UPDT-TMP-STG()
   /* ***********************************************************************/
   /* Update temp storage*/
   /* ***********************************************************************/
  ;
  NLXREC.NLXCPROC = "NK0DS-UPTD-TMP-STG";
  TA1REC.TA1LOC = "NK0DS-UPTD-TMP-STG";
  TA5REC.TA5TSQIX = NK0DW-NEXT-PAGE-NBR;
  move NK0DW-W02-SIZE to NK0DW-02-LENGTH withV60Compat;
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  ;
  TA5REC.TA5FNCCD = "U"; /* Function code*/
  ;
  try
    call "TA0050" (NK0DW02, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  else
    ;
   /* ------------------------------------------------------------*/
    /* Otherwise, indicate that a system error occurred.*/
   /* ------------------------------------------------------------*/
    ;
    converseLib.validationFailed(299); /* Indicate system error*/
    ;
    XPNL-006(); /* abend routine*/
    ;
  end
  ;
end // end NK0DS-UPDT-TMP-STG

//*** RECORD=NK0DW01 ****
// ********** NK0D APPLICATION WORKING STORAGE RECORD *********
// ***********************
Record NK0DW01 type basicRecord
  5 NK0DW-GROUP NK0DW-GROUP ; 
    10 NK0DW-ZZZCHGCT NK0DW-ZZZCHGCT ; 
    10 NK0DW-INDEX NK0DW-INDEX ; 
    10 NK0DW-INDEX-2 NK0DW-INDEX-2 ; 
    10 NK0DW-INDEX-3 NK0DW-INDEX-3 ; 
    10 NK0DW-INX4 NK0DW-INX4 ; 
    10 NK0DW-HIGH-PAGE-NBR NK0DW-HIGH-PAGE-NBR ; 
    10 NK0DW-NEW-PAGE-NBR NK0DW-NEW-PAGE-NBR ; 
    10 NK0DW-NEXT-PAGE-NBR NK0DW-NEXT-PAGE-NBR ; 
    10 NK0DW-HOLD-PAGE-NBR NK0DW-HOLD-PAGE-NBR ; 
    10 NK0DW-MAP300-FM-PAGE NK0DW-MAP300-FM-PAGE ; 
    10 NK0DW-MAP300-TO-PAGE NK0DW-MAP300-TO-PAGE ; 
    10 NK0DW-MAP300-HD-PAGE NK0DW-MAP300-HD-PAGE ; 
    10 NK0DW-W03-ARRAY-CNT NK0DW-W03-ARRAY-CNT ; 
    10 NK0DW-STYLE-FOUND NK0DW-STYLE-FOUND ; 
    10 NK0DW-INVOICE-FOUND NK0DW-INVOICE-FOUND ; 
    10 NK0DW-ERR-FLAG NK0DW-ERR-FLAG ; 
    10 NK0DW-W02-SIZE NK0DW-W02-SIZE ; 
    10 NK0DW-W03-SIZE NK0DW-W03-SIZE ; 
    10 NK0DW-IVC-BAL NK0DW-IVC-BAL ; 
    10 NK0DW-RECEIVABLE-GL NK0DW-RECEIVABLE-GL ; 
      15 NK0DW-REC-GLAENT NK0DW-REC-GLAENT ; 
      15 NK0DW-REC-GLARCID NK0DW-REC-GLARCID ; 
      15 NK0DW-REC-GLANTAC NK0DW-REC-GLANTAC ; 
      15 NK0DW-REC-GLASUB NK0DW-REC-GLASUB ; 
      15 NK0DW-REC-GLAPRJ NK0DW-REC-GLAPRJ ; 
    10 NK0DW-SALES-GL NK0DW-SALES-GL ; 
      15 NK0DW-SLS-GLAENT NK0DW-SLS-GLAENT ; 
      15 NK0DW-SLS-GLARCID NK0DW-SLS-GLARCID ; 
      15 NK0DW-SLS-GLANTAC NK0DW-SLS-GLANTAC ; 
      15 NK0DW-SLS-GLASUB NK0DW-SLS-GLASUB ; 
      15 NK0DW-SLS-GLAPRJ NK0DW-SLS-GLAPRJ ; 
    10 NK0DW-KEY NK0DW-KEY ; 
      15 NK0DW-LRG-NBR NK0DW-LRG-NBR ; 
      15 * char(1) ; 
      15 NK0DW-CHR-KEY NK0DW-CHR-KEY ; 
        20 NK0DW-IND NK0DW-IND ; 
        20 * char(1) ; // display small integer field
        20 NK0DW-SML-NBR NK0DW-SML-NBR ; 
    10 NK0DW-SY1-XUMCONVF NK0DW-SY1-XUMCONVF ; 
    10 NK0DW-DEF-XUMCONVF NK0DW-DEF-XUMCONVF ; 
    10 NK0DW-SLS-GL-CHG NK0DW-SLS-GL-CHG ; 
    10 NK0DW-GL-SUSP-FL NK0DW-GL-SUSP-FL ; 
    10 NK0DW-IVC-ARRAY NK0DW-IVC-ARRAY [12] ; 
    10 NK0DW-MAP-PROD NK0DW-MAP-PROD ; 
      15 NK0DW-MAP-IVC NK0DW-MAP-IVC ; 
      15 NK0DW-MAP-STY NK0DW-MAP-STY ; 
      15 NK0DW-MAP-CLR NK0DW-MAP-CLR ; 
      15 NK0DW-MAP-DIM NK0DW-MAP-DIM ; 
    10 NK0DW-INV-SEL-FLAG NK0DW-INV-SEL-FLAG ; 
    10 NK0DW-MULTI-CLM-ITM NK0DW-MULTI-CLM-ITM ; 
    10 NK0DW-PRODUCT NK0DW-PRODUCT ; 
      15 NK0DW-SY1STNBR NK0DW-SY1STNBR ; 
      15 NK0DW-HYPHEN-1 NK0DW-HYPHEN-1 ; 
      15 NK0DW-SY2CLRID NK0DW-SY2CLRID ; 
      15 NK0DW-HYPHEN-2 NK0DW-HYPHEN-2 ; 
      15 NK0DW-XDMCD NK0DW-XDMCD ; 
    10 NK0DW-MAP-DEF NK0DW-MAP-DEF ; 
      15 NK0DW-DEF-XGPCD NK0DW-DEF-XGPCD ; 
      15 NK0DW-DEF-SY1STNBR NK0DW-DEF-SY1STNBR ; 
      15 NK0DW-DEF-SY2CLRID NK0DW-DEF-SY2CLRID ; 
      15 NK0DW-DEF-XDMCD NK0DW-DEF-XDMCD ; 
      15 NK0DW-DEF-FY1FCTYC NK0DW-DEF-FY1FCTYC ; 
      15 NK0DW-DEF-PC3POIDT NK0DW-DEF-PC3POIDT ; 
      15 NK0DW-DEF-XSECD NK0DW-DEF-XSECD ; 
      15 NK0DW-DEF-XSNYR NK0DW-DEF-XSNYR ; 
    10 NK0DW-SEASON NK0DW-SEASON ; 
      15 NK0DW-XSECD NK0DW-XSECD ; 
      15 NK0DW-XSNYR NK0DW-XSNYR ; 
    10 NK0DW-SEASON-YEAR NK0DW-SEASON-YEAR ; 
      15 NK0DW-CENTURY NK0DW-CENTURY ; 
      15 NK0DW-YEAR NK0DW-YEAR ; 
    10 NK0DW-PC3POIDT NK0DW-PC3POIDT ; 
      15 NK0DW-PO-YEAR NK0DW-PO-YEAR ; 
      15 NK0DW-PO-MONTH1 NK0DW-PO-MONTH1 ; 
      15 NK0DW-PO-MONTH2 NK0DW-PO-MONTH2 ; 
    10 NK0DW-MOD-FLAGS NK0DW-MOD-FLAGS ; 
      15 NK0DW-SLS-GL-MOD-FL NK0DW-SLS-GL-MOD-FL ; 
      15 NK0DW-PAGE-MOD-FL NK0DW-PAGE-MOD-FL ; 
      15 NK0DW-MOD-ARRAY NK0DW-MOD-ARRAY [12] ; 
        20 NK0DW-MOD-SY1STNBR NK0DW-MOD-SY1STNBR ; 
        20 NK0DW-MOD-SY2CLRID NK0DW-MOD-SY2CLRID ; 
        20 NK0DW-MOD-XDMCD NK0DW-MOD-XDMCD ; 
        20 NK0DW-MOD-QTY NK0DW-MOD-QTY ; 
        20 NK0DW-MOD-XSNABRV NK0DW-MOD-XSNABRV ; 
        20 NK0DW-MOD-FY1FCTYC NK0DW-MOD-FY1FCTYC ; 
        20 NK0DW-MOD-PC3POIDT NK0DW-MOD-PC3POIDT ; 
        20 NK0DW-MOD-XUMDESC NK0DW-MOD-XUMDESC ; 
        20 NK0DW-MOD-PRC NK0DW-MOD-PRC ; 
    10 NK0DW-FIRST-IVC-FL NK0DW-FIRST-IVC-FL ; 
end // end NK0DW01

//*** RECORD=NK0DW02 ****
// ************  MAP100 temp storage record  *****************
// ***********************
Record NK0DW02 type basicRecord
  5 NK0DW-02-LENGTH NK0DW-02-LENGTH ; 
  5 NK0DW-02-GROUP NK0DW-02-GROUP ; 
    10 NK0DW-02-NL-CLM-QTY NK0DW-02-NL-CLM-QTY [12] ; 
    10 NK0DW-02-MAP-QTY NK0DW-02-MAP-QTY [12] ; 
    10 NK0DW-02-XGPCD NK0DW-02-XGPCD [12] ; 
    10 NK0DW-02-SY1STNBR NK0DW-02-SY1STNBR [12] ; 
    10 NK0DW-02-SY2CLRID NK0DW-02-SY2CLRID [12] ; 
    10 NK0DW-02-XDMCD NK0DW-02-XDMCD [12] ; 
    10 NK0DW-02-CLM-XUMDESC NK0DW-02-CLM-XUMDESC [12] ; 
    10 NK0DW-02-NIHNPRC NK0DW-02-NIHNPRC [12] ; 
    10 NK0DW-02-NIHNMRC NK0DW-02-NIHNMRC [12] ; 
    10 NK0DW-02-NIDIVCID NK0DW-02-NIDIVCID [12] ; 
    10 NK0DW-02-OP2LNINB NK0DW-02-OP2LNINB [12] ; 
    10 NK0DW-02-XQACD NK0DW-02-XQACD [12] ; 
    10 NK0DW-02-ZZZCHGCT NK0DW-02-ZZZCHGCT [12] ; 
    10 NK0DW-02-MULTI-CLM-ITM NK0DW-02-MULTI-CLM-ITM [12] ; 
end // end NK0DW02

//*** RECORD=NK0DW03 ****
// **** NK0D Working storage MAP300, Invoice item array  ******
// **** Kshaw added nihshpqty 4/21/93, & display it      ******
// LTANIK 03-27-01 INCREASED SIZE FROM 209 TO 999        ******
// ***********************
Record NK0DW03 type basicRecord
  5 NK0DW-03-GROUP char(71) [999] ; // NK0DW03 group item
    10 NK0DW-03-NL-CLM-QTY NK0DW-03-NL-CLM-QTY ; 
    10 NK0DW-03-NIDIVCID NK0DW-03-NIDIVCID ; 
    10 NK0DW-03-XGPCD NK0DW-03-XGPCD ; 
    10 NK0DW-03-SY1STNBR NK0DW-03-SY1STNBR ; 
    10 NK0DW-03-SY2CLRID NK0DW-03-SY2CLRID ; 
    10 NK0DW-03-XDMCD NK0DW-03-XDMCD ; 
    10 NK0DW-03-OP2LNINB NK0DW-03-OP2LNINB ; 
    10 NK0DW-03-PRD-DESC NK0DW-03-PRD-DESC ; 
    10 NK0DW-03-XUMDESC NK0DW-03-XUMDESC ; 
    10 NK0DW-03-NIHNPRC NK0DW-03-NIHNPRC ; 
    10 NK0DW-03-MULTI-CLM-ITM NK0DW-03-MULTI-CLM-ITM ; 
    10 NK0DW-03-NIHSHPQTY NK0DW-03-NIHSHPQTY ; 
    10 NK0DW-03-XQACD NK0DW-03-XQACD ; 
end // end NK0DW03

//*** RECORD=NK0DW04 ****
// *** NK0D Working storage new claims items on MAP100      ***
// ***********************
Record NK0DW04 type basicRecord
  5 NK0DW-04-GROUP NK0DW-04-GROUP ; 
    10 NK0DW-NEW-PRODS NK0DW-NEW-PRODS [300] ; 
      15 NK0DW-INVOICE NK0DW-INVOICE ; 
      15 NK0DW-STYLE NK0DW-STYLE ; 
      15 NK0DW-COLOR NK0DW-COLOR ; 
      15 NK0DW-DIM NK0DW-DIM ; 
    10 NK0DW-PAGE NK0DW-PAGE [300] ; 
    10 NK0DW-ROW NK0DW-ROW [300] ; 
end // end NK0DW04

//*** RECORD=NK0DW05 ****
// ********** NK0D APPLICATION WORKING STORAGE RECORD *********
// ***********************
Record NK0DW05 type basicRecord
  10 NK0DW-05-IO-TASK NK0DW-05-IO-TASK ; 
  10 NK0DW-05-IO-NET-AMT NK0DW-05-IO-NET-AMT ; 
  10 NK0DW-05-IO-NET-FCUR NK0DW-05-IO-NET-FCUR ; 
  10 NK0DW-05-IO-IND1 NK0DW-05-IO-IND1 ; 
    15 NK0DW-05-IO-IND2 int ; // Arrary color of new items
end // end NK0DW05

//*** RECORD=NK0DW06 ****
// ************  MAP300 temp storage record  *****************
// ***********************
Record NK0DW06 type basicRecord
  5 NK0DW-06-LENGTH NK0DW-06-LENGTH ; 
  5 NK0DW-06-GROUP NK0DW-06-GROUP ; 
    10 NK0DW-06-NL-CLM-QTY NK0DW-06-NL-CLM-QTY [12] ; 
    10 NK0DW-06-MAP-QTY NK0DW-06-MAP-QTY [12] ; 
    10 NK0DW-06-XGPCD NK0DW-06-XGPCD [12] ; 
    10 NK0DW-06-SY1STNBR NK0DW-06-SY1STNBR [12] ; 
    10 NK0DW-06-SY2CLRID NK0DW-06-SY2CLRID [12] ; 
    10 NK0DW-06-XDMCD NK0DW-06-XDMCD [12] ; 
    10 NK0DW-06-XQACD NK0DW-06-XQACD [12] ; 
    10 NK0DW-06-CLM-XUMDESC NK0DW-06-CLM-XUMDESC [12] ; 
    10 NK0DW-06-XSECD NK0DW-06-XSECD [12] ; 
    10 NK0DW-06-XSNYR NK0DW-06-XSNYR [12] ; 
    10 NK0DW-06-FY1FCTYC NK0DW-06-FY1FCTYC [12] ; 
    10 NK0DW-06-PC3POIDT NK0DW-06-PC3POIDT [12] ; 
    10 NK0DW-06-NIHNPRC NK0DW-06-NIHNPRC [12] ; 
    10 NK0DW-06-NIHNMRC NK0DW-06-NIHNMRC [12] ; 
    10 NK0DW-06-ZZZCHGCT NK0DW-06-ZZZCHGCT [12] ; 
end // end NK0DW06

//*** RECORD=NK0DW07 ****
// ********* Defective new style dup array   *****************
// ***********************
Record NK0DW07 type basicRecord
  5 NK0DW-NEW-DEFS NK0DW-NEW-DEFS [300] ; 
    10 NK0DW-07-XGPCD NK0DW-07-XGPCD ; 
    10 NK0DW-07-SY1STNBR NK0DW-07-SY1STNBR ; 
    10 NK0DW-07-SY2CLRID NK0DW-07-SY2CLRID ; 
    10 NK0DW-07-XDMCD NK0DW-07-XDMCD ; 
    10 NK0DW-07-FY1FCTYC NK0DW-07-FY1FCTYC ; 
    10 NK0DW-07-PC3POIDT NK0DW-07-PC3POIDT ; 
    10 NK0DW-07-XSECD NK0DW-07-XSECD ; 
    10 NK0DW-07-XSNYR NK0DW-07-XSNYR ; 
  5 NK0DW-07-ROW NK0DW-07-ROW [300] ; 
  5 NK0DW-07-PAGE NK0DW-07-PAGE [300] ; 
end // end NK0DW07

//*** RECORD=NK0DW08 ****
// ***********************************************************
// *                                                         *
// * RECORD NAME: NK0DW08                                    *
// *                                                         *
// * THIS RECORD IS USED TO CALL THE INTERNATIONAL PRICING   *
// * ROUTINE.  IT IS USED TO RETREIVE THE PRICE OF A GIVEN   *
// * STYLE.                                                  *
// *                                                         *
// *  WHO          WHEN      WHY                             *
// * ______      ________    _______________________________ *
// * JSHANN      02/09/93    DATE OF BIRTH                   *
// *                                                         *
// ***********************************************************
// ***********************
Record NK0DW08 type basicRecord
  5 NK0DW-08-GROUP NK0DW-08-GROUP ; 
    10 NK0DW-08-CU-CO-ID NK0DW-08-CU-CO-ID ; 
    10 NK0DW-08-CU-STOR-ID NK0DW-08-CU-STOR-ID ; 
    10 NK0DW-08-XAU-ACCT-CLS-CD NK0DW-08-XAU-ACCT-CLS-CD ; 
    10 NK0DW-08-ZAR-ACCT-REG-CD NK0DW-08-ZAR-ACCT-REG-CD ; 
    10 NK0DW-08-ZFC-CRCY-CD NK0DW-08-ZFC-CRCY-CD ; 
    10 NK0DW-08-PC-PO-MO-RNG NK0DW-08-PC-PO-MO-RNG ; 
    10 NK0DW-08-CURRENT-DATE NK0DW-08-CURRENT-DATE ; 
    10 NK0DW-08-XSN-APPL-SESN-BDT NK0DW-08-XSN-APPL-SESN-BDT ; 
    10 NK0DW-08-XGP-GPC-CD NK0DW-08-XGP-GPC-CD ; 
    10 NK0DW-08-XUM-UOM-CD NK0DW-08-XUM-UOM-CD ; 
    10 NK0DW-08-SY-STY-NBR NK0DW-08-SY-STY-NBR ; 
    10 NK0DW-08-SY-COLR-CD-ID NK0DW-08-SY-COLR-CD-ID ; 
    10 NK0DW-08-XDM-DIM-CD NK0DW-08-XDM-DIM-CD ; 
    10 NK0DW-08-PRICE NK0DW-08-PRICE ; 
    10 NK0DW-08-RETURN-CODE NK0DW-08-RETURN-CODE ; 
    10 NK0DW-08-RETURN-TABLE NK0DW-08-RETURN-TABLE ; 
    10 NK0DW-08-RETURN-VIEW NK0DW-08-RETURN-VIEW ; 
    10 NK0DW-08-RETURN-KEY NK0DW-08-RETURN-KEY ; 
    10 NK0DW-08-RETURN-LOCATION NK0DW-08-RETURN-LOCATION ; 
    10 * char(2370) ; // Filler
end // end NK0DW08

// NK0DW02 Unit of measure desc
DataItem NK0DW-02-CLM-XUMDESC char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW02 group item
DataItem NK0DW-02-GROUP char(780)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW02 Length record
DataItem NK0DW-02-LENGTH num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0DW02 Map Quantity
DataItem NK0DW-02-MAP-QTY num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0DW02 Flag, itm on multi clm
DataItem NK0DW-02-MULTI-CLM-ITM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW02 Invoice ID
DataItem NK0DW-02-NIDIVCID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0DW02 Ivc item extended amt
DataItem NK0DW-02-NIHNMRC num(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0DW02 Invoice item net price
DataItem NK0DW-02-NIHNPRC num(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0DW02 Claim quantity
DataItem NK0DW-02-NL-CLM-QTY num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0DW02 Ivc Item OP Line NBR
DataItem NK0DW-02-OP2LNINB smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0DW02 Style
DataItem NK0DW-02-SY1STNBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW02 Color
DataItem NK0DW-02-SY2CLRID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW02 Dim
DataItem NK0DW-02-XDMCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW02 XGP-GPC-CD
DataItem NK0DW-02-XGPCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW02 Ivc Item XQACD
DataItem NK0DW-02-XQACD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW02 Claim item last change
DataItem NK0DW-02-ZZZCHGCT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0DW03 Flag, itm on multi clm
DataItem NK0DW-03-MULTI-CLM-ITM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW03 Invoice Id
DataItem NK0DW-03-NIDIVCID num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0DW03 Net line item price
DataItem NK0DW-03-NIHNPRC num(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NK0DW-03-NIHSHPQTY num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0DW03 Claim quantity
DataItem NK0DW-03-NL-CLM-QTY num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0DW03 Ivc Item OP Line NBR
DataItem NK0DW-03-OP2LNINB smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0DW03 Short Product Desc
DataItem NK0DW-03-PRD-DESC char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW03 Style
DataItem NK0DW-03-SY1STNBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW03 Color
DataItem NK0DW-03-SY2CLRID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW03 Dim
DataItem NK0DW-03-XDMCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW03 GPC
DataItem NK0DW-03-XGPCD char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW03 XQACD from IVC item
DataItem NK0DW-03-XQACD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW03 Unit of Measure Desc
DataItem NK0DW-03-XUMDESC char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW group item
DataItem NK0DW-04-GROUP char(5700)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Arrary style of new items
DataItem NK0DW-05-IO-IND1 int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Arrary of new claim items
DataItem NK0DW-05-IO-NET-AMT decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Arrary ivc id of new items
DataItem NK0DW-05-IO-NET-FCUR decimal(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0DW group item
DataItem NK0DW-05-IO-TASK char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nk0dw06 Unit of measure desc
DataItem NK0DW-06-CLM-XUMDESC char(5)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW06 Factory code
DataItem NK0DW-06-FY1FCTYC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nk0dw06 group item
DataItem NK0DW-06-GROUP char(840)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nk0dw06 Length record
DataItem NK0DW-06-LENGTH num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nk0dw06 Map Quantity
DataItem NK0DW-06-MAP-QTY num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nk0dw06 Ivc item extended amt
DataItem NK0DW-06-NIHNMRC num(9,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nk0dw06 Invoice item net price
DataItem NK0DW-06-NIHNPRC num(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nk0dw06 Claim quantity
DataItem NK0DW-06-NL-CLM-QTY num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0DW06 Po id month range
DataItem NK0DW-06-PC3POIDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nk0dw06 Style
DataItem NK0DW-06-SY1STNBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nk0dw06 Color
DataItem NK0DW-06-SY2CLRID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nk0dw06 Dim
DataItem NK0DW-06-XDMCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nk0dw06 XGP-GPC-CD
DataItem NK0DW-06-XGPCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nk0dw06 quality
DataItem NK0DW-06-XQACD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NKODW06 Season code
DataItem NK0DW-06-XSECD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW06 Season year
DataItem NK0DW-06-XSNYR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nk0dw06 Claim item last change
DataItem NK0DW-06-ZZZCHGCT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0DW06 Factory code
DataItem NK0DW-07-FY1FCTYC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NK0DW-07-PAGE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0DW06 Po id month range
DataItem NK0DW-07-PC3POIDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NK0DW-07-ROW num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nk0dw06 Style
DataItem NK0DW-07-SY1STNBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nk0dw06 Color
DataItem NK0DW-07-SY2CLRID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nk0dw06 Dim
DataItem NK0DW-07-XDMCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nk0dw06 XGP-GPC-CD
DataItem NK0DW-07-XGPCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NKODW06 Season code
DataItem NK0DW-07-XSECD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW06 Season year
DataItem NK0DW-07-XSNYR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0DW08 Customer Id
DataItem NK0DW-08-CU-CO-ID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0DW08 Store Id
DataItem NK0DW-08-CU-STOR-ID smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0DW08 Current date
DataItem NK0DW-08-CURRENT-DATE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0DW08 Group Item
DataItem NK0DW-08-GROUP char(2500)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW08 PO id month range
DataItem NK0DW-08-PC-PO-MO-RNG int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0DW08 Product price
DataItem NK0DW-08-PRICE decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0DW08 Rtn Code of NK1080
DataItem NK0DW-08-RETURN-CODE char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW08 Key of table w/error
DataItem NK0DW-08-RETURN-KEY char(40)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW08 Location of error
DataItem NK0DW-08-RETURN-LOCATION char(30)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW08 DB2 table with error
DataItem NK0DW-08-RETURN-TABLE char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW08 DB2 view with error
DataItem NK0DW-08-RETURN-VIEW char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW08 Color
DataItem NK0DW-08-SY-COLR-CD-ID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW08 Style
DataItem NK0DW-08-SY-STY-NBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW08 Account class code
DataItem NK0DW-08-XAU-ACCT-CLS-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW08 Dimension
DataItem NK0DW-08-XDM-DIM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW08 GPC code
DataItem NK0DW-08-XGP-GPC-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW08 Apparel seasn begin dt
DataItem NK0DW-08-XSN-APPL-SESN-BDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0DW08 Unit of measure
DataItem NK0DW-08-XUM-UOM-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW08 Accounting region
DataItem NK0DW-08-ZAR-ACCT-REG-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW08 Currency code
DataItem NK0DW-08-ZFC-CRCY-CD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW01 Season century value
DataItem NK0DW-CENTURY num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// char key part
DataItem NK0DW-CHR-KEY char(7)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Arrary color of new items
DataItem NK0DW-COLOR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW01 Def factory
DataItem NK0DW-DEF-FY1FCTYC char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW01 Def PO Month Id
DataItem NK0DW-DEF-PC3POIDT int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0DW01 Def style
DataItem NK0DW-DEF-SY1STNBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW01 Def color
DataItem NK0DW-DEF-SY2CLRID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW01 Def dim
DataItem NK0DW-DEF-XDMCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW01 Def gpc
DataItem NK0DW-DEF-XGPCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW01 Def season code
DataItem NK0DW-DEF-XSECD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW01 Def season year
DataItem NK0DW-DEF-XSNYR smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// defective XUM_CONV_FCTR
DataItem NK0DW-DEF-XUMCONVF decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Arrary DIM of new items
DataItem NK0DW-DIM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW01 Item error flag
DataItem NK0DW-ERR-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW01 First invoice flag
DataItem NK0DW-FIRST-IVC-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sales GL suspence flag
DataItem NK0DW-GL-SUSP-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW01 group item
DataItem NK0DW-GROUP char(338)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Highest page # in temp storage
DataItem NK0DW-HIGH-PAGE-NBR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Next page number to converse
DataItem NK0DW-HOLD-PAGE-NBR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0DW01 first hyphen in prod s
DataItem NK0DW-HYPHEN-1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW01 second hyphen in prod
DataItem NK0DW-HYPHEN-2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// indicator
DataItem NK0DW-IND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW01 Screen index
DataItem NK0DW-INDEX num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0DW01 work index
DataItem NK0DW-INDEX-2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0DW01 index for NK0DW04
DataItem NK0DW-INDEX-3 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0DW01 invoice select flag
DataItem NK0DW-INV-SEL-FLAG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Arrary ivc id of new items
DataItem NK0DW-INVOICE int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0DW01 Invoice found in ivx
DataItem NK0DW-INVOICE-FOUND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW01 index for NK0DW03
DataItem NK0DW-INX4 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0DW01 inv arrary for MAP300
DataItem NK0DW-IVC-ARRAY int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Balance of invoice item
DataItem NK0DW-IVC-BAL num(7)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Abend key fields
DataItem NK0DW-KEY char(17)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Display large interger field
DataItem NK0DW-LRG-NBR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current item color
DataItem NK0DW-MAP-CLR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW01 Group level of Def itm
DataItem NK0DW-MAP-DEF char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current item DIm
DataItem NK0DW-MAP-DIM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current item invoice
DataItem NK0DW-MAP-IVC int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Current item being tested
DataItem NK0DW-MAP-PROD char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Current item style
DataItem NK0DW-MAP-STY char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW01 from page nbr MAP300
DataItem NK0DW-MAP300-FM-PAGE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0DW01 Hold page nbr MAP300
DataItem NK0DW-MAP300-HD-PAGE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0DW01 to page nbr MAP300
DataItem NK0DW-MAP300-TO-PAGE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0DW01 Map 200 mod flag array
DataItem NK0DW-MOD-ARRAY char(9)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW01 Group level for mod fl
DataItem NK0DW-MOD-FLAGS char(110)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW01 Factory mod flag
DataItem NK0DW-MOD-FY1FCTYC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW01 PO month mod flag
DataItem NK0DW-MOD-PC3POIDT char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW01 Price mod flag
DataItem NK0DW-MOD-PRC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW01 Quantity mod flag
DataItem NK0DW-MOD-QTY char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW01 Style mod flag
DataItem NK0DW-MOD-SY1STNBR char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW01 Color mod flag
DataItem NK0DW-MOD-SY2CLRID char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW01 XDM mod flag
DataItem NK0DW-MOD-XDMCD char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW01 Season  mod flag
DataItem NK0DW-MOD-XSNABRV char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW01 UOM mod flag
DataItem NK0DW-MOD-XUMDESC char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW01 item on multi claims
DataItem NK0DW-MULTI-CLM-ITM char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// nk0dw06 group item
DataItem NK0DW-NEW-DEFS char(25)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// new page number for map300
DataItem NK0DW-NEW-PAGE-NBR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Arrary of new claim items
DataItem NK0DW-NEW-PRODS char(14)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Next page number to converse
DataItem NK0DW-NEXT-PAGE-NBR num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NK0DW-PAGE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0DW01 Page number mod flag
DataItem NK0DW-PAGE-MOD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW01 PO ID month range
DataItem NK0DW-PC3POIDT num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0DW01 PO ID month 1
DataItem NK0DW-PO-MONTH1 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0DW01 PO ID month 2
DataItem NK0DW-PO-MONTH2 num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0DW01 PO ID year
DataItem NK0DW-PO-YEAR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0DW01 Product display string
DataItem NK0DW-PRODUCT char(13)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Receivable GLAENT
DataItem NK0DW-REC-GLAENT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Receivable GLANTAC
DataItem NK0DW-REC-GLANTAC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Receivable GLAPRJ
DataItem NK0DW-REC-GLAPRJ char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Receivable GLARCID
DataItem NK0DW-REC-GLARCID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Receivable GLASUB
DataItem NK0DW-REC-GLASUB char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Receivable GL code
DataItem NK0DW-RECEIVABLE-GL char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NK0DW-ROW num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Sales GL code
DataItem NK0DW-SALES-GL char(15)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW01 Season string
DataItem NK0DW-SEASON char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW01 Season year
DataItem NK0DW-SEASON-YEAR num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Sales GL changed flag
DataItem NK0DW-SLS-GL-CHG char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW01 Sales GL mod flag
DataItem NK0DW-SLS-GL-MOD-FL char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sales GLAENT
DataItem NK0DW-SLS-GLAENT char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sales GLANTAC
DataItem NK0DW-SLS-GLANTAC char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sales GLAPRJ
DataItem NK0DW-SLS-GLAPRJ char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sales GLARCID
DataItem NK0DW-SLS-GLARCID char(4)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Sales GLASUB
DataItem NK0DW-SLS-GLASUB char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Small integer of key
DataItem NK0DW-SML-NBR num(5)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Arrary style of new items
DataItem NK0DW-STYLE char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW01 Style found in dup arr
DataItem NK0DW-STYLE-FOUND char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// style XUM_CONV_FCTR
DataItem NK0DW-SY1-XUMCONVF decimal(7,2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0DW01 product style
DataItem NK0DW-SY1STNBR char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW01 product color
DataItem NK0DW-SY2CLRID char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Size of work 02 for temp stg
DataItem NK0DW-W02-SIZE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0DW01 Count of Invoice itms
DataItem NK0DW-W03-ARRAY-CNT num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Size of work 03 for temp stg
DataItem NK0DW-W03-SIZE num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0DW01 product xdmcd
DataItem NK0DW-XDMCD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW01 Season string code
DataItem NK0DW-XSECD char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NK0DW01 Season string year
DataItem NK0DW-XSNYR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// NK0DW01 Season year, last two
DataItem NK0DW-YEAR num(2)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Change count of claim header o
DataItem NK0DW-ZZZCHGCT smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

