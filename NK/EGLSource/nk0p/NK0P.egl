package nk0p;

import corpcom2.XCTHREC;
import corpcom3.XPTA0P;
import corpcom4.XSENTRY;
import corpcom4.XSEXIT;
import corpcom4.XSPF4;
import corpcom4.XSSEGTR;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom6.UT2REC;
import corpcom7.XXXNBRCY;
import corpx1.XLATBL;
import corpx2.XSOPDEST;
import nk.common.NKWREC;
import nl.common.NL00ENU;
import ta.common.TA1REC;
import ta.common.TA3APLID;
import ta.common.TA6REC;
import ta.common.TAEREC;
import vv.common.VNLKPR01;
//*** PROGRAM=NK0P ****
// ************************************************************
// * NK0P: jcl submiter for NIL Claims Process                *
// *----------------------------------------------------------*
// * description:                                             *
// * -- this application submits test and                     *
// *    production jcl.                                       *
// * -- test jcl does not use ucc7.                           *
// * -- production jcl uses ucc7.                             *
// *                                                          *
// * maintenance:                                             *
// *----------------------------------------------------      *
// * 10-21-92  jjudki created                                 *
// * 02-22-93  dkingm added comma to production JCL           *
// * 02-23-93  JSHANN Route print to RMT53 and no FCB         *
// * 11-12-93  ahowar added theater of operations xc0910      *
// * 03-08-94  kshaw  March db changes.                       *
// * 03-28-94  kshaw  Added users to nk0pt99                  *
// * 04-01-94  kshaw  deleted theater of operations logic in  *
// *                  determine user remote.                  *
// * 06-06-97  HMACAL Removed logic to use NK0PT99 table,     *
// *                  instead, use IO module VNLKPR01 to      *
// *                  check Userid and get remote printer id. *
// ************************************************************
// *                                                          *
// *********************
Program NK0P type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "NL00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  NK0PW01 NK0PW01; // record
  NK0PW99 NK0PW99; // record
  NKWREC NKWREC; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA6REC TA6REC; // record
  TAEREC TAEREC; // record
  UT2REC UT2REC; // record
  VNLKPR01 VNLKPR01; // record
  XCTHREC XCTHREC; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use NK0PT02; // table
  use XLATBL {deleteAfterUse = yes}; // table
  use NK0PT52; // table
  use  NK0PM.TA0PM001 { // VAGen Info - unused formGroup s
    pfKeyEquate = no
  };
  

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    NK0P-001: NK0P-001();
    NK0P-050: NK0P-050();
    NK0P-800: NK0P-800();
  end // end main
end // end NK0P

// initialize process
Function NK0P-001()
  ;
   /* *********************************************************/
   /* Initialize Application*/
   /* *********************************************************/
  ;
  XSENTRY();
  XSSEGTR();
  ;
  set NK0PW01 empty; /* clear working storage*/
  set SQLCA empty; /* "*/
  set TA1REC empty; /* "*/
  set XCTHREC empty; /* "*/
  set TA6REC empty; /* "*/
  NKWREC.NKW-GROUP = COMMAREA.CAUSERA;
  ;
   /* *********************************************************/
   /* check for illegal entry to application*/
   /* *********************************************************/
  ;
  if (COMMAREA.CAFROMAP != "NK0B") /* Claims Header*/
    COMMAREA.CATOAP = "NK0A"; /* go to main menu*/
    COMMAREA.CAITEM = " "; /* go to main menu*/
    XSEXIT();
    XSPF4();
  end
  ;
  NK0PW01.NK0PW-01-ERR = "N"; /* error flag setting*/
  NK0PW01.NK0PW-01-FL3 = "N"; /* process flag*/
   /* *********************************************************/
   /* determine region of execution prod/test*/
   /* *********************************************************/
  ;
  call "XC0910" (XCTHREC) {isNoRefresh = yes, isExternal = yes};
  ;
  if (XCTHREC.XCTH-THEATER-RUNTYPE == " ")
    TA1REC.TA1LOCAT[1] = "NK0P100 ";
    TA1REC.TA1LOCAT[2] = "XC0910  ";
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1PGMNM = "NK0P";
    ;
    TA1REC.TA1FUNC = "POST";
    call "TA0020" (TA1REC, SQLCA);
     /* XSPF4;*/
    NKWREC.NKW-EZEMNO = 146; /* unable to determine cics region*/
    NK0PW01.NK0PW-01-ERR = "Y"; /* set error message flag*/
    ;
  end
  ;
  ;
end // end NK0P-001

// prepare for submission
Function NK0P-050()
  ;
   /* *********************************************************/
    /* all 'prod' regions are supposed to be production...*/
   /* *********************************************************/
  ;
  if (NK0PW01.NK0PW-01-ERR == "N") /* if not errors*/
    if (XCTHREC.XCTH-THEATER-RUNTYPE == "PROD") /* if production region*/
      NK0P-100(); /* submit production job stream*/
    else
      NK0P-105(); /* submit test job stream*/
    end
  end
  ;
  ;
end // end NK0P-050

// submit production jcl
Function NK0P-100()
  ;
   /* *********************************************************/
   /* this routine processes the production jcl csp tables*/
   /* *********************************************************/
  ;
  NK0PW01.NK0PW-01-FL3 = "N"; /* the end of process flag*/
  NK0PW01.NK0PW-01-SUB = 1; /* set table index to 1*/
  TA6REC.TA6ROW = " ";
  ;
  while (NK0PW01.NK0PW-01-FL3 == "N" /* process a job stream table*/
   && NK0PW01.NK0PW-01-ERR == "N")
    ;
    /* **************** Claim Print Table   *************/
    ;
    if (COMMAREA.CAFROMAP == "NK0B")
      NK0PW99.NK0PWJCL = NK0PT02.NK0PWJCL[NK0PW-01-SUB]; /* jcl card*/
      NK0PW01.NK0PW-01-TTYP = NK0PT02.NK0PW-01-TTYP[NK0PW-01-SUB];
    end
    ;
    NK0PS-FMAT-TA6REC(); /* MOVE JCL TO TA6REC*/
    NK0PW-01-SUB = NK0PW-01-SUB + 1; /* increment table index*/
    ;
  end
  ;
  NK0PS-FMAT-JCL(); /* SUBMIT JCL VIA TA0P*/
  ;
  ;
end // end NK0P-100

// submit test jcl
Function NK0P-105()
   /* *********************************************************/
   /* this routine processes the test jcl tables*/
   /* *********************************************************/
  ;
  NK0PW01.NK0PW-01-FL3 = "N"; /* the end of process flag*/
  NK0PW01.NK0PW-01-SUB = 1; /* set table index to 1*/
  move " " to TA6REC.TA6ROW[1] for all;
  ;
  while (NK0PW01.NK0PW-01-FL3 == "N" /* process a job stream table*/
   && NK0PW01.NK0PW-01-ERR == "N")
    ;
    /* **************** Claim Print Table *************/
    ;
    if (COMMAREA.CAFROMAP == "NK0B") /* Header*/
      NK0PW99.NK0PWJCL = NK0PT52.NK0PWJCL[NK0PW-01-SUB]; /* jcl card*/
      NK0PW01.NK0PW-01-TTYP = NK0PT52.NK0PW-01-TTYP[NK0PW-01-SUB];
    end
    ;
    NK0PS-FMAT-TA6REC(); /* FORMAT TA6REC*/
    NK0PW-01-SUB = NK0PW-01-SUB + 1; /* increment table index*/
    ;
  end
  ;
  NK0PS-FMAT-JCL(); /* SUBMIT JOB TO READER*/
  ;
  ;
end // end NK0P-105

// return to calling appli
Function NK0P-800()
  ;
  COMMAREA.CAUSERA = NKWREC.NKW-GROUP; /* send record back*/
  COMMAREA.CATOAP = COMMAREA.CAFROMAP;
   /* If Claim Header Send Them Back To Maintenance*/
  if (COMMAREA.CAFROMAP == "NK0B")
    COMMAREA.CATOAP = "NK0B";
  end
  COMMAREA.CAITEM = " "; /* go to main menu*/
  COMMAREA.CAFROMAP = "NK0P"; /* coming back from nk0p*/
  XSEXIT();
  XSPF4();
  ;
end // end NK0P-800

// format jcl if user exists
Function NK0PS-DETR-USR-RMT()
   /* *********************************************************/
   /* this routine processes the jcl tables by user and rmt*/
   /* *********************************************************/
  ;
  NK0PW01.NK0PWUPJ = NK0PW99.NK0PWJCL;
                   /* move jcl to ws jcl for user printer table*/
   /* hmacal start*/
   /* IF COMMAREA.CAUSERID IN NK0PT99.XXXUSRID;*/
   /* hmacal end*/
  ;
  NK0PS-VNLKPR01-S(); /* Select Unique DNILO.VNLKPR01 row*/
  ;
  if (SQLCA.VAGen_SQLCODE == 0) /* If Found*/
   /* MOVE NK0PT99.NK0PT-DEF-RMT(EZETST) TO NK0PW01.NK0PWPRT;*/
    NK0PW01.NK0PWPRT = VNLKPR01.NK-DRFT-RMTPRTR-ID;
  end
  ;
  NK0PW99.NK0PWJCL = NK0PW01.NK0PWUPJ;
  ;
end // end NK0PS-DETR-USR-RMT

// FORMAT JCL FOR TA0P
Function NK0PS-FMAT-JCL()
   /* ------------------------------------------------------------*/
   /* Format JCL For TA0P*/
   /* ------------------------------------------------------------*/
  ;
  TA6REC.TA6SUBSW = "S"; /* Tailor and submit JCL*/
  TA6REC.TA6MSGSW = "N"; /* EOJ online message switch*/
  ;
  XPTA0P(); /* SUBMIT JCL FOR BACKGROUND JOB*/
  ;
   /* ------------------------------------------------------------*/
   /* If submit was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA6REC.TA6RTNCD == "0")        /* and normal return*/
    NKWREC.NKW-EZEMNO = 361; /* Submission was a success*/
    return; /* Return to previous process*/
  end
  ;
   /* ------------------------------------------------------------*/
   /* If not successful, indicate unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  if (sysVar.errorCode != "00000000" /* Call not successful*/
   || TA6REC.TA6RTNCD > "1")         /* or unexpected error*/
    TA1REC.TA1LOCAT[1] = "NK0P100 ";
    TA1REC.TA1LOCAT[2] = "TA0P    ";
    TA1REC.TA1LOCAT[3] = "RTN CD -";
    TA1REC.TA1LOCAT[4] = TA6REC.TA6RTNCD;
    TA1REC.TA1TYPE = "APPL";
    TA1REC.TA1PGMNM = "NK0P";
    TA1REC.TA1FUNC = "POST";
    call "TA0020" (TA1REC, SQLCA);
  end
  ;
end // end NK0PS-FMAT-JCL

// FORMAT TA6REC
Function NK0PS-FMAT-TA6REC()
   /* *********************************************************/
   /* Format the variable areas of the JCL statement.*/
   /* Write Job Control Language to the Internal Reader queue.*/
   /* If error occurred, report to the error diagnosis facility.*/
   /* Indicate the job was submitted when end of file is written.*/
   /* 1.  J = job control card*/
   /* 2.  N = notify card*/
   /* 3.  O = report format information and number of copies*/
   /* 4.  U = UCC7 interface*/
   /* 5.  P = Parameter card for the JCL*/
   /* *********************************************************/
  ;
  if (NK0PW01.NK0PW-01-TTYP == "Q") /* Parameter statement*/
    NK0PS-DETR-USR-RMT();
    TA6REC.TARJCL[NK0PW-01-SUB] = NK0PW99.NK0PWJCL;
    TA6REC.TARTYPE[NK0PW-01-SUB] = NK0PW01.NK0PW-01-TTYP;
  else
    if (NK0PW01.NK0PW-01-TTYP == "P") /* Parameter statement*/
      NK0PW-01-NL-CLM-ID = NKWREC.NL-CLM-ID;
      TA6REC.TARJCL[NK0PW-01-SUB] = NK0PW01.NK0PW-01-PR2;
                                   /* IVC ID PARM*/
    else
      TA6REC.TARJCL[NK0PW-01-SUB] = NK0PW99.NK0PWJCL;
      TA6REC.TARTYPE[NK0PW-01-SUB] = NK0PW01.NK0PW-01-TTYP;
    end
  end
  ;
  if (NK0PW99.NK0PWJCL == "/*EOF") /* End of file*/
    NK0PW01.NK0PW-01-FL3 = "Y"; /* Indicate end of table*/
  end
  ;
  ;
end // end NK0PS-FMAT-TA6REC

// Select Unique VNLKPR01 row
Function NK0PS-VNLKPR01-S()
   /* *****************************************************************/
   /* Select Unique DNILO.VNLKPR01*/
   /* *****************************************************************/
  ;
  set VNLKPR01 empty;
  ;
  VNLKPR01.XXX-USER-ID = COMMAREA.CAUSERID;
  ;
  call "VNLKPR01" ("S ", SQLCA, VNLKPR01) {isNoRefresh = yes, isExternal = yes}; /* Delete*/
  ;
  if (SQLCA.VAGen_SQLCODE == -911)
    NK0PW01.NK0PW-01-ERR = "Y";
    NKWREC.NKW-EZEMNO = 4; /* Database is busy*/
    return;
  else
    if (SQLCA.VAGen_SQLCODE != 0
     && SQLCA.VAGen_SQLCODE != 100)
      TA1REC.TA1LOCAT[1] = "NK0P100";
      TA1REC.TA1LOCAT[2] = "S      "; /* data base action*/
      TA1REC.TA1LOCAT[3] = "VNLKPR01"; /* io module*/
      TA1REC.TA1TYPE = "APPL";
      TA1REC.TA1PGMNM = "NK0P";
      TA1REC.TA1FUNC = "POST";
      TA1REC.TA1DBASE = "DNILO "; /* data base*/
      TA1REC.TA1TBLVU = "VNLKPR01"; /* table view*/
      call "TA0020" (TA1REC, SQLCA);
      NK0PW01.NK0PW-01-ERR = "Y";
    end
  end
  ;
end // end NK0PS-VNLKPR01-S

//*** RECORD=NK0PW01 ****
// Working storage for NK0P - Claim Print Requests
// ***********************
Record NK0PW01 type basicRecord
  5 NK0PW-01-GRP NK0PW-01-GRP ; 
    10 NK0PW-01-TMX NK0PW-01-TMX ; 
    10 NK0PW-01-TOP NK0PW-01-TOP ; 
    10 NK0PW-01-UID NK0PW-01-UID ; 
    10 NK0PW-01-PR1 NK0PW-01-PR1 ; 
      15 NK0PW-01-SHP NK0PW-01-SHP ; 
      15 NK0PW-01-1CU NK0PW-01-1CU ; 
      15 NK0PW-01-1NO NK0PW-01-1NO ; 
      15 NK0PW-01-TY1 NK0PW-01-TY1 ; 
      15 * char(59) ; 
    10 NK0PW-01-PR2 NK0PW-01-PR2 ; 
      15 NK0PW-01-NL-CLM-ID NK0PW-01-NL-CLM-ID ; 
      15 NK0PW-01-TY2 NK0PW-01-TY2 ; 
      15 * char(71) ; 
    10 NK0PW-01-CPY NK0PW-01-CPY ; 
    10 XSOPDEST XSOPDEST ; 
    10 NK0PW-01-TTYP NK0PW-01-TTYP ; 
    10 NK0PW-01-TSPC NK0PW-01-TSPC ; 
    10 NK0PW-01-SWK NK0PW-01-SWK ; 
    10 NK0PW-01-F17 NK0PW-01-F17 ; 
    10 NK0PW-01-CAF NK0PW-01-CAF ; 
    10 NK0PW-01-RP2 NK0PW-01-RP2 ; 
    10 NK0PW-01-NBR NK0PW-01-NBR ; 
      15 NK0PW-01-NB1 NK0PW-01-NB1 ; 
      15 NK0PW-01-NB2 NK0PW-01-NB2 ; 
    10 NK0PW-01-SCH NK0PW-01-SCH ; 
    10 TA3APLID TA3APLID ; 
      15 * char(5) ; 
      15 NK0PW-01-REG NK0PW-01-REG ; 
      15 * char(1) ; 
    10 NK0PW-01-ERR NK0PW-01-ERR ; 
    10 NK0PW-01-SUB NK0PW-01-SUB ; 
    10 NK0PW-01-FL3 NK0PW-01-FL3 ; 
    10 XXXNBRCY XXXNBRCY ; 
    10 NK0PW99C NK0PW99C ; 
    10 NK0PW99F NK0PW99F ; 
    10 NK0PWUPJ NK0PWUPJ ; 
      15 * char(18) ; 
      15 NK0PWPRT NK0PWPRT ; 
      15 * char(56) ; 
    10 NK0PWHLD NK0PWHLD ; 
end // end NK0PW01

//*** RECORD=NK0PW99 ****
// System internal reader queue (INTR) record definition.
// ***********************
Record NK0PW99 type serialRecord  {
  fileName = "INTR"
  }
  10 NK0PWJCL NK0PWJCL ; 
end // end NK0PW99

// order nbr
DataItem NK0PW-01-1CU num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sub-order nbr
DataItem NK0PW-01-1NO num(4)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// fast path confirmation
DataItem NK0PW-01-CAF char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Number of copies to print
DataItem NK0PW-01-CPY num(1)  {
  currency = no, numericSeparator = no, sign = none, zeroFormat = yes, 
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// error flag
DataItem NK0PW-01-ERR char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Job submitted switch
DataItem NK0PW-01-F17 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// process flag
DataItem NK0PW-01-FL3 char(3)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NK0PW-01-GRP char(304)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// first part of req nbr
DataItem NK0PW-01-NB1 num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// second part of req nbr
DataItem NK0PW-01-NB2 num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// sa-btch-rqt-nbr
DataItem NK0PW-01-NBR num(9)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// nl-clm-id
DataItem NK0PW-01-NL-CLM-ID int {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = nullFill, inputRequired = no
}
end

// jcl card
DataItem NK0PW-01-PR1 char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// jcl card
DataItem NK0PW-01-PR2 char(76)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// cics region number
DataItem NK0PW-01-REG char(2)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// second report requested flag
DataItem NK0PW-01-RP2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// schedule i.d. number work
DataItem NK0PW-01-SCH num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// TS_NIKE_SHP_ID
DataItem NK0PW-01-SHP num(8)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// index
DataItem NK0PW-01-SUB num(6)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Customer error switch
DataItem NK0PW-01-SWK char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// remote printer tbl max
DataItem NK0PW-01-TMX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// top of screen marker
DataItem NK0PW-01-TOP smallint {
  currency = no, numericSeparator = no, sign = none, align = left, 
  fillCharacter = nullFill, inputRequired = no
}
end

// request type
DataItem NK0PW-01-TY1 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// request type
DataItem NK0PW-01-TY2 char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// NIKE user identification
DataItem NK0PW-01-UID char(8)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NK0PW99C num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NK0PW99F char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NK0PWHLD num(3)  {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

DataItem NK0PWPRT char(6)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

DataItem NK0PWUPJ char(80)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

