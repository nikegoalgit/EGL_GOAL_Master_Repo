package fm0m;

import corpcom3.XPFK001;
import corpcom4.XSFKS01;
import corpcom5.COMMAREA;
import corpcom6.SQLCA;
import corpcom7.XXXTSLEN;
import corpcom7.XXXTSPAG;
import corpx1.XMUTBL;
import corpx2.XMU-MAT-UOM-CD;
import corpx2.XMU-MAT-UOM-DESC;
import fk.common.*;
import ta.common.TA1REC;
import ta.common.TA5REC;
import ta.common.TA5TSQIX;
import ta.common.TAEREC;
import vv.common.VMGRP001;
import vv.common.VVNDR001;
//*** PROGRAM=FM0M ****
// THIS APPLICATION IS PART OF THE FOOTWEAR MATERIALS SYSTEM.
// 
// THIS APPLICATION WILL ALLOW USERS TO LIST MATERIAL GROUPS
// FOR A SPECIFIED VENDOR.  USERS WILL ENTER A VENDOR CODE
// AND ALL MATERIAL GROUPS FOR THAT VENDOR WILL BE LISTED.
// USERS MAY SELECT A MATERIAL GROUP AND PFKEY TO ANOTHER
// APPLICATION, CARRYING THE MATERIAL GROUP INFORMATION WITH
// THE TRANSFER.
// 
// USERS WILL BE ALLOWED TO EXIT THIS APPLICATION VIA PFKEYS
// OR FASTPATH, WITH THE 'OPTION' FIELD AVAILABLE FOR USE WITH
// ANY APPLICATION TRANSFER.
// 
// -------  --------  ------  ---------------------------------
// CONTROL    DATE     NAME   DESCRIPTION OF CHANGE
// -------  --------  ------  ---------------------------------
//          10/01/93  JALLE1  New application.
// *********************
Program FM0M type textUIProgram //VAGen Info - main text program
  {
  includeReferencedFunctions = yes, allowUnqualifiedItemReferences = yes, 
  throwNrfEofExceptions = yes, handleHardIOErrors = no, V60ExceptionCompatibility = yes, 
  I4GLItemsNullable = no, textLiteralDefaultIsString = no, localSQLScope = yes, 
  msgTablePrefix = "FK00", inputRecord = COMMAREA, segmented = yes
  }

  // Data Declarations
  COMMAREA COMMAREA ; // record
  FKWREC FKWREC; // record
  FM0MW00 FM0MW00; // record
  FM0MW01 FM0MW01; // record
  SQLCA SQLCA; // record
  TA1REC TA1REC; // record
  TA5REC TA5REC; // record
  TAEREC TAEREC; // record
  VMGRP001 VMGRP001; // record
  VVNDR001 VVNDR001; // record

  // VAGen Info - items needed for migration
  VAGen_EZESYS char(8);
  VAGen_EZEREPLY num(1);
  VAGen_EZE_WAIT_TIME bin(9,2);
  VAGen_EZE_ITEMLEN int;

  // Use Declarations
  use XMUTBL {deleteAfterUse = yes}; // table
  use FM0MM.FM0MM110 // form
   {
    pfKeyEquate = no
  };

  function main()
    // VAGen Info - initialization needed for migration
    VAGen_EZESYS = VGLib.getVAGSysType();
    XPFK001: XPFK001();
     /* ------------------------------------------------------------*/
     /* Initialize working storage and display storage areas.*/
     /* ------------------------------------------------------------*/
    ;
    set FM0MM110 initial; /* M110 inquiry map input/output*/
    set FM0MW00 empty; /* Application working storage*/
    set FM0MW01 empty; /* Application display storage*/
    set SQLCA empty; /* SQL communication area*/
    set TAEREC empty; /* Error diagnosis information*/
    set TA1REC empty; /* Error diagnosis parameters*/
    set TA5REC empty; /* Error diagnosis parameters*/
    ;
     /* ------------------------------------------------------------*/
     /* If data was passed in the COMMAREA, use as initial key.*/
     /* ------------------------------------------------------------*/
    ;
    FM0MM110.FK-VEND-CD = FKWREC.FK-VEND-CD[1];
    ;
    ;
     /* ------------------------------------------------------------*/
     /* Initialize working storage variables.*/
     /* ------------------------------------------------------------*/
    ;
    FM0MW00.FM0MW-NBR-MAP-ROWS = 14; /* 14 rows on the map*/
    ;
    if (FM0MM110.FK-VEND-CD > " ") /* If vendor was passed*/
      FM0MW00.FM0MW-REQUEST-DATA-SW = "Y"; /* Request data*/
    else
      FM0MW00.FM0MW-REQUEST-DATA-SW = "N"; /* Don't request data*/
    end
    ;
    FM0MW00.FM0MW-FMAT-MAP-SW = "N"; /* Format the map switch*/
    ;
    COMMAREA.CATOAP = " ";
    COMMAREA.CAITEM = " ";
    ;
    ;
     /* ------------------------------------------------------------*/
     /* Flow to converse main process used to display a map.*/
     /* ------------------------------------------------------------*/
    ;
    goto FM0M-0010; /* Converse main map*/
    ;
    ;
    FM0M-0010: FM0M-0010();
     /* -----------------------------------------------------------------*/
     /* Flow to converse the main process used to display a map.*/
     /* -----------------------------------------------------------------*/
    ;
    goto FM0M-0010; /* Converse the main process*/
    ;
    ;
  end // end main
end // end FM0M

// Main process to display a map
Function FM0M-0010()
   /* ------------------------------------------------------------*/
   /* This is the main process used to display a map.  Processing*/
   /* always returns to the top of this process and falls through*/
   /* subordinate processes until an error is found or a valid*/
   /* request is processed.  Processing sequence is as follows:*/
  ;
   /* 1) Obtain the data to display.*/
   /* 2) Format the map output area and display the map.*/
   /* 3) Check the attention identifier used to respond.*/
   /* 4) Reset highlighted fields to normal intensity.*/
   /* 5) Verify the data that was entered.*/
   /* 6) Process a valid input request.*/
  ;
   /* In all subordinate processes, "EZEFLO" is used to exit to*/
   /* redisplay the map when an error is found.  This is done to*/
   /* minimize the coding effort required to skip subsequent*/
   /* processing under error conditions.*/
   /* ------------------------------------------------------------*/
  ;
  FM0M-1000(); /* Obtain the data to display*/
  ;
  FM0M-2000(); /* Format and display the map*/
  ;
  FM0M-3000(); /* Check attention identifier*/
  ;
  FM0M-4000(); /* Reset fields to normal intensity*/
  ;
  FM0M-5000(); /* Verify the entered data*/
  ;
  FM0M-6000(); /* Process valid input request*/
  ;
  ;
end // end FM0M-0010

// Obtain data to display
Function FM0M-1000()
   /* --------------------------------------------------------------*/
   /* If data was not requested or an error was found, return to*/
   /* the previous process.*/
   /* --------------------------------------------------------------*/
  ;
  if (FM0MW00.FM0MW-REQUEST-DATA-SW != "Y" /* Data not requested*/
   || converseVar.validationMsgNum != 0)   /* or an error was found*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Establish the temporary storage queue page length.*/
   /* --------------------------------------------------------------*/
  ;
  FM0MW00.XXXTSLEN = 490; /* Temporary storage page length*/
  ;
  ;
   /* --------------------------------------------------------------*/
   /* If no message to display, reset the page number to display.*/
   /* --------------------------------------------------------------*/
  ;
  if (FKWREC.XXXMSGNO == 0) /* No message to display*/
    FM0MW00.XXXTSPAG = 1; /* Page number to display*/
  end
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* --------------------------------------------------------------*/
  ;
  FM0M-1100(); /* Purge temp storage*/
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Obtain the vendor description.*/
   /* --------------------------------------------------------------*/
  ;
  FM0M-1200(); /* Select DCMPNT.VVNDR001*/
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Declare and process a cursor to get all material group for the*/
   /* specified vendor.*/
   /* --------------------------------------------------------------*/
  ;
  FM0MW00.FM0MW-IDX = 0; /* Initialize index*/
  ;
  FM0M-1300(); /* Declare DCMPNT.VMGRP001 cursor*/
  ;
  FM0MW00.FM0MW-END-VMGRP001-CSR-SW = "N";
  FM0M-1400(); /* Fetch DCMPNT.VMGRP001 cursor*/
  ;
  while (FM0MW00.FM0MW-END-VMGRP001-CSR-SW != "Y")
    ;
    FM0M-1500(); /* Save data to display storage*/
    ;
    if (FM0MW00.FM0MW-IDX >= FM0MW00.FM0MW-NBR-MAP-ROWS) /* If page full*/
      FM0M-1600(); /* Add page to temporary storage queue*/
      FM0MW00.FM0MW-IDX = 0; /* Reset index*/
    end
    ;
    FM0M-1400(); /* Fetch DCMPNT.VMGRP001 cursor*/
  end
  ;
  FM0M-1700(); /* Close DCMPNT.VMGRP001 cursor*/
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Save any partially formatted pages to temporary storage.*/
   /* --------------------------------------------------------------*/
  ;
  if (FM0MW00.FM0MW-IDX > 0) /* If partial data*/
    ;
    FM0M-1600(); /* Add page to temporary storage queue*/
    FM0MW00.FM0MW-IDX = 0; /* Reset index*/
  end
  ;
  ;
   /* --------------------------------------------------------------*/
   /* If no data was found, set up 'no data to display' message.*/
   /* --------------------------------------------------------------*/
  ;
  if (FM0MW00.TA5TSQIX == 0) /* If data was not found*/
    ;
    converseLib.validationFailed(18); /* Request processed - no data*/
    FKWREC.XXX-MOD-ID = "1000"; /* Module identification*/
  end
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Indicate request for data is complete.*/
   /* --------------------------------------------------------------*/
  ;
  FM0MW00.FM0MW-REQUEST-DATA-SW = "N";
  FM0MW00.FM0MW-FMAT-MAP-SW = "Y";
  ;
  ;
end // end FM0M-1000

// Purge any temporary storage
Function FM0M-1100()
   /* ------------------------------------------------------------*/
   /* Initialize the storage areas and indicators to be used.*/
   /* ------------------------------------------------------------*/
  ;
  set FM0MW01 empty; /* m110 display storage*/
  ;
  TA5REC.TA5TSQIX = 0; /* Current page number*/
  FM0MW00.TA5TSQIX = 0; /* Highest page number*/
  ;
   /* ------------------------------------------------------------*/
   /* Purge any temporary storage for this application.*/
   /* ------------------------------------------------------------*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "P"; /* Function code*/
  ;
  try
    call "TA0050" (FM0MW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FKWREC.XXX-MOD-ID = "1100"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "PURGE ANY TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M110"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FM0M-1100

// Select DCMPNT.VVNDR001
Function FM0M-1200()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set VVNDR001 empty;
  ;
  VVNDR001.FK-VEND-CD = FM0MM110.FK-VEND-CD;
  ;
  ;
  try
    call "IO6180" ("S ", SQLCA, VVNDR001) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == +100) /* No row found*/
      ;
      VVNDR001.FK-VEND-SNM = "************";
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1200"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "1200 SELECT DCMPNT.VVNDR001";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VVNDR001"; /* Table view name*/
  TA1REC.TA1TBLKE = VVNDR001.VVNDR001-GROUP; /* Key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FM0M-1200

// Declare DCMPNT.VMGRP001 csr
Function FM0M-1300()
   /* ------------------------------------------------------------*/
   /* Declare a cursor on the requested table.*/
   /* ------------------------------------------------------------*/
  ;
  set VMGRP001 empty;
  ;
  VMGRP001.FK-VEND-CD = FM0MM110.FK-VEND-CD;
  ;
  ;
  try
    call "IO6860" ("S1", SQLCA, VMGRP001) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1300"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "DECLARE DCMPNT.VMGRP001 CSR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMGRP001"; /* Table view name*/
  TA1REC.TA1TBLKE = VMGRP001.VMGRP001-GROUP; /* Key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FM0M-1300

// Fetch DCMPNT.VMGRP001 csr
Function FM0M-1400()
   /* ------------------------------------------------------------*/
   /* Fetch a record from the requested table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO6860" ("N1", SQLCA, VMGRP001) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == +100) /* No row found*/
      ;
      FM0MW00.FM0MW-END-VMGRP001-CSR-SW = "Y"; /* End of cursor*/
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1400"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "FETCH DCMPNT.VMGRP001 CSR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMGRP001"; /* Table view name*/
  TA1REC.TA1TBLKE = VMGRP001.VMGRP001-GROUP; /* Key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FM0M-1400

// Save 'ADJ' in disp storage
Function FM0M-1500()
   /* --------------------------------------------------------------*/
   /* If this is the first line on the page, save header.*/
   /* --------------------------------------------------------------*/
  ;
  FM0MW00.FM0MW-IDX = FM0MW00.FM0MW-IDX + 1; /* Increment line*/
  ;
  if (FM0MW00.FM0MW-IDX == 1) /* If first line on page*/
    ;
    FM0MW01.FK-VEND-CD = FM0MM110.FK-VEND-CD; /* Vendor code*/
    FM0MW01.FK-VEND-SNM = VVNDR001.FK-VEND-SNM; /* Vendor desc*/
  end
  ;
  ;
   /* --------------------------------------------------------------*/
   /* Format the detail line.*/
   /* --------------------------------------------------------------*/
  ;
  FM0MW01.FK-MAT-GRP-CD[FM0MW-IDX] = VMGRP001.FK-MAT-GRP-CD; /* Material group*/
  FM0MW01.FK-MAT-GRP-DESC[FM0MW-IDX] = VMGRP001.FK-MAT-GRP-DESC; /* Material group desc*/
  FM0MW01.XMU-MAT-UOM-CD[FM0MW-IDX] = VMGRP001.XMU-MAT-UOM-CD; /* Unit of measure*/
  ;
  if (VMGRP001.XMU-MAT-UOM-CD in XMUTBL.XMU-MAT-UOM-CD /* If code in table*/
   && XMUTBL.XXXSTAT[sysVar.arrayIndex] == "A")        /* And active status*/
    FM0MW01.XMU-MAT-UOM-DESC[FM0MW-IDX] = XMUTBL.XMU-MAT-UOM-DESC[sysVar.arrayIndex]; /* Save uom desc*/
  else
    FM0MW01.XMU-MAT-UOM-DESC[FM0MW-IDX] = "************"; /* Save uom desc*/
  end

  ;
  ;
end // end FM0M-1500

// Add page to temporary storage
Function FM0M-1600()
   /* ------------------------------------------------------------*/
   /* Add the next page to temporary storage.*/
   /* ------------------------------------------------------------*/
  ;
  FM0MW01.XXXTSLEN = FM0MW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5FNCCD = "A"; /* Function code*/
  ;
  try
    call "TA0050" (FM0MW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, initialize the storage area and indicators*/
   /* to be used.  Return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    set FM0MW01 empty; /* m110 display storage*/
    ;
    FM0MW00.TA5TSQIX = TA5REC.TA5TSQIX; /* Highest page number*/
    TA5REC.TA5TSQIX = 0; /* Current page number*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FKWREC.XXX-MOD-ID = "1700"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "ADD PAGE TO TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M110"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FM0M-1600

// Close DCMPNT.VMGRP001 csr
Function FM0M-1700()
   /* ------------------------------------------------------------*/
   /* Close the cursor on the requested table.*/
   /* ------------------------------------------------------------*/
  ;
  try
    call "IO6860" ("C1", SQLCA, VMGRP001) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FKWREC.XXX-MOD-ID = "1700"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "CLOSE DCMPNT.VMGRP001 CSR";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VMGRP001"; /* Table view name*/
  TA1REC.TA1TBLKE = VMGRP001.VMGRP001-GROUP; /* Key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FM0M-1700

// Format and converse the map
Function FM0M-2000()
   /* ------------------------------------------------------------*/
   /* If an error was found, save the error message number.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* If error found*/
    FKWREC.XXXMSGNO = converseVar.validationMsgNum; /* Save message number*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If requested, and no error, format data to display.*/
   /* ------------------------------------------------------------*/
  ;
  if (FM0MW00.FM0MW-FMAT-MAP-SW == "Y" /* Format requested*/
   && converseVar.validationMsgNum == 0) /* and no error to display*/
    ;
    FM0M-2100(); /* Format the map*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Format the current date and any FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FM0MM110.XXXCURDT = VGVar.currentShortGregorianDate; /* Current date*/
  ;
  FM0MM110.CATOAP = COMMAREA.CATOAP; /* TO application*/
  FM0MM110.CAITEM = COMMAREA.CAITEM; /* Application data*/
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If a message to display, indicate sound audible alarm.*/
   /* ------------------------------------------------------------*/
  ;
  if (FKWREC.XXXMSGNO != 0 /* Message to display*/
   || COMMAREA.CAMSG != " ") /* or message text*/
    ;
    set FM0MM110 alarm; /* Indicate sound alarm*/
    ;
    if (FKWREC.XXXMSGNO != 0) /* Message to display*/
      ;
      if (FKWREC.XXXMSGNO == 9999)
        converseLib.validationFailed();
      else
        converseLib.validationFailed(FKWREC.XXXMSGNO);
      end /* Message number*/
    else
      FM0MM110.VAGen_EZEMSG = COMMAREA.CAMSG; /* Message text*/
      ;
    end
    ;
    FM0MM110.XXX-MOD-ID = FKWREC.XXX-MOD-ID; /* Module id*/
    ;
  end
  ;
  FM0MM110.FK-VEND-SNM = VVNDR001.FK-VEND-SNM;
  ;
   /* ------------------------------------------------------------*/
   /* Set all detail lines dark if no data to display on them*/
   /* (no detail lines formatted to temporary storage).*/
   /* ------------------------------------------------------------*/
  ;
  if (FM0MW00.TA5TSQIX == 0) /* No data formatted*/
    ;
    FM0MW00.FM0MW-IDX = 1; /* Init index*/
    while (FM0MW00.FM0MW-IDX <= FM0MW00.FM0MW-NBR-MAP-ROWS)
      ;
      set FM0MM110.FM0MM-SELECT[FM0MW-IDX] invisible, skip;
      set FM0MM110.FK-MAT-GRP-CD[FM0MW-IDX] invisible, skip;
      set FM0MM110.FK-MAT-GRP-DESC[FM0MW-IDX] invisible, skip;
      set FM0MM110.XMU-MAT-UOM-CD[FM0MW-IDX] invisible, skip;
      set FM0MM110.XMU-MAT-UOM-DESC[FM0MW-IDX] invisible, skip;
      ;
      FM0MW00.FM0MW-IDX = FM0MW00.FM0MW-IDX + 1; /* Increment*/
    end
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Set all detail lines dark if no data to display on them*/
   /* (but there is at least partial data on the map).*/
   /* ------------------------------------------------------------*/
  ;
  FM0MW00.FM0MW-IDX = 1; /* Init index*/
  while (FM0MW00.FM0MW-IDX <= FM0MW00.FM0MW-NBR-MAP-ROWS)
    ;
    if (FM0MM110.FK-MAT-GRP-CD[FM0MW-IDX] == " ") /* If no data on this line*/
      ;
      set FM0MM110.FM0MM-SELECT[FM0MW-IDX] invisible, skip;
      set FM0MM110.FK-MAT-GRP-CD[FM0MW-IDX] invisible, skip;
      set FM0MM110.FK-MAT-GRP-DESC[FM0MW-IDX] invisible, skip;
      set FM0MM110.XMU-MAT-UOM-CD[FM0MW-IDX] invisible, skip;
      set FM0MM110.XMU-MAT-UOM-DESC[FM0MW-IDX] invisible, skip;
    end
    ;
    FM0MW00.FM0MW-IDX = FM0MW00.FM0MW-IDX + 1; /* Increment*/
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Establish cursor position.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum == 0 /* If no message to display*/
   || converseVar.validationMsgNum == 18) /* No data to display*/
    set FM0MM110.FK-VEND-CD cursor;
  end
  ;
  ;
  converse FM0MM110 ;
  ;
   /* ------------------------------------------------------------*/
   /* Clear the message fields and save FAST PATH information.*/
   /* ------------------------------------------------------------*/
  ;
  FKWREC.XXX-MOD-ID = " "; /* Module identification*/
  FKWREC.XXXMSGNO = 0; /* Message number*/
  COMMAREA.CAMSG = " "; /* Message text*/
  ;
  COMMAREA.CATOAP = FM0MM110.CATOAP; /* TO application*/
  COMMAREA.CAITEM = FM0MM110.CAITEM; /* Application data*/
  ;
  ;
end // end FM0M-2000

// Format the data to display
Function FM0M-2100()
   /* --------------------------------------------------------------------*/
   /* Clear the fields in the map storage area to be formatted.*/
   /* --------------------------------------------------------------------*/
  ;
  set FM0MM110 initial; /* Initialize map*/
  ;
  FM0MW-FMAT-MAP-SW = "N"; /* Format map switch*/
  ;
  ;
   /* --------------------------------------------------------------------*/
   /* If the page in storage is not the page to be displayed, obtain*/
   /* the desired page from temporary storage.*/
   /* --------------------------------------------------------------------*/
  ;
  if (FM0MW00.TA5TSQIX > 0) /* Pages were formatted*/
    ;
    if (FM0MW00.XXXTSPAG != TA5REC.TA5TSQIX) /* Desired page not current*/
      ;
      if (FM0MW00.XXXTSPAG > FM0MW00.TA5TSQIX) /* Desired page > highest*/
        FM0MW00.XXXTSPAG = FM0MW00.TA5TSQIX; /* Default to highest*/
      end
      ;
      FM0M-2110(); /* Obtain temp storage page*/
    end
  end
  ;
  ;
   /* --------------------------------------------------------------------*/
   /* Format header data to the map.*/
   /* --------------------------------------------------------------------*/
  ;
  FM0MM110.XXXTSPAG = FM0MW00.XXXTSPAG; /* Current page*/
  FM0MM110.TA5TSQIX = FM0MW00.TA5TSQIX; /* Max page*/
  ;
  FM0MM110.FK-VEND-CD = FM0MW01.FK-VEND-CD; /* Vendor*/
  ;
  ;
   /* --------------------------------------------------------------------*/
   /* Format the detail data.*/
   /* --------------------------------------------------------------------*/
  ;
  FM0MW00.FM0MW-IDX = 1; /* Initialize idx*/
  while (FM0MW00.FM0MW-IDX <= FM0MW00.FM0MW-NBR-MAP-ROWS)
    ;
    FM0MM110.FK-MAT-GRP-CD[FM0MW-IDX] = FM0MW01.FK-MAT-GRP-CD[FM0MW-IDX]; /* Material group code*/
    FM0MM110.FK-MAT-GRP-DESC[FM0MW-IDX] = FM0MW01.FK-MAT-GRP-DESC[FM0MW-IDX]; /* Material group desc*/
    FM0MM110.XMU-MAT-UOM-CD[FM0MW-IDX] = FM0MW01.XMU-MAT-UOM-CD[FM0MW-IDX]; /* UOM desc*/
    FM0MM110.XMU-MAT-UOM-DESC[FM0MW-IDX] = FM0MW01.XMU-MAT-UOM-DESC[FM0MW-IDX]; /* UOM desc*/
    ;
    FM0MW00.FM0MW-IDX = FM0MW00.FM0MW-IDX + 1;
  end
  ;
  ;
end // end FM0M-2100

// Read page from temp storage
Function FM0M-2110()
   /* ------------------------------------------------------------*/
   /* Obtain the next page of data to display.*/
   /* ------------------------------------------------------------*/
  ;
  FM0MW01.XXXTSLEN = FM0MW00.XXXTSLEN; /* Temporary storage length*/
  ;
  TA5REC.TA5APPID = COMMAREA.CACURRAP; /* Application identification*/
  TA5REC.TA5TSQIX = FM0MW00.XXXTSPAG; /* Page number*/
  TA5REC.TA5FNCCD = "R"; /* Function code*/
  ;
  try
    call "TA0050" (FM0MW01, TA5REC) {isNoRefresh = yes, isExternal = yes};
  end /* Temporary storage*/
  ;
   /* ------------------------------------------------------------*/
   /* If successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && TA5REC.TA5RTNCD == 0)          /* and normal return code*/
    ;
    return; /* Return to previous process*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TAEREC.TAEDESC1 = sysVar.errorCode; /* CSP return code*/
  TAEREC.TAEDESC2 = TA5REC.TA5DATA; /* Subroutine parameters*/
  ;
  FKWREC.XXX-MOD-ID = "2110"; /* Module identification*/
  converseLib.validationFailed(10); /* Unexpected error occurred*/
  ;
  TA1REC.TA1FUNC = "RETN"; /* Termination function*/
  TA1REC.TA1TYPE = "APPL"; /* Type of error*/
  TA1REC.TA1LOC = "READ PAGE FROM TEMPORARY STORAGE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1MAPAP = COMMAREA.CACURRAP; /* Map application*/
  TA1REC.TA1MAPNO = "M110"; /* Map number*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FM0M-2110

// Check attention identifier
Function FM0M-3000()
   /* ------------------------------------------------------------*/
   /* If CANCEL was requested, fastpath to current application*/
   /* and map.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pa2) /* PA2 was pressed*/
    ;
    set FKWREC empty; /* Initialize fkwrec*/
    FKWREC.FK-VEND-CD[1] = FM0MM110.FK-VEND-CD; /* Vendor*/
    ;
    COMMAREA.CATOAP = "FM0M"; /* TO application*/
    COMMAREA.CAITEM = "    "; /* Application find code*/
    ;
    XSFKS01(); /* Exit to another application*/
    ;
    set FM0MM110.CATOAP cursor, bold; /* Highlight*/
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If FAST PATH was requested, transfer to the application.*/
   /* ------------------------------------------------------------*/
  ;
  if (FM0MM110.CATOAP > " ") /* FAST PATH was requested*/
    ;
    if (converseVar.eventKey is enter) /* ENTER was pressed*/
      ;
      set FKWREC empty; /* Initialize fkwrec*/
      FKWREC.FK-VEND-CD[1] = FM0MM110.FK-VEND-CD; /* Vendor*/
      ;
      COMMAREA.CATOAP = FM0MM110.CATOAP; /* TO application*/
      COMMAREA.CAITEM = FM0MM110.CAITEM; /* Application find code*/
      ;
      XSFKS01(); /* Exit to another application*/
      ;
      set FM0MM110.CATOAP cursor, bold; /* Highlight*/
      ;
    else
      ;
      FKWREC.XXX-MOD-ID = "3000"; /* Module identification*/
      converseLib.validationFailed(5); /* PA/PF key may not be used*/
      ;
    end
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If requested, process PF key.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf1 /* HELP requested*/
   || converseVar.eventKey is pf3 /* FK0B requested*/
   || converseVar.eventKey is pf4) /* MSTR MN requested*/
    ;
    if (converseVar.eventKey is pf1) /* PF1 was pressed*/
      COMMAREA.CATOAP = "GD01"; /* TO application*/
      COMMAREA.CAITEM = "FM0MM110"; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf3) /* PF3 was pressed*/
      COMMAREA.CATOAP = "FM0A"; /* TO application*/
      COMMAREA.CAITEM = "    "; /* Application find code*/
    end
    ;
    if (converseVar.eventKey is pf4) /* PF4 was pressed*/
      COMMAREA.CATOAP = "MN0M"; /* TO application*/
    end
    ;
    XSFKS01(); /* Exit to another application*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* Determine whether a valid attention identifier was used to*/
   /* invoke the transaction.  Display an error message to the*/
   /* user if the PF key used is not supported.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey not enter /* ENTER was not pressed*/
   && converseVar.eventKey not pf7   /* BACK requested*/
   && converseVar.eventKey not pf8   /* FWRD requested*/
   && converseVar.eventKey not pf12  /* MGRP requested*/
   && converseVar.eventKey not pf13) /* CAP requested*/
    ;
    FKWREC.XXX-MOD-ID = "3000"; /* Module identification*/
    converseLib.validationFailed(4); /* PA/PF key pressed is not valid*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
end // end FM0M-3000

// Reset Highlighted fields
Function FM0M-4000()
   /* --------------------------------------------------------------------*/
   /* Reset all modifiable field attributes to normal intensity.*/
   /* --------------------------------------------------------------------*/
  ;
  set FM0MM110.XXXTSPAG initialAttributes; /* Page nbr*/
  set FM0MM110.TA5TSQIX initialAttributes; /* Max page*/
  ;
  set FM0MM110.FK-VEND-CD initialAttributes; /* Vendor code*/
  set FM0MM110.FK-VEND-SNM initialAttributes; /* Vendor name*/
  ;
  ;
  FM0MW00.FM0MW-IDX = 1; /* Initialize index*/
  ;
  while (FM0MW00.FM0MW-IDX <= FM0MW00.FM0MW-NBR-MAP-ROWS) /* For each line*/
    ;
    set FM0MM110.FM0MM-SELECT[FM0MW-IDX] initialAttributes; /* Selection*/
    set FM0MM110.FK-MAT-GRP-CD[FM0MW-IDX] initialAttributes; /* Mtl grp cd*/
    set FM0MM110.FK-MAT-GRP-DESC[FM0MW-IDX] initialAttributes; /* Mtl grp desc*/
    set FM0MM110.XMU-MAT-UOM-CD[FM0MW-IDX] initialAttributes; /* Unit of measure*/
    set FM0MM110.XMU-MAT-UOM-DESC[FM0MW-IDX] initialAttributes; /* UOM desc*/
    ;
    FM0MW00.FM0MW-IDX = FM0MW00.FM0MW-IDX + 1;
  end
  ;
  set FM0MM110.CATOAP initialAttributes; /* To application*/
  set FM0MM110.CAITEM initialAttributes; /* Application data*/
  ;
  ;
end // end FM0M-4000

// Verify entered fields
Function FM0M-5000()
   /* ---------------------------------------------------------------*/
   /* Highlight any application data that was entered.*/
   /* ---------------------------------------------------------------*/
  ;
  if (FM0MM110.CAITEM > " "         /* Application data was entered*/
   && converseVar.eventKey not pf12 /* MGRP*/
   && converseVar.eventKey not pf13) /* CAP*/
    ;
    set FM0MM110.CAITEM cursor, bold; /* Highlight*/
    FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
    converseLib.validationFailed(7); /* Only use this with fastpath*/
  end
  ;
  ;
   /* ---------------------------------------------------------------*/
   /* Verify scroll request.*/
   /* ---------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Pf7 pressed*/
   || converseVar.eventKey is pf8) /* Pf8 pressed*/
    ;
    FM0M-5100(); /* Verify scroll request*/
  end
  ;
  ;
   /* ---------------------------------------------------------------*/
   /* Verify select field for any application transfer.*/
   /* ---------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf12 /* MGRP*/
   || converseVar.eventKey is pf13) /* CAP*/
    ;
    FM0MW00.FM0MW-IDX = FM0MW00.FM0MW-NBR-MAP-ROWS;
    while (FM0MW00.FM0MW-IDX >= 1)
      ;
      if (FM0MM110.FM0MM-SELECT[FM0MW-IDX] == "S"
       || FM0MM110.FM0MM-SELECT[FM0MW-IDX] == " ")
        ;
         /* Next sentence*/
      else
        ;
        set FM0MM110.FM0MM-SELECT[FM0MW-IDX] cursor, bold; /* Highlight*/
        FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
        converseLib.validationFailed(13); /* Only 's' may be used to select a line*/
      end
      FM0MW00.FM0MW-IDX = FM0MW00.FM0MW-IDX - 1;
    end
    ;
    if (converseVar.validationMsgNum == 0)
      return;
    else
      exit stack;
    end
  end
  ;
  ;
   /* ---------------------------------------------------------------*/
   /* If vendor changed, verify it.  Otherwise verify the detail.*/
   /* ---------------------------------------------------------------*/
  ;
  if (FM0MM110.FK-VEND-CD != FM0MW01.FK-VEND-CD
   || FM0MM110.FK-VEND-CD == " ")
    ;
    if (FM0MM110.FK-VEND-CD == " ") /* If vendor blank*/
      ;
      set FM0MM110.FK-VEND-CD cursor, bold; /* Highlight*/
      FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
      converseLib.validationFailed(21); /* Vendor code missing or invalid*/
    else
      ;
      FM0M-5200(); /* Verify vendor*/
    end
  else
    ;
     /* ===> Verify the select fields*/
    ;
    FM0MW00.FM0MW-IDX = FM0MW00.FM0MW-NBR-MAP-ROWS;
    while (FM0MW00.FM0MW-IDX >= 1)
      ;
      if (FM0MM110.FM0MM-SELECT[FM0MW-IDX] == "S"
       || FM0MM110.FM0MM-SELECT[FM0MW-IDX] == " ")
        ;
         /* Next sentence*/
      else
        ;
        set FM0MM110.FM0MM-SELECT[FM0MW-IDX] cursor, bold; /* Highlight*/
        FKWREC.XXX-MOD-ID = "5000"; /* Module identification*/
        converseLib.validationFailed(13); /* Only 's' may be used to select a line*/
      end
      FM0MW00.FM0MW-IDX = FM0MW00.FM0MW-IDX - 1;
    end
  end
  ;
  ;
   /* ---------------------------------------------------------------*/
   /* If any errors were found, exit to display the map.*/
   /* ---------------------------------------------------------------*/
  ;
  if (converseVar.validationMsgNum != 0) /* Errors were found*/
    exit stack;
  end
  ;
  ;
end // end FM0M-5000

// Verify scroll request
Function FM0M-5100()
   /* ------------------------------------------------------------*/
   /* If scroll back was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7 /* Scroll back request*/
   && FM0MW00.XXXTSPAG < 2)       /* and no previous pages*/
    ;
    FKWREC.XXX-MOD-ID = "5100"; /* Module identification*/
    converseLib.validationFailed(2); /* No previous page to display*/
    ;
  end
  ;
   /* ------------------------------------------------------------*/
   /* If scroll forward was requested, ensure that pages exist.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf8 /* Scroll forward request*/
   && FM0MW00.XXXTSPAG >= FM0MW00.TA5TSQIX) /* and no more pages*/
    ;
    FKWREC.XXX-MOD-ID = "5100"; /* Module identification*/
    converseLib.validationFailed(3); /* No more pages to display*/
    ;
  end
  ;
  ;
end // end FM0M-5100

// Verify vendor code
Function FM0M-5200()
   /* ------------------------------------------------------------*/
   /* Select the requested row from the table.*/
   /* ------------------------------------------------------------*/
  ;
  set VVNDR001 empty;
  ;
  VVNDR001.FK-VEND-CD = FM0MM110.FK-VEND-CD;
  ;
  ;
  try
    call "IO6180" ("S ", SQLCA, VVNDR001) {isNoRefresh = yes, isExternal = yes};
  end /* Select row*/
  ;
   /* ------------------------------------------------------------*/
   /* If the call was successful, return to the previous process.*/
   /* ------------------------------------------------------------*/
  ;
  if (sysVar.errorCode == "00000000") /* Call successful*/
    ;
    if (SQLCA.VAGen_SQLCODE == 0) /* Normal return code*/
      ;
      return;
    end
    ;
    if (SQLCA.VAGen_SQLCODE == +100) /* No row found*/
      ;
      set FM0MM110.FK-VEND-CD cursor, bold; /* Highlight*/
      FKWREC.XXX-MOD-ID = "5200"; /* Module identification*/
      converseLib.validationFailed(21); /* Vendor code missing or invalid*/
      return;
    end
  end
  ;
   /* ------------------------------------------------------------*/
   /* If data not available, return an error message to the user.*/
   /* Otherwise, indicate that an unexpected error has occurred.*/
   /* ------------------------------------------------------------*/
  ;
  TA1REC.TA1MAP = sysVar.errorCode; /* CSP return code*/
  TAEREC.SQLCAREC = SQLCA.SQLCAREC; /* SQL Commarea*/
  ;
  FKWREC.XXX-MOD-ID = "5200"; /* Module identification*/
  ;
  if (sysVar.errorCode == "00000000" /* Call successful*/
   && SQLCA.VAGen_SQLCODE == -911)   /* and resource not available*/
    ;
    converseLib.validationFailed(11); /* Data was not available*/
    TA1REC.TA1FUNC = "POST"; /* Termination function*/
    ;
  else
    ;
    converseLib.validationFailed(10); /* Unexpected error occurred*/
    TA1REC.TA1FUNC = "RETN"; /* Termination function*/
    ;
    converseLib.clearScreen();
     /* Clear screen before display*/
    ;
  end
  ;
  TA1REC.TA1TYPE = "DB2 "; /* Type of error*/
  TA1REC.TA1LOC = "VERIFY VENDOR CODE";
  TA1REC.TA1PGMAP = COMMAREA.CACURRAP; /* Program application*/
  TA1REC.TA1PGMNM = FKWREC.XXX-MOD-ID; /* Program name*/
  TA1REC.TA1DBASE = "DCMPNT  "; /* Data base name*/
  TA1REC.TA1TBLVU = "VVNDR001"; /* Table view name*/
  TA1REC.TA1TBLKE = VVNDR001.VVNDR001-GROUP; /* Key*/
  ;
  call "TA0020" (TA1REC, TAEREC) {isNoRefresh = yes, isExternal = yes}; /* Error diagnosis routine*/
  ;
  exit stack; /* Exit to display map*/
  ;
  ;
end // end FM0M-5200

// Process valid request
Function FM0M-6000()
   /* ------------------------------------------------------------*/
   /* If pf7 or pf8 pressed, process scroll request.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf7) /* Pf7 pressed*/
    ;
    FM0MW00.XXXTSPAG = FM0MW00.XXXTSPAG - 1; /* Decrement page*/
    FM0MW00.FM0MW-FMAT-MAP-SW = "Y";
    return;
  end
  ;
  if (converseVar.eventKey is pf8) /* Pf8 pressed*/
    ;
    FM0MW00.XXXTSPAG = FM0MW00.XXXTSPAG + 1; /* Increment page*/
    FM0MW00.FM0MW-FMAT-MAP-SW = "Y";
    return;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* Process application transfer request.*/
   /* ------------------------------------------------------------*/
  ;
  if (converseVar.eventKey is pf12 /* PF12 was pressed*/
   || converseVar.eventKey is pf13) /* PF14 was pressed*/
    ;
    set FKWREC empty; /* Initialize fkwrec*/
    FKWREC.FK-VEND-CD[1] = FM0MM110.FK-VEND-CD; /* Vendor*/
    ;
    FM0MW00.FM0MW-IDX = 1; /* Init index*/
    while (FM0MW00.FM0MW-IDX <= FM0MW00.FM0MW-NBR-MAP-ROWS)
      ;
      if (FM0MM110.FM0MM-SELECT[FM0MW-IDX] == "S") /* If line selected*/
        ;
        FKWREC.FK-MAT-GRP-CD = FM0MM110.FK-MAT-GRP-CD[FM0MW-IDX];
        FM0MW00.FM0MW-IDX = FM0MW00.FM0MW-NBR-MAP-ROWS;
      end
      FM0MW00.FM0MW-IDX = FM0MW00.FM0MW-IDX + 1;
    end
    ;
    ;
    if (converseVar.eventKey is pf12) /* PF12 pressed*/
      COMMAREA.CATOAP = "FM0F"; /* to applicaiton*/
      COMMAREA.CAITEM = FM0MM110.CAITEM; /* item*/
    end
    ;
    if (converseVar.eventKey is pf13) /* PF13 pressed*/
      COMMAREA.CATOAP = "FM0G"; /* to applicaiton*/
      COMMAREA.CAITEM = FM0MM110.CAITEM; /* item*/
    end
    ;
    XSFKS01(); /* Exit to another application*/
    ;
    set FM0MM110.CATOAP cursor, bold; /* Highlight*/
    ;
    exit stack; /* Exit to display map*/
    ;
  end
  ;
  ;
   /* ------------------------------------------------------------*/
   /* If key changed, exit to obtain the data.*/
   /* ------------------------------------------------------------*/
  ;
  if (FM0MM110.FK-VEND-CD != FM0MW01.FK-VEND-CD)
    ;
    FM0MW00.FM0MW-REQUEST-DATA-SW = "Y";
    return;
  end
  ;
  ;
end // end FM0M-6000

//*** RECORD=FM0MW00 ****
// ----------------------------
// Application working storage.
// ----------------------------
// ***********************
Record FM0MW00 type basicRecord
  10 FM0MW-REQUEST-DATA-SW FM0MW-REQUEST-DATA-SW ; 
  10 FM0MW-FMAT-MAP-SW FM0MW-FMAT-MAP-SW ; 
  10 FM0MW-END-VMGRP001-CSR-SW FM0MW-END-VMGRP001-CSR-SW ; 
  10 XXXTSLEN XXXTSLEN ; 
  10 XXXTSPAG XXXTSPAG ; 
  10 TA5TSQIX TA5TSQIX ; 
  10 FM0MW-IDX FM0MW-IDX ; 
  10 FM0MW-NBR-MAP-ROWS FM0MW-NBR-MAP-ROWS ; 
end // end FM0MW00

//*** RECORD=FM0MW01 ****
// ------------------------------------------------------------
// Application display storage.
// ------------------------------------------------------------
// 
// ***********************
Record FM0MW01 type basicRecord
  5 XXXTSLEN XXXTSLEN ; 
  5 * char(490) ; 
    10 FK-VEND-CD FK-VEND-CD ; 
    10 FK-VEND-SNM FK-VEND-SNM ; 
    10 FK-MAT-GRP-CD FK-MAT-GRP-CD [14] ; 
    10 FK-MAT-GRP-DESC FK-MAT-GRP-DESC [14] ; 
    10 XMU-MAT-UOM-CD XMU-MAT-UOM-CD [14] ; 
    10 XMU-MAT-UOM-DESC XMU-MAT-UOM-DESC [14] ; 
end // end FM0MW01

// End DCMPNT.VMGRP001 csr switch
DataItem FM0MW-END-VMGRP001-CSR-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Format the map switch
DataItem FM0MW-FMAT-MAP-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

// Generic index
DataItem FM0MW-IDX smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Number of rows on map
DataItem FM0MW-NBR-MAP-ROWS smallint {
  currency = no, numericSeparator = no, sign = none, align = right, 
  fillCharacter = " ", inputRequired = no
}
end

// Request for data switch
DataItem FM0MW-REQUEST-DATA-SW char(1)  {
  align = left, fillCharacter = nullFill, inputRequired = no
}
end

